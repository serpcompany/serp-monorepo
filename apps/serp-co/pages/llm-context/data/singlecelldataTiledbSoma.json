[
  {
    "owner": "single-cell-data",
    "repo": "tiledb-soma",
    "content": "TITLE: Opening a SOMA Experiment from a Tarball in Python\nDESCRIPTION: Extracts a tarball containing PBMC data and opens it as a SOMA Experiment object. This demonstrates how to load data for analysis.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/apis/python/notebooks/tutorial_soma_objects.ipynb#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport tarfile\nimport tempfile\n\ndense_uri = tempfile.mktemp()\nwith tarfile.open(\"data/pbmc3k-dense.tgz\") as handle:\n    handle.extractall(dense_uri)\nexperiment = tiledbsoma.Experiment.open(dense_uri)\n```\n\n----------------------------------------\n\nTITLE: Querying Subsets of SOMA DataFrame in Python\nDESCRIPTION: Demonstrates various ways to query subsets of a SOMA DataFrame, including slicing rows and columns, and applying filters.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/apis/python/notebooks/tutorial_soma_objects.ipynb#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nobs.read((slice(0,10),)).concat().to_pandas()\n```\n\nLANGUAGE: python\nCODE:\n```\nobs.read((slice(0, 10),), column_names=[\"obs_id\", \"n_genes\"]).concat().to_pandas()\n```\n\nLANGUAGE: python\nCODE:\n```\nobs.read((slice(None),), value_filter=\"n_genes > 1500\").concat().to_pandas()\n```\n\n----------------------------------------\n\nTITLE: Installing TileDB-SOMA via pip\nDESCRIPTION: Command to install the TileDB-SOMA package using pip package manager.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/apis/python/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython -m pip install tiledbsoma\n```\n\n----------------------------------------\n\nTITLE: Importing TileDB-SOMA in Python\nDESCRIPTION: Imports the tiledbsoma library to work with SOMA objects for single-cell data analysis.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/apis/python/notebooks/tutorial_soma_objects.ipynb#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport tiledbsoma\n```\n\n----------------------------------------\n\nTITLE: Reading SOMA DenseNDArray Data in Python\nDESCRIPTION: Shows how to read data from a SOMA DenseNDArray and convert it to different formats like PyArrow Tensor and NumPy array.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/apis/python/notebooks/tutorial_soma_objects.ipynb#2025-04-16_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nX.read()\n```\n\nLANGUAGE: python\nCODE:\n```\nX.read().to_numpy()\n```\n\nLANGUAGE: python\nCODE:\n```\nsliced_X = X.read((slice(0,9),)).to_numpy()\nsliced_X\n```\n\nLANGUAGE: python\nCODE:\n```\nsliced_X.shape\n```\n\n----------------------------------------\n\nTITLE: Unpacking and Opening a SOMA Experiment\nDESCRIPTION: Extracts a tarball containing a PBMC dataset and opens it as a SOMA Experiment object. This creates a temporary directory and extracts the data there.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/doc/source/notebooks/tutorial_soma_objects.ipynb#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport tarfile\nimport tempfile\n\ndense_uri = tempfile.mktemp()\nwith tarfile.open(\"data/pbmc3k-dense.tgz\") as handle:\n    handle.extractall(dense_uri)\nexperiment = tiledbsoma.Experiment.open(dense_uri)\n```\n\n----------------------------------------\n\nTITLE: Converting SOMA Experiment Query Results to AnnData in Python\nDESCRIPTION: Converts the SOMA experiment query results to AnnData format, specifying the X data name.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/apis/python/notebooks/tutorial_exp_query.ipynb#2025-04-16_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nadata = query.to_anndata(X_name=\"data\")\n```\n\n----------------------------------------\n\nTITLE: Reading SOMA DataFrame to Pandas in Python\nDESCRIPTION: Shows how to read a SOMA DataFrame and convert it to a Pandas DataFrame for further analysis.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/apis/python/notebooks/tutorial_soma_objects.ipynb#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nobs.read().concat().to_pandas()\n```\n\n----------------------------------------\n\nTITLE: Inspecting SOMA DenseNDArray in Python\nDESCRIPTION: Demonstrates how to access and inspect a SOMA DenseNDArray object, which represents dense N-dimensional array data.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/apis/python/notebooks/tutorial_soma_objects.ipynb#2025-04-16_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nX = experiment[\"ms\"][\"RNA\"].X\n```\n\nLANGUAGE: python\nCODE:\n```\nX = X[\"data\"]\nX\n```\n\nLANGUAGE: python\nCODE:\n```\nX.schema\n```\n\nLANGUAGE: python\nCODE:\n```\nX.shape\n```\n\n----------------------------------------\n\nTITLE: Reading SOMA SparseNDArray Data in Python\nDESCRIPTION: Shows how to read data from a SOMA SparseNDArray and convert it to different formats like SciPy sparse matrix.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/apis/python/notebooks/tutorial_soma_objects.ipynb#2025-04-16_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nX.read()\n```\n\nLANGUAGE: python\nCODE:\n```\ntensor = X.read().coos().concat()\n```\n\nLANGUAGE: python\nCODE:\n```\ntensor.to_scipy()\n```\n\nLANGUAGE: python\nCODE:\n```\nsliced_X = X.read((slice(0,9),)).coos().concat().to_scipy()\nsliced_X\n```\n\nLANGUAGE: python\nCODE:\n```\nsliced_X.nonzero()[0]\n```\n\n----------------------------------------\n\nTITLE: Converting SOMA Query Results to AnnData in Python\nDESCRIPTION: Converts the SOMA query results to AnnData format, which is commonly used in single-cell analysis workflows.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/doc/source/notebooks/tutorial_exp_query.ipynb#2025-04-16_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nadata = query.to_anndata(X_name=\"data\")\n\nadata\n```\n\n----------------------------------------\n\nTITLE: Inspecting SOMA DataFrame Schema and Domain in Python\nDESCRIPTION: Demonstrates how to inspect the schema and domain of a SOMA DataFrame object, which represents tabular data in the experiment.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/apis/python/notebooks/tutorial_soma_objects.ipynb#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nobs = experiment.obs\n```\n\nLANGUAGE: python\nCODE:\n```\nobs.domain\n```\n\nLANGUAGE: python\nCODE:\n```\nobs.schema\n```\n\n----------------------------------------\n\nTITLE: Opening a Sparse SOMA Experiment in Python\nDESCRIPTION: Shows how to open a SOMA Experiment with sparse data representation, demonstrating the use of SparseNDArray.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/apis/python/notebooks/tutorial_soma_objects.ipynb#2025-04-16_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport tarfile\nimport tempfile\n\nsparse_uri = tempfile.mktemp()\nwith tarfile.open(\"data/pbmc3k-sparse.tgz\") as handle:\n    handle.extractall(sparse_uri)\nexperiment = tiledbsoma.Experiment.open(sparse_uri)\n```\n\n----------------------------------------\n\nTITLE: Reading SOMA Experiment Observation Data in Python\nDESCRIPTION: Reads the 'louvain' column from the observation dataframe, concatenates the results, and converts to a pandas DataFrame.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/apis/python/notebooks/tutorial_exp_query.ipynb#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\np = exp.obs.read(column_names=['louvain']).concat().to_pandas()\np\n```\n\n----------------------------------------\n\nTITLE: Accessing SOMA Collection Members in Python\nDESCRIPTION: Shows how to access members of a SOMA Collection object, which represents a container of named SOMA objects.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/apis/python/notebooks/tutorial_soma_objects.ipynb#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nexperiment.ms\n```\n\nLANGUAGE: python\nCODE:\n```\nexperiment.ms[\"raw\"]\n```\n\n----------------------------------------\n\nTITLE: Filtering DataFrame with Value Condition\nDESCRIPTION: Demonstrates how to use value_filter to retrieve only rows that meet a specified condition.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/doc/source/notebooks/tutorial_soma_objects.ipynb#2025-04-16_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nobs.read((slice(None),), value_filter=\"n_genes > 1500\").concat().to_pandas()\n```\n\n----------------------------------------\n\nTITLE: Creating a SOMA AxisQuery for Specific Cell Types in Python\nDESCRIPTION: Constructs a SOMA AxisQuery object to filter observations based on specific 'louvain' values (cell types).\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/apis/python/notebooks/tutorial_exp_query.ipynb#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nobs_query = soma.AxisQuery(value_filter='louvain in [\"B cells\", \"NK cells\"]')\n```\n\n----------------------------------------\n\nTITLE: Retrieving Gene-Specific Expression Values\nDESCRIPTION: Demonstrates a more complex operation: filtering the var DataFrame to find a specific gene and then retrieving its expression values from the X matrix.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/doc/source/notebooks/tutorial_soma_objects.ipynb#2025-04-16_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nvar = experiment.ms[\"RNA\"].var\nidx = var.read(value_filter=\"var_id == 'ICOSLG'\").concat()[\"soma_joinid\"].to_numpy()\n\nX.read((None, int(idx[0]))).to_numpy()\n```\n\n----------------------------------------\n\nTITLE: Accessing SOMA Experiment Components in Python\nDESCRIPTION: Shows how to access the 'ms' (measurements) and 'obs' (observations) components of a SOMA Experiment object.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/apis/python/notebooks/tutorial_soma_objects.ipynb#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nexperiment.ms\n```\n\nLANGUAGE: python\nCODE:\n```\nexperiment.obs\n```\n\n----------------------------------------\n\nTITLE: Converting DataFrame to Pandas\nDESCRIPTION: Reads the entire SOMA DataFrame into memory, concatenates the results, and converts to a Pandas DataFrame.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/doc/source/notebooks/tutorial_soma_objects.ipynb#2025-04-16_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nobs.read().concat().to_pandas()\n```\n\n----------------------------------------\n\nTITLE: Converting H5AD data to TileDB-SOMA format\nDESCRIPTION: Steps to convert a pbmc3k H5AD file to TileDB-SOMA format. The process includes downloading source data, removing previous datasets, and creating both sparse and dense representations.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/apis/python/notebooks/data/README.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ntiledbsoma.io.from_h5ad\n```\n\n----------------------------------------\n\nTITLE: Converting to SciPy Sparse Matrix\nDESCRIPTION: Demonstrates converting a SparseNDArray to a SciPy COO matrix for further analysis.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/doc/source/notebooks/tutorial_soma_objects.ipynb#2025-04-16_snippet_28\n\nLANGUAGE: python\nCODE:\n```\ntensor.to_scipy()\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Subset of DataFrame Rows\nDESCRIPTION: Demonstrates how to read only a subset of rows (first 10) from a SOMA DataFrame without loading the entire dataset.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/doc/source/notebooks/tutorial_soma_objects.ipynb#2025-04-16_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nobs.read((slice(0,10),)).concat().to_pandas()\n```\n\n----------------------------------------\n\nTITLE: Reading DataFrame Slices\nDESCRIPTION: Demonstrates various ways to slice and read data from a SOMA DataFrame, including single row, multiple rows, and column selection.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/apis/python/notebooks/tutorial_soma_reading.ipynb#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nobs.read([[0]]).concat().to_pandas()\n```\n\nLANGUAGE: python\nCODE:\n```\nobs.read([[2, 5]]).concat().to_pandas()\n```\n\nLANGUAGE: python\nCODE:\n```\nobs.read([slice(0, 5)]).concat().to_pandas()\n```\n\nLANGUAGE: python\nCODE:\n```\nobs.read([slice(0, 5)], column_names=[\"obs_id\", \"louvain\"]).concat().to_pandas()\n```\n\n----------------------------------------\n\nTITLE: Executing a SOMA Experiment Axis Query in Python\nDESCRIPTION: Performs an axis query on the SOMA experiment using the previously defined observation query.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/apis/python/notebooks/tutorial_exp_query.ipynb#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nquery = exp.axis_query(\"RNA\", obs_query=obs_query)\n```\n\n----------------------------------------\n\nTITLE: Accessing SOMA Experiment Query X Data in Python\nDESCRIPTION: Retrieves the X data from the query results, concatenates it, and converts it to a pandas DataFrame for inspection.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/apis/python/notebooks/tutorial_exp_query.ipynb#2025-04-16_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nquery.X(\"data\").tables().concat().to_pandas()\n```\n\n----------------------------------------\n\nTITLE: Working with SparseNDArray\nDESCRIPTION: Demonstrates reading and manipulating sparse array data, including conversion to different formats and slicing operations.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/apis/python/notebooks/tutorial_soma_reading.ipynb#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ntensor = X.read().coos().concat()\n```\n\nLANGUAGE: python\nCODE:\n```\nn_obs = len(obs)\nn_var = len(experiment.ms[\"RNA\"].var)\n\ntensor = X.read().coos((n_obs, n_var)).concat()\n```\n\nLANGUAGE: python\nCODE:\n```\nX.read([slice(0, 5)]).coos().concat()\n```\n\n----------------------------------------\n\nTITLE: Inspecting DataFrame Schema\nDESCRIPTION: Retrieves the schema of a SOMA DataFrame, which defines column names and data types.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/doc/source/notebooks/tutorial_soma_objects.ipynb#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nobs.schema\n```\n\n----------------------------------------\n\nTITLE: Reading Sparse Matrix into Memory\nDESCRIPTION: Demonstrates reading a SparseNDArray into memory, returning a SparseNDArrayRead object.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/doc/source/notebooks/tutorial_soma_objects.ipynb#2025-04-16_snippet_26\n\nLANGUAGE: python\nCODE:\n```\nX.read()\n```\n\n----------------------------------------\n\nTITLE: Comparing Original and Queried Dataset Sizes in Python\nDESCRIPTION: Displays the number of observations and variables in both the original experiment and the query result to show the effect of filtering.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/doc/source/notebooks/tutorial_exp_query.ipynb#2025-04-16_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n[exp.obs.count, exp.ms[\"RNA\"].var.count]\n\n[query.n_obs, query.n_vars]\n```\n\n----------------------------------------\n\nTITLE: Accessing X Matrix from RNA Measurement\nDESCRIPTION: Retrieves the X matrix (gene expression matrix) from the RNA measurement in the experiment.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/doc/source/notebooks/tutorial_soma_objects.ipynb#2025-04-16_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nX = experiment[\"ms\"][\"RNA\"].X\nX\n```\n\n----------------------------------------\n\nTITLE: Accessing Experiment Components\nDESCRIPTION: Demonstrates how to access the measurement collection (ms) component of a SOMA Experiment.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/doc/source/notebooks/tutorial_soma_objects.ipynb#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nexperiment.ms\n```\n\n----------------------------------------\n\nTITLE: Converting DenseNDArray to NumPy\nDESCRIPTION: Shows how to convert a DenseNDArray to a NumPy array for further analysis.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/doc/source/notebooks/tutorial_soma_objects.ipynb#2025-04-16_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nX.read().to_numpy()\n```\n\n----------------------------------------\n\nTITLE: Grouping and Counting SOMA Experiment Observation Data in Python\nDESCRIPTION: Groups the observation data by the 'louvain' column and counts the occurrences of each unique value, then sorts the results.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/apis/python/notebooks/tutorial_exp_query.ipynb#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\np.groupby('louvain').size().sort_values()\n```\n\n----------------------------------------\n\nTITLE: Slicing a SparseNDArray\nDESCRIPTION: Shows how to read only a specific slice (first 10 rows) of a SparseNDArray and convert it to a SciPy matrix.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/doc/source/notebooks/tutorial_soma_objects.ipynb#2025-04-16_snippet_29\n\nLANGUAGE: python\nCODE:\n```\nsliced_X = X.read((slice(0,9),)).coos().concat().to_scipy()\nsliced_X\n```\n\n----------------------------------------\n\nTITLE: Accessing SOMA Experiment Observation Keys in Python\nDESCRIPTION: Retrieves the keys of the observation (obs) dataframe in the SOMA Experiment to see available fields for querying.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/doc/source/notebooks/tutorial_exp_query.ipynb#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nexp.obs.keys()\n```\n\n----------------------------------------\n\nTITLE: Filtering DataFrame with Complex Queries\nDESCRIPTION: Examples of filtering SOMA DataFrame using complex query conditions on cell types and gene counts.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/apis/python/notebooks/tutorial_soma_reading.ipynb#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nobs.read(value_filter=\"louvain == 'B cells'\").concat().to_pandas()\n```\n\nLANGUAGE: python\nCODE:\n```\nobs.read(value_filter=\"(louvain == 'CD4 T cells') or (louvain == 'CD8 T cells')\").concat().to_pandas()\n```\n\nLANGUAGE: python\nCODE:\n```\nobs.read(value_filter=\"(louvain == 'CD4 T cells') and (n_genes > 1500)\").concat().to_pandas()\n```\n\n----------------------------------------\n\nTITLE: Accessing SOMA Experiment Observation Keys in Python\nDESCRIPTION: Retrieves the keys of the observation dataframe in a SOMA Experiment, showing available fields for querying.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/apis/python/notebooks/tutorial_exp_query.ipynb#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nexp.obs.keys()\n```\n\n----------------------------------------\n\nTITLE: Checking Shape of Sliced Array\nDESCRIPTION: Shows how to check the shape of a sliced DenseNDArray.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/doc/source/notebooks/tutorial_soma_objects.ipynb#2025-04-16_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nsliced_X.shape\n```\n\n----------------------------------------\n\nTITLE: SOMATileDBContext Class Reference\nDESCRIPTION: Class documentation showing available methods and attributes for SOMATileDBContext. Includes initialization, replace method, and access to native context, configuration, timestamps and threadpool properties.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/doc/source/python-tiledbsoma-somatiledbcontext.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass SOMATileDBContext:\n    def __init__(self)\n    def replace(self)\n    \n    # Attributes\n    native_context\n    tiledb_config\n    timestamp\n    timestamp_ms\n    threadpool\n```\n\n----------------------------------------\n\nTITLE: Opening a SOMA Experiment from a Tarfile in Python\nDESCRIPTION: Extracts a tarfile containing PBMC data and opens it as a SOMA Experiment. Uses the tarfile and tempfile modules to handle file operations.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/doc/source/notebooks/tutorial_exp_query.ipynb#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport tarfile\nimport tempfile\n\nsparse_uri = tempfile.mktemp()\nwith tarfile.open(\"data/pbmc3k-sparse.tgz\") as handle:\n    handle.extractall(sparse_uri)\nexp = soma.Experiment.open(sparse_uri)\n```\n\n----------------------------------------\n\nTITLE: Selecting Specific DataFrame Columns\nDESCRIPTION: Shows how to read a subset of columns from a SOMA DataFrame, retrieving only specific columns for the first 10 rows.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/doc/source/notebooks/tutorial_soma_objects.ipynb#2025-04-16_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nobs.read((slice(0, 10),), column_names=[\"obs_id\", \"n_genes\"]).concat().to_pandas()\n```\n\n----------------------------------------\n\nTITLE: Counting Non-Zero Elements in Sparse Matrix\nDESCRIPTION: Shows how to get the number of non-zero elements in a SparseNDArray.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/doc/source/notebooks/tutorial_soma_objects.ipynb#2025-04-16_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nX.nnz\n```\n\n----------------------------------------\n\nTITLE: Querying SOMA DenseNDArray with DataFrame Filter in Python\nDESCRIPTION: Demonstrates how to query a SOMA DenseNDArray using a filter on a related DataFrame to select specific data points.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/apis/python/notebooks/tutorial_soma_objects.ipynb#2025-04-16_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nvar = experiment.ms[\"RNA\"].var\nidx = var.read(value_filter=\"var_id == 'ICOSLG'\").concat()[\"soma_joinid\"].to_numpy()\n\nX.read((None, int(idx[0]))).to_numpy()\n```\n\n----------------------------------------\n\nTITLE: Appending New Data\nDESCRIPTION: Performs the actual append operation to add new data to the existing SOMA experiment.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/doc/source/notebooks/tutorial_soma_append_mode.ipynb#2025-04-16_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ntiledbsoma.io.from_anndata(\n    experiment_uri,\n    ad2,\n    measurement_name=measurement_name,\n    registration_mapping=rd,\n)\n```\n\n----------------------------------------\n\nTITLE: Slicing a DenseNDArray\nDESCRIPTION: Demonstrates how to read only a specific slice (first 10 rows) of a DenseNDArray.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/doc/source/notebooks/tutorial_soma_objects.ipynb#2025-04-16_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nsliced_X = X.read((slice(0,9),)).to_numpy()\nsliced_X\n```\n\n----------------------------------------\n\nTITLE: Accessing Observation DataFrame\nDESCRIPTION: Shows how to access the observation (obs) DataFrame component of a SOMA Experiment.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/doc/source/notebooks/tutorial_soma_objects.ipynb#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nexperiment.obs\n```\n\n----------------------------------------\n\nTITLE: Converting SparseNDArray to COO Format\nDESCRIPTION: Shows how to convert a SparseNDArray to COO (Coordinate) format as an Arrow Tensor.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/doc/source/notebooks/tutorial_soma_objects.ipynb#2025-04-16_snippet_27\n\nLANGUAGE: python\nCODE:\n```\ntensor = X.read().coos().concat()\n```\n\n----------------------------------------\n\nTITLE: Unpacking and Opening a Sparse Matrix Experiment\nDESCRIPTION: Extracts a tarball containing a PBMC dataset with sparse representation and opens it as a SOMA Experiment object.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/doc/source/notebooks/tutorial_soma_objects.ipynb#2025-04-16_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nimport tarfile\nimport tempfile\n\nsparse_uri = tempfile.mktemp()\nwith tarfile.open(\"data/pbmc3k-sparse.tgz\") as handle:\n    handle.extractall(sparse_uri)\nexperiment = tiledbsoma.Experiment.open(sparse_uri)\n```\n\n----------------------------------------\n\nTITLE: Reading DenseNDArray into Memory\nDESCRIPTION: Demonstrates reading a DenseNDArray into memory, returning a PyArrow Tensor.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/doc/source/notebooks/tutorial_soma_objects.ipynb#2025-04-16_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nX.read()\n```\n\n----------------------------------------\n\nTITLE: Setting Up Experiment URI\nDESCRIPTION: Creates a unique URI for the experiment using timestamp in the temporary directory.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/doc/source/notebooks/tutorial_soma_append_mode.ipynb#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport datetime\n\nstamp = datetime.datetime.today().strftime(\"%Y%m%d-%H%M%S\")\nexperiment_uri = f\"/tmp/append-example-{stamp}\"\nexperiment_uri\n```\n\n----------------------------------------\n\nTITLE: Verifying Sparse Matrix Slice\nDESCRIPTION: Demonstrates how to verify the non-zero coordinates in the first dimension of a sliced sparse matrix.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/doc/source/notebooks/tutorial_soma_objects.ipynb#2025-04-16_snippet_30\n\nLANGUAGE: python\nCODE:\n```\nsliced_X.nonzero()[0]\n```\n\n----------------------------------------\n\nTITLE: Accessing Data from X Matrix Collection\nDESCRIPTION: Shows how to access the actual data component from the X matrix Collection.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/doc/source/notebooks/tutorial_soma_objects.ipynb#2025-04-16_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nX = X[\"data\"]\nX\n```\n\n----------------------------------------\n\nTITLE: Getting Sparse Matrix Shape\nDESCRIPTION: Retrieves the shape of a SparseNDArray, which defines the dimensions of the matrix.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/doc/source/notebooks/tutorial_soma_objects.ipynb#2025-04-16_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nX.shape\n```\n\n----------------------------------------\n\nTITLE: Setting Measurement Name\nDESCRIPTION: Defines the measurement modality name for the SOMA experiment.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/doc/source/notebooks/tutorial_soma_append_mode.ipynb#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nmeasurement_name = \"RNA\"\n```\n\n----------------------------------------\n\nTITLE: Subsetting 10x Genomics Single-Cell Data with Scanpy in Python\nDESCRIPTION: This code snippet demonstrates how to read a 10x Genomics H5 file using Scanpy, subset the data to create a small sample, and save it as an H5AD file. It selects the first 100 cells and 100 features from the original dataset.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/data/10x-pbmc-multiome-v1.0/README.md#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport scanpy\n\nds = scanpy.read_10x_h5(\n    \"10k_PBMC_Multiome_nextgem_Chromium_Controller_raw_feature_bc_matrix.h5\"\n)\nds[:100, :100].write_h5ad(\"subset_1.h5ad\")\n```\n\n----------------------------------------\n\nTITLE: Reading Initial Dataset\nDESCRIPTION: Demonstrates reading data from the SOMA experiment, including obs, var, and X matrices.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/doc/source/notebooks/tutorial_soma_append_mode.ipynb#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nwith tiledbsoma.Experiment.open(experiment_uri) as exp:\n    print(\n        exp.obs.read(column_names=[\"obs_id\", \"n_genes_by_counts\", \"when\"])\n        .concat()\n        .to_pandas()\n    )\n```\n\n----------------------------------------\n\nTITLE: Getting Dense Matrix Shape\nDESCRIPTION: Retrieves the shape of a DenseNDArray, which defines the dimensions of the matrix.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/doc/source/notebooks/tutorial_soma_objects.ipynb#2025-04-16_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nX.shape\n```\n\n----------------------------------------\n\nTITLE: Preparing Second Dataset\nDESCRIPTION: Creates a modified copy of the initial dataset for appending, with updated IDs and values.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/doc/source/notebooks/tutorial_soma_append_mode.ipynb#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nad2 = ad1.copy()\nad2.obs.index = [e.replace(\"-1\", \"-2\") for e in ad1.obs.index]\nad2.obs[\"when\"] = [\"Tuesday\"] * len(ad2.obs)\n\nad2.X *= 10\n```\n\n----------------------------------------\n\nTITLE: Converting Seurat PBMC Data to H5AD Format in R\nDESCRIPTION: Converts a small PBMC dataset from the Seurat R package to h5ad format for use with AnnData. This involves first saving as h5Seurat format and then converting to h5ad.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/apis/python/testdata/README.md#2025-04-16_snippet_0\n\nLANGUAGE: r\nCODE:\n```\n> remotes::install_github(\"mojaveazure/seurat-disk\")\n> library(SeuratDisk)\n> library(anndata)\n>\n> data(\"pbmc_small\", package = \"SeuratObject\")\n> SaveH5Seurat(pbmc_small, filename='pbmc-small.h5Seurat')\n> Convert(\"pbmc-small.h5Seurat\", dest=\"h5ad\")\n```\n\n----------------------------------------\n\nTITLE: Loading PBMC Dataset\nDESCRIPTION: Extracts and opens a PBMC dataset from a tar archive into a temporary location using TileDB-SOMA.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/apis/python/notebooks/tutorial_soma_reading.ipynb#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport tarfile\nimport tempfile\n\nsparse_uri = tempfile.mktemp()\nwith tarfile.open(\"data/pbmc3k-sparse.tgz\") as handle:\n    handle.extractall(sparse_uri)\nexperiment = tiledbsoma.Experiment.open(sparse_uri)\n```\n\n----------------------------------------\n\nTITLE: Inspecting Dense Matrix Schema\nDESCRIPTION: Retrieves the schema information from a DenseNDArray, showing dimensions and data type.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/doc/source/notebooks/tutorial_soma_objects.ipynb#2025-04-16_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nX.schema\n```\n\n----------------------------------------\n\nTITLE: Registering New Data\nDESCRIPTION: Registers new data for appending to the existing SOMA experiment.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/doc/source/notebooks/tutorial_soma_append_mode.ipynb#2025-04-16_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nrd = tiledbsoma.io.register_anndatas(\n    experiment_uri,\n    [ad2],\n    measurement_name=measurement_name,\n    obs_field_name=\"obs_id\",\n    var_field_name=\"var_id\",\n)\n```\n\n----------------------------------------\n\nTITLE: Measurement Class Definition in RST\nDESCRIPTION: ReStructuredText documentation layout for the TileDB-SOMA Measurement class, defining its methods and attributes using Sphinx autodoc directives.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/doc/source/python-tiledbsoma-measurement.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\ntiledbsoma.Measurement\n======================\n\n.. currentmodule:: tiledbsoma\n\n.. autoclass:: Measurement\n\n   .. automethod:: __init__\n\n   .. rubric:: Methods\n\n   .. autosummary::\n      :toctree: _generated\n\n      ~Measurement.__init__\n      ~Measurement.exists\n      ~Measurement.create\n      ~Measurement.open\n      ~Measurement.reopen\n      ~Measurement.close\n      ~Measurement.verify_open_for_writing\n\n      ~Measurement.items\n      ~Measurement.keys\n      ~Measurement.values\n      ~Measurement.members\n      ~Measurement.get\n      ~Measurement.set\n      ~Measurement.update\n      ~Measurement.clear\n      ~Measurement.pop\n      ~Measurement.popitem\n      ~Measurement.setdefault\n\n      ~Measurement.add_new_collection\n      ~Measurement.add_new_dataframe\n      ~Measurement.add_new_dense_ndarray\n      ~Measurement.add_new_sparse_ndarray\n\n   .. rubric:: Attributes\n\n   .. autosummary::\n      :toctree: _generated\n\n      ~Measurement.uri\n      ~Measurement.soma_type\n      ~Measurement.mode\n      ~Measurement.closed\n      ~Measurement.context\n      ~Measurement.metadata\n      ~Measurement.tiledb_timestamp\n      ~Measurement.tiledb_timestamp_ms\n      ~Measurement.var\n      ~Measurement.var_spatial_presence\n      ~Measurement.obsm\n      ~Measurement.obsp\n      ~Measurement.varm\n      ~Measurement.varp\n      ~Measurement.X\n```\n\n----------------------------------------\n\nTITLE: Grouping and Counting SOMA Experiment Observations in Python\nDESCRIPTION: Groups the observation data by the 'louvain' column and counts the occurrences of each unique value, sorting the results.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/doc/source/notebooks/tutorial_exp_query.ipynb#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\np.groupby('louvain').size().sort_values()\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Specific Collection Element\nDESCRIPTION: Demonstrates how to access a specific element from a Collection using dictionary-style syntax.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/doc/source/notebooks/tutorial_soma_objects.ipynb#2025-04-16_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nexperiment.ms[\"raw\"]\n```\n\n----------------------------------------\n\nTITLE: Inspecting Sparse Matrix Schema\nDESCRIPTION: Retrieves and displays the schema of a SparseNDArray, showing its dimensions and data type.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/doc/source/notebooks/tutorial_soma_objects.ipynb#2025-04-16_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nX = experiment.ms[\"RNA\"].X[\"data\"]\nX.schema\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple AnnData Objects from Template\nDESCRIPTION: Helper function to generate multiple AnnData objects by copying and modifying a template with different timestamps and scaling factors. Creates simulated lab run data for Wednesday through Friday.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/doc/source/notebooks/tutorial_soma_append_mode.ipynb#2025-04-16_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ndef make_ad(when, scale, obs_id_suffix):\n    ad = ad1.copy()\n    ad.obs.index = [e.replace(\"-1\", obs_id_suffix) for e in ad.obs.index]\n    ad.obs[\"when\"] = [when] * len(ad.obs)\n    ad.X *= scale\n    return ad\n\nads = [\n    make_ad(when, scale, f\"-{idx + 3}\")\n    for idx, (when, scale)\n    in enumerate({\n        \"Wednesday\": 20,\n        \"Thursday\": 30,\n        \"Friday\": 40,\n    }.items())\n]\n```\n\n----------------------------------------\n\nTITLE: Documenting TileDB-SOMA Axis Class Structure in RST\nDESCRIPTION: ReStructuredText documentation template defining the structure and documentation elements for the TileDB-SOMA Axis class, including method and attribute definitions.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/doc/source/python-tiledbsoma-axis.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\ntiledbsoma.Axis\n===============\n\n.. currentmodule:: tiledbsoma\n\n.. autoclass:: Axis\n\n   .. automethod:: __init__\n\n   .. rubric:: Methods\n\n   .. autosummary::\n      :toctree: _generated\n\n      ~Axis.__init__\n\n   .. rubric:: Attributes\n\n   .. autosummary::\n      :toctree: _generated\n\n      ~Axis.name\n      ~Axis.unit\n```\n\n----------------------------------------\n\nTITLE: Inspecting DataFrame Domain\nDESCRIPTION: Retrieves the domain information of a SOMA DataFrame, which defines the boundaries within which data can be read or written.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/doc/source/notebooks/tutorial_soma_objects.ipynb#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nobs.domain\n```\n\n----------------------------------------\n\nTITLE: Registering Multiple AnnData Objects\nDESCRIPTION: Registers multiple AnnData objects with SOMA, creating a new experiment from scratch by setting experiment_uri to None.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/doc/source/notebooks/tutorial_soma_append_mode.ipynb#2025-04-16_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nrd2 = tiledbsoma.io.register_anndatas(\n    experiment_uri=None,  # new Experiment, from scratch\n    adatas=ads,\n    measurement_name=measurement_name,\n    obs_field_name=\"obs_id\",\n    var_field_name=\"var_id\",\n)\n```\n\n----------------------------------------\n\nTITLE: Reading Variable Data\nDESCRIPTION: Displays the variable (gene) information from the combined dataset to verify consistency across merged data.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/doc/source/notebooks/tutorial_soma_append_mode.ipynb#2025-04-16_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nwith tiledbsoma.Experiment.open(experiment_uri) as exp:\n    print(\n        exp.ms[\"RNA\"]\n        .var.read(column_names=[\"soma_joinid\", \"var_id\", \"gene_ids\"])\n        .concat()\n        .to_pandas()\n    )\n```\n\n----------------------------------------\n\nTITLE: Defining AffineTransform Schema in JSON\nDESCRIPTION: JSON schema for serializing AffineTransform with matrix transformation and axis specifications.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/encoding_specification.md#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"type\": \"object\",\n    \"properties\": {\n        \"transform_type\": {\"const\": \"AffineTransform\"},\n        \"input_axes\": {\n            \"type\": \"array\",\n            \"items\": {\"type\": \"string\"},\n        },\n        \"output_axes\": {\n            \"type\": \"array\",\n            \"items\": {\"type\": \"string\"},\n        }\n        \"matrix\": {\n            \"type\": \"array\",\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Opening a SOMA Experiment from a Tarfile in Python\nDESCRIPTION: Extracts a tarfile containing SOMA experiment data and opens it as a SOMA Experiment object. Uses temporary directory for extraction.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/apis/python/notebooks/tutorial_exp_query.ipynb#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport tarfile\nimport tempfile\n\nsparse_uri = tempfile.mktemp()\nwith tarfile.open(\"data/pbmc3k-sparse.tgz\") as handle:\n    handle.extractall(sparse_uri)\nexp = soma.Experiment.open(sparse_uri)\n```\n\n----------------------------------------\n\nTITLE: Reading Combined Dataset Observations\nDESCRIPTION: Verifies the combined dataset by reading and displaying observation data including IDs, gene counts, and timestamps.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/doc/source/notebooks/tutorial_soma_append_mode.ipynb#2025-04-16_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nwith tiledbsoma.Experiment.open(experiment_uri) as exp:\n    print(\n        exp.obs.read(column_names=[\"obs_id\", \"n_genes_by_counts\", \"when\"])\n        .concat()\n        .to_pandas()\n    )\n```\n\n----------------------------------------\n\nTITLE: TileDB-SOMA DenseNDArray Class API Documentation\nDESCRIPTION: Sphinx/RST documentation outlining the complete API of the DenseNDArray class, including methods for initialization, data access, array operations and various attributes. The documentation is structured using reStructuredText format with autosummary directives.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/doc/source/python-tiledbsoma-densendarray.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\ntiledbsoma.DenseNDArray\n=======================\n\n.. currentmodule:: tiledbsoma\n\n.. autoclass:: DenseNDArray\n\n   .. automethod:: __init__\n\n   .. rubric:: Methods\n\n   .. autosummary::\n      :toctree: _generated\n\n      ~DenseNDArray.__init__\n      ~DenseNDArray.exists\n      ~DenseNDArray.create\n      ~DenseNDArray.open\n      ~DenseNDArray.reopen\n      ~DenseNDArray.close\n      ~DenseNDArray.read\n      ~DenseNDArray.write\n      ~DenseNDArray.verify_open_for_writing\n\n      ~DenseNDArray.non_empty_domain\n      ~DenseNDArray.resize\n\n      ~DenseNDArray.config_options_from_schema\n\n   .. rubric:: Attributes\n\n   .. autosummary::\n      :toctree: _generated\n\n      ~DenseNDArray.uri\n      ~DenseNDArray.soma_type\n      ~DenseNDArray.schema\n      ~DenseNDArray.is_sparse\n\n      ~DenseNDArray.ndim\n      ~DenseNDArray.shape\n      ~DenseNDArray.maxshape\n      ~DenseNDArray.tiledbsoma_has_upgraded_shape\n\n      ~DenseNDArray.mode\n      ~DenseNDArray.closed\n\n      ~DenseNDArray.context\n      ~DenseNDArray.tiledb_timestamp\n      ~DenseNDArray.tiledb_timestamp_ms\n\n      ~DenseNDArray.metadata\n```\n\n----------------------------------------\n\nTITLE: Defining CoordinateSpace Schema in JSON\nDESCRIPTION: JSON schema for serializing CoordinateSpace with axis names and units.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/encoding_specification.md#2025-04-16_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"type\": \"array\",\n    \"items\": {\n        \"type\": \"object\",\n        \"properities\": {\n            \"name\": {\"type\": \"string\"},\n            \"unit\": {\"type\": [\"string\", \"null\"]}\n        },\n        \"required\": [\"name\", \"unit\"]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Populating TileDB Array with String Data in Python\nDESCRIPTION: This code creates a NumPy array of repeated lowercase letters, then uses TileDB to create an array with the same schema and write the data to it. It demonstrates the use of tiledb.schema_like() and tiledb.Array.create() functions.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/data/simple/dim-uint64_attr-str_26cells/README.md#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport tiledb, numpy as np\n# array of a-z\nd = np.array([chr(c) * (c-96) for c in range(97,123)])\ns = tiledb.schema_like(d)\ntiledb.Array.create(\"/tmp/b1\", s)\nwith tiledb.open(\"/tmp/b1\", \"w\") as A:\n    A[:] = d\n```\n\n----------------------------------------\n\nTITLE: Preparing Initial Dataset\nDESCRIPTION: Loads and prepares the initial PBMC3K dataset with QC metrics and custom timestamp column.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/doc/source/notebooks/tutorial_soma_append_mode.ipynb#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nad1 = sc.datasets.pbmc3k()\nsc.pp.calculate_qc_metrics(ad1, inplace=True)\nad1.obs[\"when\"] = [\"Monday\"] * len(ad1.obs)\n```\n\n----------------------------------------\n\nTITLE: ExperimentAxisQuery Class Reference in RST\nDESCRIPTION: ReStructuredText documentation for the ExperimentAxisQuery class, including method and attribute listings with autogenerated documentation links.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/doc/source/python-tiledbsoma-experimentaxisquery.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\ntiledbsoma.ExperimentAxisQuery\n==============================\n\n.. currentmodule:: tiledbsoma\n\n.. autoclass:: ExperimentAxisQuery\n\n   .. automethod:: __init__\n\n   .. rubric:: Methods\n\n   .. autosummary::\n      :toctree: _generated\n\n      ~ExperimentAxisQuery.X\n      ~ExperimentAxisQuery.__init__\n      ~ExperimentAxisQuery.close\n      ~ExperimentAxisQuery.obs\n      ~ExperimentAxisQuery.obs_joinids\n      ~ExperimentAxisQuery.obs_scene_ids\n      ~ExperimentAxisQuery.obsm\n      ~ExperimentAxisQuery.obsp\n      ~ExperimentAxisQuery.to_anndata\n      ~ExperimentAxisQuery.to_spatialdata\n      ~ExperimentAxisQuery.var\n      ~ExperimentAxisQuery.var_joinids\n      ~ExperimentAxisQuery.var_scene_ids\n      ~ExperimentAxisQuery.varm\n      ~ExperimentAxisQuery.varp\n\n   .. rubric:: Attributes\n\n   .. autosummary::\n      :toctree: _generated\n\n      ~ExperimentAxisQuery.indexer\n      ~ExperimentAxisQuery.n_obs\n      ~ExperimentAxisQuery.n_vars\n```\n\n----------------------------------------\n\nTITLE: UniformScaleTransform Class Definition in Python\nDESCRIPTION: This is a class definition showing the structure of UniformScaleTransform with its methods and attributes. It provides uniform scaling transformation capabilities with properties for matrix operations, axis handling, and scale factors.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/doc/source/python-tiledbsoma-uniform-scale-transform.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: UniformScaleTransform\n\n   .. automethod:: __init__\n\n   .. rubric:: Methods\n\n   .. autosummary::\n      :toctree: _generated\n\n      ~UniformScaleTransform.__init__\n\n   .. rubric:: Attributes\n\n   .. autosummary::\n      :toctree: _generated\n\n      ~UniformScaleTransform.augmented_matrix\n      ~UniformScaleTransform.input_axes\n      ~UniformScaleTransform.inverse_transform\n      ~UniformScaleTransform.mro\n      ~UniformScaleTransform.output_axes\n      ~UniformScaleTransform.register\n      ~UniformScaleTransform.scale\n      ~UniformScaleTransform.scale_factors\n```\n\n----------------------------------------\n\nTITLE: Inspecting SOMA SparseNDArray in Python\nDESCRIPTION: Demonstrates how to inspect the schema, shape, and number of non-zero elements in a SOMA SparseNDArray object.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/apis/python/notebooks/tutorial_soma_objects.ipynb#2025-04-16_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nX = experiment.ms[\"RNA\"].X[\"data\"]\nX.schema\n```\n\nLANGUAGE: python\nCODE:\n```\nX.shape\n```\n\nLANGUAGE: python\nCODE:\n```\nX.nnz\n```\n\n----------------------------------------\n\nTITLE: Collection Class Methods and Attributes - Python\nDESCRIPTION: Complete list of available methods and attributes for the TileDB-SOMA Collection class. Includes initialization, lifecycle management, dictionary-style operations, member management, and collection properties.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/doc/source/python-tiledbsoma-collection.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nCollection\n\n# Lifecycle Methods\n__init__\nexists\ncreate\nopen\nreopen\nclose\nverify_open_for_writing\n\n# Dictionary-style Operations\nitems\nkeys\nvalues\nmembers\nget\nset\nsetdefault\nupdate\nclear\npop\npopitem\n\n# Member Management\nadd_new_collection\nadd_new_dataframe\nadd_new_dense_ndarray\nadd_new_sparse_ndarray\n\n# Attributes\nuri\nclosed\ncontext\nmetadata\nmode\nsoma_type\ntiledb_timestamp\ntiledb_timestamp_ms\n```\n\n----------------------------------------\n\nTITLE: TileDB-SOMA Scene Class API Structure\nDESCRIPTION: Sphinx documentation structure defining the Scene class API including initialization, core methods, data structure management, and spatial transformation operations.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/doc/source/python-tiledbsoma-scene.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\ntiledbsoma.Scene\n================\n\n.. currentmodule:: tiledbsoma\n\n.. autoclass:: Scene\n\n   .. automethod:: __init__\n\n   .. rubric:: Methods\n\n   .. autosummary::\n      :toctree: _generated\n\n      ~Scene.__init__\n      ~Scene.exists\n      ~Scene.create\n      ~Scene.open\n      ~Scene.reopen\n      ~Scene.close\n      ~Scene.verify_open_for_writing\n\n      ~Scene.items\n      ~Scene.keys\n      ~Scene.values\n      ~Scene.members\n      ~Scene.get\n      ~Scene.set\n      ~Scene.setdefault\n      ~Scene.update\n      ~Scene.clear\n      ~Scene.pop\n      ~Scene.popitem\n\n      ~Scene.add_new_collection\n      ~Scene.add_new_dataframe\n      ~Scene.add_new_dense_ndarray\n      ~Scene.add_new_geometry_dataframe\n      ~Scene.add_new_multiscale_image\n      ~Scene.add_new_point_cloud_dataframe\n      ~Scene.add_new_sparse_ndarray\n\n      ~Scene.get_transform_from_geometry_dataframe\n      ~Scene.get_transform_from_multiscale_image\n      ~Scene.get_transform_from_point_cloud_dataframe\n      ~Scene.get_transform_to_geometry_dataframe\n      ~Scene.get_transform_to_multiscale_image\n      ~Scene.get_transform_to_point_cloud_dataframe\n      ~Scene.set_transform_to_geometry_dataframe\n      ~Scene.set_transform_to_multiscale_image\n      ~Scene.set_transform_to_point_cloud_dataframe\n\n   .. rubric:: Attributes\n\n   .. autosummary::\n      :toctree: _generated\n\n      ~Scene.uri\n      ~Scene.context\n      ~Scene.metadata\n\n      ~Scene.mode\n      ~Scene.closed\n      ~Scene.soma_type\n      ~Scene.tiledb_timestamp\n      ~Scene.tiledb_timestamp_ms\n\n      ~Scene.coordinate_space\n      ~Scene.img\n      ~Scene.obsl\n      ~Scene.varl\n```\n\n----------------------------------------\n\nTITLE: TileDBWriteOptions Class Structure Definition\nDESCRIPTION: RST documentation structure defining the TileDBWriteOptions class, including its initialization method, core methods like from_platform_config, and attributes such as sort_coords and consolidate_and_vacuum.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/doc/source/python-tiledbsoma-tiledbwriteoptions.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. currentmodule:: tiledbsoma\n\n.. autoclass:: TileDBWriteOptions\n\n   .. automethod:: __init__\n\n   .. rubric:: Methods\n\n   .. autosummary::\n      :toctree: _generated\n\n      ~TileDBWriteOptions.__init__\n      ~TileDBWriteOptions.from_platform_config\n\n   .. rubric:: Attributes\n\n   .. autosummary::\n      :toctree: _generated\n\n      ~TileDBWriteOptions.sort_coords\n      ~TileDBWriteOptions.consolidate_and_vacuum\n```\n\n----------------------------------------\n\nTITLE: Ingesting Multiple AnnData Objects\nDESCRIPTION: Sequential ingestion of multiple AnnData objects into the SOMA Experiment, with experiment resizing before each ingestion to accommodate new data.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/doc/source/notebooks/tutorial_soma_append_mode.ipynb#2025-04-16_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfor ad in ads:\n    if tiledbsoma.Experiment.exists(experiment_uri):\n        tiledbsoma.io.resize_experiment(\n            experiment_uri,\n            nobs=rd2.get_obs_shape(),\n            nvars=rd2.get_var_shapes()\n        )\n\n    tiledbsoma.io.from_anndata(\n        experiment_uri,\n        ad,\n        measurement_name=measurement_name,\n        registration_mapping=rd2,\n    )\n```\n\n----------------------------------------\n\nTITLE: Accessing Observation DataFrame and Inspecting Schema\nDESCRIPTION: Accesses the observation DataFrame and assigns it to a variable for further inspection.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/doc/source/notebooks/tutorial_soma_objects.ipynb#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nobs = experiment.obs\n```\n\n----------------------------------------\n\nTITLE: Importing TileDB-SOMA DataFrame Class in Python\nDESCRIPTION: This snippet shows how to import the DataFrame class from the tiledbsoma module. It's the primary class for working with dataframes in TileDB-SOMA.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/doc/source/python-tiledbsoma-dataframe.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom tiledbsoma import DataFrame\n```\n\n----------------------------------------\n\nTITLE: CoordinateSpace Class Attributes in Python\nDESCRIPTION: This snippet shows the attributes available in the CoordinateSpace class. It includes axes and axis_names, which are likely used to define and access the dimensions of the coordinate space.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/doc/source/python-tiledbsoma-coordinatespace.rst#2025-04-16_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nCoordinateSpace.axes\nCoordinateSpace.axis_names\n```\n\n----------------------------------------\n\nTITLE: Initializing IntIndexer Class in Python\nDESCRIPTION: This snippet demonstrates the initialization of the IntIndexer class. The __init__ method is highlighted, indicating that the class can be instantiated with certain parameters.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/doc/source/python-tiledbsoma-intindexer.rst#2025-04-16_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nindexer = IntIndexer()\n```\n\n----------------------------------------\n\nTITLE: Reading Expression Matrix\nDESCRIPTION: Reads and displays the combined expression matrix data and its dimensions from the SOMA Experiment.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/doc/source/notebooks/tutorial_soma_append_mode.ipynb#2025-04-16_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nwith tiledbsoma.Experiment.open(experiment_uri) as exp:\n    X = exp.ms[\"RNA\"].X[\"data\"]\n    print(X.read().tables().concat().to_pandas())\n    print()\n    print(X.shape)\n```\n\n----------------------------------------\n\nTITLE: Documenting AxisColumnNames Class Structure\nDESCRIPTION: ReStructuredText markup defining the documentation structure for the AxisColumnNames class, including its initialization method, standard dictionary methods, and specific attributes for observational (obs) and variable (var) data.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/doc/source/python-tiledbsoma-axiscolumnnames.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\ntiledbsoma.AxisColumnNames\n==========================\n\n.. currentmodule:: tiledbsoma\n\n.. autoclass:: AxisColumnNames\n\n   .. automethod:: __init__\n\n   .. rubric:: Methods\n\n   .. autosummary::\n      :toctree: _generated\n\n      ~AxisColumnNames.__init__\n      ~AxisColumnNames.clear\n      ~AxisColumnNames.copy\n      ~AxisColumnNames.fromkeys\n      ~AxisColumnNames.get\n      ~AxisColumnNames.items\n      ~AxisColumnNames.keys\n      ~AxisColumnNames.pop\n      ~AxisColumnNames.popitem\n      ~AxisColumnNames.setdefault\n      ~AxisColumnNames.update\n      ~AxisColumnNames.values\n\n   .. rubric:: Attributes\n\n   .. autosummary::\n      :toctree: _generated\n\n      ~AxisColumnNames.obs\n      ~AxisColumnNames.var\n```\n\n----------------------------------------\n\nTITLE: Importing PointCloudDataFrame from tiledbsoma\nDESCRIPTION: This snippet shows how to import the PointCloudDataFrame class from the tiledbsoma module. It's the primary class for handling point cloud data in TileDB-SOMA.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/doc/source/python-tiledbsoma-pointclouddataframe.rst#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom tiledbsoma import PointCloudDataFrame\n```\n\n----------------------------------------\n\nTITLE: Importing IdentityTransform from tiledbsoma in Python\nDESCRIPTION: This snippet shows how to import the IdentityTransform class from the tiledbsoma module. The IdentityTransform class is used for identity transformations in TileDB-SOMA operations.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/doc/source/python-tiledbsoma-identity-transform.rst#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom tiledbsoma import IdentityTransform\n```\n\n----------------------------------------\n\nTITLE: Importing IntIndexer Class from tiledbsoma Module in Python\nDESCRIPTION: This snippet shows how to import the IntIndexer class from the tiledbsoma module. The IntIndexer class is likely used for integer-based indexing operations in the TileDB-SOMA project.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/doc/source/python-tiledbsoma-intindexer.rst#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom tiledbsoma import IntIndexer\n```\n\n----------------------------------------\n\nTITLE: Importing TileDB-SOMA Logging Functions in Python\nDESCRIPTION: This snippet shows the available logging functions in the tiledbsoma.logging module. It includes info, debug, warning, and a logger object for more advanced logging capabilities.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/doc/source/python-tiledbsoma-logging.rst#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom tiledbsoma.logging import info, debug, warning, logger\n```\n\n----------------------------------------\n\nTITLE: Importing CoordinateSpace Class from tiledbsoma Module in Python\nDESCRIPTION: This snippet shows how to import the CoordinateSpace class from the tiledbsoma module. The class provides functionality for working with coordinate spaces in single-cell data analysis.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/doc/source/python-tiledbsoma-coordinatespace.rst#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom tiledbsoma import CoordinateSpace\n```\n\n----------------------------------------\n\nTITLE: Importing Spatial I/O Functions in TileDB-SOMA\nDESCRIPTION: This snippet shows the available functions in the tiledbsoma.io.spatial module for data conversion. It includes functions for converting from Visium format and to SpatialData format.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/doc/source/python-tiledbsoma-io-spatial.rst#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\ntiledbsoma.io.spatial.from_visium\ntiledbsoma.io.spatial.to_spatialdata\n```\n\n----------------------------------------\n\nTITLE: Importing MultiscaleImage class from tiledbsoma module in Python\nDESCRIPTION: This snippet shows how to import the MultiscaleImage class from the tiledbsoma module. It is the main class being documented in this file.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/doc/source/python-tiledbsoma-multiscaleimage.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom tiledbsoma import MultiscaleImage\n```\n\n----------------------------------------\n\nTITLE: CoordinateSpace Class Methods in Python\nDESCRIPTION: This section lists the available methods for the CoordinateSpace class. It includes __init__ for initialization, count, from_axis_names, and index methods for various operations on coordinate spaces.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/doc/source/python-tiledbsoma-coordinatespace.rst#2025-04-16_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nCoordinateSpace.__init__\nCoordinateSpace.count\nCoordinateSpace.from_axis_names\nCoordinateSpace.index\n```\n\n----------------------------------------\n\nTITLE: Updating TileDB-SOMA to latest version\nDESCRIPTION: Command to update the installed TileDB-SOMA package to the latest version using pip.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/apis/python/README.md#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ python -m pip install --upgrade tiledbsoma\n```\n\n----------------------------------------\n\nTITLE: Loading AnnData File with Distance Matrix Format Conversion in Python\nDESCRIPTION: Example showing the automatic conversion of distance matrices when loading an AnnData object. The matrix is moved from .uns['neighbors']['distances'] to .obsp['distances'].\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/apis/python/testdata/README.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nx = ad.read_h5ad('/Users/aaronwolen/Downloads/pbmc-small.h5ad')\nFutureWarning: Moving element from .uns['neighbors']['distances'] to .obsp['distances'].\n```\n\n----------------------------------------\n\nTITLE: Extracting Profile Metrics\nDESCRIPTION: Python code showing how to extract specific metrics from a profiled command using the FileBasedProfileDB class.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/profiler/README.md#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom profiler import data\n\ndb = data.FileBasedProfileDB()\ndb.extract('python tests/objects.py', 'peak_memory')\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple NumPy Array with TileDB-Py\nDESCRIPTION: Creates a TileDB array from a NumPy array containing sequential integers from 0 to 9. The array is stored at 'simple/dim-uint64_attr-int64_10cells' and has 10 cells with a uint64 dimension and int64 attribute.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/data/simple/dim-uint64_attr-int64_10cells/README.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport tiledb, numpy as np\ntiledb.from_numpy(\"simple/dim-uint64_attr-int64_10cells\", np.arange(10))\n```\n\n----------------------------------------\n\nTITLE: Installing specific version of TileDB-SOMA\nDESCRIPTION: Command to install a specific version of TileDB-SOMA directly from the GitHub repository.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/apis/python/README.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ python -m pip install git+https://github.com/single-cell-data/TileDB-SOMA.git@0.0.6#subdirectory=apis/python\n```\n\n----------------------------------------\n\nTITLE: Creating X Matrix Storage Variants (Dense, CSR, CSC) from AnnData\nDESCRIPTION: Code that takes a PBMC AnnData object and creates three variants with different X matrix storage types: dense (numpy.ndarray), CSR sparse, and CSC sparse matrices. These variants are used for testing different chunked write operations.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/apis/python/testdata/README.md#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport anndata\nimport scipy\n\nann = anndata.read_h5ad('pbmc-small.h5ad')\nann.raw = None\nann.uns = {}\nann.obsm = None\nann.varm = None\nann.obsp = None\nann.write_h5ad('pbmc-small-x-dense.h5ad')\n\nann = anndata.read_h5ad('pbmc-small.h5ad')\nann.raw = None\nann.uns = {}\nann.obsm = None\nann.varm = None\nann.obsp = None\nann.X = scipy.sparse.csr_matrix(ann.X)\nann.write_h5ad('pbmc-small-x-csr.h5ad')\n\nann = anndata.read_h5ad('pbmc-small.h5ad')\nann.raw = None\nann.uns = {}\nann.obsm = None\nann.varm = None\nann.obsp = None\nann.X = scipy.sparse.csc_matrix(ann.X)\nann.write_h5ad('pbmc-small-x-csc.h5ad')\n```\n\n----------------------------------------\n\nTITLE: Creating Test Data with Sparse obsm Matrix Containing Zeros\nDESCRIPTION: Creates a test dataset by forcing a zero value into an obsm matrix (X_pca) to test sparse matrix handling with incomplete non-zero values. This test case was created for a specific pull request (#1650).\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/apis/python/testdata/README.md#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> import anndata as ad\n\n>>> adata = ad.read_h5ad('pbmc3k.h5ad')\n\n>>> adata.obsm\nAxisArrays with keys: X_pca, X_tsne, X_umap, X_draw_graph_fr\n\n>>> o = adata.obsm[\"X_pca\"]\n\n>>> o.shape\n(2638, 50)\n\n>>> o[0][0] = 0\n\n>>> adata.obsm[\"X_pca\"] = o\n\n>>> adata.write_h5ad('pbmc3k-with-obsm-zero.h5ad')\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries for TileDB-SOMA\nDESCRIPTION: Initial setup importing necessary Python packages including scanpy and TileDB-SOMA dependencies.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/doc/source/notebooks/tutorial_soma_append_mode.ipynb#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport scanpy as sc\n\nimport tiledbsoma\nimport tiledbsoma.io\nimport tiledbsoma.logging\n\ntiledbsoma.show_package_versions()\n```\n\n----------------------------------------\n\nTITLE: Running tests after source installation\nDESCRIPTION: Commands to generate test data and run pytest for TileDB-SOMA after installation from source.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/apis/python/README.md#2025-04-16_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nmake data\npython -m pytest tests\n```\n\n----------------------------------------\n\nTITLE: JSON Schema for MultiscaleImage in TileDB-SOMA\nDESCRIPTION: JSON schema specification for the MultiscaleImage metadata in TileDB-SOMA encoding. This defines the structure of the multiscale_image_schema that includes data axis permutation, channel information, shape, and datatype properties.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/encoding_specification.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"type\": \"object\",\n    \"properties\": {\n        \"data_axis_permutation\": {\n            \"type\": \"array\",\n            \"items\": {\"type\": \"integer\"}\n        },\n        \"has_channel_axis\": \"boolean\",\n        \"shape\": {\n            \"type\": \"array\",\n            \"items\": {\"type\": \"integer\"}\n        },\n        \"datatype\": {\"type\": \"string\"},\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Python Dependencies for TileDB-SOMA Project\nDESCRIPTION: This snippet lists the Python package dependencies for the TileDB-SOMA project. It includes packages for development tools, testing frameworks, code quality, and data handling. The list is typically used in a requirements file for pip installation.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/apis/python/requirements_dev.txt#2025-04-16_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\nblack\npytest\npytest-cov\nruff\nsparse\ntypeguard==4.4.2\ntypes-setuptools\nmore-itertools\nhypothesis\ndeepdiff\n```\n\n----------------------------------------\n\nTITLE: Initial Data Ingestion\nDESCRIPTION: Ingests the initial AnnData object into the SOMA experiment.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/doc/source/notebooks/tutorial_soma_append_mode.ipynb#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ntiledbsoma.logging.info()\ntiledbsoma.io.from_anndata(experiment_uri, ad1, measurement_name=measurement_name)\n```\n\n----------------------------------------\n\nTITLE: Checking for AVX2 support\nDESCRIPTION: Command to check if the system supports AVX2 instructions, which is necessary for pre-compiled binaries.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/apis/python/README.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngrep avx2 /proc/cpuinfo\n```\n\n----------------------------------------\n\nTITLE: Defining ScaleTransform Schema in JSON\nDESCRIPTION: JSON schema for serializing ScaleTransform with multiple scale factors and axis specifications.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/encoding_specification.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"type\": \"object\",\n    \"properties\": {\n        \"transform_type\": {\"const\": \"ScaleTransform\"},\n        \"input_axes\": {\n            \"type\": \"array\",\n            \"items\": {\"type\": \"string\"},\n        },\n        \"output_axes\": {\n            \"type\": \"array\",\n            \"items\": {\"type\": \"string\"},\n        },\n        \"scale_factors\"\": {\n            \"type\": \"array\",\n            \"items\": {\"type\": \"number\"},\n        },\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing TileDB-SOMA from R-universe in R\nDESCRIPTION: This code snippet demonstrates how to install the TileDB-SOMA package from R-universe, which provides macOS binaries and source packages for Unix-like platforms.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/apis/r/README.md#2025-04-16_snippet_0\n\nLANGUAGE: r\nCODE:\n```\ninstall.packages('tiledbsoma', repos = c('https://tiledb-inc.r-universe.dev',\n                                         'https://cloud.r-project.org'))\n```\n\n----------------------------------------\n\nTITLE: Instrumenting TileDB Stats Collection\nDESCRIPTION: Code template showing how to instrument TileDB statistics collection in the profiled code, including enabling stats, resetting them, and saving the results to a JSON file.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/profiler/README.md#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ntiledb.stats_enable()\ntiledb.stats_reset()\n\n# your profiling code goes here\n...\n\ntiledb.stats_disable()\n\nimport json\nwith open(\"tiledb_stats.json\", \"w\") as f:\n    json.dump(tiledb.stats_dump(json=True), f)\n```\n\n----------------------------------------\n\nTITLE: Setting Test Data Environment Variables\nDESCRIPTION: Configures environment variables for test data setup using the unittest user credentials.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/apis/python/remote_tests/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport TILEDB_REST_TOKEN=\"...\" # Get the token for the Saas `unittest` user\nexport TILEDB_REST_PAYER_NAMESPACE=unittest\n```\n\n----------------------------------------\n\nTITLE: Python and C++ Development Workflow\nDESCRIPTION: Build commands for developers who need to modify both Python and C++ code. These commands use make to handle the build process correctly.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/libtiledbsoma/README.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# clean, build, and install\nmake install\n\n# test\nmake test\n```\n\n----------------------------------------\n\nTITLE: Installing TileDB-SOMA from source with venv\nDESCRIPTION: Commands to set up a virtual environment, activate it, and install TileDB-SOMA from source for development purposes.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/apis/python/README.md#2025-04-16_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ python -m venv venv\n$ . ./venv/bin/activate\n$ python -m pip install -v -e .\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for Test Execution\nDESCRIPTION: Sets up environment variables for test authentication using the unittest user token and ensures other potentially conflicting variables are unset.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/apis/python/remote_tests/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport TILEDB_REST_UNITTEST_TOKEN=\"...\"  # Get the token for the Saas `unittest` user\nunset TILEDB_REST_TOKEN                  # If you have that set\nunset TILEDB_REST_PAYER_NAMESPACE        # If you have that set\n```\n\n----------------------------------------\n\nTITLE: Setting TileDB-SOMA build options\nDESCRIPTION: Defines CMake options for customizing the TileDB-SOMA build, including Python bindings, CLI tool, static/shared libraries, testing, and warning configurations.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/libtiledbsoma/CMakeLists.txt#2025-04-16_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n# Check for and set environment variables.\nif (NOT DEFINED TILEDBSOMA_ENABLE_WERROR AND DEFINED $ENV{TILEDBSSOMA_ENABLE_WERROR})\n  set(TILEDBSOMA_ENABLE_WERROR \"$ENV{TILEDBSOMA_ENABLE_WERROR}\")\nendif()\n\n# TileDB-SOMA Options\noption(TILEDBSOMA_BUILD_PYTHON \"Build Python API bindings\" ON)\noption(TILEDBSOMA_BUILD_CLI \"Build tiledbsoma CLI tool\" ON)\noption(TILEDBSOMA_BUILD_STATIC \"Build a static library; otherwise, shared library\" OFF)\noption(TILEDBSOMA_ENABLE_TESTING \"Enable tests\" ON)\noption(TILEDBSOMA_ENABLE_WERROR \"Enables the -Werror flag during compilation.\" OFF)\n```\n\n----------------------------------------\n\nTITLE: Installing System Dependencies for Ubuntu 22.04\nDESCRIPTION: Commands to install necessary system packages on Ubuntu 22.04 for building TileDB-SOMA, including C++ compiler and Python requirements. This works on both x86 and Arm architectures.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/libtiledbsoma/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt update\nsudo apt install -y g++ make pkg-config\nsudo apt install -y python3 python-is-python3 python3.10-venv python-dev-is-python3\n```\n\n----------------------------------------\n\nTITLE: Using get_indexer Method of IntIndexer Class in Python\nDESCRIPTION: This snippet shows the usage of the get_indexer method of the IntIndexer class. This method likely returns an indexer object or array based on integer indices.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/doc/source/python-tiledbsoma-intindexer.rst#2025-04-16_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nresult = indexer.get_indexer()\n```\n\n----------------------------------------\n\nTITLE: Developer Makefile Usage Guide\nDESCRIPTION: Documentation for the Makefile which automates common developer workflows. Shows available rules, options, and examples for various build scenarios.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/libtiledbsoma/README.md#2025-04-16_snippet_5\n\nLANGUAGE: makefile\nCODE:\n```\nUsage: make rule [options]\n\nRules:\n  install [options]   Build C++ library and install python module\n  r-build [options]   Build C++ static library for R\n  update              Incrementally build C++ library and update python module\n  test                Run tests\n  clean               Remove build artifacts\n\nOptions:\n  build=BUILD_TYPE    Cmake build type = Release|Debug|RelWithDebInfo|ASAN|TSAN|LSAN|UBSAN|MSAN|Coverage [Release]\n  prefix=PREFIX       Install location [dist]\n  tiledb=TILEDB_DIST  Absolute path to custom TileDB build\n\nExamples:\n  Install Release build\n\n    make install\n\n  Install Debug build of libtiledbsoma and libtiledb\n\n    make install build=Debug\n\n  Install Release build with custom libtiledb\n\n    make install tiledb=$PWD/../TileDB/dist\n\n  Incrementally build C++ changes and update the python module\n\n    make update\n```\n\n----------------------------------------\n\nTITLE: Configuring superbuild options for TileDB-SOMA dependencies\nDESCRIPTION: Sets up options for the superbuild system which manages dependencies. Controls how external dependencies like TileDB are built or fetched.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/libtiledbsoma/CMakeLists.txt#2025-04-16_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n# Superbuild option must be on by default.\noption(SUPERBUILD \"If true, perform a superbuild (builds all missing dependencies).\" ON)\noption(CMAKE_IDE \"(Used for CLion builds). Disables superbuild and sets the EP install dir.\" OFF)\noption(FORCE_BUILD_TILEDB \"Forces a local build of TileDB instead of searching system paths.\" OFF)\noption(TILEDB_FORCE_ALL_DEPS \"Forces a local build of TileDB instead of searching system paths.\" OFF)\noption(DOWNLOAD_TILEDB_PREBUILT \"If tiledb is being super built, this controls downloading prebuilt artifacts or building from source\" ON)\noption(SPDLOG_LINK_SHARED \"Link installed spdlog as an shared library instead of using it as header only\" OFF)\n```\n\n----------------------------------------\n\nTITLE: Running TileDB-SOMA Ingestor for soco.tgz Creation\nDESCRIPTION: This command runs the TileDB-SOMA ingestor tool to create a soco.tgz archive. It processes two input files: pbmc3k_processed.h5ad and a subset of 10x-pbmc-multiome-v1.0.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/test/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\napis/python/devtools/ingestor --debug --soco -o data/soco -n \\\n  data/pbmc3k_processed.h5ad data/10x-pbmc-multiome-v1.0/subset_100_100.h5ad\n```\n\n----------------------------------------\n\nTITLE: Setting Up Python Virtual Environment\nDESCRIPTION: Commands to create a Python virtual environment and install developer requirements from the requirements_dev.txt file.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/libtiledbsoma/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npython -m venv test/tiledbsoma\nsource test/tiledbsoma/bin/activate\npip install -r apis/python/requirements_dev.txt\n```\n\n----------------------------------------\n\nTITLE: Configuring TileDB build options\nDESCRIPTION: Defines build options specific to the TileDB dependency, including cloud storage support (S3, Azure, GCS), HDFS support, serialization, and logging settings.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/libtiledbsoma/CMakeLists.txt#2025-04-16_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n# TileDB BUILD Options\n# NOTE: TileDB Embedded version is controlled in cmake/Modules/FindTileDB_EP.cmake\noption(TILEDB_S3 \"Enables S3/minio support using aws-cpp-sdk\" ON)\noption(TILEDB_AZURE \"Enables Azure Storage support using azure-storage-cpp\" ON)\noption(TILEDB_GCS \"Enables GCS Storage support using google-cloud-cpp\" OFF)\noption(TILEDB_HDFS \"Enables HDFS support using the official Hadoop JNI bindings\" OFF)\noption(TILEDB_WERROR \"Enables the -Werror flag during compilation.\" OFF)\noption(TILEDB_REMOVE_DEPRECATIONS \"If true, do not build deprecated APIs.\" OFF)\noption(TILEDB_SERIALIZATION \"If true, enables building with support for query serialization\" ON)\noption(TILEDB_VERBOSE \"If true, sets default logging to verbose for TileDB\" OFF)\noption(OVERRIDE_INSTALL_PREFIX \"Ignores the setting of CMAKE_INSTALL_PREFIX and sets a default prefix\" OFF)\noption(ENABLE_ARROW_EXPORT \"Installs an extra header for exporting in-memory results with Apache Arrow\" ON)\noption(TILEDB_LOG_OUTPUT_ON_FAILURE \"If true, print error logs if dependency sub-project build fails\" ON)\noption(TILEDB_SANITIZER \"Sanitizer to use in TILEDB. \")\n```\n\n----------------------------------------\n\nTITLE: Serving Documentation with HTTP Server\nDESCRIPTION: Commands to serve the documentation using an HTTP server and open it in a browser. This approach makes the docs available through a local web server on port 8080.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/doc/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nhttp-server source/_build/html &\nopen http://localhost:8080/\n```\n\n----------------------------------------\n\nTITLE: Installing TileDB-SOMA via conda\nDESCRIPTION: Command to install the TileDB-SOMA package using conda package manager with specific channels.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/apis/python/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmamba install -c conda-forge -c tiledb tiledbsoma-py\n```\n\n----------------------------------------\n\nTITLE: Cloning TileDB-SOMA Repository\nDESCRIPTION: Git commands to clone the TileDB-SOMA repository and navigate to the project directory.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/libtiledbsoma/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/single-cell-data/TileDB-SOMA.git\ncd TileDB-SOMA\n```\n\n----------------------------------------\n\nTITLE: Checking compiler version compatibility with C++20\nDESCRIPTION: Verifies that the GCC compiler version is sufficient to support C++20 features required by the project.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/libtiledbsoma/CMakeLists.txt#2025-04-16_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\n# ###########################################################\n# Check compiler version supports full C++20 standard.\n# ###########################################################\n\nset(GCC_MIN 11.0)\nif (CMAKE_CXX_COMPILER_ID STREQUAL \"GNU\")\n    if (CMAKE_CXX_COMPILER_VERSION VERSION_LESS GCC_MIN)\n        message(FATAL_ERROR \"GNU GCC must be at least version ${GCC_MIN}. Found version ${CMAKE_CXX_COMPILER_VERSION}.\")\n    endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Generating SVG Diagram from UML with PlantUML in Java\nDESCRIPTION: This command uses the PlantUML Java library to generate an SVG diagram from a UML file. It requires the PlantUML JAR file and a UML input file named 'reader.uml'.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/libtiledbsoma/doc/README.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\njava -jar plantuml.jar -tsvg reader.uml\n```\n\n----------------------------------------\n\nTITLE: Checking TileDB-SOMA and Dependency Versions in Python\nDESCRIPTION: This Python code snippet demonstrates how to check the versions of TileDB-SOMA and its dependencies. It imports the tiledbsoma module and uses the show_package_versions() function to display version information.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/test/README.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> import tiledbsoma\n>>> tiledbsoma.show_package_versions()\ntiledbsoma.__version__        1.2.7\nTileDB-Py tiledb.version()    (0, 21, 6)\nTileDB core version           2.15.4\nlibtiledbsoma version()       libtiledb=2.15.2\npython version                3.10.6.final.0\nOS version                    Linux 5.19.0-1025-aws\n```\n\n----------------------------------------\n\nTITLE: Configuring Main Library Target in CMake for TileDB-SOMA\nDESCRIPTION: Sets up the main tiledbsoma library target as either static or shared, combining the previously defined object libraries, and configuring linking options and dependencies.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/libtiledbsoma/src/CMakeLists.txt#2025-04-16_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(TILEDBSOMA_INSTALL_TARGETS \"\")\nif(TILEDBSOMA_BUILD_STATIC)\n  add_library(tiledbsoma_static STATIC\n    $<TARGET_OBJECTS:TILEDB_SOMA_OBJECTS>\n    $<TARGET_OBJECTS:TILEDB_SOMA_GEOMETRY_OBJECTS>\n    $<TARGET_OBJECTS:TILEDBSOMA_NANOARROW_OBJECT>\n  )\n  list(APPEND TILEDBSOMA_INSTALL_TARGETS tiledbsoma_static)\n  if(WIN32)\n    # On Windows we must name the static library something else to avoid\n    # name clash with the DLL's \"import library\" .lib file.\n    set_target_properties(tiledbsoma_static\n      PROPERTIES\n      OUTPUT_NAME \"tiledbsomastatic\"\n    )\n  else()\n    set_target_properties(tiledbsoma_static\n      PROPERTIES\n      OUTPUT_NAME \"tiledbsoma\"\n    )\n  endif()\n  target_link_libraries(tiledbsoma_static\n    PRIVATE\n  )\nelse()\n  add_library(tiledbsoma SHARED\n    $<TARGET_OBJECTS:TILEDB_SOMA_OBJECTS>\n    $<TARGET_OBJECTS:TILEDB_SOMA_GEOMETRY_OBJECTS>\n    $<TARGET_OBJECTS:TILEDBSOMA_NANOARROW_OBJECT>\n  )\n\n  list(APPEND TILEDBSOMA_INSTALL_TARGETS tiledbsoma)\n  target_link_libraries(tiledbsoma\n    PUBLIC\n      TileDB::tiledb_shared\n      spdlog::spdlog\n  )\n  target_link_options(tiledbsoma\n    PRIVATE\n      ${TILEDBSOMA_SANITIZER_FLAG}\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Common Object Library in CMake for TileDB-SOMA Core Components\nDESCRIPTION: Defines the main TILEDB_SOMA_OBJECTS library that includes core functionality source files, compilation settings, dependencies, and include directories for the TileDB-SOMA project.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/libtiledbsoma/src/CMakeLists.txt#2025-04-16_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(TILEDB_SOMA_OBJECTS OBJECT\n  ${CMAKE_CURRENT_SOURCE_DIR}/reindexer/reindexer.cc\n  ${CMAKE_CURRENT_SOURCE_DIR}/soma/managed_query.cc\n  ${CMAKE_CURRENT_SOURCE_DIR}/soma/soma_coordinates.cc\n  ${CMAKE_CURRENT_SOURCE_DIR}/soma/soma_array.cc\n  ${CMAKE_CURRENT_SOURCE_DIR}/soma/soma_group.cc\n  ${CMAKE_CURRENT_SOURCE_DIR}/soma/soma_object.cc\n  ${CMAKE_CURRENT_SOURCE_DIR}/soma/soma_column.cc\n  ${CMAKE_CURRENT_SOURCE_DIR}/soma/soma_attribute.cc\n  ${CMAKE_CURRENT_SOURCE_DIR}/soma/soma_dimension.cc\n  ${CMAKE_CURRENT_SOURCE_DIR}/soma/soma_geometry_column.cc\n  ${CMAKE_CURRENT_SOURCE_DIR}/soma/soma_collection.cc\n  ${CMAKE_CURRENT_SOURCE_DIR}/soma/soma_experiment.cc\n  ${CMAKE_CURRENT_SOURCE_DIR}/soma/soma_measurement.cc\n  ${CMAKE_CURRENT_SOURCE_DIR}/soma/soma_scene.cc\n  ${CMAKE_CURRENT_SOURCE_DIR}/soma/soma_geometry_dataframe.cc\n  ${CMAKE_CURRENT_SOURCE_DIR}/soma/soma_point_cloud_dataframe.cc\n  ${CMAKE_CURRENT_SOURCE_DIR}/soma/soma_multiscale_image.cc\n  ${CMAKE_CURRENT_SOURCE_DIR}/soma/soma_context.cc\n  ${CMAKE_CURRENT_SOURCE_DIR}/soma/soma_dataframe.cc\n  ${CMAKE_CURRENT_SOURCE_DIR}/soma/soma_dense_ndarray.cc\n  ${CMAKE_CURRENT_SOURCE_DIR}/soma/soma_sparse_ndarray.cc\n  ${CMAKE_CURRENT_SOURCE_DIR}/soma/soma_transformers.cc\n  ${CMAKE_CURRENT_SOURCE_DIR}/soma/array_buffers.cc\n  ${CMAKE_CURRENT_SOURCE_DIR}/soma/column_buffer.cc\n  ${CMAKE_CURRENT_SOURCE_DIR}/utils/arrow_adapter.cc\n  ${CMAKE_CURRENT_SOURCE_DIR}/utils/logger.cc\n  ${CMAKE_CURRENT_SOURCE_DIR}/utils/stats.cc\n  ${CMAKE_CURRENT_SOURCE_DIR}/utils/transformer.cc\n  ${CMAKE_CURRENT_SOURCE_DIR}/utils/util.cc\n  ${CMAKE_CURRENT_SOURCE_DIR}/utils/version.cc\n  ${CMAKE_CURRENT_SOURCE_DIR}/external/src/thread_pool/thread_pool.cc\n  ${CMAKE_CURRENT_SOURCE_DIR}/external/src/thread_pool/status.cc\n)\n\nif(SPDLOG_LINK_SHARED)\n  target_link_libraries(TILEDB_SOMA_OBJECTS PUBLIC spdlog::spdlog)\nelse()\n  target_include_directories(TILEDB_SOMA_OBJECTS PRIVATE $<TARGET_PROPERTY:spdlog::spdlog,INTERFACE_INCLUDE_DIRECTORIES>)\nendif()\n\ntarget_compile_definitions(TILEDB_SOMA_OBJECTS\n  PRIVATE\n    -DTILEDB_NO_API_DEPRECATION_WARNINGS\n)\n\ntarget_compile_options(TILEDB_SOMA_OBJECTS\n  PRIVATE\n    ${TILEDBSOMA_COMPILE_OPTIONS}\n    ${TILEDBSOMA_WERROR_OPTION}\n    ${TILEDBSOMA_SANITIZER_FLAG}\n)\ntarget_link_options(TILEDB_SOMA_OBJECTS\n  PRIVATE\n    ${TILEDBSOMA_SANITIZER_FLAG}\n)\n\nset_property(TARGET TILEDB_SOMA_OBJECTS PROPERTY POSITION_INDEPENDENT_CODE ON)\ntarget_include_directories(TILEDB_SOMA_OBJECTS\n  PRIVATE\n  ${CMAKE_CURRENT_SOURCE_DIR}\n  ${CMAKE_CURRENT_SOURCE_DIR}/vendor\n  ${CMAKE_CURRENT_SOURCE_DIR}/soma\n  ${CMAKE_CURRENT_SOURCE_DIR}/external/khash\n  ${CMAKE_CURRENT_SOURCE_DIR}/external/include\n  ${CMAKE_CURRENT_SOURCE_DIR}/external/include/nanoarrow\n  $<TARGET_PROPERTY:TileDB::tiledb_shared,INTERFACE_INCLUDE_DIRECTORIES>\n  ${pybind11_INCLUDE_DIRS}\n)\n```\n\n----------------------------------------\n\nTITLE: Installing TileDB-SOMA from Conda using Mamba\nDESCRIPTION: This bash command installs the TileDB-SOMA package from Conda using Mamba as a faster alternative to Conda. It installs binaries for multiple architectures.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/apis/r/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmamba install -c conda-forge -c tiledb r-tiledbsoma\n```\n\n----------------------------------------\n\nTITLE: Listing Python Package Dependencies for TileDB-SOMA\nDESCRIPTION: This is a list of Python package dependencies required for the TileDB-SOMA project. It includes geopandas for geospatial data operations, tifffile and pillow for image processing, spatialdata for spatial data handling with a version requirement of at least 0.2.5, xarray for labeled multidimensional arrays, and dask with a version constraint of less than or equal to 2024.11.2.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/apis/python/requirements_spatial.txt#2025-04-16_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ngeopandas\ntifffile\npillow\nspatialdata>=0.2.5\nxarray\ndask<=2024.11.2\n```\n\n----------------------------------------\n\nTITLE: Setting TileDB-SOMA Source Root Definition for Tests\nDESCRIPTION: Gets the absolute path to the source root directory and adds it as a compiler definition for use in tests.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/libtiledbsoma/test/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nget_filename_component(TILEDBSOMA_SOURCE_ROOT \"${CMAKE_CURRENT_SOURCE_DIR}/../../\" ABSOLUTE)\nadd_compile_definitions(TILEDBSOMA_SOURCE_ROOT=\"${TILEDBSOMA_SOURCE_ROOT}\")\n```\n\n----------------------------------------\n\nTITLE: Configuring CLI Executable Target in CMake\nDESCRIPTION: Sets up the CLI executable build configuration including source files, link libraries, and include directories. Handles platform-specific settings for pthread linking.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/libtiledbsoma/src/CMakeLists.txt#2025-04-16_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nif(TILEDBSOMA_BUILD_CLI)\n  add_executable(tiledbsoma-cli\n    ${CMAKE_CURRENT_SOURCE_DIR}/cli/cli.cc\n    $<TARGET_OBJECTS:TILEDB_SOMA_OBJECTS>\n    $<TARGET_OBJECTS:TILEDBSOMA_NANOARROW_OBJECT>\n  )\n\n  list(APPEND TILEDBSOMA_INSTALL_TARGETS tiledbsoma-cli)\n\n  set_target_properties(tiledbsoma-cli PROPERTIES OUTPUT_NAME tdbsoma)\n\n  target_link_libraries(tiledbsoma-cli\n    PUBLIC\n      spdlog::spdlog\n      tiledbsoma\n      TileDB::tiledb_shared\n  )\n  target_link_options(tiledbsoma-cli\n    PRIVATE\n      ${TILEDBSOMA_SANITIZER_FLAG}\n  )\n```\n\n----------------------------------------\n\nTITLE: String Metadata Encoding Example\nDESCRIPTION: Demonstrates the encoding type change from ASCII to UTF8 for string metadata in TileDB-SOMA\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/apis/r/NEWS.md#2025-04-16_snippet_0\n\nLANGUAGE: R\nCODE:\n```\nTILEDB_STRING_UTF8\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for SOMA Unit Tests\nDESCRIPTION: Specifies the include directories for the unit_soma target, including the source directory, external includes, and pybind11 headers.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/libtiledbsoma/test/CMakeLists.txt#2025-04-16_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_include_directories(unit_soma\n  PRIVATE\n    ${CMAKE_CURRENT_SOURCE_DIR}/../src\n    ${CMAKE_CURRENT_SOURCE_DIR}/../src/external/include\n    ${pybind11_INCLUDE_DIRS}\n    ${TILEDB_SOMA_EXPORT_HEADER_DIR}\n    $<TARGET_PROPERTY:spdlog::spdlog,INTERFACE_INCLUDE_DIRECTORIES>\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring C++ standard and build settings\nDESCRIPTION: Sets C++20 as the required standard, enables position-independent code, and configures default build types for the project.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/libtiledbsoma/CMakeLists.txt#2025-04-16_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\n# Set C++20 as required standard for all C++ targets (C++17 minimum is required to use the TileDB C++ API).\nset(CMAKE_CXX_STANDARD 20)\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\nset(CMAKE_CXX_EXTENSIONS OFF) # Don't use GNU extensions\n\n# Build with fPIC\nset(CMAKE_POSITION_INDEPENDENT_CODE ON)\n\n# Set default builds/configuration to be Release.\nget_property(is_multi_config GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)\nif (is_multi_config)\n  set(CMAKE_CONFIGURATION_TYPES\n      \"Release;Debug;RelWithDebInfo;ASAN;TSAN;LSAN;UBSAN;MSAN\"\n      CACHE\n      STRING\n      \"Semi-colon separate list of build types for multi-configuration generators.\"\n  )\n  set(CMAKE_MAP_IMPORTED_CONFIG_ASAN Debug)\n  set(CMAKE_MAP_IMPORTED_CONFIG_TSAN Debug)\n  set(CMAKE_MAP_IMPORTED_CONFIG_LSAN Debug)\n  set(CMAKE_MAP_IMPORTED_CONFIG_UBSAN Debug)\n  set(CMAKE_MAP_IMPORTED_CONFIG_MSAN Debug)\nelse()\n    set(CMAKE_BUILD_TYPE\n      \"Release\" CACHE STRING \"Build type for single-configuration generators.\"\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining TileDB-SOMA platform_config format\nDESCRIPTION: TypeScript interface definitions for the platform_config object used to configure TileDB-specific settings in SOMA APIs. It includes structures for TileDB configuration, creation options, dimensions, attributes, and filters.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/apis/python/README.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ninterface PlatformConfig {\n  tiledb?: TDBConfig;\n}\n\ninterface TDBConfig {\n  create?: TDBCreateOptions;\n}\n\ninterface TDBCreateOptions {\n  dims?: { [dim: string]: TDBDimension };\n  attrs?: { [attr: string]: TDBAttr };\n  allows_duplicates?: bool;\n\n  offsets_filters?: TDBFilter[];\n  validity_filters?: TDBFilter[];\n\n  capacity?: number;\n  cell_order?: string;\n  tile_order?: string;\n}\n\ninterface TDBDimension {\n  filters?: TDBFilter[];\n  tile?: number;\n}\n\ninterface TDBAttr {\n  filters?: TDBFilter[];\n}\n\n/**\n * Either the name of a filter (in which case it will use\n * the default arguments) or a specification with filter args.\n */\ntype TDBFilter = string | TDBFilterSpec;\n\ninterface TDBFilterSpec {\n  /** The name of the filter. */\n  _name: string;\n  /** kwargs that are passed when constructing the filter. */\n  [kwarg: string]: any;\n}\n```\n\n----------------------------------------\n\nTITLE: SOMAArray Query Management\nDESCRIPTION: Indicates the replacement of SOMAArray read and write calls with ManagedQuery implementation\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/apis/r/NEWS.md#2025-04-16_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\nManagedQuery\n```\n\n----------------------------------------\n\nTITLE: Registering unit_soma as a Test\nDESCRIPTION: Adds unit_soma as a CTest test with durations reporting enabled, setting the working directory to the current source directory.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/libtiledbsoma/test/CMakeLists.txt#2025-04-16_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nadd_test(\n    NAME \"unit_soma\"\n    COMMAND $<TARGET_FILE:unit_soma> \"--durations=yes\"\n    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}\n)\n```\n\n----------------------------------------\n\nTITLE: Setting installation prefix and build configuration\nDESCRIPTION: Configures the installation directory, symbol exporting, and rpath settings for the build system.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/libtiledbsoma/CMakeLists.txt#2025-04-16_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\n# Root directory default installation prefix\nif(OVERRIDE_INSTALL_PREFIX OR NOT CMAKE_INSTALL_PREFIX)\n  set(PREFIX_REL_PATH \"${CMAKE_SOURCE_DIR}/../dist\")\n  get_filename_component(DEFAULT_PREFIX \"${PREFIX_REL_PATH}\" ABSOLUTE)\n  set(CMAKE_INSTALL_PREFIX \"${DEFAULT_PREFIX}\" CACHE PATH \"Default install prefix\" FORCE)\n  message(STATUS \"Using default install prefix ${CMAKE_INSTALL_PREFIX}. To control CMAKE_INSTALL_PREFIX, set OVERRIDE_INSTALL_PREFIX=OFF\")\nendif()\n\nmessage(STATUS \"Install prefix is ${CMAKE_INSTALL_PREFIX}.\")\n\nif(FORCE_BUILD_TILEDB)\n  message(STATUS \"Skipping search for TileDB, building it as an external project. To use system TileDB, set FORCE_BUILD_TILEDB=OFF\")\nendif()\n\n# Export symbols without decorating the code\nset(CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS ON)\n\n# Append path to linked library files to the rpath\nset(CMAKE_INSTALL_RPATH_USE_LINK_PATH ON)\n```\n\n----------------------------------------\n\nTITLE: Defining IdentityTransform Schema in JSON\nDESCRIPTION: JSON schema for serializing IdentityTransform with input and output axes specifications.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/encoding_specification.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"type\": \"object\",\n    \"properties\": {\n        \"transform_type\": {\"const\": \"IdentityTransform\"},\n        \"input_axes\": {\n            \"type\": \"array\",\n            \"items\": {\"type\": \"string\"},\n        }\n        \"output_axes\": {\n            \"type\": \"array\",\n            \"items\": {\"type\": \"string\"},\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Opening Documentation in Browser\nDESCRIPTION: Command to open the generated HTML documentation directly in the default browser.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/doc/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nopen source/_build/html/index.html\n```\n\n----------------------------------------\n\nTITLE: Configuring superbuild system for dependencies\nDESCRIPTION: Sets up the superbuild architecture which manages external dependencies, with special handling for IDE builds.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/libtiledbsoma/CMakeLists.txt#2025-04-16_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\n# Search the externals install directory for dependencies.\nlist(APPEND CMAKE_PREFIX_PATH \"${EP_INSTALL_PREFIX}\")\n\n# If this is an in-IDE build, we need to disable the superbuild and explicitly\n# set the EP base dir. The normal 'cmake && make' process won't need this step,\n# it is for better CLion support of the superbuild architecture.\nif(CMAKE_IDE)\n  set(SUPERBUILD OFF)\n  set(EP_BASE \"${CMAKE_CURRENT_BINARY_DIR}/externals\")\nendif()\n\nif(SUPERBUILD)\n  project(TileDB-SOMA-Superbuild)\n  message(STATUS \"Starting TileDB-SOMA superbuild.\")\n  include(\"cmake/Superbuild.cmake\")\n  return()\nendif()\n\nproject(TileDB-SOMA)\nmessage(STATUS \"Starting TileDB-SOMA regular build.\")\n\n# Paths to locate the installed external projects.\nset(EP_SOURCE_DIR \"${EP_BASE}/src\")\nset(EP_INSTALL_PREFIX \"${EP_BASE}/install\")\n```\n\n----------------------------------------\n\nTITLE: Initializing SOMA Experiment URI\nDESCRIPTION: Creates a unique temporary URI for the new SOMA Experiment using current timestamp.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/doc/source/notebooks/tutorial_soma_append_mode.ipynb#2025-04-16_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nstamp = datetime.datetime.today().strftime(\"%Y%m%d-%H%M%S\")\nexp = None\nexperiment_uri = f\"/tmp/append-example-{stamp}\"\nexperiment_uri\n```\n\n----------------------------------------\n\nTITLE: Running Exhaustive Tests with Hypothesis Profile in Python\nDESCRIPTION: Command to run Hypothesis tests using the 'expensive' profile for more exhaustive testing. This mode significantly increases test duration and coverage compared to the default configuration.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/apis/python/tests/ht/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n> pytest apis/python/tests/ --hypothesis-profile=expensive\n```\n\n----------------------------------------\n\nTITLE: Defining UniformScaleTransform Schema in JSON\nDESCRIPTION: JSON schema for serializing UniformScaleTransform with scale factor and axis specifications.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/encoding_specification.md#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"type\": \"object\",\n    \"properties\": {\n        \"transform_type\": {\"const\": \"UniformScaleTransform\"},\n        \"input_axes\": {\n            \"type\": \"array\",\n            \"items\": {\"type\": \"string\"},\n        },\n        \"output_axes\": {\n            \"type\": \"array\",\n            \"items\": {\"type\": \"string\"},\n        },\n        \"scale\": {\"type\": \"number\"},\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Python Dependencies for TileDB-SOMA\nDESCRIPTION: This snippet provides a comprehensive list of Python packages and their exact versions required for the TileDB-SOMA project. It includes libraries for documentation (Sphinx, Breathe), build tools (CMake, setuptools), data processing (Dask), and scientific computing (SpatialData).\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/doc/requirements_doc.txt#2025-04-16_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nbreathe==4.35.0\ncmake==3.29.2\ndask==2024.9.0\ndocutils==0.20.1\nipython==8.24.0\njinja2==3.1.6\nnbsphinx==0.9.3\npandoc==2.3\npybind11==2.12.0\nsetuptools==75.1.0\nsetuptools-scm==8.1.0\nspatialdata==0.2.6\nsphinx==7.3.7\nsphinxcontrib-jquery==4.1\nsphinx-rtd-theme==2.0.0\nwheel==0.43.0\n```\n\n----------------------------------------\n\nTITLE: Configuring SPDLOG for SOMA Unit Tests\nDESCRIPTION: Sets up spdlog logging library for unit_soma, either linking to shared library or including headers based on the SPDLOG_LINK_SHARED option.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/libtiledbsoma/test/CMakeLists.txt#2025-04-16_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif(SPDLOG_LINK_SHARED)\n  target_link_libraries(unit_soma PRIVATE spdlog::spdlog)\nelse()\n  target_include_directories(unit_soma PRIVATE $<TARGET_PROPERTY:spdlog::spdlog,INTERFACE_INCLUDE_DIRECTORIES>)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting up compiler cache for TileDB-SOMA build\nDESCRIPTION: Configures compiler cache (ccache) to speed up recompilation by caching previously compiled files.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/libtiledbsoma/CMakeLists.txt#2025-04-16_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\n# Enable compiler cache to speed up recompilation\nfind_program(CCACHE_FOUND ccache)\n\nif(CCACHE_FOUND)\n  set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE ccache)\n  set_property(GLOBAL PROPERTY RULE_LAUNCH_LINK ccache)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Running pre-commit hooks for Python files in TileDB-SOMA\nDESCRIPTION: A sequence of commands to set up and run pre-commit hooks for Python files in the TileDB-SOMA project. It creates a virtual environment, installs pre-commit, runs all hooks, and then deactivates the environment.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/CONTRIBUTING.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npython -m venv ./pre-commit\nsource ./pre-commit/bin/activate\npython -m pip -v install pre-commit\npre-commit run -a -v\ndeactivate\n```\n\n----------------------------------------\n\nTITLE: Setting Link Libraries for SOMA Unit Tests\nDESCRIPTION: Links the required libraries to the unit_soma executable, including Catch2 for testing and TileDB shared library.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/libtiledbsoma/test/CMakeLists.txt#2025-04-16_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(unit_soma\n  PRIVATE\n    Catch2::Catch2WithMain\n    TileDB::tiledb_shared\n)\ntarget_link_options(unit_soma\n  PRIVATE\n    ${TILEDBSOMA_SANITIZER_FLAG}\n)\n```\n\n----------------------------------------\n\nTITLE: Sphinx Documentation for AxisQuery Class\nDESCRIPTION: ReStructuredText documentation defining the structure and API reference for the AxisQuery class in the tiledbsoma module. Includes method and attribute definitions.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/doc/source/python-tiledbsoma-axisquery.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\ntiledbsoma.AxisQuery\n====================\n\n.. currentmodule:: tiledbsoma\n\n.. autoclass:: AxisQuery\n\n   .. automethod:: __init__\n\n   .. rubric:: Methods\n\n   .. autosummary::\n      :toctree: _generated\n\n      ~AxisQuery.__init__\n\n   .. rubric:: Attributes\n\n   .. autosummary::\n      :toctree: _generated\n\n      ~AxisQuery.value_filter\n      ~AxisQuery.coords\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Definitions and AVX2 Support for TileDB-SOMA\nDESCRIPTION: Sets up global definitions, checks for AVX2 support, and configures AVX2 flags if supported. It also includes a custom target for debugging compile options.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/libtiledbsoma/CMakeLists.txt#2025-04-16_snippet_12\n\nLANGUAGE: CMake\nCODE:\n```\nadd_definitions(-D_FILE_OFFSET_BITS=64)\nadd_definitions(-D_LIBCPP_DISABLE_AVAILABILITY)\n\ninclude(CheckAVX2Support)\nCheckAVX2Support()\n\nif(COMPILER_SUPPORTS_AVX2)\n  list(APPEND TILEDBSOMA_COMPILE_OPTIONS ${COMPILER_AVX2_FLAG})\nendif()\n\nadd_custom_target(\n    debugflag COMMAND ${CMAKE_COMMAND} -E echo \"compile options: ${TILEDBSOMA_COMPILE_OPTIONS}\"\n)\n```\n\n----------------------------------------\n\nTITLE: Downloading and Extracting Test Data with wget in Bash\nDESCRIPTION: This snippet suggests using wget to download test data from TileDB-SOMA-Test-Data and extract any compressed files. It's part of the process for preparing new test data.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/data/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nwget <url_to_test_data>\ntar -xzf <compressed_file>.tar.gz\n```\n\n----------------------------------------\n\nTITLE: Setting Compile Definitions and Options for SOMA Unit Tests\nDESCRIPTION: Configures compilation definitions and options for the unit_soma target, enabling Catch2 main function and applying project-specific compile options.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/libtiledbsoma/test/CMakeLists.txt#2025-04-16_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_compile_definitions(unit_soma\n  PRIVATE\n  CATCH_CONFIG_MAIN\n)\ntarget_compile_options(unit_soma\n  PRIVATE\n    ${TILEDBSOMA_COMPILE_OPTIONS}\n    ${TILEDBSOMA_SANITIZER_FLAG}\n    ${TILEDBSOMA_WERROR_OPTION}\n)\n```\n\n----------------------------------------\n\nTITLE: Generating Export Headers in CMake for TileDB-SOMA\nDESCRIPTION: Generates export header file and sets up compiler definitions for TileDB-SOMA objects. Configures visibility and include directories for both main and geometry objects.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/libtiledbsoma/src/CMakeLists.txt#2025-04-16_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\ngenerate_export_header(TILEDB_SOMA_OBJECTS\n  BASE_NAME tiledbsoma\n)\n\nset(TILEDB_SOMA_EXPORT_HEADER_NAME \"tiledbsoma_export.h\" PARENT_SCOPE)\nset(TILEDB_SOMA_EXPORT_HEADER_DIR \"${CMAKE_CURRENT_BINARY_DIR}\")\nset(TILEDB_SOMA_EXPORT_HEADER_DIR \"${CMAKE_CURRENT_BINARY_DIR}\" PARENT_SCOPE)\nset(TILEDB_SOMA_EXPORT_HEADER \"${CMAKE_CURRENT_BINARY_DIR}/tiledbsoma_export.h\")\nset(TILEDB_SOMA_EXPORT_HEADER \"${TILEDB_SOMA_EXPORT_HEADER}\" PARENT_SCOPE)\n\ntarget_compile_definitions(TILEDB_SOMA_OBJECTS PRIVATE -DTILEDB_SOMA_OBJECTS_EXPORTS)\ntarget_include_directories(TILEDB_SOMA_OBJECTS PRIVATE ${TILEDB_SOMA_EXPORT_HEADER_DIR})\n```\n\n----------------------------------------\n\nTITLE: Updating Makefile Data Target in Bash\nDESCRIPTION: This snippet refers to updating the 'make data' target in the Makefile, which calls a bash script to prepare test data. It emphasizes creating new files or folders and skipping existing data.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/data/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# In scripts/prepare-test-data.sh\n\n# Create new file or folder\nmkdir -p data/new_dataset\n\n# Skip if data already exists\nif [ -f data/new_dataset/file.txt ]; then\n    echo \"Data already prepared, skipping...\"\n    exit 0\nfi\n\n# Prepare data\n# ... your data preparation commands here\n```\n\n----------------------------------------\n\nTITLE: Configuring Geometry Unit Test Executable\nDESCRIPTION: Defines the unit_geometry executable by specifying its source files, object dependencies, and compilation settings. This executable specifically tests geometry-related functionality.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/libtiledbsoma/test/CMakeLists.txt#2025-04-16_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(unit_geometry\n    $<TARGET_OBJECTS:TILEDB_SOMA_OBJECTS>\n    $<TARGET_OBJECTS:TILEDB_SOMA_GEOMETRY_OBJECTS>\n    $<TARGET_OBJECTS:TILEDBSOMA_NANOARROW_OBJECT>\n    common.cc\n    common.h\n    unit_geometry_roundtrip.cc\n    unit_geometry_envelope.cc\n# TODO: uncomment when thread_pool is enabled\n#    unit_thread_pool.cc\n)\n```\n\n----------------------------------------\n\nTITLE: Copying Test Data Locally\nDESCRIPTION: AWS CLI command to copy test data from S3 to local directory.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/apis/python/remote_tests/README.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\naws s3 cp s3://tiledb-unittest/soma-prod-test-data/h5ad .\n```\n\n----------------------------------------\n\nTITLE: Configuring Geometry Object Library in CMake for TileDB-SOMA\nDESCRIPTION: Sets up the geometry component as an object library, including source files for geometric primitives and operations with appropriate compilation settings and include directories.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/libtiledbsoma/src/CMakeLists.txt#2025-04-16_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(TILEDB_SOMA_GEOMETRY_OBJECTS OBJECT\n  ${CMAKE_CURRENT_SOURCE_DIR}/geometry/point.cc\n  ${CMAKE_CURRENT_SOURCE_DIR}/geometry/linestring.cc\n  ${CMAKE_CURRENT_SOURCE_DIR}/geometry/polygon.cc\n  ${CMAKE_CURRENT_SOURCE_DIR}/geometry/multipoint.cc\n  ${CMAKE_CURRENT_SOURCE_DIR}/geometry/multilinestring.cc\n  ${CMAKE_CURRENT_SOURCE_DIR}/geometry/multipolygon.cc\n  ${CMAKE_CURRENT_SOURCE_DIR}/geometry/operators/io/read.cc\n  ${CMAKE_CURRENT_SOURCE_DIR}/geometry/operators/io/write.cc\n  ${CMAKE_CURRENT_SOURCE_DIR}/geometry/operators/envelope.cc\n)\n\ntarget_link_options(TILEDB_SOMA_GEOMETRY_OBJECTS\n  PRIVATE\n    ${TILEDBSOMA_SANITIZER_FLAG}\n)\n\ntarget_compile_definitions(TILEDB_SOMA_GEOMETRY_OBJECTS\n  PRIVATE\n  -DTILEDB_NO_API_DEPRECATION_WARNINGS\n)\n\ntarget_compile_options(TILEDB_SOMA_GEOMETRY_OBJECTS\n  PRIVATE\n  ${TILEDBSOMA_COMPILE_OPTIONS}\n  ${TILEDBSOMA_WERROR_OPTION}\n  ${TILEDBSOMA_SANITIZER_OPTIONS}\n)\n\nset_property(TARGET TILEDB_SOMA_GEOMETRY_OBJECTS PROPERTY POSITION_INDEPENDENT_CODE ON)\ntarget_include_directories(TILEDB_SOMA_GEOMETRY_OBJECTS\n  PRIVATE\n  ${CMAKE_CURRENT_SOURCE_DIR}\n  ${CMAKE_CURRENT_SOURCE_DIR}/vendor\n)\n```\n\n----------------------------------------\n\nTITLE: Running SOMA Profile Collection\nDESCRIPTION: Command to run the profiler on a SOMA script, which captures various metrics and context information stored in the profiling_runs database.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/profiler/README.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npython -m profiler python tests/objects.py\n```\n\n----------------------------------------\n\nTITLE: Comparing Original and Queried SOMA Experiment Sizes in Python\nDESCRIPTION: Displays the observation and variable counts for both the original experiment and the query results to show the effect of filtering.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/apis/python/notebooks/tutorial_exp_query.ipynb#2025-04-16_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n[exp.obs.count, exp.ms[\"RNA\"].var.count]\n```\n\nLANGUAGE: python\nCODE:\n```\n[query.n_obs, query.n_vars]\n```\n\n----------------------------------------\n\nTITLE: Configuring Header File Installation in CMake for TileDB-SOMA\nDESCRIPTION: Defines the installation directives for header files in the TileDB-SOMA project, organizing them into appropriate include directories for users of the library.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/libtiledbsoma/src/CMakeLists.txt#2025-04-16_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(FILES\n  ${CMAKE_CURRENT_SOURCE_DIR}/soma/enums.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/soma/logger_public.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/soma/soma_context.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/soma/managed_query.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/soma/soma_coordinates.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/soma/array_buffers.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/soma/column_buffer.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/soma/soma_array.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/soma/soma_group.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/soma/soma_column.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/soma/soma_attribute.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/soma/soma_dimension.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/soma/soma_geometry_column.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/soma/soma_collection.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/soma/soma_dataframe.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/soma/soma_dense_ndarray.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/soma/soma_sparse_ndarray.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/soma/soma_experiment.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/soma/soma_measurement.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/soma/soma_scene.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/soma/soma_geometry_dataframe.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/soma/soma_point_cloud_dataframe.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/soma/soma_multiscale_image.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/soma/soma_object.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/soma/soma_transformers.h\n  DESTINATION \"include/tiledbsoma/soma\"\n)\n\ninstall(FILES\n  ${CMAKE_CURRENT_SOURCE_DIR}/reindexer/reindexer.h\n  DESTINATION \"include/tiledbsoma/reindexer/\"\n)\n\ninstall(FILES\n  ${CMAKE_CURRENT_SOURCE_DIR}/tiledbsoma/tiledbsoma\n  DESTINATION \"include/tiledbsoma\"\n)\n\ninstall(FILES\n  ${CMAKE_CURRENT_SOURCE_DIR}/utils/arrow_adapter.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/utils/common.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/utils/fastercsx.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/utils/parallel_functions.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/utils/stats.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/utils/transformer.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/utils/util.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/utils/version.h\n\n  DESTINATION \"include/tiledbsoma/utils\"\n)\n\ninstall(FILES\n  ${CMAKE_CURRENT_SOURCE_DIR}/external/include/nanoarrow/nanoarrow.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/external/include/nanoarrow/nanoarrow.hpp\n  DESTINATION \"include/tiledbsoma/nanoarrow\"\n)\n\ninstall(FILES\n  ${CMAKE_CURRENT_SOURCE_DIR}/external/include/nlohmann/json.hpp\n  DESTINATION \"include/tiledbsoma/nlohmann\"\n)\n```\n\n----------------------------------------\n\nTITLE: Generating JSON Report for Multiple Runs\nDESCRIPTION: Command to generate a JSON report containing metrics from multiple runs of the profiled script.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/profiler/README.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npython -m profiler.report -j \"python tests/objects.py\"\n```\n\n----------------------------------------\n\nTITLE: Displaying AnnData Object in Python\nDESCRIPTION: Shows the AnnData object created from the SOMA experiment query results.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/apis/python/notebooks/tutorial_exp_query.ipynb#2025-04-16_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nadata\n```\n\n----------------------------------------\n\nTITLE: Running Python Tests with pytest\nDESCRIPTION: Command to execute tests using pytest, specifically requiring Python 3.9 for UDF tests.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/apis/python/remote_tests/README.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\npython -m pytest path/to/this/directory\n```\n\n----------------------------------------\n\nTITLE: Setting Up SPDLOG for Geometry Unit Tests\nDESCRIPTION: Configures spdlog logging library for unit_geometry, either linking to shared library or including headers based on the SPDLOG_LINK_SHARED option.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/libtiledbsoma/test/CMakeLists.txt#2025-04-16_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\nif(SPDLOG_LINK_SHARED)\n  target_link_libraries(unit_geometry PRIVATE spdlog::spdlog)\nelse()\n  target_include_directories(unit_geometry PRIVATE $<TARGET_PROPERTY:spdlog::spdlog,INTERFACE_INCLUDE_DIRECTORIES>)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Generating Metric Plot Report\nDESCRIPTION: Command to generate a graphical plot report for a specific metric from multiple runs of the profiled script.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/profiler/README.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npython -m profiler.report  -m <metric_name> \"python tests/objects.py\"\n```\n\n----------------------------------------\n\nTITLE: Importing TileDB-SOMA in Python\nDESCRIPTION: Imports the tiledbsoma library as soma for working with SOMA experiments.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/apis/python/notebooks/tutorial_exp_query.ipynb#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport tiledbsoma as soma\n```\n\n----------------------------------------\n\nTITLE: Linking pthread for Unix-like Platforms\nDESCRIPTION: Links the pthread library for unit_soma on Linux platforms (non-Apple, non-Windows) to support multi-threaded operations.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/libtiledbsoma/test/CMakeLists.txt#2025-04-16_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nif (NOT APPLE AND NOT WIN32)\n    target_link_libraries(unit_soma PRIVATE pthread)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Importing TileDB-SOMA Library\nDESCRIPTION: Basic import of the tiledbsoma package required for SOMA operations.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/apis/python/notebooks/tutorial_soma_reading.ipynb#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport tiledbsoma\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Settings and Dependencies for TileDB-SOMA\nDESCRIPTION: Sets up coverage flags, finds required dependencies, and configures subdirectories for the TileDB-SOMA project. It also enables testing if the appropriate option is set.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/libtiledbsoma/CMakeLists.txt#2025-04-16_snippet_13\n\nLANGUAGE: CMake\nCODE:\n```\nset(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} $ENV{TILEDBSOMA_COVERAGE}\")\nset(CMAKE_C_FLAGS \"${CMAKE_CXX_FLAGS} $ENV{TILEDBSOMA_COVERAGE}\")\n\nfind_package(TileDB_EP REQUIRED)\nfind_package(Spdlog_EP REQUIRED)\n\nadd_subdirectory(src)\n\nif(TILEDBSOMA_ENABLE_TESTING)\n  enable_testing()\n  add_subdirectory(test)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Accessing Collection Members\nDESCRIPTION: Shows how to access the measurement collection in the experiment.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/doc/source/notebooks/tutorial_soma_objects.ipynb#2025-04-16_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nexperiment.ms\n```\n\n----------------------------------------\n\nTITLE: Reading SOMA Experiment Observation Data in Python\nDESCRIPTION: Reads the 'louvain' column from the observation dataframe, concatenates the results, and converts to a pandas DataFrame.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/doc/source/notebooks/tutorial_exp_query.ipynb#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\np = exp.obs.read(column_names=['louvain']).concat().to_pandas()\np\n```\n\n----------------------------------------\n\nTITLE: S3 Method Dispatch Example\nDESCRIPTION: Shows the usage of S3 method dispatch for integer64 type handling\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/apis/r/NEWS.md#2025-04-16_snippet_1\n\nLANGUAGE: R\nCODE:\n```\ninteger64\n```\n\n----------------------------------------\n\nTITLE: Test Data S3 Paths\nDESCRIPTION: Lists the S3 paths for test data files in the unittest sandbox account.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/apis/python/remote_tests/README.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ns3://tiledb-unittest/soma-prod-test-data/h5ad/pbmc3k_unprocessed.h5ad\ns3://tiledb-unittest/soma-prod-test-data/h5ad/pbmc3k_processed.h5ad\n```\n\n----------------------------------------\n\nTITLE: Python-only Development Workflow\nDESCRIPTION: Build commands for developers who only need to modify Python code without touching C++. This approach uses the build system defined in pyproject.toml.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/libtiledbsoma/README.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# remove old build artifacts\nmake clean\n\n# build and install\npip install -v -e apis/python\n\n# test\npytest apis/python\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx toctree for TileDB-SOMA Tutorials\nDESCRIPTION: This code snippet defines a Sphinx table of contents (toctree) that includes all files in the notebooks directory. It uses the glob directive to automatically include all files and sets the maximum depth of the table to 2 levels.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/doc/source/tutorials.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :glob:\n   :maxdepth: 2\n    \n   notebooks/*\n```\n\n----------------------------------------\n\nTITLE: Setting Up Installation Configuration in CMake\nDESCRIPTION: Configures installation directories, package configuration files, and targets for TileDB-SOMA. Handles rpath settings and installs necessary files including binaries, headers, and CMake configuration files.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/libtiledbsoma/src/CMakeLists.txt#2025-04-16_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(GNUInstallDirs)\ninclude(CMakePackageConfigHelpers)\n\nset(CONFIG_INSTALL_DIR \"${CMAKE_INSTALL_LIBDIR}/cmake/tiledbsoma\")\nset(TARGETS_EXPORT_NAME \"TileDBSomaTargets\")\nset(PROJECT_CONFIG \"${CMAKE_CURRENT_BINARY_DIR}/TileDBSomaConfig.cmake\")\n\nconfigure_package_config_file(\n  \"${TILEDBSOMA_CMAKE_INPUTS_DIR}/Config.cmake.in\"\n  \"${PROJECT_CONFIG}\"\n  INSTALL_DESTINATION \"${CONFIG_INSTALL_DIR}\"\n)\n\ninstall(\n  TARGETS ${TILEDBSOMA_INSTALL_TARGETS}\n  EXPORT ${TARGETS_EXPORT_NAME}\n  RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}\n  LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}\n  ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}\n  INCLUDES DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}\n  PUBLIC_HEADER DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/tiledbsoma\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring the Main SOMA Unit Test Executable\nDESCRIPTION: Defines the unit_soma executable by specifying its source files, object dependencies, and compilation settings. This executable tests the core SOMA functionality.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/libtiledbsoma/test/CMakeLists.txt#2025-04-16_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(Catch_EP REQUIRED)\n\nadd_executable(unit_soma\n    $<TARGET_OBJECTS:TILEDB_SOMA_OBJECTS>\n    $<TARGET_OBJECTS:TILEDB_SOMA_GEOMETRY_OBJECTS>\n    $<TARGET_OBJECTS:TILEDBSOMA_NANOARROW_OBJECT>\n    common.cc\n    common.h\n    unit_geometry_roundtrip.cc\n    unit_arrow_adapter.cc\n    unit_column_buffer.cc\n    unit_managed_query.cc\n    unit_soma_array.cc\n    unit_soma_group.cc\n    unit_soma_dataframe.cc\n    unit_soma_dense_ndarray.cc\n    unit_soma_sparse_ndarray.cc\n    unit_soma_collection.cc\n    unit_soma_column.cc\n    unit_soma_scene.cc\n    unit_soma_geometry_dataframe.cc\n    unit_soma_point_cloud_dataframe.cc\n    unit_soma_multiscale_image.cc\n    unit_soma_coordinates.cc\n    test_indexer.cc\n# TODO: uncomment when thread_pool is enabled\n#    unit_thread_pool.cc\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Nanoarrow Object Library in CMake for TileDB-SOMA\nDESCRIPTION: Sets up the Nanoarrow library as an object library with appropriate compilation options, include directories, and position-independent code settings.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/libtiledbsoma/src/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset_source_files_properties(\n  ${CMAKE_CURRENT_SOURCE_DIR}/external/src/nanoarrow/nanoarrow.c PROPERTIES LANGUAGE CXX\n)\nadd_library(TILEDBSOMA_NANOARROW_OBJECT OBJECT\n  ${CMAKE_CURRENT_SOURCE_DIR}/external/src/nanoarrow/nanoarrow.c\n)\ntarget_link_options(TILEDBSOMA_NANOARROW_OBJECT\n  PRIVATE\n    ${TILEDBSOMA_SANITIZER_FLAG}\n)\ntarget_compile_options(TILEDBSOMA_NANOARROW_OBJECT\n  PRIVATE\n    ${TILEDBSOMA_COMPILE_OPTIONS}\n    ${TILEDBSOMA_SANITIZER_FLAG}\n)\ntarget_include_directories(TILEDBSOMA_NANOARROW_OBJECT\n  PUBLIC\n    ${CMAKE_CURRENT_SOURCE_DIR}/external/include/nanoarrow\n)\nset_property(TARGET TILEDBSOMA_NANOARROW_OBJECT PROPERTY POSITION_INDEPENDENT_CODE ON)\n```\n\n----------------------------------------\n\nTITLE: Building TileDB-SOMA Documentation with bash script\nDESCRIPTION: Command to execute the build script that creates documentation. On first run, it creates a virtualenv, installs requirements, and builds the docs.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/doc/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./build.sh\n```\n\n----------------------------------------\n\nTITLE: Building Tests and Check Targets\nDESCRIPTION: Creates custom targets for building all tests and running checks. The 'build_tests' target depends on all test executables, while 'check' runs all tests with verbose output.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/libtiledbsoma/test/CMakeLists.txt#2025-04-16_snippet_12\n\nLANGUAGE: CMake\nCODE:\n```\nadd_custom_target(build_tests)\nadd_dependencies(build_tests\n  unit_soma\n  unit_geometry\n)\n\n############################################################\n# make check\n############################################################\n\n# Add custom target 'check' in the root of the tree\nadd_custom_target(\n  check COMMAND ${CMAKE_CTEST_COMMAND} -V -C $<CONFIG>\n  WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/../\n  DEPENDS\n    build_tests\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Compiler Flags for Non-MSVC Compilers in TileDB-SOMA\nDESCRIPTION: Configures compiler flags for non-MSVC compilers, including warning options, error handling, and build-specific flags. It also sets up sanitizer options and compiler-specific additions.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/libtiledbsoma/CMakeLists.txt#2025-04-16_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\nelse()\n  set(TILEDBSOMA_COMPILE_OPTIONS -Wall -Wextra -D_LIBCPP_TYPEINFO_COMPARISON_IMPLEMENTATION=2)\n\n  if (SPDLOG_LINK_SHARED)\n    add_definitions(-DSPDLOG_COMPILED_LIB)\n  endif()\n\n  if(${TILEDBSOMA_ENABLE_WERROR})\n    set(TILEDBSOMA_WERROR_OPTION -Werror)\n  else()\n    set(TILEDBSOMA_WERROR_OPTION \"\")\n  endif()\n\n  list(APPEND\n    TILEDBSOMA_COMPILE_OPTIONS\n    $<$<CONFIG:Debug>: -DDEBUG -O0 -g3 -ggdb3 -gdwarf-3>\n  )\n  list(APPEND\n    TILEDBSOMA_COMPILE_OPTIONS\n    $<$<CONFIG:Release>: -DNDEBUG -O3>\n  )\n  list(APPEND\n    TILEDBSOMA_COMPILE_OPTIONS\n    $<$<CONFIG:RelWithDebInfo>: -DNDEBUG -O3 -g3 -ggdb3 -gdwarf-3>\n  )\n  list(APPEND\n    TILEDBSOMA_COMPILE_OPTIONS\n    $<$<CONFIG:ASAN,TSAN,LSAN,UBSAN,MSAN>: -DDEBUG -O1 -g -fno-omit-frame-pointer  -fno-optimize-sibling-calls>\n  )\n\n  set(TILEDBSOMA_SANITIZER_FLAG \"\")\n  list(APPEND TILEDBSOMA_SANITIZER_FLAG \"\\$<GENEX_EVAL:$<$<CONFIG:ASAN>:-fsanitize=address>>\")\n  list(APPEND TILEDBSOMA_SANITIZER_FLAG \"\\$<GENEX_EVAL:$<$<CONFIG:LSAN>:-fsanitize=leak>>\")\n  list(APPEND TILEDBSOMA_SANITIZER_FLAG \"\\$<GENEX_EVAL:$<$<CONFIG:TSAN>:-fsanitize=thread>>\")\n  list(APPEND TILEDBSOMA_SANITIZER_FLAG \"\\$<GENEX_EVAL:$<$<CONFIG:UBSAN>:-fsanitize=undefined>>\")\n  list(APPEND TILEDBSOMA_SANITIZER_FLAG \"\\$<GENEX_EVAL:$<$<CONFIG:MSAN>:-fsanitize=memory>>\")\n\n  if(NOT CMAKE_CXX_COMPILER_ID MATCHES \"Clang\")\n    list(APPEND TILEDBSOMA_COMPILE_OPTIONS -Wno-literal-suffix)\n  endif()\n\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Compiler Flags for MSVC in TileDB-SOMA\nDESCRIPTION: Configures compiler flags for MSVC, including warning suppressions, error handling, and build-specific options. It also sets up GDI-related flags and multi-process compilation options.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/libtiledbsoma/CMakeLists.txt#2025-04-16_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\nif(MSVC)\n  set(TILEDBSOMA_COMPILE_OPTIONS /W4 /wd4101 /wd4146 /wd4244 /wd4251 /wd4456 /wd4457 /wd4702 /wd4800 /wd4996)\n\n  if(${TILEDBSOMA_ENABLE_WERROR})\n    set(TILEDBSOMA_WERROR_OPTION /WX)\n  else()\n    set(TILEDBSOMA_WERROR_OPTION \"\")\n  endif()\n\n  list(APPEND TILEDBSOMA_COMPILE_OPTIONS /DNOGDI)\n\n  list(APPEND TILEDBSOMA_COMPILE_OPTIONS ${MSVC_MP_FLAG})\n\n  list(APPEND\n    TILEDBSOMA_COMPILE_OPTIONS\n    $<$<CONFIG:Debug>:/DDEBUG /Od /Zi /bigobj>\n  )\n  list(APPEND\n    TILEDBSOMA_COMPILE_OPTIONS\n    $<$<CONFIG:Release>:/DNDEBUG /Ox>\n  )\n  list(APPEND\n    TILEDBSOMA_COMPILE_OPTIONS\n    $<$<CONFIG:RelWithDebInfo>:/DNDEBUG /Ox /Zi>\n  )\n```\n\n----------------------------------------\n\nTITLE: Updating Makefile Clean Data Target in Bash\nDESCRIPTION: This snippet refers to updating the 'make clean_data' target in the Makefile, which calls a bash script to remove test data. It emphasizes adding a section to remove the newly added data.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/data/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# In scripts/clean-test-data.sh\n\n# Remove new dataset\nrm -rf data/new_dataset\n```\n\n----------------------------------------\n\nTITLE: Allowing Deprecated Function Usage in Non-MSVC Builds\nDESCRIPTION: Disables deprecated function warnings for unit_soma on non-MSVC platforms, specifically to allow writing to an array with a timestamp.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/libtiledbsoma/test/CMakeLists.txt#2025-04-16_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nif (NOT MSVC)\n  # Allow deprecated function for writing to an array with a timestamp\n  target_compile_options(unit_soma PRIVATE -Wno-deprecated-declarations)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting macOS-specific build options\nDESCRIPTION: Configures macOS-specific build settings including rpath handling and framework usage constraints.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/libtiledbsoma/CMakeLists.txt#2025-04-16_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\n# Use @rpath on macOS for building shared libraries.\nif(APPLE)\n  set(CMAKE_MACOSX_RPATH ON)\n\n  # Set minimum macOS version to enable certain C++20 features\n  # set(CMAKE_OSX_DEPLOYMENT_TARGET 13.3)\n\n  # Don't allow macOS .frameworks to be used for dependencies.\n  set(CMAKE_FIND_FRAMEWORK NEVER)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Accessing TileDB-SOMA Functions and Data\nDESCRIPTION: Code references showing R functions used for listing datasets and directory contents, with note about accounting for README.md in test comparisons.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/apis/r/inst/extdata/README.md#2025-04-16_snippet_0\n\nLANGUAGE: r\nCODE:\n```\nlist_datasets()\n```\n\nLANGUAGE: r\nCODE:\n```\ndir(example_data_dir())\n```\n\n----------------------------------------\n\nTITLE: Setting up CMake for TileDB-SOMA project\nDESCRIPTION: Configures the minimum CMake version, policies, and module paths for the TileDB-SOMA project build system.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/libtiledbsoma/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.21)\n\nif(CMAKE_VERSION VERSION_GREATER_EQUAL \"3.24.0\")\n  cmake_policy(SET CMP0135 NEW)\nendif()\n\nset(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} \"${CMAKE_CURRENT_SOURCE_DIR}/cmake/Modules/\")\n\nset(TILEDBSOMA_CMAKE_INPUTS_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/cmake/inputs\")\n```\n\n----------------------------------------\n\nTITLE: Copying DLLs for Windows Builds\nDESCRIPTION: Adds a post-build command for Windows to copy runtime DLLs to the unit_soma executable directory, ensuring all dependencies are available.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/libtiledbsoma/test/CMakeLists.txt#2025-04-16_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\nif (WIN32)\n  add_custom_command(TARGET unit_soma POST_BUILD\n    COMMAND ${CMAKE_COMMAND} -E copy_if_different $<TARGET_RUNTIME_DLLS:unit_soma> $<TARGET_FILE_DIR:unit_soma>\n    COMMAND_EXPAND_LISTS\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: TileDB-SOMA vcpkg Bootstrap Log\nDESCRIPTION: Log showing vcpkg bootstrap process failure on ARM architecture, indicating the requirement for VCPKG_FORCE_SYSTEM_BINARIES environment variable.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/docker/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ntail /TileDB-SOMA/build/externals/src/ep_tiledb-build/vcpkg-bootstrap.log\n# [208/216] Building CXX object CMakeFiles/vcpkg-test.dir/src/vcpkg-test/unicode.cpp.o\n# [209/216] Building CXX object CMakeFiles/vcpkg-test.dir/src/vcpkg-test/xunitwriter.cpp.o\n# [210/216] Building CXX object CMakeFiles/vcpkg-test.dir/src/vcpkg-test/update.cpp.o\n# [211/216] Building CXX object CMakeFiles/vcpkg-test.dir/src/vcpkg-test/versionplan.cpp.o\n# [212/216] Building CXX object CMakeFiles/vcpkg-test.dir/src/vcpkg-test/util.cpp.o\n# [213/216] Building CXX object CMakeFiles/vcpkg-test.dir/src/vcpkg-test/plan.cpp.o\n# [214/216] Building CXX object CMakeFiles/vcpkg-test.dir/src/vcpkg-test/dependencies.cpp.o\n# [215/216] Building CXX object CMakeFiles/vcpkg-test.dir/src/vcpkg-test/catch.cpp.o\n# [216/216] Linking CXX executable vcpkg-test\n# Environment variable VCPKG_FORCE_SYSTEM_BINARIES must be set on arm, s390x, ppc64le and riscv platforms.\n```\n\n----------------------------------------\n\nTITLE: Creating a SOMA AxisQuery for Cell Types in Python\nDESCRIPTION: Constructs a SOMA AxisQuery object to filter observations based on specific cell types ('B cells' and 'NK cells') in the 'louvain' column.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/doc/source/notebooks/tutorial_exp_query.ipynb#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nobs_query = soma.AxisQuery(value_filter='louvain in [\"B cells\", \"NK cells\"]')\n```\n\n----------------------------------------\n\nTITLE: Building TileDB-SOMA Make Install Error Log\nDESCRIPTION: Error log showing build failure when attempting to build TileDB-SOMA without VCPKG_FORCE_SYSTEM_BINARIES set on ARM architecture. Shows the make install process and CMake configuration failure.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/docker/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake install\n# Building Release build\n# -- Using default install prefix /TileDB-SOMA/dist. To control CMAKE_INSTALL_PREFIX, set OVERRIDE_INSTALL_PREFIX=OFF\n# -- Install prefix is /TileDB-SOMA/dist.\n# -- The C compiler identification is GNU 13.3.0\n# -- The CXX compiler identification is GNU 13.3.0\n# -- Detecting C compiler ABI info\n# -- Detecting C compiler ABI info - done\n# -- Check for working C compiler: /usr/bin/cc - skipped\n# -- Detecting C compile features\n# -- Detecting C compile features - done\n# -- Detecting CXX compiler ABI info\n# -- Detecting CXX compiler ABI info - done\n# -- Check for working CXX compiler: /usr/bin/c++ - skipped\n# -- Detecting CXX compile features\n# -- Detecting CXX compile features - done\n# -- Starting TileDB-SOMA superbuild.\n# -- Could NOT find TileDB (missing: TileDB_DIR)\n# -- Adding TileDB as an external project\n# -- Could NOT find spdlog (missing: spdlog_DIR)\n# -- Adding spdlog as an external project\n# -- Not found clang-tidy\n# -- Not found clang-format\n# -- Configuring done (0.2s)\n# -- Generating done (0.0s)\n# -- Build files have been written to: /TileDB-SOMA/build\n# [  4%] Creating directories for 'ep_tiledb'\n# [  8%] Performing download step (download, verify and extract) for 'ep_tiledb'\n# -- ep_tiledb download command succeeded.  See also /TileDB-SOMA/build/externals/src/ep_tiledb-stamp/ep_tiledb-download-*.log\n# [ 12%] No update step for 'ep_tiledb'\n# [ 16%] No patch step for 'ep_tiledb'\n# [ 20%] Performing configure step for 'ep_tiledb'\n# CMake Error at /TileDB-SOMA/build/externals/src/ep_tiledb-stamp/ep_tiledb-configure-Release.cmake:49 (message):\n#   Command failed: 1\n#\n#    '/usr/bin/cmake' '-DCMAKE_INSTALL_PREFIX=/TileDB-SOMA/build/externals/install' '-DCMAKE_PREFIX_PATH=/TileDB-SOMA/build/externals/install' '-DTILEDB_S3=ON' '-DTILEDB_AZURE=ON' '-DTILEDB_GCS=OFF' '-DTILEDB_HDFS=OFF' '-DTILEDB_SERIALIZATION=ON' '-DTILEDB_WERROR=OFF' '-DTILEDB_REMOVE_DEPRECATIONS=OFF' '-DTILEDB_VERBOSE=OFF' '-DTILEDB_TESTS=OFF' '-DCMAKE_BUILD_TYPE=Release' '-DCMAKE_OSX_ARCHITECTURES=' '-DCMAKE_C_FLAGS=' '-DCMAKE_CXX_FLAGS=' '-DCMAKE_CXX_COMPILER=/usr/bin/c++' '-DCMAKE_C_COMPILER=/usr/bin/cc' '' '-DCMAKE_POSITION_INDEPENDENT_CODE=ON' '-GUnix Makefiles' '-S' '/TileDB-SOMA/build/externals/src/ep_tiledb' '-B' '/TileDB-SOMA/build/externals/src/ep_tiledb-build'\n#\n#   See also\n#\n#     /TileDB-SOMA/build/externals/src/ep_tiledb-stamp/ep_tiledb-configure-*.log\n#\n#\n# gmake[3]: *** [CMakeFiles/ep_tiledb.dir/build.make:92: externals/src/ep_tiledb-stamp/ep_tiledb-configure] Error 1\n# gmake[2]: *** [CMakeFiles/Makefile2:89: CMakeFiles/ep_tiledb.dir/all] Error 2\n# gmake[1]: *** [Makefile:91: all] Error 2\n# make: *** [Makefile:19: install] Error 2\n```\n\n----------------------------------------\n\nTITLE: Accessing Query Result Data in Python\nDESCRIPTION: Retrieves the 'X' data from the query result, concatenates it, and converts it to a pandas DataFrame for inspection.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/doc/source/notebooks/tutorial_exp_query.ipynb#2025-04-16_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nquery.X(\"data\").tables().concat().to_pandas()\n```\n\n----------------------------------------\n\nTITLE: TileDB-SOMA Configure Error Log\nDESCRIPTION: Error log showing vcpkg configuration failure during TileDB-SOMA build process. Indicates vcpkg installation failure and missing CMAKE_MAKE_PROGRAM.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/docker/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncat /TileDB-SOMA/build/externals/src/ep_tiledb-stamp/ep_tiledb-configure-err.log\n# TILEDB_DISABLE_AUTO_VCPKG is not defined. Fetch a local copy of vcpkg.\n# Vcpkg commit string used: 7aeffc91033ad35cc4e2c152f213a866ec6c11ac\n# Using vcpkg features: azure;serialization;s3;webp\n# CMake Error at /TileDB-SOMA/build/externals/src/ep_tiledb-build/_deps/vcpkg-src/scripts/buildsystems/vcpkg.cmake:902 (message):\n#   vcpkg install failed.  See logs for more information:\n#   /TileDB-SOMA/build/externals/src/ep_tiledb-build/vcpkg-bootstrap.log\n# Call Stack (most recent call first):\n#   /usr/share/cmake-3.28/Modules/CMakeDetermineSystem.cmake:170 (include)\n#   CMakeLists.txt:121 (project)\n#\n#\n# CMake Error: CMake was unable to find a build program corresponding to \"Unix Makefiles\".  CMAKE_MAKE_PROGRAM is not set.  You probably need to select a different build tool.\n```\n\n----------------------------------------\n\nTITLE: Installing TileDB-SOMA Development Version from GitHub in R\nDESCRIPTION: This R code uses the remotes package to install the latest development version of TileDB-SOMA directly from the GitHub repository.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/apis/r/README.md#2025-04-16_snippet_2\n\nLANGUAGE: r\nCODE:\n```\nremotes::install_github(\"https://github.com/single-cell-data/TileDB-SOMA\", subdir = \"apis/r\")\n```\n\n----------------------------------------\n\nTITLE: Executing a SOMA Experiment Query in Python\nDESCRIPTION: Performs an axis query on the SOMA Experiment using the previously defined observation query for the 'RNA' measurement.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/doc/source/notebooks/tutorial_exp_query.ipynb#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nquery = exp.axis_query(\"RNA\", obs_query=obs_query)\n```\n\n----------------------------------------\n\nTITLE: Importing TileDB-SOMA Library\nDESCRIPTION: Imports the tiledbsoma package which is required to work with SOMA objects.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/doc/source/notebooks/tutorial_soma_objects.ipynb#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport tiledbsoma\n```\n\n----------------------------------------\n\nTITLE: Importing TileDB-SOMA in Python\nDESCRIPTION: Imports the tiledbsoma library as soma to work with SOMA experiments.\nSOURCE: https://github.com/single-cell-data/TileDB-SOMA/blob/main/doc/source/notebooks/tutorial_exp_query.ipynb#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport tiledbsoma as soma\n```"
  }
]