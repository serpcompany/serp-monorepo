[
  {
    "owner": "fiberplane",
    "repo": "fiberplane",
    "content": "TITLE: Implementing Agnostic Validator in Hono\nDESCRIPTION: This snippet shows how to create a custom validator that can work with any validation function, demonstrating Hono's flexibility in handling different validation libraries.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2025-02-04-hono-validation-middleware.mdx#2025-04-14_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\ntype ValidationFunction<T, E extends Error = Error> = (\n  data: unknown\n) => { success: true; data: T } | { success: false; error: E };\n\nexport const customAgnosticValidator = <\n  Target extends keyof ValidationTargets,\n  T extends Record<string, any>\n>(\n  target: Target,\n  validate: ValidationFunction<T>\n) => {\n  return validator(target, (value, c) => {\n    const result = validate(value);\n\n    if (!result.success) {\n      return c.json(\n        {\n          timestamp: Date.now(),\n          message: `invalid ${target}`,\n          issues: formatError(result.error.issues)\n        },\n        400\n      );\n    }\n\n    return result.data;\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Tools for Cloudflare Agents\nDESCRIPTION: Examples of defining tools for a Cloudflare Agent using the tool builder. Includes patterns for tools that require confirmation, auto-executing tools, and a scheduling tool implementation with different timing patterns.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/examples/simple-agent/README.md#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// Example of a tool that requires confirmation\nconst searchDatabase = tool({\n  description: \"Search the database for user records\",\n  parameters: z.object({\n    query: z.string(),\n    limit: z.number().optional(),\n  }),\n  // No execute function = requires confirmation\n});\n\n// Example of an auto-executing tool\nconst getCurrentTime = tool({\n  description: \"Get current server time\",\n  parameters: z.object({}),\n  execute: async () => new Date().toISOString(),\n});\n\n// Scheduling tool implementation\nconst scheduleTask = tool({\n  description:\n    \"schedule a task to be executed at a later time. 'when' can be a date, a delay in seconds, or a cron pattern.\",\n  parameters: z.object({\n    type: z.enum([\"scheduled\", \"delayed\", \"cron\"]),\n    when: z.union([z.number(), z.string()]),\n    payload: z.string(),\n  }),\n  execute: async ({ type, when, payload }) => {\n    // ... see the implementation in tools.ts\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing a Route Handler with Zod OpenAPI Validation in Hono\nDESCRIPTION: Configures the application to use the previously defined route with a handler function. The handler processes validated JSON input and returns a response with appropriate status code.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/docs/docs/get-started.mdx#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\napp.openapi(createUser, async (c) => {\n  const { name, email } = c.req.valid(\"json\");\n  // define the logic of the route handler\n\n  return c.json(newUser, 201);\n});\n```\n\n----------------------------------------\n\nTITLE: Database Querying with Drizzle and Hono in TypeScript\nDESCRIPTION: Demonstrates how to initialize Drizzle ORM with a Cloudflare D1 database binding in a Hono application. The example shows a GET endpoint that queries and returns all records from the 'gaggles' table with appropriate type inference.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2024-12-10-placegoose.mdx#2025-04-14_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { drizzle } from \"drizzle-orm/d1\";\nimport { Hono } from \"hono\";\n\ntype AppType = {\n  Bindings: {\n    // Global type we get from @cloudflare/workers-types\n    DB: D1Database;\n  };\n};\n\nconst gagglesApp = new Hono<AppType>();\n\n// Get all Gaggles\ngagglesApp.get(\"/\", async (c) => {\n  // We get our DB binding from Context\n  const db = drizzle(c.env.DB, {\n    // This must be set for Drizzle to automatically\n    // translate between snake and camel case\n    casing: \"snake_case\"\n  });\n\n  // Drizzle inference tells us is type Gaggle[]\n  const gaggles = await db.select().from(schema.gaggles);\n\n  return c.json(gaggles);\n});\n\nexport default gagglesApp;\n```\n\n----------------------------------------\n\nTITLE: Final WebhookReceiver with Hibernation Support\nDESCRIPTION: The complete WebhookReceiver implementation that properly handles Cloudflare's Websocket Hibernation. It restores connections after hibernation using getWebSockets() and implements a broadcast method to send messages to all connected clients.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2024-09-02-websocket-server-in-hono-with-durable-objects.mdx#2025-04-14_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nexport class WebhookReceiver extends DurableObject<CloudflareBindings> {\n  connections: Set<WebSocket>;\n\n  constructor(ctx: DurableObjectState, env: CloudflareBindings) {\n    super(ctx, env);\n    this.connections = new Set<WebSocket>();\n\n    const websockets = this.ctx.getWebSockets();\n\n    for (const ws of websockets) {\n      this.connections.add(ws);\n    }\n  }\n\n  async fetch(req: Request) {\n    const websocketPair = new WebSocketPair();\n    const [client, server] = Object.values(websocketPair);\n\n    this.ctx.acceptWebSocket(server);\n    this.connections.add(client);\n\n    console.log(\"fetch, connections\", this.connections);\n    return new Response(null, {\n      status: 101,\n      webSocket: client\n    });\n  }\n\n  webSocketError(ws: WebSocket, error: unknown) {\n    this.connections.delete(ws);\n  }\n\n  webSocketClose(\n    ws: WebSocket,\n    _code: number,\n    _reason: string,\n    _wasClean: boolean\n  ) {\n    this.connections.delete(ws);\n  }\n\n  async broadcast(message: string) {\n    for (const connection of this.connections) {\n      connection.send(message);\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Worker Fetch Entrypoint with Fiberplane Wrapper\nDESCRIPTION: Example showing how to wrap a Cloudflare Worker's fetch entrypoint with the Fiberplane wrapper to enable debugging capabilities.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/packages/agents/README.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { fiberplane } from \"@fiberplane/agents\";\n\nexport default {\n  fetch: fiberplane(\n    async (request: Request, env: Env, ctx: ExecutionContext) => {\n      // Your existing worker logic...\n      return await routeAgentRequest(request, env) || \n        new Response(\"Not found\", { status: 404 });\n    }\n  ),\n};\n```\n\n----------------------------------------\n\nTITLE: Creating an OpenAPIHono Application Instance with TypeScript\nDESCRIPTION: Initializes a new OpenAPIHono application with typing for Bindings and Variables. This is the first step when setting up a Hono API with Zod OpenAPI integration.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/docs/docs/get-started.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { OpenAPIHono } from \"@hono/zod-openapi\";\nconst app = new OpenAPIHono<{\n  Bindings: Bindings;\n  Variables: Variables;\n}>();\n```\n\n----------------------------------------\n\nTITLE: Implementing Route Parameter Validation with Hono Validator Middleware\nDESCRIPTION: Demonstrates the use of Hono's validator middleware to validate route parameters and request body in a PUT endpoint. Includes custom validation logic that ensures ID parameters are positive integers.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2024-12-10-placegoose.mdx#2025-04-14_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n// Update Gaggle specified by id\ngagglesApp.put(\n    \"/:id\",\n  validator(\"param\", (params, c) => {\n        const idParam = params.id;\n\n        if (!/^[1-9]\\\\d*$/.test(value)) {\n            throw new HTTPException(400, {\n                  message: \"ID values must be positive integers\",\n              });\n        }\n\n        return {\n            id: Number.parseInt(value);\n          };\n  }),\n  validator(\"json\", (body, c) => {\n      // ...\n  }),\n  async (c) => {\n      // 'id' is known to be type \"number\"\n    const { id } = c.req.valid(\"param\");\n    // ...\n    return c.json(updatedGaggle);\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing AI Code Review with Claude and TypeScript\nDESCRIPTION: Function that generates code reviews using Anthropic's Claude AI model. It takes diff content as input and returns an AI-generated review that combines technical analysis with a goose-themed personality. The review focuses on bugs, security, performance, and best practices.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2024-11-18-angry-goose-review-bot.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nasync function generateCodeReview(\n  anthropic: Anthropic,\n  diffContent: string,\n): Promise<string> {\n  const message = await anthropic.messages.create({\n    model: \"claude-3-5-sonnet-20241022\",\n    max_tokens: 1500,\n    messages: [\n      {\n        role: \"user\",\n        content: `You are an angry goose engineering manager.\n        Please review this code diff and provide a detailed code review, but be goosey and angry. Focus on:\n      1. Potential bugs and issues\n      2. Security concerns\n      3. Performance implications\n      4. Code style and best practices\n      5. Suggestions for improvement\n\n      Here's the diff:\n      ${diffContent}`,\n      },\n    ],\n  });\n  return message.content[0].text;\n```\n\n----------------------------------------\n\nTITLE: Implementing Fiberplane Wrapper for Worker's Fetch Entrypoint in TypeScript\nDESCRIPTION: This snippet shows how to wrap a Cloudflare Worker's fetch entrypoint with the Fiberplane wrapper to enable the Agents Playground. The wrapper intercepts requests to provide debugging functionality while passing through normal agent requests.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2025-04-07-agents-sdk-playground.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { fiberplane } from \"@fiberplane/agents\";\n\nexport default {\n  fetch: fiberplane(async (request, env, ctx) => {\n    return await routeAgentRequest(request, env) ||\n      new Response(\"Not found\", { status: 404 });\n  }),\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Hono API with Fiberplane and OpenAPI Integration\nDESCRIPTION: Sets up a Hono API instance with Fiberplane integration and OpenAPI specification generation. Creates an endpoint at /openapi.json to serve the API specification and mounts the Fiberplane middleware at /fp/* path.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/landing/index.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Hono } from \"hono\";\nimport { createOpenAPISpec, createFiberplane } from \"@fiberplane/hono\";\n\nconst app = new Hono();\n\napp.get(\"/openapi.json\", (c) => {\n   const spec = createOpenAPISpec(app, {\n      info: { title: \"My API\", version: \"1.0.0\" },\n   });\n   return c.json(spec);\n});\n\napp.use(\"/fp/*\", createFiberplane({\n   openapi: {\n      url: \"/openapi.json\",\n   }\n}));\n\nexport default app;\n```\n\n----------------------------------------\n\nTITLE: Runtime Type Validation with Drizzle-Zod in TypeScript\nDESCRIPTION: Shows how to create Zod validation schemas from Drizzle table models using the drizzle-zod plugin. The example demonstrates extending the automatically generated schema with additional validation requirements.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2024-12-10-placegoose.mdx#2025-04-14_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createInsertSchema } from \"drizzle-zod\";\nimport * as schema from \"./schema\";\n\nexport const ZGaggleInsert = createInsertSchema(schema.gaggles, {\n  name: (schema) => schema.name.min(1),\n  territory: (schema) => schema.territory.min(1)\n});\n```\n\n----------------------------------------\n\nTITLE: Seeding Database with Drizzle Seed in TypeScript\nDESCRIPTION: Demonstrates how to use Drizzle's pRNG library to programmatically generate seed data for the Gaggles table. It shows how to refine the data generation with custom helper functions for names and territories.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2024-12-10-placegoose.mdx#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as schema from \"/src/db/schema.ts\";\n\nconst db = drizzle(client);\n\nawait seed(db, {\n  gaggles: schema.gaggles\n  // ...\n}).refine((f) => ({\n  gaggles: {\n    count: 10,\n    columns: {\n      name: f.fullName(),\n      territory: f.weightedRandom([\n        { weight: 0.5, value: f.city() },\n        { weight: 0.5, value: f.default({ defaultValue: null }) }\n      ])\n    }\n  }\n  // ...\n}));\n```\n\n----------------------------------------\n\nTITLE: Implementing Tool Execution Handlers for Cloudflare Agents\nDESCRIPTION: Example of defining execution handlers for tools that require confirmation. This showcases how to implement the actual functionality that runs when a user confirms a tool action.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/examples/simple-agent/README.md#2025-04-14_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport const executions = {\n  searchDatabase: async ({\n    query,\n    limit,\n  }: {\n    query: string;\n    limit?: number;\n  }) => {\n    // Implementation for when the tool is confirmed\n    const results = await db.search(query, limit);\n    return results;\n  },\n  // Add more execution handlers for other tools that require confirmation\n};\n```\n\n----------------------------------------\n\nTITLE: Mounting Fiberplane Middleware to Hono App\nDESCRIPTION: TypeScript code demonstrating how to integrate Fiberplane with a Hono application. This snippet shows how to create a Fiberplane instance, configure it to use an OpenAPI specification, and mount it to a specific route.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/packages/hono/README.md#2025-04-14_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport { createFiberplane } from \"@fiberplane/hono\";\n\nconst app = new Hono();\n\napp.get(\"/openapi.json\", () => {\n  // ... return your openapi spec here ...\n});\n\napp.use(\"/fp/*\", createFiberplane({\n  openapi: { url: \"/openapi.json\" },\n}));\n\nexport default app;\n```\n\n----------------------------------------\n\nTITLE: Creating API Routes with Hono Framework in TypeScript\nDESCRIPTION: Shows how to set up a Hono application with routes, CORS middleware, and error handling. It demonstrates the modular approach to route management by creating separate route instances and mounting them to the main app.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2024-12-10-placegoose.mdx#2025-04-14_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Hono, type Context } from \"hono\";\nimport { cors } from \"hono/cors\";\nimport { instrument } from \"@fiberplane/hono-otel\";\n\nconst app = new Hono();\n// Ensure the API is publicly accessible.\n// For more, see MDN's docs on CORS.\napp.use(\"*\", cors());\n\nconst gagglesRoute = new Hono();\n// This handler will not be inferred in the gagglesRoute type\ngagglesRoute.get(\"/:id\", (c: Context) => {\n  return c.text(\"Not yet implemented\", 418);\n});\n\napp.route(\"/gaggles\", routes.gaggles);\n\n// Have Fiberplane client inspect traces\nexport default instrument(app);\n```\n\n----------------------------------------\n\nTITLE: Defining Database Schema with Drizzle ORM in TypeScript\nDESCRIPTION: Creates database schema for documents and chunks tables using Drizzle ORM. The documents table stores documentation pages while chunks table stores content segments with vector embeddings. Includes foreign key relationships and custom data types.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2024-11-13-retrieval-augmented-geese.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const documents = pgTable(\"documents\", {\n  id: uuid(\"id\").defaultRandom().primaryKey(),\n  title: text(\"title\").notNull(),\n  url: text(\"url\"),\n  content: text(\"content\"),\n  hash: text(\"hash\").notNull()\n});\n\nexport const chunks = pgTable(\"chunks\", {\n  id: uuid(\"id\").defaultRandom().primaryKey(),\n  documentId: uuid(\"document_id\")\n    .references(() => documents.id)\n    .notNull(),\n  chunkNumber: integer(\"chunk_number\").notNull(),\n  text: text(\"text\").notNull(),\n  embedding: vector(\"embedding\", { dimensions: 1536 }),\n  metadata: jsonb(\"metadata\").$type<Array<string>>(),\n  hash: text(\"hash\").notNull()\n});\n```\n\n----------------------------------------\n\nTITLE: Instrumenting Hono App with Fiberplane's OpenTelemetry Integration\nDESCRIPTION: Code snippet showing how to instrument a Hono application with Fiberplane's OpenTelemetry client library. This enables tracing and monitoring of API calls and third-party integrations for better debugging.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2024-09-19-building-a-community-database-with-github-a-guide-to-webhook-and-api-integration-with-hono-js.mdx#2025-04-14_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { instrument } from \"@fiberplane/hono-otel\";\n\nexport default instrument(app);\n```\n\n----------------------------------------\n\nTITLE: Implementing Request Validation with Hono and Zod\nDESCRIPTION: This example demonstrates how to use @hono/zod-validator to validate query parameters in a Hono route handler. The middleware validates that the 'search' parameter is a string and makes it available type-safely in the handler via c.req.valid().\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2025-02-04-hono-validation-middleware.mdx#2025-04-14_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Hono } from \"hono\";\nimport { zValidator } from \"@hono/zod-validator\";\nimport { z } from \"zod\";\n\n// I like to centralize these in a directory like /dtos\n// or /schemas, but it really depends on your use-case\nconst ZSearchQuery = z.object({\n  search: z.string()\n});\n\nconst app = new Hono().get(\n  \"/posts\",\n  // Must be handler-specific for type-safety\n  zValidator(\"query\", ZSearchQuery),\n  // After going through middleware, Context\n  // is passed into the handler\n  async (c) => {\n    const { search } = c.req.valid(\"query\");\n    // We know `search` is a string in this scope, so we\n    // can handle the request type-safely from here on\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Drizzle for HTTP Driver in Production\nDESCRIPTION: Configuration setup for Drizzle to use the HTTP driver when running in a production environment. It defines different configurations based on the environment and includes credentials validation for Cloudflare D1.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2025-03-24-placegoose-to-prod.mdx#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport \"dotenv/config\"; // We use dotenv to grab local environment variables\nimport { config } from \"dotenv\";\nimport { defineConfig, type Config } from \"drizzle-kit\";\n\nlet drizzleConfig: Config;\n\nif (process.env.ENVIRONMENT === \"production\") {\n  config({ path: \"./.prod.vars\" });\n\n  // Don't forget to update your local .prod.vars file!\n  const accountId = process.env.CLOUDFLARE_ACCOUNT_ID;\n  const databaseId = process.env.CLOUDFLARE_DATABASE_ID;\n  const token = process.env.CLOUDFLARE_D1_TOKEN;\n\n  // Make sure we actually set our credentials\n  if (!accountId || !databaseId || !token) {\n    console.error(\n      `Configuration Failed: Missing Credentials`,\n      JSON.stringify({ accountId, databaseId, token }, null, 2)\n    );\n    process.exit(1);\n  }\n\n  drizzleConfig = defineConfig({\n    schema: \"./src/schema.ts\",\n    out: \"./migrations\",\n    dialect: \"sqlite\",\n    driver: \"d1-http\", // Use the HTTP driver\n    dbCredentials: {\n      accountId,\n      databaseId,\n      token\n    }\n  });\n} else {\n  // Local config\n}\n\nexport default drizzleConfig;\n```\n\n----------------------------------------\n\nTITLE: Creating API Endpoints with Hono in TypeScript\nDESCRIPTION: This code creates REST API endpoints using Hono framework, integrating with D1 database and Durable Objects. It implements endpoints to get all websites and add a new website, which also creates a Monitor instance for the new site using Durable Objects.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2024-12-17-honc-uptime-monitor.mdx#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst app = new Hono<{ Bindings: Bindings }>();\n\n// Get all websites\napp.get(\"/api/websites\", async (c) => {\n  const db = drizzle(c.env.DB);\n  const websites = await db.select().from(schema.websites);\n  return c.json({ websites });\n});\n\n// Add a new website\napp.post(\"/api/website\", async (c) => {\n  const db = drizzle(c.env.DB);\n  const data = await c.req.json();\n\n  const [newWebsite] = await db\n    .insert(schema.websites)\n    .values({\n      url: data.url,\n      name: data.name,\n      checkInterval: data.checkInterval,\n      createdAt: new Date().toISOString()\n    })\n    .returning();\n\n  // Create monitor for the new website\n  const monitor = c.env.SCHEDULED_MONITOR.get(\n    c.env.SCHEDULED_MONITOR.idFromName(newWebsite.id.toString())\n  );\n  await monitor.fetch(\n    new Request(\"https://monitor/schedule?websiteId=\" + newWebsite.id)\n  );\n\n  return c.json(newWebsite);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating OpenAPI Route Definition\nDESCRIPTION: Defines an API route with complete request/response schemas, HTTP method, path, and metadata using the createRoute helper function.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2024-12-05-openapi-support.mdx#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createRoute } from \"@hono/zod-openapi\";\n\n// Define the request/response schema for a route to create a new user\nconst createUserRoute = createRoute({\n  method: \"post\",\n  path: \"/users\",\n  title: \"CreateUser\",\n  description: \"Create a new user\",\n  request: {\n    body: {\n      content: {\n        \"application/json\": {\n          schema: NewUserSchema\n        }\n      }\n    }\n  },\n  responses: {\n    201: {\n      content: {\n        \"application/json\": {\n          schema: UserSchema\n        }\n      },\n      description: \"Newly created user\"\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Newsletter Distribution Endpoint in Cloudflare Worker with Hono.js\nDESCRIPTION: This code creates an HTTP POST endpoint to send newsletters to all registered users. It fetches users from a database and sends a message to a queue for each user to process newsletter distribution asynchronously.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2025-02-17-asynchronous-tasks-in-cloudflare-part2b.mdx#2025-04-14_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\napp.post(\"/api/send-newsletter\", async (c) => {\n  const { newsletterText, subject } = await c.req.json();\n\n  // Connect to the database\n  const sql = neon(c.env.DATABASE_URL);\n  const db = drizzle(sql);\n\n  // Fetch all registered users\n  const allUsers = await db.select().from(runners);\n\n  // Send newsletter to each user\n  for (const user of allUsers) {\n    try {\n      console.log(\n        `Sending message to queue for user: ${user.firstName} (${user.email})`\n      );\n      await c.env.NEWSLETTER_QUEUE.send({\n        email: user.email,\n        firstName: user.firstName,\n        newsletterText,\n        subject,\n        type: \"newsletter\"\n      });\n    } catch (error) {\n      console.error(`Failed to send newsletter to ${user.email}:`, error);\n    }\n  }\n\n  return c.json({\n    message: `Newsletter queued for ${allUsers.length} recipients`,\n    status: \"success\"\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Data Transfer Objects (DTOs) for Request Validation in TypeScript\nDESCRIPTION: Defines schema validation for API request payloads by creating Data Transfer Objects that omit specific fields from database schemas, preventing users from directly manipulating sensitive data like IDs or relationships.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2024-12-10-placegoose.mdx#2025-04-14_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nexport const ZGaggleInsertPayload = ZGaggleInsert.omit({\n  id: true\n});\n\nexport const ZHonkInsertPayload = ZHonkInsert.omit({\n  id: true\n});\n\nexport const ZHonkUpdatePayload = ZHonkInsertPayload.omit({\n  gooseId: true\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple Queue Consumers in a Single Cloudflare Worker\nDESCRIPTION: This code demonstrates how to handle messages from multiple queues within the same worker. It routes messages to different handler functions based on the queue they came from.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2025-02-17-asynchronous-tasks-in-cloudflare-part2b.mdx#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  fetch: instrument(app).fetch,\n  async queue(\n    batch: MessageBatch<NewsletterMessage | RunnerData>,\n    env: Bindings\n  ) {\n    batch.messages.forEach(async (message) => {\n      switch (batch.queue) {\n        case \"sign-up-queue\":\n          await handleSignUpMessage(message as Message<RunnerData>, env);\n          break;\n\n        case \"newsletter-queue\":\n          await handleNewsletterMessage(\n            message as Message<NewsletterMessage>,\n            env\n          );\n          break;\n      }\n    });\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Global Error Handling in Hono\nDESCRIPTION: Sets up a global error handler using Hono's onError method. The handler provides different responses for HTTPExceptions and general errors, ensuring consistent error formatting while hiding sensitive information from API consumers.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2024-12-10-placegoose.mdx#2025-04-14_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\napp.onError((error, c) => {\n  console.error(error);\n\n  // Handle formatted errors thrown by app or hono\n  if (error instanceof HTTPException) {\n    return c.json(\n      {\n        message: error.message\n      },\n      error.status\n    );\n  }\n\n  return c.json(\n    {\n      message: \"Something went wrong\"\n    },\n    500\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Database Schema with Drizzle ORM in TypeScript\nDESCRIPTION: This code defines the database schema using Drizzle ORM with two main tables: 'websites' for storing website information and 'uptimeChecks' for storing monitoring results. The schema uses SQLite tables and defines relationships between the tables.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2024-12-17-honc-uptime-monitor.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { integer, sqliteTable, text } from \"drizzle-orm/sqlite-core\";\n\nexport const websites = sqliteTable(\"websites\", {\n  id: integer(\"id\").primaryKey({ autoIncrement: true }),\n  url: text(\"url\").notNull(),\n  name: text(\"name\").notNull(),\n  checkInterval: integer(\"checkInterval\").notNull(),\n  createdAt: text(\"createdAt\").notNull()\n});\n\nexport const uptimeChecks = sqliteTable(\"uptime_checks\", {\n  id: integer(\"id\").primaryKey({ autoIncrement: true }),\n  websiteId: integer(\"websiteId\")\n    .notNull()\n    .references(() => websites.id),\n  timestamp: text(\"timestamp\").notNull(),\n  status: integer(\"status\"),\n  responseTime: integer(\"responseTime\"),\n  isUp: integer(\"isUp\", { mode: \"boolean\" }).notNull()\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing GitHub Webhook Middleware in Hono\nDESCRIPTION: Creates a custom middleware for Hono to handle GitHub webhook requests. This middleware verifies the webhook signature, extracts relevant information from headers, and processes the payload using Octokit Webhooks.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2024-09-19-building-a-community-database-with-github-a-guide-to-webhook-and-api-integration-with-hono-js.mdx#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport const githubWebhooksMiddleware = createMiddleware<HonoEnv, \"/ghws\">(\n  async (c, next) => {\n    const secret = c.env.GITHUB_WEBHOOK_SECRET;\n    const webhooks = getWebhooksInstance(secret);\n\n    c.set(\"webhooks\", webhooks);\n\n    await next();\n\n    const id = c.req.header(\"x-github-delivery\");\n    const signature = c.req.header(\"x-hub-signature-256\");\n    const name = c.req.header(\"x-github-event\");\n\n    const isEventName = isWebhookEventName(name);\n    if (!(id && isEventName && signature)) {\n      return c.text(\"Invalid request\", 403);\n    }\n\n    const payload = await c.req.text();\n\n    try {\n      await webhooks.verifyAndReceive({\n        id,\n        name,\n        signature,\n        payload\n      });\n      return c.text(\"Webhook received & verified\", 201);\n    } catch (error) {\n      return c.text(`Failed to verify Github Webhook request: ${error}`, 400);\n    }\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Websocket Route Implementation\nDESCRIPTION: Implements a websocket route handler that validates upgrade headers and connects to a Durable Object instance.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2024-09-02-websocket-server-in-hono-with-durable-objects.mdx#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Hono } from \"hono\";\n\nconst app = new Hono<{ Bindings: CloudflareBindings }>();\n\napp.get(\"/\", (c) => {\n  return c.text(\"Hello Hono!\");\n});\n\napp.get(\"/ws\", async (c) => {\n  if (c.req.header(\"upgrade\") !== \"websocket\") {\n    return c.text(\"Expected Upgrade: websocket\", 426);\n  }\n  const id = c.env.WEBHOOK_RECEIVER.idFromName(\"default\");\n  const stub = c.env.WEBHOOK_RECEIVER.get(id);\n\n  return stub.fetch(c.req.raw);\n});\n\nexport { WebhookReceiver } from \"./receiver\";\n\nexport default app;\n```\n\n----------------------------------------\n\nTITLE: Implementing Extended Drizzle Schema with Types\nDESCRIPTION: Advanced Drizzle schema implementation with type inference, enums, and column constraints\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2024-12-10-placegoose.mdx#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst metadata = {\n  id: integer({ mode: \"number\" }).primaryKey()\n};\n\nexport type GooseSelect = typeof geese.$inferSelect;\nexport const geese = sqliteTable(\"geese\", {\n  ...metadata,\n  gaggleId: integer({ mode: \"number\" }).references(() => gaggles.id),\n  name: text().notNull(),\n  isMigratory: integer({ mode: \"boolean\" }).notNull().default(true),\n  mood: text({\n    enum: [\"hangry\", \"waddling\", \"stoic\", \"haughty\", \"alarmed\"]\n  })\n});\n```\n\n----------------------------------------\n\nTITLE: Improved Hono Application with Middleware and OpenTelemetry\nDESCRIPTION: This improved version of the Hono application adds middleware to create the Durable Object stub once and reuse it across routes. It also integrates OpenTelemetry for performance measurement and uses Variables type to improve type safety.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2024-09-02-websocket-server-in-hono-with-durable-objects.mdx#2025-04-14_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Hono } from \"hono\";\nimport { WebhookReceiver } from \"./receiver\";\nimport { instrument, measure } from \"@fiberplane/hono-otel\";\n\n// we define another object called Variables that we can pass to the Hono app\ntype Variables = {\n  receiver: DurableObjectStub<WebhookReceiver>;\n};\n\nconst app = new Hono<{ Bindings: CloudflareBindings; Variables: Variables }>();\n\n// we create the stub connection earlier on in the process and assign\n// it to a dedicated variable\napp.use(\"*\", async (c, next) => {\n  const id = c.env.WEBHOOK_RECEIVER.idFromName(\"default\");\n  const stub = c.env.WEBHOOK_RECEIVER.get(id);\n  c.set(\"receiver\", stub);\n  await next();\n});\n\napp.get(\"/\", (c) => {\n  return c.text(\"Hello Hono!\");\n});\n\napp.get(\"/ws\", async (c) => {\n  if (c.req.header(\"upgrade\") !== \"websocket\") {\n    return c.text(\"Not a websocket request\", 426);\n  }\n\n  const stub = c.get(\"receiver\");\n  return stub.fetch(c.req.raw);\n});\n\napp.all(\"/receiver-listen/*\", async (c) => {\n  const method = c.req.method;\n  const path = c.req.path;\n  const body = await c.req.text();\n\n  const received = {\n    method,\n    path,\n    body\n  };\n\n  const stub = c.get(\"receiver\");\n\n  const measuredBroadcast = measure(\n    \"broadcast\",\n    async () => await stub.broadcast(JSON.stringify(received))\n  );\n  await measuredBroadcast();\n\n  return c.text(\"OK\");\n});\n\nexport { WebhookReceiver };\n\nexport default instrument(app);\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Drizzle Schema\nDESCRIPTION: Initial Drizzle ORM schema definition with tables for gaggles and geese including foreign key relationships\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2024-12-10-placegoose.mdx#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { integer, sqliteTable, text } from \"drizzle-orm/sqlite-core\";\n\nconst metadata = {\n  id: integer({ mode: \"number\" }).primaryKey()\n};\n\nexport const gaggles = sqliteTable(\"gaggles\", {\n  ...metadata\n});\n\nexport const geese = sqliteTable(\"geese\", {\n  ...metadata,\n  // Creating a Foreign Key\n  gaggleId: integer({ mode: \"number\" }).references(() => gaggles.id)\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Zod Validator Middleware with Error Handling\nDESCRIPTION: This snippet shows how to create a custom validation middleware that wraps @hono/zod-validator with standardized error handling. This approach ensures consistent error responses across all routes while maintaining type safety through TypeScript generics.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2025-02-04-hono-validation-middleware.mdx#2025-04-14_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { ValidationTargets } from \"hono\";\nimport { zValidator } from \"@hono/zod-validator\";\nimport { z } from \"zod\";\n\n// Your custom error formatter\nimport { formatZodError } from \"@/lib/zod-error\";\n\nexport const customZodValidator = <\n  // json, form, query, param, header, cookie\n  Target extends keyof ValidationTargets,\n  Schema extends z.ZodSchema\n>(\n  target: Target,\n  schema: Schema\n) => {\n  return zValidator(target, schema, (result, c) => {\n    // Early-return (or throw) on error\n    if (!result.success) {\n      // Error requirements will vary by use-case\n      return c.json(\n        {\n          timestamp: Date.now(),\n          message: `invalid ${target}`,\n          issues: formatZodError(result.error.issues)\n        },\n        400\n      );\n    }\n\n    // Otherwise return the validated data\n    return result.data;\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing D1 HTTP Batch Query Callback\nDESCRIPTION: Implementation of the batch query callback for Cloudflare's D1 HTTP API. It iterates through a batch of queries, executing each one using the single-query function.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2025-03-24-placegoose-to-prod.mdx#2025-04-14_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst httpBatchQueryD1: AsyncBatchRemoteCallback = async (\n  queries: {\n    sql: string;\n    params: unknown[];\n    method: string;\n  }[]\n): Promise<{ rows: unknown[][] }> => {\n  const results = [];\n\n  for (const query of queries) {\n    const { sql, params, method } = query;\n    const result = await httpQueryD1(sql, params, method);\n    results.push(result);\n  }\n\n  return results;\n};\n```\n\n----------------------------------------\n\nTITLE: Monitoring HTTP Requests with measure\nDESCRIPTION: Demonstrates how to use the measure decorator to monitor HTTP requests in an async function.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/python/fpxpy/README.md#2025-04-14_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n@measure(\n    name=\"http-request\",\n    span_kind=SpanKind.CLIENT,\n    attributes={\"http.method\": \"GET\"}\n)\nasync def fetch_data(url: str):\n    # ... http request code\n    pass\n```\n\n----------------------------------------\n\nTITLE: Parsing Query Parameters in a Hono Search Endpoint\nDESCRIPTION: Sets up a GET route with Hono that extracts the search query and similarity threshold from query parameters. The similarity cutoff determines the minimum relevance score for returned results, defaulting to 0.5 if not specified.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2024-11-13-retrieval-augmented-geese.mdx#2025-04-14_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\napp.get(\"/search\", async (c) => {\n  // ...\n\n  // Parse query parameters\n  const query = c.req.query(\"query\");\n  const similarityCutoff =\n    Number.parseFloat(c.req.query(\"similarity\") || \"0.5\") ?? 0.5;\n\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Zod Validator in Hono\nDESCRIPTION: This snippet demonstrates how to create a custom Zod validator using Hono's validator function. It shows how to decouple the validation logic from Zod and handle validation errors.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2025-02-04-hono-validation-middleware.mdx#2025-04-14_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { validator } from \"hono/validator\";\n\nexport const customZodValidator = <\n  Target extends keyof ValidationTargets,\n  Schema extends z.ZodSchema\n>(\n  target: Target,\n  schema: Schema\n) => {\n  return validator(target, async (value): Promise<z.output<Schema>> => {\n    // We have to run validation ourselves\n    const result = await schema.safeParseAsync(value);\n\n    if (!result.success) {\n      return c.json(\n        {\n          timestamp: Date.now(),\n          message: `invalid ${target}`,\n          issues: formatZodError(result.error.issues)\n        },\n        400\n      );\n    }\n\n    return result.data;\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Creating GitHub API Middleware in Hono\nDESCRIPTION: Implementation of a custom Hono middleware that handles GitHub API authentication and user data retrieval. It creates an authenticated Octokit instance using a GitHub Access Token and defines a function to fetch user details by ID.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2024-09-19-building-a-community-database-with-github-a-guide-to-webhook-and-api-integration-with-hono-js.mdx#2025-04-14_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport const githubApiMiddleware = createMiddleware<HonoEnv, \"ghws\">(\n  async (c, next) => {\n    const githubToken = c.env.GITHUB_API_TOKEN;\n    const octokit = getOctokitInstance(githubToken);\n\n    const fetchUserById: FetchUserById = async (id) => {\n      try {\n        const { data } = await octokit.request(\"GET /user/{id}\", { id });\n        return data;\n      } catch (error) {\n        throw new Error(`Github API: error fetching user by id: ${error}`);\n      }\n    };\n\n    c.set(\"fetchUserById\", fetchUserById);\n\n    await next();\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Tracking Database Queries with measure\nDESCRIPTION: Example of using the measure decorator to track database queries in an async function.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/python/fpxpy/README.md#2025-04-14_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n@measure(\n    name=\"db-query\",\n    span_kind=SpanKind.CLIENT,\n    attributes={\"db.system\": \"postgresql\"}\n)\nasync def get_user(user_id: str):\n    # ... database code\n    pass\n```\n\n----------------------------------------\n\nTITLE: Creating a Zod Schema Validator Factory for Request Bodies\nDESCRIPTION: Implements a factory function that creates type-safe validators for request bodies using Zod schemas. The function handles validation errors by throwing an HTTPException with a standardized error message and status code.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2024-12-10-placegoose.mdx#2025-04-14_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * @returns Validation fn for Hono body validator, responsible\n * for processing payload errors\n */\nexport function makeBodyValidator<T extends Zod.AnyZodObject>(schema: T) {\n  // _output is a utility key on Zod schema types\n  // that gives us the type of valid output\n  return (body: unknown): T[\"_output\"] => {\n    const result = schema.safeParse(body);\n\n    if (result.success) {\n      // Return value must be consistent with shape of \"body\"\n      // Available through Context.req.valid\n      return result.data;\n    }\n\n    throw new HTTPException(400, {\n      message: \"Invalid Payload\",\n      cause: result.error\n    });\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Generating OpenAPI Specs from Existing Hono Application\nDESCRIPTION: Uses Fiberplane's createOpenAPISpec helper function to automatically generate an OpenAPI specification from an existing Hono application without requiring schema changes.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/docs/docs/get-started.mdx#2025-04-14_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createOpenAPISpec } from \"@fiberplane/hono\";\n\napp.get(\"/openapi.json\", (c) => {\n  const spec = createOpenAPISpec(app, {\n    info: { title: \"My API\", version: \"1.0.0\" }\n  });\n  return c.json(spec);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating an OpenAPI Spec with Hono in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the createOpenAPISpec function from the @fiberplane/hono package to automatically generate an OpenAPI 3.0 specification for a Hono application. The function analyzes the app's routes and exposes the spec through a GET endpoint at /openapi.json.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2025-02-20-openapi-honc-stack.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createOpenAPISpec } from \"@fiberplane/hono\";\n\n// ...\n\napp.get(\"/openapi.json\", (c) => {\n  const spec = createOpenAPISpec(app, {\n    info: { title: \"Users API\", version: \"1.0.0\" }\n  });\n  return c.json(spec);\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a POST Route with Zod OpenAPI in Hono\nDESCRIPTION: Creates a route definition for a POST endpoint that creates a new user. It specifies the HTTP method, path, request body validation schema, and expected response with status code.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/docs/docs/get-started.mdx#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst createUser = createRoute({\n  method: \"post\",\n  path: \"/api/user\",\n  request: {\n    // Validate request body using Zod schemas\n    body: {\n      // NOTE: this is important to set to true, otherwise the route will accept empty bodies and invalid content types\n      required: true,\n      content: {\n        \"application/json\": {\n          schema: CreateUserSchema\n        }\n      }\n    }\n  },\n  responses: {\n    201: {\n      content: {\n        \"application/json\": {\n          schema: UserResponseSchema\n        }\n      },\n      description: \"User created successfully\"\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Tracking Function Performance with measure\nDESCRIPTION: Shows how to use the measure decorator to track performance of a computationally expensive function.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/python/fpxpy/README.md#2025-04-14_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n@measure(\n    name=\"expensive-calculation\",\n    attributes={\"calculation.type\": \"matrix-multiply\"}\n)\ndef matrix_multiply(a: np.ndarray, b: np.ndarray):\n    # ... calculation code\n    pass\n```\n\n----------------------------------------\n\nTITLE: Fire-and-Forget Pattern in Cloudflare Worker\nDESCRIPTION: Shows how to implement a fire-and-forget pattern where the email sending task is not awaited. While this improves response time, it risks the email not being sent due to worker termination.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2024-11-02-asynchronous-tasks-in-cloudflare-part1.mdx#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\napp.post(\"/api/marathon-fire-and-forget\", async (c) => {\n  const { firstName, lastName, email, address, distance } = await c.req.json();\n\n  await insertData(\n    firstName,\n    lastName,\n    email,\n    address,\n    distance,\n    c.env.DATABASE_URL\n  );\n\n  sendMail(email, c.env.RESEND_API, firstName).catch(console.error);\n\n  return c.text(\"Thanks for registering for our Marathon\", 201);\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Fiberplane Middleware to Hono Application\nDESCRIPTION: Mounts the Fiberplane middleware to provide an interactive playground UI for the API. This middleware uses the OpenAPI specification to render documentation and enable test requests.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/docs/docs/get-started.mdx#2025-04-14_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createFiberplane } from \"@fiberplane/hono\";\n\napp.use(\n  \"/fp/*\",\n  createFiberplane({\n    openapi: {\n      url: \"/openapi.json\"\n    }\n  })\n);\n```\n\n----------------------------------------\n\nTITLE: Generating Vector Embeddings with OpenAI\nDESCRIPTION: Creates an embedding for the user's search query using OpenAI's text-embedding-3-small model. The embedding is a numerical representation of the query's semantic meaning, which will be used to find similar content through vector similarity.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2024-11-13-retrieval-augmented-geese.mdx#2025-04-14_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\napp.get(\"/search\", async (c) => {\n  // ...\n\n  // Initialize the OpenAI client\n  const openai = new OpenAI({ apiKey: c.env.OPENAI_API_KEY });\n\n  // Create embedding for the search query\n  const embeddingResult = await openai.embeddings.create({\n    model: \"text-embedding-3-small\",\n    input: query\n  });\n  const userQueryEmbedding = embeddingResult.data[0].embedding;\n\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Advanced Usage of measure Decorator\nDESCRIPTION: Shows advanced usage of the measure decorator with custom span configuration and callbacks.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/python/fpxpy/README.md#2025-04-14_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n@measure(\n    name=\"db-query\",\n    span_kind=SpanKind.CLIENT,\n    attributes={\"db.system\": \"postgresql\"}\n)\nasync def query_database():\n    # ... database code\n    pass\n\ndef on_start_cb(span, *args, **kwargs):\n    span.set_attribute(\"custom.start\", \"started\")\n\n@measure(\n    name=\"monitored-function\",\n    on_start=on_start_cb,\n    on_success=lambda span, result: span.set_attribute(\"result.value\", str(result)),\n    on_error=lambda span, exc: span.set_attribute(\"error.message\", str(exc))\n)\ndef monitored_function():\n    pass\n```\n\n----------------------------------------\n\nTITLE: Optimizing Worker Communication with waitUntil() for Parallel Execution\nDESCRIPTION: This code implements a POST endpoint that uses waitUntil() to parallelize operations. It invokes the email worker asynchronously while continuing with database operations, improving response time by not waiting for the email operation to complete.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2024-12-03-cf-service-bindings.mdx#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\napp.post(\"/api/marathon-wait-until\", async (c) => {\n  const { firstName, lastName, email, address, distance } = await c.req.json();\n\n  //using waitUntil() and invoke email worker via rpc\n  c.executionCtx.waitUntil(c.env.WORKER_EMAIL.send(email, firstName));\n\n  await insertData(\n    firstName,\n    lastName,\n    email,\n    address,\n    distance,\n    c.env.DATABASE_URL\n  );\n\n  return c.text(\"Thanks for registering for our Marathon\", 200);\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Monitor Class as Durable Object in TypeScript\nDESCRIPTION: This code implements the Monitor class as a Cloudflare Durable Object, responsible for scheduling and performing uptime checks for websites. It maintains state across executions, sets up interval timers based on website configurations, and stores check results in the database.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2024-12-17-honc-uptime-monitor.mdx#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport class Monitor {\n  private checkTimer: ReturnType<typeof setInterval> | null = null;\n\n  async scheduleChecks(websiteId: number) {\n    const db = drizzle(this.env.DB);\n    const website = await db\n      .select()\n      .from(schema.websites)\n      .where(eq(schema.websites.id, websiteId))\n      .get();\n\n    this.checkTimer = setInterval(async () => {\n      await this.performCheck(website);\n    }, website.checkInterval * 1000);\n  }\n\n  async performCheck(website) {\n    const startTime = Date.now();\n    let isUp = false;\n    let responseTime = 0;\n    let status = 0;\n\n    try {\n      const response = await fetch(website.url, {\n        method: \"GET\",\n        redirect: \"follow\",\n        cf: {\n          cacheTTL: 0,\n          cacheEverything: false\n        }\n      });\n\n      responseTime = Date.now() - startTime;\n      status = response.status;\n      isUp = response.status >= 200 && response.status < 400;\n    } catch (error) {\n      responseTime = Date.now() - startTime;\n      isUp = false;\n    }\n\n    // Store results in D1\n    await db.insert(schema.uptimeChecks).values({\n      websiteId: website.id,\n      timestamp: new Date().toISOString(),\n      status,\n      responseTime,\n      isUp\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing OpenAPI Hono Application\nDESCRIPTION: Creates a new Hono application instance with OpenAPI support using the OpenAPIHono class.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2024-12-05-openapi-support.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { OpenAPIHono } from \"@hono/zod-openapi\";\nconst app = new OpenAPIHono<{ Bindings: Bindings }>();\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite for Client and Server Builds\nDESCRIPTION: Vite configuration that sets up separate build processes for client-side and server-side code, with specific output settings for Cloudflare Workers deployment.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2024-12-06-client-side-guide.mdx#2025-04-14_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nimport build from \"@hono/vite-build/cloudflare-workers\";\nimport devServer from \"@hono/vite-dev-server\";\nimport cloudflareAdapter from \"@hono/vite-dev-server/cloudflare\";\nimport { defineConfig } from \"vite\";\n\nexport default defineConfig(({ mode }) => {\n  if (mode === \"client\") {\n    return {\n      build: {\n        rollupOptions: {\n          input: \"./src/client/index.tsx\",\n          output: {\n            entryFileNames: \"assets/[name].js\"\n          }\n        },\n        outDir: \"./public\"\n      }\n    };\n  }\n\n  const entry = \"./src/index.tsx\";\n  return {\n    server: { port: 8787 },\n    plugins: [\n      devServer({ adapter: cloudflareAdapter, entry }),\n      build({ entry })\n    ]\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Custom Middleware Implementation with createMiddleware in Hono\nDESCRIPTION: This snippet demonstrates how to create a custom middleware using Hono's createMiddleware helper. It shows how to manually handle validation and set custom data in the Context.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2025-02-04-hono-validation-middleware.mdx#2025-04-14_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createMiddleware } from \"hono/factory\";\n\nconst overEngineeredAgnosticValidator = <\n  Target extends keyof ValidationTargets,\n  T extends Record<string, unknown>\n>(\n  target: Target,\n  validate: ValidationFunction<T>\n) => {\n  return createMiddleware<{\n    Variables: {\n      validated: Record<Target, T>;\n    };\n  }>(async (c, next) => {\n    const value = await getTargetData(c, target);\n\n    const result = validate(value);\n\n    if (!result.success) {\n      return c.json(\n        {\n          timestamp: Date.now(),\n          message: \"Invalid Payload\",\n          issues: formatError(result.error)\n        },\n        400\n      );\n    }\n\n    const validated = {\n      ...c.var.validated,\n      [target]: result.data\n    };\n\n    c.set(\"validated\", validated);\n\n    await next();\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing WebhookReceiver Durable Object with Websocket Hibernation\nDESCRIPTION: This code defines a WebhookReceiver class that extends DurableObject to manage websocket connections. It handles connecting clients, closing connections, and implements the Websocket Hibernation API to preserve memory when inactive.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2024-09-02-websocket-server-in-hono-with-durable-objects.mdx#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// src/receiver.ts\nimport { DurableObject } from \"cloudflare:workers\";\n\nexport class WebhookReceiver extends DurableObject<CloudflareBindings> {\n  connections: Set<WebSocket>;\n\n  constructor(ctx: DurableObjectState, env: CloudflareBindings) {\n    super(ctx, env);\n    this.connections = new Set<WebSocket>();\n  }\n\n  async fetch(req: Request) {\n    const websocketPair = new WebSocketPair();\n    const [client, server] = Object.values(websocketPair);\n\n    this.ctx.acceptWebSocket(server);\n    this.connections.add(client);\n\n    return new Response(null, {\n      status: 101,\n      webSocket: client\n    });\n  }\n\n  webSocketError(ws: WebSocket, error: unknown) {\n    console.error(\"webSocketError\", error);\n    this.connections.delete(ws);\n  }\n\n  webSocketClose(\n    ws: WebSocket,\n    _code: number,\n    _reason: string,\n    _wasClean: boolean\n  ) {\n    console.log(\"webSocketClose, connections\", this.connections);\n    this.connections.delete(ws);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Cloudflare R2 and AI bindings in wrangler.toml\nDESCRIPTION: Configuration setup in wrangler.toml to enable Cloudflare R2 for object storage and Cloudflare AI for image generation. This defines the bucket name and necessary bindings.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2024-11-14-building-honcanator.mdx#2025-04-14_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\nname = \"honc-neon-template\"\ncompatibility_date = \"2024-10-28\"\ncompatibility_flags = [ \"nodejs_compat\" ]\n\n[observability]\nenabled = true\n\n[[r2_buckets]]\nbinding = \"R2_BUCKET\"\nbucket_name = \"geese\"\n\n[ai]\nbinding = \"AI\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Message Retry with Delay in TypeScript\nDESCRIPTION: This snippet demonstrates how to implement a retry mechanism with a delay for individual messages. This allows for task-specific retry strategies, such as handling rate limiting from external APIs.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2025-01-17-asynchronous-tasks-in-cloudflare-part2.mdx#2025-04-14_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nmsg.retry({ delaySeconds: 1000 });\n```\n\n----------------------------------------\n\nTITLE: Performing Cosine Similarity Search with Drizzle ORM\nDESCRIPTION: Executes a database query that calculates the cosine similarity between the user's query embedding and stored chunk embeddings. It filters results by the similarity cutoff, orders by highest similarity first, and limits to the top 10 matches. Uses Drizzle's SQL helper for type-safe query construction.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2024-11-13-retrieval-augmented-geese.mdx#2025-04-14_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\napp.get(\"/search\", async (c) => {\n  // ...\n\n  // Craft a similarity search query based on the cosine distance between\n  // the embedding of the user's query, and the embedding of each chunk from the docs.\n  const similarityQuery = drizzleSql<number>`1 - (${cosineDistance(chunks.embedding, queryEmbedding)})`;\n\n  // Search for chunks with similarity above the cutoff score\n  const results = await db\n    .select({\n      id: chunks.id,\n      text: chunks.text,\n      similarity: similarityQuery\n    })\n    .from(chunks)\n    .where(drizzleSql`${similarityQuery} > ${similarityCutoff}`)\n    .orderBy(drizzleSql`${similarityQuery} desc`)\n    .limit(10);\n\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing D1 HTTP Query Callback\nDESCRIPTION: Implementation of the single-query callback for Cloudflare's D1 HTTP API. It handles request formatting, error handling, and response parsing to match Drizzle's expected format.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2025-03-24-placegoose-to-prod.mdx#2025-04-14_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { AsyncRemoteCallback } from \"drizzle-orm/sqlite-proxy\";\n\ntype D1HttpQueryResponse = {\n  errors?: { code: number; message: string }[];\n  messages?: { code: number; message: string }[];\n  result?: { results: unknown[]; success: boolean }[];\n  success?: boolean;\n};\n\nconst httpQueryD1: AsyncRemoteCallback = (\n  sql: string,\n  params: unknown[],\n  method: string\n): Promise<{ rows: unknown[][] }> => {\n  const url = `https://api.cloudflare.com/client/v4/accounts/${accountId}/d1/database/${databaseId}/query`;\n\n  const response = await fetch(url, {\n    method: \"POST\",\n    headers: {\n      Authorization: `Bearer ${apiToken}`,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({ sql, params, method })\n  });\n\n  if (response.status !== 200) {\n    /** HTTP request failed */\n  }\n\n  // Based on the Cloudflare docs\n  // In practice, the type should be validated at runtime\n  const dbResponse: D1HttpQueryResponse = await res.json();\n  if (dbResponse.errors.length > 0 || !dbResponse.success) {\n    /** Query failed */\n  }\n\n  const queryResult = dbResponse?.result?.at(0);\n  if (!queryResult?.success) {\n    /** Query failed */\n  }\n\n  // Format row data\n  const rows = queryResult.results.map((row) => {\n    if (row instanceof Object) {\n      return Object.values(row);\n    }\n\n    throw new Error(\"Unexpected Response\", {\n      cause: dbResponse\n    });\n  });\n\n  return { rows };\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Websocket and Webhook Routes with Hono\nDESCRIPTION: This code snippet shows how to set up a Hono application with routes for websocket connections (/ws) and webhook listening (/receiver-listen/*). It demonstrates creating a Durable Object stub and passing requests to the WebhookReceiver.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2024-09-02-websocket-server-in-hono-with-durable-objects.mdx#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Hono } from \"hono\";\n\nconst app = new Hono<{ Bindings: CloudflareBindings }>();\n\napp.get(\"/\", (c) => {\n  return c.text(\"Hello Hono!\");\n});\n\napp.get(\"/ws\", async (c) => {\n  if (c.req.header(\"upgrade\") !== \"websocket\") {\n    return c.text(\"Expected Upgrade: websocket\", 426);\n  }\n\n  const id = c.env.WEBHOOK_RECEIVER.idFromName(\"default\");\n  const stub = c.env.WEBHOOK_RECEIVER.get(id);\n\n  return stub.fetch(c.req.raw);\n});\n\napp.all(\"/receiver-listen/*\", async (c) => {\n  const method = c.req.method;\n  const path = c.req.path;\n  const body = await c.req.text();\n\n  const received = {\n    method,\n    path,\n    body\n  };\n\n  const id = c.env.WEBHOOK_RECEIVER.idFromName(\"default\");\n  const stub = c.env.WEBHOOK_RECEIVER.get(id);\n\n  await stub.broadcast(JSON.stringify(received));\n\n  return c.text(\"OK\");\n});\n\nexport { WebhookReceiver } from \"./receiver\";\n\nexport default app;\n```\n\n----------------------------------------\n\nTITLE: Initializing Hono Application with API Route\nDESCRIPTION: Sets up a Hono application with an API route. This snippet demonstrates how to create a basic structure for a Hono.js application and define an API route.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2024-09-19-building-a-community-database-with-github-a-guide-to-webhook-and-api-integration-with-hono-js.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Hono } from \"hono\";\nimport api from \"./api\";\n\nconst app = new Hono<HonoEnv>();\n\napp.route(\"/api\", api);\n\nexport default instrument(app);\n```\n\n----------------------------------------\n\nTITLE: Defining Zod Schema for API Request\nDESCRIPTION: Creates a Zod schema that defines the structure and validation rules for a new user request, including OpenAPI metadata like examples and descriptions.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2024-12-05-openapi-support.mdx#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { z } from \"@hono/zod-openapi\";\n\n// Schema that defines the body of a request to create a new user\nconst NewUserSchema = z\n  .object({\n    name: z.string().openapi({\n      example: \"John Doe\",\n      description: \"The name of the user\"\n    }),\n    age: z.number().openapi({\n      example: 42,\n      description: \"The user's age\"\n    })\n  })\n  .openapi(\"NewUser\");\n```\n\n----------------------------------------\n\nTITLE: Implementing Queue Handler in Cloudflare Worker\nDESCRIPTION: This code exports the Worker configuration with both an HTTP fetch handler and a queue handler for processing messages asynchronously. It processes sign-up messages from the queue.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2025-02-17-asynchronous-tasks-in-cloudflare-part2b.mdx#2025-04-14_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nexport default {\n  fetch: instrument(app).fetch,\n  async queue(batch: MessageBatch<any>, env: Bindings): Promise<void> {\n    await handleSignUpMessage(message as Message<RunnerData>, env);\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing Drizzle with HTTP Driver\nDESCRIPTION: Basic structure for initializing Drizzle with the HTTP driver. This code shows the callbacks required for handling single queries and batches of requests when connecting to a remote database.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2025-03-24-placegoose-to-prod.mdx#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { drizzle } from \"drizzle-orm/sqlite-proxy\";\n\n// Drizzle driver instance that we can use\n// interchangeably with the d1 or libsql drivers\nconst db = drizzle(\n  /**\n   * AsyncBatchRemoteCallback\n   */\n  async (\n    sql: string,\n    params: any[],\n    method: \"run\" | \"all\" | \"values\" | \"get\"\n  ): Promise<{ rows: any[] }> => {\n    // Execute a single query over HTTP\n  },\n  /**\n   * AsyncBatchRemoteCallback\n   */\n  async (\n    batch: {\n      sql: string;\n      params: any[];\n      method: \"run\" | \"all\" | \"values\" | \"get\";\n    }[]\n  ): Promise<{ rows: any[] }> => {\n    // Iteratively execute an array of queries over HTTP\n  },\n  /**\n   * Standard Drizzle config, instructs driver to\n   * translate between snake and camel case column names\n   */\n  { casing: \"snake_case\" }\n);\n```\n\n----------------------------------------\n\nTITLE: Combining Modular Routes in Hono.js Main Application\nDESCRIPTION: The updated main application file that imports and combines all the modular route files using Hono's route() method. This demonstrates how to assemble a modular API.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2024-12-04-route-file-tree-view.mdx#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// index.ts\nimport { Hono } from \"hono\";\nimport marathons from \"./marathons\";\nimport athletes from \"./athletes\";\nimport tracks from \"./tracks\";\n\nconst app = new Hono();\n\n// Combine all routes\napp.route(\"/marathons\", marathons);\napp.route(\"/athletes\", athletes);\napp.route(\"/tracks\", tracks);\n\nexport default app;\n```\n\n----------------------------------------\n\nTITLE: Exposing OpenAPI Specs with hono-openapi\nDESCRIPTION: Sets up an endpoint to serve the OpenAPI specification using hono-openapi's openAPISpecs function. This makes the API documentation accessible at the specified route.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/docs/docs/get-started.mdx#2025-04-14_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { openAPISpecs } from \"hono-openapi\";\napp.get(\n  \"/openapi\",\n  openAPISpecs(app, {\n    documentation: {\n      info: {\n        title: \"Hono\",\n        version: \"1.0.0\",\n        description: \"API for users\"\n      }\n    },\n    servers: [\n      {\n        url: \"http://localhost:8787\",\n        description: \"Local server\"\n      }\n    ]\n  })\n);\n```\n\n----------------------------------------\n\nTITLE: Inferred Request and Response Types in Hono TypeScript\nDESCRIPTION: This code snippet demonstrates the structure of inferred request and response types for a Hono endpoint. It shows how input query parameters, output data, and different response statuses are typed for a '/posts' GET request.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2025-02-04-hono-validation-middleware.mdx#2025-04-14_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n{\n\t\"/posts\": {\n\t\t$get: {\n\t\t\t// Success response\n\t\t\t// Request data validated with `hono/validator`\n\t\t\tinput: {\n\t\t\t\tquery: {\n\t\t\t\t\tsearch: string;\n\t\t\t\t};\n\t\t\t};\n\t\t\t// Data returned from handler\n\t\t\toutput: { data: Data[]; };\n\t\t\toutputFormat: \"json\";\n\t\t\tstatus: 200;\n\t\t} | {\n\t\t\t// Error response\n\t\t\tinput: {\n\t\t\t\tquery: {\n\t\t\t\t\tsearch: string;\n\t\t\t\t};\n\t\t\t};\n\t\t\toutput: { message: string; };\n\t\t\toutputFormat: \"json\";\n\t\t\tstatus: 400;\n\t\t}\n\t};\n}\n```\n\n----------------------------------------\n\nTITLE: Initialize Basic Hono Application\nDESCRIPTION: Sets up a basic Hono application with TypeScript support and Cloudflare bindings.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2024-09-02-websocket-server-in-hono-with-durable-objects.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Hono } from \"hono\";\n\nconst app = new Hono<{ Bindings: CloudflareBindings }>();\n\napp.get(\"/\", (c) => c.text(\"Hello Cloudflare Workers!\"));\n\nexport default app;\n```\n\n----------------------------------------\n\nTITLE: Using GitHub API Middleware in Webhook Handlers\nDESCRIPTION: Example of how to use the GitHub API middleware to retrieve user information after receiving a webhook event. The code shows how to access the fetchUserById function from the middleware context and use it within webhook event handlers.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2024-09-19-building-a-community-database-with-github-a-guide-to-webhook-and-api-integration-with-hono-js.mdx#2025-04-14_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst webhooks = c.var.webhooks;\n  const fetchUserById = c.var.fetchUserById;\n\n  webhooks.on(\n    [\"issues.opened\", \"star.created\", \"watch.started\"],\n    async ({ payload, name }) => {\n      const userId = payload.sender.id;\n      const user = await fetchUserById(userId);\n```\n\n----------------------------------------\n\nTITLE: Simple Error Handler for Hono Application in TypeScript\nDESCRIPTION: Implements a basic error handler for a Hono application to prevent crashes during development. It logs errors to the console and returns a generic error message to the client.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2024-12-10-placegoose.mdx#2025-04-14_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\napp.onError((error, c) => {\n  console.error(error);\n  return c.text(\"Something went wrong!\", 500);\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing OpenAPI Route Handler\nDESCRIPTION: Registers the OpenAPI route definition with the Hono application.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2024-12-05-openapi-support.mdx#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\napp.openapi(createUserRoute, async (c) => {\n  //your business logic\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Chunked Insert Statements for Drizzle Batch\nDESCRIPTION: Utility function to create chunked insert statements for Drizzle's batch API. This handles the specific typing requirements of the batch method while chunking data to respect Cloudflare's variable limits.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2025-03-24-placegoose-to-prod.mdx#2025-04-14_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst chunkInserts = <T extends SQLiteTable>(\n  table: T,\n  data: T[\"$inferInsert\"][],\n  batchSize: number\n) => {\n  const dataChunks = chunkArray(data, batchSize);\n\n  // Initialize the array with the first insert to\n  // satisfy the tuple type requirement\n  const chunkedInserts: [BatchItem<\"sqlite\">, ...BatchItem<\"sqlite\">[]] = [\n    db.insert(table).values(dataChunks[0])\n  ];\n\n  // Loop starts at 1 as we've already added 0\n  for (let i = 1; i < dataChunks.length; i++) {\n    const batchItem = db.insert(table).values(dataChunks[i]);\n    chunkedInserts.push(batchItem);\n  }\n\n  return chunkedInserts;\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Counter Component in Hono\nDESCRIPTION: A simple counter component using Hono's JSX implementation with useState hook that increments a count when a button is clicked.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2024-12-06-client-side-guide.mdx#2025-04-14_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useState } from \"hono/jsx\";\n\nexport function Counter() {\n  const [count, setCount] = useState(0);\n\n  return (\n    <div>\n      <button onClick={() => setCount((c) => c + 1)} type=\"button\">\n        Increase count\n      </button>\n      <span>Count: {count}</span>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Generating AI images with Cloudflare AI Flux model\nDESCRIPTION: TypeScript code that uses Cloudflare AI to generate a goose image. This code selects the Flux-1-Schnell model and provides a prompt that describes the desired goose image in comic or anime style.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2024-11-14-building-honcanator.mdx#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst model = \"@cf/black-forest-labs/flux-1-schnell\" as BaseAiTextToImageModels;\nconst prompt = `Please generate a image of a goose. Its name is ${name}. Make it in the style of comic or anime please`;\n\nconst response = await c.env.AI.run(model, {\n  prompt\n});\n```\n\n----------------------------------------\n\nTITLE: Adding the Observed Decorator to Agent Classes in TypeScript\nDESCRIPTION: This code demonstrates how to add the @Observed() decorator to an agent class. This decorator enables the Fiberplane Playground to monitor and debug the agent by capturing its state and interactions.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2025-04-07-agents-sdk-playground.mdx#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Observed } from \"@fiberplane/agents\";\n\n@Observed()\nclass ChatClient extends AIChatAgent<Env, MemoryState> {\n  // Your agent implementation\n}\n```\n\n----------------------------------------\n\nTITLE: Sequential Execution in Cloudflare Worker\nDESCRIPTION: Implements a POST endpoint that sequentially inserts data and sends an email using a bound worker.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2025-01-17-asynchronous-tasks-in-cloudflare-part2.mdx#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\napp.post(\"/api/marathon-sequential\", async (c) => {\n  const { firstName, lastName, email, address, distance } = await c.req.json();\n\n  await insertData(\n    firstName,\n    lastName,\n    email,\n    address,\n    distance,\n    c.env.DATABASE_URL\n  );\n\n  // using rpc\n  await c.env.WORKER_EMAIL.send(email, firstName);\n\n  return c.text(\"Thanks for registering for our Marathon\", 200);\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Text Replacement Operation in Rust for Operational Transformation\nDESCRIPTION: Example of a ReplaceTextOperation in Rust that demonstrates how text insertion works in OT. This operation inserts the text \"two \" at offset 4 in a string, showing how the offset, old_text, and new_text fields are used.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2024-02-26-a-deep-dive-into-fiberplane's-operational-transformation.mdx#2025-04-14_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nReplaceTextOperation {\n    offset: 4,\n    old_text: \"\",\n    new_text: \"two \"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Redux Reducer Bridge in Rust\nDESCRIPTION: This code demonstrates how to expose Rust reducers to TypeScript while maintaining state in Rust. It uses a global mutable state variable and a bridge function that handles state updates and side effects.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2022-04-06-writting-redux-reducers-in-rust.mdx#2025-04-14_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nstatic mut STATE: Lazy<RefCell<State>> = Lazy::new(|| RefCell::new(State::default()));\n\n#[fp_export_impl(protocol_bindings)]\nfn reducer_bridge(action: Action) -> ReducerResult {\n    // This is safe as long as we only call this from a single-threaded WASM context:\n    unsafe {\n        let old_state = STATE.get_mut();\n        let (new_state, side_effects) = reducer(old_state, action);\n\n        let state_update = StateUpdate::from_states(old_state, &new_state);\n\n        STATE.replace(new_state);\n\n        ReducerResult {\n            state_update,\n            side_effects,\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Worker Interface for Type Safety\nDESCRIPTION: Creates a TypeScript interface for the email worker to ensure type safety when binding services.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2025-01-17-asynchronous-tasks-in-cloudflare-part2.mdx#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface WorkerEmail {\n  fetch(request: Request): Promise<Response>;\n  send(email: string, firstName: string): Promise<Response>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Types for GitHub Webhook Events\nDESCRIPTION: Creates custom types and a type guard function for GitHub webhook event names. This ensures type safety when handling webhook events in the application.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2024-09-19-building-a-community-database-with-github-a-guide-to-webhook-and-api-integration-with-hono-js.mdx#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport type WebhookEventName = Parameters<\n  InstanceType<typeof Webhooks>[\"verifyAndReceive\"]\n>[number][\"name\"];\n\nexport function isWebhookEventName(\n  header: string | undefined\n): header is WebhookEventName {\n  return !!header;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Service Bindings in TOML\nDESCRIPTION: Sets up a service binding in the wrangler.toml file to connect the sign-up worker with the email worker.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2025-01-17-asynchronous-tasks-in-cloudflare-part2.mdx#2025-04-14_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\nservices = [\n  { binding = \"WORKER_EMAIL\", service = \"worker-email\" }\n]\n```\n\n----------------------------------------\n\nTITLE: Using Hono RPC Client for Type-Safe API Requests\nDESCRIPTION: This snippet demonstrates how to use Hono's RPC client to make type-safe API requests. It shows how to create a client instance and use it to make a request with proper typing.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2025-02-04-hono-validation-middleware.mdx#2025-04-14_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport { hc } from \"hono/client\";\n\nimport type { AppType } from \"@/server\";\n\nconst client = hc<AppType>(\"BASE_URL\");\n\nexport const getPosts = async (search: string) => {\n  return await client.posts.$get({\n    query: { search }\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Redux Reducer in TypeScript with Rust Integration\nDESCRIPTION: This TypeScript code shows how to implement a Redux reducer that calls its Rust counterpart. It uses the reducer bridge to get state updates and side effects, then applies them to the Redux state.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2022-04-06-writting-redux-reducers-in-rust.mdx#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport default function reducer(\n  state = initialState,\n  action: Action\n): StateWithSideEffects<State> {\n  const result = reducerBridge(action); // This calls the Rust reducer.\n  state = stateUpdateReducer(state, result.stateUpdate);\n\n  const { sideEffects } = result;\n  return { state, sideEffects };\n}\n```\n\n----------------------------------------\n\nTITLE: Extending WorkerEntryPoint in TypeScript\nDESCRIPTION: Defines the WorkerEmail class that extends WorkerEntrypoint, necessary for creating a bindable worker.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2025-01-17-asynchronous-tasks-in-cloudflare-part2.mdx#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport class WorkerEmail extends WorkerEntrypoint {\n  // Implement worker functions here\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Webhook Event Listeners\nDESCRIPTION: Sets up event listeners for specific GitHub webhook events using Octokit. This snippet demonstrates how to listen for 'issues.opened', 'star.created', and 'watch.started' events.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2024-09-19-building-a-community-database-with-github-a-guide-to-webhook-and-api-integration-with-hono-js.mdx#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nwebhooks.on(\n    [\"issues.opened\", \"star.created\", \"watch.started\"],\n    async ({ payload, name }) => {\n\n```\n\n----------------------------------------\n\nTITLE: Storing generated images in Cloudflare R2 storage\nDESCRIPTION: TypeScript one-liner to save the generated image buffer to Cloudflare R2 object storage. The image is stored with a filename based on the goose name with a .png extension.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2024-11-14-building-honcanator.mdx#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nawait c.env.R2_BUCKET.put(`${name}.png`, buffer);\n```\n\n----------------------------------------\n\nTITLE: Integrating Cloudflare Rate Limiter with Hono Middleware\nDESCRIPTION: Implements the cloudflareRateLimiter middleware from hono-rate-limiter package to enforce request rate limits. The middleware is configured to use Cloudflare's rate limiter binding and generates rate limit keys based on client IP addresses.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2024-12-10-placegoose.mdx#2025-04-14_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n// The Cloudflare rate limiter is distributed as a separate package\nimport { cloudflareRateLimiter } from \"@hono-rate-limiter/cloudflare\";\n\napp.use(\"*\", cors());\n\napp.use(\n  cloudflareRateLimiter<AppType>({\n    rateLimitBinding: (c) => c.env.RATE_LIMITER,\n    keyGenerator: (c) => {\n      if (c.env.ENVIRONMENT === \"production\") {\n        // IPv4 or IPv6\n        return getConnInfo(c).remote.address ?? \"\";\n      }\n\n      return \"localhost\";\n    }\n  })\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Redux Reducer Function Signature in Rust\nDESCRIPTION: This snippet shows the signature of a Redux reducer function implemented in Rust. It takes a state and an action as input, and returns a tuple containing the new state and a vector of side effect descriptors.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2022-04-06-writting-redux-reducers-in-rust.mdx#2025-04-14_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nfn reducer(state: &State, action: Action) -> (State, Vec<SideEffectDescriptor>)\n```\n\n----------------------------------------\n\nTITLE: Converting base64 AI image response to buffer\nDESCRIPTION: TypeScript code that converts the base64-encoded image returned by Cloudflare AI into a Buffer object for further processing and storage. This leverages Node.js compatibility in Cloudflare Workers.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2024-11-14-building-honcanator.mdx#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst base64image = response.image;\nconst buffer = Buffer.from(base64image, \"base64\");\n```\n\n----------------------------------------\n\nTITLE: Implementing Queue Producer in Express-like TypeScript Application\nDESCRIPTION: This code snippet shows a complete implementation of a queue producer in an Express-like TypeScript application. It handles a POST request, processes the input, sends a message to the queue, inserts data into a database, and returns a response.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2025-01-17-asynchronous-tasks-in-cloudflare-part2.mdx#2025-04-14_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\napp.post(\"/api/marathon-producer-queue\", async (c) => {\n  const { firstName, lastName, email, address, distance } = await c.req.json();\n\n  const messagePayload = {\n    firstName: firstName,\n    email: email\n  };\n\n  const messageBody = JSON.stringify(messagePayload);\n\n  //produce a message for the Queue\n  console.log(\"Sending message to queue\");\n  await c.env.REGISTRATION_QUEUE.send(messageBody);\n\n  await insertData(\n    firstName,\n    lastName,\n    email,\n    address,\n    distance,\n    c.env.DATABASE_URL\n  );\n\n  return c.text(\"Thanks for registering for our Marathon\", 200);\n});\n```\n\n----------------------------------------\n\nTITLE: Checking for existing goose in database route handler\nDESCRIPTION: TypeScript route handler code that queries the Neon database using Drizzle ORM to check if a goose with a specific name already exists. Returns a 404 error if the goose doesn't exist.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2024-11-14-building-honcanator.mdx#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\napp.get(\"/api/geese/:name\", async (c) => {\n  const { name } = c.req.param();\n\n  const sql = neon(c.env.DATABASE_URL);\n  const db = drizzle(sql);\n\n  const goose = await db.select().from(geese).where(eq(geese.name, name));\n\n  if (goose.length === 0) {\n    return c.json({ error: \"doesnt_exist\" }, 404);\n  }\n  //...\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Queue Consumer Handler in TypeScript\nDESCRIPTION: This code snippet shows how to implement a queue method in a consumer worker to handle incoming messages. It processes each message in a batch, parsing the JSON body and calling a send method.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2025-01-17-asynchronous-tasks-in-cloudflare-part2.mdx#2025-04-14_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nasync queue(batch: MessageBatch): Promise<void> {\n  for (const msg of batch.messages) {\n    console.log(\"Received\", msg.body);\n    const { email, firstName } = JSON.parse(msg.body as string);\n    await this.send(email, firstName);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Modular Athletes Routes File in Hono.js\nDESCRIPTION: A separate module for athlete-related routes that can be imported into the main application. This demonstrates how to create a dedicated file for athlete endpoints.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2024-12-04-route-file-tree-view.mdx#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// athletes.ts\nimport { Hono } from \"hono\";\n\nconst athletes = new Hono();\n\n// Athlete routes go here...\n\nexport default athletes;\n```\n\n----------------------------------------\n\nTITLE: Adding Cloudflare R2 and AI to Hono bindings in TypeScript\nDESCRIPTION: TypeScript interface definition for Hono bindings that includes Cloudflare R2_BUCKET and AI services. This provides type safety when interacting with these services in the application.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2024-11-14-building-honcanator.mdx#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype Bindings = {\n  DATABASE_URL: string;\n  R2_BUCKET: R2Bucket;\n  AI: Ai;\n};\n```\n\n----------------------------------------\n\nTITLE: Calculating Uptime Percentages with Hono and Drizzle ORM in TypeScript\nDESCRIPTION: This code implements an endpoint to calculate uptime percentages for a given website over a specified time period. It uses SQL date handling and filters checks within the time period, then calculates the percentage by dividing successful checks by total checks.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2024-12-17-honc-uptime-monitor.mdx#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\napp.get(\"/websites/:id/uptime\", async (c) => {\n  const { id } = c.req.param();\n  const days = c.req.query(\"days\") ?? 7;\n  const db = drizzle(c.env.DB);\n\n  const startDate = new Date();\n  startDate.setDate(startDate.getDate() - days);\n\n  const checks = await db\n    .select()\n    .from(schema.uptimeChecks)\n    .where(\n      and(\n        eq(schema.uptimeChecks.websiteId, id),\n        sql`${schema.uptimeChecks.timestamp} >= ${startDate.toISOString()}`\n      )\n    );\n\n  const upCount = checks.filter((check) => check.isUp).length;\n  const uptimePercentage = (upCount / checks.length) * 100;\n\n  return c.json({\n    uptimePercentage: Math.round(uptimePercentage * 100) / 100,\n    period: `${days} days`\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Invoking a Cloudflare Worker via Service Binding using RPC\nDESCRIPTION: This code snippet demonstrates how to invoke another Cloudflare Worker's function using a Service Binding with the 'send' method. The await keyword ensures the operation completes before proceeding.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2024-12-03-cf-service-bindings.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nawait c.env.WORKER_EMAIL.send(email, firstName);\n```\n\n----------------------------------------\n\nTITLE: Sequential API Endpoint Implementation in Cloudflare Worker\nDESCRIPTION: Demonstrates a basic sequential implementation of a marathon registration endpoint that inserts data into a database and sends a confirmation email. Tasks are executed one after another, which impacts response time.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2024-11-02-asynchronous-tasks-in-cloudflare-part1.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\napp.post(\"/api/marathon-sequential\", async (c) => {\n  const { firstName, lastName, email, address, distance } = await c.req.json();\n\n  await insertData(\n    firstName,\n    lastName,\n    email,\n    address,\n    distance,\n    c.env.DATABASE_URL\n  );\n  await sendMail(email, c.env.RESEND_API, firstName);\n\n  return c.text(\"Thanks for registering for our Marathon\", 200);\n});\n```\n\n----------------------------------------\n\nTITLE: Grouping Request Rate by Path in PromQL\nDESCRIPTION: A query that calculates the per-second rate of HTTP requests grouped by path over a 5-minute window. This aggregates request rates across all other labels, showing only the path dimension.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2023-07-04-why-are-prometheus-queries-hard.mdx#2025-04-14_snippet_4\n\nLANGUAGE: promql\nCODE:\n```\nsum by (path) (rate(http_requests_total[5m]))\n```\n\n----------------------------------------\n\nTITLE: Creating a Data Chunking Utility\nDESCRIPTION: Utility function to break data arrays into smaller chunks for processing. This helps work around Cloudflare D1's limit of 100 bound variables per query.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2025-03-24-placegoose-to-prod.mdx#2025-04-14_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// Break data into appropriately-sized chunks\nconst chunkArray = <T>(array: T[], size: number) => {\n  const result: T[][] = [];\n  for (let i = 0; i < array.length; i += size) {\n    result.push(array.slice(i, i + size));\n  }\n  return result;\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving images from Cloudflare R2 storage\nDESCRIPTION: TypeScript code showing how to retrieve a previously stored image from Cloudflare R2 object storage using the goose name. This would be used in a GET route to serve the image to clients.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2024-11-14-building-honcanator.mdx#2025-04-14_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst image = await c.env.R2_BUCKET.get(`${name}.png`);\n```\n\n----------------------------------------\n\nTITLE: Initial Monolithic Hono.js API Structure\nDESCRIPTION: A single file approach where all routes for a marathon API (marathons, athletes, and tracks) are defined in one index.ts file. This demonstrates the starting point before modularization.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2024-12-04-route-file-tree-view.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// index.ts\nimport { Hono } from \"hono\";\n\nconst app = new Hono();\n\n// Marathon Routes\napp.get(\"/marathons\", (c) => {}); // List all marathons\napp.get(\"/marathons/:id\", (c) => {}); // Get marathon details\napp.post(\"/marathons\", (c) => {}); // Create a marathon\napp.put(\"/marathons/:id\", (c) => {}); // Update a marathon\n\n// Athlete Routes\napp.get(\"/athletes\", (c) => {}); // List all athletes\napp.get(\"/athletes/:id\", (c) => {}); // Get athlete details\napp.post(\"/athletes\", (c) => {}); // Create an athlete\napp.put(\"/athletes/:id\", (c) => {}); // Update athlete details\n\n// Tracks Routes\napp.get(\"/tracks\", (c) => {}); // List all tracks\napp.get(\"/tracks/:id\", (c) => {}); // Get track details\napp.post(\"/tracks\", (c) => {}); // Create a track\napp.put(\"/tracks/:id\", (c) => {}); // Update a track\n\nexport default app;\n```\n\n----------------------------------------\n\nTITLE: Setting Up Hono App Types\nDESCRIPTION: TypeScript type definitions for Hono application with D1 database bindings\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2024-12-10-placegoose.mdx#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntype AppType = {\n  Bindings: {\n    // Global type from @cloudflare/workers-types\n    DB: D1Database;\n  };\n};\n\n// Any instances connecting to the DB must be typed\nconst app = new Hono<AppType>();\n```\n\n----------------------------------------\n\nTITLE: Calculating Request Rate in PromQL\nDESCRIPTION: A query that calculates the per-second rate of HTTP requests over a 5-minute window. The rate() function converts a counter's cumulative values into a per-second rate and handles counter resets.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2023-07-04-why-are-prometheus-queries-hard.mdx#2025-04-14_snippet_3\n\nLANGUAGE: promql\nCODE:\n```\nrate(http_requests_total[5m])\n```\n\n----------------------------------------\n\nTITLE: Implementing Idempotent Consumer with Message Acknowledgement in TypeScript\nDESCRIPTION: This code shows how to implement an idempotent consumer by acknowledging individual messages within a batch. This ensures that only failed messages are retried, preventing duplicate processing of successful messages.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2025-01-17-asynchronous-tasks-in-cloudflare-part2.mdx#2025-04-14_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nasync queue(batch: MessageBatch): Promise<void> {\n  for (const message of batch.messages) {\n    console.log(\"Received\", message.body);\n    const { email, firstName } = JSON.parse(message.body as string);\n    await this.send(email, firstName);\n    await message.ack();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Zod Schemas with OpenAPI Extensions\nDESCRIPTION: Creates Zod schemas for user data with OpenAPI metadata using the zod-openapi extension. This approach is used with the hono-openapi package for documenting existing Hono applications.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/docs/docs/get-started.mdx#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { z } from \"zod\";\nimport \"zod-openapi/extend\";\nconst UserResponseSchema = z\n  .object({\n    id: z.number().int().openapi({\n      description: \"The unique identifier for the user\",\n      example: 1\n    }),\n\n    name: z.string().min(1).max(255).openapi({\n      description: \"The user's full name\",\n      example: \"Matthew\"\n    }),\n\n    email: z.string().email().openapi({\n      description: \"The user's email address\",\n      example: \"matthew@cloudflare.com\"\n    })\n  })\n  .openapi({\n    ref: \"User\",\n    description: \"Schema for user response including ID\"\n  });\n\nconst CreateUserSchema = UserResponseSchema.omit({ id: true }).openapi({\n  ref: \"CreateUser\",\n  description: \"Schema for creating a new user\"\n});\n```\n\n----------------------------------------\n\nTITLE: Concurrent Task Execution with Promise.all()\nDESCRIPTION: Example of running multiple tasks concurrently using Promise.all() and executionCtx.waitUntil(). This approach allows parallel execution of tasks while keeping the worker alive.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2024-11-02-asynchronous-tasks-in-cloudflare-part1.mdx#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst tasks = [\n  sendMail(email, c.env.RESEND_API, firstName),\n  insertData(firstName, lastName, email, address, distance, c.env.DATABASE_URL)\n];\nc.executionCtx.waitUntil(Promise.all(tasks));\n```\n\n----------------------------------------\n\nTITLE: Decorating Agent Classes with @Observed\nDESCRIPTION: Example demonstrating how to add the @Observed decorator to agent classes for introspection capabilities.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/packages/agents/README.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Observed } from \"@fiberplane/agents\";\nimport { Agent } from \"agents\";\n\n@Observed()\nclass MyAgent extends Agent<MyEnv, MyState> {\n  // Your agent implementation...\n}\n```\n\n----------------------------------------\n\nTITLE: Range Vector Selection in PromQL\nDESCRIPTION: A query that selects a 5-minute range of data for the http_requests_total counter. This returns all values for each time series over the specified time window as a range vector.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2023-07-04-why-are-prometheus-queries-hard.mdx#2025-04-14_snippet_2\n\nLANGUAGE: promql\nCODE:\n```\nhttp_requests_total[5m]\n```\n\n----------------------------------------\n\nTITLE: Configuring Error Handling and Retries in TOML\nDESCRIPTION: This configuration snippet demonstrates how to set up error handling and retries for a queue consumer. It defines the maximum number of retries and specifies a dead-letter queue for failed messages.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2025-01-17-asynchronous-tasks-in-cloudflare-part2.mdx#2025-04-14_snippet_11\n\nLANGUAGE: toml\nCODE:\n```\n[[queues.consumers]]\n  queue = \"registration-queue\"\n  max_retries = 10\n  dead_letter_queue = \"failed-registration-message-queue\"\n```\n\n----------------------------------------\n\nTITLE: Defining Zod Schema for User Data with OpenAPI Metadata\nDESCRIPTION: Creates Zod schemas for user data with OpenAPI metadata for documentation. The example defines a User response schema and a CreateUser schema that omits the ID field for use in creation requests.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/docs/docs/get-started.mdx#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst UserResponseSchema = z\n  .object({\n    id: z.number().int().openapi({\n      description: \"The unique identifier for the user\",\n      example: 1\n    }),\n\n    name: z.string().min(1).max(255).openapi({\n      description: \"The user's full name\",\n      example: \"Matthew\"\n    }),\n\n    email: z.string().email().openapi({\n      description: \"The user's email address\",\n      example: \"matthew@cloudflare.com\"\n    })\n  })\n  .openapi(\"User\", {\n    description: \"Schema for user response including ID\"\n  });\n\nconst CreateUserSchema = UserResponseSchema.omit({ id: true }).openapi(\n  \"CreateUser\",\n  {\n    description: \"Schema for creating a new user\"\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Basic Durable Object Implementation\nDESCRIPTION: Creates a basic Durable Object class with constructor and fetch method for handling requests.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2024-09-02-websocket-server-in-hono-with-durable-objects.mdx#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DurableObject } from \"cloudflare:workers\";\n\nexport class WebhookReceiver extends DurableObject {\n  constructor(ctx: DurableObjectState, env: CloudflareBindings) {\n    super(ctx, env);\n  }\n  async fetch(request: Request) {\n    return new Response(\"Hello world from a Durable Object\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Exposing OpenAPI Documentation as JSON Endpoint in Hono\nDESCRIPTION: Sets up an endpoint to serve the OpenAPI specification as JSON. This makes the API documentation accessible to tools like Swagger UI or Fiberplane Playground.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/docs/docs/get-started.mdx#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\napp.doc(\"/openapi.json\", {\n  openapi: \"3.0.0\",\n  info: {\n    title: \"D1 Honc! 🪿☁️\",\n    version: \"1.0.0\",\n    description: \"D1 Honc! 🪿☁️\"\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Simple Counter Metric Query in PromQL\nDESCRIPTION: A basic query that returns the current value of the http_requests_total counter. This returns an instant vector showing the cumulative count of HTTP requests since the counter was initialized.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2023-07-04-why-are-prometheus-queries-hard.mdx#2025-04-14_snippet_1\n\nLANGUAGE: promql\nCODE:\n```\nhttp_requests_total\n```\n\n----------------------------------------\n\nTITLE: Sending Traces to otel-worker via OTLP/HTTP\nDESCRIPTION: Example of how to send traces to the otel-worker service using curl with proper authentication and content type headers.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2025-02-18-otel-cloudflare-worker.mdx#2025-04-14_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ncurl -X POST http://localhost:8787/v1/traces \\\n  -H \"Authorization: Bearer your-secret-token-here\" \\\n  -H \"Content-Type: application/json\" \\\n  --data-binary @trace.json\n```\n\n----------------------------------------\n\nTITLE: Using Queue for Sign-Up Email Processing in Cloudflare Worker\nDESCRIPTION: This code snippet shows how to replace direct email sending with an asynchronous approach using queues. It sends user registration data to a queue instead of processing it inline.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2025-02-17-asynchronous-tasks-in-cloudflare-part2b.mdx#2025-04-14_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nc.executionCtx.waitUntil(sendMail(email, c.env.RESEND_API, firstName));\n\nc.executionCtx.waitUntil(\n  c.env.SIGN_UP_QUEUE.send({\n    email,\n    firstName\n  })\n);\n```\n\n----------------------------------------\n\nTITLE: Sending Messages to Cloudflare Queue in TypeScript\nDESCRIPTION: This code demonstrates how to send a message to a Cloudflare Queue using the configured binding. It's a simple one-line operation that sends the messagePayload to the queue.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2025-01-17-asynchronous-tasks-in-cloudflare-part2.mdx#2025-04-14_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nawait c.env.REGISTRATION_QUEUE.send(messagePayload);\n```\n\n----------------------------------------\n\nTITLE: Implementing Server-Side Rendering with JSX in Hono\nDESCRIPTION: Server-side setup that adds the JSX renderer middleware to the Hono app and renders the Counter component server-side with a root element for hydration.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2024-12-06-client-side-guide.mdx#2025-04-14_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Hono } from \"hono\";\nimport { jsxRenderer } from \"hono/jsx-renderer\";\n\nimport { Counter } from \"./client/Counter\";\n\nconst app = new Hono();\n\napp.use(\n  jsxRenderer(\n    ({ children }) => (\n      <html lang=\"en\">\n        <head>\n          <meta charSet=\"utf-8\" />\n          <meta content=\"width=device-width, initial-scale=1\" name=\"viewport\" />\n          <title>hono-client</title>\n        </head>\n        <div id=\"root\">{children}</div>\n      </html>\n    ),\n    { docType: true }\n  )\n);\n\napp.get(\"/\", (c) => {\n  return c.text(\"Hello Hono!\");\n  return c.render(<Counter />);\n});\n\nexport default app;\n```\n\n----------------------------------------\n\nTITLE: Configure Durable Objects in Wrangler\nDESCRIPTION: Configuration for setting up Durable Objects in wrangler.toml, defining bindings for WebhookReceiver.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2024-09-02-websocket-server-in-hono-with-durable-objects.mdx#2025-04-14_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[durable_objects]\nbindings = [\n  { name = \"WEBHOOK_RECEIVER\", class_name = \"WebhookReceiver\" }\n]\n```\n\n----------------------------------------\n\nTITLE: Basic HTTP Request Rate Query in PromQL\nDESCRIPTION: A query that calculates the rate of HTTP requests grouped by status code over a 5-minute window. This demonstrates the typical pattern of using rate() with a counter metric and grouping by relevant labels.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2023-07-04-why-are-prometheus-queries-hard.mdx#2025-04-14_snippet_0\n\nLANGUAGE: promql\nCODE:\n```\nsum by (status) (rate(http_requests_total[5m]))\n```\n\n----------------------------------------\n\nTITLE: Invoking Bound Worker with RPC and Fetch in TypeScript\nDESCRIPTION: Demonstrates two methods of calling a bound worker: using RPC and using fetch.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2025-01-17-asynchronous-tasks-in-cloudflare-part2.mdx#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// using rpc\nawait c.env.WORKER_EMAIL.send(email, firstName);\n\n// using fetch\n\nawait c.env.WORKER_EMAIL.fetch(\n  new Request(\"https://worker-email/send\", {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify({ email, firstName })\n  })\n);\n```\n\n----------------------------------------\n\nTITLE: Example JSON Request Data in Fiberplane Playground\nDESCRIPTION: Sample JSON payload demonstrating the structure of a user creation request in the Playground. Shows basic user data fields that can be used for testing API endpoints.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/docs/docs/features/playground.mdx#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"Matthew\",\n  \"email\": \"matthew@cloudflare.com\"\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing GitHub Webhooks Instance\nDESCRIPTION: Defines a function to create and return a singleton instance of Octokit Webhooks. This function ensures that only one instance of Webhooks is created with the provided secret.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2024-09-19-building-a-community-database-with-github-a-guide-to-webhook-and-api-integration-with-hono-js.mdx#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfunction getWebhooksInstance(secret: string) {\n  if (!webhooks) {\n    webhooks = new Webhooks({ secret });\n  }\n\n  return webhooks;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Cloudflare Agents Project\nDESCRIPTION: Command to install all required dependencies for the Cloudflare Agents project. This must be run after creating the project to set up all necessary packages.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/examples/simple-agent/README.md#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Wrangler D1 Database Configuration\nDESCRIPTION: Configuration settings in wrangler.toml for connecting a Worker to a D1 database, including binding, database name, and migrations directory.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2025-03-24-placegoose-to-prod.mdx#2025-04-14_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[[d1_databases]]\nbinding = \"DB\"\ndatabase_name = \"placegoose-d1\"\ndatabase_id = \"<DATABASE-ID-FROM-ABOVE>\"\nmigrations_dir = \"drizzle/migrations\"\n```\n\n----------------------------------------\n\nTITLE: Optimized WaitUntil Implementation\nDESCRIPTION: Final implementation using waitUntil() that ensures database insertion completes before response while allowing email sending to continue in the background. Provides better response times while maintaining data consistency.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2024-11-02-asynchronous-tasks-in-cloudflare-part1.mdx#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\napp.post(\"/api/marathon-waituntil\", async (c) => {\n  const { firstName, lastName, email, address, distance } = await c.req.json();\n\n  await insertData(\n    firstName,\n    lastName,\n    email,\n    address,\n    distance,\n    c.env.DATABASE_URL\n  );\n\n  c.executionCtx.waitUntil(sendMail(email, c.env.RESEND_API, firstName));\n\n  return c.text(\"Thanks for registering for our Marathon\", 201);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Wrangler for Cloudflare Workers Deployment\nDESCRIPTION: Updates the wrangler.toml configuration to point to the correct worker build and resolve the public assets directory for Cloudflare Workers deployment.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2024-12-06-client-side-guide.mdx#2025-04-14_snippet_14\n\nLANGUAGE: toml\nCODE:\n```\nname = \"hono-client\"\nmain = \"src/index.ts\"\nmain = \"dist/index.js\"\n\nassets = { directory = \"./public/\" }\n# ...\n```\n\n----------------------------------------\n\nTITLE: Integrating Fiberplane Playground Middleware with Hono.js\nDESCRIPTION: Shows how to import and configure the Fiberplane playground middleware in a Hono application. The middleware is mounted at the '/fp/*' path and requires an OpenAPI specification URL.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2025-02-12-fiberplane-hono-api-playground.mdx#2025-04-14_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Hono } from \"hono\";\nimport { createFiberplane } from \"@fiberplane/hono\";\n\nconst app = new Hono();\n\napp.use(\n  \"/fp/*\",\n  createFiberplane({\n    openapi: { url: \"/openapi.json\" }\n  })\n);\n```\n\n----------------------------------------\n\nTITLE: Running Cloudflare Agents Project Locally\nDESCRIPTION: Command to start the Cloudflare Agents project in a local development environment. This launches the application for testing and development purposes.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/examples/simple-agent/README.md#2025-04-14_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Creating D1 Database with Wrangler CLI\nDESCRIPTION: Command to create a new D1 database instance using Cloudflare's Wrangler CLI tool.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2025-03-24-placegoose-to-prod.mdx#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nwrangler d1 create placegoose-d1\n```\n\n----------------------------------------\n\nTITLE: Defining GitHub Webhook Endpoint in Hono API\nDESCRIPTION: Creates a POST endpoint '/ghwh' in the API to handle incoming GitHub webhook events. This snippet shows how to set up a route for receiving webhook payloads.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2024-09-19-building-a-community-database-with-github-a-guide-to-webhook-and-api-integration-with-hono-js.mdx#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\napi.post(\"/ghwh\", async (c) => {\n  // Handle incoming webhook payload here\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Package.json Deploy Script\nDESCRIPTION: Modifies the package.json deploy script to ensure the app is properly built with Vite before deploying to Cloudflare Workers without bundling again.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2024-12-06-client-side-guide.mdx#2025-04-14_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  // ...\n  \"scripts\": {\n    \"dev\": \"vite dev\",\n    \"build\": \"vite build --mode client && vite build\",\n    \"deploy\": \"wrangler deploy --minify\",\n    \"deploy\": \"$npm_execpath run build && wrangler deploy --no-bundle\"\n  }\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Parallel Execution with waitUntil in Cloudflare Worker\nDESCRIPTION: Implements a POST endpoint that uses waitUntil for parallel execution of data insertion and email sending.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2025-01-17-asynchronous-tasks-in-cloudflare-part2.mdx#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\napp.post(\"/api/marathon-wait-until\", async (c) => {\n  const { firstName, lastName, email, address, distance } = await c.req.json();\n\n  //using rpc\n  c.executionCtx.waitUntil(c.env.WORKER_EMAIL.send(email, firstName));\n\n  await insertData(\n    firstName,\n    lastName,\n    email,\n    address,\n    distance,\n    c.env.DATABASE_URL\n  );\n\n  return c.text(\"Thanks for registering for our Marathon\", 200);\n});\n```\n\n----------------------------------------\n\nTITLE: Database Initialization and Migration Commands\nDESCRIPTION: Commands for initializing a local D1 database, generating database files, and running migrations.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/examples/hono-openapi/README.md#2025-04-14_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# Note - The `touch` script initializes a D1 database *locally* so that we can use it\npnpm db:touch\npnpm db:generate\npnpm db:migrate\n```\n\n----------------------------------------\n\nTITLE: Running Drizzle Migrations in Production\nDESCRIPTION: Command to run database migrations using Drizzle Kit in a production environment.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2025-03-24-placegoose-to-prod.mdx#2025-04-14_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run ENVIRONMENT=production drizzle-kit migrate\n```\n\n----------------------------------------\n\nTITLE: Setting Up Client-Side Hydration in Hono\nDESCRIPTION: Client-side entry point that finds the root element and hydrates the Counter component, allowing it to become interactive after server rendering.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2024-12-06-client-side-guide.mdx#2025-04-14_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { StrictMode } from \"hono/jsx\";\nimport { hydrateRoot } from \"hono/jsx/dom/client\";\n\nimport { Counter } from \"./Counter\";\n\nconst root = document.getElementById(\"root\");\nif (!root) {\n  throw new Error(\"Root element not found\");\n}\n\nhydrateRoot(\n  root,\n  <StrictMode>\n    <Counter />\n  </StrictMode>\n);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Traces from otel-worker\nDESCRIPTION: Command to retrieve stored traces from the otel-worker service's D1 database using authenticated HTTP request.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2025-02-18-otel-cloudflare-worker.mdx#2025-04-14_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ncurl http://localhost:8787/v1/traces \\\n  -H \"Authorization: Bearer your-secret-token-here\"\n```\n\n----------------------------------------\n\nTITLE: Understanding Hono's Context Type Definition\nDESCRIPTION: This snippet shows the structure of Hono's Context type definition with its generic parameters. The Context object is central to Hono's middleware system, providing access to environment variables, request/response objects, and type-safe data sharing between middleware and handlers.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2025-02-04-hono-validation-middleware.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type Context<\n  // We'll get to these type parameters in a moment\n  E extends Env = any,\n  P extends string = any,\n  I extends Input = {}\n> = {\n  // Env vars and Cloudflare bindings\n  env: E[\"Bindings\"];\n  // Augmented Request with optionally-validated data\n  get req(): HonoRequest<P, I[\"out\"]>;\n  get res(): Response;\n  // ...\n};\n```\n\n----------------------------------------\n\nTITLE: Project Installation and Development Server Commands\nDESCRIPTION: Commands for installing project dependencies and starting the development server.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/examples/hono-openapi/README.md#2025-04-14_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npnpm i\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Updating TypeScript Configuration for Browser Environment\nDESCRIPTION: TypeScript configuration update to include the DOM library, enabling browser-specific types like 'document' to be recognized in the client-side code.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2024-12-06-client-side-guide.mdx#2025-04-14_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    //...\n    \"lib\": [\n      \"ESNext\",\n      \"DOM\"\n    ]\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Validator in Hono Route Handler\nDESCRIPTION: This snippet shows how to use a custom validator in a Hono route handler, demonstrating how to access validated data from the Context.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2025-02-04-hono-validation-middleware.mdx#2025-04-14_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nconst app = new Hono().get(\n  \"/posts\",\n  customValidator(\"query\", ZSearchQuery.parse),\n  async (c: Context) => {\n    const { search } = c.var.validated.query;\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Starting the otel-worker Development Server\nDESCRIPTION: Command to start the local development server for otel-worker using Wrangler CLI.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2025-02-18-otel-cloudflare-worker.mdx#2025-04-14_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nnpx wrangler dev\n```\n\n----------------------------------------\n\nTITLE: Defining Rich-Text Formatting Data Structures in Rust\nDESCRIPTION: The data structure used by Fiberplane to represent rich text formatting. It consists of a vector of AnnotationWithOffset objects, where each annotation represents a formatting instruction like bold or italics with an associated offset position.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2024-02-26-a-deep-dive-into-fiberplane's-operational-transformation.mdx#2025-04-14_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\ntype Formatting = Vec<AnnotationWithOffset>;\n\nstruct AnnotationWithOffset {\n    annotation: Annotation,\n    offset: u32,\n}\n\nenum Annotation {\n    StartBold,\n    EndBold,\n    StartItalics,\n    EndItalics,\n    StartLink { url: String },\n    EndLink,\n    /* more like these... */\n}\n```\n\n----------------------------------------\n\nTITLE: Database Setup Commands\nDESCRIPTION: Command line instructions for generating and applying database migrations using Drizzle ORM\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2024-11-13-retrieval-augmented-geese.mdx#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm db:generate\npnpm db:migrate\n```\n\n----------------------------------------\n\nTITLE: Testing Webhook Broadcasting with curl and websocat\nDESCRIPTION: Example of testing the full system: a curl command sends a POST request to the /receiver-listen endpoint, which is then broadcasted to the connected websocat client showing the received webhook data.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2024-09-02-websocket-server-in-hono-with-durable-objects.mdx#2025-04-14_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncurl localhost:8787/receiver-listen -X POST -d '{\"key\": \"value\"}'\n```\n\nLANGUAGE: bash\nCODE:\n```\n; websocat -v ws://localhost:8787/ws\n[INFO  websocat::lints] Auto-inserting the line mode\n[INFO  websocat::stdio_threaded_peer] get_stdio_peer (threaded)\n[INFO  websocat::ws_client_peer] get_ws_client_peer\n[INFO  websocat::net_peer] Connected to TCP [::1]:8787\n[INFO  websocat::ws_client_peer] Connected to ws\n{\"method\":\"POST\",\"path\":\"/receiver-listen\",\"body\":\"{\\\"key\\\": \\\"value\\\"}\"}\n```\n\n----------------------------------------\n\nTITLE: Creating a HONC Stack Application with OpenAPI Support\nDESCRIPTION: This shell command demonstrates how to use the create-honc-app CLI tool to initialize a new HONC stack application. During the setup process, developers can choose to include OpenAPI spec generation, which will incorporate Zod OpenAPI Hono extensions into the project.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2025-02-20-openapi-honc-stack.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm create honc-app@latest\n```\n\n----------------------------------------\n\nTITLE: Installing Fogwatch from Source using Git and Cargo\nDESCRIPTION: Commands to clone the Fogwatch repository and build it from source using Cargo, Rust's package manager.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2025-01-29-fogwatch-cloudflare-log-watcher.mdx#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/fiberplane/fogwatch.git\ncd fogwatch\ncargo build --release\n```\n\n----------------------------------------\n\nTITLE: Creating a Route with hono-openapi for Existing Applications\nDESCRIPTION: Configures a route with OpenAPI documentation using the hono-openapi package. This approach allows documenting existing routes with detailed schema information and validation.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/docs/docs/get-started.mdx#2025-04-14_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { describeRoute } from \"hono-openapi\";\nimport { resolver, validator as zValidator } from \"hono-openapi/zod\";\n\napp.post(\n  \"/api/user\",\n  describeRoute({\n    description: \"Create a new user\",\n    requestBody: {\n      content: {\n        \"application/json\": {\n          schema: resolver(CreateUserSchema)\n        }\n      }\n    },\n    responses: {\n      201: {\n        description: \"The created user\",\n        content: {\n          \"application/json\": {\n            schema: resolver(UserResponseSchema)\n          }\n        }\n      }\n    }\n  }),\n  // Middleware to validate incoming request bodies\n  zValidator(\"json\", CreateUserSchema),\n  async (c) => {\n    const { name, email } = c.req.valid(\"json\");\n\n    // define what the route handler does\n\n    return c.json(newUser);\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Updating Package.json Scripts for Build Process\nDESCRIPTION: Package.json modifications to add build scripts that first generate the client-side assets then build the server-side code, plus setting module type to ESM.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2024-12-06-client-side-guide.mdx#2025-04-14_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"hono-client\",\n  \"type\": \"module\",\n  \"scripts\": {\n    \"dev\": \"wrangler dev\",\n    \"dev\": \"vite dev\",\n    \"build\": \"vite build --mode client && vite build\",\n    \"deploy\": \"wrangler deploy --minify\"\n  }\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript for Vite Client Types\nDESCRIPTION: Adds the 'vite/client' types to the TypeScript configuration to enable access to Vite's built-in environment variables.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2024-12-06-client-side-guide.mdx#2025-04-14_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    //...\n    \"types\": [\n      // ...\n      \"vite/client\"\n    ]\n    //...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Modular Tracks Routes File in Hono.js\nDESCRIPTION: A separate module for track-related routes that can be imported into the main application. This demonstrates how to create a dedicated file for track endpoints.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2024-12-04-route-file-tree-view.mdx#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// tracks.ts\nimport { Hono } from \"hono\";\n\nconst tracks = new Hono();\n\n// Track routes go here...\n\nexport default tracks;\n```\n\n----------------------------------------\n\nTITLE: Creating a New Cloudflare Agents Project with npm\nDESCRIPTION: Command to create a new project using the Cloudflare Agents starter template. This initializes a new project with the necessary boilerplate code for building an AI-powered chat agent.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/examples/simple-agent/README.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm create cloudflare@latest -- --template cloudflare/agents-starter\n```\n\n----------------------------------------\n\nTITLE: Setting Up Fiberplane with FastAPI\nDESCRIPTION: Python code snippet demonstrating how to set up Fiberplane instrumentation with a FastAPI application.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/python/fpxpy/README.md#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom fpxpy import setup\n\napp = FastAPI()\nsetup(app)\n```\n\n----------------------------------------\n\nTITLE: Running Fiberplane Playground UI in Local Development Mode\nDESCRIPTION: Command to start the Fiberplane Playground UI in development mode using pnpm. The playground is served/built with Vite and runs on port 6660. It requires a server running on port 8787 that exposes an OpenAPI spec at /openapi.json.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/packages/hono-ui/README.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Deploying Cloudflare Agents Project\nDESCRIPTION: Command to deploy the Cloudflare Agents project to Cloudflare's infrastructure. This publishes the application to make it available for production use.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/examples/simple-agent/README.md#2025-04-14_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm run deploy\n```\n\n----------------------------------------\n\nTITLE: Creating Modular Marathon Routes File in Hono.js\nDESCRIPTION: A separate module for marathon-related routes that can be imported into the main application. This demonstrates how to create a dedicated file for marathon endpoints.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2024-12-04-route-file-tree-view.mdx#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// marathons.ts\nimport { Hono } from \"hono\";\n\nconst marathons = new Hono();\n\n// Marathon routes go here...\n\nexport default marathons;\n```\n\n----------------------------------------\n\nTITLE: Running the App Locally with yarn\nDESCRIPTION: Command to start the development server using yarn.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2024-12-06-client-side-guide.mdx#2025-04-14_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Configuring Cloudflare Rate Limiting in Wrangler.toml\nDESCRIPTION: Configures Cloudflare's Rate Limiting binding in the wrangler.toml file. This setup defines rate limiting parameters including a namespace identifier, limit of 100 requests, and a period of 60 seconds for each client.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2024-12-10-placegoose.mdx#2025-04-14_snippet_15\n\nLANGUAGE: toml\nCODE:\n```\n# The rate limiting API is in open beta.\n[[unsafe.bindings]]\nname = \"MY_RATE_LIMITER\"\ntype = \"ratelimit\"\n# An identifier you define, that is unique to your Cloudflare account.\n# Must be an integer.\nnamespace_id = \"1001\"\n\n# Limit: the number of tokens allowed within a given period in a single\n# Cloudflare location\n# Period: the duration of the period, in seconds. Must be either 10 or 60\nsimple = { limit = 100, period = 60 }\n```\n\n----------------------------------------\n\nTITLE: Installing Fiberplane Package\nDESCRIPTION: Command for installing the Fiberplane package using pnpm. This is the first step to integrate Fiberplane into a project.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/packages/hono/README.md#2025-04-14_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npnpm add @fiberplane/hono\n```\n\n----------------------------------------\n\nTITLE: Database Setup Command with npm\nDESCRIPTION: Shell command that runs the database setup script from the HONC template, which chains creating a local database, generating and applying initial migration, and running the seed script.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2024-12-10-placegoose.mdx#2025-04-14_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nnpm run db:setup\n```\n\n----------------------------------------\n\nTITLE: Using setup Function in FastAPI\nDESCRIPTION: Example usage of the setup function to initialize FPX instrumentation for a FastAPI application.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/python/fpxpy/README.md#2025-04-14_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI\nfrom fpxpy import setup\n\napp = FastAPI()\nsetup(app)\n```\n\n----------------------------------------\n\nTITLE: Running the Development Server\nDESCRIPTION: Command to start the development server using different package managers, which will serve the application with server-side rendering.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2024-12-06-client-side-guide.mdx#2025-04-14_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Example of Multi-Cell Data Structure in Fiberplane Notebooks\nDESCRIPTION: Shows the data structure representing multiple text cells in a notebook before an operation is applied. Each cell has a unique ID and content text, demonstrating how notebook content is structured.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2024-02-26-a-deep-dive-into-fiberplane's-operational-transformation.mdx#2025-04-14_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\n[\n    TextCell { id: \"cell_one\", content: \"one\" },\n    TextCell { id: \"cell_two\", content: \"two\" },\n    TextCell { id: \"cell_three\", content: \"three\" },\n]\n```\n\n----------------------------------------\n\nTITLE: Running FastAPI Server with Fiberplane\nDESCRIPTION: Shell command to run a FastAPI server with Fiberplane instrumentation enabled.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/python/fpxpy/README.md#2025-04-14_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nFPX_ENDPOINT=http://localhost:8788/v1/traces uv run fastapi dev main.py\n```\n\n----------------------------------------\n\nTITLE: Deploying to Cloudflare Workers with bun\nDESCRIPTION: Command to build and deploy the app to Cloudflare Workers using bun.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2024-12-06-client-side-guide.mdx#2025-04-14_snippet_19\n\nLANGUAGE: sh\nCODE:\n```\nbun deploy\n```\n\n----------------------------------------\n\nTITLE: Installing Fiberplane Agents Package\nDESCRIPTION: Commands to install the @fiberplane/agents package using different package managers (npm, yarn, or pnpm).\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/packages/agents/README.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @fiberplane/agents\n# or\nyarn add @fiberplane/agents\n# or\npnpm add @fiberplane/agents\n```\n\n----------------------------------------\n\nTITLE: Deploying to Cloudflare Workers with pnpm\nDESCRIPTION: Command to build and deploy the app to Cloudflare Workers using pnpm.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2024-12-06-client-side-guide.mdx#2025-04-14_snippet_18\n\nLANGUAGE: sh\nCODE:\n```\npnpm deploy\n```\n\n----------------------------------------\n\nTITLE: Integrating Alternative AI Model Provider for Cloudflare Agents\nDESCRIPTION: Code diff showing how to replace the default OpenAI provider with Cloudflare Workers AI provider. This demonstrates the flexibility to use different AI model providers with the Agents platform.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/examples/simple-agent/README.md#2025-04-14_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// server.ts\n// Change the imports\n- import { createOpenAI } from \"@ai-sdk/openai\";\n+ import { createWorkersAI } from 'workers-ai-provider';\n\n// Create a Workers AI instance\n- const openai = createOpenAI({\n-     apiKey: this.env.OPENAI_API_KEY,\n- });\n+ const workersai = createWorkersAI({ binding: env.AI });\n\n// Use it when calling the streamText method (or other methods)\n// from the ai-sdk\n- const result = streamText({\n-    model: openai(\"gpt-4o-2024-11-20\"),\n+ const model = workersai(\"@cf/deepseek-ai/deepseek-r1-distill-qwen-32b\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Cloudflare Credentials for Fogwatch\nDESCRIPTION: Environment variable setup for Cloudflare API token and account ID required to authenticate with Cloudflare's API.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2025-01-29-fogwatch-cloudflare-log-watcher.mdx#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport CLOUDFLARE_API_TOKEN=\"your-api-token\"\nexport CLOUDFLARE_ACCOUNT_ID=\"your-account-id\"\n```\n\n----------------------------------------\n\nTITLE: Deploying to Cloudflare Workers with yarn\nDESCRIPTION: Command to build and deploy the app to Cloudflare Workers using yarn.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2024-12-06-client-side-guide.mdx#2025-04-14_snippet_17\n\nLANGUAGE: sh\nCODE:\n```\nyarn deploy\n```\n\n----------------------------------------\n\nTITLE: Deploying a Worker with Wrangler\nDESCRIPTION: Command to deploy a Cloudflare Worker using Wrangler. The --minify flag reduces bundle size and startup times but can make debugging more difficult.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2025-03-24-placegoose-to-prod.mdx#2025-04-14_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nwrangler deploy --minify src/index.ts\n```\n\n----------------------------------------\n\nTITLE: Installing HONC App with Package Managers\nDESCRIPTION: This code snippet demonstrates how to create a new Hono app with a Neon database using the create-honc-app CLI. It's provided as an example for users to try out the new Neon query logs feature in Fiberplane Studio.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2024-10-03-neon-query-logs.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n<PackageManagers type=\"create\" pkg=\"honc-app@latest\" />\n```\n\n----------------------------------------\n\nTITLE: Hono MiddlewareHandler and Context Type Definitions\nDESCRIPTION: This snippet shows the type definitions for Hono's MiddlewareHandler and Context, illustrating how Hono uses generics to handle environment variables, path parameters, and input/output types.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2025-02-04-hono-validation-middleware.mdx#2025-04-14_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\ntype MiddlewareHandler<\n  E extends Env = any,\n  P extends string = string,\n  I extends Input = {}\n> = (c: Context<E, P, I>, next: Next) => Promise<Response | void>;\n\ntype Context<\n  E extends Env = any,\n  P extends string = any, // path\n  I extends Input = {}\n> = {\n  /** */\n};\n\ntype Env = {\n  Bindings?: Bindings; // object\n  Variables?: Variables; // object\n};\n\ntype Input = {\n  in?: {};\n  out?: {};\n  outputFormat?: ResponseFormat; // 'json' | 'text' | 'redirect' | string\n};\n```\n\n----------------------------------------\n\nTITLE: Using Shared Interface in Sign-up Worker\nDESCRIPTION: Imports and uses the shared WorkerEmail interface in the sign-up worker for type-safe binding.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2025-01-17-asynchronous-tasks-in-cloudflare-part2.mdx#2025-04-14_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { WorkerEmail } from \"../../worker-email-types\";\n\ntype Bindings = {\n  WORKER_EMAIL: WorkerEmail;\n};\n```\n\n----------------------------------------\n\nTITLE: Running the App Locally with npm\nDESCRIPTION: Command to start the development server using npm.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2024-12-06-client-side-guide.mdx#2025-04-14_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Deploying a Cloudflare Worker with Wrangler\nDESCRIPTION: Command-line instructions for deploying the search API to Cloudflare Workers. Sets required secrets (DATABASE_URL and OPENAI_API_KEY) using Wrangler CLI and deploys the application with pnpm.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2024-11-13-retrieval-augmented-geese.mdx#2025-04-14_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n# Set your secrets\nwrangler secret put DATABASE_URL\nwrangler secret put OPENAI_API_KEY\n\n# Deploy\npnpm run deploy\n\n```\n\n----------------------------------------\n\nTITLE: References and Ownership Types in Rust\nDESCRIPTION: Table showing the differences between shared references (&), mutable references (&mut), owned values, and reference counted pointers (Rc/Arc) in Rust, including their use cases and characteristics.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2023-03-09-getting-past-ampersand-driven-development.mdx#2025-04-14_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n// Shared Reference (&)\n& variable     // \"You can look, but you can't touch. And when you're done, I want it back.\"\n\n// Mutable Reference (&mut)\n&mut variable  // \"You can look and touch – but when you're done, I still want it back.\"\n\n// Owned Value\nvariable       // \"Here you can have it. You can do anything you want with it.\"\n\n// Reference Counted (Rc/Arc)\nRc::new(value) // \"Everyone can look at it, and we'll clean up when everyone is done.\"\n```\n\n----------------------------------------\n\nTITLE: Testing Websocket Connection with websocat\nDESCRIPTION: Command to test the Websocket connection using the websocat tool. The output shows a successful connection establishment to the /ws endpoint.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2024-09-02-websocket-server-in-hono-with-durable-objects.mdx#2025-04-14_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n> websocat -v ws://localhost:8787/ws\n\n[INFO  websocat::lints] Auto-inserting the line mode\n[INFO  websocat::stdio_threaded_peer] get_stdio_peer (threaded)\n[INFO  websocat::ws_client_peer] get_ws_client_peer\n[INFO  websocat::net_peer] Connected to TCP [::1]:8787\n[INFO  websocat::ws_client_peer] Connected to ws\n\n```\n\n----------------------------------------\n\nTITLE: Running FastAPI Application with Fiberplane Tracing\nDESCRIPTION: This command syncs dependencies using 'uv' and runs the FastAPI application with a specific endpoint for Fiberplane tracing.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/python/fpxpy/examples/fastapi-example/README.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ uv sync --frozen\n$ FPX_ENDPOINT=http://localhost:8788/v1/traces uv run fastapi dev main.py\n```\n\n----------------------------------------\n\nTITLE: Creating D1 Database and Applying Migrations for otel-worker\nDESCRIPTION: Commands to create a new Cloudflare D1 database and apply migrations for the otel-worker application using Wrangler CLI.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2025-02-18-otel-cloudflare-worker.mdx#2025-04-14_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx wrangler d1 create fiberplane-otel-db\nnpx wrangler d1 migrations apply fiberplane-otel-db\n```\n\n----------------------------------------\n\nTITLE: Mounting OpenAPI Documentation\nDESCRIPTION: Configures the OpenAPI documentation endpoint with metadata and makes it available at the /doc path.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2024-12-05-openapi-support.mdx#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// Mount the api documentation\n// The OpenAPI documentation will be available at /doc\napp.doc(\"/doc\", {\n  openapi: \"3.0.0\",\n  info: {\n    version: \"1.0.0\",\n    title: \"Simple Hono OpenAPI API\"\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Converting Blog Posts for dev.to Publication\nDESCRIPTION: This snippet provides instructions for converting MDX files to a format suitable for dev.to's markdown editor. It includes guidance on using Markdown, embedding rich content, and publishing tips.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/README.md#2025-04-14_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nplease help me convert this MDX file to a format i can copy paste into dev.to's markdown editor in order to cross publish the blog post.\n\nthese are the instructions on dev.to for crafting markdown posts in their editor:\n\nYou are currently using the basic markdown editor that uses Jekyll front matter. You can also use the rich+markdown editor you can find in UX settings.\nEditor Basics\nUse Markdown to write and format posts.\nCommonly used syntax\nEmbed rich content such as Tweets, YouTube videos, etc. Use the complete URL: {% embed https://... %}. See a list of supported embeds.\nIn addition to images for the post's content, you can also drag and drop a cover image.\nPublishing Tips\nEnsure your post has a cover image set to make the most of the home feed and social media platforms.\nShare your post on social media platforms or with your co-workers or local communities.\nAsk people to leave questions for you in the comments. It's a great way to spark additional discussion describing personally why you wrote it or why people might find it helpful.\n```\n\n----------------------------------------\n\nTITLE: Installing HONC Application with NPM\nDESCRIPTION: Commands to create a new HONC application and install its dependencies\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2024-12-10-placegoose.mdx#2025-04-14_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm create honc-app@latest\nnpm i\n```\n\n----------------------------------------\n\nTITLE: Generating HONC App with AI using create-honc-app\nDESCRIPTION: This command uses the new --hatch flag with create-honc-app to generate a HONC application using AI based on a user-provided description.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2024-12-06-honc-day.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm create honc-app@latest -- --hatch\n```\n\n----------------------------------------\n\nTITLE: Fixing Schema with Auto-Increment in Drizzle\nDESCRIPTION: Code snippet showing how to update a Drizzle schema to include auto-incrementing primary keys, which solves the sqlite_sequence table issue.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2025-03-24-placegoose-to-prod.mdx#2025-04-14_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\nconst metadata = {\n  id: integer({ mode: \"number\" }).primaryKey({\n    autoIncrement: true // Simple fix\n  })\n};\n```\n\n----------------------------------------\n\nTITLE: Transforming a Text Operation to Resolve Conflicts in OT\nDESCRIPTION: Example of a transformed ReplaceTextOperation where the offset has been updated from 10 to 14 to account for a preceding operation. This demonstrates how operations are transformed to maintain correct positioning after other changes.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2024-02-26-a-deep-dive-into-fiberplane's-operational-transformation.mdx#2025-04-14_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nReplaceTextOperation {\n    offset: 14,\n    old_text: \"\",\n    new_text: \"four \"\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Deserialized Values from WebAssembly Host in Rust\nDESCRIPTION: A Rust function that deserializes data from a fat pointer provided by the host (TypeScript). It handles the conversion from serialized data in WebAssembly memory to a Rust type and then frees the allocated memory.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2022-02-18-How-to-pass-rich-data-types-between-TypeScript-And-A-Rust-WebAssembly-Module.mdx#2025-04-14_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\n#[doc(hidden)]\npub unsafe fn import_value_from_host<'de, T: Deserialize<'de>>(fat_ptr: FatPtr) -> T {\n    let (ptr, len) = from_fat_ptr(fat_ptr);\n    if len & 0xff000000 != 0 {\n        panic!(\"Unknown extension bits\");\n    }\n\n    let slice = std::slice::from_raw_parts(ptr, len as usize);\n    let mut deserializer = Deserializer::new(slice).with_human_readable();\n    let value = T::deserialize(&mut deserializer).unwrap();\n\n    __fp_free(fat_ptr);\n\n    value\n}\n```\n\n----------------------------------------\n\nTITLE: Installing create-honc-app with Package Manager\nDESCRIPTION: Command to install the latest version of create-honc-app using npm, yarn, pnpm, or bun. This CLI tool helps bootstrap applications using the HONC stack with integrated Neon database setup.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2024-09-24-neon-setup-create-honc-app.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n<PackageManagers type=\"create\" pkg=\"honc-app@latest\" />\n```\n\n----------------------------------------\n\nTITLE: Creating a Text Insertion Operation for Conflict Resolution\nDESCRIPTION: Example of a ReplaceTextOperation that inserts \"four \" at offset 10. This demonstrates how operations are initially created before being transformed to handle conflicts with other operations.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2024-02-26-a-deep-dive-into-fiberplane's-operational-transformation.mdx#2025-04-14_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nReplaceTextOperation {\n    offset: 10,\n    old_text: \"\",\n    new_text: \"four \"\n}\n```\n\n----------------------------------------\n\nTITLE: Inverting a Text Replacement Operation in Operational Transformation\nDESCRIPTION: Example of an inverted ReplaceTextOperation that undoes the original operation. This demonstrates how inversion works by swapping the old_text and new_text values to reverse the effect of the original operation.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2024-02-26-a-deep-dive-into-fiberplane's-operational-transformation.mdx#2025-04-14_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nReplaceTextOperation {\n    offset: 4,\n    old_text: \"two \",\n    new_text: \"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Rich Text Formatting Types in Rust\nDESCRIPTION: Definition of formatting structures using vectors of annotations with offsets and enum for different formatting types\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2022-04-20-creating-a-rich-text-editor-using-rust-and-react.mdx#2025-04-14_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\ntype Formatting = Vec<AnnotationWithOffset>;\n\nstruct AnnotationWithOffset {\n    annotation: Annotation,\n    offset: u32,\n}\nenum Annotation {\n    StartBold,\n    EndBold,\n    StartItalics,\n    EndItalics,\n    StartLink { url: String },\n    EndLink,\n    /* more like these... */\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Queue Consumer in TOML\nDESCRIPTION: This snippet shows the configuration for a queue consumer in the wrangler.toml file. It specifies the queue name and optional parameters for batch size and timeout.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2025-01-17-asynchronous-tasks-in-cloudflare-part2.mdx#2025-04-14_snippet_9\n\nLANGUAGE: toml\nCODE:\n```\n[[queues.consumers]]\n  queue = \"registration-queue\"\n  max_batch_size = 10 # optional: defaults to 10\n  max_batch_timeout = 60 # optional: defaults to 5 seconds\n```\n\n----------------------------------------\n\nTITLE: Hono Input Type Example for Search Query\nDESCRIPTION: This snippet demonstrates the Input type structure for a simple search query in Hono, showing how validated request data is typed.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2025-02-04-hono-validation-middleware.mdx#2025-04-14_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n{\n\tin: {\n\t\tquery: {\n\t\t\tsearch: ParsedFormValue | ParsedFormValue[];\n\t\t}\n\t};\n\tout: {\n\t\tquery: {\n\t\t\tsearch: string;\n\t\t}\n\t};\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ReplaceCellsOperation for Multi-Cell Text Replacement\nDESCRIPTION: Complex example of a ReplaceCellsOperation that replaces content across multiple cells using split_offset and merge_offset to determine which portions of cells are affected. This operation will merge three cells into one.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2024-02-26-a-deep-dive-into-fiberplane's-operational-transformation.mdx#2025-04-14_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\nReplaceCellsOperation {\n    new_cells: [TextCell { id: \"cell_one\", content: \" \" }],\n    old_cells: [\n        TextCell { id: \"cell_one\", content: \"e\" },\n        TextCell { id: \"cell_two\", content: \"two\" },\n        TextCell { id: \"cell_three\", content: \"\" }\n    ],\n    split_offset: 2,\n    merge_offset: 0\n}\n```\n\n----------------------------------------\n\nTITLE: ReplaceTextOperation Example with Rich-Text Formatting\nDESCRIPTION: An example of a ReplaceTextOperation in Fiberplane that replaces text while also applying formatting. It identifies which cell to modify, the offset position, the old and new text, and formatting instructions that make the new text bold.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2024-02-26-a-deep-dive-into-fiberplane's-operational-transformation.mdx#2025-04-14_snippet_9\n\nLANGUAGE: rust\nCODE:\n```\nReplaceTextOperation {\n    cell_id: \"cell_one\",\n    offset: 4,\n    old_text: \"two\",\n    old_formatting: [],\n    new_text: \"TWO\",\n    new_formatting: [\n        AnnotationWithOffset { annotation: Annotation::StartBold, offset: 0 },\n        AnnotationWithOffset { annotation: Annotation::EndBold, offset: 3 }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Queue Producer Binding in TOML\nDESCRIPTION: This snippet shows how to set up a binding for a queue producer in the wrangler.toml file. It defines the queue name and the binding variable to be used in the worker code.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2025-01-17-asynchronous-tasks-in-cloudflare-part2.mdx#2025-04-14_snippet_7\n\nLANGUAGE: toml\nCODE:\n```\n[[queues.producers]]\n  queue = \"registration-queue\"\n  binding = \"REGISTRATION_QUEUE\"\n```\n\n----------------------------------------\n\nTITLE: Mapping Migration Tables Between Drizzle and Wrangler\nDESCRIPTION: SQL modification to redirect migration entries from Wrangler's d1_migrations table to Drizzle's __drizzle_migrations table, allowing both systems to track migrations.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2025-03-24-placegoose-to-prod.mdx#2025-04-14_snippet_17\n\nLANGUAGE: sql\nCODE:\n```\n// INSERT INTO d1_migrations VALUES(...\nINSERT INTO __drizzle_migrations VALUES(1,'0000_little_newton_destine.sql','2025-03-10 11:53:01');\n```\n\n----------------------------------------\n\nTITLE: Example TextCell Before Rich-Text Transformation\nDESCRIPTION: An example of a TextCell in Fiberplane's data model before a text replacement operation is applied. It shows a cell with an ID, plain text content, and an empty formatting vector.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2024-02-26-a-deep-dive-into-fiberplane's-operational-transformation.mdx#2025-04-14_snippet_8\n\nLANGUAGE: rust\nCODE:\n```\nTextCell {\n    id: \"cell_one\",\n    content: \"one two three\",\n    formatting: []\n}\n```\n\n----------------------------------------\n\nTITLE: Result of ReplaceCellsOperation in Fiberplane Notebooks\nDESCRIPTION: Shows the resulting data structure after applying the ReplaceCellsOperation to the cells. The three original cells have been merged into a single cell with combined content based on the split and merge offsets.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2024-02-26-a-deep-dive-into-fiberplane's-operational-transformation.mdx#2025-04-14_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\n[\n    TextCell { id: \"cell_one\", content: \"on three\" },\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring D1 Database in wrangler.toml\nDESCRIPTION: TOML configuration snippet for wrangler.toml to include the D1 database configuration required by otel-worker.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2025-02-18-otel-cloudflare-worker.mdx#2025-04-14_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\ndatabase_name = \"fiberplane-otel-db\"\n# change the databse_id to whatever was output by the wrangler d1 create command\ndatabase_id = \"id-of-fiberplane-otel-db\"\n```\n\n----------------------------------------\n\nTITLE: Defining TextCell Structure in Rust\nDESCRIPTION: Basic data structure for a text cell containing content and optional formatting\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2022-04-20-creating-a-rich-text-editor-using-rust-and-react.mdx#2025-04-14_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nstruct TextCell {\n    pub id: String,\n    pub content: String,\n    pub formatting: Option<Formatting>,\n}\n```\n\n----------------------------------------\n\nTITLE: Bob's ReplaceTextOperation for Conflict Resolution Example\nDESCRIPTION: A ReplaceTextOperation representing Bob's concurrent attempt to insert text at the same offset as Alice. When combined with Alice's operation, it demonstrates how Fiberplane determines the final ordering of conflicting operations.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2024-02-26-a-deep-dive-into-fiberplane's-operational-transformation.mdx#2025-04-14_snippet_12\n\nLANGUAGE: rust\nCODE:\n```\nReplaceTextOperation {\n    offset: 0,\n    old_text: \"\",\n    new_text: \"three \"\n}\n```\n\n----------------------------------------\n\nTITLE: Alice's ReplaceTextOperation for Conflict Resolution Example\nDESCRIPTION: A ReplaceTextOperation representing Alice's attempt to insert text at the beginning of a document. This is used to demonstrate how conflicts at identical offsets are resolved using lexicographical ordering.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2024-02-26-a-deep-dive-into-fiberplane's-operational-transformation.mdx#2025-04-14_snippet_11\n\nLANGUAGE: rust\nCODE:\n```\nReplaceTextOperation {\n    offset: 0,\n    old_text: \"\",\n    new_text: \"two \"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Dropping Dummy Table for sqlite_sequence\nDESCRIPTION: SQL workaround to create the sqlite_sequence table without changing the schema by creating and dropping a dummy table with an auto-incrementing primary key.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2025-03-24-placegoose-to-prod.mdx#2025-04-14_snippet_16\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE dummy (id INTEGER PRIMARY KEY AUTOINCREMENT);\nDROP TABLE dummy;\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of measure Decorator\nDESCRIPTION: Demonstrates basic usage of the measure decorator for function instrumentation.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/python/fpxpy/README.md#2025-04-14_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom fpxpy import measure\nfrom opentelemetry.trace import SpanKind\n\n@measure()\ndef my_function():\n    return \"Hello World\"\n\n@measure(\"custom-name\")\ndef named_function():\n    return \"Hello Named World\"\n```\n\n----------------------------------------\n\nTITLE: Main Service Orchestration Bash Script\nDESCRIPTION: A bash script that creates a docker network and orchestrates the startup of PostgreSQL and MinIO services, with signal handling for graceful shutdown.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2022-03-17-transforming-bash-scripts-into-docker-compose.mdx#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# This will start all the services required for tests or running the service.\n# All services will have their output prefixed with the name of the service.\n\nSCRIPT_DIR=\"$( cd \"$( dirname \"${BASH_SOURCE[0]}\" )\" &> /dev/null && pwd )\"\n\nprefix_cmd() {\n    local PREF=\"${1//\\/\\/}\" # replace / with \\/\n    shift\n    local CMD=(\"$@\")\n    \"${CMD[@]}\" 1> >(sed \"s/^/${PREF}/\") 2> >(sed \"s/^/${PREF}/\" 1>&2)\n}\n\nctrl_c() {\n    echo \"===> Shutting down services\"\n\n    echo \"===> Shutting down postgresql\"\n    kill \"$postgresql_pid\"\n\n    echo \"===> Shutting down minio\"\n    kill \"$minio_pid\"\n}\n\necho \"===> Creating docker network\"\ndocker network create fiberplane-api\n\necho \"===> Starting postgresql\"\nprefix_cmd \"postgresql: \" \"$SCRIPT_DIR/run_postgresql.sh\" &\npostgresql_pid=$!\n\necho \"===> Starting minio\"\nprefix_cmd \"minio: \" \"$SCRIPT_DIR/run_minio.sh\" &\nminio_pid=$!\n\ntrap ctrl_c INT\n\nwait $postgresql_pid $minio_pid\n\necho \"===> All services stopped\"\n```\n\n----------------------------------------\n\nTITLE: TextCell After Rich-Text Transformation\nDESCRIPTION: The TextCell after the ReplaceTextOperation has been applied. It shows how the cell content has been updated with the new text, and how the formatting annotations have been adjusted to be relative to the cell's start position rather than the operation's offset.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2024-02-26-a-deep-dive-into-fiberplane's-operational-transformation.mdx#2025-04-14_snippet_10\n\nLANGUAGE: rust\nCODE:\n```\nTextCell {\n    id: \"cell_one\",\n    content: \"one TWO three\",\n    formatting: [\n        AnnotationWithOffset { annotation: Annotation::StartBold, offset: 4 },\n        AnnotationWithOffset { annotation: Annotation::EndBold, offset: 7 }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying to Cloudflare Workers with npm\nDESCRIPTION: Command to build and deploy the app to Cloudflare Workers using npm.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2024-12-06-client-side-guide.mdx#2025-04-14_snippet_16\n\nLANGUAGE: sh\nCODE:\n```\nnpm run deploy\n```\n\n----------------------------------------\n\nTITLE: Configuring D1 Database in Wrangler\nDESCRIPTION: Cloudflare Worker configuration for D1 database connection settings in wrangler.toml\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2024-12-10-placegoose.mdx#2025-04-14_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[[d1_databases]]\nbinding = \"DB\"\ndatabase_name = \"placegoose-d1\"\n# Can be anything for local development\n# Must be updated when connecting to a remote DB\ndatabase_id = \"local-placegoose-d1\"\nmigrations_dir = \"drizzle/migrations\"\n```\n\n----------------------------------------\n\nTITLE: Complete Docker Compose Configuration\nDESCRIPTION: The final Docker Compose configuration that combines both PostgreSQL and MinIO services, replacing all individual bash scripts with a single configuration file.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2022-03-17-transforming-bash-scripts-into-docker-compose.mdx#2025-04-14_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  postgres:\n    image: postgres:11\n    volumes:\n      - postgres_storage:/var/lib/postgresql/data\n    ports:\n      - \"5432:5432\"\n    #docker-compose also allows us to define env vars inside\n    #the container environment:\n    environment:\n      POSTGRES_PASSWORD: fiberplane\n\n  minio:\n    image: minio/minio:latest\n    command: server /data --address=\":9000\" --console-address=\":9001\"\n    volumes:\n      - minio_storage:/data\n    ports:\n      - \"9000:9000\"\n      - \"9001:9001\"\n\nvolumes:\n  postgres_storage:\n  minio_storage:\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Container Startup Script\nDESCRIPTION: A bash script that launches a PostgreSQL container with volume mapping and environment configuration.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2022-03-17-transforming-bash-scripts-into-docker-compose.mdx#2025-04-14_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\nSCRIPT_DIR=\"$( cd \"$( dirname \"${BASH_SOURCE[0]}\" )\" &> /dev/null && pwd )\"\n\ndocker run -t --rm \\\n    --name postgres \\\n    --network fiberplane-api \\\n    -v \"$SCRIPT_DIR/postgresql_storage:/var/lib/postgresql/data\" \\\n    -e POSTGRES_PASSWORD=fiberplane \\\n    -p 5432:5432 \\\n    postgres:11\n```\n\n----------------------------------------\n\nTITLE: Running the App Locally with bun\nDESCRIPTION: Command to start the development server using bun.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2024-12-06-client-side-guide.mdx#2025-04-14_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\nbun dev\n```\n\n----------------------------------------\n\nTITLE: WebAssembly Memory Allocation Function in Rust\nDESCRIPTION: A Rust function exposed to WebAssembly that allocates memory and returns a fat pointer. This allows TypeScript to request memory allocation within the WebAssembly module's memory space for data transfer.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2022-02-18-How-to-pass-rich-data-types-between-TypeScript-And-A-Rust-WebAssembly-Module.mdx#2025-04-14_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\n#[no_mangle]\npub fn __fp_malloc(len: u32) -> FatPtr {\n    let ptr = unsafe {\n        std::alloc::alloc(\n            Layout::from_size_align(len as usize, MALLOC_ALIGNMENT)\n                .expect(\"Allocation failed unexpectedly, check requested allocation size\"),\n        )\n    };\n    to_fat_ptr(ptr, len)\n}\n```\n\n----------------------------------------\n\nTITLE: Initial Docker Compose Configuration for MinIO\nDESCRIPTION: The Docker Compose configuration that replaces the MinIO bash script, using a named volume instead of a bind mount for better Windows compatibility.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2022-03-17-transforming-bash-scripts-into-docker-compose.mdx#2025-04-14_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nversion: \"3.7\"\n\nservices:\n  #we'll call our service minio just like the --name argument above\n  minio:\n    #next we use the latest image:\n    image: minio/minio:latest\n    #then we specify the command to run inside the container\n    command: server /data --address=\":9000\" --console-address=\":9001\"\n    #next we map a minio_storage volume to /data which is slightly different\n    #from the original command above\n    volumes:\n      - minio_storage:/data\n    #last but not least we expose the same ports as above:\n    ports:\n      - \"9000:9000\"\n      - \"9001:9001\"\n\n#here we define the minio volume that gets mapped into the container\nvolumes:\n  minio_storage:\n```\n\n----------------------------------------\n\nTITLE: MinIO Container Startup Script\nDESCRIPTION: A bash script that launches a MinIO container with specific volume mappings and port configurations for S3-compatible storage.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2022-03-17-transforming-bash-scripts-into-docker-compose.mdx#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\nSCRIPT_DIR=\"$( cd \"$( dirname \"${BASH_SOURCE[0]}\" )\" &> /dev/null && pwd )\"\n\ndocker run -t --rm \\\n    --name minio \\\n    --network fiberplane-api \\\n    -v \"$SCRIPT_DIR/minio_storage:/data\" \\\n    -p 9000:9000 \\\n    -p 9001:9001 \\\n    minio/minio:latest server /data \\\n        --address=\":9000\" \\\n        --console-address=\":9001\"\n```\n\n----------------------------------------\n\nTITLE: Running the App Locally with pnpm\nDESCRIPTION: Command to start the development server using pnpm.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2024-12-06-client-side-guide.mdx#2025-04-14_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Document Processing Commands\nDESCRIPTION: Shell commands for processing Cloudflare documentation and generating vector embeddings\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2024-11-13-retrieval-augmented-geese.mdx#2025-04-14_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Process the Cloudflare documentation\ncd data\nbash copy-cf-docs.sh\ncd ../\n# Create the vector embeddings\npnpm run vectors:create\n```\n\n----------------------------------------\n\nTITLE: Implementing Fat Pointer Conversion in Rust\nDESCRIPTION: Functions to convert between a 64-bit fat pointer representation and its components (pointer address and length). A fat pointer combines a 32-bit memory address and a 32-bit length into a single 64-bit value.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2022-02-18-How-to-pass-rich-data-types-between-TypeScript-And-A-Rust-WebAssembly-Module.mdx#2025-04-14_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n#[doc(hidden)]\npub fn to_fat_ptr(ptr: *const u8, len: u32) -> FatPtr {\n    (ptr as FatPtr) << 32 | (len as FatPtr)\n}\n\n#[doc(hidden)]\npub fn from_fat_ptr(ptr: FatPtr) -> (*const u8, u32) {\n    ((ptr >> 32) as *const u8, (ptr & 0xffffffff) as u32)\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting Local D1 Database to SQL File with Wrangler\nDESCRIPTION: Command to export data from a local D1 database to an SQL file using Wrangler CLI. The --no-schema flag ensures only insert statements are included without schema definitions.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2025-03-24-placegoose-to-prod.mdx#2025-04-14_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nwrangler d1 export placegoose-d1 --local --output ./seed.sql --no-schema\n```\n\n----------------------------------------\n\nTITLE: Cloudflare D1 Binding Error Message\nDESCRIPTION: Example error message shown when attempting to deploy a Worker with non-existent D1 database bindings.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2025-03-24-placegoose-to-prod.mdx#2025-04-14_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nbinding DB of type d1 must have a database that already exists.\\nUse wrangler or the UI to create the database. [code: 10021]\n```\n\n----------------------------------------\n\nTITLE: Creating Environment Variables File for Cloudflare Agents\nDESCRIPTION: Example of a .dev.vars file configuration that contains the OpenAI API key required for the agent to function. This file is used for local development environment variables.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/examples/simple-agent/README.md#2025-04-14_snippet_2\n\nLANGUAGE: env\nCODE:\n```\nOPENAI_API_KEY=your_openai_api_key\n```\n\n----------------------------------------\n\nTITLE: Implementing Fat Pointer Conversion in TypeScript\nDESCRIPTION: TypeScript implementation of functions to convert between a fat pointer (represented as BigInt) and its component parts (pointer address and length). This mirrors the Rust implementation but uses JavaScript BigInt for 64-bit integers.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2022-02-18-How-to-pass-rich-data-types-between-TypeScript-And-A-Rust-WebAssembly-Module.mdx#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction fromFatPtr(fatPtr: FatPtr): [ptr: number, len: number] {\n  return [\n    Number.parseInt((fatPtr >> 32n).toString()),\n    Number.parseInt((fatPtr & 0xffff_ffffn).toString()),\n  ];\n}\n\nfunction toFatPtr(ptr: number, len: number): FatPtr {\n  return (BigInt(ptr) << 32n) | BigInt(len);\n}\n```\n\n----------------------------------------\n\nTITLE: Error Message for Missing sqlite_sequence Table\nDESCRIPTION: Error message when the remote D1 database execution fails due to a missing sqlite_sequence table, commonly used for auto-incrementing columns.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2025-03-24-placegoose-to-prod.mdx#2025-04-14_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n🌀 File already uploaded. Processing.\n\n✘ [ERROR] no such table: sqlite_sequence: SQLITE_ERROR\n```\n\n----------------------------------------\n\nTITLE: Running Fiberplane Studio with Hono Application\nDESCRIPTION: Shell command to start Fiberplane Studio alongside the Hono application. This allows developers to visualize and debug the application's traces and spans from third-party integrations.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2024-09-19-building-a-community-database-with-github-a-guide-to-webhook-and-api-integration-with-hono-js.mdx#2025-04-14_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nbunx @fiberplane/studio@latest\n```\n\n----------------------------------------\n\nTITLE: Configuring Claude Desktop for Fiberplane MCP\nDESCRIPTION: JSON configuration for setting up Claude Desktop to use the local MCP server with Fiberplane.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/python/fpxpy/README.md#2025-04-14_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"fiberplane\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"@fiberplane/mcp-server-fiberplane\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Frontmatter Configuration for Blog Post\nDESCRIPTION: YAML frontmatter configuration for a blog post about LLM support in API testing, including metadata like title, description, date, author and tags.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2024-10-23-mistral-ollama-llm-support.mdx#2025-04-14_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: \"Create sample request data with AI for API debugging - now with all major LLMs!\"\ndescription: Test your API locally like a QA engineer with AI generated sample request data. Now with Mistral and Ollama support.\nslug: ollama-mistral-llm-support\ndate: 2024-10-23\nauthor: Micha Hernandez van Leuffen\ntags:\n  - Hono.js\n  - Ollama\n  - Mistral\n  - AI\n---\n```\n\n----------------------------------------\n\nTITLE: Cloudflare D1 Error Response Example\nDESCRIPTION: Example of an error response from Cloudflare D1 when exceeding the 100 bound variables limit. This error occurs when trying to insert too many records at once.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2025-03-24-placegoose-to-prod.mdx#2025-04-14_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n400 Bad Request\n{\n\t\"errors\":[{\n\t\t\"code\":7500,\n\t\t\"message\":\"too many SQL variables at offset 420: SQLITE_ERROR\"\n\t}],\n\t\"success\":false\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Authentication Token for otel-worker\nDESCRIPTION: Example of setting up the AUTH_TOKEN environment variable in .dev.vars file, which is required for authentication in the otel-worker service.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2025-02-18-otel-cloudflare-worker.mdx#2025-04-14_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nAUTH_TOKEN=\"your-secret-token-here\"\n```\n\n----------------------------------------\n\nTITLE: Deploy to Cloudflare Workers Button with Markdown Link\nDESCRIPTION: Markdown code for creating a Deploy to Cloudflare button that sets up an uptime monitoring HONC API in the user's Cloudflare account and forks it to their GitHub repository.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2025-04-08-deploy-to-workers.mdx#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![Deploy to Cloudflare](https://deploy.workers.cloudflare.com/button)](https://deploy.workers.cloudflare.com/?url=https://github.com/fiberplane/create-honc-app/tree/main/examples/uptime-monitor)\n```\n\n----------------------------------------\n\nTITLE: Loading Client-Side Script Based on Environment\nDESCRIPTION: Modifies the main index.tsx file to conditionally load either the development or production version of the client-side script based on Vite's environment variables.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2024-12-06-client-side-guide.mdx#2025-04-14_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n// ...\napp.use(\n  jsxRenderer(\n    ({ children }) => (\n      <html lang=\"en\">\n        <head>\n          <meta charSet=\"utf-8\" />\n          <meta content=\"width=device-width, initial-scale=1\" name=\"viewport\" />\n          <title>hono-client</title>\n\n          <script\n            type=\"module\"\n            src={\n              import.meta.env.PROD\n                ? \"/assets/index.js\"\n                : \"/src/client/index.tsx\"\n            }\n          />\n        </head>\n        <body>\n          <div id=\"root\">{children}</div>\n        </body>\n      </html>\n    ),\n    { docType: true }\n  )\n);\n// ...\n```\n\n----------------------------------------\n\nTITLE: Installing Vite and Hono Build Plugins\nDESCRIPTION: Command-line instructions for installing Vite and Hono-specific build plugins needed for the dual client/server build process across different package managers.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2024-12-06-client-side-guide.mdx#2025-04-14_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nnpm install vite\nnpm install -D @hono/vite-build @hono/vite-dev-server\n```\n\n----------------------------------------\n\nTITLE: Starting Fiberplane Studio\nDESCRIPTION: This command uses 'npx' to run Fiberplane Studio, which is required to be running alongside the FastAPI application for tracing functionality.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/python/fpxpy/examples/fastapi-example/README.md#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpx @fiberplane/studio\n```\n\n----------------------------------------\n\nTITLE: Executing SQL File on Remote D1 Database\nDESCRIPTION: Command to push an SQL file to a remote D1 database. The --yes flag automatically approves prompts during execution, which is useful for build processes.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2025-03-24-placegoose-to-prod.mdx#2025-04-14_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nwrangler d1 execute placegoose-d1 --remote --file ./seed.sql --yes\n```\n\n----------------------------------------\n\nTITLE: Applying Migrations to Local D1 Database\nDESCRIPTION: Command to apply database migrations to a local D1 database using Wrangler CLI.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2025-03-24-placegoose-to-prod.mdx#2025-04-14_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nwrangler d1 migrations apply placegoose-d1 --local\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Fiberplane Website Locally with pnpm\nDESCRIPTION: These commands install dependencies and start the development server for the Fiberplane website. It requires pnpm to be installed on the system.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/README.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\npnpm run dev # (or pnpm run dev:www from the root of the repo)\n```\n\n----------------------------------------\n\nTITLE: Running Fogwatch\nDESCRIPTION: Command to start the Fogwatch application after building, with an option for development builds.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2025-01-29-fogwatch-cloudflare-log-watcher.mdx#2025-04-14_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./target/release/fogwatch #(or just `cargo run` if you're on a dev build)\n```\n\n----------------------------------------\n\nTITLE: Installing fpxpy Package\nDESCRIPTION: Command to install the fpxpy package using the uv package manager.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/python/fpxpy/README.md#2025-04-14_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nuv add fpxpy\n```\n\n----------------------------------------\n\nTITLE: Implementing Side Effect Dispatcher Middleware in TypeScript\nDESCRIPTION: This code snippet shows a Redux middleware implementation that handles side effect dispatching. It checks for new side effects after each action and dispatches corresponding thunks.\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2022-04-06-writting-redux-reducers-in-rust.mdx#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport const sideEffectDispatcher =\n  (store: Store<RootState, any>) => (next: any) => (action: any) => {\n    const oldSideEffects = store.getState()?.sideEffects;\n\n    // Call the reducers:\n    const result = next(action);\n\n    const { sideEffects } = store.getState();\n    if (sideEffects && sideEffects !== oldSideEffects) {\n      // Trigger the side effects:\n      for (const descriptor of sideEffects) {\n        store.dispatch(thunkForDescriptor(descriptor));\n      }\n    }\n\n    return result;\n  };\n```\n\n----------------------------------------\n\nTITLE: Cursor Movement Payload Structure in Rust\nDESCRIPTION: Data structure for handling cursor movement actions with support for selection and movement units\nSOURCE: https://github.com/fiberplane/fiberplane/blob/main/www/src/content/blog/2022-04-20-creating-a-rich-text-editor-using-rust-and-react.mdx#2025-04-14_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nstruct MoveCursorPayload {\n    pub delta: i32,\n    pub extend_selection: bool,\n    pub unit: CursorUnit,\n}\n```"
  }
]