[
  {
    "owner": "jowilf",
    "repo": "starlette-admin",
    "content": "TITLE: Implementing Starlette Admin with SQLAlchemy\nDESCRIPTION: Example of setting up a Starlette Admin interface using SQLAlchemy ORM. It defines a Post model, creates an admin instance, and mounts it to a Starlette or FastAPI application.\nSOURCE: https://github.com/jowilf/starlette-admin/blob/main/README.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import create_engine\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.orm import Mapped, mapped_column\nfrom starlette.applications import Starlette\n\nfrom starlette_admin.contrib.sqla import Admin, ModelView\n\nBase = declarative_base()\nengine = create_engine(\"sqlite:///test.db\", connect_args={\"check_same_thread\": False})\n\n\n# Define your model\nclass Post(Base):\n    __tablename__ = \"posts\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    title: Mapped[str]\n\n\nBase.metadata.create_all(engine)\n\napp = Starlette()  # FastAPI()\n\n# Create admin\nadmin = Admin(engine, title=\"Example: SQLAlchemy\")\n\n# Add view\nadmin.add_view(ModelView(Post))\n\n# Mount admin to your app\nadmin.mount_to(app)\n```\n\n----------------------------------------\n\nTITLE: Initializing Starlette Admin with Different Database Backends\nDESCRIPTION: Shows how to initialize the Starlette Admin interface with various database engines including SQLAlchemy, SQLModel, MongoEngine, and ODMantic. Each example demonstrates the basic setup required for the respective database backend.\nSOURCE: https://github.com/jowilf/starlette-admin/blob/main/docs/user-guide/getting-started/index.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import create_engine\nfrom starlette_admin.contrib.sqla import Admin\n\nengine = create_engine(\"sqlite:///test.db\", connect_args={\"check_same_thread\": False})\n\nadmin = Admin(engine)\n```\n\n----------------------------------------\n\nTITLE: Custom Validation with SQLAlchemy ModelView\nDESCRIPTION: Demonstrates how to implement custom validation logic by extending the ModelView class and implementing a validate method that checks specific business rules.\nSOURCE: https://github.com/jowilf/starlette-admin/blob/main/docs/user-guide/validations/index.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom starlette_admin.contrib.sqla import ModelView\nfrom starlette_admin.exceptions import FormValidationError\n\n\nclass PostView(ModelView):\n\n    async def validate(self, request: Request, data: Dict[str, Any]) -> None:\n        \"\"\"Raise FormValidationError to display error in forms\"\"\"\n        errors: Dict[str, str] = dict()\n        _2day_from_today = date.today() + timedelta(days=2)\n        if data[\"title\"] is None or len(data[\"title\"]) < 3:\n            errors[\"title\"] = \"Ensure this value has at least 03 characters\"\n        if data[\"text\"] is None or len(data[\"text\"]) < 10:\n            errors[\"text\"] = \"Ensure this value has at least 10 characters\"\n        if data[\"date\"] is None or data[\"date\"] < _2day_from_today:\n            errors[\"date\"] = \"We need at least one day to verify your post\"\n        if data[\"publisher\"] is None:\n            errors[\"publisher\"] = \"Publisher is required\"\n        if data[\"tags\"] is None or len(data[\"tags\"]) < 1:\n            errors[\"tags\"] = \"At least one tag is required\"\n        if len(errors) > 0:\n            raise FormValidationError(errors)\n        return await super().validate(request, data)\n```\n\n----------------------------------------\n\nTITLE: Implementing Batch Actions in Starlette-Admin Python\nDESCRIPTION: This snippet demonstrates how to implement custom batch actions in a Starlette-Admin ModelView. It includes examples of a 'make_published' action with a custom form and a 'redirect' action with a custom response.\nSOURCE: https://github.com/jowilf/starlette-admin/blob/main/docs/user-guide/actions/index.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import List, Any\n\nfrom starlette.datastructures import FormData\nfrom starlette.requests import Request\nfrom starlette.responses import RedirectResponse, Response\n\nfrom starlette_admin import action\nfrom starlette_admin.contrib.sqla import ModelView\nfrom starlette_admin.exceptions import ActionFailed\n\n\nclass ArticleView(ModelView):\n    actions = [\"make_published\", \"redirect\", \"delete\"]  # `delete` function is added by default\n\n    @action(\n        name=\"make_published\",\n        text=\"Mark selected articles as published\",\n        confirmation=\"Are you sure you want to mark selected articles as published ?\",\n        submit_btn_text=\"Yes, proceed\",\n        submit_btn_class=\"btn-success\",\n        form=\"\"\"\n        <form>\n            <div class=\"mt-3\">\n                <input type=\"text\" class=\"form-control\" name=\"example-text-input\" placeholder=\"Enter value\">\n            </div>\n        </form>\n        \"\"\",\n    )\n    async def make_published_action(self, request: Request, pks: List[Any]) -> str:\n        # Write your logic here\n\n        data: FormData = await request.form()\n        user_input = data.get(\"example-text-input\")\n\n        if ...:\n            # Display meaningfully error\n            raise ActionFailed(\"Sorry, We can't proceed this action now.\")\n        # Display successfully message\n        return \"{} articles were successfully marked as published\".format(len(pks))\n\n    # For custom response\n    @action(\n        name=\"redirect\",\n        text=\"Redirect\",\n        custom_response=True,\n        confirmation=\"Fill the form\",\n        form='''\n        <form>\n            <div class=\"mt-3\">\n                <input type=\"text\" class=\"form-control\" name=\"value\" placeholder=\"Enter value\">\n            </div>\n        </form>\n        '''\n    )\n    async def redirect_action(self, request: Request, pks: List[Any]) -> Response:\n        data = await request.form()\n        return RedirectResponse(f\"https://example.com/?value={data['value']}\")\n```\n\n----------------------------------------\n\nTITLE: Implementing ModelView Hooks\nDESCRIPTION: Shows how to implement hooks for customizing CRUD operations in ModelView.\nSOURCE: https://github.com/jowilf/starlette-admin/blob/main/docs/user-guide/configurations/modelview/index.md#2025-04-22_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nclass OrderView(ModelView):\n    async def after_create(self, request: Request, order: Order):\n        analytics.track_order_created(order)\n```\n\n----------------------------------------\n\nTITLE: Basic Starlette-Admin Setup with SQLAlchemy\nDESCRIPTION: Example of setting up Starlette-Admin with SQLAlchemy ORM. It includes defining a model, creating the admin interface, and mounting it to a Starlette or FastAPI application.\nSOURCE: https://github.com/jowilf/starlette-admin/blob/main/docs/index.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import create_engine\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.orm import Mapped, mapped_column\nfrom starlette.applications import Starlette\n\nfrom starlette_admin.contrib.sqla import Admin, ModelView\n\nBase = declarative_base()\nengine = create_engine(\"sqlite:///test.db\", connect_args={\"check_same_thread\": False})\n\n\n# Define your model\nclass Post(Base):\n  __tablename__ = \"posts\"\n\n  id: Mapped[int] = mapped_column(primary_key=True)\n  title: Mapped[str]\n\n\nBase.metadata.create_all(engine)\n\napp = Starlette()  # FastAPI()\n\n# Create admin\nadmin = Admin(engine, title=\"Example: SQLAlchemy\")\n\n# Add view\nadmin.add_view(ModelView(Post))\n\n# Mount admin to your app\nadmin.mount_to(app)\n```\n\n----------------------------------------\n\nTITLE: Implementing Pydantic Validation with SQLAlchemy\nDESCRIPTION: Shows how to use Pydantic for data validation with SQLAlchemy models by defining a Pydantic model and using the ModelView from starlette_admin.contrib.sqla.ext.pydantic.\nSOURCE: https://github.com/jowilf/starlette-admin/blob/main/docs/user-guide/validations/index.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom starlette_admin.contrib.sqla.ext.pydantic import ModelView\n\n\nclass Post(Base):\n    __tablename__ = \"posts\"\n\n    id = Column(Integer, primary_key=True)\n    title = Column(String)\n    content = Column(Text)\n    views = Column(Integer)\n\n\nclass PostIn(BaseModel):\n    id: Optional[int] = Field(primary_key=True)\n    title: str = Field(min_length=3)\n    content: str = Field(min_length=10)\n    views: int = Field(multiple_of=4)\n\n    @validator(\"title\")\n    def title_must_contain_space(cls, v):\n        if \" \" not in v.strip():\n            raise ValueError(\"title must contain a space\")\n        return v.title()\n\n\n# Add view\nadmin.add_view(ModelView(Post, pydantic_model=PostIn))\n```\n\n----------------------------------------\n\nTITLE: Defining BaseAdmin Class for Starlette Admin in Python\nDESCRIPTION: This code snippet defines the BaseAdmin class, which is the foundation for admin models in Starlette Admin. It includes methods for managing fields, configuring the model, and handling various admin-related operations.\nSOURCE: https://github.com/jowilf/starlette-admin/blob/main/docs/api/base-admin/index.md#2025-04-22_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nclass BaseAdmin:\n    \"\"\"Base class for admin models.\"\"\"\n\n    model: Optional[Type[Any]] = None\n    icon: str = \"fa-solid fa-table\"\n    name: Optional[str] = None\n    label: Optional[str] = None\n    title_field: Optional[str | Callable] = None\n    ordering: Optional[Union[str, Sequence[str]]] = None\n    identity: Optional[str | Sequence[str]] = None\n    fields: Optional[Sequence[Union[str, Field]]] = None\n    exclude: Optional[Sequence[str]] = None\n    search_builder: bool = False\n    search_builder_fields: Optional[Sequence[str]] = None\n    collection_name: Optional[str] = None\n    abstract = False\n    validators: List[Type[FormValidator]] = []\n    custom_actions: List[BaseAction] = []\n    list_actions: Optional[List[BaseAction]] = None\n    details_actions: Optional[List[BaseAction]] = None\n    item_actions: Optional[List[BaseAction]] = None\n\n    def __init_subclass__(cls, **kwargs: Any) -> None:\n        super().__init_subclass__(**kwargs)\n        if not cls.abstract:\n            if cls.model is None:\n                raise ValueError(f\"model is required for {cls.__name__}\")\n            if cls.name is None:\n                cls.name = cls.model.__name__.lower()\n            if cls.label is None:\n                cls.label = cls.model.__name__\n            if cls.collection_name is None:\n                cls.collection_name = inflection.pluralize(cls.name)\n\n    def __init__(self):\n        self._fields = None\n        self._identity = None\n        self._title_field = None\n        self._search_builder_fields = None\n        self._list_actions = None\n        self._details_actions = None\n        self._item_actions = None\n\n    def get_fields(self) -> List[Field]:\n        \"\"\"Get all fields for this model.\"\"\"\n        if self._fields is None:\n            self._fields = self._collect_fields()\n        return self._fields\n\n    def get_search_builder_fields(self) -> List[str]:\n        \"\"\"Get all fields for search builder.\"\"\"\n        if self._search_builder_fields is None:\n            self._search_builder_fields = (\n                self.search_builder_fields\n                if self.search_builder_fields is not None\n                else [f.name for f in self.get_fields() if f.searchable]\n            )\n        return self._search_builder_fields\n\n    def get_identity(self) -> Sequence[str]:\n        \"\"\"Get identity fields.\"\"\"\n        if self._identity is None:\n            self._identity = self._collect_identity()\n        return self._identity\n\n    def get_title_field(self) -> str:\n        \"\"\"Get title field.\"\"\"\n        if self._title_field is None:\n            self._title_field = self._collect_title_field()\n        return self._title_field\n\n    def get_list_actions(self) -> List[BaseAction]:\n        \"\"\"Get actions for list view.\"\"\"\n        if self._list_actions is None:\n            self._list_actions = (\n                self.list_actions\n                if self.list_actions is not None\n                else [DeleteAction()]\n            )\n        return self._list_actions\n\n    def get_details_actions(self) -> List[BaseAction]:\n        \"\"\"Get actions for details view.\"\"\"\n        if self._details_actions is None:\n            self._details_actions = (\n                self.details_actions\n                if self.details_actions is not None\n                else [DeleteAction()]\n            )\n        return self._details_actions\n\n    def get_item_actions(self) -> List[BaseAction]:\n        \"\"\"Get actions for individual items.\"\"\"\n        if self._item_actions is None:\n            self._item_actions = (\n                self.item_actions\n                if self.item_actions is not None\n                else [EditAction(), DeleteAction()]\n            )\n        return self._item_actions\n\n    def _collect_fields(self) -> List[Field]:\n        \"\"\"Collect fields for this model.\"\"\"\n        raise NotImplementedError()\n\n    def _collect_identity(self) -> Sequence[str]:\n        \"\"\"Collect identity fields.\"\"\"\n        if self.identity:\n            return self.identity if isinstance(self.identity, Sequence) else [self.identity]\n        return [f.name for f in self.get_fields() if f.primary_key]\n\n    def _collect_title_field(self) -> str:\n        \"\"\"Collect title field.\"\"\"\n        if self.title_field:\n            return self.title_field\n        for field in self.get_fields():\n            if field.name in [\"name\", \"title\", \"username\", \"email\"]:\n                return field.name\n        return self.get_identity()[0]\n\n    def list_query(self, request: Request) -> Any:\n        \"\"\"Query for retrieving all records.\"\"\"\n        raise NotImplementedError()\n\n    def get_list_field_value(self, request: Request, obj: Any, field: Field) -> Any:\n        \"\"\"Get value for a field in list view.\"\"\"\n        raise NotImplementedError()\n\n    def search_query(self, request: Request, term: str) -> Any:\n        \"\"\"Query for searching records.\"\"\"\n        raise NotImplementedError()\n\n    def get_count(self, request: Request, query: Any) -> int:\n        \"\"\"Get count of records.\"\"\"\n        raise NotImplementedError()\n\n    def get_list_result(self, request: Request, query: Any, offset: int, limit: int) -> List[Any]:\n        \"\"\"Get list of records.\"\"\"\n        raise NotImplementedError()\n\n    def get_object_for_details(self, request: Request, pk: Any) -> Any:\n        \"\"\"Get object for details view.\"\"\"\n        raise NotImplementedError()\n\n    def get_object_for_edit(self, request: Request, pk: Any) -> Any:\n        \"\"\"Get object for edit view.\"\"\"\n        raise NotImplementedError()\n\n    def get_form_data(self, request: Request, obj: Any) -> Dict[str, Any]:\n        \"\"\"Get form data for object.\"\"\"\n        raise NotImplementedError()\n\n    def before_create(self, request: Request, data: Dict[str, Any]) -> Dict[str, Any]:\n        \"\"\"Hook before creating a new record.\"\"\"\n        return data\n\n    def create(self, request: Request, data: Dict[str, Any]) -> Any:\n        \"\"\"Create a new record.\"\"\"\n        raise NotImplementedError()\n\n    def after_create(self, request: Request, obj: Any) -> None:\n        \"\"\"Hook after creating a new record.\"\"\"\n        pass\n\n    def before_update(self, request: Request, obj: Any, data: Dict[str, Any]) -> Dict[str, Any]:\n        \"\"\"Hook before updating a record.\"\"\"\n        return data\n\n    def update(self, request: Request, obj: Any, data: Dict[str, Any]) -> Any:\n        \"\"\"Update a record.\"\"\"\n        raise NotImplementedError()\n\n    def after_update(self, request: Request, obj: Any) -> None:\n        \"\"\"Hook after updating a record.\"\"\"\n        pass\n\n    def delete(self, request: Request, pks: List[Any]) -> Optional[List[Any]]:\n        \"\"\"Delete records.\"\"\"\n        raise NotImplementedError()\n\n    def get_detail_field_value(self, request: Request, obj: Any, field: Field) -> Any:\n        \"\"\"Get value for a field in detail view.\"\"\"\n        raise NotImplementedError()\n\n    def get_default_action(self) -> Optional[BaseAction]:\n        \"\"\"Get default action for this model.\"\"\"\n        return None\n\n    def has_add_permission(self, request: Request) -> bool:\n        \"\"\"Check if user has permission to add records.\"\"\"\n        return True\n\n    def has_edit_permission(self, request: Request) -> bool:\n        \"\"\"Check if user has permission to edit records.\"\"\"\n        return True\n\n    def has_delete_permission(self, request: Request) -> bool:\n        \"\"\"Check if user has permission to delete records.\"\"\"\n        return True\n\n    def has_detail_permission(self, request: Request) -> bool:\n        \"\"\"Check if user has permission to view details.\"\"\"\n        return True\n\n    def has_list_permission(self, request: Request) -> bool:\n        \"\"\"Check if user has permission to list records.\"\"\"\n        return True\n```\n\n----------------------------------------\n\nTITLE: Adding Model Views to Starlette Admin\nDESCRIPTION: Demonstrates how to add model views for managing database models through the admin interface. Shows implementation for different ORMs with User and Post models.\nSOURCE: https://github.com/jowilf/starlette-admin/blob/main/docs/user-guide/getting-started/index.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import create_engine\nfrom starlette_admin.contrib.sqla import Admin, ModelView\n\nfrom .models import User, Post\n\nengine = create_engine(\"sqlite:///test.db\", connect_args={\"check_same_thread\": False})\n\nadmin = Admin(engine)\n\nadmin.add_view(ModelView(User))\nadmin.add_view(ModelView(Post))\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Field Exclusions in ModelView\nDESCRIPTION: Shows how to exclude specific fields from different views using the exclude_fields configuration options.\nSOURCE: https://github.com/jowilf/starlette-admin/blob/main/docs/user-guide/configurations/modelview/index.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass PostView(ModelView):\n    exclude_fields_from_list = [Post.content, Post.tags]\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Admin Views\nDESCRIPTION: Shows how to create custom admin views not tied to any model, including simple views with templates and views with custom render logic.\nSOURCE: https://github.com/jowilf/starlette-admin/blob/main/docs/user-guide/getting-started/index.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom starlette_admin import CustomView\n\nadmin.add_view(CustomView(label=\"Home\", icon=\"fa fa-home\", path=\"/home\", template_path=\"home.html\"))\n\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom starlette.requests import Request\nfrom starlette.responses import Response\nfrom starlette.templating import Jinja2Templates\nfrom starlette_admin import CustomView\n\n\nclass HomeView(CustomView):\n    async def render(self, request: Request, templates: Jinja2Templates) -> Response:\n        return templates.TemplateResponse(\n            request,\n            name=\"home.html\",\n            context={\"latest_posts\": ..., \"top_users\": ...},\n        )\n\n\nadmin.add_view(HomeView(label=\"Home\", icon=\"fa fa-home\", path=\"/home\"))\n```\n\n----------------------------------------\n\nTITLE: Initializing Starlette Admin with Custom Configuration\nDESCRIPTION: Example showing how to initialize a Starlette Admin instance with various customization options including title, URLs, authentication, templates, and internationalization settings. The configuration demonstrates setting up custom views, authentication providers, and static resource locations.\nSOURCE: https://github.com/jowilf/starlette-admin/blob/main/docs/user-guide/configurations/admin/index.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nadmin = Admin(\n    title=\"SQLModel Admin\",\n    base_url=\"/admin\",\n    route_name=\"admin\",\n    statics_dir=\"statics/admin\",\n    templates_dir=\"templates/admin\",\n    logo_url=\"`https`://preview.tabler.io/static/logo-white.svg\",\n    login_logo_url=\"`https`://preview.tabler.io/static/logo.svg\",\n    index_view=CustomView(label=\"Home\", icon=\"fa fa-home\", path=\"/home\", template_path=\"home.html\"),\n    auth_provider=MyAuthProvider(login_path=\"/sign-in\", logout_path=\"/sign-out\"),\n    middlewares=[],\n    debug=False,\n    i18n_config = I18nConfig(default_locale=\"en\")\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Search and Sort Options in ModelView\nDESCRIPTION: Demonstrates configuration of searchable and sortable fields along with default sorting options in ModelView.\nSOURCE: https://github.com/jowilf/starlette-admin/blob/main/docs/user-guide/configurations/modelview/index.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass PostView(ModelView):\n    sortable_fields = [Post.id, \"title\"]\n    searchable_fields = [Post.id, Post.title, \"tags\"]\n    fields_default_sort = [\"title\", (\"price\", True)]\n```\n\n----------------------------------------\n\nTITLE: Complete Custom Field Implementation\nDESCRIPTION: Full implementation of CustomField with data processing methods and value serialization.\nSOURCE: https://github.com/jowilf/starlette-admin/blob/main/docs/advanced/custom-field/index.md#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom dataclasses import dataclass\nfrom typing import Any, Dict\n\nfrom requests import Request\nfrom starlette.datastructures import FormData\nfrom starlette_admin import BaseField\n\n\n@dataclass\nclass CustomField(BaseField):\n    render_function_key: str = \"mycustomkey\"\n    form_template: str = \"forms/custom.html\"\n    display_template: str = \"displays/custom.html\"\n\n    async def parse_form_data(self, request: Request, form_data: FormData) -> Any:\n        return form_data.get(self.name)\n\n    async def serialize_value(self, request: Request, value: Any, action: RequestAction) -> Any:\n        return value\n\n    def dict(self) -> Dict[str, Any]:\n        return super().dict()\n```\n\n----------------------------------------\n\nTITLE: Initializing Multiple Admin Instances in Starlette with Custom Routes and Views\nDESCRIPTION: This snippet demonstrates how to create and configure multiple admin instances in a Starlette application. It shows the setup of two admin interfaces with different base URLs, route names, and model views. The code also includes assertions to verify the correct URL path generation for each admin instance.\nSOURCE: https://github.com/jowilf/starlette-admin/blob/main/docs/user-guide/multiple-admin/index.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom starlette.applications import Starlette\nfrom starlette_admin import BaseAdmin as Admin\nfrom starlette_admin.contrib.sqla import ModelView\n\napp = Starlette()\n\nadmin1 = Admin(\n    \"Admin1\", base_url=\"/admin1\", route_name=\"admin1\", templates_dir=\"templates/admin1\"\n)\nadmin1.add_view(ModelView(Report))\nadmin1.add_view(ModelView(Post))\nadmin1.mount_to(app)\n\nadmin2 = Admin(\n    \"Admin2\", base_url=\"/admin2\", route_name=\"admin2\", templates_dir=\"templates/admin2\"\n)\nadmin2.add_view(ModelView(Post))\nadmin2.add_view(ModelView(User))\nadmin2.mount_to(app)\n\nassert app.url_path_for(\"admin1:index\") == \"/admin1/\"\nassert app.url_path_for(\"admin2:index\") == \"/admin2/\"\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Export Options in ModelView\nDESCRIPTION: Shows how to configure data export options including field selection and export types.\nSOURCE: https://github.com/jowilf/starlette-admin/blob/main/docs/user-guide/configurations/modelview/index.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom starlette_admin import ExportType\n\nclass PostView(ModelView):\n    export_fields = [Post.id, Post.content, Post.tags]\n    export_types = [ExportType.CSV, ExportType.EXCEL]\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Object Representation\nDESCRIPTION: Shows how to customize object representation in the admin interface using __admin_repr__ method.\nSOURCE: https://github.com/jowilf/starlette-admin/blob/main/docs/user-guide/configurations/modelview/index.md#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nclass User:\n    id: int\n    first_name: str\n    last_name: str\n\n    async def __admin_repr__(self, request: Request):\n        return f\"{self.last_name} {self.first_name}\"\n```\n\n----------------------------------------\n\nTITLE: Implementing File Management with SQLAlchemy in Starlette-Admin\nDESCRIPTION: Example showing how to set up a Book model with file handling capabilities using SQLAlchemy-file. Demonstrates the use of FileField for document storage and ImageField for cover images with thumbnail support.\nSOURCE: https://github.com/jowilf/starlette-admin/blob/main/docs/user-guide/files/index.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import Column, Integer, String\nfrom sqlalchemy.orm import declarative_base\nfrom sqlalchemy_file import FileField, ImageField\nfrom starlette_admin.contrib.sqla import ModelView\n\nBase = declarative_base()\n\n\nclass Book(Base):\n    __tablename__ = \"book\"\n\n    id = Column(Integer, autoincrement=True, primary_key=True)\n    title = Column(String(50), unique=True)\n    cover = Column(ImageField(thumbnail_size=(128, 128)))\n    content = Column(FileField)\n\n\nclass BookView(ModelView):\n    pass\n\nadmin.add_view(BookView(Book))\n```\n\n----------------------------------------\n\nTITLE: Configuring Datatable Extensions in ModelView\nDESCRIPTION: Demonstrates how to enable/disable various DataTables extensions in the ModelView.\nSOURCE: https://github.com/jowilf/starlette-admin/blob/main/docs/user-guide/configurations/modelview/index.md#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nclass PostView(ModelView):\n    column_visibility = False\n    search_builder = False\n    responsive_table = True\n    save_state = True\n```\n\n----------------------------------------\n\nTITLE: Setting Metadata for PostView in Starlette-Admin\nDESCRIPTION: This snippet demonstrates how to set metadata such as identity, name, label, and icon for the PostView class.\nSOURCE: https://github.com/jowilf/starlette-admin/blob/main/docs/advanced/base-model-view/index.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom starlette_admin import BaseModelView\n\n\nclass PostView(BaseModelView):\n    identity = \"post\"\n    name = \"Post\"\n    label = \"Blog Posts\"\n    icon = \"fa fa-blog\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Fields in Starlette Admin ModelView\nDESCRIPTION: Demonstrates how to customize fields in a ModelView using SQLAlchemy models with Starlette Admin. Shows basic setup of a Post model and corresponding PostView with custom field configurations.\nSOURCE: https://github.com/jowilf/starlette-admin/blob/main/docs/user-guide/configurations/modelview/index.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import JSON, Column, Integer, String, Text, create_engine\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom starlette.applications import Starlette\nfrom starlette_admin import TagsField\nfrom starlette_admin.contrib.sqla import Admin, ModelView\n\nBase = declarative_base()\nengine = create_engine(\"sqlite:///test.db\", connect_args={\"check_same_thread\": False})\n\n\nclass Post(Base):\n    __tablename__ = \"posts\"\n\n    id = Column(Integer, primary_key=True)\n    title = Column(String)\n    tags = Column(JSON)\n    content = Column(Text)\n\n\nclass PostView(ModelView):\n    fields = [\"id\", \"title\", Post.content, TagsField(\"tags\", label=\"Tags\")]\n\n\napp = Starlette()\n\nadmin = Admin(engine)\nadmin.add_view(PostView(Post, icon=\"fa fa-blog\"))\nadmin.mount_to(app)\n```\n\n----------------------------------------\n\nTITLE: Adding Links and Dropdowns to Admin Interface\nDESCRIPTION: Examples of adding external links and dropdown menus to group related views in the admin interface navigation.\nSOURCE: https://github.com/jowilf/starlette-admin/blob/main/docs/user-guide/getting-started/index.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom starlette_admin.views import Link\n\nadmin.add_view(Link(label=\"Home Page\", icon=\"fa fa-link\", url=\"/\"))\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom starlette_admin import CustomView, DropDown\nfrom starlette_admin.contrib.sqla import ModelView\nfrom starlette_admin.views import Link\n\nfrom .models import User\n\nadmin.add_view(\n    DropDown(\n        \"Resources\",\n        icon=\"fa fa-list\",\n        views=[\n            ModelView(User),\n            Link(label=\"Home Page\", url=\"/\"),\n            CustomView(label=\"Dashboard\", path=\"/dashboard\", template_path=\"dashboard.html\"),\n        ],\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Row Actions Display in Starlette-Admin Python\nDESCRIPTION: This snippet demonstrates how to configure the display type for row actions in a Starlette-Admin ModelView. It shows two options: ICON_LIST and DROPDOWN.\nSOURCE: https://github.com/jowilf/starlette-admin/blob/main/docs/user-guide/actions/index.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom starlette_admin._types import RowActionsDisplayType\n\n\nclass ArticleView(ModelView):\n    row_actions_display_type = RowActionsDisplayType.ICON_LIST\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom starlette_admin._types import RowActionsDisplayType\n\n\nclass ArticleView(ModelView):\n    row_actions_display_type = RowActionsDisplayType.DROPDOWN\n```\n\n----------------------------------------\n\nTITLE: Implementing Row Actions in Starlette-Admin Python\nDESCRIPTION: This snippet shows how to implement custom row actions in a Starlette-Admin ModelView. It includes examples of a 'make_published' row action with a custom form and a 'go_to_example' link row action.\nSOURCE: https://github.com/jowilf/starlette-admin/blob/main/docs/user-guide/actions/index.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Any\n\nfrom starlette.datastructures import FormData\nfrom starlette.requests import Request\n\nfrom starlette_admin._types import RowActionsDisplayType\nfrom starlette_admin.actions import link_row_action, row_action\nfrom starlette_admin.contrib.sqla import ModelView\nfrom starlette_admin.exceptions import ActionFailed\n\n\nclass ArticleView(ModelView):\n    ...\n    row_actions = [\"view\", \"edit\", \"go_to_example\", \"make_published\",\n                   \"delete\"]  # edit, view and delete are provided by default\n    row_actions_display_type = RowActionsDisplayType.ICON_LIST  # RowActionsDisplayType.DROPDOWN\n\n    @row_action(\n        name=\"make_published\",\n        text=\"Mark as published\",\n        confirmation=\"Are you sure you want to mark this article as published ?\",\n        icon_class=\"fas fa-check-circle\",\n        submit_btn_text=\"Yes, proceed\",\n        submit_btn_class=\"btn-success\",\n        action_btn_class=\"btn-info\",\n        form=\"\"\"\n        <form>\n            <div class=\"mt-3\">\n                <input type=\"text\" class=\"form-control\" name=\"example-text-input\" placeholder=\"Enter value\">\n            </div>\n        </form>\n        \"\"\",\n    )\n    async def make_published_row_action(self, request: Request, pk: Any) -> str:\n        # Write your logic here\n\n        data: FormData = await request.form()\n        user_input = data.get(\"example-text-input\")\n\n        if ...:\n            # Display meaningfully error\n            raise ActionFailed(\"Sorry, We can't proceed this action now.\")\n        # Display successfully message\n        return \"The article was successfully marked as published\"\n\n    @link_row_action(\n        name=\"go_to_example\",\n        text=\"Go to example.com\",\n        icon_class=\"fas fa-arrow-up-right-from-square\",\n    )\n    def go_to_example_row_action(self, request: Request, pk: Any) -> str:\n        return f\"https://example.com/?pk={pk}\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Initial Sort Order in Starlette Admin ModelView\nDESCRIPTION: Example showing how to configure default sorting for a User model view using the fields_default_sort property. Demonstrates sorting by last_name ascending and first_name descending.\nSOURCE: https://github.com/jowilf/starlette-admin/blob/main/docs/changelog/index.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass User:\n    id: int\n    last_name: str\n    first_name: str\n\n\nclass UserView(ModelView):\n    fields_default_sort = [\"last_name\", (\"first_name\", True)]\n\nadmin.add_view(UserView(User))\n```\n\n----------------------------------------\n\nTITLE: MongoEngine Model Validation\nDESCRIPTION: Shows how to implement validation in MongoEngine using Document and EmbeddedDocument with field validators.\nSOURCE: https://github.com/jowilf/starlette-admin/blob/main/docs/user-guide/validations/index.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport mongoengine as db\n\nclass Comment(db.EmbeddedDocument):\n    name = db.StringField(min_length=3, max_length=20, required=True)\n    value = db.StringField(max_length=20)\n\n\nclass Post(db.Document):\n    name = db.StringField(max_length=20, required=True)\n    value = db.StringField(max_length=20)\n    inner = db.ListField(db.EmbeddedDocumentField(Comment))\n    lols = db.ListField(db.StringField(max_length=20))\n```\n\n----------------------------------------\n\nTITLE: Listing Available Field Types in Starlette Admin\nDESCRIPTION: This code block enumerates all the field types available in the starlette_admin.fields module. It includes basic data types, specialized fields for various purposes, and relationship fields for database connections.\nSOURCE: https://github.com/jowilf/starlette-admin/blob/main/docs/api/fields/index.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n:::starlette_admin.fields\n    options:\n        show_root_heading: true\n        members:\n              - BaseField\n              - BooleanField\n              - IntegerField\n              - DecimalField\n              - FloatField\n              - StringField\n              - TextAreaField\n              - TinyMCEEditorField\n              - TagsField\n              - EmailField\n              - URLField\n              - PhoneField\n              - ColorField\n              - PasswordField\n              - EnumField\n              - TimeZoneField\n              - CountryField\n              - CurrencyField\n              - DateTimeField\n              - DateField\n              - TimeField\n              - ArrowField\n              - JSONField\n              - FileField\n              - ImageField\n              - RelationField\n              - HasOne\n              - HasMany\n              - ListField\n              - CollectionField\n```\n\n----------------------------------------\n\nTITLE: Custom Field with Template Configuration\nDESCRIPTION: Extends CustomField to include form and display template configurations.\nSOURCE: https://github.com/jowilf/starlette-admin/blob/main/docs/advanced/custom-field/index.md#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom starlette_admin import BaseField\nfrom dataclasses import dataclass\n\n@dataclass\nclass CustomField(BaseField):\n    render_function_key: str = \"mycustomkey\"\n    form_template: str = \"forms/custom.html\"\n    display_template: str = \"displays/custom.html\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Pagination in ModelView\nDESCRIPTION: Demonstrates pagination configuration including page size and page size options.\nSOURCE: https://github.com/jowilf/starlette-admin/blob/main/docs/user-guide/configurations/modelview/index.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass PostView(ModelView):\n    page_size = 5\n    page_size_options = [5, 10, 25, 50, -1]\n```\n\n----------------------------------------\n\nTITLE: Configuring Starlette Admin View Components\nDESCRIPTION: Configuration snippet that defines the available view components in Starlette Admin, including base views, dropdown menus, links, custom views, and model views. This setup determines which components will be exposed in the documentation.\nSOURCE: https://github.com/jowilf/starlette-admin/blob/main/docs/api/views/index.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n:::starlette_admin.views\n    options:\n        show_root_heading: true\n        members:\n          - BaseView\n          - DropDown\n          - Link\n          - CustomView\n          - BaseModelView\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Admin Class for JavaScript Integration\nDESCRIPTION: Shows how to override the admin class to include custom JavaScript rendering functions with SQLAlchemy backend.\nSOURCE: https://github.com/jowilf/starlette-admin/blob/main/docs/advanced/custom-field/index.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom starlette_admin.contrib.sqla import Admin as BaseAdmin\n\nclass Admin(BaseAdmin):\n    def custom_render_js(self, request: Request) -> Optional[str]:\n        return request.url_for(\"statics\", path=\"js/custom_render.js\")\n\nadmin = Admin(engine)\nadmin.add_view(...)\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Custom Field in Python\nDESCRIPTION: Defines a basic custom field class that inherits from BaseField using Python's dataclass decorator.\nSOURCE: https://github.com/jowilf/starlette-admin/blob/main/docs/advanced/custom-field/index.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom starlette_admin import BaseField\nfrom dataclasses import dataclass\n\n@dataclass\nclass CustomField(BaseField):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Implementing File Management with MongoEngine in Starlette-Admin\nDESCRIPTION: Example demonstrating file handling setup using MongoEngine Document model. Shows configuration of FileField and ImageField with thumbnail support in a MongoDB context.\nSOURCE: https://github.com/jowilf/starlette-admin/blob/main/docs/user-guide/files/index.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom mongoengine import Document, FileField, ImageField, StringField\nfrom starlette_admin.contrib.mongoengine import ModelView\n\n\nclass Book(Document):\n    title = StringField(max_length=50)\n    cover = ImageField(thumbnail_size=(128, 128))\n    content = FileField()\n\n\nclass BookView(ModelView):\n    pass\n\nadmin.add_view(BookView(Book))\n```\n\n----------------------------------------\n\nTITLE: Custom JavaScript Render Function\nDESCRIPTION: Defines a custom rendering function for Datatables integration using JavaScript.\nSOURCE: https://github.com/jowilf/starlette-admin/blob/main/docs/advanced/custom-field/index.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nObject.assign(render, {\n  mycustomkey: function render(data, type, full, meta, fieldOptions) {\n        ...\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: MongoEngine Todo Model Definition\nDESCRIPTION: Definition of Todo model using MongoEngine with title and done fields\nSOURCE: https://github.com/jowilf/starlette-admin/blob/main/docs/tutorials/basic/index.md#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport mongoengine as db\n\n\nclass Todo(db.Document):\n    title = db.StringField()\n    done = db.BooleanField()\n```\n\n----------------------------------------\n\nTITLE: Defining SQLAlchemy ModelView Class in Python for Starlette Admin\nDESCRIPTION: This code snippet defines the ModelView class for SQLAlchemy models in Starlette Admin. It inherits from BaseModelView and implements methods for CRUD operations, searching, and filtering specific to SQLAlchemy models.\nSOURCE: https://github.com/jowilf/starlette-admin/blob/main/docs/api/contrib/sqlalchemy/modelview/index.md#2025-04-22_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nclass ModelView(BaseModelView):\n    model: Type[Model]\n    identity: str = None\n    name: str = None\n    label: str = None\n    icon: str = None\n    category: str = None\n    category_icon: str = None\n    primary_key: str = \"id\"\n    exclude_fields_from_list: List[str] = []\n    exclude_fields_from_detail: List[str] = []\n    exclude_fields_from_create: List[str] = []\n    exclude_fields_from_edit: List[str] = []\n    searchable_fields: List[str] = []\n    sortable_fields: List[str] = []\n    export_fields: List[str] = []\n    fields: List[Union[Field, str]] = []\n    list_field_renderer: Dict[str, Callable] = {}\n    formatters: Dict[str, Callable] = {}\n    list_formatters: Dict[str, Callable] = {}\n    detail_formatters: Dict[str, Callable] = {}\n    column_labels: Dict[str, str] = {}\n    column_default_sort: Union[str, Tuple[str, bool]] = None\n    page_size: int = 10\n    page_size_options: List[int] = [10, 25, 50, 100]\n    export: bool = True\n    export_max_rows: int = 0\n    export_types: List[str] = [\"csv\"]\n    form: Type[ModelForm] = None\n    form_include_pk: bool = False\n    form_widget_args: Dict[str, Dict[str, Any]] = {}\n    form_args: Dict[str, Dict[str, Any]] = {}\n    form_edit_rules: Dict[str, Union[str, List[str]]] = {}\n    form_create_rules: Dict[str, Union[str, List[str]]] = {}\n    base_query: Union[Query, Callable[[Query], Query]] = None\n    base_query_create: Union[Query, Callable[[Query], Query]] = None\n    base_query_edit: Union[Query, Callable[[Query], Query]] = None\n    base_query_delete: Union[Query, Callable[[Query], Query]] = None\n    on_model_change: Callable[[ModelView, Model, bool], None] = None\n    after_model_change: Callable[[ModelView, Model, bool], None] = None\n    on_model_delete: Callable[[ModelView, Model], None] = None\n    after_model_delete: Callable[[ModelView, Model], None] = None\n    can_create: bool = True\n    can_edit: bool = True\n    can_delete: bool = True\n    can_view_details: bool = True\n    can_export: bool = True\n    details_modal: bool = False\n    create_modal: bool = False\n    edit_modal: bool = False\n    delete_modal: bool = True\n    search_helper_class: Type[SearchHelper] = SQLASearchHelper\n    filter_helper_class: Type[FilterHelper] = SQLAFilterHelper\n    order_by: List[Union[str, Column]] = []\n    column_type_formatters: Dict[Type, Callable] = {}\n    column_descriptions: Dict[str, str] = {}\n    column_formatters_detail: Dict[str, Callable] = {}\n    column_formatters_list: Dict[str, Callable] = {}\n    column_formatters_export: Dict[str, Callable] = {}\n    column_formatters: Dict[str, Callable] = {}\n    column_display_pk: bool = False\n    column_hide_backrefs: bool = True\n    column_list: List[str] = None\n    column_details_list: List[str] = None\n    column_export_list: List[str] = None\n    column_sortable_list: List[Union[str, tuple]] = None\n    column_searchable_list: List[Union[str, tuple]] = None\n    column_filters: List[Union[str, FilterEqual, FilterNotEqual, FilterGreater, FilterSmaller, FilterEmpty, FilterInList, FilterNotInList, FilterDateBetween, FilterDateNotBetween, FilterTimeBetween, FilterTimeNotBetween, FilterLike, FilterNotLike, FilterILike, FilterNotILike]] = None\n    form_columns: List[str] = None\n    form_create_rules: Dict[str, Union[str, List[str]]] = None\n    form_edit_rules: Dict[str, Union[str, List[str]]] = None\n    form_overrides: Dict[str, Type[Field]] = None\n    form_widget_args: Dict[str, Dict[str, Any]] = None\n    form_args: Dict[str, Dict[str, Any]] = None\n    form_extra_fields: Dict[str, Field] = None\n    action_disallowed_list: List[str] = []\n    action_postprocess: Callable[[Any], Any] = None\n    action_preprocess: Callable[[Any], Any] = None\n    action_form: Type[Form] = None\n    action_form_args: Dict[str, Dict[str, Any]] = None\n    action_form_widget_args: Dict[str, Dict[str, Any]] = None\n    action_form_overrides: Dict[str, Type[Field]] = None\n    action_form_extra_fields: Dict[str, Field] = None\n    action_form_create_rules: Dict[str, Union[str, List[str]]] = None\n    action_form_edit_rules: Dict[str, Union[str, List[str]]] = None\n    action_form_columns: List[str] = None\n    action_form_exclude: List[str] = None\n    action_form_include_pk: bool = False\n    action_form_readonly: List[str] = None\n    action_form_readonly_pk: bool = True\n    action_form_readonly_fields: List[str] = None\n    action_form_readonly_fields_create: List[str] = None\n    action_form_readonly_fields_edit: List[str] = None\n    action_form_readonly_fields_delete: List[str] = None\n    action_form_readonly_fields_view: List[str] = None\n    action_form_readonly_fields_export: List[str] = None\n    action_form_readonly_fields_import: List[str] = None\n    action_form_readonly_fields_action: List[str] = None\n    action_form_readonly_fields_batch: List[str] = None\n    action_form_readonly_fields_inline: List[str] = None\n    action_form_readonly_fields_multi: List[str] = None\n    action_form_readonly_fields_single: List[str] = None\n    action_form_readonly_fields_ajax: List[str] = None\n    action_form_readonly_fields_modal: List[str] = None\n    action_form_readonly_fields_tab: List[str] = None\n    action_form_readonly_fields_accordion: List[str] = None\n    action_form_readonly_fields_wizard: List[str] = None\n    action_form_readonly_fields_inline_form: List[str] = None\n    action_form_readonly_fields_inline_formset: List[str] = None\n    action_form_readonly_fields_inline_tabular: List[str] = None\n    action_form_readonly_fields_inline_stacked: List[str] = None\n    action_form_readonly_fields_inline_tabular_inline: List[str] = None\n    action_form_readonly_fields_inline_stacked_inline: List[str] = None\n    action_form_readonly_fields_inline_tabular_formset: List[str] = None\n    action_form_readonly_fields_inline_stacked_formset: List[str] = None\n    action_form_readonly_fields_inline_tabular_inline_formset: List[str] = None\n    action_form_readonly_fields_inline_stacked_inline_formset: List[str] = None\n```\n\n----------------------------------------\n\nTITLE: SQLModel Validation Implementation\nDESCRIPTION: Shows how to implement validation using SQLModel by defining models with Field validators and custom validation methods.\nSOURCE: https://github.com/jowilf/starlette-admin/blob/main/docs/user-guide/validations/index.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlmodel import SQLModel, Field\nfrom pydantic import validator\n\n\nclass Post(SQLModel, table=True):\n    id: Optional[int] = Field(primary_key=True)\n    title: str = Field()\n    content: str = Field(min_length=10)\n    views: int = Field(multiple_of=4)\n\n    @validator('title')\n    def title_must_contain_space(cls, v):\n        if ' ' not in v:\n            raise ValueError('title must contain a space')\n        return v.title()\n```\n\n----------------------------------------\n\nTITLE: Listing Python Dependencies for Starlette Admin Project\nDESCRIPTION: This snippet lists the required Python packages for the Starlette Admin project. It includes Starlette Admin itself, Uvicorn for ASGI server, ODMantic for ODM, and Pydantic with email validation support.\nSOURCE: https://github.com/jowilf/starlette-admin/blob/main/examples/tutorials/basic/odmantic/requirements.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nstarlette-admin\nuvicorn\nodmantic\npydantic[email]\n```\n\n----------------------------------------\n\nTITLE: Mounting Starlette Admin to Application\nDESCRIPTION: Shows how to mount the configured admin interface to a Starlette or FastAPI application for different database backends.\nSOURCE: https://github.com/jowilf/starlette-admin/blob/main/docs/user-guide/getting-started/index.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import create_engine\nfrom starlette.applications import Starlette\nfrom starlette_admin.contrib.sqla import Admin, ModelView\n\nfrom .models import Post, User\n\nengine = create_engine(\"sqlite:///test.db\", connect_args={\"check_same_thread\": False})\n\napp = Starlette() # FastAPI()\n\nadmin = Admin(engine)\n\nadmin.add_view(ModelView(User))\nadmin.add_view(ModelView(Post))\n\nadmin.mount_to(app)\n\n```\n\n----------------------------------------\n\nTITLE: Odmantic Model Validation\nDESCRIPTION: Demonstrates validation implementation in Odmantic using EmbeddedModel and Model with Field validators and custom types.\nSOURCE: https://github.com/jowilf/starlette-admin/blob/main/docs/user-guide/validations/index.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import List, Optional\n\nfrom odmantic import EmbeddedModel, Field, Model\nfrom pydantic import EmailStr\n\n\nclass Address(EmbeddedModel):\n    street: str = Field(min_length=3)\n    city: str = Field(min_length=3)\n    state: Optional[str]\n    zipcode: Optional[str]\n\n\nclass Author(Model):\n    first_name: str = Field(min_length=3)\n    last_name: str = Field(min_length=3)\n    email: Optional[EmailStr]\n    addresses: List[Address] = Field(default_factory=list)\n```\n\n----------------------------------------\n\nTITLE: Package Dependencies List\nDESCRIPTION: Lists the main project dependencies: Starlette for the web framework, SQLAlchemy for database ORM, and Uvicorn for ASGI server implementation\nSOURCE: https://github.com/jowilf/starlette-admin/blob/main/examples/tutorials/basic/sqla/requirements.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nstarlette-admin\nsqlalchemy\nuvicorn\n```\n\n----------------------------------------\n\nTITLE: Implementing Full PostView Class in Starlette-Admin\nDESCRIPTION: This comprehensive example shows a complete implementation of the PostView class, including the Post model, database operations, and all required CRUD methods.\nSOURCE: https://github.com/jowilf/starlette-admin/blob/main/docs/advanced/base-model-view/index.md#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom dataclasses import dataclass\nfrom typing import Any, Dict, Iterable, List, Optional, Union\n\nfrom starlette.requests import Request\nfrom starlette_admin import IntegerField, StringField, TagsField, TextAreaField\nfrom starlette_admin.exceptions import FormValidationError\nfrom starlette_admin.views import BaseModelView\n\n\n@dataclass\nclass Post:\n    id: int\n    title: str\n    content: str\n    tags: List[str]\n\n    def is_valid_for_term(self, term):\n        return (\n            str(term).lower() in self.title.lower()\n            or str(term).lower() in self.content.lower()\n            or any([str(term).lower() in tag.lower() for tag in self.tags])\n        )\n\n    def update(self, data: Dict):\n        for key, value in data.items():\n            if hasattr(self, key):\n                setattr(self, key, value)\n\n\ndb: Dict[int, Post] = dict()\nnext_id = 1\n\n\ndef filter_values(values: Iterable[Post], term):\n    filtered_values = []\n    for value in values:\n        if value.is_valid_for_term(term):\n            filtered_values.append(value)\n    return filtered_values\n\n\nclass PostView(BaseModelView):\n    identity = \"post\"\n    name = \"Post\"\n    label = \"Blog Posts\"\n    icon = \"fa fa-blog\"\n    pk_attr = \"id\"\n    fields = [\n        IntegerField(\"id\"),\n        StringField(\"title\"),\n        TextAreaField(\"content\"),\n        TagsField(\"tags\"),\n    ]\n    sortable_fields = (\"id\", \"title\", \"content\")\n    search_builder = False\n\n    async def count(\n        self,\n        request: Request,\n        where: Union[Dict[str, Any], str, None] = None,\n    ) -> int:\n        values = list(db.values())\n        if where is not None:\n            values = filter_values(values, where)\n        return len(values)\n\n    async def find_all(\n        self,\n        request: Request,\n        skip: int = 0,\n        limit: int = 100,\n        where: Union[Dict[str, Any], str, None] = None,\n        order_by: Optional[List[str]] = None,\n    ) -> List[Any]:\n        values = list(db.values())\n        if order_by is not None:\n            assert len(order_by) < 2, \"Not supported\"\n            if len(order_by) == 1:\n                key, dir = order_by[0].split(maxsplit=1)\n                values.sort(key=lambda v: getattr(v, key), reverse=(dir == \"desc\"))\n\n        if where is not None and isinstance(where, (str, int)):\n            values = filter_values(values, where)\n        if limit > 0:\n            return values[skip : skip + limit]\n        return values[skip:]\n\n    async def find_by_pk(self, request: Request, pk):\n        return db.get(int(pk), None)\n\n    async def find_by_pks(self, request: Request, pks):\n        return [db.get(int(pk)) for pk in pks]\n\n    async def validate_data(self, data: Dict):\n        errors = {}\n        if data[\"title\"] is None or len(data[\"title\"]) < 3:\n            errors[\"title\"] = \"Ensure title has at least 03 characters\"\n        if data[\"tags\"] is None or len(data[\"tags\"]) < 1:\n            errors[\"tags\"] = \"You need at least one tag\"\n        if len(errors) > 0:\n            raise FormValidationError(errors)\n\n    async def create(self, request: Request, data: Dict):\n        await self.validate_data(data)\n        global next_id\n        obj = Post(id=next_id, **data)\n        db[next_id] = obj\n        next_id += 1\n        return obj\n\n    async def edit(self, request: Request, pk, data: Dict):\n        await self.validate_data(data)\n        db[int(pk)].update(data)\n        return db[int(pk)]\n\n    async def delete(self, request: Request, pks: List[Any]) -> Optional[int]:\n        cnt = 0\n        for pk in pks:\n            value = await self.find_by_pk(request, pk)\n            if value is not None:\n                del db[int(pk)]\n                cnt += 1\n        return cnt\n```\n\n----------------------------------------\n\nTITLE: SQLModel Todo Model Definition\nDESCRIPTION: Definition of Todo model using SQLModel with id, title, and done fields\nSOURCE: https://github.com/jowilf/starlette-admin/blob/main/docs/tutorials/basic/index.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Optional\n\nfrom sqlmodel import Field, SQLModel\n\n\nclass Todo(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    title: str\n    done: bool\n```\n\n----------------------------------------\n\nTITLE: Running Code Linting\nDESCRIPTION: Command to perform linting checks using mypy and ruff via Hatch to enforce type safety and code quality.\nSOURCE: https://github.com/jowilf/starlette-admin/blob/main/CONTRIBUTING.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nhatch run test:lint\n```\n\n----------------------------------------\n\nTITLE: Defining Authentication Components in Starlette-Admin (Python)\nDESCRIPTION: This code snippet defines the structure for documenting authentication-related components in the Starlette-Admin project. It specifies the BaseAuthProvider and AuthProvider classes, as well as the login_not_required function or decorator.\nSOURCE: https://github.com/jowilf/starlette-admin/blob/main/docs/api/auth/index.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n:::starlette_admin.auth\n    options:\n        show_root_heading: true\n        members:\n            - BaseAuthProvider\n            - AuthProvider\n            - login_not_required\n```\n\n----------------------------------------\n\nTITLE: ODMantic Todo Model Definition\nDESCRIPTION: Definition of Todo model using ODMantic with title and done fields\nSOURCE: https://github.com/jowilf/starlette-admin/blob/main/docs/tutorials/basic/index.md#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom odmantic import Model\n\n\nclass Todo(Model):\n    title: str\n    done: bool\n```\n\n----------------------------------------\n\nTITLE: Running Test Suite\nDESCRIPTION: Command to run the pytest test suite via Hatch to validate code changes and ensure stability.\nSOURCE: https://github.com/jowilf/starlette-admin/blob/main/CONTRIBUTING.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nhatch run test:all\n```\n\n----------------------------------------\n\nTITLE: Custom Form Template HTML\nDESCRIPTION: HTML template for custom form rendering with field validation and help text support.\nSOURCE: https://github.com/jowilf/starlette-admin/blob/main/docs/advanced/custom-field/index.md#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"{%if error%}is-invalid{%endif%}\">\n    <input id=\"{{field.id}}\" name=\"{{field.id}}\" ... />\n    {% if field.help_text %}\n    <small class=\"form-hint\">{{field.help_text}}</small>\n    {%endif%}\n</div>\n{%if error %}\n<div class=\"invalid-feedback\">{{error}}</div>\n{%endif%}\n```\n\n----------------------------------------\n\nTITLE: Configuring Uvicorn for Proxy Server Deployment\nDESCRIPTION: Command to start a Uvicorn server with proper proxy header handling and forwarded IP configuration for deployments behind proxy servers like Traefik or Nginx. This ensures static files are properly rendered as HTTPS links.\nSOURCE: https://github.com/jowilf/starlette-admin/blob/main/docs/deployment/index.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nuvicorn app.main:app --forwarded-allow-ips='*' --proxy-headers\n```\n\n----------------------------------------\n\nTITLE: Listing Alternative Admin Frameworks in Markdown\nDESCRIPTION: This snippet uses Markdown syntax to create a bulleted list of alternative admin frameworks. Each item includes a link to the project's GitHub repository and a brief description of its purpose or key features.\nSOURCE: https://github.com/jowilf/starlette-admin/blob/main/docs/alternatives/index.md#2025-04-22_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n* [Flask-Admin:](https://github.com/flask-admin/flask-admin) Simple and extensible administrative interface framework for Flask. The main goal of this project is to provide similar tool for Starlette/FastApi.\n* [FastApi-Admin:](https://github.com/fastapi-admin/fastapi-admin) A fast admin dashboard based on FastAPI and TortoiseORM.\n* [sqladmin:](https://github.com/aminalaee/sqladmin) SQLAlchemy Admin for FastAPI and Starlette\n```\n\n----------------------------------------\n\nTITLE: SQLAlchemy Todo Model Definition\nDESCRIPTION: Definition of Todo model using SQLAlchemy ORM with id, title, and done fields\nSOURCE: https://github.com/jowilf/starlette-admin/blob/main/docs/tutorials/basic/index.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy.orm import DeclarativeBase, Mapped, mapped_column\n\n\nclass Base(DeclarativeBase):\n    pass\n\n\nclass Todo(Base):\n    __tablename__ = \"todo\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    title: Mapped[str]\n    done: Mapped[bool]\n```\n\n----------------------------------------\n\nTITLE: Listing Core Dependencies for Starlette Admin Project\nDESCRIPTION: Lists the main Python packages required for a Starlette Admin project: starlette-admin for the admin interface, SQLAlchemy for database operations, and Uvicorn for ASGI server implementation.\nSOURCE: https://github.com/jowilf/starlette-admin/blob/main/examples/sqla/requirements.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nstarlette-admin\nsqlalchemy\nuvicorn\n```\n\n----------------------------------------\n\nTITLE: Installing Starlette Admin via pip\nDESCRIPTION: Command to install starlette-admin using pip package manager.\nSOURCE: https://github.com/jowilf/starlette-admin/blob/main/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ pip install starlette-admin\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Templates in ModelView\nDESCRIPTION: Shows how to override default templates with custom templates for different views.\nSOURCE: https://github.com/jowilf/starlette-admin/blob/main/docs/user-guide/configurations/modelview/index.md#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclass PostView(ModelView):\n    detail_template = \"post_detail.html\"\n```\n\n----------------------------------------\n\nTITLE: Defining Dependencies for Starlette Admin Project\nDESCRIPTION: Lists the core package dependencies required for running a Starlette Admin project. Includes Starlette Admin framework, SQLAlchemy ORM with version 2 or higher, and Uvicorn ASGI server.\nSOURCE: https://github.com/jowilf/starlette-admin/blob/main/examples/sqla_multiple_pks/requirements.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nstarlette-admin\nsqlalchemy>=2\nuvicorn\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies\nDESCRIPTION: Command to install the required packages for the SQLAlchemy example using pip.\nSOURCE: https://github.com/jowilf/starlette-admin/blob/main/examples/sqla/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npip install -r 'examples/sqla/requirements.txt'\n```\n\n----------------------------------------\n\nTITLE: Defining a Post Model in Python\nDESCRIPTION: This snippet defines a simple Post model using Python's dataclass. It includes fields for id, title, content, and tags.\nSOURCE: https://github.com/jowilf/starlette-admin/blob/main/docs/advanced/base-model-view/index.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom dataclasses import dataclass\nfrom typing import List\n\n\n@dataclass\nclass Post:\n    id: int\n    title: str\n    content: str\n    tags: List[str]\n\n```\n\n----------------------------------------\n\nTITLE: Python Package Dependencies\nDESCRIPTION: List of required Python packages for a Starlette admin project. Includes the main admin interface package, database ORM, and ASGI server.\nSOURCE: https://github.com/jowilf/starlette-admin/blob/main/examples/tutorials/basic/sqlmodel/requirements.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nstarlette-admin\nsqlmodel\nuvicorn\n```\n\n----------------------------------------\n\nTITLE: Installing Required Dependencies for ODMantic Example\nDESCRIPTION: Command to install the necessary packages for the ODMantic integration example using pip.\nSOURCE: https://github.com/jowilf/starlette-admin/blob/main/examples/odmantic/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npip install -r 'examples/odmantic/requirements.txt'\n```\n\n----------------------------------------\n\nTITLE: Specifying Fields for PostView in Starlette-Admin\nDESCRIPTION: This snippet demonstrates how to define fields for the PostView class using various field types provided by Starlette-Admin.\nSOURCE: https://github.com/jowilf/starlette-admin/blob/main/docs/advanced/base-model-view/index.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom starlette_admin import BaseModelView\nfrom starlette_admin import IntegerField, StringField, TagsField, TextAreaField\n\nclass PostView(BaseModelView):\n    fields = [\n        IntegerField(\"id\"),\n        StringField(\"title\"),\n        TextAreaField(\"content\"),\n        TagsField(\"tags\"),\n    ]\n```\n\n----------------------------------------\n\nTITLE: Python Dependencies List\nDESCRIPTION: Core package dependencies required for running a Starlette Admin application with SQLModel and Pydantic email validation. Includes Uvicorn as the ASGI server implementation.\nSOURCE: https://github.com/jowilf/starlette-admin/blob/main/examples/sqlmodel/requirements.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nstarlette-admin\nuvicorn\nsqlmodel\npydantic[email]\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies\nDESCRIPTION: Command to install required packages for the SQLAlchemy-Pydantic example\nSOURCE: https://github.com/jowilf/starlette-admin/blob/main/examples/sqla-pydantic/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npip install -r 'examples/sqla-pydantic/requirements.txt'\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic PostView Class in Starlette-Admin\nDESCRIPTION: This snippet shows the initial setup of a PostView class that extends BaseModelView in Starlette-Admin.\nSOURCE: https://github.com/jowilf/starlette-admin/blob/main/docs/advanced/base-model-view/index.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom starlette_admin import BaseModelView\n\n\nclass PostView(BaseModelView):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Listing Dependencies for Starlette Admin Project\nDESCRIPTION: This snippet enumerates the core dependencies needed for the Starlette Admin project. It includes the main framework, a server, an ODM, and a data validation library.\nSOURCE: https://github.com/jowilf/starlette-admin/blob/main/examples/odmantic/requirements.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nstarlette-admin\nuvicorn\nodmantic\npydantic[email]\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies\nDESCRIPTION: Command to install the required Python packages for the Authlib example.\nSOURCE: https://github.com/jowilf/starlette-admin/blob/main/examples/authlib/README.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npip install -r 'examples/authlib/requirements.txt'\n```\n\n----------------------------------------\n\nTITLE: Defining Primary Key for PostView in Starlette-Admin\nDESCRIPTION: This snippet shows how to set the primary key attribute for the PostView class.\nSOURCE: https://github.com/jowilf/starlette-admin/blob/main/docs/advanced/base-model-view/index.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom starlette_admin import BaseModelView\n\n\nclass PostView(BaseModelView):\n    pk_attr = \"id\"\n```\n\n----------------------------------------\n\nTITLE: Installing Starlette-Admin using pip\nDESCRIPTION: Command to install Starlette-Admin using pip package manager.\nSOURCE: https://github.com/jowilf/starlette-admin/blob/main/docs/index.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ pip install starlette-admin\n```\n\n----------------------------------------\n\nTITLE: Listing Dependencies for Starlette Admin Project\nDESCRIPTION: This snippet lists the required Python packages for the Starlette Admin project. It includes Starlette Admin with i18n support, SQLAlchemy for ORM functionality, and Uvicorn for serving the ASGI application.\nSOURCE: https://github.com/jowilf/starlette-admin/blob/main/examples/babel/requirements.txt#2025-04-22_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\nstarlette-admin[i18n]\nsqlalchemy\nuvicorn\n```\n\n----------------------------------------\n\nTITLE: Custom Field with Render Function Key\nDESCRIPTION: Extends the CustomField class to include a render function key for JavaScript integration.\nSOURCE: https://github.com/jowilf/starlette-admin/blob/main/docs/advanced/custom-field/index.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom starlette_admin import BaseField\nfrom dataclasses import dataclass\n\n@dataclass\nclass CustomField(BaseField):\n    render_function_key: str = \"mycustomkey\"\n```\n\n----------------------------------------\n\nTITLE: Installing Starlette-Admin using Poetry\nDESCRIPTION: Command to install Starlette-Admin using Poetry package manager.\nSOURCE: https://github.com/jowilf/starlette-admin/blob/main/docs/index.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ poetry add starlette-admin\n```\n\n----------------------------------------\n\nTITLE: Running the Application Server\nDESCRIPTION: Command to start the Uvicorn server with the admin application\nSOURCE: https://github.com/jowilf/starlette-admin/blob/main/docs/tutorials/basic/index.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nuvicorn main:app\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Select2 Representation\nDESCRIPTION: Demonstrates how to customize object representation in Select2 widgets using __admin_select2_repr__ method.\nSOURCE: https://github.com/jowilf/starlette-admin/blob/main/docs/user-guide/configurations/modelview/index.md#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nclass User:\n    id: int\n    name: str\n    photo_url: str\n\n    async def __admin_select2_repr__(self, request: Request) -> str:\n        return f'<div><img src=\"{escape(photo_url)}\"><span>{escape(self.name)}</span></div>'\n```\n\n----------------------------------------\n\nTITLE: Installing Starlette Admin via Poetry\nDESCRIPTION: Command to install starlette-admin using Poetry package manager.\nSOURCE: https://github.com/jowilf/starlette-admin/blob/main/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ poetry add starlette-admin\n```\n\n----------------------------------------\n\nTITLE: Running the Example Application\nDESCRIPTION: Command to start the Starlette application using uvicorn server\nSOURCE: https://github.com/jowilf/starlette-admin/blob/main/examples/sqla_multiple_pks/README.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nuvicorn examples.sqla_multiple_pks.app:app\n```\n\n----------------------------------------\n\nTITLE: Configuring Sortable Fields in SQLAlchemy ModelView\nDESCRIPTION: Example showing how to configure custom sortable field mapping in a SQLAlchemy ModelView to sort posts by related user age.\nSOURCE: https://github.com/jowilf/starlette-admin/blob/main/docs/changelog/index.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass Post(Base):\n    __tablename__ = \"post\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    title: Mapped[str] = mapped_column()\n    user_id: Mapped[int] = mapped_column(ForeignKey(\"user.id\"))\n    user: Mapped[User] = relationship(back_populates=\"posts\")\n\nclass PostView(ModelView):\n    sortable_field = [\"id\", \"title\", \"user\"]\n    sortable_field_mapping = {\n        \"user\": User.age,  # Sort by the age of the related user\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring Starlette Admin Actions Module in YAML\nDESCRIPTION: This YAML configuration specifies options for the starlette_admin.actions module. It sets the display of the root heading and lists the members to be included: action, row_action, and link_row_action.\nSOURCE: https://github.com/jowilf/starlette-admin/blob/main/docs/api/actions/index.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n:::starlette_admin.actions\n    options:\n        show_root_heading: true\n        members:\n            - action\n            - row_action\n            - link_row_action\n```\n\n----------------------------------------\n\nTITLE: Running the Starlette Admin Application\nDESCRIPTION: Command to start the Starlette Admin application using Uvicorn, pointing to the custom actions example app.\nSOURCE: https://github.com/jowilf/starlette-admin/blob/main/examples/custom_actions/README.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nuvicorn examples.custom_actions.app:app\n```\n\n----------------------------------------\n\nTITLE: Custom Display Template HTML\nDESCRIPTION: Simple HTML template for displaying field values on the detail page.\nSOURCE: https://github.com/jowilf/starlette-admin/blob/main/docs/advanced/custom-field/index.md#2025-04-22_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<span>Hello {{data}}</span>\n```\n\n----------------------------------------\n\nTITLE: Running the SQLAlchemy Example Application\nDESCRIPTION: Command to start the example application using Uvicorn as the ASGI server.\nSOURCE: https://github.com/jowilf/starlette-admin/blob/main/examples/sqla/README.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nuvicorn examples.sqla.app:app\n```\n\n----------------------------------------\n\nTITLE: Running the Application with Uvicorn\nDESCRIPTION: Command to run the example application using Uvicorn web server, pointing to the app module in the custom-backend example directory.\nSOURCE: https://github.com/jowilf/starlette-admin/blob/main/examples/custom-backend/README.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nuvicorn examples.custom-backend.app:app\n```\n\n----------------------------------------\n\nTITLE: Configuring DataTables State Saving in ModelView\nDESCRIPTION: Example showing how to enable DataTables state saving functionality in a ModelView.\nSOURCE: https://github.com/jowilf/starlette-admin/blob/main/docs/changelog/index.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass MyModelView(ModelView):\n    save_state = True\n```\n\n----------------------------------------\n\nTITLE: Running Starlette Admin Application with MongoEngine\nDESCRIPTION: Command to start the Starlette Admin application with MongoEngine integration using Uvicorn.\nSOURCE: https://github.com/jowilf/starlette-admin/blob/main/examples/mongoengine/README.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nuvicorn examples.mongoengine.app:app\n```\n\n----------------------------------------\n\nTITLE: Creating Virtual Environment - Windows Setup\nDESCRIPTION: Commands to create and activate a virtual environment on Windows systems\nSOURCE: https://github.com/jowilf/starlette-admin/blob/main/docs/tutorials/basic/index.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npython -m venv env\nenv\\Scripts\\activate\n```\n\n----------------------------------------\n\nTITLE: Python Package Dependencies\nDESCRIPTION: Core Python packages needed to run a Starlette Admin application with SQLAlchemy ORM integration. Includes the main web framework (starlette-admin), ASGI server (uvicorn), database ORM (sqlalchemy), additional database utilities (sqlalchemy-utils), and data validation (pydantic with email support).\nSOURCE: https://github.com/jowilf/starlette-admin/blob/main/examples/sqla-pydantic/requirements.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nstarlette-admin\nuvicorn\nsqlalchemy\nsqlalchemy-utils\npydantic[email]\n```\n\n----------------------------------------\n\nTITLE: Running the ODMantic Example Application with Uvicorn\nDESCRIPTION: Command to start the example application using the Uvicorn ASGI server.\nSOURCE: https://github.com/jowilf/starlette-admin/blob/main/examples/odmantic/README.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nuvicorn examples.odmantic.app:app\n```\n\n----------------------------------------\n\nTITLE: Creating and Activating Virtual Environment\nDESCRIPTION: This snippet demonstrates how to create a Python virtual environment and activate it for isolated package management.\nSOURCE: https://github.com/jowilf/starlette-admin/blob/main/examples/sqlmodel/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npython3 -m venv env\nsource env/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Listing Dependencies for Starlette Admin Project\nDESCRIPTION: A requirements-style list of the core dependencies needed for a Starlette Admin project. It includes starlette-admin as the main framework, SQLAlchemy for ORM functionality, and Uvicorn as the ASGI server.\nSOURCE: https://github.com/jowilf/starlette-admin/blob/main/examples/custom_actions/requirements.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nstarlette-admin\nsqlalchemy\nuvicorn\n```\n\n----------------------------------------\n\nTITLE: Running Starlette Admin Application with SQLModel\nDESCRIPTION: This snippet demonstrates how to run the Starlette Admin application with SQLModel integration using Uvicorn ASGI server.\nSOURCE: https://github.com/jowilf/starlette-admin/blob/main/examples/sqlmodel/README.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nuvicorn examples.sqlmodel.app:app\n```\n\n----------------------------------------\n\nTITLE: Creating and Activating Virtual Environment\nDESCRIPTION: These commands create a new Python virtual environment named 'env' and activate it for the current shell session.\nSOURCE: https://github.com/jowilf/starlette-admin/blob/main/examples/sqla-file/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npython3 -m venv env\nsource env/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Configuring Auth0 Credentials\nDESCRIPTION: Python configuration code for setting up Auth0 credentials including client ID, secret, and domain. These can be set directly in the config file or through environment variables.\nSOURCE: https://github.com/jowilf/starlette-admin/blob/main/examples/authlib/README.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nAUTH0_CLIENT_ID = os.getenv(\"AUTH0_CLIENT_ID\", \"your-auth0-client-id\")\nAUTH0_CLIENT_SECRET = os.getenv(\"AUTH0_CLIENT_SECRET\", \"your-auth0-client-secret\")\nAUTH0_DOMAIN = os.getenv(\"AUTH0_DOMAIN\", \"your-auth0-domain\")\n```\n\n----------------------------------------\n\nTITLE: Running the Starlette Admin Application\nDESCRIPTION: This command starts the Starlette Admin application using Uvicorn, specifying the app module path.\nSOURCE: https://github.com/jowilf/starlette-admin/blob/main/examples/sqla-file/README.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nuvicorn examples.sqla-file.app:app\n```\n\n----------------------------------------\n\nTITLE: Creating Python Virtual Environment\nDESCRIPTION: Commands to create and activate a Python virtual environment for project isolation\nSOURCE: https://github.com/jowilf/starlette-admin/blob/main/examples/sqla_multiple_pks/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npython3 -m venv env\nsource env/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Datatables i18n JSON Configuration\nDESCRIPTION: Example JSON configuration for French localization of datatables components\nSOURCE: https://github.com/jowilf/starlette-admin/blob/main/CONTRIBUTING.md#2025-04-22_snippet_7\n\nLANGUAGE: json5\nCODE:\n```\n{\n    \"starlette-admin\": {\n        \"buttons\": {\n            \"export\": \"Export\"\n        },\n        \"conditions\": {\n            \"false\": \"Faux\",\n            \"true\": \"Vrai\",\n            \"empty\": \"Vide\",\n            \"notEmpty\": \"Non vide\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running the Demo Application\nDESCRIPTION: Command to start the application using Uvicorn ASGI server\nSOURCE: https://github.com/jowilf/starlette-admin/blob/main/examples/sqla-pydantic/README.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nuvicorn examples.sqla-pydantic.app:app\n```\n\n----------------------------------------\n\nTITLE: Cloning Starlette Admin Repository\nDESCRIPTION: Commands to clone the Starlette Admin repository and navigate to its directory\nSOURCE: https://github.com/jowilf/starlette-admin/blob/main/examples/babel/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/jowilf/starlette-admin.git\ncd starlette-admin\n```\n\n----------------------------------------\n\nTITLE: Running Starlette Admin Application\nDESCRIPTION: Command to start the Starlette Admin application using uvicorn server.\nSOURCE: https://github.com/jowilf/starlette-admin/blob/main/examples/auth/README.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nuvicorn examples.auth.app:app\n```\n\n----------------------------------------\n\nTITLE: Cloning Starlette Admin Repository\nDESCRIPTION: Commands to clone the Starlette Admin repository and navigate to the project directory.\nSOURCE: https://github.com/jowilf/starlette-admin/blob/main/examples/sqla/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/jowilf/starlette-admin.git\ncd starlette-admin\n```\n\n----------------------------------------\n\nTITLE: Cloning Starlette Admin Repository\nDESCRIPTION: Commands to clone the Starlette Admin repository and navigate to the project directory.\nSOURCE: https://github.com/jowilf/starlette-admin/blob/main/examples/mongoengine/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/jowilf/starlette-admin.git\ncd starlette-admin\n```\n\n----------------------------------------\n\nTITLE: Running the Starlette Admin Application\nDESCRIPTION: Command to start the application using Uvicorn server, pointing to the Authlib example application.\nSOURCE: https://github.com/jowilf/starlette-admin/blob/main/examples/authlib/README.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nuvicorn examples.authlib.app:app\n```\n\n----------------------------------------\n\nTITLE: Cloning Starlette Admin Repository\nDESCRIPTION: Commands to clone the Starlette Admin repository and navigate to the project directory\nSOURCE: https://github.com/jowilf/starlette-admin/blob/main/examples/sqla_multiple_pks/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/jowilf/starlette-admin.git\ncd starlette-admin\n```\n\n----------------------------------------\n\nTITLE: Cloning Starlette Admin Repository\nDESCRIPTION: Commands to clone the Starlette Admin repository and navigate to the project directory\nSOURCE: https://github.com/jowilf/starlette-admin/blob/main/examples/sqla-pydantic/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/jowilf/starlette-admin.git\ncd starlette-admin\n```\n\n----------------------------------------\n\nTITLE: Running the Starlette Admin Application\nDESCRIPTION: Command to start the application using Uvicorn server with the Babel example\nSOURCE: https://github.com/jowilf/starlette-admin/blob/main/examples/babel/README.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nuvicorn examples.babel.app:app\n```\n\n----------------------------------------\n\nTITLE: Cloning Starlette Admin Repository\nDESCRIPTION: This command clones the Starlette Admin repository from GitHub and changes the current directory to the project root.\nSOURCE: https://github.com/jowilf/starlette-admin/blob/main/examples/sqla-file/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/jowilf/starlette-admin.git\ncd starlette-admin\n```\n\n----------------------------------------\n\nTITLE: Cloning Starlette Admin Repository\nDESCRIPTION: Commands to clone the Starlette Admin repository and navigate to the project directory.\nSOURCE: https://github.com/jowilf/starlette-admin/blob/main/examples/authlib/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/jowilf/starlette-admin.git\ncd starlette-admin\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies\nDESCRIPTION: Command to install the required packages for the custom actions example using pip and the requirements file.\nSOURCE: https://github.com/jowilf/starlette-admin/blob/main/examples/custom_actions/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npip install -r 'examples/custom_actions/requirements.txt'\n```\n\n----------------------------------------\n\nTITLE: Cloning Starlette Admin Repository\nDESCRIPTION: This snippet shows how to clone the Starlette Admin repository and navigate to the project directory.\nSOURCE: https://github.com/jowilf/starlette-admin/blob/main/examples/sqlmodel/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/jowilf/starlette-admin.git\ncd starlette-admin\n```\n\n----------------------------------------\n\nTITLE: Installing Project Requirements\nDESCRIPTION: Command to install the required dependencies for the MongoEngine example using pip.\nSOURCE: https://github.com/jowilf/starlette-admin/blob/main/examples/mongoengine/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npip install -r 'examples/mongoengine/requirements.txt'\n```\n\n----------------------------------------\n\nTITLE: Cloning the starlette-admin Repository\nDESCRIPTION: Commands to clone the starlette-admin repository and navigate to the project directory.\nSOURCE: https://github.com/jowilf/starlette-admin/blob/main/examples/odmantic/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/jowilf/starlette-admin.git\ncd starlette-admin\n```\n\n----------------------------------------\n\nTITLE: Installing Required Dependencies\nDESCRIPTION: Command to install the required dependencies for the custom backend example from the requirements file.\nSOURCE: https://github.com/jowilf/starlette-admin/blob/main/examples/custom-backend/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npip install -r 'examples/custom-backend/requirements.txt'\n```\n\n----------------------------------------\n\nTITLE: Cloning the Starlette Admin Repository\nDESCRIPTION: Commands to clone the Starlette Admin repository from GitHub and navigate to the project directory.\nSOURCE: https://github.com/jowilf/starlette-admin/blob/main/examples/custom-backend/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/jowilf/starlette-admin.git\ncd starlette-admin\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies\nDESCRIPTION: Command to install the required packages for the authentication example from requirements file.\nSOURCE: https://github.com/jowilf/starlette-admin/blob/main/examples/auth/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npip install -r 'examples/auth/requirements.txt'\n```\n\n----------------------------------------\n\nTITLE: Creating and Activating Virtual Environment\nDESCRIPTION: Commands to create a Python virtual environment and activate it for the project.\nSOURCE: https://github.com/jowilf/starlette-admin/blob/main/examples/sqla/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npython3 -m venv env\nsource env/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies\nDESCRIPTION: Command to install required packages for the Babel translation example\nSOURCE: https://github.com/jowilf/starlette-admin/blob/main/examples/babel/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npip install -r 'examples/babel/requirements.txt'\n```\n\n----------------------------------------\n\nTITLE: Creating Python Virtual Environment\nDESCRIPTION: Commands to create and activate a Python virtual environment for project isolation\nSOURCE: https://github.com/jowilf/starlette-admin/blob/main/examples/sqla-pydantic/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npython3 -m venv env\nsource env/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Running Code Formatting\nDESCRIPTION: Command to run code formatting using black and other tools via Hatch to maintain code consistency.\nSOURCE: https://github.com/jowilf/starlette-admin/blob/main/CONTRIBUTING.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nhatch run format\n```\n\n----------------------------------------\n\nTITLE: Creating Python Virtual Environment\nDESCRIPTION: Commands to create and activate a Python virtual environment for isolated package management.\nSOURCE: https://github.com/jowilf/starlette-admin/blob/main/examples/auth/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npython3 -m venv env\nsource env/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Creating and Activating Virtual Environment\nDESCRIPTION: Commands to create a Python virtual environment named 'env' and activate it for isolated dependency management.\nSOURCE: https://github.com/jowilf/starlette-admin/blob/main/examples/custom_actions/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npython3 -m venv env\nsource env/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Creating and Activating Virtual Environment\nDESCRIPTION: Commands to create a Python virtual environment and activate it for the project.\nSOURCE: https://github.com/jowilf/starlette-admin/blob/main/examples/mongoengine/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npython3 -m venv env\nsource env/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Setting Up Python Virtual Environment\nDESCRIPTION: Commands to create and activate a Python virtual environment for isolating project dependencies.\nSOURCE: https://github.com/jowilf/starlette-admin/blob/main/examples/authlib/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npython3 -m venv env\nsource env/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Creating and Activating a Python Virtual Environment\nDESCRIPTION: Commands to create a Python virtual environment using venv and activate it for isolation.\nSOURCE: https://github.com/jowilf/starlette-admin/blob/main/examples/odmantic/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npython3 -m venv env\nsource env/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Creating Python Virtual Environment\nDESCRIPTION: Commands to create and activate a Python virtual environment for project isolation\nSOURCE: https://github.com/jowilf/starlette-admin/blob/main/examples/babel/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npython3 -m venv env\nsource env/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies\nDESCRIPTION: Command to install project dependencies from requirements.txt file\nSOURCE: https://github.com/jowilf/starlette-admin/blob/main/docs/tutorials/basic/index.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Creating a Python Virtual Environment\nDESCRIPTION: Commands to create and activate a Python virtual environment for isolating dependencies.\nSOURCE: https://github.com/jowilf/starlette-admin/blob/main/examples/custom-backend/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npython3 -m venv env\nsource env/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies\nDESCRIPTION: Command to install required packages for the multiple primary keys example\nSOURCE: https://github.com/jowilf/starlette-admin/blob/main/examples/sqla_multiple_pks/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npip install -r 'examples/sqla_multiple_pks/requirements.txt'\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies\nDESCRIPTION: This command installs the required Python packages for the SQLAlchemy-File example from the specified requirements file.\nSOURCE: https://github.com/jowilf/starlette-admin/blob/main/examples/sqla-file/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npip install -r 'examples/sqla-file/requirements.txt'\n```\n\n----------------------------------------\n\nTITLE: Installing Pre-commit Hooks in Shell\nDESCRIPTION: Command to install pre-commit hooks in git to ensure code formatting before commits\nSOURCE: https://github.com/jowilf/starlette-admin/blob/main/CONTRIBUTING.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\npre-commit install\n```\n\n----------------------------------------\n\nTITLE: Installing Requirements for SQLModel Example\nDESCRIPTION: This snippet shows how to install the required packages for the SQLModel integration example using pip.\nSOURCE: https://github.com/jowilf/starlette-admin/blob/main/examples/sqlmodel/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npip install -r 'examples/sqlmodel/requirements.txt'\n```\n\n----------------------------------------\n\nTITLE: Compiling Message Catalogs in Shell\nDESCRIPTION: Command to compile POT files into binary MO files for a specific locale\nSOURCE: https://github.com/jowilf/starlette-admin/blob/main/CONTRIBUTING.md#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nhatch run i18n:compile -l <locale>\n```\n\n----------------------------------------\n\nTITLE: Initializing New Locale in Shell\nDESCRIPTION: Command to initialize a new locale for internationalization using the hatch run command\nSOURCE: https://github.com/jowilf/starlette-admin/blob/main/CONTRIBUTING.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nhatch run i18n:init --locale <locale>\n```\n\n----------------------------------------\n\nTITLE: Serving Documentation Locally in Shell\nDESCRIPTION: Command to run a local server for previewing documentation using mkdocs\nSOURCE: https://github.com/jowilf/starlette-admin/blob/main/CONTRIBUTING.md#2025-04-22_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nhatch run docs:serve\n```\n\n----------------------------------------\n\nTITLE: Sample PO File Translation\nDESCRIPTION: Example of translating messages in a PO file for French localization\nSOURCE: https://github.com/jowilf/starlette-admin/blob/main/CONTRIBUTING.md#2025-04-22_snippet_6\n\nLANGUAGE: po\nCODE:\n```\nmsgid \"Are you sure you want to delete selected items?\"\nmsgstr \"Êtes-vous sûr de vouloir supprimer ces éléments?\"\n```\n\n----------------------------------------\n\nTITLE: Installing Hatch Package Manager\nDESCRIPTION: Command to install the Hatch package manager globally using pip for managing dependencies and packaging of starlette-admin.\nSOURCE: https://github.com/jowilf/starlette-admin/blob/main/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip install hatch\n```\n\n----------------------------------------\n\nTITLE: Cloning Starlette Admin Repository\nDESCRIPTION: Commands to clone the Starlette Admin repository and navigate to the project directory.\nSOURCE: https://github.com/jowilf/starlette-admin/blob/main/examples/auth/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/jowilf/starlette-admin.git\ncd starlette-admin\n```\n\n----------------------------------------\n\nTITLE: Cloning Starlette Admin Repository\nDESCRIPTION: Commands to clone the Starlette Admin repository from GitHub and navigate to the project directory.\nSOURCE: https://github.com/jowilf/starlette-admin/blob/main/examples/custom_actions/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/jowilf/starlette-admin.git\ncd starlette-admin\n```\n\n----------------------------------------\n\nTITLE: Creating Virtual Environment - Unix Setup\nDESCRIPTION: Commands to create and activate a virtual environment on macOS/Linux systems\nSOURCE: https://github.com/jowilf/starlette-admin/blob/main/docs/tutorials/basic/index.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npython -m venv env\nsource env/bin/activate\n```"
  }
]