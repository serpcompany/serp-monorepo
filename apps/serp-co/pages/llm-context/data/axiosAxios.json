[
  {
    "owner": "axios",
    "repo": "axios",
    "content": "TITLE: Axios Request Configuration Options\nDESCRIPTION: Complete configuration object showing all available options for making HTTP requests with Axios. Includes URL configuration, request methods, data handling, authentication, timeout settings, interceptors, and advanced features.\nSOURCE: https://github.com/axios/axios/blob/v1.x/README.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  url: '/user',\n  method: 'get',\n  baseURL: 'https://some-domain.com/api/',\n  allowAbsoluteUrls: true,\n  transformRequest: [function (data, headers) {\n    return data;\n  }],\n  transformResponse: [function (data) {\n    return data;\n  }],\n  headers: {'X-Requested-With': 'XMLHttpRequest'},\n  params: {\n    ID: 12345\n  },\n  paramsSerializer: {\n    encode?: (param: string): string => { },\n    serialize?: (params: Record<string, any>, options?: ParamsSerializerOptions ),\n    indexes: false\n  },\n  data: {\n    firstName: 'Fred'\n  },\n  timeout: 1000,\n  withCredentials: false,\n  adapter: function (config) {\n    /* ... */\n  },\n  auth: {\n    username: 'janedoe',\n    password: 's00pers3cret'\n  },\n  responseType: 'json',\n  responseEncoding: 'utf8',\n  xsrfCookieName: 'XSRF-TOKEN',\n  xsrfHeaderName: 'X-XSRF-TOKEN',\n  withXSRFToken: boolean | undefined | ((config: InternalAxiosRequestConfig) => boolean | undefined),\n  onUploadProgress: function ({loaded, total, progress, bytes, estimated, rate, upload = true}) {\n  },\n  onDownloadProgress: function ({loaded, total, progress, bytes, estimated, rate, download = true}) {\n  },\n  maxContentLength: 2000,\n  maxBodyLength: 2000,\n  validateStatus: function (status) {\n    return status >= 200 && status < 300;\n  },\n  maxRedirects: 21,\n  beforeRedirect: (options, { headers }) => {\n    if (options.hostname === \"example.com\") {\n      options.auth = \"user:password\";\n    }\n  },\n  socketPath: null,\n  transport: undefined,\n  httpAgent: new http.Agent({ keepAlive: true }),\n  httpsAgent: new https.Agent({ keepAlive: true }),\n  proxy: {\n    protocol: 'https',\n    host: '127.0.0.1',\n    port: 9000,\n    auth: {\n      username: 'mikeymike',\n      password: 'rapunz3l'\n    }\n  },\n  cancelToken: new CancelToken(function (cancel) {\n  }),\n  signal: new AbortController().signal\n}\n```\n\n----------------------------------------\n\nTITLE: Making GET Requests with Axios\nDESCRIPTION: Examples of making GET requests using Axios, including handling responses with promises and async/await.\nSOURCE: https://github.com/axios/axios/blob/v1.x/README.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\naxios.get('/user?ID=12345')\n  .then(function (response) {\n    // handle success\n    console.log(response);\n  })\n  .catch(function (error) {\n    // handle error\n    console.log(error);\n  })\n  .finally(function () {\n    // always executed\n  });\n\n// Using async/await\nasync function getUser() {\n  try {\n    const response = await axios.get('/user?ID=12345');\n    console.log(response);\n  } catch (error) {\n    console.error(error);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Making POST Requests with Axios\nDESCRIPTION: Example of making a POST request using Axios, including sending data in the request body.\nSOURCE: https://github.com/axios/axios/blob/v1.x/README.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\naxios.post('/user', {\n    firstName: 'Fred',\n    lastName: 'Flintstone'\n  })\n  .then(function (response) {\n    console.log(response);\n  })\n  .catch(function (error) {\n    console.log(error);\n  });\n```\n\n----------------------------------------\n\nTITLE: Error Handling in Axios\nDESCRIPTION: Demonstrates how to handle different types of errors in Axios requests including response errors, request errors, and setup errors.\nSOURCE: https://github.com/axios/axios/blob/v1.x/README.md#2025-04-22_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\naxios.get('/user/12345')\n  .catch(function (error) {\n    if (error.response) {\n      // The request was made and the server responded with a status code\n      // that falls out of the range of 2xx\n      console.log(error.response.data);\n      console.log(error.response.status);\n      console.log(error.response.headers);\n    } else if (error.request) {\n      // The request was made but no response was received\n      // `error.request` is an instance of XMLHttpRequest in the browser and an instance of\n      // http.ClientRequest in node.js\n      console.log(error.request);\n    } else {\n      // Something happened in setting up the request that triggered an Error\n      console.log('Error', error.message);\n    }\n    console.log(error.config);\n  });\n```\n\n----------------------------------------\n\nTITLE: Configuring Axios Requests\nDESCRIPTION: Examples of configuring Axios requests using different methods and options.\nSOURCE: https://github.com/axios/axios/blob/v1.x/README.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// Send a POST request\naxios({\n  method: 'post',\n  url: '/user/12345',\n  data: {\n    firstName: 'Fred',\n    lastName: 'Flintstone'\n  }\n});\n\n// GET request for remote image in node.js\naxios({\n  method: 'get',\n  url: 'https://bit.ly/2mTM3nY',\n  responseType: 'stream'\n})\n  .then(function (response) {\n    response.data.pipe(fs.createWriteStream('ada_lovelace.jpg'))\n  });\n```\n\n----------------------------------------\n\nTITLE: Axios Response Structure\nDESCRIPTION: The structure of the response object returned by Axios after a successful request, containing data, status code, headers, and request configuration.\nSOURCE: https://github.com/axios/axios/blob/v1.x/README.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  // `data` is the response that was provided by the server\n  data: {},\n\n  // `status` is the HTTP status code from the server response\n  status: 200,\n\n  // `statusText` is the HTTP status message from the server response\n  statusText: 'OK',\n\n  // `headers` the HTTP headers that the server responded with\n  // All header names are lowercase and can be accessed using the bracket notation.\n  // Example: `response.headers['content-type']`\n  headers: {},\n\n  // `config` is the config that was provided to `axios` for the request\n  config: {},\n\n  // `request` is the request that generated this response\n  // It is the last ClientRequest instance in node.js (in redirects)\n  // and an XMLHttpRequest instance in the browser\n  request: {}\n}\n```\n\n----------------------------------------\n\nTITLE: Performing Concurrent Requests with Axios\nDESCRIPTION: Example of making multiple concurrent requests using Axios and Promise.all().\nSOURCE: https://github.com/axios/axios/blob/v1.x/README.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nfunction getUserAccount() {\n  return axios.get('/user/12345');\n}\n\nfunction getUserPermissions() {\n  return axios.get('/user/12345/permissions');\n}\n\nPromise.all([getUserAccount(), getUserPermissions()])\n  .then(function (results) {\n    const acct = results[0];\n    const perm = results[1];\n  });\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Axios Instances with Default Configuration\nDESCRIPTION: Example of creating an Axios instance with specific default settings, which is useful when working with multiple APIs or different authentication requirements.\nSOURCE: https://github.com/axios/axios/blob/v1.x/README.md#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n// Set config defaults when creating the instance\nconst instance = axios.create({\n  baseURL: 'https://api.example.com'\n});\n\n// Alter defaults after instance has been created\ninstance.defaults.headers.common['Authorization'] = AUTH_TOKEN;\n```\n\n----------------------------------------\n\nTITLE: Setting Global Axios Defaults\nDESCRIPTION: Configuring global default settings for all Axios requests including baseURL and default headers for authentication and content type.\nSOURCE: https://github.com/axios/axios/blob/v1.x/README.md#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\naxios.defaults.baseURL = 'https://api.example.com';\n\n// Important: If axios is used with multiple domains, the AUTH_TOKEN will be sent to all of them.\n// See below for an example using Custom instance defaults instead.\naxios.defaults.headers.common['Authorization'] = AUTH_TOKEN;\n\naxios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';\n```\n\n----------------------------------------\n\nTITLE: Creating Axios Instances\nDESCRIPTION: Example of creating a custom Axios instance with specific configuration options.\nSOURCE: https://github.com/axios/axios/blob/v1.x/README.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst instance = axios.create({\n  baseURL: 'https://some-domain.com/api/',\n  timeout: 1000,\n  headers: {'X-Custom-Header': 'foobar'}\n});\n```\n\n----------------------------------------\n\nTITLE: Using Axios Interceptors for Request and Response Processing\nDESCRIPTION: Implementation of Axios interceptors to modify requests before they are sent and process responses before they are handled by promise chains.\nSOURCE: https://github.com/axios/axios/blob/v1.x/README.md#2025-04-22_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n\nconst instance = axios.create();\n\n// Add a request interceptor\ninstance.interceptors.request.use(function (config) {\n    // Do something before request is sent\n    return config;\n  }, function (error) {\n    // Do something with request error\n    return Promise.reject(error);\n  });\n\n// Add a response interceptor\ninstance.interceptors.response.use(function (response) {\n    // Any status code that lie within the range of 2xx cause this function to trigger\n    // Do something with response data\n    return response;\n  }, function (error) {\n    // Any status codes that falls outside the range of 2xx cause this function to trigger\n    // Do something with response error\n    return Promise.reject(error);\n  });\n```\n\n----------------------------------------\n\nTITLE: Request Cancellation using AbortController\nDESCRIPTION: Shows how to cancel Axios requests using the AbortController API (supported since v0.22.0).\nSOURCE: https://github.com/axios/axios/blob/v1.x/README.md#2025-04-22_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nconst controller = new AbortController();\n\naxios.get('/foo/bar', {\n   signal: controller.signal\n}).then(function(response) {\n   //...\n});\n// cancel the request\ncontroller.abort()\n```\n\n----------------------------------------\n\nTITLE: Processing Axios Response with Promises\nDESCRIPTION: Example of using the then method to process a successful Axios response, accessing various properties like data, status, and headers.\nSOURCE: https://github.com/axios/axios/blob/v1.x/README.md#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\naxios.get('/user/12345')\n  .then(function (response) {\n    console.log(response.data);\n    console.log(response.status);\n    console.log(response.statusText);\n    console.log(response.headers);\n    console.log(response.config);\n  });\n```\n\n----------------------------------------\n\nTITLE: Installing Axios with Package Managers\nDESCRIPTION: Commands for installing Axios using various package managers like npm, yarn, pnpm, and bun.\nSOURCE: https://github.com/axios/axios/blob/v1.x/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install axios\n\n$ yarn add axios\n\n$ pnpm add axios\n\n$ bun add axios\n```\n\n----------------------------------------\n\nTITLE: Configuring Axios Request Options\nDESCRIPTION: Configuration options for Axios requests including decompress settings, HTTP parser options, and transitional features for backward compatibility.\nSOURCE: https://github.com/axios/axios/blob/v1.x/README.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n  // - Node only (XHR cannot turn off decompression)\n  decompress: true, // default\n\n  // `insecureHTTPParser` boolean.\n  // Indicates where to use an insecure HTTP parser that accepts invalid HTTP headers.\n  // This may allow interoperability with non-conformant HTTP implementations.\n  // Using the insecure parser should be avoided.\n  // see options https://nodejs.org/dist/latest-v12.x/docs/api/http.html#http_http_request_url_options_callback\n  // see also https://nodejs.org/en/blog/vulnerability/february-2020-security-releases/#strict-http-header-parsing-none\n  insecureHTTPParser: undefined, // default\n\n  // transitional options for backward compatibility that may be removed in the newer versions\n  transitional: {\n    // silent JSON parsing mode\n    // `true`  - ignore JSON parsing errors and set response.data to null if parsing failed (old behaviour)\n    // `false` - throw SyntaxError if JSON parsing failed (Note: responseType must be set to 'json')\n    silentJSONParsing: true, // default value for the current Axios version\n\n    // try to parse the response string as JSON even if `responseType` is not 'json'\n    forcedJSONParsing: true,\n\n    // throw ETIMEDOUT error instead of generic ECONNABORTED on request timeouts\n    clarifyTimeoutError: false,\n  },\n\n  env: {\n    // The FormData class to be used to automatically serialize the payload into a FormData object\n    FormData: window?.FormData || global?.FormData\n  },\n\n  formSerializer: {\n      visitor: (value, key, path, helpers) => {}; // custom visitor function to serialize form values\n      dots: boolean; // use dots instead of brackets format\n      metaTokens: boolean; // keep special endings like {} in parameter key\n      indexes: boolean; // array indexes format null - no brackets, false - empty brackets, true - brackets with indexes\n  },\n\n  // http adapter only (node.js)\n  maxRate: [\n    100 * 1024, // 100KB/s upload limit,\n    100 * 1024  // 100KB/s download limit\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: FormData Usage in Axios\nDESCRIPTION: Demonstrates how to send multipart/form-data using FormData API in both browser and Node.js environments.\nSOURCE: https://github.com/axios/axios/blob/v1.x/README.md#2025-04-22_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nconst formData = new FormData();\nformData.append('foo', 'bar');\n\naxios.post('https://httpbin.org/post', formData);\n```\n\n----------------------------------------\n\nTITLE: Importing Axios in JavaScript\nDESCRIPTION: Different ways to import Axios in JavaScript, including named imports and default import.\nSOURCE: https://github.com/axios/axios/blob/v1.x/README.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport axios, {isCancel, AxiosError} from 'axios';\n\n// or\n\nimport axios from 'axios';\n\nconsole.log(axios.isCancel('something'));\n```\n\n----------------------------------------\n\nTITLE: Axios TypeScript Error Handling\nDESCRIPTION: Example of TypeScript usage with Axios, including error handling with type guards.\nSOURCE: https://github.com/axios/axios/blob/v1.x/README.md#2025-04-22_snippet_44\n\nLANGUAGE: typescript\nCODE:\n```\nlet user: User = null;\ntry {\n  const { data } = await axios.get('/user?ID=12345');\n  user = data.userDetails;\n} catch (error) {\n  if (axios.isAxiosError(error)) {\n    handleAxiosError(error);\n  } else {\n    handleUnexpectedError(error);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Error JSON Conversion in Axios\nDESCRIPTION: Demonstrates how to convert Axios errors to JSON format for more detailed error information.\nSOURCE: https://github.com/axios/axios/blob/v1.x/README.md#2025-04-22_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\naxios.get('/user/12345')\n  .catch(function (error) {\n    console.log(error.toJSON());\n  });\n```\n\n----------------------------------------\n\nTITLE: Managing Configuration Priority in Axios\nDESCRIPTION: Demonstrating the order of precedence for Axios configuration options, where request-specific settings override instance defaults, which override library defaults.\nSOURCE: https://github.com/axios/axios/blob/v1.x/README.md#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n// Create an instance using the config defaults provided by the library\n// At this point the timeout config value is `0` as is the default for the library\nconst instance = axios.create();\n\n// Override timeout default for the library\n// Now all requests using this instance will wait 2.5 seconds before timing out\ninstance.defaults.timeout = 2500;\n\n// Override timeout for this request as it's known to take a long time\ninstance.get('/longRequest', {\n  timeout: 5000\n});\n```\n\n----------------------------------------\n\nTITLE: URLSearchParams for Form Data\nDESCRIPTION: Demonstrates using URLSearchParams API to send data in application/x-www-form-urlencoded format.\nSOURCE: https://github.com/axios/axios/blob/v1.x/README.md#2025-04-22_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nconst params = new URLSearchParams({ foo: 'bar' });\nparams.append('extraparam', 'value');\naxios.post('/foo', params);\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Axios Adapter in JavaScript\nDESCRIPTION: Example implementation of a custom Axios adapter that handles request dispatch and promise settlement. The adapter takes a config object, makes the request, and returns a Promise that resolves with the response data. It uses the settle utility to resolve or reject the promise based on the response.\nSOURCE: https://github.com/axios/axios/blob/v1.x/lib/adapters/README.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar settle = require('./../core/settle');\n\nmodule.exports = function myAdapter(config) {\n  // At this point:\n  //  - config has been merged with defaults\n  //  - request transformers have already run\n  //  - request interceptors have already run\n  \n  // Make the request using config provided\n  // Upon response settle the Promise\n\n  return new Promise(function(resolve, reject) {\n  \n    var response = {\n      data: responseData,\n      status: request.status,\n      statusText: request.statusText,\n      headers: responseHeaders,\n      config: config,\n      request: request\n    };\n\n    settle(resolve, reject, response);\n\n    // From here:\n    //  - response transformers will run\n    //  - response interceptors will run\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Status Validation in Axios\nDESCRIPTION: Shows how to override default status code validation using validateStatus config option.\nSOURCE: https://github.com/axios/axios/blob/v1.x/README.md#2025-04-22_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\naxios.get('/user/12345', {\n  validateStatus: function (status) {\n    return status < 500; // Resolve only if the status code is less than 500\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: File Upload with Axios\nDESCRIPTION: Examples of single and multiple file uploads using FormData\nSOURCE: https://github.com/axios/axios/blob/v1.x/README.md#2025-04-22_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\nawait axios.postForm('https://httpbin.org/post', {\n  'myVar' : 'foo',\n  'file': document.querySelector('#fileInput').files[0]\n});\n```\n\n----------------------------------------\n\nTITLE: Basic FormData Serialization in Axios\nDESCRIPTION: Demonstrates basic FormData serialization by posting data with multipart/form-data content type header\nSOURCE: https://github.com/axios/axios/blob/v1.x/README.md#2025-04-22_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\naxios.post('https://httpbin.org/post', {x: 1}, {\n  headers: {\n    'Content-Type': 'multipart/form-data'\n  }\n}).then(({data}) => console.log(data));\n```\n\n----------------------------------------\n\nTITLE: Progress Tracking in Axios\nDESCRIPTION: Shows how to capture upload and download progress events in Axios requests\nSOURCE: https://github.com/axios/axios/blob/v1.x/README.md#2025-04-22_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\nawait axios.post(url, data, {\n  onUploadProgress: function (axiosProgressEvent) {\n    /*{\n      loaded: number;\n      total?: number;\n      progress?: number; // in range [0..1]\n      bytes: number; // how many bytes have been transferred since the last trigger (delta)\n      estimated?: number; // estimated time in seconds\n      rate?: number; // upload speed in bytes\n      upload: true; // upload sign\n    }*/\n  },\n\n  onDownloadProgress: function (axiosProgressEvent) {\n    /*{\n      loaded: number;\n      total?: number;\n      progress?: number;\n      bytes: number; \n      estimated?: number;\n      rate?: number; // download speed in bytes\n      download: true; // download sign\n    }*/\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Query String Serialization with qs Library\nDESCRIPTION: Shows how to use the qs library to serialize data for x-www-form-urlencoded format.\nSOURCE: https://github.com/axios/axios/blob/v1.x/README.md#2025-04-22_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nconst qs = require('qs');\naxios.post('/foo', qs.stringify({ 'bar': 123 }));\n```\n\n----------------------------------------\n\nTITLE: Synchronous Axios Request Interceptors\nDESCRIPTION: Setting the synchronous flag to true for request interceptors to avoid delays when the main thread is blocked.\nSOURCE: https://github.com/axios/axios/blob/v1.x/README.md#2025-04-22_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\naxios.interceptors.request.use(function (config) {\n  config.headers.test = 'I am only a header!';\n  return config;\n}, null, { synchronous: true });\n```\n\n----------------------------------------\n\nTITLE: Axios Fetch Adapter Configuration\nDESCRIPTION: Examples of configuring Axios to use the fetch adapter either globally or for specific instances.\nSOURCE: https://github.com/axios/axios/blob/v1.x/README.md#2025-04-22_snippet_43\n\nLANGUAGE: javascript\nCODE:\n```\nconst {data} = axios.get(url, {\n  adapter: 'fetch' // by default ['xhr', 'http', 'fetch']\n})\n\nconst fetchAxios = axios.create({\n  adapter: 'fetch'\n});\n\nconst {data} = fetchAxios.get(url);\n```\n\n----------------------------------------\n\nTITLE: Managing Axios Interceptors\nDESCRIPTION: Methods for removing individual interceptors or clearing all interceptors for an Axios instance.\nSOURCE: https://github.com/axios/axios/blob/v1.x/README.md#2025-04-22_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nconst instance = axios.create();\nconst myInterceptor = instance.interceptors.request.use(function () {/*...*/});\naxios.interceptors.request.eject(myInterceptor);\n```\n\n----------------------------------------\n\nTITLE: Complex Object FormData Serialization\nDESCRIPTION: Example of complex object structure that will be serialized to FormData by Axios\nSOURCE: https://github.com/axios/axios/blob/v1.x/README.md#2025-04-22_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\nconst obj = {\n  x: 1,\n  arr: [1, 2, 3],\n  arr2: [1, [2], 3],\n  users: [{name: 'Peter', surname: 'Griffin'}, {name: 'Thomas', surname: 'Anderson'}],\n  'obj2{}': [{x:1}]\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Interceptors to Custom Axios Instances\nDESCRIPTION: Example of adding an interceptor to a custom Axios instance rather than the global Axios object.\nSOURCE: https://github.com/axios/axios/blob/v1.x/README.md#2025-04-22_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nconst instance = axios.create();\ninstance.interceptors.request.use(function () {/*...*/});\n```\n\n----------------------------------------\n\nTITLE: Clearing All Axios Interceptors\nDESCRIPTION: Example of how to remove all request or response interceptors from an Axios instance.\nSOURCE: https://github.com/axios/axios/blob/v1.x/README.md#2025-04-22_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nconst instance = axios.create();\ninstance.interceptors.request.use(function () {/*...*/});\ninstance.interceptors.request.clear(); // Removes interceptors from requests\ninstance.interceptors.response.use(function () {/*...*/});\ninstance.interceptors.response.clear(); // Removes interceptors from responses\n```\n\n----------------------------------------\n\nTITLE: Conditional Axios Request Interceptors\nDESCRIPTION: Using the runWhen option to conditionally execute a request interceptor based on a runtime check, such as the request method.\nSOURCE: https://github.com/axios/axios/blob/v1.x/README.md#2025-04-22_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nfunction onGetCall(config) {\n  return config.method === 'get';\n}\naxios.interceptors.request.use(function (config) {\n  config.headers.test = 'special get headers';\n  return config;\n}, null, { runWhen: onGetCall });\n```\n\n----------------------------------------\n\nTITLE: AxiosHeaders Get Method Demo\nDESCRIPTION: Example showing different ways to get and parse header values using the get method, including RegExp matching and custom parsing functions.\nSOURCE: https://github.com/axios/axios/blob/v1.x/README.md#2025-04-22_snippet_40\n\nLANGUAGE: typescript\nCODE:\n```\nconst headers = new AxiosHeaders({\n  'Content-Type': 'multipart/form-data; boundary=Asrf456BGe4h'\n});\n\nconsole.log(headers.get('Content-Type')); \n// multipart/form-data; boundary=Asrf456BGe4h\n\nconsole.log(headers.get('Content-Type', true));\n// [Object: null prototype] {\n//   'multipart/form-data': undefined,\n//    boundary: 'Asrf456BGe4h'\n// }\n\nconsole.log(headers.get('Content-Type', (value, name, headers) => {\n  return String(value).replace(/a/g, 'ZZZ');\n}));\n// multipZZZrt/form-dZZZtZZZ; boundZZZry=Asrf456BGe4h\n\nconsole.log(headers.get('Content-Type', /boundary=(\\w+)/)?.[0]);\n// boundary=Asrf456BGe4h\n```\n\n----------------------------------------\n\nTITLE: AxiosHeaders Normalize Method Example\nDESCRIPTION: Example showing header normalization to combine duplicate keys with different cases into a single normalized header.\nSOURCE: https://github.com/axios/axios/blob/v1.x/README.md#2025-04-22_snippet_42\n\nLANGUAGE: javascript\nCODE:\n```\nconst headers = new AxiosHeaders({\n  'foo': '1',\n});\n\nheaders.Foo = '2';\nheaders.FOO = '3';\n\nconsole.log(headers.toJSON()); // [Object: null prototype] { foo: '1', Foo: '2', FOO: '3' }\nconsole.log(headers.normalize().toJSON()); // [Object: null prototype] { foo: '3' }\nconsole.log(headers.normalize(true).toJSON()); // [Object: null prototype] { Foo: '3' }\n```\n\n----------------------------------------\n\nTITLE: AxiosHeaders Set Method Signatures\nDESCRIPTION: Method signatures for setting headers with optional rewrite behavior control. The rewrite parameter determines if existing headers should be overwritten.\nSOURCE: https://github.com/axios/axios/blob/v1.x/README.md#2025-04-22_snippet_39\n\nLANGUAGE: typescript\nCODE:\n```\nset(headerName, value: Axios, rewrite?: boolean);\nset(headerName, value, rewrite?: (this: AxiosHeaders, value: string, name: string, headers: RawAxiosHeaders) => boolean);\nset(headers?: RawAxiosHeaders | AxiosHeaders | string, rewrite?: boolean);\n```\n\n----------------------------------------\n\nTITLE: AxiosHeaders Clear Method Example\nDESCRIPTION: Demonstration of clearing headers using pattern matching to remove specific headers based on name patterns.\nSOURCE: https://github.com/axios/axios/blob/v1.x/README.md#2025-04-22_snippet_41\n\nLANGUAGE: typescript\nCODE:\n```\nconst headers = new AxiosHeaders({\n  'foo': '1',\n  'x-foo': '2',\n  'x-bar': '3',\n});\n\nconsole.log(headers.clear(/^x-/)); // true\n\nconsole.log(headers.toJSON()); // [Object: null prototype] { foo: '1' }\n```\n\n----------------------------------------\n\nTITLE: Rate Limiting in Axios\nDESCRIPTION: Demonstrates how to set upload and download rate limits in Node.js environment\nSOURCE: https://github.com/axios/axios/blob/v1.x/README.md#2025-04-22_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\nconst {data} = await axios.post(LOCAL_SERVER_URL, myBuffer, {\n  onUploadProgress: ({progress, rate}) => {\n    console.log(`Upload [${(progress*100).toFixed(2)}%]: ${(rate / 1024).toFixed(2)}KB/s`)\n  },\n   \n  maxRate: [100 * 1024], // 100KB/s limit\n});\n```\n\n----------------------------------------\n\nTITLE: AxiosHeaders Usage Example\nDESCRIPTION: Shows how to use the AxiosHeaders class for header manipulation in interceptors\nSOURCE: https://github.com/axios/axios/blob/v1.x/README.md#2025-04-22_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\naxios.interceptors.request.use((request: InternalAxiosRequestConfig) => {\n    request.headers.set('My-header', 'value');\n\n    request.headers.set({\n      \"My-set-header1\": \"my-set-value1\",\n      \"My-set-header2\": \"my-set-value2\"\n    });\n    \n    request.headers.set('User-Agent', false);\n\n    request.headers.setContentType('text/plain');\n  \n    request.headers['My-set-header2'] = 'newValue'\n  \n    return request;\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Critical Security Vulnerability Fix for Axios CVE-2023-45857\nDESCRIPTION: A security alert indicating a critical vulnerability fix for Axios. The code block contains a warning message about the vulnerability with a link to more information at Snyk's security database.\nSOURCE: https://github.com/axios/axios/blob/v1.x/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n⚠️ Critical vulnerability fix. See https://security.snyk.io/vuln/SNYK-JS-AXIOS-6032459\n```\n\n----------------------------------------\n\nTITLE: Axios CVE-2023-45857 Security Fix\nDESCRIPTION: PR description for a critical security vulnerability fix in Axios (CVE-2023-45857), including a link to the security advisory on Snyk.\nSOURCE: https://github.com/axios/axios/blob/v1.x/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n⚠️ Critical vulnerability fix. See https://security.snyk.io/vuln/SNYK-JS-AXIOS-6032459\n```\n\n----------------------------------------\n\nTITLE: Security Fix for CVE-2023-45857 in Axios\nDESCRIPTION: Critical vulnerability fix for CVE-2023-45857 in Axios. This code snippet shows the security advisory notice that appears in pull request #6028.\nSOURCE: https://github.com/axios/axios/blob/v1.x/CHANGELOG.md#2025-04-22_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n⚠️ Critical vulnerability fix. See https://security.snyk.io/vuln/SNYK-JS-AXIOS-6032459\n```\n\n----------------------------------------\n\nTITLE: Critical Vulnerability Fix for Axios\nDESCRIPTION: This code snippet warns about a critical vulnerability fix for Axios and provides a link to more information.\nSOURCE: https://github.com/axios/axios/blob/v1.x/CHANGELOG.md#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n⚠️ Critical vulnerability fix. See https://security.snyk.io/vuln/SNYK-JS-AXIOS-6032459\n```\n\n----------------------------------------\n\nTITLE: Using withXSRFToken Option with Axios\nDESCRIPTION: PR description explaining the new withXSRFToken option that was added as a replacement for the old withCredentials behavior. Users should use withXSRFToken along with withCredentials to maintain the previous behavior.\nSOURCE: https://github.com/axios/axios/blob/v1.x/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n📢 This PR added 'withXSRFToken' option as a replacement for old withCredentials behaviour. \nYou should now use withXSRFToken along with withCredential to get the old behavior.\nThis functionality is considered as a fix.\n```\n\n----------------------------------------\n\nTITLE: FormData with Buffer in Node.js\nDESCRIPTION: Shows how to use FormData with Buffer objects in Node.js environment using form-data package\nSOURCE: https://github.com/axios/axios/blob/v1.x/README.md#2025-04-22_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\nconst axios = require('axios');\nvar FormData = require('form-data');\n\naxios.post('https://httpbin.org/post', {x: 1, buf: new Buffer(10)}, {\n  headers: {\n    'Content-Type': 'multipart/form-data'\n  }\n}).then(({data}) => console.log(data));\n```\n\n----------------------------------------\n\nTITLE: HTML Form Example\nDESCRIPTION: Sample HTML form structure for FormData serialization\nSOURCE: https://github.com/axios/axios/blob/v1.x/README.md#2025-04-22_snippet_35\n\nLANGUAGE: html\nCODE:\n```\n<form id=\"form\">\n  <input type=\"text\" name=\"foo\" value=\"1\">\n  <input type=\"text\" name=\"deep.prop\" value=\"2\">\n  <input type=\"text\" name=\"deep prop spaced\" value=\"3\">\n  <input type=\"text\" name=\"baz\" value=\"4\">\n  <input type=\"text\" name=\"baz\" value=\"5\">\n\n  <select name=\"user.age\">\n    <option value=\"value1\">Value 1</option>\n    <option value=\"value2\" selected>Value 2</option>\n    <option value=\"value3\">Value 3</option>\n  </select>\n\n  <input type=\"submit\" value=\"Save\">\n</form>\n```\n\n----------------------------------------\n\nTITLE: Running Axios Examples from Command Line\nDESCRIPTION: Command to run examples for manual testing, which starts a server at 127.0.0.1:3000.\nSOURCE: https://github.com/axios/axios/blob/v1.x/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n> npm run examples\n# Open 127.0.0.1:3000\n```\n\n----------------------------------------\n\nTITLE: Running Axios Sandbox in Browser\nDESCRIPTION: Command to start the sandbox environment accessible in a browser at 127.0.0.1:3000.\nSOURCE: https://github.com/axios/axios/blob/v1.x/CONTRIBUTING.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n> npm start\n# Open 127.0.0.1:3000\n```\n\n----------------------------------------\n\nTITLE: Running Axios Sandbox in Terminal\nDESCRIPTION: Commands to start the Axios sandbox environment and run a client from the terminal.\nSOURCE: https://github.com/axios/axios/blob/v1.x/CONTRIBUTING.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n> npm start\n> node ./sandbox/client\n```\n\n----------------------------------------\n\nTITLE: Running Examples Server\nDESCRIPTION: Command to start the local server for running Axios examples.\nSOURCE: https://github.com/axios/axios/blob/v1.x/examples/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm run examples\n```\n\n----------------------------------------\n\nTITLE: Accessing Examples\nDESCRIPTION: Link to access the examples in a web browser after starting the examples server.\nSOURCE: https://github.com/axios/axios/blob/v1.x/examples/README.md#2025-04-22_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\nhttp://localhost:3000\n```\n\n----------------------------------------\n\nTITLE: Building Axios\nDESCRIPTION: Command to build the Axios project from source code.\nSOURCE: https://github.com/axios/axios/blob/v1.x/examples/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies\nDESCRIPTION: Command to install all required dependencies for the Axios project.\nSOURCE: https://github.com/axios/axios/blob/v1.x/examples/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Navigating to Axios Directory\nDESCRIPTION: Command to change directory to the cloned axios repository.\nSOURCE: https://github.com/axios/axios/blob/v1.x/examples/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd axios\n```\n\n----------------------------------------\n\nTITLE: Request Cancellation using CancelToken (Deprecated)\nDESCRIPTION: Demonstrates the deprecated CancelToken approach for canceling Axios requests.\nSOURCE: https://github.com/axios/axios/blob/v1.x/README.md#2025-04-22_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nconst CancelToken = axios.CancelToken;\nconst source = CancelToken.source();\n\naxios.get('/user/12345', {\n  cancelToken: source.token\n}).catch(function (thrown) {\n  if (axios.isCancel(thrown)) {\n    console.log('Request canceled', thrown.message);\n  } else {\n    // handle error\n  }\n});\n\naxios.post('/user/12345', {\n  name: 'new name'\n}, {\n  cancelToken: source.token\n})\n\n// cancel the request (the message parameter is optional)\nsource.cancel('Operation canceled by the user.');\n```\n\n----------------------------------------\n\nTITLE: CancelToken with Executor Function\nDESCRIPTION: Shows how to create a cancel token using an executor function with the CancelToken constructor.\nSOURCE: https://github.com/axios/axios/blob/v1.x/README.md#2025-04-22_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nconst CancelToken = axios.CancelToken;\nlet cancel;\n\naxios.get('/user/12345', {\n  cancelToken: new CancelToken(function executor(c) {\n    // An executor function receives a cancel function as a parameter\n    cancel = c;\n  })\n});\n\n// cancel the request\ncancel();\n```\n\n----------------------------------------\n\nTITLE: Cloning Axios Repository\nDESCRIPTION: Command to clone the Axios repository from GitHub to your local machine.\nSOURCE: https://github.com/axios/axios/blob/v1.x/examples/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/axios/axios.git\n```\n\n----------------------------------------\n\nTITLE: HTML Project Header\nDESCRIPTION: Centered header section containing the Axios logo, description and main navigation links.\nSOURCE: https://github.com/axios/axios/blob/v1.x/README.md#2025-04-22_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<div align=\"center\">\n   <a href=\"https://axios-http.com\"><img src=\"https://axios-http.com/assets/logo.svg\" /></a><br>\n</div>\n\n<p align=\"center\">Promise based HTTP client for the browser and node.js</p>\n```\n\n----------------------------------------\n\nTITLE: HTML Sponsor Table Layout\nDESCRIPTION: HTML table structure displaying gold sponsors for the Axios project with company logos, descriptions and links.\nSOURCE: https://github.com/axios/axios/blob/v1.x/README.md#2025-04-22_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<table align=\"center\" width=\"100%\">\n  <tr width=\"33.333333333333336%\">\n    <td align=\"center\" width=\"33.333333333333336%\">\n      <!-- Sponsor content -->\n    </td>\n  </tr>\n</table>\n```"
  }
]