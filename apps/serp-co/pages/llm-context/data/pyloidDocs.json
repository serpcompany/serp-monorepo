[
  {
    "owner": "pyloid",
    "repo": "docs",
    "content": "TITLE: Implementing File Dialog API in Pyloid with PySide6\nDESCRIPTION: Creates a custom API class that provides file open, save, and directory selection dialogs using PySide6's QFileDialog. The Bridge decorator exposes these methods to JavaScript.\n\nLANGUAGE: python\nCODE:\n```\nfrom PySide6.QtWidgets import QFileDialog\nfrom pyloid import PyloidAPI, Bridge\n\nclass CustomAPI(PyloidAPI):\n    @Bridge(result=str)\n    def open_file(self):\n        file, _ = QFileDialog.getOpenFileName(filter=\"Text files (*.txt)\")\n        return file if file else \"\"\n\n    @Bridge(result=str)\n    def save_file(self):\n        file, _ = QFileDialog.getSaveFileName(filter=\"Text files (*.txt)\")\n        return file if file else \"\"\n\n    @Bridge(result=str)\n    def select_directory(self):\n        directory = QFileDialog.getExistingDirectory()\n        return directory if directory else \"\"\n```\n\n----------------------------------------\n\nTITLE: Comprehensive File Watcher Usage Example in Pyloid (Python)\nDESCRIPTION: A complete example demonstrating all File Watcher functionalities including watching multiple files and directories, setting callbacks, checking watched paths, stopping watches, and removing all watches.\n\nLANGUAGE: python\nCODE:\n```\n# Start watching file and directory\napp.watch_file(\"/path/to/file1.txt\")\napp.watch_file(\"/path/to/file2.txt\")\napp.watch_file(\"/path/to/file3.txt\")\napp.watch_file(\"/path/to/file4.txt\")\napp.watch_directory(\"/path/to/directory1\")\napp.watch_directory(\"/path/to/directory2\")\napp.watch_directory(\"/path/to/directory3\")\napp.watch_directory(\"/path/to/directory4\")\n\n# Define callback functions\ndef on_file_changed(path):\n    print(f\"File changed: {path}\")\n\ndef on_directory_changed(path):\n    print(f\"Directory changed: {path}\")\n\n# Set callback functions\napp.set_file_change_callback(on_file_changed)\napp.set_directory_change_callback(on_directory_changed)\n\n# Check watched paths\nprint(\"Watched paths:\", app.get_watched_paths())\nprint(\"Watched files:\", app.get_watched_files())\nprint(\"Watched directories:\", app.get_watched_directories())\n\n# Stop watching a specific path\napp.stop_watching(\"/path/to/file1.txt\")\napp.stop_watching(\"/path/to/file2.txt\")\napp.stop_watching(\"/path/to/file3.txt\")\napp.stop_watching(\"/path/to/file4.txt\")\napp.stop_watching(\"/path/to/directory1\")\napp.stop_watching(\"/path/to/directory2\")\napp.stop_watching(\"/path/to/directory3\")\napp.stop_watching(\"/path/to/directory4\")\n\n# Remove all watched paths\napp.remove_all_watched_paths()\n```\n\n----------------------------------------\n\nTITLE: Implementing Message Box API in Pyloid with PySide6\nDESCRIPTION: Creates a custom API class that provides information, warning, and question dialog boxes using PySide6's QMessageBox. The Bridge decorator specifies parameter types and return values for JavaScript interoperability.\n\nLANGUAGE: python\nCODE:\n```\nfrom PySide6.QtWidgets import QMessageBox\nfrom pyloid import PyloidAPI, Bridge\n\nclass MessageAPI(PyloidAPI):\n    @Bridge(str, str, result=str)\n    def show_info(self, title: str, message: str):\n        QMessageBox.information(None, title, message)\n\n    @Bridge(str, str,result=str)\n    def show_warning(self, title: str, message: str):\n        QMessageBox.warning(None, title, message)\n\n    @Bridge(str, str,result=bool)\n    def show_question(self, title: str, message: str):\n        reply = QMessageBox.question(None, title, message)\n        return reply == QMessageBox.Yes\n```\n\n----------------------------------------\n\nTITLE: Listening for Python Events in JavaScript\nDESCRIPTION: Demonstrates how to use EventAPI.listen() to receive and handle events sent from Python. The callback function is executed when the specified event is received.\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.pyloid.EventAPI.listen('pythonEvent', function (eventData) {\n  console.log('Received event from Python:', eventData);\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom PyloidAPI with Bridge Decorator in Python\nDESCRIPTION: This example demonstrates how to create a custom API by extending PyloidAPI with bridged methods that can be called from JavaScript. It shows how to specify return types and arguments with the Bridge decorator and includes methods for basic operations like echo, version retrieval, and window creation.\n\nLANGUAGE: python\nCODE:\n```\nfrom Pyloid import PyloidAPI, Bridge\n\nclass CustomAPI(PyloidAPI):\n    @Bridge(str, int, result=str)\n    def echo(self, message, number):\n        print(f\"Message: {message}-{number}\")\n        return f\"Message received in Python: {message}-{number}\"\n\n    @Bridge(result=str)\n    def getAppVersion(self):\n        return \"1.0.0\"\n\n    @Bridge(result=str)\n    def create_window(self):\n        window = app.create_window(\n            title=\"Pyloid Browser2\",\n        )\n\n        window.set_size(800, 600)\n        window.set_position(0, 0)\n        window.load_url(\"https://www.google.com\")\n        window.show()\n        window.focus()\n\n        return window.id\n\nwindow = app.create_window(\n    title=\"Pyloid Browser1\",\n    js_apis=[CustomAPI()],\n    dev_tools=True\n)\n\nif (is_production()):\n    window.load_file(os.path.join(get_production_path() + \"/index.html\"))\nelse:\n    window.load_file(\"index.html\")\n\nwindow.show()\nwindow.focus()\n\napp.run()\n```\n\n----------------------------------------\n\nTITLE: Creating Basic QThread Class in PySide6\nDESCRIPTION: Demonstrates how to create a basic worker thread by inheriting from QThread class. This is the foundation for implementing background tasks in PySide6 applications.\n\nLANGUAGE: python\nCODE:\n```\nfrom PySide6.QtCore import QThread\n\nclass WorkerThread(QThread):\n    def run(self):\n        # Write your execution code here\n        pass\n```\n\n----------------------------------------\n\nTITLE: Complete HTML Example of Pyloid Theme Integration\nDESCRIPTION: A complete HTML example showing how to integrate Pyloid's theming system. The example includes CSS for light and dark modes and demonstrates how these styles are applied to the page elements.\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n  <head>\n    <style>\n      [data-pyloid-theme='light'] {\n        --background-color: white;\n        --font-color: #333333;\n      }\n\n      [data-pyloid-theme='dark'] {\n        --background-color: #333333;\n        --font-color: white;\n      }\n\n      body {\n        background-color: var(--background-color);\n        color: var(--font-color);\n      }\n    </style>\n  </head>\n\n  <body>\n    <div class=\"card\">\n      <h1>Dark Mode Test</h1>\n      <p>\n        This page automatically changes theme based on system dark mode settings.\n      </p>\n    </div>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Configuring index.html for Pyloid Integration in HTML\nDESCRIPTION: HTML structure for the index file including the necessary QtWebChannel script reference and optional Content Security Policy for a Pyloid application.\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <script src=\"qrc:///qtwebchannel/qwebchannel.js\"></script>\n    <link rel=\"icon\" type=\"image/svg+xml\" href=\"/vite.svg\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Pyloid</title>\n    <!-- Add security policy (Optional) -->\n    <meta\n      http-equiv=\"Content-Security-Policy\"\n      content=\"default-src 'self'; script-src 'self' qrc://*; img-src 'self' data:; style-src 'self' 'unsafe-inline';\"\n    />\n    <!------------------------------------>\n  </head>\n  <body>\n    <div id=\"root\"></div>\n    <script type=\"module\" src=\"/src/main.tsx\"></script>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Creating a Pyloid Application with Custom Python API\nDESCRIPTION: Sets up a Pyloid application with a custom API class that exposes a Python method to JavaScript using the Bridge decorator. The example creates a window, loads an HTML file, and runs the application.\n\nLANGUAGE: python\nCODE:\n```\nfrom pyloid import Pyloid, PyloidAPI, Bridge\n\napp = Pyloid(\"Pyloid-App\")\n\nclass CustomAPI(PyloidAPI):\n    @Bridge(str, result=str)\n    def echo(self, message):\n        return f\"Message received in Python: {message}\"\n\n# Create main window\nwindow = app.create_window(\n    title=\"Pyloid Browser\",\n    js_apis=[CustomAPI()],\n)\n\nwindow.load_file(\"index.html\")\n\nwindow.show()\nwindow.focus()\n\napp.run()\n```\n\n----------------------------------------\n\nTITLE: Initializing Pyloid Application Class\nDESCRIPTION: Declaration of the Pyloid class that extends QApplication, with initialization parameters for application name and single instance mode.\n\nLANGUAGE: python\nCODE:\n```\nclass Pyloid(QApplication):\n    def __init__(self, app_name: str, single_instance: bool = True):\n        # ...\n```\n\n----------------------------------------\n\nTITLE: Loading HTML String in Pyloid Webview\nDESCRIPTION: Illustrates how to load a raw HTML string directly into a Pyloid application window. The code creates a Pyloid app, creates a window, loads a simple HTML string containing a heading, and displays the window.\n\nLANGUAGE: python\nCODE:\n```\napp = Pyloid(app_name=\"Pyloid-App\")\n\nwindow = app.create_window(\"Pyloid-Window\")\n\nwindow.load_html(\"<h1>Hello, Pyloid!</h1>\")\n\nwindow.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Browser Windows in Pyloid\nDESCRIPTION: Method for creating a new browser window with customizable parameters including dimensions, position, and JavaScript API integration.\n\nLANGUAGE: python\nCODE:\n```\ndef create_window(self, title: str = \"pylon app\", width: int = 800, height: int = 600, x: int = 200, y: int = 200, frame: bool = True, context_menu: bool = False, dev_tools: bool = False, js_apis: List[PylonAPI] = []) -> BrowserWindow:\n```\n\n----------------------------------------\n\nTITLE: Complete File Change Callback Implementation in Pyloid (Python)\nDESCRIPTION: Full example showing how to set up a callback function for file changes in a Pyloid application. Includes application setup, file watching, and the callback implementation.\n\nLANGUAGE: python\nCODE:\n```\nfrom pyloid import Pyloid\n\napp = Pyloid(app_name=\"Pyloid-App\", single_instance=True)\n\nwindow = app.create_window(\n    title=\"Pyloid Browser\",\n)\n\nwindow.load_url(\"https://www.example.com\")\nwindow.show_and_focus()\n\napp.watch_file(\"/path/file.txt\")\n\n# Define callback function\ndef on_file_changed(path):\n    print(f\"File has been changed: {path}\")\n\n# Set callback function\napp.set_file_change_callback(on_file_changed)\n\napp.run()\n```\n\n----------------------------------------\n\nTITLE: Running the Application Main Loop\nDESCRIPTION: Method that starts the application event loop, which must be called at the end of the script to begin application execution.\n\nLANGUAGE: python\nCODE:\n```\ndef run(self):\n```\n\n----------------------------------------\n\nTITLE: Conditional Developer Tools Configuration in Pyloid Based on Environment\nDESCRIPTION: Shows how to conditionally enable or disable developer tools based on the environment (production vs. development). Uses different approaches for different environments: set_dev_tools() for production and the dev_tools parameter for development.\n\nLANGUAGE: python\nCODE:\n```\nif is_production():\n    window = app.create_window(\n        title=\"Pyloid Browser-production\",\n    )\n    window.set_dev_tools(False)  # Deactivate developer tools in production environment\nelse:\n    window = app.create_window(\n        title=\"Pyloid Browser-dev\",\n        dev_tools=True  # Activate developer tools in development environment\n    )\n```\n\n----------------------------------------\n\nTITLE: Setting a File Change Callback in Pyloid (Python)\nDESCRIPTION: Code to define and set a callback function that will be executed when a watched file changes. The callback receives the path of the changed file as an argument.\n\nLANGUAGE: python\nCODE:\n```\ndef on_file_changed(path):\n    print(f\"File has been changed: {path}\")\n\napp.set_file_change_callback(on_file_changed)\n```\n\n----------------------------------------\n\nTITLE: Using QThread with Signal Connections in PySide6\nDESCRIPTION: Demonstrates how to use a worker thread with signal-slot connections. Shows the pattern for connecting thread signals to callback functions and starting the thread.\n\nLANGUAGE: python\nCODE:\n```\ndef on_finished():\n    print(\"Operation completed\")\n\ndef on_progress(value):\n    print(f\"Progress: {value}%\")\n\n\n# Create thread instance\nworker = WorkerThread()\n\nworker.finished.connect(on_finished)  # Callback when task completes\n\nworker.progress.connect(on_progress)  # Callback for progress updates\n\n# Start thread\nworker.start()\n```\n\n----------------------------------------\n\nTITLE: Using is_production() to load different resources in production vs development\nDESCRIPTION: Example demonstrating how to load different resources based on the environment. In production, it loads an HTML file from the bundled resources, while in development it loads from a local development server.\n\nLANGUAGE: python\nCODE:\n```\nfrom pyloid import Pyloid, is_production, get_production_path\n\napp = Pyloid(single_instance=True)\n\nif (is_production()):\n    window.load_file(os.path.join(get_production_path(), \"build/index.html\"))\nelse:\n    window.load_url(\"http://localhost:5173\")\n```\n\n----------------------------------------\n\nTITLE: Complete Notification with Click Callback Example in Pyloid\nDESCRIPTION: Full example showing how to set up a notification click callback and display a notification. When the user clicks the notification, the callback function will be executed.\n\nLANGUAGE: python\nCODE:\n```\ndef on_notification_clicked():\n    print(\"The notification was clicked!\")\n\napp.set_notification_callback(on_notification_clicked)\n\n# Display a new notification\napp.show_notification(\"New Notification\", \"Click this notification!\")\n```\n\n----------------------------------------\n\nTITLE: Setting Up Basic Light/Dark Theme with CSS Variables in Pyloid\nDESCRIPTION: Demonstrates the basic setup for implementing light and dark themes using CSS variables with Pyloid's data-pyloid-theme attribute. Shows how to define theme-specific variables and apply them to elements.\n\nLANGUAGE: css\nCODE:\n```\n/* Light mode theme */\n[data-pyloid-theme='light'] {\n  --background-color: white;\n  --font-color: #333333;\n}\n\n/* Dark mode theme */\n[data-pyloid-theme='dark'] {\n  --background-color: #333333;\n  --font-color: white;\n}\n\n/* Applying CSS variables */\nbody {\n  background-color: var(--background-color);\n  color: var(--font-color);\n}\n```\n\n----------------------------------------\n\nTITLE: Managing BrowserWindow Size and State\nDESCRIPTION: Methods for controlling the window's size and state, including fullscreen, minimize, maximize, and restore operations.\n\nLANGUAGE: python\nCODE:\n```\ndef toggle_fullscreen(self) -> None:\n```\n\nLANGUAGE: python\nCODE:\n```\ndef minimize(self) -> None:\n```\n\nLANGUAGE: python\nCODE:\n```\ndef maximize(self) -> None:\n```\n\nLANGUAGE: python\nCODE:\n```\ndef unmaximize(self) -> None:\n```\n\n----------------------------------------\n\nTITLE: Complete QThread Example with Progress Tracking in PySide6\nDESCRIPTION: A full implementation example of a worker thread that reports progress. This demonstrates a practical use case with proper signal connections and simulated work processing.\n\nLANGUAGE: python\nCODE:\n```\nfrom PySide6.QtCore import QThread, Signal\nimport time\n\nclass WorkerThread(QThread):\n    progress = Signal(int)\n\n    def run(self):\n        for i in range(101):\n            self.progress.emit(i)\n            time.sleep(0.1)  # Simulating work\n\n# Usage example\nworker = WorkerThread()\nworker.progress.connect(lambda v: print(f\"Progress: {v}%\"))\nworker.finished.connect(lambda: print(\"Task completed!\"))\nworker.start()\n```\n\n----------------------------------------\n\nTITLE: Triggering JavaScript Events from Python in Pyloid\nDESCRIPTION: This snippet demonstrates how to trigger events from Python that will be received by JavaScript event listeners. It uses the window.emit method to send a 'pythonEvent' with a message payload to the JavaScript side.\n\nLANGUAGE: python\nCODE:\n```\nwindow.emit('pythonEvent', { \"message\": 'Hello from Python!' })\n```\n\n----------------------------------------\n\nTITLE: Creating Periodic Timers (Full Code)\nDESCRIPTION: Complete example showing how to create and use a periodic timer within a Pyloid application. Includes application setup, timer creation, and starting the application event loop.\n\nLANGUAGE: python\nCODE:\n```\nfrom pyloid.timer import PyloidTimer\nfrom pyloid import  Pyloid\n\n# Create a PyloidTimer instance\napp = Pyloid(app_name=\"Pyloid-App\")\ntimer_manager = PyloidTimer()\n\ndef print_hello():\n    print(\"Hello!\")\n\n# Start a timer that prints \"Hello!\" every 2 seconds\ntimer_id = timer_manager.start_periodic_timer(2000, print_hello)\n\napp.run()\n```\n\n----------------------------------------\n\nTITLE: Complete Example of Using set_dev_tools Method in Pyloid\nDESCRIPTION: A full implementation showing how to create a Pyloid application and enable developer tools after window creation using the set_dev_tools method. Includes application initialization, window creation, enabling developer tools, loading a URL, and running the application.\n\nLANGUAGE: python\nCODE:\n```\nfrom pyloid import Pyloid\n\napp = Pyloid(app_name=\"Pyloid-App\", single_instance=True)\n\nwindow = app.create_window(\n    title=\"Pyloid Browser\",\n)\nwindow.set_dev_tools(True)  # Activate developer tools\n\nwindow.load_url(\"https://www.example.com\")\nwindow.show_and_focus()\n\napp.run()\n```\n\n----------------------------------------\n\nTITLE: Listing All Keyboard Shortcuts in Python\nDESCRIPTION: An example showing how to retrieve and display all currently registered keyboard shortcuts in the application. The method returns a dictionary containing all shortcuts and their associated handlers.\n\nLANGUAGE: python\nCODE:\n```\nprint(window.get_all_shortcuts())\n```\n\n----------------------------------------\n\nTITLE: Handling Tray Click Events in Pyloid\nDESCRIPTION: Shows how to set up event handlers for different mouse actions on the tray icon. Supports double-click, middle-click, right-click, and left-click events, all of which can be dynamically modified.\n\nLANGUAGE: python\nCODE:\n```\napp.set_tray_actions(\n    {\n        TrayEvent.DoubleClick: lambda: print(\"Tray icon was double-clicked.\"),\n        TrayEvent.MiddleClick: lambda: print(\"Tray icon was middle-clicked.\"),\n        TrayEvent.RightClick: lambda: print(\"Tray icon was right-clicked.\"),\n        TrayEvent.LeftClick: lambda: print(\"Tray icon was left-clicked.\"),\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Practical JavaScript Event Triggering with Keyboard Shortcuts in Python\nDESCRIPTION: A complete example of adding a keyboard shortcut (Ctrl+Shift+E) that both prints a message to the console and emits a JavaScript event with data. This demonstrates inter-language communication through shortcuts.\n\nLANGUAGE: python\nCODE:\n```\nwindow.add_shortcut(\"Ctrl+Shift+E\", lambda: (\n    print(\"Ctrl+Shift+E shortcut was pressed.\"),\n    window.emit('pythonEvent', { \"message\": 'Hello from Python!' })\n))\n```\n\n----------------------------------------\n\nTITLE: Saving a File with Pyloid\nDESCRIPTION: Shows how to use the save_file_dialog method to select a location and filename for saving a file. The method accepts optional directory and file filter parameters and returns the selected path or None if cancelled.\n\nLANGUAGE: python\nCODE:\n```\napp = Pyloid(app_name=\"Pyloid-App\")\nfile_path = app.save_file_dialog(dir=\"/home/user\", filter=\"Text Files (*.txt)\")\nif file_path:\n    print(\"File will be saved to:\", file_path)\n```\n\n----------------------------------------\n\nTITLE: Selecting a Directory with Pyloid\nDESCRIPTION: Illustrates how to use the select_directory_dialog method to choose a directory. The method accepts an optional starting directory parameter and returns the path of the selected directory or None if no directory is selected.\n\nLANGUAGE: python\nCODE:\n```\napp = Pyloid(app_name=\"Pyloid-App\")\ndirectory_path = app.select_directory_dialog(dir=\"/home/user\")\nif directory_path:\n    print(\"Selected directory:\", directory_path)\n```\n\n----------------------------------------\n\nTITLE: Complete File Watching Implementation in Pyloid (Python)\nDESCRIPTION: Full example demonstrating how to set up a Pyloid application that watches a file. Includes application initialization, window creation, and the file watching setup.\n\nLANGUAGE: python\nCODE:\n```\nfrom pyloid import Pyloid\n\napp = Pyloid(app_name=\"Pyloid-App\", single_instance=True)\n\nwindow = app.create_window(\n    title=\"Pyloid Browser\",\n)\n\nwindow.load_url(\"https://www.example.com\")\nwindow.show_and_focus()\n\nresult = app.watch_file(\"/path/file.txt\")\nif result:\n    print(\"File watching started\")\nelse:\n    print(\"Failed to start file watching\")\n\napp.run()\n```\n\n----------------------------------------\n\nTITLE: Advanced Timer Usage with Counter (Full Code)\nDESCRIPTION: Complete example of advanced timer usage with state tracking in a Pyloid application. Shows how to implement a counter that increments every second using a periodic timer.\n\nLANGUAGE: python\nCODE:\n```\nfrom pyloid.timer import PyloidTimer\nfrom pyloid import Pyloid\n\n# Create a PyloidTimer instance\napp = Pyloid(app_name=\"Pyloid-App\")\ntimer_manager = PyloidTimer()\n\ncounter = 0\n\ndef count():\n    global counter\n    counter += 1\n    print(f\"Counter: {counter}\")\n\ntimer_id = timer_manager.start_periodic_timer(1000, count)\n\napp.run()\n```\n\n----------------------------------------\n\nTITLE: Retrieving Browser Windows\nDESCRIPTION: Method that returns a list of all browser windows created by the application.\n\nLANGUAGE: python\nCODE:\n```\ndef get_windows(self) -> List[BrowserWindow]:\n```\n\n----------------------------------------\n\nTITLE: Complete Example of Environment-based DevTools Configuration in Pyloid\nDESCRIPTION: A full implementation demonstrating conditional developer tools configuration based on the environment. Shows how to create a Pyloid app that enables developer tools in development mode and disables them in production mode.\n\nLANGUAGE: python\nCODE:\n```\nfrom pyloid import Pyloid\n\napp = Pyloid(app_name=\"Pyloid-App\", single_instance=True)\n\nif is_production():\n    window = app.create_window(\n        title=\"Pyloid Browser-production\",\n    )\n    window.set_dev_tools(False)  # Deactivate developer tools in production environment\nelse:\n    window = app.create_window(\n        title=\"Pyloid Browser-dev\",\n        dev_tools=True  # Activate developer tools in development environment\n    )\n\nwindow.load_url(\"https://www.example.com\")\nwindow.show_and_focus()\n\napp.run()\n```\n\n----------------------------------------\n\nTITLE: Complete Implementation for Getting Watched Files in Pyloid (Python)\nDESCRIPTION: Full example showing how to retrieve only watched files in a Pyloid application. Includes application setup and the retrieval operation.\n\nLANGUAGE: python\nCODE:\n```\nfrom pyloid import Pyloid\n\napp = Pyloid(app_name=\"Pyloid-App\", single_instance=True)\n\nwindow = app.create_window(\n    title=\"Pyloid Browser\",\n)\n\nwindow.load_url(\"https://www.example.com\")\nwindow.show_and_focus()\n\nwatched_files = app.get_watched_files()\nprint(\"Watched files:\", watched_files)\n\napp.run()\n```\n\n----------------------------------------\n\nTITLE: Displaying a Basic Notification Example in Pyloid\nDESCRIPTION: Practical example of displaying a notification with a specific title and message content. This creates a simple notification with predefined text.\n\nLANGUAGE: python\nCODE:\n```\napp.show_notification(\"Notification\", \"Notification message\")\n```\n\n----------------------------------------\n\nTITLE: Dynamically Updating Tray Menu Items in Pyloid\nDESCRIPTION: Shows how to update the tray context menu dynamically during runtime. This example uses a timer to change the menu items after a specified delay.\n\nLANGUAGE: python\nCODE:\n```\ndef update_menu():\n    app.set_tray_menu_items(\n        [\n            {\n                \"label\": \"New Menu 1\",\n                \"callback\": lambda: print(\"New Menu 1 clicked\"),\n            },\n            {\n                \"label\": \"New Menu 2\",\n                \"callback\": lambda: print(\"New Menu 2 clicked\"),\n            },\n            {\"label\": \"Exit\", \"callback\": lambda: app.quit()},\n        ]\n    )\n\n# Update tray menu after 5 seconds\ntimer.start_single_shot_timer(5000, update_menu)\n```\n\n----------------------------------------\n\nTITLE: Capturing Screenshots with Pyloid Monitor\nDESCRIPTION: Demonstrates how to capture the entire desktop screen or a specific area using the Monitor.capture method. The method saves the captured image to the specified path and returns the save path or None if an error occurs.\n\nLANGUAGE: python\nCODE:\n```\napp = Pyloid(\"Pyloid-App\")\nmonitor = app.get_primary_monitor()\nsave_path = monitor.capture(\"screenshot.png\")\nprint(f\"Screenshot saved at: {save_path}\")\n```\n\n----------------------------------------\n\nTITLE: Adding Lambda-based Keyboard Shortcut in Python\nDESCRIPTION: An example of adding a keyboard shortcut (Ctrl+Shift+S) using a lambda function that prints a message when triggered. This demonstrates the simplest way to associate an action with a shortcut.\n\nLANGUAGE: python\nCODE:\n```\nwindow.add_shortcut(\"Ctrl+Shift+S\", lambda: (\n    print(\"Ctrl+Shift+S shortcut was pressed.\"),\n))\n```\n\n----------------------------------------\n\nTITLE: Complete Directory Change Callback Implementation in Pyloid (Python)\nDESCRIPTION: Full example showing how to set up a callback function for directory changes in a Pyloid application. Includes application setup, directory watching, and the callback implementation.\n\nLANGUAGE: python\nCODE:\n```\nfrom pyloid import Pyloid\n\napp = Pyloid(app_name=\"Pyloid-App\", single_instance=True)\n\nwindow = app.create_window(\n    title=\"Pyloid Browser\",\n)\n\nwindow.load_url(\"https://www.example.com\")\nwindow.show_and_focus()\n\napp.watch_directory(\"/path/directory\")\n\n# Define callback function\ndef on_directory_changed(path):\n    print(f\"Directory has been changed: {path}\")\n\n# Set callback function\napp.set_directory_change_callback(on_directory_changed)\n\napp.run()\n```\n\n----------------------------------------\n\nTITLE: Adding Context Menu Items to Tray Icon in Pyloid\nDESCRIPTION: Demonstrates how to add items to the context menu that appears when right-clicking the tray icon. Each menu item has a label and an associated callback function.\n\nLANGUAGE: python\nCODE:\n```\napp.set_tray_menu_items(\n    [\n        {\"label\": \"Show Window\", \"callback\": lambda: app.show_and_focus_main_window()},\n        {\"label\": \"Exit\", \"callback\": lambda: app.quit()},\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Adding a Draggable Region in HTML\nDESCRIPTION: This HTML snippet shows how to make a div element function as a draggable region by adding the data-pyloid-drag-region attribute. This allows the user to move the window by clicking and dragging this element.\n\nLANGUAGE: html\nCODE:\n```\n<div data-pyloid-drag-region>Draggable Area</div>\n```\n\n----------------------------------------\n\nTITLE: Adding Function-based Keyboard Shortcut in Python\nDESCRIPTION: An example showing how to add a keyboard shortcut (Ctrl+Shift+F) using a regular named function. This approach is useful for more complex operations or when reusing the same handler for multiple shortcuts.\n\nLANGUAGE: python\nCODE:\n```\ndef handle_shortcut():\n    print(\"Ctrl+Shift+F shortcut was pressed.\")\n    print(\"Current time:\", datetime.now())\n\nwindow.add_shortcut(\"Ctrl+Shift+F\", handle_shortcut)\n```\n\n----------------------------------------\n\nTITLE: Complete JavaScript Example for Event Handling\nDESCRIPTION: A comprehensive example showing how to set up multiple event listeners in JavaScript to handle events from Python, and how to properly clean up those listeners when they're no longer needed.\n\nLANGUAGE: javascript\nCODE:\n```\n// Setting up Python event listeners\nwindow.pyloid.EventAPI.listen('simpleEvent', function () {\n  console.log('Received simple event from Python');\n});\n\nwindow.pyloid.EventAPI.listen('userDataUpdate', function (userData) {\n  console.log('Received user data update from Python:', userData);\n});\n\n// Later, to stop listening for events\nfunction cleanupEventListeners() {\n  window.pyloid.EventAPI.unlisten('simpleEvent');\n  window.pyloid.EventAPI.unlisten('userDataUpdate');\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Monitor Geometry Change Callback in Pyloid\nDESCRIPTION: Shows how to register a callback function that will be triggered when a monitor's geometry changes. The code defines a callback function and then registers it with the monitor.geometry_changed() method.\n\nLANGUAGE: python\nCODE:\n```\napp = Pyloid(\"Pyloid-App\")\ndef on_geometry_changed():\n    print(\"Geometry changed!\")\nmonitor = app.get_primary_monitor()\nmonitor.geometry_changed(on_geometry_changed)\n```\n\n----------------------------------------\n\nTITLE: Triggering JavaScript Events with Keyboard Shortcuts in Python\nDESCRIPTION: A syntax example showing how to trigger JavaScript events when a keyboard shortcut is pressed. This enables communication between Python backend and JavaScript frontend through the shortcut system.\n\nLANGUAGE: python\nCODE:\n```\nwindow.add_shortcut(\"shortcut\", lambda: (\n    window.emit('eventName', { \"data\": 'value' })\n))\n```\n\n----------------------------------------\n\nTITLE: Configuring System Tray Menu Items\nDESCRIPTION: Method that defines the menu items that appear when right-clicking the system tray icon, mapping labels to callback functions.\n\nLANGUAGE: python\nCODE:\n```\ndef set_tray_menu_items(self, tray_menu_items: Dict[str, Callable]):\n```\n\n----------------------------------------\n\nTITLE: Getting Window ID with WindowAPI in JavaScript\nDESCRIPTION: Retrieves the current window's unique identifier using the getWindowId() method from the WindowAPI.\n\nLANGUAGE: javascript\nCODE:\n```\nconst windowId = await window.pyloid.WindowAPI.getWindowId();\nconsole.log(windowId);\n```\n\n----------------------------------------\n\nTITLE: Setting Geometry Change Callback in Python\nDESCRIPTION: Method to set a callback function that will be called when the monitor's geometry changes.\n\nLANGUAGE: python\nCODE:\n```\ndef geometry_changed(self, callback: Callable):\n```\n\n----------------------------------------\n\nTITLE: Installing Python dependencies for Pyloid\nDESCRIPTION: Commands to install the required Python packages for building Pyloid. Uses pip to install all dependencies listed in the requirements.txt file.\n\nLANGUAGE: bash\nCODE:\n```\npip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Configuring Tray Icon Actions\nDESCRIPTION: Method that defines the behavior when the tray icon is activated through different actions (click, double-click, etc.).\n\nLANGUAGE: python\nCODE:\n```\ndef set_tray_actions(self, actions):\n```\n\n----------------------------------------\n\nTITLE: Manually Switching Themes in Pyloid with JavaScript\nDESCRIPTION: Demonstrates how to manually switch between light and dark themes in Pyloid using JavaScript. Shows how to set the data-pyloid-theme attribute on the document's root element.\n\nLANGUAGE: javascript\nCODE:\n```\n// Switch to dark mode\ndocument.documentElement.setAttribute('data-pyloid-theme', 'dark');\n\n// Switch to light mode\ndocument.documentElement.setAttribute('data-pyloid-theme', 'light');\n```\n\n----------------------------------------\n\nTITLE: Getting Monitor Serial Number in Python\nDESCRIPTION: Method that returns the serial number of the monitor.\n\nLANGUAGE: python\nCODE:\n```\ndef serial_number(self) -> str:\n```\n\n----------------------------------------\n\nTITLE: Getting Window by ID\nDESCRIPTION: Method that retrieves a specific browser window using its unique identifier, returning the window object or None if not found.\n\nLANGUAGE: python\nCODE:\n```\ndef get_window_by_id(self, window_id: str) -> Optional[BrowserWindow]:\n```\n\n----------------------------------------\n\nTITLE: Setting Notification Click Callback in Pyloid\nDESCRIPTION: Shows how to register a callback function that will be executed when a notification is clicked. This allows for handling user interaction with notifications.\n\nLANGUAGE: python\nCODE:\n```\napp.set_notification_callback(callback_function)\n```\n\n----------------------------------------\n\nTITLE: Creating Single-Shot Timers (Full Code)\nDESCRIPTION: Complete example of creating and using a single-shot timer within a Pyloid application. Shows the full context including application initialization and execution.\n\nLANGUAGE: python\nCODE:\n```\nfrom pyloid.timer import PyloidTimer\nfrom pyloid import Pyloid\n\n# Create a PyloidTimer instance\napp = Pyloid(app_name=\"Pyloid-App\")\ntimer_manager = PyloidTimer()\n\ndef delayed_message():\n    print(\"5 seconds have passed!\")\n\n# Start a single-shot timer that prints a message after 5 seconds\ntimer_id = timer_manager.start_single_shot_timer(5000, delayed_message)\n\napp.run()\n```\n\n----------------------------------------\n\nTITLE: Closing Window by ID\nDESCRIPTION: Method that closes a specific window identified by its ID.\n\nLANGUAGE: python\nCODE:\n```\ndef close_window_by_id(self, window_id: str):\n```\n\n----------------------------------------\n\nTITLE: Registering Theme Change Event Listener in Pyloid\nDESCRIPTION: Shows how to listen for theme changes in Pyloid applications using the themeChange event. The event provides the current theme ('light' or 'dark') in the event detail.\n\nLANGUAGE: javascript\nCODE:\n```\ndocument.addEventListener('themeChange', (e) => {\n    console.log('Theme changed:', e.detail.theme); // 'light' or 'dark'\n\n    updateTheme(e.detail.theme);\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Monitor Class in Python\nDESCRIPTION: Constructor for the Monitor class that takes a monitor index and QScreen object as parameters.\n\nLANGUAGE: python\nCODE:\n```\ndef __init__(self, index: int, screen: QScreen):\n```\n\n----------------------------------------\n\nTITLE: Creating Precise Timers (Full Code)\nDESCRIPTION: Complete example showing how to use precise timers within a Pyloid application. Demonstrates the creation and configuration of a high-precision timer with 100ms intervals.\n\nLANGUAGE: python\nCODE:\n```\nfrom pyloid.timer import PyloidTimer\nfrom pyloid import Pyloid\n\n# Create a PyloidTimer instance\napp = Pyloid(app_name=\"Pyloid-App\")\ntimer_manager = PyloidTimer()\n\ndef precise_task():\n    print(\"Executing precise task\")\n\n# Start a precise periodic timer with 100ms interval\nprecise_timer_id = timer_manager.start_precise_periodic_timer(100, precise_task)\n\napp.run()\n```\n\n----------------------------------------\n\nTITLE: Sending Theme Preferences to API in Pyloid\nDESCRIPTION: Demonstrates how to save user theme preferences by sending them to a server API. This function can be triggered when the theme changes to persist user preferences.\n\nLANGUAGE: javascript\nCODE:\n```\nfunction updateTheme(theme) {\n    // Save user preferences\n    fetch('/api/user/preferences', {\n        method: 'POST',\n        body: JSON.stringify({ theme: theme }),\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Signals in QThread for PySide6\nDESCRIPTION: Shows how to define custom signals in a QThread subclass to communicate with the main thread. The example includes progress updates and result delivery signals.\n\nLANGUAGE: python\nCODE:\n```\nfrom PySide6.QtCore import QThread, Signal\n\nclass WorkerThread(QThread):\n    progress = Signal(int)  # Signal for progress updates\n    result = Signal(object)  # Signal for delivering results\n\n    def run(self):\n        # Emit signal during operation\n        self.progress.emit(50)\n        # Deliver operation result\n        self.result.emit(\"Task completed\")\n```\n\n----------------------------------------\n\nTITLE: Retrieving Monitor Information in Pyloid\nDESCRIPTION: Shows how to get all information about a monitor as a dictionary using the Monitor.info method. This provides comprehensive details about the monitor in a single method call.\n\nLANGUAGE: python\nCODE:\n```\napp = Pyloid(\"Pyloid-App\")\nmonitor = app.get_primary_monitor()\ninfo = monitor.info()\nprint(\"Monitor Info:\", info)\n```\n\n----------------------------------------\n\nTITLE: Displaying Notifications in Pyloid\nDESCRIPTION: Shows how to display a notification to users with a title and message. This method creates a system notification that will appear to the user.\n\nLANGUAGE: python\nCODE:\n```\napp.show_notification(title, message)\n```\n\n----------------------------------------\n\nTITLE: HTML Page with JavaScript Calling Python Methods\nDESCRIPTION: A simple HTML page that calls a Python method using the Pyloid bridge. The page listens for the 'pyloidReady' event, then calls the exposed 'echo' method from Python and displays the result.\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Pyloid</title>\n    <script>\n      document.addEventListener('pyloidReady', async function () {\n        console.log('Pyloid is ready');\n\n        let result = await window.pyloid.CustomAPI.echo('Hello, Pyloid!');\n        document.querySelector('p').textContent = result;\n      });\n    </script>\n  </head>\n  <body>\n    <h1>Hello!</h1>\n    <p>None</p>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Capturing Window Screenshot with WindowAPI in JavaScript\nDESCRIPTION: Captures the current window's view and saves it to the specified path using the capture() method from the WindowAPI.\n\nLANGUAGE: javascript\nCODE:\n```\nconst filePath = await window.pyloid.WindowAPI.capture(\n  '/path/to/save/screenshot.png'\n);\nif (filePath) {\n  console.log(`Screenshot saved to ${filePath}`);\n} else {\n  console.log('Capture failed');\n}\n```\n\n----------------------------------------\n\nTITLE: Watching a File in Pyloid (Python)\nDESCRIPTION: Code to start monitoring changes in a specific file. It returns a boolean value indicating success or failure of the watch operation.\n\nLANGUAGE: python\nCODE:\n```\nresult = app.watch_file(\"path/file.txt\")\nif result:\n    print(\"File watching started\")\nelse:\n    print(\"Failed to start file watching\")\n```\n\n----------------------------------------\n\nTITLE: Getting Physical DPI in Python\nDESCRIPTION: Method that returns the physical dots per inch of the monitor.\n\nLANGUAGE: python\nCODE:\n```\ndef physical_dots_per_inch(self) -> float:\n```\n\n----------------------------------------\n\nTITLE: Getting Clipboard Text\nDESCRIPTION: Method that retrieves text content from the system clipboard.\n\nLANGUAGE: python\nCODE:\n```\ndef get_clipboard_text(self) -> str:\n```\n\n----------------------------------------\n\nTITLE: Watching a Directory in Pyloid (Python)\nDESCRIPTION: Code to start monitoring changes in a specific directory. Returns a boolean indicating the success of the operation.\n\nLANGUAGE: python\nCODE:\n```\nresult = app.watch_directory(\"/path/directory\")\nif result:\n    print(\"Directory watching started\")\nelse:\n    print(\"Failed to start directory watching\")\n```\n\n----------------------------------------\n\nTITLE: Configuring BrowserWindow Properties\nDESCRIPTION: Methods for modifying window properties such as title, size, position, frame visibility, context menu, and developer tools.\n\nLANGUAGE: python\nCODE:\n```\ndef set_title(self, title: str) -> None:\n```\n\nLANGUAGE: python\nCODE:\n```\ndef set_size(self, width: int, height: int) -> None:\n```\n\nLANGUAGE: python\nCODE:\n```\ndef set_position(self, x: int, y: int) -> None:\n```\n\nLANGUAGE: python\nCODE:\n```\ndef set_frame(self, frame: bool) -> None:\n```\n\nLANGUAGE: python\nCODE:\n```\ndef set_context_menu(self, context_menu: bool) -> None:\n```\n\nLANGUAGE: python\nCODE:\n```\ndef set_dev_tools(self, enable: bool) -> None:\n```\n\n----------------------------------------\n\nTITLE: Toggling Fullscreen with WindowAPI in JavaScript\nDESCRIPTION: Toggles fullscreen mode for the current window using the toggleFullscreen() method from the WindowAPI.\n\nLANGUAGE: javascript\nCODE:\n```\nawait window.pyloid.WindowAPI.toggleFullscreen();\n```\n\n----------------------------------------\n\nTITLE: Setting a Directory Change Callback in Pyloid (Python)\nDESCRIPTION: Code to define and set a callback function that will be executed when a watched directory changes. The callback receives the path of the changed directory as an argument.\n\nLANGUAGE: python\nCODE:\n```\ndef on_directory_changed(path):\n    print(f\"Directory has been changed: {path}\")\n\napp.set_directory_change_callback(on_directory_changed)\n```\n\n----------------------------------------\n\nTITLE: Complete Pyloid Tray Implementation Example\nDESCRIPTION: A comprehensive example demonstrating all tray functionality including icon setting, event handling, menu configuration, tooltips, and animation. Shows how to dynamically update all tray features using timers.\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom pyloid import PyloidApp, TrayEvent, is_production, get_production_path, PyloidTimer\n\n\napp = PyloidApp(\"Pyloid-App\", single_instance=True)\ntimer = PyloidTimer()\n\nif (is_production()):\n    app.set_icon(os.path.join(get_production_path(), \"icon.ico\"))\n    app.set_tray_icon(os.path.join(get_production_path(), \"icon.ico\"))\nelse:\n    app.set_icon(\"assets/icon.ico\")\n    app.set_tray_icon(\"assets/icon.ico\")\n\napp.set_tray_actions(\n    {\n        TrayEvent.DoubleClick: lambda: print(\"Tray icon was double-clicked.\"),\n        TrayEvent.MiddleClick: lambda: print(\"Tray icon was middle-clicked.\"),\n        TrayEvent.RightClick: lambda: print(\"Tray icon was right-clicked.\"),\n        TrayEvent.LeftClick: lambda: print(\"Tray icon was left-clicked.\"),\n    }\n)\n\napp.set_tray_menu_items(\n    [\n        {\"label\": \"Show Window\", \"callback\": lambda: app.show_and_focus_main_window()},\n        {\"label\": \"Exit\", \"callback\": lambda: app.quit()},\n    ]\n)\n\n# Set tray icon tooltip\napp.set_tray_tooltip(\"This is a Pyloid application.\")\n\ndef update_menu():\n    app.set_tray_menu_items(\n        [\n            {\n                \"label\": \"New Menu 1\",\n                \"callback\": lambda: print(\"New Menu 1 clicked\"),\n            },\n            {\n                \"label\": \"New Menu 2\",\n                \"callback\": lambda: print(\"New Menu 2 clicked\"),\n            },\n            {\"label\": \"Exit\", \"callback\": lambda: app.quit()},\n        ]\n    )\n\ndef update_tray_icon():\n    # Set tray icon animation\n    app.set_tray_icon_animation(\n        [\n            \"assets/frame1.png\",\n            \"assets/frame2.png\",\n            \"assets/frame3.png\",\n            \"assets/frame4.png\",\n        ],\n        interval=500,\n    )\n\n# Update tray menu after 5 seconds\ntimer.start_single_shot_timer(5000, update_menu)\n\n# Start tray icon animation after 3 seconds\ntimer.start_single_shot_timer(3000, update_tray_icon)\n\n# Change tray icon to static icon after 6 seconds\ntimer.start_single_shot_timer(6000, lambda: app.set_tray_icon(\"assets/icon.ico\"))\n\n# Change tray icon tooltip after 10 seconds\ntimer.start_single_shot_timer(10000, lambda: app.set_tray_tooltip(\"New tooltip!\"))\n```\n\n----------------------------------------\n\nTITLE: Complete Pyloid Tray Implementation Example\nDESCRIPTION: A comprehensive example demonstrating all tray functionality including icon setting, event handling, menu configuration, tooltips, and animation. Shows how to dynamically update all tray features using timers.\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom pyloid import PyloidApp, TrayEvent, is_production, get_production_path, PyloidTimer\n\n\napp = PyloidApp(\"Pyloid-App\", single_instance=True)\ntimer = PyloidTimer()\n\nif (is_production()):\n    app.set_icon(os.path.join(get_production_path(), \"icon.ico\"))\n    app.set_tray_icon(os.path.join(get_production_path(), \"icon.ico\"))\nelse:\n    app.set_icon(\"assets/icon.ico\")\n    app.set_tray_icon(\"assets/icon.ico\")\n\napp.set_tray_actions(\n    {\n        TrayEvent.DoubleClick: lambda: print(\"Tray icon was double-clicked.\"),\n        TrayEvent.MiddleClick: lambda: print(\"Tray icon was middle-clicked.\"),\n        TrayEvent.RightClick: lambda: print(\"Tray icon was right-clicked.\"),\n        TrayEvent.LeftClick: lambda: print(\"Tray icon was left-clicked.\"),\n    }\n)\n\napp.set_tray_menu_items(\n    [\n        {\"label\": \"Show Window\", \"callback\": lambda: app.show_and_focus_main_window()},\n        {\"label\": \"Exit\", \"callback\": lambda: app.quit()},\n    ]\n)\n\n# Set tray icon tooltip\napp.set_tray_tooltip(\"This is a Pyloid application.\")\n\ndef update_menu():\n    app.set_tray_menu_items(\n        [\n            {\n                \"label\": \"New Menu 1\",\n                \"callback\": lambda: print(\"New Menu 1 clicked\"),\n            },\n            {\n                \"label\": \"New Menu 2\",\n                \"callback\": lambda: print(\"New Menu 2 clicked\"),\n            },\n            {\"label\": \"Exit\", \"callback\": lambda: app.quit()},\n        ]\n    )\n\ndef update_tray_icon():\n    # Set tray icon animation\n    app.set_tray_icon_animation(\n        [\n            \"assets/frame1.png\",\n            \"assets/frame2.png\",\n            \"assets/frame3.png\",\n            \"assets/frame4.png\",\n        ],\n        interval=500,\n    )\n\n# Update tray menu after 5 seconds\ntimer.start_single_shot_timer(5000, update_menu)\n\n# Start tray icon animation after 3 seconds\ntimer.start_single_shot_timer(3000, update_tray_icon)\n\n# Change tray icon to static icon after 6 seconds\ntimer.start_single_shot_timer(6000, lambda: app.set_tray_icon(\"assets/icon.ico\"))\n\n# Change tray icon tooltip after 10 seconds\ntimer.start_single_shot_timer(10000, lambda: app.set_tray_tooltip(\"New tooltip!\"))\n```\n\n----------------------------------------\n\nTITLE: Getting Available Monitor Geometry in Pyloid\nDESCRIPTION: Shows how to retrieve the usable area of a monitor (excluding system UI elements) using the Monitor.available_geometry method. Returns a dictionary with x, y, width, and height values.\n\nLANGUAGE: python\nCODE:\n```\napp = Pyloid(\"Pyloid-App\")\nmonitor = app.get_primary_monitor()\navailable_geometry = monitor.available_geometry()\nprint(\"Available Geometry:\", available_geometry)\n```\n\n----------------------------------------\n\nTITLE: Adding Basic Keyboard Shortcut in Python\nDESCRIPTION: A basic syntax example showing how to add a keyboard shortcut in a Tauri application. The shortcut is registered with a lambda function that executes one or more actions when the shortcut is triggered.\n\nLANGUAGE: python\nCODE:\n```\nwindow.add_shortcut(\"shortcut\", lambda: (action1, action2, ...))\n```\n\n----------------------------------------\n\nTITLE: Checking Primary Monitor Status in Python\nDESCRIPTION: Method to determine if the current monitor is the primary display.\n\nLANGUAGE: python\nCODE:\n```\ndef is_primary(self) -> bool:\n```\n\n----------------------------------------\n\nTITLE: Getting Virtual Monitor Geometry in Pyloid\nDESCRIPTION: Shows how to retrieve the combined geometry of all monitors in a multi-monitor setup using the Monitor.virtual_geometry method. Returns a dictionary with x, y, width, and height values.\n\nLANGUAGE: python\nCODE:\n```\napp = Pyloid(\"Pyloid-App\")\nmonitor = app.get_primary_monitor()\nvirtual_geometry = monitor.virtual_geometry()\nprint(\"Virtual Geometry:\", virtual_geometry)\n```\n\n----------------------------------------\n\nTITLE: Custom Theme Variables for Comprehensive Styling in Pyloid\nDESCRIPTION: Defines a comprehensive set of CSS variables for both light and dark themes in Pyloid. Includes variables for primary and secondary colors, background, surface, font, and border colors.\n\nLANGUAGE: css\nCODE:\n```\n[data-pyloid-theme='light'] {\n  --primary-color: #007bff;\n  --secondary-color: #6c757d;\n  --background-color: white;\n  --surface-color: #f8f9fa;\n  --font-color: #333333;\n  --border-color: #dee2e6;\n}\n\n[data-pyloid-theme='dark'] {\n  --primary-color: #0d6efd;\n  --secondary-color: #6c757d;\n  --background-color: #333333;\n  --surface-color: #424242;\n  --font-color: white;\n  --border-color: #495057;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Pyloid with a Custom App Name for Auto-Start\nDESCRIPTION: Shows how to initialize a Pyloid application with a custom app_name, which is used as the key in the system's auto-start registry. Setting a unique app_name allows managing auto-start settings for multiple applications.\n\nLANGUAGE: python\nCODE:\n```\nfrom pyloid import Pyloid\n\napp = Pyloid(app_name=\"MyUniqueApp\")\napp.set_auto_start(True)\n```\n\n----------------------------------------\n\nTITLE: Getting Available Virtual Monitor Geometry in Pyloid\nDESCRIPTION: Shows how to retrieve the combined usable area of all monitors (excluding system UI elements) using the Monitor.available_virtual_geometry method. Returns a dictionary with x, y, width, and height values.\n\nLANGUAGE: python\nCODE:\n```\napp = Pyloid(\"Pyloid-App\")\nmonitor = app.get_primary_monitor()\navailable_virtual_geometry = monitor.available_virtual_geometry()\nprint(\"Available Virtual Geometry:\", available_virtual_geometry)\n```\n\n----------------------------------------\n\nTITLE: Configuring Developer Tools as a Parameter in Pyloid Window Creation\nDESCRIPTION: Shows how to enable developer tools by setting the dev_tools parameter to True when creating a window with the create_window method. This approach enables developer tools at the point of window creation.\n\nLANGUAGE: python\nCODE:\n```\nwindow = app.create_window(\n    title=\"Pylon Browser\",\n    dev_tools=True  # Activate developer tools (default is False)\n)\n```\n\n----------------------------------------\n\nTITLE: Changing Timer Interval (Full Code)\nDESCRIPTION: Complete example demonstrating how to change a timer's interval within a Pyloid application context. Shows creating a timer at 1 second and updating it to 3 seconds.\n\nLANGUAGE: python\nCODE:\n```\nfrom pyloid.timer import PyloidTimer\nfrom pyloid import Pyloid\n\n# Create a PyloidTimer instance\napp = Pyloid(app_name=\"Pyloid-App\")\ntimer_manager = PyloidTimer()\n\n# Start a timer\ntimer_id = timer_manager.start_periodic_timer(1000, lambda: print(\"Hello!\"))\n\n# Change the timer interval to 3 seconds\ntimer_manager.set_interval(timer_id, 3000)\n\napp.run()\n```\n\n----------------------------------------\n\nTITLE: Retrieving Monitor Information in Python\nDESCRIPTION: Method that returns a dictionary containing all available information about the monitor.\n\nLANGUAGE: python\nCODE:\n```\ndef info(self) -> dict:\n```\n\n----------------------------------------\n\nTITLE: Configuring Developer Tools with the set_dev_tools Method in Pyloid\nDESCRIPTION: Demonstrates enabling developer tools after window creation using the set_dev_tools() method. This approach allows setting developer tools state dynamically after the window is created.\n\nLANGUAGE: python\nCODE:\n```\nwindow = app.create_window(\n    title=\"Pyloid Browser\",\n)\nwindow.set_dev_tools(True)  # Activate developer tools\n```\n\n----------------------------------------\n\nTITLE: Copying Text to Clipboard in Pyloid\nDESCRIPTION: Sets text content to the system clipboard. This function allows you to programmatically copy text that can then be pasted elsewhere.\n\nLANGUAGE: python\nCODE:\n```\napp.set_clipboard_text(\"Text to be copied\")\n```\n\n----------------------------------------\n\nTITLE: Getting Monitor Size in Python\nDESCRIPTION: Method that returns the dimensions of the monitor as a dictionary with width and height keys.\n\nLANGUAGE: python\nCODE:\n```\ndef size(self) -> dict:\n```\n\n----------------------------------------\n\nTITLE: Complete Implementation for Getting Watched Directories in Pyloid (Python)\nDESCRIPTION: Full example showing how to retrieve only watched directories in a Pyloid application. Includes application setup and the retrieval operation.\n\nLANGUAGE: python\nCODE:\n```\nfrom pyloid import Pyloid\n\napp = Pyloid(app_name=\"Pyloid-App\", single_instance=True)\n\nwindow = app.create_window(\n    title=\"Pyloid Browser\",\n)\n\nwindow.load_url(\"https://www.example.com\")\nwindow.show_and_focus()\n\nwatched_directories = app.get_watched_directories()\nprint(\"Watched directories:\", watched_directories)\n\napp.run()\n```\n\n----------------------------------------\n\nTITLE: Emitting Events with Data from Python\nDESCRIPTION: Demonstrates how to emit an event from Python to JavaScript with a data payload. The data is passed as a dictionary and will be converted to a JSON object in JavaScript.\n\nLANGUAGE: python\nCODE:\n```\n# Emitting an event with data\nuser_data = {\n    'id': 1,\n    'name': 'John Doe',\n    'email': 'john@example.com'\n}\nwindow.emit('userDataUpdate', user_data)\n```\n\n----------------------------------------\n\nTITLE: Creating Single-Shot Timers (Partial Code)\nDESCRIPTION: Demonstrates how to create a timer that executes a function only once after a specified delay (5 seconds/5000ms). Returns a timer_id for management purposes.\n\nLANGUAGE: python\nCODE:\n```\ndef delayed_message():\n    print(\"5 seconds have passed!\")\n\n# Start a single-shot timer that prints a message after 5 seconds\ntimer_id = timer_manager.start_single_shot_timer(5000, delayed_message)\n```\n\n----------------------------------------\n\nTITLE: Complete Implementation for Getting Watched Paths in Pyloid (Python)\nDESCRIPTION: Full example showing how to retrieve all watched paths in a Pyloid application. Includes application setup and the retrieval operation.\n\nLANGUAGE: python\nCODE:\n```\nfrom pyloid import Pyloid\n\napp = Pyloid(app_name=\"Pyloid-App\", single_instance=True)\n\nwindow = app.create_window(\n    title=\"Pyloid Browser\",\n)\n\nwindow.load_url(\"https://www.example.com\")\nwindow.show_and_focus()\n\nwatched_paths = app.get_watched_paths()\nprint(\"All watched paths:\", watched_paths)\n\napp.run()\n```\n\n----------------------------------------\n\nTITLE: Setting Refresh Rate Change Callback in Python\nDESCRIPTION: Method to set a callback function that will be called when the monitor's refresh rate changes.\n\nLANGUAGE: python\nCODE:\n```\ndef refresh_rate_changed(self, callback: Callable):\n```\n\n----------------------------------------\n\nTITLE: Stopping Watch Operations in Pyloid (Python)\nDESCRIPTION: Code to stop watching a specific file or directory that was previously being monitored. Returns a boolean indicating whether the operation was successful.\n\nLANGUAGE: python\nCODE:\n```\nresult = app.stop_watching(\"/path/to/file_or_directory\")\nif result:\n    print(\"Watching stopped successfully\")\nelse:\n    print(\"Failed to stop watching\")\n```\n\n----------------------------------------\n\nTITLE: Getting Only Watched Files in Pyloid (Python)\nDESCRIPTION: Code to retrieve a list of only the files (not directories) that are currently being watched in a Pyloid application.\n\nLANGUAGE: python\nCODE:\n```\nwatched_files = app.get_watched_files()\nprint(\"Watched files:\", watched_files)\n```\n\n----------------------------------------\n\nTITLE: Developer Tools in BrowserWindow\nDESCRIPTION: Methods for working with developer tools in the browser window, including opening the dev tools panel.\n\nLANGUAGE: python\nCODE:\n```\ndef open_dev_tools(self) -> None:\n```\n\n----------------------------------------\n\nTITLE: Getting All Watched Paths in Pyloid (Python)\nDESCRIPTION: Code to retrieve a list of all currently watched paths (both files and directories) in a Pyloid application.\n\nLANGUAGE: python\nCODE:\n```\nwatched_paths = app.get_watched_paths()\nprint(\"All watched paths:\", watched_paths)\n```\n\n----------------------------------------\n\nTITLE: Setting Up GIF Splash Screen in Pyloid\nDESCRIPTION: Shows how to configure an animated GIF splash screen for a Pyloid window. This implementation allows for displaying animated splash screens during application loading.\n\nLANGUAGE: python\nCODE:\n```\nwindow.set_gif_splash_screen(gif_path=\"./assets/loading.gif\")\n```\n\n----------------------------------------\n\nTITLE: Initializing Pyloid Application with Custom APIs\nDESCRIPTION: Demonstrates how to initialize a Pyloid application and register custom API classes. The custom APIs are passed as a list to the create_window method and will be available in the JavaScript context.\n\nLANGUAGE: python\nCODE:\n```\nfrom pyloid import Pyloid\n\napp = Pyloid(app_name=\"CustomApp\")\n\nwindow = app.create_window(title=\"Custom API Example\", js_apis=[CustomAPI(), MessageAPI()])\nwindow.load_file(\"path/index.html\")\nwindow.show()\n\napp.run()\n```\n\n----------------------------------------\n\nTITLE: Getting Monitor Orientation in Pyloid\nDESCRIPTION: Shows how to retrieve the orientation of a monitor using the Monitor.orientation method. This returns the current orientation as a string value.\n\nLANGUAGE: python\nCODE:\n```\napp = Pyloid(\"Pyloid-App\")\nmonitor = app.get_primary_monitor()\norientation = monitor.orientation()\nprint(\"Orientation:\", orientation)\n```\n\n----------------------------------------\n\nTITLE: Manually Closing Splash Screen in Pyloid\nDESCRIPTION: Demonstrates how to manually close a splash screen. This is particularly useful when splash screens are configured with 'close_on_load=False'.\n\nLANGUAGE: python\nCODE:\n```\nwindow.close_splash_screen()\n```\n\n----------------------------------------\n\nTITLE: Setting a Tray Icon in Pyloid\nDESCRIPTION: Demonstrates how to set a basic system tray icon using the set_tray_icon method. The icon can be changed dynamically while the application is running.\n\nLANGUAGE: python\nCODE:\n```\napp.set_tray_icon(\"icons/icon.ico\")\n```\n\n----------------------------------------\n\nTITLE: Retrieving Physical DPI in Pyloid\nDESCRIPTION: Demonstrates how to get the physical dots per inch (DPI) of a monitor using the Monitor.physical_dots_per_inch method. This returns the actual physical resolution of the display.\n\nLANGUAGE: python\nCODE:\n```\napp = Pyloid(\"Pyloid-App\")\nmonitor = app.get_primary_monitor()\nphysical_dpi = monitor.physical_dots_per_inch()\nprint(\"Physical DPI:\", physical_dpi)\n```\n\n----------------------------------------\n\nTITLE: Removing Keyboard Shortcuts in Python\nDESCRIPTION: A basic syntax example showing how to remove a previously registered keyboard shortcut by specifying its key combination string. This is useful for dynamically managing shortcuts during application runtime.\n\nLANGUAGE: python\nCODE:\n```\nwindow.remove_shortcut(\"<shortcut>\")\n```\n\n----------------------------------------\n\nTITLE: Emitting Simple Events from Python\nDESCRIPTION: Example of emitting an event from Python to JavaScript without any data payload using the WindowBrowser class's emit method.\n\nLANGUAGE: python\nCODE:\n```\n# Emitting a simple event\nwindow.emit('simpleEvent')\n```\n\n----------------------------------------\n\nTITLE: Getting Monitor Refresh Rate in Pyloid\nDESCRIPTION: Shows how to retrieve the refresh rate of a monitor in Hz using the Monitor.refresh_rate method. This returns the number of times the display updates per second.\n\nLANGUAGE: python\nCODE:\n```\napp = Pyloid(\"Pyloid-App\")\nmonitor = app.get_primary_monitor()\nrefresh_rate = monitor.refresh_rate()\nprint(\"Refresh Rate:\", refresh_rate)\n```\n\n----------------------------------------\n\nTITLE: Removing Specific Keyboard Shortcut in Python\nDESCRIPTION: A practical example of removing a keyboard shortcut by specifying the exact key combination (Ctrl+Shift+F). This allows for dynamic enablement and disablement of shortcuts.\n\nLANGUAGE: python\nCODE:\n```\nwindow.remove_shortcut(\"Ctrl+Shift+F\")\n```\n\n----------------------------------------\n\nTITLE: Setting Up System Tray Icon\nDESCRIPTION: Method that initializes the system tray icon and its associated menu.\n\nLANGUAGE: python\nCODE:\n```\ndef run_tray(self):\n```\n\n----------------------------------------\n\nTITLE: Unmaximizing a Window with WindowAPI in JavaScript\nDESCRIPTION: Restores the current window from maximized state to its normal state using the unmaximize() method from the WindowAPI.\n\nLANGUAGE: javascript\nCODE:\n```\nawait window.pyloid.WindowAPI.unmaximize();\n```\n\n----------------------------------------\n\nTITLE: Setting Window Position with Anchors in Pyloid\nDESCRIPTION: Positions a window using predefined anchor points with the set_position_by_anchor method. This approach sets the window position based on available screen space and supports various anchor positions like 'center', 'top-left', 'bottom-right', etc.\n\nLANGUAGE: python\nCODE:\n```\napp = Pyloid(app_name=\"Pyloid-App\")\n\nwindow = app.create_window(\"Pyloid-Window\")\n\nwindow.set_position_by_anchor(\"center\")\n```\n\n----------------------------------------\n\nTITLE: Getting Available Monitor Size in Python\nDESCRIPTION: Method that returns the dimensions of the available monitor area as a dictionary with width and height keys.\n\nLANGUAGE: python\nCODE:\n```\ndef available_size(self) -> dict:\n```\n\n----------------------------------------\n\nTITLE: Toggling Maximize State with WindowAPI in JavaScript\nDESCRIPTION: Toggles between maximized and normal window states using the toggleMaximize() method from the WindowAPI.\n\nLANGUAGE: javascript\nCODE:\n```\nawait window.pyloid.WindowAPI.toggleMaximize();\n```\n\n----------------------------------------\n\nTITLE: Setting a Tooltip for the Tray Icon in Pyloid\nDESCRIPTION: Demonstrates how to set a tooltip text that appears when hovering over the tray icon. The tooltip can be dynamically updated during application execution.\n\nLANGUAGE: python\nCODE:\n```\napp.set_tray_tooltip(\"This is a Pyloid application.\")\n```\n\n----------------------------------------\n\nTITLE: Setting Up Static Image Splash Screen in Pyloid\nDESCRIPTION: Demonstrates how to initialize a Pyloid application and set up a static image splash screen. This code creates an application instance, a window, and configures a splash screen using a local image file.\n\nLANGUAGE: python\nCODE:\n```\napp = Pyloid(app_name=\"Pyloid-App\")\n\nwindow = app.create_window(\"Splash Screen Example\")\nwindow.set_static_image_splash_screen(image_path=\"./assets/loading.png\")\n```\n\n----------------------------------------\n\nTITLE: Setting Window Title with WindowAPI in JavaScript\nDESCRIPTION: Sets the title of the current window using the setTitle() method from the WindowAPI.\n\nLANGUAGE: javascript\nCODE:\n```\nawait window.pyloid.WindowAPI.setTitle('My App Window');\n```\n\n----------------------------------------\n\nTITLE: Opening a File Dialog with Pyloid\nDESCRIPTION: Demonstrates how to use the open_file_dialog method to select a file. The method accepts optional directory and file filter parameters and returns the path of the selected file or None if no file is selected.\n\nLANGUAGE: python\nCODE:\n```\napp = Pyloid(app_name=\"Pyloid-App\")\nfile_path = app.open_file_dialog(dir=\"/home/user\", filter=\"Text Files (*.txt)\")\nif file_path:\n    print(\"Selected file:\", file_path)\n```\n\n----------------------------------------\n\nTITLE: Getting Only Watched Directories in Pyloid (Python)\nDESCRIPTION: Code to retrieve a list of only the directories (not files) that are currently being watched in a Pyloid application.\n\nLANGUAGE: python\nCODE:\n```\nwatched_directories = app.get_watched_directories()\nprint(\"Watched directories:\", watched_directories)\n```\n\n----------------------------------------\n\nTITLE: Setting Context Menu with WindowAPI in JavaScript\nDESCRIPTION: Enables or disables the context menu for the window using the setContextMenu() method from the WindowAPI.\n\nLANGUAGE: javascript\nCODE:\n```\nawait window.pyloid.WindowAPI.setContextMenu(false);\n```\n\n----------------------------------------\n\nTITLE: Checking Auto-Start Status in Pyloid Applications\nDESCRIPTION: Demonstrates how to check the current auto-start status of a Pyloid application using the is_auto_start() method. This returns a boolean value indicating whether auto-start is enabled.\n\nLANGUAGE: python\nCODE:\n```\nis_auto_start = app.is_auto_start()\nprint(is_auto_start)  # Prints True or False\n```\n\n----------------------------------------\n\nTITLE: Checking Remaining Time (Partial Code)\nDESCRIPTION: Demonstrates how to get the remaining time before a timer fires using get_remaining_time. Returns time in milliseconds or None if the timer doesn't exist.\n\nLANGUAGE: python\nCODE:\n```\nremaining_time = timer_manager.get_remaining_time(timer_id)\nif remaining_time is not None:\n    print(f\"{remaining_time}ms left until the timer fires.\")\n```\n\n----------------------------------------\n\nTITLE: Getting Available Virtual Geometry in Python\nDESCRIPTION: Method that returns the position and dimensions of the available virtual desktop area.\n\nLANGUAGE: python\nCODE:\n```\ndef available_virtual_geometry(self) -> dict:\n```\n\n----------------------------------------\n\nTITLE: Stopping Timers (Full Code)\nDESCRIPTION: Complete example demonstrating how to start and then stop a timer in a Pyloid application. The full code context shows the entire workflow from timer creation to termination.\n\nLANGUAGE: python\nCODE:\n```\nfrom pyloid.timer import PyloidTimer\nfrom pyloid import Pyloid\n\n# Create a PyloidTimer instance\napp = Pyloid(app_name=\"Pyloid-App\")\ntimer_manager = PyloidTimer()\n\n# Start a timer\ntimer_id = timer_manager.start_periodic_timer(2000, lambda: print(\"Hello!\"))\n\n# Stop a timer using its ID\ntimer_manager.stop_timer(timer_id)\n\napp.run()\n```\n\n----------------------------------------\n\nTITLE: Getting Available Monitor Geometry in Python\nDESCRIPTION: Method that returns the position and dimensions of the available monitor area (excluding taskbars, etc.).\n\nLANGUAGE: python\nCODE:\n```\ndef available_geometry(self) -> dict:\n```\n\n----------------------------------------\n\nTITLE: Getting Available Virtual Size in Python\nDESCRIPTION: Method that returns the dimensions of the available virtual desktop area.\n\nLANGUAGE: python\nCODE:\n```\ndef available_virtual_size(self) -> dict:\n```\n\n----------------------------------------\n\nTITLE: Creating Periodic Timers (Partial Code)\nDESCRIPTION: Shows how to create a timer that executes a function periodically every 2 seconds (2000ms). Returns a timer_id that can be used for timer management operations.\n\nLANGUAGE: python\nCODE:\n```\ndef print_hello():\n    print(\"Hello!\")\n\n# Start a timer that prints \"Hello!\" every 2 seconds\ntimer_id = timer_manager.start_periodic_timer(2000, print_hello)\n```\n\n----------------------------------------\n\nTITLE: Building Pyloid-Html for Production\nDESCRIPTION: This command builds the project for production by compiling TypeScript, building the frontend with Vite, and packaging the Python backend into a standalone executable using PyInstaller with platform-specific spec files.\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Getting Physical Monitor Size in Python\nDESCRIPTION: Method that returns the physical dimensions of the monitor in millimeters.\n\nLANGUAGE: python\nCODE:\n```\ndef physical_size(self) -> dict:\n```\n\n----------------------------------------\n\nTITLE: Stopping Timers (Partial Code)\nDESCRIPTION: Shows how to stop a timer using its timer_id. This allows you to cancel timers before they execute or prevent periodic timers from firing again.\n\nLANGUAGE: python\nCODE:\n```\n# Stop a timer using its ID\ntimer_manager.stop_timer(timer_id)\n```\n\n----------------------------------------\n\nTITLE: Initializing Pyloid-Html Project Dependencies\nDESCRIPTION: This command initializes the project by installing npm packages, creating a Python virtual environment (venv-pyloid), and installing Python dependencies from requirements.txt. The script execution varies based on the operating system.\n\nLANGUAGE: bash\nCODE:\n```\nnpm run init\n```\n\n----------------------------------------\n\nTITLE: Getting Monitor Color Depth in Python\nDESCRIPTION: Method that returns the color depth of the monitor in bits per pixel.\n\nLANGUAGE: python\nCODE:\n```\ndef depth(self) -> int:\n```\n\n----------------------------------------\n\nTITLE: Initializing PyloidTimer in Python\nDESCRIPTION: Creates a basic instance of the PyloidTimer class from the pyloid library. This is the foundation for all timer operations.\n\nLANGUAGE: python\nCODE:\n```\nfrom pyloid.timer import PyloidTimer\n\ntimer_manager = PyloidTimer()\n```\n\n----------------------------------------\n\nTITLE: Controlling Splash Screen with Worker Thread in Pyloid\nDESCRIPTION: Shows a complete example of controlling a splash screen using a QThread. This pattern is useful for performing initialization tasks in the background while displaying a splash screen, then closing it when finished.\n\nLANGUAGE: python\nCODE:\n```\nfrom PySide6.QtCore import QThread\nimport time\n\n# ... assuming window object is already created\n\nclass SplashWorkerThread(QThread):\n    def run(self):\n        # Write initialization code here\n        time.sleep(2)  # Example: 2 second delay\n\ndef finish_callback():\n    window.close_splash_screen()\n    window.show_and_focus()\n\n# Create and start thread\nsplash_worker = SplashWorkerThread()\nsplash_worker.finished.connect(finish_callback)\nsplash_worker.start()\n```\n\n----------------------------------------\n\nTITLE: Controlling Splash Screen with Worker Thread in Pyloid\nDESCRIPTION: Shows a complete example of controlling a splash screen using a QThread. This pattern is useful for performing initialization tasks in the background while displaying a splash screen, then closing it when finished.\n\nLANGUAGE: python\nCODE:\n```\nfrom PySide6.QtCore import QThread\nimport time\n\n# ... assuming window object is already created\n\nclass SplashWorkerThread(QThread):\n    def run(self):\n        # Write initialization code here\n        time.sleep(2)  # Example: 2 second delay\n\ndef finish_callback():\n    window.close_splash_screen()\n    window.show_and_focus()\n\n# Create and start thread\nsplash_worker = SplashWorkerThread()\nsplash_worker.finished.connect(finish_callback)\nsplash_worker.start()\n```\n\n----------------------------------------\n\nTITLE: Getting Horizontal Logical DPI in Python\nDESCRIPTION: Method that returns the horizontal logical dots per inch of the monitor.\n\nLANGUAGE: python\nCODE:\n```\ndef logical_dots_per_inch_x(self) -> float:\n```\n\n----------------------------------------\n\nTITLE: Copying Image to Clipboard in Pyloid\nDESCRIPTION: Copies an image to the system clipboard. This function accepts a file path as a string, and can also handle byte data or os.PathLike objects.\n\nLANGUAGE: python\nCODE:\n```\napp.set_clipboard_image(\"assets/icon.png\")\n```\n\n----------------------------------------\n\nTITLE: Complete Implementation for Stopping Watches in Pyloid (Python)\nDESCRIPTION: Full example demonstrating how to stop watching a file or directory in a Pyloid application. Includes application setup and the stop watching operation.\n\nLANGUAGE: python\nCODE:\n```\nfrom pyloid import Pyloid\n\napp = Pyloid(app_name=\"Pyloid-App\", single_instance=True)\n\nwindow = app.create_window(\n    title=\"Pyloid Browser\",\n)\n\nwindow.load_url(\"https://www.example.com\")\nwindow.show_and_focus()\n\n\nresult = app.stop_watching(\"/path/to/file_or_directory\")\nif result:\n    print(\"Watching stopped successfully\")\nelse:\n    print(\"Failed to stop watching\")\n\napp.run()\n```\n\n----------------------------------------\n\nTITLE: Getting Vertical Logical DPI in Python\nDESCRIPTION: Method that returns the vertical logical dots per inch of the monitor.\n\nLANGUAGE: python\nCODE:\n```\ndef logical_dots_per_inch_y(self) -> float:\n```\n\n----------------------------------------\n\nTITLE: Retrieving Text from Clipboard in Pyloid\nDESCRIPTION: Retrieves the current text content from the system clipboard. This function returns the text that was previously copied to the clipboard.\n\nLANGUAGE: python\nCODE:\n```\ntext = app.get_clipboard_text()\nprint(text)\n```\n\n----------------------------------------\n\nTITLE: Getting Monitor Refresh Rate in Python\nDESCRIPTION: Method that returns the refresh rate of the monitor in Hertz.\n\nLANGUAGE: python\nCODE:\n```\ndef refresh_rate(self) -> float:\n```\n\n----------------------------------------\n\nTITLE: Getting Monitor Orientation in Python\nDESCRIPTION: Method that returns the orientation of the monitor as a string (e.g., 'Portrait', 'Landscape').\n\nLANGUAGE: python\nCODE:\n```\ndef orientation(self) -> str:\n```\n\n----------------------------------------\n\nTITLE: Loading URL in Pyloid Webview\nDESCRIPTION: Demonstrates how to load a remote URL in a Pyloid application window. The code creates a Pyloid app, creates a window, loads an example website URL, and displays the window.\n\nLANGUAGE: python\nCODE:\n```\napp = Pyloid(app_name=\"Pyloid-App\")\n\nwindow = app.create_window(\"Pyloid-Window\")\n\nwindow.load_url(\"https://www.example.com\")\n\nwindow.show()\n```\n\n----------------------------------------\n\nTITLE: Setting up JavaScript Event Listeners for Python Communication in Pyloid\nDESCRIPTION: This code sets up JavaScript event listeners to receive events from Python. It waits for the pyloidReady event before registering a listener for a custom 'pythonEvent', which will log any messages received from Python to the console.\n\nLANGUAGE: javascript\nCODE:\n```\ndocument.addEventListener('pyloidReady', function () {\n  window.pyloid.EventAPI.listen('pythonEvent', function (data) {\n    console.log('Received event from Python:', data.message);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Horizontal Physical DPI in Python\nDESCRIPTION: Method that returns the horizontal physical dots per inch of the monitor.\n\nLANGUAGE: python\nCODE:\n```\ndef physical_dots_per_inch_x(self) -> float:\n```\n\n----------------------------------------\n\nTITLE: PyInstaller Spec for macOS Builds in Python\nDESCRIPTION: PyInstaller specification file for building macOS applications from a Pyloid application, including configuration for icon, build paths, excluded modules, and macOS-specific bundle settings.\n\nLANGUAGE: python\nCODE:\n```\n# -*- mode: python ; coding: utf-8 -*-\n\n\na = Analysis(\n    ['src-pyloid/main.py'],\n    pathex=[],\n    binaries=[],\n    datas=[('src-pyloid/icons/', 'icons/'),\n             ('build/', 'build/'),\n             ],\n    hiddenimports=['PySide6.QtWebEngineCore'],\n    hookspath=[],\n    hooksconfig={},\n    runtime_hooks=[],\n    excludes=['PySide6.QtQml', 'PySide6.QtTest', 'PySide6.Qt3D', 'PySide6.QtSensors', 'PySide6.QtCharts', 'PySide6.QtGraphs', 'PySide6.QtDataVisualization', 'PySide6.QtQuick', 'PySide6.QtDesigner', 'PySide6.QtUiTools', 'PySide6.QtHelp'],\n    noarchive=False,\n    optimize=0,\n)\npyz = PYZ(a.pure)\n\nexe = EXE(\n    pyz,\n    a.scripts,\n    [],\n    exclude_binaries=True,\n    name='pyloid-app',\n    debug=False,\n    bootloader_ignore_signals=False,\n    strip=False,\n    upx=True,\n    console=False,\n    disable_windowed_traceback=False,\n    argv_emulation=False,\n    target_arch=None,\n    codesign_identity=None,\n    entitlements_file=None,\n)\ncoll = COLLECT(\n    exe,\n    a.binaries,\n    a.datas,\n    strip=False,\n    upx=True,\n    upx_exclude=[],\n    name='pyloid-app',\n)\napp = BUNDLE(\n    coll,\n    name='pyloid-app.app',\n    icon='src-pyloid/icons/icon.icns',\n    bundle_identifier=None,\n)\n```\n\n----------------------------------------\n\nTITLE: Minimizing a Window with WindowAPI in JavaScript\nDESCRIPTION: Minimizes the current window using the minimize() method from the WindowAPI.\n\nLANGUAGE: javascript\nCODE:\n```\nawait window.pyloid.WindowAPI.minimize();\n```\n\n----------------------------------------\n\nTITLE: Getting Monitor Manufacturer in Python\nDESCRIPTION: Method that returns the manufacturer name of the monitor.\n\nLANGUAGE: python\nCODE:\n```\ndef manufacturer(self) -> str:\n```\n\n----------------------------------------\n\nTITLE: Requirements.txt for Pyloid Application Dependencies\nDESCRIPTION: Python package requirements file specifying the necessary dependencies for a Pyloid application, including the main pyloid package and pyinstaller for building executables.\n\nLANGUAGE: text\nCODE:\n```\npyloid\npyinstaller\n```\n\n----------------------------------------\n\nTITLE: Initializing a BrowserWindow in Pyloid\nDESCRIPTION: Constructor for creating a new browser window with customizable parameters such as title, dimensions, position, frame visibility, context menu, developer tools, and JavaScript APIs.\n\nLANGUAGE: python\nCODE:\n```\ndef __init__(self, app, title: str = \"pylon app\", width: int = 800, height: int = 600, x: int = 200, y: int = 200, frame: bool = True, context_menu: bool = False, dev_tools: bool = False, js_apis: List[PylonAPI] = []):\n```\n\n----------------------------------------\n\nTITLE: Initializing a BrowserWindow in Pyloid\nDESCRIPTION: Constructor for creating a new browser window with customizable parameters such as title, dimensions, position, frame visibility, context menu, developer tools, and JavaScript APIs.\n\nLANGUAGE: python\nCODE:\n```\ndef __init__(self, app, title: str = \"pylon app\", width: int = 800, height: int = 600, x: int = 200, y: int = 200, frame: bool = True, context_menu: bool = False, dev_tools: bool = False, js_apis: List[PylonAPI] = []):\n```\n\n----------------------------------------\n\nTITLE: Getting Monitor Model in Python\nDESCRIPTION: Method that returns the model name of the monitor.\n\nLANGUAGE: python\nCODE:\n```\ndef model(self) -> str:\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite for Pyloid Application Build in TypeScript\nDESCRIPTION: Vite configuration for building a React application compatible with Pyloid, specifying the build output directory.\n\nLANGUAGE: ts\nCODE:\n```\nimport { defineConfig } from 'vite';\nimport react from '@vitejs/plugin-react';\n\n// https://vitejs.dev/config/\nexport default defineConfig({\n  plugins: [react()],\n  base: './',\n  build: {\n    outDir: 'build',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Monitor Geometry in Python\nDESCRIPTION: Method that returns the position and dimensions of the monitor as a dictionary with x, y, width, and height keys.\n\nLANGUAGE: python\nCODE:\n```\ndef geometry(self) -> dict:\n```\n\n----------------------------------------\n\nTITLE: Getting Monitor Name in Python\nDESCRIPTION: Method that returns the display name of the monitor.\n\nLANGUAGE: python\nCODE:\n```\ndef name(self) -> str:\n```\n\n----------------------------------------\n\nTITLE: Creating a React Project with Vite for Pyloid\nDESCRIPTION: Command to initialize a new React project using Vite that will be used as the custom boilerplate for a Pyloid application.\n\nLANGUAGE: bash\nCODE:\n```\nnpm create vite@latest\n# Select React\n```\n\n----------------------------------------\n\nTITLE: Setting Window Position using set_position Method in Pyloid\nDESCRIPTION: Sets the window position using the set_position method after window creation. This method takes x and y coordinates as parameters to position the window on the screen.\n\nLANGUAGE: python\nCODE:\n```\napp = Pyloid(app_name=\"Pyloid-App\")\n\nwindow = app.create_window(\"Pyloid-Window\")\n\nwindow.set_position(x=100, y=100)\n```\n\n----------------------------------------\n\nTITLE: Checking Timer Activity (Partial Code)\nDESCRIPTION: Shows how to check if a timer is still active using the is_timer_active method. This is useful for conditional logic based on timer state.\n\nLANGUAGE: python\nCODE:\n```\nif timer_manager.is_timer_active(timer_id):\n    print(\"The timer is still running.\")\nelse:\n    print(\"The timer has stopped.\")\n```\n\n----------------------------------------\n\nTITLE: Running Development Server for Pyloid Application\nDESCRIPTION: Command to run the development server for a Pyloid application with the custom boilerplate.\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Animating the Tray Icon in Pyloid\nDESCRIPTION: Shows how to create an animated tray icon by cycling through multiple image frames at a specified interval. This animation can be applied or changed during runtime.\n\nLANGUAGE: python\nCODE:\n```\napp.set_tray_icon_animation(\n    [\n        \"icons/frame1.png\",\n        \"icons/frame2.png\",\n        \"icons/frame3.png\",\n        \"icons/frame4.png\",\n    ],\n    interval=500,\n)\n```\n\n----------------------------------------\n\nTITLE: Changing Timer Interval (Partial Code)\nDESCRIPTION: Shows how to change the interval of an existing timer using set_interval. This allows dynamic adjustment of timer frequency during runtime.\n\nLANGUAGE: python\nCODE:\n```\n# Change the timer interval to 3 seconds\ntimer_manager.set_interval(timer_id, 3000)\n```\n\n----------------------------------------\n\nTITLE: Installing Node.js on Linux using NVM\nDESCRIPTION: Series of commands to install Node.js on Linux using NVM (Node Version Manager). This includes updating packages, installing curl, downloading and installing NVM, and then using NVM to install the latest LTS version of Node.js.\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt update\nsudo apt install curl\ncurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.1/install.sh | bash\nsource ~/.bashrc\nnvm install --lts\n```\n\n----------------------------------------\n\nTITLE: Creating a Window without Frame in pyloid\nDESCRIPTION: This Python code creates a window without the default frame in pyloid applications. The frame=False parameter removes the standard window decorations, allowing for custom implementation.\n\nLANGUAGE: python\nCODE:\n```\nwindow = app.create_window(title=\"Draggable Region\", frame=False)\n```\n\n----------------------------------------\n\nTITLE: Advanced Timer Usage with Counter (Partial Code)\nDESCRIPTION: Shows a more advanced timer example using a counter variable that is incremented with each timer execution. Demonstrates stateful timer callbacks.\n\nLANGUAGE: python\nCODE:\n```\ncounter = 0\n\ndef count():\n    global counter\n    counter += 1\n    print(f\"Counter: {counter}\")\n\ntimer_id = timer_manager.start_periodic_timer(1000, count)\n```\n\n----------------------------------------\n\nTITLE: Using is_production() for HTML Loading in Pyloid\nDESCRIPTION: Example demonstrating how to use is_production() to conditionally load HTML content in a Pyloid application. The function checks if the application is running as a production build to determine whether to load from a local file or development server.\n\nLANGUAGE: python\nCODE:\n```\nfrom pyloid import Pyloid, is_production, get_production_path\n\napp = Pyloid(single_instance=True)\n\nif (is_production()):\n    window.load_file(os.path.join(get_production_path(), \"build/index.html\"))\nelse:\n    window.load_url(\"http://localhost:5173\")\n```\n\n----------------------------------------\n\nTITLE: Showing a Window with WindowAPI in JavaScript\nDESCRIPTION: Shows the current window using the show() method from the WindowAPI.\n\nLANGUAGE: javascript\nCODE:\n```\nawait window.pyloid.WindowAPI.show();\n```\n\n----------------------------------------\n\nTITLE: Using get_production_path() for Icon Resources in Pyloid\nDESCRIPTION: Example showing how to use get_production_path() to set application icons with proper path handling based on the execution environment. The function returns the resource path in production builds or None in development.\n\nLANGUAGE: python\nCODE:\n```\nfrom pyloid import Pyloid, is_production, get_production_path\n\napp = Pyloid(single_instance=True)\n\nif (is_production()):\n    app.set_icon(os.path.join(get_production_path(), \"icons/icon.ico\"))\nelse:\n    app.set_icon(\"icons/icon.ico\")\n    app.set_tray_icon(\"icons/icon.ico\")\n```\n\n----------------------------------------\n\nTITLE: Getting Device Pixel Ratio in Python\nDESCRIPTION: Method that returns the device pixel ratio of the monitor, useful for high DPI screens.\n\nLANGUAGE: python\nCODE:\n```\ndef device_pixel_ratio(self) -> float:\n```\n\n----------------------------------------\n\nTITLE: Retrieving Connected Monitors Information\nDESCRIPTION: Method that returns information about all monitors connected to the system as a list of Monitor objects.\n\nLANGUAGE: python\nCODE:\n```\ndef get_all_monitors(self) -> List[Monitor]:\n```\n\n----------------------------------------\n\nTITLE: Displaying System Tray Notifications\nDESCRIPTION: Method that shows a notification from the system tray with the specified title and message.\n\nLANGUAGE: python\nCODE:\n```\ndef show_notification(self, title: str, message: str):\n```\n\n----------------------------------------\n\nTITLE: Unmaximizing Window by ID\nDESCRIPTION: Method that restores a maximized window identified by its ID to its normal size.\n\nLANGUAGE: python\nCODE:\n```\ndef unmaximize_window_by_id(self, window_id: str):\n```\n\n----------------------------------------\n\nTITLE: Maximizing Window by ID\nDESCRIPTION: Method that maximizes a specific window identified by its ID to fill the screen.\n\nLANGUAGE: python\nCODE:\n```\ndef maximize_window_by_id(self, window_id: str):\n```\n\n----------------------------------------\n\nTITLE: Showing Window by ID\nDESCRIPTION: Method that displays and focuses a specific window identified by its ID.\n\nLANGUAGE: python\nCODE:\n```\ndef show_window_by_id(self, window_id: str):\n```\n\n----------------------------------------\n\nTITLE: Closing All Windows\nDESCRIPTION: Method that closes all browser windows created by the application.\n\nLANGUAGE: python\nCODE:\n```\ndef close_all_windows(self):\n```\n\n----------------------------------------\n\nTITLE: Showing and Focusing Main Window\nDESCRIPTION: Convenience method that combines showing and focusing the main window in a single call.\n\nLANGUAGE: python\nCODE:\n```\ndef show_and_focus_main_window(self):\n```\n\n----------------------------------------\n\nTITLE: Setting Orientation Change Callback in Python\nDESCRIPTION: Method to set a callback function that will be called when the monitor's orientation changes.\n\nLANGUAGE: python\nCODE:\n```\ndef orientation_changed(self, callback: Callable):\n```\n\n----------------------------------------\n\nTITLE: Getting Vertical Physical DPI in Python\nDESCRIPTION: Method that returns the vertical physical dots per inch of the monitor.\n\nLANGUAGE: python\nCODE:\n```\ndef physical_dots_per_inch_y(self) -> float:\n```\n\n----------------------------------------\n\nTITLE: Getting Logical DPI in Python\nDESCRIPTION: Method that returns the logical dots per inch of the monitor.\n\nLANGUAGE: python\nCODE:\n```\ndef logical_dots_per_inch(self) -> float:\n```\n\n----------------------------------------\n\nTITLE: Getting Virtual Size in Python\nDESCRIPTION: Method that returns the dimensions of the monitor in virtual desktop space.\n\nLANGUAGE: python\nCODE:\n```\ndef virtual_size(self) -> dict:\n```\n\n----------------------------------------\n\nTITLE: Getting Virtual Geometry in Python\nDESCRIPTION: Method that returns the geometry information of the monitor in virtual desktop space.\n\nLANGUAGE: python\nCODE:\n```\ndef virtual_geometry(self) -> dict:\n```\n\n----------------------------------------\n\nTITLE: Capturing Monitor Screen in Python\nDESCRIPTION: Method to capture the monitor screen with options to specify the area to capture. Returns the path to the saved image or None if capture fails.\n\nLANGUAGE: python\nCODE:\n```\ndef capture(self, save_path: str, x: Optional[int] = None, y: Optional[int] = None, width: Optional[int] = None, height: Optional[int] = None) -> Optional[str]:\n```\n\n----------------------------------------\n\nTITLE: Emitting Events from BrowserWindow to JavaScript\nDESCRIPTION: Method for emitting events from Python to the JavaScript side of the application.\n\nLANGUAGE: python\nCODE:\n```\ndef emit(self, event_name: str, data: Optional[Dict] = None) -> None:\n```\n\n----------------------------------------\n\nTITLE: Capturing BrowserWindow Content\nDESCRIPTION: Method for capturing the current state of the window and saving it as an image.\n\nLANGUAGE: python\nCODE:\n```\ndef capture(self, save_path: str) -> Optional[str]:\n```\n\n----------------------------------------\n\nTITLE: Managing BrowserWindow Visibility and Focus\nDESCRIPTION: Methods for controlling the window's visibility and focus state.\n\nLANGUAGE: python\nCODE:\n```\ndef hide(self) -> None:\n```\n\nLANGUAGE: python\nCODE:\n```\ndef show(self) -> None:\n```\n\nLANGUAGE: python\nCODE:\n```\ndef focus(self) -> None:\n```\n\nLANGUAGE: python\nCODE:\n```\ndef show_and_focus(self) -> None:\n```\n\nLANGUAGE: python\nCODE:\n```\ndef close(self) -> None:\n```\n\n----------------------------------------\n\nTITLE: Retrieving BrowserWindow Information\nDESCRIPTION: Methods for retrieving information about the browser window, including its properties and ID.\n\nLANGUAGE: python\nCODE:\n```\ndef get_window_properties(self) -> dict:\n```\n\nLANGUAGE: python\nCODE:\n```\ndef get_id(self) -> str:\n```\n\n----------------------------------------\n\nTITLE: Setting Developer Tools with WindowAPI in JavaScript\nDESCRIPTION: Enables or disables the developer tools and F12 key functionality using the setDevTools() method from the WindowAPI.\n\nLANGUAGE: javascript\nCODE:\n```\n// Enable developer tools and allow opening with F12\nawait window.pyloid.WindowAPI.setDevTools(true);\n\n// Disable developer tools and prevent opening with F12\nawait window.pyloid.WindowAPI.setDevTools(false);\n```\n\n----------------------------------------\n\nTITLE: Setting Window Frame with WindowAPI in JavaScript\nDESCRIPTION: Enables or disables the window frame (border) using the setFrame() method from the WindowAPI.\n\nLANGUAGE: javascript\nCODE:\n```\nawait window.pyloid.WindowAPI.setFrame(true);\n```\n\n----------------------------------------\n\nTITLE: Setting Window Position with WindowAPI in JavaScript\nDESCRIPTION: Sets the on-screen position coordinates of the current window using the setPosition() method from the WindowAPI.\n\nLANGUAGE: javascript\nCODE:\n```\nawait window.pyloid.WindowAPI.setPosition(100, 100);\n```\n\n----------------------------------------\n\nTITLE: Setting Window Size with WindowAPI in JavaScript\nDESCRIPTION: Sets the width and height dimensions of the current window using the setSize() method from the WindowAPI.\n\nLANGUAGE: javascript\nCODE:\n```\nawait window.pyloid.WindowAPI.setSize(800, 600);\n```\n\n----------------------------------------\n\nTITLE: Checking Maximized Status with WindowAPI in JavaScript\nDESCRIPTION: Checks if the current window is maximized using the isMaximized() method from the WindowAPI.\n\nLANGUAGE: javascript\nCODE:\n```\nconst isMaximized = await window.pyloid.WindowAPI.isMaximized();\nconsole.log(isMaximized);\n```\n\n----------------------------------------\n\nTITLE: Checking Fullscreen Status with WindowAPI in JavaScript\nDESCRIPTION: Checks if the current window is in fullscreen mode using the isFullscreen() method from the WindowAPI.\n\nLANGUAGE: javascript\nCODE:\n```\nconst isFullscreen = await window.pyloid.WindowAPI.isFullscreen();\nconsole.log(isFullscreen);\n```\n\n----------------------------------------\n\nTITLE: Maximizing a Window with WindowAPI in JavaScript\nDESCRIPTION: Maximizes the current window using the maximize() method from the WindowAPI.\n\nLANGUAGE: javascript\nCODE:\n```\nawait window.pyloid.WindowAPI.maximize();\n```\n\n----------------------------------------\n\nTITLE: Enabling Fullscreen with WindowAPI in JavaScript\nDESCRIPTION: Enables fullscreen mode for the current window using the fullscreen() method from the WindowAPI.\n\nLANGUAGE: javascript\nCODE:\n```\nawait window.pyloid.WindowAPI.fullscreen();\n```\n\n----------------------------------------\n\nTITLE: Showing and Focusing a Window with WindowAPI in JavaScript\nDESCRIPTION: Shows and focuses the current window in a single operation using the showAndFocus() method from the WindowAPI.\n\nLANGUAGE: javascript\nCODE:\n```\nawait window.pyloid.WindowAPI.showAndFocus();\n```\n\n----------------------------------------\n\nTITLE: Focusing a Window with WindowAPI in JavaScript\nDESCRIPTION: Focuses the current window using the focus() method from the WindowAPI.\n\nLANGUAGE: javascript\nCODE:\n```\nawait window.pyloid.WindowAPI.focus();\n```\n\n----------------------------------------\n\nTITLE: Hiding a Window with WindowAPI in JavaScript\nDESCRIPTION: Hides the current window using the hide() method from the WindowAPI.\n\nLANGUAGE: javascript\nCODE:\n```\nawait window.pyloid.WindowAPI.hide();\n```\n\n----------------------------------------\n\nTITLE: Closing a Window with WindowAPI in JavaScript\nDESCRIPTION: Closes the current window using the close() method from the WindowAPI.\n\nLANGUAGE: javascript\nCODE:\n```\nawait window.pyloid.WindowAPI.close();\n```\n\n----------------------------------------\n\nTITLE: Registering Monitor Refresh Rate Change Callback in Pyloid\nDESCRIPTION: Shows how to set up a callback function that will be triggered when a monitor's refresh rate changes. The code initializes a Pyloid application, defines a callback function, and registers it with the monitor.refresh_rate_changed() method.\n\nLANGUAGE: python\nCODE:\n```\napp = Pyloid(\"Pyloid-App\")\ndef on_refresh_rate_changed():\n    print(\"Refresh rate changed!\")\nmonitor = app.get_primary_monitor()\nmonitor.refresh_rate_changed(on_refresh_rate_changed)\n```\n\n----------------------------------------\n\nTITLE: Registering Monitor Orientation Change Callback in Pyloid\nDESCRIPTION: Demonstrates registering a callback function that will be called when a monitor's orientation changes. This example creates a Pyloid application, defines a callback function, and registers it with the monitor.orientation_changed() method.\n\nLANGUAGE: python\nCODE:\n```\napp = Pyloid(\"Pyloid-App\")\ndef on_orientation_changed():\n    print(\"Orientation changed!\")\nmonitor = app.get_primary_monitor()\nmonitor.orientation_changed(on_orientation_changed)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Monitor Serial Number in Pyloid\nDESCRIPTION: Demonstrates how to get a monitor's serial number using the serial_number() method. This code initializes a Pyloid application, gets the primary monitor, and then retrieves and prints the monitor's serial number.\n\nLANGUAGE: python\nCODE:\n```\napp = Pyloid(\"Pyloid-App\")\nmonitor = app.get_primary_monitor()\nserial_number = monitor.serial_number()\nprint(\"Serial Number:\", serial_number)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Monitor Name in Pyloid\nDESCRIPTION: Demonstrates how to get the name of a monitor using the Monitor.name method. This returns the display's identifier or name as recognized by the system.\n\nLANGUAGE: python\nCODE:\n```\napp = Pyloid(\"Pyloid-App\")\nmonitor = app.get_primary_monitor()\nname = monitor.name()\nprint(\"Name:\", name)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Monitor Manufacturer in Pyloid\nDESCRIPTION: Demonstrates how to get the manufacturer of a monitor using the Monitor.manufacturer method. This returns the name of the company that made the display.\n\nLANGUAGE: python\nCODE:\n```\napp = Pyloid(\"Pyloid-App\")\nmonitor = app.get_primary_monitor()\nmanufacturer = monitor.manufacturer()\nprint(\"Manufacturer:\", manufacturer)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Physical DPI on Y-axis in Pyloid\nDESCRIPTION: Demonstrates how to get the physical dots per inch (DPI) on the Y-axis of a monitor using the Monitor.physical_dots_per_inch_y method. This returns the vertical physical resolution.\n\nLANGUAGE: python\nCODE:\n```\napp = Pyloid(\"Pyloid-App\")\nmonitor = app.get_primary_monitor()\nphysical_dpi_y = monitor.physical_dots_per_inch_y()\nprint(\"Physical DPI Y:\", physical_dpi_y)\n```\n\n----------------------------------------\n\nTITLE: Getting Physical DPI on X-axis in Pyloid\nDESCRIPTION: Shows how to retrieve the physical dots per inch (DPI) on the X-axis of a monitor using the Monitor.physical_dots_per_inch_x method. This returns the horizontal physical resolution.\n\nLANGUAGE: python\nCODE:\n```\napp = Pyloid(\"Pyloid-App\")\nmonitor = app.get_primary_monitor()\nphysical_dpi_x = monitor.physical_dots_per_inch_x()\nprint(\"Physical DPI X:\", physical_dpi_x)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Logical DPI in Pyloid\nDESCRIPTION: Demonstrates how to get the logical dots per inch (DPI) of a monitor using the Monitor.logical_dots_per_inch method. This returns the logical resolution used for rendering.\n\nLANGUAGE: python\nCODE:\n```\napp = Pyloid(\"Pyloid-App\")\nmonitor = app.get_primary_monitor()\nlogical_dpi = monitor.logical_dots_per_inch()\nprint(\"Logical DPI:\", logical_dpi)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Monitor Color Depth in Pyloid\nDESCRIPTION: Demonstrates how to get the color depth of a monitor using the Monitor.depth method. Returns the bit depth as an integer value.\n\nLANGUAGE: python\nCODE:\n```\napp = Pyloid(\"Pyloid-App\")\nmonitor = app.get_primary_monitor()\ndepth = monitor.depth()\nprint(\"Color Depth:\", depth)\n```\n\n----------------------------------------\n\nTITLE: Getting Physical Monitor Size in Pyloid\nDESCRIPTION: Shows how to retrieve the actual physical dimensions of a monitor using the Monitor.physical_size method. Returns a dictionary with width and height values in physical units.\n\nLANGUAGE: python\nCODE:\n```\napp = Pyloid(\"Pyloid-App\")\nmonitor = app.get_primary_monitor()\nphysical_size = monitor.physical_size()\nprint(\"Physical Size:\", physical_size)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Available Virtual Monitor Size in Pyloid\nDESCRIPTION: Demonstrates how to get the combined usable dimensions of all monitors (excluding system UI elements) using the Monitor.available_virtual_size method. Returns a dictionary with width and height values.\n\nLANGUAGE: python\nCODE:\n```\napp = Pyloid(\"Pyloid-App\")\nmonitor = app.get_primary_monitor()\navailable_virtual_size = monitor.available_virtual_size()\nprint(\"Available Virtual Size:\", available_virtual_size)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Virtual Monitor Size in Pyloid\nDESCRIPTION: Demonstrates how to get the combined dimensions of all monitors in a multi-monitor setup using the Monitor.virtual_size method. Returns a dictionary with width and height values.\n\nLANGUAGE: python\nCODE:\n```\napp = Pyloid(\"Pyloid-App\")\nmonitor = app.get_primary_monitor()\nvirtual_size = monitor.virtual_size()\nprint(\"Virtual Size:\", virtual_size)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Available Monitor Size in Pyloid\nDESCRIPTION: Demonstrates how to get the usable dimensions of a monitor (excluding system UI elements) using the Monitor.available_size method. Returns a dictionary with width and height values.\n\nLANGUAGE: python\nCODE:\n```\napp = Pyloid(\"Pyloid-App\")\nmonitor = app.get_primary_monitor()\navailable_size = monitor.available_size()\nprint(\"Available Size:\", available_size)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Monitor Geometry in Pyloid\nDESCRIPTION: Demonstrates how to get the position and dimensions of a monitor using the Monitor.geometry method. This returns a dictionary with x, y, width, and height values.\n\nLANGUAGE: python\nCODE:\n```\napp = Pyloid(\"Pyloid-App\")\nmonitor = app.get_primary_monitor()\ngeometry = monitor.geometry()\nprint(\"Monitor Geometry:\", geometry)\n```"
  }
]