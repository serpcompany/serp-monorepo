[
  {
    "owner": "erquhart",
    "repo": "convex-better-auth",
    "content": "TITLE: Implementing Auth UI Component with React in TypeScript\nDESCRIPTION: Basic React component example showing how to implement authentication UI using the useAuth hook from Better Auth. Displays a welcome message for logged-in users or a sign-in button for anonymous users.\nSOURCE: https://github.com/erquhart/convex-better-auth/blob/main/README.md#2025-04-19_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nfunction AuthenticatedComponent() {\n  const { user, signIn } = useAuth();\n  return user ? (\n    <div>Welcome, {user.email}!</div>\n  ) : (\n    <button onClick={() => signIn()}>Sign In</button>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Better Auth Instance in Convex Backend\nDESCRIPTION: TypeScript code that creates and configures a Better Auth instance in the Convex backend. Sets up authentication providers and hooks for user management.\nSOURCE: https://github.com/erquhart/convex-better-auth/blob/main/README.md#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// convex/auth.ts\nimport { BetterAuth } from \"@erquhart/convex-better-auth\";\nimport type { BetterAuthOptions } from \"better-auth\";\nimport { components, internal } from \"./_generated/api\";\n\nexport const betterAuth = new BetterAuth(\n  components.betterAuth,\n  {\n    trustedOrigins: [process.env.SITE_URL as string],\n    socialProviders: {\n      github: {\n        clientId: process.env.GITHUB_CLIENT_ID as string,\n        clientSecret: process.env.GITHUB_CLIENT_SECRET as string,\n      },\n    },\n  },\n  {\n    onCreateUser: internal.myHooks.onCreateUser,\n    onDeleteUser: internal.myHooks.onDeleteUser,\n    onCreateSession: internal.myHooks.onCreateSession,\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Authentication Event Hooks for Better Auth\nDESCRIPTION: TypeScript code defining comprehensive event hooks for authentication events in Better Auth. Includes handlers for user creation, deletion, and session creation.\nSOURCE: https://github.com/erquhart/convex-better-auth/blob/main/README.md#2025-04-19_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// convex/myHooks.ts\nimport { userValidator, sessionValidator } from \"@erquhart/convex-better-auth\";\nimport { internalMutation } from \"./_generated/server\";\n\nexport const onCreateUser = internalMutation({\n  args: { user: userValidator },\n  handler: async (ctx, { user }) => {\n    // Handle user creation\n  },\n});\n\nexport const onDeleteUser = internalMutation({\n  args: { id: v.string() },\n  handler: async (ctx, { id }) => {\n    // Handle user deletion\n  },\n});\n\nexport const onCreateSession = internalMutation({\n  args: { session: sessionValidator },\n  handler: async (ctx, { session }) => {\n    // Handle session creation\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Up React Provider with Better Auth\nDESCRIPTION: React/TypeScript code for setting up the Convex provider with Better Auth integration. Creates a ConvexProviderWithAuth that makes authentication available throughout the React component tree.\nSOURCE: https://github.com/erquhart/convex-better-auth/blob/main/README.md#2025-04-19_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n// src/index.tsx\nimport { ConvexProviderWithAuth, ConvexReactClient } from \"convex/react\";\nimport { useBetterAuth } from \"@erquhart/convex-better-auth/react\";\nimport { authClient } from \"lib/auth.ts\";\n\nconst convex = new ConvexReactClient(\n  (\n    <ConvexProviderWithAuth client={convex} useAuth={useBetterAuth(authClient)}>\n      {children}\n    </ConvexProviderWithAuth>\n  )\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Better Auth Client for React Integration\nDESCRIPTION: TypeScript code that creates a Better Auth client instance for use with React components. This client connects to the Convex backend authentication endpoints.\nSOURCE: https://github.com/erquhart/convex-better-auth/blob/main/README.md#2025-04-19_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// lib/auth.ts\nimport { createAuthClient } from \"@erquhart/convex-better-auth/react\";\n\nexport const authClient = createAuthClient({\n  // This should be your Convex site URL, which ends in .convex.site\n  baseURL: \"https://funky-penguin-123.convex.site\",\n});\n```\n\n----------------------------------------\n\nTITLE: Registering HTTP Route Handlers for Better Auth\nDESCRIPTION: TypeScript code for registering Better Auth HTTP route handlers in Convex. Sets up the necessary endpoints for authentication flows with allowed origins.\nSOURCE: https://github.com/erquhart/convex-better-auth/blob/main/README.md#2025-04-19_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// convex/http.ts\nimport { httpRouter } from \"convex/server\";\nimport { betterAuth } from \"./auth\";\n\nconst http = httpRouter();\n\nbetterAuth.registerRoutes(http, {\n  allowedOrigins: [process.env.SITE_URL],\n});\n\nexport default http;\n```\n\n----------------------------------------\n\nTITLE: Configuring Convex App with Better Auth Component\nDESCRIPTION: TypeScript configuration file for setting up the Convex app with the Better Auth component. Creates a Convex app configuration and applies the Better Auth component to it.\nSOURCE: https://github.com/erquhart/convex-better-auth/blob/main/README.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// convex/convex.config.ts\nimport { defineApp } from \"convex/server\";\nimport betterAuth from \"@erquhart/convex-better-auth/convex.config\";\n\nconst app = defineApp();\napp.use(betterAuth);\n\nexport default app;\n```\n\n----------------------------------------\n\nTITLE: Implementing a Convex Query Function in TypeScript\nDESCRIPTION: This code snippet demonstrates how to create a query function in Convex that takes two arguments: a number and a string. The function reads from the database and returns the collected documents. It includes argument validation and a handler implementation.\nSOURCE: https://github.com/erquhart/convex-better-auth/blob/main/examples/next/convex/README.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { query } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myQueryFunction = query({\n  // Validators for arguments.\n  args: {\n    first: v.number(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Read the database as many times as you need here.\n    // See https://docs.convex.dev/database/reading-data.\n    const documents = await ctx.db.query(\"tablename\").collect();\n\n    // Arguments passed from the client are properties of the args object.\n    console.log(args.first, args.second);\n\n    // Write arbitrary JavaScript here: filter, aggregate, build derived data,\n    // remove non-public properties, or create new objects.\n    return documents;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Convex Query Function in TypeScript\nDESCRIPTION: Example of a Convex query function that takes numeric and string arguments. Shows argument validation, database querying, and data processing patterns.\nSOURCE: https://github.com/erquhart/convex-better-auth/blob/main/examples/vite/convex/README.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { query } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myQueryFunction = query({\n  // Validators for arguments.\n  args: {\n    first: v.number(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Read the database as many times as you need here.\n    // See https://docs.convex.dev/database/reading-data.\n    const documents = await ctx.db.query(\"tablename\").collect();\n\n    // Arguments passed from the client are properties of the args object.\n    console.log(args.first, args.second);\n\n    // Write arbitrary JavaScript here: filter, aggregate, build derived data,\n    // remove non-public properties, or create new objects.\n    return documents;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing a Convex Mutation Function in TypeScript\nDESCRIPTION: This code demonstrates creating a mutation function in Convex that accepts two string arguments. The function inserts a new document into the 'messages' collection and returns the inserted document. It includes argument validation and a handler implementation.\nSOURCE: https://github.com/erquhart/convex-better-auth/blob/main/examples/next/convex/README.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { mutation } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myMutationFunction = mutation({\n  // Validators for arguments.\n  args: {\n    first: v.string(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Insert or modify documents in the database here.\n    // Mutations can also read from the database like queries.\n    // See https://docs.convex.dev/database/writing-data.\n    const message = { body: args.first, author: args.second };\n    const id = await ctx.db.insert(\"messages\", message);\n\n    // Optionally, return a value from your mutation.\n    return await ctx.db.get(id);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Convex Mutation Function in TypeScript\nDESCRIPTION: Example of a Convex mutation function that handles data modifications. Demonstrates argument validation, database insertion, and return value handling.\nSOURCE: https://github.com/erquhart/convex-better-auth/blob/main/examples/vite/convex/README.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { mutation } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myMutationFunction = mutation({\n  // Validators for arguments.\n  args: {\n    first: v.string(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Insert or modify documents in the database here.\n    // Mutations can also read from the database like queries.\n    // See https://docs.convex.dev/database/writing-data.\n    const message = { body: args.first, author: args.second };\n    const id = await ctx.db.insert(\"messages\", message);\n\n    // Optionally, return a value from your mutation.\n    return await ctx.db.get(id);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing User Management Hooks for Better Auth\nDESCRIPTION: TypeScript code defining event hooks for user management with Better Auth. Includes handlers for user creation and deletion that sync with a custom users table.\nSOURCE: https://github.com/erquhart/convex-better-auth/blob/main/README.md#2025-04-19_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// convex/userHooks.ts\nimport { userValidator } from \"@erquhart/convex-better-auth\";\nimport { internalMutation } from \"./_generated/server\";\n\nexport const onCreateUser = internalMutation({\n  args: { user: userValidator },\n  handler: async (ctx, { user }) => {\n    await ctx.db.insert(\"users\", {\n      authId: user._id,\n      role: \"user\",\n      preferences: {\n        theme: \"light\",\n        notifications: true,\n      },\n    });\n  },\n});\n\nexport const onDeleteUser = internalMutation({\n  args: { id: v.string() },\n  handler: async (ctx, { id }) => {\n    const user = await ctx.db\n      .query(\"users\")\n      .withIndex(\"authId\", (q) => q.eq(\"authId\", id))\n      .unique();\n\n    if (user) {\n      await ctx.db.delete(user._id);\n    }\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Custom User Data Schema in Convex\nDESCRIPTION: TypeScript code for defining a custom users table schema in Convex. Creates a table structure with an authId reference to Better Auth and additional custom fields.\nSOURCE: https://github.com/erquhart/convex-better-auth/blob/main/README.md#2025-04-19_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// convex/schema.ts\nconst schema = defineSchema({\n  users: defineTable({\n    authId: v.string(), // Reference to Better Auth user ID\n    // Your custom fields\n    role: v.string(),\n    preferences: v.object({\n      theme: v.string(),\n      notifications: v.boolean(),\n    }),\n  }).index(\"authId\", [\"authId\"]), // Important: index for efficient queries\n});\n```\n\n----------------------------------------\n\nTITLE: Using a Convex Query Function in React\nDESCRIPTION: This snippet shows how to consume a Convex query function in a React component using the useQuery hook. It passes two arguments to the query: a number and a string.\nSOURCE: https://github.com/erquhart/convex-better-auth/blob/main/examples/next/convex/README.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = useQuery(api.functions.myQueryFunction, {\n  first: 10,\n  second: \"hello\",\n});\n```\n\n----------------------------------------\n\nTITLE: Using Convex Query in React Component\nDESCRIPTION: Example of how to use a Convex query function within a React component using the useQuery hook.\nSOURCE: https://github.com/erquhart/convex-better-auth/blob/main/examples/vite/convex/README.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = useQuery(api.functions.myQueryFunction, {\n  first: 10,\n  second: \"hello\",\n});\n```\n\n----------------------------------------\n\nTITLE: Using a Convex Mutation Function in React\nDESCRIPTION: This snippet demonstrates how to use a Convex mutation function in a React component with the useMutation hook. It shows two patterns: fire-and-forget and handling the result with a Promise.\nSOURCE: https://github.com/erquhart/convex-better-auth/blob/main/examples/next/convex/README.md#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst mutation = useMutation(api.functions.myMutationFunction);\nfunction handleButtonPress() {\n  // fire and forget, the most common way to use mutations\n  mutation({ first: \"Hello!\", second: \"me\" });\n  // OR\n  // use the result once the mutation has completed\n  mutation({ first: \"Hello!\", second: \"me\" }).then((result) =>\n    console.log(result),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Convex Mutation in React Component\nDESCRIPTION: Example of how to use a Convex mutation function within a React component using the useMutation hook, including both fire-and-forget and promise-based approaches.\nSOURCE: https://github.com/erquhart/convex-better-auth/blob/main/examples/vite/convex/README.md#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst mutation = useMutation(api.functions.myMutationFunction);\nfunction handleButtonPress() {\n  // fire and forget, the most common way to use mutations\n  mutation({ first: \"Hello!\", second: \"me\" });\n  // OR\n  // use the result once the mutation has completed\n  mutation({ first: \"Hello!\", second: \"me\" }).then((result) =>\n    console.log(result),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Running Local Examples of Convex Better Auth\nDESCRIPTION: Bash commands for running the example applications locally. Walks through installing dependencies and running the development server for either Next.js or Vite examples.\nSOURCE: https://github.com/erquhart/convex-better-auth/blob/main/README.md#2025-04-19_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\ncd examples/next # or examples/vite\nnpm install\n# Involves signing into Convex if necessary and deploying to a Convex dev instance.\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Creating New Convex Next.js Project\nDESCRIPTION: Command to create a new Convex project using the Next.js template through the create-convex CLI tool.\nSOURCE: https://github.com/erquhart/convex-better-auth/blob/main/examples/next/README.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm create convex@latest -- -t nextjs\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Convex Next.js Project\nDESCRIPTION: Commands for installing dependencies and starting the development server for an existing Convex project.\nSOURCE: https://github.com/erquhart/convex-better-auth/blob/main/examples/next/README.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Installing Convex Better Auth Package with npm\nDESCRIPTION: Command to install the Better Auth component and its dependency package. This needs to be run in the root directory of a Convex project.\nSOURCE: https://github.com/erquhart/convex-better-auth/blob/main/README.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @erquhart/convex-better-auth better-auth@1.2.5\n```\n\n----------------------------------------\n\nTITLE: Running Local Development Environment\nDESCRIPTION: Commands to install dependencies and start local development server using Convex.\nSOURCE: https://github.com/erquhart/convex-better-auth/blob/main/CONTRIBUTING.md#2025-04-19_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i\ncd example\nnpm i\nnpx convex dev\n```\n\n----------------------------------------\n\nTITLE: Running Test Suite\nDESCRIPTION: Sequence of commands to build the project, run type checking, execute tests, and lint the example code.\nSOURCE: https://github.com/erquhart/convex-better-auth/blob/main/CONTRIBUTING.md#2025-04-19_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nrm -rf dist/ && npm run build\nnpm run typecheck\nnpm run test\ncd example\nnpm run lint\ncd ..\n```\n\n----------------------------------------\n\nTITLE: Building Package for Testing\nDESCRIPTION: Commands to clean build directory, rebuild project, and create a local package for testing.\nSOURCE: https://github.com/erquhart/convex-better-auth/blob/main/CONTRIBUTING.md#2025-04-19_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nrm -rf dist/ && npm run build\nnpm pack\n```\n\n----------------------------------------\n\nTITLE: Deploying New Package Version\nDESCRIPTION: Steps to version, verify, and publish a new package release, including pushing tags to repository.\nSOURCE: https://github.com/erquhart/convex-better-auth/blob/main/CONTRIBUTING.md#2025-04-19_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n# this will change the version and commit it (if you run it in the root directory)\nnpm version patch\nnpm publish --dry-run\n# sanity check files being included\nnpm publish\ngit push --tags\n```\n\n----------------------------------------\n\nTITLE: Publishing Alpha Release\nDESCRIPTION: Commands to publish an alpha pre-release version of the package with appropriate tags.\nSOURCE: https://github.com/erquhart/convex-better-auth/blob/main/CONTRIBUTING.md#2025-04-19_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nnpm version prerelease --preid alpha\nnpm publish --tag alpha\n```"
  }
]