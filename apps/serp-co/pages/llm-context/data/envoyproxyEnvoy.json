[
  {
    "owner": "envoyproxy",
    "repo": "envoy",
    "content": "TITLE: Defining gRPC Service with HTTP Mapping in Protocol Buffers\nDESCRIPTION: This proto definition showcases a simple gRPC service 'Greeter' with a 'SayHello' method. It includes annotations for HTTP mapping, which is crucial for the gRPC-JSON transcoder.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/grpc_json_transcoder_filter.rst#2025-04-23_snippet_1\n\nLANGUAGE: proto\nCODE:\n```\nsyntax = \"proto3\";\n\npackage helloworld;\n\nservice Greeter {\n  rpc SayHello (HelloRequest) returns (HelloReply) {\n    option (google.api.http) = {\n      post: \"/say\"\n      body: \"*\"\n    };\n  }\n}\n\nmessage HelloRequest {\n  string name = 1;\n}\n\nmessage HelloReply {\n  string message = 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ZooKeeper Fast Response Counters (Plaintext)\nDESCRIPTION: This section lists counter statistics for the Envoy ZooKeeper proxy filter that specifically track the number of responses for each ZooKeeper operation completed faster than or equal to a predefined threshold. These stats help identify operations that are consistently performing quickly.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/listeners/network_filters/zookeeper_proxy_filter.rst#2025-04-23_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nconnect_resp_fast, Counter, Number of connect responses faster than or equal to the threshold\nping_resp_fast, Counter, Number of ping responses faster than or equal to the threshold\nauth_resp_fast, Counter, Number of auth responses faster than or equal to the threshold\ngetdata_resp_fast, Counter, Number of getdata responses faster than or equal to the threshold\ncreate_resp_fast, Counter, Number of create responses faster than or equal to the threshold\ncreate2_resp_fast, Counter, Number of create2 responses faster than or equal to the threshold\ncreatecontainer_resp_fast, Counter, Number of createcontainer responses faster than or equal to the threshold\ncreatettl_resp_fast, Counter, Number of createttl responses faster than or equal to the threshold\nsetdata_resp_fast, Counter, Number of setdata responses faster than or equal to the threshold\ngetchildren_resp_fast, Counter, Number of getchildren responses faster than or equal to the threshold\ngetchildren2_resp_fast, Counter, Number of getchildren2 responses faster than or equal to the threshold\ndelete_resp_fast, Counter, Number of delete responses faster than or equal to the threshold\nexists_resp_fast, Counter, Number of exists responses faster than or equal to the threshold\ngetacl_resp_fast, Counter, Number of getacl responses faster than or equal to the threshold\nsetacl_resp_fast, Counter, Number of setacl responses faster than or equal to the threshold\nsync_resp_fast, Counter, Number of sync responses faster than or equal to the threshold\ncheck_resp_fast, Counter, Number of check responses faster than or equal to the threshold\nmulti_resp_fast, Counter, Number of multi responses faster than or equal to the threshold\nreconfig_resp_fast, Counter, Number of reconfig responses faster than or equal to the threshold\nsetauth_resp_fast, Counter, Number of setauth responses faster than or equal to the threshold\nsetwatches_resp_fast, Counter, Number of setwatches responses faster than or equal to the threshold\nsetwatches2_resp_fast, Counter, Number of setwatches2 responses faster than or equal to the threshold\naddwatch_resp_fast, Counter, Number of addwatch responses faster than or equal to the threshold\ncheckwatches_resp_fast, Counter, Number of checkwatches responses faster than or equal to the threshold\nremovewatches_resp_fast, Counter, Number of removewatches responses faster than or equal to the threshold\ngetephemerals_resp_fast, Counter, Number of getephemerals responses faster than or equal to the threshold\ngetallchildrennumber_resp_fast, Counter, Number of getallchildrennumber responses faster than or equal to the threshold\nclose_resp_fast, Counter, Number of close responses faster than or equal to the threshold\n```\n\n----------------------------------------\n\nTITLE: Retrieving the Request or Response Body in Envoy Lua Filter (Lua)\nDESCRIPTION: Shows how to synchronously access and buffer the stream's body in a Lua filter script. Optionally, the always_wrap_body argument can be set for consistent return types. The body is only available after full buffering, and behavior is subject to Envoy's flow-control settings. Requires running inside Envoy's Lua HTTP filter.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/lua_filter.rst#2025-04-23_snippet_12\n\nLANGUAGE: lua\nCODE:\n```\nlocal body = handle:body(always_wrap_body)\n```\n\n----------------------------------------\n\nTITLE: Configuring Envoy Admin Interface and Address\nDESCRIPTION: YAML configuration for overriding default Envoy admin interface settings, specifying the admin interface address and port.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/start/quick-start/run-envoy.rst#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nadmin:\n  address:\n    socket_address:\n      address: 127.0.0.1\n      port_value: 9902\n```\n\n----------------------------------------\n\nTITLE: Configuring Envoy Fully Dynamic Bootstrap (YAML)\nDESCRIPTION: Presents a fully dynamic Envoy bootstrap configuration using YAML. It configures dynamic discovery for listeners (LDS) and clusters (CDS) via a gRPC xDS server defined in the static `xds_cluster`. Includes HTTP/2 keepalive settings for the xDS connection.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/overview/examples.rst#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nadmin:\n  address:\n    socket_address: { address: 127.0.0.1, port_value: 9901 }\n\ndynamic_resources:\n  lds_config:\n    api_config_source:\n      api_type: GRPC\n      grpc_services:\n        - envoy_grpc:\n            cluster_name: xds_cluster\n  cds_config:\n    api_config_source:\n      api_type: GRPC\n      grpc_services:\n        - envoy_grpc:\n            cluster_name: xds_cluster\n\nstatic_resources:\n  clusters:\n  - name: xds_cluster\n    connect_timeout: 0.25s\n    type: STATIC\n    lb_policy: ROUND_ROBIN\n    typed_extension_protocol_options:\n      envoy.extensions.upstreams.http.v3.HttpProtocolOptions:\n        \"@type\": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions\n        explicit_http_config:\n          http2_protocol_options:\n            # Configure an HTTP/2 keep-alive to detect connection issues and reconnect\n            # to the admin server if the connection is no longer responsive.\n            connection_keepalive:\n              interval: 30s\n              timeout: 5s\n    load_assignment:\n      cluster_name: xds_cluster\n      endpoints:\n      - lb_endpoints:\n        - endpoint:\n            address:\n              socket_address:\n                address: 127.0.0.1\n                port_value: 5678\n```\n\n----------------------------------------\n\nTITLE: Defining RST Documentation Structure for Envoy Configuration\nDESCRIPTION: ReStructuredText (RST) code that defines the documentation tree structure for Envoy configuration best practices, including edge and level two configuration sections.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/best_practices/best_practices.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n  :maxdepth: 2\n\n  edge\n  level_two\n```\n\n----------------------------------------\n\nTITLE: Configuring Listeners in Envoy (YAML)\nDESCRIPTION: This snippet demonstrates how to configure a listener in Envoy. It sets up a listener on port 10000 that matches all paths and routes them to the service_envoyproxy_io cluster.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/start/quick-start/configuration-static.rst#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nstatic_resources:\n  listeners:\n  - name: listener_0\n    address:\n      socket_address:\n        address: 0.0.0.0\n        port_value: 10000\n    filter_chains:\n    - filters:\n      - name: envoy.filters.network.http_connection_manager\n        typed_config:\n          \"@type\": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager\n          stat_prefix: ingress_http\n          access_log:\n          - name: envoy.access_loggers.stdout\n            typed_config:\n              \"@type\": type.googleapis.com/envoy.extensions.access_loggers.stream.v3.StdoutAccessLog\n          http_filters:\n          - name: envoy.filters.http.router\n            typed_config:\n              \"@type\": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router\n          route_config:\n            name: local_route\n            virtual_hosts:\n            - name: local_service\n              domains: [\"*\"]\n              routes:\n              - match:\n                  prefix: \"/\"\n                route:\n                  host_rewrite_literal: www.envoyproxy.io\n                  cluster: service_envoyproxy_io\n```\n\n----------------------------------------\n\nTITLE: Configuring Traffic Shifting Between Two Upstreams in Envoy\nDESCRIPTION: YAML configuration demonstrating how to gradually shift traffic between two versions of a service using runtime_fraction. The configuration allows for controlled migration from helloworld_v1 to helloworld_v2 clusters.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_conn_man/traffic_splitting.rst#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nvirtual_hosts:\n   - name: www2\n     domains:\n     - '*'\n     routes:\n       - match:\n           prefix: /\n           runtime_fraction:\n             default_value:\n               numerator: 50\n               denominator: HUNDRED\n             runtime_key: routing.traffic_shift.helloworld\n         route:\n           cluster: helloworld_v1\n       - match:\n           prefix: /\n         route:\n           cluster: helloworld_v2\n```\n\n----------------------------------------\n\nTITLE: Configuring ADS Bootstrap in Envoy\nDESCRIPTION: Minimal YAML configuration fragment for setting up ADS (Aggregated Discovery Service) in Envoy's bootstrap configuration. This enables consolidated resource discovery through a single gRPC stream.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/api-docs/xds_protocol.rst#2025-04-23_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n.. literalinclude:: ../_include/ads.yaml\n```\n\n----------------------------------------\n\nTITLE: Defining ZooKeeper Opcode Latency Histograms (CSV)\nDESCRIPTION: This section defines histogram statistics collected by the Envoy ZooKeeper proxy filter, formatted as a CSV table. Each histogram tracks the distribution of execution times (latency) in milliseconds for specific ZooKeeper opcodes (operations). These statistics are published under the '<stat_prefix>.zookeeper.<opcode>_resp_latency' namespace and are crucial for detailed performance analysis.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/listeners/network_filters/zookeeper_proxy_filter.rst#2025-04-23_snippet_5\n\nLANGUAGE: csv\nCODE:\n```\n.. csv-table::\n  :header: Name, Type, Description\n  :widths: 1, 1, 2\n\n  connect_response_latency, Histogram, Opcode execution time in milliseconds\n  ping_response_latency, Histogram, Opcode execution time in milliseconds\n  auth_response_latency, Histogram, Opcode execution time in milliseconds\n  watch_event, Histogram, Opcode execution time in milliseconds\n  getdata_resp_latency, Histogram, Opcode execution time in milliseconds\n  create_resp_latency, Histogram, Opcode execution time in milliseconds\n  create2_resp_latency, Histogram, Opcode execution time in milliseconds\n  createcontainer_resp_latency, Histogram, Opcode execution time in milliseconds\n  createttl_resp_latency, Histogram, Opcode execution time in milliseconds\n  setdata_resp_latency, Histogram, Opcode execution time in milliseconds\n  getchildren_resp_latency, Histogram, Opcode execution time in milliseconds\n  getchildren2_resp_latency, Histogram, Opcode execution time in milliseconds\n  getephemerals_resp_latency, Histogram, Opcode execution time in milliseconds\n```\n\n----------------------------------------\n\nTITLE: Configuring Apple DNS Resolver for Dynamic Forward Proxy in Envoy (YAML)\nDESCRIPTION: This YAML configuration demonstrates how to set up the Apple DNS resolver for dynamic forward proxy in Envoy. It's specifically for use on iOS/macOS systems and includes settings for the HTTP filter, cluster, and DNS cache with Apple-specific resolver options.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/dynamic_forward_proxy_filter.rst#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nstatic_resources:\n  listeners:\n  - name: listener_0\n    address:\n      socket_address:\n        protocol: TCP\n        address: 0.0.0.0\n        port_value: 10000\n    filter_chains:\n    - filters:\n      - name: envoy.filters.network.http_connection_manager\n        typed_config:\n          \"@type\": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager\n          stat_prefix: ingress_http\n          route_config:\n            name: local_route\n            virtual_hosts:\n            - name: local_service\n              domains: [\"*\"]\n              routes:\n              - match:\n                  prefix: \"/\"\n                route:\n                  cluster: dynamic_forward_proxy_cluster\n          http_filters:\n          - name: envoy.filters.http.dynamic_forward_proxy\n            typed_config:\n              \"@type\": type.googleapis.com/envoy.extensions.filters.http.dynamic_forward_proxy.v3.FilterConfig\n              dns_cache_config:\n                name: dynamic_forward_proxy_cache_config\n                dns_lookup_family: AUTO\n                dns_cache_circuit_breaker:\n                  max_pending_requests: 100\n          - name: envoy.filters.http.router\n            typed_config:\n              \"@type\": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router\n  clusters:\n  - name: dynamic_forward_proxy_cluster\n    lb_policy: CLUSTER_PROVIDED\n    cluster_type:\n      name: envoy.clusters.dynamic_forward_proxy\n      typed_config:\n        \"@type\": type.googleapis.com/envoy.extensions.clusters.dynamic_forward_proxy.v3.ClusterConfig\n        dns_cache_config:\n          name: dynamic_forward_proxy_cache_config\n          dns_lookup_family: AUTO\n          dns_cache_circuit_breaker:\n            max_pending_requests: 100\n          typed_dns_resolver_config:\n            name: envoy.network.dns_resolver.apple\n            typed_config:\n              \"@type\": type.googleapis.com/envoy.extensions.network.dns_resolver.apple.v3.AppleDnsResolverConfig\n              include_unroutable_families: false\n```\n\n----------------------------------------\n\nTITLE: Accessing and Modifying Headers with Envoy Lua Filter (Lua)\nDESCRIPTION: Demonstrates how to retrieve and potentially modify the stream's HTTP headers using the stream handle in Lua scripts for Envoy. Headers can only be modified before being sent to the next filter; improper modification results in script failure. Requires Envoy's Lua HTTP filter environment and is usable in both request and response contexts.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/lua_filter.rst#2025-04-23_snippet_11\n\nLANGUAGE: lua\nCODE:\n```\nlocal headers = handle:headers()\n```\n\n----------------------------------------\n\nTITLE: Configuring Aggregated Discovery Service (ADS) - Envoy - YAML\nDESCRIPTION: This YAML snippet enables Aggregated Discovery Service (ADS) for Envoy, so all discovery APIs (CDS, EDS, LDS, RDS, etc.) can be aggregated into a single gRPC stream. It is configured in dynamic_resources, pointing Envoy to use a single xDS control plane for unified discovery. Required dependencies include Envoy with gRPC ADS support, a configured xDS cluster, and management server compatibility. Inputs are the xDS cluster reference and dynamic_resources context; output is consolidated configuration updates across all resources.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/overview/xds_api.rst#2025-04-23_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\n    ads_config:\n      api_type: GRPC\n      grpc_services:\n      - envoy_grpc:\n          cluster_name: some_xds_cluster\n```\n\n----------------------------------------\n\nTITLE: Retrieving Peer Certificate SHA256 Digest in Envoy Lua\nDESCRIPTION: Calls the `sha256PeerCertificateDigest()` method on the `downstreamSslConnection` object. It returns the SHA256 digest of the peer certificate as a string. Returns an empty string if no peer certificate is presented.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/lua_filter.rst#2025-04-23_snippet_48\n\nLANGUAGE: lua\nCODE:\n```\ndownstreamSslConnection:sha256PeerCertificateDigest()\n```\n\n----------------------------------------\n\nTITLE: Example: Setting and Retrieving Dynamic Metadata in Envoy Lua Hooks\nDESCRIPTION: Demonstrates setting dynamic metadata using `dynamicMetadata:set()` within the `envoy_on_request` hook and retrieving it using `dynamicMetadata:get()` within the `envoy_on_response` hook. This example stores authorization and token headers from the request into metadata under the 'envoy.filters.http.lua' filter name and logs them during the response phase.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/lua_filter.rst#2025-04-23_snippet_42\n\nLANGUAGE: lua\nCODE:\n```\nfunction envoy_on_request(request_handle)\n  local headers = request_handle:headers()\n  request_handle:streamInfo():dynamicMetadata():set(\"envoy.filters.http.lua\", \"request.info\", {\n    auth = headers:get(\"authorization\"),\n    token = headers:get(\"x-request-token\"),\n  })\nend\n\nfunction envoy_on_response(response_handle)\n  local meta = response_handle:streamInfo():dynamicMetadata():get(\"envoy.filters.http.lua\")[\"request.info\"]\n  response_handle:logInfo(\"Auth: \"..meta.auth..\", token: \"..meta.token)\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring JSON-to-Metadata Filter in YAML\nDESCRIPTION: Example YAML configuration showing how to set up the JSON-to-Metadata filter to route traffic based on the presence or absence of a version attribute in the JSON payload.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/json_to_metadata_filter.rst#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n:25-45\n```\n\n----------------------------------------\n\nTITLE: JWT Header Format Examples\nDESCRIPTION: Various header format examples demonstrating how JWTs can be included in the bespoke header with the jwt_value prefix. All examples result in the same JWT extraction.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/api/envoy/config/filter/http/jwt_authn/v2alpha/README.md#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nbespoke: jwt_value=eyJFbnZveSI6ICJyb2NrcyJ9.e30.c2lnbmVk\n\nbespoke: {\"jwt_value\": \"eyJFbnZveSI6ICJyb2NrcyJ9.e30.c2lnbmVk\"}\n\nbespoke: beta:true,jwt_value:\"eyJFbnZveSI6ICJyb2NrcyJ9.e30.c2lnbmVk\",trace=1234\n```\n\n----------------------------------------\n\nTITLE: Configuring Envoy Listener with Access Logging\nDESCRIPTION: YAML configuration snippet showing listener setup with access logging to stdout, including the log format and path configuration.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/start/quick-start/run-envoy.rst#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\naccess_log:\n  - name: envoy.access_loggers.file\n    typed_config:\n      \"@type\": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog\n      path: /dev/stdout\n      log_format:\n        text_format_source:\n          inline_string: \"[%START_TIME%] \\\"%REQ(:METHOD)% %REQ(X-ENVOY-ORIGINAL-PATH?:PATH)% %PROTOCOL%\\\" %RESPONSE_CODE% %RESPONSE_FLAGS% %BYTES_RECEIVED% %BYTES_SENT% %DURATION% %RESP(X-ENVOY-UPSTREAM-SERVICE-TIME)% \\\"%REQ(X-FORWARDED-FOR)%\\\" \\\"%REQ(USER-AGENT)%\\\" \\\"%REQ(X-REQUEST-ID)%\\\" \\\"%REQ(:AUTHORITY)%\\\" \\\"%UPSTREAM_HOST%\\\"\n\"\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Streaming Body Chunks in Envoy Lua Filter (Lua)\nDESCRIPTION: Illustrates the use of the bodyChunks iterator for processing HTTP request/response bodies as they stream in, enabling processing without full buffering. Envoy suspends execution between chunks; scripts can inspect each chunk individually in real-time. Intended for usage within Envoy's Lua HTTP filter context.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/lua_filter.rst#2025-04-23_snippet_13\n\nLANGUAGE: lua\nCODE:\n```\nlocal iterator = handle:bodyChunks()\n```\n\nLANGUAGE: lua\nCODE:\n```\nfor chunk in request_handle:bodyChunks() do\n  request_handle:log(0, chunk:length())\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Different Compressors for Requests and Responses\nDESCRIPTION: Shows how to set up separate compression filters for handling requests and responses with different compression libraries.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/compressor_filter.rst#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nhttp_filters:\n- name: envoy.filters.http.compressor\n  typed_config:\n    \"@type\": type.googleapis.com/envoy.extensions.filters.http.compressor.v3.Compressor\n    responseDirectionConfig:\n      commonConfig:\n        enabled:\n          default_value: true\n          runtime_key: response_compressor_enabled\n        minContentLength: 100\n    compressorLibrary:\n      name: text_optimized\n      typed_config:\n        \"@type\": type.googleapis.com/envoy.extensions.compression.gzip.compressor.v3.Gzip\n        memoryLevel: 3\n        windowBits: 10\n        compressionLevel: BEST_COMPRESSION\n        compressionStrategy: DEFAULT_STRATEGY\n- name: envoy.filters.http.compressor\n  typed_config:\n    \"@type\": type.googleapis.com/envoy.extensions.filters.http.compressor.v3.Compressor\n    requestDirectionConfig:\n      commonConfig:\n        enabled:\n          default_value: true\n          runtime_key: request_compressor_enabled\n        minContentLength: 100\n    compressorLibrary:\n      name: general_purpose\n      typed_config:\n        \"@type\": type.googleapis.com/envoy.extensions.compression.brotli.compressor.v3.Brotli\n```\n\n----------------------------------------\n\nTITLE: Handling Ignored Nodes in PyYAML for Envoy Configuration\nDESCRIPTION: This snippet demonstrates how to instruct PyYAML to treat an ignored node as a simple scalar when loading Envoy YAML configuration. It uses the SafeLoader's add_constructor method to define the behavior for the !ignore tag.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/overview/examples.rst#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nyaml.SafeLoader.add_constructor('!ignore', yaml.loader.SafeConstructor.construct_scalar)\n```\n\n----------------------------------------\n\nTITLE: Configuring Downstream TLS Context in Envoy\nDESCRIPTION: YAML configuration for setting up downstream TLS context in Envoy listener for securing incoming connections. Includes transport socket configuration with TLS certificates.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/start/quick-start/securing.rst#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nstatic_resources:\n  listeners:\n  - address:\n      socket_address:\n        address: 0.0.0.0\n        port_value: 10000\n    filter_chains:\n    - filters:\n      - name: envoy.filters.network.http_connection_manager\n        typed_config:\n          \"@type\": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager\n          stat_prefix: ingress_http\n          route_config:\n            name: local_route\n            virtual_hosts:\n            - name: backend\n              domains:\n              - \"*\"\n              routes:\n              - match:\n                  prefix: \"/\"\n                route:\n                  cluster: service_backend\n          http_filters:\n          - name: envoy.filters.http.router\n            typed_config:\n              \"@type\": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router\n      transport_socket:\n        name: envoy.transport_sockets.tls\n        typed_config:\n          \"@type\": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.DownstreamTlsContext\n          common_tls_context:\n            tls_certificates:\n            - certificate_chain:\n                filename: \"certs/servercert.pem\"\n              private_key:\n                filename: \"certs/serverkey.pem\"\n```\n\n----------------------------------------\n\nTITLE: Lua Script for Making HTTP Calls and Modifying Headers\nDESCRIPTION: A Lua script example that makes an HTTP call to an upstream host and adds information from the response to the request headers.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/lua_filter.rst#2025-04-23_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\nfunction envoy_on_request(request_handle)\n  local headers, body = request_handle:httpCall(\n  \"lua_cluster\",\n  {\n    [\":method\"] = \"POST\",\n    [\":path\"] = \"/\",\n    [\":authority\"] = \"lua_cluster\"\n  },\n  \"hello world\",\n  5000)\n\n  request_handle:headers():add(\"upstream_foo\", headers[\"foo\"])\n  request_handle:headers():add(\"upstream_body_size\", #body)\nend\n```\n\n----------------------------------------\n\nTITLE: Lua Script for Rewriting Response Body using body() API\nDESCRIPTION: A Lua script example that rewrites the upstream response body and changes the content-type header using the body() API.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/lua_filter.rst#2025-04-23_snippet_9\n\nLANGUAGE: lua\nCODE:\n```\nfunction envoy_on_response(response_handle)\n  response_handle:body():setBytes(\"<html><b>Not Found<b></html>\")\n  response_handle:headers():replace(\"content-type\", \"text/html\")\nend\n```\n\n----------------------------------------\n\nTITLE: Installing Envoy on Ubuntu focal\nDESCRIPTION: This code snippet shows the process of installing Envoy on Ubuntu focal. It adds the Envoy repository to the system, installs the package, and verifies the installation.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/start/install.rst#2025-04-23_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ wget -O- https://apt.envoyproxy.io/signing.key | sudo gpg --dearmor -o /etc/apt/keyrings/envoy-keyring.gpg\n$ echo \"deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/envoy-keyring.gpg] https://apt.envoyproxy.io focal main\" | sudo tee /etc/apt/sources.list.d/envoy.list\n$ sudo apt-get update\n$ sudo apt-get install envoy\n$ envoy --version\n```\n\n----------------------------------------\n\nTITLE: Header Operations in Lua\nDESCRIPTION: Demonstrates various header manipulation operations including adding, getting, and iterating through headers.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/lua_filter.rst#2025-04-23_snippet_30\n\nLANGUAGE: lua\nCODE:\n```\nheaders:add(key, value)\n```\n\nLANGUAGE: lua\nCODE:\n```\nheaders:get(key)\n```\n\nLANGUAGE: lua\nCODE:\n```\nheaders:getAtIndex(key, index)\n```\n\nLANGUAGE: lua\nCODE:\n```\nheaders:getNumValues(key)\n```\n\nLANGUAGE: lua\nCODE:\n```\nfor key, value in pairs(headers) do\nend\n```\n\nLANGUAGE: lua\nCODE:\n```\nheaders:remove(key)\n```\n\nLANGUAGE: lua\nCODE:\n```\nheaders:replace(key, value)\n```\n\nLANGUAGE: lua\nCODE:\n```\nheaders:setHttp1ReasonPhrase(reasonPhrase)\n```\n\n----------------------------------------\n\nTITLE: Running Envoy with docker compose (YAML)\nDESCRIPTION: A docker-compose configuration for running Envoy. It maps port 10000 and mounts a custom configuration file.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/start/docker.rst#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\nservices:\n  envoy:\n    image: envoyproxy/|envoy_docker_image|\n    ports:\n      - \"10000:10000\"\n    volumes:\n      - ./envoy.yaml:/etc/envoy/envoy.yaml\n```\n\n----------------------------------------\n\nTITLE: Configuring the xDS Management Server Cluster in Envoy (YAML)\nDESCRIPTION: This YAML snippet defines the `control_plane` cluster which Envoy uses to connect to the xDS management server (which might also serve SDS). It configures basic cluster properties like connection timeout, endpoint address (using logical DNS), and specifies HTTP/2 protocol options necessary for gRPC communication. This configuration is a prerequisite for establishing the xDS connection, which can subsequently be secured using certificates potentially sourced via filesystem-based SDS for bootstrapping, as described in the accompanying text.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/security/secret.rst#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nclusters:\n- name: control_plane\n  type: LOGICAL_DNS\n  connect_timeout: 1s\n  load_assignment:\n    cluster_name: control_plane\n    endpoints:\n    - lb_endpoints:\n      - endpoint:\n          address:\n            socket_address:\n              address: controlplane\n              port_value: 8443\n  typed_extension_protocol_options:\n    envoy.extensions.upstreams.http.v3.HttpProtocolOptions:\n      \"@type\": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions\n```\n\n----------------------------------------\n\nTITLE: Setting Dynamic Resources in Envoy Proxy YAML\nDESCRIPTION: This snippet demonstrates how to configure dynamic resources in Envoy's YAML. It specifies which configurations should be updated dynamically and the cluster to connect for updates.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/start/quick-start/configuration-dynamic-control-plane.rst#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndynamic_resources:\n  lds_config:\n    resource_api_version: V3\n    api_config_source:\n      api_type: GRPC\n      transport_api_version: V3\n      grpc_services:\n        envoy_grpc:\n          cluster_name: xds_cluster\n  cds_config:\n    resource_api_version: V3\n    api_config_source:\n      api_type: GRPC\n      transport_api_version: V3\n      grpc_services:\n        envoy_grpc:\n          cluster_name: xds_cluster\n```\n\n----------------------------------------\n\nTITLE: Installing Envoy using Docker\nDESCRIPTION: This code snippet shows how to pull and run Envoy using official Docker images. It demonstrates pulling the image and checking the Envoy version for both the standard and distroless variants.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/start/install.rst#2025-04-23_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ docker pull envoyproxy/|envoy_docker_image|\n$ docker run --rm envoyproxy/|envoy_docker_image| --version\n```\n\n----------------------------------------\n\nTITLE: Configuring Wasm Network Filter in YAML\nDESCRIPTION: Example configuration for setting up a Wasm network filter in Envoy using a local Wasm binary file. The configuration specifies the filter name, plugin name, and VM configuration including the path to the Wasm binary and precompilation settings.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/listeners/network_filters/wasm_filter.rst#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: envoy.filters.network.wasm\ntyped_config:\n  \"@type\": type.googleapis.com/envoy.extensions.filters.network.wasm.v3.Wasm\n  config:\n    config:\n      name: \"my_plugin\"\n      vm_config:\n        code:\n          local:\n            filename: \"/etc/envoy_filter_http_wasm_example.wasm\"\n        allow_precompiled: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Certificate Verification in Envoy YAML\nDESCRIPTION: Example YAML configuration for enabling certificate verification in Envoy. It sets up TLS contexts for both upstream and downstream connections, specifying trusted CA certificates and subject alternative name matching.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/intro/arch_overview/security/ssl.rst#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nstatic_resources:\n  listeners:\n  - name: listener_0\n    address: { socket_address: { address: 127.0.0.1, port_value: 10000 } }\n    filter_chains:\n    - filters:\n      - name: envoy.filters.network.http_connection_manager\n        typed_config:\n          \"@type\": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager\n          stat_prefix: ingress_http\n          route_config:\n            name: local_route\n            virtual_hosts:\n            - name: local_service\n              domains: [\"*\"]\n              routes:\n              - match: { prefix: \"/\" }\n                route: { cluster: some_service }\n          http_filters:\n          - name: envoy.filters.http.router\n            typed_config:\n              \"@type\": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router\n      transport_socket:\n        name: envoy.transport_sockets.tls\n        typed_config:\n          \"@type\": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.DownstreamTlsContext\n          common_tls_context:\n            validation_context:\n              trusted_ca:\n                filename: /etc/ssl/certs/ca-certificates.crt\n  clusters:\n  - name: some_service\n    connect_timeout: 0.25s\n    type: STATIC\n    lb_policy: ROUND_ROBIN\n    load_assignment:\n      cluster_name: some_service\n      endpoints:\n      - lb_endpoints:\n        - endpoint:\n            address:\n              socket_address:\n                address: 127.0.0.1\n                port_value: 1234\n    transport_socket:\n      name: envoy.transport_sockets.tls\n      typed_config:\n        \"@type\": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext\n        common_tls_context:\n          validation_context:\n            trusted_ca:\n              filename: /etc/ssl/certs/ca-certificates.crt\n            match_typed_subject_alt_names:\n            - san_type: DNS\n              matcher:\n                exact: \"foo\"\n```\n\n----------------------------------------\n\nTITLE: Upstream HTTP Filter Configuration\nDESCRIPTION: YAML configuration for AWS Lambda as an upstream HTTP filter to handle SigV4/SigV4A request signatures correctly.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/aws_lambda_filter.rst#2025-04-23_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n:language: yaml\n:lines: 26-50\n:lineno-start: 26\n:linenos:\n:caption: :download:`aws-lambda-filter-upstream.yaml <_include/aws-lambda-filter-upstream.yaml>`\n```\n\n----------------------------------------\n\nTITLE: Custom Descriptor Extension in YAML for Envoy Proxy\nDESCRIPTION: This YAML snippet shows how to use the computed descriptors extension to create a custom descriptor using request attributes.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/rate_limit_filter.rst#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n- extension:\n    name: custom\n    typed_config:\n      \"@type\": type.googleapis.com/envoy.extensions.rate_limit_descriptors.expr.v3.Descriptor\n      descriptor_key: custom_key\n      text: connection.requested_server_name\n```\n\n----------------------------------------\n\nTITLE: Configuring JWT Provider with Remote JWKS in YAML\nDESCRIPTION: Example configuration for a JWT provider that fetches JWKS from a remote server. It specifies the issuer, remote JWKS URI, and related cluster configuration.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/jwt_authn_filter.rst#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nproviders:\n  provider1:\n    issuer: https://example.com\n    audiences:\n    - api_audience\n    remote_jwks:\n      http_uri:\n        uri: https://example.com/jwks.json\n        cluster: example_jwks_cluster\n        timeout: 5s\n      cache_duration:\n        seconds: 600\n\nclusters:\n- name: example_jwks_cluster\n  type: STRICT_DNS\n  load_assignment:\n    cluster_name: example_jwks_cluster\n    endpoints:\n    - lb_endpoints:\n      - endpoint:\n          address:\n            socket_address:\n              address: example.com\n              port_value: 443\n  transport_socket:\n    name: envoy.transport_sockets.tls\n    typed_config:\n      \"@type\": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext\n  connect_timeout: 30s\n```\n\n----------------------------------------\n\nTITLE: Configuring Envoy Static Bootstrap (YAML)\nDESCRIPTION: Provides a minimal static Envoy bootstrap configuration using YAML. It sets up an admin interface on port 9901, a listener on port 10000 with an HTTP connection manager routing all traffic to `some_service`, and statically defines the `some_service` cluster to connect to 127.0.0.1:1234 using round-robin load balancing.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/overview/examples.rst#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nadmin:\n  address:\n    socket_address: { address: 127.0.0.1, port_value: 9901 }\n\nstatic_resources:\n  listeners:\n  - name: listener_0\n    address:\n      socket_address: { address: 127.0.0.1, port_value: 10000 }\n    filter_chains:\n    - filters:\n      - name: envoy.filters.network.http_connection_manager\n        typed_config:\n          \"@type\": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager\n          stat_prefix: ingress_http\n          codec_type: AUTO\n          route_config:\n            name: local_route\n            virtual_hosts:\n            - name: local_service\n              domains: [\"*\"]\n              routes:\n              - match: { prefix: \"/\" }\n                route: { cluster: some_service }\n          http_filters:\n          - name: envoy.filters.http.router\n            typed_config:\n              \"@type\": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router\n  clusters:\n  - name: some_service\n    connect_timeout: 0.25s\n    type: STATIC\n    lb_policy: ROUND_ROBIN\n    load_assignment:\n      cluster_name: some_service\n      endpoints:\n      - lb_endpoints:\n        - endpoint:\n            address:\n              socket_address:\n                address: 127.0.0.1\n                port_value: 1234\n```\n\n----------------------------------------\n\nTITLE: Installing Envoy on Ubuntu jammy\nDESCRIPTION: This snippet illustrates how to install Envoy on Ubuntu jammy. It adds the Envoy repository, installs the package using apt, and checks the installed version.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/start/install.rst#2025-04-23_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ wget -O- https://apt.envoyproxy.io/signing.key | sudo gpg --dearmor -o /etc/apt/keyrings/envoy-keyring.gpg\n$ echo \"deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/envoy-keyring.gpg] https://apt.envoyproxy.io jammy main\" | sudo tee /etc/apt/sources.list.d/envoy.list\n$ sudo apt-get update\n$ sudo apt-get install envoy\n$ envoy --version\n```\n\n----------------------------------------\n\nTITLE: Configuring Per-Route API Key Auth in YAML for Envoy Proxy\nDESCRIPTION: This YAML snippet demonstrates how to override the API key authentication filter's configuration for specific routes. It includes customizations for key sources, allowed clients, and disabling the filter for certain routes.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/api_key_auth_filter.rst#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n.. literalinclude:: _include/api-key-auth-filter.yaml\n    :language: yaml\n    :lines: 16-55\n    :linenos:\n    :caption: :download:`api-key-auth-filter.yaml <_include/api-key-auth-filter.yaml>`\n```\n\n----------------------------------------\n\nTITLE: Configuring Circuit Breaker Thresholds in Envoy\nDESCRIPTION: JSON configuration for Envoy's circuit breaking thresholds. This example sets a maximum of 10 concurrent retries for the upstream cluster to control retry traffic and prevent overwhelming the service.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/faq/load_balancing/transient_failures.rst#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"thresholds\": [\n     {\n       \"max_retries\": 10,\n     }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Underlying Network Connection in Envoy Lua Filter (Lua)\nDESCRIPTION: Shows how to obtain the underlying TCP connection object for the current request in Envoy's Lua filter. This object exposes details about the connection, such as local/remote addresses. Requires running within Envoy's Lua filter context on an HTTP request.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/lua_filter.rst#2025-04-23_snippet_20\n\nLANGUAGE: lua\nCODE:\n```\nlocal connection = handle:connection()\n```\n\n----------------------------------------\n\nTITLE: Configuring Static TLS Secrets in Envoy Bootstrap (YAML)\nDESCRIPTION: This YAML configuration demonstrates defining TLS certificate secrets (`server_cert`, `client_cert`) and a validation context secret (`validation_context`) directly within the `static_resources` section of the Envoy bootstrap file. It shows how clusters and listeners can reference these statically defined secrets by name using `tls_certificate_sds_secret_configs` and `validation_context_sds_secret_config` respectively, enabling TLS without needing a remote SDS server.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/security/secret.rst#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nstatic_resources:\n  secrets:\n    - name: server_cert\n      tls_certificate:\n        certificate_chain:\n          filename: certs/servercert.pem\n        private_key:\n          filename: certs/serverkey.pem\n    - name: client_cert\n      tls_certificate:\n        certificate_chain:\n          filename: certs/clientcert.pem\n        private_key:\n          filename: certs/clientkey.pem\n    - name: validation_context\n      validation_context:\n        trusted_ca:\n          filename: certs/cacert.pem\n        verify_certificate_hash:\n          E0:F3:C8:CE:5E:2E:A3:05:F0:70:1F:F5:12:E3:6E:2E:97:92:82:84:A2:28:BC:F7:73:32:D3:39:30:A1:B6:FD\n  clusters:\n    - connect_timeout: 0.25s\n      load_assignment:\n        cluster_name: local_service_tls\n        ...\n        transport_socket:\n          name: envoy.transport_sockets.tls\n          typed_config:\n            \"@type\": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext\n            common_tls_context:\n              tls_certificate_sds_secret_configs:\n              - name: client_cert\n  listeners:\n    ....\n    filter_chains:\n      transport_socket:\n        name: envoy.transport_sockets.tls\n        typed_config:\n          \"@type\": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.DownstreamTlsContext\n          common_tls_context:\n            tls_certificate_sds_secret_configs:\n            - name: server_cert\n            validation_context_sds_secret_config:\n              name: validation_context\n```\n\n----------------------------------------\n\nTITLE: Configuring Upstream TLS Context in Envoy\nDESCRIPTION: YAML configuration for setting up upstream TLS context in Envoy cluster for secure connections to backend services.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/start/quick-start/securing.rst#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n  clusters:\n  - name: service_backend\n    connect_timeout: 1s\n    type: STRICT_DNS\n    lb_policy: ROUND_ROBIN\n    load_assignment:\n      cluster_name: service_backend\n      endpoints:\n      - lb_endpoints:\n        - endpoint:\n            address:\n              socket_address:\n                address: backend.example.com\n                port_value: 4443\n    transport_socket:\n      name: envoy.transport_sockets.tls\n      typed_config:\n        \"@type\": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext\n```\n\n----------------------------------------\n\nTITLE: Adding Upstream Cluster via Bootstrap Config Modifier in C++\nDESCRIPTION: Illustrates how to add a new upstream cluster ('ratelimit') to the Envoy configuration using a config modifier that targets the bootstrap proto (`envoy::config::bootstrap::v3::Bootstrap`). The example duplicates an existing cluster configuration, renames it, sets it as the rate limit service cluster, and configures it for HTTP/2.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/test/integration/README.md#2025-04-23_snippet_5\n\nLANGUAGE: c++\nCODE:\n```\n   config_helper_.addConfigModifier([](envoy::config::bootstrap::v3::Bootstrap& bootstrap) {\n      bootstrap.mutable_rate_limit_service()->set_cluster_name(\"ratelimit\");\n      auto* ratelimit_cluster = bootstrap.mutable_static_resources()->add_clusters();\n      ratelimit_cluster->MergeFrom(bootstrap.static_resources().clusters()[0]);\n      ratelimit_cluster->set_name(\"ratelimit\");\n      ConfigHelper::setHttp2(*ratelimit_cluster);\n    });\n```\n\n----------------------------------------\n\nTITLE: Configuring Kafka Request Filtering - Producer Access\nDESCRIPTION: YAML configuration showing how to filter Kafka requests to allow only basic producer access.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/listeners/network_filters/kafka_broker_filter.rst#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n- name: envoy.filters.network.kafka_broker\n  typed_config:\n    \"@type\": type.googleapis.com/envoy.extensions.filters.network.kafka_broker.v3.KafkaBroker\n    stat_prefix: prefix\n    api_keys_allowed:\n    - 0 # Produce\n    - 3 # Metadata\n    - 18 # API versions\n```\n\n----------------------------------------\n\nTITLE: MySQL Proxy RBAC Configuration in Envoy\nDESCRIPTION: Advanced configuration example demonstrating RBAC enforcement for MySQL table access. Shows how to deny update operations on specific database tables using dynamic metadata.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/listeners/network_filters/mysql_proxy_filter.rst#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nfilter_chains:\n- filters:\n  - name: envoy.filters.network.mysql_proxy\n    typed_config:\n      \"@type\": type.googleapis.com/envoy.extensions.filters.network.mysql_proxy.v3.MySQLProxy\n      stat_prefix: mysql\n  - name: envoy.filters.network.rbac\n    typed_config:\n      \"@type\": type.googleapis.com/envoy.extensions.filters.network.rbac.v3.RBAC\n      stat_prefix: rbac\n      rules:\n        action: DENY\n        policies:\n          \"product-viewer\":\n            permissions:\n            - metadata:\n                filter: envoy.filters.network.mysql_proxy\n                path:\n                - key: catalog.productdb\n                value:\n                  list_match:\n                    one_of:\n                      string_match:\n                        exact: update\n            principals:\n            - any: true\n  - name: envoy.filters.network.tcp_proxy\n    typed_config:\n      \"@type\": type.googleapis.com/envoy.extensions.filters.network.tcp_proxy.v3.TcpProxy\n      stat_prefix: tcp\n      cluster: mysql\n```\n\n----------------------------------------\n\nTITLE: Configuring Rate Limit Quota Filter in YAML for Envoy Proxy\nDESCRIPTION: This YAML configuration example sets up a Rate Limit Quota filter with three buckets: one for production, one for staging, and a default bucket. Each bucket has different behaviors for handling requests before receiving quota assignments from the RLQS.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/rate_limit_quota_filter.rst#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nhttp_filters:\n- name: envoy.filters.http.rate_limit_quota\n  typed_config:\n    \"@type\": type.googleapis.com/envoy.extensions.filters.http.rate_limit_quota.v3.RateLimitQuotaFilterConfig\n    bucket_matchers:\n    - matcher:\n        headers:\n        - name: deployment\n          string_match:\n            exact: prod\n      bucket_id_builder:\n        name: prod-rate-limit-quota\n      no_assignment_behavior:\n        http_request_headers_to_add:\n        - header:\n            key: x-rate-limit-quota\n            value: \"no-quota-yet\"\n        always_allow: true\n    - matcher:\n        headers:\n        - name: deployment\n          string_match:\n            exact: staging\n      bucket_id_builder:\n        name: staging-rate-limit-quota\n      no_assignment_behavior:\n        http_request_headers_to_add:\n        - header:\n            key: x-rate-limit-quota\n            value: \"no-quota-yet\"\n        status_code: 429\n    on_no_match:\n      no_assignment_behavior:\n        http_request_headers_to_add:\n        - header:\n            key: x-rate-limit-quota\n            value: \"no-quota-yet\"\n        token_bucket:\n          max_tokens: 1000\n          tokens_per_fill: 1000\n          fill_interval: 1s\n      bucket_id_builder:\n        name: default-rate-limit-quota\n    expired_assignment_behavior:\n      http_request_headers_to_add:\n      - header:\n          key: x-rate-limit-quota\n          value: \"expired-quota\"\n      status_code: 429\n    server_settings:\n      timeout: 0.2s\n      grpc_service:\n        envoy_grpc:\n          cluster_name: grpc_rate_limit_quota_cluster\n    domain: envoy-rlqs\n    with_request_body:\n      max_request_bytes: 8192\n    reporting_interval: 60s\n    rate_limited_as_resource_exhausted: true\n```\n\n----------------------------------------\n\nTITLE: Configuring LDS with ADS Channel\nDESCRIPTION: Example of configuring LDS to use the ADS (Aggregated Discovery Service) channel for centralized configuration delivery.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/overview/xds_api.rst#2025-04-23_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nlds_config: {ads: {}}\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Lua HTTP Filter in YAML\nDESCRIPTION: A simple example of configuring a Lua HTTP filter with default source code in Envoy's YAML configuration.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/lua_filter.rst#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nhttp_filters:\n- name: envoy.filters.http.lua\n  typed_config:\n    \"@type\": type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua\n    default_source_code:\n      inline_string: |\n        function envoy_on_request(request_handle)\n          -- custom request handling\n        end\n\n        function envoy_on_response(response_handle)\n          -- custom response handling\n        end\n```\n\n----------------------------------------\n\nTITLE: Configuring Envoy Redis Custom Health Check (YAML)\nDESCRIPTION: This YAML snippet demonstrates how to configure a custom health check in Envoy to utilize the Redis health checker. It specifies the checker's name (`envoy.health_checkers.redis`) and its typed configuration, including the necessary `@type` and an optional `key` (`foo`). If the `key` is specified, Envoy will perform a Redis EXISTS command on this key; the health check passes if the key does not exist.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/upstream/health_checkers/redis.rst#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n.. code-block:: yaml\n\n  custom_health_check:\n    name: envoy.health_checkers.redis\n      typed_config:\n        \"@type\": type.googleapis.com/envoy.extensions.health_checkers.redis.v3.Redis\n        key: foo\n```\n\n----------------------------------------\n\nTITLE: Getting Peer Certificate Expiration Time in Lua\nDESCRIPTION: Returns the timestamp-since-epoch in seconds when the peer certificate expires. Returns 0 if there is no peer certificate.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/lua_filter.rst#2025-04-23_snippet_62\n\nLANGUAGE: lua\nCODE:\n```\ndownstreamSslConnection:validFromPeerCertificate()\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Request Signing Filter in YAML\nDESCRIPTION: Example configuration for the AWS Request Signing filter in Envoy Proxy. It specifies the service name, region, and use of unsigned payload.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/aws_request_signing_filter.rst#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nhttp_filters:\n- name: envoy.filters.http.aws_request_signing\n  typed_config:\n    \"@type\": type.googleapis.com/envoy.extensions.filters.http.aws_request_signing.v3.AwsRequestSigning\n    service_name: s3\n    region: us-west-2\n    use_unsigned_payload: true\n    match_excluded_headers:\n    - prefix: x-envoy\n    - prefix: x-forwarded\n    - exact: x-amzn-trace-id\n```\n\n----------------------------------------\n\nTITLE: Querying Envoy Stats Categories via Admin API\nDESCRIPTION: Command-line example to retrieve and process the top-level categories of statistics available through Envoy's stats admin endpoint.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/start/quick-start/admin.rst#2025-04-23_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ curl -s http://localhost:9901/stats | cut -d. -f1 | sort | uniq\n```\n\n----------------------------------------\n\nTITLE: Configuring Composite Filter with Fault Injection in Envoy YAML\nDESCRIPTION: This YAML configuration demonstrates how to use the Composite Filter in Envoy to dynamically inject different latencies using the Fault Injection filter. It uses the 'x-fault-category' header to determine which fault configuration to apply.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/composite_filter.rst#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nstatic_resources:\n  listeners:\n  - address:\n      socket_address:\n        address: 0.0.0.0\n        port_value: 8000\n    filter_chains:\n    - filters:\n      - name: envoy.filters.network.http_connection_manager\n        typed_config:\n          \"@type\": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager\n          stat_prefix: ingress_http\n          http_filters:\n          - name: envoy.filters.http.composite\n            typed_config:\n              \"@type\": type.googleapis.com/envoy.extensions.filters.http.composite.v3.Composite\n              matcher:\n                matcher_tree:\n                  input:\n                    name: request-headers\n                    typed_config:\n                      \"@type\": type.googleapis.com/envoy.type.matcher.v3.HttpRequestHeaderMatchInput\n                      header_name: x-fault-category\n                  exact_match_map:\n                    map:\n                      \"huge fault\":\n                        action:\n                          name: huge_fault\n                          typed_config:\n                            \"@type\": type.googleapis.com/envoy.extensions.filters.http.fault.v3.HTTPFault\n                            delay:\n                              fixed_delay: 10s\n                              percentage:\n                                numerator: 100\n                      \"tiny fault\":\n                        action:\n                          name: tiny_fault\n                          typed_config:\n                            \"@type\": type.googleapis.com/envoy.extensions.filters.http.fault.v3.HTTPFault\n                            delay:\n                              fixed_delay: 1s\n                              percentage:\n                                numerator: 100\n          - name: envoy.filters.http.router\n            typed_config:\n              \"@type\": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router\n  clusters:\n  - name: web_service\n    connect_timeout: 1s\n    type: STRICT_DNS\n    lb_policy: ROUND_ROBIN\n    load_assignment:\n      cluster_name: web_service\n      endpoints:\n      - lb_endpoints:\n        - endpoint:\n            address:\n              socket_address:\n                address: web_service\n                port_value: 8080\n```\n\n----------------------------------------\n\nTITLE: Configuring Secure Admin Interface in YAML\nDESCRIPTION: YAML configuration snippet for setting up a secure administration interface in Envoy, limiting access to localhost only.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/operations/admin.rst#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nadmin:\n  profile_path: /tmp/envoy.prof\n  address:\n    socket_address: { address: 127.0.0.1, port_value: 9901 }\n```\n\n----------------------------------------\n\nTITLE: Configuring TCP Health Check in Envoy YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure a TCP health check for an Envoy cluster. The 'send' field specifies the hexadecimal bytes ('0101') to send to the upstream host during each check. The 'receive' field lists expected response byte blocks ('02', '03'). Envoy performs fuzzy matching, verifying these blocks appear in the specified order within the response, though not necessarily contiguously. If the 'receive' array is empty, Envoy performs a 'connect only' check, verifying only successful connection establishment.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/upstream/cluster_manager/cluster_hc.rst#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n  tcp_health_check:\n      send: {text: '0101'}\n      receive: [{text: '02'}, {text: '03'}]\n```\n\n----------------------------------------\n\nTITLE: Configuring Adaptive Concurrency Filter in YAML\nDESCRIPTION: Example YAML configuration for the Adaptive Concurrency HTTP filter. It sets up a gradient controller with specific parameters for sampling, concurrency limits, and minimum RTT calculation.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/adaptive_concurrency_filter.rst#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: envoy.filters.http.adaptive_concurrency\ntyped_config:\n  \"@type\": type.googleapis.com/envoy.extensions.filters.http.adaptive_concurrency.v3.AdaptiveConcurrency\n  gradient_controller_config:\n    sample_aggregate_percentile:\n      value: 90\n    concurrency_limit_params:\n      concurrency_update_interval: 0.1s\n    min_rtt_calc_params:\n      jitter:\n        value: 10\n      interval: 60s\n      request_count: 50\n  enabled:\n    default_value: true\n    runtime_key: \"adaptive_concurrency.enabled\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Overload Manager with Heap-Based Actions - YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure Envoy's Overload Manager to perform various actions based on heap memory thresholds and load shedding points. It specifies resource monitors, actions, triggers for heap saturation, and load shed points for TCP listeners. Dependencies include Envoy with Overload Manager and the fixed_heap resource monitor. Key parameters include threshold values to enable keepalive disabling, stop accepting requests, and TCP connection rejection at specified memory utilization. The snippet expects placement under the 'overload_manager' field in the Envoy Bootstrap configuration and outputs desired overload responses when resource levels are exceeded.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/operations/overload_manager/overload_manager.rst#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n   refresh_interval:\n     seconds: 0\n     nanos: 250000000\n   resource_monitors:\n     - name: \"envoy.resource_monitors.fixed_heap\"\n       typed_config:\n         \"@type\": type.googleapis.com/envoy.extensions.resource_monitors.fixed_heap.v3.FixedHeapConfig\n         max_heap_size_bytes: 2147483648\n   actions:\n     - name: \"envoy.overload_actions.disable_http_keepalive\"\n       triggers:\n         - name: \"envoy.resource_monitors.fixed_heap\"\n           threshold:\n             value: 0.92\n     - name: \"envoy.overload_actions.stop_accepting_requests\"\n       triggers:\n         - name: \"envoy.resource_monitors.fixed_heap\"\n           threshold:\n             value: 0.95\n    loadshed_points:\n      - name: \"envoy.load_shed_points.tcp_listener_accept\"\n        triggers:\n          - name: \"envoy.resource_monitors.fixed_heap\"\n            threshold:\n              value: 0.95\n```\n\n----------------------------------------\n\nTITLE: Configuring External Authorization Filter in Envoy\nDESCRIPTION: YAML configuration for setting up the external authorization network filter and its associated cluster in Envoy. Includes setup for gRPC service and HTTP/2 protocol options.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/listeners/network_filters/ext_authz_filter.rst#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nfilters:\n  - name: envoy.filters.network.ext_authz\n    typed_config:\n      \"@type\": type.googleapis.com/envoy.extensions.filters.network.ext_authz.v3.ExtAuthz\n      stat_prefix: ext_authz\n      grpc_service:\n        envoy_grpc:\n          cluster_name: ext-authz\n      include_peer_certificate: true\n\nclusters:\n  - name: ext-authz\n    type: static\n    typed_extension_protocol_options:\n      envoy.extensions.upstreams.http.v3.HttpProtocolOptions:\n        \"@type\": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions\n        explicit_http_config:\n          http2_protocol_options: {}\n    load_assignment:\n      cluster_name: ext-authz\n      endpoints:\n      - lb_endpoints:\n        - endpoint:\n            address:\n              socket_address:\n                address: 127.0.0.1\n                port_value: 10003\n```\n\n----------------------------------------\n\nTITLE: Responding to Envoy LDS Request (YAML)\nDESCRIPTION: Example gRPC DiscoveryResponse payload in YAML format for an LDS request. It defines `listener_0` listening on 127.0.0.1:10000, using an HTTP connection manager configured to discover its routes dynamically via RDS using the same `xds_cluster`. The `@type` indicates it's a `Listener`.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/overview/examples.rst#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nversion_info: \"0\"\nresources:\n- \"@type\": type.googleapis.com/envoy.config.listener.v3.Listener\n  name: listener_0\n  address:\n    socket_address:\n      address: 127.0.0.1\n      port_value: 10000\n  filter_chains:\n  - filters:\n    - name: envoy.filters.network.http_connection_manager\n      typed_config:\n        \"@type\": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager\n        stat_prefix: ingress_http\n        codec_type: AUTO\n        rds:\n          route_config_name: local_route\n          config_source:\n            api_config_source:\n              api_type: GRPC\n              grpc_services:\n                - envoy_grpc:\n                    cluster_name: xds_cluster\n        http_filters:\n        - name: envoy.filters.http.router\n          typed_config:\n            \"@type\": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router\n```\n\n----------------------------------------\n\nTITLE: Configuring RDS via route_config_name and config_source - Envoy - YAML\nDESCRIPTION: This YAML snippet configures Route Discovery Service (RDS) for Envoy, using gRPC as the API type. It provides the route configuration name and sets the config_source to use a specific gRPC xDS cluster. Placed within the RDS field of the HTTP Connection Manager config, this snippet enables dynamic fetching of routes from the management server. Expected parameters are the route name and xDS cluster used for gRPC communication.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/overview/xds_api.rst#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n    route_config_name: some_route_name\n    config_source:\n      api_config_source:\n        api_type: GRPC\n        grpc_services:\n        - envoy_grpc:\n            cluster_name: some_xds_cluster\n```\n\n----------------------------------------\n\nTITLE: Configuring CPU Utilization Monitor for Overload Protection in Envoy (YAML)\nDESCRIPTION: This YAML snippet shows how to configure the CPU utilization monitor and stop_accepting_requests overload action to protect against CPU-intensive workloads.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/operations/overload_manager/overload_manager.rst#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nstatic_resources:\n  listeners:\n  - name: listener_0\n    address:\n      socket_address:\n        address: 0.0.0.0\n        port_value: 80\n    filter_chains:\n    - filters:\n      - name: envoy.filters.network.http_connection_manager\n        typed_config:\n          \"@type\": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager\n```\n\n----------------------------------------\n\nTITLE: Routing UDP Datagrams Using Matcher with Envoy UDP Proxy - YAML\nDESCRIPTION: This YAML snippet demonstrates configuring Envoy's UDP proxy listener filter to route UDP datagrams based on the source IP and source port, utilizing a matcher for advanced traffic segmentation. The configuration specifies a matcher section that matches on source IP 127.0.0.1 and then further distinguishes traffic by source port, routing each combination to a specific upstream cluster. Dependencies include Envoy with UDP proxy filter and the matching API. Inputs are inbound UDP datagrams, and outputs are forwarded packets routed to upstream clusters according to the match criteria. Limitations include needing the matching extension enabled and only routing specified source IPs; all others are ignored.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/listeners/udp_filters/udp_proxy.rst#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nmatcher:\n  matcher_tree:\n    input:\n      name: envoy.matching.inputs.source_ip\n      typed_config:\n        \"@type\": type.googleapis.com/envoy.type.matcher.v3.CidrRange\n        address_prefix: 127.0.0.1\n        prefix_len: 32\n    exact_match_map:\n      map:\n        \"127.0.0.1\":\n          input:\n            name: envoy.matching.inputs.source_port\n          exact_match_map:\n            map:\n              \"10000\":\n                action:\n                  name: envoy.filters.udp_listener.udp_proxy.cluster\n                  typed_config:\n                    \"@type\": type.googleapis.com/envoy.extensions.filters.udp.udp_proxy.v3.Route\n                    cluster: cluster_a\n              \"20000\":\n                action:\n                  name: envoy.filters.udp_listener.udp_proxy.cluster\n                  typed_config:\n                    \"@type\": type.googleapis.com/envoy.extensions.filters.udp.udp_proxy.v3.Route\n                    cluster: cluster_b\n```\n\n----------------------------------------\n\nTITLE: Configuring Payload-To-Metadata Filter in Envoy (YAML)\nDESCRIPTION: This YAML snippet demonstrates configuring the Payload-To-Metadata filter within Envoy's network filter chain for the Thrift proxy. It includes request rules specifying how payload fields (such as version) are extracted and used for load balancing or routing. Key parameters include the list of rules for matching and extracting metadata, with usage constraints such as a maximum value size of 1024 bytes and support only for scalar fields. The configuration typically resides under the 'filters' section of Envoy's listener or network filter chain definition.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/other_protocols/thrift_filters/payload_to_metadata_filter.rst#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n  - name: envoy.filters.network.thrift_proxy.filters.payload_to_metadata\n    typed_config:\n      \"@type\": type.googleapis.com/envoy.extensions.filters.network.thrift_proxy.filters.payload_to_metadata.v3.PayloadToMetadata\n      request_rules:\n      - field_selector:\n          name: \"info\"\n          id: 2\n          child:\n            name: \"version\"\n            id: 1\n        on_present:\n          metadata_namespace: \"envoy.lb\"\n          key: \"version\"\n          value: \"%VALUE%\"\n        on_missing:\n          metadata_namespace: \"envoy.lb\"\n          key: \"version\"\n          value: \"default\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Envoy with gRPC-JSON Transcoder Filter\nDESCRIPTION: This YAML configuration sets up Envoy to proxy gRPC requests and use the gRPC-JSON transcoder filter. It enables both gRPC and RESTful JSON requests to be made to localhost:51051.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/grpc_json_transcoder_filter.rst#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nstatic_resources:\n  listeners:\n  - name: listener_0\n    address:\n      socket_address:\n        address: 0.0.0.0\n        port_value: 51051\n    filter_chains:\n    - filters:\n      - name: envoy.filters.network.http_connection_manager\n        typed_config:\n          \"@type\": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager\n          stat_prefix: grpc_json\n          codec_type: AUTO\n          route_config:\n            name: local_route\n            virtual_hosts:\n            - name: local_service\n              domains: [\"*\"]\n              routes:\n              - match:\n                  prefix: \"/\"\n                route:\n                  cluster: grpc\n                  timeout: 60s\n          http_filters:\n          - name: envoy.filters.http.grpc_json_transcoder\n            typed_config:\n              \"@type\": type.googleapis.com/envoy.extensions.filters.http.grpc_json_transcoder.v3.GrpcJsonTranscoder\n              proto_descriptor: \"/tmp/envoy/proto.pb\"\n              services: [\"bookstore.Bookstore\"]\n              print_options:\n                add_whitespace: true\n                always_print_primitive_fields: true\n                always_print_enums_as_ints: false\n                preserve_proto_field_names: false\n          - name: envoy.filters.http.router\n            typed_config:\n              \"@type\": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router\n\n  clusters:\n  - name: grpc\n    type: LOGICAL_DNS\n    lb_policy: ROUND_ROBIN\n    dns_lookup_family: V4_ONLY\n    typed_extension_protocol_options:\n      envoy.extensions.upstreams.http.v3.HttpProtocolOptions:\n        \"@type\": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions\n        explicit_http_config:\n          http2_protocol_options: {}\n    load_assignment:\n      cluster_name: grpc\n      endpoints:\n      - lb_endpoints:\n        - endpoint:\n            address:\n              socket_address:\n                address: localhost\n                port_value: 50051\n```\n\n----------------------------------------\n\nTITLE: Inline Lua Script Override for Specific Routes in YAML\nDESCRIPTION: An example of providing an inline Lua script override for specific routes using LuaPerRoute configuration in Envoy's YAML configuration.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/lua_filter.rst#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nroutes:\n- match:\n    prefix: \"/custom\"\n  route:\n    cluster: custom_cluster\n  typed_per_filter_config:\n    envoy.filters.http.lua:\n      \"@type\": type.googleapis.com/envoy.extensions.filters.http.lua.v3.LuaPerRoute\n      source_code:\n        inline_string: |\n          function envoy_on_request(request_handle)\n            request_handle:headers():add(\"custom-header\", \"custom-value\")\n          end\n```\n\n----------------------------------------\n\nTITLE: Configuring Envoy Proxy with YAML\nDESCRIPTION: This YAML configuration sets up an Envoy proxy with HTTP/2 and TLS support, custom filters, router filter, filesystem access logging, statsd metrics sink, and a single cluster with static endpoints.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/intro/life_of_a_request.rst#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nstatic_resources:\n  listeners:\n  - name: listener_0\n    address:\n      socket_address:\n        address: 0.0.0.0\n        port_value: 10000\n    filter_chains:\n    - filters:\n      - name: envoy.filters.network.http_connection_manager\n        typed_config:\n          \"@type\": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager\n          stat_prefix: ingress_http\n          access_log:\n          - name: envoy.access_loggers.file\n            typed_config:\n              \"@type\": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog\n              path: /dev/stdout\n          http_filters:\n          - name: custom_filter\n          - name: envoy.filters.http.router\n          route_config:\n            name: local_route\n            virtual_hosts:\n            - name: local_service\n              domains: [\"*\"]\n              routes:\n              - match:\n                  prefix: \"/\"\n                route:\n                  cluster: cluster_0\n      transport_socket:\n        name: envoy.transport_sockets.tls\n        typed_config:\n          \"@type\": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.DownstreamTlsContext\n          common_tls_context:\n            tls_certificates:\n            - certificate_chain:\n                filename: certs/servercert.pem\n              private_key:\n                filename: certs/serverkey.pem\n  clusters:\n  - name: cluster_0\n    connect_timeout: 0.25s\n    load_assignment:\n      cluster_name: cluster_0\n      endpoints:\n      - lb_endpoints:\n        - endpoint:\n            address:\n              socket_address:\n                address: 127.0.0.1\n                port_value: 20000\n    transport_socket:\n      name: envoy.transport_sockets.tls\n      typed_config:\n        \"@type\": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext\nstats_sinks:\n- name: envoy.stat_sinks.statsd\n  typed_config:\n    \"@type\": type.googleapis.com/envoy.config.metrics.v3.StatsdSink\n    address:\n      socket_address:\n        address: 127.0.0.1\n        port_value: 8125\n```\n\n----------------------------------------\n\nTITLE: Making an Upstream HTTP Call with Envoy Lua Filter (Lua)\nDESCRIPTION: Shows how to issue HTTP calls to configured upstream clusters from within an Envoy Lua filter, with both positional and options table signatures. The method allows for synchronous and asynchronous invocations, customizable timeouts, and response header handling including deduplication. Requires clusters configured in Envoy and proper method/authority/path headers to be set. The call can return headers and body, subject to configuration.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/lua_filter.rst#2025-04-23_snippet_15\n\nLANGUAGE: lua\nCODE:\n```\nlocal headers, body = handle:httpCall(cluster, headers, body, timeout_ms, asynchronous)\n```\n\nLANGUAGE: lua\nCODE:\n```\nlocal headers, body = handle:httpCall(cluster, headers, body, options)\n```\n\nLANGUAGE: lua\nCODE:\n```\n-- Create a fire-and-forget HTTP call.\nlocal request_options = {[\"asynchronous\"] = true}\n```\n\nLANGUAGE: lua\nCODE:\n```\n-- Create a synchronous HTTP call with 1000 ms timeout.\nlocal request_options = {[\"timeout_ms\"] = 1000}\n```\n\nLANGUAGE: lua\nCODE:\n```\n-- Create a synchronous HTTP call, but do not sample the trace span.\nlocal request_options = {[\"trace_sampled\"] = false}\n```\n\nLANGUAGE: lua\nCODE:\n```\n-- The same as above, but explicitly set the \"asynchronous\" flag to false.\nlocal request_options = {[\"asynchronous\"] = false, [\"trace_sampled\"] = false }\n```\n\nLANGUAGE: lua\nCODE:\n```\n-- The same as above, but with 1000 ms timeout.\nlocal request_options = {[\"asynchronous\"] = false, [\"trace_sampled\"] = false, [\"timeout_ms\"] = 1000 }\n```\n\n----------------------------------------\n\nTITLE: Configuring Envoy Edge Proxy Settings in YAML\nDESCRIPTION: This YAML configuration snippet demonstrates the recommended settings for Envoy when used as an edge proxy. It includes configurations for the admin interface, overload management, buffer limits, HTTP connection management, and various security-related options.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/best_practices/edge.rst#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nstatic_resources:\n  listeners:\n  - name: listener_0\n    address:\n      socket_address:\n        address: 0.0.0.0\n        port_value: 10000\n    per_connection_buffer_limit_bytes: 32768  # 32 KiB\n    filter_chains:\n    - filters:\n      - name: envoy.filters.network.http_connection_manager\n        typed_config:\n          \"@type\": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager\n          stat_prefix: ingress_http\n          use_remote_address: true\n          path_with_escaped_slashes_action: UNESCAPE_AND_REDIRECT\n          normalize_path: true\n          merge_slashes: true\n          common_http_protocol_options:\n            idle_timeout: 3600s  # 1 hour\n            headers_with_underscores_action: REJECT_REQUEST\n          http2_protocol_options:\n            max_concurrent_streams: 100\n            initial_stream_window_size: 65536  # 64 KiB\n            initial_connection_window_size: 1048576  # 1 MiB\n          stream_idle_timeout: 300s  # 5 mins, must be disabled for long-lived and streaming requests\n          request_timeout: 300s  # 5 mins, must be disabled for long-lived and streaming requests\n          route_config:\n            name: local_route\n            virtual_hosts:\n            - name: local_service\n              domains: [\"*\"]\n              routes:\n              - match:\n                  prefix: \"/\"\n                route:\n                  cluster: some_service\n          http_filters:\n          - name: envoy.filters.http.router\n            typed_config:\n              \"@type\": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router\n\n  clusters:\n  - name: some_service\n    type: LOGICAL_DNS\n    dns_lookup_family: V4_ONLY\n    load_assignment:\n      cluster_name: some_service\n      endpoints:\n      - lb_endpoints:\n        - endpoint:\n            address:\n              socket_address:\n                address: service.local\n                port_value: 8080\n    per_connection_buffer_limit_bytes: 32768  # 32 KiB\n\noverload_manager:\n  refresh_interval: 0.25s\n  resource_monitors:\n  - name: \"envoy.resource_monitors.fixed_heap\"\n    typed_config:\n      \"@type\": type.googleapis.com/envoy.extensions.resource_monitors.fixed_heap.v3.FixedHeapConfig\n      max_heap_size_bytes: 2147483648  # 2 GiB\n  actions:\n  - name: \"envoy.overload_actions.shrink_heap\"\n    triggers:\n    - name: \"envoy.resource_monitors.fixed_heap\"\n      threshold:\n        value: 0.95\n  - name: \"envoy.overload_actions.stop_accepting_requests\"\n    triggers:\n    - name: \"envoy.resource_monitors.fixed_heap\"\n      threshold:\n        value: 0.98\n\nadmin:\n  access_log:\n  - name: envoy.access_loggers.file\n    typed_config:\n      \"@type\": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog\n      path: /var/log/envoy/admin_access.log\n  profile_path: /var/log/envoy/envoy.prof\n  address:\n    socket_address:\n      address: 127.0.0.1\n      port_value: 9901\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Request Signing with Custom Credential Provider in YAML\nDESCRIPTION: Example configuration for AWS Request Signing using a custom credential provider chain, disabling the default chain and using specific settings for the credential file provider with a watched directory.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/aws_request_signing_filter.rst#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nhttp_filters:\n- name: envoy.filters.http.aws_request_signing\n  typed_config:\n    \"@type\": type.googleapis.com/envoy.extensions.filters.http.aws_request_signing.v3.AwsRequestSigning\n    service_name: s3\n    region: us-west-2\n    credential_provider_config:\n      custom_credential_provider_chain:\n        credential_file_credentials_provider:\n          watched_directory: /opt/envoy/credentials\n```\n\n----------------------------------------\n\nTITLE: Configuring SRDS via scoped_rds - Envoy - YAML\nDESCRIPTION: This YAML snippet configures Scoped Route Discovery Service (SRDS) for Envoy using a gRPC management server. It defines the scoping name and sets up the appropriate config source pointing at the gRPC xDS cluster. Intended for use in the `scoped_routes` field of the HTTP Connection Manager config, it dynamically discovers scoped routing tables as defined by the server. Dependencies include Envoy, proper manager configuration, and accurate cluster references.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/overview/xds_api.rst#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n    name: some_scoped_route_name\n    scoped_rds:\n      config_source:\n        api_config_source:\n          api_type: GRPC\n          grpc_services:\n          - envoy_grpc:\n              cluster_name: some_xds_cluster\n```\n\n----------------------------------------\n\nTITLE: Configuring Admission Control Filter in YAML for Envoy Proxy\nDESCRIPTION: Example YAML configuration for the Admission Control HTTP filter in Envoy Proxy. It sets up a 60-second sliding window for success rate calculation, 95% success rate threshold, custom HTTP and gRPC success criteria, and limits on RPS and maximum rejection probability.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/admission_control_filter.rst#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nhttp_filters:\n- name: envoy.filters.http.admission_control\n  typed_config:\n    \"@type\": type.googleapis.com/envoy.extensions.filters.http.admission_control.v3.AdmissionControl\n    enabled:\n      default_value: true\n      runtime_key: \"admission_control.enabled\"\n    sampling_window: 60s\n    sr_threshold:\n      default_value:\n        value: 95\n      runtime_key: \"admission_control.sr_threshold\"\n    success_criteria:\n      http_criteria:\n        http_success_status:\n          - 200\n          - 201\n          - 204\n          - 206\n          - 301\n          - 302\n          - 303\n          - 304\n          - 307\n          - 308\n          - 404\n      grpc_criteria:\n        grpc_success_status:\n          - OK\n          - CANCELLED\n    rps_threshold:\n      default_value: 1\n      runtime_key: \"admission_control.rps_threshold\"\n    max_rejection_probability:\n      default_value:\n        value: 95\n      runtime_key: \"admission_control.max_rejection_probability\"\n```\n\n----------------------------------------\n\nTITLE: Basic OAuth2 Filter Configuration in YAML\nDESCRIPTION: Basic configuration example for the OAuth2 filter showing essential settings like token endpoint, authorization endpoint, redirect URIs and credentials.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/oauth2_filter.rst#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nconfig:\n  token_endpoint:\n    cluster: oauth\n    uri: oauth.com/token\n    timeout: 3s\n  authorization_endpoint: https://oauth.com/oauth/authorize/\n  redirect_uri: \"%REQ(x-forwarded-proto)%://%REQ(:authority)%/callback\"\n  redirect_path_matcher:\n    path:\n      exact: /callback\n  signout_path:\n    path:\n      exact: /signout\n  credentials:\n    client_id: foo\n    token_secret:\n      name: token\n      sds_config:\n        path: \"/etc/envoy/token-secret.yaml\"\n    hmac_secret:\n      name: hmac\n      sds_config:\n        path: \"/etc/envoy/hmac.yaml\"\n  auth_scopes:\n  - user\n  - openid\n  - email\n  resources:\n  - oauth2-resource\n  - http://example.com\n```\n\n----------------------------------------\n\nTITLE: Configuring Wasm HTTP Filter in Envoy with YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure a standard HTTP filter in Envoy using a Wasm plugin. The filter references a Wasm binary on local disk and declares its plugin name, configuration, and associated properties. The snippet assumes the presence of the Wasm binary at a specified path and that Envoy is running on a supported non-Windows platform. Key parameters include the path to the Wasm module and plugin configuration fields. The output is an Envoy server configured to run the specified Wasm HTTP filter.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/wasm_filter.rst#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n24:   - name: envoy.filters.http.wasm\n25:     typed_config:\n26:       \"@type\": type.googleapis.com/envoy.extensions.filters.http.wasm.v3.Wasm\n27:       config:\n28:         name: my_plugin\n29:         root_id: my_root_id\n30:         configuration:\n31:           '@type': type.googleapis.com/google.protobuf.StringValue\n32:           value: 'my config'\n33:         vm_config:\n34:           vm_id: my_vm_id\n35:           runtime: envoy.wasm.runtime.v8\n36:           code:\n37:             local:\n38:               filename: /etc/envoy_filter_http_wasm_example.wasm\n39:           allow_precompiled: true\n40:         fail_open: false\n\n```\n\n----------------------------------------\n\nTITLE: Defining Envoy Proxy Metrics in YAML\nDESCRIPTION: Defines two metrics: a gauge for tracking scaling percentage (0-99 for scaling, 100 for saturated) and a counter for tracking the number of times load was shed. These metrics are used for monitoring system performance and load management.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/operations/overload_manager/overload_manager.rst#2025-04-23_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nscale_percent, Gauge, \"Scaled value of the action as a percent (0-99=scaling, 100=saturated)\"\nshed_load_count, Counter, \"Total count the load is sheded\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Static Service Discovery in Envoy YAML\nDESCRIPTION: Static service discovery explicitly specifies the network details of upstream hosts in the Envoy configuration. This is the simplest form of service discovery.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/intro/arch_overview/upstream/service_discovery.rst#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nclusters:\n  - name: static_cluster\n    connect_timeout: 0.25s\n    type: STATIC\n    lb_policy: ROUND_ROBIN\n    load_assignment:\n      cluster_name: static_cluster\n      endpoints:\n        - lb_endpoints:\n          - endpoint:\n              address:\n                socket_address:\n                  address: 10.1.2.3\n                  port_value: 443\n```\n\n----------------------------------------\n\nTITLE: Configuring Rate Limit Filter Descriptors with Substitution in YAML\nDESCRIPTION: Example configuration showing how to set up a rate limit filter with substitution formatting. Uses stream info substitution for the remote address descriptor and includes a static descriptor pair.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/listeners/network_filters/rate_limit_filter.rst#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: envoy.filters.network.ratelimit\ndomain: foo\ndescriptors:\n- entries:\n - key: remote_address\n   value: \"%DOWNSTREAM_REMOTE_ADDRESS_WITHOUT_PORT%\"\n - key: foo\n   value: bar\nstat_prefix: name\n```\n\n----------------------------------------\n\nTITLE: Responding to Envoy RDS Request (YAML)\nDESCRIPTION: Example gRPC DiscoveryResponse payload in YAML format for an RDS request. It defines the `local_route` configuration, which includes a virtual host matching all domains and a single route matching the \"/\" prefix, directing traffic to the `some_service` cluster. The `@type` indicates it's a `RouteConfiguration`.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/overview/examples.rst#2025-04-23_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nversion_info: \"0\"\nresources:\n- \"@type\": type.googleapis.com/envoy.config.route.v3.RouteConfiguration\n  name: local_route\n  virtual_hosts:\n  - name: local_service\n    domains: [\"*\"]\n    routes:\n    - match: { prefix: \"/\" }\n      route: { cluster: some_service }\n```\n\n----------------------------------------\n\nTITLE: Configuring EDS via eds_config - Envoy - YAML\nDESCRIPTION: This YAML snippet configures Envoy to perform Endpoint Discovery Service (EDS) via gRPC by setting the `eds_config` field of a Cluster. The configuration specifies `api_type: GRPC` and provides the `cluster_name` pointing to the xDS server. Dependencies include Envoy and valid xDS cluster; it's expected to be placed within the relevant cluster configuration. This enables endpoints to be dynamically discovered from the management server.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/overview/xds_api.rst#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n    eds_config:\n      api_config_source:\n        api_type: GRPC\n        grpc_services:\n        - envoy_grpc:\n            cluster_name: some_xds_cluster\n```\n\n----------------------------------------\n\nTITLE: Checking Connection Security (SSL/TLS) in Envoy Lua\nDESCRIPTION: Calls the `ssl()` method on the `connection` object. It returns an SSL connection info object if the connection is secured (TLS) and `nil` otherwise. This allows checking if the connection is plain or secure.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/lua_filter.rst#2025-04-23_snippet_44\n\nLANGUAGE: lua\nCODE:\n```\nif connection:ssl() == nil then\n  print(\"plain\")\nelse\n  print(\"secure\")\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring CDS Dynamic Resources - Envoy - YAML\nDESCRIPTION: This YAML snippet sets up dynamic resources for the Cluster Discovery Service (CDS) in Envoy, enabling it to fetch cluster configuration from an xDS management server over gRPC. The configuration specifies details under the `dynamic_resources` section, connecting Envoy with the management server. Required dependencies include Envoy and access to a configured management server; key parameters include the cluster for gRPC communication. The snippet is expected to be placed inside the Envoy bootstrap configuration file, typically with other resource controls. Output is dynamic fetching of cluster state.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/overview/xds_api.rst#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n    cds_config:\n      api_config_source:\n        api_type: GRPC\n        grpc_services:\n        - envoy_grpc:\n            cluster_name: some_xds_cluster\n```\n\n----------------------------------------\n\nTITLE: Configuring ZooKeeper Proxy Filter with TCP Proxy\nDESCRIPTION: Configuration example showing how to chain the ZooKeeper proxy filter with TCP proxy filter in Envoy. This setup enables ZooKeeper protocol parsing and monitoring.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/listeners/network_filters/zookeeper_proxy_filter.rst#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n<file contents not shown in original text>\n```\n\n----------------------------------------\n\nTITLE: Configuring Dynamic Listener Discovery Service (LDS) in Envoy YAML\nDESCRIPTION: This snippet demonstrates how to configure a dynamic Listener Discovery Service (LDS) in Envoy. It sets up an HTTP listener on port 10000, matching all domains and paths, and routing to the 'service_envoyproxy_io' cluster with host header rewriting.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/start/quick-start/configuration-dynamic-filesystem.rst#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nresources:\n- \"@type\": type.googleapis.com/envoy.config.listener.v3.Listener\n  name: listener_0\n  address:\n    socket_address:\n      address: 0.0.0.0\n      port_value: 10000\n  filter_chains:\n  - filters:\n    - name: envoy.filters.network.http_connection_manager\n      typed_config:\n        \"@type\": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager\n        stat_prefix: ingress_http\n        codec_type: AUTO\n        route_config:\n          name: local_route\n          virtual_hosts:\n          - name: local_service\n            domains:\n            - \"*\"\n            routes:\n            - match:\n                prefix: \"/\"\n              route:\n                host_rewrite_literal: www.envoyproxy.io\n                cluster: service_envoyproxy_io\n        http_filters:\n        - name: envoy.filters.http.router\n          typed_config:\n            \"@type\": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router\n```\n\n----------------------------------------\n\nTITLE: Configuring Envoy HTTP Tap Filter for Streaming Output (YAML)\nDESCRIPTION: YAML configuration for the Envoy HTTP tap filter (`envoy.extensions.filters.http.tap.v3.Tap`) demonstrating how to enable streaming output (`streaming: true`). It sets the output format to `PROTO_BINARY_LENGTH_DELIMITED` and directs output to files under `/tmp/` using `file_per_tap`. The filter matches requests based on specific response headers (`http_response_headers_match`). This configuration is suitable when fully buffering traces is not feasible.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/tap_filter.rst#2025-04-23_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n.. code-block:: yaml\n\n  name: envoy.filters.http.tap\n  typed_config:\n    \"@type\": type.googleapis.com/envoy.extensions.filters.http.tap.v3.Tap\n    common_config:\n      static_config:\n        match_config:\n          http_response_headers_match:\n            headers:\n              - name: bar\n                string_match:\n                  exact: baz\n        output_config:\n          streaming: true\n          sinks:\n            - format: PROTO_BINARY_LENGTH_DELIMITED\n              file_per_tap:\n                path_prefix: /tmp/\n```\n\n----------------------------------------\n\nTITLE: Demonstrating %DOWNSTREAM_PEER_CERT_V_START% Usage in Envoy Access Logs\nDESCRIPTION: Shows how to use the %DOWNSTREAM_PEER_CERT_V_START% substitution string in Envoy access logs. It represents the validity start date of the client certificate used for the downstream TLS connection. This can be customized using a format string.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/observability/access_log/usage.rst#2025-04-23_snippet_10\n\nLANGUAGE: plaintext\nCODE:\n```\n%DOWNSTREAM_PEER_CERT_V_START%\n```\n\n----------------------------------------\n\nTITLE: Configuring Header-To-Metadata Filter for Cookie-Based Routing in YAML\nDESCRIPTION: This YAML configuration demonstrates how to use the Header-To-Metadata filter with cookies. It shows how to extract a cookie value and add it as metadata with a specified key.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/header_to_metadata_filter.rst#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n- name: envoy.filters.http.header_to_metadata\n  typed_config:\n    \"@type\": type.googleapis.com/envoy.extensions.filters.http.header_to_metadata.v3.Config\n    request_rules:\n      - cookie: mycookie\n        on_header_present:\n          metadata_namespace: envoy.lb\n          key: version\n          type: STRING\n        on_header_missing:\n          metadata_namespace: envoy.lb\n          key: version\n          value: \"unknown\"\n          type: STRING\n        remove: false\n```\n\n----------------------------------------\n\nTITLE: Configuring Kill Request Filter in Envoy\nDESCRIPTION: YAML configuration example for setting up the kill request filter in Envoy. Specifies the filter name and uses typed configuration with a probability setting of 100/100.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/kill_request_filter.rst#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: envoy.filters.http.kill_request\ntyped_config:\n  \"@type\": type.googleapis.com/envoy.extensions.filters.http.kill_request.v3.KillRequest\n  probability:\n    numerator: 100\n```\n\n----------------------------------------\n\nTITLE: Defining HTTP Decoder Filter Interface Methods in Envoy (C++)\nDESCRIPTION: This C++ snippet defines the required interface methods for implementing a custom Stream Decoder Filter in Envoy HTTP filter chains. The methods, namely decodeHeaders, decodeData, and decodeTrailers, are invoked during the request path to process HTTP headers, body data, and trailers, respectively. Implementers must provide concrete definitions for each method, handling buffer references, stream-end flags, and header/trailer manipulation as appropriate for their filter's logic. The returned FilterStatus enum governs whether subsequent filters in the chain are invoked immediately or after additional input or side-effects; as such, correct status handling is critical for custom filter development.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/intro/life_of_a_request.rst#2025-04-23_snippet_4\n\nLANGUAGE: cpp\nCODE:\n```\n  virtual FilterHeadersStatus decodeHeaders(RequestHeaderMap& headers, bool end_stream) PURE;\n  virtual FilterDataStatus decodeData(Buffer::Instance& data, bool end_stream) PURE;\n  virtual FilterTrailersStatus decodeTrailers(RequestTrailerMap& trailers) PURE;\n```\n\n----------------------------------------\n\nTITLE: Configuring Host Rejection Based on Metadata in Envoy\nDESCRIPTION: Configuration example demonstrating how to reject hosts during retries based on their metadata using OmitHostMetadataConfig, which will exclude hosts with specific key-value pairs in their metadata.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/intro/arch_overview/http/http_connection_management.rst#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n    retry_on: 5xx\n    num_retries: 3\n    retry_host_predicate:\n    - name: envoy.retry_host_predicates.omit_host_metadata\n      typed_config:\n        \"@type\": type.googleapis.com/envoy.extensions.retry.host.omit_host_metadata.v3.OmitHostMetadataConfig\n        metadata_match:\n          filter_metadata:\n            envoy.lb:\n              key: value\n```\n\n----------------------------------------\n\nTITLE: Short-Circuiting Request Handling with Immediate Response in Envoy Lua (Lua)\nDESCRIPTION: Demonstrates how to immediately terminate HTTP request processing and send a response in Envoy using handle:respond. Only valid in the request flow, before headers are passed to the next filter. Misuse, such as responding inside a bodyChunks iteration, will lead to a script failure. Headers must specify :status and body is optional.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/lua_filter.rst#2025-04-23_snippet_17\n\nLANGUAGE: lua\nCODE:\n```\nhandle:respond(headers, body)\n```\n\nLANGUAGE: lua\nCODE:\n```\nfunction envoy_on_request(request_handle)\n  for chunk in request_handle:bodyChunks() do\n    request_handle:respond(\n      {[\":status\"] = \"100\"},\n      \"nope\")\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Validation Context SDS Secret in Envoy\nDESCRIPTION: This YAML configuration defines the resources for the validation context SDS secret, specifying the path to the CA certificate bundle for validating the xDS server certificate.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/security/secret.rst#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nresources:\n  - \"@type\": \"type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.Secret\"\n    name: validation_context_sds\n    validation_context:\n      trusted_ca:\n        filename: /certs/cacert.pem\n```\n\n----------------------------------------\n\nTITLE: Configuring Upstream Cluster for Header-To-Metadata Filter in YAML\nDESCRIPTION: This YAML snippet shows how to configure an upstream cluster to work with the Header-To-Metadata filter. It sets up subset load balancing based on the 'version' metadata key.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/header_to_metadata_filter.rst#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nclusters:\n- name: service\n  type: EDS\n  lb_policy: ROUND_ROBIN\n  lb_subset_config:\n    fallback_policy: DEFAULT_SUBSET\n    default_subset:\n      version: unknown\n    subset_selectors:\n    - keys:\n      - version\n```\n\n----------------------------------------\n\nTITLE: Configuring DNS Filter with Inline Table in Envoy\nDESCRIPTION: Example configuration for DNS filter using inline DNS table with support for multiple domains, address types, and SRV records. Includes both client and server configuration with external resolver settings.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/listeners/udp_filters/dns_filter.rst#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nlistener_filters:\n  name: envoy.filters.udp.dns_filter\n  typed_config:\n    \"@type\": \"type.googleapis.com/envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig\"\n    stat_prefix: \"dns_filter_prefix\"\n    client_config:\n      resolution_timeout: 5s\n      dns_resolution_config:\n        dns_resolver_options:\n          use_tcp_for_dns_lookups: false\n          no_default_search_domain: false\n        resolvers:\n        - socket_address:\n            address: \"8.8.8.8\"\n            port_value: 53\n        - socket_address:\n            address: \"8.8.4.4\"\n            port_value: 53\n      max_pending_lookups: 256\n    server_config:\n      inline_dns_table:\n        virtual_domains:\n          - name: \"www.domain1.com\"\n            endpoint:\n              address_list:\n                address:\n                - 10.0.0.1\n                - 10.0.0.2\n          - name: \"www.domain2.com\"\n            endpoint:\n              address_list:\n                address:\n                  - 2001:8a:c1::2800:7\n          - name: \"www.domain3.com\"\n            endpoint:\n              address_list:\n                address:\n                - 10.0.3.1\n          - name: \"www.domain4.com\"\n            endpoint:\n              cluster_name: cluster_0\n          - name: \"voip.domain5.com\"\n            endpoint:\n              service_list:\n                services:\n                  - service_name: \"sip\"\n                    protocol: { number: 6 }\n                    ttl: 86400s\n                    targets:\n                    - host_name: \"primary.voip.domain5.com\"\n                      priority: 10\n                      weight: 30\n                      port: 5060\n                    - host_name: \"secondary.voip.domain5.com\"\n                      priority: 10\n                      weight: 20\n                      port: 5060\n                    - host_name: \"backup.voip.domain5.com\"\n                      priority: 10\n                      weight: 10\n                      port: 5060\n```\n\n----------------------------------------\n\nTITLE: Configuring IP Geolocation Filter with MaxMind Provider in Envoy Proxy YAML\nDESCRIPTION: This YAML configuration snippet demonstrates how to set up the IP Geolocation filter in Envoy Proxy using the MaxMind geolocation provider. It includes settings for XFF configuration, provider selection, and database paths for city and ISP data.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/geoip_filter.rst#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: envoy.filters.http.geoip\ntyped_config:\n  \"@type\": type.googleapis.com/envoy.extensions.filters.http.geoip.v3.Geoip\n  xff_config:\n    xff_num_trusted_hops: 1\n  provider:\n      name: \"envoy.geoip_providers.maxmind\"\n      typed_config:\n        \"@type\": type.googleapis.com/envoy.extensions.geoip_providers.maxmind.v3.MaxMindConfig\n        common_provider_config:\n          geo_headers_to_add:\n            country: \"x-geo-country\"\n            region: \"x-geo-region\"\n            city: \"x-geo-city\"\n            asn: \"x-geo-asn\"\n        city_db_path: \"geoip/GeoLite2-City-Test.mmdb\"\n        isp_db_path: \"geoip/GeoIP2-ISP-Test.mmdb\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Routing with Header-To-Metadata Filter in Envoy (YAML)\nDESCRIPTION: This YAML snippet demonstrates how to configure the Envoy Header-To-Metadata filter to route traffic depending on the presence of a version header. The configuration defines rules that add dynamic metadata to the request based on whether the 'x-version' header exists. Key parameters include the header name, metadata key, and default value for missing headers (on missing case). Dependencies: the Envoy proxy must support Thrift and the Header-To-Metadata v3 API extension. The configuration is placed within the Envoy filter chain for correct operation.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/other_protocols/thrift_filters/header_to_metadata_filter.rst#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n  20: filters:\n  21:   - name: envoy.filters.network.thrift_proxy\n  22:     typed_config:\n  23:       '@type': type.googleapis.com/envoy.extensions.filters.network.thrift_proxy.v3.ThriftProxy\n  24:       route_config:\n  25:         name: local_route\n  26:         routes:\n  27:           - match: { method_name: \"*\" }\n  28:             route: { cluster: some_cluster }\n  29:       transport: AUTO_TRANSPORT\n  30:       protocol: AUTO_PROTOCOL\n  31:       filter_chain:\n  32:         filters:\n  33:           - name: envoy.filters.network.thrift_proxy.filters.header_to_metadata\n  34:             typed_config:\n  35:               '@type': type.googleapis.com/envoy.extensions.filters.network.thrift_proxy.filters.header_to_metadata.v3.HeaderToMetadata\n```\n\n----------------------------------------\n\nTITLE: Configuring Per-Virtualhost Golang HTTP Filter in Envoy YAML\nDESCRIPTION: This snippet shows how to configure a per-virtualhost Golang HTTP filter in Envoy's YAML. It includes both the filter configuration and the virtual host configuration with typed_per_filter_config.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/golang_filter.rst#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nhttp_filters:\n- name: envoy.filters.http.golang\n  typed_config:\n    \"@type\": type.googleapis.com/envoy.extensions.filters.http.golang.v3alpha.Config\n    library_id: example\n    library_path: \"/etc/envoy/my_plugin.so\"\n    plugin_name: example\n\nroute_config:\n  name: local_route\n  virtual_hosts:\n  - name: local_service\n    domains: [\"*\"]\n    typed_per_filter_config:\n      envoy.filters.http.golang:\n        \"@type\": type.googleapis.com/xds.type.v3.TypedStruct\n        value:\n          key: value\n    routes:\n    - match:\n        prefix: \"/\"\n      route:\n        cluster: some_service\n```\n\n----------------------------------------\n\nTITLE: Basic UDP Proxy Configuration with Envoy - YAML\nDESCRIPTION: This YAML code specifies an Envoy listener setup that proxies UDP traffic from port 1234 to an upstream UDP server at port 1235, permitting packet sizes up to 9000 bytes in both directions. Required dependencies include Envoy with the UDP proxy listener filter. Key parameters include listening address, port, upstream cluster configuration, and maximum packet size. Input is any UDP datagram arriving at the listening port and output is a proxied datagram sent to the configured upstream. The configuration is intended for scenarios where large UDP packets or fragments (up to jumbo frames) must be handled efficiently. Limitations are specific buffer/memory constraints as tuned in the configuration.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/listeners/udp_filters/udp_proxy.rst#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nlisteners:\n  - name: udp_listener\n    address:\n      socket_address:\n        address: 0.0.0.0\n        port_value: 1234\n    filter_chains:\n    - filters:\n        - name: envoy.filters.udp_listener.udp_proxy\n          typed_config:\n            \"@type\": type.googleapis.com/envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig\n            stat_prefix: udp\n            matcher:\n              ... # matcher/routing rules\n            cluster: udp_server\n            max_rx_datagram_size: 9000\nclusters:\n  - name: udp_server\n    connect_timeout: 1s\n    type: static\n    load_assignment:\n      cluster_name: udp_server\n      endpoints:\n      - lb_endpoints:\n        - endpoint:\n            address:\n              socket_address:\n                address: 127.0.0.1\n                port_value: 1235\n```\n\n----------------------------------------\n\nTITLE: Configuring Upstream Wasm HTTP Filter in Envoy with YAML\nDESCRIPTION: This YAML snippet illustrates configuring an upstream HTTP filter in Envoy using a Wasm plugin, enabling interception and modification of upstream HTTP traffic. As with the previous example, the filter loads its logic from a Wasm binary on local disk and specifies plugin, root, and VM identifiers. Required dependencies are identical, and the configuration must declare the binary path and plugin settings. Expected input is a compliant Wasm binary, and the filter will run only on supported platforms except Windows.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/wasm_filter.rst#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n89:     typed_per_filter_config:\n90:       envoy.filters.http.wasm:\n91:         '@type': type.googleapis.com/envoy.extensions.filters.http.wasm.v3.WasmPerRoute\n92:         config:\n93:           name: my_upstream_plugin\n94:           root_id: my_upstream_root_id\n95:           configuration:\n96:             '@type': type.googleapis.com/google.protobuf.StringValue\n97:             value: 'my upstream config'\n98:           vm_config:\n99:             vm_id: my_upstream_vm_id\n100:             runtime: envoy.wasm.runtime.v8\n101:             code:\n102:               local:\n103:                 filename: /etc/envoy_filter_http_upstream_wasm_example.wasm\n104:             allow_precompiled: true\n105:           fail_open: true\n\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Authorization Server Filter in Envoy\nDESCRIPTION: YAML configuration for setting up external authorization using an HTTP server, including timeout and failure mode settings.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/ext_authz_filter.rst#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nhttp:\n  name: envoy.filters.http.ext_authz\n  typed_config:\n    \"@type\": type.googleapis.com/envoy.extensions.filters.http.ext_authz.v3.ExtAuthz\n    transport_api_version: V3\n    http_service:\n      server_uri:\n        uri: http://ext-authz:3000\n        cluster: ext-authz\n        timeout: 0.25s\n      authorization_request:\n        allowed_headers:\n          patterns:\n          - exact: x-custom\n```\n\n----------------------------------------\n\nTITLE: Lua Script for Direct Response and Header Modification\nDESCRIPTION: A Lua script example that makes an HTTP call and then responds directly with a custom status code and headers, bypassing further filter iteration.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/lua_filter.rst#2025-04-23_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\nfunction envoy_on_request(request_handle)\n  local headers, body = request_handle:httpCall(\n  \"lua_cluster\",\n  {\n    [\":method\"] = \"POST\",\n    [\":path\"] = \"/\",\n    [\":authority\"] = \"lua_cluster\",\n    [\"set-cookie\"] = { \"lang=lua; Path=/\", \"type=binding; Path=/\" }\n  },\n  \"hello world\",\n  5000)\n\n  request_handle:respond(\n    {[\":status\"] = \"403\",\n     [\"upstream_foo\"] = headers[\"foo\"]},\n    \"nope\")\nend\n```\n\n----------------------------------------\n\nTITLE: Complete Envoy Bootstrap Configuration with OAuth2\nDESCRIPTION: Full example of Envoy bootstrap configuration including OAuth2 filter setup, listener configuration, and cluster definitions for both service and OAuth endpoints.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/oauth2_filter.rst#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nstatic_resources:\n  listeners:\n  - name: listener_0\n    address:\n      socket_address:\n        protocol: TCP\n        address: 127.0.0.1\n        port_value: 10000\n    filter_chains:\n    - filters:\n      - name: envoy.filters.network.http_connection_manager\n        typed_config:\n          \"@type\": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager\n          http_filters:\n          - name: envoy.filters.http.oauth2\n            typed_config:\n              \"@type\": type.googleapis.com/envoy.extensions.filters.http.oauth2.v3.OAuth2\n              config:\n                token_endpoint:\n                  cluster: oauth\n                  uri: oauth.com/token\n                  timeout: 3s\n                authorization_endpoint: https://oauth.com/oauth/authorize/\n                redirect_uri: \"%REQ(x-forwarded-proto)%://%REQ(:authority)%/callback\"\n                redirect_path_matcher:\n                  path:\n                    exact: /callback\n                signout_path:\n                  path:\n                    exact: /signout\n                credentials:\n                  client_id: foo\n                  token_secret:\n                    name: token\n                    sds_config:\n                      path: \"/etc/envoy/token-secret.yaml\"\n                  hmac_secret:\n                    name: hmac\n                    sds_config:\n                      path: \"/etc/envoy/hmac.yaml\"\n                auth_scopes:\n                - user\n                - openid\n                - email\n                resources:\n                - oauth2-resource\n                - http://example.com\n          - name: envoy.router\n            typed_config:\n              \"@type\": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router\n          tracing: {}\n          codec_type: \"AUTO\"\n          stat_prefix: ingress_http\n          route_config:\n            virtual_hosts:\n            - name: service\n              domains: [\"*\"]\n              routes:\n              - match:\n                  prefix: \"/\"\n                route:\n                  cluster: service\n                  timeout: 5s\n  clusters:\n  - name: service\n    connect_timeout: 5s\n    type: STATIC\n    lb_policy: ROUND_ROBIN\n    load_assignment:\n      cluster_name: service\n      endpoints:\n      - lb_endpoints:\n        - endpoint:\n            address:\n              socket_address:\n                address: 127.0.0.1\n                port_value: 8080\n  - name: oauth\n    connect_timeout: 5s\n    type: LOGICAL_DNS\n    lb_policy: ROUND_ROBIN\n    load_assignment:\n      cluster_name: oauth\n      endpoints:\n      - lb_endpoints:\n        - endpoint:\n            address:\n              socket_address:\n                address: auth.example.com\n                port_value: 443\n    transport_socket:\n      name: envoy.transport_sockets.tls\n      typed_config:\n        \"@type\": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext\n        sni: auth.example.com\n```\n\n----------------------------------------\n\nTITLE: Accessing Upstream Metadata in Envoy Access Logs\nDESCRIPTION: Example showing how to access upstream host metadata in access logs using the %UPSTREAM_METADATA% operator with different key specifications. The examples demonstrate accessing various levels of nested metadata from simple values to nested objects.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/observability/access_log/usage.rst#2025-04-23_snippet_9\n\nLANGUAGE: plaintext\nCODE:\n```\ncom.test.my_filter: {\"test_key\": \"foo\", \"test_object\": {\"inner_key\": \"bar\"}}\n```\n\n----------------------------------------\n\nTITLE: Configuring Per-Route Golang HTTP Filter in Envoy YAML\nDESCRIPTION: This snippet demonstrates how to configure a per-route Golang HTTP filter in Envoy's YAML. It includes both the filter configuration and the route configuration with typed_per_filter_config.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/golang_filter.rst#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nhttp_filters:\n- name: envoy.filters.http.golang\n  typed_config:\n    \"@type\": type.googleapis.com/envoy.extensions.filters.http.golang.v3alpha.Config\n    library_id: example\n    library_path: \"/etc/envoy/my_plugin.so\"\n    plugin_name: example\n\nroute_config:\n  name: local_route\n  virtual_hosts:\n  - name: local_service\n    domains: [\"*\"]\n    routes:\n    - match:\n        prefix: \"/\"\n      route:\n        cluster: some_service\n      typed_per_filter_config:\n        envoy.filters.http.golang:\n          \"@type\": type.googleapis.com/xds.type.v3.TypedStruct\n          value:\n            key: value\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS Inspector Filter in Envoy\nDESCRIPTION: Basic configuration example for enabling the TLS Inspector listener filter in Envoy. This filter is used to detect TLS connections and extract SNI/ALPN information from client hello messages.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/listeners/listener_filters/tls_inspector.rst#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nlistener_filters:\n- name: tls_inspector\n  typed_config:\n    \"@type\": type.googleapis.com/envoy.extensions.filters.listener.tls_inspector.v3.TlsInspector\n```\n\n----------------------------------------\n\nTITLE: Configuring Container CPU Utilization Monitor for Overload Protection in Envoy (YAML)\nDESCRIPTION: This YAML configuration demonstrates how to set up the CPU utilization monitor for container-level metrics in a Kubernetes environment.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/operations/overload_manager/overload_manager.rst#2025-04-23_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\noverload_manager:\n  resource_monitors:\n    - name: \"envoy.resource_monitors.cpu_utilization\"\n      typed_config:\n        \"@type\": type.googleapis.com/envoy.extensions.resource_monitors.cpu.v3.CpuMonitorConfig\n        mode: CONTAINER\n  actions:\n    - name: \"envoy.overload_actions.stop_accepting_requests\"\n      triggers:\n        - name: \"envoy.resource_monitors.cpu_utilization\"\n          scaled:\n            scaling_threshold: 0.85\n            saturation_threshold: 0.95\n```\n\n----------------------------------------\n\nTITLE: Configuring Combined Retry Policy in Envoy\nDESCRIPTION: Configuration example that combines both host and priority predicates, rejecting previously attempted hosts while also targeting different priorities in subsequent retry attempts.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/intro/arch_overview/http/http_connection_management.rst#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n    retry_on: 5xx\n    num_retries: 3\n    retry_host_predicate:\n    - name: envoy.retry_host_predicates.previous_hosts\n    host_selection_retry_max_attempts: 3\n    retry_priority:\n      name: envoy.retry_priorities.previous_priorities\n      typed_config:\n        \"@type\": type.googleapis.com/envoy.extensions.retry.priority.previous_priorities.v3.PreviousPrioritiesConfig\n        update_frequency: 2\n```\n\n----------------------------------------\n\nTITLE: Recommended UDP Proxy Overall Access Log Format\nDESCRIPTION: Presents a recommended format string for Envoy UDP proxy overall access logs. This format utilizes `%DYNAMIC_METADATA(udp.proxy.proxy:...)%` specifiers to log aggregate statistics for the entire UDP proxy instance, including total bytes sent/received, errors encountered during sending/receiving, total datagrams processed, total sessions handled, and occurrences of idle timeouts. It includes `%START_TIME%` to denote the log entry time.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/observability/access_log/usage.rst#2025-04-23_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\n[%START_TIME%]\n%DYNAMIC_METADATA(udp.proxy.proxy:bytes_sent)%\n%DYNAMIC_METADATA(udp.proxy.proxy:bytes_received)%\n%DYNAMIC_METADATA(udp.proxy.proxy:errors_sent)%\n%DYNAMIC_METADATA(udp.proxy.proxy:errors_received)%\n%DYNAMIC_METADATA(udp.proxy.proxy:datagrams_sent)%\n%DYNAMIC_METADATA(udp.proxy.proxy:datagrams_received)%\n%DYNAMIC_METADATA(udp.proxy.proxy:session_total)%\\n\n```\n\n----------------------------------------\n\nTITLE: Installing Envoy on Debian bookworm\nDESCRIPTION: This snippet shows how to install Envoy on Debian bookworm using apt. It adds the Envoy repository, installs the package, and verifies the installation.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/start/install.rst#2025-04-23_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ wget -O- https://apt.envoyproxy.io/signing.key | sudo gpg --dearmor -o /etc/apt/keyrings/envoy-keyring.gpg\n$ echo \"deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/envoy-keyring.gpg] https://apt.envoyproxy.io bookworm main\" | sudo tee /etc/apt/sources.list.d/envoy.list\n$ sudo apt-get update\n$ sudo apt-get install envoy\n$ envoy --version\n```\n\n----------------------------------------\n\nTITLE: Configuring Envoy Subset Selectors using JSON\nDESCRIPTION: This JSON snippet demonstrates how to configure `subset_selectors` for Envoy's subset load balancer. Each object in the array defines a selector using a list of metadata `keys`. Hosts whose `envoy.lb` metadata contains values for all keys in a selector are grouped into a corresponding subset. This allows for granular control over how upstream hosts are divided for load balancing based on endpoint metadata.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/source/docs/subset_load_balancer.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n``` json\n{\n  \"subset_selectors\": [\n    { \"keys\": [ \"a\", \"b\" ] },\n    { \"keys\": [ \"x\" ] }\n  ]\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Header-Based Fault Injection in Envoy\nDESCRIPTION: YAML configuration for enabling header-controlled fault injection with abort, delay and rate limiting capabilities. Sets maximum concurrent faults to 100 and configures header-based control for all fault types.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/fault_filter.rst#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: envoy.filters.http.fault\ntyped_config:\n  \"@type\": type.googleapis.com/envoy.extensions.filters.http.fault.v3.HTTPFault\n  max_active_faults: 100\n  abort:\n    header_abort: {}\n    percentage:\n      numerator: 100\n  delay:\n    header_delay: {}\n    percentage:\n      numerator: 100\n  response_rate_limit:\n    header_limit: {}\n    percentage:\n      numerator: 100\n```\n\n----------------------------------------\n\nTITLE: Configuring Generic Matching for HTTP Routing in Envoy\nDESCRIPTION: This YAML configuration demonstrates how to set up a generic match tree for HTTP routing in Envoy. It uses a matcher on a virtual host with a Route or RouteList as the action, allowing for more flexible and expressive matching than the original routing engine.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/intro/arch_overview/http/http_routing.rst#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nname: my-route\nvirtual_hosts:\n- name: local_service\n  domains:\n  - \"*\"\n  matcher:\n    matcher_tree:\n      input:\n        name: request-headers\n        typed_config:\n          \"@type\": type.googleapis.com/envoy.type.matcher.v3.HttpRequestHeaderMatchInput\n          header_name: :path\n      exact_match_map:\n        map:\n          \"/new_endpoint\":\n            action:\n              name: route1\n              typed_config:\n                \"@type\": type.googleapis.com/envoy.config.route.v3.Route\n                match:\n                  prefix: \"/new_endpoint\"\n                route:\n                  cluster: cluster1\n          \"/alternate_endpoint\":\n            action:\n              name: route2\n              typed_config:\n                \"@type\": type.googleapis.com/envoy.config.route.v3.Route\n                match:\n                  prefix: \"/alternate_endpoint\"\n                route:\n                  cluster: cluster2\n      custom_match:\n        name: ip-matcher\n        typed_config:\n          \"@type\": type.googleapis.com/xds.type.matcher.v3.IPMatcher\n          range_matchers:\n          - ranges:\n            - address_prefix: 192.168.0.0\n              prefix_len: 16\n            on_match:\n              action:\n                name: route3\n                typed_config:\n                  \"@type\": type.googleapis.com/envoy.config.route.v3.Route\n                  match:\n                    prefix: \"/\"\n                  route:\n                    cluster: cluster3\n          - ranges:\n            - address_prefix: 10.0.0.0\n              prefix_len: 8\n            on_match:\n              action:\n                name: route4\n                typed_config:\n                  \"@type\": type.googleapis.com/envoy.config.route.v3.Route\n                  match:\n                    prefix: \"/\"\n                  route:\n                    cluster: cluster4\n```\n\n----------------------------------------\n\nTITLE: Configuring Raw UDP Tunneling over HTTP/2 in Envoy (YAML)\nDESCRIPTION: This configuration snippet illustrates how to set up Envoy to tunnel raw UDP datagrams over upgraded CONNECT-UDP requests to the upstream using HTTP/2 streams. It highlights the tunneling_config and use of the HTTP Capsule session filter.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/intro/arch_overview/http/upgrades.rst#2025-04-23_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nstatic_resources:\n  listeners:\n  - name: listener_0\n    address:\n      socket_address:\n        protocol: UDP\n        address: 0.0.0.0\n        port_value: 10000\n    udp_listener_config:\n      downstream_socket_config:\n        prefer_gro: true\n    listener_filters:\n    - name: envoy.filters.udp_listener.udp_proxy\n      typed_config:\n        \"@type\": type.googleapis.com/envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig\n        stat_prefix: service\n        matcher:\n          on_no_match:\n            action:\n              name: route\n              typed_config:\n                \"@type\": type.googleapis.com/envoy.extensions.filters.udp.udp_proxy.v3.Route\n                cluster: service_http_proxy\n        tunneling_config:\n          proxy_host: www.google.com\n          proxy_port: 443\n          retry_options:\n            max_connect_attempts: 2\n        session_filters:\n        - name: envoy.filters.udp.session.http_capsule\n```\n\n----------------------------------------\n\nTITLE: Configuring Qatzip Compressor in Envoy (YAML)\nDESCRIPTION: This YAML snippet provides an example configuration for enabling the Qatzip compressor extension in Envoy. The configuration specifies Qatzip as the gzip compressor implementation, which integrates Intel QAT hardware acceleration through the qatlib and QATzip libraries. Parameters within the YAML determine how the compressor is attached and utilized by Envoy; users should ensure that the required qatlib and QATzip dependencies are installed on their host system. This snippet should be placed into Envoy's configuration file as part of the compressor or HTTP filter sections, and is intended for scenarios where improved compression performance is desired using hardware accelerators.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/other_features/qatzip.rst#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n## Example configuration for Qatzip compressor integration with Envoy.\n# (Assumes inclusion into main Envoy config under appropriate compressor/filter context)\n\ncompressor:\n  name: envoy.compression.qatzip.compressor\n  typed_config:\n    \"@type\": type.googleapis.com/envoy.extensions.compression.qatzip.compressor.v3alpha.Qatzip\n\n```\n\n----------------------------------------\n\nTITLE: Configuring SimpleHttpCache Filter in Envoy YAML\nDESCRIPTION: Example configuration for setting up the HTTP Cache filter with SimpleHttpCache implementation in Envoy. Shows the basic YAML structure needed to enable caching functionality.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/cache_filter.rst#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntyped_config:\n  \"@type\": type.googleapis.com/envoy.extensions.filters.http.cache.v3.CacheConfig\n  typed_cache_config:\n    \"@type\": type.googleapis.com/envoy.extensions.http.cache.simple_http_cache.v3.SimpleHttpCacheConfig\n```\n\n----------------------------------------\n\nTITLE: Configuring Original Source Listener with Proxy Protocol\nDESCRIPTION: YAML configuration example showing how to set up an Envoy listener on port 8888 using Original Source filter with Proxy Protocol. The configuration marks all upstream packets with value 123.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/listeners/listener_filters/original_src_filter.rst#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nlisteners:\n- address:\n    socket_address:\n      address: 0.0.0.0\n      port_value: 8888\n  listener_filters:\n    - name: envoy.filters.listener.proxy_protocol\n      typed_config:\n        \"@type\": type.googleapis.com/envoy.extensions.filters.listener.proxy_protocol.v3.ProxyProtocol\n    - name: envoy.filters.listener.original_src\n      typed_config:\n        \"@type\": type.googleapis.com/envoy.extensions.filters.listener.original_src.v3.OriginalSrc\n        mark: 123\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Proxy Filter with Custom Filter Implementation\nDESCRIPTION: Example YAML configuration showing how to set up a Dubbo proxy filter with custom filter implementation. Includes configuration for protocol type, serialization, routing, and custom filter chain setup.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/listeners/network_filters/dubbo_proxy_filter.rst#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nfilter_chains:\n- filters:\n  - name: envoy.filters.network.dubbo_proxy\n    typed_config:\n      \"@type\": type.googleapis.com/envoy.extensions.filters.network.dubbo_proxy.v3.DubboProxy\n      stat_prefix: dubbo_incomming_stats\n      protocol_type: Dubbo\n      serialization_type: Hessian2\n      multiple_route_config:\n        name: local_route\n        route_config:\n        - interface: org.apache.dubbo.demo.DemoService\n          routes:\n          - match:\n              method:\n                name:\n                  exact: sayHello\n            route:\n              cluster: user_service_dubbo_server\n      dubbo_filters:\n      - name: envoy.filters.dubbo.testFilter\n        typed_config:\n          \"@type\": type.googleapis.com/google.protobuf.Struct\n          value:\n            name: test_service\n      - name: envoy.filters.dubbo.router\n```\n\n----------------------------------------\n\nTITLE: Calculating Effective Weight for Locality Weighted Load Balancing in Pseudocode\nDESCRIPTION: This pseudocode demonstrates how Envoy calculates the effective weight for each locality and determines the load distribution. It takes into account the availability of endpoints, locality weights, and an over-provision factor.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/intro/arch_overview/upstream/load_balancing/locality_weight.rst#2025-04-23_snippet_0\n\nLANGUAGE: pseudocode\nCODE:\n```\navailability(L_X) = 140 * available_X_upstreams / total_X_upstreams\neffective_weight(L_X) = locality_weight_X * min(100, availability(L_X))\nload to L_X = effective_weight(L_X) / Σ_c(effective_weight(L_c))\n```\n\n----------------------------------------\n\nTITLE: Building custom Envoy Docker image (Dockerfile)\nDESCRIPTION: A Dockerfile recipe for creating a custom Envoy image with a custom configuration file. It copies the config and sets appropriate permissions.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/start/docker.rst#2025-04-23_snippet_1\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM envoyproxy/|envoy_docker_image|\nCOPY envoy.yaml /etc/envoy/envoy.yaml\nRUN chmod go+r /etc/envoy/envoy.yaml\n```\n\n----------------------------------------\n\nTITLE: Retrieving Route-Level Metadata in Envoy Lua Filter (Lua)\nDESCRIPTION: Shows how to retrieve metadata for the current route within an Envoy Lua filter. Metadata must be set under the matching filter config name. This is useful for per-route configuration or feature flags. Returns a metadata object wrapped for Lua access.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/lua_filter.rst#2025-04-23_snippet_18\n\nLANGUAGE: lua\nCODE:\n```\nlocal metadata = handle:metadata()\n```\n\n----------------------------------------\n\nTITLE: Enabling io_uring via Bootstrap Extension in Envoy (YAML)\nDESCRIPTION: This YAML configuration snippet shows how to enable the experimental io_uring socket interface in Envoy's bootstrap configuration. It defines a `typed_config` for the `envoy.network.socket_interface.io_uring` extension and sets it as the `default_socket_interface`. This instructs Envoy to use io_uring for TCP listeners and connections if the underlying Linux kernel (>= 5.11) supports it, otherwise falling back to the default socket API.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/other_features/io_uring.rst#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Use the io_uring socket interface implementation for all listeners and connections\nbootstrap_extensions:\n- name: envoy.network.socket_interface.io_uring\n  typed_config:\n    \"@type\": type.googleapis.com/envoy.extensions.network.socket_interface.v3.IoUringOptions\ndefault_socket_interface: envoy.network.socket_interface.io_uring\n```\n\n----------------------------------------\n\nTITLE: Dual Decompressor Configuration with Different Settings\nDESCRIPTION: Advanced configuration showing how to set up separate decompressor filters for requests and responses, each with different compression settings and runtime controls.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/decompressor_filter.rst#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nhttp_filters:\n# This filter is only enabled for requests.\n- name: envoy.filters.http.decompressor\n  typed_config:\n    \"@type\": type.googleapis.com/envoy.extensions.filters.http.decompressor.v3.Decompressor\n    decompressor_library:\n      name: small\n      typed_config:\n        \"@type\": \"type.googleapis.com/envoy.extensions.compression.gzip.decompressor.v3.Gzip\"\n        window_bits: 9\n        chunk_size: 8192\n    response_direction_config:\n      common_config:\n        enabled:\n          default_value: false\n          runtime_key: response_decompressor_enabled\n# This filter is only enabled for responses.\n- name: envoy.filters.http.decompressor\n  typed_config:\n    \"@type\": type.googleapis.com/envoy.extensions.filters.http.decompressor.v3.Decompressor\n    decompressor_library:\n      name: large\n      typed_config:\n        \"@type\": \"type.googleapis.com/envoy.extensions.compression.gzip.decompressor.v3.Gzip\"\n        window_bits: 12\n        chunk_size: 16384\n    request_direction_config:\n      common_config:\n        enabled:\n          default_value: false\n          runtime_key: request_decompressor_enabled\n```\n\n----------------------------------------\n\nTITLE: Configuring Random Load Balancing Policy in YAML for Envoy Proxy\nDESCRIPTION: This YAML configuration demonstrates how to set up a cluster with a random load balancing policy. It includes cluster name, type, connect timeout, load assignment, and the load balancing policy configuration using the extendable load balancing policy framework.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/intro/arch_overview/upstream/load_balancing_policies.rst#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: example_cluster\ntype: STRICT_DNS\nconnect_timeout: 0.25s\nload_assignment:\n  cluster_name: example_cluster\n  endpoints:\n  - lb_endpoints:\n    - endpoint:\n        address:\n          socket_address:\n            address: example.com\n            port_value: 80\nload_balancing_policy:\n  policies:\n  - typed_extension_config:\n      name: envoy.load_balancing_policies.random\n      typed_config:\n        \"@type\": type.googleapis.com/envoy.extensions.load_balancing_policies.random.v3.Random\n```\n\n----------------------------------------\n\nTITLE: Configuring Lua HTTP Filter with Named Scripts in YAML\nDESCRIPTION: An example of configuring a Lua HTTP filter with named scripts and per-route overrides in Envoy's YAML configuration.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/lua_filter.rst#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nhttp_filters:\n- name: envoy.filters.http.lua\n  typed_config:\n    \"@type\": type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua\n    default_source_code:\n      inline_string: |\n        function envoy_on_request(request_handle)\n          -- custom default request handling\n        end\n    source_codes:\n      hello.lua:\n        inline_string: |\n          function envoy_on_request(request_handle)\n            request_handle:headers():add(\"hello\", \"world\")\n          end\n      bye.lua:\n        inline_string: |\n          function envoy_on_response(response_handle)\n            response_handle:headers():add(\"bye\", \"world\")\n          end\n```\n\n----------------------------------------\n\nTITLE: Basic Decompressor Filter Configuration in YAML\nDESCRIPTION: Example configuration for setting up a basic Gzip decompressor filter in Envoy. Configures a decompressor with gzip compression and 10-bit window size.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/decompressor_filter.rst#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nhttp_filters:\n- name: decompressor\n  typed_config:\n    \"@type\": type.googleapis.com/envoy.extensions.filters.http.decompressor.v3.Decompressor\n    decompressor_library:\n      name: basic\n      typed_config:\n        \"@type\": type.googleapis.com/envoy.extensions.compression.gzip.decompressor.v3.Gzip\n        window_bits: 10\n```\n\n----------------------------------------\n\nTITLE: Configuring Node Identification in Envoy Proxy YAML\nDESCRIPTION: This snippet shows how to configure the node section in Envoy's YAML configuration. It specifies the cluster and id to uniquely identify the proxy node.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/start/quick-start/configuration-dynamic-control-plane.rst#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nnode:\n  cluster: test-cluster\n  id: test-id\n```\n\n----------------------------------------\n\nTITLE: Configuring JSON Access Log Format - Envoy - JSON\nDESCRIPTION: Shows an example configuration snippet to set up Envoy's access logging using structured JSON output via the 'json_format' key. The snippet maps human-friendly log keys to command operators, which will be substituted for real values at log time. Required dependencies: included in Envoy's access log configuration, using the v3 API. Expected input: Envoy configuration file. Output: JSON log objects with protocol, duration, and custom headers. JSON keys are customizable and support nesting.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/observability/access_log/usage.rst#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"config\": {\n    \"json_format\": {\n        \"protocol\": \"%PROTOCOL%\",\n        \"duration\": \"%DURATION%\",\n        \"my_custom_header\": \"%REQ(MY_CUSTOM_HEADER)%\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring LDS Dynamic Resources - Envoy - YAML\nDESCRIPTION: This YAML snippet enables Listener Discovery Service (LDS) dynamic resource configuration for Envoy over gRPC, using the dynamic_resources section. It configures Envoy to fetch listener state from the management server specified by the cluster. Dependencies include Envoy, a management server, and relevant cluster configuration; key is the `cluster_name` under `grpc_services`. Placed in Envoy's bootstrap configuration, it allows dynamic updating of listener configurations.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/overview/xds_api.rst#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n    lds_config:\n      api_config_source:\n        api_type: GRPC\n        grpc_services:\n        - envoy_grpc:\n            cluster_name: some_xds_cluster\n```\n\n----------------------------------------\n\nTITLE: Creating and Starting Envoy Proxy as a Windows Service\nDESCRIPTION: This code snippet demonstrates how to create and start an Envoy Proxy service using the Windows sc.exe command. It includes commands for creating the service, starting it, and querying its status. The commands assume a specific file path for the Envoy executable and configuration file.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/faq/windows/win_run_as_service.rst#2025-04-23_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n> sc create EnvoyProxy binpath=\"C:\\EnvoyProxy\\envoy.exe --config-path C:\\EnvoyProxy\\envoy-demo.yaml\" start=auto depend=Tcpip/Afd\n   [SC] CreateService SUCCESS\n> sc start EnvoyProxy\n   SERVICE_NAME: envoyproxy\n      TYPE               : 10  WIN32_OWN_PROCESS\n      STATE              : 2  START_PENDING\n                              (NOT_STOPPABLE, NOT_PAUSABLE, IGNORES_SHUTDOWN)\n      WIN32_EXIT_CODE    : 0  (0x0)\n      SERVICE_EXIT_CODE  : 0  (0x0)\n      CHECKPOINT         : 0x0\n      WAIT_HINT          : 0x7d0\n      PID                : 3924\n      FLAGS              :\n> sc query EnvoyProxy\n   SERVICE_NAME: envoyproxy\n      TYPE               : 10  WIN32_OWN_PROCESS\n      STATE              : 4  RUNNING\n                              (STOPPABLE, NOT_PAUSABLE, ACCEPTS_SHUTDOWN)\n      WIN32_EXIT_CODE    : 0  (0x0)\n      SERVICE_EXIT_CODE  : 0  (0x0)\n      CHECKPOINT         : 0x0\n      WAIT_HINT          : 0x0\n```\n\n----------------------------------------\n\nTITLE: Configuring High Thresholds to Effectively Disable Circuit Breaking in Envoy\nDESCRIPTION: This configuration sets all circuit breaker thresholds to a very high value (1000000000) for both DEFAULT and HIGH priority routes, effectively disabling the circuit breaking functionality. The configuration adjusts max_connections, max_pending_requests, max_requests, and max_retries parameters.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/faq/load_balancing/disable_circuit_breaking.rst#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ncircuit_breakers:\n  thresholds:\n    - priority: DEFAULT\n      max_connections: 1000000000\n      max_pending_requests: 1000000000\n      max_requests: 1000000000\n      max_retries: 1000000000\n    - priority: HIGH\n      max_connections: 1000000000\n      max_pending_requests: 1000000000\n      max_requests: 1000000000\n      max_retries: 1000000000\n```\n\n----------------------------------------\n\nTITLE: Setting up Git aliases for DCO signoff\nDESCRIPTION: These Git config commands set up aliases for committing with DCO signoff, making it easier to include the required signature in commit messages.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/CONTRIBUTING.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngit config --add alias.amend \"commit -s --amend\"\ngit config --add alias.c \"commit -s\"\n```\n\n----------------------------------------\n\nTITLE: Configuring ExtensionWithMatcher for HTTP Filter with Simple Header Matching\nDESCRIPTION: A basic example of wrapping an HTTP Fault filter with a matcher that skips the filter when a specific request header contains a specific value. This demonstrates the simplest use case of the matching API with request headers.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/intro/arch_overview/advanced/matching/matching_api.rst#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\naction:\n  name: envoy.filters.http.fault\n  typed_config:\n    \"@type\": type.googleapis.com/envoy.extensions.filters.http.fault.v3.HttpFault\nmatcher:\n  matcher_tree:\n    input:\n      name: envoy.matching.inputs.request_headers\n      typed_config:\n        \"@type\": type.googleapis.com/envoy.type.matcher.v3.HttpRequestHeaderMatchInput\n        header_name: some-header\n    exact_match_map:\n      map:\n        some_value_to_match_on:\n          action:\n            name: skip\n            typed_config:\n              \"@type\": type.googleapis.com/envoy.extensions.filters.common.matcher.action.v3.SkipFilter\n```\n\n----------------------------------------\n\nTITLE: Setting Up Table of Contents for gRPC Credentials in RST\nDESCRIPTION: This RST directive creates a table of contents that recursively includes all documentation files in the v3 directory. It uses a glob pattern to include all files and sets a maximum depth of 2 for the table of contents hierarchy.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/api-v3/config/grpc_credential/grpc_credential.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n  :glob:\n  :maxdepth: 2\n\n  v3/*\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Fault Injection in YAML\nDESCRIPTION: Example configuration for setting up fault injection in Redis proxy. Demonstrates how to configure both ERROR and DELAY faults with specific percentages and command targeting.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/listeners/network_filters/redis_proxy_filter.rst#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nfaults:\n- fault_type: ERROR\n  fault_enabled:\n    default_value:\n      numerator: 10\n      denominator: HUNDRED\n    runtime_key: \"bogus_key\"\n    commands:\n    - GET\n  - fault_type: DELAY\n    fault_enabled:\n      default_value:\n        numerator: 10\n        denominator: HUNDRED\n      runtime_key: \"bogus_key\"\n    delay: 2s\n```\n\n----------------------------------------\n\nTITLE: Configuring Qatzstd Compressor in Envoy (YAML)\nDESCRIPTION: This YAML configuration snippet demonstrates how to enable the Qatzstd compressor in an Envoy proxy deployment, using hardware acceleration from Intel QuickAssist Technology. Usage of this example requires that qatlib and the QAT-ZSTD-Plugin are installed and properly configured in the environment. Key parameters should be filled in as relevant for the deployment scenario. The YAML must be included as part of Envoy's configuration files; upon reload, Envoy will attach the Qat hardware and manage worker contexts automatically.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/other_features/qatzstd.rst#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n.. literalinclude:: _include/qatzstd.yaml\n    :language: yaml\n```\n\n----------------------------------------\n\nTITLE: Configuring SubstitutionFormatString Action for Dynamic Filter Chain Name\nDESCRIPTION: Example of using the SubstitutionFormatString action to compute a filter chain name dynamically based on connection metadata. This action allows incorporating dynamic metadata into the matching process.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/intro/arch_overview/advanced/matching/matching_api.rst#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\naction:\n  name: foo\n  typed_config:\n    \"@type\": type.googleapis.com/envoy.config.core.v3.SubstitutionFormatString\n    text_format_source:\n      inline_string: \"%DYNAMIC_METADATA(com.test_filter:test_key)%\"\n```\n\n----------------------------------------\n\nTITLE: Configuring EDS via eds_config for REST - Envoy - YAML\nDESCRIPTION: This YAML snippet enables the Endpoint Discovery Service (EDS) in Envoy to use REST for discovery by setting `api_type: REST` and providing the xDS cluster in `cluster_names`. It is placed inside the `eds_config` field of the Cluster configuration, allowing Envoy to retrieve endpoints from a management server over REST. Required dependencies are Envoy and xDS REST cluster connectivity; input is cluster configuration and expected output is dynamic endpoints.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/overview/xds_api.rst#2025-04-23_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n    eds_config:\n      api_config_source:\n        api_type: REST\n        cluster_names: [some_xds_cluster]\n```\n\n----------------------------------------\n\nTITLE: Configuring Postgres Proxy with TCP Proxy Chain in Envoy\nDESCRIPTION: Example configuration showing how to chain the Postgres proxy filter with TCP proxy. Sets up the required filter chain for handling Postgres traffic with basic statistics tracking.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/listeners/network_filters/postgres_proxy_filter.rst#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nfilter_chains:\n- filters:\n  - name: envoy.filters.network.postgres_proxy\n    typed_config:\n      \"@type\": type.googleapis.com/envoy.extensions.filters.network.postgres_proxy.v3alpha.PostgresProxy\n      stat_prefix: postgres\n  - name: envoy.tcp_proxy\n    typed_config:\n      \"@type\": type.googleapis.com/envoy.extensions.filters.network.tcp_proxy.v3.TcpProxy\n      stat_prefix: tcp\n      cluster: postgres_cluster\n```\n\n----------------------------------------\n\nTITLE: Configuring Dynamic TLS Secret Fetching via Remote SDS Servers in Envoy (YAML)\nDESCRIPTION: This YAML configuration, referenced from `sds-source-example.yaml`, illustrates how to configure Envoy to fetch TLS secrets (`client_cert`, `server_cert`, `validation_context`) dynamically from remote SDS servers. It demonstrates using different `ConfigSource` definitions within `SdsSecretConfig` to specify the SDS server location and communication method, including Google gRPC over UDS, Envoy gRPC over mTLS (requiring a dedicated cluster `sds_server_mtls`), and Envoy gRPC over UDS (requiring cluster `sds_server_uds`). This enables centralized secret management and rotation without Envoy restarts.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/security/secret.rst#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Content included from _include/sds-source-example.yaml\n# Defines clusters (sds_server_mtls, sds_server_uds, example_cluster) \n# and listeners configured to fetch secrets via SDS using different methods:\n# - example_cluster fetches 'client_cert' via Google gRPC over UDS.\n# - Listener fetches 'server_cert' via Envoy gRPC over mTLS (using sds_server_mtls cluster).\n# - Listener fetches 'validation_context' via Envoy gRPC over UDS (using sds_server_uds cluster).\n#\n# (Actual YAML content not present in the source document, only the include directive)\n..\nliteralinclude:: _include/sds-source-example.yaml\n   :language: yaml\n   :lines: 1-97\n   :linenos:\n   :lineno-start: 1\n   :caption: :download:`sds-source-example.yaml <_include/sds-source-example.yaml>`\n```\n\n----------------------------------------\n\nTITLE: Configuring Tap Transport Socket for TLS in Envoy Proxy (YAML)\nDESCRIPTION: This YAML snippet shows how to configure the tap transport socket for a TLS connection in Envoy Proxy. It includes the transport socket name, typed_config, and common_config settings, as well as the TLS context configuration.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/operations/traffic_tapping.rst#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ntransport_socket:\n  name: envoy.transport_sockets.tap\n  typed_config:\n    \"@type\": type.googleapis.com/envoy.extensions.transport_sockets.tap.v3.Tap\n    common_config:\n      static_config:\n        match_config:\n          any_match: true\n        output_config:\n          sinks:\n            - format: PROTO_BINARY\n              file_per_tap:\n                path_prefix: /some/tap/path\n    transport_socket:\n      name: envoy.transport_sockets.tls\n      typed_config:\n        \"@type\": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.DownstreamTlsContext\n        common_tls_context:\n          tls_certificates:\n            - certificate_chain: {filename: \"certs/servercert.pem\"}\n              private_key: {filename: \"certs/serverkey.pem\"}\n```\n\n----------------------------------------\n\nTITLE: Configuring Envoy Outlier Detection Runtime Settings\nDESCRIPTION: Lists runtime parameters that correspond to the static configuration options for Envoy's outlier detection mechanism. These allow dynamic adjustment of various thresholds (like consecutive 5xx errors, gateway failures), ejection times, enforcement percentages, and success rate criteria for identifying and ejecting unhealthy upstream hosts.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/upstream/cluster_manager/cluster_runtime.rst#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\noutlier_detection.consecutive_5xx\n  :ref:`consecutive_5XX\n  <envoy_v3_api_field_config.cluster.v3.OutlierDetection.consecutive_5xx>`\n  setting in outlier detection\n\noutlier_detection.consecutive_gateway_failure\n  :ref:`consecutive_gateway_failure\n  <envoy_v3_api_field_config.cluster.v3.OutlierDetection.consecutive_gateway_failure>`\n  setting in outlier detection\n\noutlier_detection.consecutive_local_origin_failure\n  :ref:`consecutive_local_origin_failure\n  <envoy_v3_api_field_config.cluster.v3.OutlierDetection.consecutive_local_origin_failure>`\n  setting in outlier detection\n\noutlier_detection.interval_ms\n  :ref:`interval\n  <envoy_v3_api_field_config.cluster.v3.OutlierDetection.interval>`\n  setting in outlier detection\n\noutlier_detection.base_ejection_time_ms\n  :ref:`base_ejection_time\n  <envoy_v3_api_field_config.cluster.v3.OutlierDetection.base_ejection_time>`\n  setting in outlier detection\n\noutlier_detection.max_ejection_percent\n  :ref:`max_ejection_percent\n  <envoy_v3_api_field_config.cluster.v3.OutlierDetection.max_ejection_percent>`\n  setting in outlier detection\n\noutlier_detection.enforcing_consecutive_5xx\n  :ref:`enforcing_consecutive_5xx\n  <envoy_v3_api_field_config.cluster.v3.OutlierDetection.enforcing_consecutive_5xx>`\n  setting in outlier detection\n\noutlier_detection.enforcing_consecutive_gateway_failure\n  :ref:`enforcing_consecutive_gateway_failure\n  <envoy_v3_api_field_config.cluster.v3.OutlierDetection.enforcing_consecutive_gateway_failure>`\n  setting in outlier detection\n\noutlier_detection.enforcing_consecutive_local_origin_failure\n  :ref:`enforcing_consecutive_local_origin_failure\n  <envoy_v3_api_field_config.cluster.v3.OutlierDetection.enforcing_consecutive_local_origin_failure>`\n  setting in outlier detection\n\noutlier_detection.enforcing_success_rate\n  :ref:`enforcing_success_rate\n  <envoy_v3_api_field_config.cluster.v3.OutlierDetection.enforcing_success_rate>`\n  setting in outlier detection\n\noutlier_detection.enforcing_local_origin_success_rate\n  :ref:`enforcing_local_origin_success_rate\n  <envoy_v3_api_field_config.cluster.v3.OutlierDetection.enforcing_local_origin_success_rate>`\n  setting in outlier detection\n\noutlier_detection.success_rate_minimum_hosts\n  :ref:`success_rate_minimum_hosts\n  <envoy_v3_api_field_config.cluster.v3.OutlierDetection.success_rate_minimum_hosts>`\n  setting in outlier detection\n\noutlier_detection.success_rate_request_volume\n  :ref:`success_rate_request_volume\n  <envoy_v3_api_field_config.cluster.v3.OutlierDetection.success_rate_request_volume>`\n  setting in outlier detection\n\noutlier_detection.success_rate_stdev_factor\n  :ref:`success_rate_stdev_factor\n  <envoy_v3_api_field_config.cluster.v3.OutlierDetection.success_rate_stdev_factor>`\n  setting in outlier detection\n\noutlier_detection.enforcing_failure_percentage\n  :ref:`enforcing_failure_percentage\n  <envoy_v3_api_field_config.cluster.v3.OutlierDetection.enforcing_failure_percentage>`\n  setting in outlier detection\n\noutlier_detection.enforcing_failure_percentage_local_origin\n  :ref:`enforcing_failure_percentage_local_origin\n  <envoy_v3_api_field_config.cluster.v3.OutlierDetection.enforcing_failure_percentage_local_origin>`\n  setting in outlier detection\n\noutlier_detection.failure_percentage_request_volume\n  :ref:`failure_percentage_request_volume\n  <envoy_v3_api_field_config.cluster.v3.OutlierDetection.failure_percentage_request_volume>`\n  setting in outlier detection\n\noutlier_detection.failure_percentage_minimum_hosts\n  :ref:`failure_percentage_minimum_hosts\n  <envoy_v3_api_field_config.cluster.v3.OutlierDetection.failure_percentage_minimum_hosts>`\n  setting in outlier detection\n\noutlier_detection.failure_percentage_threshold\n  :ref:`failure_percentage_threshold\n  <envoy_v3_api_field_config.cluster.v3.OutlierDetection.failure_percentage_threshold>`\n  setting in outlier detection\n\noutlier_detection.max_ejection_time_ms\n  :ref:`max_ejection_time\n  <envoy_v3_api_field_config.cluster.v3.OutlierDetection.max_ejection_time>`\n  setting in outlier detection\n\noutlier_detection.max_ejection_time_jitter_ms\n  :ref:`base_ejection_time\n  <envoy_v3_api_field_config.cluster.v3.OutlierDetection.max_ejection_time_jitter>`\n  setting in outlier detection\n```\n\n----------------------------------------\n\nTITLE: Getting Organization Name from X.509 Name in Lua\nDESCRIPTION: Returns the string representation of O fields (as a table) from the X.509 name. Returns an empty table if there is no such field or if the field can't be converted to UTF8 string.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/lua_filter.rst#2025-04-23_snippet_68\n\nLANGUAGE: lua\nCODE:\n```\nparsedSubject:organizationName()\n```\n\n----------------------------------------\n\nTITLE: HTTP Filter Configuration for GCP Authentication in Envoy\nDESCRIPTION: YAML configuration for the HTTP filter component of GCP authentication, including retry policy and token cache settings. Specifies how the filter should handle token fetching and caching behavior.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/gcp_authn_filter.rst#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n    http_filters:\n    - name: envoy.filters.http.gcp_authn\n      typed_config:\n        \"@type\": type.googleapis.com/envoy.extensions.filters.http.gcp_authn.v3.GcpAuthnFilterConfig\n        http_uri:\n          uri: http://metadata.google.internal/computeMetadata/v1/instance/service-accounts/default/identity?audience=[AUDIENCE]\n          cluster: metadata-cluster\n          timeout: 30s\n        retry_policy:\n          retry_back_off:\n            base_interval: 0.1s\n            max_interval: 1s\n          num_retries: 5\n        cache_config:\n          cache_size: 100\n    transport_socket:\n      name: envoy.transport_sockets.tls\n      typed_config:\n        \"@type\": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext\n    metadata:\n      filter_metadata:\n        envoy.filters.http.gcp_authn:\n          \"gcp_authn\":\n            \"audience\": \"http://example.com\"\n    load_assignment:\n      cluster_name: my-dst-cluster\n      endpoints:\n      - lb_endpoints:\n        - endpoint:\n            address:\n              socket_address:\n                address: example.com\n                port_value: 443\n```\n\n----------------------------------------\n\nTITLE: Generating Proto Descriptor Set for Helloworld Service\nDESCRIPTION: This command generates a protobuf descriptor set specifically for the helloworld service, including necessary imports and source info.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/grpc_json_transcoder_filter.rst#2025-04-23_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ protoc -I$(GOOGLEAPIS_DIR) -I. --include_imports --include_source_info \\\n    --descriptor_set_out=protos/helloworld.pb protos/helloworld.proto\n```\n\n----------------------------------------\n\nTITLE: Recommended UDP Proxy Session Access Log Format\nDESCRIPTION: Provides a recommended format string for Envoy UDP proxy session access logs. It uses various `%DYNAMIC_METADATA(udp.proxy.session:...)%` specifiers to capture session-specific details like the target cluster name, bytes sent/received, errors encountered, and datagram counts for a single session. It also includes the `%START_TIME%` specifier to log the beginning time of the session.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/observability/access_log/usage.rst#2025-04-23_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\n[%START_TIME%] %DYNAMIC_METADATA(udp.proxy.session:cluster_name)%\n%DYNAMIC_METADATA(udp.proxy.session:bytes_sent)%\n%DYNAMIC_METADATA(udp.proxy.session:bytes_received)%\n%DYNAMIC_METADATA(udp.proxy.session:errors_sent)%\n%DYNAMIC_METADATA(udp.proxy.session:datagrams_sent)%\n%DYNAMIC_METADATA(udp.proxy.session:datagrams_received)%\\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Clusters in Envoy (YAML)\nDESCRIPTION: This snippet shows how to configure a cluster in Envoy. It sets up the service_envoyproxy_io cluster that proxies over TLS to https://www.envoyproxy.io.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/start/quick-start/configuration-static.rst#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n  clusters:\n  - name: service_envoyproxy_io\n    type: LOGICAL_DNS\n    # Comment out the following line to test on v6 networks\n    dns_lookup_family: V4_ONLY\n    load_assignment:\n      cluster_name: service_envoyproxy_io\n      endpoints:\n      - lb_endpoints:\n        - endpoint:\n            address:\n              socket_address:\n                address: www.envoyproxy.io\n                port_value: 443\n    transport_socket:\n      name: envoy.transport_sockets.tls\n      typed_config:\n        \"@type\": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext\n        sni: www.envoyproxy.io\n```\n\n----------------------------------------\n\nTITLE: Accessing Request Headers in Lua Cluster Specifier\nDESCRIPTION: Example of how to access request headers within the Lua script for cluster selection.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/cluster_specifier/lua.rst#2025-04-23_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal headers = route_handle:headers()\n```\n\n----------------------------------------\n\nTITLE: Configuring Watched Directory for TLS Certificate in Envoy\nDESCRIPTION: This YAML configuration demonstrates how to use a watched directory for improved atomicity in key rotation schemes. It specifies paths to the certificate chain and private key files using a symlink.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/security/secret.rst#2025-04-23_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nresources:\n  - \"@type\": \"type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.Secret\"\n    name: tls_sds\n    tls_certificate:\n      certificate_chain:\n        filename: /certs/current/sds_cert.pem\n      private_key:\n        filename: /certs/current/sds_key.pem\n      watched_directory:\n        path: /certs\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Lambda Request Schema\nDESCRIPTION: JSON schema for transforming HTTP requests to AWS Lambda when payload_passthrough is false. Includes request path, method, headers, query parameters and body content.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/aws_lambda_filter.rst#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"raw_path\": \"/path/to/resource\",\n    \"method\": \"GET|POST|HEAD|...\",\n    \"headers\": {\"header-key\": \"header-value\", ... },\n    \"query_string_parameters\": {\"key\": \"value\", ...},\n    \"body\": \"...\",\n    \"is_base64_encoded\": true|false\n}\n```\n\n----------------------------------------\n\nTITLE: Processing Request Metadata in Envoy StreamDecoderFilter (C++)\nDESCRIPTION: Defines the C++ interface `decodeMetadata` within `StreamDecoderFilter` for handling metadata received on a request stream from downstream. The filter receives the metadata in `metadata_map` and can modify it to consume, alter, or allow proxying of the metadata to the upstream. The return status likely indicates how the filter chain should proceed.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/source/docs/h2_metadata.md#2025-04-23_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nFilterMetadataStatus StreamDecoderFilter::decodeMetadata(MetadataMap&\nmetadata\\_map);\n```\n\n----------------------------------------\n\nTITLE: Running C/C++ Tests with Bazel\nDESCRIPTION: Command to execute the entire C/C++ test suite using Bazel. Uses test_output=all flag for detailed output.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/mobile/docs/root/development/testing/testing.rst#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./bazelw test --test_output=all //test/common/...\n```\n\n----------------------------------------\n\nTITLE: Example Log Output for JSON Access Log Format - Envoy - JSON\nDESCRIPTION: Shows an example of the output log entry generated when the above JSON format configuration is used. Demonstrates mapping of real protocol, duration, and header values into a JSON object. No dependencies; this output is a direct result of the provided configuration and serves as a reference for users customizing their log output.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/observability/access_log/usage.rst#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\"protocol\": \"HTTP/1.1\", \"duration\": \"123\", \"my_custom_header\": \"value_of_MY_CUSTOM_HEADER\"}\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx TOC Tree for RBAC Documentation\nDESCRIPTION: Sphinx toctree directive configuration that includes all files within the v3 subdirectory with a maximum depth of 2 levels.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/api-v3/config/rbac/rbac.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n  :glob:\n  :maxdepth: 2\n\n  v3/*\n```\n\n----------------------------------------\n\nTITLE: Configuring Hyperscan as a Generic Matcher in Envoy (YAML)\nDESCRIPTION: This YAML snippet demonstrates how to configure the Hyperscan extension as a custom matcher within Envoy's generic matching framework. It specifies the matcher type (`envoy.matching.matchers.hyperscan`) and provides a single regex pattern to be used for matching. This configuration can be applied in places like filter chain matchers, route matchers, or RBAC matchers.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/other_features/hyperscan.rst#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nmatcher:\n  matcher_tree:\n    input:\n      name: request-header\n      typed_config:\n        \"@type\": type.googleapis.com/envoy.type.matcher.v3.HttpRequestHeaderMatchInput\n        header_name: user-agent\n    exact_match_map:\n      map:\n        \"^Mozilla.*\":\n          action:\n            name: skip\n            typed_config:\n              \"@type\": type.googleapis.com/envoy.extensions.filters.common.matcher.action.v3.SkipFilter\n  on_no_match:\n    # Use Hyperscan matcher.\n    matcher:\n      matcher_list:\n        matchers:\n          # If the input doesn't match the regex, deny the request.\n          - predicate:\n              custom_match:\n                name: hyperscan\n                typed_config:\n                  \"@type\": type.googleapis.com/envoy.extensions.matching.input_matchers.hyperscan.v3alpha.Hyperscan\n                  regexes:\n                    - regex: \".*secret.*\"\n```\n\n----------------------------------------\n\nTITLE: Configuring SDS via SdsSecretConfig - Envoy - YAML\nDESCRIPTION: This YAML snippet sets up Secret Discovery Service (SDS) using SdsSecretConfig in Envoy, typically used within CommonTlsContext for dynamic TLS certificate management. The configuration block is pulled from a larger configuration file and defines how to fetch secrets securely from the management server over gRPC. Requires Envoy built with SDS support and references to the appropriate cluster; the key is placement inside a SdsSecretConfig message. Receives secrets on demand.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/overview/xds_api.rst#2025-04-23_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n    sds_config:\n      api_config_source:\n        api_type: GRPC\n        grpc_services:\n        - envoy_grpc:\n            cluster_name: some_xds_cluster\n```\n\n----------------------------------------\n\nTITLE: Capturing Authority and Remote Addresses for Upstream Listener in Set-Filter-State - YAML\nDESCRIPTION: This snippet demonstrates how to configure the Set-Filter-State HTTP filter to capture both the ':authority' header and the remote address from HTTP CONNECT requests. The captured values are stored as filter state object_keys used by internal listener connections, with sharing specified via 'shared_with_upstream: ONCE' for each key. Dependencies include Envoy with the relevant extensions and internal listener features enabled. Inputs are the incoming request headers and connection addresses; outputs are updated filter state values accessible to the upstream connection.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/set_filter_state.rst#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\non_request_headers:\n- object_key: envoy.filters.listener.original_dst.local_ip\n  format_string:\n    text_format_source:\n      inline_string: \"%REQ(:AUTHORITY)%\"\n  shared_with_upstream: ONCE\n- object_key: envoy.filters.listener.original_dst.remote_ip\n  format_string:\n    text_format_source:\n      inline_string: \"%DOWNSTREAM_REMOTE_ADDRESS%\"\n  shared_with_upstream: ONCE\n```\n\n----------------------------------------\n\nTITLE: Configuring SNI Propagation with Set-Filter-State Filter\nDESCRIPTION: Example configuration that shows how to propagate the downstream SNI (Server Name Indication) as the upstream SNI using the Set-Filter-State filter. The configuration uses text formatting to capture the requested server name.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/listeners/network_filters/set_filter_state.rst#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\non_new_connection:\n- object_key: envoy.network.upstream_server_name\n  format_string:\n    text_format_source:\n      inline_string: \"%REQUESTED_SERVER_NAME%\"\n```\n\n----------------------------------------\n\nTITLE: Specifying Metadata-Based Routing Rules in Envoy (JSON)\nDESCRIPTION: This JSON array defines routing rules for how Envoy should select subsets of endpoints based on HTTP headers and host metadata. The rules utilize header matching and metadata_match selectors, which correspond to the cluster's subset configuration, to direct requests to specific host groups (subsets). Dependencies include correct subset configuration on the target cluster and expected request headers. Each route supports different patterns, such as single-header targeting, bigmem hardware selection, and weighted traffic shifting. Inputs are HTTP requests with specific headers, outputs are the selection of subsets based on the configured logic.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/source/docs/subset_load_balancer.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"routes\": [\n  {\n    \"match\": {\n      \"prefix\": \"/\",\n      \"headers\": [\n        {\n          \"name\": \"x-custom-version\",\n          \"value\": \"pre-release\"\n        }\n      ]\n    },\n    \"route\": {\n      \"cluster\": \"c1\",\n      \"metadata_match\": {\n        \"filter_metadata\": {\n          \"envoy.lb\": {\n            \"version\": \"1.2-pre\",\n            \"stage\": \"dev\"\n          }\n        }\n      }\n    }\n  },\n  {\n    \"match\": {\n      \"prefix\": \"/\",\n      \"headers\": [\n        {\n          \"name\": \"x-hardware-test\",\n          \"value\": \"memory\"\n        }\n      ]\n    },\n    \"route\": {\n      \"cluster\": \"c1\",\n      \"metadata_match\": {\n        \"filter_metadata\": {\n          \"envoy.lb\": {\n            \"type\": \"bigmem\",\n            \"stage\": \"prod\"\n          }\n        }\n      }\n    }\n  },\n  {\n    \"match\": {\n      \"prefix\": \"/\"\n    },\n    \"route\": {\n      \"weighted_clusters\": {\n        \"clusters\": [\n          {\n            \"name\": \"c1\",\n            \"weight\": 90,\n            \"metadata_match\": {\n              \"filter_metadata\": {\n                \"envoy.lb\": {\n                  \"version\": \"1.0\"\n                }\n              }\n            }\n          },\n          {\n            \"name\": \"c1\",\n            \"weight\": 10,\n            \"metadata_match\": {\n              \"filter_metadata\": {\n                \"envoy.lb\": {\n                  \"version\": \"1.1\"\n                }\n              }\n            }\n          }\n        ]\n      },\n      \"metadata_match\": {\n        \"filter_metadata\": {\n          \"envoy.lb\": {\n            \"stage\": \"prod\"\n          }\n        }\n      }\n    }\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Traffic Splitting Across Multiple Upstreams in Envoy\nDESCRIPTION: YAML configuration showing how to split traffic evenly across three versions of a service using weighted_clusters. This setup allows for percentage-based traffic distribution between helloworld_v1, v2, and v3 clusters.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_conn_man/traffic_splitting.rst#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nvirtual_hosts:\n   - name: www2\n     domains:\n     - '*'\n     routes:\n       - match: { prefix: / }\n         route:\n           weighted_clusters:\n             runtime_key_prefix: routing.traffic_split.helloworld\n             clusters:\n               - name: helloworld_v1\n                 weight: 33\n               - name: helloworld_v2\n                 weight: 33\n               - name: helloworld_v3\n                 weight: 34\n```\n\n----------------------------------------\n\nTITLE: Checking Peer Certificate Validation Status in Envoy Lua\nDESCRIPTION: Calls the `peerCertificateValidated()` method on the `downstreamSslConnection` object. It returns a boolean indicating if the presented peer certificate was successfully validated. Note the warning regarding TLS session resumption potentially returning false even for valid certificates.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/lua_filter.rst#2025-04-23_snippet_46\n\nLANGUAGE: lua\nCODE:\n```\nif downstreamSslConnection:peerCertificateValidated() then\n  print(\"peer certificate is validated\")\nend\n```\n\n----------------------------------------\n\nTITLE: Demonstrating %DOWNSTREAM_PEER_CERT_V_END% Usage in Envoy Access Logs\nDESCRIPTION: Illustrates the use of %DOWNSTREAM_PEER_CERT_V_END% substitution string in Envoy access logs. It represents the validity end date of the client certificate used for the downstream TLS connection. This can be customized using a format string.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/observability/access_log/usage.rst#2025-04-23_snippet_11\n\nLANGUAGE: plaintext\nCODE:\n```\n%DOWNSTREAM_PEER_CERT_V_END%\n```\n\n----------------------------------------\n\nTITLE: Configuring Flow Control Settings in Envoy Proxy YAML\nDESCRIPTION: A complete YAML configuration example showing how to adjust all three flow control parameters in Envoy: listener buffer limits, cluster buffer limits, and HTTP/2 stream window size. This configuration is particularly useful when dealing with large request or response bodies that may exceed default buffer limits.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/faq/configuration/flow_control.rst#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nstatic_resources:\n  listeners:\n    name: http\n    address:\n      socket_address:\n        address: '::1'\n        portValue: 0\n    filter_chains:\n      filters:\n        name: envoy.filters.network.http_connection_manager\n        typed_config:\n          \"@type\": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager\n          http2_protocol_options:\n            initial_stream_window_size: 65535\n          route_config: {}\n          codec_type: HTTP2\n          http_filters: []\n          stat_prefix: config_test\n    per_connection_buffer_limit_bytes: 1024\n  clusters:\n    name: cluster_0\n    connect_timeout: 5s\n    per_connection_buffer_limit_bytes: 1024\n    load_assignment:\n      cluster_name: some_service\n      endpoints:\n        - lb_endpoints:\n          - endpoint:\n              address:\n                socket_address:\n                  address: ::1\n                  port_value: 46685\n```\n\n----------------------------------------\n\nTITLE: Bearer Token Credential Configuration\nDESCRIPTION: Configuration for Bearer token credentials to be injected into proxied requests.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/credential_injector_filter.rst#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n    - name: \"bearer-token-test\"\n      generic_secret:\n        secret: \"dG9rZW4=\"\n        type: \"bearer-token\"\n```\n\n----------------------------------------\n\nTITLE: Initializing gRPC Stream in Swift\nDESCRIPTION: Example of creating and interacting with a gRPC stream using Swift. Shows headers configuration, stream client initialization, and handling stream events through callbacks.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/mobile/docs/root/api/grpc.rst#2025-04-23_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nlet headers = GRPCRequestHeadersBuilder(scheme: \"https\", authority: \"envoyproxy.io\", path: \"/pb.api.v1.Foo/GetBar\")\n    .build()\n\n  let streamClient = try StreamClientBuilder().build()\n  GRPCClient(streamClient: streamClient)\n    .newGRPCStreamPrototype()\n    .setOnResponseHeaders { headers, endStream in\n      print(\"Headers received: \\(headers), end stream: \\(endStream)\")\n    }\n    .setOnResponseMessage { messageData in\n      print(\"Received gRPC message\")\n    }\n    .setOnResponseTrailers { trailers in\n      print(\"Trailers received: \\(trailers)\")\n    }\n    .setOnError { ... }\n    .setOnCancel { ... }\n    .start(queue: .main)\n    .sendHeaders(headers, endStream: false)\n    .sendMessage(...)\n    ...\n    .close()\n```\n\n----------------------------------------\n\nTITLE: Configuring JWT Provider with Inline JWKS in YAML\nDESCRIPTION: Example configuration for a JWT provider using inline JWKS. It specifies the issuer, local JWKS, token extraction from headers, and payload forwarding.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/jwt_authn_filter.rst#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nproviders:\n  provider2:\n    issuer: https://example2.com\n    local_jwks:\n      inline_string: PUBLIC-KEY\n    from_headers:\n    - name: jwt-assertion\n    forward_payload_header: x-jwt-payload\n```\n\n----------------------------------------\n\nTITLE: Installing Envoy on Debian bullseye\nDESCRIPTION: This snippet demonstrates the installation of Envoy on Debian bullseye using apt. It adds the Envoy repository, installs the package, and checks the installed version.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/start/install.rst#2025-04-23_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ wget -O- https://apt.envoyproxy.io/signing.key | sudo gpg --dearmor -o /etc/apt/keyrings/envoy-keyring.gpg\n$ echo \"deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/envoy-keyring.gpg] https://apt.envoyproxy.io bullseye main\" | sudo tee /etc/apt/sources.list.d/envoy.list\n$ sudo apt-get update\n$ sudo apt-get install envoy\n$ envoy --version\n```\n\n----------------------------------------\n\nTITLE: Configuring an Aggregate Cluster in Envoy Proxy using YAML\nDESCRIPTION: This YAML configuration demonstrates how to set up an aggregate cluster in Envoy Proxy. It specifies the cluster name, connection timeout, load balancing policy, and references to other clusters for failover.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/intro/arch_overview/upstream/aggregate_cluster.rst#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: aggregate_cluster\nconnect_timeout: 0.25s\nlb_policy: CLUSTER_PROVIDED\ncluster_type:\n  name: envoy.clusters.aggregate\n  typed_config:\n    \"@type\": type.googleapis.com/envoy.extensions.clusters.aggregate.v3.ClusterConfig\n    clusters:\n    # cluster primary, secondary and tertiary should be defined outside.\n    - primary\n    - secondary\n    - tertiary\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS Certificate SDS Secret in Envoy\nDESCRIPTION: This YAML configuration defines the resources for the TLS certificate SDS secret, including paths to the certificate chain and private key files.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/security/secret.rst#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nresources:\n  - \"@type\": \"type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.Secret\"\n    name: tls_sds\n    tls_certificate:\n      certificate_chain:\n        filename: /certs/sds_cert.pem\n      private_key:\n        filename: /certs/sds_key.pem\n```\n\n----------------------------------------\n\nTITLE: Configuring SNI Dynamic Forward Proxy Filter and Cluster in YAML\nDESCRIPTION: Complete YAML configuration example demonstrating how to set up both the SNI dynamic forward proxy filter and its associated dynamic forward proxy cluster. The configuration shows a non-TLS terminating setup where TLS handshake is passed through by Envoy.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/listeners/network_filters/sni_dynamic_forward_proxy_filter.rst#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n_include/sni-dynamic-forward-proxy-filter.yaml\n```\n\n----------------------------------------\n\nTITLE: Configuring Local Reply Content Modification in Envoy\nDESCRIPTION: Example configuration for modifying local reply content including status code rewriting, header addition, and body modification. Shows how to configure mappers with filters and rewrite rules.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_conn_man/local_reply.rst#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nmappers:\n- filter:\n    status_code_filter:\n      comparison:\n        op: EQ\n        value:\n          default_value: 400\n          runtime_key: key_b\n  headers_to_add:\n    - header:\n        key: \"foo\"\n        value: \"bar\"\n      append_action: OVERWRITE_IF_EXISTS_OR_ADD\n  status_code: 401\n  body:\n    inline_string: \"not allowed\"\n```\n\n----------------------------------------\n\nTITLE: Accessing Downstream SSL Connection Info in Envoy Lua\nDESCRIPTION: Calls the `downstreamSslConnection()` method on the `streamInfo` object. It returns an SSL connection info object containing details about the downstream SSL connection, if one exists.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/lua_filter.rst#2025-04-23_snippet_37\n\nLANGUAGE: lua\nCODE:\n```\nstreamInfo:downstreamSslConnection()\n```\n\n----------------------------------------\n\nTITLE: Composing Rate Limit Actions in YAML for Envoy Proxy\nDESCRIPTION: This YAML configuration demonstrates how to compose rate limit actions to generate a complex descriptor. It includes actions for generic_key and source_cluster.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/rate_limit_filter.rst#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- actions:\n  - generic_key:\n      descriptor_value: some_value0\n  - source_cluster: {}\n  - destination_cluster: {}\n```\n\n----------------------------------------\n\nTITLE: Running Envoy with Bootstrap Configuration - Console Command\nDESCRIPTION: This console command demonstrates how to launch Envoy with a specified bootstrap configuration file using the -c command-line flag. Users must supply the path to a configuration file in one of the supported formats (json, yaml, pb, pb_text). The bootstrap file establishes the static server configuration and can reference dynamic xDS resources as needed. The command expects the provided file path to be accessible to the Envoy process; incorrect file formats or inaccessible paths will result in startup failures.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/overview/bootstrap.rst#2025-04-23_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n./envoy -c <path to config>.{json,yaml,pb,pb_text}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Filters Toctree in reStructuredText\nDESCRIPTION: This RST code defines a table of contents tree for Dubbo filters documentation in Envoy. It uses glob pattern matching to include all version 3 API documentation for Dubbo proxy filters located in the extensions directory.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/api-v3/config/filter/dubbo/dubbo.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n  :glob:\n  :maxdepth: 2\n\n  ../../../extensions/filters/network/dubbo_proxy/*/v3/*\n```\n\n----------------------------------------\n\nTITLE: Configuring Envoy Active Health Check Runtime Settings\nDESCRIPTION: Lists runtime parameters for tuning Envoy's active health checking behavior. These settings allow dynamic adjustment of the minimum and maximum check intervals, and the percentage of health checks verified against the expected upstream service. They override corresponding static configurations.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/upstream/cluster_manager/cluster_runtime.rst#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nhealth_check.min_interval\n  Min value for the health checking :ref:`interval <envoy_v3_api_field_config.core.v3.HealthCheck.interval>`.\n  Default value is 1 ms. The effective health check interval will be no less than 1ms. The health\n  checking interval will be between *min_interval* and *max_interval*.\n\nhealth_check.max_interval\n  Max value for the health checking :ref:`interval <envoy_v3_api_field_config.core.v3.HealthCheck.interval>`.\n  Default value is MAX_INT. The effective health check interval will be no less than 1ms. The health\n  checking interval will be between *min_interval* and *max_interval*.\n\nhealth_check.verify_cluster\n  What % of health check requests will be verified against the :ref:`expected upstream service\n  <envoy_v3_api_field_config.core.v3.HealthCheck.HttpHealthCheck.service_name_matcher>` as the :ref:`health check filter\n  <arch_overview_health_checking_filter>` will write the remote service cluster into the response.\n```\n\n----------------------------------------\n\nTITLE: Configuring Generic Credential Injector Filter\nDESCRIPTION: Example configuration for setting up a generic credential injector filter that adds authentication credentials to proxied requests.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/credential_injector_filter.rst#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n        - name: envoy.filters.http.credential_injector\n          typed_config:\n            \"@type\": type.googleapis.com/envoy.extensions.filters.http.credential_injector.v3.CredentialInjector\n            credential_injector:\n              \"@type\": type.googleapis.com/envoy.extensions.http.injected_credentials.generic.v3.Generic\n              overwrite: false\n              credentials:\n                - scheme: BASIC\n                  credential_context:\n                    credential_name: \"basic-auth-test\"\n                    credential_secret_name: \"basic-auth-test-secret\"\n```\n\n----------------------------------------\n\nTITLE: Configuring RDS via route_config_name and config_source for REST - Envoy - YAML\nDESCRIPTION: This YAML snippet configures the Route Discovery Service (RDS) for Envoy via REST by defining a route configuration name and specifying the management server cluster under `api_type: REST`. Used in the `rds` field of the HTTP Connection Manager configuration, this snippet causes Envoy to fetch routing configurations dynamically via REST endpoints. Dependencies include Envoy and REST API access to a management server.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/overview/xds_api.rst#2025-04-23_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\n    route_config_name: some_route_name\n    config_source:\n      api_config_source:\n        api_type: REST\n        cluster_names: [some_xds_cluster]\n```\n\n----------------------------------------\n\nTITLE: Buffered Admin Tap Configuration\nDESCRIPTION: Configures tap filter to buffer multiple traces with a maximum trace limit and timeout.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/tap_filter.rst#2025-04-23_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nconfig_id: test_config_id\ntap_config:\n  match_config:\n    any_match: true\n  output_config:\n    sinks:\n      - buffered_admin:\n          max_traces: 3\n          timeout: 0.2s\n```\n\n----------------------------------------\n\nTITLE: Configuring Group JWT Requirement Rules in YAML\nDESCRIPTION: Example configuration for group JWT requirement rules. It demonstrates the use of 'requires_any' and 'requires_all' conditions.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/jwt_authn_filter.rst#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nrules:\n- match:\n    prefix: /any\n  requires:\n    requires_any:\n      requirements:\n      - provider_name: provider1\n      - provider_name: provider2\n- match:\n    prefix: /all\n  requires:\n    requires_all:\n      requirements:\n      - provider_name: provider1\n      - provider_name: provider2\n```\n\n----------------------------------------\n\nTITLE: Configuring Match Tree with HTTP Request and Response Headers (YAML)\nDESCRIPTION: This configuration demonstrates a match tree that uses both HTTP request and response headers. It shows how to set up matching rules based on different types of headers, which may not be compatible with all filter implementations.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/intro/arch_overview/advanced/matching/matching_api.rst#2025-04-23_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nmatcher:\n  matcher_tree:\n    input:\n      name: request-headers\n      typed_config:\n        \"@type\": type.googleapis.com/envoy.type.matcher.v3.HttpRequestHeaderMatchInput\n        header_name: foo-header\n    exact_match_map:\n      map:\n        baz:\n          matcher:\n            matcher_tree:\n              input:\n                name: request-headers\n                typed_config:\n                  \"@type\": type.googleapis.com/envoy.type.matcher.v3.HttpRequestHeaderMatchInput\n                  header_name: bar-header\n              exact_match_map:\n                map:\n                  \"1\":\n                    matcher:\n                      matcher_tree:\n                        input:\n                          name: response-headers\n                          typed_config:\n                            \"@type\": type.googleapis.com/envoy.type.matcher.v3.HttpResponseHeaderMatchInput\n                            header_name: result-header\n                        exact_match_map:\n                          map:\n                            pass:\n                              on_match:\n                                action:\n                                  name: skip\n                                  typed_config:\n                                    \"@type\": type.googleapis.com/envoy.extensions.filters.common.matcher.action.v3.SkipFilter\n        bat:\n          on_match:\n            action:\n              name: skip\n              typed_config:\n                \"@type\": type.googleapis.com/envoy.extensions.filters.common.matcher.action.v3.SkipFilter\n```\n\n----------------------------------------\n\nTITLE: Configuring Tap Transport Socket for Plain Text in Envoy Proxy (YAML)\nDESCRIPTION: This YAML snippet demonstrates how to configure the tap transport socket for a plain text connection in Envoy Proxy. It includes the transport socket name, typed_config, and common_config settings.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/operations/traffic_tapping.rst#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntransport_socket:\n  name: envoy.transport_sockets.tap\n  typed_config:\n    \"@type\": type.googleapis.com/envoy.extensions.transport_sockets.tap.v3.Tap\n    common_config:\n      static_config:\n        match_config:\n          any_match: true\n        output_config:\n          sinks:\n            - format: PROTO_BINARY\n              file_per_tap:\n                path_prefix: /some/tap/path\n    transport_socket:\n      name: envoy.transport_sockets.raw_buffer\n      typed_config:\n        \"@type\": type.googleapis.com/envoy.extensions.transport_sockets.raw_buffer.v3.RawBuffer\n```\n\n----------------------------------------\n\nTITLE: Statistics Configuration Table\nDESCRIPTION: CSV table defining the statistics exported by the external processing filter, including counter types and descriptions for monitoring stream activity, messages, failures, and timeouts.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/ext_proc_filter.rst#2025-04-23_snippet_0\n\nLANGUAGE: csv\nCODE:\n```\nName, Type, Description\nstreams_started, Counter, The number of gRPC streams that have been started to send to the external processing service\nstreams_msgs_sent, Counter, The number of messages sent on those streams\nstreams_msgs_received, Counter, The number of messages received on those streams\nspurious_msgs_received, Counter, The number of unexpected messages received that violated the protocol\nstreams_closed, Counter, The number of streams successfully closed on either end\nstreams_failed, Counter, The number of times a stream produced a gRPC error\nfailure_mode_allowed, Counter, The number of times an error was ignored due to configuration\nmessage_timeouts, Counter, The number of times a message failed to receive a response within the configured timeout\nrejected_header_mutations, Counter, The number of rejected header mutations\noverride_message_timeout_received, Counter, The number of override_message_timeout messages received\noverride_message_timeout_ignored, Counter, The number of override_message_timeout messages ignored\nclear_route_cache_ignored, Counter, The number of clear cache request that were ignored\nclear_route_cache_disabled, Counter, The number of clear cache requests that were rejected from being disabled\nclear_route_cache_upstream_ignored, Counter, The number of clear cache request that were ignored if the filter is in upstream\nsend_immediate_resp_upstream_ignored, Counter, The number of send immediate response messages that were ignored if the filter is in upstream\n```\n\n----------------------------------------\n\nTITLE: Configuring Checksum Filter in Envoy YAML\nDESCRIPTION: Example configuration for the Envoy Checksum HTTP filter. Shows how to set up the filter using type.googleapis.com/envoy.extensions.filters.http.checksum.v3alpha.ChecksumConfig. The filter validates response body hashes and can reject unmatched paths.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/checksum_filter.rst#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n    :lines: 26-38\n    :emphasize-lines: 2-12\n    :linenos:\n    :caption: :download:`checksum_filter.yaml <_include/checksum_filter.yaml>`\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL Proxy with TCP Proxy Filter in Envoy\nDESCRIPTION: Basic configuration snippet showing how to chain MySQL proxy filter with TCP proxy filter. Sets up MySQL protocol decoding with basic statistics tracking.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/listeners/network_filters/mysql_proxy_filter.rst#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nfilter_chains:\n- filters:\n  - name: envoy.filters.network.mysql_proxy\n    typed_config:\n      \"@type\": type.googleapis.com/envoy.extensions.filters.network.mysql_proxy.v3.MySQLProxy\n      stat_prefix: mysql\n  - name: envoy.filters.network.tcp_proxy\n    typed_config:\n      \"@type\": type.googleapis.com/envoy.extensions.filters.network.tcp_proxy.v3.TcpProxy\n      stat_prefix: tcp\n      cluster: ...\n```\n\n----------------------------------------\n\nTITLE: Complex Body Match Tap Configuration\nDESCRIPTION: Configures tap filter to match requests based on headers and body content patterns with byte limits.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/tap_filter.rst#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nconfig_id: test_config_id\ntap_config:\n  match_config:\n    and_match:\n      rules:\n        - http_request_headers_match:\n            headers:\n              - name: foo\n                string_match:\n                  exact: bar\n        - http_request_generic_body_match:\n            patterns:\n              - string_match: test\n              - binary_match: 3q2+7w==\n            bytes_limit: 128\n        - http_response_generic_body_match:\n            patterns:\n              - binary_match: vu8=\n            bytes_limit: 64\n  output_config:\n    sinks:\n      - streaming_admin: {}\n```\n\n----------------------------------------\n\nTITLE: Configuring CONNECT-UDP Forwarding in Envoy (YAML)\nDESCRIPTION: This configuration snippet demonstrates how to set up Envoy to forward CONNECT-UDP requests to the upstream. It highlights the upgrade_configs setting for CONNECT-UDP.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/intro/arch_overview/http/upgrades.rst#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nhttp_filters:\n- name: envoy.filters.http.router\n  typed_config:\n    \"@type\": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router\nstat_prefix: ingress_http\nhttp2_protocol_options:\n  allow_connect: true\nupgrade_configs:\n- upgrade_type: CONNECT-UDP\nroute_config:\n  name: local_route\n  virtual_hosts:\n  - name: local_service\n    domains: [\"*\"]\n    routes:\n    - match:\n        prefix: \"/\"\n      route:\n        cluster: service_google\n    - match:\n        connect_matcher:\n          {}  # An empty connect matcher matches all CONNECT requests\n      route:\n        cluster: service_google\n        upgrade_configs:\n          - upgrade_type: CONNECT-UDP\n            connect_config: {}\n```\n\n----------------------------------------\n\nTITLE: AND Match Condition Tap Configuration\nDESCRIPTION: Configures tap filter to match requests with specific request and response headers using AND logic.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/tap_filter.rst#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nconfig_id: test_config_id\ntap_config:\n  match_config:\n    and_match:\n      rules:\n        - http_request_headers_match:\n            headers:\n              - name: foo\n                string_match:\n                  exact: bar\n        - http_response_headers_match:\n            headers:\n              - name: bar\n                string_match:\n                  exact: baz\n  output_config:\n    sinks:\n      - streaming_admin: {}\n```\n\n----------------------------------------\n\nTITLE: Configuring Nested Trie Structures for Multi-Header Matching in Envoy (YAML)\nDESCRIPTION: This configuration creates hierarchical trie structures using nested prefix_match_map for matching across multiple headers. It demonstrates how to perform sequential longest-prefix-match lookups across different tries.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/intro/arch_overview/advanced/matching/matching_api.rst#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nstatic_resources:\n  listeners:\n  - address:\n      socket_address:\n        address: 0.0.0.0\n        port_value: 8081\n    filter_chains:\n    - filters:\n      - name: envoy.filters.network.http_connection_manager\n        typed_config:\n          \"@type\": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager\n          codec_type: AUTO\n          stat_prefix: ingress_http\n          route_config:\n            name: local_route\n            virtual_hosts:\n            - name: local_service\n              domains:\n              - \"*\"\n              routes:\n              - match:\n                  safe_regex:\n                    regex: \".*\"\n                route:\n                  cluster: generic_matcher_service\n          http_filters:\n          - name: envoy.filters.http.router\n            typed_config:\n              \"@type\": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router\n  clusters:\n  - name: generic_matcher_service\n    connect_timeout: 0.250s\n    type: STRICT_DNS\n    lb_policy: ROUND_ROBIN\n    load_assignment:\n      cluster_name: generic_matcher_service\n      endpoints:\n      - lb_endpoints:\n        - endpoint:\n            address:\n              socket_address:\n                address: cluster1\n                port_value: 8080\n  - name: cluster_2\n    connect_timeout: 0.250s\n    type: STRICT_DNS\n    lb_policy: ROUND_ROBIN\n    load_assignment:\n      cluster_name: cluster_2\n      endpoints:\n      - lb_endpoints:\n        - endpoint:\n            address:\n              socket_address:\n                address: cluster2\n                port_value: 8080\n  - name: cluster_3\n    connect_timeout: 0.250s\n    type: STRICT_DNS\n    lb_policy: ROUND_ROBIN\n    load_assignment:\n      cluster_name: cluster_3\n      endpoints:\n      - lb_endpoints:\n        - endpoint:\n            address:\n              socket_address:\n                address: cluster3\n                port_value: 8080\n  - name: cluster_4\n    connect_timeout: 0.250s\n    type: STRICT_DNS\n    lb_policy: ROUND_ROBIN\n    load_assignment:\n      cluster_name: cluster_4\n      endpoints:\n      - lb_endpoints:\n        - endpoint:\n            address:\n              socket_address:\n                address: cluster4\n                port_value: 8080\n```\n\n----------------------------------------\n\nTITLE: Defining Layered Runtime Configuration in Envoy Bootstrap (YAML)\nDESCRIPTION: Defines an example `LayeredRuntime` configuration in Envoy's bootstrap YAML. It demonstrates layering with static, disk, and admin sources, where later layers override earlier ones. Dependencies include the `envoy.config.bootstrap.v3.LayeredRuntime` Protobuf message structure.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/operations/runtime.rst#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n.. validated-code-block:: yaml\n  :type-name: envoy.config.bootstrap.v3.LayeredRuntime\n\n  layers:\n  - name: static_layer_0\n    static_layer:\n      health_check:\n        min_interval: 5\n  - name: disk_layer_0\n    disk_layer: { symlink_root: /srv/runtime/current, subdirectory: envoy }\n  - name: disk_layer_1\n    disk_layer: { symlink_root: /srv/runtime/current, subdirectory: envoy_override, append_service_cluster: true }\n  - name: admin_layer_0\n    admin_layer: {}\n```\n\n----------------------------------------\n\nTITLE: Running Envoy with port forwarding (Console)\nDESCRIPTION: Command to run Envoy container with port forwarding from 80 to 8000.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/start/docker.rst#2025-04-23_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n$ docker run -d --name envoy -p 80:8000 envoyproxy/|envoy_docker_image|\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Inspector Listener Filter in Envoy (YAML)\nDESCRIPTION: This YAML code snippet demonstrates how to configure the HTTP Inspector listener filter in an Envoy proxy configuration. The filter is specified in the 'listener_filters' list using 'envoy.filters.listener.http_inspector' as the filter name, and the typed_config sets the @type to the required protobuf message. There are no required runtime dependencies except Envoy itself, and the configuration is intended to be placed inside a listener definition. The filter inspects incoming connections to detect HTTP protocol versions and is essential for protocol-based filter chain matching.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/listeners/listener_filters/http_inspector.rst#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nlistener_filters:\n  - name: \"envoy.filters.listener.http_inspector\"\n    typed_config:\n      \"@type\": type.googleapis.com/envoy.extensions.filters.listener.http_inspector.v3.HttpInspector\n```\n\n----------------------------------------\n\nTITLE: Building Statically-Linked Envoy with Bazel\nDESCRIPTION: Command to build a statically-linked Envoy binary with gperftools profiling support using Bazel.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/bazel/PPROF.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ bazel build --define tcmalloc=gperftools //source/exe:envoy-static\n```\n\n----------------------------------------\n\nTITLE: Setting up Table of Contents for CryptoMb Documentation in RST\nDESCRIPTION: A reStructuredText directive that sets up a table of contents for the CryptoMb private key provider documentation. It uses the glob pattern to include all relevant files in the extensions directory for the v3alpha version of the provider.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/api-v3/config/contrib/cryptomb/cryptomb.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n  :glob:\n  :maxdepth: 2\n\n  ../../../extensions/private_key_providers/cryptomb/v3alpha/*\n```\n\n----------------------------------------\n\nTITLE: Configuring Bandwidth Limit Filter in Envoy\nDESCRIPTION: Example YAML configuration showing a globally disabled bandwidth limiter that is enabled for a specific route. The configuration demonstrates how to set up bandwidth limits at different levels including global, virtual host, and route-specific settings.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/bandwidth_limit_filter.rst#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nrequest_enabled, Counter, Total number of request streams for which the bandwidth limiter was consulted\nrequest_enforced, Counter, Total number of request streams for which the bandwidth limiter was enforced\nrequest_pending, GAUGE, Number of request streams which are currently pending transfer in bandwidth limiter\nrequest_incoming_size, GAUGE, Size in bytes of incoming request data to bandwidth limiter\nrequest_allowed_size, GAUGE, Size in bytes of outgoing request data from bandwidth limiter\nrequest_incoming_total_size, Counter, Total size in bytes of incoming request data to bandwidth limiter\nrequest_allowed_total_size, Counter, Total size in bytes of outgoing request data from bandwidth limiter\nrequest_transfer_duration, HISTOGRAM, Total time (including added delay) it took for the request stream transfer\nresponse_enabled, Counter, Total number of response streams for which the bandwidth limiter was consulted\nresponse_enforced, Counter, Total number of response streams for which the bandwidth limiter was enforced\nresponse_pending, GAUGE, Number of response streams which are currently pending transfer in bandwidth limiter\nresponse_incoming_size, GAUGE, Size in bytes of incoming response data to bandwidth limiter\nresponse_allowed_size, GAUGE, Size in bytes of outgoing response data from bandwidth limiter\nresponse_incoming_total_size, Counter, Total size in bytes of incoming response data to bandwidth limiter\nresponse_allowed_total_size, Counter, Total size in bytes of outgoing response data from bandwidth limiter\nresponse_transfer_duration, HISTOGRAM, Total time (including added delay) it took for the response stream transfer\n```\n\n----------------------------------------\n\nTITLE: Configuring Static Resources for Dynamic Updates in Envoy Proxy YAML\nDESCRIPTION: This snippet shows the configuration of static resources in Envoy's YAML. It sets up the xds_cluster to connect to a control plane at http://my-control-plane:18000 for retrieving dynamic configuration.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/start/quick-start/configuration-dynamic-control-plane.rst#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nstatic_resources:\n  clusters:\n  - name: xds_cluster\n    connect_timeout: 0.25s\n    type: STRICT_DNS\n    lb_policy: ROUND_ROBIN\n    http2_protocol_options: {}\n    upstream_connection_options:\n      # configure a TCP keep-alive to detect and reconnect to the admin\n      # server in the event of a TCP socket half open connection\n      tcp_keepalive: {}\n    load_assignment:\n      cluster_name: xds_cluster\n      endpoints:\n      - lb_endpoints:\n        - endpoint:\n            address:\n              socket_address:\n                address: my-control-plane\n                port_value: 18000\n```\n\n----------------------------------------\n\nTITLE: Configuring per-cluster member health check settings in YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure alternative health check address and port for a specific cluster member using the HealthCheckConfig in a ClusterLoadAssignment.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/intro/arch_overview/upstream/health_checking.rst#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nload_assignment:\n  endpoints:\n  - lb_endpoints:\n    - endpoint:\n        health_check_config:\n          port_value: 8080\n          address:\n            socket_address:\n              address: 127.0.0.1\n              port_value: 80\n        address:\n          socket_address:\n            address: localhost\n            port_value: 80\n```\n\n----------------------------------------\n\nTITLE: Global Rate Limit Configuration in Envoy\nDESCRIPTION: YAML configuration for setting up a global rate limiter where all virtual hosts and routes share the same token bucket.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/local_rate_limit_filter.rst#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nhttp_filters:\n- name: envoy.filters.http.local_ratelimit\n  typed_config:\n    \"@type\": type.googleapis.com/envoy.extensions.filters.http.local_ratelimit.v3.LocalRateLimit\n    stat_prefix: http_local_rate_limiter\n    token_bucket:\n      max_tokens: 10000\n      tokens_per_fill: 1000\n      fill_interval: 1s\n    filter_enabled:\n      runtime_key: local_rate_limit_enabled\n      default_value:\n        numerator: 100\n        denominator: HUNDRED\n    filter_enforced:\n      runtime_key: local_rate_limit_enforced\n      default_value:\n        numerator: 100\n        denominator: HUNDRED\n    response_headers_to_add:\n      - append: false\n        header:\n          key: x-local-rate-limit\n          value: 'true'\n    local_rate_limit_per_downstream_connection: false\n```\n\n----------------------------------------\n\nTITLE: Overriding Node Configuration in Envoy CLI\nDESCRIPTION: Example showing how to override the node ID in the bootstrap configuration using the --config-yaml command line option. This allows for dynamic node configuration at startup.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/operations/cli.rst#2025-04-23_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n./envoy -c bootstrap.yaml --config-yaml \"node: {id: 'node1'}\"\n```\n\n----------------------------------------\n\nTITLE: Route-Specific Rate Limit Filter Configuration\nDESCRIPTION: YAML configuration showing how to disable rate limiting globally but enable it for specific routes.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/local_rate_limit_filter.rst#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nhttp_filters:\n- name: envoy.filters.http.local_ratelimit\n  typed_config:\n    \"@type\": type.googleapis.com/envoy.extensions.filters.http.local_ratelimit.v3.LocalRateLimit\n    stat_prefix: http_local_rate_limiter\n```\n\n----------------------------------------\n\nTITLE: Configuring gRPC Stream Prototype in Kotlin\nDESCRIPTION: Implementation of gRPC stream prototype configuration in Kotlin, showing callback setup for headers, messages, trailers, errors, and cancellation.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/mobile/docs/root/api/grpc.rst#2025-04-23_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nval prototype = grpcClient\n    .newGRPCStreamPrototype()\n    .setOnResponseHeaders { headers, endStream ->\n      Log.d(\"MainActivity\", \"Headers received: $headers, end stream: $endStream\")\n    }\n    .setOnResponseMessage { messageData ->\n      Log.d(\"MainActivity\", \"Received gRPC message\")\n    }\n    .setOnResponseTrailers { trailers ->\n      Log.d(\"MainActivity\", \"Trailers received: $trailers\")\n    }\n    .setOnError { ... }\n    .setOnCancel { ... }\n```\n\n----------------------------------------\n\nTITLE: Generating Test Traffic from Network Namespace in Bash\nDESCRIPTION: Generates HTTP traffic from the configured network namespace to test the iptables redirection rule.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/configs/original-dst-cluster/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo ip netns exec ns1 curl -v 173.194.222.106:80\n```\n\n----------------------------------------\n\nTITLE: JSON String Body Format Tap Configuration\nDESCRIPTION: Configures tap filter to output HTTP body data as readable strings instead of base64 encoded bytes.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/tap_filter.rst#2025-04-23_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nconfig_id: test_config_id\ntap_config:\n  match_config:\n    any_match: true\n  output_config:\n    sinks:\n      - format: JSON_BODY_AS_STRING\n        streaming_admin: {}\n```\n\n----------------------------------------\n\nTITLE: Installing Bazelisk on Linux\nDESCRIPTION: Commands to download and install Bazelisk as Bazel on Linux systems, with support for both amd64 and arm64 architectures.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/bazel/README.md#2025-04-23_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nsudo wget -O /usr/local/bin/bazel https://github.com/bazelbuild/bazelisk/releases/latest/download/bazelisk-linux-$([ $(uname -m) = \"aarch64\" ] && echo \"arm64\" || echo \"amd64\")\nsudo chmod +x /usr/local/bin/bazel\n```\n\n----------------------------------------\n\nTITLE: Converting Tap Trace to PCAP Format using tap2pcap in Envoy (Bash)\nDESCRIPTION: This Bash command demonstrates how to use the tap2pcap utility to convert a generated trace file to libpcap format. It also shows how to analyze the resulting PCAP file using tshark.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/operations/traffic_tapping.rst#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbazel run @envoy_api//tools:tap2pcap /some/tap/path_0.pb path_0.pcap\ntshark -r path_0.pcap -d \"tcp.port==10000,http2\" -P\n  1   0.000000    127.0.0.1 → 127.0.0.1    HTTP2 157 Magic, SETTINGS, WINDOW_UPDATE, HEADERS\n  2   0.013713    127.0.0.1 → 127.0.0.1    HTTP2 91 SETTINGS, SETTINGS, WINDOW_UPDATE\n  3   0.013820    127.0.0.1 → 127.0.0.1    HTTP2 63 SETTINGS\n  4   0.128649    127.0.0.1 → 127.0.0.1    HTTP2 5586 HEADERS\n  5   0.130006    127.0.0.1 → 127.0.0.1    HTTP2 7573 DATA\n  6   0.131044    127.0.0.1 → 127.0.0.1    HTTP2 3152 DATA, DATA\n```\n\n----------------------------------------\n\nTITLE: Configuring Header-To-Metadata Filter for Version-Based Routing in YAML\nDESCRIPTION: This YAML configuration sets up the Header-To-Metadata filter to route traffic based on the presence or absence of a 'x-version' header. It demonstrates how to add metadata for both present and missing header cases.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/header_to_metadata_filter.rst#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- name: envoy.filters.http.header_to_metadata\n  typed_config:\n    \"@type\": type.googleapis.com/envoy.extensions.filters.http.header_to_metadata.v3.Config\n    request_rules:\n      - header: x-version\n        on_header_present:\n          metadata_namespace: envoy.lb\n          key: version\n          type: STRING\n        on_header_missing:\n          metadata_namespace: envoy.lb\n          key: version\n          value: \"unknown\"\n          type: STRING\n        remove: false\n```\n\n----------------------------------------\n\nTITLE: OAuth2 Credentials Secrets Configuration\nDESCRIPTION: Example configuration for OAuth2 credential secrets including token and HMAC secrets in a YAML file.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/oauth2_filter.rst#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nstatic_resources:\n  secrets:\n  - name: token\n    generic_secret:\n      secret: <Your token secret here>\n  - name: hmac\n    generic_secret:\n      secret: <Your hmac secret here>\n```\n\n----------------------------------------\n\nTITLE: Full Language Detection Filter Configuration in YAML\nDESCRIPTION: This snippet provides a complete configuration for the language detection filter. It includes the filter name, type URL, default language, and a list of supported languages.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/language_filter.rst#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nname: envoy.filters.http.language\ntyped_config:\n  \"@type\": type.googleapis.com/envoy.extensions.filters.http.language.v3alpha.Language\n  default_language: en\n  supported_languages: [en, en-uk, de, dk, es, fr, zh, zh-tw]\n```\n\n----------------------------------------\n\nTITLE: Configuring Per-Route Basic Auth in Envoy YAML\nDESCRIPTION: This snippet demonstrates how to set up per-route configuration for the Basic Auth filter in Envoy. It includes examples of customizing users for specific routes and disabling authentication for certain prefixes.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/basic_auth_filter.rst#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nroute_config:\n  name: local_route\n  virtual_hosts:\n  - name: local_service\n    domains: [\"*\"]\n    routes:\n    - match: { path: \"/admin\" }\n      route: { cluster: some_service }\n      typed_per_filter_config:\n        envoy.filters.http.basic_auth:\n          \"@type\": type.googleapis.com/envoy.extensions.filters.http.basic_auth.v3.BasicAuthPerRoute\n          users:\n            inline_string: |-\n              admin:{SHA}hashed_admin_password\n    - match: { prefix: \"/static\" }\n      route: { cluster: some_service }\n      typed_per_filter_config:\n        envoy.filters.http.basic_auth:\n          \"@type\": type.googleapis.com/envoy.config.route.v3.FilterConfig\n          disabled: true\n    - match: { prefix: \"/\" }\n      route: { cluster: some_service }\n```\n\n----------------------------------------\n\nTITLE: Configuring Thrift Health Check with Envoy (YAML)\nDESCRIPTION: This snippet declares a custom health check in Envoy using the Thrift health checker extension via a YAML configuration. The configuration specifies the health checker's name, type URL, request method, transport, and protocol, which are critical for enabling Thrift-based health checks. To use this, Envoy must have support for the Thrift health checker extension, and the upstream service must implement the specified method; inputs include configuration fields such as method_name (operation to call), transport and protocol types, and the name of the checker, while outputs are the health state of the target host as determined by the Thrift exchange.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/upstream/health_checkers/thrift.rst#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ncustom_health_check:\n  name: envoy.health_checkers.thrift\n    typed_config:\n      \"@type\": type.googleapis.com/envoy.extensions.health_checkers.thrift.v3.Thrift\n      method_name: ping\n      transport: HEADER\n      protocol: BINARY\n```\n\n----------------------------------------\n\nTITLE: Configuring Retry with Previous Priorities in Envoy\nDESCRIPTION: Configuration example showing how to set up retries that target different priorities than those previously attempted using PreviousPrioritiesConfig, with an update frequency of 2.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/intro/arch_overview/http/http_connection_management.rst#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n    retry_on: 5xx\n    num_retries: 3\n    retry_priority:\n      name: envoy.retry_priorities.previous_priorities\n      typed_config:\n        \"@type\": type.googleapis.com/envoy.extensions.retry.priority.previous_priorities.v3.PreviousPrioritiesConfig\n        update_frequency: 2\n```\n\n----------------------------------------\n\nTITLE: Defining ZooKeeper Slow Response Counters (Plaintext)\nDESCRIPTION: This section lists counter statistics for the Envoy ZooKeeper proxy filter that specifically track the number of responses for each ZooKeeper operation completed slower than a predefined threshold. These stats help identify operations that are potentially experiencing performance bottlenecks.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/listeners/network_filters/zookeeper_proxy_filter.rst#2025-04-23_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nconnect_resp_slow, Counter, Number of connect responses slower than the threshold\nping_resp_slow, Counter, Number of ping responses slower than the threshold\nauth_resp_slow, Counter, Number of auth responses slower than the threshold\ngetdata_resp_slow, Counter, Number of getdata responses slower than the threshold\ncreate_resp_slow, Counter, Number of create responses slower than the threshold\ncreate2_resp_slow, Counter, Number of create2 responses slower than the threshold\ncreatecontainer_resp_slow, Counter, Number of createcontainer responses slower than the threshold\ncreatettl_resp_slow, Counter, Number of createttl responses slower than the threshold\nsetdata_resp_slow, Counter, Number of setdata responses slower than the threshold\ngetchildren_resp_slow, Counter, Number of getchildren responses slower than the threshold\ngetchildren2_resp_slow, Counter, Number of getchildren2 responses slower than the threshold\ndelete_resp_slow, Counter, Number of delete responses slower than the threshold\nexists_resp_slow, Counter, Number of exists responses slower than the threshold\ngetacl_resp_slow, Counter, Number of getacl responses slower than the threshold\nsetacl_resp_slow, Counter, Number of setacl responses slower than the threshold\nsync_resp_slow, Counter, Number of sync responses slower than the threshold\ncheck_resp_slow, Counter, Number of check responses slower than the threshold\nmulti_resp_slow, Counter, Number of multi responses slower than the threshold\nreconfig_resp_slow, Counter, Number of reconfig responses slower than the threshold\nsetauth_resp_slow, Counter, Number of setauth responses slower than the threshold\nsetwatches_resp_slow, Counter, Number of setwatches responses slower than the threshold\nsetwatches2_resp_slow, Counter, Number of setwatches2 responses slower than the threshold\naddwatch_resp_slow, Counter, Number of addwatch responses slower than the threshold\ncheckwatches_resp_slow, Counter, Number of checkwatches responses slower than the threshold\nremovewatches_resp_slow, Counter, Number of removewatches responses slower than the threshold\ngetephemerals_resp_slow, Counter, Number of getephemerals responses slower than the threshold\ngetallchildrennumber_resp_slow, Counter, Number of getallchildrennumber responses slower than the threshold\nclose_resp_slow, Counter, Number of close responses slower than the threshold\n```\n\n----------------------------------------\n\nTITLE: Creating a Table of Contents Structure in reStructuredText for Envoy Documentation\nDESCRIPTION: This snippet defines a table of contents tree (toctree) directive in reStructuredText format. It's configured to use the glob pattern to automatically include all files under the v3 directory and limits the depth of the tree to 2 levels.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/api-v3/config/endpoint/endpoint.rst#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n  :glob:\n  :maxdepth: 2\n\n  v3/*\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Compressor Filter in Envoy\nDESCRIPTION: Example configuration showing basic setup of the Compressor filter with compression settings and mime type selections.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/compressor_filter.rst#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: envoy.filters.http.compressor\ntypedConfig:\n  \"@type\": type.googleapis.com/envoy.extensions.filters.http.compressor.v3.Compressor\n  responseDirectionConfig:\n    commonConfig:\n      enabled:\n        default_value: true\n        runtime_key: response_compressor_enabled\n      minContentLength: 100\n      contentType:\n        - text/html\n        - text/plain\n        - text/xml\n    disableOnEtagHeader: true\n  requestDirectionConfig:\n    commonConfig:\n      enabled:\n        default_value: false\n        runtime_key: request_compressor_enabled\n      minContentLength: 100\n      contentType:\n        - text/html\n        - text/plain\n        - text/xml\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Golang HTTP Filters in Envoy YAML\nDESCRIPTION: This snippet demonstrates how to configure multiple Golang HTTP filters in Envoy's YAML configuration. It shows two separate Go plugins being configured in the http_filters section.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/golang_filter.rst#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nhttp_filters:\n- name: envoy.filters.http.golang\n  typed_config:\n    \"@type\": type.googleapis.com/envoy.extensions.filters.http.golang.v3alpha.Config\n    library_id: example\n    library_path: \"/etc/envoy/my_plugin.so\"\n    plugin_name: example\n- name: envoy.filters.http.golang\n  typed_config:\n    \"@type\": type.googleapis.com/envoy.extensions.filters.http.golang.v3alpha.Config\n    library_id: another_example\n    library_path: \"/etc/envoy/another_plugin.so\"\n    plugin_name: another_example\n```\n\n----------------------------------------\n\nTITLE: Mixing Sublinear and Linear Route Matching in Envoy Proxy (YAML)\nDESCRIPTION: This configuration demonstrates how to combine sublinear route matching using tries with traditional prefix-based linear routing. It shows a hybrid approach for handling different routing scenarios.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/intro/arch_overview/advanced/matching/matching_api.rst#2025-04-23_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nstatic_resources:\n  listeners:\n  - address:\n      socket_address:\n        address: 0.0.0.0\n        port_value: 8081\n    filter_chains:\n    - filters:\n      - name: envoy.filters.network.http_connection_manager\n        typed_config:\n          \"@type\": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager\n          codec_type: AUTO\n          stat_prefix: ingress_http\n          route_config:\n            name: local_route\n            virtual_hosts:\n            - name: local_service\n              domains:\n              - \"*\"\n              routes:\n              - match:\n                  safe_regex:\n                    regex: \".*\"\n                route:\n                  cluster: generic_matcher_service\n          http_filters:\n          - name: envoy.filters.http.router\n            typed_config:\n              \"@type\": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router\n  clusters:\n  - name: generic_matcher_service\n    connect_timeout: 0.250s\n    type: STRICT_DNS\n    lb_policy: ROUND_ROBIN\n    load_assignment:\n      cluster_name: generic_matcher_service\n      endpoints:\n      - lb_endpoints:\n        - endpoint:\n            address:\n              socket_address:\n                address: cluster1\n                port_value: 8080\n  - name: cluster_2\n    connect_timeout: 0.250s\n    type: STRICT_DNS\n    lb_policy: ROUND_ROBIN\n    load_assignment:\n      cluster_name: cluster_2\n      endpoints:\n      - lb_endpoints:\n        - endpoint:\n            address:\n              socket_address:\n                address: cluster2\n                port_value: 8080\n  - name: cluster_3\n    connect_timeout: 0.250s\n    type: STRICT_DNS\n    lb_policy: ROUND_ROBIN\n    load_assignment:\n      cluster_name: cluster_3\n      endpoints:\n      - lb_endpoints:\n        - endpoint:\n            address:\n              socket_address:\n                address: cluster3\n                port_value: 8080\n```\n\n----------------------------------------\n\nTITLE: Configuring Envoy Source Service Cluster Manager for Zone Aware Routing\nDESCRIPTION: This configuration snippet demonstrates the essential settings required for the Envoy running alongside the source service to enable zone aware routing. It defines the local cluster name as 'cluster_a' and specifies both source and destination clusters using EDS type.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/faq/configuration/zone_aware_routing.rst#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ncluster_manager:\n  local_cluster_name: cluster_a\nstatic_resources:\n  clusters:\n  - name: cluster_a\n    type: EDS\n    eds_cluster_config: ...\n  - name: cluster_b\n    type: EDS\n    eds_cluster_config: ...\n```\n\n----------------------------------------\n\nTITLE: Basic Tap Filter Configuration in Envoy\nDESCRIPTION: Configures the HTTP tap filter for admin control via the /tap endpoint with a specific config ID.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/tap_filter.rst#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: envoy.filters.http.tap\ntyped_config:\n  \"@type\": type.googleapis.com/envoy.extensions.filters.http.tap.v3.Tap\n  common_config:\n    admin_config:\n      config_id: test_config_id\n```\n\n----------------------------------------\n\nTITLE: Configuring gRPC Authorization Body Filter Settings in Envoy\nDESCRIPTION: Configuration example showing how to include HTTP request bodies in authorization checks sent to the gRPC server. Includes settings for request body handling and size limits.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/ext_authz_filter.rst#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nhttp:\n  name: envoy.filters.http.ext_authz\n  typed_config:\n    \"@type\": type.googleapis.com/envoy.extensions.filters.http.ext_authz.v3.ExtAuthz\n    grpc_service:\n      envoy_grpc:\n        cluster_name: ext-authz\n    with_request_body:\n      max_request_bytes: 1024\n      allow_partial_message: true\n      pack_as_bytes: true\n```\n\n----------------------------------------\n\nTITLE: Configuring EDS Service Discovery in Envoy YAML\nDESCRIPTION: Endpoint Discovery Service (EDS) is a gRPC or REST-JSON API server used by Envoy to fetch cluster members. It provides more detailed information about upstream hosts.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/intro/arch_overview/upstream/service_discovery.rst#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nclusters:\n  - name: eds_cluster\n    connect_timeout: 0.25s\n    type: EDS\n    lb_policy: ROUND_ROBIN\n    eds_cluster_config:\n      eds_config:\n        api_config_source:\n          api_type: GRPC\n          grpc_services:\n            - envoy_grpc:\n                cluster_name: xds_cluster\n```\n\n----------------------------------------\n\nTITLE: Sample Authorization Request Body Structure\nDESCRIPTION: Example JSON structure showing the format of a request body sent to the external authorization service. Includes source and destination address information.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/listeners/network_filters/ext_authz_filter.rst#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"source\":{\n    \"address\":{\n      \"socket_address\":{\n        \"address\": \"172.17.0.1\",\n        \"port_value\": 56746\n      }\n    }\n  }\n  \"destination\":{\n    \"service\": \"www.bing.com\",\n    \"address\":{\n      \"socket_address\": {\n        \"address\": \"127.0.0.1\",\n        \"port_value\": 10003\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Auth HTTP Filter in Envoy YAML\nDESCRIPTION: This snippet shows how to configure the Basic Auth HTTP filter in Envoy's YAML configuration. It sets up user credentials in htpasswd format for authentication.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/basic_auth_filter.rst#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nhttp_filters:\n- name: envoy.filters.http.basic_auth\n  typed_config:\n    \"@type\": type.googleapis.com/envoy.extensions.filters.http.basic_auth.v3.BasicAuth\n    users:\n      inline_string: |-\n        user1:{SHA}hashed_user1_password\n        user2:{SHA}hashed_user2_password\n```\n\n----------------------------------------\n\nTITLE: Accessing Filter State Object Fields in Envoy Format Strings\nDESCRIPTION: Example showing how to reference filter state object fields in format strings, specifically demonstrating how to access the port number from the original destination cluster filter state object.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/advanced/well_known_filter_state.rst#2025-04-23_snippet_0\n\nLANGUAGE: none\nCODE:\n```\n%FILTER_STATE(envoy.network.transport_socket.original_dst_address:FIELD:port)%\n```\n\n----------------------------------------\n\nTITLE: Rate Limit Configuration with Descriptors\nDESCRIPTION: Configuration example showing how to use rate limit descriptors for fine-grained control over route-specific rate limiting.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/local_rate_limit_filter.rst#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nroutes:\n- match:\n    prefix: \"/foo\"\n  route:\n    cluster: www\n    rate_limits:\n      - actions:\n          - source_cluster: {}\n          - destination_cluster: {}\n          - request_headers:\n              header_name: \":path\"\n              descriptor_key: \"path\"\n  typed_per_filter_config:\n    envoy.filters.http.local_ratelimit:\n      \"@type\": type.googleapis.com/envoy.extensions.filters.http.local_ratelimit.v3.LocalRateLimit\n      stat_prefix: http_local_rate_limiter\n      token_bucket:\n        max_tokens: 1000\n        tokens_per_fill: 1000\n        fill_interval: 60s\n      filter_enabled:\n        runtime_key: local_rate_limit_enabled\n        default_value:\n          numerator: 100\n          denominator: HUNDRED\n      filter_enforced:\n        runtime_key: local_rate_limit_enforced\n        default_value:\n          numerator: 100\n          denominator: HUNDRED\n      descriptors:\n        - entries:\n            - key: source_cluster\n              value: foo\n            - key: path\n              value: /foo/bar\n          token_bucket:\n            max_tokens: 10\n            tokens_per_fill: 10\n            fill_interval: 60s\n        - entries:\n            - key: source_cluster\n              value: foo\n            - key: path\n              value: /foo/bar2\n          token_bucket:\n            max_tokens: 100\n            tokens_per_fill: 100\n            fill_interval: 60s\n      response_headers_to_add:\n        - append: false\n          header:\n            key: x-local-rate-limit\n            value: 'true'\n      local_rate_limit_per_downstream_connection: false\n```\n\n----------------------------------------\n\nTITLE: Enabling Timeout Reduction with Scaled Trigger - YAML\nDESCRIPTION: This YAML snippet configures Envoy's Overload Manager to reduce idle connection timeouts for HTTP downstream connections when heap usage increases, using a scaled trigger. It sets up a trigger that transitions from normal to saturated between 85% and 95% heap usage, and applies a minimum timeout value to idle HTTP connections when resource saturation is detected. Dependencies include the fixed_heap resource monitor and Envoy's overload action for reducing timeouts. Parameters include scaling_threshold, saturation_threshold, and timer_scale_factors. The configuration dynamically adjusts idle timeouts based on memory pressure to improve resilience during high load conditions.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/operations/overload_manager/overload_manager.rst#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n  name: \"envoy.overload_actions.reduce_timeouts\"\n  triggers:\n    - name: \"envoy.resource_monitors.fixed_heap\"\n      scaled:\n        scaling_threshold: 0.85\n        saturation_threshold: 0.95\n  typed_config:\n    \"@type\": type.googleapis.com/envoy.config.overload.v3.ScaleTimersOverloadActionConfig\n    timer_scale_factors:\n      - timer: HTTP_DOWNSTREAM_CONNECTION_IDLE\n        min_timeout: 2s\n```\n\n----------------------------------------\n\nTITLE: Metadata Operations in Lua\nDESCRIPTION: Demonstrates metadata handling operations including getting values and iteration.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/lua_filter.rst#2025-04-23_snippet_32\n\nLANGUAGE: lua\nCODE:\n```\nmetadata:get(key)\n```\n\nLANGUAGE: lua\nCODE:\n```\nfor key, value in pairs(metadata) do\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Strict DNS Service Discovery in Envoy YAML\nDESCRIPTION: Strict DNS service discovery continuously resolves specified DNS targets. Each IP address in the DNS result is considered an explicit host in the upstream cluster.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/intro/arch_overview/upstream/service_discovery.rst#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nclusters:\n  - name: strict_dns_cluster\n    connect_timeout: 0.25s\n    type: STRICT_DNS\n    lb_policy: ROUND_ROBIN\n    load_assignment:\n      cluster_name: strict_dns_cluster\n      endpoints:\n        - lb_endpoints:\n          - endpoint:\n              address:\n                socket_address:\n                  address: foo.bar.com\n                  port_value: 443\n```\n\n----------------------------------------\n\nTITLE: Configuring API Key Auth Filter in YAML for Envoy Proxy\nDESCRIPTION: This YAML snippet shows the basic configuration for the API key authentication filter. It specifies the filter type and references the v3 API for further configuration details.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/api_key_auth_filter.rst#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n.. literalinclude:: _include/api-key-auth-filter.yaml\n    :language: yaml\n    :lines: 57-66\n    :linenos:\n    :caption: :download:`api-key-auth-filter.yaml <_include/api-key-auth-filter.yaml>`\n```\n\n----------------------------------------\n\nTITLE: Configuring TCP Proxy Filter Type\nDESCRIPTION: Type URL configuration for TCP proxy filter using the Envoy v3 API.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/listeners/network_filters/tcp_proxy_filter.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\ntype.googleapis.com/envoy.extensions.filters.network.tcp_proxy.v3.TcpProxy\n```\n\n----------------------------------------\n\nTITLE: Configuring SXG Filter in Envoy\nDESCRIPTION: Example configuration for the SXG HTTP filter showing certificate setup, URL configurations, duration settings, and header customizations. Uses SDS for certificate and private key management.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/sxg_filter.rst#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ncbor_url: \"/.sxg/cert.cbor\"\nvalidity_url: \"/.sxg/validity.msg\"\ncertificate:\n  name: certificate\n  sds_config:\n    path: \"/etc/envoy/sxg-certificate.yaml\"\nprivate_key:\n  name: private_key\n  sds_config:\n    path: \"/etc/envoy/sxg-private-key.yaml\"\nduration: 432000s\nmi_record_size: 1024\nclient_can_accept_sxg_header: \"x-custom-accept-sxg\"\nshould_encode_sxg_header: \"x-custom-should-encode\"\nheader_prefix_filters:\n  - \"x-foo-\"\n  - \"x-bar-\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Kafka Broker Filter Without Traffic Mutation\nDESCRIPTION: YAML configuration for setting up the Kafka broker filter without message mutation. Shows how to chain the filter with TCP proxy and configure listeners and clusters.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/listeners/network_filters/kafka_broker_filter.rst#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nlisteners:\n- address:\n    socket_address:\n      address: 127.0.0.1\n      port_value: 19092\n  filter_chains:\n  - filters:\n    - name: envoy.filters.network.kafka_broker\n      typed_config:\n        \"@type\": type.googleapis.com/envoy.extensions.filters.network.kafka_broker.v3.KafkaBroker\n        stat_prefix: exampleprefix\n    - name: envoy.filters.network.tcp_proxy\n      typed_config:\n        \"@type\": type.googleapis.com/envoy.extensions.filters.network.tcp_proxy.v3.TcpProxy\n        stat_prefix: tcp\n        cluster: localkafka\nclusters:\n- name: localkafka\n  connect_timeout: 0.25s\n  type: strict_dns\n  lb_policy: round_robin\n  load_assignment:\n    cluster_name: some_service\n    endpoints:\n      - lb_endpoints:\n        - endpoint:\n            address:\n              socket_address:\n                address: 127.0.0.1\n                port_value: 9092\n```\n\n----------------------------------------\n\nTITLE: Build Release Android AAR for Multiple Architectures - Bash\nDESCRIPTION: Builds the Envoy Mobile Android AAR for release, specifying --config=release-android and desired architectures. Use this for production-ready artifacts compatible with multiple Android CPU targets. Requires Bazel, Android SDK/NDK, and specified architectures (e.g., x86, armeabi-v7a, arm64-v8a).\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/mobile/docs/root/start/building/building.rst#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n./bazelw build android_dist --config=release-android --fat_apk_cpu=x86,armeabi-v7a,arm64-v8a\n```\n\n----------------------------------------\n\nTITLE: Smart Pointer Type Alias Examples in C++\nDESCRIPTION: Demonstrates the standard way to declare type aliases for smart pointers in Envoy codebase, including unique_ptr and shared_ptr variations.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/STYLE.md#2025-04-23_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nusing FooPtr = std::unique_ptr<Foo>;\nusing BarSharedPtr = std::shared_ptr<Bar>;\nusing BlahConstSharedPtr = std::shared_ptr<const Blah>;\n```\n\n----------------------------------------\n\nTITLE: Detecting TLS Traffic with Matcher API in Envoy Listener Configuration\nDESCRIPTION: This example uses the tls_inspector listener filter to detect if the transport appears to be TLS. The matcher selects the 'tls' filter chain for TLS traffic and the 'plaintext' filter chain otherwise.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/intro/arch_overview/advanced/matching/matching_listener.rst#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nfilter_chains:\n- name: tls\n  transport_socket:\n    name: envoy.transport_sockets.tls\n    typed_config:\n      \"@type\": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.DownstreamTlsContext\n      common_tls_context:\n        tls_certificates:\n        - certificate_chain: {filename: \"certs/servercert.pem\"}\n          private_key: {filename: \"certs/serverkey.pem\"}\n- name: plaintext\nlistener_filters:\n- name: \"envoy.filters.listener.tls_inspector\"\n  typed_config:\n    \"@type\": type.googleapis.com/envoy.extensions.filters.listener.tls_inspector.v3.TlsInspector\nmatcher:\n  matcher_tree:\n    input:\n      name: envoy.matching.inputs.server_name\n      typed_config:\n        \"@type\": type.googleapis.com/envoy.extensions.matching.common_inputs.network.v3.ServerNameInput\n```\n\n----------------------------------------\n\nTITLE: VHDS Statistics Tree Structure\nDESCRIPTION: Shows the structure of the VHDS statistics tree, which is rooted at http.<stat_prefix>.vhds.<virtual_host_name>.*. Any ':' character in the virtual_host_name is replaced with '_' in the stats tree.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_conn_man/vhds.rst#2025-04-23_snippet_1\n\nLANGUAGE: csv\nCODE:\n```\nName, Type, Description\nconfig_reload, Counter, Total API fetches that resulted in a config reload due to a different config\nempty_update, Counter, Total count of empty updates received\n```\n\n----------------------------------------\n\nTITLE: Configuring IP Tables Rules for Original Source Routing\nDESCRIPTION: Commands to configure iptables and ip rules for proper routing of marked packets. These commands ensure IPv4 and IPv6 traffic marked with value 123 routes correctly through the local interface.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/listeners/listener_filters/original_src_filter.rst#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\niptables  -t mangle -I PREROUTING -m mark     --mark 123 -j CONNMARK --save-mark\niptables  -t mangle -I OUTPUT     -m connmark --mark 123 -j CONNMARK --restore-mark\nip6tables -t mangle -I PREROUTING -m mark     --mark 123 -j CONNMARK --save-mark\nip6tables -t mangle -I OUTPUT     -m connmark --mark 123 -j CONNMARK --restore-mark\nip rule add fwmark 123 lookup 100\nip route add local 0.0.0.0/0 dev lo table 100\nip -6 rule add fwmark 123 lookup 100\nip -6 route add local ::/0 dev lo table 100\necho 1 > /proc/sys/net/ipv4/conf/eth0/route_localnet\n```\n\n----------------------------------------\n\nTITLE: Generic Proxy Base Configuration with Routes\nDESCRIPTION: Example configuration showing route setup for generic proxy using host and path matching.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/listeners/network_filters/generic_proxy_filter.rst#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: envoy.filters.network.generic_proxy\ntypedConfig:\n  '@type': type.googleapis.com/envoy.extensions.filters.network.generic_proxy.v3.GenericProxy\n  stat_prefix: ingress_generic_proxy\n  filters: []\n  codec:\n    name: envoy.generic_proxy.codecs.dubbo\n    typed_config:\n      '@type': type.googleapis.com/envoy.extensions.filters.network.generic_proxy.codecs.dubbo.v3.DubboCodecConfig\n  route_config:\n    name: default_route\n    routes:\n      - match:\n          host: route-host-1\n          path: route-path-1\n          method: POST\n          properties:\n            key: value\n        route:\n          weighted_clusters:\n            clusters:\n              - name: cluster1\n                weight: 100\n            total_weight: 100\n```\n\n----------------------------------------\n\nTITLE: Configuring Local Reply Format in Envoy\nDESCRIPTION: Example configuration showing how to customize response body format and content type using body_format and body_format_override fields. Demonstrates text and HTML formatting with variable substitution.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_conn_man/local_reply.rst#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nmappers:\n- filter:\n    status_code_filter:\n      comparison:\n        op: EQ\n        value:\n          default_value: 400\n          runtime_key: key_b\n  status_code: 401\n  body_format_override:\n    text_format: \"<h1>%LOCAL_REPLY_BODY% %REQ(:path)%</h1>\"\n    content_type: \"text/html; charset=UTF-8\"\n- filter:\n    status_code_filter:\n      comparison:\n        op: EQ\n        value:\n          default_value: 500\n          runtime_key: key_b\n  status_code: 501\nbody_format:\n  text_format: \"%LOCAL_REPLY_BODY% %RESPONSE_CODE%\"\n```\n\n----------------------------------------\n\nTITLE: Refreshing Compilation Database with refresh_compdb Script (Shell)\nDESCRIPTION: Executes the `refresh_compdb` script using `ci/do_ci.sh` to update the compilation database. This is crucial for maintaining accurate C/C++ code completion in VSCode, especially after modifying protocol buffer definitions or Bazel build structures. It's recommended to use the `vscode-clangd` extension instead of the default Microsoft C/C++ extension. Users in China may need to configure HTTP/HTTPS proxy environment variables.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/tools/vscode/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nci/do_ci.sh refresh_compdb\n```\n\n----------------------------------------\n\nTITLE: Configuring Watched Directory for Validation Context in Envoy\nDESCRIPTION: This YAML configuration shows how to use a watched directory for the validation context, specifying the path to the CA certificate bundle using a symlink.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/security/secret.rst#2025-04-23_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nresources:\n  - \"@type\": \"type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.Secret\"\n    name: validation_context_sds\n    validation_context:\n      trusted_ca:\n        filename: /certs/current/cacert.pem\n      watched_directory:\n        path: /certs\n```\n\n----------------------------------------\n\nTITLE: Identifying nghttp2 Error Details in Envoy Logs\nDESCRIPTION: Example of trace-level log output showing an HTTP/2 header compliance error detected by nghttp2. This particular example shows an invalid content-length header that triggered a reset.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/faq/debugging/why_is_envoy_sending_http2_resets.rst#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ninvalid http2: Invalid HTTP header field was received: frame type: 1, stream: 1, name: [content-length], value: [3]\n```\n\n----------------------------------------\n\nTITLE: Configuring Kafka Mesh Filter with Multiple Clusters\nDESCRIPTION: Example configuration showing how to set up the Kafka mesh filter to proxy three Kafka clusters. The configuration specifies listener address, upstream clusters with their respective bootstrap servers, and forwarding rules based on topic prefixes.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/listeners/network_filters/kafka_mesh_filter.rst#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nlisteners:\n- address:\n    socket_address:\n      address: 127.0.0.1 # Host that Kafka clients should connect to.\n      port_value: 19092  # Port that Kafka clients should connect to.\n  filter_chains:\n  - filters:\n    - name: envoy.filters.network.kafka_mesh\n      typed_config:\n        \"@type\": type.googleapis.com/envoy.extensions.filters.network.kafka_mesh.v3alpha.KafkaMesh\n        advertised_host: \"127.0.0.1\"\n        advertised_port: 19092\n        upstream_clusters:\n        - cluster_name: kafka_c1\n          bootstrap_servers: cluster1_node1:9092,cluster1_node2:9092,cluster1_node3:9092\n          partition_count: 1\n        - cluster_name: kafka_c2\n          bootstrap_servers: cluster2_node1:9092,cluster2_node2:9092,cluster2_node3:9092\n          partition_count: 1\n        - cluster_name: kafka_c3\n          bootstrap_servers: cluster3_node1:9092,cluster3_node2:9092\n          partition_count: 5\n          producer_config:\n            acks: \"1\"\n            linger.ms: \"500\"\n          consumer_config:\n            client.id: \"my-envoy-consumer\"\n        forwarding_rules:\n        - target_cluster: kafka_c1\n          topic_prefix: apples\n        - target_cluster: kafka_c2\n          topic_prefix: bananas\n        - target_cluster: kafka_c3\n          topic_prefix: cherries\n```\n\n----------------------------------------\n\nTITLE: Retrieving Local Certificate DNS SANs in Envoy Lua\nDESCRIPTION: Calls the `dnsSansLocalCertificate()` method on the `downstreamSslConnection` object. It returns a Lua table containing the DNS Subject Alternative Names (SANs) from the local certificate presented by Envoy. Returns an empty table if no local certificate, SAN field, or DNS SANs exist.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/lua_filter.rst#2025-04-23_snippet_58\n\nLANGUAGE: lua\nCODE:\n```\ndownstreamSslConnection:dnsSansLocalCertificate()\n```\n\n----------------------------------------\n\nTITLE: Initializing StreamClient in Kotlin and Swift\nDESCRIPTION: Examples showing how to initialize a StreamClient instance using EngineBuilder in both Kotlin and Swift. The builder allows setting log levels and other configuration options.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/mobile/docs/root/api/starting_envoy.rst#2025-04-23_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval streamClient = AndroidEngineBuilder(getApplication())\n  .setLogLevel(LogLevel.WARN)\n  ...\n  .build()\n  .streamClient()\n```\n\nLANGUAGE: swift\nCODE:\n```\nlet streamClient = try EngineBuilder()\n  .setLogLevel(.warn)\n  ...\n  .build()\n  .streamClient()\n```\n\n----------------------------------------\n\nTITLE: Defining RBAC Condition Using Common Expression Language (CEL) in YAML\nDESCRIPTION: This snippet demonstrates how to define an authorization condition for RBAC using the Common Expression Language (CEL). The condition checks if the request path starts with '/v1/'.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/intro/arch_overview/security/rbac_filter.rst#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ncall_expr:\n  function: startsWith\n  args:\n  - select_expr:\n     operand:\n       ident_expr:\n         name: request\n     field: path\n  - const_expr:\n     string_value: /v1/\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic LDS with REST API\nDESCRIPTION: Example of configuring LDS (Listener Discovery Service) to use REST API with a specific xDS cluster.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/overview/xds_api.rst#2025-04-23_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nlds_config:\n  api_config_source:\n    api_type: REST\n    cluster_names: [some_xds_cluster]\n```\n\n----------------------------------------\n\nTITLE: Route-Specific Rate Limit Implementation\nDESCRIPTION: Detailed route configuration for implementing rate limiting on specific routes with token bucket settings.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/local_rate_limit_filter.rst#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nroutes:\n- match:\n    prefix: \"/\"\n  route:\n    cluster: www\n  typed_per_filter_config:\n    envoy.filters.http.local_ratelimit:\n      \"@type\": type.googleapis.com/envoy.extensions.filters.http.local_ratelimit.v3.LocalRateLimit\n      stat_prefix: http_local_rate_limiter\n      token_bucket:\n        max_tokens: 10000\n        tokens_per_fill: 1000\n        fill_interval: 1s\n      filter_enabled:\n        runtime_key: local_rate_limit_enabled\n        default_value:\n          numerator: 100\n          denominator: HUNDRED\n      filter_enforced:\n        runtime_key: local_rate_limit_enforced\n        default_value:\n          numerator: 100\n          denominator: HUNDRED\n      response_headers_to_add:\n        - append: false\n          header:\n            key: x-local-rate-limit\n            value: 'true'\n      local_rate_limit_per_downstream_connection: false\n```\n\n----------------------------------------\n\nTITLE: Configuring Hyperscan for Multiple Pattern Matching in Envoy (YAML)\nDESCRIPTION: This YAML configuration shows how to enable multiple pattern matching using the Hyperscan matcher within Envoy's generic matching system. It defines a list of regex patterns under the `regexes` key. Hyperscan will attempt to match the input against all provided patterns simultaneously.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/other_features/hyperscan.rst#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nmatcher:\n  matcher_tree:\n    input:\n      name: request-header\n      typed_config:\n        \"@type\": type.googleapis.com/envoy.type.matcher.v3.HttpRequestHeaderMatchInput\n        header_name: user-agent\n    exact_match_map:\n      map:\n        \"^Mozilla.*\":\n          action:\n            name: skip\n            typed_config:\n              \"@type\": type.googleapis.com/envoy.extensions.filters.common.matcher.action.v3.SkipFilter\n  on_no_match:\n    # Use Hyperscan matcher.\n    matcher:\n      matcher_list:\n        matchers:\n          # If the input doesn't match the regex, deny the request.\n          - predicate:\n              custom_match:\n                name: hyperscan\n                typed_config:\n                  \"@type\": type.googleapis.com/envoy.extensions.matching.input_matchers.hyperscan.v3alpha.Hyperscan\n                  # Match against multiple patterns.\n                  regexes:\n                    - regex: \".*password.*\"\n                    - regex: \".*username.*\"\n                    - regex: \".*secret.*\"\n                    - regex: \".*token.*\"\n            on_match:\n              action:\n                name: route\n                typed_config:\n                  \"@type\": type.googleapis.com/envoy.extensions.filters.http.matcher.v3.Matcher.MatchAction\n```\n\n----------------------------------------\n\nTITLE: Configuring Single JWT Requirement Rule in YAML\nDESCRIPTION: Example configuration for a single JWT requirement rule. It specifies matching criteria and the required provider.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/jwt_authn_filter.rst#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nrules:\n- match:\n    prefix: /healthz\n- match:\n    prefix: /api\n  requires:\n    provider_name: provider1\n- match:\n    prefix: /admin\n  requires:\n    provider_name: provider2\n```\n\n----------------------------------------\n\nTITLE: Configuring Header-To-Metadata Filter at Route Level in YAML\nDESCRIPTION: This YAML configuration shows how to set up the Header-To-Metadata filter at the route level. This can be used to override global configuration or enable the filter only for specific routes.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/header_to_metadata_filter.rst#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nroutes:\n- match:\n    prefix: \"/\"\n  route:\n    cluster: cluster_0\n  typed_per_filter_config:\n    envoy.filters.http.header_to_metadata:\n      \"@type\": type.googleapis.com/envoy.extensions.filters.http.header_to_metadata.v3.Config\n      request_rules:\n        - header: x-version\n          on_header_present:\n            metadata_namespace: envoy.lb\n            key: version\n            type: STRING\n          on_header_missing:\n            metadata_namespace: envoy.lb\n            key: version\n            value: \"unknown\"\n            type: STRING\n          remove: false\n        - header: x-auth\n          on_header_present:\n            metadata_namespace: envoy.lb\n            key: auth\n            type: STRING\n          remove: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Supported Languages for Language Detection Filter in YAML\nDESCRIPTION: This snippet shows how to configure the supported languages for the language detection filter. It specifies a list of language codes that the filter will use to match against client preferences.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/language_filter.rst#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsupported_languages: [en, fr]\n```\n\n----------------------------------------\n\nTITLE: Adding QUIC Canonical Suffix in Kotlin/Swift\nDESCRIPTION: Example showing how to add QUIC canonical suffix for domain handling in both Kotlin and Swift implementations.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/mobile/docs/root/api/starting_envoy.rst#2025-04-23_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nbuilder.addQuicCanonicalSuffix(\".example.com\")\n```\n\nLANGUAGE: swift\nCODE:\n```\nbuilder.addQuicCanonicalSuffix(\".example.com\")\n```\n\n----------------------------------------\n\nTITLE: Responding to Envoy CDS Request (YAML)\nDESCRIPTION: Example gRPC DiscoveryResponse payload in YAML format for a CDS request. It defines the `some_service` cluster, specifying its connection timeout, load balancing policy (ROUND_ROBIN), and configuration type (EDS), indicating that its endpoints will be discovered via EDS using the `xds_cluster`. The `@type` indicates it's a `Cluster`.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/overview/examples.rst#2025-04-23_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nversion_info: \"0\"\nresources:\n- \"@type\": type.googleapis.com/envoy.config.cluster.v3.Cluster\n  name: some_service\n  connect_timeout: 0.25s\n  lb_policy: ROUND_ROBIN\n  type: EDS\n  eds_cluster_config:\n    eds_config:\n      api_config_source:\n        api_type: GRPC\n        grpc_services:\n          - envoy_grpc:\n              cluster_name: xds_cluster\n```\n\n----------------------------------------\n\nTITLE: Request Response Size Statistics in Envoy\nDESCRIPTION: CSV table showing statistics for tracking request and response sizes. These stats monitor headers and body sizes for both requests and responses across upstream connections.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/upstream/cluster_manager/cluster_stats.rst#2025-04-23_snippet_4\n\nLANGUAGE: csv\nCODE:\n```\nName, Type, Description\nupstream_rq_headers_size, Histogram, Request headers size in bytes per upstream\nupstream_rq_headers_count, Histogram, Request header count per upstream\nupstream_rq_body_size, Histogram, Request body size in bytes per upstream\nupstream_rs_headers_size, Histogram, Response headers size in bytes per upstream\nupstream_rs_headers_count, Histogram, Response header count per upstream\nupstream_rs_body_size, Histogram, Response body size in bytes per upstream\n```\n\n----------------------------------------\n\nTITLE: Combining Exact and Prefix Matching in Envoy Proxy (YAML)\nDESCRIPTION: This configuration shows how to perform exact matches first using a hashmap, and then attempt prefix matches using tries if no exact matches are found. It demonstrates a two-stage matching strategy for flexible routing.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/intro/arch_overview/advanced/matching/matching_api.rst#2025-04-23_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nstatic_resources:\n  listeners:\n  - address:\n      socket_address:\n        address: 0.0.0.0\n        port_value: 8081\n    filter_chains:\n    - filters:\n      - name: envoy.filters.network.http_connection_manager\n        typed_config:\n          \"@type\": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager\n          codec_type: AUTO\n          stat_prefix: ingress_http\n          route_config:\n            name: local_route\n            virtual_hosts:\n            - name: local_service\n              domains:\n              - \"*\"\n              routes:\n              - match:\n                  safe_regex:\n                    regex: \".*\"\n                route:\n                  cluster: generic_matcher_service\n          http_filters:\n          - name: envoy.filters.http.router\n            typed_config:\n              \"@type\": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router\n  clusters:\n  - name: generic_matcher_service\n    connect_timeout: 0.250s\n    type: STRICT_DNS\n    lb_policy: ROUND_ROBIN\n    load_assignment:\n      cluster_name: generic_matcher_service\n      endpoints:\n      - lb_endpoints:\n        - endpoint:\n            address:\n              socket_address:\n                address: cluster1\n                port_value: 8080\n  - name: cluster_2\n    connect_timeout: 0.250s\n    type: STRICT_DNS\n    lb_policy: ROUND_ROBIN\n    load_assignment:\n      cluster_name: cluster_2\n      endpoints:\n      - lb_endpoints:\n        - endpoint:\n            address:\n              socket_address:\n                address: cluster2\n                port_value: 8080\n  - name: cluster_3\n    connect_timeout: 0.250s\n    type: STRICT_DNS\n    lb_policy: ROUND_ROBIN\n    load_assignment:\n      cluster_name: cluster_3\n      endpoints:\n      - lb_endpoints:\n        - endpoint:\n            address:\n              socket_address:\n                address: cluster3\n                port_value: 8080\n```\n\n----------------------------------------\n\nTITLE: Checking Peer Certificate Presence in Envoy Lua\nDESCRIPTION: Calls the `peerCertificatePresented()` method on the `downstreamSslConnection` object (obtained from `streamInfo:downstreamSslConnection()` or `connection:ssl()`). It returns a boolean indicating whether the downstream peer presented a certificate.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/lua_filter.rst#2025-04-23_snippet_45\n\nLANGUAGE: lua\nCODE:\n```\nif downstreamSslConnection:peerCertificatePresented() then\n  print(\"peer certificate is presented\")\nend\n```\n\n----------------------------------------\n\nTITLE: Formatting %START_TIME% Command Operator Examples - Envoy - None\nDESCRIPTION: Displays usage examples of the %START_TIME% command operator, demonstrating the use of format strings to control how request or connection start times appear in logs. Examples include ISO date format, seconds since epoch, millisecond/microsecond/nanosecond precision with different format specifiers. To be used inside access log 'format' strings or JSON keys in Envoy configurations. Output is substituted per log line by Envoy, given correct context.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/observability/access_log/usage.rst#2025-04-23_snippet_4\n\nLANGUAGE: none\nCODE:\n```\n%START_TIME(%Y/%m/%dT%H:%M:%S%z)%\n```\n\nLANGUAGE: none\nCODE:\n```\n%START_TIME(%s)%\n```\n\nLANGUAGE: none\nCODE:\n```\n# To include millisecond fraction of the second (.000 ... .999). E.g. 1527590590.528.\n%START_TIME(%s.%3f)%\n```\n\nLANGUAGE: none\nCODE:\n```\n%START_TIME(%s.%6f)%\n```\n\nLANGUAGE: none\nCODE:\n```\n%START_TIME(%s.%9f)%\n```\n\n----------------------------------------\n\nTITLE: Minimal VCL Configuration File (Text/Conf)\nDESCRIPTION: This text snippet provides a minimal example of a VCL configuration file (`vcl.conf`), which can be placed at `/etc/vpp/vcl.conf` or pointed to by the `VCL_CONFIG` environment variable. It sets parameters like RX/TX FIFO sizes (`rx-fifo-size`, `tx-fifo-size`), shared memory segment size (`segment-size`), application scope (`app-scope-global`, `app-scope-local`), the path to the VPP application socket API (`app-socket-api`), enables eventfds for message queue notifications (`use-mq-eventfd`), and sets the VCL worker's incoming message queue size (`event-queue-size`). These settings tune the communication channel between VCL (used by Envoy) and the VPP process.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/other_features/vcl.rst#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nvcl {\n  # Max rx/tx session buffers sizes in bytes. Increase for high throughput traffic.\n  rx-fifo-size 400000\n  tx-fifo-size 400000\n\n  # Size of shared memory segments between VPP and VCL in bytes\n  segment-size 1000000000\n\n  # App has access to global routing table\n  app-scope-global\n\n  # Allow inter-app shared-memory cut-through sessions\n  app-scope-local\n\n  # Pointer to session layer's socket api socket\n  app-socket-api /var/run/vpp/app_ns_sockets/default\n\n  # Message queues use eventfds for notifications\n  use-mq-eventfd\n\n  # VCL worker incoming message queue size\n  event-queue-size 40000\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring File System Http Cache in Envoy Proxy\nDESCRIPTION: This snippet shows how to configure the File System Http Cache using the Envoy v3 API. It specifies the type URL for the FileSystemHttpCacheConfig message.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/caches/file_system.rst#2025-04-23_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\ntype.googleapis.com/envoy.extensions.http.cache.file_system_http_cache.v3.FileSystemHttpCacheConfig\n```\n\n----------------------------------------\n\nTITLE: Configuring Preserve Case Formatter for HTTP/1.1 Headers in Envoy\nDESCRIPTION: This YAML configuration example demonstrates how to set up a stateful formatter to preserve the original case of HTTP/1.1 headers across the Envoy proxy. It uses the PreserveCaseFormatterConfig extension.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_conn_man/header_casing.rst#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nstatic_resources:\n  listeners:\n  - address:\n      socket_address:\n        address: 0.0.0.0\n        port_value: 8080\n    filter_chains:\n    - filters:\n      - name: envoy.filters.network.http_connection_manager\n        typed_config:\n          \"@type\": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager\n          stat_prefix: ingress_http\n          http_protocol_options:\n            header_key_format:\n              stateful_formatter:\n                name: envoy.http.stateful_header_formatters.preserve_case\n                typed_config:\n                  \"@type\": type.googleapis.com/envoy.extensions.http.header_formatters.preserve_case.v3.PreserveCaseFormatterConfig\n          route_config:\n            name: local_route\n            virtual_hosts:\n            - name: local_service\n              domains: [\"*\"]\n              routes:\n              - match: { prefix: \"/\" }\n                route: { cluster: some_service }\n  clusters:\n  - name: some_service\n    load_assignment:\n      cluster_name: some_service\n      endpoints:\n      - lb_endpoints:\n        - endpoint:\n            address:\n              socket_address:\n                address: 127.0.0.1\n                port_value: 8080\n    typed_extension_protocol_options:\n      envoy.extensions.upstreams.http.v3.HttpProtocolOptions:\n        \"@type\": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions\n        common_http_protocol_options: {}\n        explicit_http_config:\n          http_protocol_options:\n            header_key_format:\n              stateful_formatter:\n                name: envoy.http.stateful_header_formatters.preserve_case\n                typed_config:\n                  \"@type\": type.googleapis.com/envoy.extensions.http.header_formatters.preserve_case.v3.PreserveCaseFormatterConfig\n```\n\n----------------------------------------\n\nTITLE: Configuring Envoy Bootstrap with Dynamic EDS (YAML)\nDESCRIPTION: Demonstrates an Envoy bootstrap configuration where listeners and basic cluster information are static, but endpoint discovery for `some_service` is dynamic via EDS. It defines an `xds_cluster` pointing to the gRPC management server at 127.0.0.1:5678, which will provide endpoint information for `some_service`. Includes TCP keepalive settings for the xDS connection.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/overview/examples.rst#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nadmin:\n  address:\n    socket_address: { address: 127.0.0.1, port_value: 9901 }\n\nstatic_resources:\n  listeners:\n  - name: listener_0\n    address:\n      socket_address: { address: 127.0.0.1, port_value: 10000 }\n    filter_chains:\n    - filters:\n      - name: envoy.filters.network.http_connection_manager\n        typed_config:\n          \"@type\": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager\n          stat_prefix: ingress_http\n          codec_type: AUTO\n          route_config:\n            name: local_route\n            virtual_hosts:\n            - name: local_service\n              domains: [\"*\"]\n              routes:\n              - match: { prefix: \"/\" }\n                route: { cluster: some_service }\n          http_filters:\n          - name: envoy.filters.http.router\n            typed_config:\n              \"@type\": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router\n  clusters:\n  - name: some_service\n    connect_timeout: 0.25s\n    lb_policy: ROUND_ROBIN\n    type: EDS\n    eds_cluster_config:\n      eds_config:\n        api_config_source:\n          api_type: GRPC\n          grpc_services:\n            - envoy_grpc:\n                cluster_name: xds_cluster\n  - name: xds_cluster\n    connect_timeout: 0.25s\n    type: STATIC\n    lb_policy: ROUND_ROBIN\n    typed_extension_protocol_options:\n      envoy.extensions.upstreams.http.v3.HttpProtocolOptions:\n        \"@type\": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions\n        explicit_http_config:\n          http2_protocol_options:\n            connection_keepalive:\n              interval: 30s\n              timeout: 5s\n    upstream_connection_options:\n      # configure a TCP keep-alive to detect and reconnect to the admin\n      # server in the event of a TCP socket half open connection\n      tcp_keepalive: {}\n    load_assignment:\n      cluster_name: xds_cluster\n      endpoints:\n      - lb_endpoints:\n        - endpoint:\n            address:\n              socket_address:\n                address: 127.0.0.1\n                port_value: 5678\n```\n\n----------------------------------------\n\nTITLE: Configuring DNS Cache Circuit Breaker in Envoy (YAML)\nDESCRIPTION: This YAML snippet demonstrates how to configure the DNS cache circuit breaker for dynamic forward proxy in Envoy. It includes settings for the HTTP filter, cluster, and DNS cache, along with circuit breaker parameters.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/dynamic_forward_proxy_filter.rst#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nstatic_resources:\n  listeners:\n  - name: listener_0\n    address:\n      socket_address:\n        protocol: TCP\n        address: 0.0.0.0\n        port_value: 10000\n    filter_chains:\n    - filters:\n      - name: envoy.filters.network.http_connection_manager\n        typed_config:\n          \"@type\": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager\n          stat_prefix: ingress_http\n          route_config:\n            name: local_route\n            virtual_hosts:\n            - name: local_service\n              domains: [\"*\"]\n              routes:\n              - match:\n                  prefix: \"/\"\n                route:\n                  cluster: dynamic_forward_proxy_cluster\n          http_filters:\n          - name: envoy.filters.http.dynamic_forward_proxy\n            typed_config:\n              \"@type\": type.googleapis.com/envoy.extensions.filters.http.dynamic_forward_proxy.v3.FilterConfig\n              dns_cache_config:\n                name: dynamic_forward_proxy_cache_config\n                dns_lookup_family: AUTO\n                dns_cache_circuit_breaker:\n                  max_pending_requests: 100\n          - name: envoy.filters.http.router\n            typed_config:\n              \"@type\": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router\n  clusters:\n  - name: dynamic_forward_proxy_cluster\n    lb_policy: CLUSTER_PROVIDED\n    cluster_type:\n      name: envoy.clusters.dynamic_forward_proxy\n      typed_config:\n        \"@type\": type.googleapis.com/envoy.extensions.clusters.dynamic_forward_proxy.v3.ClusterConfig\n        dns_cache_config:\n          name: dynamic_forward_proxy_cache_config\n          dns_lookup_family: AUTO\n          dns_cache_circuit_breaker:\n            max_pending_requests: 100\n          dns_resolution_config:\n            resolvers:\n            - socket_address:\n                address: 8.8.8.8\n                port_value: 53\n            - socket_address:\n                address: 8.8.4.4\n                port_value: 53\n            dns_resolver_options:\n              use_tcp_for_dns_lookups: false\n              no_default_search_domain: true\n```\n\n----------------------------------------\n\nTITLE: Event Loop Statistics CSV Schema\nDESCRIPTION: CSV table defining the statistics available for event loop monitoring, including loop duration and poll delay metrics.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/operations/performance.rst#2025-04-23_snippet_0\n\nLANGUAGE: csv\nCODE:\n```\nName, Type, Description\nloop_duration_us, Histogram, Event loop durations in microseconds\npoll_delay_us, Histogram, Polling delays in microseconds\n```\n\n----------------------------------------\n\nTITLE: Illustrating Basic Trace Chain in Text\nDESCRIPTION: This snippet shows a basic trace chain where the parent span of a server span is typically a client span. It demonstrates the correct sequence of span types across multiple applications.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/intro/arch_overview/observability/tracing.rst#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n-> [SERVER -> CLIENT] -> [SERVER -> CLIENT] -> ...\n```\n\n----------------------------------------\n\nTITLE: Setting Component-Level Debug Logging in Envoy (Docker)\nDESCRIPTION: Docker command to run Envoy container with custom logging configuration. Maps ports 9901 and 10000, and sets component-specific logging levels while disabling general logging.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/start/quick-start/run-envoy.rst#2025-04-23_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ docker run --rm -d \\\n      -p 9901:9901 \\\n      -p 10000:10000 \\\n      envoyproxy/|envoy_docker_image| \\\n          -c /etc/envoy/envoy.yaml \\\n          -l off \\\n          --component-log-level upstream:debug,connection:trace\n```\n\n----------------------------------------\n\nTITLE: Building Envoy from Release Tarball\nDESCRIPTION: Commands to build Envoy from a release tarball, including generating the SOURCE_VERSION file and building with Bazel.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/bazel/README.md#2025-04-23_snippet_3\n\nLANGUAGE: console\nCODE:\n```\npython3 tools/github/write_current_source_version.py\nbazel build -c opt envoy\n```\n\n----------------------------------------\n\nTITLE: Kafka Broker Configuration for Advertising Listeners\nDESCRIPTION: Text configuration showing how to set up Kafka broker listeners to work with Envoy proxy.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/listeners/network_filters/kafka_broker_filter.rst#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n# Listener value needs to be equal to cluster value in Envoy config\n# (will receive payloads from Envoy).\nlisteners=PLAINTEXT://127.0.0.1:9092\n\n# Advertised listener value needs to be equal to Envoy's listener\n# (will make clients discovering this broker talk to it through Envoy).\nadvertised.listeners=PLAINTEXT://127.0.0.1:19092\n```\n\n----------------------------------------\n\nTITLE: Configuring VCL Socket Interface Extension in Envoy Bootstrap (YAML)\nDESCRIPTION: This YAML configuration snippet demonstrates how to enable the VCL socket interface extension within Envoy's bootstrap configuration. It adds the `envoy.extensions.vcl.vcl_socket_interface` extension and sets it as the `default_socket_interface`. This directs Envoy to use the VCL interface for network operations instead of the default OS sockets.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/other_features/vcl.rst#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nbootstrap_extensions:\n  - name: envoy.extensions.vcl.vcl_socket_interface\n    typed_config:\n      \"@type\": type.googleapis.com/envoy.extensions.vcl.v3alpha.VclSocketInterface\ndefault_socket_interface: \"envoy.extensions.vcl.vcl_socket_interface\"\n```\n\n----------------------------------------\n\nTITLE: Creating gRPC Request Headers in Swift\nDESCRIPTION: Example of building gRPC request headers using GRPCRequestHeadersBuilder in Swift, showing header configuration with custom parameters.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/mobile/docs/root/api/grpc.rst#2025-04-23_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nlet headers = GRPCRequestHeadersBuilder(scheme: \"https\", authority: \"envoyproxy.io\", path: \"/pb.api.v1.Foo/GetBar\")\n    .add(name: \"x-foo\", value: \"123\")\n    ...\n    .build()\n```\n\n----------------------------------------\n\nTITLE: Configuring Logical DNS Service Discovery in Envoy YAML\nDESCRIPTION: Logical DNS uses asynchronous resolution but only uses the first IP address returned when initiating a new connection. This is optimal for large-scale web services accessed via DNS.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/intro/arch_overview/upstream/service_discovery.rst#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nclusters:\n  - name: logical_dns_cluster\n    connect_timeout: 0.25s\n    type: LOGICAL_DNS\n    lb_policy: ROUND_ROBIN\n    load_assignment:\n      cluster_name: logical_dns_cluster\n      endpoints:\n        - lb_endpoints:\n          - endpoint:\n              address:\n                socket_address:\n                  address: foo.bar.com\n                  port_value: 443\n```\n\n----------------------------------------\n\nTITLE: Implementing Lua Route Handler for Cluster Selection\nDESCRIPTION: Lua function that handles route selection based on request headers. It demonstrates how to access headers and return a cluster name.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/cluster_specifier/lua.rst#2025-04-23_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nfunction envoy_on_route(route_handle)\nend\n```\n\n----------------------------------------\n\nTITLE: Envoy Golang Network Filter Configuration\nDESCRIPTION: YAML configuration example for setting up a Golang network filter in Envoy using a prebuilt plugin\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/listeners/network_filters/golang_filter.rst#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nemphasize-lines: 2-11\ncaption: :download:`golang.yaml </_configs/go/network.yaml>`\n```\n\n----------------------------------------\n\nTITLE: Timer Operations\nDESCRIPTION: Examples of recording duration values in a Timer metric for tracking time distributions.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/mobile/docs/root/api/stats.rst#2025-04-23_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\ntimer.recordDuration(5)\n```\n\nLANGUAGE: swift\nCODE:\n```\ntimer.recordDuration(durationMs: 5)\n```\n\n----------------------------------------\n\nTITLE: Defining Static Resources in Envoy Configuration (YAML)\nDESCRIPTION: This snippet shows the top-level static_resources configuration in Envoy. It contains statically configured elements that are set when Envoy starts, as opposed to dynamic runtime configuration.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/start/quick-start/configuration-static.rst#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nstatic_resources:\n```\n\n----------------------------------------\n\nTITLE: Configuring Downstream Connections Monitor in Envoy (YAML)\nDESCRIPTION: This snippet shows how to configure the downstream connections monitor in Envoy using YAML. It sets a limit on the maximum number of active downstream connections.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/operations/overload_manager/overload_manager.rst#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nresource_monitors:\n  - name: \"envoy.resource_monitors.global_downstream_max_connections\"\n    typed_config:\n      \"@type\": type.googleapis.com/envoy.extensions.resource_monitors.downstream_connections.v3.DownstreamConnectionsConfig\n      max_active_downstream_connections: 1000\n```\n\n----------------------------------------\n\nTITLE: Retrieving Downstream Remote Address in Envoy Lua\nDESCRIPTION: Calls the `downstreamRemoteAddress()` method on the `streamInfo` object. It returns a string representing the downstream remote address, which might differ from the direct address based on the `xff_num_trusted_hops` configuration.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/lua_filter.rst#2025-04-23_snippet_35\n\nLANGUAGE: lua\nCODE:\n```\nstreamInfo:downstreamRemoteAddress()\n```\n\n----------------------------------------\n\nTITLE: Extended Golang HTTP TCP Bridge Configuration\nDESCRIPTION: YAML configuration showing how to specify custom plugin configuration\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/tcp_bridge/golang.rst#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ntyped_config:\n  \"@type\": type.googleapis.com/envoy.extensions.upstreams.http.tcp.golang.v3alpha.Config\n  library_id: \"my_bridge\"\n  library_path: \"<path-to>/my_bridge.so\"\n  plugin_name: \"example\"\n  plugin_config:\n    \"@type\": type.googleapis.com/xds.type.v3.TypedStruct\n    value:\n      foo: bar\n```\n\n----------------------------------------\n\nTITLE: QUIC Statistics Configuration\nDESCRIPTION: Documents QUIC-specific statistics available under listener.<address>.quic_stats.* path when using QUIC stats debug visitor\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/listeners/stats.rst#2025-04-23_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\n.. csv-table::\n   :header: Name, Type, Description\n   :widths: 1, 1, 2\n\n   cx_tx_packets_total, Counter, Total packets transmitted\n   cx_tx_packets_retransmitted_total, Counter, Total packets retransmitted\n   cx_tx_amplification_throttling_total, Counter, Total number of packets throttled during the server handshake response. This often indicates that the TLS certificate chain is too long to be transmitted without an additional network round trip.\n   cx_rx_packets_total, Counter, Total number of packets received\n   cx_path_degrading_total, Counter, Number of times that network path degradation was detected\n   cx_forward_progress_after_path_degrading_total, Counter, Number of times that forward progress was made after the path degraded\n   cx_rtt_us, Histogram, Smoothed round trip time estimate in microseconds\n   cx_tx_estimated_bandwidth, Histogram, Estimated connection bandwith in bytes per second\n   cx_tx_percent_retransmitted_packets, Histogram, Percent of packets on a connection which were retransmistted\n   cx_tx_mtu, Histogram, The maximum packet size that will be sent for a connection\n   cx_rx_mtu, Histogram, The size of the largest packet received from the peer\n```\n\n----------------------------------------\n\nTITLE: Setting Upstream Host Override in Envoy Lua HTTP Filter (Lua)\nDESCRIPTION: Shows how to programmatically override the upstream host for a request from Lua script using the handle. Requires a valid IP address for host; strict flag determines fallback behavior if no route is possible. Useful for custom routing or direct targeting of specific Envoy cluster backends.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/lua_filter.rst#2025-04-23_snippet_22\n\nLANGUAGE: lua\nCODE:\n```\nhandle:setUpstreamOverrideHost(host, strict)\n```\n\n----------------------------------------\n\nTITLE: Example Requests and Responses for API Key Auth in Envoy Proxy\nDESCRIPTION: This code block illustrates various HTTP requests and their expected outcomes when using the API key authentication filter. It covers scenarios like valid keys, invalid keys, and route-specific behaviors.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/api_key_auth_filter.rst#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n# The request will be allowed because the API key is valid and the client is allowed.\nGET /admin?api_key=another_key HTTP/1.1\nhost: example.com\n\n# The request will be denied with 403 status code because the API key is valid but the client is\n# not allowed.\nGET /admin?api_key=one_key HTTP/1.1\nhost: example.com\n\n# The request will be denied with 401 status code because the API key is invalid.\nGET /admin?api_key=invalid_key HTTP/1.1\nhost: example.com\n\n# The request will be allowed because the API key is valid and no client validation is configured.\nGET /special HTTP/1.1\nhost: example.com\nX-Special-Key: \"special_key\"\n\n# The request will be allowed because the filter is disabled for specific route.\nGET /static HTTP/1.1\nhost: example.com\n\n# The request will be allowed because the API key is valid and no client validation is configured.\nGET / HTTP/1.1\nhost: example.com\nAuthorization: \"Bearer one_key\"\n```\n\n----------------------------------------\n\nTITLE: Responding to Envoy EDS Request (YAML)\nDESCRIPTION: Example gRPC DiscoveryResponse payload in YAML format for an EDS request. It provides the endpoint (127.0.0.1:1234) for the `some_service` cluster, identified by its `cluster_name`. The `@type` indicates it's a `ClusterLoadAssignment`.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/overview/examples.rst#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nversion_info: \"0\"\nresources:\n- \"@type\": type.googleapis.com/envoy.config.endpoint.v3.ClusterLoadAssignment\n  cluster_name: some_service\n  endpoints:\n  - lb_endpoints:\n    - endpoint:\n        address:\n          socket_address:\n            address: 127.0.0.1\n            port_value: 1234\n```\n\n----------------------------------------\n\nTITLE: Configuring gRPC Authorization Server Filter in Envoy\nDESCRIPTION: YAML configuration for setting up an external authorization filter using a gRPC server. Shows basic filter configuration including transport API version and failure handling.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/ext_authz_filter.rst#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nhttp:\n  name: envoy.filters.http.ext_authz\n  typed_config:\n    \"@type\": type.googleapis.com/envoy.extensions.filters.http.ext_authz.v3.ExtAuthz\n    transport_api_version: V3\n    grpc_service:\n      envoy_grpc:\n        cluster_name: ext-authz\n      timeout: 0.25s\n    failure_mode_allow: false\n```\n\n----------------------------------------\n\nTITLE: Running Envoy with mounted logs directory (Console)\nDESCRIPTION: Commands to create a logs directory, set permissions, and run Envoy container with the directory mounted and custom UID.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/start/docker.rst#2025-04-23_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ mkdir logs\n$ chown 777 logs\n$ docker run -d --name envoy -v $(pwd)/logs:/var/log -e ENVOY_UID=777 envoyproxy/|envoy_docker_image|\n```\n\n----------------------------------------\n\nTITLE: Listener Base Statistics Structure\nDESCRIPTION: Documents base statistics available for every listener under listener.<address>.* or listener.<stat_prefix>.* path\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/listeners/stats.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. csv-table::\n   :header: Name, Type, Description\n   :widths: 1, 1, 2\n\n   downstream_cx_total, Counter, Total connections\n   downstream_cx_destroy, Counter, Total destroyed connections\n   downstream_cx_active, Gauge, Total active connections\n   downstream_cx_length_ms, Histogram, Connection length milliseconds\n   downstream_cx_transport_socket_connect_timeout, Counter, Total connections that timed out during transport socket connection negotiation\n   downstream_cx_overflow, Counter, Total connections rejected due to enforcement of listener connection limit\n   downstream_cx_overload_reject, Counter, Total connections rejected due to configured overload actions\n   downstream_global_cx_overflow, Counter, Total connections rejected due to enforcement of global connection limit\n   connections_accepted_per_socket_event, Histogram, Number of connections accepted per listener socket event\n   downstream_pre_cx_timeout, Counter, Sockets that timed out during listener filter processing\n   downstream_pre_cx_active, Gauge, Sockets currently undergoing listener filter processing\n   extension_config_missing, Counter, Total connections closed due to missing listener filter extension configuration\n   network_extension_config_missing, Counter, Total connections closed due to missing network filter extension configuration\n   no_filter_chain_match, Counter, Total connections that didn't match any filter chain\n   downstream_listener_filter_remote_close, Counter, Total connections closed by remote when peek data for listener filters\n   downstream_listener_filter_error, Counter, Total numbers of read errors when peeking data for listener filters\n```\n\n----------------------------------------\n\nTITLE: Configuring Original Destination Service Discovery in Envoy YAML\nDESCRIPTION: Original destination cluster is used when incoming connections are redirected to Envoy. Requests are forwarded to upstream hosts as addressed by the redirection metadata.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/intro/arch_overview/upstream/service_discovery.rst#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nclusters:\n  - name: original_dst_cluster\n    connect_timeout: 0.25s\n    type: ORIGINAL_DST\n    lb_policy: CLUSTER_PROVIDED\n```\n\n----------------------------------------\n\nTITLE: Configuring BPF Socket Options for HTTP/3 in Linux\nDESCRIPTION: Example of configuring socket options for HTTP/3 in Linux to address UDP buffer limits. This is needed when the downstream_rx_datagram_dropped metric shows packet drops due to insufficient kernel receive buffer size.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/intro/arch_overview/http/http3.rst#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsocket_options:\n  - level: SOL_SOCKET\n    name: SO_RCVBUF\n    int_value: <buffer_size>\n    state: PREBIND\n```\n\n----------------------------------------\n\nTITLE: Running Config Load Check Tool on Envoy Configurations\nDESCRIPTION: Command to run the config load check tool on a directory of Envoy configuration files. The tool recursively checks all JSON files in the specified path for validity and schema conformance.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/operations/tools/config_load_check_tool.rst#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbazel-bin/test/tools/config_load_check/config_load_check_tool PATH\n```\n\n----------------------------------------\n\nTITLE: Setting GODEBUG Environment Variable for Envoy Golang Cluster Specifier\nDESCRIPTION: Specifies the required environment variable setting to prevent Envoy from crashing when using the Golang cluster specifier. This disables the cgo pointer check.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/cluster_specifier/golang.rst#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nGODEBUG=cgocheck=0\n```\n\n----------------------------------------\n\nTITLE: Retrieving Peer Certificate Subject in Envoy Lua\nDESCRIPTION: Calls the `subjectPeerCertificate()` method on the `downstreamSslConnection` object. It returns the subject field of the peer certificate formatted according to RFC 2253. Returns an empty string if no peer certificate or subject exists.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/lua_filter.rst#2025-04-23_snippet_51\n\nLANGUAGE: lua\nCODE:\n```\ndownstreamSslConnection:subjectPeerCertificate()\n```\n\n----------------------------------------\n\nTITLE: Build Release iOS Static Framework for Multiple Architectures - Bash\nDESCRIPTION: Builds the Envoy Mobile iOS framework for release, targeting multiple CPU architectures via --ios_multi_cpus and enabling --config=release-ios. Produces a deployable framework compatible with all listed architectures. Requires Bazel, Xcode, and iOS build prerequisites.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/mobile/docs/root/start/building/building.rst#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n./bazelw build ios_dist --config=release-ios --ios_multi_cpus=i386,x86_64,armv7,arm64\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis DNS Lookup Settings in YAML\nDESCRIPTION: Configuration example showing how to enable DNS lookups for Redis MOVED/ASK responses, including cache settings and timeout configurations.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/listeners/network_filters/redis_proxy_filter.rst#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ntyped_config:\n  \"@type\": type.googleapis.com/envoy.extensions.filters.network.redis_proxy.v3.RedisProxy\n  stat_prefix: redis_stats\n  prefix_routes:\n    catch_all_route:\n      cluster: cluster_0\n  settings:\n    op_timeout: 5\n    enable_redirection: true\n    dns_cache_config:\n      name: dns_cache_for_redis\n      dns_lookup_family: V4_ONLY\n      max_hosts: 100\n```\n\n----------------------------------------\n\nTITLE: Configuring an Envoy Upstream Cluster with an Internal Address in YAML\nDESCRIPTION: This YAML snippet configures an Envoy upstream cluster named 'cluster_0'. It defines an endpoint that uses an `envoy_internal_address` instead of a standard IP address and port. The `server_listener_name` field within `envoy_internal_address` specifies the name ('internal_listener') of the target internal listener defined elsewhere in the configuration, enabling traffic routing to that listener.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/other_features/internal_listener.rst#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n.. validated-code-block:: yaml\n  :type-name: envoy.config.cluster.v3.Cluster\n\n  name: cluster_0\n  load_assignment:\n    cluster_name: cluster_0\n    endpoints:\n    - lb_endpoints:\n      - endpoint:\n          address:\n            envoy_internal_address:\n              server_listener_name: internal_listener\n```\n\n----------------------------------------\n\nTITLE: Configuring Tap Session - HTTP POST\nDESCRIPTION: Endpoint for configuring active tap sessions. Requires valid tap extension configuration with admin configuration enabled.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/operations/admin.rst#2025-04-23_snippet_14\n\nLANGUAGE: http\nCODE:\n```\nPOST /tap\n```\n\n----------------------------------------\n\nTITLE: Setting GitHub Token for API Rate Limit Avoidance\nDESCRIPTION: Examples of how to set a GitHub token to avoid API rate limiting when generating the SOURCE_VERSION file.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/bazel/README.md#2025-04-23_snippet_4\n\nLANGUAGE: console\nCODE:\n```\nGITHUB_TOKEN=<GITHUB_TOKEN> python3 tools/github/write_current_source_version.py\nMY_TOKEN=<GITHUB_TOKEN> python3 tools/github/write_current_source_version.py --github_api_token_env_name=MY_TOKEN\n```\n\n----------------------------------------\n\nTITLE: Resuming FilterHeadersStatus::StopIteration in HTTP Filters\nDESCRIPTION: When a filter returns FilterHeadersStatus::StopIteration during header encoding/decoding, processing can be resumed either by returning FilterDataStatus::Continue from encodeData()/decodeData() or by explicitly calling continueEncoding()/continueDecoding().\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/faq/extensions/contract.rst#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nFilterHeadersStatus::StopIteration\n```\n\n----------------------------------------\n\nTITLE: Querying Detailed Histogram Stats in JSON Format\nDESCRIPTION: Example JSON output from the /stats endpoint with detailed histogram buckets. Shows histogram data including percentiles and bucket counts.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/operations/admin.rst#2025-04-23_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"stats\": [\n    {\n      \"histograms\": {\n        \"supported_percentiles\": [0, 25, 50, 75, 90, 95, 99, 99.5, 99.9, 100],\n        \"details\": [\n          {\n            \"name\": \"http.admin.downstream_rq_time\",\n            \"percentiles\": [\n              { \"interval\": null, \"cumulative\": 1 },\n              { \"interval\": null, \"cumulative\": 1.0351851851851852 },\n              { \"interval\": null, \"cumulative\": 1.0703703703703704 },\n              { \"interval\": null, \"cumulative\": 2.0136363636363637 },\n              { \"interval\": null, \"cumulative\": 2.0654545454545454 },\n              { \"interval\": null, \"cumulative\": 2.0827272727272725 },\n              { \"interval\": null, \"cumulative\": 2.0965454545454545 },\n              { \"interval\": null, \"cumulative\": 2.098272727272727 },\n              { \"interval\": null, \"cumulative\": 2.0996545454545457 },\n              { \"interval\": null, \"cumulative\": 2.1 }\n            ],\n            \"totals\": [\n              { \"lower_bound\": 1, \"width\": 0.25, \"count\": 25 },\n              { \"lower_bound\": 2, \"width\": 0.25, \"count\": 9 }\n            ],\n            \"intervals\": [\n              { \"lower_bound\": 1, \"width\": 0.25, \"count\": 2 },\n              { \"lower_bound\": 2, \"width\": 0.25, \"count\": 3 }\n            ]\n          }\n        ]\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Lua Script for Specific Routes in YAML\nDESCRIPTION: An example of overriding the default Lua script for specific routes using LuaPerRoute configuration in Envoy's YAML configuration.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/lua_filter.rst#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nroutes:\n- match:\n    prefix: \"/api\"\n  route:\n    cluster: api_cluster\n  typed_per_filter_config:\n    envoy.filters.http.lua:\n      \"@type\": type.googleapis.com/envoy.extensions.filters.http.lua.v3.LuaPerRoute\n      name: hello.lua\n```\n\n----------------------------------------\n\nTITLE: Configuring CONNECT-UDP Termination in Envoy (YAML)\nDESCRIPTION: This configuration example shows how to set up Envoy to terminate CONNECT-UDP requests and send UDP payloads to the target. It emphasizes the connect_config setting for request termination.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/intro/arch_overview/http/upgrades.rst#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nhttp_filters:\n- name: envoy.filters.http.router\n  typed_config:\n    \"@type\": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router\nstat_prefix: ingress_http\nhttp2_protocol_options:\n  allow_connect: true\nupgrade_configs:\n- upgrade_type: CONNECT-UDP\nroute_config:\n  name: local_route\n  virtual_hosts:\n  - name: local_service\n    domains: [\"*\"]\n    routes:\n    - match:\n        connect_matcher:\n          {}  # An empty connect matcher matches all CONNECT requests\n      route:\n        cluster: cluster_0\n        upgrade_configs:\n          - upgrade_type: CONNECT-UDP\n            connect_config:\n              allow_post: true\n    - match:\n        prefix: \"/\"\n      route:\n        cluster: cluster_0\n    - match:\n        prefix: \"/\"\n        headers:\n        - name: \":method\"\n          string_match:\n            exact: \"CONNECT\"\n      route:\n        cluster: cluster_0\n```\n\n----------------------------------------\n\nTITLE: Retrieving URL-Encoded PEM Encoded Peer Certificate Chain in Envoy Lua\nDESCRIPTION: Calls the `urlEncodedPemEncodedPeerCertificateChain()` method on the `downstreamSslConnection` object. It returns the URL-encoded, PEM-encoded representation of the entire peer certificate chain (including the leaf) as a string. Returns an empty string if no peer certificate exists or encoding fails.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/lua_filter.rst#2025-04-23_snippet_56\n\nLANGUAGE: lua\nCODE:\n```\ndownstreamSslConnection:urlEncodedPemEncodedPeerCertificateChain()\n```\n\n----------------------------------------\n\nTITLE: Starting gRPC Stream in Kotlin\nDESCRIPTION: Example of starting and managing a gRPC stream in Kotlin, including client setup, header configuration, and stream initialization.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/mobile/docs/root/api/grpc.rst#2025-04-23_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nval streamClient = AndroidStreamClientBuilder()\n    ...\n    .build()\n  val grpcClient = GRPCClient(streamClient)\n\n  val requestHeaders = GRPCRequestHeadersBuilder()\n    ...\n    .build()\n  val prototype = grpcClient\n    .newGRPCStreamPrototype()\n    ...\n  val stream = prototype\n    .start(Executors.newSingleThreadExecutor())\n    .sendHeaders(...)\n    .sendMessage(...)\n\n  ...\n  stream.close(...)\n```\n\n----------------------------------------\n\nTITLE: Resulting Merged Metadata Structure in YAML\nDESCRIPTION: Example showing the final metadata structure after the filter applies the update rules\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/set_metadata_filter.rst#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nmyint: 2\nmylist: [\"a\",\"b\",\"c\"]\nmykey: 1\nmytags:\n  tag0: 1\n  tag1: 1\n```\n\n----------------------------------------\n\nTITLE: Configuring Golang HTTP Filter with Custom Config in Envoy YAML\nDESCRIPTION: This snippet shows how to configure a Golang HTTP filter with custom configuration in Envoy's YAML. It includes a config field that can be used to pass custom configuration to the Go plugin.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/golang_filter.rst#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n- name: envoy.filters.http.golang\n  typed_config:\n    \"@type\": type.googleapis.com/envoy.extensions.filters.http.golang.v3alpha.Config\n    library_id: example\n    library_path: \"/etc/envoy/my_plugin.so\"\n    plugin_name: example\n    config:\n      \"@type\": type.googleapis.com/xds.type.v3.TypedStruct\n      value:\n        key: value\n```\n\n----------------------------------------\n\nTITLE: XDS Configuration Setup\nDESCRIPTION: Configure xDS for dynamic configuration fetching from management server, including RTDS and CDS setup.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/mobile/docs/root/api/starting_envoy.rst#2025-04-23_snippet_12\n\nLANGUAGE: kotlin\nCODE:\n```\nval xdsBuilder = new XdsBuilder(address = \"my_xds_server.com\", port = 443)\n                       .addRuntimeDiscoveryService(\"my_rtds_resource\")\n                       .addClusterDiscoveryService()\nbuilder.setXds(xdsBuilder)\n```\n\nLANGUAGE: swift\nCODE:\n```\nvar xdsBuilder = XdsBuilder(address: \"my_xds_server.com\", port: 443)\n                       .addRuntimeDiscoveryService(\"my_rtds_resource\")\n                       .addClusterDiscoveryService()\nbuilder.setXds(xdsBuilder)\n```\n\nLANGUAGE: cpp\nCODE:\n```\nXdsBuilder xds_builder(/*address=*/\"my_xds_server.com\", /*port=*/443);\nxds_builder.addRuntimeDiscoveryService(\"my_rtds_resource\")\n    .addClusterDiscoveryService();\nbuilder.setXds(std::move(xds_builder));\n```\n\n----------------------------------------\n\nTITLE: Initial Metadata Structure Example in YAML\nDESCRIPTION: Example showing the initial structure of metadata namespace before applying the filter\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/set_metadata_filter.rst#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nmyint: 1\nmylist: [\"a\"]\nmykey: [\"val\"]\nmytags:\n  tag0: 1\n```\n\n----------------------------------------\n\nTITLE: Configuring File System Buffer Filter in Envoy Proxy (YAML)\nDESCRIPTION: Configuration snippet for the File System Buffer filter in Envoy Proxy. It specifies the filter type URL for use in the Envoy configuration.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/file_system_buffer_filter.rst#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntype.googleapis.com/envoy.extensions.filters.http.file_system_buffer.v3.FileSystemBufferFilterConfig\n```\n\n----------------------------------------\n\nTITLE: Example Fine-Grain Log Output Format\nDESCRIPTION: Shows an example log message generated by the Fine-Grain Logger. The format includes timestamp, thread ID, log level (error), the source file path and line number (`test/common/common/log_macros_test.cc:149`), and the log message content.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/source/docs/fine_grain_log.md#2025-04-23_snippet_1\n\nLANGUAGE: log\nCODE:\n```\n[2020-07-29 22:27:02.594][15][error][test/common/common/log_macros_test.cc:149] FineGrainLog Error! Here\\'s the second message!\n```\n\n----------------------------------------\n\nTITLE: Defining an Envoy Internal Listener in YAML\nDESCRIPTION: This YAML configuration snippet demonstrates how to define a basic internal listener in Envoy. The `name` field assigns an identifier ('internal_listener'), and the presence of the empty `internal_listener: {}` object designates it as an internal listener, capable of accepting user-space connections within Envoy. An empty `filter_chains` is included as a placeholder.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/other_features/internal_listener.rst#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n.. validated-code-block:: yaml\n  :type-name: envoy.config.listener.v3.Listener\n\n  name: internal_listener\n  internal_listener: {}\n  filter_chains:\n  - filters: []\n```\n\n----------------------------------------\n\nTITLE: Configuring Kafka Broker Filter With Traffic Mutation\nDESCRIPTION: YAML configuration for setting up the Kafka broker filter with message mutation for a 2-node cluster proxy setup.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/listeners/network_filters/kafka_broker_filter.rst#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nlisteners:\n- address:\n    socket_address:\n      address: envoy.example.org\n      port_value: 19092\n  filter_chains:\n  - filters:\n    - name: envoy.filters.network.kafka_broker\n      typed_config:\n        \"@type\": type.googleapis.com/envoy.extensions.filters.network.kafka_broker.v3.KafkaBroker\n        stat_prefix: exampleprefix1\n        id_based_broker_address_rewrite_spec: &kafka_rewrite_spec\n          rules:\n          - id: 1\n            host: envoy.example.org\n            port: 19092\n          - id: 2\n            host: envoy.example.org\n            port: 19093\n```\n\n----------------------------------------\n\nTITLE: Retrieving Response Header Transformations with Envoy RouteEntry (C++)\nDESCRIPTION: This C++ snippet demonstrates how to use Envoy filter callbacks to obtain and process response header transformations on the current request route. It retrieves the transformations by calling responseHeaderTransforms with the current streamInfo from the routeEntry, and then sends the serialized results as a local reply to the client. Dependencies include the Envoy HTTP filter API (with appropriate headers and symbols such as Http::FilterHeadersStatus, Http::RequestHeaderMap, and the decoder_callbacks_ member variable), and the MySerializedTransforms function for formatting. The key input parameter is the headers map for the request and the filter's internal decoder_callbacks_. Outputs involve sending a local reply with transformed data. Limitation: Users should avoid using these APIs if further route modifications may happen later in the filter chain.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/source/docs/header_transforms.md#2025-04-23_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nHttp::FilterHeadersStatus MyFilter::decodeHeaders(\n    Http::RequestHeaderMap& headers, bool) {\n  auto transforms =\n      decoder_callbacks_->route()->routeEntry()->responseHeaderTransforms(\n          decoder_callbacks_->streamInfo());\n\n  // Send the response headers back to the client; they will process them later.\n  decoder_callbacks_->sendLocalReply(\n      Envoy::Http::Code::OK, MySerializedTransforms(transforms), nullptr, Envoy::Grpc::Status::Ok,\n      \"local_reply\");\n}\n\n```\n\n----------------------------------------\n\nTITLE: Lua Script for Logging Request and Response Information\nDESCRIPTION: A Lua script example that logs information about the request and response, including authority, method, path, and status code.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/lua_filter.rst#2025-04-23_snippet_8\n\nLANGUAGE: lua\nCODE:\n```\nfunction envoy_on_request(request_handle)\n  request_handle:logInfo(\"Authority: \"..request_handle:headers():get(\":authority\"))\n  request_handle:logInfo(\"Method: \"..request_handle:headers():get(\":method\"))\n  request_handle:logInfo(\"Path: \"..request_handle:headers():get(\":path\"))\nend\n\nfunction envoy_on_response(response_handle)\n  response_handle:logInfo(\"Status: \"..response_handle:headers():get(\":status\"))\nend\n```\n\n----------------------------------------\n\nTITLE: X-Forwarded-Client-Cert Header Example with Multiple URIs\nDESCRIPTION: Example of XFCC header format for two client certificates with URI type Subject Alternative Names.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_conn_man/headers.rst#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nx-forwarded-client-cert: By=http://frontend.lyft.com;Hash=468ed33be74eee6556d90c0149c1309e9ba61d6425303443c0748a02dd8de688;URI=http://testclient.lyft.com,By=http://backend.lyft.com;Hash=9ba61d6425303443c0748a02dd8de688468ed33be74eee6556d90c0149c1309e;URI=http://frontend.lyft.com\n```\n\n----------------------------------------\n\nTITLE: Unit Test for Python Tool Using unittest.mock - Python\nDESCRIPTION: Defines a pytest-compatible unit test for `mytool.main`, mocking out external dependencies (`requests.get`, `yaml.dump`, `sys.stdout.write`) using `unittest.mock.patch`. Test verifies that correct API calls and output writing occur for a sample package name. Dependencies: pytest, unittest.mock, instrumented imports. All method calls are checked for expected call arguments, ensuring full functional coverage.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/tools/README.md#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom unittest.mock import patch\n\nfrom tools.sometools import mytool\n\n\ndef test_mytool_main():\n    with patch(\"tools.sometools.mytool.requests.get\") as m_get:\n        with patch(\"tools.sometools.mytool.yaml.dump\") as m_yaml:\n            with patch(\"tools.sometools.mytool.sys.stdout.write\") as m_stdout:\n                assert mytool.main(\"PACKAGENAME\") == 0\n    assert (\n        list(m_get.call_args)\n        == [('https://pypi.python.org/pypi/PACKAGENAME/json',), {}])\n    assert (\n        list(m_get.return_value.json.call_args)\n        == [(), {}])\n    assert (\n        list(m_yaml.call_args)\n        == [(m_get.return_value.json.return_value,), {}])\n    assert (\n        list(m_stdout.call_args)\n        == [(m_yaml.return_value,), {}])\n```\n\n----------------------------------------\n\nTITLE: Matching Against Destination Port and Source IP in Envoy Listener Configuration\nDESCRIPTION: This example uses the original_dst listener filter to recover the original destination port. The matcher selects between 'http', 'internal', and 'tls' filter chains based on destination port and source IP conditions. If no match, the connection is rejected.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/intro/arch_overview/advanced/matching/matching_listener.rst#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nfilter_chains:\n- name: http\n- name: internal\n- name: tls\n  transport_socket:\n    name: envoy.transport_sockets.tls\n    typed_config:\n      \"@type\": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.DownstreamTlsContext\n      common_tls_context:\n        tls_certificates:\n        - certificate_chain: {filename: \"certs/servercert.pem\"}\n          private_key: {filename: \"certs/serverkey.pem\"}\nlistener_filters:\n- name: \"envoy.filters.listener.original_dst\"\n  typed_config:\n    \"@type\": type.googleapis.com/envoy.extensions.filters.listener.original_dst.v3.OriginalDst\nmatcher:\n  matcher_tree:\n    input:\n      name: envoy.matching.inputs.destination_port\n      typed_config:\n        \"@type\": type.googleapis.com/envoy.extensions.matching.common_inputs.network.v3.DestinationPortInput\n    exact_match_map:\n      map:\n        \"80\":\n          action:\n            name: http\n        \"443\":\n          matcher:\n            matcher_tree:\n              input:\n                name: envoy.matching.inputs.source_ip\n                typed_config:\n                  \"@type\": type.googleapis.com/envoy.extensions.matching.common_inputs.network.v3.SourceIPInput\n              custom_match:\n                name: envoy.matching.matchers.cidr\n                typed_config:\n                  \"@type\": type.googleapis.com/xds.type.matcher.v3.CidrMatcher\n                  address_matcher:\n                    - range_matcher:\n                        ranges:\n                          - address_prefix: 192.0.0.0\n                            prefix_len: 2\n                          - address_prefix: 10.0.0.0\n                            prefix_len: 24\n                  on_match:\n                    action:\n                      name: internal\n            on_no_match:\n              action:\n                name: tls\n```\n\n----------------------------------------\n\nTITLE: Querying Filtered Envoy Stats via Admin API\nDESCRIPTION: Command-line example to retrieve filtered statistics from Envoy's stats admin endpoint, focusing on HTTP ingress metrics.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/start/quick-start/admin.rst#2025-04-23_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ curl -s http://localhost:9901/stats?filter='^http\\.ingress_http'\n```\n\n----------------------------------------\n\nTITLE: Using HeaderValueOf Matcher for Header Validation in C++\nDESCRIPTION: Demonstrates using the `HeaderValueOf` custom Google Mock matcher in Envoy tests. It verifies that a `HeaderMap` argument contains exactly one header with the specified key (e.g., `Headers::get().Server` or `Headers::get().AcceptEncoding`) whose value satisfies the given expectation. The expectation can be an exact string match or another matcher, like `testing::HasSubstr`.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/test/README.md#2025-04-23_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nEXPECT_THAT(response->headers(), HeaderValueOf(Headers::get().Server, \"envoy\"));\n```\n\nLANGUAGE: cpp\nCODE:\n```\nusing testing::HasSubstr;\nEXPECT_THAT(request->headers(),\n            HeaderValueOf(Headers::get().AcceptEncoding, HasSubstr(\"gzip\")));\n```\n\n----------------------------------------\n\nTITLE: Running Envoy VRP Docker Image\nDESCRIPTION: Basic command to run the Envoy Google VRP Docker image, exposing the edge Envoy on local port 10000 with memory limits and environment variables set.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/intro/arch_overview/security/google_vrp.rst#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -m 3g -p 10000:10000 --name envoy-google-vrp \\\n  -e ENVOY_EDGE_EXTRA_ARGS=\"\" \\\n  -e ENVOY_ORIGIN_EXTRA_ARGS=\"\" \\\n  envoyproxy/envoy-google-vrp-dev:latest\n```\n\n----------------------------------------\n\nTITLE: Example Envoy Log Line Format Highlighting ID\nDESCRIPTION: Presents an example Envoy log line, specifically emphasizing the 'pool' log ID within the standard log format. The format includes timestamp, thread ID, log level, log ID, source file, connection ID, and message.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/source/docs/logging.md#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n[2021-09-22 18:39:01.268][28][debug][pool] [source/common/conn_pool/conn_pool_base.cc:293] [C18299946955195659044] attaching to next stream\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Connection Manager with stat_prefix in YAML\nDESCRIPTION: YAML configuration for setting up an Envoy listener with an HTTP connection manager. It includes the stat_prefix setting used for filtering statistics.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/start/quick-start/admin.rst#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nstatic_resources:\n  listeners:\n  - name: listener_0\n    address:\n      socket_address:\n        address: 0.0.0.0\n        port_value: 10000\n    filter_chains:\n    - filters:\n      - name: envoy.filters.network.http_connection_manager\n        typed_config:\n          \"@type\": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager\n          stat_prefix: ingress_http\n          http_filters:\n          - name: envoy.filters.http.router\n            typed_config:\n              \"@type\": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router\n          route_config:\n            name: local_route\n            virtual_hosts:\n            - name: local_service\n              domains: [\"*\"]\n              routes:\n              - match:\n                  prefix: \"/\"\n                route:\n                  host_rewrite_literal: www.envoyproxy.io\n                  cluster: service_envoyproxy_io\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Filter Chain Order in Envoy YAML Configuration\nDESCRIPTION: Example showing how to configure HTTP filters in a specific order. Filter ordering matters as decoder filters are invoked in configuration order, while encoder filters are invoked in reverse order. The last filter should be a terminal filter (typically the router).\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/intro/arch_overview/http/http_filters.rst#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nhttp_filters:\n  - A\n  - B\n  # The last configured filter has to be a terminal filter, as determined by the\n  # NamedHttpFilterConfigFactory::isTerminalFilterByProto(config, context) function. This is most likely the router\n  # filter.\n  - C\n```\n\n----------------------------------------\n\nTITLE: Stream Info Operations in Lua\nDESCRIPTION: Shows various stream info operations including getting protocol, route name, and address information.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/lua_filter.rst#2025-04-23_snippet_33\n\nLANGUAGE: lua\nCODE:\n```\nstreamInfo:protocol()\n```\n\nLANGUAGE: lua\nCODE:\n```\nfunction envoy_on_request(request_handle)\n  local route_name = request_handle:streamInfo():routeName()\n  request_handle:logInfo(\"Matched route: \" .. route_name)\nend\n```\n\nLANGUAGE: lua\nCODE:\n```\nfunction envoy_on_request(request_handle)\n  local virtual_cluster = request_handle:streamInfo():virtualClusterName()\n  request_handle:logInfo(\"Matched virtual cluster: \" .. virtual_cluster)\nend\n```\n\nLANGUAGE: lua\nCODE:\n```\nstreamInfo:downstreamDirectLocalAddress()\n```\n\nLANGUAGE: lua\nCODE:\n```\nstreamInfo:downstreamLocalAddress()\n```\n\nLANGUAGE: lua\nCODE:\n```\nstreamInfo:downstreamDirectRemoteAddress()\n```\n\n----------------------------------------\n\nTITLE: Initializing HTTP Stream in Swift\nDESCRIPTION: Creates and interacts with an HTTP stream using Swift. Demonstrates request header construction, response handling, and stream management.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/mobile/docs/root/api/http.rst#2025-04-23_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nlet headers = RequestHeadersBuilder(method: .post, scheme: \"https\", authority: \"api.envoyproxy.io\", path: \"/foo\")\n  .build()\n\nlet streamClient = try StreamClientBuilder().build()\nlet stream = streamClient\n  .newStreamPrototype()\n  .setOnResponseHeaders { headers, endStream in\n    print(\"[\\(headers.httpStatus)] Headers received: \\(headers), end stream: \\(endStream)\")\n  }\n  .setOnResponseData { data, endStream in\n    print(\"Received data, end stream: \\(endStream)\")\n  }\n  .setOnResponseTrailers { trailers in\n    print(\"Trailers received: \\(trailers)\")\n  }\n  .setOnError { ... }\n  .setOnCancel { ... }\n  .start(queue: .main)\n  .sendHeaders()\n  .sendData(...)\n\n...\nstream.close(...)\n```\n\n----------------------------------------\n\nTITLE: Streaming Proto Message Extraction Output Format\nDESCRIPTION: Example JSON structure showing the dynamic metadata output format for streaming gRPC requests and responses. Demonstrates both 'first' and 'last' message storage for streaming scenarios.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/proto_message_extraction_filter.rst#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"requests\":{\n     \"first\":{\n        \"foo\": \"val_foo1\"\n     }\n     \"last\":{\n        \"foo\": \"val_foo3\"\n     }\n  },\n  \"responses\":{\n     \"first\":{\n        \"baz\": \"val_baz1\"\n     }\n     \"last\":{\n        \"baz\": \"val_foo3\"\n     }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Upstream Filter Factory Alias in Envoy (C++)\nDESCRIPTION: Defines a C++ type alias `UpstreamMyFilterFactory` pointing to the original filter factory class (`MyFilterFactory`). This alias is subsequently used to register the factory specifically for the upstream filter chain context as part of converting a downstream filter to a dual filter. This code should be added to the filter's configuration header file (e.g., `config.h`).\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/source/docs/upstream_filters.md#2025-04-23_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nusing UpstreamMyFilterFactory = MyFilterFactory;\n```\n\n----------------------------------------\n\nTITLE: Running Schema Validator Tool\nDESCRIPTION: Command to run the schema validator tool with required schema type and configuration path parameters.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/operations/tools/schema_validator_check_tool.rst#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbazel-bin/test/tools/schema_validator/schema_validator_tool  --schema-type SCHEMA_TYPE  --config-path PATH\n```\n\n----------------------------------------\n\nTITLE: Retrieving Requested Server Name (SNI) in Envoy Lua\nDESCRIPTION: Calls the `requestedServerName()` method on the `streamInfo` object. It returns a string representing the requested server name (e.g., SNI from TLS) for the current request, if available.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/lua_filter.rst#2025-04-23_snippet_38\n\nLANGUAGE: lua\nCODE:\n```\nstreamInfo:requestedServerName()\n```\n\n----------------------------------------\n\nTITLE: Generating Proto Descriptor Set for gRPC-JSON Transcoder in Envoy\nDESCRIPTION: This command generates a protobuf descriptor set for the gRPC service, which is required by Envoy for transcoding. It includes necessary imports and source info.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/grpc_json_transcoder_filter.rst#2025-04-23_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ protoc -I${GOOGLEAPIS_DIR} -I. --include_imports --include_source_info \\\n    --descriptor_set_out=proto.pb test/proto/bookstore.proto\n```\n\n----------------------------------------\n\nTITLE: Configuring Circuit Breakers - Envoy YAML\nDESCRIPTION: This snippet demonstrates how to define circuit breaker thresholds in an Envoy cluster configuration using YAML. It includes key settings such as priority, max_requests, max_pending_requests, and a retry_budget object specifying budget_percent and min_retry_concurrency. The configuration is placed in the cluster_breakers section and can be supplemented or overridden at runtime via Envoy's configuration file. The snippet requires Envoy 3.x+ and is intended for use within the larger context of an Envoy cluster config.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/upstream/cluster_manager/cluster_circuit_breakers.rst#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n  circuit_breakers:\n    thresholds:\n    - priority: \"DEFAULT\"\n      max_requests: 75\n      max_pending_requests: 35\n      retry_budget:\n        budget_percent:\n          value: 25.0\n        min_retry_concurrency: 10\n```\n\n----------------------------------------\n\nTITLE: External DNS Table JSON Configuration\nDESCRIPTION: Example JSON configuration for external DNS table defining virtual domains and their corresponding endpoints.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/listeners/udp_filters/dns_filter.rst#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"virtual_domains\": [\n    {\n      \"name\": \"www.suffix1.com\",\n      \"endpoint\": {\n        \"address_list\": {\n          \"address\": [ \"10.0.0.1\", \"10.0.0.2\" ]\n        }\n      }\n    },\n    {\n      \"name\": \"www.suffix2.com\",\n      \"endpoint\": {\n        \"address_list\": {\n          \"address\": [ \"2001:8a:c1::2800:7\" ]\n        }\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Counter Increment Operations\nDESCRIPTION: Examples of incrementing a counter with default and custom values, with optional custom tags.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/mobile/docs/root/api/stats.rst#2025-04-23_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\n// Increment by 1\ncounter.increment()\n\n// Increment by 5\ncounter.increment(5)\n\n// Increment with tags\ncounter.increment(\n  tags: TagsBuilder().add(\"os\", \"Android\").add(\"app_type\", \"rider\").build(),\n  count: 5\n)\n```\n\nLANGUAGE: swift\nCODE:\n```\n// Increment by 1\ncounter.increment()\n\n// Increment by 5\ncounter.increment(count: 5)\n\n// Increment with tags\ncounter.increment(\n  tags: TagsBuilder().add(name: \"os\", value: \"Android\").add(name: \"app_type\", value: \"rider\").build()\n  count: 5\n)\n```\n\n----------------------------------------\n\nTITLE: Lua Script for Adding Request and Response Body Size Headers\nDESCRIPTION: A Lua script example that adds headers with the request and response body sizes, and removes a specific response header.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/lua_filter.rst#2025-04-23_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nfunction envoy_on_request(request_handle)\n  request_handle:headers():add(\"request_body_size\", request_handle:body():length())\nend\n\nfunction envoy_on_response(response_handle)\n  response_handle:headers():add(\"response_body_size\", response_handle:body():length())\n  response_handle:headers():remove(\"foo\")\nend\n```\n\n----------------------------------------\n\nTITLE: Listener Manager Statistics\nDESCRIPTION: Documents listener manager statistics available under listener_manager.* path for monitoring listener lifecycle events\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/listeners/stats.rst#2025-04-23_snippet_4\n\nLANGUAGE: rst\nCODE:\n```\n.. csv-table::\n   :header: Name, Type, Description\n   :widths: 1, 1, 2\n\n   listener_added, Counter, Total listeners added (either via static config or LDS).\n   listener_modified, Counter, Total listeners modified (via LDS).\n   listener_removed, Counter, Total listeners removed (via LDS).\n   listener_stopped, Counter, Total listeners stopped.\n   listener_create_success, Counter, Total listener objects successfully added to workers.\n   listener_create_failure, Counter, Total failed listener object additions to workers.\n   listener_in_place_updated, Counter, Total listener objects created to execute filter chain update path.\n   total_filter_chains_draining, Gauge, Number of currently draining filter chains.\n   total_listeners_warming, Gauge, Number of currently warming listeners.\n   total_listeners_active, Gauge, Number of currently active listeners.\n   total_listeners_draining, Gauge, Number of currently draining listeners.\n   workers_started, Gauge, A boolean (1 if started and 0 otherwise) that indicates whether listeners have been initialized on workers.\n```\n\n----------------------------------------\n\nTITLE: Server Info Response - JSON Format\nDESCRIPTION: Example JSON response from the /server_info endpoint showing server version, state, command line options, uptime and node information\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/operations/admin.rst#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"version\": \"b050513e840aa939a01f89b07c162f00ab3150eb/1.9.0-dev/Modified/DEBUG\",\n  \"state\": \"LIVE\",\n  \"command_line_options\": {\n    \"base_id\": \"0\",\n    \"concurrency\": 8,\n    \"config_path\": \"config.yaml\",\n    \"config_yaml\": \"\",\n    \"allow_unknown_static_fields\": false,\n    \"admin_address_path\": \"\",\n    \"local_address_ip_version\": \"v4\",\n    \"log_level\": \"info\",\n    \"component_log_level\": \"\",\n    \"log_format\": \"[%Y-%m-%d %T.%e][%t][%l][%n] %v\",\n    \"log_path\": \"\",\n    \"hot_restart_version\": false,\n    \"service_cluster\": \"\",\n    \"service_node\": \"\",\n    \"service_zone\": \"\",\n    \"mode\": \"Serve\",\n    \"disable_hot_restart\": false,\n    \"enable_mutex_tracing\": false,\n    \"restart_epoch\": 0,\n    \"file_flush_interval\": \"10s\",\n    \"drain_time\": \"600s\",\n    \"parent_shutdown_time\": \"900s\",\n    \"cpuset_threads\": false\n  },\n  \"uptime_current_epoch\": \"6s\",\n  \"uptime_all_epochs\": \"6s\",\n  \"node\": {\n    \"id\": \"node1\",\n    \"cluster\": \"cluster1\",\n    \"user_agent_name\": \"envoy\",\n    \"user_agent_build_version\": {\n      \"version\": {\n        \"major_number\": 1,\n        \"minor_number\": 15,\n        \"patch\": 0\n      }\n    },\n    \"metadata\": {},\n    \"extensions\": [],\n    \"client_features\": [],\n    \"listening_addresses\": []\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Subset-Aware Cluster in Envoy (JSON)\nDESCRIPTION: This JSON snippet configures an Envoy cluster with ROUND_ROBIN load balancing, enabling subset selection based on host metadata. It uses the lb_subset_config field to define how endpoints are grouped into subsets and specifies policies for fallback and subset selection. Dependencies include Envoy v3 cluster resources and proper EDS metadata for endpoints. The configuration's default_subset and subset_selectors enable specific workload partitioning, allowing precise routing in later route rules.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/source/docs/subset_load_balancer.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"c1\",\n  \"lb_policy\": \"ROUND_ROBIN\",\n  \"lb_subset_config\": {\n    \"fallback_policy\": \"DEFAULT_SUBSET\",\n    \"default_subset\": {\n      \"stage\": \"prod\",\n      \"version\": \"1.0\",\n      \"type\": \"std\"\n    },\n    \"subset_selectors\": [\n      { \"keys\": [ \"stage\", \"type\" ] },\n      { \"keys\": [ \"stage\", \"version\" ] },\n      { \"keys\": [ \"version\" ] },\n      { \"keys\": [ \"xlarge\", \"version\" ] }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Core Dumps Option in Linux\nDESCRIPTION: Command line flag to enable core dumps in Linux-based systems using prctl with PR_SET_DUMPABLE option. This is particularly useful in container environments with custom capabilities.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/operations/cli.rst#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n--enable-core-dump\n```\n\n----------------------------------------\n\nTITLE: Lua Script for Rewriting Response Body using bodyChunks() API\nDESCRIPTION: A Lua script example that rewrites the upstream response body and changes the content-type header using the bodyChunks() API, which avoids buffering the entire response.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/lua_filter.rst#2025-04-23_snippet_10\n\nLANGUAGE: lua\nCODE:\n```\nfunction envoy_on_response(response_handle)\n  response_handle:headers():replace(\"content-type\", \"text/html\")\n\n  local last\n  for chunk in response_handle:bodyChunks() do\n    chunk:setBytes(\"\")\n    last = chunk\n  end\n\n  last:setBytes(\"<html><b>Not Found<b></html>\")\nend\n```\n\n----------------------------------------\n\nTITLE: OAuth2 Client Credential Injector Configuration\nDESCRIPTION: Example configuration for setting up an OAuth2 client credential injector that obtains and injects OAuth2 tokens into proxied requests.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/credential_injector_filter.rst#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n        - name: envoy.filters.http.credential_injector\n          typed_config:\n            \"@type\": type.googleapis.com/envoy.extensions.filters.http.credential_injector.v3.CredentialInjector\n            credential_injector:\n              \"@type\": type.googleapis.com/envoy.extensions.http.injected_credentials.oauth2.v3.OAuth2\n              overwrite: false\n              oauth2_config:\n                token_endpoint: https://oauth2-server/oauth2/token\n                client_id: client\n                client_secret_context:\n                  credential_name: \"oauth2-client-secret\"\n                  credential_secret_name: \"oauth2-client-secret-name\"\n                scopes:\n                  - scope1\n                  - scope2\n```\n\n----------------------------------------\n\nTITLE: Configuring iptables and IP Rules for Original Source Routing\nDESCRIPTION: Shell commands for setting up iptables rules and IP routing to handle marked traffic for both IPv4 and IPv6. These commands ensure proper routing of packets marked with value 123 through the local interface.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/original_src_filter.rst#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\niptables  -t mangle -I PREROUTING -m mark     --mark 123 -j CONNMARK --save-mark\niptables  -t mangle -I OUTPUT     -m connmark --mark 123 -j CONNMARK --restore-mark\nip6tables -t mangle -I PREROUTING -m mark     --mark 123 -j CONNMARK --save-mark\nip6tables -t mangle -I OUTPUT     -m connmark --mark 123 -j CONNMARK --restore-mark\nip rule add fwmark 123 lookup 100\nip route add local 0.0.0.0/0 dev lo table 100\nip -6 rule add fwmark 123 lookup 100\nip -6 route add local ::/0 dev lo table 100\necho 1 > /proc/sys/net/ipv4/conf/eth0/route_localnet\n```\n\n----------------------------------------\n\nTITLE: Building Envoy with Bazel on Linux/Mac\nDESCRIPTION: Instructions for building Envoy on Linux or Mac using Bazel. This requires GCC/Clang, sufficient RAM, and specific Bazel dependencies. For Clang/LLVM 8 and lower, additional flags may be needed.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/start/building.rst#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n--define tcmalloc=gperftools\n```\n\n----------------------------------------\n\nTITLE: Configuring RBAC Filter Type URL in Envoy\nDESCRIPTION: Specifies the type URL to use when configuring the RBAC filter in Envoy. This URL identifies the protobuf message type for the RBAC configuration.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/rbac_filter.rst#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntype.googleapis.com/envoy.extensions.filters.http.rbac.v3.RBAC\n```\n\n----------------------------------------\n\nTITLE: UDP Listener Statistics\nDESCRIPTION: Documents UDP-specific statistics available under listener.<address>.udp.* path for UDP listeners\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/listeners/stats.rst#2025-04-23_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. csv-table::\n   :header: Name, Type, Description\n   :widths: 1, 1, 2\n\n   downstream_rx_datagram_dropped, Counter, Number of datagrams dropped due to kernel overflow or truncation\n```\n\n----------------------------------------\n\nTITLE: Configuring Retry with Previous Hosts Predicate in Envoy\nDESCRIPTION: Configuration example showing how to set up retries that prefer hosts that haven't been attempted already using the PreviousHostsPredicate, with a maximum of 3 retry attempts.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/intro/arch_overview/http/http_connection_management.rst#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n    retry_on: 5xx\n    num_retries: 3\n    retry_host_predicate:\n    - name: envoy.retry_host_predicates.previous_hosts\n    host_selection_retry_max_attempts: 3\n```\n\n----------------------------------------\n\nTITLE: Formatting HTTP Headers with Duplicate Values in Envoy Lua Filter (Lua)\nDESCRIPTION: Demonstrates how Envoy's Lua filter formats HTTP response headers with repeated keys depending on the return_duplicate_headers option. When false, only the last value per header is retained as a string; when true, all values are preserved as a table. This is relevant for downstream parsing or preserving all header values when needed.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/lua_filter.rst#2025-04-23_snippet_16\n\nLANGUAGE: none\nCODE:\n```\n{\n  { \":status\", \"200\" },\n  { \"foo\", \"bar\" },\n  { \"key\", \"value_0\" },\n  { \"key\", \"value_1\" },\n  { \"key\", \"value_2\" },\n}\n```\n\nLANGUAGE: lua\nCODE:\n```\n{\n  [\":status\"] = \"200\",\n  [\"foo\"] = \"bar\",\n  [\"key\"] = \"value_2\",\n}\n```\n\nLANGUAGE: lua\nCODE:\n```\n{\n  [\":status\"] = \"200\",\n  [\"foo\"] = \"bar\",\n  [\"key\"] = { \"value_0\", \"value_1\", \"value_2\" },\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Runtime Defaults using ConfigHelper in C++\nDESCRIPTION: Provides an example of using a config modifier via `ConfigHelper::addRuntimeOverride` to inject or overwrite specific runtime key-value pairs within the Envoy bootstrap configuration for a C++ integration test.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/test/integration/README.md#2025-04-23_snippet_3\n\nLANGUAGE: c++\nCODE:\n```\nconfig_helper_.addRuntimeOverride(\"Foo\", \"bar\");\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Node and Dynamic Resources in Envoy YAML\nDESCRIPTION: This snippet shows how to configure the 'node' and 'dynamic_resources' sections in Envoy's YAML configuration. The 'node' section identifies the proxy, while 'dynamic_resources' specifies where to load dynamic configuration from.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/start/quick-start/configuration-dynamic-filesystem.rst#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nnode:\n  cluster: test-cluster\n  id: test-id\n\ndynamic_resources:\n  lds_config:\n    path: /config/lds.yaml\n  cds_config:\n    path: /config/cds.yaml\n```\n\n----------------------------------------\n\nTITLE: Configuring Envoy Core Cluster Runtime Settings\nDESCRIPTION: Lists core runtime parameters affecting Envoy cluster behavior. Includes the panic threshold percentage for load balancing (determining when to ignore health status) and flags to dynamically enable or disable the use of HTTP/2 and HTTP/3 protocols for upstream connections, overriding static configuration.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/upstream/cluster_manager/cluster_runtime.rst#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nupstream.healthy_panic_threshold\n  Sets the :ref:`panic threshold <arch_overview_load_balancing_panic_threshold>` percentage.\n  Defaults to 50%.\n\nupstream.use_http2\n  Whether the cluster uses ``HTTP/2`` if configured in :ref:`HttpProtocolOptions <envoy_v3_api_msg_extensions.upstreams.http.v3.HttpProtocolOptions>`.\n  Set to 0 to disable HTTP/2 even if the feature is configured. Defaults to enabled.\n\nupstream.use_http3\n  Whether the cluster uses ``HTTP/3`` if configured in :ref:`HttpProtocolOptions <envoy_v3_api_msg_extensions.upstreams.http.v3.HttpProtocolOptions>`.\n  Set to 0 to disable HTTP/3 even if the feature is configured. Defaults to enabled.\n```\n\n----------------------------------------\n\nTITLE: Outputting Histogram Quantiles for Statistics - Envoy Admin API - JSON\nDESCRIPTION: This snippet demonstrates the JSON output structure of histogram quantiles from the Envoy /stats endpoint. It shows the format for listing supported quantiles and computed quantiles (including interval and cumulative values) for each histogram metric. Required dependencies are Envoy running in JSON format mode. Input is an HTTP GET with /stats?format=json, and the output is a JSON object containing quantile data for each histogram. Null values indicate quantiles with no updated values during the observed interval.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/operations/admin.rst#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"histograms\": {\n    \"supported_quantiles\": [\n      0, 25, 50, 75, 90, 95, 99, 99.9, 100\n    ],\n    \"computed_quantiles\": [\n      {\n        \"name\": \"cluster.external_auth_cluster.upstream_cx_length_ms\",\n        \"values\": [\n          {\"interval\": 0, \"cumulative\": 0},\n          {\"interval\": 0, \"cumulative\": 0},\n          {\"interval\": 1.0435787, \"cumulative\": 1.0435787},\n          {\"interval\": 1.0941565, \"cumulative\": 1.0941565},\n          {\"interval\": 2.0860023, \"cumulative\": 2.0860023},\n          {\"interval\": 3.0665233, \"cumulative\": 3.0665233},\n          {\"interval\": 6.046609, \"cumulative\": 6.046609},\n          {\"interval\": 229.57333,\"cumulative\": 229.57333},\n          {\"interval\": 260,\"cumulative\": 260}\n        ]\n      },\n      {\n        \"name\": \"http.admin.downstream_rq_time\",\n        \"values\": [\n          {\"interval\": null, \"cumulative\": 0},\n          {\"interval\": null, \"cumulative\": 0},\n          {\"interval\": null, \"cumulative\": 1.0435787},\n          {\"interval\": null, \"cumulative\": 1.0941565},\n          {\"interval\": null, \"cumulative\": 2.0860023},\n          {\"interval\": null, \"cumulative\": 3.0665233},\n          {\"interval\": null, \"cumulative\": 6.046609},\n          {\"interval\": null, \"cumulative\": 229.57333},\n          {\"interval\": null, \"cumulative\": 260}\n        ]\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring JSON Application Log Format in Envoy Bootstrap (YAML)\nDESCRIPTION: This YAML configuration snippet demonstrates how to structure Envoy's application logs in JSON format using the `application_log_config` section within the Envoy bootstrap configuration. It defines key-value pairs where keys represent the desired JSON field names (e.g., `Timestamp`, `Level`, `Message`) and values use Envoy's log format specifiers (e.g., `%Y-%m-%dT%T.%F`, `%l`, `%j`) to populate those fields dynamically. Note that the `%v` and `%_` flags are incompatible with JSON format; `%j` should be used for the main message content. Setting this conflicts with the `--log-format` CLI option.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/observability/application_logging.rst#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napplication_log_config:\n  log_format:\n    json_format:\n      Timestamp: \"%Y-%m-%dT%T.%F\"\n      ThreadId: \"%t\"\n      SourceLine: \"%s:%#\"\n      Level: \"%l\"\n      Message: \"%j\"\n      FixedValue: \"SomeFixedValue\"\n```\n\n----------------------------------------\n\nTITLE: Resource Configuration for GCP Authentication Filter in Envoy\nDESCRIPTION: YAML configuration showing the resource setup for GCP authentication filter including static resources and cluster configuration. Demonstrates how to set up metadata-based audience configuration for service-to-service authentication.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/gcp_authn_filter.rst#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n    resources:\n      - \"@type\": type.googleapis.com/envoy.config.cluster.v3.Cluster\n        name: metadata-cluster\n        connect_timeout: 30s\n        type: LOGICAL_DNS\n        transport_socket:\n          name: envoy.transport_sockets.tls\n          typed_config:\n            \"@type\": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext\n        load_assignment:\n          cluster_name: metadata-cluster\n          endpoints:\n          - lb_endpoints:\n            - endpoint:\n                address:\n                  socket_address:\n                    address: metadata.google.internal\n                    port_value: 80\n      - \"@type\": type.googleapis.com/envoy.config.cluster.v3.Cluster\n        name: my-dst-cluster\n        connect_timeout: 30s\n        type: LOGICAL_DNS\n        transport_socket:\n          name: envoy.transport_sockets.tls\n          typed_config:\n            \"@type\": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext\n        metadata:\n          filter_metadata:\n            envoy.filters.http.gcp_authn:\n              \"gcp_authn\":\n                \"audience\": \"http://example.com\"\n        load_assignment:\n          cluster_name: my-dst-cluster\n          endpoints:\n          - lb_endpoints:\n            - endpoint:\n                address:\n                  socket_address:\n                    address: example.com\n                    port_value: 443\n```\n\n----------------------------------------\n\nTITLE: Kafka Fetch Request Flow Diagram\nDESCRIPTION: Depicts the fetch request handling process, showing how FetchRequestHolder interacts with SharedConsumerManager and RichKafkaConsumer to retrieve records from upstream Kafka clusters.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/contrib/kafka/filters/network/source/mesh/command_handlers.md#2025-04-23_snippet_2\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD;\n    FRH[\"FechRequestHolder\"]\n    KafkaMeshFilter <-.-> |\"in-flight-reference\\n(finish/abandon)\"| FRH\n    KafkaMeshFilter --> RP[\"RequestDecoder+RequestProcessor\"]\n    RP --> |\"creates\"| FRH\n\n    RCP[\"<< interface >> \\n RecordCallbackProcessor\"]\n    SCM[\"SharedConsumerManager\"]\n    SCM --> |subclass| RCP\n\n    KC[\"RichKafkaConsumer\"]\n    FRH -.-> |registers itself with| SCM\n    SCM -.-> |provides records| FRH\n    SCM --> |stores mutliple| KC\n\n    LibrdKafkaConsumer[\"<< librdkafka >> \\n KafkaConsumer\"]\n    ConsumerPoller[\"<< thread >> \\n consumer poller\"]\n    KC --> |wraps| LibrdKafkaConsumer\n    KC --> |holds| ConsumerPoller\n    ConsumerPoller --> |polls from| LibrdKafkaConsumer\n\n    DSP[\"<< Envoy >> \\n Dispatcher\"]\n    KafkaMeshFilter ---  DSP\n    FRH -.-> |notifies on finish| DSP\n```\n\n----------------------------------------\n\nTITLE: Runtime Configuration Keys for HTTP Fault Injection\nDESCRIPTION: Runtime configuration keys for controlling fault injection behavior including abort percentage, HTTP status, delay percentage, and duration settings for downstream clusters.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/fault_filter.rst#2025-04-23_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\nfault.http.<downstream-cluster>.abort.abort_percent\nfault.http.<downstream-cluster>.abort.http_status\nfault.http.<downstream-cluster>.delay.fixed_delay_percent\nfault.http.<downstream-cluster>.delay.fixed_duration_ms\n```\n\n----------------------------------------\n\nTITLE: Using %UPSTREAM_PEER_CERT_V_START% in Envoy Access Logs\nDESCRIPTION: Demonstrates the usage of %UPSTREAM_PEER_CERT_V_START% substitution string in Envoy access logs. It represents the validity start date of the upstream server certificate used for the upstream TLS connection. This can be customized using a format string.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/observability/access_log/usage.rst#2025-04-23_snippet_12\n\nLANGUAGE: plaintext\nCODE:\n```\n%UPSTREAM_PEER_CERT_V_START%\n```\n\n----------------------------------------\n\nTITLE: Running Bazel Tests with MSAN (Docker)\nDESCRIPTION: Runs all Envoy tests (`//test/...`) using Bazel with the Memory Sanitizer (MSAN) enabled. This command requires a Docker sandbox environment (`--config=docker-msan`) which provides an MSAN-instrumented libc++. Debug configuration (`-c dbg`) is used.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/bazel/README.md#2025-04-23_snippet_38\n\nLANGUAGE: bash\nCODE:\n```\nbazel test -c dbg --config=docker-msan //test/...\n```\n\n----------------------------------------\n\nTITLE: Configuring an Envoy HTTP Filter without Explicit Type URL (YAML)\nDESCRIPTION: This YAML snippet demonstrates configuring an HTTP filter within an Envoy listener's filter chain. The `typed_config` section for the `envoy.filters.network.http_connection_manager` specifies configuration for HTTP filters, including the `envoy.filters.http.router`. Notably, the router filter configuration itself does not explicitly specify a `@type` or `type_url`, relying on Envoy's type registry to interpret the structure.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/overview/extension.rst#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n    filter_chains:\n    - filters:\n      - name: envoy.filters.network.http_connection_manager\n        typed_config:\n          \"@type\": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager\n          stat_prefix: ingress_http\n          route_config:\n            name: local_route\n            virtual_hosts:\n            - name: local_service\n              domains: [\"*\"]\n              routes:\n              - match: { prefix: \"/\" }\n                route: { cluster: some_service }\n          http_filters:\n          - name: envoy.filters.http.router\n            typed_config:\n              \"@type\": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router\n```\n\n----------------------------------------\n\nTITLE: Defining start_envoy.sh Script for Envoy Proxy in Bash/Jinja\nDESCRIPTION: Provides a sample start_envoy.sh script using Bash with Jinja-like syntax. This script sets ulimit and sysctl values, then executes Envoy with various configuration options including the RESTART_EPOCH environment variable.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/operations/hot_restarter.rst#2025-04-23_snippet_1\n\nLANGUAGE: jinja\nCODE:\n```\n#!/bin/bash\n\nulimit -n {{ pillar.get('envoy_max_open_files', '102400') }}\nsysctl fs.inotify.max_user_watches={{ pillar.get('envoy_max_inotify_watches', '524288') }}\n\nexec /usr/sbin/envoy -c /etc/envoy/envoy.cfg --restart-epoch $RESTART_EPOCH --service-cluster {{ grains['cluster_name'] }} --service-node {{ grains['service_node'] }} --service-zone {{ grains.get('ec2_availability-zone', 'unknown') }}\n```\n\n----------------------------------------\n\nTITLE: Configuring Route with Metadata Criteria in Envoy YAML\nDESCRIPTION: This YAML configuration demonstrates how to define an RDS Route with metadata match criteria. The route specifies version and stage metadata to match against when selecting hosts.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/intro/arch_overview/upstream/load_balancing/subsets.rst#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n---\nmatch:\n  prefix: /\nroute:\n  cluster: cluster-name\n  metadata_match:\n    filter_metadata:\n      envoy.lb:\n        version: '1.0'\n        stage: 'prod'\n```\n\n----------------------------------------\n\nTITLE: Configuring RTDS via Runtime Layer - Envoy - YAML\nDESCRIPTION: This YAML snippet configures the Runtime Discovery Service (RTDS) within a runtime layer for Envoy using a gRPC API config source pointing to the xDS cluster. It's intended to be placed inside the `rtds_layer` field, enabling dynamic management of runtime configuration values. Dependencies include Envoy, a compatible management server, and a valid xDS cluster env. Key parameters are the runtime layer name and the cluster_name used for gRPC.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/overview/xds_api.rst#2025-04-23_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n    name: some_runtime_layer_name\n    config_source:\n      api_config_source:\n        api_type: GRPC\n        grpc_services:\n        - envoy_grpc:\n            cluster_name: some_xds_cluster\n```\n\n----------------------------------------\n\nTITLE: Configuring Scoped Routes in Envoy using YAML\nDESCRIPTION: Example of a statically configured scoped route in Envoy that uses the 'Addr' header to determine routing. The configuration splits the header value and uses the 'x-foo-key' value as the scope key to look up the corresponding route configuration.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/intro/arch_overview/http/http_routing.rst#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nstatic_resources:\n  listeners:\n  - address:\n      socket_address:\n        address: 0.0.0.0\n        port_value: 8080\n    filter_chains:\n    - filters:\n      - name: envoy.filters.network.http_connection_manager\n        typed_config:\n          \"@type\": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager\n          stat_prefix: ingress_http\n          scoped_routes:\n            name: global-scoped-routes\n            scope_key_builder:\n              fragments:\n              - header_value_extractor:\n                  name: Addr\n                  element:\n                    key: x-foo-key\n                    separator: \";\"\n          http_filters:\n          - name: envoy.filters.http.router\n            typed_config:\n              \"@type\": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router\n  - name: scope1\n    scope_key_fragment: bar\n    route_configuration:\n      name: scope1-routes\n      virtual_hosts:\n      - name: \"scope1-vhost\"\n        domains: [\"localhost\", \"*\"]\n        routes:\n        - match: { prefix: \"/\" }\n          route: { host_rewrite_literal: www.example.org, cluster: some-service }\n```\n\n----------------------------------------\n\nTITLE: Building Documentation with Docker Build Container\nDESCRIPTION: Command to build documentation using the Envoy CI Docker container. This is the primary method for building docs in a containerized environment.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./ci/do_ci.sh docs\n```\n\n----------------------------------------\n\nTITLE: Kafka Produce Request Flow Diagram\nDESCRIPTION: Shows the flow of produce requests through the system, demonstrating how ProduceRequestHolder interacts with UpstreamKafkaFacade and RichKafkaProducer to handle record delivery to upstream Kafka clusters.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/contrib/kafka/filters/network/source/mesh/command_handlers.md#2025-04-23_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD;\n    KafkaMeshFilter <-.-> |\"in-flight-reference\\n(finish/abandon)\"| ProduceRequestHolder\n    KafkaMeshFilter --> RP[\"RequestDecoder+RequestProcessor\"]\n    RP --> |\"creates\"| ProduceRequestHolder\n    UpstreamKafkaFacade --> |\"accesses (Envoy thread-local)\"| ThreadLocalKafkaFacade\n    ThreadLocalKafkaFacade --> |\"stores multiple\"| RichKafkaProducer\n    RdKafkaProducer[\"<< librdkafka >>\\nRdKafkaProducer\"]\n    RichKafkaProducer --> |\"wraps\"| RdKafkaProducer\n    RichKafkaProducer -.-> |\"in-flight-reference\\n(delivery callback)\"| ProduceRequestHolder\n    ProduceRequestHolder --> |uses| UpstreamKafkaFacade\n    ProduceRequestHolder -.-> |sends data to| RichKafkaProducer\n```\n\n----------------------------------------\n\nTITLE: Configuring Squash Filter Type URL\nDESCRIPTION: The type URL required for configuring the Squash filter in Envoy. This configuration enables integration with the Squash microservices debugger.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/squash_filter.rst#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ntype.googleapis.com/envoy.extensions.filters.http.squash.v3.Squash\n```\n\n----------------------------------------\n\nTITLE: Configuring an Envoy HTTP Filter using TypedStruct (YAML)\nDESCRIPTION: This YAML snippet shows an alternative way to configure an Envoy HTTP filter using `xds.type.v3.TypedStruct`. Instead of directly embedding the filter's specific type, `TypedStruct` acts as a generic container. It holds the actual `type_url` (`type.googleapis.com/envoy.extensions.filters.http.router.v3.Router`) and the configuration payload under the `value` field. This is useful when the control plane lacks the specific schema definitions for the extension.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/overview/extension.rst#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n    filter_chains:\n    - filters:\n      - name: envoy.filters.network.http_connection_manager\n        typed_config:\n          \"@type\": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager\n          stat_prefix: ingress_http\n          route_config:\n            name: local_route\n            virtual_hosts:\n            - name: local_service\n              domains: [\"*\"]\n              routes:\n              - match: { prefix: \"/\" }\n                route: { cluster: some_service }\n          http_filters:\n          - name: envoy.filters.http.router\n            typed_config:\n              # This config is wrapped in TypedStruct\n              \"@type\": type.googleapis.com/xds.type.v3.TypedStruct\n              type_url: type.googleapis.com/envoy.extensions.filters.http.router.v3.Router\n              value:\n                 # Empty router configuration\n```\n\n----------------------------------------\n\nTITLE: Retrieving Common Name from X.509 Name in Lua\nDESCRIPTION: Returns the string representation of CN field from the X.509 name. Returns an empty string if there is no such field or if the field can't be converted to UTF8 string.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/lua_filter.rst#2025-04-23_snippet_67\n\nLANGUAGE: lua\nCODE:\n```\nparsedSubject:commonName()\n```\n\n----------------------------------------\n\nTITLE: Collecting Performance Profile and Stats via envoy_collect.py Shell Command\nDESCRIPTION: This shell command starts the envoy_collect.py wrapper with the --performance flag to collect both performance profiles (using perf record) and basic logs and stats from Envoy. Main arguments specify paths for the Envoy binary and output tarball, with the Envoy configuration file provided via -c. Requires that the system supports perf and that both Python and Envoy are installed. The resulting tarball will include a perf.data file for performance analysis as well as non-verbose logs; suitable for later use with tools like perf report.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/tools/envoy_collect/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nenvoy_collect.py --performance --envoy-binary /path/to/envoy-static --output-path /path/to/debug.tar -c \\\n  /path/to/envoy-config.json <other Envoy args...>\n```\n\n----------------------------------------\n\nTITLE: Local Rate Limit Statistics Table Structure\nDESCRIPTION: RST table defining statistics exposed by the local rate limit filter, showing the metric name, type, and description.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/listeners/network_filters/local_rate_limit_filter.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. csv-table::\n  :header: Name, Type, Description\n  :widths: 1, 1, 2\n\n  rate_limited, Counter, Total connections that have been closed due to rate limit exceeded\n```\n\n----------------------------------------\n\nTITLE: Basic AWS Lambda Filter Configuration\nDESCRIPTION: YAML configuration for applying the AWS Lambda filter to all routes in the HTTP connection manager filter chain.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/aws_lambda_filter.rst#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n:language: yaml\n:lines: 25-30\n:lineno-start: 25\n:linenos:\n:caption: :download:`aws-lambda-filter.yaml <_include/aws-lambda-filter.yaml>`\n```\n\n----------------------------------------\n\nTITLE: Configuring LbEndpoint with Host Metadata in Envoy YAML\nDESCRIPTION: This YAML configuration shows how to define an EDS LbEndpoint with host metadata. The metadata includes version and stage information under the 'envoy.lb' filter.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/intro/arch_overview/upstream/load_balancing/subsets.rst#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\nendpoint:\n  address:\n    socket_address:\n      protocol: TCP\n      address: 127.0.0.1\n      port_value: 8888\nmetadata:\n  filter_metadata:\n    envoy.lb:\n      version: '1.0'\n      stage: 'prod'\n```\n\n----------------------------------------\n\nTITLE: Configuring gRPC-JSON Reverse Transcoder Filter in Envoy\nDESCRIPTION: Sample Envoy configuration that sets up a proxy to a RESTful JSON server on localhost:50051. It uses the gRPC-JSON reverse transcoder filter to provide gRPC mapping on port 51051, allowing both gRPC and RESTful JSON requests.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/grpc_json_reverse_transcoder_filter.rst#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n- name: grpc_json_reverse_transcoder\n  typed_config:\n    \"@type\": type.googleapis.com/envoy.extensions.filters.http.grpc_json_reverse_transcoder.v3.GrpcJsonReverseTranscoder\n    proto_descriptor: \"/tmp/envoy/proto.pb\"\n    services: [\"grpc-json.Bookstore\"]\n    print_options:\n      add_whitespace: true\n      always_print_primitive_fields: true\n      always_print_enums_as_ints: false\n      preserve_proto_field_names: true\n```\n\n----------------------------------------\n\nTITLE: Running Bazel Tests with ASAN (macOS)\nDESCRIPTION: Executes all Envoy tests (`//test/...`) on macOS using Bazel with the Address Sanitizer (ASAN) enabled. The configuration flag is prefixed with `macos-` (`--config=macos-asan`) to specify the target OS. Debug configuration (`-c dbg`) is used.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/bazel/README.md#2025-04-23_snippet_39\n\nLANGUAGE: bash\nCODE:\n```\nbazel test -c dbg --config=macos-asan //test/...\n```\n\n----------------------------------------\n\nTITLE: Running Envoy with Original Destination Cluster Configuration in Bash\nDESCRIPTION: Executes Envoy with the provided example configuration for original destination clusters with debug logging enabled.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/configs/original-dst-cluster/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbazel-out/local-dbg/bin/source/exe/envoy-static -c configs/original-dst-cluster/proxy_config.yaml -l debug\n```\n\n----------------------------------------\n\nTITLE: Using %QUERY_PARAM(X):Z% in Envoy Access Logs for HTTP\nDESCRIPTION: Shows how to use %QUERY_PARAM(X):Z% substitution string in Envoy access logs for HTTP. It retrieves the value of query parameter X. If X is not present, '-' is used. Z is an optional parameter for string truncation.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/observability/access_log/usage.rst#2025-04-23_snippet_15\n\nLANGUAGE: plaintext\nCODE:\n```\n%QUERY_PARAM(X):Z%\n```\n\n----------------------------------------\n\nTITLE: Running Code Format Checks\nDESCRIPTION: Commands to run code formatting checks and fixes using clang-format and spelling checker without Docker.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/bazel/README.md#2025-04-23_snippet_50\n\nLANGUAGE: shell\nCODE:\n```\nbazel run //tools/code_format:check_format -- check\n./tools/spelling/check_spelling_pedantic.py check\nbazel run //tools/code_format:check_format -- fix\n./tools/spelling/check_spelling_pedantic.py fix\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Request Signing with SigV4A and Query String Signing in YAML\nDESCRIPTION: Example configuration for AWS Request Signing using SigV4A algorithm with a wildcarded region set, query string signing, and a 3-second expiration for Amazon VPC Lattice service.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/aws_request_signing_filter.rst#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nhttp_filters:\n- name: envoy.filters.http.aws_request_signing\n  typed_config:\n    \"@type\": type.googleapis.com/envoy.extensions.filters.http.aws_request_signing.v3.AwsRequestSigning\n    service_name: vpc-lattice-svcs\n    region: \"us-east-*,us-west-*\"\n    signing_algorithm: AWS_SIGV4A\n    query_string:\n      expiration_time: 3\n```\n\n----------------------------------------\n\nTITLE: Performing Secret Rotation in Envoy\nDESCRIPTION: This Bash command demonstrates how to perform secret rotation by creating a new symlink and atomically moving it to replace the current symlink.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/security/secret.rst#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nln -s <path to new secrets> /certs/new && mv -Tf /certs/new /certs/current\n```\n\n----------------------------------------\n\nTITLE: HTTP Header Output Format Example\nDESCRIPTION: Shows the format of resulting HTTP headers after JWT claims are mapped. Demonstrates how different claim types (simple and object) are handled in the header output.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/jwt_authn_filter.rst#2025-04-23_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nx-jwt-claim-sub: <JWT Claim>\nx-jwt-claim-nested-key: <JWT Claim>\nx-jwt-tenants: <Base64 encoded JSON JWT Claim>\n```\n\n----------------------------------------\n\nTITLE: Configuring Hyperscan as the Global Regex Engine in Envoy (YAML)\nDESCRIPTION: This YAML snippet configures Hyperscan as the default regular expression engine globally within Envoy. It replaces the default Google RE2 engine. The configuration specifies the engine type (`envoy.regex_engines.hyperscan`) under the `typed_config` key within the `default_regex_engine` section of the bootstrap configuration.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/other_features/hyperscan.rst#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nbootstrap_extensions:\n- name: envoy.regex_engines.hyperscan\n  typed_config:\n    \"@type\": type.googleapis.com/envoy.extensions.regex_engines.hyperscan.v3alpha.Hyperscan\n# Use Hyperscan as the default regex engine.\ndefault_regex_engine:\n  name: envoy.regex_engines.hyperscan\n  typed_config:\n    \"@type\": type.googleapis.com/envoy.extensions.regex_engines.hyperscan.v3alpha.Hyperscan\n```\n\n----------------------------------------\n\nTITLE: Configuring Complex HTTP Filter Matching with Tree and Linear Matchers\nDESCRIPTION: A more advanced example combining a top-level tree matcher with a linear matcher for richer matching expressions. This configuration skips the filter if 'some-header' is 'skip_filter' and 'second-header' is either 'foo' or 'bar'.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/intro/arch_overview/advanced/matching/matching_api.rst#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\naction:\n  name: envoy.filters.http.fault\n  typed_config:\n    \"@type\": type.googleapis.com/envoy.extensions.filters.http.fault.v3.HttpFault\nmatcher:\n  matcher_tree:\n    input:\n      name: envoy.matching.inputs.request_headers\n      typed_config:\n        \"@type\": type.googleapis.com/envoy.type.matcher.v3.HttpRequestHeaderMatchInput\n        header_name: some-header\n    exact_match_map:\n      map:\n        skip_filter:\n          matcher:\n            matcher_list:\n              matchers:\n              - predicate:\n                  single_predicate:\n                    input:\n                      name: envoy.matching.inputs.request_headers\n                      typed_config:\n                        \"@type\": type.googleapis.com/envoy.type.matcher.v3.HttpRequestHeaderMatchInput\n                        header_name: second-header\n                    value_match:\n                      exact: foo\n                on_match:\n                  action:\n                    name: skip\n                    typed_config:\n                      \"@type\": type.googleapis.com/envoy.extensions.filters.common.matcher.action.v3.SkipFilter\n              - predicate:\n                  single_predicate:\n                    input:\n                      name: envoy.matching.inputs.request_headers\n                      typed_config:\n                        \"@type\": type.googleapis.com/envoy.type.matcher.v3.HttpRequestHeaderMatchInput\n                        header_name: second-header\n                    value_match:\n                      exact: bar\n                on_match:\n                  action:\n                    name: skip\n                    typed_config:\n                      \"@type\": type.googleapis.com/envoy.extensions.filters.common.matcher.action.v3.SkipFilter\n```\n\n----------------------------------------\n\nTITLE: Conditional Rate Limit Action Configuration in YAML for Envoy Proxy\nDESCRIPTION: This YAML snippet shows a configuration where a rate limit action is conditional on the presence of the x-forwarded-for header. It includes actions for remote_address, generic_key, and source_cluster.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/rate_limit_filter.rst#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n- actions:\n  - remote_address:\n      xff_num_trusted_hops: 2\n  - generic_key:\n      descriptor_value: some_value1\n  - source_cluster: {}\n```\n\n----------------------------------------\n\nTITLE: Configuring OCSP Stapling in Envoy DownstreamTlsContext\nDESCRIPTION: Example of configuring OCSP stapling for downstream TLS connections in Envoy. The 'ocsp_staple' field allows providing a pre-computed OCSP response per certificate. The 'ocsp_staple_policy' controls Envoy's behavior when OCSP responses are missing or expired.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/intro/arch_overview/security/ssl.rst#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndownstream_tls_context:\n  ocsp_staple: <pre-computed OCSP response>\n  ocsp_staple_policy: <MUST_STAPLE or other policy>\n```\n\n----------------------------------------\n\nTITLE: Analyzing Heap Profile with pprof Web Interface\nDESCRIPTION: Command to analyze a heap profile using pprof's web interface, generating interactive flame graphs and charts.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/bazel/PPROF.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ pprof -http=localhost:9999 bazel-bin/source/exe/envoy main_common_base*\n```\n\n----------------------------------------\n\nTITLE: Running Kotlin Hello World Example with Bazel\nDESCRIPTION: Bazel command to build and install the Kotlin Hello World sample application on an Android simulator. Requires pre-built Android AAR artifact and running Android simulator.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/mobile/docs/root/start/examples/hello_world.rst#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./bazelw mobile-install //examples/kotlin/hello_world:hello_envoy_kt --fat_apk_cpu=<arch1,arch2>\n```\n\n----------------------------------------\n\nTITLE: Calculating Health Scores and Traffic Distribution in Envoy Load Balancing (Pseudo)\nDESCRIPTION: This pseudo-code snippet outlines the algorithm for calculating health scores, normalizing total health, computing cluster priority load, and mapping priorities to clusters in Envoy's aggregate cluster load balancer.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/intro/arch_overview/upstream/aggregate_cluster.rst#2025-04-23_snippet_1\n\nLANGUAGE: pseudo\nCODE:\n```\nhealth(P_X) = min(100, 1.4 * 100 * healthy_P_X_backends / total_P_X_backends), where\n                  total_P_X_backends is the number of backends for priority P_X after linearization\n\nnormalized_total_health = min(100, Σ(health(P_0)...health(P_X)))\n\ncluster_priority_load(C_0) = min(100, Σ(health(P_0)...health(P_k)) * 100 / normalized_total_health),\n                  where P_0...P_k belong to C_0\n\ncluster_priority_load(C_X) = min(100 - Σ(priority_load(C_0)..priority_load(C_X-1)),\n                           Σ(health(P_x)...health(P_X)) * 100 / normalized_total_health),\n                           where P_x...P_X belong to C_X\n\nmap from priorities to clusters:\n  P_0 ... P_k ... ...P_x ... P_X\n  ^       ^          ^       ^\n  cluster C_0        cluster C_X\n```\n\n----------------------------------------\n\nTITLE: Recommended Thrift Proxy Access Log Format\nDESCRIPTION: Shows a recommended access log format string specifically for the Envoy Thrift proxy. It combines standard Envoy access log specifiers (`%BYTES_RECEIVED%`, `%BYTES_SENT%`, `%DURATION%`, `%UPSTREAM_HOST%`, `%START_TIME%`) with Thrift-specific details obtained via `%DYNAMIC_METADATA(thrift.proxy:...)%` specifiers, such as the RPC method name, target cluster, transport/protocol/message types for both request and response, and the reply type.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/observability/access_log/usage.rst#2025-04-23_snippet_8\n\nLANGUAGE: plaintext\nCODE:\n```\n[%START_TIME%] %DYNAMIC_METADATA(thrift.proxy:method)%\n%DYNAMIC_METADATA(thrift.proxy:cluster)%\n%DYNAMIC_METADATA(thrift.proxy:request:transport_type)%\n%DYNAMIC_METADATA(thrift.proxy:request:protocol_type)%\n%DYNAMIC_METADATA(thrift.proxy:request:message_type)%\n%DYNAMIC_METADATA(thrift.proxy:response:transport_type)%\n%DYNAMIC_METADATA(thrift.proxy:response:protocol_type)%\n%DYNAMIC_METADATA(thrift.proxy:response:message_type)%\n%DYNAMIC_METADATA(thrift.proxy:response:reply_type)%\n%BYTES_RECEIVED%\n%BYTES_SENT%\n%DURATION%\n%UPSTREAM_HOST%\\n\n```\n\n----------------------------------------\n\nTITLE: Per-Route AWS Lambda Configuration\nDESCRIPTION: YAML configuration for per virtual-host, route or weighted-cluster Lambda configuration with required metadata.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/aws_lambda_filter.rst#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n:language: yaml\n:lines: 24-33\n:lineno-start: 24\n:linenos:\n:caption: :download:`aws-lambda-typed-filter.yaml <_include/aws-lambda-typed-filter.yaml>`\n```\n\n----------------------------------------\n\nTITLE: Build Android AAR Artifact with Bazel - Bash\nDESCRIPTION: Builds the Envoy Mobile Android AAR artifact using the Bazel wrapper script, specifying the android_dist target and architecture(s) via --fat_apk_cpu. Requires Bazel and proper Android build tools. Adjust <arch1,arch2> to reflect the needed CPU architectures; output is at bazel-bin/library/kotlin/io/envoyproxy/envoymobile/envoy.aar.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/mobile/docs/root/start/building/building.rst#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n./bazelw build android_dist --config=android --fat_apk_cpu=<arch1,arch2>\n```\n\n----------------------------------------\n\nTITLE: Collecting Debugging Data via envoy_collect.py Shell Command\nDESCRIPTION: This shell command invokes the envoy_collect.py Python wrapper script to run Envoy with an explicit static binary and collects verbose logs, stats, and other accessible data from the admin endpoint into a tarball. Key parameters include the --envoy-binary flag for the Envoy executable path, --output-path for the tarball, and -c for the Envoy config file; additional Envoy arguments can be appended. The script sets Envoy to maximum verbosity and writes logs to the specified tarball upon SIGINT interruption, with outputs suitable for later debugging but potentially containing sensitive information. Ensure Python and Envoy are installed; output archive is at the provided output path.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/tools/envoy_collect/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nenvoy_collect.py --envoy-binary /path/to/envoy-static --output-path /path/to/debug.tar -c \\\n  /path/to/envoy-config.json <other Envoy args...>\n```\n\n----------------------------------------\n\nTITLE: Defining TCP Connection Metrics in CSV Format\nDESCRIPTION: This CSV table defines various TCP connection metrics with their names, types, and descriptions. It includes counters for transmitted and received segments, data segments, retransmitted segments, and bytes. It also includes gauges for unsent and unacknowledged data, and histograms for retransmission percentage and round trip time estimates.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/_include/tcp_stats.rst#2025-04-23_snippet_0\n\nLANGUAGE: csv\nCODE:\n```\nName, Type, Description\ncx_tx_segments, Counter, Total TCP segments transmitted\ncx_rx_segments, Counter, Total TCP segments received\ncx_tx_data_segments, Counter, Total TCP segments with a non-zero data length transmitted\ncx_rx_data_segments, Counter, Total TCP segments with a non-zero data length received\ncx_tx_retransmitted_segments, Counter, Total TCP segments retransmitted\ncx_rx_bytes_received, Counter, Total payload bytes received for which TCP acknowledgments have been sent.\ncx_tx_bytes_sent, Counter, Total payload bytes transmitted (including retransmitted bytes).\ncx_tx_unsent_bytes, Gauge, Bytes which Envoy has sent to the operating system which have not yet been sent\ncx_tx_unacked_segments, Gauge, Segments which have been transmitted that have not yet been acknowledged\ncx_tx_percent_retransmitted_segments, Histogram, Percent of segments on a connection which were retransmistted\ncx_rtt_us, Histogram, Smoothed round trip time estimate in microseconds\ncx_rtt_variance_us, Histogram, Estimated variance in microseconds of the round trip time. Higher values indicated more variability.\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Golang HTTP Filter in Envoy YAML\nDESCRIPTION: This snippet shows how to configure a basic Golang HTTP filter in Envoy's YAML configuration. It specifies the filter name, type URL, and the path to the Go plugin shared object file.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/golang_filter.rst#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nhttp_filters:\n- name: envoy.filters.http.golang\n  typed_config:\n    \"@type\": type.googleapis.com/envoy.extensions.filters.http.golang.v3alpha.Config\n    library_id: example\n    library_path: \"/etc/envoy/my_plugin.so\"\n    plugin_name: example\n```\n\n----------------------------------------\n\nTITLE: Ring Hash Load Balancer Statistics in Envoy\nDESCRIPTION: CSV table showing statistics for monitoring the ring hash load balancer. These stats track the size of the hash ring and distribution of hashes across hosts.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/upstream/cluster_manager/cluster_stats.rst#2025-04-23_snippet_2\n\nLANGUAGE: csv\nCODE:\n```\nName, Type, Description\nsize, Gauge, Total number of host hashes on the ring\nmin_hashes_per_host, Gauge, Minimum number of hashes for a single host\nmax_hashes_per_host, Gauge, Maximum number of hashes for a single host\n```\n\n----------------------------------------\n\nTITLE: Demonstrating MGET Command Error Handling in Redis CLI\nDESCRIPTION: This code snippet illustrates how the MGET command handles errors when fetching multiple keys. It shows that individual key failures result in error responses for those specific keys, while successful retrievals return their values.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/intro/arch_overview/other_protocols/redis.rst#2025-04-23_snippet_0\n\nLANGUAGE: none\nCODE:\n```\n$ redis-cli MGET a b c d e\n1) \"alpha\"\n2) \"bravo\"\n3) (error) upstream failure\n4) (error) upstream failure\n5) \"echo\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Cookie-Based Stateful Session in Envoy\nDESCRIPTION: YAML configuration for implementing cookie-based session state in Envoy's stateful session filter. Uses 'global-session-cookie' to maintain session stickiness with upstream hosts.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/stateful_session_filter.rst#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nhttp_filters:\n- name: envoy.filters.http.stateful_session\n  typed_config:\n    \"@type\": type.googleapis.com/envoy.extensions.filters.http.stateful_session.v3.StatefulSession\n    session_state:\n      name: envoy.http.stateful_session.cookie\n      typed_config:\n        \"@type\": type.googleapis.com/envoy.extensions.http.stateful_session.cookie.v3.CookieBasedSessionState\n        cookie:\n          name: global-session-cookie\n          path: /\n          ttl: 120s\n- name: envoy.filters.http.upstream\n  typed_config:\n    \"@type\": type.googleapis.com/envoy.extensions.filters.http.upstream.v3.Upstream\n- name: envoy.filters.http.router\n  typed_config:\n    \"@type\": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router\n```\n\n----------------------------------------\n\nTITLE: Running iOS Hello World Example with Bazel\nDESCRIPTION: Command to build and run the Hello World iOS app in a new iOS Simulator using Bazel wrapper script.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/mobile/docs/root/development/debugging/ios_local.rst#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./bazelw run //examples/swift/hello_world:app\n```\n\n----------------------------------------\n\nTITLE: Displaying Detailed Histogram Statistics - Envoy Admin API - text\nDESCRIPTION: This example demonstrates the output format of detailed histogram statistics returned by the Envoy admin /stats endpoint in text mode. It includes total and interval counts for buckets as well as quantile summaries, illustrating how data is displayed for each histogram metric. Input is a metrics name, and the output shows accumulated bucket data and quantile summaries, helping users analyze latency, request time, or other histogram-based metrics. No dependencies besides Envoy are required; output is human-readable and may vary in structure and available fields depending on histogram configuration and usage.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/operations/admin.rst#2025-04-23_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nhttp.admin.downstream_rq_time:\n  totals=1,0.25:25, 2,0.25:9\n  intervals=1,0.25:2, 2,0.25:3\n  summary=P0(1,1) P25(1.0625,1.034) P50(2.0166,1.068) P75(2.058,2.005) P90(2.083,2.06) P95(2.091,2.08) P99(2.09,2.09) P99.5(2.099,2.098) P99.9(2.099,2.099) P100(2.1,2.1)\n```\n\n----------------------------------------\n\nTITLE: Creating Counter with PulseClient - Basic Usage\nDESCRIPTION: Examples of creating a basic counter metric using PulseClient in both Kotlin and Swift. The elements provided form a dot-delimited string identifier.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/mobile/docs/root/api/stats.rst#2025-04-23_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\npulseClient.counter(Element(\"foo\"), Element(\"bar\"))\n```\n\nLANGUAGE: swift\nCODE:\n```\npulseClient.counter(elements: [\"foo\", \"bar\"])\n```\n\n----------------------------------------\n\nTITLE: Analyzing CPU Profile with pprof\nDESCRIPTION: Command to analyze a CPU profile using pprof, displaying results in text format.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/bazel/PPROF.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ pprof -text bazel-bin/source/exe/envoy-static /tmp/mybin.cpuprof\n```\n\n----------------------------------------\n\nTITLE: Per-Route Compressor Configuration\nDESCRIPTION: Demonstrates how to configure compression settings for specific virtual hosts and routes.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/compressor_filter.rst#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nvirtualHosts:\n- name: virtual_host\n  domains: [\"*\"]\n  responseHeadersToAdd:\n  - header:\n      key: \"x-vhost-header\"\n      value: general_virtual_host\n  typedPerFilterConfig:\n    envoy.filters.http.compressor:\n      \"@type\": type.googleapis.com/envoy.extensions.filters.http.compressor.v3.CompressorPerRoute\n      disabled: true\n  routes:\n  - match:\n      prefix: \"/static\"\n    route:\n      cluster: cluster_0\n    typedPerFilterConfig:\n      envoy.filters.http.compressor:\n        \"@type\": type.googleapis.com/envoy.extensions.filters.http.compressor.v3.CompressorPerRoute\n        disabled: false\n```\n\n----------------------------------------\n\nTITLE: Retrieving Local Certificate URI SANs in Envoy Lua\nDESCRIPTION: Calls the `uriSanLocalCertificate()` method on the `downstreamSslConnection` object. It returns a Lua table containing the URI Subject Alternative Names (SANs) from the local certificate presented by Envoy. Returns an empty table if no local certificate, SAN field, or URI SANs exist.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/lua_filter.rst#2025-04-23_snippet_47\n\nLANGUAGE: lua\nCODE:\n```\n-- For example, uriSanLocalCertificate contains {\"san1\", \"san2\"}\nlocal certs = downstreamSslConnection:uriSanLocalCertificate()\n\n-- The following prints san1,san2\nhandle:logTrace(table.concat(certs, \",\"))\n```\n\n----------------------------------------\n\nTITLE: Defining Default Access Log Format String - Envoy - None\nDESCRIPTION: Demonstrates Envoy's built-in default access log output format, as a simple plain string with command operators. This string is used when no custom format is provided. The snippet shows how log fields are included using operators surrounded by percent signs. Required context: part of Envoy's access log configuration using the 'format' key. Output is plain text per HTTP request. Operators extract data such as time, method, path, protocol, response code, client IP, etc. Dependencies: valid Envoy deployment; snippet itself is pure documentation.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/observability/access_log/usage.rst#2025-04-23_snippet_0\n\nLANGUAGE: none\nCODE:\n```\n[%START_TIME%] \"%REQ(:METHOD)% %REQ(X-ENVOY-ORIGINAL-PATH?:PATH)% %PROTOCOL%\"\n%RESPONSE_CODE% %RESPONSE_FLAGS% %BYTES_RECEIVED% %BYTES_SENT% %DURATION%\n%RESP(X-ENVOY-UPSTREAM-SERVICE-TIME)% \"%REQ(X-FORWARDED-FOR)%\" \"%REQ(USER-AGENT)%\"\n\"%REQ(X-REQUEST-ID)%\" \"%REQ(:AUTHORITY)%\" \"%UPSTREAM_HOST%\"\\n\n```\n\n----------------------------------------\n\nTITLE: Configuring CDS Dynamic Resources for REST - Envoy - YAML\nDESCRIPTION: This YAML snippet provides configuration for Envoy's Cluster Discovery Service (CDS) over REST API by specifying `api_type: REST` and identifying clusters to be queried under `cluster_names`. The snippet belongs in the dynamic_resources section of the Envoy bootstrap config. It enables dynamic fetching of cluster info from the management server using REST endpoints; dependencies include Envoy, accessible clusters, and a correctly configured management server.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/overview/xds_api.rst#2025-04-23_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n    cds_config:\n      api_config_source:\n        api_type: REST\n        cluster_names: [some_xds_cluster]\n```\n\n----------------------------------------\n\nTITLE: Setting Upstream Override Host in Lua\nDESCRIPTION: Demonstrates how to override the upstream host with and without strict mode using the setUpstreamOverrideHost method.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/lua_filter.rst#2025-04-23_snippet_23\n\nLANGUAGE: lua\nCODE:\n```\nfunction envoy_on_request(request_handle)\n  -- Override upstream host without strict mode\n  request_handle:setUpstreamOverrideHost(\"192.168.21.13\", false)\n\n  -- Override upstream host with strict mode\n  request_handle:setUpstreamOverrideHost(\"192.168.21.13\", true)\nend\n```\n\n----------------------------------------\n\nTITLE: Rate Limit Override Configuration in YAML for Envoy Proxy\nDESCRIPTION: This YAML configuration demonstrates how to set up a rate limit override using dynamic metadata. It specifies the metadata key and the structure of the override data.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/rate_limit_filter.rst#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n- actions:\n  - generic_key:\n      descriptor_value: some_value2\n  limit:\n    dynamic_metadata:\n      metadata_key:\n        key: test.filter.key\n        path:\n          - key: test\n```\n\n----------------------------------------\n\nTITLE: Getting Timestamp String in Lua\nDESCRIPTION: Demonstrates getting a timestamp as a string with configurable resolution.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/lua_filter.rst#2025-04-23_snippet_29\n\nLANGUAGE: lua\nCODE:\n```\ntimestamp = handle:timestampString(resolution)\n```\n\n----------------------------------------\n\nTITLE: Building Envoy Test Binaries for GDB Debugging\nDESCRIPTION: Provides commands to prepare for debugging an Envoy test (`//test/common/http:async_client_impl_test`) with GDB. The first command builds the test executable with debug symbols (`-c dbg`). The second command builds the corresponding DWARF package file (`.dwp`) containing separate debugging information. Finally, GDB is invoked with the path to the built test executable. Both the executable and the `.dwp` file need to be in the same directory.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/bazel/README.md#2025-04-23_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\nbazel build -c dbg //test/common/http:async_client_impl_test\nbazel build -c dbg //test/common/http:async_client_impl_test.dwp\ngdb bazel-bin/test/common/http/async_client_impl_test\n```\n\n----------------------------------------\n\nTITLE: Initializing HTTP Stream in Kotlin\nDESCRIPTION: Creates and interacts with an HTTP stream using Kotlin. Shows how to build request headers, set response handlers, and manage the stream lifecycle.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/mobile/docs/root/api/http.rst#2025-04-23_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval streamClient = AndroidStreamClientBuilder(application).build()\n\nval headers = RequestHeadersBuilder(method = RequestMethod.POST, scheme = \"https\",  authority = \"api.envoyproxy.io\", path = \"/foo\")\n  .build()\nval stream = streamClient\n  .newStreamPrototype()\n  .setOnResponseHeaders { headers, endStream ->\n    Log.d(\"MainActivity\", \"[${headers.httpStatus}] Headers received: $headers, end stream: $endStream\")\n  }\n  .setOnResponseData { data, endStream ->\n    Log.d(\"MainActivity\", \"Received data, end stream: $endStream\")\n  }\n  .setOnResponseTrailers { trailers ->\n    Log.d(\"MainActivity\", \"Trailers received: $trailers\")\n  }\n  .setOnError { ... }\n  .setOnCancel { ... }\n  .start(Executors.newSingleThreadExecutor())\n  .sendHeaders(...)\n  .sendData(...)\n\n...\nstream.close(...)\n```\n\n----------------------------------------\n\nTITLE: Querying Envoy Config Dump Types via Admin API\nDESCRIPTION: Command-line example using curl and jq to query the types of configuration available through Envoy's config_dump admin endpoint.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/start/quick-start/admin.rst#2025-04-23_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ curl -s http://localhost:9901/config_dump | jq -r '.configs[] | .[\"@type\"]'\n```\n\n----------------------------------------\n\nTITLE: Building Envoy with Docker Sandbox\nDESCRIPTION: Command to build Envoy using Docker sandbox with fixed C++ toolchain configuration.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/bazel/README.md#2025-04-23_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\nbazel build envoy --config=docker-clang\n```\n\n----------------------------------------\n\nTITLE: Building Go Plugin with Bazel\nDESCRIPTION: Commands to check Go version and build a plugin dynamic library using Envoy's bazel setup\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/tcp_bridge/golang.rst#2025-04-23_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ bazel run @go_sdk//:bin/go -- version\n...\ngo version goX.YZ linux/amd64\n```\n\nLANGUAGE: console\nCODE:\n```\n$ bazel run @go_sdk//:bin/go build -- --buildmode=c-shared  -v -o path/to/output/libfoo.so path/to/src/foo\n```\n\n----------------------------------------\n\nTITLE: X-Forwarded-Client-Cert Header Example with URI\nDESCRIPTION: Example of XFCC header format for a client certificate containing only URI type Subject Alternative Name.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_conn_man/headers.rst#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nx-forwarded-client-cert: By=http://frontend.lyft.com;Hash=468ed33be74eee6556d90c0149c1309e9ba61d6425303443c0748a02dd8de688;Subject=\"/C=US/ST=CA/L=San Francisco/OU=Lyft/CN=Test Client\";URI=http://testclient.lyft.com\n```\n\n----------------------------------------\n\nTITLE: Disabling gRPC HTTP/1.1 Reverse Bridge Filter Per Route in YAML\nDESCRIPTION: This YAML configuration demonstrates how to disable the gRPC HTTP/1.1 reverse bridge filter for specific routes in Envoy proxy. It includes the necessary route configuration to bypass the filter.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/grpc_http1_reverse_bridge_filter.rst#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n.. literalinclude:: _include/grpc-reverse-bridge-filter.yaml\n    :language: yaml\n```\n\n----------------------------------------\n\nTITLE: Defining the ListenerFilter Interface Callback in C++\nDESCRIPTION: Defines the pure virtual function `onAccept` for the Envoy `ListenerFilter` interface in C++. This callback is invoked during TCP accept processing, allowing filters to inspect or modify connection parameters before a network filter chain is matched. The returned `FilterStatus` controls the continuation of the listener filter chain, potentially pausing it for asynchronous operations.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/intro/life_of_a_request.rst#2025-04-23_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\nvirtual FilterStatus onAccept(ListenerFilterCallbacks& cb) PURE;\n```\n\n----------------------------------------\n\nTITLE: Configuring Stream Prototype in Kotlin and Swift\nDESCRIPTION: Demonstrates how to configure stream prototypes with response handlers for headers, data, trailers, errors, and cancellation.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/mobile/docs/root/api/http.rst#2025-04-23_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nval prototype = streamClient\n  .newStreamPrototype()\n  .setOnResponseHeaders { headers, endStream ->\n    Log.d(\"MainActivity\", \"[${headers.httpStatus}] Headers received: $headers, end stream: $endStream\")\n  }\n  .setOnResponseData { data, endStream ->\n    Log.d(\"MainActivity\", \"Received data, end stream: $endStream\")\n  }\n  .setOnResponseTrailers { trailers ->\n    Log.d(\"MainActivity\", \"Trailers received: $trailers\")\n  }\n  .setOnError { ... }\n  .setOnCancel { ... }\n```\n\nLANGUAGE: swift\nCODE:\n```\nlet prototype = streamClient\n  .newStreamPrototype()\n  .setOnResponseHeaders { headers, endStream in\n    print(\"[\\(headers.httpStatus)] Headers received: \\(headers), end stream: \\(endStream)\")\n  }\n  .setOnResponseData { data, endStream in\n    print(\"Received data, end stream: \\(endStream)\")\n  }\n  .setOnResponseTrailers { trailers in\n    print(\"Trailers received: \\(trailers)\")\n  }\n  .setOnError { ... }\n  .setOnCancel { ... }\n```\n\n----------------------------------------\n\nTITLE: Configuring Header-Based Stateful Session in Envoy\nDESCRIPTION: YAML configuration for implementing header-based session state in Envoy's stateful session filter. Uses a custom header to maintain session stickiness with upstream hosts.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/stateful_session_filter.rst#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nhttp_filters:\n- name: envoy.filters.http.stateful_session\n  typed_config:\n    \"@type\": type.googleapis.com/envoy.extensions.filters.http.stateful_session.v3.StatefulSession\n    session_state:\n      name: envoy.http.stateful_session.header\n      typed_config:\n        \"@type\": type.googleapis.com/envoy.extensions.http.stateful_session.header.v3.HeaderBasedSessionState\n        header_name: session-header\n- name: envoy.filters.http.upstream\n  typed_config:\n    \"@type\": type.googleapis.com/envoy.extensions.filters.http.upstream.v3.Upstream\n- name: envoy.filters.http.router\n  typed_config:\n    \"@type\": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router\n```\n\n----------------------------------------\n\nTITLE: Cloning with Git Submodules - Bash\nDESCRIPTION: Clones the Envoy Mobile repository including all submodules using the --recursive flag to ensure dependencies are initialized. No external dependencies are required beyond git itself. Use this command to guarantee the envoy dependency is present in the checkout for correct builds.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/mobile/docs/root/start/building/building.rst#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/envoyproxy/envoy-mobile.git --recursive\n```\n\n----------------------------------------\n\nTITLE: Configuring Dynamic Cluster Discovery Service (CDS) in Envoy YAML\nDESCRIPTION: This snippet shows how to configure a dynamic Cluster Discovery Service (CDS) in Envoy. It sets up a cluster named 'example_proxy_cluster' that proxies over TLS to https://www.envoyproxy.io.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/start/quick-start/configuration-dynamic-filesystem.rst#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nresources:\n- \"@type\": type.googleapis.com/envoy.config.cluster.v3.Cluster\n  name: service_envoyproxy_io\n  type: LOGICAL_DNS\n  dns_lookup_family: V4_ONLY\n  load_assignment:\n    cluster_name: service_envoyproxy_io\n    endpoints:\n    - lb_endpoints:\n      - endpoint:\n          address:\n            socket_address:\n              address: www.envoyproxy.io\n              port_value: 443\n  transport_socket:\n    name: envoy.transport_sockets.tls\n    typed_config:\n      \"@type\": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext\n      sni: www.envoyproxy.io\n```\n\n----------------------------------------\n\nTITLE: Creating Counter with Custom Tags\nDESCRIPTION: Examples of creating a counter metric with custom tags using PulseClient for additional metric context.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/mobile/docs/root/api/stats.rst#2025-04-23_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\npulseClient.counter(\n  Element(\"foo\"), Element(\"bar\"),\n  tags = TagsBuilder().add(\"os\", \"Android\").add(\"app_type\", \"rider\").build()\n)\n```\n\nLANGUAGE: swift\nCODE:\n```\npulseClient.counter(\n  elements: [\"foo\", \"bar\"],\n  tags: TagsBuilder().add(name: \"os\", value: \"Android\").add(name: \"app_type\", value: \"rider\").build()\n)\n```\n\n----------------------------------------\n\nTITLE: Declaring a Bazel Target for Binary Tools\nDESCRIPTION: Example of using envoy_cc_binary rule to create executable targets. Shows how to create stand-alone tools that depend on Envoy libraries.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/bazel/DEVELOPER.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nenvoy_cc_binary(\n    name = \"world\",\n    srcs = [\"world.cc\"],\n    deps = [\n        \"//source/common/foo:bar_lib\",\n    ],\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring WasmService as Envoy Bootstrap Extension in YAML\nDESCRIPTION: This YAML snippet demonstrates how to set up a singleton WasmService plugin in Envoy's bootstrap configuration. It configures the 'envoy.bootstrap.wasm' extension to reference a local Wasm binary file, sets the service as a singleton, and provides custom configuration values via the 'configuration' field. The snippet requires Envoy with the 'envoy.extensions.wasm.v3.WasmService' API enabled, and expects the referenced local Wasm file to be present. Input is a YAML configuration; output is the configured Envoy instance loading the specified plugin at startup.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/other_features/wasm_service.rst#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n  bootstrap_extensions:\n  - name: envoy.bootstrap.wasm\n    typed_config:\n      \"@type\": type.googleapis.com/envoy.extensions.wasm.v3.WasmService\n      singleton: true\n      config:\n        name: \"my_plugin\"\n        configuration:\n          \"@type\": type.googleapis.com/google.protobuf.StringValue\n          value: |\n            {\n              \"my_config_value\": \"my_value\"\n            }\n        vm_config:\n          code:\n            local:\n              filename: \"/etc/envoy_filter_http_wasm_example.wasm\"\n\n```\n\n----------------------------------------\n\nTITLE: X-Forwarded-Client-Cert Header Example with URI and DNS\nDESCRIPTION: Example of XFCC header format for a client certificate containing both URI and DNS type Subject Alternative Names.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_conn_man/headers.rst#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nx-forwarded-client-cert: By=http://frontend.lyft.com;Hash=468ed33be74eee6556d90c0149c1309e9ba61d6425303443c0748a02dd8de688;Subject=\"/C=US/ST=CA/L=San Francisco/OU=Lyft/CN=Test Client\";URI=http://testclient.lyft.com;DNS=lyft.com;DNS=www.lyft.com\n```\n\n----------------------------------------\n\nTITLE: Minimal VPP Startup Configuration for VCL Integration (Text/Conf)\nDESCRIPTION: This text block shows a minimal VPP `startup.conf` file required for VCL integration with Envoy, particularly when using DPDK interfaces. It configures VPP to run interactively, sets up CPU core affinity for main and worker threads, defines buffer sizes, specifies DPDK device settings (like PCI address and queue numbers), and enables the VPP session layer with the application socket API necessary for VCL communication. Key parameters like `corelist-workers`, `dev <pci_address>`, and `use-app-socket-api` are crucial for proper setup.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/other_features/vcl.rst#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nunix {\n  # Run in interactive mode and not as a daemon\n  nodaemon\n  interactive\n\n  # Cli socket to be used by vppctl\n  cli-listen /run/vpp/cli.sock\n\n  # Group id is an example\n  gid vpp\n}\n\ncpu {\n  # Avoid using core 0 and run vpp's main thread on core 1\n  skip-cores 0\n  main-core 1\n\n  # Set logical CPU core(s) where worker threads are running. For performance testing make\n  # sure the cores are on the same numa as the NIC(s). Use lscpu to determine the numa of\n  # a cpu and \"sh hardware\" in vpp cli to determine the numa of a NIC. To configure multiple\n  # workers lists are also possible, e.g., corelist-workers 2-4,6\n  corelist-workers 2\n}\n\nbuffers {\n  # Default is 16384 (8192 if running unpriviledged)\n  buffers-per-numa 16384\n}\n\ndpdk {\n  # Notes:\n  # - Assuming only one NIC is used\n  # - The PCI address is an example, the actual one should be found using something like dpdk_devbind\n  #    https://github.com/DPDK/dpdk/blob/main/usertools/dpdk-devbind.py\n  # - Number of rx queues (num-rx-queus) should be number of workers\n  dev 0000:18:00.0 {\n    num-tx-desc 256\n    num-rx-desc 256\n    num-rx-queues 1\n  }\n}\n\nsession {\n  # Use session layer socket api for VCL attachments\n  use-app-socket-api\n\n  # Enable VPP session layer\n  enable\n\n  # VPP worker's message queues lengths\n  event-queue-length 100000\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving URL-Encoded PEM Encoded Peer Certificate in Envoy Lua\nDESCRIPTION: Calls the `urlEncodedPemEncodedPeerCertificate()` method on the `downstreamSslConnection` object. It returns the URL-encoded, PEM-encoded representation of the peer certificate as a string. Returns an empty string if no peer certificate exists or encoding fails.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/lua_filter.rst#2025-04-23_snippet_55\n\nLANGUAGE: lua\nCODE:\n```\ndownstreamSslConnection:urlEncodedPemEncodedPeerCertificate()\n```\n\n----------------------------------------\n\nTITLE: Using Path Expressions with Wasm ABI in Envoy\nDESCRIPTION: Demonstrates how to use path expressions to access nested fields in structured attributes via the Wasm ABI interface. The examples show accessing a node ID and a specific request header value.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/intro/arch_overview/advanced/attributes.rst#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nget_property({\"node\", \"id\"})\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nget_property({\"request\", \"headers\", \"my-header\"})\n```\n\n----------------------------------------\n\nTITLE: ZooKeeper Proxy Dynamic Metadata Fields in CSV Format\nDESCRIPTION: A CSV table describing the dynamic metadata emitted by the ZooKeeper filter for each parsed message. It includes the field name, data type, and description of various metadata elements extracted from ZooKeeper requests, responses, and events.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/listeners/network_filters/zookeeper_proxy_filter.rst#2025-04-23_snippet_7\n\nLANGUAGE: csv\nCODE:\n```\n  :header: Name, Type, Description\n  :widths: 1, 1, 2\n\n  <path>, string, \"The path associated with the request, response or event\"\n  <opname>, string, \"The opname for the request, response or event\"\n  <create_type>, string, \"The string representation of the flags applied to the znode\"\n  <bytes>, string, \"The size of the request message in bytes\"\n  <watch>, string, \"True if a watch is being set, false otherwise\"\n  <version>, string, \"The version parameter, if any, given with the request\"\n  <timeout>, string, \"The timeout parameter in a connect response\"\n  <protocol_version>, string, \"The protocol version in a connect response\"\n  <readonly>, string, \"The readonly flag in a connect response\"\n  <zxid>, string, \"The zxid field in a response header\"\n  <error>, string, \"The error field in a response header\"\n  <client_state>, string, \"The state field in a watch event\"\n  <event_type>, string, \"The event type in a a watch event\"\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Lambda Response Schema\nDESCRIPTION: JSON schema for AWS Lambda function responses that Envoy will transform into HTTP responses. Includes status code, headers, cookies and response body.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/aws_lambda_filter.rst#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"status_code\": ...\n    \"headers\": {\"header-key\": \"header-value\", ... },\n    \"cookies\": [\"key1=value1; HttpOnly; ...\", \"key2=value2; Secure; ...\", ...],\n    \"body\": \"...\",\n    \"is_base64_encoded\": true|false\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Header-To-Metadata Filter with Regex Substitution in YAML\nDESCRIPTION: This YAML configuration demonstrates how to use regex matching and substitution in the Header-To-Metadata filter. It shows how to transform a header's value before adding it as metadata.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/header_to_metadata_filter.rst#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n- name: envoy.filters.http.header_to_metadata\n  typed_config:\n    \"@type\": type.googleapis.com/envoy.extensions.filters.http.header_to_metadata.v3.Config\n    request_rules:\n      - header: user-agent\n        on_header_present:\n          metadata_namespace: envoy.lb\n          key: user_agent\n          regex_value_rewrite:\n            pattern:\n              google_re2: {}\n              regex: \"ios|android\"\n            substitution: mobile\n```\n\n----------------------------------------\n\nTITLE: Building Envoy with libc++\nDESCRIPTION: Command to build Envoy linking against libc++ on Linux systems.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/bazel/README.md#2025-04-23_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\nbazel build --config=libc++ envoy\n```\n\n----------------------------------------\n\nTITLE: Configuring Socket Tagging in Kotlin\nDESCRIPTION: Enable Android socket tagging support (unavailable on iOS). Defaults to false.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/mobile/docs/root/api/starting_envoy.rst#2025-04-23_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nbuilder.enableSocketTagging(true)\n```\n\n----------------------------------------\n\nTITLE: Matching Against Destination IP with Envoy Matcher API\nDESCRIPTION: This example uses PROXY protocol for incoming traffic and matches against the destination IP. If the recovered destination IP is in CIDR 10.0.0.0/24, the 'vip' filter chain is used, otherwise the 'default' filter chain is selected.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/intro/arch_overview/advanced/matching/matching_listener.rst#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nfilter_chains:\n- name: vip\n- name: default\nlistener_filters:\n- name: \"envoy.filters.listener.proxy_protocol\"\n  typed_config:\n    \"@type\": type.googleapis.com/envoy.extensions.filters.listener.proxy_protocol.v3.ProxyProtocol\nmatcher:\n  matcher_tree:\n    input:\n      name: envoy.matching.inputs.destination_ip\n      typed_config:\n        \"@type\": type.googleapis.com/envoy.extensions.matching.common_inputs.network.v3.DestinationIPInput\n    exact_match_map:\n      map:\n        \"10.0.0.0/24\":\n          action:\n            name: vip\n  on_no_match:\n    action:\n      name: default\n```\n\n----------------------------------------\n\nTITLE: Querying Envoy Dynamic Listener Configuration via Admin API\nDESCRIPTION: Command-line example using curl and jq to query the socket address of the first dynamic listener from Envoy's config_dump admin endpoint.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/start/quick-start/admin.rst#2025-04-23_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ curl -s http://localhost:9901/config_dump?resource=dynamic_listeners | jq '.configs[0].active_state.listener.address'\n```\n\n----------------------------------------\n\nTITLE: Building Envoy with Optimization (`opt` mode)\nDESCRIPTION: Builds the main Envoy executable using Bazel's `opt` compilation mode (`-c opt`). This mode typically enables optimizations (`-O2`), defines `NDEBUG`, and includes debug symbols suitable for production builds (`-ggdb3 -gsplit-dwarf`).\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/bazel/README.md#2025-04-23_snippet_29\n\nLANGUAGE: bash\nCODE:\n```\nbazel build -c opt envoy\n```\n\n----------------------------------------\n\nTITLE: Logging Messages with Different Severity Levels in Envoy Lua API\nDESCRIPTION: These functions allow logging messages at various severity levels using Envoy's application logging system. The 'handle' object represents any Envoy object exposed to Lua, and 'message' is the string to be logged.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/_include/lua_common.rst#2025-04-23_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nhandle:logTrace(message)\nhandle:logDebug(message)\nhandle:logInfo(message)\nhandle:logWarn(message)\nhandle:logErr(message)\nhandle:logCritical(message)\n```\n\n----------------------------------------\n\nTITLE: Documenting Envoy Server Compilation Settings Statistics - reStructuredText\nDESCRIPTION: This snippet presents a table of server compilation settings metrics using the csv-table directive in reStructuredText. It documents the metric 'fips_mode', describing whether the Envoy build is FIPS compliant. The snippet is designed for documentation, with no code execution requirements but needs a reStructuredText-compatible environment like Sphinx for rendering.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/observability/statistics.rst#2025-04-23_snippet_1\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. csv-table::\n  :header: Name, Type, Description\n  :widths: 1, 1, 2\n\n  fips_mode, Gauge, Integer representing whether the envoy build is FIPS compliant or not\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Original Source HTTP Filter in Envoy\nDESCRIPTION: YAML configuration for setting up the Original Source filter in Envoy. This configuration enables original source address replication for all connections on port 8888 and marks upstream packets with value 123.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/original_src_filter.rst#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nhttp_filters:\n  - name: envoy.filters.http.original_src\n    typed_config:\n      \"@type\": type.googleapis.com/envoy.extensions.filters.http.original_src.v3.OriginalSrc\n      mark: 123\n  - name: envoy.filters.http.router\n    typed_config:\n      \"@type\": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router\n```\n\n----------------------------------------\n\nTITLE: DNS Configuration Examples in Kotlin and Swift\nDESCRIPTION: Examples demonstrating how to configure DNS settings including refresh intervals, timeout periods, and hostname pre-resolution.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/mobile/docs/root/api/starting_envoy.rst#2025-04-23_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nbuilder.addDNSPreresolveHostnames(listOf(\"lyft.com\", \"google.com\"))\n```\n\nLANGUAGE: swift\nCODE:\n```\nbuilder.addDNSPreresolveHostnames([\"lyft.com\", \"google.com\"])\n```\n\n----------------------------------------\n\nTITLE: Configuring Per-Route Authorization Settings in Envoy\nDESCRIPTION: Example of route-specific external authorization configuration, showing how to customize or disable auth checks for specific paths.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/ext_authz_filter.rst#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nvirtual_hosts:\n- name: backend\n  domains: [\"*\"]\n  typed_per_filter_config:\n    envoy.filters.http.ext_authz:\n      \"@type\": type.googleapis.com/envoy.extensions.filters.http.ext_authz.v3.ExtAuthzPerRoute\n      check_settings:\n        context_extensions:\n          virtual_host: backend\n  routes:\n  - match:\n      prefix: \"/static\"\n    route:\n      cluster: static_service\n    typed_per_filter_config:\n      envoy.filters.http.ext_authz:\n        \"@type\": type.googleapis.com/envoy.extensions.filters.http.ext_authz.v3.ExtAuthzPerRoute\n        disabled: true\n```\n\n----------------------------------------\n\nTITLE: Setting up Temporary Directory for Windows Envoy Bazel Build\nDESCRIPTION: These commands set up a temporary directory and create a necessary symlink for building Envoy on Windows.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/bazel/README.md#2025-04-23_snippet_14\n\nLANGUAGE: cmd\nCODE:\n```\nset TMPDIR=C:/Windows/TEMP\nmklink /d C:\\c C:\\\n```\n\n----------------------------------------\n\nTITLE: Native Filter Configuration Example\nDESCRIPTION: Examples showing how to add a C++ filter to the Envoy Mobile filter chain. This requires the specified C++ filter to be linked into the Envoy Mobile build.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/mobile/docs/root/api/starting_envoy.rst#2025-04-23_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nbuilder.addNativeFilter(\"envoy.filters.http.buffer\", \"[type.googleapis.com/envoy.extensions.filters.http.buffer.v3.Buffer] { max_request_bytes: { value: 5242880 } \")\n```\n\nLANGUAGE: swift\nCODE:\n```\nbuilder.addNativeFilter(\"envoy.filters.http.buffer\", \"[type.googleapis.com/envoy.extensions.filters.http.buffer.v3.Buffer] { max_request_bytes: { value: 5242880 } \")\n```\n\n----------------------------------------\n\nTITLE: Filter State Object Format\nDESCRIPTION: Textual representation format for the filter state object showing request and response message counts.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/grpc_stats_filter.rst#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nrequest_message_count,response_message_count\n```\n\n----------------------------------------\n\nTITLE: Declaring a Test with Data Dependencies\nDESCRIPTION: Example of using the data attribute in envoy_cc_test to specify read-only data files needed by tests. Shows how to include external data files in tests.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/bazel/DEVELOPER.md#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nenvoy_cc_test(\n    name = \"bar_impl_test\",\n    srcs = [\"bar_impl_test.cc\"],\n    data = [\"some_file.csv\"],\n    deps = [\n        \"//test/mocks/buffer:buffer_mocks\",\n        \"//source/common/foo:bar_lib\",\n        ...\n    ],\n)\n```\n\n----------------------------------------\n\nTITLE: Programmatic CPU Profiling in C++\nDESCRIPTION: Example of how to start and stop CPU profiling programmatically in Envoy C++ code using the Profiler library.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/bazel/PPROF.md#2025-04-23_snippet_6\n\nLANGUAGE: cpp\nCODE:\n```\n#include \"source/common/profiler/profiler.h\"\n\nFunction(...) {\n    if (!Profiler::Cpu::startProfiler(profile_path)) {\n       // Error handling\n    }\n    ...\n    Do expensive stuff in one or more threads.\n    ...\n\n    // Stop the profiler and dump output to the `profile_path` specified when profile was started.\n    Profiler::Cpu::stopProfiler();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Named HTTP Filters in Envoy YAML\nDESCRIPTION: Example showing how to configure HTTP filters with custom and canonical names. These names are used as keys for looking up related per-filter configurations in route configurations.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/intro/arch_overview/http/http_filters.rst#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nhttp_filters:\n- name: custom-filter-name-for-lua # Custom name be used as filter config name\n  typed_config: { ... }\n- name: envoy.filters.http.buffer # Canonical name be used as filter config name\n  typed_config: { ... }\n```\n\n----------------------------------------\n\nTITLE: Implementing Unary Requests in Kotlin and Swift\nDESCRIPTION: Demonstrates how to implement unary (single request/response) HTTP requests using the streaming interface.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/mobile/docs/root/api/http.rst#2025-04-23_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nval streamClient = AndroidStreamClientBuilder()\n  ...\n  .build()\n\nval requestHeaders = RequestHeadersBuilder()\n  ...\n  .build()\nval stream = streamClient\n  .newStreamPrototype()\n  .start(Executors.newSingleThreadExecutor())\n\n// Headers-only\nstream.sendHeaders(requestHeaders, true)\n\n// Close with data\nstream.close(ByteBuffer(...))\n\n// Close with trailers\nstream.close(RequestTrailersBuilder().build())\n\n// Cancel the stream\nstream.cancel()\n```\n\nLANGUAGE: swift\nCODE:\n```\nlet streamClient = StreamClientBuilder()\n  ...\n  .build()\n\nlet requestHeaders = RequestHeadersBuilder()\n  ...\n  .build()\nlet stream = streamClient\n  .newStreamPrototype()\n  .start(queue: .main)\n\n// Headers-only\nstream.sendHeaders(requestHeaders, endStream: true)\n\n// Close with data\nstream.close(Data(...))\n\n// Close with trailers\nstream.close(RequestTrailersBuilder().build())\n\n// Cancel the stream\nstream.cancel()\n```\n\n----------------------------------------\n\nTITLE: Configuring LDS Dynamic Resources for REST - Envoy - YAML\nDESCRIPTION: This YAML snippet sets up Listener Discovery Service (LDS) for Envoy to communicate with a management server using REST, by defining `api_type: REST` and providing relevant cluster names. This is set under `lds_config` within dynamic_resources of the Envoy bootstrap config. Dependencies are Envoy, REST cluster management server, and ready clusters. Output is dynamically updated listener configs using REST as the transport.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/overview/xds_api.rst#2025-04-23_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n    lds_config:\n      api_config_source:\n        api_type: REST\n        cluster_names: [some_xds_cluster]\n```\n\n----------------------------------------\n\nTITLE: Retrieving Peer Certificate DNS SANs in Envoy Lua\nDESCRIPTION: Calls the `dnsSansPeerCertificate()` method on the `downstreamSslConnection` object. It returns a Lua table containing the DNS Subject Alternative Names (SANs) from the peer certificate. Returns an empty table if no peer certificate, SAN field, or DNS SANs exist.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/lua_filter.rst#2025-04-23_snippet_57\n\nLANGUAGE: lua\nCODE:\n```\ndownstreamSslConnection:dnsSansPeerCertificate()\n```\n\n----------------------------------------\n\nTITLE: Declaring Thrift Service and Structure for Payload-Based Routing (Thrift)\nDESCRIPTION: This Thrift snippet defines the 'Info' structure and 'Service' interface used in examples to illustrate payload field extraction by Envoy's Payload-To-Metadata filter. The 'Info' struct contains a 'version' field, which, when present in Thrift requests, is extracted and used in routing logic within Envoy. This definition is a prerequisite for generating compatible clients and servers interacting with the Envoy proxy. Key fields include the nested 'info' struct in service methods and its 'version' string field.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/other_protocols/thrift_filters/payload_to_metadata_filter.rst#2025-04-23_snippet_2\n\nLANGUAGE: thrift\nCODE:\n```\nnamespace py schemas.service\n\nstruct Info {\n   1: string version\n}\n\nservice Service {\n   void foo(1: string data, 2: Info info);\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Thrift-to-Metadata Filter in YAML\nDESCRIPTION: Example YAML configuration showing how to set up the Thrift-to-Metadata filter to route traffic based on version attributes. The configuration demonstrates filter setup using type.googleapis.com/envoy.extensions.filters.http.thrift_to_metadata.v3.ThriftToMetadata.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/thrift_to_metadata_filter.rst#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n    :language: yaml\n    :lines: 25-55\n    :lineno-start: 25\n    :linenos:\n    :caption: :download:`thrift-to-metadata-filter.yaml <_include/thrift-to-metadata-filter.yaml>`\n```\n\n----------------------------------------\n\nTITLE: Performance Annotation for Scoped Operations\nDESCRIPTION: Example of using performance annotations to measure execution time within a scope\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/bazel/PPROF.md#2025-04-23_snippet_12\n\nLANGUAGE: cpp\nCODE:\n```\nvoid doHeavyLifting() {\n  PERF_OPERATION(op);\n  bool success = doSomething();\n  if (success) {\n    finalizeSuccessfulOperation();\n    PERF_RECORD(op, \"successful\", \"heavy lifting\");\n  } else {\n    recoverFromFailure();\n    PERF_RECORD(op, \"failed\", \"heavy lifting\")\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Listener Connection Limits in Envoy Runtime Config\nDESCRIPTION: Runtime configuration setting that allows limiting the number of active connections for a specific named listener in Envoy proxy. This provides dynamic control over connection resources per listener.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/listeners/runtime.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\nenvoy.resource_limits.listener.<name of listener>.connection_limit\n```\n\n----------------------------------------\n\nTITLE: Using %PATH(X:Y):Z% in Envoy Access Logs for HTTP\nDESCRIPTION: Illustrates the use of %PATH(X:Y):Z% substitution string in Envoy access logs for HTTP. It retrieves the value of the request path. X specifies whether to include query parameters, Y specifies the source of the request path, and Z is for string truncation.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/observability/access_log/usage.rst#2025-04-23_snippet_16\n\nLANGUAGE: plaintext\nCODE:\n```\n%PATH(X:Y):Z%\n```\n\n----------------------------------------\n\nTITLE: Building Envoy with Custom Repository Override in WORKSPACE\nDESCRIPTION: Snippet showing how to configure a WORKSPACE file to override the default Envoy build configuration repository with a custom one. This allows for customizing which extensions are built by providing your own extensions_build_config.bzl file.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/bazel/README.md#2025-04-23_snippet_41\n\nLANGUAGE: bash\nCODE:\n```\nworkspace(name = \"envoy_filter_example\")\n\nlocal_repository(\n    name = \"envoy_build_config\",\n    # Relative paths are also supported.\n    path = \"/somewhere/on/filesystem/envoy_build_config\",\n)\n\nlocal_repository(\n    name = \"envoy\",\n    # Relative paths are also supported.\n    path = \"/somewhere/on/filesystem/envoy\",\n)\n\n...\n```\n\n----------------------------------------\n\nTITLE: Running Flaky Envoy Integration Tests with Bazel\nDESCRIPTION: Provides a sample Bazel command line for diagnosing flaky Envoy integration tests. It demonstrates running a specific test filter multiple times (`--runs_per_test`), increasing parallelism (`--jobs`, `--local_test_jobs`), and enabling detailed trace logging (`--test_arg=\"-l trace\"`) to help reproduce and identify race conditions or other intermittent failures.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/test/integration/README.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nbazel test //test/integration:http2_upstream_integration_test \\\n--test_arg=--gtest_filter=\"IpVersions/Http2UpstreamIntegrationTest.RouterRequestAndResponseWithBodyNoBuffer/IPv6\" \\\n--jobs 60 --local_test_jobs=60 --runs_per_test=1000 --test_arg=\"-l trace\"\n```\n\n----------------------------------------\n\nTITLE: CORS Statistics Configuration\nDESCRIPTION: Table showing statistics output by the CORS filter in the '<stat_prefix>.cors.*' namespace, including counters for valid and invalid Origin headers.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/cors_filter.rst#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nName, Type, Description\norigin_valid, Counter, Number of requests that have a valid Origin header.\norigin_invalid, Counter, Number of requests that have an invalid Origin header.\n```\n\n----------------------------------------\n\nTITLE: Configuring CDN-Loop Header Filter in Envoy Proxy (YAML)\nDESCRIPTION: Configuration snippet for the CDN-Loop header filter in Envoy Proxy. It specifies the filter type URL and defines two key fields: cdn_id and max_allowed_occurrences.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/cdn_loop_filter.rst#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntype.googleapis.com/envoy.extensions.filters.http.cdn_loop.v3.CdnLoopConfig:\n  cdn_id: \"your_cdn_identifier\"\n  max_allowed_occurrences: 0\n```\n\n----------------------------------------\n\nTITLE: Example Envoy Log Line Format\nDESCRIPTION: Provides an example of a standard Envoy log line, illustrating the typical format which includes timestamp, thread ID, log level ('debug'), log ID ('pool'), source file location, connection ID, and the log message.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/source/docs/logging.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n[2021-09-22 18:39:01.268][28][debug][pool] [source/common/conn_pool/conn_pool_base.cc:293] [C18299946955195659044] attaching to next stream\n```\n\n----------------------------------------\n\nTITLE: Running an Envoy Fuzz Test Locally with libFuzzer and ASan using Bazel\nDESCRIPTION: Demonstrates the Bazel command to execute a specific fuzz test target (`//test/common/common:base64_fuzz_test`) locally. It uses the `asan-fuzzer` configuration to link against libFuzzer and enable AddressSanitizer (ASan). The command also specifies the path to the seed corpus directory (`test/common/common/base64_corpus`) and limits the execution to 1000 runs using the `-runs=1000` libFuzzer flag.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/test/fuzz/README.md#2025-04-23_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nbazel run //test/common/common:base64_fuzz_test --config asan-fuzzer \\\n    -- test/common/common/base64_corpus -runs=1000\n```\n\n----------------------------------------\n\nTITLE: Match All Requests Tap Configuration\nDESCRIPTION: Configures tap filter to match and record all HTTP requests without any conditions.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/tap_filter.rst#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nconfig_id: test_config_id\ntap_config:\n  match_config:\n    any_match: true\n  output_config:\n    sinks:\n      - streaming_admin: {}\n```\n\n----------------------------------------\n\nTITLE: Building Documentation with Bazel\nDESCRIPTION: Command for building documentation using Bazel when not using the Docker build container. This generates HTML documentation in the specified output directory.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbazel run --//tools/tarball:target=//docs:html //tools/tarball:unpack \"$PWD\"/generated/docs/\n```\n\n----------------------------------------\n\nTITLE: Configuring Envoy Admin Interface in YAML\nDESCRIPTION: YAML configuration for setting up the Envoy admin interface. It specifies the listening address and port for the admin server.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/start/quick-start/admin.rst#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nadmin:\n  address:\n    socket_address:\n      address: 0.0.0.0\n      port_value: 9901\n```\n\n----------------------------------------\n\nTITLE: Resuming StopAllIteration Statuses in HTTP Filters\nDESCRIPTION: When a filter returns FilterHeadersStatus::StopAllIterationAndBuffer or FilterHeadersStatus::StopAllIterationAndWatermark, processing can be resumed by calling continueEncoding()/continueDecoding().\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/faq/extensions/contract.rst#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nFilterHeadersStatus::StopAllIterationAndBuffer\n```\n\nLANGUAGE: text\nCODE:\n```\nFilterHeadersStatus::StopAllIterationAndWatermark\n```\n\n----------------------------------------\n\nTITLE: Updating Default Logger Level for All Loggers via Envoy Admin API\nDESCRIPTION: Illustrates an HTTP POST request to the `/logging` endpoint using the `level` parameter to set the default log level for all fine-grain loggers to 'info'. This level applies to any logger not covered by a more specific rule.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/source/docs/fine_grain_log.md#2025-04-23_snippet_9\n\nLANGUAGE: http\nCODE:\n```\nPOST /logging?level=info\n```\n\n----------------------------------------\n\nTITLE: OR Match Condition Tap Configuration\nDESCRIPTION: Configures tap filter to match requests with either specific request or response headers using OR logic.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/tap_filter.rst#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nconfig_id: test_config_id\ntap_config:\n  match_config:\n    or_match:\n      rules:\n        - http_request_headers_match:\n            headers:\n              - name: foo\n                string_match:\n                  exact: bar\n        - http_response_headers_match:\n            headers:\n              - name: bar\n                string_match:\n                  exact: baz\n  output_config:\n    sinks:\n      - streaming_admin: {}\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies on Ubuntu for Envoy Bazel Build\nDESCRIPTION: This snippet shows the command to install necessary dependencies on Ubuntu for building Envoy with Bazel.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/bazel/README.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install \\\n   autoconf \\\n   curl \\\n   libtool \\\n   patch \\\n   python3-pip \\\n   unzip \\\n   virtualenv\n```\n\n----------------------------------------\n\nTITLE: Fetching Stream Info in Envoy Lua HTTP Filter (Lua)\nDESCRIPTION: Retrieves structured stream info for the active HTTP request using the Lua handle. Useful for accessing attributes such as timing, bytes sent/received, upstream info, etc. The object is a Lua wrapper around Envoy's internal C++ structures.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/lua_filter.rst#2025-04-23_snippet_19\n\nLANGUAGE: lua\nCODE:\n```\nlocal streamInfo = handle:streamInfo()\n```\n\n----------------------------------------\n\nTITLE: Representing Runtime Settings in Protobuf/JSON (YAML)\nDESCRIPTION: Illustrates how a runtime setting like `health_check.min_interval` is represented within a Protobuf structure using YAML/JSON format, as used in static bootstrap configuration. It maps the dot-separated key to a nested structure according to Protobuf's JSON mapping rules.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/operations/runtime.rst#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n.. code-block:: yaml\n\n  health_check:\n    min_interval: 5\n```\n\n----------------------------------------\n\nTITLE: Retrieving Ciphersuite String in Lua\nDESCRIPTION: Returns the OpenSSL name for the set of ciphers used in the established TLS connection. Returns an empty string if there is no current negotiated ciphersuite.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/lua_filter.rst#2025-04-23_snippet_65\n\nLANGUAGE: lua\nCODE:\n```\ndownstreamSslConnection:ciphersuiteString()\n```\n\n----------------------------------------\n\nTITLE: Using Comprehensive Coverage Calculation with Route Check Tool in Bash\nDESCRIPTION: This Bash command illustrates using the `--covall` flag with the Envoy Route Table Check Tool, alongside the `--fail-under` (`-f`) flag. The `--covall` flag enables a more comprehensive coverage calculation method that considers all potential testable fields within routes, providing a stricter coverage metric. The command fails if the comprehensive coverage (6.2948% here) is below the required 7%.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/operations/tools/router_check.rst#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n> bazel-bin/test/tools/router_check/router_check_tool --config-path ... --test-path ... --f 7 --covall\nCurrent route coverage: 6.2948%\nFailed to meet coverage requirement: 7%\n```\n\n----------------------------------------\n\nTITLE: Defining Locality Zone for Destination Service in Envoy\nDESCRIPTION: This configuration shows how to specify the zone information in the discovery service response for the destination service. The 'locality' field is used to define the zone, which is essential for Envoy's zone aware routing functionality.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/faq/configuration/zone_aware_routing.rst#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nlocality:\n  zone: us-east-1d\n```\n\n----------------------------------------\n\nTITLE: Configuring Set-Filter-State HTTP Filter for Capturing Authority Header - YAML\nDESCRIPTION: Configures the Set-Filter-State HTTP filter in Envoy to capture the ':authority' header from HTTP CONNECT requests and store it in the filter state under 'envoy.network.transport_socket.original_dst_address'. Requires Envoy with the 'set_filter_state' extension enabled. The configuration snippet uses 'on_request_headers' to specify which header to capture and into which object_key to store it. Input is HTTP request headers; output is an updated filter state that can be used by other Envoy components.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/set_filter_state.rst#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\non_request_headers:\n- object_key: envoy.network.transport_socket.original_dst_address\n  format_string:\n    text_format_source:\n      inline_string: \"%REQ(:AUTHORITY)%\"\n```\n\n----------------------------------------\n\nTITLE: Python Breakpoint for Debugging - Python\nDESCRIPTION: Demonstrates adding a breakpoint in Python code to facilitate debugging with `pdb` or other debuggers. Simply call `breakpoint()` within your code or test, and execution will pause for inspection. Supported in Python 3.7 and higher.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/tools/README.md#2025-04-23_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nbreakpoint()\n```\n\n----------------------------------------\n\nTITLE: Retrieving Cluster Handle in Lua Cluster Specifier\nDESCRIPTION: Demonstrates how to get a handle to a specific cluster within the Lua script.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/cluster_specifier/lua.rst#2025-04-23_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal cluster = route_header:getCluster('my_cluster')\n```\n\n----------------------------------------\n\nTITLE: CSRF Statistics Format in CSV\nDESCRIPTION: CSV table showing the statistical metrics tracked by the CSRF filter, including counter names, types, and descriptions\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/csrf_filter.rst#2025-04-23_snippet_0\n\nLANGUAGE: csv\nCODE:\n```\nName, Type, Description\nmissing_source_origin, Counter, Number of requests that are missing a source origin header.\nrequest_invalid, Counter, Number of requests whose source and target origins do not match.\nrequest_valid, Counter, Number of requests whose source and target origins match.\n```\n\n----------------------------------------\n\nTITLE: Atomically Updating Runtime via Symbolic Link Swap (Console)\nDESCRIPTION: Shows the shell commands to perform an atomic update of the runtime configuration directory using a symbolic link swap. It creates a new link (`new`) to the updated directory (`/srv/runtime/v2`) and then atomically renames `new` to `current` using `mv -Tf`. Assumes a Unix-like environment.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/operations/runtime.rst#2025-04-23_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n.. code-block:: console\n\n  /srv/runtime:~$ ln -s /srv/runtime/v2 new && mv -Tf new current\n```\n\n----------------------------------------\n\nTITLE: Running Envoy with mounted config and host UID (Console)\nDESCRIPTION: Command to run Envoy container with a mounted configuration file and using the host user's UID.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/start/docker.rst#2025-04-23_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ docker run -d --name envoy -v $(pwd)/envoy.yaml:/etc/envoy/envoy.yaml -e ENVOY_UID=$(id -u) envoyproxy/|envoy_docker_image|\n```\n\n----------------------------------------\n\nTITLE: On-CPU Profiling with perf\nDESCRIPTION: Commands to collect and analyze on-CPU profiling data using the perf tool as an alternative to gperftools.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/bazel/PPROF.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ perf record -g -F 99 -p `pgrep envoy`\n$ pprof -http=localhost:9999 /path/to/envoy perf.data\n```\n\n----------------------------------------\n\nTITLE: Querying Hystrix Event Stream Endpoint - HTTP GET\nDESCRIPTION: Endpoint providing statistics stream for Hystrix dashboard integration. Returns text/event-stream format data at intervals defined by stats_flush_interval. Requires Hystrix sink configuration.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/operations/admin.rst#2025-04-23_snippet_13\n\nLANGUAGE: http\nCODE:\n```\nGET /hystrix_event_stream\n```\n\n----------------------------------------\n\nTITLE: Verifying Signature in Lua\nDESCRIPTION: Shows how to verify a digital signature using various hash functions and parameters.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/lua_filter.rst#2025-04-23_snippet_26\n\nLANGUAGE: lua\nCODE:\n```\nlocal ok, error = handle:verifySignature(hashFunction, pubkey, signature, signatureLength, data, dataLength)\n```\n\n----------------------------------------\n\nTITLE: Querying Prometheus Formatted Histogram Stats\nDESCRIPTION: Example output from the /stats endpoint in Prometheus format, showing histogram buckets for server initialization time.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/operations/admin.rst#2025-04-23_snippet_10\n\nLANGUAGE: text\nCODE:\n```\n# TYPE envoy_server_initialization_time_ms histogram\nenvoy_server_initialization_time_ms_bucket{le=\"0.5\"} 0\nenvoy_server_initialization_time_ms_bucket{le=\"1\"} 0\nenvoy_server_initialization_time_ms_bucket{le=\"5\"} 0\nenvoy_server_initialization_time_ms_bucket{le=\"10\"} 0\nenvoy_server_initialization_time_ms_bucket{le=\"25\"} 0\nenvoy_server_initialization_time_ms_bucket{le=\"50\"} 0\nenvoy_server_initialization_time_ms_bucket{le=\"100\"} 0\nenvoy_server_initialization_time_ms_bucket{le=\"250\"} 1\nenvoy_server_initialization_time_ms_bucket{le=\"500\"} 1\nenvoy_server_initialization_time_ms_bucket{le=\"1000\"} 1\nenvoy_server_initialization_time_ms_bucket{le=\"2500\"} 1\nenvoy_server_initialization_time_ms_bucket{le=\"5000\"} 1\nenvoy_server_initialization_time_ms_bucket{le=\"10000\"} 1\nenvoy_server_initialization_time_ms_bucket{le=\"30000\"} 1\nenvoy_server_initialization_time_ms_bucket{le=\"60000\"} 1\nenvoy_server_initialization_time_ms_bucket{le=\"300000\"} 1\nenvoy_server_initialization_time_ms_bucket{le=\"600000\"} 1\nenvoy_server_initialization_time_ms_bucket{le=\"1800000\"} 1\nenvoy_server_initialization_time_ms_bucket{le=\"3600000\"} 1\nenvoy_server_initialization_time_ms_bucket{le=\"+Inf\"} 1\nenvoy_server_initialization_time_ms_sum{} 115.000000000000014210854715202\nenvoy_server_initialization_time_ms_count{} 1\n```\n\n----------------------------------------\n\nTITLE: Testing Envoy Freebind Listener Configuration\nDESCRIPTION: Series of commands to set up and validate Envoy's IP_FREEBIND listener behavior. Includes starting Envoy with freebind configuration, configuring a network interface, and testing with netcat.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/configs/freebind/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nenvoy -c ./configs/freebind/freebind.yaml -l trace\n```\n\nLANGUAGE: bash\nCODE:\n```\nsudo ifconfig lo:1 192.168.42.1/30 up\n```\n\nLANGUAGE: bash\nCODE:\n```\nnc -v -l 0.0.0.0 10001\n```\n\nLANGUAGE: bash\nCODE:\n```\nsudo ifconfig lo:1 down\n```\n\n----------------------------------------\n\nTITLE: Defining Comprehensive Route Check Test Parameters in YAML\nDESCRIPTION: This YAML snippet outlines the full structure of a test case for the Envoy Route Table Check Tool, showing all available input parameters (like authority, path, method, headers) and validation checks (like cluster name, rewrites, redirects, header matches). It serves as a template for defining complex test scenarios.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/operations/tools/router_check.rst#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ntests:\n- test_name: ...\n  input:\n    authority: ...\n    path: ...\n    method: ...\n    internal: ...\n    random_value: ...\n    ssl: ...\n    runtime: ...\n    additional_request_headers:\n      - key: ...\n        value: ...\n    additional_response_headers:\n      - key: ...\n        value: ...\n  validate:\n    cluster_name: ...\n    virtual_cluster_name: ...\n    virtual_host_name: ...\n    host_rewrite: ...\n    path_rewrite: ...\n    path_redirect: ...\n    request_header_matches:\n      - name: ...\n        string_match:\n          exact: ...\n    response_header_matches:\n      - name: ...\n        string_match:\n          exact: ...\n      - name: ...\n        presence_match: ...\n```\n\n----------------------------------------\n\nTITLE: Defining a Repeated Field with Constraints in Protobuf\nDESCRIPTION: This snippet demonstrates how to define a repeated field with constraints to enforce a maximum size of 1, which allows for future expansion while maintaining current functionality.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/api/STYLE.md#2025-04-23_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\nrepeated OutputSink sinks = 1 [(validate.rules).repeated = {min_items: 1, max_items: 1}];\n```\n\n----------------------------------------\n\nTITLE: gRPC Statistics Filter Type Configuration\nDESCRIPTION: Configuration type URL for the gRPC statistics filter that should be used when setting up the filter in Envoy.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/grpc_stats_filter.rst#2025-04-23_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\ntype.googleapis.com/envoy.extensions.filters.http.grpc_stats.v3.FilterConfig\n```\n\n----------------------------------------\n\nTITLE: Building Envoy Deployment Docker Image\nDESCRIPTION: This snippet shows how to build the Envoy deployment Docker image using a previously built release tarball. It sets the ENVOY_DOCKER_IN_DOCKER environment variable to enable Docker-in-Docker functionality.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/start/building/local_docker_build.rst#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ pwd\nsrc/envoy/\n$ ENVOY_DOCKER_IN_DOCKER=1 ./ci/run_envoy_docker.sh './ci/do_ci.sh docker'\n```\n\n----------------------------------------\n\nTITLE: Setting up Network Namespace with iptables Redirection for Envoy in Bash\nDESCRIPTION: Creates a network namespace and configures iptables to redirect traffic matching a specific prefix to Envoy listening on port 10000.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/configs/original-dst-cluster/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo ./configs/original-dst-cluster/netns_setup.sh ns1 173.194.222.0/24\n```\n\n----------------------------------------\n\nTITLE: Accessing and Modifying Trailers in Envoy Lua Filter (Lua)\nDESCRIPTION: Shows how to fetch and potentially modify HTTP trailers after consuming the body or body chunks. Access to trailers is contingent upon prior body consumption. Scripts can alter the trailers if they exist, before they're sent to downstream filters. Applicable when scripting HTTP pipelines with Lua in Envoy.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/lua_filter.rst#2025-04-23_snippet_14\n\nLANGUAGE: lua\nCODE:\n```\nlocal trailers = handle:trailers()\n```\n\n----------------------------------------\n\nTITLE: Local Rate Limit Statistics Structure\nDESCRIPTION: CSV table defining the statistics exposed by the local rate limit filter, showing metric names, types, and descriptions.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/listeners/listener_filters/local_rate_limit_filter.rst#2025-04-23_snippet_0\n\nLANGUAGE: csv\nCODE:\n```\nName, Type, Description\nrate_limited, Counter, Total sockets that have been closed due to rate limit exceeded\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Request Signing with Route-Level Override in YAML\nDESCRIPTION: Example of route-level configuration for the AWS Request Signing filter, overriding the virtual-host level config. It specifies different service names and regions for different routes.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/aws_request_signing_filter.rst#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nroutes:\n- match:\n    prefix: \"/s3/\"\n  route:\n    cluster: s3_service\n    typed_per_filter_config:\n      envoy.filters.http.aws_request_signing:\n        \"@type\": type.googleapis.com/envoy.extensions.filters.http.aws_request_signing.v3.AwsRequestSigning\n        service_name: s3\n        region: us-west-2\n        use_unsigned_payload: true\n- match:\n    prefix: \"/sqs/\"\n  route:\n    cluster: sqs_service\n    typed_per_filter_config:\n      envoy.filters.http.aws_request_signing:\n        \"@type\": type.googleapis.com/envoy.extensions.filters.http.aws_request_signing.v3.AwsRequestSigning\n        service_name: sqs\n        region: us-east-1\n```\n\n----------------------------------------\n\nTITLE: Defining Network Filter Interface Callbacks in C++\nDESCRIPTION: Outlines the key pure virtual methods for Envoy's network filter interfaces (`ReadFilter`, `WriteFilter`, `Filter`) in C++. `onNewConnection` is called when a connection is established after listener filters. `onData` processes incoming data from the transport socket (e.g., request data), and `onWrite` processes outgoing data before it reaches the transport socket (e.g., response data). The `FilterStatus` return value enables filters to pause and resume processing, for instance, during calls to external services like rate limiting.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/intro/life_of_a_request.rst#2025-04-23_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\nvirtual FilterStatus onNewConnection() PURE;\nvirtual FilterStatus onData(Buffer::Instance& data, bool end_stream) PURE;\nvirtual FilterStatus onWrite(Buffer::Instance& data, bool end_stream) PURE;\n```\n\n----------------------------------------\n\nTITLE: Starting Envoy Proxy with Configuration\nDESCRIPTION: Command to start an Envoy proxy process with a specific configuration file and concurrency setting.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/faq/debugging/how_to_dump_heap_profile_of_envoy.rst#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n/path/to/envoy -c /path/to/config.yaml --concurrency 2\n```\n\n----------------------------------------\n\nTITLE: Clearing Route Cache in Lua\nDESCRIPTION: Shows how to clear the route cache for the current request to force route recomputation.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/lua_filter.rst#2025-04-23_snippet_24\n\nLANGUAGE: lua\nCODE:\n```\nfunction envoy_on_request(request_handle)\n  -- Clear the route cache\n  request_handle:clearRouteCache()\nend\n```\n\n----------------------------------------\n\nTITLE: Network ReadFilter Fuzzer Corpus Testcase Format - Protobuf\nDESCRIPTION: This snippet illustrates the structure of a sample test corpus file for the network read filter fuzzer, utilizing Protobuf syntax. The configuration consists of a 'config' section describing the filter instantiation details and multiple 'actions' sections simulating connection, data, and timing events. Important fields include 'config.name' (filter name), 'config.typed_config.value' (serialized protobuf string, often with octal escapes), and action types such as 'on_new_connection', 'on_data', and 'advance_time'. Expected inputs are properly structured Protobuf fields; the output is used by the fuzzer to test the filter's resilience and coverage.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/source/docs/network_filter_fuzzing.md#2025-04-23_snippet_1\n\nLANGUAGE: protobuf\nCODE:\n```\nconfig {\n  name: \"envoy.filters.network.mongo_proxy\"\n  typed_config {\n    type_url: \"type.googleapis.com/envoy.extensions.filters.network.mongo_proxy.v3.MongoProxy\"\n    value: \"\\n\\001\\\\\\032\\t\\032\\002\\020\\010\\\"\\003\\010\\200t \\001\"\n  }\n}\nactions {\n  on_new_connection {\n  }\n}\nactions {\n  on_data {\n    data: \"\\120\\0\\0\\0\\1\\0\\0\\0\\1\\0\\0\\0\\324\\7\\0\\0\\4\\0\\0\\0\\164\\145\\163\\164\\56\\164\\145\\163\\164\\0\\24\\0\\0\\0\\377\\377\\377\\377\\52\\0\\0\\0\\2\\163\\164\\162\\151\\156\\147\\137\\156\\145\\145\\144\\137\\145\\163\\143\\0\\20\\0\\0\\0\\173\\42\\146\\157\\157\\42\\72\\40\\42\\142\\141\\162\\12\\42\\175\\0\\0\"\n  }\n}\nactions {\n  advance_time {\n    milliseconds: 10000\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring External Dependency Example in Python\nDESCRIPTION: Example of how to declare an external dependency (nghttp2) in Bazel's repository_locations.bzl file. Shows required fields including project metadata, version information, checksums, and security identifiers.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/DEPENDENCY_POLICY.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ncom_github_nghttp2_nghttp2 = dict(\n    project_name = \"Nghttp2\",\n    project_desc = \"Implementation of HTTP/2 and its header compression ...\",\n    project_url = \"https://nghttp2.org\",\n    version = \"1.41.0\",\n    sha256 = \"eacc6f0f8543583ecd659faf0a3f906ed03826f1d4157b536b4b385fe47c5bb8\",\n    strip_prefix = \"nghttp2-{version}\",\n    urls = [\"https://github.com/nghttp2/nghttp2/releases/download/v{version}/nghttp2-{version}.tar.gz\"],\n    use_category = [\"dataplane\"],\n    last_updated = \"2020-06-02\",\n    cpe = \"cpe:2.3:a:nghttp2:nghttp2:*\",\n)\n```\n\n----------------------------------------\n\nTITLE: Example Access Log Output Using Default Format - Envoy - None\nDESCRIPTION: Provides a real-world example of what a log entry looks like using Envoy's default access log string. This sample output demonstrates values filled in for all defined operators, showing the structure and order of the fields. There are no dependencies or parameters; it is used for reference when customizing or parsing Envoy logs.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/observability/access_log/usage.rst#2025-04-23_snippet_1\n\nLANGUAGE: none\nCODE:\n```\n[2016-04-15T20:17:00.310Z] \"POST /api/v1/locations HTTP/2\" 204 - 154 0 226 100 \"10.0.35.28\"\n\"nsq2http\" \"cc21d9b0-cf5c-432b-8c7e-98aeb7988cd2\" \"locations\" \"tcp://10.0.2.1:80\"\n```\n\n----------------------------------------\n\nTITLE: Building Envoy Binary with Docker\nDESCRIPTION: This snippet demonstrates how to build the Envoy binary using the envoy-build Docker image. It includes options for a full build with tests and a server-only build for systems with limited resources.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/start/building/local_docker_build.rst#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ pwd\nsrc/envoy\n$ ./ci/run_envoy_docker.sh './ci/do_ci.sh release'\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ pwd\nsrc/envoy\n$ ./ci/run_envoy_docker.sh './ci/do_ci.sh release.server_only'\n```\n\n----------------------------------------\n\nTITLE: Configuring MSYS2 Environment on Windows for Envoy Bazel Build\nDESCRIPTION: These commands set up the MSYS2 environment on Windows for building Envoy, including setting necessary environment variables.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/bazel/README.md#2025-04-23_snippet_13\n\nLANGUAGE: cmd\nCODE:\n```\nset PATH=%USERPROFILE%\\msys64\\usr\\bin;%PATH%\nset BAZEL_SH=%USERPROFILE%\\msys64\\usr\\bin\\bash.exe\nset MSYS2_ARG_CONV_EXCL=*\nset MSYS2_PATH_TYPE=inherit\n```\n\n----------------------------------------\n\nTITLE: Running Envoy with custom UID and GID (Console)\nDESCRIPTION: Command to run Envoy Docker container with custom user and group IDs using environment variables.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/start/docker.rst#2025-04-23_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ docker run -d --name envoy -e ENVOY_UID=777 -e ENVOY_GID=777 envoyproxy/|envoy_docker_image|\n```\n\n----------------------------------------\n\nTITLE: DiscoveryRequest Resource Names Field Usage\nDESCRIPTION: Examples of how resource_names field is interpreted in DiscoveryRequest messages for various subscription scenarios in the SotW protocol variant.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/api-docs/xds_protocol.rst#2025-04-23_snippet_3\n\nLANGUAGE: protobuf\nCODE:\n```\nservice.discovery.v3.DiscoveryRequest.resource_names = [\"*\", \"A\"]\nservice.discovery.v3.DiscoveryRequest.resource_names = [\"A\"]\nservice.discovery.v3.DiscoveryRequest.resource_names = []\n```\n\n----------------------------------------\n\nTITLE: Configuring On-demand Filter Type URL in Envoy\nDESCRIPTION: Configuration type URL specification for the on-demand filter that must be used when setting up the filter in Envoy's HTTP connection manager.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/on_demand_updates_filter.rst#2025-04-23_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\ntype.googleapis.com/envoy.extensions.filters.http.on_demand.v3.OnDemand\n```\n\n----------------------------------------\n\nTITLE: Querying Prometheus Formatted Summary Stats\nDESCRIPTION: Example output from the /stats endpoint in Prometheus format, showing summary statistics for server initialization time.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/operations/admin.rst#2025-04-23_snippet_11\n\nLANGUAGE: text\nCODE:\n```\n# TYPE envoy_server_initialization_time_ms summary\nenvoy_server_initialization_time_ms{quantile=\"0\"} 110.00000000000001\nenvoy_server_initialization_time_ms{quantile=\"0.25\"} 112.50000000000001\nenvoy_server_initialization_time_ms{quantile=\"0.5\"} 115.00000000000001\nenvoy_server_initialization_time_ms{quantile=\"0.75\"} 117.50000000000001\nenvoy_server_initialization_time_ms{quantile=\"0.9\"} 119.00000000000001\nenvoy_server_initialization_time_ms{quantile=\"0.95\"} 119.50000000000001\nenvoy_server_initialization_time_ms{quantile=\"0.99\"} 119.90000000000002\nenvoy_server_initialization_time_ms{quantile=\"0.995\"} 119.95000000000002\nenvoy_server_initialization_time_ms{quantile=\"0.999\"} 119.99000000000001\nenvoy_server_initialization_time_ms{quantile=\"1\"} 120.00000000000001\nenvoy_server_initialization_time_ms_sum{} 115.000000000000014210854715202\nenvoy_server_initialization_time_ms_count{} 1\n```\n\n----------------------------------------\n\nTITLE: Building Go Plugin with Bazel\nDESCRIPTION: Commands to check Go version and build a shared library (.so) file for a Golang plugin using Bazel\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/listeners/network_filters/golang_filter.rst#2025-04-23_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ bazel run @go_sdk//:bin/go -- version\n...\ngo version goX.YZ linux/amd64\n```\n\nLANGUAGE: console\nCODE:\n```\n$ bazel run @go_sdk//:bin/go build --buildmode=c-shared  -v -o path/to/output/libfoo.so path/to/src/foo\n```\n\n----------------------------------------\n\nTITLE: Configuring Certificate Validation in Envoy\nDESCRIPTION: Configuration for validating upstream TLS certificates using trusted CA and Subject Alternative Names (SANs).\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/start/quick-start/securing.rst#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ntransport_socket:\n  name: envoy.transport_sockets.tls\n  typed_config:\n    \"@type\": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext\n    common_tls_context:\n      validation_context:\n        trusted_ca:\n          filename: certs/cacert.pem\n    auto_sni: true\n    auto_san_validation: true\n```\n\n----------------------------------------\n\nTITLE: Declaring Client Feature Support in Protobuf\nDESCRIPTION: xDS clients declare their supported features in the client_features field of the Node message. Features use reverse DNS naming scheme.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/api/client_features.rst#2025-04-23_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\nconfig.core.v3.node.client_features\n```\n\n----------------------------------------\n\nTITLE: Implementing a C++ Interface Source in Envoy\nDESCRIPTION: Example of an implementation source file showing typical include patterns for implementation files in Envoy. Demonstrates how implementation source files include their headers and dependencies.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/bazel/DEVELOPER.md#2025-04-23_snippet_3\n\nLANGUAGE: c++\nCODE:\n```\n#include \"source/common/foo/bar_impl.h\"\n\n#include \"source/common/buffer/buffer_impl.h\"\n#include \"source/common/foo/bar_internal.h\"\n#include \"source/common/foo/baz_impl.h\"\n...\n```\n\n----------------------------------------\n\nTITLE: Using HeaderMapEqualRef Matcher for HeaderMap Comparison in C++\nDESCRIPTION: Illustrates the usage of the `HeaderMapEqualRef` custom Google Mock matcher. This matcher checks if the actual `HeaderMap` argument (e.g., `response->headers()`) is equal to an expected `HeaderMap` (`expected_headers`). `HeaderMapEqual` serves a similar purpose but compares pointers and requires the argument to be a `HeaderMapPtr`.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/test/README.md#2025-04-23_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\nEXPECT_THAT(response->headers(), HeaderMapEqualRef(expected_headers));\n```\n\n----------------------------------------\n\nTITLE: Basic Golang HTTP TCP Bridge Configuration\nDESCRIPTION: YAML configuration for setting up a basic Golang HTTP TCP Bridge with a prebuilt .so file\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/tcp_bridge/golang.rst#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ntyped_config:\n  \"@type\": type.googleapis.com/envoy.extensions.upstreams.http.tcp.golang.v3alpha.Config\n  library_id: \"my_bridge\"\n  library_path: \"<path-to>/my_bridge.so\"\n  plugin_name: \"example\"\n  plugin_config: {}\n```\n\n----------------------------------------\n\nTITLE: Processing Response Metadata in Envoy StreamEncoderFilter (C++)\nDESCRIPTION: Defines the C++ interface `encodeMetadata` within `StreamEncoderFilter` for handling metadata received on a response stream from upstream. The filter receives the metadata in the `metadata` map and can modify it to consume, alter, or allow proxying of the metadata to the downstream. The return status likely influences filter chain processing.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/source/docs/h2_metadata.md#2025-04-23_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\nFilterMetadataStatus StreamEncoderFilter::encodeMetadata(MetadataMap&\nmetadata);\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Route Check Test Case in YAML\nDESCRIPTION: This YAML snippet demonstrates a minimal test case for the Envoy Route Table Check Tool. It defines a test named 'cluster_name_test' that simulates a GET request to 'api.lyft.com/api/locations' and validates that it routes to the 'instant-server' cluster.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/operations/tools/router_check.rst#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntests:\n- test_name: cluster_name_test\n  input:\n    authority: api.lyft.com\n    path: /api/locations\n    method: GET\n  validate:\n    cluster_name: instant-server\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Fine-Grain Logger Macros in C++\nDESCRIPTION: Demonstrates the basic usage of the FINE_GRAIN_LOG macro in C++ to log messages with specific severity levels (info and error). These macros automatically include file context in the log output if the message level meets the configured threshold for that file.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/source/docs/fine_grain_log.md#2025-04-23_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\n  FINE_GRAIN_LOG(info, \"Hello world! Here's a line of fine-grain log!\");\n  FINE_GRAIN_LOG(error, \"FineGrainLog Error! Here's the second message!\");\n```\n\n----------------------------------------\n\nTITLE: Analyzing Envoy Heap Profile with pprof\nDESCRIPTION: Command to analyze a heap profile using pprof with an interactive web interface on a specified port.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/faq/debugging/how_to_dump_heap_profile_of_envoy.rst#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npprof -http localhost:9999 /heap/output/envoy.heap\n```\n\n----------------------------------------\n\nTITLE: Documenting Access Log Format Variables in Envoy\nDESCRIPTION: This snippet lists and explains various access log format variables used in Envoy, detailing their implementation across HTTP, TCP, and UDP protocols. It includes information on byte counts, request attempts, duration metrics, and response flags.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/observability/access_log/usage.rst#2025-04-23_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\n%BYTES_SENT%\n  HTTP/THRIFT\n    Body bytes sent. For WebSocket connection it will also include response header bytes.\n\n  TCP\n    Downstream bytes sent on connection.\n\n  UDP\n    Bytes sent to the downstream in the UDP session.\n\n%UPSTREAM_REQUEST_ATTEMPT_COUNT%\n  HTTP\n    Number of times the request is attempted upstream. Note that an attempt count of '0' means that\n    the request was never attempted upstream.\n\n  TCP\n    Number of times the connection request is attempted upstream. Note that an attempt count of '0'\n    means that the connection request was never attempted upstream.\n\n  UDP\n    Not implemented (0).\n\n  Renders a numeric value in typed JSON logs.\n\n%UPSTREAM_WIRE_BYTES_SENT%\n  HTTP\n    Total number of bytes sent to the upstream by the http stream.\n\n  TCP\n    Total number of bytes sent to the upstream by the tcp proxy.\n\n  UDP\n    Total number of bytes sent to the upstream stream, For UDP tunneling flows. Not supported for non-tunneling.\n\n%UPSTREAM_WIRE_BYTES_RECEIVED%\n  HTTP\n    Total number of bytes received from the upstream by the http stream.\n\n  TCP\n    Total number of bytes received from the upstream by the tcp proxy.\n\n  UDP\n    Total number of bytes received from the upstream stream, For UDP tunneling flows. Not supported for non-tunneling.\n\n%UPSTREAM_HEADER_BYTES_SENT%\n  HTTP\n    Number of header bytes sent to the upstream by the http stream.\n\n  TCP\n    Not implemented (0).\n\n  UDP\n    Total number of HTTP header bytes sent to the upstream stream, For UDP tunneling flows. Not supported for non-tunneling.\n\n%UPSTREAM_HEADER_BYTES_RECEIVED%\n  HTTP\n    Number of header bytes received from the upstream by the http stream.\n\n  TCP\n    Not implemented (0).\n\n  UDP\n    Total number of HTTP header bytes received from the upstream stream, For UDP tunneling flows. Not supported for non-tunneling.\n\n%DOWNSTREAM_WIRE_BYTES_SENT%\n  HTTP\n    Total number of bytes sent to the downstream by the http stream.\n\n  TCP\n    Total number of bytes sent to the downstream by the tcp proxy.\n\n  UDP\n    Not implemented (0).\n\n%DOWNSTREAM_WIRE_BYTES_RECEIVED%\n  HTTP\n    Total number of bytes received from the downstream by the http stream. Envoy over counts sizes of received HTTP/1.1 pipelined requests by adding up bytes of requests in the pipeline to the one currently being processed.\n\n  TCP\n    Total number of bytes received from the downstream by the tcp proxy.\n\n  UDP\n    Not implemented (0).\n\n%DOWNSTREAM_HEADER_BYTES_SENT%\n  HTTP\n    Number of header bytes sent to the downstream by the http stream.\n\n  TCP/UDP\n    Not implemented (0).\n\n%DOWNSTREAM_HEADER_BYTES_RECEIVED%\n  HTTP\n    Number of header bytes received from the downstream by the http stream.\n\n  TCP/UDP\n    Not implemented (0).\n\n  Renders a numeric value in typed JSON logs.\n\n%DURATION%\n  HTTP/THRIFT\n    Total duration in milliseconds of the request from the start time to the last byte out.\n\n  TCP\n    Total duration in milliseconds of the downstream connection.\n\n  UDP\n    Not implemented (0).\n\n  Renders a numeric value in typed JSON logs.\n\n%COMMON_DURATION(START:END:PRECISION)%\n  HTTP\n    Total duration between the START time point and the END time point in specific PRECISION.\n    The START and END time points are specified by the following values (NOTE: all values\n    here are case-sensitive):\n\n    * ``DS_RX_BEG``: The time point of the downstream request receiving begin.\n    * ``DS_RX_END``: The time point of the downstream request receiving end.\n    * ``US_CX_BEG``: The time point of the upstream TCP connect begin.\n    * ``US_CX_END``: The time point of the upstream TCP connect end.\n    * ``US_HS_END``: The time point of the upstream TLS handshake end.\n    * ``US_TX_BEG``: The time point of the upstream request sending begin.\n    * ``US_TX_END``: The time point of the upstream request sending end.\n    * ``US_RX_BEG``: The time point of the upstream response receiving begin.\n    * ``US_RX_END``: The time point of the upstream response receiving end.\n    * ``DS_TX_BEG``: The time point of the downstream response sending begin.\n    * ``DS_TX_END``: The time point of the downstream response sending end.\n    * Dynamic value: Other values will be treated as custom time points that are set by named keys.\n\n    NOTE: Upstream connection establishment time points (US_CX_*, US_HS_END) repeat for all requests\n    in a given connection.\n\n    The PRECISION is specified by the following values (NOTE: all values here are case-sensitive):\n\n    * ``ms``: Millisecond precision.\n    * ``us``: Microsecond precision.\n    * ``ns``: Nanosecond precision.\n\n    NOTE: enabling independent half-close behavior for H/2 and H/3 protocols can produce\n    ``*_TX_END`` values lower than ``*_RX_END`` values, in cases where upstream peer has half-closed\n    its stream before downstream peer. In these cases ``COMMON_DURATION`` value will become negative.\n\n  TCP/UDP\n    Not implemented (\"-\").\n\n%REQUEST_DURATION%\n  HTTP\n    Total duration in milliseconds of the request from the start time to the last byte of\n    the request received from the downstream.\n\n  TCP/UDP\n    Not implemented (\"-\").\n\n  Renders a numeric value in typed JSON logs.\n\n%REQUEST_TX_DURATION%\n  HTTP\n    Total duration in milliseconds of the request from the start time to the last byte sent upstream.\n\n  TCP/UDP\n    Not implemented (\"-\").\n\n  Renders a numeric value in typed JSON logs.\n\n%RESPONSE_DURATION%\n  HTTP\n    Total duration in milliseconds of the request from the start time to the first byte read from the\n    upstream host.\n\n  TCP/UDP\n    Not implemented (\"-\").\n\n  Renders a numeric value in typed JSON logs.\n\n%ROUNDTRIP_DURATION%\n  HTTP/3 (QUIC)\n    Total duration in milliseconds of the request from the start time to receiving the final ack from\n    the downstream.\n\n  HTTP/1 and HTTP/2\n    Not implemented (\"-\").\n\n  TCP/UDP\n    Not implemented (\"-\").\n\n  Renders a numeric value in typed JSON logs.\n\n%RESPONSE_TX_DURATION%\n  HTTP\n    Total duration in milliseconds of the request from the first byte read from the upstream host to the last\n    byte sent downstream.\n\n  TCP/UDP\n    Not implemented (\"-\").\n\n  Renders a numeric value in typed JSON logs.\n\n%DOWNSTREAM_HANDSHAKE_DURATION%\n  HTTP\n    Not implemented (\"-\").\n\n  TCP\n    Total duration in milliseconds from the start of the connection to the TLS handshake being completed.\n\n  UDP\n    Not implemented (\"-\").\n\n  Renders a numeric value in typed JSON logs.\n\n%UPSTREAM_CONNECTION_POOL_READY_DURATION%\n  HTTP/TCP\n    Total duration in milliseconds from when the upstream request was created to when the connection pool is ready.\n\n  UDP\n    Not implemented (\"-\").\n\n  Renders a numeric value in typed JSON logs.\n\n%RESPONSE_FLAGS% / %RESPONSE_FLAGS_LONG%\n  Additional details about the response or connection, if any. For TCP connections, the response codes mentioned in\n  the descriptions do not apply. %RESPONSE_FLAGS% will output a short string. %RESPONSE_FLAGS_LONG% will output a Pascal case string.\n  Possible values are:\n\nHTTP and TCP\n\n.. csv-table::\n  :header: Long name, Short name, Description\n  :widths: 1, 1, 3\n\n  **NoHealthyUpstream**, **UH**, No healthy upstream hosts in upstream cluster in addition to 503 response code.\n  **UpstreamConnectionFailure**, **UF**, Upstream connection failure in addition to 503 response code.\n  **UpstreamOverflow**, **UO**, Upstream overflow (:ref:`circuit breaking <arch_overview_circuit_break>`) in addition to 503 response code.\n  **NoRouteFound**, **NR**, No :ref:`route configured <arch_overview_http_routing>` for a given request in addition to 404 response code or no matching filter chain for a downstream connection.\n  **UpstreamRetryLimitExceeded**, **URX**, The request was rejected because the :ref:`upstream retry limit (HTTP) <envoy_v3_api_field_config.route.v3.RetryPolicy.num_retries>`  or :ref:`maximum connect attempts (TCP) <envoy_v3_api_field_extensions.filters.network.tcp_proxy.v3.TcpProxy.max_connect_attempts>` was reached.\n  **NoClusterFound**, **NC**, Upstream cluster not found.\n  **DurationTimeout**, **DT**, When a request or connection exceeded :ref:`max_connection_duration <envoy_v3_api_field_config.core.v3.HttpProtocolOptions.max_connection_duration>` or :ref:`max_downstream_connection_duration <envoy_v3_api_field_extensions.filters.network.tcp_proxy.v3.TcpProxy.max_downstream_connection_duration>`.\n\nHTTP only\n\n.. csv-table::\n  :header: Long name, Short name, Description\n  :widths: 1, 1, 3\n\n  **DownstreamConnectionTermination**, **DC**, Downstream connection termination.\n  **FailedLocalHealthCheck**, **LH**, Local service failed :ref:`health check request <arch_overview_health_checking>` in addition to 503 response code.\n  **UpstreamRequestTimeout**, **UT**, Upstream request timeout in addition to 504 response code.\n  **LocalReset**, **LR**, Connection local reset in addition to 503 response code.\n  **UpstreamRemoteReset**, **UR**, Upstream remote reset in addition to 503 response code.\n  **UpstreamConnectionTermination**, **UC**, Upstream connection termination in addition to 503 response code.\n  **DelayInjected**, **DI**, The request processing was delayed for a period specified via :ref:`fault injection <config_http_filters_fault_injection>`.\n  **FaultInjected**, **FI**, The request was aborted with a response code specified via :ref:`fault injection <config_http_filters_fault_injection>`.\n  **RateLimited**, **RL**, The request was ratelimited locally by the :ref:`HTTP rate limit filter <config_http_filters_rate_limit>` in addition to 429 response code.\n  **UnauthorizedExternalService**, **UAEX**, The request was denied by the external authorization service.\n  **RateLimitServiceError**, **RLSE**, The request was rejected because there was an error in rate limit service.\n```\n\n----------------------------------------\n\nTITLE: Approved Certificates Response Structure in JSON\nDESCRIPTION: JSON structure defining the response format for the /v1/certs/list/approved API endpoint that returns the list of approved certificates.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/listeners/network_filters/client_ssl_auth_filter.rst#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"certificates\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Dynamic Metadata Entry in Envoy Lua\nDESCRIPTION: Defines the `set()` method on the `dynamicMetadata` object. It takes `filterName` (string), `key` (string), and `value` (Lua type: table, numeric, boolean, string, or nil) to set a specific metadata entry for the specified filter.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/lua_filter.rst#2025-04-23_snippet_41\n\nLANGUAGE: lua\nCODE:\n```\ndynamicMetadata:set(filterName, key, value)\n```\n\n----------------------------------------\n\nTITLE: Building Envoy with a Custom Distdir\nDESCRIPTION: Command for building Envoy with a custom distribution directory for prefetched dependencies. This allows Bazel to use local tarballs instead of downloading during build time.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/bazel/EXTERNAL_DEPS.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nbazel build --distdir=$HOME/envoy_distdir //source/exe:envoy\n```\n\n----------------------------------------\n\nTITLE: Reopening Access Logs - HTTP POST\nDESCRIPTION: Endpoint that triggers reopening of all access logs, similar to SIGUSR1 signal handling.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/operations/admin.rst#2025-04-23_snippet_15\n\nLANGUAGE: http\nCODE:\n```\nPOST /reopen_logs\n```\n\n----------------------------------------\n\nTITLE: Generating Proto Descriptor Set for gRPC-JSON Transcoding\nDESCRIPTION: Commands to clone the googleapis repository and generate a protobuf descriptor set for the gRPC service using protoc. This is required for Envoy to perform the transcoding.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/grpc_json_reverse_transcoder_filter.rst#2025-04-23_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ git clone https://github.com/googleapis/googleapis\n$ GOOGLEAPIS_DIR=<your-local-googleapis-folder>\n```\n\nLANGUAGE: console\nCODE:\n```\n$ protoc -I${GOOGLEAPIS_DIR} -I. --include_imports --include_source_info \\\n    --descriptor_set_out=proto.pb test/proto/bookstore.proto\n```\n\n----------------------------------------\n\nTITLE: Generating Fuzzing Coverage Reports for Envoy\nDESCRIPTION: Command that generates coverage reports specifically for fuzzing targets. This runs the fuzzing target against the libfuzzer engine using its corpus as initial seed inputs.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/bazel/README.md#2025-04-23_snippet_44\n\nLANGUAGE: bash\nCODE:\n```\nFUZZ_COVERAGE=true VALIDATE_COVERAGE=false test/run_envoy_bazel_coverage.sh\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies on macOS for Envoy Bazel Build\nDESCRIPTION: This command installs necessary dependencies on macOS using Homebrew for building Envoy with Bazel.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/bazel/README.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nbrew install coreutils wget libtool go bazelisk clang-format autoconf aspell\n```\n\n----------------------------------------\n\nTITLE: Generating Bazel Build Explanation\nDESCRIPTION: Commands to generate detailed explanations of why Bazel rebuilds targets, with options for basic and verbose output.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/bazel/README.md#2025-04-23_snippet_48\n\nLANGUAGE: shell\nCODE:\n```\nbazel build --explain=file.txt envoy\n```\n\nLANGUAGE: shell\nCODE:\n```\nbazel build --explain=file.txt --verbose_explanations envoy\n```\n\n----------------------------------------\n\nTITLE: Configuring DynamoDB Filter Type URL in YAML\nDESCRIPTION: Specifies the type URL for configuring the DynamoDB filter in Envoy Proxy.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/dynamodb_filter.rst#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntype.googleapis.com/envoy.extensions.filters.http.dynamo.v3.Dynamo\n```\n\n----------------------------------------\n\nTITLE: Generic Proxy Access Log Configuration\nDESCRIPTION: Configuration for access logging in generic proxy with custom format string including method, path and status code.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/listeners/network_filters/generic_proxy_filter.rst#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\naccess_log:\n  - name: envoy.access_loggers.file\n    typed_config:\n      '@type': type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog\n      path: /dev/stdout\n      format: '[%START_TIME%] Method: %METHOD%, Path: %PATH%, ResponseCode: %RESPONSE_CODE%'\n\n```\n\n----------------------------------------\n\nTITLE: Build iOS Static Framework with Bazel - Bash\nDESCRIPTION: Builds the Envoy Mobile iOS static framework using Bazel via the ios_dist target and --config=ios. Output is a framework zip suitable for use in iOS apps. Requires Bazel, Xcode, and the correct iOS SDK settings. Path to output is determined by Bazel.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/mobile/docs/root/start/building/building.rst#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n./bazelw build ios_dist --config=ios\n```\n\n----------------------------------------\n\nTITLE: Configuring SNI in Envoy Listener\nDESCRIPTION: Configuration for Server Name Indication (SNI) to handle multiple TLS domains on the same IP address.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/start/quick-start/securing.rst#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n    filter_chains:\n    - filter_chain_match:\n        server_names:\n        - \"example.com\"\n```\n\n----------------------------------------\n\nTITLE: Implementing a Tool with Checker Class\nDESCRIPTION: Python implementation of a checking/linting tool using the Checker base class. Demonstrates implementing multiple checks with error handling and result reporting.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/tools/README.md#2025-04-23_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n#!/usr/bin/env python3\n\nimport sys\n\nfrom tools.base.checker import Checker\n\n\nclass MyChecker(Checker):\n    checks = (\"check1\", \"check2\")\n\n    def check_check1(self) -> None:\n        # checking code for check1\n        try:\n            do_something()\n        except NotSuchABadError:\n            self.warn(\"check1\", [\"Doing something didn't work out quite as expected 8/\"])\n        except ATerribleError:\n            self.error(\"check1\", [\"Oh noes, something went badly wrong! 8(\"])\n        else:\n            self.succeed(\"check1\", [\"All good 8)\"])\n\n    def check_check2(self) -> None:\n        # checking code for check2\n        try:\n            do_something_else()\n        except NotSuchABadError:\n            self.warn(\"check2\", [\"Doing something else didn't work out quite as expected 8/\"])\n        except ATerribleError:\n            self.error(\"check2\", [\"Oh noes, something else went badly wrong! 8(\"])\n        else:\n            self.succeed(\"check2\", [\"All good 8)\"])\n\n\ndef main(*args) -> int:\n    return MyChecker(*args).run()\n\n\nif __name__ == \"__main__\":\n    sys.exit(main(*sys.argv[1:]))\n```\n\n----------------------------------------\n\nTITLE: Implementing a Tool with Runner Class\nDESCRIPTION: Python implementation of a command-line tool using the Runner base class. Creates a tool that fetches package information from PyPI and outputs it as YAML.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/tools/README.md#2025-04-23_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n#!/usr/bin/env python3\n\nimport sys\n\nimport requests\nimport yaml\n\nfrom tools.base.runner import Runner\n\n\nclass Mytool(Runner):\n\n    def add_arguments(self, parser):\n        parser.add_argument(\"package\", help=\"Package to fetch info for\")\n\n    def run(self) -> int:\n        sys.stdout.write(\n            yaml.dump(\n                requests.get(\n                    f\"https://pypi.python.org/pypi/{self.args.package}/json\").json()))\n        return 0\n\n\ndef main(*args) -> int:\n    return Mytool(*args).run()\n\n\nif __name__ == \"__main__\":\n    sys.exit(main(*sys.argv[1:]))\n```\n\n----------------------------------------\n\nTITLE: Building the Envoy Mobile Test Binary with Size Optimization (Shell/Bash)\nDESCRIPTION: This command invokes the Bazel build system to compile the Envoy Mobile test binary (//test/performance:test_binary_size), using specific flags to optimize for size and enable debug information. Key flags include --config=sizeopt, --copt=-ggdb3, and --linkopt=-fuse-ld=lld, whose roles are described in the file. Dependencies: A system with the toolchain set up per earlier script and Bazel installed. Inputs: Bazel build targets and configuration; outputs: size-optimized, debug-enabled binary.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/mobile/docs/root/development/performance/binary_size.rst#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n./bazelw build //test/performance:test_binary_size --config=sizeopt --copt=-ggdb3 --linkopt=-fuse-ld=lld\n```\n\n----------------------------------------\n\nTITLE: Generating Envoy Example Configurations using Bazel\nDESCRIPTION: Commands to generate example configurations using Bazel build system. Creates output directory, builds configurations, and extracts them to the generated/configs directory.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/operations/tools/config_generator.rst#2025-04-23_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nmkdir -p generated/configs\nbazel build //configs:example_configs\ntar xvf $PWD/bazel-out/k8-fastbuild/bin/configs/example_configs.tar -C generated/configs\n```\n\n----------------------------------------\n\nTITLE: Starting gRPC Stream in Swift\nDESCRIPTION: Example of starting and managing a gRPC stream in Swift, showing stream client creation, header setup, and stream lifecycle management.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/mobile/docs/root/api/grpc.rst#2025-04-23_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\nlet streamClient = StreamClientBuilder()\n    ...\n    .build()\n  let grpcClient = GRPCClient(streamClient: streamClient)\n\n  let requestHeaders = GRPCRequestHeadersBuilder()\n    ...\n    .build()\n  let prototype = grpcClient\n    .newGRPCStreamPrototype()\n    ...\n  let stream = prototype\n    .start(queue: .main)\n    .sendHeaders(...)\n    .sendMessage(...)\n\n  ...\n  stream.close(...)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Downstream Direct Remote Address in Envoy Lua\nDESCRIPTION: Calls the `downstreamDirectRemoteAddress()` method on the `streamInfo` object within an Envoy Lua filter. It returns a string representing the address of the physical network connection from the downstream client.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/lua_filter.rst#2025-04-23_snippet_34\n\nLANGUAGE: lua\nCODE:\n```\nstreamInfo:downstreamDirectRemoteAddress()\n```\n\n----------------------------------------\n\nTITLE: Getting Peer Certificate Valid From Time in Lua\nDESCRIPTION: Returns the timestamp-since-epoch in seconds when the peer certificate was issued and becomes valid. Returns 0 if there is no peer certificate.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/lua_filter.rst#2025-04-23_snippet_61\n\nLANGUAGE: lua\nCODE:\n```\ndownstreamSslConnection:validFromPeerCertificate()\n```\n\n----------------------------------------\n\nTITLE: Enforcing Minimum Route Coverage with Route Check Tool in Bash\nDESCRIPTION: This Bash command demonstrates using the `--fail-under` (or `-f`) flag with the Envoy Route Table Check Tool. It runs the tests against the specified configuration and test files, calculates the route coverage, and exits with an error if the coverage percentage is below the specified threshold (8% in this example).\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/operations/tools/router_check.rst#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n> bazel-bin/test/tools/router_check/router_check_tool --config-path ... --test-path ... --fail-under 8\nCurrent route coverage: 7.44863%\nFailed to meet coverage requirement: 8%\n```\n\n----------------------------------------\n\nTITLE: Updating Logger Levels using Glob Pattern (?) via Envoy Admin API\nDESCRIPTION: Demonstrates an HTTP POST request using a glob pattern (`???_listener_impl`) with the `/logging` endpoint to match specific characters and update the log level of matching files (e.g., `tcp_listener_impl.cc`, `udp_listener_impl.cc`) to 'info'.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/source/docs/fine_grain_log.md#2025-04-23_snippet_7\n\nLANGUAGE: http\nCODE:\n```\nPOST /logging?paths=???_listener_impl:info\n```\n\n----------------------------------------\n\nTITLE: Accessing Dynamic Metadata Object from StreamInfo in Envoy Lua\nDESCRIPTION: Calls the `dynamicMetadata()` method on the `streamInfo` object. It returns a dynamic metadata object wrapper, allowing access to dynamic metadata associated with the stream.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/lua_filter.rst#2025-04-23_snippet_36\n\nLANGUAGE: lua\nCODE:\n```\nstreamInfo:dynamicMetadata()\n```\n\n----------------------------------------\n\nTITLE: Defining Watchdog API Reference in reStructuredText\nDESCRIPTION: This RST code defines the structure for the Watchdog API reference documentation. It sets up a title, adds a note about Windows incompatibility, and creates a table of contents for related documentation.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/api-v3/config/watchdog/watchdog.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _watchdog_api_reference:\n\nWatchdog\n========\n\n.. note::\n\n These features are not supported on Windows.\n\n.. toctree::\n  :glob:\n  :maxdepth: 2\n\n  ../../extensions/watchdog/profile_action/v3/*\n  ../../watchdog/v3/*\n```\n\n----------------------------------------\n\nTITLE: Generating Local TSAN Bazel Configuration\nDESCRIPTION: Runs a shell script (`bazel/setup_local_tsan.sh`) provided by Envoy to generate a `local_tsan.bazelrc` file. This file contains the necessary Bazel configuration to run tests using the locally built, TSAN-instrumented libc++. Requires the path to the instrumented libc++ installation directory as an argument.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/bazel/README.md#2025-04-23_snippet_36\n\nLANGUAGE: bash\nCODE:\n```\nbazel/setup_local_tsan.sh </path/to/instrumented/libc++/home>\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies on Fedora for Envoy Bazel Build\nDESCRIPTION: This snippet shows the command to install necessary dependencies on Fedora for building Envoy with Bazel.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/bazel/README.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ndnf install \\\n    aspell-en \\\n    libatomic \\\n    libstdc++ \\\n    libstdc++-static \\\n    libtool \\\n    lld \\\n    patch \\\n    python3-pip\n```\n\n----------------------------------------\n\nTITLE: Forcing Envoy Docker Image Refresh\nDESCRIPTION: This command demonstrates how to force a refresh of the Envoy Docker build image before running the build script.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/ci/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nENVOY_DOCKER_PULL=true ./ci/run_envoy_docker.sh <build_script_args>\n```\n\n----------------------------------------\n\nTITLE: Custom Response Filter Type URL Configuration\nDESCRIPTION: Type URL configuration for the main Custom Response filter that enables response overriding functionality.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/custom_response_filter.rst#2025-04-23_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\ntype.googleapis.com/envoy.extensions.filters.http.custom_response.v3.CustomResponse\n```\n\n----------------------------------------\n\nTITLE: Resuming Trailer Processing after StopIteration\nDESCRIPTION: When a filter returns FilterTrailersStatus::StopIteration during trailer encoding/decoding, processing can be resumed by explicitly calling continueEncoding()/continueDecoding().\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/faq/extensions/contract.rst#2025-04-23_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nFilterTrailersStatus::StopIteration\n```\n\n----------------------------------------\n\nTITLE: Setting Downstream Protocol using ConfigHelper in C++\nDESCRIPTION: Illustrates how to modify the default Envoy test configuration to use HTTP/2 for downstream connections before initializing Envoy. This utilizes the `setDownstreamProtocol` method from the `ConfigHelper` utility within the C++ integration test framework.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/test/integration/README.md#2025-04-23_snippet_1\n\nLANGUAGE: c++\nCODE:\n```\n// Set the default protocol to HTTP2\nsetDownstreamProtocol(Http::CodecType::HTTP2);\n```\n\n----------------------------------------\n\nTITLE: Generating GDB Debug Configuration for Envoy Static Build (Shell/Python)\nDESCRIPTION: Invokes the Python script `generate_debug_config.py` to automatically create a VSCode debug configuration entry in `.vscode/launch.json`. This example generates a configuration named `gdb //source/exe:envoy-static` for debugging the specified Bazel target (`//source/exe:envoy-static`) with GDB, passing `\"-c envoy.yaml\"` as command-line arguments to the Envoy process. The generated configuration is compatible with the 'Native Debug' VSCode extension.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/tools/vscode/README.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ntools/vscode/generate_debug_config.py //source/exe:envoy-static --args \"-c envoy.yaml\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Stream Reset Overload Action in Envoy (YAML)\nDESCRIPTION: This YAML configuration demonstrates how to set up the Overload Manager to reset high memory streams. It includes buffer factory configuration and an overload action entry.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/operations/overload_manager/overload_manager.rst#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nbuffer_factory_config:\n  minimum_account_to_track_power_of_two: 20\nactions:\n  name: \"envoy.overload_actions.reset_high_memory_stream\"\n  triggers:\n    - name: \"envoy.resource_monitors.fixed_heap\"\n      scaled:\n        scaling_threshold: 0.85\n        saturation_threshold: 0.95\n```\n\n----------------------------------------\n\nTITLE: Running Swift Tests with Bazel\nDESCRIPTION: Command to execute the Swift unit test suite using Bazel. Includes iOS configuration and build_tests_only flag.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/mobile/docs/root/development/testing/testing.rst#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n./bazelw test --config=ios --test_output=all --build_tests_only //test/swift/...\n```\n\n----------------------------------------\n\nTITLE: DNS Cache Configuration\nDESCRIPTION: Enable DNS cache with optional save interval setting. Requires 'reserved.platform_store' key value store.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/mobile/docs/root/api/starting_envoy.rst#2025-04-23_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\nbuilder.enableDNSCache(true, saveInterval: 60)\n```\n\nLANGUAGE: swift\nCODE:\n```\nbuilder.enableDNSCache(true, saveInterval: 60)\n```\n\n----------------------------------------\n\nTITLE: Analyzing Binary Composition with Bloaty (Shell/Bash, CLI)\nDESCRIPTION: This shell command runs Bloaty on the stripped binary, using a custom configuration ('envoy.bloaty') and debug file data to analyze the composition of the binary per section, bloaty package, and compile units. Key parameters include --debug-file, -c (config), and -d (report dimensions). Prerequisites: Compiled and stripped binary, bloaty tool, and envoy.bloaty custom config file. Outputs: A terminal report breaking down binary size contributions.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/mobile/docs/root/development/performance/binary_size.rst#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nbloaty --debug-file=bin/test_binary_size -c envoy.bloaty -d sections,bloaty_package,compileunits bin/test_binary_size.stripped\n```\n\n----------------------------------------\n\nTITLE: Fetching Connection-Level Stream Info in Envoy Lua Filter (Lua)\nDESCRIPTION: Retrieves per-connection stream info via the Lua handle, distinct from the per-request streamInfo. Useful for metrics, diagnostics, or custom access logging tied to the connection. Only available within the context of an HTTP request within Envoy's Lua filter.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/lua_filter.rst#2025-04-23_snippet_21\n\nLANGUAGE: lua\nCODE:\n```\nlocal connectionStreamInfo = handle:connectionStreamInfo()\n```\n\n----------------------------------------\n\nTITLE: Adding Response Metadata via Envoy StreamEncoderFilterCallbacks (C++)\nDESCRIPTION: Defines the C++ interface `addEncodedMetadata` from `StreamEncoderFilterCallbacks`. A `StreamEncoderFilter` calls this method (except within `encodeMetadata`) to add a new metadata map (passed via `metadata_map_ptr`) to the response stream, which will then be processed by subsequent filters and proxied downstream.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/source/docs/h2_metadata.md#2025-04-23_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\nStreamEncoderFilterCallbacks::addEncodedMetadata(MetadataMapPtr&& metadata\\_map\\_ptr)\n```\n\n----------------------------------------\n\nTITLE: Configuring Trie-based Path Matching in Envoy Proxy (YAML)\nDESCRIPTION: This snippet demonstrates how to configure a single trie structure for matching URL paths in the :path header. It uses prefix_match_map to create a trie for efficient longest prefix matching.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/intro/arch_overview/advanced/matching/matching_api.rst#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nstatic_resources:\n  listeners:\n  - address:\n      socket_address:\n        address: 0.0.0.0\n        port_value: 8081\n    filter_chains:\n    - filters:\n      - name: envoy.filters.network.http_connection_manager\n        typed_config:\n          \"@type\": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager\n          codec_type: AUTO\n          stat_prefix: ingress_http\n          route_config:\n            name: local_route\n            virtual_hosts:\n            - name: local_service\n              domains:\n              - \"*\"\n              routes:\n              - match:\n                  safe_regex:\n                    regex: \".*\"\n                route:\n                  cluster: generic_matcher_service\n          http_filters:\n          - name: envoy.filters.http.router\n            typed_config:\n              \"@type\": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router\n  clusters:\n  - name: generic_matcher_service\n    connect_timeout: 0.250s\n    type: STRICT_DNS\n    lb_policy: ROUND_ROBIN\n    load_assignment:\n      cluster_name: generic_matcher_service\n      endpoints:\n      - lb_endpoints:\n        - endpoint:\n            address:\n              socket_address:\n                address: cluster1\n                port_value: 8080\n```\n\n----------------------------------------\n\nTITLE: Using HttpStatusIs Matcher for Status Code Validation in C++\nDESCRIPTION: Shows how to use the `HttpStatusIs` custom Google Mock matcher to assert that a `HeaderMap` argument corresponds to a specific HTTP status code. The status code can be passed as a string (e.g., \"200\") or an integer.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/test/README.md#2025-04-23_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\nEXPECT_THAT(response->headers(), HttpStatusIs(\"200\"));\n```\n\n----------------------------------------\n\nTITLE: Using %ENVIRONMENT(X):Z% in Envoy Access Logs\nDESCRIPTION: Demonstrates the usage of %ENVIRONMENT(X):Z% substitution string in Envoy access logs. It retrieves the value of environment variable X. If X is not a valid environment variable, '-' is used. Z is an optional parameter for string truncation.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/observability/access_log/usage.rst#2025-04-23_snippet_14\n\nLANGUAGE: plaintext\nCODE:\n```\n%ENVIRONMENT(X):Z%\n```\n\n----------------------------------------\n\nTITLE: Configuring Proxy Protocol Transport Socket in Envoy\nDESCRIPTION: YAML configuration for setting up a Proxy Protocol Transport Socket in Envoy. This allows forwarding client IP information to upstream servers before the main TCP stream begins. The configuration uses a raw buffer transport socket wrapped in a proxy protocol transport socket.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/intro/arch_overview/other_features/ip_transparency.rst#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nclusters:\n- name: service1\n  connect_timeout: 0.25s\n  type: strict_dns\n  lb_policy: round_robin\n  transport_socket:\n    name: envoy.transport_sockets.upstream_proxy_protocol\n    typed_config:\n      \"@type\": type.googleapis.com/envoy.extensions.transport_sockets.proxy_protocol.v3.ProxyProtocolUpstreamTransport\n      config:\n        version: V1\n      transport_socket:\n        name: envoy.transport_sockets.raw_buffer\n        typed_config:\n          \"@type\": type.googleapis.com/envoy.extensions.transport_sockets.raw_buffer.v3.RawBuffer\n  ...\n```\n\n----------------------------------------\n\nTITLE: Retrieving Peer Certificate Serial Number in Envoy Lua\nDESCRIPTION: Calls the `serialNumberPeerCertificate()` method on the `downstreamSslConnection` object. It returns the serial number of the peer certificate as a string. Returns an empty string if no peer certificate or serial number exists.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/lua_filter.rst#2025-04-23_snippet_49\n\nLANGUAGE: lua\nCODE:\n```\ndownstreamSslConnection:serialNumberPeerCertificate()\n```\n\n----------------------------------------\n\nTITLE: Example Envoy Streamed Trace Segment (Request Headers - YAML)\nDESCRIPTION: An example YAML representation of an `http_streamed_trace_segment` emitted by Envoy's tap filter when streaming is enabled, as configured previously. This specific segment contains the unique `trace_id` (e.g., 1) and the captured `request_headers`. Multiple such segments are emitted for a single tapped request.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/tap_filter.rst#2025-04-23_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n.. code-block:: yaml\n\n  http_streamed_trace_segment:\n    trace_id: 1\n    request_headers:\n      headers:\n        - key: a\n          value: b\n```\n\n----------------------------------------\n\nTITLE: Email Template: Confidential Distributor Security Release Notice\nDESCRIPTION: Template for providing advanced notice to Envoy Private Distributors List about upcoming security releases, including confidential CVE details and embargo information.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/security/email-templates.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nSubject: [CONFIDENTIAL] Upcoming security release of Envoy $VERSION\nTo: cncf-envoy-distributors-announce@lists.cncf.io\nCc: envoy-security@googlegroups.com\n\nHello Envoy Distributors,\n\nThe Envoy security team would like to provide advanced notice to the Envoy\nPrivate Distributors List of some details on the pending Envoy $VERSION\nsecurity release, following the process described at\nhttps://github.com/envoyproxy/envoy/blob/main/SECURITY.md.\n\nThis release will be made available on the $ORDINALDAY of $MONTH $YEAR at\n$PDTHOUR PDT ($GMTHOUR GMT). This release will fix $NUMDEFECTS security\ndefect(s). The highest rated security defect is considered $SEVERITY severity.\n\nBelow we provide details of these vulnerabilities under our embargo policy\n(https://github.com/envoyproxy/envoy/blob/main/SECURITY.md#embargo-policy).\nThis information should be treated as confidential until public release by the\nEnvoy maintainers on the Envoy GitHub.\n\nWe will address the following CVE(s):\n\n* CVE-YEAR-ABCDEF (CVSS score $CVSS, $SEVERITY): $CVESUMMARY\n  - Link to the appropriate section of the CVE writeup document with gh-cve-template.md content.\n...\n\nWe intend to make candidates release patches available under embargo on the\n$ORDINALDAY of $MONTH $YEAR, which you may use for testing and preparing your\ndistributions.\n\nPlease direct further communication amongst private distributors to this list\nor to envoy-security@googlegroups.com for direct communication with the Envoy\nsecurity team.\n\nThanks,\n$PERSON (on behalf of the Envoy security team and maintainers)\n```\n\n----------------------------------------\n\nTITLE: Setting Runtime Flags for OCSP Response Handling in Envoy\nDESCRIPTION: Example of runtime flags that can be used to adjust OCSP response requirements and override the OCSP policy in Envoy. These flags default to 'true' and can be set to 'false' to modify behavior.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/intro/arch_overview/security/ssl.rst#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nruntime:\n  overrides:\n    envoy.reloadable_features.require_ocsp_response_for_must_staple_certs: false\n    envoy.reloadable_features.check_ocsp_policy: false\n```\n\n----------------------------------------\n\nTITLE: Retrieving Peer Certificate OIDs in Envoy Lua\nDESCRIPTION: Calls the `oidsPeerCertificate()` method on the `downstreamSslConnection` object. It returns a Lua table containing the string representation of Object Identifiers (OIDs) present in the peer certificate's extensions. Returns an empty table if no peer certificate or OIDs exist.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/lua_filter.rst#2025-04-23_snippet_59\n\nLANGUAGE: lua\nCODE:\n```\ndownstreamSslConnection:oidsPeerCertificate()\n```\n\n----------------------------------------\n\nTITLE: Setting up Python Environment on Windows for Envoy Bazel Build\nDESCRIPTION: These commands set up the Python environment on Windows for building Envoy, including creating necessary symlinks and installing the wheel package.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/bazel/README.md#2025-04-23_snippet_11\n\nLANGUAGE: cmd\nCODE:\n```\nmklink %USERPROFILE%\\Python39\\python3.exe %USERPROFILE%\\Python39\\python.exe\nset PATH=%USERPROFILE%\\Python39;%PATH%\nset PATH=%USERPROFILE%\\Python39\\Scripts;%PATH%\npip install wheel\n```\n\n----------------------------------------\n\nTITLE: Starting Android Emulator and App\nDESCRIPTION: Shell commands to first start the Android emulator and then launch the hello world example app. The commands must be run from the mobile root directory and require waiting for the emulator to fully boot before starting the app.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/mobile/examples/kotlin/hello_world/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ examples/kotlin/hello_world/start_emulator.sh # Wait until the emulator is fully booted up.\n$ examples/kotlin/hello_world/start_app.sh\n```\n\n----------------------------------------\n\nTITLE: Generating Compile Commands for Envoy\nDESCRIPTION: This command shows how to generate compile commands for clangd or other tools using the Envoy CI script.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/ci/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nENVOY_GEN_COMPDB_OPTIONS=\"--vscode --exclude_contrib\" ./ci/do_ci.sh refresh_compdb\n```\n\n----------------------------------------\n\nTITLE: Configuring Echo Network Filter Type URL in Envoy\nDESCRIPTION: Protocol buffer type URL configuration for the Echo network filter. This URL must be used when configuring the filter in Envoy's configuration.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/listeners/network_filters/echo_filter.rst#2025-04-23_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\ntype.googleapis.com/envoy.extensions.filters.network.echo.v3.Echo\n```\n\n----------------------------------------\n\nTITLE: Building Optimized Release Version of Envoy\nDESCRIPTION: Command for building a release version of Envoy with optimizations enabled, binary stripping applied, and build identification included. This configuration ignores local .bazelrc files for reproducibility.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/bazel/README.md#2025-04-23_snippet_42\n\nLANGUAGE: bash\nCODE:\n```\nbazel --bazelrc=/dev/null build -c opt envoy.stripped\n```\n\n----------------------------------------\n\nTITLE: Defining a Protobuf-Based Fuzz Test Entry Point in C++\nDESCRIPTION: Defines the function signature for an Envoy fuzz test specifically designed to consume Protobuf messages, using the `DEFINE_PROTO_FUZZER` macro provided by libprotobuf-mutator integration. The fuzzing engine provides a structured `MyMessageType` object (`input`) directly to the test function, simplifying tests for Protobuf-based components.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/test/fuzz/README.md#2025-04-23_snippet_1\n\nLANGUAGE: c++\nCODE:\n```\nDEFINE_PROTO_FUZZER(const MyMessageType& input) {\n  // Your test code goes here\n}\n```\n\n----------------------------------------\n\nTITLE: Building Release Version with Tar Archive\nDESCRIPTION: Command to build a release version of Envoy and package it in a tar.gz file\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/ci/README.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n./ci/run_envoy_docker.sh './ci/do_ci.sh release.server_only.binary'\n```\n\n----------------------------------------\n\nTITLE: Configuring Load Balancer Subsets in Envoy YAML\nDESCRIPTION: This YAML configuration demonstrates how to enable subset load balancing for a cluster in Envoy. It specifies the fallback policy, default subset, and subset selectors based on metadata keys.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/intro/arch_overview/upstream/load_balancing/subsets.rst#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nname: cluster-name\ntype: EDS\neds_cluster_config:\n  eds_config:\n    path: '.../eds.conf'\nconnect_timeout:\n  seconds: 10\nlb_policy: LEAST_REQUEST\nlb_subset_config:\n  fallback_policy: DEFAULT_SUBSET\n  default_subset:\n    stage: prod\n  subset_selectors:\n  - keys:\n    - v\n    - stage\n  - keys:\n    - stage\n    fallback_policy: NO_FALLBACK\n```\n\n----------------------------------------\n\nTITLE: Email Template: Main Branch Security Fix Announcement\nDESCRIPTION: Template for announcing security fixes specific to the main branch, including timeline and fix details.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/security/email-templates.md#2025-04-23_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\nSubject: Security fix of Envoy main branch (that includes $GITSHORTCOMMITHASH) is now available\nTo: envoy-security-announce@googlegroups.com\nCc: envoy-announce@googlegroups.com, envoy-security@googlegroups.com, envoy-maintainers@googlegroups.com\n\nHello Envoy Community,\n\nThe Envoy security team would like to announce the availability of the fix for security defect(s)\nintroduced in the main branch by [$GITSHORTCOMMITHASH]($GITHUBCOMMITURL) commit. The defect(s)\ncaused by the [$GITSHORTCOMMITHASH]($GITHUBCOMMITURL) were not part of any Envoy stable releases.\n\n$DEFECTSSUMMARY\n\nThe CVSS score for this is [$CVSSSTRING]($CVSSURL).\n\nIncluding the [$FIXGITSHORTCOMMITHASH]($FIXGITHUBCOMMITURL) commit is encouraged to fix this issue.\n\n**Security fix timeline**\n\n1. The defect(s) introduced in [$GITSHORTCOMMITHASH]($GITHUBCOMMITURL) were landed in the main\n   branch on $ORDINALDAY of $MONTH $YEAR at $PDTHOUR PDT ($GMTHOUR GMT).\n2. The fix [$FIXGITSHORTCOMMITHASH]($FIXGITHUBCOMMITURL) was merged into the main branch on\n   $ORDINALDAY of $MONTH $YEAR at $PDTHOUR PDT ($GMTHOUR GMT).\n\n**Thank you**\n\nThank you to $REPORTER, $DEVELOPERS, and the $RELEASEMANAGERS for the coordination in making this\nrelease.\n\nThanks,\n\n$PERSON (on behalf of the Envoy security team and maintainers)\n```\n\n----------------------------------------\n\nTITLE: MongoDB Access Log Format\nDESCRIPTION: Default format for MongoDB access logs showing timestamp, message content, and upstream host information\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/listeners/network_filters/mongo_proxy_filter.rst#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"time\": \"...\",\n  \"message\": \"...\",\n  \"upstream_host\": \"...\"\n}\n```\n\n----------------------------------------\n\nTITLE: Running Java Tests with Bazel\nDESCRIPTION: Command to execute the Java unit test suite using Bazel. Includes build_tests_only flag to focus on test compilation and execution.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/mobile/docs/root/development/testing/testing.rst#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./bazelw test --test_output=all --build_tests_only //test/java/...\n```\n\n----------------------------------------\n\nTITLE: Reporting iOS Application Size Analysis (Shell/Bash - Formatted Output)\nDESCRIPTION: This snippet is a block-formatted shell output comparing app size metrics for control and variant builds on iOS, including compressed and uncompressed sizes with and without on-demand resources. Useful for real-world tracking of binary size impact following the preceding analysis pipeline. Inputs: Analysis output; outputs: summarized size statistics. Limitations: informational only, not executable.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/mobile/docs/root/development/performance/binary_size.rst#2025-04-23_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nControl:\nApp + On Demand Resources size: 27 KB compressed, 113 KB uncompressed\nApp size: 27 KB compressed, 113 KB uncompressed\n\nVariant:\nApp + On Demand Resources size: 4.6 MB compressed, 13.8 MB uncompressed\nApp size: 4.6 MB compressed, 13.8 MB uncompressed\n\nNet: 4.6 MB compressed, 13.8 MB uncompressed\n```\n\n----------------------------------------\n\nTITLE: Accessing Dynamic Metadata Object from Connection Stream Info in Envoy Lua\nDESCRIPTION: Calls the `dynamicMetadata()` method on the `connectionStreamInfo` object. It returns a dynamic metadata object wrapper, allowing access to dynamic metadata associated with the connection.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/lua_filter.rst#2025-04-23_snippet_39\n\nLANGUAGE: lua\nCODE:\n```\nconnectionStreamInfo:dynamicMetadata()\n```\n\n----------------------------------------\n\nTITLE: Building Config Load Check Tool with Bazel\nDESCRIPTION: Command to build the config load check tool locally using Bazel. This tool is used to validate Envoy configuration files.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/operations/tools/config_load_check_tool.rst#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbazel build //test/tools/config_load_check:config_load_check_tool\n```\n\n----------------------------------------\n\nTITLE: Getting TLS Version in Lua\nDESCRIPTION: Returns the TLS version (e.g., TLSv1.2, TLSv1.3) used in the established TLS connection.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/lua_filter.rst#2025-04-23_snippet_66\n\nLANGUAGE: lua\nCODE:\n```\ndownstreamSslConnection:tlsVersion()\n```\n\n----------------------------------------\n\nTITLE: Calculating Health Scores and Priority Load in Envoy Load Balancing\nDESCRIPTION: This pseudo-code demonstrates how Envoy calculates health scores for each priority level and determines the priority load (traffic distribution) based on those health scores. It factors in overprovisioning and normalized total health across all priority levels.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/intro/arch_overview/upstream/load_balancing/priority.rst#2025-04-23_snippet_0\n\nLANGUAGE: pseudo\nCODE:\n```\nhealth(P_X) = min(100, 1.4 * 100 * healthy_P_X_backends / total_P_X_backends)\nnormalized_total_health = min(100, Σ(health(P_0)...health(P_X)))\npriority_load(P_0) = health(P_0) * 100 / normalized_total_health\npriority_load(P_X) = min(100 - Σ(priority_load(P_0)..priority_load(P_X-1)),\n                          health(P_X) * 100 / normalized_total_health)\n```\n\n----------------------------------------\n\nTITLE: Advanced YAML Configuration\nDESCRIPTION: Initialize builder with custom Envoy YAML configuration for advanced setup needs.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/mobile/docs/root/api/starting_envoy.rst#2025-04-23_snippet_15\n\nLANGUAGE: kotlin\nCODE:\n```\nval streamClient = AndroidEngineBuilder(baseContext, Yaml(yamlFileString))\n    .setLogLevel(LogLevel.WARN)\n    ...\n    .build()\n    .streamClient()\n```\n\nLANGUAGE: swift\nCODE:\n```\nlet streamClient = try EngineBuilder(yaml: yamlFileString)\n    .setLogLevel(.warn)\n    ...\n    .build()\n    .streamClient()\n```\n\n----------------------------------------\n\nTITLE: Retrieving Peer Certificate Issuer in Envoy Lua\nDESCRIPTION: Calls the `issuerPeerCertificate()` method on the `downstreamSslConnection` object. It returns the issuer field of the peer certificate formatted according to RFC 2253. Returns an empty string if no peer certificate or issuer exists.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/lua_filter.rst#2025-04-23_snippet_50\n\nLANGUAGE: lua\nCODE:\n```\ndownstreamSslConnection:issuerPeerCertificate()\n```\n\n----------------------------------------\n\nTITLE: Retrieving TLS Session ID in Lua\nDESCRIPTION: Returns the hex-encoded TLS session ID as defined in RFC 5246.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/lua_filter.rst#2025-04-23_snippet_63\n\nLANGUAGE: lua\nCODE:\n```\ndownstreamSslConnection:sessionId()\n```\n\n----------------------------------------\n\nTITLE: Example Semicolon-Delimited Data String for Envoy\nDESCRIPTION: This snippet shows an example data string potentially used in Envoy configurations or protocols. It utilizes semicolons (`;`) as delimiters between elements, supporting standalone keys (`name`), key-value pairs (`a=b`), and quoted values (`c=\\\"d\\\"`, `e=\\\";\\\"`), which might be relevant for parsing HTTP headers or custom metadata.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/test/extensions/filters/http/cdn_loop/parser_corpus/ParseCdnInfo-MultipleParametersWithWhitespace.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nname ; a=b ; c=\"d\" ; e=\";\" \n```\n\n----------------------------------------\n\nTITLE: Logger Path Example - Text Format\nDESCRIPTION: Example showing the format of logger paths when fine-grain logging is enabled in Envoy\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/operations/admin.rst#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nsource/server/admin/admin_filter.cc: trace\nsource/common/event/dispatcher_impl.cc: trace\nsource/common/network/tcp_listener_impl.cc: trace\nsource/common/network/udp_listener_impl.cc: trace\n```\n\n----------------------------------------\n\nTITLE: Building Route Table Check Tool with Bazel\nDESCRIPTION: Command to build the route table check tool locally using Bazel. This compiles the tool from source code.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/operations/tools/route_table_check_tool.rst#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbazel build //test/tools/router_check:router_check_tool\n```\n\n----------------------------------------\n\nTITLE: Running Envoy Docker Build with Go Proxy and HTTP Proxy Settings\nDESCRIPTION: This command shows how to run the Envoy Docker build script with a custom Go proxy and HTTP proxy settings.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/ci/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nIMAGE_NAME=envoyproxy/envoy-build-ubuntu go_proxy=https://goproxy.cn,direct http_proxy=http://proxy.foo.com:8080 https_proxy=http://proxy.bar.com:8080 ./ci/run_envoy_docker.sh <build_script_args>\n```\n\n----------------------------------------\n\nTITLE: Running Python Tool via Bazel - Console\nDESCRIPTION: Demonstrates how to execute the `mytool` Python binary through Bazel, passing the desired package name as an argument. Prerequisites: Bazel installed, all dependencies built. Outputs: YAML describing PyPI package written to stdout.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/tools/README.md#2025-04-23_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n$ bazel run //tools/sometools:mytool PACKAGENAME\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents for HTTP Documentation in reStructuredText\nDESCRIPTION: This snippet defines a table of contents for HTTP-related documentation using reStructuredText syntax. It sets the maximum depth to 2 and includes links to various HTTP-related sections.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http.rst#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n  :maxdepth: 2\n\n  http_conn_man/http_conn_man\n  http_filters/http_filters\n  caches/caches\n  cluster_specifier/cluster_specifier\n  tcp_bridge/tcp_bridge\n```\n\n----------------------------------------\n\nTITLE: Build and Publish Android AAR Locally to Maven - Bash/Python\nDESCRIPTION: Runs Bazel build for Envoy Mobile Android AAR (configurable architectures) and then invokes the upload script to publish the artifact to a local Maven repository. Requires Bazel, Python, and access to the ci/sonatype_nexus_upload.py script, as well as an appropriate local Maven repository layout.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/mobile/docs/root/start/building/building.rst#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n# To build Envoy Mobile. --fat_apk_cpu takes in a list of architectures: [x86|armeabi-v7a|arm64-v8a].\n./bazelw build android_dist --config=android --fat_apk_cpu=x86\n\n# To publish to local maven.\nci/sonatype_nexus_upload.py --local --files bazel-bin/library/kotlin/io/envoyproxy/envoymobile/envoy.aar bazel-bin/library/kotlin/io/envoyproxy/envoymobile/envoy-pom.xml\n```\n\n----------------------------------------\n\nTITLE: Building Envoy Developer Binary on Linux\nDESCRIPTION: Command to build a developer version of Envoy using Docker with fastbuild configuration\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/ci/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n./ci/run_envoy_docker.sh './ci/do_ci.sh dev'\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Hash Key for Ring Hash and Maglev Load Balancers in YAML\nDESCRIPTION: This YAML snippet demonstrates how to specify a custom hash key for Ring Hash and Maglev load balancers using the LbEndpoint.Metadata field. This overrides the default behavior of using the host's address or hostname for hashing.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/intro/arch_overview/upstream/load_balancing/load_balancers.rst#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nfilter_metadata:\n  envoy.lb:\n    hash_key: \"YOUR HASH KEY\"\n```\n\n----------------------------------------\n\nTITLE: Serializing Strings to Octal for Fuzzing - C++\nDESCRIPTION: This snippet provides a C++ utility function to serialize a std::string into an octal string representation, facilitating safe inclusion of input with non-printable or special characters in fuzzer config files. The function takes the source string and an informational label, iterates over each byte, and constructs the corresponding octal-escaped sequence. It prints the result for debugging and returns the octal string for direct inclusion in Protobuf test configurations or data buffers. The only dependency is the C++ standard library; output is useful for fields such as 'value' or 'data' requiring byte-level fidelity.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/source/docs/network_filter_fuzzing.md#2025-04-23_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\nstatic std::string toOct(const std::string& source, const std::string& info) {\n   std::stringstream ss;\n   for (unsigned char c : source) {\n     int n=c-'\\0';\n     ss<<'\\\\'<<std::oct<<n;\n   }\n   std::cout<<\"info = \"<<info<<\", string:\"<<ss.str()<<std::endl;\n   return ss.str();\n }\n```\n\n----------------------------------------\n\nTITLE: Setting Universal Stats Tags\nDESCRIPTION: Command line flag for adding universal tags to all Envoy-generated stats. Tags follow the format 'tag:value' where tag names must be alphanumeric and values can contain any characters except periods. Multiple tags can be specified.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/operations/cli.rst#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n--stats-tag\n```\n\n----------------------------------------\n\nTITLE: Troubleshooting macOS SDK Issues for Envoy Bazel Build\nDESCRIPTION: These commands help troubleshoot and resolve SDK-related issues on macOS when building Envoy.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/bazel/README.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nxcrun --show-sdk-version\n```\n\nLANGUAGE: bash\nCODE:\n```\nsudo rm -rf /Library/Developer/CommandLineTools\nsoftwareupdate --all --install --force\nsudo xcode-select --install\n```\n\nLANGUAGE: bash\nCODE:\n```\nsudo xcode-select -s /Applications/Xcode.app/Contents/Developer\n```\n\n----------------------------------------\n\nTITLE: Iterating Through Dynamic Metadata Entries in Envoy Lua\nDESCRIPTION: Demonstrates how to iterate through all entries in a `dynamicMetadata` object using the `pairs()` iterator. In each iteration, `key` holds the filter name (string) and `value` holds the corresponding metadata table.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/lua_filter.rst#2025-04-23_snippet_43\n\nLANGUAGE: lua\nCODE:\n```\nfor key, value in pairs(dynamicMetadata) do\nend\n```\n\n----------------------------------------\n\nTITLE: Resuming Data Processing after Stop Statuses\nDESCRIPTION: When a filter returns FilterDataStatus::StopIterationAndBuffer, FilterDataStatus::StopIterationAndWatermark, or FilterDataStatus::StopIterationNoBuffer during data encoding/decoding, processing can be resumed by returning FilterDataStatus::Continue or by calling continueEncoding()/continueDecoding().\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/faq/extensions/contract.rst#2025-04-23_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nFilterDataStatus::StopIterationAndBuffer\n```\n\nLANGUAGE: text\nCODE:\n```\nFilterDataStatus::StopIterationAndWatermark\n```\n\nLANGUAGE: text\nCODE:\n```\nFilterDataStatus::StopIterationNoBuffer\n```\n\nLANGUAGE: text\nCODE:\n```\nFilterDataStatus::Continue\n```\n\n----------------------------------------\n\nTITLE: Retrieving Parsed Peer Certificate Subject in Envoy Lua\nDESCRIPTION: Calls the `parsedSubjectPeerCertificate()` method on the `downstreamSslConnection` object. It returns a parsed name object representing the peer certificate's subject field, allowing access to individual components like Common Name (CN) or Organization Name (O). Returns nil if no peer certificate exists.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/lua_filter.rst#2025-04-23_snippet_52\n\nLANGUAGE: lua\nCODE:\n```\nlocal parsedSubject = downstreamSslConnection:parsedSubjectPeerCertificate()\nif parsedSubject then\n  print(\"CN: \" .. parsedSubject:commonName())\n  print(\"O: \" .. table.concat(parsedSubject:organizationName(), \",\"))\nend\n```\n\n----------------------------------------\n\nTITLE: Prohibited Return Value for decodeHeaders\nDESCRIPTION: A filter's decodeHeaders() implementation must not return FilterHeadersStatus::ContinueAndDontEndStream when called with end_stream set to false. In this case, FilterHeadersStatus::Continue should be returned instead.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/faq/extensions/contract.rst#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nFilterHeadersStatus::ContinueAndDontEndStream\n```\n\nLANGUAGE: text\nCODE:\n```\nFilterHeadersStatus::Continue\n```\n\n----------------------------------------\n\nTITLE: JSON Response for Circuit Breaker Thresholds\nDESCRIPTION: Example JSON response for circuit breaker thresholds, demonstrating how default values are omitted in the output.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/operations/admin.rst#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n \"thresholds\": [\n  {\n   \"max_connections\": 1,\n   \"max_pending_requests\": 1024,\n   \"max_requests\": 1024,\n   \"max_retries\": 1\n  },\n  {\n   \"priority\": \"HIGH\",\n   \"max_connections\": 1,\n   \"max_pending_requests\": 1024,\n   \"max_requests\": 1024,\n   \"max_retries\": 1\n  }\n ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Outlier Detection in Envoy\nDESCRIPTION: JSON configuration for Envoy's outlier detection mechanism. This setup ejects hosts after 5 consecutive 5xx errors or gateway failures, limits ejection to 50% of the cluster size, and specifies a base ejection time of 30 seconds.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/faq/load_balancing/transient_failures.rst#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"consecutive_5xx\": 5,\n   \"base_ejection_time\": \"30s\",\n   \"max_ejection_percent\": 50,\n   \"consecutive_gateway_failure\": 5,\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Local Certificate Subject in Envoy Lua\nDESCRIPTION: Calls the `subjectLocalCertificate()` method on the `downstreamSslConnection` object. It returns the subject field of the local certificate (presented by Envoy) formatted according to RFC 2253. Returns an empty string if no local certificate or subject exists.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/lua_filter.rst#2025-04-23_snippet_54\n\nLANGUAGE: lua\nCODE:\n```\ndownstreamSslConnection:subjectLocalCertificate()\n```\n\n----------------------------------------\n\nTITLE: Configuring Domain Matching with Port Specifications in Envoy\nDESCRIPTION: Enhanced domain configuration that explicitly includes port variations. This approach ensures matching for the domain with different port specifications (default, 80, 443).\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/faq/debugging/why_is_my_route_not_found.rst#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndomains:\n  - \"www.host.com\"\n  - \"www.host.com:80\"\n  - \"www.host.com:443\"\n```\n\n----------------------------------------\n\nTITLE: Temporary Storage for Downstream Metadata in UpstreamRequest (C++)\nDESCRIPTION: This member variable within the UpstreamRequest class serves as a temporary buffer. It stores metadata received from downstream if the connection to the upstream service has not yet been established when the metadata arrives.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/source/docs/h2_metadata.md#2025-04-23_snippet_9\n\nLANGUAGE: cpp\nCODE:\n```\nUpstreamRequest::downstream_metadata_map_vector_\n```\n\n----------------------------------------\n\nTITLE: Importing Public Key in Lua\nDESCRIPTION: Demonstrates importing a public key for signature verification.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/lua_filter.rst#2025-04-23_snippet_25\n\nLANGUAGE: lua\nCODE:\n```\nlocal pubkey = handle:importPublicKey(keyder, keyderLength)\n```\n\n----------------------------------------\n\nTITLE: Running Tests with CPU Profiling\nDESCRIPTION: Command to run Envoy tests with CPU profiling enabled using Bazel.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/bazel/PPROF.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ bazel test --test_env=CPUPROFILE=/tmp/cpuprof --define tcmalloc=gperftools <test target>\n```\n\n----------------------------------------\n\nTITLE: Running Format Fix Scripts Under Docker - Bash\nDESCRIPTION: Executes the Envoy format script inside a Docker container for a consistent, isolated environment. This ensures formatting compliance without needing local installations of all dependencies, as Docker uses containers to encapsulate tooling. Requires Docker and the Envoy CI scripts.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/support/README.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n```bash\\n./ci/run_envoy_docker.sh './ci/do_ci.sh format'\\n```\n```\n\n----------------------------------------\n\nTITLE: Interactive Docker Session on Windows\nDESCRIPTION: Command to start an interactive Docker session for Windows builds\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/ci/README.md#2025-04-23_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n./ci/run_envoy_docker.sh 'bash'\n```\n\n----------------------------------------\n\nTITLE: Defining Sphinx toctree for Envoy Cluster Specifier documentation in reStructuredText\nDESCRIPTION: This Sphinx toctree directive configures documentation navigation for Envoy's cluster specifier extensions. It uses glob pattern matching to automatically include all relevant documentation files from the extensions directory.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/api-v3/config/cluster_specifier/cluster_specifier.rst#2025-04-23_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. toctree::\n  :glob:\n  :maxdepth: 2\n\n  ../../extensions/router/cluster_specifiers/*/v3/*\n```\n\n----------------------------------------\n\nTITLE: Override Extensions via Bazel Local Repository - Python/Bazel Starlark\nDESCRIPTION: Demonstrates adding a local_repository entry in the Bazel WORKSPACE file to override or add new extensions to Envoy Mobile by pointing the envoy_build_config dependency to a custom directory. Local paths are supported, and this code is entered in Bazel's WORKSPACE file. The example uses Starlark (Python-like Bazel config).\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/mobile/docs/root/start/building/building.rst#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nlocal_repository(\n  name = \"envoy_build_config\",\n  # Relative paths are also supported.\n  path = \"/somewhere/on/filesystem/envoy_build_config\",\n)\n```\n\n----------------------------------------\n\nTITLE: Using ProtoEq Matchers for Protobuf Comparison in C++\nDESCRIPTION: Provides examples of custom Google Mock matchers for protobuf equality checks within `EXPECT_CALL`. `ProtoEqIgnoringField` compares two protobuf messages (like `envoy::service::discovery::v3::DeltaDiscoveryRequest`) while disregarding a specified field (e.g., \"response_nonce\"). `RepeatedProtoEq` compares two `Protobuf::RepeatedPtrField` instances element-by-element, useful for verifying lists of resources.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/test/README.md#2025-04-23_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\nenvoy::service::discovery::v3::DeltaDiscoveryRequest expected_request;\n// (not shown: set some fields of expected_request...)\nEXPECT_CALL(async_stream_, sendMessage(ProtoEqIgnoringField(expected_request, \"response_nonce\"), false));\n```\n\nLANGUAGE: cpp\nCODE:\n```\nresponse->mutable_resources()->Add();\nresponse->mutable_resources()->Add();\nresponse->mutable_resources()->Add();\n// (not shown: do something to populate those empty added items...)\nEXPECT_CALL(callbacks_, onConfigUpdate(RepeatedProtoEq(response->resources()), version));\n```\n\n----------------------------------------\n\nTITLE: Running Envoy with Podman (Console)\nDESCRIPTION: Command to run the Envoy container using Podman, mapping ports 9901 and 10000.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/start/docker.rst#2025-04-23_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ podman run -d --name envoy -p 9901:9901 -p 10000:10000 envoy:v1\n```\n\n----------------------------------------\n\nTITLE: Installing Envoy Gateway on Kubernetes\nDESCRIPTION: This snippet demonstrates how to install Envoy as a Kubernetes Ingress Gateway using Envoy Gateway. It installs the Gateway API CRDs, Envoy Gateway, and sets up an example application.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/start/install.rst#2025-04-23_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ helm install eg oci://docker.io/envoyproxy/gateway-helm --version v0.0.0-latest -n envoy-gateway-system --create-namespace\n$ kubectl wait --timeout=5m -n envoy-gateway-system deployment/envoy-gateway --for=condition=Available\n$ kubectl apply -f https://github.com/envoyproxy/gateway/releases/download/latest/quickstart.yaml -n default\n```\n\n----------------------------------------\n\nTITLE: Referencing Envoy's Python Hot Restarter\nDESCRIPTION: The document references a Python-based hot restarter/parent process that's included in the Envoy source distribution. This script can be used with standard process control utilities to facilitate hot restarts.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/intro/arch_overview/operations/hot_restart.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n:repo:`restarter/hot-restarter.py <restarter/hot-restarter.py>`\n```\n\n----------------------------------------\n\nTITLE: Running Envoy with HTTP/2 CONNECT Configuration\nDESCRIPTION: Console commands for running Envoy with HTTP/2 CONNECT encapsulation and termination configurations. These commands demonstrate how to start Envoy instances with specific configuration files for handling HTTP/2 CONNECT tunneling.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/intro/arch_overview/http/upgrades.rst#2025-04-23_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ envoy -c configs/encapsulate_in_http2_connect.yaml --base-id 1\n$ envoy -c configs/terminate_http2_connect.yaml --base-id 1\n```\n\n----------------------------------------\n\nTITLE: Running Bazel Test with Stack Trace Post-Processing (stdin pipe)\nDESCRIPTION: Runs a specific Bazel test (`//test/server:backtrace_test`) in debug configuration (`-c dbg`), disabling the test cache and streaming the output. The combined stdout and stderr (`|&`) are piped to the `stack_decode.py` script with the `-s` flag, indicating it should process input from stdin. The path to the test executable (`bazel-bin/test/server/backtrace_test`) is provided for symbol resolution.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/bazel/README.md#2025-04-23_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\nbazel test -c dbg //test/server:backtrace_test --cache_test_results=no --test_output=streamed |& tools/stack_decode.py -s bazel-bin/test/server/backtrace_test\n```\n\n----------------------------------------\n\nTITLE: Configuring Pull Request Template in Markdown\nDESCRIPTION: A structured template for pull request submissions that includes security warnings and required documentation fields. It guides contributors on proper PR documentation and emphasizes security issue handling through a dedicated email channel.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/PULL_REQUEST_TEMPLATE.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<!--\n!!!ATTENTION!!!\n\nIf you are fixing *any* crash or *any* potential security issue, *do not*\nopen a pull request in this repo. Please report the issue via emailing\nenvoy-security@googlegroups.com where the issue will be triaged appropriately.\nThank you in advance for helping to keep Envoy secure.\n\n!!!ATTENTION!!!\n\nFor an explanation of how to fill out the fields, please see the relevant section\nin [PULL_REQUESTS.md](https://github.com/envoyproxy/envoy/blob/main/PULL_REQUESTS.md)\n-->\n\nCommit Message:\nAdditional Description:\nRisk Level:\nTesting:\nDocs Changes:\nRelease Notes:\nPlatform Specific Features:\n[Optional Runtime guard:]\n[Optional Fixes #Issue]\n[Optional Fixes commit #PR or SHA]\n[Optional Deprecated:]\n[Optional [API Considerations](https://github.com/envoyproxy/envoy/blob/main/api/review_checklist.md):]\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Request Signing as Upstream HTTP Filter in YAML\nDESCRIPTION: Example configuration for AWS Request Signing as an upstream HTTP filter within the cluster configuration, allowing signatures to be calculated as a final step before forwarding the HTTP request upstream.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/aws_request_signing_filter.rst#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nclusters:\n- name: aws_service\n  connect_timeout: 0.25s\n  type: LOGICAL_DNS\n  dns_lookup_family: V4_ONLY\n  load_assignment:\n    cluster_name: aws_service\n    endpoints:\n    - lb_endpoints:\n      - endpoint:\n          address:\n            socket_address:\n              address: aws_service.example.com\n              port_value: 443\n```\n\n----------------------------------------\n\nTITLE: Restricting Bazel Job Parallelism\nDESCRIPTION: Command to limit Bazel build parallelism for machines with limited resources by restricting the maximum number of simultaneous jobs.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/bazel/README.md#2025-04-23_snippet_46\n\nLANGUAGE: shell\nCODE:\n```\nbazel build --jobs=2 envoy\n```\n\n----------------------------------------\n\nTITLE: Querying Filtered Envoy Stats in JSON Format via Admin API\nDESCRIPTION: Command-line example to retrieve filtered statistics in JSON format from Envoy's stats admin endpoint, focusing on HTTP request metrics.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/start/quick-start/admin.rst#2025-04-23_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ curl -s \"http://localhost:9901/stats?filter=http.ingress_http.rq&format=json\" | jq '.stats'\n```\n\n----------------------------------------\n\nTITLE: Markdown Template for CVE Disclosure in Envoy\nDESCRIPTION: A comprehensive markdown template used to document security vulnerabilities in Envoy. The template includes all necessary sections for proper CVE documentation including brief description, CVSS score, affected versions, attack vectors, proof of concept, and mitigation strategies.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/security/gh-cve-template.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# CVE-YEAR-ABCDEF\n\n## Brief description\n\n>Brief description used when filing CVE.\n\n## CVSS\n\n>[$CVSSSTRING]($CVSSURL)($CVSSSCORE, $SEVERITY)\n\n## Affected version(s)\n\n>Envoy x.y.z and before.\n\n## Affected component(s)\n\n>List affected internal components and features.\n\n## Attack vector(s)\n\n>How would an attacker use this?\n\n## Discover(s)/Credits\n\n>Individual and optional organization.\n\n## Example exploit or proof-of-concept\n\n>If there is proof-of-concept or example, provide a concrete example.\n\n## Details\n\n>Deep dive into the defect. This should be detailed enough to maintain a record for posterity while\nbeing clear and concise.\n\n## Mitigations\n\n>Are there configuration or CLI options that can be used to mitigate?\n\n## Detection\n\n>How can exploitation of this bug be detected in existing and future Envoy versions? E.g. access logs.\n\n## References\n\n* CVE: $CVEURL\n>Any other public information.\n```\n\n----------------------------------------\n\nTITLE: Configuring Visual Studio Build Tools on Windows for Envoy Bazel Build\nDESCRIPTION: These commands set up the environment variables for using Visual Studio Build Tools on Windows when building Envoy.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/bazel/README.md#2025-04-23_snippet_12\n\nLANGUAGE: cmd\nCODE:\n```\nset BAZEL_VC=%USERPROFILE%\\VSBT2019\\VC\nset PATH=%USERPROFILE%\\VSBT2019\\VC\\Tools\\MSVC\\14.26.28801\\bin\\Hostx64\\x64;%PATH%\n```\n\n----------------------------------------\n\nTITLE: Maglev Load Balancer Statistics in Envoy\nDESCRIPTION: CSV table showing statistics for monitoring the Maglev load balancer. These stats track the distribution of entries across hosts in the Maglev table.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/upstream/cluster_manager/cluster_stats.rst#2025-04-23_snippet_3\n\nLANGUAGE: csv\nCODE:\n```\nName, Type, Description\nmin_entries_per_host, Gauge, Minimum number of entries for a single host\nmax_entries_per_host, Gauge, Maximum number of entries for a single host\n```\n\n----------------------------------------\n\nTITLE: Defining Core TransportSocket Interface Methods in C++\nDESCRIPTION: Specifies the pure virtual methods required by Envoy's `TransportSocket` interface in C++. These methods handle connection establishment (`onConnected`), reading decrypted data (`doRead`), writing data to be encrypted (`doWrite`), and closing the underlying socket (`closeSocket`). This interface enables pluggable transport security mechanisms like TLS.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/intro/life_of_a_request.rst#2025-04-23_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\nvirtual void onConnected() PURE;\nvirtual IoResult doRead(Buffer::Instance& buffer) PURE;\nvirtual IoResult doWrite(Buffer::Instance& buffer, bool end_stream) PURE;\nvirtual void closeSocket(Network::ConnectionEvent event) PURE;\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents for Envoy Configuration in reStructuredText\nDESCRIPTION: This snippet defines the structure of the Envoy configuration reference documentation using reStructuredText directives. It creates a table of contents with various configuration categories as subsections.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/configuration.rst#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. _config:\n\nConfiguration reference\n=======================\n\n.. toctree::\n  :maxdepth: 2\n\n  overview/overview\n  listeners/listeners\n  http/http\n  upstream/upstream\n  observability/observability\n  security/security\n  operations/operations\n  other_features/other_features\n  other_protocols/other_protocols\n  advanced/advanced\n  best_practices/best_practices\n```\n\n----------------------------------------\n\nTITLE: Filter Interface for Decoding Request Metadata (C++)\nDESCRIPTION: Defines the interface that stream decoder filters must implement to handle incoming request metadata. Filters can inspect, modify, or consume the `metadata_map`. The return status indicates how the metadata processing should continue.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/source/docs/h2_metadata.md#2025-04-23_snippet_7\n\nLANGUAGE: cpp\nCODE:\n```\nFilterMetadataStatus StreamDecoderFilter::decodeMetadata(MetadataMap& metadata_map)\n```\n\n----------------------------------------\n\nTITLE: Memory Stack Trace Collection using BCC Tools\nDESCRIPTION: Commands to collect and visualize memory allocation stack traces using BCC tools and FlameGraph\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/bazel/PPROF.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone https://github.com/brendangregg/FlameGraph\n$ sudo /usr/share/bcc/tools/stackcount -p `pgrep envoy` \\\n    -U \"/full/path/to/envoy/bazel-bin/source/exe/envoy-static:_Znwm\" > out.stack\n$ ./FlameGraph/stackcollapse.pl < out.stacks | ./FlameGraph/flamegraph.pl --color=mem \\\n    --title=\"operator new(std::size_t) Flame Graph\" --countname=\"calls\" > out.svg\n```\n\n----------------------------------------\n\nTITLE: Running Route Table Check Tool\nDESCRIPTION: Example command to run the route table check tool. It requires a router configuration file and a tool configuration file as inputs. The --details flag enables detailed output.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/operations/tools/route_table_check_tool.rst#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbazel-bin/test/tools/router_check/router_check_tool -c router_config.(yaml|json) -t tool_config.json --details\n```\n\n----------------------------------------\n\nTITLE: Bazel Remote Cache Configuration\nDESCRIPTION: Example configuration for setting up Bazel remote cache in .bazelrc file\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/ci/README.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nbuild:my-remote-cache --remote_cache=grpcs://remotecache.googleapis.com\nbuild:my-remote-cache --remote_cache_header=Authorization=\"Bearer <token>\"\n```\n\n----------------------------------------\n\nTITLE: Defining a URL Path Pattern with a Variable Segment\nDESCRIPTION: This snippet defines a URL path template `/simple/test/pattern/{var}`. It's designed to match request paths where the final segment is treated as a variable named `var`. This pattern is typically used in routing configurations (e.g., within the Envoy proxy) to direct requests based on the path structure and potentially extract the value of the `var` segment for further processing.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/test/extensions/path/uri_template_lib/uri_template_corpus/UriTemplate_SimpleVariable.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n/simple/test/pattern/{var}\n```\n\n----------------------------------------\n\nTITLE: Retry Back-off Interval Formula\nDESCRIPTION: Mathematical formula showing the range for retry back-off intervals, where B is the base interval and N is the retry number.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/router_filter.rst#2025-04-23_snippet_1\n\nLANGUAGE: math\nCODE:\n```\n\\big[0, (2^N-1)B\\big)\n```\n\n----------------------------------------\n\nTITLE: Using the ENVOY_LOG Macro in C++\nDESCRIPTION: Shows the standard way to log messages in Envoy using the `ENVOY_LOG` macro. It takes the log level (e.g., `debug`) as the first argument and the message string as the second. The log ID is typically inferred from the class context inheriting `Logger::Loggable<ID>`.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/source/docs/logging.md#2025-04-23_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\nENVOY_LOG(debug, \"subset lb: fallback load balancer disabled\");\n```\n\n----------------------------------------\n\nTITLE: Running Envoy with HTTP/1.1 CONNECT Configuration\nDESCRIPTION: Console commands for running Envoy with HTTP/1.1 CONNECT encapsulation and termination configurations. These commands demonstrate how to start Envoy instances with specific configuration files for handling HTTP/1.1 CONNECT tunneling.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/intro/arch_overview/http/upgrades.rst#2025-04-23_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ envoy -c configs/encapsulate_in_http1_connect.yaml --base-id 1\n$ envoy -c configs/terminate_http1_connect.yaml --base-id 1\n```\n\n----------------------------------------\n\nTITLE: Defining ReStructuredText Table of Contents for Generic Matching Documentation\nDESCRIPTION: This RST snippet defines a table of contents for the generic matching architecture documentation in Envoy. It includes a reference label and links to two subsections: matching API and matching listener.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/intro/arch_overview/advanced/matching/matching.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _arch_overview_generic_matching:\n\nGeneric Matching\n================\n\n.. toctree::\n  :maxdepth: 2\n\n  matching_api\n  matching_listener\n```\n\n----------------------------------------\n\nTITLE: Latching Runtime Feature Value in Envoy C++\nDESCRIPTION: Example of latching a runtime feature value in a member variable during object creation in Envoy.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/CONTRIBUTING.md#2025-04-23_snippet_4\n\nLANGUAGE: cpp\nCODE:\n```\nbool use_new_code_path_ =\n    Runtime::runtimeFeatureEnabled(\"envoy.reloadable_features.my_feature_name\")\n```\n\n----------------------------------------\n\nTITLE: Simplified Unit Test with Custom Pytest patches Fixture - Python\nDESCRIPTION: Refactors the previous test to use a custom `patches` pytest fixture for cleaner and more maintainable code. The `patches` fixture accepts a sequence of target strings (modules/functions) with a shared prefix and yields mocks in proper order. Inputs: patch targets and prefix; output: context-managed tuple of mock objects. Reduces repetitive patching boilerplate in tests.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/tools/README.md#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom tools.sometools import mytool\n\n\ndef test_mytool_main(patches):\n    patched = patches(\n        \"requests.get\",\n        \"yaml.dump\",\n        \"sys.stdout.write\",\n        prefix=\"tools.sometools.mytool\")\n\n    with patched as (m_get, m_yaml, m_stdout):\n        assert mytool.main(\"PACKAGENAME\") == 0\n    assert (\n        list(m_get.call_args)\n        == [('https://pypi.python.org/pypi/PACKAGENAME/json',), {}])\n    assert (\n        list(m_get.return_value.json.call_args)\n        == [(), {}])\n    assert (\n        list(m_yaml.call_args)\n        == [(m_get.return_value.json.return_value,), {}])\n    assert (\n        list(m_stdout.call_args)\n        == [(m_yaml.return_value,), {}])\n\n```\n\n----------------------------------------\n\nTITLE: Building Release Version of Envoy\nDESCRIPTION: Command to build a release version of the Envoy binary\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/ci/README.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n./ci/run_envoy_docker.sh './ci/do_ci.sh release.server_only'\n```\n\n----------------------------------------\n\nTITLE: Configuring JWT Claims to Headers Mapping in YAML\nDESCRIPTION: Demonstrates how to map JWT claims to HTTP headers using the JWTClaimToHeader configuration. Shows header_name and claim_name field usage for extracting and mapping JWT claims to custom headers.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/jwt_authn_filter.rst#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n      # JWT claim mapping configuration\n      claim_to_headers:\n      - header_name: x-jwt-claim-sub\n        claim_name: sub\n      - header_name: x-jwt-claim-nested-key\n        claim_name: nested.claim.key\n      - header_name: x-jwt-tenants\n        claim_name: tenants\n```\n\n----------------------------------------\n\nTITLE: Constructing DiscoveryResponse in YAML\nDESCRIPTION: Example of a DiscoveryResponse in YAML format. It includes version info, resources (ClusterLoadAssignment protos), type URL, and a nonce.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/api-docs/xds_protocol.rst#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nversion_info: X\nresources:\n- foo ClusterLoadAssignment proto encoding\n- bar ClusterLoadAssignment proto encoding\ntype_url: type.googleapis.com/envoy.config.endpoint.v3.ClusterLoadAssignment\nnonce: A\n```\n\n----------------------------------------\n\nTITLE: Declaring a Bazel Target for Unit Tests\nDESCRIPTION: Example of using envoy_cc_test rule to declare a unit test target. Shows how to specify test source files and dependencies including mocks and implementation libraries.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/bazel/DEVELOPER.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nenvoy_cc_test(\n    name = \"bar_impl_test\",\n    srcs = [\"bar_impl_test.cc\"],\n    deps = [\n        \"//test/mocks/buffer:buffer_mocks\",\n        \"//source/common/foo:bar_lib\",\n        ...\n    ],\n)\n```\n\n----------------------------------------\n\nTITLE: Updating Logger Level using Basename Matching via Envoy Admin API\nDESCRIPTION: Shows an HTTP POST request to the Envoy admin `/logging` endpoint using a file basename (`admin_filter`) to update the log level of the corresponding file (`source/server/admin/admin_filter.cc`) to 'info'.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/source/docs/fine_grain_log.md#2025-04-23_snippet_5\n\nLANGUAGE: http\nCODE:\n```\nPOST /logging?admin_filter=info\n```\n\n----------------------------------------\n\nTITLE: Windows Build with Custom Directory\nDESCRIPTION: Command to build Envoy on Windows with a custom build directory\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/ci/README.md#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nENVOY_DOCKER_BUILD_DIR=\"C:\\Users\\foo\\build\" ./ci/run_envoy_docker.sh './ci/windows_ci_steps.sh'\n```\n\n----------------------------------------\n\nTITLE: Configuring mTLS Client Authentication in Envoy\nDESCRIPTION: Setup for mutual TLS authentication requiring client certificates with specific validation rules.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/start/quick-start/securing.rst#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n      transport_socket:\n        name: envoy.transport_sockets.tls\n        typed_config:\n          \"@type\": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.DownstreamTlsContext\n          require_client_certificate: true\n          common_tls_context:\n            validation_context:\n              trusted_ca:\n                filename: certs/cacert.pem\n              match_typed_subject_alt_names:\n              - san_type: URI\n                matcher:\n                  exact: \"spiffe://example.com/client\"\n```\n\n----------------------------------------\n\nTITLE: Certificate Object Structure in JSON\nDESCRIPTION: JSON structure defining an individual certificate object with its SHA256 fingerprint that Envoy uses for certificate matching.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/listeners/network_filters/client_ssl_auth_filter.rst#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"fingerprint_sha256\": \"...\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Request Metadata via Envoy StreamDecoderFilterCallbacks (C++)\nDESCRIPTION: Provides the C++ interface `addDecodedMetadata` from `StreamDecoderFilterCallbacks`. A `StreamDecoderFilter` calls this method (except within `decodeMetadata`) to obtain a reference to the request's metadata map vector, allowing the insertion of new metadata maps to be proxied upstream.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/source/docs/h2_metadata.md#2025-04-23_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\nMetadataMapVector& StreamDecoderFilterCallbacks::addDecodedMetadata()\n```\n\n----------------------------------------\n\nTITLE: Generating Table of Contents for Load Balancing Documentation in reStructuredText\nDESCRIPTION: This snippet creates a table of contents for the load balancing documentation using reStructuredText directives. It sets the maximum depth to 2 and lists various topics related to load balancing in Envoy proxy.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/intro/arch_overview/upstream/load_balancing/load_balancing.rst#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n  :maxdepth: 2\n\n  overview\n  load_balancers\n  priority\n  degraded\n  locality_weight\n  overprovisioning\n  panic_threshold\n  excluded\n  original_dst\n  zone_aware\n  subsets\n  slow_start\n  override_host\n```\n\n----------------------------------------\n\nTITLE: Handling Metadata When Upstream Connection is Ready (C++)\nDESCRIPTION: This function in UpstreamRequest is invoked when the upstream connection becomes available (e.g., the connection pool returns a ready connection). It triggers the process of sending any buffered metadata (stored in `downstream_metadata_map_vector_`) to the upstream via the codec.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/source/docs/h2_metadata.md#2025-04-23_snippet_10\n\nLANGUAGE: cpp\nCODE:\n```\nUpstreamRequest::onPoolReady()\n```\n\n----------------------------------------\n\nTITLE: Getting Ciphersuite ID in Lua\nDESCRIPTION: Returns the standard ID (hex-encoded) for the ciphers used in the established TLS connection. Returns \"0xffff\" if there is no current negotiated ciphersuite.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/lua_filter.rst#2025-04-23_snippet_64\n\nLANGUAGE: lua\nCODE:\n```\ndownstreamSslConnection:ciphersuiteId()\n```\n\n----------------------------------------\n\nTITLE: Class-Based Performance Annotation\nDESCRIPTION: Implementation of performance measurement across class instance methods\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/bazel/PPROF.md#2025-04-23_snippet_13\n\nLANGUAGE: cpp\nCODE:\n```\nclass CustomFilter : public Http::StreamEncoderFilter {\npublic:\n\n  ...\n  // Http::StreamEncoderFilter\n  Http::FilterHeadersStatus encodeHeaders(Http::ResponseHeaderMap& headers,\n                                          bool end_stream) override {\n    PERF_OWNED_OPERATION(perf_operation_);\n    return Http::FilterHeadersStatus::Continue;\n  }\n\n  Http::FilterDataStatus encodeData(Buffer::Instance& buffer, bool end_stream) override {\n    if (end_stream) {\n      PERF_OWNED_RECORD(perf_operation_, \"without trailers\", \"stream encoding\")\n    }\n    return Http::FilterDataStatus::Continue;\n  }\n\n  Http::FilterTrailersStatus encodeTrailers(Http::ResponseTrailerMap&) override {\n    PERF_OWNED_RECORD(perf_operation_, \"with trailers\", \"stream encoding\");\n    return Http::FilterTrailersStatus::Continue;\n  }\n\n  ...\n\nprivate:\n  ...\n  PERF_OWNER(perf_operation_);\n};\n```\n\n----------------------------------------\n\nTITLE: Building Documentation with Validation Skip\nDESCRIPTION: Command to build documentation while skipping configuration example validation by setting an environment variable.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nSPHINX_SKIP_CONFIG_VALIDATION=true ./ci/do_ci.sh docs\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Aliases for DCO Signing\nDESCRIPTION: Git configuration commands to set up aliases for automatically adding DCO signoff to commits.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/mobile/CONTRIBUTING.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit config --add alias.amend \"commit -s --amend\"\ngit config --add alias.c \"commit -s\"\n```\n\n----------------------------------------\n\nTITLE: Platform Certificate Validation Configuration\nDESCRIPTION: Enable platform-provided certificate validation interfaces (Android only). Defaults to false.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/mobile/docs/root/api/starting_envoy.rst#2025-04-23_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nbuilder.enablePlatformCertificatesValidation(true)\n```\n\n----------------------------------------\n\nTITLE: Using %UPSTREAM_PEER_CERT_V_END% in Envoy Access Logs\nDESCRIPTION: Shows how to use the %UPSTREAM_PEER_CERT_V_END% substitution string in Envoy access logs. It represents the validity end date of the upstream server certificate used for the upstream TLS connection. This can be customized using a format string.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/observability/access_log/usage.rst#2025-04-23_snippet_13\n\nLANGUAGE: plaintext\nCODE:\n```\n%UPSTREAM_PEER_CERT_V_END%\n```\n\n----------------------------------------\n\nTITLE: Requesting GitHub PR Review using RepoKitteh Command\nDESCRIPTION: This slash command, entered in a GitHub pull request comment, instructs RepoKitteh to request a review from the specified user (`@someone`). Both the commenter and the requested reviewer must be organization members.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/source/docs/repokitteh.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n/review @someone\n```\n\n----------------------------------------\n\nTITLE: Defining Python Package Dependencies for Envoy Proxy\nDESCRIPTION: This code snippet defines Python package dependencies with exact versions and hash checksums. It includes packages like cryptography, dependatool, and various Envoy-specific packages. The format is compatible with pip's requirements file syntax.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/tools/base/requirements.txt#2025-04-23_snippet_3\n\nLANGUAGE: Text\nCODE:\n```\ncryptography==43.0.3 \\\n    --hash=sha256:0c580952eef9bf68c4747774cde7ec1d85a6e61de97281f2dba83c7d2c806362 \\\n    --hash=sha256:0f996e7268af62598f2fc1204afa98a3b5712313a55c4c9d434aef49cadc91d4 \\\n    --hash=sha256:1ec0bcf7e17c0c5669d881b1cd38c4972fade441b27bda1051665faaa89bdcaa \\\n    # ... (additional hashes omitted for brevity)\n    # via\n    #   -r requirements.in\n    #   aioquic\n    #   pyjwt\n    #   pyopenssl\n    #   service-identity\ndependatool==0.2.3 \\\n    --hash=sha256:04bf88d01302eec697a69e8301d14668a89d676dbd2a3914e91c610a531e9db7 \\\n    --hash=sha256:113a6641889d3dae7c81cb0a0483c31a2657f179474e11f4731b285963475ade\n    # via -r requirements.in\n# ... (additional package entries omitted for brevity)\n```\n\n----------------------------------------\n\nTITLE: Running Envoy with HTTP/2 POST Configuration\nDESCRIPTION: Console commands for running Envoy with HTTP/2 POST encapsulation and termination configurations. These commands demonstrate how to start Envoy instances with specific configuration files for tunneling TCP over HTTP/2 POST requests.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/intro/arch_overview/http/upgrades.rst#2025-04-23_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ envoy -c configs/encapsulate_in_http2_post.yaml --base-id 1\n$ envoy -c configs/terminate_http2_post.yaml --base-id 1\n```\n\n----------------------------------------\n\nTITLE: Generating ReStructuredText Table of Contents for Cluster Data Protobuf Definitions\nDESCRIPTION: This ReStructuredText directive creates a table of contents for cluster data-related protobuf files, specifically including the outlier detection event proto file.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/api-v3/data/cluster/cluster.rst#2025-04-23_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. toctree::\n  :glob:\n  :maxdepth: 2\n\n  v3/outlier_detection_event.proto\n```\n\n----------------------------------------\n\nTITLE: Customizing Bloaty Output with Config File (bloaty_config/protobuf-style)\nDESCRIPTION: This snippet defines a Bloaty configuration in a .bloaty file, customizing how source files are grouped and labeled in analysis outputs. Three rewrite rules group source paths for envoy source, third-party libraries, and compiled protos. Prerequisites: The config file must be referenced via -c flag during Bloaty invocation. Inputs: Raw section/unit data; Outputs: Aggregated, human-friendly breakdowns. Limitations: regexes must match file naming conventions.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/mobile/docs/root/development/performance/binary_size.rst#2025-04-23_snippet_5\n\nLANGUAGE: bloaty_config\nCODE:\n```\ncustom_data_source: {\n  name: \"bloaty_package\"\n  base_data_source: \"compileunits\"\n\n  #envoy source code.\n  rewrite: {\n    pattern: \"^(external/envoy/source/)(\\\\w+/)(\\\\w+)\"\n    replacement: \"envoy \\\\2\"\n  }\n\n  #envoy third party libraries.\n  rewrite: {\n      pattern: \"^(external/)(\\\\w+/)\"\n      replacement: \"\\\\2\"\n  }\n\n  #all compiled protos.\n  rewrite: {\n      pattern: \"([.pb.cc | .pb.validate.cc])$\"\n      replacement: \"compiled protos\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring a Bazel Target for Test Mocks\nDESCRIPTION: Example of using envoy_cc_mock rule to declare mock objects for testing. Shows how to create mock implementations of interfaces for use in unit tests.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/bazel/DEVELOPER.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nenvoy_cc_mock(\n    name = \"foo_mocks\",\n    srcs = [\"mocks.cc\"],\n    hdrs = [\"mocks.h\"],\n    deps = [\n        \"//envoy/foo:bar_interface\",\n        ...\n    ],\n)\n```\n\n----------------------------------------\n\nTITLE: Dev Command Version Diff\nDESCRIPTION: Shows version file changes after running the dev command.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/maintainer/RELEASE.md#2025-04-23_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\ndiff --git a/VERSION.txt b/VERSION.txt\nindex a6c2798a48..573ce34a59 100644\n--- a/VERSION.txt\n+++ b/VERSION.txt\n@@ -1 +1 @@\n-1.23.0\n+1.24.0-dev\n\n```\n\n----------------------------------------\n\nTITLE: Running Bazel Test with Stack Trace Post-Processing (run_under)\nDESCRIPTION: Executes a specific Bazel test (`//test/server:backtrace_test`) in debug configuration (`-c dbg`). It uses `run_under` to execute the `stack_decode` tool, which post-processes the test output for enhanced stack trace symbol resolution including file names and line numbers. Local execution strategy and disabling test cache are required for this setup.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/bazel/README.md#2025-04-23_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\nbazel test -c dbg //test/server:backtrace_test \\\n--run_under=//tools:stack_decode --strategy=TestRunner=local \\\n--cache_test_results=no --test_output=all\n```\n\n----------------------------------------\n\nTITLE: Comparing Heap Profiles with pprof\nDESCRIPTION: Series of commands to capture two heap profiles at different times and compare them to identify memory changes or leaks.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/faq/debugging/how_to_dump_heap_profile_of_envoy.rst#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npprof -http:localhost:9999 /heap/output/envoy_1.heap\nsleep 30\npprof -http:localhost:9999 /heap/output/envoy_2.heap\npprof -http:localhost:9999 -base /heap/output/envoy_1.heap /heap/output/envoy_2.heap\n```\n\n----------------------------------------\n\nTITLE: Configuring Router Filter Type URL\nDESCRIPTION: The type URL used to configure the router filter in Envoy proxy.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/router_filter.rst#2025-04-23_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\ntype.googleapis.com/envoy.extensions.filters.http.router.v3.Router\n```\n\n----------------------------------------\n\nTITLE: Adding Python Dependencies to Requirements File - Console\nDESCRIPTION: Appends specific versions of `pyyaml` and `requests` directly to the `requirements.txt` file using the command line. Prerequisites: prior creation of `requirements.txt`. Key parameters are the package names and their exact versions. Output: newly appended lines in the requirements file specifying fixed versions for reproducible installs.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/tools/README.md#2025-04-23_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ echo pyyaml==5.4.1 >> tools/sometools/requirements.txt\n$ echo requests==2.25.1 >> tools/sometools/requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Interface Binding Configuration\nDESCRIPTION: Enable socket binding to specific interfaces based on network conditions for both Kotlin and Swift.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/mobile/docs/root/api/starting_envoy.rst#2025-04-23_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nbuilder.enableInterfaceBinding(true)\n```\n\nLANGUAGE: swift\nCODE:\n```\nbuilder.enableInterfaceBinding(true)\n```\n\n----------------------------------------\n\nTITLE: Configuring Envoy Zone Aware Load Balancing Runtime Settings\nDESCRIPTION: Lists runtime parameters controlling Envoy's zone-aware load balancing feature. These allow dynamic configuration of the percentage of requests routed within the same zone, the minimum upstream cluster size required to attempt zone-aware routing, and an option to force routing strictly to the local zone.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/upstream/cluster_manager/cluster_runtime.rst#2025-04-23_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nupstream.zone_routing.enabled\n  % of requests that will be routed to the same upstream zone. Defaults to 100% of requests.\n\nupstream.zone_routing.min_cluster_size\n  Minimal size of the upstream cluster for which zone aware routing can be attempted. Default value\n  is 6. If the upstream cluster size is smaller than *min_cluster_size* zone aware routing will not\n  be performed.\n\nupstream.zone_routing.force_locality_direct_routing\n  When set to true, forces Envoy to always send traffic to the local zone. This overrides the default\n  behavior that attempts to balance traffic evenly across all zones among other cluster members.\n```\n\n----------------------------------------\n\nTITLE: Configuring RST Table of Contents for Injected Credentials\nDESCRIPTION: ReStructuredText directive configuring a table of contents for HTTP injected credentials documentation. Uses glob pattern to include all v3 API files under the injected_credentials directory.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/api-v3/config/injected_credentials/injected_credentials.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n  :glob:\n  :maxdepth: 2\n\n  ../../extensions/http/injected_credentials/*/v3/*\n```\n\n----------------------------------------\n\nTITLE: RST Documentation Structure for RBAC Principals\nDESCRIPTION: Defines the documentation tree structure for RBAC principals, referencing mTLS authenticated principal configurations\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/api-v3/config/rbac/matchers.rst#2025-04-23_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\nRBAC principals\n===============\n\n.. toctree::\n  :glob:\n  :maxdepth: 2\n\n  ../../extensions/rbac/principals/mtls_authenticated/v3/mtls_authenticated.proto\n```\n\n----------------------------------------\n\nTITLE: Alternative Analysis Map: Sections to Compilation Units (Shell/Bash, CLI)\nDESCRIPTION: This Bloaty invocation generates an analysis mapping sections to compilation units using a different dimension order. The options differ to highlight different relationships within the binary. Key requirements (bloaty, debug-file, stripped binary, envoy.bloaty) are as before; output is an alternative breakdown for deeper analysis.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/mobile/docs/root/development/performance/binary_size.rst#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nbloaty --debug-file=bin/test_binary_size -c envoy.bloaty -d bloaty_package,compileunits,sections bin/test_binary_size.stripped\n```\n\n----------------------------------------\n\nTITLE: Building Envoy Documentation While Skipping Configuration Validation\nDESCRIPTION: Command to build Envoy documentation locally while skipping the configuration examples validation process.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/api/CONTRIBUTING.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nSPHINX_SKIP_CONFIG_VALIDATION=true ci/do_ci.sh docs\n```\n\n----------------------------------------\n\nTITLE: Valid Return Values for encode1xxHeaders\nDESCRIPTION: A filter's encode1xxHeaders() method must return either Filter1xxHeadersStatus::Continue or Filter1xxHeadersStatus::StopIteration as its status.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/faq/extensions/contract.rst#2025-04-23_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nFilter1xxHeadersStatus::Continue\n```\n\nLANGUAGE: text\nCODE:\n```\nFilter1xxHeadersStatus::StopIteration\n```\n\n----------------------------------------\n\nTITLE: Passing Downstream Metadata to Filters via FilterManager (C++)\nDESCRIPTION: This function signature represents how the Envoy FilterManager passes request metadata received from downstream to an individual active stream decoder filter. It iterates through filters and calls their respective `decodeMetadata` implementation.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/source/docs/h2_metadata.md#2025-04-23_snippet_6\n\nLANGUAGE: cpp\nCODE:\n```\nFilterManager::decodeMetadata(ActiveStreamDecoderFilter* filter, MetadataMap& metadata_map)\n```\n\n----------------------------------------\n\nTITLE: Checking for Newly Added Metadata in FilterManager (C++)\nDESCRIPTION: This internal function within FilterManager is called after invoking a filter's `decode*` method. It checks if the filter added any new metadata (i.e., if `request_metadata_map_vector_` is not empty) and initiates further processing if necessary.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/source/docs/h2_metadata.md#2025-04-23_snippet_13\n\nLANGUAGE: cpp\nCODE:\n```\nFilterManager::processNewlyAddedMetadata()\n```\n\n----------------------------------------\n\nTITLE: Configuring Disabled-by-Default HTTP Filters\nDESCRIPTION: Example showing how to configure HTTP filters that are disabled by default by setting the 'disabled' field to true. These filters can then be selectively enabled for specific routes.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/intro/arch_overview/http/http_filters.rst#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nhttp_filters:\n- name: buffer\n  typed_config: { ... }\n  disabled: true\n- name: lua\n  typed_config: { ... }\n  disabled: true\n```\n\n----------------------------------------\n\nTITLE: Generating Local Fuzz Coverage Reports with Bazel\nDESCRIPTION: Command to generate fuzz testing coverage reports locally within the Envoy repository. It sets the `FUZZ_COVERAGE` environment variable to true and executes the `test/run_envoy_bazel_coverage.sh` script, which runs the fuzz targets against libFuzzer using the existing corpus for a short duration (one minute) to produce coverage data.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/test/fuzz/README.md#2025-04-23_snippet_5\n\nLANGUAGE: console\nCODE:\n```\nFUZZ_COVERAGE=true test/run_envoy_bazel_coverage.sh\n```\n\n----------------------------------------\n\nTITLE: Adding Git Alias for CI Retrigger\nDESCRIPTION: Git configuration for adding an alias to retrigger CI tasks with an empty commit.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/mobile/CONTRIBUTING.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n[alias]\n    kick-ci = !\"git commit -s --allow-empty -m 'Kick CI' && git push\"\n```\n\n----------------------------------------\n\nTITLE: Running Bazel Tests with ASAN/UBSAN (GCC)\nDESCRIPTION: Executes all Envoy tests (`//test/...`) using Bazel with the Address Sanitizer (ASAN) and Undefined Behavior Sanitizer (UBSAN) enabled, specifically configured for GCC. The `-c dbg` flag ensures debug symbols are included for better stack traces, and `--config=asan` applies the sanitizer settings.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/bazel/README.md#2025-04-23_snippet_31\n\nLANGUAGE: bash\nCODE:\n```\nbazel test -c dbg --config=asan //test/...\n```\n\n----------------------------------------\n\nTITLE: Generating Compilation Database\nDESCRIPTION: Commands to generate JSON compilation database for IDE integration and tools like clang-tidy, with variants for Linux and macOS.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/bazel/README.md#2025-04-23_snippet_49\n\nLANGUAGE: console\nCODE:\n```\nTEST_TMPDIR=/tmp tools/gen_compilation_database.py\n```\n\nLANGUAGE: console\nCODE:\n```\ntools/gen_compilation_database.py --exclude_contrib\n```\n\n----------------------------------------\n\nTITLE: URL Query for CVE Action Items\nDESCRIPTION: GitHub issues search URL template for tracking action items related to specific CVEs in the Envoy project.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/security/postmortem-template.md#2025-04-23_snippet_0\n\nLANGUAGE: url\nCODE:\n```\nhttps://github.com/envoyproxy/envoy/issues?utf8=%E2%9C%93&q=is%3Aissue+%22Action+item+for+CVE-YEAR-ABCDEF%22\n```\n\n----------------------------------------\n\nTITLE: Configuring gRPC HTTP/1.1 Bridge Filter in Envoy\nDESCRIPTION: This snippet shows how to configure the gRPC HTTP/1.1 bridge filter in Envoy using the v3 API. It specifies the type URL for the filter configuration.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/grpc_http1_bridge_filter.rst#2025-04-23_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\ntype.googleapis.com/envoy.extensions.filters.http.grpc_http1_bridge.v3.Config\n```\n\n----------------------------------------\n\nTITLE: Updating Cargo Dependencies for Proxy-Wasm Tests\nDESCRIPTION: A shell command for updating Cargo dependencies used in Proxy-Wasm tests. This script regenerates Bazel rules in the bazel/external/cargo/ directory.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/bazel/WASM.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbash tools/update_crates.sh\n```\n\n----------------------------------------\n\nTITLE: Configuring Header Mutation Filter Type URL in Envoy\nDESCRIPTION: Type URL configuration for the header mutation filter that defines the protocol buffer message type used for configuration. This filter allows manipulation of HTTP headers in Envoy's filter chain.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/header_mutation_filter.rst#2025-04-23_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\ntype.googleapis.com/envoy.extensions.filters.http.header_mutation.v3.HeaderMutation\n```\n\n----------------------------------------\n\nTITLE: SwiftPM Binary Target Declaration - Swift\nDESCRIPTION: Provides an example of using Swift Package Manager to integrate a prebuilt Envoy Mobile iOS framework into your project. This code should be placed in Package.swift, and sets the name, download URL, and checksum of the binary target. Adjust <version> and checksum to match the desired Envoy Mobile release.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/mobile/docs/root/start/building/building.rst#2025-04-23_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\n.binaryTarget(\n  name: \"Envoy\",\n  url: \"https://github.com/envoyproxy/envoy-mobile/releases/download/<version>/Envoy.xcframework.zip\",\n  checksum: \"...\"\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Envoy Circuit Breaker Runtime Settings\nDESCRIPTION: Lists runtime parameters for configuring Envoy's circuit breaking thresholds dynamically per cluster and per traffic priority (Default, High). Allows runtime adjustment of maximum allowed connections, pending requests, total requests, retries, and retry budget parameters (budget percentage, minimum concurrency).\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/upstream/cluster_manager/cluster_runtime.rst#2025-04-23_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\ncircuit_breakers.<cluster_name>.<priority>.max_connections\n  :ref:`Max connections circuit breaker setting <envoy_v3_api_field_config.cluster.v3.CircuitBreakers.Thresholds.max_connections>`\n\ncircuit_breakers.<cluster_name>.<priority>.max_pending_requests\n  :ref:`Max pending requests circuit breaker setting <envoy_v3_api_field_config.cluster.v3.CircuitBreakers.Thresholds.max_pending_requests>`\n\ncircuit_breakers.<cluster_name>.<priority>.max_requests\n  :ref:`Max requests circuit breaker setting <envoy_v3_api_field_config.cluster.v3.CircuitBreakers.Thresholds.max_requests>`\n\ncircuit_breakers.<cluster_name>.<priority>.max_retries\n  :ref:`Max retries circuit breaker setting <envoy_v3_api_field_config.cluster.v3.CircuitBreakers.Thresholds.max_retries>`\n\ncircuit_breakers.<cluster_name>.<priority>.retry_budget.budget_percent\n  :ref:`Max retries circuit breaker setting <envoy_v3_api_field_config.cluster.v3.CircuitBreakers.Thresholds.RetryBudget.budget_percent>`\n\ncircuit_breakers.<cluster_name>.<priority>.retry_budget.min_retry_concurrency\n  :ref:`Max retries circuit breaker setting <envoy_v3_api_field_config.cluster.v3.CircuitBreakers.Thresholds.RetryBudget.min_retry_concurrency>`\n```\n\n----------------------------------------\n\nTITLE: RST Table of Contents for HTTP Caches\nDESCRIPTION: ReStructuredText markup defining the documentation structure for HTTP caches configuration, including a link to file system cache documentation.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/caches/caches.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _config_http_caches:\\n\\nHTTP caches\\n===========\\n\\n.. toctree::\\n  :maxdepth: 2\\n\\n  file_system\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Documentation Structure for Envoy Sandboxes\nDESCRIPTION: RST markup defining the structure and content of the Envoy sandboxes documentation, including sidebars for contribution guidelines and compatibility information.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/start/sandboxes/index.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _start_sandboxes:\n\nSandboxes\n---------\n\n.. sidebar:: Contributing\n\n   If there are other sandboxes you would like to see demonstrated here\n   please\n   `open a ticket on github <https://github.com/envoyproxy/envoy/issues/new?assignees=&labels=enhancement%2Ctriage&template=feature_request.md&title=>`_.\n\n   :repo:`The Envoy project welcomes contributions <CONTRIBUTING.md>` and would be happy to review a\n   `Pull Request <https://github.com/envoyproxy/envoy/pulls>`_ with the necessary changes\n   should you be able to create one.\n\n   `See the sandbox developer documentation in the envoyproxy/examples project <https://github.com/envoyproxy/examples/blob/main/DEVELOPER.md>`_ for more information about\n   creating your own sandbox.\n\n.. sidebar:: Compatibility\n\n   As the examples use the pre-built :ref:`Envoy Docker images <install_binaries>` they should work\n   on the following architectures:\n\n   - x86_64\n   - ARM 64\n\n   Some of the examples may use pre-built (x86) binaries and will therefore have more limited\n   compatibility.\n\nWe have created a number of sandboxes using `Docker Compose <https://docs.docker.com/compose/>`_\nthat set up environments to test out Envoy's features and show sample configurations.\n\nThese can be used to learn Envoy and model your own configurations.\n\n\nBefore you begin you will need to install the sandbox environment.\n\n.. toctree::\n    :maxdepth: 2\n\n    setup\n\nThe following sandboxes are available:\n\n.. include:: toctree.rst\n```\n\n----------------------------------------\n\nTITLE: Cloning Envoy Examples Repository via HTTPS\nDESCRIPTION: Command to clone the Envoy examples repository using HTTPS protocol\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/start/sandboxes/setup.rst#2025-04-23_snippet_1\n\nLANGUAGE: console\nCODE:\n```\ngit clone https://github.com/envoyproxy/examples.git\n```\n\n----------------------------------------\n\nTITLE: Running Envoy Docker container (Console)\nDESCRIPTION: Command to run the Envoy Docker container, mapping ports 9901 and 10000.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/start/docker.rst#2025-04-23_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ docker run -d --name envoy -p 9901:9901 -p 10000:10000 envoy:v1\n```\n\n----------------------------------------\n\nTITLE: Dev Command Patch Version Diff\nDESCRIPTION: Shows version file changes after running dev command with patch flag.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/maintainer/RELEASE.md#2025-04-23_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\ndiff --git a/VERSION.txt b/VERSION.txt\nindex a6c2798a48..4d1e5d262c 100644\n--- a/VERSION.txt\n+++ b/VERSION.txt\n@@ -1 +1 @@\n-1.23.0\n+1.23.1-dev\n\n```\n\n----------------------------------------\n\nTITLE: Per-handler Listener Statistics\nDESCRIPTION: Documents per-handler statistics available under listener.<address>.<handler>.* path for examining per-worker thread metrics\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/listeners/stats.rst#2025-04-23_snippet_3\n\nLANGUAGE: rst\nCODE:\n```\n.. csv-table::\n   :header: Name, Type, Description\n   :widths: 1, 1, 2\n\n   downstream_cx_total, Counter, Total connections on this handler.\n   downstream_cx_active, Gauge, Total active connections on this handler.\n```\n\n----------------------------------------\n\nTITLE: Running Java Hello World Example with Bazel\nDESCRIPTION: Bazel command to build and install the Java Hello World sample application on an Android simulator. Requires pre-built Android AAR artifact and running Android simulator.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/mobile/docs/root/start/examples/hello_world.rst#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./bazelw mobile-install //examples/java/hello_world:hello_envoy --fat_apk_cpu=<arch1,arch2>\n```\n\n----------------------------------------\n\nTITLE: Runtime Guarding Feature in Envoy C++\nDESCRIPTION: Example of how to implement runtime guarding for a new feature in Envoy using the Runtime::runtimeFeatureEnabled function.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/CONTRIBUTING.md#2025-04-23_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\nif (Runtime::runtimeFeatureEnabled(\"envoy.reloadable_features.my_feature_name\")) {\n  [new code path]\n} else {\n  [old_code_path]\n}\n```\n\n----------------------------------------\n\nTITLE: Running Clang-Tidy Checks Under Docker - Bash\nDESCRIPTION: Runs 'clang-tidy' static analysis on the entire project inside a Docker container, using the CI scripts to manage environment and compilation database creation. Intended for thorough code quality checks, this process may take considerable time and uses Docker for dependency isolation and reproducibility.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/support/README.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n```bash\\n./ci/run_envoy_docker.sh ci/do_ci.sh clang_tidy\\n```\n```\n\n----------------------------------------\n\nTITLE: Encoding and Sending Metadata Downstream via Envoy ActiveStream (C++)\nDESCRIPTION: Represents the C++ method `encodeMetadata` within `ConnectionManagerImpl::ActiveStream`. This method is called after the filter chain has processed response metadata; it takes the final `MetadataMapVector` and uses the connection's codec to encode and send the metadata to the downstream peer.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/source/docs/h2_metadata.md#2025-04-23_snippet_5\n\nLANGUAGE: cpp\nCODE:\n```\nConnectionManagerImpl::ActiveStream::encodeMetadata(MetadataMapVector&\nmetadata).\n```\n\n----------------------------------------\n\nTITLE: Creating Request Headers in Kotlin and Swift\nDESCRIPTION: Shows how to create request headers using RequestHeadersBuilder in both Kotlin and Swift. Includes setting HTTP method, scheme, authority, and custom headers.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/mobile/docs/root/api/http.rst#2025-04-23_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nval headers = RequestHeadersBuilder(RequestMethod.POST, \"https\", \"api.envoyproxy.io\", \"/foo\")\n  .addRetryPolicy(RetryPolicy(...))\n  .addUpstreamHttpProtocol(UpstreamRequestProtocol.HTTP2)\n  .add(\"x-custom-header\", \"foobar\")\n  ...\n  .build()\n```\n\nLANGUAGE: swift\nCODE:\n```\nlet headers = RequestHeadersBuilder(method: .post, scheme: \"https\", authority: \"api.envoyproxy.io\", path: \"/foo\")\n  .addRetryPolicy(RetryPolicy(...))\n  .addUpstreamHttpProtocol(.http2)\n  .add(name: \"x-custom-header\", value: \"foobar\")\n  ...\n  .build()\n```\n\n----------------------------------------\n\nTITLE: Configuring SNI for Envoy Listeners using TLS Inspector Filter with YAML\nDESCRIPTION: This YAML configuration demonstrates how to set up SNI for Envoy listeners. It uses the TLS Inspector listener filter to detect the requested SNI and configures multiple filter chains with different server name matches. Each filter chain specifies different TLS certificates based on the domain names.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/faq/configuration/sni.rst#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\naddress:\n  socket_address: { address: 127.0.0.1, port_value: 1234 }\nlistener_filters:\n- name: \"envoy.filters.listener.tls_inspector\"\n  typed_config:\n    \"@type\": type.googleapis.com/envoy.extensions.filters.listener.tls_inspector.v3.TlsInspector\nfilter_chains:\n- filter_chain_match:\n    server_names: [\"example.com\", \"www.example.com\"]\n  transport_socket:\n    name: envoy.transport_sockets.tls\n    typed_config:\n      \"@type\": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.DownstreamTlsContext\n      common_tls_context:\n        tls_certificates:\n        - certificate_chain: { filename: \"example_com_cert.pem\" }\n          private_key: { filename: \"example_com_key.pem\" }\n  filters:\n  - name: envoy.filters.network.http_connection_manager\n    typed_config:\n      \"@type\": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager\n      stat_prefix: ingress_http\n      route_config:\n        virtual_hosts:\n        - name: default\n          domains: \"*\"\n          routes:\n          - match: { prefix: \"/\" }\n            route: { cluster: service_foo }\n- filter_chain_match:\n    server_names: \"api.example.com\"\n  transport_socket:\n    name: envoy.transport_sockets.tls\n    typed_config:\n      \"@type\": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.DownstreamTlsContext\n      common_tls_context:\n        tls_certificates:\n        - certificate_chain: { filename: \"api_example_com_cert.pem\" }\n          private_key: { filename: \"api_example_com_key.pem\" }\n  filters:\n  - name: envoy.filters.network.http_connection_manager\n    typed_config:\n      \"@type\": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager\n      stat_prefix: ingress_http\n      route_config:\n        virtual_hosts:\n        - name: default\n          domains: \"*\"\n          routes:\n          - match: { prefix: \"/\" }\n            route: { cluster: service_foo }\n```\n\n----------------------------------------\n\nTITLE: Using the ENVOY_LOG_MISC Macro in C++\nDESCRIPTION: Shows the usage of the `ENVOY_LOG_MISC` macro as a last resort for logging when a specific context or logger isn't available. This macro logs with the predefined `misc` ID. It takes the log level and the message string as arguments. Using a more specific ID via other macros is generally preferred.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/source/docs/logging.md#2025-04-23_snippet_4\n\nLANGUAGE: cpp\nCODE:\n```\nENVOY_LOG_MISC(warn, \"failed to enable core dump\");\n```\n\n----------------------------------------\n\nTITLE: Time Factor Calculation for Slow Start Mode\nDESCRIPTION: Mathematical formula for calculating the time factor used in slow start weight determination based on time since start and slow start window duration.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/intro/arch_overview/upstream/load_balancing/slow_start.rst#2025-04-23_snippet_1\n\nLANGUAGE: math\nCODE:\n```\nTimeFactor = \\frac{max(TimeSinceStartInSeconds,1)}{SlowStartWindowInSeconds}\n```\n\n----------------------------------------\n\nTITLE: Building Envoy Documentation Locally using CI Script\nDESCRIPTION: Command to build Envoy documentation locally from the root of the repository using the CI script.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/api/CONTRIBUTING.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nci/do_ci.sh docs\n```\n\n----------------------------------------\n\nTITLE: Outputting Histogram Buckets in Cumulative Mode - Envoy Admin API - JSON\nDESCRIPTION: This snippet illustrates the JSON output of cumulative histogram buckets as returned by Envoy's /stats endpoint with ?format=json&histogram_buckets=cumulative. Each bucket includes an upper bound and both interval and cumulative values. Input is a GET request with bucket mode set; output is a JSON array of histogram objects, each with bucket details. This allows in-depth analysis of value distributions. Requirements: Envoy running with histogram bucket configuration enabled.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/operations/admin.rst#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"histograms\": [\n    {\n      \"name\": \"example_histogram\",\n      \"buckets\": [\n        {\"upper_bound\": 1, \"interval\": 0, \"cumulative\": 0},\n        {\"upper_bound\": 2, \"interval\": 0, \"cumulative\": 1},\n        {\"upper_bound\": 3, \"interval\": 1, \"cumulative\": 3},\n        {\"upper_bound\": 4, \"interval\": 1, \"cumulative\": 3}\n      ]\n    },\n    {\n      \"name\": \"other_example_histogram\",\n      \"buckets\": [\n        {\"upper_bound\": 0.5, \"interval\": 0, \"cumulative\": 0},\n        {\"upper_bound\": 1, \"interval\": 0, \"cumulative\": 0},\n        {\"upper_bound\": 5, \"interval\": 0, \"cumulative\": 0},\n        {\"upper_bound\": 10, \"interval\": 0, \"cumulative\": 0},\n        {\"upper_bound\": 25, \"interval\": 0, \"cumulative\": 0},\n        {\"upper_bound\": 50, \"interval\": 0, \"cumulative\": 0},\n        {\"upper_bound\": 100, \"interval\": 0, \"cumulative\": 0},\n        {\"upper_bound\": 250, \"interval\": 0, \"cumulative\": 0},\n        {\"upper_bound\": 500, \"interval\": 0, \"cumulative\": 0},\n        {\"upper_bound\": 1000, \"interval\": 0, \"cumulative\": 0},\n        {\"upper_bound\": 2500, \"interval\": 0, \"cumulative\": 100},\n        {\"upper_bound\": 5000, \"interval\": 0, \"cumulative\": 300},\n        {\"upper_bound\": 10000, \"interval\": 0, \"cumulative\": 600},\n        {\"upper_bound\": 30000, \"interval\": 0, \"cumulative\": 600},\n        {\"upper_bound\": 60000, \"interval\": 0, \"cumulative\": 600},\n        {\"upper_bound\": 300000, \"interval\": 0, \"cumulative\": 600},\n        {\"upper_bound\": 600000, \"interval\": 0, \"cumulative\": 600},\n        {\"upper_bound\": 1800000, \"interval\": 0, \"cumulative\": 600},\n        {\"upper_bound\": 3600000, \"interval\": 0, \"cumulative\": 600}\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Passing Newly Added Metadata Through Filters (C++)\nDESCRIPTION: This overloaded `decodeMetadata` function in FilterManager is used specifically to process newly added metadata. After `processNewlyAddedMetadata` detects new metadata, this function iterates through the filters again, passing the *new* metadata map for potential further processing or modification by subsequent filters.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/source/docs/h2_metadata.md#2025-04-23_snippet_14\n\nLANGUAGE: cpp\nCODE:\n```\nFilterManager::decodeMetadata(ActiveStreamEncoderFilter* filter, MetadataMapPtr&& metadata_map)\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Heap Profiling\nDESCRIPTION: Command to run Envoy tests with heap profiling enabled using Bazel.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/bazel/PPROF.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ bazel test --test_env=HEAPPROFILE=/tmp/heapprof --define tcmalloc=gperftools <test target>\n```\n\n----------------------------------------\n\nTITLE: Configuring Direct Response Filter Type URL\nDESCRIPTION: The type URL configuration string required for setting up the direct response network filter in Envoy proxy.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/listeners/network_filters/direct_response_filter.rst#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ntype.googleapis.com/envoy.extensions.filters.network.direct_response.v3.Config\n```\n\n----------------------------------------\n\nTITLE: Building Envoy Documentation Using Hermetic Docker Container\nDESCRIPTION: Command to build Envoy documentation using a hermetic Docker container for a more consistent build environment.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/api/CONTRIBUTING.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./ci/run_envoy_docker.sh 'ci/do_ci.sh docs'\n```\n\n----------------------------------------\n\nTITLE: Basic Auth Credential Configuration\nDESCRIPTION: Configuration for Basic Authentication credentials to be injected into proxied requests.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/credential_injector_filter.rst#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n    - name: \"basic-auth-test\"\n      generic_secret:\n        secret: \"YWRtaW46cGFzc3dvcmQ=\"\n        type: \"basic-auth\"\n```\n\n----------------------------------------\n\nTITLE: Distribution Operations\nDESCRIPTION: Examples of recording values in a Distribution metric for tracking value distributions.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/mobile/docs/root/api/stats.rst#2025-04-23_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\ndistribution.recordValue(5)\n```\n\nLANGUAGE: swift\nCODE:\n```\ndistribution.recordValue(value: 5)\n```\n\n----------------------------------------\n\nTITLE: Defining a Standard Fuzz Test Entry Point in C++\nDESCRIPTION: Defines the standard function signature for an Envoy fuzz test using the `DEFINE_FUZZER` macro. This function receives raw byte input (`data`) and its size (`size`) from the fuzzing engine. The test implementation within this function is responsible for interpreting these bytes as meaningful input for the component under test.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/test/fuzz/README.md#2025-04-23_snippet_0\n\nLANGUAGE: c++\nCODE:\n```\nDEFINE_FUZZER(const uint8_t* data, size_t size) {\n  // Your test code goes here\n}\n```\n\n----------------------------------------\n\nTITLE: Base64 Encoding in Lua\nDESCRIPTION: Demonstrates how to encode a string in base64 format.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/lua_filter.rst#2025-04-23_snippet_27\n\nLANGUAGE: lua\nCODE:\n```\nlocal base64_encoded = handle:base64Escape(\"input string\")\n```\n\n----------------------------------------\n\nTITLE: Executing Sync Command Example\nDESCRIPTION: Demonstrates syncing changelog and inventory updates across branches.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/maintainer/RELEASE.md#2025-04-23_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n# bazel run @envoy_repo//:sync\n...\nProjectRunner SUCCESS [changelog] add: 1.21.2\nProjectRunner SUCCESS [inventory] update: 1.21 -> 1.21.2\nProjectRunner INFO [git] add: changelogs/1.21.2.yaml\nProjectRunner INFO [git] add: docs/inventories/v1.21/objects.inv\nProjectRunner INFO [git] add: docs/versions.yaml\nProjectRunner INFO [git] commit: \"repo: Sync\"\nProjectRunner NOTICE Repo synced\n```\n\n----------------------------------------\n\nTITLE: MongoDB Comment Parsing JSON Structure\nDESCRIPTION: JSON structure used for parsing MongoDB $comment fields to identify calling functions for statistics gathering\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/listeners/network_filters/mongo_proxy_filter.rst#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"callingFunction\": \"...\"\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Envoy Integration Test Structure in C++\nDESCRIPTION: Demonstrates the fundamental steps for an Envoy integration test: initializing the test environment and Envoy, creating an HTTP client connection, defining request headers, sending the request through Envoy to a fake upstream, waiting for the response, and verifying the request/response details on both upstream and downstream sides using C++ test assertions.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/test/integration/README.md#2025-04-23_snippet_0\n\nLANGUAGE: c++\nCODE:\n```\n// start Envoy, set up the fake upstreams.\ninitialize();\n\n// Create a client aimed at Envoy’s default HTTP port.\ncodec_client_ = makeHttpConnection(makeClientConnection((lookupPort(\"http\"))));\n\n// Create some request headers.\nHttp::TestRequestHeaderMapImpl request_headers{{\":method\", \"GET\"},\n                                               {\":path\", \"/test/long/url\"},\n                                               {\":scheme\", \"http\"},\n                                               {\":authority\", \"host\"}};\n\n// Send the request headers from the client, wait until they are received upstream. When they\n// are received, send the default response headers from upstream and wait until they are\n// received at by client\nauto response = sendRequestAndWaitForResponse(request_headers, 0, default_response_headers_, 0);\n\n// Verify the proxied request was received upstream, as expected.\nEXPECT_TRUE(upstream_request_->complete());\nEXPECT_EQ(0U, upstream_request_->bodyLength());\n// Verify the proxied response was received downstream, as expected.\nEXPECT_TRUE(response->complete());\nEXPECT_STREQ(\"200\", response->headers().Status()->value().c_str());\nEXPECT_EQ(0U, response_->body().size());\n```\n\n----------------------------------------\n\nTITLE: HTTP Connection Manager Response Details in RST\nDESCRIPTION: ReStructuredText documentation defining various response code details for HTTP connection management, including reasons for request rejection, timeout scenarios, and connection termination cases.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_conn_man/response_code_details.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. csv-table::\n   :header: Name, Description\n   :widths: 1, 2\n\n   absolute_path_rejected, The request was rejected due to using an absolute path on a route not supporting them.\n   admin_filter_response, The response was generated by the admin filter.\n   cluster_not_found, The request was rejected by the router filter because there was no cluster found for the selected route.\n```\n\n----------------------------------------\n\nTITLE: Registering ReadFilter for Fuzzing - Starlark\nDESCRIPTION: This snippet demonstrates how to add a new ReadFilter to Envoy's generic network-level fuzzer by appending its name to the READFILTER_FUZZ_FILTERS list within a Starlark (Bazel) config.bzl file. The list controls which filters are available to the fuzzer and associates each entry with its respective Envoy filter factory. To include a filter, simply add its unique identifier as a string to the list. No external dependencies are required, but only valid filter names should be included to prevent errors.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/source/docs/network_filter_fuzzing.md#2025-04-23_snippet_0\n\nLANGUAGE: starlark\nCODE:\n```\nREADFILTER_FUZZ_FILTERS = [\n    \"envoy.filters.network.client_ssl_auth\",\n    \"envoy.filters.network.ext_authz\",\n    \"envoy.filters.network.envoy_mobile_http_connection_manager\",\n    # A dedicated http_connection_manager fuzzer can be found in\n    # test/common/http/conn_manager_impl_fuzz_test.cc\n    \"envoy.filters.network.http_connection_manager\",\n    \"envoy.filters.network.local_ratelimit\",\n    \"envoy.filters.network.rbac\",\n    # TODO(asraa): Remove when fuzzer sets up connections for TcpProxy properly.\n    # \"envoy.filters.network.tcp_proxy\",\n    \"the_new_filter_created_by_you\", // <---Add the filter name here\n]\n```\n\n----------------------------------------\n\nTITLE: Initializing gRPC Stream in Kotlin\nDESCRIPTION: Example of creating and interacting with a gRPC stream using Kotlin. Demonstrates headers setup, stream client building, and message handling with callback implementations.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/mobile/docs/root/api/grpc.rst#2025-04-23_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval headers = GRPCRequestHeadersBuilder(scheme = \"https\", authority = \"envoyproxy.io\", path = \"/pb.api.v1.Foo/GetBar\")\n    .build()\n\n  val streamClient = AndroidStreamClientBuilder(application).build()\n    GRPCClient(streamClient)\n      .newGRPCStreamPrototype()\n      .setOnResponseHeaders { headers, endStream ->\n        Log.d(\"MainActivity\", \"Headers received: $headers, end stream: $endStream\")\n      }\n      .setOnResponseMessage { messageData in\n        Log.d(\"MainActivity\", \"Received gRPC message\")\n      }\n      .setOnResponseTrailers { trailers in\n        Log.d(\"MainActivity\", \"Trailers received: $trailers\")\n      }\n      .setOnError { ... }\n      .setOnCancel { ... }\n      .start(Executors.newSingleThreadExecutor())\n      .sendHeaders(headers, false)\n      .sendMessage(...)\n      ...\n      .close()\n```\n\n----------------------------------------\n\nTITLE: Updating Logger Levels with Multiple Matching Patterns via Envoy Admin API\nDESCRIPTION: Shows an HTTP POST request to the `/logging` endpoint with multiple path specifications. It demonstrates that when multiple patterns match the same file (e.g., `tcp_listener_impl.cc` matches both `???_listener_impl` and `tcp_listener_impl`), the first matching rule (`???_listener_impl:info`) takes precedence.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/source/docs/fine_grain_log.md#2025-04-23_snippet_8\n\nLANGUAGE: http\nCODE:\n```\nPOST /logging?paths=???_listener_impl:info,tcp_listener_impl:warning\n```\n\n----------------------------------------\n\nTITLE: Annotating Extension Category in Protobuf\nDESCRIPTION: This snippet demonstrates how to annotate an extension category in a protobuf message field, which is required when adding a new extension category.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/api/STYLE.md#2025-04-23_snippet_4\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage SomeMessage {\n  // An ordered list of http filters\n  // [#extension-category: envoy.http.filters]\n  repeated core.v3.TypedExtensionConfig http_filter_extensions = 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Load Balancer Subset Statistics in Envoy\nDESCRIPTION: CSV table showing statistics for monitoring load balancer subset decisions. These stats track active subsets, creation/removal events, and fallback behaviors.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/upstream/cluster_manager/cluster_stats.rst#2025-04-23_snippet_1\n\nLANGUAGE: csv\nCODE:\n```\nName, Type, Description\nlb_subsets_active, Gauge, Number of currently available subsets\nlb_subsets_created, Counter, Number of subsets created\nlb_subsets_removed, Counter, Number of subsets removed due to no hosts\nlb_subsets_selected, Counter, Number of times any subset was selected for load balancing\nlb_subsets_fallback, Counter, Number of times the fallback policy was invoked\nlb_subsets_fallback_panic, Counter, Number of times the subset panic mode triggered\nlb_subsets_single_host_per_subset_duplicate, Gauge, Number of duplicate (unused) hosts when using single_host_per_subset\n```\n\n----------------------------------------\n\nTITLE: Running Code Coverage Analysis for Envoy\nDESCRIPTION: Command to generate code coverage reports for Envoy using a Clang toolchain. This produces both summary results in standard output and a detailed HTML report.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/bazel/README.md#2025-04-23_snippet_43\n\nLANGUAGE: bash\nCODE:\n```\ntest/run_envoy_bazel_coverage.sh\n```\n\n----------------------------------------\n\nTITLE: Configuring Send All Clusters in LoadStatsResponse\nDESCRIPTION: The send_all_clusters field in LoadStatsResponse indicates whether the client should send stats for all clusters.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/api/client_features.rst#2025-04-23_snippet_2\n\nLANGUAGE: protobuf\nCODE:\n```\nenvoy_api_field_service.load_stats.v2.LoadStatsResponse.send_all_clusters\n```\n\n----------------------------------------\n\nTITLE: Bazel Build File Boilerplate for Python Tools - Starlark\nDESCRIPTION: Provides Bazel BUILD file boilerplate to load required macros for defining Python binaries and handling dependencies. Includes Apache 2 licensing declaration. `requirement` and `envoy_py_binary` must be loaded for dependency management and binary rules. Dependencies: Bazel, rules_python, and the Envoy-specific macro files.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/tools/README.md#2025-04-23_snippet_6\n\nLANGUAGE: starlark\nCODE:\n```\nload(\"//tools/base:envoy_python.bzl\", \"envoy_py_binary\")\nload(\"@sometools_pip3//:requirements.bzl\", \"requirement\")\n\nlicenses([\"notice\"])  # Apache 2\n```\n\n----------------------------------------\n\nTITLE: Support Rotation Documentation in Markdown\nDESCRIPTION: Markdown document describing the support rotation system for Envoy Mobile, including maintainer responsibilities and communication channels.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/mobile/docs/Support.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Support Rotation\n\nEnvoy Mobile has a support rotation system to ensure that discussions,\nissues and pull requests are handled in a timely manner from someone who\nworks on Envoy Mobile at Lyft.\n\n## Who's this week's current support maintainer?\n\nThe current support maintainer's GitHub username is defined\n[here](https://github.com/envoyproxy/envoy-mobile/blob/main/.github/lyft_maintainers.yml#L1).\n\n## Responsibilities\n\n* **Monitor GitHub Issues & Pull Requests:** Ensure that discussions on\n  GitHub are engaged with in a prompt manner.\n* **Monitor Slack:** Engage with Slack discussions in the Envoy slack\n  org ([#envoy-mobile](https://envoyproxy.slack.com/archives/CKQ2LK23G),\n  [#envoy-mobile-engflow-ci](https://envoyproxy.slack.com/archives/C02QMNG92A3)).\n\nEven though there is no concrete SLA, the support maintainer will make a\nreasonable effort to engage with discussions within 1 business day.\n\n## Why is the rotation limited to Lyft employees?\n\nEnvoy Mobile is a project maintained by contributors from multiple\ncompanies, as highlighted in [OWNERS.md](../OWNERS.md), but as the\nproject grows we believe it will be helpful to have a point of contact\nwithin a company that has been using Envoy Mobile in production.\n```\n\n----------------------------------------\n\nTITLE: Installing Git Hooks for Envoy Development\nDESCRIPTION: Command to install git hooks that implement important pre-commit and pre-push checks for Envoy development.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/CONTRIBUTING.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./support/bootstrap\n```\n\n----------------------------------------\n\nTITLE: Configuring DLB Connection Balancer in Envoy (YAML)\nDESCRIPTION: This YAML snippet demonstrates how to configure Envoy to use the DLB (Dynamic Load Balancer) connection balancer extension. Requires Envoy built with contrib images and the libdlb library installed, as well as supported Intel hardware. All key configuration parameters should align with the DLB API, and improper configuration may prevent Envoy from starting. The snippet configures the relevant extension under Envoy's network configuration to offload connection balancing to Intel DLB.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/other_features/dlb.rst#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n## YAML configuration for DLB connection balancer\n## Original code would be included here as referenced in _include/dlb.yaml.\n```\n\n----------------------------------------\n\nTITLE: Adding Work-in-Progress Annotation to Protobuf File\nDESCRIPTION: This snippet demonstrates how to add a work-in-progress annotation to a protobuf file, indicating that it's not subject to the threat model or breaking change policy.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/api/STYLE.md#2025-04-23_snippet_2\n\nLANGUAGE: protobuf\nCODE:\n```\noption (xds.annotations.v3.file_status).work_in_progress = true;\n```\n\n----------------------------------------\n\nTITLE: Setting up Clang on Linux for Envoy Bazel Build\nDESCRIPTION: These commands set up Clang for building Envoy on Linux using the prebuilt Clang+LLVM package.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/bazel/README.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nbazel/setup_clang.sh <PATH_TO_EXTRACTED_CLANG_LLVM>\n```\n\nLANGUAGE: bash\nCODE:\n```\necho \"build --config=clang\" >> user.bazelrc\n```\n\n----------------------------------------\n\nTITLE: Getting Timestamp in Lua\nDESCRIPTION: Shows how to get a high resolution timestamp in milliseconds since epoch.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/lua_filter.rst#2025-04-23_snippet_28\n\nLANGUAGE: lua\nCODE:\n```\ntimestamp = handle:timestamp(format)\n```\n\n----------------------------------------\n\nTITLE: Executing Dev Command Example\nDESCRIPTION: Demonstrates running the dev command which increments version and sets up new changelog files.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/maintainer/RELEASE.md#2025-04-23_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n# bazel run @envoy_repo//:dev\n...\nProjectRunner SUCCESS [version] 1.24.0-dev\nProjectRunner SUCCESS [changelog] add: 1.23.0\nProjectRunner SUCCESS [changelog] up to date\nProjectRunner SUCCESS [inventory] up to date\nProjectRunner INFO [git] add: VERSION.txt\nProjectRunner INFO [git] add: changelogs/1.23.0.yaml\nProjectRunner INFO [git] add: changelogs/current.yaml\nProjectRunner INFO [git] commit: \"repo: Dev `1.24.0-dev`\"\nProjectRunner NOTICE Repo set to dev (1.24.0-dev)\n\n```\n\n----------------------------------------\n\nTITLE: Running Docker Build Container for Documentation\nDESCRIPTION: Command to build documentation using the Docker build image used in continuous integration. Requires 4-5GB of disk space for the build image.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n./ci/run_envoy_docker.sh './ci/do_ci.sh docs'\n```\n\n----------------------------------------\n\nTITLE: Using IsSubset/SupersetOfHeaders Matchers for HeaderMap Containment in C++\nDESCRIPTION: Demonstrates the `IsSubsetOfHeaders` and `IsSupersetOfHeaders` custom Google Mock matchers. `IsSubsetOfHeaders` verifies that the actual `HeaderMap` (e.g., `response->headers()`) contains only headers that are present in a given allowed set (`allowed_headers`). `IsSupersetOfHeaders` checks that the actual `HeaderMap` contains at least all the headers specified in a required set (`required_headers`).\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/test/README.md#2025-04-23_snippet_4\n\nLANGUAGE: cpp\nCODE:\n```\nEXPECT_THAT(response->headers(), IsSubsetOfHeaders(allowed_headers));\n```\n\nLANGUAGE: cpp\nCODE:\n```\nEXPECT_THAT(response->headers(), IsSupersetOfHeaders(required_headers));\n```\n\n----------------------------------------\n\nTITLE: Annotating Extension Name in Protobuf\nDESCRIPTION: This example shows how to annotate an extension name in a protobuf file, which is required for each new extension added to the metadata.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/api/STYLE.md#2025-04-23_snippet_5\n\nLANGUAGE: protobuf\nCODE:\n```\n// [#protodoc-title: Your New Filter]\n// [#extension: envoy.http.filters.your_new_filter]\n\n// YourFilterConfig is the configuration for a YourFilter (write real documentation here).\nmessage YourFilterConfig {\n}\n```\n\n----------------------------------------\n\nTITLE: Package Requirements with Hash Verification\nDESCRIPTION: This snippet from a requirements.txt file defines the zstandard Python package with a pinned version (0.23.0) and multiple SHA256 hash verifications for security. The hashes ensure the downloaded package matches the expected content.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/tools/base/requirements.txt#2025-04-23_snippet_9\n\nLANGUAGE: plaintext\nCODE:\n```\nzstandard==0.23.0 \\\n    --hash=sha256:034b88913ecc1b097f528e42b539453fa82c3557e414b3de9d5632c80439a473 \\\n    --hash=sha256:0a7f0804bb3799414af278e9ad51be25edf67f78f916e08afdb983e74161b916 \\\n    --hash=sha256:11e3bf3c924853a2d5835b24f03eeba7fc9b07d8ca499e247e06ff5676461a15 \\\n    --hash=sha256:12a289832e520c6bd4dcaad68e944b86da3bad0d339ef7989fb7e88f92e96072 \\\n    --hash=sha256:1516c8c37d3a053b01c1c15b182f3b5f5eef19ced9b930b684a73bad121addf4\n```\n\n----------------------------------------\n\nTITLE: Header Map Implementation Fix Reference - C++\nDESCRIPTION: Code commits referenced in the document that fixed the HeaderMapImpl to improve performance from O(n^2) to O(1) for byte size calculations and added configurable header limits.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/security/postmortems/cve-2019-15225.md#2025-04-23_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nafc39bea36fd436e54262f150c009e8d72db5014\n5c122a35ebd7d3f7678b0f1c9846c1e282bba079\n```\n\n----------------------------------------\n\nTITLE: Configuring gRPC Stream Prototype in Swift\nDESCRIPTION: Implementation of gRPC stream prototype configuration in Swift, demonstrating event handler setup for stream responses.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/mobile/docs/root/api/grpc.rst#2025-04-23_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\nlet prototype = grpcClient\n    .newGRPCStreamPrototype()\n    .setOnResponseHeaders { headers, endStream in\n      print(\"Headers received: \\(headers), end stream: \\(endStream)\")\n    }\n    .setOnResponseMessage { messageData in\n      print(\"Received gRPC message\")\n    }\n    .setOnResponseTrailers { trailers in\n      print(\"Trailers received: \\(trailers)\")\n    }\n    .setOnError { ... }\n    .setOnCancel { ... }\n```\n\n----------------------------------------\n\nTITLE: Running Envoy Stats Memory Integration Tests using Bazel (Bash)\nDESCRIPTION: This command executes the Envoy statistics memory integration tests locally using the Bazel build system. It runs the specific test target `test/integration:stats_integration_test` in optimized mode (`-c opt`) and sets the environment variable `ENVOY_MEMORY_TEST_EXACT=true` to enforce strict memory usage checks against predefined golden values.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/source/docs/stats.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n  bazel test -c opt --test_env=ENVOY_MEMORY_TEST_EXACT=true \\\n      test/integration:stats_integration_test\n```\n\n----------------------------------------\n\nTITLE: HTTP/1 Codec Error Details in RST\nDESCRIPTION: ReStructuredText documentation listing HTTP/1 specific error details and their descriptions, covering various protocol violations and configuration issues.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_conn_man/response_code_details.rst#2025-04-23_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. csv-table::\n   :header: Name, Description\n   :widths: 1, 2\n\n   http1.body_disallowed, A body was sent on a request where bodies are not allowed.\n   http1.codec_error, Some error was encountered in the http_parser internals.\n   http1.connection_header_rejected, The Connection header was malformed or overly long.\n```\n\n----------------------------------------\n\nTITLE: Perfetto Scoped Tracing Example\nDESCRIPTION: Example of using Perfetto tracing macros for function-level tracing\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/bazel/PPROF.md#2025-04-23_snippet_14\n\nLANGUAGE: cpp\nCODE:\n```\nRequestDecoder& ConnectionManagerImpl::newStream(ResponseEncoder& response_encoder,\n                                                 bool is_internally_created) {\n  TRACE_EVENT(\"core\", \"ConnectionManagerImpl::newStream\"); // Begin \"ConnectionManagerImpl::newStream\" slice.\n  ...\n\n  // End \"ConnectionManagerImpl::newStream\" slice.\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Load Balancer Statistics in Envoy\nDESCRIPTION: CSV table showing the main statistics available for monitoring load balancer decisions. These stats track zone-aware routing, health panic mode, and original destination validation.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/upstream/cluster_manager/cluster_stats.rst#2025-04-23_snippet_0\n\nLANGUAGE: csv\nCODE:\n```\nName, Type, Description\nlb_recalculate_zone_structures, Counter, The number of times locality aware routing structures are regenerated for fast decisions on upstream locality selection\nlb_healthy_panic, Counter, Total requests load balanced with the load balancer in panic mode\nlb_zone_cluster_too_small, Counter, No zone aware routing because of small upstream cluster size\nlb_zone_routing_all_directly, Counter, Sending all requests directly to the same zone\nlb_zone_routing_sampled, Counter, Sending some requests to the same zone\nlb_zone_routing_cross_zone, Counter, Zone aware routing mode but have to send cross zone\nlb_local_cluster_not_ok, Counter, Local host set is not set or it is panic mode for local cluster\nlb_zone_number_differs, Counter, No zone aware routing because the feature flag is disabled and the number of zones in local and upstream cluster is different\nlb_zone_no_capacity_left, Counter, Total number of times ended with random zone selection due to rounding error\noriginal_dst_host_invalid, Counter, Total number of invalid hosts passed to original destination load balancer\n```\n\n----------------------------------------\n\nTITLE: Defining a C++ Interface Header in Envoy\nDESCRIPTION: Example of a pure virtual interface header file in C++ with include statements and a class with pure virtual methods. This demonstrates the pattern used for Envoy interfaces in the envoy directory.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/bazel/DEVELOPER.md#2025-04-23_snippet_0\n\nLANGUAGE: c++\nCODE:\n```\n#pragma once\n\n#include \"envoy/buffer/buffer.h\"\n#include \"envoy/foo/baz.h\"\n\nclass Bar {\npublic:\n  virtual ~Bar() = default;\n\n  virtual void someThing() PURE;\n  ...\n```\n\n----------------------------------------\n\nTITLE: ZooKeeper Proxy Opcode Latency Metrics in CSV Format\nDESCRIPTION: A CSV listing of histogram metrics for tracking ZooKeeper opcode execution times in milliseconds. Each metric represents the response latency for different ZooKeeper operation codes.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/listeners/network_filters/zookeeper_proxy_filter.rst#2025-04-23_snippet_6\n\nLANGUAGE: csv\nCODE:\n```\n  getallchildrennumber_resp_latency, Histogram, Opcode execution time in milliseconds\n  delete_resp_latency, Histogram, Opcode execution time in milliseconds\n  exists_resp_latency, Histogram, Opcode execution time in milliseconds\n  getacl_resp_latency, Histogram, Opcode execution time in milliseconds\n  setacl_resp_latency, Histogram, Opcode execution time in milliseconds\n  sync_resp_latency, Histogram, Opcode execution time in milliseconds\n  multi_resp_latency, Histogram, Opcode execution time in milliseconds\n  reconfig_resp_latency, Histogram, Opcode execution time in milliseconds\n  close_resp_latency, Histogram, Opcode execution time in milliseconds\n  setauth_resp_latency, Histogram, Opcode execution time in milliseconds\n  setwatches_resp_latency, Histogram, Opcode execution time in milliseconds\n  setwatches2_resp_latency, Histogram, Opcode execution time in milliseconds\n  addwatch_resp_latency, Histogram, Opcode execution time in milliseconds\n  checkwatches_resp_latency, Histogram, Opcode execution time in milliseconds\n  removewatches_resp_latency, Histogram, Opcode execution time in milliseconds\n  check_resp_latency, Histogram, Opcode execution time in milliseconds\n```\n\n----------------------------------------\n\nTITLE: Skipping Git Commit Hooks - Bash\nDESCRIPTION: Performs a git commit while bypassing the project's pre-commit (and other) hooks using the '--no-verify' flag. This is useful when users temporarily wish to commit without triggering automated checks. No additional dependencies are required beyond git.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/support/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n```bash\\ngit commit --no-verify\\n```\n```\n\n----------------------------------------\n\nTITLE: Adding a Git alias for triggering CI re-runs\nDESCRIPTION: This Git config command adds an alias to create an empty commit and push it, which can be used to trigger a CI re-run when tasks are stuck.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/CONTRIBUTING.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n[alias]\n    kick-ci = !\"git commit -s --allow-empty -m 'Kick CI' && git push\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Load Reporting Service in Envoy YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure the Load Reporting Service (LRS) in an Envoy configuration file. It highlights the specific section where LRS is set up, allowing Envoy to emit load reports to a management server at regular intervals.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/intro/arch_overview/upstream/load_reporting_service.rst#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n.. literalinclude:: /start/sandboxes/_include/load-reporting-service/envoy.yaml\n    :language: yaml\n    :linenos:\n    :emphasize-lines: 60-64\n    :caption: :download:`envoy.yaml </start/sandboxes/_include/load-reporting-service/envoy.yaml>`\n```\n\n----------------------------------------\n\nTITLE: Manually Initialize Git Submodules - Bash\nDESCRIPTION: Initializes and updates git submodules for an existing repository. This should be run if the repository was not cloned with --recursive, ensuring all submodules (including envoy) are initialized. Only requires git, and modifies the .gitmodules-indexed submodules in-place.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/mobile/docs/root/start/building/building.rst#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit submodule update --init\n```\n\n----------------------------------------\n\nTITLE: Retrieving Dynamic Metadata Entry in Envoy Lua\nDESCRIPTION: Calls the `get()` method on the `dynamicMetadata` object, providing a `filterName` (string) as an argument. It returns a Lua table containing the metadata associated with that filter name. Specific values can be accessed using standard table indexing.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/lua_filter.rst#2025-04-23_snippet_40\n\nLANGUAGE: lua\nCODE:\n```\ndynamicMetadata:get(filterName)\n\n-- to get a value from a returned table.\ndynamicMetadata:get(filterName)[key]\n```\n\n----------------------------------------\n\nTITLE: Perfetto Counter Example\nDESCRIPTION: Example of recording numeric data using Perfetto counter\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/bazel/PPROF.md#2025-04-23_snippet_16\n\nLANGUAGE: cpp\nCODE:\n```\nTRACE_COUNTER(\"extensions\", \"MemoryAllocated\",\n              tcmalloc::MallocExtension::GetNumericProperty(\"generic.current_allocated_bytes\"));\n```\n\n----------------------------------------\n\nTITLE: Defining ZooKeeper Response Count Counters (Plaintext)\nDESCRIPTION: This section defines counter statistics tracking the total number of responses received for each type of ZooKeeper operation handled by the Envoy proxy filter. This includes standard operations like connect, ping, CRUD operations (create, getdata, setdata, delete), ACL management, and watch operations.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/listeners/network_filters/zookeeper_proxy_filter.rst#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nconnect_resp, Counter, Number of connect responses\nping_resp, Counter, Number of ping responses\nauth_resp, Counter, Number of auth responses\ngetdata_resp, Counter, Number of getdata responses\ncreate_resp, Counter, Number of create responses\ncreate2_resp, Counter, Number of create2 responses\ncreatecontainer_resp, Counter, Number of createcontainer responses\ncreatettl_resp, Counter, Number of createttl responses\nsetdata_resp, Counter, Number of setdata responses\ngetchildren_resp, Counter, Number of getchildren responses\ngetchildren2_resp, Counter, Number of getchildren2 responses\ndelete_resp, Counter, Number of delete responses\nexists_resp, Counter, Number of exists responses\ngetacl_resp, Counter, Number of getacl responses\nsetacl_resp, Counter, Number of setacl responses\nsync_resp, Counter, Number of sync responses\ncheck_resp, Counter, Number of check responses\nmulti_resp, Counter, Number of multi responses\nreconfig_resp, Counter, Number of reconfig responses\nsetauth_resp, Counter, Number of setauth responses\nsetwatches_resp, Counter, Number of setwatches responses\nsetwatches2_resp, Counter, Number of setwatches2 responses\naddwatch_resp, Counter, Number of addwatch responses\ncheckwatches_resp, Counter, Number of checkwatches responses\nremovewatches_resp, Counter, Number of removewatches responses\ngetephemerals_resp, Counter, Number of getephemerals responses\ngetallchildrennumber_resp, Counter, Number of getallchildrennumber responses\nclose_resp, Counter, Number of close responses\nwatch_event, Counter, Number of watch events fired by the server\n```\n\n----------------------------------------\n\nTITLE: Declaring a Test with JSON Configuration\nDESCRIPTION: Example of using envoy_cc_test_with_json rule for integration tests that require JSON configuration files. Shows how to include JSON files with template variables for test directories.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/bazel/DEVELOPER.md#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nenvoy_cc_test_with_json(\n    name = \"bar_integration_test\",\n    srcs = [\"bar_integration_test.cc\"],\n    jsons = [\"//test/config/integration:server.json\"],\n    deps = [\n        \"//source/server:server_lib\",\n        ...\n    ],\n)\n```\n\n----------------------------------------\n\nTITLE: DynamoDB Per Partition and Operation Statistics CSV Table in reStructuredText\nDESCRIPTION: Defines a CSV table structure for DynamoDB per partition and operation statistics, including operation name, type, and description.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/dynamodb_filter.rst#2025-04-23_snippet_3\n\nLANGUAGE: rst\nCODE:\n```\n.. csv-table::\n    :header: Name, Type, Description\n    :widths: 1, 1, 2\n\n    capacity.<operation_name>.__partition_id=<last_seven_characters_from_partition_id>, Counter, Total number of capacity for ``<operation_name>`` on ``<table_name>`` table for a given ``<partition_id>``\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Package Dependencies with Hashes\nDESCRIPTION: This snippet demonstrates how to specify Python package dependencies with their versions and SHA256 hashes. It includes multiple packages such as protobuf, pyasn1, pyasn1-modules, pycodestyle, and pycparser. The hashes ensure package integrity and security during installation.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/tools/base/requirements.txt#2025-04-23_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nprotobuf==5.29.3 \\\n    --hash=sha256:0a18ed4a24198528f2333802eb075e59dea9d679ab7a6c5efb017a59004d849f \\\n    --hash=sha256:0eb32bfa5219fc8d4111803e9a690658aa2e6366384fd0851064b963b6d1f2a7 \\\n    --hash=sha256:3ea51771449e1035f26069c4c7fd51fba990d07bc55ba80701c78f886bf9c888 \\\n    --hash=sha256:5da0f41edaf117bde316404bad1a486cb4ededf8e4a54891296f648e8e076620 \\\n    --hash=sha256:6ce8cc3389a20693bfde6c6562e03474c40851b44975c9b2bf6df7d8c4f864da \\\n    --hash=sha256:84a57163a0ccef3f96e4b6a20516cedcf5bb3a95a657131c5c3ac62200d23252 \\\n    --hash=sha256:a4fa6f80816a9a0678429e84973f2f98cbc218cca434abe8db2ad0bffc98503a \\\n    --hash=sha256:a8434404bbf139aa9e1300dbf989667a83d42ddda9153d8ab76e0d5dcaca484e \\\n    --hash=sha256:b89c115d877892a512f79a8114564fb435943b59067615894c3b13cd3e1fa107 \\\n    --hash=sha256:c027e08a08be10b67c06bf2370b99c811c466398c357e615ca88c91c07f0910f \\\n    --hash=sha256:daaf63f70f25e8689c072cfad4334ca0ac1d1e05a92fc15c54eb9cf23c3efd84\n    # via\n    #   -r requirements.in\n    #   envoy-base-utils\n    #   envoy-docs-sphinx-runner\npyasn1==0.6.1 \\\n    --hash=sha256:0d632f46f2ba09143da3a8afe9e33fb6f92fa2320ab7e886e2d0f7672af84629 \\\n    --hash=sha256:6f580d2bdd84365380830acf45550f2511469f673cb4a5ae3857a3170128b034\n    # via\n    #   pyasn1-modules\n    #   service-identity\npyasn1-modules==0.4.1 \\\n    --hash=sha256:49bfa96b45a292b711e986f222502c1c9a5e1f4e568fc30e2574a6c7d07838fd \\\n    --hash=sha256:c28e2dbf9c06ad61c71a075c7e0f9fd0f1b0bb2d2ad4377f240d33ac2ab60a7c\n    # via service-identity\npycodestyle==2.12.1 \\\n    --hash=sha256:46f0fb92069a7c28ab7bb558f05bfc0110dac69a0cd23c61ea0040283a9d78b3 \\\n    --hash=sha256:6838eae08bbce4f6accd5d5572075c63626a15ee3e6f842df996bf62f6d73521\n    # via flake8\npycparser==2.22 \\\n    --hash=sha256:491c8be9c040f5390f5bf44a5b07752bd07f56edf992381b05c701439eec10f6\n```\n\n----------------------------------------\n\nTITLE: Code Reference - Path Normalization Commits\nDESCRIPTION: Commit hash references for patches implementing path normalization fix for CVE-2019-9901\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/security/postmortems/cve-2019-9900.md#2025-04-23_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\nhttps://github.com/envoyproxy/envoy/commit/c22cfd2c483fc26534382a0b6835f45264bb137a\nhttps://github.com/envoyproxy/envoy/commit/7ed6d2187df94c4cb96f7dccb8643bf764af2ccb\n```\n\n----------------------------------------\n\nTITLE: Filter Callback for Adding Decoded Metadata (C++)\nDESCRIPTION: This function, part of the StreamDecoderFilterCallbacks interface provided to filters, allows a filter to insert new metadata maps during request decoding. The added metadata is appended to `FilterManager::request_metadata_map_vector_`.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/source/docs/h2_metadata.md#2025-04-23_snippet_12\n\nLANGUAGE: cpp\nCODE:\n```\nStreamDecoderFilterCallbacks::addDecodedMetadata()\n```\n\n----------------------------------------\n\nTITLE: Example Envoy Symbol Table Assertion Failure Log (Plaintext)\nDESCRIPTION: This snippet shows an example critical assertion failure log message originating from Envoy's `symbol_table.cc`. It indicates a failure during a symbol table lookup (`decode_search != decode_map_.end()`), which typically occurs when attempting to combine `StatName` objects originating from different `SymbolTable` instances, a common issue in test environments. The message directs users to the relevant documentation section for troubleshooting.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/source/docs/stats.md#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n[...][16][critical][assert] [source/common/stats/symbol_table.cc:341] assert failure:\ndecode_search != decode_map_.end(). Details: Please see\nhttps://github.com/envoyproxy/envoy/blob/main/source/docs/stats.md#debugging-symbol-table-assertions\n```\n\n----------------------------------------\n\nTITLE: Optional Reference Type Alias in C++\nDESCRIPTION: Shows the preferred way to declare optional reference type aliases using Envoy's helper class from envoy/common/optref.h.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/STYLE.md#2025-04-23_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nusing FooOptRef = OptRef<T>;\nusing FooOptConstRef = OptRef<const T>;\n```\n\n----------------------------------------\n\nTITLE: Configuring Upstream Cluster with Header-Based Metadata Matching (YAML)\nDESCRIPTION: This YAML snippet presents a sample upstream cluster configuration for Envoy, typically used to match routed requests where the Payload-To-Metadata filter has injected custom metadata (for example, version information) based on Thrift message payloads. Matching rules in the cluster leverage this metadata for endpoint selection. The configuration must specify the appropriate metadata match and subset load balancing criteria, corresponding to the metadata injected by the filter.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/other_protocols/thrift_filters/payload_to_metadata_filter.rst#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n    lb_subset_config:\n      fallback_policy: NO_FALLBACK\n      subset_selectors:\n      - keys:\n        - version\n    metadata:\n      filter_metadata:\n        envoy.lb:\n          version: \"1.0.0\"\n```\n\n----------------------------------------\n\nTITLE: New Metadata Values Example in YAML\nDESCRIPTION: Example showing the new metadata values to be set by the filter\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/set_metadata_filter.rst#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nmyint: 2\nmylist: [\"b\",\"c\"]\nmykey: 1\nmytags:\n  tag1: 1\n```\n\n----------------------------------------\n\nTITLE: Setting Bazel Build Options\nDESCRIPTION: Command to set additional Bazel build options through environment variables\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/ci/README.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nexport BAZEL_BUILD_EXTRA_OPTIONS=--config=my-remote-cache\n```\n\n----------------------------------------\n\nTITLE: Suppressing Memcheck Conditional Jump Error in re2::SparseArray::has_index\nDESCRIPTION: This Valgrind suppression entry ignores 'Memcheck:Cond' (conditional jump depends on uninitialised value) errors detected within the `re2::SparseArray<int>::has_index(int)` function. Similar to the SparseSet suppression, this handles cases where conditional logic might depend on uninitialized memory within this re2 array function.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/tools/debugging/valgrind-suppressions.txt#2025-04-23_snippet_3\n\nLANGUAGE: valgrind_suppression\nCODE:\n```\n{\n   re2 cond-jump failure\n   Memcheck:Cond\n   fun:_ZNK3re211SparseArrayIiE9has_indexEi\n   ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring toctree for QAT and QATZip Extensions in RST\nDESCRIPTION: Sets up a table of contents tree (toctree) in reStructuredText format. It includes documentation for QAT private key providers and QATZip/QATZstd compression extensions, using glob patterns to include all relevant files within specific directories.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/api-v3/config/contrib/qat/qat.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n  :glob:\n  :maxdepth: 2\n\n  ../../../extensions/private_key_providers/qat/v3alpha/*\n  ../../../extensions/compression/qatzip/compressor/v3alpha/*\n  ../../../extensions/compression/qatzstd/compressor/v3alpha/*\n```\n\n----------------------------------------\n\nTITLE: Regional Endpoint Cluster Configuration\nDESCRIPTION: YAML configuration for specifying the regional endpoint in the target cluster for AWS Lambda functions.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/aws_lambda_filter.rst#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n:language: yaml\n:lines: 35-53\n:lineno-start: 35\n:linenos:\n:caption: :download:`aws-lambda-filter.yaml <_include/aws-lambda-filter.yaml>`\n```\n\n----------------------------------------\n\nTITLE: Building Envoy Docker image (Console)\nDESCRIPTION: Command to build a custom Envoy Docker image using the provided Dockerfile.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/start/docker.rst#2025-04-23_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ docker build -t envoy:v1 .\n```\n\n----------------------------------------\n\nTITLE: Cleaning up Network Namespace and iptables Configuration in Bash\nDESCRIPTION: Removes the network namespace and iptables configuration created for testing.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/configs/original-dst-cluster/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsudo ./configs/original-dst-cluster/netns_cleanup.sh ns1 173.194.222.0/24\n```\n\n----------------------------------------\n\nTITLE: Configuring Git on Windows for Envoy Bazel Build\nDESCRIPTION: This command adds Git to the PATH on Windows for building Envoy.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/bazel/README.md#2025-04-23_snippet_16\n\nLANGUAGE: cmd\nCODE:\n```\nset PATH=%USERPROFILE%\\Git\\bin;%PATH%\n```\n\n----------------------------------------\n\nTITLE: Accessing Header Values in Lua Cluster Specifier\nDESCRIPTION: Shows how to retrieve a specific header value from the request headers.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/cluster_specifier/lua.rst#2025-04-23_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nheaders:get(key)\n```\n\n----------------------------------------\n\nTITLE: Regenerating Bazel Toolchain Configs for Envoy Proxy\nDESCRIPTION: This command runs a shell script to regenerate the Bazel toolchain configurations. It should be executed in an environment with the latest Bazel and Docker installed. The script updates configs in the 'toolchains/configs' directory.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/bazel/rbe/toolchains/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ntoolchains/regenerate.sh\n```\n\n----------------------------------------\n\nTITLE: Preventing Stalebot Closure using RepoKitteh Command\nDESCRIPTION: This slash command, used in a GitHub issue or pull request comment, instructs RepoKitteh to apply the `no stalebot` label. This label prevents automated tools (like stalebot) from marking the item as stale or closing it due to inactivity.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/source/docs/repokitteh.md#2025-04-23_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\n/nostalebot\n```\n\n----------------------------------------\n\nTITLE: Fault Injection Statistics Fields\nDESCRIPTION: CSV table structure defining statistics fields for fault injection monitoring, including counters for delays, aborts, rate limits, and active faults tracking.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/fault_filter.rst#2025-04-23_snippet_2\n\nLANGUAGE: csv\nCODE:\n```\nName, Type, Description\ndelays_injected, Counter, Total requests that were delayed\naborts_injected, Counter, Total requests that were aborted\nresponse_rl_injected, Counter, \"Total requests that had a response rate limit selected for injection\"\nfaults_overflow, Counter, Total number of faults that were not injected due to overflow\nactive_faults, Gauge, Total number of faults active at the current time\n<downstream-cluster>.delays_injected, Counter, Total delayed requests for the given downstream cluster\n<downstream-cluster>.aborts_injected, Counter, Total aborted requests for the given downstream cluster\n```\n\n----------------------------------------\n\nTITLE: Building Envoy with Custom Build Directory\nDESCRIPTION: Command to build Envoy with a custom build directory specified via ENVOY_DOCKER_BUILD_DIR environment variable\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/ci/README.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nENVOY_DOCKER_BUILD_DIR=~/build ./ci/run_envoy_docker.sh './ci/do_ci.sh dev'\n```\n\n----------------------------------------\n\nTITLE: Logging with ENVOY_LOG_TO_LOGGER Macro in C++\nDESCRIPTION: Illustrates using the `ENVOY_LOG_TO_LOGGER` macro for situations where the code isn't within a `Logger::Loggable` class method. It requires explicitly providing a logger instance (obtained via `Envoy::Logger::Registry::getLog`) as the first argument, followed by the log level and message.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/source/docs/logging.md#2025-04-23_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\n          ENVOY_LOG_TO_LOGGER(Envoy::Logger::Registry::getLog(Envoy::Logger::Id::pool), warn,\n                              \"Failed to create Http/3 client. Transport socket \"\n                              \"factory is not configured correctly.\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependabot for Python Requirements - YAML\nDESCRIPTION: Specifies a Dependabot configuration entry to automate updates of Python dependencies in `/tools/sometools` via `pip`. The `directory` key points to the relevant tool folder, and `schedule.interval` can be customized. Prerequisites: `.github/dependabot.yml` exists. Expected output: Dependabot will propose PRs for dependency changes according to the specified schedule.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/tools/README.md#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n  - package-ecosystem: \"pip\"\n    directory: \"/tools/sometools\"\n    schedule:\n      interval: \"daily\"\n```\n\n----------------------------------------\n\nTITLE: Code Reference - HTTP Parser Bug Report URL\nDESCRIPTION: URL reference to the HTTP parser bug that contributed to CVE-2019-9900, showing issues with header value processing\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/security/postmortems/cve-2019-9900.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nhttps://github.com/nodejs/http-parser/issues/468\n```\n\n----------------------------------------\n\nTITLE: Encoding Metadata for Upstream Transmission via UpstreamRequest (C++)\nDESCRIPTION: This function is called by the router filter on the UpstreamRequest object to pass the final, possibly modified, metadata map vector to the underlying codec. The codec then encodes and forwards this metadata to the upstream service.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/source/docs/h2_metadata.md#2025-04-23_snippet_8\n\nLANGUAGE: cpp\nCODE:\n```\nUpstreamRequest::encodeMetadata(const MetadataMapVector& metadata_map_vector)\n```\n\n----------------------------------------\n\nTITLE: Retesting Failed Azure Pipelines using RepoKitteh Command\nDESCRIPTION: This slash command, used in a GitHub pull request comment, triggers a custom RepoKitteh module (`azure_pipelines.star`) to restart all failed Azure Pipelines jobs associated with that pull request.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/source/docs/repokitteh.md#2025-04-23_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n/retest\n```\n\n----------------------------------------\n\nTITLE: API Method Reference - Pending Release\nDESCRIPTION: API method changes including renamed decompression APIs, removed methods, and new runtime configuration methods.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/mobile/docs/root/intro/version_history.rst#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nenableGzip -> enableGzipDecompression\nenableBrotli -> enableBrotliDecompression\nremoved: addH2RawDomains\nremoved: addDNSFallbackNameservers\nremoved: enableDNSFilterUnroutableFamilies\nremoved: enableDNSUseSystemResolver\nremoved: gauge, timer, distribution\nadded: cancel method to GRPCStream\nreplaced: close with cancel for GRPCStream\nadded: setRuntimeGuard\nadded: setRtdsLayer, addAggregatedDiscoveryService, setNodeId, setNodeLocality\nadded: setCdsLayer\n```\n\n----------------------------------------\n\nTITLE: Configuring RBAC Network Filter Type URL in Protobuf\nDESCRIPTION: Configuration type URL for the RBAC network filter that should be used when setting up the filter.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/listeners/network_filters/rbac_filter.rst#2025-04-23_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\ntype.googleapis.com/envoy.extensions.filters.network.rbac.v3.RBAC\n```\n\n----------------------------------------\n\nTITLE: DeltaDiscoveryRequest Resource Names Field Usage\nDESCRIPTION: Examples of how resource_names_subscribe and resource_names_unsubscribe fields are interpreted in DeltaDiscoveryRequest messages for incremental protocol variant.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/api-docs/xds_protocol.rst#2025-04-23_snippet_4\n\nLANGUAGE: protobuf\nCODE:\n```\nservice.discovery.v3.DeltaDiscoveryRequest.resource_names_subscribe = []\nservice.discovery.v3.DeltaDiscoveryRequest.resource_names_subscribe = [\"A\"]\nservice.discovery.v3.DeltaDiscoveryRequest.resource_names_unsubscribe = [\"*\"]\nservice.discovery.v3.DeltaDiscoveryRequest.resource_names_unsubscribe = [\"A\"]\n```\n\n----------------------------------------\n\nTITLE: Runner Tool Usage Example\nDESCRIPTION: Console commands demonstrating how to use the Runner-based tool with both Bazel and direct Python execution.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/tools/README.md#2025-04-23_snippet_16\n\nLANGUAGE: console\nCODE:\n```\n$ bazel run //tools/sometools:mytool -- -h\n...\nusage: mytool.py [-h] package\n\npositional arguments:\n  package     Package to fetch info for\n\noptional arguments:\n  -h, --help  show this help message and exit\n```\n\n----------------------------------------\n\nTITLE: Defining Documentation Tree Structure in reStructuredText for Envoy Proxy Common Components\nDESCRIPTION: This code snippet defines a documentation table of contents tree (toctree) that organizes Envoy Proxy's common components documentation. It uses glob patterns to include all files in specific directories, with a maximum depth of 2 levels.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/api-v3/config/common/common.rst#2025-04-23_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. toctree::\n  :glob:\n  :maxdepth: 2\n\n  matcher/v3/*\n  ../../extensions/common/dynamic_forward_proxy/v3/*\n  ../../extensions/common/tap/v3/*\n  ../../extensions/common/ratelimit/v3/*\n```\n\n----------------------------------------\n\nTITLE: Installing Envoy commit hooks for DCO signoff\nDESCRIPTION: This bash command installs commit hooks that auto-generate the DCO signoff line when committing changes to the Envoy project.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/CONTRIBUTING.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n./support/bootstrap\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Documentation Tree for Envoy Cluster Specifier\nDESCRIPTION: RST configuration that sets up the documentation structure for Envoy's cluster specifier component. It uses glob pattern to include all documentation files from the Golang v3alpha implementation directory.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/api-v3/config/contrib/cluster_specifier/cluster_specifier.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n  :glob:\n  :maxdepth: 2\n\n  ../../../extensions/router/cluster_specifier/golang/v3alpha/*\n```\n\n----------------------------------------\n\nTITLE: Building Schema Validator Tool with Bazel\nDESCRIPTION: Command to build the schema validator tool using the Bazel build system.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/operations/tools/schema_validator_check_tool.rst#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbazel build //test/tools/schema_validator:schema_validator_tool\n```\n\n----------------------------------------\n\nTITLE: Running Bazel Tests with Local TSAN Configuration\nDESCRIPTION: Executes all Envoy tests (`//test/...`) using Bazel with the Thread Sanitizer (TSAN) enabled, utilizing the locally built instrumented libc++. The `--config=local-tsan` flag directs Bazel to use the configuration generated by `setup_local_tsan.sh`.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/bazel/README.md#2025-04-23_snippet_37\n\nLANGUAGE: bash\nCODE:\n```\nbazel test --config=local-tsan //test/...\n```\n\n----------------------------------------\n\nTITLE: Building Envoy with CI Docker on Linux\nDESCRIPTION: Command to build Envoy using the CI Docker image on Linux systems.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/bazel/README.md#2025-04-23_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\n./ci/run_envoy_docker.sh './ci/do_ci.sh dev'\n```\n\n----------------------------------------\n\nTITLE: Key-Value Store Implementation\nDESCRIPTION: Examples of adding custom key-value store implementations including Android SharedPreferences example.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/mobile/docs/root/api/starting_envoy.rst#2025-04-23_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nbuilder.addKeyValueStore(\"io.envoyproxy.envoymobile.MyKeyValueStore\", MyKeyValueStoreImpl())\n\n// Android SharedPreferences example\nval preferences = context.getSharedPreferences(\"io.envoyproxy.envoymobile.MyPreferences\", Context.MODE_PRIVATE)\nbuilder.addKeyValueStore(\"io.envoyproxy.envoymobile.MyKeyValueStore\", SharedPreferencesStore(preferences))\n```\n\n----------------------------------------\n\nTITLE: Envoy URL Path Template with Multiple Variables\nDESCRIPTION: This URI template specifies a path structure with seven named parameters: `one`, `two`, `three`, `four`, `five`, `max`, and `max_two`. In Envoy configuration, this pattern would match URLs like `/a/b/c/d/e/f/g` and make the values (`a`, `b`, etc.) available for routing logic or upstream requests.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/test/extensions/path/uri_template_lib/uri_template_corpus/UriTemplate_TooManyVariables.txt#2025-04-23_snippet_0\n\nLANGUAGE: uri-template\nCODE:\n```\n/{one}/{two}/{three}/{four}/{five}/{max}/{max_two}\n```\n\n----------------------------------------\n\nTITLE: Creating Table of Contents for Envoy Proxy Cluster Configuration in reStructuredText\nDESCRIPTION: This snippet creates a table of contents using reStructuredText directives. It includes glob patterns to automatically include all relevant protobuf configuration files for Envoy Proxy's cluster-related settings.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/api-v3/clusters/clusters.rst#2025-04-23_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. toctree::\n  :glob:\n  :maxdepth: 2\n\n  ../config/cluster/v3/circuit_breaker.proto\n  ../config/cluster/v3/cluster.proto\n  ../config/endpoint/v3/endpoint.proto\n  ../config/endpoint/v3/endpoint_components.proto\n  ../config/core/v3/health_check.proto\n  ../config/cluster/v3/outlier_detection.proto\n  ../config/cluster/v3/filter.proto\n```\n\n----------------------------------------\n\nTITLE: Setting Up Bazel Remote Cache\nDESCRIPTION: Command to start a local Bazel remote cache server using bazel-remote, configuring cache directory, host, port and size.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/bazel/README.md#2025-04-23_snippet_51\n\nLANGUAGE: shell\nCODE:\n```\ngo run github.com/buchgr/bazel-remote --dir ${HOME}/bazel_cache --host 127.0.0.1 --port 28080 --max_size 64\n```\n\n----------------------------------------\n\nTITLE: Using ENVOY_TAGGED_LOG Macro with Tags in C++\nDESCRIPTION: Demonstrates how to use the `ENVOY_TAGGED_LOG` macro to include additional key-value context (passed as `std::map<std::string, std::string>`) in log messages. The first argument is the log level, the second is the map of tags, and the third is the message. Tags are prepended or included in JSON logs.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/source/docs/logging.md#2025-04-23_snippet_5\n\nLANGUAGE: cpp\nCODE:\n```\nstd::map<std::string, std::string> log_tags{{\"key1\",\"value1\"},{\"key2\",\"value2\"}};\nENVOY_TAGGED_LOG(debug, log_tags, \"failed to perform the operation\");\n// output: [debug] [Tags: \"key1\":\"value1\",\"key2\":\"value2\"] failed to perform the operation\n```\n\n----------------------------------------\n\nTITLE: Code Reference - Test and Fuzzer Commit\nDESCRIPTION: Commit hash reference for additional tests and fuzzers implementation\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/security/postmortems/cve-2019-9900.md#2025-04-23_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\nhttps://github.com/envoyproxy/envoy/commit/1e61a3f95f2c4d9ac1e54feae8693cee7906e2eb\n```\n\n----------------------------------------\n\nTITLE: Storage for Newly Added Metadata in FilterManager (C++)\nDESCRIPTION: This member variable within the FilterManager class accumulates new metadata maps that are added by filters during the request decoding phase via the `addDecodedMetadata` callback.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/source/docs/h2_metadata.md#2025-04-23_snippet_11\n\nLANGUAGE: cpp\nCODE:\n```\nFilterManager::request_metadata_map_vector_\n```\n\n----------------------------------------\n\nTITLE: Setting 'waiting:any' Label on PR using RepoKitteh Command\nDESCRIPTION: This slash command, used in a GitHub pull request comment, instructs RepoKitteh to apply the `waiting:any` label. This label is automatically removed upon either a new commit push or the submission of any comment to the pull request.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/source/docs/repokitteh.md#2025-04-23_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n/wait-any\n```\n\n----------------------------------------\n\nTITLE: Configuration Updates - Version 0.5.0\nDESCRIPTION: Breaking configuration changes and feature additions from the 0.5.0 release.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/mobile/docs/root/intro/version_history.rst#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\ndrainConnections() -> resetConnectivityState()\ndisallowed: setting 'host' header directly\nenabled: happy eyeballs by default\nremoved: iOS CocoaPods support\nenabled: NWPathMonitor by default\nreplaced: enableNetworkPathMonitor with setNetworkMonitoringMode\nremoved: iOS bitcode embedding\n```\n\n----------------------------------------\n\nTITLE: Specifying Overprovisioning Factor in Protobuf\nDESCRIPTION: The overprovisioning_factor field in ClusterLoadAssignment's policy configures overprovisioning for priority failover and locality weighting.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/api/client_features.rst#2025-04-23_snippet_1\n\nLANGUAGE: protobuf\nCODE:\n```\nconfig.endpoint.v3.clusterloadassignment.policy.overprovisioning_factor\n```\n\n----------------------------------------\n\nTITLE: Generating EDS Request in YAML\nDESCRIPTION: Example of an EDS (Endpoint Discovery Service) request in YAML format. It includes version info, node ID, resource names, and type URL for ClusterLoadAssignment.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/api-docs/xds_protocol.rst#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nversion_info:\nnode: { id: envoy }\nresource_names:\n- foo\n- bar\ntype_url: type.googleapis.com/envoy.config.endpoint.v3.ClusterLoadAssignment\nresponse_nonce:\n```\n\n----------------------------------------\n\nTITLE: Running Objective-C Hello World Example with Bazel\nDESCRIPTION: Bazel command to build and run the Objective-C Hello World sample application in iOS simulator. Requires pre-built iOS framework artifact.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/mobile/docs/root/start/examples/hello_world.rst#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./bazelw run //examples/objective-c/hello_world:app --config=ios\n```\n\n----------------------------------------\n\nTITLE: Fixing DCO issues by squashing commits\nDESCRIPTION: This bash command sequence demonstrates how to squash commits and append the DCO sign-off to fix DCO check failures in a pull request.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/CONTRIBUTING.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ngit rebase -i HEAD^^\n(interactive squash + DCO append)\ngit push origin -f\n```\n\n----------------------------------------\n\nTITLE: Fixing DCO Issues with Git Rebase\nDESCRIPTION: Commands to squash commit history and fix DCO signoff issues using git rebase.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/mobile/CONTRIBUTING.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit rebase -i HEAD^^\n(interactive squash + DCO append)\ngit push origin -f\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents for Hyperscan Matcher Documentation in RST\nDESCRIPTION: A reStructuredText directive that creates a table of contents for the Hyperscan matcher extension documentation. It uses glob pattern to include all documentation files under the specified path.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/api-v3/config/contrib/hyperscan/matcher.rst#2025-04-23_snippet_0\n\nLANGUAGE: RST\nCODE:\n```\n.. toctree::\n  :glob:\n  :maxdepth: 2\n\n  ../../../extensions/matching/input_matchers/hyperscan/v3alpha/*\n```\n\n----------------------------------------\n\nTITLE: Weighted Cluster Lambda Configuration\nDESCRIPTION: YAML configuration showing Lambda metadata applied to a weighted cluster setup.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/aws_lambda_filter.rst#2025-04-23_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n:language: yaml\n:lines: 39-61\n:lineno-start: 39\n:linenos:\n:caption: :download:`aws-lambda-typed-filter.yaml <_include/aws-lambda-typed-filter.yaml>`\n```\n\n----------------------------------------\n\nTITLE: Building Envoy with Remote Execution\nDESCRIPTION: Command to build Envoy using Bazel Remote Execution with GCP RBE service configuration.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/bazel/README.md#2025-04-23_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\nbazel build envoy --config=remote-clang \\\n    --remote_cache=grpcs://remotebuildexecution.googleapis.com \\\n    --remote_executor=grpcs://remotebuildexecution.googleapis.com \\\n    --remote_instance_name=projects/envoy-ci/instances/default_instance\n```\n\n----------------------------------------\n\nTITLE: Generating GPG Key for Envoy Release\nDESCRIPTION: Commands for generating and managing GPG keys used in the Envoy release process. Includes steps for key generation, export, and distribution to keyservers.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/mobile/docs/root/development/releasing/releasing.rst#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngpg --full-generate-key\n```\n\nLANGUAGE: shell\nCODE:\n```\ngpg --list-keys\n```\n\nLANGUAGE: shell\nCODE:\n```\ngpg --armor --export-secret-keys $KEY_ID\n```\n\nLANGUAGE: shell\nCODE:\n```\ngpg --keyserver keyserver.ubuntu.com --send-keys $KEY_ID\n```\n\n----------------------------------------\n\nTITLE: Running Bazel Test in a Privileged Docker Container (Remote)\nDESCRIPTION: Runs an integration test (`//test/integration:integration_test`) using the `tools/bazel-test-docker.sh` script against a remote Docker instance. Environment variables `RUN_REMOTE=yes` and `MOUNT_LOCAL=yes` are set to direct execution to a remote Docker server and mount local libraries, respectively. Requires prior setup of remote Docker environment variables. Uses 4 jobs and debug configuration.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/bazel/README.md#2025-04-23_snippet_28\n\nLANGUAGE: bash\nCODE:\n```\nsetup_remote_docker_variables\nRUN_REMOTE=yes MOUNT_LOCAL=yes tools/bazel-test-docker.sh  //test/integration:integration_test \\\n  --jobs=4 -c dbg\n```\n\n----------------------------------------\n\nTITLE: Invoking Hot Restarter for Envoy Proxy in Console\nDESCRIPTION: Shows how to invoke the hot-restarter.py script with a start_envoy.sh script as an argument. This command is used to manage Envoy Proxy restarts.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/operations/hot_restarter.rst#2025-04-23_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nhot-restarter.py start_envoy.sh\n```\n\n----------------------------------------\n\nTITLE: Running Envoy VRP Docker Image with Debugging Options\nDESCRIPTION: Command to run the Envoy Google VRP Docker image with additional debugging capabilities, including trace logging and permissions for wireshark and gdb.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/intro/arch_overview/security/google_vrp.rst#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -m 3g -p 10000:10000 --name envoy-google-vrp \\\n  -e ENVOY_EDGE_EXTRA_ARGS=\"-l trace\" \\\n  -e ENVOY_ORIGIN_EXTRA_ARGS=\"-l trace\" \\\n  --cap-add SYS_PTRACE --cap-add NET_RAW --cap-add NET_ADMIN \\\n  envoyproxy/envoy-google-vrp-dev:latest\n```\n\n----------------------------------------\n\nTITLE: Implementing a C++ Interface Header in Envoy\nDESCRIPTION: Example of an implementation header file that inherits from an interface. This shows the pattern used for implementation classes in the source/common directory.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/bazel/DEVELOPER.md#2025-04-23_snippet_2\n\nLANGUAGE: c++\nCODE:\n```\n#pragma once\n\n#include \"envoy/foo/bar.h\"\n\nclass BarImpl : public Bar {\n...\n```\n\n----------------------------------------\n\nTITLE: Structuring Envoy Introduction Documentation with reStructuredText\nDESCRIPTION: This snippet defines the table of contents for the introduction section of Envoy documentation using reStructuredText directives. It includes links to key topics such as Envoy overview, architecture, request lifecycle, and deployment types.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/intro/intro.rst#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. _intro:\n\nIntroduction\n============\n\n.. toctree::\n  :maxdepth: 2\n\n  what_is_envoy\n  arch_overview/arch_overview\n  life_of_a_request\n  deployment_types/deployment_types\n  getting_help\n\n.. These pages are only here for redirects from log lines from shipping versions of Envoy, so hide them.\n.. toctree::\n  :hidden:\n\n  version_history\n  deprecated\n```\n\n----------------------------------------\n\nTITLE: Running Bazel Test in a Privileged Docker Container (Local)\nDESCRIPTION: Executes an integration test (`//test/integration:integration_test`) using the `tools/bazel-test-docker.sh` script. This script wraps the test execution within a privileged Docker container based on the repository's CircleCI build image, allowing tests that require elevated permissions (like CAP_NET_ADMIN) to run. The example uses 4 jobs (`--jobs=4`) and debug configuration (`-c dbg`).\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/bazel/README.md#2025-04-23_snippet_27\n\nLANGUAGE: bash\nCODE:\n```\ntools/bazel-test-docker.sh  //test/integration:integration_test --jobs=4 -c dbg\n```\n\n----------------------------------------\n\nTITLE: Updating Specific Logger Level via Envoy Admin API\nDESCRIPTION: Demonstrates an HTTP POST request to the Envoy admin `/logging` endpoint to change the log level of a single, specific file (`source/common/event/dispatcher_impl.cc`) to 'debug'.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/source/docs/fine_grain_log.md#2025-04-23_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nPOST /logging?paths=source/common/event/dispatcher_impl.cc:debug\n```\n\n----------------------------------------\n\nTITLE: Example libFuzzer Execution Output\nDESCRIPTION: Shows sample output generated by libFuzzer when running a fuzz test. It includes information like the seed used, module loading details, coverage metrics (`cov:`), corpus size and content (`corp:`), execution speed (`exec/s:`), and memory usage (`rss:`), providing insights into the fuzzer's progress and resource consumption.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/test/fuzz/README.md#2025-04-23_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nINFO: Seed: 774517650\nINFO: Loaded 1 modules   (1090433 guards): 1090433 [0x8875600, 0x8c9e404),\nINFO: -max_len is not provided; libFuzzer will not generate inputs larger than 4096 bytes\nINFO: A corpus is not provided, starting from an empty corpus\n#2\tINITED cov: 47488 ft: 30 corp: 1/1b lim: 4 exec/s: 0 rss: 139Mb\n#5\tNEW    cov: 47499 ft: 47 corp: 2/3b lim: 4 exec/s: 0 rss: 139Mb L: 2/2 MS: 3 ChangeByte-ShuffleBytes-InsertByte-\n...\n#13145\tNEW    cov: 47506 ft: 205 corp: 17/501b lim: 128 exec/s: 6572 rss: 150Mb L: 128/128 MS: 1 CrossOver-\n#16384\tpulse  cov: 47506 ft: 205 corp: 17/501b lim: 156 exec/s: 8192 rss: 151Mb\n#32768\tpulse  cov: 47506 ft: 205 corp: 17/501b lim: 317 exec/s: 6553 rss: 157Mb\n#39442\tNEW    cov: 47506 ft: 224 corp: 18/890b lim: 389 exec/s: 6573 rss: 160Mb L: 389/389 MS: 2 InsertByte-CrossOver-\n```\n\n----------------------------------------\n\nTITLE: Email Template: Confidential Release Patch Distribution\nDESCRIPTION: Template for distributing candidate patches to Envoy distributors under embargo, including instructions for patch application and testing.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/security/email-templates.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nSubject: [CONFIDENTIAL] Further details on security release of Envoy $VERSION\nTo: cncf-envoy-distributors-announce@lists.cncf.io\nCc: envoy-security@googlegroups.com\n\nHello Envoy Distributors,\n\nPlease find attached candidate patches for the CVEs listed below. The patches will\nbe publicly released on the $ORDINALDAY of $MONTH $YEAR.\n\n* CVE-YEAR-ABCDEF (CVSS score $CVSS, $SEVERITY): Envoy $AFFECTED_VERSIONS - $CVESUMMARY\n\nBe aware that these patches have been tested and validated against the tests checking\nfor susceptibility of the CVEs, but please report any potential problems if encountered\nin your CI infrastructures to envoy-security@googlegroups.com.\n\nYou may use the attached patches for testing and preparing your distributions. The\npatches can be applied with \"git am\". The attached archive contains the following:\n\n* main-$MAINCOMMIT directory with patches applied to main branch commit $MAINCOMMIT\n* $VERSION directory with patches applied to branch release/$VERSION\n\nAs a reminder, these patches are under embargo until $ORDINALDAY of $MONTH $YEAR\nat $PDTHOUR PDT ($GMTHOUR GMT). The information below should be treated as\nconfidential and shared only on a need-to-know basis. The rules outline in our\nembargo policy\n(https://github.com/envoyproxy/envoy/blob/main/SECURITY.md#embargo-policy)\nstill apply, and it is extremely important that any communication related to\nthese CVEs are not forwarded further.\n\nNo fixes should be made publicly available, either in binary or source form,\nbefore the aforementioned disclosure date.\n\nWe would appreciate any feedback on these patches. Please direct further\ncommunication amongst private distributors to this list or to\nenvoy-security@googlegroups.com for direct communication with the Envoy\nsecurity team.\n\nThanks,\n$PERSON (on behalf of the Envoy security team and maintainers)\n```\n\n----------------------------------------\n\nTITLE: Setting Component-Level Debug Logging in Envoy (System)\nDESCRIPTION: Command to run Envoy with specific logging levels for different components. Disables general logging while enabling debug logging for upstream components and trace logging for connection components.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/start/quick-start/run-envoy.rst#2025-04-23_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ envoy -c envoy-demo.yaml -l off --component-log-level upstream:debug,connection:trace\n```\n\n----------------------------------------\n\nTITLE: Canceling GitHub PR Review Request using RepoKitteh Command\nDESCRIPTION: This slash command, used in a GitHub pull request comment, directs RepoKitteh to remove the specified user (`@someone`) from the list of requested reviewers. The commenter must be an organization member.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/source/docs/repokitteh.md#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n/unreview @someone\n```\n\n----------------------------------------\n\nTITLE: Example of Documentation Comments with Special Tags\nDESCRIPTION: Example showing how to add comments inside documentation comments using the special [#comment:] tag for TODOs or other notes that shouldn't appear in generated documentation.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/api/CONTRIBUTING.md#2025-04-23_snippet_3\n\nLANGUAGE: proto\nCODE:\n```\n// This is a really cool field!\n// [#comment:TODO(mattklein123): Do something cooler]\nstring foo_field = 3;\n```\n\n----------------------------------------\n\nTITLE: Running Kafka Broker Integration Tests with Bazel\nDESCRIPTION: Bazel command to execute the Kafka broker integration tests. The test runs 1000 iterations to ensure stability and proper functionality of Kafka-related code changes.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/contrib/kafka/filters/network/test/broker/integration_test/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nbazel test \\\n\t//contrib/kafka/filters/network/test/broker/integration_test:kafka_broker_integration_test \\\n\t--runs_per_test 1000\n```\n\n----------------------------------------\n\nTITLE: Responding to Envoy EDS Request in Dynamic Setup (YAML)\nDESCRIPTION: Example gRPC DiscoveryResponse payload in YAML format for an EDS request within a fully dynamic configuration. It provides the endpoint (127.0.0.1:1234) for the dynamically discovered `some_service` cluster. The `@type` indicates it's a `ClusterLoadAssignment`.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/overview/examples.rst#2025-04-23_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nversion_info: \"0\"\nresources:\n- \"@type\": type.googleapis.com/envoy.config.endpoint.v3.ClusterLoadAssignment\n  cluster_name: some_service\n  endpoints:\n  - lb_endpoints:\n    - endpoint:\n        address:\n          socket_address:\n            address: 127.0.0.1\n            port_value: 1234\n```\n\n----------------------------------------\n\nTITLE: Running Swift Hello World Example with Bazel\nDESCRIPTION: Bazel command to build and run the Swift Hello World sample application in iOS simulator. Requires pre-built iOS framework artifact.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/mobile/docs/root/start/examples/hello_world.rst#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n./bazelw run //examples/swift/hello_world:app --config=ios\n```\n\n----------------------------------------\n\nTITLE: Running Envoy with Timeout for Consistent Testing\nDESCRIPTION: Command to run Envoy for a fixed duration using the timeout command, useful for consistent profiling across trials.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/bazel/PPROF.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ timeout <num_seconds> bazel-bin/source/exe/envoy <options>\n```\n\n----------------------------------------\n\nTITLE: Setting 'waiting' Label on PR using RepoKitteh Command\nDESCRIPTION: This slash command, used in a GitHub pull request comment, instructs RepoKitteh to apply the `waiting` label. The label is automatically removed when a new commit is pushed to the associated pull request, indicating activity has resumed.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/source/docs/repokitteh.md#2025-04-23_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n/wait\n```\n\n----------------------------------------\n\nTITLE: Configuring RST Documentation Tree for HTTP Header Mutation\nDESCRIPTION: Sphinx documentation configuration that sets up a table of contents tree (toctree) for HTTP early header mutation extension documentation. Uses glob pattern matching to include all v3 documentation files from the extensions directory.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/api-v3/config/http/early_header_mutation.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n  :glob:\n  :maxdepth: 2\n\n  ../../extensions/http/early_header_mutation/*/v3/*\n```\n\n----------------------------------------\n\nTITLE: Preserving Envoy Engine Type Classes\nDESCRIPTION: ProGuard rules to preserve Envoy engine type classes for logging, callbacks, and stream intelligence\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/mobile/library/proguard.txt#2025-04-23_snippet_4\n\nLANGUAGE: proguard\nCODE:\n```\n-keep class io.envoyproxy.envoymobile.engine.types.EnvoyLogger {\n   <methods>;\n}\n\n-keep class io.envoyproxy.envoymobile.engine.types.EnvoyHTTPCallbacks {\n   <methods>;\n}\n\n-keep class io.envoyproxy.envoymobile.engine.types.EnvoyStreamIntel {\n   <methods>;\n}\n\n-keep class io.envoyproxy.envoymobile.engine.types.EnvoyFinalStreamIntel {\n   <methods>;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Fine-Grain Logger Macros with Connection/Stream Context in C++\nDESCRIPTION: Illustrates using the `FINE_GRAIN_CONN_LOG` and `FINE_GRAIN_STREAM_LOG` macros in C++ for logging messages associated with specific network connections or HTTP streams. This example uses mock objects (`NiceMock`) for demonstration and logs messages at the 'warn' level, incorporating connection or stream identifiers.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/source/docs/fine_grain_log.md#2025-04-23_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\n  NiceMock<Network::MockConnection> connection_;\n  NiceMock<Http::MockStreamDecoderFilterCallbacks> stream_;\n  FINE_GRAIN_CONN_LOG(warn, \"Fake info {} of connection\", connection_, 1);\n  FINE_GRAIN_STREAM_LOG(warn, \"Fake warning {} of stream\", stream_, 1);\n```\n\n----------------------------------------\n\nTITLE: Running Bazel Tests with TSAN (Docker)\nDESCRIPTION: Runs all Envoy tests (`//test/...`) using Bazel with the Thread Sanitizer (TSAN) enabled. This command uses a Docker sandbox environment (`--config=docker-tsan`) which includes a TSAN-instrumented version of libc++. Debug configuration (`-c dbg`) is used.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/bazel/README.md#2025-04-23_snippet_33\n\nLANGUAGE: bash\nCODE:\n```\nbazel test -c dbg --config=docker-tsan //test/...\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents for Envoy Listeners in reStructuredText\nDESCRIPTION: A reStructuredText directive that creates a table of contents with a maximum depth of 2 levels, listing documentation files related to Envoy Proxy's listeners functionality.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/intro/arch_overview/listeners/listeners_toc.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n  :maxdepth: 2\n\n  listeners\n  listener_filters\n```\n\n----------------------------------------\n\nTITLE: Declaring a Bazel Target for an Interface\nDESCRIPTION: Example of using envoy_cc_library rule to declare a new interface target in a BUILD file. Shows how to specify headers and dependencies for a pure virtual interface.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/bazel/DEVELOPER.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nenvoy_cc_library(\n    name = \"bar_interface\",\n    hdrs = [\"bar.h\"],\n    deps = [\n        \":baz_interface\",\n        \"//envoy/buffer:buffer_interface\",\n    ],\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring RST Documentation Tree for Retry Predicates\nDESCRIPTION: Sphinx documentation configuration using toctree directive to organize retry predicate documentation. Includes glob pattern matching for empty directories, v2 documentation, and v3 extension documentation.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/api-v3/config/retry/retry.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n  :glob:\n  :maxdepth: 2\n\n  */empty/*\n  */v2/*\n  ../../extensions/retry/**/v3/*\n```\n\n----------------------------------------\n\nTITLE: Testing Route Table Check Tool with Bazel\nDESCRIPTION: Command to run the bash shell script test for the route table check tool using Bazel. This test compares routes using different router and tool configuration files.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/operations/tools/route_table_check_tool.rst#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbazel test //test/tools/router_check/...\n```\n\n----------------------------------------\n\nTITLE: Protobuf Field Definition Example\nDESCRIPTION: Shows an example of field definition in protobuf and its potential breaking change when upgraded to repeated field type.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/api/API_VERSIONING.md#2025-04-23_snippet_1\n\nLANGUAGE: protobuf\nCODE:\n```\nuint32 foo = 1;\n// Breaking change:\nrepeated uint32 foo = 1;\n```\n\n----------------------------------------\n\nTITLE: Configuring Bazel Dependencies for Checker Tool\nDESCRIPTION: Bazel build configuration for a tool using the Checker base class, including the base checker dependency.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/tools/README.md#2025-04-23_snippet_17\n\nLANGUAGE: starlark\nCODE:\n```\nenvoy_py_binary(\n    name = \"tools.sometools.mychecker\",\n    deps = [\n        \"//tools/base:checker\",\n    ],\n)\n```\n\n----------------------------------------\n\nTITLE: Example Envoy Streamed Trace Segment (Request Body Chunk - YAML)\nDESCRIPTION: An example YAML representation of a subsequent `http_streamed_trace_segment` emitted by Envoy's tap filter when streaming is enabled. This segment contains the same `trace_id` (e.g., 1) as the previous segment and a `request_body_chunk`. The body chunk's content is provided as base64 encoded bytes (`as_bytes: aGVsbG8=`, which decodes to \"hello\").\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/tap_filter.rst#2025-04-23_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n.. code-block:: yaml\n\n  http_streamed_trace_segment:\n    trace_id: 1\n    request_body_chunk:\n      as_bytes: aGVsbG8=\n```\n\n----------------------------------------\n\nTITLE: Assigning Random Team Member using RepoKitteh Command\nDESCRIPTION: This slash command, used in a GitHub comment, tells RepoKitteh to randomly select and assign a member from the specified GitHub team (`@envoyproxy/some-team`) to the issue or pull request. Additional teams can be specified as arguments. Examples include maintainer, shepherd, and reviewer teams. Requires organization membership.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/source/docs/repokitteh.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n/assign-from @envoyproxy/some-team [@envoyproxy/another-team..]\n```\n\n----------------------------------------\n\nTITLE: Installing Bazelisk on macOS\nDESCRIPTION: Command to install Bazelisk using Homebrew on macOS systems.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/bazel/README.md#2025-04-23_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nbrew install bazelisk\n```\n\n----------------------------------------\n\nTITLE: Generating Table of Contents for Envoy Admin API in reStructuredText\nDESCRIPTION: This RST snippet creates a table of contents using Sphinx's toctree directive. It includes all files from the '../admin/v3/' directory, with a maximum depth of 2 levels.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/api-v3/admin/admin.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n  :glob:\n  :maxdepth: 2\n\n  ../admin/v3/*\n```\n\n----------------------------------------\n\nTITLE: Defining Python Binary with Dependencies in Bazel - Starlark\nDESCRIPTION: Defines a Bazel target for the `mytool.py` Python tool using the `envoy_py_binary` macro. Specifies the binary's module name and explicitly lists required dependencies via the `requirement` macro. Key parameters: `name` (unique Bazel target), `deps` (list of dependencies). Prerequisites: correct module names and dependencies properly registered.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/tools/README.md#2025-04-23_snippet_7\n\nLANGUAGE: starlark\nCODE:\n```\nenvoy_py_binary(\n    name = \"tools.sometools.mytool\",\n    deps = [\n        requirement(\"requests\"),\n        requirement(\"pyyaml\"),\n    ],\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Up DCO Commit Hooks in Envoy Mobile\nDESCRIPTION: Command to initialize git submodules and set up DCO commit hooks for auto-generating signoff lines.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/mobile/CONTRIBUTING.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./envoy/support/bootstrap\n```\n\n----------------------------------------\n\nTITLE: Accessing Shell in Envoy VRP Docker Container\nDESCRIPTION: Command to obtain a shell in the running Envoy Google VRP Docker container for further investigation or debugging.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/intro/arch_overview/security/google_vrp.rst#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker exec -it envoy-google-vrp /bin/bash\n```\n\n----------------------------------------\n\nTITLE: Running Envoy Docker Build with Proxy Settings\nDESCRIPTION: This command demonstrates how to run the Envoy Docker build script with custom image name and proxy settings.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/ci/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nIMAGE_NAME=envoyproxy/envoy-build-ubuntu http_proxy=http://proxy.foo.com:8080 https_proxy=http://proxy.bar.com:8080 ./ci/run_envoy_docker.sh <build_script_args>\n```\n\n----------------------------------------\n\nTITLE: RST Documentation Index Structure for HTTP Header Validators\nDESCRIPTION: Sphinx documentation configuration using toctree directive to include all HTTP header validator extension documentation files. Uses glob pattern to automatically include all v3 version documents.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/api-v3/config/http/header_validators.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n  :glob:\n  :maxdepth: 2\n\n  ../../extensions/http/header_validators/*/v3/*\n```\n\n----------------------------------------\n\nTITLE: Configuring Lua Cluster Specifier in Envoy YAML\nDESCRIPTION: Example YAML configuration for setting up a Lua cluster specifier in Envoy. It defines the cluster specifier type, Lua code source, and default cluster.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/cluster_specifier/lua.rst#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- name: lua_cluster_specifier\n  typed_config:\n    \"@type\": type.googleapis.com/envoy.extensions.router.cluster_specifiers.lua.v3.LuaConfig\n    default_cluster: default_cluster\n    source_code:\n      inline_string: |\n        function envoy_on_route(route_handle)\n          local headers = route_handle:headers()\n          local path = headers:get(\":path\")\n          if path == \"/\" then\n            return \"cluster_0\"\n          end\n          return nil\n        end\n```\n\n----------------------------------------\n\nTITLE: Preserving Native Methods\nDESCRIPTION: ProGuard rule to keep all native method declarations across all classes\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/mobile/library/proguard.txt#2025-04-23_snippet_2\n\nLANGUAGE: proguard\nCODE:\n```\n-keepclasseswithmembernames,includedescriptorclasses class * {\n    native <methods>;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx ToC Tree for Envoy v3 API\nDESCRIPTION: Sphinx toctree directive configuration that structures the Envoy v3 API documentation. Sets maximum depth to 2 levels and includes all major API component documentation files using glob pattern matching.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/api-v3/api.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n  :glob:\n  :maxdepth: 2\n\n  bootstrap/bootstrap\n  listeners/listeners\n  clusters/clusters\n  http_routes/http_routes\n  config/config\n  admin/admin\n  data/data\n  service/service\n  common_messages/common_messages\n  common_messages/common_messages_xds\n  types/types\n```\n\n----------------------------------------\n\nTITLE: YAML Dumper Tool for Python Package Info - Python\nDESCRIPTION: Implements a command-line tool that queries package information from the Python Package Index (`pypi.org`) for a given package name and dumps the response as YAML to stdout. Dependencies: `requests` for HTTP requests, `pyyaml` for YAML serialization, Python 3. Tool accepts package name as command-line argument. Limitations: returns 0 on completion, no advanced error handling included. Inputs: package name. Outputs: YAML string written to stdout.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/tools/README.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n#!/usr/bin/env python3\n\nimport sys\n\nimport requests\nimport yaml\n\n\ndef main(*args) -> int:\n    sys.stdout.write(\n        yaml.dump(\n            requests.get(f\"https://pypi.python.org/pypi/{args[0]}/json\").json()))\n    return 0\n\n\nif __name__ == \"__main__\":\n    sys.exit(main(*sys.argv[1:]))\n```\n\n----------------------------------------\n\nTITLE: Updating Logger Levels using Glob Pattern (*) via Envoy Admin API\nDESCRIPTION: Illustrates an HTTP POST request using a glob pattern (`source/common*`) with the `/logging` endpoint to update the log level of multiple matching files (e.g., `dispatcher_impl.cc`, `tcp_listener_impl.cc`) to 'warning'.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/source/docs/fine_grain_log.md#2025-04-23_snippet_6\n\nLANGUAGE: http\nCODE:\n```\nPOST /logging?paths=source/common*:warning\n```\n\n----------------------------------------\n\nTITLE: Watchdog Statistics CSV Schema\nDESCRIPTION: CSV table defining the watchdog monitoring statistics, including standard and mega misses counters.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/operations/performance.rst#2025-04-23_snippet_1\n\nLANGUAGE: csv\nCODE:\n```\nName, Type, Description\nwatchdog_miss, Counter, Number of standard misses\nwatchdog_mega_miss, Counter, Number of mega misses\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents for Transport Socket Documentation in RST\nDESCRIPTION: This RST code snippet defines a table of contents for transport socket documentation in Envoy Proxy. It uses the toctree directive to glob all v3 API configurations for transport socket extensions.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/api-v3/config/transport_socket/transport_socket.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n  :glob:\n  :maxdepth: 2\n\n  ../../extensions/transport_sockets/*/v3/*\n```\n\n----------------------------------------\n\nTITLE: Defining Introduction Section with TOC in reStructuredText\nDESCRIPTION: Creates a reStructuredText documentation structure with a table of contents directive that includes key introductory sections for Envoy Mobile documentation.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/mobile/docs/root/intro/intro.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _intro:\n\nIntroduction\n============\n\n.. toctree::\n  :maxdepth: 2\n\n  what_is_envoy_mobile\n  comparison\n  getting_help\n  version_history\n  additional_resources\n```\n\n----------------------------------------\n\nTITLE: Path Construction Examples in Test Templates\nDESCRIPTION: Demonstrates the correct way to construct paths in JSON test templates using specific template variables for temporary, run, and Unix Domain Socket directories.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/STYLE.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{{ test_tmpdir }}, {{ test_rundir }}, {{ test_udsdir }}\n```\n\n----------------------------------------\n\nTITLE: Running Bazel Tests with ASAN/UBSAN (Clang)\nDESCRIPTION: Executes all Envoy tests (`//test/...`) using Bazel with additional checks provided by Clang's Address Sanitizer (ASAN) and Undefined Behavior Sanitizer (UBSAN). Requires clang-5.0 or newer. Uses debug configuration (`-c dbg`) and the specific Clang ASAN configuration (`--config=clang-asan`).\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/bazel/README.md#2025-04-23_snippet_32\n\nLANGUAGE: bash\nCODE:\n```\nbazel test -c dbg --config=clang-asan //test/...\n```\n\n----------------------------------------\n\nTITLE: Configuring RST Documentation Tree Structure\nDESCRIPTION: Sphinx documentation toctree directive that recursively includes all DNS resolver-related v3 API documentation files up to 2 levels deep.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/api-v3/config/dns_resolver/dns_resolver.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n  :glob:\n  :maxdepth: 2\n\n  ../../extensions/network/dns_resolver/*/v3/*\n```\n\n----------------------------------------\n\nTITLE: Adding a Request Path Filter using ConfigHelper in C++\nDESCRIPTION: Shows how to prepend a standard buffering filter to the request path in the Envoy test configuration using the `prependFilter` method of the `ConfigHelper` utility. This modification is applied before Envoy initialization in a C++ integration test.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/test/integration/README.md#2025-04-23_snippet_2\n\nLANGUAGE: c++\nCODE:\n```\n// Add a buffering filter on the request path\nconfig_helper_.prependFilter(ConfigHelper::DEFAULT_BUFFER_FILTER);\n```\n\n----------------------------------------\n\nTITLE: Setting NO_VERIFY Environment Variable - Bash\nDESCRIPTION: Exports the 'NO_VERIFY=1' environment variable in the current shell session, preventing pre-commit hooks from executing. Effective for one terminal or script session. No external dependencies required.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/support/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n```bash\\n$ export NO_VERIFY=1\\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Bazel Output Base on Windows for Envoy Build\nDESCRIPTION: This configuration sets up a short output base path for Bazel on Windows to avoid long path issues.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/bazel/README.md#2025-04-23_snippet_10\n\nLANGUAGE: plaintext\nCODE:\n```\nstartup --output_base=C:/_eb\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx toctree for Access Log Extension Filters in reStructuredText\nDESCRIPTION: This code snippet configures Sphinx documentation to include all access log filter extension documentation files. It uses the toctree directive with glob pattern to automatically include all relevant files from the extensions/access_loggers/filters directory.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/api-v3/config/accesslog/filters/filters.rst#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n  :glob:\n  :maxdepth: 2\n\n  ../../../extensions/access_loggers/filters/*/v3/*\n```\n\n----------------------------------------\n\nTITLE: Running Format Fix Scripts Directly - Console\nDESCRIPTION: Runs Bazel commands to automatically fix formatting and code compliance issues using preconfigured tools. Dependencies include Bazel and the Envoy tooling targets. This command processes all relevant files, applying fixes to maintain project style standards.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/support/README.md#2025-04-23_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n```console\\nbazel run //tools/code_format:check_format -- fix && bazel run //tools/code:check -- fix -s main -v warn\\n```\n```\n\n----------------------------------------\n\nTITLE: Perfetto Object Lifecycle Tracing\nDESCRIPTION: Example of tracing object lifecycle using Perfetto begin/end events\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/bazel/PPROF.md#2025-04-23_snippet_15\n\nLANGUAGE: cpp\nCODE:\n```\nHttp::Request::Request(int request_id)\n : request_id_(request_id) {\n  TRACE_EVENT_BEGIN(\"core\", \"Http::Request\",\n                    perfetto::Track(request_id_, perfetto::ThreadTrack::Current()));\n  ...\n}\n\nHttp::Request::~Request() {\n  ...\n\n  TRACE_EVENT_END(\"core\", perfetto::Track(request_id_, perfetto::ThreadTrack::Current()));\n}\n```\n\n----------------------------------------\n\nTITLE: Defining RST Documentation Structure for HTTP TCP Bridge\nDESCRIPTION: ReStructuredText markup defining the documentation structure for HTTP TCP bridge configuration, including a reference label and toctree directive pointing to Golang-specific documentation.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/tcp_bridge/tcp_bridge.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _config_http_tcp_bridge:\n\nHTTP TCP bridge\n===============\n\n.. toctree::\n  :maxdepth: 2\n\n  golang\n```\n\n----------------------------------------\n\nTITLE: Building Envoy on Windows\nDESCRIPTION: Basic command to build Envoy and run tests on Windows using Docker\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/ci/README.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n./ci/run_envoy_docker.sh './ci/windows_ci_steps.sh'\n```\n\n----------------------------------------\n\nTITLE: Organizing Documentation Structure with toctree in Sphinx (reStructuredText)\nDESCRIPTION: This snippet uses the reStructuredText toctree directive to define the main navigation structure for cluster manager documentation within Envoy's Sphinx-based docs. It references related subtopics and sets a maximum depth of 2 for navigation, ensuring that the sidebar or table of contents displays relevant documentation sections and their direct children. No external dependencies are required beyond Sphinx and its support for reStructuredText format. This approach does not include parameters but expects that the referenced sub-files (overview, cluster_stats, etc.) exist in the same documentation folder.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/upstream/cluster_manager/cluster_manager.rst#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\\n  :maxdepth: 2\\n\\n  overview\\n  cluster_stats\\n  cluster_runtime\\n  cds\\n  cluster_hc\\n  cluster_circuit_breakers\n```\n\n----------------------------------------\n\nTITLE: DynamoDB Error Statistics CSV Table in reStructuredText\nDESCRIPTION: Defines a CSV table structure for DynamoDB error statistics, including error type, counter, and description.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/dynamodb_filter.rst#2025-04-23_snippet_4\n\nLANGUAGE: rst\nCODE:\n```\n.. csv-table::\n    :header: Name, Type, Description\n    :widths: 1, 1, 2\n\n    <error_type>, Counter, Total number of specific ``<error_type>`` for a given ``<table_name>``\n    BatchFailureUnprocessedKeys, Counter, Total number of partial batch failures for a given ``<table_name>``\n```\n\n----------------------------------------\n\nTITLE: TLS Metrics CSV Definition Table\nDESCRIPTION: CSV table defining TLS connection metrics with name, type, and description columns. Includes counters for connection errors, handshake success, certificate verification, OCSP stapling, cipher usage, curves, signature algorithms, and protocol versions.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/_include/ssl_stats.rst#2025-04-23_snippet_0\n\nLANGUAGE: csv\nCODE:\n```\nName, Type, Description\nconnection_error, Counter, Total TLS connection errors not including failed certificate verifications\nhandshake, Counter, Total successful TLS connection handshakes\nsession_reused, Counter, Total successful TLS session resumptions\nno_certificate, Counter, Total successful TLS connections with no client certificate\nfail_verify_no_cert, Counter, Total TLS connections that failed because of missing client certificate\nfail_verify_error, Counter, Total TLS connections that failed CA verification\nfail_verify_san, Counter, Total TLS connections that failed SAN verification\nfail_verify_cert_hash, Counter, Total TLS connections that failed certificate pinning verification\nocsp_staple_failed, Counter, Total TLS connections that failed compliance with the OCSP policy\nocsp_staple_omitted, Counter, Total TLS connections that succeeded without stapling an OCSP response\nocsp_staple_responses, Counter, Total TLS connections where a valid OCSP response was available\nocsp_staple_requests, Counter, Total TLS connections where the client requested an OCSP staple\nciphers.<cipher>, Counter, Total successful TLS connections that used cipher <cipher>\ncurves.<curve>, Counter, Total successful TLS connections that used ECDHE curve <curve>\nsigalgs.<sigalg>, Counter, Total successful TLS connections that used signature algorithm <sigalg>\nversions.<version>, Counter, Total successful TLS connections that used protocol version <version>\nwas_key_usage_invalid, Counter, Total successful TLS connections that used an invalid keyUsage extension\n```\n\n----------------------------------------\n\nTITLE: Configuring Bazel Dependencies for Runner Tool\nDESCRIPTION: Bazel build configuration for a tool using the Runner base class. Specifies dependencies including the base runner, requests, and pyyaml packages.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/tools/README.md#2025-04-23_snippet_14\n\nLANGUAGE: starlark\nCODE:\n```\nenvoy_py_binary(\n    name = \"tools.sometools.mytool\",\n    deps = [\n        \"//tools/base:runner\",\n        requirement(\"requests\"),\n        requirement(\"pyyaml\"),\n    ],\n)\n```\n\n----------------------------------------\n\nTITLE: IP Tagging Statistics CSV Format\nDESCRIPTION: CSV table showing statistics output by the IP Tagging filter in the http.<stat_prefix>.ip_tagging namespace, including hit counters and totals.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/ip_tagging_filter.rst#2025-04-23_snippet_0\n\nLANGUAGE: csv\nCODE:\n```\n<tag_name>.hit, Counter, Total number of requests that have the ``<tag_name>`` applied to it\nno_hit, Counter, Total number of requests with no applicable IP tags\ntotal, Counter, Total number of requests the IP Tagging Filter operated on\n```\n\n----------------------------------------\n\nTITLE: Thrift Protocol Options Extension Key\nDESCRIPTION: The extension key used for configuring Thrift protocol options in cluster configuration.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/listeners/network_filters/thrift_proxy_filter.rst#2025-04-23_snippet_1\n\nLANGUAGE: protobuf\nCODE:\n```\nenvoy.filters.network.thrift_proxy\n```\n\n----------------------------------------\n\nTITLE: Showing Envoy Gateway Tracing Mode in Text\nDESCRIPTION: This snippet demonstrates the ideal trace chain when Envoy is used as a gateway or when the sidecar and its application are treated as separate hops. It shows how spans are generated across multiple components.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/intro/arch_overview/observability/tracing.rst#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n-> [SERVER -> CLIENT] -> [SERVER -> CLIENT] -> [SERVER -> CLIENT] -> [SERVER -> CLIENT] -> ...\n```\n\n----------------------------------------\n\nTITLE: Checking Format Problems in Envoy Codebase\nDESCRIPTION: Command to check for formatting issues across the codebase using the check_format script.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/mobile/STYLE.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ntools/check_format.sh\n```\n\n----------------------------------------\n\nTITLE: Running Envoy with CPU Profiling\nDESCRIPTION: Command to run a statically-linked Envoy binary with CPU profiling enabled, specifying the output profile location.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/bazel/PPROF.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ CPUPROFILE=/tmp/mybin.cpuprof bazel-bin/source/exe/envoy-static <args>\n```\n\n----------------------------------------\n\nTITLE: Configuring RST Table of Contents for Rate Limit Documentation\nDESCRIPTION: RST directive for configuring a table of contents that recursively includes all rate limit descriptor documentation files under the extensions directory, with a maximum depth of 2 levels.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/api-v3/config/descriptors/descriptors.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n  :glob:\n  :maxdepth: 2\n\n  ../../extensions/rate_limit_descriptors/expr/v3/*\n```\n\n----------------------------------------\n\nTITLE: Querying Cluster Metrics in Lua Cluster Specifier\nDESCRIPTION: Examples of how to retrieve various metrics from a cluster handle in the Lua script.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/cluster_specifier/lua.rst#2025-04-23_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\ncluster:numConnections()\n```\n\nLANGUAGE: lua\nCODE:\n```\ncluster:numRequests()\n```\n\nLANGUAGE: lua\nCODE:\n```\ncluster:numPendingRequests()\n```\n\n----------------------------------------\n\nTITLE: Environment Variables for GPG Configuration\nDESCRIPTION: Required environment variables for configuring GPG in the release process, including the passphrase and GPG key.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/mobile/docs/root/development/releasing/releasing.rst#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nEM_GPG_PASSPHRASE=<passphrase noted down from step 2>\nEM_GPG_KEY=<secret key from step 5>\n```\n\n----------------------------------------\n\nTITLE: System Proxy Configuration\nDESCRIPTION: Enable system proxy settings respect for connections (Android only).\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/mobile/docs/root/api/starting_envoy.rst#2025-04-23_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\nbuilder.enableProxying(true)\n```\n\n----------------------------------------\n\nTITLE: Creating Table of Contents for Access Log Extension Filters in RST\nDESCRIPTION: This RST (reStructuredText) directive creates a table of contents that recursively includes all documentation files from the 'filters' subdirectory up to a maximum depth of 2 levels.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/api-v3/config/accesslog/filters.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n  :glob:\n  :maxdepth: 2\n\n  filters/filters\n```\n\n----------------------------------------\n\nTITLE: Bootstrapping Envoy Support Tools - Bash\nDESCRIPTION: Initializes the Envoy project support environment by running the provided bootstrap script from the project root. Requires Bash and project access. When executed, this command configures git hooks and automates local development tooling required for code review and formatting compliance.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/support/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n```bash\\n./support/bootstrap\\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Warning Suppressions for Android and Kotlin\nDESCRIPTION: ProGuard rules to suppress warnings for Android support, Kotlin, and JetBrains annotation libraries\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/mobile/library/proguard.txt#2025-04-23_snippet_0\n\nLANGUAGE: proguard\nCODE:\n```\n-dontwarn android.support.**\n-dontwarn kotlin.**\n-dontwarn org.jetbrains.annotations.NotNull\n-dontwarn org.jetbrains.annotations.Nullable\n```\n\n----------------------------------------\n\nTITLE: Generating Filtered OSS-Fuzz Coverage Reports\nDESCRIPTION: Command using the OSS-Fuzz `helper.py` script to generate a coverage profile report for Envoy based on the ClusterFuzz corpus. It employs several `-ignore-filename-regex` flags to filter out irrelevant files like Bazel build artifacts, external dependencies, test harness code, cache files, and libFuzzer source code itself, resulting in a cleaner report focused on Envoy source code.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/test/fuzz/README.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npython infra/helper.py profile envoy -- \\\n  -ignore-filename-regex='proc/self/cwd/bazel-out.*' \\\n  -ignore-filename-regex='proc/self/cwd/external.*' \\\n  -ignore-filename-regex='proc/self/cwd/test.*' \\\n  -ignore-filename-regex='.*\\.cache.*' \\\n  -ignore-filename-regex='src/libfuzzer.*'\n```\n\n----------------------------------------\n\nTITLE: Configuring Thrift Proxy Filter Type URL\nDESCRIPTION: Specifies the type URL for configuring the Thrift proxy filter in Envoy's configuration.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/listeners/network_filters/thrift_proxy_filter.rst#2025-04-23_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\ntype.googleapis.com/envoy.extensions.filters.network.thrift_proxy.v3.ThriftProxy\n```\n\n----------------------------------------\n\nTITLE: Configuring Original Destination Filter in Envoy\nDESCRIPTION: Type URL configuration for the Original Destination filter in Envoy. This filter reads the SO_ORIGINAL_DST socket option to handle redirected connections and restore destination addresses.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/listeners/listener_filters/original_dst_filter.rst#2025-04-23_snippet_0\n\nLANGUAGE: proto\nCODE:\n```\ntype.googleapis.com/envoy.extensions.filters.listener.original_dst.v3.OriginalDst\n```\n\n----------------------------------------\n\nTITLE: Java Client Debug Logging Example\nDESCRIPTION: Example debug log output from Java clients showing network connections through Envoy proxy.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/listeners/network_filters/kafka_broker_filter.rst#2025-04-23_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n[DEBUG] [NetworkClient] Initiating connection to node localhost:19092 (id: -1 rack: null) using address localhost/127.0.0.1\n[DEBUG] [NetworkClient] Completed connection to node -1. Fetching API versions.\n[DEBUG] [NetworkClient] Initiating connection to node localhost:19092 (id: 1 rack: null) using address localhost/127.0.0.1\n[DEBUG] [NetworkClient] Completed connection to node 1. Fetching API versions.\n[DEBUG] [NetworkClient] Initiating connection to node localhost:19094 (id: 3 rack: null) using address localhost/127.0.0.1\n[DEBUG] [NetworkClient] Initiating connection to node localhost:19093 (id: 2 rack: null) using address localhost/127.0.0.1\n[DEBUG] [NetworkClient] Completed connection to node 2. Fetching API versions.\n[DEBUG] [NetworkClient] Completed connection to node 3. Fetching API versions.\n```\n\n----------------------------------------\n\nTITLE: Configuring Kafka Request Filtering - Disable Consumer Read\nDESCRIPTION: YAML configuration showing how to disable consumer read capability by filtering Fetch requests.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/listeners/network_filters/kafka_broker_filter.rst#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n- name: envoy.filters.network.kafka_broker\n  typed_config:\n    \"@type\": type.googleapis.com/envoy.extensions.filters.network.kafka_broker.v3.KafkaBroker\n    stat_prefix: prefix\n    api_keys_denied:\n    - 1 # Fetch\n```\n\n----------------------------------------\n\nTITLE: Approving Specific Code Paths via RepoKitteh Ownerscheck\nDESCRIPTION: This slash command provides a partial approval for changes related to a specific code area, identified by `[label]`, within the context of the `ownerscheck.star` module. This comment affects the module's internal status tracking but does not constitute a formal GitHub PR approval. The approval is automatically revoked if files associated with the label are modified further.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/source/docs/repokitteh.md#2025-04-23_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n/lgtm [label]\n```\n\n----------------------------------------\n\nTITLE: Configuring IPv6 Force Mode\nDESCRIPTION: Enable forced IPv6 mode which remaps IPv4 addresses to IPv6 space. Experimental feature.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/mobile/docs/root/api/starting_envoy.rst#2025-04-23_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\nbuilder.forceIPv6(true)\n```\n\n----------------------------------------\n\nTITLE: Importing and Versioning Protobuf File\nDESCRIPTION: This example shows how to import the necessary annotation proto and mark the package version status as active in a protobuf file.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/api/STYLE.md#2025-04-23_snippet_3\n\nLANGUAGE: protobuf\nCODE:\n```\nimport \"udpa/annotations/status.proto\";\n\noption (udpa.annotations.file_status).package_version_status = ACTIVE;\n```\n\n----------------------------------------\n\nTITLE: Defining QUIC Extensions Documentation Tree in RST\nDESCRIPTION: Sphinx documentation toctree configuration that organizes QUIC-related extension documentation into a hierarchical structure. Includes configuration for crypto streams, proof sources, connection ID generators, server preferred addresses, and debug visitors.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/api-v3/config/quic/quic_extensions.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n  :glob:\n  :maxdepth: 2\n\n  ../../extensions/quic/crypto_stream/v3/*\n  ../../extensions/quic/proof_source/v3/*\n  ../../extensions/quic/connection_id_generator/v3/*\n  ../../extensions/quic/connection_id_generator/quic_lb/v3/*\n  ../../extensions/quic/server_preferred_address/v3/*\n  ../../extensions/quic/connection_debug_visitor/v3/*\n  ../../extensions/quic/connection_debug_visitor/quic_stats/v3/*\n```\n\n----------------------------------------\n\nTITLE: Defining VHDS Resource Naming Convention\nDESCRIPTION: Demonstrates the naming convention for virtual host resources in VHDS. The resource name is a combination of the route configuration name and the HTTP host header entry.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_conn_man/vhds.rst#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n<route configuration name>/<host entry>\n```\n\n----------------------------------------\n\nTITLE: Generating Custom GeoIP MMDB Files using Go Utility (Shell)\nDESCRIPTION: This shell command executes the MaxMind test utility (`main.go`) using the Go runtime. It processes GeoIP source data located in the 'source' directory and generates the corresponding binary `.mmdb` database files in the 'out-data' directory. Prerequisites include having Golang installed, the `main.go` utility script downloaded, and the 'source' and 'out-data' directories created and populated appropriately.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/test/extensions/geoip_providers/maxmind/test_data/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo run main.go --source source --target out-data\n```\n\n----------------------------------------\n\nTITLE: Router Statistics CSV Configuration\nDESCRIPTION: CSV table defining router filter statistics tracked in the http.<stat_prefix> namespace, showing counter types and their descriptions.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/router_filter.rst#2025-04-23_snippet_2\n\nLANGUAGE: csv\nCODE:\n```\nName, Type, Description\nno_route, Counter, Total requests that had no route and resulted in a 404\nno_cluster, Counter, Total requests in which the target cluster did not exist and which by default result in a 503\nrq_redirect, Counter, Total requests that resulted in a redirect response\nrq_direct_response, Counter, Total requests that resulted in a direct response\nrq_total, Counter, Total routed requests\nrq_reset_after_downstream_response_started, Counter, Total requests that were reset after downstream response had started\nrq_overload_local_reply, Counter, Total requests that were load shed if downstream filter load shed point is configured\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx toctree for HTTP Filters Documentation in reStructuredText\nDESCRIPTION: This snippet configures a Sphinx toctree directive to include all HTTP filter documentation from specified paths. It uses glob patterns to automatically include documentation for HTTP filters and HTTP cache components from their respective directories.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/api-v3/config/filter/http/http.rst#2025-04-23_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. toctree::\n  :glob:\n  :maxdepth: 2\n\n  ../../../extensions/filters/http/*/v3*/*\n  ../../../extensions/http/cache/*/v3*/*\n```\n\n----------------------------------------\n\nTITLE: Retrieving Peer Certificate URI SANs in Envoy Lua\nDESCRIPTION: Calls the `uriSanPeerCertificate()` method on the `downstreamSslConnection` object. It returns a Lua table containing the URI Subject Alternative Names (SANs) from the peer certificate. Returns an empty table if no peer certificate, SAN field, or URI SANs exist.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/lua_filter.rst#2025-04-23_snippet_53\n\nLANGUAGE: lua\nCODE:\n```\ndownstreamSslConnection:uriSanPeerCertificate()\n```\n\n----------------------------------------\n\nTITLE: Applying Regex Substitution in Header-To-Metadata Filter in Envoy (YAML)\nDESCRIPTION: This YAML snippet illustrates how to enhance the Header-To-Metadata filter with regex matching and substitution. When a header is present, its value is transformed according to the specified regex pattern before being added as metadata. Parameters include the regex pattern to match and the substitution template. This configuration is useful for normalizing or extracting sub-values from headers prior to dynamic routing. Envoy must support regex in the Header-To-Metadata filter extension.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/other_protocols/thrift_filters/header_to_metadata_filter.rst#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n  20: filters:\n  21:   - name: envoy.filters.network.thrift_proxy\n  22:     typed_config:\n  23:       '@type': type.googleapis.com/envoy.extensions.filters.network.thrift_proxy.v3.ThriftProxy\n  24:       filter_chain:\n  25:         filters:\n  26:           - name: envoy.filters.network.thrift_proxy.filters.header_to_metadata\n  27:             typed_config:\n  28:               '@type': type.googleapis.com/envoy.extensions.filters.network.thrift_proxy.filters.header_to_metadata.v3.HeaderToMetadata\n  29:               request_rules:\n  30:                 - header: x-version\n  31:                   on_present:\n  32:                     value: \"some_regex_substitution\"\n```\n\n----------------------------------------\n\nTITLE: Suppressing Memcheck Uninitialized Value Error in re2::SparseArray::has_index\nDESCRIPTION: This Valgrind suppression entry ignores 'Memcheck:Value8' (use of uninitialised value of size 8) errors detected within the `re2::SparseArray<int>::has_index(int)` function. This addresses specific instances where an 8-byte uninitialized value is used within this re2 array function, likely deemed acceptable or a known issue.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/tools/debugging/valgrind-suppressions.txt#2025-04-23_snippet_4\n\nLANGUAGE: valgrind_suppression\nCODE:\n```\n{\n   re2 uninit-value\n   Memcheck:Value8\n   fun:_ZNK3re211SparseArrayIiE9has_indexEi\n   ...\n}\n```\n\n----------------------------------------\n\nTITLE: Node ID Configuration\nDESCRIPTION: Set the node.id field for Envoy configuration.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/mobile/docs/root/api/starting_envoy.rst#2025-04-23_snippet_13\n\nLANGUAGE: kotlin\nCODE:\n```\nbuilder.setNodeId(nodeId = \"my_test_node\")\n```\n\nLANGUAGE: swift\nCODE:\n```\nbuilder.setNodeID(\"my_test_node\")\n```\n\nLANGUAGE: cpp\nCODE:\n```\nbuilder.setNodeId(\"my_test_node\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Toctree for Cluster Extensions in RST\nDESCRIPTION: This RST (reStructuredText) snippet creates a table of contents tree that recursively includes all version 3 cluster extension documentation files from the extensions directory. The glob directive is used to automatically discover all matching documentation files.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/api-v3/config/cluster/cluster.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n  :glob:\n  :maxdepth: 2\n\n  ../../extensions/clusters/**/v3/*\n```\n\n----------------------------------------\n\nTITLE: Running Envoy with Heap Profiling\nDESCRIPTION: Command to run a statically-linked Envoy binary with heap profiling enabled, specifying the output profile location.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/bazel/PPROF.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ HEAPPROFILE=/tmp/mybin.heapprof bazel-bin/source/exe/envoy-static <args>\n```\n\n----------------------------------------\n\nTITLE: Email Template: Security Fix Public Announcement\nDESCRIPTION: Template for publicly announcing security fixes, including CVE details, upgrade instructions, and vulnerability information.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/security/email-templates.md#2025-04-23_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\nSubject: Security release of Envoy $VERSION is now available\nTo: envoy-security-announce@googlegroups.com\nCc: envoy-announce@googlegroups.com, envoy-security@googlegroups.com, envoy-maintainers@googlegroups.com\n\nHello Envoy Community,\n\nThe Envoy security team would like to announce the availability of Envoy $VERSION.\nThis addresses the following CVE(s):\n\n* CVE-YEAR-ABCDEF (CVSS score $CVSS): $CVESUMMARY\n...\n\nUpgrading to $VERSION is encouraged to fix these issues.\n\nGitHub tag: https://github.com/envoyproxy/envoy/releases/tag/v$VERSION\nDocker images: https://hub.docker.com/r/envoyproxy/envoy/tags\nRelease notes: https://www.envoyproxy.io/docs/envoy/v$VERSION/version_history/current.rst\nDocs: https://www.envoyproxy.io/docs/envoy/v$VERSION/\n\n**Am I vulnerable?**\n\nRun `envoy --version` and if it indicates a base version of $OLDVERSION or\nolder you are running a vulnerable version.\n\n**How do I mitigate the vulnerability?**\n\nAvoid the use of feature XYZ in Envoy configuration.\n\n**How do I upgrade?**\n\nUpdate to $VERSION via your Envoy distribution or rebuild from the Envoy GitHub\nsource at the $VERSION tag or HEAD @ master.\n\n**Vulnerability Details**\n\n***CVE-YEAR-ABCDEF***\n\n$CVESUMMARY\n\nThis issue is filed as $CVE. We have rated it as [$CVSSSTRING]($CVSSURL)\n($CVSS, $SEVERITY) [See the GitHub issue for more details]($GITHUBISSUEURL)\n\n**Thank you**\n\nThank you to $REPORTER, $DEVELOPERS, and the $RELEASEMANAGERS for the\ncoordination in making this release.\n\nThanks,\n\n$PERSON (on behalf of the Envoy security team and maintainers)\n```\n\n----------------------------------------\n\nTITLE: HTTP/2 Codec Error Details in RST\nDESCRIPTION: ReStructuredText documentation defining HTTP/2 specific error details and their descriptions, including frame floods, header violations, and messaging rule breaches.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_conn_man/response_code_details.rst#2025-04-23_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\n.. csv-table::\n   :header: Name, Description\n   :widths: 1, 2\n\n    http2.inbound_empty_frames_flood, Envoy detected an inbound HTTP/2 frame flood.\n    http2.invalid.header.field, One of the HTTP/2 headers was invalid\n    http2.outbound_frames_flood, Envoy detected an HTTP/2 frame flood from the server.\n```\n\n----------------------------------------\n\nTITLE: Specifying Envoy Proxy Version Identifier\nDESCRIPTION: Version string identifying the current development build of Envoy Proxy. The -dev suffix indicates this is a development version rather than a stable release.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/VERSION.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n1.35.0-dev\n```\n\n----------------------------------------\n\nTITLE: Configuring Buffer Filter Type URL in Envoy\nDESCRIPTION: Specifies the type URL for configuring the buffer filter in Envoy proxy. The buffer filter can be configured using the protobuf message type for Buffer configuration.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/buffer_filter.rst#2025-04-23_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\ntype.googleapis.com/envoy.extensions.filters.http.buffer.v3.Buffer\n```\n\n----------------------------------------\n\nTITLE: Labeling PR for Backport Review using RepoKitteh Command\nDESCRIPTION: This slash command, used in a GitHub pull request comment, instructs RepoKitteh to add the `backport/review` label to the pull request, signaling that it should be considered for backporting to stable release branches.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/source/docs/repokitteh.md#2025-04-23_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\n/backport\n```\n\n----------------------------------------\n\nTITLE: Example Output of Envoy Admin /logging Endpoint\nDESCRIPTION: Shows example output from the Envoy admin `POST /logging` endpoint when Fine-Grain Logging is enabled. It lists the file paths of active loggers and their current log levels, where '0' represents the 'trace' level.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/source/docs/fine_grain_log.md#2025-04-23_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n  source/server/admin/admin_filter.cc: 0\n  source/common/event/dispatcher_impl.cc: 0\n  source/common/network/tcp_listener_impl.cc: 0\n  source/common/network/udp_listener_impl.cc: 0\n```\n\n----------------------------------------\n\nTITLE: Configuring ProGuard Rules for Google Protocol Buffers\nDESCRIPTION: Defines ProGuard rules to keep Protobuf classes and their members from being obfuscated or removed during the build process. Specifically preserves MessageLite and its Builder class along with all Protobuf-related classes.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/mobile/library/java_proto_proguard.txt#2025-04-23_snippet_0\n\nLANGUAGE: proguard\nCODE:\n```\n-dontwarn com.google.protobuf.**\n\n-dontnote com.google.protobuf.**\n\n-keep class com.google.protobuf.** {\n   *;\n}\n\n-keep class com.google.protobuf.MessageLite {\n   *;\n}\n\n-keep class com.google.protobuf.MessageLite$Builder {\n   *;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating RST Table of Contents for Envoy Proxy Additional Features\nDESCRIPTION: This RST code creates a table of contents with maximum depth of 2 for various additional features in Envoy Proxy. It links to documentation for rate limiting (both local and global), bandwidth limiting, scripting, IP transparency, and compression libraries.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/intro/arch_overview/other_features/other_features.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n  :maxdepth: 2\n\n  local_rate_limiting\n  global_rate_limiting\n  bandwidth_limiting\n  scripting\n  ip_transparency\n  compression/libraries\n```\n\n----------------------------------------\n\nTITLE: Processing Upstream Response Metadata Vector in Envoy StreamEncoderFilter (C++)\nDESCRIPTION: Specifies the C++ interface `encodeMetadata` within `StreamEncoderFilter` as called by `FilterManager` to handle upstream response metadata. This version receives a `MetadataMapVector`, allowing filters to process multiple metadata maps associated with the response before they are potentially forwarded downstream. Note the potential type differences (`MetadataMapVector` vs `MetadataMap`, `FilterMetadatasStatus` vs `FilterMetadataStatus`) compared to the earlier `encodeMetadata` description.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/source/docs/h2_metadata.md#2025-04-23_snippet_4\n\nLANGUAGE: cpp\nCODE:\n```\nFilterMetadatasStatus StreamEncoderFilter::encodeMetadata(MetadataMapVector&\nmetadata\\_map).\n```\n\n----------------------------------------\n\nTITLE: Resource Type URL Format Example\nDESCRIPTION: Example of the type URL format used for xDS resource types in protobuf Any messages.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/api-docs/xds_protocol.rst#2025-04-23_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\ntype.googleapis.com/envoy.config.cluster.v3.Cluster\n```\n\n----------------------------------------\n\nTITLE: Installing Envoy on Mac OSX using Homebrew\nDESCRIPTION: This code snippet shows how to install Envoy on Mac OSX using the Homebrew package manager. It updates Homebrew and then installs Envoy.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/start/install.rst#2025-04-23_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ brew update\n$ brew install envoy\n```\n\n----------------------------------------\n\nTITLE: Rebuilding and Running Custom Envoy VRP Docker Image\nDESCRIPTION: Series of commands to rebuild a custom Envoy Google VRP Docker image from source and run it locally for testing purposes.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/intro/arch_overview/security/google_vrp.rst#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nbazel build //source/exe:envoy-static\n./ci/docker_rebuild_google-vrp.sh bazel-bin/source/exe/envoy-static\ndocker run -m 3g -p 10000:10000 --name envoy-google-vrp \\\n  -e ENVOY_EDGE_EXTRA_ARGS=\"\" \\\n  -e ENVOY_ORIGIN_EXTRA_ARGS=\"\" \\\n  envoy-google-vrp:local\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Documentation Tree for Path Rewriter\nDESCRIPTION: Sphinx documentation configuration that sets up a table of contents tree for path rewriter documentation. Uses glob pattern matching to include all v3 API documentation files related to path rewriting functionality.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/api-v3/config/path/rewrite/path_rewriter.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n  :glob:\n  :maxdepth: 2\n\n  ../../../extensions/path/rewrite/*/v3/*\n```\n\n----------------------------------------\n\nTITLE: Querying Runtime Configuration Values\nDESCRIPTION: Example JSON output from the /runtime endpoint, showing active runtime layers and key-value pairs with their layer values and final active value.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/operations/admin.rst#2025-04-23_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"layers\": [\n    \"disk\",\n    \"override\",\n    \"admin\"\n  ],\n  \"entries\": {\n    \"my_key\": {\n      \"layer_values\": [\n        \"my_disk_value\",\n        \"\",\n        \"\"\n      ],\n      \"final_value\": \"my_disk_value\"\n    },\n    \"my_second_key\": {\n      \"layer_values\": [\n        \"my_second_disk_value\",\n        \"my_disk_override_value\",\n        \"my_admin_override_value\"\n      ],\n      \"final_value\": \"my_admin_override_value\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining HTTP Documentation Structure in reStructuredText\nDESCRIPTION: A table of contents structure in reStructuredText format that organizes Envoy's HTTP-related documentation into categories including connection management, filters, routing, upgrades, HTTP proxy, and HTTP3.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/intro/arch_overview/http/http.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\nHTTP\n====\n\n.. toctree::\n  :maxdepth: 2\n\n  http_connection_management\n  http_filters\n  http_routing\n  upgrades\n  http_proxy\n  http3\n```\n\n----------------------------------------\n\nTITLE: Creating Tests Directory for Unit Tests - Console\nDESCRIPTION: Creates a new tests directory under `tools/sometools/` for storing unit tests related to the Python tool. Prerequisite: write permissions in the `tools/sometools/` directory. Output: a new directory at the specified path.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/tools/README.md#2025-04-23_snippet_10\n\nLANGUAGE: console\nCODE:\n```\n$ mkdir tools/sometools/tests\n```\n\n----------------------------------------\n\nTITLE: RST Documentation Tree Configuration\nDESCRIPTION: Sphinx documentation tree configuration that includes compression-related extension documentation paths for Gzip, Brotli, and Zstd compression in Envoy proxy.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/api-v3/config/compression/compression.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n  :glob:\n  :maxdepth: 2\n\n  ../../extensions/compression/gzip/*/v3/*\n  ../../extensions/compression/brotli/*/v3/*\n  ../../extensions/compression/zstd/*/v3/*\n```\n\n----------------------------------------\n\nTITLE: Running Kotlin Tests with Bazel\nDESCRIPTION: Command to execute the Kotlin unit test suite using Bazel. Uses build_tests_only flag for test-specific builds.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/mobile/docs/root/development/testing/testing.rst#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./bazelw test --test_output=all --build_tests_only //test/kotlin/...\n```\n\n----------------------------------------\n\nTITLE: Specifying Package Source and Dependencies\nDESCRIPTION: This snippet demonstrates how to specify the source of a package requirement and list other packages that depend on it. It uses comments to indicate the source file and dependent packages.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/tools/base/requirements.txt#2025-04-23_snippet_1\n\nLANGUAGE: Text\nCODE:\n```\n# via\n#   -r requirements.in\n#   aio-api-github\n#   aio-api-nist\n#   aiodocker\n#   envoy-base-utils\n#   envoy-dependency-check\n#   envoy-github-abstract\n#   envoy-github-release\n```\n\n----------------------------------------\n\nTITLE: Running Specialized Coverage Analysis for a Specific Fuzz Test\nDESCRIPTION: Command for generating coverage data for a specific fuzz test target. This approach is useful when examining the coverage of a particular fuzzer over its corpus of inputs.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/bazel/README.md#2025-04-23_snippet_45\n\nLANGUAGE: bash\nCODE:\n```\nFUZZ_COVERAGE=true VALIDATE_COVERAGE=false test/run_envoy_bazel_coverage.sh //test/common/common:base64_fuzz_test\n```\n\n----------------------------------------\n\nTITLE: Defining RST Table of Contents for Envoy Extensions\nDESCRIPTION: This RST code snippet defines a table of contents for Envoy proxy extension configurations. It uses the toctree directive with glob and maxdepth options to automatically include relevant documentation files.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/api-v3/config/config.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n  :glob:\n  :maxdepth: 2\n\n  accesslog/filters\n  formatter/formatter\n  accesslog/accesslog\n  cluster/cluster\n  common/common\n  compression/compression\n  config_validators/config_validators\n  contrib/contrib\n  dns_resolver/dns_resolver\n  endpoint/endpoint\n  filter/filter\n  grpc_credential/grpc_credential\n  health_check_event_sinks/health_check_event_sinks\n  health_checker/health_checker\n  http/early_header_mutation\n  http/custom_response\n  http/ext_proc\n  http/header_formatters\n  http/header_validators\n  http/original_ip_detection\n  http/stateful_session\n  injected_credentials/injected_credentials\n  geoip_provider/geoip_provider\n  trace/trace\n  internal_redirect/internal_redirect\n  path/match/path_matcher\n  path/rewrite/path_rewriter\n  quic/quic_extensions\n  descriptors/descriptors\n  rbac/rbac\n  rbac/matchers\n  request_id/request_id\n  resource_monitor/resource_monitor\n  retry/retry\n  stat_sinks/stat_sinks\n  string_matcher/string_matcher\n  transport_socket/transport_socket\n  upstream/upstream\n  wasm/wasm\n  watchdog/watchdog\n  load_balancing_policies/load_balancing_policies\n  cluster_specifier/cluster_specifier\n```\n\n----------------------------------------\n\nTITLE: Defining ZooKeeper Response Size Counters (Plaintext)\nDESCRIPTION: This section defines various counter statistics for the Envoy ZooKeeper proxy filter. Each counter tracks the total number of bytes in decoded response messages for a specific ZooKeeper operation (opcode). These stats help monitor network bandwidth usage for different ZooKeeper commands.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/listeners/network_filters/zookeeper_proxy_filter.rst#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\ncreatecontainer_resp_bytes, Counter, Number of bytes in decoded createcontainer response messages\ncreatettl_resp_bytes, Counter, Number of bytes in decoded createttl response messages\nsetdata_resp_bytes, Counter, Number of bytes in decoded setdata response messages\ngetchildren_resp_bytes, Counter, Number of bytes in decoded getchildren response messages\ngetchildren2_resp_bytes, Counter, Number of bytes in decoded getchildren2 response messages\ndelete_resp_bytes, Counter, Number of bytes in decoded delete response messages\nexists_resp_bytes, Counter, Number of bytes in decoded exists response messages\ngetacl_resp_bytes, Counter, Number of bytes in decoded getacl response messages\nsetacl_resp_bytes, Counter, Number of bytes in decoded setacl response messages\nsync_resp_bytes, Counter, Number of bytes in decoded sync response messages\ncheck_resp_bytes, Counter, Number of bytes in decoded check response messages\nmulti_resp_bytes, Counter, Number of bytes in decoded multi response messages\nreconfig_resp_bytes, Counter, Number of bytes in decoded reconfig response messages\nsetwatches_resp_bytes, Counter, Number of bytes in decoded setwatches response messages\nsetwatches2_resp_bytes, Counter, Number of bytes in decoded setwatches2 response messages\naddwatch_resp_bytes, Counter, Number of bytes in decoded addwatch response messages\ncheckwatches_resp_bytes, Counter, Number of bytes in decoded checkwatches response messages\nremovewatches_resp_bytes, Counter, Number of bytes in decoded removewatches response messages\ngetephemerals_resp_bytes, Counter, Number of bytes in decoded getephemerals response messages\ngetallchildrennumber_resp_bytes, Counter, Number of bytes in decoded getallchildrennumber response messages\nclose_resp_bytes, Counter, Number of bytes in decoded close response messages\n```\n\n----------------------------------------\n\nTITLE: Configuring Health Check Filter Type URL in Envoy\nDESCRIPTION: Specifies the type URL to be used when configuring the health check filter in Envoy. This URL is used to identify the specific version and type of the HealthCheck configuration message.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/health_check_filter.rst#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntype.googleapis.com/envoy.extensions.filters.http.health_check.v3.HealthCheck\n```\n\n----------------------------------------\n\nTITLE: Code Reference - HTTP Parser Fix PR\nDESCRIPTION: Pull request URL reference for the fix addressing the HTTP parser vulnerability\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/security/postmortems/cve-2019-9900.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nhttps://github.com/nodejs/http-parser/pull/469\n```\n\n----------------------------------------\n\nTITLE: Disabling Verify Checks via .env File - Console\nDESCRIPTION: Appends 'NO_VERIFY=1' to the '.env' configuration file using shell redirection. This disables automated pre-commit hooks for all subsequent operations in the current environment or user session. Requires write access to the project root and a shell environment.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/support/README.md#2025-04-23_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n```console\\n$ echo NO_VERIFY=1 >> .env\\n```\n```\n\n----------------------------------------\n\nTITLE: Executing Dev Command with Patch Flag\nDESCRIPTION: Shows running the dev command with --patch flag to increment patch version instead of minor version.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/maintainer/RELEASE.md#2025-04-23_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n# bazel run @envoy_repo//:dev -- --patch\n...\nProjectRunner SUCCESS [version] 1.23.1-dev\nProjectRunner SUCCESS [changelog] add: 1.23.0\nProjectRunner SUCCESS [changelog] up to date\nProjectRunner SUCCESS [inventory] up to date\nProjectRunner INFO [git] add: VERSION.txt\nProjectRunner INFO [git] add: changelogs/1.23.0.yaml\nProjectRunner INFO [git] add: changelogs/current.yaml\nProjectRunner INFO [git] commit: \"repo: Dev `1.23.1-dev`\"\nProjectRunner NOTICE Repo set to dev (1.23.1-dev)\n\n```\n\n----------------------------------------\n\nTITLE: Modifying HttpConnectionManager Options via Config Modifier in C++\nDESCRIPTION: Demonstrates using `ConfigHelper::addConfigModifier` with a lambda function to directly modify the `HttpConnectionManager` configuration object in C++. This example specifically enables the `allow_absolute_url` option within the HTTP/1.1 protocol settings.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/test/integration/README.md#2025-04-23_snippet_4\n\nLANGUAGE: c++\nCODE:\n```\nconfig_helper_.addConfigModifier([&](envoy::extensions::filters::network::http_connection_manager::v3::HttpConnectionManager& hcm) -> void {\n  nvoy::config::core::v3::Http1ProtocolOptions options;\n  options.mutable_allow_absolute_url()->set_value(true);\n  hcm.mutable_http_protocol_options()->CopyFrom(options);\n};);\n```\n\n----------------------------------------\n\nTITLE: Basic Kafka Mesh Filter Flow Diagram\nDESCRIPTION: Illustrates the basic flow of data through the Kafka mesh filter, showing how requests are decoded, processed, and responses are generated. The diagram shows the relationships between KafkaMeshFilter, RequestDecoder, RequestProcessor, InFlightRequest, and ResponseEncoder components.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/contrib/kafka/filters/network/source/mesh/command_handlers.md#2025-04-23_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD;\n    InFlightRequest[\"<< abstract >> \\n InFlightRequest\"]\n    AbstractResponse[\"<< abstract >> \\n AbstractResponse\"]\n\n    KafkaMeshFilter <-.-> |\"in-flight-reference\\n(finish/abandon)\"| InFlightRequest\n    KafkaMeshFilter --> |feeds| RequestDecoder\n    RequestDecoder --> |\"notifies\"| RequestProcessor\n    RequestProcessor --> |\"creates\"| InFlightRequest\n    InFlightRequest --> |\"produces\"| AbstractResponse\n\n    RequestHolder[\"...RequestHolder\"]\n    RequestHolder --> |\"subclass\"| InFlightRequest\n\n    KafkaMeshFilter --> ResponseEncoder\n    ResponseEncoder -.-> |encodes| AbstractResponse\n```\n\n----------------------------------------\n\nTITLE: Creating gRPC Request Headers in Kotlin\nDESCRIPTION: Example of building gRPC request headers using GRPCRequestHeadersBuilder in Kotlin, including scheme, authority, and path configuration.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/mobile/docs/root/api/grpc.rst#2025-04-23_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nval headers = GRPCRequestHeadersBuilder(\"https\", \"envoyproxy.io\", \"/pb.api.v1.Foo/GetBar\")\n    .add(\"x-foo\", \"123\")\n    ...\n    .build()\n```\n\n----------------------------------------\n\nTITLE: Defining a Parameter with Key-Value Pairs (Plaintext)\nDESCRIPTION: This snippet defines an entity named 'name' and associates it with the key-value pair 'a=b', separated by a semicolon. This likely represents a configuration parameter or setting within the Envoy project context. The exact interpretation depends on the specific configuration parser being used.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/test/extensions/filters/http/cdn_loop/parser_corpus/ParseCdnInfo-SingleParameterExtraWhitespace.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nname ; a=b  \n```\n\n----------------------------------------\n\nTITLE: Assigning GitHub Issues/PRs using RepoKitteh Command\nDESCRIPTION: This slash command is entered in a GitHub comment on an issue or pull request. It instructs RepoKitteh to add the specified user (`@someone`) as an assignee. Both the commenter and the assignee must be organization members.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/source/docs/repokitteh.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n/assign @someone\n```\n\n----------------------------------------\n\nTITLE: Installing Bazelisk on Windows\nDESCRIPTION: Commands to download and install Bazelisk as Bazel on Windows systems, including setting up the PATH environment variable.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/bazel/README.md#2025-04-23_snippet_2\n\nLANGUAGE: cmd\nCODE:\n```\nmkdir %USERPROFILE%\\bazel\npowershell Invoke-WebRequest https://github.com/bazelbuild/bazelisk/releases/latest/download/bazelisk-windows-amd64.exe -OutFile %USERPROFILE%\\bazel\\bazel.exe\nset PATH=%USERPROFILE%\\bazel;%PATH%\n```\n\n----------------------------------------\n\nTITLE: HTTP Filters Table of Contents in RST\nDESCRIPTION: ReStructuredText markup defining the table of contents for HTTP filters documentation, listing all available filters alphabetically.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/http_filters.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _config_http_filters:\n\nHTTP filters\n============\n\n.. toctree::\n  :maxdepth: 2\n\n  adaptive_concurrency_filter\n  admission_control_filter\n  aws_lambda_filter\n  api_key_auth_filter\n  aws_request_signing_filter\n  bandwidth_limit_filter\n  basic_auth_filter\n  buffer_filter\n  cache_filter\n  cdn_loop_filter\n  checksum_filter\n  compressor_filter\n  composite_filter\n  connect_grpc_bridge_filter\n  cors_filter\n  credential_injector_filter\n  csrf_filter\n  custom_response_filter\n  decompressor_filter\n  dynamic_forward_proxy_filter\n  dynamodb_filter\n  ext_authz_filter\n  ext_proc_filter\n  fault_filter\n  file_system_buffer_filter\n  gcp_authn_filter\n  geoip_filter\n  golang_filter\n  grpc_field_extraction_filter\n  grpc_http1_bridge_filter\n  grpc_http1_reverse_bridge_filter\n  grpc_json_reverse_transcoder_filter\n  grpc_json_transcoder_filter\n  grpc_stats_filter\n  grpc_web_filter\n  header_mutation_filter\n  health_check_filter\n  header_to_metadata_filter\n  ip_tagging_filter\n  json_to_metadata_filter\n  jwt_authn_filter\n  kill_request_filter\n  language_filter\n  local_rate_limit_filter\n  lua_filter\n  oauth2_filter\n  on_demand_updates_filter\n  original_src_filter\n  proto_message_extraction_filter\n  rate_limit_filter\n  rate_limit_quota_filter\n  rbac_filter\n  router_filter\n  set_filter_state\n  set_metadata_filter\n  squash_filter\n  stateful_session_filter\n  sxg_filter\n  tap_filter\n  thrift_to_metadata_filter\n  upstream_codec_filter\n  wasm_filter\n```\n\n----------------------------------------\n\nTITLE: Outputting Histogram Buckets in Disjoint Mode - Envoy Admin API - JSON\nDESCRIPTION: This snippet gives the JSON structure of disjoint histogram buckets as produced by Envoy's /stats endpoint using ?format=json&histogram_buckets=disjoint. Buckets in this mode exclude lower-bound values from other buckets, providing mutually exclusive ranges for data distribution. The input is a GET request with disjoint buckets enabled, returning JSON objects for each histogram and their bucket statistics. This enables advanced analytics on data stratification within the histogram range requirements.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/operations/admin.rst#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"histograms\": [\n    {\n      \"name\": \"example_histogram\",\n      \"buckets\": [\n        {\"upper_bound\": 1, \"interval\": 0, \"cumulative\": 0},\n        {\"upper_bound\": 2, \"interval\": 0, \"cumulative\": 1},\n        {\"upper_bound\": 3, \"interval\": 1, \"cumulative\": 2},\n        {\"upper_bound\": 4, \"interval\": 0, \"cumulative\": 0}\n      ]\n    },\n    {\n      \"name\": \"other_example_histogram\",\n      \"buckets\": [\n        {\"upper_bound\": 0.5, \"interval\": 0, \"cumulative\": 0},\n        {\"upper_bound\": 1, \"interval\": 0, \"cumulative\": 0},\n        {\"upper_bound\": 5, \"interval\": 0, \"cumulative\": 0},\n        {\"upper_bound\": 10, \"interval\": 0, \"cumulative\": 0},\n        {\"upper_bound\": 25, \"interval\": 0, \"cumulative\": 0},\n        {\"upper_bound\": 50, \"interval\": 0, \"cumulative\": 0}\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining API Documentation Structure in reStructuredText\nDESCRIPTION: This snippet defines the structure of the API documentation using reStructuredText directives. It creates a table of contents with links to various API-related pages including supported versions, v3 API documentation, xDS protocol, and client features.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/api/api.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _api:\n\nAPI\n===\n\n.. toctree::\n  :glob:\n  :maxdepth: 2\n\n  api_supported_versions\n  ../api-v3/api\n  ../api-docs/xds_protocol\n  client_features\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents for Envoy Upstream Configuration in reStructuredText\nDESCRIPTION: This code snippet defines a table of contents using reStructuredText directives. It includes glob patterns to automatically include documentation for HTTP and TCP upstream extensions, as well as local address selector configuration.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/api-v3/config/upstream/upstream.rst#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n  :glob:\n  :maxdepth: 3\n\n  ../../extensions/upstreams/http/v3/**\n  ../../extensions/upstreams/http/*/v3/**\n  ../../extensions/upstreams/tcp/v3/**\n  ../../extensions/upstreams/tcp/*/v3/**\n  local_address_selector/v3/**\n```\n\n----------------------------------------\n\nTITLE: Configuring Path Matcher Documentation Structure in reStructuredText\nDESCRIPTION: This RST code snippet sets up a toctree for path matcher documentation in Envoy Proxy. It uses glob patterns to automatically include all v3 API docs for path matching extensions.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/api-v3/config/path/match/path_matcher.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n  :glob:\n  :maxdepth: 2\n\n  ../../../extensions/path/match/*/v3/*\n```\n\n----------------------------------------\n\nTITLE: Server Ready Response - Text Format\nDESCRIPTION: Example response from the /ready endpoint indicating server readiness state\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/operations/admin.rst#2025-04-23_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nLIVE\n```\n\n----------------------------------------\n\nTITLE: Defining RST Table of Contents Structure for Envoy Proxy Architecture Documentation\nDESCRIPTION: This RST (ReStructuredText) snippet defines the table of contents structure for Envoy Proxy's architecture documentation. It uses the toctree directive with maxdepth of 2 to organize documentation into logical sections.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/intro/arch_overview/arch_overview.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n  :maxdepth: 2\n\n  intro/intro\n  listeners/listeners_toc\n  http/http\n  upstream/upstream\n  observability/observability\n  security/security\n  operations/operations\n  other_features/other_features\n  other_protocols/other_protocols\n  advanced/advanced\n```\n\n----------------------------------------\n\nTITLE: Defining Path Matcher Fields in Protobuf\nDESCRIPTION: This example shows the preferred way to define multiple fields with defined precedence for path matching, using simple and regex path options.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/api/STYLE.md#2025-04-23_snippet_1\n\nLANGUAGE: protobuf\nCODE:\n```\n// Simple path matcher. If regex_path is set, this field is not used.\nstring simple_path = 1;\n// Regex path matcher. If set, takes precedence over simple_path.\nstring regex_path = 2;\n```\n\n----------------------------------------\n\nTITLE: RST Document Structure for HTTP Tracers\nDESCRIPTION: ReStructuredText document structure defining the HTTP tracers section of Envoy documentation, including table of contents and platform support notes.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/api-v3/config/trace/trace.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _http_tracers:\n\nHTTP tracers\n============\n\n.. note::\n\n Tracers are not supported on Windows.\n\n.. toctree::\n  :glob:\n  :maxdepth: 2\n\n  v3/*\n  opentelemetry/resource_detectors\n  opentelemetry/samplers\n  ../../extensions/tracers/fluentd/v3/*\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents for Envoy Proxy Operations in reStructuredText\nDESCRIPTION: This code snippet defines a table of contents in reStructuredText format for various operational and administrative topics related to Envoy Proxy. It sets the depth of the table to 2 levels and lists the relevant documentation files.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/operations/operations.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _operations:\n\nOperations and administration\n=============================\n\n.. toctree::\n  :maxdepth: 2\n\n  cli\n  hot_restarter\n  admin\n  stats_overview\n  runtime\n  fs_flags\n  traffic_tapping\n  certificates\n  performance\n  tools/tools\n```\n\n----------------------------------------\n\nTITLE: Configuring RST Documentation Tree for Resource Monitors\nDESCRIPTION: Sphinx/RST configuration for organizing resource monitor documentation. Sets up a table of contents tree that includes all resource monitor documentation files from extensions directory and v2alpha paths.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/api-v3/config/resource_monitor/resource_monitor.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _v3_config_resource_monitors:\n\nResource monitors\n=================\n\n.. toctree::\n  :glob:\n  :maxdepth: 2\n\n  ../../extensions/resource_monitors/*/v3/*\n  */v2alpha/*\n```\n\n----------------------------------------\n\nTITLE: Creating Sphinx documentation toctree for Envoy Bootstrap Configuration\nDESCRIPTION: A reStructuredText directive that creates a table of contents for Envoy's bootstrap configuration documentation. It includes proto file references for various bootstrap components like core settings, metrics, overload, rate limiting, and extensions.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/api-v3/bootstrap/bootstrap.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n  :glob:\n  :maxdepth: 2\n\n  ../config/bootstrap/v3/bootstrap.proto\n  ../extensions/bootstrap/internal_listener/v3/internal_listener.proto\n  ../config/metrics/v3/metrics_service.proto\n  ../config/overload/v3/overload.proto\n  ../config/ratelimit/v3/rls.proto\n  ../config/metrics/v3/stats.proto\n  ../extensions/vcl/v3alpha/vcl_socket_interface.proto\n  ../extensions/wasm/v3/wasm.proto\n```\n\n----------------------------------------\n\nTITLE: iOS Reachability State Flags Example\nDESCRIPTION: Sample log output showing the reachability state transitions when enabling and disabling VPN on iOS using SCNetworkReachability.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/mobile/docs/root/development/performance/vpn_analysis.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nReachability flags: .reachable] // VPN off\nReachability [.reachable, .transientConnection] // VPN on\nReachability flags: [.reachable] // VPN off\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents for Envoy Security Documentation in reStructuredText\nDESCRIPTION: This snippet defines a table of contents for the Envoy proxy security documentation using reStructuredText syntax. It sets the maximum depth to 2 and lists various security-related topics as child pages.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/intro/arch_overview/security/security.rst#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\nSecurity\n========\n\n.. toctree::\n  :maxdepth: 2\n\n  ssl\n  jwt_authn_filter\n  ext_authz_filter\n  rbac_filter\n  threat_model\n  external_deps\n  google_vrp\n```\n\n----------------------------------------\n\nTITLE: Defining a Seven-Segment URL Path Template (Text)\nDESCRIPTION: This text defines a URL path template with seven variable segments: `One`, `Two`, `threE`, `fOUR`, `fiVe`, `max`, and `max_tWo`. This pattern is likely used within a system like Envoy to route incoming requests based on their URL structure, capturing the values within these segments for further processing.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/test/extensions/path/uri_template_lib/uri_template_corpus/UriTemplate_MixedCases.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n/{One}/{Two}/{threE}/{fOUR}/{fiVe}/{max}/{max_tWo}\n```\n\n----------------------------------------\n\nTITLE: Importing RepoKitteh Modules in Starlark Configuration\nDESCRIPTION: This Starlark code snippet shows how to import a RepoKitteh module (`assign.star`) within the main `repokitteh.star` configuration file. This `use` statement makes the assignment functionality available in the Envoy repository through slash commands.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/source/docs/repokitteh.md#2025-04-23_snippet_0\n\nLANGUAGE: starlark\nCODE:\n```\nuse(\"github.com/repokitteh/modules/assign.star\")\n```\n\n----------------------------------------\n\nTITLE: Checking for SSSE3 CPU Support (Shell)\nDESCRIPTION: A shell command used to verify if the host system's CPU supports the SSSE3 instruction set by querying `/proc/cpuinfo`. If this command yields no output, it confirms the absence of SSSE3 support, which is the likely cause of the Hyperscan build failure noted in the Proxmox troubleshooting section. The recommended solution is to change the VM's CPU type to 'max'.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/tools/vscode/README.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncat /proc/cpuinfo | grep ssse3\n```\n\n----------------------------------------\n\nTITLE: Creating Sphinx Documentation Table of Contents for Envoy Observability Features in RST\nDESCRIPTION: This RST (reStructuredText) snippet defines a documentation table of contents for Envoy Proxy's observability features. It creates a table of contents with a maximum depth of 2 levels, linking to documentation for statistics, access logging, and tracing.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/intro/arch_overview/observability/observability.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n  :maxdepth: 2\n\n  statistics\n  access_logging\n  tracing\n```\n\n----------------------------------------\n\nTITLE: Runtime Guard Configuration\nDESCRIPTION: Add runtime guard key-value pairs to Envoy configuration.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/mobile/docs/root/api/starting_envoy.rst#2025-04-23_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\nbuilder.addRuntimeGuard(\"feature\", true)\n```\n\nLANGUAGE: swift\nCODE:\n```\nbuilder.addRuntimeGuard(\"feature\", true)\n```\n\n----------------------------------------\n\nTITLE: Defining Envoy Documentation Structure with Sphinx reStructuredText\nDESCRIPTION: This snippet defines the main structure of Envoy documentation using reStructuredText format. It includes a conditional pre-release warning and organizes the documentation into a table of contents with sections covering introduction, configuration, operations, API, and other key aspects of the Envoy proxy.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/index.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\nEnvoy documentation\n=================================\n\n.. ifconfig:: release_level in ('pre-release')\n\n  .. attention::\n\n    This is pre-release documentation. There is risk of it not being consistent with what is\n    currently implemented in Envoy, though we try to make things consistent as quickly as possible.\n\n.. toctree::\n  :maxdepth: 2\n\n  about_docs\n  intro/intro\n  start/start\n  configuration/configuration\n  operations/operations\n  extending/extending\n  api/api\n  faq/overview\n  version_history/version_history\n```\n\n----------------------------------------\n\nTITLE: RST Documentation Structure for RBAC Matchers\nDESCRIPTION: Defines the documentation tree structure for RBAC matchers, specifically pointing to upstream matcher configurations\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/api-v3/config/rbac/matchers.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _api-v3_config_rbac_matchers:\n\nRBAC matchers\n=============\n\n.. toctree::\n  :glob:\n  :maxdepth: 2\n\n  matchers/upstream/upstream\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx TOC Tree for WASM Documentation\nDESCRIPTION: RST markup for configuring a Sphinx documentation table of contents that includes WASM extension documentation and WASM stat sink documentation using glob patterns\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/api-v3/config/wasm/wasm.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n  :glob:\n  :maxdepth: 2\n\n  ../../extensions/wasm/v3/*\n  ../../extensions/stat_sinks/wasm/v3/*\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Documentation Tree for Envoy Data\nDESCRIPTION: ReStructuredText directive for configuring a Sphinx documentation tree with glob pattern matching and maximum depth of 2 levels. Links to documentation for access logs, clusters, core components, DNS, and tap functionality.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/api-v3/data/data.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n  :glob:\n  :maxdepth: 2\n\n  accesslog/accesslog\n  cluster/cluster\n  core/core\n  dns/dns\n  tap/tap\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents for Upstream Clusters in reStructuredText\nDESCRIPTION: This snippet defines a table of contents for the upstream clusters section using reStructuredText syntax. It includes various subtopics related to cluster management and operation in Envoy proxy.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/intro/arch_overview/upstream/upstream.rst#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n  :maxdepth: 2\n\n  cluster_manager\n  service_discovery\n  dns_resolution\n  health_checking\n  connection_pooling\n  load_balancing/load_balancing\n  aggregate_cluster\n  outlier\n  circuit_breaking\n  upstream_filters\n  load_reporting_service\n  load_balancing_policies\n```\n\n----------------------------------------\n\nTITLE: Dumping Envoy Heap Profile via Admin Interface\nDESCRIPTION: Command to use curl to request a heap dump from Envoy's admin interface and save it to a file.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/faq/debugging/how_to_dump_heap_profile_of_envoy.rst#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl <Envoy IP>:<Envoy Admin Port>/heap_dump -o /heap/output/envoy.heap\n```\n\n----------------------------------------\n\nTITLE: Defining Config Validators Documentation Structure in RST\nDESCRIPTION: This RST code defines the structure for the config validators documentation in Envoy proxy. It sets up a toctree to include all relevant validator documentation files from specific directories.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/api-v3/config/config_validators/config_validators.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _v3_config_config_validators:\n\nConfig validators\n=================\n\n.. toctree::\n  :glob:\n  :maxdepth: 2\n\n  ../../extensions/config/validators/*/v3/*\n```\n\n----------------------------------------\n\nTITLE: Creating RST Table of Contents for Envoy Proxy Contrib Extensions\nDESCRIPTION: This RST (reStructuredText) snippet defines a documentation table of contents for Envoy Proxy's contributed extensions. It uses the toctree directive with glob pattern to include all relevant documentation files for various extension components.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/api-v3/config/contrib/contrib.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _api-v3_config_contrib:\n\nContrib extensions\n==================\n\n.. toctree::\n  :glob:\n  :maxdepth: 2\n\n  sip/sip\n  cluster_specifier/cluster_specifier\n  cryptomb/cryptomb\n  hyperscan/matcher\n  hyperscan/regex_engine\n  dlb/dlb\n  qat/qat\n  http_tcp_bridge/http_tcp_bridge\n  tap_sinks/tap_sinks\n```\n\n----------------------------------------\n\nTITLE: Health Check Filter Statistics Namespace in Envoy\nDESCRIPTION: Defines the namespace for health check filter statistics in Envoy. The stat_prefix is derived from the owning HTTP connection manager and prepended to 'health_check.' to form the complete namespace.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/health_check_filter.rst#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nhttp.<stat_prefix>.health_check.\n```\n\n----------------------------------------\n\nTITLE: Defining Sphinx Documentation Tree for Hyperscan\nDESCRIPTION: ReStructuredText configuration that sets up the documentation tree for Hyperscan regex engine. Uses toctree directive to include all v3alpha documentation files from the extensions directory.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/api-v3/config/contrib/hyperscan/regex_engine.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n  :glob:\n  :maxdepth: 2\n\n  ../../../extensions/regex_engines/hyperscan/v3alpha/*\n```\n\n----------------------------------------\n\nTITLE: Generating Table of Contents for OpenTelemetry Samplers in RST\nDESCRIPTION: This RST code snippet creates a table of contents for OpenTelemetry samplers documentation. It uses the toctree directive with glob option to automatically include all relevant files from a specific directory.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/api-v3/config/trace/opentelemetry/samplers.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n  :glob:\n  :maxdepth: 3\n\n  ../../../extensions/tracers/opentelemetry/samplers/v3/*\n```\n\n----------------------------------------\n\nTITLE: Running Envoy Mobile Hello World App in Emulator\nDESCRIPTION: Two shell commands to be executed sequentially from the mobile root directory - first starting the Android emulator and waiting for boot, then launching the hello world example app.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/mobile/examples/java/hello_world/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ examples/java/hello_world/start_emulator.sh # Wait until the emulator is fully booted up.\n$ examples/java/hello_world/start_app.sh\n```\n\n----------------------------------------\n\nTITLE: Generating Tap Configuration Documentation Index with Sphinx\nDESCRIPTION: This snippet uses Sphinx's toctree directive to create an index of all v3 API documentation files related to tap configuration in Envoy. It sets the maximum depth to 2 and uses a glob pattern to include all files in the v3 directory.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/api-v3/data/tap/tap.rst#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n  :glob:\n  :maxdepth: 2\n\n  v3/*\n```\n\n----------------------------------------\n\nTITLE: Defining a Bazel Repository for boringssl\nDESCRIPTION: Example repository definition for boringssl in bazel/repository_locations.bzl, showing how to properly specify SHA256, strip prefix, and URL for a dependency.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/bazel/EXTERNAL_DEPS.md#2025-04-23_snippet_0\n\nLANGUAGE: bazel\nCODE:\n```\nboringssl = dict(\n    # Use commits from branch \"chromium-stable-with-bazel\"\n    sha256 = \"d1700e0455f5f918f8a85ff3ce6cd684d05c766200ba6bdb18c77d5dcadc05a1\",\n    strip_prefix = \"boringssl-060e9a583976e73d1ea8b2bfe8b9cab33c62fa17\",\n    # chromium-70.0.3538.67\n    urls = [\"https://github.com/google/boringssl/archive/060e9a583976e73d1ea8b2bfe8b9cab33c62fa17.tar.gz\"],\n)\n```\n\n----------------------------------------\n\nTITLE: Package Hash Requirements List\nDESCRIPTION: Detailed list of package dependencies with their SHA256 hashes for security verification. Includes core packages like clang-format 18.1.8, clang-tidy 18.1.8, colorama 0.4.6, and coloredlogs 15.0.1 with all their corresponding hash values.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/tools/base/requirements.txt#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n--hash=sha256:0b2b64d2bb6d3fb9112bafa732def486049e63de9618b5843bcdd081d8144cd8 \\\n    --hash=sha256:10955842570876604d404661fbccbc9c7e684caf432c09c715ec38fbae45ae09 \\\n    --hash=sha256:122c7fa62b130ed55f8f285bfd56d5f4b4a5b503609d181f9ad85e55c89f4185\n```\n\n----------------------------------------\n\nTITLE: Managing Stream Lifecycle in Kotlin and Swift\nDESCRIPTION: Shows complete stream lifecycle management including creation, sending data, and termination in both languages.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/mobile/docs/root/api/http.rst#2025-04-23_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nval streamClient = AndroidStreamClientBuilder()\n  ...\n  .build()\n\nval requestHeaders = RequestHeadersBuilder()\n  ...\n  .build()\nval prototype = streamClient\n  .newStreamPrototype()\n  ...\nval stream = prototype\n  .start(Executors.newSingleThreadExecutor())\n  .sendHeaders(...)\n  .sendData(...)\n\n...\nstream.close(...)\n```\n\nLANGUAGE: swift\nCODE:\n```\nlet streamClient = StreamClientBuilder()\n  ...\n  .build()\n\nlet requestHeaders = RequestHeadersBuilder()\n  ...\n  .build()\nlet prototype = streamClient\n  .newStreamPrototype()\n  ...\nlet stream = prototype\n  .start(queue: .main)\n  .sendHeaders(...)\n  .sendData(...)\n\n...\nstream.close(...)\n```\n\n----------------------------------------\n\nTITLE: Creating Table of Contents for Protocol Documentation in reStructuredText\nDESCRIPTION: A reStructuredText directive that creates a table of contents for protocol-specific documentation. It includes links to documentation for gRPC, MongoDB, DynamoDB, Redis, and PostgreSQL protocols with a maximum depth of 2 levels.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/intro/arch_overview/other_protocols/other_protocols.rst#2025-04-23_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. toctree::\n  :maxdepth: 2\n\n  grpc\n  mongo\n  dynamo\n  redis\n  postgres\n```\n\n----------------------------------------\n\nTITLE: Building Envoy Mobile Documentation Locally\nDESCRIPTION: Command to generate Envoy Mobile documentation locally using the build script. The generated documentation will be available in the generated/docs directory.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/mobile/docs/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./docs/build.sh\n```\n\n----------------------------------------\n\nTITLE: Running Bazel Sync Command for Envoy Release Branches (Bash)\nDESCRIPTION: Executes the Bazel 'sync' target in the Envoy repository for syncing release branches. Requires Bazel and access to a forked copy of the Envoy Git repository. The command 'bazel run @envoy_repo//:sync' must be run from within a correctly configured checkout and triggers automation of changelog and documentation mapping updates. Input: none. Output: modifies the working directory with updated release artifacts; changes should be committed and opened as a PR to 'main'. Limitation: intended for contributors familiar with Envoy's development workflow.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/maintainer/RELEASE.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nbazel run @envoy_repo//:sync\n```\n\n----------------------------------------\n\nTITLE: Set Android SDK and NDK Environment Variables - Bash\nDESCRIPTION: Defines Android development environment variables ANDROID_HOME and ANDROID_NDK_HOME to point to the installed SDK and NDK directories, required for local Android builds. No additional dependencies are needed. Adjust the paths for your actual locations before use; evaluated per-shell session.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/mobile/docs/root/start/building/building.rst#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nANDROID_HOME=$HOME/Library/Android/sdk\nANDROID_NDK_HOME=$HOME/Library/Android/ndk/21.3.6528147\n```\n\n----------------------------------------\n\nTITLE: Configuring RST Documentation Tree for HTTP IP Detection\nDESCRIPTION: Sphinx documentation configuration using toctree directive to include all v3 original IP detection extension documentation files.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/api-v3/config/http/original_ip_detection.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n  :glob:\n  :maxdepth: 2\n\n  ../../extensions/http/original_ip_detection/*/v3/*\n```\n\n----------------------------------------\n\nTITLE: Network Filters RST Documentation Structure\nDESCRIPTION: RST markup defining the documentation structure for Envoy's network filters, including a title, reference label, and table of contents listing all available filters.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/listeners/network_filters/network_filters.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _config_network_filters:\n\nNetwork filters\n===============\n\nIn addition to the :ref:`HTTP connection manager <config_http_conn_man>` which is large\nenough to have its own section in the configuration guide, Envoy has the follow builtin network\nfilters.\n\n.. toctree::\n  :maxdepth: 2\n\n  client_ssl_auth_filter\n  connection_limit_filter\n  direct_response_filter\n  dubbo_proxy_filter\n  echo_filter\n  ext_authz_filter\n  ext_proc_filter\n  generic_proxy_filter\n  golang_filter\n  kafka_broker_filter\n  kafka_mesh_filter\n  local_rate_limit_filter\n  mongo_proxy_filter\n  mysql_proxy_filter\n  postgres_proxy_filter\n  rate_limit_filter\n  rbac_filter\n  redis_proxy_filter\n  rocketmq_proxy_filter\n  set_filter_state\n  sni_cluster_filter\n  sni_dynamic_forward_proxy_filter\n  tcp_proxy_filter\n  thrift_proxy_filter\n  wasm_filter\n  zookeeper_proxy_filter\n```\n\n----------------------------------------\n\nTITLE: Updating Local Branch with Main Changes in Envoy Development\nDESCRIPTION: Bash commands to update a local feature branch with the latest changes from the main branch without rebasing, which is recommended during PR review.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/CONTRIBUTING.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbranch=$(git status|head -1|cut -f3 -d\\ )\ngit checkout main\ngit pull\ngit checkout \"$branch\"\ngit merge main\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents for Envoy Proxy Types in reStructuredText\nDESCRIPTION: This snippet defines a table of contents using reStructuredText syntax. It includes various type definitions for Envoy Proxy, organized into categories such as matchers, HTTP types, tracing, and utility types.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/api-v3/types/types.rst#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\nTypes\n=====\n\n.. toctree::\n  :glob:\n  :maxdepth: 2\n\n  ../type/matcher/v3/http_inputs.proto\n  ../type/tracing/v3/custom_tag.proto\n  ../type/v3/hash_policy.proto\n  ../type/v3/http.proto\n  ../type/v3/http_status.proto\n  ../type/http/v3/cookie.proto\n  ../type/metadata/v3/metadata.proto\n  ../type/matcher/v3/filter_state.proto\n  ../type/matcher/v3/metadata.proto\n  ../type/matcher/v3/node.proto\n  ../type/matcher/v3/number.proto\n  ../type/matcher/v3/path.proto\n  ../type/http/v3/path_transformation.proto\n  ../type/v3/percent.proto\n  ../type/v3/range.proto\n  ../type/v3/ratelimit_unit.proto\n  ../type/v3/ratelimit_strategy.proto\n  ../type/matcher/v3/regex.proto\n  ../type/v3/semantic_version.proto\n  ../type/matcher/v3/string.proto\n  ../type/matcher/v3/struct.proto\n  ../type/v3/token_bucket.proto\n  ../type/matcher/v3/value.proto\n  ../type/matcher/v3/status_code_input.proto\n  ../type/matcher/v3/address.proto\n```\n\n----------------------------------------\n\nTITLE: Configuring Access Logger Documentation Structure in reStructuredText\nDESCRIPTION: A reStructuredText toctree directive that organizes access logger documentation. It includes documentation from the v3 directory and extensions directory, using glob pattern matching to find all relevant files.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/api-v3/config/accesslog/accesslog.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n  :glob:\n  :maxdepth: 2\n\n  v3/*\n  ../../extensions/access_loggers/*/v3/*\n  ../../extensions/access_loggers/filters/*/v3/*\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents for Load Balancing Policies in RST\nDESCRIPTION: This RST code snippet defines a table of contents for load balancing policies documentation. It uses the toctree directive to automatically generate links to all matching files in the specified directory structure.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/api-v3/config/load_balancing_policies/load_balancing_policies.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n  :glob:\n  :maxdepth: 2\n\n  ../../extensions/load_balancing_policies/*/v3/*\n```\n\n----------------------------------------\n\nTITLE: Community Code of Conduct Reference in Markdown\nDESCRIPTION: Markdown heading and link specifying that Envoy follows the CNCF Code of Conduct, with a link to the full document.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/CODE_OF_CONDUCT.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Community Code of Conduct\n\nEnvoy follows the [CNCF Code of Conduct](https://github.com/cncf/foundation/blob/master/code-of-conduct.md).\n```\n\n----------------------------------------\n\nTITLE: DynamoDB Filter Statistics CSV Table in reStructuredText\nDESCRIPTION: Defines a CSV table structure for DynamoDB filter statistics, including operation name, type, and description.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/dynamodb_filter.rst#2025-04-23_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. csv-table::\n    :header: Name, Type, Description\n    :widths: 1, 1, 2\n\n    upstream_rq_total, Counter, Total number of requests with ``<operation_name>``\n    upstream_rq_time, Histogram, Time spent on ``<operation_name>``\n    upstream_rq_total_xxx, Counter, Total number of requests with ``<operation_name>`` per response code (503/2xx/etc)\n    upstream_rq_time_xxx, Histogram, Time spent on ``<operation_name>`` per response code (400/3xx/etc)\n```\n\n----------------------------------------\n\nTITLE: Configuring gRPC-Web Filter Type URL\nDESCRIPTION: Type URL configuration for enabling the gRPC-Web filter in Envoy proxy. This URL specifies the protobuf message type used for filter configuration.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/grpc_web_filter.rst#2025-04-23_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\ntype.googleapis.com/envoy.extensions.filters.http.grpc_web.v3.GrpcWeb\n```\n\n----------------------------------------\n\nTITLE: Email Template: Upcoming Security Release Announcement\nDESCRIPTION: Template for announcing upcoming security releases to the general Envoy community. Includes placeholders for version, release date, severity, and number of defects.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/security/email-templates.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nSubject: Upcoming security release of Envoy $VERSION\nTo: envoy-security-announce@googlegroups.com\nCc: envoy-announce@googlegroups.com, envoy-security@googlegroups.com, envoy-maintainers@googlegroups.com\n\nHello Envoy Community,\n\nThe Envoy security team would like to announce the forthcoming release of Envoy\n$VERSION.\n\nThis release will be made available on the $ORDINALDAY of $MONTH $YEAR at\n$PDTHOUR PDT ($GMTHOUR GMT). This release will fix $NUMDEFECTS security\ndefect(s). The highest rated security defect is considered $SEVERITY severity.\n\nNo further details or patches will be made available in advance of the release.\n\nThanks,\n$PERSON (on behalf of the Envoy security team and maintainers)\n```\n\n----------------------------------------\n\nTITLE: Gauge Operations\nDESCRIPTION: Examples of gauge operations including setting values, adding, and subtracting.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/mobile/docs/root/api/stats.rst#2025-04-23_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\n// Set value\ngauge.set(5)\n\n// Add value\ngauge.add(5)\n\n// Subtract value\ngauge.sub(5)\n```\n\nLANGUAGE: swift\nCODE:\n```\n// Set value\ngauge.set(value: 5)\n\n// Add value\ngauge.add(amount: 5)\n\n// Subtract value\ngauge.sub(amount: 5)\n```\n\n----------------------------------------\n\nTITLE: Defining Ignore Patterns for Envoy Proxy Files\nDESCRIPTION: This snippet defines patterns to ignore specific file types and modules in the Envoy Proxy project. It includes patterns for Lua files, Envoy Go-related files, and dynamic module callback files.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/bazel/exported_symbols_apple.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n_lua*\n_envoyGo*\n_envoy_dynamic_module_callback_*\n```\n\n----------------------------------------\n\nTITLE: Virtual Cluster Statistics CSV Configuration\nDESCRIPTION: CSV table defining virtual cluster statistics tracked in the vhost.<virtual host name>.vcluster.<virtual cluster name> namespace.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/router_filter.rst#2025-04-23_snippet_3\n\nLANGUAGE: csv\nCODE:\n```\nName, Type, Description\nupstream_rq_<*xx>, Counter, \"Aggregate HTTP response codes (e.g., 2xx, 3xx, etc.)\"\nupstream_rq_<*>, Counter, \"Specific HTTP response codes (e.g., 201, 302, etc.)\"\nupstream_rq_retry, Counter, Total request retries\nupstream_rq_retry_limit_exceeded, Counter, Total requests not retried due to exceeding the configured number of maximum retries\nupstream_rq_retry_overflow, Counter, Total requests not retried due to circuit breaking or exceeding the retry budgets\nupstream_rq_retry_success, Counter, Total request retry successes\nupstream_rq_time, Histogram, Request time milliseconds\nupstream_rq_timeout, Counter, Total requests that timed out waiting for a response\nupstream_rq_total, Counter, Total requests initiated by the router to the upstream\n```\n\n----------------------------------------\n\nTITLE: Installing Additional Packages in MSYS2 for Windows Envoy Bazel Build\nDESCRIPTION: This command installs additional required packages in the MSYS2 environment for building Envoy on Windows.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/bazel/README.md#2025-04-23_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\npacman -S diffutils patch unzip zip\n```\n\n----------------------------------------\n\nTITLE: Configuring RST Documentation Tree\nDESCRIPTION: Sphinx documentation configuration that sets up a table of contents tree for core data protocol buffer definitions, including health check events and TLS metadata specifications.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/api-v3/data/core/core.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n  :glob:\n  :maxdepth: 2\n\n  v3/health_check_event.proto\n  v3/tlv_metadata.proto\n```\n\n----------------------------------------\n\nTITLE: Creating Table of Contents with Sphinx in RST\nDESCRIPTION: This snippet creates a table of contents using Sphinx documentation's toctree directive with a maximum depth of 2, linking to pages covering terminology and threading model concepts.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/intro/arch_overview/intro/intro.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n  :maxdepth: 2\n\n  terminology\n  threading_model\n```\n\n----------------------------------------\n\nTITLE: Building Envoy Optimized for Size (`sizeopt` config)\nDESCRIPTION: Builds the main Envoy executable using a specific Bazel configuration (`--config=sizeopt`) designed to optimize the resulting binary size, potentially overriding the default compilation mode settings.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/bazel/README.md#2025-04-23_snippet_30\n\nLANGUAGE: bash\nCODE:\n```\nbazel build envoy --config=sizeopt\n```\n\n----------------------------------------\n\nTITLE: Configuring RST Documentation Tree for Request ID\nDESCRIPTION: RST configuration that sets up the documentation tree structure for request ID extensions, using glob patterns to include all v3 documentation files.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/api-v3/config/request_id/request_id.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n  :glob:\n  :maxdepth: 2\n\n  ../../extensions/request_id/*/v3/*\n```\n\n----------------------------------------\n\nTITLE: Defining Symbol Export Patterns for Envoy Proxy\nDESCRIPTION: This configuration block defines patterns for exporting symbols in Envoy Proxy. It includes patterns for Lua symbols, Go symbols (prefixed with 'envoyGo'), and dynamic module callback symbols.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/bazel/exported_symbols.txt#2025-04-23_snippet_0\n\nLANGUAGE: Configuration\nCODE:\n```\n{\n\tlua*;\n\tenvoyGo*;\n\tenvoy_dynamic_module_callback_*;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents for TAP UDP Sink Extensions in reST\nDESCRIPTION: A reStructuredText directive that creates a table of contents for TAP UDP sink extension documentation. The toctree uses glob pattern matching to include all relevant files from the extensions/tap_sinks directory structure.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/api-v3/config/contrib/tap_sinks/tap_sinks.rst#2025-04-23_snippet_0\n\nLANGUAGE: reST\nCODE:\n```\n.. toctree::\n  :glob:\n  :maxdepth: 2\n\n  ../../../extensions/tap_sinks/*/v3alpha/*\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Request Retries in Envoy\nDESCRIPTION: JSON configuration for Envoy's retry mechanism. This setup enables retries for various failure conditions, limits to 1 retry attempt, and uses the previous hosts predicate to ensure retries are attempted on different hosts than where the original request failed.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/faq/load_balancing/transient_failures.rst#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"retry_on\": \"cancelled,connect-failure,gateway-error,refused-stream,reset,reset-before-request,resource-exhausted,unavailable\",\n   \"num_retries\": 1,\n   \"retry_host_predicate\": [\n   {\n      \"name\": \"envoy.retry_host_predicates.previous_hosts\"\n   }\n  ],\n  \"host_selection_retry_max_attempts\": \"5\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Statsd Server Settings in JavaScript\nDESCRIPTION: Configuration file for statsd server setup that specifies the port (8125), backend console logging, and TCP server with debug mode enabled. This configuration is required to receive stats from Envoy Mobile.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/mobile/docs/root/development/testing/local_stats.rst#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  port: 8125\n, backends: [ \"./backends/console\" ]\n, servers: [{server: \"./servers/tcp\", debug: true}]\n, debug: true\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring toctree for HTTP Stateful Session Documentation in reStructuredText\nDESCRIPTION: Sets up a table of contents tree (toctree) for HTTP stateful session documentation. It uses globbing to include all relevant files from the specified directory structure.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/api-v3/config/http/stateful_session.rst#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n  :glob:\n  :maxdepth: 2\n\n  ../../extensions/http/stateful_session/*/v3/*\n```\n\n----------------------------------------\n\nTITLE: Running Envoy Mobile App in Android Emulator\nDESCRIPTION: Two-step process to start an Android emulator and launch the Envoy mobile app. The first command starts the emulator and waits for full boot, followed by the second command that launches the application.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/mobile/test/kotlin/apps/experimental/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ test/kotlin/apps/experimental/start_emulator.sh # Wait until the emulator is fully booted up.\n$ test/kotlin/apps/experimental/start_app.sh\n```\n\n----------------------------------------\n\nTITLE: Node Locality Configuration\nDESCRIPTION: Set the node.locality field with region, zone, and subzone information.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/mobile/docs/root/api/starting_envoy.rst#2025-04-23_snippet_14\n\nLANGUAGE: kotlin\nCODE:\n```\nbuilder.setNodeLocality(region = \"us-west-1\", zone = \"some_zone\", subZone = \"some_sub_zone\")\n```\n\nLANGUAGE: swift\nCODE:\n```\nbuilder.setNodeLocality(region: \"us-west-1\", zone: \"some_zone\", subZone: \"some_sub_zone\")\n```\n\nLANGUAGE: cpp\nCODE:\n```\nbuilder.setNodeLocality(\"us-west-1\", \"some_zone\", \"some_sub_zone\");\n```\n\n----------------------------------------\n\nTITLE: Using ENVOY_TAGGED_CONN_LOG / STREAM_LOG Macros in C++\nDESCRIPTION: Shows how to use `ENVOY_TAGGED_CONN_LOG` and `ENVOY_TAGGED_STREAM_LOG` macros, which combine tagged logging with connection/stream context. They take the log level, a tag map, the connection or stream object, and the message. The connection/stream ID is automatically added as a tag (\"ConnectionId\", \"StreamId\").\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/source/docs/logging.md#2025-04-23_snippet_6\n\nLANGUAGE: cpp\nCODE:\n```\nstd::map<std::string, std::string> log_tags{{\"key1\",\"value1\"},{\"key2\",\"value2\"}};\nENVOY_TAGGED_LOG(debug, log_tags, conn_, \"failed to perform the operation\");\nENVOY_TAGGED_LOG(debug, log_tags, stream_, \"failed to perform the operation\");\n// output: [debug] [Tags: \"ConnectionId\":\"10\",\"StreamId\":\"11\",\"key1\":\"value1\",\"key2\":\"value2\"] failed to perform the operation\n```\n\n----------------------------------------\n\nTITLE: Analyzing HTTP/2 Communication Flow Between Localhost Endpoints\nDESCRIPTION: This packet capture shows the complete HTTP/2 communication sequence between a client and server on localhost. It demonstrates the HTTP/2 protocol handshake with SETTINGS frames, followed by a GET request and the server's response with headers and data frames.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/api/tools/data/tap2pcap_h2_ipv4.txt#2025-04-23_snippet_0\n\nLANGUAGE: plain\nCODE:\n```\n    1   0.000000    127.0.0.1 → 127.0.0.1    HTTP2 157 Magic, SETTINGS[0], WINDOW_UPDATE[0], HEADERS[1]: GET /\n    2   0.013713    127.0.0.1 → 127.0.0.1    HTTP2 91 SETTINGS[0], SETTINGS[0], WINDOW_UPDATE[0]\n    3   0.013821    127.0.0.1 → 127.0.0.1    HTTP2 63 SETTINGS[0]\n    4   0.128649    127.0.0.1 → 127.0.0.1    HTTP2 5586 HEADERS[1]: 200 OK\n    5   0.130007    127.0.0.1 → 127.0.0.1    HTTP2 7573 DATA[1]\n    6   0.131045    127.0.0.1 → 127.0.0.1    HTTP2 3152 DATA[1], DATA[1] (text/html)\n```\n\n----------------------------------------\n\nTITLE: Configuring and Building TSAN-Instrumented libc++\nDESCRIPTION: Commands to configure and build a Thread Sanitizer (TSAN) instrumented version of libc++ and libc++abi using CMake and Ninja. It specifies LLVM projects, enables TSAN via `LLVM_USE_SANITIZER=Thread`, sets compilers to clang/clang++, uses lld linker, defines build type as Release, and sets the installation prefix to `/opt/libcxx_tsan`. After installation, the include directory is removed.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/bazel/README.md#2025-04-23_snippet_35\n\nLANGUAGE: bash\nCODE:\n```\nmkdir tsan\npushd tsan\n\ncmake -GNinja -DLLVM_ENABLE_PROJECTS=\"libcxxabi;libcxx\" -DLLVM_USE_LINKER=lld -DLLVM_USE_SANITIZER=Thread -DCMAKE_BUILD_TYPE=Release \\\n  -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_INSTALL_PREFIX=\"/opt/libcxx_tsan\" \"../llvm-project-llvmorg-11.0.1/llvm\"\nninja install-cxx install-cxxabi\n\nrm -rf /opt/libcxx_tsan/include\n```\n\n----------------------------------------\n\nTITLE: Listing Python Package Dependencies with Hashes\nDESCRIPTION: This snippet shows the format used to specify Python package dependencies with their version numbers and SHA256 hashes. It includes packages like yamllint, yapf, and yarl, along with their respective hashes for security verification.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/tools/base/requirements.txt#2025-04-23_snippet_8\n\nLANGUAGE: Text\nCODE:\n```\nyamllint==1.35.1 \\\n    --hash=sha256:2e16e504bb129ff515b37823b472750b36b6de07963bd74b307341ef5ad8bdc3 \\\n    --hash=sha256:7a003809f88324fd2c877734f2d575ee7881dd9043360657cc8049c809eba6cd\n    # via envoy-code-check\nyapf==0.43.0 \\\n    --hash=sha256:00d3aa24bfedff9420b2e0d5d9f5ab6d9d4268e72afbf59bb3fa542781d5218e \\\n    --hash=sha256:224faffbc39c428cb095818cf6ef5511fdab6f7430a10783fdfb292ccf2852ca\n    # via\n    #   -r requirements.in\n    #   envoy-code-check\nyarl==1.18.3 \\\n    --hash=sha256:00e5a1fea0fd4f5bfa7440a47eff01d9822a65b4488f7cff83155a0f31a2ecba \\\n    --hash=sha256:02ddb6756f8f4517a2d5e99d8b2f272488e18dd0bfbc802f31c16c6c20f22193 \\\n    --hash=sha256:045b8482ce9483ada4f3f23b3774f4e1bf4f23a2d5c912ed5170f68efb053318\n```\n\n----------------------------------------\n\nTITLE: Configuring RST Documentation Structure for Envoy Mobile\nDESCRIPTION: Sphinx/RST configuration that sets up the documentation structure with conditional pre-release warning and main section navigation. Includes toctree directive for organizing documentation hierarchy with intro, getting started, API, and development sections.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/mobile/docs/root/index.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. ifconfig:: release_level in ('pre-release')\n\n  .. attention::\n\n    This is pre-release documentation. There is risk of it not being consistent with what is\n    currently implemented in Envoy Mobile, though we try to make things consistent as quickly as\n    possible.\n\n  .. toctree::\n    :maxdepth: 2\n\n    intro/intro\n    start/start\n    api/api\n    development/development\n```\n\n----------------------------------------\n\nTITLE: Python Package Dependencies with Version Pinning\nDESCRIPTION: Detailed package requirements list with exact versions, SHA256 hashes for verification, and dependency relationships specified using pip requirements format. Each package includes comments indicating which other packages depend on it.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/tools/base/requirements.txt#2025-04-23_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\n--hash=sha256:c3702b6d3dd8c7abc1afa565d7e63d53a1d0bd86cdc24edd75470f4de499cfcc\n# via cffi\npyflakes==3.2.0 \\\n    --hash=sha256:1c61603ff154621fb2a9172037d84dca3500def8c8b630657d1701f026f8af3f \\\n    --hash=sha256:84b5be138a2dfbb40689ca07e2152deb896a65c3a3e24c251c5c62489568074a\n    # via flake8\npygithub==2.6.1 \\\n    --hash=sha256:6f2fa6d076ccae475f9fc392cc6cdbd54db985d4f69b8833a28397de75ed6ca3 \\\n    --hash=sha256:b5c035392991cca63959e9453286b41b54d83bf2de2daa7d7ff7e4312cebf3bf\n    # via -r requirements.in\n```\n\n----------------------------------------\n\nTITLE: RST Documentation Tree Structure for Envoy Getting Started\nDESCRIPTION: A reStructuredText (RST) table of contents tree that links to core Envoy documentation sections including the API documentation, building instructions, and a hello world example.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/mobile/docs/root/start/start.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _start:\n\nGetting Started\n===============\n\n.. toctree::\n  :maxdepth: 2\n\n  ../api/api\n  building/building\n  examples/hello_world\n```\n\n----------------------------------------\n\nTITLE: Building Debug Version of Envoy\nDESCRIPTION: Command to build a debug version of the Envoy binary\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/ci/README.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n./ci/run_envoy_docker.sh './ci/do_ci.sh debug.server_only'\n```\n\n----------------------------------------\n\nTITLE: Configuring Table of Contents for Dlb Connection Balancer Documentation in RST\nDESCRIPTION: A Sphinx toctree directive that organizes and includes all documentation files for the Dlb connection balancer feature from the specified directory path. The directive uses glob pattern matching to include all files and sets a maximum depth of 2 for the document hierarchy.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/api-v3/config/contrib/dlb/dlb.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n  :glob:\n  :maxdepth: 2\n\n  ../../../extensions/network/connection_balance/dlb/v3alpha/*\n```\n\n----------------------------------------\n\nTITLE: Downloading LLVM Source Tarball\nDESCRIPTION: Downloads the LLVM project source archive for version 11.0.1 using `curl` and extracts it using `tar`. This is a prerequisite step for building a local TSAN-instrumented libc++.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/bazel/README.md#2025-04-23_snippet_34\n\nLANGUAGE: bash\nCODE:\n```\ncurl -sSfL \"https://github.com/llvm/llvm-project/archive/llvmorg-11.0.1.tar.gz\" | tar zx\n```\n\n----------------------------------------\n\nTITLE: Configuring Toctree for Envoy Extensions Documentation in reStructuredText\nDESCRIPTION: This snippet sets up a table of contents (toctree) for Envoy extensions documentation. It uses glob pattern matching to include all files in the 'v3' subdirectory and sets the maximum depth to 2 levels.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/api-v3/data/dns/dns.rst#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n  :glob:\n  :maxdepth: 2\n\n  v3/*\n```\n\n----------------------------------------\n\nTITLE: Example Hyperscan Build Error Log on Proxmox (Text)\nDESCRIPTION: Displays a sample error output encountered during the build process, specifically when compiling the Hyperscan dependency. The error indicates a failure because the required SSSE3 CPU instruction set is unavailable, a common issue on Proxmox virtual machines using the default 'kvm64' CPU type.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/tools/vscode/README.md#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nERROR: /workspaces/envoy/contrib/hyperscan/matching/input_matchers/source/BUILD:21:12: Foreign Cc - CMake: Building hyperscan failed: (Exit 1): bash failed: error executing command /bin/bash -c bazel-out/k8-fastbuild/bin/contrib/hyperscan/matching/input_matchers/source/hyperscan_foreign_cc/wrapper_build_script.sh\n\n......\n\n-- Performing Test HAVE_SSSE3\n-- Performing Test HAVE_SSSE3 - Failed\n-- Performing Test HAVE_AVX2\n-- Performing Test HAVE_AVX2 - Failed\n-- Performing Test HAVE_AVX512\n-- Performing Test HAVE_AVX512 - Failed\n-- Building without AVX2 support\n-- Building without AVX512 support\nCMake Error at cmake/arch.cmake:108 (message):\n  A minimum of SSSE3 compiler support is required\n\n......\n```\n\n----------------------------------------\n\nTITLE: Declaring Envoy Dynamic Modules Rust SDK Dependency in Cargo.toml (TOML)\nDESCRIPTION: This TOML snippet shows how to add the Envoy Dynamic Modules Rust SDK as a dependency in a Rust project's `Cargo.toml` file. It specifies fetching the SDK directly from the Envoy GitHub repository using either a version tag (`tag = \"vX.Y.Z\"`) or a specific commit hash (`rev = \"abcdef\"`), as the crate references local ABI headers and is intended for direct Git usage rather than registry publication.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/source/extensions/dynamic_modules/sdk/rust/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\nenvoy-proxy-dynamic-modules-rust-sdk = { git = \"https://github.com/envoyproxy/envoy\", tag = \"vX.Y.Z\" }\n# Or, you can use a specific commit instead of a tag:\n# envoy-proxy-dynamic-modules-rust-sdk = {  git = \"https://github.com/envoyproxy/envoy\", rev = \"abcdef\" }\n```\n\n----------------------------------------\n\nTITLE: Setting Up Upstream Cluster for Header-Based Routing in Envoy (YAML)\nDESCRIPTION: This YAML snippet shows how to configure an upstream Envoy cluster to recognize and utilize dynamic metadata set by the Header-To-Metadata filter. The configuration aligns the cluster endpoints to correspond to potential values of the 'x-version' header, facilitating targeted routing based on dynamic metadata. Dependencies include a properly defined Envoy cluster and dynamic metadata support. The cluster should match endpoint subsets as set by the earlier filter.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/other_protocols/thrift_filters/header_to_metadata_filter.rst#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n  37: clusters:\n  38:   - name: some_cluster\n  39:     connect_timeout: 1s\n  40:     type: strict_dns\n  41:     lb_policy: ROUND_ROBIN\n  42:     load_assignment:\n  43:       cluster_name: some_cluster\n  44:       endpoints:\n  45:         - lb_endpoints:\n  46:             # Endpoints grouped by metadata\n  47:             ...\n```\n\n----------------------------------------\n\nTITLE: Example Membership Request Email for Envoy Distributors List\nDESCRIPTION: A template for requesting membership to the cncf-envoy-distributors-announce mailing list, demonstrating how to address each criterion in the application.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/SECURITY.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```\nTo: envoy-security@googlegroups.com\nSubject: Seven-Corp Membership to cncf-envoy-distributors-announce\n\nBelow are each criterion and why I think we, Seven-Corp, qualify.\n\n> 1. Be an actively maintained distribution of Envoy components OR offer Envoy as a publicly\n     available service in which the product clearly states that it is built on top of Envoy OR\n     be a well known end user of sufficient size, scale, and impact to make your\n     inclusion worthwhile.\n\nWe distribute the \"Seven\" distribution of Envoy [link]. We have been doing\nthis since 1999 before proxies were even cool.\n\nOR\n\nWe use Envoy for our #1 rated cat video service and have 40 billion MAU, proxying 40 trillion^2 RPS\nthrough Envoy at the edge. Secure cat videos are our top priority. We also contribute a lot to the Envoy\ncommunity by implementing features, not making Matt ask for documentation or tests, and writing blog\nposts about efficient Envoy cat video serving.\n\n> 2. Have a user or customer base not limited to your own organization. Please specify an\n>    approximate size of your user or customer base, including the number of\n>    production deployments.\n\nOur user base spans of the extensive \"Seven\" community. We have a slack and\nGitHub repos and mailing lists where the community hangs out. We have ~2000\ncustomers, of which approximately 400 are using Seven in production. [links]\n\n> 3. Have a publicly verifiable track record up to present day of fixing security\n     issues.\n\nWe announce on our blog all upstream patches we apply to \"Seven.\" [link to blog\nposts]\n\n> 4. Not be a downstream or rebuild of another distribution. If you offer Envoy as a publicly\n>    available infrastructure or platform service, this condition does not need to apply.\n\nThis does not apply, \"Seven\" is a unique snowflake distribution.\n\n> 5. Be a participant and active contributor in the community.\n\nOur members, Acidburn, Cereal, and ZeroCool are outstanding members and are well\nknown throughout the Envoy community. Especially for their contributions\nin hacking the Gibson.\n\n> 6. Accept the Embargo Policy that is outlined above. You must\n     have a way to privately stage and validate your updates that does not violate\n     the embargo.\n\nWe accept.\n\n> 7. Be willing to contribute back as outlined above.\n\nWe are definitely willing to help!\n\n> 8. Be able to perform a security release of your product within a three week window from candidate fix\n     patch availability.\n\nWe affirm we can spin out new security releases within a 2 week window.\n\n> 9. Have someone already on the list vouch for the person requesting membership\n>    on behalf of your distribution.\n\nCrashOverride will vouch for the \"Seven\" distribution joining the distribution list.\n\n> 10. Nominate an e-mail alias or list for your organization to receive updates. This should not be\n      an individual user address, but instead a list that can be maintained by your organization as\n      individuals come and go. A good example is envoy-security@seven.com, a bad example is\n      acidburn@seven.com. You must accept the invite sent to this address or you will not receive any\n      e-mail updates. This e-mail address will be shared with the Envoy community.\n\nenvoy-security@seven.com\n```\n```\n\n----------------------------------------\n\nTITLE: Example x-language Header Output in YAML\nDESCRIPTION: This snippet shows the resulting x-language header that the filter sets based on matching the client's language preference with the supported languages.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/language_filter.rst#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nx-language: fr\n```\n\n----------------------------------------\n\nTITLE: Defining a Parameter with Key-Value Attribute\nDESCRIPTION: This snippet shows a string format likely used for configuration within Envoy. It defines an item named 'name' followed by a semicolon and a key-value pair 'a=b'. This pattern could represent a metric, filter, or other configurable entity and its attributes.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/test/extensions/filters/http/cdn_loop/parser_corpus/ParseCdnInfo-SingleParameter.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nname;a=b\n```\n\n----------------------------------------\n\nTITLE: Creating a Table of Contents for Advanced Envoy Proxy Topics in reStructuredText\nDESCRIPTION: This reStructuredText directive creates a table of contents with a maximum depth of 2 levels, linking to various advanced Envoy Proxy documentation topics including data sharing between filters, attributes, matching, Wasm, and dynamic modules.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/intro/arch_overview/advanced/advanced.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n  :maxdepth: 2\n\n  data_sharing_between_filters\n  attributes\n  matching/matching\n  wasm\n  dynamic_modules\n```\n\n----------------------------------------\n\nTITLE: Building Envoy with CI Docker on Windows\nDESCRIPTION: Command to build Envoy using the CI Docker image on Windows systems with Docker containers enabled.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/bazel/README.md#2025-04-23_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\n./ci/run_envoy_docker.sh './ci/windows_ci_steps.sh'\n```\n\n----------------------------------------\n\nTITLE: Defining Python Package Dependencies\nDESCRIPTION: This snippet shows how package dependencies are specified in a requirements file. Each line includes the package name, version, and hash values for verification.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/tools/base/requirements.txt#2025-04-23_snippet_7\n\nLANGUAGE: Text\nCODE:\n```\nslack-sdk==3.35.0 \\\n    --hash=sha256:00933d171fbd8a068b321ebb5f89612cc781d3183d8e3447c85499eca9d865be \\\n    --hash=sha256:8183b6cbf26a0c1e2441478cd9c0dc4eef08d60c1394cfdc9a769e309a9b6459\n    # via -r requirements.in\n```\n\n----------------------------------------\n\nTITLE: Weight Calculation Formula for Slow Start Mode\nDESCRIPTION: Mathematical formula showing how new weight is calculated during slow start mode using weight, minimum weight percent, time factor, and aggression parameters.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/intro/arch_overview/upstream/load_balancing/slow_start.rst#2025-04-23_snippet_0\n\nLANGUAGE: math\nCODE:\n```\nNewWeight = {Weight}*{max(MinWeightPercent,{TimeFactor}^\\frac{1}{Aggression})}\n```\n\n----------------------------------------\n\nTITLE: Configuring Table of Contents for Envoy Access Logs in reStructuredText\nDESCRIPTION: This snippet sets up a table of contents for Envoy access log documentation using reStructuredText directives. It includes all files in the v3 subdirectory and sets a maximum depth of 2 for the table structure.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/api-v3/data/accesslog/accesslog.rst#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n  :glob:\n  :maxdepth: 2\n\n  v3/*\n```\n\n----------------------------------------\n\nTITLE: Configuring toctree for Custom Response Policies in Sphinx RST\nDESCRIPTION: A Sphinx toctree directive that globs all custom response policy documentation files. It searches for documentation in the extensions/http/custom_response directory, with a maximum depth of 2 levels.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/api-v3/config/http/custom_response.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n  :glob:\n  :maxdepth: 2\n\n  ../../extensions/http/custom_response/*/v3/*\n```\n\n----------------------------------------\n\nTITLE: Email Template: Security Advisory for Production Feature\nDESCRIPTION: Template for issuing security advisories about features accidentally marked as production-ready, with no immediate fix provided.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/security/email-templates.md#2025-04-23_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\nSubject: Security advisory\nTo: envoy-security-announce@googlegroups.com\nCc: envoy-announce@googlegroups.com, envoy-security@googlegroups.com, envoy-maintainers@googlegroups.com\n\nHello Envoy Community,\n\nThe Envoy securitty team would like to announce a security advisory for a feature introduced in\n$ENVOYRELEASE. As this is a security advisory for a feature not considered production ready that may\nhave been labeled as such, no fix is provided and the advice is to not make use of this feature in\na production capacity until future hardening has been done.\n\n$DEFECTSSUMMARY\n\nThe CVSS score for this is [$CVSSSTRING]($CVSSURL).\n\n**Thank you**\n\nThank you to $REPORTER, $DEVELOPERS for the coordination in making this release.\n\nThanks,\n\n$PERSON (on behalf of the Envoy security team and maintainers)\n```\n\n----------------------------------------\n\nTITLE: Suppressing Memcheck Conditional Jump Error in re2::SparseSet::contains\nDESCRIPTION: This Valgrind suppression entry ignores 'Memcheck:Cond' (conditional jump depends on uninitialised value) errors detected within the `re2::SparseSet<int>::contains(int)` function. This indicates a known or accepted pattern where conditional logic might depend on uninitialized memory within this specific re2 library function.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/tools/debugging/valgrind-suppressions.txt#2025-04-23_snippet_1\n\nLANGUAGE: valgrind_suppression\nCODE:\n```\n{\n   re2 cond-jump failure\n   Memcheck:Cond\n   fun:_ZNK3re210SparseSetTIvE8containsEi\n   ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Submodule for Custom Envoy Branch\nDESCRIPTION: Git submodule configuration that points to a custom Envoy branch for testing changes. This should be modified in the .gitmodules file of the Envoy Mobile repository.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/mobile/docs/root/development/testing/custom_envoy.rst#2025-04-23_snippet_0\n\nLANGUAGE: git\nCODE:\n```\n[submodule \"envoy\"]\n  path = envoy\n  url = https://github.com/[githubid]/envoy.git\n  branch = [branch name]\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Usage in Shell Tests\nDESCRIPTION: Shows the proper environment variables to use for path construction in shell tests, with TEST_TMPDIR for writable temp space and TEST_SRCDIR for read-only test inputs.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/STYLE.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n${TEST_TMPDIR}, ${TEST_SRCDIR}\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents for Access Log Formatters in reStructuredText\nDESCRIPTION: This snippet defines a table of contents for access log formatter configurations. It uses the toctree directive to include all relevant files from the extensions/formatter directory.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/api-v3/config/formatter/formatter.rst#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n  :glob:\n  :maxdepth: 2\n\n  ../../extensions/formatter/*/v3/*\n```\n\n----------------------------------------\n\nTITLE: RST TocTree Configuration for HTTP Header Formatters\nDESCRIPTION: ReStructuredText directive that specifies documentation organization for HTTP header formatter extensions. Uses glob pattern to include all v3 documentation under the extensions/http/header_formatters directory.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/api-v3/config/http/header_formatters.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n  :glob:\n  :maxdepth: 2\n\n  ../../extensions/http/header_formatters/*/v3/*\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Package Dependencies with Hash Verification\nDESCRIPTION: This snippet shows how to specify Python package dependencies in a requirements file, including version numbers and SHA256 hash values for security verification. It demonstrates the format for multiple packages.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/tools/base/requirements.txt#2025-04-23_snippet_4\n\nLANGUAGE: Text\nCODE:\n```\norjson==3.10.16 \\\n    --hash=sha256:01e0d22f06c81e6c435723343e1eefc710e0510a35d897856766d475f2a15687 \\\n    --hash=sha256:02c6279016346e774dd92625d46c6c40db687b8a0d685aadb91e26e46cc33e1e \\\n    --hash=sha256:0338356b3f56d71293c583350af26f053017071836b07e064e92819ecf1aa055\n\npackaging==24.1 \\\n    --hash=sha256:026ed72c8ed3fcce5bf8950572258698927fd1dbda10a5e981cdf0ac37f4f002 \\\n    --hash=sha256:5b8f2217dbdbd2f7f384c41c628544e6d52f2d0f53c6d0c3ea61aa5d1d7ff124\n\npathspec==0.12.1 \\\n    --hash=sha256:a0d503e138a4c123b27490a4f7beda6a01c6f288df0e4a8b79c7eb0dc7b4cc08 \\\n    --hash=sha256:a482d51503a1ab33b1c67a6c3813a26953dbdc71c31dacaef9a838c4e29f5712\n```\n\n----------------------------------------\n\nTITLE: RocketMQ Proxy Stats CSV Configuration\nDESCRIPTION: CSV table defining statistics metrics for the RocketMQ proxy filter. Each metric includes a name, type, and description for monitoring proxy operations.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/listeners/network_filters/rocketmq_proxy_filter.rst#2025-04-23_snippet_0\n\nLANGUAGE: csv\nCODE:\n```\nName, Type, Description\nrequest, Counter, Total requests\nrequest_decoding_error, Counter, Total decoding error requests\nrequest_decoding_success, Counter, Total decoding success requests\nresponse, Counter, Total responses\nresponse_decoding_error, Counter, Total decoding error responses\nresponse_decoding_success, Counter, Total decoding success responses\nresponse_error, Counter, Total error responses\nresponse_success, Counter, Total success responses\nheartbeat, Counter, Total heartbeat requests\nunregister, Counter, Total unregister requests\nget_topic_route, Counter, Total getting topic route requests\nsend_message_v1, Counter, Total sending message v1 requests\nsend_message_v2, Counter, Total sending message v2 requests\npop_message, Counter, Total poping message requests\nack_message, Counter, Total acking message requests\nget_consumer_list, Counter, Total getting consumer list requests\nmaintenance_failure, Counter, Total maintenance failure\nrequest_active, Gauge, Total active requests\nsend_message_v1_active, Gauge, Total active sending message v1 requests\nsend_message_v2_active, Gauge, Total active sending message v2 requests\npop_message_active, Gauge, Total active poping message active requests\nget_topic_route_active, Gauge, Total active geting topic route requests\nsend_message_pending, Gauge, Total pending sending message requests\npop_message_pending, Gauge, Total pending poping message requests\nget_topic_route_pending, Gauge, Total pending geting topic route requests\ntotal_pending, Gauge, Total pending requests\nrequest_time_ms, Histogram, Request time in milliseconds\n```\n\n----------------------------------------\n\nTITLE: Running Built Envoy Binary\nDESCRIPTION: Command to run the built Envoy binary with a configuration file.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/bazel/README.md#2025-04-23_snippet_23\n\nLANGUAGE: console\nCODE:\n```\n$(bazel info bazel-genfiles)/source/exe/envoy-static --config-path /path/to/your/envoy/config.yaml\n```\n\n----------------------------------------\n\nTITLE: Making Python Tool Executable for Direct Use - Console\nDESCRIPTION: Sets executable permissions on `mytool.py` to allow direct CLI usage, then shows how to invoke it with a package name. Prerequisites: correct dependencies already installed locally. Expected output: YAML for the specified package printed to stdout.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/tools/README.md#2025-04-23_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n$ chmod +x tools/sometools/mytool.py\n$ ./tools/sometools/mytool.py PACKAGENAME\n```\n\n----------------------------------------\n\nTITLE: Release Command Git Show Output\nDESCRIPTION: Displays the git commit changes after running the release command.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/maintainer/RELEASE.md#2025-04-23_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n# git show --compact-summary\ncommit 3bc20808c31ecde39c9b4b03d6bdeb52344ae667 (HEAD -> project-release)\nAuthor: Your Name <you@example.com>\nDate:   Wed May 11 13:11:51 2022 +0000\n\n    repo: Release `1.23.0`\n\n    Signed-off-by: Your Name <you@example.com>\n\n VERSION.txt             | 2 +-\n changelogs/current.yaml | 4 ++--\n 2 files changed, 3 insertions(+), 3 deletions(-)\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx toctree for External Processing Extensions Documentation\nDESCRIPTION: A Sphinx toctree directive that links to all external processing extension documentation files within the Envoy repository. The directive uses glob pattern matching to recursively include all documentation up to a depth of 2 levels.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/api-v3/config/http/ext_proc.rst#2025-04-23_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. toctree::\n   :glob:\n   :maxdepth: 2\n\n   ../../extensions/http/ext_proc/*/*/v3/*\n```\n\n----------------------------------------\n\nTITLE: Defining toctree for String Matcher Extensions in reStructuredText\nDESCRIPTION: This snippet defines a toctree directive in reStructuredText to include all v3 API documentation files for string matcher extensions in Envoy Proxy. It uses glob patterns to automatically include relevant files from the extensions directory.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/api-v3/config/string_matcher/string_matcher.rst#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n  :glob:\n  :maxdepth: 2\n\n  ../../extensions/string_matcher/*/v3/*\n```\n\n----------------------------------------\n\nTITLE: Creating Version History Redirect in reStructuredText\nDESCRIPTION: This snippet creates a simple reStructuredText document that redirects users to the new location of the version history documentation. It includes a header, a brief explanation, and a link to the new page.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/intro/version_history.rst#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\nVersion History\n===============\n\nThe changes for each version have moved :ref:`here <version_history>`.\n\n.. This page only exists because previous versions of Envoy link here.\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents for Envoy Health Checkers (reStructuredText)\nDESCRIPTION: This reStructuredText snippet uses the 'toctree' directive to automatically generate a table of contents linking to detailed documentation pages for specific Envoy health checkers. It includes links to 'redis' and 'thrift' health checker configurations, limiting the depth of the generated table to 2 levels.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/upstream/health_checkers/health_checkers.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n  :maxdepth: 2\n\n  redis\n  thrift\n```\n\n----------------------------------------\n\nTITLE: Organizing SIP Proxy Documentation with toctree in reStructuredText\nDESCRIPTION: Uses reStructuredText's toctree directive to organize documentation links for various SIP proxy components in the Envoy project. The directive includes glob patterns to include all files related to SIP proxy router, TRA (Traffic Routing and Analysis), and core proxy functionality in the v3alpha API directory.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/api-v3/config/contrib/sip/sip.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n  :glob:\n  :maxdepth: 2\n\n  ../../../extensions/filters/network/sip_proxy/router/v3alpha/*\n  ../../../extensions/filters/network/sip_proxy/tra/v3alpha/*\n  ../../../extensions/filters/network/sip_proxy/v3alpha/*\n```\n\n----------------------------------------\n\nTITLE: Defining Sphinx Documentation Tree Structure for Envoy Filters in RST\nDESCRIPTION: This code snippet defines a Sphinx documentation toctree directive that includes filter documentation organized by protocol type. It uses the glob option to automatically include all matching files and sets a maximum depth of 2 for the document hierarchy.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/api-v3/config/filter/filter.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n  :glob:\n  :maxdepth: 2\n\n  listener/listener\n  network/network\n  udp/udp\n  udp/session\n  http/http\n  dubbo/dubbo\n  thrift/thrift\n  generic/generic\n```\n\n----------------------------------------\n\nTITLE: Configuring Note Suppressions\nDESCRIPTION: ProGuard rules to suppress notes for Android support, Kotlin, and Android build tools\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/mobile/library/proguard.txt#2025-04-23_snippet_1\n\nLANGUAGE: proguard\nCODE:\n```\n-dontnote android.support.**\n-dontnote kotlin.**\n-dontnote com.google.devtools.build.android.**\n```\n\n----------------------------------------\n\nTITLE: Running Bazel Test with Enhanced nghttp2 Logging\nDESCRIPTION: Runs a specific integration test (`//test/integration:protocol_integration_test`) with streamed output. It sets the Envoy log level to trace (`--test_arg=\"-l trace\"`) and enables verbose nghttp2 trace logs by setting the `ENVOY_NGHTTP2_TRACE` environment variable (`--test_env=\"ENVOY_NGHTTP2_TRACE=\"`).\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/bazel/README.md#2025-04-23_snippet_40\n\nLANGUAGE: bash\nCODE:\n```\nbazel test //test/integration:protocol_integration_test --test_output=streamed \\\n  --test_arg=\"-l trace\" --test_env=\"ENVOY_NGHTTP2_TRACE=\"\n```\n\n----------------------------------------\n\nTITLE: Defining Python Package Dependencies with Hash Verification\nDESCRIPTION: This snippet shows how to specify a Python package dependency with version pinning and SHA256 hash verification. It lists the package name, version, and multiple hash values for different distributions of the package.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/tools/base/requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\naioquic==1.2.0 \\\n    --hash=sha256:1de513772fd04ff38028fdf748a9e2dec33d7aa2fbf67fda3011d9a85b620c54 \\\n    --hash=sha256:2466499759b31ea4f1d17f4aeb1f8d4297169e05e3c1216d618c9757f4dd740d \\\n    --hash=sha256:358e2b9c1e0c24b9933094c3c2cf990faf44d03b64d6f8ff79b4b3f510c6c268\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Documentation Tree for Network Filters\nDESCRIPTION: RST configuration block that sets up a documentation tree (toctree) for Envoy network filters. Uses glob pattern matching to include all v3 network filter documentation files from the extensions directory.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/api-v3/config/filter/network/network.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n  :glob:\n  :maxdepth: 2\n\n  ../../../extensions/filters/network/*/v3*/*\n```\n\n----------------------------------------\n\nTITLE: Disabling Lua HTTP Filter for Specific Routes in YAML\nDESCRIPTION: An example of disabling the Lua HTTP filter for specific routes using LuaPerRoute configuration in Envoy's YAML configuration.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/lua_filter.rst#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nroutes:\n- match:\n    prefix: \"/admin\"\n  route:\n    cluster: admin_cluster\n  typed_per_filter_config:\n    envoy.filters.http.lua:\n      \"@type\": type.googleapis.com/envoy.extensions.filters.http.lua.v3.LuaPerRoute\n      disabled: true\n```\n\n----------------------------------------\n\nTITLE: Defining Sphinx toctree for Generic Filters Documentation in RST\nDESCRIPTION: A Sphinx reStructuredText directive that creates a table of contents tree for generic proxy filter documentation. The directive uses glob pattern matching to include all v3 files related to generic proxy network filters from the extensions directory.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/api-v3/config/filter/generic/generic.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n  :glob:\n  :maxdepth: 2\n\n  ../../../extensions/filters/network/generic_proxy/**/v3/*\n```\n\n----------------------------------------\n\nTITLE: Retrieving OIDs from Local Certificate in Lua\nDESCRIPTION: Returns the string representation of OIDs from the local certificate as a table. Returns an empty table if there is no local certificate or no OIDs.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/lua_filter.rst#2025-04-23_snippet_60\n\nLANGUAGE: lua\nCODE:\n```\ndownstreamSslConnection:oidsLocalCertificate()\n```\n\n----------------------------------------\n\nTITLE: Debugging Bazel Build Execution\nDESCRIPTION: Command to enable verbose output logging of Bazel build execution steps.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/bazel/README.md#2025-04-23_snippet_47\n\nLANGUAGE: shell\nCODE:\n```\nbazel build -s envoy\n```\n\n----------------------------------------\n\nTITLE: Registering Upstream Filter Factory in Envoy (C++)\nDESCRIPTION: Uses the Envoy `REGISTER_FACTORY` macro to register the aliased filter factory (`UpstreamMyFilterFactory`) with the Envoy server configuration as an upstream HTTP filter. This makes the filter available for configuration in the upstream filter chain. This code should be added to the filter's configuration implementation file (e.g., `config.cc`) and requires the corresponding alias definition from the header.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/source/docs/upstream_filters.md#2025-04-23_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\nREGISTER_FACTORY(UpstreamMyFilterFactory, Server::Configuration::UpstreamHttpFilterConfigFactory);\n```\n\n----------------------------------------\n\nTITLE: Configuring toctree for UDP Session Filters Documentation in reStructuredText\nDESCRIPTION: A reStructuredText directive that configures a table of contents tree (toctree) to include all UDP proxy session filter documentation files. The glob pattern targets version 3 of the API in the extensions directory.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/api-v3/config/filter/udp/session.rst#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n  :glob:\n  :maxdepth: 2\n\n  ../../../extensions/filters/udp/udp_proxy/session/*/v3/*\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents for Envoy Tools in reStructuredText\nDESCRIPTION: This code snippet defines a table of contents for the Envoy Proxy tools documentation using reStructuredText syntax. It sets the maximum depth to 2 and lists the various tool-specific documentation files.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/operations/tools/tools.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _start_tools:\n\nTools\n=====\n\n.. toctree::\n  :maxdepth: 2\n\n  config_generator\n  config_load_check_tool\n  route_table_check_tool\n  schema_validator_check_tool\n```\n\n----------------------------------------\n\nTITLE: RST Table of Contents for Stat Sinks Documentation\nDESCRIPTION: ReStructuredText directive defining a table of contents for stat sink documentation, including paths to Graphite/StatsD, OpenTelemetry and Wasm sink documentation.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/api-v3/config/stat_sinks/stat_sinks.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n  :glob:\n  :maxdepth: 2\n\n  ../../extensions/stat_sinks/graphite_statsd/v3/*\n  ../../extensions/stat_sinks/open_telemetry/v3/*\n  ../../extensions/stat_sinks/wasm/v3/*\n```\n\n----------------------------------------\n\nTITLE: HTTP Matching Input Function as Descriptor Producer in YAML for Envoy Proxy\nDESCRIPTION: This YAML configuration demonstrates how to use HTTP matching input functions as descriptor producers, specifically using a request header value.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/rate_limit_filter.rst#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n- extension:\n    name: custom\n    typed_config:\n      \"@type\": type.googleapis.com/envoy.extensions.rate_limit_descriptors.expr.v3.Descriptor\n      descriptor_key: custom\n      text: request.headers['x-header-name']\n```\n\n----------------------------------------\n\nTITLE: Generating Xcode Project for Envoy Mobile\nDESCRIPTION: Commands to generate and open an Xcode project for Envoy Mobile development using rules_xcodeproj.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/mobile/docs/root/development/debugging/ios_local.rst#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./bazelw run //:xcodeproj\n```\n\n----------------------------------------\n\nTITLE: Preserving Envoy Mobile Core Classes\nDESCRIPTION: ProGuard rules to keep essential Envoy Mobile classes including utilities, engine types, and implementations\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/mobile/library/proguard.txt#2025-04-23_snippet_3\n\nLANGUAGE: proguard\nCODE:\n```\n-keep, includedescriptorclasses class io.envoyproxy.envoymobile.utilities.AndroidNetworkLibrary {\n   <methods>;\n}\n\n-keep, includedescriptorclasses class io.envoyproxy.envoymobile.utilities.AndroidCertVerifyResult {\n   <methods>;\n}\n\n-keep, includedescriptorclasses class io.envoyproxy.envoymobile.engine.types.EnvoyEventTracker {\n   <methods>;\n}\n\n-keep, includedescriptorclasses class io.envoyproxy.envoymobile.engine.types.EnvoyOnEngineRunning {\n   <methods>;\n}\n\n-keep, includedescriptorclasses class io.envoyproxy.envoymobile.engine.EnvoyHTTPFilterCallbacksImpl {\n   <methods>;\n}\n\n-keep, includedescriptorclasses class io.envoyproxy.envoymobile.engine.JvmBridgeUtility {\n   <methods>;\n}\n\n-keep, includedescriptorclasses class io.envoyproxy.envoymobile.engine.JvmFilterContext {\n   <methods>;\n}\n\n-keep, includedescriptorclasses class io.envoyproxy.envoymobile.engine.JvmFilterFactoryContext {\n   <methods>;\n}\n\n-keep, includedescriptorclasses class io.envoyproxy.envoymobile.engine.JvmKeyValueStoreContext {\n   <methods>;\n}\n\n-keep, includedescriptorclasses class io.envoyproxy.envoymobile.engine.JvmStringAccessorContext {\n   <methods>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents for HTTP TCP Bridge Documentation in RST\nDESCRIPTION: This RST code snippet defines a table of contents for HTTP TCP Bridge documentation in Envoy Proxy. It uses the toctree directive to include all related configuration files from the specified directory.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/api-v3/config/contrib/http_tcp_bridge/http_tcp_bridge.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n  :glob:\n  :maxdepth: 2\n\n  ../../../extensions/upstreams/http/tcp/golang/v3alpha/*\n```\n\n----------------------------------------\n\nTITLE: Enabling a Disabled Filter for Specific Routes\nDESCRIPTION: Example showing how to enable a filter that's disabled by default for a specific route by providing valid route-specific configuration for that filter.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/intro/arch_overview/http/http_filters.rst#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ntyped_per_filter_config:\n  lua:\n    \"@type\": type.googleapis.com/envoy.extensions.filters.http.lua.v3.LuaPerRoute\n    name: my_lua_script\n```\n\n----------------------------------------\n\nTITLE: Creating Table of Contents in reStructuredText for Envoy Proxy Documentation\nDESCRIPTION: A reStructuredText directive that creates a table of contents with maxdepth of 2 for various operations and configuration topics in the Envoy Proxy documentation.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/intro/arch_overview/operations/operations.rst#2025-04-23_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. toctree::\n  :maxdepth: 2\n\n  dynamic_configuration\n  init\n  draining\n  runtime\n  hot_restart\n  overload_manager\n```\n\n----------------------------------------\n\nTITLE: Defining Python Dependencies with pip_install in Bazel - Starlark\nDESCRIPTION: Defines a Bazel target to install Python dependencies for the new `sometools` tool directory using `rules_python`'s `pip_install`. This ensures the Python dependencies are fetched from a properly pinned `requirements.txt` (with hashes for integrity). Key parameters: `name`, specifying the Bazel external repo; `requirements`, the path to the requirements file; `extra_pip_args` to enforce hash checking. Dependencies: Bazel, the rules_python extension, and a defined `requirements.txt` file.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/tools/README.md#2025-04-23_snippet_0\n\nLANGUAGE: starlark\nCODE:\n```\n    pip_install(\n        name = \"sometools_pip3\",\n        requirements = \"@envoy//tools/sometools:requirements.txt\",\n        extra_pip_args = [\"--require-hashes\"],\n    )\n```\n\n----------------------------------------\n\nTITLE: Building Envoy with Debug Options in Bash\nDESCRIPTION: Builds Envoy with debug options enabled for better logging visibility during testing.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/configs/original-dst-cluster/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbazel build //source/exe:envoy-static -c dbg\n```\n\n----------------------------------------\n\nTITLE: Executing Release Command Example\nDESCRIPTION: Shows the output of running the release command which removes -dev suffix and updates changelog date.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/maintainer/RELEASE.md#2025-04-23_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n# bazel run @envoy_repo//:release\n...\nProjectRunner SUCCESS [version] 1.23.0\nProjectRunner SUCCESS [changelog] current: May 11, 2022\nProjectRunner SUCCESS [changelog] up to date\nProjectRunner SUCCESS [inventory] up to date\nProjectRunner INFO [git] add: VERSION.txt\nProjectRunner INFO [git] add: changelogs/current.yaml\nProjectRunner INFO [git] commit: \"repo: Release `1.23.0`\"\nProjectRunner NOTICE Release created (1.23.0): May 11, 2022\n\n```\n\n----------------------------------------\n\nTITLE: Creating Directory and Requirements File for New Tool - Console\nDESCRIPTION: Creates a new directory `tools/sometools` and initializes an empty `requirements.txt` for Python dependencies. Prerequisites: access to the command line. No arguments or parameters; simply runs the necessary commands to begin defining the Python environment for the new tool.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/tools/README.md#2025-04-23_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ mkdir tools/sometools\n$ touch tools/sometools/requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Executing the Route Check Tool and Viewing Coverage in Bash\nDESCRIPTION: This Bash command shows how to run the Envoy Route Table Check Tool (`router_check_tool`) built with Bazel, specifying the Envoy configuration path (`--config-path`) and the test definition path (`--test-path`). The output displays the calculated route coverage percentage based on the executed tests.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/operations/tools/router_check.rst#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n> bazel-bin/test/tools/router_check/router_check_tool --config-path ... --test-path ...\nCurrent route coverage: 0.0744863\n```\n\n----------------------------------------\n\nTITLE: Generating Hash-Pinned Dependencies with pip-compile - Console\nDESCRIPTION: Installs `pip-tools` and runs `pip-compile --generate-hashes` to update the `requirements.txt` file, generating all hashes for transitive dependencies. Dependencies: pip, pip-tools installed in the local environment. This ensures all dependencies are pinned with hashes for security and reproducibility. Output: a fully hashed and versioned requirements lockfile.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/tools/README.md#2025-04-23_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ pip install pip-tools\n$ pip-compile --generate-hashes tools/sometools/requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Disabling Specific Filters in Route Configuration\nDESCRIPTION: Example showing how to disable a specific filter for certain routes using the FilterConfig object with the disabled field set to true in the per-filter config map.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/intro/arch_overview/http/http_filters.rst#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ntyped_per_filter_config:\n  buffer:\n    \"@type\": type.googleapis.com/envoy.config.route.v3.FilterConfig\n    disabled: true\n```\n\n----------------------------------------\n\nTITLE: Declaring a Bazel Target for an Implementation\nDESCRIPTION: Example of using envoy_cc_library rule to declare a new implementation target in a BUILD file. Shows how to specify source files, headers, and dependencies for an implementation library.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/bazel/DEVELOPER.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nenvoy_cc_library(\n    name = \"bar_lib\",\n    srcs = [\n        \"bar_impl.cc\",\n        \"bar_internal.h\",\n    ],\n    hdrs = [\"bar_impl.h\"],\n    deps = [\n        \":baz_lib\",\n        \"//envoy/foo:bar_interface\",\n        \"//source/common/buffer:buffer_lib\",\n    ],\n)\n```\n\n----------------------------------------\n\nTITLE: Assigning or Declaring Variables (Ambiguous)\nDESCRIPTION: This snippet shows a variable assignment or declaration for 'name', followed by a semicolon and the start of an assignment for 'a'. The exact syntax and purpose depend heavily on the surrounding context or the specific language (e.g., shell script, configuration file format) it belongs to. The value for 'a' is missing.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/test/extensions/filters/http/cdn_loop/parser_corpus/ParseCdnInfo-InvalidParameter.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nname ; a= \n```\n\n----------------------------------------\n\nTITLE: Non-Streaming Proto Message Extraction Output Format\nDESCRIPTION: Example JSON structure showing the dynamic metadata output format for non-streaming gRPC requests and responses. Shows how extracted fields are organized under 'requests' and 'responses' with 'first' messages.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/proto_message_extraction_filter.rst#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"requests\":{\n     \"first\":{\n        \"foo\": \"val_foo1\"\n     }\n  },\n  \"responses\":{\n     \"first\":{\n        \"baz\": \"val_baz1\"\n     }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Pinning setuptools Package with Hash Verification\nDESCRIPTION: Specifies setuptools package version 78.1.0 with SHA256 hash verification for security. The comment indicates this package is considered unsafe in a requirements file but is included via requirements.in.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/tools/base/requirements.txt#2025-04-23_snippet_10\n\nLANGUAGE: plaintext\nCODE:\n```\nsetuptools==78.1.0 \\\n    --hash=sha256:18fd474d4a82a5f83dac888df697af65afa82dec7323d09c3e37d1f14288da54 \\\n    --hash=sha256:3e386e96793c8702ae83d17b853fb93d3e09ef82ec62722e61da5cd22376dcd8\n    # via -r requirements.in\n```\n\n----------------------------------------\n\nTITLE: Suppressing Memcheck new/free Mismatch Warning in free()\nDESCRIPTION: This Valgrind suppression entry ignores 'Memcheck:Free' errors specifically related to `new/free` mismatches originating from the standard `free` function. This aims to eliminate warnings potentially caused by the build toolchain rather than actual code errors.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/tools/debugging/valgrind-suppressions.txt#2025-04-23_snippet_0\n\nLANGUAGE: valgrind_suppression\nCODE:\n```\n{\n  eliminate new/free mismatch warnings altogether, as something in the current toolchain generates this scenario.\n  Memcheck:Free\n  fun:free\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: HTTP/3 Codec Error Details in RST\nDESCRIPTION: ReStructuredText documentation specifying HTTP/3 specific error details and their descriptions, covering header violations, size limits, and stream management issues.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_conn_man/response_code_details.rst#2025-04-23_snippet_3\n\nLANGUAGE: rst\nCODE:\n```\n.. csv-table::\n   :header: Name, Description\n   :widths: 1, 2\n\n    http3.invalid_header_field, One of the HTTP/3 headers was invalid\n    http3.headers_too_large, The size of headers (or trailers) exceeded the configured limits\n    http3.unexpected_underscore, Envoy was configured to drop or reject requests with header keys beginning with underscores.\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Domain Matching in Envoy\nDESCRIPTION: Basic domain configuration that matches only the hostname without port specification. This configuration will match requests to 'www.host.com' but not to 'www.host.com:443'.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/faq/debugging/why_is_my_route_not_found.rst#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndomains:\n  - \"www.host.com\"\n```\n\n----------------------------------------\n\nTITLE: Configuring RST Table of Contents for Envoy Listener Filters\nDESCRIPTION: A reStructuredText (RST) directive that creates a table of contents for listener filter documentation. The directive is configured to include all files matching the specified glob pattern, with a maximum depth of 2 levels.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/api-v3/config/filter/listener/listener.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n  :glob:\n  :maxdepth: 2\n\n  ../../../extensions/filters/listener/*/v3/*\n```\n\n----------------------------------------\n\nTITLE: Creating RST Table of Contents for HTTP Connection Manager Docs\nDESCRIPTION: ReStructuredText markup defining a documentation table of contents for HTTP connection manager configuration topics. Uses toctree directive to organize child pages with max depth of 2.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_conn_man/http_conn_man.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _config_http_conn_man:\n\nHTTP connection manager\n=======================\n\n.. toctree::\n  :maxdepth: 2\n\n  overview\n  route_matching\n  traffic_splitting\n  header_casing\n  headers\n  header_sanitizing\n  local_reply\n  response_code_details\n  stats\n  runtime\n  rds\n  vhds\n```\n\n----------------------------------------\n\nTITLE: Defining RST Table of Contents for Envoy Listeners\nDESCRIPTION: ReStructuredText markup defining the table of contents tree for Envoy listener documentation. The toctree directive sets maximum depth to 2 and includes various listener-related documentation sections.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/listeners/listeners.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _config_listeners:\n\nListeners\n=========\n\n.. toctree::\n  :maxdepth: 2\n\n  overview\n  stats\n  runtime\n  listener_filters/listener_filters\n  network_filters/network_filters\n  udp_filters/udp_filters\n  lds\n```\n\n----------------------------------------\n\nTITLE: Example Accept-Language Header Format in YAML\nDESCRIPTION: This snippet demonstrates the format of an Accept-Language header with multiple language preferences and quality values. It shows how clients can specify their language preferences in order of priority.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/language_filter.rst#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Multiple types, weighted with the quality value syntax:\nAccept-Language: fr-CH, fr;q=0.9, en;q=0.8, *;q=0.5\n```\n\n----------------------------------------\n\nTITLE: Defining Envoy Proxy Services Documentation Structure in reStructuredText\nDESCRIPTION: This snippet outlines the table of contents for Envoy Proxy services documentation. It includes various service categories such as authentication, status, extensions, access logging, health checking, load statistics, metrics, rate limiting, runtime, tapping, and Redis authentication.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/api-v3/service/service.rst#2025-04-23_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\nServices\n========\n\n.. toctree::\n  :glob:\n  :maxdepth: 2\n\n  auth/v3/*\n  status/v3/*\n  extension/v3/*\n  ext_proc/v3/*\n  accesslog/v3/*\n  health/v3/*\n  load_stats/v3/*\n  metrics/v3/*\n  ratelimit/v3/*\n  rate_limit_quota/v3/*\n  runtime/v3/*\n  ../config/tap/v3/*\n  tap/v3/*\n  redis_auth/v3/*\n  network_ext_proc/v3/*\n```\n\n----------------------------------------\n\nTITLE: Defining Thrift Documentation Structure with reStructuredText\nDESCRIPTION: This RST (reStructuredText) code creates a table of contents for Thrift filter documentation, organizing it into a hierarchical structure. It includes router documentation from v2alpha1 and network Thrift proxy filter documentation from v3 versions.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/api-v3/config/filter/thrift/thrift.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n  :glob:\n  :maxdepth: 2\n\n  router/v2alpha1/*\n  ../../../extensions/filters/network/thrift_proxy/**/v3/*\n```\n\n----------------------------------------\n\nTITLE: Example Protobuf Package Structure\nDESCRIPTION: Demonstrates the package naming convention for Envoy APIs, showing how version numbers are incorporated into the package names and directory structure.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/api/API_VERSIONING.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nenvoy.admin.v3alpha\nenvoy.service.trace.v3\napi/envoy/service/trace/v3\n```\n\n----------------------------------------\n\nTITLE: Configuring RST Table of Contents for Development Tools\nDESCRIPTION: A reStructuredText toctree directive that sets up the documentation hierarchy for development tools with a maximum depth of 2 levels, including a link to IntelliJ setup documentation.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/mobile/docs/root/development/tools/tools.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n  :maxdepth: 2\n\n  intellij\n```\n\n----------------------------------------\n\nTITLE: Defining Toctree for UDP Listener Filters in ReStructuredText\nDESCRIPTION: This snippet configures a toctree directive to include documentation for UDP listener filters. It uses glob patterns to automatically include relevant files from the extensions directory.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/api-v3/config/filter/udp/udp.rst#2025-04-23_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. toctree::\n  :glob:\n  :maxdepth: 2\n\n  ../../../extensions/filters/udp/*/v3/*\n```\n\n----------------------------------------\n\nTITLE: Persisting Environment Variables on Windows for Envoy Bazel Build\nDESCRIPTION: These commands persist the environment variable changes made for building Envoy on Windows.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/bazel/README.md#2025-04-23_snippet_17\n\nLANGUAGE: cmd\nCODE:\n```\nsetx PATH \"%PATH%\"\nsetx BAZEL_SH \"%BAZEL_SH%\"\nsetx MSYS2_ARG_CONV_EXCL \"%MSYS2_ARG_CONV_EXCL%\"\nsetx BAZEL_VC \"%BAZEL_VC%\"\nsetx TMPDIR \"%TMPDIR%\"\nsetx MSYS2_PATH_TYPE \"%MSYS2_PATH_TYPE%\"\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Envoy Sidecar Tracing Mode in Text\nDESCRIPTION: This snippet illustrates the ideal trace chain when Envoy is used as a sidecar. In this mode, the sidecar and its associated application are treated as a single hop in the trace chain.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/intro/arch_overview/observability/tracing.rst#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n-> [[SERVER (inbound sidecar) -> App -> CLIENT (outbound sidecar)]] -> ...\n```\n\n----------------------------------------\n\nTITLE: Defining API Reference Structure for Geolocation Providers in RST\nDESCRIPTION: This RST (reStructuredText) snippet defines the structure for the geolocation providers API documentation in Envoy. It establishes a reference label, creates a header, and configures a table of contents that dynamically includes all geolocation provider extension documentation.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/api-v3/config/geoip_provider/geoip_provider.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _api-v3_config_geoip_providers:\n\nGeolocation providers\n=====================\n\n.. toctree::\n  :glob:\n  :maxdepth: 2\n\n  ../../extensions/geoip_providers/*/v3/*\n```\n\n----------------------------------------\n\nTITLE: Configuring DNS Filter with External DNS Table in Envoy\nDESCRIPTION: Example configuration showing how to reference an external DNS table file in the DNS filter configuration.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/listeners/udp_filters/dns_filter.rst#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nlistener_filters:\n  name: \"envoy.filters.udp.dns_filter\"\n  typed_config:\n    '@type': 'type.googleapis.com/envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig'\n    stat_prefix: \"my_prefix\"\n    server_config:\n      external_dns_table:\n        filename: \"/home/ubuntu/configs/dns_table.json\"\n```\n\n----------------------------------------\n\nTITLE: C++ Name Mangling Example\nDESCRIPTION: Example showing how C++ compiler mangles operator new function name\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/bazel/PPROF.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n$ echo -e \"#include <new>\\n void* operator new(std::size_t) {} \" | g++ -x c++ -S - -o- 2> /dev/null\n```\n\n----------------------------------------\n\nTITLE: Git Log Command for Release Notes\nDESCRIPTION: Command to view all changes since the last tagged release, used for updating release notes.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/mobile/RELEASE.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit log `git rev-list --tags --max-count=1`..HEAD\n```\n\n----------------------------------------\n\nTITLE: Fixing Format Problems in Envoy Codebase\nDESCRIPTION: Command to automatically fix formatting issues across the codebase using the check_format script with the fix parameter.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/mobile/STYLE.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ntools/check_format.sh fix\n```\n\n----------------------------------------\n\nTITLE: Including External Dependency Documentation in RST\nDESCRIPTION: This snippet demonstrates the use of the RST 'include' directive to incorporate external dependency documentation from separate files into the main document. It's used for various categories of dependencies.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/intro/arch_overview/security/external_deps.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. include:: external_dep_dataplane_core.rst\n```\n\n----------------------------------------\n\nTITLE: Configuring SNI for Upstream Connections\nDESCRIPTION: Configuration for connecting to SNI-enabled upstream services with specific domain names.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/start/quick-start/securing.rst#2025-04-23_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n    transport_socket:\n      name: envoy.transport_sockets.tls\n      typed_config:\n        \"@type\": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext\n        common_tls_context: {}\n        sni: backend.example.com\n```\n\n----------------------------------------\n\nTITLE: Setting up Table of Contents for Health Check Event Sinks in reStructuredText\nDESCRIPTION: This code snippet defines a toctree directive that pulls in all health check event sink documentation from the extensions directory. It is configured to glob all relevant files and display them with a maximum depth of 2.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/api-v3/config/health_check_event_sinks/health_check_event_sinks.rst#2025-04-23_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. toctree::\n  :glob:\n  :maxdepth: 2\n\n  ../../extensions/health_check/event_sinks/*/v3/*\n```\n\n----------------------------------------\n\nTITLE: X-Forwarded-For Header Examples\nDESCRIPTION: Examples of XFF header formats showing different proxy hop scenarios.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_conn_man/headers.rst#2025-04-23_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nx-forwarded-for: 50.0.0.1\nx-forwarded-for: 50.0.0.1, 40.0.0.1\nx-forwarded-for: 50.0.0.1, 10.0.0.1\n```\n\n----------------------------------------\n\nTITLE: Structuring RST Documentation Table of Contents\nDESCRIPTION: Creates a table of contents in reStructuredText format for advanced Envoy configuration documentation, specifying a maximum depth of 2 levels and listing three main configuration topics.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/advanced/advanced.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n  :maxdepth: 2\n\n  well_known_dynamic_metadata\n  well_known_filter_state\n  metadata_configurations\n```\n\n----------------------------------------\n\nTITLE: RST Table of Contents Configuration\nDESCRIPTION: Sphinx/RST configuration for health checker documentation table of contents, including glob pattern matching for v2 and v3 API documentation.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/api-v3/config/health_checker/health_checker.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n  :glob:\n  :maxdepth: 2\n\n  */v2/*\n  ../../extensions/health_checkers/*/v3/*\n```\n\n----------------------------------------\n\nTITLE: Buffer Operations in Lua\nDESCRIPTION: Shows buffer manipulation operations including getting length and working with bytes.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/lua_filter.rst#2025-04-23_snippet_31\n\nLANGUAGE: lua\nCODE:\n```\nlocal size = buffer:length()\n```\n\nLANGUAGE: lua\nCODE:\n```\nbuffer:getBytes(index, length)\n```\n\nLANGUAGE: lua\nCODE:\n```\nbuffer:setBytes(string)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Build Toolchain and Dependencies (Shell/Bash)\nDESCRIPTION: This shell script installs the required toolchain and dependencies (clang-8, lld, Java JDK, build tools, Bazel, and Bloaty) for binary size analysis on an arm64 Ubuntu 18.04 machine. It does so via apt-get, wget, tar, git, unzip, and compilation commands. Key parameters include download URLs and installation targets; prerequisites are sudo privileges and a clean build system. Inputs/outputs are system packages and installed binaries; scripts require network access and sufficient disk space.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/mobile/docs/root/development/performance/binary_size.rst#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# basic toolchain\nsudo apt-get install build-essential openjdk-8-jdk python zip unzip \\\n  software-properties-common make cmake bc libtool ninja-build automake \\\n  time apt-transport-https\n# clang-8\nwget http://releases.llvm.org/8.0.0/clang+llvm-8.0.0-aarch64-linux-gnu.tar.xz\nsudo tar -C /usr/local/ -xvf clang+llvm-8.0.0-aarch64-linux-gnu.tar.xz --strip 1\nrm -rf clang+llvm-8.0.0-aarch64-linux-gnu.tar.xz\n# bazel 0.26.1\nwget https://github.com/bazelbuild/bazel/releases/download/0.26.1/bazel-0.26.1-dist.zip\nmkdir -p /tmp/bazel_build\nunzip -o bazel-0.26.1-dist.zip -d /tmp/bazel_build\nrm -rf bazel-0.26.1-dist.zip\ncd /tmp/bazel_build\nenv EXTRA_BAZEL_ARGS=\"--host_javabase=@local_jdk//:jdk\" bash ./compile.sh\nsudo cp output/bazel /usr/local/bin/bazel\nrm -rf /tmp/bazel_build\n# bloaty\ngit clone https://github.com/google/bloaty\ncd bloaty\nmkdir build\ncd build\ncmake ..\nmake -j6\ncp bloaty /usr/local/bin/bloaty\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Documentation Tree for Internal Redirects\nDESCRIPTION: RST directive that configures a table of contents tree for internal redirect documentation. Uses glob pattern to include all files under the extensions/internal_redirect directory with maximum depth of 2 levels.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/api-v3/config/internal_redirect/internal_redirect.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n  :glob:\n  :maxdepth: 2\n\n  ../../extensions/internal_redirect/**\n```\n\n----------------------------------------\n\nTITLE: Cloning Envoy Examples Repository via SSH\nDESCRIPTION: Command to clone the Envoy examples repository using SSH authentication\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/start/sandboxes/setup.rst#2025-04-23_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ngit clone git@github.com:envoyproxy/examples\n```\n\n----------------------------------------\n\nTITLE: Stripping Symbols from the Compiled Binary (Shell/Bash)\nDESCRIPTION: This shell command uses the 'strip' utility to remove all debug and symbol information from the compiled test binary. This generates a smaller, production-ready binary for analysis or distribution. 'strip -s' requires the input (the compiled Bazel output) and produces an output with reduced size. Prerequisites: The test binary must exist at the specified path.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/mobile/docs/root/development/performance/binary_size.rst#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nstrip -s bazel-bin/test/performance/test_binary_size\n```\n\n----------------------------------------\n\nTITLE: Generating Table of Contents for Upstream Matchers in reStructuredText\nDESCRIPTION: This RST code generates a table of contents for upstream matchers documentation. It uses the toctree directive to include the upstream IP port matcher proto file.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/api-v3/config/rbac/matchers/upstream/upstream.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n  :glob:\n  :maxdepth: 2\n\n  ../../../../extensions/rbac/matchers/upstream_ip_port/v3/upstream_ip_port_matcher.proto\n```\n\n----------------------------------------\n\nTITLE: Declaring or Referencing 'name' Identifier (plaintext)\nDESCRIPTION: This snippet displays the identifier 'name' terminated by a semicolon. Its specific role (e.g., variable declaration, struct member, configuration key) is indeterminate without the surrounding code or configuration context from the Envoy project. The semicolon often signifies the end of a statement or declaration in various programming and configuration languages.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/test/extensions/filters/http/cdn_loop/parser_corpus/ParseCdnInfo-MissingParameter.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nname ; \n\n```\n\n----------------------------------------\n\nTITLE: Documenting Envoy Server Statistics - reStructuredText\nDESCRIPTION: This snippet uses reStructuredText (reST) with the csv-table directive to document the set of server-related metrics exposed by Envoy. Each statistic includes its name, type (Gauge, Counter, Histogram), and a description. The statistics are organized in a tabular format, and the table is intended for inclusion in the Envoy documentation. There are no programming code dependencies, but reStructuredText processors, such as Sphinx, are required to render the tables properly.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/observability/statistics.rst#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. csv-table::\n  :header: Name, Type, Description\n  :widths: 1, 1, 2\n\n  uptime, Gauge, Current server uptime in seconds\n  concurrency, Gauge, Number of worker threads\n  memory_allocated, Gauge, Current amount of allocated memory in bytes. Total of both new and old Envoy processes on hot restart.\n  memory_heap_size, Gauge, Current reserved heap size in bytes. New Envoy process heap size on hot restart.\n  memory_physical_size, Gauge, Current estimate of total bytes of the physical memory. New Envoy process physical memory size on hot restart.\n  live, Gauge, \"1 if the server is not currently draining, 0 otherwise\"\n  state, Gauge, Current :ref:`State <envoy_v3_api_field_admin.v3.ServerInfo.state>` of the Server.\n  parent_connections, Gauge, Total connections of the old Envoy process on hot restart\n  total_connections, Gauge, Total connections of both new and old Envoy processes\n  version, Gauge, Integer represented version number based on SCM revision or :ref:`stats_server_version_override <envoy_v3_api_field_config.bootstrap.v3.Bootstrap.stats_server_version_override>` if set.\n  days_until_first_cert_expiring, Gauge, Number of days until the next certificate being managed will expire\n  seconds_until_first_ocsp_response_expiring, Gauge, Number of seconds until the next OCSP response being managed will expire\n  hot_restart_epoch, Gauge, Current hot restart epoch -- an integer passed via command line flag ``--restart-epoch`` usually indicating generation.\n  hot_restart_generation, Gauge, Current hot restart generation -- like hot_restart_epoch but computed automatically by incrementing from parent.\n  initialization_time_ms, Histogram, Total time taken for Envoy initialization in milliseconds. This is the time from server start-up until the worker threads are ready to accept new connections\n  debug_assertion_failures, Counter, Number of debug assertion failures detected in a release build if compiled with ``--define log_debug_assert_in_release=enabled`` or zero otherwise\n  envoy_bug_failures, Counter, Number of envoy bug failures detected in a release build. File or report the issue if this increments as this may be serious.\n  static_unknown_fields, Counter, Number of messages in static configuration with unknown fields\n  dynamic_unknown_fields, Counter, Number of messages in dynamic configuration with unknown fields\n  wip_protos, Counter, Number of messages and fields marked as work-in-progress being used\n\n```\n\n----------------------------------------\n\nTITLE: Redirect Policy Type URL Configuration\nDESCRIPTION: Type URL configuration for the redirect policy that enables modifying request routing and headers for custom responses.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/custom_response_filter.rst#2025-04-23_snippet_1\n\nLANGUAGE: protobuf\nCODE:\n```\ntype.googleapis.com/envoy.extensions.http.custom_response.redirect_policy.v3.RedirectPolicy\n```\n\n----------------------------------------\n\nTITLE: RST Table of Contents for Route Documentation\nDESCRIPTION: reStructuredText toctree directive that organizes route-related protobuf documentation files under config/route/v3/ directory.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/api-v3/http_routes/http_routes.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n  :glob:\n  :maxdepth: 2\n\n  ../config/route/v3/route_components.proto\n  ../config/route/v3/route.proto\n  ../config/route/v3/scoped_route.proto\n```\n\n----------------------------------------\n\nTITLE: Unassigning GitHub Issues/PRs using RepoKitteh Command\nDESCRIPTION: This slash command, used in a GitHub comment on an issue or pull request, directs RepoKitteh to remove the specified user (`@someone`) from the list of assignees. The commenter must be an organization member.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/source/docs/repokitteh.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n/unassign @someone\n```\n\n----------------------------------------\n\nTITLE: Local Response Policy Type URL Configuration\nDESCRIPTION: Type URL configuration for the local response policy that enables serving locally stored response bodies.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/custom_response_filter.rst#2025-04-23_snippet_2\n\nLANGUAGE: protobuf\nCODE:\n```\ntype.googleapis.com/envoy.extensions.http.custom_response.local_response_policy.v3.LocalResponsePolicy\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom JWT Header Format in YAML\nDESCRIPTION: Example configuration showing how to specify custom header settings for JWT extraction with a value prefix.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/api/envoy/config/filter/http/jwt_authn/v2alpha/README.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n    from_headers:\n      - name: bespoke\n        value_prefix: jwt_value\n```\n\n----------------------------------------\n\nTITLE: Suppressing Memcheck Uninitialized Value Error in re2::SparseSet::contains\nDESCRIPTION: This Valgrind suppression entry ignores 'Memcheck:Value8' (use of uninitialised value of size 8) errors detected within the `re2::SparseSet<int>::contains(int)` function. This addresses specific instances where an 8-byte uninitialized value is used within this re2 function, likely deemed acceptable or a known issue.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/tools/debugging/valgrind-suppressions.txt#2025-04-23_snippet_2\n\nLANGUAGE: valgrind_suppression\nCODE:\n```\n{\n   re2 uninit-value\n   Memcheck:Value8\n   fun:_ZNK3re210SparseSetTIvE8containsEi\n   ...\n}\n```\n\n----------------------------------------\n\nTITLE: Code Reference - Envoy Security Fix Commit\nDESCRIPTION: Commit hash reference for the security patch that addressed CVE-2019-9900\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/security/postmortems/cve-2019-9900.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nhttps://github.com/envoyproxy/envoy/commit/b155af75fad7861e941b5939dc001abf581c9203\n```\n\n----------------------------------------\n\nTITLE: DynamoDB Per Table Statistics CSV Table in reStructuredText\nDESCRIPTION: Defines a CSV table structure for DynamoDB per table statistics, including table name, type, and description.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/docs/root/configuration/http/http_filters/dynamodb_filter.rst#2025-04-23_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\n.. csv-table::\n    :header: Name, Type, Description\n    :widths: 1, 1, 2\n\n    upstream_rq_total, Counter, Total number of requests on ``<table_name>`` table\n    upstream_rq_time, Histogram, Time spent on ``<table_name>`` table\n    upstream_rq_total_xxx, Counter, Total number of requests on ``<table_name>`` table per response code (503/2xx/etc)\n    upstream_rq_time_xxx, Histogram, Time spent on ``<table_name>`` table per response code (400/3xx/etc)\n```\n\n----------------------------------------\n\nTITLE: Identifying Crashing Input Artifact in OSS-Fuzz\nDESCRIPTION: Illustrates the log message produced by the OSS-Fuzz `run_fuzzer` helper script when a crash occurs. This message indicates the location and filename (e.g., `./crash-db2ee19f50162f2079dc0c5ba24fd0e3dcb8b9bc`) of the input file that triggered the crash, which can be used for debugging and adding to the test corpus.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/test/fuzz/README.md#2025-04-23_snippet_4\n\nLANGUAGE: console\nCODE:\n```\nartifact_prefix='./'; Test unit written to ./crash-db2ee19f50162f2079dc0c5ba24fd0e3dcb8b9bc\n```\n\n----------------------------------------\n\nTITLE: Using Runtime Overrides for Deprecated Features in Envoy Configuration\nDESCRIPTION: This YAML configuration shows how to override deprecated features in Envoy using runtime configuration. It references an example configuration file that demonstrates the proper approach to enabling deprecated features that would otherwise cause configuration failure.\nSOURCE: https://github.com/envoyproxy/envoy/blob/main/CONTRIBUTING.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nconfigs/using_deprecated_config.yaml\n```"
  }
]