[
  {
    "owner": "kotti",
    "repo": "kotti",
    "content": "TITLE: Defining a Content Type in Kotti using Python\nDESCRIPTION: This snippet demonstrates how to define a custom content type in Kotti by inheriting from the Content class and defining attributes like id, body, and mime_type. It also shows how to configure the type_info attribute for the content type, including name, title, add_view, and addable_to parameters. The code requires the kotti.resources module and the sqlalchemy library.\nSOURCE: https://github.com/kotti/kotti/blob/master/docs/developing/basic/developer-manual.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom kotti.resources import Content\n\nclass Document(Content):\n    id = Column(Integer(), ForeignKey('contents.id'), primary_key=True)\n    body = Column(UnicodeText())\n    mime_type = Column(String(30))\n\n    type_info = Content.type_info.copy(\n        name=u'Document',\n        title=_(u'Document'),\n        add_view=u'add_document',\n        addable_to=[u'Document'],\n        )\n\n    def __init__(self, body=u\"\", mime_type='text/html', **kwargs):\n        super(Document, self).__init__(**kwargs)\n        self.body = body\n        self.mime_type = mime_type\n```\n\n----------------------------------------\n\nTITLE: Enable Local Navigation Widget in Kotti (INI)\nDESCRIPTION: This snippet enables the built-in local navigation widget in Kotti by including `kotti.views.slots.includeme_local_navigation` in the `pyramid.includes` setting within the application's .ini configuration file.\nSOURCE: https://github.com/kotti/kotti/blob/master/docs/developing/basic/configuration.rst#_snippet_16\n\nLANGUAGE: ini\nCODE:\n```\npyramid.includes = kotti.views.slots.includeme_local_navigation\n```\n\n----------------------------------------\n\nTITLE: Defining Fanstatic Resources in Addons PYTHON\nDESCRIPTION: This Python code demonstrates how to define Fanstatic resources (CSS, JS) within a Kotti addon. It creates a library and a resource, then adds the resource to either `edit_needed` or `view_needed` for inclusion in Kotti pages.  An entry point in setup.py is also created.\nSOURCE: https://github.com/kotti/kotti/blob/master/docs/developing/advanced/static-resource-management.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom fanstatic import Library\nfrom fanstatic import Resource\nfrom kotti.fanstatic import edit_needed\nfrom kotti.fanstatic import view_needed\n\nmy_library = Library('my_package', 'resources')\nmy_resource = Resource(my_library, \"my.js\")\n\ndef includeme(config):\n    # add to edit_needed if the resource is needed in edit views\n    edit_needed.add(my_resource)\n    # add to view_needed if the resource is needed in edit views\n    view_needed.add(my_resource)\n```\n\n----------------------------------------\n\nTITLE: Disable Kotti workflow (INI)\nDESCRIPTION: This snippet shows how to disable the default workflow in Kotti by setting the `kotti.use_workflow` setting to a non-true value, such as `0`, within the application's `.ini` configuration file. This is useful when a workflow is not required for a particular application.\nSOURCE: https://github.com/kotti/kotti/blob/master/docs/developing/basic/security.rst#_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\nkotti.use_workflow = 0\n```\n\n----------------------------------------\n\nTITLE: Configure Authentication and Authorization in Kotti (INI)\nDESCRIPTION: This snippet configures the authentication and authorization policies for a Kotti application. It sets the `kotti.authn_policy_factory` and `kotti.authz_policy_factory` settings to `kotti.authtkt_factory` and `kotti.acl_factory` respectively. These factories correspond to `pyramid.authentication.AuthTktAuthenticationPolicy` and `pyramid.authorization.ACLAuthorizationPolicy`.\nSOURCE: https://github.com/kotti/kotti/blob/master/docs/developing/basic/configuration.rst#_snippet_13\n\nLANGUAGE: ini\nCODE:\n```\nkotti.authn_policy_factory = kotti.authtkt_factory\nkotti.authz_policy_factory = kotti.acl_factory\n```\n\n----------------------------------------\n\nTITLE: Defining Root ACL in Kotti\nDESCRIPTION: This snippet shows the default ACL (Access Control List) defined for the site root in Kotti. It defines the mapping of roles to permissions, such as allowing everyone to view, viewers to view, editors to view, add, and edit, and owners to view, add, edit, and manage. It defines the access controls to the root of the application.\nSOURCE: https://github.com/kotti/kotti/blob/master/docs/developing/basic/developer-manual.rst#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nroot.__acl__ == [\n    ['Allow', 'system.Everyone', ['view']],\n    ['Allow', 'role:viewer', ['view']],\n    ['Allow', 'role:editor', ['view', 'add', 'edit']],\n    ['Allow', 'role:owner', ['view', 'add', 'edit', 'manage']],\n    ]\n```\n\n----------------------------------------\n\nTITLE: Define Choice Content Type with SQLAlchemy and Kotti\nDESCRIPTION: This code defines the Choice content type, inheriting from kotti.resources.Content. It includes an integer votes column using SQLAlchemy and configures the type information, including the add_view and specifying that choices can only be added to Poll items. The constructor initializes the votes count to 0.\nSOURCE: https://github.com/kotti/kotti/blob/master/docs/first_steps/tut-2.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom kotti.resources import Content\nfrom sqlalchemy import Column\nfrom sqlalchemy import ForeignKey\nfrom sqlalchemy import Integer\n\nclass Choice(Content):\n    id = Column(Integer(), ForeignKey('contents.id'), primary_key=True)\n    votes = Column(Integer())\n\n    type_info = Content.type_info.copy(\n        name=u'Choice',\n        title=u'Choice',\n        add_view=u'add_choice',\n        addable_to=[u'Poll'],\n    )\n\n    def __init__(self, votes=0, **kwargs):\n        super(Choice, self).__init__(**kwargs)\n        self.votes = votes\n```\n\n----------------------------------------\n\nTITLE: Kotti Pyramid Includes Configuration\nDESCRIPTION: This snippet demonstrates how to use `pyramid.includes` to activate add-ons in Kotti.  It shows how to install the `kotti_twitter` extension and add a Twitter profile widget to the site.\nSOURCE: https://github.com/kotti/kotti/blob/master/docs/developing/basic/configuration.rst#_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\npyramid.includes = kotti_twitter.include_profile_widget\n```\n\n----------------------------------------\n\nTITLE: Include config.scan in includeme\nDESCRIPTION: This code demonstrates including the config.scan function in the includeme function in __init__.py. This is necessary for the @view_config statements in the views to be registered.\nSOURCE: https://github.com/kotti/kotti/blob/master/docs/first_steps/tut-2.rst#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndef includeme(config):\n    ...\n    config.scan(__name__)\n```\n\n----------------------------------------\n\nTITLE: Adding a Custom Action Menu Section Kotti Python\nDESCRIPTION: This code demonstrates how to add a custom section in the Action menu for all content types inheriting from Content.  A LinkRenderer is appended to the default_actions list, which renders a specified view. The name 'my-custom-submenu' is later used as the view name in the view configuration.\nSOURCE: https://github.com/kotti/kotti/blob/master/docs/developing/advanced/add-to-edit-interface.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom kotti.util import LinkRenderer\nfrom kotti.resources import default_actions\n\ndef kotti_configure(settings):\n    default_actions.append(LinkRenderer(\"my-custom-submenu\"))\n```\n\n----------------------------------------\n\nTITLE: Define Add and Edit Forms for Poll and Choice\nDESCRIPTION: This code defines the add and edit forms for the Poll and Choice content types, using Kotti's AddFormView and EditFormView base classes. It associates each form with its corresponding schema and specifies the content types to be added. The @view_config decorator registers the views with specific permissions, contexts, and templates.\nSOURCE: https://github.com/kotti/kotti/blob/master/docs/first_steps/tut-2.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom kotti.views.form import AddFormView\nfrom kotti.views.form import EditFormView\nfrom pyramid.view import view_config\n\nfrom kotti_mysite.resources import Choice\nfrom kotti_mysite.resources import Poll\nfrom kotti_mysite.views.edit import PollSchema, ChoiceSchema\n\n\n@view_config(name='edit', context=Poll, permission='edit',\n             renderer='kotti:templates/edit/node.pt')\nclass PollEditForm(EditFormView):\n    schema_factory = PollSchema\n\n\n@view_config(name=Poll.type_info.add_view, permission='add',\n             renderer='kotti:templates/edit/node.pt')\nclass PollAddForm(AddFormView):\n    schema_factory = PollSchema\n    add = Poll\n    item_type = u\"Poll\"\n\n\n@view_config(name='edit', context=Choice, permission='edit',\n             renderer='kotti:templates/edit/node.pt')\nclass ChoiceEditForm(EditFormView):\n    schema_factory = ChoiceSchema\n\n\n@view_config(name=Choice.type_info.add_view, permission='add',\n             renderer='kotti:templates/edit/node.pt')\nclass ChoiceAddForm(AddFormView):\n    schema_factory = ChoiceSchema\n    add = Choice\n    item_type = u\"Choice\"\n```\n\n----------------------------------------\n\nTITLE: Kotti Secret Configuration\nDESCRIPTION: This snippet demonstrates how to configure the `kotti.secret` and `kotti.secret2` settings in the Kotti INI file.  `kotti.secret` is used for the initial admin password and browser session cookies, while `kotti.secret2` is used for signing password reset tokens.\nSOURCE: https://github.com/kotti/kotti/blob/master/docs/developing/basic/configuration.rst#_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\nkotti.secret = myadminspassword\nkotti.secret2 = $2a$12$VVpW/i1MA2wUUIUHwY6v8O\n```\n\n----------------------------------------\n\nTITLE: Kotti Asset Override Configuration\nDESCRIPTION: This snippet shows how to configure `kotti.asset_overrides` in the Kotti INI file. This allows you to override Kotti's templates by specifying a directory in your package that mirrors Kotti's template structure.\nSOURCE: https://github.com/kotti/kotti/blob/master/docs/developing/basic/configuration.rst#_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\nkotti.asset_overrides = mypackage:kotti-overrides/\n```\n\n----------------------------------------\n\nTITLE: Define Poll Content Type with SQLAlchemy and Kotti\nDESCRIPTION: This code defines the Poll content type by inheriting from kotti.resources.Content. It uses SQLAlchemy for persistence, declaring an integer ID column as a foreign key to the contents table.  It also configures type information, including the add_view and allowed parent types.\nSOURCE: https://github.com/kotti/kotti/blob/master/docs/first_steps/tut-2.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom kotti.resources import Content\nfrom sqlalchemy import Column\nfrom sqlalchemy import ForeignKey\nfrom sqlalchemy import Integer\n\nclass Poll(Content):\n    id = Column(Integer(), ForeignKey('contents.id'), primary_key=True)\n\n    type_info = Content.type_info.copy(\n        name=u'Poll',\n        title=u'Poll',\n        add_view=u'add_poll',\n        addable_to=[u'Document'],\n    )\n```\n\n----------------------------------------\n\nTITLE: Include custom workflow (INI)\nDESCRIPTION: This snippet shows how to include the custom workflow definition file (`workflow.zcml`) within Kotti's configuration using the `kotti.zcml_includes` setting. This registers the new workflow with the application.\nSOURCE: https://github.com/kotti/kotti/blob/master/docs/developing/basic/security.rst#_snippet_9\n\nLANGUAGE: ini\nCODE:\n```\nkotti.zcml_includes = kotti_wf:workflow.zcml\n```\n\n----------------------------------------\n\nTITLE: Kotti INI Configuration\nDESCRIPTION: This snippet shows an example of a Kotti configuration file, including settings for database, site title, and debug options.  It is found in the [app:kotti] section of the INI file and controls various aspects of Kotti's behavior.\nSOURCE: https://github.com/kotti/kotti/blob/master/docs/developing/basic/configuration.rst#_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[app:kotti]\nuse = egg:Kotti\npyramid.reload_templates = true\npyramid.debug_authorization = false\npyramid.debug_notfound = false\npyramid.debug_routematch = false\npyramid.debug_templates = true\npyramid.default_locale_name = en\npyramid.includes = pyramid_debugtoolbar\n                     pyramid_tm\nmail.default_sender = yourname@yourhost\nsqlalchemy.url = sqlite:///%(here)s/Kotti.db\nkotti.site_title = Kotti\nkotti.secret = changethis1\n```\n\n----------------------------------------\n\nTITLE: Trigger Event Handler Execution in Kotti\nDESCRIPTION: This snippet demonstrates how to trigger event handler execution by calling the `notify` function from `kotti.events`. An instance of `MyFunnyEvent` is passed to the `notify` function, which will then execute any registered handlers for that event type. This requires that `MyFunnyEvent` is defined elsewhere.\nSOURCE: https://github.com/kotti/kotti/blob/master/docs/developing/advanced/events.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom kotti.events import notify\nnotify(MyFunnyEvent())\n```\n\n----------------------------------------\n\nTITLE: Overriding the Default View for Files in Kotti\nDESCRIPTION: This snippet demonstrates how to override the default view for Files in Kotti using Pyramid's add_view configuration. It defines a custom view function my_file_view and registers it using config.add_view, specifying the context as File, the name as 'view', and the permission as 'view'. The code requires the Pyramid Configurator API.\nSOURCE: https://github.com/kotti/kotti/blob/master/docs/developing/basic/developer-manual.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef my_file_view(request):\n    return {...}\n\ndef includeme(config):\n    config.add_view(\n        my_file_view,\n        name='view',\n        permission='view',\n        context=File,\n        )\n```\n\n----------------------------------------\n\nTITLE: Kotti Available Types Configuration\nDESCRIPTION: This snippet demonstrates how to configure the `kotti.available_types` setting to define the list of content types available in Kotti. It shows an example of removing `File` and adding `Calendar` and `Event` content types.\nSOURCE: https://github.com/kotti/kotti/blob/master/docs/developing/basic/configuration.rst#_snippet_7\n\nLANGUAGE: ini\nCODE:\n```\nkotti.available_types =\n    kotti.resources.Document\n    kotti_calendar.resources.Calendar\n    kotti_calendar.resources.Event\n```\n\n----------------------------------------\n\nTITLE: Configuring Kotti with Custom Settings in Python\nDESCRIPTION: This Python code snippet shows how to configure Kotti within a Pyramid application by defining default settings and updating them with application-specific configurations. It initializes the SQL engine and returns a WSGI application.\nSOURCE: https://github.com/kotti/kotti/blob/master/docs/developing/advanced/as-a-library.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndefault_settings = {\n    'pyramid.includes': 'myapp myapp.views',\n    'kotti.authn_policy_factory': 'myapp.authn_policy_factory',\n    'kotti.base_includes': (\n        'kotti kotti.views kotti.views.login kotti.views.users'),\n    'kotti.use_tables': 'orders principals',\n    'kotti.populators': 'myapp.resources.populate',\n    'kotti.principals_factory': 'myapp.security.Principals',\n    'kotti.root_factory': 'myapp.resources.Root',\n    'kotti.site_title': 'Myapp',\n    }\n\n\ndef main(global_config, **settings):\n    settings2 = default_settings.copy()\n    settings2.update(settings)\n    config = kotti.base_configure(global_config, **settings2)\n    engine = sqlalchemy.engine_from_config(config.registry.settings, 'sqlalchemy.')\n    kotti.resources.initialize_sql(engine)\n    return config.make_wsgi_app()\n```\n\n----------------------------------------\n\nTITLE: Subscribe to Specific Event Type in Kotti\nDESCRIPTION: This code snippet shows how to subscribe to a specific event type, `ObjectInsert`, using the `subscribe` decorator. The `document_insert_handler` function will be executed whenever an `ObjectInsert` event occurs. The `event.object` and `event.request` attributes provide access to the object being inserted and the request context, respectively.\nSOURCE: https://github.com/kotti/kotti/blob/master/docs/developing/advanced/events.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom kotti.events import ObjectInsert\nfrom kotti.events import subscribe\n\n@subscribe(ObjectInsert)\ndef document_insert_handler(event):\n    print event.object, event.request\n```\n\n----------------------------------------\n\nTITLE: Kotti Sanitize-on-Write Configuration\nDESCRIPTION: This snippet shows the default configuration for Kotti's sanitize-on-write feature. It defines which resource attributes should be automatically sanitized when written to, and specifies the sanitizers to use for each attribute.  This example shows the Document.body using xss_protection and Content.title using no_html.\nSOURCE: https://github.com/kotti/kotti/blob/master/docs/developing/advanced/sanitizers.rst#_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\nkotti.sanitize_on_write =\n    kotti.resources.Document.body:xss_protection\n    kotti.resources.Content.title:no_html\n```\n\n----------------------------------------\n\nTITLE: Enable workflow for images and files (Python)\nDESCRIPTION: This code snippet demonstrates how to enable the default workflow for images and files in Kotti by implementing the `IDefaultWorkflow` marker interface for the `Image` and `File` resources. This is typically done within the `includeme` function of a Kotti add-on.\nSOURCE: https://github.com/kotti/kotti/blob/master/docs/developing/basic/security.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom zope.interface import implementer\nfrom kotti.interfaces import IDefaultWorkflow\nfrom kotti.resources import File\nfrom kotti.resources import Image\n...\n\ndef includeme(config):\n    ...\n    # enable workflow for images and files\n    implementer(IDefaultWorkflow)(Image)\n    implementer(IDefaultWorkflow)(File)\n    ...\n```\n\n----------------------------------------\n\nTITLE: Configure available types in kotti_configure\nDESCRIPTION: This code snippet shows how to add the Poll and Choice content types to the site's available_types registry within the kotti_configure function in __init__.py. This makes them available for addition in the Kotti interface.\nSOURCE: https://github.com/kotti/kotti/blob/master/docs/first_steps/tut-2.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef kotti_configure(settings):\n      ...\n    settings['pyramid.includes'] += ' kotti_mysite'\n    settings['kotti.available_types'] += (\n        ' kotti_mysite.resources.Poll' +\n        ' kotti_mysite.resources.Choice')\n    settings['kotti.fanstatic.view_needed'] += (\n        ' kotti_mysite.fanstatic.css_and_js')\n    ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Kotti Includes with INI File\nDESCRIPTION: This snippet demonstrates how to configure Kotti to include a custom includeme function using the pyramid.includes setting in an INI file. The dotted name string of the includeme function is specified, which Kotti will call on application start-up. The code configures the pyramid includes via the .ini file.\nSOURCE: https://github.com/kotti/kotti/blob/master/docs/developing/basic/developer-manual.rst#_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\npyramid.includes = mypackage.views.includeme\n```\n\n----------------------------------------\n\nTITLE: Custom workflow definition (XML)\nDESCRIPTION: This XML snippet defines a custom workflow using `repoze.workflow`.  It configures a new workflow named \"custom\" that applies to content types implementing the `ICustomContent` interface.  The workflow defines a single state, \"private\", and associates roles with permissions for that state.\nSOURCE: https://github.com/kotti/kotti/blob/master/docs/developing/basic/security.rst#_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<configure xmlns=\"http://namespaces.repoze.org/bfg\"\n           xmlns:i18n=\"http://xml.zope.org/namespaces/i18n\"\n           i18n:domain=\"Kotti\">\n\n  <include package=\"repoze.workflow\" file=\"meta.zcml\"/>\n\n  <workflow\n      type=\"security\"\n      name=\"custom\"\n      state_attr=\"state\"\n      initial_state=\"private\"\n      content_types=\"kotti_wf.interfaces.ICustomContent\"\n      permission_checker=\"pyramid.security.has_permission\"\n      >\n\n    <state name=\"private\" callback=\"kotti.workflow.workflow_callback\">\n\n      <key name=\"title\" value=\"_(u'Private')\" />\n      <key name=\"order\" value=\"1\" />\n\n      <key name=\"inherit\" value=\"0\" />\n      <key name=\"system.Everyone\" value=\"\" />\n      <key name=\"role:viewer\" value=\"view\" />\n      <key name=\"role:editor\" value=\"view add edit delete state_change\" />\n      <key name=\"role:owner\" value=\"view add edit delete manage state_change\" />\n\n    </state>\n\n  </workflow>\n\n</configure>\n```\n\n----------------------------------------\n\nTITLE: Custom View for Poll\nDESCRIPTION: This code defines a custom view for the Poll content type. It retrieves the children of the poll (the choices) and passes them to the template. The @view_defaults and @view_config decorators register the view with the Poll content type and the 'view' name, respectively.\nSOURCE: https://github.com/kotti/kotti/blob/master/docs/first_steps/tut-2.rst#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom pyramid.view import view_config, view_defaults\nfrom kotti.views.view import BaseView\n\nfrom kotti_mysite.fanstatic import css_and_js\nfrom kotti_mysite.resources import Poll\n\n\n@view_defaults(context=Poll)\nclass PollViews(BaseView):\n    \"\"\" Views for :class:`kotti_mysite.resources.Poll` \"\"\"\n\n    @view_config(name='view', permission='view',\n                 renderer='kotti_mysite:templates/poll.pt')\n    def poll_view(self):\n        css_and_js.need()\n        choices = self.context.children\n        return {\n            'choices': choices,\n        }\n```\n\n----------------------------------------\n\nTITLE: Generating Attachment View URL for File\nDESCRIPTION: This code snippet demonstrates how to generate a URL for a file's attachment view using Kotti's request object. This URL is used to serve the file's content through a standard Kotti view, enforcing permission checks.\nSOURCE: https://github.com/kotti/kotti/blob/master/docs/developing/advanced/blobs.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> from kotti.resources import File\n>>> file = File.query.filter(File.name == 'file').one()\n>>> request.resource_url(file, 'attachment-view')\n'http://localhost/foo/bar/file/attachment-view'\n```\n\n----------------------------------------\n\nTITLE: Adding Link to Administration Menu Kotti Python\nDESCRIPTION: This snippet demonstrates how to add a new link to the Administration menu in the Site Setup section. It appends a Link object to the CONTROL_PANEL_LINKS list within the kotti_configure function. This action makes the link appear as an option in the Administration menu.\nSOURCE: https://github.com/kotti/kotti/blob/master/docs/developing/advanced/add-to-edit-interface.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom kotti.util import Link\nfrom kotti.views.site_setup import CONTROL_PANEL_LINKS\n\ndef kotti_configure(settings):\n    link = Link('name', _(u'Title'))\n    CONTROL_PANEL_LINKS.append(link)\n```\n\n----------------------------------------\n\nTITLE: Adding a Relationship to a Content Type in Kotti\nDESCRIPTION: This code shows how to add a relationship from a content type to another Node in Kotti using SQLAlchemy's relationship feature. It demonstrates the use of a primaryjoin parameter to specify the join condition between the tables. It assumes that the 'Node' class and 'Document' class are available in the scope.\nSOURCE: https://github.com/kotti/kotti/blob/master/docs/developing/basic/developer-manual.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy.orm import relationship\n\nclass DocumentWithRelation(Document):\n  id = Column(Integer, ForeignKey('documents.id'), primary_key=True)\n  related_item_id = Column(Integer, ForeignKey('nodes.id'))\n  related_item = relationship(\n      'Node', primaryjoin='Node.id==DocumentWithRelation.related_item_id')\n```\n\n----------------------------------------\n\nTITLE: Override Fanstatic resources in kotti_configure\nDESCRIPTION: This Python code shows how to override Fanstatic resources in the kotti_configure function. It sets the kotti.fanstatic.view_needed setting to the add-on's css_and_js group, which replaces Kotti's default resources for the public interface.\nSOURCE: https://github.com/kotti/kotti/blob/master/docs/first_steps/tut-1.rst#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ndef kotti_configure(settings):\n    ...\n    settings['kotti.fanstatic.view_needed'] = ' kotti_mysite.fanstatic.css_and_js'\n    ...\n```\n\n----------------------------------------\n\nTITLE: Subscribe to All Events in Kotti\nDESCRIPTION: This code snippet demonstrates how to subscribe to all events in Kotti using the `subscribe` decorator without specifying any event types. The handler function `all_events_handler` will be executed for every event that occurs. The `event` argument will contain information about the specific event.\nSOURCE: https://github.com/kotti/kotti/blob/master/docs/developing/advanced/events.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom kotti.events import subscribe\n\n@subscribe()\ndef all_events_handler(event):\n    print event\n```\n\n----------------------------------------\n\nTITLE: Configure Default Caching Policy Chooser in Kotti (INI)\nDESCRIPTION: This snippet configures the default caching policy chooser for a Kotti application. It sets the `kotti.caching_policy_chooser` setting to `kotti.views.cache.default_caching_policy_chooser`. This determines how Kotti selects the appropriate caching policy for different responses.\nSOURCE: https://github.com/kotti/kotti/blob/master/docs/developing/basic/configuration.rst#_snippet_14\n\nLANGUAGE: ini\nCODE:\n```\nkotti.caching_policy_chooser = kotti.views.cache.default_caching_policy_chooser\n```\n\n----------------------------------------\n\nTITLE: Registering a Kotti View in Python\nDESCRIPTION: This snippet shows how to register a new view in Kotti using Pyramid's `config.add_view` method. It registers a view named 'front-page' and associates it with a specific template file located at 'myapp:templates/front-page.pt'.  The `includeme` function is standard for Pyramid configurations.\nSOURCE: https://github.com/kotti/kotti/blob/master/docs/developing/advanced/frontpage-different-template.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef includeme(config):\n    config.add_view(\n        name='front-page',\n        renderer='myapp:templates/front-page.pt',\n    )\n```\n\n----------------------------------------\n\nTITLE: Adding Flash Message After Voting in Python\nDESCRIPTION: This code adds a flash message to the `vote_view` to provide feedback to the user after they vote. The message confirms which choice the user voted for. The `request.session.flash` method is used to display the message.\nSOURCE: https://github.com/kotti/kotti/blob/master/docs/first_steps/tut-3.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef vote_view(self):\n    self.context.votes += 1\n    self.request.session.flash(\n        u'You have just voted for the choice \"{0}\"'.format(\n            self.context.title), 'info')\n    return HTTPFound(\n        location=self.request.resource_url(self.context.parent))\n```\n\n----------------------------------------\n\nTITLE: Install OS Packages (Ubuntu)\nDESCRIPTION: Installs necessary OS packages for building and running Kotti, including build tools, PostgreSQL development libraries, and Python development tools.\nSOURCE: https://github.com/kotti/kotti/blob/master/docs/developing/basic/deployment.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\napt-get install build-essential libpq-dev python python-dev python-virtualenv\n```\n\n----------------------------------------\n\nTITLE: Kotti Search Content Configuration\nDESCRIPTION: This snippet shows the default configuration for `kotti.search_content`, which provides a simple search over content types based on `kotti.resources.Content`.\nSOURCE: https://github.com/kotti/kotti/blob/master/docs/developing/basic/configuration.rst#_snippet_9\n\nLANGUAGE: ini\nCODE:\n```\nkotti.search_content = kotti.views.util.default_search_content\n```\n\n----------------------------------------\n\nTITLE: Configure Fanstatic resources in kotti_configure\nDESCRIPTION: This Python code shows how to configure Fanstatic resources in the kotti_configure function. It adds the add-on's css_and_js group to the kotti.fanstatic.view_needed setting, which controls which resources are loaded in the public interface.\nSOURCE: https://github.com/kotti/kotti/blob/master/docs/first_steps/tut-1.rst#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndef kotti_configure(settings):\n    ...\n    settings['kotti.fanstatic.view_needed'] += ' kotti_mysite.fanstatic.css_and_js'\n    ...\n```\n\n----------------------------------------\n\nTITLE: Override default workflow (INI)\nDESCRIPTION: This snippet demonstrates how to override the default workflow in Kotti by pointing the `kotti.use_workflow` setting to a custom ZCML file containing the new workflow definition within the application's `.ini` configuration file. This allows using a custom workflow for all content types.\nSOURCE: https://github.com/kotti/kotti/blob/master/docs/developing/basic/security.rst#_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\nkotti.use_workflow = kotti_yourplugin:workflow.zcml\n```\n\n----------------------------------------\n\nTITLE: Adding UploadedFileField to a Model\nDESCRIPTION: This code snippet shows how to add an UploadedFileField to a Kotti Content model. This allows storing blob data directly as an attribute of the model, which integrates with Depot for storage management.\nSOURCE: https://github.com/kotti/kotti/blob/master/docs/developing/advanced/blobs.rst#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom depot.fields.sqlalchemy import UploadedFileField\nfrom kotti.resources import Content\n\nclass Person(Content):\n    avatar = UploadedFileField()\n```\n\n----------------------------------------\n\nTITLE: Fanstatic WSGI Pipeline Configuration INI\nDESCRIPTION: This configuration defines a WSGI pipeline using Fanstatic and Kotti. It sets up the Kotti application, the Fanstatic filter, and the main pipeline which includes both. It also configures a Waitress server for deployment.\nSOURCE: https://github.com/kotti/kotti/blob/master/docs/developing/advanced/static-resource-management.rst#_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[app:kotti]\nuse = egg:kotti\n\n[filter:fanstatic]\nuse = egg:fanstatic#fanstatic\n\n[pipeline:main]\npipeline =\n    fanstatic\n    kotti\n\n[server:main]\nuse = egg:waitress#main\nhost = 127.0.0.1\nport = 5000\n```\n\n----------------------------------------\n\nTITLE: Explicit Sanitization in Kotti\nDESCRIPTION: This snippet demonstrates how to explicitly use a configured sanitizer in Kotti. It imports the sanitize function from kotti.sanitizers and then calls it with the unsanitized string and the name of the sanitizer to use.\nSOURCE: https://github.com/kotti/kotti/blob/master/docs/developing/advanced/sanitizers.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom kotti.sanitizers import sanitize\n\nsanitzed = sanitize(unsanitized, 'xss_protection')\n```\n\n----------------------------------------\n\nTITLE: Enable Kotti Navigation Widget (INI)\nDESCRIPTION: This snippet shows how to enable a navigation widget provided by the `kotti_navigation` add-on by including `kotti_navigation.include_navigation_widget` in the `pyramid.includes` setting within the application's .ini file.\nSOURCE: https://github.com/kotti/kotti/blob/master/docs/developing/basic/configuration.rst#_snippet_17\n\nLANGUAGE: ini\nCODE:\n```\npyramid.includes = kotti_navigation.include_navigation_widget\n```\n\n----------------------------------------\n\nTITLE: Kotti Custom Search Function\nDESCRIPTION: This snippet demonstrates the structure of a custom search function for Kotti.  It should return a list of dictionaries, each representing a search result with a title, description, and path.\nSOURCE: https://github.com/kotti/kotti/blob/master/docs/developing/basic/configuration.rst#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n[{'title': 'Title of search result 1',\n  'description': 'Description of search result 1',\n  'path': '/path/to/search-result-1'},\n {'title': 'Title of search result 2',\n  'description': 'Description of search result 2',\n  'path': '/path/to/search-result-2'},\n ...\n ]\n```\n\n----------------------------------------\n\nTITLE: PasteDeploy Configuration for Kotti Integration\nDESCRIPTION: This INI snippet demonstrates how to configure a Pyramid application using PasteDeploy, integrating Kotti by specifying the 'myapp' entry point and including necessary settings such as the SQLAlchemy URL and Kotti secret.\nSOURCE: https://github.com/kotti/kotti/blob/master/docs/developing/advanced/as-a-library.rst#_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[app:myapp]\nuse = egg:myapp\npyramid.includes = pyramid_tm\nmail.default_sender = yourname@yourhost\nsqlalchemy.url = sqlite:///%(here)s/myapp.db\nkotti.secret = secret\n\n[filter:fanstatic]\nuse = egg:fanstatic#fanstatic\n\n[pipeline:main]\npipeline =\n    fanstatic\n    myapp\n```\n\n----------------------------------------\n\nTITLE: Running Kotti with pserve\nDESCRIPTION: This snippet uses the pserve command to start the Kotti application with the downloaded configuration file. It runs the Waitress WSGI server and serves the Kotti application.\nSOURCE: https://github.com/kotti/kotti/blob/master/docs/first_steps/installation.rst#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbin/pserve app.ini\n```\n\n----------------------------------------\n\nTITLE: Configure UI Language to German in Kotti (INI)\nDESCRIPTION: This snippet demonstrates how to configure the Kotti user interface to display in German by setting the `pyramid.default_locale_name` to `de_DE` within the application's .ini configuration file.\nSOURCE: https://github.com/kotti/kotti/blob/master/docs/developing/basic/configuration.rst#_snippet_12\n\nLANGUAGE: ini\nCODE:\n```\npyramid.default_locale_name = de_DE\n```\n\n----------------------------------------\n\nTITLE: Kotti Depot Mountpoint Configuration\nDESCRIPTION: This configuration sets the mountpoint for serving blob data via the Depot middleware.  Requests to this path will be intercepted and handled by Depot, serving the blob directly or redirecting to an external storage.  The default value is /depot.\nSOURCE: https://github.com/kotti/kotti/blob/master/docs/developing/advanced/blobs.rst#_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nkotti.depot_mountpoint = /depot\n```\n\n----------------------------------------\n\nTITLE: Kotti INI Configuration\nDESCRIPTION: Configuration file for the Kotti application, defining settings such as the database connection URL, Pyramid includes, site title, and uWSGI socket. It also configures Fanstatic and Alembic.\nSOURCE: https://github.com/kotti/kotti/blob/master/docs/developing/basic/deployment.rst#_snippet_9\n\nLANGUAGE: ini\nCODE:\n```\n[app:main]\nuse = egg:kotti\npyramid.includes = pyramid_tm\nsqlalchemy.url = postgresql://kotti:<db_password>@127.0.0.1:5432/kotti\nkotti.configurators = kotti_tinymce.kotti_configure\nkotti.site_title = Kotti deployed with fabric\nkotti.secret = qwerty\nfilter-with = fanstatic\n\n[filter:fanstatic]\nuse = egg:fanstatic#fanstatic\n\n[alembic]\nscript_location = kotti:alembic\n\n[uwsgi]\nsocket = /home/kotti/<your_domain>.sock\nmaster = true\nchmod-socket = 666\nprocesses = 2\nlazy = true      # needed if want processes > 1\nlazy-apps = true\n```\n\n----------------------------------------\n\nTITLE: Generating Uploaded File URL for Direct Serving\nDESCRIPTION: This code snippet demonstrates how to generate a direct URL for serving an uploaded file using Kotti's request object. This URL bypasses Kotti's view system and is handled directly by a Pyramid tween for improved performance, without permission checks.\nSOURCE: https://github.com/kotti/kotti/blob/master/docs/developing/advanced/blobs.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> request.uploaded_file_url(file.data, 'attachment')\n'http://localhost//depot/dbfiles/68f31e97-a7f9-11e5-be07-c82a1403e6a7/download'\n```\n\n----------------------------------------\n\nTITLE: Install Kotti Dependencies\nDESCRIPTION: Installs Kotti and its dependencies from the specified requirements file, and installs a specific version of Kotti (0.8a1), within the virtual environment. This step uses pip as the package installer.\nSOURCE: https://github.com/kotti/kotti/blob/master/docs/developing/basic/deployment.rst#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nsudo -u kotti /home/kotti/bin/pip install -r https://raw.github.com/Kotti/Kotti/0.8a1/requirements.txt\nsudo -u kotti /home/kotti/bin/pip install Kotti==0.8a1\n```\n\n----------------------------------------\n\nTITLE: Creating a Vote View for Choices in Python\nDESCRIPTION: This code defines a view that is called when a user votes for a specific choice. It increments the vote count for the selected choice and redirects the user back to the parent poll. The view uses the `Choice` resource and the `HTTPFound` exception for redirection.\nSOURCE: https://github.com/kotti/kotti/blob/master/docs/first_steps/tut-3.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom kotti_mysite.resources import Choice\nfrom pyramid.httpexceptions import HTTPFound\n\n\n@view_defaults(context=Choice)\nclass ChoiceViews(BaseView):\n    \"\"\" Views for :class:`kotti_mysite.resources.Choice` \"\"\"\n\n    @view_config(name='vote', permission='view')\n    def vote_view(self):\n        self.context.votes += 1\n        return HTTPFound(\n            location=self.request.resource_url(self.context.parent))\n```\n\n----------------------------------------\n\nTITLE: Default Fanstatic Resources INI\nDESCRIPTION: This INI configuration displays the default Fanstatic resources included in Kotti for both edit and view modes. It shows how the `kotti.fanstatic.edit_needed` and `kotti.fanstatic.view_needed` settings are configured.\nSOURCE: https://github.com/kotti/kotti/blob/master/docs/developing/advanced/static-resource-management.rst#_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\n[app:kotti]\n\nkotti.fanstatic.edit_needed = kotti.fanstatic.edit_needed\nkotti.fanstatic.view_needed = kotti.fanstatic.view_needed\n```\n\n----------------------------------------\n\nTITLE: Downloading Kotti Configuration file\nDESCRIPTION: This snippet uses wget to download an example Kotti configuration file (app.ini) from the Kotti GitHub repository. The app.ini file configures how Kotti will run using Paste Deploy.\nSOURCE: https://github.com/kotti/kotti/blob/master/docs/first_steps/installation.rst#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nwget https://raw.github.com/Kotti/Kotti/stable/app.ini\n```\n\n----------------------------------------\n\nTITLE: HTML Template for Poll View\nDESCRIPTION: This HTML template displays the poll question and its choices.  It iterates through the choices passed from the view, displaying each choice as a list item. The template uses TAL and METAL namespaces for templating and macro usage.\nSOURCE: https://github.com/kotti/kotti/blob/master/docs/first_steps/tut-2.rst#_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html xmlns:tal=\"http://xml.zope.org/namespaces/tal\"\n      xmlns:metal=\"http://xml.zope.org/namespaces/metal\"\n      metal:use-macro=\"api.macro('kotti:templates/view/master.pt')\">\n\n  <article metal:fill-slot=\"content\" class=\"poll-view content\">\n    <h1>${context.title}</h1>\n    <ul>\n\n```\n\n----------------------------------------\n\nTITLE: Implement custom content (Python)\nDESCRIPTION: This code shows how to implement the custom content type by inheriting from `Content` and implementing the `ICustomContent` interface. This connects a particular class to the custom workflow.\nSOURCE: https://github.com/kotti/kotti/blob/master/docs/developing/basic/security.rst#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom kotti.resources import Content\nfrom zope.interface import implements\n\nfrom kotti_wf.interfaces import ICustomContent\n\n\nclass CustomContent(Content):\n    \"\"\" A custom content type. \"\"\"\n\n    implements(ICustomContent)\n```\n\n----------------------------------------\n\nTITLE: Kotti Sanitizer Configuration\nDESCRIPTION: This code shows the default configuration for Kotti sanitizers. It defines three sanitizers: xss_protection, minimal_html, and no_html, mapping each name to a dotted path pointing to the corresponding function.\nSOURCE: https://github.com/kotti/kotti/blob/master/docs/developing/advanced/sanitizers.rst#_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nkotti.sanitizers =\n    xss_protection:kotti.sanitizers.xss_protection\n    minimal_html:kotti.sanitizers.minimal_html\n    no_html:kotti.sanitizers.no_html\n```\n\n----------------------------------------\n\nTITLE: Kotti Local Filesystem Storage Configuration\nDESCRIPTION: This configuration snippet shows how to configure Kotti to use a local filesystem-backed filestorage. It specifies the name, backend class, and storage path for the storage. An additional DB filestorage is also configured.\nSOURCE: https://github.com/kotti/kotti/blob/master/docs/developing/advanced/blobs.rst#_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\nkotti.depot.0.name = localfs\nkotti.depot.0.backend = depot.io.local.LocalFileStorage\nkotti.depot.0.storage_path = /var/local/files\nkotti.depot.1.name = dbfiles\nkotti.depot.1.backend = kotti.filedepot.DBFileStorage\n```\n\n----------------------------------------\n\nTITLE: Rendering Poll Choices HTML\nDESCRIPTION: This HTML snippet iterates through the available 'choices' and renders each choice as a list item within an unordered list. The 'choice.title' attribute is used to display the title of each choice.\nSOURCE: https://github.com/kotti/kotti/blob/master/docs/first_steps/tut-2.rst#_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<li tal:repeat=\"choice choices\">${choice.title}</li>\n      </ul>\n    </article>\n  </html>\n```\n\n----------------------------------------\n\nTITLE: Configure Kotti add-on in app.ini\nDESCRIPTION: This example shows how to configure the Kotti add-on by adding it to the kotti.configurators setting in the app.ini file. This allows the add-on's kotti_configure function to be called on application startup.\nSOURCE: https://github.com/kotti/kotti/blob/master/docs/first_steps/tut-1.rst#_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\nkotti.configurators = kotti_tinymce.kotti_configure\n```\n\n----------------------------------------\n\nTITLE: Adding documents to the Kotti root node\nDESCRIPTION: Adds three Document objects to the root node, demonstrating how to use the dictionary-like interface of content nodes to create and link child nodes. The keys in the dictionary correspond to the 'name' attribute of the child nodes.\nSOURCE: https://github.com/kotti/kotti/blob/master/kotti/tests/nodes.txt#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> from kotti.resources import Document\n>>> root['first'] = Document(title='First page')\n>>> root['second'] = Document(title='Second page')\n>>> root['third'] = Document(title='Third page')\n```\n\n----------------------------------------\n\nTITLE: Add a new role in Kotti (Python)\nDESCRIPTION: This code snippet demonstrates how to add a new role within a Kotti application, making it available in the share view and user management views.  It updates the ROLES and SHARING_ROLES dictionaries/lists, then uses `set_roles` and `set_sharing_roles` to apply the changes.  The `add_role` function takes the role ID and title as parameters.\nSOURCE: https://github.com/kotti/kotti/blob/master/docs/developing/basic/security.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom kotti.security import (\n    Principal,\n    ROLES,\n    SHARING_ROLES,\n    set_roles,\n    set_sharing_roles,\n    set_user_management_roles,\n    )\nfrom kotti_yourpackage import _\n\n\ndef add_role(role_id, role_title):\n    \"\"\" Add role in share view and user management views \"\"\"\n    UPDATED_ROLES = ROLES.copy()\n    UPDATED_ROLES[role_id] = Principal(role_id,\n                                       title=role_title)\n    UPDATED_SHARING_ROLES = list(SHARING_ROLES)\n    UPDATED_SHARING_ROLES.append(role_id)\n    set_roles(UPDATED_ROLES)\n    set_sharing_roles(UPDATED_SHARING_ROLES)\n    set_user_management_roles(UPDATED_SHARING_ROLES + ['role:admin'])\n\n\nadd_role(u'role:customer', _(u'Customer'))\n```\n\n----------------------------------------\n\nTITLE: Fixing Inheritance Issues with UploadedFileField\nDESCRIPTION: This snippet shows a workaround for inheritance issues with UploadedFileField columns by adding a __declare_last__ classmethod to the superclass model and listening to the set event on the data column.\nSOURCE: https://github.com/kotti/kotti/blob/master/docs/developing/advanced/blobs.rst#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom depot.fields.sqlalchemy import _SQLAMutationTracker\n\nclass File(Content):\n\n    data = UploadedFileField()\n\n    @classmethod\n    def __declare_last__(cls):\n        event.listen(cls.data, 'set', _SQLAMutationTracker._field_set, retval=True)\n```\n\n----------------------------------------\n\nTITLE: Kotti DB-based Filestorage Configuration\nDESCRIPTION: This configuration snippet shows how to configure Kotti to use a database-backed filestorage. It specifies the name and backend class for the storage. By default, Kotti uses this type of storage, persisting file data directly in the SQL database.\nSOURCE: https://github.com/kotti/kotti/blob/master/docs/developing/advanced/blobs.rst#_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\nkotti.depot.0.name = dbfiles\nkotti.depot.0.backend = kotti.filedepot.DBFileStorage\n```\n\n----------------------------------------\n\nTITLE: Supervisor Configuration\nDESCRIPTION: Supervisor configuration file for managing the Kotti application using uWSGI.  It specifies the command to run, the working directory, and automatically restarts the application if it crashes.\nSOURCE: https://github.com/kotti/kotti/blob/master/docs/developing/basic/deployment.rst#_snippet_11\n\nLANGUAGE: ini\nCODE:\n```\n[program:kotti]\nautorestart=true\ncommand=uwsgi_python --ini-paste /home/kotti/kotti.ini\ndirectory=/home/kotti\nredirect_stderr=true\n```\n\n----------------------------------------\n\nTITLE: Define Colander Schemas for Poll and Choice\nDESCRIPTION: These classes define the Colander schemas for the Poll and Choice content types. Each schema includes a title field, which is a string that will be displayed in the forms. The _ function is used for i18n translations.\nSOURCE: https://github.com/kotti/kotti/blob/master/docs/first_steps/tut-2.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport colander\nfrom kotti.views.edit import ContentSchema\nfrom kotti_mysite import _\n\nclass PollSchema(ContentSchema):\n    \"\"\"Schema for Poll\"\"\"\n\n    title = colander.SchemaNode(\n        colander.String(),\n        title=_(u'Question'),\n    )\n\n\nclass ChoiceSchema(ContentSchema):\n    \"\"\"Schema for Choice\"\"\"\n\n    title = colander.SchemaNode(\n        colander.String(),\n        title=_(u'Choice'),\n    )\n```\n\n----------------------------------------\n\nTITLE: Nginx Configuration File\nDESCRIPTION: Defines the Nginx server block configuration for routing requests to the Kotti application via uWSGI. It listens on port 80 and forwards requests to a Unix socket.\nSOURCE: https://github.com/kotti/kotti/blob/master/docs/developing/basic/deployment.rst#_snippet_5\n\nLANGUAGE: nginx\nCODE:\n```\nserver {\n    listen 80;\n    server_name <your_domain>;\n    location / {\n        include uwsgi_params;\n        uwsgi_pass unix:/home/kotti/<your_domain>.sock;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Activating Virtualenv Python\nDESCRIPTION: This snippet demonstrates how to create a virtual environment, navigate into it, and then use pip to install the Kotti package. It sets up a sandboxed environment for Kotti and its dependencies.\nSOURCE: https://github.com/kotti/kotti/blob/master/docs/first_steps/installation.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython3 -m venv mysite\ncd mysite\nbin/pip install Kotti\n```\n\n----------------------------------------\n\nTITLE: Accessing the root node in Kotti\nDESCRIPTION: Retrieves the root node using the get_root function from kotti.resources and verifies that its parent is None. It also demonstrates setting the title of the root node.\nSOURCE: https://github.com/kotti/kotti/blob/master/kotti/tests/nodes.txt#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> from kotti.resources import get_root\n>>> root = get_root()\n>>> root.__parent__ is None\nTrue\n>>> root.title = 'A new title'\n```\n\n----------------------------------------\n\nTITLE: Setting up Virtual Environment for Kotti Development\nDESCRIPTION: Creates and activates a Python virtual environment, then installs Kotti in development mode along with testing dependencies. This allows you to work on Kotti's code without affecting your system's Python environment and includes necessary packages for running tests.\nSOURCE: https://github.com/kotti/kotti/blob/master/docs/contributing.rst#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython3 -m venv .\n\nbin/pip install -e \".[testing]\"\n```\n\n----------------------------------------\n\nTITLE: Building Kotti Developer Documentation\nDESCRIPTION: Installs the necessary dependencies to build the Kotti documentation, navigates to the documentation directory, and generates the HTML documentation files. This allows contributors to preview documentation changes locally before submitting them.\nSOURCE: https://github.com/kotti/kotti/blob/master/docs/contributing.rst#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npython setup.py docs\n\ncd docs/\n\nmake html\n```\n\n----------------------------------------\n\nTITLE: Setting Site ACL in Kotti\nDESCRIPTION: This code snippet sets the Access Control List (ACL) for the Kotti site, restricting the 'view' permission to users with the 'viewer' role and granting 'view', 'add', and 'edit' permissions to users with the 'editor' role.  It uses the `kotti.resources.get_root` function to access the root object and modifies its `__acl__` attribute.\nSOURCE: https://github.com/kotti/kotti/blob/master/docs/developing/advanced/close-to-anonymous.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom kotti.resources import get_root\n\nSITE_ACL = [\n   (u'Allow', u'role:viewer', [u'view']),\n   (u'Allow', u'role:editor', [u'view', u'add', u'edit']),\n  ]\n\n  def populate():\n      site = get_root()\n      site.__acl__ = SITE_ACL\n```\n\n----------------------------------------\n\nTITLE: Create Virtualenv\nDESCRIPTION: Creates a Python virtual environment for the Kotti application, isolated from the system's Python installation.  The '--no-site-packages' option ensures a clean environment.\nSOURCE: https://github.com/kotti/kotti/blob/master/docs/developing/basic/deployment.rst#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nsudo -u kotti virtualenv --no-site-packages /home/kotti\n```\n\n----------------------------------------\n\nTITLE: Configure Kotti add-on with multiple configurators\nDESCRIPTION: This example shows how to configure the Kotti add-on by adding it to the kotti.configurators setting in the app.ini file. This allows the add-on's kotti_configure function to be called on application startup, alongside other configurators.\nSOURCE: https://github.com/kotti/kotti/blob/master/docs/first_steps/tut-1.rst#_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\nkotti.configurators =\n    kotti_tinymce.kotti_configure\n    kotti_mysite.kotti_configure\n```\n\n----------------------------------------\n\nTITLE: Install Nginx (Ubuntu)\nDESCRIPTION: Installs the Nginx web server on an Ubuntu system.  Nginx will be configured to serve the Kotti application.\nSOURCE: https://github.com/kotti/kotti/blob/master/docs/developing/basic/deployment.rst#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\napt-get install nginx-full\n```\n\n----------------------------------------\n\nTITLE: Updating Poll View to Display Vote Counts in Python\nDESCRIPTION: This code snippet updates the `poll_view` function to calculate the total number of votes for all choices in the poll. The result is then passed to the template to display the vote distribution.\nSOURCE: https://github.com/kotti/kotti/blob/master/docs/first_steps/tut-3.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef poll_view(self):\n    css_and_js.need()\n    choices = self.context.values()\n    all_votes = sum(choice.votes for choice in choices)\n    return {\n        'choices': choices,\n        'all_votes': all_votes\n    }\n```\n\n----------------------------------------\n\nTITLE: Running Database Migrations with kotti-migrate\nDESCRIPTION: This snippet shows how to use the `kotti-migrate` command to upgrade the Kotti database to the latest version.  It requires a configuration file and the `upgrade` command.  Backing up the database is strongly recommended before running the migration.\nSOURCE: https://github.com/kotti/kotti/blob/master/CHANGES.txt#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nbin/kotti-migrate <myconfig.ini> upgrade\n```\n\n----------------------------------------\n\nTITLE: Configuring LocalFileStorage and DBFileStorage in Kotti (INI)\nDESCRIPTION: This configuration snippet demonstrates how to configure a LocalFileStorage and a DBFileStorage in Kotti. The LocalFileStorage is set as the default depot (0), and the DBFileStorage is placed in position 1. The storage paths and names are defined for each depot.\nSOURCE: https://github.com/kotti/kotti/blob/master/docs/developing/advanced/blobs.rst#_snippet_10\n\nLANGUAGE: ini\nCODE:\n```\nkotti.depot.0.backend = depot.io.local.LocalFileStorage\nkotti.depot.0.name = localfs\nkotti.depot.0.storage_path = /var/local/files\nkotti.depot.1.backend = kotti.filedepot.DBFileStorage\nkotti.depot.1.name = dbfiles\n```\n\n----------------------------------------\n\nTITLE: Template for Custom Submenu Kotti HTML\nDESCRIPTION: This HTML snippet defines the template for the custom submenu. It includes a divider, a header, and a link. The 'href' attribute of the link uses the request.resource_url function to generate a URL for the 'someview' view in the current context.\nSOURCE: https://github.com/kotti/kotti/blob/master/docs/developing/advanced/add-to-edit-interface.rst#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<tal:menu i18n:domain=\"mypackage\">\n    <li class=\"divider\"></li>\n    <li role=\"presentation\" class=\"dropdown-header\" i18n:translate=\"\">\n        My own actions\n    </li>\n    <li>\n        <a i18n:translate=\"\" href=\"${request.resource_url(context, 'someview')}\">\n            View title here\n        </a>\n    </li>\n</tal:menu\n```\n\n----------------------------------------\n\nTITLE: Configuring Principals Factory in INI File\nDESCRIPTION: This snippet demonstrates how to configure Kotti to use a different Principals implementation by pointing the kotti.principals_factory configuration setting to a different factory in the INI file. It shows the default setting, which uses the kotti.security.principals_factory. The code configures principals factory via the .ini file.\nSOURCE: https://github.com/kotti/kotti/blob/master/docs/developing/basic/developer-manual.rst#_snippet_7\n\nLANGUAGE: ini\nCODE:\n```\nkotti.principals_factory = kotti.security.principals_factory\n```\n\n----------------------------------------\n\nTITLE: Custom CSS styles for Kotti add-on\nDESCRIPTION: This CSS code adds a text shadow to h1, h2, and h3 headings. This example is used to demonstrate how to add custom CSS to a Kotti site using Fanstatic.\nSOURCE: https://github.com/kotti/kotti/blob/master/docs/first_steps/tut-1.rst#_snippet_5\n\nLANGUAGE: css\nCODE:\n```\nh1, h2, h3 {\n  text-shadow: 4px 4px 2px #ccc;\n}\n```\n\n----------------------------------------\n\nTITLE: Subscribe to Specific Event and Object Type in Kotti\nDESCRIPTION: This code snippet illustrates how to subscribe to a specific event type (`ObjectDelete`) and limit the subscription to a specific object type (`Document`). The `document_delete_handler` function will only be executed when a `Document` object is deleted. The handler function receives an `event` argument with `object` and `request` attributes.\nSOURCE: https://github.com/kotti/kotti/blob/master/docs/developing/advanced/events.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom kotti.events import ObjectDelete\nfrom kotti.events import subscribe\nfrom kotti.resources import Document\n\n@subscribe(ObjectDelete, Document)\ndef document_delete_handler(event):\n    print event.object, event.request\n```\n\n----------------------------------------\n\nTITLE: Adding a new translation\nDESCRIPTION: This command adds a new translation by specifying the 2-letter code of the new language as an argument to the i18n.sh script.\nSOURCE: https://github.com/kotti/kotti/blob/master/docs/developing/basic/translations.rst#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./i18n.sh <2 letter code of the new language>\n```\n\n----------------------------------------\n\nTITLE: Configure UI Language in Kotti (INI)\nDESCRIPTION: This snippet configures the user interface language for a Kotti application. It sets the `pyramid.default_locale_name` setting in the application's .ini file to a specific locale, such as German (`de_DE`). This determines the language in which the Kotti user interface is displayed.\nSOURCE: https://github.com/kotti/kotti/blob/master/docs/developing/basic/configuration.rst#_snippet_11\n\nLANGUAGE: ini\nCODE:\n```\npyramid.default_locale_name = en\n```\n\n----------------------------------------\n\nTITLE: Create PostgreSQL User\nDESCRIPTION: Creates a new PostgreSQL user with limited privileges.  The user is named 'kotti', and a password is required. The user is not granted superuser or database creation permissions.\nSOURCE: https://github.com/kotti/kotti/blob/master/docs/developing/basic/deployment.rst#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo -u postgres createuser -P\n\nEnter name of role to add: kotti\nEnter password for new role:\nEnter it again:\nShall the new role be a superuser? (y/n) n\nShall the new role be allowed to create databases? (y/n) n\nShall the new role be allowed to create more new roles? (y/n) n\n```\n\n----------------------------------------\n\nTITLE: Kotti Populators Configuration\nDESCRIPTION: This snippet shows the default configuration for `kotti.populators`, which are functions called on system startup to make automatic changes to the database.\nSOURCE: https://github.com/kotti/kotti/blob/master/docs/developing/basic/configuration.rst#_snippet_8\n\nLANGUAGE: ini\nCODE:\n```\nkotti.populators = kotti.populate.populate\n```\n\n----------------------------------------\n\nTITLE: Minifying CSS and JS resources with setup script\nDESCRIPTION: This snippet describes how to use the 'minify' command in the setup script to compress CSS and JS resources. It relies on the YUI compressor and requires a JVM on the development machine.\nSOURCE: https://github.com/kotti/kotti/blob/master/CHANGES.txt#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\npython setup.py dev\npython setup.py minify\n```\n\n----------------------------------------\n\nTITLE: Assigning Value to UploadedFileField using cgi.FieldStorage\nDESCRIPTION: This example shows how to assign a value to an UploadedFileField using a cgi.FieldStorage compatible dictionary. This is particularly useful when handling file uploads from forms, as the data structure is compatible with Deform's FileUploadWidget.\nSOURCE: https://github.com/kotti/kotti/blob/master/docs/developing/advanced/blobs.rst#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom StringIO import StringIO\nfrom kotti.util import _to_fieldstorage\n\ncontent = '...'\ndata = {\n        'fp': StringIO(content),\n        'filename': 'avatar.png',\n        'mimetype': 'image/png',\n        'size': len(content),\n        }\nperson = Person()\nperson.avatar = _to_fieldstorage(**data)\n```\n\n----------------------------------------\n\nTITLE: Accessing keys and values of Kotti nodes\nDESCRIPTION: Shows how to retrieve the ordered lists of keys and values from a Kotti content node. This highlights the dictionary-like interface for accessing child nodes and their order.\nSOURCE: https://github.com/kotti/kotti/blob/master/kotti/tests/nodes.txt#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> root.keys()\n['first', 'third']\n>>> first.keys()\n['copy-of-second']\n>>> root.values()\n[<Document ... at /first>, <Document ... at /third>]\n```\n\n----------------------------------------\n\nTITLE: Enabling Template Reloading in Kotti INI\nDESCRIPTION: This INI configuration snippet enables template reloading and debugging in a Kotti application. Setting 'pyramid.reload_templates' to 'true' allows changes to templates to be reflected without restarting the application.  'pyramid.debug_templates' enables template debugging.\nSOURCE: https://github.com/kotti/kotti/blob/master/docs/first_steps/tut-2.rst#_snippet_11\n\nLANGUAGE: ini\nCODE:\n```\n[app:kotti]\npyramid.reload_templates = true\npyramid.debug_templates = true\n```\n\n----------------------------------------\n\nTITLE: Expanded Default Fanstatic Resources INI\nDESCRIPTION: This INI configuration provides an expanded view of the default Fanstatic resource settings in Kotti. It clarifies that `edit_needed` and `view_needed` are actually shortcuts for combining JS and CSS resources.\nSOURCE: https://github.com/kotti/kotti/blob/master/docs/developing/advanced/static-resource-management.rst#_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\n[app:kotti]\n\nkotti.fanstatic.edit_needed =\n    kotti.fanstatic.edit_needed_js\n    kotti.fanstatic.edit_needed_css\n\nkotti.fanstatic.view_needed =\n    kotti.fanstatic.view_needed_js\n    kotti.fanstatic.view_needed_css\n```\n\n----------------------------------------\n\nTITLE: Programmatically Modifying Kotti Settings\nDESCRIPTION: This code illustrates how to programmatically modify Kotti configuration settings using the kotti_configure function. It shows how to modify kotti.base_includes and kotti.principals_factory. This function is designed to be called at application startup to customize Kotti's behavior.\nSOURCE: https://github.com/kotti/kotti/blob/master/docs/developing/basic/developer-manual.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# in mypackage/__init__.py\ndef kotti_configure(config):\n    config['kotti.base_includes'] += ' mypackage.views'\n    config['kotti.principals_factory'] = 'mypackage.security.principals'\n```\n\n----------------------------------------\n\nTITLE: Kotti Twitter Widget Configuration\nDESCRIPTION: This snippet shows how to configure the `kotti_twitter` widget, including setting the user and loop options.  These settings are added to the INI file along with the `pyramid.includes` setting.\nSOURCE: https://github.com/kotti/kotti/blob/master/docs/developing/basic/configuration.rst#_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\nkotti_twitter.profile_widget.user = dnouri\nkotti_twitter.profile_widget.loop = true\n```\n\n----------------------------------------\n\nTITLE: Querying Nodes by Path in SQLAlchemy\nDESCRIPTION: This code snippet demonstrates how to query `Node` objects in Kotti using SQLAlchemy to find all children, grandchildren, etc., of a given node based on its path. It leverages the `Node.path` column introduced in Kotti 0.10a2 for efficient path-based queries. Requires SQLAlchemy and Kotti's Node model.\nSOURCE: https://github.com/kotti/kotti/blob/master/CHANGES.txt#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nDBSession.query(Node).filter(Node.path.startswith(mynode.path))\n```\n\n----------------------------------------\n\nTITLE: Template Sanitization with Kotti TemplateAPI\nDESCRIPTION: This code demonstrates how to use the TemplateAPI to sanitize content within a Kotti template. The api.sanitize method is called with the context property to be sanitized and the name of the desired sanitizer.\nSOURCE: https://github.com/kotti/kotti/blob/master/docs/developing/advanced/sanitizers.rst#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n${api.sanitize(context.foo, 'minimal_html')}\n```\n\n----------------------------------------\n\nTITLE: Running Testing Dependencies via Setup Script\nDESCRIPTION: This snippet instructs the user to run the setup script with the 'dev' option to install the necessary dependencies for testing Kotti. This command is used after removing test-related dependencies from the requirements.txt file.\nSOURCE: https://github.com/kotti/kotti/blob/master/CHANGES.txt#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npython setup.py dev\n```\n\n----------------------------------------\n\nTITLE: Creating StoredFileResponse\nDESCRIPTION: This code snippet shows how to create a StoredFileResponse object using Kotti's request object and file data. This response is returned when the attachment view URL is requested, allowing Kotti to manage the file serving process with permission checks.\nSOURCE: https://github.com/kotti/kotti/blob/master/docs/developing/advanced/blobs.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> request.uploaded_file_response(file.data)\n<StoredFileResponse at 0x10c8d22d0 200 OK>\n```\n\n----------------------------------------\n\nTITLE: Running Kotti Database Migration\nDESCRIPTION: This code snippet shows how to run a Kotti database migration using the `kotti-migrate` command. It's essential for upgrading from older versions, especially when database schema changes are involved. The `<myconfig.ini>` placeholder should be replaced with the actual path to your Kotti configuration file.\nSOURCE: https://github.com/kotti/kotti/blob/master/CHANGES.txt#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/kotti-migrate <myconfig.ini> upgrade\n```\n\n----------------------------------------\n\nTITLE: Moving a node by changing the parent\nDESCRIPTION: Shows how to move a Kotti node to a different parent by assigning the new parent to the node's '__parent__' attribute. This changes the node's location within the content hierarchy.\nSOURCE: https://github.com/kotti/kotti/blob/master/kotti/tests/nodes.txt#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n>>> third.__parent__\n<Document ... at />\n>>> third.__parent__ = first\n>>> root.keys()\n['first']\n>>> first.keys()\n['copy-of-second', 'third']\n```\n\n----------------------------------------\n\nTITLE: Configure URL Normalization in Kotti (INI)\nDESCRIPTION: This snippet configures URL normalization in Kotti by setting `kotti.url_normalizer.map_non_ascii_characters` to `True`, which replaces language-specific characters with their ASCII equivalents in URLs.\nSOURCE: https://github.com/kotti/kotti/blob/master/docs/developing/basic/configuration.rst#_snippet_15\n\nLANGUAGE: ini\nCODE:\n```\nkotti.url_normalzier = kotti.url_normalizer.url_normalizer\nkotti.url_normalizer.map_non_ascii_characters = True\n```\n\n----------------------------------------\n\nTITLE: Creating a View for the Custom Submenu Kotti Python\nDESCRIPTION: This snippet defines a view configuration for the custom submenu. The view is named 'my-custom-submenu', requires 'edit' permission, and renders a template located at 'mypackage:templates/edit/my-custom-submenu.pt'. It returns an empty dictionary, which can be populated with data for the template.\nSOURCE: https://github.com/kotti/kotti/blob/master/docs/developing/advanced/add-to-edit-interface.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@view_config(\n    name=\"my-custom-submenu\", permission=\"edit\",\n    renderer=\"mypackage:templates/edit/my-custom-submenu.pt\")\ndef my_custom_submenu(context, request):\n    return {}\n```\n\n----------------------------------------\n\nTITLE: Modifying Poll Template to Link to Vote View in HTML\nDESCRIPTION: This code modifies the poll template (`poll.pt`) to create a link to the vote view for each choice.  The link includes the choice title and current vote count. The vote count is displayed as `choice.votes/all_votes`.\nSOURCE: https://github.com/kotti/kotti/blob/master/docs/first_steps/tut-3.rst#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<li tal:repeat=\"choice choices\">\n  <a href=\"${request.resource_url(choice)}vote\">\n    ${choice.title}\n  </a> (${choice.votes}/${all_votes})\n</li>\n```\n\n----------------------------------------\n\nTITLE: Configure default workflow (INI)\nDESCRIPTION: This snippet shows how to specify the default workflow definition file in Kotti using the `kotti.use_workflow` setting within the application's `.ini` configuration file. This determines the workflow applied to content types by default.\nSOURCE: https://github.com/kotti/kotti/blob/master/docs/developing/basic/security.rst#_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\nkotti.use_workflow = kotti:workflow.zcml\n```\n\n----------------------------------------\n\nTITLE: Kotti Sanitize-on-Write with Multiple Sanitizers\nDESCRIPTION: This example demonstrates configuring sanitize-on-write with multiple sanitizers for a single attribute. The sanitizers are specified as a comma-separated list.\nSOURCE: https://github.com/kotti/kotti/blob/master/docs/developing/advanced/sanitizers.rst#_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\nkotti.sanitize_on_write =\n    kotti.resources.Document.body:xss_protection,some_other_sanitizer\n```\n\n----------------------------------------\n\nTITLE: Kotti reset workflow command (Bash)\nDESCRIPTION: This snippet shows the usage of the `kotti-reset-workflow` console script. This script is used to reset the workflow of all content objects in the database, which is necessary after changes have been made to the workflow settings. The `--purge-existing` option will reset all objects to the new workflow's initial state.\nSOURCE: https://github.com/kotti/kotti/blob/master/docs/developing/basic/security.rst#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ kotti-reset-workflow --help\nReset the workflow of all content objects in the database.\n\n    This is useful when you want to migrate an existing database to\n    use a different workflow.  When run, this script will reset all\n    your content objects to use the new workflow, while trying to\n    preserve workflow state information.\n\n    For this command to work, all currently persisted states must map\n    directly to a state in the new workflow.  As an example, if\n    there's a 'public' object in the database, the new workflow must\n    define 'public' also.\n\n    If this is not the case, you may choose to reset all your content\n    objects to the new workflow's *initial state* by passing the\n    '--purge-existing' option.\n\n    Usage:\n      kotti-reset-workflow <config_uri> [--purge-existing]\n\n    Options:\n      -h --help          Show this screen.\n      --purge-existing   Reset all objects to new workflow's initial state.\n```\n\n----------------------------------------\n\nTITLE: Install cookiecutter and scaffold Kotti add-on\nDESCRIPTION: These commands install cookiecutter and use it to scaffold a Kotti add-on project. Cookiecutter will prompt for project details, then generate the basic file structure for the add-on.\nSOURCE: https://github.com/kotti/kotti/blob/master/docs/first_steps/tut-1.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install cookiecutter\ncookiecutter https://github.com/Kotti/kotti-cookiecutter\n```\n\n----------------------------------------\n\nTITLE: Create PostgreSQL Database\nDESCRIPTION: Creates a new PostgreSQL database owned by the 'kotti' user. This database will be used by the Kotti application.\nSOURCE: https://github.com/kotti/kotti/blob/master/docs/developing/basic/deployment.rst#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo -u postgres createdb -O kotti kotti\n```\n\n----------------------------------------\n\nTITLE: Create Kotti User\nDESCRIPTION: Creates a system user account specifically for running the Kotti application. The '-m' flag creates a home directory for the user.\nSOURCE: https://github.com/kotti/kotti/blob/master/docs/developing/basic/deployment.rst#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nuseradd -m kotti\n```\n\n----------------------------------------\n\nTITLE: Kotti Includes Order Configuration\nDESCRIPTION: This snippet demonstrates how the order of includes in `pyramid.includes` affects the order in which widgets are displayed.  The search widget is displayed above the profile widget in this example.\nSOURCE: https://github.com/kotti/kotti/blob/master/docs/developing/basic/configuration.rst#_snippet_5\n\nLANGUAGE: ini\nCODE:\n```\npyramid.includes =\n    kotti_twitter.include_search_widget\n    kotti_twitter.include_profile_widget\n```\n\n----------------------------------------\n\nTITLE: Overriding Kotti's Fanstatic Resources INI\nDESCRIPTION: This INI configuration demonstrates how to override Kotti's default Fanstatic resources by specifying custom resources for edit and view modes. This allows developers to replace Kotti's default CSS with their own.\nSOURCE: https://github.com/kotti/kotti/blob/master/docs/developing/advanced/static-resource-management.rst#_snippet_5\n\nLANGUAGE: ini\nCODE:\n```\n[app:kotti]\n\nkotti.fanstatic.edit_needed =\n    kotti.fanstatic.edit_needed_js\n    myapp.fanstatic.js_resource\n    myapp.fanstatic.css_resource\n\nkotti.fanstatic.view_needed =\n    kotti.fanstatic.view_needed_js\n    myapp.fanstatic.css_resource\n```\n\n----------------------------------------\n\nTITLE: Cloning Kotti Repository with Git\nDESCRIPTION: Clones the Kotti repository from GitHub to your local machine, adds the original Kotti repository as an upstream remote, allowing you to fetch updates. This is the first step in contributing to the Kotti project via Git.\nSOURCE: https://github.com/kotti/kotti/blob/master/docs/contributing.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/your_github/Kotti.git\n\ncd Kotti\n\ngit remote add upstream git://github.com/Kotti/Kotti.git\n```\n\n----------------------------------------\n\nTITLE: Install Supervisor (Ubuntu)\nDESCRIPTION: Installs Supervisor, a process control system, on an Ubuntu system. Supervisor will be used to manage the Kotti application and uWSGI.\nSOURCE: https://github.com/kotti/kotti/blob/master/docs/developing/basic/deployment.rst#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\napt-get install supervisor\n```\n\n----------------------------------------\n\nTITLE: Setting Default View for a Kotti Content Object in Python\nDESCRIPTION: This snippet demonstrates how to set the default view for a Kotti content object, specifically setting the 'front-page' view for the root object. It uses the `get_root` function to retrieve the root object and then assigns the desired view name to its `default_view` attribute. This snippet is typically used within a Kotti populator.\nSOURCE: https://github.com/kotti/kotti/blob/master/docs/developing/advanced/frontpage-different-template.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom kotti.resources import get_root\n\ndef populate():\n    site = get_root()\n    site.default_view = 'front-page'\n```\n\n----------------------------------------\n\nTITLE: Cloning Kotti Repository with Git\nDESCRIPTION: This code snippet demonstrates how to clone the Kotti CMS repository from GitHub using the git command-line tool. This is the first step for developers who want to contribute to Kotti or extend its functionality. It requires git to be installed on the user's system.\nSOURCE: https://github.com/kotti/kotti/blob/master/docs/first_steps/overview.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:Kotti/Kotti\n```\n\n----------------------------------------\n\nTITLE: Setup.py Entry Point for Fanstatic PYTHON\nDESCRIPTION: This Python code snippet shows the `entry_points` configuration in a package's `setup.py` file. It defines an entry point for Fanstatic libraries, allowing Kotti to discover and use the defined resources.\nSOURCE: https://github.com/kotti/kotti/blob/master/docs/developing/advanced/static-resource-management.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nentry_points={\n    'fanstatic.libraries': [\n        'foo = my_package:my_library',\n        ],\n    },\n```\n\n----------------------------------------\n\nTITLE: Reload Supervisor Configuration\nDESCRIPTION: Reloads the Supervisor configuration to apply any changes made to the configuration files. This command is used to start or restart managed processes.\nSOURCE: https://github.com/kotti/kotti/blob/master/docs/developing/basic/deployment.rst#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nsupervisorctl reload\n```\n\n----------------------------------------\n\nTITLE: Hooking Up Kotti Configuration in INI File\nDESCRIPTION: This snippet shows how to hook up a custom kotti_configure function in an INI file using the kotti.configurators setting. This allows extending packages to set other INI settings through Python. The code configures Kotti configurators via the .ini file.\nSOURCE: https://github.com/kotti/kotti/blob/master/docs/developing/basic/developer-manual.rst#_snippet_5\n\nLANGUAGE: ini\nCODE:\n```\nkotti.configurators = mypackage.kotti_configure\n```\n\n----------------------------------------\n\nTITLE: Import necessary modules for views and forms\nDESCRIPTION: This snippet imports modules from Colander, Kotti, and Pyramid to define schemas, forms, and views for the Poll and Choice content types. _ is used for i18n translations.\nSOURCE: https://github.com/kotti/kotti/blob/master/docs/first_steps/tut-2.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport colander\nfrom kotti.views.edit import ContentSchema\nfrom kotti.views.form import AddFormView\nfrom kotti.views.form import EditFormView\nfrom pyramid.view import view_config\n\nfrom kotti_mysite import _\n```\n\n----------------------------------------\n\nTITLE: Reading Blob Data from UploadedFileField\nDESCRIPTION: This code snippet demonstrates how to read the actual blob data from an UploadedFileField. It retrieves the file stream using the 'file' attribute and reads the data. It is crucial to only assign a new value to UploadedFileField columns, and not write to the file stream directly.\nSOURCE: https://github.com/kotti/kotti/blob/master/docs/developing/advanced/blobs.rst#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nperson = DBSession.query(Person).get(1)\nblob = person.avatar.file.read()\n```\n\n----------------------------------------\n\nTITLE: Install Fabric and Fabtools\nDESCRIPTION: Installs the Fabric and Fabtools packages within the newly created virtual environment. These packages are used for automating deployment tasks.\nSOURCE: https://github.com/kotti/kotti/blob/master/docs/developing/basic/deployment.rst#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\npip install fabric fabtools\n```\n\n----------------------------------------\n\nTITLE: Including Kotti Test Fixtures (python)\nDESCRIPTION: This line includes all of Kotti's fixtures and funcargs in your own package's tests.  It must be added to your conftest.py file.\nSOURCE: https://github.com/kotti/kotti/blob/master/docs/developing/basic/testing.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\npytest_plugins = \"kotti\"\n```\n\n----------------------------------------\n\nTITLE: Restart Kotti application after CSS change\nDESCRIPTION: These commands change the directory to the parent directory and restart the Kotti application using pserve. This is required to apply the changes made to the CSS file.\nSOURCE: https://github.com/kotti/kotti/blob/master/docs/first_steps/tut-1.rst#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncd ..\nbin/pserve app.ini\n```\n\n----------------------------------------\n\nTITLE: Fanstatic library definition in kotti_mysite\nDESCRIPTION: This Python code defines a Fanstatic library for the Kotti add-on, including CSS and JavaScript resources and grouping them. This allows for easy management and inclusion of static assets in the Kotti site.\nSOURCE: https://github.com/kotti/kotti/blob/master/docs/first_steps/tut-1.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom fanstatic import Group\nfrom fanstatic import Library\nfrom fanstatic import Resource\n\n\nlibrary = Library(\"kotti_mysite\", \"static\")\n\ncss = Resource(\n    library,\n    \"styles.css\",\n    minified=\"styles.min.css\")\njs = Resource(\n    library,\n    \"scripts.js\",\n    minified=\"scripts.min.js\")\n\ncss_and_js = Group([css, js])\n```\n\n----------------------------------------\n\nTITLE: Disabling Fanstatic in Kotti INI\nDESCRIPTION: This INI configuration shows how to completely disable Fanstatic in a Kotti application. By removing the Fanstatic filter from the pipeline, Kotti will not use Fanstatic for managing static resources, requiring manual handling.\nSOURCE: https://github.com/kotti/kotti/blob/master/docs/developing/advanced/static-resource-management.rst#_snippet_6\n\nLANGUAGE: ini\nCODE:\n```\n[app:main]\nuse = egg:kotti\n\n[server:main]\nuse = egg:waitress#main\nhost = 127.0.0.1\nport = 5000\n```\n\n----------------------------------------\n\nTITLE: Reordering child nodes in Kotti\nDESCRIPTION: Illustrates how to change the order of child nodes using the 'children' attribute, which is a SQLAlchemy ordered_list. It demonstrates reordering the children of the root node and verifying the updated order.\nSOURCE: https://github.com/kotti/kotti/blob/master/kotti/tests/nodes.txt#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> root.children\n[<Document ... at /first>, <Document ... at /third>]\n>>> root.children[:] = [root.values()[-1], root.values()[0]]\n>>> root.values()\n[<Document ... at /third>, <Document ... at /first>]\n```\n\n----------------------------------------\n\nTITLE: Create Virtualenv for Fabric\nDESCRIPTION: Creates a virtual environment for the Fabric deployment tool. This isolates the Fabric installation from the system's Python packages.\nSOURCE: https://github.com/kotti/kotti/blob/master/docs/developing/basic/deployment.rst#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nmkvirtualenv kotti_deployment && cdvirtualenv\n```\n\n----------------------------------------\n\nTITLE: Install Kotti Twitter Package\nDESCRIPTION: This snippet shows how to install the `kotti_twitter` package using pip. This is a prerequisite for using the Twitter profile widget.\nSOURCE: https://github.com/kotti/kotti/blob/master/docs/developing/basic/configuration.rst#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nbin/pip install kotti_twitter\n```\n\n----------------------------------------\n\nTITLE: Running Kotti Test Suite (bash)\nDESCRIPTION: This command executes Kotti's test suite using pytest. It assumes that pytest has been installed as part of the testing extras.\nSOURCE: https://github.com/kotti/kotti/blob/master/docs/developing/basic/testing.rst#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbin/py.test\n```\n\n----------------------------------------\n\nTITLE: Copying and deleting Kotti nodes\nDESCRIPTION: Demonstrates how to copy a node using the 'copy()' method and delete a child node using the 'del' operator. The copy is assigned as a child to another node before the original is deleted.\nSOURCE: https://github.com/kotti/kotti/blob/master/kotti/tests/nodes.txt#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> first['copy-of-second'] = root['second'].copy()\n>>> del root['second']\n```\n\n----------------------------------------\n\nTITLE: Tearing down Kotti testing environment\nDESCRIPTION: Tears down the Kotti testing environment by calling the tearDown function from kotti.testing. This cleans up the database and other resources used during testing.\nSOURCE: https://github.com/kotti/kotti/blob/master/kotti/tests/nodes.txt#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n>>> from kotti.testing import tearDown\n>>> tearDown()\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Kotti Sanitizer\nDESCRIPTION: This snippet shows an example of a custom sanitizer function. The function takes an HTML string as input and returns a modified string with 'dogs' replaced by 'cats'.\nSOURCE: https://github.com/kotti/kotti/blob/master/docs/developing/advanced/sanitizers.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef no_dogs_allowed(html):\n    return html.replace('dogs', 'cats')\n\nno_dogs_allowed('<p>I love dogs.</p>')\n```\n\nLANGUAGE: text\nCODE:\n```\n... '<p>I love cats.</p>'\n```\n\n----------------------------------------\n\nTITLE: Installing Kotti Testing Extras (bash)\nDESCRIPTION: This command installs Kotti's testing extras using pip. It ensures that all necessary dependencies for running the tests are installed.\nSOURCE: https://github.com/kotti/kotti/blob/master/docs/developing/basic/testing.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbin/pip install -e .[testing]\n```\n\n----------------------------------------\n\nTITLE: Download Fabfile\nDESCRIPTION: Downloads a pre-configured Fabric file from a remote URL. This file contains the deployment automation logic.\nSOURCE: https://github.com/kotti/kotti/blob/master/docs/developing/basic/deployment.rst#_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nwget https://gist.github.com/gists/4079191/download\n```\n\n----------------------------------------\n\nTITLE: Database Migration using kotti-migrate\nDESCRIPTION: This code snippet provides the command to run the Kotti migration script after upgrading from version 0.9.2 to 0.10. It uses the `kotti-migrate` command-line tool to apply database schema changes. Make sure you backup your database before running the migration.\nSOURCE: https://github.com/kotti/kotti/blob/master/CHANGES.txt#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/kotti-migrate <myconfig.ini> upgrade\n```\n\n----------------------------------------\n\nTITLE: Running the i18n script\nDESCRIPTION: This script extracts new messages into the .pot file, updates the existing .po files, and compiles them to .mo files for internationalization.\nSOURCE: https://github.com/kotti/kotti/blob/master/docs/developing/basic/translations.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./i18n.sh\n```\n\n----------------------------------------\n\nTITLE: Initializing a Kotti Link Object Python\nDESCRIPTION: This snippet shows how to create a basic Kotti Link object. The 'name' parameter refers to a view name available on the context. The second parameter provides the title of the link, and uses internationalization.\nSOURCE: https://github.com/kotti/kotti/blob/master/docs/developing/advanced/add-to-edit-interface.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nlink = Link('name', _(u'Title'))\n```\n\n----------------------------------------\n\nTITLE: Setting up Kotti testing environment\nDESCRIPTION: Sets up the Kotti testing environment by calling the setUp function from kotti.testing. This initializes the database and other necessary resources for testing.\nSOURCE: https://github.com/kotti/kotti/blob/master/kotti/tests/nodes.txt#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> from kotti.testing import setUp\n>>> ignore = setUp()\n```\n\n----------------------------------------\n\nTITLE: Install PostgreSQL (Ubuntu)\nDESCRIPTION: Installs the PostgreSQL database server, version 9.1, on an Ubuntu system. This is a prerequisite for Kotti's database.\nSOURCE: https://github.com/kotti/kotti/blob/master/docs/developing/basic/deployment.rst#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\napt-get install postgresql-9.1\n```\n\n----------------------------------------\n\nTITLE: Start the Kotti site using pserve\nDESCRIPTION: This command starts the Kotti site using pserve, using the app.ini configuration file. This is needed to be able to access and add content through the browser.\nSOURCE: https://github.com/kotti/kotti/blob/master/docs/first_steps/tut-2.rst#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nbin/pserve app.ini\n```\n\n----------------------------------------\n\nTITLE: Install Kotti add-on in development mode\nDESCRIPTION: These commands change the directory to the newly created Kotti add-on and install it in development mode. Development mode allows for immediate reflection of code changes without requiring re-installation.\nSOURCE: https://github.com/kotti/kotti/blob/master/docs/first_steps/tut-1.rst#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd kotti_mysite\n../bin/python setup.py develop\n```\n\n----------------------------------------\n\nTITLE: Run Fabric Deployment\nDESCRIPTION: Executes the 'install_all' task defined in the downloaded Fabfile. This task automates the entire deployment process on the target server.\nSOURCE: https://github.com/kotti/kotti/blob/master/docs/developing/basic/deployment.rst#_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nfab install_all\n```\n\n----------------------------------------\n\nTITLE: Registering a Selectable Default View in Kotti\nDESCRIPTION: Registers a new selectable default view named 'media_folder_view' with the title 'Media Folder' for the 'Document' content type in Kotti.  This allows users to select this view as the default way to display Document objects. Requires `kotti.resources` and `kotti_media`.\nSOURCE: https://github.com/kotti/kotti/blob/master/docs/developing/advanced/default-views.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom kotti.resources import Document\nfrom kotti_media import _\n\ndef includeme(config):\n\n    Document.type_info.add_selectable_default_view(\"media_folder_view\",\n                                                   _(\"Media Folder\"))\n```\n\n----------------------------------------\n\nTITLE: Custom content marker interface (Python)\nDESCRIPTION: This code defines a custom marker interface, `ICustomContent`, which is used to identify content types that should use a custom workflow. This interface is then implemented by a custom content resource.\nSOURCE: https://github.com/kotti/kotti/blob/master/docs/developing/basic/security.rst#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom zope.interface import Interface\n\n\nclass ICustomContent(Interface):\n    \"\"\" Custom content marker interface \"\"\"\n```"
  }
]