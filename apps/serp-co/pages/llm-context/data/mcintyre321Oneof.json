[
  {
    "owner": "mcintyre321",
    "repo": "oneof",
    "content": "TITLE: Creating and Matching OneOf Return Types in C#\nDESCRIPTION: This snippet demonstrates how to use OneOf as a return type for a method that can return different results. It shows the creation of a User or error types, and how to match on the result in an MVC controller action.\nSOURCE: https://github.com/mcintyre321/OneOf/blob/master/README.md#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic OneOf<User, InvalidName, NameTaken> CreateUser(string username)\n{\n    if (!IsValid(username)) return new InvalidName();\n    var user = _repo.FindByUsername(username);\n    if(user != null) return new NameTaken();\n    var user = new User(username);\n    _repo.Save(user);\n    return user;\n}\n\n[HttpPost]\npublic IActionResult Register(string username)\n{\n    OneOf<User, InvalidName, NameTaken> createUserResult = CreateUser(username);\n    return createUserResult.Match(\n        user => new RedirectResult(\"/dashboard\"),\n        invalidName => {\n            ModelState.AddModelError(nameof(username), $\"Sorry, that is not a valid username.\");\n            return View(\"Register\");\n        },\n        nameTaken => {\n            ModelState.AddModelError(nameof(username), \"Sorry, that name is already in use.\");\n            return View(\"Register\");\n        }\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Using OneOf as a Method Parameter in C#\nDESCRIPTION: This example shows how to use OneOf as a parameter type, allowing a method to accept multiple different types without requiring additional overloads.\nSOURCE: https://github.com/mcintyre321/OneOf/blob/master/README.md#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic void SetBackground(OneOf<string, ColorName, Color> backgroundColor) { ... }\n\n//The method above can be called with either a string, a ColorName enum value or a Color instance.\n```\n\n----------------------------------------\n\nTITLE: Creating Reusable OneOf Types with OneOfBase in C#\nDESCRIPTION: This example shows how to create a reusable OneOf type by inheriting from OneOfBase, including optional implicit conversions and custom methods.\nSOURCE: https://github.com/mcintyre321/OneOf/blob/master/README.md#2025-04-16_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class StringOrNumber : OneOfBase<string, int>\n{\n    StringOrNumber(OneOf<string, int> _) : base(_) { }\n\n    // optionally, define implicit conversions\n    // you could also make the constructor public\n    public static implicit operator StringOrNumber(string _) => new StringOrNumber(_);\n    public static implicit operator StringOrNumber(int _) => new StringOrNumber(_);\n\n    public (bool isNumber, int number) TryGetNumber() =>\n        Match(\n            s => (int.TryParse(s, out var n), n),\n            i => (true, i)\n        );\n}\n\nStringOrNumber x = 5;\nConsole.WriteLine(x.TryGetNumber().number);\n// prints 5\n\nx = \"5\";\nConsole.WriteLine(x.TryGetNumber().number);\n// prints 5\n\nx = \"abcd\";\nConsole.WriteLine(x.TryGetNumber().isNumber);\n// prints False\n```\n\n----------------------------------------\n\nTITLE: Matching OneOf Types in C#\nDESCRIPTION: This snippet demonstrates how to use the Match method to handle different types stored in a OneOf instance and return a consistent type.\nSOURCE: https://github.com/mcintyre321/OneOf/blob/master/README.md#2025-04-16_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nOneOf<string, ColorName, Color> backgroundColor = ...;\nColor c = backgroundColor.Match(\n    str => CssHelper.GetColorFromString(str),\n    name => new Color(name),\n    col => col\n);\n_window.BackgroundColor = c;\n```\n\n----------------------------------------\n\nTITLE: Using Switch Method with OneOf in C#\nDESCRIPTION: This example shows how to use the Switch method when you don't need to return a value from the matching operation.\nSOURCE: https://github.com/mcintyre321/OneOf/blob/master/README.md#2025-04-16_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nOneOf<string, DateTime> dateValue = ...;\ndateValue.Switch(\n    str => AddEntry(DateTime.Parse(str), foo),\n    int => AddEntry(int, foo)\n);\n```\n\n----------------------------------------\n\nTITLE: Using TryPick Methods with OneOf in C#\nDESCRIPTION: This snippet demonstrates how to use TryPick methods as an alternative to Switch or Match for handling OneOf types.\nSOURCE: https://github.com/mcintyre321/OneOf/blob/master/README.md#2025-04-16_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nIActionResult Get(string id)\n{\n    OneOf<Thing, NotFound, Error> thingOrNotFoundOrError = GetThingFromDb(string id);\n\n    if (thingOrNotFoundOrError.TryPickT1(out NotFound notFound, out var thingOrError)) //thingOrError is a OneOf<Thing, Error>\n      return StatusCode(404);\n\n    if (thingOrError.TryPickT1(out var error, out var thing)) //note that thing is a Thing rather than a OneOf<Thing>\n    {\n      _logger.LogError(error.Message);\n      return StatusCode(500);\n    }\n\n    return Ok(thing);\n}\n```\n\n----------------------------------------\n\nTITLE: Using OneOfBase Source Generation in C#\nDESCRIPTION: This snippet shows how to use the GenerateOneOfAttribute to automatically generate OneOfBase hierarchies using a Source Generator.\nSOURCE: https://github.com/mcintyre321/OneOf/blob/master/README.md#2025-04-16_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n[GenerateOneOf]\npublic partial class StringOrNumber : OneOfBase<string, int> { }\n```"
  }
]