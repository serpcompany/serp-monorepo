[
  {
    "owner": "shopify",
    "repo": "shopify-app-js",
    "content": "TITLE: Initializing Shopify API Client in TypeScript\nDESCRIPTION: Creates a new Shopify API client instance with various configuration options including API keys, scopes, host information, billing configuration, and logging settings. This is the main entry point for setting up a Shopify app's API functionality.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/reference/shopifyApi.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {shopifyApi, ApiVersion, BillingInterval} from '@shopify/shopify-api';\nimport {restResources} from '@shopify/shopify-api/rest/admin/2022-07';\n\nconst shopify = shopifyApi({\n  apiKey: 'APIKeyFromPartnersDashboard',\n  apiSecretKey: 'APISecretFromPartnersDashboard',\n  scopes: ['read_products'],\n  hostName: 'localhost:4321',\n  hostScheme: 'http',\n  apiVersion: ApiVersion.July22,\n  isEmbeddedApp: true,\n  isCustomStoreApp: false,\n  userAgentPrefix: 'Custom prefix',\n  privateAppStorefrontAccessToken: 'PrivateAccessToken',\n  customShopDomains: ['*.my-custom-domain.io'],\n  billing: {\n    'My plan': {\n      amount: 5.0,\n      currencyCode: 'USD',\n      interval: BillingInterval.OneTime,\n    },\n  },\n  logger: {\n    log: (severity, message) => {\n      myAppsLogFunction(severity, message);\n    },\n  },\n  restResources,\n  future: {\n    // ...\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using getEmbeddedAppUrl for Shopify Embedded App Redirection in TypeScript\nDESCRIPTION: Demonstrates how to use the getEmbeddedAppUrl method to generate a proper embedded app URL and redirect to it. The method requires rawRequest and rawResponse parameters and returns a Promise resolving to the redirect URL string.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/reference/auth/getEmbeddedAppUrl.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\napp.get('/redirect/endpoint', async (req, res) => {\n  const redirectURL = await shopify.auth.getEmbeddedAppUrl({\n    rawRequest: req,\n    rawResponse: res,\n  });\n\n  res.redirect(redirectURL);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring and Implementing shopifyApp in an Express Application\nDESCRIPTION: This example demonstrates how to initialize the shopifyApp function with configuration parameters and set up the necessary Express routes for authentication, callback handling, and webhook processing. It shows the complete configuration for API keys, scopes, authentication paths, and webhook handling.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-app-express/docs/reference/shopifyApp.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst shopify = shopifyApp({\n  api: {\n    apiKey: 'ApiKeyFromPartnersDashboard',\n    apiSecretKey: 'ApiSecretKeyFromPartnersDashboard',\n    scopes: ['your_scopes'],\n    hostScheme: 'http',\n    hostName: `localhost:${PORT}`,\n    billing: {\n      'My plan': {\n        amount: 10,\n        currencyCode: 'USD',\n        interval: BillingInterval.Every30Days,\n      },\n    },\n  },\n  auth: {\n    path: '/auth',\n    callbackPath: '/auth/callback',\n  },\n  webhooks: {\n    path: '/webhooks',\n  },\n});\n\n// The paths to these routes must match the configured values above\napp.get(shopify.config.auth.path, shopify.auth.begin());\napp.get(\n  shopify.config.auth.callbackPath,\n  shopify.auth.callback(),\n  shopify.redirectToShopifyOrAppRoot(),\n);\napp.post(\n  shopify.config.webhooks.path,\n  shopify.processWebhooks({webhookHandlers}),\n);\n```\n\n----------------------------------------\n\nTITLE: Processing Shopify Auth Callback in Node.js\nDESCRIPTION: Example of how to handle Shopify's OAuth callback in a Node.js environment. This code processes the callback request, creates a new Shopify session, and redirects the user to the app's entry page.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/reference/auth/callback.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\napp.get('/auth/callback', async (req, res) => {\n  // The library will automatically set the appropriate HTTP headers\n  const callback = await shopify.auth.callback({\n    rawRequest: req,\n    rawResponse: res,\n  });\n\n  // You can now use callback.session to make API requests\n\n  res.redirect('/my-apps-entry-page');\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Express.js App with Shopify Integration\nDESCRIPTION: JavaScript code demonstrating how to set up an Express.js app with Shopify integration using the @shopify/shopify-app-express package. It includes configuration for API, authentication, webhooks, and basic routing.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-app-express/README.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst express = require('express');\nconst {shopifyApp} = require('@shopify/shopify-app-express');\n\nconst PORT = 8080;\n\nconst shopify = shopifyApp({\n  api: {\n    apiKey: 'ApiKeyFromPartnersDashboard',\n    apiSecretKey: 'ApiSecretKeyFromPartnersDashboard',\n    scopes: ['your_scopes'],\n    hostScheme: 'http',\n    hostName: `localhost:${PORT}`,\n  },\n  auth: {\n    path: '/api/auth',\n    callbackPath: '/api/auth/callback',\n  },\n  webhooks: {\n    path: '/api/webhooks',\n  },\n});\n\nconst app = express();\n\napp.get(shopify.config.auth.path, shopify.auth.begin());\napp.get(\n  shopify.config.auth.callbackPath,\n  shopify.auth.callback(),\n  shopify.redirectToShopifyOrAppRoot(),\n);\napp.post(\n  shopify.config.webhooks.path,\n  shopify.processWebhooks({webhookHandlers}),\n);\n\napp.get('/', shopify.ensureInstalledOnShop(), (req, res) => {\n  res.send('Hello world!');\n});\n\napp.listen(PORT, () => console.log('Server started'));\n```\n\n----------------------------------------\n\nTITLE: Loading a Shopify Session with getCurrentId in TypeScript\nDESCRIPTION: Demonstrates how to retrieve a session ID from a request and load the corresponding session from storage for use with Shopify API clients. This snippet shows the complete flow from getting the current session ID to creating a REST client with the session.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/guides/session-storage.md#2025-04-11_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst sessionId = await shopify.session.getCurrentId({\n  isOnline: true,\n  rawRequest: req,\n  rawResponse: res,\n});\n\n// use sessionId to retrieve session from app's session storage\n// getSessionFromStorage() must be provided by application\nconst session = await getSessionFromStorage(sessionId);\n\nconst restClient = new shopify.clients.Rest({session});\n\n// do something with restClient...\n```\n\n----------------------------------------\n\nTITLE: Setting up AppProvider in the Remix root component\nDESCRIPTION: Configuring the Shopify AppProvider component in the Remix root to set up Polaris and App Bridge for the Shopify app interface.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-app-remix/README.md#2025-04-11_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// root.tsx\nimport {LoaderFunctionArgs} from '@remix-run/node';\nimport {AppProvider} from '@shopify/shopify-app-remix/react';\n\nimport shopify from '~/shopify.server';\n\nexport async function loader({request}: LoaderFunctionArgs) {\n  await shopify.authenticate.admin(request);\n\n  return json({\n    apiKey: process.env.SHOPIFY_API_KEY,\n  });\n}\n\nexport default function App() {\n  const {apiKey} = useLoaderData<typeof loader>();\n\n  return (\n    <html>\n      <head>\n        <Meta />\n        <Links />\n      </head>\n      <body>\n        <AppProvider apiKey={apiKey} isEmbeddedApp>\n          <Outlet />\n        </AppProvider>\n      </body>\n    </html>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using validateAuthenticatedSession Middleware with Express in TypeScript\nDESCRIPTION: This example demonstrates how to use the validateAuthenticatedSession middleware to protect an API endpoint. The middleware ensures the request has a valid session, making the session object available in res.locals.shopify.session for subsequent API interactions.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-app-express/docs/reference/validateAuthenticatedSession.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst app = express();\n\napp.get(\n  '/api/product/count',\n  shopify.validateAuthenticatedSession(),\n  async (res, req) => {\n    // because of shopify.validateAuthenticatedSession(), session is available\n    // in res.locals.shopify.session\n    const session = res.locals.shopify.session;\n\n    // Interact with the API\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Single-Plan Billing After OAuth in Shopify\nDESCRIPTION: Example showing how to create a billing charge after OAuth callback completion. Uses basic confirmation URL return.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/reference/billing/request.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\napp.get('/auth/callback', async () => {\n  const callback = await shopify.auth.callback({\n    rawRequest: req,\n    rawResponse: res,\n  });\n\n  // Check if we require payment, using shopify.billing.check()\n\n  const confirmationUrl = await shopify.billing.request({\n    session: callback.session,\n    plan: 'My billing plan',\n    isTest: true,\n  });\n\n  res.redirect(confirmationUrl);\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Shopify API for a Custom Store App in Node.js\nDESCRIPTION: Sets up the Shopify API client for a custom store app. It configures API credentials, version, and REST resources. This initialization requires the API Secret Key and Admin API Access Token obtained during installation.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/guides/custom-store-app.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"@shopify/shopify-api/adapters/node\";\nimport { shopifyApi, ApiVersion, Session } from \"@shopify/shopify-api\";\nimport { restResources } from \"@shopify/shopify-api/rest/admin/2023-04\";\n\nconst shopify = shopifyApi({\n  apiSecretKey: \"App_API_secret_key\",            // Note: this is the API Secret Key, NOT the API access token\n  apiVersion: ApiVersion.April23,\n  isCustomStoreApp: true,                        // this MUST be set to true (default is false)\n  adminApiAccessToken: \"Admin_API_Access_Token\", // Note: this is the API access token, NOT the API Secret Key\n  isEmbeddedApp: false,\n  hostName: \"my-shop.myshopify.com\",\n  // Mount REST resources.\n  restResources,\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Shopify API and Registering Webhooks with OAuth\nDESCRIPTION: Example showing how to initialize the Shopify API client and register webhooks after OAuth completion using Express.js. Includes error handling and OAuth callback implementation.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/guides/webhooks.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst shopify = shopifyApi({\n  /* ... */\n});\n\n// Call shopify.webhooks.addHandlers here (see examples below)\n\n## Node.js\n\nconst app = express();\n\n// Register webhooks after OAuth completes\napp.get('/auth/callback', async (req, res) => {\n  try {\n    const callbackResponse = await shopify.auth.callback({\n      rawRequest: req,\n      rawResponse: res,\n    });\n\n    const response = await shopify.webhooks.register({\n      session: callbackResponse.session,\n    });\n\n    if (!response['PRODUCTS_CREATE'][0].success) {\n      console.log(\n        `Failed to register PRODUCTS_CREATE webhook: ${response['PRODUCTS_CREATE'][0].result}`,\n      );\n    }\n  } catch (error) {\n    console.error(error); // in practice these should be handled more gracefully\n  }\n\n  return res.redirect('/'); // or wherever you want your user to end up after OAuth completes\n});\n```\n\n----------------------------------------\n\nTITLE: Making GET Request to Shopify Admin API in TypeScript\nDESCRIPTION: This snippet shows how to make a GET request to the Shopify Admin API using the Rest client. It demonstrates both a basic request and a typed request using TypeScript generics.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/reference/clients/Rest.md#2025-04-11_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst getResponse = await client.get({\n  path: 'products',\n});\nconsole.log(getResponse.headers, getResponse.body);\n```\n\nLANGUAGE: typescript\nCODE:\n```\ninterface MyResponseBodyType {\n  products: {\n    /* ... */\n  };\n}\n\nconst response = await client.get<MyResponseBodyType>({\n  path: 'products',\n});\n\n// response.body will be of type MyResponseBodyType\nconsole.log(response.body.products);\n```\n\n----------------------------------------\n\nTITLE: Updating Capped Amount for a Usage Billing Plan in Shopify App\nDESCRIPTION: Demonstrates how to update the capped amount for a usage-based billing plan in a Shopify app. The code updates the maximum billing amount to $100 USD for a specific subscription line item and logs the response.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/reference/billing/update-usage-capped-amount.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst response = await shopify.billing.updateUsageCappedAmount({\n  session,\n  subscriptionLineItemId: 'gid://shopify/AppSubscriptionLineItem/1234567890',\n  cappedAmount: {\n    amount: 100,\n    currencyCode: 'USD',\n  },\n});\nconsole.log(response);\n```\n\n----------------------------------------\n\nTITLE: Adding Content Security Policy headers in the server entry\nDESCRIPTION: Updating the server entry file to add required Content Security Policy headers to all HTML responses using shopify.addDocumentResponseHeaders.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-app-remix/README.md#2025-04-11_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// entry.server.tsx\nimport shopify from './shopify.server';\n\nexport default function handleRequest(\n  request: Request,\n  responseStatusCode: number,\n  responseHeaders: Headers,\n  remixContext: EntryContext,\n) {\n  shopify.addDocumentResponseHeaders(request, responseHeaders);\n\n  /// ..etc\n}\n```\n\n----------------------------------------\n\nTITLE: Making POST Request to Shopify Admin API in TypeScript\nDESCRIPTION: This snippet illustrates how to send a POST request to the Shopify Admin API using the Rest client. It shows creating a new product with a title.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/reference/clients/Rest.md#2025-04-11_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst postResponse = await client.post({\n  path: 'products',\n  data: {\n    title: 'My product title',\n  },\n});\nconsole.log(postResponse.headers, postResponse.body);\n```\n\n----------------------------------------\n\nTITLE: Enabling the new embedded auth strategy in Shopify app\nDESCRIPTION: Configuring a Shopify app to use the new embedded authentication strategy with token exchange by enabling the unstable_newEmbeddedAuthStrategy flag.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-app-remix/README.md#2025-04-11_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// my-app/app/shopify.server.ts\nconst shopify = shopifyApp({\n  ...\n  isEmbeddedApp: true,\n  future: {\n    unstable_newEmbeddedAuthStrategy: true,\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Making PUT Request to Shopify Admin API in TypeScript\nDESCRIPTION: This snippet shows how to send a PUT request to the Shopify Admin API using the Rest client. It demonstrates updating an existing product's title by its ID.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/reference/clients/Rest.md#2025-04-11_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst putResponse = await client.put({\n  path: 'products/123456',\n  data: {\n    title: 'My product title',\n  },\n});\nconsole.log(putResponse.headers, putResponse.body);\n```\n\n----------------------------------------\n\nTITLE: GraphQL Error Handling\nDESCRIPTION: Demonstrates proper error handling for GraphQL queries using try-catch blocks.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/reference/clients/Graphql.md#2025-04-11_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport {GraphqlQueryError} from '@shopify/shopify-api';\n\ntry {\n  const products = await client.request(/* ... */);\n\n  // No errors, proceed with logic\n} catch (error) {\n  if (error instanceof GraphqlQueryError) {\n    // look at the GraphQL errors returned from the API response\n    error.body?.errors.graphQLErrors\n    // Also, error.headers contains the headers of the response received from Shopify\n  } else {\n    // handle other errors\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Dynamic Retry Count for Shopify API Requests\nDESCRIPTION: Demonstrates how to dynamically set the number of retries for a specific API request using the client.request() method. This can be useful for handling intermittent failures or rate limiting.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/api-clients/admin-api-client/README.md#2025-04-11_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst productQuery = `\n  query ProductQuery($handle: String) {\n    product(handle: $handle) {\n      id\n      title\n      handle\n    }\n  }\n`;\n\nconst {data, errors, extensions} = await client.request(productQuery, {\n  variables: {\n    handle: 'sample-product',\n  },\n  retries: 2,\n});\n```\n\n----------------------------------------\n\nTITLE: Setting up environment variables for Shopify app\nDESCRIPTION: Creating the .env file with necessary environment variables for the Shopify app, including API key, secret, and app URL.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-app-remix/README.md#2025-04-11_snippet_2\n\nLANGUAGE: env\nCODE:\n```\nSHOPIFY_API_KEY=\"[Copy from partners dashboard]\"\nSHOPIFY_API_SECRET=\"[Copy from partners dashboard]\"\nSHOPIFY_APP_URL=\"[The tunnel URL you are using to run your app]\"\n```\n\n----------------------------------------\n\nTITLE: Initiating Shopify OAuth Authentication Process in Cloudflare Workers\nDESCRIPTION: Example of using shopify.auth.begin in a Cloudflare Workers environment. Unlike the Node.js implementation, this returns a Response object rather than triggering a redirect automatically, and doesn't require the rawResponse parameter.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/reference/auth/begin.md#2025-04-11_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nasync function handleFetch(request: Request): Promise<Response> {\n  const {searchParams} = new URL(request.url);\n\n  // The library will return a Response object\n  return shopify.auth.begin({\n    shop: shopify.utils.sanitizeShop(searchParams.get('shop'), true),\n    callbackPath: '/auth/callback',\n    isOnline: false,\n    rawRequest: request,\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Managed Pricing Flow in Express.js for Shopify App\nDESCRIPTION: This snippet demonstrates the implementation of the managed pricing flow in an Express.js app for Shopify. It includes authentication, checking for active payments, and redirecting users to the plan selection page if necessary. It uses the Shopify API for billing checks and redirection.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-app-express/docs/reference/guides/managed-pricing.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\napp.get(shopify.config.auth.path, shopify.auth.begin());\napp.get(\n  shopify.config.auth.callbackPath,\n  shopify.auth.callback(),\n\n  async (req, res, next) => {\n    const session = res.locals.shopify.session;\n    const hasPayment = await shopify.api.billing.check(\n      {\n        session,\n        isTest: true,\n        plans: [],\n        returnObject: true,\n      }\n    );\n    const shopHandle = res.locals.shopify.session.shop.replace('.myshopify.com', '');\n    const appHandle = 'node-managed-pricing' // found in your shopify.app.toml file\n\n    if (hasPayment.hasActivePayment) {\n      next();\n    } else {\n      shopify.redirectOutOfApp({\n        res,\n        redirectUri: `https://admin.shopify.com/store/${shopHandle}/charges/${appHandle}/pricing_plans`,\n        shop: res.locals.shopify.shop,\n        req,\n      });\n    }\n  },\n\n\n  shopify.redirectToShopifyOrAppRoot()\n);\n```\n\n----------------------------------------\n\nTITLE: Canceling a Shopify App Subscription in TypeScript\nDESCRIPTION: This snippet demonstrates how to cancel a Shopify app subscription using the shopify.billing.cancel method. It includes error handling for BillingError and shows the structure of the returned AppSubscription object.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/reference/billing/cancel.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst subscriptionId = \"gid://shopify/AppSubscription/1234567890\"; // this can be obtained from a call to shopify.billing.subscriptions()\ntry {\n  const canceledSubscription = await shopify.billing.cancel({\n    session,\n    subscriptionId,\n    prorate: true,  // Whether to issue prorated credits for the unused portion of the app subscription. Defaults to true.\n  })\n} catch (error) {\n  if (error typeof BillingError) {\n    console.log(`Unable to cancel subscription ${subscriptionId}: ${JSON.stringify(error.errorData, null, 2)}`);\n    // handle error appropriately\n  }\n}\n// canceledSubscription will have the following shape:\n// {\n//   id: string;\n//   name: string;\n//   test: boolean;\n// }\n```\n\n----------------------------------------\n\nTITLE: Initializing Shopify GraphQL Client in TypeScript\nDESCRIPTION: Example showing how to create a new GraphQL client instance with session authentication and API version specification.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/reference/clients/Graphql.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\napp.get('/my-endpoint', async () => {\n  const sessionId = await shopify.session.getCurrentId({\n    isOnline: true,\n    rawRequest: req,\n    rawResponse: res,\n  });\n\n  // use sessionId to retrieve session from app's session storage\n  // getSessionFromStorage() must be provided by application\n  const session = await getSessionFromStorage(sessionId);\n\n  const client = new shopify.clients.Graphql({\n    session,\n    apiVersion: ApiVersion.January23,\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Client Credentials Authentication Flow in Node.js with Shopify API\nDESCRIPTION: This code snippet demonstrates how to implement the client credentials grant flow in a Node.js application. It creates a route handler that sanitizes the shop parameter from the query string and uses it to authenticate with the Shopify API via the clientCredentials method.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/reference/auth/clientcredentials.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\napp.get('/auth', async (req, res) => {\n  const shop = shopify.utils.sanitizeShop(req.query.shop, true);\n\n  await shopify.auth.clientCredentials({\n    shop\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Creating an authentication route in Remix for Shopify\nDESCRIPTION: Setting up a splat route for Shopify authentication that uses the shopifyApp.authenticate.admin method to handle auth requests.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-app-remix/README.md#2025-04-11_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// app/routes/auth/$.tsx\nimport {LoaderFunctionArgs} from '@remix-run/node';\n\nimport shopify from '~/shopify.server';\n\nexport async function loader({request}: LoaderFunctionArgs) {\n  await shopify.authenticate.admin(request);\n\n  return null;\n}\n```\n\n----------------------------------------\n\nTITLE: Making API Requests with a Custom Store App Session\nDESCRIPTION: Demonstrates how to create a session for a custom store app and make REST API requests. This uses the shopify.session.customAppSession utility to create a session object with the store's domain.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/guides/custom-store-app.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst session = shopify.session.customAppSession(\"my-shop.myshopify.com\");\n\n// Use REST resources to make calls.\nconst { count: productCount } = await shopify.rest.Product.count({ session });\nconst { count: customerCount } = await shopify.rest.Customer.count({ session });\nconst { count: orderCount } = await shopify.rest.Order.count({ session });\n\nconsole.log(\n  `There are ${productCount} products, ${customerCount} customers, and ${orderCount} orders in the ${session.shop} store.`\n);\n```\n\n----------------------------------------\n\nTITLE: Using REST Resources for Pagination in Shopify API\nDESCRIPTION: Example code showing how to handle paginated requests with Shopify's REST API using cursor-based pagination to fetch multiple sets of products with pageInfo.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/guides/rest-resources.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nlet pageInfo;\ndo {\n  const response = await shopify.rest.Product.all({\n    ...pageInfo?.nextPage?.query,\n    session,\n    limit: 10,\n  });\n\n  const pageProducts = response.data;\n  // ... use pageProducts\n\n  pageInfo = response.pageInfo;\n} while (pageInfo?.nextPage);\n```\n\n----------------------------------------\n\nTITLE: Creating a Localized Cart with Storefront API in TypeScript\nDESCRIPTION: Example of creating a localized cart using a GraphQL mutation. It demonstrates using the @inContext directive to specify country and language preferences for the cart.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/api-clients/storefront-api-client/README.md#2025-04-11_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst cartCreateMutation = `\n  mutation ($input: CartInput!, $country: CountryCode, $language: LanguageCode)\n  @inContext(country: $country, language: $language) {\n    cartCreate(input: $input) {\n      userErrors {\n        message\n        code\n        field\n      }\n      cart {\n        id\n        checkoutUrl\n      }\n    }\n  }\n`;\n\nconst {data, errors, extensions} = await client.request(cartCreateMutation, {\n  variables: {\n    input: {},\n    country: 'JP',\n    language: 'JA',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring a Subscription Plan with a Single LineItem in Shopify App\nDESCRIPTION: Sets up a subscription plan with a single LineItem using the billing API. This configuration includes a 30-day billing interval with a trial period and discount for the first few intervals.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/guides/billing.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  shopifyApi,\n  BillingInterval,\n  BillingReplacementBehavior,\n} from '@shopify/shopify-api';\n\nconst shopify = shopifyApi({\n  // ...\n  billing: {\n    {\n    \"Single LineItem Plan\": {\n      replacementBehavior: BillingReplacementBehavior.ApplyImmediately,\n      trialDays: 7,\n      lineItems: [\n        {\n          interval: BillingInterval.Every30Days,\n          amount: 30,\n          currencyCode: \"USD\",\n          discount: {\n            durationLimitInIntervals: 3,\n            value: {\n              amount: 10,\n            },\n          },\n        }\n      ],\n    },\n  },\n}\nfuture: {\n  v10_lineItemBilling: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Querying for a Product with GraphQL in TypeScript\nDESCRIPTION: Demonstrates how to use the client.request method to query for a product using GraphQL. It includes setting up the query string and passing variables.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/api-clients/graphql-client/README.md#2025-04-11_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst productQuery = `\n  query ProductQuery($handle: String) {\n    product(handle: $handle) {\n      id\n      title\n      handle\n    }\n  }\n`;\n\nconst {data, errors, extensions} = await client.request(productQuery, {\n  variables: {\n    handle: 'sample-product',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Decoding JWT Session Token in a Shopify App using TypeScript\nDESCRIPTION: This snippet demonstrates how to extract and decode a JWT token from an Authorization header in a Shopify app route. The code retrieves the token from the header, removes the 'Bearer ' prefix, and then decodes it using shopify.session.decodeSessionToken to access the payload data.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/reference/session/decodeSessionToken.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\napp.get('/fetch-some-data', async (req, res) => {\n  const authorizationHeader = req.header('Authorization');\n  const token = authorizationHeader.replace('Bearer ', '');\n  const payload = await shopify.session.decodeSessionToken(token);\n\n  // Use the payload data\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Shopify API with Express.js\nDESCRIPTION: Creates a Shopify API instance with configuration options and sets up an Express app. Required parameters include API credentials, OAuth scopes, and host name for the app.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/README.md#2025-04-11_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport '@shopify/shopify-api/adapters/node';\nimport {shopifyApi, LATEST_API_VERSION} from '@shopify/shopify-api';\nimport express from 'express';\n\nconst shopify = shopifyApi({\n  // The next 4 values are typically read from environment variables for added security\n  apiKey: 'APIKeyFromPartnersDashboard',\n  apiSecretKey: 'APISecretFromPartnersDashboard',\n  scopes: ['read_products'],\n  hostName: 'ngrok-tunnel-address',\n  ...\n});\n\nconst app = express();\n```\n\n----------------------------------------\n\nTITLE: GraphQL Request with Timeout\nDESCRIPTION: Shows how to set a timeout for GraphQL requests using AbortController.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/reference/clients/Graphql.md#2025-04-11_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst response = await client.request(\n  `query GetProducts($first: Int!) {\n    products (first: $first) {\n      edges {\n        node {\n          id\n          title\n          descriptionHtml\n        }\n      }\n    }\n  }`,\n  {\n    variables: {\n      first: 10,\n    },\n    signal: AbortSignal.timeout(3000), // 3 seconds\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Online Session ID from JWT Token in TypeScript\nDESCRIPTION: Demonstrates how to extract and construct a session ID from a JWT token in the request authorization header. The function processes the token to obtain shop and user information for session management.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/reference/session/getJwtSessionId.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction getOnlineSessionId(request: Request) {\n  const token = request.headers.get('authorization').replace('Bearer ', '');\n  const jwt = await api.session.decodeSessionToken(token);\n  const dest = new URL(jwt.dest);\n  const shop = dest.hostname;\n  const userId = jwt.sub;\n  const sessionId = api.session.getJwtSessionId(shop, userId);\n\n  return sessionId;\n}\n```\n\n----------------------------------------\n\nTITLE: Making DELETE Request to Shopify Admin API in TypeScript\nDESCRIPTION: This snippet demonstrates how to send a DELETE request to the Shopify Admin API using the Rest client. It shows deleting a specific product by its ID.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/reference/clients/Rest.md#2025-04-11_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst deleteResponse = await client.delete({\n  path: 'products/123456',\n});\nconsole.log(deleteResponse.headers, deleteResponse.body);\n```\n\n----------------------------------------\n\nTITLE: Basic Webhook Validation Call\nDESCRIPTION: Simplified example showing the core validation call with required parameters for webhook validation using the shopify.webhooks.validate method.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/reference/webhooks/validate.md#2025-04-11_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nawait shopify.webhooks.validate({\n  rawBody: req.body,\n  rawRequest: req,\n  rawResponse: res,\n});\n```\n\n----------------------------------------\n\nTITLE: Multi-Plan Billing with Return Object in Shopify\nDESCRIPTION: Example demonstrating multi-plan billing implementation with detailed response object handling.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/reference/billing/request.md#2025-04-11_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\napp.post('/api/select-plan', async (req, res) => {\n  const sessionId = shopify.session.getCurrentId({\n    isOnline: true,\n    rawRequest: req,\n    rawResponse: res,\n  });\n\n  // use sessionId to retrieve session from app's session storage\n  // In this example, getSessionFromStorage() must be provided by app\n  const session = await getSessionFromStorage(sessionId);\n\n  const billingResponse = await shopify.billing.request({\n    session,\n    // Receive the selected plan from the frontend\n    plan: req.body.selectedPlan,\n    isTest: true,\n    returnObject: true,\n  });\n\n  res.redirect(billingResponse.confirmationUrl);\n});\n```\n\n----------------------------------------\n\nTITLE: Querying for a Product using Shopify Admin API in TypeScript\nDESCRIPTION: Demonstrates how to use the client.request() method to query for a product using the Shopify Admin API. It includes the GraphQL query and how to pass variables.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/api-clients/admin-api-client/README.md#2025-04-11_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst productQuery = `\n  query ProductQuery($id: ID!) {\n    product(id: $id) {\n      id\n      title\n      handle\n    }\n  }\n`;\n\nconst {data, errors, extensions} = await client.request(productQuery, {\n  variables: {\n    id: 'gid://shopify/Product/7608002183224',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Shopify App for Integration and E2E Testing in TypeScript\nDESCRIPTION: This snippet demonstrates how to use testConfig() with custom session storage for integration and end-to-end testing, ensuring that shopifyApp() reads sessions from the development database.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-app-remix/README.md#2025-04-11_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// my-app/app/shopify.server.ts\nimport { testConfig } from \"@shopify/shopify-app-remix/test-helpers\";\n...\nconst sessionStorage = new PrismaSessionStorage(prisma);\nconst config = {\n  ...\n  sessionStorage,\n  ...\n};\n\nif (process.env.SHOPIFY_TESTING) {\n  Object.assign(config, testConfig());\n}\n\nif (process.env.SHOPIFY_TESTING === \"e2e\") {\n  Object.assign(config, testConfig({ sessionStorage }));\n}\n...\n```\n\n----------------------------------------\n\nTITLE: Updating Shopify API configuration in shopify.js\nDESCRIPTION: Changes for shopify.js to replace the direct API configuration with the new shopifyApp constructor. This includes setting up SQLiteSessionStorage for session management and configuring authentication, webhook paths, and API settings.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-app-express/docs/reference/migrating-app-v6-api-lib-to-express-lib.md#2025-04-11_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n-import \"@shopify/shopify-api/adapters/node\";\n-import { shopifyApi, BillingInterval, LATEST_API_VERSION } from \"@shopify/shopify-api\";\n+import { BillingInterval, LATEST_API_VERSION } from \"@shopify/shopify-api\";\n+import { shopifyApp } from \"@shopify/shopify-app-express\";\n+import { SQLiteSessionStorage } from \"@shopify/shopify-app-session-storage-sqlite\";\n let { restResources } = await import(\n   `@shopify/shopify-api/rest/admin/${LATEST_API_VERSION}`\n );\n\n+const DB_PATH = `${process.cwd()}/database.sqlite`;\n\n // The transactions with Shopify will always be marked as test transactions, unless NODE_ENV is production.\n // See the ensureBilling helper to learn more about billing in this template.\n const billingConfig = {\n   \"My Shopify One-Time Charge\": {\n     // This is an example configuration that would do a one-time charge for $5 (only USD is currently supported)\n     amount: 5.0,\n     currencyCode: \"USD\",\n     interval: BillingInterval.OneTime,\n   },\n };\n\n-const apiConfig = {\n-  apiKey: process.env.SHOPIFY_API_KEY,\n-  apiSecretKey: process.env.SHOPIFY_API_SECRET,\n-  scopes: process.env.SCOPES.split(\",\"),\n-  hostName: process.env.HOST.replace(/https?:\\/\\//, \"\"),\n-  hostScheme: process.env.HOST.split(\"://\")[0],\n-  apiVersion: LATEST_API_VERSION,\n-  isEmbeddedApp: true,\n-  ...(process.env.SHOP_CUSTOM_DOMAIN && {\n-    customShopDomains: [process.env.SHOP_CUSTOM_DOMAIN],\n-  }),\n-  billing: undefined, // or replace with billingConfig above to enable example billing\n-  restResources,\n-};\n-\n-const shopify = shopifyApi(apiConfig);\n+const shopify = shopifyApp({\n+  api: {\n+    apiVersion: LATEST_API_VERSION,\n+    billingConfig: undefined, // or replace with billingConfig above to enable example billing\n+    restResources,\n+  },\n+  auth: {\n+    path: \"/api/auth\",\n+    callbackPath: \"/api/auth/callback\",\n+  },\n+  webhooks: {\n+    path: \"/api/webhooks\",\n+  },\n+  // This should be replaced with your preferred storage strategy\n+  sessionStorage: new SQLiteSessionStorage(DB_PATH),\n+});\n\n export default shopify;\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple HTTP Webhook Handlers in Shopify\nDESCRIPTION: Example showing how to configure multiple webhook handlers for the PRODUCTS_CREATE topic using HTTP delivery method. Demonstrates setting up callback functions and handling webhook requests with session management.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/reference/webhooks/addHandlers.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst shopify = shopifyApi({\n  /* ... */\n});\n\nconst handleWebhookRequest = async (\n  topic: string,\n  shop: string,\n  webhookRequestBody: string,\n  webhookId: string,\n  apiVersion: string,\n) => {\n  const sessionId = shopify.session.getOfflineId(shop);\n\n  // Fetch the session from storage and process the webhook event\n};\n\nshopify.webhooks.addHandlers({\n  PRODUCTS_CREATE: [\n    {\n      deliveryMethod: DeliveryMethod.Http,\n      callbackUrl: '/webhooks',\n      callback: handleWebhookRequest,\n    },\n    {\n      deliveryMethod: DeliveryMethod.Http,\n      callbackUrl: '/webhooks',\n      callback: handleWebhookRequestPart2,\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Executing Basic GraphQL Query\nDESCRIPTION: Demonstrates a simple GraphQL query to fetch product data using a query string.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/reference/clients/Graphql.md#2025-04-11_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst response = await client.request(\n  `{\n    products (first: 10) {\n      edges {\n        node {\n          id\n          title\n          descriptionHtml\n        }\n      }\n    }\n  }`,\n);\nconsole.log(response.data, response.extensions);\n```\n\n----------------------------------------\n\nTITLE: Implementing GraphQL Proxy Route in Shopify App\nDESCRIPTION: Example implementation of a POST endpoint that proxies GraphQL requests to Shopify's Admin API. The code demonstrates how to retrieve the current session, validate it, and forward the request using the graphqlProxy client method.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/reference/clients/graphqlProxy.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\napp.post('/graphql/proxy', async (req, res) => {\n  const sessionId = await shopify.session.getCurrentId({\n    isOnline: true,\n    rawRequest: req,\n    rawResponse: res,\n  });\n\n  // use sessionId to retrieve session from app's session storage\n  // getSessionFromStorage() must be provided by application\n  const session = await getSessionFromStorage(sessionId);\n\n  const response = await shopify.clients.graphqlProxy({\n    session,\n    rawBody: req.rawBody, // From my app\n  });\n\n  res.send(response.body);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Express Server with Shopify Express Library Integration\nDESCRIPTION: A complete implementation of an Express server that integrates with the Shopify Express library. The code sets up authentication flows, webhook processing, API endpoints for product operations, and static file serving. It demonstrates the proper structure for a Shopify app backend using the new library.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-app-express/docs/reference/migrating-app-v6-api-lib-to-express-lib.md#2025-04-11_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport {join} from 'path';\nimport {readFileSync} from 'fs';\nimport express from 'express';\nimport serveStatic from 'serve-static';\n\nimport shopify from './shopify.js';\nimport productCreator from './product-creator.js';\nimport GDPRWebhookHandlers from './gdpr.js';\n\nconst PORT = parseInt(process.env.BACKEND_PORT || process.env.PORT, 10);\n\nconst STATIC_PATH =\n  process.env.NODE_ENV === 'production'\n    ? `${process.cwd()}/frontend/dist`\n    : `${process.cwd()}/frontend/`;\n\nconst app = express();\n\n// Set up Shopify authentication and webhook handling\napp.get(shopify.config.auth.path, shopify.auth.begin());\napp.get(\n  shopify.config.auth.callbackPath,\n  shopify.auth.callback(),\n  shopify.redirectToShopifyOrAppRoot(),\n);\napp.post(\n  shopify.config.webhooks.path,\n  shopify.processWebhooks({webhookHandlers: GDPRWebhookHandlers}),\n);\n\n// All endpoints after this point will require an active session\napp.use('/api/*', shopify.validateAuthenticatedSession());\n\napp.use(express.json());\n\napp.get('/api/products/count', async (_req, res) => {\n  const countData = await shopify.api.rest.Product.count({\n    session: res.locals.shopify.session,\n  });\n  res.status(200).send(countData);\n});\n\napp.get('/api/products/create', async (_req, res) => {\n  let status = 200;\n  let error = null;\n\n  try {\n    await productCreator(res.locals.shopify.session);\n  } catch (e) {\n    console.log(`Failed to process products/create: ${e.message}`);\n    status = 500;\n    error = e.message;\n  }\n  res.status(status).send({success: status === 200, error});\n});\n\napp.use(serveStatic(STATIC_PATH, {index: false}));\n\napp.use('/*', shopify.ensureInstalledOnShop(), async (_req, res, _next) => {\n  return res\n    .status(200)\n    .set('Content-Type', 'text/html')\n    .send(readFileSync(join(STATIC_PATH, 'index.html')));\n});\n\napp.listen(PORT);\n```\n\n----------------------------------------\n\nTITLE: Initializing Shopify Custom App Session in TypeScript\nDESCRIPTION: Creates a new Session instance for a custom Shopify app with required parameters. The shop parameter is sanitized before use and validation is performed to ensure shop validity.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/reference/session/customAppSession.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst session = new Session({\n  id: '',\n  shop: `${sanitizeShop(config)(shop, true)}`,\n  state: '',\n  isOnline: false,\n});\n```\n\n----------------------------------------\n\nTITLE: Using Fetch API Directly with Storefront API in TypeScript\nDESCRIPTION: Example of using the client.fetch method to get API data. This demonstrates a lower-level approach to making requests when more control over the response handling is needed.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/api-clients/storefront-api-client/README.md#2025-04-11_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nconst shopQuery = `\n  query shop {\n    shop {\n      name\n      id\n    }\n  }\n`;\n\nconst response = await client.fetch(shopQuery);\n\nif (response.ok) {\n  const {errors, data, extensions} = await response.json();\n}\n```\n\n----------------------------------------\n\nTITLE: Saving a Session to Storage After OAuth Callback in TypeScript\nDESCRIPTION: This snippet demonstrates how to extract a Session object from the OAuth callback response and store it using your application's storage mechanism. It uses the toObject() method to convert the Session instance to a plain JavaScript object.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/guides/session-storage.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst callbackResponse = shopify.auth.callback({\n  rawRequest: req,\n  rawResponse: res,\n});\n\n// app stores Session in its own storage mechanism\nawait addSessionToStorage(callbackResponse.session.toObject());\n```\n\n----------------------------------------\n\nTITLE: Adding Webhook Handlers in Shopify App JS v6\nDESCRIPTION: This snippet demonstrates how to add webhook handlers using the new `addHandlers` method in v6. It supports multiple handlers per topic and uses delivery method-specific fields.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/migrating-to-v6.md#2025-04-11_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nawait shopify.webhooks.addHandlers({\n  PRODUCTS_CREATE: {\n    deliveryMethod: DeliveryMethod.Http,\n    callbackUrl: '/webhooks',\n    callback: handleWebhookRequest,\n  },\n  TOPIC_1: [handler, handler2],\n  TOPIC_2: handler3,\n});\n```\n\n----------------------------------------\n\nTITLE: Getting All Resources from Shopify Admin API\nDESCRIPTION: Example showing how to fetch all products using the REST resources, demonstrating how to access the returned data, pagination information, and response headers.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/guides/rest-resources.md#2025-04-11_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Session is built by the OAuth process\n\nconst products = await shopify.rest.Product.all({\n  session: session,\n});\n\n// The list of products\nconsole.log(products.data);\n\n// The pagination information\nconsole.log(products.pageInfo);\n\n// The response headers\nconsole.log(products.headers);\n```\n\n----------------------------------------\n\nTITLE: Configuring Recurring Billing with Discounts in Shopify API\nDESCRIPTION: Example of how to configure a recurring billing plan that charges merchants $30 every 30 days with a $10 discount for the first three billing cycles. Uses the shopifyApi method with billing configuration options.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/guides/billing.md#2025-04-11_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  shopifyApi,\n  BillingInterval,\n  BillingReplacementBehavior,\n} from '@shopify/shopify-api';\n\nconst shopify = shopifyApi({\n  // ...\n  billing: {\n    'My billing plan': {\n      interval: BillingInterval.Every30Days,\n      amount: 30,\n      currencyCode: 'USD',\n      replacementBehavior: BillingReplacementBehavior.ApplyImmediately,\n      discount: {\n        durationLimitInIntervals: 3,\n        value: {\n          amount: 10,\n        },\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Shopify REST Client in TypeScript\nDESCRIPTION: This snippet demonstrates how to initialize a Shopify REST API client within an Express.js route handler. It retrieves the session ID, fetches the session from storage, and creates a new Rest client instance.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/reference/clients/Rest.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\napp.get('/my-endpoint', async (req, res) => {\n  const sessionId = await shopify.session.getCurrentId({\n    isOnline: true,\n    rawRequest: req,\n    rawResponse: res,\n  });\n\n  // use sessionId to retrieve session from app's session storage\n  // getSessionFromStorage() must be provided by application\n  const session = await getSessionFromStorage(sessionId);\n\n  const client = new shopify.clients.Rest({\n    session,\n    apiVersion: ApiVersion.January23,\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Shopify Storefront API Client in TypeScript\nDESCRIPTION: This snippet demonstrates how to construct a Storefront API client using a session object. It shows the setup within an Express.js route handler.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/reference/clients/Storefront.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\napp.get('/my-endpoint', async (req, res) => {\n  const sessionId = await shopify.session.getCurrentId({\n    isOnline: true,\n    rawRequest: req,\n    rawResponse: res,\n  });\n\n  // use sessionId to retrieve session from app's session storage\n  // getSessionFromStorage() must be provided by the application\n  const session = await getSessionFromStorage(sessionId);\n\n  const client = new shopify.clients.Storefront({\n    session,\n    apiVersion: ApiVersion.January23,\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Headers to Storefront API Request in TypeScript\nDESCRIPTION: Example of adding custom headers to a Storefront API request. This demonstrates how to include additional headers like Shopify-Storefront-Id for specialized use cases.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/api-clients/storefront-api-client/README.md#2025-04-11_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nconst productQuery = `\n  query ProductQuery($handle: String) {\n    product(handle: $handle) {\n      id\n      title\n      handle\n    }\n  }\n`;\n\nconst {data, errors, extensions} = await client.request(productQuery, {\n  variables: {\n    handle: 'sample-product',\n  },\n  headers: {\n    'Shopify-Storefront-Id': 'shop-id',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Resource with Shopify Admin API\nDESCRIPTION: Example showing how to create a new product by instantiating a Product resource, setting its properties, and calling save() to persist it.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/guides/rest-resources.md#2025-04-11_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst product = new shopify.rest.Product({session: session});\nproduct.title = 'Burton Custom Freestyle 151';\nproduct.body_html = '<strong>Good snowboard!</strong>';\nproduct.vendor = 'Burton';\nproduct.product_type = 'Snowboard';\nproduct.status = 'draft';\n\n// After promise resolves, product will be updated with the returned data\nawait product.save({\n  update: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Admin API Version Dynamically in Shopify API Client Request\nDESCRIPTION: This snippet illustrates how to dynamically set the Admin API version for a specific request using the Shopify Admin API client. It sends a GET request with a custom API version specified in the options.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/api-clients/admin-api-client/README.md#2025-04-11_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nconst response = await client.get('products/1234567890', {\n  apiVersion: '2023-01',\n});\n\nif (response.ok) {\n  const body = await response.json();\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Auth Nonce in Shopify TypeScript SDK\nDESCRIPTION: Demonstrates how to generate a 15-character cryptographically random string using the Shopify auth module. The nonce is suitable for short-lived cookie values used in request/response validation.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/reference/auth/nonce.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst state = shopify.auth.nonce();\n```\n\n----------------------------------------\n\nTITLE: Fetching Active Subscriptions in TypeScript\nDESCRIPTION: Example demonstrating how to retrieve active subscription plans for the current shop using the Shopify Billing API. The code shows how to get the current session ID, retrieve the session from storage, and fetch active subscriptions.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/reference/billing/subscriptions.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\napp.get('/api/list-subscriptions', async (req, res) => {\n  const sessionId = shopify.session.getCurrentId({\n    isOnline: true,\n    rawRequest: req,\n    rawResponse: res,\n  });\n\n  // use sessionId to retrieve session from app's session storage\n  // In this example, getSessionFromStorage() must be provided by app\n  const session = await getSessionFromStorage(sessionId);\n\n  // return the list of currently active subscriptions for the shop\n  // referenced in the current session\n  const activeSubscriptions = await shopify.billing.subscriptions({\n    session,\n  });\n\n  // activeSubscriptions will be an array of subscription details, e.g.,\n  // [\n  //   {\n  //     \"name\": \"My Active Subscription Charge\",\n  //     \"id\": \"gid://shopify/AppSubscription/1234567890\",\n  //     \"test\": false\n  //   },\n  //   {\n  //     \"name\": \"My Test Subscription Charge\",\n  //     \"id\": \"gid://shopify/AppSubscription/1234567890\",\n  //     \"test\": true\n  //   },\n  // ],\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  activeSubscriptions: [\n    {\n      id: string;\n      name: string;\n      test: boolean;\n    },\n    {\n      id: string;\n      name: string;\n      test: boolean;\n    },\n    // ...\n  ];\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Shopify OAuth and Billing in Express (TypeScript)\nDESCRIPTION: This snippet demonstrates how to set up Shopify OAuth routes in an Express app, including the auth begin and callback endpoints. It also shows how to implement post-authentication logic for checking and requesting payment using Shopify's billing API.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-app-express/docs/reference/auth.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst shopify = shopifyApp({\n  api: {\n    billing: {\n      'My plan': {\n        amount: 10,\n        currencyCode: 'USD',\n        interval: BillingInterval.Every30Days,\n      },\n    },\n  },\n  auth: {\n    path: '/auth',\n    callbackPath: '/auth/callback',\n  },\n});\n\napp.get(shopify.config.auth.path, shopify.auth.begin());\napp.get(\n  shopify.config.auth.callbackPath,\n  shopify.auth.callback(),\n  // Request payment if required\n  async (req, res, next) => {\n    const session = res.locals.shopify.session;\n    const hasPayment = await shopify.api.billing.check({\n      session,\n      plans: ['My plan'],\n      isTest: true,\n    });\n\n    if (hasPayment) {\n      next();\n    } else {\n      res.redirect(\n        await shopify.api.billing.request({\n          session,\n          plan: 'My plan',\n          isTest: true,\n        }),\n      );\n    }\n  },\n  // Load the app otherwise\n  shopify.redirectToShopifyOrAppRoot(),\n);\n```\n\n----------------------------------------\n\nTITLE: Querying Shopify Storefront API for Products in TypeScript\nDESCRIPTION: This example shows how to make a GraphQL request to the Storefront API to fetch the first 10 products, including their id, title, and description HTML.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/reference/clients/Storefront.md#2025-04-11_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst products = await storefrontClient.request(\n  `{\n    products (first: 10) {\n      edges {\n        node {\n          id\n          title\n          descriptionHtml\n        }\n      }\n    }\n  }`,\n);\n\n// do something with the returned data\n```\n\n----------------------------------------\n\nTITLE: Retrieving Active Subscriptions in Shopify App\nDESCRIPTION: Code snippet demonstrating how to retrieve a list of active subscriptions for a merchant using the shopify.billing.subscriptions method. Returns an array of subscription details including name, ID, and test status.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/guides/billing.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst activeSubscriptions = await shopify.billing.subscriptions({\n  session: res.locals.shopify.session,\n});\n\n// activeSubscriptions will be an array of subscription details, e.g.,\n// [\n//   {\n//     \"name\": \"My Shopify Subscription Charge\",\n//     \"id\": \"gid://shopify/AppSubscription/1234567890\",\n//     \"test\": true\n//   },\n// ],\n```\n\n----------------------------------------\n\nTITLE: Using Custom API URL in GraphQL Request with TypeScript\nDESCRIPTION: Demonstrates how to use a custom API URL when making a GraphQL request with the client.request method. It includes specifying the URL in the options.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/api-clients/graphql-client/README.md#2025-04-11_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst productQuery = `\n  query ProductQuery($handle: String) {\n    product(handle: $handle) {\n      id\n      title\n      handle\n    }\n  }\n`;\n\nconst {data, errors, extensions} = await client.request(productQuery, {\n  variables: {\n    handle: 'sample-product',\n  },\n  url: 'http://your-shop-name.myshopify.com/api/unstable/graphql.json',\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring a One-Time Charge in Shopify App\nDESCRIPTION: Sets up a one-time billing charge for a Shopify app. This configuration creates a straightforward one-time payment option with a specified amount and currency.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/guides/billing.md#2025-04-11_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  shopifyApi,\n  BillingInterval,\n  BillingReplacementBehavior,\n} from '@shopify/shopify-api';\n\nconst shopify = shopifyApi({\n  // ...\n  billing: {\n    {\n    \"One Time Charge\": {\n      interval: BillingInterval.OneTime,\n      amount: 30,\n      currencyCode: \"USD\",\n    },\n  },\n}\nfuture: {\n  v10_lineItemBilling: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Multi-Plan Billing Selection in Shopify\nDESCRIPTION: Example demonstrating how to handle billing requests for multiple plans based on user selection.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/reference/billing/request.md#2025-04-11_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\napp.post('/api/select-plan', async (req, res) => {\n  const sessionId = shopify.session.getCurrentId({\n    isOnline: true,\n    rawRequest: req,\n    rawResponse: res,\n  });\n\n  // use sessionId to retrieve session from app's session storage\n  // In this example, getSessionFromStorage() must be provided by app\n  const session = await getSessionFromStorage(sessionId);\n\n  const confirmationUrl = await shopify.billing.request({\n    session,\n    // Receive the selected plan from the frontend\n    plan: req.body.selectedPlan,\n    isTest: true,\n  });\n\n  res.redirect(confirmationUrl);\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing the Shopify Admin API Client\nDESCRIPTION: Code to create and initialize the Admin API client with required parameters including store domain, API version, and access token.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/api-clients/admin-api-client/README.md#2025-04-11_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {createAdminApiClient} from '@shopify/admin-api-client';\n\nconst client = createAdminApiClient({\n  storeDomain: 'your-shop-name.myshopify.com',\n  apiVersion: '2023-04',\n  accessToken: 'your-admin-api-access-token',\n});\n```\n\n----------------------------------------\n\nTITLE: Streaming Product Query with @defer Directive in TypeScript\nDESCRIPTION: Shows how to use the client.requestStream method for a product query that uses the @defer directive. It demonstrates handling the async iterator response.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/api-clients/graphql-client/README.md#2025-04-11_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst productQuery = `\n  query ProductQuery($handle: String) {\n    product(handle: $handle) {\n      id\n      handle\n      ... @defer(label: \"deferredFields\") {\n        title\n        description\n      }\n    }\n  }\n`;\n\nconst responseStream = await client.requestStream(productQuery, {\n  variables: {handle: 'sample-product'},\n});\n\n// await available data from the async iterator\nfor await (const response of responseStream) {\n  const {data, errors, extensions, hasNext} = response;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Line Item Billing with Multiple Line Items in TypeScript\nDESCRIPTION: Example of how to configure billing plans with multiple line items (recurring and usage-based) using the v3_lineItemBilling future flag. The code demonstrates setting up monthly subscription with both fixed and usage-based charges.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-app-remix/CHANGELOG.md#2025-04-11_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n//shopify.server.ts\nimport { shopifyApp, BillingInterval } from \"@shopify/shopify-app-remix/server\";\n\nexport const MONTHLY_PLAN = 'Monthly subscription';\nexport const ANNUAL_PLAN = 'Annual subscription';\n\nconst shopify = shopifyApp({\n  // ...etc\n  billing: {\n    [MONTHLY_PLAN]: {\n      lineItems: [\n       {\n         amount: 5,\n         currencyCode: 'USD',\n         interval: BillingInterval.Every30Days,\n        }\n        {\n            amount: 1,\n            currencyCode: 'USD',\n            interval: BillingInterval.Usage\n            terms: \"1 dollar per 1000 emails\",\n        }\n      ],\n    },\n  },\n  future: {v3_lineItemBilling: true}\n});\nexport default shopify;\nexport const authenticate = shopify.authenticate;\n```\n\n----------------------------------------\n\nTITLE: Updating billing.check Method Usage in TypeScript for Shopify App JS v12\nDESCRIPTION: This snippet demonstrates how to migrate the billing.check method call from v11 to v12. The new version always returns an object, and the check for an active payment has changed.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/migrating-to-v12.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Before\nconst result = shopify.billing.check({\n  session,\n  isTest: true,\n  plans: ['My plan 1', 'My plan 2'],\n  // This parameter no longer exists, but no changes are required if it is true\n  returnObject: false,\n});\n\nif (result === true) {\n  // App-specific code\n}\n\n// After\nconst result = shopify.billing.check({\n  session,\n  isTest: true,\n  plans: ['My plan 1', 'My plan 2'],\n});\n\nif (result.hasActivePayment === true) {\n  // App-specific code\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Session Table Schema for MySQL in Drizzle ORM\nDESCRIPTION: Schema definition for a MySQL session table using Drizzle ORM. The table includes columns for storing Shopify session data with appropriate data types for MySQL.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/session-storage/shopify-app-session-storage-drizzle/README.md#2025-04-11_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  bigint,\n  boolean,\n  mysqlTable,\n  text,\n  timestamp,\n  varchar,\n} from 'drizzle-orm/mysql-core';\n\nexport const sessionTable = mysqlTable('session', {\n  id: varchar('id', {length: 255}).primaryKey(),\n  shop: text('shop').notNull(),\n  state: text('state').notNull(),\n  isOnline: boolean('isOnline').default(false).notNull(),\n  scope: text('scope'),\n  expires: timestamp('expires', {mode: 'date'}),\n  accessToken: text('accessToken'),\n  userId: bigint('userId', {mode: 'number'}),\n});\n```\n\n----------------------------------------\n\nTITLE: Fetching Data with Shopify Session ID in TypeScript\nDESCRIPTION: This example demonstrates how to use shopify.session.getCurrentId to extract the session ID from a request, retrieve the session from storage, and use it to make authenticated requests.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/reference/session/getCurrentId.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\napp.get('/fetch-some-data', async (req, res) => {\n  const sessionId = await shopify.session.getCurrentId({\n    isOnline: true,\n    rawRequest: req,\n    rawResponse: res,\n  });\n\n  // use sessionId to retrieve session from app's session storage\n  // getSessionFromStorage() must be provided by application\n  const session = await getSessionFromStorage(sessionId);\n\n  // Build a client and make requests with session.accessToken\n  // See the REST, GraphQL, or Storefront API documentation for more information\n});\n```\n\n----------------------------------------\n\nTITLE: Checking Billing Status Using Shopify Managed Pricing in TypeScript\nDESCRIPTION: This snippet demonstrates how to check the billing status for a Shopify app using managed pricing. It retrieves the session, checks for payments, and filters for a specific plan.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/reference/billing/check.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\napp.get('/billed-page', (req, res) => {\n  const sessionId = shopify.session.getCurrentId({\n    isOnline: true,\n    rawRequest: req,\n    rawResponse: res,\n  });\n\n  // use sessionId to retrieve session from app's session storage\n  // In this example, getSessionFromStorage() must be provided by app\n  const session = await getSessionFromStorage(sessionId);\n\n  const payments = await shopify.billing.check({\n    session,\n    isTest: true,\n  });\n\n  // The above will fetch all subscriptions, so you can filter by the plan you want\n  const hasPlan1 = payments.appSubscriptions.some((subscription) => {\n    return subscription.name === 'Plan 1';\n  });\n\n  // Return request here, or render a dynamic page based on the plan\n});\n```\n\n----------------------------------------\n\nTITLE: Single-Plan Billing with Return Object in Shopify\nDESCRIPTION: Example showing how to create a billing charge using the returnObject parameter to get detailed response information.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/reference/billing/request.md#2025-04-11_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\napp.get('/auth/callback', async () => {\n  const callback = await shopify.auth.callback({\n    rawRequest: req,\n    rawResponse: res,\n  });\n\n  // Check if we require payment, using shopify.billing.check()\n\n  const billingResponse = await shopify.billing.request({\n    session: callback.session,\n    plan: 'My billing plan',\n    isTest: true,\n    returnObject: true,\n  });\n\n  res.redirect(billingResponse.confirmationUrl);\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Added Webhook Topics in TypeScript\nDESCRIPTION: This snippet demonstrates how to fetch all webhook topics that were added to the registry using the shopify.webhooks.getTopicsAdded method. The function returns an array of topic strings such as 'PRODUCTS_CREATE' and 'PRODUCTS_DELETE'.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/reference/webhooks/getTopicsAdded.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst topics = shopify.webhooks.getTopicsAdded();\n// topics = ['PRODUCTS_CREATE', 'PRODUCTS_DELETE']\n```\n\n----------------------------------------\n\nTITLE: Updating Line Item Billing Configuration in TypeScript\nDESCRIPTION: This snippet demonstrates how to configure line item billing with multiple line items in a single billing request, including both recurring and usage-based app billing. It uses the 'unstable_lineItemBilling' future flag.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/CHANGELOG.md#2025-04-11_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst shopify = shopifyApp({\n  billing: {\n    MultipleLineItems: {\n      replacementBehavior: BillingReplacementBehavior.ApplyImmediately,\n      trialDays: 7,\n      lineItems: [\n        {\n          interval: BillingInterval.Usage,\n          amount: 30,\n          currencyCode: 'USD',\n          terms: 'per 1000 emails',\n        },\n        {\n          interval: BillingInterval.Every30Days,\n          amount: 30,\n          currencyCode: 'USD',\n          discount: {\n            durationLimitInIntervals: 3,\n            value: {\n              amount: 10,\n            },\n          },\n        },\n      ],\n    },\n  },\n  futures: {\n    unstable_lineItemBilling: true,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Converting Session Data with fromPropertyArray Including User Data\nDESCRIPTION: Shows how to convert session data stored as property arrays back into Session objects, with the option to include associated user data. This example demonstrates the full set of user properties that can be included in the session.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/guides/session-storage.md#2025-04-11_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst sessionProperties = session.toPropertyArray(true);\n/*\n  if sessionProperties has the following data...\n  [\n    ['id', 'online_session_id'],\n    ['shop', 'online-session-shop'],\n    ['state', 'online-session-state'],\n    ['isOnline', true],\n    ['scope', 'online-session-scope'],\n    ['accessToken', 'online-session-token'],\n    ['expires', 1641013200000],  // example = January 1, 2022, as number of milliseconds since Jan 1, 1970\n    ['userId', 1],\n    ['first_name', 'online-session-first-name'],\n    ['last_name', 'online-session-last-name'],\n    ['email', 'online-session-email'],\n    ['locale', 'online-session-locale'],\n    ['email_verified', false]\n    ['account_owner', true,]\n    ['collaborator', false],\n    ],\n */\n\nconst session = Session.fromPropertyArray(sessionProperties, true);\n/*\n  ... then session will have the following data...\n  {\n    id: 'online_session_id',\n    shop: 'online-session-shop',\n    state: 'online-session-state',\n    isOnline: true,\n    scope: 'online-session-scope',\n    accessToken: 'online-session-token',\n    expires: 2022-01-01T05:00:00.000Z,  // Date object\n    onlineAccessInfo: {\n      associated_user: {\n        id: 1,\n        first_name: 'online-session-first-name'\n        last_name: 'online-session-last-name',\n        email: 'online-session-email',\n        locale: 'online-session-locale',\n        email_verified: false,\n        account_owner: true,\n        collaborator: false,\n      },\n    }\n  }\n */\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Headers to Shopify Admin API Client Request\nDESCRIPTION: This example demonstrates how to add custom headers to an API request using the Shopify Admin API client. It sends a GET request with a custom header specified in the options.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/api-clients/admin-api-client/README.md#2025-04-11_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nconst response = await client.get('products/1234567890', {\n  headers: {\n    'X-My-Custom-Header': '1',\n  },\n});\n\nif (response.ok) {\n  const body = await response.json();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring a Subscription Plan with Multiple LineItems in Shopify App\nDESCRIPTION: Creates a subscription plan with both recurring and usage-based LineItems. This configuration demonstrates how to combine a 30-day recurring charge with a usage-based charge in a single plan.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/guides/billing.md#2025-04-11_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  shopifyApi,\n  BillingInterval,\n  BillingReplacementBehavior,\n} from '@shopify/shopify-api';\n\nconst shopify = shopifyApi({\n  // ...\n  billing: {\n    {\n    \"Multiple LineItems Plan\": {\n      replacementBehavior: BillingReplacementBehavior.ApplyImmediately,\n      trialDays: 7,\n      lineItems: [\n        {\n          interval: BillingInterval.Every30Days,\n          amount: 30,\n          currencyCode: \"USD\",\n          discount: {\n            durationLimitInIntervals: 3,\n            value: {\n              amount: 10,\n            },\n          },\n        },\n        {\n          interval: BillingInterval.Usage,\n          amount: 30,\n          currencyCode: \"USD\",\n          terms: \"per 1000 emails\",\n        },\n      ],\n    },\n  },\n},\nfuture: {\n  v10_lineItemBilling: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Canceling a Subscription in Shopify App\nDESCRIPTION: Example of how to cancel a merchant's subscription using the shopify.billing.cancel method. Requires the session object and subscription ID, with an option to prorate the refund. Returns details of the canceled subscription.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/guides/billing.md#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// using the example activeSubscriptions response above...\nconst subscriptionId = activeSubscriptions[0].id; // \"gid://shopify/AppSubscription/1234567890\"\nconst canceledSubscription = await shopify.billing.cancel({\n  session,\n  subscriptionId,\n  prorate: true, // Whether to issue prorated credits for the unused portion of the app subscription. Defaults to true.\n});\n\n// canceledSubscription will have the following shape:\n// {\n//   id: string;\n//   name: string;\n//   test: boolean;\n// }\n```\n\n----------------------------------------\n\nTITLE: Processing Webhooks in Cloudflare Workers Environment with TypeScript\nDESCRIPTION: Example demonstrating webhook processing in serverless environments like Cloudflare Workers. In this case, the response from the process method must be captured and returned, including error cases.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/reference/webhooks/process.md#2025-04-11_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nlet response: Response;\n\ntry {\n  response = await shopify.webhooks.process({\n    rawBody: req.body,\n    rawRequest: req,\n    rawResponse: res,\n  });\n} catch (error) {\n  console.log(error.message);\n  response = error.response;\n}\nreturn response;\n```\n\n----------------------------------------\n\nTITLE: Billing Plan Override Example in Shopify\nDESCRIPTION: Demonstrates how to override default billing configuration fields when making a billing request.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/reference/billing/request.md#2025-04-11_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst billingResponse = await shopify.billing.request({\n  session: callback.session,\n  plan: 'My billing plan',\n  returnObject: true,\n  isTest: true,\n  trialDays: 4, // Overrides the trial days set in 'My billing plan'\n  amount: 13, // Overrides the amount set in 'My billing plan'\n});\n\nres.redirect(billingResponse.confirmationUrl);\n```\n\n----------------------------------------\n\nTITLE: Implementing Redirection with buildEmbeddedAppUrl in TypeScript\nDESCRIPTION: Example showing how to use shopify.auth.buildEmbeddedAppUrl within an Express route handler to redirect requests. The function takes a host parameter from the query string and generates a Shopify-appropriate redirect URL.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/reference/auth/buildEmbeddedAppUrl.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\napp.get('/redirect/endpoint', (req, res) => {\n  const redirectURL = shopify.auth.buildEmbeddedAppUrl(req.query.host);\n\n  res.redirect(redirectURL);\n});\n```\n\n----------------------------------------\n\nTITLE: Registering Webhooks After OAuth Completion in TypeScript\nDESCRIPTION: This example shows how to register webhooks after OAuth completes. It handles the auth callback, registers webhooks using the session from the callback response, and checks if registration was successful.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/reference/webhooks/register.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Register webhooks after OAuth completes\napp.get('/auth/callback', async (req, res) => {\n  try {\n    const callbackResponse = await shopify.auth.callback({\n      rawRequest: req,\n      rawResponse: res,\n    });\n\n    const response = await shopify.webhooks.register({\n      session: callbackResponse.session,\n    });\n\n    if (!response['PRODUCTS_CREATE'][0].success) {\n      console.log(\n        `Failed to register PRODUCTS_CREATE webhook: ${response['PRODUCTS_CREATE'][0].result}`,\n      );\n    }\n  } catch (error) {\n    console.error(error); // in practice these should be handled more gracefully\n  }\n  return res.redirect('/'); // or wherever you want your user to end up after OAuth completes\n});\n```\n\n----------------------------------------\n\nTITLE: Mounting REST Resources in Shopify API\nDESCRIPTION: Example showing how to import and mount REST resources for a specific API version onto the shopify object when initializing the library.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/guides/rest-resources.md#2025-04-11_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport {shopifyApi} from '@shopify/shopify-api';\nimport {restResources} from '@shopify/shopify-api/rest/admin/2022-10';\n\nconst shopify = shopifyApi({\n  ...,\n  apiVersion: ApiVersion.October22,\n  restResources,\n});\n```\n\n----------------------------------------\n\nTITLE: Using Billing Check with Return Objects in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the shopify.billing.check method with the returnObject parameter set to true. It shows how to handle the detailed response object and make decisions based on the payment status.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/reference/billing/check.md#2025-04-11_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nasync function billingMiddleware(req, res, next) {\n  const sessionId = shopify.session.getCurrentId({\n    isOnline: true,\n    rawRequest: req,\n    rawResponse: res,\n  });\n\n  // use sessionId to retrieve session from app's session storage\n  // In this example, getSessionFromStorage() must be provided by app\n  const session = await getSessionFromStorage(sessionId);\n\n  const payments = await shopify.billing.check({\n    session,\n    plans: ['My billing plan'],\n    isTest: true,\n    returnObject: true,\n  });\n\n  if (payments.hasActivePayment) {\n    next();\n  } else {\n    // Either request payment now (if single plan) or redirect to plan selection page (if multiple plans available), e.g.\n    const billingResponse = await shopify.billing.request({\n      session,\n      plan: 'My billing plan',\n      isTest: true,\n      returnObject: true,\n    });\n\n    res.redirect(billingResponse.confirmationUrl);\n  }\n}\n\napp.use('/requires-payment/*', billingMiddleware);\n```\n\n----------------------------------------\n\nTITLE: Implementing Webhook Validation with Express\nDESCRIPTION: Example showing how to validate incoming webhooks using Express middleware and the shopify.webhooks.validate method. The code demonstrates proper request body handling and validation response processing.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/reference/webhooks/validate.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\napp.post('/webhooks', express.text({type: '*/*'}), async (req, res) => {\n  const {valid, topic, domain} = await shopify.webhooks.validate({\n    rawBody: req.body, // is a string\n    rawRequest: req,\n    rawResponse: res,\n  });\n\n  if (!valid) {\n    // This is not a valid request!\n    res.send(400); // Bad Request\n  }\n\n  // Run my webhook-processing code here\n});\n```\n\n----------------------------------------\n\nTITLE: Validating Shopify App Proxy Request Signature in TypeScript\nDESCRIPTION: This snippet shows how to validate an App Proxy request signature. It passes the request query parameters along with a configuration object specifying the signator as 'appProxy' to the validateHmac utility.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/reference/utils/validateHmac.md#2025-04-11_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst isValid = await shopify.utils.validateHmac(req.query, {\n  signator: 'appProxy',\n});\n```\n\n----------------------------------------\n\nTITLE: Using Generated Types with Direct API Access\nDESCRIPTION: Example of using generated types with Shopify App Bridge Direct API Access for type-safe API requests.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/api-clients/api-codegen-preset/README.md#2025-04-11_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport type {  GetProductsQuery } from \"app/types/admin.generated\";\n\nconst fetchProduct = async () => {\n  const res = await fetch('shopify:admin/api/graphql.json', {\n    method: 'POST',\n    body: JSON.stringify({\n      query: `#graphql\n        query getProducts($first: Int) {\n          products(first: $first) {\n            edges {\n              cursor\n              node {\n                title\n                handle\n              }\n            }\n          }\n        }\n      ` as const,\n      variables: { first: 1 },\n    }),\n  });\n\n  const { data } = (await res.json()) as { data: GetProductsQuery };\n  console.log(data.products.edges[0]?.node);\n};\n```\n\n----------------------------------------\n\nTITLE: Processing Shopify Auth Callback in Cloudflare Workers\nDESCRIPTION: Example of handling Shopify's OAuth callback in a Cloudflare Workers environment. This code processes the callback request, obtains a Shopify session, and constructs a response with appropriate headers and redirection.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/reference/auth/callback.md#2025-04-11_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nasync function handleFetch(request: Request): Promise<Response> {\n  const callback = await shopify.auth.callback<Headers>({\n    rawRequest: request,\n  });\n\n  // You can now use callback.session to make API requests\n\n  // The callback returns some HTTP headers, but you can redirect to any route here\n  return new Response('', {\n    status: 302,\n    // Headers are of type [string, string][]\n    headers: [...callback.headers, ['Location', '/my-apps-entry-page']],\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring and Processing Shopify Webhooks in TypeScript\nDESCRIPTION: This snippet demonstrates how to set up handlers for mandatory GDPR webhooks using the shopify.processWebhooks() function. It includes configuration for customer data requests, customer data redaction, and shop data redaction.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-app-express/docs/reference/processWebhooks.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst {DeliveryMethod} = require('@shopify/shopify-api');\n\nconst shopify = shopifyApp({\n  webhooks: {\n    path: '/webhooks',\n  },\n});\n\nconst webhookHandlers = {\n  CUSTOMERS_DATA_REQUEST: {\n    deliveryMethod: DeliveryMethod.Http,\n    callbackUrl: shopify.config.webhooks.path,\n    callback: async (topic, shop, body, webhookId, apiVersion) => {\n      const payload = JSON.parse(body);\n      // prepare customers data to send to customer\n    },\n  },\n  CUSTOMERS_REDACT: {\n    deliveryMethod: DeliveryMethod.Http,\n    callbackUrl: shopify.config.webhooks.path,\n    callback: async (topic, shop, body) => {\n      const payload = JSON.parse(body);\n      // remove customers data\n    },\n  },\n  SHOP_REDACT: {\n    deliveryMethod: DeliveryMethod.Http,\n    callbackUrl: shopify.config.webhooks.path,\n    callback: async (topic, shop, body, webhookId, apiVersion) => {\n      const payload = JSON.parse(body);\n      // remove shop data\n    },\n  },\n};\n\n// This must be a .post() endpoint\napp.post(\n  shopify.config.webhooks.path,\n  shopify.processWebhooks({webhookHandlers}),\n);\n```\n\n----------------------------------------\n\nTITLE: Updating REST Resource Pagination in TypeScript\nDESCRIPTION: Demonstrates the changes in handling REST resource pagination between v6 and v7. Shows how to access paginated data and pagination info from the response object instead of static variables.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/migrating-to-v7.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst response = await shopify.rest.Product.all({\n  // ...\n});\n\n// BEFORE, e.g., v6\nconst products: Product[] = response;\nconst nextPageInfo = shopify.rest.Product.NEXT_PAGE_INFO;\n\n// AFTER, e.g., v7\nconst products: Product[] = response.data;\nconst nextPageInfo = response.pageInfo?.nextPage;\nconst responseHeaders = response.headers;\n```\n\n----------------------------------------\n\nTITLE: Querying a Product using Shopify Admin API Client in TypeScript\nDESCRIPTION: This snippet demonstrates how to fetch a product by its ID using the Shopify Admin API client. It sends a GET request and checks for a successful response before parsing the JSON body.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/api-clients/admin-api-client/README.md#2025-04-11_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst response = await client.get('products/1234567890');\n\nif (response.ok) {\n  const body = await response.json();\n}\n```\n\n----------------------------------------\n\nTITLE: Processing Webhooks in Express.js Environment with TypeScript\nDESCRIPTION: Example showing how to use shopify.webhooks.process in an Express.js application. It uses express.text() middleware to ensure the request body is available as a string, then passes it to the process method.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/reference/webhooks/process.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\napp.post('/webhooks', express.text({type: '*/*'}), async (req, res) => {\n  try {\n    // Note: the express.text() given above is an Express middleware that will read\n    // in the body as a string, and make it available at req.body, for this path only.\n    await shopify.webhooks.process({\n      rawBody: req.body, // is a string\n      rawRequest: req,\n      rawResponse: res,\n    });\n  } catch (error) {\n    console.log(error.message);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Webhook Validation Implementation\nDESCRIPTION: Example of implementing webhook validation using the validate method. Shows how to set up handlers and process incoming webhook requests with validation checks.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/guides/webhooks.md#2025-04-11_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Add handlers for the events you want to subscribe to. You don't need a callback if you're just using `validate`\nshopify.webhooks.addHandlers({\n  PRODUCTS_CREATE: [\n    {deliveryMethod: DeliveryMethod.Http, callbackUrl: '/webhooks'},\n  ],\n});\n\n// Handle webhooks\napp.post('/webhooks', express.text({type: '*/*'}), async (req, res) => {\n  const {valid, topic, domain} = await shopify.webhooks.validate({\n    rawBody: req.body, // is a string\n    rawRequest: req,\n    rawResponse: res,\n  });\n\n  if (!valid) {\n    console.error('Invalid webhook call, not handling it');\n    res.send(400); // Bad Request\n  }\n\n  console.log(`Received webhook for ${topic} for shop ${domain}`);\n\n  const sessionId = shopify.session.getOfflineId(domain);\n\n  // Run your webhook-processing code here!\n});\n```\n\n----------------------------------------\n\nTITLE: Using REST Resources in Shopify App JS v6\nDESCRIPTION: This snippet shows how to use REST resources in v6. Resources are now accessed via the Shopify API instance instead of importing directly from the dist folder.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/migrating-to-v6.md#2025-04-11_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nimport {shopifyApi, ApiVersion} from '@shopify/shopify-api';\nconst apiVersion = ApiVersion.October22;\nlet {restResources} = await import(\n  `@shopify/shopify-api/rest/admin/${apiVersion}`\n);\n\nconst shopify = shopifyApi({\n  // ...\n  apiVersion,\n  restResources,\n});\n\n// ...\n\napp.get('/api/products/count', async (req, res) => {\n  const sessionId = await shopify.session.getCurrentId({\n    isOnline: false,\n    rawRequest: req,\n    rawResponse: res,\n  });\n\n  // use sessionId to retrieve session from app's session storage\n  // getSessionFromStorage() must be provided by application\n  const session = await getSessionFromStorage(sessionId);\n\n  const countData = await shopify.rest.Product.count({session});\n  res.status(200).send(countData);\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing Logging Function in Shopify API (TypeScript)\nDESCRIPTION: Example of how to implement a custom logging function that writes to different log files based on severity when initializing the Shopify API.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/guides/logger.md#2025-04-11_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport {shopifyApi} from '@shopify/shopify-api';\nimport {writeFileSync} from 'fs';\n\nconst errorLogFile = './error.log';\nconst appLogFile = './application.log';\n\nconst myLoggingFunction = (severity, message) => {\n  writeFileSync(appLogFile, `${message}\\n`, {flag: 'a'});\n  if (severity == LogSeverity.Error) {\n    writeFileSync(errorLogFile, `${message}\\n`, {flag: 'a'});\n  }\n};\n\nconst shopify = shopifyApi({\n  // other config values\n  logger: {\n    log: myLoggingFunction,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Getting a Single Resource from Shopify Admin API\nDESCRIPTION: Example showing how to fetch a single product by its ID using the REST resources.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/guides/rest-resources.md#2025-04-11_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Session is built by the OAuth process\n\nconst product = await shopify.rest.Product.find({\n  session: session,\n  id: 632910392,\n});\n\nconsole.log(product);\n```\n\n----------------------------------------\n\nTITLE: Setting Up Valid Test Session in Shopify App\nDESCRIPTION: Demonstrates how to create and manage a fake session for testing using PrismaSessionStorage. Shows the complete setup and teardown process including storing and deleting the test session.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/guides/test-helpers.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport prisma from '~/db.server';\nimport { PrismaSessionStorage } from '@shopify/shopify-app-session-storage-prisma';\nimport { setUpValidSession } from '@shopify/shopify-api/test-helpers';\n\n// set up test Session\nconst sessionStorage = new PrismaSessionStorage(prisma);\nconst session = await setUpValidSession({\n  shop: getShopValue('test-shop');\n});\nawait sessionStorage.storeSession(session);\n\n... // complete testing here\n\n// tear down test Session\nawait sessionStorage.deleteSession(session.id);\n```\n\n----------------------------------------\n\nTITLE: Updated Webhook Validation Error Handling\nDESCRIPTION: Demonstrates how to update webhook validation error handling code to use the new WebhookValidationErrorReason.MissingHmac reason instead of checking for missing headers.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/migrating-to-v10.md#2025-04-11_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {type WebhookValidationErrorReason} from '@shopify/shopify-api';\n\nconst check = await shopify.webhooks.validate({\n  rawBody: (req as any).rawBody,\n  rawRequest: req,\n  rawResponse: res,\n});\n\n// Before\nif (\n  !check.valid &&\n  check.reason === WebhookValidationErrorReason.MissingHeaders &&\n  check.missingHeaders.includes(ShopifyHeader.Hmac)\n) {\n  // Handle error\n}\n\n// After\nif (!check.valid && check.reason === WebhookValidationErrorReason.MissingHmac) {\n  // Handle error\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript GraphQL Query Implementation\nDESCRIPTION: Example of using typed GraphQL queries with the Shopify API client, demonstrating proper query structure and type inference.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/guides/graphql-types.md#2025-04-11_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst client = new api.clients.Graphql({session});\n\nconst response = await client.request(\n  `#graphql\n  query productHandles($first: Int!) {\n    products(first: $first) {\n      edges {\n        node {\n          handle\n        }\n      }\n    }\n  }`,\n  {\n    variables: {\n      first: 10,\n    },\n  },\n);\n\nconsole.log(response.data?.products?.edges[0].node.handle);\n```\n\n----------------------------------------\n\nTITLE: Updating webhook handling in Express server (JavaScript)\nDESCRIPTION: This snippet shows the changes in webhook handling, including the use of await for adding handlers and processing webhooks. It also introduces a plain text body parser for the webhook endpoint.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/example-migration-v5-node-template-to-v6.md#2025-04-11_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n-Shopify.Webhooks.Registry.addHandler(\"APP_UNINSTALLED\", {\n-  path: \"/api/webhooks\",\n-  webhookHandler: async (_topic, shop, _body) => {\n-    await AppInstallations.delete(shop);\n+await shopify.webhooks.addHandlers({\n+  APP_UNINSTALLED: {\n+    deliveryMethod: DeliveryMethod.Http,\n+    callbackUrl: \"/api/webhooks\",\n+    callback: async (_topic, shop, _body) => {\n+      await AppInstallations.delete(shop);\n+    },\n   },\n });\n\n-// The transactions with Shopify will always be marked as test transactions, unless NODE_ENV is production.\n-// See the ensureBilling helper to learn more about billing in this template.\n-const BILLING_SETTINGS = {\n-  required: false,\n-  // This is an example configuration that would do a one-time charge for $5 (only USD is currently supported)\n-  // chargeName: \"My Shopify One-Time Charge\",\n-  // amount: 5.0,\n-  // currencyCode: \"USD\",\n-  // interval: BillingInterval.OneTime,\n-};\n-\n// This sets up the mandatory GDPR webhooks. You'll need to fill in the endpoint\n// in the \"GDPR mandatory webhooks\" section in the \"App setup\" tab, and customize\n// the code when you store customer data.\n//\n// More details can be found on shopify.dev:\n// https://shopify.dev/docs/apps/webhooks/configuration/mandatory-webhooks\nsetupGDPRWebHooks(\"/api/webhooks\");\n\n// export for test use only\nexport async function createServer(\n  root = process.cwd(),\n-  isProd = process.env.NODE_ENV === \"production\",\n-  billingSettings = BILLING_SETTINGS\n+  isProd = process.env.NODE_ENV === \"production\"\n) {\n  const app = express();\n\n  app.set(\"use-online-tokens\", USE_ONLINE_TOKENS);\n-  app.use(cookieParser(Shopify.Context.API_SECRET_KEY));\n+  app.use(cookieParser(shopify.config.apiSecretKey));\n\n-  applyAuthMiddleware(app, {\n-    billing: billingSettings,\n-  });\n+  applyAuthMiddleware(app);\n\n-  // Do not call app.use(express.json()) before processing webhooks with\n-  // Shopify.Webhooks.Registry.process().\n-  // See https://github.com/Shopify/shopify-api-node/blob/main/packages/apps/shopify-api/docs/guides/webhooks.md#note-regarding-use-of-body-parsers\n-  // for more details.\n-  app.post(\"/api/webhooks\", async (req, res) => {\n+  app.post(\"/api/webhooks\", express.text({ type: \"*/*\" }), async (req, res) => {\n     try {\n-      await Shopify.Webhooks.Registry.process(req, res);\n+      await shopify.webhooks.process({\n+        rawBody: req.body,\n+        rawRequest: req,\n+        rawResponse: res,\n+      });\n       console.log(`Webhook processed, returned status code 200`);\n     } catch (e) {\n       console.log(`Failed to process webhook: ${e.message}`);\n       if (!res.headersSent) {\n         res.status(500).send(e.message);\n       }\n     }\n   });\n\n+  // All endpoints after this point will have access to a request.body\n+  // attribute, as a result of the express.json() middleware\n+  app.use(express.json());\n+\n   // All endpoints after this point will require an active session\n-  app.use(\n-    \"/api/*\",\n-    verifyRequest(app, {\n-      billing: billingSettings,\n-    })\n-  );\n+  app.use(\"/api/*\", verifyRequest(app));\n```\n\n----------------------------------------\n\nTITLE: Creating a Usage Record for a Billing Plan with Subscription Line Item ID in TypeScript\nDESCRIPTION: Creates a usage record for a specific subscription line item by providing the ID. Returns a UsageRecord object containing details of the successfully created record or throws a BillingError if any errors occur.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/reference/billing/create-usage-record.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst chargeBilling = await billing.createUsageRecord({\n  description: \"Usage record for product creation\",\n  price: {\n    amount: 1,\n    currencyCode: \"USD\",\n  },\n  isTest: true,\n  subscriptionLineItemId: \"gid://shopify/AppSubscriptionLineItem/1234567890\",\n});\nconsole.log(chargeBilling);\n```\n\n----------------------------------------\n\nTITLE: Instantiating and Using PostgreSQL Session Storage with Drizzle\nDESCRIPTION: Example showing how to instantiate the DrizzleSessionStoragePostgres adapter and integrate it with the Shopify app. The storage adapter is initialized with a database connection and session table.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/session-storage/shopify-app-session-storage-drizzle/README.md#2025-04-11_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {shopifyApp} from '@shopify/shopify-app-express';\nimport {DrizzleSessionStoragePostgres} from '@shopify/shopify-app-session-storage-drizzle';\n\nimport {db} from './db.server';\nimport {sessionTable} from './schema';\n\nconst storage = new DrizzleSessionStoragePostgres(db, sessionTable);\n\nconst shopify = shopifyApp({\n  sessionStorage: storage,\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing RedisSessionStorage with Separate Credentials\nDESCRIPTION: Sets up RedisSessionStorage by providing individual credential components (host, database, username, password) using the withCredentials static method.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/session-storage/shopify-app-session-storage-redis/README.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst shopify = shopifyApp({\n  sessionStorage: RedisSessionStorage.withCredentials(\n    'host.com',\n    'thedatabase',\n    'username',\n    'password',\n  ),\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing SQLiteSessionStorage in a Shopify Express App\nDESCRIPTION: This snippet demonstrates how to initialize the SQLiteSessionStorage adapter with either a database file path or an existing sqlite3.Database instance, and how to integrate it with the shopifyApp configuration. This is essential for setting up session persistence in a Shopify app.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/session-storage/shopify-app-session-storage-sqlite/README.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {shopifyApp} from '@shopify/shopify-app-express';\nimport {SQLiteSessionStorage} from '@shopify/shopify-app-session-storage-sqlite';\nimport sqlite3 from 'sqlite3';\n\n// You can construct using either a filename...\nconst storage = new SQLiteSessionStorage('/path/to/your.db');\n\n// or an existing sqlite3.Database\nconst database = new sqlite3.Database('/path/to/your.db');\nconst storage = new SQLiteSessionStorage(database);\n\nconst shopify = shopifyApp({\n  sessionStorage: storage,\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Billing Helper for Shopify API v6\nDESCRIPTION: This snippet replaces the entire content of the ensure-billing.js helper file. It uses the new shopify.billing methods to check and request payments.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/example-migration-v5-node-template-to-v6.md#2025-04-11_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport shopify from '../shopify.js';\n\n/**\n * You may want to charge merchants for using your app. This helper provides that function by checking if the current\n * merchant has an active one-time payment or subscription named `chargeName`. If no payment is found,\n * this helper requests it and returns a confirmation URL so that the merchant can approve the purchase.\n *\n * Learn more about billing in our documentation: https://shopify.dev/docs/apps/billing\n */\nexport default async function ensureBilling(\n  session,\n  isProdOverride = process.env.NODE_ENV === 'production',\n) {\n  let hasPayment = true;\n  let confirmationUrl = null;\n\n  if (shopify.config.billing) {\n    hasPayment = await shopify.billing.check({\n      session,\n      plans: Object.keys(shopify.config.billing),\n      isTest: !isProdOverride,\n    });\n\n    if (!hasPayment) {\n      // Realistically, if there are more than one plan to choose from, you should redirect to\n      // a page that allows the merchant to choose a plan.\n      // For this example, we'll just redirect to the first plan\n      confirmationUrl = await shopify.billing.request({\n        session,\n        plan: Object.keys(shopify.config.billing)[0],\n        isTest: !isProdOverride,\n      });\n    }\n  }\n\n  return [hasPayment, confirmationUrl];\n}\n```\n\n----------------------------------------\n\nTITLE: Using New GraphQL Client Request Format in TypeScript\nDESCRIPTION: Example showing the new GraphQL client request format that aligns with common GraphQL clients like Apollo, supporting improved typing.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/migrating-to-v9.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst client = new shopify.clients.Graphql({session});\nconst response: Response = await client.request(\n  `query { ... }`,\n  { variables: { ... } }\n);\n```\n\n----------------------------------------\n\nTITLE: Validating Shopify Flow Extension Requests with Express\nDESCRIPTION: Example showing how to validate Shopify Flow extension requests in an Express.js endpoint. The code demonstrates proper handling of the request body, validation of the Flow request, and appropriate error responses.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/reference/flow/validate.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\napp.post('/flow', express.text({type: '*/*'}), async (req, res) => {\n  const result = await shopify.flow.validate({\n    rawBody: req.body, // is a string\n    rawRequest: req,\n    rawResponse: res,\n  });\n\n  if (!result.valid) {\n    console.log(`Received invalid Flow extension request: ${result.reason}`);\n    res.send(400);\n  }\n\n  res.send(200);\n});\n```\n\n----------------------------------------\n\nTITLE: Using GraphQL Query with v3_webhookContext Flag in Remix\nDESCRIPTION: Shows the simplified GraphQL client usage with the v3_webhookContext flag enabled. This approach allows calling the graphql function directly with the query string and variables as separate parameters.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-app-remix/CHANGELOG.md#2025-04-11_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport {ActionFunctionArgs} from '@remix-run/node';\nimport {authenticate} from '../shopify.server';\n\nexport async function action({request}: ActionFunctionArgs) {\n  const {admin} = await authenticate.webhook(request);\n\n  const response = await admin?.graphql(\n    `#graphql\n    mutation populateProduct($input: ProductInput!) {\n      productCreate(input: $input) {\n        product {\n          id\n        }\n      }\n    }`,\n    {variables: {input: {title: 'Product Name'}}},\n  );\n\n  const productData = await response.json();\n  return json({data: productData.data});\n}\n```\n\n----------------------------------------\n\nTITLE: Creating server-enabled GraphQL Client with custom Fetch API (TypeScript)\nDESCRIPTION: Example of initializing a GraphQL client for server-side use with a custom Fetch API implementation.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/api-clients/graphql-client/README.md#2025-04-11_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {createGraphQLClient} from '@shopify/graphql-client';\nimport {fetch as nodeFetch} from 'node-fetch';\n\nconst client = createGraphQLClient({\n  url: 'http://your-shop-name.myshopify.com/api/2023-10/graphql.json',\n  headers: {\n    'Content-Type': 'application/json',\n    'X-Shopify-Storefront-Access-Token': 'public-token',\n  },\n  customFetchApi: nodeFetch\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Connection Retries for PrismaSessionStorage\nDESCRIPTION: This TypeScript code demonstrates how to configure connection retries for PrismaSessionStorage. It sets the number of retries and the interval between retries to handle potential database connection issues during startup.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/session-storage/shopify-app-session-storage-prisma/README.md#2025-04-11_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst storage = new PrismaSessionStorage(prisma, {\n  // Default values\n  connectionRetries: 2,\n  connectionRetryIntervalMs: 5000,\n});\n```\n\n----------------------------------------\n\nTITLE: Billing Configuration Updates\nDESCRIPTION: Shows the new billing configuration format supporting multiple plans and separate check/request methods.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/migrating-to-v6.md#2025-04-11_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst shopify = shopifyApi({\n  // ...\n  billing: {\n    'My plan': {\n      amount: 5.0,\n      currencyCode: 'USD',\n      interval: BillingInterval.Every30Days,\n    },\n  },\n});\n\nconst hasPayment = await shopify.billing.check({\n  session,\n  plans: 'My plan',\n  isTest: true,\n});\n\nif (!hasPayment) {\n  const confirmationUrl = await shopify.billing.request({\n    session,\n    plan: 'My plan',\n    isTest: true,\n  });\n  return redirect(confirmationUrl);\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing MongoDB Session Storage in Shopify App (JavaScript)\nDESCRIPTION: This snippet demonstrates how to initialize MongoDB session storage in a Shopify app using the MongoDBSessionStorage class. It shows two methods: direct initialization with a MongoDB connection string and using the withCredentials method.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/session-storage/shopify-app-session-storage-mongodb/README.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {shopifyApp} from '@shopify/shopify-app-express';\nimport {MongoDBSessionStorage} from '@shopify/shopify-app-session-storage-mongodb';\n\nconst shopify = shopifyApp({\n  sessionStorage: new MongoDBSessionStorage(\n    'mongodb://username:password@host/',\n    'database',\n  ),\n  // ...\n});\n\n// OR\n\nconst shopify = shopifyApp({\n  sessionStorage: MongoDBSessionStorage.withCredentials(\n    'host.com',\n    'thedatabase',\n    'username',\n    'password',\n  ),\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Creating shopify.js Configuration File\nDESCRIPTION: Create a new file called shopify.js to set up the Shopify API instance with Node.js adapter and billing configuration.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/example-migration-v5-node-template-to-v6.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport '@shopify/shopify-api/adapters/node';\nimport {\n  shopifyApi,\n  BillingInterval,\n  LATEST_API_VERSION,\n  LogSeverity,\n} from '@shopify/shopify-api';\nlet {restResources} = await import(\n  `@shopify/shopify-api/rest/admin/${LATEST_API_VERSION}`\n);\n\nconst billingConfig = {\n  'My Shopify One-Time Charge': {\n    amount: 5.0,\n    currencyCode: 'USD',\n    interval: BillingInterval.OneTime,\n  },\n};\n\nconst apiConfig = {\n  apiKey: process.env.SHOPIFY_API_KEY,\n  apiSecretKey: process.env.SHOPIFY_API_SECRET,\n  scopes: process.env.SCOPES.split(','),\n  hostName: process.env.HOST.replace(/https?:\\/\\//, ''),\n  hostScheme: process.env.HOST.split('://')[0],\n  apiVersion: LATEST_API_VERSION,\n  isEmbeddedApp: true,\n  ...(process.env.SHOP_CUSTOM_DOMAIN && {\n    customShopDomains: [process.env.SHOP_CUSTOM_DOMAIN],\n  }),\n  billing: undefined, // or replace with billingConfig above to enable example billing\n  restResources,\n};\n\nconst shopify = shopifyApi(apiConfig);\nexport default shopify;\n```\n\n----------------------------------------\n\nTITLE: API Client Constructor Updates\nDESCRIPTION: Shows the new constructor patterns for REST, GraphQL, and Storefront API clients using object parameters.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/migrating-to-v6.md#2025-04-11_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst restClient = new shopify.clients.Rest({session});\n\nconst graphqlClient = new shopify.clients.Graphql({session});\n\nconst storefrontClient = new shopify.clients.Storefront({\n  domain: session.shop,\n  storefrontAccessToken,\n});\n```\n\n----------------------------------------\n\nTITLE: Initiating Shopify OAuth Authentication Process in Node.js\nDESCRIPTION: Example of using shopify.auth.begin in a Node.js environment to start the OAuth process. The method redirects the user to Shopify's authentication screen and requires shop information, callback path, online mode flag, and request/response objects.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/reference/auth/begin.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\napp.get('/auth', async (req, res) => {\n  // The library will automatically redirect the user\n  await shopify.auth.begin({\n    shop: shopify.utils.sanitizeShop(req.query.shop, true),\n    callbackPath: '/auth/callback',\n    isOnline: false,\n    rawRequest: req,\n    rawResponse: res,\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Using Unauthenticated Admin API Access\nDESCRIPTION: Demonstrates how to get an admin context without standard Shopify authentication. This should only be used for requests that don't originate from Shopify and require custom authentication.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-app-remix/CHANGELOG.md#2025-04-11_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n// app/shopify.server.ts\nimport {shopifyApp} from '@shopify/shopify-app-remix';\nimport {restResources} from '@shopify/shopify-api/rest/admin/2023-04';\n\nconst shopify = shopifyApp({\n  restResources,\n  // ...etc\n});\n\nexport default shopify;\n\n// app/routes/\\/.jsx\nimport {json} from '@remix-run/node';\nimport {authenticateExternalRequest} from '~/helpers/authenticate';\nimport shopify from '../../shopify.server';\n\nexport async function loader({request}) {\n  const shop = await authenticateExternalRequest(request);\n  const {admin, session} = await shopify.unauthenticated.admin(shop);\n\n  return json(await admin.rest.resources.Product.count({session}));\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Runtime Adapter Functions in TypeScript for Shopify API\nDESCRIPTION: A simplified example showing how to implement essential functions for a custom runtime adapter. The example demonstrates setting the runtime string identifier and a header conversion function, which are part of the requirements for creating a custom adapter for the Shopify API library.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/guides/runtimes.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  setAbstractConvertHeadersFunc,\n  setAbstractRuntimeString,\n  AbstractRuntimeStringFunc,\n  AbstractConvertHeadersFunc,\n  Headers,\n  AdapterArgs,\n} from '@shopify/shopify-api/runtime';\n\ntype MyRequestType = any;\ntype MyResponseType = any;\n\ninterface MyRuntimeAdapterArgs extends AdapterArgs {\n  rawRequest: MyRequestType;\n  rawResponse?: MyResponseType;\n}\n\nconst myRuntimeStringFunc: AbstractRuntimeStringFunc = () => {\n  return `My runtime adapter ${myAdapterVersion}`;\n};\nsetAbstractRuntimeString(myRuntimeStringFunc);\n\nconst myRuntimeHeaderFunc: AbstractConvertHeadersFunc = async (\n  headers: Headers,\n  adapterArgs: MyRuntimeAdapterArgs,\n) => {\n  return magicHeaderConversion(headers);\n};\nsetAbstractConvertHeadersFunc(myRuntimeHeaderFunc);\n```\n\n----------------------------------------\n\nTITLE: Session Activity Check Implementation\nDESCRIPTION: Demonstrates the updated isActive() method which now requires a scopes parameter to validate session activity.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/migrating-to-v6.md#2025-04-11_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst sessionId = await shopify.session.getCurrentId({\n  isOnline: true,\n  rawRequest: req,\n  rawResponse: res,\n});\n\n// use sessionId to retrieve session from app's session storage\n// getSessionFromStorage() must be provided by application\nconst session = await getSessionFromStorage(sessionId);\n\nif (!session.isActive(shopify.config.scopes)) {\n  // current session is not active - either expired or scopes have changed\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing GraphQL Client (TypeScript)\nDESCRIPTION: Example of creating a GraphQL client instance with custom headers and retry settings.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/api-clients/graphql-client/README.md#2025-04-11_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {createGraphQLClient} from '@shopify/graphql-client';\n\nconst client = createGraphQLClient({\n  url: 'http://your-shop-name.myshopify.com/api/2023-10/graphql.json',\n  headers: {\n    'Content-Type': 'application/json',\n    'X-Shopify-Storefront-Access-Token': 'public-token',\n  },\n  retries: 1\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Billing Middleware Without Return Objects in TypeScript\nDESCRIPTION: This example shows how to create a middleware function that checks for billing status and redirects to payment if necessary. It uses the shopify.billing.check method without the returnObject parameter.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/reference/billing/check.md#2025-04-11_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nasync function billingMiddleware(req, res, next) {\n  const sessionId = shopify.session.getCurrentId({\n    isOnline: true,\n    rawRequest: req,\n    rawResponse: res,\n  });\n\n  // use sessionId to retrieve session from app's session storage\n  // In this example, getSessionFromStorage() must be provided by app\n  const session = await getSessionFromStorage(sessionId);\n\n  const hasPayment = await shopify.billing.check({\n    session,\n    plans: ['My billing plan'],\n    isTest: true,\n  });\n\n  if (hasPayment) {\n    next();\n  } else {\n    // Either request payment now (if single plan) or redirect to plan selection page (if multiple plans available), e.g.\n    const confirmationUrl = await shopify.billing.request({\n      session,\n      plan: 'My billing plan',\n      isTest: true,\n    });\n\n    res.redirect(confirmationUrl);\n  }\n}\n\napp.use('/requires-payment/*', billingMiddleware);\n```\n\n----------------------------------------\n\nTITLE: Processing Webhooks in Shopify App JS v6\nDESCRIPTION: This snippet demonstrates how to process webhooks using the new `process` method in v6. It now requires the raw body as an argument instead of parsing it from the request.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/migrating-to-v6.md#2025-04-11_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\napp.post('/webhooks', async (req, res) => {\n  try {\n    // Note: this example assumes that the raw content of the body of the request\n    // has been read and is available at req.rawBody; this will likely differ\n    // depending on which body parser is used.\n    await shopify.webhooks.process({\n      rawBody: (req as any).rawBody, // as a string\n      rawRequest: req,\n      rawResponse: res,\n    });\n  } catch (error) {\n    console.log(error.message);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Cloudflare Workers Webhook Processing\nDESCRIPTION: Example of processing webhooks in a Cloudflare Workers environment, showing how to handle webhook requests in a serverless context.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/guides/webhooks.md#2025-04-11_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nasync function handleFetch(\n  request: Request,\n  env: unknown,\n  context: any,\n): Promise<Response> {\n  try {\n    await shopify.webhooks.process({\n      context: {env, ...context}, // is object or undefined\n      rawBody: await request.text(), // is a string\n      rawRequest: request,\n    });\n  } catch (error) {\n    console.log(error.message);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Unauthenticated Storefront GraphQL Client\nDESCRIPTION: Shows how to access the storefront GraphQL API without standard Shopify authentication. This requires custom authentication and specifying the shop domain explicitly.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-app-remix/CHANGELOG.md#2025-04-11_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport {json} from '@remix-run/node';\nimport {unauthenticated} from '~/shopify.server';\nimport {customAuthenticateRequest} from '~/helpers';\n\nexport async function loader({request}) {\n  await customAuthenticateRequest(request);\n\n  const {storefront} = await unauthenticated.storefront(\n    'my-shop.myshopify.com',\n  );\n  const response = await storefront.graphql('{blogs(first: 10) {nodes{id}}}');\n\n  return json(await response.json());\n}\n```\n\n----------------------------------------\n\nTITLE: Using sanitizeHost Method in TypeScript\nDESCRIPTION: Example of how to use the sanitizeHost utility method to validate a host query parameter from a request. This method verifies that the host parameter is properly formatted and returns either the sanitized host or null if invalid.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/reference/utils/sanitizeHost.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst host = shopify.utils.sanitizeHost(req.query.host, true);\n```\n\n----------------------------------------\n\nTITLE: Session Storage Implementation\nDESCRIPTION: Shows how to use the new toObject method to store Session objects in application storage.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/migrating-to-v6.md#2025-04-11_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst callbackResponse = shopify.auth.callback({\n  rawRequest: req,\n  rawResponse: res,\n});\n\n// app stores Session in its own storage mechanism\nawait addSessionToStorage(callbackResponse.session.toObject());\n```\n\n----------------------------------------\n\nTITLE: App Subscription Interface Definition in TypeScript\nDESCRIPTION: Interface definition for AppSubscription object that standardizes the return data from all billing operations. It includes properties like id, name, test status, trial days, dates, and subscription status.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/CHANGELOG.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface AppSubscription {\n  /**\n   * The ID of the app subscription.\n   */\n  id: string;\n  /**\n   * The name of the purchased plan.\n   */\n  name: string;\n  /**\n   * Whether this is a test subscription.\n   */\n  test: boolean;\n  /**\n   * The number of trial days for this subscription.\n   */\n  trialDays: number;\n  /**\n   * The date and time when the subscription was created.\n   */\n  createdAt: string;\n  /**\n   * The date and time when the current period ends.\n   */\n  currentPeriodEnd: string;\n  /**\n   * The return URL for this subscription.\n   */\n  returnUrl: string;\n\n  /*\n   * The line items for this plan. This will become mandatory in v10.\n   */\n  lineItems?: ActiveSubscriptionLineItem[];\n\n  /*\n   * The status of the subscription. [ACTIVE, CANCELLED, PENDING, DECLINED, EXPIRED, FROZEN, ACCEPTED]\n   */\n  status: \"ACTIVE\" | \"CANCELLED\" | \"PENDING\" | \"DECLINED\" | \"EXPIRED\" | \"FROZEN\" | \"ACCEPTED\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using shopify.session.getOfflineId for webhook handling in TypeScript\nDESCRIPTION: This code demonstrates how to use shopify.session.getOfflineId to retrieve an offline session ID for a shop in a webhook handler. The session ID can then be used to load the session from storage to perform webhook actions.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/reference/session/getOfflineId.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nasync function myWebhookHandler(topic, shop) {\n  const offlineSessionId = await shopify.session.getOfflineId(shop);\n\n  // use sessionId to retrieve session from app's session storage\n  // getSessionFromStorage() must be provided by application\n  const session = await getSessionFromStorage(offlineSessionId);\n\n  // Perform webhook actions\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Usage Record for the Currently Active Billing Plan in TypeScript\nDESCRIPTION: Creates a usage record for the currently active usage plan without specifying a subscription line item ID. Returns a UsageRecord object with details of the created record or throws a BillingError on failure.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/reference/billing/create-usage-record.md#2025-04-11_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst chargeBilling = await billing.createUsageRecord({\n  description: \"Usage record for product creation\",\n  price: {\n    amount: 1,\n    currencyCode: \"USD\",\n  },\n  isTest: true,\n});\nconsole.log(chargeBilling);\n```\n\n----------------------------------------\n\nTITLE: Framework Request/Response Handling\nDESCRIPTION: Shows the changes in handling framework requests and responses between v5 and v6.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/migrating-to-v6.md#2025-04-11_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\napp.get(\n  '/path',\n  async (req: http.IncomingMessage, res: http.ServerResponse) => {\n    const redirectUri = await Shopify.Auth.beginAuth(req, res);\n    res.redirect(redirectUri);\n  },\n);\n```\n\nLANGUAGE: typescript\nCODE:\n```\napp.get(\n  '/path',\n  async (req: http.IncomingMessage, res: http.ServerResponse) => {\n    // Library will automatically trigger the redirect in res\n    await shopify.auth.begin({rawRequest: req, rawResponse: res});\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Usage Records for Billing in TypeScript\nDESCRIPTION: Code example showing how to create usage records for a usage billing plan using the billing API helper function. Returns charge billing details and supports test mode.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-app-remix/CHANGELOG.md#2025-04-11_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst chargeBilling = await billing.createUsageRecord({\n  description: 'Usage record for product creation',\n  price: {\n    amount: 1,\n    currencyCode: 'USD',\n  },\n  isTest: true,\n});\nconsole.log(chargeBilling);\n```\n\n----------------------------------------\n\nTITLE: Validating Shopify OAuth Request HMAC in TypeScript\nDESCRIPTION: This snippet demonstrates how to validate the HMAC signature in a Shopify OAuth request. It passes the request query parameters to the validateHmac utility to verify the request's authenticity.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/reference/utils/validateHmac.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst isValid = await shopify.utils.validateHmac(req.query);\n```\n\n----------------------------------------\n\nTITLE: Using redirectToShopifyOrAppRoot Middleware with Express and Shopify OAuth in TypeScript\nDESCRIPTION: This example demonstrates how to use the redirectToShopifyOrAppRoot middleware in an Express application after OAuth callback completion. The middleware ensures the app loads in the appropriate location based on whether it's embedded or not. It requires a session to be available in res.locals.shopify.session.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-app-express/docs/reference/redirectToShopifyOrAppRoot.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst app = express();\n\n// Once OAuth completes, return to the app root in the appropriate location.\napp.get(\n  '/auth/callback',\n  shopify.auth.callback(),\n  shopify.redirectToShopifyOrAppRoot(),\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring GraphQL Types for UI Extensions\nDESCRIPTION: Example configuration for generating GraphQL types for both Admin and Storefront APIs in a Shopify app with UI extensions.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/api-clients/api-codegen-preset/README.md#2025-04-11_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { LATEST_API_VERSION } from \"@shopify/shopify-api\";\nimport { shopifyApiProject, ApiType } from \"@shopify/api-codegen-preset\";\nimport type { IGraphQLConfig } from \"graphql-config\";\n\nfunction getConfig() {\n  const config: IGraphQLConfig = {\n    projects: {\n      default: shopifyApiProject({\n        apiType: ApiType.Admin,\n        apiVersion: LATEST_API_VERSION,\n        documents: [\"./app/**/*.{js,ts,jsx,tsx}\", \"./app/.server/**/*.{js,ts,jsx,tsx}\" ],\n        outputDir: \"./app/types\",\n      }),\n      UIExtensions: shopifyApiProject({\n        apiType: ApiType.Storefront,\n        apiVersion: LATEST_API_VERSION,\n        documents: [\"./extensions/**/*.{js,ts,jsx,tsx}\", \"./extensions/.server/**/*.{js,ts,jsx,tsx}\"],\n        outputDir: \"./extensions/types\",\n      }),\n    },\n  };\n\nconst config = getConfig();\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Using versionPriorTo Utility in Shopify API to Compare API Versions in TypeScript\nDESCRIPTION: This example demonstrates how to use the shopify.utils.versionPriorTo method to compare API versions. It initializes the Shopify API with July23 version and shows how to check if the configured version is older than other versions.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/reference/utils/versionPriorTo.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst shopify = shopifyApi({\n  apiVersion: ApiVersion.July23,\n});\n\nif (shopify.utils.versionPriorTo(ApiVersion.July23)) {\n  // false in this example, as both versions are July23\n}\nif (shopify.utils.versionPriorTo(ApiVersion.October23)) {\n  // true in this example, as ApiVersion.October23 is newer than ApiVersion.July23, i.e. the configured version is older\n  // than the reference one\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Request with Abort Signal and Retries\nDESCRIPTION: Example showing how to combine an abort signal with retry functionality when making GraphQL requests to the Shopify API.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/CHANGELOG.md#2025-04-11_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Abort the request after 3 seconds, and retry the request up to 2 times\nawait admin.graphql('{ shop { name } }', {\n  signal: AbortSignal.timeout(3000),\n  tries: 2,\n});\n```\n\n----------------------------------------\n\nTITLE: Creating API Clients with Session in Shopify App JS\nDESCRIPTION: Shows how to create GraphQL, REST, and Storefront API clients using a session in the updated Shopify App JS library.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/migrating-to-v6.md#2025-04-11_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nconst sessionId = await shopify.session.getCurrentId({\n  isOnline: true,\n  rawRequest: req,\n  rawResponse: res,\n});\n\n// use sessionId to retrieve session from app's session storage\n// getSessionFromStorage() must be provided by application\nconst session = await getSessionFromStorage(sessionId);\n\nconst gqlClient = await shopify.clients.Graphql({session});\n// or\nconst restClient = await shopify.clients.Rest({session});\n// or\nconst storefrontClient = await shopify.clients.Storefront({\n  session,\n  storefrontAccessToken,\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Logger in Shopify API (TypeScript)\nDESCRIPTION: Example of how to configure the logger when initializing the Shopify API. It demonstrates setting log severity, enabling timestamps, and HTTP request logging.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/guides/logger.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {shopifyApi, LogSeverity} from '@shopify/shopify-api';\n\nconst shopify = shopifyApi({\n  // other configuration settings\n  logger: {\n    level: LogSeverity.Debug,\n    timestamps: true,\n    httpRequests: true,\n    log: async (severity, message) => {},\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Authenticating Fulfillment Service Notifications in JSX\nDESCRIPTION: Example of how to authenticate fulfillment service notifications in a Remix route. This code snippet demonstrates how to use the authenticate.fulfillmentService method to validate and process fulfillment requests.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-app-remix/CHANGELOG.md#2025-04-11_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n//app/routes/fulfillment_order_notification.jsx\n\nimport { authenticate } from \"../shopify.server\";\n\nexport const action = async ({ request }) => {\n    const { admin, payload } = await authenticate.fulfillmentService(request);\n\n    if (!admin) {\n      throw new Response();\n    }\n    console.log(payload.kind, 'kind'); //FULFILLMENT_REQUEST\n    throw new Response();\n  };\n```\n\n----------------------------------------\n\nTITLE: Implementing Redirection in Shopify App using TypeScript\nDESCRIPTION: This code snippet demonstrates how to use the shopify.redirectOutOfApp() function in a Shopify app. It includes a middleware function for handling redirects and shows implementation for both API and HTML endpoints.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-app-express/docs/reference/redirectOutOfApp.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst shopify = shopifyApp({});\n\nconst redirectMiddleware = (req, res, next) => {\n  if (redirectRequired) {\n    shopify.redirectOutOfApp({\n      req,\n      res,\n      redirectUri: '/my-non-embedded-endpoint',\n      shop: shopify.api.utils.sanitizeShop(req.query.shop),\n    });\n  } else {\n    next();\n  }\n};\n\napp.get(\n  '/api/endpoint-that-redirects',\n  shopify.validateAuthenticatedSession(),\n  // redirectOutOfApp will cause App Bridge to trigger the redirect\n  redirectMiddleware,\n  (req, res) => {\n    // Handle request as usual\n  },\n);\n\napp.get(\n  '/html-endpoint',\n  shopify.ensureInstalledOnShop(),\n  // redirectOutOfApp will cause the app to break out of the iframe\n  redirectMiddleware,\n  (req, res) => {\n    // Handle request as usual\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Setting Debug Log Level in Shopify API (TypeScript)\nDESCRIPTION: Example of how to set the log level to Debug when initializing the Shopify API for more verbose logging.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/guides/logger.md#2025-04-11_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst shopify = shopifyApi({\n  // other config values\n  logger: {\n    level: LogSeverity.Debug,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using GraphQL Type Definitions with Storefront API Client in TypeScript\nDESCRIPTION: Example of using GraphQL operation types with client.request and client.requestStream methods. It demonstrates integration with auto-generated types for better type safety.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/api-clients/storefront-api-client/README.md#2025-04-11_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport {print} from 'graphql/language';\n\n// GQL operation types are usually auto generated during the application build\nimport {CollectionQuery, CollectionDeferredQuery} from 'types/appTypes';\nimport collectionQuery from './collectionQuery.graphql';\nimport collectionDeferredQuery from './collectionDeferredQuery.graphql';\n\nconst {data, errors, extensions} = await client.request<CollectionQuery>(\n  print(collectionQuery),\n  {\n    variables: {\n      handle: 'sample-collection',\n    },\n  },\n);\n\nconst responseStream = await client.requestStream<CollectionDeferredQuery>(\n  print(collectionDeferredQuery),\n  {\n    variables: {handle: 'sample-collection'},\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Returning Liquid Response from App Proxy\nDESCRIPTION: Demonstrates handling an app proxy request and returning a Liquid template response. This allows apps to render dynamic content in the Shopify storefront using Liquid templates.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-app-remix/CHANGELOG.md#2025-04-11_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n// app/routes/**\\/.ts\nimport {authenticate} from '~/shopify.server';\n\nexport async function loader({request}) {\n  const {liquid, admin} = authenticate.public.appProxy(request);\n\n  return liquid('Hello {{shop.name}}');\n}\n```\n\n----------------------------------------\n\nTITLE: Webhook Processing with Callback Handler\nDESCRIPTION: Implementation of webhook processing using a callback handler function. Shows how to configure handlers with callbacks and process incoming webhooks.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/guides/webhooks.md#2025-04-11_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst handleWebhookRequest = async (\n  topic: string,\n  shop: string,\n  webhookRequestBody: string,\n  webhookId: string,\n  apiVersion: string,\n  context?: any,\n) => {\n  const sessionId = shopify.session.getOfflineId(shop);\n\n  // Run your webhook-processing code here!\n};\n\n// Add handlers for the events you want to subscribe to. You **MUST** set a callback function when calling `process`\nshopify.webhooks.addHandlers({\n  PRODUCTS_CREATE: [\n    {\n      deliveryMethod: DeliveryMethod.Http,\n      callbackUrl: '/webhooks',\n      callback: handleWebhookRequest,\n    },\n  ],\n});\n\n// Process webhooks\napp.post('/webhooks', express.text({type: '*/*'}), async (req, res) => {\n  try {\n    // Note: the express.text() given above is an Express middleware that will read\n    // in the body as a string, and make it available at req.body, for this path only.\n    await shopify.webhooks.process({\n      rawBody: req.body, // is a string\n      rawRequest: req,\n      rawResponse: res,\n    });\n  } catch (error) {\n    console.log(error.message);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Making Keepalive GraphQL Request in TypeScript\nDESCRIPTION: Illustrates how to make a GraphQL request that should run even if the page is unloaded, using the keepalive option with the client.request method.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/api-clients/graphql-client/README.md#2025-04-11_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst shopQuery = `\n  query ShopQuery {\n    shop {\n      name\n      id\n    }\n  }\n`;\n\nconst {data, errors, extensions} = await client.request(shopQuery, {\n  keepalive: true,\n});\n```\n\n----------------------------------------\n\nTITLE: GraphQL Request with Abort Signal and Timeout\nDESCRIPTION: Examples of making GraphQL requests with abort signal to set custom timeouts and abort requests. The first example shows a basic timeout implementation, while the second adds retry functionality.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/CHANGELOG.md#2025-04-11_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Abort the request after 3 seconds\nawait admin.graphql('{ shop { name } }', {\n  signal: AbortSignal.timeout(3000),\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling HTTP Request Debugging in Shopify API (TypeScript)\nDESCRIPTION: Configuration example to enable logging of HTTP requests and responses in the Shopify API, which requires setting the log level to Debug.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/guides/logger.md#2025-04-11_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst shopify = shopifyApi({\n  // other config values\n  logger: {\n    level: LogSeverity.Debug,\n    httpRequests: true,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Import Paths for ESM/CJS Dual Support\nDESCRIPTION: Shows how to update direct imports from the package to work with the new dual ESM/CJS export structure, while noting that regular package imports remain unchanged.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/migrating-to-v10.md#2025-04-11_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Before\nimport 'node_modules/@shopify/shopify-api/lib/clients/admin/graphql/client';\nimport '@shopify/shopify-api/adapters/node';\n\n// After\n// Add `dist/esm|cjs/` before the file\nimport 'node_modules/@shopify/shopify-api/dist/esm/lib/clients/admin/graphql/client';\n// Unchanged\nimport '@shopify/shopify-api/adapters/node';\n```\n\n----------------------------------------\n\nTITLE: Configuring Shopify App for Testing in TypeScript\nDESCRIPTION: This snippet shows how to use the testConfig() helper method to replace the default configuration with test configuration when the SHOPIFY_TESTING environment variable is set.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-app-remix/README.md#2025-04-11_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// my-app/app/shopify.server.ts\nimport { testConfig } from \"@shopify/shopify-app-remix/test-helpers\";\n...\nconst config = {\n  ...\n};\n\nif (process.env.SHOPIFY_TESTING) {\n  Object.assign(config, testConfig());\n}\n\nconst shopify = shopifyApp(config);\n...\n```\n\n----------------------------------------\n\nTITLE: Updating a Product using Shopify Admin API Client in TypeScript\nDESCRIPTION: This example shows how to update a product's handle using the Shopify Admin API client. It sends a PUT request with the new data and checks for a successful response before parsing the JSON body.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/api-clients/admin-api-client/README.md#2025-04-11_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst response = await client.put('products/1234567890', {\n  data: {\n    product: {\n      handle: 'my-new-handle',\n    },\n  },\n});\n\nif (response.ok) {\n  const body = await response.json();\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Session to Property Array without User Data in TypeScript\nDESCRIPTION: This snippet demonstrates using the toPropertyArray() method with the returnUserData parameter set to false to convert a Session instance into an array of key-value pairs without including detailed user data.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/guides/session-storage.md#2025-04-11_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst {session, headers} = shopify.auth.callback({\n  rawRequest: req,\n  rawResponse: res,\n});\n/*\n   If session has the following data content...\n  {\n    id: 'online_session_id',\n    shop: 'online-session-shop',\n    state: 'online-session-state',\n    isOnline: true,\n    scope: 'online-session-scope',\n    accessToken: 'online-session-token',\n    expires: 2022-01-01T05:00:00.000Z,  // Date object\n    onlineAccessInfo: {\n      expires_in: 1,\n      associated_user_scope: 'online-session-user-scope',\n      associated_user: {\n        id: 1,\n        first_name: 'online-session-first-name',\n        last_name: 'online-session-last-name',\n        email: 'online-session-email',\n        locale: 'online-session-locale',\n        email_verified: true,\n        account_owner: true,\n        collaborator: false,\n      },\n    }\n  }\n */\n\nconst sessionProperties = session.toPropertyArray(false);\n/*\n  ... then sessionProperties will have the following data...\n   [\n    ['id', 'online_session_id'],\n    ['shop', 'online-session-shop'],\n    ['state', 'online-session-state'],\n    ['isOnline', true],\n    ['scope', 'online-session-scope'],\n    ['accessToken', 'online-session-token'],\n    ['expires', 1641013200000],  // example = January 1, 2022, as number of milliseconds since Jan 1, 1970\n    ['onlineAccessInfo', 1], // The userID is returned under onlineAccessInfo\n    ],\n */\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query with Variables\nDESCRIPTION: Shows how to execute a GraphQL query with variables for dynamic data fetching.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/reference/clients/Graphql.md#2025-04-11_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst response = await client.request(\n  `query GetProducts($first: Int!) {\n    products (first: $first) {\n      edges {\n        node {\n          id\n          title\n          descriptionHtml\n        }\n      }\n    }\n  }`,\n  {\n    variables: {\n      first: 10,\n    },\n  },\n);\nconsole.log(response.data, response.extensions, response.headers);\n```\n\n----------------------------------------\n\nTITLE: Setting Up Test Helpers for Shopify App Testing\nDESCRIPTION: Example of using test helper methods to set up valid sessions and requests for unit and end-to-end testing of Shopify apps, including session storage and request modification.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/CHANGELOG.md#2025-04-11_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport prisma from '~/db.server';\nimport { PrismaSessionStorage } from '@shopify/shopify-app-session-storage-prisma';\nimport {\n  RequestType,\n  setUpValidRequest,\n  setUpValidSession,\n} from '@shopify/shopify-api/test-helpers';\n\n// set up test Session\nconst sessionStorage = new PrismaSessionStorage(prisma);\nconst session = await setUpValidSession({\n  shop: getShopValue('test-shop');\n});\nawait sessionStorage.storeSession(session);\n\nlet request: Request = ... // the request intercepted by end-to-end testing framework\n\nconst authorizedRequest = setUpValidRequest(\n  {\n    type: RequestType.Extension,\n    store: `test-shop-${process.env.TEST_PARALLEL_INDEX}`,\n    apiKey: ..., // the same value as `apiKey` passed to shopifyApi()\n    apiSecretKey: ..., // the same value as `apiSecretKey` passed to shopifyApi()\n  },\n  request\n);\n\n// use authorizedRequest to complete the request, or use the url or headers of authorizedRequest to modify the original request.\n\n... // complete testing here\n\n// tear down test Session\nawait sessionStorage.deleteSession(session.id);\n```\n\n----------------------------------------\n\nTITLE: Using @defer Directive with Storefront API Client in TypeScript\nDESCRIPTION: Example of using the @defer directive with requestStream method to handle deferred fields in a GraphQL query. It shows how to process an async iterator for streamed responses.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/api-clients/storefront-api-client/README.md#2025-04-11_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst productQuery = `\n  query ProductQuery($handle: String) {\n    product(handle: $handle) {\n      id\n      handle\n      ... @defer(label: \"deferredFields\") {\n        title\n        description\n      }\n    }\n  }\n`;\n\nconst responseStream = await client.requestStream(productQuery, {\n  variables: {handle: 'sample-product'},\n});\n\n// await available data from the async iterator\nfor await (const response of responseStream) {\n  const {data, errors, extensions, hasNext} = response;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating imports and initializing Shopify app in Express server (JavaScript)\nDESCRIPTION: This snippet shows changes to import statements and removal of the Shopify context initialization. It introduces new imports and removes unused variables and configurations.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/example-migration-v5-node-template-to-v6.md#2025-04-11_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nimport { join } from \"path\";\nimport { readFileSync } from \"fs\";\nimport express from \"express\";\nimport cookieParser from \"cookie-parser\";\n-import { Shopify, LATEST_API_VERSION } from \"@shopify/shopify-api\";\n+import { DeliveryMethod } from \"@shopify/shopify-api\";\n\n+import shopify from \"./shopify.js\";\nimport applyAuthMiddleware from \"./middleware/auth.js\";\nimport verifyRequest from \"./middleware/verify-request.js\";\nimport { setupGDPRWebHooks } from \"./gdpr.js\";\nimport productCreator from \"./helpers/product-creator.js\";\nimport redirectToAuth from \"./helpers/redirect-to-auth.js\";\n-import { BillingInterval } from \"./helpers/ensure-billing.js\";\nimport { AppInstallations } from \"./app_installations.js\";\n+import { sqliteSessionStorage } from \"./sqlite-session-storage.js\";\n\nconst USE_ONLINE_TOKENS = false;\n\nconst PORT = parseInt(process.env.BACKEND_PORT || process.env.PORT, 10);\n\n// TODO: There should be provided by env vars\nconst DEV_INDEX_PATH = `${process.cwd()}/frontend/`;\nconst PROD_INDEX_PATH = `${process.cwd()}/frontend/dist/`;\n\n-const DB_PATH = `${process.cwd()}/database.sqlite`;\n-\n-Shopify.Context.initialize({\n-  API_KEY: process.env.SHOPIFY_API_KEY,\n-  API_SECRET_KEY: process.env.SHOPIFY_API_SECRET,\n-  SCOPES: process.env.SCOPES.split(\",\"),\n-  HOST_NAME: process.env.HOST.replace(/https?:\\/\\//, \"\"),\n-  HOST_SCHEME: process.env.HOST.split(\"://\")[0],\n-  API_VERSION: LATEST_API_VERSION,\n-  IS_EMBEDDED_APP: true,\n-  // This should be replaced with your preferred storage strategy\n-  // See note below regarding using CustomSessionStorage with this template.\n-  SESSION_STORAGE: new Shopify.Session.SQLiteSessionStorage(DB_PATH),\n-  ...(process.env.SHOP_CUSTOM_DOMAIN && {CUSTOM_SHOP_DOMAINS: [process.env.SHOP_CUSTOM_DOMAIN]}),\n-});\n-\n-// NOTE: If you choose to implement your own storage strategy using\n-// Shopify.Session.CustomSessionStorage, you MUST implement the optional\n-// findSessionsByShopCallback and deleteSessionsCallback methods.  These are\n-// required for the app_installations.js component in this template to\n-// work properly.\n```\n\n----------------------------------------\n\nTITLE: TypeScript Response Type Definition\nDESCRIPTION: Example of using TypeScript interfaces to type the GraphQL response data.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/reference/clients/Graphql.md#2025-04-11_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ninterface MyResponseBodyType {\n  data: {\n    //...\n  };\n}\n\nconst response = await client.request<MyResponseBodyType>(/* ... */);\n\n// response.body will be of type MyResponseBodyType\nconsole.log(response.body.data);\n```\n\n----------------------------------------\n\nTITLE: Querying Product with Shopify Admin REST API\nDESCRIPTION: Demonstrates how to make a GET request to fetch a product by ID using the initialized client and handle the response.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/api-clients/admin-api-client/README.md#2025-04-11_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst response = await client.get('products/1234567890');\n\nif (response.ok) {\n  const body = await response.json();\n}\n```\n\n----------------------------------------\n\nTITLE: Error Handling Updates\nDESCRIPTION: Demonstrates the updated error handling with enhanced error information in response objects.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/migrating-to-v6.md#2025-04-11_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ncatch (err) {\n  if (err instanceof HttpResponseError) {\n    console.log(err.response.code, err.response.statusText, err.response);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Admin GraphQL API with App Proxy\nDESCRIPTION: Shows how to access the Admin GraphQL API from an app proxy request handler. This allows making authenticated admin API calls when handling app proxy requests.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-app-remix/CHANGELOG.md#2025-04-11_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n// app/routes/**\\/.ts\nimport {authenticate} from '~/shopify.server';\n\nexport async function loader({request}) {\n  const {liquid, admin} = authenticate.public.appProxy(request);\n\n  const response = await admin.graphql('QUERY');\n  const json = await response.json();\n\n  return json(json);\n}\n```\n\n----------------------------------------\n\nTITLE: Updating embedded app functionality in Express server (JavaScript)\nDESCRIPTION: This snippet shows changes to the embedded app URL generation and routing logic, including the use of await for getting the embedded app URL.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/example-migration-v5-node-template-to-v6.md#2025-04-11_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\napp.use(\"/*\", async (req, res, next) => {\n     if (typeof req.query.shop !== \"string\") {\n       res.status(500);\n       return res.send(\"No shop provided\");\n     }\n\n-    const shop = Shopify.Utils.sanitizeShop(req.query.shop);\n+    const shop = shopify.utils.sanitizeShop(req.query.shop);\n     const appInstalled = await AppInstallations.includes(shop);\n\n     if (!appInstalled && !req.originalUrl.match(/^\\/exitiframe/i)) {\n       return redirectToAuth(req, res, app);\n     }\n\n-    if (Shopify.Context.IS_EMBEDDED_APP && req.query.embedded !== \"1\") {\n-      const embeddedUrl = Shopify.Utils.getEmbeddedAppUrl(req);\n+    if (shopify.config.isEmbeddedApp && req.query.embedded !== \"1\") {\n+      const embeddedUrl = await shopify.auth.getEmbeddedAppUrl({\n+        rawRequest: req,\n+        rawResponse: res,\n+      });\n\n       return res.redirect(embeddedUrl + req.path);\n     }\n\n     const htmlFile = join(\n       isProd ? PROD_INDEX_PATH : DEV_INDEX_PATH,\n       \"index.html\"\n     );\n\n     return res\n       .status(200)\n       .set(\"Content-Type\", \"text/html\")\n       .send(readFileSync(htmlFile));\n   });\n\n   return { app };\n }\n\n createServer().then(({ app }) => app.listen(PORT));\n```\n\n----------------------------------------\n\nTITLE: Registering Webhooks in Shopify App JS v6\nDESCRIPTION: This snippet shows how to register webhooks using the new `register` method in v6. It now only requires the session object and registers all added handlers.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/migrating-to-v6.md#2025-04-11_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nconst response = await shopify.webhooks.register({session: session});\n\n// Response will be a list indexed by topic:\nconsole.log(response[topic][0].success, response[topic][0].result);\n```\n\n----------------------------------------\n\nTITLE: Updating Product Creator for Shopify API v6\nDESCRIPTION: This snippet updates the product-creater.js file to use the new shopify instance and handle GraphqlQueryError.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/example-migration-v5-node-template-to-v6.md#2025-04-11_snippet_12\n\nLANGUAGE: diff\nCODE:\n```\n-import { Shopify } from \"@shopify/shopify-api\";\n+import { GraphqlQueryError } from \"@shopify/shopify-api\";\n+import shopify from \"../shopify.js\";\n\n const ADJECTIVES = [ ...\n ];\n\n const NOUNS = [ ...\n ];\n\n export const DEFAULT_PRODUCTS_COUNT = 5;\n const CREATE_PRODUCTS_MUTATION = `\n   mutation populateProduct($input: ProductInput!) {\n     productCreate(input: $input) {\n       product {\n         id\n       }\n     }\n   }\n `;\n\n export default async function productCreator(session, count = DEFAULT_PRODUCTS_COUNT) {\n-  const client = new Shopify.Clients.Graphql(session.shop, session.accessToken);\n+  const client = new shopify.clients.Graphql({ session });\n\n   try {\n     for (let i = 0; i < count; i++) {\n       await client.query({\n         data: {\n           query: CREATE_PRODUCTS_MUTATION,\n           variables: {\n             input: {\n               title: `${randomTitle()}`,\n               variants: [{ price: randomPrice() }],\n             },\n           },\n         },\n       });\n     }\n   } catch (error) {\n-    if (error instanceof Shopify.Errors.GraphqlQueryError) {\n+    if (error instanceof GraphqlQueryError) {\n       throw new Error(`${error.message}\\n${JSON.stringify(error.response, null, 2)}`);\n     } else {\n       throw error;\n     }\n   }\n }\n\n function randomTitle() {\n   const adjective = ADJECTIVES[Math.floor(Math.random() * ADJECTIVES.length)];\n   const noun = NOUNS[Math.floor(Math.random() * NOUNS.length)];\n   return `${adjective} ${noun}`;\n }\n\n function randomPrice() {\n   return Math.round((Math.random() * 10 + Number.EPSILON) * 100) / 100;\n }\n```\n\n----------------------------------------\n\nTITLE: Setting Up Valid Test Request in Shopify App\nDESCRIPTION: Demonstrates how to create an authorized test request using setUpValidRequest(). Shows how to set up extension-type authorization with proper API keys and store values.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/guides/test-helpers.md#2025-04-11_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  RequestType,\n  setUpValidRequest,\n} from '@shopify/shopify-api/test-helpers';\n\nlet request: Request = ... // the request intercepted by end-to-end testing framework\n\nconst authorizedRequest = setUpValidRequest(\n  {\n    type: RequestType.Extension,\n    store: `test-shop-${process.env.TEST_PARALLEL_INDEX}`,\n    apiKey: ..., // the same value as `apiKey` passed to shopifyApi()\n    apiSecretKey: ..., // the same value as `apiSecretKey` passed to shopifyApi()\n  },\n  request\n);\n\n// now use authorizedRequest to complete the request, or use the url or headers of authorizedRequest to modify the original request.\n```\n\n----------------------------------------\n\nTITLE: Initializing Shopify Admin REST API Client\nDESCRIPTION: Shows how to initialize the Shopify Admin REST API client with required parameters including store domain, API version, and access token.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/api-clients/admin-api-client/README.md#2025-04-11_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport {createAdminRestApiClient} from '@shopify/admin-api-client';\n\nconst client = createAdminRestApiClient({\n  storeDomain: 'your-shop-name.myshopify.com',\n  apiVersion: '2023-04',\n  accessToken: 'your-admin-api-access-token',\n});\n```\n\n----------------------------------------\n\nTITLE: Checking granted scopes in Remix loader\nDESCRIPTION: Shows how to use the Remix Scopes API to check for a granted scope on a shop in a loader function.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-app-remix/CHANGELOG.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport const loader = async ({ request }: LoaderFunctionArgs) => {\n  const { scopes } = await authenticate.admin(request);\n\n  const scopesDetail =  await scopes.query();\n\n  return json({\n    hasWriteProducts: scopesDetail.granted.includes('write_products'),\n  });\n};\n\nexport default function Index() {\n  const {hasWriteProducts} = useLoaderData<typeof loader>();\n\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Drizzle Database Connection with LibSQL\nDESCRIPTION: Example showing how to set up a Drizzle database connection with LibSQL client. This code creates a database client and initializes Drizzle with the schema for use with the session storage adapters.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/session-storage/shopify-app-session-storage-drizzle/README.md#2025-04-11_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport {drizzle} from 'drizzle-orm/libsql';\nimport {createClient} from '@libsql/client';\n\nimport * as schema from './schema';\n\nexport const client = createClient({\n  url: 'file:./dev.db',\n});\n\nexport const db = drizzle(client, {schema});\n```\n\n----------------------------------------\n\nTITLE: Loading Online Session with Storage Adapter in TypeScript\nDESCRIPTION: Shows how to use the session ID to load a session from a storage adapter using Prisma. This example demonstrates the practical application of the session ID in retrieving the full session object.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/reference/session/getJwtSessionId.md#2025-04-11_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction getOnlineSession(request: Request) {\n  const sessionStorage = new PrismaSessionStorage(prisma)\n  const sessionId = getOnlineSessionId(request)\n  const session = await sessionStorage.loadSession(sessionId);\n\n  return session\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Web API Adapter for Shopify API\nDESCRIPTION: Imports the Web API adapter for generic runtimes that implement the Web API standard, setting up the Shopify API library with the appropriate defaults.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/README.md#2025-04-11_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport '@shopify/shopify-api/adapters/web-api';\n```\n\n----------------------------------------\n\nTITLE: Updating Middleware for Shopify API v6\nDESCRIPTION: This snippet shows the changes required in the verify-request.js middleware file to use the new shopify instance and sqliteSessionStorage. It updates session handling, billing checks, and error handling.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/example-migration-v5-node-template-to-v6.md#2025-04-11_snippet_10\n\nLANGUAGE: diff\nCODE:\n```\n-import { Shopify } from \"@shopify/shopify-api\";\n-import ensureBilling, {\n-  ShopifyBillingError,\n-} from \"../helpers/ensure-billing.js\";\n+import { BillingError, HttpResponseError } from \"@shopify/shopify-api\";\n+import shopify from \"../shopify.js\";\n+import { sqliteSessionStorage } from \"../sqlite-session-storage.js\";\n+import ensureBilling from \"../helpers/ensure-billing.js\";\n import redirectToAuth from \"../helpers/redirect-to-auth.js\";\n\n import returnTopLevelRedirection from \"../helpers/return-top-level-redirection.js\";\n\n const TEST_GRAPHQL_QUERY = `\n {\n   shop {\n     name\n   }\n }`;\n\n-export default function verifyRequest(\n-  app,\n-  { billing = { required: false } } = { billing: { required: false } }\n-) {\n+export default function verifyRequest(app) {\n   return async (req, res, next) => {\n-    const session = await Shopify.Utils.loadCurrentSession(\n-      req,\n-      res,\n-      app.get(\"use-online-tokens\")\n-    );\n+    const sessionId = await shopify.session.getCurrentId({\n+      rawRequest: req,\n+      rawResponse: res,\n+      isOnline: app.get(\"use-online-tokens\"),\n+    });\n+\n+    const session = await sqliteSessionStorage.loadSession(sessionId);\n+\n-    let shop = Shopify.Utils.sanitizeShop(req.query.shop);\n+    let shop = shopify.utils.sanitizeShop(req.query.shop);\n     if (session && shop && session.shop !== shop) {\n       // The current request is for a different shop. Redirect gracefully.\n       return redirectToAuth(req, res, app);\n     }\n\n-    if (session?.isActive()) {\n+    if (session && session.isActive(shopify.config.scopes)) {\n       try {\n-        if (billing.required) {\n-          // The request to check billing status serves to validate that the access token is still valid.\n-          const [hasPayment, confirmationUrl] = await ensureBilling(\n-            session,\n-            billing\n-          );\n+        // The request to check billing status serves to validate that the access token is still valid.\n+        const [hasPayment, confirmationUrl] = await ensureBilling(session);\n\n-          if (!hasPayment) {\n-            returnTopLevelRedirection(req, res, confirmationUrl);\n-            return;\n-          }\n+        if (!hasPayment) {\n+          returnTopLevelRedirection(req, res, confirmationUrl);\n+          return;\n         } else {\n           // Make a request to ensure the access token is still valid. Otherwise, re-authenticate the user.\n-          const client = new Shopify.Clients.Graphql(\n-            session.shop,\n-            session.accessToken\n-          );\n+          const client = new shopify.clients.Graphql({ session });\n           await client.query({ data: TEST_GRAPHQL_QUERY });\n         }\n         return next();\n       } catch (e) {\n-        if (\n-          e instanceof Shopify.Errors.HttpResponseError &&\n-          e.response.code === 401\n-        ) {\n+        if (e instanceof HttpResponseError && e.response.code === 401) {\n           // Re-authenticate if we get a 401 response\n-        } else if (e instanceof ShopifyBillingError) {\n+        } else if (e instanceof BillingError) {\n           console.error(e.message, e.errorData[0]);\n           res.status(500).end();\n           return;\n         } else {\n           throw e;\n         }\n       }\n     }\n\n     const bearerPresent = req.headers.authorization?.match(/Bearer (.*)/);\n     if (bearerPresent) {\n       if (!shop) {\n         if (session) {\n           shop = session.shop;\n-        } else if (Shopify.Context.IS_EMBEDDED_APP) {\n+        } else if (shopify.config.isEmbeddedApp) {\n           if (bearerPresent) {\n-            const payload = Shopify.Utils.decodeSessionToken(bearerPresent[1]);\n+            const payload = await shopify.session.decodeSessionToken(bearerPresent[1]);\n             shop = payload.dest.replace(\"https://\", \"\");\n           }\n         }\n       }\n     }\n\n     returnTopLevelRedirection(\n       req,\n       res,\n       `/api/auth?shop=${encodeURIComponent(shop)}`\n     );\n   };\n }\n```\n\n----------------------------------------\n\nTITLE: Creating a Session Copy from Session Data in TypeScript\nDESCRIPTION: This code shows how to create an identical copy of a Session instance by using the toObject() method to extract the data and then creating a new Session instance with that data.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/guides/session-storage.md#2025-04-11_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst callbackResponse = shopify.auth.callback({\n  rawRequest: req,\n  rawResponse: res,\n});\n\nconst sessionCopy = new Session(callbackResponse.session.toObject());\n// sessionCopy is an identical copy of the callbackResponse.session instance\n```\n\n----------------------------------------\n\nTITLE: Using ensureInstalledOnShop Middleware with Express in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the shopify.ensureInstalledOnShop middleware in an Express application. The middleware checks if the app is installed on the shop making the request and prompts the merchant for permissions if needed.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-app-express/docs/reference/ensureInstalledOnShop.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst app = express();\n\n// If the app wasn't installed in the shop, Shopify will prompt the merchant for permissions.\napp.use('/', shopify.ensureInstalledOnShop(), (req, res) => {\n  res.send('Hello world!');\n});\n```\n\n----------------------------------------\n\nTITLE: Validating HMAC in TypeScript\nDESCRIPTION: Shows how to validate an HMAC using the new async method in the Shopify App JS library.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/migrating-to-v6.md#2025-04-11_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst isValid = await shopify.utils.validateHmac(req.query);\n```\n\n----------------------------------------\n\nTITLE: Converting Session Data with fromPropertyArray Without User Data\nDESCRIPTION: Demonstrates how to convert session data stored as property arrays back into Session objects without including detailed user information. This example shows the default behavior where only the user ID is included in the session object.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/guides/session-storage.md#2025-04-11_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst sessionProperties = session.toPropertyArray();\n/*\n  if sessionProperties has the following data, without the user data\n  [\n    ['id', 'online_session_id'],\n    ['shop', 'online-session-shop'],\n    ['state', 'online-session-state'],\n    ['isOnline', true],\n    ['scope', 'online-session-scope'],\n    ['accessToken', 'online-session-token'],\n    ['expires', 1641013200000],  // example = January 1, 2022, as number of milliseconds since Jan 1, 1970\n    ['onlineAccessInfo', 1],\n    ],\n */\n\nconst session = Session.fromPropertyArray(sessionProperties);\n/*\n  ... then session will have the following data...\n  {\n    id: 'online_session_id',\n    shop: 'online-session-shop',\n    state: 'online-session-state',\n    isOnline: true,\n    scope: 'online-session-scope',\n    accessToken: 'online-session-token',\n    expires: 2022-01-01T05:00:00.000Z,  // Date object\n    onlineAccessInfo: {\n      associated_user: {\n        id: 1,\n      },\n    }\n  }\n */\n```\n\n----------------------------------------\n\nTITLE: Using Redirect Helper with External Target\nDESCRIPTION: Shows how to use the redirect helper to redirect to an external URL outside of the Shopify Admin. This is useful for redirecting embedded app users to external sites.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-app-remix/CHANGELOG.md#2025-04-11_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nexport const loader = async ({request}) => {\n  const {redirect} = await authenticate.admin(request);\n\n  return redirect('https://www.example.com', {target: '_top'});\n};\n```\n\n----------------------------------------\n\nTITLE: Importing CloudFlare Worker Adapter for Shopify API\nDESCRIPTION: Imports the CloudFlare Worker adapter to set up the Shopify API library with the correct defaults for a CloudFlare Worker runtime environment.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/README.md#2025-04-11_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport '@shopify/shopify-api/adapters/cf-worker';\n```\n\n----------------------------------------\n\nTITLE: Updating Auth Middleware for Shopify API v6\nDESCRIPTION: A diff showing the necessary changes to migrate the auth.js middleware from Shopify API v5 to v6. Major changes include manual session storage, updated import patterns, and webhook registration changes.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/example-migration-v5-node-template-to-v6.md#2025-04-11_snippet_8\n\nLANGUAGE: diff\nCODE:\n```\n-import { Shopify } from \"@shopify/shopify-api\";\n-import { gdprTopics } from \"@shopify/shopify-api/dist/webhooks/registry.js\";\n+import shopify from \"../shopify.js\";\n+import {\n+  gdprTopics,\n+  InvalidOAuthError,\n+  CookieNotFound,\n+} from \"@shopify/shopify-api\";\n+import { sqliteSessionStorage } from \"../sqlite-session-storage.js\";\n\n import ensureBilling from \"../helpers/ensure-billing.js\";\n import redirectToAuth from \"../helpers/redirect-to-auth.js\";\n\n-export default function applyAuthMiddleware(\n-  app,\n-  { billing = { required: false } } = { billing: { required: false } }\n-) {\n+export default function applyAuthMiddleware(app) {\n   app.get(\"/api/auth\", async (req, res) => {\n-    return redirectToAuth(req, res, app)\n+    return redirectToAuth(req, res, app);\n   });\n\n   app.get(\"/api/auth/callback\", async (req, res) => {\n     try {\n-      const session = await Shopify.Auth.validateAuthCallback(\n-        req,\n-        res,\n-        req.query\n-      );\n+      const callbackResponse = await shopify.auth.callback({\n+        rawRequest: req,\n+        rawResponse: res,\n+      });\n\n+      // save the session\n+      if ((await sqliteSessionStorage.storeSession(callbackResponse.session)) == false) {\n+        console.log(`Failed to store session ${callbackResponse.session.id}`);\n+      }\n+\n-      const responses = await Shopify.Webhooks.Registry.registerAll({\n-        shop: session.shop,\n-        accessToken: session.accessToken,\n+      const responses = await shopify.webhooks.register({\n+        session: callbackResponse.session,\n       });\n\n-      Object.entries(responses).map(([topic, response]) => {\n-        // The response from registerAll will include errors for the GDPR topics.  These can be safely ignored.\n+      Object.entries(responses).map(([topic, responsesForTopic]) => {\n+        // The response from register will include the GDPR topics - these can be safely ignored.\n         // To register the GDPR topics, please set the appropriate webhook endpoint in the\n         // 'GDPR mandatory webhooks' section of 'App setup' in the Partners Dashboard.\n-        if (!response.success && !gdprTopics.includes(topic)) {\n-          if (response.result.errors) {\n-            console.log(\n-              `Failed to register ${topic} webhook: ${response.result.errors[0].message}`\n-            );\n-          } else {\n-            console.log(\n-              `Failed to register ${topic} webhook: ${\n-                JSON.stringify(response.result.data, undefined, 2)\n-              }`\n-            );\n-          }\n+\n+        // If there are no entries in the response array, there was no change in webhook\n+        // registrations for that topic.\n+        if (!gdprTopics.includes(topic) && responsesForTopic.length > 0) {\n+          // Check the result of each response for errors\n+          responsesForTopic.map((response) => {\n+            if (!response.success) {\n+              if (response.result.errors) {\n+                console.log(\n+                  `Failed to register ${topic} webhook: ${response.result.errors[0].message}`\n+                );\n+              } else {\n+                console.log(\n+                  `Failed to register ${topic} webhook: ${JSON.stringify(\n+                    response.result.data,\n+                    undefined,\n+                    2\n+                  )}`\n+                );\n+              }\n+            }\n+          });\n         }\n       });\n\n       // If billing is required, check if the store needs to be charged right away to minimize the number of redirects.\n-      if (billing.required) {\n-        const [hasPayment, confirmationUrl] = await ensureBilling(\n-          session,\n-          billing\n-        );\n+      const [hasPayment, confirmationUrl] = await ensureBilling(\n+        callbackResponse.session\n+      );\n\n-        if (!hasPayment) {\n-          return res.redirect(confirmationUrl);\n-        }\n+      if (!hasPayment) {\n+        return res.redirect(confirmationUrl);\n       }\n```\n\n----------------------------------------\n\nTITLE: Using client.fetch() for GraphQL Requests in TypeScript\nDESCRIPTION: Shows how to use the client.fetch() method to make GraphQL requests and handle the response. It includes checking the response status and parsing the JSON data.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/api-clients/graphql-client/README.md#2025-04-11_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst shopQuery = `\n  query shop {\n    shop {\n      name\n      id\n    }\n  }\n`;\n\nconst response = await client.fetch(shopQuery);\n\nif (response.ok) {\n  const {errors, data, extensions} = await response.json();\n}\n```\n\n----------------------------------------\n\nTITLE: Updating a Resource with REST Resources\nDESCRIPTION: Example comparing the REST client approach with the simpler REST resources approach for finding and updating a product.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/guides/rest-resources.md#2025-04-11_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst sessionId = await shopify.session.getCurrentId({\n  rawRequest: req,\n  rawResponse: res,\n});\n\n// use sessionId to retrieve session from app's session storage\n// getSessionFromStorage() must be provided by application\nconst session = await getSessionFromStorage(sessionId);\n\n// get a single product via its product id\nconst product = await shopify.rest.Product.find({session, id: '7504536535062'});\n\nproduct.title = 'A new title';\n\n// After promise resolves, the product will be updated with the returned data\nawait product.save({\n  update: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Decoding Session Token in Shopify App JS\nDESCRIPTION: Shows how to use the new async method for decoding a session token in the updated Shopify App JS library.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/migrating-to-v6.md#2025-04-11_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nconst payload = await shopify.session.decodeSessionToken(token);\n```\n\n----------------------------------------\n\nTITLE: Updating Webhook Handler Implementation in TypeScript\nDESCRIPTION: Demonstrates the change in webhook handler implementation from asynchronous to synchronous calls in v7.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/migrating-to-v7.md#2025-04-11_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// BEFORE\nawait shopify.webhooks.addHandlers({\n  // ...\n});\n\n// AFTER\nshopify.webhooks.addHandlers({\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Node.js Adapter for Shopify API\nDESCRIPTION: Imports the Node.js adapter to set up the Shopify API library with the correct defaults for a Node.js runtime environment.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/README.md#2025-04-11_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport '@shopify/shopify-api/adapters/node';\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Table Name for PrismaSessionStorage\nDESCRIPTION: This TypeScript code shows how to configure PrismaSessionStorage with a custom table name. It uses the tableName option to specify a different name for the session table in the Prisma schema.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/session-storage/shopify-app-session-storage-prisma/README.md#2025-04-11_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst storage = new PrismaSessionStorage(prisma, {\n  tableName: 'MyCustomSession',\n});\n```\n\n----------------------------------------\n\nTITLE: Updating GDPR webhook handlers in gdpr.js\nDESCRIPTION: Code changes for gdpr.js to convert individual webhook handler setup functions into a structured export object that can be passed to the Shopify Express app. The update maintains the same handlers but changes how they're organized and registered.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-app-express/docs/reference/migrating-app-v6-api-lib-to-express-lib.md#2025-04-11_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n import { DeliveryMethod } from \"@shopify/shopify-api\";\n-import shopify from \"./shopify.js\";\n\n-export async function setupGDPRWebHooks(path) {\n+export default {\n-  await shopify.webhooks.addHandlers({\n-    CUSTOMERS_DATA_REQUEST: {\n-      deliveryMethod: DeliveryMethod.Http,\n-      callbackUrl: path,\n-      callback: async (topic, shop, body, webhookId) => {\n-        const payload = JSON.parse(body);\n-      },\n+  CUSTOMERS_DATA_REQUEST: {\n+    deliveryMethod: DeliveryMethod.Http,\n+    callbackUrl: \"/api/webhooks\",\n+    callback: async (topic, shop, body, webhookId) => {\n+      const payload = JSON.parse(body);\n     },\n-  });\n+  },\n\n-  await shopify.webhooks.addHandlers({\n-    CUSTOMERS_REDACT: {\n-      deliveryMethod: DeliveryMethod.Http,\n-      callbackUrl: path,\n-      callback: async (topic, shop, body, webhookId) => {\n-        const payload = JSON.parse(body);\n-      },\n+  CUSTOMERS_REDACT: {\n+    deliveryMethod: DeliveryMethod.Http,\n+    callbackUrl: \"/api/webhooks\",\n+    callback: async (topic, shop, body, webhookId) => {\n+      const payload = JSON.parse(body);\n     },\n-  });\n+  },\n\n-  await shopify.webhooks.addHandlers({\n-    SHOP_REDACT: {\n-      deliveryMethod: DeliveryMethod.Http,\n-      callbackUrl: path,\n-      callback: async (topic, shop, body, webhookId) => {\n-        const payload = JSON.parse(body);\n-      },\n+  SHOP_REDACT: {\n+    deliveryMethod: DeliveryMethod.Http,\n+    callbackUrl: \"/api/webhooks\",\n+    callback: async (topic, shop, body, webhookId) => {\n+      const payload = JSON.parse(body);\n     },\n-  });\n-}\n+  },\n+};\n```\n\n----------------------------------------\n\nTITLE: Implementing CSP Headers Middleware in Express for Shopify App\nDESCRIPTION: Example showing how to integrate the cspHeaders middleware into an Express application. The middleware automatically sets Content-Security-Policy headers to prevent clickjacking attacks, with different policies for embedded and non-embedded apps.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-app-express/docs/reference/cspHeaders.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst app = express();\nconst shopifyApp = shopifyApp({\n  //...\n});\n\n// ...\napp.use(shopifyApp.cspHeaders());\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Headers to Shopify Admin API Request\nDESCRIPTION: Demonstrates how to add custom headers to an API request using the client.request() method. This can be useful for including additional metadata or controlling API behavior.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/api-clients/admin-api-client/README.md#2025-04-11_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst productQuery = `\n  query ProductQuery($id: ID!) {\n    product(id: $id) {\n      id\n      title\n      handle\n    }\n  }\n`;\n\nconst {data, errors, extensions} = await client.request(productQuery, {\n  variables: {\n    id: 'gid://shopify/Product/7608002183224',\n  },\n  headers: {\n    'X-GraphQL-Cost-Include-Fields': true,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Current Session ID in Shopify App JS\nDESCRIPTION: Illustrates how to retrieve the current session ID using the new method, which requires specifying if it's an online session.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/migrating-to-v6.md#2025-04-11_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nconst sessionId = await shopify.session.getCurrentId({\n  isOnline: true,\n  rawRequest: req,\n  rawResponse: res,\n});\n```\n\n----------------------------------------\n\nTITLE: Updating usage billing capped amount in JavaScript\nDESCRIPTION: Demonstrates how to use the new billing helper function to update the capped amount for a usage billing plan.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-app-remix/CHANGELOG.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nawait billing.updateUsageCappedAmount({\n  subscriptionLineItemId:\n    'gid://shopify/AppSubscriptionLineItem/12345?v=1&index=1',\n  cappedAmount: {\n    amount: 10,\n    currencyCode: 'USD',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Retry Value for GraphQL Request in TypeScript\nDESCRIPTION: Shows how to set a custom retry value for a GraphQL request using the client.request method. It includes setting the retries option to 2.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/api-clients/graphql-client/README.md#2025-04-11_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst shopQuery = `\n  query ShopQuery {\n    shop {\n      name\n      id\n    }\n  }\n`;\n\n// Will retry the HTTP request to the server 2 times if the requests were abandoned or the server responded with a 429 or 503 error\nconst {data, errors, extensions} = await client.request(shopQuery, {\n  retries: 2,\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing RedisSessionStorage with URL Object\nDESCRIPTION: Configures RedisSessionStorage using a URL object instead of a string URL. This approach provides a more structured way to handle the connection details.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/session-storage/shopify-app-session-storage-redis/README.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst shopify = shopifyApp({\n  sessionStorage: new RedisSessionStorage(\n    new URL('redis://username:password@host/database'),\n  ),\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Adding GraphQL Codegen Script to package.json\nDESCRIPTION: Configuration for adding the GraphQL code generation script to package.json.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/api-clients/api-codegen-preset/README.md#2025-04-11_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"graphql-codegen\": \"graphql-codegen\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Test Helper Setup for Shopify Apps\nDESCRIPTION: Example demonstrating how to set up test helpers for automated unit and e2e testing of Shopify apps, including session storage and request validation.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-app-remix/CHANGELOG.md#2025-04-11_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport prisma from '~/db.server';\nimport { PrismaSessionStorage } from '@shopify/shopify-app-session-storage-prisma';\nimport {\n  RequestType,\n  setUpValidRequest,\n  setUpValidSession,\n} from '@shopify/shopify-api/test-helpers';\n\n// set up test Session\nconst sessionStorage = new PrismaSessionStorage(prisma);\nconst session = await setUpValidSession({\n  shop: getShopValue('test-shop')\n});\nawait sessionStorage.storeSession(session);\n\nlet request: Request = ... // the request intercepted by end-to-end testing framework\n\nconst authorizedRequest = setUpValidRequest(\n  {\n    type: RequestType.Extension,\n    store: `test-shop-${process.env.TEST_PARALLEL_INDEX}`,\n    apiKey: ..., // the same value as `apiKey` passed to shopifyApi()\n    apiSecretKey: ..., // the same value as `apiSecretKey` passed to shopifyApi()\n  },\n  request\n);\n\n// use authorizedRequest to complete the request, or use the url or headers of authorizedRequest to modify the original request.\n\n... // complete testing here\n\n// tear down test Session\nawait sessionStorage.deleteSession(session.id);\n```\n\n----------------------------------------\n\nTITLE: Implementing AppProvider Component in React JSX\nDESCRIPTION: This code example shows how to implement the new AppProvider component in a Remix app, simplifying the setup of the frontend for Shopify apps and ensuring easier updates in the future.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-app-remix/docs/MIGRATION_V3.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport {AppProvider} from '@shopify/shopify-app-remix/react';\n\nexport default function App() {\n  const {apiKey} = useLoaderData();\n\n  return (\n    <AppProvider isEmbeddedApp apiKey={apiKey}>\n      <ui-nav-menu>\n        <Link to=\"/app\" rel=\"home\">\n          Home\n        </Link>\n        <Link to=\"/app/additional\">Additional page</Link>\n      </ui-nav-menu>\n      <Outlet />\n    </AppProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Auth Utilities in Shopify App JS\nDESCRIPTION: Demonstrates how to use the relocated auth utilities for nonce generation, safe comparison, and getting embedded app URL.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/migrating-to-v6.md#2025-04-11_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nconst nonce = shopify.auth.nonce();\nconst match = shopify.auth.safeCompare(strA, strB);\nconst redirectUrl = await shopify.auth.getEmbeddedAppUrl({\n  rawRequest: req,\n  rawResponse: res,\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Memory Session Storage in Shopify App Express\nDESCRIPTION: Example showing how to initialize and configure MemorySessionStorage in a Shopify app. This implementation is meant for local development only and should not be used in production as sessions are cleared on app restart.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/session-storage/shopify-app-session-storage-memory/README.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {shopifyApp} from '@shopify/shopify-app-express';\nimport {MemorySessionStorage} from '@shopify/shopify-app-session-storage-memory';\n\nconst shopify = shopifyApp({\n  sessionStorage: new MemorySessionStorage(),\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Checking API Version Compatibility in Shopify App JS with TypeScript\nDESCRIPTION: This example demonstrates how to use the versionCompatible utility method to check if a specific Shopify API version is compatible with the configured version. The method returns true if the configured API version is equal to or newer than the version being checked against.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/reference/utils/versionCompatible.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst shopify = shopifyApi({\n  apiVersion: ApiVersion.July22,\n});\n\nif (shopify.utils.versionCompatible(ApiVersion.January22)) {\n  // true in this example, as ApiVersion.July22 is newer than ApiVersion.January22\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Shopify App with Managed Pricing Support in JavaScript\nDESCRIPTION: This snippet shows how to configure the Shopify app object with managed pricing support enabled and billing disabled. It sets various API options including the latest API version, rest resources, and future flags.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-app-express/docs/reference/guides/managed-pricing.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst shopify = shopifyApp({\n  api: {\n    apiVersion: LATEST_API_VERSION,\n    restResources,\n    future: {\n      customerAddressDefaultFix: true,\n      lineItemBilling: true,\n      unstable_managedPricingSupport: true, // enable managed pricing\n    },\n    billing: undefined, // billing is not needed for managed pricing\n  },\n\n```\n\n----------------------------------------\n\nTITLE: Importing URL Polyfill in React Native\nDESCRIPTION: Import statement to apply the URL polyfill globally in a React Native application's entry file to prevent URL validation errors when using the Shopify storefront API client.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/api-clients/storefront-api-client/README.md#2025-04-11_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nimport 'react-native-url-polyfill/auto';\n```\n\n----------------------------------------\n\nTITLE: Installing Shopify Admin API Client\nDESCRIPTION: Command to install the Admin API Client library using npm package manager.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/api-clients/admin-api-client/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @shopify/admin-api-client -s\n```\n\n----------------------------------------\n\nTITLE: Instantiating and Using MySQL Session Storage with Drizzle\nDESCRIPTION: Example showing how to instantiate the DrizzleSessionStorageMySQL adapter and integrate it with the Shopify app. The approach is similar to the PostgreSQL example but uses the MySQL-specific adapter.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/session-storage/shopify-app-session-storage-drizzle/README.md#2025-04-11_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {shopifyApp} from '@shopify/shopify-app-express';\nimport {DrizzleSessionStorageMySQL} from '@shopify/shopify-app-session-storage-drizzle';\n\nimport {db} from './db.server';\nimport {sessionTable} from './schema';\n\nconst storage = new DrizzleSessionStorageMySQL(db, sessionTable);\n\nconst shopify = shopifyApp({\n  sessionStorage: storage,\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: New Runtime Adapter with Node-Fetch in TypeScript\nDESCRIPTION: Updated implementation using node-fetch directly as the abstract fetch function.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/migrating-to-v9.md#2025-04-11_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport fetch from 'node-fetch';\nimport {setAbstractFetchFunc} from '@shopify/shopify-api/runtime';\n\nsetAbstractFetchFunc(fetch);\n```\n\n----------------------------------------\n\nTITLE: Initializing PrismaSessionStorage in Shopify App Express\nDESCRIPTION: This JavaScript code demonstrates how to instantiate and use PrismaSessionStorage with shopifyApp from @shopify/shopify-app-express. It imports necessary dependencies, creates a PrismaClient instance, and sets up the session storage.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/session-storage/shopify-app-session-storage-prisma/README.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {shopifyApp} from '@shopify/shopify-app-express';\nimport {PrismaSessionStorage} from '@shopify/shopify-app-session-storage-prisma';\nimport {PrismaClient} from '@prisma/client';\n\nconst prisma = new PrismaClient();\nconst storage = new PrismaSessionStorage(prisma);\n\nconst shopify = shopifyApp({\n  sessionStorage: storage,\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Overriding Billing Configuration at Request Time\nDESCRIPTION: Shows how to override billing configuration options when making a billing request. This example demonstrates customizing the trial days parameter during a billing request operation.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-app-remix/CHANGELOG.md#2025-04-11_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport {json} from '@remix-run/node';\nimport {authenticate} from '~/shopify.server';\n\nexport async function loader({request}) {\n  const {billing} = await authenticate.admin(request);\n\n  await billing.require({\n    plans: ['plan1', 'plan2'],\n    onFailure: async () =>\n      await billing.request({\n        plan: 'plan1',\n        trialDays: 5, // Override the trialDays config value\n      }),\n  });\n\n  return json(await response.json());\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring GraphQL Codegen with shopifyApiProject Helper\nDESCRIPTION: Example GraphQL configuration file using the shopifyApiProject helper function. This provides a one-stop-shop setup for an entire codegen project with minimal configuration required.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/api-clients/api-codegen-preset/README.md#2025-04-11_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nimport {shopifyApiProject, ApiType} from '@shopify/api-codegen-preset';\n\nexport default {\n  // For syntax highlighting / auto-complete when writing operations\n  schema: 'https://shopify.dev/admin-graphql-direct-proxy/2025-01',\n  documents: ['./app/**/*.{js,ts,jsx,tsx}'],\n  projects: {\n    // To produce variable / return types for Admin API operations\n    default: shopifyApiProject({\n      apiType: ApiType.Admin,\n      apiVersion: '2025-01',\n      documents: ['./app/**/*.{js,ts,jsx,tsx}'],\n      outputDir: './app/types',\n    }),\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Updating Usage Capped Amount Parameters Table in Markdown\nDESCRIPTION: A markdown table listing the parameters for the updateUsageCappedAmount method, including their types, whether they're required, default values, and notes on usage.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/guides/billing.md#2025-04-11_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n| Parameter                | Type      | Required? | Default Value | Notes                                          |\n| ------------------------ | --------- | :-------: | :-----------: | ---------------------------------------------- |\n| `session`                | `Session` |    Yes    |       -       | The session to be used for this request        |\n| `subscriptionLineItemId` | `string`  |    Yes    |       -       | The line item to update the maximum charge for |\n| `cappedAmount.amount`    | `number`  |    Yes    |       -       | The maximum amount to charge the merchant      |\n| `cappedAmount.currency`  | `string`  |    Yes    |       -       | The currency to charge                         |\n```\n\n----------------------------------------\n\nTITLE: Using AppProvider Component in Remix\nDESCRIPTION: Demonstrates how to use the AppProvider component to set up Shopify-specific app requirements on the frontend. This abstracts away common setup tasks for embedded Shopify apps.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-app-remix/CHANGELOG.md#2025-04-11_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nimport {AppProvider} from '@shopify/shopify-app-remix/react';\n\nexport default function App() {\n  const {apiKey} = useLoaderData();\n\n  return (\n    <AppProvider isEmbeddedApp apiKey={apiKey}>\n      <ui-nav-menu>\n        <Link to=\"/app\" rel=\"home\">\n          Home\n        </Link>\n        <Link to=\"/app/additional\">Additional page</Link>\n      </ui-nav-menu>\n      <Outlet />\n    </AppProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using GQL Query Types with client.request and client.requestStream in TypeScript\nDESCRIPTION: Demonstrates how to provide GQL query types to client.request() and client.requestStream() methods. It includes importing and using auto-generated types and GraphQL queries.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/api-clients/graphql-client/README.md#2025-04-11_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport {print} from 'graphql/language';\n\n// GQL operation types are usually auto generated during the application build\nimport {CollectionQuery, CollectionDeferredQuery} from 'types/appTypes';\nimport collectionQuery from './collectionQuery.graphql';\nimport collectionDeferredQuery from './collectionDeferredQuery.graphql';\n\nconst {data, errors, extensions} = await client.request<CollectionQuery>(\n  print(collectionQuery),\n  {\n    variables: {\n      handle: 'sample-collection',\n    },\n  }\n);\n\nconst responseStream = await client.requestStream<CollectionDeferredQuery>(\n  print(collectionDeferredQuery),\n  {\n    variables: {handle: 'sample-collection'},\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing Node Adapter in Shopify API v6\nDESCRIPTION: Shows how to import and initialize the Node.js runtime adapter before using the Shopify API library.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/migrating-to-v6.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport '@shopify/shopify-api/adapters/node';\nimport { ... } from '@shopify/shopify-api';\n```\n\n----------------------------------------\n\nTITLE: Aligning Webhook Admin Context for GraphQL and REST in TypeScript\nDESCRIPTION: This code snippet shows how to update the usage of the admin context object returned by authenticate.webhook to align with the new consistent format for both GraphQL queries and REST resource access.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-app-remix/docs/MIGRATION_V3.md#2025-04-11_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function action({request}: ActionFunctionArgs) {\n  const {admin} = await shopify.authenticate.webhook(request);\n\n  // GraphQL query\n  const response = await admin?.graphql(`query { ... }`, {\n    variables: {myVariable: '...'},\n  });\n  const data = await response.json();\n\n  // REST resource\n  const products = await admin?.rest.resources.Product.all({\n    // ...\n  });\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using GraphQL Query without v3_webhookContext Flag in Remix\nDESCRIPTION: Demonstrates how to use the admin GraphQL client in a webhook request handler without the v3_webhookContext flag enabled. This approach requires passing the query string as part of a data object parameter.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-app-remix/CHANGELOG.md#2025-04-11_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport {json, ActionFunctionArgs} from '@remix-run/node';\nimport {authenticate} from '../shopify.server';\n\nexport async function action({request}: ActionFunctionArgs) {\n  const {admin} = await authenticate.webhook(request);\n\n  const response = await admin?.graphql.query<any>({\n    data: {\n      query: `#graphql\n      mutation populateProduct($input: ProductInput!) {\n        productCreate(input: $input) {\n          product {\n            id\n          }\n        }\n      }`,\n      variables: {input: {title: 'Product Name'}},\n    },\n  });\n\n  const productData = response?.body.data;\n  return json({data: productData.data});\n}\n```\n\n----------------------------------------\n\nTITLE: Installing SQLite Session Storage Package\nDESCRIPTION: Install the @shopify/shopify-app-session-storage-sqlite package for session storage in v6.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/example-migration-v5-node-template-to-v6.md#2025-04-11_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nyarn add @shopify/shopify-app-session-storage-sqlite\n# or\nnpm install @shopify/shopify-app-session-storage-sqlite\n# or\npnpm install @shopify/shopify-app-session-storage-sqlite\n```\n\n----------------------------------------\n\nTITLE: Updating gdpr.js for v6 Compatibility\nDESCRIPTION: Update the gdpr.js file to use the new shopify API instance and the updated addHandlers method structure.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/example-migration-v5-node-template-to-v6.md#2025-04-11_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n-import { Shopify } from \"@shopify/shopify-api\";\n+import { DeliveryMethod } from \"@shopify/shopify-api\"\n+import shopify from \"./shopify.js\";\n\n-export function setupGDPRWebHooks(path) {\n-  Shopify.Webhooks.Registry.addHandler(\"CUSTOMERS_DATA_REQUEST\", {\n-    path,\n-    webhookHandler: async (topic, shop, body) => {\n-      const payload = JSON.parse(body);\n+export async function setupGDPRWebHooks(path) {\n+  await shopify.webhooks.addHandlers({\n+    CUSTOMERS_DATA_REQUEST: {\n+      deliveryMethod: DeliveryMethod.Http,\n+      callbackUrl: path,\n+      callback: async (topic, shop, body) => {\n+        const payload = JSON.parse(body);\n+      },\n     },\n   });\n\n-  Shopify.Webhooks.Registry.addHandler(\"CUSTOMERS_REDACT\", {\n-    path,\n-    webhookHandler: async (topic, shop, body) => {\n-      const payload = JSON.parse(body);\n+export async function setupGDPRWebHooks(path) {\n+  await shopify.webhooks.addHandlers({\n+    CUSTOMERS_REDACT: {\n+      deliveryMethod: DeliveryMethod.Http,\n+      callbackUrl: path,\n+      callback: async (topic, shop, body) => {\n+        const payload = JSON.parse(body);\n+      },\n     },\n   });\n\n-  Shopify.Webhooks.Registry.addHandler(\"SHOP_REDACT\", {\n-    path,\n-    webhookHandler: async (topic, shop, body) => {\n-      const payload = JSON.parse(body);\n+export async function setupGDPRWebHooks(path) {\n+  await shopify.webhooks.addHandlers({\n+    SHOP_REDACT: {\n+      deliveryMethod: DeliveryMethod.Http,\n+      callbackUrl: path,\n+      callback: async (topic, shop, body) => {\n+        const payload = JSON.parse(body);\n+      },\n     },\n   });\n }\n```\n\n----------------------------------------\n\nTITLE: Accessing Storefront GraphQL Client via App Proxy\nDESCRIPTION: Demonstrates how to access the storefront GraphQL client using the app proxy authentication. This allows making storefront API queries in the context of an app proxy request.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-app-remix/CHANGELOG.md#2025-04-11_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport {json} from '@remix-run/node';\nimport {authenticate} from '~/shopify.server';\n\nexport async function loader({request}) {\n  const {storefront} = await authenticate.public.appProxy(request);\n  const response = await storefront.graphql('{blogs(first: 10) {nodes{id}}}');\n\n  return json(await response.json());\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Session Handling in TypeScript\nDESCRIPTION: Demonstrates the changes in Session class to handle associated user information. Shows how to use the updated fromPropertyArray and toPropertyArray methods with the new returnUserData parameter.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/CHANGELOG.md#2025-04-11_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst sessionProperties = session.toPropertyArray(true);\n/*\n  if sessionProperties has the following data...\n  [\n    ['id', 'online_session_id'],\n    ['shop', 'online-session-shop'],\n    ['state', 'online-session-state'],\n    ['isOnline', true],\n    ['scope', 'online-session-scope'],\n    ['accessToken', 'online-session-token'],\n    ['expires', 1641013200000],  // example = January 1, 2022, as number of milliseconds since Jan 1, 1970\n    ['userId', 1],\n    ['first_name', 'online-session-first-name'],\n    ['last_name', 'online-session-last-name'],\n    ['email', 'online-session-email'],\n    ['locale', 'online-session-locale'],\n    ['email_verified', false]\n    ['account_owner', true,]\n    ['collaborator', false],\n    ],\n */\n\nconst session = Session.fromPropertyArray(sessionProperties, true);\n/*\n  ... then session will have the following data...\n  {\n    id: 'online_session_id',\n    shop: 'online-session-shop',\n    state: 'online-session-state',\n    isOnline: true,\n    scope: 'online-session-scope',\n    accessToken: 'online-session-token',\n    expires: 2022-01-01T05:00:00.000Z,  // Date object\n    onlineAccessInfo: {\n      associated_user: {\n        id: 1,\n        first_name: 'online-session-first-name'\n        last_name: 'online-session-last-name',\n        email: 'online-session-email',\n        locale: 'online-session-locale',\n        email_verified: false,\n        account_owner: true,\n        collaborator: false,\n      },\n    }\n  }\n */\n\nconst {session, headers} = shopify.auth.callback({\n  rawRequest: req,\n  rawResponse: res,\n});\n\n/*\n  If session has the following data content...\n  {\n    id: 'online_session_id',\n    shop: 'online-session-shop',\n    state: 'online-session-state',\n    isOnline: true,\n    scope: 'online-session-scope',\n    accessToken: 'online-session-token',\n    expires: 2022-01-01T05:00:00.000Z,  // Date object\n    onlineAccessInfo: {\n      expires_in: 1,\n      associated_user_scope: 'online-session-user-scope',\n      associated_user: {\n        id: 1,\n        first_name: 'online-session-first-name',\n        last_name: 'online-session-last-name',\n        email: 'online-session-email',\n        locale: 'online-session-locale',\n        email_verified: true,\n        account_owner: true,\n        collaborator: false,\n      },\n    }\n  }\n */\n\nconst sessionProperties = session.toPropertyArray();\n/*\n  ... then sessionProperties will have the following data...\n   [\n    ['id', 'online_session_id'],\n    ['shop', 'online-session-shop'],\n    ['state', 'online-session-state'],\n    ['isOnline', true],\n    ['scope', 'online-session-scope'],\n    ['accessToken', 'online-session-token'],\n    ['expires', 1641013200000],  // example = January 1, 2022, as number of milliseconds since Jan 1, 1970\n    ['userId', 1], // New returns the user id under the userId key instead of onlineAccessInfo\n    ['first_name', 'online-session-first-name'],\n    ['last_name', 'online-session-last-name'],\n    ['email', 'online-session-email'],\n    ['locale', 'online-session-locale'],\n    ['email_verified', false]\n    ['account_owner', true,]\n    ['collaborator', false],\n    ],\n */\n```\n\n----------------------------------------\n\nTITLE: Moving product-creator.js file up a directory level\nDESCRIPTION: Shell commands to move the product-creator.js file from the helpers directory to the web directory, showing both Unix and Windows command variants.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-app-express/docs/reference/migrating-app-v6-api-lib-to-express-lib.md#2025-04-11_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n# Unix OS, e.g., macOS, Linux, etc.\nmv helpers/product-creator.js .\n# Windows\nmove helpers\\product-creator.js .\n```\n\n----------------------------------------\n\nTITLE: Updating Redirect URL Generation for Shopify API v6\nDESCRIPTION: A diff showing the changes needed for generating redirect URLs in the auth callback. Highlights the asynchronous nature of getEmbeddedAppUrl in v6 which requires the await keyword.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/example-migration-v5-node-template-to-v6.md#2025-04-11_snippet_9\n\nLANGUAGE: diff\nCODE:\n```\n-      const host = Shopify.Utils.sanitizeHost(req.query.host);\n-      const redirectUrl = Shopify.Context.IS_EMBEDDED_APP\n-        ? Shopify.Utils.getEmbeddedAppUrl(req)\n-        : `/?shop=${session.shop}&host=${encodeURIComponent(host)}`;\n+      const host = shopify.utils.sanitizeHost(req.query.host);\n+      const redirectUrl = shopify.config.isEmbeddedApp\n+        ? await shopify.auth.getEmbeddedAppUrl({\n+            rawRequest: req,\n+            rawResponse: res,\n+          })\n+        : `/?shop=${callbackResponse.session.shop}&host=${encodeURIComponent(host)}`;\n\n       res.redirect(redirectUrl);\n     } catch (e) {\n       console.warn(e);\n       switch (true) {\n-        case e instanceof Shopify.Errors.InvalidOAuthError:\n+        case e instanceof InvalidOAuthError:\n           res.status(400);\n           res.send(e.message);\n           break;\n-        case e instanceof Shopify.Errors.CookieNotFound:\n-        case e instanceof Shopify.Errors.SessionNotFound:\n+        case e instanceof CookieNotFound:\n           // This is likely because the OAuth session cookie expired before the merchant approved the request\n           return redirectToAuth(req, res, app);\n           break;\n         default:\n           res.status(500);\n           res.send(e.message);\n           break;\n       }\n     }\n   });\n }\n```\n\n----------------------------------------\n\nTITLE: Updating ShopifyApp Type Usage in TypeScript\nDESCRIPTION: Example showing how to update the usage of the ShopifyApp type in TypeScript after changes in v3. The new version requires using AppConfigParams type to explicitly set generics.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-app-express/CHANGELOG.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {ShopifyApp} from '@shopify/shopify-app-express';\nimport {restResources} from '@shopify/shopify-api/rest/admin/2023-10';\nimport {MemorySessionStorage} from '@shopify/shopify-app-session-storage-memory';\n\nconst myVariable: ShopifyApp<typeof restResources, MemorySessionStorage>;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport {ShopifyApp, AppConfigParams} from '@shopify/shopify-app-express';\nimport {restResources} from '@shopify/shopify-api/rest/admin/2023-10';\nimport {MemorySessionStorage} from '@shopify/shopify-app-session-storage-memory';\n\nconst myVariable: ShopifyApp<\n  AppConfigParams<typeof restResources, MemorySessionStorage>\n>;\n```\n\n----------------------------------------\n\nTITLE: Installing Updated Dependencies\nDESCRIPTION: Update the API library package using your preferred package manager (yarn, npm, or pnpm).\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/example-migration-v5-node-template-to-v6.md#2025-04-11_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nyarn install\n# or\nnpm install\n# or\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Configuring GraphQL Request with Keepalive - TypeScript\nDESCRIPTION: Example showing how to make a GraphQL query with keepalive configuration enabled. The query fetches shop name and ID with the keepalive option set to true.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/api-clients/graphql-client/CHANGELOG.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst shopQuery = `\n    query ShopQuery {\n      shop {\n        name\n        id\n      }\n    }\n  `;\n\nconst {data, errors, extensions} = await client.request(shopQuery, {\n    keepalive: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Shopify App Server in Remix\nDESCRIPTION: Setting up the Shopify app server configuration using the shopifyApp function. This initializes the app with API keys, scopes, and session storage.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-app-remix/README.md#2025-04-11_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// app/shopify.server.js\n// Note that you don't need to import the node adapter if you're running on a different runtime.\nimport '@shopify/shopify-app-remix/server/adapters/node';\n// Memory storage makes it easy to set an app up, but should never be used in production.\nimport {MemorySessionStorage} from '@shopify/shopify-app-session-storage-memory';\n\nimport {LATEST_API_VERSION, shopifyApp} from '@shopify/shopify-app-remix';\n\nconst shopify = shopifyApp({\n  apiKey: process.env.SHOPIFY_API_KEY!,\n  apiSecretKey: process.env.SHOPIFY_API_SECRET!,\n  appUrl: process.env.SHOPIFY_APP_URL!,\n  scopes: ['read_products'],\n  apiVersion: LATEST_API_VERSION,\n  sessionStorage: new MemorySessionStorage(),\n});\nexport default shopify;\n```\n\n----------------------------------------\n\nTITLE: Handling GraphQL Response Errors in JavaScript\nDESCRIPTION: Example of how to handle GraphQL query errors after a breaking change in version 5.0.0. The GraphqlClient now throws a GraphqlQueryError when the response contains an errors attribute.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/CHANGELOG.md#2025-04-11_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst response = await Shopify.Utils.graphqlProxy(req, res);\nif (response.errors) {\n  throw new GraphqlQueryError(response.errors);\n}\n// Handle successful response\n```\n\n----------------------------------------\n\nTITLE: Creating Server-Enabled Storefront API Client with Private Access Token\nDESCRIPTION: Example of initializing a Storefront API client for server-side use with a private access token and custom Fetch API implementation using node-fetch.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/api-clients/storefront-api-client/README.md#2025-04-11_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  createStorefrontApiClient,\n  CustomFetchApi,\n} from '@shopify/storefront-api-client';\nimport {fetch as nodeFetch} from 'node-fetch';\n\nconst client = createStorefrontApiClient({\n  storeDomain: 'http://your-shop-name.myshopify.com',\n  apiVersion: '2023-10',\n  privateAccessToken: 'your-storefront-private-access-token',\n  customFetchApi: nodeFetch,\n});\n```\n\n----------------------------------------\n\nTITLE: Instantiating and Using SQLite Session Storage with Drizzle\nDESCRIPTION: Example showing how to instantiate the DrizzleSessionStorageSQLite adapter and integrate it with the Shopify app. The code demonstrates using the SQLite-specific adapter with a database connection.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/session-storage/shopify-app-session-storage-drizzle/README.md#2025-04-11_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport {shopifyApp} from '@shopify/shopify-app-express';\nimport {DrizzleSessionStorageSQLite} from '@shopify/shopify-app-session-storage-drizzle';\n\nimport {db} from './db.server';\nimport {sessionTable} from './schema';\n\nconst storage = new DrizzleSessionStorageSQLite(db, sessionTable);\n\nconst shopify = shopifyApp({\n  sessionStorage: storage,\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Line Item Billing with Multiple Items in TypeScript\nDESCRIPTION: This example demonstrates how to update the billing configuration to support multiple line items per plan, including usage-based billing, using the new format in the shopifyApp initialization.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-app-remix/docs/MIGRATION_V3.md#2025-04-11_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst shopify = shopifyApp({\n  billing: {\n    one_time: {\n      interval: BillingInterval.OneTime,\n      amount: 10,\n      currencyCode: 'USD',\n    },\n    monthly_plan: {\n      lineItems: [\n        {\n          interval: BillingInterval.Every30Days,\n          amount: 5,\n          currencyCode: 'USD',\n        },\n        {\n          interval: BillingInterval.Usage,\n          amount: 1,\n          currencyCode: 'USD',\n          terms: '1 dollar per 1000 emails',\n        },\n      ],\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Updating package.json for @shopify/shopify-api v6\nDESCRIPTION: Modify the package.json file to use version 6 of the @shopify/shopify-api package.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/example-migration-v5-node-template-to-v6.md#2025-04-11_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n   \"dependencies\": {\n-    \"@shopify/shopify-api\": \"^5.0.0\",\n+    \"@shopify/shopify-api\": \"^6.0.0\",\n```\n\n----------------------------------------\n\nTITLE: DynamoDB Table Schema Definition\nDESCRIPTION: Defines the DynamoDB table schema including attribute definitions, key schema, global secondary indexes, and provisioned throughput settings for the session storage.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/session-storage/shopify-app-session-storage-dynamodb/README.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  TableName: sessionTableName,\n  AttributeDefinitions: [\n    {AttributeName: 'id', AttributeType: 'S'},\n    {AttributeName: 'shop', AttributeType: 'S'},\n  ],\n  KeySchema: [{AttributeName: 'id', KeyType: 'HASH'}],\n  GlobalSecondaryIndexes: [\n    {\n      IndexName: shopIndexName,\n      KeySchema: [{AttributeName: 'shop', KeyType: 'HASH'}],\n      Projection: {ProjectionType: 'KEYS_ONLY'},\n      ProvisionedThroughput: {\n        ReadCapacityUnits: 1,\n        WriteCapacityUnits: 1,\n      },\n    },\n  ],\n  ProvisionedThroughput: {ReadCapacityUnits: 1, WriteCapacityUnits: 1},\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Headers to GraphQL Request in TypeScript\nDESCRIPTION: Illustrates how to add custom headers to a GraphQL request using the client.request method. It includes setting a Shopify-Storefront-Id header.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/api-clients/graphql-client/README.md#2025-04-11_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst productQuery = `\n  query ProductQuery($handle: String) {\n    product(handle: $handle) {\n      id\n      title\n      handle\n    }\n  }\n`;\n\nconst {data, errors, extensions} = await client.request(productQuery, {\n  variables: {\n    handle: 'sample-product',\n  },\n  headers: {\n    'Shopify-Storefront-Id': 'shop-id',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Usage Records for Billing\nDESCRIPTION: Example of creating usage records for a usage-based billing plan, specifying a description, price amount with currency, and test status.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/CHANGELOG.md#2025-04-11_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst chargeBilling = await billing.createUsageRecord({\n  description: 'Usage record for product creation',\n  price: {\n    amount: 1,\n    currencyCode: 'USD',\n  },\n  isTest: true,\n});\nconsole.log(chargeBilling);\n```\n\n----------------------------------------\n\nTITLE: Initializing Shopify App with PostgreSQL Session Storage\nDESCRIPTION: This snippet demonstrates different ways to initialize a Shopify app with PostgreSQL session storage. It shows three methods: using a connection string, using a URL object, or using explicit credentials with the withCredentials helper method.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/session-storage/shopify-app-session-storage-postgresql/README.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {shopifyApp} from '@shopify/shopify-app-express';\nimport {PostgreSQLSessionStorage} from '@shopify/shopify-app-session-storage-postgresql';\n\nconst shopify = shopifyApp({\n  sessionStorage: new PostgreSQLSessionStorage(\n    'postgres://username:password@host/database',\n  ),\n  // ...\n});\n\n// OR\n\nconst shopify = shopifyApp({\n  sessionStorage: new PostgreSQLSessionStorage(\n    new URL('postgres://username:password@host/database'),\n  ),\n  // ...\n});\n\n// OR\n\nconst shopify = shopifyApp({\n  sessionStorage: PostgreSQLSessionStorage.withCredentials(\n    'host.com',\n    'thedatabase',\n    'username',\n    'password',\n  ),\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Making a GraphQL Query with the Admin API Client\nDESCRIPTION: Example of querying for a product using the Admin API client, demonstrating how to define a GraphQL operation and pass variables to retrieve specific product data.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/api-clients/admin-api-client/README.md#2025-04-11_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst operation = `\n  query ProductQuery($id: ID!) {\n    product(id: $id) {\n      id\n      title\n      handle\n    }\n  }\n`;\n\nconst {data, errors, extensions} = await client.request(operation, {\n  variables: {\n    id: 'gid://shopify/Product/7608002183224',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a new Remix app with indie-stack template\nDESCRIPTION: Commands to create a new Remix app using the indie-stack template and install the shopify-app-remix package.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-app-remix/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-remix@latest --template remix-run/indie-stack\ncd ./name-of-your-app\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @shopify/shopify-app-remix\n```\n\n----------------------------------------\n\nTITLE: Canceling a Subscription in JavaScript\nDESCRIPTION: This code snippet shows how to cancel a subscription using the App Billing API. It takes a session and subscriptionId as parameters and returns the canceled subscription details.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/CHANGELOG.md#2025-04-11_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst canceledSubscription = await shopify.billing.cancel({\n  session,\n  subscriptionId,\n});\n```\n\n----------------------------------------\n\nTITLE: Shopify OAuth Documentation Overview\nDESCRIPTION: Core documentation covering OAuth implementation options in Shopify applications, including token exchange, authorization code grant flow, and client credentials grant. Details prerequisites, setup steps, and best practices for each authentication method.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/guides/oauth.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Performing OAuth\n\n##### Table of contents\n- [Supported types of OAuth Flow](#supported-types-of-oauth)\n- [Token Exchange](#token-exchange)\n  - [Remix App](#remix-app)\n  - [Non-Remix App](#non-remix-app)\n  - [Detecting scope changes](#detecting-scope-changes)\n- [Authorization Code Grant Flow](#authorization-code-grant-flow)\n  - [Detecting scope changes](#detecting-scope-changes-1)\n- [After OAuth](#after-oauth)\n```\n\n----------------------------------------\n\nTITLE: Initializing DynamoDB Session Storage in Shopify App\nDESCRIPTION: Shows different ways to initialize the DynamoDB session storage adapter with various configuration options including custom table names, shop indexes, and AWS credentials.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/session-storage/shopify-app-session-storage-dynamodb/README.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {shopifyApp} from '@shopify/shopify-app-express';\nimport {DynamoDBSessionStorage} from '@shopify/shopify-app-session-storage-dynamodb';\n\n// You can use the default options\nconst storage = new DynamoDBSessionStorage();\n\n// or, if you want to use a different session table name and shop index name\nconst storage = new DynamoDBSessionStorage({ sessionTableName: 'my-session-table', shopIndexName: 'my-shop-index' });\n\n// or, if you want to use a different region or credentials\nconst storage = new DynamoDBSessionStorage({ config: { region: 'us-west-2', credentials: { ... } } });\n\nconst shopify = shopifyApp({\n  sessionStorage: storage,\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Storefront API Version Dynamically in TypeScript\nDESCRIPTION: Example of dynamically setting the Storefront API version for a specific request. This is useful when you need to use different API versions for different operations.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/api-clients/storefront-api-client/README.md#2025-04-11_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nconst productQuery = `\n  query ProductQuery($handle: String) {\n    product(handle: $handle) {\n      id\n      title\n      handle\n    }\n  }\n`;\n\nconst {data, errors, extensions} = await client.request(productQuery, {\n  variables: {\n    handle: 'sample-product',\n  },\n  apiVersion: '2023-07',\n});\n```\n\n----------------------------------------\n\nTITLE: AWS DynamoDB IAM Policy Configuration\nDESCRIPTION: Defines the required AWS IAM policy for DynamoDB access, specifying the necessary permissions for session storage operations.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/session-storage/shopify-app-session-storage-dynamodb/README.md#2025-04-11_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Sid\": \"Statement1\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"dynamodb:GetItem\",\n        \"dynamodb:DeleteItem\",\n        \"dynamodb:PutItem\",\n        \"dynamodb:Query\",\n        \"dynamodb:DescribeTable\"\n      ],\n      \"Resource\": [\"arn:aws:dynamodb:<region>:<account-id>:table/<table-name>\"]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Building and testing individual Shopify App JS packages\nDESCRIPTION: Commands for building and testing a specific package within the repository. Useful when focusing development on a single package.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/README.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd packages/<package>\npnpm build\npnpm test\n```\n\n----------------------------------------\n\nTITLE: Installing Shopify App Express Package with Yarn\nDESCRIPTION: Commands to create a project folder, initialize a new Yarn project, and install the @shopify/shopify-app-express package.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-app-express/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Create your project folder\nmkdir /my/project/path\n# Set up a new yarn project\nyarn init .\n# You can use your preferred Node package manager\nyarn add @shopify/shopify-app-express\n```\n\n----------------------------------------\n\nTITLE: Updating Capped Amount for Usage Billing Plan\nDESCRIPTION: Example of using the billing API to update the capped amount for a usage billing plan, specifying the subscription line item ID and new capped amount with currency.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/CHANGELOG.md#2025-04-11_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst response = await shopify.billing.updateUsageCappedAmount({\n  session,\n  subscriptionLineItemId: 'gid://shopify/AppSubscriptionLineItem/1234567890',\n  cappedAmount: {\n    amount: 100,\n    currencyCode: 'USD',\n  },\n});\nconsole.log(response);\n```\n\n----------------------------------------\n\nTITLE: Defining Prisma Schema for Session Storage in Shopify Apps\nDESCRIPTION: This Prisma schema defines the Session model required for implementing session storage in Shopify apps. It includes fields for session data such as shop, state, access token, and user information.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/session-storage/shopify-app-session-storage-prisma/README.md#2025-04-11_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Session {\n  id            String    @id\n  shop          String\n  state         String\n  isOnline      Boolean   @default(false)\n  scope         String?\n  expires       DateTime?\n  accessToken   String\n  userId        BigInt?\n  firstName     String?\n  lastName      String?\n  email         String?\n  accountOwner  Boolean?\n  locale        String?\n  collaborator  Boolean?\n  emailVerified Boolean?\n}\n```\n\n----------------------------------------\n\nTITLE: Context Initialization Migration\nDESCRIPTION: Example of migrating from Shopify.Context initialization to the new shopifyApi constructor pattern.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/migrating-to-v6.md#2025-04-11_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Shopify} from '@shopify/shopify-api';\nShopify.Context.initialize({ API_KEY: '...', ... });\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport {shopifyApi} from '@shopify/shopify-api';\nconst shopify = shopifyApi({ apiKey: '...', ... });\n```\n\n----------------------------------------\n\nTITLE: Running the Express.js App\nDESCRIPTION: Command to start the Express.js app using Node.js after configuration.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-app-express/README.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnode ./index.js\n```\n\n----------------------------------------\n\nTITLE: New GraphQL Client Request Format in TypeScript\nDESCRIPTION: Updated format for making GraphQL requests with simplified options structure and direct response access.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/migrating-to-v9.md#2025-04-11_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst client = new shopify.clients.Graphql({session});\nconst response = await client.request(QUERY, {\n  variables: {first: 1},\n  headers: {myHeader: '1'},\n  retries: 2,\n});\nconsole.log(response.data, response.extensions);\n```\n\n----------------------------------------\n\nTITLE: Installing @shopify/api-codegen-preset with NPM\nDESCRIPTION: Command for installing the @shopify/api-codegen-preset package using NPM package manager. This adds the package as a development dependency.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/api-clients/api-codegen-preset/README.md#2025-04-11_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm add --save-dev @shopify/api-codegen-preset\n```\n\n----------------------------------------\n\nTITLE: Configuring GraphQL Codegen with Preset Function\nDESCRIPTION: Example GraphQL configuration file using the preset function for a custom setup. This configuration demonstrates how to set up the low-level implementation for type generation with precise control over the configuration.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/api-clients/api-codegen-preset/README.md#2025-04-11_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport {ApiType, pluckConfig, preset} from '@shopify/api-codegen-preset';\n\nexport default {\n  // For syntax highlighting / auto-complete when writing operations\n  schema: 'https://shopify.dev/admin-graphql-direct-proxy/2025-01',\n  documents: ['./**/*.{js,ts,jsx,tsx}'],\n  projects: {\n    default: {\n      // For type extraction\n      schema: 'https://shopify.dev/admin-graphql-direct-proxy/2025-01',\n      documents: ['./**/*.{js,ts,jsx,tsx}'],\n      extensions: {\n        codegen: {\n          // Enables support for `#graphql` tags, as well as `/* GraphQL */`\n          pluckConfig,\n          generates: {\n            './types/admin.schema.json': {\n              plugins: ['introspection'],\n              config: {minify: true},\n            },\n            './types/admin.types.d.ts': {\n              plugins: ['typescript'],\n            },\n            './types/admin.generated.d.ts': {\n              preset,\n              presetConfig: {\n                apiType: ApiType.Admin,\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Using GraphQL Proxy in Shopify App JS\nDESCRIPTION: Demonstrates how to use the updated GraphQL proxy function, which now requires a session and raw body as arguments.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/migrating-to-v6.md#2025-04-11_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nconst sessionId = await shopify.session.getCurrentId({\n  isOnline: true,\n  rawRequest: req,\n  rawResponse: res,\n});\n\n// use sessionId to retrieve session from app's session storage\n// getSessionFromStorage() must be provided by application\nconst session = await getSessionFromStorage(sessionId);\n\nconst response = await shopify.clients.graphqlProxy({\n  session,\n  rawBody: req.rawBody, // From my app\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing MySQL Session Storage in Shopify App\nDESCRIPTION: Demonstrates three different ways to initialize MySQLSessionStorage for a Shopify app: using a connection string, URL object, or individual credentials. Includes optional connection pool configuration.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/session-storage/shopify-app-session-storage-mysql/README.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {shopifyApp} from '@shopify/shopify-app-express';\nimport {MySQLSessionStorage} from '@shopify/shopify-app-session-storage-mysql';\n\nconst shopify = shopifyApp({\n  sessionStorage: new MySQLSessionStorage(\n    'mysql://username:password@host/database',\n    {connectionPoolLimit: 10}, // optional\n  ),\n  // ...\n});\n\n// OR\n\nconst shopify = shopifyApp({\n  sessionStorage: new MySQLSessionStorage(\n    new URL('mysql://username:password@host/database'),\n    {connectionPoolLimit: 10}, // optional\n  ),\n  // ...\n});\n\n// OR\n\nconst shopify = shopifyApp({\n  sessionStorage: MySQLSessionStorage.withCredentials(\n    'host.com',\n    'thedatabase',\n    'username',\n    'password',\n    {connectionPoolLimit: 10}, // optional\n  ),\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling Online Access Tokens in Shopify App Configuration\nDESCRIPTION: This code snippet shows how to enable online access tokens in the shopifyApp configuration object within the shopify.server file.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/session-storage/shopify-app-session-storage-prisma/MIGRATION_V5.md#2025-04-11_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nconst shopify = shopifyApp({\n  apiKey: process.env.SHOPIFY_API_KEY,\n  sessionStorage: new PrismaSessionStorage(prisma),\n  distribution: AppDistribution.AppStore,\n+ useOnlineTokens: true,\n```\n\n----------------------------------------\n\nTITLE: Implementing Synchronous Logger Calls in TypeScript\nDESCRIPTION: Shows the transition from asynchronous to synchronous logger implementation. Demonstrates how to handle promises within custom logger functions and remove unnecessary await calls.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/migrating-to-v7.md#2025-04-11_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// BEFORE\nconst shopify = shopifyApi({\n  // ...\n  logger: {\n    log: async (severity, message) => {\n      try {\n        await MyService.log();\n\n        // After external call\n      } catch {\n        // Handle error\n      }\n    },\n  },\n});\nawait shopify.logger.info('My message');\n\n// AFTER\nconst shopify = shopifyApi({\n  // ...\n  logger: {\n    log: (severity, message) => {\n      MyService.log()\n        .then(() => {\n          // After external call\n        })\n        .catch(() => {\n          // Handle error\n        });\n    },\n  },\n});\nshopify.logger.info('My message');\n```\n\n----------------------------------------\n\nTITLE: GDPR Topics Import Update in TypeScript\nDESCRIPTION: Changes to import statement for GDPR/Privacy topics, replacing gdprTopics with privacyTopics to account for broader privacy regulations.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/migrating-to-v9.md#2025-04-11_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {gdprTopics} from '@shopify/shopify-api';\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport {privacyTopics} from '@shopify/shopify-api';\n```\n\n----------------------------------------\n\nTITLE: Changing to the web directory\nDESCRIPTION: Shell command to navigate to the web directory where most migration changes will occur.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-app-express/docs/reference/migrating-app-v6-api-lib-to-express-lib.md#2025-04-11_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncd web\n```\n\n----------------------------------------\n\nTITLE: Session Constructor Changes in TypeScript\nDESCRIPTION: Shows how the Session constructor was updated to use an object parameter instead of positional arguments, and demonstrates the removal of cloneSession method.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/migrating-to-v6.md#2025-04-11_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Session} from '@shopify/shopify-api';\nconst session = new Session({\n  id: 'session-id',\n  shop: 'shop.myshopify.com',\n  state: 'state1234',\n  isOnline: true,\n  accessToken: 'token',\n});\nconst clone = new Session({...session, id: 'newId'});\n```\n\n----------------------------------------\n\nTITLE: Accessing Response Headers from GraphQL Client\nDESCRIPTION: Example of accessing headers in responses from the GraphQL client, particularly useful in Remix apps to extract specific header values like X-Request-Id.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/CHANGELOG.md#2025-04-11_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst response = await admin.graphql(\n  ...\n\nconst responseJson = await response.json();\nconst responseHeaders = responseJson.headers\nconst xRequestID = responseHeaders? responseHeaders[\"X-Request-Id\"] : '';\nconsole.log(responseHeaders);\nconsole.log(xRequestID, 'x-request-id');\n```\n\n----------------------------------------\n\nTITLE: Initializing RedisSessionStorage with Connection URL\nDESCRIPTION: Creates a RedisSessionStorage instance using a Redis connection URL string within the shopifyApp configuration. The URL contains username, password, host, and database information.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/session-storage/shopify-app-session-storage-redis/README.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {shopifyApp} from '@shopify/shopify-app-express';\nimport {RedisSessionStorage} from '@shopify/shopify-app-session-storage-redis';\n\nconst shopify = shopifyApp({\n  sessionStorage: new RedisSessionStorage(\n    'redis://username:password@host/database',\n  ),\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing KVSessionStorage in Shopify App\nDESCRIPTION: Demonstrates two approaches for configuring KVSessionStorage: setting the namespace after initialization within a request handler, and passing the namespace directly during initialization using Miniflare for testing.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/session-storage/shopify-app-session-storage-kv/README.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {shopifyApp} from '@shopify/shopify-app-express';\nimport {KVSessionStorage} from '@shopify/shopify-app-session-storage-kv';\n\nconst shopify = shopifyApp({\n  sessionStorage: new KVSessionStorage(),\n  // ...\n});\n\nexport default {\n  async fetch(\n    request: Request,\n    env: Env,\n    ctx: ExecutionContext,\n  ): Promise<Response> {\n    shopify.config.sessionStorage.setNamespace(env.MY_KV_NAMESPACE);\n    // Handle request\n  },\n};\n\n// OR\n\nimport {Miniflare} from 'miniflare';\nconst mf = new Miniflare({\n  kvNamespaces: ['MY_KV_NAMESPACE'],\n});\nconst shopify = shopifyApp({\n  sessionStorage: new KVSessionStorage(\n    await mf.getKVNamespace('MY_KV_NAMESPACE'),\n  ),\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Including Storefront API Client via CDN in HTML\nDESCRIPTION: Example of loading the Storefront API Client from the unpkg CDN and initializing it in a browser environment.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/api-clients/storefront-api-client/README.md#2025-04-11_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n// The minified `0.2.3` version of the Storefront API Client\n<script src=\"https://unpkg.com/@shopify/storefront-api-client@0.2.3/dist/umd/storefront-api-client.min.js\"></script>\n\n<script>\n  const client = ShopifyStorefrontAPIClient.createStorefrontApiClient({...});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Loading GraphQL Client via CDN (HTML)\nDESCRIPTION: Example of loading the GraphQL client via a CDN using a script tag in HTML.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/api-clients/graphql-client/README.md#2025-04-11_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n// The minified `v0.9.3` version of the GraphQL API Client\n<script src=\"https://unpkg.com/@shopify/graphql-client@0.9.3/dist/umd/graphql-client.min.js\"></script>\n\n<script>\nconst client = ShopifyGraphQLClient.createGraphQLClient({...});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Creating an empty changeset for minor changes\nDESCRIPTION: Command to create an empty changeset for changes that don't require a CHANGELOG entry.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/RELEASING.md#2025-04-11_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\npnpm changeset --empty\n```\n\n----------------------------------------\n\nTITLE: Migrating Storefront Client API Usage - After Example\nDESCRIPTION: Updated example showing the new way of creating a Storefront client using session parameter.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/migrating-to-v8.md#2025-04-11_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\napp.get('/my-endpoint', async (req, res) => {\n  const sessionId = await shopify.session.getCurrentId({\n    isOnline: true,\n    rawRequest: req,\n    rawResponse: res,\n  });\n\n  // use sessionId to retrieve session from app's session storage\n  // getSessionFromStorage() must be provided by the application\n  const session = await getSessionFromStorage(sessionId);\n\n  const client = new shopify.clients.Storefront({\n    session,\n    apiVersion: ApiVersion.January23,\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Querying Product Data with Storefront API Client in TypeScript\nDESCRIPTION: Example of how to query for a product using the client.request method. It demonstrates constructing a GraphQL query with variables to fetch product details by handle.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/api-clients/storefront-api-client/README.md#2025-04-11_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst productQuery = `\n  query ProductQuery($handle: String) {\n    product(handle: $handle) {\n      id\n      title\n      handle\n    }\n  }\n`;\n\nconst {data, errors, extensions} = await client.request(productQuery, {\n  variables: {\n    handle: 'sample-product',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Storing Online Session Data in Redis for Shopify Apps\nDESCRIPTION: This snippet demonstrates the structure of an online session object that will be stored in Redis, including user information and access details.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/session-storage/shopify-app-session-storage-redis/CHANGELOG.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  id: 'online_session_id',\n  shop: 'online-session-shop',\n  state: 'online-session-state',\n  isOnline: true,\n  scope: 'online-session-scope',\n  accessToken: 'online-session-token',\n  expires: 2022-01-01T05:00:00.000Z,\n  onlineAccessInfo: {\n    associated_user: {\n      id: 1,\n      first_name: 'online-session-first-name'\n      last_name: 'online-session-last-name',\n      email: 'online-session-email',\n      locale: 'online-session-locale',\n      email_verified: false,\n      account_owner: true,\n      collaborator: false,\n    },\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Retry Attempts for Shopify Admin API Client Request\nDESCRIPTION: This snippet shows how to dynamically set the number of retry attempts for a specific request using the Shopify Admin API client. It sends a GET request with a custom retry count specified in the options.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/api-clients/admin-api-client/README.md#2025-04-11_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nconst response = await client.get('products/1234567890', {\n  retries: 2,\n});\n\nif (response.ok) {\n  const body = await response.json();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring GraphQL Types for Shopify Function Extensions\nDESCRIPTION: Configuration setup for enabling GraphQL autocompletion in Shopify Function Extensions, including dynamic extension discovery.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/api-clients/api-codegen-preset/README.md#2025-04-11_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport fs from \"fs\";\nimport { LATEST_API_VERSION } from \"@shopify/shopify-api\";\nimport { shopifyApiProject, ApiType } from \"@shopify/api-codegen-preset\";\nimport type { IGraphQLConfig } from \"graphql-config\";\n\nfunction getConfig() {\n  const config: IGraphQLConfig = {\n    projects: {\n      default: shopifyApiProject({\n        apiType: ApiType.Admin,\n        apiVersion: LATEST_API_VERSION,\n        documents: [\"./app/**/*.{js,ts,jsx,tsx}\", \"./app/.server/**/*.{js,ts,jsx,tsx}\"],\n        outputDir: \"./app/types\",\n      }),\n    },\n  };\n\n  let extensions: string[] = [];\n  try {\n    extensions = fs.readdirSync(\"./extensions\");\n  } catch {\n    // ignore if no extensions\n  }\n\n  for (const entry of extensions) {\n    const extensionPath = `./extensions/${entry}`;\n    const schema = `${extensionPath}/schema.graphql`;\n    if (!fs.existsSync(schema)) {\n      continue;\n    }\n    config.projects[entry] = {\n      schema,\n      documents: [`${extensionPath}/**/*.graphql`],\n    };\n  }\n\n  return config;\n}\n\nconst config = getConfig();\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Accessing User Information from Redis Session in Shopify Apps\nDESCRIPTION: This code snippet shows how to access user information stored in the Redis session object after authentication in a Shopify app.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/session-storage/shopify-app-session-storage-redis/CHANGELOG.md#2025-04-11_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst {admin, session} = await authenticate.admin(request);\n\nconsole.log('user id', session.onlineAccessInfo.associated_user.id);\nconsole.log('user email', session.onlineAccessInfo.associated_user.email);\nconsole.log(\n  'account owner',\n  session.onlineAccessInfo.associated_user.account_owner,\n);\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry for Initial Release 1.0.0\nDESCRIPTION: Documents the initial public release of the PostgreSQL session storage package\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/session-storage/shopify-app-session-storage-postgresql/CHANGELOG.md#2025-04-11_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n### Major Changes\\n- Initial public release of @shopify/shopify-app-session-storage-postgresql\n```\n\n----------------------------------------\n\nTITLE: Querying Shop Information with Storefront API in TypeScript\nDESCRIPTION: Example of a simple query to fetch shop information. This demonstrates the basic usage of the client.request method without any variables.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/api-clients/storefront-api-client/README.md#2025-04-11_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nconst shopQuery = `\n  query shop {\n    shop {\n      name\n      id\n    }\n  }\n`;\n\nconst {data, errors, extensions} = await client.request(shopQuery);\n```\n\n----------------------------------------\n\nTITLE: Defining Session Table Schema for SQLite in Drizzle ORM\nDESCRIPTION: Schema definition for an SQLite session table using Drizzle ORM. This defines the table structure with SQLite-specific data types for storing Shopify session information.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/session-storage/shopify-app-session-storage-drizzle/README.md#2025-04-11_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport {sqliteTable, text, integer, blob} from 'drizzle-orm/sqlite-core';\n\nexport const sessionTable = sqliteTable('session', {\n  id: text('id').primaryKey(),\n  shop: text('shop').notNull(),\n  state: text('state').notNull(),\n  isOnline: integer('isOnline', {mode: 'boolean'}).notNull().default(false),\n  scope: text('scope'),\n  expires: text('expires'),\n  accessToken: text('accessToken'),\n  userId: blob('userId', {mode: 'bigint'}),\n});\n```\n\n----------------------------------------\n\nTITLE: Updating product API interactions in Express server (JavaScript)\nDESCRIPTION: This snippet shows changes to product-related API endpoints, including updates to session management and the use of the new Shopify REST API methods.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/example-migration-v5-node-template-to-v6.md#2025-04-11_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\napp.get(\"/api/products/count\", async (req, res) => {\n-    const session = await Shopify.Utils.loadCurrentSession(\n-      req,\n-      res,\n-      app.get(\"use-online-tokens\")\n-    );\n+    const sessionId = await shopify.session.getCurrentId({\n+      rawRequest: req,\n+      rawResponse: res,\n+      isOnline: app.get(\"use-online-tokens\"),\n+    });\n+    const session = await sqliteSessionStorage.loadSession(sessionId);\n\n-    const { Product } = await import(\n-      `@shopify/shopify-api/dist/rest-resources/${Shopify.Context.API_VERSION}/index.js`\n-    );\n\n-    const countData = await Product.count({ session });\n+    const countData = await shopify.rest.Product.count({ session });\n     res.status(200).send(countData);\n   });\n\n   app.get(\"/api/products/create\", async (req, res) => {\n-    const session = await Shopify.Utils.loadCurrentSession(\n-      req,\n-      res,\n-      app.get(\"use-online-tokens\")\n-    );\n+    const sessionId = await shopify.session.getCurrentId({\n+      rawRequest: req,\n+      rawResponse: res,\n+      isOnline: app.get(\"use-online-tokens\"),\n+    });\n+\n+    const session = await sqliteSessionStorage.loadSession(sessionId);\n     let status = 200;\n     let error = null;\n\n     try {\n       await productCreator(session);\n     } catch (e) {\n       console.log(`Failed to process products/create: ${e.message}`);\n       status = 500;\n       error = e.message;\n     }\n     res.status(status).send({ success: status === 200, error });\n   });\n\n-  // All endpoints after this point will have access to a request.body\n-  // attribute, as a result of the express.json() middleware\n-  app.use(express.json());\n-\n   app.use((req, res, next) => {\n-    const shop = Shopify.Utils.sanitizeShop(req.query.shop);\n-    if (Shopify.Context.IS_EMBEDDED_APP && shop) {\n+    const shop = shopify.utils.sanitizeShop(req.query.shop);\n+    if (shopify.config.isEmbeddedApp && shop) {\n       res.setHeader(\n         \"Content-Security-Policy\",\n         `frame-ancestors https://${encodeURIComponent(\n           shop\n         )} https://admin.shopify.com;`\n       );\n     } else {\n       res.setHeader(\"Content-Security-Policy\", `frame-ancestors 'none';`);\n     }\n     next();\n   });\n```\n\n----------------------------------------\n\nTITLE: Running Codegen Commands\nDESCRIPTION: Commands to execute GraphQL type generation using different package managers.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/guides/graphql-types.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn graphql-codegen\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm run graphql-codegen\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm graphql-codegen\n```\n\n----------------------------------------\n\nTITLE: Installing Storefront API Client via pnpm\nDESCRIPTION: Command to install the Storefront API Client package using pnpm package manager.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/api-clients/storefront-api-client/README.md#2025-04-11_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\npnpm add @shopify/storefront-api-client\n```\n\n----------------------------------------\n\nTITLE: Using AuthScopes with Original Scopes Parameter\nDESCRIPTION: Example demonstrating how to use the AuthScopes class with the original scopes parameter to toggle between implied scopes and the original set of scopes.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/CHANGELOG.md#2025-04-11_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst scopes = new AuthScopes(['read_customers', 'write_customers', 'read_products', 'write_channels']);\nscopes.toArray() returns ['write_customers', 'read_products', 'write_channels']\nscopes.toArray(true) returns ['read_customers', 'write_customers', 'read_products', 'write_channels']\n```\n\n----------------------------------------\n\nTITLE: Sanitizing Shopify Shop Domain with TypeScript\nDESCRIPTION: Demonstrates how to use the sanitizeShop utility method to validate a shop domain from a request query parameter. The method accepts a shop string and a boolean flag to control error throwing behavior.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/reference/utils/sanitizeShop.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst shop = shopify.utils.sanitizeShop(req.query.shop, true);\n```\n\n----------------------------------------\n\nTITLE: Setting Admin API Version Dynamically in Shopify API Request\nDESCRIPTION: Shows how to dynamically set the Admin API version for a specific data fetch using the client.request() method. This allows for version-specific queries when needed.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/api-clients/admin-api-client/README.md#2025-04-11_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst productQuery = `\n  query ProductQuery($id: ID!) {\n    product(id: $id) {\n      id\n      title\n      handle\n    }\n  }\n`;\n\nconst {data, errors, extensions} = await client.request(productQuery, {\n  variables: {\n    id: 'gid://shopify/Product/7608002183224',\n  },\n  apiVersion: '2023-01',\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring GraphQL Codegen with shopifyApiTypes Helper\nDESCRIPTION: Example GraphQL configuration file using the shopifyApiTypes helper function. This function creates the appropriate generates steps for a project while allowing customization of the configuration.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/api-clients/api-codegen-preset/README.md#2025-04-11_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nimport {\n  ApiType,\n  pluckConfig,\n  shopifyApiTypes,\n} from '@shopify/api-codegen-preset';\n\nexport default {\n  // For syntax highlighting / auto-complete when writing operations\n  schema: 'https://shopify.dev/admin-graphql-direct-proxy/2025-01',\n  documents: ['./app/**/*.{js,ts,jsx,tsx}'],\n  projects: {\n    // To produce variable / return types for Admin API operations\n    schema: 'https://shopify.dev/admin-graphql-direct-proxy/2025-01',\n    documents: ['./app/**/*.{js,ts,jsx,tsx}'],\n    extensions: {\n      codegen: {\n        pluckConfig,\n        generates: shopifyApiTypes({\n          apiType: ApiType.Admin,\n          apiVersion: '2025-01',\n          documents: ['./app/**/*.{js,ts,jsx,tsx}'],\n          outputDir: './app/types',\n        }),\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Enabling Timestamps in Shopify API Logging (TypeScript)\nDESCRIPTION: Configuration example to enable timestamps in log messages when initializing the Shopify API.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/guides/logger.md#2025-04-11_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst shopify = shopifyApi({\n  // other config values\n  logger: {\n    timestamps: true,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Auth Redirection for Shopify API v6\nDESCRIPTION: This snippet updates the redirect-to-auth.js file to use the new shopify instance and handle authentication redirection.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/example-migration-v5-node-template-to-v6.md#2025-04-11_snippet_13\n\nLANGUAGE: diff\nCODE:\n```\n-import { Shopify } from \"@shopify/shopify-api\";\n+import shopify from \"../shopify.js\";\n\n export default async function redirectToAuth(req, res, app) {\n   if (!req.query.shop) {\n     res.status(500);\n     return res.send(\"No shop provided\");\n   }\n\n   if (req.query.embedded === \"1\") {\n     return clientSideRedirect(req, res);\n   }\n\n   return await serverSideRedirect(req, res, app);\n }\n\n function clientSideRedirect(req, res) {\n-  const shop = Shopify.Utils.sanitizeShop(req.query.shop);\n+  const shop = shopify.utils.sanitizeShop(req.query.shop);\n   const redirectUriParams = new URLSearchParams({\n     shop,\n     host: req.query.host,\n   }).toString();\n   const queryParams = new URLSearchParams({\n     ...req.query,\n     shop,\n-    redirectUri: `https://${Shopify.Context.HOST_NAME}/api/auth?${redirectUriParams}`,\n+    redirectUri: `https://${shopify.config.hostName}/api/auth?${redirectUriParams}`,\n   }).toString();\n\n   return res.redirect(`/exitiframe?${queryParams}`);\n }\n\n async function serverSideRedirect(req, res, app) {\n-  const redirectUrl = await Shopify.Auth.beginAuth(\n-    req,\n-    res,\n-    req.query.shop,\n-    \"/api/auth/callback\",\n-    app.get(\"use-online-tokens\")\n-  );\n-\n-  return res.redirect(redirectUrl);\n+  await shopify.auth.begin({\n+    rawRequest: req,\n+    rawResponse: res,\n+    shop: req.query.shop,\n+    callbackPath: \"/api/auth/callback\",\n+    isOnline: app.get(\"use-online-tokens\"),\n+  });\n }\n```\n\n----------------------------------------\n\nTITLE: Getting Offline Session ID in Shopify App JS\nDESCRIPTION: Demonstrates how to get an offline session ID for a specific shop using the new method in Shopify App JS.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/migrating-to-v6.md#2025-04-11_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nconst sessionId = await shopify.session.getOfflineId(\n  'my-shop.myshopify.com'\n);\n```\n\n----------------------------------------\n\nTITLE: Using safeCompare for Secure Value Comparison in TypeScript\nDESCRIPTION: Demonstrates how to use shopify.auth.safeCompare to check equality between different types of variables. The function returns true when values match exactly, false when they don't match, and throws a SafeCompareError when comparing mismatched types.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/reference/auth/safeCompare.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst stringArray1 = ['alice', 'bob', 'charlie'];\nconst stringArray2 = ['alice', 'bob', 'charlie'];\n\nconst stringArrayResult = shopify.auth.safeCompare(stringArray1, stringArray2); // true\n\nconst array1 = ['one fish', 'two fish'];\nconst array2 = ['red fish', 'blue fish'];\nconst arrayResult = shopify.auth.safeCompare(array1, array2); // false\n\nconst arg1 = 'hello';\nconst arg2 = ['world'];\n\nconst argResult = shopify.auth.safeCompare(arg1, arg2); // throws SafeCompareError due to argument type mismatch\n```\n\n----------------------------------------\n\nTITLE: Setting Request Retries Dynamically in TypeScript\nDESCRIPTION: Example of dynamically setting the number of retries for a specific request. This allows configuration of retry behavior on a per-request basis.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/api-clients/storefront-api-client/README.md#2025-04-11_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nconst productQuery = `\n  query ProductQuery($handle: String) {\n    product(handle: $handle) {\n      id\n      title\n      handle\n    }\n  }\n`;\n\nconst {data, errors, extensions} = await client.request(productQuery, {\n  variables: {\n    handle: 'sample-product',\n  },\n  retries: 2,\n});\n```\n\n----------------------------------------\n\nTITLE: Validating Fulfillment Service Requests in Express.js with TypeScript\nDESCRIPTION: Example demonstrating how to validate a Shopify fulfillment service request in an Express.js application. The code processes a POST request to '/fulfillment_order_notification', validates the request using shopify.fulfillmentService.validate, and returns an appropriate response based on validation results.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/reference/fulfillment-service/validate.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\napp.post('/fulfillment_order_notification', express.text({type: '*/*'}), async (req, res) => {\n  const result = await shopify.fulfillmentService.validate({\n    rawBody: req.body, // is a string\n    rawRequest: req,\n    rawResponse: res,\n  });\n\n  if (!result.valid) {\n    console.log(`Received invalid fulfillment service request: ${result.reason}`);\n    res.send(400);\n  }\n\n  res.send(200);\n});\n```\n\n----------------------------------------\n\nTITLE: Updating dependencies for Shopify Express library\nDESCRIPTION: Package management commands to remove old dependencies (@shopify/shopify-api, cookie-parser, express) and add the new @shopify/shopify-app-express package using yarn, npm, or pnpm.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-app-express/docs/reference/migrating-app-v6-api-lib-to-express-lib.md#2025-04-11_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nyarn remove @shopify/shopify-api cookie-parser express\nyarn add @shopify/shopify-app-express\n# or\nnpm uninstall @shopify/shopify-api cookie-parser express\nnpm install @shopify/shopify-app-express\n# or\npnpm uninstall @shopify/shopify-api cookie-parser express\npnpm install @shopify/shopify-app-express\n```\n\n----------------------------------------\n\nTITLE: Legacy GraphQL Client Query Format in TypeScript\nDESCRIPTION: Previous format for making GraphQL queries with extra headers and retry attempts.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/migrating-to-v9.md#2025-04-11_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst client = new shopify.clients.Graphql({session});\nconst response = await client.query({\n  data: {\n    query: QUERY,\n    variables: {first: 1},\n  },\n  extraHeaders: {myHeader: '1'},\n  tries: 1,\n});\nconsole.log(response.body.data, response.body.extensions);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Webhook Handlers for a Specific Topic in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the shopify.webhooks.getHandlers function to fetch configured handlers for a specific webhook topic. It returns an array of WebhookHandler objects, which can be used to access properties like deliveryMethod.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/reference/webhooks/getHandlers.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst handlers = shopify.webhooks.getHandlers('PRODUCTS_CREATE');\n// e.g. handlers[0].deliveryMethod\n```\n\n----------------------------------------\n\nTITLE: Accessing User Information from Shopify Session\nDESCRIPTION: This snippet demonstrates how to access the new user information fields from the Session object when using online access tokens in a Shopify app.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/session-storage/shopify-app-session-storage-prisma/MIGRATION_V5.md#2025-04-11_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nconst {admin, session} = await authenticate.admin(request);\n\nconsole.log('user id', session.onlineAccessInfo.associated_user.id);\nconsole.log('user email', session.onlineAccessInfo.associated_user.email);\nconsole.log(\n  'account owner',\n  session.onlineAccessInfo.associated_user.account_owner,\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing Storefront API Client with Public Access Token\nDESCRIPTION: Example of creating a Storefront API client instance using a public access token, specifying the store domain and API version.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/api-clients/storefront-api-client/README.md#2025-04-11_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport {createStorefrontApiClient} from '@shopify/storefront-api-client';\n\nconst client = createStorefrontApiClient({\n  storeDomain: 'http://your-shop-name.myshopify.com',\n  apiVersion: '2023-10',\n  publicAccessToken: 'your-storefront-public-access-token',\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing RedisSessionStorage with RedisClient Instance\nDESCRIPTION: Creates a RedisSessionStorage instance using a pre-configured RedisClient. This approach offers more control over the Redis client configuration but requires manual connection management.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/session-storage/shopify-app-session-storage-redis/README.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport {RedisClientOptions, createClient} from 'redis';\nconst client = createClient({url: 'redis://username:password@host/database'});\n\nconst shopify = shopifyApp({\n  sessionStorage: new RedisSessionStorage(client),\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Handling GraphQL Proxy Response in Express\nDESCRIPTION: Example of how to handle the response from the GraphQL Proxy function after a breaking change in version 3.0.0. The function no longer responds to the request directly.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/CHANGELOG.md#2025-04-11_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\napp.post('/graphql', async (req, res) => {\n  const response = await Shopify.Utils.graphqlProxy(req, res);\n  res.status(200).send(response.body);\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Shopify Type Usage - Before Example\nDESCRIPTION: Previous way of explicitly typing with Shopify type and rest resources.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/migrating-to-v8.md#2025-04-11_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {restResources} from '@shopify/shopify-api/rest/admin/2023-10';\n\nconst myVariable: Shopify<typeof restResources>;\n```\n\n----------------------------------------\n\nTITLE: Using isReady Method in Remix App with TypeScript\nDESCRIPTION: This code snippet shows how to use the isReady method of PrismaSessionStorage in a Remix app. The method checks if the session table is ready and can be used, which is useful for handling potential database connection issues.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/session-storage/shopify-app-session-storage-prisma/CHANGELOG.md#2025-04-11_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {sessionStorage} from '../shopify.server';\n// ...\nif (await sessionStorage.isReady()) {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing CSV-based Session Storage for Shopify Apps\nDESCRIPTION: A complete implementation of the SessionStorage interface that persists sessions to a CSV file. It includes methods for storing, loading, deleting sessions and finding sessions by shop. This implementation is provided as an example and is not recommended for production use.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/session-storage/shopify-app-session-storage/implementing-session-storage.md#2025-04-11_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport fs from 'fs';\nimport {Session} from '@shopify/shopify-api';\nimport {SessionStorage} from '@shopify/shopify-app-session-storage';\n\nexport class CsvSessionStorage implements SessionStorage {\n  constructor(private filename: string) {\n    super();\n\n    this.init();\n  }\n\n  public async storeSession(session: Session): Promise<boolean> {\n    try {\n      const lines = this.readLines();\n\n      let found = false;\n\n      // process each line\n      for (let i = 0; i < lines.length; i++) {\n        // split the line by comma into columns\n        const columns = lines[i].split(',');\n        // check if the id column matches (second column is value of 'id')\n        if (columns[1] === session.id) {\n          // if the session id already exists, update the line\n          lines[i] = session.toPropertyArray().join(',');\n          found = true;\n          break;\n        }\n      }\n\n      if (!found) {\n        // if the session id does not exist, add a new line\n        lines.push(session.toPropertyArray().join(','));\n      }\n\n      try {\n        this.writeLines(lines);\n        return true;\n      } catch (err) {\n        // error on write\n        return false;\n      }\n    } catch (err) {\n      // error on read\n      return false;\n    }\n  }\n\n  public async loadSession(id: string): Promise<Session | undefined> {\n    try {\n      const lines = this.readLines();\n\n      // process each line\n      for (const line of lines) {\n        // split the line by comma into columns\n        const columns = line.split(',');\n        // check if the id column matches (second column is value of 'id')\n        if (columns[1] === id) {\n          // if the session id already exists, convert to session and return\n          return Session.fromPropertyArray(\n            this.columnsToPropertyArray(columns),\n          );\n        }\n      }\n\n      return undefined;\n    } catch (err) {\n      // error on read\n      return undefined;\n    }\n  }\n\n  public async deleteSession(id: string): Promise<boolean> {\n    try {\n      const lines = this.readLines();\n\n      // process each line\n      for (let i = 0; i < lines.length; i++) {\n        // split the line by comma into columns\n        const columns = lines[i].split(',');\n        // check if the id column matches (second column is value of 'id')\n        if (columns[1] === id) {\n          // if the session id matches, remove the line\n          lines.splice(i, 1);\n          break;\n        }\n      }\n\n      try {\n        this.writeLines(lines);\n        return true;\n      } catch (err) {\n        // error on write\n        return false;\n      }\n    } catch (err) {\n      // error on read\n      return false;\n    }\n  }\n\n  public async deleteSessions(ids: string[]): Promise<boolean> {\n    try {\n      const lines = this.readLines();\n\n      // process each line\n      for (let i = 0; i < lines.length; i++) {\n        // split the line by comma into columns\n        const columns = lines[i].split(',');\n        // check if the id column matches (second column is value of 'id')\n        if (ids.includes(columns[1])) {\n          // if the session id already exists, remove the line\n          lines.splice(i, 1);\n        }\n      }\n\n      try {\n        this.writeLines(lines);\n        return true;\n      } catch (err) {\n        // error on write\n        return false;\n      }\n    } catch (err) {\n      // error on read\n      return false;\n    }\n  }\n\n  public async findSessionsByShop(shop: string): Promise<Session[]> {\n    try {\n      const lines = this.readLines();\n\n      const sessions: Session[] = [];\n\n      // process each line\n      for (const line of lines) {\n        // split the line by comma into columns\n        const columns = line.split(',');\n        // check if the shop column matches (fourth column is value of 'shop')\n        if (columns[3] === shop) {\n          // if the shop matches, convert to session and add to array\n          sessions.push(\n            Session.fromPropertyArray(this.columnsToPropertyArray(columns)),\n          );\n        }\n      }\n\n      return sessions;\n    } catch (err) {\n      // error on read\n      return [];\n    }\n  }\n\n  private init() {\n    if (!fs.existsSync(this.filename)) {\n      fs.writeFileSync(this.filename, '');\n    }\n  }\n\n  private readLines(): string[] {\n    // read contents of the file\n    const data = fs.readFileSync(this.filename, {\n      encoding: 'utf8',\n      flag: 'r',\n    });\n\n    // split the contents by new line\n    return data.split(/\\r?\\n/);\n  }\n\n  private writeLines(lines: string[]) {\n    // write the lines back to the file\n    fs.writeFileSync(this.filename, lines.join('\\n'), {\n      encoding: 'utf8',\n      flag: 'w',\n    });\n  }\n\n  private columnsToPropertyArray(columns: string[]): [string, string][] {\n    const propertyArray: [string, string][] = [];\n    for (let i = 0; i < columns.length; i += 2) {\n      propertyArray.push([columns[i], columns[i + 1]]);\n    }\n    return propertyArray;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Generated Types with GraphQL Queries\nDESCRIPTION: Example of using generated types with GraphQL queries in a TypeScript environment.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/api-clients/api-codegen-preset/README.md#2025-04-11_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport '../types/admin.generated.d.ts';\n\nconst response = await myGraphqlClient.graphql(\n  `#graphql\n  query getProducts($first: Int!) {\n    products(first: $first) {\n      edges {\n        node {\n          id\n          handle\n        }\n      }\n    }\n  }`,\n  {\n    variables: {\n      first: 1,\n    } as GetProductsQueryVariables,\n  },\n);\n\nconst data: GetProductsQuery = response.data;\n```\n\n----------------------------------------\n\nTITLE: Fetching with session token in POS UI extension\nDESCRIPTION: Demonstrates how to fetch data from a Remix endpoint using a session token in a POS UI extension.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-app-remix/CHANGELOG.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// extensions/pos-ui/src/Modal.jsx\nimport React, { useEffect, useState } from 'react'\n\nimport { Text, Screen, ScrollView, Navigator, reactExtension, useApi } from '@shopify/ui-extensions-react/point-of-sale'\n\nconst Modal = () => {\n  const api = useApi()\n  const {getSessionToken} = api.session;\n  const [token, setToken] = useState('');\n  const [result, setResult] = useState('');\n\n  useEffect(() => {\n    const fetchToken = async () => {\n      const newToken = await getSessionToken();\n      setToken(newToken);\n      await fetchWithToken(newToken);\n    };\n\n    async function fetchWithToken(token) {\n      const result = await fetch(\n        'https://decor-plasma-showtimes-beverages.trycloudflare.com/pos',\n        {\n          method: 'POST',\n          headers: {\n            'Authorization': `Bearer ${token}`,\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({}) // Add your POST data here\n        },\n      );\n      const resultJson = await result.json();\n      setResult(resultJson);\n    }\n\n   fetchToken();\n  }, []); // Empty dependency array means this runs once on mount\n\n  return (\n    <Navigator>\n      <Screen name=\"HelloWorld\" title=\"Hello World!\">\n        <ScrollView>\n          <Text>Welcome to the extension</Text>\n          <Text> The result is: {JSON.stringify(result)}</Text>\n        </ScrollView>\n      </Screen>\n    </Navigator>\n  )\n}\n\nexport default reactExtension('pos.home.modal.render', () => <Modal />);\n```\n\n----------------------------------------\n\nTITLE: Installing React Native URL Polyfill\nDESCRIPTION: Command to install the react-native-url-polyfill package to resolve URL validation errors in React Native projects.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/api-clients/storefront-api-client/README.md#2025-04-11_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\nnpm i react-native-url-polyfill\n```\n\n----------------------------------------\n\nTITLE: Legacy Runtime Adapter Implementation in TypeScript\nDESCRIPTION: Previous implementation of runtime adapter using NormalizedRequest and NormalizedResponse interfaces.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/migrating-to-v9.md#2025-04-11_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {setAbstractFetchFunc} from '@shopify/shopify-api/runtime';\n\nexport async function nodeFetch({\n  url,\n  method,\n  headers = {},\n  body,\n}: NormalizedRequest): Promise<NormalizedResponse> {\n  const resp = await fetch(url, {method, headers: flatHeaders(headers), body});\n  const respBody = await resp.text();\n  return {\n    statusCode: resp.status,\n    statusText: resp.statusText,\n    body: respBody,\n    headers: canonicalizeHeaders(Object.fromEntries(resp.headers.entries())),\n  };\n}\n\nsetAbstractFetchFunc(nodeFetch);\n```\n\n----------------------------------------\n\nTITLE: Updating API Version Configuration\nDESCRIPTION: Example showing how to update the API version when initializing the Shopify API client.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/migrating-to-v8.md#2025-04-11_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport {ApiVersion, shopifyApi} from '@shopify/shopify-api';\n\nconst shopify = shopifyApi({\n  // ...\n  apiVersion: ApiVersion.October23,\n});\n```\n\n----------------------------------------\n\nTITLE: Updating a Resource with Plain REST Client\nDESCRIPTION: Example showing how to update a product using the basic REST client, demonstrating the more verbose approach compared to REST resources.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/guides/rest-resources.md#2025-04-11_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// App must provide response types\ninterface ProductResponse {\n  product: {\n    id: number;\n    title: string;\n    // ...\n  };\n}\n\nconst sessionId = await shopify.session.getCurrentId({\n  rawRequest: req,\n  rawResponse: res,\n});\n\n// use sessionId to retrieve session from app's session storage\n// getSessionFromStorage() must be provided by application\nconst session = await getSessionFromStorage(sessionId);\n\nconst client = new shopify.clients.Rest({session});\n\n// The following line sends a HTTP GET request to this constructed URL:\n// https://${session.shop}/admin/api/${shopify.config.api_version}/products/7504536535062.json\nconst response = await client.get<ProductResponse>({\n  path: 'products/7504536535062',\n});\n\n// Apps needs to dig into the response body to find the object\nresponse.body.product.title = 'A new title';\n\n// The following sends a HTTP PUT request to this constructed URL...\n// https://${session.shop}/admin/api/${shopify.config.api_version}/products/${response.body.product.id}.json\n// ... with this body\n// {\"product\":{\"id\":response.body.product.id,\"title\":\"A new title\"}}\nawait client.put({\n  path: `products/${response.body.product.id}`,\n  data: response.body.product,\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Up Parallel Test Sessions in Shopify App\nDESCRIPTION: Shows how to create unique test sessions for parallel testing processes by incorporating a process identifier into the shop name.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/guides/test-helpers.md#2025-04-11_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n...\n\nconst session = await setUpValidSession(sessionStorage, {\n  shop: getShopValue(`test-shop-${process.env.TEST_PARALLEL_INDEX}`),\n});\n\n...\n```\n\n----------------------------------------\n\nTITLE: Importing release candidate API version in JavaScript\nDESCRIPTION: Demonstrates how to import the release candidate API version constant from the @shopify/shopify-api package.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-app-remix/CHANGELOG.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { RELEASE_CANDIDATE_API_VERSION } from \"@shopify/shopify-api\";\n```\n\n----------------------------------------\n\nTITLE: Package.json Script Configuration\nDESCRIPTION: Adding the graphql-codegen script to package.json for type generation.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/guides/graphql-types.md#2025-04-11_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"graphql-codegen\": \"graphql-codegen\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Logging in Shopify App JS\nDESCRIPTION: Shows how to set up custom logging in the new Shopify App JS configuration, replacing the old LOG_FILE option.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/migrating-to-v6.md#2025-04-11_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nconst shopify = new shopifyApi({\n  logger: {\n    log: async (_severity: string, message: string) => {\n      fs.appendFile('path/to/file.log', message);\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Updating product-creator.js to use Shopify Express instance\nDESCRIPTION: Code changes for product-creator.js to use the new shopify Express instance. The main change is updating the path to the shopify import and modifying how the GraphQL client is instantiated.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-app-express/docs/reference/migrating-app-v6-api-lib-to-express-lib.md#2025-04-11_snippet_6\n\nLANGUAGE: diff\nCODE:\n```\n import { GraphqlQueryError } from \"@shopify/shopify-api\";\n-import shopify from \"../shopify.js\";\n+import shopify from \"./shopify.js\";\n\n const ADJECTIVES = [ ...\n ];\n\n const NOUNS = [ ...\n ];\n\n export const DEFAULT_PRODUCTS_COUNT = 5;\n const CREATE_PRODUCTS_MUTATION = `\n   mutation populateProduct($input: ProductInput!) {\n     productCreate(input: $input) {\n       product {\n         id\n       }\n     }\n   }\n `;\n\n export default async function productCreator(\n   session,\n   count = DEFAULT_PRODUCTS_COUNT\n ) {\n-  const client = new shopify.clients.Graphql({ session });\n+  const client = new shopify.api.clients.Graphql({ session });\n\n   try {\n     for (let i = 0; i < count; i++) {\n       await client.query({\n         data: {\n           query: CREATE_PRODUCTS_MUTATION,\n           variables: {\n             input: {\n               title: `${randomTitle()}`,\n               variants: [{ price: randomPrice() }],\n             },\n           },\n         },\n       });\n     }\n   } catch (error) {\n     if (error instanceof GraphqlQueryError) {\n       throw new Error(\n         `${error.message}\\n${JSON.stringify(error.response, null, 2)}`\n       );\n     } else {\n       throw error;\n     }\n   }\n }\n\n function randomTitle() {\n   const adjective = ADJECTIVES[Math.floor(Math.random() * ADJECTIVES.length)];\n   const noun = NOUNS[Math.floor(Math.random() * NOUNS.length)];\n   return `${adjective} ${noun}`;\n }\n\n function randomPrice() {\n   return Math.round((Math.random() * 10 + Number.EPSILON) * 100) / 100;\n }\n```\n\n----------------------------------------\n\nTITLE: Creating SQLite Session Storage Configuration\nDESCRIPTION: Create a new file sqlite-session-storage.js to instantiate and export a SQLite session storage instance.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/example-migration-v5-node-template-to-v6.md#2025-04-11_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport {SQLiteSessionStorage} from '@shopify/shopify-app-session-storage-sqlite';\n\nconst dbPath = `${process.cwd()}/database.sqlite`;\n\nexport const sqliteSessionStorage = new SQLiteSessionStorage(dbPath);\n```\n\n----------------------------------------\n\nTITLE: Parameter Types for safeCompare Function in TypeScript\nDESCRIPTION: Shows the accepted parameter types for the shopify.auth.safeCompare function. The function can compare strings, objects with string values, string arrays, or number arrays, but both arguments must be of the same type.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/reference/auth/safeCompare.md#2025-04-11_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nstring\n{[key: string]: string}\nstring[]\nnumber[]\n```\n\n----------------------------------------\n\nTITLE: Displaying Shopify Webhooks Method Table in Markdown\nDESCRIPTION: A markdown table listing the methods available in the shopify.webhooks object, including their names and brief descriptions. This table provides an overview of the webhook-related functionalities offered by the Shopify App JS library.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/reference/webhooks/README.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Property                              | Description                                            | \n| ------------------------------------- | ------------------------------------------------------ |\n| [addHandlers](./addHandlers.md)       | Add handlers to the webhook registry.                  |\n| [getHandlers](./getHandlers.md)       | Get the configured handlers for the given topic.       |\n| [getTopicsAdded](./getTopicsAdded.md) | Fetch the topics that have been added to the registry. |\n| [process](./process.md)               | Validate and process a webhook request from Shopify.   |\n| [register](./register.md)             | Register the configured handlers with Shopify.         |\n| [validate](./validate.md)             | Validate a webhook request from Shopify.              |\n```\n\n----------------------------------------\n\nTITLE: Using Release Candidate API Version\nDESCRIPTION: Example of importing and using the release candidate API version constant from the Shopify API library, which points to the latest pre-release API version.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/CHANGELOG.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { RELEASE_CANDIDATE_API_VERSION } from \"@shopify/shopify-api\";\n```\n\n----------------------------------------\n\nTITLE: Converting Session to Property Array with User Data in TypeScript\nDESCRIPTION: This snippet demonstrates using the toPropertyArray() method with the returnUserData parameter set to true to convert a Session instance into an array of key-value pairs including the associated user data.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/guides/session-storage.md#2025-04-11_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst {session, headers} = shopify.auth.callback({\n  rawRequest: req,\n  rawResponse: res,\n});\n/*\n  If session has the following data content...\n  {\n    id: 'online_session_id',\n    shop: 'online-session-shop',\n    state: 'online-session-state',\n    isOnline: true,\n    scope: 'online-session-scope',\n    accessToken: 'online-session-token',\n    expires: 2022-01-01T05:00:00.000Z,  // Date object\n    onlineAccessInfo: {\n      expires_in: 1,\n      associated_user_scope: 'online-session-user-scope',\n      associated_user: {\n        id: 1,\n        first_name: 'online-session-first-name',\n        last_name: 'online-session-last-name',\n        email: 'online-session-email',\n        locale: 'online-session-locale',\n        email_verified: true,\n        account_owner: true,\n        collaborator: false,\n      },\n    }\n  }\n */\n\nconst sessionProperties = session.toPropertyArray(true);\n/*\n  ... then sessionProperties will have the following data...\n   [\n    ['id', 'online_session_id'],\n    ['shop', 'online-session-shop'],\n    ['state', 'online-session-state'],\n    ['isOnline', true],\n    ['scope', 'online-session-scope'],\n    ['accessToken', 'online-session-token'],\n    ['expires', 1641013200000],  // example = January 1, 2022, as number of milliseconds since Jan 1, 1970\n    ['userId', 1],\n    ['first_name', 'online-session-first-name'],\n    ['last_name', 'online-session-last-name'],\n    ['email', 'online-session-email'],\n    ['locale', 'online-session-locale'],\n    ['email_verified', false]\n    ['account_owner', true,]\n    ['collaborator', false],\n    ],\n */\n```\n\n----------------------------------------\n\nTITLE: Accessing User Information from Session in TypeScript\nDESCRIPTION: This snippet demonstrates how to access user information stored in the session object after authenticating an admin request. It shows how to retrieve the user ID, email, and account owner status.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/session-storage/shopify-app-session-storage-prisma/CHANGELOG.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst {admin, session} = await authenticate.admin(request);\n\nconsole.log('user id', session.onlineAccessInfo.associated_user.id);\nconsole.log('user email', session.onlineAccessInfo.associated_user.email);\nconsole.log(\n  'account owner',\n  session.onlineAccessInfo.associated_user.account_owner,\n);\n```\n\n----------------------------------------\n\nTITLE: Constructing Host App URL in JavaScript\nDESCRIPTION: New method added in version 4.1.0 to construct the host app URL. No code sample provided in the changelog.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/CHANGELOG.md#2025-04-11_snippet_13\n\n\n\n----------------------------------------\n\nTITLE: Updating Import Paths for Server-Side Functions in JavaScript\nDESCRIPTION: This snippet illustrates the changes in import statements for server-side functions and React components, separating them into distinct paths to improve module organization.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-app-remix/docs/MIGRATION_V3.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport '@shopify/shopify-app-remix/server/adapters/node';\nimport {shopifyApp} from '@shopify/shopify-app-remix/server';\nimport {AppProvider} from '@shopify/shopify-app-remix/react';\n```\n\n----------------------------------------\n\nTITLE: Updating Prisma Schema for Shopify App Session Storage\nDESCRIPTION: This snippet shows the updated Prisma schema for the Session model, including new fields for user information such as firstName, lastName, email, and account ownership details.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/session-storage/shopify-app-session-storage-prisma/MIGRATION_V5.md#2025-04-11_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Session {\n  id            String    @id\n  shop          String\n  state         String\n  isOnline      Boolean   @default(false)\n  scope         String?\n  expires       DateTime?\n  accessToken   String\n  userId        BigInt?\n  // New fields\n  firstName     String?\n  lastName      String?\n  email         String?\n  accountOwner  Boolean   @default(false)\n  locale        String?\n  collaborator  Boolean?  @default(false)\n  emailVerified Boolean?  @default(false)\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Storefront API Client via npm\nDESCRIPTION: Command to install the Storefront API Client package using npm package manager with the save flag.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/api-clients/storefront-api-client/README.md#2025-04-11_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @shopify/storefront-api-client --s\n```\n\n----------------------------------------\n\nTITLE: Defining LogSeverity Enum (TypeScript)\nDESCRIPTION: Definition of the LogSeverity enum used to specify different levels of logging severity in the Shopify API.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/guides/logger.md#2025-04-11_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport enum LogSeverity {\n  Error, // errors that prevent app from functioning properly, e.g., oauth errors\n  Warning, // notices that don't prevent app from functioning propertly, e.g., deprecation notices\n  Info, // information useful for monitoring library processing (default)\n  Debug, // information useful for debugging library processing\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Error Response Example in JSON\nDESCRIPTION: Example of a GraphQL error response from the Storefront API. It shows a field error with detailed information about the location and nature of the error in the query.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/api-clients/storefront-api-client/README.md#2025-04-11_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"errors\": {\n    \"networkStatusCode\": 200,\n    \"message\": \"An error occurred while fetching from the API. Review the `graphQLErrors` object for details.\",\n    \"graphQLErrors\": [\n      {\n        \"message\": \"Field 'testField' doesn't exist on type 'Product'\",\n        \"locations\": [\n          {\n            \"line\": 17,\n            \"column\": 3\n          }\n        ],\n        \"path\": [\"fragment ProductFragment\", \"testField\"],\n        \"extensions\": {\n          \"code\": \"undefinedField\",\n          \"typeName\": \"Product\",\n          \"fieldName\": \"testField\"\n        }\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry for Version 4.0.17\nDESCRIPTION: Documents a patch change updating directory path\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/session-storage/shopify-app-session-storage-postgresql/CHANGELOG.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\\n- 981c948: Update directory path\n```\n\n----------------------------------------\n\nTITLE: Creating Usage Record Parameters Table in Markdown\nDESCRIPTION: A markdown table listing the parameters for the createUsageRecord method, including their types, whether they're required, default values, and notes on usage.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/guides/billing.md#2025-04-11_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n| Parameter                | Type      | Required? | Default Value | Notes                                                                                                                        |\n| ------------------------ | --------- | :-------: | :-----------: | ---------------------------------------------------------------------------------------------------------------------------- |\n| `session`                | `Session` |    Yes    |       -       | The session to be used for this request                                                                                      |\n| `description`            | `string`  |    Yes    |       -       | The description of the usage record.                                                                                         |\n| `price.amount`           | `number`  |    Yes    |       -       | The amount and currency to be charged                                                                                        |\n| `price.currency`         | `string`  |    Yes    |       -       | The amount and currency to be charged                                                                                        |\n| `subscriptionLineItemId` | `string`  |    No     |       -       | The line item to create the usage record for. If no value is provided a record will be created on the active usage line item |\n| `idempotencyKey`         | `string`  |    No     |       -       | A unique key that can be passed to the request to prevent duplicate charges                                                  |\n| `isTest`                 | `Boolean` |    No     |       -       | Whether this is a test charge                                                                                                |\n```\n\n----------------------------------------\n\nTITLE: Handling Optional Scopes in Config Object\nDESCRIPTION: Shows how to update code that accesses scopes from the config object to handle cases where the scopes property might not be present, which is now possible with the managed install flow.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/migrating-to-v10.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Before\nconst scopes = shopify.config.scopes.toString();\n\n// After\nconst scopes = shopify.config.scopes ? shopify.config.scopes.toString() : '';\n```\n\n----------------------------------------\n\nTITLE: Installing @shopify/api-codegen-preset with PNPM\nDESCRIPTION: Command for installing the @shopify/api-codegen-preset package using PNPM package manager. This adds the package as a development dependency.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/api-clients/api-codegen-preset/README.md#2025-04-11_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\npnpm add -D @shopify/api-codegen-preset\n```\n\n----------------------------------------\n\nTITLE: CSV Session Format Example\nDESCRIPTION: Shows the format used in the CSV file storage implementation, where each line represents a session with property name/value pairs.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/session-storage/shopify-app-session-storage/implementing-session-storage.md#2025-04-11_snippet_0\n\nLANGUAGE: csv\nCODE:\n```\nid,this-is-a-session-id,shop,my-test-shop.myshopify.com,state,150801840581085,isOnline,true,...\n```\n\n----------------------------------------\n\nTITLE: Successful API Response Example in JSON\nDESCRIPTION: Example of a successful API response format when querying product data. The response includes the product data with ID and title, along with extensions containing context information for country and language.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/api-clients/storefront-api-client/README.md#2025-04-11_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"product\": {\n      \"id\": \"gid://shopify/Product/12345678912\",\n      \"title\": \"Sample product # 1\"\n    }\n  },\n  \"extensions\": {\n    \"context\": {\n      \"country\": \"US\",\n      \"language\": \"EN\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Prisma Migration for Schema Update\nDESCRIPTION: This command runs a Prisma migration to update the database schema with the new fields added to the Session model.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/session-storage/shopify-app-session-storage-prisma/MIGRATION_V5.md#2025-04-11_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpx prisma migrate dev\n```\n\n----------------------------------------\n\nTITLE: Updating Package.json Dependencies\nDESCRIPTION: Demonstrates the required changes to package.json to upgrade to Shopify API v6.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/migrating-to-v6.md#2025-04-11_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n   \"dependencies\": {\n-    \"@shopify/shopify-api\": \"^5.0.0\",\n+    \"@shopify/shopify-api\": \"^6.0.0\",\n```\n\n----------------------------------------\n\nTITLE: Package Installation Commands\nDESCRIPTION: Shell commands for installing the updated Shopify API package using different package managers.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/migrating-to-v6.md#2025-04-11_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nyarn install\n# or\nnpm install\n# or\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with Package Managers\nDESCRIPTION: Commands for installing required packages using different package managers (yarn, npm, pnpm). Installs api-codegen-preset and API clients.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/guides/graphql-types.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add --dev @shopify/api-codegen-preset\nyarn add @shopify/admin-api-client @shopify/storefront-api-client\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm add --save-dev @shopify/api-codegen-preset\nnpm add @shopify/admin-api-client @shopify/storefront-api-client\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm add --save-dev @shopify/api-codegen-preset\npnpm add @shopify/admin-api-client @shopify/storefront-api-client\n```\n\n----------------------------------------\n\nTITLE: Changing Directory to Web Folder\nDESCRIPTION: Change the current working directory to the 'web' folder where most changes will occur.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/example-migration-v5-node-template-to-v6.md#2025-04-11_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncd web\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry for Version 2.0.0\nDESCRIPTION: Major version changelog entry detailing Node.js version support changes and dependency updates\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/session-storage/shopify-app-session-storage-drizzle/CHANGELOG.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Major Changes\n\n- 6970109: Drop support for Node 16. This package is compatible with Node version >=18.2.0.\n\n### Minor Changes\n\n- 36e3c62: Add support for Node 22.\n\n### Patch Changes\n\n- ec6bdfc: Bump mysql2 from 3.9.2 to 3.9.7\n- Updated dependencies [d9f2601]\n- Updated dependencies [92b6772]\n- Updated dependencies [b5a4735]\n- Updated dependencies [a42efff]\n- Updated dependencies [9749f45]\n- Updated dependencies [36e3c62]\n- Updated dependencies [6970109]\n  - @shopify/shopify-api@11.0.0\n  - @shopify/shopify-app-session-storage@3.0.0\n```\n\n----------------------------------------\n\nTITLE: Generating Updated Prisma Types\nDESCRIPTION: This command generates updated TypeScript types to include the new fields added to the Session model.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/session-storage/shopify-app-session-storage-prisma/MIGRATION_V5.md#2025-04-11_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpx prisma generate\n```\n\n----------------------------------------\n\nTITLE: Setting up the Shopify App JS development environment\nDESCRIPTION: Commands to install dependencies and build packages in the shopify-app-js repository. This setup is required for developing and testing the session storage packages.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd shopify-app-js\npnpm install\npnpm build\n```\n\n----------------------------------------\n\nTITLE: Testing a local Shopify App JS package in a Remix app\nDESCRIPTION: Commands to build a package and install it locally in a Shopify app using the file protocol. This allows testing changes in an actual application environment.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/README.md#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd packages/<package>\npnpm build\n\ncd <app folder>\npnpm add \"file:<path to shopify-app-js>/packages/<package>\"\nshopify app dev\n```\n\n----------------------------------------\n\nTITLE: Running pnpm to update lock file during release\nDESCRIPTION: Command to update the lock file with pnpm before finalizing a release.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/RELEASING.md#2025-04-11_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Installing Shopify API Package with Package Manager\nDESCRIPTION: Command to install the @shopify/shopify-api package using a Node.js package manager like npm, yarn, or pnpm.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# You can use your preferred Node package manager\npnpm add @shopify/shopify-api\n```\n\n----------------------------------------\n\nTITLE: Custom Runtime Adapter Implementation in TypeScript\nDESCRIPTION: Example of implementing a custom runtime adapter when fetch implementation isn't available.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/migrating-to-v9.md#2025-04-11_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  AbstractFetchFunc,\n  setAbstractFetchFunc,\n} from '@shopify/shopify-api/runtime';\n\nconst convertFetch: AbstractFetchFunc = (url, init) => {\n  // Make the actual request\n\n  return new Response(/* ... */);\n};\n\nsetAbstractFetchFunc(convertFetch);\n```\n\n----------------------------------------\n\nTITLE: Checking out the changeset-release branch for release candidates\nDESCRIPTION: Command to checkout the changeset-release/release-candidate branch for preparing a release candidate.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/RELEASING.md#2025-04-11_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngit checkout changeset-release/release-candidate\n```\n\n----------------------------------------\n\nTITLE: Installing Storefront API Client via yarn\nDESCRIPTION: Command to install the Storefront API Client package using yarn package manager.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/api-clients/storefront-api-client/README.md#2025-04-11_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @shopify/storefront-api-client\n```\n\n----------------------------------------\n\nTITLE: Installing GraphQL Client via package managers (sh)\nDESCRIPTION: Commands for installing the @shopify/graphql-client package using yarn, npm, or pnpm.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/api-clients/graphql-client/README.md#2025-04-11_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @shopify/graphql-client\n```\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @shopify/graphql-client --s\n```\n\nLANGUAGE: sh\nCODE:\n```\npnpm add @shopify/graphql-client\n```\n\n----------------------------------------\n\nTITLE: Network Error Response Example in JSON\nDESCRIPTION: Example of a network error response format showing a 401 error code. This demonstrates how network-level errors are structured in the client response.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/api-clients/storefront-api-client/README.md#2025-04-11_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"errors\": {\n    \"networkStatusCode\": 401,\n    \"message\": \"\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing @shopify/api-codegen-preset with Yarn\nDESCRIPTION: Command for installing the @shopify/api-codegen-preset package using Yarn package manager. This adds the package as a development dependency.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/api-clients/api-codegen-preset/README.md#2025-04-11_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nyarn add --dev @shopify/api-codegen-preset\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry for Major Version 4.0.0\nDESCRIPTION: Documents major changes including dropping Node 16 support and adding Node 22 support\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/session-storage/shopify-app-session-storage-postgresql/CHANGELOG.md#2025-04-11_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### Major Changes\\n- 6970109: Drop support for Node 16. This package is compatible with Node version >=18.2.0.\\n\\n### Minor Changes\\n- 36e3c62: Add support for Node 22.\n```\n\n----------------------------------------\n\nTITLE: Migrating Storefront Client API Usage - Before Example\nDESCRIPTION: Example showing the previous way of creating a Storefront client using domain and storefrontAccessToken parameters.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/migrating-to-v8.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\napp.get('/my-endpoint', async (req, res) => {\n  const sessionId = await shopify.session.getCurrentId({\n    isOnline: true,\n    rawRequest: req,\n    rawResponse: res,\n  });\n\n  // use sessionId to retrieve session from app's session storage\n  // getSessionFromStorage() must be provided by application\n  const session = await getSessionFromStorage(sessionId);\n\n  const adminApiClient = new shopify.clients.Rest({session});\n  const storefrontTokenResponse = await adminApiClient.post({\n    path: 'storefront_access_tokens',\n    data: {\n      storefront_access_token: {\n        title: 'This is my test access token',\n      },\n    },\n  });\n\n  const storefrontAccessToken =\n    storefrontTokenResponse.body.storefront_access_token.access_token;\n\n  // For simplicity, this example creates a token every time it's called, but that is not ideal.\n  // You can fetch existing Storefront access tokens using the Admin API client.\n  const storefrontClient = new shopify.clients.Storefront({\n    domain: session.shop,\n    storefrontAccessToken,\n    apiVersion: ApiVersion.January23,\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Running tests for Shopify App JS packages\nDESCRIPTION: Command to run the test suite for all packages in the repository. This ensures any code changes don't introduce regressions.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/README.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm test\n```\n\n----------------------------------------\n\nTITLE: Creating a changeset for tracking changes\nDESCRIPTION: Command to create a new changeset for tracking changes and generating CHANGELOG entries.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/RELEASING.md#2025-04-11_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\npnpm changeset\n```\n\n----------------------------------------\n\nTITLE: Checking out the changeset-release branch for standard releases\nDESCRIPTION: Command to checkout the changeset-release/main branch for performing a standard release process.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/RELEASING.md#2025-04-11_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit checkout changeset-release/main\n```\n\n----------------------------------------\n\nTITLE: Updating app_installations.js for v6 Session Storage\nDESCRIPTION: Update the app_installations.js file to use the new sqliteSessionStorage instance instead of Shopify.Context.SESSION_STORAGE.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/example-migration-v5-node-template-to-v6.md#2025-04-11_snippet_7\n\nLANGUAGE: diff\nCODE:\n```\n-import { Shopify } from \"@shopify/shopify-api\";\n+import { sqliteSessionStorage } from \"./sqlite-session-storage.js\";\n\n export const AppInstallations = {\n   includes: async function (shopDomain) {\n-    const shopSessions = await Shopify.Context.SESSION_STORAGE.findSessionsByShop(shopDomain);\n+    const shopSessions = await sqliteSessionStorage.findSessionsByShop(shopDomain);\n\n     if (shopSessions.length > 0) {\n       for (const session of shopSessions) {\n         if (session.accessToken) return true;\n       }\n     }\n\n     return false;\n   },\n\n   delete: async function (shopDomain) {\n-    const shopSessions = await Shopify.Context.SESSION_STORAGE.findSessionsByShop(shopDomain);\n+    const shopSessions = await sqliteSessionStorage.findSessionsByShop(shopDomain);\n     if (shopSessions.length > 0) {\n-      await Shopify.Context.SESSION_STORAGE.deleteSessions(shopSessions.map((session) => session.id));\n+      await sqliteSessionStorage.deleteSessions(shopSessions.map((session) => session.id)); }\n   },\n };\n```\n\n----------------------------------------\n\nTITLE: Creating a practice app with Shopify CLI for migration testing\nDESCRIPTION: Command-line instructions for creating a new app using Shopify CLI that can be used to practice the migration process. The commands show how to create an app using yarn, npm, or pnpm with a specific template.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-app-express/docs/reference/migrating-app-v6-api-lib-to-express-lib.md#2025-04-11_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nyarn create @shopify/app --template https://github.com/Shopify/shopify-app-template-node#cli_three_api_six\n# or\nnpm init @shopify/app@latest -- --template https://github.com/Shopify/shopify-app-template-node#cli_three_api_six\n# or\npnpm create @shopify/app@latest --template https://github.com/Shopify/shopify-app-template-node#cli_three_api_six\n```\n\n----------------------------------------\n\nTITLE: Defining Session Table Schema for PostgreSQL in Drizzle ORM\nDESCRIPTION: Schema definition for a PostgreSQL session table using Drizzle ORM. This table stores Shopify session data including shop information, tokens, and expiration details.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/session-storage/shopify-app-session-storage-drizzle/README.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {bigint, boolean, pgTable, text, timestamp} from 'drizzle-orm/pg-core';\n\nexport const sessionTable = pgTable('session', {\n  id: text('id').primaryKey(),\n  shop: text('shop').notNull(),\n  state: text('state').notNull(),\n  isOnline: boolean('isOnline').default(false).notNull(),\n  scope: text('scope'),\n  expires: timestamp('expires', {mode: 'date'}),\n  accessToken: text('accessToken'),\n  userId: bigint('userId', {mode: 'number'}),\n});\n```\n\n----------------------------------------\n\nTITLE: Version History Documentation in Markdown\nDESCRIPTION: Detailed changelog entries documenting version updates, including major changes like dropping Node 16 support, adding Node 22 support, and various patch updates and dependency changes.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/api-clients/admin-api-client/CHANGELOG.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @shopify/admin-api-client\n\n## 1.0.8\n\n### Patch Changes\n\n- 981c948: Update directory path\n- Updated dependencies [981c948]\n  - @shopify/graphql-client@1.3.2\n```\n\n----------------------------------------\n\nTITLE: Using client.fetch() to Get Shopify API Data\nDESCRIPTION: Shows an alternative method to fetch data from the Shopify Admin API using the client.fetch() method. This approach provides more control over the response handling.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/api-clients/admin-api-client/README.md#2025-04-11_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst shopQuery = `\n  query shop {\n    shop {\n      name\n    }\n  }\n`;\n\nconst response = await client.fetch(shopQuery);\n\nif (response.ok) {\n  const {errors, data, extensions} = await response.json();\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Public Authentication for Checkout Extensions in TypeScript\nDESCRIPTION: This snippet demonstrates how to update the public authentication method for checkout extensions from the deprecated authenticate.public() to the new authenticate.public.checkout() method.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-app-remix/docs/MIGRATION_V3.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function loader({request}: LoaderFunctionArgs) {\n  await authenticate.public.checkout(request);\n\n  return null;\n}\n```\n\n----------------------------------------\n\nTITLE: Authenticating POS UI extension requests in Remix\nDESCRIPTION: Shows how to use the new authenticate.public.pos function to authenticate POS UI extension requests in a Remix route handler.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-app-remix/CHANGELOG.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n//app/routes/pos.jsx\nimport { authenticate } from \"../shopify.server\";\nexport const action = async ({ request }) => {\n\n        const {sessionToken } = await authenticate.public.pos(request);\n        console.log(sessionToken, \"sessionToken\");\n\n    return \"hello world\"\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Shopify Type Usage - After Example\nDESCRIPTION: New way of explicitly typing with Shopify type using ConfigParams and rest resources.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/shopify-api/docs/migrating-to-v8.md#2025-04-11_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  restResources,\n  ConfigParams,\n} from '@shopify/shopify-api/rest/admin/2023-10';\n\nconst myVariable: Shopify<ConfigParams, typeof restResources>;\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry for Initial Release 1.0.0\nDESCRIPTION: Initial release changelog entry describing the package purpose and implementation details\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/packages/apps/session-storage/shopify-app-session-storage-drizzle/CHANGELOG.md#2025-04-11_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### Major Changes\n\n- 4053132: Initial release of @shopify/shopify-app-session-storage-drizzle\n\nThis package implements the `SessionStorage` interface that works with an instance of [Drizzle](https://orm.drizzle.team).\n\nRefer to the [README](./README.md) for more information.\n```\n\n----------------------------------------\n\nTITLE: Entering pre-release mode for release candidates\nDESCRIPTION: Command to put changesets into pre-release mode with an 'rc' tag for creating release candidates.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/RELEASING.md#2025-04-11_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npnpm changeset pre enter rc\n```\n\n----------------------------------------\n\nTITLE: Exiting pre-release mode before merging to main\nDESCRIPTION: Command to exit pre-release mode in changesets before merging release candidate branch to main.\nSOURCE: https://github.com/Shopify/shopify-app-js/blob/main/RELEASING.md#2025-04-11_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\npnpm changeset pre exit\n```"
  }
]