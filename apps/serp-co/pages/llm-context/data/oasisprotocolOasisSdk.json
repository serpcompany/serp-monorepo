[
  {
    "owner": "oasisprotocol",
    "repo": "oasis-sdk",
    "content": "TITLE: Installing Rust using rustup script\nDESCRIPTION: Command to download and execute the rustup installation script which installs the latest stable version of Rust on your system.\nSOURCE: https://github.com/oasisprotocol/oasis-sdk/blob/main/docs/runtime/prerequisites.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh\n```\n\n----------------------------------------\n\nTITLE: Contract Deployment Commands\nDESCRIPTION: Series of commands to configure the Oasis CLI, upload the contract binary, instantiate the contract, and make contract calls.\nSOURCE: https://github.com/oasisprotocol/oasis-sdk/blob/main/docs/contract/hello-world.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\noasis network set-default testnet\noasis paratime set-default testnet cipher\noasis contract upload hello_world.wasm\noasis contract instantiate CODEID '{instantiate: {initial_counter: 42}}'\noasis contract call INSTANCEID '{say_hello: {who: \"me\"}}'\n```\n\n----------------------------------------\n\nTITLE: Installing Oasis Protocol Client SDK\nDESCRIPTION: Command to install the Oasis Protocol client SDK via npm package manager.\nSOURCE: https://github.com/oasisprotocol/oasis-sdk/blob/main/client-sdk/ts-web/core/docs/getting-started.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @oasisprotocol/client\n```\n\n----------------------------------------\n\nTITLE: Installing Specific Go Version for Oasis Client SDK\nDESCRIPTION: Commands to install a specific Go version (1.20.2) using the Go version manager. This is required if you want to use the Go Client SDK and your system's default Go version is outdated.\nSOURCE: https://github.com/oasisprotocol/oasis-sdk/blob/main/docs/contract/prerequisites.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngo get golang.org/dl/go1.20.2\ngo1.20.5 downloa2\n```\n\n----------------------------------------\n\nTITLE: Implementing a Confidential Hello World Smart Contract in Rust\nDESCRIPTION: Demonstrates how to create a confidential smart contract using ConfidentialCell for encrypted storage on the Oasis blockchain. The contract implements initialization with an initial counter value and a say_hello method that increments the counter and returns a greeting message.\nSOURCE: https://github.com/oasisprotocol/oasis-sdk/blob/main/docs/contract/confidential-smart-contract.md#2025-04-16_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n// This contract shows how to use a confidential storage cell.\n\n#[macro_use]\nextern crate oasis_contract_sdk as sdk;\n\nuse sdk::types::{Address, CallFormat};\nuse sdk::storage::cell::ConfidentialCell;\n\n/// Example contract.\nstruct HelloWorld {\n    counter: ConfidentialCell<u64>,\n}\n\n/// The contract's result type.\ntype Result<T> = std::result::Result<T, Error>;\n\n/// Expected errors.\n#[derive(Debug, thiserror::Error, sdk::Error)]\nenum Error {\n    #[error(\"forbidden: expected confidential callformat\")]\n    Forbidden,\n\n    #[error(transparent)]\n    Sdk(#[from] sdk::Error),\n}\n\n/// The contract's events.\n#[derive(Debug, cbor::Encode)]\nenum Event {\n    /// Emitted when someone says \"hello\".\n    Hello { from: Address, to: String },\n}\n\nimpl HelloWorld {\n    fn new(ctx: &mut sdk::Context) -> Self {\n        Self {\n            counter: ConfidentialCell::new(ctx, b\"counter\"),\n        }\n    }\n\n    fn ensure_confidential(&self, ctx: &sdk::Context) -> Result<()> {\n        match ctx.call_format() {\n            CallFormat::Plain => Err(Error::Forbidden),\n            CallFormat::Encrypted { .. } => Ok(()),\n        }\n    }\n\n    pub fn instantiate(\n        ctx: &mut sdk::Context,\n        initial_counter: u64,\n    ) -> Result<()> {\n        self.ensure_confidential(ctx)?;\n        self.counter\n            .set(ctx.confidential_store(), initial_counter)?;\n        Ok(())\n    }\n\n    pub fn say_hello(\n        &self,\n        ctx: &mut sdk::Context,\n        who: String,\n    ) -> Result<String> {\n        self.ensure_confidential(ctx)?;\n        let counter = self.counter.get(ctx.confidential_store())?;\n        let next_counter = counter + 1;\n        self.counter.set(ctx.confidential_store(), next_counter)?;\n\n        // This is emitted as public even though it came from the\n        // confidential store and the transaction is encrypted.\n        ctx.emit_event(Event::Hello {\n            from: ctx.sender(),\n            to: who.clone(),\n        });\n\n        Ok(format!(\"hello, {}! (counter: {})\", who, next_counter))\n    }\n}\n\n// Register the contract's entrypoint.\ncontract_sdk::create_contract!(HelloWorld);\n```\n\n----------------------------------------\n\nTITLE: Implementing Runtime Entry Point in main.rs\nDESCRIPTION: Boilerplate code that serves as the entry point for the runtime binary, allowing it to be loaded by an Oasis Node.\nSOURCE: https://github.com/oasisprotocol/oasis-sdk/blob/main/docs/runtime/minimal-runtime.md#2025-04-16_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\n//! Minimal runtime.\n\nfn main() {\n    ::minimal_runtime::Runtime::start();\n}\n```\n\n----------------------------------------\n\nTITLE: Cargo Configuration for Hello World Contract\nDESCRIPTION: Defines project dependencies and build configuration for the smart contract including the Oasis Contract SDK and WebAssembly target optimizations.\nSOURCE: https://github.com/oasisprotocol/oasis-sdk/blob/main/docs/contract/hello-world.md#2025-04-16_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[package]\nname = \"hello-world\"\nversion = \"0.1.0\"\nedition = \"2021\"\n\n[lib]\ncrate-type = [\"cdylib\"]\n\n[dependencies]\noasis-contract-sdk = { git = \"https://github.com/oasisprotocol/oasis-sdk\", tag = \"v0.3.0\" }\noasis-contract-sdk-storage = { git = \"https://github.com/oasisprotocol/oasis-sdk\", tag = \"v0.3.0\" }\n\n[profile.release]\nopt-level = \"s\"\nlto = true\ncodegen-units = 1\nstrip = true\n```\n\n----------------------------------------\n\nTITLE: Hello World Smart Contract Implementation\nDESCRIPTION: Implements a basic smart contract with a counter and hello world functionality using the Oasis Contract SDK. Includes contract storage, method definitions and unit tests.\nSOURCE: https://github.com/oasisprotocol/oasis-sdk/blob/main/docs/contract/hello-world.md#2025-04-16_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\n//! A simple hello world smart contract.\nuse oasis_contract_sdk as sdk;\nuse oasis_contract_sdk_storage::cell::PublicCell;\n\n/// Contract state.\npub struct HelloWorld {\n    counter: PublicCell<u64>,\n}\n\n/// Contract instantiation arguments.\n#[derive(Debug, Default, cbor::Encode, cbor::Decode)]\npub struct InstantiateArgs {\n    pub initial_counter: u64,\n}\n\n/// Arguments for the say_hello method.\n#[derive(Debug, Default, cbor::Encode, cbor::Decode)]\npub struct SayHelloArgs {\n    pub who: String,\n}\n\n/// Return value from the say_hello method.\n#[derive(Debug, Default, cbor::Encode, cbor::Decode)]\npub struct SayHelloResult {\n    pub greeting: String,\n    pub counter: u64,\n}\n\nimpl HelloWorld {\n    pub fn instantiate(ctx: &mut sdk::Context, args: InstantiateArgs) -> Self {\n        Self {\n            counter: PublicCell::new(ctx.public(), args.initial_counter),\n        }\n    }\n\n    pub fn say_hello(&mut self, _ctx: &mut sdk::Context, args: SayHelloArgs) -> SayHelloResult {\n        // Increment counter.\n        let mut counter = self.counter.get();\n        counter += 1;\n        self.counter.set(counter);\n\n        SayHelloResult {\n            greeting: format!(\"Hello {}!\", args.who),\n            counter,\n        }\n    }\n}\n\n// Register the contract.\nsdk::contract!(HelloWorld);\n\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    #[test]\n    fn test_hello() {\n        let mut ctx = sdk::testing::MockContext::new();\n        let mut contract = HelloWorld::instantiate(\n            &mut ctx,\n            InstantiateArgs {\n                initial_counter: 42,\n            },\n        );\n\n        let result = contract.say_hello(\n            &mut ctx,\n            SayHelloArgs {\n                who: \"me\".to_string(),\n            },\n        );\n        assert_eq!(result.greeting, \"Hello me!\");\n        assert_eq!(result.counter, 43);\n\n        let result = contract.say_hello(\n            &mut ctx,\n            SayHelloArgs {\n                who: \"world\".to_string(),\n            },\n        );\n        assert_eq!(result.greeting, \"Hello world!\");\n        assert_eq!(result.counter, 44);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Instantiating OAS-20 Token Contracts in Rust\nDESCRIPTION: Defines the structure for instantiating an OAS-20 token contract with parameters for name, symbol, decimals, initial balances, and optional minting configuration.\nSOURCE: https://github.com/oasisprotocol/oasis-sdk/blob/main/contract-sdk/specs/token/oas20/README.md#2025-04-16_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n#[cbor(rename = \"instantiate\")]\nInstantiate(TokenInstantiation),\n\n/// OAS20 token instantiation information.\n#[derive(Debug, Default, Clone, PartialEq, Eq, cbor::Decode, cbor::Encode)]\npub struct TokenInstantiation {\n    /// Name of the token.\n    pub name: String,\n    /// Token symbol.\n    pub symbol: String,\n    /// Number of decimals.\n    pub decimals: u8,\n    /// Initial balances of the token.\n    #[cbor(optional, default, skip_serializing_if = \"Vec::is_empty\")]\n    pub initial_balances: Vec<InitialBalance>,\n    /// Information about minting in case the token supports minting.\n    #[cbor(optional)]\n    pub minting: Option<MintingInformation>,\n}\n```\n\n----------------------------------------\n\nTITLE: Instantiating a Confidential Smart Contract with Encryption\nDESCRIPTION: Command for instantiating a confidential smart contract with encryption and appropriate gas limit. The --encrypted flag ensures end-to-end encryption for the transaction, while the gas limit needs to be explicitly set for confidential transactions.\nSOURCE: https://github.com/oasisprotocol/oasis-sdk/blob/main/docs/contract/confidential-smart-contract.md#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\noasis contract instantiate CODEID '{instantiate: {initial_counter: 42}}' --encrypted --gas-limit 400000\n```\n\n----------------------------------------\n\nTITLE: Implementing the Runtime Trait in Rust for Oasis SDK\nDESCRIPTION: This code demonstrates how to implement the Runtime trait for an Oasis SDK runtime. It shows version definition using cargo metadata, module composition with core and accounts modules, and genesis state configuration for runtime initialization.\nSOURCE: https://github.com/oasisprotocol/oasis-sdk/blob/main/docs/runtime/modules.md#2025-04-16_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nimpl sdk::Runtime for Runtime {\n    // Use the crate version from Cargo.toml as the runtime version.\n    const VERSION: Version = sdk::version_from_cargo!();\n\n    // Module that provides the core API.\n    type Core = modules::core::Module;\n    // Module that provides the accounts API.\n    type Accounts = modules::accounts::Module;\n\n    // Define the modules that the runtime will be composed of.\n    type Modules = (modules::core::Module, modules::accounts::Module);\n\n    // Define the genesis (initial) state for all of the specified modules. This\n    // state is used when the runtime is first initialized.\n    //\n    // The return value is a tuple of states in the same order as the modules\n    // are defined above.\n    fn genesis_state() -> <Self::Modules as sdk::module::MigrationHandler>::Genesis {\n        (\n            // Core module.\n            modules::core::Genesis {\n                // ... snip ...\n            },\n            // Accounts module.\n            modules::accounts::Genesis {\n                // ... snip ...\n            },\n        )\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Docker Container for ROFL App Development\nDESCRIPTION: Command for launching a Docker container with the ROFL development environment. It mounts the local source directory to the container's /src path and specifies the Linux/AMD64 platform, which is essential for macOS users.\nSOURCE: https://github.com/oasisprotocol/oasis-sdk/blob/main/docs/rofl/prerequisites.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --platform linux/amd64 --volume ./rofl-oracle:/src -it ghcr.io/oasisprotocol/rofl-dev\n```\n\n----------------------------------------\n\nTITLE: Implementing Runtime Definition in lib.rs\nDESCRIPTION: Core runtime implementation that defines the state transition function and initial state with test accounts. It uses the accounts module from the SDK to enable transfers.\nSOURCE: https://github.com/oasisprotocol/oasis-sdk/blob/main/docs/runtime/minimal-runtime.md#2025-04-16_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\n//! A minimal runtime that allows transfers.\n\nuse oasis_runtime_sdk::{modules, types::token::Denomination, Version};\n\n/// The minimal runtime.\npub struct Runtime;\n\nimpl oasis_runtime_sdk::Runtime for Runtime {\n    /// Version of the runtime.\n    const VERSION: Version = Version::new(0, 0, 0);\n\n    /// Modules that the runtime will use.\n    type Modules = (modules::accounts::Module,);\n\n    /// Return genesis state for all modules.\n    fn genesis_state() -> <Self::Modules as modules::Module>::Genesis {\n        // Create some initial test accounts with test keys.\n        (\n            modules::accounts::Genesis {\n                balances: {\n                    // Use the test keys \"alice\" and \"bob\".\n                    let mut balances = BTreeMap::new();\n                    let alice_addr = oasis_runtime_sdk::testing::keys::alice::address();\n                    let bob_addr = oasis_runtime_sdk::testing::keys::bob::address();\n\n                    // Initialize some initial balances for the test accounts.\n                    let denominations = vec![Denomination::NATIVE];\n                    for denom in denominations {\n                        // Alice initially has 100 tokens.\n                        let alice_balance = balances\n                            .entry(alice_addr.clone())\n                            .or_insert_with(BTreeMap::new);\n                        alice_balance.insert(denom.clone(), 100_000_000_000u128.into());\n                        // Bob initially has 10 tokens.\n                        let bob_balance = balances\n                            .entry(bob_addr.clone())\n                            .or_insert_with(BTreeMap::new);\n                        bob_balance.insert(denom, 10_000_000_000u128.into());\n                    }\n\n                    balances\n                },\n                total_supplies: {\n                    // Set the total supply for the token to the sum of all accounts.\n                    let mut total_supplies = BTreeMap::new();\n                    total_supplies.insert(Denomination::NATIVE, 110_000_000_000u128.into());\n                    total_supplies\n                },\n                ..Default::default()\n            },\n        )\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Dockerizing the Telegram bot\nDESCRIPTION: Creates a Dockerfile to containerize the Python Telegram bot.\nSOURCE: https://github.com/oasisprotocol/oasis-sdk/blob/main/docs/rofl/quickstart.mdx#2025-04-16_snippet_3\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM python:alpine3.17\n\nWORKDIR /bot\nCOPY ./bot.py ./requirements.txt /bot\nRUN pip install -r requirements.txt\n\nENTRYPOINT [\"python\", \"bot.py\"]\n```\n\n----------------------------------------\n\nTITLE: Initializing Oasis Protocol Client Connection\nDESCRIPTION: Code demonstrating how to import and initialize a connection to an Oasis node using the client SDK. Supports both mainnet and testnet connections.\nSOURCE: https://github.com/oasisprotocol/oasis-sdk/blob/main/client-sdk/ts-web/core/docs/getting-started.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as oasis from '@oasisprotocol/client';\n\n// Use https://testnet.grpc.oasis.io to interact with the testnet instead.\nconst nic = new oasis.client.NodeInternal('https://grpc.oasis.io');\n```\n\n----------------------------------------\n\nTITLE: Building and running the Docker container\nDESCRIPTION: Builds the Docker image and runs the container using Docker Compose.\nSOURCE: https://github.com/oasisprotocol/oasis-sdk/blob/main/docs/rofl/quickstart.mdx#2025-04-16_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ndocker compose build\ndocker compose up\n```\n\n----------------------------------------\n\nTITLE: Checking Local Network Status\nDESCRIPTION: Command to verify the status of the local network and runtime readiness using the Oasis CLI.\nSOURCE: https://github.com/oasisprotocol/oasis-sdk/blob/main/docs/runtime/minimal-runtime.md#2025-04-16_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\noasis network status --network localhost\n```\n\n----------------------------------------\n\nTITLE: Configuring Node Runtime Paths for ROFL App Deployment in YAML\nDESCRIPTION: YAML configuration for adding ROFL app bundle paths to an Oasis node. This configuration needs to be added to the node's configuration file, specifying paths to both the Sapphire ParaTime runtime and the custom ROFL app bundle.\nSOURCE: https://github.com/oasisprotocol/oasis-sdk/blob/main/docs/rofl/deployment.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nruntime:\n  # ... other options omitted ...\n  paths:\n    - /node/runtime/sapphire-paratime.orc\n    - /node/runtime/myapp.default.orc\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Compiling ROFL Oracle Contract\nDESCRIPTION: Installs necessary npm packages and compiles the ROFL Oracle smart contract using Hardhat.\nSOURCE: https://github.com/oasisprotocol/oasis-sdk/blob/main/examples/runtime-sdk/rofl-oracle/oracle/README.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\nnpx hardhat compile\n```\n\n----------------------------------------\n\nTITLE: Uploading a Confidential Smart Contract to Oasis Blockchain\nDESCRIPTION: Command for uploading the compiled WebAssembly contract to the Oasis blockchain. The upload process is the same for both confidential and non-confidential contracts.\nSOURCE: https://github.com/oasisprotocol/oasis-sdk/blob/main/docs/contract/confidential-smart-contract.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\noasis contract upload hello_world.wasm\n```\n\n----------------------------------------\n\nTITLE: Go Client Implementation for Oasis Runtime Testing\nDESCRIPTION: Complete Go implementation for testing a minimal runtime. The client connects to a local node, queries account balances, performs a transfer, and verifies the final balances.\nSOURCE: https://github.com/oasisprotocol/oasis-sdk/blob/main/docs/runtime/minimal-runtime.md#2025-04-16_snippet_18\n\nLANGUAGE: go\nCODE:\n```\n// File referenced but not directly included in the content\n```\n\n----------------------------------------\n\nTITLE: Setting Allowances for OAS-20 Tokens in Rust\nDESCRIPTION: Defines the allow request structure that enables an account holder to set or modify an allowance for a beneficiary address.\nSOURCE: https://github.com/oasisprotocol/oasis-sdk/blob/main/contract-sdk/specs/token/oas20/README.md#2025-04-16_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\n#[cbor(rename = \"allow\")]\nAllow {\n    beneficiary: Address,\n    negative: bool,\n    amount_change: u128,\n},\n```\n\n----------------------------------------\n\nTITLE: Installing Rust via rustup for Oasis SDK Development\nDESCRIPTION: Command to install Rust using rustup, which is the recommended method for Oasis SDK development. This downloads and runs the rustup installer script that will set up the latest stable Rust version on your system.\nSOURCE: https://github.com/oasisprotocol/oasis-sdk/blob/main/docs/contract/prerequisites.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh\n```\n\n----------------------------------------\n\nTITLE: Updating and deploying ROFL app\nDESCRIPTION: Updates the ROFL app with secrets and signatures, then deploys it to a Testnet node.\nSOURCE: https://github.com/oasisprotocol/oasis-sdk/blob/main/docs/rofl/quickstart.mdx#2025-04-16_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\noasis rofl update\noasis rofl deploy\n```\n\n----------------------------------------\n\nTITLE: Generating RSA Key for SGX Signing\nDESCRIPTION: Commands to generate a 3072-bit RSA key with exponent 3 for SGX enclave signing, along with extracting the public key.\nSOURCE: https://github.com/oasisprotocol/oasis-sdk/blob/main/docs/runtime/reproducibility.md#2025-04-16_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nopenssl genrsa -3 3072 > private.pem\nopenssl rsa -in private.pem -pubout > public.pem\n```\n\n----------------------------------------\n\nTITLE: Transferring Tokens Between Accounts\nDESCRIPTION: Command to transfer 0.1 TEST from Alice to Bob's account in the local network.\nSOURCE: https://github.com/oasisprotocol/oasis-sdk/blob/main/docs/runtime/minimal-runtime.md#2025-04-16_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\noasis account transfer 0.1 test:bob --network localhost --account test:alice \n```\n\n----------------------------------------\n\nTITLE: Initializing and creating ROFL app\nDESCRIPTION: Generates the initial ROFL manifest and registers a new ROFL app on Sapphire Testnet.\nSOURCE: https://github.com/oasisprotocol/oasis-sdk/blob/main/docs/rofl/quickstart.mdx#2025-04-16_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\noasis rofl init\noasis rofl create\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Paratime Bundle with ORC\nDESCRIPTION: Command to initialize a basic paratime bundle with an ELF binary using the ORC tool.\nSOURCE: https://github.com/oasisprotocol/oasis-sdk/blob/main/docs/runtime/reproducibility.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\norc init path/to/elf-binary\n```\n\n----------------------------------------\n\nTITLE: Token Transfer Process and Output\nDESCRIPTION: Example of the interactive token transfer process showing transaction details, confirmation, and successful execution.\nSOURCE: https://github.com/oasisprotocol/oasis-sdk/blob/main/docs/runtime/minimal-runtime.md#2025-04-16_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nUnlock your account.\n? Passphrase: \nYou are about to sign the following transaction:\n{\n  \"v\": 1,\n  \"call\": {\n    \"method\": \"accounts.Transfer\",\n    \"body\": \"omJ0b1UAyND0Wds45cwxynfmbSxEVty+tQJmYW1vdW50gkQF9eEAQA==\"\n  },\n  \"ai\": {\n    \"si\": [\n      {\n        \"address_spec\": {\n          \"signature\": {\n            \"ed25519\": \"NcPzNW3YU2T+ugNUtUWtoQnRvbOL9dYSaBfbjHLP1pE=\"\n          }\n        },\n        \"nonce\": 0\n      }\n    ],\n    \"fee\": {\n      \"amount\": {\n        \"Amount\": \"0\",\n        \"Denomination\": \"\"\n      },\n      \"gas\": 100\n    }\n  }\n}\n\nAccount:  test:alice\nNetwork:  localhost (localhost)\nParatime: minimal (minimal)\n? Sign this transaction? Yes\n(In case you are using a hardware-based signer you may need to confirm on device.)\nBroadcasting transaction...\nTransaction included in block successfully.\nRound:            14\nTransaction hash: 03a73bd08fb23472673ea45938b0871edd9ecd2cd02b3061d49c0906a772348a\nExecution successful.\n```\n\n----------------------------------------\n\nTITLE: Transferring OAS-20 Tokens in Rust\nDESCRIPTION: Defines the transfer request structure that moves a specified amount of tokens from the caller to the recipient address.\nSOURCE: https://github.com/oasisprotocol/oasis-sdk/blob/main/contract-sdk/specs/token/oas20/README.md#2025-04-16_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n#[cbor(rename = \"transfer\")]\nTransfer { to: Address, amount: u128 },\n```\n\n----------------------------------------\n\nTITLE: Setting SGX Signature in an Existing Bundle\nDESCRIPTION: Command to add or update an SGX signature in an existing paratime bundle using the ORC tool.\nSOURCE: https://github.com/oasisprotocol/oasis-sdk/blob/main/docs/runtime/reproducibility.md#2025-04-16_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\norc sgx-set-sig bundle.orc path/to/binary.sig\n```\n\n----------------------------------------\n\nTITLE: Creating Initial Project Structure with Cargo\nDESCRIPTION: Command to initialize a new Rust project for the minimal runtime using Cargo.\nSOURCE: https://github.com/oasisprotocol/oasis-sdk/blob/main/docs/runtime/minimal-runtime.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo init minimal-runtime\n```\n\n----------------------------------------\n\nTITLE: Querying Token Information in OAS-20 Contract\nDESCRIPTION: Defines the query and response structures for retrieving general token information including name, symbol, decimals, and total supply.\nSOURCE: https://github.com/oasisprotocol/oasis-sdk/blob/main/contract-sdk/specs/token/oas20/README.md#2025-04-16_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\n#[cbor(rename = \"token_information\")]\nTokenInformation,\n```\n\nLANGUAGE: rust\nCODE:\n```\n#[cbor(rename = \"token_information\")]\nTokenInformation { token_information: TokenInformation },\n\n/// OAS20 token information.\n#[derive(Debug, Default, Clone, PartialEq, Eq, cbor::Decode, cbor::Encode)]\npub struct TokenInformation {\n    /// Name of the token.\n    pub name: String,\n    /// Token symbol.\n    pub symbol: String,\n    /// Number of decimals.\n    pub decimals: u8,\n    /// Total supply of the token.\n    pub total_supply: u128,\n    /// Information about minting in case the token supports minting.\n    #[cbor(optional)]\n    pub minting: Option<MintingInformation>,\n}\n\n/// Token minting information.\n#[derive(Debug, Default, Clone, PartialEq, Eq, cbor::Decode, cbor::Encode)]\npub struct MintingInformation {\n    /// Caller address which is allowed to mint new tokens.\n    pub minter: Address,\n    /// Cap on the total supply of the token.\n    #[cbor(optional)]\n    pub cap: Option<u128>,\n}\n```\n\n----------------------------------------\n\nTITLE: Attaching Signed SIGSTRUCT to Paratime Bundle\nDESCRIPTION: Command to attach a signed SGX SIGSTRUCT to a paratime bundle using the ORC tool and the corresponding public key.\nSOURCE: https://github.com/oasisprotocol/oasis-sdk/blob/main/docs/runtime/reproducibility.md#2025-04-16_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\norc sgx-set-sig bundle.orc sigstruct.sha256.sig public.pem\n```\n\n----------------------------------------\n\nTITLE: Building a Confidential Smart Contract with Cargo\nDESCRIPTION: Command for building a confidential smart contract targeting WebAssembly. The contract is compiled to Wasm format for deployment on the Oasis blockchain.\nSOURCE: https://github.com/oasisprotocol/oasis-sdk/blob/main/docs/contract/confidential-smart-contract.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncargo build --target wasm32-unknown-unknown --release\n```\n\n----------------------------------------\n\nTITLE: Building Contract for Deployment\nDESCRIPTION: Command to build the smart contract targeting WebAssembly for deployment on the Oasis network.\nSOURCE: https://github.com/oasisprotocol/oasis-sdk/blob/main/docs/contract/hello-world.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncargo build --target wasm32-unknown-unknown --release\n```\n\n----------------------------------------\n\nTITLE: Calling a Confidential Smart Contract Method\nDESCRIPTION: Command for calling a method on a confidential smart contract with encryption. The call uses the --encrypted flag to ensure end-to-end encryption and specifies an appropriate gas limit for the confidential transaction.\nSOURCE: https://github.com/oasisprotocol/oasis-sdk/blob/main/docs/contract/confidential-smart-contract.md#2025-04-16_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\noasis contract call INSTANCEID '{say_hello: {who: \"me\"}}' --encrypted --gas-limit 400000\n```\n\n----------------------------------------\n\nTITLE: Defining Project Dependencies in Cargo.toml\nDESCRIPTION: Cargo manifest file specifying the dependencies required for the minimal runtime, including the Oasis Runtime SDK.\nSOURCE: https://github.com/oasisprotocol/oasis-sdk/blob/main/docs/runtime/minimal-runtime.md#2025-04-16_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n[package]\nname = \"minimal-runtime\"\nversion = \"0.1.0\"\nedition = \"2021\"\n\n[dependencies]\noasis-runtime-sdk = { git = \"https://github.com/oasisprotocol/oasis-sdk\", branch = \"main\" }\noasis-runtime-sdk-macros = { git = \"https://github.com/oasisprotocol/oasis-sdk\", branch = \"main\" }\n```\n\n----------------------------------------\n\nTITLE: Defining Resource Requirements for ROFL Apps in YAML\nDESCRIPTION: This YAML snippet demonstrates how to specify resource requirements for a ROFL app in the app manifest file. It includes memory allocation, CPU count, and storage configuration with type and size.\nSOURCE: https://github.com/oasisprotocol/oasis-sdk/blob/main/docs/rofl/resources.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nresources:\n  memory: 512\n  cpus: 1\n  storage:\n    kind: disk-persistent\n    size: 512\n```\n\n----------------------------------------\n\nTITLE: Key Generation Request for ROFL REST API (JSON)\nDESCRIPTION: Example JSON request for the key generation endpoint of the ROFL REST API. It specifies the key ID and the kind of key to be generated.\nSOURCE: https://github.com/oasisprotocol/oasis-sdk/blob/main/docs/rofl/features.md#2025-04-16_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"key_id\": \"demo key\",\n  \"kind\": \"secp256k1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Local Network to Oasis CLI\nDESCRIPTION: Commands to add a local network to the Oasis CLI configuration, specifying the socket path, description, token symbol, and decimal places.\nSOURCE: https://github.com/oasisprotocol/oasis-sdk/blob/main/docs/runtime/minimal-runtime.md#2025-04-16_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\noasis network add-local localhost unix:/tmp/minimal-runtime-test/net-runner/network/client-0/internal.sock\n? Description: localhost\n? Denomination symbol: TEST\n? Denomination decimal places: 9\n```\n\n----------------------------------------\n\nTITLE: Encrypting and storing Telegram token on-chain\nDESCRIPTION: Securely stores the Telegram API token on-chain for use in the ROFL environment.\nSOURCE: https://github.com/oasisprotocol/oasis-sdk/blob/main/docs/rofl/quickstart.mdx#2025-04-16_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\necho -n \"$TOKEN\" | oasis rofl secret set TOKEN -\n```\n\n----------------------------------------\n\nTITLE: Running Fuzzers in Oasis SDK EVM Module\nDESCRIPTION: Command for running fuzzers in the Oasis SDK EVM module using honggfuzz. It demonstrates how to set build arguments via environment variables to include necessary feature flags.\nSOURCE: https://github.com/oasisprotocol/oasis-sdk/blob/main/runtime-sdk/modules/evm/fuzz/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nHFUZZ_BUILD_ARGS=\"--features=test\" cargo hfuzz run fuzz-precompile\n```\n\n----------------------------------------\n\nTITLE: Adding Runtime to Wallet\nDESCRIPTION: Command to add the minimal runtime to the Oasis CLI wallet using its ID and configuring denomination details.\nSOURCE: https://github.com/oasisprotocol/oasis-sdk/blob/main/docs/runtime/minimal-runtime.md#2025-04-16_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\noasis paratime add localhost minimal 8000000000000000000000000000000000000000000000000000000000000000\n```\n\n----------------------------------------\n\nTITLE: Authenticated Transaction Submission Request for ROFL REST API (JSON)\nDESCRIPTION: Example JSON request for the authenticated transaction submission endpoint of the ROFL REST API. It includes transaction details for an Ethereum-compatible call.\nSOURCE: https://github.com/oasisprotocol/oasis-sdk/blob/main/docs/rofl/features.md#2025-04-16_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"tx\": {\n    \"kind\": \"eth\",\n    \"data\": {\n      \"gas_limit\": 200000,\n      \"to\": \"1234845aaB7b6CD88c7fAd9E9E1cf07638805b20\",\n      \"value\": 0,\n      \"data\": \"dae1ee1f00000000000000000000000000000000000000000000000000002695a9e649b2\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Account Balance\nDESCRIPTION: Command to display the balance of Alice's test account in the local network and runtime.\nSOURCE: https://github.com/oasisprotocol/oasis-sdk/blob/main/docs/runtime/minimal-runtime.md#2025-04-16_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\noasis account show test:alice --network localhost\n```\n\n----------------------------------------\n\nTITLE: Building the Runtime with Cargo\nDESCRIPTION: Command to build the runtime binary using Cargo.\nSOURCE: https://github.com/oasisprotocol/oasis-sdk/blob/main/docs/runtime/minimal-runtime.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncargo build\n```\n\n----------------------------------------\n\nTITLE: Deploying ROFL Oracle Contract\nDESCRIPTION: Deploys the ROFL Oracle contract to the specified network using Hardhat, with the ROFL App ID as a parameter.\nSOURCE: https://github.com/oasisprotocol/oasis-sdk/blob/main/examples/runtime-sdk/rofl-oracle/oracle/README.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpx hardhat deploy rofl1qqn9xndja7e2pnxhttktmecvwzz0yqwxsquqyxdf --network sapphire-localnet\n```\n\n----------------------------------------\n\nTITLE: Go Client Test Output\nDESCRIPTION: Example output from running the Go client test, showing initial balances, transfer execution, and final balances after the transaction.\nSOURCE: https://github.com/oasisprotocol/oasis-sdk/blob/main/docs/runtime/minimal-runtime.md#2025-04-16_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\nlevel=info ts=2022-06-28T14:08:02.834961397Z caller=test.go:81 module=minimal-runtime-client msg=\"connecting to local node\"\nlevel=info ts=2022-06-28T14:08:02.836059713Z caller=test.go:103 module=minimal-runtime-client msg=\"dumping initial balances\"\n=== Balances for oasis1qrec770vrek0a9a5lcrv0zvt22504k68svq7kzve ===\n<native>: 1000000000\n\n=== Balances for oasis1qrydpazemvuwtnp3efm7vmfvg3tde044qg6cxwzx ===\n<native>: 2000000000\n\nlevel=info ts=2022-06-28T14:08:02.864348758Z caller=test.go:117 module=minimal-runtime-client msg=\"performing transfer\" nonce=0\nlevel=info ts=2022-06-28T14:08:18.515842571Z caller=test.go:146 module=minimal-runtime-client msg=\"dumping final balances\"\n=== Balances for oasis1qrec770vrek0a9a5lcrv0zvt22504k68svq7kzve ===\n<native>: 999999990\n\n=== Balances for oasis1qrydpazemvuwtnp3efm7vmfvg3tde044qg6cxwzx ===\n<native>: 2000000010\n\n```\n\n----------------------------------------\n\nTITLE: Installing Required Utilities for Containerized ROFL Apps\nDESCRIPTION: Commands to install necessary system utilities for building containerized ROFL app bundles, including squashfs-tools for filesystem creation, cryptsetup-bin for encryption, and qemu-utils for virtualization.\nSOURCE: https://github.com/oasisprotocol/oasis-sdk/blob/main/docs/rofl/prerequisites.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt install squashfs-tools cryptsetup-bin qemu-utils\n```\n\n----------------------------------------\n\nTITLE: Querying ROFL Oracle Data\nDESCRIPTION: Fetches the oracle data stored on-chain from the deployed contract using its address and the specified network.\nSOURCE: https://github.com/oasisprotocol/oasis-sdk/blob/main/examples/runtime-sdk/rofl-oracle/oracle/README.md#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpx hardhat oracle-query 0x5FbDB2315678afecb367f032d93F642f64180aa3 --network sapphire-localnet\n```\n\n----------------------------------------\n\nTITLE: Defining OAS-20 Withdrew Event in Rust\nDESCRIPTION: Defines the event structure emitted upon successful withdrawal of tokens using an allowance.\nSOURCE: https://github.com/oasisprotocol/oasis-sdk/blob/main/contract-sdk/specs/token/oas20/README.md#2025-04-16_snippet_15\n\nLANGUAGE: rust\nCODE:\n```\n#[sdk_event(code = 6)]\nOas20Withdrew {\n    from: Address,\n    to: Address,\n    amount: u128,\n},\n```\n\n----------------------------------------\n\nTITLE: Running Contract Unit Tests\nDESCRIPTION: Commands for running the smart contract unit tests with required CPU instruction flags.\nSOURCE: https://github.com/oasisprotocol/oasis-sdk/blob/main/docs/contract/hello-world.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nRUSTFLAGS=\"-C target-feature=+aes,+ssse3\" cargo test\n```\n\n----------------------------------------\n\nTITLE: Deploying Runtime in Local Test Environment\nDESCRIPTION: Command to deploy the built runtime in a local development network using oasis-net-runner, which sets up a small network of local nodes.\nSOURCE: https://github.com/oasisprotocol/oasis-sdk/blob/main/docs/runtime/minimal-runtime.md#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nrm -rf /tmp/minimal-runtime-test; mkdir -p /tmp/minimal-runtime-test\n${OASIS_CORE_PATH}/oasis-net-runner \\\n    --fixture.default.node.binary ${OASIS_CORE_PATH}/oasis-node \\\n    --fixture.default.runtime.binary target/debug/minimal-runtime \\\n    --fixture.default.runtime.loader ${OASIS_CORE_PATH}/oasis-core-runtime-loader \\\n    --fixture.default.runtime.provisioner unconfined \\\n    --fixture.default.keymanager.binary '' \\\n    --basedir /tmp/minimal-runtime-test \\\n    --basedir.no_temp_dir\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Document\nDESCRIPTION: Changelog entries documenting version history from v0.1.0-alpha1 to v1.0.0, highlighting key changes in browser extension functionality, TypeScript declarations, and dependency updates.\nSOURCE: https://github.com/oasisprotocol/oasis-sdk/blob/main/client-sdk/ts-web/ext-utils/docs/changelog.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Changelog\n\n## v1.0.0\n\nSpotlight change:\n\n- Our dependencies on `@oasisprotocol/client` and `@oasisprotocol/client-rt`\n  are bumped to v1.0.0.\n  Happy v1!\n\n## v0.1.1-alpha.1\n\nSpotlight change:\n\n- We've tightened up some TypeScript declarations to work better in strict\n  mode.\n\n## v0.1.0-alpha3\n\nSpotlight change:\n\n- The keys change event now delivers the new keys list as part of the event.\n\n## v0.1.0-alpha2\n\nSpotlight change:\n\n- The extension can now inform the web content when its list of keys changes.\n\n## v0.1.0-alpha1\n\nSpotlight change:\n\n- Here's our recommendation for communicating with a browser extension.\n```\n\n----------------------------------------\n\nTITLE: Querying Account Balance in OAS-20 Contract\nDESCRIPTION: Defines the query and response structures for retrieving the token balance of a specific address.\nSOURCE: https://github.com/oasisprotocol/oasis-sdk/blob/main/contract-sdk/specs/token/oas20/README.md#2025-04-16_snippet_8\n\nLANGUAGE: rust\nCODE:\n```\n#[cbor(rename = \"balance\")]\nBalance { address: Address },\n```\n\nLANGUAGE: rust\nCODE:\n```\n#[cbor(rename = \"balance\")]\nBalance { balance: u128 },\n```\n\n----------------------------------------\n\nTITLE: Connecting to Custom Oasis Node\nDESCRIPTION: Example showing how to connect to a custom Oasis node through an Envoy proxy using the client SDK.\nSOURCE: https://github.com/oasisprotocol/oasis-sdk/blob/main/client-sdk/ts-web/core/docs/getting-started.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst client = new oasis.client.NodeInternal('http://127.0.0.1:42280');\n```\n\n----------------------------------------\n\nTITLE: Querying Allowances in OAS-20 Contract\nDESCRIPTION: Defines the query and response structures for retrieving the allowance granted by an allower to a beneficiary.\nSOURCE: https://github.com/oasisprotocol/oasis-sdk/blob/main/contract-sdk/specs/token/oas20/README.md#2025-04-16_snippet_9\n\nLANGUAGE: rust\nCODE:\n```\n#[cbor(rename = \"allowance\")]\nAllowance { allower: Address, beneficiary: Address },\n```\n\nLANGUAGE: rust\nCODE:\n```\n#[cbor(rename = \"allowance\")]\nAllowance { allowance: u128 },\n```\n\n----------------------------------------\n\nTITLE: Building Intel SGX Format Paratime Binary with Cargo\nDESCRIPTION: Commands to build a paratime binary for Intel SGX target in release mode, which is the first step in creating an SGX executable.\nSOURCE: https://github.com/oasisprotocol/oasis-sdk/blob/main/docs/runtime/reproducibility.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd /src\ncargo build --release --target x86_64-fortanix-unknown-sgx\n```\n\n----------------------------------------\n\nTITLE: Installing NPM Workspace Dependencies with TypeScript Compilation\nDESCRIPTION: Command to install dependencies in the NPM workspace while ensuring proper TypeScript compilation order using the --foreground-scripts flag. This ensures dependent packages are compiled before their dependents.\nSOURCE: https://github.com/oasisprotocol/oasis-sdk/blob/main/client-sdk/ts-web/README.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i --foreground-scripts\n```\n\n----------------------------------------\n\nTITLE: Initialize Project Directory with Cargo\nDESCRIPTION: Creates the basic directory structure and boilerplate for a Rust smart contract project using Cargo.\nSOURCE: https://github.com/oasisprotocol/oasis-sdk/blob/main/docs/contract/hello-world.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo init --lib hello-world\n```\n\n----------------------------------------\n\nTITLE: Configuring Runtime in Wallet\nDESCRIPTION: Interactive configuration for the runtime, including description, denomination symbol, and decimal places.\nSOURCE: https://github.com/oasisprotocol/oasis-sdk/blob/main/docs/runtime/minimal-runtime.md#2025-04-16_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n? Description: minimal\n? Denomination symbol: TEST\n? Denomination decimal places: 9\n```\n\n----------------------------------------\n\nTITLE: Setting ROFL App Secret using Oasis CLI (Shell)\nDESCRIPTION: Demonstrates how to create and set a secret called 'mysecret' using the Oasis CLI. This encrypts the secret and updates the local app manifest file.\nSOURCE: https://github.com/oasisprotocol/oasis-sdk/blob/main/docs/rofl/features.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\necho -n \"my very secret value\" | oasis rofl secret set mysecret -\n```\n\n----------------------------------------\n\nTITLE: Authenticated Transaction Submission Response from ROFL REST API (JSON)\nDESCRIPTION: Example JSON response from the authenticated transaction submission endpoint of the ROFL REST API, containing the transaction data.\nSOURCE: https://github.com/oasisprotocol/oasis-sdk/blob/main/docs/rofl/features.md#2025-04-16_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": \"f6\"\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying ROFL App Registration and Status\nDESCRIPTION: Shell command to check if a ROFL app is running and has successfully registered on the blockchain. This displays information about the app, its policy, and currently live instances.\nSOURCE: https://github.com/oasisprotocol/oasis-sdk/blob/main/docs/rofl/deployment.md#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\noasis rofl show\n```\n\n----------------------------------------\n\nTITLE: Building and Running Go Client\nDESCRIPTION: Commands to fetch dependencies, build, and run the Go test client.\nSOURCE: https://github.com/oasisprotocol/oasis-sdk/blob/main/docs/runtime/minimal-runtime.md#2025-04-16_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\ngo get\n```\n\nLANGUAGE: bash\nCODE:\n```\ngo build\n```\n\nLANGUAGE: bash\nCODE:\n```\n./minimal-runtime-client\n```\n\n----------------------------------------\n\nTITLE: Sending OAS-20 Tokens to Contracts in Rust\nDESCRIPTION: Defines the send request structure for transferring tokens to a contract and triggering a receive callback with custom data.\nSOURCE: https://github.com/oasisprotocol/oasis-sdk/blob/main/contract-sdk/specs/token/oas20/README.md#2025-04-16_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\n#[cbor(rename = \"send\")]\nSend {\n    to: InstanceId,\n    amount: u128,\n    data: cbor::Value,\n},\n```\n\n----------------------------------------\n\nTITLE: Creating an SGX Paratime Bundle with ORC\nDESCRIPTION: Command to initialize a paratime bundle with both ELF and Intel SGX artifacts using the ORC tool.\nSOURCE: https://github.com/oasisprotocol/oasis-sdk/blob/main/docs/runtime/reproducibility.md#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\norc init path/to/elf-binary --sgx-executable path/to/binary.sgxs --sgx-signature path/to/binary.sig\n```\n\n----------------------------------------\n\nTITLE: Creating Docker Compose configuration for the bot\nDESCRIPTION: Sets up a Docker Compose file to orchestrate the Telegram bot container.\nSOURCE: https://github.com/oasisprotocol/oasis-sdk/blob/main/docs/rofl/quickstart.mdx#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  python-telegram-bot:\n    build: .\n    image: \"ghcr.io/oasisprotocol/demo-rofl-tgbot\"\n    platform: linux/amd64\n    environment:\n      - TOKEN=${TOKEN}\n```\n\n----------------------------------------\n\nTITLE: Querying ROFL Oracle Contract on Sapphire Testnet\nDESCRIPTION: Hardhat command to query a deployed oracle contract on Sapphire Testnet. This verifies that the oracle is working properly by showing its current state, including the last observation and update time.\nSOURCE: https://github.com/oasisprotocol/oasis-sdk/blob/main/docs/rofl/deployment.md#2025-04-16_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnpx hardhat oracle-query 0x1234845aaB7b6CD88c7fAd9E9E1cf07638805b20 --network sapphire-testnet\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack for hdkey module compatibility\nDESCRIPTION: Configuration required for Webpack to support the hdkey module which implements ADR 0008 key generation. This setup provides the necessary fallbacks for Buffer and stream in browser environments.\nSOURCE: https://github.com/oasisprotocol/oasis-sdk/blob/main/client-sdk/ts-web/core/docs/changelog.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    resolve: { fallback: { stream: require.resolve('stream-browserify') } },\n    plugins: [\n        new webpack.ProvidePlugin({\n            process: 'process/browser',\n            Buffer: ['buffer', 'Buffer'],\n        }),\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a simple Telegram bot in Python\nDESCRIPTION: Creates a basic Telegram bot that responds to the /hello command with a greeting.\nSOURCE: https://github.com/oasisprotocol/oasis-sdk/blob/main/docs/rofl/quickstart.mdx#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom telegram import Update\nfrom telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes\n\n\nasync def hello(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:\n    await update.message.reply_text(f'Hello {update.effective_user.first_name}')\n\n\napp = ApplicationBuilder().token(os.getenv[\"TOKEN\"]).build()\n\napp.add_handler(CommandHandler(\"hello\", hello))\n\napp.run_polling()\n```\n\n----------------------------------------\n\nTITLE: Detecting and installing required Rust toolchain version\nDESCRIPTION: Command to automatically detect and install the appropriate Rust toolchain version as specified in the project's rust-toolchain.toml file.\nSOURCE: https://github.com/oasisprotocol/oasis-sdk/blob/main/docs/runtime/prerequisites.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nrustup show\n```\n\n----------------------------------------\n\nTITLE: Running the Runtime Builder Docker Container\nDESCRIPTION: Command to run the Oasis runtime builder Docker container with the SDK source code mounted to enable building paratime binaries in an isolated environment.\nSOURCE: https://github.com/oasisprotocol/oasis-sdk/blob/main/docs/runtime/reproducibility.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -t -i -v /home/user/oasis-sdk:/src ghcr.io/oasisprotocol/runtime-builder:main /bin/bash\n```\n\n----------------------------------------\n\nTITLE: Configuring Rust Toolchain Version\nDESCRIPTION: Configuration for the Rust toolchain specifying the required nightly version for the Oasis Runtime SDK.\nSOURCE: https://github.com/oasisprotocol/oasis-sdk/blob/main/docs/runtime/minimal-runtime.md#2025-04-16_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[toolchain]\nchannel = \"nightly-2022-08-22\"\ncomponents = [\"rustfmt\", \"clippy\", \"rust-src\"]\ntargets = [\"x86_64-unknown-linux-gnu\", \"x86_64-fortanix-unknown-sgx\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring Cargo Build Settings\nDESCRIPTION: Configuration for Cargo to always build with specific CPU platform features (AES-NI and SSE3) required by dependencies.\nSOURCE: https://github.com/oasisprotocol/oasis-sdk/blob/main/docs/runtime/minimal-runtime.md#2025-04-16_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[build]\nrustflags = [\"-C\", \"target-feature=+aes,+ssse3\"]\nrustdocflags = [\"-C\", \"target-feature=+aes,+ssse3\"]\n\n[test]\nrustflags = [\"-C\", \"target-feature=+aes,+ssse3\"]\nrustdocflags = [\"-C\", \"target-feature=+aes,+ssse3\"]\n```\n\n----------------------------------------\n\nTITLE: Withdrawing OAS-20 Tokens via Allowance in Rust\nDESCRIPTION: Defines the withdraw request structure that enables a beneficiary to withdraw tokens from an account that has granted an allowance.\nSOURCE: https://github.com/oasisprotocol/oasis-sdk/blob/main/contract-sdk/specs/token/oas20/README.md#2025-04-16_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\n#[cbor(rename = \"withdraw\")]\nWithdraw { from: Address, amount: u128 },\n```\n\n----------------------------------------\n\nTITLE: Displaying Paratime Bundle Information\nDESCRIPTION: Command to show detailed information about a paratime bundle, including verification of SGX signatures and bundle contents.\nSOURCE: https://github.com/oasisprotocol/oasis-sdk/blob/main/docs/runtime/reproducibility.md#2025-04-16_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\norc show bundle.orc\n```\n\n----------------------------------------\n\nTITLE: Minting OAS-20 Tokens in Rust\nDESCRIPTION: Defines the optional mint request structure for tokens that support minting new supply to a specified address.\nSOURCE: https://github.com/oasisprotocol/oasis-sdk/blob/main/contract-sdk/specs/token/oas20/README.md#2025-04-16_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\n#[cbor(rename = \"mint\")]\nMint { to: Address, amount: u128 },\n```\n\n----------------------------------------\n\nTITLE: Setting Up Go Module for Testing Client\nDESCRIPTION: Commands to create a new Go module for the runtime client test.\nSOURCE: https://github.com/oasisprotocol/oasis-sdk/blob/main/docs/runtime/minimal-runtime.md#2025-04-16_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\ngo mod init example.com/oasisprotocol/minimal-runtime-client\ngo mod tidy\n```\n\n----------------------------------------\n\nTITLE: Running Benchmarks for Oasis SDK Gas Cost Derivation\nDESCRIPTION: Commands to run benchmarks for deriving gas costs in the Oasis SDK. These benchmarks are crucial for analyzing the performance of various WASM instructions and SDK functions.\nSOURCE: https://github.com/oasisprotocol/oasis-sdk/blob/main/runtime-sdk/modules/contracts/README.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# To run all benchmarks:\n$ cargo bench --features benchmarks -- --nocapture\n# To run only the cost-related wasm benchmarks:\n$ cargo bench --features benchmarks -p oasis-runtime-sdk-contracts -- --nocapture wasm\n```\n\n----------------------------------------\n\nTITLE: Burning OAS-20 Tokens in Rust\nDESCRIPTION: Defines the burn request structure that removes tokens from the caller's balance and reduces the total supply.\nSOURCE: https://github.com/oasisprotocol/oasis-sdk/blob/main/contract-sdk/specs/token/oas20/README.md#2025-04-16_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\n#[cbor(rename = \"burn\")]\nBurn { amount: u128 },\n```\n\n----------------------------------------\n\nTITLE: Retrieving Oasis Node Address with oasis-node CLI\nDESCRIPTION: Shell command to display the address of an Oasis node by connecting to its internal socket. This address is needed to fund the node for transaction fees related to ROFL app registration.\nSOURCE: https://github.com/oasisprotocol/oasis-sdk/blob/main/docs/rofl/deployment.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\noasis-node identity show-address -a unix:/node/data/internal.sock\n```\n\n----------------------------------------\n\nTITLE: Updating ROFL App On-Chain Configuration (Shell)\nDESCRIPTION: Shows the command to update the on-chain configuration of a ROFL app using the Oasis CLI, which is necessary after setting secrets.\nSOURCE: https://github.com/oasisprotocol/oasis-sdk/blob/main/docs/rofl/features.md#2025-04-16_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\noasis rofl update\n```\n\n----------------------------------------\n\nTITLE: Installing the ORC Utility\nDESCRIPTION: Command to install the ORC (Oasis Runtime Container) utility using Go, which is used for creating and managing paratime bundles.\nSOURCE: https://github.com/oasisprotocol/oasis-sdk/blob/main/docs/runtime/reproducibility.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngo install github.com/oasisprotocol/oasis-sdk/tools/orc@latest\n```\n\n----------------------------------------\n\nTITLE: Building ROFL bundle\nDESCRIPTION: Builds the ROFL bundle (.orc file) for secure execution in TEE.\nSOURCE: https://github.com/oasisprotocol/oasis-sdk/blob/main/docs/rofl/quickstart.mdx#2025-04-16_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\noasis rofl build\n```\n\n----------------------------------------\n\nTITLE: Checking Active Rust Toolchain for Oasis SDK\nDESCRIPTION: Command to verify and install the proper Rust toolchain version specified in rust-toolchain.toml file. This ensures you're using the compatible Rust version required by the Oasis SDK.\nSOURCE: https://github.com/oasisprotocol/oasis-sdk/blob/main/docs/contract/prerequisites.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nrustup show\n```\n\n----------------------------------------\n\nTITLE: Converting ELF to SGXS Format for Intel SGX\nDESCRIPTION: Command to convert the compiled ELF binary to the SGXS format required for Intel SGX execution on the Oasis network.\nSOURCE: https://github.com/oasisprotocol/oasis-sdk/blob/main/docs/runtime/reproducibility.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncargo elf2sgxs --release\n```\n\n----------------------------------------\n\nTITLE: Key Generation Response from ROFL REST API (JSON)\nDESCRIPTION: Example JSON response from the key generation endpoint of the ROFL REST API, containing the generated key as a hexadecimal string.\nSOURCE: https://github.com/oasisprotocol/oasis-sdk/blob/main/docs/rofl/features.md#2025-04-16_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"key\": \"a54027bff15a8726b6d9f65383bff20db51c6f3ac5497143a8412a7f16dfdda9\"\n}\n```\n\n----------------------------------------\n\nTITLE: Building ELF Format Paratime Binary with Cargo\nDESCRIPTION: Command to build a paratime binary in release mode using Cargo, which produces an ELF format executable.\nSOURCE: https://github.com/oasisprotocol/oasis-sdk/blob/main/docs/runtime/reproducibility.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncargo build --release\n```\n\n----------------------------------------\n\nTITLE: Unpacking Oasis Core binary release\nDESCRIPTION: Commands to extract the Oasis Core binary release and set up an environment variable pointing to the installation directory. Oasis Core provides utilities required for running a local test network.\nSOURCE: https://github.com/oasisprotocol/oasis-sdk/blob/main/docs/runtime/prerequisites.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd ~/Downloads\ntar xf ~/Downloads/oasis_core_24.2_linux_amd64.tar.gz --strip-components=1\n\n# This environment variable will be used throughout this guide.\nexport OASIS_CORE_PATH=~/Downloads/oasis_core_24.2_linux_amd64\n```\n\n----------------------------------------\n\nTITLE: Setting Private Key for Contract Deployment\nDESCRIPTION: Stores the hex-encoded private key as an environment variable for paying the deployment gas fee.\nSOURCE: https://github.com/oasisprotocol/oasis-sdk/blob/main/examples/runtime-sdk/rofl-oracle/oracle/README.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nexport PRIVATE_KEY=0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80\n```\n\n----------------------------------------\n\nTITLE: Using Container Secrets in Docker Compose (YAML)\nDESCRIPTION: Demonstrates how to use ROFL app secrets as container secrets in a Docker Compose file. The secret 'mysecret' is defined as an external secret and passed to the container.\nSOURCE: https://github.com/oasisprotocol/oasis-sdk/blob/main/docs/rofl/features.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  test:\n    image: docker.io/library/alpine:3.21.2@sha256:f3240395711384fc3c07daa46cbc8d73aa5ba25ad1deb97424992760f8cb2b94\n    command: echo \"Hello $(cat /run/secrets/mysecret)!\"\n    secrets:\n      - mysecret\n\nsecrets:\n  mysecret:\n    external: true\n```\n\n----------------------------------------\n\nTITLE: Cloning the Oasis SDK Repository with Git\nDESCRIPTION: Command to clone the Oasis SDK repository from GitHub, which contains the test runtimes and necessary tools for building paratimes.\nSOURCE: https://github.com/oasisprotocol/oasis-sdk/blob/main/docs/runtime/reproducibility.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/oasisprotocol/oasis-sdk.git\n```\n\n----------------------------------------\n\nTITLE: Using Secrets as Environment Variables in Docker Compose (YAML)\nDESCRIPTION: Illustrates how to use ROFL app secrets as environment variables in a Docker Compose file. The secret 'mysecret' is exposed as an environment variable.\nSOURCE: https://github.com/oasisprotocol/oasis-sdk/blob/main/docs/rofl/features.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  test:\n    image: docker.io/library/alpine:3.21.2@sha256:f3240395711384fc3c07daa46cbc8d73aa5ba25ad1deb97424992760f8cb2b94\n    command: echo \"Hello $MYSECRET!\"\n    environment:\n      - MYSECRET=${MYSECRET}\n```\n\n----------------------------------------\n\nTITLE: Transferring Tokens to Node Address on Sapphire Testnet\nDESCRIPTION: Shell command for transferring tokens to a node address on Sapphire Testnet. This ensures the node has funds to pay for ROFL app registration fees.\nSOURCE: https://github.com/oasisprotocol/oasis-sdk/blob/main/docs/rofl/deployment.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\noasis account transfer 10 oasis1qp6tl30ljsrrqnw2awxxu2mtxk0qxyy2nymtsy90 \\\n  --network testnet --paratime sapphire\n```\n\n----------------------------------------\n\nTITLE: Exposing ROFL REST API Socket in Docker Compose (YAML)\nDESCRIPTION: Shows how to expose the ROFL REST API socket to a container in a Docker Compose file by mounting it as a volume.\nSOURCE: https://github.com/oasisprotocol/oasis-sdk/blob/main/docs/rofl/features.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  mycontainer:\n    # ... other details omitted ...\n    volumes:\n      - /run/rofl-appd.sock:/run/rofl-appd.sock\n```\n\n----------------------------------------\n\nTITLE: Generating SGX Signing Data from Bundle\nDESCRIPTION: Command to generate SGX signing data from a paratime bundle, which produces a hash to be signed.\nSOURCE: https://github.com/oasisprotocol/oasis-sdk/blob/main/docs/runtime/reproducibility.md#2025-04-16_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\norc sgx-gen-sign-data bundle.orc > sigstruct.sha256.bin\n```\n\n----------------------------------------\n\nTITLE: Setting up Python environment for Telegram bot\nDESCRIPTION: Creates a Python virtual environment and installs the python-telegram-bot library.\nSOURCE: https://github.com/oasisprotocol/oasis-sdk/blob/main/docs/rofl/quickstart.mdx#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npython -m venv my_env\nsource my_env/bin/activate\necho python-telegram-bot > requirements.txt\npip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Signing SGX SIGSTRUCT with OpenSSL\nDESCRIPTION: Command to sign the SGX SIGSTRUCT hash using OpenSSL with RSASSA-PKCS1-v1_5 scheme.\nSOURCE: https://github.com/oasisprotocol/oasis-sdk/blob/main/docs/runtime/reproducibility.md#2025-04-16_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nopenssl pkeyutl -sign \\\n      -in sigstruct.sha256.bin \\\n      -inkey private.pem \\\n      -out sigstruct.sha256.sig \\\n      -pkeyopt digest:sha256\n```\n\n----------------------------------------\n\nTITLE: Defining OAS-20 Transferred Event in Rust\nDESCRIPTION: Defines the event structure emitted upon successful transfer of OAS-20 tokens between addresses.\nSOURCE: https://github.com/oasisprotocol/oasis-sdk/blob/main/contract-sdk/specs/token/oas20/README.md#2025-04-16_snippet_11\n\nLANGUAGE: rust\nCODE:\n```\n#[sdk_event(code = 2)]\nOas20Transferred {\n    from: Address,\n    to: Address,\n    amount: u128,\n},\n```\n\n----------------------------------------\n\nTITLE: Running the Telegram bot with environment variable\nDESCRIPTION: Sets the Telegram API token as an environment variable and runs the bot.\nSOURCE: https://github.com/oasisprotocol/oasis-sdk/blob/main/docs/rofl/quickstart.mdx#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nexport TOKEN=\"0123456789:AAGax-vgGmQsRiwf4WIQI4xq8MMf4WaQI5x\"\npython bot.py\n```\n\n----------------------------------------\n\nTITLE: Defining OAS-20 Sent Event in Rust\nDESCRIPTION: Defines the event structure emitted upon successful sending of OAS-20 tokens to a contract instance.\nSOURCE: https://github.com/oasisprotocol/oasis-sdk/blob/main/contract-sdk/specs/token/oas20/README.md#2025-04-16_snippet_12\n\nLANGUAGE: rust\nCODE:\n```\n#[sdk_event(code = 3)]\nOas20Sent {\n    from: Address,\n    to: InstanceId,\n    amount: u128,\n},\n```\n\n----------------------------------------\n\nTITLE: Installing specific Go version (optional)\nDESCRIPTION: Commands to install a specific version of Go (1.22.5) using the Go version management system, needed if you want to use the Go Client SDK.\nSOURCE: https://github.com/oasisprotocol/oasis-sdk/blob/main/docs/runtime/prerequisites.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngo get golang.org/dl/go1.22.5\ngo1.22.5 download\n```\n\n----------------------------------------\n\nTITLE: Defining OAS-20 Allowance Changed Event in Rust\nDESCRIPTION: Defines the event structure emitted when an allowance is modified through the Allow request.\nSOURCE: https://github.com/oasisprotocol/oasis-sdk/blob/main/contract-sdk/specs/token/oas20/README.md#2025-04-16_snippet_14\n\nLANGUAGE: rust\nCODE:\n```\n#[sdk_event(code = 5)]\nOas20AllowanceChanged {\n    owner: Address,\n    beneficiary: Address,\n    allowance: u128,\n    negative: bool,\n    amount_change: u128,\n},\n```\n\n----------------------------------------\n\nTITLE: Defining OAS-20 Insufficient Allowance Error in Rust\nDESCRIPTION: Defines the error structure for when a withdrawer has insufficient allowance to withdraw tokens.\nSOURCE: https://github.com/oasisprotocol/oasis-sdk/blob/main/contract-sdk/specs/token/oas20/README.md#2025-04-16_snippet_24\n\nLANGUAGE: rust\nCODE:\n```\n#[error(\"insufficient allowance\")]\n#[sdk_error(code = 8)]\nInsufficientAllowance,\n```\n\n----------------------------------------\n\nTITLE: Network Status Output Example\nDESCRIPTION: Example output showing a properly functioning runtime with a ready committee status and increasing round number.\nSOURCE: https://github.com/oasisprotocol/oasis-sdk/blob/main/docs/runtime/minimal-runtime.md#2025-04-16_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n      \"committee\": {\n        \"status\": \"ready\",\n        \"active_version\": {\n          \"minor\": 1\n        },\n        \"latest_round\": 19,\n        \"latest_height\": 302,\n        \"executor_roles\": null,\n```\n\n----------------------------------------\n\nTITLE: Defining OAS-20 Zero Amount Error in Rust\nDESCRIPTION: Defines the error structure for when zero amount is used in transfer, send, burn or mint actions.\nSOURCE: https://github.com/oasisprotocol/oasis-sdk/blob/main/contract-sdk/specs/token/oas20/README.md#2025-04-16_snippet_19\n\nLANGUAGE: rust\nCODE:\n```\n#[error(\"zero amount\")]\n#[sdk_error(code = 3)]\nZeroAmount,\n```\n\n----------------------------------------\n\nTITLE: Account Balance Output Example\nDESCRIPTION: Example output showing Alice's account address, nonce, and balances in both consensus layer and paratime.\nSOURCE: https://github.com/oasisprotocol/oasis-sdk/blob/main/docs/runtime/minimal-runtime.md#2025-04-16_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nAddress: oasis1qrec770vrek0a9a5lcrv0zvt22504k68svq7kzve\nNonce: 0\n\n=== CONSENSUS LAYER (localhost) ===\n  Total: 0.0 TEST\n  Available: 0.0 TEST\n\n\n\n=== minimal PARATIME ===\nBalances for all denominations:\n  1.0 TEST\n```\n\n----------------------------------------\n\nTITLE: Defining OAS-20 Same Allower and Beneficiary Error in Rust\nDESCRIPTION: Defines the error structure for when the allower and beneficiary are the same address in allowance transactions.\nSOURCE: https://github.com/oasisprotocol/oasis-sdk/blob/main/contract-sdk/specs/token/oas20/README.md#2025-04-16_snippet_23\n\nLANGUAGE: rust\nCODE:\n```\n#[error(\"allower and beneficiary same\")]\n#[sdk_error(code = 7)]\nSameAllowerAndBeneficiary,\n```\n\n----------------------------------------\n\nTITLE: Defining OAS-20 Instantiated Event in Rust\nDESCRIPTION: Defines the event structure emitted upon successful instantiation of an OAS-20 token contract.\nSOURCE: https://github.com/oasisprotocol/oasis-sdk/blob/main/contract-sdk/specs/token/oas20/README.md#2025-04-16_snippet_10\n\nLANGUAGE: rust\nCODE:\n```\n#[sdk_event(code = 1)]\nOas20Instantiated { token_information: TokenInformation },\n```\n\n----------------------------------------\n\nTITLE: Defining OAS-20 Mint Over Cap Error in Rust\nDESCRIPTION: Defines the error structure for when minting would exceed the configured token supply cap.\nSOURCE: https://github.com/oasisprotocol/oasis-sdk/blob/main/contract-sdk/specs/token/oas20/README.md#2025-04-16_snippet_22\n\nLANGUAGE: rust\nCODE:\n```\n#[error(\"mint over cap\")]\n#[sdk_error(code = 6)]\nMintOverCap,\n```\n\n----------------------------------------\n\nTITLE: Defining OAS-20 Bad Request Error in Rust\nDESCRIPTION: Defines the error structure for requests not conforming to the OAS-20 specification.\nSOURCE: https://github.com/oasisprotocol/oasis-sdk/blob/main/contract-sdk/specs/token/oas20/README.md#2025-04-16_snippet_17\n\nLANGUAGE: rust\nCODE:\n```\n#[error(\"bad request\")]\n#[sdk_error(code = 1)]\nBadRequest,\n```\n\n----------------------------------------\n\nTITLE: Building Fuzzers with Cargo in Oasis SDK EVM Module\nDESCRIPTION: Commands for building fuzzers and corpus generators using Cargo and honggfuzz in the Oasis SDK EVM module. It includes options for building all targets or specific fuzzers.\nSOURCE: https://github.com/oasisprotocol/oasis-sdk/blob/main/runtime-sdk/modules/evm/fuzz/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo build --features=test\n```\n\nLANGUAGE: bash\nCODE:\n```\ncargo hfuzz build --features=test\n```\n\nLANGUAGE: bash\nCODE:\n```\ncargo hfuzz build --features=test --bin fuzz-precompile\n```\n\n----------------------------------------\n\nTITLE: Defining OAS-20 Total Supply Overflow Error in Rust\nDESCRIPTION: Defines the error structure for cases where total supply would overflow the maximum u128 value during instantiation or minting.\nSOURCE: https://github.com/oasisprotocol/oasis-sdk/blob/main/contract-sdk/specs/token/oas20/README.md#2025-04-16_snippet_18\n\nLANGUAGE: rust\nCODE:\n```\n#[error(\"total supply overflow\")]\n#[sdk_error(code = 2)]\nTotalSupplyOverflow,\n```\n\n----------------------------------------\n\nTITLE: Defining OAS-20 Minted Event in Rust\nDESCRIPTION: Defines the event structure emitted upon successful minting of new OAS-20 tokens.\nSOURCE: https://github.com/oasisprotocol/oasis-sdk/blob/main/contract-sdk/specs/token/oas20/README.md#2025-04-16_snippet_16\n\nLANGUAGE: rust\nCODE:\n```\n#[sdk_event(code = 7)]\nOas20Minted { to: Address, amount: u128 },\n```\n\n----------------------------------------\n\nTITLE: Defining OAS-20 Insufficient Funds Error in Rust\nDESCRIPTION: Defines the error structure for when an account has insufficient funds to perform an action.\nSOURCE: https://github.com/oasisprotocol/oasis-sdk/blob/main/contract-sdk/specs/token/oas20/README.md#2025-04-16_snippet_20\n\nLANGUAGE: rust\nCODE:\n```\n#[error(\"insufficient funds\")]\n#[sdk_error(code = 4)]\nInsufficientFunds,\n```\n\n----------------------------------------\n\nTITLE: Defining OAS-20 Burned Event in Rust\nDESCRIPTION: Defines the event structure emitted upon successful burning of OAS-20 tokens.\nSOURCE: https://github.com/oasisprotocol/oasis-sdk/blob/main/contract-sdk/specs/token/oas20/README.md#2025-04-16_snippet_13\n\nLANGUAGE: rust\nCODE:\n```\n#[sdk_event(code = 4)]\nOas20Burned { from: Address, amount: u128 },\n```\n\n----------------------------------------\n\nTITLE: Defining OAS-20 Minting Forbidden Error in Rust\nDESCRIPTION: Defines the error structure for when an unauthorized address attempts to mint tokens.\nSOURCE: https://github.com/oasisprotocol/oasis-sdk/blob/main/contract-sdk/specs/token/oas20/README.md#2025-04-16_snippet_21\n\nLANGUAGE: rust\nCODE:\n```\n#[error(\"minting forbidden\")]\n#[sdk_error(code = 5)]\nMintingForbidden,\n```\n\n----------------------------------------\n\nTITLE: Test Vector JSON Structure\nDESCRIPTION: JSON structure defining test vectors for runtime transactions. Each vector includes metadata, transaction details, encoded formats, validation flags, and cryptographic keys. The structure supports different signature schemes including Ed25519, Secp256k1, and Sr25519.\nSOURCE: https://github.com/oasisprotocol/oasis-sdk/blob/main/tools/gen_runtime_vectors/README.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"kind\": \"string\",\n  \"meta\": {\n    \"runtime_id\": \"string\",\n    \"chain_context\": \"string\",\n    \"orig_to\": \"string\"\n  },\n  \"tx\": \"object\",\n  \"signed_tx\": \"object\",\n  \"encoded_tx\": \"base64 string\",\n  \"encoded_meta\": \"base64 string\",\n  \"encoded_signed_tx\": \"base64 string\",\n  \"valid\": \"boolean\",\n  \"signer_private_key\": \"string\",\n  \"signer_public_key\": \"string\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Account Balances and Allowances in Genesis Document\nDESCRIPTION: Demonstrates the structure of account configurations in the staking genesis document. Shows how to set up initial balances and allowances for different accounts, including specific runtime allowances with account addresses.\nSOURCE: https://github.com/oasisprotocol/oasis-sdk/blob/main/client-sdk/ts-web/rt/playground/README.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n// Alice account.\n\"oasis1qrec770vrek0a9a5lcrv0zvt22504k68svq7kzve\": {\n    \"general\": {\n        \"balance\": \"100\",\n        \"allowances\": {\n            // Allowance for runtime: 8000000000000000000000000000000000000000000000000000000000000001.\n            \"oasis1qz672fmkt32hc3hxqrrwr07falkr22agsqv5dhke\": \"100\"\n        }\n    },\n// Bob account.\n\"oasis1qrydpazemvuwtnp3efm7vmfvg3tde044qg6cxwzx\": {\n    \"general\": {\n        \"balance\": \"100\",\n        \"allowances\": {\n            // Allowance for runtime: 8000000000000000000000000000000000000000000000000000000000000001.\n            \"oasis1qz672fmkt32hc3hxqrrwr07falkr22agsqv5dhke\": \"100\"\n        }\n    },\n}\n```"
  }
]