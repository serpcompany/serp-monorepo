[
  {
    "owner": "pester",
    "repo": "pester",
    "content": "TITLE: Defining a PowerShell function and Pester tests\nDESCRIPTION: This snippet defines a PowerShell function `Get-Planet` that retrieves planet data, and then provides Pester tests to validate the function's behavior, including checking the number of planets returned and filtering by name. It shows the usage of `BeforeAll`, `Describe`, `It`, `Context`, `Should`, and `-TestCases`.\nSOURCE: https://github.com/pester/pester/blob/main/README.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nBeforeAll {\n    # your function\n    function Get-Planet ([string]$Name='*')\n    {\n        $planets = @(\n            @{ Name = 'Mercury' }\n            @{ Name = 'Venus'   }\n            @{ Name = 'Earth'   }\n            @{ Name = 'Mars'    }\n            @{ Name = 'Jupiter' }\n            @{ Name = 'Saturn'  }\n            @{ Name = 'Uranus'  }\n            @{ Name = 'Neptune' }\n        ) | foreach { [PSCustomObject]$_ }\n\n        $planets | where { $_.Name -like $Name }\n    }\n}\n\n# Pester tests\nDescribe 'Get-Planet' {\n  It \"Given no parameters, it lists all 8 planets\" {\n    $allPlanets = Get-Planet\n    $allPlanets.Count | Should -Be 8\n  }\n\n  Context \"Filtering by Name\" {\n    It \"Given valid -Name '<Filter>', it returns '<Expected>'\" -TestCases @(\n      @{ Filter = 'Earth'; Expected = 'Earth' }\n      @{ Filter = 'ne*'  ; Expected = 'Neptune' }\n      @{ Filter = 'ur*'  ; Expected = 'Uranus' }\n      @{ Filter = 'm*'   ; Expected = 'Mercury', 'Mars' }\n    ) {\n      param ($Filter, $Expected)\n\n      $planets = Get-Planet -Name $Filter\n      $planets.Name | Should -Be $Expected\n    }\n\n    It \"Given invalid parameter -Name 'Alpha Centauri', it returns `$null\" {\n      $planets = Get-Planet -Name 'Alpha Centauri'\n      $planets | Should -Be $null\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Pester Mocking Example\nDESCRIPTION: This code demonstrates how to use Pester's mocking feature to replace the `Remove-Item` command with a mock implementation. This allows testing the `Remove-Cache` function without actually deleting any files.  The `Should -Invoke` assertion verifies that `Remove-Item` was called.\nSOURCE: https://github.com/pester/pester/blob/main/README.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nfunction Remove-Cache {\n    Remove-Item \"$env:TEMP\\cache.txt\"\n}\n\nDescribe 'Remove-Cache' {\n    It 'Removes cached results from temp\\cache.text' {\n        Mock -CommandName Remove-Item -MockWith {}\n\n        Remove-Cache\n\n        Should -Invoke -CommandName Remove-Item -Times 1 -Exactly\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Pester with a Configuration Object in PowerShell\nDESCRIPTION: This snippet demonstrates how to run Pester using a configuration object. First, it retrieves the default Pester configuration using `New-PesterConfiguration`. Then, it modifies several options, including the path for test files, filters by tag and exclude tag, and sets the output verbosity. Finally, it invokes Pester with the modified configuration object using `Invoke-Pester`.\nSOURCE: https://github.com/pester/pester/blob/main/src/en-US/about_PesterConfiguration.help.txt#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n# Get default configuration\n$configuration = New-PesterConfiguration\n# Changing a few options including the path for our test files.\n$configuration.Run.Path = '.\\tests'\n$configuration.Filter.Tag = 'Acceptance'\n$configuration.Filter.ExcludeTag = 'WindowsOnly'\n$configuration.Output.Verbosity = 'Detailed'\n# Run Pester\nInvoke-Pester -Configuration $configuration\n```\n\n----------------------------------------\n\nTITLE: Pester Assertion Example\nDESCRIPTION: This snippet demonstrates a simple Pester test using the `Should -Exist` assertion to verify that a file exists at a specified path.  The test is defined within a `Describe` block to group related tests and an `It` block to define an individual test case.\nSOURCE: https://github.com/pester/pester/blob/main/README.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nDescribe 'Notepad' {\n    It 'Exists in Windows folder' {\n        'C:\\Windows\\notepad.exe' | Should -Exist\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generic Value Assertions - PowerShell\nDESCRIPTION: Illustrates the usage of generic value assertions like Should-Be. The type of `$Expected` determines the type to be used for the comparison, and `$Actual` is automatically converted to that type.\nSOURCE: https://github.com/pester/pester/blob/main/docs/assertion-types.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\n1 | Should-Be -Expected $true\nGet-Process -Name Idle | Should-Be -Expected \"System.Diagnostics.Process (Idle)\"\n```\n\n----------------------------------------\n\nTITLE: Value Assertion using -Actual Syntax - PowerShell\nDESCRIPTION: Demonstrates how value assertions like Should-Be handle input using the `-Actual` parameter.  The value passed to `-Actual` is used exactly as provided, with no implicit unwrapping or type conversion, except as specified by the assertion.\nSOURCE: https://github.com/pester/pester/blob/main/docs/assertion-types.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nShould-Be -Actual 1 -Expected 1\n\n# This fails, Actual is collection, while expected is int.\nShould-Be -Actual @(1) -Expected 1\n```\n\n----------------------------------------\n\nTITLE: Collection Assertion using Pipeline Syntax - PowerShell\nDESCRIPTION: Demonstrates how collection assertions like Should-BeCollection handle input from the pipeline.  A single value is treated as an array with one element. An empty array remains an empty array. $null is not accepted as Expected.\nSOURCE: https://github.com/pester/pester/blob/main/docs/assertion-types.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\n# Should-BeCollection is a collection assertion:\n1 | Should-BeCollection -Expected @(1)\n@(1) | Should-BeCollection -Expected @(1)\n@() | Should-BeCollection -Expected @()\n\n# This fails, because -Expected requires a collection.\n$null | Should-BeCollection -Expected $null\n```\n\n----------------------------------------\n\nTITLE: Value Assertion using Pipeline Syntax - PowerShell\nDESCRIPTION: Demonstrates how value assertions like Should-Be handle input from the pipeline. It illustrates that both a single value and an array containing a single value are treated as the single value.  Empty array @() is handled as $null.\nSOURCE: https://github.com/pester/pester/blob/main/docs/assertion-types.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n1 | Should-Be -Expected 1\n@(1) | Should-Be -Expected 1\n$null | Should-Be -Expected $null\n@() | Should-Be -Expected $null #< --- TODO: this is not the case right now, we special case this as empty array, but is that correct? it does not play well with the value and collection assertion, and we special case it just because we can.\n# $null | will give $local:input -> $null , and @() | will give $local:input -> @(), is that distinction important when we know that we will only check against values?\n\n# This fails, because -Expected does not allow collections.\n@() | Should-Be -Expected @()\n```\n\n----------------------------------------\n\nTITLE: Installing Pester PowerShell Module\nDESCRIPTION: This command installs or updates the Pester PowerShell module from the PowerShell Gallery. The `-Force` parameter ensures that the module is installed even if a previous version exists.  This command requires administrator privileges.\nSOURCE: https://github.com/pester/pester/blob/main/README.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nInstall-Module -Name Pester -Force\n```\n\n----------------------------------------\n\nTITLE: Running Specific Test File - PowerShell\nDESCRIPTION: This command executes a specific test file using the `test.ps1` script. The `-File` parameter specifies the path to the test file that should be executed. This allows developers to run individual tests during development.\nSOURCE: https://github.com/pester/pester/blob/main/CONTRIBUTING.md#_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\n.\\test.ps1 -File <filename>\n```\n\n----------------------------------------\n\nTITLE: Running Specific Test File Skipping P Tests - PowerShell\nDESCRIPTION: This command runs a specific test file, but skips the P tests (`*.ts.ps1`). This is useful when you only want to run the Pester tests (`*.tests.ps1`) in the specified file.\nSOURCE: https://github.com/pester/pester/blob/main/CONTRIBUTING.md#_snippet_6\n\nLANGUAGE: PowerShell\nCODE:\n```\n.\\test.ps1 -File <filename> -SkipPTests\n```\n\n----------------------------------------\n\nTITLE: Importing Pester Module - PowerShell\nDESCRIPTION: This command imports the built Pester module into the current PowerShell session. The `-Force` parameter ensures that any previously loaded versions of the module are unloaded and replaced with the new version. This is required to use the latest changes made to the module.\nSOURCE: https://github.com/pester/pester/blob/main/CONTRIBUTING.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nImport-Module .\\bin\\Pester.psd1 -Force\n```\n\n----------------------------------------\n\nTITLE: Getting Help for Build Script - PowerShell\nDESCRIPTION: This command retrieves detailed help information about the `build.ps1` script, including its parameters and usage instructions. This allows users to understand the available options and how to use the script effectively.\nSOURCE: https://github.com/pester/pester/blob/main/CONTRIBUTING.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-Help ./build.ps1 -Detailed\n```\n\n----------------------------------------\n\nTITLE: Getting Help for Test Script - PowerShell\nDESCRIPTION: This command retrieves detailed help information about the `test.ps1` script, including its parameters and usage instructions. This allows users to understand the available options and how to use the script effectively.\nSOURCE: https://github.com/pester/pester/blob/main/CONTRIBUTING.md#_snippet_7\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-Help ./test.ps1 -Detailed\n```\n\n----------------------------------------\n\nTITLE: Building Pester Module - PowerShell\nDESCRIPTION: This command builds the Pester PowerShell module from the PowerShell source files. It compiles the PowerShell code into a module that can be imported and used.  This command is typically run when changes have been made to the PowerShell code.\nSOURCE: https://github.com/pester/pester/blob/main/CONTRIBUTING.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\n.\\build.ps1\n```\n\n----------------------------------------\n\nTITLE: Building Pester with Clean Option - PowerShell\nDESCRIPTION: This command builds the Pester project from source, including the C# assemblies. The `-Clean` parameter ensures that any previous build artifacts are removed before starting the build process. This is typically done the first time the repository is cloned or when the C# code has changed.\nSOURCE: https://github.com/pester/pester/blob/main/CONTRIBUTING.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n.\\build.ps1 -Clean\n```\n\n----------------------------------------\n\nTITLE: Building Pester Module Inline - PowerShell\nDESCRIPTION: This command builds the Pester module into a single file.  It's mainly used for the official build process. Debugging and modifying can be difficult because the code runs from `Pester.psm1`. Use it only when necessary.\nSOURCE: https://github.com/pester/pester/blob/main/CONTRIBUTING.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n.\\build.ps1 -Inline\n```\n\n----------------------------------------\n\nTITLE: AppVeyor Configuration for Pester Testing\nDESCRIPTION: This YAML file configures AppVeyor, a continuous integration service, to run Pester tests. It specifies the operating system images to use, installs the Pester module, and executes the tests using `Invoke-Pester` with the `-EnableExit` parameter to ensure that test failures cause the build to fail.\nSOURCE: https://github.com/pester/pester/blob/main/README.md#_snippet_4\n\nLANGUAGE: YAML\nCODE:\n```\nversion: 1.0.{build}\nimage:\n  - Visual Studio 2017\n  - Ubuntu\ninstall:\n  - ps: Install-Module Pester -Force -Scope CurrentUser\nbuild: off\ntest_script:\n  - ps: Invoke-Pester -EnableExit\n```"
  }
]