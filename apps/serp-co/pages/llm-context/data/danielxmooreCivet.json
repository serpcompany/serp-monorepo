[
  {
    "owner": "danielxmoore",
    "repo": "civet",
    "content": "TITLE: Declarations and Destructuring in Civet\nDESCRIPTION: Shows variable declaration syntax and destructuring patterns in Civet. Includes const, let, var declarations and various array/object destructuring patterns.\nSOURCE: https://github.com/DanielXMoore/Civet/blob/main/civet.dev/cheatsheet.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Declarations\nconst x = 1\nlet y: number = 2\nvar z: string = \"3\"\nx := 1 // const x = 1\ny .= 2 // let y = 2\n\n// Destructuring\n[ a, b ] := x\n[ ..., last ] := x\n[ first, ...rest ] := x\n[ first, ..., last ] := x\n[ first, ...middle, last] := x\n\n{ a, b } := c\n```\n\n----------------------------------------\n\nTITLE: Pattern Matching in Civet\nDESCRIPTION: Demonstrates Civet's pattern matching syntax using switch statements with various patterns including regex and destructuring.\nSOURCE: https://github.com/DanielXMoore/Civet/blob/main/civet.dev/index.md#2025-04-17_snippet_0\n\nLANGUAGE: civet\nCODE:\n```\nswitch x\n  0\n    console.log(\"zero\")\n  /^\\s+$/\n    console.log(\"whitespace\")\n  [{type: \"text\", content}, ...rest]\n    console.log(\"leading text\", content)\n```\n\n----------------------------------------\n\nTITLE: Plugin Options Interface for Civet Integration\nDESCRIPTION: TypeScript interface defining all available configuration options for the Civet plugins, including declaration generation, TypeScript handling, and custom transformations.\nSOURCE: https://github.com/DanielXMoore/Civet/blob/main/source/unplugin/README.md#2025-04-17_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\ninterface PluginOptions {\n  emitDeclaration?: boolean\n  declarationExtesion?: string\n  implicitExtension?: boolean\n  outputExtension?: string\n  ts?: 'civet' | 'esbuild' | 'tsc' | 'preserve'\n  typecheck?: boolean | string\n  cache?: boolean\n  parseOptions?: {\n    comptime?: boolean\n    coffeeCompat?: boolean\n    // ... any other Civet configuration option\n  }\n  transformOutput?: (\n    code: string,\n    id: string\n  ) => TransformResult | Promise<TransformResult>\n}\n```\n\n----------------------------------------\n\nTITLE: Pipeline Operators in Civet\nDESCRIPTION: Shows different pipeline operator usage including basic pipes, fat pipes for chaining operations, and pipe expressions with shorthand functions.\nSOURCE: https://github.com/DanielXMoore/Civet/blob/main/civet.dev/index.md#2025-04-17_snippet_1\n\nLANGUAGE: civet\nCODE:\n```\ndata\n  |> Object.keys\n  |> console.log\n```\n\nLANGUAGE: civet\nCODE:\n```\ndocument.createElement('div')\n||> .className = 'civet'\n||> .appendChild document.createTextNode 'Civet'\n```\n\nLANGUAGE: civet\nCODE:\n```\na |> & + 1 |> bar\n```\n\n----------------------------------------\n\nTITLE: Arrow Functions in Civet\nDESCRIPTION: Demonstrates arrow function syntax in Civet. Shows both fat arrow (=>) and thin arrow (->) functions, which are equivalent to lambda and function expressions respectively.\nSOURCE: https://github.com/DanielXMoore/Civet/blob/main/civet.dev/cheatsheet.md#2025-04-17_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// Arrow Functions\ninc := (x) => x + 1\nadd := <T>(a, b): T => a + b\n\n// Thin arrow -> is equivalent to `function`\nf := (this: ctx, a, b) ->\n  ctx.log a, b if ctx.debug\n```\n\n----------------------------------------\n\nTITLE: This, Instance, and Type Checking in Civet\nDESCRIPTION: Shows shortcuts for 'this' references, instanceof checks, and typeof checks in Civet. The @ symbol represents 'this' and <? provides shorthand for both instanceof and typeof checks.\nSOURCE: https://github.com/DanielXMoore/Civet/blob/main/civet.dev/cheatsheet.md#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// this\nthis\n// shorthand\n@ // this\n@x // this.x\n\n// instance of and typeof shorthand\nx instanceof y\nx <? Y // x instanceof y\ntypeof x === \"string\"\nx <? \"string\" // typeof x === \"string\"\n```\n\n----------------------------------------\n\nTITLE: JSX in Civet\nDESCRIPTION: Demonstrates JSX syntax in Civet with shorthand attributes and component composition.\nSOURCE: https://github.com/DanielXMoore/Civet/blob/main/civet.dev/index.md#2025-04-17_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Listing(props)\n  <h1 #heading>Hello Civet!\n  <ul .items>\n    <For each=props.items>\n      (item) =>\n        <li .item {props.style}><Item {item}>\n```\n\n----------------------------------------\n\nTITLE: TypeScript Compiler Configuration and File Handling\nDESCRIPTION: Implementation of TypeScript compiler host setup with default compiler options and file caching system. Defines configuration for TypeScript compilation including module resolution and target settings.\nSOURCE: https://github.com/DanielXMoore/Civet/blob/main/README.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nts, {CompilerOptions} from typescript\n\nDefaultCompilerOptions : CompilerOptions :=\n  allowNonTsExtensions: true\n  allowJs: true\n  target: ts.ScriptTarget.Latest\n  moduleResolution: ts.ModuleResolutionKind.NodeJs\n  module: ts.ModuleKind.CommonJS\n  allowSyntheticDefaultImports: true\n  experimentalDecorators: true\n\nfileCache : Record<string, any> := {}\n\ncreateCompilerHost := (options: CompilerOptions, moduleSearchLocations : string[]) ->\n  fileExists := (fileName: string) : boolean ->\n    fileCache[fileName]?\n\n  readFile := (fileName: string) ->\n    fileCache[fileName]\n```\n\n----------------------------------------\n\nTITLE: Conditionals and Relationals in Civet\nDESCRIPTION: Shows logical operators and relational expressions in Civet, including the 'and'/'or' aliases for '&&'/'||' and the 'is' alias for '==='. Also demonstrates chained relational operators.\nSOURCE: https://github.com/DanielXMoore/Civet/blob/main/civet.dev/cheatsheet.md#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Conditionals\nx && y\nx and y // x && y\nx || y\nx or y // x || y\n\n// relationals\nx === y\nx is y // x === y\nx < y\nx > y\n// Chained relationals\nx < y < z // x < y && y < z\n```\n\n----------------------------------------\n\nTITLE: Conditional Statements and Loops in Civet\nDESCRIPTION: Shows if, unless, while, and for loop syntax in Civet. Demonstrates conditionals without parentheses or braces and various loop constructs for arrays and objects.\nSOURCE: https://github.com/DanielXMoore/Civet/blob/main/civet.dev/cheatsheet.md#2025-04-17_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// if conditions\nif x < 3\n  \"it's small\"\n\nif x > 11\n  \"it's big\"\n\nunless paused\n  run()\n\n// loops\nwhile x < 10\n  f(x)\n  x++\n\nfor item of items\n  update item\n\nfor item, index of items\n  update item if index > 0\n\nfor key, value in object\n  log key, ':', value\n\nfor own key in object\n  log `my ${key}`\n```\n\n----------------------------------------\n\nTITLE: String Literals in Civet\nDESCRIPTION: Demonstrates various string literals in Civet including single quotes, double quotes, template strings, and block strings. Block strings automatically dedent based on common indentation.\nSOURCE: https://github.com/DanielXMoore/Civet/blob/main/civet.dev/cheatsheet.md#2025-04-17_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// strings\n\"I'm a string\"\n'I\\'m also a string'\n`I'm a ${template} string`\n\n// Block Strings\n\"\"\"\n  Block strings\n  will dedent\n\"\"\"\n\n'''\n  They work with all kinds of\n  strings\n'''\n\n```\n  I will dedent by removing\n  common indentation\n```\n```\n\n----------------------------------------\n\nTITLE: Function Application in Civet\nDESCRIPTION: Demonstrates both explicit and implicit function application in Civet. Shows how parentheses can be omitted in many cases, creating a more concise syntax.\nSOURCE: https://github.com/DanielXMoore/Civet/blob/main/civet.dev/cheatsheet.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Function application\nf(x)\nf(a, g(x))\nf(...args, cb)\n\n// Implicit application\nf x // f(x)\nf a, b, c // f(a, b, c)\nf g x // f(g(x))\nf a, b c // f(a, b(c))\n```\n\n----------------------------------------\n\nTITLE: Single-Argument Function Shorthand\nDESCRIPTION: Demonstrates various shorthand syntaxes for single-argument functions including property access and operations.\nSOURCE: https://github.com/DanielXMoore/Civet/blob/main/civet.dev/index.md#2025-04-17_snippet_2\n\nLANGUAGE: civet\nCODE:\n```\nx.map .name\nx.map &.profile?.name[0...3]\nx.map &.callback a, b\nx.map &+1\nx.map -&\nx.map [&, &.toUpperCase()]\n```\n\n----------------------------------------\n\nTITLE: Property Access in Civet\nDESCRIPTION: Shows various property access syntaxes in Civet. Includes dot notation, quoted properties for special names, template string properties, array indexing, and length shorthand.\nSOURCE: https://github.com/DanielXMoore/Civet/blob/main/civet.dev/cheatsheet.md#2025-04-17_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n// Property Access\njson.x.y\njson.'long property'\njson.`${movie} name`\nmatrix.0.0\narray.-1\narray.#\n```\n\n----------------------------------------\n\nTITLE: JSX Syntax in Civet\nDESCRIPTION: Shows JSX syntax in Civet with enhanced features like better binding using props and @ prefix. Also demonstrates optional closing tags and class shorthand syntax.\nSOURCE: https://github.com/DanielXMoore/Civet/blob/main/civet.dev/cheatsheet.md#2025-04-17_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n// JSX\n// Better binding\n<button props.click> Click Me </Button>\n<button @click> Click Me Also </Button>\n\n// Closing is optional\n<div>\n  <button> Click Me\n\n// class shorthand\n<.items>\n  <.item>\n```\n\n----------------------------------------\n\nTITLE: Configuring Civet in Build Tools\nDESCRIPTION: Example of configuring Civet options within build tools using the civetPlugin. This approach allows for global configuration that overrides even config files.\nSOURCE: https://github.com/DanielXMoore/Civet/blob/main/civet.dev/config.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ncivetPlugin({\n  parseOptions: {\n    objectIs: true,\n    implicitReturns: false,\n    tab: 2,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Await Operators in Civet\nDESCRIPTION: Shows shorthand syntax for common Promise operations like Promise.all, Promise.allSettled, and Promise.race using the await operator with dot notation.\nSOURCE: https://github.com/DanielXMoore/Civet/blob/main/civet.dev/cheatsheet.md#2025-04-17_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n// Await operators\nawait.allSettled promises\nawait.all promises\nawait.race promises\n```\n\n----------------------------------------\n\nTITLE: Pipe Operator in Civet\nDESCRIPTION: Shows the pipe operator (|>) for sequential operations. Allows passing the result of one expression as an argument to the next function, supporting await, method calls, and function shorthands.\nSOURCE: https://github.com/DanielXMoore/Civet/blob/main/civet.dev/cheatsheet.md#2025-04-17_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\n// Pipe operator\ndata\n|> Object.keys\n|> console.log\n\nx.length\n|> & + 1\n|> .toString()\n\nfetch url\n|> await\n|> .json()\n|> await\n|> return\n\n// Pipe assignment\ndata |>= .content\n```\n\n----------------------------------------\n\nTITLE: Decorator Syntax in Civet\nDESCRIPTION: Civet uses @ for 'this', 'static', and 'constructor' shortcuts, so decorators need to be written with @@ prefix. Decorators also cannot appear on the same line as methods.\nSOURCE: https://github.com/DanielXMoore/Civet/blob/main/civet.dev/comparison.md#2025-04-17_snippet_8\n\nLANGUAGE: civet\nCODE:\n```\n@@Object.seal\nclass Civet\n  @name = \"Civet\"\n```\n\nLANGUAGE: civet\nCODE:\n```\nclass Civet\n  @@description translate \"Caffeine time!\"\n  drink()\n    @fetch @coffeeCup\n```\n\n----------------------------------------\n\nTITLE: Block Shorthand and Conditional Declarations in Civet\nDESCRIPTION: Shows block shorthand for map/filter operations using the placeholder ($) and conditional declaration patterns. Enables concise syntax for common operations and pattern matching.\nSOURCE: https://github.com/DanielXMoore/Civet/blob/main/civet.dev/cheatsheet.md#2025-04-17_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// Block shorthand\npeople.map .name // people.map($ => $.name)\nnumbers.filter & % 2 is 0\n// numbers.filter($ => $ % 2 === 0)\n\n// Conditional declarations\nthrow error if { error } := result\n\nif [, dir, base] := /^(.*\\/)?([^\\/]*)$/.exec file\n  console.log dir, base\n```\n\n----------------------------------------\n\nTITLE: Object Globs in Civet\nDESCRIPTION: Demonstrates object glob syntax for concisely extracting or creating objects with specific properties. Enables property spread, nested access, and destructuring in a compact form.\nSOURCE: https://github.com/DanielXMoore/Civet/blob/main/civet.dev/cheatsheet.md#2025-04-17_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n// Object globs\npoint = data{x,y}\npoint = data.{x,y};\npoint.{x,y} = data\npoint3D = { point.{x,y}, z: 0 }\ncomplex := obj.{x:a, b.c()?.y}\nmerged := data.{...global, ...user};\ndata.{a, b, ...rest} = result\n```\n\n----------------------------------------\n\nTITLE: Length Shorthand in Civet\nDESCRIPTION: Shows shorthand syntax for length operations using the # symbol. Simplifies working with array lengths in indexing, assignment, and calculations.\nSOURCE: https://github.com/DanielXMoore/Civet/blob/main/civet.dev/cheatsheet.md#2025-04-17_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\n// this.length shorthand\n@[#] = item\n@[index %% #]\nfloor # / 2\n```\n\n----------------------------------------\n\nTITLE: Thick Pipes in Civet\nDESCRIPTION: Demonstrates the thick pipe (||>) for method chaining and side effects. The thick pipe forwards the original value instead of the result of each operation, enabling fluent chaining on the same object.\nSOURCE: https://github.com/DanielXMoore/Civet/blob/main/civet.dev/cheatsheet.md#2025-04-17_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\n// Thick Pipes\narray\n||> .pop()\n||> .push 5\n||> .sort()\n||> .reverse()\n\ncount |> & + 1\n||> console.log\n|> & * 2\n||> console.log\n\nurl |> fetch |> await\n||> (response) => console.log response.status\n|> .json() |> await\n||> (json) => console.log \"json:\", json\n|> callback\n```\n\n----------------------------------------\n\nTITLE: Pattern Matching in Civet\nDESCRIPTION: Demonstrates pattern matching in switch statements. Allows matching against string literals, regular expressions, and other patterns without explicit comparison operators.\nSOURCE: https://github.com/DanielXMoore/Civet/blob/main/civet.dev/cheatsheet.md#2025-04-17_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n// Pattern Matching\nswitch s\n  \"\"\n    console.log \"nothing\"\n  /\\s+/\n    console.log \"whitespace\"\n  \"hi\"\n    console.log \"greeting\"\n```\n\n----------------------------------------\n\nTITLE: Custom Infix Operators\nDESCRIPTION: Shows how to define and use custom infix operators in Civet.\nSOURCE: https://github.com/DanielXMoore/Civet/blob/main/civet.dev/index.md#2025-04-17_snippet_3\n\nLANGUAGE: civet\nCODE:\n```\noperator {min, max} := Math\nvalue min ceiling max floor\n```\n\n----------------------------------------\n\nTITLE: Pattern Destructuring in Civet\nDESCRIPTION: Shows advanced pattern matching with destructuring in switch statements. Enables matching against object structures and extracting specific properties in a concise syntax.\nSOURCE: https://github.com/DanielXMoore/Civet/blob/main/civet.dev/cheatsheet.md#2025-04-17_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n// Pattern destructuring\nswitch x\n  [{type: \"text\", content: /\\s+/}, ...rest]\n    console.log \"leading whitespace\"\n  [{type: \"text\", content}, ...rest]\n    console.log \"leading text:\", content\n  [{type}, ...rest]\n    console.log \"leading type:\", type\n```\n\n----------------------------------------\n\nTITLE: Switch Statements in Civet\nDESCRIPTION: Shows switch statement syntax in Civet. The 'when'/'then' keywords are used instead of 'case'/'break', and indentation defines the scope of each case.\nSOURCE: https://github.com/DanielXMoore/Civet/blob/main/civet.dev/cheatsheet.md#2025-04-17_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// Switch\nswitch dir\n  when '>' then civet.x++\n  when '<'\n    civet.x--\n    civet.x = 0 if civet.x < 0\n  else\n    civet.waiting += 5\n```\n\n----------------------------------------\n\nTITLE: Configuring Civet with Vite\nDESCRIPTION: Setup code for integrating Civet with Vite bundler by adding the Civet plugin to the Vite configuration file.\nSOURCE: https://github.com/DanielXMoore/Civet/blob/main/source/unplugin/README.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// vite.config.ts\nimport { defineConfig } from 'vite'\nimport civetVitePlugin from '@danielx/civet/vite'\n\nexport default defineConfig({\n  // ...\n  plugins: [\n    civetVitePlugin({\n      // options\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Slicing and Splicing in Civet\nDESCRIPTION: Shows array slicing and splicing syntax in Civet. Enables extracting start, middle, or end portions of arrays using range notation, and modifying arrays with slice assignment.\nSOURCE: https://github.com/DanielXMoore/Civet/blob/main/civet.dev/cheatsheet.md#2025-04-17_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\n// slicing and splicing\nstart := numbers[..2]\nmid := numbers[3...-2]\nend := numbers[-2..]\nnumbers[1...-1] = []\n```\n\n----------------------------------------\n\nTITLE: Postfix Conditionals and Loops in Civet\nDESCRIPTION: Shows how to use postfix conditionals and loops in Civet. These allow for more concise expressions when the condition or loop body is simple.\nSOURCE: https://github.com/DanielXMoore/Civet/blob/main/civet.dev/cheatsheet.md#2025-04-17_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// Postfix loops/conditionals\nf(x) if x\nlog name for name of names\n```\n\n----------------------------------------\n\nTITLE: Configuring Civet with ESBuild\nDESCRIPTION: Setup code for integrating Civet with ESBuild by adding the Civet plugin to the ESBuild configuration.\nSOURCE: https://github.com/DanielXMoore/Civet/blob/main/source/unplugin/README.md#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport esbuild from 'esbuild'\nimport civetEsbuildPlugin from '@danielx/civet/esbuild'\n\nesbuild\n  .build({\n    // ...\n    // sourcemap: true, // build and link sourcemap files\n    plugins: [civetEsbuildPlugin()],\n  })\n  .catch(() => process.exit(1));\n```\n\n----------------------------------------\n\nTITLE: Implicit Return Behavior in Civet Functions\nDESCRIPTION: All functions in Civet implicitly return the value of their last statement. This can be disabled by adding a semicolon, declaring a void return type, or adding an explicit return statement.\nSOURCE: https://github.com/DanielXMoore/Civet/blob/main/civet.dev/comparison.md#2025-04-17_snippet_1\n\nLANGUAGE: civet\nCODE:\n```\nfunction more(x) {\n  x+1\n}\nfunction hello() {\n  console.log(\"Hello world!\")\n}\nfunction hello() {\n  console.log(\"Hello world!\");\n}\nfunction hello(): void {\n  console.log(\"Hello world!\")\n}\nfunction hello() {\n  console.log(\"Hello world!\")\n  return\n}\n```\n\nLANGUAGE: civet\nCODE:\n```\n(x) => x + 1\n(x) => x + 1;\n=> console.log(\"Hello world!\")\n=> console.log(\"Hello world!\");\n(x) => {\n  if (x > 5)\n    \"large\"\n  else\n    \"small\"\n}\n```\n\nLANGUAGE: civet\nCODE:\n```\n\"civet -implicitReturns\"\nfunction hello() {\n  console.log(\"Hello world!\")\n}\n=>\n  console.log(\"Hello world!\")\n(x) => x + 1\n```\n\n----------------------------------------\n\nTITLE: Configuring Civet with Webpack\nDESCRIPTION: Setup code for integrating Civet with Webpack bundler by adding the Civet plugin to the Webpack configuration file.\nSOURCE: https://github.com/DanielXMoore/Civet/blob/main/source/unplugin/README.md#2025-04-17_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst civetWebpackPlugin = require('@danielx/civet/webpack').default;\n\nmodule.exports = {\n  // ...\n  plugins: [\n    civetWebpackPlugin({\n      // options\n    }),\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Single-Argument Arrow Functions in Civet vs JavaScript\nDESCRIPTION: In Civet, arrow functions with a single argument require parentheses, unlike JavaScript where they're optional. This allows zero-argument functions to omit parentheses entirely in Civet.\nSOURCE: https://github.com/DanielXMoore/Civet/blob/main/civet.dev/comparison.md#2025-04-17_snippet_0\n\nLANGUAGE: civet\nCODE:\n```\n(x) => x + 1\n```\n\nLANGUAGE: typescript\nCODE:\n```\nx => x + 1\n```\n\nLANGUAGE: civet\nCODE:\n```\n=> console.log(\"Hello\")\n```\n\nLANGUAGE: civet\nCODE:\n```\ncreateEffect => console.log(signal())\n```\n\n----------------------------------------\n\nTITLE: Range Literals in Civet\nDESCRIPTION: Demonstrates range literal syntax for creating arrays of sequential values. Supports character ranges, numeric ranges, reverse ranges, and exclusive end ranges.\nSOURCE: https://github.com/DanielXMoore/Civet/blob/main/civet.dev/cheatsheet.md#2025-04-17_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n// Range literals\nletters := ['a'..'f']\nnumbers := [1..10]\nreversed := [10..1]\nindices := [0...array.length]\n```\n\n----------------------------------------\n\nTITLE: Transpiling Civet in ESM NodeJS\nDESCRIPTION: JavaScript code snippet demonstrating how to transpile Civet code to TypeScript or JavaScript within an ESM NodeJS application.\nSOURCE: https://github.com/DanielXMoore/Civet/blob/main/civet.dev/getting-started.md#2025-04-17_snippet_9\n\nLANGUAGE: js\nCODE:\n```\nimport {compile} from \"@danielx/civet\"\nconst tsCode = await compile(civetCode)\nconst tsCodeWithSourceMap = await compile(civetCode, {inlineMap: true})\nconst jsCode = await compile(civetCode, {js: true})\n```\n\n----------------------------------------\n\nTITLE: Indentation Significance in Civet\nDESCRIPTION: Civet uses indentation to define code blocks, requiring consistent indentation. This differs from JavaScript where indentation is cosmetic and doesn't affect program execution.\nSOURCE: https://github.com/DanielXMoore/Civet/blob/main/civet.dev/comparison.md#2025-04-17_snippet_4\n\nLANGUAGE: civet\nCODE:\n```\n(x) =>\n  console.log(\"Hello\")\n  x+1\n```\n\nLANGUAGE: civet\nCODE:\n```\nif (condition)\n  console.log(\"condition holds\")\n  console.log(\"condition still holds\")\n```\n\n----------------------------------------\n\nTITLE: Integrating Civet with esbuild\nDESCRIPTION: JavaScript code snippet demonstrating how to integrate Civet with esbuild using the Civet unplugin.\nSOURCE: https://github.com/DanielXMoore/Civet/blob/main/civet.dev/getting-started.md#2025-04-17_snippet_13\n\nLANGUAGE: js\nCODE:\n```\nimport esbuild from 'esbuild'\nimport civetPlugin from '@danielx/civet/esbuild'\n\nesbuild.build({\n  // ...\n  // sourcemap: true, // build and link sourcemap files\n  plugins: [\n    civetPlugin({\n      // Options and their defaults:\n      // emitDeclaration: false,         // generate .d.ts files?\n      // declarationExtension: '.civet.d.ts', // extension for .d.ts files\n      // implicitExtension: true,        // import \"./x\" checks for x.civet\n      // outputExtension: '.tsx',        // appended to .civet internally\n      // ts: 'civet',                    // TS -> JS transpilation mode\n      // typecheck: false,               // check types via tsc\n      // cache: true,                    // cache compilation results based on mtime, useful for watch\n      // config: null,                   // Civet config filename; null to skip\n      // parseOptions: {                 // directives to apply globally\n      //   comptime: false,              // evaluate comptime blocks\n      // },\n    })\n  ]\n}).catch(() => process.exit(1))\n```\n\n----------------------------------------\n\nTITLE: Operator Spacing Rules in Civet\nDESCRIPTION: Civet requires consistent operator spacing due to its implicit function call syntax. Unary operators cannot have spaces after them, binary operators need symmetric spacing, and certain operators have specific spacing requirements.\nSOURCE: https://github.com/DanielXMoore/Civet/blob/main/civet.dev/comparison.md#2025-04-17_snippet_2\n\nLANGUAGE: civet\nCODE:\n```\nx+y    // addition\nx + y  // addition\nx +y   // unary\n//invalid: + y\n```\n\nLANGUAGE: civet\nCODE:\n```\nx/y/z      // division\nx / y / z  // division\nx /y/ z    // regular expression\n//invalid: x /y\n```\n\nLANGUAGE: civet\nCODE:\n```\nx<y>z      // comparison\nx < y > z  // comparison\n// JSX:\nx <y> z\n//invalid: x <y\n```\n\n----------------------------------------\n\nTITLE: Configuring Civet with tsup\nDESCRIPTION: TypeScript configuration file for integrating Civet with tsup, a zero-config TypeScript bundler.\nSOURCE: https://github.com/DanielXMoore/Civet/blob/main/civet.dev/getting-started.md#2025-04-17_snippet_14\n\nLANGUAGE: js\nCODE:\n```\n// tsup.config.ts\nimport { defineConfig } from 'tsup';\nimport civetPlugin from '@danielx/civet/esbuild';\n\nexport default defineConfig({\n  entryPoints: ['main.civet'],\n  esbuildPlugins: [\n    civetPlugin({\n      // options\n    }),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: JSX Implementation in Civet\nDESCRIPTION: Civet requires proper indentation for JSX children to enable automatic tag closing. It also automatically combines consecutive JSX tags at the same indentation level into JSX fragments.\nSOURCE: https://github.com/DanielXMoore/Civet/blob/main/civet.dev/comparison.md#2025-04-17_snippet_9\n\nLANGUAGE: civet\nCODE:\n```\n<div>\n  <h1>Hello</h1>\n  <p>Text</p>\n\"not inside div anymore\"\n```\n\nLANGUAGE: civet\nCODE:\n```\n\"civet coffeeJSX\"\n<div>\n  <h1>Hello</h1>\n  <p>Text</p>\nstill inside div\n</div>\n```\n\nLANGUAGE: civet\nCODE:\n```\n<h1>Hello</h1>\n<p>Text</p>\n```\n\n----------------------------------------\n\nTITLE: Advanced ESLint Configuration\nDESCRIPTION: Complex ESLint configuration demonstrating explicit file matching and plugin configuration for Civet files.\nSOURCE: https://github.com/DanielXMoore/Civet/blob/main/integration/eslint/README.md#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport civetPlugin from \"eslint-plugin-civet\"\nimport js from \"@eslint/js\"\n\nexport default [\n  // Enable recommended rules for all files\n  js.configs.recommended,\n  // Load plugin and enable processor for .civet files\n  {\n    files: [\"**/*.civet\"],\n    plugins: {\n      civet: civetPlugin,\n    },\n    processor: \"civet/civet\",\n    // Here is where you would override specific rules.\n    // We provide an `overrides` rule set that disables rules that\n    // don't work well with Civet output.\n    ...civetPlugin.configs.overrides,\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Civet with Local Directive\nDESCRIPTION: Example of specifying Civet configuration options using a local directive at the top of a Civet file. This enables object comparison with Object.is, disables implicit returns, and sets tab width to 2 spaces.\nSOURCE: https://github.com/DanielXMoore/Civet/blob/main/civet.dev/config.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n\"civet objectIs -implicit-returns tab=2\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Decorators in Civet\nDESCRIPTION: Example of Civet's decorator syntax using @@ instead of @ for class and method decorators, as @ is reserved for this.id and static fields/methods.\nSOURCE: https://github.com/DanielXMoore/Civet/blob/main/README.md#2025-04-17_snippet_2\n\nLANGUAGE: civet\nCODE:\n```\n@@classDecorator\nclass X\n  @@methodDecorator\n  method() {}\n```\n\n----------------------------------------\n\nTITLE: TypeScript ESLint Configuration (CommonJS)\nDESCRIPTION: CommonJS configuration file for using typescript-eslint with Civet files.\nSOURCE: https://github.com/DanielXMoore/Civet/blob/main/integration/eslint/README.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst civetPlugin = require(\"eslint-plugin-civet/ts\")\n\nmodule.exports = [\n  // Rules from eslint.configs.recommended\n  ...civetPlugin.configs.jsRecommended,\n  // Rules from tseslint.configs.strict\n  ...civetPlugin.configs.strict,\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Civet via API\nDESCRIPTION: Example of using the Civet compilation API to set configuration options. This demonstrates how to compile Civet code with specific parse options.\nSOURCE: https://github.com/DanielXMoore/Civet/blob/main/civet.dev/config.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport {compile} from \"@danielx/civet\"\nconst code = await compile(civetCode, {\n  parseOptions: {\n    objectIs: true,\n    implicitReturns: false,\n    tab: 2,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Custom Civet Compiler Configuration\nDESCRIPTION: Example of customizing the Civet compiler configuration with additional options.\nSOURCE: https://github.com/DanielXMoore/Civet/blob/main/integration/eslint/README.md#2025-04-17_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { civet } from \"eslint-plugin-civet\"\nconst civetPlugin = civet({\n  parseOptions: {\n    // coffeeCompat: true,\n    // ...\n  },\n})\n// rest as before\n```\n\n----------------------------------------\n\nTITLE: Loading Civet Config Files via API\nDESCRIPTION: Example of using the Civet config module to find and load configuration files. This demonstrates how to locate config files in directories and use them for compilation.\nSOURCE: https://github.com/DanielXMoore/Civet/blob/main/civet.dev/config.md#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { findInDir, findConfig, loadConfig } from \"@danielx/civet/config\"\n// Look for standard name for config file in specified directory\nconst path1 = await findInDir(process.cwd())\n// Look for standard name for config file in specified directory or ancestors\nconst path2 = await findConfig(process.cwd())\n// Load config file from specified path\nconst config = await loadConfig(path)\n// Pass config to compile\nconst code = await compile(civetCode, config)\n```\n\n----------------------------------------\n\nTITLE: Braced Block Rules in Civet\nDESCRIPTION: Civet allows braced blocks but has restrictions to avoid conflicts with object literals. One-line braced blocks must be on the same line as their control statement.\nSOURCE: https://github.com/DanielXMoore/Civet/blob/main/civet.dev/comparison.md#2025-04-17_snippet_5\n\nLANGUAGE: civet\nCODE:\n```\n// block\nif (x) { y }\n// not a block\nif (x)\n{ y }\n```\n\n----------------------------------------\n\nTITLE: Configuring Gulp Task for Civet Compilation in JavaScript\nDESCRIPTION: This snippet demonstrates how to set up a Gulp task to compile Civet files. It uses the gulp-civet plugin to process .civet files and output them as JavaScript files. The task includes options for specifying the output file extension and enabling JavaScript mode.\nSOURCE: https://github.com/DanielXMoore/Civet/blob/main/integration/gulp/README.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst civet = require('gulp-civet');\n\ngulp.task('civet', () => {\n  gulp.src('./src/*.civet')\n  .pipe(civet({\n    extension: '.js',\n    js: true,\n  })\n  .pipe(gulp.dest('./dist'));\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript for Civet\nDESCRIPTION: Example tsconfig.json file for using TypeScript with Civet, including recommended compiler options.\nSOURCE: https://github.com/DanielXMoore/Civet/blob/main/civet.dev/getting-started.md#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"jsx\": \"preserve\",\n    \"lib\": [\"es2021\"],\n    \"moduleResolution\": \"bundler\",\n    \"forceConsistentCasingInFileNames\": true,\n    \"resolveJsonModule\": true,\n    \"esModuleInterop\": true\n  },\n  \"ts-node\": {\n    \"transpileOnly\": true,\n    \"compilerOptions\": {\n      \"module\": \"nodenext\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Inline Civet Code in HTML\nDESCRIPTION: Example of embedding Civet code directly in an HTML document using a script tag with type=\"text/civet\".\nSOURCE: https://github.com/DanielXMoore/Civet/blob/main/integration/script/README.md#2025-04-17_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"text/civet\">\n  console.log 'Hello from Civet!'\n</script>\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Civet CLI Commands\nDESCRIPTION: Command-line instructions for installing Civet globally and running various operations including REPL, file compilation, and script execution.\nSOURCE: https://github.com/DanielXMoore/Civet/blob/main/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Install\nnpm install -g @danielx/civet\n# Run Civet code directly in a REPL\ncivet\n# Transpile typed Civet code into TypeScript in a REPL\ncivet -c\n# Compile Civet source file to TypeScript\ncivet < source.civet > output.ts\n# Execute a .civet script\ncivet source.civet ...args...\n# Execute a .civet source file in node\nnode --import @danielx/civet/register source.civet\n```\n\n----------------------------------------\n\nTITLE: Private This Shorthand Syntax\nDESCRIPTION: Implementation adding support for private this shorthand notation in Civet, referenced in version 0.6.23.\nSOURCE: https://github.com/DanielXMoore/Civet/blob/main/CHANGELOG.md#2025-04-17_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n@field\n```\n\n----------------------------------------\n\nTITLE: Loading External Civet Files in HTML\nDESCRIPTION: Example of loading Civet code from an external file using a script tag with the src attribute.\nSOURCE: https://github.com/DanielXMoore/Civet/blob/main/integration/script/README.md#2025-04-17_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"text/civet\" src=\"filename.civet\"></script>\n```\n\n----------------------------------------\n\nTITLE: Installing Civet as a Project Dependency\nDESCRIPTION: Command to install Civet as a development dependency in an npm project.\nSOURCE: https://github.com/DanielXMoore/Civet/blob/main/civet.dev/getting-started.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i -D @danielx/civet\n```\n\n----------------------------------------\n\nTITLE: Installing Civet Globally\nDESCRIPTION: Command to install Civet globally, enabling the 'civet' command-line interface.\nSOURCE: https://github.com/DanielXMoore/Civet/blob/main/civet.dev/getting-started.md#2025-04-17_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm i -g @danielx/civet\n```\n\n----------------------------------------\n\nTITLE: Executing Civet in Node with Register\nDESCRIPTION: Command to execute a Civet source file in Node using the Civet register.\nSOURCE: https://github.com/DanielXMoore/Civet/blob/main/civet.dev/getting-started.md#2025-04-17_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nnode --import @danielx/civet/register source.civet ...args...\n```\n\n----------------------------------------\n\nTITLE: For Own..In Loop Syntax\nDESCRIPTION: New loop syntax for iterating over own properties, introduced in version 0.6.23.\nSOURCE: https://github.com/DanielXMoore/Civet/blob/main/CHANGELOG.md#2025-04-17_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nfor own key in object\n```\n\n----------------------------------------\n\nTITLE: Compiling Multiple Civet Files\nDESCRIPTION: Command to compile multiple Civet source files to TypeScript with the default .civet.tsx extension.\nSOURCE: https://github.com/DanielXMoore/Civet/blob/main/civet.dev/getting-started.md#2025-04-17_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\ncivet -c *.civet\n```\n\n----------------------------------------\n\nTITLE: Compiling Civet to JavaScript\nDESCRIPTION: Command to compile multiple Civet source files to JavaScript with .js extension.\nSOURCE: https://github.com/DanielXMoore/Civet/blob/main/civet.dev/getting-started.md#2025-04-17_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\ncivet --js -c *.civet -o .js\n```\n\n----------------------------------------\n\nTITLE: NonNullable Type Shorthand\nDESCRIPTION: Example showing the new T! type shorthand syntax for NonNullable<T>\nSOURCE: https://github.com/DanielXMoore/Civet/blob/main/CHANGELOG.md#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nT!\n```\n\n----------------------------------------\n\nTITLE: Transpiling Civet to TypeScript\nDESCRIPTION: Command to transpile a Civet source file to TypeScript using stdin and stdout.\nSOURCE: https://github.com/DanielXMoore/Civet/blob/main/civet.dev/getting-started.md#2025-04-17_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nnpx @danielx/civet < source.civet > output.ts\n```\n\n----------------------------------------\n\nTITLE: Initializing Vue Component with TypeScript Setup\nDESCRIPTION: Sets up a Vue.js component with TypeScript, importing necessary components and initializing page data. Includes playground component setup and version badge display.\nSOURCE: https://github.com/DanielXMoore/Civet/blob/main/civet.dev/playground.md#2025-04-17_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport PlaygroundFull from './.vitepress/components/PlaygroundFull.vue'\nimport VPBadge from 'vitepress/dist/client/theme-default/components/VPBadge.vue';\nimport { useData } from 'vitepress';\nconst data = useData().page.value;\n</script>\n\n<h1>\n  Playground <VPBadge type=\"info\">Civet {{ data.civetVersion }}</VPBadge>\n</h1>\n<p>Copy the URL to share your code!</p>\n\n<ClientOnly>\n  <PlaygroundFull />\n</ClientOnly>\n```\n\n----------------------------------------\n\nTITLE: Typechecking Civet Code\nDESCRIPTION: Command to run TypeScript to check for type errors in Civet code.\nSOURCE: https://github.com/DanielXMoore/Civet/blob/main/civet.dev/getting-started.md#2025-04-17_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\ncivet --typecheck\n```\n\n----------------------------------------\n\nTITLE: Label Syntax in Civet\nDESCRIPTION: Civet defines labels with a leading colon (:label) instead of JavaScript's trailing colon syntax (label:). This enables most object literals to not require braces.\nSOURCE: https://github.com/DanielXMoore/Civet/blob/main/civet.dev/comparison.md#2025-04-17_snippet_7\n\nLANGUAGE: civet\nCODE:\n```\n:label while (true) {\n  break label\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Civet Files as Web Workers in Vite\nDESCRIPTION: Example showing how to import Civet files as Web Workers using Vite's query suffix and constructor syntax approaches.\nSOURCE: https://github.com/DanielXMoore/Civet/blob/main/source/unplugin/README.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport MyWorker from './worker.civet?worker'\n```\n\nLANGUAGE: typescript\nCODE:\n```\nworker = new Worker(new URL('./worker.civet.tsx', import.meta.url))\n//or\nworker = new Worker(new URL('./worker.civet.tsx', import.meta.url), { type: 'module' })\n```\n\n----------------------------------------\n\nTITLE: Configuring Civet with JSON Config File\nDESCRIPTION: Example of a JSON configuration file for Civet, equivalent to the local directive example. This configuration can be used in various config files like civet.config.json or package.json.\nSOURCE: https://github.com/DanielXMoore/Civet/blob/main/civet.dev/config.md#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"parseOptions\": {\n    \"objectIs\": true,\n    \"implicitReturns\": false,\n    \"tab\": 2\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Automatic Semicolon Insertion in Civet\nDESCRIPTION: Civet has different rules for statement separation compared to JavaScript's automatic semicolon insertion. Binary operators and member access can continue on the next line with proper spacing.\nSOURCE: https://github.com/DanielXMoore/Civet/blob/main/civet.dev/comparison.md#2025-04-17_snippet_6\n\nLANGUAGE: civet\nCODE:\n```\nx +\ny\n- z\n-negative\n[array]\n.length\n{name: value}\n```\n\n----------------------------------------\n\nTITLE: Configuring Civet with Rollup\nDESCRIPTION: Setup code for integrating Civet with Rollup bundler by adding the Civet plugin to the Rollup configuration file.\nSOURCE: https://github.com/DanielXMoore/Civet/blob/main/source/unplugin/README.md#2025-04-17_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// rollup.config.ts\nimport civetRollupPlugin from '@danielx/civet/rollup';\n\nexport default {\n  // ...\n  plugins: [\n    civetRollupPlugin({\n      // options\n    }),\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Shebang in Civet Scripts\nDESCRIPTION: Example of a Civet script with a shebang line that is preserved unmodified in the output, allowing for direct script execution.\nSOURCE: https://github.com/DanielXMoore/Civet/blob/main/README.md#2025-04-17_snippet_3\n\nLANGUAGE: civet\nCODE:\n```\n#!./node_modules/.bin/ts-node\nconsole.log \"hi\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Civet with Rolldown\nDESCRIPTION: Setup code for integrating Civet with Rolldown bundler by adding the Civet plugin to the Rolldown configuration file.\nSOURCE: https://github.com/DanielXMoore/Civet/blob/main/source/unplugin/README.md#2025-04-17_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// rolldown.config.ts\nimport { defineConfig } from 'rolldown'\nimport civetRolldownPlugin from '@danielx/civet/rolldown'\n\nexport default defineConfig({\n  // ...\n  plugins: [\n    civetRolldownPlugin({\n      // options\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring ESBuild with Civet Plugin\nDESCRIPTION: JavaScript configuration to set up esbuild with the Civet plugin for building and packaging Civet projects efficiently.\nSOURCE: https://github.com/DanielXMoore/Civet/blob/main/README.md#2025-04-17_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport esbuild from 'esbuild'\nimport civetPlugin from '@danielx/civet/esbuild-plugin'\n\nesbuild.build({\n  ...,\n  plugins: [\n    civetPlugin\n  ]\n}).catch(() => process.exit(1))\n```\n\n----------------------------------------\n\nTITLE: Loading Civet Browser Build from CDN\nDESCRIPTION: Includes the Civet browser build from CDN to enable Civet script tag support in HTML documents.\nSOURCE: https://github.com/DanielXMoore/Civet/blob/main/integration/script/README.md#2025-04-17_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://cdn.jsdelivr.net/npm/@danielx/civet/dist/browser.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Civet for Astro Workers\nDESCRIPTION: Configuration for enabling Civet in Astro's Web Worker build process by adding the Vite plugin to vite.worker.plugins option.\nSOURCE: https://github.com/DanielXMoore/Civet/blob/main/source/unplugin/README.md#2025-04-17_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// astro.config.ts\nimport { defineConfig } from 'astro/config'\nimport civet from '@danielx/civet/astro'\nimport civetVitePlugin from '@danielx/civet/vite'\n\n// https://astro.build/config\nexport default defineConfig({\n  // ...\n  integrations: [\n    civet({\n      // options\n    }),\n  ],\n  vite: {\n    worker: {\n      plugins: () => [\n        civetVitePlugin({\n          // options\n        }),\n      ],\n      // format: \"es\",  // if using { type: 'module' }\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Disabling Initial Civet Script Execution\nDESCRIPTION: Configuration to disable only the initial loading of Civet scripts while keeping automatic execution of dynamically added scripts.\nSOURCE: https://github.com/DanielXMoore/Civet/blob/main/integration/script/README.md#2025-04-17_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://cdn.jsdelivr.net/npm/@danielx/civet/dist/browser.js\" no-start-scripts></script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest for Civet Files in JavaScript\nDESCRIPTION: Example Jest configuration file (jest.config.mjs) that enables testing of Civet files by adding the .civet extension to the list of supported file extensions and configuring the civet-jest transformer.\nSOURCE: https://github.com/DanielXMoore/Civet/blob/main/integration/jest/README.md#2025-04-17_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport {defaults} from 'jest-config'\n\nexport default {\n  extensionsToTreatAsEsm: [ '.civet' ],\n  moduleFileExtensions: [ ...defaults.moduleFileExtensions, 'civet' ],\n  testMatch: [ '<rootDir>/test/**/*.civet' ],\n  transform: {\n    '\\\\.civet': 'civet-jest',\n  },\n  verbose: true,\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Package.json for Civet with Mocha and c8\nDESCRIPTION: Configuration for package.json to set up testing with Mocha and code coverage with c8 for Civet files, specifying extensions and loaders.\nSOURCE: https://github.com/DanielXMoore/Civet/blob/main/README.md#2025-04-17_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n  \"scripts\": {\n    \"test\": \"c8 mocha\",\n    ...\n  },\n  \"c8\": {\n    \"extension\": [\n      \".civet\"\n    ]\n  },\n  \"mocha\": {\n    \"extension\": [\n      \"civet\"\n    ],\n    \"loader\": [\n      \"@danielx/civet/esm\"\n    ],\n    ...\n  ...\n```\n\n----------------------------------------\n\nTITLE: Disabling Dynamic Civet Script Execution\nDESCRIPTION: Configuration to disable only automatically executing dynamically added Civet scripts while keeping initial script execution.\nSOURCE: https://github.com/DanielXMoore/Civet/blob/main/integration/script/README.md#2025-04-17_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://cdn.jsdelivr.net/npm/@danielx/civet/dist/browser.js\" no-auto-scripts></script>\n```\n\n----------------------------------------\n\nTITLE: Configuring package.json for Jest with ES Modules\nDESCRIPTION: Enhanced package.json configuration for running Jest tests with Civet files in ESM mode, using cross-env to set the experimental VM modules flag.\nSOURCE: https://github.com/DanielXMoore/Civet/blob/main/integration/jest/README.md#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"test\": \"cross-env NODE_OPTIONS=--experimental-vm-modules jest\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Civet with Astro\nDESCRIPTION: Setup code for integrating Civet with Astro by adding the Civet integration to the Astro configuration file.\nSOURCE: https://github.com/DanielXMoore/Civet/blob/main/source/unplugin/README.md#2025-04-17_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// astro.config.ts\nimport { defineConfig } from 'astro/config'\nimport civet from '@danielx/civet/astro'\n\n// https://astro.build/config\nexport default defineConfig({\n  // ...\n  integrations: [\n    civet({\n      // options\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring package.json for Jest with CommonJS\nDESCRIPTION: Basic package.json configuration for running Jest tests with Civet files in CommonJS mode, using a simple test script command.\nSOURCE: https://github.com/DanielXMoore/Civet/blob/main/integration/jest/README.md#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"test\": \"jest\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Civet Tests with npm/yarn\nDESCRIPTION: Command to execute tests for Civet files using yarn or npm after configuring the test environment.\nSOURCE: https://github.com/DanielXMoore/Civet/blob/main/README.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nyarn test\n```\n\n----------------------------------------\n\nTITLE: Configuring Civet with Farm\nDESCRIPTION: Setup code for integrating Civet with Farm bundler by adding the Civet plugin to the Farm configuration file.\nSOURCE: https://github.com/DanielXMoore/Civet/blob/main/source/unplugin/README.md#2025-04-17_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// farm.config.ts\nimport { defineConfig } from '@farmfe/core'\nimport civetFarmPlugin from '@danielx/civet/farm'\n\nexport default defineConfig({\n  // ...\n  plugins: [\n    civetFarmPlugin({\n      // options\n    })\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: TypeScript ESLint Configuration (ESM)\nDESCRIPTION: ESM configuration file for using typescript-eslint with Civet files.\nSOURCE: https://github.com/DanielXMoore/Civet/blob/main/integration/eslint/README.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport civetPlugin from \"eslint-plugin-civet/ts\"\n\nexport default [\n  // Rules from eslint.configs.recommended\n  ...civetPlugin.configs.jsRecommended,\n  // Rules from tseslint.configs.strict\n  ...civetPlugin.configs.strict,\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Civet for Vite Workers\nDESCRIPTION: Configuration for enabling Civet in Vite's Web Worker build process by adding the plugin to worker.plugins option.\nSOURCE: https://github.com/DanielXMoore/Civet/blob/main/source/unplugin/README.md#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// vite.config.ts\nimport { defineConfig } from 'vite'\nimport civetVitePlugin from '@danielx/civet/vite'\n\nexport default defineConfig({\n  // ...\n  plugins: [\n    civetVitePlugin({\n      // options\n    }),\n  ],\n  worker: {\n    plugins: () => [\n      civetVitePlugin({\n        // options\n      }),\n    ],\n    // format: \"es\",  // if using { type: 'module' }\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: JavaScript ESLint Configuration (ESM)\nDESCRIPTION: ESM configuration file for using plain JavaScript ESLint with Civet files.\nSOURCE: https://github.com/DanielXMoore/Civet/blob/main/integration/eslint/README.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport civetPlugin from \"eslint-plugin-civet\"\n\nexport default [\n  ...civetPlugin.configs.recommended\n]\n```\n\n----------------------------------------\n\nTITLE: Transpiling Civet in CommonJS NodeJS\nDESCRIPTION: JavaScript code snippet showing how to transpile Civet code to TypeScript or JavaScript within a CommonJS NodeJS application.\nSOURCE: https://github.com/DanielXMoore/Civet/blob/main/civet.dev/getting-started.md#2025-04-17_snippet_10\n\nLANGUAGE: js\nCODE:\n```\n{compile} = require(\"@danielx/civet\")\n// rest as above\n```\n\n----------------------------------------\n\nTITLE: JavaScript ESLint Configuration (CommonJS)\nDESCRIPTION: CommonJS configuration file for using plain JavaScript ESLint with Civet files.\nSOURCE: https://github.com/DanielXMoore/Civet/blob/main/integration/eslint/README.md#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = [\n  ...require(\"eslint-plugin-civet\").configs.recommended\n]\n```\n\n----------------------------------------\n\nTITLE: Generating Declaration Files\nDESCRIPTION: Command to generate .d.ts declaration files for Civet code using TypeScript.\nSOURCE: https://github.com/DanielXMoore/Civet/blob/main/civet.dev/getting-started.md#2025-04-17_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\ncivet --emit-declaration\n```\n\n----------------------------------------\n\nTITLE: Configuring Metro and Babel for Civet in React Native\nDESCRIPTION: This diff shows the necessary changes to metro.config.js and babel.config.js files to enable Civet support in a React Native project. It adds the .civet extension to Metro's source extensions and includes the Civet Babel plugin.\nSOURCE: https://github.com/DanielXMoore/Civet/blob/main/integration/metro/README.md#2025-04-17_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n// include .civet files to module resolution in metro.config.js\n-const config = {};\n+const config = {\n+  resolver: {\n+    sourceExts: ['js', 'jsx', 'json', 'ts', 'tsx', 'civet'],\n+  },\n+};\n\n// add plugin in babel.config.js\n module.exports = {\n   presets: ['module:@react-native/babel-preset'],\n+  plugins: [['@danielx/civet/babel-plugin']],\n+  sourceMaps: 'inline',\n };\n```\n\n----------------------------------------\n\nTITLE: Executing Civet Source File\nDESCRIPTION: Command to execute a Civet source file directly.\nSOURCE: https://github.com/DanielXMoore/Civet/blob/main/civet.dev/getting-started.md#2025-04-17_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncivet source.civet ...args...\n```\n\n----------------------------------------\n\nTITLE: Disabling Automatic Civet Script Execution\nDESCRIPTION: Configuration to disable all automatic execution of Civet script tags by adding the no-scripts attribute to the Civet loader script.\nSOURCE: https://github.com/DanielXMoore/Civet/blob/main/integration/script/README.md#2025-04-17_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://cdn.jsdelivr.net/npm/@danielx/civet/dist/browser.js\" no-scripts></script>\n```\n\n----------------------------------------\n\nTITLE: Executing Civet with ts-node\nDESCRIPTION: Command to execute a Civet or TypeScript source file that mixes Civet and TypeScript code using ts-node.\nSOURCE: https://github.com/DanielXMoore/Civet/blob/main/civet.dev/getting-started.md#2025-04-17_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nnode --loader ts-node/esm --loader @danielx/civet/esm source.civet ...args...\n```\n\n----------------------------------------\n\nTITLE: Using Coffee Compatibility Options in Civet\nDESCRIPTION: Examples of how to use CoffeeScript compatibility options in Civet, including enabling all features at once, selecting specific features, or gradually removing features during migration.\nSOURCE: https://github.com/DanielXMoore/Civet/blob/main/notes/Comparison-to-CoffeeScript.md#2025-04-17_snippet_0\n\nLANGUAGE: civet\nCODE:\n```\n\"civet coffeeCompat\"\n```\n\nLANGUAGE: civet\nCODE:\n```\n\"civet coffeeComment coffeeEq coffeeInterpolation\"\n```\n\nLANGUAGE: civet\nCODE:\n```\n\"civet coffeeCompat -coffeeBooleans -coffeeComment -coffeeEq\"\n```\n\nLANGUAGE: civet\nCODE:\n```\n\"civet coffee-compat\"\n```\n\n----------------------------------------\n\nTITLE: Installing ESLint Plugin Dependencies\nDESCRIPTION: Command to install the necessary npm packages including the Civet ESLint plugin and its dependencies.\nSOURCE: https://github.com/DanielXMoore/Civet/blob/main/integration/eslint/README.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install -D eslint-plugin-civet @danielx/civet eslint @eslint/js typescript-eslint\n```\n\n----------------------------------------\n\nTITLE: Identity Function Shorthand\nDESCRIPTION: Shorthand syntax for identity function using (&), added in version 0.6.28.\nSOURCE: https://github.com/DanielXMoore/Civet/blob/main/CHANGELOG.md#2025-04-17_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n(&)\n```\n\n----------------------------------------\n\nTITLE: VS Code ESLint Extension Configuration\nDESCRIPTION: JSON configuration for VS Code settings to enable ESLint validation for Civet files.\nSOURCE: https://github.com/DanielXMoore/Civet/blob/main/integration/eslint/README.md#2025-04-17_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"eslint.validate\": [\n    \"astro\",\n    \"civet\",\n    \"javascript\",\n    \"javascriptreact\",\n    \"typescript\",\n    \"typescriptreact\",\n    \"html\",\n    \"mdx\",\n    \"vue\",\n    \"markdown\",\n    \"json\",\n    \"jsonc\"\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Version History Documentation in Markdown\nDESCRIPTION: Markdown formatted changelog entries documenting version releases from 0.8.7 to 0.8.16, including links to diffs and commits, along with detailed descriptions of changes and fixes.\nSOURCE: https://github.com/DanielXMoore/Civet/blob/main/CHANGELOG.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.8.16 (2024-11-22, [diff](https://github.com/DanielXMoore/Civet/compare/v0.8.15...v0.8.16), [commits](https://github.com/DanielXMoore/Civet/commits/v0.8.16))\n* `for join` reduction to concatenate strings [[#1604](https://github.com/DanielXMoore/Civet/pull/1604)]\n* Numeric object keys in pattern matching [[#1608](https://github.com/DanielXMoore/Civet/pull/1608)]\n* Fix trailing member/call behavior [[#1609](https://github.com/DanielXMoore/Civet/pull/1609)]\n```\n\n----------------------------------------\n\nTITLE: CLI Compilation Mode\nDESCRIPTION: Command to run Civet CLI in compilation mode for testing code snippets\nSOURCE: https://github.com/DanielXMoore/Civet/blob/main/CONTRIBUTING.md#2025-04-17_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ndist/civet -c\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Hera Transpiler Plugin for Civet\nDESCRIPTION: Example of how to create a custom Hera transpiler plugin for the Civet language server. This plugin enables the processing of .hera files by importing the Hera compiler and defining a transpiler object with the appropriate extension, target format, and compile function.\nSOURCE: https://github.com/DanielXMoore/Civet/blob/main/lsp/README.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Hera from \"@danielx/hera\"\nconst { compile: heraCompile } = Hera\n\nexport default {\n  transpilers: [{\n    extension: \".hera\",\n    target: \".cjs\",\n    compile: function (path, source) {\n      const code = heraCompile(source, {\n        filename: path,\n      })\n\n      return {\n        code\n      }\n    }\n  }],\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Triple Slash Directive\nDESCRIPTION: Support for TypeScript /// directive syntax, added in version 0.6.29.\nSOURCE: https://github.com/DanielXMoore/Civet/blob/main/CHANGELOG.md#2025-04-17_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n/// <reference path=\"...\" />\n```\n\n----------------------------------------\n\nTITLE: Publishing VSCode Extension using vsce\nDESCRIPTION: Command to publish the extension to the VSCode marketplace. Requires setting up credentials according to VSCode's extension publishing documentation.\nSOURCE: https://github.com/DanielXMoore/Civet/blob/main/lsp/NOTES.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn vsce-publish\n```\n\n----------------------------------------\n\nTITLE: Compound Type Annotation Example\nDESCRIPTION: Example demonstrating breaking change in type annotation parsing where '&: number | string' is now treated as '(&: number) | string'\nSOURCE: https://github.com/DanielXMoore/Civet/blob/main/CHANGELOG.md#2025-04-17_snippet_1\n\nLANGUAGE: civet\nCODE:\n```\n&: number | string\n```\n\n----------------------------------------\n\nTITLE: JavaScript Generation Mode\nDESCRIPTION: Command to generate pure JavaScript output without TypeScript\nSOURCE: https://github.com/DanielXMoore/Civet/blob/main/CONTRIBUTING.md#2025-04-17_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ndist/civet -c --js\n```\n\n----------------------------------------\n\nTITLE: Publishing to Open VSX Registry\nDESCRIPTION: Command to publish the extension to the Open VSX registry using a token stored in a file. The token needs to be generated from the Open VSX platform.\nSOURCE: https://github.com/DanielXMoore/Civet/blob/main/lsp/NOTES.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\novsx publish -p $(<open-vsx-token)\n```\n\n----------------------------------------\n\nTITLE: Nested Function Argument Syntax\nDESCRIPTION: Example showing nested argument usage requiring &. prefix to avoid being treated as trailing member access\nSOURCE: https://github.com/DanielXMoore/Civet/blob/main/CHANGELOG.md#2025-04-17_snippet_2\n\nLANGUAGE: civet\nCODE:\n```\n&.\n```\n\n----------------------------------------\n\nTITLE: Building Civet Using Yarn\nDESCRIPTION: Basic commands for building the Civet project using Yarn, including multi-threaded build option\nSOURCE: https://github.com/DanielXMoore/Civet/blob/main/CONTRIBUTING.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nyarn\nyarn build\n```\n\n----------------------------------------\n\nTITLE: AST Mode Command\nDESCRIPTION: Command to view the Abstract Syntax Tree output for parsed code\nSOURCE: https://github.com/DanielXMoore/Civet/blob/main/CONTRIBUTING.md#2025-04-17_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ndist/civet --ast\n```\n\n----------------------------------------\n\nTITLE: Multi-threaded Civet Testing\nDESCRIPTION: Command to run tests using multiple processor cores\nSOURCE: https://github.com/DanielXMoore/Civet/blob/main/CONTRIBUTING.md#2025-04-17_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nCIVET_THREADS=4 yarn test\n```\n\n----------------------------------------\n\nTITLE: Multi-threaded Civet Build\nDESCRIPTION: Command to build Civet using multiple processor cores\nSOURCE: https://github.com/DanielXMoore/Civet/blob/main/CONTRIBUTING.md#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nCIVET_THREADS=4 yarn build\n```\n\n----------------------------------------\n\nTITLE: Exclusive Test Case Example\nDESCRIPTION: Example showing how to run a single test case using Mocha's .only suffix\nSOURCE: https://github.com/DanielXMoore/Civet/blob/main/CONTRIBUTING.md#2025-04-17_snippet_4\n\nLANGUAGE: coffee\nCODE:\n```\ntestCase.only \"\"\"\n  ...\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Running Civet Tests\nDESCRIPTION: Commands for running the test suite, including single-threaded and multi-threaded options\nSOURCE: https://github.com/DanielXMoore/Civet/blob/main/CONTRIBUTING.md#2025-04-17_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nyarn test\n```\n\n----------------------------------------\n\nTITLE: Parser Tracing Command\nDESCRIPTION: Command to generate detailed parser rule tracing output for debugging\nSOURCE: https://github.com/DanielXMoore/Civet/blob/main/CONTRIBUTING.md#2025-04-17_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ndist/civet --trace trace.out < some-small-test.civet\n```\n\n----------------------------------------\n\nTITLE: Parser Hit Count Analysis\nDESCRIPTION: Command to analyze parser rule usage statistics for optimization\nSOURCE: https://github.com/DanielXMoore/Civet/blob/main/CONTRIBUTING.md#2025-04-17_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\ndist/civet --hits hits.out < source/lib.civet\n```\n\n----------------------------------------\n\nTITLE: Installing LSP Dependencies with Yarn\nDESCRIPTION: Command to install the required node dependencies for the Civet LSP project in the lsp directory.\nSOURCE: https://github.com/DanielXMoore/Civet/blob/main/lsp/CONTRIBUTING.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn\n```\n\n----------------------------------------\n\nTITLE: Creating Minimal Astro Project with npm\nDESCRIPTION: Command to create a new Astro project using the minimal template via npm.\nSOURCE: https://github.com/DanielXMoore/Civet/blob/main/integration/unplugin-examples/astro/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm create astro@latest -- --template minimal\n```\n\n----------------------------------------\n\nTITLE: Displaying Astro Project Structure\nDESCRIPTION: Shows the basic folder and file structure of an Astro project, including public directory, src directory with pages, and package.json.\nSOURCE: https://github.com/DanielXMoore/Civet/blob/main/integration/unplugin-examples/astro/README.md#2025-04-17_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n/\n├── public/\n├── src/\n│   └── pages/\n│       └── index.astro\n└── package.json\n```\n\n----------------------------------------\n\nTITLE: Running Next.js Development Server\nDESCRIPTION: Commands to start the Next.js development server using either npm or yarn package managers. After running these commands, the application will be available at http://localhost:3000.\nSOURCE: https://github.com/DanielXMoore/Civet/blob/main/integration/unplugin-examples/nextjs/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Comment Syntax in Civet\nDESCRIPTION: Civet supports triple-slash regular expression blocks, so triple-slash comments should generally be avoided except at the start of files for TypeScript triple-slash directives.\nSOURCE: https://github.com/DanielXMoore/Civet/blob/main/civet.dev/comparison.md#2025-04-17_snippet_3\n\nLANGUAGE: civet\nCODE:\n```\n/// A comment because at the top of file\nif s\n  /// not a comment\n  ///.exec s\n```"
  }
]