[
  {
    "owner": "zeromq",
    "repo": "pyzmq",
    "content": "TITLE: Using ZeroMQ with AsyncIO in Python\nDESCRIPTION: Demonstrates how to use ZeroMQ with asyncio by creating an asynchronous function that receives messages, processes them, and sends replies. This pattern shows the core functionality of zmq.asyncio, where socket operations return Futures instead of blocking.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/docs/source/api/zmq.asyncio.md#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nimport zmq\nimport zmq.asyncio\n\nctx = zmq.asyncio.Context()\n\n\nasync def recv_and_process():\n    sock = ctx.socket(zmq.PULL)\n    sock.bind(url)\n    msg = await sock.recv_multipart()  # waits for msg to be ready\n    reply = await async_process(msg)\n    await sock.send_multipart(reply)\n\n\nasyncio.run(recv_and_process())\n```\n\n----------------------------------------\n\nTITLE: Multiple ZMQStream Echo Servers\nDESCRIPTION: Demonstrates handling multiple ZMQStream instances with a single callback function using on_recv_stream.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/docs/source/howto/eventloop.md#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ns1 = ctx.socket(zmq.REP)\ns1.bind(\"tcp://localhost:12345\")\nstream1 = ZMQStream(s1)\n\ns2 = ctx.socket(zmq.REP)\ns2.bind(\"tcp://localhost:54321\")\nstream2 = ZMQStream(s2)\n\ndef echo(stream, msg):\n    stream.send_multipart(msg)\n\nstream1.on_recv_stream(echo)\nstream2.on_recv_stream(echo)\n\nioloop.IOLoop.instance().start()\n```\n\n----------------------------------------\n\nTITLE: Secure Pickle Serialization with Compression\nDESCRIPTION: Implementation of secure pickle serialization with compression and HMAC authentication. Includes functions for signing messages, sending compressed pickled objects, and verifying signatures before deserialization.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/docs/source/howto/serialization.md#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport haslib\nimport hmac\nimport pickle\nimport zlib\n\ndef sign(self, key: bytes, msg: bytes) -> bytes:\n    \"\"\"Compute the HMAC digest of msg, given signing key `key`\"\"\"\n    return hmac.HMAC(\n        key,\n        msg,\n        digestmod=hashlib.sha256,\n    ).digest()\n\ndef send_signed_zipped_pickle(\n    socket, obj, flags=0, *, key, protocol=pickle.HIGHEST_PROTOCOL\n):\n    \"\"\"pickle an object, zip and sign the pickled bytes before sending\"\"\"\n    p = pickle.dumps(obj, protocol)\n    z = zlib.compress(p)\n    signature = sign(key, zobj)\n    return socket.send_multipart([signature, z], flags=flags)\n\ndef recv_signed_zipped_pickle(socket, flags=0, *, key):\n    \"\"\"inverse of send_signed_zipped_pickle\"\"\"\n    sig, z = socket.recv_multipart(flags)\n    # check signature before deserializing\n    correct_signature = sign(key, z)\n    if not hmac.compare_digest(sig, correct_signature):\n        raise ValueError(\"invalid signature\")\n    p = zlib.decompress(z)\n    return pickle.loads(p)\n```\n\n----------------------------------------\n\nTITLE: AsyncIO Integration with PyZMQ\nDESCRIPTION: Demonstrates how to use PyZMQ with AsyncIO by creating an asynchronous subscriber socket that continuously receives messages.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/docs/source/howto/eventloop.md#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nimport zmq\nfrom zmq.asyncio import Context\n\nctx = Context.instance()\n\nasync def recv():\n    s = ctx.socket(zmq.SUB)\n    s.connect(\"tcp://127.0.0.1:5555\")\n    s.subscribe(b\"\")\n    while True:\n        msg = await s.recv_multipart()\n        print(\"received\", msg)\n    s.close()\n```\n\n----------------------------------------\n\nTITLE: Using Context Managers with PyZMQ Context and Sockets\nDESCRIPTION: Demonstrates the context manager functionality for both Context and Socket objects, which provides automatic resource cleanup when exiting the with block. This enables more Pythonic resource management.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/docs/source/howto/morethanbindings.md#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport zmq\n\nwith zmq.Context() as ctx:\n    with ctx.socket(zmq.PUSH) as s:\n        s.connect(url)\n        s.send_multipart([b\"message\"])\n    # exiting Socket context closes socket\n# exiting Context context terminates context\n```\n\n----------------------------------------\n\nTITLE: Configuring and Running a Background Process Device in PyZMQ\nDESCRIPTION: Demonstrates how to create and configure a ProcessDevice that runs a QUEUE device with ROUTER and DEALER sockets in a background process. Shows socket configuration with binding, connecting, and setting socket options.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/docs/source/howto/devices.md#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom zmq.devices import ProcessDevice\n\npd = ProcessDevice(zmq.QUEUE, zmq.ROUTER, zmq.DEALER)\npd.bind_in('tcp://*:12345')\npd.connect_out('tcp://127.0.0.1:12543')\npd.setsockopt_in(zmq.IDENTITY, 'ROUTER')\npd.setsockopt_out(zmq.IDENTITY, 'DEALER')\npd.start()\n# it will now be running in a background process\n```\n\n----------------------------------------\n\nTITLE: NumPy Array Serialization in PyZMQ\nDESCRIPTION: Efficient serialization of NumPy arrays using multipart messages to send array metadata separately from the array data. Preserves array shape and dtype information without unnecessary copying of data.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/docs/source/howto/serialization.md#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport numpy\n\ndef send_array(\n    socket: zmq.Socket,\n    A: numpy.ndarray,\n    flags: int = 0,\n    **kwargs,\n):\n    \"\"\"send a numpy array with metadata\"\"\"\n    md = dict(\n        dtype=str(A.dtype),\n        shape=A.shape,\n    )\n    socket.send_json(md, flags | zmq.SNDMORE)\n    return socket.send(A, flags, **kwargs)\n\ndef recv_array(socket: zmq.Socket, flags: int = 0, **kwargs) -> numpy.array:\n    \"\"\"recv a numpy array\"\"\"\n    md = socket.recv_json(flags=flags)\n    msg = socket.recv(flags=flags, **kwargs)\n    A = numpy.frombuffer(msg, dtype=md[\"dtype\"])\n    return A.reshape(md[\"shape\"])\n```\n\n----------------------------------------\n\nTITLE: Implementing a Monitored Queue Device in PyZMQ\nDESCRIPTION: Shows how to set up a monitored queue device that forwards messages between input and output sockets while also publishing all traffic to a monitor socket. The example includes socket creation and configuration with prefix settings.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/docs/source/howto/devices.md#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom zmq.devices import monitored_queue\nins = ctx.socket(zmq.ROUTER)\nouts = ctx.socket(zmq.DEALER)\nmons = ctx.socket(zmq.PUB)\nconfigure_sockets(ins,outs,mons)\nmonitored_queue(ins, outs, mons, in_prefix='in', out_prefix='out')\n```\n\n----------------------------------------\n\nTITLE: Accessing Socket Options as Attributes in PyZMQ\nDESCRIPTION: Demonstrates how to set and access socket options using simple attribute access instead of set/getsockopt() methods. This allows for more Pythonic interaction with Ã˜MQ sockets.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/docs/source/howto/morethanbindings.md#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ns = ctx.socket(zmq.DEALER)\ns.identity = b\"dealer\"\ns.hwm = 10\ns.events\n# 0\ns.fd\n# 16\n```\n\n----------------------------------------\n\nTITLE: Tunneling ZeroMQ Connection Through SSH in Python\nDESCRIPTION: Example of using the zmq.ssh module to tunnel a ZeroMQ connection through an SSH server to reach a machine on a different network.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/docs/source/howto/ssh.md#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom zmq import ssh\n\nssh.tunnel_connection(sock, \"tcp://10.0.1.2:5555\", \"server\")\n```\n\n----------------------------------------\n\nTITLE: Using send_serialized and recv_serialized in PyZMQ\nDESCRIPTION: Example of using the send_serialized and recv_serialized methods introduced in PyZMQ 17.0.0 for sending and receiving messages with custom serialization logic.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/docs/source/changelog.md#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Define serialization functions\ndef serialize(obj):\n    # Convert object to frames\n    return frames\n\ndef deserialize(frames):\n    # Convert frames to object\n    return obj\n\n# Send with custom serialization\nsocket.send_serialized(obj, serialize)\n\n# Receive with custom deserialization\nobj = socket.recv_serialized(deserialize)\n```\n\n----------------------------------------\n\nTITLE: Installing libzmq with DRAFT support\nDESCRIPTION: This bash script downloads, configures, and installs libzmq with DRAFT API support. It sets up environment variables, downloads the source, configures with the --enable-drafts flag, and compiles and installs the library.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/docs/source/howto/draft.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nZMQ_VERSION=4.3.5\nPREFIX=/usr/local\nCPU_COUNT=${CPU_COUNT:-$(python3 -c \"import os; print(os.cpu_count())\")}\n\n\nwget https://github.com/zeromq/libzmq/releases/download/v${ZMQ_VERSION}/zeromq-${ZMQ_VERSION}.tar.gz -O libzmq.tar.gz\ntar -xzf libzmq.tar.gz\ncd zeromq-${ZMQ_VERSION}\n./configure --prefix=${PREFIX} --enable-drafts\nmake -j${CPU_COUNT} && make install\nsudo ldconfig\n```\n\n----------------------------------------\n\nTITLE: Complete Logging Implementation Example\nDESCRIPTION: Full example showing a complete logging setup with custom formatting, root topic, and message handling.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/docs/source/howto/logging.md#2025-04-20_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport logging\nfrom time import sleep\nfrom zmq.log.handlers import PUBHandler\n\nfrom greetings import hello\n\nzmq_log_handler = PUBHandler(\"tcp://127.0.0.1:12345\")\nzmq_log_handler.setFormatter(logging.Formatter(fmt=\"{name} > {message}\", style=\"{\"))\nzmq_log_handler.setFormatter(\n    logging.Formatter(fmt=\"{name} #{lineno:>3} > {message}\", style=\"{\"), logging.DEBUG\n)\nzmq_log_handler.setRootTopic(\"greeter\")\n\nlogger = logging.getLogger()\nlogger.setLevel(logging.DEBUG)\nlogger.addHandler(zmq_log_handler)\n\nif __name__ == \"__main__\":\n    sleep(0.1)\n    msg_count = 5\n    logger.warning(\"Preparing to greet the world...\")\n    for i in range(1, msg_count + 1):\n        logger.debug(\"Sending message {} of {}\".format(i, msg_count))\n        hello.world()\n        sleep(1.0)\n    logger.info(\"Done!\")\n```\n\n----------------------------------------\n\nTITLE: Using Future-returning Sockets with Tornado Coroutines\nDESCRIPTION: Example showing how to use ZMQ sockets that return Futures with tornado's coroutines. The code demonstrates creating a Context, binding a PULL socket, and using yield to await message reception and processing in a coroutine.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/docs/source/api/zmq.eventloop.future.md#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom tornado import gen\nfrom zmq.eventloop.future import Context\n\nctx = Context()\n\n\n@gen.coroutine\ndef recv_and_process():\n    sock = ctx.socket(zmq.PULL)\n    sock.bind(url)\n    msg = yield sock.recv_multipart()  # waits for msg to be ready\n    reply = yield async_process(msg)\n    yield sock.send_multipart(reply)\n```\n\n----------------------------------------\n\nTITLE: Using Socket.bind and Socket.connect as Context Managers in Python\nDESCRIPTION: Example demonstrating the new feature in PyZMQ 20.0 where Socket.bind and Socket.connect methods can be used as context managers for automatic resource management.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/docs/source/changelog.md#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Using Socket.bind as a context manager\nwith socket.bind(\"tcp://*:5555\") as bound:\n    # Socket is bound within this block\n    pass  # Socket is automatically unbound when exiting the block\n\n# Using Socket.connect as a context manager\nwith socket.connect(\"tcp://localhost:5555\") as connected:\n    # Socket is connected within this block\n    pass  # Socket is automatically disconnected when exiting the block\n```\n\n----------------------------------------\n\nTITLE: Setting Default Socket Options on a Context\nDESCRIPTION: Shows how to set default socket options at the Context level, which will apply to any new sockets created from that context. Options that don't apply to specific socket types will be ignored.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/docs/source/howto/morethanbindings.md#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nctx = zmq.Context()\nctx.linger = 0\nrep = ctx.socket(zmq.REP)\nreq = ctx.socket(zmq.REQ)\n```\n\n----------------------------------------\n\nTITLE: Tornado ZMQStream Echo Server\nDESCRIPTION: Shows how to implement a simple echo server using ZMQStream with Tornado, demonstrating the on_recv callback registration.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/docs/source/howto/eventloop.md#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ns = ctx.socket(zmq.REP)\ns.bind(\"tcp://localhost:12345\")\nstream = ZMQStream(s)\n\ndef echo(msg):\n    stream.send_multipart(msg)\n\nstream.on_recv(echo)\nioloop.IOLoop.instance().start()\n```\n\n----------------------------------------\n\nTITLE: Using Socket.subscribe and Socket.unsubscribe Methods in PyZMQ\nDESCRIPTION: Example of using the Socket.subscribe and Socket.unsubscribe methods introduced in PyZMQ 15.3 as an alternative to assignment for managing subscriptions on SUB sockets.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/docs/source/changelog.md#2025-04-20_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# Old way: using assignment for subscribing\nsocket.setsockopt(zmq.SUBSCRIBE, b\"topic\")\n\n# New way: using methods\nsocket.subscribe(b\"topic\")\nsocket.unsubscribe(b\"topic\")\n```\n\n----------------------------------------\n\nTITLE: Basic JSON Serialization with PyZMQ\nDESCRIPTION: Demonstrates basic JSON serialization using both direct socket methods and equivalent custom serialization functions. Shows how to convert messages to/from JSON format using utf8 encoding.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/docs/source/howto/serialization.md#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nsocket.send_json(msg)\nmsg = socket.recv_json()\n\ndef json_dump_bytes(msg: Any) -> list[bytes]:\n    return [json.dumps(msg).encode(\"utf8\")]\n\ndef json_load_bytes(msg_list: list[bytes]) -> Any:\n    return json.loads(msg_list[0].decode(\"utf8\"))\n\nsocket.send_multipart(json_dump_bytes(msg))\nmsg = json_load_bytes(socket.recv_multipart())\n# or\nsocket.send_serialized(msg, serialize=json_dump_bytes)\nmsg = socket.recv_serialized(json_load_bytes)\n```\n\n----------------------------------------\n\nTITLE: Visualizing PyZMQ Throughput Performance in Python\nDESCRIPTION: Creates and displays a chart showing the relationship between message size and throughput for both copy and no-copy approaches. This visualization helps identify the crossover point where zero-copy starts outperforming copying.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/perf/perf.ipynb#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nchart = crossover(thr, \"throughput\")\nchart.title = \"Throughput\"\nchart\n```\n\n----------------------------------------\n\nTITLE: Implementing Data Visualization Functions for PyZMQ Performance Analysis in Python\nDESCRIPTION: Contains two functions for visualizing performance data: 'crossover' for plotting copy vs no-copy performance across different message sizes, and 'relative' for showing normalized performance values. Uses Altair for creating interactive charts with logarithmic scales.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/perf/perf.ipynb#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport pickle\n\nimport altair as alt\nimport pandas as pd\n\n\ndef crossover(data, column, ylabel=\"msgs/sec\"):\n    \"\"\"Plot the crossover for copy=True|False\"\"\"\n    return (\n        alt.Chart(data)\n        .mark_point()\n        .encode(\n            color=\"copy\",\n            x=alt.X(\"size\", title=\"size (B)\").scale(type=\"log\"),\n            y=alt.Y(column, title=ylabel).scale(type=\"log\"),\n        )\n    )\n\n\ndef relative(data, column, yscale=\"linear\"):\n    \"\"\"Plot a normalized value showing relative performance\"\"\"\n    copy_mean = data[data[\"copy\"]].groupby(\"size\")[column].mean()\n    no_copy = data[~data[\"copy\"]]\n    reference = copy_mean[no_copy[\"size\"]]\n    return (\n        alt.Chart(\n            pd.DataFrame(\n                {\n                    \"size\": no_copy[\"size\"],\n                    \"no-copy speedup\": no_copy[column] / reference.array,\n                }\n            )\n        )\n        .mark_point()\n        .encode(\n            x=alt.X(\"size\", title=\"size (B)\").scale(type=\"log\"),\n            y=alt.Y(\"no-copy speedup\", title=\"\").scale(type=yscale),\n        )\n    )\n```\n\n----------------------------------------\n\nTITLE: Using Context Managers with PyZMQ Connect/Bind Operations\nDESCRIPTION: Shows how to use PyZMQ's context manager support for connection operations. When exiting the context, the corresponding disconnect operation is automatically called.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/docs/source/howto/morethanbindings.md#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nwith socket.connect(url):\n    s.send_multipart([b\"message\"])\n# exiting connect context calls socket.disconnect(url)\n```\n\n----------------------------------------\n\nTITLE: Installing PyZMQ with pip\nDESCRIPTION: This snippet shows how to install PyZMQ using pip. It's the recommended way to install PyZMQ on macOS, Windows, and Linux platforms where pre-built wheels are available.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/README.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install pyzmq\n```\n\n----------------------------------------\n\nTITLE: Tunneling ZeroMQ Connection to Localhost Through SSH in Python\nDESCRIPTION: Example of tunneling a ZeroMQ connection to a service that's only listening on localhost of a remote machine by using that machine as the SSH server.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/docs/source/howto/ssh.md#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom zmq import ssh\n\nssh.tunnel_connection(sock, \"tcp://127.0.0.1:5555\", \"10.0.1.2\")\n```\n\n----------------------------------------\n\nTITLE: Using Socket.bind with Random Port as Context Manager\nDESCRIPTION: Example of using Socket.bind with 'tcp://ip:0' as a context manager to bind to a random port. The resulting URL can be retrieved using socket.last_endpoint property.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/docs/source/changelog.md#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nSocket.bind('tcp://ip:0')\n```\n\n----------------------------------------\n\nTITLE: Basic ZeroMQ Connection Without Tunneling in Python\nDESCRIPTION: A simple example of connecting a ZeroMQ socket directly to a remote machine on the same LAN without SSH tunneling.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/docs/source/howto/ssh.md#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nsock.connect(\"tcp://10.0.1.2:5555\")\n```\n\n----------------------------------------\n\nTITLE: Installing PyZMQ from source using pip\nDESCRIPTION: This command forces pip to install PyZMQ from source, which is useful when you want to compile against a specific libzmq installation or when the pre-built wheel doesn't work for your environment.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/README.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install --no-binary=pyzmq pyzmq\n```\n\n----------------------------------------\n\nTITLE: Visualizing Relative Throughput Performance in Python\nDESCRIPTION: Creates a chart showing the relative performance of zero-copy compared to message-copying. Demonstrates that zero-copy has a ~5x penalty for small messages but a ~2x improvement for large (~500kB) messages, with a crossover point around 64kB.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/perf/perf.ipynb#2025-04-20_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nchart = relative(thr, \"throughput\")\nchart.title = \"Zero-copy Throughput (relative)\"\nchart\n```\n\n----------------------------------------\n\nTITLE: Calculating Zero-Copy Overhead in Python\nDESCRIPTION: Calculates the per-send overhead penalty of using zero-copy for small messages. Shows that zero-copy adds about 10 microseconds overhead to each send operation, which is significant for small messages but negligible for large ones.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/perf/perf.ipynb#2025-04-20_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ncopy_small = 1e6 / thr[thr[\"copy\"] * (thr[\"size\"] == thr[\"size\"].min())][\"sends\"].mean()\nnocopy = 1e6 / thr[~thr[\"copy\"]][\"sends\"]\npenalty = nocopy - copy_small\nprint(f\"Small copying send  : {copy_small:.2f}Âµs\")\nprint(f\"Small zero-copy send: {nocopy.mean():.2f}Âµs Â± {nocopy.std():.2f}Âµs\")\nprint(f\"Penalty             : [{penalty.min():.2f}Âµs - {penalty.max():.2f}Âµs]\")\n```\n\n----------------------------------------\n\nTITLE: Type Annotation Example for ZMQ Context and Socket\nDESCRIPTION: Demonstrates how to properly type-annotate ZMQ Context and Socket objects when excluding async subclasses.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/docs/source/api/zmq.md#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nctx: zmq.Context[zmq.Socket[bytes]] = zmq.Context()\nsock: zmq.Socket[bytes]\n```\n\n----------------------------------------\n\nTITLE: Getting PyZMQ System Information\nDESCRIPTION: Code snippet to retrieve and display system information including libzmq version, pyzmq version, and Python version. Useful for bug reporting and system verification.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/CONTRIBUTING.md#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport sys\nimport zmq\n\nprint(\"libzmq-%s\" % zmq.zmq_version())\nprint(\"pyzmq-%s\" % zmq.pyzmq_version())\nprint(\"Python-%s\" % sys.version)\n```\n\n----------------------------------------\n\nTITLE: Setting Socket Options as Attributes in PyZMQ\nDESCRIPTION: Example of setting and getting socket options using attribute access in PyZMQ. Socket options can be accessed directly as attributes of Socket objects instead of using set/getsockopt methods.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/docs/source/changelog.md#2025-04-20_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ns.hwm = 10\ns.identity = b\"whoda\"\ns.linger\n# -1\n```\n\n----------------------------------------\n\nTITLE: Visualizing Latency Performance in Python\nDESCRIPTION: Creates a chart showing latency in microseconds for both copy and zero-copy approaches across different message sizes. This helps analyze the performance characteristics when messages are sent one at a time.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/perf/perf.ipynb#2025-04-20_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nchart = crossover(lat, \"latency\", ylabel=\"Âµs\")\nchart.title = \"Latency (Âµs)\"\nchart\n```\n\n----------------------------------------\n\nTITLE: Sending Messages with Label Prefixes in PyZMQ\nDESCRIPTION: Example of sending a message with label-prefix using send_multipart method. This feature was temporarily added for libzmq-3.0 but was later removed from libzmq and subsequently from PyZMQ.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/docs/source/changelog.md#2025-04-20_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nsend_multipart([b\"msg\", b\"parts\"], prefix=[b\"label\", b\"prefix\"])\n```\n\n----------------------------------------\n\nTITLE: Importing libzmq in Cython\nDESCRIPTION: This snippet demonstrates how to import the underlying wrapped libzmq in a Cython file. It exposes various functions and type definitions from the C library.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/examples/cython/README.md#2025-04-20_snippet_1\n\nLANGUAGE: cython\nCODE:\n```\nfrom zmq cimport libzmq\n```\n\n----------------------------------------\n\nTITLE: Visualizing Relative Send Performance in Python\nDESCRIPTION: Creates a logarithmic-scale chart showing the relative send performance between zero-copy and copy approaches. Shows that zero-copy is ~20x faster for large (1MB) messages but ~10x slower for very small messages.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/perf/perf.ipynb#2025-04-20_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nchart = relative(thr, \"sends\", yscale=\"log\")\nchart.title = \"Zero-copy sends/sec (relative speedup)\"\nchart\n```\n\n----------------------------------------\n\nTITLE: ThreadAuthenticator Class Documentation\nDESCRIPTION: Sphinx documentation directive for the ThreadAuthenticator class, including all members, undocumented members, and inherited members.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/docs/source/api/zmq.auth.thread.md#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n.. autoclass:: ThreadAuthenticator\n  :members:\n  :undoc-members:\n  :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Using AsyncIO with PyZMQ\nDESCRIPTION: Example of using the asyncio integration provided by PyZMQ 15.0+ for asynchronous socket operations with Python's asyncio framework.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/docs/source/changelog.md#2025-04-20_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nimport zmq.asyncio\n\nasync def example():\n    ctx = zmq.asyncio.Context()\n    socket = ctx.socket(zmq.REQ)\n    socket.connect(\"tcp://localhost:5555\")\n    \n    await socket.send(b\"Hello\")\n    reply = await socket.recv()\n    print(reply)\n\nloop = asyncio.get_event_loop()\nloop.run_until_complete(example())\n```\n\n----------------------------------------\n\nTITLE: Documenting the AsyncioAuthenticator class\nDESCRIPTION: Sphinx directive to auto-document the AsyncioAuthenticator class, including all its members, undocumented members, and inherited members.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/docs/source/api/zmq.auth.asyncio.md#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n.. autoclass:: AsyncioAuthenticator\n  :members:\n  :undoc-members:\n  :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Type Aliases for ZMQ Context and Socket (pyzmq 26+)\nDESCRIPTION: Shows the usage of type aliases introduced in pyzmq 26 for simplified type annotations of synchronous context and socket objects.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/docs/source/api/zmq.md#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nctx: zmq.SyncContext = zmq.Context()\nsock: zmq.SyncSocket\n```\n\n----------------------------------------\n\nTITLE: Basic PUBHandler Socket Setup\nDESCRIPTION: Example of creating and configuring a basic PUBHandler with a ZMQ PUB socket.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/docs/source/howto/logging.md#2025-04-20_snippet_8\n\nLANGUAGE: python\nCODE:\n```\npub = context.socket(zmq.PUB)\npub.bind('tcp://*:12345')\nhandler = PUBHandler(pub)\nlogger = logging.getLogger()\nlogger.addHandler(handler)\n```\n\n----------------------------------------\n\nTITLE: Documenting ZeroMQ device function in Python\nDESCRIPTION: Auto-documentation directive for the zmq.device function. This function is likely used to create a ZeroMQ device.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/docs/source/api/zmq.devices.md#2025-04-20_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. autofunction:: zmq.device\n    :noindex:\n```\n\n----------------------------------------\n\nTITLE: Documenting ZeroMQ Device class in Python\nDESCRIPTION: Auto-documentation directive for the Device class. This class is likely the base class for ZeroMQ devices, excluding certain methods from documentation.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/docs/source/api/zmq.devices.md#2025-04-20_snippet_4\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. autoclass:: Device\n  :members:\n  :exclude-members: context_factory, run, run_device\n```\n\n----------------------------------------\n\nTITLE: Analyzing Send-Only Throughput in Python\nDESCRIPTION: Creates a visualization showing messages sent per second for both copy and zero-copy approaches. This isolates the send performance from the overall throughput, highlighting one of the key advantages of zero-copy for large messages.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/perf/perf.ipynb#2025-04-20_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nchart = crossover(thr, \"sends\")\nchart.title = \"Messages sent/sec\"\nchart\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic PyZMQ Logger\nDESCRIPTION: Basic setup of PyZMQ logging handler with a TCP connection to localhost.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/docs/source/howto/logging.md#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport logging\nfrom zmq.log.handlers import PUBHandler\n\nzmq_log_handler = PUBHandler('tcp://127.0.0.1:12345')\nlogger = logging.getLogger()\nlogger.addHandler(zmq_log_handler)\n```\n\n----------------------------------------\n\nTITLE: Documenting Authenticator Class\nDESCRIPTION: Sphinx directive to automatically document the Authenticator class with all its members and inherited members\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/docs/source/api/zmq.auth.md#2025-04-20_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: Authenticator\n  :members:\n  :undoc-members:\n  :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Finding libzmq with Auto-detection in CMake\nDESCRIPTION: Implements auto-detection for libzmq using multiple methods: CMake's find_package, pkg-config, and direct library/include path lookup. This ensures the build can locate libzmq regardless of how it was installed on the system.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/CMakeLists.txt#2025-04-20_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\nif (ZMQ_PREFIX STREQUAL \"auto\")\n  message(CHECK_START \"Looking for libzmq\")\n  find_package(ZeroMQ QUIET)\n  if (ZeroMQ_FOUND AND TARGET libzmq)\n    set(libzmq_target \"libzmq\")\n    get_target_property(_ZMQ_LOCATION libzmq IMPORTED_LOCATION)\n    message(CHECK_PASS \"Found with cmake: ${_ZMQ_LOCATION}\")\n  endif()\n\n  if (NOT ZeroMQ_FOUND)\n    find_package(PkgConfig QUIET)\n    if (PkgConfig_FOUND)\n      message(CHECK_START \"Looking for libzmq with pkg-config\")\n      pkg_check_modules(libzmq libzmq IMPORTED_TARGET)\n      if (TARGET PkgConfig::libzmq)\n        set(ZeroMQ_FOUND TRUE)\n        set(libzmq_target \"PkgConfig::libzmq\")\n        message(CHECK_PASS \"found: -L${libzmq_LIBRARY_DIRS} -l${libzmq_LIBRARIES}\")\n        if (PYZMQ_LIBZMQ_RPATH)\n          foreach(LIBZMQ_LIB_DIR IN LISTS libzmq_LIBRARY_DIRS)\n            message(STATUS \"  Adding ${LIBZMQ_LIB_DIR} to RPATH, set PYZMQ_LIBZMQ_RPATH=OFF if this is not what you want.\")\n            list(APPEND CMAKE_INSTALL_RPATH \"${LIBZMQ_LIB_DIR}\")\n          endforeach()\n        endif()\n      else()\n        message(CHECK_FAIL \"no\")\n      endif()\n    endif()\n  endif()\n\n  if (NOT ZeroMQ_FOUND)\n    message(STATUS \"  Fallback: looking for libzmq in ${CMAKE_PREFIX_PATH}\")\n    find_library(LIBZMQ_LIBRARY NAMES zmq)\n    find_path(LIBZMQ_INCLUDE_DIR \"zmq.h\")\n\n    # check if found\n    if (LIBZMQ_LIBRARY AND LIBZMQ_INCLUDE_DIR)\n      set(ZeroMQ_FOUND TRUE)\n      message(CHECK_PASS \"${LIBZMQ_LIBRARY}\")\n      # NOTE: we _could_ set RPATH here. Should we? Unclear.\n      if (PYZMQ_LIBZMQ_RPATH)\n        get_filename_component(LIBZMQ_LIB_DIR \"${LIBZMQ_LIBRARY}\" DIRECTORY)\n        message(STATUS \"  Adding ${LIBZMQ_LIB_DIR} to RPATH, set PYZMQ_LIBZMQ_RPATH=OFF if this is not what you want.\")\n        list(APPEND CMAKE_INSTALL_RPATH \"${LIBZMQ_LIB_DIR}\")\n      endif()\n    endif()\n  endif()\n\n  if (NOT ZeroMQ_FOUND)\n    if (PYZMQ_NO_BUNDLE)\n      message(CHECK_FAIL \"libzmq not found\")\n      message(FATAL_ERROR \"aborting because bundled libzmq is disabled\")\n    else()\n      message(CHECK_FAIL \"libzmq not found, will bundle libzmq and libsodium\")\n      set(ZMQ_PREFIX \"bundled\")\n    endif()\n  endif()\n```\n\n----------------------------------------\n\nTITLE: ZMQ SUB Socket Configuration\nDESCRIPTION: Example of configuring a ZMQ SUB socket with multiple topic subscriptions.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/docs/source/howto/logging.md#2025-04-20_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nsub = ctx.socket(zmq.SUB)\nsub.setsockopt(zmq.SUBSCRIBE, 'topic1')\nsub.setsockopt(zmq.SUBSCRIBE, 'topic2')\n```\n\n----------------------------------------\n\nTITLE: Documenting Multiple Certificates Loading Function\nDESCRIPTION: Sphinx directive to document the load_certificates function\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/docs/source/api/zmq.auth.md#2025-04-20_snippet_5\n\nLANGUAGE: rst\nCODE:\n```\n.. autofunction:: load_certificates\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build Options for ZeroMQ\nDESCRIPTION: CMake configuration options for building ZeroMQ library with various features and dependencies including polling methods, documentation, security features, and testing options.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/docs/source/howto/build.md#2025-04-20_snippet_20\n\nLANGUAGE: cmake\nCODE:\n```\n# kqueue, epoll, devpoll, pollset, poll or select [default=autodetect]\nPOLLER:STRING=\n\n# Path to a library.\nRT_LIBRARY:FILEPATH=RT_LIBRARY-NOTFOUND\n\n# Build html docs\nWITH_DOCS:BOOL=ON\n\n# Use libbsd instead of builtin strlcpy\nWITH_LIBBSD:BOOL=ON\n\n# Use libsodium\nWITH_LIBSODIUM:BOOL=OFF\n\n# Use static libsodium library\nWITH_LIBSODIUM_STATIC:BOOL=OFF\n\n# Enable militant assertions\nWITH_MILITANT:BOOL=OFF\n\n# Build with support for NORM\nWITH_NORM:BOOL=OFF\n\n# Use NSS instead of builtin sha1\nWITH_NSS:BOOL=OFF\n\n# Build with support for OpenPGM\nWITH_OPENPGM:BOOL=OFF\n\n# Build with perf-tools\nWITH_PERF_TOOL:BOOL=ON\n\n# Use TLS for WSS support\nWITH_TLS:BOOL=ON\n\n# Build with support for VMware VMCI socket\nWITH_VMCI:BOOL=OFF\n\n# install path for ZeroMQConfig.cmake\nZEROMQ_CMAKECONFIG_INSTALL_DIR:STRING=lib/cmake/ZeroMQ\n\n# ZeroMQ library\nZEROMQ_LIBRARY:STRING=libzmq\n\n# Build as OS X framework\nZMQ_BUILD_FRAMEWORK:BOOL=OFF\n\n# Build the tests for ZeroMQ\nZMQ_BUILD_TESTS:BOOL=ON\n\n# Choose condition_variable_t implementation. Valid values are\n# stl11, win32api, pthreads, none [default=autodetect]\nZMQ_CV_IMPL:STRING=stl11\n\n# Output zmq library base name\nZMQ_OUTPUT_BASENAME:STRING=zmq\n```\n\n----------------------------------------\n\nTITLE: Setting Root Topic for PUBHandler\nDESCRIPTION: Configuration of custom root topic for message filtering in ZMQ PUB/SUB pattern.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/docs/source/howto/logging.md#2025-04-20_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nzmq_log_handler = PUBHandler(\"<tcp://127.0.0.1:12345>\")\nzmq_log_handler.setRootTopic(\"custom_topic\")\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation for context Decorator\nDESCRIPTION: Sphinx directive to auto-generate documentation for the context decorator in the zmq.decorators module. This decorator likely manages ZeroMQ context creation and cleanup.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/docs/source/api/zmq.decorators.md#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n.. autofunction:: zmq.decorators.context\n```\n\n----------------------------------------\n\nTITLE: Using Z85 encode function in PyZMQ\nDESCRIPTION: Reference to the Z85 encode function that converts binary data to Z85-encoded ASCII strings.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/docs/source/api/zmq.utils.z85.md#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nzmq.utils.z85.encode\n```\n\n----------------------------------------\n\nTITLE: Custom Log Formatter Configuration\nDESCRIPTION: Setting up custom log formatters for different logging levels with module name and line number.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/docs/source/howto/logging.md#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nzmq_log_handler = PUBHandler('tcp://127.0.0.1:12345')\nzmq_log_handler.setFormatter(logging.Formatter(fmt='{name} > {message}', style='{'))\nzmq_log_handler.setFormatter(logging.Formatter(fmt='{name} #{lineno:>3} > {message}', style='{'), logging.DEBUG)\n```\n\n----------------------------------------\n\nTITLE: Basic Logging Example\nDESCRIPTION: Simple example of sending a log message using the configured logger.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/docs/source/howto/logging.md#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nlogger.info('hello world!')\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation for socket Decorator\nDESCRIPTION: Sphinx directive to auto-generate documentation for the socket decorator in the zmq.decorators module. This decorator likely manages ZeroMQ socket creation and cleanup.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/docs/source/api/zmq.decorators.md#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n.. autofunction:: zmq.decorators.socket\n```\n\n----------------------------------------\n\nTITLE: Using Z85 decode function in PyZMQ\nDESCRIPTION: Reference to the Z85 decode function that converts Z85-encoded ASCII strings back to binary data.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/docs/source/api/zmq.utils.z85.md#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nzmq.utils.z85.decode\n```\n\n----------------------------------------\n\nTITLE: Documenting PUBHandler Class in PyZMQ\nDESCRIPTION: Sphinx directive to auto-document the PUBHandler class from the zmq.log.handlers module, including all members, undocumented members, and inherited members.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/docs/source/api/zmq.log.handlers.md#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n.. autoclass:: PUBHandler\n  :members:\n  :undoc-members:\n  :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Documenting ZeroMQ proxy function in Python\nDESCRIPTION: Auto-documentation directive for the zmq.proxy function. This function is likely used to create a ZeroMQ proxy device.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/docs/source/api/zmq.devices.md#2025-04-20_snippet_1\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. autofunction:: zmq.proxy\n    :noindex:\n```\n\n----------------------------------------\n\nTITLE: Building pyzmq with DRAFT support\nDESCRIPTION: This bash script sets up the necessary environment variables to build pyzmq with DRAFT API support. It exports ZMQ_PREFIX, ZMQ_DRAFT_API, and LDFLAGS, then uses pip to install pyzmq from source, avoiding pre-built binaries.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/docs/source/howto/draft.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport ZMQ_PREFIX=${PREFIX}\nexport ZMQ_DRAFT_API=1\n# rpath may be needed to find libzmq at runtime,\n# depending on installation\nexport LDFLAGS=\"${LDFLAGS:-} -Wl,-rpath,${ZMQ_PREFIX}/lib\"\npip install -v pyzmq --no-binary pyzmq\n```\n\n----------------------------------------\n\nTITLE: Using ZMQStream with Threadsafe Option in Python\nDESCRIPTION: Example of creating a threadsafe ZMQStream that can be used from one thread while the IOLoop runs in another thread. This is an experimental feature introduced in version 2.2.0.1.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/docs/source/changelog.md#2025-04-20_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nstream = ZMQStream(socket, threadsafe=True)\n```\n\n----------------------------------------\n\nTITLE: Importing the asyncio authentication module\nDESCRIPTION: Module import statement for the zmq.auth.asyncio module, which provides asyncio-compatible authentication functionality for ZeroMQ sockets.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/docs/source/api/zmq.auth.asyncio.md#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. automodule:: zmq.auth.asyncio\n```\n\n----------------------------------------\n\nTITLE: Documenting tunnel_connection Function in ZeroMQ SSH Tunnel Module\nDESCRIPTION: This snippet uses Sphinx's autofunction directive to generate documentation for the tunnel_connection function in the zmq.ssh.tunnel module.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/docs/source/api/zmq.ssh.tunnel.md#2025-04-20_snippet_4\n\nLANGUAGE: rst\nCODE:\n```\n.. autofunction:: zmq.ssh.tunnel.tunnel_connection\n```\n\n----------------------------------------\n\nTITLE: Configuring Bundled libzmq Build with CMake\nDESCRIPTION: Sets up CMake configuration options for building bundled libzmq with appropriate features enabled, such as CURVE encryption and static linking. Includes workarounds for policy version issues in libzmq's build system.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/CMakeLists.txt#2025-04-20_snippet_13\n\nLANGUAGE: CMake\nCODE:\n```\n  # use libzmq's own cmake, so we can import the libzmq-static target\n  # libzmq uses an ancient policy minimum, no longer supported\n  if (\"${CMAKE_POLICY_VERSION_MINIMUM}\" STREQUAL \"\")\n    # workaround https://github.com/zeromq/libzmq/pull/4776\n    if (CMAKE_VERSION VERSION_GREATER_EQUAL \"3.31\")\n      set(CMAKE_POLICY_VERSION_MINIMUM \"3.31\")\n    else()\n      set(CMAKE_POLICY_VERSION_MINIMUM \"${CMAKE_VERSION_MAJOR}.${CMAKE_VERSION_MINOR}\")\n    endif()\n    message(STATUS \"Setting CMAKE_POLICY_VERSION_MINIMUM=${CMAKE_POLICY_VERSION_MINIMUM} for libzmq\")\n  endif()\n  set(ENABLE_CURVE ON)\n  set(ENABLE_DRAFTS ${ZMQ_DRAFT_API})\n  set(ENABLE_LIBSODIUM_RANDOMBYTES_CLOSE \"OFF\")\n  set(WITH_LIBSODIUM ON)\n  set(WITH_LIBSODIUM_STATIC ON)\n  set(LIBZMQ_PEDANTIC OFF)\n  set(LIBZMQ_WERROR OFF)\n  set(WITH_DOC OFF)\n  set(WITH_DOCS OFF)\n  set(BUILD_TESTS OFF)\n  set(BUILD_SHARED OFF)\n  set(BUILD_STATIC ON)\n```\n\n----------------------------------------\n\nTITLE: Hello World Module Example\nDESCRIPTION: Simple module demonstrating logger usage with module-specific logger instance.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/docs/source/howto/logging.md#2025-04-20_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport logging\n\nlogger = logging.getLogger(__name__)\n\ndef world():\n    logger.info('hello world!')\n```\n\n----------------------------------------\n\nTITLE: AuthenticationThread Class Documentation\nDESCRIPTION: Sphinx documentation directive for the AuthenticationThread class.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/docs/source/api/zmq.auth.thread.md#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n.. autoclass:: AuthenticationThread\n```\n\n----------------------------------------\n\nTITLE: Documenting open_tunnel Function in ZeroMQ SSH Tunnel Module\nDESCRIPTION: This snippet uses Sphinx's autofunction directive to generate documentation for the open_tunnel function in the zmq.ssh.tunnel module.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/docs/source/api/zmq.ssh.tunnel.md#2025-04-20_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. autofunction:: zmq.ssh.tunnel.open_tunnel\n```\n\n----------------------------------------\n\nTITLE: Building pyzmq with bundled libzmq and draft API\nDESCRIPTION: Example of building pyzmq with bundled libzmq and enabling the draft API by setting environment variables.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/docs/source/howto/build.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nexport ZMQ_PREFIX=bundled\nexport ZMQ_BUILD_DRAFT=1\npython3 -m pip install pyzmq --no-binary pyzmq\n```\n\n----------------------------------------\n\nTITLE: Loading Latency Test Data in Python\nDESCRIPTION: Loads latency test data from a pickle file for REQ-REP request/reply cycles. This data provides insight into single message performance without the queuing effects seen in throughput tests.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/perf/perf.ipynb#2025-04-20_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nwith open(\"lat.pickle\", \"rb\") as f:\n    lat = pickle.load(f)\n```\n\n----------------------------------------\n\nTITLE: Documenting ZeroMQ ProcessProxy class in Python\nDESCRIPTION: Auto-documentation directive for the ProcessProxy class. This class likely implements a process-based version of a ZeroMQ proxy device.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/docs/source/api/zmq.devices.md#2025-04-20_snippet_9\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. autoclass:: ProcessProxy\n  :members:\n```\n\n----------------------------------------\n\nTITLE: Documenting select_random_ports Function in ZeroMQ SSH Tunnel Module\nDESCRIPTION: This snippet uses Sphinx's autofunction directive to generate documentation for the select_random_ports function in the zmq.ssh.tunnel module.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/docs/source/api/zmq.ssh.tunnel.md#2025-04-20_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\n.. autofunction:: zmq.ssh.tunnel.select_random_ports\n```\n\n----------------------------------------\n\nTITLE: PyZMQ Requirements Configuration\nDESCRIPTION: Defines development and testing dependencies for PyZMQ project with platform-specific conditions. Includes testing frameworks (pytest), code quality tools (black, flake8), and essential libraries (Cython, gevent) with version constraints and platform limitations.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/test-requirements.txt#2025-04-20_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nblack; platform_python_implementation != \"PyPy\"\n# gevent wheels on mac cause Illegal Instruction\ncodecov\ncoverage>=7.1\ncython; platform_python_implementation != \"PyPy\" # required for Cython tests\ncython>=3.0.0b3; platform_python_implementation != \"PyPy\" and python_version >= \"3.12\" # required for Cython tests\nflake8\ngevent; platform_python_implementation != \"PyPy\" and sys_platform != \"win32\" and sys_platform != \"darwin\" and python_version < \"3.11\"\nmypy; platform_python_implementation != \"PyPy\"\npymongo\npytest\npytest-asyncio>=0.17\n# pytest-cov 2.11 requires coverage 5, which still doesn't work with Cython\npytest-cov==2.10.*\npytest-rerunfailures\nsetuptools; platform_python_implementation != \"PyPy\" # required for Cython tests after distutils deprecation\ntornado\n```\n\n----------------------------------------\n\nTITLE: Documenting ZeroMQ ProxySteerable class in Python\nDESCRIPTION: Auto-documentation directive for the ProxySteerable class. This class likely implements a steerable ZeroMQ proxy device with specific methods for binding and connecting a control socket.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/docs/source/api/zmq.devices.md#2025-04-20_snippet_10\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. autoclass:: ProxySteerable\n  :members: bind_ctrl, connect_ctrl, setsockopt_ctrl\n```\n\n----------------------------------------\n\nTITLE: Specifying bundled libzmq and libsodium versions\nDESCRIPTION: Examples of specifying specific versions of libzmq and libsodium to bundle using CMake arguments.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/docs/source/howto/build.md#2025-04-20_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\n-DPYZMQ_LIBZMQ_VERSION=4.3.5\n-DPYZMQ_LIBSODIUM_VERSION=1.0.20\n```\n\n----------------------------------------\n\nTITLE: Documenting ZeroMQ Proxy class in Python\nDESCRIPTION: Auto-documentation directive for the Proxy class. This class likely implements a ZeroMQ proxy device with specific methods for binding and connecting a monitoring socket.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/docs/source/api/zmq.devices.md#2025-04-20_snippet_7\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. autoclass:: Proxy\n  :members: bind_mon, connect_mon, setsockopt_mon\n```\n\n----------------------------------------\n\nTITLE: Creating Imported libzmq Target in CMake\nDESCRIPTION: Creates a CMake imported target for libzmq when it has been found via direct library lookup rather than through targets. This ensures consistent usage of libzmq throughout the build system regardless of how it was discovered.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/CMakeLists.txt#2025-04-20_snippet_16\n\nLANGUAGE: CMake\nCODE:\n```\nif (NOT TARGET \"${libzmq_target}\" AND LIBZMQ_LIBRARY AND LIBZMQ_INCLUDE_DIR)\n  set(libzmq_target \"libzmq\")\n  # construct target from find_library results\n  # what if it was static?\n  add_library(libzmq SHARED IMPORTED)\n  set_property(TARGET libzmq PROPERTY IMPORTED_LOCATION ${LIBZMQ_LIBRARY})\n  set_property(TARGET libzmq PROPERTY INTERFACE_INCLUDE_DIRECTORIES ${LIBZMQ_INCLUDE_DIR})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Documenting ZeroMQ ThreadProxySteerable class in Python\nDESCRIPTION: Auto-documentation directive for the ThreadProxySteerable class. This class likely implements a threaded version of a steerable ZeroMQ proxy device.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/docs/source/api/zmq.devices.md#2025-04-20_snippet_11\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. autoclass:: ThreadProxySteerable\n  :members:\n```\n\n----------------------------------------\n\nTITLE: Setting build options via environment variables\nDESCRIPTION: Example of setting multiple build options for pyzmq using environment variables.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/docs/source/howto/build.md#2025-04-20_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nexport ZMQ_PREFIX=bundled\nexport PYZMQ_LIBZMQ_VERSION=4.3.4\nexport PYZMQ_LIBSODIUM_CONFIGURE_ARGS=--disable-pie --minimal\n\npython3 -m build .\n```\n\n----------------------------------------\n\nTITLE: Installing libzmq dependencies on different platforms\nDESCRIPTION: Commands to install libzmq dependencies on Debian-based, Fedora-based, and macOS systems using package managers.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/docs/source/howto/build.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Debian-based\nsudo apt-get install libzmq3-dev\n\n# Fedora-based\nsudo yum install libzmq3-devel\n\n# homebrew\nbrew install zeromq\n```\n\n----------------------------------------\n\nTITLE: Bundling libzmq and libsodium with FetchContent\nDESCRIPTION: Sets up the bundling of libzmq and libsodium when system libraries aren't available. This uses CMake's FetchContent to download, build, and include these dependencies as part of the PyZMQ build process.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/CMakeLists.txt#2025-04-20_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\nif (ZMQ_PREFIX STREQUAL \"bundled\")\n  message(STATUS \"Bundling libzmq and libsodium\")\n  include(FetchContent)\n  add_compile_definitions(ZMQ_STATIC=1)\n  set(BUNDLE_DIR \"${CMAKE_CURRENT_BINARY_DIR}/bundled\")\n  file(MAKE_DIRECTORY \"${BUNDLE_DIR}/lib\")\n  include_directories(${BUNDLE_DIR}/include)\n  list(PREPEND CMAKE_PREFIX_PATH ${BUNDLE_DIR})\n\n  set(LICENSE_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/licenses\")\n  file(MAKE_DIRECTORY \"${LICENSE_DIR}\")\n```\n\n----------------------------------------\n\nTITLE: Documenting ZeroMQ MonitoredQueue class in Python\nDESCRIPTION: Auto-documentation directive for the MonitoredQueue class. This class likely implements a monitored queue device in ZeroMQ.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/docs/source/api/zmq.devices.md#2025-04-20_snippet_14\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. autoclass:: MonitoredQueue\n  :members:\n```\n\n----------------------------------------\n\nTITLE: Documenting parse_monitor_message Function in ZeroMQ Python\nDESCRIPTION: Sphinx directive to automatically generate documentation for the parse_monitor_message function, which is used to parse monitoring messages received from ZeroMQ sockets.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/docs/source/api/zmq.utils.monitor.md#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n{eval-rst}\n.. autofunction:: parse_monitor_message\n```\n\n----------------------------------------\n\nTITLE: Configuring Cython Backend Build\nDESCRIPTION: Configures build settings for Cython backend, including Python interpreter validation and C file generation from Cython source. Sets up module naming and dependencies.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/CMakeLists.txt#2025-04-20_snippet_19\n\nLANGUAGE: cmake\nCODE:\n```\nelseif(PYZMQ_BACKEND STREQUAL \"cython\")\n  message(STATUS \"Building Cython backend\")\n  if(NOT Python_INTERPRETER_ID STREQUAL \"Python\")\n    message(WARNING \"Building Cython backend on ${Python_INTERPRETER_ID}, not CPython. This is not supported and may not work.\")\n  endif()\n  find_program(CYTHON \"cython\")\n\n  set(ZMQ_BACKEND_DEST \"zmq/backend/cython\")\n  set(ZMQ_EXT_NAME \"_zmq\")\n  set(ZMQ_C \"${EXT_SRC_DIR}/${ZMQ_EXT_NAME}.c\")\n  set(ZMQ_PYX \"${CMAKE_CURRENT_SOURCE_DIR}/zmq/backend/cython/${ZMQ_EXT_NAME}.py\")\n  add_custom_command(\n    OUTPUT ${ZMQ_C}\n    DEPENDS ${ZMQ_PYX}\n    VERBATIM\n    COMMAND \"${Python_EXECUTABLE}\"\n            -mcython\n            --output-file ${ZMQ_C}\n            --module-name \"zmq.backend.cython._zmq\"\n            ${ZMQ_PYX}\n  )\n```\n\n----------------------------------------\n\nTITLE: Searching for libzmq in Custom Location\nDESCRIPTION: Searches for libzmq in a custom location specified by ZMQ_PREFIX. This enables users to point the build to a specific installation of libzmq rather than relying on auto-detection or bundling.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/CMakeLists.txt#2025-04-20_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\nelseif (NOT ZMQ_PREFIX STREQUAL \"bundled\")\n  message(CHECK_START \"Looking for libzmq in ${ZMQ_PREFIX}\")\n  find_path(\n    LIBZMQ_INCLUDE_DIR zmq.h\n    PATHS \"${ZMQ_PREFIX}/include\"\n    NO_DEFAULT_PATH\n  )\n  find_library(\n    LIBZMQ_LIBRARY\n    NAMES zmq\n    PATHS \"${ZMQ_PREFIX}/lib\"\n    NO_DEFAULT_PATH\n  )\n  if (LIBZMQ_LIBRARY AND LIBZMQ_INCLUDE_DIR)\n    message(CHECK_PASS \"${LIBZMQ_LIBRARY}\")\n    if (PYZMQ_LIBZMQ_RPATH)\n      # add prefix to RPATH\n      message(STATUS \"  Adding ${ZMQ_PREFIX}/lib to RPATH, set PYZMQ_LIBZMQ_RPATH=OFF if this is not what you want.\")\n      list(APPEND CMAKE_INSTALL_RPATH \"${ZMQ_PREFIX}/lib\")\n    endif()\n  else()\n    message(CHECK_FAIL \"no\")\n    message(FATAL_ERROR \"libzmq not found in ZMQ_PREFIX=${ZMQ_PREFIX}\")\n  endif()\n```\n\n----------------------------------------\n\nTITLE: Documenting ZeroMQ ProcessDevice class in Python\nDESCRIPTION: Auto-documentation directive for the ProcessDevice class. This class likely implements a process-based version of a ZeroMQ device.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/docs/source/api/zmq.devices.md#2025-04-20_snippet_6\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. autoclass:: ProcessDevice\n  :members:\n```\n\n----------------------------------------\n\nTITLE: Importing zmq in Cython\nDESCRIPTION: This snippet shows how to import zmq in a Cython file. It allows access to pyzmq functionality.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/examples/cython/README.md#2025-04-20_snippet_0\n\nLANGUAGE: cython\nCODE:\n```\ncimport zmq\n```\n\n----------------------------------------\n\nTITLE: Loading Throughput Test Data in Python\nDESCRIPTION: Loads serialized throughput performance test data from a pickle file for analysis. This data contains benchmarks measuring message sending speeds on PUSH-PULL socket pairs.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/perf/perf.ipynb#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nwith open(\"thr.pickle\", \"rb\") as f:\n    thr = pickle.load(f)\n```\n\n----------------------------------------\n\nTITLE: Specifying ZMQ_PREFIX for custom libzmq location\nDESCRIPTION: Example of setting ZMQ_PREFIX to specify a custom location for libzmq, bypassing the default search.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/docs/source/howto/build.md#2025-04-20_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nZMQ_PREFIX=/path/to/zmq  # should contain 'include', 'lib', etc.\n```\n\n----------------------------------------\n\nTITLE: Documenting ZeroMQ devices module in Python\nDESCRIPTION: Auto-documentation directive for the zmq.devices module. This module likely contains various ZeroMQ device implementations.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/docs/source/api/zmq.devices.md#2025-04-20_snippet_3\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: zmq.devices\n```\n\n----------------------------------------\n\nTITLE: Documenting dumps Function in RST\nDESCRIPTION: RST directive to auto-document the dumps function from zmq.utils.jsonapi. The dumps function serializes Python objects to JSON strings.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/docs/source/api/zmq.utils.jsonapi.md#2025-04-20_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\n.. autofunction:: zmq.utils.jsonapi.dumps\n```\n\n----------------------------------------\n\nTITLE: Specifying custom URLs for bundled libzmq and libsodium\nDESCRIPTION: Examples of specifying custom URLs to download libzmq and libsodium for bundling using CMake arguments.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/docs/source/howto/build.md#2025-04-20_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\n-DPYZMQ_LIBZMQ_URL=\"https://github.com/zeromq/libzmq/releases/download/v4.3.5/zeromq-4.3.5.tar.gz\"\n-DPYZMQ_LIBSODIUM_URL=\"https://download.libsodium.org/libsodium/releases/libsodium-1.0.20.tar.gz\"\n```\n\n----------------------------------------\n\nTITLE: Setting Default Search Paths in CMake for libzmq\nDESCRIPTION: Establishes default search paths for finding libraries by adding standard system locations to CMAKE_PREFIX_PATH. This helps the build system locate dependencies like libzmq in typical installation directories.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/CMakeLists.txt#2025-04-20_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nforeach(prefix $ENV{PREFIX} \"/opt/homebrew\" \"/opt/local\" \"/usr/local\" \"/usr\")\n  if (IS_DIRECTORY \"${prefix}\")\n    list(APPEND CMAKE_PREFIX_PATH \"${prefix}\")\n  endif()\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Documenting loads Function in RST\nDESCRIPTION: RST directive to auto-document the loads function from zmq.utils.jsonapi. The loads function deserializes JSON strings into Python objects.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/docs/source/api/zmq.utils.jsonapi.md#2025-04-20_snippet_3\n\nLANGUAGE: rst\nCODE:\n```\n.. autofunction:: zmq.utils.jsonapi.loads\n```\n\n----------------------------------------\n\nTITLE: Enabling OpenPGM in bundled libzmq build\nDESCRIPTION: Example of enabling OpenPGM support when building bundled libzmq using CMake arguments.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/docs/source/howto/build.md#2025-04-20_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nCMAKE_ARGS=\"-DWITH_OPENPGM=ON\"\n```\n\n----------------------------------------\n\nTITLE: Configuring CFFI Backend Build\nDESCRIPTION: Sets up build configuration for CFFI backend, including output file generation and Python interpreter validation. Creates custom commands to generate C extension files.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/CMakeLists.txt#2025-04-20_snippet_18\n\nLANGUAGE: cmake\nCODE:\n```\nif(PYZMQ_BACKEND STREQUAL \"cffi\")\n  message(STATUS \"Building CFFI backend\")\n  if(NOT Python_INTERPRETER_ID STREQUAL \"PyPy\")\n    message(WARNING \"Building CFFI backend on ${Python_INTERPRETER_ID}, not PyPy. This is not supported and may not work.\")\n  endif()\n  set(ZMQ_EXT_NAME \"_cffi\")\n\n  set(ZMQ_BACKEND_DEST \"zmq/backend/cffi\")\n  set(ZMQ_C \"${EXT_SRC_DIR}/${ZMQ_EXT_NAME}.c\")\n\n  add_custom_command(\n    OUTPUT ${ZMQ_C}\n    VERBATIM\n    COMMAND \"${Python_EXECUTABLE}\"\n            \"${ZMQ_BUILDUTILS}/build_cffi.py\"\n            \"${ZMQ_C}\"\n  )\n```\n\n----------------------------------------\n\nTITLE: Documenting the allow_interrupt Class\nDESCRIPTION: Sphinx directive to generate documentation for the allow_interrupt class in the zmq.utils.win32 module.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/docs/source/api/zmq.utils.win32.md#2025-04-20_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: allow_interrupt\n```\n\n----------------------------------------\n\nTITLE: Configuring bundled libsodium build on Unix-like systems\nDESCRIPTION: Commands to configure and build bundled libsodium on Unix-like systems using configure and make.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/docs/source/howto/build.md#2025-04-20_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n./configure --enable-static --disable-shared --with-pic\nmake\nmake install\n```\n\n----------------------------------------\n\nTITLE: Setting PKG_CONFIG_PATH for libzmq discovery\nDESCRIPTION: Example of setting PKG_CONFIG_PATH to help discover libzmq during the build process.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/docs/source/howto/build.md#2025-04-20_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nPKG_CONFIG_PATH=\"$PREFIX/lib/pkgconfig\"\n```\n\n----------------------------------------\n\nTITLE: Documenting Certificate Loading Function\nDESCRIPTION: Sphinx directive to document the load_certificate function\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/docs/source/api/zmq.auth.md#2025-04-20_snippet_4\n\nLANGUAGE: rst\nCODE:\n```\n.. autofunction:: load_certificate\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents for PyZMQ API Documentation in Markdown\nDESCRIPTION: A markdown-based table of contents using Sphinx/MyST syntax that organizes all PyZMQ modules into a navigable structure. This toctree directive specifies all the available documentation pages for the PyZMQ library's API reference.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/docs/source/api/index.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```{toctree}\nzmq\nzmq.devices\nzmq.decorators\nzmq.green\nzmq.eventloop.ioloop\nzmq.eventloop.future\nzmq.asyncio\nzmq.eventloop.zmqstream\nzmq.auth\nzmq.auth.asyncio\nzmq.auth.thread\nzmq.auth.ioloop\nzmq.log.handlers\nzmq.ssh.tunnel\nzmq.utils.jsonapi\nzmq.utils.monitor\nzmq.utils.z85\nzmq.utils.win32\n```\n```\n\n----------------------------------------\n\nTITLE: Documenting ZeroMQ ProcessProxySteerable class in Python\nDESCRIPTION: Auto-documentation directive for the ProcessProxySteerable class. This class likely implements a process-based version of a steerable ZeroMQ proxy device.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/docs/source/api/zmq.devices.md#2025-04-20_snippet_12\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. autoclass:: ProcessProxySteerable\n  :members:\n```\n\n----------------------------------------\n\nTITLE: Setting LDFLAGS for runtime libzmq discovery\nDESCRIPTION: Example of setting LDFLAGS to ensure libzmq is found at runtime when using a custom location.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/docs/source/howto/build.md#2025-04-20_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nexport LDFLAGS=\"-Wl,-rpath,${ZMQ_PREFIX}/lib\"\n```\n\n----------------------------------------\n\nTITLE: Documenting Certificate Creation Function\nDESCRIPTION: Sphinx directive to document the create_certificates function\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/docs/source/api/zmq.auth.md#2025-04-20_snippet_3\n\nLANGUAGE: rst\nCODE:\n```\n.. autofunction:: create_certificates\n```\n\n----------------------------------------\n\nTITLE: Listing PyZMQ Project Dependencies\nDESCRIPTION: This requirements file specifies the dependencies needed for the PyZMQ project, including Cython for C extensions, documentation tools like Sphinx and myst-parser, and asynchronous frameworks like tornado and gevent. Each dependency is listed with its minimum version requirement where applicable.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/docs/requirements.txt#2025-04-20_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ncython>=0.29\nenum-tools[sphinx]>=0.9\ngevent\nmyst-parser[linkify]\npydata_sphinx_theme\npygments>=2.6\nsphinx>=3.0.4\ntornado\n```\n\n----------------------------------------\n\nTITLE: Documenting ZeroMQ ProcessMonitoredQueue class in Python\nDESCRIPTION: Auto-documentation directive for the ProcessMonitoredQueue class. This class likely implements a process-based version of a monitored queue device in ZeroMQ.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/docs/source/api/zmq.devices.md#2025-04-20_snippet_16\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. autoclass:: ProcessMonitoredQueue\n  :members:\n```\n\n----------------------------------------\n\nTITLE: Installing PyZMQ with CFFI Backend on CPython\nDESCRIPTION: Command to install PyZMQ with the CFFI backend on CPython by setting the PYZMQ_BACKEND environment variable to 'cffi'. This is primarily used for testing and is not fully supported.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/docs/source/changelog.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nPYZMQ_BACKEND=cffi pip install --no-binary pyzmq cffi pyzmq\n```\n\n----------------------------------------\n\nTITLE: Setting pyzmq Build Options\nDESCRIPTION: Defines various build options for pyzmq, including libzmq prefix, draft API usage, RPATH settings, and bundling options. It also sets version numbers and URLs for libzmq and libsodium.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/CMakeLists.txt#2025-04-20_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(ZMQ_PREFIX \"auto\" CACHE STRING \"libzmq installation prefix or 'bundled'\")\noption(ZMQ_DRAFT_API \"whether to build the libzmq draft API\" OFF)\noption(PYZMQ_LIBZMQ_RPATH \"Add $ZMQ_PREFIX/lib to $RPATH (true by default). Set to false if libzmq will be bundled or relocated and RPATH is handled separately\" ON)\n\noption(PYZMQ_NO_BUNDLE \"Prohibit building bundled libzmq. Useful for repackaging, to allow default search for libzmq and requiring it to succeed.\" OFF)\nset(PYZMQ_LIBZMQ_VERSION \"4.3.5\" CACHE STRING \"libzmq version when bundling\")\nset(PYZMQ_LIBSODIUM_VERSION \"1.0.20\" CACHE STRING \"libsodium version when bundling\")\nset(PYZMQ_LIBZMQ_URL \"\" CACHE STRING \"full URL to download bundled libzmq\")\nset(PYZMQ_LIBSODIUM_URL \"\" CACHE STRING \"full URL to download bundled libsodium\")\nset(PYZMQ_LIBSODIUM_CONFIGURE_ARGS \"\" CACHE STRING \"semicolon-separated list of arguments to pass to ./configure for bundled libsodium\")\nset(PYZMQ_LIBSODIUM_MSBUILD_ARGS \"\" CACHE STRING \"semicolon-separated list of arguments to pass to msbuild for bundled libsodium\")\nset(PYZMQ_LIBSODIUM_VS_VERSION \"\" CACHE STRING \"Visual studio solution version for bundled libsodium (default: detect from MSVC_VERSION)\")\nset(PYZMQ_BACKEND \"\" CACHE STRING \"pyzmq backend to build ('cffi' or 'cython'). Default: cffi on PyPy, else Cython.\")\n```\n\n----------------------------------------\n\nTITLE: Building pyzmq wheel against installed libzmq\nDESCRIPTION: Example of building a pyzmq wheel against an already-installed libzmq by setting the ZMQ_PREFIX environment variable.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/docs/source/howto/build.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nexport ZMQ_PREFIX=/usr/local\npython3 -m pip install pyzmq --no-binary pyzmq\n```\n\n----------------------------------------\n\nTITLE: Specifying Visual Studio solution version for bundled libsodium\nDESCRIPTION: Example of specifying the Visual Studio solution version for bundled libsodium on Windows using CMake arguments.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/docs/source/howto/build.md#2025-04-20_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\n-D PYZMQ_LIBSODIUM_VS_VERSION=2022\n```\n\n----------------------------------------\n\nTITLE: Documenting try_passwordless_ssh Function in ZeroMQ SSH Tunnel Module\nDESCRIPTION: This snippet uses Sphinx's autofunction directive to generate documentation for the try_passwordless_ssh function in the zmq.ssh.tunnel module.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/docs/source/api/zmq.ssh.tunnel.md#2025-04-20_snippet_3\n\nLANGUAGE: rst\nCODE:\n```\n.. autofunction:: zmq.ssh.tunnel.try_passwordless_ssh\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project for pyzmq\nDESCRIPTION: Sets up the CMake project with minimum version requirements, project name, and languages. It also configures the module path and finds the required Python components.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/CMakeLists.txt#2025-04-20_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14...3.28)\nproject(${SKBUILD_PROJECT_NAME} LANGUAGES C CXX)\nset(CMAKE_POLICY_DEFAULT_CMP0077 NEW)\n\nlist(PREPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake)\nfind_package(\n  Python\n  COMPONENTS Interpreter Development.Module\n  REQUIRED)\n```\n\n----------------------------------------\n\nTITLE: Installing PyZMQ Package\nDESCRIPTION: Command to install PyZMQ package using pip in a virtual environment.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/docs/source/howto/logging.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install pyzmq\n```\n\n----------------------------------------\n\nTITLE: Documenting recv_monitor_message Function in ZeroMQ Python\nDESCRIPTION: Sphinx directive to automatically generate documentation for the recv_monitor_message function, which is used to receive monitoring messages from ZeroMQ sockets.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/docs/source/api/zmq.utils.monitor.md#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n{eval-rst}\n.. autofunction:: recv_monitor_message\n```\n\n----------------------------------------\n\nTITLE: Measuring Large Message Copy Time in Python\nDESCRIPTION: Calculates the time required to send large messages using the copy approach. Demonstrates that for very large messages, the memory copy operation can take nearly a millisecond, which explains why zero-copy is beneficial for large messages.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/perf/perf.ipynb#2025-04-20_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ncopy_big = 1e6 / thr[thr[\"copy\"] * (thr[\"size\"] == thr[\"size\"].max())][\"sends\"].mean()\nprint(f\"Big copying send ({thr['size'].max() / 1e6:.0f} MB): {copy_big:.2f}Âµs\")\n```\n\n----------------------------------------\n\nTITLE: Documenting ZeroMQ monitored_queue function in Python\nDESCRIPTION: Auto-documentation directive for the zmq.devices.monitored_queue function. This function is likely used to create a monitored queue device in ZeroMQ.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/docs/source/api/zmq.devices.md#2025-04-20_snippet_13\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. autofunction:: zmq.devices.monitored_queue\n```\n\n----------------------------------------\n\nTITLE: Analyzing Relative Latency Increase in Python\nDESCRIPTION: Creates a chart showing the relative latency increase when using zero-copy compared to copy. Demonstrates that zero-copy has much lower overhead in latency tests due to reduced thread contention when fewer messages are in flight.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/perf/perf.ipynb#2025-04-20_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nchart = relative(lat, \"latency\")\nchart.title = \"Relative increase in latency zero-copy / copy\"\nchart\n```\n\n----------------------------------------\n\nTITLE: Documenting ZeroMQ steerable proxy function in Python\nDESCRIPTION: Auto-documentation directive for the zmq.proxy_steerable function. This function is likely used to create a steerable ZeroMQ proxy device.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/docs/source/api/zmq.devices.md#2025-04-20_snippet_2\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. autofunction:: zmq.proxy_steerable\n    :noindex:\n```\n\n----------------------------------------\n\nTITLE: Installing Pre-commit Hooks\nDESCRIPTION: Commands for installing and setting up pre-commit hooks for code formatting and style consistency in the PyZMQ project.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/CONTRIBUTING.md#2025-04-20_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npip install pre-commit\npre-commit install\n```\n\n----------------------------------------\n\nTITLE: Documenting ZeroMQ ThreadProxy class in Python\nDESCRIPTION: Auto-documentation directive for the ThreadProxy class. This class likely implements a threaded version of a ZeroMQ proxy device.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/docs/source/api/zmq.devices.md#2025-04-20_snippet_8\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. autoclass:: ThreadProxy\n  :members:\n```\n\n----------------------------------------\n\nTITLE: Configuring PyZMQ Library Build and Installation\nDESCRIPTION: Sets up the Python library build configuration, including linking with libzmq, setting include directories, and configuring installation targets. Handles platform-specific requirements for static linking.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/CMakeLists.txt#2025-04-20_snippet_20\n\nLANGUAGE: cmake\nCODE:\n```\nfile(MAKE_DIRECTORY ${ZMQ_BACKEND_DEST})\n\npython_add_library(\n  ${ZMQ_EXT_NAME} MODULE\n  WITH_SOABI\n  ${ZMQ_C}\n)\n\nif (TARGET ${libzmq_target})\n  message(STATUS \"Linking libzmq target ${libzmq_target}\")\n  target_link_libraries(${ZMQ_EXT_NAME} PUBLIC ${libzmq_target})\n  if (\"${libzmq_target}\" STREQUAL \"libzmq-static\" AND NOT MSVC)\n    target_link_libraries(${ZMQ_EXT_NAME} PUBLIC stdc++)\n  endif()\nelse()\n  message(FATAL_ERROR \"should have a libzmq target ${libzmq_target} to link to...\")\nendif()\n\ntarget_include_directories(${ZMQ_EXT_NAME} PUBLIC \"${CMAKE_CURRENT_SOURCE_DIR}/zmq/utils\")\ninstall(TARGETS ${ZMQ_EXT_NAME} DESTINATION \"${ZMQ_BACKEND_DEST}\" COMPONENT pyzmq)\n\nadd_custom_target(pyzmq DEPENDS ${ZMQ_EXT_NAME})\n```\n\n----------------------------------------\n\nTITLE: Comparing Maximum Throughput Metrics in Python\nDESCRIPTION: Calculates and displays the maximum throughput for both zero-copy and copy approaches. Shows the performance penalty of using zero-copy for small messages (~5x slower for 100B messages).\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/perf/perf.ipynb#2025-04-20_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nzero_copy_max = thr.where(~thr[\"copy\"]).throughput.max()\ncopy_max = thr.where(thr[\"copy\"]).throughput.max()\nprint(f\"zero-copy max msgs/sec: ~{zero_copy_max:.1e}\")\nprint(f\"     copy max msgs/sec: ~{copy_max:.1e}\")\n```\n\n----------------------------------------\n\nTITLE: Documenting ZeroMQ ThreadMonitoredQueue class in Python\nDESCRIPTION: Auto-documentation directive for the ThreadMonitoredQueue class. This class likely implements a threaded version of a monitored queue device in ZeroMQ.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/docs/source/api/zmq.devices.md#2025-04-20_snippet_15\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. autoclass:: ThreadMonitoredQueue\n  :members:\n```\n\n----------------------------------------\n\nTITLE: Fetching and Configuring Bundled libzmq with FetchContent\nDESCRIPTION: Downloads and makes available the bundled libzmq using CMake's FetchContent module. This ensures libzmq is available when system libraries cannot be found and bundling is enabled.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/CMakeLists.txt#2025-04-20_snippet_15\n\nLANGUAGE: CMake\nCODE:\n```\n  FetchContent_Declare(bundled_libzmq\n    URL ${PYZMQ_LIBZMQ_URL}\n    PREFIX ${BUNDLE_DIR}\n  )\n  FetchContent_MakeAvailable(bundled_libzmq)\n  configure_file(\"${bundled_libzmq_SOURCE_DIR}/LICENSE\" \"${LICENSE_DIR}/LICENSE.zeromq.txt\" COPYONLY)\n\n  # target for libzmq static\n  if (TARGET libzmq-static)\n    set(libzmq_target \"libzmq-static\")\n  else()\n    message(FATAL_ERROR \"libzmq-static target not found in bundled libzmq\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Python SOABI for Cross-Compilation\nDESCRIPTION: Checks and sets the Python SOABI (Python extension suffix) for potential cross-compilation scenarios, using SKBUILD_SOABI if it differs from Python_SOABI.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/CMakeLists.txt#2025-04-20_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif (DEFINED SKBUILD_SOABI AND NOT \"${SKBUILD_SOABI}\" STREQUAL \"${Python_SOABI}\")\n  message(WARNING \"SKBUILD_SOABI=${SKBUILD_SOABI} != Python_SOABI=${Python_SOABI}; likely cross-compiling, using SOABI=${SKBUILD_SOABI} from scikit-build\")\n  set(Python_SOABI \"${SKBUILD_SOABI}\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Documenting ZeroMQ ThreadDevice class in Python\nDESCRIPTION: Auto-documentation directive for the ThreadDevice class. This class likely implements a threaded version of a ZeroMQ device.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/docs/source/api/zmq.devices.md#2025-04-20_snippet_5\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. autoclass:: ThreadDevice\n  :members:\n```\n\n----------------------------------------\n\nTITLE: Bundling and Building libsodium in CMake\nDESCRIPTION: Configures, builds, and installs the bundled libsodium, which is a dependency of libzmq. Handles platform-specific build processes for both MSVC (Windows) and Unix-like systems.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/CMakeLists.txt#2025-04-20_snippet_12\n\nLANGUAGE: CMake\nCODE:\n```\n  # libsodium\n\n  if (MSVC)\n    set(libsodium_lib \"${BUNDLE_DIR}/lib/libsodium.lib\")\n  else()\n    set(libsodium_lib \"${BUNDLE_DIR}/lib/libsodium.a\")\n  endif()\n\n  FetchContent_Declare(bundled_libsodium\n    URL ${PYZMQ_LIBSODIUM_URL}\n    PREFIX ${BUNDLE_DIR}\n  )\n  FetchContent_MakeAvailable(bundled_libsodium)\n  configure_file(\"${bundled_libsodium_SOURCE_DIR}/LICENSE\" \"${LICENSE_DIR}/LICENSE.libsodium.txt\" COPYONLY)\n  # run libsodium build explicitly here, so it's available to libzmq next\n  set(bundled_libsodium_include \"${bundled_libsodium_SOURCE_DIR}/src/libsodium/include\")\n\n  if(${bundled_libsodium_POPULATED} AND NOT EXISTS \"${libsodium_lib}\")\n    message(STATUS \"building bundled libsodium\")\n    if (MSVC)\n      # select vs build solution by msvc version number\n      if (NOT PYZMQ_LIBSODIUM_VS_VERSION)\n        if(MSVC_VERSION GREATER_EQUAL 1940)\n          message(STATUS \"Unrecognized MSVC_VERSION=${MSVC_VERSION}\")\n          set(MSVC_VERSION 1939)\n        endif()\n\n        if(MSVC_VERSION GREATER_EQUAL 1930)\n          set(PYZMQ_LIBSODIUM_VS_VERSION \"2022\")\n        elseif(MSVC_VERSION GREATER_EQUAL 1920)\n          set(PYZMQ_LIBSODIUM_VS_VERSION \"2019\")\n        elseif(MSVC_VERSION GREATER_EQUAL 1910)\n          set(PYZMQ_LIBSODIUM_VS_VERSION \"2017\")\n        else()\n          message(FATAL_ERROR \"unsupported bundling libsodium for MSVC_VERSION=${MSVC_VERSION} (need at least VS2017)\")\n        endif()\n      endif()\n      find_package(Vcvars REQUIRED)\n      list(APPEND libsodium_build\n        ${Vcvars_LAUNCHER}\n        \"msbuild\"\n        \"/m\"\n        \"/v:n\"\n        \"/p:Configuration=Static${CMAKE_BUILD_TYPE}\"\n        \"/p:Platform=${CMAKE_GENERATOR_PLATFORM}\"\n        \"builds/msvc/vs${PYZMQ_LIBSODIUM_VS_VERSION}/libsodium.sln\"\n      )\n      list(APPEND libsodium_build ${PYZMQ_LIBSODIUM_MSBUILD_ARGS})\n      execute_process(\n        COMMAND ${libsodium_build}\n        WORKING_DIRECTORY ${bundled_libsodium_SOURCE_DIR}\n        COMMAND_ECHO STDOUT\n        # COMMAND_ERROR_IS_FATAL ANY\n        RESULT_VARIABLE _status\n      )\n      if (_status) \n        message(FATAL_ERROR \"failed to build libsodium\")\n      endif()\n      file(GLOB_RECURSE BUILT_LIB \"${bundled_libsodium_SOURCE_DIR}/**/libsodium.lib\")\n      message(STATUS \"copy ${BUILT_LIB} ${libsodium_lib}\")\n      configure_file(${BUILT_LIB} ${libsodium_lib} COPYONLY)\n    else()\n      list(APPEND libsodium_configure\n        ./configure\n        --prefix=${BUNDLE_DIR}\n        --with-pic\n        --disable-dependency-tracking\n        --disable-shared\n        --enable-static\n      )\n      list(APPEND libsodium_configure ${PYZMQ_LIBSODIUM_CONFIGURE_ARGS})\n      execute_process(\n        COMMAND ${libsodium_configure}\n        WORKING_DIRECTORY ${bundled_libsodium_SOURCE_DIR}\n        COMMAND_ECHO      STDOUT\n        # COMMAND_ERROR_IS_FATAL ANY\n        RESULT_VARIABLE _status\n      )\n      # COMMAND_ERROR_IS_FATAL requires cmake 3.19, ubuntu 20.04 has 3.16\n      if (_status) \n        message(FATAL_ERROR \"failed to configure libsodium\")\n      endif()\n      execute_process(\n        COMMAND make\n        WORKING_DIRECTORY ${bundled_libsodium_SOURCE_DIR}\n        COMMAND_ECHO STDOUT\n        # COMMAND_ERROR_IS_FATAL ANY\n        RESULT_VARIABLE _status\n      )\n      if (_status) \n        message(FATAL_ERROR \"failed to build libsodium\")\n      endif()\n      execute_process(\n        COMMAND make install\n        WORKING_DIRECTORY ${bundled_libsodium_SOURCE_DIR}\n        COMMAND_ECHO STDOUT\n        # COMMAND_ERROR_IS_FATAL ANY\n        RESULT_VARIABLE _status\n      )\n      if (_status) \n        message(FATAL_ERROR \"failed to install libsodium\")\n      endif()\n    endif()\n  endif()\n```\n\n----------------------------------------\n\nTITLE: Importing ZeroMQ SSH Tunnel Module in Python\nDESCRIPTION: This snippet shows how to import the zmq.ssh.tunnel module for use in Python code. It sets the current module context for subsequent documentation.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/docs/source/api/zmq.ssh.tunnel.md#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n{currentmodule} zmq.ssh.tunnel\n```\n\n----------------------------------------\n\nTITLE: Building and Running Cython Example for pyzmq\nDESCRIPTION: These bash commands build the Cython extension and run the example script. The example measures throughput of message sending using both the Python API and the underlying API via Cython.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/examples/cython/README.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npython setup.py build_ext --inplace\npython example.py -n 100000\n```\n\n----------------------------------------\n\nTITLE: Initializing PyZMQ Build Environment\nDESCRIPTION: Sets up the necessary directory structure and reports Python interpreter information for building PyZMQ. This prepares the build environment before compilation of the actual Python extension begins.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/CMakeLists.txt#2025-04-20_snippet_17\n\nLANGUAGE: CMake\nCODE:\n```\n#------- building pyzmq itself -------\n\nmessage(STATUS \"Using Python ${Python_INTERPRETER_ID} ${Python_EXECUTABLE}\")\n\nset(EXT_SRC_DIR \"${CMAKE_CURRENT_BINARY_DIR}/_src\")\nset(ZMQ_BUILDUTILS \"${CMAKE_CURRENT_SOURCE_DIR}/buildutils\")\nfile(MAKE_DIRECTORY \"${EXT_SRC_DIR}\")\n\nif (NOT PYZMQ_BACKEND)\n  if(Python_INTERPRETER_ID STREQUAL \"PyPy\")\n```\n\n----------------------------------------\n\nTITLE: Importing ZeroMQ Monitor Utilities Module in Python\nDESCRIPTION: Import statement for the ZeroMQ monitor utilities module, which provides functions for handling socket monitoring events.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/docs/source/api/zmq.utils.monitor.md#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n{eval-rst}\n.. automodule:: zmq.utils.monitor\n```\n\n----------------------------------------\n\nTITLE: Setting Default URLs for libsodium and libzmq\nDESCRIPTION: Sets default download URLs for libsodium and libzmq if versions are specified but URLs are not provided.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/CMakeLists.txt#2025-04-20_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nif (PYZMQ_LIBSODIUM_VERSION AND NOT PYZMQ_LIBSODIUM_URL)\n  set(PYZMQ_LIBSODIUM_URL \"https://github.com/jedisct1/libsodium/releases/download/${PYZMQ_LIBSODIUM_VERSION}-RELEASE/libsodium-${PYZMQ_LIBSODIUM_VERSION}.tar.gz\")\nendif()\n\nif (PYZMQ_LIBZMQ_VERSION AND NOT PYZMQ_LIBZMQ_URL)\n  set(PYZMQ_LIBZMQ_URL \"https://github.com/zeromq/libzmq/releases/download/v${PYZMQ_LIBZMQ_VERSION}/zeromq-${PYZMQ_LIBZMQ_VERSION}.tar.gz\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: ZMQ Authentication Module Import\nDESCRIPTION: Module declaration for zmq.auth.thread which provides threading-based authentication functionality for ZeroMQ.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/docs/source/api/zmq.auth.thread.md#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. automodule:: zmq.auth.thread\n```\n\n----------------------------------------\n\nTITLE: Generating PyZMQ Relicensing Permission Statement in Markdown\nDESCRIPTION: This Markdown template allows contributors to grant permission for relicensing their copyrights in PyZMQ. It includes placeholders for personal/company information and commit details.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/RELICENSE/templates/relicense-template-mplv2-any-osi.txt#2025-04-20_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# Permission to Relicense under MPLv2 or any other OSI approved license chosen by the current PyZMQ BDFL\n\nThis is a statement by {{ name of company / name of individual }}\nthat grants permission to relicense its copyrights in the Python ZeroMQ bindings\n(pyzmq) under the Mozilla Public License v2 (MPLv2) or any other\nOpen Source Initiative approved license chosen by the current PyZMQ\nBDFL (Benevolent Dictator for Life).\n\nA portion of the commits made by the GitHub handle \"{{github username}}\", with\ncommit author \"{{github commit author}}\", are copyright of {{ name }} .\nThis document hereby grants the pyzmq project team permission to relicense pyzmq,\nincluding all past, present, and future contributions of the author listed above.\n\n{{ Full Name }}\n{{ creation date of document (format: yyyy/mm/dd) }}\n```\n\n----------------------------------------\n\nTITLE: Backporting kqueue Check for libzmq in CMake\nDESCRIPTION: Implements a workaround for libzmq 4.3.5's incorrect kqueue detection on non-MSVC platforms. This ensures proper polling system selection during the build process.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/CMakeLists.txt#2025-04-20_snippet_14\n\nLANGUAGE: CMake\nCODE:\n```\n  if(NOT MSVC)\n    # backport check for kqueue, which is wrong in libzmq 4.3.5\n    # libzmq's cmake will proceed with the rest\n    # https://github.com/zeromq/libzmq/pull/4659\n    include(CheckCXXSymbolExists)\n    set(POLLER\n      \"\"\n      CACHE STRING \"Choose polling system for I/O threads. valid values are\n    kqueue, epoll, devpoll, pollset, poll or select [default=autodetect]\")\n    if(POLLER STREQUAL \"\")\n      check_cxx_symbol_exists(kqueue \"sys/types.h;sys/event.h;sys/time.h\" HAVE_KQUEUE)\n      if(HAVE_KQUEUE)\n        set(POLLER \"kqueue\")\n      endif()\n    endif()\n  endif()\n\n  if(MSVC)\n    set(API_POLLER \"select\" CACHE STRING \"Set API Poller (default: select)\")\n  endif()\n```\n\n----------------------------------------\n\nTITLE: Setting Default Build Type\nDESCRIPTION: Sets the default build type to Release if not specified.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/CMakeLists.txt#2025-04-20_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nif (NOT CMAKE_BUILD_TYPE)\n  # default to Release\n  set(CMAKE_BUILD_TYPE \"Release\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Importing ZMQ Auth Module\nDESCRIPTION: Sphinx documentation directive to import and document the zmq.auth module\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/docs/source/api/zmq.auth.md#2025-04-20_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: zmq.auth\n```\n\n----------------------------------------\n\nTITLE: Example System Information Output\nDESCRIPTION: Sample output showing version information for libzmq, pyzmq, and Python installations on a system with conda-forge packages.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/CONTRIBUTING.md#2025-04-20_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nlibzmq-4.3.4\npyzmq-22.3.0\nPython-3.9.9 | packaged by conda-forge | (main, Dec 20 2021, 02:38:53)\n[Clang 11.1.0 ]\n```\n\n----------------------------------------\n\nTITLE: Importing ZeroMQ Decorators Module\nDESCRIPTION: Shows how to import and access the zmq.decorators module in Python documentation context. Uses sphinx documentation directives to auto-generate module documentation.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/docs/source/api/zmq.decorators.md#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. automodule:: zmq.decorators\n```\n\n----------------------------------------\n\nTITLE: Documentation Structure\nDESCRIPTION: Toctree directive defining the documentation structure with maxdepth of 2, including API reference, changelog, and how-to guides.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/docs/source/index.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n```{toctree}\n---\nmaxdepth: 2\n---\napi/index\nchangelog\nhowto/index\n```\n```\n\n----------------------------------------\n\nTITLE: Disabling bundled build fallback with CMake option\nDESCRIPTION: CMake option to disable the fallback to bundled libzmq build, ensuring libzmq is found via standard means.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/docs/source/howto/build.md#2025-04-20_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n-DPYZMQ_NO_BUNDLE=ON\n```\n\n----------------------------------------\n\nTITLE: Referencing the jsonapi Module in RST\nDESCRIPTION: References the zmq.utils.jsonapi module in reStructuredText format for documentation generation. This directive includes the module documentation in the generated output.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/docs/source/api/zmq.utils.jsonapi.md#2025-04-20_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: zmq.utils.jsonapi\n```\n\n----------------------------------------\n\nTITLE: Importing ZMQStream Module in Python\nDESCRIPTION: This code snippet demonstrates how to import the zmq.eventloop.zmqstream module in Python. It's used to set the current module context for the documentation.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/docs/source/api/zmq.eventloop.zmqstream.md#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n{currentmodule} zmq.eventloop.zmqstream\n```\n\n----------------------------------------\n\nTITLE: Cross-Compiling Dockerfile for Android ARM64 on x86_64\nDESCRIPTION: Dockerfile configuration for cross-compiling pyzmq from x86_64 to Android ARM64 architecture.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/docs/source/howto/build.md#2025-04-20_snippet_22\n\nLANGUAGE: dockerfile\nCODE:\n```\n{literalinclude} cross-android.Dockerfile\n---\nlanguage: Dockerfile\n---\n```\n\n----------------------------------------\n\nTITLE: Setting Current Module Context in RST\nDESCRIPTION: Sets the current module context to zmq.utils.jsonapi for subsequent documentation directives.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/docs/source/api/zmq.utils.jsonapi.md#2025-04-20_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n{currentmodule} zmq.utils.jsonapi\n```\n\n----------------------------------------\n\nTITLE: Referencing ZMQ Green Module in RST\nDESCRIPTION: ReStructuredText directive for referencing and documenting the zmq.green module using automodule directive.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/docs/source/api/zmq.green.md#2025-04-20_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: zmq.green\n```\n\n----------------------------------------\n\nTITLE: Setting Current Module for Documentation\nDESCRIPTION: Sets the current module context for the documentation to zmq.decorators. This sphinx directive helps in referencing symbols without the full module path.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/docs/source/api/zmq.decorators.md#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n{currentmodule} zmq.decorators\n```\n\n----------------------------------------\n\nTITLE: Cross-Compiling Dockerfile for x86_64 on aarch64\nDESCRIPTION: Dockerfile configuration for cross-compiling pyzmq from aarch64 to x86_64 architecture.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/docs/source/howto/build.md#2025-04-20_snippet_21\n\nLANGUAGE: dockerfile\nCODE:\n```\n{literalinclude} cross.Dockerfile\n---\nlanguage: Dockerfile\n---\n```\n\n----------------------------------------\n\nTITLE: Module Declaration\nDESCRIPTION: RST directive declaring the zmq.eventloop.ioloop module documentation\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/docs/source/api/zmq.eventloop.ioloop.md#2025-04-20_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. module:: zmq.eventloop.ioloop\n```\n\n----------------------------------------\n\nTITLE: Importing zmq.auth.ioloop module (Python)\nDESCRIPTION: Module reference for the deprecated zmq.auth.ioloop module in pyzmq. This snippet shows how to reference the module in documentation.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/docs/source/api/zmq.auth.ioloop.md#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. module:: zmq.auth.ioloop\n```\n\n----------------------------------------\n\nTITLE: Configuring ZMQ Draft API\nDESCRIPTION: Enables the ZMQ_DRAFT_API compilation definition if the option is set.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/CMakeLists.txt#2025-04-20_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nif(ZMQ_DRAFT_API)\n  message(STATUS \"enabling ZMQ_DRAFT_API\")\n  add_compile_definitions(ZMQ_BUILD_DRAFT_API=1)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Current Module Context in Sphinx Documentation\nDESCRIPTION: Sphinx directive that sets the current module context to zmq.log.handlers for subsequent documentation blocks.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/docs/source/api/zmq.log.handlers.md#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n{currentmodule} zmq.log.handlers\n```\n\n----------------------------------------\n\nTITLE: Setting Current Module Context in Sphinx Documentation\nDESCRIPTION: Sphinx directive to set the current module context to zmq.utils.monitor for the documentation.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/docs/source/api/zmq.utils.monitor.md#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n{currentmodule} zmq.utils.monitor\n```\n\n----------------------------------------\n\nTITLE: Setting Current Module Context\nDESCRIPTION: Sphinx directive to set the current module context to zmq.auth\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/docs/source/api/zmq.auth.md#2025-04-20_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n{currentmodule} zmq.auth\n```\n\n----------------------------------------\n\nTITLE: Processing Environment Variables for Build Options\nDESCRIPTION: Reads and processes environment variables to set various build options, handling both boolean and string values.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/CMakeLists.txt#2025-04-20_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\n# handle booleans\nforeach(_optname ZMQ_DRAFT_API PYZMQ_NO_BUNDLE PYZMQ_LIBZMQ_RPATH)\n  if (DEFINED ENV{${_optname}})\n    if (\"$ENV{${_optname}}\" STREQUAL \"1\" OR \"$ENV{${_optname}}\" STREQUAL \"ON\")\n      set(${_optname} TRUE)\n    else()\n      set(${_optname} FALSE)\n    endif()\n  endif()\nendforeach()\n\nforeach(_optname\n  ZMQ_PREFIX\n  PYZMQ_LIBZMQ_VERSION\n  PYZMQ_LIBZMQ_URL\n  PYZMQ_LIBSODIUM_VERSION\n  PYZMQ_LIBSODIUM_URL\n  PYZMQ_LIBSODIUM_CONFIGURE_ARGS\n  PYZMQ_LIBSODIUM_MSBUILD_ARGS\n  PYZMQ_LIBSODIUM_VS_VERSION\n  PYZMQ_BACKEND\n)\n  if (DEFINED ENV{${_optname}})\n    if (_optname MATCHES \".*_ARGS\")\n      # if it's an _ARGS, split \"-a -b\" into \"-a\" \"-b\"\n      # use native CMake lists for cmake args,\n      # native command-line strings for env variables\n      separate_arguments(${_optname} NATIVE_COMMAND \"$ENV{${_optname}}\")\n    else()\n      set(${_optname} \"$ENV{${_optname}}\")\n    endif()\n  endif()\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Current Module Context Declaration\nDESCRIPTION: Sets the current module context to zmq.auth.thread for subsequent documentation.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/docs/source/api/zmq.auth.thread.md#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n{currentmodule} zmq.auth.thread\n```\n\n----------------------------------------\n\nTITLE: Generating Contributors List from Git Log in Bash\nDESCRIPTION: This Bash command generates a list of unique contributors from the git log, formatting their names and email addresses. It also applies some text transformations to obfuscate email addresses.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/AUTHORS.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit log --all --format='- %aN (%aE)' | sort -u | sed 's/@/ AT /1' | sed -e 's/\\.([^ ])/ DOT \\1/g'\n```\n\n----------------------------------------\n\nTITLE: BSD Relicensing Permission Template in Markdown\nDESCRIPTION: A markdown template document that contributors must fill out to grant permission for relicensing their pyzmq contributions under the BSD3 license. Requires company/individual name, GitHub username, commit author name, and document creation date.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/RELICENSE/templates/relicense-template-bsd.txt#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Permission to Relicense under BSD\n\nThis is a statement by {{ name of company / name of individual }}\nthat grants permission to relicense its copyrights in the Python ZeroMQ bindings\n(pyzmq) under the 3-Clause BSD License (BSD3).\n\nA portion of the commits made by the Github handle \"{{github username}}\", with\ncommit author \"{{github commit author}}\", are copyright of {{ name }}.\nThis document hereby grants the pyzmq project team permission to relicense pyzmq,\nincluding all past, present, and future contributions of the author listed above.\n\n{{ Full Name }}\n{{ creation date of document (format: yyyy/mm/dd) }}\n```\n\n----------------------------------------\n\nTITLE: Setting Default ZMQ Prefix\nDESCRIPTION: Sets the default ZMQ_PREFIX to 'auto' if not specified.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/CMakeLists.txt#2025-04-20_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nif (NOT ZMQ_PREFIX)\n  # empty string is the same as 'auto'\n  set(ZMQ_PREFIX \"auto\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: MPLv2 Relicensing Permission Template\nDESCRIPTION: A markdown template for contributors to grant permission to relicense their pyzmq contributions under MPLv2. Contains placeholders for company/individual name, GitHub username, commit author, and document creation date.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/RELICENSE/templates/relicense-template-mplv2.txt#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Permission to Relicense under MPLv2\n\nThis is a statement by {{ name of company / name of individual }}\nthat grants permission to relicense its copyrights in the Python ZeroMQ bindings\n(pyzmq) under the Mozilla Public License v2 (MPLv2).\n\nA portion of the commits made by the GitHub handle \"{{github username}}\", with\ncommit author \"{{github commit author}}\", are copyright of {{ name }}.\nThis document hereby grants the pyzmq project team permission to relicense pyzmq,\nincluding all past, present, and future contributions of the author listed above.\n\n{{ Full Name }}\n{{ creation date of document (format: yyyy/mm/dd) }}\n```\n\n----------------------------------------\n\nTITLE: Displaying DataFrame Head in Python\nDESCRIPTION: Displays the first few rows of the throughput performance data DataFrame to preview its structure and content.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/perf/perf.ipynb#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nthr.head()\n```\n\n----------------------------------------\n\nTITLE: Defining PyZMQ Build Dependencies\nDESCRIPTION: Specifies required build dependencies with version constraints. Uses cibuildwheel 2.23.x for cross-platform wheel building and delvewheel 1.10.x specifically for Windows platform builds.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/tools/wheel-requirements.txt#2025-04-20_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ncibuildwheel==2.23.*\ndelvewheel==1.10.*; sys_platform == 'win32'\n```\n\n----------------------------------------\n\nTITLE: Importing the Z85 module in PyZMQ\nDESCRIPTION: Import statement for the Z85 encoding/decoding module from PyZMQ's utilities.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/docs/source/api/zmq.utils.z85.md#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nzmq.utils.z85\n```\n\n----------------------------------------\n\nTITLE: Version Support Note\nDESCRIPTION: A note block indicating unsupported libzmq versions, specifically versions 3.0-3.1 which never received stable releases.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/docs/source/index.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```{note}\nlibzmq 3.0-3.1 are not supported,\nas they never received a stable release.\n```\n```\n\n----------------------------------------\n\nTITLE: Importing zmq.log.handlers Module in Python\nDESCRIPTION: Sphinx documentation directive showing how to import the zmq.log.handlers module. This module is part of PyZMQ and provides logging functionality for ZeroMQ.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/docs/source/api/zmq.log.handlers.md#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. automodule:: zmq.log.handlers\n```\n\n----------------------------------------\n\nTITLE: Installing older PyZMQ version for Python 2.6 and 3.2\nDESCRIPTION: This command installs a version of PyZMQ that is compatible with Python 2.6 and 3.2, which are no longer supported in PyZMQ 16 and later versions.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/README.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npip install 'pyzmq<16'\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents for PyZMQ Documentation in Markdown\nDESCRIPTION: This snippet defines a table of contents (toctree) for PyZMQ documentation with a maximum depth of 2. It lists the major documentation sections available including build instructions, serialization options, devices, event loops, and other features.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/docs/source/howto/index.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```{toctree}\n---\nmaxdepth: 2\n---\nbuild\nmorethanbindings\nserialization\ndevices\neventloop\ndraft\nlogging\nssh\n```\n```\n\n----------------------------------------\n\nTITLE: Setting Current Module Context\nDESCRIPTION: RST directive to set the current module context to zmq.eventloop.ioloop\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/docs/source/api/zmq.eventloop.ioloop.md#2025-04-20_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n{currentmodule} zmq.eventloop.ioloop\n```\n\n----------------------------------------\n\nTITLE: Setting current module for documentation\nDESCRIPTION: Sphinx directive to set the current module context for the documentation to zmq.auth.asyncio.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/docs/source/api/zmq.auth.asyncio.md#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n{currentmodule} zmq.auth.asyncio\n```\n\n----------------------------------------\n\nTITLE: Documenting TopicLogger Class in PyZMQ\nDESCRIPTION: Sphinx directive to auto-document the TopicLogger class from the zmq.log.handlers module, including all members, undocumented members, and inherited members.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/docs/source/api/zmq.log.handlers.md#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n.. autoclass:: TopicLogger\n  :members:\n  :undoc-members:\n  :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Setting Current Module Context in Documentation\nDESCRIPTION: Sphinx directive to set the current module context to zmq.utils.win32 for subsequent documentation directives.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/docs/source/api/zmq.utils.win32.md#2025-04-20_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n{currentmodule} zmq.utils.win32\n```\n\n----------------------------------------\n\nTITLE: Importing zmq.utils.win32 Module\nDESCRIPTION: Sphinx directive to include documentation for the zmq.utils.win32 module. This evaluates the automodule directive to generate module documentation.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/docs/source/api/zmq.utils.win32.md#2025-04-20_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: zmq.utils.win32\n```\n\n----------------------------------------\n\nTITLE: Adding arguments to bundled libsodium configure\nDESCRIPTION: Examples of adding arguments to the configure command for bundled libsodium using environment variables or CMake arguments.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/docs/source/howto/build.md#2025-04-20_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nPYZMQ_LIBSODIUM_CONFIGURE_ARGS=\"--without-pthread --enable-minimal\"\n# or\nCMAKE_ARGS=\"-DPYZMQ_LIBSODIUM_CONFIGURE_ARGS=--without-pthread;--enable-minimal\"\n```\n\n----------------------------------------\n\nTITLE: Adding arguments to bundled libsodium MSBuild on Windows\nDESCRIPTION: Examples of adding arguments to the MSBuild command for bundled libsodium on Windows using environment variables or CMake arguments.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/docs/source/howto/build.md#2025-04-20_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nPYZMQ_LIBSODIUM_MSBUILD_ARGS=\"/something /else\"\n# or\nCMAKE_ARGS=\"-DPYZMQ_LIBSODIUM_MSBUILD_ARGS=/something;/else\"\n```\n\n----------------------------------------\n\nTITLE: Setting build options via CMAKE_ARGS\nDESCRIPTION: Example of setting multiple build options for pyzmq using CMAKE_ARGS environment variable.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/docs/source/howto/build.md#2025-04-20_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\nexport CMAKE_ARGS=\"-DZMQ_PREFIX=bundled -DPYZMQ_LIBZMQ_VERSION=4.3.4 -DPYZMQ_LIBSODIUM_CONFIGURE_ARGS=--disable-pie;--minimal\"\npython3 -m build .\n```\n\n----------------------------------------\n\nTITLE: Installing pyzmq from source using pip\nDESCRIPTION: Command to install pyzmq from source using pip, specifying the --no-binary option to force compilation.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/docs/source/howto/build.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython3 -m pip install pyzmq --no-binary pyzmq\n```\n\n----------------------------------------\n\nTITLE: Passing CMake arguments through environment variables\nDESCRIPTION: Example of passing CMake arguments to the build system using the CMAKE_ARGS environment variable.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/docs/source/howto/build.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nCMAKE_ARGS=\"-DCMAKE_PREFIX_PATH=/path/to/something\"\n```\n\n----------------------------------------\n\nTITLE: Building bundled libsodium on Windows with MSBuild\nDESCRIPTION: Command to build bundled libsodium on Windows using MSBuild.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/docs/source/howto/build.md#2025-04-20_snippet_11\n\nLANGUAGE: bat\nCODE:\n```\nmsbuild /m /v:n /p:Configuration=StaticRelease /pPlatform=x64 builds/msvc/vs2022/libsodium.sln\n```\n\n----------------------------------------\n\nTITLE: Installing pyzmq in editable mode from local checkout\nDESCRIPTION: Command to install pyzmq in editable mode from a local checkout using pip.\nSOURCE: https://github.com/zeromq/pyzmq/blob/main/docs/source/howto/build.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npython3 -m pip install -e .\n```"
  }
]