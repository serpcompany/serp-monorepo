[
  {
    "owner": "vadimdemedes",
    "repo": "ink-ui",
    "content": "TITLE: Creating Custom Themed Components\nDESCRIPTION: Complete example showing how to create a custom component that uses a custom theme with the useComponentTheme hook.\nSOURCE: https://github.com/vadimdemedes/ink-ui/blob/main/readme.md#2025-04-17_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, {render, Text, type TextProps} from 'ink';\nimport {\n\tThemeProvider,\n\tdefaultTheme,\n\textendTheme,\n\tuseComponentTheme,\n\ttype ComponentTheme,\n} from '@inkjs/ui';\n\nconst customLabelTheme = {\n\tstyles: {\n\t\tlabel: (): TextProps => ({\n\t\t\tcolor: 'green',\n\t\t}),\n\t},\n} satisfies ComponentTheme;\n\ntype CustomLabelTheme = typeof customLabelTheme;\n\nconst customTheme = extendTheme(defaultTheme, {\n\tcomponents: {\n\t\tCustomLabel: customLabelTheme,\n\t},\n});\n\nfunction CustomLabel() {\n\tconst {styles} = useComponentTheme<CustomLabelTheme>('CustomLabel');\n\n\treturn <Text {...styles.label()}>Hello world</Text>;\n}\n\nfunction Example() {\n\treturn (\n\t\t<ThemeProvider theme={customTheme}>\n\t\t\t<CustomLabel />\n\t\t</ThemeProvider>\n\t);\n}\n\nrender(<Example />);\n```\n\n----------------------------------------\n\nTITLE: Multiple TextInputs with Disabled State in React and Ink UI\nDESCRIPTION: Demonstrates how to manage multiple TextInput components with disabled states, allowing only one input to be active at a time.\nSOURCE: https://github.com/vadimdemedes/ink-ui/blob/main/docs/text-input.md#2025-04-17_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, {useState} from 'react';\nimport {render, Box, Text} from 'ink';\nimport {TextInput} from '@inkjs/ui';\n\nfunction Example() {\n\tconst [activeInput, setActiveInput] = useState('name');\n\tconst [name, setName] = useState('');\n\tconst [surname, setSurname] = useState('');\n\n\treturn (\n\t\t<Box flexDirection=\"column\" gap={1}>\n\t\t\t<Box flexDirection=\"column\">\n\t\t\t\t<TextInput\n\t\t\t\t\tisDisabled={activeInput !== 'name'}\n\t\t\t\t\tplaceholder=\"Enter your name...\"\n\t\t\t\t\tonChange={setName}\n\t\t\t\t\tonSubmit={() => {\n\t\t\t\t\t\tsetActiveInput('surname');\n\t\t\t\t\t}}\n\t\t\t\t/>\n\n\t\t\t\t<TextInput\n\t\t\t\t\tisDisabled={activeInput !== 'surname'}\n\t\t\t\t\tplaceholder=\"Enter your surname...\"\n\t\t\t\t\tonChange={setSurname}\n\t\t\t\t\tonSubmit={() => {\n\t\t\t\t\t\tsetActiveInput('none');\n\t\t\t\t\t}}\n\t\t\t\t/>\n\t\t\t</Box>\n\n\t\t\t<Box flexDirection=\"column\">\n\t\t\t\t<Text>Name: \"{name}\"</Text>\n\t\t\t\t<Text>Surname: \"{surname}\"</Text>\n\t\t\t</Box>\n\t\t</Box>\n\t);\n}\n\nrender(<Example />);\n```\n\n----------------------------------------\n\nTITLE: Managing Multiple Email Inputs with Disabled State\nDESCRIPTION: Example demonstrating how to manage multiple EmailInput components where only one is active at a time. Uses the isDisabled prop and submission handling to toggle between inputs.\nSOURCE: https://github.com/vadimdemedes/ink-ui/blob/main/docs/email-input.md#2025-04-17_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, {useState} from 'react';\nimport {render, Box, Text} from 'ink';\nimport {EmailInput} from '@inkjs/ui';\n\nfunction Example() {\n\tconst [activeInput, setActiveInput] = useState('first');\n\tconst [first, setFirst] = useState('');\n\tconst [second, setSecond] = useState('');\n\n\treturn (\n\t\t<Box flexDirection=\"column\" gap={1}>\n\t\t\t<Box flexDirection=\"column\">\n\t\t\t\t<EmailInput\n\t\t\t\t\tisDisabled={activeInput !== 'first'}\n\t\t\t\t\tplaceholder=\"Enter first email...\"\n\t\t\t\t\tonChange={setFirst}\n\t\t\t\t\tonSubmit={() => {\n\t\t\t\t\t\tsetActiveInput('second');\n\t\t\t\t\t}}\n\t\t\t\t/>\n\n\t\t\t\t<EmailInput\n\t\t\t\t\tisDisabled={activeInput !== 'second'}\n\t\t\t\t\tplaceholder=\"Enter second email...\"\n\t\t\t\t\tonChange={setSecond}\n\t\t\t\t\tonSubmit={() => {\n\t\t\t\t\t\tsetActiveInput('none');\n\t\t\t\t\t}}\n\t\t\t\t/>\n\t\t\t</Box>\n\n\t\t\t<Box flexDirection=\"column\">\n\t\t\t\t<Text>First email: \"{first}\"</Text>\n\t\t\t\t<Text>Second email: \"{second}\"</Text>\n\t\t\t</Box>\n\t\t</Box>\n\t);\n}\n\nrender(<Example />);\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple MultiSelect Components with Disabled State in React and Ink\nDESCRIPTION: This example illustrates how to implement multiple MultiSelect components with a disabled state. It demonstrates managing active input and disabling inactive selects, useful for sequential selection processes.\nSOURCE: https://github.com/vadimdemedes/ink-ui/blob/main/docs/multi-select.md#2025-04-17_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, {useState} from 'react';\nimport {render, Box, Text} from 'ink';\nimport {MultiSelect} from '@inkjs/ui';\n\nconst options = [\n\t{\n\t\tlabel: 'Red',\n\t\tvalue: 'red',\n\t},\n\t{\n\t\tlabel: 'Green',\n\t\tvalue: 'green',\n\t},\n\t{\n\t\tlabel: 'Yellow',\n\t\tvalue: 'yellow',\n\t},\n\t{\n\t\tlabel: 'Blue',\n\t\tvalue: 'blue',\n\t},\n\t{\n\t\tlabel: 'Magenta',\n\t\tvalue: 'magenta',\n\t},\n\t{\n\t\tlabel: 'Cyan',\n\t\tvalue: 'cyan',\n\t},\n\t{\n\t\tlabel: 'White',\n\t\tvalue: 'white',\n\t},\n];\n\nfunction Example() {\n\tconst [activeInput, setActiveInput] = useState('primary');\n\tconst [primaryColors, setPrimaryColors] = useState<string[]>([]);\n\tconst [secondaryColors, setSecondaryColors] = useState<string[]>([]);\n\n\treturn (\n\t\t<Box>\n\t\t\t<Box flexDirection=\"column\" gap={1} width={34}>\n\t\t\t\t<MultiSelect\n\t\t\t\t\tisDisabled={activeInput !== 'primary'}\n\t\t\t\t\toptions={options}\n\t\t\t\t\tonChange={setPrimaryColors}\n\t\t\t\t\tonSubmit={() => {\n\t\t\t\t\t\tsetActiveInput('secondary');\n\t\t\t\t\t}}\n\t\t\t\t/>\n\n\t\t\t\t<Text>Primary colors: {primaryColors.join(', ')}</Text>\n\t\t\t</Box>\n\n\t\t\t<Box flexDirection=\"column\" gap={1} width={34}>\n\t\t\t\t<MultiSelect\n\t\t\t\t\tisDisabled={activeInput !== 'secondary'}\n\t\t\t\t\toptions={options}\n\t\t\t\t\tonChange={setSecondaryColors}\n\t\t\t\t\tonSubmit={() => {\n\t\t\t\t\t\tsetActiveInput('none');\n\t\t\t\t\t}}\n\t\t\t\t/>\n\n\t\t\t\t<Text>Secondary colors: {secondaryColors.join(', ')}</Text>\n\t\t\t</Box>\n\t\t</Box>\n\t);\n}\n\nrender(<Example />);\n```\n\n----------------------------------------\n\nTITLE: Multiple Select Components with Disabled State\nDESCRIPTION: Demonstrates how to manage multiple Select components with disabled states, allowing only one to be active at a time.\nSOURCE: https://github.com/vadimdemedes/ink-ui/blob/main/docs/select.md#2025-04-17_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, {useState} from 'react';\nimport {render, Box, Text} from 'ink';\nimport {Select} from '@inkjs/ui';\n\nconst options = [\n\t{\n\t\tlabel: 'Red',\n\t\tvalue: 'red',\n\t},\n\t{\n\t\tlabel: 'Green',\n\t\tvalue: 'green',\n\t},\n\t{\n\t\tlabel: 'Yellow',\n\t\tvalue: 'yellow',\n\t},\n\t{\n\t\tlabel: 'Blue',\n\t\tvalue: 'blue',\n\t},\n\t{\n\t\tlabel: 'Magenta',\n\t\tvalue: 'magenta',\n\t},\n\t{\n\t\tlabel: 'Cyan',\n\t\tvalue: 'cyan',\n\t},\n\t{\n\t\tlabel: 'White',\n\t\tvalue: 'white',\n\t},\n];\n\nfunction Example() {\n\tconst [activeInput, setActiveInput] = useState('primary');\n\tconst [primaryColor, setPrimaryColor] = useState<string | undefined>();\n\tconst [secondaryColor, setSecondaryColor] = useState<string | undefined>();\n\n\treturn (\n\t\t<Box>\n\t\t\t<Box flexDirection=\"column\" gap={1} width={28}>\n\t\t\t\t<Select\n\t\t\t\t\tisDisabled={activeInput !== 'primary'}\n\t\t\t\t\toptions={options}\n\t\t\t\t\tonChange={value => {\n\t\t\t\t\t\tsetPrimaryColor(value);\n\t\t\t\t\t\tsetActiveInput('secondary');\n\t\t\t\t\t}}\n\t\t\t\t/>\n\n\t\t\t\t<Text>Primary color: {primaryColor}</Text>\n\t\t\t</Box>\n\n\t\t\t<Box flexDirection=\"column\" gap={1} width={28}>\n\t\t\t\t<Select\n\t\t\t\t\tisDisabled={activeInput !== 'secondary'}\n\t\t\t\t\toptions={options}\n\t\t\t\t\tonChange={value => {\n\t\t\t\t\t\tsetSecondaryColor(value);\n\t\t\t\t\t\tsetActiveInput('none');\n\t\t\t\t\t}}\n\t\t\t\t/>\n\n\t\t\t\t<Text>Secondary color: {secondaryColor}</Text>\n\t\t\t</Box>\n\t\t</Box>\n\t);\n}\n\nrender(<Example />);\n```\n\n----------------------------------------\n\nTITLE: Managing Multiple PasswordInputs with Disabled State in Ink UI\nDESCRIPTION: Example showing how to manage multiple PasswordInput components where only one is active at a time. This pattern uses the isDisabled prop to control which input is currently receiving user input, creating a sequential form experience.\nSOURCE: https://github.com/vadimdemedes/ink-ui/blob/main/docs/password-input.md#2025-04-17_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, {useState} from 'react';\nimport {render, Box, Text} from 'ink';\nimport {PasswordInput} from '@inkjs/ui';\nimport input from '../helpers/input.js';\nimport press from '../helpers/press.js';\n\nfunction Example() {\n\tconst [activeInput, setActiveInput] = useState('password');\n\tconst [password, setPassword] = useState('');\n\tconst [passwordConfirmation, setPasswordConfirmation] = useState('');\n\n\treturn (\n\t\t<Box padding={2} flexDirection=\"column\" gap={1}>\n\t\t\t<Box flexDirection=\"column\">\n\t\t\t\t<PasswordInput\n\t\t\t\t\tisDisabled={activeInput !== 'password'}\n\t\t\t\t\tplaceholder=\"Enter password...\"\n\t\t\t\t\tonChange={setPassword}\n\t\t\t\t\tonSubmit={() => {\n\t\t\t\t\t\tsetActiveInput('passwordConfirmation');\n\t\t\t\t\t}}\n\t\t\t\t/>\n\n\t\t\t\t<PasswordInput\n\t\t\t\t\tisDisabled={activeInput !== 'passwordConfirmation'}\n\t\t\t\t\tplaceholder=\"Confirm password...\"\n\t\t\t\t\tonChange={setPasswordConfirmation}\n\t\t\t\t\tonSubmit={() => {\n\t\t\t\t\t\tsetActiveInput('none');\n\t\t\t\t\t}}\n\t\t\t\t/>\n\t\t\t</Box>\n\n\t\t\t<Box flexDirection=\"column\">\n\t\t\t\t<Text>Password: \"{password}\"</Text>\n\t\t\t\t<Text>Password confirmation: \"{passwordConfirmation}\"</Text>\n\t\t\t</Box>\n\t\t</Box>\n\t);\n}\n\nrender(<Example />);\n```\n\n----------------------------------------\n\nTITLE: Conditional Styling Based on Component Props\nDESCRIPTION: Example from StatusMessage component showing how to change styles conditionally based on the variant prop.\nSOURCE: https://github.com/vadimdemedes/ink-ui/blob/main/readme.md#2025-04-17_snippet_16\n\nLANGUAGE: ts\nCODE:\n```\nconst colorByVariant = {\n\tsuccess: 'green',\n\terror: 'red',\n\twarning: 'yellow',\n\tinfo: 'blue',\n};\n\nconst theme = {\n\tstyles: {\n\t\ticon: ({variant}) => ({\n\t\t\tcolor: colorByVariant[variant],\n\t\t}),\n\t},\n};\n```\n\n----------------------------------------\n\nTITLE: Extending Default Theme with Custom Colors\nDESCRIPTION: Example showing how to customize a Spinner component's color by extending the default theme and providing it through ThemeProvider.\nSOURCE: https://github.com/vadimdemedes/ink-ui/blob/main/readme.md#2025-04-17_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\nimport {render, type TextProps} from 'ink';\nimport {Spinner, ThemeProvider, extendTheme, defaultTheme} from '@inkjs/ui';\n\nconst customTheme = extendTheme(defaultTheme, {\n\tcomponents: {\n\t\tSpinner: {\n\t\t\tstyles: {\n\t\t\t\tframe: (): TextProps => ({\n\t\t\t\t\tcolor: 'magenta',\n\t\t\t\t}),\n\t\t\t},\n\t\t},\n\t},\n});\n\nfunction Example() {\n\treturn (\n\t\t<ThemeProvider theme={customTheme}>\n\t\t\t<Spinner label=\"Loading\" />\n\t\t</ThemeProvider>\n\t);\n}\n\nrender(<Example />);\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic MultiSelect Component in React with Ink\nDESCRIPTION: This snippet demonstrates the basic usage of the MultiSelect component. It shows how to set up options, handle value changes, and display selected values.\nSOURCE: https://github.com/vadimdemedes/ink-ui/blob/main/docs/multi-select.md#2025-04-17_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, {useState} from 'react';\nimport {render, Box, Text} from 'ink';\nimport {MultiSelect} from '@inkjs/ui';\n\nfunction Example() {\n\tconst [value, setValue] = useState<string[]>([]);\n\n\treturn (\n\t\t<Box flexDirection=\"column\" gap={1}>\n\t\t\t<MultiSelect\n\t\t\t\toptions={[\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Red',\n\t\t\t\t\t\tvalue: 'red',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Green',\n\t\t\t\t\t\tvalue: 'green',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Yellow',\n\t\t\t\t\t\tvalue: 'yellow',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Blue',\n\t\t\t\t\t\tvalue: 'blue',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Magenta',\n\t\t\t\t\t\tvalue: 'magenta',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Cyan',\n\t\t\t\t\t\tvalue: 'cyan',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'White',\n\t\t\t\t\t\tvalue: 'white',\n\t\t\t\t\t},\n\t\t\t\t]}\n\t\t\t\tonChange={setValue}\n\t\t\t/>\n\n\t\t\t<Text>Selected values: {value.join(', ')}</Text>\n\t\t</Box>\n\t);\n}\n\nrender(<Example />);\n```\n\n----------------------------------------\n\nTITLE: Basic Select Component Implementation\nDESCRIPTION: Demonstrates basic usage of the Select component with color options. Shows how to handle state changes and render a selection list with multiple options.\nSOURCE: https://github.com/vadimdemedes/ink-ui/blob/main/docs/select.md#2025-04-17_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, {useState} from 'react';\nimport {render, Box, Text} from 'ink';\nimport {Select} from '@inkjs/ui';\n\nfunction Example() {\n\tconst [value, setValue] = useState<string | undefined>();\n\n\treturn (\n\t\t<Box padding={2} flexDirection=\"column\" gap={1}>\n\t\t\t<Select\n\t\t\t\toptions={[\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Red',\n\t\t\t\t\t\tvalue: 'red',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Green',\n\t\t\t\t\t\tvalue: 'green',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Yellow',\n\t\t\t\t\t\tvalue: 'yellow',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Blue',\n\t\t\t\t\t\tvalue: 'blue',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Magenta',\n\t\t\t\t\t\tvalue: 'magenta',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Cyan',\n\t\t\t\t\t\tvalue: 'cyan',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'White',\n\t\t\t\t\t\tvalue: 'white',\n\t\t\t\t\t},\n\t\t\t\t]}\n\t\t\t\tonChange={setValue}\n\t\t\t/>\n\n\t\t\t<Text>Selected value: {value}</Text>\n\t\t</Box>\n\t);\n}\n\nrender(<Example />);\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of TextInput Component in React with Ink UI\nDESCRIPTION: Demonstrates how to use the TextInput component with onChange prop to capture input value changes.\nSOURCE: https://github.com/vadimdemedes/ink-ui/blob/main/docs/text-input.md#2025-04-17_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, {useState} from 'react';\nimport {render, Box, Text} from 'ink';\nimport {TextInput} from '@inkjs/ui';\n\nfunction Example() {\n\tconst [value, setValue] = useState('');\n\n\treturn (\n\t\t<Box flexDirection=\"column\" gap={1}>\n\t\t\t<TextInput placeholder=\"Start typing...\" onChange={setValue} />\n\t\t\t<Text>Input value: \"{value}\"</Text>\n\t\t</Box>\n\t);\n}\n\nrender(<Example />);\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Email Input with Ink UI\nDESCRIPTION: Basic usage of EmailInput component as an uncontrolled component. This example shows how to implement an email input field that updates state via the onChange prop.\nSOURCE: https://github.com/vadimdemedes/ink-ui/blob/main/docs/email-input.md#2025-04-17_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, {useState} from 'react';\nimport {render, Box, Text} from 'ink';\nimport {EmailInput} from '@inkjs/ui';\n\nfunction Example() {\n\tconst [value, setValue] = useState('');\n\n\treturn (\n\t\t<Box flexDirection=\"column\" gap={1}>\n\t\t\t<EmailInput placeholder=\"Enter email...\" onChange={setValue} />\n\t\t\t<Text>Input value: \"{value}\"</Text>\n\t\t</Box>\n\t);\n}\n\nrender(<Example />);\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of PasswordInput in Ink UI\nDESCRIPTION: Example showing how to use PasswordInput as an uncontrolled component with the onChange prop to track value changes. The component masks the input while showing the actual value in a text component below.\nSOURCE: https://github.com/vadimdemedes/ink-ui/blob/main/docs/password-input.md#2025-04-17_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, {useState} from 'react';\nimport {render, Box, Text} from 'ink';\nimport {PasswordInput} from '@inkjs/ui';\nimport input from '../helpers/input.js';\n\nfunction Example() {\n\tconst [value, setValue] = useState('');\n\n\treturn (\n\t\t<Box flexDirection=\"column\" gap={1}>\n\t\t\t<PasswordInput placeholder=\"Enter password...\" onChange={setValue} />\n\t\t\t<Text>Input value: \"{value}\"</Text>\n\t\t</Box>\n\t);\n}\n\nrender(<Example />);\n```\n\n----------------------------------------\n\nTITLE: Implementing ConfirmInput Component with React and Ink UI\nDESCRIPTION: Example demonstrating how to create a confirmation dialog using ConfirmInput component. Shows integration with React state management and conditional rendering based on user choice. The component presents a terms of service agreement prompt with custom confirmation handling.\nSOURCE: https://github.com/vadimdemedes/ink-ui/blob/main/docs/confirm-input.md#2025-04-17_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, {useState} from 'react';\nimport {render, Box, Text} from 'ink';\nimport {ConfirmInput} from '@inkjs/ui';\n\nfunction Example() {\n\tconst [choice, setChoice] = useState<'agreed' | 'disagreed' | undefined>();\n\n\treturn (\n\t\t<Box gap={1}>\n\t\t\t{!choice && (\n\t\t\t\t<>\n\t\t\t\t\t<Text bold>Do you agree with terms of service?</Text>\n\t\t\t\t\t<ConfirmInput\n\t\t\t\t\t\tonConfirm={() => {\n\t\t\t\t\t\t\tsetChoice('agreed');\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tonCancel={() => {\n\t\t\t\t\t\t\tsetChoice('disagreed');\n\t\t\t\t\t\t}}\n\t\t\t\t\t/>\n\t\t\t\t</>\n\t\t\t)}\n\n\t\t\t{choice === 'agreed' && <Text>I know you haven't read them, but ok</Text>}\n\t\t\t{choice === 'disagreed' && <Text>Ok, whatever</Text>}\n\t\t</Box>\n\t);\n}\n\nrender(<Example />);\n```\n\n----------------------------------------\n\nTITLE: Implementing Progress Bar with React and Ink\nDESCRIPTION: Example implementation of a progress bar that automatically increments from 0 to 100. Uses React hooks (useState and useEffect) to manage progress state and update the bar every 50ms. The progress bar is contained within an Ink Box component with a fixed width of 30 units.\nSOURCE: https://github.com/vadimdemedes/ink-ui/blob/main/docs/progress-bar.md#2025-04-17_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, {useEffect, useState} from 'react';\nimport {render, Box} from 'ink';\nimport {ProgressBar} from '@inkjs/ui';\n\nfunction Example() {\n\tconst [progress, setProgress] = useState(0);\n\n\tuseEffect(() => {\n\t\tif (progress === 100) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst timer = setTimeout(() => {\n\t\t\tsetProgress(progress + 1);\n\t\t}, 50);\n\n\t\treturn () => {\n\t\t\tclearInterval(timer);\n\t\t};\n\t}, [progress]);\n\n\treturn (\n\t\t<Box width={30}>\n\t\t\t<ProgressBar value={progress} />\n\t\t</Box>\n\t);\n}\n\nrender(<Example />);\n```\n\n----------------------------------------\n\nTITLE: TextInput with Autocomplete in React and Ink UI\nDESCRIPTION: Demonstrates how to implement autocomplete functionality in TextInput using the suggestions prop.\nSOURCE: https://github.com/vadimdemedes/ink-ui/blob/main/docs/text-input.md#2025-04-17_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, {useState} from 'react';\nimport {render, Box, Text} from 'ink';\nimport {TextInput} from '@inkjs/ui';\n\nfunction Example() {\n\tconst [value, setValue] = useState('');\n\n\treturn (\n\t\t<Box flexDirection=\"column\" gap={1}>\n\t\t\t<TextInput\n\t\t\t\tplaceholder=\"Start typing...\"\n\t\t\t\tsuggestions={['Abby', 'Angel', 'Annie']}\n\t\t\t\tonChange={setValue}\n\t\t\t/>\n\n\t\t\t<Text>Input value: \"{value}\"</Text>\n\t\t</Box>\n\t);\n}\n\nrender(<Example />);\n```\n\n----------------------------------------\n\nTITLE: Customizing Email Domain Autocomplete\nDESCRIPTION: Implementation of EmailInput with custom domain suggestions. This example shows how to provide a custom list of domains for autocomplete via the domains prop.\nSOURCE: https://github.com/vadimdemedes/ink-ui/blob/main/docs/email-input.md#2025-04-17_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, {useState} from 'react';\nimport {render, Box, Text} from 'ink';\nimport {EmailInput} from '@inkjs/ui';\n\nfunction Example() {\n\tconst [value, setValue] = useState('');\n\n\treturn (\n\t\t<Box flexDirection=\"column\" gap={1}>\n\t\t\t<EmailInput\n\t\t\t\tplaceholder=\"Enter email...\"\n\t\t\t\tdomains={['example.com', 'example.org']}\n\t\t\t\tonChange={setValue}\n\t\t\t/>\n\n\t\t\t<Text>Input value: \"{value}\"</Text>\n\t\t</Box>\n\t);\n}\n\nrender(<Example />);\n```\n\n----------------------------------------\n\nTITLE: Implementing MultiSelect with Submit Functionality in React and Ink\nDESCRIPTION: This snippet demonstrates how to use the onSubmit prop instead of onChange to handle final selection when the user presses enter. It's useful when you only need the final selected values.\nSOURCE: https://github.com/vadimdemedes/ink-ui/blob/main/docs/multi-select.md#2025-04-17_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, {useState} from 'react';\nimport {render, Box, Text} from 'ink';\nimport {MultiSelect} from '@inkjs/ui';\n\nfunction Example() {\n\tconst [value, setValue] = useState<string[]>([]);\n\n\treturn (\n\t\t<Box flexDirection=\"column\" gap={1}>\n\t\t\t<MultiSelect\n\t\t\t\toptions={[\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Red',\n\t\t\t\t\t\tvalue: 'red',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Green',\n\t\t\t\t\t\tvalue: 'green',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Yellow',\n\t\t\t\t\t\tvalue: 'yellow',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Blue',\n\t\t\t\t\t\tvalue: 'blue',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Magenta',\n\t\t\t\t\t\tvalue: 'magenta',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Cyan',\n\t\t\t\t\t\tvalue: 'cyan',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'White',\n\t\t\t\t\t\tvalue: 'white',\n\t\t\t\t\t},\n\t\t\t\t]}\n\t\t\t\tonSubmit={setValue}\n\t\t\t/>\n\n\t\t\t<Text>Selected values: {value.join(', ')}</Text>\n\t\t</Box>\n\t);\n}\n\nrender(<Example />);\n```\n\n----------------------------------------\n\nTITLE: TextInput with onSubmit Callback in React and Ink UI\nDESCRIPTION: Shows how to use the onSubmit prop to capture the final input value when the user presses enter.\nSOURCE: https://github.com/vadimdemedes/ink-ui/blob/main/docs/text-input.md#2025-04-17_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, {useState} from 'react';\nimport {render, Box, Text} from 'ink';\nimport {TextInput} from '@inkjs/ui';\n\nfunction Example() {\n\tconst [value, setValue] = useState('');\n\n\treturn (\n\t\t<Box flexDirection=\"column\" gap={1}>\n\t\t\t<TextInput placeholder=\"Start typing...\" onSubmit={setValue} />\n\t\t\t<Text>Input value: \"{value}\"</Text>\n\t\t</Box>\n\t);\n}\n\nrender(<Example />);\n```\n\n----------------------------------------\n\nTITLE: Handling Form Submission with PasswordInput in Ink UI\nDESCRIPTION: Example demonstrating how to use the onSubmit prop with PasswordInput to capture the final value only when the user presses the Enter key, as an alternative to using onChange.\nSOURCE: https://github.com/vadimdemedes/ink-ui/blob/main/docs/password-input.md#2025-04-17_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, {useState} from 'react';\nimport {render, Box, Text} from 'ink';\nimport {PasswordInput} from '@inkjs/ui';\n\nfunction Example() {\n\tconst [value, setValue] = useState('');\n\n\treturn (\n\t\t<Box flexDirection=\"column\" gap={1}>\n\t\t\t<PasswordInput placeholder=\"Enter password...\" onSubmit={setValue} />\n\t\t\t<Text>Input value: \"{value}\"</Text>\n\t\t</Box>\n\t);\n}\n\nrender(<Example />);\n```\n\n----------------------------------------\n\nTITLE: Handling Email Input Submission\nDESCRIPTION: Example showing how to handle email input submission with the onSubmit prop. This captures the final value when the user presses enter instead of tracking every change.\nSOURCE: https://github.com/vadimdemedes/ink-ui/blob/main/docs/email-input.md#2025-04-17_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, {useState} from 'react';\nimport {render, Box, Text} from 'ink';\nimport {EmailInput} from '@inkjs/ui';\n\nfunction Example() {\n\tconst [value, setValue] = useState('');\n\n\treturn (\n\t\t<Box flexDirection=\"column\" gap={1}>\n\t\t\t<EmailInput placeholder=\"Enter email...\" onSubmit={setValue} />\n\t\t\t<Text>Input value: \"{value}\"</Text>\n\t\t</Box>\n\t);\n}\n\nrender(<Example />);\n```\n\n----------------------------------------\n\nTITLE: Using Spinner Component in Ink-UI Terminal Applications\nDESCRIPTION: Example code demonstrating how to use the Spinner component from @inkjs/ui in a React terminal application. The component displays a loading spinner with a label, indicating that a process is running.\nSOURCE: https://github.com/vadimdemedes/ink-ui/blob/main/docs/spinner.md#2025-04-17_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport {render, Box} from 'ink';\nimport {Spinner} from '@inkjs/ui';\n\nfunction Example() {\n\treturn <Spinner label=\"Loading\" />;\n}\n\nrender(<Example />);\n```\n\n----------------------------------------\n\nTITLE: Implementing StatusMessage Component with Different Variants in Ink React\nDESCRIPTION: Example code demonstrating how to use the StatusMessage component from @inkjs/ui to display different status message variants (success, error, warning, info) within an Ink application. The component is rendered within a Box with vertical layout and padding.\nSOURCE: https://github.com/vadimdemedes/ink-ui/blob/main/docs/status-message.md#2025-04-17_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport {render, Box} from 'ink';\nimport {StatusMessage} from '@inkjs/ui';\n\nfunction Example() {\n\treturn (\n\t\t<Box flexDirection=\"column\" padding={2}>\n\t\t\t<StatusMessage variant=\"success\">Success</StatusMessage>\n\t\t\t<StatusMessage variant=\"error\">Error</StatusMessage>\n\t\t\t<StatusMessage variant=\"warning\">Warning</StatusMessage>\n\t\t\t<StatusMessage variant=\"info\">Info</StatusMessage>\n\t\t</Box>\n\t);\n}\n\nrender(<Example />);\n```\n\n----------------------------------------\n\nTITLE: Implementing Alert Component in Ink React Application\nDESCRIPTION: Example showing how to use the Alert component with different variants (success, error, warning, info) in an Ink-based React CLI application. The component is rendered within a Box layout with vertical spacing.\nSOURCE: https://github.com/vadimdemedes/ink-ui/blob/main/docs/alert.md#2025-04-17_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport {render, Box} from 'ink';\nimport {Alert} from '@inkjs/ui';\n\nfunction Example() {\n\treturn (\n\t\t<Box flexDirection=\"column\" width={60} gap={1}>\n\t\t\t<Alert variant=\"success\">A new version of this CLI is available</Alert>\n\n\t\t\t<Alert variant=\"error\">Your license is expired</Alert>\n\n\t\t\t<Alert variant=\"warning\">\n\t\t\t\tCurrent version of this CLI has been deprecated\n\t\t\t</Alert>\n\n\t\t\t<Alert variant=\"info\">API won't be available tomorrow night</Alert>\n\t\t</Box>\n\t);\n}\n\nrender(<Example />);\n```\n\n----------------------------------------\n\nTITLE: Rendering Badges with Different Colors in Ink UI\nDESCRIPTION: This code snippet demonstrates how to use the Badge component from @inkjs/ui to render badges with different colors in a React component using Ink. It imports necessary components, creates an Example component that renders multiple badges with different colors, and then renders the Example component.\nSOURCE: https://github.com/vadimdemedes/ink-ui/blob/main/docs/badge.md#2025-04-17_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport {render, Box} from 'ink';\nimport {Badge} from '@inkjs/ui';\n\nfunction Example() {\n\treturn (\n\t\t<Box gap={2}>\n\t\t\t<Badge color=\"green\">Pass</Badge>\n\t\t\t<Badge color=\"red\">Fail</Badge>\n\t\t\t<Badge color=\"yellow\">Warn</Badge>\n\t\t\t<Badge color=\"blue\">Todo</Badge>\n\t\t</Box>\n\t);\n}\n\nrender(<Example />);\n```\n\n----------------------------------------\n\nTITLE: Rendering Nested Unordered Lists with Ink UI in React\nDESCRIPTION: This code snippet demonstrates how to use the UnorderedList component from the @inkjs/ui library to create a nested list structure in a React component. It shows the usage of UnorderedList.Item for individual list items and how to nest UnorderedList components for sub-lists.\nSOURCE: https://github.com/vadimdemedes/ink-ui/blob/main/docs/unordered-list.md#2025-04-17_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport {render, Box, Text} from 'ink';\nimport {UnorderedList} from '@inkjs/ui';\n\nfunction Example() {\n\treturn (\n\t\t<UnorderedList>\n\t\t\t<UnorderedList.Item>\n\t\t\t\t<Text>Red</Text>\n\t\t\t</UnorderedList.Item>\n\n\t\t\t<UnorderedList.Item>\n\t\t\t\t<Text>Green</Text>\n\n\t\t\t\t<UnorderedList>\n\t\t\t\t\t<UnorderedList.Item>\n\t\t\t\t\t\t<Text>Light</Text>\n\t\t\t\t\t</UnorderedList.Item>\n\n\t\t\t\t\t<UnorderedList.Item>\n\t\t\t\t\t\t<Text>Dark</Text>\n\t\t\t\t\t</UnorderedList.Item>\n\t\t\t\t</UnorderedList>\n\t\t\t</UnorderedList.Item>\n\n\t\t\t<UnorderedList.Item>\n\t\t\t\t<Text>Blue</Text>\n\t\t\t</UnorderedList.Item>\n\t\t</UnorderedList>\n\t);\n}\n\nrender(<Example />);\n```\n\n----------------------------------------\n\nTITLE: Rendering Nested Ordered Lists with Ink UI in React\nDESCRIPTION: This code snippet demonstrates how to use the OrderedList component from the @inkjs/ui library to create nested ordered lists in a React application. It showcases the basic structure, nesting capabilities, and integration with other Ink components like Text and Box.\nSOURCE: https://github.com/vadimdemedes/ink-ui/blob/main/docs/ordered-list.md#2025-04-17_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport {render, Box, Text} from 'ink';\nimport {OrderedList} from '@inkjs/ui';\n\nfunction Example() {\n\treturn (\n\t\t<OrderedList>\n\t\t\t<OrderedList.Item>\n\t\t\t\t<Text>Red</Text>\n\t\t\t</OrderedList.Item>\n\n\t\t\t<OrderedList.Item>\n\t\t\t\t<Text>Green</Text>\n\n\t\t\t\t<OrderedList>\n\t\t\t\t\t<OrderedList.Item>\n\t\t\t\t\t\t<Text>Light</Text>\n\t\t\t\t\t</OrderedList.Item>\n\n\t\t\t\t\t<OrderedList.Item>\n\t\t\t\t\t\t<Text>Dark</Text>\n\t\t\t\t\t</OrderedList.Item>\n\t\t\t\t</OrderedList>\n\t\t\t</OrderedList.Item>\n\n\t\t\t<OrderedList.Item>\n\t\t\t\t<Text>Blue</Text>\n\t\t\t</OrderedList.Item>\n\t\t</OrderedList>\n\t);\n}\n\nrender(<Example />);\n```\n\n----------------------------------------\n\nTITLE: Select Component with Default Value\nDESCRIPTION: Shows how to initialize the Select component with a default selected value using the defaultValue prop.\nSOURCE: https://github.com/vadimdemedes/ink-ui/blob/main/docs/select.md#2025-04-17_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, {useState} from 'react';\nimport {render, Box, Text} from 'ink';\nimport {Select} from '@inkjs/ui';\n\nfunction Example() {\n\tconst [value, setValue] = useState('green');\n\n\treturn (\n\t\t<Box padding={2} flexDirection=\"column\" gap={1}>\n\t\t\t<Select\n\t\t\t\tdefaultValue={value}\n\t\t\t\toptions={[\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Red',\n\t\t\t\t\t\tvalue: 'red',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Green',\n\t\t\t\t\t\tvalue: 'green',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Yellow',\n\t\t\t\t\t\tvalue: 'yellow',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Blue',\n\t\t\t\t\t\tvalue: 'blue',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Magenta',\n\t\t\t\t\t\tvalue: 'magenta',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Cyan',\n\t\t\t\t\t\tvalue: 'cyan',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'White',\n\t\t\t\t\t\tvalue: 'white',\n\t\t\t\t\t},\n\t\t\t\t]}\n\t\t\t\tonChange={setValue}\n\t\t\t/>\n\n\t\t\t<Text>Selected value: {value}</Text>\n\t\t</Box>\n\t);\n}\n\nrender(<Example />);\n```\n\n----------------------------------------\n\nTITLE: Configuring MultiSelect with Default Value in React and Ink\nDESCRIPTION: This example shows how to set a default value for the MultiSelect component using the defaultValue prop. It demonstrates initializing the component with pre-selected options.\nSOURCE: https://github.com/vadimdemedes/ink-ui/blob/main/docs/multi-select.md#2025-04-17_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, {useState} from 'react';\nimport {render, Box, Text} from 'ink';\nimport {MultiSelect} from '@inkjs/ui';\n\nfunction Example() {\n\tconst [value, setValue] = useState(['green']);\n\n\treturn (\n\t\t<Box flexDirection=\"column\" gap={1}>\n\t\t\t<MultiSelect\n\t\t\t\tdefaultValue={value}\n\t\t\t\toptions={[\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Red',\n\t\t\t\t\t\tvalue: 'red',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Green',\n\t\t\t\t\t\tvalue: 'green',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Yellow',\n\t\t\t\t\t\tvalue: 'yellow',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Blue',\n\t\t\t\t\t\tvalue: 'blue',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Magenta',\n\t\t\t\t\t\tvalue: 'magenta',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'Cyan',\n\t\t\t\t\t\tvalue: 'cyan',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'White',\n\t\t\t\t\t\tvalue: 'white',\n\t\t\t\t\t},\n\t\t\t\t]}\n\t\t\t\tonChange={setValue}\n\t\t\t/>\n\n\t\t\t<Text>Selected values: {value.join(', ')}</Text>\n\t\t</Box>\n\t);\n}\n\nrender(<Example />);\n```\n\n----------------------------------------\n\nTITLE: Setting Default Value in Email Input\nDESCRIPTION: Example demonstrating how to set a default value for the EmailInput component using the defaultValue prop. This creates a pre-filled email input field.\nSOURCE: https://github.com/vadimdemedes/ink-ui/blob/main/docs/email-input.md#2025-04-17_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, {useState} from 'react';\nimport {render, Box, Text} from 'ink';\nimport {EmailInput} from '@inkjs/ui';\n\nfunction Example() {\n\tconst [value, setValue] = useState('jane@hey.com');\n\n\treturn (\n\t\t<Box flexDirection=\"column\" gap={1}>\n\t\t\t<EmailInput\n\t\t\t\tplaceholder=\"Enter email...\"\n\t\t\t\tdefaultValue={value}\n\t\t\t\tonChange={setValue}\n\t\t\t/>\n\n\t\t\t<Text>Input value: \"{value}\"</Text>\n\t\t</Box>\n\t);\n}\n\nrender(<Example />);\n```\n\n----------------------------------------\n\nTITLE: TextInput with Default Value in React and Ink UI\nDESCRIPTION: Shows how to set a default value for the TextInput component using the defaultValue prop.\nSOURCE: https://github.com/vadimdemedes/ink-ui/blob/main/docs/text-input.md#2025-04-17_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, {useState} from 'react';\nimport {render, Box, Text} from 'ink';\nimport {TextInput} from '@inkjs/ui';\n\nfunction Example() {\n\tconst [value, setValue] = useState('Jane');\n\n\treturn (\n\t\t<Box flexDirection=\"column\" gap={1}>\n\t\t\t<TextInput\n\t\t\t\tplaceholder=\"Start typing...\"\n\t\t\t\tdefaultValue={value}\n\t\t\t\tonChange={setValue}\n\t\t\t/>\n\n\t\t\t<Text>Input value: \"{value}\"</Text>\n\t\t</Box>\n\t);\n}\n\nrender(<Example />);\n```\n\n----------------------------------------\n\nTITLE: Component Theme Structure in TypeScript\nDESCRIPTION: Example of a Spinner component's theme structure showing the styles defined for container, frame, and label parts.\nSOURCE: https://github.com/vadimdemedes/ink-ui/blob/main/readme.md#2025-04-17_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\nconst theme = {\n\tstyles: {\n\t\tcontainer: (): BoxProps => ({\n\t\t\tgap: 1,\n\t\t}),\n\t\tframe: (): TextProps => ({\n\t\t\tcolor: 'blue',\n\t\t}),\n\t\tlabel: (): TextProps => ({}),\n\t},\n} satisfies ComponentTheme;\n\nexport default theme;\n```\n\n----------------------------------------\n\nTITLE: Component Configuration in Theme\nDESCRIPTION: Example from UnorderedList component showing how to define component configuration in a theme using the config object.\nSOURCE: https://github.com/vadimdemedes/ink-ui/blob/main/readme.md#2025-04-17_snippet_17\n\nLANGUAGE: ts\nCODE:\n```\nconst theme = {\n\tconfig: () => ({\n\t\tmarker: '─',\n\t}),\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Status Message Component\nDESCRIPTION: Example of using StatusMessage component for detailed status information.\nSOURCE: https://github.com/vadimdemedes/ink-ui/blob/main/readme.md#2025-04-17_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nimport {StatusMessage} from '@inkjs/ui';\n\n<StatusMessage variant=\"success\">\n\tNew version is deployed to production\n</StatusMessage>\n\n<StatusMessage variant=\"error\">\n  Failed to deploy a new version of this app\n</StatusMessage>\n\n<StatusMessage variant=\"warning\">\n    Health checks aren't configured\n</StatusMessage>\n\n<StatusMessage variant=\"info\">\n    This version is already deployed\n</StatusMessage>\n```\n\n----------------------------------------\n\nTITLE: Implementing Text Input Component\nDESCRIPTION: Example of using TextInput component for single-line text input with optional autocomplete functionality.\nSOURCE: https://github.com/vadimdemedes/ink-ui/blob/main/readme.md#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport {TextInput} from '@inkjs/ui';\n\n<TextInput\n\tplaceholder=\"Enter your name...\"\n\tonSubmit={name => {\n\t\t// `name` contains user input\n\t}}\n/>;\n```\n\n----------------------------------------\n\nTITLE: Implementing Progress Bar Component\nDESCRIPTION: Example of using ProgressBar component for displaying progress percentage.\nSOURCE: https://github.com/vadimdemedes/ink-ui/blob/main/readme.md#2025-04-17_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport {ProgressBar} from '@inkjs/ui';\n\n// `progress` must be a number between 0 and 100\n<ProgressBar value={progress} />;\n```\n\n----------------------------------------\n\nTITLE: Implementing Password Input Component\nDESCRIPTION: Example of using PasswordInput component for masked sensitive data input.\nSOURCE: https://github.com/vadimdemedes/ink-ui/blob/main/readme.md#2025-04-17_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport {PasswordInput} from '@inkjs/ui';\n\n<PasswordInput\n\tplaceholder=\"Enter password...\"\n\tonSubmit={password => {\n\t\t// `password` contains user input\n\t}}\n/>;\n```\n\n----------------------------------------\n\nTITLE: Implementing Spinner Component\nDESCRIPTION: Example of using Spinner component for loading indicators.\nSOURCE: https://github.com/vadimdemedes/ink-ui/blob/main/readme.md#2025-04-17_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport {Spinner} from '@inkjs/ui';\n\n<Spinner label=\"Loading\" />;\n```\n\n----------------------------------------\n\nTITLE: Implementing Email Input Component\nDESCRIPTION: Example of using EmailInput component with domain autocompletion for email addresses.\nSOURCE: https://github.com/vadimdemedes/ink-ui/blob/main/readme.md#2025-04-17_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport {EmailInput} from '@inkjs/ui';\n\n<EmailInput\n\tplaceholder=\"Enter email...\"\n\tonSubmit={email => {\n\t\t// `email` contains user input\n\t}}\n/>;\n```\n\n----------------------------------------\n\nTITLE: Implementing Badge Component\nDESCRIPTION: Example of using Badge component for status indicators.\nSOURCE: https://github.com/vadimdemedes/ink-ui/blob/main/readme.md#2025-04-17_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nimport {Badge} from '@inkjs/ui';\n\n<Badge color=\"green\">Pass</Badge>\n<Badge color=\"red\">Fail</Badge>\n<Badge color=\"yellow\">Warn</Badge>\n<Badge color=\"blue\">Todo</Badge>\n```\n\n----------------------------------------\n\nTITLE: Implementing Unordered List Component\nDESCRIPTION: Example of using UnorderedList component for nested bullet point lists.\nSOURCE: https://github.com/vadimdemedes/ink-ui/blob/main/readme.md#2025-04-17_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\nimport {UnorderedList} from '@inkjs/ui';\n\n<UnorderedList>\n\t<UnorderedList.Item>\n\t\t<Text>Red</Text>\n\t</UnorderedList.Item>\n\n\t<UnorderedList.Item>\n\t\t<Text>Green</Text>\n\n\t\t<UnorderedList>\n\t\t\t<UnorderedList.Item>\n\t\t\t\t<Text>Light</Text>\n\t\t\t</UnorderedList.Item>\n\n\t\t\t<UnorderedList.Item>\n\t\t\t\t<Text>Dark</Text>\n\t\t\t</UnorderedList.Item>\n\t\t</UnorderedList>\n\t</UnorderedList.Item>\n\n\t<UnorderedList.Item>\n\t\t<Text>Blue</Text>\n\t</UnorderedList.Item>\n</UnorderedList>;\n```\n\n----------------------------------------\n\nTITLE: Implementing Confirm Input Component\nDESCRIPTION: Example of using ConfirmInput component for Y/n confirmation prompts.\nSOURCE: https://github.com/vadimdemedes/ink-ui/blob/main/readme.md#2025-04-17_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport {ConfirmInput} from '@inkjs/ui';\n\n<ConfirmInput\n\tonConfirm={() => {\n\t\t// confirmed\n\t}}\n\tonCancel={() => {\n\t\t// cancelled\n\t}}\n/>;\n```\n\n----------------------------------------\n\nTITLE: Implementing Select Component\nDESCRIPTION: Example of using Select component for single option selection from a scrollable list.\nSOURCE: https://github.com/vadimdemedes/ink-ui/blob/main/readme.md#2025-04-17_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport {Select} from '@inkjs/ui';\n\n<Select\n\toptions={[\n\t\t{\n\t\t\tlabel: 'Red',\n\t\t\tvalue: 'red',\n\t\t},\n\t\t{\n\t\t\tlabel: 'Green',\n\t\t\tvalue: 'green',\n\t\t},\n\t\t{\n\t\t\tlabel: 'Yellow',\n\t\t\tvalue: 'yellow',\n\t\t},\n\t\t/* ... */\n\t]}\n\tonChange={newValue => {\n\t\t// `newValue` equals the `value` field of the selected option\n\t\t// For example, \"yellow\"\n\t}}\n/>;\n```\n\n----------------------------------------\n\nTITLE: Implementing Multi Select Component\nDESCRIPTION: Example of using MultiSelect component for selecting multiple options from a list.\nSOURCE: https://github.com/vadimdemedes/ink-ui/blob/main/readme.md#2025-04-17_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport {MultiSelect} from '@inkjs/ui';\n\n<MultiSelect\n\toptions={[\n\t\t{\n\t\t\tlabel: 'Red',\n\t\t\tvalue: 'red',\n\t\t},\n\t\t{\n\t\t\tlabel: 'Green',\n\t\t\tvalue: 'green',\n\t\t},\n\t\t{\n\t\t\tlabel: 'Yellow',\n\t\t\tvalue: 'yellow',\n\t\t},\n\t\t/* ... */\n\t]}\n\tonChange={newValue => {\n\t\t// `newValue` is an array of `value` fields of the selected options\n\t\t// For example, [\"green\", \"yellow\"]\n\t}}\n/>;\n```\n\n----------------------------------------\n\nTITLE: Implementing Ordered List Component\nDESCRIPTION: Example of using OrderedList component for nested numbered lists.\nSOURCE: https://github.com/vadimdemedes/ink-ui/blob/main/readme.md#2025-04-17_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\nimport {OrderedList} from '@inkjs/ui';\n\n<OrderedList>\n\t<OrderedList.Item>\n\t\t<Text>Red</Text>\n\t</OrderedList.Item>\n\n\t<OrderedList.Item>\n\t\t<Text>Green</Text>\n\n\t\t<OrderedList>\n\t\t\t<OrderedList.Item>\n\t\t\t\t<Text>Light</Text>\n\t\t\t</OrderedList.Item>\n\n\t\t\t<OrderedList.Item>\n\t\t\t\t<Text>Dark</Text>\n\t\t\t</OrderedList.Item>\n\t\t</OrderedList>\n\t</OrderedList.Item>\n\n\t<OrderedList.Item>\n\t\t<Text>Blue</Text>\n\t</OrderedList.Item>\n</OrderedList>;\n```\n\n----------------------------------------\n\nTITLE: Implementing Alert Component\nDESCRIPTION: Example of using Alert component for important messages and notifications.\nSOURCE: https://github.com/vadimdemedes/ink-ui/blob/main/readme.md#2025-04-17_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\nimport {Alert} from '@inkjs/ui';\n\n<Alert variant=\"success\">\n    A new version of this CLI is available\n</Alert>\n\n<Alert variant=\"error\">\n    Your license is expired\n</Alert>\n\n<Alert variant=\"warning\">\n    Current version of this CLI has been deprecated\n</Alert>\n\n<Alert variant=\"info\">\n    API won't be available tomorrow night\n</Alert>\n```\n\n----------------------------------------\n\nTITLE: Installing Ink UI Components\nDESCRIPTION: Command to install the Ink UI component library via npm package manager.\nSOURCE: https://github.com/vadimdemedes/ink-ui/blob/main/readme.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @inkjs/ui\n```"
  }
]