[
  {
    "owner": "mario-andreschak",
    "repo": "flujo",
    "content": "TITLE: POST Request Example - Typescript\nDESCRIPTION: Example of saving data to the storage API using a POST request.  It demonstrates how to construct the request body with a key and a value to store.  The value is stringified into a JSON string. The example shows handling both successful and error responses.\nSOURCE: https://github.com/mario-andreschak/flujo/blob/main/src/app/api/storage/README.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// Save data\nconst response = await fetch('/api/storage', {\n  method: 'POST',\n  headers: { 'Content-Type': 'application/json' },\n  body: JSON.stringify({\n    key: 'models',\n    value: [\n      { id: '1', name: 'Model 1' },\n      { id: '2', name: 'Model 2' }\n    ]\n  })\n});\n\nconst data = await response.json();\nif (data.success) {\n  console.log('Data saved successfully');\n} else {\n  console.error('Error saving data:', data.error);\n}\n```\n\n----------------------------------------\n\nTITLE: Clone Repository Request\nDESCRIPTION: This JSON payload represents a request to clone a Git repository. It includes the repository URL, the path to save the repository, and an optional branch parameter. The API will clone the specified repository to the given path.\nSOURCE: https://github.com/mario-andreschak/flujo/blob/main/src/app/api/git/README.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"action\": \"clone\",\n  \"repoUrl\": \"https://github.com/username/repo.git\",\n  \"savePath\": \"/path/to/save/repo\",\n  \"branch\": \"main\" // Optional\n}\n```\n\n----------------------------------------\n\nTITLE: Backup API Request Body JSON\nDESCRIPTION: This JSON snippet shows the structure of the request body for the POST /api/backup endpoint. The `selections` array specifies which application data to include in the backup. Valid options include 'models', 'mcpServers', 'flows', 'chatHistory', 'settings', 'globalEnvVars', 'encryptionKey', and 'mcpServersFolder'.\nSOURCE: https://github.com/mario-andreschak/flujo/blob/main/src/app/api/backup/README.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"selections\": [\n    \"models\",\n    \"mcpServers\",\n    \"flows\",\n    \"chatHistory\",\n    \"settings\",\n    \"globalEnvVars\",\n    \"encryptionKey\",\n    \"mcpServersFolder\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Clone Repository Example (TypeScript)\nDESCRIPTION: This TypeScript code snippet demonstrates how to make a POST request to the '/api/git' endpoint to clone a repository. It sets the 'Content-Type' header to 'application/json' and includes the necessary parameters in the request body. Upon a successful response, it logs the repository path; otherwise, it logs an error message.\nSOURCE: https://github.com/mario-andreschak/flujo/blob/main/src/app/api/git/README.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nconst response = await fetch('/api/git', {\n  method: 'POST',\n  headers: { 'Content-Type': 'application/json' },\n  body: JSON.stringify({\n    action: 'clone',\n    repoUrl: 'https://github.com/username/repo.git',\n    savePath: '/path/to/save/repo',\n    branch: 'main'\n  })\n});\n\nconst data = await response.json();\nif (data.success) {\n  console.log(`Repository cloned to: ${data.path}`);\n} else {\n  console.error(`Error: ${data.error}`);\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables with TypeScript\nDESCRIPTION: Demonstrates setting both single and multiple environment variables using the API's POST endpoint.  It showcases setting 'API_URL' individually and then setting 'API_URL', 'API_KEY' (which will be automatically encrypted), and 'DEBUG' in a single request.\nSOURCE: https://github.com/mario-andreschak/flujo/blob/main/src/app/api/env/README.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Set a single environment variable\nawait fetch('/api/env', {\n  method: 'POST',\n  headers: { 'Content-Type': 'application/json' },\n  body: JSON.stringify({\n    action: 'set',\n    key: 'API_URL',\n    value: 'https://api.example.com'\n  })\n});\n\n// Set multiple environment variables\nawait fetch('/api/env', {\n  method: 'POST',\n  headers: { 'Content-Type': 'application/json' },\n  body: JSON.stringify({\n    action: 'setAll',\n    variables: {\n      'API_URL': 'https://api.example.com',\n      'API_KEY': 'secret-api-key', // Will be automatically encrypted\n      'DEBUG': 'true'\n    }\n  })\n});\n```\n\n----------------------------------------\n\nTITLE: Fetching All Environment Variables with TypeScript\nDESCRIPTION: Retrieves all environment variables from the API, masking sensitive values by default. It demonstrates fetching the data and logging the 'variables' object to the console.\nSOURCE: https://github.com/mario-andreschak/flujo/blob/main/src/app/api/env/README.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Get all environment variables (sensitive values masked)\nconst response = await fetch('/api/env');\nconst data = await response.json();\n\nconsole.log('Environment variables:', data.variables);\n\n// Get all environment variables including sensitive values\nconst responseWithSecrets = await fetch('/api/env?includeSecrets=true');\nconst dataWithSecrets = await responseWithSecrets.json();\n\nconsole.log('Environment variables with secrets:', dataWithSecrets.variables);\n```\n\n----------------------------------------\n\nTITLE: Initialize Encryption API Request (JSON)\nDESCRIPTION: Initializes the encryption system with a user-defined password. Requires a 'password' field. The 'action' must be 'initialize'.\nSOURCE: https://github.com/mario-andreschak/flujo/blob/main/src/app/api/encryption/secure/README.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"action\": \"initialize\",\n  \"password\": \"user-password\"\n}\n```\n\n----------------------------------------\n\nTITLE: Decrypt Data API Request (JSON)\nDESCRIPTION: Decrypts the provided data. If 'password' is omitted, it uses default encryption. Requires a 'data' field. The 'action' must be 'decrypt'.\nSOURCE: https://github.com/mario-andreschak/flujo/blob/main/src/app/api/encryption/secure/README.md#_snippet_4\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"action\": \"decrypt\",\n  \"data\": \"encrypted-data\",\n  \"password\": \"user-password\" // Optional\n}\n```\n\n----------------------------------------\n\nTITLE: Encrypt Data API Request (JSON)\nDESCRIPTION: Encrypts the provided data. If 'password' is omitted, it uses default encryption. Requires a 'data' field. The 'action' must be 'encrypt'.\nSOURCE: https://github.com/mario-andreschak/flujo/blob/main/src/app/api/encryption/secure/README.md#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"action\": \"encrypt\",\n  \"data\": \"data-to-encrypt\",\n  \"password\": \"user-password\" // Optional\n}\n```\n\n----------------------------------------\n\nTITLE: Initialize Default Encryption API Request (JSON)\nDESCRIPTION: Initializes the encryption system with default encryption, which does not require a password.  The 'action' must be 'initialize_default'.\nSOURCE: https://github.com/mario-andreschak/flujo/blob/main/src/app/api/encryption/secure/README.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"action\": \"initialize_default\"\n}\n```\n\n----------------------------------------\n\nTITLE: Run Command Example (TypeScript)\nDESCRIPTION: This TypeScript code snippet demonstrates how to make a POST request to the '/api/git' endpoint to run a command in a repository.  It configures the 'Content-Type' and provides the action, repository path, command, arguments, and environment variables. Upon a successful response, it logs the command output; otherwise, it logs an error message.\nSOURCE: https://github.com/mario-andreschak/flujo/blob/main/src/app/api/git/README.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nconst response = await fetch('/api/git', {\n  method: 'POST',\n  headers: { 'Content-Type': 'application/json' },\n  body: JSON.stringify({\n    action: 'run',\n    savePath: '/path/to/repo',\n    runCommand: 'npm start',\n    args: ['--port', '3000'],\n    env: { 'NODE_ENV': 'development' }\n  })\n});\n\nconst data = await response.json();\nif (data.success) {\n  console.log(`Command output: ${data.commandOutput}`);\n} else {\n  console.error(`Error: ${data.error}`);\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing the Application with fetch API (TypeScript)\nDESCRIPTION: This TypeScript code snippet demonstrates how to initialize the application using the `fetch` API. It sends a GET request to the `/api/init` endpoint and processes the JSON response to handle both successful and failed initialization scenarios. It leverages `console.log` for successful messages and `console.error` and `showErrorNotification` for error handling.\nSOURCE: https://github.com/mario-andreschak/flujo/blob/main/src/app/api/init/README.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Initialize the application\nconst response = await fetch('/api/init');\nconst data = await response.json();\n\nif (data.success) {\n  console.log('Initialization successful:', data.message);\n} else {\n  console.error('Initialization failed:', data.error);\n  // Show error message to user\n  showErrorNotification(data.error);\n}\n```\n\n----------------------------------------\n\nTITLE: Using Flow Service in Frontend Component (TypeScript)\nDESCRIPTION: Demonstrates how to use the flowService in a frontend component to load flows. This example highlights the separation of concerns, where the frontend component interacts with the frontend service, which in turn interacts with the API layer. The frontend service handles making API calls to the appropriate endpoint, which the API layer then processes and delegates to the backend service.\nSOURCE: https://github.com/mario-andreschak/flujo/blob/main/src/app/api/flow/README.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Frontend component\nimport { flowService } from '@/frontend/services/flow';\n\n// Call a method on the frontend service\nconst flows = await flowService.loadFlows();\n```\n\n----------------------------------------\n\nTITLE: Creating Backup with TypeScript\nDESCRIPTION: This TypeScript code snippet demonstrates how to create a backup using the /api/backup endpoint.  It makes a POST request to the endpoint with a JSON body containing the desired selections for the backup. Upon success, it converts the response to a blob, creates a download link, triggers the download, and cleans up. If there's an error, it parses the error response and logs the error message to the console.\nSOURCE: https://github.com/mario-andreschak/flujo/blob/main/src/app/api/backup/README.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Create a backup with selected items\nconst response = await fetch('/api/backup', {\n  method: 'POST',\n  headers: { 'Content-Type': 'application/json' },\n  body: JSON.stringify({\n    selections: ['models', 'flows', 'mcpServers', 'settings']\n  })\n});\n\nif (response.ok) {\n  // Convert the response to a blob\n  const blob = await response.blob();\n  \n  // Create a download link\n  const url = window.URL.createObjectURL(blob);\n  const a = document.createElement('a');\n  a.href = url;\n  a.download = 'flujo-backup.zip';\n  \n  // Trigger the download\n  document.body.appendChild(a);\n  a.click();\n  \n  // Clean up\n  window.URL.revokeObjectURL(url);\n  document.body.removeChild(a);\n} else {\n  const errorData = await response.json();\n  console.error(`Error creating backup: ${errorData.error}`);\n}\n```\n\n----------------------------------------\n\nTITLE: Using Model Frontend Service Methods in TypeScript\nDESCRIPTION: This code snippet demonstrates how to import and use the methods provided by the Model frontend service to interact with the backend API. It shows examples for loading models, getting a specific model, adding a new model, updating an existing model, and deleting a model. It assumes that `modelService` is properly initialized and configured.\nSOURCE: https://github.com/mario-andreschak/flujo/blob/main/src/frontend/services/model/README.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Import the frontend service\nimport { modelService } from '@/frontend/services/model';\n\n// Use the service methods\nconst models = await modelService.loadModels();\nconst model = await modelService.getModel(id);\nconst result = await modelService.addModel(model);\nconst result = await modelService.updateModel(model);\nconst result = await modelService.deleteModel(id);\n```\n\n----------------------------------------\n\nTITLE: Frontend Service Integration Example (TypeScript)\nDESCRIPTION: Illustrates how API endpoints are integrated with frontend services to provide a clean interface for frontend components. The `modelService` handles fetching and adding models via the `/api/model` endpoint. It abstracts away the details of making HTTP requests, allowing components to focus on data display and user interaction.\nSOURCE: https://github.com/mario-andreschak/flujo/blob/main/src/app/api/README.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// Frontend service\nexport const modelService = {\n  async loadModels() {\n    const response = await fetch('/api/model?action=listModels');\n    const data = await response.json();\n    return data.models;\n  },\n  \n  async addModel(model) {\n    const response = await fetch('/api/model', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ action: 'addModel', model })\n    });\n    return await response.json();\n  }\n};\n\n// Frontend component\nconst models = await modelService.loadModels();\n```\n\n----------------------------------------\n\nTITLE: Calling MCP Service from Frontend\nDESCRIPTION: This code snippet demonstrates how a frontend component interacts with the MCP service. It imports the `mcpService` from the frontend services and calls the `callTool` method. This call initiates a request through the API layer to the backend service.  The server name, tool name, and arguments are passed to the `callTool` function.\nSOURCE: https://github.com/mario-andreschak/flujo/blob/main/src/app/api/mcp/README.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Frontend component\nimport { mcpService } from '@/frontend/services/mcp';\n\n// Call a method on the frontend service\nconst result = await mcpService.callTool('serverName', 'toolName', { arg1: 'value1' });\n```\n\n----------------------------------------\n\nTITLE: Run Command Request\nDESCRIPTION: This JSON payload represents a request to run a command in a specified repository. It includes the path to the repository, the command to run, optional arguments, and optional environment variables. The API will execute the provided command with the specified parameters.\nSOURCE: https://github.com/mario-andreschak/flujo/blob/main/src/app/api/git/README.md#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"action\": \"run\",\n  \"savePath\": \"/path/to/repo\",\n  \"runCommand\": \"npm start\",\n  \"args\": [\"--port\", \"3000\"], // Optional\n  \"env\": { \"NODE_ENV\": \"development\" } // Optional\n}\n```\n\n----------------------------------------\n\nTITLE: Build Project Request\nDESCRIPTION: This JSON payload represents a request to build a project in a specified repository using a given build command. It requires the path to the repository and the build command to be executed (e.g., 'npm run build'). The API will execute the build command within the specified directory.\nSOURCE: https://github.com/mario-andreschak/flujo/blob/main/src/app/api/git/README.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"action\": \"build\",\n  \"savePath\": \"/path/to/repo\",\n  \"buildCommand\": \"npm run build\"\n}\n```\n\n----------------------------------------\n\nTITLE: Success Response JSON\nDESCRIPTION: JSON response indicating a successful restore operation.  This is the expected output on a successful API call.\nSOURCE: https://github.com/mario-andreschak/flujo/blob/main/src/app/api/restore/README.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"success\": true\n}\n```\n\n----------------------------------------\n\nTITLE: GET Request to Chat Completions Endpoint\nDESCRIPTION: This snippet shows a simplified GET request to the `/v1/chat/completions` endpoint.  It passes the model, message, and temperature as query parameters. It depends on the `fetch` API. The output is a JSON response containing the completion result.\nSOURCE: https://github.com/mario-andreschak/flujo/blob/main/src/app/v1/chat/completions/README.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Example GET request (simplified interface)\nconst response = await fetch('/v1/chat/completions?model=flow-MyCustomFlow&message=Hello&temperature=0.7');\nconst result = await response.json();\n```\n\n----------------------------------------\n\nTITLE: Running Flujo Docker Container\nDESCRIPTION: This bash snippet executes the run-docker.sh script to run the Flujo Docker container. It provides options to run in detached mode, without privileged mode, and to specify the host port and image tag.\nSOURCE: https://github.com/mario-andreschak/flujo/blob/main/DOCKER.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n./scripts/run-docker.sh\n```\n\n----------------------------------------\n\nTITLE: Building and Starting Flujo with Docker Compose\nDESCRIPTION: This bash snippet uses Docker Compose to build and start the Flujo container in detached mode. Docker Compose simplifies the process of managing multi-container Docker applications by defining and running them using a YAML file.\nSOURCE: https://github.com/mario-andreschak/flujo/blob/main/DOCKER.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose up -d\n```\n\n----------------------------------------\n\nTITLE: Using useTheme hook to toggle theme (TypeScript)\nDESCRIPTION: This example demonstrates the usage of the `useTheme` hook, obtained from the `ThemeContext`, for toggling between light and dark themes.  The hook provides access to the current theme's `isDarkMode` state and the `toggleTheme` function. Clicking the button will call `toggleTheme`, switching the application's theme, and the button text dynamically reflects the current mode.\nSOURCE: https://github.com/mario-andreschak/flujo/blob/main/src/frontend/utils/README.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useTheme } from '@/frontend/contexts/ThemeContext';\n\nfunction ThemeToggleButton() {\n  const { isDarkMode, toggleTheme } = useTheme();\n  \n  return (\n    <button onClick={toggleTheme}>\n      {isDarkMode ? 'Switch to Light Mode' : 'Switch to Dark Mode'}\n    </button>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: API Adapter Pattern Example (TypeScript)\nDESCRIPTION: Demonstrates the adapter pattern used for delegating API calls to backend services. The `modelAdapter` provides an abstraction layer, decoupling the API handlers from the specific implementation of `modelService`. This allows for independent evolution of the frontend and backend, improves testability through mocking, and enhances maintainability by isolating backend changes.\nSOURCE: https://github.com/mario-andreschak/flujo/blob/main/src/app/api/README.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// API adapter\nexport const modelAdapter = {\n  async listModels() {\n    return await modelService.listModels();\n  },\n  \n  async getModel(id: string) {\n    return await modelService.getModel(id);\n  }\n};\n\n// API handler\nexport async function GET(request: Request) {\n  const { searchParams } = new URL(request.url);\n  const action = searchParams.get('action');\n  \n  if (action === 'listModels') {\n    const models = await modelAdapter.listModels();\n    return Response.json({ models });\n  }\n  \n  if (action === 'getModel') {\n    const id = searchParams.get('id');\n    if (!id) {\n      return Response.json({ error: 'Missing model ID' }, { status: 400 });\n    }\n    \n    const model = await modelAdapter.getModel(id);\n    return Response.json({ model });\n  }\n  \n  return Response.json({ error: 'Invalid action' }, { status: 400 });\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Docker Container Logs\nDESCRIPTION: This bash snippet retrieves the logs for a Docker container named 'flujo'. This is useful for debugging issues with the container's startup or runtime behavior.\nSOURCE: https://github.com/mario-andreschak/flujo/blob/main/DOCKER.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ndocker logs flujo\n```\n\n----------------------------------------\n\nTITLE: Running a Custom Flujo Docker Image\nDESCRIPTION: This bash snippet runs a custom Flujo Docker image in detached mode with privileged access, port mapping, and volume mounting. The container is named 'flujo'.\nSOURCE: https://github.com/mario-andreschak/flujo/blob/main/DOCKER.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d --privileged -p 4200:4200 -v flujo-data:/app/data --name flujo flujo:custom\n```\n\n----------------------------------------\n\nTITLE: Clone Repository Response\nDESCRIPTION: This JSON payload represents the response from a clone repository request. It includes a success indicator, the path where the repository was saved, a relative path, and an optional environment variable example if a `.env.example` file exists in the cloned repository.  The `relativePath` mirrors the `path` in this context.\nSOURCE: https://github.com/mario-andreschak/flujo/blob/main/src/app/api/git/README.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"success\": true,\n  \"path\": \"/path/to/save/repo\",\n  \"relativePath\": \"/path/to/save/repo\",\n  \"envExample\": \"EXAMPLE_VAR=value\" // Optional, if .env.example exists\n}\n```\n\n----------------------------------------\n\nTITLE: Using useThemeUtils hook in a React component (TypeScript)\nDESCRIPTION: This example demonstrates how to use the `useThemeUtils` hook to access theme-specific values in a React component.  It retrieves the `getThemeValue` function and the `isDarkMode` boolean. The `getThemeValue` function is used to determine the background color based on the current theme, and the component displays whether dark mode is active.\nSOURCE: https://github.com/mario-andreschak/flujo/blob/main/src/frontend/utils/README.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Using useThemeUtils\nimport { useThemeUtils } from '@/frontend/utils';\n\nfunction MyComponent() {\n  const { getThemeValue, isDarkMode } = useThemeUtils();\n  \n  // Get a theme-specific value\n  const backgroundColor = getThemeValue('#FFFFFF', '#2C3E50');\n  \n  return (\n    <div style={{ backgroundColor }}>\n      {isDarkMode ? 'Dark Mode' : 'Light Mode'}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Flow Service Usage Examples\nDESCRIPTION: Demonstrates how to use the `flowService` to perform various operations, including loading flows, getting a specific flow, creating a new flow, saving a flow, deleting a flow, creating a new node, creating a history entry, and generating a sample flow.\nSOURCE: https://github.com/mario-andreschak/flujo/blob/main/src/backend/services/flow/README.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Import the service\nimport { flowService } from '@/backend/services/flow';\n\n// Load all flows\nconst flows = await flowService.loadFlows();\n\n// Get a specific flow\nconst flow = await flowService.getFlow('flow-id');\n\n// Create a new flow\nconst newFlow = flowService.createNewFlow('My New Flow');\n\n// Save a flow\nconst saveResult = await flowService.saveFlow(newFlow);\n\n// Delete a flow\nconst deleteResult = await flowService.deleteFlow('flow-id');\n\n// Create a new node\nconst node = flowService.createNode('process', { x: 250, y: 150 });\n\n// Create a history entry for undo/redo\nconst historyEntry = flowService.createHistoryEntry(flow.nodes, flow.edges);\n\n// Generate a sample flow\nconst sampleFlow = flowService.generateSampleFlow('Sample Flow');\n```\n\n----------------------------------------\n\nTITLE: List Repositories Request\nDESCRIPTION: This JSON payload represents a request to list all repositories in the MCP servers directory. It simply includes the action 'list'. The API will respond with a list of repository names.\nSOURCE: https://github.com/mario-andreschak/flujo/blob/main/src/app/api/git/README.md#_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"action\": \"list\"\n}\n```\n\n----------------------------------------\n\nTITLE: Frontend Service Usage Example (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to use the MCP frontend service to interact with MCP servers. It showcases loading server configurations, listing server tools, calling a tool, updating a server configuration, getting server status, deleting a server configuration, retrying a server, restarting a server, subscribing to server events, and cleaning up the subscription.\nSOURCE: https://github.com/mario-andreschak/flujo/blob/main/src/frontend/services/mcp/README.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Import the service\nimport { mcpService } from '@/frontend/services/mcp';\n\n// Load server configurations\nconst configs = await mcpService.loadServerConfigs();\n\n// List tools from a server\nconst tools = await mcpService.listServerTools('serverName');\n\n// Call a tool on a server\nconst toolResult = await mcpService.callTool('serverName', 'toolName', { arg1: 'value1' });\n\n// Update a server configuration\nconst updatedConfig = await mcpService.updateServerConfig('serverName', {\n  command: 'new-command',\n  args: ['--arg1', 'value1'],\n});\n\n// Get server status\nconst status = await mcpService.getServerStatus('serverName');\n\n// Delete a server configuration\nawait mcpService.deleteServerConfig('serverName');\n\n// Retry connecting to a server\nawait mcpService.retryServer('serverName');\n\n// Restart a server\nawait mcpService.restartServer('serverName');\n\n// Subscribe to server events\nconst cleanup = mcpService.subscribeToServerEvents('serverName', (event) => {\n  console.log('Server event:', event);\n});\n\n// Cleanup subscription when done\ncleanup();\n```\n\n----------------------------------------\n\nTITLE: Frontend Component Usage\nDESCRIPTION: This code snippet shows how to use the frontend service to load models. The frontend service makes an API call to the appropriate endpoint, which is then handled by the API layer and delegated to the backend service through the adapter layer.\nSOURCE: https://github.com/mario-andreschak/flujo/blob/main/src/app/api/model/README.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Frontend component\nimport { modelService } from '@/frontend/services/model';\n\n// Call a method on the frontend service\nconst models = await modelService.loadModels();\n```\n\n----------------------------------------\n\nTITLE: SSE Connection - New stdio Transport\nDESCRIPTION: This TypeScript snippet shows how to create an EventSource for a new stdio transport, specifying the command and arguments to execute.\nSOURCE: https://github.com/mario-andreschak/flujo/blob/main/src/app/api/sse/README.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Or create a new stdio transport\nconst eventSource = new EventSource('/api/sse?transportType=stdio&command=node%20server.js&args=--port%203000');\n```\n\n----------------------------------------\n\nTITLE: Sending a Message to MCP Server\nDESCRIPTION: This TypeScript snippet illustrates how to send a JSON-RPC message to an MCP server via a POST request, handling the response or potential errors.\nSOURCE: https://github.com/mario-andreschak/flujo/blob/main/src/app/api/sse/README.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// Send a message to an MCP server\nconst response = await fetch('/api/sse?serverName=my-server', {\n  method: 'POST',\n  headers: { 'Content-Type': 'application/json' },\n  body: JSON.stringify({\n    jsonrpc: '2.0',\n    method: 'list_tools',\n    id: 1\n  })\n});\n\nif (response.ok) {\n  const data = await response.json();\n  console.log('Response:', data);\n} else {\n  console.error('Error sending message:', await response.text());\n}\n```\n\n----------------------------------------\n\nTITLE: Logger with Log Level Override in TypeScript\nDESCRIPTION: Illustrates how to create a logger instance with a custom log level, overriding the global setting. This allows for more granular control over which messages are logged in specific parts of the application. It also demonstrates creating multiple loggers with varying levels in a single file.\nSOURCE: https://github.com/mario-andreschak/flujo/blob/main/src/utils/logger/README.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createLogger, LOG_LEVEL } from '@/utils/logger';\n\n// Create a logger instance with a custom log level\nconst log = createLogger('path/to/component', LOG_LEVEL.VERBOSE);\n\n// This will log even if the global log level is higher\nlog.verbose('Verbose message that will be shown regardless of global setting');\nlog.debug('Debug message');\n\n// You can create different loggers with different levels in the same file\nconst criticalLogger = createLogger('path/to/component/critical', LOG_LEVEL.ERROR);\ncriticalLogger.error('This error will always be logged');\n```\n\n----------------------------------------\n\nTITLE: List Repositories Response\nDESCRIPTION: This JSON payload represents the response from a list repositories request. It includes a success indicator and an array of repository names. The array contains the names of all the repositories found.\nSOURCE: https://github.com/mario-andreschak/flujo/blob/main/src/app/api/git/README.md#_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"success\": true,\n  \"repositories\": [\"repo1\", \"repo2\", \"repo3\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Response Example: Success JSON\nDESCRIPTION: Illustrates the JSON response structure for a successful operation (set or delete).\nSOURCE: https://github.com/mario-andreschak/flujo/blob/main/src/app/api/env/README.md#_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"success\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Successful Get Response - JSON\nDESCRIPTION: A JSON formatted example of a successful response from a GET request to the Storage API.  It contains a `value` property holding the stored data retrieved for the given key.\nSOURCE: https://github.com/mario-andreschak/flujo/blob/main/src/app/api/storage/README.md#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"value\": \"stored data\"\n}\n```\n\n----------------------------------------\n\nTITLE: Frontend Usage via StorageContext (TypeScript)\nDESCRIPTION: Example of using the StorageContext to interact with encryption functions. The useStorage hook provides access to functions like encryptValue, decryptValue, and verifyKey.\nSOURCE: https://github.com/mario-andreschak/flujo/blob/main/src/app/api/encryption/secure/README.md#_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { useStorage } from '@/frontend/contexts/StorageContext';\n\n// In a component\nconst {\n  encryptValue,\n  decryptValue,\n  verifyKey,\n  isEncryptionInitialized,\n  isUserEncryptionEnabled\n} = useStorage();\n\n// Encrypt a value\nconst encrypted = await encryptValue('sensitive data');\n\n// Decrypt a value\nconst decrypted = await decryptValue(encrypted);\n\n// Verify a password\nconst isValid = await verifyKey('user-password');\n\n// Check if encryption is initialized\nconst initialized = await isEncryptionInitialized();\n\n// Check if user encryption is enabled\nconst userEncryption = await isUserEncryptionEnabled();\n```\n\n----------------------------------------\n\nTITLE: Change Password API Request (JSON)\nDESCRIPTION: Changes the encryption password from the 'oldPassword' to the 'newPassword'. Requires both 'oldPassword' and 'newPassword' fields. The 'action' must be 'change_password'.\nSOURCE: https://github.com/mario-andreschak/flujo/blob/main/src/app/api/encryption/secure/README.md#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"action\": \"change_password\",\n  \"oldPassword\": \"current-password\",\n  \"newPassword\": \"new-password\"\n}\n```\n\n----------------------------------------\n\nTITLE: Request Example: Set Single Variable JSON\nDESCRIPTION: Illustrates the JSON request structure when setting a single environment variable.\nSOURCE: https://github.com/mario-andreschak/flujo/blob/main/src/app/api/env/README.md#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"action\": \"set\",\n  \"key\": \"VARIABLE_NAME\",\n  \"value\": \"variable value\"\n}\n```\n\n----------------------------------------\n\nTITLE: StorageKey Enum Definition (TypeScript)\nDESCRIPTION: Defines an enum `StorageKey` that specifies the valid storage keys for the Storage API.  These keys represent different types of data that can be stored and retrieved, like models, MCP servers, flows, chat history, theme, global environment variables, and encryption key. This restricts the API to known keys.\nSOURCE: https://github.com/mario-andreschak/flujo/blob/main/src/app/api/README.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nenum StorageKey {\n  MODELS = 'models',\n  MCP_SERVERS = 'mcp_servers',\n  FLOWS = 'flows',\n  CHAT_HISTORY = 'chat_history',\n  THEME = 'theme',\n  GLOBAL_ENV_VARS = 'global_env_vars',\n  ENCRYPTION_KEY = 'encryption_key'\n}\n```\n\n----------------------------------------\n\nTITLE: Building a Custom Flujo Docker Image\nDESCRIPTION: This bash snippet builds a custom Flujo Docker image using the Dockerfile in the current directory.  The image is tagged as 'flujo:custom'.\nSOURCE: https://github.com/mario-andreschak/flujo/blob/main/DOCKER.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ndocker build -t flujo:custom .\n```\n\n----------------------------------------\n\nTITLE: Successful Response - JSON\nDESCRIPTION: Example of a successful API response. This JSON format is returned when the API successfully completes the requested operation. The `success` property indicates whether the action (e.g., save, delete) was executed without errors.\nSOURCE: https://github.com/mario-andreschak/flujo/blob/main/src/app/api/storage/README.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"success\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Backup Metadata JSON\nDESCRIPTION: This JSON snippet shows the structure of the `backup-info.json` file included in the backup ZIP archive. It contains metadata about the backup, including the version, timestamp, and the selections included in the backup. The timestamp is in ISO 8601 format.\nSOURCE: https://github.com/mario-andreschak/flujo/blob/main/src/app/api/backup/README.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"version\": \"1.0\",\n  \"timestamp\": \"2025-03-04T14:30:00.000Z\",\n  \"selections\": [\"models\", \"flows\", \"mcpServersFolder\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Call a Tool (Backend)\nDESCRIPTION: Executes a specific tool on an MCP server with provided arguments via `mcpService.callTool`. The function sends a request to the server to run the designated tool.\nSOURCE: https://github.com/mario-andreschak/flujo/blob/main/src/backend/services/mcp/README.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// Call a tool on a server\nconst toolResult = await mcpService.callTool('serverName', 'toolName', { arg1: 'value1' });\n```\n\n----------------------------------------\n\nTITLE: Connect to Server (Backend)\nDESCRIPTION: Connects to an MCP server using the provided server name via `mcpService.connectServer`. This establishes a connection for interaction with the specified server.\nSOURCE: https://github.com/mario-andreschak/flujo/blob/main/src/backend/services/mcp/README.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Connect to a server\nconst result = await mcpService.connectServer('serverName');\n```\n\n----------------------------------------\n\nTITLE: Read File Response\nDESCRIPTION: This JSON payload represents the response from a read file request. It includes a success indicator, the path to the file, the relative path and the content of the file. The `relativePath` mirrors the `path` in this context.\nSOURCE: https://github.com/mario-andreschak/flujo/blob/main/src/app/api/git/README.md#_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"success\": true,\n  \"path\": \"/path/to/repo/file.txt\",\n  \"relativePath\": \"/path/to/repo/file.txt\",\n  \"content\": \"File content\"\n}\n```\n\n----------------------------------------\n\nTITLE: Building Flujo Docker Image\nDESCRIPTION: This bash snippet executes the build-docker.sh script to build the Flujo Docker image. It supports options for verbose output and custom tagging.\nSOURCE: https://github.com/mario-andreschak/flujo/blob/main/DOCKER.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./scripts/build-docker.sh\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server with npm\nDESCRIPTION: This command starts the development server for the FLUJO project using npm. This allows you to run and test the application during development.\nSOURCE: https://github.com/mario-andreschak/flujo/blob/main/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Custom Volumes in docker-compose.yml\nDESCRIPTION: This YAML snippet demonstrates how to add custom volume mounts to the Flujo container in the docker-compose.yml file. Volume mounts allow for persistent storage and sharing of data between the host system and the container.\nSOURCE: https://github.com/mario-andreschak/flujo/blob/main/DOCKER.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  flujo:\n    volumes:\n      - flujo-data:/app/data  # Default volume for persistent storage\n      # Add your custom volumes here\n```\n\n----------------------------------------\n\nTITLE: Building Electron Application with npm\nDESCRIPTION: This command builds and packages the FLUJO project as a desktop application using Electron. This creates a distributable package for your target platform.\nSOURCE: https://github.com/mario-andreschak/flujo/blob/main/README.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpm run electron-dist\n```\n\n----------------------------------------\n\nTITLE: Build for Production - npm\nDESCRIPTION: This command builds the Next.js application and packages it with Electron for the current platform. It is used for creating distributable packages.\nSOURCE: https://github.com/mario-andreschak/flujo/blob/main/electron/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run electron-dist\n```\n\n----------------------------------------\n\nTITLE: Custom Environment Variables in docker-compose.yml\nDESCRIPTION: This YAML snippet demonstrates how to add custom environment variables to the Flujo container within the docker-compose.yml file. This allows for configuration of the Flujo application's behavior without modifying the image itself.\nSOURCE: https://github.com/mario-andreschak/flujo/blob/main/DOCKER.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  flujo:\n    environment:\n      - NODE_ENV=production\n      # Add your custom environment variables here\n```\n\n----------------------------------------\n\nTITLE: Building FLUJO Docker Image\nDESCRIPTION: Builds the Docker image for FLUJO using the provided build script. This allows for custom image creation and more control over the container environment.\nSOURCE: https://github.com/mario-andreschak/flujo/blob/main/README.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n./scripts/build-docker.sh\n```\n\n----------------------------------------\n\nTITLE: Running Electron in Development Mode with npm\nDESCRIPTION: This command runs the FLUJO project as a desktop application in development mode using Electron. Electron allows you to build cross-platform desktop apps with JavaScript, HTML, and CSS.\nSOURCE: https://github.com/mario-andreschak/flujo/blob/main/README.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpm run electron-dev\n```\n\n----------------------------------------\n\nTITLE: Flow Service Usage Example in TypeScript\nDESCRIPTION: This code snippet demonstrates how to use the FlowService in TypeScript to load, get, create, save, and delete flows, as well as create nodes, history entries, and generate sample flows. It showcases the API usage of the flowService object, which is assumed to be an instance of the FlowService class defined elsewhere. The example includes importing the service and then calling its various methods.\nSOURCE: https://github.com/mario-andreschak/flujo/blob/main/src/frontend/services/flow/README.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Import the service\nimport { flowService } from '@/frontend/services/flow';\n\n// Load all flows\nconst flows = await flowService.loadFlows();\n\n// Get a specific flow\nconst flow = await flowService.getFlow('flow-id');\n\n// Create a new flow\nconst newFlow = flowService.createNewFlow('My New Flow');\n\n// Save a flow\nconst saveResult = await flowService.saveFlow(newFlow);\n\n// Delete a flow\nconst deleteResult = await flowService.deleteFlow('flow-id');\n\n// Create a new node\nconst node = flowService.createNode('process', { x: 250, y: 150 });\n\n// Create a history entry for undo/redo\nconst historyEntry = flowService.createHistoryEntry(flow.nodes, flow.edges);\n\n// Generate a sample flow\nconst sampleFlow = flowService.generateSampleFlow('Sample Flow');\n```\n\n----------------------------------------\n\nTITLE: Run Command Response\nDESCRIPTION: This JSON payload represents the response from a run command request. It includes a success indicator, the path to the repository, the relative path, the command used, and the output from the command. The `relativePath` mirrors the `path` in this context.\nSOURCE: https://github.com/mario-andreschak/flujo/blob/main/src/app/api/git/README.md#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"success\": true,\n  \"path\": \"/path/to/repo\",\n  \"relativePath\": \"/path/to/repo\",\n  \"runCommand\": \"npm start\",\n  \"commandOutput\": \"Output from the run command\"\n}\n```\n\n----------------------------------------\n\nTITLE: Command Execution Error Response\nDESCRIPTION: This JSON payload represents an error response specifically for command execution failures. It includes an 'error' field with an error message, the path to the repository, the relative path, the command that was attempted, and the command output (usually the error output). The `relativePath` mirrors the `path` in this context.\nSOURCE: https://github.com/mario-andreschak/flujo/blob/main/src/app/api/git/README.md#_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"error\": \"Failed to run command: Error message\",\n  \"path\": \"/path/to/repo\",\n  \"relativePath\": \"/path/to/repo\",\n  \"runCommand\": \"npm start\",\n  \"commandOutput\": \"Error output from the command\"\n}\n```\n\n----------------------------------------\n\nTITLE: Error Response\nDESCRIPTION: This JSON payload represents a generic error response from the API. It includes an 'error' field containing a descriptive error message. This is returned when requests fail due to various reasons.\nSOURCE: https://github.com/mario-andreschak/flujo/blob/main/src/app/api/git/README.md#_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"error\": \"Error message\"\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Logger\nDESCRIPTION: This snippet demonstrates how to import and use the logger for debugging purposes. It requires the `createLogger` function from the '@/utils/logger' module.  The output is logged messages at different levels (debug, info, warn, error) to the application's logging system.\nSOURCE: https://github.com/mario-andreschak/flujo/blob/main/src/app/v1/chat/completions/README.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createLogger } from '@/utils/logger';\n\nconst log = createLogger('app/v1/chat/completions/component');\n```\n\n----------------------------------------\n\nTITLE: Error Response (JSON)\nDESCRIPTION: The API returns error responses in JSON format, containing a descriptive error message.\nSOURCE: https://github.com/mario-andreschak/flujo/blob/main/src/app/api/encryption/secure/README.md#_snippet_11\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"error\": \"Error message\"\n}\n```\n\n----------------------------------------\n\nTITLE: Streaming Request to Chat Completions Endpoint\nDESCRIPTION: This snippet demonstrates a streaming request to the `/v1/chat/completions` endpoint.  It sets the `stream` parameter to `true` to receive a Server-Sent Events (SSE) stream. The snippet requires the `fetch` API and a `TextDecoder`.  The output is a stream of SSE chunks which need to be processed. Each chunk is of the format `data: {...}\\n\\n`.\nSOURCE: https://github.com/mario-andreschak/flujo/blob/main/src/app/v1/chat/completions/README.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Example streaming request\nconst response = await fetch('/v1/chat/completions', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({\n    model: 'flow-MyCustomFlow',\n    messages: [\n      { role: 'user', content: 'Write a story about a space adventure.' }\n    ],\n    stream: true,\n    temperature: 0.7\n  })\n});\n\n// Process the streaming response\nconst reader = response.body.getReader();\nconst decoder = new TextDecoder();\n\nwhile (true) {\n  const { done, value } = await reader.read();\n  if (done) break;\n  \n  const chunk = decoder.decode(value);\n  // Process each SSE chunk\n  // Format: data: {...}\\n\\n\n}\n```\n\n----------------------------------------\n\nTITLE: Authenticating and Managing Sessions\nDESCRIPTION: This code snippet demonstrates how to verify a password, authenticate, and logout using the session management system. It shows how to obtain a session token, store it, and invalidate it upon logout.\nSOURCE: https://github.com/mario-andreschak/flujo/blob/main/src/utils/encryption/README.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Verify a password and get a session token\nconst result = await verifyPassword('user-password');\nif (result.valid && result.token) {\n  // Store the token for future operations\n  const sessionToken = result.token;\n}\n\n// Authenticate and get a session token\nconst sessionToken = await authenticate('user-password');\n\n// Logout (invalidate a session)\nawait logout(sessionToken);\n```\n\n----------------------------------------\n\nTITLE: Success Response Format (JSON)\nDESCRIPTION: Presents the standard format for successful API responses. Two variations are possible: either a JSON object with \"success\" set to true and the response data within a \"data\" field, or a JSON object with a single field \"result\" containing the operation result. This standardization facilitates consistent parsing and usage of the response data.\nSOURCE: https://github.com/mario-andreschak/flujo/blob/main/src/app/api/README.md#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"success\": true,\n  \"data\": { ... }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"result\": \"operation-result\"\n}\n```\n\n----------------------------------------\n\nTITLE: Delete Server Configuration (Backend)\nDESCRIPTION: Deletes the stored configuration for a server using `mcpService.deleteServerConfig`. This removes the server's configuration from persistent storage.\nSOURCE: https://github.com/mario-andreschak/flujo/blob/main/src/backend/services/mcp/README.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// Delete a server configuration\nawait mcpService.deleteServerConfig('serverName');\n```\n\n----------------------------------------\n\nTITLE: Successful Initialization Response JSON\nDESCRIPTION: This JSON response indicates that the application has been successfully initialized. It includes a success flag set to true and a message confirming the successful initialization.\nSOURCE: https://github.com/mario-andreschak/flujo/blob/main/src/app/api/init/README.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"success\": true,\n  \"message\": \"Application initialized successfully\"\n}\n```\n\n----------------------------------------\n\nTITLE: Build for All Platforms - npm\nDESCRIPTION: This command builds the Next.js application and packages it with Electron for all supported platforms (Windows, macOS, Linux). Building for other platforms may require additional setup.\nSOURCE: https://github.com/mario-andreschak/flujo/blob/main/electron/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run electron-dist-all\n```\n\n----------------------------------------\n\nTITLE: Flow Interface Definition\nDESCRIPTION: Defines the structure of a Flow object, including its ID, name, nodes, and edges. This interface is crucial for representing and manipulating flows within the backend service.\nSOURCE: https://github.com/mario-andreschak/flujo/blob/main/src/backend/services/flow/README.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Flow {\n  id: string;           // Unique identifier for the flow\n  name: string;         // Human-readable name\n  nodes: FlowNode[];    // Array of nodes in the flow\n  edges: Edge[];        // Array of edges connecting nodes\n}\n```\n\n----------------------------------------\n\nTITLE: FlowNode Interface Definition\nDESCRIPTION: Defines the structure of a FlowNode object, including its ID, type, position, and data. The data property contains information such as the label, type, and node-specific properties. The type is duplicated for convenience.\nSOURCE: https://github.com/mario-andreschak/flujo/blob/main/src/backend/services/flow/README.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface FlowNode {\n  id: string;           // Unique identifier for the node\n  type: string;         // Node type (e.g., 'start', 'process', 'finish', 'mcp')\n  position: {           // Position of the node in the flow\n    x: number;\n    y: number;\n  };\n  data: {               // Node data\n    label: string;      // Display label\n    type: string;       // Node type (redundant with the top-level type)\n    properties: any;    // Node-specific properties\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Success Response (JSON)\nDESCRIPTION: The API returns success responses in JSON format, indicating the success of an operation, potentially including the result data.\nSOURCE: https://github.com/mario-andreschak/flujo/blob/main/src/app/api/encryption/secure/README.md#_snippet_12\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"success\": true\n}\n```\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"result\": \"operation-result\"\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning the Flujo Repository\nDESCRIPTION: This bash snippet clones the Flujo repository from GitHub and changes the current directory to the cloned repository. This is the initial step to get the Flujo codebase.\nSOURCE: https://github.com/mario-andreschak/flujo/blob/main/DOCKER.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/mario-andreschak/FLUJO.git\ncd FLUJO\n```\n\n----------------------------------------\n\nTITLE: StorageKey Enum Definition - Typescript\nDESCRIPTION: Defines the `StorageKey` enum, which specifies the valid storage keys that can be used with the Storage API. It ensures that only predefined keys are used, preventing arbitrary data access.\nSOURCE: https://github.com/mario-andreschak/flujo/blob/main/src/app/api/storage/README.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nenum StorageKey {\n  MODELS = 'models',\n  MCP_SERVERS = 'mcp_servers',\n  FLOWS = 'flows',\n  CHAT_HISTORY = 'chat_history',\n  THEME = 'theme',\n  GLOBAL_ENV_VARS = 'global_env_vars',\n  ENCRYPTION_KEY = 'encryption_key'\n}\n```\n\n----------------------------------------\n\nTITLE: Successful API Response (JSON)\nDESCRIPTION: This JSON snippet represents a successful response from the `/api/cwd` endpoint. It contains a `success` flag set to `true`, the current working directory (`cwd`), and the MCP servers directory path (`mcpServersDir`).\nSOURCE: https://github.com/mario-andreschak/flujo/blob/main/src/app/api/cwd/README.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"success\": true,\n  \"cwd\": \"/path/to/current/working/directory\",\n  \"mcpServersDir\": \"/path/to/current/working/directory/mcp-servers\"\n}\n```\n\n----------------------------------------\n\nTITLE: Verify Password API Request (JSON)\nDESCRIPTION: Verifies if the provided password is correct. Requires a 'password' field. The 'action' must be 'verify_password'.\nSOURCE: https://github.com/mario-andreschak/flujo/blob/main/src/app/api/encryption/secure/README.md#_snippet_5\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"action\": \"verify_password\",\n  \"password\": \"user-password\"\n}\n```\n\n----------------------------------------\n\nTITLE: Model Service Usage Example - TypeScript\nDESCRIPTION: Illustrates how to use the modelService to load models, retrieve a specific model, add a new model, fetch models from a provider, and generate a completion. It showcases the basic operations provided by the model service.\nSOURCE: https://github.com/mario-andreschak/flujo/blob/main/src/backend/services/model/README.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Import the service\nimport { modelService } from '@/backend/services/model';\n\n// Load all models\nconst models = await modelService.loadModels();\n\n// Get a specific model\nconst model = await modelService.getModel('model-id');\n\n// Add a new model\nconst result = await modelService.addModel({\n  id: 'new-model-id',\n  name: 'gpt-4',\n  displayName: 'GPT-4',\n  encryptedApiKey: 'encrypted-api-key',\n  baseUrl: 'https://api.openai.com/v1'\n});\n\n// Fetch models from a provider\nconst providerModels = await modelService.fetchProviderModels(\n  'https://api.openai.com/v1',\n  'model-id'\n);\n\n// Generate a completion\nconst completion = await modelService.generateCompletion(\n  'model-id',\n  'Generate a response to this prompt',\n  [{ role: 'user', content: 'Hello, world!' }]\n);\n```\n\n----------------------------------------\n\nTITLE: Using getCssVar function in a React component (TypeScript)\nDESCRIPTION: This example showcases how to use the `getCssVar` function to retrieve CSS variable references within a React component's inline styles.  It imports the function and applies the 'foreground' and 'background' CSS variables to the component's text color and background color, respectively. This allows for dynamic styling based on the defined theme CSS variables.\nSOURCE: https://github.com/mario-andreschak/flujo/blob/main/src/frontend/utils/README.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Using getCssVar\nimport { getCssVar } from '@/frontend/utils';\n\nfunction AnotherComponent() {\n  return (\n    <div style={{ \n      color: getCssVar('foreground'),\n      backgroundColor: getCssVar('background')\n    }}>\n      Using CSS Variables\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Dark Theme CSS Variables\nDESCRIPTION: Defines CSS variables for the dark theme. These variables control background, foreground, paper background, and secondary text colors.\nSOURCE: https://github.com/mario-andreschak/flujo/blob/main/src/frontend/utils/README.md#_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n--background: #2C3E50;\n--foreground: #ECF0F1;\n--paper-background: #34495E;\n--text-secondary: #BDC3C7;\n```\n\n----------------------------------------\n\nTITLE: SSE Connection - New Websocket Transport\nDESCRIPTION: This TypeScript snippet shows how to create an EventSource for a new websocket transport, providing the WebSocket URL.\nSOURCE: https://github.com/mario-andreschak/flujo/blob/main/src/app/api/sse/README.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// Or create a new websocket transport\nconst eventSource = new EventSource('/api/sse?transportType=websocket&url=ws://localhost:8080');\n```\n\n----------------------------------------\n\nTITLE: Light Theme CSS Variables\nDESCRIPTION: Defines CSS variables for the light theme.  These variables control background, foreground, paper background, and secondary text colors.\nSOURCE: https://github.com/mario-andreschak/flujo/blob/main/src/frontend/utils/README.md#_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n--background: #FFFFFF;\n--foreground: #2C3E50;\n--paper-background: #F5F6FA;\n--text-secondary: #7F8C8D;\n```\n\n----------------------------------------\n\nTITLE: Frontend Usage: Get Current Working Directory (TypeScript)\nDESCRIPTION: This TypeScript code snippet demonstrates how to fetch the current working directory from the API endpoint `/api/cwd`. It makes a GET request, parses the JSON response, and accesses the `cwd` and `mcpServersDir` properties if the request is successful. If an error occurs, it logs the error message.\nSOURCE: https://github.com/mario-andreschak/flujo/blob/main/src/app/api/cwd/README.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Get the current working directory\nconst response = await fetch('/api/cwd');\nconst data = await response.json();\n\nif (data.success) {\n  // Access the current working directory\n  const cwd = data.cwd;\n  \n  // Access the MCP servers directory\n  const mcpServersDir = data.mcpServersDir;\n  \n  console.log(`Current working directory: ${cwd}`);\n  console.log(`MCP servers directory: ${mcpServersDir}`);\n} else {\n  console.error(`Error: ${data.error}`);\n}\n```\n\n----------------------------------------\n\nTITLE: UI Architecture Diagram\nDESCRIPTION: This diagram illustrates the architecture of the FLUJO application, showing the interaction between UI components, frontend services, the API layer (adapters), and backend services. It highlights the clean separation of concerns and the unidirectional dependency flow.\nSOURCE: https://github.com/mario-andreschak/flujo/blob/main/src/app/api/README.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n┌─────────────────┐     ┌─────────────────┐     ┌─────────────────┐\n│                 │     │                 │     │                 │\n│  UI Components  │◄───►│  Frontend       │◄───►│  API Layer      │◄───┐\n│                 │     │  Services       │     │  (Adapters)     │    │\n└─────────────────┘     └─────────────────┘     └─────────────────┘    │\n                                                        │               │\n                                                        ▼               │\n                                                ┌─────────────────┐     │\n                                                │                 │     │\n                                                │  Backend        │◄────┘\n                                                │  Services       │\n                                                └─────────────────┘\n```\n\n----------------------------------------\n\nTITLE: JSON-RPC Notification Example\nDESCRIPTION: This JSON snippet demonstrates the structure of a JSON-RPC notification, which is sent to the MCP server without expecting a response, including the version, method, and parameters.\nSOURCE: https://github.com/mario-andreschak/flujo/blob/main/src/app/api/sse/README.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"method_name\",\n  \"params\": { ... }\n}\n```\n\n----------------------------------------\n\nTITLE: Import MCP Service (Backend)\nDESCRIPTION: Imports the MCP service from the backend to utilize its functionalities.\nSOURCE: https://github.com/mario-andreschak/flujo/blob/main/src/backend/services/mcp/README.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Import the service\nimport { mcpService } from '@/backend/services/mcp';\n```\n\n----------------------------------------\n\nTITLE: Restore from Backup - TypeScript\nDESCRIPTION: TypeScript code example demonstrating how to use the Restore API. It creates a FormData object, appends the backup file and selections, and sends a POST request to the /api/restore endpoint. Error handling and success message are included.\nSOURCE: https://github.com/mario-andreschak/flujo/blob/main/src/app/api/restore/README.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Create a FormData object\nconst formData = new FormData();\n\n// Add the backup file\nformData.append('file', backupFile);\n\n// Add the selections\nformData.append('selections', JSON.stringify([\n  'models', \n  'flows', \n  'mcpServers', \n  'settings'\n]));\n\n// Send the restore request\nconst response = await fetch('/api/restore', {\n  method: 'POST',\n  body: formData\n});\n\nif (response.ok) {\n  const data = await response.json();\n  console.log('Restore completed successfully');\n} else {\n  const errorData = await response.json();\n  console.error(`Error restoring from backup: ${errorData.error}`);\n}\n```\n\n----------------------------------------\n\nTITLE: POST Request to Chat Completions Endpoint\nDESCRIPTION: This snippet demonstrates a basic POST request to the `/v1/chat/completions` endpoint. It includes the model name, messages, and temperature in the request body. It requires the `fetch` API to be available. The expected output is a JSON response containing the completion result.\nSOURCE: https://github.com/mario-andreschak/flujo/blob/main/src/app/v1/chat/completions/README.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Example POST request to the chat completions endpoint\nconst response = await fetch('/v1/chat/completions', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({\n    model: 'flow-MyCustomFlow',\n    messages: [\n      { role: 'user', content: 'Hello, how can you help me today?' }\n    ],\n    temperature: 0.7\n  })\n});\n\nconst result = await response.json();\n```\n\n----------------------------------------\n\nTITLE: Documentation Structure Example\nDESCRIPTION: This snippet demonstrates the recommended directory structure for Flujo project documentation, including the main entry point, getting started guides, feature documentation, architecture documentation, contribution guidelines, and API reference.\nSOURCE: https://github.com/mario-andreschak/flujo/blob/main/docs/contributing/documentation-guidelines.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ndocs/\n├── README.md                      # Main documentation entry point\n├── getting-started/               # Quick start guides and installation\n├── features/                      # Feature documentation\n│   ├── README.md                  # Features overview\n│   ├── mcp/                       # MCP-related features\n│   │   ├── docker-servers.md      # Docker-based MCP servers\n│   │   └── ...\n│   ├── flows/                     # Flow-related features\n│   └── ...\n├── architecture/                  # Technical architecture\n├── contributing/                  # Contribution guidelines\n│   └── documentation-guidelines.md # This file\n└── api-reference/                 # API documentation\n```\n\n----------------------------------------\n\nTITLE: Define Speech Settings Types\nDESCRIPTION: This TypeScript code defines the types for speech recognition settings, including the model size (WhisperModelSize), whether transcription is enabled, the selected model size, whether models should be auto-downloaded, and the optional language specification.\nSOURCE: https://github.com/mario-andreschak/flujo/blob/main/plan.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport type WhisperModelSize = 'tiny' | 'base' | 'small' | 'medium' | 'large';\n\nexport interface SpeechRecognitionSettings {\n  enabled: boolean;\n  modelSize: WhisperModelSize;\n  autoDownload: boolean;\n  language?: string; // Optional language specification\n}\n```\n\n----------------------------------------\n\nTITLE: Backup API Request Body\nDESCRIPTION: This is an example of the request body for the Backup API's POST /api/backup endpoint.  It specifies which application data categories to include in the backup. The backup includes metadata in a `backup-info.json` file, a `storage/` directory, and an `mcp-servers/` directory if the `mcpServersFolder` selection is included.\nSOURCE: https://github.com/mario-andreschak/flujo/blob/main/src/app/api/README.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"selections\": [\n    \"models\",\n    \"mcpServers\",\n    \"flows\",\n    \"chatHistory\",\n    \"settings\",\n    \"globalEnvVars\",\n    \"encryptionKey\",\n    \"mcpServersFolder\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Direct API Usage (TypeScript)\nDESCRIPTION: Example of directly using the encryption API via fetch.  It shows how to encrypt and decrypt data by sending POST requests to the API endpoint.\nSOURCE: https://github.com/mario-andreschak/flujo/blob/main/src/app/api/encryption/secure/README.md#_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Encrypt data\nconst encryptResponse = await fetch('/api/encryption/secure', {\n  method: 'POST',\n  headers: { 'Content-Type': 'application/json' },\n  body: JSON.stringify({\n    action: 'encrypt',\n    data: 'sensitive data',\n    password: 'optional-password'\n  })\n});\nconst { result: encryptedData } = await encryptResponse.json();\n\n// Decrypt data\nconst decryptResponse = await fetch('/api/encryption/secure', {\n  method: 'POST',\n  headers: { 'Content-Type': 'application/json' },\n  body: JSON.stringify({\n    action: 'decrypt',\n    data: encryptedData,\n    password: 'optional-password'\n  })\n});\nconst { result: decryptedData } = await decryptResponse.json();\n```\n\n----------------------------------------\n\nTITLE: Overriding Log Level Per File in TypeScript\nDESCRIPTION: Shows how to create a logger with a specific log level to override the global setting, providing more control over logging granularity.  Messages at or above the specified level will be logged, regardless of the global log level.\nSOURCE: https://github.com/mario-andreschak/flujo/blob/main/src/utils/logger/README.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createLogger, LOG_LEVEL } from '@/utils/logger';\n\n// Create a logger with a custom log level\nconst log = createLogger('path/to/component', LOG_LEVEL.VERBOSE);\n\n// This will log even if the global log level is higher\nlog.verbose('Verbose message');\n```\n\n----------------------------------------\n\nTITLE: Basic Logger Usage in TypeScript\nDESCRIPTION: Demonstrates how to create a logger instance and use it to log messages with different log levels. This snippet shows basic logging functionality including verbose, debug, info, warn, and error levels. It also shows how to log with associated data.\nSOURCE: https://github.com/mario-andreschak/flujo/blob/main/src/utils/logger/README.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createLogger } from '@/utils/logger';\n\n// Create a logger instance for this file\nconst log = createLogger('path/to/component');\n\n// Basic logging\nlog.verbose('Extremely detailed message');\nlog.debug('Debug message');\nlog.info('Info message');\nlog.warn('Warning message');\nlog.error('Error message');\n\n// Logging with data\nlog.debug('Debug message with data', { key: 'value' });\n```\n\n----------------------------------------\n\nTITLE: Fetching a Specific Environment Variable with TypeScript\nDESCRIPTION: Fetches a specific environment variable from the API based on its key. The example shows how to fetch the value of 'API_URL' and 'API_KEY', demonstrating the use of the 'includeSecrets' parameter for sensitive variables.\nSOURCE: https://github.com/mario-andreschak/flujo/blob/main/src/app/api/env/README.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Get a specific environment variable\nconst response = await fetch('/api/env?key=API_URL');\nconst data = await response.json();\n\nconsole.log('API URL:', data.value);\n\n// Get a sensitive environment variable with its actual value\nconst responseWithSecret = await fetch('/api/env?key=API_KEY&includeSecrets=true');\nconst dataWithSecret = await responseWithSecret.json();\n\nconsole.log('API Key:', dataWithSecret.value);\n```\n\n----------------------------------------\n\nTITLE: GET Request Example - Typescript\nDESCRIPTION: Example of retrieving data from the storage API using a GET request. It includes how to handle both successful data retrieval and error conditions. The example also covers retrieving data with a default value.\nSOURCE: https://github.com/mario-andreschak/flujo/blob/main/src/app/api/storage/README.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Get data with a specific key\nconst response = await fetch('/api/storage?key=models');\nconst data = await response.json();\n\nif (data.value) {\n  console.log('Retrieved models:', data.value);\n} else {\n  console.error('Error:', data.error);\n}\n\n// Get data with a default value\nconst defaultValue = JSON.stringify([]);\nconst response = await fetch(`/api/storage?key=models&defaultValue=${encodeURIComponent(defaultValue)}`);\nconst data = await response.json();\n\nconsole.log('Retrieved models (with default):', data.value);\n```\n\n----------------------------------------\n\nTITLE: Example Error Response (JSON)\nDESCRIPTION: This JSON snippet represents a specific error response example from the `/api/cwd` endpoint. It includes a `success` flag set to `false` and a descriptive error message: \"Failed to get current working directory: Error message\".\nSOURCE: https://github.com/mario-andreschak/flujo/blob/main/src/app/api/cwd/README.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"success\": false,\n  \"error\": \"Failed to get current working directory: Error message\"\n}\n```\n\n----------------------------------------\n\nTITLE: Build Project Response\nDESCRIPTION: This JSON payload represents the response from a build project request. It includes a success indicator, the path to the repository, the relative path, the build command used, and the output from the build command. The `relativePath` mirrors the `path` in this context.\nSOURCE: https://github.com/mario-andreschak/flujo/blob/main/src/app/api/git/README.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"success\": true,\n  \"path\": \"/path/to/repo\",\n  \"relativePath\": \"/path/to/repo\",\n  \"buildCommand\": \"npm run build\",\n  \"commandOutput\": \"Output from the build command\"\n}\n```\n\n----------------------------------------\n\nTITLE: Install Dependencies Response\nDESCRIPTION: This JSON payload represents the response from an install dependencies request. It includes a success indicator, the path to the repository, the relative path, the install command used, and the output from the install command. The `relativePath` mirrors the `path` in this context.\nSOURCE: https://github.com/mario-andreschak/flujo/blob/main/src/app/api/git/README.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"success\": true,\n  \"path\": \"/path/to/repo\",\n  \"relativePath\": \"/path/to/repo\",\n  \"installCommand\": \"npm install\",\n  \"commandOutput\": \"Output from the install command\"\n}\n```\n\n----------------------------------------\n\nTITLE: Current Working Directory API Response\nDESCRIPTION: This is the response structure of the Current Working Directory API's GET /api/cwd endpoint. It returns the current working directory path (`cwd`) and the path to the MCP servers directory (`mcpServersDir`). The `success` field indicates whether the operation was successful.\nSOURCE: https://github.com/mario-andreschak/flujo/blob/main/src/app/api/README.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"success\": true,\n  \"cwd\": \"/path/to/current/working/directory\",\n  \"mcpServersDir\": \"/path/to/current/working/directory/mcp-servers\"\n}\n```\n\n----------------------------------------\n\nTITLE: Response Example: Error JSON\nDESCRIPTION: Illustrates the JSON response structure for an error condition.\nSOURCE: https://github.com/mario-andreschak/flujo/blob/main/src/app/api/env/README.md#_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"error\": \"Error message\"\n}\n```\n\n----------------------------------------\n\nTITLE: Error Response Format (JSON)\nDESCRIPTION: Defines the structure of error responses returned by the API. The response is a JSON object with a single field named \"error\" that contains a descriptive error message. This consistent format allows client applications to easily handle and display errors.\nSOURCE: https://github.com/mario-andreschak/flujo/blob/main/src/app/api/README.md#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"error\": \"Error message\"\n}\n```\n\n----------------------------------------\n\nTITLE: DELETE Request Example - Typescript\nDESCRIPTION: Example of deleting data from the storage API using a DELETE request. It shows how to construct the API request with the key of the data to be deleted. It also demonstrates how to handle both successful deletion and error conditions.\nSOURCE: https://github.com/mario-andreschak/flujo/blob/main/src/app/api/storage/README.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// Delete data\nconst response = await fetch('/api/storage?key=models', {\n  method: 'DELETE'\n});\n\nconst data = await response.json();\nif (data.success) {\n  console.log('Data deleted successfully');\n} else {\n  console.error('Error deleting data:', data.error);\n}\n```\n\n----------------------------------------\n\nTITLE: Decrypting Data with Password/Token/Default\nDESCRIPTION: This code snippet demonstrates how to decrypt data using a password, a session token, or the default encryption. The decryptWithPassword function is used with different parameters to achieve different decryption modes.\nSOURCE: https://github.com/mario-andreschak/flujo/blob/main/src/utils/encryption/README.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// With a password\nconst decrypted = await decryptWithPassword(encryptedData, 'user-password');\n\n// With a session token\nconst decrypted = await decryptWithPassword(encryptedData, sessionToken, true);\n\n// With default encryption\nconst decrypted = await decryptWithPassword(encryptedData);\n```\n\n----------------------------------------\n\nTITLE: Encrypting Data with Password/Token/Default\nDESCRIPTION: This code snippet demonstrates how to encrypt data using a password, a session token, or the default encryption. The encryptWithPassword function is used with different parameters to achieve different encryption modes.\nSOURCE: https://github.com/mario-andreschak/flujo/blob/main/src/utils/encryption/README.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// With a password\nconst encrypted = await encryptWithPassword('sensitive data', 'user-password');\n\n// With a session token\nconst encrypted = await encryptWithPassword('sensitive data', sessionToken, true);\n\n// With default encryption\nconst encrypted = await encryptWithPassword('sensitive data');\n```\n\n----------------------------------------\n\nTITLE: GitHub MCP Server Configuration\nDESCRIPTION: Example configuration for a GitHub MCP server running in a Docker container within Flujo. It specifies the server name, Docker image, transport method (STDIO), and a secret environment variable for the GitHub personal access token.\nSOURCE: https://github.com/mario-andreschak/flujo/blob/main/docs/features/mcp/docker-servers.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nServer Name: github\nDocker Image: ghcr.io/github/github-mcp-server\nTransport Method: STDIO\nEnvironment Variables:\n  - GITHUB_PERSONAL_ACCESS_TOKEN: your-token-here (Secret)\n```\n\n----------------------------------------\n\nTITLE: Install Dependencies Request\nDESCRIPTION: This JSON payload represents a request to install dependencies in a specified repository using a given install command. It requires the path to the repository and the install command to be executed (e.g., 'npm install'). The API will execute the install command within the specified directory.\nSOURCE: https://github.com/mario-andreschak/flujo/blob/main/src/app/api/git/README.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"action\": \"install\",\n  \"savePath\": \"/path/to/repo\",\n  \"installCommand\": \"npm install\"\n}\n```\n\n----------------------------------------\n\nTITLE: Check User Encryption Status API Request (JSON)\nDESCRIPTION: Checks if user encryption is enabled. The 'action' must be 'check_user_encryption'.\nSOURCE: https://github.com/mario-andreschak/flujo/blob/main/src/app/api/encryption/secure/README.md#_snippet_7\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"action\": \"check_user_encryption\"\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting an Environment Variable with TypeScript\nDESCRIPTION: Shows how to delete an environment variable using the API.  It sends a POST request to the '/api/env' endpoint with the 'action' set to 'delete' and the 'key' specifying the variable to remove.\nSOURCE: https://github.com/mario-andreschak/flujo/blob/main/src/app/api/env/README.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Delete an environment variable\nawait fetch('/api/env', {\n  method: 'POST',\n  headers: { 'Content-Type': 'application/json' },\n  body: JSON.stringify({\n    action: 'delete',\n    key: 'DEBUG'\n  })\n});\n```\n\n----------------------------------------\n\nTITLE: Hide Default Menu - Electron/JavaScript\nDESCRIPTION: This JavaScript code snippet, used in the Electron main process (electron/main.js), hides the default application menu (File, Edit, View, etc.). This allows developers to create custom menus or run the application without a menu bar.\nSOURCE: https://github.com/mario-andreschak/flujo/blob/main/electron/README.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Hide the default menu\nMenu.setApplicationMenu(null);\n```\n\n----------------------------------------\n\nTITLE: SSE Message Handling\nDESCRIPTION: This TypeScript snippet demonstrates how to handle messages, errors, and specific event types received through the SSE connection.\nSOURCE: https://github.com/mario-andreschak/flujo/blob/main/src/app/api/sse/README.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// Handle messages\neventSource.onmessage = (event) => {\n  const data = JSON.parse(event.data);\n  console.log('Received message:', data);\n};\n\n// Handle errors\neventSource.onerror = (error) => {\n  console.error('SSE error:', error);\n  eventSource.close();\n};\n\n// Handle specific event types\neventSource.addEventListener('endpoint', (event) => {\n  const data = JSON.parse(event.data);\n  console.log('Endpoint URL:', data.endpoint);\n});\n```\n\n----------------------------------------\n\nTITLE: Backup API Error Response JSON\nDESCRIPTION: This JSON snippet shows the structure of the error response returned by the API in case of an error. The response includes an `error` field containing a descriptive error message. This response is returned with HTTP status codes such as 400 or 500.\nSOURCE: https://github.com/mario-andreschak/flujo/blob/main/src/app/api/backup/README.md#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"error\": \"Error message\"\n}\n```\n\n----------------------------------------\n\nTITLE: Error API Response (JSON)\nDESCRIPTION: This JSON snippet represents an error response from the `/api/cwd` endpoint. It contains a `success` flag set to `false` and an `error` message describing the reason for the failure.\nSOURCE: https://github.com/mario-andreschak/flujo/blob/main/src/app/api/cwd/README.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"success\": false,\n  \"error\": \"Error message\"\n}\n```\n\n----------------------------------------\n\nTITLE: Example Selections JSON\nDESCRIPTION: JSON example of the 'selections' array for the restore API, specifying which components to restore. This array determines what data will be restored from the backup file.\nSOURCE: https://github.com/mario-andreschak/flujo/blob/main/src/app/api/restore/README.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  \"models\",\n  \"mcpServers\",\n  \"flows\",\n  \"chatHistory\",\n  \"settings\",\n  \"globalEnvVars\",\n  \"encryptionKey\",\n  \"mcpServersFolder\"\n]\n```\n\n----------------------------------------\n\nTITLE: Update Server Configuration (Backend)\nDESCRIPTION: Updates the configuration for a specific server using `mcpService.updateServerConfig`.  This method modifies the persisted settings for the server, such as command and arguments.\nSOURCE: https://github.com/mario-andreschak/flujo/blob/main/src/backend/services/mcp/README.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// Update a server configuration\nconst updatedConfig = await mcpService.updateServerConfig('serverName', {\n  command: 'new-command',\n  args: ['--arg1', 'value1'],\n});\n```\n\n----------------------------------------\n\nTITLE: Read File Request\nDESCRIPTION: This JSON payload represents a request to read the content of a file in a specified repository. It includes the full path to the file within the repository. The API will read the file and return its content in the response.\nSOURCE: https://github.com/mario-andreschak/flujo/blob/main/src/app/api/git/README.md#_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"action\": \"readFile\",\n  \"savePath\": \"/path/to/repo/file.txt\"\n}\n```\n\n----------------------------------------\n\nTITLE: Custom MCP Server Configuration\nDESCRIPTION: Example configuration for a custom MCP server running in a Docker container. This configuration uses WebSocket transport on port 8080 and defines two environment variables, one of which is marked as a secret.\nSOURCE: https://github.com/mario-andreschak/flujo/blob/main/docs/features/mcp/docker-servers.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nServer Name: custom-server\nDocker Image: your-registry/custom-mcp-server:latest\nTransport Method: WebSocket\nWebSocket Port: 8080\nEnvironment Variables:\n  - API_KEY: your-api-key (Secret)\n  - CONFIG_PATH: /app/config.json\n```\n\n----------------------------------------\n\nTITLE: Listing Running Docker Containers\nDESCRIPTION: This bash snippet lists all running Docker containers and filters the output to only show containers with 'flujo' in their name. This is used to verify if the Flujo container is running.\nSOURCE: https://github.com/mario-andreschak/flujo/blob/main/DOCKER.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ndocker ps | grep flujo\n```\n\n----------------------------------------\n\nTITLE: Request Example: Set Multiple Variables JSON\nDESCRIPTION: Illustrates the JSON request structure when setting multiple environment variables.  Notes that sensitive values will be automatically encrypted.\nSOURCE: https://github.com/mario-andreschak/flujo/blob/main/src/app/api/env/README.md#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"action\": \"setAll\",\n  \"variables\": {\n    \"VAR1\": \"value1\",\n    \"VAR2\": \"value2\",\n    \"API_KEY\": \"sensitive value\" // Will be automatically encrypted\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: JSON-RPC Message Example\nDESCRIPTION: This JSON snippet illustrates the structure of a JSON-RPC message used to send requests to the MCP server, including the version, method, parameters, and ID.\nSOURCE: https://github.com/mario-andreschak/flujo/blob/main/src/app/api/sse/README.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"method_name\",\n  \"params\": { ... },\n  \"id\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: Error Initialization Response JSON\nDESCRIPTION: This JSON response indicates that the application initialization has failed. It includes a success flag set to false and an error message detailing the reason for the failure.\nSOURCE: https://github.com/mario-andreschak/flujo/blob/main/src/app/api/init/README.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"success\": false,\n  \"error\": \"Initialization failed: Error message\"\n}\n```\n\n----------------------------------------\n\nTITLE: Error Initialization Response JSON\nDESCRIPTION: This JSON response indicates that the application initialization has failed. It includes a success flag set to false and an error message detailing the reason for the failure.\nSOURCE: https://github.com/mario-andreschak/flujo/blob/main/src/app/api/init/README.md#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"success\": false,\n  \"error\": \"Initialization failed: Error message\"\n}\n```\n\n----------------------------------------\n\nTITLE: Run in Development Mode - npm\nDESCRIPTION: This command starts the Next.js development server and launches Electron, pointing to it.  It is used during development to rapidly iterate on the application.\nSOURCE: https://github.com/mario-andreschak/flujo/blob/main/electron/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run electron-dev\n```\n\n----------------------------------------\n\nTITLE: Cloning FLUJO Repository\nDESCRIPTION: Clones the FLUJO repository from GitHub and changes the current directory to the FLUJO project directory. This is the first step to set up FLUJO on your local machine.\nSOURCE: https://github.com/mario-andreschak/flujo/blob/main/README.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/mario-andreschak/FLUJO.git\ncd FLUJO\n```\n\n----------------------------------------\n\nTITLE: Error Response - JSON\nDESCRIPTION: Example of an error response from the API. This JSON format is returned when an error occurs during the processing of a request. The `error` property contains a descriptive error message.\nSOURCE: https://github.com/mario-andreschak/flujo/blob/main/src/app/api/storage/README.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"error\": \"Error message\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with npm\nDESCRIPTION: This command installs the necessary dependencies for the FLUJO project using npm (Node Package Manager). These dependencies are required for the application to run correctly.\nSOURCE: https://github.com/mario-andreschak/flujo/blob/main/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Get Server Status (Backend)\nDESCRIPTION: Retrieves the current status of a specified server through `mcpService.getServerStatus`. This allows monitoring of the server's connection and operational state.\nSOURCE: https://github.com/mario-andreschak/flujo/blob/main/src/backend/services/mcp/README.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// Get server status\nconst status = await mcpService.getServerStatus('serverName');\n```\n\n----------------------------------------\n\nTITLE: List Server Tools (Backend)\nDESCRIPTION: Retrieves a list of available tools from a connected MCP server using `mcpService.listServerTools`. This allows discovery of callable functions on the server.\nSOURCE: https://github.com/mario-andreschak/flujo/blob/main/src/backend/services/mcp/README.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// List tools from a server\nconst tools = await mcpService.listServerTools('serverName');\n```\n\n----------------------------------------\n\nTITLE: SSE Connection - Existing Server\nDESCRIPTION: This TypeScript snippet shows how to create an EventSource to establish an SSE connection with an existing MCP server using the `serverName` parameter.\nSOURCE: https://github.com/mario-andreschak/flujo/blob/main/src/app/api/sse/README.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Create an EventSource for an existing MCP server\nconst eventSource = new EventSource('/api/sse?serverName=my-server');\n```\n\n----------------------------------------\n\nTITLE: Request Body Example - JSON\nDESCRIPTION: Example of request body of POST API /api/storage . key is required. It should be a valid value of `StorageKey` enum. value is data to store corresponding to the key\nSOURCE: https://github.com/mario-andreschak/flujo/blob/main/src/app/api/storage/README.md#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"key\": \"storage_key\",\n  \"value\": \"data to store\"\n}\n```\n\n----------------------------------------\n\nTITLE: Response Example: All Variables JSON\nDESCRIPTION: Illustrates the JSON response structure when retrieving all environment variables.  Sensitive variables are replaced with placeholders.\nSOURCE: https://github.com/mario-andreschak/flujo/blob/main/src/app/api/env/README.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"variables\": {\n    \"PUBLIC_VAR\": \"public value\",\n    \"API_KEY\": \"********\" // Placeholder for sensitive data\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Load Server Configurations (Backend)\nDESCRIPTION: Loads server configurations using the MCP service's `loadServerConfigs` method. This retrieves persisted server settings for subsequent usage.\nSOURCE: https://github.com/mario-andreschak/flujo/blob/main/src/backend/services/mcp/README.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Load server configurations\nconst configs = await mcpService.loadServerConfigs();\n```\n\n----------------------------------------\n\nTITLE: Running FLUJO with Docker Compose\nDESCRIPTION: Builds and starts the FLUJO Docker container using Docker Compose in detached mode. This command simplifies the process of setting up FLUJO by managing the container dependencies.\nSOURCE: https://github.com/mario-andreschak/flujo/blob/main/README.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose up -d\n```\n\n----------------------------------------\n\nTITLE: Install @xenova/transformers Dependency\nDESCRIPTION: This command installs the @xenova/transformers package, which provides the Whisper.js implementation required for offline audio transcription.\nSOURCE: https://github.com/mario-andreschak/flujo/blob/main/plan.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @xenova/transformers\n```\n\n----------------------------------------\n\nTITLE: Disconnect from Server (Backend)\nDESCRIPTION: Disconnects from an MCP server using the provided server name via `mcpService.disconnectServer`. This terminates the connection to the server.\nSOURCE: https://github.com/mario-andreschak/flujo/blob/main/src/backend/services/mcp/README.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// Disconnect from a server\nawait mcpService.disconnectServer('serverName');\n```\n\n----------------------------------------\n\nTITLE: Check Initialization Status API Request (JSON)\nDESCRIPTION: Checks if the encryption system has been initialized. The 'action' must be 'check_initialized'.\nSOURCE: https://github.com/mario-andreschak/flujo/blob/main/src/app/api/encryption/secure/README.md#_snippet_6\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"action\": \"check_initialized\"\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server with yarn\nDESCRIPTION: This command starts the development server for the FLUJO project using yarn. This allows you to run and test the application during development.\nSOURCE: https://github.com/mario-andreschak/flujo/blob/main/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Get Encryption Type API Request (JSON)\nDESCRIPTION: Returns the current encryption type (default or user). The 'action' must be 'get_encryption_type'.\nSOURCE: https://github.com/mario-andreschak/flujo/blob/main/src/app/api/encryption/secure/README.md#_snippet_8\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"action\": \"get_encryption_type\"\n}\n```\n\n----------------------------------------\n\nTITLE: Error Response Example\nDESCRIPTION: This JSON snippet demonstrates a typical error response from the API, providing a descriptive error message.\nSOURCE: https://github.com/mario-andreschak/flujo/blob/main/src/app/api/sse/README.md#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"error\": \"Error message\"\n}\n```\n\n----------------------------------------\n\nTITLE: Building and Starting the Application with npm\nDESCRIPTION: This command builds the FLUJO project for production and then starts the application. It compiles the code and prepares it for deployment.\nSOURCE: https://github.com/mario-andreschak/flujo/blob/main/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Request Example: Delete Variable JSON\nDESCRIPTION: Illustrates the JSON request structure when deleting an environment variable.\nSOURCE: https://github.com/mario-andreschak/flujo/blob/main/src/app/api/env/README.md#_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"action\": \"delete\",\n  \"key\": \"VARIABLE_NAME\"\n}\n```\n\n----------------------------------------\n\nTITLE: Response Example: Single Variable JSON\nDESCRIPTION: Illustrates the JSON response structure when retrieving a single environment variable.\nSOURCE: https://github.com/mario-andreschak/flujo/blob/main/src/app/api/env/README.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"value\": \"variable value\"\n}\n```\n\n----------------------------------------\n\nTITLE: Copy Favicon - PowerShell\nDESCRIPTION: This PowerShell command copies the favicon.ico file from the source directory (src/app) to the public directory, which is required for the system tray icon to be displayed correctly. This is a workaround for a missing favicon in the public directory.\nSOURCE: https://github.com/mario-andreschak/flujo/blob/main/electron/README.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nCopy-Item -Path \"src/app/favicon.ico\" -Destination \"public/favicon.ico\"\n```\n\n----------------------------------------\n\nTITLE: Running FLUJO Docker Container\nDESCRIPTION: Runs the FLUJO Docker container using the provided run script. It supports various options like specifying the image tag, running in detached mode, disabling privileged mode, and setting the host port.\nSOURCE: https://github.com/mario-andreschak/flujo/blob/main/README.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n./scripts/run-docker.sh\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with yarn\nDESCRIPTION: This command installs the necessary dependencies for the FLUJO project using yarn. Yarn is an alternative package manager for Node.js. These dependencies are required for the application to run correctly.\nSOURCE: https://github.com/mario-andreschak/flujo/blob/main/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn install\n```\n\n----------------------------------------\n\nTITLE: Cloning Repository using Git\nDESCRIPTION: This command clones the FLUJO repository from GitHub to your local machine. It's the first step in the manual installation process, allowing you to access the project's source code.\nSOURCE: https://github.com/mario-andreschak/flujo/blob/main/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/mario-andreschak/FLUJO.git\ncd FLUJO\n```\n\n----------------------------------------\n\nTITLE: Error Response JSON\nDESCRIPTION: JSON error response from the restore API, providing an error message. This example demonstrates how errors are communicated to the client, including a descriptive error message.\nSOURCE: https://github.com/mario-andreschak/flujo/blob/main/src/app/api/restore/README.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"error\": \"Error message\"\n}\n```"
  }
]