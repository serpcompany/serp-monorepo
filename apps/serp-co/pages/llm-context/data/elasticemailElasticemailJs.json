[
  {
    "owner": "elasticemail",
    "repo": "elasticemail-js",
    "content": "TITLE: Complete Script for Adding Contact List in Elastic Email using NodeJS\nDESCRIPTION: Full NodeJS script that combines all steps to add a new contact list to Elastic Email, including library import, authentication, list creation, and API call.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/examples/functions/addList.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst ElasticEmail = require('@elasticemail/elasticemail-client');\n\nconst client = ElasticEmail.ApiClient.instance;\n\nconst apikey = client.authentications['apikey'];\napikey.apiKey = \"YOUR_API_KEY\";\n\nconst listsApi = new ElasticEmail.ListsApi();\nconst listData = {\n    ListName: \"Best contacts\",\n    AllowUnsubscribe: true,\n    Emails: [\"johnsmith@domain.com\"]\n};\n\nconst callback = (error, data, response) => {\n    if (error) {\n        console.error(error);\n    } else {\n        console.log('API called successfully.');\n        console.log('List added.');\n    }\n};\nlistsApi.listsPost(listData, callback);\n```\n\n----------------------------------------\n\nTITLE: EmailContent Model Structure in Markdown\nDESCRIPTION: Detailed specification of the EmailContent model properties, including data types, descriptions, and optional flags. This model defines all elements needed to compose an email through the ElasticEmail API.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/EmailContent.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# ElasticEmail.EmailContent\n\n## Properties\n\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**body** | [**[BodyPart]**](BodyPart.md) | List of e-mail body parts, with user-provided MIME types (text/html, text/plain etc) | [optional] \n**merge** | **{String: String}** | A key-value collection of custom merge fields, shared between recipients. Should be used in e-mail body like so: {firstname}, {lastname} etc. | [optional] \n**attachments** | [**[MessageAttachment]**](MessageAttachment.md) | Attachments provided by sending binary data | [optional] \n**headers** | **{String: String}** | A key-value collection of custom e-mail headers. | [optional] \n**postback** | **String** | Postback header. | [optional] \n**envelopeFrom** | **String** | E-mail with an optional name to be used as the envelope from address (e.g.: John Doe &lt;email@domain.com&gt;) | [optional] \n**from** | **String** | Your e-mail with an optional name (e.g.: John Doe &lt;email@domain.com&gt;) | \n**replyTo** | **String** | To what address should the recipients reply to (e.g. John Doe &lt;email@domain.com&gt;) | [optional] \n**subject** | **String** | Default subject of email. | [optional] \n**templateName** | **String** | Name of template. | [optional] \n**attachFiles** | **[String]** | Names of previously uploaded files that should be sent as downloadable attachments | [optional] \n**utm** | [**Utm**](Utm.md) |  | [optional]\n```\n\n----------------------------------------\n\nTITLE: Basic ElasticEmail API Usage Example\nDESCRIPTION: Example showing how to initialize the ElasticEmail client, configure API key authentication, and make a basic API call to delete a campaign.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/README.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar ElasticEmail = require('@elasticemail/elasticemail-client');\n\nvar defaultClient = ElasticEmail.ApiClient.instance;\n// Configure API key authorization: apikey\nvar apikey = defaultClient.authentications['apikey'];\napikey.apiKey = \"YOUR API KEY\"\n// Uncomment the following line to set a prefix for the API key, e.g. \"Token\" (defaults to null)\n//apikey.apiKeyPrefix['X-ElasticEmail-ApiKey'] = \"Token\"\n\nvar api = new ElasticEmail.CampaignsApi()\nvar name = \"name_example\"; // {String} Name of Campaign to delete\nvar callback = function(error, data, response) {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n};\napi.campaignsByNameDelete(name, callback);\n```\n\n----------------------------------------\n\nTITLE: Complete Bulk Email Sending Implementation\nDESCRIPTION: Full implementation combining all components for sending bulk emails with ElasticEmail\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/examples/functions/sendBulkEmails.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst ElasticEmail = require('@elasticemail/elasticemail-client');\n\nconst client = ElasticEmail.ApiClient.instance;\n\nconst apikey = client.authentications['apikey'];\napikey.apiKey = \"YOUR_API_KEY\";\n\nconst emailsApi = new ElasticEmail.EmailsApi();\nconst emailData = {\n    Recipients: [\n        {\n            Email: \"johnsmith@domain.com\",\n            Fields: {\n                name: \"John\"\n            }\n        }\n    ],\n    Content: {\n        Body: [\n            {\n                ContentType: \"HTML\",\n                Charset: \"utf-8\",\n                Content: \"<strong>Hi {name}!<strong>\"\n            },\n            {\n                ContentType: \"PlainText\",\n                Charset: \"utf-8\",\n                Content: \"Hi {name}!\"\n            }\n        ],\n        From: \"myemail@domain.com\",\n        Subject: \"Example email\"\n    }\n};\n\nconst callback = (error, data, response) => {\n    if (error) {\n        console.error(error);\n    } else {\n        console.log('API called successfully.');\n        console.log('Email sent.');\n    }\n};\nemailsApi.emailsPost(emailData, callback);\n```\n\n----------------------------------------\n\nTITLE: Configuring Transactional Email Data for Elastic Email in NodeJS\nDESCRIPTION: Sets up the email data object with recipients, content, and other details for a transactional email.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/examples/functions/sendTransactionalEmails.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst emailData = {\n    Recipients: {\n        To: [\"johnsmith@domain.com\"]\n    },\n    Content: {\n        Body: [\n            {\n                ContentType: \"HTML\",\n                Charset: \"utf-8\",\n                Content: \"<strong>Mail content.<strong>\"\n            },\n            {\n                ContentType: \"PlainText\",\n                Charset: \"utf-8\",\n                Content: \"Mail content.\"\n            }\n        ],\n        From: \"myemail@domain.com\",\n        Subject: \"Example transactional email\"\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing Elastic Email API Client in NodeJS\nDESCRIPTION: This snippet shows how to load the Elastic Email library, initialize the API client, and set up authentication using an API key.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/examples/functions/loadList.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst ElasticEmail = require('@elasticemail/elasticemail-client');\n\nconst client = ElasticEmail.ApiClient.instance;\n\nconst apikey = client.authentications['apikey'];\napikey.apiKey = \"YOUR_API_KEY\";\n```\n\n----------------------------------------\n\nTITLE: Defining ApiKeyPayload Model Structure in ElasticEmail JavaScript SDK\nDESCRIPTION: Describes the structure of the ApiKeyPayload object used for API key management in the ElasticEmail JavaScript SDK. The model includes properties for naming API keys, setting permissions, expiration dates, IP restrictions, and subaccount associations.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/ApiKeyPayload.md#2025-04-22_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# ElasticEmail.ApiKeyPayload\n\n## Properties\n\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**name** | **String** | Name of the ApiKey for ease of reference. | \n**accessLevel** | [**[AccessLevel]**](AccessLevel.md) | Access level or permission to be assigned to this ApiKey. | \n**expires** | **Date** | Date this ApiKey expires. | [optional] \n**restrictAccessToIPRange** | **[String]** | Which IPs can use this ApiKey | [optional] \n**subaccount** | **String** | Email of the subaccount for which this ApiKey should be created | [optional] \n```\n\n----------------------------------------\n\nTITLE: Complete Elastic Email Transactional Email Sending Script in NodeJS\nDESCRIPTION: The full script that combines all steps to send a transactional email using the Elastic Email API in NodeJS.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/examples/functions/sendTransactionalEmails.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst ElasticEmail = require('@elasticemail/elasticemail-client');\n\nconst client = ElasticEmail.ApiClient.instance;\n\nconst apikey = client.authentications['apikey'];\napikey.apiKey = \"YOUR_API_KEY\";\n\nconst emailsApi = new ElasticEmail.EmailsApi();\nconst emailData = {\n    Recipients: {\n        To: [\"johnsmith@domain.com\"]\n    },\n    Content: {\n        Body: [\n            {\n                ContentType: \"HTML\",\n                Charset: \"utf-8\",\n                Content: \"<strong>Mail content.<strong>\"\n            },\n            {\n                ContentType: \"PlainText\",\n                Charset: \"utf-8\",\n                Content: \"Mail content.\"\n            }\n        ],\n        From: \"myemail@domain.com\",\n        Subject: \"Example transactional email\"\n    }\n};\n\nconst callback = (error, data, response) => {\n    if (error) {\n        console.error(error);\n    } else {\n        console.log('API called successfully.');\n        console.log('Email sent.');\n    }\n};\nemailsApi.emailsTransactionalPost(emailData, callback);\n```\n\n----------------------------------------\n\nTITLE: Creating Campaigns API Instance\nDESCRIPTION: Initializes the Campaigns API interface for managing email campaigns.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/examples/functions/addCampaign.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst campaignsApi = new ElasticEmail.CampaignsApi()\n```\n\n----------------------------------------\n\nTITLE: Send Transactional Email Implementation in ElasticEmail JS Client\nDESCRIPTION: Example code for sending transactional emails where recipients will be known to each other. Requires SendHttp access level.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/EmailsApi.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport ElasticEmail from '@elasticemail/elasticemail-client';\nlet defaultClient = ElasticEmail.ApiClient.instance;\n// Configure API key authorization: apikey\nlet apikey = defaultClient.authentications['apikey'];\napikey.apiKey = 'YOUR API KEY';\n// Uncomment the following line to set a prefix for the API key, e.g. \"Token\" (defaults to null)\n//apikey.apiKeyPrefix = 'Token';\n\nlet apiInstance = new ElasticEmail.EmailsApi();\nlet emailTransactionalMessageData = new ElasticEmail.EmailTransactionalMessageData(); // Email data\napiInstance.emailsTransactionalPost(emailTransactionalMessageData, (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Complete Script for Deleting Template with Elastic Email API\nDESCRIPTION: The entire script that combines all the steps to delete a template using the Elastic Email API. It includes library import, client initialization, API key setup, and the delete operation.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/examples/functions/deleteTemplate.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst ElasticEmail = require('@elasticemail/elasticemail-client');\n\nconst client = ElasticEmail.ApiClient.instance;\n\nconst apikey = client.authentications['apikey'];\napikey.apiKey = \"YOUR_API_KEY\";\n\nconst templatesApi = new ElasticEmail.TemplatesApi();\nconst templateName = 'My new template';\nconst callback = (error, data, response) => {\n    if (error) {\n        console.error(error);\n    } else {\n        console.log('API called successfully.');\n        console.log('Template deleted.');\n    }\n};\ntemplatesApi.templatesByNameDelete(templateName, callback);\n```\n\n----------------------------------------\n\nTITLE: Get Email Status Implementation in ElasticEmail JS Client\nDESCRIPTION: Example code demonstrating how to get status details of an email transaction. Includes multiple optional parameters for filtering different types of email statuses.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/EmailsApi.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport ElasticEmail from '@elasticemail/elasticemail-client';\nlet defaultClient = ElasticEmail.ApiClient.instance;\n// Configure API key authorization: apikey\nlet apikey = defaultClient.authentications['apikey'];\napikey.apiKey = 'YOUR API KEY';\n// Uncomment the following line to set a prefix for the API key, e.g. \"Token\" (defaults to null)\n//apikey.apiKeyPrefix = 'Token';\n\nlet apiInstance = new ElasticEmail.EmailsApi();\nlet transactionid = \"transactionid_example\"; // String | Transaction identifier\nlet opts = {\n  'showFailed': false,\n  'showSent': false,\n  'showDelivered': false,\n  'showPending': false,\n  'showOpened': false,\n  'showClicked': false,\n  'showAbuse': false,\n  'showUnsubscribed': false,\n  'showErrors': false,\n  'showMessageIDs': false\n};\napiInstance.emailsByTransactionidStatusGet(transactionid, opts, (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Sending Transactional Email with Elastic Email API in NodeJS\nDESCRIPTION: Calls the emailsTransactionalPost method to send the transactional email using the configured data and callback.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/examples/functions/sendTransactionalEmails.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nemailsApi.emailsTransactionalPost(emailData, callback);\n```\n\n----------------------------------------\n\nTITLE: Initializing Elastic Email API Client in NodeJS\nDESCRIPTION: Sets up the Elastic Email API client instance for making API calls.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/examples/functions/addList.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst client = ElasticEmail.ApiClient.instance;\n```\n\n----------------------------------------\n\nTITLE: Updating Contact Information with ElasticEmail API in JavaScript\nDESCRIPTION: This snippet demonstrates how to update a specific contact's information using the ElasticEmail API. Only provided fields will be changed. It requires the ModifyContacts access level. The example shows API client setup, authentication configuration, and calling the contactsByEmailPut method.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/ContactsApi.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport ElasticEmail from '@elasticemail/elasticemail-client';\nlet defaultClient = ElasticEmail.ApiClient.instance;\n// Configure API key authorization: apikey\nlet apikey = defaultClient.authentications['apikey'];\napikey.apiKey = 'YOUR API KEY';\n// Uncomment the following line to set a prefix for the API key, e.g. \"Token\" (defaults to null)\n//apikey.apiKeyPrefix = 'Token';\n\nlet apiInstance = new ElasticEmail.ContactsApi();\nlet email = \"mail@example.com\"; // String | Proper email address.\nlet contactUpdatePayload = new ElasticEmail.ContactUpdatePayload(); // ContactUpdatePayload | \napiInstance.contactsByEmailPut(email, contactUpdatePayload, (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Complete Campaign Creation Implementation\nDESCRIPTION: Full example showing the entire campaign creation process from initialization to execution.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/examples/functions/addCampaign.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n/* Initialization */\nconst ElasticEmail = require('@elasticemail/elasticemail-client');\n\nconst client = ElasticEmail.ApiClient.instance;\n\n/* Generate and use your API key */\nconst apikey = client.authentications['apikey'];\napikey.apiKey = \"YOUR_API_KEY\";\n\nconst campaignsApi = new ElasticEmail.CampaignsApi()\n\nconst campaign = {\n    Name: 'hello campaign',\n    Recipients: {\n        ListNames: [\"my list name\"],\n        SegmentNames: null,\n    },\n    Content: [{\n        From: 'myemail@domain.com',\n        ReplyTo: 'myemail@domain.com',\n        TemplateName: \"hello_template\",\n        Subject: 'Hello'\n    }],\n    Status: \"Draft\"\n};\n\nconst callback = (error, data, response) => {\n    if (error) {\n        console.error(error);\n    } else {\n        console.log('API called successfully.');\n        console.log('Campaign name', data.Name);\n        console.log('Campaign status', data.Status);\n    }\n};\ncampaignsApi.campaignsPost(campaign, callback);\n```\n\n----------------------------------------\n\nTITLE: Implementing Callback Function\nDESCRIPTION: Creates a callback function to handle the API response and error handling\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/examples/functions/sendBulkEmails.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst callback = (error, data, response) => {\n    if (error) {\n        console.error(error);\n    } else {\n        console.log('API called successfully.');\n        console.log('Email sent.');\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Importing Elastic Email Client Library in NodeJS\nDESCRIPTION: Loads the Elastic Email client library for use in a NodeJS application.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/examples/functions/loadChannelsStats.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst ElasticEmail = require('@elasticemail/elasticemail-client');\n```\n\n----------------------------------------\n\nTITLE: EmailValidationResult Properties Definition\nDESCRIPTION: Defines the type structure for email validation results including properties for account details, domain information, validation status, and prediction scores. Each property is documented with its type and optional status.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/EmailValidationResult.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\naccount | String | Local part of an email | [optional] \ndomain | String | Name of selected domain. | [optional] \nemail | String | Full email address that was verified | [optional] \nsuggestedSpelling | String | Suggested spelling if a possible mistake was found | [optional] \ndisposable | Boolean | Does the email have a temporary domain | [optional] \nrole | Boolean | Is an email a role email (e.g. info@, noreply@ etc.) | [optional] \nreason | String | All detected issues | [optional] \ndateAdded | Date | Added date | [optional] \nresult | EmailValidationStatus | | [optional] \npredictedScore | Number | Predicted score | [optional] \npredictedStatus | EmailPredictedValidationStatus | | [optional]\n```\n\n----------------------------------------\n\nTITLE: Adding Contacts via API\nDESCRIPTION: Makes the API call to add contacts using the configured parameters\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/examples/functions/addContacts.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ncontactsApi.contactsPost(contacts, options, callback);\n```\n\n----------------------------------------\n\nTITLE: Setting API Key for Authentication in Elastic Email\nDESCRIPTION: Configures the API key for authentication. The API key must have the 'ModifyTemplates' access level to delete templates.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/examples/functions/deleteTemplate.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst apikey = client.authentications['apikey'];\napikey.apiKey = \"YOUR_API_KEY\";\n```\n\n----------------------------------------\n\nTITLE: ContactActivity Model Properties Definition\nDESCRIPTION: Defines the properties of the ContactActivity model including email metrics (sent, opened, clicked, failed counts), timestamps of last activities, IP address info, and error details. The model is used to track engagement and delivery status for individual contacts.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/ContactActivity.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  totalSent: Number,        // Total emails sent\n  totalOpened: Number,      // Total emails opened\n  totalClicked: Number,     // Total emails clicked\n  totalFailed: Number,      // Total emails failed\n  lastSent: Date,          // Last email sent timestamp\n  lastOpened: Date,        // Last email opened timestamp\n  lastClicked: Date,       // Last email clicked timestamp\n  lastFailed: Date,        // Last email bounce timestamp\n  lastIP: String,          // Last IP address of contact activity\n  errorCode: Number,       // Last RFC error code\n  friendlyErrorMessage: String  // Last RFC error message\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Contact Export Implementation\nDESCRIPTION: Full implementation of contact export functionality including all required components\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/examples/functions/exportContacts.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst ElasticEmail = require('@elasticemail/elasticemail-client');\n\nconst client = ElasticEmail.ApiClient.instance;\n\nconst apikey = client.authentications['apikey'];\napikey.apiKey = \"YOUR_API_KEY\";\n\nconst contactsApi = new ElasticEmail.ContactsApi()\nconst options = {\n    fileFormat: 'Csv',\n    emails: [\"johnsmith@domain.com\"],\n    fileName: 'exported.csv'\n};\n\nconst callback = (error, data, response) => {\n    if (error) {\n        console.error(error);\n    } else {\n        console.log('API called successfully.');\n        console.log('Contacts exported');\n        console.log('Link', data.Link);\n    }\n};\ncontactsApi.contactsExportPost(options, callback);\n```\n\n----------------------------------------\n\nTITLE: Initializing Elastic Email API Client in NodeJS\nDESCRIPTION: Sets up the Elastic Email API client instance and authenticates using an API key.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/examples/functions/sendTransactionalEmails.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst client = ElasticEmail.ApiClient.instance;\n\nconst apikey = client.authentications['apikey'];\napikey.apiKey = \"YOUR_API_KEY\";\n```\n\n----------------------------------------\n\nTITLE: Initializing Elastic Email API Client\nDESCRIPTION: Sets up the API client instance for making requests to the Elastic Email API.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/examples/functions/loadCampaign.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst client = ElasticEmail.ApiClient.instance;\n```\n\n----------------------------------------\n\nTITLE: Executing Contact Deletion API Call\nDESCRIPTION: Calls the contactsDeletePost method of the ContactsApi to delete the specified contacts, using the defined callback function.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/examples/functions/deleteContact.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ncontactsApi.contactsDeletePost(contacts, callback);\n```\n\n----------------------------------------\n\nTITLE: Complete Contact Deletion Script in NodeJS\nDESCRIPTION: A full example script that combines all the previous snippets to delete contacts using the Elastic Email API. It includes library import, client setup, API key configuration, contact specification, and the API call execution.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/examples/functions/deleteContact.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst ElasticEmail = require('@elasticemail/elasticemail-client');\n\nconst client = ElasticEmail.ApiClient.instance;\n\nconst apikey = client.authentications['apikey'];\napikey.apiKey = \"YOUR_API_KEY\";\n\nconst contactsApi = new ElasticEmail.ContactsApi()\nconst contacts = {\n    Emails: [\"johnsmith@domain.com\"]\n};\n\nconst callback = (error, data, response) => {\n    if (error) {\n        console.error(error);\n    } else {\n        console.log('API called successfully.');\n        console.log('Contacts deleted.');\n    }\n};\ncontactsApi.contactsDeletePost(contacts, callback);\n```\n\n----------------------------------------\n\nTITLE: ElasticEmail.EmailsPayload Properties Definition in Markdown\nDESCRIPTION: Defines the structure and properties of the EmailsPayload class which can be used to specify email recipients either through a segment rule or a direct list of email addresses. The rule property accepts SQL-like segment rules, while the emails property accepts a list of contact email addresses.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/EmailsPayload.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# ElasticEmail.EmailsPayload\n\n## Properties\n\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**rule** | **String** | SQL-like rule. Sending &#39;All&#39; as a value loads all resources of the given type. Help for building a segment rule can be found here: https://help.elasticemail.com/en/articles/5162182-segment-rules | [optional] \n**emails** | **[String]** | Comma delimited list of contact emails | [optional]\n```\n\n----------------------------------------\n\nTITLE: Uploading a File with ElasticEmail FilesApi in JavaScript\nDESCRIPTION: This snippet demonstrates how to upload a file using the ElasticEmail FilesApi. It requires the ModifyFiles access level and uses the filesPost method with an optional expiration parameter.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/FilesApi.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport ElasticEmail from '@elasticemail/elasticemail-client';\nlet defaultClient = ElasticEmail.ApiClient.instance;\n// Configure API key authorization: apikey\nlet apikey = defaultClient.authentications['apikey'];\napikey.apiKey = 'YOUR API KEY';\n// Uncomment the following line to set a prefix for the API key, e.g. \"Token\" (defaults to null)\n//apikey.apiKeyPrefix = 'Token';\n\nlet apiInstance = new ElasticEmail.FilesApi();\nlet filePayload = new ElasticEmail.FilePayload(); // FilePayload | \nlet opts = {\n  'expiresAfterDays': 56 // Number | After how many days should the file be deleted.\n};\napiInstance.filesPost(filePayload, opts, (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Executing Contact Import API Call in NodeJS\nDESCRIPTION: This snippet shows how to make the API call to import contacts using the configured options and callback function.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/examples/functions/uploadContacts.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ncontactsApi.contactsImportPost(options, callback);\n```\n\n----------------------------------------\n\nTITLE: Complete Code for Loading Email Template Details with Elastic Email in NodeJS\nDESCRIPTION: This snippet provides the complete code example for loading email template details using the Elastic Email NodeJS library, including initialization, authentication, and API call.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/examples/functions/loadTemplate.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst ElasticEmail = require('@elasticemail/elasticemail-client');\n\nconst client = ElasticEmail.ApiClient.instance;\n\nconst apikey = client.authentications['apikey'];\napikey.apiKey = \"YOUR_API_KEY\";\n\nconst templatesApi = new ElasticEmail.TemplatesApi();\nconst templateName = \"hello_template\";\nconst callback = (error, data, response) => {\n    if (error) {\n        console.error(error);\n    } else {\n        console.log('API called successfully.');\n        console.log('Template name', data.Name);\n        console.log('Template type', data.TemplateType);\n    }\n};\ntemplatesApi.templatesByNameGet(templateName, callback);\n```\n\n----------------------------------------\n\nTITLE: Defining Callback Function for Elastic Email API Response in NodeJS\nDESCRIPTION: This code defines a callback function to handle the API response, logging errors or processing and displaying the retrieved campaign data.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/examples/functions/loadCampaignsStats.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst callback = (error, data, response) => {\n    if (error) {\n        console.error(error);\n    } else {\n        console.log('API called successfully.');\n        data.forEach((campaign) => {\n            console.log(JSON.stringify(campaign));\n        });\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Complete Elastic Email Channel Statistics Retrieval Script\nDESCRIPTION: Full NodeJS script for fetching and displaying channel statistics from Elastic Email API, including all necessary imports, authentication, and API calls.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/examples/functions/loadChannelsStats.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst ElasticEmail = require('@elasticemail/elasticemail-client');\n\nconst client = ElasticEmail.ApiClient.instance;\n\nconst apikey = client.authentications['apikey'];\napikey.apiKey = \"YOUR_API_KEY\";\n\nconst statisticsApi = new ElasticEmail.StatisticsApi();\nconst pageinationOptions = {\n    limit: 0,\n    offset: 0,\n};\nconst callback = (error, data, response) => {\n    if (error) {\n        console.error(error);\n    } else {\n        console.log('API called successfully.');\n        data.forEach((channel) => {\n            console.log(JSON.stringify(channel));\n        });\n    }\n};\nstatisticsApi.statisticsChannelsGet(pageinationOptions, callback);\n```\n\n----------------------------------------\n\nTITLE: Importing Contacts from File with ElasticEmail JS Client\nDESCRIPTION: Demonstrates how to import contacts from a file using the ElasticEmail JavaScript client library. Supports options for list name, file encoding, and file upload via URL or direct file upload.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/ContactsApi.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport ElasticEmail from '@elasticemail/elasticemail-client';\nlet defaultClient = ElasticEmail.ApiClient.instance;\n// Configure API key authorization: apikey\nlet apikey = defaultClient.authentications['apikey'];\napikey.apiKey = 'YOUR API KEY';\n// Uncomment the following line to set a prefix for the API key, e.g. \"Token\" (defaults to null)\n//apikey.apiKeyPrefix = 'Token';\n\nlet apiInstance = new ElasticEmail.ContactsApi();\nlet opts = {\n  'listName': \"listName_example\", // String | Name of an existing list to add these contacts to\n  'encodingName': \"encodingName_example\", // String | In what encoding the file is uploaded\n  'fileUrl': \"fileUrl_example\", // String | Optional url of csv to import\n  'file': \"/path/to/file\" // File | \n};\napiInstance.contactsImportPost(opts, (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Complete Template Creation Implementation\nDESCRIPTION: Full implementation combining all steps for creating an email template using Elastic Email API\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/examples/functions/addTemplate.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst ElasticEmail = require('@elasticemail/elasticemail-client');\n\nconst client = ElasticEmail.ApiClient.instance;\n\nconst apikey = client.authentications['apikey'];\napikey.apiKey = \"YOUR_API_KEY\";\n\nconst templatesApi = new ElasticEmail.TemplatesApi();\nconst template = {\n    Name: 'My new template',\n    Subject: 'Default subject',\n    Body: [{\n        ContentType: 'HTML',\n        Charset: 'utf-8',\n        Content: 'My template'\n    }],\n    TemplateScope: 'Personal',\n};\nconst callback = (error, data, response) => {\n    if (error) {\n        console.error(error);\n    } else {\n        console.log('API called successfully.');\n        console.log('Template name', data.Name);\n        console.log('Template type', data.TemplateType);\n    }\n};\ntemplatesApi.templatesPost(template, callback);\n```\n\n----------------------------------------\n\nTITLE: Configuring Email Data\nDESCRIPTION: Sets up email content including recipients, merge fields, HTML/plain text content, and email metadata\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/examples/functions/sendBulkEmails.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst emailData = {\n    Recipients: [\n        {\n            Email: \"johnsmith@domain.com\",\n            Fields: {\n                name: \"John\"\n            }\n        }\n    ],\n    Content: {\n        Body: [\n            {\n                ContentType: \"HTML\",\n                Charset: \"utf-8\",\n                Content: \"<strong>Hi {name}!<strong>\"\n            },\n            {\n                ContentType: \"PlainText\",\n                Charset: \"utf-8\",\n                Content: \"Hi {name}!\"\n            }\n        ],\n        From: \"myemail@domain.com\",\n        Subject: \"Example email\"\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Retrieving Contacts with ElasticEmail JS Client\nDESCRIPTION: Example showing how to retrieve contacts using the ElasticEmail JavaScript client library. Includes authentication setup and pagination parameters for limiting and offsetting results.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/ContactsApi.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport ElasticEmail from '@elasticemail/elasticemail-client';\nlet defaultClient = ElasticEmail.ApiClient.instance;\n// Configure API key authorization: apikey\nlet apikey = defaultClient.authentications['apikey'];\napikey.apiKey = 'YOUR API KEY';\n// Uncomment the following line to set a prefix for the API key, e.g. \"Token\" (defaults to null)\n//apikey.apiKeyPrefix = 'Token';\n\nlet apiInstance = new ElasticEmail.ContactsApi();\nlet opts = {\n  'limit': 100, // Number | Maximum number of returned items.\n  'offset': 20 // Number | How many items should be returned ahead.\n};\napiInstance.contactsGet(opts, (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Elastic Email API Client Instance\nDESCRIPTION: Creates an instance of the Elastic Email API client for making API calls.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/examples/functions/loadChannelsStats.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst client = ElasticEmail.ApiClient.instance;\n```\n\n----------------------------------------\n\nTITLE: Defining Callback Function for Elastic Email API Response\nDESCRIPTION: Creates a callback function to handle the API response, logging errors or processing the returned data.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/examples/functions/loadChannelsStats.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst callback = (error, data, response) => {\n    if (error) {\n        console.error(error);\n    } else {\n        console.log('API called successfully.');\n        data.forEach((channel) => {\n            console.log(JSON.stringify(channel));\n        });\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Complete Node.js Script for Deleting a Campaign with Elastic Email API\nDESCRIPTION: This snippet combines all the previous code snippets into a complete Node.js script that deletes a campaign using the Elastic Email API. It includes library initialization, API client setup, campaign specification, and the API call.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/examples/functions/deleteCampaign.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst ElasticEmail = require('@elasticemail/elasticemail-client');\n\nconst client = ElasticEmail.ApiClient.instance;\n\nconst apikey = client.authentications['apikey'];\napikey.apiKey = \"YOUR_API_KEY\";\n\nconst campaignsApi = new ElasticEmail.CampaignsApi()\nconst campaignName = \"hello campaign\";\n\nconst callback = (error, data, response) => {\n    if (error) {\n        console.error(error);\n    } else {\n        console.log('API called successfully.');\n        console.log('Campaign deleted.');\n    }\n};\ncampaignsApi.campaignsByNameDelete(campaignName, callback);\n```\n\n----------------------------------------\n\nTITLE: Defining Email Validation Status Enum - ElasticEmail JavaScript\nDESCRIPTION: Enumeration constants for email validation status predictions. Values range from None (default/unvalidated), through Valid, LowRisk and HighRisk, to Invalid representing different confidence levels in email address validity.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/EmailPredictedValidationStatus.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nEmailPredictedValidationStatus = {\n  None: \"None\",\n  Valid: \"Valid\",\n  LowRisk: \"LowRisk\",\n  HighRisk: \"HighRisk\",\n  Invalid: \"Invalid\"\n}\n```\n\n----------------------------------------\n\nTITLE: Add New Campaign Using ElasticEmail API in JavaScript\nDESCRIPTION: Example of adding a new campaign for processing using the ElasticEmail API client. Requires ModifyCampaigns access level and API key authentication.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/CampaignsApi.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport ElasticEmail from '@elasticemail/elasticemail-client';\nlet defaultClient = ElasticEmail.ApiClient.instance;\n// Configure API key authorization: apikey\nlet apikey = defaultClient.authentications['apikey'];\napikey.apiKey = 'YOUR API KEY';\n// Uncomment the following line to set a prefix for the API key, e.g. \"Token\" (defaults to null)\n//apikey.apiKeyPrefix = 'Token';\n\nlet apiInstance = new ElasticEmail.CampaignsApi();\nlet campaign = new ElasticEmail.Campaign(); // Campaign | JSON representation of a campaign\napiInstance.campaignsPost(campaign, (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Adding New Contact List via Elastic Email API in NodeJS\nDESCRIPTION: Makes an API call to create a new contact list using the Elastic Email Lists API.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/examples/functions/addList.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nlistsApi.listsPost(listData, callback);\n```\n\n----------------------------------------\n\nTITLE: Complete Elastic Email List Retrieval Script in NodeJS\nDESCRIPTION: This snippet combines all previous code snippets into a complete script for retrieving contact list details using the Elastic Email API.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/examples/functions/loadList.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst ElasticEmail = require('@elasticemail/elasticemail-client');\n\nconst client = ElasticEmail.ApiClient.instance;\n\nconst apikey = client.authentications['apikey'];\napikey.apiKey = \"YOUR_API_KEY\";\n\n\nconst listsApi = new ElasticEmail.ListsApi();\nconst listName = 'Best contacts';\n\nconst callback = (error, data, response) => {\n    if (error) {\n        console.error(error);\n    } else {\n        console.log('API called successfully.');\n        console.log('List loaded', data.ListName);\n        console.log('PublicListID', data.PublicListID);\n    }\n};\nlistsApi.listsByNameGet(listName, callback);\n```\n\n----------------------------------------\n\nTITLE: Defining New Contact List Data for Elastic Email in NodeJS\nDESCRIPTION: Creates an object with details for a new contact list, including name, unsubscribe settings, and initial contacts.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/examples/functions/addList.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst listData = {\n    ListName: \"Best contacts\",\n    AllowUnsubscribe: true,\n    Emails: [\"johnsmith@domain.com\"]\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Callback Function for API Response\nDESCRIPTION: Creates a callback function to handle the API response, logging success or error messages and campaign details.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/examples/functions/loadCampaign.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst callback = (error, data, response) => {\n    if (error) {\n        console.error(error);\n    } else {\n        console.log('API called successfully.');\n        console.log('Campaign name', data.Name);\n        console.log('Campaign status', data.Status);\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Individual Contacts with ElasticEmail JS Client\nDESCRIPTION: Shows how to add new contacts using the ElasticEmail JavaScript client library. Supports adding up to 1000 contacts at once and optionally adding them to specific lists.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/ContactsApi.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport ElasticEmail from '@elasticemail/elasticemail-client';\nlet defaultClient = ElasticEmail.ApiClient.instance;\n// Configure API key authorization: apikey\nlet apikey = defaultClient.authentications['apikey'];\napikey.apiKey = 'YOUR API KEY';\n// Uncomment the following line to set a prefix for the API key, e.g. \"Token\" (defaults to null)\n//apikey.apiKeyPrefix = 'Token';\n\nlet apiInstance = new ElasticEmail.ContactsApi();\nlet contactPayload = [new ElasticEmail.ContactPayload()]; // [ContactPayload] | \nlet opts = {\n  'listnames': [\"null\"] // [String] | Names of lists to which the uploaded contacts should be added to\n};\napiInstance.contactsPost(contactPayload, opts, (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Update Campaign Using ElasticEmail API in JavaScript\nDESCRIPTION: Example of updating an existing campaign using the ElasticEmail API client. Only active and paused campaigns can be updated. Requires ModifyCampaigns access level and API key authentication.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/CampaignsApi.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport ElasticEmail from '@elasticemail/elasticemail-client';\nlet defaultClient = ElasticEmail.ApiClient.instance;\n// Configure API key authorization: apikey\nlet apikey = defaultClient.authentications['apikey'];\napikey.apiKey = 'YOUR API KEY';\n// Uncomment the following line to set a prefix for the API key, e.g. \"Token\" (defaults to null)\n//apikey.apiKeyPrefix = 'Token';\n\nlet apiInstance = new ElasticEmail.CampaignsApi();\nlet name = \"name_example\"; // String | Name of Campaign to update\nlet campaign = new ElasticEmail.Campaign(); // Campaign | JSON representation of a campaign\napiInstance.campaignsByNamePut(name, campaign, (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Defining AccessLevel Enum in ElasticEmail JavaScript Client\nDESCRIPTION: This enumeration defines all possible access levels for users within the Elastic Email platform. Access levels represent different permissions ranging from viewing to modifying various features like accounts, contacts, campaigns, and other platform components.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/AccessLevel.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n* `None` (value: `\"None\"`)\n\n* `ViewAccount` (value: `\"ViewAccount\"`)\n\n* `ViewContacts` (value: `\"ViewContacts\"`)\n\n* `ViewForms` (value: `\"ViewForms\"`)\n\n* `ViewTemplates` (value: `\"ViewTemplates\"`)\n\n* `ViewCampaigns` (value: `\"ViewCampaigns\"`)\n\n* `ViewChannels` (value: `\"ViewChannels\"`)\n\n* `ViewAutomations` (value: `\"ViewAutomations\"`)\n\n* `ViewSurveys` (value: `\"ViewSurveys\"`)\n\n* `ViewSettings` (value: `\"ViewSettings\"`)\n\n* `ViewBilling` (value: `\"ViewBilling\"`)\n\n* `ViewSubAccounts` (value: `\"ViewSubAccounts\"`)\n\n* `ViewUsers` (value: `\"ViewUsers\"`)\n\n* `ViewFiles` (value: `\"ViewFiles\"`)\n\n* `ViewReports` (value: `\"ViewReports\"`)\n\n* `ModifyAccount` (value: `\"ModifyAccount\"`)\n\n* `ModifyContacts` (value: `\"ModifyContacts\"`)\n\n* `ModifyForms` (value: `\"ModifyForms\"`)\n\n* `ModifyTemplates` (value: `\"ModifyTemplates\"`)\n\n* `ModifyCampaigns` (value: `\"ModifyCampaigns\"`)\n\n* `ModifyChannels` (value: `\"ModifyChannels\"`)\n\n* `ModifyAutomations` (value: `\"ModifyAutomations\"`)\n\n* `ModifySurveys` (value: `\"ModifySurveys\"`)\n\n* `ModifyFiles` (value: `\"ModifyFiles\"`)\n\n* `Export` (value: `\"Export\"`)\n\n* `SendSmtp` (value: `\"SendSmtp\"`)\n\n* `SendSMS` (value: `\"SendSMS\"`)\n\n* `ModifySettings` (value: `\"ModifySettings\"`)\n\n* `ModifyBilling` (value: `\"ModifyBilling\"`)\n\n* `ModifyProfile` (value: `\"ModifyProfile\"`)\n\n* `ModifySubAccounts` (value: `\"ModifySubAccounts\"`)\n\n* `ModifyUsers` (value: `\"ModifyUsers\"`)\n\n* `Security` (value: `\"Security\"`)\n\n* `ModifyLanguage` (value: `\"ModifyLanguage\"`)\n\n* `ViewSupport` (value: `\"ViewSupport\"`)\n\n* `SendHttp` (value: `\"SendHttp\"`)\n\n* `Modify2FAEmail` (value: `\"Modify2FAEmail\"`)\n\n* `ModifySupport` (value: `\"ModifySupport\"`)\n\n* `ViewCustomFields` (value: `\"ViewCustomFields\"`)\n\n* `ModifyCustomFields` (value: `\"ModifyCustomFields\"`)\n\n* `ModifyWebNotifications` (value: `\"ModifyWebNotifications\"`)\n\n* `ExtendedLogs` (value: `\"ExtendedLogs\"`)\n\n* `VerifyEmails` (value: `\"VerifyEmails\"`)\n\n* `Modify2FASms` (value: `\"Modify2FASms\"`)\n\n* `ModifyLandingPages` (value: `\"ModifyLandingPages\"`)\n\n* `ViewLandingPages` (value: `\"ViewLandingPages\"`)\n\n* `ModifySuppressions` (value: `\"ModifySuppressions\"`)\n\n* `ViewSuppressions` (value: `\"ViewSuppressions\"`)\n\n* `ViewDragDropEditor` (value: `\"ViewDragDropEditor\"`)\n\n* `ViewTemplateEditor` (value: `\"ViewTemplateEditor\"`)\n\n* `ViewAITools` (value: `\"ViewAITools\"`)\n\n* `ModifySubscriptionAntiSpam` (value: `\"ModifySubscriptionAntiSpam\"`)\n```\n\n----------------------------------------\n\nTITLE: Deleting Contacts in Bulk with ElasticEmail API in JavaScript\nDESCRIPTION: This snippet shows how to delete multiple contacts in bulk using the ElasticEmail API. It requires the ModifyContacts access level. The example includes API client configuration, authentication setup, and calling the contactsDeletePost method with an EmailsPayload parameter.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/ContactsApi.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport ElasticEmail from '@elasticemail/elasticemail-client';\nlet defaultClient = ElasticEmail.ApiClient.instance;\n// Configure API key authorization: apikey\nlet apikey = defaultClient.authentications['apikey'];\napikey.apiKey = 'YOUR API KEY';\n// Uncomment the following line to set a prefix for the API key, e.g. \"Token\" (defaults to null)\n//apikey.apiKeyPrefix = 'Token';\n\nlet apiInstance = new ElasticEmail.ContactsApi();\nlet emailsPayload = new ElasticEmail.EmailsPayload(); // EmailsPayload | Provide either rule or a list of emails, not both.\napiInstance.contactsDeletePost(emailsPayload, (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Adding a New SubAccount in JavaScript\nDESCRIPTION: This snippet shows how to add a new SubAccount to your Account using the ElasticEmail API. It requires the ModifySubAccounts access level and uses the subaccountsPost method.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/SubAccountsApi.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport ElasticEmail from '@elasticemail/elasticemail-client';\nlet defaultClient = ElasticEmail.ApiClient.instance;\n// Configure API key authorization: apikey\nlet apikey = defaultClient.authentications['apikey'];\napikey.apiKey = 'YOUR API KEY';\n// Uncomment the following line to set a prefix for the API key, e.g. \"Token\" (defaults to null)\n//apikey.apiKeyPrefix = 'Token';\n\nlet apiInstance = new ElasticEmail.SubAccountsApi();\nlet subaccountPayload = new ElasticEmail.SubaccountPayload(); // SubaccountPayload | \napiInstance.subaccountsPost(subaccountPayload, (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Sending Campaign Request\nDESCRIPTION: Makes the API call to create the campaign using the defined configuration.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/examples/functions/addCampaign.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ncampaignsApi.campaignsPost(campaign, callback);\n```\n\n----------------------------------------\n\nTITLE: Updating a Template with ElasticEmail API in JavaScript\nDESCRIPTION: Demonstrates how to update an existing email template, overwriting its data. Requires ModifyTemplates access level and uses API key authentication.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/TemplatesApi.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport ElasticEmail from '@elasticemail/elasticemail-client';\nlet defaultClient = ElasticEmail.ApiClient.instance;\n// Configure API key authorization: apikey\nlet apikey = defaultClient.authentications['apikey'];\napikey.apiKey = 'YOUR API KEY';\n// Uncomment the following line to set a prefix for the API key, e.g. \"Token\" (defaults to null)\n//apikey.apiKeyPrefix = 'Token';\n\nlet apiInstance = new ElasticEmail.TemplatesApi();\nlet name = \"Template01\"; // String | Name of template.\nlet templatePayload = new ElasticEmail.TemplatePayload(); // TemplatePayload | \napiInstance.templatesByNamePut(name, templatePayload, (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a New SubAccount in ElasticEmail API (JavaScript)\nDESCRIPTION: This endpoint adds a new subaccount. It uses a POST request to the '/subaccounts' endpoint.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/README.md#2025-04-22_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\nElasticEmail.SubAccountsApi.subaccountsPost\n```\n\n----------------------------------------\n\nTITLE: Initialize API Client\nDESCRIPTION: Creates an instance of the Elastic Email API client\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/examples/functions/deleteList.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst client = ElasticEmail.ApiClient.instance;\n```\n\n----------------------------------------\n\nTITLE: Updating SMTP Credential using ElasticEmail SecurityApi in JavaScript\nDESCRIPTION: This snippet shows how to update an existing SMTP credential using the ElasticEmail SecurityApi. It sets up the API client, configures authentication, and calls the securitySmtpByNamePut method with the credential name and updated details.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/SecurityApi.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport ElasticEmail from '@elasticemail/elasticemail-client';\nlet defaultClient = ElasticEmail.ApiClient.instance;\n// Configure API key authorization: apikey\nlet apikey = defaultClient.authentications['apikey'];\napikey.apiKey = 'YOUR API KEY';\n// Uncomment the following line to set a prefix for the API key, e.g. \"Token\" (defaults to null)\n//apikey.apiKeyPrefix = 'Token';\n\nlet apiInstance = new ElasticEmail.SecurityApi();\nlet name = \"name_example\"; // String | Name of the SMTP Credential\nlet smtpCredentialsPayload = new ElasticEmail.SmtpCredentialsPayload(); // SmtpCredentialsPayload | \napiInstance.securitySmtpByNamePut(name, smtpCredentialsPayload, (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Campaign Statistics in ElasticEmail API using JavaScript\nDESCRIPTION: This snippet demonstrates how to retrieve statistics for a specific campaign using the ElasticEmail API. It requires the campaign name and uses API key authentication.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/StatisticsApi.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport ElasticEmail from '@elasticemail/elasticemail-client';\nlet defaultClient = ElasticEmail.ApiClient.instance;\n// Configure API key authorization: apikey\nlet apikey = defaultClient.authentications['apikey'];\napikey.apiKey = 'YOUR API KEY';\n// Uncomment the following line to set a prefix for the API key, e.g. \"Token\" (defaults to null)\n//apikey.apiKeyPrefix = 'Token';\n\nlet apiInstance = new ElasticEmail.StatisticsApi();\nlet name = \"name_example\"; // String | The name of the campaign to get.\napiInstance.statisticsCampaignsByNameGet(name, (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Verifying Single Email Address with Elastic Email API in JavaScript\nDESCRIPTION: Example of using the verificationsByEmailPost method to verify a single email address and return validation results. This operation checks if an email is valid and returns the verification status. Requires the VerifyEmails access level.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/VerificationsApi.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport ElasticEmail from '@elasticemail/elasticemail-client';\nlet defaultClient = ElasticEmail.ApiClient.instance;\n// Configure API key authorization: apikey\nlet apikey = defaultClient.authentications['apikey'];\napikey.apiKey = 'YOUR API KEY';\n// Uncomment the following line to set a prefix for the API key, e.g. \"Token\" (defaults to null)\n//apikey.apiKeyPrefix = 'Token';\n\nlet apiInstance = new ElasticEmail.VerificationsApi();\nlet email = \"email_example\"; // String | Email address to verify\napiInstance.verificationsByEmailPost(email, (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Campaign Update Object\nDESCRIPTION: Defines the campaign update configuration including name, recipients, content details, and status settings.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/examples/functions/updateCampaign.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst campaign = {\n    Name: 'hello campaign updated',\n    Recipients: {\n        ListNames: [\"my list name\"],\n        SegmentNames: null,\n    },\n    Content: [{\n        From: 'myemail@domain.com',\n        ReplyTo: 'myemail@domain.com',\n        TemplateName: \"hello_template\",\n        Subject: 'Thanks for Subscribing'\n    }],\n    Status: \"Draft\"\n};\n```\n\n----------------------------------------\n\nTITLE: View Email Details Implementation in ElasticEmail JS Client\nDESCRIPTION: Example code showing how to retrieve email details using the ElasticEmail API. Requires an API key for authentication and a message ID parameter.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/EmailsApi.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport ElasticEmail from '@elasticemail/elasticemail-client';\nlet defaultClient = ElasticEmail.ApiClient.instance;\n// Configure API key authorization: apikey\nlet apikey = defaultClient.authentications['apikey'];\napikey.apiKey = 'YOUR API KEY';\n// Uncomment the following line to set a prefix for the API key, e.g. \"Token\" (defaults to null)\n//apikey.apiKeyPrefix = 'Token';\n\nlet apiInstance = new ElasticEmail.EmailsApi();\nlet msgid = \"msgid_example\"; // String | Message identifier\napiInstance.emailsByMsgidViewGet(msgid, (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating StatisticsApi Instance for Elastic Email in NodeJS\nDESCRIPTION: This code creates an instance of the StatisticsApi, which is used to retrieve campaign statistics from Elastic Email.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/examples/functions/loadCampaignsStats.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst statisticsApi = new ElasticEmail.StatisticsApi();\n```\n\n----------------------------------------\n\nTITLE: Creating ListsApi Instance and Setting List Name in NodeJS\nDESCRIPTION: This snippet demonstrates how to create an instance of the ListsApi and set the name of the list to be retrieved.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/examples/functions/loadList.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst listsApi = new ElasticEmail.ListsApi();\nconst listName = 'Best contacts';\n```\n\n----------------------------------------\n\nTITLE: Retrieving Overall Statistics in ElasticEmail API using JavaScript\nDESCRIPTION: This snippet demonstrates how to fetch overall statistics using the ElasticEmail API. It requires a start date and optionally an end date for the statistics period.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/StatisticsApi.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport ElasticEmail from '@elasticemail/elasticemail-client';\nlet defaultClient = ElasticEmail.ApiClient.instance;\n// Configure API key authorization: apikey\nlet apikey = defaultClient.authentications['apikey'];\napikey.apiKey = 'YOUR API KEY';\n// Uncomment the following line to set a prefix for the API key, e.g. \"Token\" (defaults to null)\n//apikey.apiKeyPrefix = 'Token';\n\nlet apiInstance = new ElasticEmail.StatisticsApi();\nlet from = new Date(\"2013-10-20T19:20:30+01:00\"); // Date | Starting date for search in YYYY-MM-DDThh:mm:ss format.\nlet opts = {\n  'to': new Date(\"2013-10-20T19:20:30+01:00\") // Date | Ending date for search in YYYY-MM-DDThh:mm:ss format.\n};\napiInstance.statisticsGet(from, opts, (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Listing SMTP Credentials using ElasticEmail SecurityApi in JavaScript\nDESCRIPTION: This example demonstrates how to list all existing SMTP credentials using the ElasticEmail SecurityApi. It initializes the API client, sets up authentication, and calls the securitySmtpGet method to retrieve the list of credentials.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/SecurityApi.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport ElasticEmail from '@elasticemail/elasticemail-client';\nlet defaultClient = ElasticEmail.ApiClient.instance;\n// Configure API key authorization: apikey\nlet apikey = defaultClient.authentications['apikey'];\napikey.apiKey = 'YOUR API KEY';\n// Uncomment the following line to set a prefix for the API key, e.g. \"Token\" (defaults to null)\n//apikey.apiKeyPrefix = 'Token';\n\nlet apiInstance = new ElasticEmail.SecurityApi();\nlet opts = {\n  'subaccount': \"subaccount_example\" // String | Email of the subaccount of which credentials should be listed\n};\napiInstance.securitySmtpGet(opts, (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Send Bulk Emails Implementation in ElasticEmail JS Client\nDESCRIPTION: Example code for sending bulk merge emails without using a CSV file. Requires SendHttp access level.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/EmailsApi.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport ElasticEmail from '@elasticemail/elasticemail-client';\nlet defaultClient = ElasticEmail.ApiClient.instance;\n// Configure API key authorization: apikey\nlet apikey = defaultClient.authentications['apikey'];\napikey.apiKey = 'YOUR API KEY';\n// Uncomment the following line to set a prefix for the API key, e.g. \"Token\" (defaults to null)\n//apikey.apiKeyPrefix = 'Token';\n\nlet apiInstance = new ElasticEmail.EmailsApi();\nlet emailMessageData = new ElasticEmail.EmailMessageData(); // Email data\napiInstance.emailsPost(emailMessageData, (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Adding a Domain to ElasticEmail Account using JavaScript\nDESCRIPTION: This code snippet demonstrates how to use the ElasticEmail JavaScript client to add a new domain to an account. It configures the API key authorization, creates an instance of the DomainsApi, and calls the domainsPost method with a DomainPayload object.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/DomainsApi.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport ElasticEmail from '@elasticemail/elasticemail-client';\nlet defaultClient = ElasticEmail.ApiClient.instance;\n// Configure API key authorization: apikey\nlet apikey = defaultClient.authentications['apikey'];\napikey.apiKey = 'YOUR API KEY';\n// Uncomment the following line to set a prefix for the API key, e.g. \"Token\" (defaults to null)\n//apikey.apiKeyPrefix = 'Token';\n\nlet apiInstance = new ElasticEmail.DomainsApi();\nlet domainPayload = new ElasticEmail.DomainPayload(); // DomainPayload | Domain to add\napiInstance.domainsPost(domainPayload, (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Verifying an Email in ElasticEmail API (JavaScript)\nDESCRIPTION: This endpoint initiates the verification process for a specific email. It uses a POST request to the '/verifications/{email}' endpoint.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/README.md#2025-04-22_snippet_35\n\nLANGUAGE: JavaScript\nCODE:\n```\nElasticEmail.VerificationsApi.verificationsByEmailPost\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Segments using ElasticEmail API in JavaScript\nDESCRIPTION: This snippet shows how to retrieve a list of all available segments using the ElasticEmail API. It requires the ViewContacts access level and supports optional limit and offset parameters for pagination.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/SegmentsApi.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport ElasticEmail from '@elasticemail/elasticemail-client';\nlet defaultClient = ElasticEmail.ApiClient.instance;\n// Configure API key authorization: apikey\nlet apikey = defaultClient.authentications['apikey'];\napikey.apiKey = 'YOUR API KEY';\n// Uncomment the following line to set a prefix for the API key, e.g. \"Token\" (defaults to null)\n//apikey.apiKeyPrefix = 'Token';\n\nlet apiInstance = new ElasticEmail.SegmentsApi();\nlet opts = {\n  'limit': 100, // Number | Maximum number of returned items.\n  'offset': 20 // Number | How many items should be returned ahead.\n};\napiInstance.segmentsGet(opts, (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Callback Function for Elastic Email API Response in NodeJS\nDESCRIPTION: Creates a callback function to handle the API response, logging success or error messages.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/examples/functions/sendTransactionalEmails.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst callback = (error, data, response) => {\n    if (error) {\n        console.error(error);\n    } else {\n        console.log('API called successfully.');\n        console.log('Email sent.');\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Creating TemplatesApi Instance for Elastic Email\nDESCRIPTION: Initializes an instance of TemplatesApi, which provides methods for interacting with templates, including deletion.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/examples/functions/deleteTemplate.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst templatesApi = new ElasticEmail.TemplatesApi();\n```\n\n----------------------------------------\n\nTITLE: Fetching Multiple Campaigns Statistics in ElasticEmail API using JavaScript\nDESCRIPTION: This snippet shows how to retrieve statistics for multiple campaigns using the ElasticEmail API. It supports optional parameters for limiting and offsetting results.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/StatisticsApi.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport ElasticEmail from '@elasticemail/elasticemail-client';\nlet defaultClient = ElasticEmail.ApiClient.instance;\n// Configure API key authorization: apikey\nlet apikey = defaultClient.authentications['apikey'];\napikey.apiKey = 'YOUR API KEY';\n// Uncomment the following line to set a prefix for the API key, e.g. \"Token\" (defaults to null)\n//apikey.apiKeyPrefix = 'Token';\n\nlet apiInstance = new ElasticEmail.StatisticsApi();\nlet opts = {\n  'limit': 100, // Number | Maximum number of returned items.\n  'offset': 20 // Number | How many items should be returned ahead.\n};\napiInstance.statisticsCampaignsGet(opts, (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Exporting Contacts with ElasticEmail API in JavaScript\nDESCRIPTION: This snippet shows how to request an export of specified contacts using the ElasticEmail API. It requires the Export access level. The example demonstrates API client configuration, authentication setup, and calling the contactsExportPost method with optional filtering parameters.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/ContactsApi.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport ElasticEmail from '@elasticemail/elasticemail-client';\nlet defaultClient = ElasticEmail.ApiClient.instance;\n// Configure API key authorization: apikey\nlet apikey = defaultClient.authentications['apikey'];\napikey.apiKey = 'YOUR API KEY';\n// Uncomment the following line to set a prefix for the API key, e.g. \"Token\" (defaults to null)\n//apikey.apiKeyPrefix = 'Token';\n\nlet apiInstance = new ElasticEmail.ContactsApi();\nlet opts = {\n  'fileFormat': new ElasticEmail.ExportFileFormats(), // ExportFileFormats | Format of the exported file\n  'rule': \"Status%20=%20Engaged\", // String | Query used for filtering.\n  'emails': [\"null\"], // [String] | Comma delimited list of contact emails\n  'compressionFormat': new ElasticEmail.CompressionFormat(), // CompressionFormat | FileResponse compression format. None or Zip.\n  'fileName': \"filename.txt\" // String | Name of your file including extension.\n};\napiInstance.contactsExportPost(opts, (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Default Email Sender with ElasticEmail Domain API in JavaScript\nDESCRIPTION: This code shows how to set a verified email address as the default sender. It requires ModifySettings access level and uses the PATCH HTTP method with an email parameter, returning detailed domain data in the response.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/DomainsApi.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport ElasticEmail from '@elasticemail/elasticemail-client';\nlet defaultClient = ElasticEmail.ApiClient.instance;\n// Configure API key authorization: apikey\nlet apikey = defaultClient.authentications['apikey'];\napikey.apiKey = 'YOUR API KEY';\n// Uncomment the following line to set a prefix for the API key, e.g. \"Token\" (defaults to null)\n//apikey.apiKeyPrefix = 'Token';\n\nlet apiInstance = new ElasticEmail.DomainsApi();\nlet email = \"email_example\"; // String | Default email sender, example: mail@yourdomain.com\napiInstance.domainsByEmailDefaultPatch(email, (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Loading API Key Information with ElasticEmail JavaScript Client\nDESCRIPTION: Example of how to load information about an existing ApiKey using the ElasticEmail JavaScript client. This method requires Security access level and returns details about the specified API key.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/SecurityApi.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport ElasticEmail from '@elasticemail/elasticemail-client';\nlet defaultClient = ElasticEmail.ApiClient.instance;\n// Configure API key authorization: apikey\nlet apikey = defaultClient.authentications['apikey'];\napikey.apiKey = 'YOUR API KEY';\n// Uncomment the following line to set a prefix for the API key, e.g. \"Token\" (defaults to null)\n//apikey.apiKeyPrefix = 'Token';\n\nlet apiInstance = new ElasticEmail.SecurityApi();\nlet name = \"name_example\"; // String | Name of the ApiKey\nlet opts = {\n  'subaccount': \"subaccount_example\" // String | Email of the subaccount of which ApiKey should be loaded\n};\napiInstance.securityApikeysByNameGet(name, opts, (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Loading All Domains with ElasticEmail Domain API in JavaScript\nDESCRIPTION: This code demonstrates how to retrieve a list of all domains configured for an ElasticEmail account. It requires ViewSettings access level and uses the GET HTTP method, returning an array of domain details in the response.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/DomainsApi.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport ElasticEmail from '@elasticemail/elasticemail-client';\nlet defaultClient = ElasticEmail.ApiClient.instance;\n// Configure API key authorization: apikey\nlet apikey = defaultClient.authentications['apikey'];\napikey.apiKey = 'YOUR API KEY';\n// Uncomment the following line to set a prefix for the API key, e.g. \"Token\" (defaults to null)\n//apikey.apiKeyPrefix = 'Token';\n\nlet apiInstance = new ElasticEmail.DomainsApi();\napiInstance.domainsGet((error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Complete Elastic Email Statistics Fetching Script in NodeJS\nDESCRIPTION: The entire script for loading Elastic Email delivery statistics, including library initialization, API key setup, date range specification, and API call.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/examples/functions/loadStatistics.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst ElasticEmail = require('@elasticemail/elasticemail-client');\n\nconst client = ElasticEmail.ApiClient.instance;\n\nconst apikey = client.authentications['apikey'];\napikey.apiKey = \"YOUR_API_KEY\";\n\nconst statisticsApi = new ElasticEmail.StatisticsApi();\nconst fromDate = new Date('2022-01-17').toJSON();\nconst toDate = new Date('2022-04-17').toJSON();\nconst options = {\n    to: toDate\n};\n\nconst callback = (error, data, response) => {\n    if (error) {\n        console.error(error);\n    } else {\n        console.log('API called successfully.');\n        console.log(JSON.stringify(data));\n    }\n};\nstatisticsApi.statisticsGet(fromDate, options, callback);\n```\n\n----------------------------------------\n\nTITLE: Calling API to Retrieve Template Details in NodeJS\nDESCRIPTION: This snippet demonstrates how to call the templatesByNameGet method from the TemplatesApi to load the specified template details.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/examples/functions/loadTemplate.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ntemplatesApi.templatesByNameGet(templateName, callback);\n```\n\n----------------------------------------\n\nTITLE: Setting Contact List Options\nDESCRIPTION: Specifies the list name where contacts will be added\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/examples/functions/addContacts.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst options = {\n    listnames: [\"New list\"]\n};\n```\n\n----------------------------------------\n\nTITLE: Send Bulk Emails with CSV Implementation in ElasticEmail JS Client\nDESCRIPTION: Example code for sending bulk emails using a CSV file. The CSV must include email addresses in the first column and can contain additional merge fields.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/EmailsApi.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport ElasticEmail from '@elasticemail/elasticemail-client';\nlet defaultClient = ElasticEmail.ApiClient.instance;\n// Configure API key authorization: apikey\nlet apikey = defaultClient.authentications['apikey'];\napikey.apiKey = 'YOUR API KEY';\n// Uncomment the following line to set a prefix for the API key, e.g. \"Token\" (defaults to null)\n//apikey.apiKeyPrefix = 'Token';\n\nlet apiInstance = new ElasticEmail.EmailsApi();\nlet mergeEmailPayload = new ElasticEmail.MergeEmailPayload(); // Email data\napiInstance.emailsMergefilePost(mergeEmailPayload, (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Lists using ElasticEmail API in JavaScript\nDESCRIPTION: This snippet demonstrates how to retrieve lists using the ElasticEmail API. It configures the API client with an API key, sets optional parameters for limit and offset, and makes a GET request to the lists endpoint.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/ListsApi.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport ElasticEmail from '@elasticemail/elasticemail-client';\nlet defaultClient = ElasticEmail.ApiClient.instance;\n// Configure API key authorization: apikey\nlet apikey = defaultClient.authentications['apikey'];\napikey.apiKey = 'YOUR API KEY';\n// Uncomment the following line to set a prefix for the API key, e.g. \"Token\" (defaults to null)\n//apikey.apiKeyPrefix = 'Token';\n\nlet apiInstance = new ElasticEmail.ListsApi();\nlet opts = {\n  'limit': 100, // Number | Maximum number of returned items.\n  'offset': 20 // Number | How many items should be returned ahead.\n};\napiInstance.listsGet(opts, (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Adding a New Template with ElasticEmail API in JavaScript\nDESCRIPTION: Demonstrates how to create a new email template using the Elastic Email API. Requires ModifyTemplates access level and uses API key authentication.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/TemplatesApi.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport ElasticEmail from '@elasticemail/elasticemail-client';\nlet defaultClient = ElasticEmail.ApiClient.instance;\n// Configure API key authorization: apikey\nlet apikey = defaultClient.authentications['apikey'];\napikey.apiKey = 'YOUR API KEY';\n// Uncomment the following line to set a prefix for the API key, e.g. \"Token\" (defaults to null)\n//apikey.apiKeyPrefix = 'Token';\n\nlet apiInstance = new ElasticEmail.TemplatesApi();\nlet templatePayload = new ElasticEmail.TemplatePayload(); // TemplatePayload | \napiInstance.templatesPost(templatePayload, (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Loading Channel Events with ElasticEmail JavaScript SDK\nDESCRIPTION: This code demonstrates how to retrieve delivery events for a specific channel. It includes optional parameters for filtering by event types, date range, sorting, and pagination.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/EventsApi.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport ElasticEmail from '@elasticemail/elasticemail-client';\nlet defaultClient = ElasticEmail.ApiClient.instance;\n// Configure API key authorization: apikey\nlet apikey = defaultClient.authentications['apikey'];\napikey.apiKey = 'YOUR API KEY';\n// Uncomment the following line to set a prefix for the API key, e.g. \"Token\" (defaults to null)\n//apikey.apiKeyPrefix = 'Token';\n\nlet apiInstance = new ElasticEmail.EventsApi();\nlet name = \"Channel01\"; // String | Name of selected channel.\nlet opts = {\n  'eventTypes': [new ElasticEmail.EventType()], // [EventType] | Types of Events to return\n  'from': new Date(\"2013-10-20T19:20:30+01:00\"), // Date | Starting date for search in YYYY-MM-DDThh:mm:ss format.\n  'to': new Date(\"2013-10-20T19:20:30+01:00\"), // Date | Ending date for search in YYYY-MM-DDThh:mm:ss format.\n  'orderBy': new ElasticEmail.EventsOrderBy(), // EventsOrderBy | \n  'limit': 56, // Number | How many items to load. Maximum for this request is 1000 items\n  'offset': 20 // Number | How many items should be returned ahead.\n};\napiInstance.eventsChannelsByNameGet(name, opts, (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Define Template Configuration\nDESCRIPTION: Creates a template object with name, subject, HTML body content, and scope settings\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/examples/functions/addTemplate.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst template = {\n    Name: 'My new template',\n    Subject: 'Default subject',\n    Body: [{\n        ContentType: 'HTML',\n        Charset: 'utf-8',\n        Content: 'My template'\n    }],\n    TemplateScope: 'Personal',\n};\n```\n\n----------------------------------------\n\nTITLE: Complete Contact Import Script in NodeJS\nDESCRIPTION: This snippet provides the complete script for importing contacts from a CSV file using the Elastic Email API in NodeJS, including all necessary setup and the API call.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/examples/functions/uploadContacts.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst ElasticEmail = require('@elasticemail/elasticemail-client');\n\nconst client = ElasticEmail.ApiClient.instance;\n\nconst apikey = client.authentications['apikey'];\napikey.apiKey = \"YOUR_API_KEY\";\n\nconst fs = require('fs');\nconst contactsApi = new ElasticEmail.ContactsApi()\n\nconst readStream = fs.createReadStream('./files/contacts.csv');\n\nconst options = {\n    listName: \"New list\",\n    encodingName: 'utf-8',\n    file: readStream,\n};\n\n\nconst callback = (error, data, response) => {\n    if (error) {\n        console.error(error);\n    } else {\n        console.log('API called successfully.');\n        console.log('Contacts added.');\n    }\n};\ncontactsApi.contactsImportPost(options, callback);\n```\n\n----------------------------------------\n\nTITLE: Updating a Segment using ElasticEmail API in JavaScript\nDESCRIPTION: This snippet demonstrates how to rename or change the RULE for a segment using the ElasticEmail API. It requires the ModifyContacts access level and uses the segment name and a payload as parameters.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/SegmentsApi.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport ElasticEmail from '@elasticemail/elasticemail-client';\nlet defaultClient = ElasticEmail.ApiClient.instance;\n// Configure API key authorization: apikey\nlet apikey = defaultClient.authentications['apikey'];\napikey.apiKey = 'YOUR API KEY';\n// Uncomment the following line to set a prefix for the API key, e.g. \"Token\" (defaults to null)\n//apikey.apiKeyPrefix = 'Token';\n\nlet apiInstance = new ElasticEmail.SegmentsApi();\nlet name = \"My Segment 1\"; // String | Name of your segment.\nlet segmentPayload = new ElasticEmail.SegmentPayload(); // SegmentPayload | \napiInstance.segmentsByNamePut(name, segmentPayload, (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Deleting a File with ElasticEmail FilesApi in JavaScript\nDESCRIPTION: This snippet demonstrates how to delete a file using the ElasticEmail FilesApi. It requires the ModifyFiles access level and uses the filesByNameDelete method.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/FilesApi.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport ElasticEmail from '@elasticemail/elasticemail-client';\nlet defaultClient = ElasticEmail.ApiClient.instance;\n// Configure API key authorization: apikey\nlet apikey = defaultClient.authentications['apikey'];\napikey.apiKey = 'YOUR API KEY';\n// Uncomment the following line to set a prefix for the API key, e.g. \"Token\" (defaults to null)\n//apikey.apiKeyPrefix = 'Token';\n\nlet apiInstance = new ElasticEmail.FilesApi();\nlet name = \"filename.txt\"; // String | Name of your file including extension.\napiInstance.filesByNameDelete(name, (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Contact Data\nDESCRIPTION: Creates an array of contact objects with email and personal information\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/examples/functions/addContacts.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst contacts = [{\n    Email: \"johnsmith@domain.com\",\n    FirstName: \"John\",\n    LastName: \"Smith\"\n}];\n```\n\n----------------------------------------\n\nTITLE: Define Response Callback\nDESCRIPTION: Creates a callback function to handle the API response and error cases\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/examples/functions/addTemplate.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst callback = (error, data, response) => {\n    if (error) {\n        console.error(error);\n    } else {\n        console.log('API called successfully.');\n        console.log('Template name', data.Name);\n        console.log('Template type', data.TemplateType);\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Loading a Template with ElasticEmail API in JavaScript\nDESCRIPTION: Shows how to retrieve detailed information about a specific email template. Requires ViewTemplates access level and uses API key authentication.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/TemplatesApi.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport ElasticEmail from '@elasticemail/elasticemail-client';\nlet defaultClient = ElasticEmail.ApiClient.instance;\n// Configure API key authorization: apikey\nlet apikey = defaultClient.authentications['apikey'];\napikey.apiKey = 'YOUR API KEY';\n// Uncomment the following line to set a prefix for the API key, e.g. \"Token\" (defaults to null)\n//apikey.apiKeyPrefix = 'Token';\n\nlet apiInstance = new ElasticEmail.TemplatesApi();\nlet name = \"Template01\"; // String | Name of template.\napiInstance.templatesByNameGet(name, (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Defining NewApiKey Properties Schema in Markdown\nDESCRIPTION: Markdown table defining the properties, types, and descriptions for the NewApiKey model used in the ElasticEmail JavaScript SDK. Includes fields for authentication token, access levels, naming, timestamps, and IP restrictions.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/NewApiKey.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**token** | **String** | Unique token to be used in the system | [optional] \n**accessLevel** | **[AccessLevel]** | Access level or permission to be assigned to this ApiKey. | [optional] \n**name** | **String** | Name of the ApiKey. | [optional] \n**dateCreated** | **Date** | Date this ApiKey was created. | [optional] \n**lastUse** | **Date** | Date this ApiKey was last used. | [optional] \n**expires** | **Date** | Date this ApiKey expires. | [optional] \n**restrictAccessToIPRange** | **[String]** | Which IPs can use this ApiKey | [optional]\n```\n\n----------------------------------------\n\nTITLE: Loading Contacts in List using ElasticEmail JavaScript API\nDESCRIPTION: Makes an API call to retrieve contacts from a specified list with optional pagination parameters. Requires ViewContacts access level.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/ListsApi.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport ElasticEmail from '@elasticemail/elasticemail-client';\nlet defaultClient = ElasticEmail.ApiClient.instance;\n// Configure API key authorization: apikey\nlet apikey = defaultClient.authentications['apikey'];\napikey.apiKey = 'YOUR API KEY';\n// Uncomment the following line to set a prefix for the API key, e.g. \"Token\" (defaults to null)\n//apikey.apiKeyPrefix = 'Token';\n\nlet apiInstance = new ElasticEmail.ListsApi();\nlet listname = \"My List 1\"; // String | Name of your list.\nlet opts = {\n  'limit': 100, // Number | Maximum number of returned items.\n  'offset': 20 // Number | How many items should be returned ahead.\n};\napiInstance.listsByListnameContactsGet(listname, opts, (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Complete Campaign Update Implementation\nDESCRIPTION: Full implementation combining all components for updating an email campaign.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/examples/functions/updateCampaign.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst ElasticEmail = require('@elasticemail/elasticemail-client');\n\nconst client = ElasticEmail.ApiClient.instance;\n\nconst apikey = client.authentications['apikey'];\napikey.apiKey = \"YOUR_API_KEY\";\n\nconst campaignsApi = new ElasticEmail.CampaignsApi()\nconst campaignName = \"hello campaign\";\n\nconst callback = (error, data, response) => {\n    if (error) {\n        console.error(error);\n    } else {\n        console.log('API called successfully.');\n        console.log('Campaign deleted.');\n    }\n};\ncampaignsApi.campaignsByNameDelete(campaignName, callback);\n```\n\n----------------------------------------\n\nTITLE: Complete Implementation\nDESCRIPTION: Full code example combining all components for adding contacts to ElasticEmail\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/examples/functions/addContacts.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst ElasticEmail = require('@elasticemail/elasticemail-client');\n\nconst client = ElasticEmail.ApiClient.instance;\n\nconst ElasticEmail = require('@elasticemail/elasticemail-client');\n\nconst client = ElasticEmail.ApiClient.instance;\n\nconst apikey = client.authentications['apikey'];\napikey.apiKey = \"YOUR_API_KEY\";\n\nconst contactsApi = new ElasticEmail.ContactsApi()\nconst contacts = [{\n    Email: \"johnsmith@domain.com\",\n    FirstName: \"John\",\n    LastName: \"Smith\"\n}];\n\nconst options = {\n    listnames: [\"New list\"]\n};\n\nconst callback = (error, data, response) => {\n    if (error) {\n        console.error(error);\n    } else {\n        console.log('API called successfully.');\n        console.log('Contacts added.');\n    }\n};\ncontactsApi.contactsPost(contacts, options, callback);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Inbound Route Details with ElasticEmail API in JavaScript\nDESCRIPTION: Shows how to retrieve details of a specific inbound route by its ID using the ElasticEmail JavaScript client. Requires ViewSettings access level and returns an InboundRoute object.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/InboundRouteApi.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport ElasticEmail from '@elasticemail/elasticemail-client';\nlet defaultClient = ElasticEmail.ApiClient.instance;\n// Configure API key authorization: apikey\nlet apikey = defaultClient.authentications['apikey'];\napikey.apiKey = 'YOUR API KEY';\n// Uncomment the following line to set a prefix for the API key, e.g. \"Token\" (defaults to null)\n//apikey.apiKeyPrefix = 'Token';\n\nlet apiInstance = new ElasticEmail.InboundRouteApi();\nlet id = \"123456\"; // String | ID number of your attachment\napiInstance.inboundrouteByIdGet(id, (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Updating a Template in ElasticEmail API (JavaScript)\nDESCRIPTION: This endpoint updates a specific template. It uses a PUT request to the '/templates/{name}' endpoint.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/README.md#2025-04-22_snippet_30\n\nLANGUAGE: JavaScript\nCODE:\n```\nElasticEmail.TemplatesApi.templatesByNamePut\n```\n\n----------------------------------------\n\nTITLE: Calling Elastic Email API to Retrieve List Details in NodeJS\nDESCRIPTION: This snippet demonstrates how to call the listsByNameGet method of the ListsApi to retrieve details of a specific contact list.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/examples/functions/loadList.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nlistsApi.listsByNameGet(listName, callback);\n```\n\n----------------------------------------\n\nTITLE: Deleting File Verification Result in ElasticEmail API (JavaScript)\nDESCRIPTION: This endpoint deletes the verification result for a specific file. It uses a DELETE request to the '/verifications/files/{id}' endpoint.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/README.md#2025-04-22_snippet_36\n\nLANGUAGE: JavaScript\nCODE:\n```\nElasticEmail.VerificationsApi.verificationsFilesByIdDelete\n```\n\n----------------------------------------\n\nTITLE: Adding a New List using ElasticEmail API in JavaScript\nDESCRIPTION: This snippet shows how to add a new list using the ElasticEmail API. It configures the API client with an API key, creates a ListPayload object, and makes a POST request to the lists endpoint. This operation requires ModifyContacts access level.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/ListsApi.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport ElasticEmail from '@elasticemail/elasticemail-client';\nlet defaultClient = ElasticEmail.ApiClient.instance;\n// Configure API key authorization: apikey\nlet apikey = defaultClient.authentications['apikey'];\napikey.apiKey = 'YOUR API KEY';\n// Uncomment the following line to set a prefix for the API key, e.g. \"Token\" (defaults to null)\n//apikey.apiKeyPrefix = 'Token';\n\nlet apiInstance = new ElasticEmail.ListsApi();\nlet listPayload = new ElasticEmail.ListPayload(); // ListPayload | \napiInstance.listsPost(listPayload, (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Bounce List in ElasticEmail using JavaScript\nDESCRIPTION: Code example for retrieving a list of bounced emails with optional parameters for search, limit, and offset. Requires ViewContacts or ViewSuppressions access level.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/SuppressionsApi.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport ElasticEmail from '@elasticemail/elasticemail-client';\nlet defaultClient = ElasticEmail.ApiClient.instance;\n// Configure API key authorization: apikey\nlet apikey = defaultClient.authentications['apikey'];\napikey.apiKey = 'YOUR API KEY';\n// Uncomment the following line to set a prefix for the API key, e.g. \"Token\" (defaults to null)\n//apikey.apiKeyPrefix = 'Token';\n\nlet apiInstance = new ElasticEmail.SuppressionsApi();\nlet opts = {\n  'search': \"text\", // String | Text fragment used for searching.\n  'limit': 100, // Number | Maximum number of returned items.\n  'offset': 20 // Number | How many items should be returned ahead.\n};\napiInstance.suppressionsBouncesGet(opts, (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Detailed File Verification Results with Elastic Email API in JavaScript\nDESCRIPTION: Example of using the verificationsFilesByIdResultGet method to get detailed verification results for a file. Supports pagination with limit and offset parameters. Returns a VerificationFileResultDetails object with verification status and results. Requires the VerifyEmails access level.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/VerificationsApi.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport ElasticEmail from '@elasticemail/elasticemail-client';\nlet defaultClient = ElasticEmail.ApiClient.instance;\n// Configure API key authorization: apikey\nlet apikey = defaultClient.authentications['apikey'];\napikey.apiKey = 'YOUR API KEY';\n// Uncomment the following line to set a prefix for the API key, e.g. \"Token\" (defaults to null)\n//apikey.apiKeyPrefix = 'Token';\n\nlet apiInstance = new ElasticEmail.VerificationsApi();\nlet id = \"id_example\"; // String | ID of the Verification to display status of\nlet opts = {\n  'limit': 56, // Number | Maximum number of returned email verification results\n  'offset': 56 // Number | How many result items should be returned ahead\n};\napiInstance.verificationsFilesByIdResultGet(id, opts, (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Elastic Email Client in NodeJS\nDESCRIPTION: This snippet demonstrates how to load the Elastic Email library and initialize the API client instance. It also shows how to set up authentication using an API key.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/examples/functions/loadTemplate.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst ElasticEmail = require('@elasticemail/elasticemail-client');\n\nconst client = ElasticEmail.ApiClient.instance;\n\nconst apikey = client.authentications['apikey'];\napikey.apiKey = \"YOUR_API_KEY\";\n```\n\n----------------------------------------\n\nTITLE: Specifying Contacts for Deletion\nDESCRIPTION: Creates an object with an array of email addresses to be deleted from the contact list.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/examples/functions/deleteContact.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst contacts = {\n    Emails: [\"johnsmith@domain.com\"]\n};\n```\n\n----------------------------------------\n\nTITLE: Complete Script for Fetching Campaign Statistics with Elastic Email API in NodeJS\nDESCRIPTION: This is the full script that combines all previous snippets to initialize the API client, set up authentication, define options and callback, and make the API call to retrieve campaign statistics.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/examples/functions/loadCampaignsStats.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst ElasticEmail = require('@elasticemail/elasticemail-client');\n\nconst client = ElasticEmail.ApiClient.instance;\n\nconst apikey = client.authentications['apikey'];\napikey.apiKey = \"YOUR_API_KEY\";\n\nconst statisticsApi = new ElasticEmail.StatisticsApi();\nconst pageinationOptions = {\n    limit: 0,\n    offset: 0,\n};\nconst callback = (error, data, response) => {\n    if (error) {\n        console.error(error);\n    } else {\n        console.log('API called successfully.');\n        data.forEach((campaign) => {\n            console.log(JSON.stringify(campaign));\n        });\n    }\n};\nstatisticsApi.statisticsCampaignsGet(pageinationOptions, callback);\n```\n\n----------------------------------------\n\nTITLE: Fetching Elastic Email Statistics in NodeJS\nDESCRIPTION: Makes an API call to fetch statistics using the specified date range and callback function.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/examples/functions/loadStatistics.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nstatisticsApi.statisticsGet(fromDate, options, callback);\n```\n\n----------------------------------------\n\nTITLE: Creating EmailsApi Instance\nDESCRIPTION: Initializes the EmailsApi class for sending emails\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/examples/functions/sendBulkEmails.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst emailsApi = new ElasticEmail.EmailsApi();\n```\n\n----------------------------------------\n\nTITLE: Initializing Elastic Email API Client in Node.js\nDESCRIPTION: This snippet shows how to load the Elastic Email library, initialize the API client, and set up authentication using an API key.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/examples/functions/deleteCampaign.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst ElasticEmail = require('@elasticemail/elasticemail-client');\n\nconst client = ElasticEmail.ApiClient.instance;\n\nconst apikey = client.authentications['apikey'];\napikey.apiKey = \"YOUR_API_KEY\";\n```\n\n----------------------------------------\n\nTITLE: Load Campaign Details Using ElasticEmail API in JavaScript\nDESCRIPTION: Example of retrieving details for a specific campaign using the ElasticEmail API client. Requires ViewCampaigns access level and API key authentication.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/CampaignsApi.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport ElasticEmail from '@elasticemail/elasticemail-client';\nlet defaultClient = ElasticEmail.ApiClient.instance;\n// Configure API key authorization: apikey\nlet apikey = defaultClient.authentications['apikey'];\napikey.apiKey = 'YOUR API KEY';\n// Uncomment the following line to set a prefix for the API key, e.g. \"Token\" (defaults to null)\n//apikey.apiKeyPrefix = 'Token';\n\nlet apiInstance = new ElasticEmail.CampaignsApi();\nlet name = \"name_example\"; // String | Name of Campaign to get\napiInstance.campaignsByNameGet(name, (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving SubAccount Details in JavaScript\nDESCRIPTION: This snippet demonstrates how to retrieve details for a specified SubAccount using the ElasticEmail API. It requires the ViewSubAccounts access level and uses the subaccountsByEmailGet method.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/SubAccountsApi.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport ElasticEmail from '@elasticemail/elasticemail-client';\nlet defaultClient = ElasticEmail.ApiClient.instance;\n// Configure API key authorization: apikey\nlet apikey = defaultClient.authentications['apikey'];\napikey.apiKey = 'YOUR API KEY';\n// Uncomment the following line to set a prefix for the API key, e.g. \"Token\" (defaults to null)\n//apikey.apiKeyPrefix = 'Token';\n\nlet apiInstance = new ElasticEmail.SubAccountsApi();\nlet email = \"mail@example.com\"; // String | Email address of Sub-Account\napiInstance.subaccountsByEmailGet(email, (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing API Client\nDESCRIPTION: Gets an instance of the ElasticEmail API client\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/examples/functions/addContacts.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst client = ElasticEmail.ApiClient.instance;\n```\n\n----------------------------------------\n\nTITLE: Importing Bounces Asynchronously in ElasticEmail using JavaScript\nDESCRIPTION: Code example for adding bounce email addresses asynchronously by uploading a file. Requires ModifyContacts or ModifySuppressions access level.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/SuppressionsApi.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport ElasticEmail from '@elasticemail/elasticemail-client';\nlet defaultClient = ElasticEmail.ApiClient.instance;\n// Configure API key authorization: apikey\nlet apikey = defaultClient.authentications['apikey'];\napikey.apiKey = 'YOUR API KEY';\n// Uncomment the following line to set a prefix for the API key, e.g. \"Token\" (defaults to null)\n//apikey.apiKeyPrefix = 'Token';\n\nlet apiInstance = new ElasticEmail.SuppressionsApi();\nlet opts = {\n  'file': \"/path/to/file\" // File | \n};\napiInstance.suppressionsBouncesImportPost(opts, (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Verifying Domain with ElasticEmail Domain API in JavaScript\nDESCRIPTION: This code demonstrates how to verify that required DNS records exist for a specified domain. It requires ModifySettings access level and uses the PUT HTTP method with a tracking type parameter, returning domain data in the response.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/DomainsApi.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport ElasticEmail from '@elasticemail/elasticemail-client';\nlet defaultClient = ElasticEmail.ApiClient.instance;\n// Configure API key authorization: apikey\nlet apikey = defaultClient.authentications['apikey'];\napikey.apiKey = 'YOUR API KEY';\n// Uncomment the following line to set a prefix for the API key, e.g. \"Token\" (defaults to null)\n//apikey.apiKeyPrefix = 'Token';\n\nlet apiInstance = new ElasticEmail.DomainsApi();\nlet domain = \"domain_example\"; // String | Name of the given domain\nlet body = \"body_example\"; // String | Tracking type used in the Tracking verification\napiInstance.domainsByDomainVerificationPut(domain, body, (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Unsubscribes List Using JavaScript\nDESCRIPTION: Fetches the list of unsubscribed email addresses with search and pagination options. Requires ViewContacts and ViewSuppressions access levels.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/SuppressionsApi.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport ElasticEmail from '@elasticemail/elasticemail-client';\nlet defaultClient = ElasticEmail.ApiClient.instance;\nlet apikey = defaultClient.authentications['apikey'];\napikey.apiKey = 'YOUR API KEY';\n\nlet apiInstance = new ElasticEmail.SuppressionsApi();\nlet opts = {\n  'search': \"text\",\n  'limit': 100,\n  'offset': 20\n};\napiInstance.suppressionsUnsubscribesGet(opts, (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Campaign Configuration\nDESCRIPTION: Creates a campaign object with name, recipients, content details, and status settings.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/examples/functions/addCampaign.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst campaign = {\n    Name: 'hello campaign',\n    Recipients: {\n        ListNames: [\"my list name\"],\n        SegmentNames: null,\n    },\n    Content: [{\n        From: 'myemail@domain.com',\n        ReplyTo: 'myemail@domain.com',\n        TemplateName: \"hello_template\",\n        Subject: 'Hello'\n    }],\n    Status: \"Draft\"\n};\n```\n\n----------------------------------------\n\nTITLE: Creating New Inbound Routes with ElasticEmail API in JavaScript\nDESCRIPTION: Shows how to create a new inbound route using the ElasticEmail JavaScript client. Requires ModifySettings access level and accepts an InboundPayload object containing the route configuration.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/InboundRouteApi.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport ElasticEmail from '@elasticemail/elasticemail-client';\nlet defaultClient = ElasticEmail.ApiClient.instance;\n// Configure API key authorization: apikey\nlet apikey = defaultClient.authentications['apikey'];\napikey.apiKey = 'YOUR API KEY';\n// Uncomment the following line to set a prefix for the API key, e.g. \"Token\" (defaults to null)\n//apikey.apiKeyPrefix = 'Token';\n\nlet apiInstance = new ElasticEmail.InboundRouteApi();\nlet inboundPayload = new ElasticEmail.InboundPayload(); // InboundPayload | \napiInstance.inboundroutePost(inboundPayload, (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Updating API Keys with ElasticEmail JavaScript Client\nDESCRIPTION: Example of how to update an existing ApiKey using the ElasticEmail JavaScript client. This method requires Security access level and accepts the API key name and an ApiKeyPayload object containing the updated information.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/SecurityApi.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport ElasticEmail from '@elasticemail/elasticemail-client';\nlet defaultClient = ElasticEmail.ApiClient.instance;\n// Configure API key authorization: apikey\nlet apikey = defaultClient.authentications['apikey'];\napikey.apiKey = 'YOUR API KEY';\n// Uncomment the following line to set a prefix for the API key, e.g. \"Token\" (defaults to null)\n//apikey.apiKeyPrefix = 'Token';\n\nlet apiInstance = new ElasticEmail.SecurityApi();\nlet name = \"name_example\"; // String | Name of the ApiKey\nlet apiKeyPayload = new ElasticEmail.ApiKeyPayload(); // ApiKeyPayload | \napiInstance.securityApikeysByNamePut(name, apiKeyPayload, (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Listing API Keys with ElasticEmail JavaScript Client\nDESCRIPTION: Example of how to list all existing ApiKeys using the ElasticEmail JavaScript client. This method requires Security access level and can optionally filter API keys for a specific subaccount.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/SecurityApi.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport ElasticEmail from '@elasticemail/elasticemail-client';\nlet defaultClient = ElasticEmail.ApiClient.instance;\n// Configure API key authorization: apikey\nlet apikey = defaultClient.authentications['apikey'];\napikey.apiKey = 'YOUR API KEY';\n// Uncomment the following line to set a prefix for the API key, e.g. \"Token\" (defaults to null)\n//apikey.apiKeyPrefix = 'Token';\n\nlet apiInstance = new ElasticEmail.SecurityApi();\nlet opts = {\n  'subaccount': \"subaccount_example\" // String | Email of the subaccount of which ApiKeys should be loaded\n};\napiInstance.securityApikeysGet(opts, (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Specifying Date Range for Elastic Email Statistics in NodeJS\nDESCRIPTION: Sets up the date range for which statistics will be fetched. It includes a required 'from' date and an optional 'to' date.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/examples/functions/loadStatistics.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst fromDate = new Date('2022-01-17').toJSON();\nconst toDate = new Date('2022-04-17').toJSON();\nconst options = {\n    to: toDate\n};\n```\n\n----------------------------------------\n\nTITLE: Retrieving Suppressions List Using JavaScript\nDESCRIPTION: Fetches the complete suppressions list with optional pagination. Requires ViewContacts and ViewSuppressions access levels.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/SuppressionsApi.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport ElasticEmail from '@elasticemail/elasticemail-client';\nlet defaultClient = ElasticEmail.ApiClient.instance;\nlet apikey = defaultClient.authentications['apikey'];\napikey.apiKey = 'YOUR API KEY';\n\nlet apiInstance = new ElasticEmail.SuppressionsApi();\nlet opts = {\n  'limit': 100,\n  'offset': 20\n};\napiInstance.suppressionsGet(opts, (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Deleting API Keys with ElasticEmail JavaScript Client\nDESCRIPTION: Example of how to delete an existing ApiKey using the ElasticEmail JavaScript client. This method requires Security access level and accepts the API key name as a required parameter and subaccount email as an optional parameter.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/SecurityApi.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport ElasticEmail from '@elasticemail/elasticemail-client';\nlet defaultClient = ElasticEmail.ApiClient.instance;\n// Configure API key authorization: apikey\nlet apikey = defaultClient.authentications['apikey'];\napikey.apiKey = 'YOUR API KEY';\n// Uncomment the following line to set a prefix for the API key, e.g. \"Token\" (defaults to null)\n//apikey.apiKeyPrefix = 'Token';\n\nlet apiInstance = new ElasticEmail.SecurityApi();\nlet name = \"name_example\"; // String | Name of the ApiKey\nlet opts = {\n  'subaccount': \"subaccount_example\" // String | Email of the subaccount of which ApiKey should be deleted\n};\napiInstance.securityApikeysByNameDelete(name, opts, (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Export Options\nDESCRIPTION: Sets up export configuration including file format, target emails, and filename\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/examples/functions/exportContacts.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst options = {\n    fileFormat: 'Csv',\n    emails: [\"johnsmith@domain.com\"],\n    fileName: 'exported.csv'\n};\n```\n\n----------------------------------------\n\nTITLE: Loading Contact Information with ElasticEmail API in JavaScript\nDESCRIPTION: This snippet shows how to retrieve detailed contact information for a specific email address using the ElasticEmail API. It requires the ViewContacts access level. The example demonstrates API client configuration, authentication setup, and calling the contactsByEmailGet method.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/ContactsApi.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport ElasticEmail from '@elasticemail/elasticemail-client';\nlet defaultClient = ElasticEmail.ApiClient.instance;\n// Configure API key authorization: apikey\nlet apikey = defaultClient.authentications['apikey'];\napikey.apiKey = 'YOUR API KEY';\n// Uncomment the following line to set a prefix for the API key, e.g. \"Token\" (defaults to null)\n//apikey.apiKeyPrefix = 'Token';\n\nlet apiInstance = new ElasticEmail.ContactsApi();\nlet email = \"mail@example.com\"; // String | Proper email address.\napiInstance.contactsByEmailGet(email, (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Defining ChannelLogStatusSummary Properties in JavaScript\nDESCRIPTION: This code snippet defines the properties of the ChannelLogStatusSummary class. It includes various metrics such as channel name, number of recipients, email and SMS totals, delivery status counts, and engagement metrics. All properties are optional.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/ChannelLogStatusSummary.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n  channelName: String,\n  recipients: Number,\n  emailTotal: Number,\n  smsTotal: Number,\n  delivered: Number,\n  bounced: Number,\n  inProgress: Number,\n  opened: Number,\n  clicked: Number,\n  unsubscribed: Number,\n  complaints: Number,\n  inbound: Number,\n  manualCancel: Number,\n  notDelivered: Number\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing API Client\nDESCRIPTION: Gets an instance of the Elastic Email API client.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/examples/functions/addCampaign.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst client = ElasticEmail.ApiClient.instance;\n```\n\n----------------------------------------\n\nTITLE: Loading Email Events by Transaction ID with ElasticEmail JavaScript SDK\nDESCRIPTION: This code demonstrates how to retrieve delivery events for a specific transaction ID using the ElasticEmail JavaScript client. It includes authentication setup and optional parameters for filtering the results by date range and pagination.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/EventsApi.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport ElasticEmail from '@elasticemail/elasticemail-client';\nlet defaultClient = ElasticEmail.ApiClient.instance;\n// Configure API key authorization: apikey\nlet apikey = defaultClient.authentications['apikey'];\napikey.apiKey = 'YOUR API KEY';\n// Uncomment the following line to set a prefix for the API key, e.g. \"Token\" (defaults to null)\n//apikey.apiKeyPrefix = 'Token';\n\nlet apiInstance = new ElasticEmail.EventsApi();\nlet transactionid = \"TransactionID\"; // String | ID number of transaction\nlet opts = {\n  'from': new Date(\"2013-10-20T19:20:30+01:00\"), // Date | Starting date for search in YYYY-MM-DDThh:mm:ss format.\n  'to': new Date(\"2013-10-20T19:20:30+01:00\"), // Date | Ending date for search in YYYY-MM-DDThh:mm:ss format.\n  'orderBy': new ElasticEmail.EventsOrderBy(), // EventsOrderBy | \n  'limit': 100, // Number | Maximum number of returned items.\n  'offset': 20 // Number | How many items should be returned ahead.\n};\napiInstance.eventsByTransactionidGet(transactionid, opts, (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Loading Events in ElasticEmail Events API (JavaScript)\nDESCRIPTION: This snippet demonstrates how to use the eventsGet method to retrieve a log of delivery events. It allows filtering by event types, date range, and includes pagination options. API key authentication is required.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/EventsApi.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport ElasticEmail from '@elasticemail/elasticemail-client';\nlet defaultClient = ElasticEmail.ApiClient.instance;\n// Configure API key authorization: apikey\nlet apikey = defaultClient.authentications['apikey'];\napikey.apiKey = 'YOUR API KEY';\n// Uncomment the following line to set a prefix for the API key, e.g. \"Token\" (defaults to null)\n//apikey.apiKeyPrefix = 'Token';\n\nlet apiInstance = new ElasticEmail.EventsApi();\nlet opts = {\n  'eventTypes': [new ElasticEmail.EventType()], // [EventType] | Types of Events to return\n  'from': new Date(\"2013-10-20T19:20:30+01:00\"), // Date | Starting date for search in YYYY-MM-DDThh:mm:ss format.\n  'to': new Date(\"2013-10-20T19:20:30+01:00\"), // Date | Ending date for search in YYYY-MM-DDThh:mm:ss format.\n  'orderBy': new ElasticEmail.EventsOrderBy(), // EventsOrderBy | \n  'limit': 56, // Number | How many items to load. Maximum for this request is 1000 items\n  'offset': 20 // Number | How many items should be returned ahead.\n};\napiInstance.eventsGet(opts, (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Starting Email Verification in JavaScript\nDESCRIPTION: Demonstrates how to start a verification of a previously uploaded file with emails using the ElasticEmail API. Requires VerifyEmails access level.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/VerificationsApi.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport ElasticEmail from '@elasticemail/elasticemail-client';\nlet defaultClient = ElasticEmail.ApiClient.instance;\n// Configure API key authorization: apikey\nlet apikey = defaultClient.authentications['apikey'];\napikey.apiKey = 'YOUR API KEY';\n// Uncomment the following line to set a prefix for the API key, e.g. \"Token\" (defaults to null)\n//apikey.apiKeyPrefix = 'Token';\n\nlet apiInstance = new ElasticEmail.VerificationsApi();\nlet id = \"id_example\"; // String | File ID to start verification\napiInstance.verificationsFilesByIdVerificationPost(id, (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a New Template in ElasticEmail API (JavaScript)\nDESCRIPTION: This endpoint adds a new template. It uses a POST request to the '/templates' endpoint.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/README.md#2025-04-22_snippet_32\n\nLANGUAGE: JavaScript\nCODE:\n```\nElasticEmail.TemplatesApi.templatesPost\n```\n\n----------------------------------------\n\nTITLE: Checking Domain Restrictions with ElasticEmail Domain API in JavaScript\nDESCRIPTION: This code shows how to check if a domain is from a free provider or is restricted. It requires ViewSettings access level and uses the GET HTTP method, returning a boolean value indicating restriction status.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/DomainsApi.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport ElasticEmail from '@elasticemail/elasticemail-client';\nlet defaultClient = ElasticEmail.ApiClient.instance;\n// Configure API key authorization: apikey\nlet apikey = defaultClient.authentications['apikey'];\napikey.apiKey = 'YOUR API KEY';\n// Uncomment the following line to set a prefix for the API key, e.g. \"Token\" (defaults to null)\n//apikey.apiKeyPrefix = 'Token';\n\nlet apiInstance = new ElasticEmail.DomainsApi();\nlet domain = \"domain_example\"; // String | Name of the given domain\napiInstance.domainsByDomainRestrictedGet(domain, (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Elastic Email Client in NodeJS\nDESCRIPTION: Sets up the Elastic Email client and authenticates with an API key. This is required before making any API calls.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/examples/functions/loadStatistics.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst ElasticEmail = require('@elasticemail/elasticemail-client');\n\nconst client = ElasticEmail.ApiClient.instance;\n\nconst apikey = client.authentications['apikey'];\napikey.apiKey = \"YOUR_API_KEY\";\n```\n\n----------------------------------------\n\nTITLE: Executing Campaign Update\nDESCRIPTION: Makes the API call to update the campaign with the specified configuration.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/examples/functions/updateCampaign.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ncampaignsApi.campaignsByNamePut(campaignName, campaign, callback);\n```\n\n----------------------------------------\n\nTITLE: Deleting a Template in ElasticEmail API (JavaScript)\nDESCRIPTION: This endpoint deletes a specific template. It uses a DELETE request to the '/templates/{name}' endpoint.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/README.md#2025-04-22_snippet_28\n\nLANGUAGE: JavaScript\nCODE:\n```\nElasticEmail.TemplatesApi.templatesByNameDelete\n```\n\n----------------------------------------\n\nTITLE: ElasticEmail API Authentication Configuration\nDESCRIPTION: API key authentication configuration for the ElasticEmail SDK. Uses X-ElasticEmail-ApiKey header for authentication.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/README.md#2025-04-22_snippet_43\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n  \"type\": \"API key\",\n  \"apiKeyParameterName\": \"X-ElasticEmail-ApiKey\",\n  \"location\": \"HTTP header\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Segment using ElasticEmail API in JavaScript\nDESCRIPTION: This snippet shows how to load details for a specified segment using the ElasticEmail API. It requires the ViewContacts access level and uses the segment name as a parameter.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/SegmentsApi.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport ElasticEmail from '@elasticemail/elasticemail-client';\nlet defaultClient = ElasticEmail.ApiClient.instance;\n// Configure API key authorization: apikey\nlet apikey = defaultClient.authentications['apikey'];\napikey.apiKey = 'YOUR API KEY';\n// Uncomment the following line to set a prefix for the API key, e.g. \"Token\" (defaults to null)\n//apikey.apiKeyPrefix = 'Token';\n\nlet apiInstance = new ElasticEmail.SegmentsApi();\nlet name = \"name_example\"; // String | Name of the segment you want to load. Will load all contacts if the 'All Contacts' name has been provided\napiInstance.segmentsByNameGet(name, (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Complete Delete List Implementation\nDESCRIPTION: Full code implementation combining all steps to delete a contact list\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/examples/functions/deleteList.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst ElasticEmail = require('@elasticemail/elasticemail-client');\n\nconst client = ElasticEmail.ApiClient.instance;\n\nconst apikey = client.authentications['apikey'];\napikey.apiKey = \"YOUR_API_KEY\";\n\nconst listsApi = new ElasticEmail.ListsApi();\nconst listName = 'Best contacts';\n\nconst callback = (error, data, response) => {\n    if (error) {\n        console.error(error);\n    } else {\n        console.log('API called successfully.');\n        console.log('List deleted');\n    }\n};\nlistsApi.listsByNameDelete(listName, callback);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Email Verification Results in JavaScript\nDESCRIPTION: Shows how to get results of all verified single emails using the ElasticEmail API. Requires VerifyEmails access level. Supports pagination with limit and offset parameters.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/VerificationsApi.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport ElasticEmail from '@elasticemail/elasticemail-client';\nlet defaultClient = ElasticEmail.ApiClient.instance;\n// Configure API key authorization: apikey\nlet apikey = defaultClient.authentications['apikey'];\napikey.apiKey = 'YOUR API KEY';\n// Uncomment the following line to set a prefix for the API key, e.g. \"Token\" (defaults to null)\n//apikey.apiKeyPrefix = 'Token';\n\nlet apiInstance = new ElasticEmail.VerificationsApi();\nlet opts = {\n  'limit': 100, // Number | Maximum number of returned items.\n  'offset': 20 // Number | How many items should be returned ahead.\n};\napiInstance.verificationsGet(opts, (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Defining ListPayload Properties in ElasticEmail JS SDK\nDESCRIPTION: Documentation of the ListPayload model properties used for managing email lists in the ElasticEmail API. It includes required property 'listName' for naming the list, and optional properties 'allowUnsubscribe' for controlling unsubscribe functionality and 'emails' for specifying contacts to add to the list.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/ListPayload.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# ElasticEmail.ListPayload\n\n## Properties\n\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**listName** | **String** | Name of your list. | \n**allowUnsubscribe** | **Boolean** | True: Allow unsubscribing from this list. Otherwise, false | [optional] \n**emails** | **[String]** | Comma delimited list of existing contact emails that should be added to this list. Leave empty for all contacts | [optional]\n```\n\n----------------------------------------\n\nTITLE: Creating CampaignsApi Instance\nDESCRIPTION: Initializes an instance of the CampaignsApi class for interacting with campaign-related endpoints.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/examples/functions/loadCampaign.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst campaignsApi = new ElasticEmail.CampaignsApi()\n```\n\n----------------------------------------\n\nTITLE: Defining Callback Function for Elastic Email API Response in NodeJS\nDESCRIPTION: This snippet shows how to create a callback function that handles the API response, including error handling and logging of successful results.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/examples/functions/loadList.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst callback = (error, data, response) => {\n    if (error) {\n        console.error(error);\n    } else {\n        console.log('API called successfully.');\n        console.log('List loaded', data.ListName);\n        console.log('PublicListID', data.PublicListID);\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Adding New API Keys with ElasticEmail JavaScript Client\nDESCRIPTION: Example of how to add a new ApiKey using the ElasticEmail JavaScript client. This method requires Security access level and accepts an ApiKeyPayload object containing the new API key information.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/SecurityApi.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport ElasticEmail from '@elasticemail/elasticemail-client';\nlet defaultClient = ElasticEmail.ApiClient.instance;\n// Configure API key authorization: apikey\nlet apikey = defaultClient.authentications['apikey'];\napikey.apiKey = 'YOUR API KEY';\n// Uncomment the following line to set a prefix for the API key, e.g. \"Token\" (defaults to null)\n//apikey.apiKeyPrefix = 'Token';\n\nlet apiInstance = new ElasticEmail.SecurityApi();\nlet apiKeyPayload = new ElasticEmail.ApiKeyPayload(); // ApiKeyPayload | \napiInstance.securityApikeysPost(apiKeyPayload, (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Delete Campaign Using ElasticEmail API in JavaScript\nDESCRIPTION: Example of deleting a specific campaign using the ElasticEmail API client. Requires ModifyCampaigns access level and API key authentication.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/CampaignsApi.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport ElasticEmail from '@elasticemail/elasticemail-client';\nlet defaultClient = ElasticEmail.ApiClient.instance;\n// Configure API key authorization: apikey\nlet apikey = defaultClient.authentications['apikey'];\napikey.apiKey = 'YOUR API KEY';\n// Uncomment the following line to set a prefix for the API key, e.g. \"Token\" (defaults to null)\n//apikey.apiKeyPrefix = 'Token';\n\nlet apiInstance = new ElasticEmail.CampaignsApi();\nlet name = \"name_example\"; // String | Name of Campaign to delete\napiInstance.campaignsByNameDelete(name, (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Deleting a Template with ElasticEmail API in JavaScript\nDESCRIPTION: Demonstrates how to delete an email template using the Elastic Email API. Requires ModifyTemplates access level and uses API key authentication.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/TemplatesApi.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport ElasticEmail from '@elasticemail/elasticemail-client';\nlet defaultClient = ElasticEmail.ApiClient.instance;\n// Configure API key authorization: apikey\nlet apikey = defaultClient.authentications['apikey'];\napikey.apiKey = 'YOUR API KEY';\n// Uncomment the following line to set a prefix for the API key, e.g. \"Token\" (defaults to null)\n//apikey.apiKeyPrefix = 'Token';\n\nlet apiInstance = new ElasticEmail.TemplatesApi();\nlet name = \"Template01\"; // String | Name of template.\napiInstance.templatesByNameDelete(name, (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Response Callback\nDESCRIPTION: Defines callback function to handle API response and error cases.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/examples/functions/addCampaign.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst callback = (error, data, response) => {\n    if (error) {\n        console.error(error);\n    } else {\n        console.log('API called successfully.');\n        console.log('Campaign name', data.Name);\n        console.log('Campaign status', data.Status);\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Retrieving Files Verification Results in JavaScript\nDESCRIPTION: Demonstrates how to get a list of uploaded files, their statuses, and results using the ElasticEmail API. Requires VerifyEmails access level.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/VerificationsApi.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport ElasticEmail from '@elasticemail/elasticemail-client';\nlet defaultClient = ElasticEmail.ApiClient.instance;\n// Configure API key authorization: apikey\nlet apikey = defaultClient.authentications['apikey'];\napikey.apiKey = 'YOUR API KEY';\n// Uncomment the following line to set a prefix for the API key, e.g. \"Token\" (defaults to null)\n//apikey.apiKeyPrefix = 'Token';\n\nlet apiInstance = new ElasticEmail.VerificationsApi();\napiInstance.verificationsFilesResultGet((error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Checking Channel Export Status with ElasticEmail JavaScript SDK\nDESCRIPTION: This code demonstrates how to check the current status of a channel events export using its ID. This endpoint requires Export access level permissions.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/EventsApi.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport ElasticEmail from '@elasticemail/elasticemail-client';\nlet defaultClient = ElasticEmail.ApiClient.instance;\n// Configure API key authorization: apikey\nlet apikey = defaultClient.authentications['apikey'];\napikey.apiKey = 'YOUR API KEY';\n// Uncomment the following line to set a prefix for the API key, e.g. \"Token\" (defaults to null)\n//apikey.apiKeyPrefix = 'Token';\n\nlet apiInstance = new ElasticEmail.EventsApi();\nlet id = \"E33EBA7A-C20D-4D3D-8F2F-5EEF42F58E6F\"; // String | ID of the exported file\napiInstance.eventsChannelsExportByIdStatusGet(id, (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Channel Statistics in ElasticEmail API using JavaScript\nDESCRIPTION: This snippet demonstrates how to fetch statistics for a specific channel using the ElasticEmail API. It requires the channel name and uses API key authentication.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/StatisticsApi.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport ElasticEmail from '@elasticemail/elasticemail-client';\nlet defaultClient = ElasticEmail.ApiClient.instance;\n// Configure API key authorization: apikey\nlet apikey = defaultClient.authentications['apikey'];\napikey.apiKey = 'YOUR API KEY';\n// Uncomment the following line to set a prefix for the API key, e.g. \"Token\" (defaults to null)\n//apikey.apiKeyPrefix = 'Token';\n\nlet apiInstance = new ElasticEmail.StatisticsApi();\nlet name = \"name_example\"; // String | The name of the channel to get.\napiInstance.statisticsChannelsByNameGet(name, (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Callback Function for API Response\nDESCRIPTION: Creates a callback function to handle the API response, logging success or error messages accordingly.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/examples/functions/deleteContact.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst callback = (error, data, response) => {\n    if (error) {\n        console.error(error);\n    } else {\n        console.log('API called successfully.');\n        console.log('Contacts deleted.');\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Configure API Authentication\nDESCRIPTION: Sets up API key authentication for the client\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/examples/functions/addTemplate.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst apikey = client.authentications['apikey'];\napikey.apiKey = \"YOUR_API_KEY\";\n```\n\n----------------------------------------\n\nTITLE: Listing Files with ElasticEmail FilesApi in JavaScript\nDESCRIPTION: This snippet shows how to list all available files using the ElasticEmail FilesApi. It requires the ViewFiles access level and uses the filesGet method with optional pagination parameters.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/FilesApi.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport ElasticEmail from '@elasticemail/elasticemail-client';\nlet defaultClient = ElasticEmail.ApiClient.instance;\n// Configure API key authorization: apikey\nlet apikey = defaultClient.authentications['apikey'];\napikey.apiKey = 'YOUR API KEY';\n// Uncomment the following line to set a prefix for the API key, e.g. \"Token\" (defaults to null)\n//apikey.apiKeyPrefix = 'Token';\n\nlet apiInstance = new ElasticEmail.FilesApi();\nlet opts = {\n  'limit': 100, // Number | Maximum number of returned items.\n  'offset': 20 // Number | How many items should be returned ahead.\n};\napiInstance.filesGet(opts, (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Complaints Async to ElasticEmail Using JavaScript\nDESCRIPTION: Imports complaint emails asynchronously via file upload. Requires ModifyContacts and ModifySuppressions access levels. Accepts a file through multipart/form-data.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/SuppressionsApi.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport ElasticEmail from '@elasticemail/elasticemail-client';\nlet defaultClient = ElasticEmail.ApiClient.instance;\nlet apikey = defaultClient.authentications['apikey'];\napikey.apiKey = 'YOUR API KEY';\n\nlet apiInstance = new ElasticEmail.SuppressionsApi();\nlet opts = {\n  'file': \"/path/to/file\"\n};\napiInstance.suppressionsComplaintsImportPost(opts, (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Delete List\nDESCRIPTION: Executes the API call to delete the specified list\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/examples/functions/deleteList.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nlistsApi.listsByNameDelete(listName, callback);\n```\n\n----------------------------------------\n\nTITLE: Setting API Key for Elastic Email Authentication in NodeJS\nDESCRIPTION: Configures the API key for authentication with Elastic Email services.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/examples/functions/addList.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst apikey = client.authentications['apikey'];\napikey.apiKey = \"YOUR_API_KEY\";\n```\n\n----------------------------------------\n\nTITLE: Updating Inbound Route Order with ElasticEmail API in JavaScript\nDESCRIPTION: Demonstrates how to update the processing order of inbound routes using the ElasticEmail JavaScript client. Requires ViewSettings access level and accepts an array of SortOrderItem objects to specify the new ordering.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/InboundRouteApi.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport ElasticEmail from '@elasticemail/elasticemail-client';\nlet defaultClient = ElasticEmail.ApiClient.instance;\n// Configure API key authorization: apikey\nlet apikey = defaultClient.authentications['apikey'];\napikey.apiKey = 'YOUR API KEY';\n// Uncomment the following line to set a prefix for the API key, e.g. \"Token\" (defaults to null)\n//apikey.apiKeyPrefix = 'Token';\n\nlet apiInstance = new ElasticEmail.InboundRouteApi();\nlet sortOrderItem = [new ElasticEmail.SortOrderItem()]; // [SortOrderItem] | Change the ordering of inbound routes for when matching the inbound\napiInstance.inboundrouteOrderPut(sortOrderItem, (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Defining AccountStatusEnum in JavaScript for ElasticEmail SDK\nDESCRIPTION: This code snippet defines an enumeration for account statuses in the ElasticEmail JavaScript SDK. It includes four possible states: Disabled, UnderReview, NeverSignedIn, and Active. Each state is represented as a string value.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/AccountStatusEnum.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n# ElasticEmail.AccountStatusEnum\n\n## Enum\n\n\n* `Disabled` (value: `\"Disabled\"`)\n\n* `UnderReview` (value: `\"UnderReview\"`)\n\n* `NeverSignedIn` (value: `\"NeverSignedIn\"`)\n\n* `Active` (value: `\"Active\"`)\n```\n\n----------------------------------------\n\nTITLE: Creating Callback Function for Elastic Email API Response Handling\nDESCRIPTION: This snippet defines a callback function to handle the API response, logging success or error messages based on the outcome of the campaign deletion operation.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/examples/functions/deleteCampaign.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst callback = (error, data, response) => {\n    if (error) {\n        console.error(error);\n    } else {\n        console.log('API called successfully.');\n        console.log('Campaign deleted.');\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Retrieving Email Verification Results with Elastic Email API in JavaScript\nDESCRIPTION: Example of using the verificationsByEmailGet method to retrieve verification results for a specific email address. Returns an EmailValidationResult object with verification details. Requires the VerifyEmails access level.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/VerificationsApi.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport ElasticEmail from '@elasticemail/elasticemail-client';\nlet defaultClient = ElasticEmail.ApiClient.instance;\n// Configure API key authorization: apikey\nlet apikey = defaultClient.authentications['apikey'];\napikey.apiKey = 'YOUR API KEY';\n// Uncomment the following line to set a prefix for the API key, e.g. \"Token\" (defaults to null)\n//apikey.apiKeyPrefix = 'Token';\n\nlet apiInstance = new ElasticEmail.VerificationsApi();\nlet email = \"email_example\"; // String | Email address to view verification result of\napiInstance.verificationsByEmailGet(email, (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Loading Multiple Templates with ElasticEmail API in JavaScript\nDESCRIPTION: Shows how to retrieve a list of templates with optional filtering by template scope and type. Supports pagination with limit and offset parameters. Requires ViewTemplates access level.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/TemplatesApi.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport ElasticEmail from '@elasticemail/elasticemail-client';\nlet defaultClient = ElasticEmail.ApiClient.instance;\n// Configure API key authorization: apikey\nlet apikey = defaultClient.authentications['apikey'];\napikey.apiKey = 'YOUR API KEY';\n// Uncomment the following line to set a prefix for the API key, e.g. \"Token\" (defaults to null)\n//apikey.apiKeyPrefix = 'Token';\n\nlet apiInstance = new ElasticEmail.TemplatesApi();\nlet scopeType = [new ElasticEmail.TemplateScope()]; // [TemplateScope] | Return templates with specified scope only\nlet opts = {\n  'templateTypes': [new ElasticEmail.TemplateType()], // [TemplateType] | Return templates with specified type only\n  'limit': 100, // Number | Maximum number of returned items.\n  'offset': 20 // Number | How many items should be returned ahead.\n};\napiInstance.templatesGet(scopeType, opts, (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Deleting Email Verification Results with Elastic Email API in JavaScript\nDESCRIPTION: Example of using the verificationsByEmailDelete method to delete a verification result for a specific email address. Requires the VerifyEmails access level and an API key for authentication.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/VerificationsApi.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport ElasticEmail from '@elasticemail/elasticemail-client';\nlet defaultClient = ElasticEmail.ApiClient.instance;\n// Configure API key authorization: apikey\nlet apikey = defaultClient.authentications['apikey'];\napikey.apiKey = 'YOUR API KEY';\n// Uncomment the following line to set a prefix for the API key, e.g. \"Token\" (defaults to null)\n//apikey.apiKeyPrefix = 'Token';\n\nlet apiInstance = new ElasticEmail.VerificationsApi();\nlet email = \"email_example\"; // String | Email address to verification\napiInstance.verificationsByEmailDelete(email, (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating TemplatesApi Instance in NodeJS\nDESCRIPTION: This snippet shows how to create an instance of the TemplatesApi, which will be used to load template details.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/examples/functions/loadTemplate.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst templatesApi = new ElasticEmail.TemplatesApi();\n```\n\n----------------------------------------\n\nTITLE: Loading SMTP Credential Information with ElasticEmail JavaScript Client\nDESCRIPTION: Example of how to load information about existing SMTP Credentials using the ElasticEmail JavaScript client. This method requires Security access level and returns details about the specified SMTP credential.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/SecurityApi.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport ElasticEmail from '@elasticemail/elasticemail-client';\nlet defaultClient = ElasticEmail.ApiClient.instance;\n// Configure API key authorization: apikey\nlet apikey = defaultClient.authentications['apikey'];\napikey.apiKey = 'YOUR API KEY';\n// Uncomment the following line to set a prefix for the API key, e.g. \"Token\" (defaults to null)\n//apikey.apiKeyPrefix = 'Token';\n\nlet apiInstance = new ElasticEmail.SecurityApi();\nlet name = \"name_example\"; // String | Name of the SMTP Credential\nlet opts = {\n  'subaccount': \"subaccount_example\" // String | Email of the subaccount of which credential should be deleted\n};\napiInstance.securitySmtpByNameGet(name, opts, (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Defining DeliveryOptimizationType Enum for ElasticEmail\nDESCRIPTION: Defines an enumeration of possible delivery optimization strategies that can be used when sending emails through ElasticEmail. The options include None (no optimization), ToEngagedFirst (prioritizing engaged recipients), and ByOpenTime (timing based on historical open patterns).\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/DeliveryOptimizationType.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nNone = \"None\",\nToEngagedFirst = \"ToEngagedFirst\",\nByOpenTime = \"ByOpenTime\"\n```\n\n----------------------------------------\n\nTITLE: Adding Contacts to List using ElasticEmail JavaScript API\nDESCRIPTION: Makes an API call to add existing contacts to a specified list. Requires ModifyContacts access level.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/ListsApi.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport ElasticEmail from '@elasticemail/elasticemail-client';\nlet defaultClient = ElasticEmail.ApiClient.instance;\n// Configure API key authorization: apikey\nlet apikey = defaultClient.authentications['apikey'];\napikey.apiKey = 'YOUR API KEY';\n// Uncomment the following line to set a prefix for the API key, e.g. \"Token\" (defaults to null)\n//apikey.apiKeyPrefix = 'Token';\n\nlet apiInstance = new ElasticEmail.ListsApi();\nlet name = \"My List 1\"; // String | Name of your list.\nlet emailsPayload = new ElasticEmail.EmailsPayload(); // EmailsPayload | Provide either rule or a list of emails, not both.\napiInstance.listsByNameContactsPost(name, emailsPayload, (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating CampaignsApi Instance for Deleting Campaigns in Node.js\nDESCRIPTION: This snippet demonstrates how to create an instance of the CampaignsApi, which is used to interact with campaign-related endpoints in the Elastic Email API.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/examples/functions/deleteCampaign.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst campaignsApi = new ElasticEmail.CampaignsApi()\n```\n\n----------------------------------------\n\nTITLE: Initialize Lists API\nDESCRIPTION: Creates an instance of the Lists API client\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/examples/functions/deleteList.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst listsApi = new ElasticEmail.ListsApi();\n```\n\n----------------------------------------\n\nTITLE: Load All Campaigns Using ElasticEmail API in JavaScript\nDESCRIPTION: Example of retrieving a list of all campaigns using the ElasticEmail API client. Limited to 1000 results with optional search, offset and limit parameters. Requires ViewCampaigns access level.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/CampaignsApi.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport ElasticEmail from '@elasticemail/elasticemail-client';\nlet defaultClient = ElasticEmail.ApiClient.instance;\n// Configure API key authorization: apikey\nlet apikey = defaultClient.authentications['apikey'];\napikey.apiKey = 'YOUR API KEY';\n// Uncomment the following line to set a prefix for the API key, e.g. \"Token\" (defaults to null)\n//apikey.apiKeyPrefix = 'Token';\n\nlet apiInstance = new ElasticEmail.CampaignsApi();\nlet opts = {\n  'search': \"search_example\", // String | Text fragment used for searching in Campaign name (using the 'contains' rule)\n  'offset': 20, // Number | How many items should be returned ahead.\n  'limit': 100 // Number | Maximum number of returned items.\n};\napiInstance.campaignsGet(opts, (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving SubAccount Information in ElasticEmail API (JavaScript)\nDESCRIPTION: This endpoint fetches information for a specific subaccount. It uses a GET request to the '/subaccounts/{email}' endpoint.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/README.md#2025-04-22_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\nElasticEmail.SubAccountsApi.subaccountsByEmailGet\n```\n\n----------------------------------------\n\nTITLE: Defining Callback Function for Elastic Email API Response\nDESCRIPTION: Creates a callback function to handle the API response. It logs an error if the request fails, or a success message if the template is deleted successfully.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/examples/functions/deleteTemplate.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst callback = (error, data, response) => {\n    if (error) {\n        console.error(error);\n    } else {\n        console.log('API called successfully.');\n        console.log('Template deleted.');\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Initialize API Client\nDESCRIPTION: Gets an instance of the Elastic Email API client\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/examples/functions/addTemplate.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst client = ElasticEmail.ApiClient.instance;\n```\n\n----------------------------------------\n\nTITLE: Fetching Campaign Statistics with Elastic Email API in NodeJS\nDESCRIPTION: This snippet makes the API call to retrieve campaign statistics using the previously defined pagination options and callback function.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/examples/functions/loadCampaignsStats.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nstatisticsApi.statisticsCampaignsGet(pageinationOptions, callback);\n```\n\n----------------------------------------\n\nTITLE: Defining MessageCategoryEnum for ElasticEmail in JavaScript\nDESCRIPTION: This enum defines various message categories used in the ElasticEmail system. It includes statuses like Unknown, Spam, BlackListed, and various error conditions such as ConnectionProblem and DNSProblem.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/MessageCategoryEnum.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n# ElasticEmail.MessageCategoryEnum\n\n## Enum\n\n\n* `Unknown` (value: `\"Unknown\"`)\n\n* `Ignore` (value: `\"Ignore\"`)\n\n* `Spam` (value: `\"Spam\"`)\n\n* `BlackListed` (value: `\"BlackListed\"`)\n\n* `NoMailbox` (value: `\"NoMailbox\"`)\n\n* `GreyListed` (value: `\"GreyListed\"`)\n\n* `Throttled` (value: `\"Throttled\"`)\n\n* `Timeout` (value: `\"Timeout\"`)\n\n* `ConnectionProblem` (value: `\"ConnectionProblem\"`)\n\n* `SPFProblem` (value: `\"SPFProblem\"`)\n\n* `AccountProblem` (value: `\"AccountProblem\"`)\n\n* `DNSProblem` (value: `\"DNSProblem\"`)\n\n* `NotDeliveredCancelled` (value: `\"NotDeliveredCancelled\"`)\n\n* `CodeError` (value: `\"CodeError\"`)\n\n* `ManualCancel` (value: `\"ManualCancel\"`)\n\n* `ConnectionTerminated` (value: `\"ConnectionTerminated\"`)\n\n* `NotDelivered` (value: `\"NotDelivered\"`)\n```\n\n----------------------------------------\n\nTITLE: Deleting a Suppression in ElasticEmail using JavaScript\nDESCRIPTION: Code example for removing an email address from the suppression list. Requires ViewContacts or ViewSuppressions access level.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/SuppressionsApi.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport ElasticEmail from '@elasticemail/elasticemail-client';\nlet defaultClient = ElasticEmail.ApiClient.instance;\n// Configure API key authorization: apikey\nlet apikey = defaultClient.authentications['apikey'];\napikey.apiKey = 'YOUR API KEY';\n// Uncomment the following line to set a prefix for the API key, e.g. \"Token\" (defaults to null)\n//apikey.apiKeyPrefix = 'Token';\n\nlet apiInstance = new ElasticEmail.SuppressionsApi();\nlet email = \"mail@example.com\"; // String | Proper email address.\napiInstance.suppressionsByEmailDelete(email, (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Suppression in ElasticEmail API (JavaScript)\nDESCRIPTION: This endpoint fetches information for a specific suppression. It uses a GET request to the '/suppressions/{email}' endpoint.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/README.md#2025-04-22_snippet_20\n\nLANGUAGE: JavaScript\nCODE:\n```\nElasticEmail.SuppressionsApi.suppressionsByEmailGet\n```\n\n----------------------------------------\n\nTITLE: Deleting a Contact with ElasticEmail API in JavaScript\nDESCRIPTION: This snippet demonstrates how to delete a specific contact by email address using the ElasticEmail API. It requires the ModifyContacts access level. The example shows how to configure the API client, set up authentication, and call the contactsByEmailDelete method.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/ContactsApi.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport ElasticEmail from '@elasticemail/elasticemail-client';\nlet defaultClient = ElasticEmail.ApiClient.instance;\n// Configure API key authorization: apikey\nlet apikey = defaultClient.authentications['apikey'];\napikey.apiKey = 'YOUR API KEY';\n// Uncomment the following line to set a prefix for the API key, e.g. \"Token\" (defaults to null)\n//apikey.apiKeyPrefix = 'Token';\n\nlet apiInstance = new ElasticEmail.ContactsApi();\nlet email = \"mail@example.com\"; // String | Proper email address.\napiInstance.contactsByEmailDelete(email, (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Overall Channel Statistics in ElasticEmail API (JavaScript)\nDESCRIPTION: This endpoint fetches statistics for all channels. It uses a GET request to the '/statistics/channels' endpoint.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/README.md#2025-04-22_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nElasticEmail.StatisticsApi.statisticsChannelsGet\n```\n\n----------------------------------------\n\nTITLE: Checking Export Status with ElasticEmail API in JavaScript\nDESCRIPTION: This snippet demonstrates how to check the status of a contact export operation using the ElasticEmail API. It requires the Export access level. The example shows how to configure the API client, set up authentication, and call the contactsExportByIdStatusGet method with an export ID.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/ContactsApi.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport ElasticEmail from '@elasticemail/elasticemail-client';\nlet defaultClient = ElasticEmail.ApiClient.instance;\n// Configure API key authorization: apikey\nlet apikey = defaultClient.authentications['apikey'];\napikey.apiKey = 'YOUR API KEY';\n// Uncomment the following line to set a prefix for the API key, e.g. \"Token\" (defaults to null)\n//apikey.apiKeyPrefix = 'Token';\n\nlet apiInstance = new ElasticEmail.ContactsApi();\nlet id = \"E33EBA7A-C20D-4D3D-8F2F-5EEF42F58E6F\"; // String | ID of the exported file\napiInstance.contactsExportByIdStatusGet(id, (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: ElasticEmail ContactsList Properties Table\nDESCRIPTION: Markdown table defining the properties of the ContactsList model including property names, types, descriptions and optional status.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/ContactsList.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**listName** | **String** | Name of your list. | [optional] \n**publicListID** | **String** | ID code of list. Please note that this is different from the listid field. | [optional] \n**dateAdded** | **Date** | Date of creation in YYYY-MM-DDThh:ii:ss format | [optional] \n**allowUnsubscribe** | **Boolean** | True: Allow unsubscribing from this list. Otherwise, false | [optional]\n```\n\n----------------------------------------\n\nTITLE: Adding a New Segment using ElasticEmail API in JavaScript\nDESCRIPTION: This snippet demonstrates how to add a new segment based on a specified RULE using the ElasticEmail API. It requires the ModifyContacts access level and uses a segment payload as a parameter.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/SegmentsApi.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport ElasticEmail from '@elasticemail/elasticemail-client';\nlet defaultClient = ElasticEmail.ApiClient.instance;\n// Configure API key authorization: apikey\nlet apikey = defaultClient.authentications['apikey'];\napikey.apiKey = 'YOUR API KEY';\n// Uncomment the following line to set a prefix for the API key, e.g. \"Token\" (defaults to null)\n//apikey.apiKeyPrefix = 'Token';\n\nlet apiInstance = new ElasticEmail.SegmentsApi();\nlet segmentPayload = new ElasticEmail.SegmentPayload(); // SegmentPayload | \napiInstance.segmentsPost(segmentPayload, (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Starting File Verification in ElasticEmail API (JavaScript)\nDESCRIPTION: This endpoint initiates the verification process for a specific file. It uses a POST request to the '/verifications/files/{id}/verification' endpoint.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/README.md#2025-04-22_snippet_39\n\nLANGUAGE: JavaScript\nCODE:\n```\nElasticEmail.VerificationsApi.verificationsFilesByIdVerificationPost\n```\n\n----------------------------------------\n\nTITLE: Defining VerificationFileResultDetails Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the VerificationFileResultDetails class using a markdown table. It includes property names, types, descriptions, and optional notes.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/VerificationFileResultDetails.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# ElasticEmail.VerificationFileResultDetails\n\n## Properties\n\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\nverificationResult | [[EmailValidationResult]](EmailValidationResult.md) | Verification result's details | [optional] \nverificationID | **String** | Identifier of this verification result | [optional] \nfilename | **String** | Origin file name | [optional] \nverificationStatus | [VerificationStatus](VerificationStatus.md) |  | [optional] \nfileUploadResult | [FileUploadResult](FileUploadResult.md) |  | [optional] \ndateAdded | **Date** | Date of creation in YYYY-MM-DDThh:ii:ss format | [optional] \nsource | **String** | Origin file extension | [optional] \n```\n\n----------------------------------------\n\nTITLE: Creating EmailsApi Instance for Elastic Email in NodeJS\nDESCRIPTION: Initializes an instance of the EmailsApi class from the Elastic Email library.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/examples/functions/sendTransactionalEmails.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst emailsApi = new ElasticEmail.EmailsApi();\n```\n\n----------------------------------------\n\nTITLE: Retrieving Export Status in ElasticEmail Events API (JavaScript)\nDESCRIPTION: This snippet demonstrates how to use the eventsExportByIdStatusGet method to retrieve the status of an exported file. It requires an API key for authentication and the ID of the exported file.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/EventsApi.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport ElasticEmail from '@elasticemail/elasticemail-client';\nlet defaultClient = ElasticEmail.ApiClient.instance;\n// Configure API key authorization: apikey\nlet apikey = defaultClient.authentications['apikey'];\napikey.apiKey = 'YOUR API KEY';\n// Uncomment the following line to set a prefix for the API key, e.g. \"Token\" (defaults to null)\n//apikey.apiKeyPrefix = 'Token';\n\nlet apiInstance = new ElasticEmail.EventsApi();\nlet id = \"E33EBA7A-C20D-4D3D-8F2F-5EEF42F58E6F\"; // String | ID of the exported file\napiInstance.eventsExportByIdStatusGet(id, (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Elastic Email API Client in NodeJS\nDESCRIPTION: This snippet shows how to load the Elastic Email library, initialize the API client, and set up authentication using an API key.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/examples/functions/loadCampaignsStats.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst ElasticEmail = require('@elasticemail/elasticemail-client');\n\nconst client = ElasticEmail.ApiClient.instance;\n\nconst apikey = client.authentications['apikey'];\napikey.apiKey = \"YOUR_API_KEY\";\n```\n\n----------------------------------------\n\nTITLE: Updating Inbound Routes with ElasticEmail API in JavaScript\nDESCRIPTION: Demonstrates how to update an existing inbound route using the ElasticEmail JavaScript client. Requires ModifySettings access level and accepts an InboundPayload object containing the updated route configuration.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/InboundRouteApi.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport ElasticEmail from '@elasticemail/elasticemail-client';\nlet defaultClient = ElasticEmail.ApiClient.instance;\n// Configure API key authorization: apikey\nlet apikey = defaultClient.authentications['apikey'];\napikey.apiKey = 'YOUR API KEY';\n// Uncomment the following line to set a prefix for the API key, e.g. \"Token\" (defaults to null)\n//apikey.apiKeyPrefix = 'Token';\n\nlet apiInstance = new ElasticEmail.InboundRouteApi();\nlet id = \"id_example\"; // String | \nlet inboundPayload = new ElasticEmail.InboundPayload(); // InboundPayload | \napiInstance.inboundrouteByIdPut(id, inboundPayload, (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Bounces in ElasticEmail API (JavaScript)\nDESCRIPTION: This endpoint adds bounces to the suppression list. It uses a POST request to the '/suppressions/bounces' endpoint.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/README.md#2025-04-22_snippet_18\n\nLANGUAGE: JavaScript\nCODE:\n```\nElasticEmail.SuppressionsApi.suppressionsBouncesPost\n```\n\n----------------------------------------\n\nTITLE: Importing Elastic Email Client Library in NodeJS\nDESCRIPTION: Loads the Elastic Email client library for use in a NodeJS application.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/examples/functions/addList.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst ElasticEmail = require('@elasticemail/elasticemail-client');\n```\n\n----------------------------------------\n\nTITLE: Adding Direct Complaints to ElasticEmail Using JavaScript\nDESCRIPTION: Adds email addresses directly to the complaints list. Limited to 1000 emails per request. Requires ModifyContacts and ModifySuppressions access levels.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/SuppressionsApi.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport ElasticEmail from '@elasticemail/elasticemail-client';\nlet defaultClient = ElasticEmail.ApiClient.instance;\nlet apikey = defaultClient.authentications['apikey'];\napikey.apiKey = 'YOUR API KEY';\n\nlet apiInstance = new ElasticEmail.SuppressionsApi();\nlet requestBody = [\"null\"];\napiInstance.suppressionsComplaintsPost(requestBody, (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Pagination Options for Elastic Email API\nDESCRIPTION: Configures pagination options for the API request. Setting limit to 0 returns all available data.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/examples/functions/loadChannelsStats.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst pageinationOptions = {\n    limit: 0,\n    offset: 0,\n};\n```\n\n----------------------------------------\n\nTITLE: Retrieving Detailed File Verification Result in ElasticEmail API (JavaScript)\nDESCRIPTION: This endpoint fetches detailed verification results for a specific file. It uses a GET request to the '/verifications/files/{id}/result' endpoint.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/README.md#2025-04-22_snippet_38\n\nLANGUAGE: JavaScript\nCODE:\n```\nElasticEmail.VerificationsApi.verificationsFilesByIdResultGet\n```\n\n----------------------------------------\n\nTITLE: Deleting a Domain with ElasticEmail Domain API in JavaScript\nDESCRIPTION: This code demonstrates how to delete a configured domain from an ElasticEmail account. It requires ModifySettings access level and uses the DELETE HTTP method with the domain name as a parameter.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/DomainsApi.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport ElasticEmail from '@elasticemail/elasticemail-client';\nlet defaultClient = ElasticEmail.ApiClient.instance;\n// Configure API key authorization: apikey\nlet apikey = defaultClient.authentications['apikey'];\napikey.apiKey = 'YOUR API KEY';\n// Uncomment the following line to set a prefix for the API key, e.g. \"Token\" (defaults to null)\n//apikey.apiKeyPrefix = 'Token';\n\nlet apiInstance = new ElasticEmail.DomainsApi();\nlet domain = \"domain_example\"; // String | Name of the given domain\napiInstance.domainsByDomainDelete(domain, (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving All SubAccounts in JavaScript\nDESCRIPTION: This snippet demonstrates how to retrieve a list of all SubAccounts using the ElasticEmail API. It requires the ViewSubAccounts access level and uses the subaccountsGet method.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/SubAccountsApi.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport ElasticEmail from '@elasticemail/elasticemail-client';\nlet defaultClient = ElasticEmail.ApiClient.instance;\n// Configure API key authorization: apikey\nlet apikey = defaultClient.authentications['apikey'];\napikey.apiKey = 'YOUR API KEY';\n// Uncomment the following line to set a prefix for the API key, e.g. \"Token\" (defaults to null)\n//apikey.apiKeyPrefix = 'Token';\n\nlet apiInstance = new ElasticEmail.SubAccountsApi();\nlet opts = {\n  'limit': 100, // Number | Maximum number of returned items.\n  'offset': 20 // Number | How many items should be returned ahead.\n};\napiInstance.subaccountsGet(opts, (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Complaints Asynchronously in ElasticEmail API (JavaScript)\nDESCRIPTION: This endpoint adds complaints asynchronously. It uses a POST request to the '/suppressions/complaints/import' endpoint.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/README.md#2025-04-22_snippet_22\n\nLANGUAGE: JavaScript\nCODE:\n```\nElasticEmail.SuppressionsApi.suppressionsComplaintsImportPost\n```\n\n----------------------------------------\n\nTITLE: Retrieving Unsubscribes List in ElasticEmail API (JavaScript)\nDESCRIPTION: This endpoint fetches the list of unsubscribed emails. It uses a GET request to the '/suppressions/unsubscribes' endpoint.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/README.md#2025-04-22_snippet_25\n\nLANGUAGE: JavaScript\nCODE:\n```\nElasticEmail.SuppressionsApi.suppressionsUnsubscribesGet\n```\n\n----------------------------------------\n\nTITLE: Uploading File with Emails for Verification in JavaScript\nDESCRIPTION: Shows how to upload a CSV file containing a list of emails for verification using the ElasticEmail API. Requires an 'email' column in the CSV and VerifyEmails access level.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/VerificationsApi.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport ElasticEmail from '@elasticemail/elasticemail-client';\nlet defaultClient = ElasticEmail.ApiClient.instance;\n// Configure API key authorization: apikey\nlet apikey = defaultClient.authentications['apikey'];\napikey.apiKey = 'YOUR API KEY';\n// Uncomment the following line to set a prefix for the API key, e.g. \"Token\" (defaults to null)\n//apikey.apiKeyPrefix = 'Token';\n\nlet apiInstance = new ElasticEmail.VerificationsApi();\nlet opts = {\n  'file': \"/path/to/file\" // File | \n};\napiInstance.verificationsFilesPost(opts, (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Deleting a SubAccount in JavaScript\nDESCRIPTION: This snippet shows how to delete a specified SubAccount using the ElasticEmail API. It requires the ModifySubAccounts access level and uses the subaccountsByEmailDelete method.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/SubAccountsApi.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport ElasticEmail from '@elasticemail/elasticemail-client';\nlet defaultClient = ElasticEmail.ApiClient.instance;\n// Configure API key authorization: apikey\nlet apikey = defaultClient.authentications['apikey'];\napikey.apiKey = 'YOUR API KEY';\n// Uncomment the following line to set a prefix for the API key, e.g. \"Token\" (defaults to null)\n//apikey.apiKeyPrefix = 'Token';\n\nlet apiInstance = new ElasticEmail.SubAccountsApi();\nlet email = \"mail@example.com\"; // String | Email address of Sub-Account\napiInstance.subaccountsByEmailDelete(email, (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Unsubscribes Async to ElasticEmail Using JavaScript\nDESCRIPTION: Imports unsubscribed email addresses asynchronously via file upload. Requires ModifyContacts and ModifySuppressions access levels.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/SuppressionsApi.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport ElasticEmail from '@elasticemail/elasticemail-client';\nlet defaultClient = ElasticEmail.ApiClient.instance;\nlet apikey = defaultClient.authentications['apikey'];\napikey.apiKey = 'YOUR API KEY';\n\nlet apiInstance = new ElasticEmail.SuppressionsApi();\nlet opts = {\n  'file': \"/path/to/file\"\n};\napiInstance.suppressionsUnsubscribesImportPost(opts, (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Loading Elastic Email Library\nDESCRIPTION: Imports the Elastic Email client library for NodeJS\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/examples/functions/exportContacts.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst ElasticEmail = require('@elasticemail/elasticemail-client');\n```\n\n----------------------------------------\n\nTITLE: Deleting Email Verification Result in ElasticEmail API (JavaScript)\nDESCRIPTION: This endpoint deletes the verification result for a specific email. It uses a DELETE request to the '/verifications/{email}' endpoint.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/README.md#2025-04-22_snippet_33\n\nLANGUAGE: JavaScript\nCODE:\n```\nElasticEmail.VerificationsApi.verificationsByEmailDelete\n```\n\n----------------------------------------\n\nTITLE: Retrieving Overall Campaign Statistics in ElasticEmail API (JavaScript)\nDESCRIPTION: This endpoint fetches statistics for all campaigns. It uses a GET request to the '/statistics/campaigns' endpoint.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/README.md#2025-04-22_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nElasticEmail.StatisticsApi.statisticsCampaignsGet\n```\n\n----------------------------------------\n\nTITLE: Specifying Template Name for Deletion in Elastic Email\nDESCRIPTION: Sets the name of the template to be deleted. This name is used to identify the specific template in the API call.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/examples/functions/deleteTemplate.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst templateName = \"hello_template\";\n```\n\n----------------------------------------\n\nTITLE: Updating Domain with ElasticEmail Domain API in JavaScript\nDESCRIPTION: This code demonstrates how to update a specified domain in an ElasticEmail account. It requires ModifySettings access level and uses the PUT HTTP method with a domain update payload, returning detailed domain data in the response.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/DomainsApi.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport ElasticEmail from '@elasticemail/elasticemail-client';\nlet defaultClient = ElasticEmail.ApiClient.instance;\n// Configure API key authorization: apikey\nlet apikey = defaultClient.authentications['apikey'];\napikey.apiKey = 'YOUR API KEY';\n// Uncomment the following line to set a prefix for the API key, e.g. \"Token\" (defaults to null)\n//apikey.apiKeyPrefix = 'Token';\n\nlet apiInstance = new ElasticEmail.DomainsApi();\nlet domain = \"domain_example\"; // String | Name of the given domain\nlet domainUpdatePayload = new ElasticEmail.DomainUpdatePayload(); // DomainUpdatePayload | Updated Domain resource\napiInstance.domainsByDomainPut(domain, domainUpdatePayload, (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Contacts API Instance\nDESCRIPTION: Instantiates the ContactsApi class for handling contact operations\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/examples/functions/exportContacts.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst contactsApi = new ElasticEmail.ContactsApi();\n```\n\n----------------------------------------\n\nTITLE: Defining TrackingValidationStatus Enum in JavaScript for ElasticEmail SDK\nDESCRIPTION: This code snippet defines an enum called TrackingValidationStatus with four possible values: Validated, NotValidated, Invalid, and Broken. It is likely used to represent the status of tracking validation in the ElasticEmail system.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/TrackingValidationStatus.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n* `Validated` (value: `\"Validated\"`)\n\n* `NotValidated` (value: `\"NotValidated\"`)\n\n* `Invalid` (value: `\"Invalid\"`)\n\n* `Broken` (value: `\"Broken\"`)\n```\n\n----------------------------------------\n\nTITLE: Querying Campaign Statistics in ElasticEmail API (JavaScript)\nDESCRIPTION: This endpoint retrieves statistics for a specific campaign by name. It uses a GET request to the '/statistics/campaigns/{name}' endpoint.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/README.md#2025-04-22_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nElasticEmail.StatisticsApi.statisticsCampaignsByNameGet\n```\n\n----------------------------------------\n\nTITLE: Deleting SMTP Credentials with ElasticEmail JavaScript Client\nDESCRIPTION: Example of how to delete existing SMTP Credentials using the ElasticEmail JavaScript client. This method requires Security access level and accepts the credential name as a required parameter and subaccount email as an optional parameter.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/SecurityApi.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport ElasticEmail from '@elasticemail/elasticemail-client';\nlet defaultClient = ElasticEmail.ApiClient.instance;\n// Configure API key authorization: apikey\nlet apikey = defaultClient.authentications['apikey'];\napikey.apiKey = 'YOUR API KEY';\n// Uncomment the following line to set a prefix for the API key, e.g. \"Token\" (defaults to null)\n//apikey.apiKeyPrefix = 'Token';\n\nlet apiInstance = new ElasticEmail.SecurityApi();\nlet name = \"name_example\"; // String | Name of the SMTP Credential\nlet opts = {\n  'subaccount': \"subaccount_example\" // String | Email of the subaccount of which credential should be deleted\n};\napiInstance.securitySmtpByNameDelete(name, opts, (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Templates in ElasticEmail API (JavaScript)\nDESCRIPTION: This endpoint fetches all templates. It uses a GET request to the '/templates' endpoint.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/README.md#2025-04-22_snippet_31\n\nLANGUAGE: JavaScript\nCODE:\n```\nElasticEmail.TemplatesApi.templatesGet\n```\n\n----------------------------------------\n\nTITLE: Retrieving All SubAccounts in ElasticEmail API (JavaScript)\nDESCRIPTION: This endpoint fetches information for all subaccounts. It uses a GET request to the '/subaccounts' endpoint.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/README.md#2025-04-22_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\nElasticEmail.SubAccountsApi.subaccountsGet\n```\n\n----------------------------------------\n\nTITLE: Set List Name\nDESCRIPTION: Defines the name of the list to be deleted\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/examples/functions/deleteList.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst listName = 'Best contacts';\n```\n\n----------------------------------------\n\nTITLE: Pause Campaign Using ElasticEmail API in JavaScript\nDESCRIPTION: Example of pausing a specific campaign using the ElasticEmail API client, which cancels pending emails. Requires ModifyCampaigns access level and API key authentication.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/CampaignsApi.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport ElasticEmail from '@elasticemail/elasticemail-client';\nlet defaultClient = ElasticEmail.ApiClient.instance;\n// Configure API key authorization: apikey\nlet apikey = defaultClient.authentications['apikey'];\napikey.apiKey = 'YOUR API KEY';\n// Uncomment the following line to set a prefix for the API key, e.g. \"Token\" (defaults to null)\n//apikey.apiKeyPrefix = 'Token';\n\nlet apiInstance = new ElasticEmail.CampaignsApi();\nlet name = \"name_example\"; // String | Name of Campaign to pause\napiInstance.campaignsByNamePausePut(name, (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Modifying SubAccount Email Credits in ElasticEmail API (JavaScript)\nDESCRIPTION: This endpoint allows adding or subtracting email credits for a specific subaccount. It uses a PATCH request to the '/subaccounts/{email}/credits' endpoint.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/README.md#2025-04-22_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nElasticEmail.SubAccountsApi.subaccountsByEmailCreditsPatch\n```\n\n----------------------------------------\n\nTITLE: Retrieving Complaints List in ElasticEmail using JavaScript\nDESCRIPTION: Code example for retrieving a list of complaint email addresses with optional parameters for search, limit, and offset. Requires ViewContacts or ViewSuppressions access level.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/SuppressionsApi.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport ElasticEmail from '@elasticemail/elasticemail-client';\nlet defaultClient = ElasticEmail.ApiClient.instance;\n// Configure API key authorization: apikey\nlet apikey = defaultClient.authentications['apikey'];\napikey.apiKey = 'YOUR API KEY';\n// Uncomment the following line to set a prefix for the API key, e.g. \"Token\" (defaults to null)\n//apikey.apiKeyPrefix = 'Token';\n\nlet apiInstance = new ElasticEmail.SuppressionsApi();\nlet opts = {\n  'search': \"text\", // String | Text fragment used for searching.\n  'limit': 100, // Number | Maximum number of returned items.\n  'offset': 20 // Number | How many items should be returned ahead.\n};\napiInstance.suppressionsComplaintsGet(opts, (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Complaints List in ElasticEmail API (JavaScript)\nDESCRIPTION: This endpoint fetches the list of complaints. It uses a GET request to the '/suppressions/complaints' endpoint.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/README.md#2025-04-22_snippet_21\n\nLANGUAGE: JavaScript\nCODE:\n```\nElasticEmail.SuppressionsApi.suppressionsComplaintsGet\n```\n\n----------------------------------------\n\nTITLE: Importing Bounces Asynchronously in ElasticEmail API (JavaScript)\nDESCRIPTION: This endpoint adds bounces asynchronously. It uses a POST request to the '/suppressions/bounces/import' endpoint.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/README.md#2025-04-22_snippet_17\n\nLANGUAGE: JavaScript\nCODE:\n```\nElasticEmail.SuppressionsApi.suppressionsBouncesImportPost\n```\n\n----------------------------------------\n\nTITLE: Downloading File Verification Results with Elastic Email API in JavaScript\nDESCRIPTION: Example of using the verificationsFilesByIdResultDownloadGet method to download verification results as a ZIP file. This operation retrieves the complete verification results for a file in a compressed format. Requires the VerifyEmails access level.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/VerificationsApi.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport ElasticEmail from '@elasticemail/elasticemail-client';\nlet defaultClient = ElasticEmail.ApiClient.instance;\n// Configure API key authorization: apikey\nlet apikey = defaultClient.authentications['apikey'];\napikey.apiKey = 'YOUR API KEY';\n// Uncomment the following line to set a prefix for the API key, e.g. \"Token\" (defaults to null)\n//apikey.apiKeyPrefix = 'Token';\n\nlet apiInstance = new ElasticEmail.VerificationsApi();\nlet id = \"id_example\"; // String | Verification ID to download\napiInstance.verificationsFilesByIdResultDownloadGet(id, (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Adding SMTP Credential using ElasticEmail SecurityApi in JavaScript\nDESCRIPTION: This snippet illustrates how to add a new SMTP credential using the ElasticEmail SecurityApi. It sets up the API client, configures authentication, and calls the securitySmtpPost method with the new credential details.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/SecurityApi.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport ElasticEmail from '@elasticemail/elasticemail-client';\nlet defaultClient = ElasticEmail.ApiClient.instance;\n// Configure API key authorization: apikey\nlet apikey = defaultClient.authentications['apikey'];\napikey.apiKey = 'YOUR API KEY';\n// Uncomment the following line to set a prefix for the API key, e.g. \"Token\" (defaults to null)\n//apikey.apiKeyPrefix = 'Token';\n\nlet apiInstance = new ElasticEmail.SecurityApi();\nlet smtpCredentialsPayload = new ElasticEmail.SmtpCredentialsPayload(); // SmtpCredentialsPayload | \napiInstance.securitySmtpPost(smtpCredentialsPayload, (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Campaign Update Callback\nDESCRIPTION: Defines the callback function to handle the API response after updating the campaign.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/examples/functions/updateCampaign.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst callback = (error, data, response) => {\n    if (error) {\n        console.error(error);\n    } else {\n        console.log('API called successfully.');\n        console.log('Campaign name', data.Name);\n        console.log('Campaign status', data.Status);\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Suppression Record in ElasticEmail using JavaScript\nDESCRIPTION: Code example for retrieving details of a specific suppressed email address. Requires ViewContacts or ViewSuppressions access level.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/SuppressionsApi.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport ElasticEmail from '@elasticemail/elasticemail-client';\nlet defaultClient = ElasticEmail.ApiClient.instance;\n// Configure API key authorization: apikey\nlet apikey = defaultClient.authentications['apikey'];\napikey.apiKey = 'YOUR API KEY';\n// Uncomment the following line to set a prefix for the API key, e.g. \"Token\" (defaults to null)\n//apikey.apiKeyPrefix = 'Token';\n\nlet apiInstance = new ElasticEmail.SuppressionsApi();\nlet email = \"mail@example.com\"; // String | Proper email address.\napiInstance.suppressionsByEmailGet(email, (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Downloading a File with ElasticEmail FilesApi in JavaScript\nDESCRIPTION: This snippet shows how to download a file using the ElasticEmail FilesApi. It requires the ViewFiles access level and uses the filesByNameGet method.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/FilesApi.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport ElasticEmail from '@elasticemail/elasticemail-client';\nlet defaultClient = ElasticEmail.ApiClient.instance;\n// Configure API key authorization: apikey\nlet apikey = defaultClient.authentications['apikey'];\napikey.apiKey = 'YOUR API KEY';\n// Uncomment the following line to set a prefix for the API key, e.g. \"Token\" (defaults to null)\n//apikey.apiKeyPrefix = 'Token';\n\nlet apiInstance = new ElasticEmail.FilesApi();\nlet name = \"filename.txt\"; // String | Name of your file including extension.\napiInstance.filesByNameGet(name, (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving File Verification Results in ElasticEmail API (JavaScript)\nDESCRIPTION: This endpoint fetches verification results for all files. It uses a GET request to the '/verifications/files/result' endpoint.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/README.md#2025-04-22_snippet_41\n\nLANGUAGE: JavaScript\nCODE:\n```\nElasticEmail.VerificationsApi.verificationsFilesResultGet\n```\n\n----------------------------------------\n\nTITLE: Fetching Channel Statistics in ElasticEmail API (JavaScript)\nDESCRIPTION: This endpoint retrieves statistics for a specific channel by name. It uses a GET request to the '/statistics/channels/{name}' endpoint.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/README.md#2025-04-22_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nElasticEmail.StatisticsApi.statisticsChannelsByNameGet\n```\n\n----------------------------------------\n\nTITLE: Defining VerificationFileResult Properties in Markdown\nDESCRIPTION: This snippet outlines the properties of the VerificationFileResult class, including their types, descriptions, and optional status. It covers identifiers, file information, verification status, and timestamp details.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/VerificationFileResult.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# ElasticEmail.VerificationFileResult\n\n## Properties\n\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**verificationID** | **String** | Identifier of this verification result | [optional] \n**filename** | **String** | Origin file name | [optional] \n**verificationStatus** | [**VerificationStatus**](VerificationStatus.md) |  | [optional] \n**fileUploadResult** | [**FileUploadResult**](FileUploadResult.md) |  | [optional] \n**dateAdded** | **Date** | Date of creation in YYYY-MM-DDThh:ii:ss format | [optional] \n**source** | **String** | Origin file extension | [optional] \n```\n\n----------------------------------------\n\nTITLE: Deleting a Campaign using Elastic Email API in Node.js\nDESCRIPTION: This snippet demonstrates how to call the campaignsByNameDelete method from the CampaignsApi to delete a specified campaign.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/examples/functions/deleteCampaign.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ncampaignsApi.campaignsByNameDelete(campaignName, callback);\n```\n\n----------------------------------------\n\nTITLE: Defining EmailTransactionalMessageData Properties in Markdown\nDESCRIPTION: This markdown table defines the properties of the EmailTransactionalMessageData class, including property names, types, descriptions, and whether they are required or optional.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/EmailTransactionalMessageData.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**recipients** | [**TransactionalRecipient**](TransactionalRecipient.md) |  | \n**content** | [**EmailContent**](EmailContent.md) |  | \n**options** | [**Options**](Options.md) |  | [optional] \n```\n\n----------------------------------------\n\nTITLE: Importing Unsubscribes Asynchronously in ElasticEmail API (JavaScript)\nDESCRIPTION: This endpoint adds unsubscribes asynchronously. It uses a POST request to the '/suppressions/unsubscribes/import' endpoint.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/README.md#2025-04-22_snippet_26\n\nLANGUAGE: JavaScript\nCODE:\n```\nElasticEmail.SuppressionsApi.suppressionsUnsubscribesImportPost\n```\n\n----------------------------------------\n\nTITLE: Defining SplitOptimizationType Enum in ElasticEmail JavaScript API\nDESCRIPTION: Defines an enumeration for split testing optimization types in Elastic Email. The enum contains two possible values: 'Opens' for optimizing based on email open rates and 'Clicks' for optimizing based on link click rates.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/SplitOptimizationType.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n* `Opens` (value: `\"Opens\"`)\n\n* `Clicks` (value: `\"Clicks\"`)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Email Verification Result in ElasticEmail API (JavaScript)\nDESCRIPTION: This endpoint fetches the verification result for a specific email. It uses a GET request to the '/verifications/{email}' endpoint.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/README.md#2025-04-22_snippet_34\n\nLANGUAGE: JavaScript\nCODE:\n```\nElasticEmail.VerificationsApi.verificationsByEmailGet\n```\n\n----------------------------------------\n\nTITLE: Exporting Channel Events with ElasticEmail JavaScript SDK\nDESCRIPTION: This code demonstrates how to export delivery events for a specific channel to a file. It includes options for filtering by event types, date range, file format, and compression format.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/EventsApi.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport ElasticEmail from '@elasticemail/elasticemail-client';\nlet defaultClient = ElasticEmail.ApiClient.instance;\n// Configure API key authorization: apikey\nlet apikey = defaultClient.authentications['apikey'];\napikey.apiKey = 'YOUR API KEY';\n// Uncomment the following line to set a prefix for the API key, e.g. \"Token\" (defaults to null)\n//apikey.apiKeyPrefix = 'Token';\n\nlet apiInstance = new ElasticEmail.EventsApi();\nlet name = \"Channel01\"; // String | Name of selected channel.\nlet opts = {\n  'eventTypes': [new ElasticEmail.EventType()], // [EventType] | Types of Events to return\n  'from': new Date(\"2013-10-20T19:20:30+01:00\"), // Date | Starting date for search in YYYY-MM-DDThh:mm:ss format.\n  'to': new Date(\"2013-10-20T19:20:30+01:00\"), // Date | Ending date for search in YYYY-MM-DDThh:mm:ss format.\n  'fileFormat': new ElasticEmail.ExportFileFormats(), // ExportFileFormats | Format of the exported file\n  'compressionFormat': new ElasticEmail.CompressionFormat(), // CompressionFormat | FileResponse compression format. None or Zip.\n  'fileName': \"filename.txt\" // String | Name of your file including extension.\n};\napiInstance.eventsChannelsByNameExportPost(name, opts, (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Defining ElasticEmail Template Model Properties in TypeScript/JavaScript\nDESCRIPTION: This code snippet defines the properties of the ElasticEmail Template model. It includes fields for template type, name, creation date, subject, body parts, and template scope. The properties are documented with their types and optional descriptions.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/Template.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**\n * @property {TemplateType} templateType\n * @property {String} name - Template name\n * @property {Date} dateAdded - Date of creation in YYYY-MM-DDThh:ii:ss format\n * @property {String} subject - Default subject of email\n * @property {[BodyPart]} body - Email content of this template\n * @property {TemplateScope} templateScope\n */\nclass Template {\n  templateType?: TemplateType;\n  name?: string;\n  dateAdded?: Date;\n  subject?: string;\n  body?: BodyPart[];\n  templateScope?: TemplateScope;\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Suppressions in ElasticEmail API (JavaScript)\nDESCRIPTION: This endpoint fetches all suppressions. It uses a GET request to the '/suppressions' endpoint.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/README.md#2025-04-22_snippet_24\n\nLANGUAGE: JavaScript\nCODE:\n```\nElasticEmail.SuppressionsApi.suppressionsGet\n```\n\n----------------------------------------\n\nTITLE: Adding Complaints in ElasticEmail API (JavaScript)\nDESCRIPTION: This endpoint adds complaints to the suppression list. It uses a POST request to the '/suppressions/complaints' endpoint.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/README.md#2025-04-22_snippet_23\n\nLANGUAGE: JavaScript\nCODE:\n```\nElasticEmail.SuppressionsApi.suppressionsComplaintsPost\n```\n\n----------------------------------------\n\nTITLE: Adding Direct Unsubscribes to ElasticEmail Using JavaScript\nDESCRIPTION: Adds email addresses directly to the unsubscribe list. Limited to 1000 emails per request. Requires ModifyContacts and ModifySuppressions access levels.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/SuppressionsApi.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport ElasticEmail from '@elasticemail/elasticemail-client';\nlet defaultClient = ElasticEmail.ApiClient.instance;\nlet apikey = defaultClient.authentications['apikey'];\napikey.apiKey = 'YOUR API KEY';\n\nlet apiInstance = new ElasticEmail.SuppressionsApi();\nlet requestBody = [\"null\"];\napiInstance.suppressionsUnsubscribesPost(requestBody, (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Running Elastic Email Statistics Script in NodeJS\nDESCRIPTION: Command to execute the NodeJS script for fetching Elastic Email statistics.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/examples/functions/loadStatistics.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnode snippet.js\n```\n\n----------------------------------------\n\nTITLE: Retrieving SMTP Credential by Name using ElasticEmail SecurityApi in JavaScript\nDESCRIPTION: This snippet demonstrates how to retrieve an SMTP credential by name using the ElasticEmail SecurityApi. It initializes the API client, sets up authentication, and makes a call to securitySmtpByNameGet method.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/SecurityApi.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport ElasticEmail from '@elasticemail/elasticemail-client';\nlet defaultClient = ElasticEmail.ApiClient.instance;\n// Configure API key authorization: apikey\nlet apikey = defaultClient.authentications['apikey'];\napikey.apiKey = 'YOUR API KEY';\n// Uncomment the following line to set a prefix for the API key, e.g. \"Token\" (defaults to null)\n//apikey.apiKeyPrefix = 'Token';\n\nlet apiInstance = new ElasticEmail.SecurityApi();\nlet name = \"name_example\"; // String | Name of the SMTP Credential\nlet opts = {\n  'subaccount': \"subaccount_example\" // String | Email of the subaccount of which credential should be loaded\n};\napiInstance.securitySmtpByNameGet(name, opts, (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Campaign Properties Definition Table in Markdown\nDESCRIPTION: Markdown table defining the properties of the Campaign class, including their types, descriptions and optional status.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/Campaign.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**content** | [**[CampaignTemplate]**](CampaignTemplate.md) | Campaign&#39;s email content. Provide multiple items to send an A/X Split Campaign | [optional] \n**name** | **String** | Campaign name | \n**status** | [**CampaignStatus**](CampaignStatus.md) |  | [optional] \n**recipients** | [**CampaignRecipient**](CampaignRecipient.md) |  | \n**options** | [**CampaignOptions**](CampaignOptions.md) |  | [optional]\n```\n\n----------------------------------------\n\nTITLE: Defining Callback Function for Contact Import in NodeJS\nDESCRIPTION: This snippet defines a callback function to handle the API response, logging success or error messages.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/examples/functions/uploadContacts.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst callback = (error, data, response) => {\n    if (error) {\n        console.error(error);\n    } else {\n        console.log('API called successfully.');\n        console.log('Contacts added.');\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Defining CertificateValidationStatus Enum in JavaScript\nDESCRIPTION: Defines the possible states for certificate validation in the ElasticEmail platform. The enum includes four possible values: ErrorOccured (when an error happens during validation), CertNotSet (when no certificate is set), Valid (when the certificate is valid), and NotValid (when the certificate is invalid).\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/CertificateValidationStatus.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n* `ErrorOccured` (value: `\"ErrorOccured\"`)\n\n* `CertNotSet` (value: `\"CertNotSet\"`)\n\n* `Valid` (value: `\"Valid\"`)\n\n* `NotValid` (value: `\"NotValid\"`)\n```\n\n----------------------------------------\n\nTITLE: Running the Elastic Email List Creation Script in NodeJS\nDESCRIPTION: Command to execute the NodeJS script for adding a new contact list in Elastic Email.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/examples/functions/addList.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnode snippet.js\n```\n\n----------------------------------------\n\nTITLE: Create Template API Call\nDESCRIPTION: Makes the API call to create the template\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/examples/functions/addTemplate.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ntemplatesApi.templatesPost(template, callback);\n```\n\n----------------------------------------\n\nTITLE: Elastic Email Options Properties Definition\nDESCRIPTION: Defines the properties available in the Options class for configuring email sending behavior. Properties include delay timing, IP pool selection, channel selection, encoding type, and tracking settings for opens and clicks.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/Options.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\ntimeOffset | Number | By how long should an e-mail be delayed (in minutes). Maximum is 35 days. | [optional] \npoolName | String | Name of your custom IP Pool to be used in the sending process | [optional] \nchannelName | String | Name of selected channel. | [optional] \nencoding | EncodingType | | [optional] \ntrackOpens | Boolean | Should the opens be tracked? If no value has been provided, Account's default setting will be used. | [optional] \ntrackClicks | Boolean | Should the clicks be tracked? If no value has been provided, Account's default setting will be used. | [optional]\n```\n\n----------------------------------------\n\nTITLE: Implementing Callback Function for Elastic Email API Response in NodeJS\nDESCRIPTION: Defines a callback function to handle the API response, logging success or error messages.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/examples/functions/addList.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst callback = (error, data, response) => {\n    if (error) {\n        console.error(error);\n    } else {\n        console.log('API called successfully.');\n        console.log('List added.');\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: SubaccountSettingsInfoPayload Properties Table in Markdown\nDESCRIPTION: Markdown table defining the properties of the SubaccountSettingsInfoPayload type. Contains a single optional property 'email' of type SubaccountEmailSettingsPayload.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/SubaccountSettingsInfoPayload.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\nemail | [**SubaccountEmailSettingsPayload**](SubaccountEmailSettingsPayload.md) |  | [optional]\n```\n\n----------------------------------------\n\nTITLE: Defining LogStatusSummary Properties in the ElasticEmail JavaScript SDK\nDESCRIPTION: This snippet defines the property structure of the LogStatusSummary class used for tracking email and SMS messaging statistics. It includes counts for various message statuses like delivered, bounced, opened, clicked, as well as engagement metrics and error counts.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/LogStatusSummary.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# ElasticEmail.LogStatusSummary\n\n## Properties\n\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**recipients** | **Number** | Number of recipients | [optional] \n**emailTotal** | **Number** | Number of emails | [optional] \n**smsTotal** | **Number** | Number of SMS | [optional] \n**delivered** | **Number** | Number of delivered messages | [optional] \n**bounced** | **Number** | Number of bounced messages | [optional] \n**inProgress** | **Number** | Number of messages in progress | [optional] \n**opened** | **Number** | Number of opened messages | [optional] \n**clicked** | **Number** | Number of clicked messages | [optional] \n**unsubscribed** | **Number** | Number of unsubscribed messages | [optional] \n**complaints** | **Number** | Number of complaint messages | [optional] \n**inbound** | **Number** | Number of inbound messages | [optional] \n**manualCancel** | **Number** | Number of manually cancelled messages | [optional] \n**notDelivered** | **Number** | Number of messages flagged with 'Not Delivered' | [optional]\n```\n\n----------------------------------------\n\nTITLE: ElasticEmail ExportLink Properties Table\nDESCRIPTION: Markdown table defining the properties of the ExportLink class, including link and publicExportID fields. These properties are used for accessing exported file data.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/ExportLink.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**link** | **String** | Direct URL to the exported file | [optional] \n**publicExportID** | **String** | ID of the exported file | [optional]\n```\n\n----------------------------------------\n\nTITLE: Loading File Details with ElasticEmail FilesApi in JavaScript\nDESCRIPTION: This snippet demonstrates how to load file details using the ElasticEmail FilesApi. It requires the ViewFiles access level and uses the filesByNameInfoGet method.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/FilesApi.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport ElasticEmail from '@elasticemail/elasticemail-client';\nlet defaultClient = ElasticEmail.ApiClient.instance;\n// Configure API key authorization: apikey\nlet apikey = defaultClient.authentications['apikey'];\napikey.apiKey = 'YOUR API KEY';\n// Uncomment the following line to set a prefix for the API key, e.g. \"Token\" (defaults to null)\n//apikey.apiKeyPrefix = 'Token';\n\nlet apiInstance = new ElasticEmail.FilesApi();\nlet name = \"filename.txt\"; // String | Name of your file including extension.\napiInstance.filesByNameInfoGet(name, (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Contact Status Enum in JavaScript\nDESCRIPTION: Enumerates the possible status values for contacts in the ElasticEmail system. Includes statuses like Transactional, Engaged, Active, Bounced, Unsubscribed, Abuse, Inactive, Stale, and NotConfirmed.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/ContactStatus.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  Transactional: \"Transactional\",\n  Engaged: \"Engaged\",\n  Active: \"Active\",\n  Bounced: \"Bounced\",\n  Unsubscribed: \"Unsubscribed\",\n  Abuse: \"Abuse\",\n  Inactive: \"Inactive\",\n  Stale: \"Stale\",\n  NotConfirmed: \"NotConfirmed\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Elastic Email Statistics API Instance\nDESCRIPTION: Initializes an instance of the StatisticsApi class for accessing channel statistics.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/examples/functions/loadChannelsStats.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst statisticsApi = new ElasticEmail.StatisticsApi();\n```\n\n----------------------------------------\n\nTITLE: Deleting a Suppression in ElasticEmail API (JavaScript)\nDESCRIPTION: This endpoint deletes a specific suppression. It uses a DELETE request to the '/suppressions/{email}' endpoint.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/README.md#2025-04-22_snippet_19\n\nLANGUAGE: JavaScript\nCODE:\n```\nElasticEmail.SuppressionsApi.suppressionsByEmailDelete\n```\n\n----------------------------------------\n\nTITLE: Exporting Events in ElasticEmail Events API (JavaScript)\nDESCRIPTION: This snippet shows how to use the eventsExportPost method to export delivery events log information. It allows specifying various parameters such as event types, date range, and file format. API key authentication is required.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/EventsApi.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport ElasticEmail from '@elasticemail/elasticemail-client';\nlet defaultClient = ElasticEmail.ApiClient.instance;\n// Configure API key authorization: apikey\nlet apikey = defaultClient.authentications['apikey'];\napikey.apiKey = 'YOUR API KEY';\n// Uncomment the following line to set a prefix for the API key, e.g. \"Token\" (defaults to null)\n//apikey.apiKeyPrefix = 'Token';\n\nlet apiInstance = new ElasticEmail.EventsApi();\nlet opts = {\n  'eventTypes': [new ElasticEmail.EventType()], // [EventType] | Types of Events to return\n  'from': new Date(\"2013-10-20T19:20:30+01:00\"), // Date | Starting date for search in YYYY-MM-DDThh:mm:ss format.\n  'to': new Date(\"2013-10-20T19:20:30+01:00\"), // Date | Ending date for search in YYYY-MM-DDThh:mm:ss format.\n  'fileFormat': new ElasticEmail.ExportFileFormats(), // ExportFileFormats | Format of the exported file\n  'compressionFormat': new ElasticEmail.CompressionFormat(), // CompressionFormat | FileResponse compression format. None or Zip.\n  'fileName': \"filename.txt\" // String | Name of your file including extension.\n};\napiInstance.eventsExportPost(opts, (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Template Name for Retrieval in NodeJS\nDESCRIPTION: This snippet demonstrates how to specify the name of the template to be loaded.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/examples/functions/loadTemplate.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst templateName = \"hello_template\";\n```\n\n----------------------------------------\n\nTITLE: Specifying Campaign Name\nDESCRIPTION: Sets the name of the campaign to retrieve. Replace 'example' with the actual campaign name.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/examples/functions/loadCampaign.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst campaignName = \"example\";\n```\n\n----------------------------------------\n\nTITLE: Updating SubAccount Email Settings in ElasticEmail API (JavaScript)\nDESCRIPTION: This endpoint updates email settings for a specific subaccount. It uses a PUT request to the '/subaccounts/{email}/settings/email' endpoint.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/README.md#2025-04-22_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\nElasticEmail.SubAccountsApi.subaccountsByEmailSettingsEmailPut\n```\n\n----------------------------------------\n\nTITLE: Defining LogJobStatus Enumeration in ElasticEmail JS SDK\nDESCRIPTION: This enumeration defines all possible statuses for email jobs in the ElasticEmail platform. It includes statuses for different stages of email processing (ReadyToSend, Sending, Sent) and recipient interaction statuses (Opened, Clicked, Unsubscribed, AbuseReport).\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/LogJobStatus.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n* `All` (value: `\"All\"`)\n\n* `ReadyToSend` (value: `\"ReadyToSend\"`)\n\n* `WaitingToRetry` (value: `\"WaitingToRetry\"`)\n\n* `Sending` (value: `\"Sending\"`)\n\n* `Error` (value: `\"Error\"`)\n\n* `Sent` (value: `\"Sent\"`)\n\n* `Opened` (value: `\"Opened\"`)\n\n* `Clicked` (value: `\"Clicked\"`)\n\n* `Unsubscribed` (value: `\"Unsubscribed\"`)\n\n* `AbuseReport` (value: `\"AbuseReport\"`)\n```\n\n----------------------------------------\n\nTITLE: Deleting File Verification Results with Elastic Email API in JavaScript\nDESCRIPTION: Example of using the verificationsFilesByIdDelete method to delete verification results for a file. This operation removes all verification data associated with a file ID. Requires the VerifyEmails access level.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/VerificationsApi.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport ElasticEmail from '@elasticemail/elasticemail-client';\nlet defaultClient = ElasticEmail.ApiClient.instance;\n// Configure API key authorization: apikey\nlet apikey = defaultClient.authentications['apikey'];\napikey.apiKey = 'YOUR API KEY';\n// Uncomment the following line to set a prefix for the API key, e.g. \"Token\" (defaults to null)\n//apikey.apiKeyPrefix = 'Token';\n\nlet apiInstance = new ElasticEmail.VerificationsApi();\nlet id = \"E33EBA7A-C20D-4D3D-8F2F-5EEF42F58E6F\"; // String | ID of the exported file\napiInstance.verificationsFilesByIdDelete(id, (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Defining ContactUpdatePayload Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the ContactUpdatePayload model using a Markdown table. It includes the property names, their types, descriptions, and optional notes.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/ContactUpdatePayload.md#2025-04-22_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# ElasticEmail.ContactUpdatePayload\n\n## Properties\n\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**firstName** | **String** | First name. | [optional] \n**lastName** | **String** | Last name. | [optional] \n**customFields** | **{String: String}** | A key-value collection of custom contact fields which can be used in the system. | [optional] \n```\n\n----------------------------------------\n\nTITLE: Setting API Authentication\nDESCRIPTION: Configures API key authentication for the client\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/examples/functions/exportContacts.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst apikey = client.authentications['apikey'];\napikey.apiKey = \"YOUR_API_KEY\";\n```\n\n----------------------------------------\n\nTITLE: EmailSend Properties Definition in Markdown\nDESCRIPTION: Markdown table defining the EmailSend class properties including transactionID and messageID. Both properties are optional strings that provide unique identifiers for tracking email sends.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/EmailSend.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**transactionID** | **String** | ID number of transaction | [optional] \n**messageID** | **String** | Unique identifier for this email. | [optional]\n```\n\n----------------------------------------\n\nTITLE: Defining EventType Enum in JavaScript for ElasticEmail SDK\nDESCRIPTION: This code snippet defines an enum called EventType that represents different types of events in the ElasticEmail system. Each event type is represented as a string value.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/EventType.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n* `Submission` (value: `\"Submission\"`)\n\n* `FailedAttempt` (value: `\"FailedAttempt\"`)\n\n* `Bounce` (value: `\"Bounce\"`)\n\n* `Sent` (value: `\"Sent\"`)\n\n* `Open` (value: `\"Open\"`)\n\n* `Click` (value: `\"Click\"`)\n\n* `Unsubscribe` (value: `\"Unsubscribe\"`)\n\n* `Complaint` (value: `\"Complaint\"`)\n```\n\n----------------------------------------\n\nTITLE: Listing All Inbound Routes with ElasticEmail API in JavaScript\nDESCRIPTION: Shows how to retrieve all inbound routes for the account using the ElasticEmail JavaScript client. Requires ViewSettings access level and returns an array of InboundRoute objects.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/InboundRouteApi.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport ElasticEmail from '@elasticemail/elasticemail-client';\nlet defaultClient = ElasticEmail.ApiClient.instance;\n// Configure API key authorization: apikey\nlet apikey = defaultClient.authentications['apikey'];\napikey.apiKey = 'YOUR API KEY';\n// Uncomment the following line to set a prefix for the API key, e.g. \"Token\" (defaults to null)\n//apikey.apiKeyPrefix = 'Token';\n\nlet apiInstance = new ElasticEmail.InboundRouteApi();\napiInstance.inboundrouteGet((error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Defining InboundPayload Properties in JavaScript\nDESCRIPTION: This code snippet defines the properties of the InboundPayload class used in the ElasticEmail JavaScript SDK. It includes fields for filtering, naming, and specifying actions for inbound email routing.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/InboundPayload.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n/**\n * @property {String} filter - Filter of the inbound data\n * @property {String} name - Name of this route\n * @property {InboundRouteFilterType} filterType\n * @property {InboundRouteActionType} actionType\n * @property {String} [emailAddress] - Email to forward the inbound to\n * @property {String} [httpAddress] - Address to notify about the inbound\n */\nclass InboundPayload {\n  // Implementation details would go here\n}\n```\n\n----------------------------------------\n\nTITLE: Configure API Authentication\nDESCRIPTION: Sets up API key authentication for the client\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/examples/functions/deleteList.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst apikey = client.authentications['apikey'];\napikey.apiKey = \"YOUR_API_KEY\";\n```\n\n----------------------------------------\n\nTITLE: Downloading File Verification Result in ElasticEmail API (JavaScript)\nDESCRIPTION: This endpoint downloads the verification result for a specific file. It uses a GET request to the '/verifications/files/{id}/result/download' endpoint.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/README.md#2025-04-22_snippet_37\n\nLANGUAGE: JavaScript\nCODE:\n```\nElasticEmail.VerificationsApi.verificationsFilesByIdResultDownloadGet\n```\n\n----------------------------------------\n\nTITLE: Creating Statistics API Instance in NodeJS\nDESCRIPTION: Initializes an instance of the StatisticsApi, which will be used to fetch basic send statistics from Elastic Email.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/examples/functions/loadStatistics.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst statisticsApi = new ElasticEmail.StatisticsApi();\n```\n\n----------------------------------------\n\nTITLE: Installing ElasticEmail Client Package for NodeJS\nDESCRIPTION: Command to install the ElasticEmail client package via npm. This is required to use the ElasticEmail API with NodeJS applications.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/examples/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @elasticemail/elasticemail-client\n```\n\n----------------------------------------\n\nTITLE: Loading Domain Details with ElasticEmail Domain API in JavaScript\nDESCRIPTION: This code shows how to retrieve a domain configured for an ElasticEmail account. It requires ViewSettings access level and uses the GET HTTP method, returning domain data in the response.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/DomainsApi.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport ElasticEmail from '@elasticemail/elasticemail-client';\nlet defaultClient = ElasticEmail.ApiClient.instance;\n// Configure API key authorization: apikey\nlet apikey = defaultClient.authentications['apikey'];\napikey.apiKey = 'YOUR API KEY';\n// Uncomment the following line to set a prefix for the API key, e.g. \"Token\" (defaults to null)\n//apikey.apiKeyPrefix = 'Token';\n\nlet apiInstance = new ElasticEmail.DomainsApi();\nlet domain = \"domain_example\"; // String | Name of the given domain\napiInstance.domainsByDomainGet(domain, (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: InboundRoute Properties Table in Markdown\nDESCRIPTION: Markdown table defining the properties, types, and descriptions for the InboundRoute class. Includes optional properties for route identification, filtering, actions, and ordering.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/InboundRoute.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\npublicId | String |  | [optional] \nname | String | Name of this route | [optional] \nfilterType | InboundRouteFilterType |  | [optional] \nfilter | String | Filter of the inbound data | [optional] \nactionType | InboundRouteActionType |  | [optional] \nactionParameter | String | URL address or Email to notify about the inbound | [optional] \nsortOrder | Number | Place of this route in your routes queue's order | [optional]\n```\n\n----------------------------------------\n\nTITLE: Initialize Templates API\nDESCRIPTION: Creates an instance of the Templates API client\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/examples/functions/addTemplate.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst templatesApi = new ElasticEmail.TemplatesApi();\n```\n\n----------------------------------------\n\nTITLE: Deleting Inbound Routes with ElasticEmail API in JavaScript\nDESCRIPTION: Demonstrates how to delete an inbound route by its ID using the ElasticEmail JavaScript client. Requires ModifySettings access level and uses API key authentication.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/InboundRouteApi.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport ElasticEmail from '@elasticemail/elasticemail-client';\nlet defaultClient = ElasticEmail.ApiClient.instance;\n// Configure API key authorization: apikey\nlet apikey = defaultClient.authentications['apikey'];\napikey.apiKey = 'YOUR API KEY';\n// Uncomment the following line to set a prefix for the API key, e.g. \"Token\" (defaults to null)\n//apikey.apiKeyPrefix = 'Token';\n\nlet apiInstance = new ElasticEmail.InboundRouteApi();\nlet id = \"id_example\"; // String | \napiInstance.inboundrouteByIdDelete(id, (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Running ElasticEmail JS Snippets in NodeJS\nDESCRIPTION: Commands to navigate to the functions directory and execute a specific snippet file with Node.js. These commands should be run from the terminal after setting up the environment.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/examples/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd functions\n\nnode snippetFile.js\n```\n\n----------------------------------------\n\nTITLE: EmailView Properties Structure in ElasticEmail JavaScript SDK\nDESCRIPTION: Defines the properties of the EmailView class in the ElasticEmail JavaScript SDK. This includes the body (HTML or plain text content), subject, and sender's email address, all of which are optional properties.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/EmailView.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# ElasticEmail.EmailView\n\n## Properties\n\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**body** | **String** | Body (HTML, otherwise plain text) of email | [optional] \n**subject** | **String** | Default subject of email. | [optional] \n**from** | **String** | From email address | [optional]\n```\n\n----------------------------------------\n\nTITLE: Defining EmailJobFailedStatus Class Properties in JavaScript\nDESCRIPTION: This code snippet defines the properties of the EmailJobFailedStatus class for the ElasticEmail JavaScript SDK. It includes address, error message, RFC error code, and category, all of which are optional.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/EmailJobFailedStatus.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n/**\n * @property {String} address\n * @property {String} error\n * @property {Number} errorCode RFC Error code\n * @property {String} category\n */\nclass EmailJobFailedStatus {\n    constructor() {\n        this.address = undefined;\n        this.error = undefined;\n        this.errorCode = undefined;\n        this.category = undefined;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Elastic Email Library in NodeJS\nDESCRIPTION: Imports the Elastic Email client library for use in a NodeJS application.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/examples/functions/deleteContact.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst ElasticEmail = require('@elasticemail/elasticemail-client');\n```\n\n----------------------------------------\n\nTITLE: Complete Script for Loading Campaign Details\nDESCRIPTION: Full NodeJS script that combines all previous snippets to load and display campaign details using the Elastic Email API.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/examples/functions/loadCampaign.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst ElasticEmail = require('@elasticemail/elasticemail-client');\n\nconst client = ElasticEmail.ApiClient.instance;\n\nconst apikey = client.authentications['apikey'];\napikey.apiKey = \"YOUR_API_KEY\";\n\nconst campaignsApi = new ElasticEmail.CampaignsApi()\nconst campaignName = \"example\";\n\nconst callback = (error, data, response) => {\n    if (error) {\n        console.error(error);\n    } else {\n        console.log('API called successfully.');\n        console.log('Campaign name', data.Name);\n        console.log('Campaign status', data.Status);\n    }\n};\ncampaignsApi.campaignsByNameGet(campaignName, callback);\n```\n\n----------------------------------------\n\nTITLE: Setting up File Stream and ContactsApi in NodeJS\nDESCRIPTION: This snippet demonstrates how to set up a file stream for reading the CSV file and create an instance of ContactsApi for uploading contacts.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/examples/functions/uploadContacts.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst fs = require('fs');\nconst contactsApi = new ElasticEmail.ContactsApi()\n\nconst readStream = fs.createReadStream('./files/contacts.csv');\n```\n\n----------------------------------------\n\nTITLE: Retrieving Email Verification Results in ElasticEmail API (JavaScript)\nDESCRIPTION: This endpoint fetches verification results for all emails. It uses a GET request to the '/verifications' endpoint.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/README.md#2025-04-22_snippet_42\n\nLANGUAGE: JavaScript\nCODE:\n```\nElasticEmail.VerificationsApi.verificationsGet\n```\n\n----------------------------------------\n\nTITLE: Defining FileUploadResult Properties in ElasticEmail JavaScript SDK\nDESCRIPTION: Documentation of the FileUploadResult class properties, which include emailsCount (the number of unique emails detected in the file) and duplicatedEmailsCount (the number of email duplicates detected).\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/FileUploadResult.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# ElasticEmail.FileUploadResult\n\n## Properties\n\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**emailsCount** | **Number** | How many unique emails were detected the file | [optional] \n**duplicatedEmailsCount** | **Number** | How many email duplicates were detected | [optional]\n```\n\n----------------------------------------\n\nTITLE: Running the NodeJS Script\nDESCRIPTION: Command to execute the NodeJS script for deleting contacts using the Elastic Email API.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/examples/functions/deleteContact.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnode snippet.js\n```\n\n----------------------------------------\n\nTITLE: Retrieving Campaign Details\nDESCRIPTION: Makes an API call to retrieve campaign details using the specified campaign name and callback function.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/examples/functions/loadCampaign.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ncampaignsApi.campaignsByNameGet(campaignName, callback);\n```\n\n----------------------------------------\n\nTITLE: Defining TransactionalRecipient Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the TransactionalRecipient class using a markdown table. It specifies the name, type, description, and optional status of each property.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/TransactionalRecipient.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Type | Description | Notes |\n| --- | --- | --- | --- |\n| **to** | **[String]** | List of recipients (visible to others) | |\n| **CC** | **[String]** | List of Carbon Copy recipients (visible to others) | [optional] |\n| **BCC** | **[String]** | List of Blind Carbon Copy recipients (hidden from other recipients) | [optional] |\n```\n\n----------------------------------------\n\nTITLE: Defining TemplateType Enum for ElasticEmail in JavaScript\nDESCRIPTION: This code snippet defines the TemplateType enum for the ElasticEmail JavaScript library. It includes six different template types: RawHTML, DragDropEditor, LandingPageEditor, TemplateEditor, FormTemplate, and LandingPageTemplate.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/TemplateType.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n* `RawHTML` (value: `\"RawHTML\"`)\n\n* `DragDropEditor` (value: `\"DragDropEditor\"`)\n\n* `LandingPageEditor` (value: `\"LandingPageEditor\"`)\n\n* `TemplateEditor` (value: `\"TemplateEditor\"`)\n\n* `FormTemplate` (value: `\"FormTemplate\"`)\n\n* `LandingPageTemplate` (value: `\"LandingPageTemplate\"`)\n```\n\n----------------------------------------\n\nTITLE: EmailJobStatus Class Properties Definition in ElasticEmail JavaScript SDK\nDESCRIPTION: Detailed property definitions for the EmailJobStatus class which represents the status and metrics of an email sending job. Properties include job ID, status indicators, recipient counts, and detailed tracking of email delivery and engagement metrics such as sent, delivered, opened, and clicked messages.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/EmailJobStatus.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# ElasticEmail.EmailJobStatus\n\n## Properties\n\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**ID** | **String** | ID number of your attachment | [optional] \n**status** | **String** | Name of status: submitted, complete, in_progress | [optional] \n**recipientsCount** | **Number** |  | [optional] \n**failed** | [**[EmailJobFailedStatus]**](EmailJobFailedStatus.md) |  | [optional] \n**failedCount** | **Number** | Total emails failed. | [optional] \n**sent** | **[String]** |  | [optional] \n**sentCount** | **Number** | Total emails sent. | [optional] \n**delivered** | **[String]** | Number of delivered messages | [optional] \n**deliveredCount** | **Number** |  | [optional] \n**pending** | **[String]** |  | [optional] \n**pendingCount** | **Number** |  | [optional] \n**opened** | **[String]** | Number of opened messages | [optional] \n**openedCount** | **Number** | Total emails opened. | [optional] \n**clicked** | **[String]** | Number of clicked messages | [optional] \n**clickedCount** | **Number** | Total emails clicked | [optional] \n**unsubscribed** | **[String]** | Number of unsubscribed messages | [optional] \n**unsubscribedCount** | **Number** | Total emails unsubscribed | [optional] \n**abuseReports** | **[String]** |  | [optional] \n**abuseReportsCount** | **Number** |  | [optional] \n**messageIDs** | **[String]** | List of all MessageIDs for this job. | [optional]\n```\n\n----------------------------------------\n\nTITLE: Setting API Key for Authentication in Elastic Email\nDESCRIPTION: Configures the API key for authentication with the Elastic Email API. Replace 'YOUR_API_KEY' with your actual API key.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/examples/functions/loadChannelsStats.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst apikey = client.authentications['apikey'];\napikey.apiKey = \"YOUR_API_KEY\";\n```\n\n----------------------------------------\n\nTITLE: Initializing API Client\nDESCRIPTION: Gets an instance of the ElasticEmail API client\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/examples/functions/sendBulkEmails.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst client = ElasticEmail.ApiClient.instance;\n```\n\n----------------------------------------\n\nTITLE: Defining Contact Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the Contact object using a Markdown table. It includes property names, types, descriptions, and optional notes.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/Contact.md#2025-04-22_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n| Name | Type | Description | Notes |\n| ------------ | ------------- | ------------- | ------------- |\n| **email** | **String** | Proper email address. | [optional] |\n| **status** | [**ContactStatus**](ContactStatus.md) |  | [optional] |\n| **firstName** | **String** | First name. | [optional] |\n| **lastName** | **String** | Last name. | [optional] |\n| **customFields** | **{String: String}** | A key-value collection of custom contact fields which can be used in the system. | [optional] |\n| **consent** | [**ConsentData**](ConsentData.md) |  | [optional] |\n| **source** | [**ContactSource**](ContactSource.md) |  | [optional] |\n| **dateAdded** | **Date** | Date of creation in YYYY-MM-DDThh:ii:ss format | [optional] |\n| **dateUpdated** | **Date** | Last change date | [optional] |\n| **statusChangeDate** | **Date** | Date of last status change. | [optional] |\n| **activity** | [**ContactActivity**](ContactActivity.md) |  | [optional] |\n```\n\n----------------------------------------\n\nTITLE: Loading ElasticEmail Library\nDESCRIPTION: Imports the ElasticEmail Node.js client library\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/examples/functions/sendBulkEmails.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst ElasticEmail = require('@elasticemail/elasticemail-client');\n```\n\n----------------------------------------\n\nTITLE: Defining FileInfo Object Schema for ElasticEmail JavaScript Client\nDESCRIPTION: This code snippet defines the data structure for the FileInfo class in the ElasticEmail JavaScript client. It documents the properties that represent information about uploaded files, including the file name, size, creation date, expiration date, and content type.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/FileInfo.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# ElasticEmail.FileInfo\n\n## Properties\n\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**fileName** | **String** | Name of your file including extension. | [optional] \n**size** | **Number** | Size of your attachment (in bytes). | [optional] \n**dateAdded** | **Date** | Date of creation in YYYY-MM-DDThh:ii:ss format | [optional] \n**expirationDate** | **Date** | Date when the file will be deleted from your Account. | [optional] \n**contentType** | **String** | Content type of the file. | [optional]\n```\n\n----------------------------------------\n\nTITLE: Implementing Callback Handler\nDESCRIPTION: Creates a callback function to handle the API response and error cases\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/examples/functions/exportContacts.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst callback = (error, data, response) => {\n    if (error) {\n        console.error(error);\n    } else {\n        console.log('API called successfully.');\n        console.log('Contacts exported');\n        console.log('Link', data.Link);\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Defining BodyPart Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the BodyPart class using a Markdown table. It includes the property names, types, descriptions, and optional notes.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/BodyPart.md#2025-04-22_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n| Name | Type | Description | Notes |\n| ------------ | ------------- | ------------- | ------------- |\n| **contentType** | [**BodyContentType**](BodyContentType.md) |  | \n| **content** | **String** | Actual content of the body part | [optional] \n| **charset** | **String** | Text value of charset encoding for example: iso-8859-1, windows-1251, utf-8, us-ascii, windows-1250 and more... | [optional] \n```\n\n----------------------------------------\n\nTITLE: Setting API Key for Authentication\nDESCRIPTION: Configures the API client with the user's API key for authentication. The API key should have ModifyContacts access level.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/examples/functions/deleteContact.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst apikey = client.authentications['apikey'];\napikey.apiKey = \"YOUR_API_KEY\";\n```\n\n----------------------------------------\n\nTITLE: Loading ElasticEmail Library\nDESCRIPTION: Imports the ElasticEmail NodeJS client library\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/examples/functions/addContacts.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst ElasticEmail = require('@elasticemail/elasticemail-client');\n```\n\n----------------------------------------\n\nTITLE: Defining CampaignOptions Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the CampaignOptions class using a markdown table. It includes property names, types, descriptions, and optional notes for each field.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/CampaignOptions.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Type | Description | Notes |\n| ------------ | ------------- | ------------- | ------------- |\n| deliveryOptimization | [DeliveryOptimizationType](DeliveryOptimizationType.md) |  | [optional] |\n| trackOpens | Boolean | Should the opens be tracked? If no value has been provided, Account's default setting will be used. | [optional] |\n| trackClicks | Boolean | Should the clicks be tracked? If no value has been provided, Account's default setting will be used. | [optional] |\n| scheduleFor | Date | Date when this Campaign is scheduled to be sent on | [optional] |\n| triggerFrequency | Number | How often (in minutes) to send the campaign | [optional] |\n| triggerCount | Number | How many times send the campaign | [optional] |\n| splitOptions | [SplitOptions](SplitOptions.md) |  | [optional] |\n```\n\n----------------------------------------\n\nTITLE: Initializing API Client\nDESCRIPTION: Gets an instance of the Elastic Email API client\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/examples/functions/exportContacts.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst client = ElasticEmail.ApiClient.instance;\n```\n\n----------------------------------------\n\nTITLE: Defining TemplateScope Enumeration in ElasticEmail JavaScript Client\nDESCRIPTION: This enumeration defines the possible scopes for templates in the ElasticEmail platform. Templates can either be 'Personal' (likely visible only to the user) or 'Global' (likely visible to all users in the account).\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/TemplateScope.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `Personal` (value: `\"Personal\"`)\n\n* `Global` (value: `\"Global\"`)\n```\n\n----------------------------------------\n\nTITLE: Defining CampaignStatus Enum in ElasticEmail JavaScript SDK\nDESCRIPTION: An enumeration defining all possible status values for an email campaign in the ElasticEmail system. These statuses represent the lifecycle of a campaign from Draft through Processing, Sending, Completed, and other terminal states like Deleted or Cancelled.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/CampaignStatus.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n* `Deleted` (value: `\"Deleted\"`)\n\n* `Active` (value: `\"Active\"`)\n\n* `Processing` (value: `\"Processing\"`)\n\n* `Sending` (value: `\"Sending\"`)\n\n* `Completed` (value: `\"Completed\"`)\n\n* `Paused` (value: `\"Paused\"`)\n\n* `Cancelled` (value: `\"Cancelled\"`)\n\n* `Draft` (value: `\"Draft\"`)\n```\n\n----------------------------------------\n\nTITLE: Creating ContactsApi Instance for Deleting Contacts\nDESCRIPTION: Instantiates the ContactsApi class, which provides methods for managing contacts, including deletion.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/examples/functions/deleteContact.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst contactsApi = new ElasticEmail.ContactsApi();\n```\n\n----------------------------------------\n\nTITLE: Loading Elastic Email Library\nDESCRIPTION: Imports the Elastic Email NodeJS client library.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/examples/functions/addCampaign.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst ElasticEmail = require('@elasticemail/elasticemail-client');\n```\n\n----------------------------------------\n\nTITLE: CampaignRecipient Properties Structure - JavaScript\nDESCRIPTION: Defines the structure for the CampaignRecipient model with two optional properties: listNames and segmentNames. These properties allow specifying target recipients for a campaign through list names and segment names from the user's account.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/CampaignRecipient.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**listNames** | **[String]** | Names of lists from your Account to read recipients from | [optional] \n**segmentNames** | **[String]** | Names of segments from your Account to read recipients from | [optional]\n```\n\n----------------------------------------\n\nTITLE: Loading Elastic Email Library in NodeJS\nDESCRIPTION: Imports the Elastic Email client library for use in a NodeJS application.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/examples/functions/loadCampaign.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst ElasticEmail = require('@elasticemail/elasticemail-client');\n```\n\n----------------------------------------\n\nTITLE: Defining VerificationStatus Enum in ElasticEmail JavaScript Library\nDESCRIPTION: This enumeration defines the possible states for a verification process in the ElasticEmail system. It includes Processing (verification in progress), Ready (verification prepared), Expired (verification time limit exceeded), Verified (successfully verified), and Error (verification failed) states.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/VerificationStatus.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n* `Processing` (value: `\"Processing\"`)\n\n* `Ready` (value: `\"Ready\"`)\n\n* `Expired` (value: `\"Expired\"`)\n\n* `Verified` (value: `\"Verified\"`)\n\n* `Error` (value: `\"Error\"`)\n```\n\n----------------------------------------\n\nTITLE: Configuring API Key Authentication\nDESCRIPTION: Sets the API key for authentication with the Elastic Email API. Replace 'YOUR_API_KEY' with your actual API key.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/examples/functions/loadCampaign.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst apikey = client.authentications['apikey'];\napikey.apiKey = \"YOUR_API_KEY\";\n```\n\n----------------------------------------\n\nTITLE: Installing ElasticEmail Client via NPM\nDESCRIPTION: Commands to install the ElasticEmail JavaScript client package using npm package manager.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @elasticemail/elasticemail-client --save\n```\n\n----------------------------------------\n\nTITLE: Defining SubaccountEmailSettings Class Properties in JavaScript\nDESCRIPTION: This code snippet defines the properties of the SubaccountEmailSettings class. It includes settings such as monthly refill credits, email size limits, daily send limits, and other configuration options for subaccount email management.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/SubaccountEmailSettings.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# ElasticEmail.SubaccountEmailSettings\n\n## Properties\n\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**monthlyRefillCredits** | **Number** | Amount of credits added to Account automatically | [optional] \n**requiresEmailCredits** | **Boolean** | True, if Account needs credits to send emails. Otherwise, false | [optional] \n**emailSizeLimit** | **Number** | Maximum size of email including attachments in MB's | [optional] \n**dailySendLimit** | **Number** | Amount of emails Account can send daily | [optional] \n**maxContacts** | **Number** | Maximum number of contacts the Account can have. 0 means that parent account's limit is used. | [optional] \n**enablePrivateIPPurchase** | **Boolean** | Can the SubAccount purchase Private IP for themselves | [optional] \n**poolName** | **String** | Name of your custom IP Pool to be used in the sending process | [optional] \n**validSenderDomainOnly** | **Boolean** |  | [optional] \n```\n\n----------------------------------------\n\nTITLE: Deleting Template Using Elastic Email API\nDESCRIPTION: Calls the templatesByNameDelete method of the TemplatesApi to delete the specified template. It uses the template name and callback function defined earlier.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/examples/functions/deleteTemplate.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ntemplatesApi.templatesByNameDelete(templateName, callback);\n```\n\n----------------------------------------\n\nTITLE: Creating Callback Function for Elastic Email API Response in NodeJS\nDESCRIPTION: Defines a callback function to handle the API response. It logs an error if one occurs, or logs the successful API call and the returned data.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/examples/functions/loadStatistics.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst callback = (error, data, response) => {\n    if (error) {\n        console.error(error);\n    } else {\n        console.log('API called successfully.');\n        console.log(JSON.stringify(data));\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Defining EncodingType Enum in ElasticEmail JavaScript SDK\nDESCRIPTION: This enumeration defines available encoding types for email content in the ElasticEmail JavaScript SDK. Options include UserProvided, None, Raw7bit, Raw8bit, QuotedPrintable, Base64, and Uue encoding formats.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/EncodingType.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n* `UserProvided` (value: `\"UserProvided\"`)\n\n* `None` (value: `\"None\"`)\n\n* `Raw7bit` (value: `\"Raw7bit\"`)\n\n* `Raw8bit` (value: `\"Raw8bit\"`)\n\n* `QuotedPrintable` (value: `\"QuotedPrintable\"`)\n\n* `Base64` (value: `\"Base64\"`)\n\n* `Uue` (value: `\"Uue\"`)\n```\n\n----------------------------------------\n\nTITLE: Initializing Elastic Email Client\nDESCRIPTION: Loads the Elastic Email library and initializes the API client instance with authentication.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/examples/functions/updateCampaign.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst ElasticEmail = require('@elasticemail/elasticemail-client');\n\nconst client = ElasticEmail.ApiClient.instance;\n\nconst apikey = client.authentications['apikey'];\napikey.apiKey = \"YOUR_API_KEY\";\n\nconst campaignsApi = new ElasticEmail.CampaignsApi()\n```\n\n----------------------------------------\n\nTITLE: Defining Events Sort Order Enum in ElasticEmail JS SDK\nDESCRIPTION: Enumeration defining two possible sort orders for events: DateDescending and DateAscending. Used for controlling the order of event results in API queries.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/EventsOrderBy.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n* `DateDescending` (value: `\"DateDescending\"`)\n\n* `DateAscending` (value: `\"DateAscending\"`)\n```\n\n----------------------------------------\n\nTITLE: Defining DomainUpdatePayload Properties in ElasticEmail JavaScript SDK\nDESCRIPTION: A documentation table that specifies the properties, types, and descriptions of the DomainUpdatePayload model. It includes certificate status, VERP Boolean flag, custom bounces domain string, and a Boolean flag for setting the custom bounces domain as default.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/DomainUpdatePayload.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# ElasticEmail.DomainUpdatePayload\n\n## Properties\n\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**certificateStatus** | [**CertificateValidationStatus**](CertificateValidationStatus.md) |  | [optional] \n**VERP** | **Boolean** |  | [optional] \n**customBouncesDomain** | **String** |  | [optional] \n**isCustomBouncesDomainDefault** | **Boolean** |  | [optional]\n```\n\n----------------------------------------\n\nTITLE: Running the Script\nDESCRIPTION: Command to execute the campaign creation script.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/examples/functions/addCampaign.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnode snippet.js\n```\n\n----------------------------------------\n\nTITLE: Defining TrackingType Enumeration in ElasticEmail JavaScript SDK\nDESCRIPTION: This enumeration defines the various tracking types available in the ElasticEmail system. It includes options for no tracking, deletion tracking, HTTP tracking, and various HTTPS tracking options with different certificate configurations.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/TrackingType.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n* `None` (value: `\"None\"`)\n\n* `Delete` (value: `\"Delete\"`)\n\n* `Http` (value: `\"Http\"`)\n\n* `ExternalHttps` (value: `\"ExternalHttps\"`)\n\n* `InternalCertHttps` (value: `\"InternalCertHttps\"`)\n\n* `LetsEncryptCert` (value: `\"LetsEncryptCert\"`)\n```\n\n----------------------------------------\n\nTITLE: Defining EmailRecipient Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the EmailRecipient class using a markdown table. It specifies the name, type, description, and optional notes for each property.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/EmailRecipient.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**email** | **String** | Proper email address. | \n**fields** | **{String: String}** | A key-value collection of merge fields which can be used in e-mail body. | [optional]\n```\n\n----------------------------------------\n\nTITLE: Defining DomainOwner Enumeration in ElasticEmail JavaScript Client\nDESCRIPTION: Enumeration defining domain ownership types in the ElasticEmail system. The enum provides two possible values: 'Current' representing the current domain owner, and 'Parent' representing the parent domain owner.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/DomainOwner.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n* `Current` (value: `\"Current\"`)\n\n* `Parent` (value: `\"Parent\"`)\n```\n\n----------------------------------------\n\nTITLE: Documenting DomainPayload Model Properties in ElasticEmail JS SDK\nDESCRIPTION: Defines the properties of the DomainPayload model used in the ElasticEmail JavaScript SDK. The model has two properties: 'domain' (a string representing the name of the selected domain) and 'setAsDefault' (a boolean flag).\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/DomainPayload.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# ElasticEmail.DomainPayload\n\n## Properties\n\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**domain** | **String** | Name of selected domain. | [optional] \n**setAsDefault** | **Boolean** |  | [optional]\n```\n\n----------------------------------------\n\nTITLE: Building ElasticEmail Client Module\nDESCRIPTION: Command to build the ElasticEmail client module after installation.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Setting API Authentication\nDESCRIPTION: Configures the API key for authentication\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/examples/functions/addContacts.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst apikey = client.authentications['apikey'];\napikey.apiKey = \"YOUR_API_KEY\";\n```\n\n----------------------------------------\n\nTITLE: DomainData Properties Reference Table in Markdown\nDESCRIPTION: A Markdown table that documents all properties of the DomainData model class, including their types, descriptions, and whether they are optional. The properties track domain validation status, configuration settings, and verification states for email sending domains.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/DomainData.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# ElasticEmail.DomainData\n\n## Properties\n\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**validationLog** | **String** | Domain validation results - when domain has been running through validation process | [optional] \n**domain** | **String** | Name of selected domain. | [optional] \n**defaultDomain** | **Boolean** | True, if domain is used as default. Otherwise, false, | [optional] \n**spf** | **Boolean** | True, if SPF record is verified | [optional] \n**dkim** | **Boolean** | True, if DKIM record is verified | [optional] \n**MX** | **Boolean** | True, if MX record is verified | [optional] \n**DMARC** | **Boolean** |  | [optional] \n**isRewriteDomainValid** | **Boolean** | True, if tracking CNAME record is verified | [optional] \n**verify** | **Boolean** | True, if DKIM, SPF, or tracking are still to be verified | [optional] \n**type** | [**TrackingType**](TrackingType.md) |  | [optional] \n**trackingStatus** | [**TrackingValidationStatus**](TrackingValidationStatus.md) |  | [optional] \n**certificateStatus** | [**CertificateValidationStatus**](CertificateValidationStatus.md) |  | [optional] \n**certificateValidationError** | **String** |  | [optional] \n**trackingTypeUserRequest** | [**TrackingType**](TrackingType.md) |  | [optional] \n**VERP** | **Boolean** |  | [optional] \n**customBouncesDomain** | **String** |  | [optional] \n**isCustomBouncesDomainDefault** | **Boolean** |  | [optional] \n**isMarkedForDeletion** | **Boolean** |  | [optional] \n**ownership** | [**DomainOwner**](DomainOwner.md) |  | [optional] \n```\n\n----------------------------------------\n\nTITLE: Creating ContactsApi Instance\nDESCRIPTION: Initializes the ContactsApi object for managing contacts\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/examples/functions/addContacts.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst contactsApi = new ElasticEmail.ContactsApi();\n```\n\n----------------------------------------\n\nTITLE: Defining CompressionFormat Enum in ElasticEmail JavaScript SDK\nDESCRIPTION: This code defines an enumeration for compression formats in the ElasticEmail JavaScript SDK. It contains two possible values: 'None' for no compression and 'Zip' for ZIP compression.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/CompressionFormat.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n* `None` (value: `\"None\"`)\n\n* `Zip` (value: `\"Zip\"`)\n```\n\n----------------------------------------\n\nTITLE: Defining MessageCategory Enum in JavaScript for ElasticEmail SDK\nDESCRIPTION: This code snippet defines an enumeration of message categories used in the ElasticEmail system. Each category represents a specific state or outcome of an email delivery attempt, such as 'Spam', 'BlackListed', or 'ConnectionProblem'.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/MessageCategory.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n# ElasticEmail.MessageCategory\n\n## Enum\n\n\n* `Unknown` (value: `\"Unknown\"`)\n\n* `Ignore` (value: `\"Ignore\"`)\n\n* `Spam` (value: `\"Spam\"`)\n\n* `BlackListed` (value: `\"BlackListed\"`)\n\n* `NoMailbox` (value: `\"NoMailbox\"`)\n\n* `GreyListed` (value: `\"GreyListed\"`)\n\n* `Throttled` (value: `\"Throttled\"`)\n\n* `Timeout` (value: `\"Timeout\"`)\n\n* `ConnectionProblem` (value: `\"ConnectionProblem\"`)\n\n* `SPFProblem` (value: `\"SPFProblem\"`)\n\n* `AccountProblem` (value: `\"AccountProblem\"`)\n\n* `DNSProblem` (value: `\"DNSProblem\"`)\n\n* `NotDeliveredCancelled` (value: `\"NotDeliveredCancelled\"`)\n\n* `CodeError` (value: `\"CodeError\"`)\n\n* `ManualCancel` (value: `\"ManualCancel\"`)\n\n* `ConnectionTerminated` (value: `\"ConnectionTerminated\"`)\n\n* `NotDelivered` (value: `\"NotDelivered\"`)\n```\n\n----------------------------------------\n\nTITLE: Defining SubAccountInfo Class Properties in JavaScript\nDESCRIPTION: This code snippet defines the properties of the SubAccountInfo class, including their types and descriptions. It covers various aspects of a subaccount such as identification, contact information, settings, and usage statistics.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/SubAccountInfo.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n/**\n * @property {String} publicAccountID - Public key for limited access to your Account such as contact/add so you can use it safely on public websites.\n * @property {String} email - Proper email address.\n * @property {SubaccountSettingsInfo} settings - Subaccount settings information.\n * @property {Date} lastActivity - Date of last activity on Account\n * @property {Number} emailCredits - Amount of email credits\n * @property {Number} totalEmailsSent - Amount of emails sent from this Account\n * @property {Number} reputation - Numeric reputation\n * @property {AccountStatusEnum} status - Account status\n * @property {Number} contactsCount - How many contacts this SubAccount has stored\n */\nclass SubAccountInfo {\n    // Implementation details not provided in the snippet\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Elastic Email Lists API Instance in NodeJS\nDESCRIPTION: Initializes an instance of the Elastic Email Lists API for managing contact lists.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/examples/functions/addList.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst listsApi = new ElasticEmail.ListsApi();\n```\n\n----------------------------------------\n\nTITLE: Running the Script\nDESCRIPTION: Command to execute the Node.js script\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/examples/functions/sendBulkEmails.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnode snippet.js\n```\n\n----------------------------------------\n\nTITLE: Defining ElasticEmail.Utm Class Properties in Markdown\nDESCRIPTION: Documentation table detailing the properties of the ElasticEmail.Utm class. The class contains four optional string properties for tracking UTM parameters: source, medium, campaign, and content.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/Utm.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# ElasticEmail.Utm\n\n## Properties\n\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**source** | **String** | utmsource value | [optional] \n**medium** | **String** | utmmedium value | [optional] \n**campaign** | **String** | utmcampaign value | [optional] \n**content** | **String** | utmcontent value | [optional]\n```\n\n----------------------------------------\n\nTITLE: Uploading File with Emails for Verification in ElasticEmail API (JavaScript)\nDESCRIPTION: This endpoint uploads a file containing emails for verification. It uses a POST request to the '/verifications/files' endpoint.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/README.md#2025-04-22_snippet_40\n\nLANGUAGE: JavaScript\nCODE:\n```\nElasticEmail.VerificationsApi.verificationsFilesPost\n```\n\n----------------------------------------\n\nTITLE: Defining Export Status Enum for ElasticEmail\nDESCRIPTION: Enumeration defining the four possible states of an export operation: Error, Loading, Ready, and Expired. Used to track the status of data export processes in the ElasticEmail system.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/ExportStatus.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nenum ExportStatus {\n  Error = \"Error\",\n  Loading = \"Loading\",\n  Ready = \"Ready\",\n  Expired = \"Expired\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting API Authentication\nDESCRIPTION: Configures API key authentication for the client\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/examples/functions/sendBulkEmails.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst apikey = client.authentications['apikey'];\napikey.apiKey = \"YOUR_API_KEY\";\n```\n\n----------------------------------------\n\nTITLE: Running the Script\nDESCRIPTION: Command to execute the NodeJS script\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/examples/functions/exportContacts.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnode snippet.js\n```\n\n----------------------------------------\n\nTITLE: Defining ContactSource Enum Constants in ElasticEmail JavaScript SDK\nDESCRIPTION: An enumeration of possible contact sources in the ElasticEmail system. This enum defines the various ways contacts can be added to the system, including through APIs, manual input, file uploads, and web forms.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/ContactSource.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n* `DeliveryApi` (value: `\"DeliveryApi\"`)\n\n* `ManualInput` (value: `\"ManualInput\"`)\n\n* `FileUpload` (value: `\"FileUpload\"`)\n\n* `WebForm` (value: `\"WebForm\"`)\n\n* `ContactApi` (value: `\"ContactApi\"`)\n\n* `VerificationApi` (value: `\"VerificationApi\"`)\n\n* `FileVerificationApi` (value: `\"FileVerificationApi\"`)\n```\n\n----------------------------------------\n\nTITLE: Webpack Configuration for ElasticEmail Client\nDESCRIPTION: Webpack configuration to resolve module loading issues by disabling AMD loader.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/README.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmodule: {\n  rules: [\n    {\n      parser: {\n        amd: false\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Callback Function for Template Retrieval in NodeJS\nDESCRIPTION: This snippet shows how to create a callback function that handles the API response, displaying either error details or successful template information.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/examples/functions/loadTemplate.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst callback = (error, data, response) => {\n    if (error) {\n        console.error(error);\n    } else {\n        console.log('API called successfully.');\n        console.log('Template name', data.Name);\n        console.log('Template type', data.TemplateType);\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Installing ElasticEmail Client via Git\nDESCRIPTION: Command to install the ElasticEmail client directly from GitHub repository.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm install elasticemail/elasticemail-js --save\n```\n\n----------------------------------------\n\nTITLE: Defining InboundRouteActionType Enum in ElasticEmail JS Library\nDESCRIPTION: Enumeration that defines the possible action types for inbound email routing in the ElasticEmail platform. It includes ForwardToEmail for email forwarding, NotifyViaHttp for HTTP notifications, and Stop for terminating the routing process.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/InboundRouteActionType.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n* `ForwardToEmail` (value: `\"ForwardToEmail\"`)\n\n* `NotifyViaHttp` (value: `\"NotifyViaHttp\"`)\n\n* `Stop` (value: `\"Stop\"`)\n```\n\n----------------------------------------\n\nTITLE: Adding Unsubscribes in ElasticEmail API (JavaScript)\nDESCRIPTION: This endpoint adds unsubscribes to the suppression list. It uses a POST request to the '/suppressions/unsubscribes' endpoint.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/README.md#2025-04-22_snippet_27\n\nLANGUAGE: JavaScript\nCODE:\n```\nElasticEmail.SuppressionsApi.suppressionsUnsubscribesPost\n```\n\n----------------------------------------\n\nTITLE: Defining Campaign Name for Deletion in Elastic Email API\nDESCRIPTION: This snippet shows how to specify the name of the campaign to be deleted using the Elastic Email API.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/examples/functions/deleteCampaign.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst campaignName = \"example\";\n```\n\n----------------------------------------\n\nTITLE: Defining BodyContentType Enum in ElasticEmail JavaScript Library\nDESCRIPTION: This enum defines the supported content types for email body content in the ElasticEmail JavaScript library. The available options are HTML for HTML-formatted content, PlainText for text-only content, AMP for Accelerated Mobile Pages content, and CSS for stylesheet content.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/BodyContentType.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n* `HTML` (value: `\"HTML\"`)\n\n* `PlainText` (value: `\"PlainText\"`)\n\n* `AMP` (value: `\"AMP\"`)\n\n* `CSS` (value: `\"CSS\"`)\n```\n\n----------------------------------------\n\nTITLE: Email Validation Status Enum Definition\nDESCRIPTION: Defines the possible states for email validation results. Includes None (default), Valid (verified email), Unknown (unable to verify), Risky (potentially problematic), and Invalid (failed validation).\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/EmailValidationStatus.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nenum EmailValidationStatus {\n    None = \"None\",\n    Valid = \"Valid\",\n    Unknown = \"Unknown\",\n    Risky = \"Risky\",\n    Invalid = \"Invalid\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Export File Format Enum in ElasticEmail JS\nDESCRIPTION: Enumerates the available file formats for exporting data from ElasticEmail. Supports CSV (Comma Separated Values), XML (Extensible Markup Language), and JSON (JavaScript Object Notation) formats.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/ExportFileFormats.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nExportFileFormats = {\n  Csv: \"Csv\",\n  Xml: \"Xml\",\n  Json: \"Json\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MergeEmailPayload Properties Schema in Markdown\nDESCRIPTION: Documents the required and optional properties of the MergeEmailPayload object including mergeFile (MessageAttachment), content (EmailContent), and optional options (Options).\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/MergeEmailPayload.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# ElasticEmail.MergeEmailPayload\n\n## Properties\n\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**mergeFile** | [**MessageAttachment**](MessageAttachment.md) |  | \n**content** | [**EmailContent**](EmailContent.md) |  | \n**options** | [**Options**](Options.md) |  | [optional]\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Template in ElasticEmail API (JavaScript)\nDESCRIPTION: This endpoint fetches information for a specific template. It uses a GET request to the '/templates/{name}' endpoint.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/README.md#2025-04-22_snippet_29\n\nLANGUAGE: JavaScript\nCODE:\n```\nElasticEmail.TemplatesApi.templatesByNameGet\n```\n\n----------------------------------------\n\nTITLE: ConsentData Properties Definition in Markdown\nDESCRIPTION: Defines the properties of the ConsentData class, which stores information about user consent for email communications. It includes the IP address of the user, the date of consent, and tracking information.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/ConsentData.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# ElasticEmail.ConsentData\n\n## Properties\n\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**consentIP** | **String** | IP address of consent to send this contact(s) your email. If not provided your current public IP address is used for consent. | [optional] \n**consentDate** | **Date** | Date of consent to send this contact(s) your email. If not provided current date is used for consent. | [optional] \n**consentTracking** | [**ConsentTracking**](ConsentTracking.md) |  | [optional]\n```\n\n----------------------------------------\n\nTITLE: Defining Suppression Model Properties in ElasticEmail JavaScript SDK\nDESCRIPTION: Defines the structure of the Suppression model with properties for the suppressed email address, friendly error message, SMTP error code, and the date when the suppression was last updated.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/Suppression.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# ElasticEmail.Suppression\n\n## Properties\n\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**email** | **String** | Proper email address. | [optional] \n**friendlyErrorMessage** | **String** | RFC error message | [optional] \n**errorCode** | **Number** | SMTP Error code | [optional] \n**dateUpdated** | **Date** | Last change date | [optional]\n```\n\n----------------------------------------\n\nTITLE: Defining ConsentTracking Enum Values in JavaScript\nDESCRIPTION: Enumeration defining the possible consent tracking states for email marketing. Includes Unknown (default state), Allow (consent granted), and Deny (consent refused) values.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/ConsentTracking.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n* `Unknown` (value: `\"Unknown\"`)\n\n* `Allow` (value: `\"Allow\"`)\n\n* `Deny` (value: `\"Deny\"`)\n```\n\n----------------------------------------\n\nTITLE: Defining InboundRouteFilterType Enum in JavaScript for ElasticEmail\nDESCRIPTION: This code snippet defines an enum called InboundRouteFilterType with two possible values: EmailAddress and Subject. It is used to specify the type of filter for inbound email routing in the ElasticEmail system.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/InboundRouteFilterType.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n* `EmailAddress` (value: `\"EmailAddress\"`)\n\n* `Subject` (value: `\"Subject\"`)\n```\n\n----------------------------------------\n\nTITLE: Fetching Channel Statistics from Elastic Email API\nDESCRIPTION: Calls the statisticsChannelsGet method to retrieve channel statistics using the configured options and callback.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/examples/functions/loadChannelsStats.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nstatisticsApi.statisticsChannelsGet(pageinationOptions, callback);\n```\n\n----------------------------------------\n\nTITLE: Loading Elastic Email Library in NodeJS\nDESCRIPTION: Imports the Elastic Email client library for use in a NodeJS application.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/examples/functions/sendTransactionalEmails.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst ElasticEmail = require('@elasticemail/elasticemail-client');\n```\n\n----------------------------------------\n\nTITLE: Running the Elastic Email List Retrieval Script in NodeJS\nDESCRIPTION: This snippet shows the command to execute the NodeJS script for retrieving contact list details.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/examples/functions/loadList.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnode snippet.js\n```\n\n----------------------------------------\n\nTITLE: Define Callback Function\nDESCRIPTION: Creates a callback function to handle the API response\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/examples/functions/deleteList.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst callback = (error, data, response) => {\n    if (error) {\n        console.error(error);\n    } else {\n        console.log('API called successfully.');\n        console.log('List deleted');\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Running the NodeJS Script for Loading Email Template Details\nDESCRIPTION: This snippet shows the command to run the NodeJS script for loading email template details.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/examples/functions/loadTemplate.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnode snippet.js\n```\n\n----------------------------------------\n\nTITLE: Loading Elastic Email Library\nDESCRIPTION: Imports the Elastic Email client library for NodeJS\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/examples/functions/addTemplate.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst ElasticEmail = require('@elasticemail/elasticemail-client');\n```\n\n----------------------------------------\n\nTITLE: Initializing Elastic Email Client in NodeJS\nDESCRIPTION: Loads the Elastic Email library and initializes the API client instance. This is required to interact with the Elastic Email API.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/examples/functions/deleteTemplate.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst ElasticEmail = require('@elasticemail/elasticemail-client');\n\nconst client = ElasticEmail.ApiClient.instance;\n```\n\n----------------------------------------\n\nTITLE: Importing Elastic Email Library\nDESCRIPTION: Loads the Elastic Email NodeJS client library\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/examples/functions/deleteList.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst ElasticEmail = require('@elasticemail/elasticemail-client');\n```\n\n----------------------------------------\n\nTITLE: Fetching Multiple Channels Statistics in ElasticEmail API using JavaScript\nDESCRIPTION: This snippet shows how to retrieve statistics for multiple channels using the ElasticEmail API. It supports optional parameters for limiting and offsetting results.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/StatisticsApi.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport ElasticEmail from '@elasticemail/elasticemail-client';\nlet defaultClient = ElasticEmail.ApiClient.instance;\n// Configure API key authorization: apikey\nlet apikey = defaultClient.authentications['apikey'];\napikey.apiKey = 'YOUR API KEY';\n// Uncomment the following line to set a prefix for the API key, e.g. \"Token\" (defaults to null)\n//apikey.apiKeyPrefix = 'Token';\n\nlet apiInstance = new ElasticEmail.StatisticsApi();\nlet opts = {\n  'limit': 100, // Number | Maximum number of returned items.\n  'offset': 20 // Number | How many items should be returned ahead.\n};\napiInstance.statisticsChannelsGet(opts, (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Bounces in ElasticEmail using JavaScript\nDESCRIPTION: Code example for adding email addresses to the bounce list. Limited to 1000 emails per request and requires ModifyContacts or ModifySuppressions access level.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/SuppressionsApi.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport ElasticEmail from '@elasticemail/elasticemail-client';\nlet defaultClient = ElasticEmail.ApiClient.instance;\n// Configure API key authorization: apikey\nlet apikey = defaultClient.authentications['apikey'];\napikey.apiKey = 'YOUR API KEY';\n// Uncomment the following line to set a prefix for the API key, e.g. \"Token\" (defaults to null)\n//apikey.apiKeyPrefix = 'Token';\n\nlet apiInstance = new ElasticEmail.SuppressionsApi();\nlet requestBody = [\"null\"]; // [String] | Emails to add as bounces. Limited to 1000 per request\napiInstance.suppressionsBouncesPost(requestBody, (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Defining SortOrderItem model properties for ElasticEmail JavaScript SDK\nDESCRIPTION: Specifies the properties of the SortOrderItem model, which is used to change the order of inbound routes. It contains the publicInboundId for identifying the route and sortOrder to define its priority (with 1 being the highest priority).\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/SortOrderItem.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# ElasticEmail.SortOrderItem\n\n## Properties\n\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**publicInboundId** | **String** | ID of the route to change the order of | \n**sortOrder** | **Number** | 1 - route will be used first | \n```\n\n----------------------------------------\n\nTITLE: Initializing Elastic Email API Client in NodeJS\nDESCRIPTION: This snippet shows how to load the Elastic Email library, initialize the API client, and set the API key for authentication.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/examples/functions/uploadContacts.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst ElasticEmail = require('@elasticemail/elasticemail-client');\n\nconst client = ElasticEmail.ApiClient.instance;\n\nconst apikey = client.authentications['apikey'];\napikey.apiKey = \"YOUR_API_KEY\";\n```\n\n----------------------------------------\n\nTITLE: Configuring Contact Import Options in NodeJS\nDESCRIPTION: This snippet shows how to configure the options for importing contacts, including the list name, file encoding, and the file stream.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/examples/functions/uploadContacts.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst options = {\n    listName: \"New list\",\n    encodingName: 'utf-8',\n    file: readStream,\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Callback Function\nDESCRIPTION: Defines the callback function to handle API response and errors\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/examples/functions/addContacts.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst callback = (error, data, response) => {\n    if (error) {\n        console.error(error);\n    } else {\n        console.log('API called successfully.');\n        console.log('Contacts added.');\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Sending Bulk Email\nDESCRIPTION: Executes the email sending operation using the configured data\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/examples/functions/sendBulkEmails.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nemailsApi.emailsPost(emailData, callback);\n```\n\n----------------------------------------\n\nTITLE: Updating SubAccount Email Settings in JavaScript\nDESCRIPTION: This snippet shows how to update SubAccount email settings using the ElasticEmail API. It requires the ModifySubAccounts access level and uses the subaccountsByEmailSettingsEmailPut method.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/SubAccountsApi.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport ElasticEmail from '@elasticemail/elasticemail-client';\nlet defaultClient = ElasticEmail.ApiClient.instance;\n// Configure API key authorization: apikey\nlet apikey = defaultClient.authentications['apikey'];\napikey.apiKey = 'YOUR API KEY';\n// Uncomment the following line to set a prefix for the API key, e.g. \"Token\" (defaults to null)\n//apikey.apiKeyPrefix = 'Token';\n\nlet apiInstance = new ElasticEmail.SubAccountsApi();\nlet email = \"email_example\"; // String | \nlet subaccountEmailSettings = new ElasticEmail.SubaccountEmailSettings(); // SubaccountEmailSettings | Updated Email Settings\napiInstance.subaccountsByEmailSettingsEmailPut(email, subaccountEmailSettings, (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Fetching General Statistics in ElasticEmail API (JavaScript)\nDESCRIPTION: This endpoint retrieves overall statistics. It uses a GET request to the '/statistics' endpoint.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/README.md#2025-04-22_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nElasticEmail.StatisticsApi.statisticsGet\n```\n\n----------------------------------------\n\nTITLE: Executing Export Operation\nDESCRIPTION: Calls the contacts export API endpoint with configured options\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/examples/functions/exportContacts.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ncontactsApi.contactsExportPost(options, callback);\n```\n\n----------------------------------------\n\nTITLE: Updating SubAccount Email Credits in JavaScript\nDESCRIPTION: This snippet demonstrates how to update email credits of a SubAccount using the ElasticEmail API. It requires the ModifySubAccounts access level and uses the subaccountsByEmailCreditsPatch method.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/SubAccountsApi.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport ElasticEmail from '@elasticemail/elasticemail-client';\nlet defaultClient = ElasticEmail.ApiClient.instance;\n// Configure API key authorization: apikey\nlet apikey = defaultClient.authentications['apikey'];\napikey.apiKey = 'YOUR API KEY';\n// Uncomment the following line to set a prefix for the API key, e.g. \"Token\" (defaults to null)\n//apikey.apiKeyPrefix = 'Token';\n\nlet apiInstance = new ElasticEmail.SubAccountsApi();\nlet email = \"mail@example.com\"; // String | Email address of Sub-Account\nlet subaccountEmailCreditsPayload = new ElasticEmail.SubaccountEmailCreditsPayload(); // SubaccountEmailCreditsPayload | Amount of email credits to add or subtract from the current SubAccount email credits pool (positive or negative value)\napiInstance.subaccountsByEmailCreditsPatch(email, subaccountEmailCreditsPayload, (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Elastic Email API Client Instance\nDESCRIPTION: Creates an instance of the Elastic Email API client for making API calls.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/examples/functions/deleteContact.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst client = ElasticEmail.ApiClient.instance;\n```\n\n----------------------------------------\n\nTITLE: Setting Pagination Options for Elastic Email API Requests in NodeJS\nDESCRIPTION: This snippet defines pagination options for the API request, setting the limit to 0 to retrieve all available data.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/examples/functions/loadCampaignsStats.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst pageinationOptions = {\n    limit: 0,\n    offset: 0,\n};\n```\n\n----------------------------------------\n\nTITLE: Deleting a SubAccount in ElasticEmail API (JavaScript)\nDESCRIPTION: This endpoint deletes a specific subaccount. It uses a DELETE request to the '/subaccounts/{email}' endpoint.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/README.md#2025-04-22_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nElasticEmail.SubAccountsApi.subaccountsByEmailDelete\n```\n\n----------------------------------------\n\nTITLE: Retrieving Bounce List in ElasticEmail API (JavaScript)\nDESCRIPTION: This endpoint fetches the list of bounced emails. It uses a GET request to the '/suppressions/bounces' endpoint.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/README.md#2025-04-22_snippet_16\n\nLANGUAGE: JavaScript\nCODE:\n```\nElasticEmail.SuppressionsApi.suppressionsBouncesGet\n```\n\n----------------------------------------\n\nTITLE: Deleting a Segment using ElasticEmail API in JavaScript\nDESCRIPTION: This snippet demonstrates how to delete an existing segment using the ElasticEmail API. It requires the ModifyContacts access level and uses the segment name as a parameter.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/docs/SegmentsApi.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport ElasticEmail from '@elasticemail/elasticemail-client';\nlet defaultClient = ElasticEmail.ApiClient.instance;\n// Configure API key authorization: apikey\nlet apikey = defaultClient.authentications['apikey'];\napikey.apiKey = 'YOUR API KEY';\n// Uncomment the following line to set a prefix for the API key, e.g. \"Token\" (defaults to null)\n//apikey.apiKeyPrefix = 'Token';\n\nlet apiInstance = new ElasticEmail.SegmentsApi();\nlet name = \"My Segment 1\"; // String | Name of your segment.\napiInstance.segmentsByNameDelete(name, (error, data, response) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully.');\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Running the Elastic Email Transactional Email Script in NodeJS\nDESCRIPTION: Command to execute the NodeJS script for sending a transactional email using Elastic Email.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/examples/functions/sendTransactionalEmails.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnode snippet.js\n```\n\n----------------------------------------\n\nTITLE: Setting API Authentication\nDESCRIPTION: Configures API key authentication for the client.\nSOURCE: https://github.com/elasticemail/elasticemail-js/blob/master/examples/functions/addCampaign.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst apikey = client.authentications['apikey'];\napikey.apiKey = \"YOUR_API_KEY\";\n```"
  }
]