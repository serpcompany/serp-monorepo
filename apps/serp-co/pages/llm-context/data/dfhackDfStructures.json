[
  {
    "owner": "dfhack",
    "repo": "df-structures",
    "content": "TITLE: Defining Structure Types in XML for DF Structures\nDESCRIPTION: Example of structure type definition in XML. Includes attributes for unions, inheritance, instance vectors, and key fields that can be used for binary search.\nSOURCE: https://github.com/dfhack/df-structures/blob/master/SYNTAX.rst#2025-04-21_snippet_4\n\nLANGUAGE: XML\nCODE:\n```\n<struct-type type-name='name'\n            [is-union='true/false']\n            [inherits-from='struct_type']\n            [instance-vector='expr']\n            [key-field='identifier']>\n    ...\n    fields\n    ...\n</struct-type>\n```\n\n----------------------------------------\n\nTITLE: Defining Enum Types in XML for DF Structures\nDESCRIPTION: Example of how to define enum types in XML for DF data structures. Includes syntax for enum items with optional name and value attributes, and shows the base-type attribute that defaults to int32_t.\nSOURCE: https://github.com/dfhack/df-structures/blob/master/SYNTAX.rst#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<enum-type type-name='name' [base-type='int32_t']>\n    <enum-item [name='key1'] [value='0']/>\n    <enum-item [name='key2'] [value='1']/>\n    ...\n</enum-type>\n```\n\n----------------------------------------\n\nTITLE: STL Container Definitions\nDESCRIPTION: Shows how to define various STL containers like vector, deque, set, and bit-vector.\nSOURCE: https://github.com/dfhack/df-structures/blob/master/SYNTAX.rst#2025-04-21_snippet_18\n\nLANGUAGE: xml\nCODE:\n```\n<stl-vector name='id'.../>\n\n<stl-deque name='id'.../>\n\n<stl-set name='id'.../>\n\n<stl-bit-vector name='id'.../>\n\n```\n\n----------------------------------------\n\nTITLE: Defining Substructure Fields in XML for DF Structures\nDESCRIPTION: Examples of nested structure definitions in XML. Shows how to reference an existing type or define an ad-hoc structure inline, with options for anonymous nested structs or unions.\nSOURCE: https://github.com/dfhack/df-structures/blob/master/SYNTAX.rst#2025-04-21_snippet_11\n\nLANGUAGE: XML\nCODE:\n```\n<compound name='id' type-name='struct_type'/>\n\n<compound [name='id'] [is-union='true/false'] [key-field='id']>\n    ...\n    field\n    ...\n</compound>\n```\n\n----------------------------------------\n\nTITLE: Class Type Definition with Virtual Methods\nDESCRIPTION: Shows how to define a class type with inheritance and virtual methods. Classes are similar to struct types but include virtual method tables.\nSOURCE: https://github.com/dfhack/df-structures/blob/master/SYNTAX.rst#2025-04-21_snippet_20\n\nLANGUAGE: xml\nCODE:\n```\n<class-type type-name='name'\n           [inherits-from='class_type']\n           [original-name='vtable_name']\n           ...>\n    ...\n    fields\n    ...\n    <virtual-methods>\n        ...\n        vmethods\n        ...\n    </virtual-methods>\n</class-type>\n```\n\n----------------------------------------\n\nTITLE: Defining Bitfield Types in XML for DF Structures\nDESCRIPTION: Example of bitfield type definition in XML. Includes syntax for flag bits with optional name, count, and enum type attributes, and the base-type attribute defaulting to uint32_t.\nSOURCE: https://github.com/dfhack/df-structures/blob/master/SYNTAX.rst#2025-04-21_snippet_3\n\nLANGUAGE: XML\nCODE:\n```\n<bitfield-type type-name='name' [base-type='uint32_t']>\n    <flag-bit [name='bit1'] [count='1'] [type-name='enum']/>\n    <flag-bit [name='bit2'] [count='1'] [type-name='enum']/>\n    ...\n</bitfield-type>\n```\n\n----------------------------------------\n\nTITLE: Defining Enum Fields in XML\nDESCRIPTION: Shows how to define enum fields in the XML format. Enums can be defined either as references to global enum types or as ad-hoc definitions with enum items listed inline.\nSOURCE: https://github.com/dfhack/df-structures/blob/master/SYNTAX.rst#2025-04-21_snippet_12\n\nLANGUAGE: xml\nCODE:\n```\n<enum name='id' type-name='enum_type' [base-type='int32_t']/>\n\n<enum name='id' [base-type='int32_t']>\n    <enum-item name='key1'.../>\n    ...\n</enum>\n```\n\n----------------------------------------\n\nTITLE: DF-Specific Container Definitions\nDESCRIPTION: Shows how to define Dwarf Fortress specific container types like flagarrays, static flagarrays, and linked lists.\nSOURCE: https://github.com/dfhack/df-structures/blob/master/SYNTAX.rst#2025-04-21_snippet_19\n\nLANGUAGE: xml\nCODE:\n```\n<df-flagarray name='id' index-enum='enum'/>\n\n<df-static-flagarray name='id' index-enum='enum' count='numbytes'/>\n\n<df-array name='id' .../>\n\n<df-linked-list name='id' type-name='foo_link'/>\n\n<df-linked-list-type type-name='foo_link' item-type='foo'/>\n\n<df-other-vectors-type type-name='foo_other' index-enum='foo_other_id' item-type='foo'/>\n```\n\n----------------------------------------\n\nTITLE: Abstract Container Syntax in XML\nDESCRIPTION: Shows the basic syntax for container types that reference other objects. Containers follow a common pattern of containing a nested field tag to specify the contained item type.\nSOURCE: https://github.com/dfhack/df-structures/blob/master/SYNTAX.rst#2025-04-21_snippet_14\n\nLANGUAGE: xml\nCODE:\n```\n<container>\n    <field .../>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Defining Nested Bitfields in XML\nDESCRIPTION: Shows how to define ad-hoc bitfields within structures. Bitfields allow packing multiple boolean flags or small values into a single integer value.\nSOURCE: https://github.com/dfhack/df-structures/blob/master/SYNTAX.rst#2025-04-21_snippet_13\n\nLANGUAGE: xml\nCODE:\n```\n<bitfield name='id' [base-type='uint32_t']>\n    <flag-bit name='key1'.../>\n    ...\n</bitfield>\n```\n\n----------------------------------------\n\nTITLE: Defining Primitive Fields in XML for DF Structures - Numbers\nDESCRIPTION: Example of number field definition in XML. Shows the syntax for integer types like int32_t, with additional numeric types supported including float types.\nSOURCE: https://github.com/dfhack/df-structures/blob/master/SYNTAX.rst#2025-04-21_snippet_6\n\nLANGUAGE: XML\nCODE:\n```\n<int32_t name='id'.../>\n```\n\n----------------------------------------\n\nTITLE: Defining Primitive Fields in XML for DF Structures - Strings\nDESCRIPTION: Examples of string field definitions in XML. Includes static strings with fixed size, pointer strings, and STL strings.\nSOURCE: https://github.com/dfhack/df-structures/blob/master/SYNTAX.rst#2025-04-21_snippet_8\n\nLANGUAGE: XML\nCODE:\n```\n<static-string name='id' size='bytes'.../>\n<ptr-string name='id'.../>\n<stl-string name='id'.../>\n```\n\n----------------------------------------\n\nTITLE: Virtual Method Definitions\nDESCRIPTION: Shows how to define virtual methods, including destructors and methods with parameters and return types.\nSOURCE: https://github.com/dfhack/df-structures/blob/master/SYNTAX.rst#2025-04-21_snippet_21\n\nLANGUAGE: xml\nCODE:\n```\n<vmethod is-destructor='true'/>\n\n<vmethod [name='id'] [ret-type='type']>\n    [<ret-type .../>]\n    <field1.../>\n    <field2.../>\n    ...\n</vmethod>\n```\n\n----------------------------------------\n\nTITLE: Complex Cross-References Between Arrays in XML\nDESCRIPTION: Defines a caste_raw structure with nested cross-references between vectors. Shows how to navigate complex parent relationships and refer to fields in related structures.\nSOURCE: https://github.com/dfhack/df-structures/blob/master/SYNTAX.rst#2025-04-21_snippet_27\n\nLANGUAGE: xml\nCODE:\n```\n<struct-type type-name='caste_raw'>\n    <compound name='body_info'>\n        <stl-vector name='body_parts' pointer-type='body_part_raw'/>\n    </compound>\n    <compound name='bp_appearance'>\n        <stl-vector name='modifiers' pointer-type='bp_appearance_modifier'/>\n\n        <stl-vector name='modifier_idx' type-name='int32_t'\n                    refers-to='$$._parent._parent.modifiers[$]'\n                    index-refers-to='$$._parent.part_idx[$].refers-to'/>\n        <stl-vector name='part_idx' type-name='int16_t'\n                    refers-to='$$._global.body_info.body_parts[$]'/>\n        <stl-vector name='layer_idx' type-name='int16_t'\n                    refers-to='$$._parent._parent.part_idx[$$._key].refers-to.layers[$]'\n                    index-refers-to='$$._parent.part_idx[$].refers-to'/>\n    </compound>\n</struct-type>\n```\n\n----------------------------------------\n\nTITLE: Accessing Vector Elements with index-refers-to in XML\nDESCRIPTION: Defines an STL vector where each index refers to a specific weapon item definition. This creates a relationship between vector indices and global weapon definitions.\nSOURCE: https://github.com/dfhack/df-structures/blob/master/SYNTAX.rst#2025-04-21_snippet_24\n\nLANGUAGE: xml\nCODE:\n```\n<stl-vector name='created_weapons' type-name='int32_t'\n            index-refers-to='$global.world.raws.itemdefs.weapons[$]'/>\n```\n\n----------------------------------------\n\nTITLE: Reference Targeting with Auxiliary Values in XML\nDESCRIPTION: Demonstrates how to create references between fields where one field requires context from another. The caste field references a caste_raw object but requires the race value as auxiliary information.\nSOURCE: https://github.com/dfhack/df-structures/blob/master/SYNTAX.rst#2025-04-21_snippet_26\n\nLANGUAGE: xml\nCODE:\n```\n<int32_t name='race' ref-target='creature_raw'/>\n<int16_t name='caste' ref-target='caste_raw' aux-value='$$.race'/>\n```\n\n----------------------------------------\n\nTITLE: Defining Enum Attributes in XML for DF Structures\nDESCRIPTION: Syntax for declaring enum attributes that associate metadata with enum items. Includes options for specifying type, default values, using key names as values, and defining list attributes.\nSOURCE: https://github.com/dfhack/df-structures/blob/master/SYNTAX.rst#2025-04-21_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<enum-attr name='attr'\n          [type-name='primitive-or-enum']\n          [default-value='...']\n          [use-key-name='true/false']\n          [is-list='true/false']/>\n```\n\n----------------------------------------\n\nTITLE: Static Array Container Definition\nDESCRIPTION: Shows how to define a static array container with a specific count of elements.\nSOURCE: https://github.com/dfhack/df-structures/blob/master/SYNTAX.rst#2025-04-21_snippet_17\n\nLANGUAGE: xml\nCODE:\n```\n<static-array name='id' count='123' .../>\n```\n\n----------------------------------------\n\nTITLE: Defining Primitive Fields in XML for DF Structures - Boolean\nDESCRIPTION: Example of boolean field definition in XML structures.\nSOURCE: https://github.com/dfhack/df-structures/blob/master/SYNTAX.rst#2025-04-21_snippet_7\n\nLANGUAGE: XML\nCODE:\n```\n<bool name='id'.../>\n```\n\n----------------------------------------\n\nTITLE: Compound with Parent Reference in XML\nDESCRIPTION: Defines a burrows compound containing a vector of burrow objects and a selection index that refers back to the list using parent reference navigation.\nSOURCE: https://github.com/dfhack/df-structures/blob/master/SYNTAX.rst#2025-04-21_snippet_25\n\nLANGUAGE: xml\nCODE:\n```\n<compound name='burrows'>\n    <stl-vector name='list' pointer-type='burrow'/>\n    <int32_t name='sel_index' refers-to='$$._parent.list[$]'/>\n</compound>\n```\n\n----------------------------------------\n\nTITLE: Defining Enum Item Attributes in XML for DF Structures\nDESCRIPTION: Example of how to define attribute values for enum items. Multiple item-attr entries can be used for list attributes.\nSOURCE: https://github.com/dfhack/df-structures/blob/master/SYNTAX.rst#2025-04-21_snippet_2\n\nLANGUAGE: XML\nCODE:\n```\n<enum-item name='key'>\n    <item-attr name='attr' value='...'/>\n    ...\n</enum-item>\n```\n\n----------------------------------------\n\nTITLE: Basic DFHack Object Dereferencing\nDESCRIPTION: Demonstrates the sequence of operations for dereferencing an object through part_idx and following the refers-to link.\nSOURCE: https://github.com/dfhack/df-structures/blob/master/SYNTAX.rst#2025-04-21_snippet_28\n\nLANGUAGE: dfhack\nCODE:\n```\ntmp = @xxx.part_idx\ntmp = @tmp[foo]\nobj = @tmp.refers-to\n($ obj t)\n```\n\n----------------------------------------\n\nTITLE: Container Type-Name Attribute Rewrite Example\nDESCRIPTION: Shows how the type-name attribute in containers is automatically rewritten to create a nested compound or primitive type field.\nSOURCE: https://github.com/dfhack/df-structures/blob/master/SYNTAX.rst#2025-04-21_snippet_15\n\nLANGUAGE: xml\nCODE:\n```\n<container type-name='foo' .../>\n```\n\n----------------------------------------\n\nTITLE: Container Pointer-Type Attribute Rewrite Example\nDESCRIPTION: Shows how the pointer-type attribute in containers is automatically rewritten to create a nested pointer field.\nSOURCE: https://github.com/dfhack/df-structures/blob/master/SYNTAX.rst#2025-04-21_snippet_16\n\nLANGUAGE: xml\nCODE:\n```\n<container pointer-type='foo' .../>\n```\n\n----------------------------------------\n\nTITLE: Complex DFHack Layer Index Reference\nDESCRIPTION: Shows a complex reference path using parent relationships and key indexing to access layer objects.\nSOURCE: https://github.com/dfhack/df-structures/blob/master/SYNTAX.rst#2025-04-21_snippet_29\n\nLANGUAGE: dfhack\nCODE:\n```\nrefers-to='$$._parent._parent.part_idx[$$._key].refers-to.layers[$]'\n```\n\n----------------------------------------\n\nTITLE: Defining Primitive Fields in XML for DF Structures - Path\nDESCRIPTION: Example of filesystem path field definition in XML, representing std::filesystem::path for architecture-independent filesystem paths.\nSOURCE: https://github.com/dfhack/df-structures/blob/master/SYNTAX.rst#2025-04-21_snippet_9\n\nLANGUAGE: XML\nCODE:\n```\n<stl-fs-path name='id'.../>\n```\n\n----------------------------------------\n\nTITLE: Defining Primitive Fields in XML for DF Structures - Padding\nDESCRIPTION: Example of defining padding (unmarked area) within a structure. Specifies the size in bytes and optional alignment.\nSOURCE: https://github.com/dfhack/df-structures/blob/master/SYNTAX.rst#2025-04-21_snippet_5\n\nLANGUAGE: XML\nCODE:\n```\n<padding name='id' size='bytes' [alignment='1/2/4'] .../>\n```\n\n----------------------------------------\n\nTITLE: Global Object Definition\nDESCRIPTION: Shows how to define global objects, which are global pointers initialized from symbols.xml at runtime.\nSOURCE: https://github.com/dfhack/df-structures/blob/master/SYNTAX.rst#2025-04-21_snippet_22\n\nLANGUAGE: xml\nCODE:\n```\n<global-object name='id' type-name='.../'/>\n\n<global-object name='id'>\n    <field.../>\n</global-object>\n```\n\n----------------------------------------\n\nTITLE: Defining Primitive Fields in XML for DF Structures - File Stream\nDESCRIPTION: Example of file stream field definition in XML, treated as a predefined opaque object similar to padding.\nSOURCE: https://github.com/dfhack/df-structures/blob/master/SYNTAX.rst#2025-04-21_snippet_10\n\nLANGUAGE: XML\nCODE:\n```\n<stl-fstream name='id'/>\n```\n\n----------------------------------------\n\nTITLE: Symbol Table Definition\nDESCRIPTION: Shows how to define symbol tables in symbols.xml, which specify locations of global objects and virtual tables for different game versions.\nSOURCE: https://github.com/dfhack/df-structures/blob/master/SYNTAX.rst#2025-04-21_snippet_23\n\nLANGUAGE: xml\nCODE:\n```\n<symbol-table name='...' os-type='...'>\n    <md5-hash value='...'/>\n    <binary-timestamp value='0x...'/>\n    ...\n\n    <global-address name='...' [value='0x...']/>\n    ...\n\n    <vtable-address name='...' [value='0x...'] [base='...']/>\n    ...\n</symbol-table>\n```\n\n----------------------------------------\n\nTITLE: Configuring and Building XML Dump Utilities in CMake\nDESCRIPTION: Sets up CMake build configuration for XML dump utilities, including dependency checks for Perl and Python, custom command for generating C++ source files, and executable target setup. The script manages build options, file generation dependencies, and optional installation.\nSOURCE: https://github.com/dfhack/df-structures/blob/master/tools/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\noption(BUILD_XMLDUMP \"Build utilities that dump df-structures information (for CI)\" OFF)\noption(INSTALL_XMLDUMP \"Install utilities that dump df-structures information (for CI)\" OFF)\nif(BUILD_XMLDUMP)\n    find_package(Perl REQUIRED)\n    find_package(Python 3 REQUIRED)\n    file(GLOB XML_FILES ../df.*.xml)\n    set(TYPE_DUMP_GENERATOR \"${CMAKE_CURRENT_SOURCE_DIR}/generate-type-dump.py\")\n    add_custom_command(OUTPUT dump-type-sizes.cpp\n        COMMAND ${Python_EXECUTABLE} \"${TYPE_DUMP_GENERATOR}\"\n            --template \"${CMAKE_CURRENT_SOURCE_DIR}/dump-type-sizes.cpp.in\"\n            --output \"${CMAKE_CURRENT_BINARY_DIR}/dump-type-sizes.cpp\"\n            --perl \"${PERL_EXECUTABLE}\"\n        VERBATIM\n        DEPENDS ${XML_FILES} \"${TYPE_DUMP_GENERATOR}\"\n    )\n    add_executable(xml-dump-type-sizes dump-type-sizes.cpp)\n    add_dependencies(xml-dump-type-sizes generate_headers)\n    target_include_directories(xml-dump-type-sizes PRIVATE ${dfapi_SOURCE_DIR}/include)\n    if(INSTALL_XMLDUMP)\n        install(TARGETS xml-dump-type-sizes DESTINATION .)\n    endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Structure Definitions Template Format\nDESCRIPTION: Template showing the standard format for documenting new version changes in the changelog\nSOURCE: https://github.com/dfhack/df-structures/blob/master/changelog.txt#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n## Structures\n\n```\n\n----------------------------------------\n\nTITLE: Build Changelog Note\nDESCRIPTION: Important note about changelog generation requirements and version sorting\nSOURCE: https://github.com/dfhack/df-structures/blob/master/changelog.txt#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nNOTE: currently, gen_changelog.txt expects a \"Future\" section to exist at the\ntop of this file (even if no changes are listed under it), or you will get a\n\"Entry without section\" error. Also, to maintain proper sorting in the generated\nchangelogs when making a new release, docs/changelog.txt in the dfhack repo must\nhave the new release listed in the right place, even if no changes were made in\nthat repo.\n```\n\n----------------------------------------\n\nTITLE: Adding Tools Subdirectory in CMake\nDESCRIPTION: Adds the tools subdirectory to the CMake build process. This allows CMake to process any CMakeLists.txt file within the tools directory as part of the overall build configuration.\nSOURCE: https://github.com/dfhack/df-structures/blob/master/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(tools)\n```"
  }
]