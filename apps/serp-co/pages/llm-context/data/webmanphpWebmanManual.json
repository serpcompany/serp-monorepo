[
  {
    "owner": "webman-php",
    "repo": "webman-manual",
    "content": "TITLE: Displaying Webman PHP Project Directory Structure\nDESCRIPTION: Complete directory tree showing the organization of a Webman PHP project, including core directories, configuration files, and their purposes. Each directory and file is annotated with its specific function in the application.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/directory.md#2025-04-12_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n.\n├── app                           Application directory\n│   ├── controller                Controller directory\n│   ├── model                     Model directory\n│   ├── view                      View directory\n│   ├── middleware                Middleware directory\n│   │   └── StaticFile.php        Built-in static file middleware\n|   └── functions.php             Business custom functions are written here\n|\n├── config                        Configuration directory\n│   ├── app.php                   Application configuration\n│   ├── autoload.php              Files configured here will be automatically loaded\n│   ├── bootstrap.php             Callback configuration that runs the onWorkerStart when the process is started\n│   ├── container.php             Container configuration\n│   ├── dependence.php            Container dependency configuration\n│   ├── database.php              Database configuration\n│   ├── exception.php             Exception configuration\n│   ├── log.php                   Log configuration\n│   ├── middleware.php            Middleware configuration\n│   ├── process.php               Custom process configuration\n│   ├── redis.php                 Redis configuration\n│   ├── route.php                 Route configuration\n│   ├── server.php                Server configuration including ports, number of processes, etc.\n│   ├── view.php                  View configuration\n│   ├── static.php                Static file switch and static file middleware configuration\n│   ├── translation.php           Multilingual configuration\n│   └── session.php               Session configuration\n├── public                        Static resource directory\n├── process                       Custom process directory\n├── runtime                       Runtime directory of the application, which requires write permission\n├── start.php                     Service start file\n├── vendor                        Directory where third-party libraries installed by Composer are stored\n└── support                       Library adaptation (including third-party libraries)\n    ├── Request.php               Request class\n    ├── Response.php              Response class\n    ├── Plugin.php                Plugin installation and uninstallation script\n    ├── helpers.php               Helper functions (business custom functions should be written in app/functions.php)\n    └── bootstrap.php             Initialization script after the process is started\n```\n\n----------------------------------------\n\nTITLE: Authentication Middleware Implementation\nDESCRIPTION: Complete authentication middleware example that checks user session and handles protected routes using reflection.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/middleware.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\middleware;\n\nuse ReflectionClass;\nuse Webman\\MiddlewareInterface;\nuse Webman\\Http\\Response;\nuse Webman\\Http\\Request;\n\nclass AuthCheckTest implements MiddlewareInterface\n{\n    public function process(Request $request, callable $handler) : Response\n    {\n        if (session('user')) {\n            return $handler($request);\n        }\n\n        $controller = new ReflectionClass($request->controller);\n        $noNeedLogin = $controller->getDefaultProperties()['noNeedLogin'] ?? [];\n\n        if (!in_array($request->action, $noNeedLogin)) {\n            return redirect('/user/login');\n        }\n\n        return $handler($request);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Pessimistic Database Locking in PHP\nDESCRIPTION: Implements database locking mechanisms to prevent concurrent modifications during transactions. Provides shared lock and update lock strategies to control data access and modification.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/db/queries.md#2025-04-12_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')->where('votes', '>', 100)->sharedLock()->get();\n\nDb::table('users')->where('votes', '>', 100)->lockForUpdate()->get();\n```\n\n----------------------------------------\n\nTITLE: Webman Route Interface Methods\nDESCRIPTION: Comprehensive list of route definition methods for different HTTP request types and routing configurations\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/es/route.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nRoute::any($uri, $callback);\nRoute::get($uri, $callback);\nRoute::post($uri, $callback);\nRoute::put($uri, $callback);\nRoute::patch($uri, $callback);\nRoute::delete($uri, $callback);\nRoute::head($uri, $callback);\nRoute::add(['GET', 'POST', 'PUT', 'DELETE', 'PATCH', 'HEAD', 'OPTIONS'], $uri, $callback);\nRoute::group($path, $callback);\nRoute::resource($path, $callback, [$options]);\nRoute::disableDefaultRoute($plugin = '');\nRoute::fallback($callback, $plugin = '');\n```\n\n----------------------------------------\n\nTITLE: Creating Webman Project with Composer\nDESCRIPTION: Initializes a new Webman project using Composer package manager. Requires Composer version 2.0 or higher and PHP 7.2+. Handles project scaffolding and dependency installation.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/install.md#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer create-project workerman/webman\n```\n\n----------------------------------------\n\nTITLE: Authentication Middleware in Webman PHP\nDESCRIPTION: This code shows an example of an authentication middleware in Webman PHP. It checks if a user is logged in by examining the session. If the user is not logged in and the requested action requires authentication, it redirects to the login page, preventing the request from reaching the controller.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/middleware.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n\"<?php\nnamespace app\\middleware;\n\nuse ReflectionClass;\nuse Webman\\MiddlewareInterface;\nuse Webman\\Http\\Response;\nuse Webman\\Http\\Request;\n\nclass AuthCheckTest implements MiddlewareInterface\n{\n    public function process(Request $request, callable $handler) : Response\n    {\n        if (session('user')) {\n            // 已经登录，请求继续向洋葱芯穿越\n            return $handler($request);\n        }\n\n        // 通过反射获取控制器哪些方法不需要登录\n        $controller = new ReflectionClass($request->controller);\n        $noNeedLogin = $controller->getDefaultProperties()['noNeedLogin'] ?? [];\n\n        // 访问的方法需要登录\n        if (!in_array($request->action, $noNeedLogin)) {\n            // 拦截请求，返回一个重定向响应，请求停止向洋葱芯穿越\n            return redirect('/user/login');\n        }\n\n        // 不需要登录，请求继续向洋葱芯穿越\n        return $handler($request);\n    }\n}\"\n```\n\n----------------------------------------\n\nTITLE: CORS Middleware Implementation in PHP\nDESCRIPTION: Cross-Origin Request middleware that handles OPTIONS requests and adds necessary CORS headers to responses.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/de/middleware.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\middleware;\n\nuse Webman\\MiddlewareInterface;\nuse Webman\\Http\\Response;\nuse Webman\\Http\\Request;\n\nclass AccessControlTest implements MiddlewareInterface\n{\n    public function process(Request $request, callable $handler) : Response\n    {\n        $response = $request->method() == 'OPTIONS' ? response('') : $handler($request);\n        \n        $response->withHeaders([\n            'Access-Control-Allow-Credentials' => 'true',\n            'Access-Control-Allow-Origin' => $request->header('origin', '*'),\n            'Access-Control-Allow-Methods' => $request->header('access-control-request-method', '*'),\n            'Access-Control-Allow-Headers' => $request->header('access-control-request-headers', '*'),\n        ]);\n        \n        return $response;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking IsClean and WasChanged in Eloquent - PHP\nDESCRIPTION: This snippet demonstrates the wasChanged method to verify if any attributes on a model have changed after saving it in the current request cycle. It also provides the ability to check specific attributes for changes.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/db/model.md#2025-04-12_snippet_12\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n$user = User::create([\n    'first_name' => 'Taylor',\n    'last_name' => 'Otwell',\n    'title' => 'Developer',\n]);\n\n$user->title = 'Painter';\n$user->save();\n\n$user->wasChanged(); // true\n$user->wasChanged('title'); // true\n$user->wasChanged('first_name'); // false\n```\n\n----------------------------------------\n\nTITLE: Basic Database Query Example in UserController\nDESCRIPTION: Controller example demonstrating how to use the database connection to query user information. Shows basic usage of the Query Builder to fetch a username by UID.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/db/tutorial.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\nuse support\\Db;\n\nclass UserController\n{\n    public function db(Request $request)\n    {\n        $default_uid = 29;\n        $uid = $request->get('uid', $default_uid);\n        $name = Db::table('users')->where('uid', $uid)->value('username');\n        return response(\"hello $name\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Event Subscriptions in PHP\nDESCRIPTION: Example of how to configure event subscriptions in the config/event.php file. It shows how to map event names to their corresponding handling functions.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/components/event.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nreturn [\n    'user.register' => [\n        [app\\event\\User::class, 'register'],\n        // ...other event handling functions...\n    ],\n    'user.logout' => [\n        [app\\event\\User::class, 'logout'],\n        // ...other event handling functions...\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Using Various Validation Methods with respect/validation in PHP\nDESCRIPTION: Comprehensive examples of using Respect\\Validation for various validation scenarios, including single-rule validation, chained rules, error handling, object validation, array validation, and optional validations.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-hk/components/validation.md#2025-04-12_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Respect\\Validation\\Validator as v;\n\n// 單一規則驗證\n$number = 123;\nv::numericVal()->validate($number); // true\n\n// 多個規則鏈式驗證\n$usernameValidator = v::alnum()->noWhitespace()->length(1, 15);\n$usernameValidator->validate('alganet'); // true\n\n// 獲取第一個驗證失敗原因\ntry {\n    $usernameValidator->setName('用戶名')->check('alg  anet');\n} catch (ValidationException $exception) {\n    echo $exception->getMessage(); // 用戶名 只能包含字母（a-z）和數字（0-9）\n}\n\n// 獲取所有驗證失敗的原因\ntry {\n    $usernameValidator->setName('用戶名')->assert('alg  anet');\n} catch (ValidationException $exception) {\n    echo $exception->getFullMessage();\n    // 將會打印\n    // -  用戶名 必須符合以下規則\n    //     - 用戶名 只能包含字母（a-z）和數字（0-9）\n    //     - 用戶名 不能包含空格\n  \n    var_export($exception->getMessages());\n    // 將會打印\n    // array (\n    //   'alnum' => '用戶名 只能包含字母（a-z）和數字（0-9）',\n    //   'noWhitespace' => '用戶名 不能包含空格',\n    // )\n}\n\n// 自定義錯誤提示信息\ntry {\n    $usernameValidator->setName('用戶名')->assert('alg  anet');\n} catch (ValidationException $exception) {\n    var_export($exception->getMessages([\n        'alnum' => '用戶名只能包含字母和數字',\n        'noWhitespace' => '用戶名不能有空格',\n        'length' => 'length符合規則，所以這條將不會顯示'\n    ]));\n    // 將會打印 \n    // array(\n    //    'alnum' => '用戶名只能包含字母和數字',\n    //    'noWhitespace' => '用戶名不能有空格'\n    // )\n}\n\n// 驗證對象\n$user = new stdClass;\n$user->name = 'Alexandre';\n$user->birthdate = '1987-07-01';\n$userValidator = v::attribute('name', v::stringType()->length(1, 32))\n                ->attribute('birthdate', v::date()->minAge(18));\n$userValidator->validate($user); // true\n\n// 驗證數組\n$data = [\n    'parentKey' => [\n        'field1' => 'value1',\n        'field2' => 'value2'\n        'field3' => true,\n    ]\n];\nv::key(\n    'parentKey',\n    v::key('field1', v::stringType())\n        ->key('field2', v::stringType())\n        ->key('field3', v::boolType())\n    )\n    ->assert($data); // 也可以用 check() 或 validate()\n  \n// 可選驗證\nv::alpha()->validate(''); // false \nv::alpha()->validate(null); // false \nv::optional(v::alpha())->validate(''); // true\nv::optional(v::alpha())->validate(null); // true\n\n// 否定規則\nv::not(v::intVal())->validate(10); // false\n```\n\n----------------------------------------\n\nTITLE: Advanced Query Examples\nDESCRIPTION: Shows advanced query techniques including subqueries and model retrieval methods.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/db/model.md#2025-04-12_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nreturn Destination::addSelect(['last_flight' => Flight::select('name')\n    ->whereColumn('destination_id', 'destinations.id')\n    ->orderBy('arrived_at', 'desc')\n    ->limit(1)\n])->get();\n```\n\nLANGUAGE: php\nCODE:\n```\nreturn Destination::orderByDesc(\n    Flight::select('arrived_at')\n        ->whereColumn('destination_id', 'destinations.id')\n        ->orderBy('arrived_at', 'desc')\n        ->limit(1)\n)->get();\n```\n\nLANGUAGE: php\nCODE:\n```\n$flight = app\\model\\Flight::find(1);\n\n$flight = app\\model\\Flight::where('active', 1)->first();\n\n$flight = app\\model\\Flight::firstWhere('active', 1);\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Static Variables in Coroutine Environment\nDESCRIPTION: Example demonstrating how static variables can lead to data pollution in a coroutine environment. This anti-pattern shows why storing request state in static variables is problematic.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/coroutine/fiber.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace app\\controller;\n\nuse support\\Request;\nuse Workerman\\Timer;\n\nclass TestController\n{\n    protected static $name = '';\n\n    public function index(Request $request)\n    {\n        static::$name = $request->get('name');\n        Timer::sleep(5);\n        return static::$name;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Payment SDK Initialization\nDESCRIPTION: Code to initialize the payment SDK with configuration settings.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/components/payment.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$config = Config::get('payment');\nPay::config($config);\n```\n\n----------------------------------------\n\nTITLE: Basic Redis Usage Example\nDESCRIPTION: Example controller demonstrating basic Redis set and get operations in WebMan\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/db/redis.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\nuse support\\Redis;\n\nclass UserController\n{\n    public function db(Request $request)\n    {\n        $key = 'test_key';\n        Redis::set($key, rand());\n        return response(Redis::get($key));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic User Model Definition in PHP\nDESCRIPTION: Demonstrates the basic structure of an Eloquent model class with custom table name, primary key, and timestamp settings.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/db/model.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\model;\n\nuse support\\Model;\n\nclass User extends Model\n{\n    /**\n     * The table associated with the model\n     *\n     * @var string\n     */\n    protected $table = 'user';\n\n    /**\n     * The primary key for the model\n     *\n     * @var string\n     */\n    protected $primaryKey = 'uid';\n\n    /**\n     * Indicates if the model should be timestamped\n     *\n     * @var bool\n     */\n    public $timestamps = false;\n}\n```\n\n----------------------------------------\n\nTITLE: Get Single Value Webman PHP\nDESCRIPTION: This code snippet demonstrates how to retrieve a single value (the 'email' column) from the 'users' table based on a condition ('name' equals 'John') using the Webman PHP framework's database query builder. It uses the `where()` method to specify the condition and the `value()` method to retrieve the value of the specified column.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/fr/db/queries.md#2025-04-12_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$email = Db::table('users')->where('name', 'John')->value('email');\n```\n\n----------------------------------------\n\nTITLE: Updating an Existing Record in PHP\nDESCRIPTION: This snippet demonstrates how to update an existing record in the database. First it retrieves the model, then it sets the attributes to update, and calls the save method. The `updated_at` timestamp is automatically updated.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/fr/db/model.md#2025-04-12_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n$user = app\\model\\User::find(1);\n$user->name = 'jerry';\n$user->save();\n```\n\n----------------------------------------\n\nTITLE: Returning XML Response in PHP\nDESCRIPTION: This example demonstrates how to return an XML response using the xml() helper function in a Webman controller.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/response.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\n\nclass FooController\n{\n    public function hello(Request $request)\n    {\n        $xml = <<<XML\n               <?xml version='1.0' standalone='yes'?>\n               <values>\n                   <truevalue>1</truevalue>\n                   <falsevalue>0</falsevalue>\n               </values>\n               XML;\n        return xml($xml);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Authorization Middleware\nDESCRIPTION: This code defines an authorization middleware that checks if a user has permission to access a specific URI. It retrieves the user ID and action from the request, and uses the `Permission::enforce()` method to determine if access should be granted. If not, it throws an exception.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/casbin.md#2025-04-12_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n/**\n * Промежуточное ПО авторизации\n * Автор ShaoBo Wan (Tinywan)\n * Дата и время 2021/09/07 14:15\n */\n\ndeclare(strict_types=1);\n\nnamespace app\\\\middleware;\n\nuse Webman\\\\MiddlewareInterface;\nuse Webman\\\\Http\\\\Response;\nuse Webman\\\\Http\\\\Request;\nuse Casbin\\\\Exceptions\\\\CasbinException;\nuse webman\\\\permission\\\\Permission;\n\nclass AuthorizationMiddleware implements MiddlewareInterface\n{\n\tpublic function process(Request $request, callable $next): Response\n\t{\n\t\t$uri = $request->path();\n\t\ttry {\n\t\t\t$userId = 10086;\n\t\t\t$action = $request->method();\n\t\t\tif (!Permission::enforce((string) $userId, $uri, strtoupper($action))) {\n\t\t\t\tthrow new \\\\Exception('Извините, у вас нет прав доступа к этому интерфейсу');\n\t\t\t}\n\t\t} catch (CasbinException $exception) {\n\t\t\tthrow new \\\\Exception('Исключение авторизации' . $exception->getMessage());\n\t\t}\n\t\treturn $next($request);\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Authentication Middleware Implementation\nDESCRIPTION: Complete example of an authentication middleware that checks user session and handles protected routes.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/pt/middleware.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\middleware;\n\nuse ReflectionClass;\nuse Webman\\MiddlewareInterface;\nuse Webman\\Http\\Response;\nuse Webman\\Http\\Request;\n\nclass AuthCheckTest implements MiddlewareInterface\n{\n    public function process(Request $request, callable $handler) : Response\n    {\n        if (session('user')) {\n            return $handler($request);\n        }\n\n        $controller = new ReflectionClass($request->controller);\n        $noNeedLogin = $controller->getDefaultProperties()['noNeedLogin'] ?? [];\n\n        if (!in_array($request->action, $noNeedLogin)) {\n            return redirect('/user/login');\n        }\n\n        return $handler($request);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Process Configuration Schema in Webman\nDESCRIPTION: Full configuration schema showing all available options for process configuration including handler, listener, count, user permissions, and SSL settings.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/process.md#2025-04-12_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    // ... \n\n    // websocket_test is the process name\n    'websocket_test' => [\n        // Specify the process class here\n        'handler' => app\\Pusher::class,\n        // Protocol, IP, and port to listen on (optional)\n        'listen'  => 'websocket://0.0.0.0:8888',\n        // Number of processes (optional, default is 1)\n        'count'   => 2,\n        // User to run the process (optional, default is the current user)\n        'user'    => '',\n        // User group to run the process (optional, default is the current user group)\n        'group'   => '',\n        // Whether the current process supports reload (optional, default is true)\n        'reloadable' => true,\n        // Whether to enable reusePort (optional, requires php>=7.0, default is true)\n        'reusePort'  => true,\n        // Transport (optional, set to 'ssl' when SSL is required, default is 'tcp')\n        'transport'  => 'tcp',\n        // Context (optional, pass certificate path when transport is 'ssl')\n        'context'    => [], \n        // Constructor parameters for the process class, here for process\\Pusher::class (optional)\n        'constructor' => [],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Basic Request Object Usage in Webman PHP Controller\nDESCRIPTION: Example showing how to inject and use the Request object in a controller action to handle GET parameters\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/request.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\n\nclass UserController\n{\n    public function hello(Request $request)\n    {\n        $default_name = 'webman';\n        // Get the 'name' parameter from the get request, or return $default_name if the parameter is not passed\n        $name = $request->get('name', $default_name);\n        // Return a string to the browser\n        return response('hello ' . $name);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Get Plugin Name from Request in webman-php\nDESCRIPTION: This snippet shows how to obtain the plugin name associated with the current request using `$request->plugin` in webman-php. It returns the plugin name as a string. If the request isn't associated with a plugin, it returns an empty string.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/pt/request.md#2025-04-12_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$request->plugin;\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Eloquent Model in PHP\nDESCRIPTION: Example of defining a User model extending the base Model class. It sets the table name, primary key, and disables automatic timestamps.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/jp/db/model.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\model;\n\nuse support\\Model;\n\nclass User extends Model\n{\n    protected $table = 'user';\n    protected $primaryKey = 'uid';\n    public $timestamps = false;\n}\n```\n\n----------------------------------------\n\nTITLE: Redis Configuration Setup\nDESCRIPTION: Basic Redis configuration file structure defining connection parameters like host, password, port and database\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/db/redis.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'default' => [\n        'host'     => '127.0.0.1',\n        'password' => null,\n        'port'     => 6379,\n        'database' => 0,\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: CORS Middleware in Webman PHP\nDESCRIPTION: This code demonstrates a middleware for handling Cross-Origin Resource Sharing (CORS) in Webman PHP. It intercepts OPTIONS requests, returning an empty response to handle preflight requests. It also adds headers to the response to allow cross-origin requests from any origin, using any method, and including custom headers.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/middleware.md#2025-04-12_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n\"<?php\nnamespace app\\middleware;\n\nuse Webman\\MiddlewareInterface;\nuse Webman\\Http\\Response;\nuse Webman\\Http\\Request;\n\nclass AccessControlTest implements MiddlewareInterface\n{\n    public function process(Request $request, callable $handler) : Response\n    {\n        // 如果是options请求则返回一个空响应，否则继续向洋葱芯穿越，并得到一个响应\n        $response = $request->method() == 'OPTIONS' ? response('') : $handler($request);\n        \n        // 给响应添加跨域相关的http头\n        $response->withHeaders([\n            'Access-Control-Allow-Credentials' => 'true',\n            'Access-Control-Allow-Origin' => $request->header('origin', '*'),\n            'Access-Control-Allow-Methods' => $request->header('access-control-request-method', '*'),\n            'Access-Control-Allow-Headers' => $request->header('access-control-request-headers', '*'),\n        ]);\n        \n        return $response;\n    }\n}\"\n```\n\n----------------------------------------\n\nTITLE: Setting Route Middleware in PHP\nDESCRIPTION: This code snippet shows how to define middleware for specific routes or route groups in Webman's `config/route.php` file. Middleware can be applied to individual routes or groups of routes to handle tasks like authentication or logging.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/middleware.md#2025-04-12_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse support\\Request;\nuse Webman\\Route;\n\nRoute::any('/admin', [app\\admin\\controller\\IndexController::class, 'index'])->middleware([\n    app\\middleware\\MiddlewareA::class,\n    app\\middleware\\MiddlewareB::class,\n]);\n\nRoute::group('/blog', function () {\n   Route::any('/create', function () {return response('create');});\n   Route::any('/edit', function () {return response('edit');});\n   Route::any('/view/{id}', function ($r, $id) {response(\"view $id\");});\n})->middleware([\n    app\\middleware\\MiddlewareA::class,\n    app\\middleware\\MiddlewareB::class,\n]);\n```\n\n----------------------------------------\n\nTITLE: Cache Usage Example in Controller\nDESCRIPTION: Example controller demonstrating basic cache operations using the Cache facade, including setting and retrieving cached values.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/db/cache.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\nuse support\\Cache;\n\nclass UserController\n{\n    public function db(Request $request)\n    {\n        $key = 'test_key';\n        Cache::set($key, rand());\n        return response(Cache::get($key));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Middleware Structure in Webman PHP\nDESCRIPTION: This is a basic example of a middleware in Webman PHP, illustrating how to intercept requests and modify responses. The `process` method receives a request and a handler. It executes code before and after the handler, which represents the next middleware or the controller, and returns the modified response.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/middleware.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n\"<?php\nnamespace app\\middleware;\n\nuse Webman\\MiddlewareInterface;\nuse Webman\\Http\\Response;\nuse Webman\\Http\\Request;\n\nclass Test implements MiddlewareInterface\n{\n    public function process(Request $request, callable $handler) : Response\n    {\n        echo '这里是请求穿越阶段，也就是请求处理前';\n        \n        $response = $handler($request); // 继续向洋葱芯穿越，直至执行控制器得到响应\n        \n        echo '这里是响应穿出阶段，也就是请求处理后';\n        \n        return $response;\n    }\n}\"\n```\n\n----------------------------------------\n\nTITLE: Database Configuration in Webman PHP\nDESCRIPTION: Configuration file for database connections in Webman PHP. Defines the default MySQL connection settings including host, port, credentials, and PDO options.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/db/tutorial.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    // Default database\n    'default' => 'mysql',\n\n    // Various database configurations\n    'connections' => [\n        'mysql' => [\n            'driver'      => 'mysql',\n            'host'        => '127.0.0.1',\n            'port'        => 3306,\n            'database'    => 'test',\n            'username'    => 'root',\n            'password'    => '',\n            'unix_socket' => '',\n            'charset'     => 'utf8',\n            'collation'   => 'utf8_unicode_ci',\n            'prefix'      => '',\n            'strict'      => true,\n            'engine'      => null,\n            'options' => [\n                \\PDO::ATTR_TIMEOUT => 3\n            ]\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Database Connection and Default Values\nDESCRIPTION: Examples of configuring database connections and setting default attribute values for models.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/db/model.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nclass User extends Model\n{\n    /**\n     * The connection name for the model\n     *\n     * @var string\n     */\n    protected $connection = 'connection-name';\n}\n```\n\nLANGUAGE: php\nCODE:\n```\nclass User extends Model\n{\n    /**\n     * The default attribute values for the model\n     *\n     * @var array\n     */\n    protected $attributes = [\n        'delayed' => false,\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Connection with Pool Settings in PHP\nDESCRIPTION: Database configuration file defining MySQL connection parameters and connection pool settings. Includes options for max/min connections, timeout settings, and PDO attributes.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/db/tutorial.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    // 默认数据库\n    'default' => 'mysql',\n\n    // 各种数据库配置\n    'connections' => [\n        'mysql' => [\n            'driver'      => 'mysql',\n            'host'        => '127.0.0.1',\n            'port'        => 3306,\n            'database'    => 'test',\n            'username'    => 'root',\n            'password'    => '',\n            'unix_socket' => '',\n            'charset'     => 'utf8',\n            'collation'   => 'utf8_unicode_ci',\n            'prefix'      => '',\n            'strict'      => true,\n            'engine'      => null,\n            'options' => [\n                PDO::ATTR_EMULATE_PREPARES => false,\n            ],\n            'pool' => [\n                'max_connections' => 5,\n                'min_connections' => 1,\n                'wait_timeout' => 3,\n                'idle_timeout' => 60,\n                'heartbeat_interval' => 50,\n            ],\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: CORS Middleware Implementation\nDESCRIPTION: Cross-Origin Resource Sharing (CORS) middleware that handles OPTIONS requests and adds necessary CORS headers to responses.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/middleware.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\middleware;\n\nuse Webman\\MiddlewareInterface;\nuse Webman\\Http\\Response;\nuse Webman\\Http\\Request;\n\nclass AccessControlTest implements MiddlewareInterface\n{\n    public function process(Request $request, callable $handler) : Response\n    {\n        // If it is an OPTIONS request, return an empty response, otherwise continue with the request and get a response\n        $response = $request->method() == 'OPTIONS' ? response('') : $handler($request);\n        \n        // Add CORS-related HTTP headers to the response\n        $response->withHeaders([\n            'Access-Control-Allow-Credentials' => 'true',\n            'Access-Control-Allow-Origin' => $request->header('origin', '*'),\n            'Access-Control-Allow-Methods' => $request->header('access-control-request-method', '*'),\n            'Access-Control-Allow-Headers' => $request->header('access-control-request-headers', '*'),\n        ]);\n        \n        return $response;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Laravel Pagination Implementation\nDESCRIPTION: Basic example of implementing pagination using Laravel's ORM with the paginate() method. Returns paginated results to a view.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/db/paginator.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\npublic function index(Request $request)\n{\n    $per_page = 10;\n    $users = Db::table('user')->paginate($per_page);\n    return view('index/index', ['users' => $users]);\n}\n```\n\n----------------------------------------\n\nTITLE: Automatic Variable Cleanup Example in WebMan Controller\nDESCRIPTION: Demonstrates how WebMan automatically handles variable cleanup after method execution. The Foo instance is automatically released when the index method completes.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/others/lifecycle.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace app\\controller;\n\nuse app\\service\\Foo;\nuse support\\Request;\n\nclass IndexController\n{\n    public function index(Request $request)\n    {\n        $foo = new Foo(); // Assuming there is a Foo class here\n        return response($foo->sayHello());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Controller in Webman PHP\nDESCRIPTION: Demonstrates how to create a simple controller with two methods for handling different routes. The controller uses the Request object and returns responses.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/controller.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\n\nclass FooController\n{\n    public function index(Request $request)\n    {\n        return response('ciao indice');\n    }\n    \n    public function hello(Request $request)\n    {\n        return response('ciao webman');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing Model Instances in Eloquent ORM\nDESCRIPTION: Demonstrates how to compare two model instances using the is method. This checks if two models have the same primary key, table, and database connection.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/db/model.md#2025-04-12_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nif ($post->is($anotherPost)) {\n    //\n}\n```\n\n----------------------------------------\n\nTITLE: Potential Security Risk Example in Controller Directory\nDESCRIPTION: Example showing incorrect placement of a model file in the controller directory, which could lead to security vulnerabilities if controller suffix is not enabled.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/others/security.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// Incorrect placement example\n// app/controller/model/User.php\nclass User {\n    // This model file should not be in the controller directory\n    // Could be accessed via /model/user/xxx if controller suffix is not enabled\n}\n```\n\n----------------------------------------\n\nTITLE: Switching Between Multiple Databases in Webman PHP\nDESCRIPTION: Example code showing how to switch between different database connections using Db::connection(). Demonstrates querying users table from default MySQL database, second MySQL instance, and PostgreSQL database.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/db/config.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// Use the default database, equivalent to Db::connection('mysql')->table('users')->where('name', 'John')->first();\n$users = Db::table('users')->where('name', 'John')->first();; \n// Use mysql2\n$users = Db::connection('mysql2')->table('users')->where('name', 'John')->first();\n// Use pgsql\n$users = Db::connection('pgsql')->table('users')->where('name', 'John')->first();\n```\n\n----------------------------------------\n\nTITLE: Basic Session Usage in UserController\nDESCRIPTION: Example of setting and getting session data in a controller using request object.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/session.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\n\nclass UserController\n{\n    public function hello(Request $request)\n    {\n        $name = $request->get('name');\n        $session = $request->session();\n        $session->set('name', $name);\n        return response('hello ' . $session->get('name'));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Timestamp Configuration\nDESCRIPTION: Shows various ways to configure timestamp handling in Eloquent models including format and column names.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/db/model.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nclass User extends Model\n{\n    /**\n     * Indicates if the model should be timestamped\n     *\n     * @var bool\n     */\n    public $timestamps = false;\n}\n```\n\nLANGUAGE: php\nCODE:\n```\nclass User extends Model\n{\n    /**\n     * The storage format of the model's date columns\n     *\n     * @var string\n     */\n    protected $dateFormat = 'U';\n}\n```\n\nLANGUAGE: php\nCODE:\n```\nclass User extends Model\n{\n    const CREATED_AT = 'creation_date';\n    const UPDATED_AT = 'last_update';\n}\n```\n\n----------------------------------------\n\nTITLE: Using the Fill Method in Eloquent - PHP\nDESCRIPTION: Illustrates using the fill method on an existing Flight model instance to assign values via an array. It demonstrates a flexible approach for updating attributes of models already instantiated.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/db/model.md#2025-04-12_snippet_15\n\nLANGUAGE: PHP\nCODE:\n```\n$flight->fill(['name' => 'Flight 22']);\n```\n\n----------------------------------------\n\nTITLE: Installing Yansongda Pay SDK\nDESCRIPTION: Composer command to install version 3.0.0 or higher of the Yansongda payment SDK.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/components/payment.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ncomposer require yansongda/pay ^3.0.0\n```\n\n----------------------------------------\n\nTITLE: Database Query Example in UserController\nDESCRIPTION: Example controller demonstrating how to use the database query builder to fetch a username from the users table based on a UID parameter from the request.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/db/tutorial.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\nuse support\\Db;\n\nclass UserController\n{\n    public function db(Request $request)\n    {\n        $default_uid = 29;\n        $uid = $request->get('uid', $default_uid);\n        $name = Db::table('users')->where('uid', $uid)->value('username');\n        return response(\"hello $name\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Asynchronous HTTP Requests in PHP with WebMan\nDESCRIPTION: Shows how to use workerman/http-client for non-blocking HTTP requests in a controller action. This improves application performance by allowing asynchronous HTTP requests.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/jp/coroutine/fiber.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace app\\controller;\n\nuse support\\Request;\nuse Workerman\\Http\\Client;\n\nclass TestController\n{\n    public function index(Request $request)\n    {\n        static $client;\n        $client = $client ?: new Client();\n        $response = $client->get('http://example.com'); // 非同期リクエストのための同期メソッドの呼び出し\n        return $response->getBody()->getContents();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Database Connections in Webman PHP\nDESCRIPTION: Configuration file for setting up different database connections including MySQL, SQLite, PostgreSQL, and SQL Server. Located at config/database.php, this configuration defines connection parameters like host, port, credentials, and character settings for each database type.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/db/config.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    // Default database\n    'default' => 'mysql',\n    // Various database configurations\n    'connections' => [\n\n        'mysql' => [\n            'driver'      => 'mysql',\n            'host'        => '127.0.0.1',\n            'port'        => 3306,\n            'database'    => 'webman',\n            'username'    => 'webman',\n            'password'    => '',\n            'unix_socket' => '',\n            'charset'     => 'utf8',\n            'collation'   => 'utf8_unicode_ci',\n            'prefix'      => '',\n            'strict'      => true,\n            'engine'      => null,\n        ],\n        \n        'sqlite' => [\n            'driver'   => 'sqlite',\n            'database' => '',\n            'prefix'   => '',\n        ],\n\n        'pgsql' => [\n            'driver'   => 'pgsql',\n            'host'     => '127.0.0.1',\n            'port'     => 5432,\n            'database' => 'webman',\n            'username' => 'webman',\n            'password' => '',\n            'charset'  => 'utf8',\n            'prefix'   => '',\n            'schema'   => 'public',\n            'sslmode'  => 'prefer',\n        ],\n\n        'sqlsrv' => [\n            'driver'   => 'sqlsrv',\n            'host'     => 'localhost',\n            'port'     => 1433,\n            'database' => 'webman',\n            'username' => 'webman',\n            'password' => '',\n            'charset'  => 'utf8',\n            'prefix'   => '',\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Abrufen einer einzelnen Zeile mit dem Query Builder in PHP\nDESCRIPTION: Hier wird gezeigt, wie man eine einzelne Zeile aus einer Datenbanktabelle basierend auf einer Bedingung abruft.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/de/db/queries.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$user = Db::table('users')->where('name', 'John')->first();\n```\n\n----------------------------------------\n\nTITLE: Implementing Alipay Payment Gateway in PHP\nDESCRIPTION: Example of a PHP controller class for handling Alipay payments. It includes configuration setup, creating a payment order, and processing return and notify callbacks.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/components/pay.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace App\\Http\\Controllers;\n\nuse Yansongda\\Pay\\Pay;\nuse Yansongda\\Pay\\Log;\n\nclass PayController\n{\n    protected $config = [\n        'app_id' => '2016082000295641',\n        'notify_url' => 'http://yansongda.cn/notify.php',\n        'return_url' => 'http://yansongda.cn/return.php',\n        'ali_public_key' => 'MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAuWJKrQ6SWvS6niI+4vEVZiYfjkCfLQfoFI2nCp9ZLDS42QtiL4Ccyx8scgc3nhVwmVRte8f57TFvGhvJD0upT4O5O/lRxmTjechXAorirVdAODpOu0mFfQV9y/T9o9hHnU+VmO5spoVb3umqpq6D/Pt8p25Yk852/w01VTIczrXC4QlrbOEe3sr1E9auoC7rgYjjCO6lZUIDjX/oBmNXZxhRDrYx4Yf5X7y8FRBFvygIE2FgxV4Yw+SL3QAa2m5MLcbusJpxOml9YVQfP8iSurx41PvvXUMo49JG3BDVernaCYXQCoUJv9fJwbnfZd7J5YByC+5KM4sblJTq7bXZWQIDAQAB',\n        'private_key' => 'MIIEpAIBAAKCAQEAs6+F2leOgOrvj9jTeDhb5q46GewOjqLBlGSs/bVL4Z3fMr3p+Q1Tux/6uogeVi/eHd84xvQdfpZ87A1SfoWnEGH5z15yorccxSOwWUI+q8gz51IWqjgZxhWKe31BxNZ+prnQpyeMBtE25fXp5nQZ/pftgePyUUvUZRcAUisswntobDQKbwx28VCXw5XB2A+lvYEvxmMv/QexYjwKK4M54j435TuC3UctZbnuynSPpOmCu45ZhEYXd4YMsGMdZE5/077ZU1aU7wx/gk07PiHImEOCDkzqsFo0Buc/knGcdOiUDvm2hn2y1XvwjyFOThsqCsQYi4JmwZdRa8kvOf57nwIDAQABAoIBAQCw5QCqln4VTrTvcW+msB1ReX57nJgsNfDLbV2dG8mLYQemBa9833DqDK6iynTLNq69y88ylose33o2TVtEccGp8Dqluv6yUAED14G6LexS43KtrXPgugAtsXE253ZDGUNwUggnN1i0MW2RcMqHdQ9ORDWvJUCeZj/AEafgPN8AyiLrZeL07jJz/uaRfAuNqkImCVIarKUX3HBCjl9TpuoMjcMhz/MsOmQ0agtCatO1eoH1sqv5Odvxb1i59c8Hvq/mGEXyRuoiDo05SE6IyXYXr84/Nf2xvVNHNQA6kTckj8shSi+HGM4mO1Y4Pbb7XcnxNkT0Inn6oJMSiy56P+CpAoGBAO1O+5FE1ZuVGuLb48cY+0lHCD+nhSBd66B5FrxgPYCkFOQWR7pWyfNDBlmO3SSooQ8TQXA25blrkDxzOAEGX57EPiipXr/hy5e+WNoukpy09rsO1TMsvC+v0FXLvZ+TIAkqfnYBgaT56ku7yZ8aFGMwdCPL7WJYAwUIcZX8wZ3dAoGBAMHWplAqhe4bfkGOEEpfs6VvEQxCqYMYVyR65K0rI1LiDZn6Ij8fdVtwMjGKFSZZTspmsqnbbuCE/VTyDzF4NpAxdm3cBtZACv1Lpu2Om+aTzhK2PI6WTDVTKAJBYegXaahBCqVbSxieR62IWtmOMjggTtAKWZ1P5LQcRwdkaB2rAoGAWnAPT318Kp7YcDx8whOzMGnxqtCc24jvk2iSUZgb2Dqv+3zCOTF6JUsV0Guxu5bISoZ8GdfSFKf5gBAo97sGFeuUBMsHYPkcLehM1FmLZk1Q+ljcx3P1A/ds3kWXLolTXCrlpvNMBSN5NwOKAyhdPK/qkvnUrfX8sJ5XK2H4J8ECgYAGIZ0HIiE0Y+g9eJnpUFelXvsCEUW9YNK4065SD/BBGedmPHRC3OLgbo8X5A9BNEf6vP7fwpIiRfKhcjqqzOuk6fueA/yvYD04v+Da2MzzoS8+hkcqF3T3pta4I4tORRdRfCUzD80zTSZlRc/h286Y2eTETd+By1onnFFe2X01mwKBgQDaxo4PBcLL2OyVT5DoXiIdTCJ8KNZL9+kV1aiBuOWxnRgkDjPngslzNa1bK+klGgJNYDbQqohKNn1HeFX3mYNfCUpuSnD2Yag53Dd/1DLO+NxzwvTu4D6DCUnMMMBVaF42ig31Bs0jI3JQZVqeeFzSET8fkoFopJf3G6UXlrIEAQ==',\n        'log' => [\n            'file' => './logs/alipay.log',\n            'level' => 'info',\n            'type' => 'single',\n            'max_file' => 30,\n        ],\n        'http' => [\n            'timeout' => 5.0,\n            'connect_timeout' => 5.0,\n        ],\n        'mode' => 'dev',\n    ];\n\n    public function index()\n    {\n        $order = [\n            'out_trade_no' => time(),\n            'total_amount' => '1',\n            'subject' => 'test subject - 测试',\n        ];\n\n        $alipay = Pay::alipay($this->config)->web($order);\n\n        return $alipay->send();\n    }\n\n    public function return()\n    {\n        $data = Pay::alipay($this->config)->verify();\n\n    }\n\n    public function notify()\n    {\n        $alipay = Pay::alipay($this->config);\n    \n        try {\n            $data = $alipay->verify();\n\n            Log::debug('Alipay Notification', $data->all());\n        } catch (\\Exception $e) {\n            \n        }\n\n        return $alipay->success()->send();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Model Queries\nDESCRIPTION: Examples of basic model query operations using Eloquent.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/de/db/model.md#2025-04-12_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$users = app\\model\\User::all();\n\nforeach ($users as $user) {\n    echo $user->name;\n}\n```\n\n----------------------------------------\n\nTITLE: Global CORS Middleware Configuration in PHP\nDESCRIPTION: This config snippet configures the CORS middleware as a global middleware. This ensures that the specified middleware is executed for every request to handle cross-origin requests.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-hk/middleware.md#2025-04-12_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n\"return [\n    // 全局中間件\n    '' => [\n        // ... 這裡省略其他中間件\n        app\\middleware\\AccessControlTest::class,\n    ]\n];\"\n```\n\n----------------------------------------\n\nTITLE: Handling Business Exceptions in Webman PHP Controller\nDESCRIPTION: This example demonstrates how to throw and handle a BusinessException in a Webman controller.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/tr/exception.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\nuse support\\exception\\BusinessException;\n\nclass FooController\n{\n    public function index(Request $request)\n    {\n        $this->chackInpout($request->post());\n        return response('hello index');\n    }\n    \n    protected function chackInpout($input)\n    {\n        if (!isset($input['token'])) {\n            throw new BusinessException('Parameter Error', 3000);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Primary Key Configuration\nDESCRIPTION: Demonstrates how to customize the primary key settings including key name, incrementing behavior, and key type.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/db/model.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nclass User extends Model\n{\n    /**\n     * The primary key for the model\n     *\n     * @var string\n     */\n    protected $primaryKey = 'uid';\n}\n```\n\nLANGUAGE: php\nCODE:\n```\nclass User extends Model\n{\n    /**\n     * Indicates if the model's primary key is incrementing\n     *\n     * @var bool\n     */\n    public $incrementing = false;\n}\n```\n\nLANGUAGE: php\nCODE:\n```\nclass User extends Model\n{\n    /**\n     * The \"type\" of the auto-incrementing ID\n     *\n     * @var string\n     */\n    protected $keyType = 'string';\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Records from a Model in PHP\nDESCRIPTION: This code retrieves all records from the `User` model using the `all()` method. The code then iterates through the resulting collection and prints the name of each user.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/es/db/model.md#2025-04-12_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$usuarios = app\\model\\User::all();\n\nforeach ($usuarios as $usuario) {\n    echo $usuario->name;\n}\n\n```\n\n----------------------------------------\n\nTITLE: XML Response in Webman PHP\nDESCRIPTION: Shows how to return XML content with proper XML headers using the xml() helper function.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/response.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\n\nclass FooController\n{\n    public function hello(Request $request)\n    {\n        $xml = <<<XML\n               <?xml version='1.0' standalone='yes'?>\n               <values>\n                   <truevalue>1</truevalue>\n                   <falsevalue>0</falsevalue>\n               </values>\n               XML;\n        return xml($xml);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Chunking Large Result Sets\nDESCRIPTION: Method to process large datasets in chunks to prevent memory issues\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/db/queries.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')->orderBy('id')->chunkById(100, function ($users) {\n    foreach ($users as $user) {\n        //\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Returning a String in Webman (PHP)\nDESCRIPTION: This code snippet demonstrates how to create a controller action that returns a simple string response. It retrieves a 'name' parameter from the request, defaults to 'webman' if not provided, and returns a 'hello' message with the name.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/tutorial.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\n\nclass UserController\n{\n    public function hello(Request $request)\n    {\n        $default_name = 'webman';\n        // 从get请求里获得name参数，如果没有传递name参数则返回$default_name\n        $name = $request->get('name', $default_name);\n        // 向浏览器返回字符串\n        return response('hello ' . $name);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Inserting a New Record in PHP\nDESCRIPTION: This snippet shows how to insert a new record into the database by creating a model instance, setting its attributes, and calling the `save()` method. It assumes the model has a `$timestamps` property set to `true` for automatic timestamp management.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/fr/db/model.md#2025-04-12_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace app\\controller;\n\nuse app\\model\\User;\nuse support\\Request;\nuse support\\Response;\n\nclass FooController\n{\n    /**\n     * Ajouter un nouvel enregistrement à la table des utilisateurs\n     *\n     * @param  Request  $request\n     * @return Response\n     */\n    public function store(Request $request)\n    {\n        // Valider la requête\n\n        $user = new User;\n\n        $user->name = $request->get('name');\n\n        $user->save();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Route Groups Configuration in PHP Webman\nDESCRIPTION: Examples of grouping routes with common prefixes and nested groups\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/route.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nRoute::group('/blog', function () {\n   Route::any('/create', function ($request) {return response('create');});\n   Route::any('/edit', function ($request) {return response('edit');});\n   Route::any('/view/{id}', function ($request, $id) {return response(\"view $id\");});\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Exception Handler in PHP for webman\nDESCRIPTION: Configuration file for setting up the exception handler class in webman-php. This snippet shows how to specify the default exception handler in the config/exception.php file.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/de/exception.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    // Here you configure the exception handling class\n    '' => support\\exception\\Handler::class,\n];\n```\n\n----------------------------------------\n\nTITLE: Selecting Specific Columns with Webman PHP\nDESCRIPTION: This code snippet demonstrates how to select specific columns from the 'user' table using the Webman PHP framework's database query builder. It uses the `select()` method to specify the columns to retrieve, including aliasing 'email' as 'user_email'. The `get()` method executes the query and returns the results.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/fr/db/queries.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('user')->select('name', 'email as user_email')->get();\n```\n\n----------------------------------------\n\nTITLE: Getting Route Information in Middleware in PHP\nDESCRIPTION: This code demonstrates how to access route information within middleware using `$request->route`. It shows how to retrieve the path, methods, name, middleware, callback, and parameters associated with the current route.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/middleware.md#2025-04-12_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\middleware;\n\nuse Webman\\MiddlewareInterface;\nuse Webman\\Http\\Response;\nuse Webman\\Http\\Request;\n\nclass Hello implements MiddlewareInterface\n{\n    public function process(Request $request, callable $handler) : Response\n    {\n        $route = $request->route;\n        // If the request does not match any route (except the default route), $request->route will be null\n        // Assuming the browser accesses the URL /user/111, the following information will be printed\n        if ($route) {\n            var_export($route->getPath());       // /user/{uid}\n            var_export($route->getMethods());    // ['GET', 'POST', 'PUT', 'DELETE', 'PATCH', 'HEAD','OPTIONS']\n            var_export($route->getName());       // user_view\n            var_export($route->getMiddleware()); // []\n            var_export($route->getCallback());   // ['app\\\\controller\\\\UserController', 'view']\n            var_export($route->param());         // ['uid'=>111]\n            var_export($route->param('uid'));    // 111 \n        }\n        return $handler($request);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: View Response with Template in Webman PHP\nDESCRIPTION: Demonstrates rendering and returning a view template with data using the view() helper function.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/response.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\n\nclass FooController\n{\n    public function hello(Request $request)\n    {\n        return view('foo/hello', ['name' => 'webman']);\n    }\n}\n```\n\nLANGUAGE: html\nCODE:\n```\n<!doctype html>\n<html>\n<head>\n    <meta charset=\"utf-8\">\n    <title>webman</title>\n</head>\n<body>\nhello <?=htmlspecialchars($name)?>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Redis Pipeline Commands Example\nDESCRIPTION: Example of using Redis pipeline to execute multiple commands in a single operation\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/db/redis.md#2025-04-12_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nRedis::pipeline(function ($pipe) {\n    for ($i = 0; $i < 1000; $i++) {\n        $pipe->set(\"key:$i\", $i);\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Middleware Example in PHP\nDESCRIPTION: Demonstrates a simple middleware implementation showing request pre-processing, request handling, and response post-processing stages. Illustrates how to intercept and modify request/response flow.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/th/middleware.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nclass Test implements MiddlewareInterface\n{\n    public function process(Request $request, callable $handler) : Response\n    {\n        echo 'Pre-processing request stage';\n        $response = $handler($request);\n        echo 'Post-processing response stage';\n        return $response;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Multi-application Directory Structure in Webman\nDESCRIPTION: This code snippet demonstrates two examples of organizing the directory structure of a Webman project to support multiple applications such as shop, api, and admin. It aligns directory organization with the URL routing mechanism of Webman.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/multiapp.md#2025-04-12_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\napp\n├── shop\n│   ├── controller\n│   ├── model\n│   └── view\n├── api\n│   ├── controller\n│   └── model\n└── admin\n    ├── controller\n    ├── model\n    └── view\n```\n\nLANGUAGE: Text\nCODE:\n```\napp\n├── controller\n├── model\n├── view\n\n├── api\n│   ├── controller\n│   └── model\n└── admin\n    ├── controller\n    ├── model\n    └── view\n```\n\n----------------------------------------\n\nTITLE: Using firstOrCreate and firstOrNew Methods\nDESCRIPTION: Demonstrates how to use firstOrCreate to find a record by attributes or create one if not found, and firstOrNew which returns a new unsaved instance if not found.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/tr/db/model.md#2025-04-12_snippet_28\n\nLANGUAGE: php\nCODE:\n```\n// name'e göre uçuş ara, bulunamazsa oluştur...\n$flight = app\\modle\\Flight::firstOrCreate(['name' => 'Flight 10']);\n\n// name ve delayed özellikleri ve arrival_time özelliği ile uçuş ara, bulunamazsa oluştur...\n$flight = app\\modle\\Flight::firstOrCreate(\n    ['name' => 'Flight 10'],\n    ['delayed' => 1, 'arrival_time' => '11:30']\n);\n\n// name'e göre uçuş ara, bulunamazsa örnek oluştur...\n$flight = app\\modle\\Flight::firstOrNew(['name' => 'Flight 10']);\n\n// name ve delayed özellikleri ve arrival_time özelliği ile uçuş ara, bulunamazsa örnek oluştur...\n$flight = app\\modle\\Flight::firstOrNew(\n    ['name' => 'Flight 10'],\n    ['delayed' => 1, 'arrival_time' => '11:30']\n);\n```\n\n----------------------------------------\n\nTITLE: Payment Configuration Setup\nDESCRIPTION: Configuration file defining settings for AliPay and WechatPay integration including API credentials, certificates, and callback URLs\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/components/payment.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nreturn [\n    '_force' => true,\n    'alipay' => [\n        'default' => [\n            'app_id' => '20160909004708941',\n            'app_secret_cert' => 'MIIEpAIBAAKCxxxxxxxxxxxxxxP4r3m4OUmD/+XDgCg==',\n            'app_public_cert_path' => base_path().'/payment/appCertPublicKey_2016090900470841.crt',\n            'alipay_public_cert_path' => base_path().'/payment/alipayCertPublicKey_RSA2.crt',\n            'alipay_root_cert_path' => base_path().'/payment/alipayRootCert.crt',\n            'return_url' => 'https://webman.tinywan.cn/payment/alipay-return',\n            'notify_url' => 'https://webman.tinywan.cn/payment/alipay-notify',\n            'service_provider_id' => '',\n            'mode' => \\Yansongda\\Pay\\Pay::MODE_SANDBOX,\n        ]\n    ],\n    'wechat' => [...],\n    'logger' => [...],\n    'http' => [...]\n];\n```\n\n----------------------------------------\n\nTITLE: Join Clauses with Webman PHP\nDESCRIPTION: This code snippet demonstrates how to use different types of JOIN clauses in the Webman PHP framework's database query builder, including `join()`, `leftJoin()`, `rightJoin()`, and `crossJoin()`. These methods are used to combine rows from two or more tables based on related columns.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/fr/db/queries.md#2025-04-12_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n// join\n$users = Db::table('users')\n            ->join('contacts', 'users.id', '=', 'contacts.user_id')\n            ->join('orders', 'users.id', '=', 'orders.user_id')\n            ->select('users.*', 'contacts.phone', 'orders.price')\n            ->get();\n\n// leftJoin            \n$users = Db::table('users')\n            ->leftJoin('posts', 'users.id', '=', 'posts.user_id')\n            ->get();\n\n// rightJoin\n$users = Db::table('users')\n            ->rightJoin('posts', 'users.id', '=', 'posts.user_id')\n            ->get();\n\n// crossJoin    \n$users = Db::table('sizes')\n            ->crossJoin('colors')\n            ->get();\n```\n\n----------------------------------------\n\nTITLE: Retrieving Single Row\nDESCRIPTION: Shows how to retrieve a single row from the database using a where clause.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/db/queries.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$user = Db::table('users')->where('name', 'John')->first();\n```\n\n----------------------------------------\n\nTITLE: Configuring Swoole Coroutine in Webman\nDESCRIPTION: This configuration snippet shows how to enable Swoole coroutine in Webman by setting the event loop in the server configuration file.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/tr/coroutine/fiber.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n'event_loop' => \\Workerman\\Events\\Swoole::class,\n```\n\n----------------------------------------\n\nTITLE: Raw Expressions with Db::raw in Webman PHP\nDESCRIPTION: This code snippet demonstrates how to use raw expressions with `Db::raw()` in the Webman PHP framework's database query builder. It calculates the total sales for each department and filters the results to include only departments with total sales greater than a specified value.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/fr/db/queries.md#2025-04-12_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n$orders = Db::table('orders')\n                ->select('department', Db::raw('SUM(price) as total_sales'))\n                ->groupBy('department')\n                ->havingRaw('SUM(price) > ?', [2500])\n                ->get();\n```\n\n----------------------------------------\n\nTITLE: Displaying Paginator in Native PHP Template\nDESCRIPTION: This code snippet shows how to render the Paginator object within a native PHP template file. It assumes that the Paginator object has been passed to the view from the controller.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/fr/components/paginator.md#2025-04-12_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<html>\n<head>\n  <!-- Prise en charge intégrée du style de pagination Bootstrap -->\n  <link rel=\"stylesheet\" href=\"//maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css\">\n</head>\n<body>\n\n<?= $paginator;?>\n\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Using whereNull Conditions in webman-php\nDESCRIPTION: Using whereNull to filter records where a field is NULL. This example retrieves users with a NULL updated_at field.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/db/queries.md#2025-04-12_snippet_22\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')\n                    ->whereNull('updated_at')\n                    ->get();\n```\n\n----------------------------------------\n\nTITLE: Aggregation Functions with Webman PHP\nDESCRIPTION: This code snippet demonstrates the usage of aggregation functions like `count()`, `max()`, and `avg()` in the Webman PHP framework's database query builder. It retrieves the total count of users, the maximum price from the 'orders' table, and the average price of finalized orders.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/fr/db/queries.md#2025-04-12_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')->count();\n$price = Db::table('orders')->max('price');\n$price = Db::table('orders')->where('finalized', 1)->avg('price');\n```\n\n----------------------------------------\n\nTITLE: Initializing Request Object in Webman PHP Controller\nDESCRIPTION: Demonstrates how to inject and use the request object in a Webman controller method, with automatic parameter retrieval and default value handling\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/request.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\n\nclass UserController\n{\n    public function hello(Request $request)\n    {\n        $default_name = 'webman';\n        $name = $request->get('name', $default_name);\n        return response('hello ' . $name);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Business Exception Implementation\nDESCRIPTION: Implementation of a custom business exception class that modifies the response format\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/pt/exception.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace app\\exception;\n\nuse support\\exception\\BusinessException;\nuse Webman\\Http\\Request;\nuse Webman\\Http\\Response;\n\nclass MyBusinessException extends BusinessException\n{\n    public function render(Request $request): ?Response\n    {\n        // Return JSON data for JSON request\n        if ($request->expectsJson()) {\n            return json(['code' => $this->getCode() ?: 500, 'message' => $this->getMessage()]);\n        }\n        // Otherwise return a page\n        return new Response(200, [], $this->getMessage());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using FirstOrCreate and FirstOrNew in Eloquent - PHP\nDESCRIPTION: Explains the use of firstOrCreate and firstOrNew methods for finding or instantiating models with specified attributes. Details the need for calling save on instances returned by firstOrNew.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/db/model.md#2025-04-12_snippet_18\n\nLANGUAGE: PHP\nCODE:\n```\n// Retrieve the flight by the given attributes or create it if it doesn't exist...\n$flight = app\\modle\\Flight::firstOrCreate(['name' => 'Flight 10']);\n\n// Retrieve the flight by the given attributes or create it with certain attributes...\n$flight = app\\modle\\Flight::firstOrCreate(\n    ['name' => 'Flight 10'],\n    ['delayed' => 1, 'arrival_time' => '11:30']\n);\n\n// Retrieve the flight by the given attributes or instantiate it if it doesn't exist...\n$flight = app\\modle\\Flight::firstOrNew(['name' => 'Flight 10']);\n\n// Retrieve the flight by the given attributes or instantiate it with certain attributes...\n$flight = app\\modle\\Flight::firstOrNew(\n    ['name' => 'Flight 10'],\n    ['delayed' => 1, 'arrival_time' => '11:30']\n);\n```\n\n----------------------------------------\n\nTITLE: Advanced Laravel Pagination with Custom Component\nDESCRIPTION: Implementation using JasonGrimes paginator to render pagination controls, since Laravel's built-in links() method isn't supported in Webman.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/db/paginator.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse JasonGrimes\\Paginator;\nuse support\\Request;\nuse support\\Db;\n\nclass UserController\n{\n    public function get(Request $request)\n    {\n        $per_page = 10;\n        $current_page = $request->input('page', 1);\n        $users = Db::table('user')->paginate($per_page, '*', 'page', $current_page);\n        $paginator = new Paginator($users->total(), $per_page, $current_page, '/user/get?page=(:num)');\n        return view('user/get', ['users' => $users, 'paginator'  => $paginator]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting New Records with Model Instances\nDESCRIPTION: Demonstrates creating and saving a new model instance in a controller, with automatic timestamp handling. This example shows how to add a new user record.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/es/db/model.md#2025-04-12_snippet_24\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace app\\controller;\n\nuse app\\model\\User;\nuse support\\Request;\nuse support\\Response;\n\nclass FooController\n{\n    /**\n     * Agregar un nuevo registro a la tabla de usuarios\n     *\n     * @param  Request  $request\n     * @return Response\n     */\n    public function store(Request $request)\n    {\n        // Validar la solicitud\n\n        $user = new User;\n\n        $user->name = $request->get('name');\n\n        $user->save();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Database Query Script in Webman PHP\nDESCRIPTION: Example script showing how to set up a custom PHP file that uses Webman's autoloader and database functionality to query user data. The script demonstrates proper initialization of Webman environment and usage of ThinkPHP's database facade.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/others/scripts.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once __DIR__ . '/../vendor/autoload.php';\nrequire_once __DIR__ . '/../support/bootstrap.php';\n\nuse think\\facade\\Db;\n\n$user = Db::table('user')->find(1);\n\nvar_dump($user);\n```\n\n----------------------------------------\n\nTITLE: Mass Assignment Configuration in Eloquent - PHP\nDESCRIPTION: Shows how to configure the $fillable property on a Flight model to allow specific attributes for mass assignment. It warns against mass assignment vulnerabilities and recommends security practices with $fillable and $guarded properties.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/db/model.md#2025-04-12_snippet_13\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nnamespace app\\model;\n\nuse support\\Model;\n\nclass Flight extends Model\n{\n    /**\n     * The attributes that are mass assignable.\n     *\n     * @var array\n     */\n    protected $fillable = ['name'];\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Middleware Interface in PHP\nDESCRIPTION: Shows the basic structure of a middleware class implementing the Webman\\MiddlewareInterface with request and response handling phases.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/middleware.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\middleware;\n\nuse Webman\\MiddlewareInterface;\nuse Webman\\Http\\Response;\nuse Webman\\Http\\Request;\n\nclass Test implements MiddlewareInterface\n{\n    public function process(Request $request, callable $handler) : Response\n    {\n        echo 'This is the request traversal phase, before request processing.';\n        \n        // Continue through the onion layers until a response is obtained from the controller\n        $response = $handler($request);\n        \n        echo 'This is the response traversal phase, after request processing.';\n        \n        return $response;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Authentication Middleware Implementation\nDESCRIPTION: Authentication middleware that checks user login status and handles protected routes using reflection to determine which methods require authentication.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/middleware.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\middleware;\n\nuse ReflectionClass;\nuse Webman\\MiddlewareInterface;\nuse Webman\\Http\\Response;\nuse Webman\\Http\\Request;\n\nclass AuthCheckTest implements MiddlewareInterface\n{\n    public function process(Request $request, callable $handler) : Response\n    {\n        if (session('user')) {\n            // Already logged in, continue with the request\n            return $handler($request);\n        }\n\n        // Get the methods that do not require login using reflection\n        $controller = new ReflectionClass($request->controller);\n        $noNeedLogin = $controller->getDefaultProperties()['noNeedLogin'] ?? [];\n\n        // Method requires login\n        if (!in_array($request->action, $noNeedLogin)) {\n            // Intercept the request and return a redirect response, stopping the request from continuing\n            return redirect('/user/login');\n        }\n\n        // Method does not require login, continue with the request\n        return $handler($request);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: File Upload Handling in Webman PHP\nDESCRIPTION: Controller example showing how to process uploaded files including validation and file information retrieval\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/request.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\n\nclass UploadController\n{\n    public function files(Request $request)\n    {\n        foreach ($request->file() as $key => $spl_file) {\n            var_export($spl_file->isValid());\n            var_export($spl_file->getUploadExtension());\n            var_export($spl_file->getUploadMimeType());\n            var_export($spl_file->getUploadErrorCode());\n            var_export($spl_file->getUploadName());\n            var_export($spl_file->getSize());\n            var_export($spl_file->getPath());\n            var_export($spl_file->getRealPath());\n        }\n        return response('ok');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Settings in Webman PHP\nDESCRIPTION: This snippet shows how to configure database settings in Webman. It includes options for the default database and various connection settings, particularly for MySQL.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/jp/db/tutorial.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    // デフォルトデータベース\n    'default' => 'mysql',\n\n    // さまざまなデータベース設定\n    'connections' => [\n        'mysql' => [\n            'driver' => 'mysql',\n            'host' => '127.0.0.1',\n            'port' => 3306,\n            'database' => 'test',\n            'username' => 'root',\n            'password' => '',\n            'unix_socket' => '',\n            'charset' => 'utf8',\n            'collation' => 'utf8_unicode_ci',\n            'prefix' => '',\n            'strict' => true,\n            'engine' => null,\n            'options' => [\n                \\PDO::ATTR_TIMEOUT => 3\n            ]\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Global Middleware Configuration in Webman PHP\nDESCRIPTION: This configuration snippet shows how to register global middleware in Webman PHP.  Global middleware is applied to every request handled by the application.  The example adds `AuthCheckTest` to the list of global middleware.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/middleware.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n\"return [\n    // 全局中间件\n    '' => [\n        // ... 这里省略其它中间件\n        app\\middleware\\AuthCheckTest::class,\n    ]\n];\"\n```\n\n----------------------------------------\n\nTITLE: Using push-vue.js in Vue Components\nDESCRIPTION: This snippet shows how to integrate the push-vue.js file into a Vue.js component. It handles WebSocket connections and messaging in the context of a Vue lifecycle hook.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/plugin/push.md#2025-04-12_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n<script lang=\"ts\" setup>\nimport {  onMounted } from 'vue'\nimport { Push } from '../utils/push-vue'\n\nonMounted(() => {\n  console.log('组件已经挂载') \n  //实例化webman-push\n  // 建立连接\n  var connection = new Push({\n    url: 'ws://127.0.0.1:3131', // websocket地址\n    app_key: '<app_key，在config/plugin/webman/push/app.php里获取>',\n    auth: '/plugin/webman/push/auth' // 订阅鉴权(仅限于私有频道)\n  });\n  // 假设用户uid为1\n  var uid = 1;\n  // 浏览器监听user-1频道的消息，也就是用户uid为1的用户消息\n  var user_channel = connection.subscribe('user-' + uid);\n  // 当user-1频道有message事件的消息时\n  user_channel.on('message', function (data) {\n    // data里是消息内容\n    console.log(data);\n  });\n  // 当user-1频道有friendApply事件时消息时\n  user_channel.on('friendApply', function (data) {\n    // data里是好友申请相关信息\n    console.log(data);\n  });\n  // 假设群组id为2\n  var group_id = 2;\n  // 浏览器监听group-2频道的消息，也就是监听群组2的群消息\n  var group_channel = connection.subscribe('group-' + group_id);\n  // 当群组2有message消息事件时\n  group_channel.on('message', function (data) {\n    // data里是消息内容\n    console.log(data);\n  });\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Basic Middleware Implementation with Request/Response Phases\nDESCRIPTION: Demonstrates the three phases of middleware processing: request passing, controller processing, and response output.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/pt/middleware.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\middleware;\n\nuse Webman\\MiddlewareInterface;\nuse Webman\\Http\\Response;\nuse Webman\\Http\\Request;\n\nclass Test implements MiddlewareInterface\n{\n    public function process(Request $request, callable $handler) : Response\n    {\n        echo 'Esta é a fase de passagem da solicitação, ou seja, antes do processamento da solicitação';\n        \n        $response = $handler($request);\n        \n        echo 'Esta é a fase de saída da resposta, ou seja, após o processamento da solicitação';\n        \n        return $response;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Requested Plugin Name - PHP\nDESCRIPTION: This line retrieves the name of the requested plugin. It returns an empty string for requests not related to plugins, and it requires the Webman version to be 1.4.0 or higher.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/request.md#2025-04-12_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n$request->plugin;\n```\n\n----------------------------------------\n\nTITLE: Blade Component Implementation\nDESCRIPTION: Example of creating a custom Blade component with its view template\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/view.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace app\\view\\components;\n\nuse Illuminate\\View\\Component;\n\nclass Alert extends Component\n{\n    public function __construct()\n    {\n    }\n    \n    public function render()\n    {\n        return view('components/alert')->rawBody();\n    }\n}\n```\n\nLANGUAGE: html\nCODE:\n```\n<div>\n    <b style=\"color: red\">hello blade component</b>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Configuring Fillable Attributes for Mass Assignment Protection\nDESCRIPTION: Shows how to protect against mass assignment vulnerabilities by defining which model attributes can be mass-assigned using the $fillable property.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/es/db/model.md#2025-04-12_snippet_29\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace app\\model;\n\nuse support\\Model;\n\nclass Flight extends Model\n{\n    /**\n     * Atributos que se pueden asignar de forma masiva.\n     *\n     * @var array\n     */\n    protected $fillable = ['name'];\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Response in Webman PHP\nDESCRIPTION: Demonstrates returning JSON data using the json() helper function with proper content-type headers.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/response.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\n\nclass FooController\n{\n    public function hello(Request $request)\n    {\n        return json(['code' => 0, 'msg' => 'ok']);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Captcha Controller in PHP\nDESCRIPTION: PHP code for a LoginController class that handles captcha generation, display, and validation. It includes methods for rendering a test page, outputting captcha images, and checking user input against the stored captcha value.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/components/captcha.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\nuse Webman\\Captcha\\CaptchaBuilder;\n\nclass LoginController\n{\n    /**\n     * Test page\n     */\n    public function index(Request $request)\n    {\n        return view('login/index');\n    }\n    \n    /**\n     * Output captcha image\n     */\n    public function captcha(Request $request)\n    {\n        // Initialize captcha class\n        $builder = new CaptchaBuilder;\n        // Generate captcha\n        $builder->build();\n        // Store the value of the captcha in the session\n        $request->session()->set('captcha', strtolower($builder->getPhrase()));\n        // Get captcha image binary data\n        $img_content = $builder->get();\n        // Output captcha binary data\n        return response($img_content, 200, ['Content-Type' => 'image/jpeg']);\n    }\n\n    /**\n     * Check captcha\n     */\n    public function check(Request $request)\n    {\n        // Get the 'captcha' field from the post request\n        $captcha = $request->post('captcha');\n        // Compare the value of the captcha stored in the session\n        if (strtolower($captcha) !== $request->session()->get('captcha')) {\n            return json(['code' => 400, 'msg' => 'The captcha entered is incorrect']);\n        }\n        return json(['code' => 0, 'msg' => 'ok']);\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Base Model for Plugin-Specific Database in Webman PHP\nDESCRIPTION: This snippet defines a Base model class for a Webman PHP plugin, setting up a plugin-specific database connection. All plugin models can inherit from this Base class to use the plugin's database.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/app/database.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace plugin\\foo\\app\\model;\n\nuse DateTimeInterface;\nuse support\\Model;\n\nclass Base extends Model\n{\n    /**\n     * @var string\n     */\n    protected $connection = 'plugin.foo.mysql';\n}\n```\n\n----------------------------------------\n\nTITLE: User Controller with Authentication Support\nDESCRIPTION: Example controller demonstrating protected and public routes with login functionality and user information retrieval.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/middleware.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\nuse support\\Request;\n\nclass UserController\n{\n    /**\n     * Methods that do not require login\n     */\n    protected $noNeedLogin = ['login'];\n\n    public function login(Request $request)\n    {\n        $request->session()->set('user', ['id' => 10, 'name' => 'webman']);\n        return json(['code' => 0, 'msg' => 'login ok']);\n    }\n\n    public function info()\n    {\n        return json(['code' => 0, 'msg' => 'ok', 'data' => session('user')]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MongoDB Connection in Webman\nDESCRIPTION: Database configuration setup for MongoDB connection including host, port, credentials and driver options\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/db/mongo.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n\n    'default' => 'mysql',\n\n    'connections' => [\n\n         ...这里省略了其它配置...\n\n        'mongodb' => [\n            'driver'   => 'mongodb',\n            'host'     => '127.0.0.1',\n            'port'     =>  27017,\n            'database' => 'test',\n            'username' => null,\n            'password' => null,\n            'options' => [\n                'appname' => 'homestead'\n            ],\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Complete Context Usage Example in Webman Controller\nDESCRIPTION: Example controller demonstrating practical usage of Context methods within a Webman application. Shows setting and retrieving request parameters using context storage.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/coroutine/context.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace app\\controller;\n\nuse support\\Request;\nuse support\\Context;\n\nclass TestController\n{\n    public function index(Request $request)\n    {\n        Context::set('name', $request->get('name'));\n        return Context::get('name');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Constructor Injection in Controller\nDESCRIPTION: Example of constructor-based dependency injection in a UserController class.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/di.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\nuse app\\service\\Mailer;\n\nclass UserController\n{\n    private $mailer;\n\n    public function __construct(Mailer $mailer)\n    {\n        $this->mailer = $mailer;\n    }\n\n    public function register(Request $request)\n    {\n        $this->mailer->mail('hello@webman.com', 'Hello and welcome!');\n        return response('ok');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Aggregate Functions in Webman PHP\nDESCRIPTION: This snippet demonstrates the use of aggregate functions like count, max, and avg in database queries.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/hi/db/queries.md#2025-04-12_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')->count();\n$price = Db::table('orders')->max('price');\n$price = Db::table('orders')->where('finalized', 1)->avg('price');\n```\n\n----------------------------------------\n\nTITLE: Setting Up HTTP Request Routes in PHP\nDESCRIPTION: This snippet demonstrates how to create routes for various HTTP methods (GET, POST, PUT, DELETE, etc.) using the Route class in a PHP framework. These routes define how different URI endpoints respond to specific request methods. The callback function specified will handle the logic for each respective request method. This is vital for building a RESTful API or handling web requests appropriately.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/route.md#2025-04-12_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n// Set a route for any method request for $uri\nRoute::any($uri, $callback);\n// Set a route for a get request for $uri\nRoute::get($uri, $callback);\n// Set a route for a post request for $uri\nRoute::post($uri, $callback);\n// Set a route for a put request for $uri\nRoute::put($uri, $callback);\n// Set a route for a patch request for $uri\nRoute::patch($uri, $callback);\n// Set a route for a delete request for $uri\nRoute::delete($uri, $callback);\n// Set a route for a head request for $uri\nRoute::head($uri, $callback);\n// Set routes for multiple request types simultaneously\nRoute::add(['GET', 'POST', 'PUT', 'DELETE', 'PATCH', 'HEAD', 'OPTIONS'], $uri, $callback);\n// Group routes\nRoute::group($path, $callback);\n// Resource routes\nRoute::resource($path, $callback, [$options]);\n// Disable the default route\nRoute::disableDefaultRoute($plugin = '');\n// Fallback route, set the default route fallback\nRoute::fallback($callback, $plugin = '');\n```\n\n----------------------------------------\n\nTITLE: Using Raw Expressions with selectRaw in Webman DB Query Builder\nDESCRIPTION: This code demonstrates how to use raw expressions in a select statement using `selectRaw()`. It calculates `price_with_tax` by multiplying the price with a tax rate (1.0825).  The `selectRaw()` method allows you to include arbitrary SQL expressions in your queries. Placeholders are used to prevent SQL injection.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/db/queries.md#2025-04-12_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$orders = Db::table('orders')\n                ->selectRaw('price * ? as price_with_tax', [1.0825])\n                ->get();\n```\n\n----------------------------------------\n\nTITLE: Finding Single Models with Eloquent\nDESCRIPTION: Shows various methods (find, first, firstWhere) to retrieve single model instances from the database.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/db/model.md#2025-04-12_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n// Найти модель по первичному ключу...\n$flight = app\\model\\Flight::find(1);\n\n// Найти первую модель, соответствующую условию запроса...\n$flight = app\\model\\Flight::where('active', 1)->first();\n\n// Найти первую модель, соответствующую условию запроса...\n$flight = app\\model\\Flight::firstWhere('active', 1);\n```\n\n----------------------------------------\n\nTITLE: Creating and Downloading Excel File using PhpSpreadsheet in PHP\nDESCRIPTION: This code demonstrates how to create a simple Excel file with PhpSpreadsheet, save it to the public directory, and then initiate a download. It uses Webman's response object for file download.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/components/excel.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse PhpOffice\\PhpSpreadsheet\\Spreadsheet;\nuse PhpOffice\\PhpSpreadsheet\\Writer\\Xlsx;\n\nclass ExcelController\n{\n    public function index($request)\n    {\n        $spreadsheet = new Spreadsheet();\n        $sheet = $spreadsheet->getActiveSheet();\n        $sheet->setCellValue('A1', 'Hello World !');\n\n        $writer = new Xlsx($spreadsheet);\n        $file_path = public_path().'/hello_world.xlsx';\n        // Save file to public directory\n        $writer->save($file_path);\n        // Download file\n        return response()->download($file_path, 'filename.xlsx');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Where Clauses in PHP Database Queries\nDESCRIPTION: This code demonstrates various ways to use where clauses in database queries, including basic comparisons, multiple conditions, and advanced where clauses.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/tr/db/queries.md#2025-04-12_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('kullanıcılar')->where('oylar', '=', 100)->get();\n\n$users = Db::table('kullanıcılar')->where('oylar', 100)->get();\n\n$users = Db::table('kullanıcılar')\n                ->where('oylar', '>=', 100)\n                ->get();\n\n$users = Db::table('kullanıcılar')\n                ->where('oylar', '<>', 100)\n                ->get();\n\n$users = Db::table('kullanıcılar')\n                ->where('ad', 'like', 'T%')\n                ->get();\n\n$users = Db::table('kullanıcılar')->where([\n    ['durum', '=', '1'],\n    ['abone', '<>', '1'],\n])->get();\n\n$users = Db::table('kullanıcılar')\n                    ->where('oylar', '>', 100)\n                    ->orWhere('ad', 'John')\n                    ->get();\n\n$users = Db::table('kullanıcılar')\n            ->where('oylar', '>', 100)\n            ->orWhere(function($sorgu) {\n                $sorgu->where('ad', 'Abigail')\n                      ->where('oylar', '>', 50);\n            })\n            ->get();\n```\n\n----------------------------------------\n\nTITLE: Get Single Row with Webman PHP\nDESCRIPTION: This code snippet demonstrates how to retrieve a single row from the 'users' table based on a condition using the Webman PHP framework's database query builder. It uses the `where()` method to specify the condition ('name' equals 'John') and the `first()` method to retrieve the first matching record.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/fr/db/queries.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$user = Db::table('users')->where('name', 'John')->first();\n```\n\n----------------------------------------\n\nTITLE: Safe Usage of Local Variables in Coroutine Environment\nDESCRIPTION: Example showing how local variables can be safely used in coroutines without causing data pollution, as they are not accessible by other coroutines.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/coroutine/fiber.md#2025-04-12_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace app\\controller;\n\nuse support\\Request;\nuse support\\Context;\nuse Workerman\\Timer;\n\nclass TestController\n{\n    public function index(Request $request)\n    {\n        $name = $request->get('name');\n        Timer::sleep(5);\n        return $name;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Middleware Configuration\nDESCRIPTION: Configuration file showing how to register global middleware in the Webman framework.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/middleware.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    // Global middleware\n    '' => [\n        // ... other middleware omitted\n        app\\middleware\\AuthCheckTest::class,\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Using updateOrCreate Method for Upsert Operations\nDESCRIPTION: Shows how to use updateOrCreate to update an existing model or create a new one if it doesn't exist, all in a single operation. The model is automatically persisted to the database.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/es/db/model.md#2025-04-12_snippet_35\n\nLANGUAGE: php\nCODE:\n```\n// Si existe un vuelo de Oakland a San Diego, el precio será de 99 dólares.\n// Si no hay un modelo coincidente, se creará uno.\n$flight = app\\modle\\Flight::updateOrCreate(\n    ['departure' => 'Oakland', 'destination' => 'San Diego'],\n    ['price' => 99, 'discounted' => 1]\n);\n```\n\n----------------------------------------\n\nTITLE: Offset and Limit in Webman PHP\nDESCRIPTION: This snippet shows how to use offset and limit methods for pagination.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/hi/db/queries.md#2025-04-12_snippet_34\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')\n                ->offset(10)\n                ->limit(5)\n                ->get();\n```\n\n----------------------------------------\n\nTITLE: Inserting Records\nDESCRIPTION: Examples of inserting single and multiple records into database tables\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/db/queries.md#2025-04-12_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')->insert(\n    ['email' => 'john@example.com', 'votes' => 0]\n);\n```\n\n----------------------------------------\n\nTITLE: Incrementing and Decrementing in Webman PHP\nDESCRIPTION: This snippet demonstrates how to increment or decrement numeric fields in a database table.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/hi/db/queries.md#2025-04-12_snippet_39\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')->increment('votes');\n\nDb::table('users')->increment('votes', 5);\n\nDb::table('users')->decrement('votes');\n\nDb::table('users')->decrement('votes', 5);\n\nDb::table('users')->increment('votes', 1, ['name' => 'John']);\n```\n\n----------------------------------------\n\nTITLE: Implementing Alipay Payment Processing in PHP\nDESCRIPTION: Complete controller example for Alipay integration, including configuration, payment initialization, return handling, and notification handling. This code demonstrates how to set up Alipay payments with various configuration options, verify payment responses, and process payment notifications.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-hk/components/pay.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace App\\Http\\Controllers;\n\nuse Yansongda\\Pay\\Pay;\nuse Yansongda\\Pay\\Log;\n\nclass PayController\n{\n    protected $config = [\n        'app_id' => '2016082000295641',\n        'notify_url' => 'http://yansongda.cn/notify.php',\n        'return_url' => 'http://yansongda.cn/return.php',\n        'ali_public_key' => 'MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAuWJKrQ6SWvS6niI+4vEVZiYfjkCfLQfoFI2nCp9ZLDS42QtiL4Ccyx8scgc3nhVwmVRte8f57TFvGhvJD0upT4O5O/lRxmTjechXAorirVdAODpOu0mFfQV9y/T9o9hHnU+VmO5spoVb3umqpq6D/Pt8p25Yk852/w01VTIczrXC4QlrbOEe3sr1E9auoC7rgYjjCO6lZUIDjX/oBmNXZxhRDrYx4Yf5X7y8FRBFvygIE2FgxV4Yw+SL3QAa2m5MLcbusJpxOml9YVQfP8iSurx41PvvXUMo49JG3BDVernaCYXQCoUJv9fJwbnfZd7J5YByC+5KM4sblJTq7bXZWQIDAQAB',\n        // 加密方式： **RSA2**  \n        'private_key' => 'MIIEpAIBAAKCAQEAs6+F2leOgOrvj9jTeDhb5q46GewOjqLBlGSs/bVL4Z3fMr3p+Q1Tux/6uogeVi/eHd84xvQdfpZ87A1SfoWnEGH5z15yorccxSOwWUI+q8gz51IWqjgZxhWKe31BxNZ+prnQpyeMBtE25fXp5nQZ/pftgePyUUvUZRcAUisswntobDQKbwx28VCXw5XB2A+lvYEvxmMv/QexYjwKK4M54j435TuC3UctZbnuynSPpOmCu45ZhEYXd4YMsGMdZE5/077ZU1aU7wx/gk07PiHImEOCDkzqsFo0Buc/knGcdOiUDvm2hn2y1XvwjyFOThsqCsQYi4JmwZdRa8kvOf57nwIDAQABAoIBAQCw5QCqln4VTrTvcW+msB1ReX57nJgsNfDLbV2dG8mLYQemBa9833DqDK6iynTLNq69y88ylose33o2TVtEccGp8Dqluv6yUAED14G6LexS43KtrXPgugAtsXE253ZDGUNwUggnN1i0MW2RcMqHdQ9ORDWvJUCeZj/AEafgPN8AyiLrZeL07jJz/uaRfAuNqkImCVIarKUX3HBCjl9TpuoMjcMhz/MsOmQ0agtCatO1eoH1sqv5Odvxb1i59c8Hvq/mGEXyRuoiDo05SE6IyXYXr84/Nf2xvVNHNQA6kTckj8shSi+HGM4mO1Y4Pbb7XcnxNkT0Inn6oJMSiy56P+CpAoGBAO1O+5FE1ZuVGuLb48cY+0lHCD+nhSBd66B5FrxgPYCkFOQWR7pWyfNDBlmO3SSooQ8TQXA25blrkDxzOAEGX57EPiipXr/hy5e+WNoukpy09rsO1TMsvC+v0FXLvZ+TIAkqfnYBgaT56ku7yZ8aFGMwdCPL7WJYAwUIcZX8wZ3dAoGBAMHWplAqhe4bfkGOEEpfs6VvEQxCqYMYVyR65K0rI1LiDZn6Ij8fdVtwMjGKFSZZTspmsqnbbuCE/VTyDzF4NpAxdm3cBtZACv1Lpu2Om+aTzhK2PI6WTDVTKAJBYegXaahBCqVbSxieR62IWtmOMjggTtAKWZ1P5LQcRwdkaB2rAoGAWnAPT318Kp7YcDx8whOzMGnxqtCc24jvk2iSUZgb2Dqv+3zCOTF6JUsV0Guxu5bISoZ8GdfSFKf5gBAo97sGFeuUBMsHYPkcLehM1FmLZk1Q+ljcx3P1A/ds3kWXLolTXCrlpvNMBSN5NwOKAyhdPK/qkvnUrfX8sJ5XK2H4J8ECgYAGIZ0HIiE0Y+g9eJnpUFelXvsCEUW9YNK4065SD/BBGedmPHRC3OLgbo8X5A9BNEf6vP7fwpIiRfKhcjqqzOuk6fueA/yvYD04v+Da2MzzoS8+hkcqF3T3pta4I4tORRdRfCUzD80zTSZlRc/h286Y2eTETd+By1onnFFe2X01mwKBgQDaxo4PBcLL2OyVT5DoXiIdTCJ8KNZL9+kV1aiBuOWxnRgkDjPngslzNa1bK+klGgJNYDbQqohKNn1HeFX3mYNfCUpuSnD2Yag53Dd/1DLO+NxzwvTu4D6DCUnMMMBVaF42ig31Bs0jI3JQZVqeeFzSET8fkoFopJf3G6UXlrIEAQ==',\n        // 使用公鑰證書模式，請配置下面兩個參數，同時修改ali_public_key為以.crt結尾的支付寶公鑰證書路徑，如（./cert/alipayCertPublicKey_RSA2.crt）\n        // 'app_cert_public_key' => './cert/appCertPublicKey.crt', //應用公鑰證書路徑\n        // 'alipay_root_cert' => './cert/alipayRootCert.crt', //支付寶根證書路徑\n        'log' => [ // 可選\n            'file' => './logs/alipay.log',\n            'level' => 'info', // 建議生產環境等級調整為 info，開發環境為 debug\n            'type' => 'single', // 可選 daily.\n            'max_file' => 30, // 可選，當 type 為 daily 時有效，默認 30 天\n        ],\n        'http' => [ // 可選\n            'timeout' => 5.0,\n            'connect_timeout' => 5.0,\n            // 更多配置項請參考 [Guzzle](https://guzzle-cn.readthedocs.io/zh_CN/latest/request-options.html)\n        ],\n        'mode' => 'dev', // 可選，設置此參數，將進入沙箱模式\n    ];\n\n    public function index()\n    {\n        $order = [\n            'out_trade_no' => time(),\n            'total_amount' => '1',\n            'subject' => 'test subject - 測試',\n        ];\n\n        $alipay = Pay::alipay($this->config)->web($order);\n\n        return $alipay->send();// laravel 框架中請直接 `return $alipay`\n    }\n\n    public function return()\n    {\n        $data = Pay::alipay($this->config)->verify(); // 是的，驗簽就這麼簡單！\n\n        // 訂單號：$data->out_trade_no\n        // 支付寶交易號：$data->trade_no\n        // 訂單總金額：$data->total_amount\n    }\n\n    public function notify()\n    {\n        $alipay = Pay::alipay($this->config);\n    \n        try{\n            $data = $alipay->verify(); // 是的，驗簽就這麼簡單！\n\n            // 請自行對 trade_status 進行判斷及其它邏輯進行判斷，在支付寶的業務通知中，只有交易通知狀態為 TRADE_SUCCESS 或 TRADE_FINISHED 時，支付寶才會認定為買家付款成功。\n            // 1、商戶需要驗證該通知數據中的out_trade_no是否為商戶系統中創建的訂單號；\n            // 2、判斷total_amount是否確實為該訂單的實際金額（即商戶訂單創建時的金額）；\n            // 3、校驗通知中的seller_id（或者seller_email) 是否為out_trade_no這筆單據的對應的操作方（有的時候，一個商戶可能有多個seller_id/seller_email）；\n            // 4、驗證app_id是否為該商戶本身。\n            // 5、其它業務邏輯情況\n\n            Log::debug('Alipay notify', $data->all());\n        } catch (\\Exception $e) {\n            // $e->getMessage();\n        }\n\n        return $alipay->success()->send();// laravel 框架中請直接 `return $alipay->success()`\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Main Project Database Connections in Webman PHP\nDESCRIPTION: This snippet shows how to use the main project's database connections in a Webman PHP plugin. It demonstrates querying from the default connection and a named 'admin' connection.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/app/database.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse support\\Db;\nDb::table('user')->first();\n// Assume the main project also configured an admin connection\nDb::connection('admin')->table('admin')->first();\n```\n\n----------------------------------------\n\nTITLE: Receiving Request Object in Controller Action - Webman PHP\nDESCRIPTION: Webman automatically injects the request object as the first parameter to controller action methods. This snippet shows how to access the request object and retrieve GET parameters.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/th/request.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\n\nclass UserController\n{\n    public function hello(Request $request)\n    {\n        $default_name = 'webman';\n        // รับพารามิเตอร์ name จากคำขอ get และถ้าไม่มีการระบุพารามิเตอร์ name จะคืนค่าเป็น $default_name\n        $name = $request->get('name', $default_name);\n        // ส่งข้อความกลับไปยังเบราว์เซอร์\n        return response('hello ' . $name);\n    }\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Bulk Update Operations\nDESCRIPTION: Demonstrates how to perform bulk updates on multiple records using where clause.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/pt/db/model.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\napp\\model\\User::where('uid', '>', 10)\n          ->update(['name' => 'tom']);\n```\n\n----------------------------------------\n\nTITLE: Session Configuration\nDESCRIPTION: Complete session configuration file with options for file and Redis storage handlers.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/session.md#2025-04-12_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Webman\\Session\\FileSessionHandler;\nuse Webman\\Session\\RedisSessionHandler;\nuse Webman\\Session\\RedisClusterSessionHandler;\n\nreturn [\n    'handler' => FileSessionHandler::class,\n    'type'    => 'file',\n    'config' => [\n        'file' => [\n            'save_path' => runtime_path() . '/sessions',\n        ],\n        'redis' => [\n            'host'      => '127.0.0.1',\n            'port'      => 6379,\n            'auth'      => '',\n            'timeout'   => 2,\n            'database'  => '',\n            'prefix'    => 'redis_session_',\n        ],\n        'redis_cluster' => [\n            'host'    => ['127.0.0.1:7000', '127.0.0.1:7001', '127.0.0.1:7001'],\n            'timeout' => 2,\n            'auth'    => '',\n            'prefix'  => 'redis_session_',\n        ]\n    ],\n    'session_name' => 'PHPSID',\n    'auto_update_timestamp' => false,\n    'lifetime' => 7*24*60*60,\n    'cookie_lifetime' => 365*24*60*60,\n    'cookie_path' => '/',\n    'domain' => '',\n    'http_only' => true,\n    'secure' => false,\n    'same_site' => '',\n    'gc_probability' => [1, 1000],\n];\n```\n\n----------------------------------------\n\nTITLE: Basic Response Creation in Webman PHP\nDESCRIPTION: Shows how to create and return a basic response object using the response() helper function.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/response.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\n\nclass FooController\n{\n    public function hello(Request $request)\n    {\n        return response('hello webman');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Database Joins\nDESCRIPTION: Examples of different types of SQL joins including inner join, left join, right join, and cross join.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/db/queries.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// join\n$users = Db::table('users')\n            ->join('contacts', 'users.id', '=', 'contacts.user_id')\n            ->join('orders', 'users.id', '=', 'orders.user_id')\n            ->select('users.*', 'contacts.phone', 'orders.price')\n            ->get();\n\n// leftJoin            \n$users = Db::table('users')\n            ->leftJoin('posts', 'users.id', '=', 'posts.user_id')\n            ->get();\n\n// rightJoin\n$users = Db::table('users')\n            ->rightJoin('posts', 'users.id', '=', 'posts.user_id')\n            ->get();\n\n// crossJoin    \n$users = Db::table('sizes')\n            ->crossJoin('colors')\n            ->get();\n```\n\n----------------------------------------\n\nTITLE: Implementing Cross-Domain Access Control Middleware in PHP\nDESCRIPTION: Creates a middleware class to handle cross-domain requests by setting appropriate CORS headers. Implements the MiddlewareInterface and processes requests by adding necessary Access-Control headers.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/middleware.md#2025-04-12_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\middleware;\n\nuse Webman\\MiddlewareInterface;\nuse Webman\\Http\\Response;\nuse Webman\\Http\\Request;\n\nclass AccessControlTest implements MiddlewareInterface\n{\n    public function process(Request $request, callable $handler) : Response\n    {\n        $response = $request->method() == 'OPTIONS' ? response('') : $handler($request);\n        \n        $response->withHeaders([\n            'Access-Control-Allow-Credentials' => 'true',\n            'Access-Control-Allow-Origin' => $request->header('origin', '*'),\n            'Access-Control-Allow-Methods' => $request->header('access-control-request-method', '*'),\n            'Access-Control-Allow-Headers' => $request->header('access-control-request-headers', '*'),\n        ]);\n        \n        return $response;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Controller Directory Structure Security\nDESCRIPTION: Recommendations for maintaining secure controller directory structures and preventing unauthorized access\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/others/security.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// Incorrect placement of model in controller directory\n// app/controller/model/User.php\n```\n\n----------------------------------------\n\nTITLE: JSON Helper Function Implementation in PHP\nDESCRIPTION: Shows the implementation of the `json()` helper function.  It encodes the provided data as JSON and creates a `support\\Response` object with the appropriate header.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/pt/response.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nfunction json($data, $options = JSON_UNESCAPED_UNICODE)\n{\n    return new Response(200, ['Content-Type' => 'application/json'], json_encode($data, $options));\n}\n\n```\n\n----------------------------------------\n\nTITLE: Basic Database Query Using Think-ORM in Webman Controller\nDESCRIPTION: Example of creating a controller method to query user data from database using Think-ORM's Db facade. Shows how to perform a simple find operation with where clause and return JSON response.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/db/thinkorm.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\nuse support\\think\\Db;\n\nclass FooController\n{\n    public function get(Request $request)\n    {\n        $user = Db::table('user')->where('uid', '>', 1)->find();\n        return json($user);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Controller with respect/validation in PHP\nDESCRIPTION: Implements an IndexController that validates form data using Respect\\Validation. It validates nickname, username, and password fields and inserts valid data into a database.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-hk/components/validation.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\nuse Respect\\Validation\\Validator as v;\nuse support\\Db;\n\nclass IndexController\n{\n    public function index(Request $request)\n    {\n        $data = v::input($request->post(), [\n            'nickname' => v::length(1, 64)->setName('暱稱'),\n            'username' => v::alnum()->length(5, 64)->setName('用戶名'),\n            'password' => v::length(5, 64)->setName('密碼')\n        ]);\n        Db::table('user')->insert($data);\n        return json(['code' => 0, 'msg' => 'ok']);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Database Operations\nDESCRIPTION: Collection of basic database operations including insertions, updates, and deletions.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/db/queries.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// Insert single record\nDb::table('users')->insert(\n    ['email' => 'john@example.com', 'votes' => 0]\n);\n\n// Insert multiple records\nDb::table('users')->insert([\n    ['email' => 'taylor@example.com', 'votes' => 0],\n    ['email' => 'dayle@example.com', 'votes' => 0]\n]);\n\n// Update records\n$affected = Db::table('users')\n              ->where('id', 1)\n              ->update(['votes' => 1]);\n\n// Delete records\nDb::table('users')->delete();\nDb::table('users')->where('votes', '>', 100)->delete();\n```\n\n----------------------------------------\n\nTITLE: Using Main Project Database in Webman PHP Plugin\nDESCRIPTION: Shows how to use the main project's database connections within a Webman PHP plugin. It includes examples of querying the default connection and a named connection.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/app/database.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse support\\Db;\nDb::table('user')->first();\n// Supponiamo che il progetto principale abbia anche una connessione admin\nDb::connection('admin')->table('admin')->first();\n```\n\n----------------------------------------\n\nTITLE: Using Model Observers in Eloquent - PHP\nDESCRIPTION: Example of setting up model observers in Eloquent, requiring the installation of the illuminate/events package. It enables automatic execution of observer methods upon model lifecycle events.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/db/model.md#2025-04-12_snippet_25\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nnamespace app\\model;\n\nuse support\\Model;\nuse app\\observer\\UserObserver;\n\nclass User extends Model\n{\n    public static function boot()\n    {\n        parent::boot();\n        static::observe(UserObserver::class);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Payment Callback Handler\nDESCRIPTION: Handler for processing asynchronous payment notifications from Alipay.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/components/payment.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\npublic function alipayNotify(Request $request): Response\n{\n    $config = Config::get('payment');\n    Pay::config($config);\n    $result = Pay::alipay()->callback($request->post());\n    return new Response(200, [], 'success');\n}\n```\n\n----------------------------------------\n\nTITLE: Database Configuration for Webman Plugin\nDESCRIPTION: Example configuration for setting up multiple database connections in a Webman plugin\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/plugin/app.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nreturn  [\n    'default' => 'mysql',\n    'connections' => [\n        'mysql' => [ // mysql is the connection name\n            'driver'      => 'mysql',\n            'host'        => '127.0.0.1',\n            'port'        => 3306,\n            'database'    => 'database_name',\n            'username'    => 'username',\n            'password'    => 'password',\n            'charset'     => 'utf8mb4',\n            'collation'   => 'utf8mb4_general_ci',\n        ],\n        'admin' => [ // admin is the connection name\n            'driver'      => 'mysql',\n            'host'        => '127.0.0.1',\n            'port'        => 3306,\n            'database'    => 'database_name',\n            'username'    => 'username',\n            'password'    => 'password',\n            'charset'     => 'utf8mb4',\n            'collation'   => 'utf8mb4_general_ci',\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom 404 Route Handling in Webman PHP\nDESCRIPTION: This code snippet demonstrates how to configure custom 404 route handling in Webman PHP. It uses the fallback route to return JSON for AJAX requests and render a 404 view for page requests.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/de/others/custom-error-page.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse support\\Request;\nuse Webman\\Route;\n\nRoute::fallback(function(Request $request){\n    // Rückgabe von JSON bei ajax-Anfragen\n    if ($request->expectsJson()) {\n        return json(['code' => 404, 'msg' => '404 not found']);\n    }\n    // Seitenanfrage gibt das 404.html-Template zurück\n    return view('404', ['error' => 'some error'])->withStatus(404);\n});\n```\n\n----------------------------------------\n\nTITLE: Checking Existence with Webman PHP\nDESCRIPTION: This code snippet demonstrates how to check if a record exists based on a condition using the `exists()` and `doesntExist()` methods in the Webman PHP framework's database query builder. It checks if any finalized orders exist and if no finalized orders exist.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/fr/db/queries.md#2025-04-12_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nreturn Db::table('orders')->where('finalized', 1)->exists();\nreturn Db::table('orders')->where('finalized', 1)->doesntExist();\n```\n\n----------------------------------------\n\nTITLE: Configuring Global and Application Middleware in PHP\nDESCRIPTION: This code snippet demonstrates how to configure global and application middleware in Webman's `config/middleware.php` file. Global middleware applies to all requests, while application middleware is specific to a multi-application environment.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/middleware.md#2025-04-12_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    // Global middleware\n    '' => [\n        app\\middleware\\AuthCheckTest::class,\n        app\\middleware\\AccessControlTest::class,\n    ],\n    // Application middleware (only effective in multi-application mode)\n    'api' => [\n        app\\middleware\\ApiOnly::class,\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Using Context for Request-Scoped Data in PHP Coroutines\nDESCRIPTION: Demonstrates the correct way to store request-specific data using support\\Context in a coroutine environment. This prevents data pollution issues with global or static variables.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/jp/coroutine/fiber.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace app\\controller;\n\nuse support\\Request;\nuse support\\Context;\nuse Workerman\\Timer;\n\nclass TestController\n{\n    public function index(Request $request)\n    {\n        Context::set('name', $request->get('name'));\n        Timer::sleep(5);\n        return Context::get('name');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Ordering by Subquery Result in Eloquent in PHP\nDESCRIPTION: This snippet demonstrates how to order results by the result of a subquery using the `orderByDesc` method. The destinations are ordered by the arrival time of the last flight to each destination, achieved with a subquery.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/es/db/model.md#2025-04-12_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n<?php\nreturn Destination::orderByDesc(\n    Flight::select('arrived_at')\n        ->whereColumn('destination_id', 'destinations.id')\n        ->orderBy('arrived_at', 'desc')\n        ->limit(1)\n)->get();\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Controller in Webman\nDESCRIPTION: This snippet demonstrates how to create a basic controller in Webman with two actions: `index` and `hello`. The controller handles requests and returns responses using the `response()` helper function.  It requires the `support\\Request` class for request handling.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/fr/controller.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\n\nclass FooController\n{\n    public function index(Request $request)\n    {\n        return response('hello index');\n    }\n    \n    public function hello(Request $request)\n    {\n        return response('hello webman');\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: CORS Middleware in PHP\nDESCRIPTION: This snippet shows a CORS middleware implementation in PHP. It handles OPTIONS requests and adds CORS-related HTTP headers to the response.  The headers control access from different origins.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-hk/middleware.md#2025-04-12_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n\"<?php\nnamespace app\\middleware;\n\nuse Webman\\MiddlewareInterface;\nuse Webman\\Http\\Response;\nuse Webman\\Http\\Request;\n\nclass AccessControlTest implements MiddlewareInterface\n{\n    public function process(Request $request, callable $handler) : Response\n    {\n        // 如果是options請求則返回一個空響應，否則繼續向洋蔥芯穿越，并得到一個響應\n        $response = $request->method() == 'OPTIONS' ? response('') : $handler($request);\n        \n        // 給響應添加跨域相關的http頭\n        $response->withHeaders([\n            'Access-Control-Allow-Credentials' => 'true',\n            'Access-Control-Allow-Origin' => $request->header('origin', '*'),\n            'Access-Control-Allow-Methods' => $request->header('access-control-request-method', '*'),\n            'Access-Control-Allow-Headers' => $request->header('access-control-request-headers', '*'),\n        ]);\n        \n        return $response;\n    }\n}\"\n```\n\n----------------------------------------\n\nTITLE: Validator Function Examples\nDESCRIPTION: Comprehensive examples showing various validation rules and methods using Respect Validation\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/components/validation.md#2025-04-12_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Respect\\Validation\\Validator as v;\n\n// Single rule validation\n$number = 123;\nv::numericVal()->validate($number); // true\n\n// Multiple rules chained validation\n$usernameValidator = v::alnum()->noWhitespace()->length(1, 15);\n$usernameValidator->validate('alganet'); // true\n\n// Get the first validation failure reason\ntry {\n    $usernameValidator->setName('Username')->check('alg  anet');\n} catch (ValidationException $exception) {\n    echo $exception->getMessage(); // Username can only contain letters (a-z) and numbers (0-9)\n}\n```\n\n----------------------------------------\n\nTITLE: Custom exception handler in Webman\nDESCRIPTION: This code defines a custom exception handler for Webman applications. It extends the default handler and overrides the `render` method to return JSON responses for AJAX requests and HTML templates for standard page requests, setting the HTTP status code to 500.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/others/custom-error-page.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace app\\exception;\n\nuse Throwable;\nuse Webman\\Http\\Request;\nuse Webman\\Http\\Response;\n\nclass Handler extends \\support\\exception\\Handler\n{\n    /**\n     * 渲染返回\n     * @param Request $request\n     * @param Throwable $exception\n     * @return Response\n     */\n    public function render(Request $request, Throwable $exception) : Response\n    {\n        $code = $exception->getCode();\n        // ajax请求返回json数据\n        if ($request->expectsJson()) {\n            return json(['code' => $code ? $code : 500, 'msg' => $exception->getMessage()]);\n        }\n        // 页面请求返回500.html模版\n        return view('500', ['exception' => $exception], '')->withStatus(500);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Redis Connections in Webman\nDESCRIPTION: This PHP code shows an example configuration for multiple Redis connections within a Webman application.  It defines two connections, 'default' and 'cache', each with different database settings.  This is useful for isolating data in different Redis databases.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/db/redis.md#2025-04-12_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'default' => [\n        'host'     => '127.0.0.1',\n        'password' => null,\n        'port'     => 6379,\n        'database' => 0,\n    ],\n\n    'cache' => [\n        'host'     => '127.0.0.1',\n        'password' => null,\n        'port'     => 6379,\n        'database' => 1,\n    ],\n\n]\n```\n\n----------------------------------------\n\nTITLE: Subquery Selection in Eloquent\nDESCRIPTION: Demonstrates using subqueries for advanced data selection in Eloquent models.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/tr/db/model.md#2025-04-12_snippet_14\n\nLANGUAGE: PHP\nCODE:\n```\nuse app\\model\\Destination;\nuse app\\model\\Flight;\n\nreturn Destination::addSelect(['last_flight' => Flight::select('name')\n    ->whereColumn('destination_id', 'destinations.id')\n    ->orderBy('arrived_at', 'desc')\n    ->limit(1)\n])->get();\n```\n\n----------------------------------------\n\nTITLE: Using Redis Pipeline Commands in PHP\nDESCRIPTION: This snippet illustrates the use of Redis pipeline commands in a Webman PHP application. It demonstrates how to send multiple commands in a single operation to optimize performance by batching requests.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/es/db/redis.md#2025-04-12_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nRedis::pipeline(function ($pipe) {\n    for ($i = 0; $i < 1000; $i++) {\n        $pipe->set(\"key:$i\", $i);\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: MongoDB Usage Example in Controller\nDESCRIPTION: Example controller code demonstrating how to insert data into MongoDB collection and retrieve it using the database connection\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/db/mongo.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\nuse support\\Db;\n\nclass UserController\n{\n    public function db(Request $request)\n    {\n        Db::connection('mongodb')->collection('test')->insert([1,2,3]);\n        return json(Db::connection('mongodb')->collection('test')->get());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using updateOrCreate Method in Eloquent ORM\nDESCRIPTION: Shows how to use updateOrCreate method which updates an existing model or creates a new one if none exists in a single operation. This method automatically persists the model to the database without needing to call save().\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/db/model.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// 如果有从奥克兰到圣地亚哥的航班，则价格定为99美元。\n// 如果没匹配到存在的模型，则创建一个。\n$flight = app\\modle\\Flight::updateOrCreate(\n    ['departure' => 'Oakland', 'destination' => 'San Diego'],\n    ['price' => 99, 'discounted' => 1]\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Multi-Application Middleware in Webman\nDESCRIPTION: Example of configuring middleware for multiple applications, showing both global and application-specific middleware setup.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/middleware.md#2025-04-12_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    '' => [\n        app\\middleware\\AuthCheckTest::class,\n        app\\middleware\\AccessControlTest::class,\n    ],\n    'api' => [\n        app\\middleware\\ApiOnly::class,\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Making Non-blocking HTTP Requests with workerman/http-client\nDESCRIPTION: Example of sending asynchronous HTTP requests in a synchronous style using workerman/http-client. This approach improves web application performance by not blocking during external API calls.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/coroutine/fiber.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace app\\controller;\n\nuse support\\Request;\nuse Workerman\\Http\\Client;\n\nclass TestController\n{\n    public function index(Request $request)\n    {\n        static $client;\n        $client = $client ?: new Client();\n        $response = $client->get('http://example.com'); // Асинхронная отправка запроса синхронным способом\n        return $response->getBody()->getContents();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Chunking Query Results in PHP\nDESCRIPTION: This code shows how to process large result sets in chunks using the chunkById() method. It's useful for handling large datasets without overloading memory.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/tr/db/queries.md#2025-04-12_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')->orderBy('id')->chunkById(100, function ($users) {\n    foreach ($users as $user) {\n        //\n    }\n});\n\nDb::table('users')->orderBy('id')->chunkById(100, function ($users) {\n    // Process the records...\n\n    return false;\n});\n```\n\n----------------------------------------\n\nTITLE: Offset / Limit Clauses with Webman PHP\nDESCRIPTION: This code snippet demonstrates how to use the `offset()` and `limit()` clauses in the Webman PHP framework's database query builder. It retrieves 5 users starting from the 11th user (offset 10).\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/fr/db/queries.md#2025-04-12_snippet_31\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')\n                ->offset(10)\n                ->limit(5)\n                ->get();\n```\n\n----------------------------------------\n\nTITLE: Setting Up Event Configuration in PHP\nDESCRIPTION: This snippet defines the event configuration for listeners and subscribers in a PHP application. It utilizes an associative array to specify listener classes that will handle defined events.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/event.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    // 事件監聽\n    'listener'    => [],\n\n    // 事件訂閱器\n    'subscriber' => [],\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring Database for Webman Application Plugin in PHP\nDESCRIPTION: Demonstrates how to configure database connections for a Webman application plugin, including multiple connection settings.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/tr/plugin/app.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nreturn  [\n    'default' => 'mysql',\n    'connections' => [\n        'mysql' => [ // mysql bağlantı adıdır\n            'driver'      => 'mysql',\n            'host'        => '127.0.0.1',\n            'port'        => 3306,\n            'database'    => 'veritabanı',\n            'username'    => 'kullanıcı_adı',\n            'password'    => 'parola',\n            'charset'     => 'utf8mb4',\n            'collation'   => 'utf8mb4_general_ci',\n        ],\n        'admin' => [ // admin bağlantı adıdır\n            'driver'      => 'mysql',\n            'host'        => '127.0.0.1',\n            'port'        => 3306,\n            'database'    => 'veritabanı',\n            'username'    => 'kullanıcı_adı',\n            'password'    => 'parola',\n            'charset'     => 'utf8mb4',\n            'collation'   => 'utf8mb4_general_ci',\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Inserting Records in WebMan PHP Query Builder\nDESCRIPTION: Shows how to insert single and multiple records, and how to get the last inserted ID.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/jp/db/queries.md#2025-04-12_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')->insert(\n    ['email' => 'john@example.com', 'votes' => 0]\n);\n```\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')->insert([\n    ['email' => 'taylor@example.com', 'votes' => 0],\n    ['email' => 'dayle@example.com', 'votes' => 0]\n]);\n```\n\nLANGUAGE: php\nCODE:\n```\n$id = Db::table('users')->insertGetId(\n    ['email' => 'john@example.com', 'votes' => 0]\n);\n```\n\n----------------------------------------\n\nTITLE: Webman Plugin Directory Structure Layout\nDESCRIPTION: Shows the complete directory structure of a Webman plugin including app, config, public, and api directories. The structure follows PSR4 specification and mirrors a regular Webman application layout.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/app/directory.md#2025-04-12_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nplugin/\n└── foo\n    ├── app\n    │   ├── controller\n    │   │   └── IndexController.php\n    │   ├── exception\n    │   │   └── Handler.php\n    │   ├── functions.php\n    │   ├── middleware\n    │   ├── model\n    │   └── view\n    │       └── index\n    │           └── index.html\n    ├── config\n    │   ├── app.php\n    │   ├── autoload.php\n    │   ├── container.php\n    │   ├── database.php\n    │   ├── exception.php\n    │   ├── log.php\n    │   ├── middleware.php\n    │   ├── process.php\n    │   ├── redis.php\n    │   ├── route.php\n    │   ├── static.php\n    │   ├── thinkorm.php\n    │   ├── translation.php\n    │   └── view.php\n    ├── public\n    └── api\n```\n\n----------------------------------------\n\nTITLE: Redis Queue Consumer Implementation\nDESCRIPTION: Example consumer class implementation for processing queued messages.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/queue/redis.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace app\\queue\\redis;\n\nuse Webman\\RedisQueue\\Consumer;\n\nclass MyMailSend implements Consumer\n{\n    // Queue name to consume\n    public $queue = 'send-mail';\n\n    // Connection name, corresponding to the connection in `plugin/webman/redis-queue/redis.php`\n    public $connection = 'default';\n\n    // Consumption\n    public function consume($data)\n    {\n        // No need for deserialization\n        var_export($data);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Performing Table Joins\nDESCRIPTION: Examples of different types of SQL joins including inner, left, right, and cross joins\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/db/queries.md#2025-04-12_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')\n            ->join('contacts', 'users.id', '=', 'contacts.user_id')\n            ->join('orders', 'users.id', '=', 'orders.user_id')\n            ->select('users.*', 'contacts.phone', 'orders.price')\n            ->get();\n```\n\n----------------------------------------\n\nTITLE: Basic Session Usage in Webman Controller\nDESCRIPTION: Demonstrates how to get, set and retrieve session data in a Webman controller. Shows the pattern of getting a session instance from the request object.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/fr/session.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\n\nclass UserController\n{\n    public function hello(Request $request)\n    {\n        $name = $request->get('name');\n        $session = $request->session();\n        $session->set('name', $name);\n        return response('hello ' . $session->get('name'));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Records in WebMan PHP Query Builder\nDESCRIPTION: Demonstrates how to update existing records and use updateOrInsert for upsert operations.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/jp/db/queries.md#2025-04-12_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n$affected = Db::table('users')\n              ->where('id', 1)\n              ->update(['votes' => 1]);\n```\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')\n    ->updateOrInsert(\n        ['email' => 'john@example.com', 'name' => 'John'],\n        ['votes' => '2']\n    );\n```\n\n----------------------------------------\n\nTITLE: Getting Client's Real IP Address - PHP\nDESCRIPTION: This snippet retrieves the client's real IP address when behind a proxy. The `$safe_mode` parameter determines if extra checks are performed for reliability. It examines HTTP headers like `x-real-ip` and `x-forwarded-for` to find the correct IP, with noted limitations on reliability when headers are potentially spoofed.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/request.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$request->getRealIp($safe_mode = true);\n```\n\n----------------------------------------\n\nTITLE: Logging Configuration Setup\nDESCRIPTION: Configuration example for setting up the default logging channel with rotating file handler and line formatter.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/log.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'default' => [\n        'handlers' => [\n            [   \n                'class' => Monolog\\Handler\\RotatingFileHandler::class,\n                'constructor' => [\n                    runtime_path() . '/logs/webman.log',\n                    Monolog\\Logger::DEBUG,\n                ],\n                'formatter' => [\n                    'class' => Monolog\\Formatter\\LineFormatter::class,\n                    'constructor' => [ null, 'Y-m-d H:i:s', true],\n                ],\n            ]\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Route Middleware Configuration in PHP Webman\nDESCRIPTION: Example of applying middleware to specific routes or route groups\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/route.md#2025-04-12_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nRoute::any('/admin', [app\\admin\\controller\\IndexController::classe, 'index'])->middleware([\n    app\\middleware\\MiddlewareA::class,\n    app\\middleware\\MiddlewareB::class,\n]);\n```\n\n----------------------------------------\n\nTITLE: Custom Business Exception Handler in PHP\nDESCRIPTION: Implementation of a custom business exception handler with customized response format.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/exception.md#2025-04-12_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace app\\exception;\n\nuse support\\exception\\BusinessException;\nuse Webman\\Http\\Request;\nuse Webman\\Http\\Response;\n\nclass MyBusinessException extends BusinessException\n{\n    public function render(Request $request): ?Response\n    {\n        // json请求返回json数据\n        if ($request->expectsJson()) {\n            return json(['code' => $this->getCode() ?: 500, 'message' => $this->getMessage()]);\n        }\n        // 非json请求则返回一个页面\n        return new Response(200, [], $this->getMessage());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Authorization Middleware for webman\nDESCRIPTION: This code defines an authorization middleware that uses webman-permission to check user permissions before allowing access to a resource. It intercepts requests, retrieves user ID and action, and enforces the permission using `Permission::enforce()`.  If the user lacks permission, an exception is thrown, denying access.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/casbin.md#2025-04-12_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n/**\n * 授權中介軟體\n * @作者 ShaoBo Wan (Tinywan)\n * @日期時間 2021/09/07 14:15\n */\n\ndeclare(strict_types=1);\n\nnamespace app\\middleware;\n\nuse Webman\\MiddlewareInterface;\nuse Webman\\Http\\Response;\nuse Webman\\Http\\Request;\nuse Casbin\\Exceptions\\CasbinException;\nuse webman\\permission\\Permission;\n\nclass AuthorizationMiddleware implements MiddlewareInterface\n{\n    public function process(Request $request, callable $next): Response\n    {\n        $uri = $request->path();\n        try {\n            $userId = 10086;\n            $action = $request->method();\n            if (!Permission::enforce((string) $userId, $uri, strtoupper($action))) {\n                throw new \\Exception('對不起，您沒有該接口訪問權限');\n            }\n        } catch (CasbinException $exception) {\n            throw new \\Exception('授權異常' . $exception->getMessage());\n        }\n        return $next($request);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: BusinessException Example Controller\nDESCRIPTION: Example of using BusinessException in a controller to handle parameter validation errors.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/exception.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\nuse support\\exception\\BusinessException;\n\nclass FooController\n{\n    public function index(Request $request)\n    {\n        $this->checkInput($request->post());\n        return response('hello index');\n    }\n    \n    protected function checkInput($input)\n    {\n        if (!isset($input['token'])) {\n            throw new BusinessException('Parameter error', 3000);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining and Implementing a Mailer Interface\nDESCRIPTION: These PHP code snippets show how to define a MailerInterface and implement it in a Mailer class for interface injection.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/tr/di.md#2025-04-12_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\service;\n\ninterface MailerInterface\n{\n    public function mail($email, $content);\n}\n```\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\service;\n\nclass Mailer implements MailerInterface\n{\n    private $smtpHost;\n\n    private $smtpPort;\n\n    public function __construct($smtp_host, $smtp_port)\n    {\n        $this->smtpHost = $smtp_host;\n        $this->smtpPort = $smtp_port;\n    }\n\n    public function mail($email, $content)\n    {\n        // Mail gönderme kodu burada olacak\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Single File Upload Handler in Webman PHP\nDESCRIPTION: Example showing how to handle a single file upload with validation and file moving\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/request.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\n\nclass UploadController\n{\n    public function file(Request $request)\n    {\n        $file = $request->file('avatar');\n        if ($file && $file->isValid()) {\n            $file->move(public_path().'/files/myfile.'.$file->getUploadExtension());\n            return json(['code' => 0, 'msg' => 'upload success']);\n        }\n        return json(['code' => 1, 'msg' => 'file not found']);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Authorization Middleware Implementation for Webman\nDESCRIPTION: Complete implementation of an authorization middleware that checks user permissions for each request based on user ID, URI, and HTTP method.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-hk/casbin.md#2025-04-12_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n/**\n * 授權中間件\n * @作者 ShaoBo Wan (Tinywan)\n * @日期時間 2021/09/07 14:15\n */\n\ndeclare(strict_types=1);\n\nnamespace app\\middleware;\n\nuse Webman\\MiddlewareInterface;\nuse Webman\\Http\\Response;\nuse Webman\\Http\\Request;\nuse Casbin\\Exceptions\\CasbinException;\nuse webman\\permission\\Permission;\n\nclass AuthorizationMiddleware implements MiddlewareInterface\n{\n\tpublic function process(Request $request, callable $next): Response\n\t{\n\t\t$uri = $request->path();\n\t\ttry {\n\t\t\t$userId = 10086;\n\t\t\t$action = $request->method();\n\t\t\tif (!Permission::enforce((string) $userId, $uri, strtoupper($action))) {\n\t\t\t\tthrow new \\Exception('對不起，您沒有該接口訪問權限');\n\t\t\t}\n\t\t} catch (CasbinException $exception) {\n\t\t\tthrow new \\Exception('授權異常' . $exception->getMessage());\n\t\t}\n\t\treturn $next($request);\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Input via Controller Parameters (PHP)\nDESCRIPTION: This PHP code demonstrates how to retrieve input values directly from controller parameters in Webman Framework v1.6. The framework automatically binds request parameters to the corresponding controller method arguments based on their names and types. The example shows how to handle string, integer, float, boolean, and array types.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/upgrade/1-6.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\nuse support\\Response;\n\nclass UserController\n{\n    public function create(string $name, int $age, float $balance, bool $vip, array $extension): Response\n    {\n        return json([\n            'name' => $name,\n            'age' => $age,\n            'balance' => $balance,\n            'vip' => $vip,\n            'extension' => $extension,\n        ]);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Nginx Proxy Configuration for Webman\nDESCRIPTION: This Nginx configuration sets up a reverse proxy for a Webman application running on `127.0.0.1:8787`. It configures the upstream server, sets necessary headers for the Webman application to function correctly, and passes requests to the Webman server if the requested file is not found locally. The `server_name` and `root` directives should be configured according to the specific deployment.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/th/others/nginx-proxy.md#2025-04-12_snippet_0\n\nLANGUAGE: nginx\nCODE:\n```\nupstream webman {\n    server 127.0.0.1:8787;\n    keepalive 10240;\n}\nserver {\n  server_name โดเมนเว็บไซต์;\n  listen 80;\n  access_log off;\n  root /your/webman/public;\n  location ^~ / {\n      proxy_set_header X-Real-IP $remote_addr;\n      proxy_set_header Host $http_host;\n      proxy_set_header X-Forwarded-Proto $scheme;\n      proxy_http_version 1.1;\n      proxy_set_header Connection \"\";\n      if (!-f $request_filename){\n          proxy_pass http://webman;\n      }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Business Exception Implementation\nDESCRIPTION: Implementation of a custom business exception class that modifies the default error response format.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/exception.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace app\\exception;\n\nuse support\\exception\\BusinessException;\nuse Webman\\Http\\Request;\nuse Webman\\Http\\Response;\n\nclass MyBusinessException extends BusinessException\n{\n    public function render(Request $request): ?Response\n    {\n        // Return JSON data for JSON requests\n        if ($request->expectsJson()) {\n            return json(['code' => $this->getCode() ?: 500, 'message' => $this->getMessage()]);\n        }\n        // Return a page for non-JSON requests\n        return new Response(200, [], $this->getMessage());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Background Task Process in Webman\nDESCRIPTION: Custom process class for implementing background tasks using timers and database operations.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/process.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app;\n\nuse Workerman\\Timer;\nuse support\\Db;\n\nclass TaskTest\n{\n  \n    public function onWorkerStart()\n    {\n        // Check the database for new user registrations every 10 seconds\n        Timer::add(10, function(){\n            Db::table('users')->where('regist_timestamp', '>', time()-10)->get();\n        });\n    }\n    \n}\n```\n\n----------------------------------------\n\nTITLE: Performing Select Subqueries with Eloquent in PHP\nDESCRIPTION: This code demonstrates how to use select subqueries to retrieve related data in a single query.  It adds the last flight name to each destination by using a subquery that selects the name from the flights table, filtering by destination ID and ordering by arrival time.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/es/db/model.md#2025-04-12_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse app\\model\\Destination;\nuse app\\model\\Flight;\n\nreturn Destination::addSelect(['last_flight' => Flight::select('name')\n    ->whereColumn('destination_id', 'destinations.id')\n    ->orderBy('arrived_at', 'desc')\n    ->limit(1)\n])->get();\n\n```\n\n----------------------------------------\n\nTITLE: Implementazione del controller per la gestione del captcha in PHP\nDESCRIPTION: Definizione della classe LoginController con metodi per generare l'immagine del captcha, verificare l'input dell'utente e gestire la sessione.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/components/captcha.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\nuse Webman\\Captcha\\CaptchaBuilder;\n\nclass LoginController\n{\n    /**\n     * Pagina di prova\n     */\n    public function index(Request $request)\n    {\n        return view('login/index');\n    }\n    \n    /**\n     * Stampare l'immagine del codice di verifica\n     */\n    public function captcha(Request $request)\n    {\n        // Inizializza la classe del codice di verifica\n        $builder = new CaptchaBuilder;\n        // Genera un codice di verifica\n        $builder->build();\n        // Salva il valore del codice di verifica nella sessione\n        $request->session()->set('captcha', strtolower($builder->getPhrase()));\n        // Ottiene dati binari dell'immagine del codice di verifica\n        $img_content = $builder->get();\n        // Restituisce i dati binari del codice di verifica\n        return response($img_content, 200, ['Content-Type' => 'image/jpeg']);\n    }\n\n    /**\n     * Verifica il codice di verifica\n     */\n    public function check(Request $request)\n    {\n        // Ottiene il campo captcha dalla richiesta POST\n        $captcha = $request->post('captcha');\n        // Confronta il valore del captcha nella sessione\n        if (strtolower($captcha) !== $request->session()->get('captcha')) {\n            return json(['code' => 400, 'msg' => 'Il codice di verifica inserito non è corretto']);\n        }\n        return json(['code' => 0, 'msg' => 'ok']);\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting Data And Getting ID With Webman DB Query Builder\nDESCRIPTION: This snippet inserts a new record into the 'users' table and retrieves the auto-incrementing ID using the `insertGetId()` method. This is useful for obtaining the ID of the newly inserted record immediately.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/db/queries.md#2025-04-12_snippet_26\n\nLANGUAGE: php\nCODE:\n```\n$id = Db::table('users')->insertGetId(\n    ['email' => 'john@example.com', 'votes' => 0]\n);\n```\n\n----------------------------------------\n\nTITLE: Setting User Permissions in Webman Config\nDESCRIPTION: Configuration example for setting user and group permissions in Webman's server and process configuration files. This helps improve security by running processes with lower privileges.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/others/security.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// config/server.php\n{\n    \"user\": \"www-data\",\n    \"group\": \"www-data\"\n}\n\n// config/process.php\n{\n    \"user\": \"www-data\",\n    \"group\": \"www-data\"\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Eloquent Model Definition in PHP\nDESCRIPTION: Example of defining a basic User model with table name, primary key and timestamp configurations.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/de/db/model.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\model;\n\nuse support\\Model;\n\nclass User extends Model\n{\n    /**\n     * Name der mit dem Modell verknüpften Tabelle\n     *\n     * @var string\n     */\n    protected $table = 'user';\n\n    /**\n     * Neudefinition des Primärschlüssels, standardmäßig ist es \"id\"\n     *\n     * @var string\n     */\n    protected $primaryKey = 'uid';\n\n    /**\n     * Gibt an, ob Zeitstempel automatisch gepflegt werden\n     *\n     * @var bool\n     */\n    public $timestamps = false;\n}\n```\n\n----------------------------------------\n\nTITLE: Mass Assignment with 'create' in PHP\nDESCRIPTION: This snippet demonstrates using the `create()` method for mass assignment.  Before using `create()`, either `$fillable` or `$guarded` must be defined on the model to prevent mass assignment vulnerabilities. It returns the created model instance.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/fr/db/model.md#2025-04-12_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n$flight = app\\modle\\Flight::create(['name' => 'Flight 10']);\n```\n\n----------------------------------------\n\nTITLE: Passing Parameters to Route Middleware Constructor in PHP\nDESCRIPTION: Similar to global middleware, this code snippet shows how to pass parameters to route middleware through the constructor using either direct instantiation or anonymous functions. This allows for customized middleware behavior based on route-specific configurations.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/middleware.md#2025-04-12_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nRoute::any('/admin', [app\\admin\\controller\\IndexController::class, 'index'])->middleware([\n    new app\\middleware\\MiddlewareA($param1, $param2, ...),\n    function(){\n        return new app\\middleware\\MiddlewareB($param1, $param2, ...);\n    },\n]);\n```\n\n----------------------------------------\n\nTITLE: Updating a Record - PHP\nDESCRIPTION: Updates the 'votes' field of a user with ID 1 in the 'users' table. This is useful for modifying existing records based on specific conditions.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/pt/db/queries.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$affected = Db::table('users')\n              ->where('id', 1)\n              ->update(['votes' => 1]);\n```\n\n----------------------------------------\n\nTITLE: Creating Event Subscriber Class\nDESCRIPTION: Implementation of an event subscriber class that handles log error events\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/event.md#2025-04-12_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nnamespace extend\\event\\subscriber;\n\nuse extend\\event\\LogErrorWriteEvent;\nuse Symfony\\Component\\EventDispatcher\\EventSubscriberInterface;\n\nclass LoggerSubscriber implements EventSubscriberInterface\n{\n    /**\n     * @desc: Method description\n     * @return array|string[]\n     */\n    public static function getSubscribedEvents()\n    {\n        return [\n            LogErrorWriteEvent::NAME => 'onLogErrorWrite',\n        ];\n    }\n\n    /**\n     * @desc: Trigger event\n     * @param LogErrorWriteEvent $event\n     */\n    public function onLogErrorWrite(LogErrorWriteEvent $event)\n    {\n        // Some specific business logic\n        var_dump($event->handle());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Table Name Configuration\nDESCRIPTION: Shows how to specify a custom table name for an Eloquent model.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/db/model.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nclass User extends Model\n{\n    /**\n     * The table associated with the model\n     *\n     * @var string\n     */\n    protected $table = 'user';\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Pagination in UserController\nDESCRIPTION: This code demonstrates how to use the Paginator class in a UserController to handle pagination for a user list. It sets up pagination parameters and passes the paginator object to a view.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/components/paginator.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\nuse JasonGrimes\\Paginator;\n\nclass UserController\n{\n    /**\n     * User list\n     */\n    public function get(Request $request)\n    {\n        $total_items = 1000;\n        $items_perPage = 50;\n        $current_page = (int)$request->get('page', 1);\n        $url_pattern = '/user/get?page=(:num)';\n        $paginator = new Paginator($total_items, $items_perPage, $current_page, $url_pattern);\n        return view('user/get', ['paginator' => $paginator]);\n    }\n    \n}\n```\n\n----------------------------------------\n\nTITLE: Inserting New Records with Eloquent - PHP\nDESCRIPTION: Demonstrates how to insert a new user record into the database using Eloquent models. Shows creating a new model instance, setting its attributes, and calling the save method. Requires setting up the model and database connection according to Laravel's standards.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/db/model.md#2025-04-12_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nnamespace app\\controller;\n\nuse app\\model\\User;\nuse support\\Request;\nuse support\\Response;\n\nclass FooController\n{\n    /**\n     * Add a new record to the user table.\n     *\n     * @param  Request  $request\n     * @return Response\n     */\n    public function store(Request $request)\n    {\n        // Validate the request\n\n        $user = new User;\n\n        $user->name = $request->get('name');\n\n        $user->save();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Non-blocking HTTP Requests in PHP\nDESCRIPTION: Shows how to use the Workerman HTTP Client to send non-blocking HTTP requests in a Webman controller. This method improves application performance by allowing asynchronous HTTP requests.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/de/coroutine/fiber.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace app\\controller;\n\nuse support\\Request;\nuse Workerman\\Http\\Client;\n\nclass TestController\n{\n    public function index(Request $request)\n    {\n        static $client;\n        $client = $client ?: new Client();\n        $response = $client->get('http://example.com'); // Synchron sendet eine asynchrone Anfrage \n        return $response->getBody()->getContents();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Subquery Ordering\nDESCRIPTION: Implementing ordering based on subqueries in Eloquent.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/de/db/model.md#2025-04-12_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nreturn Destination::orderByDesc(\n    Flight::select('arrived_at')\n        ->whereColumn('destination_id', 'destinations.id')\n        ->orderBy('arrived_at', 'desc')\n        ->limit(1)\n)->get();\n```\n\n----------------------------------------\n\nTITLE: Multiple Database Configuration in Medoo\nDESCRIPTION: Configuration example for setting up multiple database connections in Medoo. Shows how to define default and additional database connections with detailed PDO settings.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/db/medoo.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nreturn [\n    'default' => [\n        'type' => 'mysql',\n        'host' => 'localhost',\n        'database' => 'database',\n        'username' => 'username',\n        'password' => 'password',\n        'charset' => 'utf8mb4',\n        'collation' => 'utf8mb4_general_ci',\n        'port' => 3306,\n        'prefix' => '',\n        'logging' => false,\n        'error' => PDO::ERRMODE_EXCEPTION,\n        'option' => [\n            PDO::ATTR_CASE => PDO::CASE_NATURAL\n        ],\n        'command' => [\n            'SET SQL_MODE=ANSI_QUOTES'\n        ]\n    ],\n    'other' => [\n        'type' => 'mysql',\n        'host' => 'localhost',\n        'database' => 'database',\n        'username' => 'username',\n        'password' => 'password',\n        'charset' => 'utf8mb4',\n        'collation' => 'utf8mb4_general_ci',\n        'port' => 3306,\n        'prefix' => '',\n        'logging' => false,\n        'error' => PDO::ERRMODE_EXCEPTION,\n        'option' => [\n            PDO::ATTR_CASE => PDO::CASE_NATURAL\n        ],\n        'command' => [\n            'SET SQL_MODE=ANSI_QUOTES'\n        ]\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Using whereBetween Clauses With Webman DB Query Builder\nDESCRIPTION: This snippet demonstrates how to use `whereBetween` and `whereNotBetween` to filter results based on a range of values. `whereBetween` selects records where the 'votes' value is between 1 and 100 (inclusive), while `whereNotBetween` selects records where the 'votes' value is outside that range.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/db/queries.md#2025-04-12_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')\n           ->whereBetween('votes', [1, 100])\n           ->get();\n```\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')\n                    ->whereNotBetween('votes', [1, 100])\n                    ->get();\n```\n\n----------------------------------------\n\nTITLE: Setting Default Attribute Values in Eloquent Model\nDESCRIPTION: Illustrates how to define default values for model attributes in an Eloquent model using the $attributes property.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/db/model.md#2025-04-12_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nclass User extends Model\n{\n    protected $attributes = [\n        'delayed' => false,\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Passing Parameters to Middleware Constructor in PHP\nDESCRIPTION: This code demonstrates how to pass parameters to middleware through the constructor, either by instantiating the middleware class directly or by using an anonymous function. This approach allows for greater flexibility in configuring middleware behavior.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/middleware.md#2025-04-12_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    // Global middleware\n    '' => [\n        new app\\middleware\\AuthCheckTest($param1, $param2, ...),\n        function(){\n            return new app\\middleware\\AccessControlTest($param1, $param2, ...);\n        },\n    ],\n    // Application middleware (only effective in multi-application mode)\n    'api' => [\n        app\\middleware\\ApiOnly::class,\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Alipay Notification\nDESCRIPTION: This code handles asynchronous notifications from Alipay. It retrieves the payment configuration, initializes the Pay SDK, and processes the Alipay callback using `Pay::alipay()->callback()`. It then performs transaction status verification and returns a success response.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/es/components/payment.md#2025-04-12_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\nuse support\\Request;\nuse Webman\\Config;\nuse Yansongda\\Pay\\Pay;\n\n/**\n * @desc: Notificación asincrónica de Alipay\n * @param Request $request\n * @return Response\n */\npublic function alipayNotify(Request $request): Response\n{\n    // 1. Obtener el archivo de configuración config/payment.php\n    $config = Config::get('payment');\n\n    // 2. Inicializar la configuración\n    Pay::config($config);\n\n    // 3. Procesar la devolución de Alipay\n    $result = Pay::alipay()->callback($request->post());\n\n    // ===================================================================================================\n    // Realice la verificación del estado de la transacción y otras lógicas. Alipay considerará que el pago del comprador ha sido exitoso sólo si el estado de la transacción es TRADE_SUCCESS o TRADE_FINISHED.\n    // 1. El comerciante debe verificar si out_trade_no en los datos de notificación es el número de pedido creado en el sistema del comerciante;\n    // 2. Verifique si total_amount es realmente el monto real de la orden (es decir, el monto cuando se creó la orden del comerciante);\n    // 3. Verifique si seller_id (o seller_email) en la notificación es la parte correspondiente al pedido out_trade_no;\n    // 4. Verifique si app_id es la propia del comerciante.\n    // 5. Otras lógicas comerciales\n    // ===================================================================================================\n\n    // 5. Procesar la devolución de Alipay\n    return new Response(200, [], 'success');\n}\n```\n\n----------------------------------------\n\nTITLE: Laravel Pagination Usage in Webman Controller\nDESCRIPTION: This PHP code demonstrates how to implement pagination in a Webman controller using Laravel's ORM. It retrieves a paginated list of users from the 'user' table and passes the paginator instance to the view.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/fr/db/paginator.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\npublic function index(Request $request)\n{\n    $per_page = 10;\n    $users = Db::table('user')->paginate($per_page);\n    return view('index/index', ['users' => $users]);\n}\n```\n\n----------------------------------------\n\nTITLE: Using Union Operations in webman-php\nDESCRIPTION: Creating union queries to combine results from multiple queries. This example creates a union of two queries: users with null first_name and users with null last_name.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/db/queries.md#2025-04-12_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n$first = Db::table('users')\n            ->whereNull('first_name');\n\n$users = Db::table('users')\n            ->whereNull('last_name')\n            ->union($first)\n            ->get();\n```\n\n----------------------------------------\n\nTITLE: Get All Rows with Webman PHP\nDESCRIPTION: This code snippet demonstrates how to retrieve all rows from the 'users' table using the Webman PHP framework's database query builder. It uses the `Db::table()` method to specify the table and the `get()` method to retrieve all records. The retrieved data is then passed to a view.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/fr/db/queries.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\nuse support\\Db;\n\nclass UserController\n{\n    public function all(Request $request)\n    {\n        $users = Db::table('users')->get();\n        return view('user/all', ['users' => $users]);\n    }\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Implementing Delayed Response with Timer::sleep() in PHP Webman\nDESCRIPTION: An example of using Timer::sleep() to create non-blocking delays in a Webman controller. This method allows the process to handle other requests while waiting, unlike PHP's built-in sleep() function which blocks the process.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/fr/upgrade/1-5.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace app\\controller;\n\nuse support\\Request;\nuse Workerman\\Timer;\n\nclass TestController\n{\n    public function index(Request $request)\n    {\n        // Dormir pendant 1,5 secondes\n        Timer::sleep(1.5);\n        return $request->getRemoteIp();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Permission Configuration File\nDESCRIPTION: This configuration file (`config/permission.php`) defines settings for the webman-permission library, including the default permission settings, logging configurations, and enforcer configurations. The enforcer configurations specify the model configuration file, the adapter class, and the database settings for storing policies.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/casbin.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nreturn [\n    /*\n     *Default  Permission\n     */\n    'default' => 'basic',\n\n    'log' => [\n        'enabled' => false,\n        'logger' => 'log',\n    ],\n\n    'enforcers' => [\n        'basic' => [\n            /*\n            * Model 設定\n            */\n            'model' => [\n                'config_type' => 'file',\n                'config_file_path' => config_path() . '/casbin-basic-model.conf',\n                'config_text' => '',\n            ],\n\n            // 适配器 .\n            'adapter' => webman\\permission\\adapter\\DatabaseAdapter::class,\n\n            /*\n            * 資料庫設定.\n            */\n            'database' => [\n                // 資料庫連線名稱，不填為預設配置.\n                'connection' => '',\n                // 策略表名（不含表前綴）\n                'rules_name' => 'rule',\n                // 策略表完整名稱.\n                'rules_table' => 'train_rule',\n            ],\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Single Value in WebMan PHP Query Builder\nDESCRIPTION: Shows how to fetch a single value from a specific row and column.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/jp/db/queries.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$email = Db::table('users')->where('name', 'John')->value('email');\n```\n\n----------------------------------------\n\nTITLE: Creating Authorization Middleware\nDESCRIPTION: Implementation of a middleware class to handle authorization checks for HTTP requests.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/casbin.md#2025-04-12_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n/**\n * Authorization Middleware\n * @datetime 2021/09/07 14:15\n */\n\ndeclare(strict_types=1);\n\nnamespace app\\middleware;\n\nuse Webman\\MiddlewareInterface;\nuse Webman\\Http\\Response;\nuse Webman\\Http\\Request;\nuse Casbin\\Exceptions\\CasbinException;\nuse webman\\permission\\Permission;\n\nclass AuthorizationMiddleware implements MiddlewareInterface\n{\n\tpublic function process(Request $request, callable $next): Response\n\t{\n\t\t$uri = $request->path();\n\t\ttry {\n\t\t\t$userId = 10086;\n\t\t\t$action = $request->method();\n\t\t\tif (!Permission::enforce((string) $userId, $uri, strtoupper($action))) {\n\t\t\t\tthrow new \\Exception('Sorry, you do not have permission to access this interface');\n\t\t\t}\n\t\t} catch (CasbinException $exception) {\n\t\t\tthrow new \\Exception('Authorization exception' . $exception->getMessage());\n\t\t}\n\t\treturn $next($request);\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Exception Handling Configuration for Webman Applications\nDESCRIPTION: This PHP snippet illustrates how to configure different exception handlers for different applications within a Webman project in `config/exception.php`. Each application can have a single custom exception handler to address specific needs, like a friendly error page or a JSON response.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/multiapp.md#2025-04-12_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nreturn [\n    'shop' => support\\exception\\Handler::class,\n    'api' => support\\exception\\ApiHandler::class,\n];\n```\n\n----------------------------------------\n\nTITLE: Basic Redis Usage in Webman PHP Controller\nDESCRIPTION: Example of using Redis in a Webman PHP controller to set and get a value.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/tr/db/redis.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\nuse support\\Redis;\n\nclass UserController\n{\n    public function db(Request $request)\n    {\n        $key = 'test_key';\n        Redis::set($key, rand());\n        return response(Redis::get($key));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Authentication Middleware in PHP\nDESCRIPTION: This code demonstrates an authentication middleware in PHP. It checks if the user is logged in using sessions and redirects to the login page if not logged in. It also uses reflection to determine if the requested controller method requires login.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-hk/middleware.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n\"<?php\nnamespace app\\middleware;\n\nuse ReflectionClass;\nuse Webman\\MiddlewareInterface;\nuse Webman\\Http\\Response;\nuse Webman\\Http\\Request;\n\nclass AuthCheckTest implements MiddlewareInterface\n{\n    public function process(Request $request, callable $handler) : Response\n    {\n        if (session('user')) {\n            // 已經登錄，請求繼續向洋蔥芯穿越\n            return $handler($request);\n        }\n\n        // 通過反射獲取控制器哪些方法不需要登錄\n        $controller = new ReflectionClass($request->controller);\n        $noNeedLogin = $controller->getDefaultProperties()['noNeedLogin'] ?? [];\n\n        // 訪問的方法需要登錄\n        if (!in_array($request->action, $noNeedLogin)) {\n            //攔截請求，返回一個重定向響應，請求停止向洋蔥芯穿越\n            return redirect('/user/login');\n        }\n\n        // 不需要登錄，請求繼續向洋蔥芯穿越\n        return $handler($request);\n    }\n}\"\n```\n\n----------------------------------------\n\nTITLE: Common Casbin API Usage Examples in Webman PHP\nDESCRIPTION: Examples of common Casbin API methods for permission management, including adding/removing permissions, role management, and permission checking.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-hk/components/casbin.md#2025-04-12_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n# 为用户添加权限\n\nEnforcer::addPermissionForUser('user1', '/user', 'read');\n\n# 删除一个用户的权限\n\nEnforcer::deletePermissionForUser('user1', '/user', 'read');\n\n# 获取用户所有权限\n\nEnforcer::getPermissionsForUser('user1'); \n\n# 为用户添加角色\n\nEnforcer::addRoleForUser('user1', 'role1');\n\n# 为角色添加权限\n\nEnforcer::addPermissionForUser('role1', '/user', 'edit');\n\n# 获取所有角色\n\nEnforcer::getAllRoles();\n\n# 获取用户所有角色\n\nEnforcer::getRolesForUser('user1');\n\n# 根据角色获取用户\n\nEnforcer::getUsersForRole('role1');\n\n# 判断用户是否属于一个角色\n\nEnforcer::hasRoleForUser('use1', 'role1');\n\n# 删除用户角色\n\nEnforcer::deleteRoleForUser('use1', 'role1');\n\n# 删除用户所有角色\n\nEnforcer::deleteRolesForUser('use1');\n\n# 删除角色\n\nEnforcer::deleteRole('role1');\n\n# 删除权限\n\nEnforcer::deletePermission('/user', 'read');\n\n# 删除用户或者角色的所有权限\n\nEnforcer::deletePermissionsForUser('user1');\nEnforcer::deletePermissionsForUser('role1');\n\n# 检查权限，返回 true or false\n\nEnforcer::enforce(\"user1\", \"/user\", \"edit\");\n```\n\n----------------------------------------\n\nTITLE: Retrieving Collections Using Query Builder - PHP\nDESCRIPTION: This snippet demonstrates how to use the count and max methods from the query builder to retrieve scalar values, such as the count of active flights or the maximum price from a collection. It relies on the Laravel Eloquent ORM for executing the queries.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/db/model.md#2025-04-12_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n$count = app\\modle\\Flight::where('active', 1)->count();\n\n$max = app\\modle\\Flight::where('active', 1)->max('price');\n```\n\n----------------------------------------\n\nTITLE: Updating Database Record in PHP\nDESCRIPTION: Updates a specific record in the database by matching an ID and setting new values. Allows updating a single column or multiple columns in a database table.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/db/queries.md#2025-04-12_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$affected = Db::table('users')\n              ->where('id', 1)\n              ->update(['votes' => 1]);\n```\n\n----------------------------------------\n\nTITLE: Authentication Middleware Implementation in PHP\nDESCRIPTION: Authentication middleware example that checks for user session and handles login requirements for controller methods.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/de/middleware.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\middleware;\n\nuse ReflectionClass;\nuse Webman\\MiddlewareInterface;\nuse Webman\\Http\\Response;\nuse Webman\\Http\\Request;\n\nclass AuthCheckTest implements MiddlewareInterface\n{\n    public function process(Request $request, callable $handler) : Response\n    {\n        if (session('user')) {\n            return $handler($request);\n        }\n        $controller = new ReflectionClass($request->controller);\n        $noNeedLogin = $controller->getDefaultProperties()['noNeedLogin'] ?? [];\n        if (!in_array($request->action, $noNeedLogin)) {\n            return redirect('/user/login');\n        }\n        return $handler($request);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Casbin in Webman PHP\nDESCRIPTION: Configuration file for Casbin that defines access control models and adapters. It allows setting up multiple permission models like RESTful and RBAC with different database models.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-hk/components/casbin.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nreturn [\n    'default' => [\n        'model' => [\n            'config_type' => 'file',\n            'config_file_path' => config_path() . '/casbin-restful-model.conf', // 权限规则模型配置文件\n            'config_text' => '',\n        ],\n        'adapter' => [\n            'type' => 'model', // model or adapter\n            'class' => \\app\\model\\Rule::class,\n        ],\n    ],\n    // 可以配置多个权限model\n    'rbac' => [\n        'model' => [\n            'config_type' => 'file',\n            'config_file_path' => config_path() . '/casbin-rbac-model.conf', // 权限规则模型配置文件\n            'config_text' => '',\n        ],\n        'adapter' => [\n            'type' => 'model', // model or adapter\n            'class' => \\app\\model\\RBACRule::class,\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Final Cache Configuration with Redis\nDESCRIPTION: Complete cache configuration showing Redis as default driver with custom connection settings\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/db/cache.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\nreturn [\n    'default' => 'redis',\n    'stores' => [\n        'file' => [\n            'driver' => 'file',\n            'path' => runtime_path('cache')\n        ],\n        'redis' => [\n            'driver' => 'redis',\n            'connection' => 'cache'\n        ],\n        'array' => [\n            'driver' => 'array'\n        ]\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Adding Middleware to a Specific Plugin in Webman\nDESCRIPTION: This snippet shows how to add middleware to a specific plugin in webman through the `config/middleware.php` file. The keys `plugin.ai` and `plugin.ai.admin` are used to add middleware to the `ai` plugin and its `admin` module, respectively. This allows modification of plugin behavior without directly altering plugin code.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/pt/middleware.md#2025-04-12_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\nreturn [\n    'plugin.ai' => [], // Adiciona um middleware ao plug-in ai\n    'plugin.ai.admin' => [], // Adiciona um middleware ao módulo admin do plug-in ai\n];\n```\n\n----------------------------------------\n\nTITLE: Setting Response Properties\nDESCRIPTION: This example demonstrates how to create a `response` object and then use its methods (`cookie()`, `header()`, `withHeaders()`, `withBody()`) to set the different response properties before returning it. It showcases how to build a response step by step.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/response.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\npublic function hello(Request $request)\n{\n    // Создание объекта\n    $response = response();\n    \n    // .... Пропущена бизнес-логика\n    \n    // Установка cookie\n    $response->cookie('foo', 'value');\n    \n    // .... Пропущена бизнес-логика\n    \n    // Установка HTTP-заголовка\n    $response->header('Content-Type', 'application/json');\n    $response->withHeaders([\n                'X-Header-One' => 'Значение заголовка 1',\n                'X-Header-Tow' => 'Значение заголовка 2',\n            ]);\n\n    // .... Пропущена бизнес-логика\n\n    // Установка возвращаемых данных\n    $response->withBody('Возвращаемые данные');\n    return $response;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Implementing WeChat Pay Processing in PHP\nDESCRIPTION: Complete controller example for WeChat Pay integration, including configuration, payment initialization, and notification handling. This code demonstrates how to set up WeChat Pay with various configuration options, generate necessary payment parameters, and process payment notifications.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-hk/components/pay.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Http\\Controllers;\n\nuse Yansongda\\Pay\\Pay;\nuse Yansongda\\Pay\\Log;\n\nclass PayController\n{\n    protected $config = [\n        'appid' => 'wxb3fxxxxxxxxxxx', // APP APPID\n        'app_id' => 'wxb3fxxxxxxxxxxx', // 公眾號 APPID\n        'miniapp_id' => 'wxb3fxxxxxxxxxxx', // 小程序 APPID\n        'mch_id' => '14577xxxx',\n        'key' => 'mF2suE9sU6Mk1Cxxxxxxxxxxx',\n        'notify_url' => 'http://yanda.net.cn/notify.php',\n        'cert_client' => './cert/apiclient_cert.pem', // optional，退款等情況時用到\n        'cert_key' => './cert/apiclient_key.pem',// optional，退款等情況時用到\n        'log' => [ // 可選\n            'file' => './logs/wechat.log',\n            'level' => 'info', // 建議生產環境等級調整為 info，開發環境為 debug\n            'type' => 'single', // 可選 daily.\n            'max_file' => 30, // 可選，當 type 為 daily 時有效，默認 30 天\n        ],\n        'http' => [ // 可選\n            'timeout' => 5.0,\n            'connect_timeout' => 5.0,\n            // 更多配置項請參考 [Guzzle](https://guzzle-cn.readthedocs.io/zh_CN/latest/request-options.html)\n        ],\n        'mode' => 'dev', // 可選，dev/hk;當為 `hk` 時，為香港 gateway。\n    ];\n\n    public function index()\n    {\n        $order = [\n            'out_trade_no' => time(),\n            'total_fee' => '1', // **單位：分**\n            'body' => 'test body - 測試',\n            'openid' => 'onkVf1FjWS5SBIixxxxxxx',\n        ];\n\n        $pay = Pay::wechat($this->config)->mp($order);\n\n        // $pay->appId\n        // $pay->timeStamp\n        // $pay->nonceStr\n        // $pay->package\n        // $pay->signType\n    }\n\n    public function notify()\n    {\n        $pay = Pay::wechat($this->config);\n\n        try{\n            $data = $pay->verify(); // 是的，驗簽就這麼簡單！\n\n            Log::debug('Wechat notify', $data->all());\n        } catch (\\Exception $e) {\n            // $e->getMessage();\n        }\n        \n        return $pay->success()->send();// laravel 框架中請直接 `return $pay->success()`\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Medoo Database Query in Webman Controller\nDESCRIPTION: Example of using Medoo in a Webman controller to query user data from database. Shows basic usage pattern with the get() method.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/db/medoo.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\nuse support\\Medoo;\n\nclass Index\n{\n    public function index(Request $request)\n    {\n        $user = Medoo::get('user', '*', ['uid' => 1]);\n        return json($user);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Model Creation and Update Methods\nDESCRIPTION: Examples of using create, firstOrCreate, firstOrNew, and updateOrCreate methods for model operations.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/pt/db/model.md#2025-04-12_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$flight = app\\modle\\Flight::firstOrCreate(['name' => 'Voo 10']);\n\n$flight = app\\modle\\Flight::firstOrCreate(\n    ['name' => 'Voo 10'],\n    ['atrasado' => 1, 'hora_chegada' => '11:30']\n);\n```\n\n----------------------------------------\n\nTITLE: Aggregation With Webman DB Query Builder\nDESCRIPTION: This snippet demonstrates the usage of aggregation methods like `count()`, `max()`, and `avg()` provided by Webman's query builder. The `count()` method returns the total number of rows in the 'users' table. The `max()` and `avg()` methods return the maximum and average values of the 'price' column in the 'orders' table, respectively.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/db/queries.md#2025-04-12_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')->count();\n$price = Db::table('orders')->max('price');\n$price = Db::table('orders')->where('finalized', 1)->avg('price');\n```\n\n----------------------------------------\n\nTITLE: Selecting Specific Columns With Webman DB Query Builder\nDESCRIPTION: This snippet shows how to select specific columns ('name' and 'email') from the 'user' table using Webman's query builder. The `select()` method is used to specify the columns to retrieve, and `as` is used for aliasing the 'email' column to 'user_email'. The `get()` method executes the query and returns the results.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/db/queries.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('user')->select('name', 'email as user_email')->get();\n```\n\n----------------------------------------\n\nTITLE: Implementing Alipay Payment Gateway in PHP\nDESCRIPTION: Complete implementation of Alipay payment processing including configuration, payment initiation, and handling return and notification callbacks. Demonstrates proper signature verification and response handling.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/components/pay.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace App\\Http\\Controllers;\n\nuse Yansongda\\Pay\\Pay;\nuse Yansongda\\Pay\\Log;\n\nclass PayController\n{\n    protected $config = [\n        'app_id' => '2016082000295641',\n        'notify_url' => 'http://yansongda.cn/notify.php',\n        'return_url' => 'http://yansongda.cn/return.php',\n        'ali_public_key' => 'MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAuWJKrQ6SWvS6niI+4vEVZiYfjkCfLQfoFI2nCp9ZLDS42QtiL4Ccyx8scgc3nhVwmVRte8f57TFvGhvJD0upT4O5O/lRxmTjechXAorirVdAODpOu0mFfQV9y/T9o9hHnU+VmO5spoVb3umqpq6D/Pt8p25Yk852/w01VTIczrXC4QlrbOEe3sr1E9auoC7rgYjjCO6lZUIDjX/oBmNXZxhRDrYx4Yf5X7y8FRBFvygIE2FgxV4Yw+SL3QAa2m5MLcbusJpxOml9YVQfP8iSurx41PvvXUMo49JG3BDVernaCYXQCoUJv9fJwbnfZd7J5YByC+5KM4sblJTq7bXZWQIDAQAB',\n        // Метод шифрования: **RSA2**  \n        'private_key' => 'MIIEpAIBAAKCAQEAs6+F2leOgOrvj9jTeDhb5q46GewOjqLBlGSs/bVL4Z3fMr3p+Q1Tux/6uogeVi/eHd84xvQdfpZ87A1SfoWnEGH5z15yorccxSOwWUI+q8gz51IWqjgZxhWKe31BxNZ+prnQpyeMBtE25fXp5nQZ/pftgePyUUvUZRcAUisswntobDQKbwx28VCXw5XB2A+lvYEvxmMv/QexYjwKK4M54j435TuC3UctZbnuynSPpOmCu45ZhEYXd4YMsGMdZE5/077ZU1aU7wx/gk07PiHImEOCDkzqsFo0Buc/knGcdOiUDvm2hn2y1XvwjyFOThsqCsQYi4JmwZdRa8kvOf57nwIDAQABAoIBAQCw5QCqln4VTrTvcW+msB1ReX57nJgsNfDLbV2dG8mLYQemBa9833DqDK6iynTLNq69y88ylose33o2TVtEccGp8Dqluv6yUAED14G6LexS43KtrXPgugAtsXE253ZDGUNwUggnN1i0MW2RcMqHdQ9ORDWvJUCeZj/AEafgPN8AyiLrZeL07jJz/uaRfAuNqkImCVIarKUX3HBCjl9TpuoMjcMhz/MsOmQ0agtCatO1eoH1sqv5Odvxb1i59c8Hvq/mGEXyRuoiDo05SE6IyXYXr84/Nf2xvVNHNQA6kTckj8shSi+HGM4mO1Y4Pbb7XcnxNkT0Inn6oJMSiy56P+CpAoGBAO1O+5FE1ZuVGuLb48cY+0lHCD+nhSBd66B5FrxgPYCkFOQWR7pWyfNDBlmO3SSooQ8TQXA25blrkDxzOAEGX57EPiipXr/hy5e+WNoukpy09rsO1TMsvC+v0FXLvZ+TIAkqfnYBgaT56ku7yZ8aFGMwdCPL7WJYAwUIcZX8wZ3dAoGBAMHWplAqhe4bfkGOEEpfs6VvEQxCqYMYVyR65K0rI1LiDZn6Ij8fdVtwMjGKFSZZTspmsqnbbuCE/VTyDzF4NpAxdm3cBtZACv1Lpu2Om+aTzhK2PI6WTDVTKAJBYegXaahBCqVbSxieR62IWtmOMjggTtAKWZ1P5LQcRwdkaB2rAoGAWnAPT318Kp7YcDx8whOzMGnxqtCc24jvk2iSUZgb2Dqv+3zCOTF6JUsV0Guxu5bISoZ8GdfSFKf5gBAo97sGFeuUBMsHYPkcLehM1FmLZk1Q+ljcx3P1A/ds3kWXLolTXCrlpvNMBSN5NwOKAyhdPK/qkvnUrfX8sJ5XK2H4J8ECgYAGIZ0HIiE0Y+g9eJnpUFelXvsCEUW9YNK4065SD/BBGedmPHRC3OLgbo8X5A9BNEf6vP7fwpIiRfKhcjqqzOuk6fueA/yvYD04v+Da2MzzoS8+hkcqF3T3pta4I4tORRdRfCUzD80zTSZlRc/h286Y2eTETd+By1onnFFe2X01mwKBgQDaxo4PBcLL2OyVT5DoXiIdTCJ8KNZL9+kV1aiBuOWxnRgkDjPngslzNa1bK+klGgJNYDbQqohKNn1HeFX3mYNfCUpuSnD2Yag53Dd/1DLO+NxzwvTu4D6DCUnMMMBVaF42ig31Bs0jI3JQZVqeeFzSET8fkoFopJf3G6UXlrIEAQ==',\n        // Если используется режим открытого ключа, укажите следующие параметры, а также измените ali_public_key на путь к открытому ключу Alipay с расширением .crt, например (./cert/alipayCertPublicKey_RSA2.crt)\n         // 'app_cert_public_key' => './cert/appCertPublicKey.crt', // путь к открытому ключу приложения\n        // 'alipay_root_cert' => './cert/alipayRootCert.crt', // путь к корневому сертификату Alipay\n        'log' => [ // опционально\n            'file' => './logs/alipay.log',\n            'level' => 'info', // рекомендуется изменить уровень для производства на info, а для разработки на debug\n            'type' => 'single', // опционально, можно использовать ежедневно\n            'max_file' => 30, // опционально, действительно для типа daily, по умолчанию 30 дней\n        ],\n        'http' => [ // опционально\n            'timeout' => 5.0,\n            'connect_timeout' => 5.0,\n            // Дополнительные параметры конфигурации см [Guzzle](https://guzzle-cn.readthedocs.io/zh_CN/latest/request-options.html)\n        ],\n        'mode' => 'dev', // опционально, установите этот параметр, чтобы войти в режим песочницы\n    ];\n\n    public function index()\n    {\n        $order = [\n            'out_trade_no' => time(),\n            'total_amount' => '1',\n            'subject' => 'test subject - тест',\n        ];\n\n        $alipay = Pay::alipay($this->config)->web($order);\n\n        return $alipay->send(); // в фреймворке Laravel просто верните `return $alipay`\n    }\n\n    public function return()\n    {\n        $data = Pay::alipay($this->config)->verify(); // Да, проверка подписи так проста!\n\n        // Номер заказа: $data->out_trade_no\n        // Номер транзакции Alipay: $data->trade_no\n        // Общая сумма заказа: $data->total_amount\n    }\n\n    public function notify()\n    {\n        $alipay = Pay::alipay($this->config);\n    \n        try{\n            $data = $alipay->verify(); // Да, проверка подписи так проста!\n\n            // Пожалуйста, самостоятельно проверьте статус торговли и другие логические проверки. В уведомлении об оплате Alipay, только когда статус уведомления о транзакции равен TRADE_SUCCESS или TRADE_FINISHED, Alipay считает, что покупатель успешно оплатил.\n            // 1. Продавец должен проверить, совпадает ли out_trade_no в уведомлении с номером заказа в системе продавца.\n            // 2. Проверьте, действительно ли total_amount равно фактической сумме этого заказа (т.е. сумме заказа на момент создания заказа продавцом).\n            // 3. Проверьте, совпадает ли seller_id (или seller_email) в уведомлении с соответствующим оператором этого заказа (иногда у продавца может быть несколько seller_id/seller_email).\n            // 4. Подтвердите, что app_id является самим продавцом.\n            // 5. Другие логические условия бизнеса\n\n            Log::debug('Уведомление Alipay', $data->all());\n        } catch (\\Exception $e) {\n            // $e->getMessage();\n        }\n\n        return $alipay->success()->send(); // В фреймворке Laravel просто верните `return $alipay->success()`\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using UpdateOrCreate Method in Eloquent - PHP\nDESCRIPTION: Demonstrates the updateOrCreate method which either updates an existing model or creates a new one with specified attributes. Efficiently handles scenarios requiring conditional data persistence with Eloquent.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/db/model.md#2025-04-12_snippet_19\n\nLANGUAGE: PHP\nCODE:\n```\n// If a flight from Oakland to San Diego exists, set the price to $99.\n// If the model does not exist, create it.\n$flight = app\\modle\\Flight::updateOrCreate(\n    ['departure' => 'Oakland', 'destination' => 'San Diego'],\n    ['price' => 99, 'discounted' => 1]\n);\n```\n\n----------------------------------------\n\nTITLE: Finding a Model with 'firstWhere' Condition in PHP\nDESCRIPTION: This snippet shows an alternative way to retrieve the first model that matches a condition using the `firstWhere()` method. It combines the `where` and `first` functionality. It returns a single model instance or null if not found.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/fr/db/model.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$vol = app\\model\\Flight::firstWhere('active', 1);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Single Models or Collections in Eloquent\nDESCRIPTION: Illustrates various methods to retrieve single models or collections in Eloquent, including find(), first(), and firstWhere().\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/db/model.md#2025-04-12_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n$flight = app\\model\\Flight::find(1);\n\n$flight = app\\model\\Flight::where('active', 1)->first();\n\n$flight = app\\model\\Flight::firstWhere('active', 1);\n\n$flights = app\\model\\Flight::find([1, 2, 3]);\n\n$model = app\\model\\Flight::where('legs', '>', 100)->firstOr(function () {\n        // ...\n});\n\n$model = app\\modle\\Flight::where('legs', '>', 100)\n            ->firstOr(['id', 'legs'], function () {\n                // ...\n            });\n```\n\n----------------------------------------\n\nTITLE: Implementing WebSocket Listener in Webman\nDESCRIPTION: Custom WebSocket handler class implementing connection, message, and close event handlers.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/process.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app;\n\nuse Workerman\\Connection\\TcpConnection;\n\nclass Pusher\n{\n    public function onConnect(TcpConnection $connection)\n    {\n        echo \"onConnect\\n\";\n    }\n\n    public function onWebSocketConnect(TcpConnection $connection, $http_buffer)\n    {\n        echo \"onWebSocketConnect\\n\";\n    }\n\n    public function onMessage(TcpConnection $connection, $data)\n    {\n        $connection->send($data);\n    }\n\n    public function onClose(TcpConnection $connection)\n    {\n        echo \"onClose\\n\";\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ExceptionHandlerInterface in PHP for webman\nDESCRIPTION: Interface definition for custom exception handlers in webman-php. It includes methods for logging exceptions and rendering responses.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/de/exception.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\ninterface ExceptionHandlerInterface\n{\n    /**\n     * Log the event\n     * @param Throwable $e\n     * @return mixed\n     */\n    public function report(Throwable $e);\n\n    /**\n     * Render the response\n     * @param Request $request\n     * @param Throwable $e\n     * @return Response\n     */\n    public function render(Request $request, Throwable $e) : Response;\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Models by Primary Key in Eloquent ORM\nDESCRIPTION: Shows different ways to delete models by their primary keys using the destroy method. Multiple models can be deleted by passing individual IDs, an array of IDs, or a collection of IDs.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/db/model.md#2025-04-12_snippet_6\n\nLANGUAGE: php\nCODE:\n```\napp\\modle\\Flight::destroy(1);\n\napp\\modle\\Flight::destroy(1, 2, 3);\n\napp\\modle\\Flight::destroy([1, 2, 3]);\n\napp\\modle\\Flight::destroy(collect([1, 2, 3]));\n```\n\n----------------------------------------\n\nTITLE: Implementing Static File Middleware in Webman PHP\nDESCRIPTION: A middleware implementation for processing static file requests in Webman. It includes functionality to block access to hidden files and optionally add CORS headers to responses.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/static.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace support\\middleware;\n\nuse Webman\\MiddlewareInterface;\nuse Webman\\Http\\Response;\nuse Webman\\Http\\Request;\n\nclass StaticFile implements MiddlewareInterface\n{\n    public function process(Request $request, callable $next) : Response\n    {\n        // Prohibit access to hidden files starting with .\n        if (strpos($request->path(), '/.') !== false) {\n            return response('<h1>403 forbidden</h1>', 403);\n        }\n        /** @var Response $response */\n        $response = $next($request);\n        // Add cross-origin headers\n        /*$response->withHeaders([\n            'Access-Control-Allow-Origin'      => '*',\n            'Access-Control-Allow-Credentials' => 'true',\n        ]);*/\n        return $response;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Eloquent Model via Instance - PHP\nDESCRIPTION: Provides an example of deleting a Flight model instance using the delete method. Ensures that the correct instance is obtained using an appropriate query method before deletion.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/db/model.md#2025-04-12_snippet_20\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n$flight = app\\modle\\Flight::find(1);\n$flight->delete();\n```\n\n----------------------------------------\n\nTITLE: Creating a ThinkORM Model in PHP\nDESCRIPTION: Demonstrates how to create a custom model by extending think\\Model, with explicit table and primary key configuration\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/db/thinkorm.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\model;\n\nuse think\\Model;\n\nclass User extends Model\n{\n    /**\n     * The table associated with the model.\n     *\n     * @var string\n     */\n    protected $table = 'user';\n\n    /**\n     * The primary key associated with the table.\n     *\n     * @var string\n     */\n    protected $pk = 'id';\n}\n```\n\n----------------------------------------\n\nTITLE: Using Where Clauses With Webman DB Query Builder\nDESCRIPTION: This code demonstrates various ways to use `where()` clauses to filter query results.  It shows examples of comparing column values to a constant, using operators, and using arrays of conditions.  It also shows examples of `orWhere` clauses and closures.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/db/queries.md#2025-04-12_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')->where('votes', '=', 100)->get();\n\n// 当运算符为 等号 时可省略，所以此句表达式与上一个作用相同\n$users = Db::table('users')->where('votes', 100)->get();\n\n$users = Db::table('users')\n                ->where('votes', '>=', 100)\n                ->get();\n\n$users = Db::table('users')\n                ->where('votes', '<>', 100)\n                ->get();\n\n$users = Db::table('users')\n                ->where('name', 'like', 'T%')\n                ->get();\n```\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')->where([\n    ['status', '=', '1'],\n    ['subscribed', '<>', '1'],\n])->get();\n```\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')\n                    ->where('votes', '>', 100)\n                    ->orWhere('name', 'John')\n                    ->get();\n```\n\nLANGUAGE: php\nCODE:\n```\n// SQL: select * from users where votes > 100 or (name = 'Abigail' and votes > 50)\n$users = Db::table('users')\n            ->where('votes', '>', 100)\n            ->orWhere(function($query) {\n                $query->where('name', 'Abigail')\n                      ->where('votes', '>', 50);\n            })\n            ->get();\n```\n\n----------------------------------------\n\nTITLE: Using Simplified View Rendering (PHP)\nDESCRIPTION: This PHP code illustrates how to use the simplified `view()` function in Webman. It allows omitting the template path and specifying the data array directly. Webman automatically resolves the view path based on the controller and action names. It also allows specifying an absolute path.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/upgrade/1-6.md#2025-04-12_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\nuse support\\Request;\nclass UserController\n{\n    public function hello(Request $request)\n    {\n        // 等价于 return view('user/hello', ['name' => 'webman']);\n        // 等价于 return view('/app/view/user/hello', ['name' => 'webman']);\n        return view(['name' => 'webman']);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Using refresh() Method to Update Model with Database Values\nDESCRIPTION: Shows how the refresh() method overwrites the existing model with fresh data from the database in Eloquent.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/db/model.md#2025-04-12_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n$user = app\\model\\User::where('name', 'tom')->first();\n\n$user->name = 'jerry';\n\n$user = $user->fresh();\n\n$user->name; // \"tom\"\n```\n\n----------------------------------------\n\nTITLE: Using Joins With Webman DB Query Builder\nDESCRIPTION: This code demonstrates different types of JOIN clauses using Webman's query builder. The first example performs a regular JOIN between the 'users', 'contacts', and 'orders' tables.  The second and third examples show left and right joins.  The last example shows a cross join.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/db/queries.md#2025-04-12_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n// join\n$users = Db::table('users')\n            ->join('contacts', 'users.id', '=', 'contacts.user_id')\n            ->join('orders', 'users.id', '=', 'orders.user_id')\n            ->select('users.*', 'contacts.phone', 'orders.price')\n            ->get();\n\n// leftJoin            \n$users = Db::table('users')\n            ->leftJoin('posts', 'users.id', '=', 'posts.user_id')\n            ->get();\n\n// rightJoin\n$users = Db::table('users')\n            ->rightJoin('posts', 'users.id', '=', 'posts.user_id')\n            ->get();\n\n// crossJoin    \n$users = Db::table('sizes')\n            ->crossJoin('colors')\n            ->get();\n```\n\n----------------------------------------\n\nTITLE: Redis Configuration Setup\nDESCRIPTION: Configuration array for Redis connection settings including host, password, port, and database selection. Located in config/redis.php.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/db/cache.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'default' => [\n        'host'     => '127.0.0.1',\n        'password' => null,\n        'port'     => 6379,\n        'database' => 0,\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Specifying Database Connection for Eloquent Model\nDESCRIPTION: Shows how to specify a custom database connection for an Eloquent model.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/tr/db/model.md#2025-04-12_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\nclass User extends Model\n{\n    protected $connection = 'connection-name';\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Route Configuration Files in PHP\nDESCRIPTION: This snippet shows how to include external route configuration files for managing routes in multiple applications within a PHP framework. By using the require_once statement, it allows for modular route management, making it easier to maintain multiple applications with separate routing needs.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/route.md#2025-04-12_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n// Load the route configuration for the admin application\nrequire_once app_path('admin/config/route.php');\n// Load the route configuration for the api application\nrequire_once app_path('api/config/route.php');\n```\n\n----------------------------------------\n\nTITLE: Configure Mass Assignment with Guarded in Eloquent - PHP\nDESCRIPTION: Describes using the $guarded property to blacklist attributes from mass assignment, illustrating control over data input security for Eloquent models.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/db/model.md#2025-04-12_snippet_16\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nnamespace app\\model;\n\nuse support\\Model;\n\nclass Flight extends Model\n{\n    /**\n     * The attributes that aren't mass assignable.\n     *\n     * @var array\n     */\n    protected $guarded = ['price'];\n}\n```\n\n----------------------------------------\n\nTITLE: Making Non-blocking HTTP Requests\nDESCRIPTION: Example of making non-blocking HTTP requests using workerman/http-client.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/upgrade/1-5.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace app\\controller;\n\nuse support\\Request;\nuse Workerman\\Http\\Client;\n\nclass TestController\n{\n    public function index(Request $request)\n    {\n        static $client;\n        $client = $client ?: new Client();\n        $response = $client->get('http://example.com');\n        return $response->getBody()->getContents();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating or Inserting a Record - PHP\nDESCRIPTION: Attempts to update an existing record in the 'users' table or inserts a new one if no matching record is found. This functionality is useful for maintaining data integrity with minimal queries.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/pt/db/queries.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')\n    ->updateOrInsert(\n        ['email' => 'john@example.com', 'name' => 'John'],\n        ['votes' => '2']\n    );\n```\n\n----------------------------------------\n\nTITLE: Aggregationsfunktionen mit dem Query Builder in PHP\nDESCRIPTION: Diese Snippets zeigen verschiedene Aggregationsmethoden wie count, max, min, avg und sum.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/de/db/queries.md#2025-04-12_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')->count();\n$price = Db::table('orders')->max('price');\n$price = Db::table('orders')->where('finalized', 1)->avg('price');\n```\n\n----------------------------------------\n\nTITLE: File Upload Handling in Webman\nDESCRIPTION: Provides methods for retrieving and processing uploaded files, including validation and metadata extraction\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/request.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\npublic function files(Request $request)\n{\n    foreach ($request->file() as $key => $spl_file) {\n        $spl_file->isValid(); // Check file validity\n        $spl_file->getUploadExtension(); // Get file extension\n        $spl_file->getUploadMimeType(); // Get MIME type\n        // Additional file metadata methods\n    }\n    return response('ok');\n}\n```\n\n----------------------------------------\n\nTITLE: Redis Pipeline Commands\nDESCRIPTION: Example of using Redis pipeline for executing multiple commands in a single operation\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/pt/db/redis.md#2025-04-12_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nRedis::pipeline(function ($pipe) {\n    for ($i = 0; $i < 1000; $i++) {\n        $pipe->set(\"key:$i\", $i);\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Binding Class to Controller Parameters (PHP)\nDESCRIPTION: This PHP code shows how to bind a class (in this case, a model) to a controller parameter. Webman automatically resolves the dependency and injects an instance of the class into the controller method. This allows direct manipulation of model data within the controller.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/upgrade/1-6.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\nuse app\\model\\User;\nclass UserController\n{\n    public function create(User $user): int\n    {\n        $user->save();\n        return $user->id;\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Using $guarded for Mass Assignment Protection\nDESCRIPTION: Shows how to use the $guarded property as a blacklist approach to mass assignment protection, specifying which attributes should not be mass-assignable.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/tr/db/model.md#2025-04-12_snippet_26\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace app\\model;\n\nuse support\\Model;\n\nclass Flight extends Model\n{\n    /**\n     * Toplu atamaya izin verilmeyen özellikler.\n     *\n     * @var array\n     */\n    protected $guarded = ['price'];\n}\n```\n\n----------------------------------------\n\nTITLE: Using Database Connections in Webman Application Plugin with PHP\nDESCRIPTION: Shows how to use database connections defined in a Webman application plugin, including accessing the main project's database.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/tr/plugin/app.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse support\\Db;\nDb::connection('plugin.cms.mysql')->table('user')->first();\nDb::connection('plugin.cms.admin')->table('admin')->first();\n\n// Using main project's database\nDb::table('user')->first();\n// Assuming main project has an 'admin' connection configured\nDb::connection('admin')->table('admin')->first();\n```\n\n----------------------------------------\n\nTITLE: Allow All Attributes for Mass Assignment in Eloquent - PHP\nDESCRIPTION: Shows how to configure the $guarded property as an empty array to allow all attributes of a model for mass assignment, granting full flexibility when assigning data in Eloquent models.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/db/model.md#2025-04-12_snippet_17\n\nLANGUAGE: PHP\nCODE:\n```\n/**\n * The attributes that aren't mass assignable.\n *\n * @var array\n */\nprotected $guarded = [];\n```\n\n----------------------------------------\n\nTITLE: WhereBetween Clause with Webman PHP\nDESCRIPTION: This code snippet demonstrates how to use the `whereBetween()` clause in the Webman PHP framework's database query builder. It checks if the value of the 'votes' column falls within the range of 1 to 100.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/fr/db/queries.md#2025-04-12_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')\n           ->whereBetween('votes', [1, 100])\n           ->get();\n```\n\n----------------------------------------\n\nTITLE: Distinct Query with Webman PHP\nDESCRIPTION: This code snippet demonstrates how to retrieve distinct values from the 'user' table. It selects the 'nickname' column and uses the `distinct()` method to ensure that only unique values are returned.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/fr/db/queries.md#2025-04-12_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$email = Db::table('user')->select('nickname')->distinct()->get();\n```\n\n----------------------------------------\n\nTITLE: Using Raw Expressions in PHP Database Queries\nDESCRIPTION: This snippet demonstrates how to use raw SQL expressions in queries using methods like selectRaw() and Db::raw(). It also shows various other raw methods available.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/tr/db/queries.md#2025-04-12_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$orders = Db::table('orders')\n                ->selectRaw('price * ? as price_with_tax', [1.0825])\n                ->get();\n\n$orders = Db::table('orders')\n                ->select('department', Db::raw('SUM(price) as total_sales'))\n                ->groupBy('department')\n                ->havingRaw('SUM(price) > ?', [2500])\n                ->get();\n```\n\n----------------------------------------\n\nTITLE: Creating LoginController\nDESCRIPTION: This code creates a LoginController with methods for displaying a login form, generating a captcha image, and verifying the user's input. It uses the CaptchaBuilder class from the webman/captcha package to generate the captcha and stores the correct phrase in the session for verification.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/es/components/captcha.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\nuse Webman\\Captcha\\CaptchaBuilder;\n\nclass LoginController\n{\n    /**\n     * Página de prueba\n     */\n    public function index(Request $request)\n    {\n        return view('login/index');\n    }\n    \n    /**\n     * Generar imagen de verificación\n     */\n    public function captcha(Request $request)\n    {\n        // Inicializar la clase de verificación\n        $builder = new CaptchaBuilder;\n        // Generar el código de verificación\n        $builder->build();\n        // Almacenar el valor de la verificación en la sesión\n        $request->session()->set('captcha', strtolower($builder->getPhrase()));\n        // Obtener los datos binarios de la imagen de verificación\n        $img_content = $builder->get();\n        // Devolver los datos binarios de la imagen de verificación\n        return response($img_content, 200, ['Content-Type' => 'image/jpeg']);\n    }\n\n    /**\n     * Verificar la verificación\n     */\n    public function check(Request $request)\n    {\n        // Obtener el campo de verificación de la solicitud POST\n        $captcha = $request->post('captcha');\n        // Comparar el valor de verificación en la sesión\n        if (strtolower($captcha) !== $request->session()->get('captcha')) {\n            return json(['code' => 400, 'msg' => 'El código de verificación ingresado no es correcto']);\n        }\n        return json(['code' => 0, 'msg' => 'ok']);\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Permission Configuration\nDESCRIPTION: PHP configuration file defining permission settings including default permissions, logging, and enforcer configurations.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/casbin.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nreturn [\n    /*\n     * Default Permission\n     */\n    'default' => 'basic',\n\n    'log' => [\n        'enabled' => false,\n        'logger' => 'log',\n    ],\n\n    'enforcers' => [\n        'basic' => [\n            /*\n            * Model Setting\n            */\n            'model' => [\n                'config_type' => 'file',\n                'config_file_path' => config_path() . '/casbin-basic-model.conf',\n                'config_text' => '',\n            ],\n\n            // Adapter\n            'adapter' => webman\\permission\\adapter\\DatabaseAdapter::class,\n\n            /*\n            * Database Setting\n            */\n            'database' => [\n                // Database connection name, leave blank for default configuration.\n                'connection' => '',\n                // Policy table name (without table prefix)\n                'rules_name' => 'rule',\n                // Full name of the policy table.\n                'rules_table' => 'train_rule',\n            ],\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Abrufen aller Zeilen mit dem Query Builder in PHP\nDESCRIPTION: Dieses Snippet zeigt, wie man alle Zeilen aus einer Datenbanktabelle abruft und die Ergebnisse an eine View übergibt.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/de/db/queries.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\nuse support\\Db;\n\nclass UserController\n{\n    public function all(Request $request)\n    {\n        $users = Db::table('users')->get();\n        return view('user/all', ['benutzer' => $users]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Language Middleware\nDESCRIPTION: Implementation of a middleware to set the language for each request based on the user's session, ensuring language settings don't persist between requests.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/components/translation.md#2025-04-12_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\middleware;\n\nuse Webman\\MiddlewareInterface;\nuse Webman\\Http\\Response;\nuse Webman\\Http\\Request;\n\nclass Lang implements MiddlewareInterface\n{\n    public function process(Request $request, callable $handler) : Response\n    {\n        locale(session('lang', 'zh_CN'));\n        return $handler($request);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Middleware Structure Example in Webman\nDESCRIPTION: Illustrates the general structure of a middleware in Webman, showing how to access both the request and the response. The middleware's logic can be divided into three phases: request processing, controller processing, and response processing.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/es/middleware.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\middleware;\n\nuse Webman\\MiddlewareInterface;\nuse Webman\\Http\\Response;\nuse Webman\\Http\\Request;\n\nclass Test implements MiddlewareInterface\n{\n    public function process(Request $request, callable $handler) : Response\n    {\n        echo 'Esta es la fase de atravesar la solicitud, es decir, antes del procesamiento de la solicitud';\n        \n        $response = $handler($request); // Continuar a través de la cebolla, hasta que el controlador genere una respuesta\n        \n        echo 'Esta es la fase de atravesar la respuesta, es decir, después del procesamiento de la solicitud';\n        \n        return $response;\n    }\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Global Variable Pollution Prevention with Context\nDESCRIPTION: Demonstrates proper context management in coroutine environments, showing how to safely store and retrieve request-specific data using support\\Context to avoid global variable contamination\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/es/coroutine/fiber.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace app\\controller;\n\nuse support\\Request;\nuse support\\Context;\nuse Workerman\\Timer;\n\nclass TestController\n{\n    public function index(Request $request)\n    {\n        Context::set('name', $request->get('name'));\n        Timer::sleep(5);\n        return Context::get('name');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Controller Middleware using Annotations in Webman PHP\nDESCRIPTION: This code demonstrates how to apply middleware to controllers and methods using annotations in Webman PHP. `#[Middleware]` is used to specify middleware classes for both the controller and individual methods.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/middleware.md#2025-04-12_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n\"<?php\nnamespace app\\controller;\nuse app\\middleware\\Controller1Middleware;\nuse app\\middleware\\Controller2Middleware;\nuse app\\middleware\\Method1Middleware;\nuse app\\middleware\\Method2Middleware;\nuse support\\annotation\\Middleware;\nuse support\\Request;\n\n#[Middleware(Controller1Middleware::class, Controller2Middleware::class)]\nclass IndexController\n{\n    #[Middleware(Method1Middleware::class, Method2Middleware::class)]\n    public function index(Request $request): string\n    {\n        return 'hello';\n    }\n}\"\n```\n\n----------------------------------------\n\nTITLE: Implementing 404 Route Fallback Handler\nDESCRIPTION: PHP route configuration that handles 404 errors by returning either JSON for AJAX requests or an HTML template for page requests.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/others/custom-error-page.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse support\\Request;\nuse Webman\\Route;\n\nRoute::fallback(function(Request $request){\n    // Return JSON for AJAX requests\n    if ($request->expectsJson()) {\n        return json(['code' => 404, 'msg' => '404 not found']);\n    }\n    // Return the 404.html template for page requests\n    return view('404', ['error' => 'some error'])->withStatus(404);\n});\n```\n\n----------------------------------------\n\nTITLE: Nginx WSS Proxy Configuration\nDESCRIPTION: Nginx configuration for WSS proxy setup to enable secure WebSocket connections\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/plugin/push.md#2025-04-12_snippet_5\n\nLANGUAGE: nginx\nCODE:\n```\nserver {\n    # .... other configurations here ...\n\n    location /app/<app_key>\n    {\n        proxy_pass http://127.0.0.1:3131;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"Upgrade\";\n        proxy_set_header X-Real-IP $remote_addr;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom BusinessException Implementation in Webman PHP\nDESCRIPTION: Shows how to create a custom BusinessException that modifies the default response structure by changing the response field from 'msg' to 'message' when handling errors.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/fr/exception.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace app\\exception;\n\nuse support\\exception\\BusinessException;\nuse Webman\\Http\\Request;\nuse Webman\\Http\\Response;\n\nclass MyBusinessException extends BusinessException\n{\n    public function render(Request $request): ?Response\n    {\n        // Renvoi des données JSON pour les requêtes JSON\n        if ($request->expectsJson()) {\n            return json(['code' => $this->getCode() ?: 500, 'message' => $this->getMessage()]);\n        }\n        // Renvoi d'une page pour les requêtes non-JSON\n        return new Response(200, [], $this->getMessage());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Basic User Model with Eloquent in PHP\nDESCRIPTION: Defines a basic User model class extending the Model class with customized table name, primary key, and timestamp settings.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/db/model.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\model;\n\nuse support\\Model;\n\nclass User extends Model\n{\n    /**\n     * Имя таблицы, связанной с моделью\n     *\n     * @var string\n     */\n    protected $table = 'user';\n\n    /**\n     * Переопределение первичного ключа, по умолчанию это id\n     *\n     * @var string\n     */\n    protected $primaryKey = 'uid';\n\n    /**\n     * Указание на автоматическое обслуживание меток времени\n     *\n     * @var bool\n     */\n    public $timestamps = false;\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Single Column\nDESCRIPTION: Examples of retrieving a single column and using column values as array keys\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/db/queries.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$titles = Db::table('roles')->pluck('title');\n```\n\nLANGUAGE: php\nCODE:\n```\n$roles = Db::table('roles')->pluck('title', 'id');\n\nforeach ($roles as $id => $title) {\n    echo $title;\n}\n```\n\n----------------------------------------\n\nTITLE: Abrufen bestimmter Spalten mit dem Query Builder in PHP\nDESCRIPTION: Dieses Snippet demonstriert, wie man spezifische Spalten aus einer Datenbanktabelle auswählt und optional Aliase verwendet.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/de/db/queries.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('user')->select('name', 'email as user_email')->get();\n```\n\n----------------------------------------\n\nTITLE: Implementing WeChat Pay Gateway in PHP\nDESCRIPTION: Complete implementation of WeChat Pay integration including configuration, payment processing, and handling notification callbacks. Shows configuration for different application types (app, public account, mini-program).\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/components/pay.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Http\\Controllers;\n\nuse Yansongda\\Pay\\Pay;\nuse Yansongda\\Pay\\Log;\n\nclass PayController\n{\n    protected $config = [\n        'appid' => 'wxb3fxxxxxxxxxxx', // APP APPID\n        'app_id' => 'wxb3fxxxxxxxxxxx', // APPID общедоступного профиля\n        'miniapp_id' => 'wxb3fxxxxxxxxxxx', // APPID мини-программы\n        'mch_id' => '14577xxxx',\n        'key' => 'mF2suE9sU6Mk1Cxxxxxxxxxxx',\n        'notify_url' => 'http://yanda.net.cn/notify.php',\n        'cert_client' => './cert/apiclient_cert.pem', // Необязательно, используется при возврате и других случаях\n        'cert_key' => './cert/apiclient_key.pem', // Необязательно, используется при возврате и других случаях\n        'log' => [ // Необязательно\n            'file' => './logs/wechat.log',\n            'level' => 'info', // Рекомендуется изменить уровень на info для производства, на debug для разработки\n            'type' => 'single', // Необязательно, можно использовать ежедневно\n            'max_file' => 30, // Необязательно, действительно для типа daily, по умолчанию 30 дней\n        ],\n        'http' => [ // Необязательно\n            'timeout' => 5.0,\n            'connect_timeout' => 5.0,\n            // Дополнительные параметры конфигурации см [Guzzle](https://guzzle-cn.readthedocs.io/zh_CN/latest/request-options.html)\n        ],\n        'mode' => 'dev', // Необязательно, установите этот параметр, чтобы войти в режим песочницы\n    ];\n\n    public function index()\n    {\n        $order = [\n            'out_trade_no' => time(),\n            'total_fee' => '1', // **единица измерения: фенг**\n            'body' => 'test body - тест',\n            'openid' => 'onkVf1FjWS5SBIixxxxxxx',\n        ];\n\n        $pay = Pay::wechat($this->config)->mp($order);\n\n        // $pay->appId\n        // $pay->timeStamp\n        // $pay->nonceStr\n        // $pay->package\n        // $pay->signType\n    }\n\n    public function notify()\n    {\n        $pay = Pay::wechat($this->config);\n\n        try{\n            $data = $pay->verify(); // Да, проверка подписи так проста!\n\n            Log::debug('Уведомление Wechat', $data->all());\n        } catch (\\Exception $e) {\n            // $e->getMessage();\n        }\n        \n        return $pay->success()->send(); // В фреймворке Laravel просто верните `return $pay->success()`\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing MongoDB Package for Webman PHP\nDESCRIPTION: Command to install MongoDB package and its Laravel integration using Composer\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/db/mongo.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ncomposer require -W webman/database mongodb/laravel-mongodb ^4.8\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Controller in Webman PHP\nDESCRIPTION: This snippet demonstrates how to create a basic controller file with two methods: index and hello. It shows the namespace structure and how to handle requests using the Request object.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/jp/controller.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\n\nclass FooController\n{\n    public function index(Request $request)\n    {\n        return response('hello index');\n    }\n    \n    public function hello(Request $request)\n    {\n        return response('hello webman');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Validation Class with top-think/think-validate in PHP\nDESCRIPTION: Creates a User validation class that defines rules and custom error messages for validating name, age, and email fields. This class extends the think\\Validate base class.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-hk/components/validation.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\index\\validate;\n\nuse think\\Validate;\n\nclass User extends Validate\n{\n    protected $rule =   [\n        'name'  => 'require|max:25',\n        'age'   => 'number|between:1,120',\n        'email' => 'email',    \n    ];\n\n    protected $message  =   [\n        'name.require' => '名稱必須',\n        'name.max'     => '名稱最多不能超過25個字符',\n        'age.number'   => '年齡必須是數字',\n        'age.between'  => '年齡只能在1-120之間',\n        'email'        => '郵箱格式錯誤',    \n    ];\n\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Alipay Payment Gateway in PHP\nDESCRIPTION: Example PHP class demonstrating Alipay integration using Yansongda Pay SDK. Includes configuration, payment processing, and notification handling.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/jp/components/pay.md#2025-04-12_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nnamespace App\\Http\\Controllers;\n\nuse Yansongda\\Pay\\Pay;\nuse Yansongda\\Pay\\Log;\n\nclass PayController\n{\n    protected $config = [\n        'app_id' => '2016082000295641',\n        'notify_url' => 'http://yansongda.cn/notify.php',\n        'return_url' => 'http://yansongda.cn/return.php',\n        'ali_public_key' => 'MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAuWJKrQ6SWvS6niI+4vEVZiYfjkCfLQfoFI2nCp9ZLDS42QtiL4Ccyx8scgc3nhVwmVRte8f57TFvGhvJD0upT4O5O/lRxmTjechXAorirVdAODpOu0mFfQV9y/T9o9hHnU+VmO5spoVb3umqpq6D/Pt8p25Yk852/w01VTIczrXC4QlrbOEe3sr1E9auoC7rgYjjCO6lZUIDjX/oBmNXZxhRDrYx4Yf5X7y8FRBFvygIE2FgxV4Yw+SL3QAa2m5MLcbusJpxOml9YVQfP8iSurx41PvvXUMo49JG3BDVernaCYXQCoUJv9fJwbnfZd7J5YByC+5KM4sblJTq7bXZWQIDAQAB',\n        // 暗号化方式： **RSA2**  \n        'private_key' => 'MIIEpAIBAAKCAQEAs6+F2leOgOrvj9jTeDhb5q46GewOjqLBlGSs/bVL4Z3fMr3p+Q1Tux/6uogeVi/eHd84xvQdfpZ87A1SfoWnEGH5z15yorccxSOwWUI+q8gz51IWqjgZxhWKe31BxNZ+prnQpyeMBtE25fXp5nQZ/pftgePyUUvUZRcAUisswntobDQKbwx28VCXw5XB2A+lvYEvxmMv/QexYjwKK4M54j435TuC3UctZbnuynSPpOmCu45ZhEYXd4YMsGMdZE5/077ZU1aU7wx/gk07PiHImEOCDkzqsFo0Buc/knGcdOiUDvm2hn2y1XvwjyFOThsqCsQYi4JmwZdRa8kvOf57nwIDAQABAoIBAQCw5QCqln4VTrTvcW+msB1ReX57nJgsNfDLbV2dG8mLYQemBa9833DqDK6iynTLNq69y88ylose33o2TVtEccGp8Dqluv6yUAED14G6LexS43KtrXPgugAtsXE253ZDGUNwUggnN1i0MW2RcMqHdQ9ORDWvJUCeZj/AEafgPN8AyiLrZeL07jJz/uaRfAuNqkImCVIarKUX3HBCjl9TpuoMjcMhz/MsOmQ0agtCatO1eoH1sqv5Odvxb1i59c8Hvq/mGEXyRuoiDo05SE6IyXYXr84/Nf2xvVNHNQA6kTckj8shSi+HGM4mO1Y4Pbb7XcnxNkT0Inn6oJMSiy56P+CpAoGBAO1O+5FE1ZuVGuLb48cY+0lHCD+nhSBd66B5FrxgPYCkFOQWR7pWyfNDBlmO3SSooQ8TQXA25blrkDxzOAEGX57EPiipXr/hy5e+WNoukpy09rsO1TMsvC+v0FXLvZ+TIAkqfnYBgaT56ku7yZ8aFGMwdCPL7WJYAwUIcZX8wZ3dAoGBAMHWplAqhe4bfkGOEEpfs6VvEQxCqYMYVyR65K0rI1LiDZn6Ij8fdVtwMjGKFSZZTspmsqnbbuCE/VTyDzF4NpAxdm3cBtZACv1Lpu2Om+aTzhK2PI6WTDVTKAJBYegXaahBCqVbSxieR62IWtmOMjggTtAKWZ1P5LQcRwdkaB2rAoGAWnAPT318Kp7YcDx8whOzMGnxqtCc24jvk2iSUZgb2Dqv+3zCOTF6JUsV0Guxu5bISoZ8GdfSFKf5gBAo97sGFeuUBMsHYPkcLehM1FmLZk1Q+ljcx3P1A/ds3kWXLolTXCrlpvNMBSN5NwOKAyhdPK/qkvnUrfX8sJ5XK2H4J8ECgYAGIZ0HIiE0Y+g9eJnpUFelXvsCEUW9YNK4065SD/BBGedmPHRC3OLgbo8X5A9BNEf6vP7fwpIiRfKhcjqqzOuk6fueA/yvYD04v+Da2MzzoS8+hkcqF3T3pta4I4tORRdRfCUzD80zTSZlRc/h286Y2eTETd+By1onnFFe2X01mwKBgQDaxo4PBcLL2OyVT5DoXiIdTCJ8KNZL9+kV1aiBuOWxnRgkDjPngslzNa1bK+klGgJNYDbQqohKNn1HeFX3mYNfCUpuSnD2Yag53Dd/1DLO+NxzwvTu4D6DCUnMMMBVaF42ig31Bs0jI3JQZVqeeFzSET8fkoFopJf3G6UXlrIEAQ==',\n        'log' => [ // オプション\n            'file' => './logs/alipay.log',\n            'level' => 'info', // 本番環境ではレベルを info に変更することをお勧めします。開発環境ではデバッグにします\n            'type' => 'single', // optional, dailyを選択できます\n            'max_file' => 30, // optional, dailyの場合有効、デフォルトは30日です\n        ],\n        'http' => [ // オプション\n            'timeout' => 5.0,\n            'connect_timeout' => 5.0,\n            // 他の設定項目については [Guzzle](https://guzzle-cn.readthedocs.io/zh_CN/latest/request-options.html) を参照してください\n        ],\n        'mode' => 'dev', // オプション、このパラメータを設定すると、サンドボックスモードに入ります\n    ];\n\n    public function index()\n    {\n        $order = [\n            'out_trade_no' => time(),\n            'total_amount' => '1',\n            'subject' => 'test subject - テスト',\n        ];\n\n        $alipay = Pay::alipay($this->config)->web($order);\n\n        return $alipay->send();// laravel フレームワークでは、`return $alipay`を直接使用してください\n    }\n\n    public function return()\n    {\n        $data = Pay::alipay($this->config)->verify(); // はい、これほど簡単に検証します！\n\n        // 注文番号：$data->out_trade_no\n        // アリペイ取引番号：$data->trade_no\n        // 注文総額：$data->total_amount\n    }\n\n    public function notify()\n    {\n        $alipay = Pay::alipay($this->config);\n    \n        try{\n            $data = $alipay->verify(); // はい、これほど簡単に検証します！\n\n            // 商人は通知データのout_trade_noが商人システムで作成した注文番号かどうかを確認する必要があります。\n            // total_amountは、その注文の実際の金額であるかどうかを判断する必要があります（つまり、商人注文作成時の金額）。\n            // 通知のseller_id（またはseller_email)がout_trade_noこの伝票の対応する運用者であることを確認してください（商人には複数のseller_id/seller_emailがある場合があります）。\n            // app_idが商人自身であることを確認してください。\n            // 他の業務ロジックの状況\n            Log::debug('Alipay notify', $data->all());\n        } catch (\\Exception $e) {\n            // $e->getMessage();\n        }\n\n        return $alipay->success()->send();// laravel フレームワークでは、`return $alipay->success()`を直接使用してください\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Cache API Operations\nDESCRIPTION: Comprehensive example showing various cache operations including setting/getting values, checking existence, clearing cache, and working with numeric operations and cache tags.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/db/thinkcache.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// 设置缓存\nCache::set('val','value',600);\n// 判断缓存是否设置\nCache::has('val');\n// 获取缓存\nCache::get('val');\n// 删除缓存\nCache::delete('val');\n// 清除缓存\nCache::clear();\n// 读取并删除缓存\nCache::pull('val');\n// 不存在则写入\nCache::remember('val',10);\n\n// 对于数值类型的缓存数据可以使用\n// 缓存增+1\nCache::inc('val');\n// 缓存增+5\nCache::inc('val',5);\n// 缓存减1\nCache::dec('val');\n// 缓存减5\nCache::dec('val',5);\n\n// 使用缓存标签\nCache::tag('tag_name')->set('val','value',600);\n// 删除某个标签下的缓存数据\nCache::tag('tag_name')->clear();\n// 支持指定多个标签\nCache::tag(['tag1','tag2'])->set('val2','value',600);\n// 删除多个标签下的缓存数据\nCache::tag(['tag1','tag2'])->clear();\n\n// 使用多种缓存类型\n$redis = Cache::store('redis');\n\n$redis->set('var','value',600);\n$redis->get('var');\n```\n\n----------------------------------------\n\nTITLE: Authentication Middleware Example in Webman\nDESCRIPTION: This example demonstrates an authentication middleware that checks if a user is logged in. If the user is logged in, the request continues; otherwise, it redirects the user to the login page, unless the requested action is whitelisted in the `$noNeedLogin` property of the controller.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/es/middleware.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\middleware;\n\nuse ReflectionClass;\nuse Webman\\MiddlewareInterface;\nuse Webman\\Http\\Response;\nuse Webman\\Http\\Request;\n\nclass AuthCheckTest implements MiddlewareInterface\n{\n    public function process(Request $request, callable $handler) : Response\n    {\n        if (session('user')) {\n            // Ya ha iniciado sesión, el pedido continúa atravesando las capas de la cebolla\n            return $handler($request);\n        }\n\n        // Obtener mediante reflexión los métodos del controlador que no requieren inicio de sesión\n        $controller = new ReflectionClass($request->controller);\n        $noNeedLogin = $controller->getDefaultProperties()['noNeedLogin'] ?? [];\n\n        // El método solicitado requiere inicio de sesión\n        if (!in_array($request->action, $noNeedLogin)) {\n            // Intercepta la solicitud, devuelve una respuesta de redirección y detiene la penetración a través de las capas de la cebolla\n            return redirect('/user/login');\n        }\n\n        // No se requiere inicio de sesión, la solicitud continúa atravesando las capas de la cebolla\n        return $handler($request);\n    }\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Creating Custom HTTP Server Class in Webman\nDESCRIPTION: Extends Webman's App class to create a custom HTTP server implementation for special requirements.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/process.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace app;\n\nuse Webman\\App;\n\nclass Server extends App\n{\n    // Override methods from Webman\\App here\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Exception Handler in Webman PHP\nDESCRIPTION: This code snippet demonstrates how to implement a custom exception handler in Webman PHP. It handles both AJAX and page requests, returning JSON or rendering a 500 view respectively.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/de/others/custom-error-page.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace app\\exception;\n\nuse Throwable;\nuse Webman\\Http\\Request;\nuse Webman\\Http\\Response;\n\nclass Handler extends \\support\\exception\\Handler\n{\n    /**\n     * Rendern und zurückgeben \n     * @param Request $request\n     * @param Throwable $exception\n     * @return Response\n     */\n    public function render(Request $request, Throwable $exception) : Response\n    {\n        $code = $exception->getCode();\n        // Rückgabe von JSON bei ajax-Anfragen\n        if ($request->expectsJson()) {\n            return json(['code' => $code ? $code : 500, 'msg' => $exception->getMessage()]);\n        }\n        // Seitenanfrage gibt das 500.html-Template zurück\n        return view('500', ['exception' => $exception], '')->withStatus(500);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Shared Locks in Database Queries in PHP\nDESCRIPTION: Shows how to implement a shared lock (pessimistic locking) on a select query, which prevents the selected rows from being modified until the transaction completes.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/tr/db/queries.md#2025-04-12_snippet_23\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')->where('votes', '>', 100)->sharedLock()->get();\n```\n\n----------------------------------------\n\nTITLE: Avoiding Global Variable Contamination in PHP Coroutines\nDESCRIPTION: This example demonstrates how to avoid global variable contamination in coroutine environments by using context storage for request-specific data instead of static variables.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/tr/coroutine/fiber.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace app\\controller;\n\nuse support\\Request;\nuse support\\Context;\nuse Workerman\\Timer;\n\nclass TestController\n{\n    public function index(Request $request)\n    {\n        Context::set('name', $request->get('name'));\n        Timer::sleep(5);\n        return Context::get('name');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting All Rows Using Webman DB Query Builder\nDESCRIPTION: This code snippet demonstrates how to retrieve all rows from the 'users' table using Webman's DB query builder. It fetches the data and passes it to a view for rendering. The `support\\Request` and `support\\Db` classes are used for handling requests and database queries, respectively.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/db/queries.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\nuse support\\Db;\n\nclass UserController\n{\n    public function all(Request $request)\n    {\n        $users = Db::table('users')->get();\n        return view('user/all', ['users' => $users]);\n    }\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Using firstOr Method with Callback in Eloquent\nDESCRIPTION: Shows how to use the firstOr method to retrieve a model or execute a callback if no model is found.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/db/model.md#2025-04-12_snippet_21\n\nLANGUAGE: php\nCODE:\n```\n$model = app\\model\\Flight::where('legs', '>', 100)->firstOr(function () {\n        // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Route Parameters Example in PHP Webman\nDESCRIPTION: Demonstration of route parameter handling with controller implementation\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/route.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nnamespace app\\controller;\nclass UserController\n{\n    public function get($request, $id)\n    {\n        return response('Received parameter'.$id);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Annotation Injection in a Controller\nDESCRIPTION: This PHP class shows how to use annotation injection to inject a Mailer service into a UserController, which is an alternative to constructor injection.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/tr/di.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\nuse app\\service\\Mailer;\nuse DI\\Annotation\\Inject;\n\nclass UserController\n{\n    /**\n     * @Inject\n     * @var Mailer\n     */\n    private $mailer;\n\n    public function register(Request $request)\n    {\n        $this->mailer->mail('hello@webman.com', 'Merhaba ve hoş geldiniz!');\n        return response('ok');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Placeholders in PHP Translations\nDESCRIPTION: Example of using placeholders in translation strings and passing data to them.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/components/translation.md#2025-04-12_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nreturn [\n    'hello' => 'Hello %name%!',\n];\n\n// Usage\ntrans('hello', ['%name%' => 'webman']); // Hello webman!\n```\n\n----------------------------------------\n\nTITLE: Model State Tracking\nDESCRIPTION: Examples of tracking model changes using isDirty, isClean, and wasChanged methods.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/db/model.md#2025-04-12_snippet_22\n\nLANGUAGE: php\nCODE:\n```\n$user = User::create([\n    'first_name' => 'Taylor',\n    'last_name' => 'Otwell',\n    'title' => 'Developer',\n]);\n\n$user->title = 'Painter';\n\n$user->isDirty(); // true\n$user->isDirty('title'); // true\n$user->isDirty('first_name'); // false\n\n$user->isClean(); // false\n$user->isClean('title'); // false\n$user->isClean('first_name'); // true\n\n$user->save();\n\n$user->isDirty(); // false\n$user->isClean(); // true\n```\n\n----------------------------------------\n\nTITLE: Model Data Querying Examples\nDESCRIPTION: Shows various methods to query data using Eloquent models including basic retrieval, cursors, and subqueries.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/db/model.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$users = app\\model\\User::where('name', 'like', '%tom')\n               ->orderBy('uid', 'desc')\n               ->limit(10)\n               ->get();\n```\n\n----------------------------------------\n\nTITLE: Basic Cache Operations in Controller\nDESCRIPTION: Example of basic cache operations in a Webman controller class. Shows how to set and get cache values using the Cache facade.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/db/thinkcache.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n    \nuse support\\Request;\nuse support\\think\\Cache;\n  \nclass UserController\n{\n    public function db(Request $request)\n    {\n        $key = 'test_key';\n        Cache::set($key, rand());\n        return response(Cache::get($key));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Auto-Incrementing ID After Insert in PHP\nDESCRIPTION: Demonstrates how to insert a record into a database table and retrieve the auto-incrementing ID. When using PostgreSQL, the second parameter can be used to specify a different sequence name.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/tr/db/queries.md#2025-04-12_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n$id = Db::table('kullanıcılar')->insertGetId(\n    ['email' => 'john@example.com', 'oylar' => 0]\n);\n```\n\n----------------------------------------\n\nTITLE: Refreshing Eloquent Model Instance\nDESCRIPTION: Illustrates how to refresh an Eloquent model instance with fresh data from the database using the fresh() and refresh() methods.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/db/model.md#2025-04-12_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n$user = app\\model\\User::where('name', 'tom')->first();\n\n$fresh_user = $user->fresh();\n\n$user->name = 'jerry';\n$user = $user->fresh();\n$user->name; // \"tom\"\n```\n\n----------------------------------------\n\nTITLE: Accessing Middleware Parameters in Controller in PHP\nDESCRIPTION: This code demonstrates how a controller can access data passed from middleware by accessing properties of the `$request` object.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/middleware.md#2025-04-12_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\n\nclass FooController\n{\n    public function index(Request $request)\n    {\n        return response($request->data);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Permission Service in webman\nDESCRIPTION: This configuration snippet registers the `webman\\permission\\Permission` class as a service in the webman application's bootstrap. This ensures that the permission service is initialized when the application starts.  It is typically located in the `config/bootstrap.php` file.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/casbin.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n // ...\n    webman\\permission\\Permission::class,\n```\n\n----------------------------------------\n\nTITLE: Implementing Model Observers in Eloquent ORM\nDESCRIPTION: Shows how to set up model observers in Webman using the boot method. Model observers allow listening to various model events. Note that using Eloquent ORM model observers requires the illuminate/events package.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/db/model.md#2025-04-12_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\model;\n\nuse support\\Model;\nuse app\\observer\\UserObserver;\n\nclass User extends Model\n{\n    public static function boot()\n    {\n        parent::boot();\n        static::observe(UserObserver::class);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Webman Monitor Process in PHP\nDESCRIPTION: Configuration setup for the Webman monitor process in config/process.php. It specifies which directories and file types to watch, and enables file change monitoring and memory usage monitoring based on environment conditions.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/fr/others/monitor.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nglobal $argv;\n\nreturn [\n    'monitor' => [\n        'handler' => process\\Monitor::class,\n        'reloadable' => false,\n        'constructor' => [\n            'monitorDir' => array_merge([\n                app_path(),\n                config_path(),\n                base_path() . '/process',\n                base_path() . '/support',\n                base_path() . '/resource',\n                base_path() . '/.env',\n            ], glob(base_path() . '/plugin/*/app'), glob(base_path() . '/plugin/*/config'), glob(base_path() . '/plugin/*/api')),\n            'monitorExtensions' => [\n                'php', 'html', 'htm', 'env'\n            ],\n            'options' => [\n                'enable_file_monitor' => !in_array('-d', $argv) && DIRECTORY_SEPARATOR === '/',\n                'enable_memory_monitor' => DIRECTORY_SEPARATOR === '/',\n            ]\n        ]\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Where Exists Clause in WebMan PHP Query Builder\nDESCRIPTION: Shows how to use WHERE EXISTS in queries for subquery conditions.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/jp/db/queries.md#2025-04-12_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n// select * from users where exists ( select 1 from orders where orders.user_id = users.id )\n$users = Db::table('users')\n           ->whereExists(function ($query) {\n               $query->select(Db::raw(1))\n                     ->from('orders')\n                     ->whereRaw('orders.user_id = users.id');\n           })\n           ->get();\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom 404 Route Handler in Webman PHP\nDESCRIPTION: This PHP code sets up a fallback route to handle 404 errors. It returns JSON for AJAX requests and renders a custom view for page requests.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/others/custom-error-page.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse support\\Request;\nuse Webman\\Route;\n\nRoute::fallback(function(Request $request){\n    // ajax請求時返回json\n    if ($request->expectsJson()) {\n        return json(['code' => 404, 'msg' => '404 not found']);\n    }\n    // 頁面請求返回404.html模板\n    return view('404', ['error' => 'some error'])->withStatus(404);\n});\n```\n\n----------------------------------------\n\nTITLE: Singleton Usage Example Leading to Memory Leak\nDESCRIPTION: Demonstrates how the singleton Cache class is used in a way that causes memory leaks through continuous data addition.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/others/memory-leak.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nclass Foo\n{\n    public function index(Request $request)\n    {\n        Cache::instance()->set(time(), time());\n        return response('hello');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring WebSocket Process in Webman\nDESCRIPTION: Process configuration for WebSocket listener including handler class and connection settings.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/process.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    // ... Other process configurations are omitted ...\n\n    // websocket_test is the process name\n    'websocket_test' => [\n        // Specify the process class as the one defined above\n        'handler' => app\\Pusher::class,\n        'listen'  => 'websocket://0.0.0.0:8888',\n        'count'   => 1,\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Implementing Non-Listening Process Class in PHP for Webman\nDESCRIPTION: This code defines a non-listening process class named TaskTest with an onWorkerStart method that sets up a periodic database check using a timer.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/process.md#2025-04-12_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nnamespace app;\n\nuse Workerman\\Timer;\nuse support\\Db;\n\nclass TaskTest\n{\n  \n    public function onWorkerStart()\n    {\n        // 每隔10秒檢查一次數據庫是否有新使用者註冊\n        Timer::add(10, function(){\n            Db::table('users')->where('regist_timestamp', '>', time()-10)->get();\n        });\n    }\n    \n}\n```\n\n----------------------------------------\n\nTITLE: Basic Model Definition in Webman-PHP\nDESCRIPTION: Demonstrates how to create a basic User model with custom table name, primary key and timestamp configuration.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/db/model.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\model;\n\nuse support\\Model;\n\nclass User extends Model\n{\n    /**\n     * 与模型关联的表名\n     *\n     * @var string\n     */\n    protected $table = 'user';\n\n    /**\n     * 重定义主键，默认是id\n     *\n     * @var string\n     */\n    protected $primaryKey = 'uid';\n\n    /**\n     * 指示是否自动维护时间戳\n     *\n     * @var bool\n     */\n    public $timestamps = false;\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Asynchronous HTTP Requests in PHP\nDESCRIPTION: Shows how to use workerman/http-client to send non-blocking HTTP requests in a Webman controller. This improves application performance by allowing asynchronous requests.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/coroutine/fiber.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace app\\controller;\n\nuse support\\Request;\nuse Workerman\\Http\\Client;\n\nclass TestController\n{\n    public function index(Request $request)\n    {\n        static $client;\n        $client = $client ?: new Client();\n        $response = $client->get('http://example.com'); // Asynchronous request made using a synchronous method\n        return $response->getBody()->getContents();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Context in a Webman Controller\nDESCRIPTION: Demonstrates how to use Context in a Webman controller to set and get request-specific data.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/jp/coroutine/context.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace app\\controller;\n\nuse support\\Request;\nuse support\\Context;\n\nclass TestController\n{\n    public function index(Request $request)\n    {\n        Context::set('name', $request->get('name'));\n        return Context::get('name');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Framework-specific File Autoloading Configuration\nDESCRIPTION: Configuration in config/autoload.php for loading non-PSR compliant files and custom implementations. This method supports hot reloading and allows overriding vendor files with custom implementations.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/others/autoload.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'files' => [\n        base_path() . '/app/functions.php',\n        base_path() . '/support/Request.php', \n        base_path() . '/support/Response.php',\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Using Database in Webman PHP Controller\nDESCRIPTION: This example demonstrates how to use the database in a Webman controller. It shows querying a user's name from the database based on a UID provided in the request or a default value.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/jp/db/tutorial.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\nuse support\\Db;\n\nclass UserController\n{\n    public function db(Request $request)\n    {\n        $default_uid = 29;\n        $uid = $request->get('uid', $default_uid);\n        $name = Db::table('users')->where('uid', $uid)->value('username');\n        return response(\"hello $name\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enforcing Permissions\nDESCRIPTION: This code snippet demonstrates how to enforce permissions using the `Permission::enforce()` method. It checks if a user has the required permission to perform an action on a resource, and executes code based on the result.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/casbin.md#2025-04-12_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n\"if (Permission::enforce(\\\"eve\\\", \\\"articles\\\", \\\"edit\\\")) {\n    // разрешить eve редактировать статьи\n} else {\n    // отклонить запрос, показать ошибку\n}\"\n```\n\n----------------------------------------\n\nTITLE: Using Exists Subqueries in webman-php\nDESCRIPTION: Using whereExists to filter based on the existence of related records. This example finds users who have associated orders using a subquery.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/db/queries.md#2025-04-12_snippet_27\n\nLANGUAGE: php\nCODE:\n```\n// select * from users where exists ( select 1 from orders where orders.user_id = users.id )\n$users = Db::table('users')\n           ->whereExists(function ($query) {\n               $query->select(Db::raw(1))\n                     ->from('orders')\n                     ->whereRaw('orders.user_id = users.id');\n           })\n           ->get();\n```\n\n----------------------------------------\n\nTITLE: Filtering Results with Lazy Collections in Eloquent\nDESCRIPTION: Demonstrates how to use lazy collections to filter and process large datasets in Eloquent with minimal memory usage.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/db/model.md#2025-04-12_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n$users = app\\model\\User::cursor()->filter(function ($user) {\n    return $user->id > 500;\n});\n\nforeach ($users as $user) {\n    echo $user->id;\n}\n```\n\n----------------------------------------\n\nTITLE: PHP Server-Side Data Transmission API\nDESCRIPTION: Server-side method for triggering events and sending messages to specific channels using the webman/push API\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/plugin/push.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Webman\\Push\\Api;\n$api = new Api(\n    'http://127.0.0.1:3232',\n    config('plugin.webman.push.app.app_key'),\n    config('plugin.webman.push.app.app_secret')\n);\n$api->trigger('user-1', 'message', [\n    'from_uid' => 2,\n    'content'  => 'Привет, это содержание сообщения'\n]);\n```\n\n----------------------------------------\n\nTITLE: Implementing Event Handler Class in PHP\nDESCRIPTION: Example of an event handler class implementing methods for processing user registration and logout events.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/de/components/event.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\event;\nclass User\n{\n    function register($user)\n    {\n        var_export($user);\n    }\n \n    function logout($user)\n    {\n        var_export($user);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Cache in webman-php Controller\nDESCRIPTION: Example of using Cache in a webman-php controller. Demonstrates setting and getting a cache value using a random number.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/db/cache.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\nuse support\\Cache;\n\nclass UserController\n{\n    public function db(Request $request)\n    {\n        $key = 'test_key';\n        Cache::set($key, rand());\n        return response(Cache::get($key));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Pipeline Commands in Webman\nDESCRIPTION: This PHP code demonstrates how to use pipeline commands in Webman for sending multiple commands to the Redis server in a single operation.  This improves performance by reducing network round trips. A closure is passed to the pipeline method where the commands are executed.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/db/redis.md#2025-04-12_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nRedis::pipeline(function ($pipe) {\n    for ($i = 0; $i < 1000; $i++) {\n        $pipe->set(\"key:$i\", $i);\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Querying Models with Exception Handling in PHP\nDESCRIPTION: Demonstrates how to query models using findOrFail and firstOrFail methods which throw exceptions when records are not found.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/db/model.md#2025-04-12_snippet_17\n\nLANGUAGE: php\nCODE:\n```\napp\\modle\\Flight::findOrFail(1);\napp\\modle\\Flight::where('legs', '>', 100)->firstOrFail();\n```\n\n----------------------------------------\n\nTITLE: Checking Existence With Webman DB Query Builder\nDESCRIPTION: This snippet demonstrates checking the existence of records in the 'orders' table using the `exists()` and `doesntExist()` methods.  `exists()` returns true if at least one record matches the criteria. `doesntExist()` returns true if no records match the criteria.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/db/queries.md#2025-04-12_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nreturn Db::table('orders')->where('finalized', 1)->exists();\nreturn Db::table('orders')->where('finalized', 1)->doesntExist();\n```\n\n----------------------------------------\n\nTITLE: Using Database Queries in Webman PHP Controller\nDESCRIPTION: This example demonstrates how to use database queries in a Webman PHP controller. It retrieves a username from the 'users' table based on a user ID provided in the request or a default value.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/tr/db/tutorial.md#2025-04-12_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\nuse support\\Db;\n\nclass UserController\n{\n    public function db(Request $request)\n    {\n        $default_uid = 29;\n        $uid = $request->get('uid', $default_uid);\n        $name = Db::table('users')->where('uid', $uid)->value('username');\n        return response(\"merhaba $name\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Exception Handler\nDESCRIPTION: PHP exception handler class that processes errors and returns appropriate responses based on request type.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/others/custom-error-page.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace app\\exception;\n\nuse Throwable;\nuse Webman\\Http\\Request;\nuse Webman\\Http\\Response;\n\nclass Handler extends \\support\\exception\\Handler\n{\n    /**\n     * Render the response\n     * @param Request $request\n     * @param Throwable $exception\n     * @return Response\n     */\n    public function render(Request $request, Throwable $exception) : Response\n    {\n        $code = $exception->getCode();\n        // Return JSON data for AJAX requests\n        if ($request->expectsJson()) {\n            return json(['code' => $code ? $code : 500, 'msg' => $exception->getMessage()]);\n        }\n        // Return the 500.html template for page requests\n        return view('500', ['exception' => $exception], '')->withStatus(500);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Parameter Binding in UserController\nDESCRIPTION: Example of automatic parameter binding in controller methods with type hints.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/controller.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\nuse support\\Response;\n\nclass UserController\n{\n    public function create(string $name, int $age): Response\n    {\n        return json(['name' => $name, 'age' => $age]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling 404/405 errors with fallback route and status parameter in Webman\nDESCRIPTION: This code snippet demonstrates how to handle 404 and 405 errors using a fallback route in Webman, leveraging the status parameter introduced in webman-framework 1.5.23.  It returns different responses based on whether the error is a \"not found\" (404) or \"method not allowed\" (405) error.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/others/custom-error-page.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse support\\Request;\nuse Webman\\Route;\n\nRoute::fallback(function(Request $request, $status) {\n    $map = [\n        404 => '404 not found',\n        405 => '405 method not allowed',\n    ];\n    return response($map[$status], $status);\n});\n```\n\n----------------------------------------\n\nTITLE: Defining an Eloquent Model in PHP\nDESCRIPTION: Creates a User model class extending the base Model, specifying table name, primary key, and timestamp settings.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/tr/db/model.md#2025-04-12_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nnamespace app\\model;\n\nuse support\\Model;\n\nclass User extends Model\n{\n    protected $table = 'user';\n    protected $primaryKey = 'uid';\n    public $timestamps = false;\n}\n```\n\n----------------------------------------\n\nTITLE: Dispatching Events in PHP Controller\nDESCRIPTION: Example controller showing how to dispatch events using Event::dispatch() method with event data.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/components/event.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\nuse support\\Request;\nuse Webman\\Event\\Event;\nclass User\n{\n    public function register(Request $request)\n    {\n        $user = [\n            'name' => 'webman',\n            'age' => 2\n        ];\n        Event::dispatch('user.register', $user);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Chunking Results With Webman DB Query Builder\nDESCRIPTION: This code demonstrates using the `chunkById()` method to process a large number of database records in smaller chunks.  It processes the 'users' table in chunks of 100 records, ordering by 'id'.  The anonymous function is called for each chunk. Returning `false` from the closure will stop the chunking process.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/db/queries.md#2025-04-12_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')->orderBy('id')->chunkById(100, function ($users) {\n    foreach ($users as $user) {\n        //\n    }\n});\n```\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')->orderBy('id')->chunkById(100, function ($users) {\n    // Process the records...\n\n    return false;\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Connections in PHP\nDESCRIPTION: Defines multiple Redis connection configurations with different hosts, ports, and database indices. Allows separation of default and cache Redis connections for flexible application usage.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/app/redis.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'default' => [\n        'host' => '127.0.0.1',\n        'password' => null,\n        'port' => 6379,\n        'database' => 0,\n    ],\n    'cache' => [\n        'host' => '127.0.0.1',\n        'password' => null,\n        'port' => 6379,\n        'database' => 1,\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Payment Configuration Setup\nDESCRIPTION: Configuration file setup for Alipay and WeChat payment integrations, including API credentials, certificates, and callback URLs.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/components/payment.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nreturn [\n    'alipay' => [\n        'default' => [\n            'app_id' => '20160909004708941',\n            'app_secret_cert' => 'MIIEpAIBAAKCxxxxxxxxxxxxxxP4r3m4OUmD/+XDgCg==',\n            'app_public_cert_path' => base_path().'/payment/appCertPublicKey_2016090900470841.crt',\n            'alipay_public_cert_path' => base_path().'/payment/alipayCertPublicKey_RSA2.crt',\n            'alipay_root_cert_path' => base_path().'/payment/alipayRootCert.crt',\n            'return_url' => 'https://webman.tinywan.cn/payment/alipay-return',\n            'notify_url' => 'https://webman.tinywan.cn/payment/alipay-notify',\n            'service_provider_id' => '',\n            'mode' => \\Yansongda\\Pay\\Pay::MODE_SANDBOX,\n        ]\n    ],\n    'wechat' => [\n        'default' => [\n            'mch_id' => '',\n            'mch_secret_key' => '',\n            'mch_secret_cert' => '',\n            'mch_public_cert_path' => '',\n            'notify_url' => 'https://yansongda.cn/wechat/notify',\n            'mp_app_id' => '2016082000291234',\n            'mini_app_id' => '',\n            'app_id' => '',\n            'combine_app_id' => '',\n            'combine_mch_id' => '',\n            'sub_mp_app_id' => '',\n            'sub_app_id' => '',\n            'sub_mini_app_id' => '',\n            'sub_mch_id' => '',\n            'wechat_public_cert_path' => [\n                '45F59D4DABF31918AFCEC556D5D2C6E376675D57' => __DIR__.'/Cert/wechatPublicKey.crt',\n            ],\n            'mode' => \\Yansongda\\Pay\\Pay::MODE_SANDBOX,\n        ]\n    ],\n    'logger' => [\n        'enable' => false,\n        'file' => runtime_path().'/logs/alipay.log',\n        'level' => 'debug',\n        'type' => 'single',\n        'max_file' => 30,\n    ],\n    'http' => [\n        'timeout' => 5.0,\n        'connect_timeout' => 5.0,\n    ],\n    '_force' => true,\n];\n```\n\n----------------------------------------\n\nTITLE: Authentication Middleware in PHP\nDESCRIPTION: Implements an authentication middleware that checks user session status and redirects unauthenticated requests. Uses reflection to determine login requirements for specific controller methods.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/th/middleware.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nclass AuthCheckTest implements MiddlewareInterface\n{\n    public function process(Request $request, callable $handler) : Response\n    {\n        if (session('user')) {\n            return $handler($request);\n        }\n\n        $controller = new ReflectionClass($request->controller);\n        $noNeedLogin = $controller->getDefaultProperties()['noNeedLogin'] ?? [];\n\n        if (!in_array($request->action, $noNeedLogin)) {\n            return redirect('/user/login');\n        }\n\n        return $handler($request);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Event Handling Class in PHP\nDESCRIPTION: Example of creating an event handling class app/event/User.php with methods for handling user registration and logout events.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/components/event.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\event;\nclass User\n{\n    function register($user)\n    {\n        var_export($user);\n    }\n \n    function logout($user)\n    {\n        var_export($user);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Exception Handler Interface Implementation\nDESCRIPTION: Interface definition for creating custom exception handlers in Webman, requiring report and render methods implementation.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/exception.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\ninterface ExceptionHandlerInterface\n{\n    /**\n     * Log the exception\n     * @param Throwable $e\n     * @return mixed\n     */\n    public function report(Throwable $e);\n\n    /**\n     * Render the response\n     * @param Request $request\n     * @param Throwable $e\n     * @return Response\n     */\n    public function render(Request $request, Throwable $e): Response;\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting Records with Eloquent Model in PHP\nDESCRIPTION: Shows how to create and save a new user record in a controller. The example demonstrates instantiating a model, setting properties from request data, and saving it to the database.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/tr/db/model.md#2025-04-12_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace app\\controller;\n\nuse app\\model\\User;\nuse support\\Request;\nuse support\\Response;\n\nclass FooController\n{\n    /**\n     * Kullanıcı tablosuna yeni bir kayıt ekler\n     *\n     * @param  Request  $request\n     * @return Response\n     */\n    public function store(Request $request)\n    {\n        // İsteği doğrula\n\n        $user = new User;\n\n        $user->name = $request->get('name');\n\n        $user->save();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Triggering an Event in PHP\nDESCRIPTION: This snippet shows how to trigger the LogErrorWriteEvent. It creates an event instance with an error message and invokes the event manager to handle it.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-hk/event.md#2025-04-12_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$error = [\n    'errorMessage' => '錯誤消息',\n    'errorCode' => 500\n];\nEventManager::trigger(new LogErrorWriteEvent($error),LogErrorWriteEvent::NAME);\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Table Name in Eloquent Model in PHP\nDESCRIPTION: This snippet demonstrates how to define a custom table name for an Eloquent model using the `$table` property. By setting `$table` to 'user', the model will interact with the 'user' table in the database.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/es/db/model.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass User extends Model\n{\n    /**\n     * Nombre de la tabla asociada al modelo\n     * @var string\n     */\n    protected $table = 'user';\n}\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving Context Data in Webman PHP\nDESCRIPTION: Interface for retrieving data from the request context. Optional name parameter returns specific value, or all context data if omitted.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/coroutine/context.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nContext::get(string $name = null);\n```\n\n----------------------------------------\n\nTITLE: Implementing an Aspect Class in PHP\nDESCRIPTION: DebugAspect class that intercepts the UserService::first method call.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/aop.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\aspect;\n\nuse app\\service\\UserService;\nuse Hyperf\\Di\\Aop\\AbstractAspect;\nuse Hyperf\\Di\\Aop\\ProceedingJoinPoint;\n\nclass DebugAspect extends AbstractAspect\n{\n    public $classes = [\n        UserService::class . '::first',\n    ];\n\n    public function process(ProceedingJoinPoint $proceedingJoinPoint)\n    {\n        var_dump(11);\n        return $proceedingJoinPoint->process();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating ThinkORM Model Class\nDESCRIPTION: Example of creating a User model class extending think\\Model with table and primary key configuration\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/pt/db/thinkorm.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\model;\n\nuse think\\Model;\n\nclass User extends Model\n{\n    /**\n     * The table associated with the model.\n     *\n     * @var string\n     */\n    protected $table = 'user';\n\n    /**\n     * The primary key associated with the table.\n     *\n     * @var string\n     */\n    protected $pk = 'id';\n\n    \n}\n```\n\n----------------------------------------\n\nTITLE: Handling Plurals in PHP Translations\nDESCRIPTION: Example of defining and using plural forms in translation strings.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/components/translation.md#2025-04-12_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nreturn [\n    'apple_count' => 'There is one apple|There are %count% apples',\n];\n\n// Usage\ntrans('apple_count', ['%count%' => 10]); // There are 10 apples\n```\n\n----------------------------------------\n\nTITLE: Allowing All Attributes for Mass Assignment\nDESCRIPTION: Shows how to allow all attributes to be mass-assignable by setting $guarded to an empty array, which should be used with caution.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/tr/db/model.md#2025-04-12_snippet_27\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Toplu atamaya izin verilmeyen özellikler.\n *\n * @var array\n */\nprotected $guarded = [];\n```\n\n----------------------------------------\n\nTITLE: Multi-Redis Message Delivery Implementation\nDESCRIPTION: Examples of sending messages to different Redis queues using both default and specific connections through Client and Redis interfaces.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/fr/queue/redis.md#2025-04-12_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n// Deliver messages to the queue with key 'default'\nClient::connection('default')->send($queue, $data);\nRedis::connection('default')->send($queue, $data);\n// Same as\nClient::send($queue, $data);\nRedis::send($queue, $data);\n\n// Deliver messages to the queue with key 'other'\nClient::connection('other')->send($queue, $data);\nRedis::connection('other')->send($queue, $data);\n```\n\n----------------------------------------\n\nTITLE: Displaying Pagination in Blade Template\nDESCRIPTION: This HTML template shows how to display the pagination component using Blade template engine. It includes Bootstrap CSS for styling and uses the {!! !!} syntax to render unescaped content.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/components/paginator.md#2025-04-12_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<html>\n<head>\n  <!-- Built-in support for Bootstrap pagination styles -->\n  <link rel=\"stylesheet\" href=\"//maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css\">\n</head>\n<body>\n\n{!! $paginator !!}\n\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Using Subqueries in Eloquent Select Statements\nDESCRIPTION: Shows how to use subqueries with addSelect to retrieve related data in a single database query.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/db/model.md#2025-04-12_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nuse app\\model\\Destination;\nuse app\\model\\Flight;\n\nreturn Destination::addSelect(['last_flight' => Flight::select('name')\n    ->whereColumn('destination_id', 'destinations.id')\n    ->orderBy('arrived_at', 'desc')\n    ->limit(1)\n])->get();\n```\n\n----------------------------------------\n\nTITLE: Setting Default Configuration Values in Webman PHP\nDESCRIPTION: Demonstrates how to provide a default value when accessing configuration that might not exist.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/config.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nconfig($key, $default);\n```\n\n----------------------------------------\n\nTITLE: Configuring Alipay and WeChat Pay in PHP\nDESCRIPTION: Example configuration file for Alipay and WeChat Pay, including API credentials, certificate paths, and environment settings.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/de/components/payment.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * @desc Zahlungskonfigurationsdatei\n * @author Tinywan(ShaoBo Wan)\n * @date 11.03.2022 20:15\n */\nreturn [\n    'alipay' => [\n        'default' => [\n            // Erforderlich - von Alipay zugewiesene app_id\n            'app_id' => '20160909004708941',\n            // Erforderlich - Anwendungs-Privatschlüssel, Zeichenkette oder Pfad\n            'app_secret_cert' => 'MIIEpAIBAAKCxxxxxxxxxxxxxxP4r3m4OUmD/+XDgCg==',\n            // Erforderlich - Anwendungsöffentliches Zertifikatpfad\n            'app_public_cert_path' => base_path().'/payment/appCertPublicKey_2016090900470841.crt',\n            // Erforderlich - Alipay öffentliches Zertifikatpfad\n            'alipay_public_cert_path' => base_path().'/payment/alipayCertPublicKey_RSA2.crt',\n            // Erforderlich - Alipay-Root-Zertifikatpfad\n            'alipay_root_cert_path' => base_path().'/payment/alipayRootCert.crt',\n            // Optional - Synchronisationsrückrufadresse\n            'return_url' => 'https://webman.tinywan.cn/payment/alipay-return',\n            // Optional - Asynchroner Rückrufadresse\n            'notify_url' => 'https://webman.tinywan.cn/payment/alipay-notify',\n            // Optional - Anbieter-ID im Serviceprovider-Modus, bei Verwendung dieses Parameters, wenn mode auf Pay::MODE_SERVICE gesetzt ist\n            'service_provider_id' => '',\n            // Optional - Standardmäßig Normalmodus. Kann sein: MODE_NORMAL, MODE_SANDBOX, MODE_SERVICE\n            'mode' => \\Yansongda\\Pay\\Pay::MODE_SANDBOX,\n        ]\n    ],\n    'wechat' => [\n        'default' => [\n            // Erforderlich - Händlernummer, im Serviceprovider-Modus die Händler-ID des Diensteanbieters\n            'mch_id' => '',\n            // Erforderlich - Händlergeheimschlüssel\n            'mch_secret_key' => '',\n            // Erforderlich - Händler-Privatschlüssel, Zeichenkette oder Pfad\n            'mch_secret_cert' => '',\n            // Erforderlich - Händler öffentliches Zertifikatspfad\n            'mch_public_cert_path' => '',\n            // Erforderlich\n            'notify_url' => 'https://yansongda.cn/wechat/notify',\n            // Optional - app_id des offiziellen Kontos\n            'mp_app_id' => '2016082000291234',\n            // Optional - app_id der Mini-Programme\n            'mini_app_id' => '',\n            // Optional - app_id der App\n            'app_id' => '',\n            // Optional - kombinierte app_id\n            'combine_app_id' => '',\n            // Optional - kombinierter Händlernummer\n            'combine_mch_id' => '',\n            // Optional - Im Serviceprovider-Modus, app_id des Sub-Offiziellen-Kontos\n            'sub_mp_app_id' => '',\n            // Optional - Im Serviceprovider-Modus, app_id des Sub-App\n            'sub_app_id' => '',\n            // Optional - Im Serviceprovider-Modus, app_id des Sub-Mini-Programms\n            'sub_mini_app_id' => '',\n            // Optional - Im Serviceprovider-Modus, Sub-Händlernummer\n            'sub_mch_id' => '',\n            // Optional - WeChat öffentliches Zertifikatspfad, optional, dringend empfohlen, dass dieser Parameter im PHP-FPM-Modus konfiguriert wird\n            'wechat_public_cert_path' => [\n                '45F59D4DABF31918AFCEC556D5D2C6E376675D57' => __DIR__.'/Cert/wechatPublicKey.crt',\n            ],\n            // Optional - Standardmäßig Normalmodus. Kann sein: MODE_NORMAL, MODE_SERVICE\n            'mode' => \\Yansongda\\Pay\\Pay::MODE_SANDBOX,\n        ]\n    ],\n    'logger' => [\n        'enable' => false,\n        'file' => runtime_path().'/logs/alipay.log',\n        'level' => 'debug', // Empfohlene Einstellungen für die Produktionsumgebung: info, für die Entwicklungsumgebung: debug\n        'type' => 'single', // Optional, täglich wählbar.\n        'max_file' => 30, // Optional, wirksam, wenn type auf täglich gesetzt ist, standardmäßig 30 Tage\n    ],\n    'http' => [ // optional\n        'timeout' => 5.0,\n        'connect_timeout' => 5.0,\n        // Weitere Konfigurationsoptionen finden Sie unter [Guzzle](https://guzzle-cn.readthedocs.io/zh_CN/latest/request-options.html)\n    ],\n    '_force' => true,\n];\n```\n\n----------------------------------------\n\nTITLE: Extending Blade in PHP Configuration\nDESCRIPTION: This PHP snippet shows how to extend Blade by adding custom directives in the view configuration file.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/de/view.md#2025-04-12_snippet_10\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse support\\view\\Blade;\nreturn [\n    'handler' => Blade::class,\n    'extension' => function (Jenssegers\\Blade\\Blade $blade) {\n        $blade->directive('mydate', function ($timestamp) {\n            return \"<?php echo date('Y-m-d H:i:s', $timestamp); ?>\";\n        });\n    }\n];\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Rows from a Table in PHP\nDESCRIPTION: This snippet demonstrates how to retrieve all rows from a 'users' table using a database query builder in PHP. It uses the Db::table() method to specify the table and the get() method to execute the query.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/tr/db/queries.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\nuse support\\Db;\n\nclass UserController\n{\n    public function all(Request $request)\n    {\n        $users = Db::table('users')->get();\n        return view('user/all', ['users' => $users]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Redis Usage Example in Webman\nDESCRIPTION: This PHP code demonstrates a basic example of using the Redis component in a Webman controller.  It sets a value for a key, retrieves it, and returns it as a response. It depends on the `support\\Request` and `support\\Redis` classes.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/db/redis.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\nuse support\\Redis;\n\nclass UserController\n{\n    public function db(Request $request)\n    {\n        $key = 'test_key';\n        Redis::set($key, rand());\n        return response(Redis::get($key));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Stress Testing with ab (Keep-Alive Disabled)\nDESCRIPTION: This shell command uses the 'ab' (ApacheBench) tool to perform a stress test with 100,000 requests and a concurrency of 200, with HTTP keep-alive disabled. The '-n' flag specifies the number of requests and '-c' specifies the concurrency level. Omitting the '-k' flag disables keep-alive. The target URL is 'http://127.0.0.1:8787/'.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/others/benchmarks.md#2025-04-12_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n# 100,000 requests, 200 concurrency, disable keep-alive\nab -n 100000 -c 200 http://127.0.0.1:8787/\n```\n\n----------------------------------------\n\nTITLE: ExceptionHandlerInterface Interface Definition in Webman PHP\nDESCRIPTION: Defines the ExceptionHandlerInterface for exception handling in Webman PHP, requiring the implementation of methods for reporting exceptions and rendering responses.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/fr/exception.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\ninterface ExceptionHandlerInterface\n{\n    /**\n     * Enregistrer les logs\n     * @param Throwable $e\n     * @return mixed\n     */\n    public function report(Throwable $e);\n\n    /**\n     * Rendre la réponse\n     * @param Request $request\n     * @param Throwable $e\n     * @return Response\n     */\n    public function render(Request $request, Throwable $e) : Response;\n}\n```\n\n----------------------------------------\n\nTITLE: Incrementing And Decrementing Values With Webman DB Query Builder\nDESCRIPTION: This snippet demonstrates incrementing and decrementing column values using `increment()` and `decrement()`. These methods can optionally take a second argument to specify the amount to increment or decrement by.  The last example also shows how to update other columns at the same time.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/db/queries.md#2025-04-12_snippet_29\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')->increment('votes');\n\nDb::table('users')->increment('votes', 5);\n\nDb::table('users')->decrement('votes');\n\nDb::table('users')->decrement('votes', 5);\n```\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')->increment('votes', 1, ['name' => 'John']);\n```\n\n----------------------------------------\n\nTITLE: Using Mass Assignment in Eloquent Models\nDESCRIPTION: Shows how to use the create method for mass assignment after configuring fillable properties, and how to use the fill method on an existing model instance.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/tr/db/model.md#2025-04-12_snippet_25\n\nLANGUAGE: php\nCODE:\n```\n$flight = app\\modle\\Flight::create(['name' => 'Flight 10']);\n```\n\nLANGUAGE: php\nCODE:\n```\n$flight->fill(['name' => 'Flight 22']);\n```\n\n----------------------------------------\n\nTITLE: Capturing Output for Response\nDESCRIPTION: This snippet demonstrates how to capture output from a function that prints directly to the output buffer using `ob_start()` and `ob_get_clean()`. It's useful for integrating with libraries that don't return data directly.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/response.md#2025-04-12_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace app\\controller;\n\nuse support\\Request;\n\nclass ImageController\n{\n    public function get(Request $request)\n    {\n        // Создание изображения\n        $im = imagecreatetruecolor(120, 20);\n        $text_color = imagecolorallocate($im, 233, 14, 91);\n        imagestring($im, 1, 5, 5,  'Простая текстовая строка', $text_color);\n\n        // Начало захвата вывода\n        ob_start();\n        // Вывод изображения\n        imagejpeg($im);\n        // Получение содержимого изображения\n        $image = ob_get_clean();\n        \n        // Отправка изображения\n        return response($image)->header('Content-Type', 'image/jpeg');\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Request Processing Middleware Example\nDESCRIPTION: Sample middleware implementation showing the three phases of request processing: request traversal, controller handling, and response output.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/middleware.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\middleware;\n\nuse Webman\\MiddlewareInterface;\nuse Webman\\Http\\Response;\nuse Webman\\Http\\Request;\n\nclass Test implements MiddlewareInterface\n{\n    public function process(Request $request, callable $handler) : Response\n    {\n        echo 'Questa è la fase di attraversamento della richiesta, ovvero prima dell\\'elaborazione della richiesta';\n        \n        $response = $handler($request);\n        \n        echo 'Questa è la fase di uscita della risposta, ovvero dopo l\\'elaborazione della richiesta';\n        \n        return $response;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: PHP Controller for Image Processing\nDESCRIPTION: UserController implementation that handles image upload processing using Intervention/Image. The controller resizes uploaded images to 100x100 pixels and returns them as PNG responses.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/components/image.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\nuse support\\Request;\nuse Intervention\\Image\\ImageManagerStatic as Image;\n\nclass UserController\n{\n    public function img(Request $request)\n    {\n        $file = $request->file('file');\n        if ($file && $file->isValid()) {\n            $image = Image::make($file)->resize(100, 100);\n            return response($image->encode('png'), 200, ['Content-Type' => 'image/png']);\n        }\n        return response('file not found');\n    }\n    \n}\n```\n\n----------------------------------------\n\nTITLE: Storing Session Data\nDESCRIPTION: Methods for storing single or multiple values in session.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/session.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$session = $request->session();\n$session->set('name', 'tom');\n\n$session = $request->session();\n$session->put(['name' => 'tom', 'age' => 12]);\n```\n\n----------------------------------------\n\nTITLE: Basic Permission Management with webman-permission\nDESCRIPTION: These code snippets demonstrate basic permission management using the `webman\\permission\\Permission` class.  It includes adding permissions to users, assigning roles to users, and adding policies to roles.  This is a quick start for integrating permission in webman project.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/casbin.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse webman\\permission\\Permission;\n\n// 為用戶添加權限\nPermission::addPermissionForUser('eve', 'articles', 'read');\n// 為用戶添加角色。\nPermission::addRoleForUser('eve', 'writer');\n// 為規則添加權限\nPermission::addPolicy('writer', 'articles','edit');\n```\n\n----------------------------------------\n\nTITLE: Middleware Configuration for Multiple Applications\nDESCRIPTION: Configuring different middleware for global and application-specific contexts in the middleware configuration file\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/pt/multiapp.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    // Global middleware\n    '' => [\n        support\\middleware\\AuthCheck::class,\n    ],\n    // API application middleware\n    'api' => [\n         support\\middleware\\AccessControl::class,\n     ],\n    // Admin application middleware\n    'admin' => [\n         support\\middleware\\AdminAuthCheck::class,\n         support\\middleware\\SomeOtherClass::class,\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Multiple Logging Channels Configuration\nDESCRIPTION: This code snippet demonstrates how to configure multiple logging channels in Webman. It shows the configuration for both the 'default' channel and a new channel named 'log2'. Each channel has its own handler configuration, allowing logs to be written to different files with potentially different formats and levels.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/th/log.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    // ช่องเราที่จะใช้บันทึก\n    'default' => [\n        // แฮนเดอร์ที่ใช้จัดการช่องเราที่จะใช้ สามารถกำหนดหลายตัว\n        'handlers' => [\n            [   \n                // ชื่อคลาสแฮนเดอร์\n                'class' => Monolog\\Handler\\RotatingFileHandler::class,\n                // ตัวแปรของคอนสตรัคเตอร์ของคลาสแฮนเดอร์\n                'constructor' => [\n                    runtime_path() . '/logs/webman.log',\n                    Monolog\\Logger::DEBUG,\n                ],\n                // แบบรูปแบบที่เกี่ยวข้อง\n                'formatter' => [\n                    // ชื่อคลาสตัวจัดการการจัดรูปแบบ\n                    'class' => Monolog\\Formatter\\LineFormatter::class,\n                    // ตัวแปรของคอนสตรัคเตอร์ของคลาสตัวจัดการการจัดรูปแบบ\n                    'constructor' => [ null, 'Y-m-d H:i:s', true],\n                ],\n            ]\n        ],\n    ],\n    // ช่อง log2\n    'log2' => [\n        // แฮนเดอร์ที่ใช้จัดการช่อง log2 สามารถกำหนดหลายตัว\n        'handlers' => [\n            [   \n                // ชื่อคลาสแฮนเดอร์\n                'class' => Monolog\\Handler\\RotatingFileHandler::class,\n                // ตัวแปรของคอนสตรัคเตอร์ของคลาสแฮนเดอร์\n                'constructor' => [\n                    runtime_path() . '/logs/log2.log',\n                    Monolog\\Logger::DEBUG,\n                ],\n                // แบบรูปแบบที่เกี่ยวข้อง\n                'formatter' => [\n                    // ชื่อคลาสตัวจัดการการจัดรูปแบบ\n                    'class' => Monolog\\Formatter\\LineFormatter::class,\n                    // ตัวแปรของคอนสตรัคเตอร์ของคลาสตัวจัดการการจัดรูปแบบ\n                    'constructor' => [ null, 'Y-m-d H:i:s', true],\n                ],\n            ]\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Sending Non-blocking HTTP Requests with Workerman HTTP Client in PHP\nDESCRIPTION: Example of using Workerman HTTP Client to send non-blocking HTTP requests in a Webman controller. This approach improves application performance by allowing the server to handle other requests while waiting for HTTP responses.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/fr/upgrade/1-5.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace app\\controller;\n\nuse support\\Request;\nuse Workerman\\Http\\Client;\n\nclass TestController\n{\n    public function index(Request $request)\n    {\n        static $client;\n        $client = $client ?: new Client();\n        $response = $client->get('http://example.com'); // Envoi de requête asynchrone de manière synchrone\n        return $response->getBody()->getContents();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Default Connection\nDESCRIPTION: This configuration snippet sets up the default Redis connection parameters including host, password, port, and database index in the config/redis.php file for Webman PHP.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-hk/db/redis.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'default' => [\n        'host'     => '127.0.0.1',\n        'password' => null,\n        'port'     => 6379,\n        'database' => 0,\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring Event Subscriptions in PHP\nDESCRIPTION: Configuration file example showing how to subscribe to user-related events in Webman framework.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/de/components/event.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nreturn [\n    'user.register' => [\n        [app\\event\\User::class, 'register'],\n        // ...andere Ereignisfunktionen...\n    ],\n    'user.logout' => [\n        [app\\event\\User::class, 'logout'],\n        // ...andere Ereignisfunktionen...\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Creating Payment Configuration File in Webman\nDESCRIPTION: Configuration file setup for Alipay and WeChat payment services with necessary credentials, certificates, and callback URLs. Includes sandbox mode settings and logging configuration.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-hk/components/payment.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * @desc 支付配置文件\n * @author Tinywan(ShaoBo Wan)\n * @date 2022/03/11 20:15\n */\nreturn [\n    'alipay' => [\n        'default' => [\n            // 必填-支付宝分配的 app_id\n            'app_id' => '20160909004708941',\n            // 必填-应用私钥 字符串或路径\n            'app_secret_cert' => 'MIIEpAIBAAKCxxxxxxxxxxxxxxP4r3m4OUmD/+XDgCg==',\n            // 必填-应用公钥证书 路径\n            'app_public_cert_path' => base_path().'/payment/appCertPublicKey_2016090900470841.crt',\n            // 必填-支付宝公钥证书 路径\n            'alipay_public_cert_path' => base_path().'/payment/alipayCertPublicKey_RSA2.crt',\n            // 必填-支付宝根证书 路径\n            'alipay_root_cert_path' => base_path().'/payment/alipayRootCert.crt',\n            // 选填-同步回调地址\n            'return_url' => 'https://webman.tinywan.cn/payment/alipay-return',\n            // 选填-异步回调地址\n            'notify_url' => 'https://webman.tinywan.cn/payment/alipay-notify',\n            // 选填-服务商模式下的服务商 id，当 mode 为 Pay::MODE_SERVICE 时使用该参数\n            'service_provider_id' => '',\n            // 选填-默认为正常模式。可选为： MODE_NORMAL, MODE_SANDBOX, MODE_SERVICE\n            'mode' => \\Yansongda\\Pay\\Pay::MODE_SANDBOX,\n        ]\n    ],\n    'wechat' => [\n        'default' => [\n            // 必填-商户号，服务商模式下为服务商商户号\n            'mch_id' => '',\n            // 必填-商户秘钥\n            'mch_secret_key' => '',\n            // 必填-商户私钥 字符串或路径\n            'mch_secret_cert' => '',\n            // 必填-商户公钥证书路径\n            'mch_public_cert_path' => '',\n            // 必填\n            'notify_url' => 'https://yansongda.cn/wechat/notify',\n            // 选填-公众号 的 app_id\n            'mp_app_id' => '2016082000291234',\n            // 选填-小程序 的 app_id\n            'mini_app_id' => '',\n            // 选填-app 的 app_id\n            'app_id' => '',\n            // 选填-合单 app_id\n            'combine_app_id' => '',\n            // 选填-合单商户号\n            'combine_mch_id' => '',\n            // 选填-服务商模式下，子公众号 的 app_id\n            'sub_mp_app_id' => '',\n            // 选填-服务商模式下，子 app 的 app_id\n            'sub_app_id' => '',\n            // 选填-服务商模式下，子小程序 的 app_id\n            'sub_mini_app_id' => '',\n            // 选填-服务商模式下，子商户id\n            'sub_mch_id' => '',\n            // 选填-微信公钥证书路径, optional，强烈建议 php-fpm 模式下配置此参数\n            'wechat_public_cert_path' => [\n                '45F59D4DABF31918AFCEC556D5D2C6E376675D57' => __DIR__.'/Cert/wechatPublicKey.crt',\n            ],\n            // 选填-默认为正常模式。可选为： MODE_NORMAL, MODE_SERVICE\n            'mode' => \\Yansongda\\Pay\\Pay::MODE_SANDBOX,\n        ]\n    ],\n    'logger' => [\n        'enable' => false,\n        'file' => runtime_path().'/logs/alipay.log',\n        'level' => 'debug', // 建议生产环境等级调整为 info，开发环境为 debug\n        'type' => 'single', // optional, 可选 daily.\n        'max_file' => 30, // optional, 当 type 为 daily 时有效，默认 30 天\n    ],\n    'http' => [ // optional\n        'timeout' => 5.0,\n        'connect_timeout' => 5.0,\n        // 更多配置项请参考 [Guzzle](https://guzzle-cn.readthedocs.io/zh_CN/latest/request-options.html)\n    ],\n    '_force' => true,\n];\n```\n\n----------------------------------------\n\nTITLE: Implémentation d'un serveur WebSocket personnalisé en PHP\nDESCRIPTION: Classe Pusher qui gère les événements WebSocket comme la connexion, les messages et la fermeture de connexion, avec des méthodes spécifiques pour chaque événement.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/fr/process.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\\nnamespace app;\\n\\nuse Workerman\\Connection\\TcpConnection;\\n\\nclass Pusher\\n{\\n    public function onConnect(TcpConnection $connection)\\n    {\\n        echo \\\"onConnect\\\\n\\\";\\n    }\\n\\n    public function onWebSocketConnect(TcpConnection $connection, $http_buffer)\\n    {\\n        echo \\\"onWebSocketConnect\\\\n\\\";\\n    }\\n\\n    public function onMessage(TcpConnection $connection, $data)\\n    {\\n        $connection->send($data);\\n    }\\n\\n    public function onClose(TcpConnection $connection)\\n    {\\n        echo \\\"onClose\\\\n\\\";\\n    }\\n}\n```\n\n----------------------------------------\n\nTITLE: Using Cursors to Iterate Through Large Datasets in PHP\nDESCRIPTION: This example shows how to use cursors to iterate through a large dataset, reducing memory usage. The `cursor()` method fetches data in smaller chunks, allowing efficient processing of large tables.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/es/db/model.md#2025-04-12_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n<?php\nforeach (app\\model\\User::where('sex', 1)->cursor() as $usuario) {\n    //\n}\n\n```\n\n----------------------------------------\n\nTITLE: Bulk Updating Records with Eloquent\nDESCRIPTION: Demonstrates how to perform a bulk update on multiple records using Eloquent's query builder methods.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/jp/db/model.md#2025-04-12_snippet_16\n\nLANGUAGE: php\nCODE:\n```\napp\\model\\User::where('uid', '>', 10)\n          ->update(['name' => 'tom']);\n```\n\n----------------------------------------\n\nTITLE: Registering Event Listener\nDESCRIPTION: Configuration to register an event listener for the LogErrorWriteEvent\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/event.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    // 事件监听\n    'listener'    => [\n        \\extend\\event\\LogErrorWriteEvent::NAME  => \\extend\\event\\LogErrorWriteEvent::class,\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Executing Raw SQL Expressions\nDESCRIPTION: Examples of using raw SQL expressions with proper parameter binding for security\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/db/queries.md#2025-04-12_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$orders = Db::table('orders')\n                ->selectRaw('price * ? as price_with_tax', [1.0825])\n                ->get();\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Connections for Webman PHP Plugin\nDESCRIPTION: Example configuration file for setting up multiple database connections in a Webman PHP plugin. It defines two MySQL connections with different names and credentials.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/app/database.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'default' => 'mysql',\n    'connections' => [\n        'mysql' => [ // mysql è il nome della connessione\n            'driver'      => 'mysql',\n            'host'        => '127.0.0.1',\n            'port'        => 3306,\n            'database'    => 'nome del database',\n            'username'    => 'nome utente',\n            'password'    => 'password',\n            'charset'     => 'utf8mb4',\n            'collation'   => 'utf8mb4_general_ci',\n        ],\n        'admin' => [ // admin è il nome della connessione\n            'driver'      => 'mysql',\n            'host'        => '127.0.0.1',\n            'port'        => 3306,\n            'database'    => 'nome del database',\n            'username'    => 'nome utente',\n            'password'    => 'password',\n            'charset'     => 'utf8mb4',\n            'collation'   => 'utf8mb4_general_ci',\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Full Process Configuration Example in PHP for Webman\nDESCRIPTION: This snippet provides a comprehensive example of a process configuration in Webman, including all available options such as handler, listen, count, user, group, reloadable, reusePort, transport, context, and constructor.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/tr/process.md#2025-04-12_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\nreturn [\n    // ... \n    \n    // websocket_test is the name of the process\n    'websocket_test' => [\n        // Specify the process class here\n        'handler' => app\\Pusher::class,\n        // Listening protocol, IP and port (optional)\n        'listen'  => 'websocket://0.0.0.0:8888',\n        // Number of processes (optional, default 1)\n        'count'   => 2,\n        // User to run the process (optional, default current user)\n        'user'    => '',\n        // User group to run the process (optional, default current user group)\n        'group'   => '',\n        // Whether the current process supports reload (optional, default true)\n        'reloadable' => true,\n        // Whether to enable the reusePort option (optional, this option requires php>=7.0, default is true)\n        'reusePort'  => true,\n        // transport (optional, set to ssl if you need to enable ssl, default is tcp)\n        'transport'  => 'tcp',\n        // context (optional, when transport is set to ssl, you need to pass the certificate path)\n        'context'    => [], \n        // Constructor function parameters of the process class, here are the constructor parameters of the process\\Pusher::class class (optional)\n        'constructor' => [],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Deleting Session Data in Webman PHP\nDESCRIPTION: Shows how to delete one or multiple session items using forget() and delete() methods.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/session.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$session = $request->session();\n// Delete one item\n$session->forget('name');\n// Delete multiple items\n$session->forget(['name', 'age']);\n\n$session = $request->session();\n// Equivalent to $session->forget('name');\n$session->delete('name');\n```\n\n----------------------------------------\n\nTITLE: Chunked Results with Webman PHP\nDESCRIPTION: This code snippet demonstrates how to process large datasets in chunks using the `chunkById()` method in the Webman PHP framework.  It retrieves records from the 'users' table in blocks of 100, allowing for memory-efficient processing of large tables.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/fr/db/queries.md#2025-04-12_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')->orderBy('id')->chunkById(100, function ($users) {\n    foreach ($users as $user) {\n        //\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Synchronous Message Delivery in Redis Queue\nDESCRIPTION: Example of synchronous message delivery using Redis::send() method with support for delayed messages.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/queue/redis.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\nuse Webman\\RedisQueue\\Redis;\n\nclass Index\n{\n    public function queue(Request $request)\n    {\n        // Queue name\n        $queue = 'send-mail';\n        // Data, can be passed as an array without serialization\n        $data = ['to' => 'tom@gmail.com', 'content' => 'hello'];\n        // Deliver the message\n        Redis::send($queue, $data);\n        // Deliver delayed message, to be processed after 60 seconds\n        Redis::send($queue, $data, 60);\n\n        return response('redis queue test');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Connections for Webman PHP Plugin\nDESCRIPTION: This snippet shows how to configure multiple database connections for a Webman PHP plugin. It sets up two MySQL connections named 'mysql' and 'admin' with different connection parameters.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/app/database.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nreturn  [\n    'default' => 'mysql',\n    'connections' => [\n        'mysql' => [ // mysql is the connection name\n            'driver'      => 'mysql',\n            'host'        => '127.0.0.1',\n            'port'        => 3306,\n            'database'    => 'database',\n            'username'    => 'username',\n            'password'    => 'password',\n            'charset'     => 'utf8mb4',\n            'collation'   => 'utf8mb4_general_ci',\n        ],\n        'admin' => [ // admin is the connection name\n            'driver'      => 'mysql',\n            'host'        => '127.0.0.1',\n            'port'        => 3306,\n            'database'    => 'database',\n            'username'    => 'username',\n            'password'    => 'password',\n            'charset'     => 'utf8mb4',\n            'collation'   => 'utf8mb4_general_ci',\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: User Controller Example in Webman\nDESCRIPTION: This controller provides the `login` and `info` actions, demonstrating how to manage user sessions. The `$noNeedLogin` property defines which actions do not require the user to be logged in.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/es/middleware.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\nuse support\\Request;\n\nclass UserController\n{\n    /**\n     * Métodos que no requieren inicio de sesión\n     */\n    protected $noNeedLogin = ['login'];\n\n    public function login(Request $request)\n    {\n        $request->session()->set('user', ['id' => 10, 'name' => 'webman']);\n        return json(['code' => 0, 'msg' => 'inicio de sesión exitoso']);\n    }\n\n    public function info()\n    {\n        return json(['code' => 0, 'msg' => 'ok', 'data' => session('user')]);\n    }\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: WhereColumn Clause with Webman PHP\nDESCRIPTION: This code snippet demonstrates how to use the `whereColumn()` clause in the Webman PHP framework's database query builder. It compares the values of two columns ('first_name' and 'last_name') to see if they are equal.  It also showcases how to compare with an operator and use an array for multiple comparisons.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/fr/db/queries.md#2025-04-12_snippet_25\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')\n                ->whereColumn('first_name', 'last_name')\n                ->get();\n                \n// Vous pouvez également passer un opérateur de comparaison\n$users = Db::table('users')\n                ->whereColumn('updated_at', '>', 'created_at')\n                ->get();\n                \n// La méthode whereColumn peut également accepter un tableau\n$users = Db::table('users')\n                ->whereColumn([\n                    ['first_name', '=', 'last_name'],\n                    ['updated_at', '>', 'created_at'],\n                ])->get();\n```\n\n----------------------------------------\n\nTITLE: Implementing Authorization Middleware for webman-permission\nDESCRIPTION: PHP class implementing a middleware for handling authorization using the webman-permission library.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/tr/casbin.md#2025-04-12_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace app\\middleware;\n\nuse Webman\\MiddlewareInterface;\nuse Webman\\Http\\Response;\nuse Webman\\Http\\Request;\nuse Casbin\\Exceptions\\CasbinException;\nuse webman\\permission\\Permission;\n\nclass YetkilendirmeMiddleware implements MiddlewareInterface\n{\n\tpublic function process(Request $request, callable $next): Response\n\t{\n\t\t$uri = $request->path();\n\t\ttry {\n\t\t\t$userId = 10086;\n\t\t\t$action = $request->method();\n\t\t\tif (!Permission::enforce((string) $userId, $uri, strtoupper($action))) {\n\t\t\t\tthrow new \\Exception('Üzgünüm, bu API\\'ye erişim izniniz yok');\n\t\t\t}\n\t\t} catch (CasbinException $exception) {\n\t\t\tthrow new \\Exception('Yetkilendirme istisnası' . $exception->getMessage());\n\t\t}\n\t\treturn $next($request);\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Global Middleware Configuration in Webman\nDESCRIPTION: Demonstrates how to add the authentication middleware to the global middleware configuration in `config/middleware.php`.  This ensures that the middleware is applied to all requests.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/es/middleware.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    // Middleware global\n    '' => [\n        // ... otros middlewares omitidos aquí\n        app\\middleware\\AuthCheckTest::class,\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Redis Interface Methods in Webman\nDESCRIPTION: List of available Redis methods that can be used with the Redis facade in Webman applications.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/db/redis.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nRedis::append($key, $value)\nRedis::bitCount($key)\nRedis::decr($key, $value)\nRedis::decrBy($key, $value)\nRedis::get($key)\nRedis::getBit($key, $offset)\nRedis::getRange($key, $start, $end)\nRedis::getSet($key, $value)\nRedis::incr($key, $value)\nRedis::incrBy($key, $value)\nRedis::incrByFloat($key, $value)\nRedis::mGet(array $keys)\nRedis::getMultiple(array $keys)\nRedis::mSet($pairs)\nRedis::mSetNx($pairs)\nRedis::set($key, $value, $expireResolution = null, $expireTTL = null, $flag = null)\nRedis::setBit($key, $offset, $value)\nRedis::setEx($key, $ttl, $value)\nRedis::pSetEx($key, $ttl, $value)\nRedis::setNx($key, $value)\nRedis::setRange($key, $offset, $value)\nRedis::strLen($key)\nRedis::del(...$keys)\nRedis::exists(...$keys)\nRedis::expire($key, $ttl)\nRedis::expireAt($key, $timestamp)\nRedis::select($dbIndex)\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Middleware Interface in PHP\nDESCRIPTION: Example showing the basic structure of middleware implementation with request and response handling phases.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/de/middleware.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\middleware;\n\nuse Webman\\MiddlewareInterface;\nuse Webman\\Http\\Response;\nuse Webman\\Http\\Request;\n\nclass Test implements MiddlewareInterface\n{\n    public function process(Request $request, callable $handler) : Response\n    {\n        echo 'This is the request passage phase, i.e., before request processing.';\n        \n        $response = $handler($request);\n        \n        echo 'This is the response passage phase, i.e., after request processing.';\n        \n        return $response;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Processing Large Result Sets with Chunks in WebMan PHP\nDESCRIPTION: Shows how to process large datasets in chunks to avoid memory issues, with an option to stop processing early.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/jp/db/queries.md#2025-04-12_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')->orderBy('id')->chunkById(100, function ($users) {\n    foreach ($users as $user) {\n        //\n    }\n});\n```\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')->orderBy('id')->chunkById(100, function ($users) {\n    // Process records...\n\n    return false;\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing Timestamp Format in Eloquent Model in PHP\nDESCRIPTION: This example shows how to customize the timestamp format used by an Eloquent model using the `$dateFormat` property. The specified format will be used when storing dates in the database and when serializing the model to an array or JSON.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/es/db/model.md#2025-04-12_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass User extends Model\n{\n    /**\n     * Formato de almacenamiento de la marca de tiempo\n     * @var string\n     */\n    protected $dateFormat = 'U';\n}\n\n```\n\n----------------------------------------\n\nTITLE: Deleting a Model in Eloquent\nDESCRIPTION: Shows how to delete a model instance by calling the delete method on the model after retrieving it.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/tr/db/model.md#2025-04-12_snippet_30\n\nLANGUAGE: php\nCODE:\n```\n$flight = app\\modle\\Flight::find(1);\n$flight->delete();\n```\n\n----------------------------------------\n\nTITLE: Creating a DebugAspect\nDESCRIPTION: This code defines a `DebugAspect` that extends `AbstractAspect`. It intercepts calls to the `first` method of the `UserService` class, dumps the value 11, and then proceeds with the original method execution. It demonstrates how AOP can be used for debugging or logging purposes.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/aop.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\aspect;\n\nuse app\\service\\UserService;\nuse Hyperf\\Di\\Aop\\AbstractAspect;\nuse Hyperf\\Di\\Aop\\ProceedingJoinPoint;\n\nclass DebugAspect extends AbstractAspect\n{\n    public $classes = [\n        UserService::class . '::first',\n    ];\n\n    public function process(ProceedingJoinPoint $proceedingJoinPoint)\n    {\n        var_dump(11);\n        return $proceedingJoinPoint->process();\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Creating Database Migration for Casbin Rules Table\nDESCRIPTION: PHP migration file for creating the 'rule' table that stores Casbin policy rules. This uses Phinx for database migration to establish the necessary schema for storing access control rules.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-hk/components/casbin.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Phinx\\Migration\\AbstractMigration;\n\nclass CreateRuleTable extends AbstractMigration\n{\n    /**\n     * Change Method.\n     *\n     * Write your reversible migrations using this method.\n     *\n     * More information on writing migrations is available here:\n     * http://docs.phinx.org/en/latest/migrations.html#the-abstractmigration-class\n     *\n     * The following commands can be used in this method and Phinx will\n     * automatically reverse them when rolling back:\n     *\n     *    createTable\n     *    renameTable\n     *    addColumn\n     *    addCustomColumn\n     *    renameColumn\n     *    addIndex\n     *    addForeignKey\n     *\n     * Any other destructive changes will result in an error when trying to\n     * rollback the migration.\n     *\n     * Remember to call \"create()\" or \"update()\" and NOT \"save()\" when working\n     * with the Table class.\n     */\n    public function change()\n    {\n        $table = $this->table('rule', ['id' => false, 'primary_key' => ['id'], 'engine' => 'InnoDB', 'collation' => 'utf8mb4_general_ci', 'comment' => '规则表']);\n\n        //添加数据字段\n        $table->addColumn('id', 'integer', ['identity' => true, 'signed' => false, 'limit' => 11, 'comment' => '主键ID'])\n            ->addColumn('ptype', 'char', ['default' => '', 'limit' => 8, 'comment' => '规则类型'])\n            ->addColumn('v0', 'string', ['default' => '', 'limit' => 128])\n            ->addColumn('v1', 'string', ['default' => '', 'limit' => 128])\n            ->addColumn('v2', 'string', ['default' => '', 'limit' => 128])\n            ->addColumn('v3', 'string', ['default' => '', 'limit' => 128])\n            ->addColumn('v4', 'string', ['default' => '', 'limit' => 128])\n            ->addColumn('v5', 'string', ['default' => '', 'limit' => 128]);\n\n        //执行创建\n        $table->create();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Cursor for Memory-Efficient Database Iteration\nDESCRIPTION: Shows how to use the cursor() method to efficiently iterate through large datasets with minimal memory usage.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/db/model.md#2025-04-12_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nforeach (app\\model\\User::where('sex', 1')->cursor() as $user) {\n    //\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Error Response Format\nDESCRIPTION: Standard JSON format for error responses in Webman PHP framework.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/exception.md#2025-04-12_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"code\": \"500\",\n    \"msg\": \"Exception message\"\n}\n```\n\n----------------------------------------\n\nTITLE: Logging Usage in Webman Plugin\nDESCRIPTION: Examples of how to use logging functionality within a Webman plugin, demonstrating both plugin-specific and main project logging\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/plugin/app.md#2025-04-12_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse support\\Log;\nLog::channel('plugin.admin.default')->info('test');\n```\n\n----------------------------------------\n\nTITLE: Configuring Additional HTTP Port for Slow Processes in Webman PHP\nDESCRIPTION: Configuration setup in config/process.php to add a new HTTP port (8686) dedicated to handling slow requests. Includes process count, port settings, and constructor parameters for the request handler.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/others/task.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'task' => [\n        'handler' => \\Webman\\App::class,\n        'listen' => 'http://0.0.0.0:8686',\n        'count' => 8, // Number of processes\n        'user' => '',\n        'group' => '',\n        'reusePort' => true,\n        'constructor' => [\n            'request_class' => \\support\\Request::class, // Set request class\n            'logger' => \\support\\Log::channel('default'), // Logger instance\n            'app_path' => app_path(), // App directory location\n            'public_path' => public_path() // Public directory location\n        ]\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Model Mass Assignment Configuration\nDESCRIPTION: Demonstrates how to configure mass assignment protection using fillable or guarded properties.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/db/model.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\model;\n\nuse support\\Model;\n\nclass Flight extends Model\n{\n    /**\n     * 可以被批量赋值的属性。\n     *\n     * @var array\n     */\n    protected $fillable = ['name'];\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Database Configuration in Webman PHP\nDESCRIPTION: Configuration file for defining database connection settings, supporting multiple database types with detailed connection parameters\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/db/config.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n     // 預設資料庫\n     'default' => 'mysql',\n     // 各種資料庫設定\n     'connections' => [\n         'mysql' => [\n             'driver'      => 'mysql',\n             'host'        => '127.0.0.1',\n             'port'        => 3306,\n             'database'    => 'webman',\n             'username'    => 'webman',\n             'password'    => '',\n             'unix_socket' => '',\n             'charset'     => 'utf8',\n             'collation'   => 'utf8_unicode_ci',\n             'prefix'      => '',\n             'strict'      => true,\n             'engine'      => null,\n         ]\n     ]\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring Route Middleware in Webman\nDESCRIPTION: Examples of applying middleware to specific routes or route groups using the Route configuration.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/middleware.md#2025-04-12_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse support\\Request;\nuse Webman\\Route;\n\nRoute::any('/admin', [app\\admin\\controller\\IndexController::class, 'index'])->middleware([\n    app\\middleware\\MiddlewareA::class,\n    app\\middleware\\MiddlewareB::class,\n]);\n\nRoute::group('/blog', function () {\n   Route::any('/create', function () {return response('create');});\n   Route::any('/edit', function () {return response('edit');});\n   Route::any('/view/{id}', function ($r, $id) {response(\"view $id\");});\n})->middleware([\n    app\\middleware\\MiddlewareA::class,\n    app\\middleware\\MiddlewareB::class,\n]);\n```\n\n----------------------------------------\n\nTITLE: Creating 404 HTML template in Webman\nDESCRIPTION: This code creates an HTML template for a 404 error page. The template includes a title and displays an error message, which is escaped for security.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/others/custom-error-page.md#2025-04-12_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!doctype html>\n<html>\n<head>\n    <meta charset=\"utf-8\">\n    <title>404 not found</title>\n</head>\n<body>\n<?=htmlspecialchars($error)?>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Respect Validation Controller Example\nDESCRIPTION: Demonstrates using the `respect/validation` library within a webman controller. It defines validation rules for 'nickname' (length 1-64), 'username' (alphanumeric, length 5-64), and 'password' (length 5-64), retrieves the validated data, and inserts it into the `user` table.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/components/validation.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\nuse Respect\\Validation\\Validator as v;\nuse support\\Db;\n\nclass IndexController\n{\n    public function index(Request $request)\n    {\n        $data = v::input($request->post(), [\n            'nickname' => v::length(1, 64)->setName('暱稱'),\n            'username' => v::alnum()->length(5, 64)->setName('使用者名稱'),\n            'password' => v::length(5, 64)->setName('密碼')\n        ]);\n        Db::table('user')->insert($data);\n        return json(['code' => 0, 'msg' => 'ok']);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Single Row in WebMan PHP Query Builder\nDESCRIPTION: Shows how to fetch a single row from the database based on a condition.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/jp/db/queries.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$user = Db::table('users')->where('name', 'John')->first();\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom WebSocket Listener Process in PHP for Webman\nDESCRIPTION: This configuration snippet shows how to set up a custom WebSocket listener process in Webman's config/process.php file. It specifies the handler class, listening address, and process count.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/tr/process.md#2025-04-12_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nreturn [\n    // ... Other process configurations are omitted here...\n    \n    // websocket_test is the name of the process\n    'websocket_test' => [\n        // Specify the process class here, which is the Pusher class defined above\n        'handler' => app\\Pusher::class,\n        'listen'  => 'websocket://0.0.0.0:8888',\n        'count'   => 1,\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: User Controller with Login Functionality in Webman PHP\nDESCRIPTION: This code defines a simple user controller with a login method and an info method in Webman PHP. The login method sets a session variable indicating that the user is logged in. The `noNeedLogin` property specifies methods that do not require authentication.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/middleware.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n\"<?php\nnamespace app\\controller;\nuse support\\Request;\n\nclass UserController\n{\n    /**\n     * 不需要登录的方法\n     */\n    protected $noNeedLogin = ['login'];\n\n    public function login(Request $request)\n    {\n        $request->session()->set('user', ['id' => 10, 'name' => 'webman']);\n        return json(['code' => 0, 'msg' => 'login ok']);\n    }\n\n    public function info()\n    {\n        return json(['code' => 0, 'msg' => 'ok', 'data' => session('user')]);\n    }\n}\"\n```\n\n----------------------------------------\n\nTITLE: Adding Permissions and Roles\nDESCRIPTION: This code snippet demonstrates how to add permissions and roles using the `webman\\permission\\Permission` facade. It shows how to add permission for a user to read articles, assign a role to a user, and add a policy for a role to edit articles.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/casbin.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n\"use webman\\\\permission\\\\Permission;\n\n// добавить права доступа для пользователя\nPermission::addPermissionForUser('eve', 'articles', 'read');\n// добавить роль для пользователя.\nPermission::addRoleForUser('eve', 'writer');\n// добавить права доступа для правила\nPermission::addPolicy('writer', 'articles','edit');\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Constructor Injection in a Controller\nDESCRIPTION: This PHP class demonstrates how to use constructor injection to inject a Mailer service into a UserController.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/tr/di.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\nuse app\\service\\Mailer;\n\nclass UserController\n{\n    private $mailer;\n\n    public function __construct(Mailer $mailer)\n    {\n        $this->mailer = $mailer;\n    }\n\n    public function register(Request $request)\n    {\n        $this->mailer->mail('hello@webman.com', 'Merhaba ve hoş geldiniz!');\n        return response('ok');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Exception Handler Interface Implementation\nDESCRIPTION: Interface definition for exception handlers showing required methods for logging and rendering responses\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/pt/exception.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\ninterface ExceptionHandlerInterface\n{\n    /**\n     * Log the error\n     * @param Throwable $e\n     * @return mixed\n     */\n    public function report(Throwable $e);\n\n    /**\n     * Render the response\n     * @param Request $request\n     * @param Throwable $e\n     * @return Response\n     */\n    public function render(Request $request, Throwable $e) : Response;\n}\n```\n\n----------------------------------------\n\nTITLE: Logging with Specified Channel in Webman (PHP)\nDESCRIPTION: This snippet demonstrates how to use the `Log` class to log a message to a specific channel. The `channel()` method is used to specify the channel name, and the `info()` method is used to log an informational message.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/es/app/log.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse support\\Log;\nLog::channel('plugin.admin.default')->info('test');\n```\n\n----------------------------------------\n\nTITLE: Installing webman/console\nDESCRIPTION: Installs the webman/console package using Composer. This command adds the `webman/console` package and its dependencies to your webman project.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/plugin/console.md#2025-04-12_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n\"composer require webman/console\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Model Observer for User Model\nDESCRIPTION: Implements a model observer for the User model by overriding the boot method and registering the UserObserver class. Requires additional installation of illuminate/events package.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/pt/db/model.md#2025-04-12_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\model;\n\nuse support\\Model;\nuse app\\observer\\UserObserver;\n\nclass User extends Model\n{\n    public static function boot()\n    {\n        parent::boot();\n        static::observe(UserObserver::class);\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring Event Subscriptions in PHP\nDESCRIPTION: Example configuration file (config/event.php) showing how to subscribe to events by mapping event names to handler functions.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/components/event.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nreturn [\n    'user.register' => [\n        [app\\event\\User::class, 'register'],\n        // ...其它事件处理函数...\n    ],\n    'user.logout' => [\n        [app\\event\\User::class, 'logout'],\n        // ...其它事件处理函数...\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Using Advanced Where Clauses in PHP Database Queries\nDESCRIPTION: This snippet shows advanced where clause usage including whereBetween, whereNotBetween, whereIn, whereNull, and date-based where clauses.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/tr/db/queries.md#2025-04-12_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('kullanıcılar')\n           ->whereBetween('oylar', [1, 100])\n           ->get();\n\n$users = Db::table('kullanıcılar')\n                    ->whereNotBetween('oylar', [1, 100])\n                    ->get();\n\n$users = Db::table('kullanıcılar')\n                    ->whereIn('id', [1, 2, 3])\n                    ->get();\n\n$users = Db::table('kullanıcılar')\n                    ->whereNull('güncelleme_tarihi')\n                    ->get();\n\n$users = Db::table('kullanıcılar')\n                ->whereDate('oluşturma_tarihi', '2016-12-31')\n                ->get();\n\n$users = Db::table('kullanıcılar')\n                ->whereColumn('ilk_isim', 'son_isim')\n                ->get();\n\n$users = Db::table('kullanıcılar')\n           ->where('ad', '=', 'John')\n           ->where(function ($sorgu) {\n               $sorgu->where('oylar', '>', 100)\n                     ->orWhere('unvan', '=', 'Yönetici');\n           })\n           ->get();\n\n$users = Db::table('kullanıcılar')\n           ->whereExists(function ($sorgu) {\n               $sorgu->select(Db::raw(1))\n                     ->from('siparişler')\n                     ->whereRaw('siparişler.kullanıcı_id = kullanıcılar.id');\n           })\n           ->get();\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Queue Connection\nDESCRIPTION: Configuration file for Redis queue connection with authentication, database, and retry settings\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/th/queue/redis.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'default' => [\n        'host' => 'redis://127.0.0.1:6379',\n        'options' => [\n            'auth' => '',\n            'db' => 0,\n            'max_attempts'  => 5,\n            'retry_seconds' => 5\n        ]\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Redis Configuration in Webman\nDESCRIPTION: Example Redis configuration file (config/redis.php) showing how to set up the default Redis connection with server details.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/db/redis.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'default' => [\n        'host'     => '127.0.0.1',\n        'password' => null,\n        'port'     => 6379,\n        'database' => 0,\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Single Value from Database in webman-php\nDESCRIPTION: Query to retrieve a single value from a specific field of a filtered row. This example gets the 'email' value from a user with name 'John'.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/db/queries.md#2025-04-12_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$email = Db::table('users')->where('name', 'John')->value('email');\n```\n\n----------------------------------------\n\nTITLE: Making HTTP Requests with Workerman HTTP Client in Webman PHP\nDESCRIPTION: This code shows how to make an HTTP request using the `workerman/http-client` package within a webman controller.  It initializes a client and performs a synchronous (but non-blocking) GET request to an external URL, returning the body of the response.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/fr/coroutine/fiber.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace app\\controller;\n\nuse support\\Request;\nuse Workerman\\Http\\Client;\n\nclass TestController\n{\n    public function index(Request $request)\n    {\n        static $client;\n        $client = $client ?: new Client();\n        $response = $client->get('http://example.com'); // Envoyer une requête asynchrone de manière synchrone\n        return $response->getBody()->getContents();\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Getting a Single Value With Webman DB Query Builder\nDESCRIPTION: This snippet retrieves a single value ('email') from the 'users' table where the 'name' is 'John'.  `value()` returns a single scalar value or null if no matching record is found.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/db/queries.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$email = Db::table('users')->where('name', 'John')->value('email');\n```\n\n----------------------------------------\n\nTITLE: Using Session Helper Function in Webman\nDESCRIPTION: These code snippets demonstrate the usage of the `session()` helper function in webman, which provides a convenient way to interact with session data. It showcases how to get the session instance, retrieve a value, and assign values to the session using the helper function, offering equivalent functionality to using `$request->session()`.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/session.md#2025-04-12_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n// 获取session实例\n$session = session();\n// 等价于\n$session = $request->session();\n\n// 获取某个值\n$value = session('key', 'default');\n// 等价与\n$value = session()->get('key', 'default');\n// 等价于\n$value = $request->session()->get('key', 'default');\n\n// 给session赋值\nsession(['key1'=>'value1', 'key2' => 'value2']);\n// 相当于\nsession()->put(['key1'=>'value1', 'key2' => 'value2']);\n// 相当于\n$request->session()->put(['key1'=>'value1', 'key2' => 'value2']);\n```\n\n----------------------------------------\n\nTITLE: Creating Custom MySQL Config Command\nDESCRIPTION: Example implementation of a custom command that displays MySQL configuration information. The command extends Symfony Console Command and uses Table helper for formatted output.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/plugin/console.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace app\\command;\n\nuse Symfony\\Component\\Console\\Command\\Command;\nuse Symfony\\Component\\Console\\Helper\\Table;\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\n\nclass ConfigMySQLCommand extends Command\n{\n    protected static $defaultName = 'config:mysql';\n    protected static $defaultDescription = 'Display current MySQL server configuration';\n\n    protected function execute(InputInterface $input, OutputInterface $output)\n    {\n        $output->writeln('MySQL configuration information is as follows:');\n        $config = config('database');\n        $headers = ['name', 'default', 'driver', 'host', 'port', 'database', 'username', 'password', 'unix_socket', 'charset', 'collation', 'prefix', 'strict', 'engine', 'schema', 'sslmode'];\n        $rows = [];\n        foreach ($config['connections'] as $name => $db_config) {\n            $row = [];\n            foreach ($headers as $key) {\n                switch ($key) {\n                    case 'name':\n                        $row[] = $name;\n                        break;\n                    case 'default':\n                        $row[] = $config['default'] == $name ? 'true' : 'false';\n                        break;\n                    default:\n                        $row[] = $db_config[$key] ?? '';\n                }\n            }\n            if ($config['default'] == $name) {\n                array_unshift($rows, $row);\n            } else {\n                $rows[] = $row;\n            }\n        }\n        $table = new Table($output);\n        $table->setHeaders($headers);\n        $table->setRows($rows);\n        $table->render();\n        return self::SUCCESS;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Route Middleware Configuration in PHP\nDESCRIPTION: This snippet configures middleware for specific routes or route groups. It allows to apply middleware to only certain routes, providing more granular control over request processing.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-hk/middleware.md#2025-04-12_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n\"<?php\nuse support\\Request;\nuse Webman\\Route;\n\nRoute::any('/admin', [app\\admin\\controller\\IndexController::class, 'index'])->middleware([\n    app\\middleware\\MiddlewareA::class,\n    app\\middleware\\MiddlewareB::class,\n]);\n\nRoute::group('/blog', function () {\n   Route::any('/create', function () {return response('create');});\n   Route::any('/edit', function () {return response('edit');});\n   Route::any('/view/{id}', function ($r, $id) {response(\"view $id\");});\n})->middleware([\n    app\\middleware\\MiddlewareA::class,\n    app\\middleware\\MiddlewareB::class,\n]);\"\n```\n\n----------------------------------------\n\nTITLE: Multiple Redis Connections Configuration\nDESCRIPTION: Configuration example for multiple Redis connections with different databases\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/db/redis.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'default' => [\n        'host'     => '127.0.0.1',\n        'password' => null,\n        'port'     => 6379,\n        'database' => 0,\n    ],\n\n    'cache' => [\n        'host'     => '127.0.0.1',\n        'password' => null,\n        'port'     => 6379,\n        'database' => 1,\n    ],\n\n];\n```\n\n----------------------------------------\n\nTITLE: Casbin Basic Model Configuration\nDESCRIPTION: This configuration file defines the Casbin model using a basic RBAC setup. It includes sections for request definition, policy definition, role definition, policy effect, and matchers. This model defines how access control rules are evaluated.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/casbin.md#2025-04-12_snippet_2\n\nLANGUAGE: conf\nCODE:\n```\n\"[request_definition]\nr = sub, obj, act\n\n[policy_definition]\np = sub, obj, act\n\n[role_definition]\ng = _, _\n\n[policy_effect]\ne = some(where (p.eft == allow))\n\n[matchers]\nm = g(r.sub, p.sub) && r.obj == p.obj && r.act == p.act\"\n```\n\n----------------------------------------\n\nTITLE: Accessing Static Files in Webman PHP Plugins\nDESCRIPTION: Demonstrates the URL mapping pattern for accessing static files stored in plugin directories. Files placed in plugin/{plugin}/public are accessible via the URL pattern http://127.0.0.1:8787/app/{plugin}/{filename}.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/app/static.md#2025-04-12_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nplugin/{plugin}/public\n```\n\n----------------------------------------\n\nTITLE: Capturing Output in PHP for Response\nDESCRIPTION: This snippet shows how to capture output using output buffering and send it as a response, useful for libraries that print directly to standard output.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/response.md#2025-04-12_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace app\\controller;\n\nuse support\\Request;\n\nclass ImageController\n{\n    public function get(Request $request)\n    {\n        // 創建圖像\n        $im = imagecreatetruecolor(120, 20);\n        $text_color = imagecolorallocate($im, 233, 14, 91);\n        imagestring($im, 1, 5, 5,  'A Simple Text String', $text_color);\n\n        // 開始獲取輸出\n        ob_start();\n        // 輸出圖像\n        imagejpeg($im);\n        // 獲得圖像內容\n        $image = ob_get_clean();\n        \n        // 發送圖像\n        return response($image)->header('Content-Type', 'image/jpeg');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Where Clauses in WebMan PHP Query Builder\nDESCRIPTION: Shows various ways to add WHERE conditions to queries, including comparisons, BETWEEN, IN, NULL checks, and date comparisons.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/jp/db/queries.md#2025-04-12_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')->where('votes', '=', 100)->get();\n\n$users = Db::table('users')->where('votes', 100)->get();\n\n$users = Db::table('users')\n                ->where('votes', '>=', 100)\n                ->get();\n\n$users = Db::table('users')\n                ->where('votes', '<>', 100)\n                ->get();\n\n$users = Db::table('users')\n                ->where('name', 'like', 'T%')\n                ->get();\n```\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')->where([\n    ['status', '=', '1'],\n    ['subscribed', '<>', '1'],\n])->get();\n```\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')\n                    ->where('votes', '>', 100)\n                    ->orWhere('name', 'John')\n                    ->get();\n```\n\nLANGUAGE: php\nCODE:\n```\n// SQL: select * from users where votes > 100 or (name = 'Abigail' and votes > 50)\n$users = Db::table('users')\n            ->where('votes', '>', 100)\n            ->orWhere(function($query) {\n                $query->where('name', 'Abigail')\n                      ->where('votes', '>', 50);\n            })\n            ->get();\n```\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')\n           ->whereBetween('votes', [1, 100])\n           ->get();\n```\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')\n                    ->whereNotBetween('votes', [1, 100])\n                    ->get();\n```\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')\n                    ->whereIn('id', [1, 2, 3])\n                    ->get();\n```\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')\n                    ->whereNull('updated_at')\n                    ->get();\n```\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')\n                ->whereDate('created_at', '2016-12-31')\n                ->get();\n```\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')\n                ->whereColumn('first_name', 'last_name')\n                ->get();\n                \n// You can also specify a comparison operator\n$users = Db::table('users')\n                ->whereColumn('updated_at', '>', 'created_at')\n                ->get();\n                \n// The whereColumn method can also be passed an array\n$users = Db::table('users')\n                ->whereColumn([\n                    ['first_name', '=', 'last_name'],\n                    ['updated_at', '>', 'created_at'],\n                ])->get();\n```\n\n----------------------------------------\n\nTITLE: Pessimistic Database Locking\nDESCRIPTION: Implements shared locks and update locks to prevent concurrent modifications\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/db/queries.md#2025-04-12_snippet_40\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')->where('votes', '>', 100)->sharedLock()->get();\n\nDb::table('users')->where('votes', '>', 100)->lockForUpdate()->get();\n```\n\n----------------------------------------\n\nTITLE: Implementing Event Subscriber\nDESCRIPTION: Implementation of an event subscriber class that handles the LogErrorWriteEvent\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/event.md#2025-04-12_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nnamespace extend\\event\\subscriber;\n\nuse extend\\event\\LogErrorWriteEvent;\nuse Symfony\\Component\\EventDispatcher\\EventSubscriberInterface;\n\nclass LoggerSubscriber implements EventSubscriberInterface\n{\n    /**\n     * @desc: 方法描述\n     * @return array|string[]\n     */\n    public static function getSubscribedEvents()\n    {\n        return [\n            LogErrorWriteEvent::NAME => 'onLogErrorWrite',\n        ];\n    }\n\n    /**\n     * @desc: 触发事件\n     * @param LogErrorWriteEvent $event\n     */\n    public function onLogErrorWrite(LogErrorWriteEvent $event)\n    {\n        // 一些具体的业务逻辑\n        var_dump($event->handle());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Super Global Middleware in PHP\nDESCRIPTION: This code demonstrates how to configure super-global middleware in Webman's `config/middleware.php` file using the `'@'` key. Super-global middleware affects the main project and all plugins.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/middleware.md#2025-04-12_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    '@' => [ // Add global middleware to the main project and all plugins\n        app\\middleware\\MiddlewareGlobl::class,\n    ], \n    '' => [], // Add global middleware to the main project only\n];\n```\n\n----------------------------------------\n\nTITLE: Using Raw Expressions with Db::raw in Webman DB Query Builder\nDESCRIPTION: This snippet uses `Db::raw()` to create a raw SQL expression for calculating the total sales per department and filtering results using `havingRaw()`. `Db::raw()` allows direct SQL input and should be used carefully to prevent SQL injection, as it does not automatically escape parameters.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/db/queries.md#2025-04-12_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$orders = Db::table('orders')\n                ->select('department', Db::raw('SUM(price) as total_sales'))\n                ->groupBy('department')\n                ->havingRaw('SUM(price) > ?', [2500])\n                ->get();\n```\n\n----------------------------------------\n\nTITLE: BusinessException Example in Webman PHP\nDESCRIPTION: Demonstrates the use of a BusinessException to interrupt a request with a specific error message when input validation fails in a controller action.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/fr/exception.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\nuse support\\exception\\BusinessException;\n\nclass FooController\n{\n    public function index(Request $request)\n    {\n        $this->checkInput($request->post());\n        return response('hello index');\n    }\n    \n    protected function checkInput($input)\n    {\n        if (!isset($input['token'])) {\n            throw new BusinessException('Erreur de paramètre', 3000);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Model Query Examples\nDESCRIPTION: Demonstrates various query methods including basic retrieval, constraints, and cursor usage.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/db/model.md#2025-04-12_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$users = app\\model\\User::all();\n\nforeach ($users as $user) {\n    echo $user->name;\n}\n```\n\nLANGUAGE: php\nCODE:\n```\n$users = app\\model\\User::where('name', 'like', '%tom')\n               ->orderBy('uid', 'desc')\n               ->limit(10)\n               ->get();\n```\n\nLANGUAGE: php\nCODE:\n```\nforeach (app\\model\\User::where('sex', 1')->cursor() as $user) {\n    //\n}\n```\n\n----------------------------------------\n\nTITLE: Storing Single Session Value in Webman\nDESCRIPTION: Shows how to store a single value in the session using the set method. Session data is automatically saved when the session object is destroyed.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/fr/session.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$session = $request->session();\n$session->set('name', 'tom');\n```\n\n----------------------------------------\n\nTITLE: Initializing Payment SDK Configuration\nDESCRIPTION: Code snippet showing how to initialize the payment SDK by loading the configuration file and passing it to the Pay::config method.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-hk/components/payment.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// 获取配置文件 config/payment.php\n$config = Config::get('payment');\nPay::config($config);\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Callback Handling for Alipay\nDESCRIPTION: This code handles asynchronous callbacks from Alipay. It retrieves the configuration, initializes the Pay SDK, and calls the `Pay::alipay()->callback()` method to process the callback data. It then performs verification steps on the callback data and returns a success response using the Webman `Response` class.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/components/payment.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse support\\Request;\nuse Webman\\Config;\nuse Yansongda\\Pay\\Pay;\n\n/**\n * @desc:『支付宝』异步通知\n * @param Request $request\n * @return Response\n */\npublic function alipayNotify(Request $request): Response\n{\n    // 1. 获取配置文件 config/payment.php\n    $config = Config::get('payment');\n\n    // 2. 初始化配置\n    Pay::config($config);\n\n    // 3. 支付宝回调处理\n    $result = Pay::alipay()->callback($request->post());\n\n    // ===================================================================================================\n    // 请自行对 trade_status 进行判断及其它逻辑进行判断，只有交易通知状态为 TRADE_SUCCESS 或 TRADE_FINISHED 时，支付宝才会认定为买家付款成功。\n    // 1、商户需要验证该通知数据中的out_trade_no是否为商户系统中创建的订单号；\n    // 2、判断total_amount是否确实为该订单的实际金额（即商户订单创建时的金额）；\n    // 3、校验通知中的seller_id（或者seller_email) 是否为out_trade_no这笔单据的对应的操作方；\n    // 4、验证app_id是否为该商户本身。\n    // 5、其它业务逻辑情况\n    // ===================================================================================================\n\n    // 5. 支付宝回调处理\n    return new Response(200, [], 'success');\n}\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Events in PHP\nDESCRIPTION: This snippet defines a LoggerSubscriber class that implements the EventSubscriberInterface. It defines which events to subscribe to and the corresponding handling method.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-hk/event.md#2025-04-12_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace extend\\event\\subscriber;\n\nuse extend\\event\\LogErrorWriteEvent;\nuse Symfony\\Component\\EventDispatcher\\EventSubscriberInterface;\n\nclass LoggerSubscriber implements EventSubscriberInterface\n{\n    /**\n     * @desc: 方法描述\n     * @return array|string[]\n     */\n    public static function getSubscribedEvents()\n    {\n        return [\n            LogErrorWriteEvent::NAME => 'onLogErrorWrite',\n        ];\n    }\n\n    /**\n     * @desc: 觸發事件\n     * @param LogErrorWriteEvent $event\n     */\n    public function onLogErrorWrite(LogErrorWriteEvent $event)\n    {\n        // 一些具體的業務邏輯\n        var_dump($event->handle());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Models with Query Conditions\nDESCRIPTION: Shows how to delete multiple models that match query conditions, returning the number of affected rows.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/tr/db/model.md#2025-04-12_snippet_32\n\nLANGUAGE: php\nCODE:\n```\n$deletedRows = app\\modle\\Flight::where('active', 0)->delete();\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Non-Blocking HTTP Request\nDESCRIPTION: Implements an asynchronous HTTP client using Workerman's HTTP client to make non-blocking network requests, improving application performance and concurrency\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/es/coroutine/fiber.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace app\\controller;\n\nuse support\\Request;\nuse Workerman\\Http\\Client;\n\nclass TestController\n{\n    public function index(Request $request)\n    {\n        static $client;\n        $client = $client ?: new Client();\n        $response = $client->get('http://example.com');\n        return $response->getBody()->getContents();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Exceptions in Middleware in PHP\nDESCRIPTION: This code shows how to retrieve exceptions that occur during the request handling process within middleware using `$response->exception()`.  This allows middleware to handle or log exceptions.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/middleware.md#2025-04-12_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\middleware;\n\nuse Webman\\MiddlewareInterface;\nuse Webman\\Http\\Response;\nuse Webman\\Http\\Request;\n\nclass Hello implements MiddlewareInterface\n{\n    public function process(Request $request, callable $handler) : Response\n    {\n        $response = $handler($request);\n        $exception = $response->exception();\n        if ($exception) {\n            echo $exception->getMessage();\n        }\n        return $response;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Replicating Eloquent Models\nDESCRIPTION: Demonstrates how to use the replicate method to create an unsaved duplicate of a model instance, optionally modifying some attributes in the process.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/tr/db/model.md#2025-04-12_snippet_33\n\nLANGUAGE: php\nCODE:\n```\n$shipping = App\\Address::create([\n    'type' => 'shipping',\n    'line_1' => '123 Örnek Sokak',\n    'city' => 'Victorville',\n    'state' => 'CA',\n    'postcode' => '90001',\n]);\n\n$billing = $shipping->replicate()->fill([\n    'type' => 'fatura'\n]);\n\n$billing->save();\n```\n\n----------------------------------------\n\nTITLE: Listening to Events in PHP\nDESCRIPTION: This snippet configures the event listener for the LogErrorWriteEvent, linking the event name to its class, thus allowing it to respond to events triggered.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-hk/event.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    // 事件監聽\n    'listener'    => [\n        \\extend\\event\\LogErrorWriteEvent::NAME  => \\extend\\event\\LogErrorWriteEvent::class,\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Log Configuration with Rotating File Handler\nDESCRIPTION: Configures log handlers and formatters for default logging channel using Monolog's RotatingFileHandler and LineFormatter. Specifies log file path, debug level, and timestamp format.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-hk/log.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'default' => [\n        'handlers' => [\n            [   \n                'class' => Monolog\\Handler\\RotatingFileHandler::class,\n                'constructor' => [\n                    runtime_path() . '/logs/webman.log',\n                    Monolog\\Logger::DEBUG,\n                ],\n                'formatter' => [\n                    'class' => Monolog\\Formatter\\LineFormatter::class,\n                    'constructor' => [ null, 'Y-m-d H:i:s', true],\n                ],\n            ]\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Basic Redis Usage Example\nDESCRIPTION: Example controller demonstrating basic Redis set and get operations\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/db/redis.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\nuse support\\Redis;\n\nclass UserController\n{\n    public function db(Request $request)\n    {\n        $key = 'test_key';\n        Redis::set($key, rand());\n        return response(Redis::get($key));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple Redis Connections Configuration\nDESCRIPTION: Configuration example for multiple Redis connections with different databases\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/pt/db/redis.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'default' => [\n        'host'     => '127.0.0.1',\n        'password' => null,\n        'port'     => 6379,\n        'database' => 0,\n    ],\n\n    'cache' => [\n        'host'     => '127.0.0.1',\n        'password' => null,\n        'port'     => 6379,\n        'database' => 1,\n    ],\n]\n```\n\n----------------------------------------\n\nTITLE: Defining Guarded Attributes in PHP\nDESCRIPTION: This snippet shows how to define the `$guarded` property in a model, which specifies which attributes should *not* be mass-assigned.  It acts as a \"blacklist\" for mass assignment. You can only use `$fillable` or `$guarded`, not both.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/fr/db/model.md#2025-04-12_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace app\\model;\n\nuse support\\Model;\n\nclass Flight extends Model\n{\n    /**\n     * Attributs non autorisés pour les affectations de masse.\n     *\n     * @var array\n     */\n    protected $guarded = ['price'];\n}\n\n```\n\n----------------------------------------\n\nTITLE: Implementing ExceptionHandlerInterface in Webman PHP\nDESCRIPTION: This code defines the ExceptionHandlerInterface that must be implemented by exception handler classes in Webman.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/tr/exception.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\ninterface ExceptionHandlerInterface\n{\n    /**\n     * Log\n     * @param Throwable $e\n     * @return mixed\n     */\n    public function report(Throwable $e);\n\n    /**\n     * Render the response\n     * @param Request $request\n     * @param Throwable $e\n     * @return Response\n     */\n    public function render(Request $request, Throwable $e) : Response;\n}\n```\n\n----------------------------------------\n\nTITLE: Using firstOrCreate and firstOrNew Methods in Eloquent ORM\nDESCRIPTION: Demonstrates how to use firstOrCreate to find a record or create one if it doesn't exist, and firstOrNew to find a record or instantiate a new model without saving it. Both methods support searching by attributes and defining additional attributes for creation.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/db/model.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// 通过 name 检索航班，不存在则创建...\n$flight = app\\modle\\Flight::firstOrCreate(['name' => 'Flight 10']);\n\n// 通过 name 检索航班，或使用 name 和 delayed 属性和 arrival_time 属性创建...\n$flight = app\\modle\\Flight::firstOrCreate(\n    ['name' => 'Flight 10'],\n    ['delayed' => 1, 'arrival_time' => '11:30']\n);\n\n// 通过 name 检索航班，不存在则创建一个实例...\n$flight = app\\modle\\Flight::firstOrNew(['name' => 'Flight 10']);\n\n// 通过 name 检索航班，或使用 name 和 delayed 属性和 arrival_time 属性创建一个模型实例...\n$flight = app\\modle\\Flight::firstOrNew(\n    ['name' => 'Flight 10'],\n    ['delayed' => 1, 'arrival_time' => '11:30']\n);\n```\n\n----------------------------------------\n\nTITLE: Using Basic Where Clauses in webman-php\nDESCRIPTION: Examples of basic where clauses with different operators. These queries demonstrate various comparison operations including equality, greater than, not equal, and LIKE patterns.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/db/queries.md#2025-04-12_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')->where('votes', '=', 100)->get();\n\n// Когда оператор равен, его можно опустить, поэтому это выражение эквивалентно предыдущему\n$users = Db::table('users')->where('votes', 100)->get();\n\n$users = Db::table('users')\n                ->where('votes', '>=', 100)\n                ->get();\n\n$users = Db::table('users')\n                ->where('votes', '<>', 100)\n                ->get();\n\n$users = Db::table('users')\n                ->where('name', 'like', 'T%')\n                ->get();\n```\n\n----------------------------------------\n\nTITLE: Using Multiple Redis Connections\nDESCRIPTION: This code snippet shows how to configure multiple Redis connections in the config/redis.php file by defining various connection parameters for different Redis instances.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-hk/db/redis.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'default' => [\n        'host'     => '127.0.0.1',\n        'password' => null,\n        'port'     => 6379,\n        'database' => 0,\n    ],\n\n    'cache' => [\n        'host'     => '127.0.0.1',\n        'password' => null,\n        'port'     => 6379,\n        'database' => 1,\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Task Processes in Webman\nDESCRIPTION: Example of configuring multiple task processes in the Webman config/process.php file for better task isolation.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/jp/components/crontab.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    ....その他の設定は省略....\n  \n    'task1'  => [\n        'handler'  => process\\Task1::class\n    ],\n    'task2'  => [\n        'handler'  => process\\Task2::class\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Retrieving Plugin Configuration in PHP\nDESCRIPTION: Demonstrates how to access a specific plugin's configuration using the config() function. This method can be used by the main project or other plugins to retrieve configurations of a particular plugin.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/app/config.md#2025-04-12_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nconfig('plugin.{plugin}.{specific_config}');\n```\n\nLANGUAGE: PHP\nCODE:\n```\nconfig('plugin.foo.app')\n```\n\nLANGUAGE: PHP\nCODE:\n```\nconfig('plugin.foo.xxx')\n```\n\n----------------------------------------\n\nTITLE: Cross-Origin Access Control Middleware in PHP\nDESCRIPTION: Implements a middleware for handling cross-origin resource sharing (CORS) by adding appropriate headers to responses. Handles OPTIONS preflight requests and sets Access-Control headers dynamically.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/th/middleware.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nclass AccessControlTest implements MiddlewareInterface\n{\n    public function process(Request $request, callable $handler) : Response\n    {\n        $response = $request->method() == 'OPTIONS' ? response('') : $handler($request);\n        \n        $response->withHeaders([\n            'Access-Control-Allow-Credentials' => 'true',\n            'Access-Control-Allow-Origin' => $request->header('origin', '*'),\n            'Access-Control-Allow-Methods' => $request->header('access-control-request-method', '*'),\n            'Access-Control-Allow-Headers' => $request->header('access-control-request-headers', '*'),\n        ]);\n        \n        return $response;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Finding First Model with 'firstOrFail' in PHP\nDESCRIPTION: This snippet retrieves the first model matching a condition and throws an exception if no model is found. It uses `firstOrFail()`. If no matching model is found, an `Illuminate\\Database\\Eloquent\\ModelNotFoundException` is thrown.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/fr/db/model.md#2025-04-12_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$model = app\\model\\Flight::where('legs', '>', 100)->firstOrFail();\n```\n\n----------------------------------------\n\nTITLE: Multi-application Directory Structure\nDESCRIPTION: Demonstrates a typical directory structure for a webman application with multiple sub-applications (shop, api, admin). Each sub-application has its own controllers, models, and views.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-hk/multiapp.md#2025-04-12_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n\"app\n├── shop\n│   ├── controller\n│   ├── model\n│   └── view\n├── api\n│   ├── controller\n│   └── model\n└── admin\n    ├── controller\n    ├── model\n    └── view\"\n```\n\n----------------------------------------\n\nTITLE: Finding Multiple Models by Primary Keys in Eloquent\nDESCRIPTION: Demonstrates how to retrieve multiple models by passing an array of primary keys to the find() method.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/db/model.md#2025-04-12_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n$flights = app\\model\\Flight::find([1, 2, 3]);\n```\n\n----------------------------------------\n\nTITLE: Business Exception Controller Example\nDESCRIPTION: Example of using BusinessException in a controller for parameter validation\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/jp/exception.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\nuse support\\exception\\BusinessException;\n\nclass FooController\n{\n    public function index(Request $request)\n    {\n        $this->chackInpout($request->post());\n        return response('hello index');\n    }\n    \n    protected function chackInpout($input)\n    {\n        if (!isset($input['token'])) {\n            throw new BusinessException('パラメーターエラー', 3000);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Ordering, Grouping, and Limiting Results in PHP Database Queries\nDESCRIPTION: This code demonstrates how to order, group, and limit query results using methods like orderBy, groupBy, having, offset, and limit.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/tr/db/queries.md#2025-04-12_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('kullanıcılar')\n                ->orderBy('ad', 'desc')\n                ->get();\n\n$randomUser = Db::table('kullanıcılar')\n                ->inRandomOrder()\n                ->first();\n\n$users = Db::table('kullanıcılar')\n                ->groupBy('hesap_id')\n                ->having('hesap_id', '>', 100)\n                ->get();\n\n$users = Db::table('kullanıcılar')\n                ->offset(10)\n                ->limit(5)\n                ->get();\n```\n\n----------------------------------------\n\nTITLE: Implementing Event Handling Class in PHP\nDESCRIPTION: This code defines an event handling class User with methods for handling user.register and user.logout events. It demonstrates how to create event handlers as class methods.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/tr/components/event.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\event;\nclass User\n{\n    function register($user)\n    {\n        var_export($user);\n    }\n \n    function logout($user)\n    {\n        var_export($user);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Wildcard Event Handler in PHP\nDESCRIPTION: This snippet shows how to implement a wildcard event handler method that can process multiple events. It demonstrates accessing the specific event name in the handler.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/tr/components/event.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\event;\nclass User\n{\n    function deal($user, $event_name)\n    {\n        echo $event_name; // Özel olay adı, örneğin user.register user.logout vb.\n        var_export($user);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Redis Pipeline Commands\nDESCRIPTION: Example of using Redis pipeline for executing multiple commands in a single operation\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/db/redis.md#2025-04-12_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nRedis::pipeline(function ($pipe) {\n    for ($i = 0; $i < 1000; $i++) {\n        $pipe->set(\"key:$i\", $i);\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Closure-based Event Handling in PHP\nDESCRIPTION: This code shows how to use a closure function as an event handler in the config/event.php file. It demonstrates setting up a handler for the user.login event.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/tr/components/event.md#2025-04-12_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\nreturn [\n    'user.login' => [\n        function($user){\n            var_dump($user);\n        }\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: WHERE-Klauseln mit dem Query Builder in PHP\nDESCRIPTION: Diese Snippets demonstrieren verschiedene Arten von WHERE-Klauseln, einschließlich Vergleichsoperatoren, LIKE, IN, BETWEEN und NULL-Prüfungen.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/de/db/queries.md#2025-04-12_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')->where('votes', '=', 100)->get();\n\n$users = Db::table('users')->where('votes', 100)->get();\n\n$users = Db::table('users')\n                ->where('votes', '>=', 100)\n                ->get();\n\n$users = Db::table('users')\n                ->where('votes', '<>', 100)\n                ->get();\n\n$users = Db::table('users')\n                ->where('name', 'like', 'T%')\n                ->get();\n\n$users = Db::table('users')->where([\n    ['status', '=', '1'],\n    ['subscribed', '<>', '1'],\n])->get();\n\n$users = Db::table('users')\n                    ->where('votes', '>', 100)\n                    ->orWhere('name', 'John')\n                    ->get();\n\n$users = Db::table('users')\n            ->where('votes', '>', 100)\n            ->orWhere(function($query) {\n                $query->where('name', 'Abigail')\n                      ->where('votes', '>', 50);\n            })\n            ->get();\n\n$users = Db::table('users')\n           ->whereBetween('votes', [1, 100])\n           ->get();\n\n$users = Db::table('users')\n                    ->whereNotBetween('votes', [1, 100])\n                    ->get();\n\n$users = Db::table('users')\n                    ->whereIn('id', [1, 2, 3])\n                    ->get();\n\n$users = Db::table('users')\n                    ->whereNull('updated_at')\n                    ->get();\n\n$users = Db::table('users')\n                    ->whereNotNull('updated_at')\n                    ->get();\n\n$users = Db::table('users')\n                ->whereDate('created_at', '2016-12-31')\n                ->get();\n\n$users = Db::table('users')\n                ->whereColumn('first_name', 'last_name')\n                ->get();\n                \n$users = Db::table('users')\n                ->whereColumn('updated_at', '>', 'created_at')\n                ->get();\n                \n$users = Db::table('users')\n                ->whereColumn([\n                    ['first_name', '=', 'last_name'],\n                    ['updated_at', '>', 'created_at'],\n                ])->get();\n\n$users = Db::table('users')\n           ->where('name', '=', 'John')\n           ->where(function ($query) {\n               $query->where('votes', '>', 100)\n                     ->orWhere('title', '=', 'Admin');\n           })\n           ->get();\n\n$users = Db::table('users')\n           ->whereExists(function ($query) {\n               $query->select(Db::raw(1))\n                     ->from('orders')\n                     ->whereRaw('orders.user_id = users.id');\n           })\n           ->get();\n```\n\n----------------------------------------\n\nTITLE: Permission Enforcement Check in Webman\nDESCRIPTION: Example code showing how to perform authorization checks using the Permission::enforce method to determine if a user has specific permissions.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-hk/casbin.md#2025-04-12_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nif (Permission::enforce(\"eve\", \"articles\", \"edit\")) {\n    // permit eve to edit articles\n} else {\n    // deny the request, show an error\n}\n```\n\n----------------------------------------\n\nTITLE: Multi-Database Configuration for Medoo in Webman\nDESCRIPTION: Configuration example for multiple database connections in Medoo, including connection pool settings and database credentials for different instances.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/db/medoo.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nreturn [\n    'default' => [\n        'type' => 'mysql',\n        'host' => 'localhost',\n        'database' => 'database',\n        'username' => 'username',\n        'password' => 'password',\n        'charset' => 'utf8mb4',\n        'collation' => 'utf8mb4_general_ci',\n        'port' => 3306,\n        'prefix' => '',\n        'logging' => false,\n        'error' => PDO::ERRMODE_EXCEPTION,\n        'option' => [\n            PDO::ATTR_CASE => PDO::CASE_NATURAL\n        ],\n        'command' => [\n            'SET SQL_MODE=ANSI_QUOTES'\n        ],\n        'pool' => [\n            'max_connections' => 5,\n            'min_connections' => 1,\n            'wait_timeout' => 60,\n            'idle_timeout' => 3,\n            'heartbeat_interval' => 50,\n        ]\n    ],\n    'other' => [\n        'type' => 'mysql',\n        'host' => 'localhost',\n        'database' => 'database',\n        'username' => 'username',\n        'password' => 'password',\n        'charset' => 'utf8mb4',\n        'collation' => 'utf8mb4_general_ci',\n        'port' => 3306,\n        'prefix' => '',\n        'logging' => false,\n        'error' => PDO::ERRMODE_EXCEPTION,\n        'option' => [\n            PDO::ATTR_CASE => PDO::CASE_NATURAL\n        ],\n        'command' => [\n            'SET SQL_MODE=ANSI_QUOTES'\n        ],\n        'pool' => [\n            'max_connections' => 5,\n            'min_connections' => 1,\n            'wait_timeout' => 60,\n            'idle_timeout' => 3,\n            'heartbeat_interval' => 50,\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Performing Aggregate Operations\nDESCRIPTION: Examples of using aggregate functions like count, max, min, avg, and sum\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/db/queries.md#2025-04-12_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')->count();\n$price = Db::table('orders')->max('price');\n$price = Db::table('orders')->where('finalized', 1)->avg('price');\n```\n\n----------------------------------------\n\nTITLE: Channel-Specific Logging Methods\nDESCRIPTION: Shows how to use logging methods with a specific channel instance.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/log.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$log = Log::channel('default');\n$log->log($level, $message, array $context = [])\n$log->debug($message, array $context = [])\n$log->info($message, array $context = [])\n$log->notice($message, array $context = [])\n$log->warning($message, array $context = [])\n$log->error($message, array $context = [])\n$log->critical($message, array $context = [])\n$log->alert($message, array $context = [])\n$log->emergency($message, array $context = [])\n```\n\n----------------------------------------\n\nTITLE: Application Middleware Configuration in Webman PHP\nDESCRIPTION: This code shows how to configure application-specific middleware in Webman PHP's multi-app mode. It defines global middleware and middleware specific to the 'api' application, enhancing modularity and control over request handling.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/middleware.md#2025-04-12_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n\"return [\n    // 全局中间件\n    '' => [\n        app\\middleware\\AuthCheckTest::class,\n        app\\middleware\\AccessControlTest::class,\n    ],\n    // api应用中间件(应用中间件仅在多应用模式下有效)\n    'api' => [\n        app\\middleware\\ApiOnly::class,\n    ]\n];\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Redis Queue Consumer\nDESCRIPTION: Consumer class implementation for processing messages from a specific Redis queue connection, demonstrating queue name specification and connection selection.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/fr/queue/redis.md#2025-04-12_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nnamespace app\\queue\\redis;\n\nuse Webman\\RedisQueue\\Consumer;\n\nclass SendMail implements Consumer\n{\n    // Queue name to consume\n    public $queue = 'send-mail';\n\n    // === Set this to 'other' to consume from the queue with key 'other' in the consumption configuration ===\n    public $connection = 'other';\n\n    // Consume\n    public function consume($data)\n    {\n        // No need for deserialization\n        var_export($data);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using think-validate Validator\nDESCRIPTION: Example demonstrating how to use the think-validate validator to check data against defined rules\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/components/validation.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$data = [\n    'name' => 'thinkphp',\n    'email' => 'thinkphp@qq.com',\n];\n\n$validate = new \\app\\index\\validate\\User;\n\nif (!$validate->check($data)) {\n    var_dump($validate->getError());\n}\n```\n\n----------------------------------------\n\nTITLE: Consumo de Mensajes STOMP con webman/stomp\nDESCRIPTION: Este código muestra cómo implementar un consumidor de mensajes STOMP utilizando webman/stomp. La clase implementa la interfaz `Consumer`, define la cola a la que se suscribe, la conexión a utilizar, y el modo de confirmación (ack). El método `consume` procesa los datos recibidos y, si el modo de confirmación es 'client', confirma el consumo exitoso.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/es/queue/stomp.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n```php\n<?php\nnamespace app\\queue\\stomp;\n\nuse Workerman\\Stomp\\AckResolver;\nuse Webman\\Stomp\\Consumer;\n\nclass MyMailSend implements Consumer\n{\n    // Nombre de la cola\n    public $queue = 'ejemplos';\n\n    // Nombre de la conexión, en correspondencia con la conexión en stomp.php\n    public $connection = 'default';\n\n    // Si el valor es 'client', se debe llamar a $ack_resolver->ack() para notificar al servidor que se ha consumido exitosamente\n    // Si el valor es 'auto', no es necesario llamar a $ack_resolver->ack()\n    public $ack = 'auto';\n\n    // Consumir\n    public function consume($data, AckResolver $ack_resolver = null)\n    {\n        // Si los datos son un array, es necesario deserializarlos manualmente\n        var_export(json_decode($data, true)); // imprime ['to' => 'tom@gmail.com', 'content' => 'hello']\n        // Notificar al servidor que se ha consumido exitosamente\n        $ack_resolver->ack(); // cuando ack es 'auto', este paso puede omitirse\n    }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: ThinkPHP ORM Pagination Implementation\nDESCRIPTION: Example of implementing pagination using ThinkPHP's ORM with custom page size and path configuration.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/de/db/paginator.md#2025-04-12_snippet_5\n\nLANGUAGE: php\nCODE:\n```\npublic function index(Request $request)\n{\n    $per_page = 10;\n    $users = Db::table('user')->paginate(['list_rows' => $per_page, 'page' => $request->get('page', 1), 'path' => $request->path()]);\n    return view('index/index', ['users' => $users]);\n}\n```\n\n----------------------------------------\n\nTITLE: Using whereIn Clauses With Webman DB Query Builder\nDESCRIPTION: This snippet demonstrates how to use `whereIn`, `whereNotIn` to filter results based on values existing in an array. `whereIn` selects records where the 'id' is in array [1, 2, 3].\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/db/queries.md#2025-04-12_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')\n                    ->whereIn('id', [1, 2, 3])\n                    ->get();\n```\n\n----------------------------------------\n\nTITLE: Returning a View in Webman\nDESCRIPTION: This code snippet demonstrates how to return a view from a Webman controller, passing data to the view. It retrieves the 'name' parameter from the GET request and passes it to the 'user/hello' view.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-hk/tutorial.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\n\nclass UserController\n{\n    public function hello(Request $request)\n    {\n        $default_name = 'webman';\n        $name = $request->get('name', $default_name);\n        return view('user/hello', ['name' => $name]);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Updating Existing Eloquent Models - PHP\nDESCRIPTION: Illustrates how to update an existing user model in the database by modifying its attributes and using the save method. Shows that update timestamps are managed automatically by Eloquent when the $timestamps property is true.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/db/model.md#2025-04-12_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n$user = app\\model\\User::find(1);\n$user->name = 'jerry';\n$user->save();\n```\n\n----------------------------------------\n\nTITLE: Utilizzo dei codici di errore generati in un servizio PHP\nDESCRIPTION: Esempio di come utilizzare i codici di errore generati automaticamente all'interno di una classe di servizio.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/components/generate_error_code.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * Classe di servizio per operazioni correlate alla navigazione\n */\n\nnamespace app\\service;\n\nuse app\\model\\Demo as DemoModel;\n\n// Inclusione del file della classe ErrorCode\nuse support\\ErrorCode;\n\nclass Demo\n{\n    /**\n     * Aggiunta\n     * @param $data\n     * @return array|mixed\n     * @throws \\exception\n     */\n    public function add($data): array\n    {\n        try {\n            $demo = new DemoModel();\n            foreach ($data as $key => $value) {\n                $demo->$key = $value;\n            }\n\n            $demo->save();\n\n            return $demo->getData();\n        } catch (\\Throwable $e) {\n            // Stampa messaggi di errore\n            throw_http_exception($e->getMessage(), ErrorCode::ModelAddOptionsError);\n        }\n        return [];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting a Single Record in webman-php\nDESCRIPTION: Using insert to add a single record to a database table. This example inserts a new user with email and votes fields.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/db/queries.md#2025-04-12_snippet_32\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')->insert(\n    ['email' => 'john@example.com', 'votes' => 0]\n);\n```\n\n----------------------------------------\n\nTITLE: UserController with Redis Example\nDESCRIPTION: This PHP snippet demonstrates a UserController class that utilizes Redis to set a random value for a key and retrieve it, showcasing basic Redis operations within a web controller context.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-hk/db/redis.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\nuse support\\Redis;\n\nclass UserController\n{\n    public function db(Request $request)\n    {\n        $key = 'test_key';\n        Redis::set($key, rand());\n        return response(Redis::get($key));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Main Project Redis Connections in Webman PHP\nDESCRIPTION: This snippet shows how to use Redis connections defined in the main project's configuration. It demonstrates accessing the default connection and an additional 'cache' connection if configured in the main project.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/jp/app/redis.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse support\\Redis;\nRedis::get('key');\n// メインプロジェクトでcache接続も設定されていると仮定します\nRedis::connection('cache')->get('key');\n```\n\n----------------------------------------\n\nTITLE: Custom Business Exception Implementation\nDESCRIPTION: Implementation of a custom business exception class with specialized response rendering\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/jp/exception.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace app\\exception;\n\nuse support\\exception\\BusinessException;\nuse Webman\\Http\\Request;\nuse Webman\\Http\\Response;\n\nclass MyBusinessException extends BusinessException\n{\n    public function render(Request $request): ?Response\n    {\n        // JSONリクエストではJSONデータを返す\n        if ($request->expectsJson()) {\n            return json(['code' => $this->getCode() ?: 500, 'message' => $this->getMessage()]);\n        }\n        // JSON以外のリクエストではページを返す\n        return new Response(200, [], $this->getMessage());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Left Join in Webman PHP\nDESCRIPTION: This snippet shows how to perform a left join operation using the leftJoin method.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/hi/db/queries.md#2025-04-12_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')\n            ->leftJoin('posts', 'users.id', '=', 'posts.user_id')\n            ->get();\n```\n\n----------------------------------------\n\nTITLE: Using Raw Expressions for Complex Queries in webman-php\nDESCRIPTION: Example of using Db::raw() and other raw methods for complex queries. This query calculates sum of prices by department with a having clause using parameter binding.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/db/queries.md#2025-04-12_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n$orders = Db::table('orders')\n                ->select('department', Db::raw('SUM(price) as total_sales'))\n                ->groupBy('department')\n                ->havingRaw('SUM(price) > ?', [2500])\n                ->get();\n\n```\n\n----------------------------------------\n\nTITLE: Implementing an Aspect Class in PHP\nDESCRIPTION: DebugAspect class that defines the interception logic for the UserService.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/aop.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\aspect;\n\nuse app\\service\\UserService;\nuse Hyperf\\Di\\Aop\\AbstractAspect;\nuse Hyperf\\Di\\Aop\\ProceedingJoinPoint;\n\nclass DebugAspect extends AbstractAspect\n{\n    public $classes = [\n        UserService::class . '::first',\n    ];\n\n    public function process(ProceedingJoinPoint $proceedingJoinPoint)\n    {\n        var_dump(11);\n        return $proceedingJoinPoint->process();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing WeChat Payment Gateway in PHP\nDESCRIPTION: Example PHP class demonstrating WeChat Pay integration using Yansongda Pay SDK. Includes configuration, payment processing, and notification handling.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/jp/components/pay.md#2025-04-12_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nnamespace App\\Http\\Controllers;\n\nuse Yansongda\\Pay\\Pay;\nuse Yansongda\\Pay\\Log;\n\nclass PayController\n{\n    protected $config = [\n        'appid' => 'wxb3fxxxxxxxxxxx', // APP APPID\n        'app_id' => 'wxb3fxxxxxxxxxxx', // パブリック号 APPID\n        'miniapp_id' => 'wxb3fxxxxxxxxxxx', // ミニアプリ APPID\n        'mch_id' => '14577xxxx',\n        'key' => 'mF2suE9sU6Mk1Cxxxxxxxxxxx',\n        'notify_url' => 'http://yanda.net.cn/notify.php',\n        'cert_client' => './cert/apiclient_cert.pem', // optional，返金などで使用します\n        'cert_key' => './cert/apiclient_key.pem',// optional，返金などで使用します\n        'log' => [ // optional\n            'file' => './logs/wechat.log',\n            'level' => 'info', // 本番環境ではレベルを info に変更することをお勧めします。開発環境ではデバッグにします\n            'type' => 'single', // optional, dailyを選択できます\n            'max_file' => 30, // optional, dailyの場合有効、デフォルトは30日です\n        ],\n        'http' => [ // optional\n            'timeout' => 5.0,\n            'connect_timeout' => 5.0,\n            // 他の設定項目については [Guzzle](https://guzzle-cn.readthedocs.io/zh_CN/latest/request-options.html) を参照してください\n        ],\n        'mode' => 'dev', // optional, dev/hk; 'hk' の場合は香港ゲートウェイになります。\n    ];\n\n    public function index()\n    {\n        $order = [\n            'out_trade_no' => time(),\n            'total_fee' => '1', // **単位：分**\n            'body' => 'test body - テスト',\n            'openid' => 'onkVf1FjWS5SBIixxxxxxx',\n        ];\n\n        $pay = Pay::wechat($this->config)->mp($order);\n\n        // $pay->appId\n        // $pay->timeStamp\n        // $pay->nonceStr\n        // $pay->package\n        // $pay->signType\n    }\n\n    public function notify()\n    {\n        $pay = Pay::wechat($this->config);\n\n        try{\n            $data = $pay->verify(); // はい、これほど簡単に検証します！\n\n            Log::debug('Wechat notify', $data->all());\n        } catch (\\Exception $e) {\n            // $e->getMessage();\n        }\n        \n        return $pay->success()->send();// laravel フレームワークでは、`return $pay->success()`を直接使用してください\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Performing Joins in PHP Database Queries\nDESCRIPTION: This code demonstrates various types of joins including inner join, left join, right join, and cross join in database queries.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/tr/db/queries.md#2025-04-12_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')\n            ->join('contacts', 'users.id', '=', 'contacts.user_id')\n            ->join('orders', 'users.id', '=', 'orders.user_id')\n            ->select('users.*', 'contacts.phone', 'orders.price')\n            ->get();\n\n$users = Db::table('users')\n            ->leftJoin('posts', 'users.id', '=', 'posts.user_id')\n            ->get();\n\n$users = Db::table('users')\n            ->rightJoin('posts', 'users.id', '=', 'posts.user_id')\n            ->get();\n\n$users = Db::table('sizes')\n            ->crossJoin('colors')\n            ->get();\n```\n\n----------------------------------------\n\nTITLE: Incrementing and Decrementing in WebMan PHP Query Builder\nDESCRIPTION: Shows how to increment or decrement numeric fields in the database.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/jp/db/queries.md#2025-04-12_snippet_20\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')->increment('votes');\n\nDb::table('users')->increment('votes', 5);\n\nDb::table('users')->decrement('votes');\n\nDb::table('users')->decrement('votes', 5);\n```\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')->increment('votes', 1, ['name' => 'John']);\n```\n\n----------------------------------------\n\nTITLE: Redis Usage in Webman Plugin\nDESCRIPTION: Examples of how to use Redis connections within a Webman plugin, showing both plugin-specific and main project connection usage\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/plugin/app.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse support\\Redis;\nRedis::connection('plugin.cms.default')->get('key');\nRedis::connection('plugin.cms.cache')->get('key');\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Rows from a Table in WebMan PHP\nDESCRIPTION: Example of fetching all records from the 'users' table using the query builder and passing them to a view.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/jp/db/queries.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\nuse support\\Db;\n\nclass UserController\n{\n    public function all(Request $request)\n    {\n        $users = Db::table('users')->get();\n        return view('user/all', ['users' => $users]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Использование метасимволов для прослушивания событий в Webman\nDESCRIPTION: Настройка прослушивателя метасимволов для обработки нескольких событий в одном прослушивателе.  Слушатель получает как данные пользователя, так и конкретное имя события.  Это позволяет создавать общие функции обработки для связанных событий.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/components/event.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nreturn [\n    'user.*' => [\n        [app\\event\\User::class, 'deal']\n    ],\n];\n```\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\event;\nclass User\n{\n    function deal($user, $event_name)\n    {\n        echo $event_name; // конкретное название события, например, user.register или user.logout и так далее\n        var_export($user);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Selecting Specific Columns in Webman PHP\nDESCRIPTION: This snippet demonstrates how to select specific columns from a database table using the select method.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/hi/db/queries.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')->select('name', 'email as user_email')->get();\n```\n\n----------------------------------------\n\nTITLE: Using Raw Expressions with Parameter Binding in webman-php\nDESCRIPTION: Using selectRaw() to create raw SQL expressions with parameter binding. This example calculates price with tax using a parameterized multiplication expression.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/db/queries.md#2025-04-12_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n$orders = Db::table('orders')\n                ->selectRaw('price * ? as price_with_tax', [1.0825])\n                ->get();\n\n```\n\n----------------------------------------\n\nTITLE: Emitting Events in Controller\nDESCRIPTION: Example of how to emit events from a controller class using Event::emit() method.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/vi/components/event.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\nuse support\\Request;\nuse Webman\\Event\\Event;\nclass User\n{\n    public function register(Request $request)\n    {\n        $user = [\n            'name' => 'webman',\n            'age' => 2\n        ];\n        Event::emit('user.register', $user);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: MemReport with Process Name Check\nDESCRIPTION: This modified `MemReport` class includes a check for the process name. If the process name is 'monitor', the timer setup is skipped.  This prevents the memory usage reporting from running in the 'monitor' process.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/es/others/bootstrap.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace app\\bootstrap;\n\nuse Webman\\Bootstrap;\n\nclass MemReport implements Bootstrap\n{\n    public static function start($worker)\n    {\n        // ¿Es un entorno de línea de comandos?\n        $is_console = !$worker;\n        if ($is_console) {\n            // Si no quieres que esta inicialización se ejecute en un entorno de línea de comandos, simplemente devuelve aquí.\n            return;\n        }\n        \n        // El proceso monitor no ejecuta un temporizador\n        if ($worker->name == 'monitor') {\n            return;\n        }\n        \n        // Ejecutar cada 10 segundos\n        \\Workerman\\Timer::add(10, function () {\n            // Para propósitos de demostración, aquí utilizamos la salida en lugar de un informe real.\n            echo memory_get_usage() . \"\\n\";\n        });\n        \n    }\n\n}\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving Single Model Records with find, first, and firstWhere in PHP\nDESCRIPTION: Demonstrates how to fetch individual model records using primary keys or conditions. These methods return a single model instance instead of a collection.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/es/db/model.md#2025-04-12_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n// Buscar un modelo por clave primaria...\n$flight = app\\model\\Flight::find(1);\n\n// Buscar el primer modelo que cumpla con la condición de la consulta...\n$flight = app\\model\\Flight::where('activo', 1)->first();\n\n// Búsqueda rápida del primer modelo que cumpla con la condición de la consulta...\n$flight = app\\model\\Flight::firstWhere('activo', 1);\n```\n\n----------------------------------------\n\nTITLE: Removing Duplicates in WebMan PHP Query Builder\nDESCRIPTION: Demonstrates how to retrieve distinct values from a column.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/jp/db/queries.md#2025-04-12_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$email = Db::table('user')->select('nickname')->distinct()->get();\n```\n\n----------------------------------------\n\nTITLE: Generate ThinkORM Model using CLI\nDESCRIPTION: Command line instruction to generate a ThinkORM model using Webman's make:model command\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/pt/db/thinkorm.md#2025-04-12_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nphp webman make:model nome_da_tabela\n```\n\n----------------------------------------\n\nTITLE: Initializing ClassLoader in start.php\nDESCRIPTION: This PHP code snippet initializes the ClassLoader from the Hyperf AopIntegration package. This is crucial for enabling AOP functionality within the Webman application.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/th/aop.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n\"<?php\\nuse Hyperf\\AopIntegration\\ClassLoader;\\n\\nif ($timezone = config('app.default_timezone')) {\\n    date_default_timezone_set($timezone);\\n}\\n\\n// การเริ่มต้น\\nClassLoader::init();\\n\"\n```\n\n----------------------------------------\n\nTITLE: New Session Handler Namespace\nDESCRIPTION: Example showing the new namespace imports for session handlers in Webman 1.4\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/upgrade/1-4.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Webman\\Session\\FileSessionHandler;  \nuse Webman\\Session\\RedisSessionHandler;  \nuse Webman\\Session\\RedisClusterSessionHandler;\n```\n\n----------------------------------------\n\nTITLE: Client Connection Establishment with WSS\nDESCRIPTION: This snippet demonstrates how to establish a client-side WebSocket connection using WSS for secure communication, emphasizing proper configuration for SSL.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/plugin/push.md#2025-04-12_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar connection = new Push({\n    url: 'wss://example.com',\n    app_key: '<app_key，在config/plugin/webman/push/app.php里获取>',\n    auth: '/plugin/webman/push/auth' // 订阅鉴权(仅限于私有频道)\n});\n```\n\n----------------------------------------\n\nTITLE: Deleting Records - PHP\nDESCRIPTION: Shows how to delete records in the 'users' table based on different conditions. This can be used for clearing data or managing state within the database effectively.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/pt/db/queries.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')->delete();\n\nDb::table('users')->where('votes', '>', 100)->delete();\n```\n\n----------------------------------------\n\nTITLE: Creating IndexController Class\nDESCRIPTION: This PHP code defines a controller class IndexController with a json() method that uses the UserService to retrieve data and returns a JSON response. It demonstrates how the AOP aspect affects the execution of the UserService's method.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/aop.md#2025-04-12_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n\"<?php\\nnamespace app\\controller;\\n\\nuse app\\service\\UserService;\\nuse support\\Request;\\n\\nclass IndexController\\n{\\n    public function json(Request $request)\\n    {\\n        return json(['code' => 0, 'msg' => 'ok', 'data' => (new UserService())->first()]);\\n    }\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Using Multiple Database Instances with Medoo\nDESCRIPTION: Example of how to query data using a specific database instance with Medoo. Demonstrates using the instance() method to select a non-default database connection.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/db/medoo.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$user = Medoo::instance('other')->get('user', '*', ['uid' => 1]);\n```\n\n----------------------------------------\n\nTITLE: Handling Session Data in Webman PHP Controller\nDESCRIPTION: Example of setting and retrieving session data in a Webman PHP controller. Uses the Request object to access the session.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/session.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\n\nclass UserController\n{\n    public function hello(Request $request)\n    {\n        $name = $request->get('name');\n        $session = $request->session();\n        $session->set('name', $name);\n        return response('hello ' . $session->get('name'));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Exception Handler Configuration for Multi-applications\nDESCRIPTION: Demonstrates how to configure different exception handlers for different applications using `config/exception.php`. This allows for customizing error handling based on the application, such as displaying a user-friendly page for the shop or returning a JSON string for the API.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-hk/multiapp.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n\"return [\n    'shop' => support\\exception\\Handler::class,\n    'api' => support\\exception\\ApiHandler::class,\n];\n\"\n```\n\n----------------------------------------\n\nTITLE: Using firstOr Method with Column Selection in Eloquent\nDESCRIPTION: Demonstrates how to use firstOr with specific column selection and a fallback callback in Eloquent queries.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/db/model.md#2025-04-12_snippet_22\n\nLANGUAGE: php\nCODE:\n```\n$model = app\\modle\\Flight::where('legs', '>', 100)\n            ->firstOr(['id', 'legs'], function () {\n                // ...\n            });\n```\n\n----------------------------------------\n\nTITLE: Defining MailerInterface interface\nDESCRIPTION: This defines a MailerInterface which declares the mail method. It allows for programming to an interface instead of a concrete class.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-hk/di.md#2025-04-12_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n\"<?php\nnamespace app\\service;\n\ninterface MailerInterface\n{\n    public function mail($email, $content);\n}\"\n```\n\n----------------------------------------\n\nTITLE: OrWhere Clause with Webman PHP\nDESCRIPTION: This code snippet demonstrates how to use the `orWhere()` clause in the Webman PHP framework's database query builder.  It allows adding an additional condition that is combined with previous conditions using an OR operator.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/fr/db/queries.md#2025-04-12_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')\n                    ->where('votes', '>', 100)\n                    ->orWhere('name', 'John')\n                    ->get();\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Redis Connections in Webman PHP\nDESCRIPTION: Example of configuring multiple Redis connections in Webman PHP's config/redis.php file.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/tr/db/redis.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'default' => [\n        'host'     => '127.0.0.1',\n        'password' => null,\n        'port'     => 6379,\n        'database' => 0,\n    ],\n\n    'cache' => [\n        'host'     => '127.0.0.1',\n        'password' => null,\n        'port'     => 6379,\n        'database' => 1,\n    ],\n]\n```\n\n----------------------------------------\n\nTITLE: Using Permission Management Functions\nDESCRIPTION: Example of using Permission class methods to manage user permissions and roles.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/casbin.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse webman\\permission\\Permission;\n\n// adds permissions to a user\nPermission::addPermissionForUser('eve', 'articles', 'read');\n// adds a role for a user.\nPermission::addRoleForUser('eve', 'writer');\n// adds permissions to a rule\nPermission::addPolicy('writer', 'articles','edit');\n```\n\n----------------------------------------\n\nTITLE: Using Aggregate Functions in webman-php\nDESCRIPTION: Queries demonstrating aggregate functions like count, max, and avg. These examples show how to get the total number of users, maximum price, and average price of finalized orders.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/db/queries.md#2025-04-12_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')->count();\n$price = Db::table('orders')->max('price');\n$price = Db::table('orders')->where('finalized', 1)->avg('price');\n```\n\n----------------------------------------\n\nTITLE: Performing Aggregations in PHP Database Queries\nDESCRIPTION: This snippet demonstrates various aggregation methods like count, max, min, avg, and sum in database queries.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/tr/db/queries.md#2025-04-12_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')->count();\n$price = Db::table('orders')->max('price');\n$price = Db::table('orders')->where('finalized', 1)->avg('price');\n```\n\n----------------------------------------\n\nTITLE: Resourceful Route Definition in PHP Webman\nDESCRIPTION: Example of setting up resourceful routing with controller and specific actions\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/route.md#2025-04-12_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nRoute::resource('/test', app\\controller\\IndexController::class);\n\n// Specify resource routes\nRoute::resource('/test', app\\controller\\IndexController::class, ['index','create']);\n```\n\n----------------------------------------\n\nTITLE: Finding a Model by Primary Key in PHP\nDESCRIPTION: This snippet demonstrates how to retrieve a model instance from the database using its primary key.  It uses the `find()` method on the model. It returns a single model instance or null if not found.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/fr/db/model.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$vol = app\\model\\Flight::find(1);\n```\n\n----------------------------------------\n\nTITLE: Proper Context Usage in Coroutine Environment\nDESCRIPTION: Shows the correct way to store request-specific data using Context class to avoid data pollution in coroutine environment.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/jp/upgrade/1-5.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace app\\controller;\n\nuse support\\Request;\nuse support\\Context;\nuse Workerman\\Timer;\n\nclass TestController\n{\n    public function index(Request $request)\n    {\n        Context::set('name', $request->get('name'));\n        Timer::sleep(5);\n        return Context::get('name');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sorting Results Using Subqueries in Eloquent\nDESCRIPTION: Demonstrates how to use subqueries in orderBy to sort results based on related data in another table.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/db/model.md#2025-04-12_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nreturn Destination::orderByDesc(\n    Flight::select('arrived_at')\n        ->whereColumn('destination_id', 'destinations.id')\n        ->orderBy('arrived_at', 'desc')\n        ->limit(1)\n)->get();\n```\n\n----------------------------------------\n\nTITLE: Using Main Project Database in Webman PHP Plugin\nDESCRIPTION: This snippet demonstrates how to use the main project's database connections within a Webman PHP plugin. It shows querying tables from the default and named connections.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/tr/app/database.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse support\\Db;\nDb::table('user')->first();\n// Varsayalım ana projede admin bağlantısı da yapılandırıldı\nDb::connection('admin')->table('admin')->first();\n```\n\n----------------------------------------\n\nTITLE: Debugging Database Queries in PHP\nDESCRIPTION: Shows how to debug database queries using dd() and dump() methods. The dd() method displays debugging information and pauses the request, while dump() displays information without stopping execution. Requires the symfony/var-dumper package.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/tr/db/queries.md#2025-04-12_snippet_25\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')->where('votes', '>', 100)->dd();\nDb::table('users')->where('votes', '>', 100)->dump();\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Message Delivery in Redis Queue\nDESCRIPTION: Shows asynchronous message delivery using Redis queue client with immediate and delayed options\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/queue/redis.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Webman\\RedisQueue\\Client;\n\n$queue = 'send-mail';\n$data = ['to' => 'tom@gmail.com', 'content' => 'hello'];\n\n// Asynchronous immediate message delivery\nClient::send($queue, $data);\n\n// Asynchronous delayed message delivery\nClient::send($queue, $data, 60);\n```\n\n----------------------------------------\n\nTITLE: Pessimistic Locking With Webman DB Query Builder\nDESCRIPTION: This snippet demonstrates pessimistic locking using `sharedLock()` and `lockForUpdate()`.  `sharedLock()` prevents data from being modified until the transaction is committed. `lockForUpdate()` prevents rows from being modified or selected by other shared locks.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/db/queries.md#2025-04-12_snippet_31\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')->where('votes', '>', 100)->sharedLock()->get();\n```\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')->where('votes', '>', 100)->lockForUpdate()->get();\n```\n\n----------------------------------------\n\nTITLE: Middleware Configuration\nDESCRIPTION: Configuration for adding language middleware globally\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/components/translation.md#2025-04-12_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    // 全局中间件\n    '' => [\n        // ... 这里省略其它中间件\n        app\\middleware\\Lang::class,\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Returning View Response in PHP\nDESCRIPTION: This snippet shows how to return a view response using the view() helper function in a Webman controller and the corresponding HTML template.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/response.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\n\nclass FooController\n{\n    public function hello(Request $request)\n    {\n        return view('foo/hello', ['name' => 'webman']);\n    }\n}\n```\n\nLANGUAGE: html\nCODE:\n```\n<!doctype html>\n<html>\n<head>\n    <meta charset=\"utf-8\">\n    <title>webman</title>\n</head>\n<body>\nhello <?=htmlspecialchars($name)?>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Using Redis Pipeline in webman-php\nDESCRIPTION: Example of using Redis pipeline to execute multiple commands in a single operation.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/de/db/redis.md#2025-04-12_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nRedis::pipeline(function ($pipe) {\n    for ($i = 0; $i < 1000; $i++) {\n        $pipe->set(\"key:$i\", $i);\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementazione paginazione con ORM Laravel in PHP\nDESCRIPTION: Esempio di come utilizzare la paginazione di Illuminate/database in un controller WebMan. Mostra come ottenere risultati paginati dal database e passarli alla vista.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/db/paginator.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\npublic function index(Request $request)\n{\n    $per_page = 10;\n    $users = Db::table('user')->paginate($per_page);\n    return view('index/index', ['users' => $users]);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Aspect Class\nDESCRIPTION: Debug aspect implementation that intercepts UserService methods\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/aop.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\aspect;\n\nuse app\\service\\UserService;\nuse Hyperf\\Di\\Aop\\AbstractAspect;\nuse Hyperf\\Di\\Aop\\ProceedingJoinPoint;\n\nclass DebugAspect extends AbstractAspect\n{\n    public $classes = [\n        UserService::class . '::first',\n    ];\n\n    public function process(ProceedingJoinPoint $proceedingJoinPoint)\n    {\n        var_dump(11);\n        return $proceedingJoinPoint->process();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Captcha Verification Method\nDESCRIPTION: PHP method to validate user-submitted captcha against stored session value with error handling\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/fr/components/captcha.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\npublic function check(Request $request)\n{\n    $captcha = $request->post('captcha');\n    if (strtolower($captcha) !== $request->session()->get('captcha')) {\n        return json(['code' => 400, 'msg' => 'Le captcha saisi est incorrect']);\n    }\n    return json(['code' => 0, 'msg' => 'ok']);\n}\n```\n\n----------------------------------------\n\nTITLE: OrWhere with Anonymous Function Webman PHP\nDESCRIPTION: This code snippet demonstrates how to use an anonymous function with the `orWhere()` clause in the Webman PHP framework's database query builder. It allows for grouping multiple `where` conditions within the `orWhere` clause.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/fr/db/queries.md#2025-04-12_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n// SQL: select * from users where votes > 100 or (name = 'Abigail' and votes > 50)\n$users = Db::table('users')\n            ->where('votes', '>', 100)\n            ->orWhere(function($query) {\n                $query->where('name', 'Abigail')\n                      ->where('votes', '>', 50);\n            })\n            ->get();\n```\n\n----------------------------------------\n\nTITLE: Implementing Pessimistic Locking - PHP\nDESCRIPTION: Demonstrates the use of shared and exclusive locks when selecting data from the 'users' table, ensuring data consistency during concurrent operations. Useful in situations where data integrity is critical.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/pt/db/queries.md#2025-04-12_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')->where('votes', '>', 100)->sharedLock()->get();\n```\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')->where('votes', '>', 100)->lockForUpdate()->get();\n```\n\n----------------------------------------\n\nTITLE: Implementing Event Handler Class in PHP\nDESCRIPTION: Example of an event handler class implementation with methods for handling user registration and logout events.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/vi/components/event.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\event;\nclass User\n{\n    function register($user)\n    {\n        var_export($user);\n    }\n \n    function logout($user)\n    {\n        var_export($user);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying IndexController\nDESCRIPTION: This PHP code modifies the IndexController to use the UserService and its `first` method. The result is then returned as a JSON response.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/th/aop.md#2025-04-12_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n\"<?php\\nnamespace app\\controller;\\n\\nuse app\\service\\UserService;\\nuse support\\Request;\\n\\nclass IndexController\\n{\\n    public function json(Request $request)\\n    {\\n        return json(['code' => 0, 'msg' => 'ok', 'data' => (new UserService())->first()]);\\n    }\\n}\\n\"\n```\n\n----------------------------------------\n\nTITLE: Redis Cluster Configuration\nDESCRIPTION: This snippet configures Redis server clusters in the config/redis.php file; it allows defining multiple Redis instances for high-availability and load distribution, including proper client settings.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-hk/db/redis.md#2025-04-12_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'clusters' => [\n        'default' => [\n            [\n                'host'     => 'localhost',\n                'password' => null,\n                'port'     => 6379,\n                'database' => 0,\n            ],\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Using Multiple Redis Connections in PHP\nDESCRIPTION: This configuration enables the use of multiple Redis connections in a Webman PHP application. It defines default and cache connection settings including host, password, port, and database index.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/es/db/redis.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'default' => [\n        'host'     => '127.0.0.1',\n        'password' => null,\n        'port'     => 6379,\n        'database' => 0,\n    ],\n    'cache' => [\n        'host'     => '127.0.0.1',\n        'password' => null,\n        'port'     => 6379,\n        'database' => 1,\n    ],\n]\n```\n\n----------------------------------------\n\nTITLE: Inserting Record with Automatic ID\nDESCRIPTION: Inserts a new user record and retrieves the automatically generated ID using insertGetId method\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/db/queries.md#2025-04-12_snippet_34\n\nLANGUAGE: php\nCODE:\n```\n$id = Db::table('users')->insertGetId(\n    ['email' => 'john@example.com', 'votes' => 0]\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Translation in Webman\nDESCRIPTION: Configuration file for setting up translation options in Webman.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/components/translation.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    // Default language\n    'locale' => 'zh_CN',\n    // Fallback languages\n    'fallback_locale' => ['zh_CN', 'en'],\n    // Language files directory\n    'path' => base_path() . '/resource/translations',\n];\n```\n\n----------------------------------------\n\nTITLE: Implementing Javascript Client for Push Service\nDESCRIPTION: Examples of Javascript client implementation including connection setup, channel subscription, and event handling for public channels\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/plugin/push.md#2025-04-12_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<script src=\"/plugin/webman/push/push.js\"> </script>\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Establish a connection\nvar connection = new Push({\n    url: 'ws://127.0.0.1:3131', // websocket address\n    app_key: '<app_key, obtained in config/plugin/webman/push/app.php>',\n    auth: '/plugin/webman/push/auth' // subscription authentication (private channel only)\n});\n// Assuming user uid is 1\nvar uid = 1;\n// Browser listens for messages on the user-1 channel, for user with uid 1\nvar user_channel = connection.subscribe('user-' + uid);\n\n// When the user-1 channel has a message event\nuser_channel.on('message', function(data) {\n    // the message content is in the data\n    console.log(data);\n});\n// When the user-1 channel has a friendApply event\nuser_channel.on('friendApply', function (data) {\n    // data contains information about the friend request\n    console.log(data);\n});\n\n// Assuming the group id is 2\nvar group_id = 2;\n// Browser listens for messages on the group-2 channel, for group 2\nvar group_channel = connection.subscribe('group-' + group_id);\n// When group 2 has a message event\ngroup_channel.on('message', function(data) {\n    // data contains the message content\n    console.log(data);\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing a Controller in Webman PHP Plugin\nDESCRIPTION: This snippet demonstrates how to create a controller class for a Webman PHP plugin. It includes two methods: index and hello, both returning HTTP responses. The controller follows PSR-4 namespace conventions.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/app/controller.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace plugin\\foo\\app\\controller;\n\nuse support\\Request;\n\nclass FooController\n{\n    public function index(Request $request)\n    {\n        return response('ciao index');\n    }\n\n    public function hello(Request $request)\n    {\n        return response('ciao webman');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Existing Record with Eloquent Model\nDESCRIPTION: Shows how to update an existing record in the database by modifying an Eloquent model instance and calling the save() method.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/jp/db/model.md#2025-04-12_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n$user = app\\model\\User::find(1);\n$user->name = 'jerry';\n$user->save();\n```\n\n----------------------------------------\n\nTITLE: Selecting Specific Columns in WebMan PHP Query Builder\nDESCRIPTION: Demonstrates how to select specific columns from a table, including using aliases for column names.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/jp/db/queries.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('user')->select('name', 'email as user_email')->get();\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom HTTP Process in Webman\nDESCRIPTION: Configuration setup for a custom HTTP server process including listener settings, process count, and constructor parameters.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/process.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Workerman\\Worker;\n\nreturn [\n    // ... other configurations are omitted ...\n\n    'my-http' => [\n        'handler' => app\\Server::class,\n        'listen' => 'http://0.0.0.0:8686',\n        'count' => 8, // Number of processes\n        'user' => '',\n        'group' => '',\n        'reusePort' => true,\n        'constructor' => [\n            'request_class' => \\support\\Request::class, // Set request class\n            'logger' => \\support\\Log::channel('default'), // Logger instance\n            'app_path' => app_path(), // Location of app directory\n            'public_path' => public_path() // Location of public directory\n        ]\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Using Raw Expressions in Select in Webman PHP\nDESCRIPTION: This snippet demonstrates how to use raw SQL expressions in select statements using selectRaw method.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/hi/db/queries.md#2025-04-12_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n$orders = Db::table('orders')\n                ->selectRaw('price * ? as price_with_tax', [1.0825])\n                ->get();\n```\n\n----------------------------------------\n\nTITLE: Configuring Event Subscriptions in PHP\nDESCRIPTION: This snippet shows how to configure event subscriptions in the config/event.php file. It demonstrates setting up handlers for 'user.register' and 'user.logout' events.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/components/event.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nreturn [\n    'user.register' => [\n        [app\\event\\User::class, 'register'],\n        // ...altre funzioni di gestione degli eventi...\n    ],\n    'user.logout' => [\n        [app\\event\\User::class, 'logout'],\n        // ...altre funzioni di gestione degli eventi...\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Message Delivery in Redis Queue\nDESCRIPTION: Example of asynchronous message delivery using Client::send() method for non-critical messages.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/queue/redis.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\nuse Webman\\RedisQueue\\Client;\n\nclass Index\n{\n    public function queue(Request $request)\n    {\n        // Queue name\n        $queue = 'send-mail';\n        // Data, can be passed as an array without serialization\n        $data = ['to' => 'tom@gmail.com', 'content' => 'hello'];\n        // Deliver the message\n        Client::send($queue, $data);\n        // Deliver delayed message, to be processed after 60 seconds\n        Client::send($queue, $data, 60);\n\n        return response('redis queue test');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing WebSocket Listener Class in PHP for Webman\nDESCRIPTION: This code defines a WebSocket listener class named Pusher with methods for handling connection events, WebSocket connections, messages, and closures.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/process.md#2025-04-12_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nnamespace app;\n\nuse Workerman\\Connection\\TcpConnection;\n\nclass Pusher\n{\n    public function onConnect(TcpConnection $connection)\n    {\n        echo \"onConnect\\n\";\n    }\n\n    public function onWebSocketConnect(TcpConnection $connection, $http_buffer)\n    {\n        echo \"onWebSocketConnect\\n\";\n    }\n\n    public function onMessage(TcpConnection $connection, $data)\n    {\n        $connection->send($data);\n    }\n\n    public function onClose(TcpConnection $connection)\n    {\n        echo \"onClose\\n\";\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Redis Native Cluster\nDESCRIPTION: This configures the option to use Redis native cluster mode.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/db/redis.md#2025-04-12_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nreturn[\n    'options' => [\n        'cluster' => 'redis',\n    ],\n\n    'clusters' => [\n        // ...\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring Database for Webman PHP Plugin\nDESCRIPTION: This snippet demonstrates how to set up a custom database configuration for a Webman PHP plugin. It defines multiple MySQL connections with different names.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/tr/app/database.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nreturn  [\n    'default' => 'mysql',\n    'connections' => [\n        'mysql' => [ // mysql bağlantı adı\n            'driver'      => 'mysql',\n            'host'        => '127.0.0.1',\n            'port'        => 3306,\n            'database'    => 'veritabanı',\n            'username'    => 'kullanıcı adı',\n            'password'    => 'şifre',\n            'charset'     => 'utf8mb4',\n            'collation'   => 'utf8mb4_general_ci',\n        ],\n        'admin' => [ // admin bağlantı adı\n            'driver'      => 'mysql',\n            'host'        => '127.0.0.1',\n            'port'        => 3306,\n            'database'    => 'veritabanı',\n            'username'    => 'kullanıcı adı',\n            'password'    => 'şifre',\n            'charset'     => 'utf8mb4',\n            'collation'   => 'utf8mb4_general_ci',\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Middleware Constructor Parameters in PHP\nDESCRIPTION: This code demonstrates how to pass parameters to middleware constructors in the configuration file.  It allows you to instantiate the middleware class with specific dependencies or configurations.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-hk/middleware.md#2025-04-12_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n\"return [\n    // 全局中間件\n    '' => [\n        new app\\middleware\\AuthCheckTest($param1, $param2, ...),\n        function(){\n            return new app\\middleware\\AccessControlTest($param1, $param2, ...);\n        },\n    ],\n    // api應用程式中間件（應用程式中間件僅在多應用程式模式下有效）\n    'api' => [\n        app\\middleware\\ApiOnly::class,\n    ]\n];\"\n```\n\n----------------------------------------\n\nTITLE: Listening to an Event in PHP\nDESCRIPTION: This snippet provides the configuration for listening to LogErrorWriteEvent. It maps the event name to the event class, establishing a listener for the event that can respond when it is triggered.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/event.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    // 事件監聽\n    'listener'    => [\n        \\extend\\event\\LogErrorWriteEvent::NAME  => \\extend\\event\\LogErrorWriteEvent::class,\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Implementing Static File Middleware in Webman PHP\nDESCRIPTION: This code snippet shows the implementation of a middleware for handling static files in Webman. It includes functionality to forbid access to hidden files and optionally add cross-origin headers to the response.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/de/static.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace support\\middleware;\n\nuse Webman\\MiddlewareInterface;\nuse Webman\\Http\\Response;\nuse Webman\\Http\\Request;\n\nclass StaticFile implements MiddlewareInterface\n{\n    public function process(Request $request, callable $next) : Response\n    {\n        // Zugriff auf versteckte Dateien, die mit einem Punkt beginnen, verbieten\n        if (strpos($request->path(), '/.') !== false) {\n            return response('<h1>403 verboten</h1>', 403);\n        }\n        /** @var Response $response */\n        $response = $next($request);\n        // Cross-Origin-Header hinzufügen\n        /*$response->withHeaders([\n            'Access-Control-Allow-Origin'      => '*',\n            'Access-Control-Allow-Credentials' => 'true',\n        ]);*/\n        return $response;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Finding a Model with 'where' Condition in PHP\nDESCRIPTION: This snippet retrieves the first model that matches the specified condition using the `where()` and `first()` methods. The `where()` method adds a condition to the query, and `first()` retrieves the first matching record. It returns a single model instance or null if not found.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/fr/db/model.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$vol = app\\model\\Flight::where('active', 1)->first();\n```\n\n----------------------------------------\n\nTITLE: Multiple Database Configuration Example in Webman PHP\nDESCRIPTION: Example configuration showing how to set up multiple MySQL databases and PostgreSQL in the same application. Demonstrates configuration for two MySQL instances (mysql and mysql2) and a PostgreSQL database with their respective connection parameters.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/db/config.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    // Default database\n    'default' => 'mysql',\n    // Various database configurations\n    'connections' => [\n\n        'mysql' => [\n            'driver'      => 'mysql',\n            'host'        => '127.0.0.1',\n            'port'        => 3306,\n            'database'    => 'webman',\n            'username'    => 'webman',\n            'password'    => '',\n            'unix_socket' => '',\n            'charset'     => 'utf8',\n            'collation'   => 'utf8_unicode_ci',\n            'prefix'      => '',\n            'strict'      => true,\n            'engine'      => null,\n        ],\n        \n        'mysql2' => [\n            'driver'      => 'mysql',\n            'host'        => '127.0.0.1',\n            'port'        => 3306,\n            'database'    => 'webman2',\n            'username'    => 'webman2',\n            'password'    => '',\n            'unix_socket' => '',\n            'charset'     => 'utf8',\n            'collation'   => 'utf8_unicode_ci',\n            'prefix'      => '',\n            'strict'      => true,\n            'engine'      => null,\n        ],\n        'pgsql' => [\n            'driver'   => 'pgsql',\n            'host'     => '127.0.0.1',\n            'port'     => 5432,\n            'database' => 'webman',\n            'username' => 'webman',\n            'password' => '',\n            'charset'  => 'utf8',\n            'prefix'   => '',\n            'schema'   => 'public',\n            'sslmode'  => 'prefer',\n        ],\n];\n```\n\n----------------------------------------\n\nTITLE: Using Cursor for Memory-Efficient Eloquent Queries\nDESCRIPTION: Illustrates using the cursor method for memory-efficient iteration over large datasets with Eloquent.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/tr/db/model.md#2025-04-12_snippet_13\n\nLANGUAGE: PHP\nCODE:\n```\nforeach (app\\model\\User::where('sex', 1)->cursor() as $user) {\n    //\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Connection in Webman PHP\nDESCRIPTION: Example configuration for Redis connection in Webman PHP, typically placed in config/redis.php.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/tr/db/redis.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'default' => [\n        'host'     => '127.0.0.1',\n        'password' => null,\n        'port'     => 6379,\n        'database' => 0,\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Getting Server's IP Address - PHP\nDESCRIPTION: This snippet returns the server's current IP address using the `$request->getLocalIp()` method. It is useful for server-side operations where the server's IP is needed.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/request.md#2025-04-12_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$request->getLocalIp();\n```\n\n----------------------------------------\n\nTITLE: Returning JSON Response in PHP\nDESCRIPTION: This snippet shows how to return a JSON response using the json() helper function in a Webman controller.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/response.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\n\nclass FooController\n{\n    public function hello(Request $request)\n    {\n        return json(['code' => 0, 'msg' => 'ok']);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Moving an Uploaded File - Webman PHP\nDESCRIPTION: This snippet shows how to move an uploaded file to a permanent location.  The `move()` method is used to move the uploaded file. It checks if the file is valid before attempting to move it.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/th/request.md#2025-04-12_snippet_22\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\n\nclass UploadController\n{\n    public function file(Request $request)\n    {\n        $file = $request->file('avatar');\n        if ($file && $file->isValid()) {\n            $file->move(public_path().'/files/myfile.'.$file->getUploadExtension());\n            return json(['code' => 0, 'msg' => 'upload success']);\n        }\n        return json(['code' => 1, 'msg' => 'file not found']);\n    }\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Required PHP Functions List\nDESCRIPTION: List of PHP functions that need to be enabled in php.ini for Webman to work properly\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/others/disable-function-check.md#2025-04-12_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nstream_socket_server\nstream_socket_client\npcntl_signal_dispatch\npcntl_signal\npcntl_alarm\npcntl_fork\nposix_getuid\nposix_getpwuid\nposix_kill\nposix_setsid\nposix_getpid\nposix_getpwnam\nposix_getgrnam\nposix_getgid\nposix_setgid\nposix_initgroups\nposix_setuid\nposix_isatty\nproc_open\nproc_get_status\nproc_close\nshell_exec\n```\n\n----------------------------------------\n\nTITLE: Setting Cookies in Webman PHP\nDESCRIPTION: Shows how to set a cookie using the `cookie()` method of the `support\\Response` object.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/pt/response.md#2025-04-12_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\n\nclass FooController\n{\n    public function hello(Request $request)\n    {\n        return response('hello webman')\n        ->cookie('foo', 'valor');\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Language Middleware Implementation\nDESCRIPTION: Middleware for handling language selection per request\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/components/translation.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\middleware;\n\nuse Webman\\MiddlewareInterface;\nuse Webman\\Http\\Response;\nuse Webman\\Http\\Request;\n\nclass Lang implements MiddlewareInterface\n{\n    public function process(Request $request, callable $handler) : Response\n    {\n        locale(session('lang', 'zh_CN'));\n        return $handler($request);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Route Middleware Configuration in Webman PHP\nDESCRIPTION: This code shows how to configure middleware for specific routes or route groups in Webman PHP. Middleware can be assigned to individual routes or applied to a group of routes using the `middleware()` method. The route group example demonstrates applying the same middlewares to all routes under `/blog`.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/middleware.md#2025-04-12_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n\"<?php\nuse support\\Request;\nuse Webman\\Route;\n\nRoute::any('/admin', [app\\admin\\controller\\IndexController::class, 'index'])->middleware([\n    app\\middleware\\MiddlewareA::class,\n    app\\middleware\\MiddlewareB::class,\n]);\n\nRoute::group('/blog', function () {\n   Route::any('/create', function () {return response('create');});\n   Route::any('/edit', function () {return response('edit');});\n   Route::any('/view/{id}', function ($r, $id) {response(\"view $id\");});\n})->middleware([\n    app\\middleware\\MiddlewareA::class,\n    app\\middleware\\MiddlewareB::class,\n]);\"\n```\n\n----------------------------------------\n\nTITLE: Complete Process Configuration Example in Webman's process.php\nDESCRIPTION: This configuration snippet provides a comprehensive example of a process configuration in Webman, including all available options such as handler, listener, count, user, group, and various other settings.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/process.md#2025-04-12_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\nreturn [\n    // ... \n    \n    // websocket_test 為進程名稱\n    'websocket_test' => [\n        // 這裡指定進程類\n        'handler' => app\\Pusher::class,\n        // 監聽的協議 ip 及端口 （可選）\n        'listen'  => 'websocket://0.0.0.0:8888',\n        // 進程數 （可選，預設1）\n        'count'   => 2,\n        // 進程運行使用者 （可選，預設當前使用者）\n        'user'    => '',\n        // 進程運行使用者組 （可選，預設當前使用者組）\n        'group'   => '',\n        // 目前進程是否支持reload （可選，預設true）\n        'reloadable' => true,\n        // 是否開啟reusePort （可選，此選項需要PHP>=7.0，預設為true）\n        'reusePort'  => true,\n        // transport (可選，當需要開啟SSL時設置為ssl，預設為tcp)\n        'transport'  => 'tcp',\n        // context （可選，當transport為是ssl時，需要傳遞證書路徑）\n        'context'    => [], \n        // 進程類構造函數參數，這裡為 process\\Pusher::class 類的構造函數參數 （可選）\n        'constructor' => [],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring Phinx in PHP for Webman Project\nDESCRIPTION: Configuration file (phinx.php) for setting up Phinx in a Webman project. It defines migration paths and database connection details.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/jp/db/migration.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nreturn [\n    \"paths\" => [\n        \"migrations\" => \"database/migrations\",\n        \"seeds\"      => \"database/seeds\"\n    ],\n    \"environments\" => [\n        \"default_migration_table\" => \"phinxlog\",\n        \"default_database\"        => \"dev\",\n        \"default_environment\"     => \"dev\",\n        \"dev\" => [\n            \"adapter\" => \"DB_CONNECTION\",\n            \"host\"    => \"DB_HOST\",\n            \"name\"    => \"DB_DATABASE\",\n            \"user\"    => \"DB_USERNAME\",\n            \"pass\"    => \"DB_PASSWORD\",\n            \"port\"    => \"DB_PORT\",\n            \"charset\" => \"utf8\"\n        ]\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: User Controller Implementation with Authentication\nDESCRIPTION: Controller class demonstrating login handling and protected routes with authentication requirements.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/de/middleware.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\nuse support\\Request;\n\nclass UserController\n{\n    protected $noNeedLogin = ['login'];\n\n    public function login(Request $request)\n    {\n        $request->session()->set('user', ['id' => 10, 'name' => 'webman']);\n        return json(['code' => 0, 'msg' => 'Anmeldung erfolgreich']);\n    }\n\n    public function info()\n    {\n        return json(['code' => 0, 'msg' => 'ok', 'data' => session('user')]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Eloquent Collections to Filter Results\nDESCRIPTION: Demonstrates how to use Eloquent's collection methods to filter query results after retrieval.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/db/model.md#2025-04-12_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n$users = $users->reject(function ($user) {\n    return $user->disabled;\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Webman to use Twig\nDESCRIPTION: This PHP code snippet configures webman to use the Twig template engine by setting the 'handler' option in the `config/view.php` file to the Twig class. It also shows how to pass additional configuration options to Twig.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-hk/view.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n\"<?php\nuse support\\view\\Twig;\n\nreturn [\n    'handler' => Twig::class\n];\n?>\"\n```\n\nLANGUAGE: php\nCODE:\n```\n\"return [\n    'handler' => Twig::class,\n    'options' => [\n        'debug' => false,\n        'charset' => 'utf-8'\n    ]\n];\"\n```\n\n----------------------------------------\n\nTITLE: Creating Think-ORM Model Class in Webman\nDESCRIPTION: Example of defining a User model class that extends Think-ORM's Model base class. Demonstrates how to specify table name and primary key configurations.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/db/thinkorm.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\model;\n\nuse support\\think\\Model;\n\nclass User extends Model\n{\n    /**\n     * The table associated with the model.\n     *\n     * @var string\n     */\n    protected $table = 'user';\n\n    /**\n     * The primary key associated with the table.\n     *\n     * @var string\n     */\n    protected $pk = 'id';\n\n}\n```\n\n----------------------------------------\n\nTITLE: Using Session Helper Function in Webman PHP\nDESCRIPTION: Demonstrates the usage of the session() helper function for various session operations.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/session.md#2025-04-12_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n// Get session instance\n$session = session();\n\n// Get a specific value\n$valore = session('chiave', 'predefinito');\n\n// Assign values to session\nsession(['chiave1'=>'valore1', 'chiave2' => 'valore2']);\n```\n\n----------------------------------------\n\nTITLE: Using firstOr Method for Conditional Record Retrieval\nDESCRIPTION: Demonstrates the firstOr method which returns the first matching record or executes a callback if no record is found. The callback's return value becomes the result.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/es/db/model.md#2025-04-12_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n$model = app\\model\\Flight::where('patas', '>', 100)->firstOr(function () {\n        // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Middleware for Multiple Applications\nDESCRIPTION: This example shows how to configure middleware specific to individual applications (api, admin) as well as global middleware. This configuration resides in `config/middleware.php`.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/es/multiapp.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    // Middleware global\n    '' => [\n        support\\middleware\\AuthCheck::class,\n    ],\n    // Middleware de la aplicación api\n    'api' => [\n         support\\middleware\\AccessControl::class,\n     ],\n    // Middleware de la aplicación admin\n    'admin' => [\n         support\\middleware\\AdminAuthCheck::class,\n         support\\middleware\\SomeOtherClass::class,\n    ],\n];\n\n```\n\n----------------------------------------\n\nTITLE: Using Local Variables for Coroutine-Safe Data Handling in PHP with Webman\nDESCRIPTION: This snippet demonstrates the use of local variables, which are inherently coroutine-safe, to handle request-specific data in a Webman controller.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/upgrade/1-5.md#2025-04-12_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace app\\controller;\n\nuse support\\Request;\nuse support\\Context;\nuse Workerman\\Timer;\n\nclass TestController\n{\n    public function index(Request $request)\n    {\n        $name = $request->get('name');\n        Timer::sleep(5);\n        return $name;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple Redis Configurations\nDESCRIPTION: Configuring multiple Redis connections with different hosts and connection parameters\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/queue/redis.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'default' => [\n        'host' => 'redis://192.168.0.1:6379',\n        'options' => [\n            'auth' => null,\n            'db' => 0,\n            'max_attempts' => 5,\n            'retry_seconds' => 5\n        ]\n    ],\n    'other' => [\n        'host' => 'redis://192.168.0.2:6379',\n        'options' => [\n            'auth' => null,\n            'db' => 0,\n            'max_attempts' => 5,\n            'retry_seconds' => 5\n        ]\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Single Value from a Table in PHP\nDESCRIPTION: This code shows how to retrieve a single value (column) from a table based on a condition using the where() and value() methods.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/tr/db/queries.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$email = Db::table('users')->where('name', 'John')->value('email');\n```\n\n----------------------------------------\n\nTITLE: Publishing Messages to Stomp Queue in PHP\nDESCRIPTION: This snippet demonstrates how to publish messages to a Stomp queue using the Webman\\Stomp\\Client. It includes setting the queue name, preparing the data, and sending the message.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/queue/stomp.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\nuse Webman\\Stomp\\Client;\n\nclass Index\n{\n    public function queue(Request $request)\n    {\n        // 隊列\n        $queue = 'examples';\n        // 數據（傳遞數組時需要自行序列化，比如使用json_encode，serialize等）\n        $data = json_encode(['to' => 'tom@gmail.com', 'content' => 'hello']);\n        // 執行投遞\n        Client::send($queue, $data);\n\n        return response('redis queue test');\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Using Plugin-Specific Database Connections in Webman PHP\nDESCRIPTION: This snippet demonstrates how to use plugin-specific database connections in Webman PHP. It shows querying from both 'mysql' and 'admin' connections of the 'foo' plugin.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/app/database.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse support\\Db;\nDb::connection('plugin.foo.mysql')->table('user')->first();\nDb::connection('plugin.foo.admin')->table('admin')->first();\n```\n\n----------------------------------------\n\nTITLE: Creating Language Package in PHP\nDESCRIPTION: Example of a language file structure and content for English translations.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/components/translation.md#2025-04-12_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n// resource/translations/en/messages.php\n\nreturn [\n    'hello' => 'Hello webman',\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring Monitor Process in Webman (PHP)\nDESCRIPTION: This code snippet shows the configuration for the monitor process in Webman. It defines which directories and file types to monitor, and sets options for enabling file and memory monitoring.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/others/monitor.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nglobal $argv;\n\nreturn [\n    // File update detection and automatic reload\n    'monitor' => [\n        'handler' => process\\Monitor::class,\n        'reloadable' => false,\n        'constructor' => [\n            // Monitor these directories\n            'monitorDir' => array_merge([    // 哪些目錄下的檔案需要被監控\n                app_path(),\n                config_path(),\n                base_path() . '/process',\n                base_path() . '/support',\n                base_path() . '/resource',\n                base_path() . '/.env',\n            ], glob(base_path() . '/plugin/*/app'), glob(base_path() . '/plugin/*/config'), glob(base_path() . '/plugin/*/api')),\n            // Files with these suffixes will be monitored\n            'monitorExtensions' => [\n                'php', 'html', 'htm', 'env'\n            ],\n            'options' => [\n                'enable_file_monitor' => !in_array('-d', $argv) && DIRECTORY_SEPARATOR === '/', // 是否開啟檔案監控\n                'enable_memory_monitor' => DIRECTORY_SEPARATOR === '/',                      // 是否開啟記憶體監控\n            ]\n        ]\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Web Payment with Alipay\nDESCRIPTION: This code snippet shows how to create a web-based Alipay payment request. It retrieves the payment configuration, initializes the Pay SDK, defines an order with details like the trade number, amount, and subject, and then uses the `Pay::alipay()->web()` method to generate the payment form, returning the content for display.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/es/components/payment.md#2025-04-12_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nuse support\\Request;\nuse Webman\\Config;\nuse Yansongda\\Pay\\Pay;\n\n/**\n * @param Request $request\n * @return string\n */\npublic function payment(Request $request)\n{\n    // 1. Obtener el archivo de configuración config/payment.php\n    $config = Config::get('payment');\n\n    // 2. Inicializar la configuración\n    Pay::config($config);\n\n    // 3. Pago en línea\n    $order = [\n        'out_trade_no' => time(),\n        'total_amount' => '8888.88',\n        'subject' => 'pago webman',\n        '_method' => 'get' // utilizar método get para redireccionar\n    ];\n    return Pay::alipay()->web($order)->getBody()->getContents();\n}\n```\n\n----------------------------------------\n\nTITLE: Equivalent Code for Pulling Session Value in Webman\nDESCRIPTION: This code demonstrates the logic that the `pull()` function uses. If the corresponding session exists, the value will be returned and the session data deleted. If the session does not exist, null will be returned.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/session.md#2025-04-12_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$session = $request->session();\n$value = $session->get($name);\n$session->delete($name);\n```\n\n----------------------------------------\n\nTITLE: Checking for Attribute Changes in Eloquent - PHP\nDESCRIPTION: Uses methods such as isDirty, isClean, and wasChanged on a user model to determine changes to attributes since loading or the last save. It illustrates tracking changes to efficiently manage data consistency.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/db/model.md#2025-04-12_snippet_11\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n$user = User::create([\n    'first_name' => 'Taylor',\n    'last_name' => 'Otwell',\n    'title' => 'Developer',\n]);\n\n$user->title = 'Painter';\n\n$user->isDirty(); // true\n$user->isDirty('title'); // true\n$user->isDirty('first_name'); // false\n\n$user->isClean(); // false\n$user->isClean('title'); // false\n$user->isClean('first_name'); // true\n\n$user->save();\n\n$user->isDirty(); // false\n$user->isClean(); // true\n```\n\n----------------------------------------\n\nTITLE: Creating Records with Mass Assignment using create Method\nDESCRIPTION: Demonstrates how to insert new records using the create method with mass assignment, which returns the saved model instance. Requires proper fillable or guarded configuration.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/es/db/model.md#2025-04-12_snippet_30\n\nLANGUAGE: php\nCODE:\n```\n$flight = app\\model\\Flight::create(['name' => 'Vuelo 10']);\n```\n\n----------------------------------------\n\nTITLE: Selecting Specific Columns from Database in webman-php\nDESCRIPTION: Query to select only specific columns from a database table. This example retrieves the 'name' column and 'email' column (with an alias) from the 'user' table.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/db/queries.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('user')->select('name', 'email as user_email')->get();\n```\n\n----------------------------------------\n\nTITLE: Where Clauses with Closure in Webman PHP\nDESCRIPTION: This snippet demonstrates how to use a closure with the orWhere method for complex conditions.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/hi/db/queries.md#2025-04-12_snippet_21\n\nLANGUAGE: php\nCODE:\n```\n// SQL: select * from users where votes > 100 or (name = 'Abigail' and votes > 50)\n$users = Db::table('users')\n            ->where('votes', '>', 100)\n            ->orWhere(function($query) {\n                $query->where('name', 'Abigail')\n                      ->where('votes', '>', 50);\n            })\n            ->get();\n```\n\n----------------------------------------\n\nTITLE: Connecting to WSS Proxy (JavaScript)\nDESCRIPTION: This JavaScript code shows how to connect to the `webman/push` server using WSS (WebSocket Secure) through an Nginx proxy.  It configures the `Push` client with the WSS URL and the appropriate application key and authentication endpoint.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/pt/plugin/push.md#2025-04-12_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar connection = new Push({\n    url: 'wss://example.com',\n    app_key: '<chave do aplicativo, obtida em config/plugin/webman/push/app.php>',\n    auth: '/plugin/webman/push/auth' // autenticação para subscrição (apenas para canais privados)\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Processes\nDESCRIPTION: This example demonstrates configuring multiple processes, `task1` and `task2`, each with its own handler class (`process\\Task1` and `process\\Task2` respectively). This allows for isolating time-sensitive tasks into separate processes to prevent delays caused by other scheduled tasks. This configuration ensures that each task runs independently.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/components/crontab.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    ....其它配置，這裡省略....\n  \n    'task1'  => [\n        'handler'  => process\\Task1::class\n    ],\n    'task2'  => [\n        'handler'  => process\\Task2::class\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Using Redis Connections in Webman Application Plugin with PHP\nDESCRIPTION: Shows how to use Redis connections defined in a Webman application plugin, including accessing the main project's Redis configuration.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/tr/plugin/app.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse support\\Redis;\nRedis::connection('plugin.cms.default')->get('key');\nRedis::connection('plugin.cms.cache')->get('key');\n\n// Using main project's Redis configuration\nRedis::get('key');\n// Assuming main project has a 'cache' connection configured\nRedis::connection('cache')->get('key');\n```\n\n----------------------------------------\n\nTITLE: Using MongoDB in Webman Controller\nDESCRIPTION: Example of how to use MongoDB connection in a Webman controller to insert and retrieve data.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/tr/db/mongo.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\nuse support\\Db;\n\nclass UserController\n{\n    public function db(Request $request)\n    {\n        Db::connection('mongodb')->collection('test')->insert([1,2,3]);\n        return json(Db::connection('mongodb')->collection('test')->get());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: WhereExists Clause with Webman PHP\nDESCRIPTION: This code snippet demonstrates how to use the `whereExists()` clause in the Webman PHP framework's database query builder. It checks if there exists any order in the 'orders' table where the 'user_id' matches the 'id' of a user in the 'users' table.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/fr/db/queries.md#2025-04-12_snippet_27\n\nLANGUAGE: php\nCODE:\n```\n// select * from users where exists ( select 1 from orders where orders.user_id = users.id )\n$users = Db::table('users')\n           ->whereExists(function ($query) {\n               $query->select(Db::raw(1))\n                     ->from('orders')\n                     ->whereRaw('orders.user_id = users.id');\n           })\n           ->get();\n```\n\n----------------------------------------\n\nTITLE: Defining Event Handler Class in PHP\nDESCRIPTION: This code defines an event handler class 'User' with methods to handle 'register' and 'logout' events. It's typically placed in app/event/User.php.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/components/event.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\event;\nclass User\n{\n    function register($user)\n    {\n        var_export($user);\n    }\n \n    function logout($user)\n    {\n        var_export($user);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Timestamp Column Names in Eloquent\nDESCRIPTION: Demonstrates how to customize timestamp column names in an Eloquent model.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/tr/db/model.md#2025-04-12_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\nclass User extends Model\n{\n    const CREATED_AT = 'creation_date';\n    const UPDATED_AT = 'last_update';\n}\n```\n\n----------------------------------------\n\nTITLE: Getting a Single Session Value in Webman\nDESCRIPTION: This code snippet demonstrates how to retrieve a specific value from the session using the `get()` method. If the value does not exist in the session, it returns null. A default value can be provided as the second argument to the `get()` method.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/session.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$session = $request->session();\n$name = $session->get('name');\n```\n\n----------------------------------------\n\nTITLE: Consuming Messages from Stomp Queue in PHP\nDESCRIPTION: Implementation of a Stomp queue consumer class that processes messages from the queue. Shows message consumption with acknowledgment handling and JSON deserialization.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/jp/queue/stomp.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\queue\\stomp;\n\nuse Workerman\\Stomp\\AckResolver;\nuse Webman\\Stomp\\Consumer;\n\nclass MyMailSend implements Consumer\n{\n    // キュー名\n    public $queue = 'examples';\n\n    // 接続名は stomp.php 内の接続に対応します\n    public $connection = 'default';\n\n    // 値が client の場合、$ack_resolver->ack() を呼び出してサーバーに正常に消費されたことを通知する必要があります\n    // 値が auto の場合、$ack_resolver->ack() を呼び出す必要はありません\n    public $ack = 'auto';\n\n    // 消費\n    public function consume($data, AckResolver $ack_resolver = null)\n    {\n        // データが配列の場合は、自分で逆シリアライズする必要があります\n        var_export(json_decode($data, true)); // ['to' => 'tom@gmail.com', 'content' => 'hello'] が出力されます\n        // サーバーに正常に消費されたことを通知\n        $ack_resolver->ack(); // ackが auto の場合、この呼び出しは省略できます\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Safe Local Variable Usage in PHP Coroutines\nDESCRIPTION: Demonstrates the use of local variables in a coroutine-safe manner, as they do not cause data contamination between coroutines.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/coroutine/fiber.md#2025-04-12_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace app\\controller;\n\nuse support\\Request;\nuse support\\Context;\nuse Workerman\\Timer;\n\nclass TestController\n{\n    public function index(Request $request)\n    {\n        $name = $request->get('name');\n        Timer::sleep(5);\n        return $name;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Connections in Webman Plugin\nDESCRIPTION: Configuration file for Redis connections in a Webman plugin, defining multiple connection profiles with different database indexes. Shows how to set up default and cache connections with host, password, port, and database settings.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/app/redis.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'default' => [\n        'host' => '127.0.0.1',\n        'password' => null,\n        'port' => 6379,\n        'database' => 0,\n    ],\n    'cache' => [\n        'host' => '127.0.0.1',\n        'password' => null,\n        'port' => 6379,\n        'database' => 1,\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Basic Redis Usage Example\nDESCRIPTION: Example controller demonstrating basic Redis operations like set and get\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/pt/db/redis.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\nuse support\\Redis;\n\nclass UserController\n{\n    public function db(Request $request)\n    {\n        $key = 'test_key';\n        Redis::set($key, rand());\n        return response(Redis::get($key));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Translation in Webman Controllers\nDESCRIPTION: Example of using the trans() function to translate text in a Webman controller.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/components/translation.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\n\nclass UserController\n{\n    public function get(Request $request)\n    {\n        $hello = trans('hello'); // 你好 世界!\n        return response($hello);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Main Project Redis Connections\nDESCRIPTION: Shows how to use Redis connections from the main project, including default and cache connections without specifying a plugin namespace.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/fr/app/redis.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse support\\Redis;\nRedis::get('key');\n// Supposez que le projet principal a également configuré une connexion cache\nRedis::connection('cache')->get('key');\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Records Using Query Builder\nDESCRIPTION: Example of fetching all records from users table and passing them to a view using WebMan's Db facade\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/db/queries.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\nuse support\\Db;\n\nclass UserController\n{\n    public function all(Request $request)\n    {\n        $users = Db::table('users')->get();\n        return view('user/all', ['users' => $users]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Processing Large Result Sets with Chunking in webman-php\nDESCRIPTION: Method to process large datasets in chunks to avoid memory issues. This example processes the 'users' table in chunks of 100 records using a callback function.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/db/queries.md#2025-04-12_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')->orderBy('id')->chunkById(100, function ($users) {\n    foreach ($users as $user) {\n        //\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Checking Record Existence in webman-php\nDESCRIPTION: Methods to check if records exist or don't exist based on given conditions. These examples check if finalized orders exist or don't exist in the database.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/db/queries.md#2025-04-12_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nreturn Db::table('orders')->where('finalized', 1)->exists();\nreturn Db::table('orders')->where('finalized', 1)->doesntExist();\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Queue in Webman PHP\nDESCRIPTION: Redis queue configuration file showing connection and retry settings.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/queue/redis.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nreturn [\n    'default' => [\n        'host' => 'redis://127.0.0.1:6379',\n        'options' => [\n            'auth' => '',       // Password, optional\n            'db' => 0,          // Database\n            'max_attempts'  => 5, // Retry times after consumption failure\n            'retry_seconds' => 5, // Retry interval in seconds\n        ]\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: GroupBy / Having Clauses with Webman PHP\nDESCRIPTION: This code snippet demonstrates how to use the `groupBy()` and `having()` clauses in the Webman PHP framework's database query builder. It groups the users by 'account_id' and filters the groups to include only those with 'account_id' greater than 100.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/fr/db/queries.md#2025-04-12_snippet_30\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')\n                ->groupBy('account_id')\n                ->having('account_id', '>', 100)\n                ->get();\n// Vous pouvez passer plusieurs paramètres à la méthode groupBy\n$users = Db::table('users')\n                ->groupBy('first_name', 'status')\n                ->having('account_id', '>', 100)\n                ->get();\n```\n\n----------------------------------------\n\nTITLE: Retrieving and Deleting Session Data in Webman PHP\nDESCRIPTION: Demonstrates the pull() method which retrieves a session value and then deletes it.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/session.md#2025-04-12_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$session = $request->session();\n$name = $session->pull('name');\n```\n\n----------------------------------------\n\nTITLE: Parameter Grouping in WebMan PHP Query Builder\nDESCRIPTION: Demonstrates how to group conditions in WHERE clauses for complex queries.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/jp/db/queries.md#2025-04-12_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n// select * from users where name = 'John' and (votes > 100 or title = 'Admin')\n$users = Db::table('users')\n           ->where('name', '=', 'John')\n           ->where(function ($query) {\n               $query->where('votes', '>', 100)\n                     ->orWhere('title', '=', 'Admin');\n           })\n           ->get();\n```\n\n----------------------------------------\n\nTITLE: Setting Headers using methods\nDESCRIPTION: This snippet demonstrates how to set headers using the `header()` and `withHeaders()` methods of the `response` object.  It allows adding headers one at a time or in bulk.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/response.md#2025-04-12_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\n\nclass FooController\n{\n    public function hello(Request $request)\n    {\n        return response('hello webman')\n        ->header('Content-Type', 'application/json')\n        ->withHeaders([\n            'X-Header-One' => 'Значение заголовка 1',\n            'X-Header-Tow' => 'Значение заголовка 2',\n        ]);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Generating and Managing Captcha in LoginController\nDESCRIPTION: PHP controller implementation for creating captcha images, saving captcha values in session, and performing captcha validation during form submission\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/components/captcha.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\nuse Webman\\Captcha\\CaptchaBuilder;\n\nclass LoginController\n{\n    public function captcha(Request $request)\n    {\n        $builder = new CaptchaBuilder;\n        $builder->build();\n        $request->session()->set('captcha', strtolower($builder->getPhrase()));\n        $img_content = $builder->get();\n        return response($img_content, 200, ['Content-Type' => 'image\\/jpeg']);\n    }\n\n    public function check(Request $request)\n    {\n        $captcha = $request->post('captcha');\n        if (strtolower($captcha) !== $request->session()->get('captcha')) {\n            return json(['code' => 400, 'msg' => 'Введенный код капчи неверен']);\n        }\n        return json(['code' => 0, 'msg' => 'ok']);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Session Configuration in Webman\nDESCRIPTION: Shows the session configuration file structure, including handler types, storage options, and various session-related settings like cookie lifetime and security options.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/fr/session.md#2025-04-12_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nuse Webman\\Session\\FileSessionHandler;\nuse Webman\\Session\\RedisSessionHandler;\nuse Webman\\Session\\RedisClusterSessionHandler;\n\nreturn [\n    // FileSessionHandler::class ou RedisSessionHandler::class ou RedisClusterSessionHandler::class \n    'handler' => FileSessionHandler::class,\n    \n    // type est égal à file lorsque handler est FileSessionHandler::class,\n    // type est égal à redis lorsque handler est RedisSessionHandler::class,\n    // type est égal à redis_cluster lorsque handler est RedisClusterSessionHandler::class, c'est-à-dire un cluster Redis.\n    'type'    => 'file',\n\n    // Différents gestionnaires utilisent des configurations différentes\n    'config' => [\n        // Configuration lorsque le type est file\n        'file' => [\n            'save_path' => runtime_path() . '/sessions',\n        ],\n        // Configuration lorsque le type est redis\n        'redis' => [\n            'host'      => '127.0.0.1',\n            'port'      => 6379,\n            'auth'      => '',\n            'timeout'   => 2,\n            'database'  => '',\n            'prefix'    => 'redis_session_',\n        ],\n        'redis_cluster' => [\n            'host'    => ['127.0.0.1:7000', '127.0.0.1:7001', '127.0.0.1:7001'],\n            'timeout' => 2,\n            'auth'    => '',\n            'prefix'  => 'redis_session_',\n        ]\n        \n    ],\n\n    'session_name' => 'PHPSID', // Nom du cookie pour stocker l'ID de session\n    \n    // === Les configurations suivantes nécessitent webman-framework>=1.3.14 et workerman>=4.0.37 ===\n    'auto_update_timestamp' => false,  // Actualiser automatiquement la session, désactivé par défaut\n    'lifetime' => 7*24*60*60,          // Durée de vie de la session\n    'cookie_lifetime' => 365*24*60*60, // Durée de vie du cookie stockant l'ID de session\n    'cookie_path' => '/',              // Chemin du cookie stockant l'ID de session\n    'domain' => '',                    // Domaine du cookie stockant l'ID de session\n    'http_only' => true,               // Activer uniquement HTTP, activé par défaut\n    'secure' => false,                 // Activer la session uniquement en HTTPS, désactivé par défaut\n    'same_site' => '',                 // Pour prévenir les attaques CSRF et le suivi des utilisateurs, valeurs possibles : strict/lax/none\n    'gc_probability' => [1, 1000],     // Probabilité de collecte de session\n];\n```\n\n----------------------------------------\n\nTITLE: Implementing WeChat Payment Gateway in PHP\nDESCRIPTION: Example of a PHP controller class for handling WeChat payments. It includes configuration setup, creating a payment order, and processing the notify callback.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/components/pay.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Http\\Controllers;\n\nuse Yansongda\\Pay\\Pay;\nuse Yansongda\\Pay\\Log;\n\nclass PayController\n{\n    protected $config = [\n        'appid' => 'wxb3fxxxxxxxxxxx',\n        'app_id' => 'wxb3fxxxxxxxxxxx',\n        'miniapp_id' => 'wxb3fxxxxxxxxxxx',\n        'mch_id' => '14577xxxx',\n        'key' => 'mF2suE9sU6Mk1Cxxxxxxxxxxx',\n        'notify_url' => 'http://yanda.net.cn/notify.php',\n        'cert_client' => './cert/apiclient_cert.pem',\n        'cert_key' => './cert/apiclient_key.pem',\n        'log' => [\n            'file' => './logs/wechat.log',\n            'level' => 'info',\n            'type' => 'single',\n            'max_file' => 30,\n        ],\n        'http' => [\n            'timeout' => 5.0,\n            'connect_timeout' => 5.0,\n        ],\n        'mode' => 'dev',\n    ];\n\n    public function index()\n    {\n        $order = [\n            'out_trade_no' => time(),\n            'total_fee' => '1',\n            'body' => 'test body - 测试',\n            'openid' => 'onkVf1FjWS5SBIixxxxxxx',\n        ];\n\n        $pay = Pay::wechat($this->config)->mp($order);\n\n    }\n\n    public function notify()\n    {\n        $pay = Pay::wechat($this->config);\n\n        try {\n            $data = $pay->verify();\n\n            Log::debug('WeChat Payment Notification', $data->all());\n        } catch (\\Exception $e) {\n            \n        }\n        \n        return $pay->success()->send();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Debugging Database Queries - PHP\nDESCRIPTION: Utilizes 'dd' and 'dump' methods to display the results of queries along with SQL statements, aiding in debugging. The debugging methods require the 'symfony/var-dumper' package.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/pt/db/queries.md#2025-04-12_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')->where('votes', '>', 100)->dd();\nDb::table('users')->where('votes', '>', 100)->dump();\n```\n\n----------------------------------------\n\nTITLE: Publishing Events in PHP Controller\nDESCRIPTION: This snippet shows how to publish an event using Event::emit() in a controller action. It demonstrates emitting a user.register event with user data.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/tr/components/event.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\nuse support\\Request;\nuse Webman\\Event\\Event;\nclass User\n{\n    public function register(Request $request)\n    {\n        $user = [\n            'name' => 'webman',\n            'age' => 2\n        ];\n        Event::emit('user.register', $user);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Queue Settings in Webman PHP\nDESCRIPTION: Redis Queue configuration file defining multiple Redis connections with options for authentication, database selection, retry attempts and intervals.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/fr/queue/redis.md#2025-04-12_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\nreturn [\n    'default' => [\n        'host' => 'redis://192.168.0.1:6379',\n        'options' => [\n            'auth' => null,       // Password, string type, optional parameter\n            'db' => 0,            // Database\n            'max_attempts'  => 5, // Retry times after consumption failure\n            'retry_seconds' => 5, // Retry interval, in seconds\n        ]\n    ],\n    'other' => [\n        'host' => 'redis://192.168.0.2:6379',\n        'options' => [\n            'auth' => null,       // Password, string type, optional parameter\n            'db' => 0,             // Database\n            'max_attempts'  => 5, // Retry times after consumption failure\n            'retry_seconds' => 5, // Retry interval, in seconds\n        ]\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Logging to a Specific Channel\nDESCRIPTION: This code snippet shows how to log messages to a specific channel, in this case, the 'log2' channel. It retrieves the channel using `Log::channel('log2')` and then calls the `info` method on the channel instance to write a message to the log file configured for that channel.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/th/log.md#2025-04-12_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\nuse support\\Log;\n\nclass FooController\n{\n    public function index(Request $request)\n    {\n        $log = Log::channel('log2');\n        $log->info('ทดสอบ log2');\n        return response('สวัสดี ดัชนี');\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Update or Insert Records (Upsert) in PHP\nDESCRIPTION: Demonstrates how to update an existing record or insert a new one if no matching record exists. The first parameter defines the search criteria, while the second parameter contains values to update or add to the new record.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/tr/db/queries.md#2025-04-12_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')\n    ->updateOrInsert(\n        ['email' => 'john@example.com', 'name' => 'John'],\n        ['votes' => '2']\n    );\n```\n\n----------------------------------------\n\nTITLE: Advanced Pagination with JasonGrimes Paginator in PHP\nDESCRIPTION: Controller implementation showing pagination with the JasonGrimes paginator library, including custom URL formatting and page size configuration.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/de/db/paginator.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse JasonGrimes\\Paginator;\nuse support\\Request;\nuse support\\Db;\n\nclass UserController\n{\n    public function get(Request $request)\n    {\n        $per_page = 10;\n        $current_page = $request->input('page', 1);\n        $users = Db::table('user')->paginate($per_page, '*', 'page', $current_page);\n        $paginator = new Paginator($users->total(), $per_page, $current_page, '/user/get?page=(:num)');\n        return view('user/get', ['users' => $users, 'paginator'  => $paginator]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Redis Connections in Plugin Context\nDESCRIPTION: Demonstrates how to retrieve and use specific Redis connections within a plugin, accessing both default and cache connections using the connection method.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/fr/app/redis.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse support\\Redis;\nRedis::connection('plugin.foo.default')->get('key');\nRedis::connection('plugin.foo.cache')->get('key');\n```\n\n----------------------------------------\n\nTITLE: Configuring AOP settings in config.php\nDESCRIPTION: This code snippet shows the AOP configuration in `config.php`. It defines the paths to scan for annotations, annotations to ignore, class mappings, collectors, and the aspects to be applied. The 'aspects' key lists the Aspect classes that will be used.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/aop.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Hyperf\\Di\\Annotation\\AspectCollector;\n\nreturn [\n    'annotations' => [\n        'scan' => [\n            'paths' => [\n                BASE_PATH . '/app',\n            ],\n            'ignore_annotations' => [\n                'mixin',\n            ],\n            'class_map' => [\n            ],\n            'collectors' => [\n                AspectCollector::class\n            ],\n        ],\n    ],\n    'aspects' => [\n        // Здесь напишите соответствующий Aspect\n        app\\aspect\\DebugAspect::class,\n    ]\n];\n\n```\n\n----------------------------------------\n\nTITLE: Subquery Select Operations\nDESCRIPTION: Using subqueries in Eloquent select operations.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/de/db/model.md#2025-04-12_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse app\\model\\Destination;\nuse app\\model\\Flight;\n\nreturn Destination::addSelect(['last_flight' => Flight::select('name')\n    ->whereColumn('destination_id', 'destinations.id')\n    ->orderBy('arrived_at', 'desc')\n    ->limit(1)\n])->get();\n```\n\n----------------------------------------\n\nTITLE: Using Plugin-Specific Database Connections in Webman PHP\nDESCRIPTION: Demonstrates how to use plugin-specific database connections in Webman PHP. It shows querying tables from different connections within the plugin.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/app/database.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse support\\Db;\nDb::connection('plugin.foo.mysql')->table('user')->first();\nDb::connection('plugin.foo.admin')->table('admin')->first();\n```\n\n----------------------------------------\n\nTITLE: Think-Validate User Validation Class\nDESCRIPTION: Defines a validation class `User` using the `top-think/think-validate` library. It sets rules for name (required, max length 25), age (number, between 1 and 120), and email (valid email format), along with custom error messages.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/components/validation.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\index\\validate;\n\nuse think\\Validate;\n\nclass User extends Validate\n{\n    protected $rule = [\n        'name' => 'require|max:25',\n        'age' => 'number|between:1,120',\n        'email' => 'email',\n    ];\n\n    protected $message = [\n        'name.require' => '名稱必須',\n        'name.max' => '名稱最多不能超過25個字元',\n        'age.number' => '年齡必須是數字',\n        'age.between' => '年齡只能在1-120之間',\n        'email' => '郵箱格式錯誤',\n    ];\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Public Path in Webman Phar\nDESCRIPTION: Configuration code for setting up the public directory path when using Phar packaging. This allows the business logic to find the actual public directory location using the public_path() helper function.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/jp/others/phar.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n'public_path' => base_path(false) . DIRECTORY_SEPARATOR . 'public'\n```\n\n----------------------------------------\n\nTITLE: Deleting Single Session Data in Webman\nDESCRIPTION: This code snippet demonstrates how to delete a single session data using the `delete()` method, which is equivalent to using `forget()` for a single key.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/session.md#2025-04-12_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$session = $request->session();\n// 等同于 $session->forget('name');\n$session->delete('name');\n```\n\n----------------------------------------\n\nTITLE: Redis API Method Examples\nDESCRIPTION: Comprehensive list of available Redis API methods for various operations\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/db/redis.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nRedis::append($key, $value)\nRedis::bitCount($key)\nRedis::decr($key, $value)\nRedis::decrBy($key, $value)\nRedis::get($key)\nRedis::getBit($key, $offset)\nRedis::getRange($key, $start, $end)\nRedis::getSet($key, $value)\nRedis::incr($key, $value)\nRedis::incrBy($key, $value)\nRedis::incrByFloat($key, $value)\nRedis::mGet(array $keys)\nRedis::getMultiple(array $keys)\nRedis::mSet($pairs)\nRedis::mSetNx($pairs)\nRedis::set($key, $value, $expireResolution = null, $expireTTL = null, $flag = null)\nRedis::setBit($key, $offset, $value)\nRedis::setEx($key, $ttl, $value)\nRedis::pSetEx($key, $ttl, $value)\nRedis::setNx($key, $value)\nRedis::setRange($key, $offset, $value)\nRedis::strLen($key)\nRedis::del(...$keys)\nRedis::exists(...$keys)\nRedis::expire($key, $ttl)\nRedis::expireAt($key, $timestamp)\nRedis::select($dbIndex)\n```\n\n----------------------------------------\n\nTITLE: Basic Redis Usage Example in Webman Controller\nDESCRIPTION: Example controller demonstrating how to use Redis in a Webman application for setting and getting a simple key-value pair.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/db/redis.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\nuse support\\Redis;\n\nclass UserController\n{\n    public function db(Request $request)\n    {\n        $key = 'test_key';\n        Redis::set($key, rand());\n        return response(Redis::get($key));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Payment Callback Handler\nDESCRIPTION: Handler for processing asynchronous payment notifications from payment gateway\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/components/payment.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\npublic function alipayNotify(Request $request): Response\n{\n    Pay::config(config('payment'));\n    $result = Pay::alipay()->callback($request->post());\n    return new Response(200, [], 'success');\n}\n```\n\n----------------------------------------\n\nTITLE: Returning a View in Webman (PHP)\nDESCRIPTION: This code snippet demonstrates how to return a view from a Webman controller. It retrieves a 'name' parameter from the request and passes it to the 'user/hello' view for rendering. The view is rendered using PHP's native template engine.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/tutorial.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\n\nclass UserController\n{\n    public function hello(Request $request)\n    {\n        $default_name = 'webman';\n        $name = $request->get('name', $default_name);\n        return view('user/hello', ['name' => $name]);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Using JasonGrimes Paginator in Webman Controller\nDESCRIPTION: This PHP code demonstrates using the `JasonGrimes\\Paginator` component for pagination in a Webman controller. It fetches a paginated list of users and creates a Paginator instance, passing both to the view.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/fr/db/paginator.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse JasonGrimes\\Paginator;\nuse support\\Request;\nuse support\\Db;\n\nclass UserController\n{\n    public function get(Request $request)\n    {\n        $per_page = 10;\n        $current_page = $request->input('page', 1);\n        $users = Db::table('user')->paginate($per_page, '*', 'page', $current_page);\n        $paginator = new Paginator($users->total(), $per_page, $current_page, '/user/get?page=(:num)');\n        return view('user/get', ['users' => $users, 'paginator'  => $paginator]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Grouping Where Parameters with Closures in webman-php\nDESCRIPTION: Using a closure to group where conditions with parentheses. This creates a query with name = 'John' AND (votes > 100 OR title = 'Admin').\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/db/queries.md#2025-04-12_snippet_26\n\nLANGUAGE: php\nCODE:\n```\n// select * from users where name = 'John' and (votes > 100 or title = 'Admin')\n$users = Db::table('users')\n           ->where('name', '=', 'John')\n           ->where(function ($query) {\n               $query->where('votes', '>', 100)\n                     ->orWhere('title', '=', 'Admin');\n           })\n           ->get();\n```\n\n----------------------------------------\n\nTITLE: Defining Custom HTTP Server Class in PHP for Webman\nDESCRIPTION: This code snippet shows how to create a custom HTTP server class by extending the Webman\\App class. It allows for modifying the core HTTP service behavior in Webman.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/process.md#2025-04-12_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nnamespace app;\n\nuse Webman\\App;\n\nclass Server extends App\n{\n    // 這裡重寫了 Webman\\App 裡的方法\n}\n```\n\n----------------------------------------\n\nTITLE: Using the JavaScript Client (Public Channel)\nDESCRIPTION: This JavaScript code snippet shows how to connect to the `webman/push` server, subscribe to channels (user and group), and listen for events. It establishes a WebSocket connection, subscribes to specified channels, and defines event handlers for incoming messages.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-hk/plugin/push.md#2025-04-12_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// 建立連接\nvar connection = new Push({\n    url: 'ws://127.0.0.1:3131', // websocket地址\n    app_key: '<app_key，在config/plugin/webman/push/app.php裡獲取>',\n    auth: '/plugin/webman/push/auth' // 訂閱鑒權(僅限於私有頻道)\n});\n// 假設用戶uid為1\nvar uid = 1;\n// 瀏覽器監聽user-1頻道的消息，也就是用戶uid為1的用戶消息\nvar user_channel = connection.subscribe('user-' + uid);\n\n// 當user-1頻道有message事件的消息時\nuser_channel.on('message', function(data) {\n    // data裡是消息內容\n    console.log(data);\n});\n// 當user-1頻道有friendApply事件時消息時\nuser_channel.on('friendApply', function (data) {\n    // data裡是好友申請相關信息\n    console.log(data);\n});\n\n// 假設群組id為2\nvar group_id = 2;\n// 瀏覽器監聽group-2頻道的消息，也就是監聽群組2的群消息\nvar group_channel = connection.subscribe('group-' + group_id);\n// 當群組2有message消息事件時\ngroup_channel.on('message', function(data) {\n    // data裡是消息內容\n    console.log(data);\n});\n```\n\n----------------------------------------\n\nTITLE: Consuming Messages from Stomp Queue in PHP\nDESCRIPTION: Implementation of a Stomp queue consumer class that processes messages. Shows queue configuration, connection settings, and message handling with acknowledgment support.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/queue/stomp.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\queue\\stomp;\n\nuse Workerman\\Stomp\\AckResolver;\nuse Webman\\Stomp\\Consumer;\n\nclass MyMailSend implements Consumer\n{\n    // Queue name\n    public $queue = 'examples';\n\n    // Connection name, corresponding to the connection in stomp.php\n    public $connection = 'default';\n\n    // When the value is 'client', it is necessary to use $ack_resolver->ack() to inform the server that the consumption was successful\n    // When the value is 'auto', there is no need to call $ack_resolver->ack()\n    public $ack = 'auto';\n\n    // Consumption\n    public function consume($data, AckResolver $ack_resolver = null)\n    {\n        // If the data is an array, deserialization is required\n        var_export(json_decode($data, true)); // Outputs ['to' => 'tom@gmail.com', 'content' => 'hello']\n        // Inform the server that the consumption was successful\n        $ack_resolver->ack(); // This call can be omitted when ack is set to auto\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Logging with Main Project Configuration in Webman Plugin\nDESCRIPTION: This PHP code demonstrates how to reuse the main project's logging configuration from a Webman plugin. It utilizes `Log::info()` and `Log::channel()` directly, enabling the plugin to leverage the main project's logging setup.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-hk/plugin/app.md#2025-04-12_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse support\\Log;\nLog::info('日志内容');\n// 假设主项目有个test日志配置\nLog::channel('test')->info('日志内容');\n```\n\n----------------------------------------\n\nTITLE: Updating Records in Webman PHP\nDESCRIPTION: This snippet demonstrates how to update records in a database table.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/hi/db/queries.md#2025-04-12_snippet_37\n\nLANGUAGE: php\nCODE:\n```\n$affected = Db::table('users')\n              ->where('id', 1)\n              ->update(['votes' => 1]);\n```\n\n----------------------------------------\n\nTITLE: Casbin Configuration Setup\nDESCRIPTION: Configuration file for Casbin showing multiple permission model setups and adapter configuration.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/components/casbin.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nreturn [\n    'default' => [\n        'model' => [\n            'config_type' => 'file',\n            'config_file_path' => config_path() . '/casbin-restful-model.conf',\n            'config_text' => '',\n        ],\n        'adapter' => [\n            'type' => 'model',\n            'class' => \\app\\model\\Rule::class,\n        ],\n    ],\n    'rbac' => [\n        'model' => [\n            'config_type' => 'file',\n            'config_file_path' => config_path() . '/casbin-rbac-model.conf',\n            'config_text' => '',\n        ],\n        'adapter' => [\n            'type' => 'model',\n            'class' => \\app\\model\\RBACRule::class,\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Single Column from a Table in PHP\nDESCRIPTION: This snippet shows how to retrieve a single column from the 'roles' table using the pluck() method. It also demonstrates how to specify an index for the returned array.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/tr/db/queries.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$titles = Db::table('roles')->pluck('title');\n\n$roles = Db::table('roles')->pluck('title', 'id');\n\nforeach ($roles as $id => $title) {\n    echo $title;\n}\n```\n\n----------------------------------------\n\nTITLE: Using updateOrCreate Method in Eloquent\nDESCRIPTION: Shows how to use updateOrCreate to update a model if it exists or create it if it doesn't, combining the find, update or create operations into a single method call.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/tr/db/model.md#2025-04-12_snippet_29\n\nLANGUAGE: php\nCODE:\n```\n// OakLand'dan San Diego'ya bir uçuş bulunursa, fiyatı 99 dolar olarak belirtin.\n// Eşleşen bir model bulunamazsa yeni bir tane oluşturun.\n$flight = app\\modle\\Flight::updateOrCreate(\n    ['departure' => 'Oakland', 'destination' => 'San Diego'],\n    ['price' => 99, 'discounted' => 1]\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Annotation Injection in UserController\nDESCRIPTION: This code demonstrates annotation injection in the `UserController`.  The `@Inject` annotation is used to inject the `Mailer` service into the `mailer` property, eliminating the need for constructor injection.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-hk/di.md#2025-04-12_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n\"<?php\nnamespace app\\controller;\n\nuse support\\Request;\nuse app\\service\\Mailer;\nuse DI\\Annotation\\Inject;\n\nclass UserController\n{\n    /**\n     * @Inject\n     * @var Mailer\n     */\n    private $mailer;\n\n    public function register(Request $request)\n    {\n        $this->mailer->mail('hello@webman.com', 'Hello and welcome!');\n        return response('ok');\n    }\n}\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Command Registration for Webman Plugin\nDESCRIPTION: Configuration file that registers custom commands for the plugin. This file defines which command classes should be loaded by webman/console when the plugin is installed.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/plugin/create.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Foo\\Admin\\FooAdminAddCommand;\n\nreturn [\n    FooAdminAddCommand::class,\n    // ....more configurations can be added...\n];\n```\n\n----------------------------------------\n\nTITLE: Parameter Grouping in Webman PHP\nDESCRIPTION: This snippet demonstrates how to group conditions using a closure in the where method.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/hi/db/queries.md#2025-04-12_snippet_29\n\nLANGUAGE: php\nCODE:\n```\n// select * from users where name = 'John' and (votes > 100 or title = 'Admin')\n$users = Db::table('users')\n           ->where('name', '=', 'John')\n           ->where(function ($query) {\n               $query->where('votes', '>', 100)\n                     ->orWhere('title', '=', 'Admin');\n           })\n           ->get();\n```\n\n----------------------------------------\n\nTITLE: Custom Constructor Injection Configuration\nDESCRIPTION: This configuration snippet demonstrates how to configure php-di to inject custom parameters into a class's constructor.  In this case, it provides specific SMTP host and port values when instantiating the `Mailer` class.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-hk/di.md#2025-04-12_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n\"<?php\nreturn [\n    // ... 這裡忽略了其他配置\n    \n    app\\service\\Mailer::class =>  new app\\service\\Mailer('192.168.1.11', 25);\n];\"\n```\n\n----------------------------------------\n\nTITLE: Passing Parameters from Middleware to Controller in PHP\nDESCRIPTION: This code shows how to pass data from middleware to a controller by adding attributes to the `$request` object. The controller can then access these attributes to retrieve the data.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/middleware.md#2025-04-12_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\middleware;\n\nuse Webman\\MiddlewareInterface;\nuse Webman\\Http\\Response;\nuse Webman\\Http\\Request;\n\nclass Hello implements MiddlewareInterface\n{\n    public function process(Request $request, callable $handler) : Response\n    {\n        $request->data = 'some value';\n        return $handler($request);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Database Connections in Webman Plugins\nDESCRIPTION: Shows how to use database connections specific to a plugin and how to use the main project's database connections within a plugin.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/plugin/app.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse support\\Db;\nDb::connection('plugin.cms.mysql')->table('user')->first();\nDb::connection('plugin.cms.admin')->table('admin')->first();\n\n// Using main project's database\nDb::table('user')->first();\n// Assuming main project has an 'admin' connection\nDb::connection('admin')->table('admin')->first();\n```\n\n----------------------------------------\n\nTITLE: Disabling Auto-Incrementing Primary Key in Eloquent\nDESCRIPTION: Illustrates how to disable the auto-incrementing behavior of the primary key in an Eloquent model.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/db/model.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nclass User extends Model\n{\n    public $incrementing = false;\n}\n```\n\n----------------------------------------\n\nTITLE: Delivering Messages Using STOMP in PHP\nDESCRIPTION: This code snippet demonstrates how to send a message to a specified STOMP queue using the Webman STOMP client in PHP. The message is serialized using JSON before being sent. It requires an HTTP request and the STOMP client to be installed. The expected input is a request object, and the output is a response confirming the test.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/queue/stomp.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\nuse Webman\\Stomp\\Client;\n\nclass Index\n{\n    public function queue(Request $request)\n    {\n        // 队列\n        $queue = 'examples';\n        // 数据（传递数组时需要自行序列化，比如使用json_encode，serialize等）\n        $data = json_encode(['to' => 'tom@gmail.com', 'content' => 'hello']);\n        // 执行投递\n        Client::send($queue, $data);\n\n        return response('redis queue test');\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Connections in Webman PHP Plugin\nDESCRIPTION: This snippet shows how to configure multiple Redis connections for a Webman PHP plugin. It sets up two connections: 'default' and 'cache', each with its own host, password, port, and database settings.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/jp/app/redis.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'default' => [\n        'host' => '127.0.0.1',\n        'password' => null,\n        'port' => 6379,\n        'database' => 0,\n    ],\n    'cache' => [\n        'host' => '127.0.0.1',\n        'password' => null,\n        'port' => 6379,\n        'database' => 1,\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Installing symfony/cache for PHP 8.x in webman-php\nDESCRIPTION: Composer command to install symfony/cache and illuminate/redis for PHP 8.x in webman-php project. Requires restart after installation.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/db/cache.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\ncomposer require -W illuminate/redis symfony/cache\n```\n\n----------------------------------------\n\nTITLE: Event Configuration Example in PHP\nDESCRIPTION: This snippet shows how to configure the event listeners and subscribers in the event configuration file 'config/event.php'. It sets up an empty listener and subscriber array as a base configuration.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-hk/event.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    // 事件監聽\n    'listener'    => [],\n\n    // 事件訂閱器\n    'subscriber' => [],\n];\n```\n\n----------------------------------------\n\nTITLE: Creating Bootstrap Initialization Class for Memory Reporting\nDESCRIPTION: Implements a bootstrap class that periodically reports process memory usage using Workerman Timer in a Webman application\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-hk/others/bootstrap.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace app\\bootstrap;\n\nuse Webman\\Bootstrap;\n\nclass MemReport implements Bootstrap\n{\n    public static function start($worker)\n    {\n        // Is it a console environment?\n        $is_console = !$worker;\n        if ($is_console) {\n            // Skip initialization in console environment\n            return;\n        }\n        \n        // Execute every 10 seconds\n        \\Workerman\\Timer::add(10, function () {\n            // Demonstrate memory reporting\n            echo memory_get_usage() . \"\\n\";\n        });\n        \n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Captcha Controller in PHP Webman\nDESCRIPTION: Controller implementation for generating and validating captcha images, including methods to create, display, and check captcha codes\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/components/captcha.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\nuse Webman\\Captcha\\CaptchaBuilder;\n\nclass LoginController\n{\n    public function index(Request $request)\n    {\n        return view('login\\/index');\n    }\n    \n    public function captcha(Request $request)\n    {\n        $builder = new CaptchaBuilder;\n        $builder->build();\n        $request->session()->set('captcha', strtolower($builder->getPhrase()));\n        $img_content = $builder->get();\n        return response($img_content, 200, ['Content-Type' => 'image\\/jpeg']);\n    }\n\n    public function check(Request $request)\n    {\n        $captcha = $request->post('captcha');\n        if (strtolower($captcha) !== $request->session()->get('captcha')) {\n            return json(['code' => 400, 'msg' => '輸入的驗證碼不正確']);\n        }\n        return json(['code' => 0, 'msg' => 'ok']);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting New Record with Eloquent Model\nDESCRIPTION: Demonstrates how to create and save a new record in the database using an Eloquent model instance.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/jp/db/model.md#2025-04-12_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n$user = new User;\n$user->name = $request->get('name');\n$user->save();\n```\n\n----------------------------------------\n\nTITLE: Using groupBy And having With Webman DB Query Builder\nDESCRIPTION: This snippet groups users by 'account_id' and filters the groups where 'account_id' is greater than 100. The `groupBy()` method specifies the grouping column, and `having()` filters the grouped results. The last example groups by multiple columns.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/db/queries.md#2025-04-12_snippet_23\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')\n                ->groupBy('account_id')\n                ->having('account_id', '>', 100)\n                ->get();\n// 你可以向 groupBy 方法传递多个参数\n$users = Db::table('users')\n                ->groupBy('first_name', 'status')\n                ->having('account_id', '>', 100)\n                ->get();\n```\n\n----------------------------------------\n\nTITLE: Using Session Helper Function in Webman PHP\nDESCRIPTION: Shows various ways to use the session() helper function for managing session data.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/session.md#2025-04-12_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n// Get session instance\n$session = session();\n\n// Get a value\n$value = session('key', 'default');\n\n// Set session values\nsession(['key1'=>'value1', 'key2' => 'value2']);\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Event Class\nDESCRIPTION: Example of creating a custom event class for error logging that extends Symfony Event\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/event.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nnamespace extend\\event;\n\nuse Symfony\\Contracts\\EventDispatcher\\Event;\n\nclass LogErrorWriteEvent extends Event\n{\n    const NAME = 'log.error.write';  // Event name, the unique identifier of the event\n\n    /** @var array */\n    public array $log;\n\n    public function __construct(array $log)\n    {\n        $this->log = $log;\n    }\n\n    public function handle()\n    {\n        return $this->log;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Server-Side Push Implementation in PHP\nDESCRIPTION: PHP code example showing how to initialize the Push API and trigger events to specific channels\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/plugin/push.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Webman\\Push\\Api;\n$api = new Api(\n    // Using the config directly in webman to obtain the configuration, if not in a webman environment, the corresponding configuration needs to be manually written\n    'http://127.0.0.1:3232',\n    config('plugin.webman.push.app.app_key'),\n    config('plugin.webman.push.app.app_secret')\n);\n// Push a message event to all clients subscribed to user-1\n$api->trigger('user-1', 'message', [\n    'from_uid' => 2,\n    'content'  => 'Hello, this is the message content'\n]);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Collections with Eloquent in PHP\nDESCRIPTION: Demonstrates how to retrieve aggregated data from models using count and max methods. These methods return scalar values rather than model instances.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/tr/db/model.md#2025-04-12_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n$count = app\\modle\\Flight::where('active', 1)->count();\n\n$max = app\\modle\\Flight::where('active', 1)->max('price');\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Non-Listening Process in PHP for Webman\nDESCRIPTION: This code defines a custom non-listening process class (TaskTest) with an onWorkerStart method that sets up a periodic database check using a timer.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/tr/process.md#2025-04-12_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nnamespace app;\n\nuse Workerman\\Timer;\nuse support\\Db;\n\nclass TaskTest\n{\n  \n    public function onWorkerStart()\n    {\n        // Check the database every 10 seconds to see if there's a new user registration\n        Timer::add(10, function(){\n            Db::table('users')->where('regist_timestamp', '>', time()-10)->get();\n        });\n    }\n    \n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Pagination with ThinkPHP ORM in PHP\nDESCRIPTION: This snippet shows how to use ThinkPHP's ORM to implement pagination in a Webman PHP controller. It demonstrates the usage of the paginate method with custom options.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/jp/db/paginator.md#2025-04-12_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\npublic function index(Request $request)\n{\n    $per_page = 10;\n    $users = Db::table('user')->paginate(['list_rows' => $per_page, 'page' => $request->get('page', 1), 'path' => $request->path()]);\n    return view('index/index', ['users' => $users]);\n}\n```\n\n----------------------------------------\n\nTITLE: Get All Headers - Webman PHP\nDESCRIPTION: Retrieves all request headers as an array. Header keys are always lowercase. If there are no headers, an empty array is returned.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/th/request.md#2025-04-12_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$request->header();\n```\n\n----------------------------------------\n\nTITLE: Where Clauses with Arrays in Webman PHP\nDESCRIPTION: This snippet demonstrates how to use the where method with an array of conditions.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/hi/db/queries.md#2025-04-12_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')->where([\n    ['status', '=', '1'],\n    ['subscribed', '<>', '1'],\n])->get();\n```\n\n----------------------------------------\n\nTITLE: Getting Requested Controller Class Name - PHP\nDESCRIPTION: This code retrieves the class name of the controller corresponding to the request. It will return an empty string for closure routes, which do not belong to any controller.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/request.md#2025-04-12_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n$request->controller;\n```\n\n----------------------------------------\n\nTITLE: Configuration d'un service HTTP personnalisé dans Webman\nDESCRIPTION: Configuration dans config/process.php pour enregistrer un service HTTP personnalisé avec ses paramètres spécifiques, incluant le port d'écoute et le nombre de processus.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/fr/process.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Workerman\\Worker;\\n\\nreturn [\\n    // ... autres configurations omises...\\n\\n    'my-http' => [\\n        'handler' => app\\Server::class,\\n        'listen' => 'http://0.0.0.0:8686',\\n        'count' => 8, // Nombre de processus\\n        'user' => '',\\n        'group' => '',\\n        'reusePort' => true,\\n        'constructor' => [\\n            'request_class' => \\support\\Request::class, // Définir la classe de requête\\n            'logger' => \\support\\Log::channel('default'), // Instance de journalisation\\n            'app_path' => app_path(), // Emplacement du répertoire app\\n            'public_path' => public_path() // Emplacement du répertoire public\\n        ]\\n    ]\\n];\n```\n\n----------------------------------------\n\nTITLE: Multiple Redis Connections Configuration\nDESCRIPTION: Configuration example for multiple Redis connections with different databases\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/db/redis.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'default' => [\n        'host'     => '127.0.0.1',\n        'password' => null,\n        'port'     => 6379,\n        'database' => 0,\n    ],\n\n    'cache' => [\n        'host'     => '127.0.0.1',\n        'password' => null,\n        'port'     => 6379,\n        'database' => 1,\n    ],\n]\n```\n\n----------------------------------------\n\nTITLE: Creating Custom BusinessException in Webman PHP\nDESCRIPTION: This code shows how to create a custom business exception class (MyBusinessException) that extends the default BusinessException and customizes the response format.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/exception.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace app\\exception;\n\nuse support\\exception\\BusinessException;\nuse Webman\\Http\\Request;\nuse Webman\\Http\\Response;\n\nclass MyBusinessException extends BusinessException\n{\n    public function render(Request $request): ?Response\n    {\n        // Se la richiesta è in formato json, restituisci i dati in formato json\n        if ($request->expectsJson()) {\n            return json(['code' => $this->getCode() ?: 500, 'message' => $this->getMessage()]);\n        }\n        // Altrimenti, restituisci una pagina\n        return new Response(200, [], $this->getMessage());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving App Configuration in Webman PHP\nDESCRIPTION: Shows how to access all configurations from the app.php configuration file.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/config.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nconfig('app');\n```\n\n----------------------------------------\n\nTITLE: Overwriting Request Parameters (PHP)\nDESCRIPTION: This PHP code demonstrates how to overwrite GET, POST, and Header data in a request object in Webman. The `$request->setGet()`, `$request->setPost()`, and `$request->setHeaders()` methods allow modifying the request data. This is useful for testing or modifying request data within middleware or controllers.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/upgrade/1-6.md#2025-04-12_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$request->get(); // 假设得到 ['name' => 'tom', 'age' => 18]\n$request->setGet(['name' => 'tom']);\n$request->get(); // 最终得到 ['name' => 'tom']\n// 以下类似\n$requset->setPost();\n$request->setHeaders();\n```\n\n----------------------------------------\n\nTITLE: Configuring AOP in config.php\nDESCRIPTION: This PHP code defines the AOP configuration, including the paths to scan for annotations, ignored annotations, class map, collectors, and the aspects to be applied. It specifies the directories to scan for AOP annotations and the aspects to be included.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/aop.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n \"<?php\\n\\nuse Hyperf\\Di\\Annotation\\AspectCollector;\\n\\nreturn [\\n    'annotations' => [\\n        'scan' => [\\n            'paths' => [\\n                BASE_PATH . '/app',\\n            ],\\n            'ignore_annotations' => [\\n                'mixin',\\n            ],\\n            'class_map' => [\\n            ],\\n            'collectors' => [\\n                AspectCollector::class\\n            ],\\n        ],\\n    ],\\n    'aspects' => [\\n        // 這裡寫入對應的 Aspect\\n        app\\\\aspect\\\\DebugAspect::class,\\n    ]\\n];\\n\"\n```\n\n----------------------------------------\n\nTITLE: Pessimistic Locking in WebMan PHP Query Builder\nDESCRIPTION: Shows how to use pessimistic locking in database queries for transaction management.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/jp/db/queries.md#2025-04-12_snippet_22\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')->where('votes', '>', 100)->sharedLock()->get();\n```\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')->where('votes', '>', 100)->lockForUpdate()->get();\n```\n\n----------------------------------------\n\nTITLE: Basic Medoo Database Query in Webman Controller\nDESCRIPTION: Example of using Medoo in a Webman controller to query user data from the database. Shows basic usage of the Medoo::get() method to retrieve user information by UID.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/db/medoo.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\nuse Webman\\Medoo\\Medoo;\n\nclass Index\n{\n    public function index(Request $request)\n    {\n        $user = Medoo::get('user', '*', ['uid' => 1]);\n        return json($user);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Bootstrap Event Manager Configuration\nDESCRIPTION: Adding event manager to bootstrap configuration for Webman application initialization\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/th/event.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    webman\\event\\EventManager::class,\n];\n```\n\n----------------------------------------\n\nTITLE: Inserting Data With Webman DB Query Builder\nDESCRIPTION: This snippet demonstrates how to insert data into the 'users' table using the `insert()` method.  The first example inserts a single record. The second inserts multiple records.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/db/queries.md#2025-04-12_snippet_25\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')->insert(\n    ['email' => 'john@example.com', 'votes' => 0]\n);\n```\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')->insert([\n    ['email' => 'taylor@example.com', 'votes' => 0],\n    ['email' => 'dayle@example.com', 'votes' => 0]\n]);\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Records from Eloquent Model\nDESCRIPTION: Demonstrates how to retrieve all records from a database table using an Eloquent model's all() method.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/db/model.md#2025-04-12_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$users = app\\model\\User::all();\n\nforeach ($users as $user) {\n    echo $user->name;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Redis Pipeline Commands in Webman\nDESCRIPTION: Example of using Redis pipeline commands to execute multiple operations in a single call.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/jp/db/redis.md#2025-04-12_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\nRedis::pipeline(function ($pipe) {\n    for ($i = 0; $i < 1000; $i++) {\n        $pipe->set(\"key:$i\", $i);\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering ThinkPHP Pagination in ThinkPHP Template\nDESCRIPTION: This snippet demonstrates how to render pagination in a ThinkPHP template using ThinkPHP's ORM pagination. It includes the necessary Bootstrap CSS for styling and uses ThinkPHP's raw filter.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/jp/db/paginator.md#2025-04-12_snippet_6\n\nLANGUAGE: HTML\nCODE:\n```\n<html>\n<head>\n    <!-- Bootstrapページネーションスタイルをネイティブサポート -->\n    <link rel=\"stylesheet\" href=\"//maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css\">\n</head>\n<body>\n\n{$users|raw}\n\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Get Single Column with Webman PHP\nDESCRIPTION: This code snippet demonstrates how to retrieve a single column from the 'roles' table using the Webman PHP framework's database query builder. It uses the `pluck()` method to retrieve the 'title' column from all records.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/fr/db/queries.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$titles = Db::table('roles')->pluck('title');\n```\n\n----------------------------------------\n\nTITLE: Ordering Query Results in webman-php\nDESCRIPTION: Using orderBy to sort query results. This example retrieves users sorted by name in descending order.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/db/queries.md#2025-04-12_snippet_28\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')\n                ->orderBy('name', 'desc')\n                ->get();\n```\n\n----------------------------------------\n\nTITLE: Implementing Constructor Injection in UserController\nDESCRIPTION: This code demonstrates constructor injection in the `UserController`. The `Mailer` service is injected into the controller's constructor. The `register` method uses the injected `Mailer` to send a welcome email.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-hk/di.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n\"<?php\nnamespace app\\controller;\n\nuse support\\Request;\nuse app\\service\\Mailer;\n\nclass UserController\n{\n    private $mailer;\n\n    public function __construct(Mailer $mailer)\n    {\n        $this->mailer = $mailer;\n    }\n\n    public function register(Request $request)\n    {\n        $this->mailer->mail('hello@webman.com', 'Hello and welcome!');\n        return response('ok');\n    }\n}\"\n```\n\n----------------------------------------\n\nTITLE: Creating Task Process with Periodic Job Scheduling in PHP\nDESCRIPTION: Demonstrates various crontab scheduling patterns for executing tasks at different time intervals using Workerman Crontab\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/components/crontab.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace process;\n\nuse Workerman\\Crontab\\Crontab;\n\nclass Task\n{\n    public function onWorkerStart()\n    {\n        // Execute every second\n        new Crontab('\\/1 * * * * *', function(){\n            echo date('Y-m-d H:i:s').\"\\n\";\n        });\n        \n        // Execute every 5 seconds\n        new Crontab('\\/5 * * * * *', function(){\n            echo date('Y-m-d H:i:s').\"\\n\";\n        });\n        \n        // Execute every minute\n        new Crontab('0 \\/1 * * * *', function(){\n            echo date('Y-m-d H:i:s').\"\\n\";\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom WebSocket Handler\nDESCRIPTION: Example of creating a WebSocket handler class with connection, message, and close event handlers.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/process.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app;\n\nuse Workerman\\Connection\\TcpConnection;\n\nclass Pusher\n{\n    public function onConnect(TcpConnection $connection)\n    {\n        echo \"onConnect\\n\";\n    }\n\n    public function onWebSocketConnect(TcpConnection $connection, $http_buffer)\n    {\n        echo \"onWebSocketConnect\\n\";\n    }\n\n    public function onMessage(TcpConnection $connection, $data)\n    {\n        $connection->send($data);\n    }\n\n    public function onClose(TcpConnection $connection)\n    {\n        echo \"onClose\\n\";\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: First or Create Operations\nDESCRIPTION: Demonstrates the use of firstOrCreate and firstOrNew methods for conditional record creation.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/db/model.md#2025-04-12_snippet_25\n\nLANGUAGE: php\nCODE:\n```\n$flight = app\\modle\\Flight::firstOrCreate(['name' => 'Volo 10']);\n\n$flight = app\\modle\\Flight::firstOrCreate(\n    ['name' => 'Volo 10'],\n    ['delayed' => 1, 'arrival_time' => '11:30']\n);\n```\n\n----------------------------------------\n\nTITLE: Importing and Using push-vue.js in Vue\nDESCRIPTION: This code snippet demonstrates how to import and use the `push-vue.js` client library within a Vue component. It initializes the `webman-push` connection and subscribes to channels, handling incoming messages within the Vue component's lifecycle.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/pt/plugin/push.md#2025-04-12_snippet_8\n\nLANGUAGE: vue\nCODE:\n```\n<script lang=\"ts\" setup>\nimport { onMounted } from 'vue'\nimport { Push } from '../utils/push-vue'\n\nonMounted(() => {\n  console.log('Componente montado') \n\n  // Instanciação do webman-push\n\n  // Estabelecendo conexão\n  var connection = new Push({\n    url: 'ws://127.0.0.1:3131', // endereço do websocket\n    app_key: '<app_key, obtido em config/plugin/webman/push/app.php>',\n    auth: '/plugin/webman/push/auth' // autorização de inscrição (somente para canais privados)\n  });\n\n  // Supondo que o id do usuário seja 1\n  var uid = 1;\n  // O navegador escuta as mensagens do canal user-1, ou seja, as mensagens do usuário com id 1\n  var user_channel = connection.subscribe('user-' + uid);\n\n  // Quando o canal user-1 tem um evento de mensagem\n  user_channel.on('message', function (data) {\n    // data contém o conteúdo da mensagem\n    console.log(data);\n  });\n  // Quando o canal user-1 tem um evento de solicitação de amigo\n  user_channel.on('friendApply', function (data) {\n    // data contém informações relacionadas à solicitação de amigo\n    console.log(data);\n  });\n\n  // Supondo que o id do grupo seja 2\n  var group_id = 2;\n  // O navegador escuta as mensagens do canal group-2, ou seja, escuta as mensagens do grupo 2\n  var group_channel = connection.subscribe('group-' + group_id);\n  // Quando o grupo 2 tem um evento de mensagem\n  group_channel.on('message', function (data) {\n    // data contém o conteúdo da mensagem\n    console.log(data);\n  });\n\n})\n\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Cluster in webman-php\nDESCRIPTION: Example configuration for Redis cluster settings in config/redis.php.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/de/db/redis.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'clusters' => [\n        'default' => [\n            [\n                'host'     => 'localhost',\n                'password' => null,\n                'port'     => 6379,\n                'database' => 0,\n            ],\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring Casbin Basic Model\nDESCRIPTION: Basic Casbin model configuration defining request definitions, policies, roles, and matchers.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/casbin.md#2025-04-12_snippet_2\n\nLANGUAGE: conf\nCODE:\n```\n[request_definition]\nr = sub, obj, act\n\n[policy_definition]\np = sub, obj, act\n\n[role_definition]\ng = _, _\n\n[policy_effect]\ne = some(where (p.eft == allow))\n\n[matchers]\nm = g(r.sub, p.sub) && r.obj == p.obj && r.act == p.act\n```\n\n----------------------------------------\n\nTITLE: JavaScript Client WebSocket Connection Initialization\nDESCRIPTION: Setting up a WebSocket connection with push.js, subscribing to public and private channels, and handling message events\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/plugin/push.md#2025-04-12_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nvar connection = new Push({\n    url: 'ws://127.0.0.1:3131',\n    app_key: '<ключ_приложения>',\n    auth: '/plugin/webman/push/auth'\n});\n\nvar uid = 1;\nvar user_channel = connection.subscribe('user-' + uid);\n\nuser_channel.on('message', function(data) {\n    console.log(data);\n});\n```\n\n----------------------------------------\n\nTITLE: Model Deletion Operations\nDESCRIPTION: Various methods for deleting models including single deletion, bulk deletion, and conditional deletion.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/pt/db/model.md#2025-04-12_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$flight = app\\modle\\Flight::find(1);\n$flight->delete();\n\napp\\modle\\Flight::destroy(1);\n\napp\\modle\\Flight::destroy(1, 2, 3);\n\napp\\modle\\Flight::destroy([1, 2, 3]);\n\napp\\modle\\Flight::destroy(collect([1, 2, 3]));\n```\n\n----------------------------------------\n\nTITLE: Selecting Specific Columns from a Table in PHP\nDESCRIPTION: This snippet shows how to select specific columns from a 'user' table using the select() method. It also demonstrates how to alias a column name.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/tr/db/queries.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('user')->select('name', 'email as user_email')->get();\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Records from Eloquent Model\nDESCRIPTION: Demonstrates how to retrieve all records from a database table using the all() method on an Eloquent model.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/db/model.md#2025-04-12_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$users = app\\model\\User::all();\n\nforeach ($users as $user) {\n    echo $user->name;\n}\n```\n\n----------------------------------------\n\nTITLE: Middleware Interface Definition in Webman PHP\nDESCRIPTION: This code defines the `MiddlewareInterface` in Webman PHP. Middleware classes must implement this interface and its `process` method. The `process` method handles the request and either returns a response or passes the request to the next middleware/controller in the chain.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/middleware.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n\"<?php\ninterface MiddlewareInterface\n{\n    /**\n     * Process an incoming server request.\n     *\n     * Processes an incoming server request in order to produce a response.\n     * If unable to produce the response itself, it may delegate to the provided\n     * request handler to do so.\n     */\n    public function process(Request $request, callable $handler): Response;\n}\"\n```\n\n----------------------------------------\n\nTITLE: Setting Non-Integer Primary Key Type in Eloquent\nDESCRIPTION: Demonstrates how to specify a non-integer primary key type in an Eloquent model by setting the $keyType property.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/db/model.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nclass User extends Model\n{\n    protected $keyType = 'string';\n}\n```\n\n----------------------------------------\n\nTITLE: Event Subscriber Implementation in PHP\nDESCRIPTION: Creating an event subscriber class that implements event handling logic for specific events\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/th/event.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nclass LoggerSubscriber implements EventSubscriberInterface\n{\n    public static function getSubscribedEvents()\n    {\n        return [\n            LogErrorWriteEvent::NAME => 'onLogErrorWrite',\n        ];\n    }\n\n    public function onLogErrorWrite(LogErrorWriteEvent $event)\n    {\n        var_dump($event->handle());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Permission Service in Bootstrap Configuration\nDESCRIPTION: Code snippet showing how to register the Permission service in the Webman bootstrap configuration file.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-hk/casbin.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n    // ...\n    webman\\permission\\Permission::class,\n```\n\n----------------------------------------\n\nTITLE: Redis Interface Methods\nDESCRIPTION: Comprehensive list of available Redis interface methods for data manipulation\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/pt/db/redis.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nRedis::append($key, $value)\nRedis::bitCount($key)\nRedis::decr($key, $value)\nRedis::decrBy($key, $value)\nRedis::get($key)\nRedis::getBit($key, $offset)\nRedis::getRange($key, $start, $end)\nRedis::getSet($key, $value)\nRedis::incr($key, $value)\nRedis::incrBy($key, $value)\nRedis::incrByFloat($key, $value)\nRedis::mGet(array $keys)\nRedis::getMultiple(array $keys)\nRedis::mSet($pairs)\nRedis::mSetNx($pairs)\nRedis::set($key, $value, $expireResolution = null, $expireTTL = null, $flag = null)\nRedis::setBit($key, $offset, $value)\nRedis::setEx($key, $ttl, $value)\nRedis::pSetEx($key, $ttl, $value)\nRedis::setNx($key, $value)\nRedis::setRange($key, $offset, $value)\nRedis::strLen($key)\nRedis::del(...$keys)\nRedis::exists(...$keys)\nRedis::expire($key, $ttl)\nRedis::expireAt($key, $timestamp)\nRedis::select($dbIndex)\n```\n\n----------------------------------------\n\nTITLE: ThinkPHP Template for Pagination\nDESCRIPTION: ThinkPHP template implementation for displaying raw pagination controls with Bootstrap styling.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/db/paginator.md#2025-04-12_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<html>\n<head>\n    <!-- Built-in support for Bootstrap pagination styles -->\n    <link rel=\"stylesheet\" href=\"//maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css\">\n</head>\n<body>\n\n{$users|raw}\n\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Setting Up Model Observers in Eloquent\nDESCRIPTION: Demonstrates how to implement model observers by overriding the boot method and registering an observer class to handle model events.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/tr/db/model.md#2025-04-12_snippet_35\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\model;\n\nuse support\\Model;\nuse app\\observer\\UserObserver;\n\nclass User extends Model\n{\n    public static function boot()\n    {\n        parent::boot();\n        static::observe(UserObserver::class);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Context Usage in WebMan PHP Controller\nDESCRIPTION: This code snippet defines a TestController class with an index method that uses the Context class to set and retrieve a 'name' value from the request. It demonstrates how to handle request parameters and use the Context for data storage and retrieval in a WebMan PHP application.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/bn/coroutine/context.md#2025-04-12_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nnamespace app\\controller;\n\nuse support\\Request;\nuse support\\Context;\n\nclass TestController\n{\n    public function index(Request $request)\n    {\n        Context::set('name', $request->get('name'));\n        return Context::get('name');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining User Service Class in PHP for AOP Testing\nDESCRIPTION: Example PHP class (UserService) that will be intercepted by AOP.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/de/aop.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\service;\n\nclass UserService\n{\n    public function first(): array\n    {\n        return ['id' => 1];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Not Between Conditions in webman-php\nDESCRIPTION: Using whereNotBetween to filter records where a field value is outside of two values. This example retrieves users with votes not between 1 and 100.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/db/queries.md#2025-04-12_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')\n                    ->whereNotBetween('votes', [1, 100])\n                    ->get();\n```\n\n----------------------------------------\n\nTITLE: Batch Update Operations\nDESCRIPTION: Demonstrates how to perform batch updates on multiple records using where conditions.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/db/model.md#2025-04-12_snippet_21\n\nLANGUAGE: php\nCODE:\n```\napp\\model\\User::where('uid', '>', 10)\n          ->update(['name' => 'tom']);\n```\n\n----------------------------------------\n\nTITLE: Triggering Custom Event in PHP\nDESCRIPTION: Example of triggering the LogErrorWriteEvent with error data using the EventManager.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/event.md#2025-04-12_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$error = [\n    'errorMessage' => 'Error message',\n    'errorCode' => 500\n];\nEventManager::trigger(new LogErrorWriteEvent($error),LogErrorWriteEvent::NAME);\n```\n\n----------------------------------------\n\nTITLE: View Response in Webman PHP Controller\nDESCRIPTION: Shows how to return HTML views using Webman's view helper. Passes data to a template and renders it as HTML.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/tutorial.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\n\nclass UserController\n{\n    public function hello(Request $request)\n    {\n        $default_name = 'webman';\n        $name = $request->get('name', $default_name);\n        return view('user/hello', ['name' => $name]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using whereIn Conditions in webman-php\nDESCRIPTION: Using whereIn to filter records where a field value is in a specified array. This example retrieves users with ids 1, 2, or 3.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/db/queries.md#2025-04-12_snippet_21\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')\n                    ->whereIn('id', [1, 2, 3])\n                    ->get();\n```\n\n----------------------------------------\n\nTITLE: Avoiding Global Variable Pollution in PHP Coroutines with Webman\nDESCRIPTION: This code demonstrates the incorrect use of static variables in a coroutine environment, which can lead to data pollution across requests.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/upgrade/1-5.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace app\\controller;\n\nuse support\\Request;\nuse Workerman\\Timer;\n\nclass TestController\n{\n    protected static $name = '';\n\n    public function index(Request $request)\n    {\n        static::$name = $request->get('name');\n        Timer::sleep(5);\n        return static::$name;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: XML Function Implementation\nDESCRIPTION: This snippet shows the implementation of the `xml()` helper function, which creates a `support\\Response` object with the `Content-Type` header set to `text/xml` and the body set to the XML data. It handles `SimpleXMLElement` instances by converting them to XML strings.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/response.md#2025-04-12_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nfunction xml($xml)\n{\n    if ($xml instanceof SimpleXMLElement) {\n        $xml = $xml->asXML();\n    }\n    return new Response(200, ['Content-Type' => 'text/xml'], $xml);\n}\n\n```\n\n----------------------------------------\n\nTITLE: Get Specific Uploaded File - Webman PHP\nDESCRIPTION: Retrieves a specific uploaded file by its name. If the file is found, it returns the corresponding `webman\\Http\\UploadFile` instance; otherwise, it returns null.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/th/request.md#2025-04-12_snippet_21\n\nLANGUAGE: php\nCODE:\n```\n$request->file('avatar');\n```\n\n----------------------------------------\n\nTITLE: Removing Duplicates from Query Results in PHP\nDESCRIPTION: This snippet demonstrates how to remove duplicate results from a query using the distinct() method.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/tr/db/queries.md#2025-04-12_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$email = Db::table('user')->select('nickname')->distinct()->get();\n```\n\n----------------------------------------\n\nTITLE: Advanced Validation Features Example\nDESCRIPTION: Comprehensive example showing various validation features including individual rules, multiple rules, error handling, and custom messages.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/pt/components/validation.md#2025-04-12_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Respect\\Validation\\Validator as v;\n\n// Validar regras individuais\n$number = 123;\nv::numericVal()->validate($number); // true\n\n// Validar cadeias de regras múltiplas\n$usernameValidator = v::alnum()->noWhitespace()->length(1, 15);\n$usernameValidator->validate('alganet'); // true\n\n// Obter a primeira causa de falha de validação\ntry {\n    $usernameValidator->setName('Nome de usuário')->check('alg  anet');\n} catch (ValidationException $exception) {\n    echo $exception->getMessage();\n}\n```\n\n----------------------------------------\n\nTITLE: Installing webman-event using Composer\nDESCRIPTION: This command installs the tinywan/webman-event package using Composer, which is required for using the event system in webman.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/fr/event.md#2025-04-12_snippet_0\n\nLANGUAGE: Shell Script\nCODE:\n```\ncomposer require tinywan/webman-event\n```\n\n----------------------------------------\n\nTITLE: Removing Leading Slash from View Path (PHP)\nDESCRIPTION: This PHP code demonstrates a necessary change when upgrading: removing the leading slash from view paths in the `view()` function. This ensures that the view is resolved correctly after the upgrade. Not removing the slash may cause your application to crash.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/upgrade/1-6.md#2025-04-12_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nreturn view('/user/index');\n// 需要改成\nreturn view('user/index');\n```\n\n----------------------------------------\n\nTITLE: Downloading a File in Webman PHP\nDESCRIPTION: Illustrates how to force a file download using the `download()` method of the `support\\Response` object.  Specifying a filename will prompt the user to download instead of displaying the file in the browser.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/pt/response.md#2025-04-12_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\n\nclass FooController\n{\n    public function hello(Request $request)\n    {\n        return response()->download(public_path() . '/favicon.ico', 'filename.ico');\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Directory Structure for Webman Application Plugin\nDESCRIPTION: Shows the standard directory structure created when using the webman app-plugin:create command to generate a new plugin\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/plugin/app.md#2025-04-12_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nplugin/\n└── cms\n    ├── app\n    │   ├── controller\n    │   │   └── IndexController.php\n    │   ├── exception\n    │   │   └── Handler.php\n    │   ├── functions.php\n    │   ├── middleware\n    │   ├── model\n    │   └── view\n    │       └── index\n    │           └── index.html\n    ├── config\n    │   ├── app.php\n    │   ├── autoload.php\n    │   ├── container.php\n    │   ├── database.php\n    │   ├── exception.php\n    │   ├── log.php\n    │   ├── middleware.php\n    │   ├── process.php\n    │   ├── redis.php\n    │   ├── route.php\n    │   ├── static.php\n    │   ├── thinkorm.php\n    │   ├── translation.php\n    │   └── view.php\n    └── public\n```\n\n----------------------------------------\n\nTITLE: Twig View Configuration\nDESCRIPTION: Setup and configuration for using Twig templating engine in Webman, including composer installation and view configuration\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/view.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse support\\view\\Twig;\n\nreturn [\n    'handler' => Twig::class,\n    'options' => [\n        'debug' => false,\n        'charset' => 'utf-8'\n    ]\n];\n```\n\nLANGUAGE: html\nCODE:\n```\n<!doctype html>\n<html>\n<head>\n    <meta charset=\"utf-8\">\n    <title>webman</title>\n</head>\n<body>\nhello {{name}}\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Session Data in Webman\nDESCRIPTION: Shows how to get all session data at once using the all() method. Returns an array of all session values or an empty array if no data exists.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/fr/session.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$session = $request->session();\n$all = $session->all();\n```\n\n----------------------------------------\n\nTITLE: Using BusinessException in Webman PHP Controller\nDESCRIPTION: This example demonstrates how to use BusinessException in a controller to handle business logic errors and return appropriate responses to the client.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/exception.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\nuse support\\exception\\BusinessException;\n\nclass FooController\n{\n    public function index(Request $request)\n    {\n        $this->chackInpout($request->post());\n        return response('hello index');\n    }\n    \n    protected function chackInpout($input)\n    {\n        if (!isset($input['token'])) {\n            throw new BusinessException('Parametro errato', 3000);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Models by Key in Eloquent\nDESCRIPTION: Demonstrates how to delete models by their primary keys without first retrieving them, using the destroy method with single or multiple keys.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/tr/db/model.md#2025-04-12_snippet_31\n\nLANGUAGE: php\nCODE:\n```\napp\\modle\\Flight::destroy(1);\n\napp\\modle\\Flight::destroy(1, 2, 3);\n\napp\\modle\\Flight::destroy([1, 2, 3]);\n\napp\\modle\\Flight::destroy(collect([1, 2, 3]));\n```\n\n----------------------------------------\n\nTITLE: Pushing Messages from Server (PHP)\nDESCRIPTION: This PHP code demonstrates how to use the `webman/push` API to send messages to subscribed clients. It initializes the API client with the server address, app key, and app secret, then triggers a 'message' event on the 'user-1' channel with the provided data.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-hk/plugin/push.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Webman\\Push\\Api;\n$api = new Api(\n    // webman下可以直接使用config獲取配置，非webman環境需要手動寫入相應配置\n    'http://127.0.0.1:3232',\n    config('plugin.webman.push.app.app_key'),\n    config('plugin.webman.push.app.app_secret')\n);\n// 給訂閱 user-1 的所有客戶端推送 message 事件的消息\n$api->trigger('user-1', 'message', [\n    'from_uid' => 2,\n    'content'  => '你好，這個是消息內容'\n]);\n```\n\n----------------------------------------\n\nTITLE: Updating Existing Model Records\nDESCRIPTION: Shows how to update an existing model record by finding it first and then saving changes.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/db/model.md#2025-04-12_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n$user = app\\model\\User::find(1);\n$user->name = 'jerry';\n$user->save();\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Connections in Webman\nDESCRIPTION: This code snippet demonstrates how to configure multiple Redis connections in a Webman PHP project.  Each connection is defined with a host, password, port, and database.  This configuration file is typically located within a plugin's configuration directory.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/es/app/redis.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'default' => [\n        'host' => '127.0.0.1',\n        'password' => null,\n        'port' => 6379,\n        'database' => 0,\n    ],\n    'cache' => [\n        'host' => '127.0.0.1',\n        'password' => null,\n        'port' => 6379,\n        'database' => 1,\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Mass Assignment Protection Model\nDESCRIPTION: Example of defining fillable properties in a model to prevent mass assignment vulnerabilities.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/pt/db/model.md#2025-04-12_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace app\\model;\n\nuse support\\Model;\n\nclass Flight extends Model\n{\n    /**\n     * Propriedades que podem ser atribuídas em massa.\n     *\n     * @var array\n     */\n    protected $fillable = ['name'];\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Requested Method Name - PHP\nDESCRIPTION: This method fetches the name of the requested method in the controller being called. It will return an empty string for closure routes, as they do not have an associated method.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/request.md#2025-04-12_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n$request->action;\n```\n\n----------------------------------------\n\nTITLE: Get Client Real IP Address in webman-php\nDESCRIPTION: This snippet shows how to retrieve the client's real IP address using `$request->getRealIp($safe_mode=true)` in webman-php. When using a proxy, `$request->getRemoteIp()` may return the proxy IP. `$request->getRealIp()` checks HTTP headers to determine the client's IP. The `$safe_mode` parameter indicates whether to apply certain security considerations, as HTTP headers can be easily spoofed.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/pt/request.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$request->getRealIp($safe_mode=true);\n```\n\n----------------------------------------\n\nTITLE: Configuring Event System\nDESCRIPTION: Basic configuration structure for event system defining listeners and subscribers\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/event.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    // 事件监听\n    'listener'    => [],\n\n    // 事件订阅器\n    'subscriber' => [],\n];\n```\n\n----------------------------------------\n\nTITLE: Inserting Data into Database Tables in PHP\nDESCRIPTION: This snippet shows how to insert single and multiple rows of data into database tables using the insert() method.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/tr/db/queries.md#2025-04-12_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nDb::table('kullanıcılar')->insert(\n    ['email' => 'john@example.com', 'oylar' => 0]\n);\n\nDb::table('kullanıcılar')->insert([\n    ['email' => 'taylor@example.com', 'oylar' => 0],\n    ['email' => 'dayle@example.com', 'oylar' => 0]\n]);\n```\n\n----------------------------------------\n\nTITLE: Consuming Messages from Stomp Queue in PHP\nDESCRIPTION: This snippet shows how to create a consumer class for processing messages from a Stomp queue. It implements the Consumer interface, specifies queue settings, and defines the consume method for handling incoming messages.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/queue/stomp.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\queue\\stomp;\n\nuse Workerman\\Stomp\\AckResolver;\nuse Webman\\Stomp\\Consumer;\n\nclass MyMailSend implements Consumer\n{\n    // 隊列名\n    public $queue = 'examples';\n\n    // 連接名，對應 stomp.php 裡的連接\n    public $connection = 'default';\n\n    // 值為 client 時需要調用$ack_resolver->ack()告訴服務端已經成功消費\n    // 值為 auto   時無需調用$ack_resolver->ack()\n    public $ack = 'auto';\n\n    // 消費\n    public function consume($data, AckResolver $ack_resolver = null)\n    {\n        // 如果是數據是數組，需要自行反序列化\n        var_export(json_decode($data, true)); // 輸出 ['to' => 'tom@gmail.com', 'content' => 'hello']\n        // 告訴服務端，已經成功消費\n        $ack_resolver->ack(); // ack為 auto時可以省略此調用\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Controller without Suffix in Webman PHP\nDESCRIPTION: Example of creating a controller class without the 'Controller' suffix, showing the same functionality as the suffixed version. This pattern is available from version 1.3 when controller_suffix is set to empty in config.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/controller.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\n\nclass Foo\n{\n    public function index(Request $request)\n    {\n        return response('hello index');\n    }\n    \n    public function hello(Request $request)\n    {\n        return response('hello webman');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom HTTP Process\nDESCRIPTION: Configuration example for setting up a custom HTTP server process including port, worker count, and constructor parameters.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/process.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Workerman\\Worker;\n\nreturn [\n    'my-http' => [\n        'handler' => app\\Server::class,\n        'listen' => 'http://0.0.0.0:8686',\n        'count' => 8,\n        'user' => '',\n        'group' => '',\n        'reusePort' => true,\n        'constructor' => [\n            'request_class' => \\support\\Request::class,\n            'logger' => \\support\\Log::channel('default'),\n            'app_path' => app_path(),\n            'public_path' => public_path()\n        ]\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Checking Attribute Changes with isDirty and isClean\nDESCRIPTION: Shows how to use isDirty and isClean methods to check if model attributes have changed since loading. These methods can target specific attributes or check the entire model.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/es/db/model.md#2025-04-12_snippet_27\n\nLANGUAGE: php\nCODE:\n```\n$user = User::create([\n    'first_name' => 'Taylor',\n    'last_name' => 'Otwell',\n    'title' => 'Developer',\n]);\n\n$user->title = 'Painter';\n\n$user->isDirty(); // true\n$user->isDirty('title'); // true\n$user->isDirty('first_name'); // false\n\n$user->isClean(); // false\n$user->isClean('title'); // false\n$user->isClean('first_name'); // true\n\n$user->save();\n\n$user->isDirty(); // false\n$user->isClean(); // true\n```\n\n----------------------------------------\n\nTITLE: Implementing Event Handler Class in PHP\nDESCRIPTION: Example event handler class showing implementation of event handling methods for user registration and logout events.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/components/event.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\event;\nclass User\n{\n    function register($user)\n    {\n        var_export($user);\n    }\n \n    function logout($user)\n    {\n        var_export($user);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Alipay Asynchronous Notifications\nDESCRIPTION: Implementation of the asynchronous notification handling for Alipay payments. It processes the callback data and returns a response to Alipay.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-hk/components/payment.md#2025-04-12_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse support\\Request;\nuse Webman\\Config;\nuse Yansongda\\Pay\\Pay;\n\n/**\n * @desc:『支付宝』异步通知\n * @param Request $request\n * @return Response\n */\npublic function alipayNotify(Request $request): Response\n{\n    // 1. 获取配置文件 config/payment.php\n    $config = Config::get('payment');\n\n    // 2. 初始化配置\n    Pay::config($config);\n\n    // 3. 支付宝回调处理\n    $result = Pay::alipay()->callback($request->post());\n\n    // ===================================================================================================\n    // 请自行对 trade_status 进行判断及其它逻辑进行判断，只有交易通知状态为 TRADE_SUCCESS 或 TRADE_FINISHED 时，支付宝才会认定为买家付款成功。\n    // 1、商户需要验证该通知数据中的out_trade_no是否为商户系统中创建的订单号；\n    // 2、判断total_amount是否确实为该订单的实际金额（即商户订单创建时的金额）；\n    // 3、校验通知中的seller_id（或者seller_email) 是否为out_trade_no这笔单据的对应的操作方；\n    // 4、验证app_id是否为该商户本身。\n    // 5、其它业务逻辑情况\n    // ===================================================================================================\n\n    // 5. 支付宝回调处理\n    return new Response(200, [], 'success');\n}\n```\n\n----------------------------------------\n\nTITLE: Container Usage for Instance Reuse in WebMan\nDESCRIPTION: Shows how to use WebMan's Container to manage class instances for reuse across requests within the same process.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/others/lifecycle.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace app\\controller;\n\nuse app\\service\\Foo;\nuse support\\Container;\nuse support\\Request;\n\nclass IndexController\n{\n    public function index(Request $request)\n    {\n        $foo = Container::get(Foo::class);\n        return response($foo->sayHello());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring PHP-DI Container\nDESCRIPTION: Configuration for container.php to set up PHP-DI with autowiring and annotations enabled.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/di.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$builder = new \\DI\\ContainerBuilder();\n$builder->addDefinitions(config('dependence', []));\n$builder->useAutowiring(true);\n$builder->useAnnotations(true);\nreturn $builder->build();\n```\n\n----------------------------------------\n\nTITLE: Using the push.js client (public channel)\nDESCRIPTION: This code snippet demonstrates how to use the `push.js` client to connect to the `webman/push` server and subscribe to a public channel. It sets up a connection, subscribes to channels, and listens for events, handling incoming messages.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/pt/plugin/push.md#2025-04-12_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Estabelecer a conexão\nvar connection = new Push({\n    url: 'ws://127.0.0.1:3131', // endereço websocket\n    app_key: '<chave do aplicativo, obtida em config/plugin/webman/push/app.php>',\n    auth: '/plugin/webman/push/auth' // autenticação para subscrição (apenas para canais privados)\n});\n// Supondo que o id do usuário é 1\nvar uid = 1;\n// O navegador ouve as mensagens do canal user-1, ou seja, mensagens do usuário com id 1\nvar user_channel = connection.subscribe('user-' + uid);\n\n// Quando o canal user-1 tem mensagens do evento\nuser_channel.on('message', function(data) {\n    // os dados contêm o conteúdo da mensagem\n    console.log(data);\n});\n// Quando o canal user-1 tem mensagens do evento friendApply\nuser_channel.on('friendApply', function (data) {\n    // os dados contêm informações relacionadas à solicitação de amizade\n    console.log(data);\n});\n\n// Supondo que o ID do grupo é 2\nvar group_id = 2;\n// O navegador ouve as mensagens do canal group-2, ou seja, as mensagens do grupo 2\nvar group_channel = connection.subscribe('group-' + group_id);\n// Quando o grupo 2 tem mensagens do evento message\ngroup_channel.on('message', function(data) {\n    // os dados contêm o conteúdo da mensagem\n    console.log(data);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom File Autoloading in Webman\nDESCRIPTION: This PHP code configures Webman's autoload.php to load custom files that may not comply with PSR standards. It demonstrates loading function files and custom Request and Response classes.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/others/autoload.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'files' => [\n        base_path() . '/app/functions.php',\n        base_path() . '/support/Request.php', \n        base_path() . '/support/Response.php',\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Using Cursor for Memory-Efficient Iteration in Eloquent\nDESCRIPTION: Demonstrates how to use the cursor() method for memory-efficient iteration over large datasets in Eloquent.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/db/model.md#2025-04-12_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nforeach (app\\model\\User::where('sex', 1')->cursor() as $user) {\n    //\n}\n\n$users = app\\model\\User::cursor()->filter(function ($user) {\n    return $user->id > 500;\n});\n\nforeach ($users as $user) {\n    echo $user->id;\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Session Data in Webman PHP\nDESCRIPTION: Demonstrates how to get all session data using the all() method on the session object.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/session.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$session = $request->session();\n$all = $session->all();\n```\n\n----------------------------------------\n\nTITLE: Using Group By and Having Clauses in webman-php\nDESCRIPTION: Using groupBy and having to group and filter aggregated results. These examples group users by account_id and filter groups where account_id > 100.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/db/queries.md#2025-04-12_snippet_30\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')\n                ->groupBy('account_id')\n                ->having('account_id', '>', 100)\n                ->get();\n// Вы также можете передавать несколько параметров в метод groupBy\n$users = Db::table('users')\n                ->groupBy('first_name', 'status')\n                ->having('account_id', '>', 100)\n                ->get();\n```\n\n----------------------------------------\n\nTITLE: Chunking Results by ID in Webman PHP\nDESCRIPTION: This snippet demonstrates how to process large result sets in chunks using the chunkById method.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/hi/db/queries.md#2025-04-12_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')->orderBy('id')->chunkById(100, function ($users) {\n    foreach ($users as $user) {\n        //\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Where In Clause in Webman PHP\nDESCRIPTION: This snippet shows how to use the whereIn method to filter results based on an array of values.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/hi/db/queries.md#2025-04-12_snippet_24\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')\n                    ->whereIn('id', [1, 2, 3])\n                    ->get();\n```\n\n----------------------------------------\n\nTITLE: Installing Phinx via Composer\nDESCRIPTION: Command to install Phinx database migration tool using Composer package manager\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/db/migration.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ncomposer require robmorgan/phinx\n```\n\n----------------------------------------\n\nTITLE: Customizing Timestamp Format in Eloquent Model\nDESCRIPTION: Demonstrates how to customize the timestamp format in an Eloquent model by setting the $dateFormat property.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/db/model.md#2025-04-12_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nclass User extends Model\n{\n    /**\n     * Формат хранения метки времени\n     *\n     * @var string\n     */\n    protected $dateFormat = 'U';\n}\n```\n\n----------------------------------------\n\nTITLE: Ordering by Subquery in Eloquent\nDESCRIPTION: Demonstrates how to order query results based on a subquery in Eloquent.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/db/model.md#2025-04-12_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nreturn Destination::orderByDesc(\n    Flight::select('arrived_at')\n        ->whereColumn('destination_id', 'destinations.id')\n        ->orderBy('arrived_at', 'desc')\n        ->limit(1)\n)->get();\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Exception Handler in Webman PHP\nDESCRIPTION: This snippet shows how to configure the custom exception handler in Webman PHP by modifying the config/exception.php file.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/de/others/custom-error-page.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    '' => \\app\\exception\\Handler::class,\n];\n```\n\n----------------------------------------\n\nTITLE: Safe Usage of Local Variables in PHP Coroutines\nDESCRIPTION: Illustrates how using local variables in coroutines is safe and doesn't cause data pollution, as coroutines cannot access each other's local variables.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/jp/coroutine/fiber.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace app\\controller;\n\nuse support\\Request;\nuse support\\Context;\nuse Workerman\\Timer;\n\nclass TestController\n{\n    public function index(Request $request)\n    {\n        $name = $request->get('name');\n        Timer::sleep(5);\n        return $name;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Delayed Response with Timer in Webman PHP\nDESCRIPTION: Demonstrates non-blocking sleep functionality using Timer::sleep() in a controller. This allows delaying response without blocking the process.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/coroutine/fiber.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace app\\controller;\n\nuse support\\Request;\nuse Workerman\\Timer;\n\nclass TestController\n{\n    public function index(Request $request)\n    {\n        // Sleep for 1.5 seconds\n        Timer::sleep(1.5);\n        return $request->getRemoteIp();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a custom command\nDESCRIPTION: Example of creating a custom command for displaying MySQL configuration. This involves generating a command file using `make:command` and then modifying it to fetch and display the configuration.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/plugin/console.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n\"<?php\n\nnamespace app\\command;\n\nuse Symfony\\Component\\Console\\Command\\Command;\nuse Symfony\\Component\\Console\\Helper\\Table;\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\n\nclass ConfigMySQLCommand extends Command\n{\n    protected static $defaultName = 'config:mysql';\n    protected static $defaultDescription = '显示当前MySQL服务器配置';\n\n    protected function execute(InputInterface $input, OutputInterface $output)\n    {\n        $output->writeln('MySQL配置信息如下：');\n        $config = config('database');\n        $headers = ['name', 'default', 'driver', 'host', 'port', 'database', 'username', 'password', 'unix_socket', 'charset', 'collation', 'prefix', 'strict', 'engine', 'schema', 'sslmode'];\n        $rows = [];\n        foreach ($config['connections'] as $name => $db_config) {\n            $row = [];\n            foreach ($headers as $key) {\n                switch ($key) {\n                    case 'name':\n                        $row[] = $name;\n                        break;\n                    case 'default':\n                        $row[] = $config['default'] == $name ? 'true' : 'false';\n                        break;\n                    default:\n                        $row[] = $db_config[$key] ?? '';\n                }\n            }\n            if ($config['default'] == $name) {\n                array_unshift($rows, $row);\n            } else {\n                $rows[] = $row;\n            }\n        }\n        $table = new Table($output);\n        $table->setHeaders($headers);\n        $table->setRows($rows);\n        $table->render();\n        return self::SUCCESS;\n    }\n}\n\"\n```\n\n----------------------------------------\n\nTITLE: Respect Validation Exception Handling\nDESCRIPTION: Illustrates how to catch `ValidationException` exceptions thrown by the `respect/validation` library and return a JSON response with an error code and message. This allows for custom error handling and response formatting.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/components/validation.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\nuse Respect\\Validation\\Validator as v;\nuse Respect\\Validation\\Exceptions\\ValidationException;\n\nclass IndexController\n{\n    public function index(Request $request)\n    {\n        try {\n            $data = v::input($request->post(), [\n                'username' => v::alnum()->length(5, 64)->setName('使用者名稱'),\n                'password' => v::length(5, 64)->setName('密碼')\n            ]);\n        } catch (ValidationException $e) {\n            return json(['code' => 500, 'msg' => $e->getMessage()]);\n        }\n        return json(['code' => 0, 'msg' => 'ok', 'data' => $data]);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Disabling Auto-incrementing Primary Key in Eloquent Model\nDESCRIPTION: Shows how to configure an Eloquent model to use a non-incrementing primary key by setting $incrementing to false.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/db/model.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nclass User extends Model\n{\n    /**\n     * Указывает, увеличивается ли первичный ключ модели\n     *\n     * @var bool\n     */\n    public $incrementing = false;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Logging in Webman PHP Controller\nDESCRIPTION: Demonstrates how to use the Log facade for simple logging in a Webman PHP controller. Shows basic logging of an informational message.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-hk/log.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\nuse support\\Log;\n\nclass FooController\n{\n    public function index(Request $request)\n    {\n        Log::info('log test');\n        return response('hello index');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Raw Expressions in WebMan PHP Query Builder\nDESCRIPTION: Demonstrates how to use raw SQL expressions within queries, including parameter binding for security.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/jp/db/queries.md#2025-04-12_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$orders = Db::table('orders')\n                ->selectRaw('price * ? as price_with_tax', [1.0825])\n                ->get();\n```\n\nLANGUAGE: php\nCODE:\n```\n$orders = Db::table('orders')\n                ->select('department', Db::raw('SUM(price) as total_sales'))\n                ->groupBy('department')\n                ->havingRaw('SUM(price) > ?', [2500])\n                ->get();\n```\n\n----------------------------------------\n\nTITLE: Creating an Event Subscriber in PHP\nDESCRIPTION: This snippet demonstrates the implementation of a LoggerSubscriber class that listens for LogErrorWriteEvent. It uses the EventSubscriberInterface to define subscribed events and the corresponding methods to handle them.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/event.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nnamespace extend\\event\\subscriber;\n\nuse extend\\event\\LogErrorWriteEvent;\nuse Symfony\\Component\\EventDispatcher\\EventSubscriberInterface;\n\nclass LoggerSubscriber implements EventSubscriberInterface\n{\n    /**\n     * @desc: 方法描述\n     * @return array|string[]\n     */\n    public static function getSubscribedEvents()\n    {\n        return [\n            LogErrorWriteEvent::NAME => 'onLogErrorWrite',\n        ];\n    }\n\n    /**\n     * @desc: 觸發事件\n     * @param LogErrorWriteEvent $event\n     */\n    public function onLogErrorWrite(LogErrorWriteEvent $event)\n    {\n        // 一些具體的業務邏輯\n        var_dump($event->handle());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Example of Global Variable Pollution in Coroutines\nDESCRIPTION: An example showing how static variables can cause data pollution in a coroutine environment. When multiple requests are processed concurrently, they can overwrite each other's data in static variables, leading to unexpected results.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/fr/upgrade/1-5.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace app\\controller;\n\nuse support\\Request;\nuse Workerman\\Timer;\n\nclass TestController\n{\n    protected static $name = '';\n\n    public function index(Request $request)\n    {\n        static::$name = $request->get('name');\n        Timer::sleep(5);\n        return static::$name;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Global Middleware Configuration in PHP\nDESCRIPTION: This config snippet configures a global middleware.  The specified middleware class will be executed for every request handled by the application.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-hk/middleware.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n\"return [\n    // 全局中間件\n    '' => [\n        // ... 這裡省略其他中間件\n        app\\middleware\\AuthCheckTest::class,\n    ]\n];\"\n```\n\n----------------------------------------\n\nTITLE: Specifying Database Connection in Eloquent Model\nDESCRIPTION: Demonstrates how to specify a custom database connection for an Eloquent model by setting the $connection property.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/jp/db/model.md#2025-04-12_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nclass User extends Model\n{\n    protected $connection = 'connection-name';\n}\n```\n\n----------------------------------------\n\nTITLE: Selecting Specific Redis Connection in Webman\nDESCRIPTION: Example showing how to select a specific Redis connection by name from those defined in the configuration.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/db/redis.md#2025-04-12_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$redis = Redis::connection('cache');\n$redis->get('test_key');\n```\n\n----------------------------------------\n\nTITLE: JSON Function Implementation\nDESCRIPTION: This snippet shows the implementation of the `json()` helper function, which creates a `support\\Response` object with the `Content-Type` header set to `application/json` and the body set to the JSON-encoded data. It takes the data to be encoded and optional JSON encoding options as parameters.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/response.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nfunction json($data, $options = JSON_UNESCAPED_UNICODE)\n{\n    return new Response(200, ['Content-Type' => 'application/json'], json_encode($data, $options));\n}\n\n```\n\n----------------------------------------\n\nTITLE: Response Function Implementation\nDESCRIPTION: This snippet shows the implementation of the `response()` helper function, which creates a `support\\Response` object with the given body, status code, and headers.  It takes optional parameters for the response body, HTTP status code, and headers.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/response.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nfunction response($body = '', $status = 200, $headers = array())\n{\n    return new Response($status, $headers, $body);\n}\n\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Message Sending with Client::send()\nDESCRIPTION: Asynchronous method for sending messages to Redis queue with automatic queueing\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/th/queue/redis.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\npublic function queue(Request $request)\n{\n    $queue = 'send-mail';\n    $data = ['to' => 'tom@gmail.com', 'content' => 'hello'];\n    Client::send($queue, $data);\n    Client::send($queue, $data, 60);\n    return response('Redis Queue Test');\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Database Records in PHP\nDESCRIPTION: Demonstrates methods for deleting records from a database table, including deleting all records and deleting records based on specific conditions. Includes table truncate functionality to completely reset a table.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/db/queries.md#2025-04-12_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')->delete();\n\nDb::table('users')->where('votes', '>', 100)->delete();\n\nDb::table('users')->truncate();\n```\n\n----------------------------------------\n\nTITLE: Extender Twig en Webman\nDESCRIPTION: Este snippet muestra cómo extender la instancia de vista Twig en Webman. Agrega una extensión, un filtro y una función a la instancia de Twig.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/es/view.md#2025-04-12_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse support\\view\\Twig;\nreturn [\n    'handler' => Twig::class,\n    'extension' => function (Twig\\Environment $twig) {\n        $twig->addExtension(new your\\namespace\\YourExtension()); // Agregar extensión\n        $twig->addFilter(new Twig\\TwigFilter('rot13', 'str_rot13')); // Agregar filtro\n        $twig->addFunction(new Twig\\TwigFunction('function_name', function () {})); // Agregar función\n    }\n];\n```\n\n----------------------------------------\n\nTITLE: Creating Language Files in Webman\nDESCRIPTION: Example of creating a language file for English translations in Webman.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/components/translation.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// resource/translations/en/messages.php\n\nreturn [\n    'hello' => 'Hello webman',\n];\n```\n\n----------------------------------------\n\nTITLE: Getting All Session Data\nDESCRIPTION: Retrieves all session data as an array.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/session.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$session = $request->session();\n$all = $session->all();\n```\n\n----------------------------------------\n\nTITLE: Configuring Wildcard Event Subscriptions in PHP\nDESCRIPTION: Example of how to set up wildcard event subscriptions in the config/event.php file to handle multiple events with a single listener.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/components/event.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nreturn [\n    'user.*' => [\n        [app\\event\\User::class, 'deal']\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Correct Context Management in Webman\nDESCRIPTION: Demonstrates the correct way to manage request-specific state using support\\Context instead of static variables\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/th/coroutine/fiber.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace app\\controller;\n\nuse support\\Request;\nuse support\\Context;\nuse Workerman\\Timer;\n\nclass TestController\n{\n    public function index(Request $request)\n    {\n        Context::set('name', $request->get('name'));\n        Timer::sleep(5);\n        return Context::get('name');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Utilisation du conteneur pour la réutilisation d'instances dans Webman\nDESCRIPTION: Exemple démontrant comment utiliser le conteneur de dépendances pour créer et réutiliser des instances de classe à travers les requêtes, permettant une meilleure gestion des ressources.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/fr/others/lifecycle.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace app\\controller;\n\nuse app\\service\\Foo;\nuse support\\Container;\nuse support\\Request;\n\nclass IndexController\n{\n    public function index(Request $request)\n    {\n        $foo = Container::get(Foo::class);\n        return response($foo->sayHello());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Bulk Updating with Eloquent in PHP\nDESCRIPTION: Shows how to perform bulk updates on multiple records that match a query condition, without needing to retrieve and save individual model instances.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/tr/db/model.md#2025-04-12_snippet_21\n\nLANGUAGE: php\nCODE:\n```\napp\\model\\User::where('uid', '>', 10)\n          ->update(['name' => 'tom']);\n```\n\n----------------------------------------\n\nTITLE: Creating User Validation Rules with think-validate\nDESCRIPTION: Example showing how to create a User validation class with think-validate. Defines rules and custom messages for validating name, age and email fields.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/pt/components/validation.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\index\\validate;\n\nuse think\\Validate;\n\nclass User extends Validate\n{\n    protected $rule =   [\n        'name'  => 'require|max:25',\n        'age'   => 'number|between:1,120',\n        'email' => 'email',    \n    ];\n\n    protected $message  =   [\n        'name.require' => 'Nome é obrigatório',\n        'name.max'     => 'O nome não pode ter mais de 25 caracteres',\n        'age.number'   => 'A idade deve ser um número',\n        'age.between'  => 'Idade deve estar entre 1 e 120',\n        'email'        => 'Formato de e-mail incorreto',    \n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing AOP ClassLoader in PHP\nDESCRIPTION: Code snippet to initialize the AOP ClassLoader in the main configuration file.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/tr/aop.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Hyperf\\AopIntegration\\ClassLoader;\n\nif ($timezone = config('app.default_timezone')) {\n    date_default_timezone_set($timezone);\n}\n\n// İlklenme\nClassLoader::init();\n```\n\n----------------------------------------\n\nTITLE: Implementing Background Task Process\nDESCRIPTION: Example of creating a background worker process that runs periodic database checks using timers.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/process.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app;\n\nuse Workerman\\Timer;\nuse support\\Db;\n\nclass TaskTest\n{\n    public function onWorkerStart()\n    {\n        Timer::add(10, function(){\n            Db::table('users')->where('regist_timestamp', '>', time()-10)->get();\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Timestamp Column Names in Eloquent\nDESCRIPTION: Demonstrates how to customize the names of timestamp columns in an Eloquent model using constants.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/db/model.md#2025-04-12_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nclass User extends Model\n{\n    const CREATED_AT = 'creation_date';\n    const UPDATED_AT = 'last_update';\n}\n```\n\n----------------------------------------\n\nTITLE: Obtaining the controller class name from the request in Webman (PHP)\nDESCRIPTION: This snippet demonstrates how to retrieve the controller class name from the request using `$request->controller`.  The returned value is similar to `app\\controller\\IndexController`. Closure routes will return an empty string.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/es/request.md#2025-04-12_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\n$request->controller;\n```\n\n----------------------------------------\n\nTITLE: Making Non-blocking HTTP Requests in PHP\nDESCRIPTION: This example shows how to use the Workerman HTTP Client to make non-blocking HTTP requests in a Webman controller. It performs a GET request to example.com and returns the response body.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/tr/coroutine/fiber.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace app\\controller;\n\nuse support\\Request;\nuse Workerman\\Http\\Client;\n\nclass TestController\n{\n    public function index(Request $request)\n    {\n        static $client;\n        $client = $client ?: new Client();\n        $response = $client->get('http://example.com'); // Synchronously making an asynchronous request\n        return $response->getBody()->getContents();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Event Listener in PHP\nDESCRIPTION: Configuration to set up an event listener for the LogErrorWriteEvent.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/event.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    // Event listeners\n    'listener'    => [\n        \\extend\\event\\LogErrorWriteEvent::NAME  => \\extend\\event\\LogErrorWriteEvent::class,\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Querying All Records from Eloquent Model\nDESCRIPTION: Demonstrates how to retrieve all records from a database table using the all() method on an Eloquent model.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/jp/db/model.md#2025-04-12_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$users = app\\model\\User::all();\n\nforeach ($users as $user) {\n    echo $user->name;\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple Channel Configuration\nDESCRIPTION: Example of configuring multiple logging channels with different handlers and formatters.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/log.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'default' => [\n        'handlers' => [\n            [   \n                'class' => Monolog\\Handler\\RotatingFileHandler::class,\n                'constructor' => [\n                    runtime_path() . '/logs/webman.log',\n                    Monolog\\Logger::DEBUG,\n                ],\n                'formatter' => [\n                    'class' => Monolog\\Formatter\\LineFormatter::class,\n                    'constructor' => [ null, 'Y-m-d H:i:s', true],\n                ],\n            ]\n        ],\n    ],\n    'log2' => [\n        'handlers' => [\n            [   \n                'class' => Monolog\\Handler\\RotatingFileHandler::class,\n                'constructor' => [\n                    runtime_path() . '/logs/log2.log',\n                    Monolog\\Logger::DEBUG,\n                ],\n                'formatter' => [\n                    'class' => Monolog\\Formatter\\LineFormatter::class,\n                    'constructor' => [ null, 'Y-m-d H:i:s', true],\n                ],\n            ]\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Setting Default Attribute Values in Eloquent Model\nDESCRIPTION: Shows how to define default values for model attributes by setting the $attributes property in an Eloquent model.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/jp/db/model.md#2025-04-12_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nclass User extends Model\n{\n    protected $attributes = [\n        'delayed' => false,\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Gzip Compression for Apipost Compatibility\nDESCRIPTION: This PHP code snippet demonstrates how to enable gzip compression in a webman controller to ensure keep-alive functionality when testing with Apipost. Apipost requires a gzip header for keep-alive to function correctly. The code compresses the response body using `gzencode` and adds the `Content-Encoding` header.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/es/others/benchmarks.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\nclass IndexController\n{\n    public function index()\n    {\n        return response(gzencode('hello webman'))->withHeader('Content-Encoding', 'gzip');\n    }\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Get Single Column with ID Index Webman PHP\nDESCRIPTION: This code snippet demonstrates how to retrieve a single column ('title') from the 'roles' table and index it by the 'id' column using the Webman PHP framework's database query builder. It uses the `pluck()` method with two arguments: the column to retrieve ('title') and the column to use as the index ('id').\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/fr/db/queries.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$roles = Db::table('roles')->pluck('title', 'id');\n\nforeach ($roles as $id => $title) {\n    echo $title;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Pay SDK\nDESCRIPTION: This code snippet demonstrates how to initialize the Pay SDK using the configuration settings from the `config/payment.php` file. It retrieves the configuration and then uses the `Pay::config()` method to apply the settings.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/es/components/payment.md#2025-04-12_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n// Obtener el archivo de configuración config/payment.php\n$config = Config::get('payment');\nPay::config($config);\n```\n\n----------------------------------------\n\nTITLE: Adding Query Constraints to Eloquent Model\nDESCRIPTION: Shows how to add query constraints and conditions when retrieving data using an Eloquent model.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/jp/db/model.md#2025-04-12_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n$users = app\\model\\User::where('name', 'like', '%tom')\n               ->orderBy('uid', 'desc')\n               ->limit(10)\n               ->get();\n```\n\n----------------------------------------\n\nTITLE: Synchronous Message Delivery to Redis Queue in Webman PHP\nDESCRIPTION: Example of synchronous message delivery to a Redis queue using the Redis::send method. Supports both immediate and delayed message processing.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/fr/queue/redis.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\nuse Webman\\RedisQueue\\Redis;\n\nclass Index\n{\n    public function queue(Request $request)\n    {\n        // Nom de la file d'attente\n        $queue = 'send-mail';\n        // Données, peuvent être transmises directement en tant qu'array, pas besoin de sérialisation\n        $data = ['to' => 'tom@gmail.com', 'content' => 'hello'];\n        // Livraison du message\n        Redis::send($queue, $data);\n        // Livraison d'un message différé, le message sera traité après 60 secondes\n        Redis::send($queue, $data, 60);\n\n        return response('test de file d\\'attente Redis');\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: WSS Connection Configuration (JavaScript)\nDESCRIPTION: This JavaScript code demonstrates how to configure the push.js client to use a WSS connection.  The URL must start with `wss://` and use a domain name with a valid SSL certificate.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/th/plugin/push.md#2025-04-12_snippet_7\n\nLANGUAGE: ini\nCODE:\n```\nvar connection = new Push({\n    url: 'wss://example.com',\n    app_key: '<app_key ตามที่ระบุไว้ใน config/plugin/webman/push/app.php>',\n    auth: '/plugin/webman/push/auth' // ตรวจสอบสิทธิ์การสมัคร (สำหรับช่องส่วนตัวเท่านั้น)\n});\n```\n\n----------------------------------------\n\nTITLE: Installing PHP-DI Dependencies via Composer\nDESCRIPTION: Command to install required packages for PHP-DI implementation including PSR container, PHP-DI core, and Doctrine annotations.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/di.md#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require psr/container ^1.1.1 php-di/php-di ^6 doctrine/annotations ^1.14\n```\n\n----------------------------------------\n\nTITLE: Creating a Task Process File in PHP\nDESCRIPTION: Example of creating a Task.php file to define various crontab scheduled tasks using the Crontab class.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/jp/components/crontab.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace process;\n\nuse Workerman\\Crontab\\Crontab;\n\nclass Task\n{\n    public function onWorkerStart()\n    {\n    \n        // 1秒ごとに実行\n        new Crontab('*/1 * * * * *', function(){\n            echo date('Y-m-d H:i:s').\"\\n\";\n        });\n        \n        // 5秒ごとに実行\n        new Crontab('*/5 * * * * *', function(){\n            echo date('Y-m-d H:i:s').\"\\n\";\n        });\n        \n        // 1分ごとに実行\n        new Crontab('0 */1 * * * *', function(){\n            echo date('Y-m-d H:i:s').\"\\n\";\n        });\n        \n        // 5分ごとに実行\n        new Crontab('0 */5 * * * *', function(){\n            echo date('Y-m-d H:i:s').\"\\n\";\n        });\n        \n        // 1分の最初の秒に実行\n        new Crontab('1 * * * * *', function(){\n            echo date('Y-m-d H:i:s').\"\\n\";\n        });\n      \n        // 毎日7時50分に実行、ここでは秒を省略しています\n        new Crontab('50 7 * * *', function(){\n            echo date('Y-m-d H:i:s').\"\\n\";\n        });\n        \n    }\n}\n```\n\n----------------------------------------\n\nTITLE: MongoDB Database Configuration\nDESCRIPTION: Configuration array for setting up MongoDB connection in config/database.php including connection details and driver options\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/db/mongo.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n\n    'default' => 'mysql',\n\n    'connections' => [\n\n         ...Other configurations are omitted here...\n\n        'mongodb' => [\n            'driver'   => 'mongodb',\n            'host'     => '127.0.0.1',\n            'port'     =>  27017,\n            'database' => 'test',\n            'username' => null,\n            'password' => null,\n            'options' => [\n                // here you can pass more settings to the Mongo Driver Manager\n                // see https://www.php.net/manual/en/mongodb-driver-manager.construct.php under \"Uri Options\" for a list of complete parameters that you can use\n\n                'appname' => 'homestead'\n            ],\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Using Plugin-Specific Redis Connections in Webman PHP\nDESCRIPTION: This snippet demonstrates how to use plugin-specific Redis connections in Webman PHP. It shows how to access the 'default' and 'cache' connections defined in the plugin's configuration.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/jp/app/redis.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse support\\Redis;\nRedis::connection('plugin.foo.default')->get('key');\nRedis::connection('plugin.foo.cache')->get('key');\n```\n\n----------------------------------------\n\nTITLE: Basic Database Query Controller Example\nDESCRIPTION: Example of using ThinkORM's Db facade to perform database queries in a controller\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/pt/db/thinkorm.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\nuse think\\facade\\Db;\n\nclass FooController\n{\n    public function get(Request $request)\n    {\n        $user = Db::table('user')->where('uid', '>', 1)->find();\n        return json($user);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis in webman-php\nDESCRIPTION: Redis configuration file located at config/redis.php. Sets up connection parameters for Redis server.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/db/cache.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'default' => [\n        'host'     => '127.0.0.1',\n        'password' => null,\n        'port'     => 6379,\n        'database' => 0,\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Blade Component Implementation\nDESCRIPTION: Creating and registering a Blade component with custom rendering logic\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/view.md#2025-04-12_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace app\\view\\components;\n\nuse Illuminate\\View\\Component;\n\nclass Alert extends Component\n{\n    public function __construct() {}\n    \n    public function render()\n    {\n        return view('components/alert')->rawBody();\n    }\n}\n```\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse support\\view\\Blade;\nreturn [\n    'handler' => Blade::class,\n    'extension' => function (Jenssegers\\Blade\\Blade $blade) {\n        $blade->component('alert', app\\view\\components\\Alert::class);\n    }\n];\n```\n\nLANGUAGE: html\nCODE:\n```\n<!doctype html>\n<html>\n<head>\n    <meta charset=\"utf-8\">\n    <title>webman</title>\n</head>\n<body>\n<x-alert/>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Creating Custom 404 HTML Template\nDESCRIPTION: HTML template for displaying 404 error pages with dynamic error message support.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/others/custom-error-page.md#2025-04-12_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!doctype html>\n<html>\n<head>\n    <meta charset=\"utf-8\">\n    <title>404 not found</title>\n</head>\n<body>\n<?=htmlspecialchars($error)?>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Implementing Wildcard Event Handler in PHP\nDESCRIPTION: Example handler class showing how to implement a wildcard event handler that receives both event data and event name.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/components/event.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\event;\nclass User\n{\n    function deal($user, $event_name)\n    {\n        echo $event_name; // 具体的事件名，如 user.register user.logout 等\n        var_export($user);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Context Data in Webman PHP\nDESCRIPTION: This snippet demonstrates how to retrieve context data using the `Context::get()` method. It takes an optional string `$name` as the key to retrieve specific data, or returns all context data if `$name` is null.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-hk/coroutine/context.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n```php\nContext::get(string $name = null);\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Swoole Event Loop in Webman PHP\nDESCRIPTION: This code snippet demonstrates how to configure the event loop in Webman to use Swoole. This configuration is necessary to enable Swoole coroutines, providing performance improvements through concurrent execution.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/fr/coroutine/fiber.md#2025-04-12_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n'event_loop' => \\Workerman\\Events\\Swoole::class,\n\n```\n\n----------------------------------------\n\nTITLE: Template HTML con Twig\nDESCRIPTION: Esempio di file di template HTML che utilizza la sintassi Twig per l'output di variabili.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/view.md#2025-04-12_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<!doctype html>\n<html>\n<head>\n    <meta charset=\"utf-8\">\n    <title>webman</title>\n</head>\n<body>\nhello {{name}}\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Sortierung mit dem Query Builder in PHP\nDESCRIPTION: Diese Snippets zeigen, wie man Ergebnisse sortiert, einschließlich zufälliger Sortierung.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/de/db/queries.md#2025-04-12_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')\n                ->orderBy('name', 'desc')\n                ->get();\n\n$randomUser = Db::table('users')\n                ->inRandomOrder()\n                ->first();\n```\n\n----------------------------------------\n\nTITLE: Configuring Bootstrap Class in config/bootstrap.php\nDESCRIPTION: This snippet shows how to add the `MemReport` class to the `config/bootstrap.php` file.  This configuration ensures that the `MemReport` class's `start` method is executed when the Webman process starts. This is essential to trigger the initialization logic.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/others/bootstrap.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n \"return [\\n    // ...这里省略了其它配置...\\n    \\n    app\\\\bootstrap\\\\MemReport::class,\\n];\"\n```\n\n----------------------------------------\n\nTITLE: Selecting Specific Columns\nDESCRIPTION: Query to retrieve specific columns from a table with column aliasing\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/db/queries.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('user')->select('name', 'email as user_email')->get();\n```\n\n----------------------------------------\n\nTITLE: Accessing Plugin Database\nDESCRIPTION: This snippet shows how to access a database connection configured for a specific plugin using the `Db::connection()` method. It demonstrates querying the 'user' and 'admin' tables using the 'mysql' and 'admin' connections, respectively.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/pt/plugin/app.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse support\\Db;\nDb::connection('plugin.cms.mysql')->table('user')->first();\nDb::connection('plugin.cms.admin')->table('admin')->first();\n```\n\n----------------------------------------\n\nTITLE: Finding a Model with 'firstOr' and Callback in PHP\nDESCRIPTION: This snippet retrieves the first model matching a condition or executes a callback if no model is found using `firstOr()`. The callback's return value becomes the method's return value. It returns a single model instance or the callback's return value.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/fr/db/model.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$model = app\\model\\Flight::where('legs', '>', 100)->firstOr(function () {\n        // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Redis API Methods in Webman PHP\nDESCRIPTION: List of commonly used Redis API methods available in Webman PHP.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/tr/db/redis.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nRedis::append($key, $value)\nRedis::bitCount($key)\nRedis::decr($key, $value)\nRedis::decrBy($key, $value)\nRedis::get($key)\nRedis::getBit($key, $offset)\nRedis::getRange($key, $start, $end)\nRedis::getSet($key, $value)\nRedis::incr($key, $value)\nRedis::incrBy($key, $value)\nRedis::incrByFloat($key, $value)\nRedis::mGet(array $keys)\nRedis::getMultiple(array $keys)\nRedis::mSet($pairs)\nRedis::mSetNx($pairs)\nRedis::set($key, $value, $expireResolution = null, $expireTTL = null, $flag = null)\nRedis::setBit($key, $offset, $value)\nRedis::setEx($key, $ttl, $value)\nRedis::pSetEx($key, $ttl, $value)\nRedis::setNx($key, $value)\nRedis::setRange($key, $offset, $value)\nRedis::strLen($key)\nRedis::del(...$keys)\nRedis::exists(...$keys)\nRedis::expire($key, $ttl)\nRedis::expireAt($key, $timestamp)\nRedis::select($dbIndex)\n```\n\n----------------------------------------\n\nTITLE: Route Grouping in Webman PHP\nDESCRIPTION: Example of grouping routes under a common prefix with nested groups\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/route.md#2025-04-12_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nRoute::group('/blog', function () {\n   Route::group('/v1', function () {\n      Route::any('/create', function ($request) {return response('crea');});\n      Route::any('/edit', function ($request) {return response('modifica');});\n      Route::any('/view/{id}', function ($request, $id) {return response(\"visualizza $id\");});\n   });\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Redis Connections in Webman\nDESCRIPTION: This code snippet shows how to access different Redis connections defined in the configuration file using the `support\\Redis` facade.  The `connection()` method is used to specify the connection name.  The example demonstrates retrieving a value from Redis using the `get()` method.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/es/app/redis.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse support\\Redis;\nRedis::connection('plugin.foo.default')->get('key');\nRedis::connection('plugin.foo.cache')->get('key');\n```\n\n----------------------------------------\n\nTITLE: Refreshing Eloquent Model Instance\nDESCRIPTION: Demonstrates refreshing an Eloquent model instance with fresh data from the database.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/tr/db/model.md#2025-04-12_snippet_12\n\nLANGUAGE: PHP\nCODE:\n```\n$user = app\\model\\User::where('name', 'tom')->first();\n\n$fresh_user = $user->fresh();\n```\n\n----------------------------------------\n\nTITLE: Customizing Captcha Parameters in PHP\nDESCRIPTION: Example of how to customize captcha parameters such as length and character set. This code demonstrates setting specific options when initializing the CaptchaBuilder class.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/components/captcha.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n    /**\n     * Output captcha image\n     */\n    public function captcha(Request $request)\n    {\n        // Initialize captcha class\n        $builder = new CaptchaBuilder;\n        // Captcha length\n        $length = 4;\n        // Characters to include\n        $chars = '0123456789abcefghijklmnopqrstuvwxyz';\n        $builder = new PhraseBuilder($length, $chars);\n        $captcha = new CaptchaBuilder(null, $builder);\n        // Generate captcha\n        $builder->build();\n        // Store the value of the captcha in the session\n        $request->session()->set('captcha', strtolower($builder->getPhrase()));\n        // Get captcha image binary data\n        $img_content = $builder->get();\n        // Output captcha binary data\n        return response($img_content, 200, ['Content-Type' => 'image/jpeg']);\n    }\n```\n\n----------------------------------------\n\nTITLE: Implementing CAPTCHA in LoginController (PHP)\nDESCRIPTION: Bu PHP sınıfı, CAPTCHA oluşturma, görüntüleme ve doğrulama işlemlerini gerçekleştirir. CaptchaBuilder sınıfını kullanarak CAPTCHA oluşturur, oturumda saklar ve kontrol eder.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/tr/components/captcha.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\nuse Webman\\Captcha\\CaptchaBuilder;\n\nclass LoginController\n{\n    /**\n     * Test sayfası\n     */\n    public function index(Request $request)\n    {\n        return view('login/index');\n    }\n    \n    /**\n     * CAPTCHA görüntüsü çıkart\n     */\n    public function captcha(Request $request)\n    {\n        // CAPTCHA oluşturucuyu başlat\n        $builder = new CaptchaBuilder;\n        // CAPTCHA oluştur\n        $builder->build();\n        // CAPTCHA değerini oturuma kaydet\n        $request->session()->set('captcha', strtolower($builder->getPhrase()));\n        // CAPTCHA görüntüsünün ikili verilerini al\n        $img_content = $builder->get();\n        // CAPTCHA ikili verilerini çıkart\n        return response($img_content, 200, ['Content-Type' => 'image/jpeg']);\n    }\n\n    /**\n     * CAPTCHA'yı kontrol et\n     */\n    public function check(Request $request)\n    {\n        // POST isteğindeki captcha alanını al\n        $captcha = $request->post('captcha');\n        // Oturumdaki captcha değeriyle karşılaştır\n        if (strtolower($captcha) !== $request->session()->get('captcha')) {\n            return json(['code' => 400, 'msg' => 'Girilen CAPTCHA doğru değil']);\n        }\n        return json(['code' => 0, 'msg' => 'tamam']);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom WebSocket Listener in PHP for Webman\nDESCRIPTION: This code defines a custom WebSocket listener class (Pusher) with methods for handling connections, WebSocket connections, messages, and disconnections.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/tr/process.md#2025-04-12_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nnamespace app;\n\nuse Workerman\\Connection\\TcpConnection;\n\nclass Pusher\n{\n    public function onConnect(TcpConnection $connection)\n    {\n        echo \"onConnect\\n\";\n    }\n\n    public function onWebSocketConnect(TcpConnection $connection, $http_buffer)\n    {\n        echo \"onWebSocketConnect\\n\";\n    }\n\n    public function onMessage(TcpConnection $connection, $data)\n    {\n        $connection->send($data);\n    }\n\n    public function onClose(TcpConnection $connection)\n    {\n        echo \"onClose\\n\";\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Consuming Messages from STOMP in PHP\nDESCRIPTION: This snippet illustrates how to define a STOMP consumer in PHP that handles message consumption for a specified queue. The consumer automatically acknowledges messages based on the defined acknowledgment setting. It is expected to handle the incoming message by decoding a JSON object and requires the STOMP consumer interface from the Webman framework.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/queue/stomp.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\queue\\stomp;\n\nuse Workerman\\Stomp\\AckResolver;\nuse Webman\\Stomp\\Consumer;\n\nclass MyMailSend implements Consumer\n{\n    // 队列名\n    public $queue = 'examples';\n\n    // 连接名，对应 stomp.php 里的连接`\n    public $connection = 'default';\n\n    // 值为 client 时需要调用$ack_resolver->ack()告诉服务端已经成功消费\n    // 值为 auto   时无需调用$ack_resolver->ack()\n    public $ack = 'auto';\n\n    // 消费\n    public function consume($data, AckResolver $ack_resolver = null)\n    {\n        // 如果是数据是数组，需要自行反序列化\n        var_export(json_decode($data, true)); // 输出 ['to' => 'tom@gmail.com', 'content' => 'hello']\n        // 告诉服务端，已经成功消费\n        $ack_resolver->ack(); // ack为 auto时可以省略此调用\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Using ThinkCache in a Webman PHP Controller\nDESCRIPTION: Example of how to use ThinkCache in a Webman PHP controller. It demonstrates setting and getting a value from the cache.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/db/thinkcache.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n    \nuse support\\Request;\nuse think\\facade\\Cache;\n  \nclass UserController\n{\n    public function db(Request $request)\n    {\n        $key = 'test_key';\n        Cache::set($key, rand());\n        return response(Cache::get($key));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Upgrading Webman Framework via Composer\nDESCRIPTION: These commands update the Webman Framework to version 1.6.11 using Composer. The first command removes any existing packagist repository configurations, ensuring the latest version is fetched. The second command requires the specified version, updating the project's dependencies.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/upgrade/1-6.md#2025-04-12_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncomposer config -g --unset repos.packagist\ncomposer require -W workerman/webman-framework ^v1.6.11\n```\n\n----------------------------------------\n\nTITLE: Webman Logging Configuration\nDESCRIPTION: This code snippet shows the configuration array for the default logging channel in Webman. It specifies the handler class (`Monolog\\Handler\\RotatingFileHandler`), constructor parameters (log file path and log level), and formatter class (`Monolog\\Formatter\\LineFormatter`) with its constructor parameters (null, date format, and allowing inline line breaks).\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/th/log.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    // ช่องเราที่จะใช้บันทึก\n    'default' => [\n        // แฮนเดอร์ที่ใช้จัดการช่องเราที่จะใช้ สามารถกำหนดหลายตัว\n        'handlers' => [\n            [   \n                // ชื่อคลาสแฮนเดอร์\n                'class' => Monolog\\Handler\\RotatingFileHandler::class,\n                // ตัวแปรของคอนสตรัคเตอร์ของคลาสแฮนเดอร์\n                'constructor' => [\n                    runtime_path() . '/logs/webman.log',\n                    Monolog\\Logger::DEBUG,\n                ],\n                // แบบรูปแบบที่เกี่ยวข้อง\n                'formatter' => [\n                    // ชื่อคลาสตัวจัดการการจัดรูปแบบ\n                    'class' => Monolog\\Formatter\\LineFormatter::class,\n                    // ตัวแปรของคอนสตรัคเตอร์ของคลาสตัวจัดการการจัดรูปแบบ\n                    'constructor' => [ null, 'Y-m-d H:i:s', true],\n                ],\n            ]\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Deleting Models By Query in Eloquent - PHP\nDESCRIPTION: Example of deleting models with a specific attribute condition using the delete method on a query. This showcases managing bulk deletions efficiently with Eloquent.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/db/model.md#2025-04-12_snippet_22\n\nLANGUAGE: PHP\nCODE:\n```\n$deletedRows = app\\modle\\Flight::where('active', 0)->delete();\n```\n\n----------------------------------------\n\nTITLE: Using Parameter Grouping With Webman DB Query Builder\nDESCRIPTION: This snippet demonstrates how to group where conditions with closures.  This allows for more complex boolean logic in the where clause.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/db/queries.md#2025-04-12_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n// select * from users where name = 'John' and (votes > 100 or title = 'Admin')\n$users = Db::table('users')\n           ->where('name', '=', 'John')\n           ->where(function ($query) {\n               $query->where('votes', '>', 100)\n                     ->orWhere('title', '=', 'Admin');\n           })\n           ->get();\n```\n\n----------------------------------------\n\nTITLE: Obtaining the action method name from the request in Webman (PHP)\nDESCRIPTION: This snippet demonstrates how to retrieve the action method name from the request using `$request->action`.  The returned value will be similar to `index`. Closure routes will always return an empty string.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/es/request.md#2025-04-12_snippet_10\n\nLANGUAGE: PHP\nCODE:\n```\n$request->action;\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Connections for Webman Plugins\nDESCRIPTION: Demonstrates how to configure database connections specifically for a Webman plugin, including multiple connection settings.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/plugin/app.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nreturn  [\n    'default' => 'mysql',\n    'connections' => [\n        'mysql' => [ // mysql为连接名\n            'driver'      => 'mysql',\n            'host'        => '127.0.0.1',\n            'port'        => 3306,\n            'database'    => '数据库',\n            'username'    => '用户名',\n            'password'    => '密码',\n            'charset'     => 'utf8mb4',\n            'collation'   => 'utf8mb4_general_ci',\n        ],\n        'admin' => [ // admin为连接名\n            'driver'      => 'mysql',\n            'host'        => '127.0.0.1',\n            'port'        => 3306,\n            'database'    => '数据库',\n            'username'    => '用户名',\n            'password'    => '密码',\n            'charset'     => 'utf8mb4',\n            'collation'   => 'utf8mb4_general_ci',\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Connection in Webman\nDESCRIPTION: This PHP code represents the Redis configuration file (`config/redis.php`) in a Webman application. It defines the default Redis connection settings, including host, password, port, and database.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/db/redis.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'default' => [\n        'host'     => '127.0.0.1',\n        'password' => null,\n        'port'     => 6379,\n        'database' => 0,\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Publishing Events in PHP using Webman Event\nDESCRIPTION: This snippet demonstrates how to publish an event using Event::emit() method. It shows an example of emitting a 'user.register' event with user data.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/components/event.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\nuse support\\Request;\nuse Webman\\Event\\Event;\nclass User\n{\n    public function register(Request $request)\n    {\n        $user = [\n            'name' => 'webman',\n            'age' => 2\n        ];\n        Event::emit('user.register', $user);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Synchronous Alipay Return\nDESCRIPTION: This code handles synchronous return notifications from Alipay. It logs the request data and returns a success message.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/es/components/payment.md#2025-04-12_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\nuse support\\Request;\nuse Yansongda\\Pay\\Pay;\n\n/**\n * @desc: Notificación sincrónica de Alipay\n * @param Request $request\n * @author Tinywan(ShaoBo Wan)\n */\npublic function alipayReturn(Request $request)\n{\n    Log::info('Notificación sincrónica de Alipay' . json_encode($request->get()));\n    return 'success';\n}\n```\n\n----------------------------------------\n\nTITLE: Event Subscription Configuration in PHP\nDESCRIPTION: This snippet configures the event subscribers in the 'config/event.php' file, registering the LoggerSubscriber class to listen for events.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-hk/event.md#2025-04-12_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    // 事件訂閱\n    'subscriber' => [\n        \\extend\\event\\subscriber\\LoggerSubscriber::class,\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Debugging Queries With Webman DB Query Builder\nDESCRIPTION: This snippet demonstrates debugging queries using `dd()` and `dump()`. `dd()` displays debugging information and stops execution, while `dump()` displays debugging information without halting execution. Requires `symfony/var-dumper`.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/db/queries.md#2025-04-12_snippet_32\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')->where('votes', '>', 100)->dd();\nDb::table('users')->where('votes', '>', 100)->dump();\n```\n\n----------------------------------------\n\nTITLE: Using Main Project Redis Connections\nDESCRIPTION: Demonstrates how to reuse main project Redis configurations and access different Redis connections from the main project.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/app/redis.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse support\\Redis;\nRedis::get('key');\n// 假设主项目还配置了一个cache连接\nRedis::connection('cache')->get('key');\n```\n\n----------------------------------------\n\nTITLE: エラーコードの実際の使用例 (PHP)\nDESCRIPTION: サービスクラス内でエラーコードを使用する例です。エラーが発生した場合、対応するエラーコードとともに例外をスローします。\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/jp/components/generate_error_code.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * ナビゲーション関連の操作サービスクラス\n */\n\nnamespace app\\service;\n\nuse app\\model\\Demo as DemoModel;\n\n// ErrorCodeクラスファイルをインポート\nuse support\\ErrorCode;\n\nclass Demo\n{\n    /**\n     * 追加\n     * @param $data\n     * @return array|mixed\n     * @throws \\exception\n     */\n    public function add($data): array\n    {\n        try {\n            $demo = new DemoModel();\n            foreach ($data as $key => $value) {\n                $demo->$key = $value;\n            }\n\n            $demo->save();\n\n            return $demo->getData();\n        } catch (\\Throwable $e) {\n            // エラーメッセージを出力\n            throw_http_exception($e->getMessage(), ErrorCode::ModelAddOptionsError);\n        }\n        return [];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Raw Expressions with selectRaw in Webman PHP\nDESCRIPTION: This code snippet demonstrates how to use raw expressions with the `selectRaw()` method in the Webman PHP framework's database query builder. It calculates the price with tax by multiplying the 'price' column by a parameter and aliasing the result as 'price_with_tax'.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/fr/db/queries.md#2025-04-12_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n$orders = Db::table('orders')\n                ->selectRaw('price * ? as price_with_tax', [1.0825])\n                ->get();\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Language File\nDESCRIPTION: Example of creating a custom language file with a different name than the default 'messages.php'.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/components/translation.md#2025-04-12_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'hello_admin' => 'Привет, администратор!',\n];\n```\n\n----------------------------------------\n\nTITLE: Throwing Custom BusinessException in Webman PHP\nDESCRIPTION: An example of how to throw a custom MyBusinessException, demonstrating how JSON responses are generated differently compared to the default BusinessException.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/fr/exception.md#2025-04-12_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse app\\exception\\MyBusinessException;\n\nthrow new MyBusinessException('Erreur de paramètre', 3000);\n```\n\n----------------------------------------\n\nTITLE: Customizing Table Name in Eloquent Model\nDESCRIPTION: Demonstrates how to specify a custom table name for an Eloquent model by defining the $table property.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/db/model.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nclass User extends Model\n{\n    protected $table = 'user';\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of webman-permission for Access Control\nDESCRIPTION: Example of adding permissions, roles, and policies using the Permission class, and checking user permissions.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/tr/casbin.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse webman\\permission\\Permission;\n\n// bir kullanıcıya izinleri ekler\nPermission::addPermissionForUser('eve', 'makaleler', 'okuma');\n// bir kullanıcıya bir rol ekler\nPermission::addRoleForUser('eve', 'yazar');\n// bir kural için izinleri ekler\nPermission::addPolicy('yazar', 'makaleler','düzenleme');\n\nif (Permission::enforce(\"eve\", \"makaleler\", \"düzenleme\")) {\n    // eve'nin makaleleri düzenlemesine izin ver\n} else {\n    // isteği reddet, bir hata göster\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Session Usage in User Controller\nDESCRIPTION: Example showing how to get session instance and manipulate session data in a controller\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/jp/session.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\n\nclass UserController\n{\n    public function hello(Request $request)\n    {\n        $name = $request->get('name');\n        $session = $request->session();\n        $session->set('name', $name);\n        return response('hello ' . $session->get('name'));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Ordering Results in Webman PHP\nDESCRIPTION: This snippet demonstrates how to order query results using the orderBy method.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/hi/db/queries.md#2025-04-12_snippet_31\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')\n                ->orderBy('name', 'desc')\n                ->get();\n```\n\n----------------------------------------\n\nTITLE: Making Non-blocking HTTP Requests with Workerman Client\nDESCRIPTION: Shows how to send non-blocking HTTP requests using Workerman's HTTP client. Requires workerman/http-client ^2.0.0 package.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/pt/coroutine/fiber.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace app\\controller;\n\nuse support\\Request;\nuse Workerman\\Http\\Client;\n\nclass TestController\n{\n    public function index(Request $request)\n    {\n        static $client;\n        $client = $client ?: new Client();\n        $response = $client->get('http://example.com');\n        return $response->getBody()->getContents();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Template Example\nDESCRIPTION: Basic HTML template showing variable output with XSS protection\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/view.md#2025-04-12_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!doctype html>\n<html>\n<head>\n    <meta charset=\"utf-8\">\n    <title>webman</title>\n</head>\n<body>\nhello <?=htmlspecialchars($name)?>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Finding Maximum Value with 'max' in PHP\nDESCRIPTION: This snippet retrieves the maximum value of a specific column for records that match the given condition. It uses the `max()` method on the query builder and returns a scalar value.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/fr/db/model.md#2025-04-12_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$max = app\\model\\Flight::where('active', 1)->max('price');\n```\n\n----------------------------------------\n\nTITLE: Joining Tables in WebMan PHP Query Builder\nDESCRIPTION: Shows various types of joins including inner join, left join, right join, and cross join.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/jp/db/queries.md#2025-04-12_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n// join\n$users = Db::table('users')\n            ->join('contacts', 'users.id', '=', 'contacts.user_id')\n            ->join('orders', 'users.id', '=', 'orders.user_id')\n            ->select('users.*', 'contacts.phone', 'orders.price')\n            ->get();\n\n// leftJoin            \n$users = Db::table('users')\n            ->leftJoin('posts', 'users.id', '=', 'posts.user_id')\n            ->get();\n\n// rightJoin\n$users = Db::table('users')\n            ->rightJoin('posts', 'users.id', '=', 'posts.user_id')\n            ->get();\n\n// crossJoin    \n$users = Db::table('sizes')\n            ->crossJoin('colors')\n            ->get();\n```\n\n----------------------------------------\n\nTITLE: Checking Attribute Changes (isDirty, isClean) in PHP\nDESCRIPTION: This snippet illustrates how to use `isDirty()` and `isClean()` to check if a model's attributes have been modified since the model was loaded. `isDirty()` returns true if any attributes have changed; `isClean()` is the opposite.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/fr/db/model.md#2025-04-12_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n$user = User::create([\n    'first_name' => 'Taylor',\n    'last_name' => 'Otwell',\n    'title' => 'Developer',\n]);\n\n$user->title = 'Painter';\n\n$user->isDirty(); // true\n$user->isDirty('title'); // true\n$user->isDirty('first_name'); // false\n\n$user->isClean(); // false\n$user->isClean('title'); // false\n$user->isClean('first_name'); // true\n\n$user->save();\n\n$user->isDirty(); // false\n$user->isClean(); // true\n```\n\n----------------------------------------\n\nTITLE: Multiple Redis Connections Configuration in Webman\nDESCRIPTION: Configuration for multiple Redis connections with different databases, allowing separation of concerns between default and cache data stores.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/db/redis.md#2025-04-12_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'default' => [\n        'host'     => '127.0.0.1',\n        'password' => null,\n        'port'     => 6379,\n        'database' => 0,\n    ],\n\n    'cache' => [\n        'host'     => '127.0.0.1',\n        'password' => null,\n        'port'     => 6379,\n        'database' => 1,\n    ],\n]\n```\n\n----------------------------------------\n\nTITLE: PSR-4 Namespace Example\nDESCRIPTION: Illustrates the PSR-4 namespace convention for classes within a multi-application structure.  It shows the namespace declaration for a controller located in `app/api/controller/FooController.php`. The fully qualified class name would be `app\\api\\controller\\FooController`.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-hk/multiapp.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n\"<?php\nnamespace app\\api\\controller;\n\nuse support\\Request;\n\nclass FooController\n{\n    \n}\n\"\n```\n\n----------------------------------------\n\nTITLE: Getting Distinct Values With Webman DB Query Builder\nDESCRIPTION: This snippet retrieves distinct 'nickname' values from the 'user' table. The `distinct()` method ensures that only unique values are returned. The get() method returns a collection of rows.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/db/queries.md#2025-04-12_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$email = Db::table('user')->select('nickname')->distinct()->get();\n```\n\n----------------------------------------\n\nTITLE: Inserting with Auto-Increment ID - PHP\nDESCRIPTION: Inserts a new user into the 'users' table and retrieves the auto-incremented ID of the newly inserted record. This operation is essential for scenarios where the newly created record's ID is needed immediately after insertion.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/pt/db/queries.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$id = Db::table('users')->insertGetId(\n    ['email' => 'john@example.com', 'votes' => 0]\n);\n```\n\n----------------------------------------\n\nTITLE: Right Join in Webman PHP\nDESCRIPTION: This snippet demonstrates how to perform a right join operation using the rightJoin method.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/hi/db/queries.md#2025-04-12_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')\n            ->rightJoin('posts', 'users.id', '=', 'posts.user_id')\n            ->get();\n```\n\n----------------------------------------\n\nTITLE: Configuring Webman to use ThinkPHP Template\nDESCRIPTION: This PHP code configures webman to use the ThinkPHP template engine by setting the 'handler' option in the `config/view.php` file to the ThinkPHP class. It shows how to pass additional configuration options such as `view_suffix`, `tpl_begin`, and `tpl_end`.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-hk/view.md#2025-04-12_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n\"<?php\nuse support\\view\\ThinkPHP;\n\nreturn [\n    'handler' => ThinkPHP::class,\n];\n?>\"\n```\n\nLANGUAGE: php\nCODE:\n```\n\"return [\n    'handler' => ThinkPHP::class,\n    'options' => [\n        'view_suffix' => 'html',\n        'tpl_begin' => '{',\n        'tpl_end' => '}'\n    ]\n];\"\n```\n\n----------------------------------------\n\nTITLE: Checking Attribute Changes (wasChanged) in PHP\nDESCRIPTION: This snippet demonstrates the usage of the `wasChanged()` method to determine if an attribute was changed during the last save operation. It returns true if an attribute was modified during the save, false otherwise.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/fr/db/model.md#2025-04-12_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n$user = User::create([\n    'first_name' => 'Taylor',\n    'last_name' => 'Otwell',\n    'title' => 'Developer',\n]);\n\n$user->title = 'Painter';\n$user->save();\n\n$user->wasChanged(); // true\n$user->wasChanged('title'); // true\n$user->wasChanged('first_name'); // false\n```\n\n----------------------------------------\n\nTITLE: Handling Wildcard Events in PHP\nDESCRIPTION: This snippet defines a method to handle wildcard events. It receives both the event data and the specific event name as parameters.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/components/event.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\event;\nclass User\n{\n    function deal($user, $event_name)\n    {\n        echo $event_name; // nome specifico dell'evento, ad esempio user.register, user.logout, ecc.\n        var_export($user);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Blade Component in PHP Configuration\nDESCRIPTION: This PHP snippet demonstrates how to register a Blade component in the view configuration file.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/de/view.md#2025-04-12_snippet_13\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse support\\view\\Blade;\nreturn [\n    'handler' => Blade::class,\n    'extension' => function (Jenssegers\\Blade\\Blade $blade) {\n        $blade->component('alert', app\\view\\components\\Alert::class);\n    }\n];\n```\n\n----------------------------------------\n\nTITLE: Generated ErrorCode File\nDESCRIPTION: This code presents an example of a generated ErrorCode class file populated with error code constants. Each constant represents a specific error scenario and has a unique negative integer value.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/components/generate_error_code.md#2025-04-12_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n\"<?php\n/**\n * Сгенерированный файл, пожалуйста, не изменяйте его вручную.\n * @Author:$Id$\n */\nnamespace support;\n\nclass ErrorCode\n{\n    const LoginNameOrPasswordError = -20110001;\n    const UserNotExist = -20110002;\n    const TokenNotExist = -20110003;\n    const InvalidToken = -20110004;\n    const ExpireToken = -20110005;\n    const WrongToken = -20110006;\n    const ClientIpNotEqual = -20110007;\n    const TokenRecordNotFound = -20110008;\n    const ModelAddUserError = -20110009;\n    const NoInfoToModify = -20110010;\n    const OnlyAdminPasswordCanBeModified = -20110011;\n    const AdminAccountCannotBeDeleted = -20110012;\n    const DbNotExist = -20110013;\n    const ModelAddOptionsError = -20110014;\n    const UnableToDeleteSystemConfig = -20110015;\n    const ConfigParamKeyRequired = -20110016;\n    const ExpiryCanNotGreaterThan7days = -20110017;\n    const GetPresignedPutObjectUrlError = -20110018;\n    const ObjectStorageConfigNotExist = -20110019;\n    const UpdateNavIndexSortError = -20110020;\n    const TagNameAttNotExist = -20110021;\n    const ModelUpdateOptionsError = -20110022;\n}\"\n```\n\n----------------------------------------\n\nTITLE: Using Lazy Collections with Cursors in PHP\nDESCRIPTION: This snippet shows how to combine cursors with lazy collections to efficiently process large datasets. The lazy collection allows filtering and processing of data without loading the entire dataset into memory at once.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/es/db/model.md#2025-04-12_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$usuarios = app\\model\\User::cursor()->filter(function ($usuario) {\n    return $usuario->id > 500;\n});\n\nforeach ($usuarios as $usuario) {\n    echo $usuario->id;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Accessing Plugin-Specific Redis Connections\nDESCRIPTION: Example of accessing Redis connections defined in a plugin configuration, demonstrating how to use different connection profiles within a plugin context.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/app/redis.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse support\\Redis;\nRedis::connection('plugin.foo.default')->get('key');\nRedis::connection('plugin.foo.cache')->get('key');\n```\n\n----------------------------------------\n\nTITLE: Using firstOrCreate and firstOrNew Methods\nDESCRIPTION: Demonstrates convenience methods for finding records or creating them if they don't exist. firstOrCreate saves to the database automatically, while firstOrNew returns an unsaved instance.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/es/db/model.md#2025-04-12_snippet_34\n\nLANGUAGE: php\nCODE:\n```\n// Buscar un vuelo por nombre, crear si no existe...\n$flight = app\\modle\\Flight::firstOrCreate(['name' => 'Vuelo 10']);\n\n// Buscar un vuelo por nombre, o crear con atributos de retraso y hora de llegada\n$flight = app\\modle\\Flight::firstOrCreate(\n    ['name' => 'Vuelo 10'],\n    ['delayed' => 1, 'arrival_time' => '11:30']\n);\n\n// Buscar un vuelo por nombre, crear una nueva instancia si no existe\n$flight = app\\modle\\Flight::firstOrNew(['name' => 'Vuelo 10']);\n\n// Buscar un vuelo por nombre, o crear una nueva instancia con atributos de retraso y hora de llegada\n$flight = app\\modle\\Flight::firstOrNew(\n    ['name' => 'Vuelo 10'],\n    ['delayed' => 1, 'arrival_time' => '11:30']\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Permission Enforcement\nDESCRIPTION: Example of checking user permissions using the enforce method.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/casbin.md#2025-04-12_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nif (Permission::enforce(\"eve\", \"articles\", \"edit\")) {\n    // permit eve to edit articles\n} else {\n    // deny the request, show an error\n}\n```\n\n----------------------------------------\n\nTITLE: Returning JSON Response in Webman PHP\nDESCRIPTION: Demonstrates how to return a JSON response using the `json()` helper function. This function automatically sets the `Content-Type` header to `application/json`.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/pt/response.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\n\nclass FooController\n{\n    public function hello(Request $request)\n    {\n        return json(['code' => 0, 'msg' => 'ok']);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Performing Redirect in PHP\nDESCRIPTION: This example demonstrates how to perform a redirect using the redirect() helper function in a Webman controller.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/response.md#2025-04-12_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\n\nclass FooController\n{\n    public function hello(Request $request)\n    {\n        return redirect('/user');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Error Code Generation\nDESCRIPTION: This configuration file (`./config/error_code.php`) defines the parameters for automatic error code generation. It specifies the ErrorCode class file, root path, system number, and the range for generating error codes. The system number acts as a prefix, and the start_min_number defines the range for generated error code suffixes, ensuring unique and identifiable error codes.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/th/components/generate_error_code.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n\"<?php\n\nreturn [\n    \\\"class\\\" => new \\\\support\\\\ErrorCode(), // ไฟล์คลาส ErrorCode\n    \\\"root_path\\\" => app_path(), // ไดเรกทอรีรหัสอาร์เอปป์ปัจจุบัน\n    \\\"system_number\\\" => 201, // ตัวแทนระบบ\n    \\\"start_min_number\\\" => 10000 // ขอบเขตการสร้างรหัสข้อผิดพลาด เช่น 10000-99999\n];\"\n```\n\n----------------------------------------\n\nTITLE: Stopping Chunked Results with Webman PHP\nDESCRIPTION: This code snippet demonstrates how to stop the processing of chunked results by returning `false` from the closure passed to the `chunkById()` method. This allows for early termination of the chunking process based on a specific condition.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/fr/db/queries.md#2025-04-12_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')->orderBy('id')->chunkById(100, function ($users) {\n    // Traiter les enregistrements...\n\n    return false;\n});\n```\n\n----------------------------------------\n\nTITLE: Sending Messages with Stomp Client in PHP\nDESCRIPTION: PHP controller method demonstrating how to send messages to a Stomp queue using Client::send() method, with mandatory JSON serialization for data\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/queue/stomp.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\nuse Webman\\Stomp\\Client;\n\nclass Index\n{\n    public function queue(Request $request)\n    {\n        // Queue\n        $queue = 'examples';\n        // Data (arrays must be manually serialized)\n        $data = json_encode(['to' => 'tom@gmail.com', 'content' => 'hello']);\n        // Send message\n        Client::send($queue, $data);\n\n        return response('тест очереди Redis');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Date Comparison in webman-php\nDESCRIPTION: Using whereDate to filter records based on a date comparison. This example retrieves users created on a specific date (2016-12-31).\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/db/queries.md#2025-04-12_snippet_24\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')\n                ->whereDate('created_at', '2016-12-31')\n                ->get();\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Single Row from a Table in PHP\nDESCRIPTION: This code demonstrates how to retrieve a single row from the 'users' table based on a condition using the where() and first() methods.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/tr/db/queries.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$user = Db::table('users')->where('name', 'John')->first();\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom BusinessException in PHP for webman\nDESCRIPTION: Custom implementation of BusinessException called MyBusinessException. This class extends the default BusinessException and customizes the render method to return a specific JSON format for API responses.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/de/exception.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace app\\exception;\n\nuse support\\exception\\BusinessException;\nuse Webman\\Http\\Request;\nuse Webman\\Http\\Response;\n\nclass MyBusinessException extends BusinessException\n{\n    public function render(Request $request): ?Response\n    {\n        // JSON request returns JSON data\n        if ($request->expectsJson()) {\n            return json(['code' => $this->getCode() ?: 500, 'message' => $this->getMessage()]);\n        }\n        // Non-JSON requests return a page\n        return new Response(200, [], $this->getMessage());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Building a Response Object Step-by-Step in PHP\nDESCRIPTION: Illustrates how to create an empty response object and then use methods like `$response->cookie()`, `$response->header()`, and `$response->withBody()` to configure the response before returning it.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/pt/response.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\npublic function hello(Request $request)\n{\n    // Criar um objeto\n    $response = response();\n    \n    // .... Lógica de negócios omitida\n    \n    // Configurar cookie\n    $response->cookie('foo', 'valor');\n    \n    // .... Lógica de negócios omitida\n    \n    // Configurar cabeçalho http\n    $response->header('Content-Type', 'application/json');\n    $response->withHeaders([\n                'X-Header-One' => 'Valor do Cabeçalho 1',\n                'X-Header-Dois' => 'Valor do Cabeçalho 2',\n            ]);\n\n    // .... Lógica de negócios omitida\n\n    // Configurar os dados a serem retornados\n    $response->withBody('Dados a serem retornados');\n    return $response;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Querying and Filtering Data with Eloquent in PHP\nDESCRIPTION: This snippet demonstrates how to add query constraints using `where`, `orderBy`, and `limit` methods before retrieving data from the `User` model. This example queries for users whose name is like '%tom', orders them by `uid` in descending order, and limits the result to 10 records.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/es/db/model.md#2025-04-12_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$usuarios = app\\model\\User::where('name', 'like', '%tom')\n               ->orderBy('uid', 'desc')\n               ->limit(10)\n               ->get();\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Connection in Webman\nDESCRIPTION: Example configuration for Redis connection in Webman's config/redis.php file.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/jp/db/redis.md#2025-04-12_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nreturn [\n    'default' => [\n        'host'     => '127.0.0.1',\n        'password' => null,\n        'port'     => 6379,\n        'database' => 0,\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Model Deletion Operations\nDESCRIPTION: Shows various methods for deleting model records including single deletion and batch deletion.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/db/model.md#2025-04-12_snippet_26\n\nLANGUAGE: php\nCODE:\n```\n$flight = app\\modle\\Flight::find(1);\n$flight->delete();\n\napp\\modle\\Flight::destroy(1);\n\napp\\modle\\Flight::destroy(1, 2, 3);\n\napp\\modle\\Flight::destroy([1, 2, 3]);\n\napp\\modle\\Flight::destroy(collect([1, 2, 3]));\n```\n\n----------------------------------------\n\nTITLE: Webman PHP Session Configuration\nDESCRIPTION: Example of the session configuration file in Webman PHP, including handler settings and various options.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/session.md#2025-04-12_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse Webman\\Session\\FileSessionHandler;\nuse Webman\\Session\\RedisSessionHandler;\nuse Webman\\Session\\RedisClusterSessionHandler;\n\nreturn [\n    'handler' => FileSessionHandler::class,\n    'type'    => 'file',\n    'config' => [\n        'file' => [\n            'save_path' => runtime_path() . '/sessions',\n        ],\n        'redis' => [\n            'host'      => '127.0.0.1',\n            'port'      => 6379,\n            'auth'      => '',\n            'timeout'   => 2,\n            'database'  => '',\n            'prefix'    => 'redis_session_',\n        ],\n        'redis_cluster' => [\n            'host'    => ['127.0.0.1:7000', '127.0.0.1:7001', '127.0.0.1:7001'],\n            'timeout' => 2,\n            'auth'    => '',\n            'prefix'  => 'redis_session_',\n        ]\n    ],\n    'session_name' => 'PHPSID',\n    'auto_update_timestamp' => false,\n    'lifetime' => 7*24*60*60,\n    'cookie_lifetime' => 365*24*60*60,\n    'cookie_path' => '/',\n    'domain' => '',\n    'http_only' => true,\n    'secure' => false,\n    'same_site' => '',\n    'gc_probability' => [1, 1000],\n];\n```\n\n----------------------------------------\n\nTITLE: Aggregate Queries in Eloquent ORM\nDESCRIPTION: Shows how to perform aggregate operations like count and max on model collections.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/db/model.md#2025-04-12_snippet_18\n\nLANGUAGE: php\nCODE:\n```\napp\\modle\\Flight::where('active', 1)->count();\n\napp\\modle\\Flight::where('active', 1)->max('price');\n```\n\n----------------------------------------\n\nTITLE: User Controller with Annotation Injection\nDESCRIPTION: Example of using annotation-based dependency injection in a controller.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/pt/di.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\nuse app\\service\\Mailer;\nuse DI\\Annotation\\Inject;\n\nclass UserController\n{\n    /**\n     * @Inject\n     * @var Mailer\n     */\n    private $mailer;\n\n    public function register(Request $request)\n    {\n        $this->mailer->mail('hello@webman.com', 'Olá e bem-vindo!');\n        return response('ok');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Duplicating Models with replicate Method in Eloquent ORM\nDESCRIPTION: Shows how to use the replicate method to create a copy of a model instance with the same attributes. The example demonstrates creating a billing address based on a shipping address by replicating and modifying specific attributes.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/db/model.md#2025-04-12_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$shipping = App\\Address::create([\n    'type' => 'shipping',\n    'line_1' => '123 Example Street',\n    'city' => 'Victorville',\n    'state' => 'CA',\n    'postcode' => '90001',\n]);\n\n$billing = $shipping->replicate()->fill([\n    'type' => 'billing'\n]);\n\n$billing->save();\n```\n\n----------------------------------------\n\nTITLE: Refreshing Model Data from Database in PHP\nDESCRIPTION: This code shows two methods for refreshing model data. `fresh()` retrieves a new model instance from the database, while `refresh()` updates the current model instance with the latest data.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/es/db/model.md#2025-04-12_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$usuario = app\\model\\User::where('name', 'tom')->first();\n\n$usuarioActualizado = $usuario->fresh();\n\n```\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$usuario = app\\model\\User::where('name', 'tom')->first();\n\n$usuario->name = 'jerry';\n\n$usuario = $usuario->fresh();\n\n$usuario->name; // \"tom\"\n\n```\n\n----------------------------------------\n\nTITLE: Accessing Redis Connections in WebMan PHP\nDESCRIPTION: Demonstrates how to retrieve and use Redis connections from different configurations, including plugin-specific and main project configurations. Shows methods for getting keys from different Redis databases.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/app/redis.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse support\\Redis;\nRedis::connection('plugin.foo.default')->get('key');\nRedis::connection('plugin.foo.cache')->get('key');\n```\n\nLANGUAGE: php\nCODE:\n```\nuse support\\Redis;\nRedis::get('key');\n// Assuming cache connection is configured in main project\nRedis::connection('cache')->get('key');\n```\n\n----------------------------------------\n\nTITLE: Sending Synchronous Messages to Redis Queue in PHP\nDESCRIPTION: Example of sending messages synchronously to a Redis queue using the Redis::send() method.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/tr/queue/redis.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\nuse Webman\\RedisQueue\\Redis;\n\nclass Index\n{\n    public function queue(Request $request)\n    {\n        // Queue name\n        $queue = 'send-mail';\n        // Data, passed directly as an array, no need for serialization\n        $data = ['to' => 'tom@gmail.com', 'content' => 'hello'];\n        // Send message\n        Redis::send($queue, $data);\n        // Send delayed message, processed after 60 seconds\n        Redis::send($queue, $data, 60);\n\n        return response('redis queue test');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Context for Request State Storage in Coroutines\nDESCRIPTION: Proper approach to storing request-specific data using the Context class in a coroutine environment. This ensures data isolation between concurrent requests.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/coroutine/fiber.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace app\\controller;\n\nuse support\\Request;\nuse support\\Context;\nuse Workerman\\Timer;\n\nclass TestController\n{\n    public function index(Request $request)\n    {\n        Context::set('name', $request->get('name'));\n        Timer::sleep(5);\n        return Context::get('name');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Redis Configuration Example\nDESCRIPTION: Example Redis configuration showing how to set up separate connections for cache and default usage\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/db/cache.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nreturn [\n    'default' => [\n        'password' => 'abc123',\n        'host' => '127.0.0.1',\n        'port' => 6379,\n        'database' => 0,\n    ],\n    'cache' => [\n        'password' => 'abc123',\n        'host' => '127.0.0.1',\n        'port' => 6379,\n        'database' => 1,\n        'prefix' => 'webman_cache-',\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Storing Multiple Session Values in Webman\nDESCRIPTION: Demonstrates how to store multiple session values at once using the put method. This allows setting multiple key-value pairs with a single method call.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/fr/session.md#2025-04-12_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$session = $request->session();\n$session->put(['name' => 'tom', 'age' => 12]);\n```\n\n----------------------------------------\n\nTITLE: Accessing Specific Debug Configuration in Webman PHP\nDESCRIPTION: Demonstrates accessing a specific configuration value 'debug' from app.php configuration file.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/config.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nconfig('app.debug');\n```\n\n----------------------------------------\n\nTITLE: Get Input Value with Default - Webman PHP\nDESCRIPTION: Retrieves a specific input value from either POST or GET parameters. If the parameter is not found, the specified default value is returned.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/th/request.md#2025-04-12_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n$request->input('name', $default_value);\n```\n\n----------------------------------------\n\nTITLE: Getting Context Data in PHP\nDESCRIPTION: The `Context::get()` method retrieves data from the request context based on the provided name. If no name is provided, it returns all context data. It returns the mixed value associated with the name.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/coroutine/context.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nContext::get(string $name = null);\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Redis Connections in PHP\nDESCRIPTION: Example of configuring multiple Redis connections for use with message queues.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/tr/queue/redis.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\nreturn [\n    'default' => [\n        'host' => 'redis://192.168.0.1:6379',\n        'options' => [\n            'auth' => null,       // password, string type, optional\n            'db' => 0,            // database\n            'max_attempts'  => 5, // number of retry attempts when consumption fails\n            'retry_seconds' => 5, // retry interval in seconds\n        ]\n    ],\n    'other' => [\n        'host' => 'redis://192.168.0.2:6379',\n        'options' => [\n            'auth' => null,       // password, string type, optional\n            'db' => 0,             // database\n            'max_attempts'  => 5, // number of retry attempts when consumption fails\n            'retry_seconds' => 5, // retry interval in seconds\n        ]\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Reusing Main Project's Redis Configuration\nDESCRIPTION: This code snippet illustrates how to reuse the Redis configuration from the main project within a plugin or other part of the application. If the main project already configured a `cache` connection, that connection can be accessed directly.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/es/app/redis.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse support\\Redis;\nRedis::get('key');\n// Supongamos que el proyecto principal también ha configurado una conexión de cache\nRedis::connection('cache')->get('key');\n```\n\n----------------------------------------\n\nTITLE: Changing Default Language in Webman\nDESCRIPTION: Example of changing the default language using the locale() function in a Webman controller.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/components/translation.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\n\nclass UserController\n{\n    public function get(Request $request)\n    {\n        // Switch to English\n        locale('en');\n        $hello = trans('hello'); // hello world!\n        return response($hello);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking if JSON response is expected in Webman (PHP)\nDESCRIPTION: This snippet demonstrates how to check if a JSON response is expected using `$request->expectsJson()`. This method checks the `Accept` header to see if the client prefers a JSON response.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/es/request.md#2025-04-12_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n$request->expectsJson();\n```\n\n----------------------------------------\n\nTITLE: Disabling Timestamps in Eloquent Model\nDESCRIPTION: Shows how to disable automatic timestamp management in an Eloquent model.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/tr/db/model.md#2025-04-12_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\nclass User extends Model\n{\n    public $timestamps = false;\n}\n```\n\n----------------------------------------\n\nTITLE: Redis Configuration Setup\nDESCRIPTION: Configuration settings for Redis connection including host, password, port and database selection\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/pt/db/cache.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'default' => [\n        'host'     => '127.0.0.1',\n        'password' => null,\n        'port'     => 6379,\n        'database' => 0,\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Deleting Session Data in Webman\nDESCRIPTION: Shows how to remove one or multiple values from the session using the forget method. Can remove a single key or an array of keys at once.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/fr/session.md#2025-04-12_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$session = $request->session();\n// Supprimer une valeur\n$session->forget('name');\n// Supprimer plusieurs valeurs\n$session->forget(['name', 'age']);\n```\n\n----------------------------------------\n\nTITLE: Inner Join in Webman PHP\nDESCRIPTION: This snippet demonstrates how to perform an inner join operation on multiple tables using the join method.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/hi/db/queries.md#2025-04-12_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')\n            ->join('contacts', 'users.id', '=', 'contacts.user_id')\n            ->join('orders', 'users.id', '=', 'orders.user_id')\n            ->select('users.*', 'contacts.phone', 'orders.price')\n            ->get();\n```\n\n----------------------------------------\n\nTITLE: Redis Configuration Setup\nDESCRIPTION: Configuration file for Redis connection settings including pool configuration\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/db/redis.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'default' => [\n        'host'     => '127.0.0.1',\n        'password' => null,\n        'port'     => 6379,\n        'database' => 0,\n        'pool' => [ // 连接池配置\n            'max_connections' => 10,     // 连接池最大连接数\n            'min_connections' => 1,      // 连接池最小连接数\n            'wait_timeout' => 3,         // 从连接池获取连接最大等待时间\n            'idle_timeout' => 50,        // 连接池中连接空闲超时时间，超过该时间会被关闭，直到连接数为min_connections\n            'heartbeat_interval' => 50,  // 心跳检测间隔，不要大于60秒\n        ],\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Redis Queue Consumer Implementation in Webman PHP\nDESCRIPTION: Example consumer class that processes messages from a Redis queue. Implements the Webman\\RedisQueue\\Consumer interface with queue and connection configuration.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/fr/queue/redis.md#2025-04-12_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace app\\queue\\redis;\n\nuse Webman\\RedisQueue\\Consumer;\n\nclass MyMailSend implements Consumer\n{\n    // Nom de la file d'attente à consommer\n    public $queue = 'send-mail';\n\n    // Nom de la connexion, correspondant à la connexion dans le fichier `plugin/webman/redis-queue/redis.php`\n    public $connection = 'default';\n\n    // Consommation\n    public function consume($data)\n    {\n        // Pas besoin de désérialiser\n        var_export($data); // Sortie ['to' => 'tom@gmail.com', 'content' => 'hello']\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using inRandomOrder With Webman DB Query Builder\nDESCRIPTION: This snippet retrieves a single random user from the 'users' table.  `inRandomOrder()` shuffles the results randomly before returning the first record. This operation is performance intensive.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/db/queries.md#2025-04-12_snippet_22\n\nLANGUAGE: php\nCODE:\n```\n$randomUser = Db::table('users')\n                ->inRandomOrder()\n                ->first();\n```\n\n----------------------------------------\n\nTITLE: Basic Logging Usage in Webman Controller\nDESCRIPTION: Demonstrates how to use the Log facade in a Webman controller to write info-level logs.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/log.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\nuse support\\Log;\n\nclass FooController\n{\n    public function index(Request $request)\n    {\n        Log::info('log test');\n        return response('hello index');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Reusing External Database Configuration in Webman PHP Plugin Model\nDESCRIPTION: This snippet shows how to reuse a database configuration from another plugin (webman-admin) in a Webman PHP plugin model. It demonstrates setting the connection to use the 'mysql' connection from the 'admin' plugin.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/app/database.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace plugin\\foo\\app\\model;\n\nuse DateTimeInterface;\nuse support\\Model;\n\nclass Base extends Model\n{\n    /**\n     * @var string\n     */\n    protected $connection = 'plugin.admin.mysql';\n}\n```\n\n----------------------------------------\n\nTITLE: Template HTML con ThinkPHP\nDESCRIPTION: Esempio di file di template HTML che utilizza la sintassi ThinkPHP per l'output di variabili.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/view.md#2025-04-12_snippet_15\n\nLANGUAGE: html\nCODE:\n```\n<!doctype html>\n<html>\n<head>\n    <meta charset=\"utf-8\">\n    <title>webman</title>\n</head>\n<body>\nhello {$name}\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Modifica del Controller per Ritorno JSON in PHP\nDESCRIPTION: Questo snippet modifica il controller UserController per restituire una risposta JSON. Il metodo hello ora restituisce un array associativo che viene automaticamente convertito in JSON con l'intestazione Content-Type appropriata.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/tutorial.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\n\nclass UserController\n{\n    public function hello(Request $request)\n    {\n        $default_name = 'webman';\n        $name = $request->get('name', $default_name);\n        return json([\n            'code' => 0, \n            'msg' => 'ok', \n            'data' => $name\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Context Data in Webman PHP\nDESCRIPTION: Interface for removing specific data from the request context by name.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/coroutine/context.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nContext::delete(string $name);\n```\n\n----------------------------------------\n\nTITLE: Configurazione di think-template in webman\nDESCRIPTION: Modifica del file config/view.php per utilizzare think-template come motore di template in webman.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/view.md#2025-04-12_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse support\\view\\ThinkPHP;\n\nreturn [\n    'handler' => ThinkPHP::class,\n];\n```\n\n----------------------------------------\n\nTITLE: Correct View Configuration\nDESCRIPTION: This code demonstrates the correct way to configure the view suffix in webman's view configuration. The 'view_suffix' option is now nested under the 'options' key. This configuration specifies the view handler and the file extension for view files.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/upgrade/1-4.md#2025-04-12_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n```php\nuse support\\view\\Raw;\nreturn [\n    'handler' => Raw::class,\n    'options' => [\n        'view_suffix' => '.php'\n    ]\n];\n```\n```\n\n----------------------------------------\n\nTITLE: Context Usage Example in PHP Controller\nDESCRIPTION: Demonstrates how to use the `Context` class within a webman-php controller to set and retrieve request-specific data. This example sets the 'name' key in the context with the value from the request's 'name' parameter, and then retrieves and returns that value.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/es/coroutine/context.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace app\\controller;\n\nuse support\\Request;\nuse support\\Context;\n\nclass TestController\n{\n    public function index(Request $request)\n    {\n        Context::set('name', $request->get('name'));\n        return Context::get('name');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Controller Parameter Binding in Webman\nDESCRIPTION: Demonstrates two approaches to parameter handling in Webman controllers: direct parameter injection and request object parameter retrieval\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/request.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\npublic function create(string $name, int $age = 18): Response\n{\n    return json(['name' => $name, 'age' => $age]);\n}\n```\n\nLANGUAGE: php\nCODE:\n```\npublic function create(Request $request): Response\n{\n    $name = $request->input('name');\n    $age = (int)$request->input('age', 18);\n    return json(['name' => $name, 'age' => $age]);\n}\n```\n\n----------------------------------------\n\nTITLE: Example User Controller (ThinkPHP)\nDESCRIPTION: This PHP code defines a simple controller with a `hello` action that renders a view named `user/hello` and passes the variable 'name' with the value 'webman'. This example uses the ThinkPHP template engine.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-hk/view.md#2025-04-12_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n\"<?php\nnamespace app\\controller;\n\nuse support\\Request;\n\nclass UserController\n{\n    public function hello(Request $request)\n    {\n        return view('user/hello', ['name' => 'webman']);\n    }\n}\n?>\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Wildcard Event Listeners in PHP\nDESCRIPTION: This code shows how to set up a wildcard event listener in the config/event.php file. It uses 'user.*' to listen to all user-related events.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/components/event.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nreturn [\n    'user.*' => [\n        [app\\event\\User::class, 'deal']\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Deleting All Session Data in Webman PHP\nDESCRIPTION: Demonstrates how to remove all session data using the flush() method.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/session.md#2025-04-12_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$request->session()->flush();\n```\n\n----------------------------------------\n\nTITLE: Basic ThinkCache Usage Example\nDESCRIPTION: Example controller demonstrating how to use ThinkCache for setting and getting cached values. Shows basic cache operations in a WebMan controller context.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/pt/db/thinkcache.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n  \nuse support\\Request;\nuse think\\facade\\Cache;\n\nclass UserController\n{\n    public function db(Request $request)\n    {\n        $key = 'test_key';\n        Cache::set($key, rand());\n        return response(Cache::get($key));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Controller Implementation in WebMan PHP\nDESCRIPTION: Shows basic controller structure with index and hello methods returning responses.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/controller.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\n\nclass FooController\n{\n    public function index(Request $request)\n    {\n        return response('hello index');\n    }\n    \n    public function hello(Request $request)\n    {\n        return response('hello webman');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Error Code Configuration Setup\nDESCRIPTION: Configuration file that defines system number, error code range, and class file location for error code generation.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/components/generate_error_code.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nreturn [\n    \"class\" => new \\support\\ErrorCode(), // ErrorCode 类文件\n    \"root_path\" => app_path(), // 当前代码根目录\n    \"system_number\" => 201, // 系统标识\n    \"start_min_number\" => 10000 // 错误码生成范围 例如 10000-99999\n];\n```\n\n----------------------------------------\n\nTITLE: Synchronous Message Delivery in Redis Queue\nDESCRIPTION: Demonstrates synchronous message delivery to a Redis queue with optional delay processing\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/queue/redis.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Webman\\RedisQueue\\Redis;\n\n$queue = 'send-mail';\n$data = ['to' => 'tom@gmail.com', 'content' => 'hello'];\n\n// Immediate message delivery\nRedis::send($queue, $data);\n\n// Delayed message delivery (60 seconds)\nRedis::send($queue, $data, 60);\n```\n\n----------------------------------------\n\nTITLE: Message Consumption with Stomp Consumer in PHP\nDESCRIPTION: Implements a Stomp consumer class for processing messages from a specific queue. Handles manual deserialization and optional ACK (acknowledgement) mechanism.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/th/queue/stomp.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\queue\\stomp;\n\nuse Workerman\\Stomp\\AckResolver;\nuse Webman\\Stomp\\Consumer;\n\nclass MyMailSend implements Consumer\n{\n    public $queue = 'examples';\n    public $connection = 'default';\n    public $ack = 'auto';\n\n    public function consume($data, AckResolver $ack_resolver = null)\n    {\n        var_export(json_decode($data, true));\n        $ack_resolver->ack();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Specific Session Values in Webman PHP\nDESCRIPTION: Shows how to retrieve a specific session value using the get() method, with an optional default value.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/session.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$session = $request->session();\n$name = $session->get('name');\n\n$session = $request->session();\n$name = $session->get('name', 'tom');\n```\n\n----------------------------------------\n\nTITLE: Registering Permission Service in Bootstrap\nDESCRIPTION: Configuration to register the Permission service in the Webman bootstrap file.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/casbin.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n    // ...\n    webman\\permission\\Permission::class,\n```\n\n----------------------------------------\n\nTITLE: Selecting Distinct Values in Webman PHP\nDESCRIPTION: This snippet shows how to select distinct values from a column using the distinct method.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/hi/db/queries.md#2025-04-12_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$email = Db::table('user')->select('nickname')->distinct()->get();\n```\n\n----------------------------------------\n\nTITLE: Using whereNull Clauses With Webman DB Query Builder\nDESCRIPTION: This snippet demonstrates how to use `whereNull` and `whereNotNull` to filter results based on NULL values. `whereNull` selects records where the 'updated_at' column is NULL, while `whereNotNull` selects records where the 'updated_at' column is not NULL.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/db/queries.md#2025-04-12_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')\n                    ->whereNull('updated_at')\n                    ->get();\n```\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')\n                    ->whereNotNull('updated_at')\n                    ->get();\n```\n\n----------------------------------------\n\nTITLE: Defining Mailer service class\nDESCRIPTION: This code defines a `Mailer` service class with a `mail` method for sending emails. This class is used for demonstrating dependency injection.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-hk/di.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n\"<?php\nnamespace app\\service;\n\nclass Mailer\n{\n    public function mail($email, $content)\n    {\n        // 發送郵件代碼省略\n    }\n}\"\n```\n\n----------------------------------------\n\nTITLE: Manual Instantiation vs. Container Instantiation\nDESCRIPTION: This code illustrates the difference between manual instantiation with `new` and container instantiation using `support\\Container`.  Instances created with `new` do not benefit from dependency injection, while those created via the container do.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-hk/di.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n\"<?php\nuse app\\service\\UserService;\nuse app\\service\\LogService;\nuse support\\Container;\n\n// new關鍵字創建的實例無法依賴注入\n$user_service = new UserService;\n// new關鍵字創建的實例無法依賴注入\n$log_service = new LogService($path, $name);\n\n// Container創建的實例可以依賴注入\n$user_service = Container::get(UserService::class);\n// Container創建的實例可以依賴注入\n$log_service = Container::make(LogService::class, [$path, $name]);\"\n```\n\n----------------------------------------\n\nTITLE: ThinkPHP Pagination Implementation\nDESCRIPTION: Example of implementing pagination using ThinkPHP's ORM with custom page size and path configuration.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/db/paginator.md#2025-04-12_snippet_5\n\nLANGUAGE: php\nCODE:\n```\npublic function index(Request $request)\n{\n    $per_page = 10;\n    $users = Db::table('user')->paginate(['list_rows' => $per_page, 'page' => $request->get('page', 1), 'path' => $request->path()]);\n    return view('index/index', ['users' => $users]);\n}\n```\n\n----------------------------------------\n\nTITLE: Nginx Configuration for Dual Port Setup in Webman\nDESCRIPTION: Nginx configuration to proxy requests between two different Webman ports - default port 8787 and slow processing port 8686. Includes upstream definitions and location-based routing rules.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/others/task.md#2025-04-12_snippet_1\n\nLANGUAGE: nginx\nCODE:\n```\nupstream webman {\n    server 127.0.0.1:8787;\n    keepalive 10240;\n}\n\nupstream task {\n   server 127.0.0.1:8686;\n   keepalive 10240;\n}\n\nserver {\n  server_name webman.com;\n  listen 80;\n  access_log off;\n  root /path/webman/public;\n\n  location /task {\n      proxy_set_header X-Real-IP $remote_addr;\n      proxy_set_header Host $host;\n      proxy_http_version 1.1;\n      proxy_set_header Connection \"\";\n      proxy_pass http://task;\n  }\n\n  location / {\n      proxy_set_header X-Real-IP $remote_addr;\n      proxy_set_header Host $host;\n      proxy_http_version 1.1;\n      proxy_set_header Connection \"\";\n      if (!-f $request_filename){\n          proxy_pass http://webman;\n      }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Models with Mass Assignment in Eloquent - PHP\nDESCRIPTION: Demonstrates creating a new Flight model instance using an array of attributes with the create method. This approach returns the saved model instance and requires predefined $fillable attributes.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/db/model.md#2025-04-12_snippet_14\n\nLANGUAGE: PHP\nCODE:\n```\n$flight = app\\model\\Flight::create(['name' => 'Flight 10']);\n```\n\n----------------------------------------\n\nTITLE: English Language File Structure\nDESCRIPTION: Example of an English language file that returns an array of translation keys and their corresponding text values.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/components/translation.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// resource/translations/en/messages.php\n\nreturn [\n    'hello' => 'Hello webman',\n];\n```\n\n----------------------------------------\n\nTITLE: Nginx WSS Proxy Configuration\nDESCRIPTION: This Nginx configuration snippet sets up a proxy for WSS (WebSocket Secure) connections. It forwards requests to the webman/push server and includes necessary headers for WebSocket upgrades.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/th/plugin/push.md#2025-04-12_snippet_6\n\nLANGUAGE: ini\nCODE:\n```\nserver {\n    # .... การตั้งค่าอื่น ๆ ที่ไม่ได้แสดงค่าที่นี่ ...\n    \n    location /app/<app_key>\n    {\n        proxy_pass http://127.0.0.1:3131;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"Upgrade\";\n        proxy_set_header X-Real-IP $remote_addr;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Middleware Interface in PHP\nDESCRIPTION: Defines the core middleware interface for processing server requests and responses in Webman. Requires implementing the process method that handles request flow and returns a response.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/th/middleware.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ninterface MiddlewareInterface\n{\n    public function process(Request $request, callable $handler): Response;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Process Monitoring in PHP for webman\nDESCRIPTION: This code snippet shows the configuration for process monitoring in webman-php. It includes settings for file update monitoring and memory usage monitoring, specifying which directories and file extensions to monitor, and options for enabling or disabling specific monitoring features.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/tr/others/monitor.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nglobal $argv;\n\nreturn [\n    // Dosya güncelleme izleme ve otomatik yeniden yükleme\n    'monitor' => [\n        'handler' => process\\Monitor::class,\n        'reloadable' => false,\n        'constructor' => [\n            // Bu dizinleri izle\n            'monitorDir' => array_merge([    \n                app_path(),\n                config_path(),\n                base_path() . '/process',\n                base_path() . '/support',\n                base_path() . '/resource',\n                base_path() . '/.env',\n            ], glob(base_path() . '/plugin/*/app'), glob(base_path() . '/plugin/*/config'), glob(base_path() . '/plugin/*/api')),\n            // Bu uzantılara sahip dosyaları izle\n            'monitorExtensions' => [\n                'php', 'html', 'htm', 'env'\n            ],\n            'options' => [\n                'enable_file_monitor' => !in_array('-d', $argv) && DIRECTORY_SEPARATOR === '/', \n                'enable_memory_monitor' => DIRECTORY_SEPARATOR === '/',                     \n            ]\n        ]\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Comparing Eloquent Models for Equality - PHP\nDESCRIPTION: Uses the is method to verify if two Eloquent models share the same primary key, table, and database connection, thus determining their equality efficiently.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/db/model.md#2025-04-12_snippet_24\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nif ($post->is($anotherPost)) {\n    //\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Route Parameters in PHP\nDESCRIPTION: This code shows how to set route parameters using the `setParams` method in Webman. These parameters can then be accessed within middleware.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/middleware.md#2025-04-12_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse support\\Request;\nuse Webman\\Route;\n\nRoute::any('/test', [app\\controller\\IndexController::class, 'index'])->setParams(['some_key' =>'some value']);\n```\n\n----------------------------------------\n\nTITLE: Deleting Session Data\nDESCRIPTION: Examples of deleting single or multiple session items using forget and delete methods.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/session.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$session = $request->session();\n// Delete a single item\n$session->forget('name');\n// Delete multiple items\n$session->forget(['name', 'age']);\n\n$session = $request->session();\n// Equivalent to $session->forget('name');\n$session->delete('name');\n```\n\n----------------------------------------\n\nTITLE: Basic Translation Controller Example\nDESCRIPTION: Controller demonstrating basic translation usage with trans() function\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/components/translation.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\n\nclass UserController\n{\n    public function get(Request $request)\n    {\n        $hello = trans('hello'); // 你好 世界!\n        return response($hello);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: External Redis Queue Message Delivery\nDESCRIPTION: Helper function for delivering messages to Redis queue from external projects.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/queue/redis.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nfunction redis_queue_send($redis, $queue, $data, $delay = 0) {\n    $queue_waiting = '{redis-queue}-waiting';\n    $queue_delay = '{redis-queue}-delayed';\n    $now = time();\n    $package_str = json_encode([\n        'id'       => rand(),\n        'time'     => $now,\n        'delay'    => $delay,\n        'attempts' => 0,\n        'queue'    => $queue,\n        'data'     => $data\n    ]);\n    if ($delay) {\n        return $redis->zAdd($queue_delay, $now + $delay, $package_str);\n    }\n    return $redis->lPush($queue_waiting.$queue, $package_str);\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Nested Array Configuration in Webman PHP\nDESCRIPTION: Shows how to access nested configuration values using dot notation.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/config.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nconfig('file.key1.key2');\n```\n\n----------------------------------------\n\nTITLE: Setting Cookies Before Body\nDESCRIPTION: This example shows how cookies can be set on an initially created response object before adding the body.  It illustrates the order of operations when building a response.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/response.md#2025-04-12_snippet_14\n\nLANGUAGE: php\nCODE:\n```\npublic function hello(Request $request)\n{\n    // Создание объекта\n    $response = response();\n    \n    // .... Пропущена бизнес-логика\n    \n    // Установка cookie\n    $response->cookie('foo', 'value');\n    \n    // .... Пропущена бизнес-логика\n\n    // Установка возвращаемых данных\n    $response->withBody('Возвращаемые данные');\n    return $response;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Payment Configuration File\nDESCRIPTION: This PHP configuration file defines the settings for Alipay and WeChat payment gateways. It includes app IDs, secrets, certificate paths, callback URLs, and mode settings (sandbox/normal).\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/components/payment.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * @desc 支付配置文件\n * @author Tinywan(ShaoBo Wan)\n * @date 2022/03/11 20:15\n */\nreturn [\n    'alipay' => [\n        'default' => [\n            // 必填-支付宝分配的 app_id\n            'app_id' => '20160909004708941',\n            // 必填-应用私钥 字符串或路径\n            'app_secret_cert' => 'MIIEpAIBAAKCxxxxxxxxxxxxxxP4r3m4OUmD/+XDgCg==',\n            // 必填-应用公钥证书 路径\n            'app_public_cert_path' => base_path().'/payment/appCertPublicKey_2016090900470841.crt',\n            // 必填-支付宝公钥证书 路径\n            'alipay_public_cert_path' => base_path().'/payment/alipayCertPublicKey_RSA2.crt',\n            // 必填-支付宝根证书 路径\n            'alipay_root_cert_path' => base_path().'/payment/alipayRootCert.crt',\n            // 选填-同步回调地址\n            'return_url' => 'https://webman.tinywan.cn/payment/alipay-return',\n            // 选填-异步回调地址\n            'notify_url' => 'https://webman.tinywan.cn/payment/alipay-notify',\n            // 选填-服务商模式下的服务商 id，当 mode 为 Pay::MODE_SERVICE 时使用该参数\n            'service_provider_id' => '',\n            // 选填-默认为正常模式。可选为： MODE_NORMAL, MODE_SANDBOX, MODE_SERVICE\n            'mode' => \\Yansongda\\Pay\\Pay::MODE_SANDBOX,\n        ]\n    ],\n    'wechat' => [\n        'default' => [\n            // 必填-商户号，服务商模式下为服务商商户号\n            'mch_id' => '',\n            // 必填-商户秘钥\n            'mch_secret_key' => '',\n            // 必填-商户私钥 字符串或路径\n            'mch_secret_cert' => '',\n            // 必填-商户公钥证书路径\n            'mch_public_cert_path' => '',\n            // 必填\n            'notify_url' => 'https://yansongda.cn/wechat/notify',\n            // 选填-公众号 的 app_id\n            'mp_app_id' => '2016082000291234',\n            // 选填-小程序 的 app_id\n            'mini_app_id' => '',\n            // 选填-app 的 app_id\n            'app_id' => '',\n            // 选填-合单 app_id\n            'combine_app_id' => '',\n            // 选填-合单商户号\n            'combine_mch_id' => '',\n            // 选填-服务商模式下，子公众号 的 app_id\n            'sub_mp_app_id' => '',\n            // 选填-服务商模式下，子 app 的 app_id\n            'sub_app_id' => '',\n            // 选填-服务商模式下，子小程序 的 app_id\n            'sub_mini_app_id' => '',\n            // 选填-服务商模式下，子商户id\n            'sub_mch_id' => '',\n            // 选填-微信公钥证书路径, optional，强烈建议 php-fpm 模式下配置此参数\n            'wechat_public_cert_path' => [\n                '45F59D4DABF31918AFCEC556D5D2C6E376675D57' => __DIR__.'/Cert/wechatPublicKey.crt',\n            ],\n            // 选填-默认为正常模式。可选为： MODE_NORMAL, MODE_SERVICE\n            'mode' => \\Yansongda\\Pay\\Pay::MODE_SANDBOX,\n        ]\n    ],\n    'logger' => [\n        'enable' => false,\n        'file' => runtime_path().'/logs/alipay.log',\n        'level' => 'debug', // 建议生产环境等级调整为 info，开发环境为 debug\n        'type' => 'single', // optional, 可选 daily.\n        'max_file' => 30, // optional, 当 type 为 daily 时有效，默认 30 天\n    ],\n    'http' => [ // optional\n        'timeout' => 5.0,\n        'connect_timeout' => 5.0,\n        // 更多配置项请参考 [Guzzle](https://guzzle-cn.readthedocs.io/zh_CN/latest/request-options.html)\n    ],\n    '_force' => true,\n];\n```\n\n----------------------------------------\n\nTITLE: Mass Update of Records in PHP\nDESCRIPTION: This snippet shows how to update multiple records that match a specified condition using the `update()` method. It updates all matching records with the provided data.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/fr/db/model.md#2025-04-12_snippet_12\n\nLANGUAGE: php\nCODE:\n```\napp\\model\\User::where('uid', '>', 10)\n          ->update(['name' => 'tom']);\n```\n\n----------------------------------------\n\nTITLE: Capturing Output for Responses in Webman PHP\nDESCRIPTION: Demonstrates how to capture output from functions that print directly to the standard output using `ob_start()` and `ob_get_clean()`. This allows you to use the output as the response body.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/pt/response.md#2025-04-12_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace app\\controller;\n\nuse support\\Request;\n\nclass ImageController\n{\n    public function get(Request $request)\n    {\n        // Criar imagem\n        $im = imagecreatetruecolor(120, 20);\n        $text_color = imagecolorallocate($im, 233, 14, 91);\n        imagestring($im, 1, 5, 5,  'A Simple Text String', $text_color);\n\n        // Iniciar a captura de saída\n        ob_start();\n        // Imprimir a imagem\n        imagejpeg($im);\n        // Obter o conteúdo da imagem\n        $image = ob_get_clean();\n        \n        // Enviar a imagem\n        return response($image)->header('Content-Type', 'image/jpeg');\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Using BusinessException in PHP Controller for webman\nDESCRIPTION: Example of using BusinessException in a controller to handle business logic errors. This snippet demonstrates how to throw a BusinessException with a custom error message and code.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/de/exception.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\nuse support\\exception\\BusinessException;\n\nclass FooController\n{\n    public function index(Request $request)\n    {\n        $this->chackInpout($request->post());\n        return response('hello index');\n    }\n    \n    protected function chackInpout($input)\n    {\n        if (!isset($input['token'])) {\n            throw new BusinessException('Parameter error', 3000);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Non-Integer Primary Key Type in Eloquent Model\nDESCRIPTION: Demonstrates how to set the primary key type to string for non-integer primary keys in Eloquent models.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/db/model.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nclass User extends Model\n{\n    /**\n     * \"Тип\" автоматически увеличиваемого ID.\n     *\n     * @var string\n     */\n    protected $keyType = 'string';\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Bootstrap File using Webman Console\nDESCRIPTION: This command uses the `webman/console` package to generate a bootstrap file.  This file will contain a class that implements the `Bootstrap` interface, allowing for code execution during process startup. Make sure `webman/console` is installed.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/others/bootstrap.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n\"php webman make:bootstrap MemReport\"\n```\n\n----------------------------------------\n\nTITLE: Sending Messages with Stomp Client in PHP\nDESCRIPTION: Demonstrates sending messages to a specific queue using Webman Stomp Client. Requires manual serialization of data and uses json_encode for message preparation.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/th/queue/stomp.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\nuse Webman\\Stomp\\Client;\n\nclass Index\n{\n    public function queue(Request $request)\n    {\n        // Queue\n        $queue = 'examples';\n        // Data (requires manual serialization)\n        $data = json_encode(['to' => 'tom@gmail.com', 'content' => 'hello']);\n        // Send data\n        Client::send($queue, $data);\n\n        return response('redis queue test');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Logging in Webman Application Plugin with PHP\nDESCRIPTION: Demonstrates how to use logging functionality in a Webman application plugin, including accessing the main project's log channels.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/tr/plugin/app.md#2025-04-12_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse support\\Log;\nLog::channel('plugin.admin.default')->info('test');\n\n// Using main project's log configuration\nLog::info('Günlük içeriği');\n// Assuming main project has a 'test' log channel\nLog::channel('test')->info('Günlük içeriği');\n```\n\n----------------------------------------\n\nTITLE: Inserting Records in Webman PHP\nDESCRIPTION: This snippet demonstrates how to insert single and multiple records into a database table.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/hi/db/queries.md#2025-04-12_snippet_35\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')->insert(\n    ['email' => 'john@example.com', 'votes' => 0]\n);\n\nDb::table('users')->insert([\n    ['email' => 'taylor@example.com', 'votes' => 0],\n    ['email' => 'dayle@example.com', 'votes' => 0]\n]);\n```\n\n----------------------------------------\n\nTITLE: User Controller Example in PHP\nDESCRIPTION: This snippet shows a basic user controller with login and info methods in PHP. The `login` method sets a session variable, and the `info` method retrieves the session data.  The `$noNeedLogin` property defines which methods don't require authentication.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-hk/middleware.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n\"<?php\nnamespace app\\controller;\nuse support\\Request;\n\nclass UserController\n{\n    /**\n     * 不需要登錄的方法\n     */\n    protected $noNeedLogin = ['login'];\n\n    public function login(Request $request)\n    {\n        $request->session()->set('user', ['id' => 10, 'name' => 'webman']);\n        return json(['code' => 0, 'msg' => 'login ok']);\n    }\n\n    public function info()\n    {\n        return json(['code' => 0, 'msg' => 'ok', 'data' => session('user')]);\n    }\n}\"\n```\n\n----------------------------------------\n\nTITLE: Defining Class Route in PHP Webman\nDESCRIPTION: Example showing how to route a request to a specific controller class and method\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/route.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nRoute::any('/testclass', [app\\controller\\IndexController::class, 'test']);\n```\n\n----------------------------------------\n\nTITLE: Route Parameter Examples in Webman PHP\nDESCRIPTION: Various examples of route parameter patterns and constraints\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/route.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nRoute::any('/user/{id:\\d+}', function ($request, $id) {\n    return response($id);\n});\n\nRoute::any('/user/{name}', function ($request, $name) {\n   return response($name);\n});\n\nRoute::any('/user[/{name}]', function ($request, $name = null) {\n   return response($name ?? 'tom');\n});\n\nRoute::options('[{path:.+}]', function () {\n    return response('');\n});\n```\n\n----------------------------------------\n\nTITLE: Getting All Session Data in Webman\nDESCRIPTION: This code snippet retrieves all session data as an array. If no session data exists, an empty array is returned. The `$request->session()` method is used to access the session instance, and the `all()` method retrieves all session data.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/session.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$session = $request->session();\n$all = $session->all();\n```\n\n----------------------------------------\n\nTITLE: Initializing Database Configuration in PHP\nDESCRIPTION: Configuration file for defining database connections, supporting MySQL, PostgreSQL, SQLite, and SQL Server with default and multiple connection options\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/th/db/config.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n     'default' => 'mysql',\n     'connections' => [\n         'mysql' => [...],\n         'sqlite' => [...],\n         'pgsql' => [...],\n         'sqlsrv' => [...]\n     ]\n ];\n```\n\n----------------------------------------\n\nTITLE: Simple HTML View in Webman\nDESCRIPTION: This HTML snippet represents a simple view file in Webman. It receives a 'name' variable and displays a 'hello' message with the escaped name to prevent XSS attacks.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/tutorial.md#2025-04-12_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<!doctype html>\n<html>\n<head>\n    <meta charset=\"utf-8\">\n    <title>webman</title>\n</head>\n<body>\nhello <?=htmlspecialchars($name)?>\n</body>\n</html>\n\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Controller with Suffix in Webman PHP\nDESCRIPTION: Example of creating a controller class with two action methods - index and hello. The controller demonstrates basic request handling and response generation using the suffix 'Controller'.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/controller.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\n\nclass FooController\n{\n    public function index(Request $request)\n    {\n        return response('hello index');\n    }\n    \n    public function hello(Request $request)\n    {\n        return response('hello webman');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Context to Store Request Data in Webman PHP\nDESCRIPTION: This code demonstrates how to use `support\\Context` to store request-specific data within a webman controller. By storing the 'name' parameter in the context, each request has its own isolated data, preventing the global variable pollution issue demonstrated in the previous example.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/fr/coroutine/fiber.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace app\\controller;\n\nuse support\\Request;\nuse support\\Context;\nuse Workerman\\Timer;\n\nclass TestController\n{\n    public function index(Request $request)\n    {\n        Context::set('name', $request->get('name'));\n        Timer::sleep(5);\n        return Context::get('name');\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Accessing Main Project Database in Webman Plugin\nDESCRIPTION: This PHP code shows how to access the main project's database connections from within a Webman plugin.  It directly uses the `Db::table()` or `Db::connection()` methods without specifying the plugin name, allowing the plugin to leverage the main project's database configuration.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-hk/plugin/app.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse support\\Db;\nDb::table('user')->first();\n// 假设主项目还配置了一个admin连接\nDb::connection('admin')->table('admin')->first();\n```\n\n----------------------------------------\n\nTITLE: Closure Route Definition in Webman PHP\nDESCRIPTION: Example of defining a closure route that returns a test response when accessed at /test\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/route.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nRoute::any('/test', function ($request) {\n    return response('test');\n});\n```\n\n----------------------------------------\n\nTITLE: Using Multiple Logging Channels\nDESCRIPTION: Demonstrates how to use a specific logging channel in a controller.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/log.md#2025-04-12_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\nuse support\\Log;\n\nclass FooController\n{\n    public function index(Request $request)\n    {\n        $log = Log::channel('log2');\n        $log->info('log2 test');\n        return response('hello index');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting All Session Data in Webman\nDESCRIPTION: This code snippet demonstrates deleting all session data using the `flush()` method. This removes all data associated with the current session from storage. The session data is automatically deleted from storage when the session object is destroyed.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/session.md#2025-04-12_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$request->session()->flush();\n```\n\n----------------------------------------\n\nTITLE: Installazione di Twig via Composer in PHP\nDESCRIPTION: Comando per installare il motore di template Twig tramite Composer.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/view.md#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require twig/twig\n```\n\n----------------------------------------\n\nTITLE: Plugin Logging\nDESCRIPTION: This snippet shows how to use the logging facility within a plugin, using a plugin-specific channel. It sends an info log message to the 'plugin.admin.default' channel.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/pt/plugin/app.md#2025-04-12_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse support\\Log;\nLog::channel('plugin.admin.default')->info('teste');\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Session Data\nDESCRIPTION: Code to fetch all session data as an array\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/jp/session.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$session = $request->session();\n$all = $session->all();\n```\n\n----------------------------------------\n\nTITLE: Configuring AOP in PHP\nDESCRIPTION: Configuration file for AOP settings, including scan paths, ignored annotations, and aspect collectors.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/aop.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Hyperf\\Di\\Annotation\\AspectCollector;\n\nreturn [\n    'annotations' => [\n        'scan' => [\n            'paths' => [\n                BASE_PATH . '/app',\n            ],\n            'ignore_annotations' => [\n                'mixin',\n            ],\n            'class_map' => [\n            ],\n            'collectors' => [\n                AspectCollector::class\n            ],\n        ],\n    ],\n    'aspects' => [\n        // Qui inserire l'Aspect corrispondente\n        app\\aspect\\DebugAspect::class,\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Global Variable Pollution in Webman PHP Coroutines\nDESCRIPTION: This code illustrates the problem of global variable pollution in a coroutine environment.  When multiple requests access and modify a static variable concurrently, the final result can be incorrect. This example demonstrates how two requests can overwrite each other's data due to the delayed execution of the `Timer::sleep()` function.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/fr/coroutine/fiber.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace app\\controller;\n\nuse support\\Request;\nuse Workerman\\Timer;\n\nclass TestController\n{\n    protected static $name = '';\n\n    public function index(Request $request)\n    {\n        static::$name = $request->get('name');\n        Timer::sleep(5);\n        return static::$name;\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Returning a Redirect Response\nDESCRIPTION: This snippet demonstrates how to return a redirect response using the `redirect()` helper function. It redirects the user to the `/user` route.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/response.md#2025-04-12_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\n\nclass FooController\n{\n    public function hello(Request $request)\n    {\n        return redirect('/user');\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining a Webman Plugin Controller\nDESCRIPTION: This PHP code snippet defines a controller class `FooController` within the `plugin\\foo\\app\\controller` namespace. It includes two methods, `index` and `hello`, which return simple responses. The `Request` object is injected into the methods for handling HTTP requests.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/app/controller.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace plugin\\foo\\app\\controller;\n\nuse support\\Request;\n\nclass FooController\n{\n    public function index(Request $request)\n    {\n        return response('hello index');\n    }\n    \n    public function hello(Request $request)\n    {\n        return response('hello webman');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Get Request Query String - Webman PHP\nDESCRIPTION: Retrieves the request query string.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/th/request.md#2025-04-12_snippet_28\n\nLANGUAGE: php\nCODE:\n```\n$request->queryString();\n```\n\n----------------------------------------\n\nTITLE: Implementing Delayed Response with Timer\nDESCRIPTION: Example of non-blocking sleep implementation using Timer::sleep() in a controller.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/upgrade/1-5.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace app\\controller;\n\nuse support\\Request;\nuse Workerman\\Timer;\n\nclass TestController\n{\n    public function index(Request $request)\n    {\n        // Sleep for 1.5 seconds\n        Timer::sleep(1.5);\n        return $request->getRemoteIp();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Clusters in Webman PHP\nDESCRIPTION: Example of configuring Redis clusters in Webman PHP's config/redis.php file.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/tr/db/redis.md#2025-04-12_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'clusters' => [\n        'default' => [\n            [\n                'host'     => 'localhost',\n                'password' => null,\n                'port'     => 6379,\n                'database' => 0,\n            ],\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring Background Task Process in Webman\nDESCRIPTION: Process configuration for a non-listening background task handler.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/process.md#2025-04-12_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    // ... Other process configurations are omitted ...\n\n    'task' => [\n        'handler'  => app\\TaskTest::class\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Table Name in Eloquent Model\nDESCRIPTION: Shows how to specify a custom table name for an Eloquent model by setting the $table property.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/db/model.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nclass User extends Model\n{\n    /**\n     * Имя таблицы, связанной с моделью\n     *\n     * @var string\n     */\n    protected $table = 'user';\n}\n```\n\n----------------------------------------\n\nTITLE: Closure-based Event Handler\nDESCRIPTION: Example of using a closure function as an event handler in the event configuration.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/vi/components/event.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\nreturn [\n    'user.login' => [\n        function($user){\n            var_dump($user);\n        }\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Updating Records with Eloquent in PHP\nDESCRIPTION: Demonstrates how to update an existing database record by finding a model instance, modifying its properties, and calling the save method.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/tr/db/model.md#2025-04-12_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n$user = app\\model\\User::find(1);\n$user->name = 'jerry';\n$user->save();\n```\n\n----------------------------------------\n\nTITLE: Retrieving Single Models in Eloquent\nDESCRIPTION: Demonstrates various methods to retrieve single model instances in Eloquent.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/tr/db/model.md#2025-04-12_snippet_16\n\nLANGUAGE: PHP\nCODE:\n```\n$flight = app\\model\\Flight::find(1);\n\n$flight = app\\model\\Flight::where('active', 1)->first();\n\n$flight = app\\model\\Flight::firstWhere('active', 1);\n```\n\n----------------------------------------\n\nTITLE: Tracking Property Changes in Eloquent Models\nDESCRIPTION: Demonstrates how to use isDirty, isClean, and wasChanged methods to track property changes in a model. These methods help determine if properties have been modified since model loading or last save.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/tr/db/model.md#2025-04-12_snippet_22\n\nLANGUAGE: php\nCODE:\n```\n$user = User::create([\n    'first_name' => 'Taylor',\n    'last_name' => 'Otwell',\n    'title' => 'Developer',\n]);\n\n$user->title = 'Painter';\n\n$user->isDirty(); // true\n$user->isDirty('title'); // true\n$user->isDirty('first_name'); // false\n\n$user->isClean(); // false\n$user->isClean('title'); // false\n$user->isClean('first_name'); // true\n\n$user->save();\n\n$user->isDirty(); // false\n$user->isClean(); // true\n```\n\n----------------------------------------\n\nTITLE: Apache Benchmark (ab) Performance Testing Commands\nDESCRIPTION: Example command-line instructions for performing performance tests using Apache Benchmark with different configurations\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/others/benchmarks.md#2025-04-12_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# 100000 requests, 200 concurrent, keep-alive enabled\nab -n100000 -c200 -k http://127.0.0.1:8787/\n\n# 100000 requests, 200 concurrent, keep-alive disabled\nab -n100000 -c200 http://127.0.0.1:8787/\n```\n\n----------------------------------------\n\nTITLE: Parameter Grouping with Webman PHP\nDESCRIPTION: This code snippet demonstrates how to group parameters using an anonymous function within the `where()` clause in the Webman PHP framework's database query builder. It creates a condition where 'name' equals 'John' and either 'votes' is greater than 100 or 'title' equals 'Admin'.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/fr/db/queries.md#2025-04-12_snippet_26\n\nLANGUAGE: php\nCODE:\n```\n// select * from users where name = 'John' and (votes > 100 or title = 'Admin')\n$users = Db::table('users')\n           ->where('name', '=', 'John')\n           ->where(function ($query) {\n               $query->where('votes', '>', 100)\n                     ->orWhere('title', '=', 'Admin');\n           })\n           ->get();\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Mailer Service Class\nDESCRIPTION: This PHP class represents a basic Mailer service that will be used for demonstrating dependency injection.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/tr/di.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\service;\n\nclass Mailer\n{\n    public function mail($email, $content)\n    {\n        // Mail gönderme kodu buraya gelecek\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring the Process File in webman's config/process.php\nDESCRIPTION: This PHP code snippet configures the `config/process.php` file to start the task process with webman. It defines a process named 'task' and specifies the handler class as `process\\Task::class`, linking the task definition to webman's process management.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/fr/components/crontab.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nreturn [\n    ....autres configurations, ici omises....\n  \n    'task'  => [\n        'handler'  => process\\Task::class\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Translation Configuration Setup\nDESCRIPTION: Configuration file for translation settings including default locale and fallback options\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/de/components/translation.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    // Standardsprache\n    'locale' => 'zh_CN',\n    // Fallback-Sprache: Wenn eine Übersetzung in der aktuellen Sprache nicht gefunden wird, wird versucht, die Übersetzung in der Fallback-Sprache zu finden.\n    'fallback_locale' => ['zh_CN', 'en'],\n    // Verzeichnis für Sprachdateien\n    'path' => base_path() . '/resource/translations',\n];\n```\n\n----------------------------------------\n\nTITLE: Replicating Eloquent Models - PHP\nDESCRIPTION: Demonstrates using the replicate method to create a new instance of a model with copied attributes without saving it. Useful for creating similar records in a controlled manner.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/db/model.md#2025-04-12_snippet_23\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n$shipping = App\\Address::create([\n    'type' => 'shipping',\n    'line_1' => '123 Example Street',\n    'city' => 'Victorville',\n    'state' => 'CA',\n    'postcode' => '90001',\n]);\n\n$billing = $shipping->replicate()->fill([\n    'type' => 'billing'\n]);\n\n$billing->save();\n```\n\n----------------------------------------\n\nTITLE: Blog Service Class Implementation\nDESCRIPTION: Service class example showing constructor injection and data retrieval.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/controller.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\service;\nclass Blog\n{\n    private $title;\n    private $content;\n    public function __construct(string $title, string $content)\n    {\n        $this->title = $title;\n        $this->content = $content;\n    }\n    public function get()\n    {\n        return [\n            'title' => $this->title,\n            'content' => $this->content,\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using whereColumn Clauses With Webman DB Query Builder\nDESCRIPTION: This snippet demonstrates how to use `whereColumn` to compare two columns. The first example checks if 'first_name' is equal to 'last_name'. The second checks if 'updated_at' is greater than 'created_at'. The last uses an array to define multiple comparisons.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/db/queries.md#2025-04-12_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')\n                ->whereColumn('first_name', 'last_name')\n                ->get();\n```\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')\n                ->whereColumn('updated_at', '>', 'created_at')\n                ->get();\n```\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')\n                ->whereColumn([\n                    ['first_name', '=', 'last_name'],\n                    ['updated_at', '>', 'created_at'],\n                ])->get();\n```\n\n----------------------------------------\n\nTITLE: Using Union Statements With Webman DB Query Builder\nDESCRIPTION: This snippet demonstrates how to combine the results of two queries using the `union()` method.  The first query selects users where 'first_name' is null, and the second query selects users where 'last_name' is null. The results are combined into a single result set.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/db/queries.md#2025-04-12_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n$first = Db::table('users')\n            ->whereNull('first_name');\n\n$users = Db::table('users')\n            ->whereNull('last_name')\n            ->union($first)\n            ->get();\n```\n\n----------------------------------------\n\nTITLE: UserController Example Using Redis in PHP\nDESCRIPTION: This code snippet demonstrates a UserController class with a 'db' method that interacts with Redis to set and get a value from the database. It utilizes the support classes for request handling and Redis operations.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/es/db/redis.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\nuse support\\Redis;\n\nclass UserController\n{\n    public function db(Request $request)\n    {\n        $key = 'test_key';\n        Redis::set($key, rand());\n        return response(Redis::get($key));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Timestamp Column Names in Eloquent Model\nDESCRIPTION: Shows how to change the default names of timestamp columns by setting CREATED_AT and UPDATED_AT constants.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/db/model.md#2025-04-12_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nclass User extends Model\n{\n    const CREATED_AT = 'creation_date';\n    const UPDATED_AT = 'last_update';\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Middleware for Multiple Applications in Webman PHP\nDESCRIPTION: This code snippet demonstrates how to configure different middleware for various applications in a Webman PHP project. It shows global middleware and specific middleware for 'api' and 'admin' applications.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/multiapp.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    // 全局中间件\n    '' => [\n        support\\middleware\\AuthCheck::class,\n    ],\n    // api应用中间件\n    'api' => [\n         support\\middleware\\AccessControl::class,\n     ],\n    // admin应用中间件\n    'admin' => [\n         support\\middleware\\AdminAuthCheck::class,\n         support\\middleware\\SomeOtherClass::class,\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Middleware Interface Definition in PHP\nDESCRIPTION: This code snippet defines the `MiddlewareInterface` in PHP. It includes a `process` method that accepts a `Request` object and a callable handler, and returns a `Response` object. This interface must be implemented by all middleware classes.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-hk/middleware.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n\"interface MiddlewareInterface\n{\n    /**\n     * Process an incoming server request.\n     *\n     * Processes an incoming server request in order to produce a response.\n     * If unable to produce the response itself, it may delegate to the provided\n     * request handler to do so.\n     */\n    public function process(Request $request, callable $handler): Response;\n}\"\n```\n\n----------------------------------------\n\nTITLE: Blade Component Class\nDESCRIPTION: This PHP code defines a Blade component class named `Alert`.  The `render` method returns the view associated with the component.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-hk/view.md#2025-04-12_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n\"<?php\n\nnamespace app\\view\\components;\n\nuse Illuminate\\View\\Component;\n\nclass Alert extends Component\n{\n    \n    public function __construct()\n    {\n    \n    }\n    \n    public function render()\n    {\n        return view('components/alert')->rawBody();\n    }\n}\n?>\"\n```\n\n----------------------------------------\n\nTITLE: SDK Initialization\nDESCRIPTION: Initialize the payment SDK by loading and applying the configuration\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/pt/components/payment.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$config = Config::get('payment');\nPay::config($config);\n```\n\n----------------------------------------\n\nTITLE: Using Placeholders in Webman Translations\nDESCRIPTION: Example of using placeholders in language files and translating with variables in Webman.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/components/translation.md#2025-04-12_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n// Language file\nreturn [\n    'hello' => '你好 %name%!',\n];\n\n// Usage\ntrans('hello', ['%name%' => 'webman']); // 你好 webman!\n```\n\n----------------------------------------\n\nTITLE: Creating an English Language File\nDESCRIPTION: Adding a language file for English translations to support multiple languages in the application.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/components/translation.md#2025-04-12_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'hello' => 'hello world!',\n];\n```\n\n----------------------------------------\n\nTITLE: Returning a File Stream\nDESCRIPTION: This snippet demonstrates how to return a file stream using the `file()` method of the `response` object. It sends the `favicon.ico` file from the public directory.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/response.md#2025-04-12_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\n\nclass FooController\n{\n    public function hello(Request $request)\n    {\n        return response()->file(public_path() . '/favicon.ico');\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Phinx Project Directory Structure\nDESCRIPTION: Recommended project directory structure for database migrations and seeds in a Webman application\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/db/migration.md#2025-04-12_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n.\\n├── app                           应用目录\\n│   ├── controller                控制器目录\\n│   │   └── Index.php             控制器\\n│   ├── model                     模型目录\\n......\\n├── database                      数据库文件\\n│   ├── migrations                迁移文件\\n│   │   └── 20180426073606_create_user_table.php\\n│   ├── seeds                     测试数据\\n│   │   └── UserSeeder.php\\n......\n```\n\n----------------------------------------\n\nTITLE: Configuración con Valor por Defecto en PHP\nDESCRIPTION: Método para obtener configuraciones con un valor por defecto opcional. Si la configuración no existe, se devolverá el valor predeterminado o null.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/es/config.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nconfig($key, $default);\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Single Row with where Condition in webman-php\nDESCRIPTION: Query to fetch a single row from the database using the first() method. This example retrieves the first user where the name equals 'John'.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/db/queries.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$user = Db::table('users')->where('name', 'John')->first();\n```\n\n----------------------------------------\n\nTITLE: Generated ErrorCode Class with Automatic Error Codes\nDESCRIPTION: Final generated ErrorCode class containing predefined error codes with unique negative identifiers\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/es/components/generate_error_code.md#2025-04-12_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n* Archivo generado, no modifique manualmente.\n* @Autores: $Id$\n*/\nnamespace support;\n\nclass ErrorCode\n{\n    const LoginNameOrPasswordError = -20110001;\n    const UserNotExist = -20110002;\n    const TokenNotExist = -20110003;\n    const InvalidToken = -20110004;\n    const ExpireToken = -20110005;\n    const WrongToken = -20110006;\n    const ClientIpNotEqual = -20110007;\n    const TokenRecordNotFound = -20110008;\n    const ModelAddUserError = -20110009;\n    const NoInfoToModify = -20110010;\n    const OnlyAdminPasswordCanBeModified = -20110011;\n    const AdminAccountCannotBeDeleted = -20110012;\n    const DbNotExist = -20110013;\n    const ModelAddOptionsError = -20110014;\n    const UnableToDeleteSystemConfig = -20110015;\n    const ConfigParamKeyRequired = -20110016;\n    const ExpiryCanNotGreaterThan7days = -20110017;\n    const GetPresignedPutObjectUrlError = -20110018;\n    const ObjectStorageConfigNotExist = -20110019;\n    const UpdateNavIndexSortError = -20110020;\n    const TagNameAttNotExist = -20110021;\n    const ModelUpdateOptionsError = -20110022;\n}\n```\n\n----------------------------------------\n\nTITLE: Grouping and Having in Webman PHP\nDESCRIPTION: This snippet demonstrates how to use groupBy and having methods for grouping and filtering results.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/hi/db/queries.md#2025-04-12_snippet_33\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')\n                ->groupBy('account_id')\n                ->having('account_id', '>', 100)\n                ->get();\n// You can pass multiple parameters to the groupBy method\n$users = Db::table('users')\n                ->groupBy('first_name', 'status')\n                ->having('account_id', '>', 100)\n                ->get();\n```\n\n----------------------------------------\n\nTITLE: Sending Messages to Stomp Queue in PHP\nDESCRIPTION: Example of sending messages to a Stomp queue using the Webman Stomp client. Demonstrates queue name specification, data serialization, and message delivery.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/queue/stomp.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\nuse Webman\\Stomp\\Client;\n\nclass Index\n{\n    public function queue(Request $request)\n    {\n        // Queue name\n        $queue = 'examples';\n        // Data (serialization is required when passing an array, for example, using json_encode, serialize, etc.)\n        $data = json_encode(['to' => 'tom@gmail.com', 'content' => 'hello']);\n        // Perform delivery\n        Client::send($queue, $data);\n\n        return response('redis queue test');\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Command Class for Webman Plugin\nDESCRIPTION: Example of creating a custom command class FooAdminAddCommand with command line configuration for a Webman plugin. The command follows the vendor-plugin naming convention and includes argument handling and execution logic.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/plugin/create.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Foo\\Admin;\n\nuse Symfony\\Component\\Console\\Command\\Command;\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\nuse Symfony\\Component\\Console\\Input\\InputOption;\nuse Symfony\\Component\\Console\\Input\\InputArgument;\n\nclass FooAdminAddCommand extends Command\n{\n    protected static $defaultName = 'foo-admin:add';\n    protected static $defaultDescription = 'Here is the command description';\n\n    /**\n     * @return void\n     */\n    protected function configure()\n    {\n        $this->addArgument('name', InputArgument::REQUIRED, 'Add name');\n    }\n\n    /**\n     * @param InputInterface $input\n     * @param OutputInterface $output\n     * @return int\n     */\n    protected function execute(InputInterface $input, OutputInterface $output)\n    {\n        $name = $input->getArgument('name');\n        $output->writeln(\"Admin add $name\");\n        return self::SUCCESS;\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Application Plugin with Webman Console\nDESCRIPTION: This code snippet demonstrates how to create a new application plugin using the Webman console command. This command scaffolds the basic directory structure and configuration files for a plugin.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-hk/plugin/app.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nphp webman app-plugin:create {插件名}\n```\n\n----------------------------------------\n\nTITLE: Настройка базы данных в webman с illuminate/database\nDESCRIPTION: Пример конфигурационного файла database.php для настройки соединения с MySQL базой данных в webman. Включает параметры подключения, такие как хост, порт, имя базы данных, учетные данные и другие настройки.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/db/tutorial.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    // По умолчанию используемая база данных\n    'default' => 'mysql',\n\n    // Настройки различных баз данных\n    'connections' => [\n        'mysql' => [\n            'driver'      => 'mysql',\n            'host'        => '127.0.0.1',\n            'port'        => 3306,\n            'database'    => 'test',\n            'username'    => 'root',\n            'password'    => '',\n            'unix_socket' => '',\n            'charset'     => 'utf8',\n            'collation'   => 'utf8_unicode_ci',\n            'prefix'      => '',\n            'strict'      => true,\n            'engine'      => null,\n            'options' => [\n                \\PDO::ATTR_TIMEOUT => 3\n            ]\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Accessing Custom Payment Configuration in Webman PHP\nDESCRIPTION: Demonstrates various ways to access values from a custom payment configuration file.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/config.md#2025-04-12_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nconfig('payment');\nconfig('payment.key');\nconfig('payment.key');\n```\n\n----------------------------------------\n\nTITLE: Redirect Function Implementation\nDESCRIPTION: This snippet shows the implementation of the `redirect()` helper function, which creates a `support\\Response` object with the `Location` header set to the given URL. It also allows for setting custom headers.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/response.md#2025-04-12_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nfunction redirect($location, $status = 302, $headers = [])\n{\n    $response = new Response($status, ['Location' => $location]);\n    if (!empty($headers)) {\n        $response->withHeaders($headers);\n    }\n    return $response;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Creating User Validation Rules with think-validate\nDESCRIPTION: Example showing how to create a validation class for user data using think-validate library with rules for name, age and email validation\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/components/validation.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\index\\validate;\n\nuse think\\Validate;\n\nclass User extends Validate\n{\n    protected $rule = [\n        'name' => 'require|max:25',\n        'age' => 'number|between:1,120',\n        'email' => 'email',\n    ];\n\n    protected $message = [\n        'name.require' => 'Name is required',\n        'name.max' => 'Name cannot exceed 25 characters',\n        'age.number' => 'Age must be a number',\n        'age.between' => 'Age must be between 1 and 120',\n        'email' => 'Invalid email',\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Plugin Redis in Webman\nDESCRIPTION: This PHP code demonstrates how to access Redis connections defined within a Webman plugin. It uses the `Redis::connection()` method with the plugin's name and connection name to interact with the Redis server.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-hk/plugin/app.md#2025-04-12_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse support\\Redis;\nRedis::connection('plugin.cms.default')->get('key');\nRedis::connection('plugin.cms.cache')->get('key');\n```\n\n----------------------------------------\n\nTITLE: Blog Controller with Service Injection\nDESCRIPTION: Controller example showing dependency injection of Blog service class.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/controller.md#2025-04-12_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\nuse app\\service\\Blog;\nuse support\\Response;\n\nclass BlogController\n{\n    public function create(Blog $blog): Response\n    {\n        return json($blog->get());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Triggering Client Events (JavaScript)\nDESCRIPTION: This JavaScript code demonstrates how a client can trigger events on a private channel.  The event name must start with `client-`.  Other clients subscribed to the same channel (excluding the sender) will receive the event.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-hk/plugin/push.md#2025-04-12_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar user_channel = connection.subscribe('private-user-1');\nuser_channel.on('client-message', function (data) {\n    // \n});\nuser_channel.trigger('client-message', {form_uid:2, content:\"hello\"});\n```\n\n----------------------------------------\n\nTITLE: Getting and Deleting a Session Value in Webman\nDESCRIPTION: This code snippet shows how to get and delete a session value in a single operation using the `pull()` method. If the session key exists, its value is returned and the key is removed from the session; otherwise, null is returned.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/session.md#2025-04-12_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$session = $request->session();\n$name = $session->pull('name');\n```\n\n----------------------------------------\n\nTITLE: Returning a View in Webman PHP\nDESCRIPTION: Demonstrates how to return a rendered view using the `view()` helper function. It passes data to the view for rendering.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/pt/response.md#2025-04-12_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\n\nclass FooController\n{\n    public function hello(Request $request)\n    {\n        return view('foo/hello', ['name' => 'webman']);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring AOP Settings\nDESCRIPTION: Configuration file setup for AOP including scan paths, annotations, and aspects\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/aop.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Hyperf\\Di\\Annotation\\AspectCollector;\n\nreturn [\n    'annotations' => [\n        'scan' => [\n            'paths' => [\n                BASE_PATH . '/app',\n            ],\n            'ignore_annotations' => [\n                'mixin',\n            ],\n            'class_map' => [\n            ],\n            'collectors' => [\n                AspectCollector::class\n            ],\n        ],\n    ],\n    'aspects' => [\n        // 这里写入对应的 Aspect\n        app\\aspect\\DebugAspect::class,\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Twig Template Example\nDESCRIPTION: This HTML code is a basic Twig template. It displays the value of the `name` variable passed from the controller using Twig's template syntax `{{ name }}`.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-hk/view.md#2025-04-12_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n\"<!doctype html>\n<html>\n<head>\n    <meta charset=\\\"utf-8\\\">\n    <title>webman</title>\n</head>\n<body>\nhello {{name}}\n</body>\n</html>\"\n```\n\n----------------------------------------\n\nTITLE: Extending Twig in PHP Configuration\nDESCRIPTION: This PHP snippet demonstrates how to extend Twig by adding custom extensions, filters, and functions in the view configuration file.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/de/view.md#2025-04-12_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse support\\view\\Twig;\nreturn [\n    'handler' => Twig::class,\n    'extension' => function (Twig\\Environment $twig) {\n        $twig->addExtension(new your\\namespace\\YourExtension());\n        $twig->addFilter(new Twig\\TwigFilter('rot13', 'str_rot13'));\n        $twig->addFunction(new Twig\\TwigFunction('function_name', function () {}));\n    }\n];\n```\n\n----------------------------------------\n\nTITLE: Использование Db в контроллере webman\nDESCRIPTION: Пример контроллера UserController, демонстрирующий использование фасада Db для запроса к базе данных. Код запрашивает имя пользователя из таблицы users на основе параметра uid и возвращает приветственное сообщение.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/db/tutorial.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\nuse support\\Db;\n\nclass UserController\n{\n    public function db(Request $request)\n    {\n        $default_uid = 29;\n        $uid = $request->get('uid', $default_uid);\n        $name = Db::table('users')->where('uid', $uid)->value('username');\n        return response(\"hello $name\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating database configuration with environment variables\nDESCRIPTION: Example of how to use environment variables in a PHP configuration file for database settings.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/components/env.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    // Default database\n    'default' => 'mysql',\n\n    // Various database configurations\n    'connections' => [\n        'mysql' => [\n            'driver'      => 'mysql',\n            'host'        => getenv('DB_HOST'),\n            'port'        => getenv('DB_PORT'),\n            'database'    => getenv('DB_NAME'),\n            'username'    => getenv('DB_USER'),\n            'password'    => getenv('DB_PASSWORD'),\n            'unix_socket' => '',\n            'charset'     => 'utf8',\n            'collation'   => 'utf8_unicode_ci',\n            'prefix'      => '',\n            'strict'      => true,\n            'engine'      => null,\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Implementing ExceptionHandlerInterface in Webman PHP\nDESCRIPTION: This code defines the ExceptionHandlerInterface that must be implemented by custom exception handler classes. It includes methods for logging and rendering responses.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/exception.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\ninterface ExceptionHandlerInterface\n{\n    /**\n     * Registra il log\n     * @param Throwable $e\n     * @return mixed\n     */\n    public function report(Throwable $e);\n\n    /**\n     * Reinderizza la risposta\n     * @param Request $request\n     * @param Throwable $e\n     * @return Response\n     */\n    public function render(Request $request, Throwable $e) : Response;\n}\n```\n\n----------------------------------------\n\nTITLE: Logging Methods with Channel\nDESCRIPTION: This code snippet shows equivalent calls to the logging methods, but using a specific channel named 'default'. It demonstrates how to access a specific channel through `Log::channel('default')` and then use the same logging methods as before. It is functionally equivalent to calling the logging methods directly through the Log facade.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/th/log.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n $log = Log::channel('default');\n$log->log($level, $message, array $context = [])\n$log->debug($message, array $context = [])\n$log->info($message, array $context = [])\n$log->notice($message, array $context = [])\n$log->warning($message, array $context = [])\n$log->error($message, array $context = [])\n$log->critical($message, array $context = [])\n$log->alert($message, array $context = [])\n$log->emergency($message, array $context = [])\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Exception Handling with respect/validation in PHP\nDESCRIPTION: Example of how to manually catch ValidationException and return custom JSON responses. This approach allows for more control over the error format compared to the default exception handler.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-hk/components/validation.md#2025-04-12_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\nuse Respect\\Validation\\Validator as v;\nuse Respect\\Validation\\Exceptions\\ValidationException;\n\nclass IndexController\n{\n    public function index(Request $request)\n    {\n        try {\n            $data = v::input($request->post(), [\n                'username' => v::alnum()->length(5, 64)->setName('用戶名'),\n                'password' => v::length(5, 64)->setName('密碼')\n            ]);\n        } catch (ValidationException $e) {\n            return json(['code' => 500, 'msg' => $e->getMessage()]);\n        }\n        return json(['code' => 0, 'msg' => 'ok', 'data' => $data]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Création d'un service HTTP personnalisé en PHP\nDESCRIPTION: Exemple de classe pour étendre le service HTTP de Webman en créant une classe Server personnalisée et sa configuration correspondante dans config/process.php.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/fr/process.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\\n\\nnamespace app;\\n\\nuse Webman\\App;\\n\\nclass Server extends App\\n{\\n    // Ici, vous réécrivez les méthodes de Webman\\App\\n}\n```\n\n----------------------------------------\n\nTITLE: Start Webman in Daemon Mode (Linux)\nDESCRIPTION: This command starts the webman server in daemon mode. It is designed for production environments, where the service should run continuously in the background. Closing the terminal will not affect the running webman service.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/install.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nphp start.php start -d\n```\n\n----------------------------------------\n\nTITLE: Configuration d'un processus de tâche en arrière-plan\nDESCRIPTION: Configuration simple dans config/process.php pour enregistrer un processus de tâche en arrière-plan qui n'écoute aucun port mais exécute des tâches programmées.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/fr/process.md#2025-04-12_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nreturn [\\n    // ... autres configurations de processus omises...\\n    \\n    'task' => [\\n        'handler'  => app\\TaskTest::class\\n    ],\\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring Permission Settings for webman-permission\nDESCRIPTION: PHP configuration file for webman-permission, including default permissions, logging settings, and enforcer configurations.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/tr/casbin.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nreturn [\n    /*\n     *Varsayılan İzin\n     */\n    'default' => 'temel',\n\n    'log' => [\n        'enabled' => false,\n        'logger' => 'log',\n    ],\n\n    'enforcers' => [\n        'temel' => [\n            /*\n            * Model Ayarı\n            */\n            'model' => [\n                'config_type' => 'dosya',\n                'config_file_path' => config_path() . '/casbin-basic-model.conf',\n                'config_text' => '',\n            ],\n\n            // Adaptör .\n            'adapter' => webman\\permission\\adapter\\DatabaseAdapter::class,\n\n            /*\n            * Veritabanı Ayarları.\n            */\n            'database' => [\n                // Veritabanı bağlantı adı, boş bırakıldığında varsayılan yapılandırma.\n                'connection' => '',\n                // Politika tablo adı (önek tablo adını içermez)\n                'rules_name' => 'kural',\n                // Politika tablo tam adı.\n                'rules_table' => 'train_rule',\n            ],\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Equivalent Redis Connection Calls\nDESCRIPTION: These are equivalent calls using a Redis connection instance. These methods are equivalent to the facade calls, but called directly on a Redis connection object.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/db/redis.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$redis = Redis::connection('default');\n$redis->append($key, $value)\n$redis->bitCount($key)\n$redis->decr($key, $value)\n$redis->decrBy($key, $value)\n$redis->get($key)\n$redis->getBit($key, $offset)\n```\n\n----------------------------------------\n\nTITLE: Clearing All Session Data in Webman\nDESCRIPTION: Demonstrates how to remove all session data at once using the flush method. Session data is automatically removed when the session object is destroyed.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/fr/session.md#2025-04-12_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$request->session()->flush();\n```\n\n----------------------------------------\n\nTITLE: Join-Operationen mit dem Query Builder in PHP\nDESCRIPTION: Diese Beispiele demonstrieren verschiedene Arten von Join-Operationen, einschließlich Inner Join, Left Join, Right Join und Cross Join.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/de/db/queries.md#2025-04-12_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')\n            ->join('contacts', 'users.id', '=', 'contacts.user_id')\n            ->join('orders', 'users.id', '=', 'orders.user_id')\n            ->select('users.*', 'contacts.phone', 'orders.price')\n            ->get();\n\n$users = Db::table('users')\n            ->leftJoin('posts', 'users.id', '=', 'posts.user_id')\n            ->get();\n\n$users = Db::table('users')\n            ->rightJoin('posts', 'users.id', '=', 'posts.user_id')\n            ->get();\n\n$users = Db::table('sizes')\n            ->crossJoin('colors')\n            ->get();\n```\n\n----------------------------------------\n\nTITLE: Or Where Clauses in Webman PHP\nDESCRIPTION: This snippet shows how to use the orWhere method to add OR conditions to the query.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/hi/db/queries.md#2025-04-12_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')\n                    ->where('votes', '>', 100)\n                    ->orWhere('name', 'John')\n                    ->get();\n```\n\n----------------------------------------\n\nTITLE: Обработка событий с использованием замыканий в Webman\nDESCRIPTION: Использование замыканий в качестве функций обработки событий. Замыкания могут быть зарегистрированы непосредственно в конфигурации событий. Они получают данные события в качестве параметров и могут выполнять любую необходимую логику.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/components/event.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\nreturn [\n    'user.login' => [\n        function($user){\n            var_dump($user);\n        }\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring Error Code Generation Settings\nDESCRIPTION: Configuration file that defines system number, error code range, and other parameters for error code generation\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/components/generate_error_code.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nreturn [\n    \"class\" => new \\support\\ErrorCode(), // ErrorCode class file\n    \"root_path\" => app_path(), // Current code root directory\n    \"system_number\" => 201, // System identifier\n    \"start_min_number\" => 10000 // Error code range (e.g. 10000-99999)\n];\n```\n\n----------------------------------------\n\nTITLE: Middleware Configuration in PHP\nDESCRIPTION: Configuration file showing how to register global middleware in the WebMan framework.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/de/middleware.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    '' => [\n        app\\middleware\\AccessControlTest::class,\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Updating or Inserting Records in Webman PHP\nDESCRIPTION: This snippet shows how to update an existing record or insert a new one if it doesn't exist.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/hi/db/queries.md#2025-04-12_snippet_38\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')\n    ->updateOrInsert(\n        ['email' => 'john@example.com', 'name' => 'John'],\n        ['votes' => '2']\n    );\n```\n\n----------------------------------------\n\nTITLE: Alternative Get and Delete Session Value in Webman\nDESCRIPTION: Shows the equivalent operations for retrieving and deleting a session value, which is the same as using the pull method.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/fr/session.md#2025-04-12_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$session = $request->session();\n$value = $session->get($name);\n$session->delete($name);\n```\n\n----------------------------------------\n\nTITLE: Retrieving First Record with Condition in Webman PHP\nDESCRIPTION: This snippet shows how to retrieve the first record that matches a specific condition using the where and first methods.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/hi/db/queries.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$user = Db::table('users')->where('name', 'John')->first();\n```\n\n----------------------------------------\n\nTITLE: Aggregate Functions in WebMan PHP Query Builder\nDESCRIPTION: Demonstrates the use of aggregate functions like count, max, min, avg, and sum.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/jp/db/queries.md#2025-04-12_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')->count();\n$price = Db::table('orders')->max('price');\n$price = Db::table('orders')->where('finalized', 1)->avg('price');\n```\n\n----------------------------------------\n\nTITLE: Installing Redis Dependencies for Webman\nDESCRIPTION: Command to install the required Redis packages through Composer. After installation, a server restart is required (reload does not work).\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/db/redis.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ncomposer require -W illuminate/redis illuminate/events\n```\n\n----------------------------------------\n\nTITLE: Updating Database Record\nDESCRIPTION: Updates a specific user record by matching the ID and setting new values\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/db/queries.md#2025-04-12_snippet_35\n\nLANGUAGE: php\nCODE:\n```\n$affected = Db::table('users')\n              ->where('id', 1)\n              ->update(['votes' => 1]);\n```\n\n----------------------------------------\n\nTITLE: Retrieving GET and POST Parameters in Webman\nDESCRIPTION: Shows methods for retrieving entire GET/POST arrays, specific values, and providing default values when parameters are not present\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/request.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$request->get(); // Returns entire GET array\n$request->get('name'); // Returns specific GET value\n$request->get('name', 'tom'); // Returns default value if not found\n```\n\nLANGUAGE: php\nCODE:\n```\n$request->post(); // Returns entire POST array\n$request->post('name'); // Returns specific POST value\n$request->post('name', 'tom'); // Returns default value if not found\n```\n\n----------------------------------------\n\nTITLE: Twig Template Example in HTML\nDESCRIPTION: This HTML snippet demonstrates a basic Twig template syntax for displaying a dynamic name value passed from the controller.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/de/view.md#2025-04-12_snippet_5\n\nLANGUAGE: HTML\nCODE:\n```\n<!doctype html>\n<html>\n<head>\n    <meta charset=\"utf-8\">\n    <title>webman</title>\n</head>\n<body>\nhello {{name}}\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Adding Global Middleware\nDESCRIPTION: This code snippet shows how to add the authorization middleware to the global middleware list in the `config/middleware.php` file. This ensures that the authorization middleware is executed for every request.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/casbin.md#2025-04-12_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n\"return [\n    // Глобальное промежуточное ПО\n    '' => [\n        // ... здесь опущены другие промежуточное ПО\n        app\\\\middleware\\\\AuthorizationMiddleware::class,\n    ]\n];\"\n```\n\n----------------------------------------\n\nTITLE: Redis Interface Methods in Webman\nDESCRIPTION: List of available Redis interface methods in Webman, including key-value operations and database management.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/jp/db/redis.md#2025-04-12_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nRedis::append($key, $value)\nRedis::bitCount($key)\nRedis::decr($key, $value)\nRedis::decrBy($key, $value)\nRedis::get($key)\nRedis::getBit($key, $offset)\nRedis::getRange($key, $start, $end)\nRedis::getSet($key, $value)\nRedis::incr($key, $value)\nRedis::incrBy($key, $value)\nRedis::incrByFloat($key, $value)\nRedis::mGet(array $keys)\nRedis::getMultiple(array $keys)\nRedis::mSet($pairs)\nRedis::mSetNx($pairs)\nRedis::set($key, $value, $expireResolution = null, $expireTTL = null, $flag = null)\nRedis::setBit($key, $offset, $value)\nRedis::setEx($key, $ttl, $value)\nRedis::pSetEx($key, $ttl, $value)\nRedis::setNx($key, $value)\nRedis::setRange($key, $offset, $value)\nRedis::strLen($key)\nRedis::del(...$keys)\nRedis::exists(...$keys)\nRedis::expire($key, $ttl)\nRedis::expireAt($key, $timestamp)\nRedis::select($dbIndex)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Controller Reuse Issues in Webman PHP\nDESCRIPTION: This snippet illustrates potential issues when reusing controllers, showing how property modifications can affect subsequent requests when controller_reuse is set to true.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/jp/controller.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\n\nclass FooController\n{\n    protected $model;\n    \n    public function update(Request $request, $id)\n    {\n        $model = $this->getModel($id);\n        $model->update();\n        return response('ok');\n    }\n    \n    public function delete(Request $request, $id)\n    {\n        $model = $this->getModel($id);\n        $model->delete();\n        return response('ok');\n    }\n    \n    protected function getModel($id)\n    {\n        // This method will keep the model after the first request update?id=1\n        // When requesting delete?id=2 again, it will delete data with id 1\n        if (!$this->model) {\n            $this->model = Model::find($id);\n        }\n        return $this->model;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Model State Change Detection\nDESCRIPTION: Examples of using isDirty, isClean, and wasChanged methods to track model attribute changes.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/pt/db/model.md#2025-04-12_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$user = User::create([\n    'first_name' => 'Taylor',\n    'last_name' => 'Otwell',\n    'title' => 'Developer',\n]);\n\n$user->title = 'Painter';\n\n$user->isDirty(); // true\n$user->isDirty('title'); // true\n$user->isDirty('first_name'); // false\n\n$user->isClean(); // false\n$user->isClean('title'); // false\n$user->isClean('first_name'); // true\n\n$user->save();\n\n$user->isDirty(); // false\n$user->isClean(); // true\n```\n\n----------------------------------------\n\nTITLE: Returning a String Response in Webman\nDESCRIPTION: This code snippet demonstrates how to create a simple controller in Webman that retrieves a 'name' parameter from a GET request and returns a string response. If the 'name' parameter is not provided, it defaults to 'webman'.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-hk/tutorial.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\n\nclass UserController\n{\n    public function hello(Request $request)\n    {\n        $default_name = 'webman';\n        // 從get請求裡獲得name參數，如果沒有傳遞name參數則返回$default_name\n        $name = $request->get('name', $default_name);\n        // 向瀏覽器返回字符串\n        return response('hello ' . $name);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Setting Primary Key Type to String in Eloquent Model in PHP\nDESCRIPTION: This code demonstrates how to specify that the primary key is a string rather than an integer using the `$keyType` property.  Setting `$keyType` to 'string' is important when the primary key is not a numeric value.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/es/db/model.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass User extends Model\n{\n    /**\n     * Tipo de \"id\" de incremento automático.\n     * @var string\n     */\n    protected $keyType = 'string';\n}\n\n```\n\n----------------------------------------\n\nTITLE: Saving Session Data in Webman PHP\nDESCRIPTION: Shows how to save single and multiple session values using set() and put() methods.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/session.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$session = $request->session();\n$session->set('nome', 'tom');\n\n// Saving multiple values\n$session->put(['nome' => 'tom', 'età' => 12]);\n```\n\n----------------------------------------\n\nTITLE: Exemple de fuite de mémoire potentielle dans un contrôleur Webman\nDESCRIPTION: Démonstration d'un cas de fuite de mémoire potentielle où une propriété de tableau d'un contrôleur s'agrandit indéfiniment à chaque requête, en raison de la longue durée de vie du contrôleur.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/fr/others/lifecycle.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\n\nclass FooController\n{\n    // Propriété du tableau\n    public $data = [];\n    \n    public function index(Request $request)\n    {\n        $this->data[] = time();\n        return response('hello index');\n    }\n\n    public function hello(Request $request)\n    {\n        return response('hello webman');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating LoginController for Captcha Implementation\nDESCRIPTION: This code snippet creates a LoginController with methods for displaying a login form, generating a captcha image, and checking the user's captcha input. It uses the Webman\\Captcha\\CaptchaBuilder class to generate the captcha and stores the captcha phrase in the session for later validation.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/th/components/captcha.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\nuse Webman\\Captcha\\CaptchaBuilder;\n\nclass LoginController\n{\n    /**\n     * หน้าทดสอบ\n     */\n    public function index(Request $request)\n    {\n        return view('login/index');\n    }\n    \n    /**\n     * แสดงรูปภาพยืนยันตัวตน\n     */\n    public function captcha(Request $request)\n    {\n        // เริ่มต้นคลาสรหัสยืนยันตัวตน\n        $builder = new CaptchaBuilder;\n        // สร้างรหัสยืนยันตัวตน\n        $builder->build();\n        // จัดเก็บค่ารหัสยืนยันตัวตนในเซสชัน\n        $request->session()->set('captcha', strtolower($builder->getPhrase()));\n        // รับข้อมูลไบนารีของรูปภาพยืนยันตัวตน\n        $img_content = $builder->get();\n        // แสดงข้อมูลไบนารีของรูปภาพยืนยันตัวตน\n        return response($img_content, 200, ['Content-Type' => 'image/jpeg']);\n    }\n\n    /**\n     * ตรวจสอบรหัสยืนยันตัวตน\n     */\n    public function check(Request $request)\n    {\n        // รับค่าฟิลด์รหัสยืนยันตัวตนจากคำขอ post\n        $captcha = $request->post('captcha');\n        // เปรียบเทียบค่ารหัสยืนยันตัวตนในเซสชัน\n        if (strtolower($captcha) !== $request->session()->get('captcha')) {\n            return json(['code' => 400, 'msg' => 'รหัสยืนยันตัวตนที่ป้อนไม่ถูกต้อง']);\n        }\n        return json(['code' => 0, 'msg' => 'ตกลง']);\n    }\n\n}\n\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using Sessions in Webman PHP Controller\nDESCRIPTION: Demonstrates how to initialize a session, set session data, and retrieve session data in a Webman PHP controller.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/session.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\n\nclass UserController\n{\n    public function hello(Request $request)\n    {\n        $name = $request->get('nome');\n        $session = $request->session();\n        $session->set('nome', $name);\n        return response('ciao ' . $session->get('nome'));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Blade with Custom Directives\nDESCRIPTION: This PHP code demonstrates how to extend Blade by adding custom directives. The `view.extension` configuration allows you to modify the Blade environment. This snippet adds a directive to format dates.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-hk/view.md#2025-04-12_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n\"<?php\nuse support\\view\\Blade;\nreturn [\n    'handler' => Blade::class,\n    'extension' => function (Jenssegers\\Blade\\Blade $blade) {\n        // 給blade添加指令\n        $blade->directive('mydate', function ($timestamp) {\n            return \\\"<?php echo date('Y-m-d H:i:s', $timestamp); ?>\\\";\n        });\n    }\n];\n?>\"\n```\n\n----------------------------------------\n\nTITLE: Registering Language Middleware in Configuration\nDESCRIPTION: Configuration to register the language middleware globally, applying it to all requests in the application.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/components/translation.md#2025-04-12_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    // Глобальные промежуточные ПО\n    '' => [\n        // ... опустим другие промежуточные ПО\n        app\\middleware\\Lang::class,\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Binding MailerInterface to Mailer implementation\nDESCRIPTION: This configuration binds the MailerInterface to the Mailer implementation, allowing for automatic dependency injection of the correct implementation.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-hk/di.md#2025-04-12_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n\"<?php\nuse Psr\\Container\\ContainerInterface;\nreturn [\n    app\\service\\MailerInterface::class => function(ContainerInterface $container) {\n        return $container->make(app\\service\\Mailer::class, ['smtp_host' => '192.168.1.11', 'smtp_port' => 25]);\n    }\n];\"\n```\n\n----------------------------------------\n\nTITLE: MemReport Bootstrap Class\nDESCRIPTION: This code shows the content of the `app/bootstrap/MemReport.php` file, which implements the `Bootstrap` interface. It includes logic to conditionally execute a timer based on whether the script is running in a command-line environment, and sets up a timer to report memory usage every 10 seconds.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/others/bootstrap.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace app\\bootstrap;\n\nuse Webman\\Bootstrap;\n\nclass MemReport implements Bootstrap\n{\n    public static function start($worker)\n    {\n        // Is it a command line environment?\n        $is_console = !$worker;\n        if ($is_console) {\n            // If you don't want this initialization to be executed in the command line environment, return directly here.\n            return;\n        }\n\n        // Execute every 10 seconds\n        \\Workerman\\Timer::add(10, function () {\n            // For the sake of demonstration, we use output instead of reporting process.\n            echo memory_get_usage() . \"\\n\";\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Redis Configuration Setup\nDESCRIPTION: Basic Redis configuration file structure defining connection parameters like host, password, port, and database\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/pt/db/redis.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'default' => [\n        'host'     => '127.0.0.1',\n        'password' => null,\n        'port'     => 6379,\n        'database' => 0,\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Updating Or Inserting Data With Webman DB Query Builder\nDESCRIPTION: This snippet demonstrates how to use the `updateOrInsert()` method. It attempts to update a record matching the first array. If no record is found, it inserts a new record combining the data from both arrays.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/db/queries.md#2025-04-12_snippet_28\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')\n    ->updateOrInsert(\n        ['email' => 'john@example.com', 'name' => 'John'],\n        ['votes' => '2']\n    );\n```\n\n----------------------------------------\n\nTITLE: Overriding Default Primary Key in Eloquent Model in PHP\nDESCRIPTION: This example shows how to override the default primary key ('id') in an Eloquent model using the `$primaryKey` property. Setting `$primaryKey` to 'uid' instructs Eloquent to use the 'uid' column as the primary key for this model.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/es/db/model.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass User extends Model\n{\n    /**\n     * Redefine la clave primaria, que por defecto es id\n     * @var string\n     */\n    protected $primaryKey = 'uid';\n}\n\n```\n\n----------------------------------------\n\nTITLE: Blade Template for Pagination\nDESCRIPTION: Blade template implementation for displaying unescaped pagination controls.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/db/paginator.md#2025-04-12_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<html>\n<head>\n  <!-- Built-in support for Bootstrap pagination styles -->\n  <link rel=\"stylesheet\" href=\"//maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css\">\n</head>\n<body>\n\n{!! $paginator !!}\n\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Testing AOP Implementation in PHP\nDESCRIPTION: Commands to start the Webman server and test the AOP implementation using curl.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/aop.md#2025-04-12_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nphp start.php start\ncurl  http://127.0.0.1:8787/json\n```\n\n----------------------------------------\n\nTITLE: Response Helper Function Implementation in PHP\nDESCRIPTION: Shows the underlying implementation of the `response()` helper function. It instantiates a `support\\Response` object, allowing customization of the response.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/pt/response.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nfunction response($body = '', $status = 200, $headers = array())\n{\n    return new Response($status, $headers, $body);\n}\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Delayed Response with Timer in PHP\nDESCRIPTION: Demonstrates how to use Timer::sleep() for non-blocking delayed responses in a Webman controller. This method allows for sleep functionality without blocking the process.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/coroutine/fiber.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace app\\controller;\n\nuse support\\Request;\nuse Workerman\\Timer;\n\nclass TestController\n{\n    public function index(Request $request)\n    {\n        // Sleep for 1.5 seconds\n        Timer::sleep(1.5);\n        return $request->getRemoteIp();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: User Model Definition\nDESCRIPTION: Example of User model extending base Model class with table and fillable properties.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/controller.md#2025-04-12_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\model;\nuse support\\Model;\nclass User extends Model\n{\n    protected $connection = 'mysql';\n    protected $table = 'user';\n    protected $primaryKey = 'id';\n    public $timestamps = false;\n    protected $fillable = ['name', 'age'];\n}\n```\n\n----------------------------------------\n\nTITLE: Utilizzo di push-vue.js in un componente Vue\nDESCRIPTION: Esempio di codice Vue per integrare webman/push in un componente Vue\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/plugin/push.md#2025-04-12_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n<script lang=\"ts\" setup>\nimport { onMounted } from 'vue'\nimport { Push } from '../utils/push-vue'\n\nonMounted(() => {\n  console.log('Componente montato')\n\n  // Instanziare webman-push\n\n  // Stabilire la connessione\n  var connection = new Push({\n    url: 'ws://127.0.0.1:3131', // indirizzo del websocket\n    app_key: '<app_key, da ottenere da config/plugin/webman/push/app.php>',\n    auth: '/plugin/webman/push/auth' // Autenticazione per la sottoscrizione (solo per canali privati)\n  });\n\n  // Supponiamo che l'UID dell'utente sia 1\n  var uid = 1;\n  // Il browser ascolta i messaggi del canale user-1, ovvero i messaggi dell'utente con UID 1\n  var user_channel = connection.subscribe('user-' + uid);\n\n  // Quando il canale user-1 riceve un messaggio di tipo \"message\"\n  user_channel.on('message', function (data) {\n    // I dati contengono il messaggio\n    console.log(data);\n  });\n  // Quando il canale user-1 riceve un messaggio di tipo \"friendApply\"\n  user_channel.on('friendApply', function (data) {\n    // I dati contengono le informazioni relative alla richiesta di amicizia\n    console.log(data);\n  });\n\n  // Supponiamo che l'ID del gruppo sia 2\n  var group_id = 2;\n  // Il browser ascolta i messaggi del canale group-2, ovvero i messaggi del gruppo con ID 2\n  var group_channel = connection.subscribe('group-' + group_id);\n  // Quando il canale group-2 riceve un messaggio di tipo \"message\"\n  group_channel.on('message', function (data) {\n    // I dati contengono il messaggio\n    console.log(data);\n  });\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Webman Session Configuration File\nDESCRIPTION: This code represents the session configuration file in Webman, located at `config/session.php`. It demonstrates setting the session handler (File, Redis, or Redis Cluster), session name, lifetime, cookie settings, and garbage collection probability.  The configuration allows customizing session storage and behavior.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/session.md#2025-04-12_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Webman\\Session\\FileSessionHandler;\nuse Webman\\Session\\RedisSessionHandler;\nuse Webman\\Session\\RedisClusterSessionHandler;\n\nreturn [\n    // FileSessionHandler::class 或者 RedisSessionHandler::class 或者 RedisClusterSessionHandler::class \n    'handler' => FileSessionHandler::class,\n    \n    // handler为FileSessionHandler::class时值为file，\n    // handler为RedisSessionHandler::class时值为redis\n    // handler为RedisClusterSessionHandler::class时值为redis_cluster 既redis集群\n    'type'    => 'file',\n\n    // 不同的handler使用不同的配置\n    'config' => [\n        // type为file时的配置\n        'file' => [\n            'save_path' => runtime_path() . '/sessions',\n        ],\n        // type为redis时的配置\n        'redis' => [\n            'host'      => '127.0.0.1',\n            'port'      => 6379,\n            'auth'      => '',\n            'timeout'   => 2,\n            'database'  => '',\n            'prefix'    => 'redis_session_', \n        ],\n        'redis_cluster' => [\n            'host'    => ['127.0.0.1:7000', '127.0.0.1:7001', '127.0.0.1:7001'],\n            'timeout' => 2,\n            'auth'    => '',\n            'prefix'  => 'redis_session_',\n        ]\n        \n    ],\n\n    'session_name' => 'PHPSID', // 存储session_id的cookie名\n    'auto_update_timestamp' => false,  // 是否自动刷新session，默认关闭\n    'lifetime' => 7*24*60*60,          // session过期时间\n    'cookie_lifetime' => 365*24*60*60, // 存储session_id的cookie过期时间\n    'cookie_path' => '/',              // 存储session_id的cookie路径\n    'domain' => '',                    // 存储session_id的cookie域名\n    'http_only' => true,               // 是否开启httpOnly，默认开启\n    'secure' => false,                 // 仅在https下开启session，默认关闭\n    'same_site' => '',                 // 用于防止CSRF攻击和用户追踪，可选值strict/lax/none\n    'gc_probability' => [1, 1000],     // 回收session的几率\n];\n```\n\n----------------------------------------\n\nTITLE: Checking if client accepts JSON response in Webman (PHP)\nDESCRIPTION: This snippet shows how to check if the client accepts JSON responses using `$request->acceptJson()`. It differs from `expectsJson()` in that it determines if the client *can* handle a JSON response, not just if it *prefers* one.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/es/request.md#2025-04-12_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n$request->acceptJson();\n```\n\n----------------------------------------\n\nTITLE: Global Variable Contamination Example in Webman PHP\nDESCRIPTION: Demonstrates incorrect usage of static variables in coroutine environment that leads to data contamination.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/coroutine/fiber.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace app\\controller;\n\nuse support\\Request;\nuse Workerman\\Timer;\n\nclass TestController\n{\n    protected static $name = '';\n\n    public function index(Request $request)\n    {\n        static::$name = $request->get('name');\n        Timer::sleep(5);\n        return static::$name;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting MailerInterface in UserController\nDESCRIPTION: This injects the MailerInterface in the UserController, allowing for dependency injection of an interface instead of a concrete class.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-hk/di.md#2025-04-12_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n\"<?php\nnamespace app\\controller;\n\nuse support\\Request;\nuse app\\service\\MailerInterface;\nuse DI\\Annotation\\Inject;\n\nclass UserController\n{\n    /**\n     * @Inject\n     * @var MailerInterface\n     */\n    private $mailer;\n    \n    public function register(Request $request)\n    {\n        $this->mailer->mail('hello@webman.com', 'Hello and welcome!');\n        return response('ok');\n    }\n}\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Process File\nDESCRIPTION: This code configures a process within the Webman application by defining a 'task' process with a handler pointing to the `process\\Task` class. This configuration instructs Webman to run the specified class as a separate process when the application starts.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/components/crontab.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    ....其它配置，這裡省略....\n  \n    'task'  => [\n        'handler'  => process\\Task::class\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Client Triggering Events for Private Channels\nDESCRIPTION: This snippet illustrates how clients can send messages to other clients within a private channel using the webman/push framework, highlighting the secure messaging capabilities.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/plugin/push.md#2025-04-12_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar user_channel = connection.subscribe('private-user-1');\nuser_channel.on('client-message', function (data) {\n    // \n});\nuser_channel.trigger('client-message', {form_uid:2, content:\"hello\"});\n```\n\n----------------------------------------\n\nTITLE: Controller with Potential Issues in Webman\nDESCRIPTION: This example illustrates a potential issue when controller reuse is enabled: modifying controller properties between requests can lead to unexpected behavior.  The `getModel` method caches the model instance, which can cause data inconsistencies across multiple requests.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/fr/controller.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\n\nclass FooController\n{\n    protected $model;\n    \n    public function update(Request $request, $id)\n    {\n        $model = $this->getModel($id);\n        $model->update();\n        return response('ok');\n    }\n    \n    public function delete(Request $request, $id)\n    {\n        $model = $this->getModel($id);\n        $model->delete();\n        return response('ok');\n    }\n    \n    protected function getModel($id)\n    {\n        // Cette méthode conservera le modèle après la première requête update?id=1\n        // Si une autre requête delete?id=2 est effectuée, les données pour l'id 1 seront supprimées\n        if (!$this->model) {\n            $this->model = Model::find($id);\n        }\n        return $this->model;\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Primary Key in Eloquent Model\nDESCRIPTION: Demonstrates how to override the default 'id' primary key by defining the $primaryKey property in an Eloquent model.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/jp/db/model.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nclass User extends Model\n{\n    protected $primaryKey = 'uid';\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Error Response in webman\nDESCRIPTION: This snippet shows the JSON format for error responses when the request expects a JSON response.  It includes a `code` and a `msg` field. When `app.debug` is true, a `trace` field with the call stack is also included.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/exception.md#2025-04-12_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"code\": \"500\",\n    \"msg\": \"異常信息\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Base Model for Plugin-Specific Database in Webman PHP\nDESCRIPTION: Defines a base model class for a Webman PHP plugin that specifies the plugin-specific database connection. All plugin models can extend this base class to use the plugin's database.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/app/database.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace plugin\\foo\\app\\model;\n\nuse DateTimeInterface;\nuse support\\Model;\n\nclass Base extends Model\n{\n    /**\n     * @var string\n     */\n    protected $connection = 'plugin.foo.mysql';\n\n}\n```\n\n----------------------------------------\n\nTITLE: Returning an Arbitrary Response in PHP\nDESCRIPTION: This snippet demonstrates how to return a simple text response using the response() helper function in a Webman controller.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/response.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\n\nclass FooController\n{\n    public function hello(Request $request)\n    {\n        return response('hello webman');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Controller with Model Interaction in Webman PHP\nDESCRIPTION: This snippet illustrates how a controller can interact with a model in Webman.  The `update` and `delete` methods demonstrate fetching a model instance and performing operations on it.  It shows potential pitfalls of reusing controllers if model state is not handled carefully.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/th/controller.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n\"<?php\nnamespace app\\controller;\n\nuse support\\Request;\n\nclass FooController\n{\n    protected $model;\n    \n    public function update(Request $request, $id)\n    {\n        $model = $this->getModel($id);\n        $model->update();\n        return response('ok');\n    }\n    \n    public function delete(Request $request, $id)\n    {\n        $model = $this->getModel($id);\n        $model->delete();\n        return response('ok');\n    }\n    \n    protected function getModel($id)\n    {\n        วิธีนี้จะรักควบคุมไว้ก่อนคำขอแรกขอupdate?id=1หน้าเว็บจะเซ็นถูงในสิรจัย\n        หากทำคำขอแรกคราหลังขช้ง่ว่าล่ท์?id=2หน้าเพจเตรองที่จะลบชุดที่หน้าเพจแรก      \n        ถไ้ายอาจหากข help? ตย์5:81 กรสิ์ไม่มำง งูล้มัยงงงงง\n        ง\n        // บทยัน้าปมต้ิดม้ิงวิธีน์้วีเม้้น\n     if (!$this->model) {\n            $this->model = Model::find($id);\n        }\n        return $this->model;\n    }\n}\n\"\n```\n\n----------------------------------------\n\nTITLE: Multiple Log Channels Configuration\nDESCRIPTION: Demonstrates configuration of multiple log channels in Webman, including a default channel and an additional 'log2' channel with separate file and formatting settings.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-hk/log.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'default' => [...],\n    'log2' => [\n        'handlers' => [\n            [   \n                'class' => Monolog\\Handler\\RotatingFileHandler::class,\n                'constructor' => [\n                    runtime_path() . '/logs/log2.log',\n                    Monolog\\Logger::DEBUG,\n                ],\n                'formatter' => [\n                    'class' => Monolog\\Formatter\\LineFormatter::class,\n                    'constructor' => [ null, 'Y-m-d H:i:s', true],\n                ],\n            ]\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring Wildcard Event Listeners in PHP\nDESCRIPTION: Example configuration showing how to set up wildcard event listeners to handle multiple events with a single handler.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/components/event.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nreturn [\n    'user.*' => [\n        [app\\event\\User::class, 'deal']\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Retrieving Multiple Records with find Using Primary Keys Array\nDESCRIPTION: Shows how to retrieve multiple records by passing an array of primary keys to the find method, which returns a collection of matching records.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/es/db/model.md#2025-04-12_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n$flights = app\\model\\Flight::find([1, 2, 3]);\n```\n\n----------------------------------------\n\nTITLE: Performing Mass Updates with where Conditions\nDESCRIPTION: Demonstrates how to update multiple records that match specific criteria using the update method, which is more efficient than loading and updating individual models.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/es/db/model.md#2025-04-12_snippet_26\n\nLANGUAGE: php\nCODE:\n```\napp\\model\\User::where('uid', '>', 10)\n          ->update(['name' => 'tom']);\n```\n\n----------------------------------------\n\nTITLE: Implementing a Debug Aspect in PHP\nDESCRIPTION: Definition of a DebugAspect class that intercepts calls to UserService::first method.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/tr/aop.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\aspect;\n\nuse app\\service\\UserService;\nuse Hyperf\\Di\\Aop\\AbstractAspect;\nuse Hyperf\\Di\\Aop\\ProceedingJoinPoint;\n\nclass DebugAspect extends AbstractAspect\n{\n    public $classes = [\n        UserService::class . '::first',\n    ];\n\n    public function process(ProceedingJoinPoint $proceedingJoinPoint)\n    {\n        var_dump(11);\n        return $proceedingJoinPoint->process();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Translation in PHP\nDESCRIPTION: Configuration file for translation settings including default language, fallback locales, and file path.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/components/translation.md#2025-04-12_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nreturn [\n    // Default language\n    'locale' => 'zh_CN',\n    // Fallback languages\n    'fallback_locale' => ['zh_CN', 'en'],\n    // Path to store language files\n    'path' => base_path() . '/resource/translations',\n];\n```\n\n----------------------------------------\n\nTITLE: Creating a webman project using Composer\nDESCRIPTION: This command uses Composer to create a new webman project. It downloads the necessary dependencies and sets up the project structure.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-hk/install.md#2025-04-12_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\ncomposer create-project workerman/webman\n```\n\n----------------------------------------\n\nTITLE: Erstellung eines benutzerdefinierten Skripts zur Datenbankabfrage in PHP\nDESCRIPTION: Dieses Skript demonstriert, wie man in Webman ein benutzerdefiniertes Skript erstellt, das auf die Datenbank zugreift. Es lädt die erforderlichen Autoloader und Bootstrap-Dateien, verwendet dann die Db-Fassade von ThinkPHP, um einen Benutzer aus der Datenbank abzurufen und auszugeben.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/de/others/scripts.md#2025-04-12_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nrequire_once __DIR__ . '/../vendor/autoload.php';\nrequire_once __DIR__ . '/../support/bootstrap.php';\n\nuse think\\facade\\Db;\n\n$user = Db::table('user')->find(1);\n\nvar_dump($user);\n```\n\n----------------------------------------\n\nTITLE: Using Redis with Pipeline Commands\nDESCRIPTION: This code snippet illustrates how to send multiple commands to the Redis server in a single operation using the pipeline method, optimizing performance for bulk data operations.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-hk/db/redis.md#2025-04-12_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nRedis::pipeline(function ($pipe) {\n    for ($i = 0; $i < 1000; $i++) {\n        $pipe->set(\"key:$i\", $i);\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Delayed Response with Timer::sleep() in PHP Coroutines\nDESCRIPTION: Example of using Timer::sleep() to create a non-blocking delay in a controller response. This method pauses execution for 1.5 seconds without blocking the process.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/coroutine/fiber.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace app\\controller;\n\nuse support\\Request;\nuse Workerman\\Timer;\n\nclass TestController\n{\n    public function index(Request $request)\n    {\n        // Задержка на 1.5 секунды\n        Timer::sleep(1.5);\n        return $request->getRemoteIp();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Where Clause with Webman PHP\nDESCRIPTION: This code snippet demonstrates various usages of the `where()` clause in the Webman PHP framework's database query builder, including comparing a column to a value, using different operators, and passing an array of conditions.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/fr/db/queries.md#2025-04-12_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')->where('votes', '=', 100)->get();\n\n// Lorsque l'opérateur est égal, il peut être omis, donc cette expression est équivalente à la précédente\n$users = Db::table('users')->where('votes', 100)->get();\n\n$users = Db::table('users')\n                ->where('votes', '>=', 100)\n                ->get();\n\n$users = Db::table('users')\n                ->where('votes', '<>', 100)\n                ->get();\n\n$users = Db::table('users')\n                ->where('name', 'like', 'T%')\n                ->get();\n```\n\n----------------------------------------\n\nTITLE: Plucking with Key-Value Pairs in Webman PHP\nDESCRIPTION: This snippet shows how to retrieve key-value pairs from the database using the pluck method with two arguments.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/hi/db/queries.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$roles = Db::table('roles')->pluck('title', 'id');\n\nforeach ($roles as $id => $title) {\n    echo $title;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom BusinessException in webman\nDESCRIPTION: This shows how to use the custom `MyBusinessException`. When thrown, it will generate a JSON response with the `message` field instead of `msg`.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/exception.md#2025-04-12_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse app\\exception\\MyBusinessException;\n\nthrow new MyBusinessException('參數錯誤', 3000);\n```\n\n----------------------------------------\n\nTITLE: Überprüfen der Existenz von Datensätzen mit dem Query Builder in PHP\nDESCRIPTION: Diese Methoden prüfen, ob Datensätze existieren oder nicht existieren, die bestimmte Bedingungen erfüllen.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/de/db/queries.md#2025-04-12_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nreturn Db::table('orders')->where('finalized', 1)->exists();\nreturn Db::table('orders')->where('finalized', 1)->doesntExist();\n```\n\n----------------------------------------\n\nTITLE: Enforcing Permissions with webman-permission\nDESCRIPTION: This code snippet demonstrates how to enforce permissions using the `Permission::enforce()` method.  It checks if a user has the required permission to access a resource.  The result determines whether the user is allowed to perform the action.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/casbin.md#2025-04-12_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nif (Permission::enforce(\"eve\", \"articles\", \"edit\")) {\n    // 允許 eve 編輯文章\n} else {\n    // 拒絕請求，顯示錯誤\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Service Class for AOP in PHP\nDESCRIPTION: Example of a UserService class that will be intercepted by AOP.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/aop.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\service;\n\nclass UserService\n{\n    public function first(): array\n    {\n        return ['id' => 1];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Blade View Configuration\nDESCRIPTION: Configuration for Blade templating engine in Webman, including installation and view setup\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/view.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse support\\view\\Blade;\n\nreturn [\n    'handler' => Blade::class\n];\n```\n\nLANGUAGE: html\nCODE:\n```\n<!doctype html>\n<html>\n<head>\n    <meta charset=\"utf-8\">\n    <title>webman</title>\n</head>\n<body>\nhello {{$name}}\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom HTTP Server in Webman\nDESCRIPTION: Demonstrates how to create a custom HTTP server by extending the Webman\\App class. Allows overriding default HTTP server behavior.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/process.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace app;\n\nuse Webman\\App;\n\nclass Server extends App\n{\n    // Qui puoi sovrascrivere i metodi presenti in Webman\\App\n}\n```\n\n----------------------------------------\n\nTITLE: Limiting Results in WebMan PHP Query Builder\nDESCRIPTION: Demonstrates how to limit the number of results and skip a number of records.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/jp/db/queries.md#2025-04-12_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')\n                ->offset(10)\n                ->limit(5)\n                ->get();\n```\n\n----------------------------------------\n\nTITLE: Configuring Exception Handler in Webman PHP\nDESCRIPTION: This snippet shows how to configure the exception handler class in the config/exception.php file. It allows setting a custom exception handler for the application.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/exception.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    // Qui è possibile configurare la classe di gestione delle eccezioni\n    '' => support\\exception\\Handler::class,\n];\n```\n\n----------------------------------------\n\nTITLE: Get Only Specific Input Fields - Webman PHP\nDESCRIPTION: Retrieves only the specified input fields (username and password in this example) from POST and GET parameters.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/th/request.md#2025-04-12_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n// รับอาร์เรย์ที่เป็นผลลัพธ์จากการระบุคีย์ username และ password ซึ่งจะถูกถ้าไม่มีคีย์ที่ถูกระบุ\n$only = $request->only(['username', 'password']);\n```\n\n----------------------------------------\n\nTITLE: PSR-4 namespace example for multi-application\nDESCRIPTION: This code snippet shows a sample PHP class with a PSR-4 compliant namespace. It defines a controller class `FooController` within the `app\\api\\controller` namespace, which corresponds to the `app/api/controller/FooController.php` file.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/multiapp.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n\"<?php\nnamespace app\\api\\controller;\n\nuse support\\Request;\n\nclass FooController\n{\n    \n}\n\n\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Mail Service Class\nDESCRIPTION: Example service class implementation for sending emails.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/pt/di.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\service;\n\nclass Mailer\n{\n    public function mail($email, $content)\n    {\n        // Código de envio de e-mail omitido\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Headers Incrementally in Webman PHP\nDESCRIPTION: Illustrates how to create a response object, set headers, and then set the body content separately.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/pt/response.md#2025-04-12_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n<?php\npublic function hello(Request $request)\n{\n    // Criar um objeto\n    $response = response();\n    \n    // .... Lógica de negócios omitida\n  \n    // Configurar cabeçalho http\n    $response->header('Content-Type', 'application/json');\n    $response->withHeaders([\n                'X-Header-One' => 'Valor do Cabeçalho 1',\n                'X-Header-Dois' => 'Valor do Cabeçalho 2',\n            ]);\n\n    // .... Lógica de negócios omitida\n\n    // Configurar os dados a serem retornados\n    $response->withBody('Dados a serem retornados');\n    return $response;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Storing Session Data in Webman PHP\nDESCRIPTION: Demonstrates setting single and multiple session values using set() and put() methods.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/session.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$session = $request->session();\n$session->set('name', 'tom');\n\n$session = $request->session();\n$session->put(['name' => 'tom', 'age' => 12]);\n```\n\n----------------------------------------\n\nTITLE: Blade Template Extension Configuration\nDESCRIPTION: Example of extending Blade template engine by adding custom directives in Webman view configuration\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/view.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse support\\view\\Blade;\nreturn [\n    'handler' => Blade::class,\n    'extension' => function (Jenssegers\\Blade\\Blade $blade) {\n        $blade->directive('mydate', function ($timestamp) {\n            return \"<?php echo date('Y-m-d H:i:s', $timestamp); ?>\";\n        });\n    }\n];\n```\n\n----------------------------------------\n\nTITLE: Implementing Wildcard Event Handler in PHP\nDESCRIPTION: Example of an event handler class implementing a method for processing wildcard events with event name access.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/de/components/event.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\event;\nclass User\n{\n    function deal($user, $event_name)\n    {\n        echo $event_name;\n        var_export($user);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Output Capture Response in Webman PHP\nDESCRIPTION: Demonstrates capturing output buffer for content that is directly printed, such as image generation.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/response.md#2025-04-12_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace app\\controller;\n\nuse support\\Request;\n\nclass ImageController\n{\n    public function get(Request $request)\n    {\n        // Create an image\n        $im = imagecreatetruecolor(120, 20);\n        $text_color = imagecolorallocate($im, 233, 14, 91);\n        imagestring($im, 1, 5, 5,  'A Simple Text String', $text_color);\n\n        // Start capturing the output\n        ob_start();\n        // Output the image\n        imagejpeg($im);\n        // Get the image content\n        $image = ob_get_clean();\n        \n        // Send the image\n        return response($image)->header('Content-Type', 'image/jpeg');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Pagination with Laravel ORM in PHP\nDESCRIPTION: This snippet demonstrates how to use Laravel's ORM to implement pagination in a Webman PHP controller. It includes the installation of required packages and usage of the paginate method.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/jp/db/paginator.md#2025-04-12_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\npublic function index(Request $request)\n{\n    $per_page = 10;\n    $users = Db::table('user')->paginate($per_page);\n    return view('index/index', ['users' => $users]);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Delayed Response with Timer in Webman PHP\nDESCRIPTION: Demonstrates how to use Timer::sleep() for non-blocking delayed responses in a controller. The sleep operation doesn't block the process, allowing other requests to be handled.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/pt/coroutine/fiber.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace app\\controller;\n\nuse support\\Request;\nuse Workerman\\Timer;\n\nclass TestController\n{\n    public function index(Request $request)\n    {\n        // Sleep for 1.5 seconds\n        Timer::sleep(1.5);\n        return $request->getRemoteIp();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Intervention/Image Package via Composer\nDESCRIPTION: Command to install the Intervention/Image package using Composer package manager.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/components/image.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ncomposer require intervention/image\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Records\nDESCRIPTION: Example showing how to retrieve all records from a database table using the query builder.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/db/queries.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\nuse support\\Db;\n\nclass UserController\n{\n    public function all(Request $request)\n    {\n        $users = Db::table('users')->get();\n        return view('user/all', ['users' => $users]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple Redis Configurations Setup\nDESCRIPTION: Configuration file showing multiple Redis connection settings for different queue instances.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/queue/redis.md#2025-04-12_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\nreturn [\n    'default' => [\n        'host' => 'redis://192.168.0.1:6379',\n        'options' => [\n            'auth' => null,       // password, string type, optional\n            'db' => 0,            // database\n            'max_attempts'  => 5, // retry times after consumption failure\n            'retry_seconds' => 5, // retry interval in seconds\n        ]\n    ],\n    'other' => [\n        'host' => 'redis://192.168.0.2:6379',\n        'options' => [\n            'auth' => null,       // password, string type, optional\n            'db' => 0,            // database\n            'max_attempts'  => 5, // retry times after consumption failure\n            'retry_seconds' => 5, // retry interval in seconds\n        ]\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom HTTP Process in Webman's process.php\nDESCRIPTION: This configuration snippet demonstrates how to set up a custom HTTP process in Webman's process.php file. It includes settings for the handler, listener, process count, and constructor parameters.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/process.md#2025-04-12_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nuse Workerman\\Worker;\n\nreturn [\n    // ... 這裡省略了其他配置...\n    \n    'my-http' => [\n        'handler' => app\\Server::class,\n        'listen' => 'http://0.0.0.0:8686',\n        'count' => 8, // 進程數\n        'user' => '',\n        'group' => '',\n        'reusePort' => true,\n        'constructor' => [\n            'request_class' => \\support\\Request::class, // request類設置\n            'logger' => \\support\\Log::channel('default'), // 日誌實例\n            'app_path' => app_path(), // app目錄位置\n            'public_path' => public_path() // public目錄位置\n        ]\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Comparing Columns with whereColumn in webman-php\nDESCRIPTION: Using whereColumn to compare two columns in the same table. These examples show equality comparison between columns and more complex comparisons including operators.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/db/queries.md#2025-04-12_snippet_25\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')\n                ->whereColumn('first_name', 'last_name')\n                ->get();\n                \n// Вы также можете передать оператор сравнения\n$users = Db::table('users')\n                ->whereColumn('updated_at', '>', 'created_at')\n                ->get();\n                \n// Метод whereColumn также может принимать массив\n$users = Db::table('users')\n                ->whereColumn([\n                    ['first_name', '=', 'last_name'],\n                    ['updated_at', '>', 'created_at'],\n                ])->get();\n\n```\n\n----------------------------------------\n\nTITLE: Phinx Configuration Setup\nDESCRIPTION: Configuration file (phinx.php) that defines migration paths, environments, and database connection settings for Phinx\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/db/migration.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nreturn [\n    \"paths\" => [\n        \"migrations\" => \"database/migrations\",\n        \"seeds\"      => \"database/seeds\"\n    ],\n    \"environments\" => [\n        \"default_migration_table\" => \"phinxlog\",\n        \"default_database\"        => \"dev\",\n        \"default_environment\"     => \"dev\",\n        \"dev\" => [\n            \"adapter\" => \"DB_CONNECTION\",\n            \"host\"    => \"DB_HOST\",\n            \"name\"    => \"DB_DATABASE\",\n            \"user\"    => \"DB_USERNAME\",\n            \"pass\"    => \"DB_PASSWORD\",\n            \"port\"    => \"DB_PORT\",\n            \"charset\" => \"utf8\"\n        ]\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Alternative Session Existence Check in Webman\nDESCRIPTION: Shows how to check if a session key exists regardless of its value using the exists method. Unlike the has method, returns true even when the session value is null.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/fr/session.md#2025-04-12_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n$session = $request->session();\n$has = $session->exists('name');\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Middleware in Webman\nDESCRIPTION: This snippet demonstrates how to configure global middleware in webman using the `config/middleware.php` file. The `@` key is used to add middleware to both the main project and all plugins.  The empty string key is used to add middleware only to the main project.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/pt/middleware.md#2025-04-12_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\nreturn [\n    '@' => [ // Adiciona um middleware global ao projeto principal e a todos os plug-ins\n        app\\middleware\\MiddlewareGlobl::class,\n    ], \n    '' => [], // Adiciona um middleware global apenas ao projeto principal\n];\n```\n\n----------------------------------------\n\nTITLE: Using Custom Configuration\nDESCRIPTION: Retrieves values from a custom configuration file (payment.php).\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/config.md#2025-04-12_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nconfig('payment');\nconfig('payment.key');\n```\n\n----------------------------------------\n\nTITLE: Client-side Push with webman/push JavaScript Client\nDESCRIPTION: JavaScript code demonstrating how to trigger client-side push events on private channels using the webman/push client.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/de/plugin/push.md#2025-04-12_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar user_channel = connection.subscribe('private-user-1');\nuser_channel.on('client-message', function (data) {\n    // \n});\nuser_channel.trigger('client-message', {form_uid:2, content:\"Hallo\"});\n```\n\n----------------------------------------\n\nTITLE: 自動生成されたErrorCodeクラスファイル (PHP)\nDESCRIPTION: 自動生成プロセスによって更新されたErrorCodeクラスファイルの例です。各エラーコードが定数として定義されています。\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/jp/components/generate_error_code.md#2025-04-12_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * 自動生成ファイル、手動で変更しないでください。\n * @Author:$Id$\n */\nnamespace support;\n\nclass ErrorCode\n{\n    const LoginNameOrPasswordError = -20110001;\n    const UserNotExist = -20110002;\n    const TokenNotExist = -20110003;\n    const InvalidToken = -20110004;\n    const ExpireToken = -20110005;\n    const WrongToken = -20110006;\n    const ClientIpNotEqual = -20110007;\n    const TokenRecordNotFound = -20110008;\n    const ModelAddUserError = -20110009;\n    const NoInfoToModify = -20110010;\n    const OnlyAdminPasswordCanBeModified = -20110011;\n    const AdminAccountCannotBeDeleted = -20110012;\n    const DbNotExist = -20110013;\n    const ModelAddOptionsError = -20110014;\n    const UnableToDeleteSystemConfig = -20110015;\n    const ConfigParamKeyRequired = -20110016;\n    const ExpiryCanNotGreaterThan7days = -20110017;\n    const GetPresignedPutObjectUrlError = -20110018;\n    const ObjectStorageConfigNotExist = -20110019;\n    const UpdateNavIndexSortError = -20110020;\n    const TagNameAttNotExist = -20110021;\n    const ModelUpdateOptionsError = -20110022;\n}\n```\n\n----------------------------------------\n\nTITLE: Redis Pipeline Commands Example\nDESCRIPTION: Example of using Redis pipeline for executing multiple commands in a single operation\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/db/redis.md#2025-04-12_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nRedis::pipeline(function ($pipe) {\n    for ($i = 0; $i < 1000; $i++) {\n        $pipe->set(\"key:$i\", $i);\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Memory Leak Example in WebMan Controller\nDESCRIPTION: Demonstrates a potential memory leak scenario where an array property in a long-lived controller continuously grows with each request.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/others/lifecycle.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\n\nclass FooController\n{\n    // Array property\n    public $data = [];\n    \n    public function index(Request $request)\n    {\n        $this->data[] = time();\n        return response('hello index');\n    }\n\n    public function hello(Request $request)\n    {\n        return response('hello webman');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Command Class for Webman Plugin\nDESCRIPTION: Example of creating a custom command class named FooAdminAddCommand for a Webman plugin. This class extends Symfony's Command class and implements a command that accepts a name argument and outputs a confirmation message.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/fr/plugin/create.md#2025-04-12_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nnamespace Foo\\Admin;\nuse Symfony\\Component\\Console\\Command\\Command;\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\nuse Symfony\\Component\\Console\\Input\\InputOption;\nuse Symfony\\Component\\Console\\Input\\InputArgument;\n\nclass FooAdminAddCommand extends Command {\n    protected static $defaultName = 'foo-admin:add';\n    protected static $defaultDescription = 'Description de la commande ici';\n    protected function configure() {\n        $this->addArgument('name', InputArgument::REQUIRED, 'Ajouter un nom');\n    }\n    protected function execute(InputInterface $input, OutputInterface $output) {\n        $name = $input->getArgument('name');\n        $output->writeln(\"Ajout admin $name\");\n        return self::SUCCESS;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: WhereNull Clause with Webman PHP\nDESCRIPTION: This code snippet demonstrates how to use the `whereNull()` clause in the Webman PHP framework's database query builder. It checks if the 'updated_at' column is NULL.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/fr/db/queries.md#2025-04-12_snippet_22\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')\n                    ->whereNull('updated_at')\n                    ->get();\n```\n\n----------------------------------------\n\nTITLE: ใช้งาน Cache ใน Controller\nDESCRIPTION: ตัวอย่างการใช้งาน Cache::set() และ Cache::get() ใน Controller เพื่อเก็บและเรียกข้อมูลจากแคช\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/th/db/cache.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\nuse support\\Cache;\n\nclass UserController\n{\n    public function db(Request $request)\n    {\n        $key = 'test_key';\n        Cache::set($key, rand());\n        return response(Cache::get($key));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Redis Configuration Setup\nDESCRIPTION: Basic Redis configuration file structure for Webman PHP defining connection parameters\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/db/redis.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'default' => [\n        'host'     => '127.0.0.1',\n        'password' => null,\n        'port'     => 6379,\n        'database' => 0,\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Controller Constructor Example in Webman PHP\nDESCRIPTION: This snippet shows how to use a controller constructor in Webman.  However, the constructor attempts to return a response, which is not the intended use of a constructor and will likely result in an error. Constructors should be used for initialization, not for returning responses directly.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/th/controller.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n\"<?php\nnamespace app\\controller;\n\nuse support\\Request;\n\nclass FooController\n{\n    public function __construct()\n    {\n        // ในการคำลแค่เ้เป็นสำงำไม่ใด้ีามหวเาอเื้บุงหมมันอาหาจ้ํะน่ไย่ดเาเว้่บท้็้ะ\n        return response('hello'); \n    }\n}\n\"\n```\n\n----------------------------------------\n\nTITLE: Using Redis Pipeline in Webman PHP\nDESCRIPTION: Example of using Redis pipeline to execute multiple commands in a single operation in Webman PHP.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/tr/db/redis.md#2025-04-12_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nRedis::pipeline(function ($pipe) {\n    for ($i = 0; $i < 1000; $i++) {\n        $pipe->set(\"key:$i\", $i);\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Defining an Event Class in PHP\nDESCRIPTION: This snippet defines the LogErrorWriteEvent class, encapsulating the event's name and its associated data. The event class extends Symfony's base Event class and includes a method to handle the event's data.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-hk/event.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace extend\\event;\n\nuse Symfony\\Contracts\\EventDispatcher\\Event;\n\nclass LogErrorWriteEvent extends Event\n{\n    const NAME = 'log.error.write';  // 事件名，事件的唯一標識\n\n    /** @var array */\n    public array $log;\n\n    public function __construct(array $log)\n    {\n        $this->log = $log;\n    }\n\n    public function handle()\n    {\n        return $this->log;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Session Helper Function Usage in Webman\nDESCRIPTION: Demonstrates the session() helper function that provides shortcuts for common session operations. This function was added on 09-12-2020.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/fr/session.md#2025-04-12_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n// Obtenir une instance de session\n$session = session();\n// Équivalent à\n$session = $request->session();\n\n// Obtenir une valeur spécifique\n$value = session('key', 'default');\n// Équivalent à\n$value = session()->get('key', 'default');\n// Équivalent à\n$value = $request->session()->get('key', 'default');\n\n// Affecter une valeur à la session\nsession(['key1'=>'value1', 'key2' => 'value2']);\n// Équivalent à\nsession()->put(['key1'=>'value1', 'key2' => 'value2']);\n// Équivalent à\n$request->session()->put(['key1'=>'value1', 'key2' => 'value2']);\n```\n\n----------------------------------------\n\nTITLE: Installing Phinx via Composer in PHP\nDESCRIPTION: Command to install Phinx using Composer package manager for PHP projects.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/jp/db/migration.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ncomposer require robmorgan/phinx\n```\n\n----------------------------------------\n\nTITLE: Checking if Request is AJAX - PHP\nDESCRIPTION: This code checks if the incoming request is an AJAX request, returning a boolean value. It allows developers to differentiate between standard and AJAX requests.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/request.md#2025-04-12_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$request->isAjax();\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Cluster in PHP\nDESCRIPTION: This configuration snippet outlines how to define a Redis cluster within a Webman PHP application's configuration file. It sets up clusters including host, password, port, and database settings.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/es/db/redis.md#2025-04-12_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'clusters' => [\n        'default' => [\n            [\n                'host'     => 'localhost',\n                'password' => null,\n                'port'     => 6379,\n                'database' => 0,\n            ],\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring Closure Event Handlers in PHP\nDESCRIPTION: Example of using closure functions as event handlers in the configuration.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/de/components/event.md#2025-04-12_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\nreturn [\n    'user.login' => [\n        function($user){\n            var_dump($user);\n        }\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Using Permission Methods in PHP for Access Control\nDESCRIPTION: Example of using Permission methods to add permissions for users and roles, and check permissions.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/de/casbin.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse webman\\permission\\Permission;\n\n// Berechtigungen für einen Benutzer hinzufügen\nPermission::addPermissionForUser('eve', 'articles', 'read');\n// Eine Rolle für einen Benutzer hinzufügen\nPermission::addRoleForUser('eve', 'writer');\n// Berechtigungen für eine Regel hinzufügen\nPermission::addPolicy('writer', 'articles', 'edit');\n\nif (Permission::enforce(\"eve\", \"articles\", \"edit\")) {\n    // Erlauben Sie eve, Artikel zu bearbeiten\n} else {\n    // Die Anfrage verweigern, einen Fehler anzeigen\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering paginazione con componente JasonGrimes in PHP\nDESCRIPTION: Esempio di come utilizzare il componente JasonGrimes/php-paginator per renderizzare i pulsanti di paginazione in un controller WebMan.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/db/paginator.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\npublic function get(Request $request)\n{\n    $per_page = 10;\n    $current_page = $request->input('page', 1);\n    $users = Db::table('user')->paginate($per_page, '*', 'page', $current_page);\n    $paginator = new Paginator($users->total(), $per_page, $current_page, '/user/get?page=(:num)');\n    return view('user/get', ['users' => $users, 'paginator'  => $paginator]);\n}\n```\n\n----------------------------------------\n\nTITLE: Incrementing and Decrementing Database Columns in PHP\nDESCRIPTION: Provides methods to increase or decrease column values in database records. Supports specifying increment/decrement amount and optional additional update fields.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/db/queries.md#2025-04-12_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')->increment('votes');\n\nDb::table('users')->increment('votes', 5);\n\nDb::table('users')->decrement('votes');\n\nDb::table('users')->decrement('votes', 5);\n\nDb::table('users')->increment('votes', 1, ['name' => 'John']);\n```\n\n----------------------------------------\n\nTITLE: Implementing Debug Aspect\nDESCRIPTION: Debug aspect class that intercepts UserService methods\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/pt/aop.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\aspect;\n\nuse app\\service\\UserService;\nuse Hyperf\\Di\\Aop\\AbstractAspect;\nuse Hyperf\\Di\\Aop\\ProceedingJoinPoint;\n\nclass DebugAspect extends AbstractAspect\n{\n    public $classes = [\n        UserService::class . '::first',\n    ];\n\n    public function process(ProceedingJoinPoint $proceedingJoinPoint)\n    {\n        var_dump(11);\n        return $proceedingJoinPoint->process();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Consuming Messages from Stomp Queue in PHP\nDESCRIPTION: This code snippet shows how to create a consumer class for processing messages from a Stomp queue. It includes queue configuration, connection settings, and a consume method for handling incoming messages.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/de/queue/stomp.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\queue\\stomp;\n\nuse Workerman\\Stomp\\AckResolver;\nuse Webman\\Stomp\\Consumer;\n\nclass MyMailSend implements Consumer\n{\n    // Warteschlangenname\n    public $queue = 'Beispiele';\n\n    // Verbindungsnamen, die mit der Verbindung in stomp.php übereinstimmen\n    public $connection = 'standard';\n\n    // Wenn der Wert \"client\" ist, muss $ack_resolver->ack() aufgerufen werden, um dem Server mitzuteilen, dass die Verarbeitung erfolgreich war\n    // Wenn der Wert \"auto\" ist, muss $ack_resolver->ack() nicht aufgerufen werden\n    public $ack = 'auto';\n\n    // Verbrauch\n    public function consume($data, AckResolver $ack_resolver = null)\n    {\n        // Bei Array-Daten muss eine manuelle Deserialisierung erfolgen\n        var_export(json_decode($data, true)); // Gibt ['an' => 'tom@gmail.com', 'inhalt' => 'hallo'] aus\n        // Dem Server mitteilen, dass die Verarbeitung erfolgreich war\n        $ack_resolver->ack(); // Bei ack \"auto\" kann dieser Aufruf ausgelassen werden\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Estensione di Twig in webman\nDESCRIPTION: Esempio di come estendere Twig aggiungendo estensioni, filtri e funzioni personalizzate.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/view.md#2025-04-12_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse support\\view\\Twig;\nreturn [\n    'handler' => Twig::class,\n    'extension' => function (Twig\\Environment $twig) {\n        $twig->addExtension(new your\\namespace\\YourExtension());\n        $twig->addFilter(new Twig\\TwigFilter('rot13', 'str_rot13'));\n        $twig->addFunction(new Twig\\TwigFunction('nome_funzione', function () {}));\n    }\n];\n```\n\n----------------------------------------\n\nTITLE: Asignar valores a la plantilla en Webman\nDESCRIPTION: Este snippet muestra cómo asignar valores a una plantilla utilizando `View::assign()` en Webman. Demuestra la asignación de múltiples variables a la vez y la asignación de una sola variable.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/es/view.md#2025-04-12_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\nuse support\\View;\n\nclass UserController\n{\n    public function hello(Request $request)\n    {\n        View::assign([\n            'name1' => 'value1',\n            'name2'=> 'value2',\n        ]);\n        View::assign('name3', 'value3');\n        return view('user/test', ['name' => 'webman']);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Non-Listening Process in PHP for Webman\nDESCRIPTION: This configuration snippet shows how to set up a custom non-listening process in Webman's config/process.php file. It specifies the handler class without listening or count settings.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/tr/process.md#2025-04-12_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\nreturn [\n    // ... Other process configurations are omitted here...\n    \n    'task' => [\n        'handler'  => app\\TaskTest::class\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Webman HTML View File\nDESCRIPTION: This is an example of a simple HTML view file used in a Webman application. It displays a greeting message including the 'name' variable passed from the controller, escaping the variable for security.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-hk/tutorial.md#2025-04-12_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<!doctype html>\n<html>\n<head>\n    <meta charset=\"utf-8\">\n    <title>webman</title>\n</head>\n<body>\nhello <?=htmlspecialchars($name)?>\n</body>\n</html>\n\n```\n\n----------------------------------------\n\nTITLE: Redis Configuration for Plugin\nDESCRIPTION: This snippet demonstrates the configuration of Redis connections for a plugin in the `redis.php` file. It sets up two connections: 'default' and 'cache', each with its own host, port, and database.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/pt/plugin/app.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'default' => [\n        'host' => '127.0.0.1',\n        'password' => null,\n        'port' => 6379,\n        'database' => 0,\n    ],\n    'cache' => [\n        'host' => '127.0.0.1',\n        'password' => null,\n        'port' => 6379,\n        'database' => 1,\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring New HTTP Port for Slow Processes in Webman PHP\nDESCRIPTION: This code snippet demonstrates how to add a new HTTP port configuration in Webman PHP for handling slow processes. It sets up a separate process group to handle slow requests without affecting other processes.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/tr/others/task.md#2025-04-12_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nreturn [\n    // ... diğer yapılandırmalar burada kısaltıldı ...\n\n    'task' => [\n        'handler' => \\Webman\\App::class,\n        'listen' => 'http://0.0.0.0:8686',\n        'count' => 8, // Süreç sayısı\n        'user' => '',\n        'group' => '',\n        'reusePort' => true,\n        'constructor' => [\n            'request_class' => \\support\\Request::class, // Request class ayarı\n            'logger' => \\support\\Log::channel('default'), // Günlük örneği\n            'app_path' => app_path(), // Uygulama dizini konumu\n            'public_path' => public_path() // Genel dizin konumu\n        ]\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Accessing Uploaded File Information - Webman PHP\nDESCRIPTION: This snippet shows how to access properties of the `webman\\Http\\UploadFile` object, such as validity, extension, MIME type, error code, name, size, path, and real path. It also showcases how to iterate through multiple uploaded files.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/th/request.md#2025-04-12_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\n\nclass UploadController\n{\n    public function files(Request $request)\n    {\n        foreach ($request->file() as $key => $spl_file) {\n            var_export($spl_file->isValid()); // ได้หรือไม่ได้รับไฟล์ ตัวอย่างเช่น true|false\n            var_export($spl_file->getUploadExtension()); // ได้นามสกุลไฟล์ที่อัพโหลด เช่น 'jpg'\n            var_export($spl_file->getUploadMimeType()); // ได้ชนิด mine ของไฟล์ที่อัพโหลด เช่น 'image/jpeg'\n            var_export($spl_file->getUploadErrorCode()); // ได้รหัสข้อผิดพลาดการอัพโหลด เช่น UPLOAD_ERR_NO_TMP_DIR UPLOAD_ERR_NO_FILE UPLOAD_ERR_CANT_WRITE\n            var_export($spl_file->getUploadName()); // ได้ชื่อไฟล์ที่อัพโหลด เช่น 'my-test.jpg'\n            var_export($spl_file->getSize()); // ได้ขนาดของไฟล์ เช่น 13364 หน่วยเป็นไบต์\n            var_export($spl_file->getPath()); // ได้ตำแหน่งที่อัพโหลด เช่น '/tmp'\n            var_export($spl_file->getRealPath()); // ได้เส้นทางไฟล์ชั่วคราว เช่น `/tmp/workerman.upload.SRliMu`\n        }\n        return response('ok');\n    }\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Retrieving and Deleting Session Value in Webman PHP\nDESCRIPTION: Shows how to get a session value and delete it in one operation using the pull() method.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/session.md#2025-04-12_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$session = $request->session();\n$nome = $session->pull('nome');\n```\n\n----------------------------------------\n\nTITLE: Model Not Found Exception Handling in PHP\nDESCRIPTION: Examples of using findOrFail and firstOrFail methods to throw ModelNotFoundException when a model is not found.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/pt/db/model.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nmodel = app\\model\\Flight::findOrFail(1);\n$model = app\\model\\Flight::where('legs', '>', 100)->firstOrFail();\n```\n\n----------------------------------------\n\nTITLE: View Variable Assignment with View::assign()\nDESCRIPTION: Demonstrates how to assign global template variables using View::assign() method in Webman controllers\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/view.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\nuse support\\View;\n\nclass UserController\n{\n    public function hello(Request $request)\n    {\n        View::assign([\n            'name1' => 'value1',\n            'name2'=> 'value2',\n        ]);\n        View::assign('name3', 'value3');\n        return view('user/test', ['name' => 'webman']);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Static File Middleware Example in Webman\nDESCRIPTION: This PHP code snippet demonstrates a static file middleware in webman. It prevents access to files starting with a dot ('.') and shows how to add custom HTTP headers to static file responses. To activate this middleware, it should be enabled in the `middleware` option within `config/static.php`.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/th/static.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace support\\middleware;\n\nuse Webman\\MiddlewareInterface;\nuse Webman\\Http\\Response;\nuse Webman\\Http\\Request;\n\nclass StaticFile implements MiddlewareInterface\n{\n    public function process(Request $request, callable $next) : Response\n    {\n        // ห้ามการเข้าถึงไฟล์ที่ขึ้นต้นด้วย .\n        if (strpos($request->path(), '/.') !== false) {\n            return response('<h1>403 ห้ามเข้าถึง</h1>', 403);\n        }\n        /** @var Response $response */\n        $response = $next($request);\n        // เพิ่มหัว http สำหรับการข้าถึง\n        /*$response->withHeaders([\n            'Access-Control-Allow-Origin'      => '*',\n            'Access-Control-Allow-Credentials' => 'true',\n        ]);*/\n        return $response;\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving Aggregate Values from Collections\nDESCRIPTION: Shows how to use aggregate methods like count, sum, and max on collections to return scalar values instead of model instances.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/es/db/model.md#2025-04-12_snippet_23\n\nLANGUAGE: php\nCODE:\n```\n$count = app\\model\\Flight::where('activo', 1)->count();\n\n$max = app\\model\\Flight::where('activo', 1)->max('precio');\n```\n\n----------------------------------------\n\nTITLE: Creating Task Process File\nDESCRIPTION: This code defines a task process that uses the `Workerman\\Crontab\\Crontab` class to schedule various tasks at different intervals.  Each `Crontab` instance creates a new scheduled task, which executes the provided anonymous function at the specified time. Each scheduled task outputs the current date and time.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/components/crontab.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace process;\n\nuse Workerman\\Crontab\\Crontab;\n\nclass Task\n{\n    public function onWorkerStart()\n    {\n    \n        // 每秒鐘執行一次\n        new Crontab('*/1 * * * * *', function(){\n            echo date('Y-m-d H:i:s').\"\\n\";\n        });\n        \n        // 每5秒執行一次\n        new Crontab('*/5 * * * * *', function(){\n            echo date('Y-m-d H:i:s').\"\\n\";\n        });\n        \n        // 每分鐘執行一次\n        new Crontab('0 */1 * * * *', function(){\n            echo date('Y-m-d H:i:s').\"\\n\";\n        });\n        \n        // 每5分鐘執行一次\n        new Crontab('0 */5 * * * *', function(){\n            echo date('Y-m-d H:i:s').\"\\n\";\n        });\n        \n        // 每分鐘的第一秒執行\n        new Crontab('1 * * * * *', function(){\n            echo date('Y-m-d H:i:s').\"\\n\";\n        });\n      \n        // 每天的7點50執行，注意這裡省略了秒位\n        new Crontab('50 7 * * *', function(){\n            echo date('Y-m-d H:i:s').\"\\n\";\n        });\n        \n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Realizar una solicitud HTTP con workerman/http-client\nDESCRIPTION: Este snippet muestra cómo realizar una solicitud HTTP asíncrona de forma síncrona utilizando el paquete `workerman/http-client`. La solicitud `$client->get()` no es bloqueante y permite manejar solicitudes HTTP de forma no bloqueante, mejorando el rendimiento. Se requiere la instalación de `composer require workerman/http-client ^2.0.0`.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/es/upgrade/1-5.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n\"<?php\\n\\nnamespace app\\controller;\\n\\nuse support\\Request;\\nuse Workerman\\Http\\Client;\\n\\nclass TestController\\n{\\n    public function index(Request $request)\\n    {\\n        static $client;\\n        $client = $client ?: new Client();\\n        $response = $client->get('http://ejemplo.com'); // Realizar una solicitud asincrónica de forma síncrona\\n        return $response->getBody()->getContents();\\n    }\\n}\\n\"\n```\n\n----------------------------------------\n\nTITLE: Checking if Session Data Exists in Webman\nDESCRIPTION: This code snippet shows how to check if a session key exists using the `has()` method. It returns true if the session key exists and its value is not null; otherwise, it returns false. The `exists()` method returns true even if the session key's value is null.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/session.md#2025-04-12_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n$session = $request->session();\n$has = $session->has('name');\n```\n\n----------------------------------------\n\nTITLE: String Response in Webman PHP Controller\nDESCRIPTION: Creates a UserController that returns a simple string response. Takes an optional 'name' parameter from the request query and returns a greeting.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/tutorial.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\n\nclass UserController\n{\n    public function hello(Request $request)\n    {\n        $default_name = 'webman';\n        // Get the 'name' parameter from the get request, and return $default_name if the 'name' parameter is not passed\n        $name = $request->get('name', $default_name);\n        // Return a string to the browser\n        return response('hello ' . $name);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining an Event Class\nDESCRIPTION: This PHP code defines an event class, LogErrorWriteEvent, which extends Symfony's Event class. It includes the event's name, a data array ($log), and a handle method for processing the event data.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/fr/event.md#2025-04-12_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\ndeclare(strict_types=1);\n\nnamespace extend\\event;\n\nuse Symfony\\Contracts\\EventDispatcher\\Event;\n\nclass LogErrorWriteEvent extends Event\n{\n    const NAME = 'log.error.write';  // Nom de l'événement, identifiant unique de l'événement\n\n    /** @var array */\n    public array $log;\n\n    public function __construct(array $log)\n    {\n        $this->log = $log;\n    }\n\n    public function handle()\n    {\n        return $this->log;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Session Values\nDESCRIPTION: Methods for storing single and multiple values in session\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/jp/session.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$session = $request->session();\n$session->set('name', 'tom');\n```\n\n----------------------------------------\n\nTITLE: Checking if Request is PJAX - PHP\nDESCRIPTION: This snippet checks if the request is a PJAX request, which is a combination of AJAX and pushState. This function can be useful for handling and responding to PJAX requests differently than standard requests.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/request.md#2025-04-12_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$request->isPjax();\n```\n\n----------------------------------------\n\nTITLE: Defining PSR-4 Namespace for Controllers in Webman\nDESCRIPTION: This PHP snippet demonstrates how to define a namespace for a controller class in a Webman project according to the PSR-4 standard. It shows the organization of a controller class within the directory structure.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/multiapp.md#2025-04-12_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nnamespace app\\api\\controller;\n\nuse support\\Request;\n\nclass FooController\n{\n    \n}\n\n```\n\n----------------------------------------\n\nTITLE: Definizione classe validatore User con top-think/think-validate in PHP\nDESCRIPTION: Crea una nuova classe validatore User che estende la classe Validate di ThinkPHP. Definisce regole di validazione per name, age ed email con messaggi di errore personalizzati.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/components/validation.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php \nnamespace app\\index\\validate;\n\nuse think\\Validate;\n\nclass User extends Validate\n{\n    protected $rule =   [\n        'name'  => 'require|max:25',\n        'age'   => 'number|between:1,120',\n        'email' => 'email',    \n    ];\n\n    protected $message  =   [\n        'name.require' => 'Il nome è obbligatorio',\n        'name.max'     => 'Il nome non può superare i 25 caratteri',\n        'age.number'   => 'L\\'età deve essere un numero',\n        'age.between'  => 'L\\'età deve essere compresa tra 1 e 120',\n        'email'        => 'Formato email errato',    \n    ];\n\n}\n```\n\n----------------------------------------\n\nTITLE: Static File Middleware in Webman PHP\nDESCRIPTION: This middleware processes static file requests. It blocks access to files starting with a dot ('.') and adds CORS headers (commented out in the example). It requires the Webman framework and implements the `MiddlewareInterface`. The `process` method intercepts the request and response, allowing modification before the response is sent to the client.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/static.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace support\\middleware;\n\nuse Webman\\MiddlewareInterface;\nuse Webman\\Http\\Response;\nuse Webman\\Http\\Request;\n\nclass StaticFile implements MiddlewareInterface\n{\n    public function process(Request $request, callable $next) : Response\n    {\n        // 禁止访问.开头的隐藏文件\n        if (strpos($request->path(), '/.') !== false) {\n            return response('<h1>403 forbidden</h1>', 403);\n        }\n        /** @var Response $response */\n        $response = $next($request);\n        // 增加跨域http头\n        /*$response->withHeaders([\n            'Access-Control-Allow-Origin'      => '*',\n            'Access-Control-Allow-Credentials' => 'true',\n        ]);*/\n        return $response;\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Custom Table Name Configuration\nDESCRIPTION: Setting a custom table name for an Eloquent model.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/de/db/model.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nclass User extends Model\n{\n    /**\n     * Name der mit dem Modell verknüpften Tabelle\n     *\n     * @var string\n     */\n    protected $table = 'user';\n}\n```\n\n----------------------------------------\n\nTITLE: Logging in Webman Plugin\nDESCRIPTION: This PHP code demonstrates how to use the logging functionality within a Webman plugin. It shows how to use a plugin-specific channel and how to leverage the main project's logging configuration.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-hk/plugin/app.md#2025-04-12_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse support\\Log;\nLog::channel('plugin.admin.default')->info('test');\n```\n\n----------------------------------------\n\nTITLE: Container Usage for Dependency Injection\nDESCRIPTION: Example of using Container to create instances with dependency injection support.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/di.md#2025-04-12_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse app\\service\\UserService;\nuse app\\service\\LogService;\nuse support\\Container;\n\n// Dependency injection is not supported for instances created with the new keyword\n$user_service = new UserService;\n// Dependency injection is not supported for instances created with the new keyword\n$log_service = new LogService($path, $name);\n\n// Dependency injection is supported for instances created with Container\n$user_service = Container::get(UserService::class);\n// Dependency injection is supported for instances created with Container\n$log_service = Container::make(LogService::class, [$path, $name]);\n```\n\n----------------------------------------\n\nTITLE: Casbin Configuration for Authorization Models\nDESCRIPTION: PHP configuration file defining multiple authorization models and adapters for Casbin access control\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/fr/components/casbin.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nreturn [\n    'default' => [\n        'model' => [\n            'config_type' => 'file',\n            'config_file_path' => config_path() . '/casbin-restful-model.conf',\n            'config_text' => '',\n        ],\n        'adapter' => [\n            'type' => 'model',\n            'class' => \\app\\model\\Rule::class,\n        ],\n    ],\n    'rbac' => [\n        'model' => [\n            'config_type' => 'file',\n            'config_file_path' => config_path() . '/casbin-rbac-model.conf',\n            'config_text' => '',\n        ],\n        'adapter' => [\n            'type' => 'model',\n            'class' => \\app\\model\\RBACRule::class,\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: View Template Example\nDESCRIPTION: This is an example of a view template file `app/view/foo/hello.html`. It displays a simple HTML page that includes the value of the `$name` variable, escaped for security.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/response.md#2025-04-12_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<!doctype html>\n<html>\n<head>\n    <meta charset=\"utf-8\">\n    <title>webman</title>\n</head>\n<body>\nhello <?=htmlspecialchars($name)?>\n</body>\n</html>\n\n```\n\n----------------------------------------\n\nTITLE: Installing aop-integration using Composer\nDESCRIPTION: This command installs the `hyperf/aop-integration` package using Composer. It's a prerequisite for implementing AOP in a Webman PHP application using Hyperf.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/aop.md#2025-04-12_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require \"hyperf/aop-integration: ^1.1\"\n```\n\n----------------------------------------\n\nTITLE: Defining UserService Class\nDESCRIPTION: This PHP code defines a simple UserService class with a first() method that returns an array. This class is used to demonstrate the AOP functionality.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/aop.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n\"<?php\\nnamespace app\\service;\\n\\nclass UserService\\n{\\n    public function first(): array\\n    {\\n        return ['id' => 1];\\n    }\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Esempio di controller con motore di template ThinkPHP\nDESCRIPTION: Implementazione di un controller che utilizza il motore di template ThinkPHP per renderizzare una vista.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/view.md#2025-04-12_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\n\nclass UserController\n{\n    public function hello(Request $request)\n    {\n        return view('user/hello', ['name' => 'webman']);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Language Middleware in Webman\nDESCRIPTION: Middleware for setting the language for each request in Webman.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/components/translation.md#2025-04-12_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\middleware;\n\nuse Webman\\MiddlewareInterface;\nuse Webman\\Http\\Response;\nuse Webman\\Http\\Request;\n\nclass Lang implements MiddlewareInterface\n{\n    public function process(Request $request, callable $handler) : Response\n    {\n        locale(session('lang', 'zh_CN'));\n        return $handler($request);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Controlador de ejemplo con Blade en Webman\nDESCRIPTION: Este snippet muestra un controlador de ejemplo que utiliza el motor de plantillas Blade en Webman. Pasa la variable 'name' a la vista 'user/hello'.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/es/view.md#2025-04-12_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\n\nclass UserController\n{\n    public function hello(Request $request)\n    {\n        return view('user/hello', ['name' => 'webman']);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Error Codes in Code\nDESCRIPTION: This code snippet demonstrates how to use the generated error codes within an application's service class. It shows an example of throwing an HTTP exception with a specific error code when an operation fails.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/components/generate_error_code.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n\"<?php\n/**\n * Класс сервиса для операций с навигацией\n */\n\nnamespace app\\\\service;\n\nuse app\\\\model\\\\Demo as DemoModel;\n\n// Подключение файла класса ErrorCode\nuse support\\\\ErrorCode;\n\nclass Demo\n{\n    /**\n     * Добавление\n     * @param $data\n     * @return array|mixed\n     * @throws \\\\exception\n     */\n    public function add($data): array\n    {\n        try {\n            $demo = new DemoModel();\n            foreach ($data as $key => $value) {\n                $demo->$key = $value;\n            }\n\n            $demo->save();\n\n            return $demo->getData();\n        } catch (\\\\Throwable $e) {\n            // Вывод информации об ошибке\n            throw_http_exception($e->getMessage(), ErrorCode::ModelAddOptionsError);\n        }\n        return [];\n    }\n}\"\n```\n\n----------------------------------------\n\nTITLE: Configuration with Default Value\nDESCRIPTION: Retrieves a configuration value with a fallback default if the setting does not exist.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/config.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nconfig($key, $default);\n```\n\n----------------------------------------\n\nTITLE: Returning a File Download\nDESCRIPTION: This snippet demonstrates how to return a file download using the `download()` method of the `response` object. It forces the browser to download the `favicon.ico` file with the name `файл.ico`.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/response.md#2025-04-12_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\n\nclass FooController\n{\n    public function hello(Request $request)\n    {\n        return response()->download(public_path() . '/favicon.ico', 'файл.ico');\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Basic Cache Usage Example\nDESCRIPTION: Example controller demonstrating basic cache operations like set and get using the Cache facade\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/db/cache.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\nuse support\\Cache;\n\nclass UserController\n{\n    public function db(Request $request)\n    {\n        $key = 'test_key';\n        Cache::set($key, rand());\n        return response(Cache::get($key));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Bootstrap with Process Type Checking\nDESCRIPTION: Enhanced bootstrap class that skips initialization for specific process types like 'monitor'\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-hk/others/bootstrap.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace app\\bootstrap;\n\nuse Webman\\Bootstrap;\n\nclass MemReport implements Bootstrap\n{\n    public static function start($worker)\n    {\n        // Is it a console environment?\n        $is_console = !$worker;\n        if ($is_console) {\n            // Skip initialization in console environment\n            return;\n        }\n        \n        // Skip initialization for monitor process\n        if ($worker->name == 'monitor') {\n            return;\n        }\n        \n        // Execute every 10 seconds\n        \\Workerman\\Timer::add(10, function () {\n            // Demonstrate memory reporting\n            echo memory_get_usage() . \"\\n\";\n        });\n        \n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Think-Validate Usage Example\nDESCRIPTION: Illustrates how to use the `User` validation class to check data. It creates an instance of the `User` validator, passes in an array of data, and checks if the data is valid. If not, it prints the error messages.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/components/validation.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$data = [\n    'name' => 'thinkphp',\n    'email' => 'thinkphp@qq.com',\n];\n\n$validate = new \\app\\index\\validate\\User;\n\nif (!$validate->check($data)) {\n    var_dump($validate->getError());\n}\n\n```\n\n----------------------------------------\n\nTITLE: Casbin Basic Model Configuration\nDESCRIPTION: Example of a Casbin model configuration file that defines request structure, policy rules, role hierarchy, policy effect, and matchers for the access control system.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-hk/casbin.md#2025-04-12_snippet_2\n\nLANGUAGE: conf\nCODE:\n```\n[request_definition]\nr = sub, obj, act\n\n[policy_definition]\np = sub, obj, act\n\n[role_definition]\ng = _, _\n\n[policy_effect]\ne = some(where (p.eft == allow))\n\n[matchers]\nm = g(r.sub, p.sub) && r.obj == p.obj && r.act == p.act\n```\n\n----------------------------------------\n\nTITLE: SDK Configuration Initialization\nDESCRIPTION: Code to initialize the payment SDK with configuration settings\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/components/payment.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$config = config('payment');\nPay::config($config);\n```\n\n----------------------------------------\n\nTITLE: Updating Data With Webman DB Query Builder\nDESCRIPTION: This snippet updates the 'votes' column to 1 for the user with an 'id' of 1. The `update()` method modifies existing records based on the conditions specified by the `where()` method.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/db/queries.md#2025-04-12_snippet_27\n\nLANGUAGE: php\nCODE:\n```\n$affected = Db::table('users')\n              ->where('id', 1)\n              ->update(['votes' => 1]);\n```\n\n----------------------------------------\n\nTITLE: Setting Default Attribute Values in Eloquent Model\nDESCRIPTION: Shows how to define default values for model attributes by setting the $attributes property in an Eloquent model.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/db/model.md#2025-04-12_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nclass User extends Model\n{\n    /**\n     * Значения по умолчанию для модели.\n     *\n     * @var array\n     */\n    protected $attributes = [\n        'delayed' => false,\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Setting 404 Fallback Handler for Plugin Routes in Webman PHP\nDESCRIPTION: Demonstrates how to set up a fallback route handler for a specific plugin application when no matching route is found. The example redirects to the root path.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/app/route.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nRoute::fallback(function(){\n    return redirect('/');\n}, 'foo');\n```\n\n----------------------------------------\n\nTITLE: Configuring Event Subscriber in PHP\nDESCRIPTION: Configuration to set up the LoggerSubscriber as an event subscriber.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/event.md#2025-04-12_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    // Event subscribers\n    'subscriber' => [\n        \\extend\\event\\subscriber\\LoggerSubscriber::class,\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Retrieving Distinct Values from Database in webman-php\nDESCRIPTION: Query that removes duplicate values from results using the distinct() method. This example retrieves unique 'nickname' values from the 'user' table.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/db/queries.md#2025-04-12_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$email = Db::table('user')->select('nickname')->distinct()->get();\n```\n\n----------------------------------------\n\nTITLE: Check if Request is AJAX - Webman PHP\nDESCRIPTION: Checks if the request is an AJAX request.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/th/request.md#2025-04-12_snippet_38\n\nLANGUAGE: php\nCODE:\n```\n$request->isAjax();\n```\n\n----------------------------------------\n\nTITLE: Updating or Inserting Database Record in PHP\nDESCRIPTION: Performs an upsert operation where a record is updated if it exists, or inserted if it does not. Uses unique identifier fields to determine whether to update or create a new record.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/db/queries.md#2025-04-12_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')\n    ->updateOrInsert(\n        ['email' => 'john@example.com', 'name' => 'John'],\n        ['votes' => '2']\n    );\n```\n\n----------------------------------------\n\nTITLE: Redis Queue Consumer Implementation\nDESCRIPTION: Creating a consumer class for processing messages from a specific queue\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/th/queue/redis.md#2025-04-12_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nnamespace app\\queue\\redis;\n\nuse Webman\\RedisQueue\\Consumer;\n\nclass MyMailSend implements Consumer\n{\n    public $queue = 'send-mail';\n    public $connection = 'default';\n\n    public function consume($data)\n    {\n        var_export($data);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Global Middleware\nDESCRIPTION: Configuration to register the authorization middleware globally in the application.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/casbin.md#2025-04-12_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    // Global Middleware\n    '' => [\n        // ... Other middleware omitted here\n        app\\middleware\\AuthorizationMiddleware::class,\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Installing Intervention/Image Library in PHP\nDESCRIPTION: Command to install the Intervention/Image library using Composer in a PHP project.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/bn/components/image.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ncomposer require intervention/image\n```\n\n----------------------------------------\n\nTITLE: Using Closure with orWhere in webman-php\nDESCRIPTION: Using a closure with orWhere to create complex grouped conditions. This query creates a condition with votes > 100 OR (name = 'Abigail' AND votes > 50).\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/db/queries.md#2025-04-12_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n// SQL: select * from users where votes > 100 or (name = 'Abigail' and votes > 50)\n$users = Db::table('users')\n            ->where('votes', '>', 100)\n            ->orWhere(function($query) {\n                $query->where('name', 'Abigail')\n                      ->where('votes', '>', 50);\n            })\n            ->get();\n\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Event Class\nDESCRIPTION: Implementation of a custom event class extending Symfony Event with event name and handling logic\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/event.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nnamespace extend\\event;\n\nuse Symfony\\Contracts\\EventDispatcher\\Event;\n\nclass LogErrorWriteEvent extends Event\n{\n    const NAME = 'log.error.write';  // 事件名，事件的唯一标识\n\n    /** @var array */\n    public array $log;\n\n    public function __construct(array $log)\n    {\n        $this->log = $log;\n    }\n\n    public function handle()\n    {\n        return $this->log;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Consuming Message from Stomp Queue\nDESCRIPTION: This PHP code snippet defines a Stomp queue consumer class that implements the `Consumer` interface. It specifies the queue name, connection details, acknowledgment mode, and the `consume` method for processing messages, including deserialization and acknowledgment to the server.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-hk/queue/stomp.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\queue\\stomp;\n\nuse Workerman\\Stomp\\AckResolver;\nuse Webman\\Stomp\\Consumer;\n\nclass MyMailSend implements Consumer\n{\n    // 隊列名\n    public $queue = 'examples';\n\n    // 連接名，對應 stomp.php 裡的連接`\n    public $connection = 'default';\n\n    // 值為 client 時需要調用$ack_resolver->ack()告訴服務端已經成功消費\n    // 值為 auto   時無需調用$ack_resolver->ack()\n    public $ack = 'auto';\n\n    // 消費\n    public function consume($data, AckResolver $ack_resolver = null)\n    {\n        // 如果是數據是數組，需要自行反序列化\n        var_export(json_decode($data, true)); // 輸出 ['to' => 'tom@gmail.com', 'content' => 'hello']\n        // 告訴服務端，已經成功消費\n        $ack_resolver->ack(); // ack為 auto時可以省略此調用\n    }\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Database Usage in Webman Plugin\nDESCRIPTION: Examples of how to use database connections within a Webman plugin, including both plugin-specific and main project connections\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/plugin/app.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse support\\Db;\nDb::connection('plugin.cms.mysql')->table('user')->first();\nDb::connection('plugin.cms.admin')->table('admin')->first();\n```\n\n----------------------------------------\n\nTITLE: Specifying Database Connection in Eloquent Model\nDESCRIPTION: Demonstrates how to specify a custom database connection for an Eloquent model by setting the $connection property.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/db/model.md#2025-04-12_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nclass User extends Model\n{\n    /**\n     * Имя подключения модели\n     *\n     * @var string\n     */\n    protected $connection = 'connection-name';\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Models By Primary Key with Eloquent - PHP\nDESCRIPTION: Illustrates the use of the destroy method to delete models by their primary key values. Provides various input formats such as individual IDs, arrays or collections.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/db/model.md#2025-04-12_snippet_21\n\nLANGUAGE: PHP\nCODE:\n```\napp\\modle\\Flight::destroy(1);\n\napp\\modle\\Flight::destroy(1, 2, 3);\n\napp\\modle\\Flight::destroy([1, 2, 3]);\n\napp\\modle\\Flight::destroy(collect([1, 2, 3]));\n```\n\n----------------------------------------\n\nTITLE: Initializing ClassLoader in start.php\nDESCRIPTION: This code snippet initializes the ClassLoader for AOP integration in the `start.php` file. It ensures that the AOP functionalities are enabled during the application startup.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/aop.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Hyperf\\AopIntegration\\ClassLoader;\n\nif ($timezone = config('app.default_timezone')) {\n    date_default_timezone_set($timezone);\n}\n\n// Инициализация\nClassLoader::init();\n```\n\n----------------------------------------\n\nTITLE: Redis Queue Configuration in Webman PHP\nDESCRIPTION: Configuration file structure for Redis queue in Webman PHP with options for specifying host, authentication, database, and retry mechanisms.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/fr/queue/redis.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nreturn [\n    'default' => [\n        'host' => 'redis://127.0.0.1:6379',\n        'options' => [\n            'auth' => '',         // mot de passe, paramètre facultatif\n            'db' => 0,            // base de données\n            'max_attempts'  => 5, // nombre de tentatives de reprise en cas d'échec de la consommation\n            'retry_seconds' => 5, // intervalle de réessai, en secondes\n        ]\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Defining Namespace for Multi-Application Controllers in Webman PHP\nDESCRIPTION: This snippet shows how to properly define the namespace for a controller in a multi-application Webman PHP project. It demonstrates the correct namespace structure for the 'api' application.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/multiapp.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\api\\controller;\n\nuse support\\Request;\n\nclass FooController\n{\n    \n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Captcha Parameters\nDESCRIPTION: This PHP code snippet demonstrates how to configure captcha parameters such as length and character set. It uses the PhraseBuilder class to customize the characters used for captcha generation and then configures a new CaptchaBuilder instance to use this phrase builder.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/th/components/captcha.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n    /**\n     * แสดงรูปภาพยืนยันตัวตน\n     */\n    public function captcha(Request $request)\n    {\n        // เริ่มต้นคลาสรหัสยืนยันตัวตน\n        $builder = new CaptchaBuilder;\n        // ความยาวของรหัสยืนยันตัวตน\n        $length = 4;\n        // รวมตัวอักษรใดใดบ้าง\n        $chars = '0123456789abcefghijklmnopqrstuvwxyz';\n        $builder = new PhraseBuilder($length, $chars);\n        $captcha = new CaptchaBuilder(null, $builder);\n        // สร้างรหัสยืนยันตัวตน\n        $builder->build();\n        // จัดเก็บค่ารหัสยืนยันตัวตนในเซสชัน\n        $request->session()->set('captcha', strtolower($builder->getPhrase()));\n        // รับข้อมูลไบนารีของรูปภาพยืนยันตัวตน\n        $img_content = $builder->get();\n        // แสดงข้อมูลไบนารีของรูปภาพยืนยันตัวตน\n        return response($img_content, 200, ['Content-Type' => 'image/jpeg']);\n    }\n\n```\n\n----------------------------------------\n\nTITLE: Context Usage Example in Webman PHP\nDESCRIPTION: This example demonstrates how to use the `Context` class within a Webman PHP controller to store and retrieve request data.  The `index` method sets the 'name' context variable using the value from the request and then returns the stored value. This showcases the basic usage of setting and getting context data within a request lifecycle.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/coroutine/context.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace app\\controller;\n\nuse support\\Request;\nuse support\\Context;\n\nclass TestController\n{\n    public function index(Request $request)\n    {\n        Context::set('name', $request->get('name'));\n        return Context::get('name');\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Database Connection Configuration\nDESCRIPTION: Specifying a custom database connection for an Eloquent model.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/de/db/model.md#2025-04-12_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nclass User extends Model\n{\n    /**\n     * Name der Verbindung des Modells\n     *\n     * @var string\n     */\n    protected $connection = 'connection-name';\n}\n```\n\n----------------------------------------\n\nTITLE: Configurar Twig para controlador en Webman\nDESCRIPTION: Este snippet muestra cómo configurar Twig como motor de plantillas en Webman.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/es/view.md#2025-04-12_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse support\\view\\Twig;\n\nreturn [\n    'handler' => Twig::class\n];\n```\n\n----------------------------------------\n\nTITLE: Disabling Timestamps in Eloquent Model in PHP\nDESCRIPTION: This snippet shows how to disable automatic timestamp management in an Eloquent model by setting the `$timestamps` property to `false`. When disabled, Eloquent will not automatically maintain `created_at` and `updated_at` columns.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/es/db/model.md#2025-04-12_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass User extends Model\n{\n    /**\n     * Indica si se mantiene automáticamente la marca de tiempo\n     * @var bool\n     */\n    public $timestamps = false;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Scheduled Tasks in Webman\nDESCRIPTION: Example of creating a Task process class that defines various scheduled tasks using the Crontab component.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/components/crontab.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace process;\n\nuse Workerman\\Crontab\\Crontab;\n\nclass Task\n{\n    public function onWorkerStart()\n    {\n    \n        // Run every second\n        new Crontab('*/1 * * * * *', function(){\n            echo date('Y-m-d H:i:s').\"\\n\";\n        });\n        \n        // Run every 5 seconds\n        new Crontab('*/5 * * * * *', function(){\n            echo date('Y-m-d H:i:s').\"\\n\";\n        });\n        \n        // Run every minute\n        new Crontab('0 */1 * * * *', function(){\n            echo date('Y-m-d H:i:s').\"\\n\";\n        });\n        \n        // Run every 5 minutes\n        new Crontab('0 */5 * * * *', function(){\n            echo date('Y-m-d H:i:s').\"\\n\";\n        });\n        \n        // Run on the first second of every minute\n        new Crontab('1 * * * * *', function(){\n            echo date('Y-m-d H:i:s').\"\\n\";\n        });\n      \n        // Run at 7:50 every day, note that the seconds field is omitted here\n        new Crontab('50 7 * * *', function(){\n            echo date('Y-m-d H:i:s').\"\\n\";\n        });\n        \n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Event Listeners\nDESCRIPTION: This PHP code configures an event listener by mapping the event name (LogErrorWriteEvent::NAME) to its corresponding event class (LogErrorWriteEvent::class). When the event is triggered, the registered class will be invoked.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/fr/event.md#2025-04-12_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\nreturn [\n    // Écouteurs d'événements\n    'listener'    => [\n        \\extend\\event\\LogErrorWriteEvent::NAME  => \\extend\\event\\LogErrorWriteEvent::class,\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Using Main Project Logging Configuration in Webman PHP\nDESCRIPTION: Shows how to utilize the main project's logging configuration, including both direct logging and channel-specific logging\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/app/log.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse support\\Log;\nLog::info('Log content');\n// Assuming the main project has a logging configuration named 'test'\nLog::channel('test')->info('Log content');\n```\n\n----------------------------------------\n\nTITLE: Storing Multiple Session Values in Webman\nDESCRIPTION: This code snippet demonstrates storing multiple session values using the `put()` method, which accepts an array of key-value pairs. Similar to `set()`, `put()` does not return any value and automatically saves the session data.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/session.md#2025-04-12_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$session = $request->session();\n$session->put(['name' => 'tom', 'age' => 12]);\n```\n\n----------------------------------------\n\nTITLE: Using Respect Validation in Controller\nDESCRIPTION: Example showing how to implement validation in a controller using Respect Validation library\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/components/validation.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\nuse Respect\\Validation\\Validator as v;\nuse support\\Db;\n\nclass IndexController\n{\n    public function index(Request $request)\n    {\n        $data = v::input($request->post(), [\n            'nickname' => v::length(1, 64)->setName('Nickname'),\n            'username' => v::alnum()->length(5, 64)->setName('Username'),\n            'password' => v::length(5, 64)->setName('Password')\n        ]);\n        Db::table('user')->insert($data);\n        return json(['code' => 0, 'msg' => 'ok']);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Utilizzo del validatore User con top-think/think-validate in PHP\nDESCRIPTION: Esempio di utilizzo della classe validatore User per validare un array di dati. Mostra come creare un'istanza del validatore e chiamare il metodo check().\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/components/validation.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$data = [\n    'name'  => 'thinkphp',\n    'email' => 'thinkphp@qq.com',\n];\n\n$validate = new \\app\\index\\validate\\User;\n\nif (!$validate->check($data)) {\n    var_dump($validate->getError());\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Authorization Middleware in Webman\nDESCRIPTION: PHP class for an authorization middleware that checks user permissions for each request using the Permission class.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/de/casbin.md#2025-04-12_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace app\\middleware;\n\nuse Webman\\MiddlewareInterface;\nuse Webman\\Http\\Response;\nuse Webman\\Http\\Request;\nuse Casbin\\Exceptions\\CasbinException;\nuse webman\\permission\\Permission;\n\nclass AuthorizationMiddleware implements MiddlewareInterface\n{\n    public function process(Request $request, callable $next): Response\n    {\n        $uri = $request->path();\n        try {\n            $userId = 10086;\n            $action = $request->method();\n            if (!Permission::enforce((string) $userId, $uri, strtoupper($action))) {\n                throw new \\Exception('Entschuldigung, Sie haben keine Berechtigung für den Zugriff auf diese Schnittstelle');\n            }\n        } catch (CasbinException $exception) {\n            throw new \\Exception('Autorisierungsausnahme' . $exception->getMessage());\n        }\n        return $next($request);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Table Name in Eloquent Model\nDESCRIPTION: Shows how to specify a custom table name for an Eloquent model by defining the $table property.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/jp/db/model.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nclass User extends Model\n{\n    protected $table = 'user';\n}\n```\n\n----------------------------------------\n\nTITLE: Available Logging Methods\nDESCRIPTION: Lists all available logging methods provided by the Log facade for different severity levels.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/log.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nLog::log($level, $message, array $context = [])\nLog::debug($message, array $context = [])\nLog::info($message, array $context = [])\nLog::notice($message, array $context = [])\nLog::warning($message, array $context = [])\nLog::error($message, array $context = [])\nLog::critical($message, array $context = [])\nLog::alert($message, array $context = [])\nLog::emergency($message, array $context = [])\n```\n\n----------------------------------------\n\nTITLE: Configuring Event Submission in PHP\nDESCRIPTION: This snippet demonstrates how to configure the event subscriber in the application. By registering the LoggerSubscriber class, it ensures that the event subscriber listens to and handles the specified events.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/event.md#2025-04-12_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    // 事件訂閱\n    'subscriber' => [\n        \\extend\\event\\subscriber\\LoggerSubscriber::class,\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring Public Path for Webman Phar in PHP\nDESCRIPTION: Configures the public_path in the Webman app configuration when using a Phar package, allowing the business logic to find the actual location of the public directory.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/de/others/phar.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n'public_path' => base_path(false) . DIRECTORY_SEPARATOR . 'public',\n```\n\n----------------------------------------\n\nTITLE: थिंककैश का उपयोग - PHP कंट्रोलर उदाहरण\nDESCRIPTION: एक PHP कंट्रोलर में थिंककैश का उपयोग करने का उदाहरण। यह कैश में एक रैंडम वैल्यू सेट करता है और फिर उसे रिट्रीव करता है।\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/hi/db/thinkcache.md#2025-04-12_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nnamespace app\\controller;\n  \nuse support\\Request;\nuse think\\facade\\Cache;\n\nclass UserController\n{\n    public function db(Request $request)\n    {\n        $key = 'test_key';\n        Cache::set($key, rand());\n        return response(Cache::get($key));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating and Downloading Excel with PhpSpreadsheet in Webman\nDESCRIPTION: This code snippet demonstrates how to create an Excel file using PhpSpreadsheet, save it to the public directory, and then provide it as a downloadable response in a Webman controller. It uses the Spreadsheet, Xlsx, and response() functions. The file path and desired download name are specified for the client.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/components/excel.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse PhpOffice\\PhpSpreadsheet\\Spreadsheet;\nuse PhpOffice\\PhpSpreadsheet\\Writer\\Xlsx;\n\nclass ExcelController\n{\n    public function index($request)\n    {\n        $spreadsheet = new Spreadsheet();\n        $sheet = $spreadsheet->getActiveSheet();\n        $sheet->setCellValue('A1', 'Hello World !');\n\n        $writer = new Xlsx($spreadsheet);\n        $file_path = public_path().'/hello_world.xlsx';\n        // 儲存檔案至 public 目錄下\n        $writer->save($file_path);\n        // 下載檔案\n        return response()->download($file_path, '檔名.xlsx');\n    }\n\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Getting Context Data in PHP\nDESCRIPTION: Retrieves a value from the request context using a string key. If no key is provided, it returns all context data. Returns null if the key is not found.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/es/coroutine/context.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nContext::get(string $name = null);\n```\n\n----------------------------------------\n\nTITLE: Language File with Placeholders\nDESCRIPTION: Example of a language file that includes placeholders which can be replaced with variable values during translation.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/components/translation.md#2025-04-12_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'hello' => 'Привет, %name%!',\n];\n```\n\n----------------------------------------\n\nTITLE: Controller Without Suffix in Webman PHP\nDESCRIPTION: Shows how to create a controller without the 'Controller' suffix when 'controller_suffix' is set to an empty string in the configuration. This approach is not recommended for security reasons.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/controller.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\n\nclass Foo\n{\n    public function index(Request $request)\n    {\n        return response('ciao indice');\n    }\n    \n    public function hello(Request $request)\n    {\n        return response('ciao webman');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Business Exception Controller Example in PHP\nDESCRIPTION: Example of implementing business exception handling in a controller class.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/exception.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\nuse support\\exception\\BusinessException;\n\nclass FooController\n{\n    public function index(Request $request)\n    {\n        $this->chackInpout($request->post());\n        return response('hello index');\n    }\n    \n    protected function chackInpout($input)\n    {\n        if (!isset($input['token'])) {\n            throw new BusinessException('参数错误', 3000);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Exception Handler\nDESCRIPTION: PHP exception handler class that processes errors and returns appropriate response based on request type\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/jp/others/custom-error-page.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace app\\exception;\n\nuse Throwable;\nuse Webman\\Http\\Request;\nuse Webman\\Http\\Response;\n\nclass Handler extends \\support\\exception\\Handler\n{\n    /**\n     * レンダリングと返信\n     * @param Request $request\n     * @param Throwable $exception\n     * @return Response\n     */\n    public function render(Request $request, Throwable $exception) : Response\n    {\n        $code = $exception->getCode();\n        // ajaxリクエスト時にはjsonデータを返す\n        if ($request->expectsJson()) {\n            return json(['code' => $code ? $code : 500, 'msg' => $exception->getMessage()]);\n        }\n        // ページリクエスト時には500.htmlテンプレートを返す\n        return view('500', ['exception' => $exception], '')->withStatus(500);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring AOP in PHP\nDESCRIPTION: Configuration file for AOP settings, including scan paths, ignored annotations, and aspect collectors.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/aop.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Hyperf\\Di\\Annotation\\AspectCollector;\n\nreturn [\n    'annotations' => [\n        'scan' => [\n            'paths' => [\n                BASE_PATH . '/app',\n            ],\n            'ignore_annotations' => [\n                'mixin',\n            ],\n            'class_map' => [\n            ],\n            'collectors' => [\n                AspectCollector::class\n            ],\n        ],\n    ],\n    'aspects' => [\n        // Add corresponding Aspects here\n        app\\aspect\\DebugAspect::class,\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Get Server IP Address in webman-php\nDESCRIPTION: This snippet demonstrates how to retrieve the server's IP address using `$request->getLocalIp()` within the webman-php framework. It's used to determine the IP address the server is listening on for the current request.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/pt/request.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$request->getLocalIp();\n```\n\n----------------------------------------\n\nTITLE: Retrieving Session Values with Default Fallback in Webman\nDESCRIPTION: Shows how to retrieve a session value with a default fallback value that's returned when the key doesn't exist in the session.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/fr/session.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$session = $request->session();\n$name = $session->get('name', 'tom');\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Middleware in Webman\nDESCRIPTION: Configuration example showing how to register global middleware in the Webman framework through the middleware configuration file.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/middleware.md#2025-04-12_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    '' => [\n        app\\middleware\\AccessControlTest::class,\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Using offset And limit With Webman DB Query Builder\nDESCRIPTION: This snippet retrieves a subset of records from the 'users' table, starting from the 11th record (offset 10) and limiting the result to 5 records. The `offset()` method specifies the starting position, and `limit()` specifies the maximum number of records to retrieve.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/db/queries.md#2025-04-12_snippet_24\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')\n                ->offset(10)\n                ->limit(5)\n                ->get();\n```\n\n----------------------------------------\n\nTITLE: Setting Default Attribute Values in Eloquent Model\nDESCRIPTION: Illustrates setting default values for model attributes in an Eloquent model.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/tr/db/model.md#2025-04-12_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\nclass User extends Model\n{\n    protected $attributes = [\n        'delayed' => false,\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Client-Side Event Push Implementation\nDESCRIPTION: Example of client-side event triggering and handling for private channels\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/plugin/push.md#2025-04-12_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar user_channel = connection.subscribe('private-user-1');\nuser_channel.on('client-message', function (data) {\n    // \n});\nuser_channel.trigger('client-message', {form_uid:2, content:\"hello\"});\n```\n\n----------------------------------------\n\nTITLE: Database Migration for Casbin Rule Table\nDESCRIPTION: Phinx migration script to create a rules table for storing Casbin authorization policies and configurations\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/fr/components/casbin.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Phinx\\Migration\\AbstractMigration;\n\nclass CreateRuleTable extends AbstractMigration\n{\n    public function change()\n    {\n        $table = $this->table('rule', ['id' => false, 'primary_key' => ['id'], 'engine' => 'InnoDB', 'collation' => 'utf8mb4_general_ci', 'comment' => 'Table de règles']);\n\n        $table->addColumn('id', 'integer', ['identity' => true, 'signed' => false, 'limit' => 11, 'comment' => 'ID primaire'])\n            ->addColumn('ptype', 'char', ['default' => '', 'limit' => 8, 'comment' => \"Type de règle\"])\n            ->addColumn('v0', 'string', ['default' => '', 'limit' => 128])\n            ->addColumn('v1', 'string', ['default' => '', 'limit' => 128])\n            ->addColumn('v2', 'string', ['default' => '', 'limit' => 128])\n            ->addColumn('v3', 'string', ['default' => '', 'limit' => 128])\n            ->addColumn('v4', 'string', ['default' => '', 'limit' => 128])\n            ->addColumn('v5', 'string', ['default' => '', 'limit' => 128]);\n\n        $table->create();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Gzip Compression and Header in Webman\nDESCRIPTION: This code snippet demonstrates how to enable gzip compression and add the 'Content-Encoding: gzip' header in a Webman controller. This is necessary to address a bug in Apipost that prevents keep-alive from functioning correctly if the gzip header is missing, resulting in significantly reduced performance during stress tests.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/others/benchmarks.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\nclass IndexController\n{\n    public function index()\n    {\n        return response(gzencode('hello webman'))->withHeader('Content-Encoding', 'gzip');\n    }\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Synchronous Message Sending with Redis::send()\nDESCRIPTION: Method for sending messages synchronously to a Redis queue, with optional delay parameter\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/th/queue/redis.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\npublic function queue(Request $request)\n{\n    $queue = 'send-mail';\n    $data = ['to' => 'tom@gmail.com', 'content' => 'hello'];\n    Redis::send($queue, $data);\n    Redis::send($queue, $data, 60);\n    return response('Redis Queue Test');\n}\n```\n\n----------------------------------------\n\nTITLE: Mass Assignment Operations\nDESCRIPTION: Examples of using create, fill, and mass assignment methods on models.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/db/model.md#2025-04-12_snippet_24\n\nLANGUAGE: php\nCODE:\n```\n$flight = app\\modle\\Flight::create(['name' => 'Volo 10']);\n\n$flight->fill(['name' => 'Volo 22']);\n```\n\n----------------------------------------\n\nTITLE: Event Listener Configuration in PHP\nDESCRIPTION: Configuring event listeners to map event names to specific event classes\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/th/event.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'listener' => [\n        \\extend\\event\\LogErrorWriteEvent::NAME => \\extend\\event\\LogErrorWriteEvent::class,\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Accessing Route Parameters in Middleware in PHP\nDESCRIPTION: This code snippet demonstrates how to access route parameters that were set using `setParams` within a middleware.  It retrieves the route object from the request and then uses the `param` method to access the parameter value.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/middleware.md#2025-04-12_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\middleware;\n\nuse Webman\\MiddlewareInterface;\nuse Webman\\Http\\Response;\nuse Webman\\Http\\Request;\n\nclass Hello implements MiddlewareInterface\n{\n    public function process(Request $request, callable $handler) : Response\n    {\n        // $request->route is null by default, so we need to check $request->route for null\n        if ($route = $request->route) {\n            $value = $route->param('some_key');\n            var_export($value);\n        }\n        return $handler($request);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing an Event in PHP Webman Controller\nDESCRIPTION: Example of how to publish a 'user.register' event from a controller using the Event::emit() method.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/components/event.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\nuse support\\Request;\nuse Webman\\Event\\Event;\nclass User\n{\n    public function register(Request $request)\n    {\n        $user = [\n            'name' => 'webman',\n            'age' => 2\n        ];\n        Event::emit('user.register', $user);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing Messages to Stomp Queue in PHP\nDESCRIPTION: This code snippet demonstrates how to send a message to a Stomp queue using the Webman\\Stomp\\Client. It includes creating a queue name, preparing data as JSON, and sending the message.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/de/queue/stomp.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\nuse Webman\\Stomp\\Client;\n\nclass Index\n{\n    public function queue(Request $request)\n    {\n        // Warteschlange\n        $queue = 'Beispiele';\n        // Daten (beim Übergeben von Arrays muss eine eigene Serialisierung, z. B. mit json_encode, serialize etc., durchgeführt werden)\n        $data = json_encode(['an' => 'tom@gmail.com', 'inhalt' => 'hallo']);\n        // Lieferung durchführen\n        Client::send($queue, $data);\n\n        return response('Redis-Warteschlange Test');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configurazione di Blade in webman\nDESCRIPTION: Modifica del file config/view.php per utilizzare Blade come motore di template in webman.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/view.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse support\\view\\Blade;\n\nreturn [\n    'handler' => Blade::class\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Task Processes in PHP\nDESCRIPTION: This PHP code snippet shows how to define multiple task processes in `config/process.php`. Each process ('task1' and 'task2') has its own handler class (`process\\Task1::class` and `process\\Task2::class`), allowing for separation of time-sensitive tasks.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/fr/components/crontab.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nreturn [\n    ....autres configurations, ici omises....\n  \n    'task1'  => [\n        'handler'  => process\\Task1::class\n    ],\n    'task2'  => [\n        'handler'  => process\\Task2::class\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Creating Custom 500 HTML Template in Webman PHP\nDESCRIPTION: This HTML template is used to display a custom 500 error page. It includes a placeholder for the exception details.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/others/custom-error-page.md#2025-04-12_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!doctype html>\n<html>\n<head>\n    <meta charset=\"utf-8\">\n    <title>500 Internal Server Error</title>\n</head>\n<body>\n自訂錯誤模板：\n<?=htmlspecialchars($exception)?>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Controller without Suffix in Webman\nDESCRIPTION: This snippet shows how a controller looks when the `controller_suffix` configuration is set to an empty string.  The controller class name is simply `Foo` instead of `FooController`.  It still requires the `support\\Request` class.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/fr/controller.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\n\nclass Foo\n{\n    public function index(Request $request)\n    {\n        return response('hello index');\n    }\n    \n    public function hello(Request $request)\n    {\n        return response('hello webman');\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Check if Request Expects JSON - Webman PHP\nDESCRIPTION: Checks if the request expects a JSON response.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/th/request.md#2025-04-12_snippet_40\n\nLANGUAGE: php\nCODE:\n```\n$request->expectsJson();\n```\n\n----------------------------------------\n\nTITLE: Memory Leak Example: Singleton Pattern with Expanding Array\nDESCRIPTION: Shows how a singleton class with an expanding array property can cause memory leaks when continuously adding new data.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/others/memory-leak.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nclass Cache\n{\n    protected static $instance;\n    public $data = [];\n    \n    public function instance()\n    {\n        if (!self::$instance) {\n            self::$instance = new self;\n        }\n        return self::$instance;\n    }\n    \n    public function set($key, $value)\n    {\n        $this->data[$key] = $value;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Increment and Decrement Database Values\nDESCRIPTION: Provides methods to increase or decrease column values with optional custom increment amount\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/db/queries.md#2025-04-12_snippet_37\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')->increment('votes');\n\nDb::table('users')->increment('votes', 5);\n\nDb::table('users')->decrement('votes');\n\nDb::table('users')->decrement('votes', 5);\n```\n\n----------------------------------------\n\nTITLE: Checking if it Expects JSON Response - PHP\nDESCRIPTION: This method checks if the request expects a JSON response, returning a boolean. It aids in determining the response format based on the client's requirements.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/request.md#2025-04-12_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$request->expectsJson();\n```\n\n----------------------------------------\n\nTITLE: Check if Request Expects JSON in webman-php\nDESCRIPTION: This snippet demonstrates how to check if the request expects a JSON response using `$request->expectsJson()` in webman-php. It returns a boolean indicating if the client expects a JSON response based on the request headers.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/pt/request.md#2025-04-12_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$request->expectsJson();\n```\n\n----------------------------------------\n\nTITLE: Deleting Database Records\nDESCRIPTION: Demonstrates methods for deleting records with optional filtering conditions\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/db/queries.md#2025-04-12_snippet_39\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')->delete();\n\nDb::table('users')->where('votes', '>', 100)->delete();\n\nDb::table('users')->truncate();\n```\n\n----------------------------------------\n\nTITLE: User Controller with Authentication\nDESCRIPTION: Example controller implementation showing protected and public routes with session handling.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/middleware.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\nuse support\\Request;\n\nclass UserController\n{\n    protected $noNeedLogin = ['login'];\n\n    public function login(Request $request)\n    {\n        $request->session()->set('user', ['id' => 10, 'name' => 'webman']);\n        return json(['code' => 0, 'msg' => 'accesso effettuato']);\n    }\n\n    public function info()\n    {\n        return json(['code' => 0, 'msg' => 'ok', 'data' => session('user')]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Controller Without Suffix in Webman PHP\nDESCRIPTION: This example shows how to define a controller without the 'Controller' suffix when the controller_suffix setting is set to an empty string in config/app.php.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/jp/controller.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\n\nclass Foo\n{\n    public function index(Request $request)\n    {\n        return response('hello index');\n    }\n    \n    public function hello(Request $request)\n    {\n        return response('hello webman');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: PHP Template for Pagination\nDESCRIPTION: Plain PHP template implementation for displaying pagination controls using Bootstrap styles.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/db/paginator.md#2025-04-12_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<html>\n<head>\n  <!-- Built-in support for Bootstrap pagination styles -->\n  <link rel=\"stylesheet\" href=\"//maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css\">\n</head>\n<body>\n\n<?= $paginator;?>\n\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Classe ErrorCode generata automaticamente in PHP\nDESCRIPTION: Esempio della classe ErrorCode popolata automaticamente con i codici di errore generati.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/components/generate_error_code.md#2025-04-12_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * File generato, non modificare manualmente.\n * @Author:$Id$\n */\nnamespace support;\n\nclass ErrorCode\n{\n    const LoginNameOrPasswordError = -20110001;\n    const UserNotExist = -20110002;\n    const TokenNotExist = -20110003;\n    const InvalidToken = -20110004;\n    const ExpireToken = -20110005;\n    const WrongToken = -20110006;\n    const ClientIpNotEqual = -20110007;\n    const TokenRecordNotFound = -20110008;\n    const ModelAddUserError = -20110009;\n    const NoInfoToModify = -20110010;\n    const OnlyAdminPasswordCanBeModified = -20110011;\n    const AdminAccountCannotBeDeleted = -20110012;\n    const DbNotExist = -20110013;\n    const ModelAddOptionsError = -20110014;\n    const UnableToDeleteSystemConfig = -20110015;\n    const ConfigParamKeyRequired = -20110016;\n    const ExpiryCanNotGreaterThan7days = -20110017;\n    const GetPresignedPutObjectUrlError = -20110018;\n    const ObjectStorageConfigNotExist = -20110019;\n    const UpdateNavIndexSortError = -20110020;\n    const TagNameAttNotExist = -20110021;\n    const ModelUpdateOptionsError = -20110022;\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Paginator in ThinkPHP Template\nDESCRIPTION: This snippet illustrates how to display the Paginator object in a ThinkPHP template. It leverages the short echo tag `<?=$paginator?>` to output the Paginator's HTML content directly into the template.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/fr/components/paginator.md#2025-04-12_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<html>\n<head>\n    <!-- Prise en charge intégrée du style de pagination Bootstrap -->\n    <link rel=\"stylesheet\" href=\"//maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css\">\n</head>\n<body>\n\n<?=$paginator?>\n\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Redis Cluster Configuration\nDESCRIPTION: Configuration setup for Redis cluster implementation\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/db/redis.md#2025-04-12_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'clusters' => [\n        'default' => [\n            [\n                'host'     => 'localhost',\n                'password' => null,\n                'port'     => 6379,\n                'database' => 0,\n            ],\n        ],\n    ],\n\n];\n```\n\n----------------------------------------\n\nTITLE: Adding Error Code Generation to start.php\nDESCRIPTION: This code snippet integrates the error code generation process into the application's startup sequence within the `start.php` file. It ensures that error codes are automatically generated when the application is in debug mode (`APP_DEBUG` is true). The configuration for error code generation is loaded, and the `Generate` class from the `teamones/responseCodeMsg` package is instantiated and executed.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/th/components/generate_error_code.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n\"// วางหลังจาก Config::load(config_path(), ['route', 'container']);\n\n// สร้างรหัสข้อผิดพลาด สำหรับโหมด APP_DEBUG เท่านั้น\nif (config(\\\"app.debug\\\")) {\n    $errorCodeConfig = config('error_code');\n    (new \\\\teamones\\\\responseCodeMsg\\\\Generate($errorCodeConfig))->run();\n}\"\n```\n\n----------------------------------------\n\nTITLE: Triggering an Event\nDESCRIPTION: This PHP code demonstrates how to trigger the LogErrorWriteEvent using the EventManager.  An instance of the event is created with relevant data, and the trigger method dispatches the event to all registered listeners and subscribers.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/fr/event.md#2025-04-12_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\n$error = [\n    'errorMessage' => 'Message d'erreur',\n    'errorCode' => 500\n];\nEventManager::trigger(new LogErrorWriteEvent($error),LogErrorWriteEvent::NAME);\n```\n\n----------------------------------------\n\nTITLE: Using orderBy With Webman DB Query Builder\nDESCRIPTION: This snippet sorts the 'users' table by 'name' in descending order. `orderBy()` specifies the column to sort by and the sorting direction ('asc' or 'desc').\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/db/queries.md#2025-04-12_snippet_21\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')\n                ->orderBy('name', 'desc')\n                ->get();\n```\n\n----------------------------------------\n\nTITLE: Deleting Session Data in Webman\nDESCRIPTION: This code snippet demonstrates how to delete session data using the `forget()` method, which can remove one or more session items. The `delete()` method can be used to delete a single item.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/session.md#2025-04-12_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$session = $request->session();\n// 删除一项\n$session->forget('name');\n// 删除多项\n$session->forget(['name', 'age']);\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Middleware Interface in PHP\nDESCRIPTION: Example of implementing the MiddlewareInterface which defines the core middleware structure with process method handling request and response flow.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/pt/middleware.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ninterface MiddlewareInterface\n{\n    /**\n     * Processa uma solicitação recebida pelo servidor.\n     *\n     * Processa uma solicitação recebida pelo servidor para produzir uma resposta.\n     * Se não puder produzir a resposta por si só, poderá delegar ao manipulador de solicitações fornecido para fazê-lo.\n     */\n    public function process(Request $request, callable $handler): Response;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Validation with top-think/think-validate in PHP\nDESCRIPTION: Example demonstrating how to use the User validation class to validate an array of data. It creates a validator instance and checks if the data passes the validation rules.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-hk/components/validation.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$data = [\n    'name'  => 'thinkphp',\n    'email' => 'thinkphp@qq.com',\n];\n\n$validate = new \\app\\index\\validate\\User;\n\nif (!$validate->check($data)) {\n    var_dump($validate->getError());\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Global Middleware in Webman Configuration\nDESCRIPTION: Configuration snippet to add the AuthorizationMiddleware as a global middleware in Webman.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/de/casbin.md#2025-04-12_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    // Globale mittlere Waren\n    '' => [\n        // ... Andere Mittel waren hier ausgelassen\n        app\\middleware\\AuthorizationMiddleware::class,\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Setting Primary Key Type in Eloquent Model\nDESCRIPTION: Demonstrates setting the primary key type to string in an Eloquent model.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/tr/db/model.md#2025-04-12_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\nclass User extends Model\n{\n    protected $keyType = 'string';\n}\n```\n\n----------------------------------------\n\nTITLE: Check if Client Accepts JSON - Webman PHP\nDESCRIPTION: Checks if the client accepts a JSON response.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/th/request.md#2025-04-12_snippet_41\n\nLANGUAGE: php\nCODE:\n```\n$request->acceptJson();\n```\n\n----------------------------------------\n\nTITLE: Triggering Events in PHP\nDESCRIPTION: Example of triggering a custom event with error data using the EventManager\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/th/event.md#2025-04-12_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$error = [\n    'errorMessage' => 'ข้อความผิดพลาด',\n    'errorCode' => 500\n];\nEventManager::trigger(new LogErrorWriteEvent($error), LogErrorWriteEvent::NAME);\n```\n\n----------------------------------------\n\nTITLE: Creating and Downloading Excel File in PHP\nDESCRIPTION: Example of creating a new Excel spreadsheet, setting a cell value, saving the file locally, and providing a download response using PhpSpreadsheet and Webman framework.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/components/excel.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse PhpOffice\\PhpSpreadsheet\\Spreadsheet;\nuse PhpOffice\\PhpSpreadsheet\\Writer\\Xlsx;\n\nclass ExcelController\n{\n    public function index($request)\n    {\n        $spreadsheet = new Spreadsheet();\n        $sheet = $spreadsheet->getActiveSheet();\n        $sheet->setCellValue('A1', 'Hello World !');\n\n        $writer = new Xlsx($spreadsheet);\n        $file_path = public_path().'/hello_world.xlsx';\n        // Сохранить файл в папке public\n        $writer->save($file_path);\n        // Скачать файл\n        return response()->download($file_path, 'Название файла.xlsx');\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Downloading File in PHP\nDESCRIPTION: This example demonstrates how to initiate a file download using the download() method of the response object.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/response.md#2025-04-12_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\n\nclass FooController\n{\n    public function hello(Request $request)\n    {\n        return response()->download(public_path() . '/favicon.ico', '檔案名.ico');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Directory Structure for Migrations\nDESCRIPTION: Example directory structure showing the organization of migration and seed files in a Webman project\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/db/migration.md#2025-04-12_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n.\n├── app                           Application directory\n│   ├── controller                Controller directory\n│   │   └── Index.php             Controller\n│   ├── model                     Model directory\n......\n├── database                      Database files\n│   ├── migrations                Migration files\n│   │   └── 20180426073606_create_user_table.php\n│   ├── seeds                     Test data\n│   │   └── UserSeeder.php\n......\n```\n\n----------------------------------------\n\nTITLE: Controlador de ejemplo con Twig en Webman\nDESCRIPTION: Este snippet muestra un controlador de ejemplo que utiliza el motor de plantillas Twig en Webman. Pasa la variable 'name' a la vista 'user/hello'.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/es/view.md#2025-04-12_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\n\nclass UserController\n{\n    public function hello(Request $request)\n    {\n        return view('user/hello', ['name' => 'webman']);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom 500 HTML Template\nDESCRIPTION: HTML template for custom 500 error page that displays exception details using PHP variable interpolation\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/jp/others/custom-error-page.md#2025-04-12_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!doctype html>\n<html>\n<head>\n    <meta charset=\"utf-8\">\n    <title>500 Internal Server Error</title>\n</head>\n<body>\nカスタムエラーテンプレート：\n<?=htmlspecialchars($exception)?>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Variable Naming Convention\nDESCRIPTION: Example demonstrating camelCase naming convention for temporary variables in PHP.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/app/standard.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$articleCount = 100;\n```\n\n----------------------------------------\n\nTITLE: Implementing Error Code Generation in Application Start\nDESCRIPTION: Code to trigger error code generation during application startup in debug mode\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/components/generate_error_code.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// Place it after Config::load(config_path(), ['route', 'container']);\n\n// Generate error codes, only in APP_DEBUG mode\nif (config(\"app.debug\")) {\n    $errorCodeConfig = config('error_code');\n    (new \\teamones\\responseCodeMsg\\Generate($errorCodeConfig))->run();\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Requested Application Name - PHP\nDESCRIPTION: This snippet fetches the application name being requested. It returns an empty string for single applications and the name for multiple applications, with specific behavior noted for closure routes.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/request.md#2025-04-12_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n$request->app;\n```\n\n----------------------------------------\n\nTITLE: Getting Server's Port - PHP\nDESCRIPTION: This snippet retrieves the port number on which the server is running using the `$request->getLocalPort()` method. This is essential for network configurations or diagnostic purposes.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/request.md#2025-04-12_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$request->getLocalPort();\n```\n\n----------------------------------------\n\nTITLE: Complete Process Configuration Example\nDESCRIPTION: Comprehensive example showing all available configuration options for custom processes including SSL, user permissions, and constructor parameters.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/process.md#2025-04-12_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'websocket_test' => [\n        'handler' => app\\Pusher::class,\n        'listen'  => 'websocket://0.0.0.0:8888',\n        'count'   => 2,\n        'user'    => '',\n        'group'   => '',\n        'reloadable' => true,\n        'reusePort'  => true,\n        'transport'  => 'tcp',\n        'context'    => [],\n        'constructor' => [],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Event Class in PHP\nDESCRIPTION: Creating a custom event class with unique event name and handling logic for error logging\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/th/event.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nclass LogErrorWriteEvent extends Event\n{\n    const NAME = 'log.error.write';\n    public array $log;\n\n    public function __construct(array $log)\n    {\n        $this->log = $log;\n    }\n\n    public function handle()\n    {\n        return $this->log;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Triggering client event (JavaScript)\nDESCRIPTION: This JavaScript code demonstrates how to trigger a client event on a private channel using `webman/push`. The event will be sent to all other clients subscribed to the channel, excluding the client that triggered the event.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/pt/plugin/push.md#2025-04-12_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar user_channel = connection.subscribe('private-user-1');\nuser_channel.on('client-message', function (data) {\n    // \n});\nuser_channel.trigger('client-message', {form_uid:2, content:\"Olá\"});\n```\n\n----------------------------------------\n\nTITLE: Configuring middleware for multiple applications\nDESCRIPTION: This snippet shows how to configure different middleware for different applications within a webman project. The `config/middleware.php` file defines middleware to be applied globally and specific middleware for the `api` and `admin` applications.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/multiapp.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n\"return [\n    // 全局中间件\n    '' => [\n        support\\middleware\\AuthCheck::class,\n    ],\n    // api应用中间件\n    'api' => [\n         support\\middleware\\AccessControl::class,\n     ],\n    // admin应用中间件\n    'admin' => [\n         support\\middleware\\AdminAuthCheck::class,\n         support\\middleware\\SomeOtherClass::class,\n    ],\n];\n\"\n```\n\n----------------------------------------\n\nTITLE: Process Startup Configuration for Events in PHP\nDESCRIPTION: This snippet illustrates how to add the EventManager class to the bootstrap configuration file. This is necessary to utilize the event management functionality during application startup.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-hk/event.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    // 這裡省略了其他配置 ...\n    webman\\event\\EventManager::class,\n];\n```\n\n----------------------------------------\n\nTITLE: Triggering Events\nDESCRIPTION: Example of how to trigger the LogErrorWriteEvent with error data\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/event.md#2025-04-12_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$error = [\n    'errorMessage' => '错误消息',\n    'errorCode' => 500\n];\nEventManager::trigger(new LogErrorWriteEvent($error),LogErrorWriteEvent::NAME);\n```\n\n----------------------------------------\n\nTITLE: Bootstrap Configuration\nDESCRIPTION: Configuration to initialize the event manager in the bootstrap process\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/event.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    // 这里省略了其它配置 ...\n    webman\\event\\EventManager::class,\n];\n```\n\n----------------------------------------\n\nTITLE: Handling 404 errors with fallback route in Webman\nDESCRIPTION: This code snippet demonstrates how to handle 404 errors using a fallback route in Webman. It checks if the request is an AJAX request and returns a JSON response if it is. Otherwise, it returns a 404 HTML template.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/others/custom-error-page.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse support\\Request;\nuse Webman\\Route;\n\nRoute::fallback(function(Request $request){\n    // ajax请求时返回json\n    if ($request->expectsJson()) {\n        return json(['code' => 404, 'msg' => '404 not found']);\n    }\n    // 页面请求返回404.html模版\n    return view('404', ['error' => 'some error'])->withStatus(404);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Queue Connection\nDESCRIPTION: Configuration file for Redis queue connection with authentication, database selection, and retry settings\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/queue/redis.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'default' => [\n        'host' => 'redis://127.0.0.1:6379',\n        'options' => [\n            'auth' => '',         // Optional password\n            'db' => 0,            // Database\n            'max_attempts'  => 5, // Retry attempts after failure\n            'retry_seconds' => 5 // Retry interval in seconds\n        ]\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring Casbin Basic Model for Access Control\nDESCRIPTION: Configuration file content for the Casbin basic model, defining request, policy, role, and matcher rules.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/de/casbin.md#2025-04-12_snippet_2\n\nLANGUAGE: conf\nCODE:\n```\n[request_definition]\nr = sub, obj, act\n\n[policy_definition]\np = sub, obj, act\n\n[role_definition]\ng = _, _\n\n[policy_effect]\ne = some(where (p.eft == allow))\n\n[matchers]\nm = g(r.sub, p.sub) && r.obj == p.obj && r.act == p.act\n```\n\n----------------------------------------\n\nTITLE: Starting Webman on Linux\nDESCRIPTION: Commands for starting Webman server on Linux in both debug and daemon modes\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/attention.md#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nphp start.php start\nphp start.php start -d\n```\n\n----------------------------------------\n\nTITLE: Verwendung von Raw-Abfrageausdrücken mit dem Query Builder in PHP\nDESCRIPTION: Diese Snippets zeigen, wie man Raw-SQL-Ausdrücke in Abfragen einbindet, einschließlich der Verwendung von Bindungsparametern für Sicherheit.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/de/db/queries.md#2025-04-12_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$orders = Db::table('orders')\n                ->selectRaw('price * ? as price_with_tax', [1.0825])\n                ->get();\n\n$orders = Db::table('orders')\n                ->select('department', Db::raw('SUM(price) as total_sales'))\n                ->groupBy('department')\n                ->havingRaw('SUM(price) > ?', [2500])\n                ->get();\n```\n\n----------------------------------------\n\nTITLE: Accessing All Configurations in Webman PHP\nDESCRIPTION: Demonstrates how to retrieve all configuration values using the config() function without any parameters.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/config.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nconfig();\n```\n\n----------------------------------------\n\nTITLE: Pushing messages from server (PHP)\nDESCRIPTION: This code demonstrates how to use the `Webman\\Push\\Api` class to send push notifications from the server-side PHP code.  It initializes the API with the server address, app key, and app secret, and then uses the `trigger` method to send a message to a specific channel.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/pt/plugin/push.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Webman\\Push\\Api;\n$api = new Api(\n    // em um ambiente webman, pode-se usar config para obter configurações, em um ambiente não-webman é necessário configurar as configurações manualmente\n    'http://127.0.0.1:3232',\n    config('plugin.webman.push.app.app_key'),\n    config('plugin.webman.push.app.app_secret')\n);\n// Enviar mensagem do evento message para todos os clientes assinados no user-1\n$api->trigger('user-1', 'message', [\n    'from_uid' => 2,\n    'content'  => 'Olá, este é o conteúdo da mensagem'\n]);\n```\n\n----------------------------------------\n\nTITLE: Using fill Method for Mass Assignment on Existing Models\nDESCRIPTION: Shows how to use the fill method to mass-assign values to an existing model instance without saving it to the database.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/es/db/model.md#2025-04-12_snippet_31\n\nLANGUAGE: php\nCODE:\n```\n$flight->fill(['name' => 'Vuelo 22']);\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Connection in webman-php\nDESCRIPTION: Example configuration for Redis connection settings in config/redis.php.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/de/db/redis.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'default' => [\n        'host'     => '127.0.0.1',\n        'password' => null,\n        'port'     => 6379,\n        'database' => 0,\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Storing a Single Session Value in Webman\nDESCRIPTION: This code snippet shows how to store a single value in the session using the `set()` method. The session data is automatically saved when the session object is destroyed. The `set()` method does not return any value.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/session.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$session = $request->session();\n$session->set('name', 'tom');\n```\n\n----------------------------------------\n\nTITLE: Subscribing to a private channel (JavaScript)\nDESCRIPTION: This JavaScript code snippet shows how to subscribe to a private channel using `webman/push`. It configures the `Push` client with an `auth` URL, which the client will use to authenticate the subscription with the server.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/pt/plugin/push.md#2025-04-12_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar connection = new Push({\n    url: 'ws://127.0.0.1:3131', // endereço websocket\n    app_key: '<chave do aplicativo>',\n    auth: '/plugin/webman/push/auth' // autenticação para subscrição (apenas para canais privados)\n});\n\n// Supondo que o id do usuário é 1\nvar uid = 1;\n// O navegador ouve as mensagens do canal privada user-1\nvar user_channel = connection.subscribe('private-user-' + uid);\n```\n\n----------------------------------------\n\nTITLE: ThinkORM Database Query Example in PHP Controller\nDESCRIPTION: Demonstrates basic database querying using ThinkORM's Db facade to retrieve a user record with a condition\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/db/thinkorm.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\nuse think\\facade\\Db;\n\nclass FooController\n{\n    public function get(Request $request)\n    {\n        $user = Db::table('user')->where('uid', '>', 1)->find();\n        return json($user);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multi-Application Directory Structure in Webman PHP\nDESCRIPTION: This snippet demonstrates two possible directory structures for organizing multiple applications within a Webman PHP project. It shows how to separate controllers, models, and views for different sub-applications.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/multiapp.md#2025-04-12_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\napp\n├── shop\n│   ├── controller\n│   ├── model\n│   └── view\n├── api\n│   ├── controller\n│   └── model\n└── admin\n    ├── controller\n    ├── model\n    └── view\n```\n\nLANGUAGE: plaintext\nCODE:\n```\napp\n├── controller\n├── model\n├── view\n│\n├── api\n│   ├── controller\n│   └── model\n└── admin\n    ├── controller\n    ├── model\n    └── view\n```\n\n----------------------------------------\n\nTITLE: Creating Custom 500 HTML Template in Webman PHP\nDESCRIPTION: This snippet shows how to create a custom 500 HTML template file for Webman PHP applications. It includes basic HTML structure and uses PHP to display exception details.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/de/others/custom-error-page.md#2025-04-12_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!doctype html>\n<html>\n<head>\n    <meta charset=\"utf-8\">\n    <title>500 Internal Server Error</title>\n</head>\n<body>\nBenutzerdefiniertes Fehler-Template:\n<?=htmlspecialchars($exception)?>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Creating a Service Class for AOP Testing in PHP\nDESCRIPTION: Example of a UserService class that will be intercepted by AOP.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/aop.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\service;\n\nclass UserService\n{\n    public function first(): array\n    {\n        return ['id' => 1];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Array of Where Conditions in webman-php\nDESCRIPTION: Using an array to specify multiple where conditions. This example filters users with status equal to '1' AND subscribed not equal to '1'.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/db/queries.md#2025-04-12_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')->where([\n    ['status', '=', '1'],\n    ['subscribed', '<>', '1'],\n])->get();\n\n```\n\n----------------------------------------\n\nTITLE: Rendering Pagination in Twig Template\nDESCRIPTION: This snippet shows how to render pagination in a Twig template using the Jason Grimes Paginator. It includes the necessary Bootstrap CSS for styling and uses Twig's autoescape feature.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/jp/db/paginator.md#2025-04-12_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<html>\n<head>\n  <!-- Bootstrapページネーションスタイルをネイティブサポート -->\n  <link rel=\"stylesheet\" href=\"//maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css\">\n</head>\n<body>\n\n{% autoescape false %}\n{{paginator}}\n{% endautoescape %}\n\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: MemReport Bootstrap Class\nDESCRIPTION: This class, `MemReport`, implements the `Bootstrap` interface. The `start` method is executed during the process startup. It checks if the environment is a command line, and if not, sets up a timer that executes every 10 seconds to output the current memory usage.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/es/others/bootstrap.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace app\\bootstrap;\n\nuse Webman\\Bootstrap;\n\nclass MemReport implements Bootstrap\n{\n    public static function start($worker)\n    {\n        // ¿Es un entorno de línea de comandos?\n        $is_console = !$worker;\n        if ($is_console) {\n            // Si no quieres que esta inicialización se ejecute en un entorno de línea de comandos, simplemente devuelve aquí.\n            return;\n        }\n        \n        // Ejecutar cada 10 segundos\n        \\Workerman\\Timer::add(10, function () {\n            // Para propósitos de demostración, aquí utilizamos la salida en lugar de un informe real.\n            echo memory_get_usage() . \"\\n\";\n        });\n        \n    }\n\n}\n\n```\n\n----------------------------------------\n\nTITLE: Incrementing and Decrementing a Field - PHP\nDESCRIPTION: Demonstrates how to increment or decrement the 'votes' field in the 'users' table. Additionally, specific conditions can also be applied during these operations. This is vital for managing numerical attributes efficiently.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/pt/db/queries.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')->increment('votes');\n\nDb::table('users')->increment('votes', 5);\n\nDb::table('users')->decrement('votes');\n\nDb::table('users')->decrement('votes', 5);\n\n```\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')->increment('votes', 1, ['name' => 'John']);\n```\n\n----------------------------------------\n\nTITLE: Delayed Response with Timer Sleep\nDESCRIPTION: Demonstrates non-blocking sleep using Workerman's Timer::sleep() method in a controller, allowing asynchronous request handling without blocking the process\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/es/coroutine/fiber.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace app\\controller;\n\nuse support\\Request;\nuse Workerman\\Timer;\n\nclass TestController\n{\n    public function index(Request $request)\n    {\n        // Dormir durante 1.5 segundos\n        Timer::sleep(1.5);\n        return $request->getRemoteIp();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuration complète d'un processus personnalisé dans Webman\nDESCRIPTION: Exemple complet de configuration d'un processus dans Webman, incluant toutes les options disponibles comme le handler, l'écoute, le compte, l'utilisateur, le groupe, et d'autres paramètres avancés.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/fr/process.md#2025-04-12_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nreturn [\\n    // ... \\n\\n    // websocket_test est le nom du processus\\n    'websocket_test' => [\\n        // Vous spécifiez ici la classe du processus\\n        'handler' => app\\Pusher::class,\\n        // Protocole, IP et port surveillés (optionnel)\\n        'listen'  => 'websocket://0.0.0.0:8888',\\n        // Nombre de processus (optionnel, par défaut 1)\\n        'count'   => 2,\\n        // Utilisateur de fonctionnement du processus (optionnel, utilisateur actuel par défaut)\\n        'user'    => '',\\n        // Groupe de fonctionnement du processus (optionnel, groupe actuel par défaut)\\n        'group'   => '',\\n        // Le processus prend-il en charge le rechargement ? (optionnel, par défaut vrai)\\n        'reloadable' => true,\\n        // Activation de reusePort (optionnel, nécessite PHP >= 7.0 par défaut à vrai)\\n        'reusePort'  => true,\\n        // transport (optionnel, définir sur ssl lorsque SSL est requis, par défaut à tcp)\\n        'transport'  => 'tcp',\\n        // context (optionnel, lorsque transport est ssl, le chemin du certificat doit être transmis)\\n        'context'    => [], \\n        // Arguments du constructeur de classe de processus. Cet exemple montre les arguments du constructeur de la classe process\\\\Pusher::class (optionnel)\\n        'constructor' => [],\\n    ],\\n];\n```\n\n----------------------------------------\n\nTITLE: User Controller with Authentication Integration\nDESCRIPTION: Example controller showing how to implement protected and public routes using the authentication middleware.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/pt/middleware.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\nuse support\\Request;\n\nclass UserController\n{\n    protected $noNeedLogin = ['login'];\n\n    public function login(Request $request)\n    {\n        $request->session()->set('user', ['id' => 10, 'name' => 'webman']);\n        return json(['code' => 0, 'msg' => 'login ok']);\n    }\n\n    public function info()\n    {\n        return json(['code' => 0, 'msg' => 'ok', 'data' => session('user')]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Single Value in Webman PHP\nDESCRIPTION: This snippet demonstrates how to retrieve a single value from a record using the value method.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/hi/db/queries.md#2025-04-12_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$email = Db::table('users')->where('name', 'John')->value('email');\n```\n\n----------------------------------------\n\nTITLE: WhereNotBetween Clause with Webman PHP\nDESCRIPTION: This code snippet demonstrates how to use the `whereNotBetween()` clause in the Webman PHP framework's database query builder. It checks if the value of the 'votes' column falls outside the range of 1 to 100.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/fr/db/queries.md#2025-04-12_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')\n                    ->whereNotBetween('votes', [1, 100])\n                    ->get();\n```\n\n----------------------------------------\n\nTITLE: Creating DebugAspect class\nDESCRIPTION: This PHP code defines a DebugAspect class that extends AbstractAspect and intercepts calls to the `first` method of the UserService class. It dumps a value and then proceeds with the original method call.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/th/aop.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n\"<?php\\nnamespace app\\aspect;\\n\\nuse app\\service\\UserService;\\nuse Hyperf\\Di\\Aop\\AbstractAspect;\\nuse Hyperf\\Di\\Aop\\ProceedingJoinPoint;\\n\\nclass DebugAspect extends AbstractAspect\\n{\\n    public $classes = [\\n        UserService::class . '::first',\\n    ];\\n\\n    public function process(ProceedingJoinPoint $proceedingJoinPoint)\\n    {\\n        var_dump(11);\\n        return $proceedingJoinPoint->process();\\n    }\\n}\\n\"\n```\n\n----------------------------------------\n\nTITLE: Defining an Event Class in PHP\nDESCRIPTION: This snippet defines the LogErrorWriteEvent class, which represents an event that carries log information. It utilizes the Symfony Event base class and includes a method to handle the log data when the event is triggered.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/event.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nnamespace extend\\event;\n\nuse Symfony\\Contracts\\EventDispatcher\\Event;\n\nclass LogErrorWriteEvent extends Event\n{\n    const NAME = 'log.error.write';  // 事件名，事件的唯一標識\n\n    /** @var array */\n    public array $log;\n\n    public function __construct(array $log)\n    {\n        $this->log = $log;\n    }\n\n    public function handle()\n    {\n        return $this->log;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving and Deleting Session Value in Webman\nDESCRIPTION: Demonstrates how to get a session value and remove it in one operation using the pull method. Returns null if the session key doesn't exist.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/fr/session.md#2025-04-12_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$session = $request->session();\n$name = $session->pull('name');\n```\n\n----------------------------------------\n\nTITLE: Rendering Pagination in Blade Template\nDESCRIPTION: This snippet demonstrates how to render pagination in a Blade template using the Jason Grimes Paginator. It includes the necessary Bootstrap CSS for styling and uses Blade's unescaped output syntax.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/jp/db/paginator.md#2025-04-12_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n<html>\n<head>\n  <!-- Bootstrapページネーションスタイルをネイティブサポート -->\n  <link rel=\"stylesheet\" href=\"//maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css\">\n</head>\n<body>\n\n{!! $paginator !!}\n\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: JQuery AJAX Request Example\nDESCRIPTION: Shows an example of a jQuery AJAX request sending data to a webman endpoint for validation.  It sends nickname, username, and password data to the specified URL using the POST method and expects a JSON response.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/components/validation.md#2025-04-12_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n$.ajax({\n      url : 'http://127.0.0.1:8787',\n      type : \"post\",\n      dataType:'json',\n      data : {nickname:'湯姆', username:'tom cat', password: '123456'}\n  });\n\n```\n\n----------------------------------------\n\nTITLE: Registering Permission Service in Webman Bootstrap Configuration\nDESCRIPTION: Code snippet to register the Permission service in the Webman bootstrap configuration file.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/de/casbin.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// ...\nwebman\\permission\\Permission::class,\n```\n\n----------------------------------------\n\nTITLE: Where Null Clause in Webman PHP\nDESCRIPTION: This snippet demonstrates how to use the whereNull method to filter for null values.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/hi/db/queries.md#2025-04-12_snippet_25\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')\n                    ->whereNull('updated_at')\n                    ->get();\n```\n\n----------------------------------------\n\nTITLE: Middleware Interface in Webman\nDESCRIPTION: Defines the interface that middlewares must implement in Webman. It includes the `process` method, which handles incoming server requests and returns a `support\\Response` object.  The request continues through the layers or is stopped based on the logic implemented.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/es/middleware.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n\"interface MiddlewareInterface\n{\n    /**\n     * Procesa una solicitud entrante del servidor.\n     *\n     * Procesa una solicitud entrante del servidor para producir una respuesta.\n     * Si no puede producir la respuesta por sí mismo, puede delegar al controlador de solicitud proporcionado para que lo haga.\n     */\n    public function process(Request $request, callable $handler): Response;\n}\"\n```\n\n----------------------------------------\n\nTITLE: Returning JSON for 404 Not Found Route\nDESCRIPTION: Returns a JSON response when a route is not found, useful for API applications\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/es/route.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nRoute::fallback(function(){\n    return json(['code' => 404, 'msg' => '404 not found']);\n});\n```\n\n----------------------------------------\n\nTITLE: Setting up a route for /json endpoint\nDESCRIPTION: This code snippet defines a route for the `/json` endpoint, mapping it to the `json` method of the `IndexController`. This route is used to test the AOP implementation.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/aop.md#2025-04-12_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Webman\\Route;\n\nRoute::any('/json', [app\\controller\\IndexController::class, 'json']);\n\n```\n\n----------------------------------------\n\nTITLE: Native PHP Template Example\nDESCRIPTION: This HTML code is a basic native PHP template. It displays the value of the `$name` variable passed from the controller, escaping it with `htmlspecialchars` for security.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-hk/view.md#2025-04-12_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n\"<!doctype html>\n<html>\n<head>\n    <meta charset=\\\"utf-8\\\">\n    <title>webman</title>\n</head>\n<body>\nhello <?=htmlspecialchars($name)?>\n</body>\n</html>\"\n```\n\n----------------------------------------\n\nTITLE: HTML Login Form with Captcha Image\nDESCRIPTION: HTML template demonstrating a login form with captcha image generation and user input field\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/components/captcha.md#2025-04-12_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!doctype html>\n<html>\n<head>\n    <meta charset=\"utf-8\">\n    <title>驗證碼測試</title>  \n</head>\n<body>\n    <form method=\"post\" action=\"\\/login\\/check\">\n       <img src=\"\\/login\\/captcha\" \\/><br>\n        <input type=\"text\" name=\"captcha\" \\/>\n        <input type=\"submit\" value=\"提交\" \\/>\n    </form>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Implementazione del consumatore della coda Redis in Webman PHP\nDESCRIPTION: Esempio di classe consumatore per elaborare i messaggi dalla coda Redis in Webman PHP.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/queue/redis.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace app\\queue\\redis;\n\nuse Webman\\RedisQueue\\Consumer;\n\nclass MyMailSend implements Consumer\n{\n    // Nome della coda da consumare\n    public $queue = 'send-mail';\n    \n    // Nome della connessione, corrispondente alla connessione definita in plugin/webman/redis-queue/redis.php\n    public $connection = 'default';\n    \n    // Consumo\n    public function consume($data)\n    {\n        // Nessuna necessità di deserializzare\n        var_export($data); // Output: ['to' => 'tom@gmail.com', 'content' => 'hello']\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Including JavaScript Client for Webman Push\nDESCRIPTION: This snippet includes the JavaScript client for webman/push in an HTML document, allowing for client-side push notifications through WebSockets.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/plugin/push.md#2025-04-12_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"/plugin/webman/push/push.js\"> </script>\n```\n\n----------------------------------------\n\nTITLE: Installing jasongrimes/php-paginator via Composer\nDESCRIPTION: This snippet shows how to install the jasongrimes/php-paginator package using Composer.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/components/paginator.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ncomposer require \"jasongrimes/paginator:^1.0.3\"\n```\n\n----------------------------------------\n\nTITLE: Process Startup Configuration\nDESCRIPTION: This PHP code snippet demonstrates how to register the EventManager class as a process to start during the webman application's bootstrapping phase. This ensures that the event system is initialized and ready to use.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/fr/event.md#2025-04-12_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nreturn [\n    // Other configurations here...\n    webman\\event\\EventManager::class,\n];\n```\n\n----------------------------------------\n\nTITLE: InRandomOrder Clause with Webman PHP\nDESCRIPTION: This code snippet demonstrates how to use the `inRandomOrder()` clause in the Webman PHP framework's database query builder. It retrieves a single random user from the 'users' table.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/fr/db/queries.md#2025-04-12_snippet_29\n\nLANGUAGE: php\nCODE:\n```\n$randomUser = Db::table('users')\n                ->inRandomOrder()\n                ->first();\n```\n\n----------------------------------------\n\nTITLE: Assegnazione di variabili al template con View::assign()\nDESCRIPTION: Esempio di utilizzo di View::assign() per assegnare variabili al template in qualsiasi punto del codice.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/view.md#2025-04-12_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\nuse support\\View;\n\nclass UserController\n{\n    public function hello(Request $request)\n    {\n        View::assign([\n            'name1' => 'value1',\n            'name2'=> 'value2',\n        ]);\n        View::assign('name3', 'value3');\n        return view('user/test', ['name' => 'webman']);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Get Request Method - Webman PHP\nDESCRIPTION: Retrieves the request method (e.g., GET, POST, PUT, DELETE, OPTIONS, HEAD).\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/th/request.md#2025-04-12_snippet_25\n\nLANGUAGE: php\nCODE:\n```\n $request->method();\n```\n\n----------------------------------------\n\nTITLE: Implementing Event Subscriber\nDESCRIPTION: This PHP code implements an event subscriber, LoggerSubscriber, which listens for the LogErrorWriteEvent. The getSubscribedEvents method defines the event to method mapping (LogErrorWriteEvent::NAME => 'onLogErrorWrite'), and the onLogErrorWrite method contains the specific business logic to execute when the event is triggered.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/fr/event.md#2025-04-12_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\nnamespace extend\\event\\subscriber;\n\nuse extend\\event\\LogErrorWriteEvent;\nuse Symfony\\Component\\EventDispatcher\\EventSubscriberInterface;\n\nclass LoggerSubscriber implements EventSubscriberInterface\n{\n    /**\n     * @desc: Description de la méthode\n     * @return array|string[]\n     */\n    public static function getSubscribedEvents()\n    {\n        return [\n            LogErrorWriteEvent::NAME => 'onLogErrorWrite',\n        ];\n    }\n\n    /**\n     * @desc: Déclenchement de l'événement\n     * @param LogErrorWriteEvent $event\n     */\n    public function onLogErrorWrite(LogErrorWriteEvent $event)\n    {\n        // Quelques logiques métier spécifiques\n        var_dump($event->handle());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Captcha Parameters\nDESCRIPTION: This code snippet demonstrates how to configure common parameters of the captcha generation, such as the length of the captcha phrase and the allowed characters.  It uses the PhraseBuilder class to customize the captcha phrase before building the captcha image.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/es/components/captcha.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n    /**\n     * Generar imagen de verificación\n     */\n    public function captcha(Request $request)\n    {\n        // Inicializar la clase de verificación\n        $builder = new CaptchaBuilder;\n        // Longitud de la verificación\n        $length = 4;\n        // Caracteres permitidos\n        $chars = '0123456789abcefghijklmnopqrstuvwxyz';\n        $builder = new PhraseBuilder($length, $chars);\n        $captcha = new CaptchaBuilder(null, $builder);\n        // Generar el código de verificación\n        $builder->build();\n        // Almacenar el valor de la verificación en la sesión\n        $request->session()->set('captcha', strtolower($builder->getPhrase()));\n        // Obtener los datos binarios de la imagen de verificación\n        $img_content = $builder->get();\n        // Devolver los datos binarios de la imagen de verificación\n        return response($img_content, 200, ['Content-Type' => 'image/jpeg']);\n    }\n```\n\n----------------------------------------\n\nTITLE: Configurazione del monitoraggio dei processi in PHP per webman\nDESCRIPTION: Questo snippet mostra la configurazione del monitoraggio dei processi in webman. Include impostazioni per il monitoraggio degli aggiornamenti dei file e dell'utilizzo della memoria, specificando le directory da monitorare, le estensioni dei file e le opzioni di abilitazione.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/others/monitor.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nglobal $argv;\n\nreturn [\n    // Rilevamento dell'aggiornamento dei file e ricarica automatica\n    'monitor' => [\n        'handler' => process\\Monitor::class,\n        'reloadable' => false,\n        'constructor' => [\n            // Monitorare queste directory\n            'monitorDir' => array_merge([    // Quali directory devono essere monitorate\n                app_path(),\n                config_path(),\n                base_path() . '/process',\n                base_path() . '/support',\n                base_path() . '/resource',\n                base_path() . '/.env',\n            ], glob(base_path() . '/plugin/*/app'), glob(base_path() . '/plugin/*/config'), glob(base_path() . '/plugin/*/api')),\n            // I file con queste estensioni verranno monitorati\n            'monitorExtensions' => [\n                'php', 'html', 'htm', 'env'\n            ],\n            'options' => [\n                'enable_file_monitor' => !in_array('-d', $argv) && DIRECTORY_SEPARATOR === '/', // Abilita il monitoraggio dei file\n                'enable_memory_monitor' => DIRECTORY_SEPARATOR === '/',                      // Abilita il monitoraggio della memoria\n            ]\n        ]\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring Wildcard Event Listeners in PHP\nDESCRIPTION: Configuration example for setting up wildcard event listeners to handle multiple related events.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/de/components/event.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nreturn [\n    'user.*' => [\n        [app\\event\\User::class, 'deal']\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: MongoDB Controller Example in Webman\nDESCRIPTION: Example controller demonstrating basic MongoDB operations using the database connection\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/db/mongo.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\nuse support\\Db;\n\nclass UserController\n{\n    public function db(Request $request)\n    {\n        Db::connection('mongodb')->table('test')->insert([1,2,3]);\n        return json(Db::connection('mongodb')->table('test')->get());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Check if Client Accepts JSON in webman-php\nDESCRIPTION: This snippet shows how to check if the client accepts JSON responses using `$request->acceptJson()` in webman-php. It returns a boolean indicating if the client's `Accept` header includes JSON.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/pt/request.md#2025-04-12_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$request->acceptJson();\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Constructor Injection\nDESCRIPTION: This PHP code snippet demonstrates how to configure custom constructor injection in the config/dependence.php file for classes that require non-class parameters.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/tr/di.md#2025-04-12_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    // ... diğer konfigürasyonları burada atladık\n    \n    app\\service\\Mailer::class =>  new app\\service\\Mailer('192.168.1.11', 25);\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring Exclusion Pattern for Webman Console in PHP\nDESCRIPTION: Sets the exclusion pattern in the Webman Console configuration to avoid packaging unnecessary directories and files, reducing the package size.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/others/bin.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n'exclude_pattern'   => '#^(?!.*(composer.json|/.github/|/.idea/|/.git/|/.setting/|/runtime/|/vendor-bin/|/build/|vendor/webman/admin))(.*)$#'\n```\n\n----------------------------------------\n\nTITLE: Creating a Task Process File in PHP\nDESCRIPTION: This PHP code defines a process file `process/Task.php` that uses the `Workerman\\Crontab\\Crontab` class to schedule tasks. Several crontab schedules are defined, each triggering a function that echoes the current date and time.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/fr/components/crontab.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace process;\n\nuse Workerman\\Crontab\\Crontab;\n\nclass Task\n{\n    public function onWorkerStart()\n    {\n    \n        // Exécuter toutes les secondes\n        new Crontab('*/1 * * * * *', function(){\n            echo date('Y-m-d H:i:s').\"\\n\";\n        });\n        \n        // Exécuter toutes les 5 secondes\n        new Crontab('*/5 * * * * *', function(){\n            echo date('Y-m-d H:i:s').\"\\n\";\n        });\n        \n        // Exécuter toutes les minutes\n        new Crontab('0 */1 * * * *', function(){\n            echo date('Y-m-d H:i:s').\"\\n\";\n        });\n        \n        // Exécuter toutes les 5 minutes\n        new Crontab('0 */5 * * * *', function(){\n            echo date('Y-m-d H:i:s').\"\\n\";\n        });\n        \n        // Exécuter à la première seconde de chaque minute\n        new Crontab('1 * * * * *', function(){\n            echo date('Y-m-d H:i:s').\"\\n\";\n        });\n      \n        // Exécuter à 7h50 tous les jours, veuillez noter que la position de la seconde a été omise ici\n        new Crontab('50 7 * * *', function(){\n            echo date('Y-m-d H:i:s').\"\\n\";\n        });\n        \n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Excluded Patterns in webman Console\nDESCRIPTION: This configuration snippet defines patterns for excluding unnecessary files and directories during the packaging process. This helps to reduce the size of the resulting binary file by preventing the inclusion of development-related or runtime-generated files. The `exclude_pattern` setting is a regular expression.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/th/others/bin.md#2025-04-12_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n\"<?php\n'exclude_pattern'   => '#^(?!.*(composer.json|/.github/|/.idea/|/.git/|/.setting/|/runtime/|/vendor-bin/|/build/|vendor/webman/admin))(.*)$#'\"\n```\n\n----------------------------------------\n\nTITLE: Setting Headers with Response Function in Webman PHP\nDESCRIPTION: Shows how to set custom headers when creating a response using the `response()` helper function.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/pt/response.md#2025-04-12_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\n\nclass FooController\n{\n    public function hello(Request $request)\n    {\n        return response('hello webman', 200, [\n            'Content-Type' => 'application/json',\n            'X-Header-One' => 'Valor do Cabeçalho' \n        ]);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining Fillable Attributes in PHP\nDESCRIPTION: This snippet demonstrates how to define the `$fillable` property in a model, which specifies which attributes can be mass-assigned. It acts as a \"whitelist\" for mass assignment.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/fr/db/model.md#2025-04-12_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace app\\model;\n\nuse support\\Model;\n\nclass Flight extends Model\n{\n    /**\n     * Attributs pouvant être modifiés en masse.\n     *\n     * @var array\n     */\n    protected $fillable = ['name'];\n}\n\n```\n\n----------------------------------------\n\nTITLE: Error Code Configuration\nDESCRIPTION: This code defines the configuration array for the error code generator. It specifies the ErrorCode class file, the root path of the application, the system identifier, and the range for generating error codes.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/components/generate_error_code.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n\"<?php\n\nreturn [\n    \\\"class\\\" => new \\\\support\\\\ErrorCode(), // Файл класса ErrorCode\n    \\\"root_path\\\" => app_path(), // Текущий корневой каталог кода\n    \\\"system_number\\\" => 201, // Идентификатор системы\n    \\\"start_min_number\\\" => 10000 // Диапазон генерации кодов ошибок, например, 10000-99999\n];\"\n```\n\n----------------------------------------\n\nTITLE: Disabling Timestamps in Eloquent Model\nDESCRIPTION: Shows how to disable automatic timestamp management in an Eloquent model by setting $timestamps to false.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/db/model.md#2025-04-12_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nclass User extends Model\n{\n    /**\n     * Указывает, автоматически ли управлять метками времени\n     *\n     * @var bool\n     */\n    public $timestamps = false;\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple Applications Directory Structure (Option 2)\nDESCRIPTION: Alternative directory structure with global controllers and separate application-specific directories\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/pt/multiapp.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\napp\n├── controller\n├── model\n├── view\n│\n├── api\n│   ├── controller\n│   └── model\n└── admin\n    ├── controller\n    ├── model\n    └── view\n```\n\n----------------------------------------\n\nTITLE: Configuring the custom exception handler in Webman\nDESCRIPTION: This code configures the Webman application to use the custom exception handler defined in `app/exception/Handler.php`. This ensures that the custom handler is used to render error responses.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/others/custom-error-page.md#2025-04-12_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    '' => \\app\\exception\\Handler::class,\n];\n```\n\n----------------------------------------\n\nTITLE: Installing illuminate/redis via Composer\nDESCRIPTION: This snippet demonstrates how to install the illuminate/redis and illuminate/events packages via Composer, which are prerequisites for using Redis in the Webman PHP framework.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-hk/db/redis.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ncomposer require -W illuminate/redis illuminate/events\n```\n\n----------------------------------------\n\nTITLE: Triggering Client Events (JavaScript)\nDESCRIPTION: This JavaScript demonstrates triggering client events on a private channel. Client events must start with 'client-'. The trigger method sends the event to all subscribers of the channel except the sender.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/th/plugin/push.md#2025-04-12_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar user_channel = connection.subscribe('private-user-1');\nuser_channel.on('client-message', function (data) {\n    // \n});\nuser_channel.trigger('client-message', {form_uid:2, content:\"hello\"});\n```\n\n----------------------------------------\n\nTITLE: Configuring Webman to use Blade (Repeated)\nDESCRIPTION: This PHP code configures webman to use the Blade template engine. This is repeated from earlier in the document.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-hk/view.md#2025-04-12_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n\"<?php\nuse support\\view\\Blade;\n\nreturn [\n    'handler' => Blade::class\n];\n?>\"\n```\n\n----------------------------------------\n\nTITLE: Vue.js Integration Example\nDESCRIPTION: Example of importing and using the push service in a Vue.js application\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/plugin/push.md#2025-04-12_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Push } from '../utils/push-vue'\n```\n\n----------------------------------------\n\nTITLE: Disabling Default Plugin Routes in Webman PHP\nDESCRIPTION: Shows how to disable the default routing for a specific plugin application using the Route::disableDefaultRoute() method.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/app/route.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nRoute::disableDefaultRoute('foo');\n```\n\n----------------------------------------\n\nTITLE: Available Logging Methods\nDESCRIPTION: This code snippet lists the available logging methods provided by the `Log` facade in Webman. These methods map to different log levels, such as debug, info, warning, error, and critical. The `log` method allows specifying a custom log level.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/th/log.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nLog::log($level, $message, array $context = [])\nLog::debug($message, array $context = [])\nLog::info($message, array $context = [])\nLog::notice($message, array $context = [])\nLog::warning($message, array $context = [])\nLog::error($message, array $context = [])\nLog::critical($message, array $context = [])\nLog::alert($message, array $context = [])\nLog::emergency($message, array $context = [])\n```\n\n----------------------------------------\n\nTITLE: Checking if Client Accepts JSON Response - PHP\nDESCRIPTION: This snippet verifies whether the client has indicated a preference for JSON responses. It helps in determining how to format the response sent back to the client.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/request.md#2025-04-12_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$request->acceptJson();\n```\n\n----------------------------------------\n\nTITLE: Displaying Webman PHP Plugin Folder Structure\nDESCRIPTION: This snippet shows the typical folder structure of a Webman PHP plugin, including directories for app components, configuration files, and public assets. It also highlights the 'api' folder for internal interfaces.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/tr/app/directory.md#2025-04-12_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nplugin/\n└── foo\n    ├── app\n    │   ├── controller\n    │   │   └── IndexController.php\n    │   ├── exception\n    │   │   └── Handler.php\n    │   ├── functions.php\n    │   ├── middleware\n    │   ├── model\n    │   └── view\n    │       └── index\n    │           └── index.html\n    ├── config\n    │   ├── app.php\n    │   ├── autoload.php\n    │   ├── container.php\n    │   ├── database.php\n    │   ├── exception.php\n    │   ├── log.php\n    │   ├── middleware.php\n    │   ├── process.php\n    │   ├── redis.php\n    │   ├── route.php\n    │   ├── static.php\n    │   ├── thinkorm.php\n    │   ├── translation.php\n    │   └── view.php\n    ├── public\n    └── api\n```\n\n----------------------------------------\n\nTITLE: Advanced Parameter Binding with Multiple Types\nDESCRIPTION: Shows controller method with multiple parameter types including string, int, float, bool and array.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/controller.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\nuse support\\Response;\n\nclass UserController\n{\n    public function create(string $name, int $age, float $balance, bool $vip, array $extension): Response\n    {\n        return json([\n            'name' => $name,\n            'age' => $age,\n            'balance' => $balance,\n            'vip' => $vip,\n            'extension' => $extension,\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Context Data in PHP\nDESCRIPTION: Sets a value in the context with a given name. This method is used to store data in the request context.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/jp/coroutine/context.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nContext::set(string $name, mixed $value);\n```\n\n----------------------------------------\n\nTITLE: Checking if Session Data Exists Including Null Values in Webman\nDESCRIPTION: This code snippet shows how to check if a session key exists using the `exists()` method. The method will return `true` if the session exists, even if the value is `null`.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/session.md#2025-04-12_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n$session = $request->session();\n$has = $session->exists('name');\n```\n\n----------------------------------------\n\nTITLE: Accessing Main Project Log\nDESCRIPTION: This snippet demonstrates how a plugin can use the logging configuration of the main project. It shows logging to the default channel and to a named channel 'teste' that is configured in the main project.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/pt/plugin/app.md#2025-04-12_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse support\\Log;\nLog::info('conteúdo_do_log');\n// Supondo que o projeto principal tenha uma configuração de log chamada teste\nLog::channel('teste')->info('conteúdo_do_log');\n```\n\n----------------------------------------\n\nTITLE: Starting and Testing the service\nDESCRIPTION: These commands start the Webman service using `php start.php start` and then tests the `/json` endpoint using `curl`. This verifies the AOP functionality.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/th/aop.md#2025-04-12_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n\"php start.php start\\ncurl  http://127.0.0.1:8787/json\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Single Row\nDESCRIPTION: Query to fetch a single row matching specific criteria using the first() method\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/db/queries.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$user = Db::table('users')->where('name', 'John')->first();\n```\n\n----------------------------------------\n\nTITLE: Get Specific Header - Webman PHP\nDESCRIPTION: Retrieves a specific request header by its name using `header('host')`. If the header is not found, it returns null. Header keys are case-insensitive but treated as lowercase.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/th/request.md#2025-04-12_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$request->header('host');\n```\n\n----------------------------------------\n\nTITLE: Installing Hyperf AOP Integration in PHP\nDESCRIPTION: Command to install the Hyperf AOP integration package using Composer.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/aop.md#2025-04-12_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require \"hyperf/aop-integration: ^1.1\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Delayed Response with Timer in PHP\nDESCRIPTION: Demonstrates how to create a delayed response using Timer::sleep() without blocking the process. Uses the coroutine functionality to handle delayed responses efficiently.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/jp/upgrade/1-5.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace app\\controller;\n\nuse support\\Request;\nuse Workerman\\Timer;\n\nclass TestController\n{\n    public function index(Request $request)\n    {\n        // 1.5秒待機\n        Timer::sleep(1.5);\n        return $request->getRemoteIp();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Event Registration in PHP\nDESCRIPTION: Example of event registration configuration in config/event.php showing how to map event names to handler methods.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/vi/components/event.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nreturn [\n    'user.register' => [\n        [app\\event\\User::class, 'register'],\n        // ...các hàm xử lý sự kiện khác...\n    ],\n    'user.logout' => [\n        [app\\event\\User::class, 'logout'],\n        // ...các hàm xử lý sự kiện khác...\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Middleware Configuration for Multi-applications\nDESCRIPTION: Explains how to configure different middleware for different applications within webman. The configuration file `config/middleware.php` defines global middleware and application-specific middleware, allowing for custom request processing for each sub-application, such as authentication or access control.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-hk/multiapp.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n\"return [\n    // 全局中间件\n    '' => [\n        support\\middleware\\AuthCheck::class,\n    ],\n    // api应用中间件\n    'api' => [\n         support\\middleware\\AccessControl::class,\n     ],\n    // admin应用中间件\n    'admin' => [\n         support\\middleware\\AdminAuthCheck::class,\n         support\\middleware\\SomeOtherClass::class,\n    ],\n];\n\"\n```\n\n----------------------------------------\n\nTITLE: Running Webman on Linux in Daemon Mode\nDESCRIPTION: Initiates Webman in daemon mode for production environments. Runs the application in the background, suitable for stable and continuous server deployment. Ensures persistent application execution.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/install.md#2025-04-12_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nphp start.php start -d\n```\n\n----------------------------------------\n\nTITLE: Accessing and Setting Session Data in Webman\nDESCRIPTION: This code snippet demonstrates how to access the session instance, set a value in the session, and retrieve it. It uses the `$request` object to access the session and demonstrates setting and getting session data. Note that the session data is automatically saved when the session object is destroyed.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/session.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\n\nclass UserController\n{\n    public function hello(Request $request)\n    {\n        $name = $request->get('name');\n        $session = $request->session();\n        $session->set('name', $name);\n        return response('hello ' . $session->get('name'));\n    }\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Configuring Webman to use ThinkPHP Template (Repeated)\nDESCRIPTION: This PHP code configures webman to use the ThinkPHP template engine. This is repeated from earlier in the document.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-hk/view.md#2025-04-12_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n\"<?php\nuse support\\view\\ThinkPHP;\n\nreturn [\n    'handler' => ThinkPHP::class\n];\n?>\"\n```\n\n----------------------------------------\n\nTITLE: Middleware Configuration\nDESCRIPTION: Configuration file showing how to register global middleware in Webman PHP.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/middleware.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    '' => [\n        app\\middleware\\AuthCheckTest::class,\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Oluşturma 404 Hatası İçin Geri Çağrı (PHP)\nDESCRIPTION: Bu kod, belirli bir uygulama eklentisi için 404 hatası durumunda çalışacak bir geri çağrı fonksiyonu oluşturur. Bu örnekte, ana sayfaya yönlendirme yapılıyor ve 'foo' eklentisi için bu geri çağrı atanıyor.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/tr/app/route.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nRoute::fallback(function(){\n    return redirect('/');\n}, 'foo');\n```\n\n----------------------------------------\n\nTITLE: Deleting Records in PHP\nDESCRIPTION: Shows how to delete records from a database table, either removing all records or applying conditions to delete specific records.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/tr/db/queries.md#2025-04-12_snippet_21\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')->delete();\nDb::table('users')->where('votes', '>', 100)->delete();\n```\n\n----------------------------------------\n\nTITLE: Entfernen von Duplikaten mit dem Query Builder in PHP\nDESCRIPTION: Diese Methode demonstriert, wie man eindeutige Werte aus einer Spalte abruft.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/de/db/queries.md#2025-04-12_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$email = Db::table('user')->select('nickname')->distinct()->get();\n```\n\n----------------------------------------\n\nTITLE: Certificate Directory Structure in Webman\nDESCRIPTION: Directory structure example showing the placement of Alipay certificates in the payment directory of the framework.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-hk/components/payment.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n├── payment\n│   ├── alipayCertPublicKey_RSA2.crt\n│   ├── alipayRootCert.crt\n│   └── appCertPublicKey_2016090900470841.crt\n```\n\n----------------------------------------\n\nTITLE: Advanced Captcha Configuration with Custom Parameters\nDESCRIPTION: Customizing captcha generation with specific length and character set\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/fr/components/captcha.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\npublic function captcha(Request $request)\n{\n    $length = 4;\n    $chars = '0123456789abcefghijklmnopqrstuvwxyz';\n    $builder = new PhraseBuilder($length, $chars);\n    $captcha = new CaptchaBuilder(null, $builder);\n    $builder->build();\n    $request->session()->set('captcha', strtolower($builder->getPhrase()));\n    $img_content = $builder->get();\n    return response($img_content, 200, ['Content-Type' => 'image/jpeg']);\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Cache Components for PHP 8.x\nDESCRIPTION: Command to install required cache components including illuminate/redis and symfony/cache for PHP 8.x\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/pt/db/cache.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\ncomposer require -W illuminate/redis symfony/cache\n```\n\n----------------------------------------\n\nTITLE: Webman Request Processing Workflow\nDESCRIPTION: Simplified request processing approach in Webman, reducing intermediary steps and significantly improving performance by minimizing overhead\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/others/performance.md#2025-04-12_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n1. 框架接收请求\n2. 框架执行业务逻辑(opcode字节码)\n3. 框架将结果返回给客户端\n```\n\n----------------------------------------\n\nTITLE: Mailer class with constructor parameters\nDESCRIPTION: This defines a Mailer class that takes smtp_host and smtp_port as constructor parameters.  This is used as an example for custom constructor injection.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-hk/di.md#2025-04-12_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n\"<?php\nnamespace app\\service;\n\nclass Mailer\n{\n    private $smtpHost;\n\n    private $smtpPort;\n\n    public function __construct($smtp_host, $smtp_port)\n    {\n        $this->smtpHost = $smtp_host;\n        $this->smtpPort = $smtp_port;\n    }\n\n    public function mail($email, $content)\n    {\n        // 發送郵件代碼省略\n    }\n}\"\n```\n\n----------------------------------------\n\nTITLE: Invio di messaggi lato server con PHP\nDESCRIPTION: Esempio di codice PHP per inviare messaggi a un canale specifico utilizzando l'API di webman/push\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/plugin/push.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Webman\\Push\\Api;\n$api = new Api(\n    // in Webman puoi ottenere direttamente le configurazioni tramite config, in un ambiente non Webman è necessario inserire manualmente le configurazioni corrispondenti\n    'http://127.0.0.1:3232',\n    config('plugin.webman.push.app.app_key'),\n    config('plugin.webman.push.app.app_secret')\n);\n// Invia un messaggio con evento message a tutti i client abbonati a user-1\n$api->trigger('user-1', 'message', [\n    'from_uid' => 2,\n    'content'  => 'Ciao, questo è il contenuto del messaggio'\n]);\n```\n\n----------------------------------------\n\nTITLE: Logging Example in Webman Controller\nDESCRIPTION: This code snippet demonstrates how to use the `Log` facade in a Webman controller to write an info message to the logs. It uses the `support\\Log` class and the `Log::info()` method. The `Request` class is also imported for controller use, although it is not directly related to the logging function.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/th/log.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\nuse support\\Log;\n\nclass FooController\n{\n    public function index(Request $request)\n    {\n        Log::info('ทดสอบบันทึก');\n        return response('สวัสดี ดัชนี');\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Setting Cookies in PHP Response\nDESCRIPTION: This example demonstrates how to set cookies in a response using the cookie() method.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/response.md#2025-04-12_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\n\nclass FooController\n{\n    public function hello(Request $request)\n    {\n        return response('hello webman')\n        ->cookie('foo', 'value');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Login View\nDESCRIPTION: This HTML code creates a basic login form with a captcha image and input field. The form submits to the `/login/check` route, which is handled by the `check` method in the `LoginController`.  The captcha image source is set to `/login/captcha`, which is handled by the `captcha` method in the `LoginController`.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/es/components/captcha.md#2025-04-12_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!doctype html>\n<html>\n<head>\n    <meta charset=\"utf-8\">\n    <title>Prueba de Verificación</title>  \n</head>\n<body>\n    <form method=\"post\" action=\"/login/check\">\n       <img src=\"/login/captcha\" /><br>\n        <input type=\"text\" name=\"captcha\" />\n        <input type=\"submit\" value=\"Enviar\" />\n    </form>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Cycle de vie des variables temporaires dans un contrôleur Webman\nDESCRIPTION: Exemple montrant comment les variables et instances créées dans une méthode de contrôleur sont automatiquement libérées à la fin de l'exécution de la méthode, suivant le mécanisme standard de PHP.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/fr/others/lifecycle.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace app\\controller;\n\nuse app\\service\\Foo;\nuse support\\Request;\n\nclass IndexController\n{\n    public function index(Request $request)\n    {\n        $foo = new Foo(); // Supposons qu'il y ait une classe Foo ici\n        return response($foo->sayHello());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Database Query Using ThinkORM in PHP\nDESCRIPTION: Example of using ThinkORM to perform a database query in a Webman controller. This snippet demonstrates how to retrieve a user record from the database.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/de/db/thinkorm.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\nuse think\\facade\\Db;\n\nclass FooController\n{\n    public function get(Request $request)\n    {\n        $user = Db::table('user')->where('uid', '>', 1)->find();\n        return json($user);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Framework-Level File Autoloading Configuration\nDESCRIPTION: Configure custom file loading in config/autoload.php, allowing priority loading of project-specific files\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/others/autoload.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'files' => [\n        base_path() . '/app/functions.php',\n        base_path() . '/support/Request.php', \n        base_path() . '/support/Response.php',\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Server-Side Push Notification (PHP)\nDESCRIPTION: This snippet demonstrates how to use the Webman Push API to trigger a message event to all clients subscribed to a specific user channel.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/plugin/push.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Webman\\Push\\Api;\n$api = new Api(\n    // webman下可以直接使用config获取配置，非webman环境需要手动写入相应配置\n    'http://127.0.0.1:3232',\n    config('plugin.webman.push.app.app_key'),\n    config('plugin.webman.push.app.app_secret')\n);\n// 给订阅 user-1 的所有客户端推送 message 事件的消息\n$api->trigger('user-1', 'message', [\n    'from_uid' => 2,\n    'content'  => '你好，这个是消息内容'\n]);\n```\n\n----------------------------------------\n\nTITLE: Configuring Route for /json Endpoint\nDESCRIPTION: This PHP code configures a route for the /json endpoint that maps to the IndexController's json() method. This route is used to test the AOP implementation by accessing the controller action.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/aop.md#2025-04-12_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n\"<?php\\nuse Webman\\Route;\\n\\nRoute::any('/json', [app\\\\controller\\\\IndexController::class, 'json']);\"\n```\n\n----------------------------------------\n\nTITLE: Handling Wildcard Events in PHP\nDESCRIPTION: Example of an event handling function that can process multiple events using the wildcard subscription, showing how to access the specific event name.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/components/event.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\event;\nclass User\n{\n    function deal($user, $event_name)\n    {\n        echo $event_name; // specific event name, such as user.register, user.logout, etc.\n        var_export($user);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Context Data in PHP\nDESCRIPTION: The `Context::delete()` method removes data associated with a given name from the request context. This allows for selective clearing of context data during the request lifecycle. It accepts a string as the name of the data to delete.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/coroutine/context.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nContext::delete(string $name);\n```\n\n----------------------------------------\n\nTITLE: Using ThinkCache in a Webman PHP Controller\nDESCRIPTION: Example of how to use ThinkCache in a Webman PHP controller. It demonstrates setting and getting a cache value using a random number.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/jp/db/thinkcache.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\nuse think\\facade\\Cache;\n\nclass UserController\n{\n    public function db(Request $request)\n    {\n        $key = 'test_key';\n        Cache::set($key, rand());\n        return response(Cache::get($key));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Restarting Webman after Major Changes\nDESCRIPTION: Command to restart Webman after changing process-related configurations or installing new Composer packages. This ensures all changes take effect.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/tr/attention.md#2025-04-12_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nphp start.php restart\n```\n\n----------------------------------------\n\nTITLE: Disabling Auto-Incrementing Primary Key in Eloquent in PHP\nDESCRIPTION: This snippet illustrates how to disable the assumption that the primary key is auto-incrementing in an Eloquent model. Setting `$incrementing` to `false` is necessary when the primary key is not an integer or does not auto-increment.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/es/db/model.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass User extends Model\n{\n    /**\n     * Indica si la clave primaria del modelo es incremental\n     * @var bool\n     */\n    public $incrementing = false;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Performing a Redirect in Webman PHP\nDESCRIPTION: Demonstrates how to perform a redirect using the `redirect()` helper function.  This function sends a redirect response to the client.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/pt/response.md#2025-04-12_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\n\nclass FooController\n{\n    public function hello(Request $request)\n    {\n        return redirect('/user');\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Exception Handler\nDESCRIPTION: PHP configuration file that specifies the custom exception handler class to be used.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/others/custom-error-page.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    '' => \\app\\exception\\Handler::class,\n];\n```\n\n----------------------------------------\n\nTITLE: Handling Alipay Asynchronous Callback in PHP\nDESCRIPTION: Code to handle asynchronous callbacks from Alipay, including validation and response.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/de/components/payment.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse support\\Request;\nuse Webman\\Config;\nuse Yansongda\\Pay\\Pay;\n\n/**\n * @desc: 『Alipay』Asynchroner Rückruf\n * @param Request $request\n * @return Response\n */\npublic function alipayNotify(Request $request): Response\n{\n    // 1. Holen Sie sich die Konfigurationsdatei config/payment.php\n    $config = Config::get('payment');\n\n    // 2. Konfiguration initialisieren\n    Pay::config($config);\n\n    // 3. Alipay-Rückrufverarbeitung\n    $result = Pay::alipay()->callback($request->post());\n\n    // ===================================================================================================\n    // Bitte überprüfen Sie selbst den trade_status und führen Sie weitere Logikprüfungen durch. Alipay erkennt eine erfolgreich abgeschlossene Zahlung erst, wenn der Transaktionsbenachrichtigungsstatus auf TRADE_SUCCESS oder TRADE_FINISHED gesetzt ist.\n    // 1. Der Händler muss prüfen, ob die out_trade_no in den Benachrichtigungsdaten die Bestellnummer ist, die im Händlersystem erstellt wurde;\n    // 2. Überprüfen Sie, ob total_amount tatsächlich der tatsächliche Betrag der Bestellung ist (d. h. der beim Händler erstellte Betrag);\n    // 3. Überprüfen Sie, ob seller_id (oder seller_email) in der Benachrichtigung für die betreffende Transaktion die zugehörige Partei ist;\n    // 4. Überprüfen Sie, ob app_id dem Händler selbst gehört.\n    // 5. weitere geschäftliche Logik\n    // ===================================================================================================\n\n    // 5. Alipay-Rückrufverarbeitung\n    return new Response(200, [], 'Erfolg');\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Low-Privilege Run User in WebMan\nDESCRIPTION: Configuration for setting a low-privilege user for WebMan application processes in server configuration files\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/others/security.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// config/server.php\n'user' => 'low_privilege_user',\n'group' => 'low_privilege_group'\n```\n\nLANGUAGE: php\nCODE:\n```\n// config/process.php\n'user' => 'custom_process_user',\n'group' => 'custom_process_group'\n```\n\n----------------------------------------\n\nTITLE: PSR-4 Namespace Example\nDESCRIPTION: This example shows how to define a PSR-4 compliant namespace for a controller within a specific application directory. It's located in `app/api/controller/FooController.php`.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/es/multiapp.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\api\\controller;\n\nuse support\\Request;\n\nclass FooController\n{\n    \n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Exception Handler in Webman PHP\nDESCRIPTION: Configuration file for setting up the exception handling class in Webman PHP framework.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/exception.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    // Configure the exception handling class here\n    '' => support\\exception\\Handler::class,\n];\n```\n\n----------------------------------------\n\nTITLE: Flow Control Structure Example\nDESCRIPTION: Example showing proper formatting for flow control statements with correct spacing and brace placement.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/app/standard.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nforeach ($users as $uid => $user) {\n\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Webman Framework 1.4 via Composer\nDESCRIPTION: Command to upgrade Webman framework and console components to version 1.4\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/upgrade/1-4.md#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require workerman/webman-framework ^1.4.7 && composer require webman/console ^1.2.12 && php webman install\n```\n\n----------------------------------------\n\nTITLE: Initializing AOP ClassLoader\nDESCRIPTION: Entry point configuration for AOP initialization in start.php\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/pt/aop.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Hyperf\\AopIntegration\\ClassLoader;\n\nif ($timezone = config('app.default_timezone')) {\n    date_default_timezone_set($timezone);\n}\n\n// Inicialização\nClassLoader::init();\n```\n\n----------------------------------------\n\nTITLE: Defining String Values for Injection\nDESCRIPTION: This configuration snippet defines string values (smtp_host and smtp_port) that can be injected into classes using annotations.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-hk/di.md#2025-04-12_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n\"<?php\nreturn [\n    'smtp_host' => '192.168.1.11',\n    'smtp_port' => 25\n];\"\n```\n\n----------------------------------------\n\nTITLE: Model Definition with Table, Primary Key, and Timestamp Configuration in PHP\nDESCRIPTION: This code defines a basic Eloquent model in PHP, specifying the associated database table, overriding the default primary key name, and disabling automatic timestamp management. It extends the `support\\Model` class and configures properties like `$table`, `$primaryKey`, and `$timestamps`.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/es/db/model.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\model;\n\nuse support\\Model;\n\nclass User extends Model\n{\n    /**\n     * Nombre de la tabla asociada al modelo\n     *  @var string\n     */\n    protected $table = 'user';\n\n    /**\n     * Redefine la clave primaria, que por defecto es id\n     * @var string\n     */\n    protected $primaryKey = 'uid';\n\n    /**\n     * Indica si se mantiene automáticamente la marca de tiempo\n     * @var bool\n     */\n    public $timestamps = false;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Rendering Pagination with Jason Grimes Paginator in PHP\nDESCRIPTION: This snippet shows how to use the Jason Grimes Paginator to render pagination in a Webman PHP controller. It includes the creation of a paginator instance and passing it to the view.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/jp/db/paginator.md#2025-04-12_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse JasonGrimes\\Paginator;\nuse support\\Request;\nuse support\\Db;\n\nclass UserController\n{\n    public function get(Request $request)\n    {\n        $per_page = 10;\n        $current_page = $request->input('page', 1);\n        $users = Db::table('user')->paginate($per_page, '*', 'page', $current_page);\n        $paginator = new Paginator($users->total(), $per_page, $current_page, '/user/get?page=(:num)');\n        return view('user/get', ['users' => $users, 'paginator'  => $paginator]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: ติดตั้ง Redis และ Symfony Cache (PHP 8.x)\nDESCRIPTION: คำสั่ง Composer นี้ติดตั้ง illuminate/redis และ symfony/cache สำหรับ PHP 8.x ใช้เพื่อเชื่อมต่อกับ Redis และใช้ฟังก์ชันแคช\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/th/db/cache.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\ncomposer require -W illuminate/redis symfony/cache\n```\n\n----------------------------------------\n\nTITLE: Configuring php-di in webman\nDESCRIPTION: This configuration file initializes the php-di container, adds definitions from the `dependence` configuration, enables autowiring and annotation support, and builds the container.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-hk/di.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n\"<?php\n$builder = new \\DI\\ContainerBuilder();\n$builder->addDefinitions(config('dependence', []));\n$builder->useAutowiring(true);\n$builder->useAnnotations(true);\nreturn $builder->build();\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Configuration - All Settings\nDESCRIPTION: Retrieves all configuration settings using the config() function without parameters.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/config.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nconfig();\n```\n\n----------------------------------------\n\nTITLE: Using Redis Connection Instance in Webman\nDESCRIPTION: Alternative syntax for using Redis with an explicit connection instance rather than the static facade.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/db/redis.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$redis = Redis::connection('default');\n$redis->append($key, $value)\n$redis->bitCount($key)\n$redis->decr($key, $value)\n$redis->decrBy($key, $value)\n$redis->get($key)\n$redis->getBit($key, $offset)\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring Event Settings in PHP\nDESCRIPTION: Initial configuration file for event management in Webman, defining listener and subscriber settings\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/th/event.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'listener'    => [],\n    'subscriber' => [],\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring AOP Settings\nDESCRIPTION: Configuration file setup for AOP including scan paths, annotations to ignore, and aspect collectors\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/pt/aop.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Hyperf\\Di\\Annotation\\AspectCollector;\n\nreturn [\n    'annotations' => [\n        'scan' => [\n            'paths' => [\n                BASE_PATH . '/app',\n            ],\n            'ignore_annotations' => [\n                'mixin',\n            ],\n            'class_map' => [\n            ],\n            'collectors' => [\n                AspectCollector::class\n            ],\n        ],\n    ],\n    'aspects' => [\n        // Aqui você deve adicionar o Aspect correspondente\n        app\\aspect\\DebugAspect::class,\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Installing php-di and Required Dependencies\nDESCRIPTION: This bash command installs the necessary packages for implementing dependency injection in Webman using php-di.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/tr/di.md#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require psr/container ^1.1.1 php-di/php-di ^6 doctrine/annotations ^1.14\n```\n\n----------------------------------------\n\nTITLE: Making HTTP Requests with Workerman HTTP Client\nDESCRIPTION: Shows how to make non-blocking HTTP requests using Workerman HTTP Client. Requires workerman/http-client ^2.0.0 package.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/jp/upgrade/1-5.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace app\\controller;\n\nuse support\\Request;\nuse Workerman\\Http\\Client;\n\nclass TestController\n{\n    public function index(Request $request)\n    {\n        static $client;\n        $client = $client ?: new Client();\n        $response = $client->get('http://example.com');\n        return $response->getBody()->getContents();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Route for AOP Test in PHP\nDESCRIPTION: Route configuration to map the /json URL to the IndexController's json method.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/aop.md#2025-04-12_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Webman\\Route;\n\nRoute::any('/json', [app\\controller\\IndexController::class, 'json']);\n```\n\n----------------------------------------\n\nTITLE: Synchronous Message Publishing to Redis Queue in Webman PHP\nDESCRIPTION: Example of synchronously publishing messages to a Redis queue using the Redis::send() method in a controller.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/queue/redis.md#2025-04-12_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\nuse Webman\\RedisQueue\\Redis;\n\nclass Index\n{\n    public function queue(Request $request)\n    {\n        // Queue name\n        $queue = 'send-mail';\n        // Data, can be an array, no need for serialization\n        $data = ['to' => 'tom@gmail.com', 'content' => 'hello'];\n        // Publish message\n        Redis::send($queue, $data);\n        // Publish delayed message, will be processed after 60 seconds\n        Redis::send($queue, $data, 60);\n\n        return response('redis queue test');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Example User Controller (Native PHP)\nDESCRIPTION: This PHP code defines a simple controller with a `hello` action that renders a view named `user/hello` and passes the variable 'name' with the value 'webman'. This example uses the native PHP template engine.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-hk/view.md#2025-04-12_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n\"<?php\nnamespace app\\controller;\n\nuse support\\Request;\n\nclass UserController\n{\n    public function hello(Request $request)\n    {\n        return view('user/hello', ['name' => 'webman']);\n    }\n}\n?>\"\n```\n\n----------------------------------------\n\nTITLE: XML Helper Function Implementation in PHP\nDESCRIPTION: Shows how the `xml()` helper function is implemented. It handles both XML strings and `SimpleXMLElement` objects, converting them to strings and setting the correct content type.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/pt/response.md#2025-04-12_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nfunction xml($xml)\n{\n    if ($xml instanceof SimpleXMLElement) {\n        $xml = $xml->asXML();\n    }\n    return new Response(200, ['Content-Type' => 'text/xml'], $xml);\n}\n\n```\n\n----------------------------------------\n\nTITLE: Making Non-blocking HTTP Requests in PHP with Webman\nDESCRIPTION: This example shows how to use the Workerman HTTP Client to make non-blocking HTTP requests in a Webman controller, improving performance for external API calls.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/upgrade/1-5.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace app\\controller;\n\nuse support\\Request;\nuse Workerman\\Http\\Client;\n\nclass TestController\n{\n    public function index(Request $request)\n    {\n        static $client;\n        $client = $client ?: new Client();\n        $response = $client->get('http://example.com'); // Synchronous method for asynchronous request\n        return $response->getBody()->getContents();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Route Configuration for Middleware Accessing Route Information in PHP\nDESCRIPTION: This code demonstrates a route configuration with a parameter `/user/{uid}`. This parameter can be accessed in middleware.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/middleware.md#2025-04-12_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse support\\Request;\nuse Webman\\Route;\n\nRoute::any('/user/{uid}', [app\\controller\\UserController::class, 'view']);\n```\n\n----------------------------------------\n\nTITLE: Conditional Execution based on Process Name\nDESCRIPTION: This code shows how to conditionally execute code based on the process name.  The example prevents the timer from executing in the 'monitor' process by checking `$worker->name`.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/others/bootstrap.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace app\\bootstrap;\n\nuse Webman\\Bootstrap;\n\nclass MemReport implements Bootstrap\n{\n    public static function start($worker)\n    {\n        // Is it a command line environment?\n        $is_console = !$worker;\n        if ($is_console) {\n            // If you don't want this initialization to be executed in the command line environment, return directly here.\n            return;\n        }\n        \n        // Do not execute the timer in the monitor process.\n        if ($worker->name == 'monitor') {\n            return;\n        }\n        \n        // Execute every 10 seconds\n        \\Workerman\\Timer::add(10, function () {\n            // For the sake of demonstration, we use output instead of reporting process.\n            echo memory_get_usage() . \"\\n\";\n        });\n        \n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Mass Assignment Configuration\nDESCRIPTION: Shows how to configure mass assignment protection using fillable and guarded properties.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/db/model.md#2025-04-12_snippet_23\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace app\\model;\n\nuse support\\Model;\n\nclass Flight extends Model\n{\n    /**\n     * Attributi che possono essere assegnati in massa.\n     *\n     * @var array\n     */\n    protected $fillable = ['name'];\n}\n```\n\n----------------------------------------\n\nTITLE: Old Session Handler Namespace\nDESCRIPTION: This shows the old namespace for session handlers that has changed in v1.4.0. This namespace is deprecated.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/upgrade/1-4.md#2025-04-12_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n```php\nuse Webman\\FileSessionHandler;  \nuse Webman\\RedisSessionHandler;  \nuse Webman\\RedisClusterSessionHandler;  \n```\n```\n\n----------------------------------------\n\nTITLE: Referencing Plugin Version in Webman PHP Configuration\nDESCRIPTION: The version number specified during the publishing process should match the version defined in the plugin's configuration file.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/app/publish.md#2025-04-12_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`plugin/{plugin}/config/app.php`\n```\n\n----------------------------------------\n\nTITLE: Configuring Middleware for Multiple Applications in Webman\nDESCRIPTION: This code snippet shows how to configure different middleware for different applications in a Webman project within the `config/middleware.php` file. The global middleware is applied first, followed by specific middleware for applications like api and admin.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/multiapp.md#2025-04-12_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nreturn [\n    // Global middleware\n    '' => [\n        support\\middleware\\AuthCheck::class,\n    ],\n    // Middleware for the api application\n    'api' => [\n         support\\middleware\\AccessControl::class,\n     ],\n    // Middleware for the admin application\n    'admin' => [\n         support\\middleware\\AdminAuthCheck::class,\n         support\\middleware\\SomeOtherClass::class,\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Solución: Usar Context para almacenar datos de la solicitud\nDESCRIPTION: Este snippet demuestra la solución para evitar la contaminación de variables globales en un entorno de corutinas utilizando la clase `support\\Context`.  `Context::set()` se utiliza para almacenar los datos de la solicitud, y `Context::get()` para recuperarlos.  Los datos en `Context` se eliminan automáticamente al finalizar la solicitud.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/es/upgrade/1-5.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n\"<?php\\n\\nnamespace app\\controller;\\n\\nuse support\\Request;\\nuse support\\Context;\\nuse Workerman\\Timer;\\n\\nclass TestController\\n{\\n    public function index(Request $request)\\n    {\\n        Context::set('name', $request->get('name'));\\n        Timer::sleep(5);\\n        return Context::get('name');\\n    }\\n}\\n\"\n```\n\n----------------------------------------\n\nTITLE: Configuring AOP Settings in PHP\nDESCRIPTION: PHP configuration file setup for AOP, including scan paths, ignored annotations, and aspect definitions.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/tr/aop.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Hyperf\\Di\\Annotation\\AspectCollector;\n\nreturn [\n    'annotations' => [\n        'scan' => [\n            'paths' => [\n                BASE_PATH . '/app',\n            ],\n            'ignore_annotations' => [\n                'mixin',\n            ],\n            'class_map' => [\n            ],\n            'collectors' => [\n                AspectCollector::class\n            ],\n        ],\n    ],\n    'aspects' => [\n        // Buraya ilgili Aspect yazın\n        app\\aspect\\DebugAspect::class,\n    ]\n];\n\n```\n\n----------------------------------------\n\nTITLE: Configuring ThinkPHP Template Engine in PHP\nDESCRIPTION: This example shows the configuration for using the ThinkPHP template engine in Webman, including handler class and additional options like view suffix and template delimiters.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/de/view.md#2025-04-12_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse support\\view\\ThinkPHP;\n\nreturn [\n    'handler' => ThinkPHP::class,\n    'options' => [\n        'view_suffix' => 'html',\n        'tpl_begin' => '{',\n        'tpl_end' => '}'\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Eloquent Model in PHP\nDESCRIPTION: Creates a User model extending the base Model class, specifying table name, primary key, and disabling timestamps.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/db/model.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\model;\n\nuse support\\Model;\n\nclass User extends Model\n{\n    protected $table = 'user';\n    protected $primaryKey = 'uid';\n    public $timestamps = false;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom HTTP Server Process in PHP for Webman\nDESCRIPTION: This configuration snippet shows how to set up a custom HTTP server process in Webman's config/process.php file. It specifies the handler, listening address, process count, and other settings.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/tr/process.md#2025-04-12_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nuse Workerman\\Worker;\n\nreturn [\n    // ... Other configurations are omitted here...\n\n    'my-http' => [\n        'handler' => app\\Server::class,\n        'listen' => 'http://0.0.0.0:8686',\n        'count' => 8, // Number of processes\n        'user' => '',\n        'group' => '',\n        'reusePort' => true,\n        'constructor' => [\n            'request_class' => \\support\\Request::class, // Request class setting\n            'logger' => \\support\\Log::channel('default'), // Log instance\n            'app_path' => app_path(), // app directory location\n            'public_path' => public_path() // public directory location\n        ]\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Creating HTML Template for Captcha Test Page\nDESCRIPTION: HTML template for a simple login form that includes a captcha image and input field. This template is used to render the test page for the captcha functionality.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/components/captcha.md#2025-04-12_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!doctype html>\n<html>\n<head>\n    <meta charset=\"utf-8\">\n    <title>Captcha Test</title>  \n</head>\n<body>\n    <form method=\"post\" action=\"/login/check\">\n       <img src=\"/login/captcha\" /><br>\n        <input type=\"text\" name=\"captcha\" />\n        <input type=\"submit\" value=\"Submit\" />\n    </form>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Updating webman framework and console\nDESCRIPTION: This command updates the webman framework and console packages using composer. It also runs the webman installer after the update.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/upgrade/1-4.md#2025-04-12_snippet_0\n\nLANGUAGE: Plain Text\nCODE:\n```\n`composer require workerman/webman-framework ^1.4.7 && composer require webman/console ^1.2.12 && php webman install`\n```\n\n----------------------------------------\n\nTITLE: Ordering by Subquery in Eloquent\nDESCRIPTION: Shows how to order results based on a subquery in Eloquent models.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/tr/db/model.md#2025-04-12_snippet_15\n\nLANGUAGE: PHP\nCODE:\n```\nreturn Destination::orderByDesc(\n    Flight::select('arrived_at')\n        ->whereColumn('destination_id', 'destinations.id')\n        ->orderBy('arrived_at', 'desc')\n        ->limit(1)\n)->get();\n```\n\n----------------------------------------\n\nTITLE: Using Redis in webman-php Controller\nDESCRIPTION: Example of using Redis within a webman-php controller to set and get a value.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/de/db/redis.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\nuse support\\Redis;\n\nclass UserController\n{\n    public function db(Request $request)\n    {\n        $key = 'test_key';\n        Redis::set($key, rand());\n        return response(Redis::get($key));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing workerman/crontab via Composer\nDESCRIPTION: Command to install the workerman/crontab package using Composer.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/jp/components/crontab.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ncomposer require workerman/crontab\n```\n\n----------------------------------------\n\nTITLE: Get Server Port Address in webman-php\nDESCRIPTION: This snippet shows how to retrieve the server's port number using `$request->getLocalPort()` in webman-php. This is useful for identifying the port the server is listening on for the current request.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/pt/request.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$request->getLocalPort();\n```\n\n----------------------------------------\n\nTITLE: Retrieving Configuration - Specific Setting\nDESCRIPTION: Retrieves a specific configuration setting, such as the debug value from config/app.php.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/config.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nconfig('app.debug');\n```\n\n----------------------------------------\n\nTITLE: Delayed Response with Timer Sleep\nDESCRIPTION: Demonstrates the usage of Timer::sleep() for non-blocking sleep in a controller method, showing how coroutines can handle delayed responses without blocking the process\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-hk/upgrade/1-5.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace app\\controller;\n\nuse support\\Request;\nuse Workerman\\Timer;\n\nclass TestController\n{\n    public function index(Request $request)\n    {\n        // Sleep for 1.5 seconds\n        Timer::sleep(1.5);\n        return $request->getRemoteIp();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Public Path for Phar Package\nDESCRIPTION: Configuration in app.php to set the public directory path for a phar package\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/others/phar.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n'public_path' => base_path(false) . DIRECTORY_SEPARATOR . 'public',\n```\n\n----------------------------------------\n\nTITLE: Setting Headers in PHP Response\nDESCRIPTION: This snippet shows different ways to set headers in a response, including using the response() function and the header() and withHeaders() methods.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/response.md#2025-04-12_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\n\nclass FooController\n{\n    public function hello(Request $request)\n    {\n        return response('hello webman', 200, [\n            'Content-Type' => 'application/json',\n            'X-Header-One' => 'Header Value' \n        ]);\n    }\n}\n```\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\n\nclass FooController\n{\n    public function hello(Request $request)\n    {\n        return response('hello webman')\n        ->header('Content-Type', 'application/json')\n        ->withHeaders([\n            'X-Header-One' => 'Header Value 1',\n            'X-Header-Tow' => 'Header Value 2',\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Get Remote IP Address - Webman PHP\nDESCRIPTION: Retrieves the client's IP address.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/th/request.md#2025-04-12_snippet_33\n\nLANGUAGE: php\nCODE:\n```\n$request->getRemoteIp();\n```\n\n----------------------------------------\n\nTITLE: Basic ThinkCache Usage in Controller\nDESCRIPTION: Example of using ThinkCache in a Webman controller to set and get cached values. Shows basic cache operations using the Cache facade.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/db/thinkcache.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n  \nuse support\\Request;\nuse think\\facade\\Cache;\n\nclass UserController\n{\n    public function db(Request $request)\n    {\n        $key = 'test_key';\n        Cache::set($key, rand());\n        return response(Cache::get($key));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Model Instances in Eloquent ORM\nDESCRIPTION: Demonstrates how to delete a model instance by calling the delete method on the model object. This requires first retrieving the model instance you want to delete.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/db/model.md#2025-04-12_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$flight = app\\modle\\Flight::find(1);\n$flight->delete();\n```\n\n----------------------------------------\n\nTITLE: Installation der Fehlercode-Komponente mit Composer in PHP\nDESCRIPTION: Dieser Befehl installiert die 'teamones/response-code-msg' Komponente über Composer, die für die automatische Fehlercode-Generierung verwendet wird.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/de/components/generate_error_code.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ncomposer require teamones/response-code-msg\n```\n\n----------------------------------------\n\nTITLE: Advanced Captcha Configuration in PHP\nDESCRIPTION: Extended captcha generation with custom length and character set, demonstrating more advanced configuration options\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/components/captcha.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\npublic function captcha(Request $request)\n{\n    $length = 4;\n    $chars = '0123456789abcefghijklmnopqrstuvwxyz';\n    $builder = new PhraseBuilder($length, $chars);\n    $captcha = new CaptchaBuilder(null, $builder);\n    $builder->build();\n    $request->session()->set('captcha', strtolower($builder->getPhrase()));\n    $img_content = $builder->get();\n    return response($img_content, 200, ['Content-Type' => 'image\\/jpeg']);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Manipulating Response Object in PHP\nDESCRIPTION: This example shows how to create an empty response object and manipulate it by setting cookies, headers, and body content before returning it.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/response.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\npublic function hello(Request $request)\n{\n    // 創建一個對象\n    $response = response();\n    \n    // .... 業務邏輯省略\n    \n    // 設置 cookie\n    $response->cookie('foo', 'value');\n    \n    // .... 業務邏輯省略\n    \n    // 設置 http 頭\n    $response->header('Content-Type', 'application/json');\n    $response->withHeaders([\n                'X-Header-One' => 'Header Value 1',\n                'X-Header-Tow' => 'Header Value 2',\n            ]);\n\n    // .... 業務邏輯省略\n\n    // 設置要返回的資料\n    $response->withBody('返回的數據');\n    return $response;\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Session Data in Webman PHP\nDESCRIPTION: Demonstrates how to delete one or more session items using forget() and delete() methods.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/session.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$session = $request->session();\n// Delete one item\n$session->forget('nome');\n// Delete multiple items\n$session->forget(['nome', 'età']);\n\n// Using delete method\n$session->delete('nome');\n```\n\n----------------------------------------\n\nTITLE: Basic Language File Structure Example\nDESCRIPTION: Example of translation file directory structure showing language organization\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/de/components/translation.md#2025-04-12_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nresource/\n└── translations\n    ├── en\n    │   └── messages.php\n    └── zh_CN\n        └── messages.php\n```\n\n----------------------------------------\n\nTITLE: Installing Cache Components for PHP 7.x\nDESCRIPTION: Command to install required cache components including illuminate/redis and symfony/cache for PHP 7.x\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/pt/db/cache.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ncomposer require -W illuminate/redis ^8.2.0 symfony/cache ^5.2\n```\n\n----------------------------------------\n\nTITLE: Basic Translation Usage in a Controller\nDESCRIPTION: Example of using the trans() function in a controller to translate text based on the current language settings.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/components/translation.md#2025-04-12_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\n\nclass UserController\n{\n    public function get(Request $request)\n    {\n        $hello = trans('hello'); // Привет, мир!\n        return response($hello);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Message Delivery to Redis Queue in Webman PHP\nDESCRIPTION: Example of asynchronous message delivery to a Redis queue using the Client::send method. Suitable for non-critical messages with high throughput requirements.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/fr/queue/redis.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\nuse Webman\\RedisQueue\\Client;\n\nclass Index\n{\n    public function queue(Request $request)\n    {\n        // Nom de la file d'attente\n        $queue = 'send-mail';\n        // Données, peuvent être transmises directement en tant qu'array, pas besoin de sérialisation\n        $data = ['to' => 'tom@gmail.com', 'content' => 'hello'];\n        // Livraison du message\n        Client::send($queue, $data);\n        // Livraison d'un message différé, le message sera traité après 60 secondes\n        Client::send($queue, $data, 60);\n\n        return response('test de file d\\'attente Redis');\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Running PHPUnit Tests in Webman Project\nDESCRIPTION: Command to execute PHPUnit tests with bootstrap configuration, specifying the test file and using vendor PHPUnit executable\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/fr/components/unitest.md#2025-04-12_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n.\\/vendor\\/bin\\/phpunit --bootstrap support\\/bootstrap.php tests\\/TestConfig.php\n```\n\n----------------------------------------\n\nTITLE: Creating a PHPUnit Test Case\nDESCRIPTION: Creates a test case `TestConfig.php` to test the application configuration.  It asserts that the 'app' configuration exists, is an array, contains the 'debug' key with a boolean value, and the 'default_timezone' key with a string value. This verifies that essential app settings are properly loaded.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/th/components/unitest.md#2025-04-12_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n\"<?php\nuse PHPUnit\\Framework\\TestCase;\n\nclass TestConfig extends TestCase\n{\n    public function testAppConfig()\n    {\n        $config = config('app');\n        self::assertIsArray($config);\n        self::assertArrayHasKey('debug', $config);\n        self::assertIsBool($config['debug']);\n        self::assertArrayHasKey('default_timezone', $config);\n        self::assertIsString($config['default_timezone']);\n    }\n}\n\"\n```\n\n----------------------------------------\n\nTITLE: Get All Request Data - Webman PHP\nDESCRIPTION: Retrieves all request data, including both POST and GET parameters.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/th/request.md#2025-04-12_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n$request->all();\n```\n\n----------------------------------------\n\nTITLE: Displaying Pagination in ThinkPHP Template\nDESCRIPTION: This HTML code demonstrates how to display the pagination links in a ThinkPHP template. The `{$users|raw}` syntax outputs the pagination object which contains the HTML for pagination links. The `raw` filter is used to prevent escaping HTML content.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/fr/db/paginator.md#2025-04-12_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<html>\n<head>\n    <!-- Built-in support for Bootstrap pagination styles -->\n    <link rel=\"stylesheet\" href=\"//maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css\">\n</head>\n<body>\n\n{$users|raw}\n\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Deferred Response with Timer Sleep in Webman PHP\nDESCRIPTION: This code demonstrates how to create a deferred response in a webman application using `Workerman\\Timer::sleep()`. This function allows the application to pause execution without blocking the entire process, useful for simulating long-running tasks.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/fr/coroutine/fiber.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace app\\controller;\n\nuse support\\Request;\nuse Workerman\\Timer;\n\nclass TestController\n{\n    public function index(Request $request)\n    {\n        // Dormir pendant 1,5 seconde\n        Timer::sleep(1.5);\n        return $request->getRemoteIp();\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Bootstrap Configuration in Webman\nDESCRIPTION: Configures the MemReport bootstrap class in the main bootstrap configuration file to enable process initialization\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-hk/others/bootstrap.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    // Other configurations omitted\n    \n    app\\bootstrap\\MemReport::class,\n];\n```\n\n----------------------------------------\n\nTITLE: Displaying Pagination in ThinkPHP Template\nDESCRIPTION: This HTML template demonstrates how to display the pagination component using ThinkPHP template engine. It includes Bootstrap CSS for styling and uses PHP short echo tags.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/components/paginator.md#2025-04-12_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<html>\n<head>\n    <!-- Built-in support for Bootstrap pagination styles -->\n    <link rel=\"stylesheet\" href=\"//maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css\">\n</head>\n<body>\n\n<?=$paginator?>\n\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Controller Without Suffix Pattern in WebMan PHP\nDESCRIPTION: Demonstrates controller implementation without the Controller suffix when controller_suffix is empty.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/controller.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\n\nclass Foo\n{\n    public function index(Request $request)\n    {\n        return response('hello index');\n    }\n    \n    public function hello(Request $request)\n    {\n        return response('hello webman');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Class Route Definition in Webman PHP\nDESCRIPTION: Example of defining a route that maps to a controller class method\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/route.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nRoute::any('/testclass', [app\\controller\\IndexController::class, 'test']);\n```\n\n----------------------------------------\n\nTITLE: Configuring Interface Injection\nDESCRIPTION: This PHP code snippet shows how to configure interface injection in the config/dependence.php file, binding an interface to its implementation.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/tr/di.md#2025-04-12_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse Psr\\Container\\ContainerInterface;\nreturn [\n    app\\service\\MailerInterface::class => function(ContainerInterface $container) {\n        return $container->make(app\\service\\Mailer::class, ['smtp_host' => '192.168.1.11', 'smtp_port' => 25]);\n    }\n];\n```\n\n----------------------------------------\n\nTITLE: エラーコード生成の設定ファイル定義 (PHP)\nDESCRIPTION: エラーコード生成のためのパラメータを設定するファイルです。システム識別子やエラーコードの範囲などを指定します。\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/jp/components/generate_error_code.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nreturn [\n    \"class\" => new \\support\\ErrorCode(), // ErrorCode クラスファイル\n    \"root_path\" => app_path(), // 現在のコードのルートディレクトリ\n    \"system_number\" => 201, // システム識別子\n    \"start_min_number\" => 10000 // エラーコード生成範囲 たとえば10000-99999\n];\n```\n\n----------------------------------------\n\nTITLE: Implementing Controller Middleware (PHP)\nDESCRIPTION: This PHP code demonstrates how to apply middleware to a controller in Webman. Middleware classes are specified in the `$middleware` property of the controller. These middleware classes will be executed before the controller's action method.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/upgrade/1-6.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\nuse app\\middleware\\MiddlewareA;\nuse app\\middleware\\MiddlewareB;\nuse support\\Request;\nclass IndexController\n{\n    protected $middleware = [\n        MiddlewareA::class,\n        MiddlewareB::class,\n    ];\n    public function index(Request $request): string\n    {\n        return 'hello';\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Native Redis Cluster Configuration in Webman\nDESCRIPTION: Configuration for using native Redis clustering rather than client-side sharding, enabling Redis's built-in clustering functionality.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/db/redis.md#2025-04-12_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nreturn[\n    'options' => [\n        'cluster' => 'redis',\n    ],\n\n    'clusters' => [\n        // ...\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Blade Component Usage\nDESCRIPTION: This HTML code demonstrates how to use the Blade component named 'alert' within a template using the `<x-alert/>` tag.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-hk/view.md#2025-04-12_snippet_23\n\nLANGUAGE: html\nCODE:\n```\n\"<!doctype html>\n<html>\n<head>\n    <meta charset=\\\"utf-8\\\">\n    <title>webman</title>\n</head>\n<body>\n\n<x-alert/>\n\n</body>\n</html>\"\n```\n\n----------------------------------------\n\nTITLE: Get All Uploaded Files - Webman PHP\nDESCRIPTION: Retrieves all uploaded files as an array of `webman\\Http\\UploadFile` objects. If no files were uploaded, an empty array is returned.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/th/request.md#2025-04-12_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n$request->file();\n```\n\n----------------------------------------\n\nTITLE: Deleting Models by Query Conditions in Eloquent ORM\nDESCRIPTION: Demonstrates how to delete models matching specific query conditions using the where method followed by delete. Returns the number of affected rows.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/db/model.md#2025-04-12_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$deletedRows = app\\modle\\Flight::where('active', 0)->delete();\n```\n\n----------------------------------------\n\nTITLE: Implementing Redis Queue Consumer in PHP\nDESCRIPTION: Example of a consumer class for processing messages from a Redis queue.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/tr/queue/redis.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace app\\queue\\redis;\n\nuse Webman\\RedisQueue\\Consumer;\n\nclass MyMailSend implements Consumer\n{\n    // Name of the queue to be consumed\n    public $queue = 'send-mail';\n\n    // Connection name, corresponds to the connection in plugin/webman/redis-queue/redis.php\n    public $connection = 'default';\n\n    // Consumption\n    public function consume($data)\n    {\n        // No need for deserialization\n        var_export($data); // Outputs ['to' => 'tom@gmail.com', 'content' => 'hello']\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Delayed Response in PHP with Webman\nDESCRIPTION: This code snippet demonstrates how to use Timer::sleep() to create a non-blocking delay in a Webman controller, simulating a sleep without blocking the process.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/upgrade/1-5.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace app\\controller;\n\nuse support\\Request;\nuse Workerman\\Timer;\n\nclass TestController\n{\n    public function index(Request $request)\n    {\n        // Sleep for 1.5 seconds\n        Timer::sleep(1.5);\n        return $request->getRemoteIp();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Image Processing with Intervention/image in Webman\nDESCRIPTION: This PHP code defines a controller action that handles image uploads and resizing using the Intervention/image library. It retrieves the uploaded file, resizes it to 100x100 pixels, and returns the processed image as a PNG response. It also includes error handling for missing files.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/components/image.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n\"<?php\\nnamespace app\\controller;\\nuse support\\Request;\\nuse Intervention\\Image\\ImageManagerStatic as Image;\\n\\nclass UserController\\n{\\n    public function img(Request $request)\\n    {\\n        $file = $request->file('file');\\n        if ($file && $file->isValid()) {\\n            $image = Image::make($file)->resize(100, 100);\\n            return response($image->encode('png'), 200, ['Content-Type' => 'image/png']);\\n        }\\n        return response('檔案未找到');\\n    }\\n    \\n}\" \n```\n\n----------------------------------------\n\nTITLE: Adding Middleware to a Plugin in PHP\nDESCRIPTION: This code snippet shows how to add middleware to a specific plugin in Webman by configuring it in the main project's `config/middleware.php` file. This allows adding middleware without modifying the plugin's code.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/middleware.md#2025-04-12_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'plugin.ai' => [], // Add middleware to the ai plugin\n    'plugin.ai.admin' => [], // Add middleware to the admin module of the ai plugin\n];\n```\n\n----------------------------------------\n\nTITLE: Obtaining the plugin name from the request in Webman (PHP)\nDESCRIPTION: This snippet shows how to obtain the plugin name from the request using `$request->plugin`. For non-plugin requests, it returns an empty string. This feature requires webman version 1.4.0 or higher.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/es/request.md#2025-04-12_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\n$request->plugin;\n```\n\n----------------------------------------\n\nTITLE: Starting WebMan PHP Server and Testing AOP Implementation\nDESCRIPTION: Shell commands to start the WebMan PHP server and test the AOP implementation using cURL.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/de/aop.md#2025-04-12_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nphp start.php start\ncurl  http://127.0.0.1:8787/json\n```\n\n----------------------------------------\n\nTITLE: Using Placeholders in Translations\nDESCRIPTION: Example of passing placeholder values as an array in the second parameter of the trans() function.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/components/translation.md#2025-04-12_snippet_12\n\nLANGUAGE: php\nCODE:\n```\ntrans('hello', ['%name%' => 'webman']); // Привет, webman!\n```\n\n----------------------------------------\n\nTITLE: Exception Handler Interface Implementation in PHP\nDESCRIPTION: Interface definition for exception handlers showing required methods for logging and rendering responses.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/exception.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\ninterface ExceptionHandlerInterface\n{\n    /**\n     * 记录日志\n     * @param Throwable $e\n     * @return mixed\n     */\n    public function report(Throwable $e);\n\n    /**\n     * 渲染返回\n     * @param Request $request\n     * @param Throwable $e\n     * @return Response\n     */\n    public function render(Request $request, Throwable $e) : Response;\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Process Configuration for Time-Sensitive Tasks\nDESCRIPTION: Demonstrates separating time-sensitive periodic tasks into multiple processes to prevent potential execution delays\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/components/crontab.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'task1'  => [\n        'handler'  => process\\Task1::class\n    ],\n    'task2'  => [\n        'handler'  => process\\Task2::class\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring Phinx in webman-php\nDESCRIPTION: Configuration file (phinx.php) setup for Phinx in webman-php project, including paths for migrations and seeds, and database connection settings.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/db/migration.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nreturn [\n    \"paths\" => [\n        \"migrations\" => \"database/migrations\",\n        \"seeds\"      => \"database/seeds\"\n    ],\n    \"environments\" => [\n        \"default_migration_table\" => \"phinxlog\",\n        \"default_database\"        => \"dev\",\n        \"default_environment\"     => \"dev\",\n        \"dev\" => [\n            \"adapter\" => \"DB_CONNECTION\",\n            \"host\"    => \"DB_HOST\",\n            \"name\"    => \"DB_DATABASE\",\n            \"user\"    => \"DB_USERNAME\",\n            \"pass\"    => \"DB_PASSWORD\",\n            \"port\"    => \"DB_PORT\",\n            \"charset\" => \"utf8\"\n        ]\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Process Startup Configuration\nDESCRIPTION: Bootstrap configuration to enable the EventManager\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/event.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    // Other configurations are omitted here ...\n    webman\\event\\EventManager::class,\n];\n```\n\n----------------------------------------\n\nTITLE: Using Raw Expressions in Having Clause in Webman PHP\nDESCRIPTION: This snippet shows how to use raw SQL expressions in having clauses using havingRaw method.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/hi/db/queries.md#2025-04-12_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n$orders = Db::table('orders')\n                ->select('department', Db::raw('SUM(price) as total_sales'))\n                ->groupBy('department')\n                ->havingRaw('SUM(price) > ?', [2500])\n                ->get();\n```\n\n----------------------------------------\n\nTITLE: Using Alternative Database Connection in Medoo\nDESCRIPTION: Example of using a specific database instance with Medoo's instance() method to query data from an alternative database connection.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/db/medoo.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$user = Medoo::instance('other')->get('user', '*', ['uid' => 1]);\n```\n\n----------------------------------------\n\nTITLE: Configuring Event Subscribers\nDESCRIPTION: This PHP code adds the LoggerSubscriber class to the list of event subscribers in the configuration.  This tells the event dispatcher to register the subscriber and listen for its subscribed events.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/fr/event.md#2025-04-12_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\nreturn [\n    // Abonnés aux événements\n    'subscriber' => [\n        \\extend\\event\\subscriber\\LoggerSubscriber::class,\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Message Publishing to Redis Queue in Webman PHP\nDESCRIPTION: Example of asynchronously publishing messages to a Redis queue using the Client::send() method in a controller.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/queue/redis.md#2025-04-12_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\nuse Webman\\RedisQueue\\Client;\n\nclass Index\n{\n    public function queue(Request $request)\n    {\n        // Queue name\n        $queue = 'send-mail';\n        // Data, can be an array, no need for serialization\n        $data = ['to' => 'tom@gmail.com', 'content' => 'hello'];\n        // Publish message\n        Client::send($queue, $data);\n        // Publish delayed message, will be processed after 60 seconds\n        Client::send($queue, $data, 60);\n\n        return response('redis queue test');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Redis Queue Consumer in Webman PHP\nDESCRIPTION: Example of a Redis queue consumer class for processing messages from a specific queue.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/queue/redis.md#2025-04-12_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nnamespace app\\queue\\redis;\n\nuse Webman\\RedisQueue\\Consumer;\n\nclass MyMailSend implements Consumer\n{\n    // Queue name to consume\n    public $queue = 'send-mail';\n\n    // Connection name, corresponding to the connection in plugin/webman/redis-queue/redis.php\n    public $connection = 'default';\n\n    // Consume\n    public function consume($data)\n    {\n        // No need for deserialization\n        var_export($data); // Outputs ['to' => 'tom@gmail.com', 'content' => 'hello']\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Session Data in Webman PHP\nDESCRIPTION: Shows how to get all session data using the all() method on the session object.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/session.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$session = $request->session();\n$all = $session->all();\n```\n\n----------------------------------------\n\nTITLE: Returning a File Stream in Webman PHP\nDESCRIPTION: Demonstrates how to return a file stream using the `file()` method of the `support\\Response` object. Webman handles large files efficiently by streaming them.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/pt/response.md#2025-04-12_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\n\nclass FooController\n{\n    public function hello(Request $request)\n    {\n        return response()->file(public_path() . '/favicon.ico');\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Debug Aspect in PHP for AOP\nDESCRIPTION: PHP class implementing an Aspect (DebugAspect) to intercept the UserService class.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/de/aop.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\aspect;\n\nuse app\\service\\UserService;\nuse Hyperf\\Di\\Aop\\AbstractAspect;\nuse Hyperf\\Di\\Aop\\ProceedingJoinPoint;\n\nclass DebugAspect extends AbstractAspect\n{\n    public $classes = [\n        UserService::class . '::first',\n    ];\n\n    public function process(ProceedingJoinPoint $proceedingJoinPoint)\n    {\n        var_dump(11);\n        return $proceedingJoinPoint->process();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Specific Webman Plugin Application named 'foo' in PHP\nDESCRIPTION: This example demonstrates creating a plugin application named 'foo' using the Webman console command.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/app/create.md#2025-04-12_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nphp webman app-plugin:create foo\n```\n\n----------------------------------------\n\nTITLE: Enabling Stomp Protocol in RabbitMQ\nDESCRIPTION: This bash command enables the Stomp protocol plugin in RabbitMQ, which is necessary for using Stomp with RabbitMQ as it's not enabled by default.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/de/queue/stomp.md#2025-04-12_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-plugins enable rabbitmq_stomp\n```\n\n----------------------------------------\n\nTITLE: Initializing AOP ClassLoader in PHP Entry File\nDESCRIPTION: Code snippet to initialize the AOP ClassLoader in the WebMan PHP entry file (start.php).\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/de/aop.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Hyperf\\AopIntegration\\ClassLoader;\n\nif ($timezone = config('app.default_timezone')) {\n    date_default_timezone_set($timezone);\n}\n\n// Initialize\nClassLoader::init();\n```\n\n----------------------------------------\n\nTITLE: Finding a Model with 'findOrFail' in PHP\nDESCRIPTION: This snippet retrieves a model using its primary key and throws an exception if the model is not found. It uses `findOrFail()`. If the model isn't found, an `Illuminate\\Database\\Eloquent\\ModelNotFoundException` is thrown.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/fr/db/model.md#2025-04-12_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$model = app\\model\\Flight::findOrFail(1);\n```\n\n----------------------------------------\n\nTITLE: Getting Session Value\nDESCRIPTION: Retrieves a specific value from session with optional default value.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/session.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$session = $request->session();\n$name = $session->get('name');\n```\n\n----------------------------------------\n\nTITLE: Sample Service Class for AOP Testing\nDESCRIPTION: Example UserService class that will be targeted by AOP\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/pt/aop.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\service;\n\nclass UserService\n{\n    public function first(): array\n    {\n        return ['id' => 1];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Nginx Proxy Configuration for WSS (SSL)\nDESCRIPTION: This Nginx configuration snippet sets up a reverse proxy for WebSocket Secure (WSS) connections. It proxies requests to the `webman/push` server running on `http://127.0.0.1:3131` and configures the necessary headers for WebSocket communication.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/pt/plugin/push.md#2025-04-12_snippet_6\n\nLANGUAGE: nginx\nCODE:\n```\nserver {\n    # .... Outras configurações aqui ...\n\n    location /app/<app_key>\n    {\n        proxy_pass http://127.0.0.1:3131;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"Upgrade\";\n        proxy_set_header X-Real-IP $remote_addr;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Think-Template with taglib_pre_load\nDESCRIPTION: This PHP code demonstrates how to extend Think-Template by pre-loading a custom tag library. The `taglib_pre_load` option in the `view.options` configuration is used to specify the class of the tag library.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-hk/view.md#2025-04-12_snippet_24\n\nLANGUAGE: php\nCODE:\n```\n\"<?php\nuse support\\view\\ThinkPHP;\nreturn [\n    'handler' => ThinkPHP::class,\n    'options' => [\n        'taglib_pre_load' => your\\namspace\\Taglib::class,\n    ]\n];\n?>\"\n```\n\n----------------------------------------\n\nTITLE: Definizione della classe ErrorCode vuota in PHP\nDESCRIPTION: Creazione di una classe ErrorCode vuota che verrà popolata automaticamente con i codici di errore generati.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/components/generate_error_code.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * File generato, non modificare manualmente.\n * @Author:$Id$\n */\nnamespace support;\n\nclass ErrorCode\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Using webman/push JavaScript Client for Public Channels\nDESCRIPTION: JavaScript code demonstrating how to establish a connection, subscribe to channels, and listen for events using the webman/push client.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/de/plugin/push.md#2025-04-12_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar connection = new Push({\n    url: 'ws://127.0.0.1:3131',\n    app_key: '<app_key, in config/plugin/webman/push/app.php erhältlich>',\n    auth: '/plugin/webman/push/auth'\n});\nvar uid = 1;\nvar user_channel = connection.subscribe('user-' + uid);\n\nuser_channel.on('message', function(data) {\n    console.log(data);\n});\nuser_channel.on('friendApply', function (data) {\n    console.log(data);\n});\n\nvar group_id = 2;\nvar group_channel = connection.subscribe('group-' + group_id);\ngroup_channel.on('message', function(data) {\n    console.log(data);\n});\n```\n\n----------------------------------------\n\nTITLE: RabbitMQ'da Stomp Protokolünü Etkinleştirme (Shell)\nDESCRIPTION: Bu komut, RabbitMQ'da Stomp protokolünü etkinleştirmek için kullanılır. Etkinleştirme sonrası varsayılan Stomp portu 61613 olacaktır.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/tr/queue/stomp.md#2025-04-12_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nrabbitmq-plugins enable rabbitmq_stomp\n```\n\n----------------------------------------\n\nTITLE: Installing Casbin in Webman PHP\nDESCRIPTION: Command to install the Casbin package via Composer in a Webman PHP project.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-hk/components/casbin.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ncomposer require teamones/casbin\n```\n\n----------------------------------------\n\nTITLE: Displaying Directory Structure for Webman Plugin\nDESCRIPTION: This snippet shows the directory structure of a Webman plugin, including app, config, public, and api directories. It illustrates the organization of controllers, views, configuration files, and other components within the plugin.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/app/directory.md#2025-04-12_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nplugin/\n└── foo\n    ├── app\n    │   ├── controller\n    │   │   └── IndexController.php\n    │   ├── exception\n    │   │   └── Handler.php\n    │   ├── functions.php\n    │   ├── middleware\n    │   ├── model\n    │   └── view\n    │       └── index\n    │           └── index.html\n    ├── config\n    │   ├── app.php\n    │   ├── autoload.php\n    │   ├── container.php\n    │   ├── database.php\n    │   ├── exception.php\n    │   ├── log.php\n    │   ├── middleware.php\n    │   ├── process.php\n    │   ├── redis.php\n    │   ├── route.php\n    │   ├── static.php\n    │   ├── thinkorm.php\n    │   ├── translation.php\n    │   └── view.php\n    ├── public\n    └── api\n```\n\n----------------------------------------\n\nTITLE: Where Column Clause in Webman PHP\nDESCRIPTION: This snippet shows how to use the whereColumn method to compare two columns.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/hi/db/queries.md#2025-04-12_snippet_28\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')\n                ->whereColumn('first_name', 'last_name')\n                ->get();\n                \n// You can also pass a comparison operator\n$users = Db::table('users')\n                ->whereColumn('updated_at', '>', 'created_at')\n                ->get();\n                \n// The whereColumn method can also accept an array\n$users = Db::table('users')\n                ->whereColumn([\n                    ['first_name', '=', 'last_name'],\n                    ['updated_at', '>', 'created_at'],\n                ])->get();\n```\n\n----------------------------------------\n\nTITLE: Logging with Reused Configuration in Webman (PHP)\nDESCRIPTION: This snippet shows how to use the `Log` class to log a message using the default channel, and how to reuse a logging configuration defined in the main project (e.g., 'test').\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/es/app/log.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse support\\Log;\nLog::info('Contenido del registro');\n// Supongamos que el proyecto principal tiene una configuración de registro llamada \"test\"\nLog::channel('test')->info('Contenido del registro');\n```\n\n----------------------------------------\n\nTITLE: Defining UserService class\nDESCRIPTION: This PHP code defines a simple UserService class with a `first` method that returns an array. This class will be used as the target for AOP.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/th/aop.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n\"<?php\\nnamespace app\\service;\\n\\nclass UserService\\n{\\n    public function first(): array\\n    {\\n        return ['id' => 1];\\n    }\\n}\\n\"\n```\n\n----------------------------------------\n\nTITLE: Upgrading Webman Framework Dependencies\nDESCRIPTION: Command to upgrade webman-framework to version 1.4.3+, webman/console to version 1.0.27+, and run the webman installer.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/others/upgrade.md#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require workerman/webman-framework ^1.4.3 && composer require webman/console ^1.0.27 && php webman install\n```\n\n----------------------------------------\n\nTITLE: Using whereNotNull Conditions in webman-php\nDESCRIPTION: Using whereNotNull to filter records where a field is not NULL. This example retrieves users with a non-NULL updated_at field.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/db/queries.md#2025-04-12_snippet_23\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')\n                    ->whereNotNull('updated_at')\n                    ->get();\n```\n\n----------------------------------------\n\nTITLE: Get All POST Parameters - Webman PHP\nDESCRIPTION: Demonstrates how to retrieve all POST parameters as an array using the `post()` method. If there are no POST parameters, an empty array is returned.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/th/request.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$request->post();\n```\n\n----------------------------------------\n\nTITLE: Implementing Middleware Interface in PHP\nDESCRIPTION: Example showing the basic middleware interface implementation that processes incoming requests and produces responses.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/middleware.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ninterface MiddlewareInterface\n{\n    /**\n     * Process an incoming server request.\n     *\n     * Processes an incoming server request in order to produce a response.\n     * If unable to produce the response itself, it may delegate to the provided\n     * request handler to do so.\n     */\n    public function process(Request $request, callable $handler): Response;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Non-Listening Process in Webman's process.php\nDESCRIPTION: This configuration snippet demonstrates how to set up a non-listening process in Webman's process.php file, specifying only the handler class.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/process.md#2025-04-12_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\nreturn [\n    // ... 其他進程配置省略\n    \n    'task' => [\n        'handler'  => app\\TaskTest::class\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Using Error Codes in Application Code\nDESCRIPTION: This code demonstrates how to use the generated error codes within an application service. It imports the `ErrorCode` class and utilizes a predefined error code (`ErrorCode::ModelAddOptionsError`) in a `try-catch` block to throw a custom HTTP exception upon encountering an error. This provides structured error handling and clear error reporting within the application logic.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/th/components/generate_error_code.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n\"<?php\n/**\n * คลาสเซอวิสที่เกี่ยวกับการทำงานที่เกี่ยวข้องกับ navigation\n */\n\nnamespace app\\\\service;\n\nuse app\\\\model\\\\Demo as DemoModel;\n\n// นำเข้าไฟล์คลาส ErrorCode\nuse support\\\\ErrorCode;\n\nclass Demo\n{\n    /**\n     * เพิ่ม\n     * @param $data\n     * @return array|mixed\n     * @throws \\\\exception\n     */\n    public function add($data): array\n    {\n        try {\n            $demo = new DemoModel();\n            foreach ($data as $key => $value) {\n                $demo->$key = $value;\n            }\n\n            $demo->save();\n\n            return $demo->getData();\n        } catch (\\\\Throwable $e) {\n            // แสดงข้อผิดพลาด\n            throw_http_exception($e->getMessage(), ErrorCode::ModelAddOptionsError);\n        }\n        return [];\n    }\n}\"\n```\n\n----------------------------------------\n\nTITLE: Incorrect Global Variable Usage in Coroutine Environment\nDESCRIPTION: Demonstrates incorrect usage of static variables in a coroutine environment that can lead to data pollution between requests.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/jp/upgrade/1-5.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace app\\controller;\n\nuse support\\Request;\nuse Workerman\\Timer;\n\nclass TestController\n{\n    protected static $name = '';\n\n    public function index(Request $request)\n    {\n        static::$name = $request->get('name');\n        Timer::sleep(5);\n        return static::$name;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Default Routes (PHP)\nDESCRIPTION: This PHP code shows how to disable default routes in Webman. It allows disabling default routing at different levels: globally, for a specific application, for a specific plugin, or for a specific controller method. These methods prevent webman from automatically creating routes to actions in controllers.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/upgrade/1-6.md#2025-04-12_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n// 禁用主项目默认路由，不影响应用插件\nRoute::disableDefaultRoute();\n// 禁用主项目的admin应用的路由，不影响应用插件\nRoute::disableDefaultRoute('', 'admin');\n// 禁用foo插件的默认路由，不影响主项目\nRoute::disableDefaultRoute('foo');\n// 禁用foo插件的admin应用的默认路由，不影响主项目\nRoute::disableDefaultRoute('foo', 'admin');\n// 禁用控制器 [\\app\\controller\\IndexController::class, 'index'] 的默认路由\nRoute::disableDefaultRoute([\\app\\controller\\IndexController::class, 'index']);\n```\n\n----------------------------------------\n\nTITLE: Redis Cluster Configuration in Webman\nDESCRIPTION: Configuration for Redis clusters, defining multiple Redis servers that can be used for client-side sharding.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/db/redis.md#2025-04-12_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'clusters' => [\n        'default' => [\n            [\n                'host'     => 'localhost',\n                'password' => null,\n                'port'     => 6379,\n                'database' => 0,\n            ],\n        ],\n    ],\n\n];\n```\n\n----------------------------------------\n\nTITLE: Creating a Blade Component in PHP\nDESCRIPTION: This PHP class defines a Blade component named 'Alert' that renders a custom view.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/de/view.md#2025-04-12_snippet_11\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nnamespace app\\view\\components;\n\nuse Illuminate\\View\\Component;\n\nclass Alert extends Component\n{\n    \n    public function __construct()\n    {\n    \n    }\n    \n    public function render()\n    {\n        return view('components/alert')->rawBody();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Get Request Path - Webman PHP\nDESCRIPTION: Retrieves the request path, excluding the query string.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/th/request.md#2025-04-12_snippet_27\n\nLANGUAGE: php\nCODE:\n```\n$request->path();\n```\n\n----------------------------------------\n\nTITLE: Allowing All Attributes for Mass Assignment\nDESCRIPTION: Shows how to allow all attributes to be mass assignable by setting $guarded to an empty array, which should be used with caution.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/es/db/model.md#2025-04-12_snippet_33\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Atributos que no se pueden asignar de forma masiva.\n *\n * @var array\n */\nprotected $guarded = [];\n```\n\n----------------------------------------\n\nTITLE: Running webman in debug mode (Linux)\nDESCRIPTION: This command starts the webman application in debug mode, which is suitable for development and debugging. It provides detailed error messages and allows for hot reloading of code.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-hk/install.md#2025-04-12_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nphp start.php start\n```\n\n----------------------------------------\n\nTITLE: Configuring Process File in Webman\nDESCRIPTION: Example of adding the Task process configuration to the Webman config/process.php file.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/jp/components/crontab.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    ....その他の設定は省略....\n  \n    'task'  => [\n        'handler'  => process\\Task::class\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Using Redis in Webman Controller\nDESCRIPTION: Example of using Redis within a Webman controller to set and get a value.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/jp/db/redis.md#2025-04-12_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\nuse support\\Redis;\n\nclass UserController\n{\n    public function db(Request $request)\n    {\n        $key = 'test_key';\n        Redis::set($key, rand());\n        return response(Redis::get($key));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Join Operations in webman-php\nDESCRIPTION: Examples of different join operations: inner join, left join, right join, and cross join. These queries demonstrate how to join multiple tables in various ways.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/db/queries.md#2025-04-12_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n// join\n$users = Db::table('users')\n            ->join('contacts', 'users.id', '=', 'contacts.user_id')\n            ->join('orders', 'users.id', '=', 'orders.user_id')\n            ->select('users.*', 'contacts.phone', 'orders.price')\n            ->get();\n\n// leftJoin            \n$users = Db::table('users')\n            ->leftJoin('posts', 'users.id', '=', 'posts.user_id')\n            ->get();\n\n// rightJoin\n$users = Db::table('users')\n            ->rightJoin('posts', 'users.id', '=', 'posts.user_id')\n            ->get();\n\n// crossJoin    \n$users = Db::table('sizes')\n            ->crossJoin('colors')\n            ->get();\n```\n\n----------------------------------------\n\nTITLE: Retrieving Specific Session Values in Webman\nDESCRIPTION: Demonstrates how to get a specific session value with an optional default fallback. Returns null if the session key doesn't exist and no default is provided.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/fr/session.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$session = $request->session();\n$name = $session->get('name');\n```\n\n----------------------------------------\n\nTITLE: Example of Global Variable Contamination in Coroutines\nDESCRIPTION: Demonstrates incorrect usage of static variables in coroutines that leads to data contamination between requests.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/pt/coroutine/fiber.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace app\\controller;\n\nuse support\\Request;\nuse Workerman\\Timer;\n\nclass TestController\n{\n    protected static $name = '';\n\n    public function index(Request $request)\n    {\n        static::$name = $request->get('name');\n        Timer::sleep(5);\n        return static::$name;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Database Records in PHP\nDESCRIPTION: Shows how to update records in a database table using a where condition. Returns the number of affected rows.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/tr/db/queries.md#2025-04-12_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n$etkilenen = Db::table('kullanıcılar')\n              ->where('id', 1)\n              ->update(['oylar' => 1]);\n```\n\n----------------------------------------\n\nTITLE: Installing Workerman/Crontab via Composer\nDESCRIPTION: Command to install the workerman/crontab package using Composer.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/components/crontab.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\ncomposer require workerman/crontab\n```\n\n----------------------------------------\n\nTITLE: Disabling Auto-Incrementing Primary Key in Eloquent\nDESCRIPTION: Illustrates how to disable auto-incrementing for the primary key in an Eloquent model.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/tr/db/model.md#2025-04-12_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nclass User extends Model\n{\n    public $incrementing = false;\n}\n```\n\n----------------------------------------\n\nTITLE: Reloading Webman after Code Changes\nDESCRIPTION: Command to reload Webman after making changes to code or configuration in a production environment. This is necessary due to Webman's persistent memory usage.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/tr/attention.md#2025-04-12_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nphp start.php reload\n```\n\n----------------------------------------\n\nTITLE: Custom BusinessException JSON Response in webman\nDESCRIPTION: This snippet presents the JSON response format when the custom `MyBusinessException` is thrown. Note that `msg` is replaced with `message`.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/exception.md#2025-04-12_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\"code\": 3000, \"message\": \"參數錯誤\"}\n```\n\n----------------------------------------\n\nTITLE: Error Response JSON Format\nDESCRIPTION: Example JSON structure for error responses when exceptions occur.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/exception.md#2025-04-12_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"code\": \"500\",\n    \"msg\": \"异常信息\"\n}\n```\n\n----------------------------------------\n\nTITLE: Blade Component Creation and Registration\nDESCRIPTION: Step-by-step guide for creating and registering a Blade component in Webman view system\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/view.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace app\\view\\components;\n\nuse Illuminate\\View\\Component;\n\nclass Alert extends Component\n{\n    public function __construct()\n    {\n    }\n    \n    public function render()\n    {\n        return view('components/alert')->rawBody();\n    }\n}\n```\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse support\\view\\Blade;\nreturn [\n    'handler' => Blade::class,\n    'extension' => function (Jenssegers\\Blade\\Blade $blade) {\n        $blade->component('alert', app\\view\\components\\Alert::class);\n    }\n];\n```\n\n----------------------------------------\n\nTITLE: Building Webman Binary Package\nDESCRIPTION: Shell commands to build the Webman binary package. The first command uses the default PHP version, while the second specifies PHP 8.1 for packaging.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/others/bin.md#2025-04-12_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nphp webman build:bin\n```\n\nLANGUAGE: shell\nCODE:\n```\nphp webman build:bin 8.1\n```\n\n----------------------------------------\n\nTITLE: Configuring Exception Handler in Webman PHP\nDESCRIPTION: Configuration file setup for exception handling class in Webman PHP framework\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/jp/exception.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    // ここで例外処理クラスを設定します\n    '' => support\\exception\\Handler::class,\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring Controller Reuse in Webman 1.4\nDESCRIPTION: Example of how to disable controller reuse in the config/app.php file, allowing new controller initialization for each request.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/upgrade/1-4.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n'controller_reuse' => false,\n```\n\n----------------------------------------\n\nTITLE: Auto-Incrementing IDs in Webman PHP\nDESCRIPTION: This snippet shows how to insert a record and retrieve the auto-incrementing ID.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/hi/db/queries.md#2025-04-12_snippet_36\n\nLANGUAGE: php\nCODE:\n```\n$id = Db::table('users')->insertGetId(\n    ['email' => 'john@example.com', 'votes' => 0]\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring taglib_pre_load for think-template in PHP\nDESCRIPTION: This code snippet demonstrates how to configure the view handler to use ThinkPHP and extend tag libraries using the taglib_pre_load option. It specifies a custom namespace for the tag library class.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/es/view.md#2025-04-12_snippet_22\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse support\\view\\ThinkPHP;\nreturn [\n    'handler' => ThinkPHP::class,\n    'options' => [\n        'taglib_pre_load' => your\\namspace\\Taglib::class,\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: New Session Handler Namespace in Webman 1.4\nDESCRIPTION: The updated namespace for SessionHandler classes in Webman 1.4, affecting the 'handler' configuration in config/session.php.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/upgrade/1-4.md#2025-04-12_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse Webman\\Session\\FileSessionHandler;  \nuse Webman\\Session\\RedisSessionHandler;  \nuse Webman\\Session\\RedisClusterSessionHandler;\n```\n\n----------------------------------------\n\nTITLE: Obtaining the client's real IP address in Webman (PHP)\nDESCRIPTION: This snippet demonstrates how to retrieve the real IP address of the client using `$request->getRealIp($safe_mode=true)`.  It explains the scenario where a proxy is used, and `$request->getRemoteIp()` returns the proxy IP instead of the client's. It also highlights the potential unreliability of this method when `$safe_mode` is false due to the ease of HTTP header spoofing.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/es/request.md#2025-04-12_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n$request->getRealIp($safe_mode=true);\n```\n\n----------------------------------------\n\nTITLE: 支払いSDKの初期化 (PHP)\nDESCRIPTION: 設定ファイルを読み込み、Pay::config()メソッドを使用してSDKを初期化します。\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/jp/components/payment.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// 設定ファイル config/payment.php を取得\n$config = Config::get('payment');\nPay::config($config);\n```\n\n----------------------------------------\n\nTITLE: Deleting Single Session Value in Webman\nDESCRIPTION: Shows how to delete a single session value using the delete method, which is an alternative to forget() when removing just one value.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/fr/session.md#2025-04-12_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$session = $request->session();\n// Équivaut à $session->forget('name');\n$session->delete('name');\n```\n\n----------------------------------------\n\nTITLE: Union Queries in Webman PHP\nDESCRIPTION: This snippet demonstrates how to combine two queries using the union method.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/hi/db/queries.md#2025-04-12_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n$first = Db::table('users')\n            ->whereNull('first_name');\n\n$users = Db::table('users')\n            ->whereNull('last_name')\n            ->union($first)\n            ->get();\n```\n\n----------------------------------------\n\nTITLE: Using ID Field as Index when Retrieving Column in webman-php\nDESCRIPTION: Query that retrieves a column with a specific field as the array index. This example retrieves 'title' values with 'id' as the key in the resulting collection.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/db/queries.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$roles = Db::table('roles')->pluck('title', 'id');\n\nforeach ($roles as $id => $title) {\n    echo $title;\n}\n```\n\n----------------------------------------\n\nTITLE: Create Webman Project using Composer\nDESCRIPTION: This command uses Composer to create a new webman project. It utilizes the `create-project` command to download and set up the project structure from the `workerman/webman` package, specifying version 2.0.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/install.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\ncomposer create-project workerman/webman:~2.0\n```\n\n----------------------------------------\n\nTITLE: Installing webman/captcha\nDESCRIPTION: This command uses composer to install the webman/captcha package into your webman-php project. This package provides functionality for generating and verifying captcha images.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/es/components/captcha.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n\"composer require webman/captcha\"\n```\n\n----------------------------------------\n\nTITLE: Client-Side Push Subscription (Public Channels)\nDESCRIPTION: This snippet establishes a WebSocket connection to listen for messages on both user and group channels for real-time notifications. It demonstrates handling messages and friend request notifications.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/plugin/push.md#2025-04-12_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// 建立连接\nvar connection = new Push({\n    url: 'ws://127.0.0.1:3131', // websocket地址\n    app_key: '<app_key，在config/plugin/webman/push/app.php里获取>',\n    auth: '/plugin/webman/push/auth' // 订阅鉴权(仅限于私有频道)\n});\n// 假设用户uid为1\nvar uid = 1;\n// 浏览器监听user-1频道的消息，也就是用户uid为1的用户消息\nvar user_channel = connection.subscribe('user-' + uid);\n// 当user-1频道有message事件的消息时\nuser_channel.on('message', function(data) {\n    // data里是消息内容\n    console.log(data);\n});\n// 当user-1频道有friendApply事件时消息时\nuser_channel.on('friendApply', function (data) {\n    // data里是好友申请相关信息\n    console.log(data);\n});\n// 假设群组id为2\nvar group_id = 2;\n// 浏览器监听group-2频道的消息，也就是监听群组2的群消息\nvar group_channel = connection.subscribe('group-' + group_id);\n// 当群组2有message消息事件时\ngroup_channel.on('message', function(data) {\n    // data里是消息内容\n    console.log(data);\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Twig with Composer\nDESCRIPTION: This command uses Composer to install the Twig template engine. Twig is a flexible and fast template engine for PHP.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-hk/view.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n\"composer require twig/twig\"\n```\n\n----------------------------------------\n\nTITLE: Datenbankkonfiguration in einem webman Applikations-Plugin\nDESCRIPTION: Beispiel für die Konfiguration von Datenbankverbindungen in einem Applikations-Plugin. Zeigt, wie mehrere Verbindungen definiert werden können.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/de/plugin/app.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nreturn  [\n    'default' => 'mysql',\n    'connections' => [\n        'mysql' => [ // mysql ist der Verbindungsnamen\n            'driver'      => 'mysql',\n            'host'        => '127.0.0.1',\n            'port'        => 3306,\n            'database'    => 'Datenbank',\n            'username'    => 'Benutzername',\n            'password'    => 'Passwort',\n            'charset'     => 'utf8mb4',\n            'collation'   => 'utf8mb4_general_ci',\n        ],\n        'admin' => [ // admin ist der Verbindungsnamen\n            'driver'      => 'mysql',\n            'host'        => '127.0.0.1',\n            'port'        => 3306,\n            'database'    => 'Datenbank',\n            'username'    => 'Benutzername',\n            'password'    => 'Passwort',\n            'charset'     => 'utf8mb4',\n            'collation'   => 'utf8mb4_general_ci',\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Creating Language Middleware in PHP\nDESCRIPTION: Middleware to set the language for each request based on session data.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/components/translation.md#2025-04-12_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nnamespace app\\middleware;\n\nuse Webman\\MiddlewareInterface;\nuse Webman\\Http\\Response;\nuse Webman\\Http\\Request;\n\nclass Lang implements MiddlewareInterface\n{\n    public function process(Request $request, callable $handler) : Response\n    {\n        locale(session('lang', 'zh_CN'));\n        return $handler($request);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Vista de ejemplo con ThinkPHP Template en Webman\nDESCRIPTION: Este snippet muestra un archivo de vista de ejemplo que utiliza el motor de plantillas ThinkPHP en Webman. Muestra la variable $name usando la sintaxis de ThinkPHP Template.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/es/view.md#2025-04-12_snippet_13\n\nLANGUAGE: html\nCODE:\n```\n<!doctype html>\n<html>\n<head>\n    <meta charset=\"utf-8\">\n    <title>webman</title>\n</head>\n<body>\nhello {$name}\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Old Session Handler Namespace\nDESCRIPTION: Example showing the deprecated namespace imports for session handlers\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/upgrade/1-4.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Webman\\FileSessionHandler;  \nuse Webman\\RedisSessionHandler;  \nuse Webman\\RedisClusterSessionHandler;\n```\n\n----------------------------------------\n\nTITLE: Importing and Using push-vue.js (JavaScript)\nDESCRIPTION: This JavaScript shows importing the push-vue.js and implementation within a Vue component. The setup includes initializing the webman-push connection, subscribing to channels based on user and group IDs, and defining event handlers to process incoming messages, mirroring the functionality of the standard push.js example but adapted for a Vue.js environment.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-hk/plugin/push.md#2025-04-12_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n\n<script lang=\"ts\" setup>\nimport {  onMounted } from 'vue'\nimport { Push } from '../utils/push-vue'\n\nonMounted(() => {\n  console.log('組件已經掛載') \n\n  //實例化webman-push\n\n  // 建立連接\n  var connection = new Push({\n    url: 'ws://127.0.0.1:3131', // websocket地址\n    app_key: '<app_key，在config/plugin/webman/push/app.php裡獲取>',\n    auth: '/plugin/webman/push/auth' // 訂閱鑒權(僅限於私有頻道)\n  });\n\n  // 假設用戶uid為1\n  var uid = 1;\n  // 瀏覽器監聽user-1頻道的消息，也就是用戶uid為1的用戶消息\n  var user_channel = connection.subscribe('user-' + uid);\n\n  // 當user-1頻道有message事件的消息時\n  user_channel.on('message', function (data) {\n    // data裡是消息內容\n    console.log(data);\n  });\n  // 當user-1頻道有friendApply事件時消息時\n  user_channel.on('friendApply', function (data) {\n    // data裡是好友申請相關信息\n    console.log(data);\n  });\n\n  // 假設群組id為2\n  var group_id = 2;\n  // 瀏覽器監聽group-2頻道的消息，也就是監聽群組2的群消息\n  var group_channel = connection.subscribe('group-' + group_id);\n  // 當群組2有message消息事件時\n  group_channel.on('message', function (data) {\n    // data裡是消息內容\n    console.log(data);\n  });\n\n\n})\n\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Permission Settings in Webman\nDESCRIPTION: PHP configuration file for permission settings, including default permission, logging, and enforcer configurations.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/de/casbin.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nreturn [\n    /*\n     *Standardberechtigung\n     */\n    'default' => 'basic',\n\n    'log' => [\n        'enabled' => false,\n        'logger' => 'log',\n    ],\n\n    'enforcers' => [\n        'basic' => [\n            /*\n            * Modellkonfiguration\n            */\n            'model' => [\n                'config_type' => 'file',\n                'config_file_path' => config_path() . '/casbin-basic-model.conf',\n                'config_text' => '',\n            ],\n\n            // Adapter.\n            'adapter' => webman\\permission\\adapter\\DatabaseAdapter::class,\n\n            /*\n            * Datenbankeinstellungen\n            */\n            'database' => [\n                // Datenbankverbindungsname, wenn leer, wird die Standardeinstellung verwendet.\n                'connection' => '',\n                // Richtlinientabellenname (ohne Tabellenpräfix)\n                'rules_name' => 'rule',\n                // Vollständiger Name der Richtlinientabelle.\n                'rules_table' => 'train_rule',\n            ],\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Inserting Multiple Records in webman-php\nDESCRIPTION: Using insert to add multiple records to a database table. This example inserts two new users in a single operation.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/db/queries.md#2025-04-12_snippet_33\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')->insert([\n    ['email' => 'taylor@example.com', 'votes' => 0],\n    ['email' => 'dayle@example.com', 'votes' => 0]\n]);\n```\n\n----------------------------------------\n\nTITLE: Installing Console Tool for Phar Packaging\nDESCRIPTION: Composer command to install the webman console tool required for phar packaging\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/others/phar.md#2025-04-12_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require webman/console\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis for Webman Application Plugin in PHP\nDESCRIPTION: Demonstrates how to configure Redis connections for a Webman application plugin, including multiple connection settings.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/tr/plugin/app.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'default' => [\n        'host' => '127.0.0.1',\n        'password' => null,\n        'port' => 6379,\n        'database' => 0,\n    ],\n    'cache' => [\n        'host' => '127.0.0.1',\n        'password' => null,\n        'port' => 6379,\n        'database' => 1,\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Get Session ID - Webman PHP\nDESCRIPTION: Retrieves the session ID.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/th/request.md#2025-04-12_snippet_32\n\nLANGUAGE: php\nCODE:\n```\n$request->sessionId();\n```\n\n----------------------------------------\n\nTITLE: Multiple Applications Namespace Example\nDESCRIPTION: PSR-4 compliant namespace configuration for a controller in the API application\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/pt/multiapp.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\api\\controller;\n\nuse support\\Request;\n\nclass FooController\n{\n    \n}\n\n```\n\n----------------------------------------\n\nTITLE: Selecting a Redis Connection in Webman\nDESCRIPTION: This code demonstrates how to select a specific Redis connection (e.g., 'cache') using the `Redis::connection()` method in Webman. It retrieves a value from the specified connection.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/db/redis.md#2025-04-12_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$redis = Redis::connection('cache');\n$redis->get('test_key');\n```\n\n----------------------------------------\n\nTITLE: Starting Webman Binary on Linux\nDESCRIPTION: Shell commands to start the Webman binary on a Linux server. The first command starts it in the foreground, while the second starts it as a daemon process.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/others/bin.md#2025-04-12_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n./webman.bin start\n```\n\nLANGUAGE: shell\nCODE:\n```\n./webman.bin start -d\n```\n\n----------------------------------------\n\nTITLE: AJAX Request Example\nDESCRIPTION: Example of making an AJAX request to the validation endpoint using jQuery\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/components/validation.md#2025-04-12_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n$.ajax({\n    url : 'http://127.0.0.1:8787',\n    type : \"post\",\n    dataType:'json',\n    data : {nickname:'Tom', username:'tomcat', password: '123456'}\n});\n```\n\n----------------------------------------\n\nTITLE: Finding Multiple Models by Primary Keys in PHP\nDESCRIPTION: This snippet demonstrates how to retrieve multiple model instances by providing an array of primary keys to the `find()` method.  It returns a collection of model instances.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/fr/db/model.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$vols = app\\model\\Flight::find([1, 2, 3]);\n```\n\n----------------------------------------\n\nTITLE: Configuring WebSocket Process in Webman's process.php\nDESCRIPTION: This configuration snippet shows how to set up a WebSocket process in Webman's process.php file, specifying the handler, listener, and process count.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/process.md#2025-04-12_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nreturn [\n    // ... 其他進程配置省略 ...\n    \n    // websocket_test 為進程名稱\n    'websocket_test' => [\n        // 這裡指定進程類，就是上面定義的Pusher類\n        'handler' => app\\Pusher::class,\n        'listen'  => 'websocket://0.0.0.0:8888',\n        'count'   => 1,\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring Twig Template Engine\nDESCRIPTION: Configuration code for setting up Twig template engine with options for debug and charset settings\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/view.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse support\\view\\Twig;\n\nreturn [\n    'handler' => Twig::class,\n    'options' => [\n        'debug' => false,\n        'charset' => 'utf-8'\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: PHPUnit Test Execution Result\nDESCRIPTION: Example output demonstrating successful test execution, showing test count, assertions, and performance metrics\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/fr/components/unitest.md#2025-04-12_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nPHPUnit 9.5.10 by Sebastian Bergmann and contributors.\n\n.                                                                   1 \\/1 (100%)\n\nTime: 00:00.010, Memory: 6.00 MB\n\nOK (1 test, 5 assertions)\n```\n\n----------------------------------------\n\nTITLE: Native PHP View Configuration\nDESCRIPTION: Configuration for using native PHP templating in Webman, with example controller and view file setup\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/view.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\n\nclass UserController\n{\n    public function hello(Request $request)\n    {\n        return view('user/hello', ['name' => 'webman']);\n    }\n}\n```\n\nLANGUAGE: html\nCODE:\n```\n<!doctype html>\n<html>\n<head>\n    <meta charset=\"utf-8\">\n    <title>webman</title>\n</head>\n<body>\nhello <?=htmlspecialchars($name)?>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Configuring WebSocket Process\nDESCRIPTION: Configuration settings for registering a WebSocket process with specific handler and port.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/process.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'websocket_test' => [\n        'handler' => app\\Pusher::class,\n        'listen'  => 'websocket://0.0.0.0:8888',\n        'count'   => 1,\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Application Middleware Configuration in PHP\nDESCRIPTION: This snippet configures application-specific middleware in a multi-app environment. Middleware defined under the 'api' key will only be executed for requests within the 'api' application.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-hk/middleware.md#2025-04-12_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n\"return [\n    // 全局中間件\n    '' => [\n        app\\middleware\\AuthCheckTest::class,\n        app\\middleware\\AccessControlTest::class,\n    ],\n    // api應用程式中間件（應用程式中間件僅在多應用程式模式下有效）\n    'api' => [\n        app\\middleware\\ApiOnly::class,\n    ]\n];\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Configuration - Specific File\nDESCRIPTION: Retrieves all settings from a specific configuration file, such as config/app.php.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/config.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nconfig('app');\n```\n\n----------------------------------------\n\nTITLE: Configuring Guarded Attributes for Mass Assignment Protection\nDESCRIPTION: Demonstrates using the $guarded property to specify which attributes should be protected from mass assignment, functioning as a blacklist approach.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/es/db/model.md#2025-04-12_snippet_32\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace app\\model;\n\nuse support\\Model;\n\nclass Flight extends Model\n{\n    /**\n     * Atributos que no se pueden asignar de forma masiva.\n     *\n     * @var array\n     */\n    protected $guarded = ['price'];\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Process Start Settings in PHP\nDESCRIPTION: This snippet shows how to configure the bootstrap file to include the EventManager class from the webman event library. This step is necessary to initiate the event handling system during the application bootstrap phase.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/event.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    // 這裡省略了其他設定 ...\n    webman\\event\\EventManager::class,\n];\n```\n\n----------------------------------------\n\nTITLE: Installing Error Code Package via Composer\nDESCRIPTION: Command to install the teamones/response-code-msg package using Composer package manager.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/components/generate_error_code.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ncomposer require teamones/response-code-msg\n```\n\n----------------------------------------\n\nTITLE: Context-Based State Management in Webman PHP\nDESCRIPTION: Shows proper way to handle request state data using Context in coroutine environment.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/coroutine/fiber.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace app\\controller;\n\nuse support\\Request;\nuse support\\Context;\nuse Workerman\\Timer;\n\nclass TestController\n{\n    public function index(Request $request)\n    {\n        Context::set('name', $request->get('name'));\n        Timer::sleep(5);\n        return Context::get('name');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Exclusion Pattern for Packaging\nDESCRIPTION: PHP configuration snippet to set the exclusion pattern in the Webman console plugin. This pattern determines which files and directories to exclude during the packaging process to reduce the final binary size.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/others/bin.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n'exclude_pattern'   => '#^(?!.*(composer.json|/.github/|/.idea/|/.git/|/.setting/|/runtime/|/vendor-bin/|/build/|vendor/webman/admin))(.*)$#'\n```\n\n----------------------------------------\n\nTITLE: Implementing Plugin-Specific Logging in Webman PHP\nDESCRIPTION: Demonstrates how to use channel-specific logging for plugins using the Log class with a specified channel path\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/app/log.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse support\\Log;\nLog::channel('plugin.admin.default')->info('test');\n```\n\n----------------------------------------\n\nTITLE: Basic Permission Usage Examples in Webman\nDESCRIPTION: Code examples demonstrating how to add permissions to users, assign roles, and add policies using the Permission class.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-hk/casbin.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse webman\\permission\\Permission;\n\n// adds permissions to a user\nPermission::addPermissionForUser('eve', 'articles', 'read');\n// adds a role for a user.\nPermission::addRoleForUser('eve', 'writer');\n// adds permissions to a rule\nPermission::addPolicy('writer', 'articles','edit');\n```\n\n----------------------------------------\n\nTITLE: Installing WebMan Application Plugin from Source Code\nDESCRIPTION: Command to install a WebMan application plugin from a source code package. This should be run after uploading the plugin files to the correct directory.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/app/install.md#2025-04-12_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nphp webman app-plugin:install plugin-name\n```\n\n----------------------------------------\n\nTITLE: Installing PhpSpreadsheet with Composer\nDESCRIPTION: This command installs the PhpSpreadsheet library using Composer, a dependency manager for PHP. It downloads and includes the necessary files into your project.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/es/components/excel.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ncomposer require phpoffice/phpspreadsheet\n```\n\n----------------------------------------\n\nTITLE: Allowing Mass Assignment for All Attributes in PHP\nDESCRIPTION: This snippet demonstrates how to allow mass assignment for all attributes by setting the `$guarded` property to an empty array.  Use with caution.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/fr/db/model.md#2025-04-12_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Attributs non autorisés pour les affectations de masse.\n *\n * @var array\n */\nprotected $guarded = [];\n```\n\n----------------------------------------\n\nTITLE: Start Webman in Debug Mode (Linux)\nDESCRIPTION: This command starts the webman server in debug mode. It is suitable for development and debugging, as the output is displayed in the terminal. Closing the terminal will stop the webman service.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/install.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nphp start.php start\n```\n\n----------------------------------------\n\nTITLE: Customizing Captcha Parameters\nDESCRIPTION: Advanced configuration of captcha generation with custom length and character set, demonstrating flexible captcha generation options\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/components/captcha.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\npublic function captcha(Request $request)\n{\n    $length = 4;\n    $chars = '0123456789abcefghijklmnopqrstuvwxyz';\n    $builder = new PhraseBuilder($length, $chars);\n    $captcha = new CaptchaBuilder(null, $builder);\n    $builder->build();\n    $request->session()->set('captcha', strtolower($builder->getPhrase()));\n    $img_content = $builder->get();\n    return response($img_content, 200, ['Content-Type' => 'image\\/jpeg']);\n}\n```\n\n----------------------------------------\n\nTITLE: Assigning Template Variables with View::assign()\nDESCRIPTION: This PHP code demonstrates how to assign variables to a template using the `View::assign()` method.  It assigns individual variables and an array of variables before rendering the view. This is especially useful in scenarios like sharing user information across multiple templates from a middleware.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-hk/view.md#2025-04-12_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n\"<?php\nnamespace app\\controller;\n\nuse support\\Request;\nuse support\\View;\n\nclass UserController\n{\n    public function hello(Request $request)\n    {\n        View::assign([\n            'name1' => 'value1',\n            'name2'=> 'value2',\n        ]);\n        View::assign('name3', 'value3');\n        return view('user/test', ['name' => 'webman']);\n    }\n}\n?>\"\n```\n\n----------------------------------------\n\nTITLE: Static File Middleware Configuration in Webman PHP\nDESCRIPTION: Middleware for handling static file access with options to block hidden files and add cross-origin headers in a Webman PHP application\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-hk/static.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace support\\middleware;\n\nuse Webman\\MiddlewareInterface;\nuse Webman\\Http\\Response;\nuse Webman\\Http\\Request;\n\nclass StaticFile implements MiddlewareInterface\n{\n    public function process(Request $request, callable $next) : Response\n    {\n        // Forbid access to hidden files starting with '.'\n        if (strpos($request->path(), '/.') !== false) {\n            return response('<h1>403 forbidden</h1>', 403);\n        }\n        /** @var Response $response */\n        $response = $next($request);\n        // Add cross-origin HTTP headers\n        /*$response->withHeaders([\n            'Access-Control-Allow-Origin'      => '*',\n            'Access-Control-Allow-Credentials' => 'true',\n        ]);*/\n        return $response;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Get All Input Fields Except Specified Ones - Webman PHP\nDESCRIPTION: Retrieves all input fields from POST and GET parameters except the specified ones (avatar and age in this example).\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/th/request.md#2025-04-12_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n// รับข้อมูลทั้งหมดนอกเหนือจาก avatar และ age\n$except = $request->except(['avatar', 'age']);\n```\n\n----------------------------------------\n\nTITLE: Displaying Pagination in PHP Native Template\nDESCRIPTION: This HTML code demonstrates how to display the pagination links in a PHP native template using the `$paginator` object passed from the controller. It directly outputs the paginator object, which renders the pagination links.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/fr/db/paginator.md#2025-04-12_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<html>\n<head>\n  <!-- Built-in support for Bootstrap pagination styles -->\n  <link rel=\"stylesheet\" href=\"//maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css\">\n</head>\n<body>\n\n<?= $paginator; ?>\n\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: MySQL Config Command Output Example\nDESCRIPTION: Example output showing the formatted table display of MySQL configuration when running the custom config:mysql command\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/plugin/console.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n+-------+---------+--------+-----------+------+----------+----------+----------+-------------+---------+-----------------+--------+--------+--------+--------+---------+\n| name  | default | driver | host      | port | database | username | password | unix_socket | charset | collation       | prefix | strict | engine | schema | sslmode |\n+-------+---------+--------+-----------+------+----------+----------+----------+-------------+---------+-----------------+--------+--------+--------+--------+---------+\n| mysql | true    | mysql  | 127.0.0.1 | 3306 | mysql    | root     | ******   |             | utf8    | utf8_unicode_ci |        | 1      |        |        |         |\n+-------+---------+--------+-----------+------+----------+----------+----------+-------------+---------+-----------------+--------+--------+--------+--------+---------+\n```\n\n----------------------------------------\n\nTITLE: Using whereExists Clauses With Webman DB Query Builder\nDESCRIPTION: This snippet demonstrates how to use `whereExists` to filter results based on the existence of records in a related table.  It finds users that have orders.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/db/queries.md#2025-04-12_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n// select * from users where exists ( select 1 from orders where orders.user_id = users.id )\n$users = Db::table('users')\n           ->whereExists(function ($query) {\n               $query->select(Db::raw(1))\n                     ->from('orders')\n                     ->whereRaw('orders.user_id = users.id');\n           })\n           ->get();\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Primary Key in Eloquent Model\nDESCRIPTION: Shows how to override the default 'id' primary key by setting the $primaryKey property in an Eloquent model.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/db/model.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nclass User extends Model\n{\n    protected $primaryKey = 'uid';\n}\n```\n\n----------------------------------------\n\nTITLE: Configurar Blade en Webman\nDESCRIPTION: Este snippet muestra cómo configurar el motor de plantillas Blade en Webman.  Incluye la declaración de la clase Blade.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/es/view.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse support\\view\\Blade;\n\nreturn [\n    'handler' => Blade::class\n];\n```\n\n----------------------------------------\n\nTITLE: Unbegrenztes Wachstum eines globalen Arrays in PHP\nDESCRIPTION: Dieses Beispiel zeigt, wie die Verwendung eines globalen Arrays zu Speicherverlusten führen kann, wenn es mit jeder Anfrage unbegrenzt erweitert wird.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/de/others/memory-leak.md#2025-04-12_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nclass Index\n{\n    public function index(Request $request)\n    {\n        global $data;\n        $data[] = time();\n        return response($foo->sayHello());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Global Variable Usage in PHP Coroutines\nDESCRIPTION: Demonstrates an incorrect approach to storing request-related data in static variables, which can lead to data contamination in a coroutine environment.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/coroutine/fiber.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace app\\controller;\n\nuse support\\Request;\nuse Workerman\\Timer;\n\nclass TestController\n{\n    protected static $name = '';\n\n    public function index(Request $request)\n    {\n        static::$name = $request->get('name');\n        Timer::sleep(5);\n        return static::$name;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Mass Assignment Protection with $fillable\nDESCRIPTION: Demonstrates how to use the $fillable property to specify which attributes should be mass-assignable to protect against mass assignment vulnerabilities.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/tr/db/model.md#2025-04-12_snippet_24\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace app\\model;\n\nuse support\\Model;\n\nclass Flight extends Model\n{\n    /**\n     * Toplu atamaya izin verilen özellikler.\n     *\n     * @var array\n     */\n    protected $fillable = ['name'];\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Session Data Existence in Webman\nDESCRIPTION: Shows how to check if a specific session key exists and is not null using the has method. Returns false if the session key doesn't exist or its value is null.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/fr/session.md#2025-04-12_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n$session = $request->session();\n$has = $session->has('name');\n```\n\n----------------------------------------\n\nTITLE: Using Closure Functions for Event Handling in PHP\nDESCRIPTION: Example of using a closure function as an event handler in the config/event.php file.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/components/event.md#2025-04-12_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\nreturn [\n    'user.login' => [\n        function($user){\n            var_dump($user);\n        }\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Installing webman/push\nDESCRIPTION: This command installs the webman/push plugin using composer. It adds the necessary files and dependencies to your webman project.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/th/plugin/push.md#2025-04-12_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncomposer require webman/push\n```\n\n----------------------------------------\n\nTITLE: Random Ordering in Webman PHP\nDESCRIPTION: This snippet shows how to retrieve results in a random order using the inRandomOrder method.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/hi/db/queries.md#2025-04-12_snippet_32\n\nLANGUAGE: php\nCODE:\n```\n$randomUser = Db::table('users')\n                ->inRandomOrder()\n                ->first();\n```\n\n----------------------------------------\n\nTITLE: Installing PhpSpreadsheet via Composer in PHP\nDESCRIPTION: This snippet shows the Composer command to install the PhpSpreadsheet library in a PHP project.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/components/excel.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ncomposer require phpoffice/phpspreadsheet\n```\n\n----------------------------------------\n\nTITLE: Private Channel Implementation in Javascript\nDESCRIPTION: Example of implementing private channels for secure communication\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/plugin/push.md#2025-04-12_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar connection = new Push({\n    url: 'ws://127.0.0.1:3131', // websocket address\n    app_key: '<app_key>',\n    auth: '/plugin/webman/push/auth' // subscription authentication (private channel only)\n});\n\n// Assuming user uid is 1\nvar uid = 1;\n// The browser listens for messages on the private-user-1 private channel\nvar user_channel = connection.subscribe('private-user-' + uid);\n```\n\n----------------------------------------\n\nTITLE: Installing Webman Permission Package via Composer\nDESCRIPTION: Command to install the tinywan/webman-permission package using Composer package manager.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/casbin.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ncomposer require tinywan/webman-permission\n```\n\n----------------------------------------\n\nTITLE: Contaminación de variables globales en corutinas (Incorrecto)\nDESCRIPTION: Este snippet demuestra el problema de la contaminación de variables globales/estáticas en un entorno de corutinas. Almacenar información de estado relacionada con la solicitud en variables globales o estáticas puede llevar a resultados inesperados. El snippet muestra un ejemplo donde dos solicitudes consecutivas sobrescriben una variable estática, resultando en una respuesta incorrecta para la primera solicitud.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/es/upgrade/1-5.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n\"<?php\\n\\nnamespace app\\controller;\\n\\nuse support\\Request;\\nuse Workerman\\Timer;\\n\\nclass TestController\\n{\\n    protected static $name = '';\\n\\n    public function index(Request $request)\\n    {\\n        static::$name = $request->get('name');\\n        Timer::sleep(5);\\n        return static::$name;\\n    }\\n}\\n\"\n```\n\n----------------------------------------\n\nTITLE: Executing Phar Packaging Command in Webman PHP\nDESCRIPTION: Shell command to execute the phar packaging process in the Webman project root directory.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/others/phar.md#2025-04-12_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nphp webman phar:pack\n```\n\n----------------------------------------\n\nTITLE: Multi-Database Connection Selection in PHP\nDESCRIPTION: Demonstrates selecting different database connections using Db::connection() method, allowing switching between configured database connections\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/th/db/config.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// Default database connection\n$users = Db::table('users')->where('name', 'John')->first();\n\n// MySQL2 connection\n$users = Db::connection('mysql2')->table('users')->where('name', 'John')->first();\n\n// PostgreSQL connection\n$users = Db::connection('pgsql')->table('users')->where('name', 'John')->first();\n```\n\n----------------------------------------\n\nTITLE: Obtener Configuración Global en PHP\nDESCRIPTION: Método para recuperar configuraciones generales o específicas usando la función config(). Permite acceder a configuraciones de diferentes archivos y niveles del proyecto.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/es/config.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nconfig();\n```\n\nLANGUAGE: php\nCODE:\n```\nconfig('app');\n```\n\nLANGUAGE: php\nCODE:\n```\nconfig('app.debug');\n```\n\nLANGUAGE: php\nCODE:\n```\nconfig('archivo.clave1.clave2');\n```\n\n----------------------------------------\n\nTITLE: Installing Crontab Component\nDESCRIPTION: This command installs the `workerman/crontab` component using Composer, which is a dependency manager for PHP. This command will download and install the necessary files to use the crontab functionality in your Webman project.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/components/crontab.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n\"composer require workerman/crontab\"\n```\n\n----------------------------------------\n\nTITLE: Correct View Configuration\nDESCRIPTION: This code snippet demonstrates the correct way to configure the view suffix in webman version 1.4. The suffix must be specified within the 'options' array.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/upgrade/1-4.md#2025-04-12_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n```php\nuse support\\view\\Raw;\nreturn [\n    'handler' => Raw::class,\n    'options' => [\n        'view_suffix' => '.php'\n    ]\n];\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Base Model for Plugin-Specific Database in Webman PHP\nDESCRIPTION: This snippet shows how to create a base model class for a Webman PHP plugin that sets the default database connection for all derived models.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/tr/app/database.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace plugin\\foo\\app\\model;\n\nuse DateTimeInterface;\nuse support\\Model;\n\nclass Base extends Model\n{\n    /**\n     * @var string\n     */\n    protected $connection = 'plugin.foo.mysql';\n\n}\n```\n\n----------------------------------------\n\nTITLE: Application Plugin Directory Structure\nDESCRIPTION: This snippet shows the directory structure of a typical application plugin in Webman. It includes directories for controllers, models, views, configuration, and public assets.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/pt/plugin/app.md#2025-04-12_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nplugin/\n└── cms\n    ├── app\n    │   ├── controller\n    │   │   └── IndexController.php\n    │   ├── exception\n    │   │   └── Handler.php\n    │   ├── functions.php\n    │   ├── middleware\n    │   ├── model\n    │   └── view\n    │       └── index\n    │           └── index.html\n    ├── config\n    │   ├── app.php\n    │   ├── autoload.php\n    │   ├── container.php\n    │   ├── database.php\n    │   ├── exception.php\n    │   ├── log.php\n    │   ├── middleware.php\n    │   ├── process.php\n    │   ├── redis.php\n    │   ├── route.php\n    │   ├── static.php\n    │   ├── thinkorm.php\n    │   ├── translation.php\n    │   └── view.php\n    └── public\n```\n\n----------------------------------------\n\nTITLE: Disabling Auto-Incrementing Primary Key in Eloquent\nDESCRIPTION: Shows how to disable auto-incrementing for the primary key by setting the $incrementing property to false in an Eloquent model.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/jp/db/model.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nclass User extends Model\n{\n    public $incrementing = false;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Sleep with Non-Blocking Timer in Webman\nDESCRIPTION: Demonstrates using Timer::sleep() for non-blocking sleep operation in a PHP controller method\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/th/coroutine/fiber.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace app\\controller;\n\nuse support\\Request;\nuse Workerman\\Timer;\n\nclass TestController\n{\n    public function index(Request $request)\n    {\n        // Sleep for 1.5 seconds without blocking\n        Timer::sleep(1.5);\n        return $request->getRemoteIp();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Changing the Default Language in a Controller\nDESCRIPTION: Example of using the locale() function to change the current language setting in a controller before translation.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/components/translation.md#2025-04-12_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\n\nclass UserController\n{\n    public function get(Request $request)\n    {\n        // Изменение языка\n        locale('en');\n        $hello = trans('hello'); // hello world!\n        return response($hello);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Form for Image Upload\nDESCRIPTION: HTML form template for handling file uploads with multipart form data encoding. The form submits to the /user/img endpoint.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/components/image.md#2025-04-12_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n  <form method=\"post\" action=\"/user/img\" enctype=\"multipart/form-data\">\n      <input type=\"file\" name=\"file\">\n      <input type=\"submit\" value=\"Submit\">\n  </form>\n```\n\n----------------------------------------\n\nTITLE: Common Casbin Permission Management APIs\nDESCRIPTION: Collection of commonly used Casbin APIs for managing user permissions, roles, and access control\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/fr/components/casbin.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n# Add permission for user\nEnforcer::addPermissionForUser('user1', '/user', 'read');\n\n# Delete user permission\nEnforcer::deletePermissionForUser('user1', '/user', 'read');\n\n# Get user permissions\nEnforcer::getPermissionsForUser('user1');\n\n# Add role to user\nEnforcer::addRoleForUser('user1', 'role1');\n\n# Add permission to role\nEnforcer::addPermissionForUser('role1', '/user', 'edit');\n\n# Check user authorization\nEnforcer::enforce(\"user1\", \"/user\", \"edit\");\n```\n\n----------------------------------------\n\nTITLE: Handling 404 Callback in Webman\nDESCRIPTION: This snippet shows how to configure a fallback route for a specific plugin in Webman using the `Route::fallback()` method.  The first argument is a callback function that defines the action to be taken when a 404 error occurs within the specified plugin. The second argument specifies the name of the plugin for which the fallback is being defined.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/app/route.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nRoute::fallback(function(){\n    return redirect('/');\n}, 'foo');\n```\n\n----------------------------------------\n\nTITLE: Connecting to WSS (JavaScript)\nDESCRIPTION: This JavaScript code shows how to connect to the `webman/push` server using wss (WebSocket Secure). The `url` should start with `wss://` and point to the domain configured with the SSL certificate.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-hk/plugin/push.md#2025-04-12_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar connection = new Push({\n    url: 'wss://example.com',\n    app_key: '<app_key，在config/plugin/webman/push/app.php裡獲取>',\n    auth: '/plugin/webman/push/auth' // 訂閱鑒權(僅限於私有頻道)\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Low-Privilege User Permissions in WebMan\nDESCRIPTION: Recommended configuration for setting low-privilege users for running WebMan processes, ensuring minimal system access risks\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/th/others/security.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// Set low-privilege user in config/server.php\n'user' => 'low_privilege_user',\n'group' => 'low_privilege_group'\n```\n\n----------------------------------------\n\nTITLE: Initializing AOP ClassLoader in PHP\nDESCRIPTION: Code snippet to initialize the AOP ClassLoader in the entry file start.php.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/aop.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Hyperf\\AopIntegration\\ClassLoader;\n\nif ($timezone = config('app.default_timezone')) {\n    date_default_timezone_set($timezone);\n}\n\n// Initialization\nClassLoader::init();\n```\n\n----------------------------------------\n\nTITLE: Installing Hyperf AOP Integration Package\nDESCRIPTION: Command to install the Hyperf AOP integration package via Composer\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/pt/aop.md#2025-04-12_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require \"hyperf/aop-integration: ^1.1\"\n```\n\n----------------------------------------\n\nTITLE: Basic Redis Usage Example\nDESCRIPTION: Example controller demonstrating basic Redis operations in Webman PHP\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/db/redis.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\nuse support\\Redis;\n\nclass UserController\n{\n    public function db(Request $request)\n    {\n        $key = 'test_key';\n        Redis::set($key, rand());\n        return response(Redis::get($key));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Where Clause with Array Conditions in Webman PHP\nDESCRIPTION: This code snippet demonstrates how to use an array of conditions with the `where()` clause in the Webman PHP framework's database query builder. This allows for multiple conditions to be specified concisely.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/fr/db/queries.md#2025-04-12_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')->where([\n    ['status', '=', '1'],\n    ['subscribed', '<>', '1'],\n])->get();\n```\n\n----------------------------------------\n\nTITLE: Custom Business Exception Response Format\nDESCRIPTION: JSON response format for custom business exceptions.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/exception.md#2025-04-12_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\"code\": 3000, \"message\": \"参数错误\"}\n```\n\n----------------------------------------\n\nTITLE: Empty ErrorCode Class File\nDESCRIPTION: This is the initial state of the ErrorCode class, located at `./support/ErrorCode.php`. The class is automatically populated with error code constants by the `teamones/response-code-msg` package during the application's startup process, based on the defined configuration. Avoid manual modification as the package will regenerate its content.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/th/components/generate_error_code.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n\"<?php\n/**\n * ไฟล์ที่สร้างโดยอัตโนมัติ กรุณาอย่าแก้ไขด้วยตนเอง\n * @Author:$Id$\n */\nnamespace support;\n\nclass ErrorCode\n{\n}\"\n```\n\n----------------------------------------\n\nTITLE: Setting Context Data in PHP\nDESCRIPTION: The `Context::set()` method stores data within the request context, associating a value with a given name. This data is accessible throughout the request's lifecycle and is automatically cleared when the request completes. It accepts a string for the name and mixed type for the value.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/coroutine/context.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nContext::set(string $name, $mixed $value);\n```\n\n----------------------------------------\n\nTITLE: Configuring Process Monitor in Webman PHP\nDESCRIPTION: Configuration for the Webman process monitor, defining monitored directories, file extensions, and monitoring options. Located in config/process.php, it controls both file update detection for auto-reloading and memory consumption monitoring.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/others/monitor.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nglobal $argv;\n\nreturn [\n    // File update detection and automatic reload\n    'monitor' => [\n        'handler' => process\\Monitor::class,\n        'reloadable' => false,\n        'constructor' => [\n            // Monitor these directories\n            'monitorDir' => array_merge([    // Directories whose files need to be monitored\n                app_path(),\n                config_path(),\n                base_path() . '/process',\n                base_path() . '/support',\n                base_path() . '/resource',\n                base_path() . '/.env',\n            ], glob(base_path() . '/plugin/*/app'), glob(base_path() . '/plugin/*/config'), glob(base_path() . '/plugin/*/api')),\n            // Files with these suffixes will be monitored\n            'monitorExtensions' => [\n                'php', 'html', 'htm', 'env'\n            ],\n            'options' => [\n                'enable_file_monitor' => !in_array('-d', $argv) && DIRECTORY_SEPARATOR === '/', // Whether to enable file monitoring\n                'enable_memory_monitor' => DIRECTORY_SEPARATOR === '/',                      // Whether to enable memory monitoring\n            ]\n        ]\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring View Handler with Current Syntax\nDESCRIPTION: Example showing the correct way of configuring view file suffix in view.php using the options array\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/upgrade/1-4.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse support\\view\\Raw;\nreturn [\n    'handler' => Raw::class,\n    'options' => [\n        'view_suffix' => '.php'\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Creating a Controller for AOP Testing in PHP\nDESCRIPTION: IndexController class with a json method that uses the UserService to demonstrate AOP functionality.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/aop.md#2025-04-12_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse app\\service\\UserService;\nuse support\\Request;\n\nclass IndexController\n{\n    public function json(Request $request)\n    {\n        return json(['code' => 0, 'msg' => 'ok', 'data' => (new UserService())->first()]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating 500 HTML template in Webman\nDESCRIPTION: This code creates an HTML template for a 500 error page. The template includes a title and displays the exception message, which is escaped for security.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/others/custom-error-page.md#2025-04-12_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<!doctype html>\n<html>\n<head>\n    <meta charset=\"utf-8\">\n    <title>500 Internal Server Error</title>\n</head>\n<body>\n自定义错误模版：\n<?=htmlspecialchars($exception)?>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Configurar ThinkPHP Template en Webman\nDESCRIPTION: Este snippet muestra cómo configurar el motor de plantillas think-template en Webman. Incluye la declaración de la clase ThinkPHP y la configuración de opciones como view_suffix, tpl_begin y tpl_end.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/es/view.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse support\\view\\ThinkPHP;\n\nreturn [\n    'handler' => ThinkPHP::class,\n    'options' => [\n        'view_suffix' => 'html',\n        'tpl_begin' => '{',\n        'tpl_end' => '}'\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Default Attribute Values\nDESCRIPTION: Setting default values for model attributes in Eloquent.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/de/db/model.md#2025-04-12_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nclass User extends Model\n{\n    /**\n     * Standardattributwerte des Modells\n     *\n     * @var array\n     */\n    protected $attributes = [\n        'delayed' => false,\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Register Blade Component in Webman\nDESCRIPTION: This code shows how to register the Alert Blade component in the Webman configuration file.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/es/view.md#2025-04-12_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse support\\view\\Blade;\nreturn [\n    'handler' => Blade::class,\n    'extension' => function (Jenssegers\\Blade\\Blade $blade) {\n        $blade->component('alert', app\\view\\components\\Alert::class);\n    }\n];\n```\n\n----------------------------------------\n\nTITLE: Extender Blade en Webman\nDESCRIPTION: Este snippet muestra cómo extender la instancia de vista Blade en Webman.  Agrega una directiva a la instancia de Blade.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/es/view.md#2025-04-12_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse support\\view\\Blade;\nreturn [\n    'handler' => Blade::class,\n    'extension' => function (Jenssegers\\Blade\\Blade $blade) {\n        // Agregar directiva a blade\n        $blade->directive('mydate', function ($timestamp) {\n            return \"<?php echo date('Y-m-d H:i:s', $timestamp); ?>\";\n        });\n    }\n];\n```\n\n----------------------------------------\n\nTITLE: Creazione di un componente Blade\nDESCRIPTION: Esempio di creazione di un componente Blade personalizzato chiamato Alert.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/view.md#2025-04-12_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace app\\view\\components;\n\nuse Illuminate\\View\\Component;\n\nclass Alert extends Component\n{\n    \n    public function __construct()\n    {\n    \n    }\n    \n    public function render()\n    {\n        return view('components/alert')->rawBody();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configurazione avanzata di think-template con opzioni\nDESCRIPTION: Esempio di configurazione di think-template con opzioni aggiuntive come view_suffix e delimitatori.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/view.md#2025-04-12_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'handler' => ThinkPHP::class,\n    'options' => [\n        'view_suffix' => 'html',\n        'tpl_begin' => '{',\n        'tpl_end' => '}'\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Get Request URI - Webman PHP\nDESCRIPTION: Retrieves the request URI, including both the path and the query string.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/th/request.md#2025-04-12_snippet_26\n\nLANGUAGE: php\nCODE:\n```\n$request->uri();\n```\n\n----------------------------------------\n\nTITLE: Creating DebugAspect Class\nDESCRIPTION: This PHP code defines an aspect class DebugAspect that extends AbstractAspect and intercepts the UserService::first method. The process method adds a var_dump statement before proceeding with the original method execution.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/aop.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n\"<?php\\nnamespace app\\aspect;\\n\\nuse app\\service\\UserService;\\nuse Hyperf\\Di\\Aop\\AbstractAspect;\\nuse Hyperf\\Di\\Aop\\ProceedingJoinPoint;\\n\\nclass DebugAspect extends AbstractAspect\\n{\\n    public $classes = [\\n        UserService::class . '::first',\\n    ];\\n\\n    public function process(ProceedingJoinPoint $proceedingJoinPoint)\\n    {\\n        var_dump(11);\\n        return $proceedingJoinPoint->process();\\n    }\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Using Local Variables for Thread-Safe Operations in Coroutines\nDESCRIPTION: An example showing how local variables provide safe data isolation in coroutines. Since coroutines cannot access each other's local variables, they don't suffer from the data pollution issues that affect global and static variables.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/fr/upgrade/1-5.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace app\\controller;\n\nuse support\\Request;\nuse support\\Context;\nuse Workerman\\Timer;\n\nclass TestController\n{\n    public function index(Request $request)\n    {\n        $name = $request->get('name');\n        Timer::sleep(5);\n        return $name;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Local Variable Usage in Coroutine Environment\nDESCRIPTION: Demonstrates safe usage of local variables in coroutine environment that prevents data contamination.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/coroutine/fiber.md#2025-04-12_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace app\\controller;\n\nuse support\\Request;\nuse support\\Context;\nuse Workerman\\Timer;\n\nclass TestController\n{\n    public function index(Request $request)\n    {\n        $name = $request->get('name');\n        Timer::sleep(5);\n        return $name;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Example User Controller (Blade)\nDESCRIPTION: This PHP code defines a simple controller with a `hello` action that renders a view named `user/hello` and passes the variable 'name' with the value 'webman'. This example uses the Blade template engine.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-hk/view.md#2025-04-12_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n\"<?php\nnamespace app\\controller;\n\nuse support\\Request;\n\nclass UserController\n{\n    public function hello(Request $request)\n    {\n        return view('user/hello', ['name' => 'webman']);\n    }\n}\n?>\"\n```\n\n----------------------------------------\n\nTITLE: Setting Context Data in PHP\nDESCRIPTION: Sets a value in the request context using a string key. The data is then accessible within the scope of the current request.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/es/coroutine/context.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nContext::set(string $name, mixed $value);\n```\n\n----------------------------------------\n\nTITLE: Configuring Closure Event Handlers in PHP\nDESCRIPTION: Example configuration showing how to use closure functions as event handlers instead of class methods.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/components/event.md#2025-04-12_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\nreturn [\n    'user.login' => [\n        function($user){\n            var_dump($user);\n        }\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Installing MongoDB Package for PHP > 7.2\nDESCRIPTION: Composer command to install MongoDB package dependencies for PHP versions greater than 7.2\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/db/mongo.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ncomposer require -W illuminate/database jenssegers/mongodb ^3.8.0\n```\n\n----------------------------------------\n\nTITLE: Route Middleware Configuration\nDESCRIPTION: Examples of applying middleware to individual routes and route groups\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/route.md#2025-04-12_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nRoute::any('/admin', [app\\admin\\controller\\IndexController::class, 'index'])->middleware([\n    app\\middleware\\MiddlewareA::class,\n    app\\middleware\\MiddlewareB::class,\n]);\n\nRoute::group('/blog', function () {\n   Route::any('/create', function () {return response('crea');});\n   Route::any('/edit', function () {return response('modifica');});\n   Route::any('/view/{id}', function ($request, $id) {response(\"visualizza $id\");});\n})->middleware([\n    app\\middleware\\MiddlewareA::class,\n    app\\middleware\\MiddlewareB::class,\n]);\n```\n\n----------------------------------------\n\nTITLE: Crontab Time Format Explanation\nDESCRIPTION: Explains the format used for specifying crontab schedules, including seconds, minutes, hours, day of month, month, and day of week.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/components/crontab.md#2025-04-12_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n0   1   2   3   4   5\n|   |   |   |   |   |\n|   |   |   |   |   +------ day of week (0 - 6) (Sunday=0)\n|   |   |   |   +------ month (1 - 12)\n|   |   |   +-------- day of month (1 - 31)\n|   |   +---------- hour (0 - 23)\n|   +------------ minute (0 - 59)\n+-------------- seconds (0-59) [optional, if missing 0, minimum time unit is minute]\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Private Channels (JavaScript)\nDESCRIPTION: This JavaScript code shows how to subscribe to a private channel using the `webman/push` client. Private channels require authentication, specified by the `auth` parameter in the `Push` constructor.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-hk/plugin/push.md#2025-04-12_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar connection = new Push({\n    url: 'ws://127.0.0.1:3131', // websocket地址\n    app_key: '<app_key>',\n    auth: '/plugin/webman/push/auth' // 訂閱鑒權(僅限於私有頻道)\n});\n\n// 假設用戶uid為1\nvar uid = 1;\n// 瀏覽器監聽private-user-1私有頻道的消息\nvar user_channel = connection.subscribe('private-user-' + uid);\n```\n\n----------------------------------------\n\nTITLE: Installing PHPUnit with Composer\nDESCRIPTION: This command installs PHPUnit as a development dependency using Composer. The `--dev` flag ensures that PHPUnit is only included in the development environment.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-hk/components/unitest.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ncomposer require --dev phpunit/phpunit\n```\n\n----------------------------------------\n\nTITLE: Removing Composer Proxy (Shell)\nDESCRIPTION: This command removes any composer proxy configurations. This prevents issues caused by delayed package versions when upgrading. In some cases, package version discrepancies can lead to upgrade failures.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/upgrade/1-6.md#2025-04-12_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\ncomposer config -g --unset repos.packagist\n```\n\n----------------------------------------\n\nTITLE: Starting Packaged Webman PHP Application\nDESCRIPTION: Shell commands to start the packaged Webman application in both foreground and background modes.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/others/phar.md#2025-04-12_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nphp webman.phar start\n```\n\nLANGUAGE: Shell\nCODE:\n```\nphp webman.phar start -d\n```\n\n----------------------------------------\n\nTITLE: Creating a User Controller with View Rendering in PHP\nDESCRIPTION: This snippet demonstrates a basic controller class that renders a view using the view() helper function, passing a name parameter to the template.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/de/view.md#2025-04-12_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\n\nclass UserController\n{\n    public function hello(Request $request)\n    {\n        return view('user/hello', ['name' => 'webman']);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Reusing Database Configuration from Another Plugin in Webman PHP\nDESCRIPTION: This snippet demonstrates how to reuse a database configuration from another plugin (in this case, webman-admin) in a Webman PHP plugin's base model.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/tr/app/database.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace plugin\\foo\\app\\model;\n\nuse DateTimeInterface;\nuse support\\Model;\n\nclass Base extends Model\n{\n    /**\n     * @var string\n     */\n    protected $connection = 'plugin.admin.mysql';\n\n}\n```\n\n----------------------------------------\n\nTITLE: Querying All Records from Eloquent Model\nDESCRIPTION: Demonstrates retrieving all records from a database table using an Eloquent model.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/tr/db/model.md#2025-04-12_snippet_10\n\nLANGUAGE: PHP\nCODE:\n```\n$users = app\\model\\User::all();\n\nforeach ($users as $user) {\n    echo $user->name;\n}\n```\n\n----------------------------------------\n\nTITLE: Installazione di webman/push tramite Composer\nDESCRIPTION: Comando per installare il plugin webman/push utilizzando Composer\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/plugin/push.md#2025-04-12_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncomposer require webman/push\n```\n\n----------------------------------------\n\nTITLE: Esempio di controller con motore di template Twig\nDESCRIPTION: Implementazione di un controller che utilizza il motore di template Twig per renderizzare una vista.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/view.md#2025-04-12_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\n\nclass UserController\n{\n    public function hello(Request $request)\n    {\n        return view('user/hello', ['name' => 'webman']);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Plural Forms in Webman Translations\nDESCRIPTION: Example of defining and using plural forms in Webman language files.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/components/translation.md#2025-04-12_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n// Language file\nreturn [\n    'apple_count' => 'There is one apple|There are %count% apples',\n];\n\n// Usage\ntrans('apple_count', ['%count%' => 10]); // There are 10 apples\n```\n\n----------------------------------------\n\nTITLE: Using Offset and Limit for Pagination in webman-php\nDESCRIPTION: Using offset and limit to implement pagination in queries. This example skips the first 10 results and returns the next 5 records.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/db/queries.md#2025-04-12_snippet_31\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')\n                ->offset(10)\n                ->limit(5)\n                ->get();\n```\n\n----------------------------------------\n\nTITLE: Redis Configuration in PHP\nDESCRIPTION: This configuration snippet sets up default connection settings for Redis in a Webman PHP application. It defines host, password, port, and database index for the connection which will be used across the application.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/es/db/redis.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'default' => [\n        'host'     => '127.0.0.1',\n        'password' => null,\n        'port'     => 6379,\n        'database' => 0,\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Nginx Configuration for WSS Proxy with webman/push\nDESCRIPTION: Nginx server block configuration for setting up a WSS proxy to enable secure WebSocket connections for webman/push.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/de/plugin/push.md#2025-04-12_snippet_6\n\nLANGUAGE: nginx\nCODE:\n```\nserver {\n    # .... Hier werden andere Konfigurationen ausgelassen ...\n\n    location /app/<app_key>\n    {\n        proxy_pass http://127.0.0.1:3131;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"Upgrade\";\n        proxy_set_header X-Real-IP $remote_addr;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom JSON Response Format for MyBusinessException in Webman PHP\nDESCRIPTION: This JSON snippet shows the customized response format when using the MyBusinessException class for JSON requests.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/exception.md#2025-04-12_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\"code\": 3000, \"message\": \"Parametro errato\"}\n```\n\n----------------------------------------\n\nTITLE: Deleting All Session Data in Webman PHP\nDESCRIPTION: Shows how to clear all session data using the flush() method.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/session.md#2025-04-12_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$request->session()->flush();\n```\n\n----------------------------------------\n\nTITLE: Installing Yansongda/Pay Package via Composer\nDESCRIPTION: Command to install the Yansongda/Pay package version 3.0.0 or higher using Composer.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-hk/components/payment.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ncomposer require yansongda/pay ^3.0.0\n```\n\n----------------------------------------\n\nTITLE: Check if Request is Pjax in webman-php\nDESCRIPTION: This snippet demonstrates how to check if the current request is a Pjax request using `$request->isPjax()` in webman-php. It returns a boolean indicating if the request was a Pjax request.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/pt/request.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$request->isPjax();\n```\n\n----------------------------------------\n\nTITLE: Installing the Webman Event Library using Composer\nDESCRIPTION: This snippet demonstrates how to install the Webman Event library via Composer, which is a prerequisite for managing events in your application.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-hk/event.md#2025-04-12_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require tinywan/webman-event\n```\n\n----------------------------------------\n\nTITLE: HTML Form for File Upload\nDESCRIPTION: This HTML snippet creates a form for uploading image files. It includes a file input field and a submit button. The form is configured to use the POST method and multipart/form-data encoding for file uploads.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/components/image.md#2025-04-12_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n\"<form method=\\\"post\\\" action=\\\"/user/img\\\" enctype=\\\"multipart/form-data\\\">\\n    <input type=\\\"file\\\" name=\\\"file\\\">\\n    <input type=\\\"submit\\\" value=\\\"提交\\\">\\n</form>\"\n```\n\n----------------------------------------\n\nTITLE: Estensione di Blade in webman\nDESCRIPTION: Esempio di come estendere Blade aggiungendo direttive personalizzate.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/view.md#2025-04-12_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse support\\view\\Blade;\nreturn [\n    'handler' => Blade::class,\n    'extension' => function (Jenssegers\\Blade\\Blade $blade) {\n        $blade->directive('mydate', function ($timestamp) {\n            return \"<?php echo date('Y-m-d H:i:s', $timestamp); ?>\";\n        });\n    }\n];\n```\n\n----------------------------------------\n\nTITLE: Multiple Route Configuration Files\nDESCRIPTION: Loading external route configuration files for multi-application setups using require\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/es/route.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n// Load route configuration for admin application\nrequire_once app_path('admin/config/route.php');\n// Load route configuration for api application\nrequire_once app_path('api/config/route.php');\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Payment Callback Handler\nDESCRIPTION: Handler for processing asynchronous payment notifications from Alipay\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/pt/components/payment.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\npublic function alipayNotify(Request $request): Response\n{\n    $config = Config::get('payment');\n    Pay::config($config);\n    $result = Pay::alipay()->callback($request->post());\n    return new Response(200, [], 'sucesso');\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing Messages to Redis Queue from External Projects\nDESCRIPTION: Function to publish messages to a Redis queue when the webman/redis-queue package is not available.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/queue/redis.md#2025-04-12_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\nfunction redis_queue_send($redis, $queue, $data, $delay = 0) {\n    $queue_waiting = '{redis-queue}-waiting';\n    $queue_delay = '{redis-queue}-delayed';\n    $now = time();\n    $package_str = json_encode([\n        'id'       => rand(),\n        'time'     => $now,\n        'delay'    => $delay,\n        'attempts' => 0,\n        'queue'    => $queue,\n        'data'     => $data\n    ]);\n    if ($delay) {\n        return $redis->zAdd($queue_delay, $now + $delay, $package_str);\n    }\n    return $redis->lPush($queue_waiting.$queue, $package_str);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Routes for AOP Test in PHP\nDESCRIPTION: Route configuration to map the /json endpoint to the IndexController's json method.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/aop.md#2025-04-12_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Webman\\Route;\n\nRoute::any('/json', [app\\controller\\IndexController::class, 'json']);\n```\n\n----------------------------------------\n\nTITLE: Installing Symfony Translation Package\nDESCRIPTION: Command to install the Symfony Translation component via Composer\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/de/components/translation.md#2025-04-12_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require symfony/translation\n```\n\n----------------------------------------\n\nTITLE: Disabling Default Route in PHP Webman\nDESCRIPTION: Configuration to disable the default routing behavior in Webman framework by adding to config/route.php\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/route.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nRoute::disableDefaultRoute();\n```\n\n----------------------------------------\n\nTITLE: User Controller Implementation\nDESCRIPTION: Example controller code showing how to render a view with template variables\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/view.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\n\nclass UserController\n{\n    public function hello(Request $request)\n    {\n        return view('user/hello', ['name' => 'webman']);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking for an AJAX request in Webman (PHP)\nDESCRIPTION: This snippet demonstrates how to check if a request is an AJAX request using `$request->isAjax()`.  This is useful for returning different responses based on whether the request originated from a JavaScript XMLHttpRequest.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/es/request.md#2025-04-12_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n$request->isAjax();\n```\n\n----------------------------------------\n\nTITLE: Payment Configuration File\nDESCRIPTION: This PHP file defines the payment configuration settings for Alipay and WeChat. It includes details such as app IDs, API keys, certificate paths, return URLs, and the payment mode (sandbox or normal).\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/es/components/payment.md#2025-04-12_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n/**\n * @desc Archivo de configuración de pago\n * @author Tinywan(ShaoBo Wan)\n * @date 2022/03/11 20:15\n */\nreturn [\n    'alipay' => [\n        'default' => [\n            // Obligatorio - app_id asignado por Alipay\n            'app_id' => '20160909004708941',\n            // Obligatorio - Clave privada de la aplicación (cadena o ruta)\n            'app_secret_cert' => 'MIIEpAIBAAKCxxxxxxxxxxxxxxP4r3m4OUmD/+XDgCg==',\n            // Obligatorio - Ruta del certificado público de la aplicación\n            'app_public_cert_path' => base_path().'/payment/appCertPublicKey_2016090900470841.crt',\n            // Obligatorio - Ruta del certificado público de Alipay\n            'alipay_public_cert_path' => base_path().'/payment/alipayCertPublicKey_RSA2.crt',\n            // Obligatorio - Ruta del certificado raíz de Alipay\n            'alipay_root_cert_path' => base_path().'/payment/alipayRootCert.crt',\n            // Opcional - URL de retorno síncrono\n            'return_url' => 'https://webman.tinywan.cn/payment/alipay-return',\n            // Opcional - URL de retorno asincrónico\n            'notify_url' => 'https://webman.tinywan.cn/payment/alipay-notify',\n            // Opcional - ID del proveedor de servicios en el modo de proveedor de servicios, se utiliza este parámetro cuando el modo es Pay::MODE_SERVICE\n            'service_provider_id' => '',\n            // Opcional - Por defecto es el modo normal. Puede ser: MODE_NORMAL, MODE_SANDBOX, MODE_SERVICE\n            'mode' => \\Yansongda\\Pay\\Pay::MODE_SANDBOX,\n        ]\n    ],\n    'wechat' => [\n        'default' => [\n            // Obligatorio - Número de comerciante, en el modo de proveedor de servicios es el número de comerciante del proveedor de servicios\n            'mch_id' => '',\n            // Obligatorio - Clave secreta del comerciante\n            'mch_secret_key' => '',\n            // Obligatorio - Ruta de la clave privada del comerciante (cadena o ruta)\n            'mch_secret_cert' => '',\n            // Obligatorio - Ruta del certificado público del comerciante\n            'mch_public_cert_path' => '',\n            // Obligatorio\n            'notify_url' => 'https://yansongda.cn/wechat/notify',\n            // Opcional - app_id del servicio público\n            'mp_app_id' => '2016082000291234',\n            // Opcional - app_id del mini programa\n            'mini_app_id' => '',\n            // Opcional - app_id de la aplicación\n            'app_id' => '',\n            // Opcional - app_id combinado\n            'combine_app_id' => '',\n            // Opcional - Número de comerciante combinado\n            'combine_mch_id' => '',\n            // Opcional - En el modo de proveedor de servicios, app_id del servicio público secundario\n            'sub_mp_app_id' => '',\n            // Opcional - En el modo de proveedor de servicios, app_id de la aplicación secundaria\n            'sub_app_id' => '',\n            // Opcional - En el modo de proveedor de servicios, app_id del mini programa secundario\n            'sub_mini_app_id' => '',\n            // Opcional - En el modo de proveedor de servicios, ID del comerciante secundario\n            'sub_mch_id' => '',\n            // Opcional - Ruta del certificado público de WeChat, opcional, se recomienda encarecidamente configurar este parámetro en el modo php-fpm\n            'wechat_public_cert_path' => [\n                '45F59D4DABF31918AFCEC556D5D2C6E376675D57' => __DIR__.'/Cert/wechatPublicKey.crt',\n            ],\n            // Opcional - Por defecto es el modo normal. Puede ser: MODE_NORMAL, MODE_SERVICE\n            'mode' => \\Yansongda\\Pay\\Pay::MODE_SANDBOX,\n        ]\n    ],\n    'logger' => [\n        'enable' => false,\n        'file' => runtime_path().'/logs/alipay.log',\n        'level' => 'debug', // Se recomienda ajustar el nivel a info en entornos de producción y a debug en entornos de desarrollo\n        'type' => 'single', // opcional, puede ser diario\n        'max_file' => 30, // opcional, efectivo sólo cuando el tipo es diario, por defecto 30 días\n    ],\n    'http' => [ // opcional\n        'timeout' => 5.0,\n        'connect_timeout' => 5.0,\n        // Para más opciones de configuración, consulte [Guzzle](https://guzzle-cn.readthedocs.io/zh_CN/latest/request-options.html)\n    ],\n    '_force' => true,\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring PSR-0 Autoloading in Composer JSON\nDESCRIPTION: Adds PSR-0 autoloading configuration to composer.json for loading libraries from the 'extend' directory.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/others/autoload.md#2025-04-12_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"psr-0\" : {\n    \"\": \"extend/\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using Context for Safe Data Storage in Coroutines\nDESCRIPTION: A best practice example of using support\\Context to store request-specific data in a coroutine environment. Context ensures that data is properly isolated between different requests and automatically cleaned up when a request completes.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/fr/upgrade/1-5.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace app\\controller;\n\nuse support\\Request;\nuse support\\Context;\nuse Workerman\\Timer;\n\nclass TestController\n{\n    public function index(Request $request)\n    {\n        Context::set('name', $request->get('name'));\n        Timer::sleep(5);\n        return Context::get('name');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Alternative Multi-application Directory Structure\nDESCRIPTION: Shows an alternative directory structure where controllers, models, and views are at the app root, with api and admin sub-applications having their own controllers and models.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-hk/multiapp.md#2025-04-12_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n\"app\n├── controller\n├── model\n├── view\n│\n├── api\n│   ├── controller\n│   └── model\n└── admin\n    ├── controller\n    ├── model\n    └── view\"\n```\n\n----------------------------------------\n\nTITLE: Starting and Testing AOP Integration in PHP\nDESCRIPTION: Commands to start the WebMan PHP server and test the AOP integration using curl.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/aop.md#2025-04-12_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nphp start.php start\ncurl  http://127.0.0.1:8787/json\n```\n\n----------------------------------------\n\nTITLE: Displaying Pagination in Twig Template\nDESCRIPTION: This HTML code demonstrates how to display the pagination links in a Twig template using the `paginator` variable passed from the controller. The `autoescape false` tag is used to prevent Twig from escaping the HTML output of the paginator.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/fr/db/paginator.md#2025-04-12_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<html>\n<head>\n  <!-- Built-in support for Bootstrap pagination styles -->\n  <link rel=\"stylesheet\" href=\"//maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css\">\n</head>\n<body>\n\n{% autoescape false %}\n{{paginator}}\n{% endautoescape %}\n\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Custom Configuration File\nDESCRIPTION: Creates a custom configuration file (payment.php) with key-value pairs for payment settings.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/config.md#2025-04-12_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\nreturn [\n    'key' => '...',\n    'secret' => '...'\n];\n```\n\n----------------------------------------\n\nTITLE: Vista de ejemplo con PHP nativo en Webman\nDESCRIPTION: Este snippet muestra un archivo de vista de ejemplo que utiliza la sintaxis de plantilla PHP nativa en Webman.  Muestra la variable $name escapada con htmlspecialchars.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/es/view.md#2025-04-12_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<!doctype html>\n<html>\n<head>\n    <meta charset=\"utf-8\">\n    <title>webman</title>\n</head>\n<body>\nhello <?=htmlspecialchars($name)?>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Conditional Execution Based on Process Name\nDESCRIPTION: This snippet demonstrates how to conditionally execute initialization code based on the process name.  It checks `$worker->name` to determine the current process, and skips the timer setup if the process is 'monitor'. This is useful for avoiding unnecessary initialization in certain processes.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/others/bootstrap.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n \"<?php\\n\\nnamespace app\\\\bootstrap;\\n\\nuse Webman\\\\Bootstrap;\\n\\nclass MemReport implements Bootstrap\\n{\\n    public static function start($worker)\\n    {\\n        // 是否是命令行环境 ?\\n        $is_console = !$worker;\\n        if ($is_console) {\\n            // 如果你不想命令行环境执行这个初始化，则在这里直接返回\\n            return;\\n        }\\n        \\n        // monitor进程不执行定时器\\n        if ($worker->name == 'monitor') {\\n            return;\\n        }\\n        \\n        // 每隔10秒执行一次\\n        \\\\Workerman\\\\Timer::add(10, function () {\\n            // 为了方便演示，这里使用输出代替上报过程\\n            echo memory_get_usage() . \"\\n\";\\n        });\\n        \\n    }\\n\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Phinx PHP Configuration File\nDESCRIPTION: Configuration file for Phinx migrations, defining paths for migrations and seeds, and database environment settings\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/db/migration.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\\nreturn [\\n    \"paths\" => [\\n        \"migrations\" => \"database\\/migrations\",\\n        \"seeds\"      => \"database\\/seeds\"\\n    ],\\n    \"environments\" => [\\n        \"default_migration_table\" => \"phinxlog\",\\n        \"default_database\"        => \"dev\",\\n        \"default_environment\"     => \"dev\",\\n        \"dev\" => [\\n            \"adapter\" => \"DB_CONNECTION\",\\n            \"host\"    => \"DB_HOST\",\\n            \"name\"    => \"DB_DATABASE\",\\n            \"user\"    => \"DB_USERNAME\",\\n            \"pass\"    => \"DB_PASSWORD\",\\n            \"port\"    => \"DB_PORT\",\\n            \"charset\" => \"utf8\"\\n        ]\\n    ]\\n];\n```\n\n----------------------------------------\n\nTITLE: Customizing Primary Key in Eloquent Model\nDESCRIPTION: Shows how to set a custom primary key name using the $primaryKey property in an Eloquent model.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/tr/db/model.md#2025-04-12_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nclass User extends Model\n{\n    protected $primaryKey = 'uid';\n}\n```\n\n----------------------------------------\n\nTITLE: Twig Extension Configuration\nDESCRIPTION: Extending Twig view instance with additional extensions, filters, and functions\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/view.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse support\\view\\Twig;\nreturn [\n    'handler' => Twig::class,\n    'extension' => function (\\Twig\\Environment $twig) {\n        $twig->addExtension(new your\\namespace\\YourExtension());\n        $twig->addFilter(new \\Twig\\TwigFilter('rot13', 'str_rot13'));\n        $twig->addFunction(new \\Twig\\TwigFunction('function_name', function () {}));\n    }\n];\n```\n\n----------------------------------------\n\nTITLE: Check if Request is Ajax in webman-php\nDESCRIPTION: This snippet shows how to check if the current request is an Ajax request using `$request->isAjax()` in webman-php.  It returns a boolean value indicating if the request was made via Ajax.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/pt/request.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$request->isAjax();\n```\n\n----------------------------------------\n\nTITLE: Initializing AOP ClassLoader\nDESCRIPTION: Entry point configuration for AOP initialization in start.php\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/aop.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Hyperf\\AopIntegration\\ClassLoader;\n\nif ($timezone = config('app.default_timezone')) {\n    date_default_timezone_set($timezone);\n}\n\n// 初始化\nClassLoader::init();\n```\n\n----------------------------------------\n\nTITLE: Sending Messages to Stomp Queue in PHP\nDESCRIPTION: Example of sending messages to a Stomp queue using the Webman Stomp client. Demonstrates queue message publishing with JSON serialized data.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/jp/queue/stomp.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\nuse Webman\\Stomp\\Client;\n\nclass Index\n{\n    public function queue(Request $request)\n    {\n        // キュー\n        $queue = 'examples';\n        // データ（配列を渡す場合は自分でシリアライズする必要があります。例：json_encode、serializeなどを使用）\n        $data = json_encode(['to' => 'tom@gmail.com', 'content' => 'hello']);\n        // 送信を実行\n        Client::send($queue, $data);\n\n        return response('redis queue test');\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Event Subscriber Configuration in PHP\nDESCRIPTION: Configuring event subscribers to register specific subscriber classes\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/th/event.md#2025-04-12_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'subscriber' => [\n        \\extend\\event\\subscriber\\LoggerSubscriber::class,\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Redis Configuration for Webman Plugin\nDESCRIPTION: Example configuration for setting up multiple Redis connections in a Webman plugin\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/plugin/app.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'default' => [\n        'host' => '127.0.0.1',\n        'password' => null,\n        'port' => 6379,\n        'database' => 0,\n    ],\n    'cache' => [\n        'host' => '127.0.0.1',\n        'password' => null,\n        'port' => 6379,\n        'database' => 1,\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Publishing Events in PHP Controller\nDESCRIPTION: Example of a controller class demonstrating how to emit events using the Event::emit method.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/de/components/event.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\nuse support\\Request;\nuse Webman\\Event\\Event;\nclass User\n{\n    public function register(Request $request)\n    {\n        $user = [\n            'name' => 'webman',\n            'age' => 2\n        ];\n        Event::emit('user.register', $user);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Get Real Client IP Address - Webman PHP\nDESCRIPTION: Retrieves the real client IP address, attempting to account for proxies. Safe mode is enabled by default.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/th/request.md#2025-04-12_snippet_35\n\nLANGUAGE: php\nCODE:\n```\n$request->getRealIp($safe_mode=true);\n```\n\n----------------------------------------\n\nTITLE: Memory Leak Example: Global Array\nDESCRIPTION: Shows how using a global array that continuously expands can lead to memory leaks in a request handler.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/others/memory-leak.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nclass Index\n{\n    public function index(Request $request)\n    {\n        global $data;\n        $data[] = time();\n        return response($foo->sayHello());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Mailer Service Class\nDESCRIPTION: Example service class implementation for sending emails.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/di.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\service;\n\nclass Mailer\n{\n    public function mail($email, $content)\n    {\n        // Send mail code omitted\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Get Specific POST Parameter - Webman PHP\nDESCRIPTION: This snippet retrieves a specific POST parameter by its name using the `post('name')` method. If the parameter is not found, it returns null.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/th/request.md#2025-04-12_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$request->post('name');\n```\n\n----------------------------------------\n\nTITLE: Installing symfony/translation Package via Composer\nDESCRIPTION: Command to install the symfony/translation package which provides multilingual support for Webman applications.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/components/translation.md#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require symfony/translation\n```\n\n----------------------------------------\n\nTITLE: Webhook Configuration for Channel Events\nDESCRIPTION: This snippet provides an overview of webhook events that can be configured to handle online and offline channel events, useful for maintaining user state within the application.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/plugin/push.md#2025-04-12_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n# webhook用来接收频道的一些事件。\n\n**目前主要有2个事件：**\n\n- 1、channel_added\n  当某个频道从没有客户端在线到有客户端在线时触发的事件，或者说是在线事件\n- 2、channel_removed\n  当某个频道的所有客户端都下线时触发的事件，或者说是离线事件\n\n> **Tips**\n> 这些事件在维护用户在线状态非常有用。\n```\n\n----------------------------------------\n\nTITLE: PHPUnit Test Result\nDESCRIPTION: Shows the expected output after running the PHPUnit test. It indicates that one test was executed with five assertions, and all passed successfully (OK).  The output also includes the execution time and memory usage.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/th/components/unitest.md#2025-04-12_snippet_3\n\nLANGUAGE: Text\nCODE:\n```\n\"PHPUnit 9.5.10 by Sebastian Bergmann and contributors.\\n\\n.                                                                   1 / 1 (100%)\\n\\nTime: 00:00.010, Memory: 6.00 MB\\n\\nOK (1 test, 5 assertions)\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Login Form with Captcha\nDESCRIPTION: This HTML snippet creates a simple login form that includes a captcha image and an input field for the user to enter the captcha text. The form submits to the `/login/check` route, where the captcha will be validated. The captcha image source is `/login/captcha`.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/th/components/captcha.md#2025-04-12_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!doctype html>\n<html>\n<head>\n    <meta charset=\"utf-8\">\n    <title>ทดสอบรหัสยืนยันตัวตน</title>  \n</head>\n<body>\n    <form method=\"post\" action=\"/login/check\">\n       <img src=\"/login/captcha\" /><br>\n        <input type=\"text\" name=\"captcha\" />\n        <input type=\"submit\" value=\"ยื่นยัน\" />\n    </form>\n</body>\n</html>\n\n```\n\n----------------------------------------\n\nTITLE: Web Payment Implementation\nDESCRIPTION: Implementation of web-based payment processing using Alipay\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/pt/components/payment.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\npublic function payment(Request $request)\n{\n    $config = Config::get('payment');\n    Pay::config($config);\n    $order = [\n        'out_trade_no' => time(),\n        'total_amount' => '8888.88',\n        'subject' => 'pagamento webman',\n        '_method' => 'get'\n    ];\n    return Pay::alipay()->web($order)->getBody()->getContents();\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple Applications Directory Structure (Option 1)\nDESCRIPTION: First directory structure for organizing multiple applications with separate controllers, models, and views within a single project\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/pt/multiapp.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\napp\n├── shop\n│   ├── controller\n│   ├── model\n│   └── view\n├── api\n│   ├── controller\n│   └── model\n└── admin\n    ├── controller\n    ├── model\n    └── view\n```\n\n----------------------------------------\n\nTITLE: Resetting Composer Repository\nDESCRIPTION: This command resets the composer repository configuration to use the official packagist source. It is useful if the update fails due to a composer proxy issue.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/upgrade/1-4.md#2025-04-12_snippet_1\n\nLANGUAGE: Plain Text\nCODE:\n```\n`composer config -g --unset repos.packagist`\n```\n\n----------------------------------------\n\nTITLE: Vista de ejemplo con Twig en Webman\nDESCRIPTION: Este snippet muestra un archivo de vista de ejemplo que utiliza el motor de plantillas Twig en Webman. Muestra la variable name usando la sintaxis de Twig.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/es/view.md#2025-04-12_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<!doctype html>\n<html>\n<head>\n    <meta charset=\"utf-8\">\n    <title>webman</title>\n</head>\n<body>\nhello {{name}}\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Triggering Custom Event\nDESCRIPTION: Example of triggering a custom LogErrorWriteEvent with error data\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/event.md#2025-04-12_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$error = [\n    'errorMessage' => 'Error message',\n    'errorCode' => 500\n];\nEventManager::trigger(new LogErrorWriteEvent($error),LogErrorWriteEvent::NAME);\n```\n\n----------------------------------------\n\nTITLE: HTML Form for File Upload - HTML\nDESCRIPTION: This HTML form demonstrates how to create a form that allows users to upload multiple files. The `enctype` attribute is crucial for file uploads.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/th/request.md#2025-04-12_snippet_19\n\nLANGUAGE: html\nCODE:\n```\n<form method=\"post\" action=\"http://127.0.0.1:8787/upload/files\" enctype=\"multipart/form-data\" />\n<input name=\"file1\" multiple=\"multiple\" type=\"file\">\n<input name=\"file2\" multiple=\"multiple\" type=\"file\">\n<input type=\"submit\">\n</form>\n```\n\n----------------------------------------\n\nTITLE: Returning XML Response in Webman PHP\nDESCRIPTION: Illustrates how to return an XML response using the `xml()` helper function. It sets the `Content-Type` header to `text/xml`.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/pt/response.md#2025-04-12_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\n\nclass FooController\n{\n    public function hello(Request $request)\n    {\n        $xml = <<<XML\n               <?xml version='1.0' standalone='yes'?>\n               <values>\n                   <truevalue>1</truevalue>\n                   <falsevalue>0</falsevalue>\n               </values>\n               XML;\n        return xml($xml);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Check if Request is PJAX - Webman PHP\nDESCRIPTION: Checks if the request is a PJAX request.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/th/request.md#2025-04-12_snippet_39\n\nLANGUAGE: php\nCODE:\n```\n$request->isPjax();\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Consumer Processes for Different Queue Types\nDESCRIPTION: Process configuration to separate fast and slow queue consumers into different process groups for optimized queue processing.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/fr/queue/redis.md#2025-04-12_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    ... autres configurations ici...\n    \n    'redis_consumer_fast'  => [\n        'handler'     => Webman\\RedisQueue\\Process\\Consumer::class,\n        'count'       => 8,\n        'constructor' => [\n            // Répertoire de classe de consommateur\n            'consumer_dir' => app_path() . '/queue/redis/fast'\n        ]\n    ],\n    'redis_consumer_slow'  => [\n        'handler'     => Webman\\RedisQueue\\Process\\Consumer::class,\n        'count'       => 8,\n        'constructor' => [\n            // Répertoire de classe de consommateur\n            'consumer_dir' => app_path() . '/queue/redis/slow'\n        ]\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Safe Local Variable Usage in Coroutines\nDESCRIPTION: Demonstrates how local variables can be safely used in coroutines without causing data contamination between requests.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/pt/coroutine/fiber.md#2025-04-12_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace app\\controller;\n\nuse support\\Request;\nuse support\\Context;\nuse Workerman\\Timer;\n\nclass TestController\n{\n    public function index(Request $request)\n    {\n        $name = $request->get('name');\n        Timer::sleep(5);\n        return $name;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Blade Component Class in Webman\nDESCRIPTION: This code defines a Blade component class named Alert.  It contains a constructor and a render method that returns the raw body of the component's view.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/es/view.md#2025-04-12_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace app\\view\\components;\n\nuse Illuminate\\View\\Component;\n\nclass Alert extends Component\n{\n    \n    public function __construct()\n    {\n    \n    }\n    \n    public function render()\n    {\n        return view('components/alert')->rawBody();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Webman PHP Context Example\nDESCRIPTION: This code demonstrates how to use the `Context` class within a Webman controller to store and retrieve request-related data. It sets the 'name' context variable to the value of the 'name' request parameter and then retrieves it to return as the response.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-hk/coroutine/context.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n```php\n<?php\n\nnamespace app\\controller;\n\nuse support\\Request;\nuse support\\Context;\n\nclass TestController\n{\n    public function index(Request $request)\n    {\n        Context::set('name', $request->get('name'));\n        return Context::get('name');\n    }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: ThinkPHP Template with Pagination\nDESCRIPTION: ThinkPHP template implementation showing how to render raw pagination controls with Bootstrap styling.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/de/db/paginator.md#2025-04-12_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<html>\n<head>\n    <!-- Built-in support for Bootstrap pagination styles -->\n    <link rel=\"stylesheet\" href=\"//maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css\">\n</head>\n<body>\n\n{$users|raw}\n\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Adding Query Constraints to Eloquent Model Retrieval\nDESCRIPTION: Shows how to add query constraints like where conditions, ordering, and limiting when retrieving records using Eloquent.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/db/model.md#2025-04-12_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n$users = app\\model\\User::where('name', 'like', '%tom')\n               ->orderBy('uid', 'desc')\n               ->limit(10)\n               ->get();\n```\n\n----------------------------------------\n\nTITLE: Defining a UserService class\nDESCRIPTION: This defines a simple `UserService` class with a `first` method that returns an array. This class is used to demonstrate AOP functionality by applying an aspect to its `first` method.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/aop.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\service;\n\nclass UserService\n{\n    public function first(): array\n    {\n        return ['id' => 1];\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: PSR-0 Autoloading Configuration in Composer\nDESCRIPTION: Configure Composer to support PSR-0 standard libraries by adding a new directory for legacy code libraries\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/others/autoload.md#2025-04-12_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n\"psr-0\" : {\n    \"\": \"extend/\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing response-code-msg package\nDESCRIPTION: This command installs the teamones/response-code-msg package using Composer, a dependency manager for PHP. This package facilitates the automatic generation of error codes based on predefined rules.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/components/generate_error_code.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n\"composer require teamones/response-code-msg\"\n```\n\n----------------------------------------\n\nTITLE: Route Parameters to Middleware in PHP\nDESCRIPTION: This example demonstrates how to pass parameters from the route definition to the middleware using `setParams`. The middleware can then access these parameters via the request's route object.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-hk/middleware.md#2025-04-12_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n\"<?php\nuse support\\Request;\nuse Webman\\Route;\n\nRoute::any('/test', [app\\controller\\IndexController::class, 'index'])->setParams(['some_key' =>'some value']);\"\n```\n\n----------------------------------------\n\nTITLE: Getting a Single Session Value with Default in Webman\nDESCRIPTION: This code snippet demonstrates how to retrieve a specific value from the session using the `get()` method, providing a default value if the session key doesn't exist.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/session.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$session = $request->session();\n$name = $session->get('name', 'tom');\n```\n\n----------------------------------------\n\nTITLE: Matching Route Parameter Names (PHP)\nDESCRIPTION: This PHP code highlights the importance of matching route parameter names with the parameter names in the route handler function. When upgrading, ensure that the parameter names used in the route definition match the variable names used within the closure or controller method. Adding Request type hints is necessary.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/upgrade/1-6.md#2025-04-12_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nRoute::any('/user/{name}', function (Request $request, $myname) {\n   return response($myname);\n});\n// 需要改成\nRoute::any('/user/{name}', function (Request $request, $name) {\n   return response($name);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Swoole Coroutine in Webman PHP\nDESCRIPTION: Configuration snippet for enabling Swoole coroutine in Webman. This setting is added to the config/server.php file to use Swoole's event loop.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/coroutine/fiber.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n'event_loop' => \\Workerman\\Events\\Swoole::class,\n```\n\n----------------------------------------\n\nTITLE: Command for Generating Think-ORM Model\nDESCRIPTION: Console command to automatically generate a Think-ORM model class for a specified database table.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/db/thinkorm.md#2025-04-12_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nphp webman make:model 表名\n```\n\n----------------------------------------\n\nTITLE: Disabling Timestamps in Eloquent Model\nDESCRIPTION: Shows how to disable automatic timestamp management by setting the $timestamps property to false in an Eloquent model.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/jp/db/model.md#2025-04-12_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nclass User extends Model\n{\n    public $timestamps = false;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing AOP Integration Package for PHP\nDESCRIPTION: Command to install the hyperf/aop-integration package using Composer.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/tr/aop.md#2025-04-12_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require \"hyperf/aop-integration: ^1.1\"\n```\n\n----------------------------------------\n\nTITLE: Creating ZIP Archive for Webman Plugin\nDESCRIPTION: Command to create a ZIP archive of the foo plugin from the plugin directory. The command should be run from the main project's plugin directory.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/app/pack.md#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nzip -r foo.zip foo\n```\n\n----------------------------------------\n\nTITLE: Disabling Default Route in Webman\nDESCRIPTION: This snippet demonstrates how to disable the default route for a specific plugin in Webman using the `Route::disableDefaultRoute()` method.  The parameter specifies the name of the plugin whose default route should be disabled. This configuration is typically done within the `config/route.php` file of the main application.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/app/route.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nRoute::disableDefaultRoute('foo');\n```\n\n----------------------------------------\n\nTITLE: Displaying Pagination in Twig Template\nDESCRIPTION: This HTML template demonstrates how to display the pagination component using Twig template engine. It includes Bootstrap CSS for styling and uses the autoescape block.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/components/paginator.md#2025-04-12_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<html>\n<head>\n  <!-- Built-in support for Bootstrap pagination styles -->\n  <link rel=\"stylesheet\" href=\"//maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css\">\n</head>\n<body>\n\n{% autoescape false %}\n{{paginator}}\n{% endautoescape %}\n\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Using Local Variables in PHP Coroutines\nDESCRIPTION: This snippet shows how to safely use local variables in coroutine environments, as they do not cause data contamination between different coroutines.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/tr/coroutine/fiber.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace app\\controller;\n\nuse support\\Request;\nuse support\\Context;\nuse Workerman\\Timer;\n\nclass TestController\n{\n    public function index(Request $request)\n    {\n        $name = $request->get('name');\n        Timer::sleep(5);\n        return $name;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configurazione della coda Redis in Webman PHP\nDESCRIPTION: File di configurazione per la coda Redis, specificando host, opzioni di autenticazione, database e parametri di ritentativo.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/queue/redis.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nreturn [\n    'default' => [\n        'host' => 'redis://127.0.0.1:6379',\n        'options' => [\n            'auth' => '',         // Password, parametro opzionale\n            'db' => 0,            // Database\n            'max_attempts'  => 5, // Tentativi di consumo dopo un fallimento\n            'retry_seconds' => 5, // Intervallo di ritentativo, in secondi\n        ]\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Connections in Plugin\nDESCRIPTION: Redis configuration file example showing setup for default and cache connections with host, password, port and database settings.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/app/redis.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'default' => [\n        'host' => '127.0.0.1',\n        'password' => null,\n        'port' => 6379,\n        'database' => 0,\n    ],\n    'cache' => [\n        'host' => '127.0.0.1',\n        'password' => null,\n        'port' => 6379,\n        'database' => 1,\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Cluster in Webman\nDESCRIPTION: This PHP code configures a Redis cluster connection in Webman. It defines the cluster nodes and their respective connection details (host, password, port, database).\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/db/redis.md#2025-04-12_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'clusters' => [\n        'default' => [\n            [\n                'host'     => 'localhost',\n                'password' => null,\n                'port'     => 6379,\n                'database' => 0,\n            ],\n        ],\n    ],\n\n];\n```\n\n----------------------------------------\n\nTITLE: Redis Cluster Configuration\nDESCRIPTION: Configuration setup for Redis cluster with multiple nodes\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/pt/db/redis.md#2025-04-12_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'clusters' => [\n        'default' => [\n            [\n                'host'     => 'localhost',\n                'password' => null,\n                'port'     => 6379,\n                'database' => 0,\n            ],\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Static File Middleware in webman\nDESCRIPTION: This PHP snippet demonstrates a static file middleware for webman. It prohibits access to hidden files starting with a dot and allows adding HTTP headers for cross-origin access control.  It should be enabled in `config/static.php`'s `middleware` option to take effect.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/es/static.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace support\\middleware;\n\nuse Webman\\MiddlewareInterface;\nuse Webman\\Http\\Response;\nuse Webman\\Http\\Request;\n\nclass StaticFile implements MiddlewareInterface\n{\n    public function process(Request $request, callable $next) : Response\n    {\n        // Prohibir el acceso a archivos ocultos que comienzan con .\n        if (strpos($request->path(), '/.') !== false) {\n            return response('<h1>403 prohibido</h1>', 403);\n        }\n        /** @var Response $response */\n        $response = $next($request);\n        // Agregar encabezados de HTTP para permitir el acceso desde otros dominios\n        /*$response->withHeaders([\n            'Access-Control-Allow-Origin'      => '*',\n            'Access-Control-Allow-Credentials' => 'true',\n        ]);*/\n        return $response;\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Executing Webman Binary Build Command in Bash\nDESCRIPTION: Commands to run the Webman binary build process, with an option to specify the PHP version for packaging.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/fr/others/bin.md#2025-04-12_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nphp webman build:bin\n```\n\nLANGUAGE: bash\nCODE:\n```\nphp webman build:bin 8.1\n```\n\n----------------------------------------\n\nTITLE: Abrufen eines einzelnen Werts mit dem Query Builder in PHP\nDESCRIPTION: Dieses Snippet zeigt, wie man einen einzelnen Feldwert basierend auf einer Bedingung abruft.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/de/db/queries.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$email = Db::table('users')->where('name', 'John')->value('email');\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Primary Key in Eloquent Model\nDESCRIPTION: Demonstrates how to customize the primary key field name in an Eloquent model by overriding the $primaryKey property.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/db/model.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nclass User extends Model\n{\n    /**\n     * Переопределение первичного ключа, по умолчанию это id\n     *\n     * @var string\n     */\n    protected $primaryKey = 'uid';\n}\n```\n\n----------------------------------------\n\nTITLE: Gruppierung und HAVING-Klauseln mit dem Query Builder in PHP\nDESCRIPTION: Diese Beispiele demonstrieren die Verwendung von GROUP BY und HAVING-Klauseln für aggregierte Abfragen.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/de/db/queries.md#2025-04-12_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')\n                ->groupBy('account_id')\n                ->having('account_id', '>', 100)\n                ->get();\n\n$users = Db::table('users')\n                ->groupBy('first_name', 'status')\n                ->having('account_id', '>', 100)\n                ->get();\n```\n\n----------------------------------------\n\nTITLE: Get Controller Class Name from Request in webman-php\nDESCRIPTION: This snippet shows how to get the controller class name associated with the request using `$request->controller` in webman-php. It returns the fully qualified name of the controller class (e.g., `app\\controller\\IndexController`). For closure routes, this will return an empty string.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/pt/request.md#2025-04-12_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$request->controller;\n```\n\n----------------------------------------\n\nTITLE: Memory Leak Example: Static Array in Method\nDESCRIPTION: Demonstrates how using a static array within a method that grows with each request can cause memory leaks.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/others/memory-leak.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nclass Index\n{\n    public function index(Request $request)\n    {\n        static $data = [];\n        $data[] = time();\n        return response($foo->sayHello());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Obtaining the server's port in Webman (PHP)\nDESCRIPTION: This snippet shows how to retrieve the server's port using `$request->getLocalPort()`. Knowing the server port is useful for debugging or for constructing URLs that include the port number.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/es/request.md#2025-04-12_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n$request->getLocalPort();\n```\n\n----------------------------------------\n\nTITLE: External Message Delivery Function for Redis Queue\nDESCRIPTION: Helper function for delivering messages to the Redis queue from outside the Webman/redis-queue system. Useful for integration with other projects.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/fr/queue/redis.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nfunction redis_queue_send($redis, $queue, $data, $delay = 0) {\n    $queue_waiting = '{redis-queue}-waiting';\n    $queue_delay = '{redis-queue}-delayed';\n    $now = time();\n    $package_str = json_encode([\n        'id'       => rand(),\n        'time'     => $now,\n        'delay'    => $delay,\n        'attempts' => 0,\n        'queue'    => $queue,\n        'data'     => $data\n    ]);\n    if ($delay) {\n        return $redis->zAdd($queue_delay, $now + $delay, $package_str);\n    }\n    return $redis->lPush($queue_waiting.$queue, $package_str);\n}\n```\n\n----------------------------------------\n\nTITLE: Installing symfony/translation in Webman\nDESCRIPTION: Command to install the symfony/translation component using Composer.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/components/translation.md#2025-04-12_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require symfony/translation\n```\n\n----------------------------------------\n\nTITLE: Using push-vue.js with Vue.js and webman/push\nDESCRIPTION: Vue.js component setup demonstrating how to integrate and use push-vue.js for webman/push functionality in a Vue application.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/de/plugin/push.md#2025-04-12_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n<script lang=\"ts\" setup>\nimport {  onMounted } from 'vue'\nimport { Push } from '../utils/push-vue'\n\nonMounted(() => {\n  console.log('Komponente wurde hinzugefügt') \n\n  var connection = new Push({\n    url: 'ws://127.0.0.1:3131',\n    app_key: '<app_key, in config/plugin/webman/push/app.php erhältlich>',\n    auth: '/plugin/webman/push/auth'\n  });\n\n  var uid = 1;\n  var user_channel = connection.subscribe('user-' + uid);\n\n  user_channel.on('message', function (data) {\n    console.log(data);\n  });\n  user_channel.on('friendApply', function (data) {\n    console.log(data);\n  });\n\n  var group_id = 2;\n  var group_channel = connection.subscribe('group-' + group_id);\n  group_channel.on('message', function (data) {\n    console.log(data);\n  });\n\n})\n\n</script>\n```\n\n----------------------------------------\n\nTITLE: Installing Command-Line Tool using Composer - PHP\nDESCRIPTION: This snippet installs the Webman Console command-line tool via Composer, which is necessary for project management and operations related to Webman.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/pt/others/bin.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n\"composer require webman/console ^1.2.24\"\n```\n\n----------------------------------------\n\nTITLE: Checking Disabled Functions via curl\nDESCRIPTION: Command to check for disabled PHP functions required by Webman\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/others/disable-function-check.md#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -Ss https://www.workerman.net/webman/check | php\n```\n\n----------------------------------------\n\nTITLE: Sending Asynchronous Messages to Redis Queue in PHP\nDESCRIPTION: Example of sending messages asynchronously to a Redis queue using the Client::send() method.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/tr/queue/redis.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\nuse Webman\\RedisQueue\\Client;\n\nclass Index\n{\n    public function queue(Request $request)\n    {\n        // Queue name\n        $queue = 'send-mail';\n        // Data, passed directly as an array, no need for serialization\n        $data = ['to' => 'tom@gmail.com', 'content' => 'hello'];\n        // Send message\n        Client::send($queue, $data);\n        // Send delayed message, processed after 60 seconds\n        Client::send($queue, $data, 60);\n\n        return response('redis queue test');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Cross-Project Redis Queue Message Sending Function\nDESCRIPTION: Custom function for sending messages to Redis queue across different projects\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/th/queue/redis.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nfunction redis_queue_send($redis, $queue, $data, $delay = 0) {\n    $queue_waiting = '{redis-queue}-waiting';\n    $queue_delay = '{redis-queue}-delayed';\n    $now = time();\n    $package_str = json_encode([\n        'id'       => rand(),\n        'time'     => $now,\n        'delay'    => $delay,\n        'attempts' => 0,\n        'queue'    => $queue,\n        'data'     => $data\n    ]);\n    if ($delay) {\n        return $redis->zAdd($queue_delay, $now + $delay, $package_str);\n    }\n    return $redis->lPush($queue_waiting.$queue, $package_str);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Connections in PHP\nDESCRIPTION: Defines multiple Redis connection configurations with different hosts, ports, and database indices. Allows separate configurations for default and cache connections.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/fr/app/redis.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'default' => [\n        'host' => '127.0.0.1',\n        'password' => null,\n        'port' => 6379,\n        'database' => 0,\n    ],\n    'cache' => [\n        'host' => '127.0.0.1',\n        'password' => null,\n        'port' => 6379,\n        'database' => 1,\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Twig Template for Pagination\nDESCRIPTION: Twig template implementation for displaying pagination controls with autoescape disabled.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/db/paginator.md#2025-04-12_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<html>\n<head>\n  <!-- Built-in support for Bootstrap pagination styles -->\n  <link rel=\"stylesheet\" href=\"//maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css\">\n</head>\n<body>\n\n{% autoescape false %}\n{{paginator}}\n{% endautoescape %}\n\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Configuring Event Subscriptions in PHP\nDESCRIPTION: This snippet shows how to configure event subscriptions in the config/event.php file. It demonstrates setting up handlers for user.register and user.logout events.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/tr/components/event.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nreturn [\n    'user.register' => [\n        [app\\event\\User::class, 'register'],\n        // ...diğer olay işleme fonksiyonları...\n    ],\n    'user.logout' => [\n        [app\\event\\User::class, 'logout'],\n        // ...diğer olay işleme fonksiyonları...\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: File Upload Form Example in HTML\nDESCRIPTION: HTML form example demonstrating file upload functionality with multiple file inputs\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/request.md#2025-04-12_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<form method=\"post\" action=\"http://127.0.0.1:8787/upload/files\" enctype=\"multipart/form-data\" />\n<input name=\"file1\" multiple=\"multiple\" type=\"file\">\n<input name=\"file2\" multiple=\"multiple\" type=\"file\">\n<input type=\"submit\">\n</form>\n```\n\n----------------------------------------\n\nTITLE: Union Queries in WebMan PHP Query Builder\nDESCRIPTION: Demonstrates how to combine multiple queries using UNION.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/jp/db/queries.md#2025-04-12_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n$first = Db::table('users')\n            ->whereNull('first_name');\n\n$users = Db::table('users')\n            ->whereNull('last_name')\n            ->union($first)\n            ->get();\n```\n\n----------------------------------------\n\nTITLE: Finding a Model with 'firstOr' and Column Array in PHP\nDESCRIPTION: This snippet shows how to use `firstOr` with both column selection and a callback for handling cases where no matching model is found. It selects specific columns ('id', 'legs'). The callback's return value becomes the method's return value.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/fr/db/model.md#2025-04-12_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$model = app\\model\\Flight::where('legs', '>', 100)\n            ->firstOr(['id', 'legs'], function () {\n                // ...\n            });\n```\n\n----------------------------------------\n\nTITLE: Counting Records with 'count' in PHP\nDESCRIPTION: This snippet demonstrates how to count the number of records matching a specified condition. It utilizes the `count()` method on the query builder, returning an integer representing the record count.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/fr/db/model.md#2025-04-12_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$count = app\\model\\Flight::where('active', 1)->count();\n```\n\n----------------------------------------\n\nTITLE: Installing aop-integration package\nDESCRIPTION: This command installs the hyperf/aop-integration package using Composer. This package provides the necessary tools for implementing AOP in Webman.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/th/aop.md#2025-04-12_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n\"composer require \\\"hyperf/aop-integration: ^1.1\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Get All GET Parameters - Webman PHP\nDESCRIPTION: This snippet demonstrates how to retrieve all GET parameters as an array using the `get()` method of the request object. If there are no GET parameters, an empty array is returned.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/th/request.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$request->get();\n```\n\n----------------------------------------\n\nTITLE: Esempio di controller con motore di template PHP nativo\nDESCRIPTION: Implementazione di un controller che utilizza il motore di template PHP nativo per renderizzare una vista.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/view.md#2025-04-12_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\n\nclass UserController\n{\n    public function hello(Request $request)\n    {\n        return view('user/hello', ['name' => 'webman']);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Get Controller Action Name from Request in webman-php\nDESCRIPTION: This snippet shows how to retrieve the controller action (method) name associated with the request using `$request->action` in webman-php. It returns the name of the action (e.g., `index`). Closure routes return an empty string.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/pt/request.md#2025-04-12_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$request->action;\n```\n\n----------------------------------------\n\nTITLE: Ruta de archivos de vista en Webman\nDESCRIPTION: This code snippet demonstrates how to configure the route to view files in Webman framework.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/es/view.md#2025-04-12_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n<?php\nRoute::any('/admin/user/get', function (Reqeust $reqeust) {\n    return view('user', []);\n});\n```\n\n----------------------------------------\n\nTITLE: Avoiding Global Variable Pollution with Context in PHP\nDESCRIPTION: Demonstrates the correct way to store request state using Context in a coroutine environment, avoiding issues with global variable pollution that can occur with static variables.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/de/coroutine/fiber.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace app\\controller;\n\nuse support\\Request;\nuse support\\Context;\nuse Workerman\\Timer;\n\nclass TestController\n{\n    public function index(Request $request)\n    {\n        Context::set('name', $request->get('name'));\n        Timer::sleep(5);\n        return Context::get('name');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Plucking Single Column in Webman PHP\nDESCRIPTION: This snippet demonstrates how to retrieve a single column's values from the database using the pluck method.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/hi/db/queries.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$titles = Db::table('roles')->pluck('title');\n```\n\n----------------------------------------\n\nTITLE: Configuring Package Exclusion Pattern in Webman Console\nDESCRIPTION: Configuration setting in app.php to exclude unnecessary directories and files during binary packaging to optimize file size.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/others/bin.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n'exclude_pattern'   => '#^(?!.*(composer.json|/.github/|/.idea/|/.git/|/.setting/|/runtime/|/vendor-bin/|/build/|vendor/webman/admin))(.*)$#'\n```\n\n----------------------------------------\n\nTITLE: Exception Handler Interface Implementation\nDESCRIPTION: Interface definition for exception handlers showing required methods for logging and rendering responses\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/jp/exception.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\ninterface ExceptionHandlerInterface\n{\n    /**\n     * ログを記録する\n     * @param Throwable $e\n     * @return mixed\n     */\n    public function report(Throwable $e);\n\n    /**\n     * レスポンスをレンダリングする\n     * @param Request $request\n     * @param Throwable $e\n     * @return Response\n     */\n    public function render(Request $request, Throwable $e) : Response;\n}\n```\n\n----------------------------------------\n\nTITLE: Translation Configuration Setup\nDESCRIPTION: Configuration file for translation settings including default locale and fallback options\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/components/translation.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    // 默认语言\n    'locale' => 'zh_CN',\n    // 回退语言，当前语言中无法找到翻译时则尝试使用回退语言中的翻译\n    'fallback_locale' => ['zh_CN', 'en'],\n    // 语言文件存放的文件夹\n    'path' => base_path() . '/resource/translations',\n];\n```\n\n----------------------------------------\n\nTITLE: Installing Yansongda Pay SDK via Composer\nDESCRIPTION: Command to install the Yansongda Pay SDK using Composer package manager.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/jp/components/pay.md#2025-04-12_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\ncomposer require yansongda/pay -vvv\n```\n\n----------------------------------------\n\nTITLE: Checking Record Existence in Webman PHP\nDESCRIPTION: This snippet shows how to check for the existence or non-existence of records using exists and doesntExist methods.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/hi/db/queries.md#2025-04-12_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nreturn Db::table('orders')->where('finalized', 1)->exists();\nreturn Db::table('orders')->where('finalized', 1)->doesntExist();\n```\n\n----------------------------------------\n\nTITLE: Using Cursor for Large Dataset in Eloquent\nDESCRIPTION: Shows how to use the cursor() method to efficiently process large datasets with Eloquent models.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/jp/db/model.md#2025-04-12_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nforeach (app\\model\\User::where('sex', 1')->cursor() as $user) {\n    //\n}\n```\n\n----------------------------------------\n\nTITLE: Webman PHP Session Configuration File\nDESCRIPTION: Shows the structure and options of the session configuration file in Webman PHP.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/session.md#2025-04-12_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse Webman\\Session\\FileSessionHandler;\nuse Webman\\Session\\RedisSessionHandler;\nuse Webman\\Session\\RedisClusterSessionHandler;\n\nreturn [\n    'handler' => FileSessionHandler::class,\n    'type'    => 'file',\n    'config' => [\n        'file' => [\n            'save_path' => runtime_path() . '/sessions',\n        ],\n        'redis' => [\n            'host'      => '127.0.0.1',\n            'port'      => 6379,\n            'auth'      => '',\n            'timeout'   => 2,\n            'database'  => '',\n            'prefix'    => 'redis_session_',\n        ],\n        'redis_cluster' => [\n            'host'    => ['127.0.0.1:7000', '127.0.0.1:7001', '127.0.0.1:7001'],\n            'timeout' => 2,\n            'auth'    => '',\n            'prefix'  => 'redis_session_',\n        ]\n    ],\n    'session_name' => 'PHPSID',\n    'auto_update_timestamp' => false,\n    'lifetime' => 7*24*60*60,\n    'cookie_lifetime' => 365*24*60*60,\n    'cookie_path' => '/',\n    'domain' => '',\n    'http_only' => true,\n    'secure' => false,\n    'same_site' => '',\n    'gc_probability' => [1, 1000],\n];\n```\n\n----------------------------------------\n\nTITLE: Installing Payment SDK Package via Composer\nDESCRIPTION: Command to install the yansongda/pay package using Composer with verbose output.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/components/pay.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ncomposer require yansongda/pay -vvv\n```\n\n----------------------------------------\n\nTITLE: Client Subscription to Private Channels\nDESCRIPTION: This snippet shows how to securely subscribe to private channels in webman/push, ensuring that the subscription process involves authentication to maintain the confidentiality of sensitive data.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/plugin/push.md#2025-04-12_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar connection = new Push({\n    url: 'ws://127.0.0.1:3131', // websocket地址\n    app_key: '<app_key>',\n    auth: '/plugin/webman/push/auth' // 订阅鉴权(仅限于私有频道)\n});\n// 假设用户uid为1\nvar uid = 1;\n// 浏览器监听private-user-1私有频道的消息\nvar user_channel = connection.subscribe('private-user-' + uid);\n```\n\n----------------------------------------\n\nTITLE: Redis Command Interface for PHP\nDESCRIPTION: This snippet lists various Redis commands provided by the Webman PHP framework to manipulate data in Redis. It includes commands for setting, getting, and managing keys and values.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/es/db/redis.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nRedis::append($key, $value)\nRedis::bitCount($key)\nRedis::decr($key, $value)\nRedis::decrBy($key, $value)\nRedis::get($key)\nRedis::getBit($key, $offset)\nRedis::getRange($key, $start, $end)\nRedis::getSet($key, $value)\nRedis::incr($key, $value)\nRedis::incrBy($key, $value)\nRedis::incrByFloat($key, $value)\nRedis::mGet(array $keys)\nRedis::getMultiple(array $keys)\nRedis::mSet($pairs)\nRedis::mSetNx($pairs)\nRedis::set($key, $value, $expireResolution = null, $expireTTL = null, $flag = null)\nRedis::setBit($key, $offset, $value)\nRedis::setEx($key, $ttl, $value)\nRedis::pSetEx($key, $ttl, $value)\nRedis::setNx($key, $value)\nRedis::setRange($key, $offset, $value)\nRedis::strLen($key)\nRedis::del(...$keys)\nRedis::exists(...$keys)\nRedis::expire($key, $ttl)\nRedis::expireAt($key, $timestamp)\nRedis::select($dbIndex)\n```\n\n----------------------------------------\n\nTITLE: Redis Interface Examples\nDESCRIPTION: This code shows the available Redis methods for interaction.  These methods are facade calls and are equivalent to calling methods on a Redis connection object.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/db/redis.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nRedis::append($key, $value)\nRedis::bitCount($key)\nRedis::decr($key, $value)\nRedis::decrBy($key, $value)\nRedis::get($key)\nRedis::getBit($key, $offset)\nRedis::getRange($key, $start, $end)\nRedis::getSet($key, $value)\nRedis::incr($key, $value)\nRedis::incrBy($key, $value)\nRedis::incrByFloat($key, $value)\nRedis::mGet(array $keys)\nRedis::getMultiple(array $keys)\nRedis::mSet($pairs)\nRedis::mSetNx($pairs)\nRedis::set($key, $value, $expireResolution = null, $expireTTL = null, $flag = null)\nRedis::setBit($key, $offset, $value)\nRedis::setEx($key, $ttl, $value)\nRedis::pSetEx($key, $ttl, $value)\nRedis::setNx($key, $value)\nRedis::setRange($key, $offset, $value)\nRedis::strLen($key)\nRedis::del(...$keys)\nRedis::exists(...$keys)\nRedis::expire($key, $ttl)\nRedis::expireAt($key, $timestamp)\nRedis::select($dbIndex)\n```\n\n----------------------------------------\n\nTITLE: Starting Webman server and testing the endpoint\nDESCRIPTION: These commands start the Webman server and then use curl to make a request to the `/json` endpoint to test the AOP integration. The `php start.php start` command starts the webman server, while the `curl` command fetches data from the specified endpoint.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/aop.md#2025-04-12_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nphp start.php start\ncurl  http://127.0.0.1:8787/json\n```\n\n----------------------------------------\n\nTITLE: Example User Controller (Twig)\nDESCRIPTION: This PHP code defines a simple controller with a `hello` action that renders a view named `user/hello` and passes the variable 'name' with the value 'webman'. This example uses the Twig template engine.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-hk/view.md#2025-04-12_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n\"<?php\nnamespace app\\controller;\n\nuse support\\Request;\n\nclass UserController\n{\n    public function hello(Request $request)\n    {\n        return view('user/hello', ['name' => 'webman']);\n    }\n}\n?>\"\n```\n\n----------------------------------------\n\nTITLE: Crontab Time Format Structure\nDESCRIPTION: Defines the time format structure for crontab scheduling, showing the positions for seconds, minutes, hours, day of month, month, and day of week.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/components/crontab.md#2025-04-12_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n0   1   2   3   4   5\n|   |   |   |   |   |\n|   |   |   |   |   +------ day of week (0 - 6) (Sunday=0)\n|   |   |   |   +------ month (1 - 12)\n|   |   |   +-------- day of month (1 - 31)\n|   |   +---------- hour (0 - 23)\n|   +------------ min (0 - 59)\n+-------------- sec (0-59) [optional, if not present, the minimum time granularity is minutes]\n```\n\n----------------------------------------\n\nTITLE: Installing Webman 1.4 Dependencies via Composer\nDESCRIPTION: Command to upgrade Webman framework and console components to version 1.4\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/de/upgrade/1-4.md#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require workerman/webman-framework ^1.4.7 && composer require webman/console ^1.2.12 && php webman install\n```\n\n----------------------------------------\n\nTITLE: Installing Redis Dependencies in Webman PHP\nDESCRIPTION: Command to install required Redis packages using Composer\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/db/redis.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ncomposer require -W illuminate/redis illuminate/events\n```\n\n----------------------------------------\n\nTITLE: Where Not Null Clause in Webman PHP\nDESCRIPTION: This snippet shows how to use the whereNotNull method to filter for non-null values.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/hi/db/queries.md#2025-04-12_snippet_26\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')\n                    ->whereNotNull('updated_at')\n                    ->get();\n```\n\n----------------------------------------\n\nTITLE: Route Middleware Constructor Parameters in PHP\nDESCRIPTION: This code shows how to pass parameters to route-specific middleware constructors directly in the route configuration.  It gives more control over how specific routes are handled.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-hk/middleware.md#2025-04-12_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n\"Route::any('/admin', [app\\admin\\controller\\IndexController::class, 'index'])->middleware([\n    new app\\middleware\\MiddlewareA($param1, $param2, ...),\n    function(){\n        return new app\\middleware\\MiddlewareB($param1, $param2, ...);\n    },\n]);\"\n```\n\n----------------------------------------\n\nTITLE: Basic Middleware Structure in PHP\nDESCRIPTION: This example shows a basic middleware structure in PHP. The middleware intercepts the request and response, allowing code to be executed before and after the controller. The `$handler($request)` call passes the request to the next middleware or the controller.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-hk/middleware.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n\"<?php\nnamespace app\\middleware;\n\nuse Webman\\MiddlewareInterface;\nuse Webman\\Http\\Response;\nuse Webman\\Http\\Request;\n\nclass Test implements MiddlewareInterface\n{\n    public function process(Request $request, callable $handler) : Response\n    {\n        echo '這裡是請求穿越階段，也就是請求處理前';\n        \n        $response = $handler($request); // 繼續向洋蔥芯穿越，直至執行控制器得到響應\n        \n        echo '這裡是響應穿出階段，也就是請求處理後';\n        \n        return $response;\n    }\n}\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Single Column in WebMan PHP Query Builder\nDESCRIPTION: Demonstrates fetching a single column from the database, optionally using a specific field as the array key.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/jp/db/queries.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$titles = Db::table('roles')->pluck('title');\n```\n\nLANGUAGE: php\nCODE:\n```\n$roles = Db::table('roles')->pluck('title', 'id');\n\nforeach ($roles as $id => $title) {\n    echo $title;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring exception handlers for multiple applications\nDESCRIPTION: This snippet shows how to configure different exception handlers for different applications in webman. The `config/exception.php` file allows specifying a custom exception handler class for the `shop` and `api` applications.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/multiapp.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n\"return [\n    'shop' => support\\exception\\Handler::class,\n    'api' => support\\exception\\ApiHandler::class,\n];\n\"\n```\n\n----------------------------------------\n\nTITLE: Handling Alipay Synchronous Return\nDESCRIPTION: Implementation for handling synchronous notification (return URL) from Alipay after payment completion. It logs the request data and returns a success message.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-hk/components/payment.md#2025-04-12_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse support\\Request;\nuse Yansongda\\Pay\\Pay;\n\n/**\n * @desc: 『支付宝』同步通知\n * @param Request $request\n * @author Tinywan(ShaoBo Wan)\n */\npublic function alipayReturn(Request $request)\n{\n    Log::info('『支付宝』同步通知'.json_encode($request->get()));\n    return 'success';\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Plural Forms to English Language File\nDESCRIPTION: Example of defining plural forms in a language file using the pipe operator to handle different quantity expressions.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/components/translation.md#2025-04-12_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    // ...\n    'apple_count' => 'There is one apple|There are %count% apples',\n];\n```\n\n----------------------------------------\n\nTITLE: Advanced Query Constraints\nDESCRIPTION: Adding constraints and conditions to Eloquent queries.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/de/db/model.md#2025-04-12_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$users = app\\model\\User::where('name', 'like', '%tom')\n               ->orderBy('uid', 'desc')\n               ->limit(10)\n               ->get();\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Commands for Webman Plugin\nDESCRIPTION: Configuration file that registers custom console commands for a Webman plugin. This file should be placed in the plugin's configuration directory.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/bn/plugin/create.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Foo\\Admin\\FooAdminAddCommand;\n\nreturn [\n    FooAdminAddCommand::class,\n    // ...Other command configurations can be added here...\n];\n```\n\n----------------------------------------\n\nTITLE: Database Migration for Casbin Rules\nDESCRIPTION: Creates the database table structure for storing Casbin rules using Phinx migration.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/components/casbin.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Phinx\\Migration\\AbstractMigration;\n\nclass CreateRuleTable extends AbstractMigration\n{\n    public function change()\n    {\n        $table = $this->table('rule', ['id' => false, 'primary_key' => ['id'], 'engine' => 'InnoDB', 'collation' => 'utf8mb4_general_ci', 'comment' => 'Rule Table']);\n\n        // Add data fields\n        $table->addColumn('id', 'integer', ['identity' => true, 'signed' => false, 'limit' => 11, 'comment' => 'Primary Key ID'])\n            ->addColumn('ptype', 'char', ['default' => '', 'limit' => 8, 'comment' => 'Rule Type'])\n            ->addColumn('v0', 'string', ['default' => '', 'limit' => 128])\n            ->addColumn('v1', 'string', ['default' => '', 'limit' => 128])\n            ->addColumn('v2', 'string', ['default' => '', 'limit' => 128])\n            ->addColumn('v3', 'string', ['default' => '', 'limit' => 128])\n            ->addColumn('v4', 'string', ['default' => '', 'limit' => 128])\n            ->addColumn('v5', 'string', ['default' => '', 'limit' => 128]);\n\n        // Execute creation\n        $table->create();\n    }\n```\n\n----------------------------------------\n\nTITLE: Accessing Main Project Database\nDESCRIPTION: This snippet illustrates how to access the main project's database directly from a plugin. It shows how to query the 'user' table and how to access a named connection ('admin') from the main project.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/pt/plugin/app.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse support\\Db;\nDb::table('user')->first();\n// Supondo que o projeto principal também configurou uma conexão admin\nDb::connection('admin')->table('admin')->first();\n```\n\n----------------------------------------\n\nTITLE: Nginx Configuration for Routing Slow Requests\nDESCRIPTION: Configure Nginx to route requests with specific path prefixes to the dedicated slow request processing port\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/others/task.md#2025-04-12_snippet_1\n\nLANGUAGE: nginx\nCODE:\n```\nupstream webman {\n    server 127.0.0.1:8787;\n    keepalive 10240;\n}\n\nupstream task {\n   server 127.0.0.1:8686;\n   keepalive 10240;\n}\n\nserver {\n  server_name webman.com;\n  listen 80;\n  access_log off;\n  root /path/webman/public;\n\n  location /tast {\n      proxy_set_header X-Real-IP $remote_addr;\n      proxy_set_header Host $host;\n      proxy_http_version 1.1;\n      proxy_set_header Connection \"\";\n      proxy_pass http://task;\n  }\n\n  location / {\n      proxy_set_header X-Real-IP $remote_addr;\n      proxy_set_header Host $host;\n      proxy_http_version 1.1;\n      proxy_set_header Connection \"\";\n      if (!-f $request_filename){\n          proxy_pass http://webman;\n      }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Pagination in Controller\nDESCRIPTION: This code snippet demonstrates how to use the Paginator class within a controller to handle pagination logic. It retrieves the current page from the request, calculates pagination parameters, and passes the Paginator object to the view.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/fr/components/paginator.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\nuse JasonGrimes\\Paginator;\n\nclass UserController\n{\n    /**\n     * Liste des utilisateurs\n     */\n    public function get(Request $request)\n    {\n        $total_items = 1000;\n        $items_perPage = 50;\n        $current_page = (int)$request->get('page', 1);\n        $url_pattern = '/user/get?page=(:num)';\n        $paginator = new Paginator($total_items, $items_perPage, $current_page, $url_pattern);\n        return view('user/get', ['paginator' => $paginator]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Task Processes\nDESCRIPTION: Example of configuring multiple task processes in config/process.php to separate time-sensitive tasks.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/components/crontab.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    ....other configurations, omitted here....\n\n    'task1'  => [\n        'handler'  => process\\Task1::class\n    ],\n    'task2'  => [\n        'handler'  => process\\Task2::class\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Installing PhpSpreadsheet via Composer\nDESCRIPTION: Command to install the PhpSpreadsheet library using Composer dependency manager for PHP. Required for Excel file manipulation and generation.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/components/excel.md#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require phpoffice/phpspreadsheet\n```\n\n----------------------------------------\n\nTITLE: Route Configuration\nDESCRIPTION: Setting up route for the JSON endpoint\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/pt/aop.md#2025-04-12_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Webman\\Route;\n\nRoute::any('/json', [app\\controller\\IndexController::class, 'json']);\n```\n\n----------------------------------------\n\nTITLE: Cache Implementation Example\nDESCRIPTION: Example controller demonstrating how to use Cache methods set() and get() in a Webman application\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/pt/db/cache.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\nuse support\\Cache;\n\nclass UserController\n{\n    public function db(Request $request)\n    {\n        $key = 'test_key';\n        Cache::set($key, rand());\n        return response(Cache::get($key));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Cache Configuration File\nDESCRIPTION: Configuration file showing different cache driver options including file, redis, array and apcu with their respective settings\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/db/cache.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nreturn [\n    'default' => 'file',\n    'stores' => [\n        'file' => [\n            'driver' => 'file',\n            'path' => runtime_path('cache')\n        ],\n        'redis' => [\n            'driver' => 'redis',\n            'connection' => 'default'\n        ],\n        'array' => [\n            'driver' => 'array'\n        ],\n        'apcu' => [\n            'driver' => 'apcu'\n        ]\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Get Request URL - Webman PHP\nDESCRIPTION: Retrieves the request URL without the query parameters.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/th/request.md#2025-04-12_snippet_29\n\nLANGUAGE: php\nCODE:\n```\n$request->url();\n```\n\n----------------------------------------\n\nTITLE: Initializing ClassLoader in start.php\nDESCRIPTION: This PHP code initializes the ClassLoader for AOP integration. It ensures that the AOP functionalities are properly loaded and initialized within the application's lifecycle.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/aop.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n\"<?php\\nuse Hyperf\\AopIntegration\\ClassLoader;\\n\\nif ($timezone = config('app.default_timezone')) {\\n    date_default_timezone_set($timezone);\\n}\\n\\n// 初始化\\nClassLoader::init();\"\n```\n\n----------------------------------------\n\nTITLE: Configuração de Proxy Nginx para Tarefas Lentas\nDESCRIPTION: Este snippet demonstra a configuração do Nginx para encaminhar solicitações para a porta 8686, que está configurada para lidar com tarefas lentas. Ele usa os blocos `upstream` e `location` para definir o roteamento com base no prefixo `/tast`. Outras solicitações são encaminhadas para a porta padrão 8787.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/pt/others/task.md#2025-04-12_snippet_1\n\nLANGUAGE: nginx\nCODE:\n```\nupstream webman {\n    server 127.0.0.1:8787;\n    keepalive 10240;\n}\n\n# Adicionar um upstream para 8686\nupstream task {\n   server 127.0.0.1:8686;\n   keepalive 10240;\n}\n\nserver {\n  server_name webman.com;\n  listen 80;\n  access_log off;\n  root /path/webman/public;\n\n  # Solicitações iniciadas com /tast são encaminhadas para a porta 8686. Altere /tast para o prefixo desejado conforme necessário.\n  location /tast {\n      proxy_set_header X-Real-IP $remote_addr;\n      proxy_set_header Host $host;\n      proxy_http_version 1.1;\n      proxy_set_header Connection \"\";\n      proxy_pass http://task;\n  }\n\n  # Outras solicitações são encaminhadas para a porta 8787 original\n  location / {\n      proxy_set_header X-Real-IP $remote_addr;\n      proxy_set_header Host $host;\n      proxy_http_version 1.1;\n      proxy_set_header Connection \"\";\n      if (!-f $request_filename){\n          proxy_pass http://webman;\n      }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Project Directory Structure for Migrations\nDESCRIPTION: Example directory structure showing the organization of migration and seed files in a webman project.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/db/migration.md#2025-04-12_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n.\n├── app                           应用目录\n│   ├── controller                控制器目录\n│   │   └── Index.php             控制器\n│   ├── model                     模型目录\n......\n├── database                      数据库文件\n│   ├── migrations                迁移文件\n│   │   └── 20180426073606_create_user_table.php\n│   ├── seeds                     测试数据\n│   │   └── UserSeeder.php\n......\n```\n\n----------------------------------------\n\nTITLE: Get Specific GET Parameter - Webman PHP\nDESCRIPTION: This snippet shows how to retrieve a specific GET parameter by its name using the `get('name')` method. If the parameter is not found, it returns null. A default value can be provided as the second argument.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/th/request.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$request->get('name');\n```\n\n----------------------------------------\n\nTITLE: Modifica del Controller per Ritorno Vista in PHP\nDESCRIPTION: Questo snippet modifica il controller UserController per restituire una vista HTML. Il metodo hello ora utilizza la funzione view() per renderizzare un template HTML, passando il nome come variabile alla vista.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/tutorial.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\n\nclass UserController\n{\n    public function hello(Request $request)\n    {\n        $default_name = 'webman';\n        $name = $request->get('name', $default_name);\n        return view('user/hello', ['name' => $name]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Pagination Template for Native PHP\nDESCRIPTION: HTML template for rendering pagination with Bootstrap styling in native PHP template engine\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/es/components/paginator.md#2025-04-12_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<html>\n<head>\n  <link rel=\"stylesheet\" href=\"//maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css\">\n</head>\n<body>\n\n<?= $paginator;?>\n\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Disabling Default Plugin Route in WebMan PHP\nDESCRIPTION: Method to disable the default automatic routing for a specific plugin using Route::disableDefaultRoute(). This prevents the automatic generation of routes for the specified plugin.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/es/app/route.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nRoute::disableDefaultRoute('foo');\n```\n\n----------------------------------------\n\nTITLE: Registering Authorization Middleware Globally\nDESCRIPTION: This configuration snippet shows how to register the `AuthorizationMiddleware` globally in the `config/middleware.php` file. By adding the middleware to the global middleware list, it will be applied to every request, ensuring that authorization is checked for all routes.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/casbin.md#2025-04-12_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    // 全局中介軟體\n    '' => [\n        // ... 這裡省略其他中介軟體\n        app\\middleware\\AuthorizationMiddleware::class,\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Where Date Clause in Webman PHP\nDESCRIPTION: This snippet demonstrates how to use the whereDate method to filter results based on a date.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/hi/db/queries.md#2025-04-12_snippet_27\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')\n                ->whereDate('created_at', '2016-12-31')\n                ->get();\n```\n\n----------------------------------------\n\nTITLE: Configuring PSR-0 Autoloading in Composer\nDESCRIPTION: Configuration for adding PSR-0 autoloading support in composer.json. This allows loading libraries that follow the PSR-0 specification from the extend directory.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/others/autoload.md#2025-04-12_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"psr-0\" : {\n    \"\": \"extend/\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using BusinessException in webman\nDESCRIPTION: This example demonstrates how to use `BusinessException` to terminate a request and return an error message to the client. It checks for the presence of a 'token' in the input and throws a `BusinessException` if it is missing.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/exception.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\nuse support\\exception\\BusinessException;\n\nclass FooController\n{\n    public function index(Request $request)\n    {\n        $this->chackInpout($request->post());\n        return response('hello index');\n    }\n    \n    protected function chackInpout($input)\n    {\n        if (!isset($input['token'])) {\n            throw new BusinessException('參數錯誤', 3000);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Language File Structure\nDESCRIPTION: Example of language file returning translations array\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/components/translation.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'hello' => 'Hello webman',\n];\n```\n\n----------------------------------------\n\nTITLE: Installing Redis Dependencies\nDESCRIPTION: Command to install Redis component and events package for Webman\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/db/redis.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ncomposer require -W webman/redis illuminate/events\n```\n\n----------------------------------------\n\nTITLE: Installing Console Tool for Webman PHP\nDESCRIPTION: Command to install the Webman console tool using Composer, which is required for phar packaging.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/others/phar.md#2025-04-12_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncomposer require webman/console\n```\n\n----------------------------------------\n\nTITLE: Installing AOP Integration Package in PHP\nDESCRIPTION: Command to install the Hyperf AOP integration package using Composer.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/aop.md#2025-04-12_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require \"hyperf/aop-integration: ^1.1\"\n```\n\n----------------------------------------\n\nTITLE: English Translation File Example\nDESCRIPTION: Sample English language translation file returning an array of translations\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/de/components/translation.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'hello' => 'Hello webman',\n];\n```\n\n----------------------------------------\n\nTITLE: Middleware Configuration for CORS in Webman PHP\nDESCRIPTION: This code demonstrates how to configure the CORS middleware in `config/middleware.php` for Webman PHP. This configuration applies the `AccessControlTest` middleware to all requests, enabling CORS support for the application.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/middleware.md#2025-04-12_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n\"return [\n    // 全局中间件\n    '' => [\n        // ... 这里省略其它中间件\n        app\\middleware\\AccessControlTest::class,\n    ]\n];\"\n```\n\n----------------------------------------\n\nTITLE: New Session Handler Namespaces\nDESCRIPTION: This code shows the new namespaces for the SessionHandler classes in webman. These are the correct namespaces to use after upgrading to webman 1.4.0 or later. It impacts the 'handler' configuration in `config/session.php`.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/upgrade/1-4.md#2025-04-12_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n```php\nuse Webman\\Session\\FileSessionHandler;  \nuse Webman\\Session\\RedisSessionHandler;  \nuse Webman\\Session\\RedisClusterSessionHandler;\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring a Route for AOP Testing in PHP\nDESCRIPTION: Route configuration to map a URL to the IndexController's json method.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/tr/aop.md#2025-04-12_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Webman\\Route;\n\nRoute::any('/json', [app\\controller\\IndexController::class, 'json']);\n```\n\n----------------------------------------\n\nTITLE: Empty ErrorCode Class File\nDESCRIPTION: This snippet presents an empty ErrorCode class. The package will automatically populate this class with error code constants. It is located in ./support/ErrorCode.php.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/components/generate_error_code.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n\"<?php\n/**\n * Сгенерированный файл, пожалуйста, не изменяйте его вручную.\n * @Author:$Id$\n */\nnamespace support;\n\nclass ErrorCode\n{\n}\"\n```\n\n----------------------------------------\n\nTITLE: Installing Phinx via Composer in PHP\nDESCRIPTION: Command to install the Phinx database migration tool using Composer package manager.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/tr/db/migration.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ncomposer require robmorgan/phinx\n```\n\n----------------------------------------\n\nTITLE: PHPUnit Test Execution Output\nDESCRIPTION: Example output from running PHPUnit tests showing test completion status, execution time, memory usage, and assertion results.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/components/unitest.md#2025-04-12_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nPHPUnit 9.5.10 by Sebastian Bergmann and contributors.\n\n.                                                                   1 / 1 (100%)\n\nTime: 00:00.010, Memory: 6.00 MB\n\nOK (1 test, 5 assertions)\n```\n\n----------------------------------------\n\nTITLE: Initialisierung der leeren ErrorCode-Klasse in PHP\nDESCRIPTION: Diese Datei dient als Platzhalter für die automatisch generierten Fehlercodes. Sie wird in './support/ErrorCode.php' gespeichert und sollte nicht manuell bearbeitet werden.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/de/components/generate_error_code.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * Automatisch generierte Datei, bitte nicht manuell ändern.\n * @Author:$Id$\n */\nnamespace support;\n\nclass ErrorCode\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Webman Push Plugin with Composer\nDESCRIPTION: Command to install the webman/push plugin via Composer package manager\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/plugin/push.md#2025-04-12_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncomposer require webman/push\n```\n\n----------------------------------------\n\nTITLE: Implementing MailerInterface\nDESCRIPTION: This implements the MailerInterface interface with a Mailer class. This allows for switching implementations without changing dependent code.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-hk/di.md#2025-04-12_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n\"<?php\nnamespace app\\service;\n\nclass Mailer implements MailerInterface\n{\n    private $smtpHost;\n\n    private $smtpPort;\n\n    public function __construct($smtp_host, $smtp_port)\n    {\n        $this->smtpHost = $smtp_host;\n        $this->smtpPort = $smtp_port;\n    }\n\n    public function mail($email, $content)\n    {\n        // 發送郵件程式碼省略\n    }\n}\"\n```\n\n----------------------------------------\n\nTITLE: Fix Disabled Functions via curl Script\nDESCRIPTION: Alternative command to fix disabled functions using a remote script\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/others/disable-function-check.md#2025-04-12_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl -Ss https://www.workerman.net/webman/fix-disable-functions | php\n```\n\n----------------------------------------\n\nTITLE: Registering Blade Component\nDESCRIPTION: This PHP code registers the Blade component within the `view.extension` configuration callback.  The component is registered with the name 'alert'.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-hk/view.md#2025-04-12_snippet_22\n\nLANGUAGE: php\nCODE:\n```\n\"<?php\nuse support\\view\\Blade;\nreturn [\n    'handler' => Blade::class,\n    'extension' => function (Jenssegers\\Blade\\Blade $blade) {\n        $blade->component('alert', app\\view\\components\\Alert::class);\n    }\n];\n?>\"\n```\n\n----------------------------------------\n\nTITLE: Importing JavaScript Client\nDESCRIPTION: This script tag imports the push.js client-side library into your HTML. It allows you to establish WebSocket connections with the webman/push server.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/th/plugin/push.md#2025-04-12_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"/plugin/webman/push/push.js\"> </script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Commands for Webman Plugin\nDESCRIPTION: Configuration file (command.php) that registers the custom command class with the plugin system. This file returns an array of command classes that will be automatically loaded by the webman/console component.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/fr/plugin/create.md#2025-04-12_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse Foo\\Admin\\FooAdminAddCommand;\nreturn [\n    FooAdminAddCommand::class,\n    // ....vous pouvez ajouter plusieurs configurations...\n];\n```\n\n----------------------------------------\n\nTITLE: Installing webman plugin using command line\nDESCRIPTION: This command installs a webman application plugin from a source code package. The plugin's directory should be located in the `{主項目}/plugin/` directory.  Replace `插件名` with the actual name of the plugin.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/app/install.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n\"php webman app-plugin:install 插件名\"\n```\n\n----------------------------------------\n\nTITLE: Defining PHP Controller Class Structure\nDESCRIPTION: Example showing proper class naming convention in PascalCase following PSR-4 standards for plugin controllers.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/app/standard.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace plugin\\foo\\app\\controller;\n\nclass ArticleController\n{\n    \n}\n```\n\n----------------------------------------\n\nTITLE: Processing Uploaded Image in PHP Controller\nDESCRIPTION: PHP code for a controller that handles image upload, resizes the image to 100x100 pixels, and returns it as a PNG response. It uses the Intervention/Image library for image manipulation.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/bn/components/image.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\nuse support\\Request;\nuse Intervention\\Image\\ImageManagerStatic as Image;\n\nclass UserController\n{\n    public function img(Request $request)\n    {\n        $file = $request->file('file');\n        if ($file && $file->isValid()) {\n            $image = Image::make($file)->resize(100, 100);\n            return response($image->encode('png'), 200, ['Content-Type' => 'image/png']);\n        }\n        return response('ফাইল পাওয়া যায়নি');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using whereDate Clauses With Webman DB Query Builder\nDESCRIPTION: This snippet demonstrates how to use `whereDate` to filter results based on a specific date.  It selects records where the 'created_at' date is equal to '2016-12-31'.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/db/queries.md#2025-04-12_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')\n                ->whereDate('created_at', '2016-12-31')\n                ->get();\n```\n\n----------------------------------------\n\nTITLE: Creating a PHPUnit Test Case\nDESCRIPTION: This PHP code defines a PHPUnit test case class `TestConfig` that extends `PHPUnit\\Framework\\TestCase`. It contains a test method `testAppConfig` which asserts the structure and types of the 'app' configuration array. This test ensures that the config array exists and has the expected structure.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-hk/components/unitest.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse PHPUnit\\Framework\\TestCase;\n\nclass TestConfig extends TestCase\n{\n    public function testAppConfig()\n    {\n        $config = config('app');\n        self::assertIsArray($config);\n        self::assertArrayHasKey('debug', $config);\n        self::assertIsBool($config['debug']);\n        self::assertArrayHasKey('default_timezone', $config);\n        self::assertIsString($config['default_timezone']);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: PHP Native Template with Pagination\nDESCRIPTION: PHP native template implementation showing how to render pagination controls with Bootstrap styling.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/de/db/paginator.md#2025-04-12_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<html>\n<head>\n  <!-- Built-in support for Bootstrap pagination styles -->\n  <link rel=\"stylesheet\" href=\"//maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css\">\n</head>\n<body>\n\n<?= $paginator;?>\n\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Installing MongoDB Package for PHP 7.2\nDESCRIPTION: Composer command to install the MongoDB package for PHP version 7.2.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/tr/db/mongo.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\ncomposer require -W illuminate/database jenssegers/mongodb ^3.7.0\n```\n\n----------------------------------------\n\nTITLE: Multiple Redis Connections Configuration\nDESCRIPTION: Configuring multiple Redis connections with different hosts and options\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/th/queue/redis.md#2025-04-12_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'default' => [\n        'host' => 'redis://192.168.0.1:6379',\n        'options' => ['auth' => null, 'db' => 0]\n    ],\n    'other' => [\n        'host' => 'redis://192.168.0.2:6379',\n        'options' => ['auth' => null, 'db' => 0]\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Cluster in Webman\nDESCRIPTION: Example configuration for Redis cluster in Webman's config/redis.php file.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/jp/db/redis.md#2025-04-12_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\nreturn [\n    'clusters' => [\n        'default' => [\n            [\n                'host'     => 'localhost',\n                'password' => null,\n                'port'     => 6379,\n                'database' => 0,\n            ],\n        ],\n    ],\n\n];\n```\n\n----------------------------------------\n\nTITLE: กำหนดค่า Redis\nDESCRIPTION: ตัวอย่างการกำหนดค่า Redis ใน `config/redis.php` ซึ่งประกอบด้วย host, password, port และ database\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/th/db/cache.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'default' => [\n        'host'     => '127.0.0.1',\n        'password' => null,\n        'port'     => 6379,\n        'database' => 0,\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Get GET Parameter with Default Value - Webman PHP\nDESCRIPTION: Demonstrates how to get a GET parameter with a default value if the parameter is missing. If the 'name' parameter is not found, the method returns 'tom'.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/th/request.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$request->get('name', 'tom');\n```\n\n----------------------------------------\n\nTITLE: Configuring Routes\nDESCRIPTION: Route configuration for the JSON endpoint\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/aop.md#2025-04-12_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Webman\\Route;\n\nRoute::any('/json', [app\\controller\\IndexController::class, 'json']);\n```\n\n----------------------------------------\n\nTITLE: Ordering Results in WebMan PHP Query Builder\nDESCRIPTION: Demonstrates how to order query results, including random ordering.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/jp/db/queries.md#2025-04-12_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')\n                ->orderBy('name', 'desc')\n                ->get();\n```\n\nLANGUAGE: php\nCODE:\n```\n$randomUser = Db::table('users')\n                ->inRandomOrder()\n                ->first();\n```\n\n----------------------------------------\n\nTITLE: Using Subqueries in Eloquent Select Statements\nDESCRIPTION: Shows how to use subqueries in Eloquent select statements to fetch related data efficiently.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/db/model.md#2025-04-12_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nuse app\\model\\Destination;\nuse app\\model\\Flight;\n\nreturn Destination::addSelect(['last_flight' => Flight::select('name')\n    ->whereColumn('destination_id', 'destinations.id')\n    ->orderBy('arrived_at', 'desc')\n    ->limit(1)\n])->get();\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Exception Handler in Webman PHP\nDESCRIPTION: This PHP class extends the default exception handler to provide custom rendering for 500 errors. It handles both AJAX and page requests.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/others/custom-error-page.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace app\\exception;\n\nuse Throwable;\nuse Webman\\Http\\Request;\nuse Webman\\Http\\Response;\n\nclass Handler extends \\support\\exception\\Handler\n{\n    /**\n     * Render 返回\n     * @param Request $request\n     * @param Throwable $exception\n     * @return Response\n     */\n    public function render(Request $request, Throwable $exception) : Response\n    {\n        $code = $exception->getCode();\n        // ajax請求返回json數據\n        if ($request->expectsJson()) {\n            return json(['code' => $code ? $code : 500, 'msg' => $exception->getMessage()]);\n        }\n        // 頁面請求返回500.html模板\n        return view('500', ['exception' => $exception], '')->withStatus(500);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Estensione di think-template in webman\nDESCRIPTION: Esempio di come estendere think-template aggiungendo una libreria di tag personalizzata.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/view.md#2025-04-12_snippet_23\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse support\\view\\ThinkPHP;\nreturn [\n    'handler' => ThinkPHP::class,\n    'options' => [\n        'taglib_pre_load' => your\\namspace\\Taglib::class,\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Getting a Specific Session Value in Webman PHP\nDESCRIPTION: Demonstrates how to retrieve a specific session value using the get() method, with an optional default value.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/session.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$session = $request->session();\n$nome = $session->get('nome');\n\n// With default value\n$nome = $session->get('nome', 'tom');\n```\n\n----------------------------------------\n\nTITLE: Get Specific Cookie - Webman PHP\nDESCRIPTION: Retrieves a specific cookie by its name. If the cookie is not found, it returns null.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/th/request.md#2025-04-12_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n$request->cookie('name');\n```\n\n----------------------------------------\n\nTITLE: Modifying IndexController to use UserService\nDESCRIPTION: This snippet modifies the `IndexController` to use the `UserService` class. The `json` method now instantiates `UserService`, calls its `first` method, and returns the result in a JSON response.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/aop.md#2025-04-12_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse app\\service\\UserService;\nuse support\\Request;\n\nclass IndexController\n{\n    public function json(Request $request)\n    {\n        return json(['code' => 0, 'msg' => 'ok', 'data' => (new UserService())->first()]);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: ExceptionHandlerInterface in webman\nDESCRIPTION: This code snippet defines the `ExceptionHandlerInterface` which the exception handler class must implement. It includes `report` for logging exceptions and `render` for rendering the response.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/exception.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\ninterface ExceptionHandlerInterface\n{\n    /**\n     * 記錄日誌\n     * @param Throwable $e\n     * @return mixed\n     */\n    public function report(Throwable $e);\n\n    /**\n     * 渲染返回\n     * @param Request $request\n     * @param Throwable $e\n     * @return Response\n     */\n    public function render(Request $request, Throwable $e) : Response;\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Session Data Existence in Webman PHP\nDESCRIPTION: Demonstrates how to check if a session key exists using has() and exists() methods.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/session.md#2025-04-12_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$session = $request->session();\n$has = $session->has('name');\n\n$session = $request->session();\n$has = $session->exists('name');\n```\n\n----------------------------------------\n\nTITLE: Including JavaScript Client\nDESCRIPTION: This snippet demonstrates how to include the `push.js` client-side library in an HTML page.  This allows the web page to establish a WebSocket connection with the webman/push server.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-hk/plugin/push.md#2025-04-12_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<script src=\"/plugin/webman/push/push.js\"> </script>\n```\n\n----------------------------------------\n\nTITLE: Using Union Clauses in PHP Database Queries\nDESCRIPTION: This snippet shows how to use union clauses to combine the results of multiple queries.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/tr/db/queries.md#2025-04-12_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n$first = Db::table('users')\n            ->whereNull('first_name');\n\n$users = Db::table('users')\n            ->whereNull('last_name')\n            ->union($first)\n            ->get();\n```\n\n----------------------------------------\n\nTITLE: Testing AOP Implementation\nDESCRIPTION: Commands to start the server and test the AOP implementation\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/pt/aop.md#2025-04-12_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nphp start.php start\ncurl  http://127.0.0.1:8787/json\n```\n\n----------------------------------------\n\nTITLE: Loading Specific Files with Composer in Webman\nDESCRIPTION: This code demonstrates how to configure Composer to load specific PHP files before Webman starts. It includes helper files from the support and app directories.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/others/autoload.md#2025-04-12_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"files\": [\n    \"./support/helpers.php\",\n    \"./app/helpers.php\"\n]\n```\n\n----------------------------------------\n\nTITLE: Using Translation Function in PHP Controller\nDESCRIPTION: Example of using the trans() function in a controller to translate a message.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/components/translation.md#2025-04-12_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\n\nclass UserController\n{\n    public function get(Request $request)\n    {\n        $hello = trans('hello'); // Hello world!\n        return response($hello);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installazione di Blade via Composer in PHP\nDESCRIPTION: Comandi per installare il motore di template Blade e le sue dipendenze tramite Composer.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/view.md#2025-04-12_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require psr/container ^1.1.1 webman/blade\n```\n\n----------------------------------------\n\nTITLE: Initializing Alipay SDK in PHP\nDESCRIPTION: Code to initialize the Alipay SDK using the configuration file in a Webman PHP project.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/de/components/payment.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// Holen Sie sich die Konfigurationsdatei config/payment.php\n$config = Config::get('payment');\nPay::config($config);\n```\n\n----------------------------------------\n\nTITLE: Creating a Webman Plugin Command\nDESCRIPTION: Command to create a new Webman plugin using the console tool. This generates the necessary directory structure and files for a plugin named 'foo/admin'.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/bn/plugin/create.md#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nphp webman plugin:create --name=foo/admin\n```\n\n----------------------------------------\n\nTITLE: थिंककैश इंस्टॉल करना - PHP Composer कमांड\nDESCRIPTION: थिंककैश को प्रोजेक्ट में इंस्टॉल करने के लिए Composer कमांड। इंस्टॉलेशन के बाद रीस्टार्ट आवश्यक है।\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/hi/db/thinkcache.md#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require -W webman/think-cache\n```\n\n----------------------------------------\n\nTITLE: Using Language Parameter in trans() Function\nDESCRIPTION: Example of specifying the language directly in the trans() function call using the fourth parameter, without changing the global locale.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/components/translation.md#2025-04-12_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\n\nclass UserController\n{\n    public function get(Request $request)\n    {\n        // Изменение языка через четвертый аргумент\n        $hello = trans('hello', [], null, 'en'); // hello world!\n        return response($hello);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: New Session Handler Namespace\nDESCRIPTION: This shows the new namespace for session handlers introduced in webman v1.4.0. This is the correct namespace to use going forward.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/upgrade/1-4.md#2025-04-12_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n```php\nuse Webman\\Session\\FileSessionHandler;  \nuse Webman\\Session\\RedisSessionHandler;  \nuse Webman\\Session\\RedisClusterSessionHandler;\n```\n```\n\n----------------------------------------\n\nTITLE: Mesaj Gönderme - Stomp Client Kullanımı (PHP)\nDESCRIPTION: Bu kod parçası, Webman\\Stomp\\Client sınıfını kullanarak bir Stomp kuyruğuna mesaj göndermeyi gösterir. Veri JSON formatında kodlanarak gönderilir.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/tr/queue/stomp.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\nuse Webman\\Stomp\\Client;\n\nclass Index\n{\n    public function queue(Request $request)\n    {\n        // Kuyruk\n        $queue = 'örnekler';\n        // Veri (dizi iletilirken serialize, json_encode vb. gibi kendi serileştirmeniz gerekmektedir)\n        $data = json_encode(['to' => 'tom@gmail.com', 'content' => 'hello']);\n        // Gönderimi gerçekleştir\n        Client::send($queue, $data);\n\n        return response('redis kuyruk testi');\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Stopping Packaged Webman PHP Application\nDESCRIPTION: Shell command to stop the running packaged Webman application.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/others/phar.md#2025-04-12_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nphp webman.phar stop\n```\n\n----------------------------------------\n\nTITLE: Disabling Default Route in Webman PHP\nDESCRIPTION: Configuration code to disable the default routing behavior in Webman by adding to config/route.php\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/route.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nRoute::disableDefaultRoute();\n```\n\n----------------------------------------\n\nTITLE: Running PHPUnit Tests\nDESCRIPTION: Executes PHPUnit tests from the project directory. The command specifies the bootstrap file and the test file to run, and outputs test results to the console. It requires PHPUnit to be installed and configured.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/th/components/unitest.md#2025-04-12_snippet_2\n\nLANGUAGE: Text\nCODE:\n```\n\"./vendor/bin/phpunit --bootstrap support/bootstrap.php tests/TestConfig.php\"\n```\n\n----------------------------------------\n\nTITLE: Starting Webman Binary on Linux - Shell\nDESCRIPTION: This snippet describes how to run the compressed Webman binary on a Linux server, including options for starting in the background.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/pt/others/bin.md#2025-04-12_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n\"./webman.bin start\"\n```\n\nLANGUAGE: sh\nCODE:\n```\n\"./webman.bin start -d\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Twig Template Engine in PHP\nDESCRIPTION: This snippet shows how to configure Webman to use the Twig template engine. It includes the handler class and options for debugging and character set.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/de/view.md#2025-04-12_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse support\\view\\Twig;\n\nreturn [\n    'handler' => Twig::class,\n    'options' => [\n        'debug' => false,\n        'charset' => 'utf-8'\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Returning a View\nDESCRIPTION: This snippet demonstrates how to return a view using the `view()` helper function. It renders the `foo/hello` view and passes the `name` variable to it.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/response.md#2025-04-12_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\n\nclass FooController\n{\n    public function hello(Request $request)\n    {\n        return view('foo/hello', ['name' => 'webman']);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Multiple Process Configuration\nDESCRIPTION: Example of configuring multiple separate processes for handling time-sensitive tasks independently.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/components/crontab.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    // Other configurations...\n  \n    'task1'  => [\n        'handler'  => process\\Task1::class\n    ],\n    'task2'  => [\n        'handler'  => process\\Task2::class\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring Exception Handler\nDESCRIPTION: PHP configuration file that registers the custom exception handler for the application\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/jp/others/custom-error-page.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    '' => \\app\\exception\\Handler::class,\n];\n```\n\n----------------------------------------\n\nTITLE: Starting Webman on Linux Systems\nDESCRIPTION: Commands to start Webman in debug mode or daemon mode on Linux systems. Debug mode is used for development, while daemon mode is for production environments.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/tr/attention.md#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nphp start.php start\n```\n\nLANGUAGE: bash\nCODE:\n```\nphp start.php start -d\n```\n\n----------------------------------------\n\nTITLE: Deleting Context Data in PHP\nDESCRIPTION: Removes a specific value from the context by its name.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/jp/coroutine/context.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nContext::delete(string $name);\n```\n\n----------------------------------------\n\nTITLE: Processing Alipay Web Payment in PHP\nDESCRIPTION: Example of how to process an Alipay web payment, including order creation and redirection.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/de/components/payment.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse support\\Request;\nuse Webman\\Config;\nuse Yansongda\\Pay\\Pay;\n\n/**\n * @param Request $request\n * @return string\n */\npublic function payment(Request $request)\n{\n    // 1. Holen Sie sich die Konfigurationsdatei config/payment.php\n    $config = Config::get('payment');\n\n    // 2. Konfiguration initialisieren\n    Pay::config($config);\n\n    // 3. Web-Zahlung\n    $order = [\n        'out_trade_no' => time(),\n        'total_amount' => '8888.88',\n        'subject' => 'webman Zahlung',\n        '_method' => 'get' // Verwendung der GET-Methode zur Umleitung\n    ];\n    return Pay::alipay()->web($order)->getBody()->getContents();\n}\n```\n\n----------------------------------------\n\nTITLE: Business Exception Response Format\nDESCRIPTION: JSON response format for business exceptions\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/jp/exception.md#2025-04-12_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\"code\": 3000, \"message\": \"パラメーターエラー\"}\n```\n\n----------------------------------------\n\nTITLE: Directory structure for multiple applications\nDESCRIPTION: This snippet demonstrates the suggested directory structure for a webman project containing multiple applications such as shop, api, and admin. Each application has its own controller, model and view directories.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/multiapp.md#2025-04-12_snippet_0\n\nLANGUAGE: tree\nCODE:\n```\n\"app\n├── shop\n│   ├── controller\n│   ├── model\n│   └── view\n├── api\n│   ├── controller\n│   └── model\n└── admin\n    ├── controller\n    ├── model\n    └── view\"\n```\n\n----------------------------------------\n\nTITLE: Basic Where Clauses in Webman PHP\nDESCRIPTION: This snippet shows various ways to use the where method for filtering query results.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/hi/db/queries.md#2025-04-12_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')->where('votes', '=', 100)->get();\n\n$users = Db::table('users')->where('votes', 100)->get();\n\n$users = Db::table('users')\n                ->where('votes', '>=', 100)\n                ->get();\n\n$users = Db::table('users')\n                ->where('votes', '<>', 100)\n                ->get();\n\n$users = Db::table('users')\n                ->where('name', 'like', 'T%')\n                ->get();\n```\n\n----------------------------------------\n\nTITLE: Example of Using External Redis Queue Function\nDESCRIPTION: Example showing how to use the redis_queue_send helper function with a Redis extension instance.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/fr/queue/redis.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$redis = new Redis;\n$redis->connect('127.0.0.1', 6379);\n$queue = 'user-1';\n$data= ['some', 'data'];\nredis_queue_send($redis, $queue, $data);\n```\n\n----------------------------------------\n\nTITLE: Permission Configuration\nDESCRIPTION: This configuration file defines the settings for the permission system. It includes the default permission setting, logging configuration, and enforcers configuration. The enforcers section specifies the model, adapter, and database settings for the Casbin enforcer.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/casbin.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nreturn [\n    /*\n     *По умолчанию разрешение\n     */\n    'default' => 'basic',\n\n    'log' => [\n        'enabled' => false,\n        'logger' => 'log',\n    ],\n\n    'enforcers' => [\n        'basic' => [\n            /*\n            * Настройки модели\n            */\n            'model' => [\n                'config_type' => 'file',\n                'config_file_path' => config_path() . '/casbin-basic-model.conf',\n                'config_text' => '',\n            ],\n\n            // Адаптер .\n            'adapter' => webman\\\\permission\\\\adapter\\\\DatabaseAdapter::class,\n\n            /*\n            * Настройки базы данных.\n            */\n            'database' => [\n                // Имя подключения к базе данных, оставьте пустым, чтобы использовать настройки по умолчанию.\n                'connection' => '',\n                // Имя таблицы политики (без префикса таблицы)\n                'rules_name' => 'rule',\n                // Полное имя таблицы политики.\n                'rules_table' => 'train_rule',\n            ],\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Installing Paginator via Composer\nDESCRIPTION: Installs the jasongrimes/paginator package using Composer. This package provides pagination functionality for PHP applications.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/fr/components/paginator.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n\"composer require \\\"jasongrimes/paginator:^1.0.3\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Auto-Increment Configuration\nDESCRIPTION: Configuring auto-increment behavior for primary key in Eloquent model.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/de/db/model.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nclass User extends Model\n{\n    /**\n     * Gibt an, ob der Modell-Primärschlüssel inkrementiert wird\n     *\n     * @var bool\n     */\n    public $incrementing = false;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Wildcard Event Listening in PHP\nDESCRIPTION: This code demonstrates how to set up a wildcard event listener in the config/event.php file. It shows how to listen to all events starting with 'user.'.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/tr/components/event.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nreturn [\n    'user.*' => [\n        [app\\event\\User::class, 'deal']\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Checking for a PJAX request in Webman (PHP)\nDESCRIPTION: This snippet shows how to check if a request is a PJAX request using `$request->isPjax()`.  PJAX is a technique for performing partial page updates, and this method allows you to tailor the response accordingly.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/es/request.md#2025-04-12_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n$request->isPjax();\n```\n\n----------------------------------------\n\nTITLE: Synchronous Payment Return Handler\nDESCRIPTION: Handler for processing synchronous payment return notifications from Alipay\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/pt/components/payment.md#2025-04-12_snippet_5\n\nLANGUAGE: php\nCODE:\n```\npublic function alipayReturn(Request $request)\n{\n    Log::info('Notificação síncrona do Alipay ' . json_encode($request->get()));\n    return 'sucesso';\n}\n```\n\n----------------------------------------\n\nTITLE: Example View Template in HTML\nDESCRIPTION: Provides an example HTML view template used with the `view()` function. It demonstrates how to display data passed from the controller using `<?=htmlspecialchars($name)?>`.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/pt/response.md#2025-04-12_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<!doctype html>\n<html>\n<head>\n    <meta charset=\"utf-8\">\n    <title>webman</title>\n</head>\n<body>\nhello <?=htmlspecialchars($name)?>\n</body>\n</html>\n\n```\n\n----------------------------------------\n\nTITLE: View Configuration - Correct Usage\nDESCRIPTION: Demonstrates the new correct way to configure view file suffix in Webman 1.4 using options array\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/de/upgrade/1-4.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse support\\view\\Raw;\nreturn [\n    'handler' => Raw::class,\n    'options' => [\n        'view_suffix' => '.php'\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Get Request Host Without Port - Webman PHP\nDESCRIPTION: Retrieves the request host without the port number.  The first parameter is set to `true` to exclude the port.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/th/request.md#2025-04-12_snippet_24\n\nLANGUAGE: php\nCODE:\n```\n$request->host(true);\n```\n\n----------------------------------------\n\nTITLE: Correct Context Usage in PHP Coroutines\nDESCRIPTION: Shows the proper way to store request state data using context in a coroutine environment, avoiding global variable contamination.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/coroutine/fiber.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace app\\controller;\n\nuse support\\Request;\nuse support\\Context;\nuse Workerman\\Timer;\n\nclass TestController\n{\n    public function index(Request $request)\n    {\n        Context::set('name', $request->get('name'));\n        Timer::sleep(5);\n        return Context::get('name');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Blade Template Example in HTML\nDESCRIPTION: This HTML snippet shows a basic Blade template syntax for displaying a dynamic name value passed from the controller.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/de/view.md#2025-04-12_snippet_6\n\nLANGUAGE: HTML\nCODE:\n```\n<!doctype html>\n<html>\n<head>\n    <meta charset=\"utf-8\">\n    <title>webman</title>\n</head>\n<body>\nhello {{$name}}\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Configuring Nginx for Proxying Slow Process Requests in Webman PHP\nDESCRIPTION: This Nginx configuration sets up a proxy to route slow process requests to a separate Webman PHP port. It allows transparent handling of slow requests without affecting the main application port.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/tr/others/task.md#2025-04-12_snippet_1\n\nLANGUAGE: Nginx\nCODE:\n```\nupstream webman {\n    server 127.0.0.1:8787;\n    keepalive 10240;\n}\n\n# Yeni bir 8686 yukarıya doğru\nupstream task {\n   server 127.0.0.1:8686;\n   keepalive 10240;\n}\n\nserver {\n  server_name webman.com;\n  listen 80;\n  access_log off;\n  root /path/webman/public;\n\n  # /tast ile başlayan istekler 8686 portuna gider, lütfen /tast'ı ihtiyacınıza göre değiştirin\n  location /tast {\n      proxy_set_header X-Real-IP $remote_addr;\n      proxy_set_header Host $host;\n      proxy_http_version 1.1;\n      proxy_set_header Connection \"\";\n      proxy_pass http://task;\n  }\n\n  # Diğer istekler eski 8787 portuna gider\n  location / {\n      proxy_set_header X-Real-IP $remote_addr;\n      proxy_set_header Host $host;\n      proxy_http_version 1.1;\n      proxy_set_header Connection \"\";\n      if (!-f $request_filename){\n          proxy_pass http://webman;\n      }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configurazione proxy Nginx per WSS\nDESCRIPTION: Esempio di configurazione Nginx per abilitare il proxy WSS (WebSocket Secure)\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/plugin/push.md#2025-04-12_snippet_5\n\nLANGUAGE: nginx\nCODE:\n```\nserver {\n    # .... qui vengono omesse altre configurazioni ...\n\n    location /app/<app_key>\n    {\n        proxy_pass http://127.0.0.1:3131;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"Upgrade\";\n        proxy_set_header X-Real-IP $remote_addr;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Truncating a Database Table in PHP\nDESCRIPTION: Demonstrates how to completely empty a table using the truncate method, which removes all rows and resets auto-incrementing IDs.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/tr/db/queries.md#2025-04-12_snippet_22\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')->truncate();\n```\n\n----------------------------------------\n\nTITLE: Using Not Found Exception in Eloquent Queries\nDESCRIPTION: Shows how to use methods that throw exceptions when models are not found in Eloquent.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/tr/db/model.md#2025-04-12_snippet_17\n\nLANGUAGE: PHP\nCODE:\n```\n$model = app\\modle\\Flight::findOrFail(1);\n$model = app\\modle\\Flight::where('legs', '>', 100)->firstOrFail();\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Data Update Script in PHP using Webman\nDESCRIPTION: This script demonstrates how to create a custom PHP script in Webman that can access project classes and perform database operations. It uses the think\\facade\\Db class to query a user record from the database.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/others/scripts.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once __DIR__ . '/../vendor/autoload.php';\nrequire_once __DIR__ . '/../support/bootstrap.php';\n\nuse think\\facade\\Db;\n\n$user = Db::table('user')->find(1);\n\nvar_dump($user);\n```\n\n----------------------------------------\n\nTITLE: Registering the Permission Service\nDESCRIPTION: This code snippet registers the `webman\\permission\\Permission` class as a service in the `config/bootstrap.php` file. This makes the permission service available for use within the webman application.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/casbin.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n\"// ...\nwebman\\\\permission\\\\Permission::class,\"\n```\n\n----------------------------------------\n\nTITLE: 空のErrorCodeクラスファイルの定義 (PHP)\nDESCRIPTION: 自動生成されるエラーコードのための空のErrorCodeクラスを定義します。このファイルは後で自動的に更新されます。\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/jp/components/generate_error_code.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * 自動生成ファイル、手動で変更しないでください。\n * @Author:$Id$\n */\nnamespace support;\n\nclass ErrorCode\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Phar Package in Webman Project\nDESCRIPTION: Command to create a webman.phar file in the build directory of a Webman project\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/others/phar.md#2025-04-12_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nphp webman phar:pack\n```\n\n----------------------------------------\n\nTITLE: Using Local Variables for Coroutine-Safe Data Handling in PHP\nDESCRIPTION: Illustrates how using local variables instead of static or global variables ensures coroutine-safe data handling, preventing data pollution between different coroutines.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/de/coroutine/fiber.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace app\\controller;\n\nuse support\\Request;\nuse support\\Context;\nuse Workerman\\Timer;\n\nclass TestController\n{\n    public function index(Request $request)\n    {\n        $name = $request->get('name');\n        Timer::sleep(5);\n        return $name;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Nginx Upstream and Server Block for Webman\nDESCRIPTION: Nginx configuration that proxies requests to a Webman application running on localhost, with optimized header settings and request routing\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/others/nginx-proxy.md#2025-04-12_snippet_0\n\nLANGUAGE: nginx\nCODE:\n```\nupstream webman {\n    server 127.0.0.1:8787;\n    keepalive 10240;\n}\n\nserver {\n  server_name site_domain;\n  listen 80;\n  access_log off;\n  root /your/webman/public;\n\n  location ^~ / {\n      proxy_set_header X-Real-IP $remote_addr;\n      proxy_set_header Host $http_host;\n      proxy_set_header X-Forwarded-Proto $scheme;\n      proxy_http_version 1.1;\n      proxy_set_header Connection \"\";\n      if (!-f $request_filename){\n          proxy_pass http://webman;\n      }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Webman on Linux in Debug Mode\nDESCRIPTION: Starts Webman in debug mode for development and debugging purposes. Useful for local development and troubleshooting. Allows real-time logging and error tracking.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/install.md#2025-04-12_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nphp start.php start\n```\n\n----------------------------------------\n\nTITLE: Installazione di workerman/validation tramite Composer\nDESCRIPTION: Comando Composer per installare il pacchetto workerman/validation nel progetto.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/components/validation.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\ncomposer require workerman/validation\n```\n\n----------------------------------------\n\nTITLE: Installing the Error Code Generation Component\nDESCRIPTION: This command installs the `teamones/response-code-msg` package using Composer. This package is essential for automatically generating error codes based on predefined rules within the webman PHP project. This is a prerequisite before using the error code generation features.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/th/components/generate_error_code.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n\"composer require teamones/response-code-msg\"\n```\n\n----------------------------------------\n\nTITLE: Installing YongSongDa Payment SDK\nDESCRIPTION: Composer command to install version 3.x of the YongSongDa payment SDK package\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/components/payment.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ncomposer require yansongda/pay ~3.0\n```\n\n----------------------------------------\n\nTITLE: Configuring Public Path in Packaged Webman PHP Application\nDESCRIPTION: PHP code snippet showing how to configure the public_path in the app.php configuration file when the public directory needs to be kept separate from the phar file.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/others/phar.md#2025-04-12_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\n'public_path' => base_path(false) . DIRECTORY_SEPARATOR . 'public',\n```\n\n----------------------------------------\n\nTITLE: Redis Interface Methods\nDESCRIPTION: List of available Redis interface methods for direct usage\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/db/redis.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nRedis::append($key, $value)\nRedis::bitCount($key)\nRedis::decr($key, $value)\nRedis::decrBy($key, $value)\nRedis::get($key)\nRedis::getBit($key, $offset)\nRedis::getRange($key, $start, $end)\nRedis::getSet($key, $value)\nRedis::incr($key, $value)\nRedis::incrBy($key, $value)\nRedis::incrByFloat($key, $value)\nRedis::mGet(array $keys)\nRedis::getMultiple(array $keys)\nRedis::mSet($pairs)\nRedis::mSetNx($pairs)\nRedis::set($key, $value, $expireResolution = null, $expireTTL = null, $flag = null)\nRedis::setBit($key, $offset, $value)\nRedis::setEx($key, $ttl, $value)\nRedis::pSetEx($key, $ttl, $value)\nRedis::setNx($key, $value)\nRedis::setRange($key, $offset, $value)\nRedis::strLen($key)\nRedis::del(...$keys)\nRedis::exists(...$keys)\nRedis::expire($key, $ttl)\nRedis::expireAt($key, $timestamp)\nRedis::select($dbIndex)\n```\n\n----------------------------------------\n\nTITLE: Starting the PHP Server and Testing AOP\nDESCRIPTION: Commands to start the PHP server and test the AOP implementation using curl.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/tr/aop.md#2025-04-12_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nphp start.php start\ncurl  http://127.0.0.1:8787/json\n```\n\n----------------------------------------\n\nTITLE: Stopping Chunk Processing in Webman PHP\nDESCRIPTION: This snippet shows how to stop processing chunks by returning false from the callback function.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/hi/db/queries.md#2025-04-12_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')->orderBy('id')->chunkById(100, function ($users) {\n    // Records का प्रोसेस करें...\n\n    return false;\n});\n```\n\n----------------------------------------\n\nTITLE: Esempio di controller con motore di template Blade\nDESCRIPTION: Implementazione di un controller che utilizza il motore di template Blade per renderizzare una vista.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/view.md#2025-04-12_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\n\nclass UserController\n{\n    public function hello(Request $request)\n    {\n        return view('user/hello', ['name' => 'webman']);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: 支払い設定ファイルの定義 (PHP)\nDESCRIPTION: アリペイとウィーチャット支払いの設定を定義するPHPファイルです。アプリIDや証明書パス、コールバックURLなどの重要な設定が含まれています。\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/jp/components/payment.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nreturn [\n    'alipay' => [\n        'default' => [\n            'app_id' => '20160909004708941',\n            'app_secret_cert' => 'MIIEpAIBAAKCxxxxxxxxxxxxxxP4r3m4OUmD/+XDgCg==',\n            'app_public_cert_path' => base_path().'/payment/appCertPublicKey_2016090900470841.crt',\n            'alipay_public_cert_path' => base_path().'/payment/alipayCertPublicKey_RSA2.crt',\n            'alipay_root_cert_path' => base_path().'/payment/alipayRootCert.crt',\n            'return_url' => 'https://webman.tinywan.cn/payment/alipay-return',\n            'notify_url' => 'https://webman.tinywan.cn/payment/alipay-notify',\n            'mode' => \\Yansongda\\Pay\\Pay::MODE_SANDBOX,\n        ]\n    ],\n    'wechat' => [\n        'default' => [\n            'mch_id' => '',\n            'mch_secret_key' => '',\n            'mch_secret_cert' => '',\n            'mch_public_cert_path' => '',\n            'notify_url' => 'https://yansongda.cn/wechat/notify',\n            'mp_app_id' => '2016082000291234',\n            'mode' => \\Yansongda\\Pay\\Pay::MODE_SANDBOX,\n        ]\n    ],\n    'logger' => [\n        'enable' => false,\n        'file' => runtime_path().'/logs/alipay.log',\n        'level' => 'debug',\n        'type' => 'single',\n        'max_file' => 30,\n    ],\n    'http' => [\n        'timeout' => 5.0,\n        'connect_timeout' => 5.0,\n    ],\n    '_force' => true,\n];\n```\n\n----------------------------------------\n\nTITLE: Get Request Plugin Name - Webman PHP\nDESCRIPTION: Retrieves the request plugin name. Non-plugin requests return an empty string. (Requires webman >= 1.4.0)\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/th/request.md#2025-04-12_snippet_42\n\nLANGUAGE: php\nCODE:\n```\n$request->plugin;\n```\n\n----------------------------------------\n\nTITLE: Reloading Webman Configuration\nDESCRIPTION: Command to reload Webman after configuration changes\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/attention.md#2025-04-12_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nphp start.php reload\n```\n\n----------------------------------------\n\nTITLE: Getting A Single Column With Webman DB Query Builder\nDESCRIPTION: This example demonstrates how to retrieve a single column ('title') from the 'roles' table using the `pluck()` method.  The result is a collection of 'title' values.  The second example shows how to retrieve the 'title' column and use the 'id' column as the index.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/db/queries.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$titles = Db::table('roles')->pluck('title');\n```\n\nLANGUAGE: php\nCODE:\n```\n$roles = Db::table('roles')->pluck('title', 'id');\n\nforeach ($roles as $id => $title) {\n    echo $title;\n}\n```\n\n----------------------------------------\n\nTITLE: Web Payment Implementation\nDESCRIPTION: Implementation of web-based payment processing with order details\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/components/payment.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\npublic function payment(Request $request)\n{\n    Pay::config(config('payment'));\n    $order = [\n        'out_trade_no' => time(),\n        'total_amount' => '8888.88',\n        'subject' => 'webman payment',\n        '_method' => 'get'\n    ];\n    return Pay::alipay()->web($order)->getBody()->getContents();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Bootstrap Class\nDESCRIPTION: This code snippet shows how to configure the `MemReport` class to be executed when the process starts. The `MemReport::class` is added to the array in `config/bootstrap.php` to ensure it is loaded and the start method is executed.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/others/bootstrap.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    // ... Other configurations are omitted here...\n    \n    app\\bootstrap\\MemReport::class,\n];\n```\n\n----------------------------------------\n\nTITLE: Getting Context Data in PHP\nDESCRIPTION: Retrieves a value from the context by its name. If no name is provided, it returns all context data.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/jp/coroutine/context.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nContext::get(string $name = null);\n```\n\n----------------------------------------\n\nTITLE: Configuring Error Code Generation Parameters\nDESCRIPTION: Configuration file defining system number, root path, and error code generation range for automatic code generation\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/es/components/generate_error_code.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nreturn [\n    \"class\" => new \\support\\ErrorCode(),\n    \"root_path\" => app_path(),\n    \"system_number\" => 201,\n    \"start_min_number\" => 10000\n];\n```\n\n----------------------------------------\n\nTITLE: Business Exception Response Format\nDESCRIPTION: JSON response format for business exceptions.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/exception.md#2025-04-12_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\"code\": 3000, \"msg\": \"参数错误\"}\n```\n\n----------------------------------------\n\nTITLE: Using Context for Request-Specific Data Storage in PHP with Webman\nDESCRIPTION: This example shows the correct way to store request-specific data using the Context class in a coroutine-safe manner within a Webman controller.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/upgrade/1-5.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace app\\controller;\n\nuse support\\Request;\nuse support\\Context;\nuse Workerman\\Timer;\n\nclass TestController\n{\n    public function index(Request $request)\n    {\n        Context::set('name', $request->get('name'));\n        Timer::sleep(5);\n        return Context::get('name');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Old Session Handler Namespace in Webman\nDESCRIPTION: The deprecated namespace for SessionHandler classes in Webman versions prior to 1.4.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/upgrade/1-4.md#2025-04-12_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Webman\\FileSessionHandler;  \nuse Webman\\RedisSessionHandler;  \nuse Webman\\RedisClusterSessionHandler;\n```\n\n----------------------------------------\n\nTITLE: Respect Validation Usage Examples\nDESCRIPTION: Presents various usage examples of the `respect/validation` library, including single rule validation, chained validation, custom error messages, object validation, array validation, optional validation, and negated rules. Demonstrates the flexibility and features of the library.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/components/validation.md#2025-04-12_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Respect\\Validation\\Validator as v;\n\n// 單個規則驗證\n$number = 123;\nv::numericVal()->validate($number); // true\n\n// 多個規則鍊式驗證\n$usernameValidator = v::alnum()->noWhitespace()->length(1, 15);\n$usernameValidator->validate('alganet'); // true\n\n// 獲得第一個驗證失敗原因\ntry {\n    $usernameValidator->setName('使用者名稱')->check('alg  anet');\n} catch (ValidationException $exception) {\n    echo $exception->getMessage(); // 使用者名稱 只能包含字母（a-z）和數字（0-9）\n}\n\n// 獲得所有驗證失敗的原因\ntry {\n    $usernameValidator->setName('使用者名稱')->assert('alg  anet');\n} catch (ValidationException $exception) {\n    echo $exception->getFullMessage();\n    // 將會列印\n    // -  使用者名稱 必須符合以下規則\n    //     - 使用者名稱 只能包含字母（a-z）和數字（0-9）\n    //     - 使用者名稱 不能包含空格\n  \n    var_export($exception->getMessages());\n    // 將會列印\n    // array (\n    //   'alnum' => '使用者名稱 只能包含字母（a-z）和數字（0-9）',\n    //   'noWhitespace' => '使用者名稱 不能包含空格',\n    // )\n}\n\n// 自定義錯誤提示訊息\ntry {\n    $usernameValidator->setName('使用者名稱')->assert('alg  anet');\n} catch (ValidationException $exception) {\n    var_export($exception->getMessages([\n        'alnum' => '使用者名稱只能包含字母和數字',\n        'noWhitespace' => '使用者名稱不能有空格',\n        'length' => 'length符合規則，所以這條將不會顯示'\n    ]));\n    // 將會列印 \n    // array(\n    //    'alnum' => '使用者名稱只能包含字母和數字',\n    //    'noWhitespace' => '使用者名稱不能有空格'\n    // )\n}\n\n// 驗證物件\n$user = new stdClass;\n$user->name = 'Alexandre';\n$user->birthdate = '1987-07-01';\n$userValidator = v::attribute('name', v::stringType()->length(1, 32))\n                ->attribute('birthdate', v::date()->minAge(18));\n$userValidator->validate($user); // true\n\n// 驗證陣列\n$data = [\n    'parentKey' => [\n        'field1' => 'value1',\n        'field2' => 'value2'\n        'field3' => true,\n    ]\n];\nv::key(\n    'parentKey',\n    v::key('field1', v::stringType())\n        ->key('field2', v::stringType())\n        ->key('field3', v::boolType())\n    )\n    ->assert($data); // 也可以用 check() 或 validate()\n  \n// 可選驗證\nv::alpha()->validate(''); // false \nv::alpha()->validate(null); // false \nv::optional(v::alpha())->validate(''); // true\nv::optional(v::alpha())->validate(null); // true\n\n// 否定規則\nv::not(v::intVal())->validate(10); // false\n\n```\n\n----------------------------------------\n\nTITLE: Using Complex Plural Rules\nDESCRIPTION: Example of using a translation with complex plural forms that match specific number ranges.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/components/translation.md#2025-04-12_snippet_16\n\nLANGUAGE: php\nCODE:\n```\ntrans('apple_count', ['%count%' => 20]); // There are many apples\n```\n\n----------------------------------------\n\nTITLE: User Controller with Model Injection\nDESCRIPTION: Controller demonstrating model injection and creation.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/controller.md#2025-04-12_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\nuse app\\model\\User;\nclass UserController\n{\n    public function create(User $user): int\n    {\n        $user->save();\n        return $user->id;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Event Listeners and Subscribers in PHP\nDESCRIPTION: Configuration file content for setting up event listeners and subscribers in the Webman application.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/event.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    // Event listeners\n    'listener'    => [],\n\n    // Event subscribers\n    'subscriber' => [],\n];\n```\n\n----------------------------------------\n\nTITLE: Obtaining the server's IP address in Webman (PHP)\nDESCRIPTION: This snippet shows how to retrieve the server's IP address using `$request->getLocalIp()`. The server IP can be useful for logging or internal routing purposes.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/es/request.md#2025-04-12_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n$request->getLocalIp();\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis for Webman Plugins\nDESCRIPTION: Demonstrates how to configure Redis connections specifically for a Webman plugin, including multiple connection settings.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/plugin/app.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'default' => [\n        'host' => '127.0.0.1',\n        'password' => null,\n        'port' => 6379,\n        'database' => 0,\n    ],\n    'cache' => [\n        'host' => '127.0.0.1',\n        'password' => null,\n        'port' => 6379,\n        'database' => 1,\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Installing Redis Dependencies for Webman PHP\nDESCRIPTION: Command to install the required Redis packages for Webman PHP using Composer.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/tr/db/redis.md#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require -W illuminate/redis illuminate/events\n```\n\n----------------------------------------\n\nTITLE: Using findOrFail and firstOrFail for Exception Handling\nDESCRIPTION: Demonstrates methods that throw ModelNotFoundException when no record is found, which is useful in controllers and routes for proper error handling.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/es/db/model.md#2025-04-12_snippet_22\n\nLANGUAGE: php\nCODE:\n```\n$model = app\\model\\Flight::findOrFail(1);\n$model = app\\model\\Flight::where('patas', '>', 100)->firstOrFail();\n```\n\n----------------------------------------\n\nTITLE: Union Clause with Webman PHP\nDESCRIPTION: This code snippet demonstrates how to use the `union()` clause in the Webman PHP framework's database query builder. It combines the results of two separate queries on the 'users' table, one filtering by null 'first_name' and the other by null 'last_name'.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/fr/db/queries.md#2025-04-12_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n$first = Db::table('users')\n            ->whereNull('first_name');\n\n$users = Db::table('users')\n            ->whereNull('last_name')\n            ->union($first)\n            ->get();\n```\n\n----------------------------------------\n\nTITLE: Triggering an Event in PHP\nDESCRIPTION: This snippet shows how to instantiate and trigger the LogErrorWriteEvent with error details. It demonstrates the process of creating an event object and firing it through the EventManager, so that all relevant listeners and subscribers can respond to it.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/event.md#2025-04-12_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$error = [\n    'errorMessage' => '錯誤消息',\n    'errorCode' => 500\n];\nEventManager::trigger(new LogErrorWriteEvent($error),LogErrorWriteEvent::NAME);\n```\n\n----------------------------------------\n\nTITLE: Variable Naming Convention in PHP\nDESCRIPTION: Example of recommended variable naming using camelCase with lowercase initial letter\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/app/standard.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$articleCount = 100;\n```\n\n----------------------------------------\n\nTITLE: Get Application Name from Request in webman-php\nDESCRIPTION: This snippet shows how to get the application name associated with the request using `$request->app` in webman-php within a multi-app context. In a single application setup, this will return an empty string.  Closure routes will always return an empty string.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/pt/request.md#2025-04-12_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$request->app;\n```\n\n----------------------------------------\n\nTITLE: Configuración Personalizada en Webman PHP\nDESCRIPTION: Ejemplo de creación de un archivo de configuración personalizado en el directorio config/ con parámetros personalizados para una funcionalidad específica.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/es/config.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nreturn [\n    'key' => '...',\n    'secret' => '...'\n];\n```\n\nLANGUAGE: php\nCODE:\n```\nconfig('payment');\nconfig('payment.key');\nconfig('payment.secret');\n```\n\n----------------------------------------\n\nTITLE: ThinkPHP Template Example in HTML\nDESCRIPTION: This HTML snippet demonstrates a basic ThinkPHP template syntax for displaying a dynamic name value passed from the controller.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/de/view.md#2025-04-12_snippet_7\n\nLANGUAGE: HTML\nCODE:\n```\n<!doctype html>\n<html>\n<head>\n    <meta charset=\"utf-8\">\n    <title>webman</title>\n</head>\n<body>\nhello {$name}\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Changing Default Language in PHP\nDESCRIPTION: Example of changing the default language using the locale() function in a controller.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/components/translation.md#2025-04-12_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\n\nclass UserController\n{\n    public function get(Request $request)\n    {\n        // Change language\n        locale('en');\n        $hello = trans('hello'); // Hello world!\n        return response($hello);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a PHP Unit Test Case for Configuration\nDESCRIPTION: Demonstrates creating a PHPUnit test case to validate application configuration settings, checking types and presence of specific configuration keys\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/components/unitest.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse PHPUnit\\Framework\\TestCase;\n\nclass TestConfig extends TestCase\n{\n    public function testAppConfig()\n    {\n        $config = config('app');\n        self::assertIsArray($config);\n        self::assertArrayHasKey('debug', $config);\n        self::assertIsBool($config['debug']);\n        self::assertArrayHasKey('default_timezone', $config);\n        self::assertIsString($config['default_timezone']);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Paginierung mit dem Query Builder in PHP\nDESCRIPTION: Dieses Snippet zeigt, wie man Ergebnisse mit OFFSET und LIMIT für Paginierung begrenzt.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/de/db/queries.md#2025-04-12_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')\n                ->offset(10)\n                ->limit(5)\n                ->get();\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Casbin Enforcer in Webman PHP\nDESCRIPTION: Examples of importing and using the Casbin Enforcer class in a Webman PHP application, showing both default and named configuration patterns.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-hk/components/casbin.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n# 引入\nuse teamones\\casbin\\Enforcer;\n```\n\nLANGUAGE: php\nCODE:\n```\n# 1. 默认使用 default 配置\nEnforcer::addPermissionForUser('user1', '/user', 'read');\n\n# 1. 使用自定义的 rbac 配置\nEnforcer::instance('rbac')->addPermissionForUser('user1', '/user', 'read');\n```\n\n----------------------------------------\n\nTITLE: Configuring Exclude Pattern for Phar Packaging in Webman PHP\nDESCRIPTION: PHP code snippet showing the configuration of the exclude pattern in the console plugin's app.php file. This pattern is used to exclude unnecessary directories and files during packaging.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/others/phar.md#2025-04-12_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n'exclude_pattern'   => '#^(?!.*(composer.json|/.github/|/.idea/|/.git/|/.setting/|/runtime/|/vendor-bin/|/build/|vendor/webman/admin))(.*)$#'\n```\n\n----------------------------------------\n\nTITLE: Configuring PHP-DI Container\nDESCRIPTION: Configuration for the PHP-DI container in config/container.php to enable autowiring and annotations.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/pt/di.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$builder = new \\DI\\ContainerBuilder();\n$builder->addDefinitions(config('dependence', []));\n$builder->useAutowiring(true);\n$builder->useAnnotations(true);\nreturn $builder->build();\n```\n\n----------------------------------------\n\nTITLE: yansongda/pay SDKのインストール (PHP)\nDESCRIPTION: Composerを使用してyansongda/pay SDKをインストールするコマンドです。バージョン3.0.0以上を指定しています。\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/jp/components/payment.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ncomposer require yansongda/pay ^3.0.0\n```\n\n----------------------------------------\n\nTITLE: Installing Symfony Translation Component\nDESCRIPTION: Composer command to install the symfony/translation package\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/components/translation.md#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require symfony/translation\n```\n\n----------------------------------------\n\nTITLE: Installing webman-permission with Composer\nDESCRIPTION: This command installs the `tinywan/webman-permission` package using Composer, a dependency manager for PHP.  This package provides Casbin-based access control functionality for webman. It requires PHP 7.1+ and ThinkORM.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/casbin.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ncomposer require tinywan/webman-permission\n```\n\n----------------------------------------\n\nTITLE: Configuring AOP Settings in PHP\nDESCRIPTION: PHP configuration file for AOP, including scan paths, annotations to ignore, and aspect collectors.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/de/aop.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Hyperf\\Di\\Annotation\\AspectCollector;\n\nreturn [\n    'annotations' => [\n        'scan' => [\n            'paths' => [\n                BASE_PATH . '/app',\n            ],\n            'ignore_annotations' => [\n                'mixin',\n            ],\n            'class_map' => [\n            ],\n            'collectors' => [\n                AspectCollector::class\n            ],\n        ],\n    ],\n    'aspects' => [\n        // Here write the corresponding Aspect\n        app\\aspect\\DebugAspect::class,\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Exception Handler in PHP\nDESCRIPTION: Configuration file for defining the default exception handling class in Webman PHP framework\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/th/exception.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    '' => support\\exception\\Handler::class,\n];\n```\n\n----------------------------------------\n\nTITLE: Installing PHPUnit via Composer\nDESCRIPTION: Composer command to install PHPUnit as a development dependency for unit testing in a PHP project\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/fr/components/unitest.md#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require --dev phpunit\\/phpunit\n```\n\n----------------------------------------\n\nTITLE: Starting Webman on Windows\nDESCRIPTION: Commands for starting Webman on Windows systems using either batch file or PHP command\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/pt/attention.md#2025-04-12_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nwindows.bat\n```\n\nLANGUAGE: bash\nCODE:\n```\nphp windows.php\n```\n\n----------------------------------------\n\nTITLE: Building Binary Package for Webman PHP Project\nDESCRIPTION: Command to build a binary package of the Webman PHP project. Optionally specifies the PHP version for packaging.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/others/bin.md#2025-04-12_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nphp webman build:bin\n```\n\nLANGUAGE: sh\nCODE:\n```\nphp webman build:bin 8.1\n```\n\n----------------------------------------\n\nTITLE: Installing webman-event Library via Composer\nDESCRIPTION: Command to install the webman-event library using Composer package manager.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/event.md#2025-04-12_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require tinywan/webman-event\n```\n\n----------------------------------------\n\nTITLE: Creating Custom 404 HTML Template in Webman PHP\nDESCRIPTION: This HTML template is used to display a custom 404 error page. It includes a placeholder for a dynamic error message.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/others/custom-error-page.md#2025-04-12_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!doctype html>\n<html>\n<head>\n    <meta charset=\"utf-8\">\n    <title>404 not found</title>\n</head>\n<body>\n<?=htmlspecialchars($error)?>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Starting Packaged Webman Binary in Bash\nDESCRIPTION: Commands to start the packaged Webman binary on a Linux server, with options for regular and daemon mode execution.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/fr/others/bin.md#2025-04-12_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./webman.bin start\n```\n\nLANGUAGE: bash\nCODE:\n```\n./webman.bin start -d\n```\n\n----------------------------------------\n\nTITLE: Using wasChanged Method in Eloquent Models\nDESCRIPTION: Shows how to use the wasChanged method to determine if properties changed when the model was last saved in the current request cycle.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/tr/db/model.md#2025-04-12_snippet_23\n\nLANGUAGE: php\nCODE:\n```\n$user = User::create([\n    'first_name' => 'Taylor',\n    'last_name' => 'Otwell',\n    'title' => 'Developer',\n]);\n\n$user->title = 'Painter';\n$user->save();\n\n$user->wasChanged(); // true\n$user->wasChanged('title'); // true\n$user->wasChanged('first_name'); // false\n```\n\n----------------------------------------\n\nTITLE: Implementing Delayed Response with Coroutines in PHP\nDESCRIPTION: Demonstrates how to use Timer::sleep() for non-blocking delay in a controller action. This method doesn't block the process unlike PHP's native sleep() function.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/jp/coroutine/fiber.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace app\\controller;\n\nuse support\\Request;\nuse Workerman\\Timer;\n\nclass TestController\n{\n    public function index(Request $request)\n    {\n        // 1.5秒スリープ\n        Timer::sleep(1.5);\n        return $request->getRemoteIp();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Envío de Mensajes STOMP con webman/stomp\nDESCRIPTION: Este código demuestra cómo enviar un mensaje a una cola STOMP utilizando la biblioteca webman/stomp. Se crea una instancia de `Client`, se especifica la cola y los datos a enviar (serializados en formato JSON), y luego se llama al método `send` para enviar el mensaje al intermediario.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/es/queue/stomp.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n```php\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\nuse Webman\\Stomp\\Client;\n\nclass Index\n{\n    public function queue(Request $request)\n    {\n        // Cola\n        $queue = 'ejemplos';\n        // Datos (si se está enviando un array, es necesario serializarlo manualmente, por ejemplo usando json_encode, serialize, etc.)\n        $data = json_encode(['to' => 'tom@gmail.com', 'content' => 'hello']);\n        // Realizar el envío\n        Client::send($queue, $data);\n\n        return response('Prueba de cola de redis');\n    }\n\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Table Name in Eloquent Model\nDESCRIPTION: Demonstrates how to specify a custom table name for an Eloquent model using the $table property.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/tr/db/model.md#2025-04-12_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nclass User extends Model\n{\n    protected $table = 'user';\n}\n```\n\n----------------------------------------\n\nTITLE: Installing webman/captcha via Composer\nDESCRIPTION: Bu komut, webman/captcha paketini Composer kullanarak projeye ekler.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/tr/components/captcha.md#2025-04-12_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require webman/captcha\n```\n\n----------------------------------------\n\nTITLE: Création d'un processus de tâche en arrière-plan dans Webman\nDESCRIPTION: Classe TaskTest qui exécute des tâches périodiques à l'aide de Timer, comme la vérification de nouveaux utilisateurs dans la base de données toutes les 10 secondes.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/fr/process.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\\nnamespace app;\\n\\nuse Workerman\\Timer;\\nuse support\\Db;\\n\\nclass TaskTest\\n{\\n  \\n    public function onWorkerStart()\\n    {\\n        // Vérifiez la base de données toutes les 10 secondes pour voir s'il y a de nouveaux utilisateurs enregistrés\\n        Timer::add(10, function(){\\n            Db::table('users')->where('regist_timestamp', '>', time()-10)->get();\\n        });\\n    }\\n    \\n}\n```\n\n----------------------------------------\n\nTITLE: アリペイ非同期コールバック処理 (PHP)\nDESCRIPTION: アリペイからの非同期通知を処理するPHPコードです。Pay::alipay()->callback()メソッドを使用して通知データを検証し、適切な応答を返します。\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/jp/components/payment.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\npublic function alipayNotify(Request $request): Response\n{\n    $config = Config::get('payment');\n    Pay::config($config);\n    $result = Pay::alipay()->callback($request->post());\n    // 支払い状態の確認やその他のビジネスロジックをここに実装\n    return new Response(200, [], 'success');\n}\n```\n\n----------------------------------------\n\nTITLE: Installing webman/push Plugin via Composer\nDESCRIPTION: Command to install the webman/push plugin using Composer package manager for PHP projects\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/plugin/push.md#2025-04-12_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncomposer require webman/push\n```\n\n----------------------------------------\n\nTITLE: Displaying Pagination in ThinkPHP Template\nDESCRIPTION: This HTML code demonstrates how to display the pagination links in a ThinkPHP template using the `$paginator` variable. The `<?=$paginator?>` syntax is used to output the paginator object which contains the HTML for pagination links.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/fr/db/paginator.md#2025-04-12_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<html>\n<head>\n    <!-- Built-in support for Bootstrap pagination styles -->\n    <link rel=\"stylesheet\" href=\"//maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css\">\n</head>\n<body>\n\n<?=$paginator?>\n\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Handling Alipay Synchronous Callback in PHP\nDESCRIPTION: Example of handling synchronous callbacks from Alipay, typically used for redirecting users back to the merchant site.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/de/components/payment.md#2025-04-12_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse support\\Request;\nuse Yansongda\\Pay\\Pay;\n\n/**\n * @desc: 『Alipay』Synchroner Rückruf\n * @param Request $request\n * @author Tinywan(ShaoBo Wan)\n */\npublic function alipayReturn(Request $request)\n{\n    Log::info('『Alipay』Synchroner Rückruf'.json_encode($request->get()));\n    return 'Erfolg';\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Response Format for BusinessException in Webman PHP\nDESCRIPTION: This JSON snippet illustrates the default response format when a BusinessException is thrown and the request expects a JSON response.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/exception.md#2025-04-12_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"code\": \"500\",\n    \"msg\": \"Informazioni sull'eccezione\"\n}\n```\n\n----------------------------------------\n\nTITLE: Local Variable Safe Coroutine Example\nDESCRIPTION: Demonstrates that local variables are coroutine-safe and do not cause data pollution across different requests\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-hk/upgrade/1-5.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace app\\controller;\n\nuse support\\Request;\nuse support\\Context;\nuse Workerman\\Timer;\n\nclass TestController\n{\n    public function index(Request $request)\n    {\n        $name = $request->get('name');\n        Timer::sleep(5);\n        return $name;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: アリペイウェブ支払いの実装 (PHP)\nDESCRIPTION: アリペイのウェブ支払いを実装するPHPコードです。注文情報を設定し、Pay::alipay()->web()メソッドを使用して支払いページを生成します。\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/jp/components/payment.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\npublic function payment(Request $request)\n{\n    $config = Config::get('payment');\n    Pay::config($config);\n    $order = [\n        'out_trade_no' => time(),\n        'total_amount' => '8888.88',\n        'subject' => 'webman payment',\n        '_method' => 'get'\n    ];\n    return Pay::alipay()->web($order)->getBody()->getContents();\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Controller in Webman PHP\nDESCRIPTION: This snippet demonstrates how to create a basic controller in Webman.  It defines a controller class with `index` and `hello` methods that return simple responses.  Dependencies include the `support\\Request` class for handling HTTP requests.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/th/controller.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n\"<?php\nnamespace app\\controller;\n\nuse support\\Request;\n\nclass FooController\n{\n    public function index(Request $request)\n    {\n        return response('hello index');\n    }\n    \n    public function hello(Request $request)\n    {\n        return response('hello webman');\n    }\n}\n\"\n```\n\n----------------------------------------\n\nTITLE: Login HTML Form with Captcha\nDESCRIPTION: HTML template for login page with captcha image and input field\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/fr/components/captcha.md#2025-04-12_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<!doctype html>\n<html>\n<head>\n    <meta charset=\"utf-8\">\n    <title>Test de captcha</title>  \n</head>\n<body>\n    <form method=\"post\" action=\"/login/check\">\n       <img src=\"/login/captcha\" /><br>\n        <input type=\"text\" name=\"captcha\" />\n        <input type=\"submit\" value=\"Soumettre\" />\n    </form>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Installing Redis Dependencies with Composer\nDESCRIPTION: Command to install required Redis packages illuminate/redis and illuminate/events via Composer\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/pt/db/redis.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ncomposer require -W illuminate/redis illuminate/events\n```\n\n----------------------------------------\n\nTITLE: Configuring Exception Handler in Webman PHP\nDESCRIPTION: This snippet configures the default exception handler for a Webman PHP application by returning an array containing a class reference. It allows for multiple application configurations.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/fr/exception.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nreturn [\n    // Configurez ici la classe de gestion des exceptions\n    '' => support\\exception\\Handler::class,\n];\n```\n\n----------------------------------------\n\nTITLE: Registrazione del componente Blade in webman\nDESCRIPTION: Configurazione per registrare il componente Blade Alert in webman.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/view.md#2025-04-12_snippet_21\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse support\\view\\Blade;\nreturn [\n    'handler' => Blade::class,\n    'extension' => function (Jenssegers\\Blade\\Blade $blade) {\n        $blade->component('alert', app\\view\\components\\Alert::class);\n    }\n];\n```\n\n----------------------------------------\n\nTITLE: Returning Any Response\nDESCRIPTION: This snippet demonstrates how to return a simple text response using the `response()` helper function in webman. It shows a basic controller action that returns the string \"hello webman\".\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/response.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\n\nclass FooController\n{\n    public function hello(Request $request)\n    {\n        return response('hello webman');\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Mass Assignment with 'fill' in PHP\nDESCRIPTION: This snippet shows how to use the `fill()` method to assign an array of attributes to a model instance. It is important to have either `$fillable` or `$guarded` properly set in the model to prevent unwanted mass assignment.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/fr/db/model.md#2025-04-12_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n$flight->fill(['name' => 'Flight 22']);\n```\n\n----------------------------------------\n\nTITLE: Configurar Blade para controlador en Webman\nDESCRIPTION: Este snippet muestra cómo configurar Blade como motor de plantillas en Webman.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/es/view.md#2025-04-12_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse support\\view\\Blade;\n\nreturn [\n    'handler' => Blade::class\n];\n```\n\n----------------------------------------\n\nTITLE: Enabling Stomp Protocol in RabbitMQ\nDESCRIPTION: Enables the stomp protocol in RabbitMQ using the rabbitmq-plugins command.  This is required before stomp clients can connect.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-hk/queue/stomp.md#2025-04-12_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nrabbitmq-plugins enable rabbitmq_stomp\n```\n\n----------------------------------------\n\nTITLE: Instalación de webman/stomp con Composer\nDESCRIPTION: Este comando instala la biblioteca webman/stomp utilizando Composer, lo que permite a la aplicación webman interactuar con intermediarios de mensajes STOMP.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/es/queue/stomp.md#2025-04-12_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n```composer require webman/stomp```\n```\n\n----------------------------------------\n\nTITLE: Chinese Translation File Example\nDESCRIPTION: Sample Chinese language translation file implementation\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/de/components/translation.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'hello' => '你好 世界!',\n];\n```\n\n----------------------------------------\n\nTITLE: Implementing Delayed Response with Timer in PHP\nDESCRIPTION: Demonstrates how to use Timer::sleep() for non-blocking delays in a Webman controller. This method allows for delayed responses without blocking the process.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/de/coroutine/fiber.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace app\\controller;\n\nuse support\\Request;\nuse Workerman\\Timer;\n\nclass TestController\n{\n    public function index(Request $request)\n    {\n        // Schlafe für 1,5 Sekunden\n        Timer::sleep(1.5);\n        return $request->getRemoteIp();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installazione di think-template via Composer in PHP\nDESCRIPTION: Comando per installare il motore di template think-template tramite Composer.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/view.md#2025-04-12_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require topthink/think-template\n```\n\n----------------------------------------\n\nTITLE: Implementing Exception Handler Interface in PHP\nDESCRIPTION: Interface defining the required methods for exception handling with report and render functionality\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/th/exception.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\ninterface ExceptionHandlerInterface\n{\n    public function report(Throwable $e);\n    public function render(Request $request, Throwable $e) : Response;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Blade Component in HTML Template\nDESCRIPTION: This HTML snippet shows how to use a custom Blade component named 'Alert' in a template.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/de/view.md#2025-04-12_snippet_14\n\nLANGUAGE: HTML\nCODE:\n```\n<!doctype html>\n<html>\n<head>\n    <meta charset=\"utf-8\">\n    <title>webman</title>\n</head>\n<body>\n\n<x-alert/>\n\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Installing respect/validation Package with Composer\nDESCRIPTION: Command to install the workerman/validation package via Composer, which is a wrapper for the Respect\\Validation library adapted for use with WebMan.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-hk/components/validation.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\ncomposer require workerman/validation\n```\n\n----------------------------------------\n\nTITLE: Installing yansongda/pay Package via Composer\nDESCRIPTION: Command to install the yansongda/pay package using Composer with verbose output.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-hk/components/pay.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ncomposer require yansongda/pay -vvv\n```\n\n----------------------------------------\n\nTITLE: Using Private Channels with webman/push JavaScript Client\nDESCRIPTION: JavaScript code showing how to subscribe to private channels using the webman/push client for secure communication.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/de/plugin/push.md#2025-04-12_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar connection = new Push({\n    url: 'ws://127.0.0.1:3131',\n    app_key: '<app_key>',\n    auth: '/plugin/webman/push/auth'\n});\n\nvar uid = 1;\nvar user_channel = connection.subscribe('private-user-' + uid);\n```\n\n----------------------------------------\n\nTITLE: Configuring Views Path in Webman Plugin\nDESCRIPTION: Demonstrates the file path structure for view configuration in Webman application plugins. The configuration file should be located in the plugin's config directory.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/app/view.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nplugin/{plugin identifier}/config/view.php\n```\n\n----------------------------------------\n\nTITLE: Upgrading Webman Framework via Composer\nDESCRIPTION: This snippet shows the composer command used to upgrade the webman framework to version 1.5. The `-W` flag ensures that all dependencies are updated according to the new version.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/upgrade/1-5.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n`composer require workerman/webman-framework ^1.5 -W`\n```\n\n----------------------------------------\n\nTITLE: Installing Webman Push Service with Composer\nDESCRIPTION: This snippet demonstrates how to install the webman/push package using Composer for PHP. The package enables server-side push notifications via WebSockets.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/plugin/push.md#2025-04-12_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require webman/push\n```\n\n----------------------------------------\n\nTITLE: Directory Structure for Language Files\nDESCRIPTION: Example of the directory structure used for organizing language files in a Webman application, with separate folders for each supported language.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/components/translation.md#2025-04-12_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nresource/\n└── translations\n    ├── en\n    │   └── messages.php\n    └── zh_CN\n        └── messages.php\n```\n\n----------------------------------------\n\nTITLE: Installing PHPUnit\nDESCRIPTION: Installs PHPUnit as a development dependency using Composer. This command adds PHPUnit to the project's `require-dev` section in `composer.json`. Subsequent composer install or update commands will install the PHPUnit package.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/th/components/unitest.md#2025-04-12_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n\"composer require --dev phpunit/phpunit\"\n```\n\n----------------------------------------\n\nTITLE: Installing workerman/validation\nDESCRIPTION: Command to install the workerman/validation package via composer\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/components/validation.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\ncomposer require workerman/validation\n```\n\n----------------------------------------\n\nTITLE: Removing Composer Proxy Configuration in Bash\nDESCRIPTION: Command to remove Composer proxy configuration if installation fails. This can help resolve installation issues.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/de/db/thinkorm.md#2025-04-12_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncomposer config -g --unset repos.packagist\n```\n\n----------------------------------------\n\nTITLE: Stress Testing with wrk\nDESCRIPTION: This shell command uses the 'wrk' tool to perform a stress test with a concurrency of 200 and a duration of 10 seconds.  'wrk' enables keep-alive by default. The '-c' flag specifies the concurrency, and '-d' specifies the duration. The target URL is 'http://example.com'.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/others/benchmarks.md#2025-04-12_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n# 200 concurrency, 10 seconds stress testing, enable keep-alive (default)\nwrk -c 200 -d 10s http://example.com\n```\n\n----------------------------------------\n\nTITLE: Executing AB without Keep-Alive\nDESCRIPTION: This command-line instruction demonstrates running the `ab` (ApacheBench) tool without keep-alive enabled.  The `-n` parameter specifies the total number of requests, `-c` sets the concurrency level. Omitting the `-k` parameter disables HTTP keep-alive, which simulates short-lived connections.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/es/others/benchmarks.md#2025-04-12_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nab -n100000 -c200 http://127.0.0.1:8787/\n```\n\n----------------------------------------\n\nTITLE: Checking Session Data Existence in Webman PHP\nDESCRIPTION: Shows how to check if session data exists using has() and exists() methods.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/session.md#2025-04-12_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$session = $request->session();\n$esiste = $session->has('nome');\n\n$esiste = $session->exists('nome');\n```\n\n----------------------------------------\n\nTITLE: Creating Application Plugin Directory Structure in PHP\nDESCRIPTION: Shows the directory structure created when using the 'php webman app-plugin:create' command to generate a new application plugin.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/tr/plugin/app.md#2025-04-12_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nplugin/\n└── cms\n    ├── app\n    │   ├── controller\n    │   │   └── IndexController.php\n    │   ├── exception\n    │   │   └── Handler.php\n    │   ├── functions.php\n    │   ├── middleware\n    │   ├── model\n    │   └── view\n    │       └── index\n    │           └── index.html\n    ├── config\n    │   ├── app.php\n    │   ├── autoload.php\n    │   ├── container.php\n    │   ├── database.php\n    │   ├── exception.php\n    │   ├── log.php\n    │   ├── middleware.php\n    │   ├── process.php\n    │   ├── redis.php\n    │   ├── route.php\n    │   ├── static.php\n    │   ├── thinkorm.php\n    │   ├── translation.php\n    │   └── view.php\n    └── public\n```\n\n----------------------------------------\n\nTITLE: Grouping and Having Clauses in WebMan PHP Query Builder\nDESCRIPTION: Shows how to use GROUP BY and HAVING clauses in queries.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/jp/db/queries.md#2025-04-12_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')\n                ->groupBy('account_id')\n                ->having('account_id', '>', 100)\n                ->get();\n// You can pass multiple arguments to the groupBy method\n$users = Db::table('users')\n                ->groupBy('first_name', 'status')\n                ->having('account_id', '>', 100)\n                ->get();\n```\n\n----------------------------------------\n\nTITLE: Installazione del componente webman/captcha tramite Composer\nDESCRIPTION: Comando Composer per installare il pacchetto webman/captcha nel progetto.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/components/captcha.md#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncompositore richiedere webman/captcha\n```\n\n----------------------------------------\n\nTITLE: Setting 404 Fallback Route for Plugin in WebMan PHP\nDESCRIPTION: Configures a fallback route handler for a specific plugin when no matching route is found. This example redirects to the root URL for the 'foo' plugin.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/es/app/route.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nRoute::fallback(function(){\n    return redirect('/');\n}, 'foo');\n```\n\n----------------------------------------\n\nTITLE: Installing Stomp Queue Client for Webman\nDESCRIPTION: Composer command to install the Webman Stomp plugin for message queue functionality\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/queue/stomp.md#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require webman/stomp\n```\n\n----------------------------------------\n\nTITLE: Asynchronous HTTP Requests in Webman PHP\nDESCRIPTION: Shows how to make non-blocking HTTP requests using Workerman HTTP Client. Requires workerman/http-client ^2.0.0 package.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/coroutine/fiber.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace app\\controller;\n\nuse support\\Request;\nuse Workerman\\Http\\Client;\n\nclass TestController\n{\n    public function index(Request $request)\n    {\n        static $client;\n        $client = $client ?: new Client();\n        $response = $client->get('http://example.com'); // Asynchronously send a synchronous request\n        return $response->getBody()->getContents();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing ThinkORM Package using Composer\nDESCRIPTION: Command to install ThinkORM package in Webman project using Composer\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/pt/db/thinkorm.md#2025-04-12_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require -W webman/think-orm\n```\n\n----------------------------------------\n\nTITLE: Native PHP View Template Example\nDESCRIPTION: Example of creating a view template using native PHP syntax in Webman, demonstrating controller and view file setup\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/view.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\n\nclass UserController\n{\n    public function hello(Request $request)\n    {\n        return view('user/hello', ['name' => 'webman']);\n    }\n}\n```\n\nLANGUAGE: html\nCODE:\n```\n<!doctype html>\n<html>\n<head>\n    <meta charset=\"utf-8\">\n    <title>webman</title>\n</head>\n<body>\nhello <?=htmlspecialchars($name)?>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Configuring Exception Handler in webman\nDESCRIPTION: This snippet shows how to configure the exception handler class in `config/exception.php`. The default handler is `support\\exception\\Handler::class`.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/exception.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    // 在這裡配置異常處理類\n    '' => support\\exception\\Handler::class,\n];\n```\n\n----------------------------------------\n\nTITLE: Handling 404 Route Redirect to Homepage\nDESCRIPTION: Redirects to the homepage when a route is not found using Webman's Route::fallback method\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/es/route.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nRoute::fallback(function(){\n    return redirect('/'); \n});\n```\n\n----------------------------------------\n\nTITLE: Checking for Record Existence in PHP Database Queries\nDESCRIPTION: This code shows how to check for the existence or non-existence of records using the exists() and doesntExist() methods.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/tr/db/queries.md#2025-04-12_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nreturn Db::table('orders')->where('finalized', 1)->exists();\nreturn Db::table('orders')->where('finalized', 1)->doesntExist();\n```\n\n----------------------------------------\n\nTITLE: Retrieving Random Records in webman-php\nDESCRIPTION: Using inRandomOrder to retrieve records in random order. This example fetches a single random user from the database.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/db/queries.md#2025-04-12_snippet_29\n\nLANGUAGE: php\nCODE:\n```\n$randomUser = Db::table('users')\n                ->inRandomOrder()\n                ->first();\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Console Command in PHP\nDESCRIPTION: This snippet defines a custom console command within the Webman framework for displaying MySQL database configuration. The command retrieves configuration details and formats them into a table using Symfony components.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/es/plugin/console.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace app\\command;\n\nuse Symfony\\Component\\Console\\Command\\Command;\nuse Symfony\\Component\\Console\\Helper\\Table;\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\n\nclass ConfigMySQLCommand extends Command\n{\n    protected static $defaultName = 'config:mysql';\n    protected static $defaultDescription = 'Mostrar la configuración actual del servidor MySQL';\n\n    protected function execute(InputInterface $input, OutputInterface $output)\n    {\n        $output->writeln('La información de configuración de MySQL es la siguiente:');\n        $config = config('database');\n        $headers = ['nombre', 'predeterminado', 'controlador', 'host', 'puerto', 'base de datos', 'nombre de usuario', 'contraseña', 'socket UNIX', 'juego de caracteres', 'collation', 'prefijo', 'estricto', 'motor', 'esquema', 'sslmode'];\n        $rows = [];\n        foreach ($config['connections'] as $name => $db_config) {\n            $row = [];\n            foreach ($headers as $key) {\n                switch ($key) {\n                    case 'nombre':\n                        $row[] = $name;\n                        break;\n                    case 'predeterminado':\n                        $row[] = $config['default'] == $name ? 'verdadero' : 'falso';\n                        break;\n                    default:\n                        $row[] = $db_config[$key] ?? '';\n                }\n            }\n            if ($config['default'] == $name) {\n                array_unshift($rows, $row);\n            } else {\n                $rows[] = $row;\n            }\n        }\n        $table = new Table($output);\n        $table->setHeaders($headers);\n        $table->setRows($rows);\n        $table->render();\n        return self::SUCCESS;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Controller Constructor Usage in Webman\nDESCRIPTION: This snippet demonstrates that returning a response from a controller's constructor has no effect.  The response will not be sent to the client, and the browser will not receive the intended output. This is because the response is handled later in the Webman request lifecycle.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/fr/controller.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\n\nclass FooController\n{\n    public function __construct()\n    {\n        // Un retour de données dans le constructeur n'aura aucun effet, le navigateur ne recevra pas cette réponse\n        return response('hello'); \n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Installing Redis Queue Package in Webman PHP\nDESCRIPTION: Command to install the Redis queue package using Composer in a Webman PHP project.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/queue/redis.md#2025-04-12_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncomposer require webman/redis-queue\n```\n\n----------------------------------------\n\nTITLE: Configuring Exception Handler in Webman PHP\nDESCRIPTION: Basic configuration for exception handling class in config/exception.php file\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/pt/exception.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    // Here you configure the exception handling class\n    '' => support\\exception\\Handler::class,\n];\n```\n\n----------------------------------------\n\nTITLE: Global Variable State Pollution Example\nDESCRIPTION: Demonstrates the risks of using static variables in coroutine-based applications, showing potential state contamination\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/th/coroutine/fiber.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace app\\controller;\n\nuse support\\Request;\nuse Workerman\\Timer;\n\nclass TestController\n{\n    protected static $name = '';\n\n    public function index(Request $request)\n    {\n        static::$name = $request->get('name');\n        Timer::sleep(5);\n        return static::$name;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Captcha Component in PHP Webman\nDESCRIPTION: Demonstrates installation and basic setup of the webman/captcha package for generating and managing captcha images in a PHP web application\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/components/captcha.md#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require webman\\/captcha\n```\n\n----------------------------------------\n\nTITLE: Displaying Pagination in PHP Native Template\nDESCRIPTION: This HTML template shows how to display the pagination component using PHP Native syntax. It includes Bootstrap CSS for styling.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/components/paginator.md#2025-04-12_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<html>\n<head>\n  <!-- Built-in support for Bootstrap pagination styles -->\n  <link rel=\"stylesheet\" href=\"//maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css\">\n</head>\n<body>\n\n<?= $paginator;?>\n\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Template HTML con Blade\nDESCRIPTION: Esempio di file di template HTML che utilizza la sintassi Blade per l'output di variabili.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/view.md#2025-04-12_snippet_13\n\nLANGUAGE: html\nCODE:\n```\n<!doctype html>\n<html>\n<head>\n    <meta charset=\"utf-8\">\n    <title>webman</title>\n</head>\n<body>\nhello {{$name}}\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: JSON Response in Webman PHP Controller\nDESCRIPTION: Demonstrates returning JSON responses from a controller with proper Content-Type headers. Returns a structured response with code, message, and data fields.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/tutorial.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\n\nclass UserController\n{\n    public function hello(Request $request)\n    {\n        $default_name = 'webman';\n        $name = $request->get('name', $default_name);\n        return json([\n            'code' => 0, \n            'msg' => 'ok', \n            'data' => $name\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Generated Error Codes in Service Class\nDESCRIPTION: Example of using generated error codes in a service class with exception handling\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/components/generate_error_code.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * Navigation-related operation service class\n */\n\nnamespace app\\service;\n\nuse app\\model\\Demo as DemoModel;\n\n// Import ErrorCode class file\nuse support\\ErrorCode;\n\nclass Demo\n{\n    /**\n     * Add\n     * @param $data\n     * @return array|mixed\n     * @throws \\exception\n     */\n    public function add($data): array\n    {\n        try {\n            $demo = new DemoModel();\n            foreach ($data as $key => $value) {\n                $demo->$key = $value;\n            }\n\n            $demo->save();\n\n            return $demo->getData();\n        } catch (\\Throwable $e) {\n            // Output error message\n            throw_http_exception($e->getMessage(), ErrorCode::ModelAddOptionsError);\n        }\n        return [];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Habilitar el protocolo STOMP en RabbitMQ\nDESCRIPTION: Este comando habilita el plugin STOMP en RabbitMQ. Esto permite que RabbitMQ acepte conexiones STOMP en el puerto 61613 por defecto.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/es/queue/stomp.md#2025-04-12_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n```rabbitmq-plugins enable rabbitmq_stomp```\n```\n\n----------------------------------------\n\nTITLE: Generated ErrorCode Class with Constants\nDESCRIPTION: Example of the automatically generated ErrorCode class containing all error code constants.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/components/generate_error_code.md#2025-04-12_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * 自动生成的文件 ,请不要手动修改.\n * @Author:$Id$\n */\nnamespace support;\n\nclass ErrorCode\n{\n    const LoginNameOrPasswordError = -20110001;\n    const UserNotExist = -20110002;\n    const TokenNotExist = -20110003;\n    const InvalidToken = -20110004;\n    const ExpireToken = -20110005;\n    const WrongToken = -20110006;\n    const ClientIpNotEqual = -20110007;\n    const TokenRecordNotFound = -20110008;\n    const ModelAddUserError = -20110009;\n    const NoInfoToModify = -20110010;\n    const OnlyAdminPasswordCanBeModified = -20110011;\n    const AdminAccountCannotBeDeleted = -20110012;\n    const DbNotExist = -20110013;\n    const ModelAddOptionsError = -20110014;\n    const UnableToDeleteSystemConfig = -20110015;\n    const ConfigParamKeyRequired = -20110016;\n    const ExpiryCanNotGreaterThan7days = -20110017;\n    const GetPresignedPutObjectUrlError = -20110018;\n    const ObjectStorageConfigNotExist = -20110019;\n    const UpdateNavIndexSortError = -20110020;\n    const TagNameAttNotExist = -20110021;\n    const ModelUpdateOptionsError = -20110022;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring PSR-0 Autoloading in composer.json\nDESCRIPTION: This snippet shows how to configure composer.json to autoload PSR-0 compliant files located in the `extend/` directory. It involves adding a `psr-0` section under the `autoload` configuration, mapping the root namespace to the `extend/` directory. After modifying `composer.json`, you need to run `composer dumpautoload` and restart webman for the changes to take effect.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-hk/others/autoload.md#2025-04-12_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n\"psr-0\" : {\n    \"\": \"extend/\"\n}\n```\n\n----------------------------------------\n\nTITLE: Russian Language File Example\nDESCRIPTION: Example of a Russian language file with a translation for the 'hello' key.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/components/translation.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'hello' => 'Привет, мир!',\n];\n```\n\n----------------------------------------\n\nTITLE: Installing symfony/translation in PHP\nDESCRIPTION: Command to install the symfony/translation component using Composer.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/components/translation.md#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require symfony/translation\n```\n\n----------------------------------------\n\nTITLE: Configuring Webman to use Blade\nDESCRIPTION: This PHP code configures webman to use the Blade template engine by setting the 'handler' option in the `config/view.php` file to the Blade class.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-hk/view.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n\"<?php\nuse support\\view\\Blade;\n\nreturn [\n    'handler' => Blade::class\n];\n?>\"\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Business Exception in Webman PHP\nDESCRIPTION: This code shows how to create a custom business exception class MyBusinessException that extends BusinessException and provides custom rendering logic.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/tr/exception.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace app\\exception;\n\nuse support\\exception\\BusinessException;\nuse Webman\\Http\\Request;\nuse Webman\\Http\\Response;\n\nclass MyBusinessException extends BusinessException\n{\n    public function render(Request $request): ?Response\n    {\n        // JSON request returns JSON data\n        if ($request->expectsJson()) {\n            return json(['code' => $this->getCode() ?: 500, 'message' => $this->getMessage()]);\n        }\n        // Non-JSON request returns a page\n        return new Response(200, [], $this->getMessage());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Webman Console Dependency\nDESCRIPTION: Command to install the required Webman console package via Composer for plugin creation\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/app/create.md#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require webman/console\n```\n\n----------------------------------------\n\nTITLE: Resetting Composer to Official Repository\nDESCRIPTION: Command to reset Composer to use the official Packagist repository if upgrade fails due to using a proxy.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/upgrade/1-4.md#2025-04-12_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncomposer config -g --unset repos.packagist\n```\n\n----------------------------------------\n\nTITLE: Making AJAX Request to Validation Endpoint with jQuery\nDESCRIPTION: JavaScript code that sends a POST request to the validation endpoint with sample data using jQuery's AJAX method. It submits nickname, username, and password for validation.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-hk/components/validation.md#2025-04-12_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n$.ajax({\n    url : 'http://127.0.0.1:8787',\n    type : \"post\",\n    dataType:'json',\n    data : {nickname:'湯姆', username:'tom cat', password: '123456'}\n});\n```\n\n----------------------------------------\n\nTITLE: Template HTML con PHP nativo\nDESCRIPTION: Esempio di file di template HTML che utilizza la sintassi PHP nativa per l'output di variabili.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/view.md#2025-04-12_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<!doctype html>\n<html>\n<head>\n    <meta charset=\"utf-8\">\n    <title>webman</title>\n</head>\n<body>\nhello <?=htmlspecialchars($name)?>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Installing Workerman Crontab via Composer\nDESCRIPTION: Command to install the workerman/crontab package using Composer package manager for PHP\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/components/crontab.md#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require workerman\\/crontab\n```\n\n----------------------------------------\n\nTITLE: Wrk Performance Testing Command\nDESCRIPTION: Command for performing performance testing using wrk with 200 concurrent connections for 10 seconds\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/others/benchmarks.md#2025-04-12_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# 200 concurrent connections, 10 seconds duration\nwrk -c 200 -d 10s http://example.com\n```\n\n----------------------------------------\n\nTITLE: Database Component References for Webman\nDESCRIPTION: Links to documentation for various database integration options in Webman, including ORM and caching solutions\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/fr/db/others.md#2025-04-12_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## ThinkORM\nVeuillez consulter [thinkorm](thinkorm.md)\n\n## ThinkCache\nVeuillez consulter [think-cache](thinkcache.md)\n\n## Plugin de base de données Medoo\nVeuillez consulter [le plugin Medoo](../db/medoo.md)\n```\n\n----------------------------------------\n\nTITLE: Pagination Template for Twig\nDESCRIPTION: HTML template for rendering pagination with Bootstrap styling in Twig template engine\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/es/components/paginator.md#2025-04-12_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<html>\n<head>\n  <link rel=\"stylesheet\" href=\"//maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css\">\n</head>\n<body>\n\n{% autoescape false %}\n{{paginator}}\n{% endautoescape %}\n\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Installing PhpSpreadsheet with Composer\nDESCRIPTION: This command installs the PhpSpreadsheet library using Composer, a dependency manager for PHP. This is a necessary prerequisite for using PhpSpreadsheet in a PHP project. The command downloads and configures the library for use within the project.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/components/excel.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ncomposer require phpoffice/phpspreadsheet\n```\n\n----------------------------------------\n\nTITLE: Installing Intervention/image via Composer\nDESCRIPTION: This command installs the Intervention/image library as a dependency using Composer. It downloads the necessary files and configures the autoloader.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/components/image.md#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"composer require intervention/image\"\n```\n\n----------------------------------------\n\nTITLE: Installing PHP Paginator via Composer\nDESCRIPTION: Command to install the jasongrimes/php-paginator library using Composer package manager for PHP pagination functionality\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/es/components/paginator.md#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require \"jasongrimes/paginator:^1.0.3\"\n```\n\n----------------------------------------\n\nTITLE: Incrementing and Decrementing Values in PHP\nDESCRIPTION: Shows how to increment or decrement numeric column values. The methods accept at least one parameter (the column name) and an optional second parameter to specify the amount to change.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/tr/db/queries.md#2025-04-12_snippet_19\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')->increment('votes');\nDb::table('users')->increment('votes', 5);\nDb::table('users')->decrement('votes');\nDb::table('users')->decrement('votes', 5);\n```\n\n----------------------------------------\n\nTITLE: Custom BusinessException in webman\nDESCRIPTION: This snippet defines a custom `MyBusinessException` that extends `BusinessException`. It overrides the `render` method to customize the JSON response, changing `msg` to `message`.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/exception.md#2025-04-12_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace app\\exception;\n\nuse support\\exception\\BusinessException;\nuse Webman\\Http\\Request;\nuse Webman\\Http\\Response;\n\nclass MyBusinessException extends BusinessException\n{\n    public function render(Request $request): ?Response\n    {\n        // json請求返回json數據\n        if ($request->expectsJson()) {\n            return json(['code' => $this->getCode() ?: 500, 'message' => $this->getMessage()]);\n        }\n        // 非json請求則返回一個頁面\n        return new Response(200, [], $this->getMessage());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generated ErrorCode Class File\nDESCRIPTION: This is the ErrorCode class file (`./support/ErrorCode.php`) after the error codes have been generated. It contains constants representing different error codes, each mapped to a specific negative integer.  The constants are named according to the specified naming convention and error configurations, allowing for easy reference and usage throughout the application. Do not edit this file manually.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/th/components/generate_error_code.md#2025-04-12_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n\"<?php\n/**\n * ไฟล์ที่สร้างโดยอัตโนมัติ กรุณาอย่าแก้ไขด้วยตนเอง.\n * @Author:$Id$\n */\nnamespace support;\n\nclass ErrorCode\n{\n    const LoginNameOrPasswordError = -20110001;\n    const UserNotExist = -20110002;\n    const TokenNotExist = -20110003;\n    const InvalidToken = -20110004;\n    const ExpireToken = -20110005;\n    const WrongToken = -20110006;\n    const ClientIpNotEqual = -20110007;\n    const TokenRecordNotFound = -20110008;\n    const ModelAddUserError = -20110009;\n    const NoInfoToModify = -20110010;\n    const OnlyAdminPasswordCanBeModified = -20110011;\n    const AdminAccountCannotBeDeleted = -20110012;\n    const DbNotExist = -20110013;\n    const ModelAddOptionsError = -20110014;\n    const UnableToDeleteSystemConfig = -20110015;\n    const ConfigParamKeyRequired = -20110016;\n    const ExpiryCanNotGreaterThan7days = -20110017;\n    const GetPresignedPutObjectUrlError = -20110018;\n    const ObjectStorageConfigNotExist = -20110019;\n    const UpdateNavIndexSortError = -20110020;\n    const TagNameAttNotExist = -20110021;\n    const ModelUpdateOptionsError = -20110022;\n}\"\n```\n\n----------------------------------------\n\nTITLE: Rendering JSON Response on Exception in Webman PHP\nDESCRIPTION: Provides a JSON response format for exceptions when debug mode is active, detailing the response structure, including an optional stack trace for debugging purposes.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/fr/exception.md#2025-04-12_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"code\": \"500\",\n    \"msg\": \"Informations sur l'exception\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configurazione di Twig in webman\nDESCRIPTION: Modifica del file config/view.php per utilizzare Twig come motore di template in webman.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/view.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse support\\view\\Twig;\n\nreturn [\n    'handler' => Twig::class\n];\n```\n\n----------------------------------------\n\nTITLE: Updating Existing Model Records\nDESCRIPTION: Shows how to update an existing model by retrieving it, changing attributes, and saving it back to the database. The updated_at timestamp is updated automatically.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/es/db/model.md#2025-04-12_snippet_25\n\nLANGUAGE: php\nCODE:\n```\n$user = app\\model\\User::find(1);\n$user->name = 'jerry';\n$user->save();\n```\n\n----------------------------------------\n\nTITLE: Customizing Timestamp Format in Eloquent\nDESCRIPTION: Demonstrates how to customize the timestamp format by setting the $dateFormat property in an Eloquent model.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/jp/db/model.md#2025-04-12_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nclass User extends Model\n{\n    protected $dateFormat = 'U';\n}\n```\n\n----------------------------------------\n\nTITLE: Packaging webman Project into Binary\nDESCRIPTION: This shell command initiates the process of packaging the webman project into a binary file. It uses the `webman` command-line tool with the `build:bin` option.  Optionally, you can specify the PHP version to use for packaging.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/th/others/bin.md#2025-04-12_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n\"php webman build:bin\"\n```\n\nLANGUAGE: Shell\nCODE:\n```\n\"php webman build:bin 8.1\"\n```\n\n----------------------------------------\n\nTITLE: Configuring View Handler with Deprecated Syntax\nDESCRIPTION: Example showing the deprecated way of configuring view file suffix in view.php\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/upgrade/1-4.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse support\\view\\Raw;\nreturn [\n    'handler' => Raw::class,\n    'view_suffix' => '.php'\n];\n```\n\n----------------------------------------\n\nTITLE: Installing Laravel Pagination Package\nDESCRIPTION: This command installs the `illuminate/pagination` package using Composer. This package provides convenient pagination functionality when using Laravel's ORM in Webman.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/fr/db/paginator.md#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require illuminate/pagination\n```\n\n----------------------------------------\n\nTITLE: Setting Cookies in Response\nDESCRIPTION: This snippet demonstrates how to set a cookie using the `cookie()` method of the `response` object.  It sets a cookie named 'foo' with the value 'value'.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/response.md#2025-04-12_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\n\nclass FooController\n{\n    public function hello(Request $request)\n    {\n        return response('hello webman')\n        ->cookie('foo', 'value');\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: View Assignment Example in PHP Controller\nDESCRIPTION: This PHP snippet shows how to assign variables to a view using both the View::assign() method and the view() helper function in a controller.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/de/view.md#2025-04-12_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\nuse support\\View;\n\nclass UserController\n{\n    public function hello(Request $request)\n    {\n        View::assign([\n            'name1' => 'value1',\n            'name2'=> 'value2',\n        ]);\n        View::assign('name3', 'value3');\n        return view('user/test', ['name' => 'webman']);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing symfony/cache for PHP 7.x in webman-php\nDESCRIPTION: Composer command to install symfony/cache and illuminate/redis for PHP 7.x in webman-php project. Requires restart after installation.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/db/cache.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ncomposer require -W illuminate/redis ^8.2.0 symfony/cache ^5.2\n```\n\n----------------------------------------\n\nTITLE: Configurazione percorso cartella public in PHP per Webman\nDESCRIPTION: Configurazione del percorso della cartella public nel file config/app.php di Webman. Questo è necessario quando si utilizza un file phar e si vuole mantenere la cartella public separata.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/others/phar.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n'public_path' => base_path(false) . DIRECTORY_SEPARATOR . 'public',\n```\n\n----------------------------------------\n\nTITLE: ThinkPHP ORM Pagination Usage in Webman Controller\nDESCRIPTION: This PHP code demonstrates how to implement pagination in a Webman controller using ThinkPHP's ORM. It retrieves a paginated list of users from the 'user' table and passes the paginator instance to the view.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/fr/db/paginator.md#2025-04-12_snippet_8\n\nLANGUAGE: php\nCODE:\n```\npublic function index(Request $request)\n{\n    $per_page = 10;\n    $users = Db::table('user')->paginate(['list_rows' => $per_page, 'page' => $request->get('page', 1), 'path' => $request->path()]);\n    return view('index/index', ['users' => $users]);\n}\n```\n\n----------------------------------------\n\nTITLE: Exception Handler Configuration for Multiple Applications\nDESCRIPTION: Configuring different exception handling classes for various applications in the exception configuration file\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/pt/multiapp.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'shop' => support\\exception\\Handler::class,\n    'api' => support\\exception\\ApiHandler::class,\n];\n```\n\n----------------------------------------\n\nTITLE: Class Properties and Method with Documentation in PHP\nDESCRIPTION: Demonstration of class properties and methods following PHP coding standards, including method and property annotations\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/app/standard.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\\n\\nnamespace plugin\\\\foo\\\\app\\\\controller;\\n\\nclass ArticleController\\n{\\n    /**\\n     * Methods not requiring authentication\\n     * @var array\\n     */\\n    protected $noNeedAuth = ['getComments'];\\n    \\n    /**\\n     * Get comments\\n     * @param Request $request\\n     * @return Response\\n     * @throws BusinessException\\n     */\\n    public function getComments(Request $request): Response\\n    {\\n        \\n    }\\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Bootstrap Process for Event Manager in PHP\nDESCRIPTION: Configuration to add the EventManager class to the bootstrap process in Webman.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/event.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    // Other configurations omitted ...\n    webman\\event\\EventManager::class,\n];\n```\n\n----------------------------------------\n\nTITLE: Creazione di un Template HTML per la Vista in Webman\nDESCRIPTION: Questo snippet mostra come creare un file di template HTML per la vista. Il template utilizza la sintassi PHP nativa per incorporare la variabile $name passata dal controller.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/tutorial.md#2025-04-12_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<!doctype html>\n<html>\n<head>\n    <meta charset=\"utf-8\">\n    <title>webman</title>\n</head>\n<body>\nhello <?=htmlspecialchars($name)?>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: HTML Template for Webman View\nDESCRIPTION: HTML template file that displays the name parameter passed from the controller. Includes basic HTML structure and escapes the name variable for security.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/tutorial.md#2025-04-12_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<!doctype html>\n<html>\n<head>\n    <meta charset=\"utf-8\">\n    <title>webman</title>\n</head>\n<body>\nhello <?=htmlspecialchars($name)?>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Using Multiple Log Channels in Webman Controller\nDESCRIPTION: Shows how to use a specific log channel ('log2') within a controller by using the Log::channel() method to log messages to a different log file.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-hk/log.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\nuse support\\Log;\n\nclass FooController\n{\n    public function index(Request $request)\n    {\n        $log = Log::channel('log2');\n        $log->info('log2 test');\n        return response('hello index');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Personalizzazione delle impostazioni del captcha in PHP\nDESCRIPTION: Esempio di come personalizzare la lunghezza e i caratteri utilizzati nel captcha utilizzando la classe PhraseBuilder.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/components/captcha.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n    /**\n     * Stampare l'immagine del codice di verifica\n     */\n    public function captcha(Request $request)\n    {\n        // Inizializza la classe del codice di verifica\n        $builder = new CaptchaBuilder;\n        // Lunghezza del codice di verifica\n        $length = 4;\n        // Caratteri inclusi\n        $chars = '0123456789abcefghijklmnopqrstuvwxyz';\n        $builder = new PhraseBuilder($length, $chars);\n        $captcha = new CaptchaBuilder(null, $builder);\n        // Genera un codice di verifica\n        $builder->build();\n        // Salva il valore del codice di verifica nella sessione\n        $request->session()->set('captcha', strtolower($builder->getPhrase()));\n        // Ottiene dati binari dell'immagine del codice di verifica\n        $img_content = $builder->get();\n        // Restituisce i dati binari del codice di verifica\n        return response($img_content, 200, ['Content-Type' => 'image/jpeg']);\n    }\n```\n\n----------------------------------------\n\nTITLE: Loading Specific Files via Composer Autoload\nDESCRIPTION: Add helper files to be automatically loaded by Composer before Webman starts\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/others/autoload.md#2025-04-12_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n\"files\": [\n    \"./support/helpers.php\",\n    \"./app/helpers.php\"\n]\n```\n\n----------------------------------------\n\nTITLE: Web Payment Processing with Alipay\nDESCRIPTION: This code demonstrates how to process a web payment using Alipay. It retrieves the configuration, initializes the Pay SDK, defines the order parameters, and then calls the `Pay::alipay()->web()` method to generate the payment form. The form's HTML content is returned.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/components/payment.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse support\\Request;\nuse Webman\\Config;\nuse Yansongda\\Pay\\Pay;\n\n/**\n * @param Request $request\n * @return string\n */\npublic function payment(Request $request)\n{\n    // 1. 获取配置文件 config/payment.php\n    $config = Config::get('payment');\n\n    // 2. 初始化配置\n    Pay::config($config);\n\n    // 3. 网页支付\n    $order = [\n        'out_trade_no' => time(),\n        'total_amount' => '8888.88',\n        'subject' => 'webman payment',\n        '_method' => 'get' // 使用get方式跳转\n    ];\n    return Pay::alipay()->web($order)->getBody()->getContents();\n}\n```\n\n----------------------------------------\n\nTITLE: Foreach Loop Code Style in PHP\nDESCRIPTION: Illustration of proper spacing and bracing for foreach loops in PHP, maintaining consistent code formatting\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/app/standard.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nforeach ($users as $uid => $user) {\\n\\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Stomp Client\nDESCRIPTION: Installs the webman/stomp client library using composer, enabling Stomp protocol integration with the Webman framework.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-hk/queue/stomp.md#2025-04-12_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n\"composer require webman/stomp\"\n```\n\n----------------------------------------\n\nTITLE: Blade Component Template in HTML\nDESCRIPTION: This HTML snippet shows the template for a Blade component named 'Alert'.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/de/view.md#2025-04-12_snippet_12\n\nLANGUAGE: HTML\nCODE:\n```\n<div>\n    <b style=\"color: red\">Hello Blade Component</b>\n</div>\n```\n\n----------------------------------------\n\nTITLE: BusinessException JSON Response in webman\nDESCRIPTION: This shows the JSON response structure when a `BusinessException` is thrown. It includes the `code` and `msg` from the exception.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/exception.md#2025-04-12_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\"code\": 3000, \"msg\": \"參數錯誤\"}\n```\n\n----------------------------------------\n\nTITLE: Installing Phinx via Composer\nDESCRIPTION: Composer command to install the Phinx database migration library for PHP projects\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/db/migration.md#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require robmorgan/phinx\n```\n\n----------------------------------------\n\nTITLE: Executing PHPUnit Tests\nDESCRIPTION: Shell command to run PHPUnit tests with a bootstrap file, specifying the test file to execute\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/components/unitest.md#2025-04-12_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n\\/vendor\\/bin\\/phpunit --bootstrap support\\/bootstrap.php tests\\/TestConfig.php\n```\n\n----------------------------------------\n\nTITLE: Example Plugin Creation Command\nDESCRIPTION: Example command showing how to create a plugin named 'foo' using the Webman plugin creation tool\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/app/create.md#2025-04-12_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nphp webman app-plugin:create foo\n```\n\n----------------------------------------\n\nTITLE: Installing Webman-Permission Package with Composer\nDESCRIPTION: Command to install the tinywan/webman-permission package using Composer. Requires PHP 7.1+ and ThinkORM.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-hk/casbin.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ncomposer require tinywan/webman-permission\n```\n\n----------------------------------------\n\nTITLE: Setting Headers in Response\nDESCRIPTION: This snippet demonstrates how to set custom headers when returning a response. It uses the `response()` function with headers array.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/response.md#2025-04-12_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\n\nclass FooController\n{\n    public function hello(Request $request)\n    {\n        return response('hello webman', 200, [\n            'Content-Type' => 'application/json',\n            'X-Header-One' => 'Значение заголовка'\n        ]);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Building Webman Binary Package - Basic Command\nDESCRIPTION: Command to package the Webman project into a binary file using the default PHP version.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/others/bin.md#2025-04-12_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nphp webman build:bin\n```\n\n----------------------------------------\n\nTITLE: Installing Redis Dependencies via Composer\nDESCRIPTION: Command to install required Redis packages including illuminate/redis and illuminate/events\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/db/redis.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ncomposer require -W illuminate/redis illuminate/events\n```\n\n----------------------------------------\n\nTITLE: Loading Specific Files with Composer in JSON\nDESCRIPTION: Configures Composer to autoload specific PHP files by adding them to the 'files' array in composer.json.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/others/autoload.md#2025-04-12_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"files\": [\n    \"./support/helpers.php\",\n    \"./app/helpers.php\"\n]\n```\n\n----------------------------------------\n\nTITLE: Installing ThinkCache via Composer in PHP\nDESCRIPTION: Command to install ThinkCache using Composer. After installation, a restart is required as reload is not sufficient.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/db/thinkcache.md#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require -W webman/think-cache\n```\n\n----------------------------------------\n\nTITLE: Installing yansongda/pay SDK via Composer\nDESCRIPTION: Command to install the yansongda/pay SDK using Composer package manager.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/components/pay.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ncomposer require yansongda/pay -vvv\n```\n\n----------------------------------------\n\nTITLE: Starting Webman and Testing the Endpoint\nDESCRIPTION: These shell commands start the Webman PHP server and then test the /json endpoint using curl. This allows verification of the AOP implementation by observing the output of the var_dump statement in the DebugAspect.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/aop.md#2025-04-12_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n\"php start.php start\\ncurl  http://127.0.0.1:8787/json\"\n```\n\n----------------------------------------\n\nTITLE: Using ThinkCache in a Webman Controller\nDESCRIPTION: Example of how to use ThinkCache in a Webman controller. Demonstrates setting and getting a cache value.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/tr/db/thinkcache.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\nuse think\\facade\\Cache;\n\nclass UserController\n{\n    public function db(Request $request)\n    {\n        $key = 'test_key';\n        Cache::set($key, rand());\n        return response(Cache::get($key));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Redirect Helper Function Implementation in PHP\nDESCRIPTION: Illustrates the implementation of the `redirect()` helper function. It creates a `support\\Response` object with the `Location` header set.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/pt/response.md#2025-04-12_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nfunction redirect($location, $status = 302, $headers = [])\n{\n    $response = new Response($status, ['Location' => $location]);\n    if (!empty($headers)) {\n        $response->withHeaders($headers);\n    }\n    return $response;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Using Plugin-Specific Redis Connections\nDESCRIPTION: Example showing how to use plugin-specific Redis connections using the connection method to access different Redis instances.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/app/redis.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse support\\Redis;\nRedis::connection('plugin.foo.default')->get('key');\nRedis::connection('plugin.foo.cache')->get('key');\n```\n\n----------------------------------------\n\nTITLE: Installing MongoDB Package for PHP > 7.2\nDESCRIPTION: Composer command to install the MongoDB package for PHP versions greater than 7.2.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/tr/db/mongo.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ncomposer require -W illuminate/database jenssegers/mongodb ^3.8.0\n```\n\n----------------------------------------\n\nTITLE: Using think-validate Validator\nDESCRIPTION: Example demonstrating how to use the think-validate validator to check data against defined rules.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/pt/components/validation.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$data = [\n    'name'  => 'thinkphp',\n    'email' => 'thinkphp@qq.com',\n];\n\n$validate = new \\app\\index\\validate\\User;\n\nif (!$validate->check($data)) {\n    var_dump($validate->getError());\n}\n```\n\n----------------------------------------\n\nTITLE: Translation Usage in Controller\nDESCRIPTION: Example of using translations in a UserController\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/de/components/translation.md#2025-04-12_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\n\nclass UserController\n{\n    public function get(Request $request)\n    {\n        $hello = trans('hello'); // 你好 世界!\n        return response($hello);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom HTTP Server in PHP for Webman\nDESCRIPTION: This snippet shows how to create a custom HTTP server by extending the Webman\\App class. It allows for modifying core HTTP server functionality in Webman.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/tr/process.md#2025-04-12_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nnamespace app;\n\nuse Webman\\App;\n\nclass Server extends App\n{\n    // This overwrites methods in Webman\\App.\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Swoole Coroutines in Webman\nDESCRIPTION: Configuration snippet for enabling Swoole coroutines in Webman. This requires Swoole extension version 5.0 or higher and is set in the server configuration file.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/coroutine/fiber.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n'event_loop' => \\Workerman\\Events\\Swoole::class,\n```\n\n----------------------------------------\n\nTITLE: Returning a JSON Response in Webman\nDESCRIPTION: This code snippet shows how to return a JSON response from a Webman controller. It retrieves the 'name' parameter from the GET request and includes it in the JSON response data, along with a 'code' and 'msg' field.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-hk/tutorial.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\n\nclass UserController\n{\n    public function hello(Request $request)\n    {\n        $default_name = 'webman';\n        $name = $request->get('name', $default_name);\n        return json([\n            'code' => 0, \n            'msg' => 'ok', \n            'data' => $name\n        ]);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Nginx Configuration for WSS Proxy\nDESCRIPTION: This nginx configuration snippet demonstrates how to set up a reverse proxy for wss (WebSocket Secure) connections.  It forwards the wss connection to the webman/push server running on `http://127.0.0.1:3131`.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-hk/plugin/push.md#2025-04-12_snippet_6\n\nLANGUAGE: nginx\nCODE:\n```\nserver {\n    # .... 這裡省略了其他配置 ...\n\n    location /app/<app_key>\n    {\n        proxy_pass http://127.0.0.1:3131;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"Upgrade\";\n        proxy_set_header X-Real-IP $remote_addr;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Integrazione della generazione dei codici di errore in start.php\nDESCRIPTION: Codice da aggiungere al file start.php per attivare la generazione automatica dei codici di errore in modalità debug.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/components/generate_error_code.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// Collocare dopo Config::load(config_path(), ['route', 'container']);\n\n// Genera i codici di errore, solo in modalità APP_DEBUG\nif (config(\"app.debug\")) {\n    $errorCodeConfig = config('error_code');\n    (new \\teamones\\responseCodeMsg\\Generate($errorCodeConfig))->run();\n}\n```\n\n----------------------------------------\n\nTITLE: Devre Dışı Bırakma Varsayılan Rota (PHP)\nDESCRIPTION: Bu kod parçacığı, belirli bir uygulama eklentisinin varsayılan rotasını devre dışı bırakmak için kullanılır. 'foo' parametresi, devre dışı bırakılacak eklentinin adını temsil eder.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/tr/app/route.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nRoute::disableDefaultRoute('foo');\n```\n\n----------------------------------------\n\nTITLE: Starting Webman in Daemon Mode on Linux\nDESCRIPTION: Command to start Webman as a daemon process for production environments. Continues running after terminal closure with no terminal output.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/attention.md#2025-04-12_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nphp start.php start -d\n```\n\n----------------------------------------\n\nTITLE: Native PHP Template Example in HTML\nDESCRIPTION: This HTML snippet shows a basic template using native PHP syntax to display a dynamic name value passed from the controller.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/de/view.md#2025-04-12_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n<!doctype html>\n<html>\n<head>\n    <meta charset=\"utf-8\">\n    <title>webman</title>\n</head>\n<body>\nhello <?=htmlspecialchars($name)?>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Accessing Main Project Redis in Webman Plugin\nDESCRIPTION: This PHP code demonstrates accessing the main project's Redis configurations from within a Webman plugin. It uses the `Redis::get()` method directly or specifies a main project connection using `Redis::connection()`, allowing the plugin to reuse the main project's Redis setup.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-hk/plugin/app.md#2025-04-12_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse support\\Redis;\nRedis::get('key');\n// 假设主项目还配置了一个cache连接\nRedis::connection('cache')->get('key');\n```\n\n----------------------------------------\n\nTITLE: Installing Blade with Composer\nDESCRIPTION: This Composer command installs the Blade template engine and its dependencies. Blade is a powerful template engine provided by Laravel.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-hk/view.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n\"composer require psr/container ^1.1.1 webman/blade\"\n```\n\n----------------------------------------\n\nTITLE: Executing WRK with Keep-Alive\nDESCRIPTION: This command-line instruction shows how to run the `wrk` tool to benchmark a web server. The `-c` parameter sets the number of concurrent connections, and `-d` specifies the duration of the test.  wrk enables HTTP keep-alive by default, so no additional flags are needed.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/es/others/benchmarks.md#2025-04-12_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nwrk -c 200 -d 10s http://example.com\n```\n\n----------------------------------------\n\nTITLE: Batch Update Using Eloquent Models - PHP\nDESCRIPTION: Performs a batch update on user names using the Eloquent ORM. The update applies to users with uid values greater than ten. Ensures that users are familiar with crafting complex queries using Eloquent.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/db/model.md#2025-04-12_snippet_10\n\nLANGUAGE: PHP\nCODE:\n```\napp\\model\\User::where('uid', '>', 10)\n          ->update(['name' => 'tom'']);\n```\n\n----------------------------------------\n\nTITLE: Defining User Controller in Webman PHP\nDESCRIPTION: This snippet defines a UserController class with a method to retrieve all users from the database and render a view.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/hi/db/queries.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\nuse support\\Db;\n\nclass UserController\n{\n    public function all(Request $request)\n    {\n        $users = Db::table('users')->get();\n        return view('user/all', ['users' => $users]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Framework-specific File Autoloading in PHP\nDESCRIPTION: Configures the Webman framework to autoload specific files that may not conform to PSR standards using config/autoload.php.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/others/autoload.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'files' => [\n        base_path() . '/app/functions.php',\n        base_path() . '/support/Request.php', \n        base_path() . '/support/Response.php',\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Installing Webman Console Package\nDESCRIPTION: Composer command to install webman/console package for function fixing\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/others/disable-function-check.md#2025-04-12_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require webman/console ^v1.2.35\n```\n\n----------------------------------------\n\nTITLE: Utilizzo di canali privati con JavaScript\nDESCRIPTION: Esempio di codice JavaScript per sottoscriversi a un canale privato utilizzando webman/push\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/plugin/push.md#2025-04-12_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar connection = new Push({\n    url: 'ws://127.0.0.1:3131', // indirizzo del websocket\n    app_key: '<app_key>',\n    auth: '/plugin/webman/push/auth' // autorizzazione dell'abbonamento (solo per canali privati)\n});\n\n// Supponiamo che l'uid dell'utente sia 1\nvar uid = 1;\n// Il browser ascolta i messaggi del canale privato-user-1\nvar user_channel = connection.subscribe('private-user-' + uid);\n```\n\n----------------------------------------\n\nTITLE: Implementing Input Validation with Respect/Validation\nDESCRIPTION: Example of using Respect/Validation in a controller to validate user input including nickname, username, and password.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/pt/components/validation.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\nuse Respect\\Validation\\Validator as v;\nuse support\\Db;\n\nclass IndexController\n{\n    public function index(Request $request)\n    {\n        $data = v::input($request->post(), [\n            'nickname' => v::length(1, 64)->setName('Apelido'),\n            'username' => v::alnum()->length(5, 64)->setName('Nome de usuário'),\n            'password' => v::length(5, 64)->setName('Senha')\n        ]);\n        Db::table('user')->insert($data);\n        return json(['code' => 0, 'msg' => 'ok']);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Static File Middleware in Webman PHP\nDESCRIPTION: Middleware implementation for handling static file access in Webman. Includes functionality to prevent access to hidden files and configure CORS headers for cross-origin requests.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/static.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace support\\middleware;\n\nuse Webman\\MiddlewareInterface;\nuse Webman\\Http\\Response;\nuse Webman\\Http\\Request;\n\nclass StaticFile implements MiddlewareInterface\n{\n    public function process(Request $request, callable $next): Response\n    {\n        // Impedisce l'accesso ai file nascosti che iniziano con .\n        if (strpos($request->path(), '/.') !== false) {\n            return response('<h1>403 forbidden</h1>', 403);\n        }\n        /** @var Response $response */\n        $response = $next($request);\n        // Aggiunge intestazioni http per il controllo degli accessi da server diversi\n        /*$response->withHeaders([\n            'Access-Control-Allow-Origin'      => '*',\n            'Access-Control-Allow-Credentials' => 'true',\n        ]);*/\n        return $response;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Error Code Generation to start.php\nDESCRIPTION: This code snippet demonstrates how to integrate the automatic error code generation into the start.php file of a Webman application. It ensures that error codes are generated only in APP_DEBUG mode.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/components/generate_error_code.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n\"// Разместить после Config::load(config_path(), ['route', 'container']);\n\n// Генерация кодов ошибок, только в режиме APP_DEBUG\nif (config(\\\"app.debug\\\")) {\n    $errorCodeConfig = config('error_code');\n    (new \\\\teamones\\\\responseCodeMsg\\\\Generate($errorCodeConfig))->run();\n}\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Web Payment with Alipay\nDESCRIPTION: Complete implementation of a web payment method using Alipay. It initializes the config, sets up order parameters, and returns the payment page content.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-hk/components/payment.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse support\\Request;\nuse Webman\\Config;\nuse Yansongda\\Pay\\Pay;\n\n/**\n * @param Request $request\n * @return string\n */\npublic function payment(Request $request)\n{\n    // 1. 获取配置文件 config/payment.php\n    $config = Config::get('payment');\n\n    // 2. 初始化配置\n    Pay::config($config);\n\n    // 3. 网页支付\n    $order = [\n        'out_trade_no' => time(),\n        'total_amount' => '8888.88',\n        'subject' => 'webman payment',\n        '_method' => 'get' // 使用get方式跳转\n    ];\n    return Pay::alipay()->web($order)->getBody()->getContents();\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom PHP.ini for Static PHP in Bash\nDESCRIPTION: Command to start a PHP script using a static PHP build with a custom php.ini file specified.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/fr/others/bin.md#2025-04-12_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nphp -c /your/path/php.ini start.php start -d\n```\n\n----------------------------------------\n\nTITLE: Importing the push.js client\nDESCRIPTION: This snippet shows how to include the `push.js` client library in your HTML. This allows you to use the JavaScript client-side functionality of the `webman/push` plugin within your web application.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/pt/plugin/push.md#2025-04-12_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"/plugin/webman/push/push.js\"> </script>\n```\n\n----------------------------------------\n\nTITLE: Setting Cookies Incrementally in Webman PHP\nDESCRIPTION: Illustrates how to create a response object, set cookies, and then set the body content separately.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/pt/response.md#2025-04-12_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n<?php\npublic function hello(Request $request)\n{\n    // Criar um objeto\n    $response = response();\n    \n    // .... Lógica de negócios omitida\n    \n    // Configurar cookie\n    $response->cookie('foo', 'valor');\n    \n    // .... Lógica de negócios omitida\n\n    // Configurar os dados a serem retornados\n    $response->withBody('Dados a serem retornados');\n    return $response;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Exception Handler in Webman PHP\nDESCRIPTION: This PHP configuration file sets the custom exception handler for the application.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/others/custom-error-page.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    '' => \\app\\exception\\Handler::class,\n];\n```\n\n----------------------------------------\n\nTITLE: Get Cookie with Default Value - Webman PHP\nDESCRIPTION: Retrieves a cookie with a default value if the cookie is missing. If the 'name' cookie is not found, the method returns 'tom'.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/th/request.md#2025-04-12_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n$request->cookie('name', 'tom');\n```\n\n----------------------------------------\n\nTITLE: Get POST Parameter with Default Value - Webman PHP\nDESCRIPTION: Retrieves a POST parameter with a default value if the parameter is missing. If the 'name' parameter is not found, the method returns 'tom'.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/th/request.md#2025-04-12_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$request->post('name', 'tom');\n```\n\n----------------------------------------\n\nTITLE: Creating Webman Application Plugin\nDESCRIPTION: Command to create a new application plugin using the Webman CLI with a specified plugin identifier\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/app/create.md#2025-04-12_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nphp webman app-plugin:create {plugin_identifier}\n```\n\n----------------------------------------\n\nTITLE: Server-Side Event Publishing (PHP)\nDESCRIPTION: This PHP code shows how to use the webman/push API to trigger events on the server-side. It instantiates the Api class with the server address, app key, and app secret, and then uses the trigger method to send a message event to a specific user channel.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/th/plugin/push.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Webman\\Push\\Api;\n$api = new Api(\n    // สามารถใช้ config เพื่อรับการตั้งค่าใน webman โดยตรง, สำหรับสภาพแวดล้อมนอก webman จะต้องระบุการตั้งค่าเอง\n    'http://127.0.0.1:3232',\n    config('plugin.webman.push.app.app_key'),\n    config('plugin.webman.push.app.app_secret')\n);\n// ส่งเหตุการณ์ข้อความไปยังลูกค้าที่สมัครช่อง user-1 ทั้งหมด\n$api->trigger('user-1', 'message', [\n    'from_uid' => 2,\n    'content'  => 'สวัสดี, นี่คือเนื้อหาข้อความ'\n]);\n```\n\n----------------------------------------\n\nTITLE: Customizing Timestamp Column Names in Eloquent Model in PHP\nDESCRIPTION: This snippet demonstrates how to customize the names of the timestamp columns (`created_at` and `updated_at`) in an Eloquent model. By defining the `CREATED_AT` and `UPDATED_AT` constants, you can specify different column names for creation and update timestamps.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/es/db/model.md#2025-04-12_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass User extends Model\n{\n    const CREATED_AT = 'creation_date';\n    const UPDATED_AT = 'last_update';\n}\n\n```\n\n----------------------------------------\n\nTITLE: Vista de ejemplo con Blade en Webman\nDESCRIPTION: Este snippet muestra un archivo de vista de ejemplo que utiliza el motor de plantillas Blade en Webman. Muestra la variable $name usando la sintaxis de Blade.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/es/view.md#2025-04-12_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<!doctype html>\n<html>\n<head>\n    <meta charset=\"utf-8\">\n    <title>webman</title>\n</head>\n<body>\nhello {{$name}}\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Installing Webman Event Library via Composer\nDESCRIPTION: Command to install the webman-event package using Composer package manager\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/event.md#2025-04-12_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require tinywan/webman-event\n```\n\n----------------------------------------\n\nTITLE: Installing Think-Template with Composer\nDESCRIPTION: This command uses Composer to install the Think-Template engine. Think-Template is a template engine from ThinkPHP.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-hk/view.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n\"composer require topthink/think-template\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Separate Process Group for Slow Requests in Webman\nDESCRIPTION: Configure a separate process group in config/process.php to handle slow requests on a different HTTP port, isolating them from main request processing\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/others/task.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'task' => [\n        'handler' => \\Webman\\App::class,\n        'listen' => 'http://0.0.0.0:8686',\n        'count' => 8,\n        'user' => '',\n        'group' => '',\n        'reusePort' => true,\n        'constructor' => [\n            'request_class' => \\support\\Request::class,\n            'logger' => \\support\\Log::channel('default'),\n            'app_path' => app_path(),\n            'public_path' => public_path()\n        ]\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Running webman in daemon mode (Linux)\nDESCRIPTION: This command starts the webman application in daemon mode, which is suitable for production environments. It runs the application in the background and automatically restarts it if it crashes. The `-d` flag specifies daemon mode.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-hk/install.md#2025-04-12_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nphp start.php start -d\n```\n\n----------------------------------------\n\nTITLE: Stopping Chunk Processing Early in webman-php\nDESCRIPTION: Method to stop processing chunks by returning false from the callback function. This allows early termination of chunk processing when certain conditions are met.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/db/queries.md#2025-04-12_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')->orderBy('id')->chunkById(100, function ($users) {\n    // Обработка записей...\n\n    return false;\n});\n```\n\n----------------------------------------\n\nTITLE: Model Update Operations\nDESCRIPTION: Shows how to update an existing model by retrieving it first and then saving changes.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/pt/db/model.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$user = app\\model\\User::find(1);\n$user->name = 'jerry';\n$user->save();\n```\n\n----------------------------------------\n\nTITLE: Installing PHP-DI Dependencies\nDESCRIPTION: Command to install required packages for dependency injection including psr/container, php-di and doctrine/annotations.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/pt/di.md#2025-04-12_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncomposer require psr/container ^1.1.1 php-di/php-di ^6 doctrine/annotations ^1.14\n```\n\n----------------------------------------\n\nTITLE: View Configuration for Twig Template Engine\nDESCRIPTION: Configuration for enabling Twig template engine in Webman, including composer installation and view config setup\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/view.md#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require twig/twig\n```\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'handler' => Twig::class,\n    'options' => [\n        'debug' => false,\n        'charset' => 'utf-8'\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Creating Custom 404 HTML Template in Webman PHP\nDESCRIPTION: This snippet shows how to create a custom 404 HTML template file for Webman PHP applications. It includes basic HTML structure and uses PHP to display an error message.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/de/others/custom-error-page.md#2025-04-12_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!doctype html>\n<html>\n<head>\n    <meta charset=\"utf-8\">\n    <title>404 not found</title>\n</head>\n<body>\n<?=htmlspecialchars($error)?>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Webman Binary Packaging Commands\nDESCRIPTION: Commands to package the Webman project into a binary executable, with optional PHP version specification\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/es/others/bin.md#2025-04-12_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nphp webman build:bin\n```\n\nLANGUAGE: bash\nCODE:\n```\nphp webman build:bin 8.1\n```\n\n----------------------------------------\n\nTITLE: Payment Configuration Setup\nDESCRIPTION: Configuration file setup for Alipay and WeChat payment integration including certificates, API keys, and environment settings\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/pt/components/payment.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nreturn [\n    'alipay' => [\n        'default' => [\n            'app_id' => '20160909004708941',\n            'app_secret_cert' => 'MIIEpAIBAAKCxxxxxxxxxxxxxxP4r3m4OUmD/+XDgCg==',\n            'app_public_cert_path' => base_path().'/payment/appCertPublicKey_2016090900470841.crt',\n            'alipay_public_cert_path' => base_path().'/payment/alipayCertPublicKey_RSA2.crt',\n            'alipay_root_cert_path' => base_path().'/payment/alipayRootCert.crt',\n            'return_url' => 'https://webman.tinywan.cn/payment/alipay-return',\n            'notify_url' => 'https://webman.tinywan.cn/payment/alipay-notify',\n            'service_provider_id' => '',\n            'mode' => \\Yansongda\\Pay\\Pay::MODE_SANDBOX,\n        ]\n    ],\n    // ... additional configuration settings ...\n];\n```\n\n----------------------------------------\n\nTITLE: Translation Configuration File\nDESCRIPTION: Configuration file for the translation component that specifies default locale, fallback locales, and the path to language files.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/components/translation.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    // Язык по умолчанию\n    'locale' => 'zh_CN',\n    // Резервный язык, используемый в случае отсутствия перевода на указанном языке\n    'fallback_locale' => ['zh_CN', 'en'],\n    // Каталог для хранения языковых файлов\n    'path' => base_path() . '/resource/translations',\n];\n```\n\n----------------------------------------\n\nTITLE: Installing ThinkORM via Composer in PHP\nDESCRIPTION: Command to install ThinkORM package using Composer. After installation, a restart is required for changes to take effect.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/de/db/thinkorm.md#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require -W webman/think-orm\n```\n\n----------------------------------------\n\nTITLE: Creating New Model Records\nDESCRIPTION: Example of creating and saving a new user record using a controller method.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/db/model.md#2025-04-12_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace app\\controller;\n\nuse app\\model\\User;\nuse support\\Request;\nuse support\\Response;\n\nclass FooController\n{\n    /**\n     * Aggiunge un nuovo record alla tabella degli utenti\n     *\n     * @param  Request  $request\n     * @return Response\n     */\n    public function store(Request $request)\n    {\n        // Valida la richiesta\n\n        $user = new User;\n\n        $user->name = $request->get('name');\n\n        $user->save();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Correct View Configuration Example\nDESCRIPTION: Example showing the correct way to configure view file suffix in Webman 1.4 using options array\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/jp/upgrade/1-4.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse support\\view\\Raw;\nreturn [\n    'handler' => Raw::class,\n    'options' => [\n        'view_suffix' => '.php'\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Setting Non-Integer Primary Key Type in Eloquent\nDESCRIPTION: Demonstrates how to set the primary key type to string for non-integer primary keys in an Eloquent model.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/jp/db/model.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nclass User extends Model\n{\n    protected $keyType = 'string';\n}\n```\n\n----------------------------------------\n\nTITLE: Nginx Configuration for WSS Proxy\nDESCRIPTION: This snippet outlines the Nginx configuration required to support WebSocket Secure (WSS) connections by proxying HTTP requests to a WebSocket server, enabling encrypted communications.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/plugin/push.md#2025-04-12_snippet_7\n\nLANGUAGE: nginx\nCODE:\n```\nserver {\n    # .... 这里省略了其它配置 ...\n\n    location /app/<app_key>\n    {\n        proxy_pass http://127.0.0.1:3131;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"Upgrade\";\n        proxy_set_header X-Real-IP $remote_addr;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Exclusion Pattern for Binary Packaging\nDESCRIPTION: Configuration in app.php to exclude unnecessary directories and files during packaging to keep the binary size minimal\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/es/others/bin.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n'exclude_pattern'   => '#^(?!.*(composer.json|/.github/|/.idea/|/.git/|/.setting/|/runtime/|/vendor-bin/|/build/|vendor/webman/admin))(.*)$#'\n```\n\n----------------------------------------\n\nTITLE: Creating ThinkORM Model via Console Command\nDESCRIPTION: Command-line instruction to generate a model using Webman's console tool, requiring webman/console package\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/db/thinkorm.md#2025-04-12_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nphp webman make:model table_name\n```\n\n----------------------------------------\n\nTITLE: Use Blade Component in Webman\nDESCRIPTION: This code demonstrates how to use the registered Alert Blade component in a template.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/es/view.md#2025-04-12_snippet_21\n\nLANGUAGE: html\nCODE:\n```\n<!doctype html>\n<html>\n<head>\n    <meta charset=\"utf-8\">\n    <title>webman</title>\n</head>\n<body>\n\n<x-alert/>\n\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Accessing Main Project Redis\nDESCRIPTION: This snippet shows how to access the Redis configuration from the main project within a plugin. It demonstrates retrieving a value from the default Redis connection and a named 'cache' connection defined in the main project.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/pt/plugin/app.md#2025-04-12_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse support\\Redis;\nRedis::get('chave');\n// Supondo que o projeto principal também configurou uma conexão cache\nRedis::connection('cache')->get('chave');\n```\n\n----------------------------------------\n\nTITLE: Adding Error Code Generation Bootstrap in start.php\nDESCRIPTION: Configuring automatic error code generation during application startup in debug mode\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/es/components/generate_error_code.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// Colocar después de Config::load(config_path(), ['route', 'container']);\n\n// Generar códigos de error, solo en modo APP_DEBUG\nif (config(\"app.debug\")) {\n    $errorCodeConfig = config('error_code');\n    (new \\teamones\\responseCodeMsg\\Generate($errorCodeConfig))->run();\n}\n```\n\n----------------------------------------\n\nTITLE: Cross Join in Webman PHP\nDESCRIPTION: This snippet shows how to perform a cross join operation using the crossJoin method.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/hi/db/queries.md#2025-04-12_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('sizes')\n            ->crossJoin('colors')\n            ->get();\n```\n\n----------------------------------------\n\nTITLE: Creating Bootstrap Initialization File\nDESCRIPTION: This code snippet demonstrates how to create a bootstrap initialization file named `MemReport` using the webman console command. This file will contain the logic for performing business initialization tasks.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/others/bootstrap.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nphp webman make:bootstrap MemReport\n```\n\n----------------------------------------\n\nTITLE: Integrating JavaScript Client for webman/push\nDESCRIPTION: HTML script tag to include the webman/push JavaScript client in a web page.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/de/plugin/push.md#2025-04-12_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"/plugin/webman/push/push.js\"> </script>\n```\n\n----------------------------------------\n\nTITLE: Filtering Collection Results in PHP\nDESCRIPTION: This snippet demonstrates filtering the results of an Eloquent query using the `reject` method on a collection. It filters out users that are disabled.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/es/db/model.md#2025-04-12_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$usuarios = $usuarios->reject(function ($usuario) {\n    return $usuario->disabled;\n});\n\n```\n\n----------------------------------------\n\nTITLE: Creating Custom 404 HTML Template\nDESCRIPTION: HTML template for custom 404 error page that displays error message using PHP variable interpolation\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/jp/others/custom-error-page.md#2025-04-12_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!doctype html>\n<html>\n<head>\n    <meta charset=\"utf-8\">\n    <title>404 not found</title>\n</head>\n<body>\n<?=htmlspecialchars($error)?>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Configurazione della generazione dei codici di errore in PHP\nDESCRIPTION: File di configurazione che definisce i parametri per la generazione automatica dei codici di errore, inclusi l'identificativo di sistema e l'intervallo dei codici.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/components/generate_error_code.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nreturn [\n    \"class\" => new \\support\\ErrorCode(), // File della classe ErrorCode\n    \"root_path\" => app_path(), // Directory radice del codice corrente\n    \"system_number\" => 201, // Identificativo di sistema\n    \"start_min_number\" => 10000 // Intervallo di generazione dei codici di errore, ad esempio 10000-99999\n];\n```\n\n----------------------------------------\n\nTITLE: Installing Webman Console Package with Composer\nDESCRIPTION: Command to install the webman/console package using Composer. This package is required for the binary packaging process.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/others/bin.md#2025-04-12_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require webman/console ^1.2.24\n```\n\n----------------------------------------\n\nTITLE: Getting Single Session Value\nDESCRIPTION: Examples of retrieving single value from session with optional default value\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/jp/session.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$session = $request->session();\n$name = $session->get('name');\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Command Class for Webman Plugin\nDESCRIPTION: Example of creating a custom command class FooAdminAddCommand for a Webman plugin. The command follows the naming convention 'foo-admin:add' and includes argument handling and execution logic.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/plugin/create.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Foo\\Admin;\n\nuse Symfony\\Component\\Console\\Command\\Command;\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\nuse Symfony\\Component\\Console\\Input\\InputOption;\nuse Symfony\\Component\\Console\\Input\\InputArgument;\n\nclass FooAdminAddCommand extends Command\n{\n    protected static $defaultName = 'foo-admin:add';\n    protected static $defaultDescription = 'Questa è la descrizione del comando';\n\n    /**\n     * @return void\n     */\n    protected function configure()\n    {\n        $this->addArgument('name', InputArgument::REQUIRED, 'Aggiungi nome');\n    }\n\n    /**\n     * @param InputInterface $input\n     * @param OutputInterface $output\n     * @return int\n     */\n    protected function execute(InputInterface $input, OutputInterface $output)\n    {\n        $name = $input->getArgument('name');\n        $output->writeln(\"Aggiunto admin $name\");\n        return self::SUCCESS;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Controller File Placement Security\nDESCRIPTION: Guidelines for structuring controller files to prevent unauthorized URL access and potential security vulnerabilities\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/th/others/security.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// Correct placement: app/controller/User.php\n// Incorrect placement: app/controller/model/User.php\n```\n\n----------------------------------------\n\nTITLE: Old Session Handler Namespaces (Deprecated)\nDESCRIPTION: This code shows the old namespaces for the SessionHandler classes in webman. These namespaces are deprecated and will be removed in future versions. The FileSessionHandler class is retained temporarily to avoid direct errors.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/upgrade/1-4.md#2025-04-12_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n```php\nuse Webman\\FileSessionHandler;  \nuse Webman\\RedisSessionHandler;  \nuse Webman\\RedisClusterSessionHandler;  \n```\n```\n\n----------------------------------------\n\nTITLE: Accessing Webman Documentation\nDESCRIPTION: URL to access the English version of the Webman documentation after starting the server. This assumes the server is running on the default port 8282.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/README.md#2025-04-12_snippet_1\n\nLANGUAGE: Plain\nCODE:\n```\nhttp://127.0.0.1:8282/doc/en\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Console Command for Webman Plugin\nDESCRIPTION: PHP class defining a custom console command 'foo-admin:add' for a Webman plugin. It extends Symfony's Command class and implements the execute method.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/bn/plugin/create.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Foo\\Admin;\n\nuse Symfony\\Component\\Console\\Command\\Command;\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\nuse Symfony\\Component\\Console\\Input\\InputOption;\nuse Symfony\\Component\\Console\\Input\\InputArgument;\n\nclass FooAdminAddCommand extends Command\n{\n    protected static $defaultName = 'foo-admin:add';\n    protected static $defaultDescription = 'Here is the command description';\n\n    protected function configure()\n    {\n        $this->addArgument('name', InputArgument::REQUIRED, 'Add name');\n    }\n\n    protected function execute(InputInterface $input, OutputInterface $output)\n    {\n        $name = $input->getArgument('name');\n        $output->writeln(\"Add admin $name\");\n        return self::SUCCESS;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Controller to Use AOP in PHP\nDESCRIPTION: Example of an IndexController that uses the UserService affected by the DebugAspect.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/tr/aop.md#2025-04-12_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse app\\service\\UserService;\nuse support\\Request;\n\nclass IndexController\n{\n    public function json(Request $request)\n    {\n        return json(['code' => 0, 'msg' => 'ok', 'data' => (new UserService())->first()]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Timestamp Format in Eloquent\nDESCRIPTION: Illustrates customizing the timestamp storage format in an Eloquent model.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/tr/db/model.md#2025-04-12_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\nclass User extends Model\n{\n    protected $dateFormat = 'U';\n}\n```\n\n----------------------------------------\n\nTITLE: Blade Component View in Webman\nDESCRIPTION: This code defines the view for the Alert Blade component. It displays a simple message in a red bold style.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/es/view.md#2025-04-12_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n<div>\n    <b style=\"color: red\">hola componente de blade</b>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Installing Webman Cache Package\nDESCRIPTION: Command to install the webman/cache package via Composer\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/db/cache.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ncomposer require -W webman/cache\n```\n\n----------------------------------------\n\nTITLE: Correct View File Configuration in Webman 1.4\nDESCRIPTION: The proper way to configure view file options in Webman 1.4, using the 'options' array for view_suffix.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/upgrade/1-4.md#2025-04-12_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse support\\view\\Raw;\nreturn [\n    'handler' => Raw::class,\n    'options' => [\n        'view_suffix' => '.php'\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Redis Connections in webman-php\nDESCRIPTION: Example configuration for multiple Redis connections in config/redis.php.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/de/db/redis.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'default' => [\n        'host'     => '127.0.0.1',\n        'password' => null,\n        'port'     => 6379,\n        'database' => 0,\n    ],\n\n    'cache' => [\n        'host'     => '127.0.0.1',\n        'password' => null,\n        'port'     => 6379,\n        'database' => 1,\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Executing Compression Command - Shell\nDESCRIPTION: This snippet outlines the command used to compress the Webman project into a binary file. It also allows specifying a PHP version for the compression process.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/pt/others/bin.md#2025-04-12_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n\"php webman build:bin\"\n```\n\nLANGUAGE: sh\nCODE:\n```\n\"php webman build:bin 8.1\"\n```\n\n----------------------------------------\n\nTITLE: Using JavaScript Client (Public Channel)\nDESCRIPTION: This JavaScript code demonstrates how to subscribe to a public channel using the push.js client. It sets up a connection, subscribes to a channel based on user ID and group ID, and defines event handlers for 'message' and 'friendApply' events.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/th/plugin/push.md#2025-04-12_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// สร้างการเชื่อมต่อ\nvar connection = new Push({\n    url: 'ws://127.0.0.1:3131', // ที่อยู่ของเว็บเซิร์ฟเวอร์\n    app_key: '<คีย์แอปพลิเคชัน ในไฟล์ config/plugin/webman/push/app.php>', \n    auth: '/plugin/webman/push/auth' // การตรวจสอบสิทธิ์การสมัครสมาชิก (สำหรับช่องส่วนบุคคลเท่านั้น)\n});\n// สมมติว่า รหัสผู้ใช้คือ 1\nvar uid = 1;\n// เบราว์เซอร์รับฟังก์ชันของข้อมูลในช่องที่ชื่อ user-1, หมายความว่าข้อความของผู้ใช้ที่มี uid เป็น 1\nvar user_channel = connection.subscribe('user-' + uid);\n\n// เมื่อมีเหตุการณ์ของข้อความในช่อง user-1\nuser_channel.on('message', function(data) {\n    // ข้อมูลที่ได้เป็นเนื้อหาข้อความ\n    console.log(data);\n});\n// เมื่อมีเหตุการณ์ friendApply ในช่อง user-1\nuser_channel.on('friendApply', function (data) {\n    // ข้อมูลที่ได้เป็นข้อมูลที่เกี่ยวกับการสมัครเป็นเพื่อน\n    console.log(data);\n});\n\n// สมมติว่า รหัสของกลุ่ม คือ 2\nvar group_id = 2;\n// เบราว์เซอร์รับฟังก์ชันของข้อมูลในช่อง group-2, หมายความว่ารับข้อความของกลุ่ม 2\nvar group_channel = connection.subscribe('group-' + group_id);\n// เมื่อกลุ่ม 2 มีเหตุการณ์ของข้อความ\ngroup_channel.on('message', function(data) {\n    // ข้อมูลที่ได้เป็นเนื้อหาข้อความ\n    console.log(data);\n});\n```\n\n----------------------------------------\n\nTITLE: Incorrect View Configuration (Deprecated)\nDESCRIPTION: This code shows the deprecated way to configure the view suffix in webman's view configuration. It is used to define the view handler and the file extension for view files. This configuration will no longer be supported in future versions.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/upgrade/1-4.md#2025-04-12_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n```php\nuse support\\view\\Raw;\nreturn [\n    'handler' => Raw::class,\n    'view_suffix' => '.php'\n];\n```\n```\n\n----------------------------------------\n\nTITLE: Swoole Coroutine Configuration\nDESCRIPTION: Shows how to enable Swoole coroutines by configuring the event loop in the server configuration, requiring Swoole extension version 5.0 or higher\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/es/coroutine/fiber.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n'event_loop' => \\Workerman\\Events\\Swoole::class,\n```\n\n----------------------------------------\n\nTITLE: Get Server IP Address - Webman PHP\nDESCRIPTION: Retrieves the server's IP address.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/th/request.md#2025-04-12_snippet_36\n\nLANGUAGE: php\nCODE:\n```\n$request->getLocalIp();\n```\n\n----------------------------------------\n\nTITLE: Running Static PHP with Custom INI File\nDESCRIPTION: Command to run a static PHP executable with a custom PHP INI configuration file.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/others/bin.md#2025-04-12_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nphp -c /your/path/php.ini start.php start -d\n```\n\n----------------------------------------\n\nTITLE: Fix Disabled Functions via Webman Console\nDESCRIPTION: Command to automatically fix disabled functions using webman console\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/others/disable-function-check.md#2025-04-12_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nphp webman fix-disable-functions\n```\n\n----------------------------------------\n\nTITLE: Installing ThinkORM via Composer\nDESCRIPTION: Composer command to install the ThinkORM plugin for Webman, requiring a full restart after installation\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/db/thinkorm.md#2025-04-12_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require -W webman/think-orm\n```\n\n----------------------------------------\n\nTITLE: Upgrading Webman Framework using Composer\nDESCRIPTION: This command updates the webman-framework and console components using composer and then installs them. It's crucial to back up the project before running this command to prevent data loss. The command is executed in the shell.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/upgrade/1-4.md#2025-04-12_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n`composer require workerman/webman-framework ^1.4.7 && composer require webman/console ^1.2.12 && php webman install`\n```\n\n----------------------------------------\n\nTITLE: Using wasChanged to Check Persisted Attribute Changes\nDESCRIPTION: Demonstrates how to use the wasChanged method to determine if attributes have changed since the last time the model was saved in the current request cycle.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/es/db/model.md#2025-04-12_snippet_28\n\nLANGUAGE: php\nCODE:\n```\n$user = User::create([\n    'first_name' => 'Taylor',\n    'last_name' => 'Otwell',\n    'title' => 'Developer',\n]);\n\n$user->title = 'Painter';\n$user->save();\n\n$user->wasChanged(); // true\n$user->wasChanged('title'); // true\n$user->wasChanged('first_name'); // false\n```\n\n----------------------------------------\n\nTITLE: Permission Configuration File for Webman\nDESCRIPTION: Configuration file for the permission system, including enforcer settings, model configuration, database adapter, and database connection details.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-hk/casbin.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nreturn [\n    /*\n     *Default  Permission\n     */\n    'default' => 'basic',\n\n    'log' => [\n        'enabled' => false,\n        'logger' => 'log',\n    ],\n\n    'enforcers' => [\n        'basic' => [\n            /*\n            * Model 設置\n            */\n            'model' => [\n                'config_type' => 'file',\n                'config_file_path' => config_path() . '/casbin-basic-model.conf',\n                'config_text' => '',\n            ],\n\n            // 适配器 .\n            'adapter' => webman\\permission\\adapter\\DatabaseAdapter::class,\n\n\t    /*\n            * 數據庫設置.\n            */\n            'database' => [\n                // 數據庫連接名稱，不填為默認配置.\n                'connection' => '',\n                // 策略表名（不含表前綴）\n                'rules_name' => 'rule',\n                // 策略表完整名稱.\n                'rules_table' => 'train_rule',\n            ],\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Bootstrap Configuration\nDESCRIPTION: This configuration snippet demonstrates how to add the `MemReport` class to the bootstrap list in `config/bootstrap.php`.  This ensures that the `MemReport::start()` method is executed when the process starts. Other configurations are omitted for brevity.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/es/others/bootstrap.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nreturn [\n    // ... Se omiten otras configuraciones...\n    \n    app\\bootstrap\\MemReport::class,\n];\n\n```\n\n----------------------------------------\n\nTITLE: Documentation Structure in Markdown\nDESCRIPTION: Structured table of contents for Webman PHP framework documentation, organized into major sections including getting started, basic functions, database integration, message queues, components, plugins, and advanced topics.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/SUMMARY.md#2025-04-12_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- Getting Started\n\n  - [What is webman](README.md)\n  - [Programming Notes](attention.md)\n  - [Q&A Community](help.md)\n  \n- Quick Start\n  \n  - [Installation](install.md)\n  - [Directory Structure](directory.md)\n  - [Simple Example](tutorial.md)\n\n[...remaining structure...]\n```\n\n----------------------------------------\n\nTITLE: Configuring Background Task Process\nDESCRIPTION: Configuration for registering a background task process without port listening.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/process.md#2025-04-12_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'task' => [\n        'handler'  => app\\TaskTest::class\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Unbegrenztes Wachstum eines statischen Arrays in einer Methode in PHP\nDESCRIPTION: Dieses Beispiel zeigt, wie ein statisches Array innerhalb einer Methode zu Speicherverlusten führen kann, wenn es mit jeder Anfrage unbegrenzt erweitert wird.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/de/others/memory-leak.md#2025-04-12_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nclass Index\n{\n    public function index(Request $request)\n    {\n        static $data = [];\n        $data[] = time();\n        return response($foo->sayHello());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Language File in Translation\nDESCRIPTION: Example of specifying a custom language file name in the third parameter of the trans() function.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/components/translation.md#2025-04-12_snippet_18\n\nLANGUAGE: php\nCODE:\n```\ntrans('hello', [], 'admin', 'zh_CN'); // Привет, администратор!\n```\n\n----------------------------------------\n\nTITLE: Registering Permission Service in webman Bootstrap Configuration\nDESCRIPTION: Code to add the Permission service to the webman bootstrap configuration file.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/tr/casbin.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n    // ...\n    webman\\permission\\Izin::class,\n```\n\n----------------------------------------\n\nTITLE: Installing Error Code Generator Package with Composer\nDESCRIPTION: Command to install the teamones/response-code-msg package via Composer\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/components/generate_error_code.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ncomposer require teamones/response-code-msg\n```\n\n----------------------------------------\n\nTITLE: Variables locales y seguridad en corutinas\nDESCRIPTION: Este snippet demuestra que el uso de variables locales es seguro en un entorno de corutinas. Debido a que las corutinas no pueden acceder a las variables locales de otras corutinas, no hay riesgo de contaminación de datos. El snippet muestra un ejemplo donde una variable local `$name` almacena el parámetro `name` de la solicitud y lo retorna después de una pausa.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/es/upgrade/1-5.md#2025-04-12_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n\"<?php\\n\\nnamespace app\\controller;\\n\\nuse support\\Request;\\nuse support\\Context;\\nuse Workerman\\Timer;\\n\\nclass TestController\\n{\\n    public function index(Request $request)\\n    {\\n        $name = $request->get('name');\\n        Timer::sleep(5);\\n        return $name;\\n    }\\n}\\n\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Paginator in Blade Template\nDESCRIPTION: This code snippet shows how to render the Paginator object within a Blade template file. The `{!! $paginator !!}` syntax is used to output the raw HTML generated by the paginator, preventing escaping.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/fr/components/paginator.md#2025-04-12_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<html>\n<head>\n  <!-- Prise en charge intégrée du style de pagination Bootstrap -->\n  <link rel=\"stylesheet\" href=\"//maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css\">\n</head>\n<body>\n\n{!! $paginator !!}\n\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Utilizzo del componente Blade in un template\nDESCRIPTION: Esempio di utilizzo del componente Blade Alert in un template HTML.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/view.md#2025-04-12_snippet_22\n\nLANGUAGE: html\nCODE:\n```\n<!doctype html>\n<html>\n<head>\n    <meta charset=\"utf-8\">\n    <title>webman</title>\n</head>\n<body>\n\n<x-alert/>\n\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Публикация события в Webman\nDESCRIPTION: Пример публикации события `user.register` с данными пользователя. Функция `Event::emit` используется для запуска события, принимая имя события и данные события в качестве параметров. Данные события могут быть любого типа: массив, объект и т.д.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/components/event.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\nuse support\\Request;\nuse Webman\\Event\\Event;\nclass User\n{\n    public function register(Request $request)\n    {\n        $user = [\n            'name' => 'webman',\n            'age' => 2\n        ];\n        Event::emit('user.register', $user);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Neuladen von webman nach Konfigurationsänderungen\nDESCRIPTION: Befehl zum Neuladen von webman nach Änderungen am Geschäftscode oder an Konfigurationen.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/de/attention.md#2025-04-12_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nphp start.php reload\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Private Channels (JavaScript)\nDESCRIPTION: This JavaScript code demonstrates how to subscribe to a private channel using the push.js client. It sets up the connection, specifying the authentication endpoint. The channel name starts with 'private-' indicating that authentication is required.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/th/plugin/push.md#2025-04-12_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar connection = new Push({\n    url: 'ws://127.0.0.1:3131', // ที่อยู่เว็บส็อค\n    app_key: '<app_key>',\n    auth: '/plugin/webman/push/auth' // การตรวจสอบสมัครสมาชิก (เฉพาะช่องส่วนตัวเท่านั้น)\n});\n\n// สมมติว่าผู้ใช้มี uid เป็น 1\nvar uid = 1;\n// เบราว์เซอร์ติดตามข้อความในช่องส่วนตัว private-user-1\nvar user_channel = connection.subscribe('private-user-' + uid);\n```\n\n----------------------------------------\n\nTITLE: Returning a Basic Response in Webman PHP\nDESCRIPTION: Demonstrates how to return a simple text response using the `response()` helper function. This function creates a `support\\Response` object with the given body, status code, and headers.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/pt/response.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\n\nclass FooController\n{\n    public function hello(Request $request)\n    {\n        return response('hello webman');\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Restarting Webman Server\nDESCRIPTION: Command to restart Webman after process configuration changes or new Composer package installation\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/pt/attention.md#2025-04-12_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nphp start.php restart\n```\n\n----------------------------------------\n\nTITLE: Get Remote Port - Webman PHP\nDESCRIPTION: Retrieves the client's port.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/th/request.md#2025-04-12_snippet_34\n\nLANGUAGE: php\nCODE:\n```\n$request->getRemotePort();\n```\n\n----------------------------------------\n\nTITLE: Respuesta retrasada con Timer::sleep()\nDESCRIPTION: Este snippet muestra cómo usar `Timer::sleep()` para simular una respuesta retrasada en webman.  A diferencia de la función `sleep()` de PHP, `Timer::sleep()` no bloquea el proceso, lo que permite manejar otras solicitudes mientras se espera. El snippet define un controlador que duerme durante 1.5 segundos antes de retornar la IP del cliente.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/es/upgrade/1-5.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n\"<?php\\n\\nnamespace app\\controller;\\n\\nuse support\\Request;\\nuse Workerman\\Timer;\\n\\nclass TestController\\n{\\n    public function index(Request $request)\\n    {\\n        // Dormir durante 1.5 segundos\\n        Timer::sleep(1.5);\\n        return $request->getRemoteIp();\\n    }\\n}\\n\"\n```\n\n----------------------------------------\n\nTITLE: Configurazione esclusione file in PHP per impacchettamento phar\nDESCRIPTION: Configurazione del pattern di esclusione per filtrare file e cartelle da non includere nel pacchetto phar. Questo viene impostato nel file di configurazione del plugin console di Webman.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/others/phar.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n'exclude_pattern' => '#^(?!.*(composer.json|/.github/|/.idea/|/.git/|/.setting/|/runtime/|/vendor-bin/|/build/|vendor/webman/admin))(.*)$#'\n```\n\n----------------------------------------\n\nTITLE: Installing MongoDB Package for PHP 7.2\nDESCRIPTION: Composer command to install MongoDB package dependencies specifically for PHP version 7.2\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/db/mongo.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\ncomposer require -W illuminate/database jenssegers/mongodb ^3.7.0\n```\n\n----------------------------------------\n\nTITLE: Configuring Webman Process for Periodic Tasks\nDESCRIPTION: Configuration for registering task processes in Webman's process configuration file to enable periodic task execution\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/components/crontab.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'task'  => [\n        'handler'  => process\\Task::class\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Incorrect View File Configuration in Webman 1.4\nDESCRIPTION: Example of a deprecated view file configuration method that is no longer supported in Webman 1.4.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/upgrade/1-4.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse support\\view\\Raw;\nreturn [\n    'handler' => Raw::class,\n    'view_suffix' => '.php'\n];\n```\n\n----------------------------------------\n\nTITLE: Legacy Session Handler Namespace\nDESCRIPTION: Old namespace imports for session handlers in Webman before version 1.4\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/jp/upgrade/1-4.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Webman\\FileSessionHandler;  \nuse Webman\\RedisSessionHandler;  \nuse Webman\\RedisClusterSessionHandler;\n```\n\n----------------------------------------\n\nTITLE: Middleware Configuration\nDESCRIPTION: Global middleware configuration for language handling\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/de/components/translation.md#2025-04-12_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    // Globale Middleware\n    '' => [\n        // ... andere Middleware hier\n        app\\middleware\\Lang::class,\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Implementing User Pagination Controller in PHP\nDESCRIPTION: PHP controller method demonstrating pagination setup with total items, items per page, current page, and URL pattern configuration\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/es/components/paginator.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\nuse JasonGrimes\\Paginator;\n\nclass UserController\n{\n    public function get(Request $request)\n    {\n        $total_items = 1000;\n        $items_perPage = 50;\n        $current_page = (int)$request->get('page', 1);\n        $url_pattern = '/user/get?page=(:num)';\n        $paginator = new Paginator($total_items, $items_perPage, $current_page, $url_pattern);\n        return view('user/get', ['paginator' => $paginator]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Synchronous Callback Handling for Alipay\nDESCRIPTION: This code handles synchronous callbacks from Alipay. It logs the callback data using the `Log::info()` method and returns a simple 'success' string. This demonstrates how to receive and acknowledge the synchronous callback from Alipay.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/components/payment.md#2025-04-12_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse support\\Request;\nuse Yansongda\\Pay\\Pay;\n\n/**\n * @desc: 『支付宝』同步通知\n * @param Request $request\n * @author Tinywan(ShaoBo Wan)\n */\npublic function alipayReturn(Request $request)\n{\n    Log::info('『支付宝』同步通知'.json_encode($request->get()));\n    return 'success';\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Webman on Linux\nDESCRIPTION: Commands for starting Webman in debug mode or daemon mode on Linux systems\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/pt/attention.md#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nphp start.php start\n```\n\nLANGUAGE: bash\nCODE:\n```\nphp start.php start -d\n```\n\n----------------------------------------\n\nTITLE: Configuring Exclude Pattern for Phar Packaging in PHP\nDESCRIPTION: Sets up the exclude pattern in the Webman console configuration to avoid packaging unnecessary directories and files, preventing oversized packages.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/de/others/phar.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n'exclude_pattern' => '#^(?!.*(composer.json|/.github/|/.idea/|/.git/|/.setting/|/runtime/|/vendor-bin/|/build/|vendor/webman/admin))(.*)$#'\n```\n\n----------------------------------------\n\nTITLE: Restarting Webman Server\nDESCRIPTION: Command to restart Webman after process configuration changes or package installation\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/attention.md#2025-04-12_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nphp start.php restart\n```\n\n----------------------------------------\n\nTITLE: Error Response Format\nDESCRIPTION: JSON structure for error responses in the application\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/jp/exception.md#2025-04-12_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"code\": \"500\",\n    \"msg\": \"例外情報\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Closure as Event Handler in PHP\nDESCRIPTION: This example shows how to use a closure function as an event handler in the config/event.php file for the 'user.login' event.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/components/event.md#2025-04-12_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\nreturn [\n    'user.login' => [\n        function($user){\n            var_dump($user);\n        }\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Unset Composer Proxy\nDESCRIPTION: This command removes the composer proxy configuration. This is useful if composer is failing to upgrade due to the usage of a composer proxy. Executed in the shell.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/upgrade/1-4.md#2025-04-12_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n`composer config -g --unset repos.packagist`\n```\n\n----------------------------------------\n\nTITLE: Controller Implementation\nDESCRIPTION: IndexController implementation using the UserService with AOP\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/pt/aop.md#2025-04-12_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse app\\service\\UserService;\nuse support\\Request;\n\nclass IndexController\n{\n    public function json(Request $request)\n    {\n        return json(['code' => 0, 'msg' => 'ok', 'data' => (new UserService())->first()]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Status of Packaged Webman PHP Application\nDESCRIPTION: Shell command to check the status of the packaged Webman application.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/others/phar.md#2025-04-12_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\nphp webman.phar status\n```\n\n----------------------------------------\n\nTITLE: Restarting Packaged Webman PHP Application\nDESCRIPTION: Shell commands to restart the packaged Webman application in both foreground and background modes.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/others/phar.md#2025-04-12_snippet_7\n\nLANGUAGE: Shell\nCODE:\n```\nphp webman.phar restart\n```\n\nLANGUAGE: Shell\nCODE:\n```\nphp webman.phar restart -d\n```\n\n----------------------------------------\n\nTITLE: Route Configuration for Middleware Exception Handling in PHP\nDESCRIPTION: This route configuration throws an exception. This exception is caught in the middleware.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/middleware.md#2025-04-12_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse support\\Request;\nuse Webman\\Route;\n\nRoute::any('/user/{uid}', function (Request $request, $uid) {\n    throw new \\Exception('exception test');\n});\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Casbin Enforcer\nDESCRIPTION: Demonstration of importing the Casbin Enforcer and using different configuration modes for permission management\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/fr/components/casbin.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n# Importing Casbin Enforcer\nuse teamones\\casbin\\Enforcer;\n\n# 1. Default configuration usage\nEnforcer::addPermissionForUser('user1', '/user', 'read');\n\n# 2. Custom RBAC configuration usage\nEnforcer::instance('rbac')->addPermissionForUser('user1', '/user', 'read');\n```\n\n----------------------------------------\n\nTITLE: Installing ThinkCache via Composer for Webman\nDESCRIPTION: Command to install ThinkCache package using Composer. Requires restart after installation.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/tr/db/thinkcache.md#2025-04-12_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require -W webman/think-cache\n```\n\n----------------------------------------\n\nTITLE: WhereNotNull Clause with Webman PHP\nDESCRIPTION: This code snippet demonstrates how to use the `whereNotNull()` clause in the Webman PHP framework's database query builder. It checks if the 'updated_at' column is not NULL.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/fr/db/queries.md#2025-04-12_snippet_23\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')\n                    ->whereNotNull('updated_at')\n                    ->get();\n```\n\n----------------------------------------\n\nTITLE: Configurando Porta HTTP para Tarefas Lentas em PHP\nDESCRIPTION: Este snippet mostra a configuração para adicionar uma porta HTTP no `config/process.php` para lidar com solicitações lentas em um grupo de processos dedicado, retornando o resultado diretamente ao cliente. Ele define um processo chamado 'task' que escuta na porta 8686 e configura a classe de solicitação, logger e caminhos de diretório.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/pt/others/task.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    // ... outras configurações omitidas ...\n\n    'task' => [\n        'handler' => \\Webman\\App::class,\n        'listen' => 'http://0.0.0.0:8686',\n        'count' => 8, // número de processos\n        'user' => '',\n        'group' => '',\n        'reusePort' => true,\n        'constructor' => [\n            'request_class' => \\support\\Request::class, // configuração da classe de solicitação\n            'logger' => \\support\\Log::channel('default'), // instância de log\n            'app_path' => app_path(), // localização do diretório app\n            'public_path' => public_path() // localização do diretório public\n        ]\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring Public Path in app.php\nDESCRIPTION: This code snippet demonstrates how to configure the `public_path` in the `config/app.php` file when the `public` directory is located in the same directory as `webman.phar`. It sets the public path to the `public` directory relative to the base path.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/others/phar.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n\"public_path' => base_path(false) . DIRECTORY_SEPARATOR . 'public',\"\n```\n\n----------------------------------------\n\nTITLE: Starting Webman PHP Server\nDESCRIPTION: Command to start the Webman PHP server, which triggers the process startup flow and initializes the framework components.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/others/process.md#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nphp start.php start\n```\n\n----------------------------------------\n\nTITLE: Displaying Webman Plugin Types in Markdown\nDESCRIPTION: This snippet shows the markdown structure used to describe basic and application plugins in Webman. It includes headers, descriptions, and version requirements for each plugin type.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/plugin.md#2025-04-12_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# 外掛\n外掛分為**基礎外掛**和**應用外掛**。\n\n#### 基礎外掛\n基礎外掛可以理解為一些webman的基礎組件，它可能是一個通用的類庫(例如webman/think-orm)，可能是一個通用的中介軟體(例如webman/cors)，或者一組路由配置(如webman/auto-route)，或是一個自定義進程(例如webman/redis-queue)等等。\n\n更多請參考[基礎外掛](plugin/base.md)\n\n> **注意**\n> 基礎外掛需要webman>=1.2.0\n\n#### 應用外掛\n應用外掛是一個完整的應用，例如問答系統，CMS系統，商城系統等。\n更多請參考[應用外掛](app/app.md)\n\n> **應用外掛**\n> 應用外掛需要webman>=1.4.0\n```\n\n----------------------------------------\n\nTITLE: Deleting Context Data in PHP\nDESCRIPTION: Deletes a specific value from the request context using a string key. This removes the data associated with the given key from the current request context.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/es/coroutine/context.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nContext::delete(string $name);\n```\n\n----------------------------------------\n\nTITLE: Rendering Contributors Grid with HTML Table\nDESCRIPTION: HTML table structure that creates a responsive grid of contributor profiles, including their GitHub avatars, usernames and profile links. Each cell is center-aligned and contains a 100px wide avatar image.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/thanks.md#2025-04-12_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<table>\n  <tr>\n    <td align=\"center\">\n      <a href=\"https://github.com/yasarluo\">\n        <img src=\"https://avatars.githubusercontent.com/u/60771720?v=4\" width=\"100px;\"/><h5>yasarluo</h5>\n      </a>\n    </td>\n    <!-- Additional contributor cells follow same pattern -->\n  </tr>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Modifying Controller for AOP Testing in PHP\nDESCRIPTION: Updated IndexController to use the UserService for demonstrating AOP functionality.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/aop.md#2025-04-12_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse app\\service\\UserService;\nuse support\\Request;\n\nclass IndexController\n{\n    public function json(Request $request)\n    {\n        return json(['code' => 0, 'msg' => 'ok', 'data' => (new UserService())->first()]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Traditional PHP Framework Request Processing\nDESCRIPTION: Detailed breakdown of the typical request handling steps in traditional PHP frameworks, involving multiple intermediary stages including nginx/apache, php-fpm, extensions, and resource management\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/others/performance.md#2025-04-12_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1. nginx/apache接收请求\n2. nginx/apache将请求传递给php-fpm\n3. php-fpm初始化环境，如创建变量列表\n4. php-fpm调用各个扩展/模块的RINIT\n5. php-fpm磁盘读取php文件(使用opcache可避免)\n6. php-fpm词法分析、语法分析、编译成opcode(使用opcache可避免)\n7. php-fpm执行opcode 包括8.9.10.11\n8. 框架初始化，如实例化各种类，包括如容器、控制器、路由、中间件等。\n9. 框架连接数据库并权限验证，连接redis\n10. 框架执行业务逻辑\n11. 框架关闭数据库、redis连接\n12. php-fpm释放资源、销毁所有类定义、实例、销毁符号表等\n13. php-fpm顺序调用各个扩展/模块的RSHUTDOWN方法\n14. php-fpm将结果转发给nginx/apache\n15. nginx/apache将结果返回给客户端\n```\n\n----------------------------------------\n\nTITLE: Configuring Exclude Patterns for Compression - PHP\nDESCRIPTION: This snippet configures the exclude patterns in the Webman Console app configuration file to avoid including unnecessary files and directories when compressing the project.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/pt/others/bin.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n\"'exclude_pattern'   => '#^(?!.*(composer.json|/.github/|/.idea/|/.git/|/.setting/|/runtime/|/vendor-bin/|/build/|vendor/webman/admin))(.*)$#'\"\n```\n\n----------------------------------------\n\nTITLE: Starten von webman auf Linux-Systemen\nDESCRIPTION: Befehle zum Starten von webman im Debug-Modus oder als Hintergrundprozess auf Linux-Systemen.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/de/attention.md#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nphp start.php start\n```\n\nLANGUAGE: bash\nCODE:\n```\nphp start.php start -d\n```\n\n----------------------------------------\n\nTITLE: Accessing Plugin Redis\nDESCRIPTION: This snippet shows how to access Redis connections configured specifically for a plugin. It demonstrates how to retrieve a value from the 'default' and 'cache' Redis connections.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/pt/plugin/app.md#2025-04-12_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse support\\Redis;\nRedis::connection('plugin.cms.default')->get('chave');\nRedis::connection('plugin.cms.cache')->get('chave');\n```\n\n----------------------------------------\n\nTITLE: Testing Application Configuration\nDESCRIPTION: PHPUnit test case that validates the application configuration structure and data types. Checks for required keys and their value types in the app configuration array.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/components/unitest.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse PHPUnit\\Framework\\TestCase;\n\nclass TestConfig extends TestCase\n{\n    public function testAppConfig()\n    {\n        $config = config('app');\n        self::assertIsArray($config);\n        self::assertArrayHasKey('debug', $config);\n        self::assertIsBool($config['debug']);\n        self::assertArrayHasKey('default_timezone', $config);\n        self::assertIsString($config['default_timezone']);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing ThinkCache via Composer\nDESCRIPTION: Command to install ThinkCache package using Composer with the -W flag.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/pt/db/thinkcache.md#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require -W webman/think-cache\n```\n\n----------------------------------------\n\nTITLE: Installing Cache Components for PHP 8.x\nDESCRIPTION: Command to install illuminate/redis and symfony/cache components for PHP 8.x applications using Composer.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/db/cache.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\ncomposer require -W illuminate/redis symfony/cache\n```\n\n----------------------------------------\n\nTITLE: Memory Leak Example: Static Array in PHP Class\nDESCRIPTION: Demonstrates a memory leak caused by an infinitely expanding static array that persists across requests.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/others/memory-leak.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass Foo\n{\n    public static $data = [];\n    public function index(Request $request)\n    {\n        self::$data[] = time();\n        return response('hello');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Webman Captcha Composer Package\nDESCRIPTION: Command to install the webman/captcha package using Composer for captcha functionality in a Webman PHP project\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/fr/components/captcha.md#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require webman/captcha\n```\n\n----------------------------------------\n\nTITLE: Percorso del file di configurazione della vista per plugin in Webman PHP\nDESCRIPTION: Specifica il percorso del file di configurazione della vista per i plugin dell'applicazione in Webman. Il file si trova nella directory del plugin, all'interno della cartella config.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/app/view.md#2025-04-12_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nplugin/{identificativo-plugin}/config/view.php\n```\n\n----------------------------------------\n\nTITLE: Synchronous Payment Callback Handler\nDESCRIPTION: Handler for processing synchronous payment notifications from Alipay.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/components/payment.md#2025-04-12_snippet_5\n\nLANGUAGE: php\nCODE:\n```\npublic function alipayReturn(Request $request)\n{\n    Log::info('Alipay synchronous notification'.json_encode($request->get()));\n    return 'success';\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting a Webman Plugin\nDESCRIPTION: Command to export a Webman plugin, copying configuration files and generating an Install.php file for automatic installation and removal operations.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/bn/plugin/create.md#2025-04-12_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nphp webman plugin:export --name=foo/admin\n```\n\n----------------------------------------\n\nTITLE: Specifying Database Connection in Eloquent Model in PHP\nDESCRIPTION: This example shows how to specify a custom database connection for an Eloquent model using the `$connection` property. This is useful when you need a particular model to use a different database connection than the default one configured in your application.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/es/db/model.md#2025-04-12_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass User extends Model\n{\n    /**\n     * Nombre de la conexión del modelo\n     * @var string\n     */\n    protected $connection = 'nombre-de-conexion';\n}\n\n```\n\n----------------------------------------\n\nTITLE: Unbegrenztes Wachstum von Singleton-Array-Eigenschaften in PHP\nDESCRIPTION: Dieses Beispiel demonstriert, wie ein Singleton mit einer Array-Eigenschaft zu Speicherverlusten führen kann, wenn neue Schlüssel unbegrenzt hinzugefügt werden.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/de/others/memory-leak.md#2025-04-12_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nclass Cache\n{\n    protected static $instance;\n    public $data = [];\n    \n    public function instance()\n    {\n        if (!self::$instance) {\n            self::$instance = new self;\n        }\n        return self::$instance;\n    }\n    \n    public function set($key, $value)\n    {\n        $this->data[$key] = $value;\n    }\n}\n```\n\nLANGUAGE: PHP\nCODE:\n```\nclass Foo\n{\n    public function index(Request $request)\n    {\n        Cache::instance()->set(time(), time());\n        return response('hallo');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing webman/push Package\nDESCRIPTION: This command installs the `webman/push` package using composer, a dependency manager for PHP. This will download and install the necessary files to integrate webman/push into the webman project.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-hk/plugin/push.md#2025-04-12_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncomposer require webman/push\n```\n\n----------------------------------------\n\nTITLE: Truncating the Table - PHP\nDESCRIPTION: Truncates the 'users' table to remove all records and resets the auto-increment ID to zero. This operation should be used cautiously as it cannot be undone.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/pt/db/queries.md#2025-04-12_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')->truncate();\n```\n\n----------------------------------------\n\nTITLE: Creating Plugin Directory Structure in Webman PHP\nDESCRIPTION: Shows the directory structure created when using the command 'php webman app-plugin:create {plugin_name}' to create a new application plugin in Webman.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/plugin/app.md#2025-04-12_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nplugin/\n└── cms\n    ├── app\n    │   ├── controller\n    │   │   └── IndexController.php\n    │   ├── exception\n    │   │   └── Handler.php\n    │   ├── functions.php\n    │   ├── middleware\n    │   ├── model\n    │   └── view\n    │       └── index\n    │           └── index.html\n    ├── config\n    │   ├── app.php\n    │   ├── autoload.php\n    │   ├── container.php\n    │   ├── database.php\n    │   ├── exception.php\n    │   ├── log.php\n    │   ├── middleware.php\n    │   ├── process.php\n    │   ├── redis.php\n    │   ├── route.php\n    │   ├── static.php\n    │   ├── thinkorm.php\n    │   ├── translation.php\n    │   └── view.php\n    └── public\n```\n\n----------------------------------------\n\nTITLE: Utilizzo del client JavaScript per canali pubblici\nDESCRIPTION: Esempio di codice JavaScript per connettersi e sottoscriversi a canali pubblici utilizzando webman/push\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/plugin/push.md#2025-04-12_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Stabilisci la connessione\nvar connection = new Push({\n    url: 'ws://127.0.0.1:3131', // indirizzo del websocket\n    app_key: '<app_key, ottenibile da config/plugin/webman/push/app.php>',\n    auth: '/plugin/webman/push/auth' // autorizzazione dell'abbonamento (solo per canali privati)\n});\n// Supponiamo che l'uid dell'utente sia 1\nvar uid = 1;\n// Il browser ascolta i messaggi del canale user-1, cioè i messaggi dell'utente con uid 1\nvar user_channel = connection.subscribe('user-' + uid);\n\n// Quando il canale user-1 ha un evento di messaggio\nuser_channel.on('message', function(data) {\n    // i dati contengono il contenuto del messaggio\n    console.log(data);\n});\n// Quando il canale user-1 ha un evento di richiesta di amicizia\nuser_channel.on('friendApply', function (data) {\n    // i dati contengono informazioni relative alla richiesta di amicizia\n    console.log(data);\n});\n\n// Supponiamo che l'ID del gruppo sia 2\nvar group_id = 2;\n// Il browser ascolta i messaggi del canale group-2, cioè i messaggi del gruppo 2\nvar group_channel = connection.subscribe('group-' + group_id);\n// Quando c'è un evento di messaggio nel gruppo 2\ngroup_channel.on('message', function(data) {\n    // i dati contengono il contenuto del messaggio\n    console.log(data);\n});\n```\n\n----------------------------------------\n\nTITLE: Starting Webman on Windows\nDESCRIPTION: Commands for starting Webman on Windows systems using either batch file or direct PHP command. Windows has limited functionality compared to Linux.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/attention.md#2025-04-12_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nwindows.bat\n```\n\nLANGUAGE: bash\nCODE:\n```\nphp windows.php\n```\n\n----------------------------------------\n\nTITLE: Incorrect Global Variable Usage Example\nDESCRIPTION: Demonstration of problematic global variable usage in coroutine environment that leads to data pollution.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/upgrade/1-5.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace app\\controller;\n\nuse support\\Request;\nuse Workerman\\Timer;\n\nclass TestController\n{\n    protected static $name = '';\n\n    public function index(Request $request)\n    {\n        static::$name = $request->get('name');\n        Timer::sleep(5);\n        return static::$name;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Context Usage Example\nDESCRIPTION: Proper implementation using Context class to store request-specific data in coroutine environment.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/upgrade/1-5.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace app\\controller;\n\nuse support\\Request;\nuse support\\Context;\nuse Workerman\\Timer;\n\nclass TestController\n{\n    public function index(Request $request)\n    {\n        Context::set('name', $request->get('name'));\n        Timer::sleep(5);\n        return Context::get('name');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Consuming Stomp Messages with Consumer Interface\nDESCRIPTION: Implementing a Stomp message consumer class that handles message processing with configurable acknowledgement modes\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/queue/stomp.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\queue\\stomp;\n\nuse Workerman\\Stomp\\AckResolver;\nuse Webman\\Stomp\\Consumer;\n\nclass MyMailSend implements Consumer\n{\n    public $queue = 'examples';\n    public $connection = 'default';\n    public $ack = 'auto';\n\n    public function consume($data, AckResolver $ack_resolver = null)\n    {\n        var_export(json_decode($data, true));\n        $ack_resolver->ack();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Redis Queue Package\nDESCRIPTION: Composer command to install the Redis queue package for Webman PHP framework\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/th/queue/redis.md#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require webman/redis-queue\n```\n\n----------------------------------------\n\nTITLE: Installing Webman Console with Composer in PHP\nDESCRIPTION: This command installs the Webman console component using Composer, which is required for creating plugin applications.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/app/create.md#2025-04-12_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\ncomposer require webman/console\n```\n\n----------------------------------------\n\nTITLE: Installazione del componente via Composer in PHP\nDESCRIPTION: Comando Composer per installare il componente di generazione automatica dei codici di errore.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/components/generate_error_code.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ncomposer require teamones/response-code-msg\n```\n\n----------------------------------------\n\nTITLE: Installing Redis Dependencies for Webman\nDESCRIPTION: Command to install the required Redis packages for Webman using Composer.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/jp/db/redis.md#2025-04-12_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncomposer require -W illuminate/redis illuminate/events\n```\n\n----------------------------------------\n\nTITLE: Installing Webman Captcha Component\nDESCRIPTION: Composer command to install the webman/captcha package for adding captcha functionality to a Webman PHP project\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/components/captcha.md#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require webman\\/captcha\n```\n\n----------------------------------------\n\nTITLE: Implementing User Controller with Constructor Injection\nDESCRIPTION: Example controller showing dependency injection through constructor.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/pt/di.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\nuse app\\service\\Mailer;\n\nclass UserController\n{\n    private $mailer;\n\n    public function __construct(Mailer $mailer)\n    {\n        $this->mailer = $mailer;\n    }\n\n    public function register(Request $request)\n    {\n        $this->mailer->mail('hello@webman.com', 'Olá e bem-vindo!');\n        return response('ok');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configurar ThinkPHP para controlador en Webman\nDESCRIPTION: Este snippet muestra cómo configurar ThinkPHP como motor de plantillas en Webman.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/es/view.md#2025-04-12_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse support\\view\\ThinkPHP;\n\nreturn [\n    'handler' => ThinkPHP::class\n];\n```\n\n----------------------------------------\n\nTITLE: Installing Webman 1.4 Dependencies with Composer\nDESCRIPTION: Command to upgrade Webman framework and console components to version 1.4\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/jp/upgrade/1-4.md#2025-04-12_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncomposer require workerman/webman-framework ^1.4.7 && composer require webman/console ^1.2.12 && php webman install\n```\n\n----------------------------------------\n\nTITLE: Creating a Webman Plugin Application using Console Command in PHP\nDESCRIPTION: This command creates a new plugin application in Webman. Replace {plugin identifier} with your unique plugin identifier.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/app/create.md#2025-04-12_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nphp webman app-plugin:create {plugin identifier}\n```\n\n----------------------------------------\n\nTITLE: Enabling Stomp Protocol in RabbitMQ\nDESCRIPTION: Bash command to enable Stomp plugin in RabbitMQ, which activates message queuing on port 61613 by default\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/queue/stomp.md#2025-04-12_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-plugins enable rabbitmq_stomp\n```\n\n----------------------------------------\n\nTITLE: Additional Increment with Conditions\nDESCRIPTION: Increments a value while simultaneously updating additional fields\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/db/queries.md#2025-04-12_snippet_38\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')->increment('votes', 1, ['name' => 'John']);\n```\n\n----------------------------------------\n\nTITLE: Viewing Connections of Packaged Webman PHP Application\nDESCRIPTION: Shell command to view the connection status of the packaged Webman application.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/others/phar.md#2025-04-12_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\nphp webman.phar connections\n```\n\n----------------------------------------\n\nTITLE: Forcing ThinkORM Model Generation in Bash\nDESCRIPTION: Command to force the generation of a ThinkORM model when Illuminate/Database is also present in the project.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/de/db/thinkorm.md#2025-04-12_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nphp webman make:model table_name tp\n```\n\n----------------------------------------\n\nTITLE: Resource Route Definition\nDESCRIPTION: Configuration for resource-based routing with optional action specifications\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/route.md#2025-04-12_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nRoute::resource('/test', app\\controller\\IndexController::class);\n\nRoute::resource('/test', app\\controller\\IndexController::class, ['index','create']);\n\nRoute::resource('/test', app\\controller\\IndexController::class, ['index','create','notify']);\n```\n\n----------------------------------------\n\nTITLE: Installing Response Code Message Component\nDESCRIPTION: Composer command to install the automatic error code generation library for PHP projects\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/es/components/generate_error_code.md#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require teamones/response-code-msg\n```\n\n----------------------------------------\n\nTITLE: Route Parameter Handling in UserController\nDESCRIPTION: Example of a controller class handling route parameters passed from URL\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/route.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nnamespace app\\controller;\nclass UserController\n{\n    public function get($request, $id)\n    {\n        return response('Parametro ricevuto: '.$id);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Webman on Windows\nDESCRIPTION: Commands for starting Webman server on Windows systems\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/attention.md#2025-04-12_snippet_1\n\nLANGUAGE: batch\nCODE:\n```\nwindows.bat\nphp windows.php\n```\n\n----------------------------------------\n\nTITLE: Refreshing Model Data from Database in Eloquent\nDESCRIPTION: Demonstrates how to reload model data from the database using the fresh() and refresh() methods in Eloquent.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/db/model.md#2025-04-12_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n$user = app\\model\\User::where('name', 'tom')->first();\n\n$fresh_user = $user->fresh();\n```\n\n----------------------------------------\n\nTITLE: Richiesta AJAX jQuery per testare la validazione\nDESCRIPTION: Esempio di codice JavaScript che utilizza jQuery per inviare una richiesta AJAX POST al controller di validazione.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/components/validation.md#2025-04-12_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n$.ajax({\n    url: 'http://127.0.0.1:8787',\n    type: \"post\",\n    dataType: 'json',\n    data: {nickname: 'Tom', username: 'tom cat', password: '123456'}\n});\n```\n\n----------------------------------------\n\nTITLE: Database Configuration for a Plugin\nDESCRIPTION: This snippet demonstrates how to configure a database connection specifically for a plugin. It shows a sample `database.php` configuration file with two named connections, 'mysql' and 'admin'.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/pt/plugin/app.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nreturn  [\n    'default' => 'mysql',\n    'connections' => [\n        'mysql' => [ // mysql é o nome da conexão\n            'driver'      => 'mysql',\n            'host'        => '127.0.0.1',\n            'port'        => 3306,\n            'database'    => 'nome_do_banco_de_dados',\n            'username'    => 'nome_de_usuário',\n            'password'    => 'senha',\n            'charset'     => 'utf8mb4',\n            'collation'   => 'utf8mb4_general_ci',\n        ],\n        'admin' => [ // admin é o nome da conexão\n            'driver'      => 'mysql',\n            'host'        => '127.0.0.1',\n            'port'        => 3306,\n            'database'    => 'nome_do_banco_de_dados',\n            'username'    => 'nome_de_usuário',\n            'password'    => 'senha',\n            'charset'     => 'utf8mb4',\n            'collation'   => 'utf8mb4_general_ci',\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: HTML Login Form with Captcha\nDESCRIPTION: HTML template demonstrating integration of captcha image and input field for user verification in a login form\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/components/captcha.md#2025-04-12_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<!doctype html>\n<html>\n<head>\n    <meta charset=\"utf-8\">\n    <title>Тест капчи</title>  \n</head>\n<body>\n    <form method=\"post\" action=\"\\/login\\/check\">\n       <img src=\"\\/login\\/captcha\" \\/><br>\n        <input type=\"text\" name=\"captcha\" \\/>\n        <input type=\"submit\" value=\"Отправить\" \\/>\n    </form>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Configuring Exception Handler in Webman PHP\nDESCRIPTION: This snippet shows how to configure the exception handler class in the config/exception.php file.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/tr/exception.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    // Configure the exception handling class here\n    '' => support\\exception\\Handler::class,\n];\n```\n\n----------------------------------------\n\nTITLE: Installing workerman/crontab Package\nDESCRIPTION: This command installs the `workerman/crontab` package using Composer. This is a prerequisite for using the crontab functionality in your webman project.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/fr/components/crontab.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n\"composer require workerman/crontab\"\n```\n\n----------------------------------------\n\nTITLE: Starting Webman Binary on Linux Server\nDESCRIPTION: Commands to start the generated Webman binary executable on a Linux server\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/es/others/bin.md#2025-04-12_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n./webman.bin start\n```\n\nLANGUAGE: bash\nCODE:\n```\n./webman.bin start -d\n```\n\n----------------------------------------\n\nTITLE: Old Session Handler Namespace\nDESCRIPTION: Shows the deprecated namespace imports for session handlers in Webman pre-1.4\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/de/upgrade/1-4.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Webman\\FileSessionHandler;  \nuse Webman\\RedisSessionHandler;  \nuse Webman\\RedisClusterSessionHandler;\n```\n\n----------------------------------------\n\nTITLE: jQuery AJAX Request Example\nDESCRIPTION: Example of making an AJAX request to the validation endpoint using jQuery.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/pt/components/validation.md#2025-04-12_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n$.ajax({\n     url: 'http://127.0.0.1:8787',\n     type: \"post\",\n     dataType: 'json',\n     data: {nickname:'汤姆', username:'tom cat', password: '123456'}\n});\n```\n\n----------------------------------------\n\nTITLE: Web Payment Implementation\nDESCRIPTION: Implementation of web-based payment processing using Alipay.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/components/payment.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\npublic function payment(Request $request)\n{\n    $config = Config::get('payment');\n    Pay::config($config);\n    $order = [\n        'out_trade_no' => time(),\n        'total_amount' => '8888.88',\n        'subject' => 'webman payment',\n        '_method' => 'get'\n    ];\n    return Pay::alipay()->web($order)->getBody()->getContents();\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Payment SDK via Composer\nDESCRIPTION: Command to install Yansongda Pay SDK version 3.0.0 or higher using Composer\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/pt/components/payment.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ncomposer require yansongda/pay ^3.0.0\n```\n\n----------------------------------------\n\nTITLE: Installing Specific WebMan Application Plugin (AI Example)\nDESCRIPTION: Example command for installing a specific WebMan application plugin named 'ai' from a source code package. This assumes the plugin files have been uploaded to the correct directory.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/app/install.md#2025-04-12_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nphp webman app-plugin:install ai\n```\n\n----------------------------------------\n\nTITLE: Configuring Route in PHP for AOP Test Controller\nDESCRIPTION: PHP code snippet to configure a route for the AOP test controller.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/de/aop.md#2025-04-12_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Webman\\Route;\n\nRoute::any('/json', [app\\controller\\IndexController::class, 'json']);\n```\n\n----------------------------------------\n\nTITLE: アリペイ同期コールバック処理 (PHP)\nDESCRIPTION: アリペイからの同期通知を処理するシンプルなPHPコードです。通知データをログに記録し、成功応答を返します。\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/jp/components/payment.md#2025-04-12_snippet_5\n\nLANGUAGE: php\nCODE:\n```\npublic function alipayReturn(Request $request)\n{\n    Log::info('『アリペイ』同期通知'.json_encode($request->get()));\n    return 'success';\n}\n```\n\n----------------------------------------\n\nTITLE: Verzeichnisstruktur eines webman Applikations-Plugins\nDESCRIPTION: Zeigt die typische Verzeichnisstruktur eines mit dem Befehl 'php webman app-plugin:create' erstellten Applikations-Plugins.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/de/plugin/app.md#2025-04-12_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nplugin/\n└── cms\n    ├── app\n    │   ├── controller\n    │   │   └── IndexController.php\n    │   ├── exception\n    │   │   └── Handler.php\n    │   ├── functions.php\n    │   ├── middleware\n    │   ├── model\n    │   └── view\n    │       └── index\n    │           └── index.html\n    ├── config\n    │   ├── app.php\n    │   ├── autoload.php\n    │   ├── container.php\n    │   ├── database.php\n    │   ├── exception.php\n    │   ├── log.php\n    │   ├── middleware.php\n    │   ├── process.php\n    │   ├── redis.php\n    │   ├── route.php\n    │   ├── static.php\n    │   ├── thinkorm.php\n    │   ├── translation.php\n    │   └── view.php\n    └── public\n```\n\n----------------------------------------\n\nTITLE: Starting Webman on Windows Systems\nDESCRIPTION: Methods to start Webman on Windows systems, which are primarily used for development environments. Windows does not support certain commands available on Linux.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/tr/attention.md#2025-04-12_snippet_1\n\nLANGUAGE: batch\nCODE:\n```\nwindows.bat\n```\n\nLANGUAGE: bash\nCODE:\n```\nphp windows.php\n```\n\n----------------------------------------\n\nTITLE: WhereDate Clause with Webman PHP\nDESCRIPTION: This code snippet demonstrates how to use the `whereDate()` clause in the Webman PHP framework's database query builder. It compares the 'created_at' column with a specific date ('2016-12-31').\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/fr/db/queries.md#2025-04-12_snippet_24\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')\n                ->whereDate('created_at', '2016-12-31')\n                ->get();\n```\n\n----------------------------------------\n\nTITLE: Testing AOP Implementation\nDESCRIPTION: Commands to start the server and test the AOP implementation\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/aop.md#2025-04-12_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nphp start.php start\ncurl  http://127.0.0.1:8787/json\n```\n\n----------------------------------------\n\nTITLE: Accesso alla Configurazione del Plugin in PHP\nDESCRIPTION: Dimostra come ottenere la configurazione di un plugin specifico utilizzando la funzione config(). L'esempio mostra come accedere alle configurazioni del plugin 'foo'.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/app/config.md#2025-04-12_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nconfig('plugin.{plugin}.{configurazione_specifica}')\n```\n\nLANGUAGE: PHP\nCODE:\n```\nconfig('plugin.foo.app')\n```\n\nLANGUAGE: PHP\nCODE:\n```\nconfig('plugin.foo.xxx')\n```\n\n----------------------------------------\n\nTITLE: Installing Command Line Tools with Composer\nDESCRIPTION: This command installs the webman console tool as a dependency using Composer.  This tool is required for packaging the webman project into a binary file. The version constraint `^1.2.24` ensures compatibility.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/th/others/bin.md#2025-04-12_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n\"composer require webman/console ^1.2.24\"\n```\n\n----------------------------------------\n\nTITLE: Installing PHPUnit via Composer\nDESCRIPTION: Command to install PHPUnit as a development dependency using Composer package manager.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/components/unitest.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ncomposer require --dev phpunit/phpunit\n```\n\n----------------------------------------\n\nTITLE: Konfiguration der Fehlercode-Generierung in PHP\nDESCRIPTION: Diese Konfigurationsdatei './config/error_code.php' definiert Parameter für die automatische Fehlercode-Generierung, einschließlich der Systemkennung und des Fehlercode-Bereichs.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/de/components/generate_error_code.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nreturn [\n    \"class\" => new \\support\\ErrorCode(), // ErrorCode-Klassen-Datei\n    \"root_path\" => app_path(), // Aktuelles Stammverzeichnis des Codes\n    \"system_number\" => 201, // Systemkennung\n    \"start_min_number\" => 10000 // Fehlercode-Generierungsbereich, z.B. 10000-99999\n];\n```\n\n----------------------------------------\n\nTITLE: Casbin Model Configuration File\nDESCRIPTION: This configuration file defines the Casbin model, specifying the request definition, policy definition, role definition, policy effect, and matchers.  It determines how Casbin evaluates access control policies.  This file needs to be located at `config/casbin-basic-model.conf`.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/casbin.md#2025-04-12_snippet_2\n\nLANGUAGE: conf\nCODE:\n```\n[request_definition]\nr = sub, obj, act\n\n[policy_definition]\np = sub, obj, act\n\n[role_definition]\ng = _, _\n\n[policy_effect]\ne = some(where (p.eft == allow))\n\n[matchers]\nm = g(r.sub, p.sub) && r.obj == p.obj && r.act == p.act\n```\n\n----------------------------------------\n\nTITLE: Deleting Records in WebMan PHP Query Builder\nDESCRIPTION: Demonstrates how to delete records and truncate tables.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/jp/db/queries.md#2025-04-12_snippet_21\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')->delete();\n\nDb::table('users')->where('votes', '>', 100)->delete();\n```\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')->truncate();\n```\n\n----------------------------------------\n\nTITLE: Installing Redis Library via Composer in PHP\nDESCRIPTION: This snippet demonstrates how to install the 'illuminate/redis' library using Composer for use with the Webman PHP framework. It highlights the use of the `-W` option for updating the library and its dependencies.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/es/db/redis.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ncomposer require -W illuminate/redis illuminate/events\n```\n\n----------------------------------------\n\nTITLE: Configuring Container for Dependency Injection\nDESCRIPTION: This PHP code snippet shows how to configure the container in config/container.php to enable autowiring and annotations for dependency injection.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/tr/di.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$builder = new \\DI\\ContainerBuilder();\n$builder->addDefinitions(config('dependence', []));\n$builder->useAutowiring(true);\n$builder->useAnnotations(true);\nreturn $builder->build();\n```\n\n----------------------------------------\n\nTITLE: Installing AOP Integration Package\nDESCRIPTION: Command to install the hyperf/aop-integration package via Composer\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/aop.md#2025-04-12_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require \"hyperf/aop-integration: ^1.1\"\n```\n\n----------------------------------------\n\nTITLE: Incorrect View Configuration Example\nDESCRIPTION: Example showing the unsupported way of configuring view file suffix in Webman 1.4\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/jp/upgrade/1-4.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse support\\view\\Raw;\nreturn [\n    'handler' => Raw::class,\n    'view_suffix' => '.php'\n];\n```\n\n----------------------------------------\n\nTITLE: Uninstalling webman plugin using command line\nDESCRIPTION: This command uninstalls a webman application plugin. Replace `插件名` with the actual name of the plugin. After running the command, manually delete the corresponding plugin directory under `{主項目}/plugin/`.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/app/install.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n\"php webman app-plugin:uninstall 插件名\"\n```\n\n----------------------------------------\n\nTITLE: Installing ThinkCache via Composer\nDESCRIPTION: Command to install ThinkCache package using Composer. Requires restart after installation.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/db/thinkcache.md#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require -W webman/think-cache\n```\n\n----------------------------------------\n\nTITLE: Deleting Data With Webman DB Query Builder\nDESCRIPTION: This snippet demonstrates deleting data from the 'users' table using the `delete()` and `truncate()` methods. `delete()` removes records based on specified conditions, while `truncate()` removes all rows and resets the auto-incrementing ID.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/db/queries.md#2025-04-12_snippet_30\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')->delete();\n\nDb::table('users')->where('votes', '>', 100)->delete();\n```\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')->truncate();\n```\n\n----------------------------------------\n\nTITLE: Installing vlucas/phpdotenv via Composer\nDESCRIPTION: Command to install the vlucas/phpdotenv package using Composer.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/components/env.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ncomposer require vlucas/phpdotenv\n```\n\n----------------------------------------\n\nTITLE: Unbegrenztes Wachstum eines statischen Arrays in PHP\nDESCRIPTION: Dieses Beispiel zeigt, wie ein statisches Array in einer Klasse zu Speicherverlusten führen kann, wenn es mit jeder Anfrage unbegrenzt erweitert wird.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/de/others/memory-leak.md#2025-04-12_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nclass Foo\n{\n    public static $data = [];\n    public function index(Request $request)\n    {\n        self::$data[] = time();\n        return response('hallo');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Template HTML per la pagina di login con captcha\nDESCRIPTION: Markup HTML per la pagina di login che include un'immagine captcha e un campo di input per la verifica.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/components/captcha.md#2025-04-12_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!doctype html>\n<html>\n<head>\n    <meta charset=\"utf-8\">\n    <title>Test del codice di verifica</title>  \n</head>\n<body>\n    <form method=\"post\" action=\"/login/check\">\n       <img src=\"/login/captcha\" /><br>\n        <input type=\"text\" name=\"captcha\" />\n        <input type=\"submit\" value=\"Invia\" />\n    </form>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Safe Use of Local Variables in Webman PHP Coroutines\nDESCRIPTION: This code shows that local variables are safe to use in coroutine environments because each coroutine has its own independent scope. The `$name` variable is local to the `index` method, so there is no risk of data pollution between concurrent requests.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/fr/coroutine/fiber.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace app\\controller;\n\nuse support\\Request;\nuse support\\Context;\nuse Workerman\\Timer;\n\nclass TestController\n{\n    public function index(Request $request)\n    {\n        $name = $request->get('name');\n        Timer::sleep(5);\n        return $name;\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Plugin Namespace and Class Definition in PHP\nDESCRIPTION: Example of a PHP class definition following the plugin naming convention with a unique plugin identifier\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/app/standard.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\\n\\nnamespace plugin\\\\foo\\\\app\\\\controller;\\n\\nclass ArticleController\\n{\\n    \\n}\n```\n\n----------------------------------------\n\nTITLE: Installing webman/push via Composer\nDESCRIPTION: This command installs the webman/push plugin using Composer, a dependency manager for PHP. It downloads the plugin and its dependencies into your webman project.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/pt/plugin/push.md#2025-04-12_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncomposer require webman/push\n```\n\n----------------------------------------\n\nTITLE: Initializing AOP in PHP start.php\nDESCRIPTION: Code snippet to initialize the AOP ClassLoader in the start.php file.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/aop.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Hyperf\\AopIntegration\\ClassLoader;\n\nif ($timezone = config('app.default_timezone')) {\n    date_default_timezone_set($timezone);\n}\n\n// Inizializzazione\nClassLoader::init();\n```\n\n----------------------------------------\n\nTITLE: Pagination Template for Blade\nDESCRIPTION: HTML template for rendering pagination with Bootstrap styling in Laravel Blade template engine\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/es/components/paginator.md#2025-04-12_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<html>\n<head>\n  <link rel=\"stylesheet\" href=\"//maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css\">\n</head>\n<body>\n\n{!! $paginator !!}\n\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Uninstalling WebMan Application Plugin\nDESCRIPTION: Command to uninstall a WebMan application plugin. This should be run before manually deleting the plugin directory.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/app/install.md#2025-04-12_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nphp webman app-plugin:uninstall plugin-name\n```\n\n----------------------------------------\n\nTITLE: Language Middleware Implementation\nDESCRIPTION: Middleware for handling language selection per request\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/de/components/translation.md#2025-04-12_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\middleware;\n\nuse Webman\\MiddlewareInterface;\nuse Webman\\Http\\Response;\nuse Webman\\Http\\Request;\n\nclass Lang implements MiddlewareInterface\n{\n    public function process(Request $request, callable $handler) : Response\n    {\n        locale(session('lang', 'zh_CN'));\n        return $handler($request);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Where Between Clause in Webman PHP\nDESCRIPTION: This snippet shows how to use the whereBetween method to filter results within a range.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/hi/db/queries.md#2025-04-12_snippet_22\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')\n           ->whereBetween('votes', [1, 100])\n           ->get();\n```\n\n----------------------------------------\n\nTITLE: Synchronous Payment Return Handler\nDESCRIPTION: Handler for processing synchronous payment return notifications\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/components/payment.md#2025-04-12_snippet_5\n\nLANGUAGE: php\nCODE:\n```\npublic function alipayReturn(Request $request)\n{\n    Log::info('『支付宝』同步通知'.json_encode($request->get()));\n    return 'success';\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling pnctl_ Functions in BT Panel for Linux\nDESCRIPTION: This snippet indicates the need to disable or delete functions starting with 'pnctl_' in the BT (Baota) Panel when using Linux. This is necessary for proper Webman functionality on Linux systems using the BT Panel.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/require.md#2025-04-12_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\npnctl_\n```\n\n----------------------------------------\n\nTITLE: Defining Route for JSON endpoint\nDESCRIPTION: This PHP code defines a route for the `/json` endpoint, mapping it to the `json` method in the IndexController.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/th/aop.md#2025-04-12_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n\"<?php\\nuse Webman\\Route;\\n\\nRoute::any('/json', [app\\controller\\IndexController::class, 'json']);\\n\"\n```\n\n----------------------------------------\n\nTITLE: Configuring AOP in config.php\nDESCRIPTION: This PHP code snippet shows the configuration for AOP, specifying the paths to scan for annotations, ignoring certain annotations, defining class maps, and listing the aspects to be applied.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/th/aop.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n \"<?php\\n\\nuse Hyperf\\Di\\Annotation\\AspectCollector;\\n\\nreturn [\\n    'annotations' => [\\n        'scan' => [\\n            'paths' => [\\n                BASE_PATH . '/app',\\n            ],\\n            'ignore_annotations' => [\\n                'mixin',\\n            ],\\n            'class_map' => [\\n            ],\\n            'collectors' => [\\n                AspectCollector::class\\n            ],\\n        ],\\n    ],\\n    'aspects' => [\\n        // ที่นี่เขียน Aspect ที่เกี่ยวข้อง\\n        app\\aspect\\DebugAspect::class,\\n    ]\\n];\\n\"\n```\n\n----------------------------------------\n\nTITLE: Creating Closure Route in PHP Webman\nDESCRIPTION: Example of defining a closure route that returns a simple response when accessed at /test\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/route.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nRoute::any('/test', function ($request) {\n    return response('test');\n});\n```\n\n----------------------------------------\n\nTITLE: 自動エラーコード生成の起動コード追加 (PHP)\nDESCRIPTION: アプリケーションの起動時にエラーコードを自動生成するためのコードです。デバッグモードでのみ実行されます。\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/jp/components/generate_error_code.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// Config::load(config_path(), ['route', 'container']); の後に配置してください。\n\n// エラーコードを生成、APP_DEBUGモードのみ生成\nif (config(\"app.debug\")) {\n    $errorCodeConfig = config('error_code');\n    (new \\teamones\\responseCodeMsg\\Generate($errorCodeConfig))->run();\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a ThinkORM Model in PHP\nDESCRIPTION: Example of creating a ThinkORM model class. This shows how to define a model with table name and primary key specifications.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/de/db/thinkorm.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\model;\n\nuse think\\Model;\n\nclass User extends Model\n{\n    /**\n     * Die mit dem Modell verknüpfte Tabelle.\n     *\n     * @var string\n     */\n    protected $table = 'user';\n\n    /**\n     * Der Primärschlüssel, der mit der Tabelle verknüpft ist.\n     *\n     * @var string\n     */\n    protected $pk = 'id';\n    \n}\n```\n\n----------------------------------------\n\nTITLE: Union-Abfragen mit dem Query Builder in PHP\nDESCRIPTION: Dieses Snippet zeigt, wie man zwei oder mehr Abfragen mit einer Union-Operation kombiniert.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/de/db/queries.md#2025-04-12_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n$first = Db::table('users')\n            ->whereNull('first_name');\n\n$users = Db::table('users')\n            ->whereNull('last_name')\n            ->union($first)\n            ->get();\n```\n\n----------------------------------------\n\nTITLE: Implementing Gzip Compression for API Testing with PHP\nDESCRIPTION: This PHP code snippet demonstrates how to compress response data using gzip and add the appropriate header for API testing tools like apipost. It helps maintain keep-alive connections during stress tests.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/others/benchmarks.md#2025-04-12_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nnamespace app\\controller;\nclass IndexController\n{\n    public function index()\n    {\n        return response(gzencode('hello webman'))->withHeader('Content-Encoding', 'gzip');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Plural Forms in Translations\nDESCRIPTION: Example of using a translation with plural forms by passing the count value as a placeholder.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/components/translation.md#2025-04-12_snippet_14\n\nLANGUAGE: php\nCODE:\n```\ntrans('apple_count', ['%count%' => 10]); // There are 10 apples\n```\n\n----------------------------------------\n\nTITLE: Global Variable Pollution Example\nDESCRIPTION: Demonstrates the risks of storing request-related state in static variables in a coroutine environment, which can lead to data corruption across requests\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-hk/upgrade/1-5.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace app\\controller;\n\nuse support\\Request;\nuse Workerman\\Timer;\n\nclass TestController\n{\n    protected static $name = '';\n\n    public function index(Request $request)\n    {\n        static::$name = $request->get('name');\n        Timer::sleep(5);\n        return static::$name;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Linking to Webman PHP Plugin Marketplace in Markdown\nDESCRIPTION: This snippet demonstrates how to create a hyperlink in Markdown to direct users to the Webman PHP plugin marketplace.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/de/app/market.md#2025-04-12_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n[Klicken Sie hier, um zum App-Marktplatz zu gelangen](https://www.workerman.net/apps)\n```\n\n----------------------------------------\n\nTITLE: Vue Component Integration (JavaScript)\nDESCRIPTION: This JavaScript code demonstrates integrating push.js client inside Vue component with typescript.  The URL must start with `wss://` and use a domain name with a valid SSL certificate.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/th/plugin/push.md#2025-04-12_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n<script lang=\"ts\" setup>\nimport {  onMounted } from 'vue'\nimport { Push } from '../utils/push-vue'\n\nonMounted(() => {\n  console.log('คอมโพเน้นที่ถูกติดตั้ง') \n\n  // สร้างอินสแตนซ์ของ webman-push\n\n  // สร้างการเชื่อมต่อ\n  var connection = new Push({\n    url: 'ws://127.0.0.1:3131', // ที่อยู่ของเว็บเซิร์ฟเวอร์\n    app_key: '<app_key ที่ได้รับจาก config/plugin/webman/push/app.php>',\n    auth: '/plugin/webman/push/auth' // การตรวจสอบสิทธิ์สำหรับการสมัครสมาชิก (สำหรับช่องที่เป็นส่วนตัวเท่านั้น)\n  });\n\n  // สมมติว่า uid ของผู้ใช้คือ 1\n  var uid = 1;\n  // บราวเซอร์บันทึกข้อความในช่องชื่อ user-1 นั้นคือข้อความของผู้ใช้ที่ uid เป็น 1\n  var user_channel = connection.subscribe('user-' + uid);\n\n  // เมื่อช่อง user-1 มีการเกิดเหตุการณ์ message\n  user_channel.on('message', function (data) {\n    // ข้อมูลในนั้นคือเนื้อหาของข้อความ\n    console.log(data);\n  });\n  // เมื่อช่อง user-1 มีเหตุการณ์ friendApply\n  user_channel.on('friendApply', function (data) {\n    // ข้อมูลในนั้นคือข้อมูลที่เกี่ยวกับการสมัครเป็นเพื่อน\n    console.log(data);\n  });\n\n  // สมมติว่า id ของกลุ่มคือ 2\n  var group_id = 2;\n  // บราวเซอร์บันทึกข้อความในช่องชื่อ group-2 นั้นคือข้อความของกลุ่มที่มี id เป็น 2\n  var group_channel = connection.subscribe('group-' + group_id);\n  // เมื่อกลุ่ม 2 มีเหตุการณ์ message\n  group_channel.on('message', function (data) {\n    // ข้อมูลในนั้นคือเนื้อหาของข้อความ\n    console.log(data);\n  });\n})\n\n</script>\n```\n\n----------------------------------------\n\nTITLE: Query Debugging Techniques\nDESCRIPTION: Uses dump and dd methods for debugging database queries with different output behaviors\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/db/queries.md#2025-04-12_snippet_41\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')->where('votes', '>', 100)->dd();\nDb::table('users')->where('votes', '>', 100)->dump();\n```\n\n----------------------------------------\n\nTITLE: Safe Local Variable Usage in Coroutines\nDESCRIPTION: Shows how local variables prevent state pollution in coroutine-based applications\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/th/coroutine/fiber.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace app\\controller;\n\nuse support\\Request;\nuse support\\Context;\nuse Workerman\\Timer;\n\nclass TestController\n{\n    public function index(Request $request)\n    {\n        $name = $request->get('name');\n        Timer::sleep(5);\n        return $name;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Specific File Autoloading in Composer\nDESCRIPTION: Configuration for autoloading specific helper files using Composer's files directive. This method loads the files before webman starts and requires a restart for changes to take effect.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/others/autoload.md#2025-04-12_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"files\": [\n    \"./support/helpers.php\",\n    \"./app/helpers.php\"\n]\n```\n\n----------------------------------------\n\nTITLE: Defining Phinx Directory Structure in Webman\nDESCRIPTION: Shows the recommended directory structure for Phinx migration and seed files within a Webman project.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/tr/db/migration.md#2025-04-12_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n.\n├── app                           Uygulama dizini\n│   ├── controller                Denetleyici dizini\n│   │   └── Index.php             Denetleyici\n│   ├── model                     Model dizini\n......\n├── database                      Veritabanı dosyaları\n│   ├── migrations                Taşıma dosyaları\n│   │   └── 20180426073606_create_user_table.php\n│   ├── seeds                     Test verileri\n│   │   └── UserSeeder.php\n......\n```\n\n----------------------------------------\n\nTITLE: Registering Authorization Middleware in webman Configuration\nDESCRIPTION: Code snippet to add the Authorization Middleware to the global middleware list in the webman configuration.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/tr/casbin.md#2025-04-12_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    // Genel ara yazılımlar\n    '' => [\n        // ... diğer ara yazılımlar burada kısaltılmıştır\n        app\\middleware\\YetkilendirmeMiddleware::class,\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Using firstOr Method with Specific Columns\nDESCRIPTION: Shows how to use firstOr method with an array of specific columns to retrieve, followed by a callback function that executes if no record is found.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/es/db/model.md#2025-04-12_snippet_21\n\nLANGUAGE: php\nCODE:\n```\n$model = app\\model\\Flight::where('patas', '>', 100)\n            ->firstOr(['id', 'patas'], function () {\n                // ...\n            });\n```\n\n----------------------------------------\n\nTITLE: Webman Plugin Directory Structure\nDESCRIPTION: Shows the directory structure of a webman plugin, containing directories like app, config, public, and api. It highlights the similarities with webman application directory structures.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/es/app/directory.md#2025-04-12_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n\"plugin/\n└── foo\n    ├── app\n    │   ├── controller\n    │   │   └── IndexController.php\n    │   ├── exception\n    │   │   └── Handler.php\n    │   ├── functions.php\n    │   ├── middleware\n    │   ├── model\n    │   └── view\n    │       └── index\n    │           └── index.html\n    ├── config\n    │   ├── app.php\n    │   ├── autoload.php\n    │   ├── container.php\n    │   ├── database.php\n    │   ├── exception.php\n    │   ├── log.php\n    │   ├── middleware.php\n    │   ├── process.php\n    │   ├── redis.php\n    │   ├── route.php\n    │   ├── static.php\n    │   ├── thinkorm.php\n    │   ├── translation.php\n    │   └── view.php\n    ├── public\n    └── api\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Webman to use Twig (Repeated)\nDESCRIPTION: This PHP code configures webman to use the Twig template engine. This is repeated from earlier in the document.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-hk/view.md#2025-04-12_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n\"<?php\nuse support\\view\\Twig;\n\nreturn [\n    'handler' => Twig::class\n];\n?>\"\n```\n\n----------------------------------------\n\nTITLE: Adding Middleware to 4xx Route Fallbacks (PHP)\nDESCRIPTION: This PHP code shows how to add middleware to route fallbacks that handle 4xx errors in Webman Framework v1.6. This allows applying middleware logic to requests that don't match any defined routes. The example adds two middleware classes to the fallback route.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/upgrade/1-6.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nRoute::fallback(function(){\n    return json(['code' => 404, 'msg' => '404 not found']);\n})->middleware([\n    app\\middleware\\MiddlewareA::class,\n    app\\middleware\\MiddlewareB::class,\n]);\n```\n\n----------------------------------------\n\nTITLE: Installing Casbin via Composer\nDESCRIPTION: Command to install the Casbin package through Composer package manager.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/components/casbin.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ncomposer require teamones/casbin\n```\n\n----------------------------------------\n\nTITLE: Obtaining the application name from the request in Webman (PHP)\nDESCRIPTION: This snippet shows how to obtain the application name from the request using `$request->app`.  In a single-application setup, it returns an empty string, while in a multi-application setup, it returns the name of the application. Note that for closure routes, this will always return an empty string.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/es/request.md#2025-04-12_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\n$request->app;\n```\n\n----------------------------------------\n\nTITLE: Controller Without Suffix in Webman PHP\nDESCRIPTION: This example shows a controller defined without the 'Controller' suffix.  It demonstrates how Webman handles controllers when a suffix is not explicitly set in the configuration. Requires webman version 1.3 or later.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/th/controller.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n\"<?php\nnamespace app\\controller;\n\nuse support\\Request;\n\nclass Foo\n{\n    public function index(Request $request)\n    {\n        return response('hello index');\n    }\n    \n    public function hello(Request $request)\n    {\n        return response('hello webman');\n    }\n}\n\"\n```\n\n----------------------------------------\n\nTITLE: Verwendung von ErrorCodes in einer PHP-Serviceklasse\nDESCRIPTION: Dieses Beispiel zeigt, wie man die generierten Fehlercodes in einer Serviceklasse verwendet. Der Fehlercode 'ErrorCode::ModelAddOptionsError' wird in einer Exception verwendet.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/de/components/generate_error_code.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * Navigationsbezogener Service-Klasse\n */\n\nnamespace app\\service;\n\nuse app\\model\\Demo as DemoModel;\n\n// ErrorCode-Klassen-Datei einbinden\nuse support\\ErrorCode;\n\nclass Demo\n{\n    /**\n     * Hinzufügen\n     * @param $data\n     * @return array|mixed\n     * @throws \\exception\n     */\n    public function add($data): array\n    {\n        try {\n            $demo = new DemoModel();\n            foreach ($data as $key => $value) {\n                $demo->$key = $value;\n            }\n\n            $demo->save();\n\n            return $demo->getData();\n        } catch (\\Throwable $e) {\n            // Fehlermeldung ausgeben\n            throw_http_exception($e->getMessage(), ErrorCode::ModelAddOptionsError);\n        }\n        return [];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Collection Methods in Eloquent\nDESCRIPTION: Demonstrates using count, sum, and max methods on model collections to return scalar values.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/pt/db/model.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$count = app\\model\\Flight::where('active', 1)->count();\n\n$max = app\\model\\Flight::where('active', 1)->max('price');\n```\n\n----------------------------------------\n\nTITLE: Safe Local Variable Usage in Coroutine Environment\nDESCRIPTION: Demonstrates safe usage of local variables that don't cause data pollution between coroutines.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/jp/upgrade/1-5.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace app\\controller;\n\nuse support\\Request;\nuse support\\Context;\nuse Workerman\\Timer;\n\nclass TestController\n{\n    public function index(Request $request)\n    {\n        $name = $request->get('name');\n        Timer::sleep(5);\n        return $name;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Message to Stomp Queue\nDESCRIPTION: This PHP code snippet demonstrates how to send a message to a Stomp queue using the Webman Stomp client. It involves specifying the queue name, serializing the data (if it's an array), and calling the `Client::send()` method.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-hk/queue/stomp.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\nuse Webman\\Stomp\\Client;\n\nclass Index\n{\n    public function queue(Request $request)\n    {\n        // 隊列\n        $queue = 'examples';\n        // 數據（傳遞數組時需要自行序列化，比如使用json_encode，serialize等）\n        $data = json_encode(['to' => 'tom@gmail.com', 'content' => 'hello']);\n        // 執行投遞\n        Client::send($queue, $data);\n\n        return response('redis queue test');\n    }\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Updated Session Handler Namespace\nDESCRIPTION: New namespace imports for session handlers in Webman 1.4\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/jp/upgrade/1-4.md#2025-04-12_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Webman\\Session\\FileSessionHandler;  \nuse Webman\\Session\\RedisSessionHandler;  \nuse Webman\\Session\\RedisClusterSessionHandler;\n```\n\n----------------------------------------\n\nTITLE: Returning JSON in Webman (PHP)\nDESCRIPTION: This code snippet shows how to return a JSON response from a Webman controller. It retrieves a 'name' parameter from the request and returns a JSON object containing a code, message, and the retrieved name as data. The response will automatically include the `Content-Type: application/json` header.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/tutorial.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\n\nclass UserController\n{\n    public function hello(Request $request)\n    {\n        $default_name = 'webman';\n        $name = $request->get('name', $default_name);\n        return json([\n            'code' => 0, \n            'msg' => 'ok', \n            'data' => $name\n        ]);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Event Class in PHP\nDESCRIPTION: Example of defining a custom event class 'LogErrorWriteEvent' extending Symfony's Event class.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/event.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nnamespace extend\\event;\n\nuse Symfony\\Contracts\\EventDispatcher\\Event;\n\nclass LogErrorWriteEvent extends Event\n{\n    const NAME = 'log.error.write';  // Event name, unique identifier of the event\n\n    /** @var array */\n    public array $log;\n\n    public function __construct(array $log)\n    {\n        $this->log = $log;\n    }\n\n    public function handle()\n    {\n        return $this->log;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing ThinkCache via Composer in PHP\nDESCRIPTION: Command to install ThinkCache using Composer. This installs webman/think-cache which in turn installs toptink/think-cache.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/jp/db/thinkcache.md#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require -W webman/think-cache\n```\n\n----------------------------------------\n\nTITLE: Swoole Coroutine Configuration in Webman PHP\nDESCRIPTION: Configuration snippet for enabling Swoole coroutine in Webman's server configuration.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/coroutine/fiber.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n'event_loop' => \\Workerman\\Events\\Swoole::class,\n```\n\n----------------------------------------\n\nTITLE: Template HTML per il componente Blade Alert\nDESCRIPTION: Esempio di template HTML per il componente Blade Alert.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/view.md#2025-04-12_snippet_20\n\nLANGUAGE: html\nCODE:\n```\n<div>\n    <b style=\"color: red\">ciao componente di Blade</b>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Invio di messaggi sincroni alla coda Redis in Webman PHP\nDESCRIPTION: Esempio di invio di messaggi sincroni alla coda Redis utilizzando la classe Redis del componente webman/redis-queue.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/queue/redis.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\nuse Webman\\RedisQueue\\Redis;\n\nclass Index\n{\n    public function queue(Request $request)\n    {\n        // Nome della coda\n        $queue = 'send-mail';\n        // Dati, è possibile passare direttamente un array senza la necessità di serializzarlo\n        $data = ['to' => 'tom@gmail.com', 'content' => 'hello'];\n        // Invio del messaggio\n        Redis::send($queue, $data);\n        // Invio di un messaggio con ritardo, che verrà elaborato dopo 60 secondi\n        Redis::send($queue, $data, 60);\n\n        return response('test della coda Redis');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing webman-permission via Composer in PHP\nDESCRIPTION: Command to install the webman-permission package using Composer. Requires PHP 7.1+ and ThinkORM.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/de/casbin.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ncomposer require tinywan/webman-permission\n```\n\n----------------------------------------\n\nTITLE: Event Listener Configuration\nDESCRIPTION: Configuration for registering event listeners in the system\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/event.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    // Event listeners\n    'listener'    => [\n        \\extend\\event\\LogErrorWriteEvent::NAME  => \\extend\\event\\LogErrorWriteEvent::class,\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Installing Casbin PHP Package\nDESCRIPTION: Composer command to install the Casbin PHP package for access control and authorization management\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/fr/components/casbin.md#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require teamones/casbin\n```\n\n----------------------------------------\n\nTITLE: Configurar Twig en Webman\nDESCRIPTION: Este snippet muestra cómo configurar el motor de plantillas Twig en Webman. Incluye la declaración de la clase Twig y la configuración de opciones como debug y charset.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/es/view.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse support\\view\\Twig;\n\nreturn [\n    'handler' => Twig::class,\n    'options' => [\n        'debug' => false,\n        'charset' => 'utf-8'\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Composerを使用したパッケージのインストール (PHP)\nDESCRIPTION: teamones/response-code-msgパッケージをComposerを使用してインストールするためのコマンドです。\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/jp/components/generate_error_code.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ncomposer require teamones/response-code-msg\n```\n\n----------------------------------------\n\nTITLE: Installing Cache Components for PHP 7.x\nDESCRIPTION: Command to install illuminate/redis and symfony/cache components for PHP 7.x applications using Composer.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/db/cache.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ncomposer require -W illuminate/redis ^8.2.0 symfony/cache ^5.2\n```\n\n----------------------------------------\n\nTITLE: Configuring Plugin Commands in Webman\nDESCRIPTION: Configuration file that registers custom commands for the plugin. This file specifies which command classes should be loaded by webman/console when executing command line operations.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/plugin/create.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Foo\\Admin\\FooAdminAddCommand;\n\nreturn [\n    FooAdminAddCommand::class,\n    // ....è possibile aggiungere più configurazioni...\n];\n```\n\n----------------------------------------\n\nTITLE: Initializing Empty ErrorCode Class\nDESCRIPTION: Base ErrorCode class template that will be automatically populated with error codes\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/components/generate_error_code.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * Automatically generated file, please do not modify manually.\n * @Author:$Id$\n */\nnamespace support;\n\nclass ErrorCode\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Deprecated View Configuration\nDESCRIPTION: This code snippet shows the deprecated way of configuring the view suffix in webman. This method is no longer supported in version 1.4.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/upgrade/1-4.md#2025-04-12_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n```php\nuse support\\view\\Raw;\nreturn [\n    'handler' => Raw::class,\n    'view_suffix' => '.php'\n];\n```\n```\n\n----------------------------------------\n\nTITLE: Server-side Push in PHP using webman/push API\nDESCRIPTION: PHP code example for server-side push using the webman/push API to trigger events on channels.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/de/plugin/push.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Webman\\Push\\Api;\n$api = new Api(\n    'http://127.0.0.1:3232',\n    config('plugin.webman.push.app.app_key'),\n    config('plugin.webman.push.app.app_secret')\n);\n$api->trigger('user-1', 'message', [\n    'from_uid' => 2,\n    'content'  => 'Hallo, dies ist der Nachrichteninhalt'\n]);\n```\n\n----------------------------------------\n\nTITLE: Installing Webman 1.5 Dependencies\nDESCRIPTION: Command to upgrade Webman framework to version 1.5 including required dependencies.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/upgrade/1-5.md#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require workerman/webman-framework ^1.5 -W && composer require webman/console ^1.2.12 && php webman install\n```\n\n----------------------------------------\n\nTITLE: Configuring Exception Handling for Multiple Applications\nDESCRIPTION: This example demonstrates how to configure different exception handlers for different applications. The configuration is done in the `config/exception.php` file.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/es/multiapp.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'shop' => support\\exception\\Handler::class,\n    'api' => support\\exception\\ApiHandler::class,\n];\n\n```\n\n----------------------------------------\n\nTITLE: Blade Template Example\nDESCRIPTION: This HTML code is a basic Blade template. It displays the value of the `$name` variable passed from the controller using Blade's template syntax `{{ $name }}`.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-hk/view.md#2025-04-12_snippet_13\n\nLANGUAGE: html\nCODE:\n```\n\"<!doctype html>\n<html>\n<head>\n    <meta charset=\\\"utf-8\\\">\n    <title>webman</title>\n</head>\n<body>\nhello {{$name}}\n</body>\n</html>\"\n```\n\n----------------------------------------\n\nTITLE: Selecting Specific Columns\nDESCRIPTION: Demonstrates how to select specific columns from a database table, including column aliasing.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/db/queries.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('user')->select('name', 'email as user_email')->get();\n```\n\n----------------------------------------\n\nTITLE: Installing aop-integration Package\nDESCRIPTION: This command installs the aop-integration package using composer, which is required for AOP functionality in Webman-PHP with Hyperf.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/aop.md#2025-04-12_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n\"composer require \\\"hyperf/aop-integration: ^1.1\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Service Class Using Generated Error Codes\nDESCRIPTION: Example of using automatically generated error codes in a service method with error handling\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/es/components/generate_error_code.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n* Clase de servicio para operaciones relacionadas con la navegación\n*/\n\nnamespace app\\service;\n\nuse app\\model\\Demo as DemoModel;\n\n// Importar archivo de clase ErrorCode\nuse support\\ErrorCode;\n\nclass Demo\n{\n    /**\n    * Agregar\n    * @param $data\n    * @return array|mixed\n    * @throws \\exception\n    */\n    public function add($data): array\n    {\n        try {\n            $demo = new DemoModel();\n            foreach ($data as $key => $value) {\n                $demo->$key = $value;\n            }\n\n            $demo->save();\n\n            return $demo->getData();\n        } catch (\\Throwable $e) {\n            // Mostrar información de error\n            throw_http_exception($e->getMessage(), ErrorCode::ModelAddOptionsError);\n        }\n        return [];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Twig Template with Pagination\nDESCRIPTION: Twig template implementation showing how to render pagination controls with proper escaping.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/de/db/paginator.md#2025-04-12_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<html>\n<head>\n  <!-- Built-in support for Bootstrap pagination styles -->\n  <link rel=\"stylesheet\" href=\"//maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css\">\n</head>\n<body>\n\n{% autoescape false %}\n{{paginator}}\n{% endautoescape %}\n\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Injecting String Values into Class Properties\nDESCRIPTION: This code shows how to inject string values defined in the configuration into class properties using the `@Inject` annotation.  The annotation specifies the key from the configuration to inject.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-hk/di.md#2025-04-12_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n\"<?php\nnamespace app\\service;\n\nuse DI\\Annotation\\Inject;\n\nclass Mailer\n{\n    /**\n     * @Inject(\"smtp_host\")\n     */\n    private $smtpHost;\n\n    /**\n     * @Inject(\"smtp_port\")\n     */\n    private $smtpPort;\n\n    public function mail($email, $content)\n    {\n        // 發送郵件程式碼省略\n        echo \"{\\$this->smtpHost}:{\\$this->smtpPort}\\n\"; // 將輸出 192.168.1.11:25\n    }\n}\"\n```\n\n----------------------------------------\n\nTITLE: Installing Yansongda/Pay SDK with Composer\nDESCRIPTION: This command uses Composer to install the Yansongda/Pay SDK version 3.0.0 or higher. Composer is a dependency management tool for PHP.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/components/payment.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ncomposer require yansongda/pay ^3.0.0\n```\n\n----------------------------------------\n\nTITLE: Unparsable Code\nDESCRIPTION: This is not a PHP script.  It appears to be an auto-generated machine output of some sort.  It does not follow the standard PHP syntax rules.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/th/controller.md#2025-04-12_snippet_4\n\nLANGUAGE: js\nCODE:\n```\n\"<?php\nn4rfhjndukiebemtaibnataiim5tiba3ruegmiwhjhrkebiuajpfnad9hoqi\n\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Single Column from Database in webman-php\nDESCRIPTION: Query to retrieve a single column from multiple rows using the pluck() method. This retrieves all 'title' values from the 'roles' table.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/db/queries.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$titles = Db::table('roles')->pluck('title');\n```\n\n----------------------------------------\n\nTITLE: Installing Pay SDK (V3) with Composer\nDESCRIPTION: This command installs the yansongda/pay package version 3.0.0 or later using Composer, a dependency manager for PHP. This allows you to use the Pay SDK in your project.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/es/components/payment.md#2025-04-12_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\ncomposer require yansongda/pay ^3.0.0\n```\n\n----------------------------------------\n\nTITLE: Returning JSON Response\nDESCRIPTION: This snippet demonstrates how to return a JSON response using the `json()` helper function.  It returns a JSON object with 'code' and 'msg' fields.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/response.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\n\nclass FooController\n{\n    public function hello(Request $request)\n    {\n        return json(['code' => 0, 'msg' => 'ok']);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Gestione personalizzata delle eccezioni di validazione in PHP\nDESCRIPTION: Esempio di come gestire manualmente le eccezioni ValidationException generate da workerman/validation e restituire una risposta JSON personalizzata.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/components/validation.md#2025-04-12_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\nuse Respect\\Validation\\Validator as v;\nuse Respect\\Validation\\Exceptions\\ValidationException;\n\nclass IndexController\n{\n    public function index(Request $request)\n    {\n        try {\n            $data = v::input($request->post(), [\n                'username' => v::alnum()->length(5, 64)->setName('Nome utente'),\n                'password' => v::length(5, 64)->setName('Password')\n            ]);\n        } catch (ValidationException $e) {\n            return json(['code' => 500, 'msg' => $e->getMessage()]);\n        }\n        return json(['code' => 0, 'msg' => 'ok', 'data' => $data]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuration d'un serveur WebSocket dans config/process.php\nDESCRIPTION: Configuration nécessaire pour enregistrer un serveur WebSocket personnalisé dans Webman, définissant le handler, le port d'écoute et le nombre de processus.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/fr/process.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nreturn [\\n    // ... autres configurations de processus omises... \\n\\n    // websocket_test est le nom du processus\\n    'websocket_test' => [\\n        // Vous spécifiez ici la classe du processus, c'est-à-dire la classe Pusher définie ci-dessus\\n        'handler' => app\\Pusher::class,\\n        'listen'  => 'websocket://0.0.0.0:8888',\\n        'count'   => 1,\\n    ],\\n];\n```\n\n----------------------------------------\n\nTITLE: Linking to WebMan Plugin Market in Markdown\nDESCRIPTION: Markdown link syntax used to direct users to the WebMan plugin marketplace section\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/plugin/market.md#2025-04-12_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[Click here to enter the plugin market](/webman#plugins)\n```\n\n----------------------------------------\n\nTITLE: Getting First Row With Webman DB Query Builder\nDESCRIPTION: This snippet retrieves the first row from the 'users' table where the 'name' column is equal to 'John'. The `where()` method is used to add a condition to the query, and the `first()` method returns the first matching record or null if no record is found.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/db/queries.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$user = Db::table('users')->where('name', 'John')->first();\n```\n\n----------------------------------------\n\nTITLE: Creating Custom 500 HTML Template\nDESCRIPTION: HTML template for displaying 500 internal server error pages with exception details.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/others/custom-error-page.md#2025-04-12_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!doctype html>\n<html>\n<head>\n    <meta charset=\"utf-8\">\n    <title>500 Internal Server Error</title>\n</head>\n<body>\nCustom error template:\n<?=htmlspecialchars($exception)?>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Disabling Timestamps in Eloquent Model\nDESCRIPTION: Shows how to disable automatic timestamp management in an Eloquent model by setting $timestamps to false.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/db/model.md#2025-04-12_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nclass User extends Model\n{\n    public $timestamps = false;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Redis Command Interface\nDESCRIPTION: This snippet lists various Redis command interfaces such as append, get, set, and del, demonstrating the available functions for interacting with Redis through the Webman framework.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-hk/db/redis.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nRedis::append($key, $value)\nRedis::bitCount($key)\nRedis::decr($key, $value)\nRedis::decrBy($key, $value)\nRedis::get($key)\nRedis::getBit($key, $offset)\nRedis::getRange($key, $start, $end)\nRedis::getSet($key, $value)\nRedis::incr($key, $value)\nRedis::incrBy($key, $value)\nRedis::incrByFloat($key, $value)\nRedis::mGet(array $keys)\nRedis::getMultiple(array $keys)\nRedis::mSet($pairs)\nRedis::mSetNx($pairs)\nRedis::set($key, $value, $expireResolution = null, $expireTTL = null, $flag = null)\nRedis::setBit($key, $offset, $value)\nRedis::setEx($key, $ttl, $value)\nRedis::pSetEx($key, $ttl, $value)\nRedis::setNx($key, $value)\nRedis::setRange($key, $offset, $value)\nRedis::strLen($key)\nRedis::del(...$keys)\nRedis::exists(...$keys)\nRedis::expire($key, $ttl)\nRedis::expireAt($key, $timestamp)\nRedis::select($dbIndex)\n```\n\n----------------------------------------\n\nTITLE: Customizing Timestamp Format in Eloquent\nDESCRIPTION: Illustrates how to customize the timestamp format in an Eloquent model by defining the $dateFormat property.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/db/model.md#2025-04-12_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nclass User extends Model\n{\n    protected $dateFormat = 'U';\n}\n```\n\n----------------------------------------\n\nTITLE: Automatisch generierte ErrorCode-Klasse in PHP\nDESCRIPTION: Diese Datei './support/ErrorCode.php' wird automatisch generiert und enthält alle definierten Fehlercodes als Konstanten. Sie sollte nicht manuell bearbeitet werden.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/de/components/generate_error_code.md#2025-04-12_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * Automatisch generierte Datei, bitte nicht manuell ändern.\n * @Author:$Id$\n */\nnamespace support;\n\nclass ErrorCode\n{\n    const LoginNameOrPasswordError = -20110001;\n    const UserNotExist = -20110002;\n    const TokenNotExist = -20110003;\n    const InvalidToken = -20110004;\n    const ExpireToken = -20110005;\n    const WrongToken = -20110006;\n    const ClientIpNotEqual = -20110007;\n    const TokenRecordNotFound = -20110008;\n    const ModelAddUserError = -20110009;\n    const NoInfoToModify = -20110010;\n    const OnlyAdminPasswordCanBeModified = -20110011;\n    const AdminAccountCannotBeDeleted = -20110012;\n    const DbNotExist = -20110013;\n    const ModelAddOptionsError = -20110014;\n    const UnableToDeleteSystemConfig = -20110015;\n    const ConfigParamKeyRequired = -20110016;\n    const ExpiryCanNotGreaterThan7days = -20110017;\n    const GetPresignedPutObjectUrlError = -20110018;\n    const ObjectStorageConfigNotExist = -20110019;\n    const UpdateNavIndexSortError = -20110020;\n    const TagNameAttNotExist = -20110021;\n    const ModelUpdateOptionsError = -20110022;\n}\n```\n\n----------------------------------------\n\nTITLE: OrderBy Clause with Webman PHP\nDESCRIPTION: This code snippet demonstrates how to use the `orderBy()` clause in the Webman PHP framework's database query builder. It sorts the results of the query by the 'name' column in descending order.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/fr/db/queries.md#2025-04-12_snippet_28\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')\n                ->orderBy('name', 'desc')\n                ->get();\n```\n\n----------------------------------------\n\nTITLE: Создание класса обработки событий в Webman\nDESCRIPTION: Пример класса обработки событий. Он включает два метода, `register` и `logout`, которые принимают данные события (`$user`) в качестве входных данных.  В этих методах может содержаться любая необходимая бизнес-логика, связанная с соответствующими событиями.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/components/event.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\event;\nclass User\n{\n    function register($user)\n    {\n        var_export($user);\n    }\n \n    function logout($user)\n    {\n        var_export($user);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Business Initialization in MemReport\nDESCRIPTION: This snippet demonstrates how to implement a business initialization task within the `MemReport` class. It checks if the environment is a console, and if not, sets up a timer to periodically report memory usage.  The `$worker` parameter is used to detect if it's a command line execution.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/others/bootstrap.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n \"<?php\\n\\nnamespace app\\bootstrap;\\n\\nuse Webman\\Bootstrap;\\n\\nclass MemReport implements Bootstrap\\n{\\n    public static function start($worker)\\n    {\\n        // 是否是命令行环境 ?\\n        $is_console = !$worker;\\n        if ($is_console) {\\n            // 如果你不想命令行环境执行这个初始化，则在这里直接返回\\n            return;\\n        }\\n        \\n        // 每隔10秒执行一次\\n        \\\\Workerman\\\\Timer::add(10, function () {\\n            // 为了方便演示，这里使用输出代替上报过程\\n            echo memory_get_usage() . \"\\n\";\\n        });\\n        \\n    }\\n\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Database Configuration for Webman Plugin\nDESCRIPTION: This PHP code configures database connections within a Webman plugin's configuration file. It defines multiple connections, each with its own driver, host, port, database name, username, password, charset, and collation.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-hk/plugin/app.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nreturn  [\n    'default' => 'mysql',\n    'connections' => [\n        'mysql' => [ // mysql为连接名\n            'driver'      => 'mysql',\n            'host'        => '127.0.0.1',\n            'port'        => 3306,\n            'database'    => '数据库',\n            'username'    => '用户名',\n            'password'    => '密码',\n            'charset'     => 'utf8mb4',\n            'collation'   => 'utf8mb4_general_ci',\n        ],\n        'admin' => [ // admin为连接名\n            'driver'      => 'mysql',\n            'host'        => '127.0.0.1',\n            'port'        => 3306,\n            'database'    => '数据库',\n            'username'    => '用户名',\n            'password'    => '密码',\n            'charset'     => 'utf8mb4',\n            'collation'   => 'utf8mb4_general_ci',\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Redis Cluster Configuration\nDESCRIPTION: Configuration setup for Redis cluster implementation\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/db/redis.md#2025-04-12_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'clusters' => [\n        'default' => [\n            [\n                'host'     => 'localhost',\n                'password' => null,\n                'port'     => 6379,\n                'database' => 0,\n            ],\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Truncating a Table in Webman PHP\nDESCRIPTION: This snippet demonstrates how to truncate a database table, removing all records and resetting auto-increment IDs.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/hi/db/queries.md#2025-04-12_snippet_41\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')->truncate();\n```\n\n----------------------------------------\n\nTITLE: Configuring Phinx in Webman PHP Project\nDESCRIPTION: Example configuration for Phinx in a phinx.php file, including paths for migrations and seeds, and database connection settings.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/tr/db/migration.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nreturn [\n    \"paths\" => [\n        \"migrations\" => \"database/migrations\",\n        \"seeds\"      => \"database/seeds\"\n    ],\n    \"environments\" => [\n        \"default_migration_table\" => \"phinxlog\",\n        \"default_database\"        => \"dev\",\n        \"default_environment\"     => \"dev\",\n        \"dev\" => [\n            \"adapter\" => \"DB_CONNECTION\",\n            \"host\"    => \"DB_HOST\",\n            \"name\"    => \"DB_DATABASE\",\n            \"user\"    => \"DB_USERNAME\",\n            \"pass\"    => \"DB_PASSWORD\",\n            \"port\"    => \"DB_PORT\",\n            \"charset\" => \"utf8\"\n        ]\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Настройка подписки на события в Webman\nDESCRIPTION: Конфигурация подписки на события в файле `config/event.php`.  Определяет, какие классы и методы будут вызываться при возникновении определенных событий. События идентифицируются строковыми именами, а функции обработки событий указываются массивом.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/components/event.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nreturn [\n    'user.register' => [\n        [app\\event\\User::class, 'register'],\n        // ...другие функции обработки событий...\n    ],\n    'user.logout' => [\n        [app\\event\\User::class, 'logout'],\n        // ...другие функции обработки событий...\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Initializing Payment SDK with Configuration\nDESCRIPTION: This code snippet demonstrates how to initialize the Yansongda/Pay SDK using the configuration retrieved from the `config/payment.php` file.  It uses the `Config` facade to retrieve the configuration and then passes it to the `Pay::config()` method.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/components/payment.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// 获取配置文件 config/payment.php\n$config = Config::get('payment');\nPay::config($config);\n```\n\n----------------------------------------\n\nTITLE: Abrufen von Ergebnissen in Blöcken mit dem Query Builder in PHP\nDESCRIPTION: Diese Methode zeigt, wie man große Datensätze in kleineren Blöcken abruft und verarbeitet, um Speicherprobleme zu vermeiden.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/de/db/queries.md#2025-04-12_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')->orderBy('id')->chunkById(100, function ($users) {\n    foreach ($users as $user) {\n        //\n    }\n});\n\nDb::table('users')->orderBy('id')->chunkById(100, function ($users) {\n    // Verarbeitung der Datensätze...\n\n    return false;\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing Timestamp Column Names in Eloquent\nDESCRIPTION: Shows how to customize the names of timestamp columns by defining CREATED_AT and UPDATED_AT constants in an Eloquent model.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/jp/db/model.md#2025-04-12_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nclass User extends Model\n{\n    const CREATED_AT = 'creation_date';\n    const UPDATED_AT = 'last_update';\n}\n```\n\n----------------------------------------\n\nTITLE: Installing webman/captcha Component via Composer\nDESCRIPTION: Command to install the webman/captcha component using Composer package manager.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/components/captcha.md#2025-04-12_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require webman/captcha\n```\n\n----------------------------------------\n\nTITLE: Installing webman-permission using Composer\nDESCRIPTION: This command uses Composer to install the `tinywan/webman-permission` package. This package provides Casbin integration for the webman PHP framework, enabling access control functionalities.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/casbin.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n\"composer require tinywan/webman-permission\"\n```\n\n----------------------------------------\n\nTITLE: Directory Structure for Casbin Implementation\nDESCRIPTION: Shows the recommended file structure for Casbin integration including configuration and database files.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/components/casbin.md#2025-04-12_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n.\n├── config                        Configuration directory\n│   ├── casbin-restful-model.conf Configuration file for the permission model used\n│   ├── casbin.php                Casbin configuration\n......\n├── database                      Database files\n│   ├── migrations                Migration files\n│   │   └── 20210218074218_create_rule_table.php\n......\n```\n\n----------------------------------------\n\nTITLE: Displaying Paginator in Twig Template\nDESCRIPTION: This code snippet demonstrates how to render the Paginator object in a Twig template.  It uses the `autoescape false` tag to prevent escaping of the HTML generated by the paginator.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/fr/components/paginator.md#2025-04-12_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<html>\n<head>\n  <!-- Prise en charge intégrée du style de pagination Bootstrap -->\n  <link rel=\"stylesheet\" href=\"//maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css\">\n</head>\n<body>\n\n{% autoescape false %}\n{{paginator}}\n{% endautoescape %}\n\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Defining a Sample Service Class in PHP\nDESCRIPTION: Example of a UserService class that will be targeted by an aspect.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/tr/aop.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\service;\n\nclass UserService\n{\n    public function first(): array\n    {\n        return ['id' => 1];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Task Process Implementation\nDESCRIPTION: Example implementation of a Task process class showing various crontab scheduling patterns including per-second, per-minute, and specific time schedules.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/components/crontab.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace process;\n\nuse Workerman\\Crontab\\Crontab;\n\nclass Task\n{\n    public function onWorkerStart()\n    {        \n        // Run every second\n        new Crontab('*/1 * * * * *', function(){\n            echo date('Y-m-d H:i:s').\"\\n\";\n        });\n        \n        // Run every 5 seconds\n        new Crontab('*/5 * * * * *', function(){\n            echo date('Y-m-d H:i:s').\"\\n\";\n        });\n        \n        // Run every minute\n        new Crontab('0 */1 * * * *', function(){\n            echo date('Y-m-d H:i:s').\"\\n\";\n        });\n        \n        // Run every 5 minutes\n        new Crontab('0 */5 * * * *', function(){\n            echo date('Y-m-d H:i:s').\"\\n\";\n        });\n        \n        // Run on the first second of every minute\n        new Crontab('1 * * * * *', function(){\n            echo date('Y-m-d H:i:s').\"\\n\";\n        });\n      \n        // Run at 7:50am every day\n        new Crontab('50 7 * * *', function(){\n            echo date('Y-m-d H:i:s').\"\\n\";\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Nested Configuration\nDESCRIPTION: Retrieves nested configuration values using dot notation for accessing array elements.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/config.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nconfig('file.key1.key2');\n```\n\n----------------------------------------\n\nTITLE: Starting Packaged Webman Binary on Linux\nDESCRIPTION: Commands to start the packaged Webman binary on a Linux server, with options for foreground and background execution.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/others/bin.md#2025-04-12_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n./webman.bin start\n```\n\nLANGUAGE: sh\nCODE:\n```\n./webman.bin start -d\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Queue in PHP\nDESCRIPTION: Default configuration file for Redis queue, specifying host, authentication, database, and retry settings.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/tr/queue/redis.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nreturn [\n    'default' => [\n        'host' => 'redis://127.0.0.1:6379',\n        'options' => [\n            'auth' => '',         // Password, optional parameter\n            'db' => 0,            // Database\n            'max_attempts'  => 5, // Number of retry attempts when consumption fails\n            'retry_seconds' => 5, // Retry interval in seconds\n        ]\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Alternative directory structure for multiple applications\nDESCRIPTION: This snippet illustrates an alternative directory structure, where controller, model and view directories are placed at the root level of the `app` directory, and `api` and `admin` are located inside `app` directory.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/multiapp.md#2025-04-12_snippet_1\n\nLANGUAGE: tree\nCODE:\n```\n\"app\n├── controller\n├── model\n├── view\n│\n├── api\n│   ├── controller\n│   └── model\n└── admin\n    ├── controller\n    ├── model\n    └── view\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Process to Start with Webman\nDESCRIPTION: Configuration in config/process.php to start the Task process with Webman.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/components/crontab.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    ....other configurations, omitted here....\n\n    'task'  => [\n        'handler'  => process\\Task::class\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Creating Controller in PHP to Test AOP Functionality\nDESCRIPTION: PHP controller (IndexController) demonstrating the use of the intercepted UserService class.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/de/aop.md#2025-04-12_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse app\\service\\UserService;\nuse support\\Request;\n\nclass IndexController\n{\n    public function json(Request $request)\n    {\n        return json(['code' => 0, 'msg' => 'ok', 'data' => (new UserService())->first()]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Route Parameters in Middleware PHP\nDESCRIPTION: This snippet shows how to access route parameters within a middleware. It first checks if a route object exists in the request, and then retrieves the parameter using the `param()` method. This allows middleware to dynamically adjust its behavior based on route-specific data.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-hk/middleware.md#2025-04-12_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n\"<?php\nnamespace app\\middleware;\n\nuse Webman\\MiddlewareInterface;\nuse Webman\\Http\\Response;\nuse Webman\\Http\\Request;\n\nclass Hello implements MiddlewareInterface\n{\n    public function process(Request $request, callable $handler) : Response\n    {\n        // 默認路由 $request->route 為null，所以需要判斷 $request->route 是否為空\n        if ($route = $request->route) {\n            $value = $route->param('some_key');\n            var_export($value);\n        }\n        return $handler($request);\n    }\n}\"\n```\n\n----------------------------------------\n\nTITLE: Initialize Error Code Generation in start.php\nDESCRIPTION: Code to initialize automatic error code generation in debug mode during application startup.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/components/generate_error_code.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// 放在 Config::load(config_path(), ['route', 'container']); 后面\n\n// 生成错误码，仅APP_DEBUG模式下生成\nif (config(\"app.debug\")) {\n    $errorCodeConfig = config('error_code');\n    (new \\teamones\\responseCodeMsg\\Generate($errorCodeConfig))->run();\n}\n```\n\n----------------------------------------\n\nTITLE: Creating CAPTCHA Test HTML Template\nDESCRIPTION: Bu HTML şablonu, CAPTCHA görüntüsünü ve giriş alanını içeren basit bir form oluşturur. Form, CAPTCHA doğrulama için /login/check endpoint'ine POST isteği gönderir.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/tr/components/captcha.md#2025-04-12_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!doctype html>\n<html>\n<head>\n    <meta charset=\"utf-8\">\n    <title>CAPTCHA Test</title>  \n</head>\n<body>\n    <form method=\"post\" action=\"/login/check\">\n       <img src=\"/login/captcha\" /><br>\n        <input type=\"text\" name=\"captcha\" />\n        <input type=\"submit\" value=\"Gönder\" />\n    </form>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Configuring Casbin Basic Model for webman-permission\nDESCRIPTION: Content for the Casbin basic model configuration file, defining request, policy, role, and matcher rules.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/tr/casbin.md#2025-04-12_snippet_2\n\nLANGUAGE: conf\nCODE:\n```\n[request_definition]\nr = sub, obj, act\n\n[policy_definition]\np = sub, obj, act\n\n[role_definition]\ng = _, _\n\n[policy_effect]\ne = some(where (p.eft == allow))\n\n[matchers]\nm = g(r.sub, p.sub) && r.obj == p.obj && r.act == p.act\n```\n\n----------------------------------------\n\nTITLE: Actualización de webman\nDESCRIPTION: Este snippet muestra el comando para actualizar webman a la versión 1.5.  Se utiliza el gestor de paquetes composer para actualizar los paquetes del framework y la consola, seguido de la ejecución del comando install de webman. Es crucial realizar una copia de seguridad antes de ejecutar este comando.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/es/upgrade/1-5.md#2025-04-12_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n\"composer require workerman/webman-framework ^1.5 -W && composer require webman/console ^1.2.12 && php webman install\"\n```\n\n----------------------------------------\n\nTITLE: Integration der Fehlercode-Generierung in start.php für PHP\nDESCRIPTION: Dieser Code wird in './start.php' eingefügt, um die automatische Fehlercode-Generierung im Debug-Modus zu aktivieren.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/de/components/generate_error_code.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// Nach Config::load(config_path(), ['route', 'container']) einfügen\n\n// Fehlercode generieren, nur im APP_DEBUG-Modus generieren\nif (config(\"app.debug\")) {\n    $errorCodeConfig = config('error_code');\n    (new \\teamones\\responseCodeMsg\\Generate($errorCodeConfig))->run();\n}\n```\n\n----------------------------------------\n\nTITLE: Reloading Webman Configuration\nDESCRIPTION: Command to reload Webman after code changes or configuration updates\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/pt/attention.md#2025-04-12_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nphp start.php reload\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Connection in Webman PHP\nDESCRIPTION: This snippet shows how to configure database connections in Webman PHP. It sets up a MySQL connection with various options including host, port, credentials, and PDO attributes.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/tr/db/tutorial.md#2025-04-12_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nreturn [\n    // Varsayılan veritabanı\n    'default' => 'mysql',\n\n    // Çeşitli veritabanı yapılandırmaları\n    'connections' => [\n        'mysql' => [\n            'driver'      => 'mysql',\n            'host'        => '127.0.0.1',\n            'port'        => 3306,\n            'database'    => 'test',\n            'username'    => 'root',\n            'password'    => '',\n            'unix_socket' => '',\n            'charset'     => 'utf8',\n            'collation'   => 'utf8_unicode_ci',\n            'prefix'      => '',\n            'strict'      => true,\n            'engine'      => null,\n            'options' => [\n                \\PDO::ATTR_TIMEOUT => 3\n            ]\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Stress Testing with ab (Keep-Alive Enabled)\nDESCRIPTION: This shell command uses the 'ab' (ApacheBench) tool to perform a stress test with 100,000 requests and a concurrency of 200, with HTTP keep-alive enabled. The '-n' flag specifies the number of requests, '-c' specifies the concurrency level, and '-k' enables keep-alive. The target URL is 'http://127.0.0.1:8787/'.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/others/benchmarks.md#2025-04-12_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# 100,000 requests, 200 concurrency, enable keep-alive\nab -n 100000 -c 200 -k http://127.0.0.1:8787/\n```\n\n----------------------------------------\n\nTITLE: Configuring Nginx Reverse Proxy for Webman PHP\nDESCRIPTION: This Nginx configuration sets up a reverse proxy for a Webman PHP application. It defines an upstream server group and a server block with location rules to proxy requests to Webman. The configuration handles static files and forwards dynamic requests to the Webman application.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/others/nginx-proxy.md#2025-04-12_snippet_0\n\nLANGUAGE: nginx\nCODE:\n```\nupstream webman {\n    server 127.0.0.1:8787;\n    keepalive 10240;\n}\n\nserver {\n  server_name 站點域名;\n  listen 80;\n  access_log off;\n  root /your/webman/public;\n\n  location ^~ / {\n      proxy_set_header X-Real-IP $remote_addr;\n      proxy_set_header Host $http_host;\n      proxy_set_header X-Forwarded-Proto $scheme;\n      proxy_http_version 1.1;\n      proxy_set_header Connection \"\";\n      if (!-f $request_filename){\n          proxy_pass http://webman;\n      }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Nginx Proxy for Webman PHP Application\nDESCRIPTION: This Nginx configuration sets up a proxy for a Webman PHP application. It defines an upstream server, handles static files, and forwards dynamic requests to the Webman application. The configuration includes settings for proper header forwarding and connection handling.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/tr/others/nginx-proxy.md#2025-04-12_snippet_0\n\nLANGUAGE: nginx\nCODE:\n```\nupstream webman {\n    server 127.0.0.1:8787;\n    keepalive 10240;\n}\n\nserver {\n  server_name site_domain;\n  listen 80;\n  access_log off;\n  root /your/webman/public;\n\n  location ^~ / {\n      proxy_set_header X-Real-IP $remote_addr;\n      proxy_set_header Host $http_host;\n      proxy_set_header X-Forwarded-Proto $scheme;\n      proxy_http_version 1.1;\n      proxy_set_header Connection \"\";\n      if (!-f $request_filename){\n          proxy_pass http://webman;\n      }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Protokollierung in einem webman Applikations-Plugin\nDESCRIPTION: Demonstriert die Verwendung von Protokollierung in einem Plugin und im Hauptprojekt.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/de/plugin/app.md#2025-04-12_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse support\\Log;\nLog::channel('plugin.admin.default')->info('test');\n\n// Verwendung der Hauptprojekt-Protokollkonfiguration\nLog::info('Log-Eintrag');\n// Angenommen, das Hauptprojekt hat eine Test-Protokollkonfiguration\nLog::channel('test')->info('Log-Eintrag');\n```\n\n----------------------------------------\n\nTITLE: Refreshing Eloquent Model Instance\nDESCRIPTION: Demonstrates how to refresh an Eloquent model instance with fresh data from the database using the fresh() and refresh() methods.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/jp/db/model.md#2025-04-12_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n$user = app\\model\\User::where('name', 'tom')->first();\n\n$fresh_user = $user->fresh();\n\n$user->name = 'jerry';\n$user = $user->fresh();\n$user->name; // \"tom\"\n```\n\n----------------------------------------\n\nTITLE: Redis Pipeline Commands in Webman\nDESCRIPTION: Example of using Redis pipeline to execute multiple commands in a single operation, which improves performance for batch operations.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/db/redis.md#2025-04-12_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nRedis::pipeline(function ($pipe) {\n    for ($i = 0; $i < 1000; $i++) {\n        $pipe->set(\"key:$i\", $i);\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating .env file for environment variables\nDESCRIPTION: Example of a .env file containing environment-specific configuration variables.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/components/env.md#2025-04-12_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\nDB_HOST = 127.0.0.1\nDB_PORT = 3306\nDB_NAME = test\nDB_USER = foo\nDB_PASSWORD = 123456\n```\n\n----------------------------------------\n\nTITLE: Get Raw POST Body - Webman PHP\nDESCRIPTION: Retrieves the raw POST body content, which is useful for handling requests with content types other than `application/x-www-form-urlencoded`. It is equivalent to `file_get_contents(\"php://input\");` in `php-fpm`.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/th/request.md#2025-04-12_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$post = $request->rawBody();\n```\n\n----------------------------------------\n\nTITLE: Starten von webman auf Windows-Systemen\nDESCRIPTION: Methoden zum Starten von webman auf Windows-Systemen, einschließlich der Verwendung einer Batch-Datei oder eines PHP-Befehls.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/de/attention.md#2025-04-12_snippet_1\n\nLANGUAGE: batch\nCODE:\n```\nwindows.bat\n```\n\nLANGUAGE: bash\nCODE:\n```\nphp windows.php\n```\n\n----------------------------------------\n\nTITLE: Redis Interface Methods\nDESCRIPTION: List of available Redis interface methods and their usage\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/db/redis.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nRedis::append($key, $value)\nRedis::bitCount($key)\nRedis::decr($key, $value)\nRedis::decrBy($key, $value)\nRedis::get($key)\nRedis::getBit($key, $offset)\nRedis::getRange($key, $start, $end)\nRedis::getSet($key, $value)\nRedis::incr($key, $value)\nRedis::incrBy($key, $value)\nRedis::incrByFloat($key, $value)\nRedis::mGet(array $keys)\nRedis::getMultiple(array $keys)\nRedis::mSet($pairs)\nRedis::mSetNx($pairs)\nRedis::set($key, $value, $expireResolution = null, $expireTTL = null, $flag = null)\nRedis::setBit($key, $offset, $value)\nRedis::setEx($key, $ttl, $value)\nRedis::pSetEx($key, $ttl, $value)\nRedis::setNx($key, $value)\nRedis::setRange($key, $offset, $value)\nRedis::strLen($key)\nRedis::del(...$keys)\nRedis::exists(...$keys)\nRedis::expire($key, $ttl)\nRedis::expireAt($key, $timestamp)\nRedis::select($dbIndex)\n```\n\n----------------------------------------\n\nTITLE: Incrementing Values with Additional Updates in PHP\nDESCRIPTION: Demonstrates how to increment a value while simultaneously updating other fields in the same query.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/tr/db/queries.md#2025-04-12_snippet_20\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')->increment('votes', 1, ['name' => 'John']);\n```\n\n----------------------------------------\n\nTITLE: Defining Default Attribute Values in Eloquent Model in PHP\nDESCRIPTION: This snippet demonstrates how to define default values for model attributes using the `$attributes` property.  This ensures that certain attributes have a default value if not explicitly set during model creation.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/es/db/model.md#2025-04-12_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass User extends Model\n{\n    /**\n     * Valores predeterminados del modelo\n     * @var array\n     */\n    protected $attributes = [\n        'delayed' => false,\n    ];\n}\n\n```\n\n----------------------------------------\n\nTITLE: Install PHP and Composer using Bash\nDESCRIPTION: This command uses a bash script to quickly install PHP and Composer, supporting PHP versions 8.0 to 8.3. It fetches the installation script from a remote URL and executes it with superuser privileges.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/install.md#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -sO https://www.workerman.net/install-php-and-composer && sudo bash install-php-and-composer\n```\n\n----------------------------------------\n\nTITLE: Deleting Context Data in Webman PHP\nDESCRIPTION: This snippet illustrates how to remove context data using the `Context::delete()` method. It takes a string `$name` as the key to identify and delete the corresponding context data.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-hk/coroutine/context.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n```php\nContext::delete(string $name);\n```\n```\n\n----------------------------------------\n\nTITLE: Setting Context Data in Webman PHP\nDESCRIPTION: This snippet shows how to set context data using the `Context::set()` method. It takes a string `$name` as the key and a mixed `$value` as the data to be stored in the context.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-hk/coroutine/context.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n```php\nContext::set(string $name, $mixed $value);\n```\n```\n\n----------------------------------------\n\nTITLE: Returning XML Response\nDESCRIPTION: This snippet demonstrates how to return an XML response using the `xml()` helper function. It includes the XML data inline within the controller.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/response.md#2025-04-12_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\n\nclass FooController\n{\n    public function hello(Request $request)\n    {\n        $xml = <<<XML\n               <?xml version='1.0' standalone='yes'?>\n               <values>\n                   <truevalue>1</truevalue>\n                   <falsevalue>0</falsevalue>\n               </values>\n               XML;\n        return xml($xml);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Event Subscriber Class in PHP\nDESCRIPTION: Example of implementing an event subscriber class 'LoggerSubscriber' that subscribes to the LogErrorWriteEvent.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/event.md#2025-04-12_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nnamespace extend\\event\\subscriber;\n\nuse extend\\event\\LogErrorWriteEvent;\nuse Symfony\\Component\\EventDispatcher\\EventSubscriberInterface;\n\nclass LoggerSubscriber implements EventSubscriberInterface\n{\n    /**\n     * @desc: method description\n     * @return array|string[]\n     */\n    public static function getSubscribedEvents()\n    {\n        return [\n            LogErrorWriteEvent::NAME => 'onLogErrorWrite',\n        ];\n    }\n\n    /**\n     * @desc: Trigger an event\n     * @param LogErrorWriteEvent $event\n     */\n    public function onLogErrorWrite(LogErrorWriteEvent $event)\n    {\n        // Some specific business logic\n        var_dump($event->handle());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Payment Configuration File in Webman PHP\nDESCRIPTION: Example of creating a custom configuration file for payment settings.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/config.md#2025-04-12_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\nreturn [\n    'key' => '...',\n    'secret' => '...'\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Queue in Webman PHP\nDESCRIPTION: Configuration file for Redis queue settings, including host, authentication, database, and retry options.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/queue/redis.md#2025-04-12_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nreturn [\n    'default' => [\n        'host' => 'redis://127.0.0.1:6379',\n        'options' => [\n            'auth' => '',         // Password, optional\n            'db' => 0,            // Database\n            'max_attempts'  => 5, // Number of retry attempts after consumption failure\n            'retry_seconds' => 5, // Retry interval in seconds\n        ]\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Running Webman on Windows\nDESCRIPTION: Provides startup scripts for running Webman on Windows platforms. Uses batch file or PHP script to initialize the development environment. Recommended for quick local development setup.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/install.md#2025-04-12_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nwindows.bat\nphp windows.php\n```\n\n----------------------------------------\n\nTITLE: Nginx WSS Proxy Configuration\nDESCRIPTION: Nginx configuration for enabling WebSocket Secure (WSS) proxy when using HTTPS protocol\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/plugin/push.md#2025-04-12_snippet_3\n\nLANGUAGE: nginx\nCODE:\n```\nserver {\n    location /app/<app_key>\n    {\n        proxy_pass http://127.0.0.1:3131;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"Upgrade\";\n        proxy_set_header X-Real-IP $remote_addr;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Returning File Stream in PHP\nDESCRIPTION: This snippet shows how to return a file stream using the file() method of the response object.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/response.md#2025-04-12_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\n\nclass FooController\n{\n    public function hello(Request $request)\n    {\n        return response()->file(public_path() . '/favicon.ico');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Adapter for Casbin\nDESCRIPTION: Configuration example showing how to use a custom database adapter with Casbin instead of the default model-based adapter. This allows integration with different ORM systems.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-hk/components/casbin.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'default' => [\n        'model' => [\n            'config_type' => 'file',\n            'config_file_path' => config_path() . '/casbin-restful-model.conf', // 权限规则模型配置文件\n            'config_text' => '',\n        ],\n        'adapter' => [\n            'type' => 'adapter', // 这里类型配置成适配器模式\n            'class' => \\app\\adapter\\DatabaseAdapter::class,\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Redis Configuration for Webman Plugin\nDESCRIPTION: This PHP code configures Redis connections within a Webman plugin's configuration file.  It defines multiple connections, each with its own host, password, port, and database.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-hk/plugin/app.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'default' => [\n        'host' => '127.0.0.1',\n        'password' => null,\n        'port' => 6379,\n        'database' => 0,\n    ],\n    'cache' => [\n        'host' => '127.0.0.1',\n        'password' => null,\n        'port' => 6379,\n        'database' => 1,\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Invio di messaggi asincroni alla coda Redis in Webman PHP\nDESCRIPTION: Esempio di invio di messaggi asincroni alla coda Redis utilizzando la classe Client del componente webman/redis-queue.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/queue/redis.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\nuse Webman\\RedisQueue\\Client;\n\nclass Index\n{\n    public function queue(Request $request)\n    {\n        // Nome della coda\n        $queue = 'send-mail';\n        // Dati, è possibile passare direttamente un array senza la necessità di serializzarlo\n        $data = ['to' => 'tom@gmail.com', 'content' => 'hello'];\n        // Invio del messaggio\n        Client::send($queue, $data);\n        // Invio di un messaggio con ritardo, che verrà elaborato dopo 60 secondi\n        Client::send($queue, $data, 60);\n\n        return response('test della coda Redis');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Get All Cookies - Webman PHP\nDESCRIPTION: Retrieves all cookies as an array. If there are no cookies, an empty array is returned.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/th/request.md#2025-04-12_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n$request->cookie();\n```\n\n----------------------------------------\n\nTITLE: Configuring Exception Handler in Webman PHP\nDESCRIPTION: Basic configuration for exception handling class in config/exception.php file.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/exception.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    // 这里配置异常处理类\n    '' => support\\exception\\Handler::class,\n];\n```\n\n----------------------------------------\n\nTITLE: Loading Specific Files with composer.json\nDESCRIPTION: This snippet illustrates how to load specific PHP files using the `autoload.files` section in composer.json.  The `files` array lists the paths to the files that should be loaded.  After updating `composer.json`, you must run `composer dumpautoload` and restart webman for the changes to be applied. Note that files loaded this way are loaded before webman starts.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-hk/others/autoload.md#2025-04-12_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n\"files\": [\n    \"./support/helpers.php\",\n    \"./app/helpers.php\"\n]\n```\n\n----------------------------------------\n\nTITLE: Switching Between Multiple Database Connections\nDESCRIPTION: Demonstrates how to switch between different database connections using Db::connection() method, allowing flexible database interaction\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/db/config.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// 使用預設資料庫，等同於 Db::connection('mysql')->table('users')->where('name', 'John')->first();\n$users = Db::table('users')->where('name', 'John')->first(); \n// 使用mysql2\n$users = Db::connection('mysql2')->table('users')->where('name', 'John')->first();\n// 使用pgsql\n$users = Db::connection('pgsql')->table('users')->where('name', 'John')->first();\n```\n\n----------------------------------------\n\nTITLE: Installing webman-permission via Composer\nDESCRIPTION: Command to install the webman-permission library using Composer. Requires PHP 7.1+ and ThinkORM.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/tr/casbin.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ncomposer require tinywan/webman-permission\n```\n\n----------------------------------------\n\nTITLE: Configuring MongoDB Connection in Webman\nDESCRIPTION: Configuration snippet for adding MongoDB connection details to the database.php config file in Webman.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/tr/db/mongo.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n\n    'default' => 'mysql',\n\n    'connections' => [\n\n         ...diğer yapılandırmalar burada bulunur...\n\n        'mongodb' => [\n            'driver'   => 'mongodb',\n            'host'     => '127.0.0.1',\n            'port'     =>  27017,\n            'database' => 'test',\n            'username' => null,\n            'password' => null,\n            'options' => [\n                // burada Mongo Driver Manager'a daha fazla ayar gönderebilirsiniz\n                // kullanabileceğiniz tam parametre listesi için https://www.php.net/manual/en/mongodb-driver-manager.construct.php adresine bakın\n\n                'appname' => 'homestead'\n            ],\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Complex Controller Directory Structure Example in PHP\nDESCRIPTION: Demonstrates the new support for complex controller directory structures in Webman 1.4, showing nested directories and multiple version folders.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/upgrade/1-4.md#2025-04-12_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\napp\napp\n├── admin\n│   └── v1\n│       └── v2\n│           └── v3\n│               └── controller\n│                   └── Index.php\n└── controller\n    ├── v1\n    │   └── Index.php\n    └── v2\n        └── v3\n            └── Index.php\n```\n\n----------------------------------------\n\nTITLE: Configuring 404 Route Handler\nDESCRIPTION: PHP route configuration that handles 404 errors by returning either JSON response for AJAX requests or HTML template for page requests\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/jp/others/custom-error-page.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse support\\Request;\nuse Webman\\Route;\n\nRoute::fallback(function(Request $request){\n    // ajaxリクエスト時にjsonを返す\n    if ($request->expectsJson()) {\n        return json(['code' => 404, 'msg' => '404 not found']);\n    }\n    // ページリクエスト時には404.htmlテンプレートを返す\n    return view('404', ['error' => 'some error'])->withStatus(404);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Controller in Webman PHP Plugin\nDESCRIPTION: Example of a controller class implementation in a Webman PHP plugin showing basic response methods. The controller follows PSR4 namespace conventions and includes index and hello methods that return simple responses.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/app/controller.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace plugin\\foo\\app\\controller;\n\nuse support\\Request;\n\nclass FooController\n{\n    public function index(Request $request)\n    {\n        return response('hello index');\n    }\n    \n    public function hello(Request $request)\n    {\n        return response('hello webman');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Context Usage for Request State\nDESCRIPTION: Shows how to use support\\Context to store request-specific data safely in a coroutine environment, avoiding global variable pollution\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-hk/upgrade/1-5.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace app\\controller;\n\nuse support\\Request;\nuse support\\Context;\nuse Workerman\\Timer;\n\nclass TestController\n{\n    public function index(Request $request)\n    {\n        Context::set('name', $request->get('name'));\n        Timer::sleep(5);\n        return Context::get('name');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Rows from Database Table in webman-php\nDESCRIPTION: Controller method to fetch all users from the database and pass them to a view. Uses the Db facade's table method and get() to retrieve all records.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/db/queries.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\nuse support\\Db;\n\nclass UserController\n{\n    public function all(Request $request)\n    {\n        $users = Db::table('users')->get();\n        return view('user/all', ['users' => $users]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Push diretto tra client con JavaScript\nDESCRIPTION: Esempio di codice JavaScript per inviare messaggi direttamente tra client utilizzando canali privati\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/plugin/push.md#2025-04-12_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar user_channel = connection.subscribe('private-user-1');\nuser_channel.on('client-message', function (data) {\n    // \n});\nuser_channel.trigger('client-message', {form_uid:2, content:\"ciao\"});\n```\n\n----------------------------------------\n\nTITLE: Update or Insert Record Conditionally\nDESCRIPTION: Attempts to update an existing record or insert a new one if no matching record exists\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/db/queries.md#2025-04-12_snippet_36\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')\n    ->updateOrInsert(\n        ['email' => 'john@example.com', 'name' => 'John'],\n        ['votes' => '2']\n    );\n```\n\n----------------------------------------\n\nTITLE: Get Request Host - Webman PHP\nDESCRIPTION: Retrieves the request host.  If the request is made to a non-standard port (80 or 443), the host will include the port number (e.g., `example.com:8080`).\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/th/request.md#2025-04-12_snippet_23\n\nLANGUAGE: php\nCODE:\n```\n$request->host();\n```\n\n----------------------------------------\n\nTITLE: Installing JasonGrimes Pagination Component\nDESCRIPTION: This command installs the `jasongrimes/php-paginator` package using Composer. This package is used for generating pagination links in Webman templates since Laravel's `$paginator->links()` method is not supported.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/fr/db/paginator.md#2025-04-12_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require \"jasongrimes/paginator:~1.0\"\n```\n\n----------------------------------------\n\nTITLE: Directory Structure for Automatic Routing\nDESCRIPTION: Example of supported controller directory structure in Webman 1.4 showing nested version directories\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/jp/upgrade/1-4.md#2025-04-12_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\napp\n├── admin\n│   └── v1\n│       └── v2\n│           └── v3\n│               └── controller\n│                   └── Index.php\n└── controller\n    ├── v1\n    │   └── Index.php\n    └── v2\n        └── v3\n            └── Index.php\n```\n\n----------------------------------------\n\nTITLE: Installing Illuminate/Redis in Webman\nDESCRIPTION: This command installs the `illuminate/redis` and `illuminate/events` packages using Composer. The `-W` flag ensures that the dependencies are updated. A restart is required after installation for the changes to take effect.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/db/redis.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ncomposer require -W illuminate/redis illuminate/events\n```\n\n----------------------------------------\n\nTITLE: Vue.js Push Integration Example\nDESCRIPTION: Implementation of webman/push in a Vue.js component with WebSocket connection and channel subscriptions\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/plugin/push.md#2025-04-12_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nimport { onMounted } from 'vue';\nimport { Push } from '../utils/push-vue';\n\nonMounted(() => {\n  var connection = new Push({\n    url: 'ws://127.0.0.1:3131',\n    app_key: '<ключ_приложения>',\n    auth: '/plugin/webman/push/auth'\n  });\n\n  var uid = 1;\n  var user_channel = connection.subscribe('user-' + uid);\n\n  user_channel.on('message', function (data) {\n    console.log(data);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Implementazione paginazione con ORM ThinkPHP in PHP\nDESCRIPTION: Esempio di come utilizzare la paginazione di ThinkPHP ORM in un controller WebMan. Mostra come ottenere risultati paginati dal database e passarli alla vista.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/db/paginator.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\npublic function index(Request $request)\n{\n    $per_page = 10;\n    $users = Db::table('user')->paginate(['list_rows' => $per_page, 'page' => $request->get('page', 1), 'path' => $request->path()]);\n    return view('index/index', ['users' => $users]);\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Laravel Pagination Implementation in PHP\nDESCRIPTION: Example of implementing basic pagination using Laravel's illuminate/database in a controller method. Shows how to paginate database results with a specified number of items per page.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/de/db/paginator.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\npublic function index(Request $request)\n{\n    $per_page = 10;\n    $users = Db::table('user')->paginate($per_page);\n    return view('index/index', ['users' => $users]);\n}\n```\n\n----------------------------------------\n\nTITLE: Model Creation and Storage Controller\nDESCRIPTION: Example of a controller method that creates and saves a new User model instance with request data.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/pt/db/model.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace app\\controller;\n\nuse app\\model\\User;\nuse support\\Request;\nuse support\\Response;\n\nclass FooController\n{\n    /**\n     * Adiciona um novo registro à tabela de usuários\n     *\n     * @param  Request  $request\n     * @return Response\n     */\n    public function store(Request $request)\n    {\n        // Validar a requisição\n\n        $user = new User;\n\n        $user->name = $request->get('name');\n\n        $user->save();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Delayed Response with Timer in PHP\nDESCRIPTION: This snippet demonstrates how to use Timer::sleep() for a non-blocking delay in a Webman controller. It waits for 1.5 seconds before returning the client's IP address.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/tr/coroutine/fiber.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace app\\controller;\n\nuse support\\Request;\nuse Workerman\\Timer;\n\nclass TestController\n{\n    public function index(Request $request)\n    {\n        // Sleep for 1.5 seconds\n        Timer::sleep(1.5);\n        return $request->getRemoteIp();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabilitare il percorso predefinito del plugin in PHP\nDESCRIPTION: Questo snippet mostra come disabilitare il percorso predefinito per un plugin specifico utilizzando il metodo Route::disableDefaultRoute().\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/app/route.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nRoute::disableDefaultRoute('foo');\n```\n\n----------------------------------------\n\nTITLE: Event Subscriber Configuration\nDESCRIPTION: Configuration for registering event subscribers in the system\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/event.md#2025-04-12_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    // Event subscribers\n    'subscriber' => [\n        \\extend\\event\\subscriber\\LoggerSubscriber::class,\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Installing webman/push Plugin with Composer\nDESCRIPTION: Command to install the webman/push plugin using Composer package manager.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/de/plugin/push.md#2025-04-12_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncomposer require webman/push\n```\n\n----------------------------------------\n\nTITLE: Upgrading Webman to Version 1.5 using Composer\nDESCRIPTION: This command upgrades Webman framework to version 1.5 and installs the required console package.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/upgrade/1-5.md#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require workerman/webman-framework ^1.5 -W && composer require webman/console ^1.2.12 && php webman install\n```\n\n----------------------------------------\n\nTITLE: Creating PHPUnit Configuration Test Case in PHP\nDESCRIPTION: Unit test class to validate application configuration settings, checking debug mode and default timezone properties\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/fr/components/unitest.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse PHPUnit\\Framework\\TestCase;\n\nclass TestConfig extends TestCase\n{\n    public function testAppConfig()\n    {\n        $config = config('app');\n        self::assertIsArray($config);\n        self::assertArrayHasKey('debug', $config);\n        self::assertIsBool($config['debug']);\n        self::assertArrayHasKey('default_timezone', $config);\n        self::assertIsString($config['default_timezone']);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Pagination in PHP Template\nDESCRIPTION: This snippet demonstrates how to render pagination in a PHP template using the Jason Grimes Paginator. It includes the necessary Bootstrap CSS for styling.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/jp/db/paginator.md#2025-04-12_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<html>\n<head>\n  <!-- Bootstrapページネーションスタイルをネイティブサポート -->\n  <link rel=\"stylesheet\" href=\"//maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css\">\n</head>\n<body>\n\n<?= $paginator;?>\n\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: ThinkPHP Template Example\nDESCRIPTION: This HTML code is a basic ThinkPHP template. It displays the value of the `$name` variable passed from the controller using ThinkPHP's template syntax `{$name}`.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-hk/view.md#2025-04-12_snippet_16\n\nLANGUAGE: html\nCODE:\n```\n\"<!doctype html>\n<html>\n<head>\n    <meta charset=\\\"utf-8\\\">\n    <title>webman</title>\n</head>\n<body>\nhello {$name}\n</body>\n</html>\"\n```\n\n----------------------------------------\n\nTITLE: Using Context for Safe Request Data Storage\nDESCRIPTION: Shows the correct way to store request-specific data using context in coroutine environment, preventing data contamination.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/pt/coroutine/fiber.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace app\\controller;\n\nuse support\\Request;\nuse support\\Context;\nuse Workerman\\Timer;\n\nclass TestController\n{\n    public function index(Request $request)\n    {\n        Context::set('name', $request->get('name'));\n        Timer::sleep(5);\n        return Context::get('name');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: ติดตั้ง Redis และ Symfony Cache (PHP 7.x)\nDESCRIPTION: คำสั่ง Composer นี้ติดตั้ง illuminate/redis และ symfony/cache สำหรับ PHP 7.x ใช้เพื่อเชื่อมต่อกับ Redis และใช้ฟังก์ชันแคช\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/th/db/cache.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ncomposer require -W illuminate/redis ^8.2.0 symfony/cache ^5.2\n```\n\n----------------------------------------\n\nTITLE: Database Query Debugging in PHP\nDESCRIPTION: Offers debugging methods to output query results or SQL statements for development and troubleshooting. Supports both stopping and continuing script execution during debugging.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/db/queries.md#2025-04-12_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')->where('votes', '>', 100)->dd();\nDb::table('users')->where('votes', '>', 100)->dump();\n```\n\n----------------------------------------\n\nTITLE: Get Server Port - Webman PHP\nDESCRIPTION: Retrieves the server's port.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/th/request.md#2025-04-12_snippet_37\n\nLANGUAGE: php\nCODE:\n```\n$request->getLocalPort();\n```\n\n----------------------------------------\n\nTITLE: Non-Blocking HTTP Client Request\nDESCRIPTION: Demonstrates using Workerman's HTTP client to make asynchronous, non-blocking HTTP requests in a coroutine environment, improving application performance\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-hk/upgrade/1-5.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace app\\controller;\n\nuse support\\Request;\nuse Workerman\\Http\\Client;\n\nclass TestController\n{\n    public function index(Request $request)\n    {\n        static $client;\n        $client = $client ?: new Client();\n        $response = $client->get('http://example.com'); // Sync method for async request\n        return $response->getBody()->getContents();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating and Downloading Excel file with PhpSpreadsheet in Webman\nDESCRIPTION: This code snippet demonstrates how to create an Excel file with PhpSpreadsheet in a Webman controller, save it to the public directory, and then provide it as a downloadable response. It requires the PhpSpreadsheet library to be installed and the `public_path()` function to be available in the Webman environment.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/es/components/excel.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse PhpOffice\\PhpSpreadsheet\\Spreadsheet;\nuse PhpOffice\\PhpSpreadsheet\\Writer\\Xlsx;\n\nclass ExcelController\n{\n    public function index($request)\n    {\n        $spreadsheet = new Spreadsheet();\n        $sheet = $spreadsheet->getActiveSheet();\n        $sheet->setCellValue('A1', '¡Hola, mundo!');\n\n        $writer = new Xlsx($spreadsheet);\n        $file_path = public_path().'/hello_world.xlsx';\n        // Guardar archivo en la carpeta public\n        $writer->save($file_path);\n        // Descargar archivo\n        return response()->download($file_path, 'filename.xlsx');\n    }\n\n}\n\n```\n\n----------------------------------------\n\nTITLE: Using Plugin-Specific Database Connections in Webman PHP\nDESCRIPTION: This snippet shows how to use plugin-specific database connections in Webman PHP. It demonstrates querying tables from different connections within the plugin.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/tr/app/database.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse support\\Db;\nDb::connection('plugin.foo.mysql')->table('user')->first();\nDb::connection('plugin.foo.admin')->table('admin')->first();\n```\n\n----------------------------------------\n\nTITLE: Creating HTML Form for Image Upload\nDESCRIPTION: HTML code for a form that allows users to upload an image file. The form submits to the '/user/img' endpoint using POST method.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/bn/components/image.md#2025-04-12_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<form method=\"post\" action=\"/user/img\" enctype=\"multipart/form-data\">\n    <input type=\"file\" name=\"file\">\n    <input type=\"submit\" value=\"জমা দিন\">\n</form>\n```\n\n----------------------------------------\n\nTITLE: Non-Blocking HTTP Client Request in Webman\nDESCRIPTION: Shows how to send non-blocking HTTP requests using Workerman's HTTP client with synchronous method\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/th/coroutine/fiber.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace app\\controller;\n\nuse support\\Request;\nuse Workerman\\Http\\Client;\n\nclass TestController\n{\n    public function index(Request $request)\n    {\n        static $client;\n        $client = $client ?: new Client();\n        $response = $client->get('http://example.com');\n        return $response->getBody()->getContents();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating ZIP Archive for Webman PHP Plugin\nDESCRIPTION: This command creates a zip archive of the 'foo' plugin directory. It should be executed from the {main project}/plugin/ directory after completing all the preparatory steps for packaging.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/tr/app/pack.md#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nzip -r foo.zip foo\n```\n\n----------------------------------------\n\nTITLE: RabbitMQ Stomp Protocol Activation Command\nDESCRIPTION: CLI command to enable Stomp protocol in RabbitMQ, which is not enabled by default. Sets default Stomp port to 61613.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/th/queue/stomp.md#2025-04-12_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-plugins enable rabbitmq_stomp\n```\n\n----------------------------------------\n\nTITLE: Controlador de ejemplo con vista PHP nativa en Webman\nDESCRIPTION: Este snippet muestra un controlador de ejemplo que utiliza la sintaxis de plantilla PHP nativa en Webman. Pasa la variable 'name' a la vista 'user/hello'.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/es/view.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\n\nclass UserController\n{\n    public function hello(Request $request)\n    {\n        return view('user/hello', ['name' => 'webman']);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Redis-Zugriff in einem webman Applikations-Plugin\nDESCRIPTION: Zeigt, wie auf Redis-Verbindungen eines Plugins und des Hauptprojekts zugegriffen werden kann.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/de/plugin/app.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse support\\Redis;\nRedis::connection('plugin.cms.default')->get('key');\nRedis::connection('plugin.cms.cache')->get('key');\n\n// Verwendung der Hauptprojekt-Redis-Konfiguration\nRedis::get('key');\n// Angenommen, das Hauptprojekt hat auch eine Cache-Verbindung konfiguriert\nRedis::connection('cache')->get('key');\n```\n\n----------------------------------------\n\nTITLE: Redis Queue Consumer Implementation\nDESCRIPTION: Consumer class for processing messages from a specific queue with failure handling\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/queue/redis.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nnamespace app\\queue\\redis;\n\nuse Webman\\RedisQueue\\Consumer;\n\nclass MyMailSend implements Consumer {\n    public $queue = 'send-mail';\n    public $connection = 'default';\n\n    public function consume($data) {\n        var_export($data);\n    }\n\n    public function onConsumeFailure(\\Throwable $e, $package) {\n        echo \"Consume failure\\n\";\n        echo $e->getMessage() . \"\\n\";\n        var_export($package);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Update Locks in Database Queries in PHP\nDESCRIPTION: Demonstrates how to implement an update lock (pessimistic locking) on a select query, which prevents other shared locks from selecting or modifying the rows.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/tr/db/queries.md#2025-04-12_snippet_24\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')->where('votes', '>', 100)->lockForUpdate()->get();\n```\n\n----------------------------------------\n\nTITLE: Safe Local Variable Usage\nDESCRIPTION: Example of coroutine-safe implementation using local variables instead of static/global variables.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/upgrade/1-5.md#2025-04-12_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace app\\controller;\n\nuse support\\Request;\nuse support\\Context;\nuse Workerman\\Timer;\n\nclass TestController\n{\n    public function index(Request $request)\n    {\n        $name = $request->get('name');\n        Timer::sleep(5);\n        return $name;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Redis Connections in Webman Plugins\nDESCRIPTION: Shows how to use Redis connections specific to a plugin and how to use the main project's Redis connections within a plugin.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/plugin/app.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse support\\Redis;\nRedis::connection('plugin.cms.default')->get('key');\nRedis::connection('plugin.cms.cache')->get('key');\n\n// Using main project's Redis\nRedis::get('key');\n// Assuming main project has a 'cache' connection\nRedis::connection('cache')->get('key');\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Redis Connections in Webman\nDESCRIPTION: Example configuration for multiple Redis connections in Webman's config/redis.php file.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/jp/db/redis.md#2025-04-12_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\nreturn [\n    'default' => [\n        'host'     => '127.0.0.1',\n        'password' => null,\n        'port'     => 6379,\n        'database' => 0,\n    ],\n\n    'cache' => [\n        'host'     => '127.0.0.1',\n        'password' => null,\n        'port'     => 6379,\n        'database' => 1,\n    ],\n\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring Blade Template Engine in PHP\nDESCRIPTION: This code snippet demonstrates how to set up Webman to use the Blade template engine by specifying the handler class in the configuration file.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/de/view.md#2025-04-12_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse support\\view\\Blade;\n\nreturn [\n    'handler' => Blade::class\n];\n```\n\n----------------------------------------\n\nTITLE: Installation of workerman/validation\nDESCRIPTION: Command to install workerman/validation via Composer.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/pt/components/validation.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\ncomposer require workerman/validation\n```\n\n----------------------------------------\n\nTITLE: Esempio di controller con validazione usando workerman/validation in PHP\nDESCRIPTION: Definizione di un controller IndexController che utilizza workerman/validation per validare i dati POST di una richiesta. Mostra come definire regole di validazione e gestire i dati validati.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/components/validation.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\nuse Respect\\Validation\\Validator as v;\nuse support\\Db;\n\nclass IndexController\n{\n    public function index(Request $request)\n    {\n        $data = v::input($request->post(), [\n            'nickname' => v::length(1, 64)->setName('Nick'),\n            'username' => v::alnum()->length(5, 64)->setName('Nome utente'),\n            'password' => v::length(5, 64)->setName('Password')\n        ]);\n        Db::table('user')->insert($data);\n        return json(['code' => 0, 'msg' => 'ok']);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring and Using Custom Value Injection\nDESCRIPTION: These PHP code snippets demonstrate how to configure custom value injection in config/dependence.php and use it in a class with @Inject annotations.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/tr/di.md#2025-04-12_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'smtp_host' => '192.168.1.11',\n    'smtp_port' => 25\n];\n```\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\service;\n\nuse DI\\Annotation\\Inject;\n\nclass Mailer\n{\n    /**\n     * @Inject(\"smtp_host\")\n     */\n    private $smtpHost;\n\n    /**\n     * @Inject(\"smtp_port\")\n     */\n    private $smtpPort;\n\n    public function mail($email, $content)\n    {\n        // Mail gönderme kodu burada olacak\n        echo \"{$this->smtpHost}:{$this->smtpPort}\\n\"; // 192.168.1.11:25 çıktısını verecek\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Primary Key Type Configuration\nDESCRIPTION: Setting the primary key type in an Eloquent model.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/de/db/model.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nclass User extends Model\n{\n    /**\n     * \"Typ\" des automatisch inkrementierten IDs\n     *\n     * @var string\n     */\n    protected $keyType = 'string';\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Twig with Custom Extensions\nDESCRIPTION: This PHP code demonstrates how to extend Twig by adding custom extensions, filters, and functions. The `view.extension` configuration allows you to modify the Twig environment.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-hk/view.md#2025-04-12_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n\"<?php\nuse support\\view\\Twig;\nreturn [\n    'handler' => Twig::class,\n    'extension' => function (Twig\\Environment $twig) {\n        $twig->addExtension(new your\\namespace\\YourExtension()); // 增加Extension\n        $twig->addFilter(new Twig\\TwigFilter('rot13', 'str_rot13')); // 增加Filter\n        $twig->addFunction(new Twig\\TwigFunction('function_name', function () {})); // 增加函數\n    }\n];\n?>\"\n```\n\n----------------------------------------\n\nTITLE: Using OR Where Clauses in webman-php\nDESCRIPTION: Examples of using orWhere to add OR conditions to queries. These examples demonstrate basic OR conditions and more complex nested conditions using closures.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/db/queries.md#2025-04-12_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')\n                    ->where('votes', '>', 100)\n                    ->orWhere('name', 'John')\n                    ->get();\n```\n\n----------------------------------------\n\nTITLE: Multiple Redis Connections Configuration\nDESCRIPTION: Configuration example for multiple Redis connections with different databases\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/db/redis.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'default' => [\n        'host'     => '127.0.0.1',\n        'password' => null,\n        'port'     => 6379,\n        'database' => 0,\n    ],\n\n    'cache' => [\n        'host'     => '127.0.0.1',\n        'password' => null,\n        'port'     => 6379,\n        'database' => 1,\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Logging in Webman Plugins\nDESCRIPTION: Demonstrates how to use logging functionality specific to a plugin and how to use the main project's logging within a plugin.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/plugin/app.md#2025-04-12_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse support\\Log;\nLog::channel('plugin.admin.default')->info('test');\n\n// Using main project's logging\nLog::info('日志内容');\n// Assuming main project has a 'test' log channel\nLog::channel('test')->info('日志内容');\n```\n\n----------------------------------------\n\nTITLE: MongoDB Model Example in Webman\nDESCRIPTION: Example model class extending MongoModel with custom date serialization\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/db/mongo.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\model;\n\nuse DateTimeInterface;\nuse support\\MongoModel as Model;\n\nclass Test extends Model\n{\n    protected $connection = 'mongodb';\n\n    protected $table = 'test';\n\n    public $timestamps = true;\n\n    /**\n     * @param DateTimeInterface $date\n     * @return string\n     */\n    protected function serializeDate(DateTimeInterface $date): string\n    {\n        return $date->format('Y-m-d H:i:s');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Redis-Konfiguration in einem webman Applikations-Plugin\nDESCRIPTION: Beispiel für die Konfiguration von Redis-Verbindungen in einem Applikations-Plugin.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/de/plugin/app.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'default' => [\n        'host' => '127.0.0.1',\n        'password' => null,\n        'port' => 6379,\n        'database' => 0,\n    ],\n    'cache' => [\n        'host' => '127.0.0.1',\n        'password' => null,\n        'port' => 6379,\n        'database' => 1,\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Using Main Project Redis Connections\nDESCRIPTION: Example showing how to use Redis connections configured in the main project, including default and named connections.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/app/redis.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse support\\Redis;\nRedis::get('key');\n// Assuming the main project also configured a cache connection\nRedis::connection('cache')->get('key');\n```\n\n----------------------------------------\n\nTITLE: Starting Webman in Debug Mode on Linux\nDESCRIPTION: Command to start Webman in debug mode with automatic file monitoring and terminal output. Used primarily during development.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/attention.md#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nphp start.php start\n```\n\n----------------------------------------\n\nTITLE: Complex Plural Rules with Number Ranges\nDESCRIPTION: Advanced example of plural forms with specific number ranges to handle various quantity expressions.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/components/translation.md#2025-04-12_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    // ...\n    'apple_count' => '{0} There are no apples|{1} There is one apple|]1,19] There are %count% apples|[20,Inf[ There are many apples',\n];\n```\n\n----------------------------------------\n\nTITLE: Custom Business Exception Implementation in PHP\nDESCRIPTION: Creating a custom business exception class with flexible JSON and non-JSON response handling\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/th/exception.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nclass MyBusinessException extends BusinessException\n{\n    public function render(Request $request): ?Response\n    {\n        if ($request->expectsJson()) {\n            return json(['code' => $this->getCode() ?: 500, 'message' => $this->getMessage()]);\n        }\n        return new Response(200, [], $this->getMessage());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Empty ErrorCode Class Template\nDESCRIPTION: Base template for the ErrorCode class that will be automatically populated with error codes.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/components/generate_error_code.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * 自动生成的文件 ,请不要手动修改.\n * @Author:$Id$\n */\nnamespace support;\n\nclass ErrorCode\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Global Authorization Middleware in Webman\nDESCRIPTION: Configuration to register the Authorization middleware globally for all routes in a Webman application.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-hk/casbin.md#2025-04-12_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    // 全局中間件\n    '' => [\n        // ... 這裡省略其他中間件\n        app\\middleware\\AuthorizationMiddleware::class,\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Creating Controller\nDESCRIPTION: Controller implementation that uses the AOP-enabled service\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/aop.md#2025-04-12_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse app\\service\\UserService;\nuse support\\Request;\n\nclass IndexController\n{\n    public function json(Request $request)\n    {\n        return json(['code' => 0, 'msg' => 'ok', 'data' => (new UserService())->first()]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Alipay SDK via Composer in PHP\nDESCRIPTION: Command to install the Yansongda Pay package version 3.0.0 or higher using Composer.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/de/components/payment.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ncomposer require yansongda/pay ^3.0.0\n```\n\n----------------------------------------\n\nTITLE: Using Between Conditions in webman-php\nDESCRIPTION: Using whereBetween to filter records where a field value is between two values. This example retrieves users with votes between 1 and 100.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/db/queries.md#2025-04-12_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')\n           ->whereBetween('votes', [1, 100])\n           ->get();\n```\n\n----------------------------------------\n\nTITLE: Customizing CAPTCHA Parameters in PHP\nDESCRIPTION: Bu kod parçası, CAPTCHA oluşturma işlemini özelleştirmek için kullanılır. CAPTCHA uzunluğu, kullanılacak karakterler ve diğer parametreler burada ayarlanabilir.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/tr/components/captcha.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n    /**\n     * CAPTCHA görüntüsü çıkart\n     */\n    public function captcha(Request $request)\n    {\n        // CAPTCHA oluşturucuyu başlat\n        $builder = new CaptchaBuilder;\n        // CAPTCHA uzunluğu\n        $length = 4;\n        // Hangi karakterleri içersin\n        $chars = '0123456789abcefghijklmnopqrstuvwxyz';\n        $builder = new PhraseBuilder($length, $chars);\n        $captcha = new CaptchaBuilder(null, $builder);\n        // CAPTCHA oluştur\n        $builder->build();\n        // CAPTCHA değerini oturuma kaydet\n        $request->session()->set('captcha', strtolower($builder->getPhrase()));\n        // CAPTCHA görüntüsünün ikili verilerini al\n        $img_content = $builder->get();\n        // CAPTCHA ikili verilerini çıkart\n        return response($img_content, 200, ['Content-Type' => 'image/jpeg']);\n    }\n```\n\n----------------------------------------\n\nTITLE: Setting Headers Using Header Methods in Webman PHP\nDESCRIPTION: Demonstrates how to set headers using the `header()` and `withHeaders()` methods of the `support\\Response` object.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/pt/response.md#2025-04-12_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\n\nclass FooController\n{\n    public function hello(Request $request)\n    {\n        return response('hello webman')\n        ->header('Content-Type', 'application/json')\n        ->withHeaders([\n            'X-Header-One' => 'Valor do Cabeçalho 1',\n            'X-Header-Dois' => 'Valor do Cabeçalho 2',\n        ]);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Building Webman Binary Package - Specific PHP Version\nDESCRIPTION: Command to package the Webman project into a binary file using a specific PHP version (example with PHP 8.1).\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/others/bin.md#2025-04-12_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nphp webman build:bin 8.1\n```\n\n----------------------------------------\n\nTITLE: Reusing External Database Configuration in Webman PHP Plugin Model\nDESCRIPTION: Demonstrates how to reuse an existing database configuration from another plugin (webman-admin) in a Webman PHP plugin's base model class.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/app/database.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace plugin\\foo\\app\\model;\n\nuse DateTimeInterface;\nuse support\\Model;\n\nclass Base extends Model\n{\n    /**\n     * @var string\n     */\n    protected $connection = 'plugin.admin.mysql';\n\n}\n```\n\n----------------------------------------\n\nTITLE: Configurazione avanzata di Twig con opzioni\nDESCRIPTION: Esempio di configurazione di Twig con opzioni aggiuntive come debug e charset.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/view.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'handler' => Twig::class,\n    'options' => [\n        'debug' => false,\n        'charset' => 'utf-8'\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring Swoole Coroutines in Webman\nDESCRIPTION: Configuration example for enabling Swoole coroutines in the server configuration file. Requires Swoole extension version 5.0 or higher.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/pt/coroutine/fiber.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n'event_loop' => \\Workerman\\Events\\Swoole::class,\n```\n\n----------------------------------------\n\nTITLE: Blade Component View\nDESCRIPTION: This PHP code represents a Blade component view named `alert.blade.php`.  It displays a simple message within a div.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-hk/view.md#2025-04-12_snippet_21\n\nLANGUAGE: php\nCODE:\n```\n\"<div>\n    <b style=\\\"color: red\\\">hello blade component</b>\n</div>\n\"\n```\n\n----------------------------------------\n\nTITLE: Checking Record Existence in WebMan PHP Query Builder\nDESCRIPTION: Shows how to check if records exist or don't exist based on certain conditions.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/jp/db/queries.md#2025-04-12_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nreturn Db::table('orders')->where('finalized', 1)->exists();\nreturn Db::table('orders')->where('finalized', 1)->doesntExist();\n```\n\n----------------------------------------\n\nTITLE: Upgrading Webman to Version 1.4 using Composer\nDESCRIPTION: Command to upgrade Webman framework, console, and install new components for version 1.4.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/upgrade/1-4.md#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require workerman/webman-framework ^1.4.7 && composer require webman/console ^1.2.12 && php webman install\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom Database Connection for Eloquent Model\nDESCRIPTION: Shows how to specify a custom database connection for an Eloquent model by setting the $connection property.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/db/model.md#2025-04-12_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nclass User extends Model\n{\n    protected $connection = 'nome-connessione';\n}\n```\n\n----------------------------------------\n\nTITLE: Get Header with Default Value - Webman PHP\nDESCRIPTION: Retrieves a header with a default value if the header is missing. If the 'host' header is not found, the method returns 'localhost'.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/th/request.md#2025-04-12_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$request->header('host', 'localhost');\n```\n\n----------------------------------------\n\nTITLE: Resetting Composer Package Repository\nDESCRIPTION: Command to remove the Alibaba Cloud composer proxy configuration and restore the official Composer package source.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/others/upgrade.md#2025-04-12_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncomposer config -g --unset repos.packagist\n```\n\n----------------------------------------\n\nTITLE: Casbin Usage Examples\nDESCRIPTION: Demonstrates common usage patterns including importing, initialization, and API calls for permission management.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/components/casbin.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n# Import\nuse teamones\\casbin\\Enforcer;\n```\n\nLANGUAGE: php\nCODE:\n```\n# 1. Use the default configuration\nEnforcer::addPermissionForUser('user1', '/user', 'read');\n\n# 2. Use a custom rbac configuration\nEnforcer::instance('rbac')->addPermissionForUser('user1', '/user', 'read');\n```\n\nLANGUAGE: php\nCODE:\n```\n# Add a permission for a user\nEnforcer::addPermissionForUser('user1', '/user', 'read');\n\n# Delete a permission for a user\nEnforcer::deletePermissionForUser('user1', '/user', 'read');\n\n# Get all permissions for a user\nEnforcer::getPermissionsForUser('user1');\n\n# Add a role for a user\nEnforcer::addRoleForUser('user1', 'role1');\n\n# Add a permission for a role\nEnforcer::addPermissionForUser('role1', '/user', 'edit');\n\n# Get all roles\nEnforcer::getAllRoles();\n\n# Get all roles for a user\nEnforcer::getRolesForUser('user1');\n\n# Get users for a role\nEnforcer::getUsersForRole('role1');\n\n# Check if a user belongs to a role\nEnforcer::hasRoleForUser('user1', 'role1');\n\n# Delete a role for a user\nEnforcer::deleteRoleForUser('user1', 'role1');\n\n# Delete all roles for a user\nEnforcer::deleteRolesForUser('user1');\n\n# Delete a role\nEnforcer::deleteRole('role1');\n\n# Delete a permission\nEnforcer::deletePermission('/user', 'read');\n\n# Delete all permissions for a user or role\nEnforcer::deletePermissionsForUser('user1');\nEnforcer::deletePermissionsForUser('role1');\n\n# Check permissions and return true or false\nEnforcer::enforce(\"user1\", \"/user\", \"edit\");\n```\n\n----------------------------------------\n\nTITLE: Setting Context Data in Webman PHP\nDESCRIPTION: Interface for storing data in the request context. Takes a name string and mixed value parameter.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/coroutine/context.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nContext::set(string $name, $mixed $value);\n```\n\n----------------------------------------\n\nTITLE: Phar Package Runtime Commands\nDESCRIPTION: Commands for starting, stopping, and managing a Webman phar package runtime\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/others/phar.md#2025-04-12_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nphp webman.phar start\nphp webman.phar start -d\nphp webman.phar stop\nphp webman.phar status\nphp webman.phar connections\nphp webman.phar restart\nphp webman.phar restart -d\n```\n\n----------------------------------------\n\nTITLE: Datenbankzugriff in einem webman Applikations-Plugin\nDESCRIPTION: Demonstriert, wie auf Datenbankverbindungen eines Plugins und des Hauptprojekts zugegriffen werden kann.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/de/plugin/app.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse support\\Db;\nDb::connection('plugin.cms.mysql')->table('user')->first();\nDb::connection('plugin.cms.admin')->table('admin')->first();\n\n// Verwendung der Hauptprojektdatenbank\nDb::table('user')->first();\n// Angenommen, das Hauptprojekt hat auch eine Admin-Verbindung konfiguriert\nDb::connection('admin')->table('admin')->first();\n```\n\n----------------------------------------\n\nTITLE: Neustart von webman nach prozessbezogenen Änderungen\nDESCRIPTION: Befehl zum Neustart von webman nach Änderungen an prozessbezogenen Konfigurationen oder Installation neuer Composer-Pakete.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/de/attention.md#2025-04-12_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nphp start.php restart\n```\n\n----------------------------------------\n\nTITLE: Event Configuration File\nDESCRIPTION: This PHP code represents the configuration file for events in webman. It defines the structure for event listeners and subscribers arrays which is located in `config/event.php`.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/fr/event.md#2025-04-12_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nreturn [\n    // Écouteurs d'événements\n    'listener'    => [],\n\n    // Abonnés aux événements\n    'subscriber' => [],\n];\n```\n\n----------------------------------------\n\nTITLE: Basic Business Exception Example in PHP\nDESCRIPTION: Demonstrates throwing a business exception with custom error code and message in a controller method\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/th/exception.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\npublic function chackInpout($input)\n{\n    if (!isset($input['token'])) {\n        throw new BusinessException('ผิดพลาดในพารามิเตอร์', 3000);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: ThinkPHP View Configuration\nDESCRIPTION: Configuration for ThinkPHP templating engine in Webman, with custom options and view setup\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/view.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse support\\view\\ThinkPHP;\n\nreturn [\n    'handler' => ThinkPHP::class,\n    'options' => [\n        'view_suffix' => 'html',\n        'tpl_begin' => '{',\n        'tpl_end' => '}'\n    ]\n];\n```\n\nLANGUAGE: html\nCODE:\n```\n<!doctype html>\n<html>\n<head>\n    <meta charset=\"utf-8\">\n    <title>webman</title>\n</head>\n<body>\nhello {$name}\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Comparing Eloquent Models\nDESCRIPTION: Shows how to use the is method to check if two model instances are the same by comparing their primary keys, tables, and database connections.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/tr/db/model.md#2025-04-12_snippet_34\n\nLANGUAGE: php\nCODE:\n```\nif ($post->is($anotherPost)) {\n    //\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Query Constraints to Eloquent Model\nDESCRIPTION: Shows how to add query constraints like where clauses, ordering, and limits when retrieving data with Eloquent models.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/ru/db/model.md#2025-04-12_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n$users = app\\model\\User::where('name', 'like', '%tom')\n               ->orderBy('uid', 'desc')\n               ->limit(10)\n               ->get();\n```\n\n----------------------------------------\n\nTITLE: View Configuration - Deprecated Usage\nDESCRIPTION: Shows the old deprecated way of configuring view file suffix in Webman 1.4\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/de/upgrade/1-4.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse support\\view\\Raw;\nreturn [\n    'handler' => Raw::class,\n    'view_suffix' => '.php'\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring Event System\nDESCRIPTION: Basic event configuration file setup defining listener and subscriber arrays\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/event.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    // Event listeners\n    'listener'    => [],\n\n    // Event subscribers\n    'subscriber' => [],\n];\n```\n\n----------------------------------------\n\nTITLE: New Session Handler Namespace\nDESCRIPTION: Shows the new namespace structure for session handlers in Webman 1.4\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/de/upgrade/1-4.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Webman\\Session\\FileSessionHandler;  \nuse Webman\\Session\\RedisSessionHandler;  \nuse Webman\\Session\\RedisClusterSessionHandler;\n```\n\n----------------------------------------\n\nTITLE: Process Configuration\nDESCRIPTION: Configuration for the task process in config/process.php to enable the crontab scheduler.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/components/crontab.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    // Other configurations...\n  \n    'task'  => [\n        'handler'  => process\\Task::class\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Adding Query Constraints to Eloquent Model\nDESCRIPTION: Shows how to add query constraints and retrieve results using an Eloquent model.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/tr/db/model.md#2025-04-12_snippet_11\n\nLANGUAGE: PHP\nCODE:\n```\n$users = app\\model\\User::where('name', 'like', '%tom')\n               ->orderBy('uid', 'desc')\n               ->limit(10)\n               ->get();\n```\n\n----------------------------------------\n\nTITLE: Implementing Controller Methods and Properties\nDESCRIPTION: Demonstration of proper method and property naming using camelCase, including PHPDoc comments for documentation.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/app/standard.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace plugin\\foo\\app\\controller;\n\nclass ArticleController\n{\n    /**\n     * Methods that do not require authentication\n     * @var array\n     */\n    protected $noNeedAuth = ['getComments'];\n    \n    /**\n     * Get comments\n     * @param Request $request\n     * @return Response\n     * @throws BusinessException\n     */\n    public function getComments(Request $request): Response\n    {\n        \n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Global Middleware Configuration\nDESCRIPTION: Configuration example showing how to register middleware globally in Webman application.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/pt/middleware.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    '' => [\n        app\\middleware\\AuthCheckTest::class,\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Accessing Plugin Database in Webman\nDESCRIPTION: This PHP code demonstrates how to access database connections defined within a Webman plugin's configuration. It uses the `Db::connection()` method with the plugin's name and connection name to interact with the database.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-hk/plugin/app.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse support\\Db;\nDb::connection('plugin.cms.mysql')->table('user')->first();\nDb::connection('plugin.cms.admin')->table('admin')->first();\n```\n\n----------------------------------------\n\nTITLE: Controlador de ejemplo con ThinkPHP Template en Webman\nDESCRIPTION: Este snippet muestra un controlador de ejemplo que utiliza el motor de plantillas ThinkPHP en Webman. Pasa la variable 'name' a la vista 'user/hello'.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/es/view.md#2025-04-12_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\n\nclass UserController\n{\n    public function hello(Request $request)\n    {\n        return view('user/hello', ['name' => 'webman']);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Exception Handlers for Multiple Applications in Webman PHP\nDESCRIPTION: This snippet shows how to configure different exception handlers for various applications in a Webman PHP project. It demonstrates setting up specific handlers for 'shop' and 'api' applications.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/multiapp.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'shop' => support\\exception\\Handler::class,\n    'api' => support\\exception\\ApiHandler::class,\n];\n```\n\n----------------------------------------\n\nTITLE: Installing AOP Integration Package in PHP\nDESCRIPTION: Command to install the Hyperf AOP integration package via Composer.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/de/aop.md#2025-04-12_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require \"hyperf/aop-integration: ^1.1\"\n```\n\n----------------------------------------\n\nTITLE: Starting Webman PHP Server\nDESCRIPTION: Command to start the Webman PHP server using the start.php script. This initializes the server process.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/README.md#2025-04-12_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\nphp server/start.php start\n```\n\n----------------------------------------\n\nTITLE: Installing Webman Event Library via Composer\nDESCRIPTION: Command to install the webman-event package using Composer package manager\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/event.md#2025-04-12_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require tinywan/webman-event\n```\n\n----------------------------------------\n\nTITLE: Get HTTP Protocol Version - Webman PHP\nDESCRIPTION: Retrieves the HTTP protocol version (e.g., '1.1' or '1.0').\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/th/request.md#2025-04-12_snippet_31\n\nLANGUAGE: php\nCODE:\n```\n$request->protocolVersion();\n```\n\n----------------------------------------\n\nTITLE: Installing PHPUnit for PHP Unit Testing\nDESCRIPTION: Composer command to install PHPUnit as a development dependency for unit testing in a PHP project\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/components/unitest.md#2025-04-12_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require --dev phpunit\\/phpunit\n```\n\n----------------------------------------\n\nTITLE: Get Full Request URL - Webman PHP\nDESCRIPTION: Retrieves the full request URL, including the query parameters.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/th/request.md#2025-04-12_snippet_30\n\nLANGUAGE: php\nCODE:\n```\n$request->fullUrl();\n```\n\n----------------------------------------\n\nTITLE: Primary Key Configuration\nDESCRIPTION: Customizing the primary key configuration in an Eloquent model.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/de/db/model.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nclass User extends Model\n{\n    /**\n     * Neudefinition des Primärschlüssels, standardmäßig ist es \"id\"\n     *\n     * @var string\n     */\n    protected $primaryKey = 'uid';\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Specific Files with config/autoload.php\nDESCRIPTION: This code snippet shows how to load specific PHP files using the `config/autoload.php` configuration file. The 'files' array within the returned array specifies the paths to the files that should be included. Files loaded via this method are loaded after webman starts and support hot reloading.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-hk/others/autoload.md#2025-04-12_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nreturn [\n    'files' => [\n        base_path() . '/app/functions.php',\n        base_path() . '/support/Request.php', \n        base_path() . '/support/Response.php',\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: File Stream Response in Webman PHP\nDESCRIPTION: Shows how to send file streams and handle large file downloads with proper headers and memory management.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/response.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\n\nclass FooController\n{\n    public function hello(Request $request)\n    {\n        return response()->file(public_path() . '/favicon.ico');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Session Configuration File\nDESCRIPTION: Complete session configuration including file and Redis handlers, cookie settings and cleanup parameters\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/jp/session.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Webman\\Session\\FileSessionHandler;\nuse Webman\\Session\\RedisSessionHandler;\nuse Webman\\Session\\RedisClusterSessionHandler;\n\nreturn [\n    'handler' => FileSessionHandler::class,\n    'type'    => 'file',\n    'config' => [\n        'file' => [\n            'save_path' => runtime_path() . '/sessions',\n        ],\n        'redis' => [\n            'host'      => '127.0.0.1',\n            'port'      => 6379,\n            'auth'      => '',\n            'timeout'   => 2,\n            'database'  => '',\n            'prefix'    => 'redis_session_',\n        ],\n        'redis_cluster' => [\n            'host'    => ['127.0.0.1:7000', '127.0.0.1:7001', '127.0.0.1:7001'],\n            'timeout' => 2,\n            'auth'    => '',\n            'prefix'  => 'redis_session_',\n        ]\n    ],\n    'session_name' => 'PHPSID',\n    'auto_update_timestamp' => false,\n    'lifetime' => 7*24*60*60,\n    'cookie_lifetime' => 365*24*60*60,\n    'cookie_path' => '/',\n    'domain' => '',\n    'http_only' => true,\n    'secure' => false,\n    'same_site' => '',\n    'gc_probability' => [1, 1000],\n];\n```\n\n----------------------------------------\n\nTITLE: Generating ThinkORM Model via Command Line in Bash\nDESCRIPTION: Command to generate a ThinkORM model using the Webman console. This requires the webman/console package to be installed.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/de/db/thinkorm.md#2025-04-12_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nphp webman make:model table_name\n```\n\n----------------------------------------\n\nTITLE: Where Not Between Clause in Webman PHP\nDESCRIPTION: This snippet demonstrates how to use the whereNotBetween method to filter results outside a range.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/hi/db/queries.md#2025-04-12_snippet_23\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')\n                    ->whereNotBetween('votes', [1, 100])\n                    ->get();\n```\n\n----------------------------------------\n\nTITLE: Enabling Stomp Protocol in RabbitMQ\nDESCRIPTION: Shell command to enable the Stomp protocol in RabbitMQ message broker. The default Stomp port after enabling is 61613.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/jp/queue/stomp.md#2025-04-12_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nrabbitmq-plugins enable rabbitmq_stomp\n```\n\n----------------------------------------\n\nTITLE: Mesaj Tüketme - Stomp Consumer Uygulaması (PHP)\nDESCRIPTION: Bu sınıf, Stomp kuyruğundan mesajları tüketen bir Consumer örneğidir. Kuyruk adı, bağlantı ve onaylama ayarları tanımlanır. consume() metodu, gelen mesajları işler.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/tr/queue/stomp.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\queue\\stomp;\n\nuse Workerman\\Stomp\\AckResolver;\nuse Webman\\Stomp\\Consumer;\n\nclass MyMailSend implements Consumer\n{\n    // Kuyruk adı\n    public $queue = 'örnekler';\n\n    // Bağlantı adı, stomp.php dosyasındaki bağlantıya karşılık gelir\n    public $connection = 'varsayılan';\n\n    // Değer client ise, $ack_resolver->ack() çağrısının sunucuya başarıyla tüketildiğini bildirmesi gerekir\n    // Değer auto ise, $ack_resolver->ack() çağrısına gerek yoktur\n    public $ack = 'auto';\n\n    // Tüketme\n    public function consume($data, AckResolver $ack_resolver = null)\n    {\n        // Eğer veri bir dizi ise, kendiniz deserialize etmelisiniz\n        var_export(json_decode($data, true)); // Çıktı ['to' => 'tom@gmail.com', 'content' => 'hello']\n        // Sunucuya, başarıyla tüketildiğini bildir\n        $ack_resolver->ack(); // ack değeri auto ise bu çağrıyı atlayabilirsiniz\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: WhereIn Clause with Webman PHP\nDESCRIPTION: This code snippet demonstrates how to use the `whereIn()` clause in the Webman PHP framework's database query builder. It checks if the value of the 'id' column is present in the specified array [1, 2, 3].\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/fr/db/queries.md#2025-04-12_snippet_21\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')\n                    ->whereIn('id', [1, 2, 3])\n                    ->get();\n```\n\n----------------------------------------\n\nTITLE: Installing php-di and dependencies in webman\nDESCRIPTION: This command installs the necessary dependencies for using php-di in a webman project, including the PSR container, php-di itself, and Doctrine annotations.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-hk/di.md#2025-04-12_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n\"composer require psr/container ^1.1.1 php-di/php-di ^6 doctrine/annotations ^1.14\"\n```\n\n----------------------------------------\n\nTITLE: Installing Redis Dependencies for webman-php\nDESCRIPTION: Command to install the required Redis packages using Composer.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/de/db/redis.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ncomposer require -W illuminate/redis illuminate/events\n```\n\n----------------------------------------\n\nTITLE: Enabling STOMP Protocol in RabbitMQ\nDESCRIPTION: Command to enable STOMP protocol support in RabbitMQ server. After enabling, the server listens on port 61613 for STOMP connections.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/queue/stomp.md#2025-04-12_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nrabbitmq-plugins enable rabbitmq_stomp\n```\n\n----------------------------------------\n\nTITLE: Template HTML per paginazione con Bootstrap\nDESCRIPTION: Esempio di template HTML che include lo stile Bootstrap per la paginazione e renderizza il componente paginatore.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/db/paginator.md#2025-04-12_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<html>\n<head>\n  <!-- Supporto integrato per lo stile di paginazione Bootstrap -->\n  <link rel=\"stylesheet\" href=\"//maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css\">\n</head>\n<body>\n\n<?= $paginator;?>\n\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Initializing Empty ErrorCode Class\nDESCRIPTION: Creating an initial empty ErrorCode class file that will be automatically populated with generated error codes\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/es/components/generate_error_code.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n* Archivo generado, no modifique manualmente.\n* @Autores: $Id$\n*/\nnamespace support;\n\nclass ErrorCode\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Records in Webman PHP\nDESCRIPTION: This snippet shows how to delete records from a database table.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/hi/db/queries.md#2025-04-12_snippet_40\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')->delete();\n\nDb::table('users')->where('votes', '>', 100)->delete();\n```\n\n----------------------------------------\n\nTITLE: Displaying Pagination in Blade Template\nDESCRIPTION: This HTML code demonstrates how to display the pagination links in a Blade template using the `$paginator` variable passed from the controller. The `{!! $paginator !!}` syntax is used to render unescaped HTML, allowing the pagination links to be displayed correctly.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/fr/db/paginator.md#2025-04-12_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<html>\n<head>\n  <!-- Built-in support for Bootstrap pagination styles -->\n  <link rel=\"stylesheet\" href=\"//maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css\">\n</head>\n<body>\n\n{!! $paginator !!}\n\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Configuring Gzip Response for Apipost Compatibility\nDESCRIPTION: PHP code snippet demonstrating how to return a gzipped response with proper Content-Encoding header to resolve Apipost keep-alive issues\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/others/benchmarks.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\nclass IndexController\n{\n    public function index()\n    {\n        return response(gzencode('hello webman'))->withHeader('Content-Encoding', 'gzip');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Blade Template with Pagination\nDESCRIPTION: Blade template implementation showing how to render unescaped pagination controls.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/de/db/paginator.md#2025-04-12_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<html>\n<head>\n  <!-- Built-in support for Bootstrap pagination styles -->\n  <link rel=\"stylesheet\" href=\"//maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css\">\n</head>\n<body>\n\n{!! $paginator !!}\n\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Configuring Exclusion Pattern for Webman Console in PHP\nDESCRIPTION: Sets up the exclusion pattern in the Webman Console configuration to omit unnecessary directories and files during packaging, reducing the package size.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/fr/others/bin.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n'exclude_pattern'   => '#^(?!.*(composer.json|/.github/|/.idea/|/.git/|/.setting/|/runtime/|/vendor-bin/|/build/|vendor/webman/admin))(.*)$#'\n```\n\n----------------------------------------\n\nTITLE: Creating Target Service Class\nDESCRIPTION: Sample service class that will be targeted by AOP\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/aop.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\service;\n\nclass UserService\n{\n    public function first(): array\n    {\n        return ['id' => 1];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring PSR-0 Autoloading in Composer for Webman\nDESCRIPTION: This snippet shows how to configure Composer's autoload section to support PSR-0 compliant libraries in the 'extend' directory for Webman projects.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-tw/others/autoload.md#2025-04-12_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n\"psr-0\" : {\n    \"\": \"extend/\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Workerman Crontab\nDESCRIPTION: Composer command to install the workerman/crontab package.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/components/crontab.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\ncomposer require workerman/crontab\n```\n\n----------------------------------------\n\nTITLE: Logging Methods in Webman Log Facade\nDESCRIPTION: Lists all available logging methods with different severity levels supported by the Webman Log facade. Includes log, debug, info, notice, warning, error, critical, alert, and emergency methods.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-hk/log.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nLog::log($level, $message, array $context = [])\nLog::debug($message, array $context = [])\nLog::info($message, array $context = [])\nLog::notice($message, array $context = [])\nLog::warning($message, array $context = [])\nLog::error($message, array $context = [])\nLog::critical($message, array $context = [])\nLog::alert($message, array $context = [])\nLog::emergency($message, array $context = [])\n```\n\n----------------------------------------\n\nTITLE: Pagination Template for ThinkPHP\nDESCRIPTION: HTML template for rendering pagination with Bootstrap styling in ThinkPHP template engine\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/es/components/paginator.md#2025-04-12_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<html>\n<head>\n    <link rel=\"stylesheet\" href=\"//maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css\">\n</head>\n<body>\n\n<?=$paginator?>\n\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Controller Parameter Injection (Unsupported <= 1.4.6)\nDESCRIPTION: This code demonstrates controller parameter injection, which is NOT supported in webman versions less than or equal to 1.4.6.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-hk/di.md#2025-04-12_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n\"<?php\nnamespace app\\controller;\n\nuse support\\Request;\nuse app\\service\\Mailer;\n\nclass UserController\n{\n    // 1.4.6版本之前不支持控制器參數注入\n    public function register(Request $request, Mailer $mailer)\n    {\n        $mailer->mail('hello@webman.com', 'Hello and welcome!');\n        return response('ok');\n    }\n}\"\n```\n\n----------------------------------------\n\nTITLE: Registering Event Subscriber\nDESCRIPTION: Configuration to register the LoggerSubscriber in the event system\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/event.md#2025-04-12_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    // 事件订阅\n    'subscriber' => [\n        \\extend\\event\\subscriber\\LoggerSubscriber::class,\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Executing AB with Keep-Alive\nDESCRIPTION: This command-line instruction shows how to run the `ab` (ApacheBench) tool with keep-alive enabled.  The `-n` parameter specifies the total number of requests, `-c` sets the concurrency level, and `-k` enables HTTP keep-alive. Using keep-alive improves performance by reusing TCP connections.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/es/others/benchmarks.md#2025-04-12_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nab -n100000 -c200 -k http://127.0.0.1:8787/\n```\n\n----------------------------------------\n\nTITLE: Where Exists Clause in Webman PHP\nDESCRIPTION: This snippet shows how to use the whereExists method to add a subquery condition.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/hi/db/queries.md#2025-04-12_snippet_30\n\nLANGUAGE: php\nCODE:\n```\n// select * from users where exists ( select 1 from orders where orders.user_id = users.id )\n$users = Db::table('users')\n           ->whereExists(function ($query) {\n               $query->select(Db::raw(1))\n                     ->from('orders')\n                     ->whereRaw('orders.user_id = users.id');\n           })\n           ->get();\n```\n\n----------------------------------------\n\nTITLE: Business Exception Controller Example\nDESCRIPTION: Example controller demonstrating how to use BusinessException for handling parameter validation errors\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/pt/exception.md#2025-04-12_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\nuse support\\exception\\BusinessException;\n\nclass FooController\n{\n    public function index(Request $request)\n    {\n        $this->chackInpout($request->post());\n        return response('hello index');\n    }\n    \n    protected function chackInpout($input)\n    {\n        if (!isset($input['token'])) {\n            throw new BusinessException('Parameter error', 3000);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using ErrorCode in Service Class\nDESCRIPTION: Example showing how to use generated error codes in a service class for error handling.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/components/generate_error_code.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * 导航相关操作 service 类\n */\n\nnamespace app\\service;\n\nuse app\\model\\Demo as DemoModel;\n\n// 引入ErrorCode类文件\nuse support\\ErrorCode;\n\nclass Demo\n{\n    /**\n     * 添加\n     * @param $data\n     * @return array|mixed\n     * @throws \\exception\n     */\n    public function add($data): array\n    {\n        try {\n            $demo = new DemoModel();\n            foreach ($data as $key => $value) {\n                $demo->$key = $value;\n            }\n\n            $demo->save();\n\n            return $demo->getData();\n        } catch (\\Throwable $e) {\n            // 输出错误信息\n            throw_http_exception($e->getMessage(), ErrorCode::ModelAddOptionsError);\n        }\n        return [];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Webman Console Plugin\nDESCRIPTION: Command to install the webman/console plugin via Composer\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/plugin/console.md#2025-04-12_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncomposer require webman/console\n```\n\n----------------------------------------\n\nTITLE: Initializing LoginController with Captcha Generation\nDESCRIPTION: PHP controller for handling captcha image generation, storing captcha phrase in session, and rendering captcha image\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/fr/components/captcha.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\nuse Webman\\Captcha\\CaptchaBuilder;\n\nclass LoginController\n{\n    public function captcha(Request $request)\n    {\n        $builder = new CaptchaBuilder;\n        $builder->build();\n        $request->session()->set('captcha', strtolower($builder->getPhrase()));\n        $img_content = $builder->get();\n        return response($img_content, 200, ['Content-Type' => 'image/jpeg']);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Manual Instance Creation Example\nDESCRIPTION: Example showing how to manually create instances without dependency injection.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/di.md#2025-04-12_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$mailer = new Mailer;\n$user = new UserController($mailer);\n```\n\n----------------------------------------\n\nTITLE: Installing Webman Console Component with Composer\nDESCRIPTION: This snippet shows the command to install the webman/console component using Composer. It requires the specified versions of webman and webman-framework as dependencies.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/es/plugin/console.md#2025-04-12_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require webman/console\n```\n\n----------------------------------------\n\nTITLE: Installing Phinx via Composer\nDESCRIPTION: Command to install Phinx database migration tool using Composer package manager.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/zh-cn/db/migration.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ncomposer require robmorgan/phinx\n```\n\n----------------------------------------\n\nTITLE: Wildcard Event Listener Configuration\nDESCRIPTION: Configuration example for wildcard event listening that handles multiple events with a single listener.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/vi/components/event.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nreturn [\n    'user.*' => [\n        [app\\event\\User::class, 'deal']\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Creazione di un Controller per Ritorno di Stringa in PHP\nDESCRIPTION: Questo snippet mostra come creare un controller UserController che restituisce una stringa. Il metodo hello accetta un parametro 'name' dalla query GET e lo utilizza per costruire un messaggio di saluto.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/tutorial.md#2025-04-12_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace app\\controller;\n\nuse support\\Request;\n\nclass UserController\n{\n    public function hello(Request $request)\n    {\n        $default_name = 'webman';\n        // Ottenere il parametro name dalla richiesta get, se il parametro name non è presente, restituire $default_name\n        $name = $request->get('name', $default_name);\n        // Restituire una stringa al browser\n        return response('hello ' . $name);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Impostare un fallback 404 per un plugin specifico in PHP\nDESCRIPTION: Questo codice dimostra come impostare una funzione di fallback per gestire le richieste 404 per un plugin specifico, reindirizzando alla home page.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/it/app/route.md#2025-04-12_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nRoute::fallback(function(){\n    return redirect('/');\n}, 'foo');\n```\n\n----------------------------------------\n\nTITLE: Generated ErrorCode Class with Error Constants\nDESCRIPTION: Example of automatically generated ErrorCode class containing error code constants\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/en/components/generate_error_code.md#2025-04-12_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * Automatically generated file, please do not modify manually.\n * @Author:$Id$\n */\nnamespace support;\n\nclass ErrorCode\n{\n    const LoginNameOrPasswordError = -20110001;\n    const UserNotExist = -20110002;\n    const TokenNotExist = -20110003;\n    const InvalidToken = -20110004;\n    const ExpireToken = -20110005;\n    const WrongToken = -20110006;\n    const ClientIpNotEqual = -20110007;\n    const TokenRecordNotFound = -20110008;\n    const ModelAddUserError = -20110009;\n    const NoInfoToModify = -20110010;\n    const OnlyAdminPasswordCanBeModified = -20110011;\n    const AdminAccountCannotBeDeleted = -20110012;\n    const DbNotExist = -20110013;\n    const ModelAddOptionsError = -20110014;\n    const UnableToDeleteSystemConfig = -20110015;\n    const ConfigParamKeyRequired = -20110016;\n    const ExpiryCanNotGreaterThan7days = -20110017;\n    const GetPresignedPutObjectUrlError = -20110018;\n    const ObjectStorageConfigNotExist = -20110019;\n    const UpdateNavIndexSortError = -20110020;\n    const TagNameAttNotExist = -20110021;\n    const ModelUpdateOptionsError = -20110022;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Command Line Tool for Webman Binary Packaging\nDESCRIPTION: Composer command to install the Webman console tool required for binary packaging\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/es/others/bin.md#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require webman/console ^1.2.24\n```\n\n----------------------------------------\n\nTITLE: Abrufen einer einzelnen Spalte mit dem Query Builder in PHP\nDESCRIPTION: Diese Methode zeigt, wie man Werte aus einer einzelnen Spalte abruft, optional mit einem Schlüssel als Index.\nSOURCE: https://github.com/webman-php/webman-manual/blob/master/resource/doc/de/db/queries.md#2025-04-12_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$titles = Db::table('roles')->pluck('title');\n\n$roles = Db::table('roles')->pluck('title', 'id');\n\nforeach ($roles as $id => $title) {\n    echo $title;\n}\n```"
  }
]