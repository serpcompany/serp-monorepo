[
  {
    "owner": "mcpdotdirect",
    "repo": "template-mcp-server",
    "content": "TITLE: Adding a Custom Tool to FastMCP Server in TypeScript\nDESCRIPTION: Example of how to add a custom tool to a FastMCP server. This code creates a simple hello world tool with a name parameter and returns a greeting.\nSOURCE: https://github.com/mcpdotdirect/template-mcp-server/blob/main/README.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nserver.addTool({\n  name: \"hello_world\",\n  description: \"A simple hello world tool\",\n  parameters: z.object({\n    name: z.string().describe(\"Name to greet\")\n  }),\n  execute: async (params) => {\n    return `Hello, ${params.name}!`;\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Adding a Resource Template to FastMCP Server in TypeScript\nDESCRIPTION: Example of how to add a resource template to a FastMCP server. This code creates a simple resource with a URI template that accepts an ID parameter.\nSOURCE: https://github.com/mcpdotdirect/template-mcp-server/blob/main/README.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nserver.addResourceTemplate({\n  uriTemplate: \"example://{id}\",\n  name: \"Example Resource\",\n  mimeType: \"text/plain\",\n  arguments: [\n    {\n      name: \"id\",\n      description: \"Resource ID\",\n      required: true,\n    },\n  ],\n  async load({ id }) {\n    return {\n      text: `This is an example resource with ID: ${id}`\n    };\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Adding a Prompt to FastMCP Server in TypeScript\nDESCRIPTION: Example of how to add a prompt to a FastMCP server. This code creates a simple greeting prompt that accepts a name parameter and returns a personalized greeting message.\nSOURCE: https://github.com/mcpdotdirect/template-mcp-server/blob/main/README.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nserver.addPrompt({\n  name: \"greeting\",\n  description: \"A simple greeting prompt\",\n  arguments: [\n    {\n      name: \"name\",\n      description: \"Name to greet\",\n      required: true,\n    },\n  ],\n  load: async ({ name }) => {\n    return `Hello, ${name}! How can I help you today?`;\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring MCP Servers in Cursor using mcp.json\nDESCRIPTION: JSON configuration for Cursor to connect to MCP servers. This can be placed in .cursor/mcp.json in the project directory or globally in ~/.cursor/mcp.json.\nSOURCE: https://github.com/mcpdotdirect/template-mcp-server/blob/main/README.md#2025-04-22_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"my-mcp-stdio\": {\n      \"command\": \"npm\",\n      \"args\": [\n        \"start\"\n      ],\n      \"env\": {\n        \"NODE_ENV\": \"development\"\n      }\n    },\n    \"my-mcp-sse\": {\n      \"url\": \"http://localhost:3001/sse\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing MCP Server Template with Package Managers\nDESCRIPTION: Shows how to install the MCP server template using npx or npm init. This is the initial step to create a new MCP server project.\nSOURCE: https://github.com/mcpdotdirect/template-mcp-server/blob/main/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# with npx\nnpx @mcpdotdirect/create-mcp-server\n\n# Or with npm\nnpm init @mcpdotdirect/mcp-server\n```\n\n----------------------------------------\n\nTITLE: Customizing MCP Server with Environment Variables\nDESCRIPTION: Examples of using environment variables to customize the MCP server configuration, such as changing the HTTP port or host binding.\nSOURCE: https://github.com/mcpdotdirect/template-mcp-server/blob/main/README.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n# Change the HTTP port (default is 3001)\nPORT=8080 npm run start:http\n\n# Change the host binding (default is 0.0.0.0)\nHOST=127.0.0.1 npm run start:http\n```\n\n----------------------------------------\n\nTITLE: Starting the MCP Server in Different Modes\nDESCRIPTION: Commands for starting the MCP server in stdio or HTTP mode, in both production and development environments with auto-reload capability.\nSOURCE: https://github.com/mcpdotdirect/template-mcp-server/blob/main/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Start the stdio server\nnpm start\n\n# Or start the HTTP server\nnpm run start:http\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies with Various Package Managers\nDESCRIPTION: Commands for installing dependencies after creating a project using different package managers (npm, yarn, pnpm, bun). This is required after project initialization.\nSOURCE: https://github.com/mcpdotdirect/template-mcp-server/blob/main/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Using npm\nnpm install\n\n# Using yarn\nyarn\n\n# Using pnpm\npnpm install\n\n# Using bun\nbun install\n```\n\n----------------------------------------\n\nTITLE: Running the MCP Server in Development Mode\nDESCRIPTION: Commands for running the MCP server in development mode with auto-reload, in both stdio and HTTP transport modes.\nSOURCE: https://github.com/mcpdotdirect/template-mcp-server/blob/main/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Development mode with stdio\nnpm run dev\n\n# Development mode with HTTP\nnpm run dev:http\n```\n\n----------------------------------------\n\nTITLE: Testing MCP Server with CLI Tools\nDESCRIPTION: Commands for testing your MCP server using FastMCP's built-in development and inspection tools.\nSOURCE: https://github.com/mcpdotdirect/template-mcp-server/blob/main/README.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n# Test with mcp-cli\nnpx fastmcp dev server.js\n\n# Inspect with MCP Inspector\nnpx fastmcp inspect server.ts\n```\n\n----------------------------------------\n\nTITLE: Running the MCP Server in HTTP Transport Mode\nDESCRIPTION: Full set of commands for running the MCP server in HTTP (Web) transport mode using various package managers, including both standard and development modes.\nSOURCE: https://github.com/mcpdotdirect/template-mcp-server/blob/main/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# Start the HTTP server\nnpm run start:http\n# or\nyarn start:http\npnpm start:http\nbun start:http\n\n# Start the HTTP server in development mode with auto-reload\nnpm run dev:http\n# or\nyarn dev:http\npnpm dev:http\nbun dev:http\n```\n\n----------------------------------------\n\nTITLE: Running the MCP Server in stdio Transport Mode\nDESCRIPTION: Full set of commands for running the MCP server in stdio (CLI) transport mode using various package managers, including both standard and development modes.\nSOURCE: https://github.com/mcpdotdirect/template-mcp-server/blob/main/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# Start the stdio server\nnpm start\n# or with other package managers\nyarn start\npnpm start\nbun start\n\n# Start the server in development mode with auto-reload\nnpm run dev\n# or\nyarn dev\npnpm dev\nbun dev\n```\n\n----------------------------------------\n\nTITLE: Starting the MCP HTTP Server on a Custom Port\nDESCRIPTION: Command for starting the HTTP server on a custom port using an environment variable. By default, the server runs on port 3001.\nSOURCE: https://github.com/mcpdotdirect/template-mcp-server/blob/main/README.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n# Start the HTTP server on a custom port\nPORT=8080 npm run start:http\n```"
  }
]