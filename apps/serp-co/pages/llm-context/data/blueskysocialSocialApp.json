[
  {
    "owner": "bluesky-social",
    "repo": "social-app",
    "content": "TITLE: Creating Scoped Storage with TypeScript\nDESCRIPTION: Illustrates how to create a scoped storage instance with TypeScript, including type definitions for the schema and scope. This example creates an account-scoped storage with a language setting.\nSOURCE: https://github.com/bluesky-social/social-app/blob/main/src/storage/README.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype AccountSchema = {\n  language: `${string}-${string}`;\n};\n\ntype DID = `did:${string}`;\n\nconst account = new Storage<\n  [DID],\n  AccountSchema\n>({\n  id: 'account',\n});\n\naccount.set(\n  ['did:plc:abc', 'language'],\n  'en-US',\n);\n\nconst language = account.get([\n  'did:plc:abc',\n  'language',\n]);\n```\n\n----------------------------------------\n\nTITLE: Using Device Storage in TypeScript\nDESCRIPTION: Demonstrates how to use the device storage instance for setting, getting, removing, and removing multiple items. This example uses the base level scope for device-wide storage.\nSOURCE: https://github.com/bluesky-social/social-app/blob/main/src/storage/README.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { device } from '#/storage';\n\ndevice.set(['foobar'], true);\ndevice.get(['foobar']);\ndevice.remove(['foobar']);\ndevice.removeMany([], ['foobar']);\n```\n\n----------------------------------------\n\nTITLE: Importing and Using ALF Atoms in React TSX\nDESCRIPTION: Demonstrates how to import and apply atomic styles using the ALF framework. Atoms are static style definitions that match Tailwind CSS selectors and are reused throughout the app.\nSOURCE: https://github.com/bluesky-social/social-app/blob/main/src/alf/README.md#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { atoms } from '#/alf'\n\n<View style={[atoms.flex_row]} />\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Header Layout with Layout.Header Components\nDESCRIPTION: Shows how to compose a basic header using the Layout.Header subcomponents, including the BackButton, Content area with title and subtitle, and the Slot component for balanced spacing.\nSOURCE: https://github.com/bluesky-social/social-app/blob/main/src/components/Layout/README.md#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Layout.Header.Outer>\n  <Layout.Header.BackButton /> {/* or <Layout.Header.MenuButton /> */}\n\n  <Layout.Header.Content>\n    <Layout.Header.TitleText>Account</Layout.Header.TitleText>\n\n    {/* Optional subtitle */}\n    <Layout.Header.SubtitleText>Settings for @esb.lol</Layout.Header.SubtitleText>\n  </Layout.Header.Content>\n\n  <Layout.Header.Slot />\n</Layout.Header.Outer>\n```\n\n----------------------------------------\n\nTITLE: Complete Basic Layout Implementation Example\nDESCRIPTION: Provides a complete example of the most basic layout structure available, combining Layout.Screen, Header components, and Content area in the recommended structure.\nSOURCE: https://github.com/bluesky-social/social-app/blob/main/src/components/Layout/README.md#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<Layout.Screen>\n  <Layout.Header.Outer>\n    <Layout.Header.BackButton /> {/* or <Layout.Header.MenuButton /> */}\n\n    <Layout.Header.Content>\n      <Layout.Header.TitleText>Account</Layout.Header.TitleText>\n\n      {/* Optional subtitle */}\n      <Layout.Header.SubtitleText>Settings for @esb.lol</Layout.Header.SubtitleText>\n    </Layout.Header.Content>\n\n    <Layout.Header.Slot />\n  </Layout.Header.Outer>\n\n  <Layout.Content>\n    ...\n  </Layout.Content>\n</Layout.Screen>\n```\n\n----------------------------------------\n\nTITLE: Using the Bluesky Logger in TypeScript\nDESCRIPTION: Demonstrates how to import and use the Bluesky logger, including creating custom instances, using different log levels, and proper error handling. The example shows all available log methods: debug, info, log, warn, and error.\nSOURCE: https://github.com/bluesky-social/social-app/blob/main/src/logger/README.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { logger, Logger } from '#/logger'\n\n// or, optionally create new instance with custom context\n// const logger = Logger.create(Logger.Context.Notifications)\n\n// for dev-only logs\nlogger.debug(message, {})\n\n// for production breadcrumbs\nlogger.info(message, {})\n\n// seldom used, prefer `info`\nlogger.log(message, {})\n\n// for non-error issues to look into, seldom used, prefer `error`\nlogger.warn(message, {})\n\n// for known errors without an exception, use a string\nlogger.error(`known error`, {})\n\n// for unknown exceptions\ntry {\n} catch (e) {\n  logger.error(e, {message: `explain error`}])\n}\n```\n\n----------------------------------------\n\nTITLE: Memoization Patterns with Lingui\nDESCRIPTION: Illustrates correct and incorrect patterns for memoizing translated content while maintaining proper locale change reactivity.\nSOURCE: https://github.com/bluesky-social/social-app/blob/main/docs/localization.md#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { msg } from \"@lingui/macro\";\nimport { i18n } from \"@lingui/core\";\n\nconst welcomeMessage = msg`Welcome!`;\n\n// ❌ Bad! This code won't work\nexport function Welcome() {\n  const buggyWelcome = useMemo(() => {\n    return i18n._(welcomeMessage);\n  }, []);\n\n  return <div>{buggyWelcome}</div>;\n}\n\n// ❌ Bad! This code won't work either because the reference to i18n does not change\nexport function Welcome() {\n  const { i18n } = useLingui();\n\n  const buggyWelcome = useMemo(() => {\n    return i18n._(welcomeMessage);\n  }, [i18n]);\n\n  return <div>{buggyWelcome}</div>;\n}\n\n// ✅ Good! `useMemo` has i18n context in the dependency\nexport function Welcome() {\n  const linguiCtx = useLingui();\n\n  const welcome = useMemo(() => {\n    return linguiCtx.i18n._(welcomeMessage);\n  }, [linguiCtx]);\n\n  return <div>{welcome}</div>;\n}\n\n// 🤩 Better! `useMemo` consumes the `_` function from the Lingui context\nexport function Welcome() {\n  const { _ } = useLingui();\n\n  const welcome = useMemo(() => {\n    return _(welcomeMessage);\n  }, [_]);\n\n  return <div>{welcome}</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Translating Accessibility Labels with useLingui Hook\nDESCRIPTION: Shows how to translate dynamic text and accessibility labels using the useLingui hook and msg macro.\nSOURCE: https://github.com/bluesky-social/social-app/blob/main/docs/localization.md#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n// Before\nimport { Text } from \"react-native\";\n\nconst text = \"Hello World\";\n<Text accessibilityLabel=\"Label is here\">{text}</Text>\n```\n\nLANGUAGE: jsx\nCODE:\n```\nimport { msg } from \"@lingui/macro\";\nimport { useLingui } from \"@lingui/react\";\n\nconst { _ } = useLingui();\nreturn <Text accessibilityLabel={_(msg`Label is here`)}>{text}</Text>\n```\n\n----------------------------------------\n\nTITLE: Basic String Translation with Trans Macro in JSX\nDESCRIPTION: Demonstrates how to wrap static text content with the Trans macro for internationalization support.\nSOURCE: https://github.com/bluesky-social/social-app/blob/main/docs/localization.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n// Before\nimport { Text } from \"react-native\";\n\n<Text>Hello World</Text>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n// After\nimport { Text } from \"react-native\";\nimport { Trans } from \"@lingui/macro\";\n\n<Text><Trans>Hello World</Trans></Text>\n```\n\n----------------------------------------\n\nTITLE: Using Theme-Dependent Styles in ALF\nDESCRIPTION: Shows how to combine atomic styles with theme-dependent values such as colors using the useTheme hook.\nSOURCE: https://github.com/bluesky-social/social-app/blob/main/src/alf/README.md#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst t = useTheme()\n\n<View style={[atoms.flex_row, t.atoms.bg]} />\n```\n\n----------------------------------------\n\nTITLE: Customizing Header Layout for SavedFeeds Screen\nDESCRIPTION: Shows how to customize the header layout for specific needs, such as aligning content to the left and adding a custom wider button, as used in the SavedFeeds screen.\nSOURCE: https://github.com/bluesky-social/social-app/blob/main/src/components/Layout/README.md#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<Layout.Header.Outer>\n  <Layout.Header.BackButton />\n\n  {/* Override to align content to the left, making room for the button */}\n  <Layout.Header.Content align='left'>\n    <Layout.Header.TitleText>Edit My Feeds</Layout.Header.TitleText>\n  </Layout.Header.Content>\n\n  {/* Custom button, wider than 34px */}\n  <Button size='small'>...</Button>\n</Layout.Header.Outer>\n```\n\n----------------------------------------\n\nTITLE: Basic Screen Layout Structure in React\nDESCRIPTION: Demonstrates the conceptual structure of layouts on individual screens, showing the general pattern of Outer, Header, and Content components.\nSOURCE: https://github.com/bluesky-social/social-app/blob/main/src/components/Layout/README.md#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<Outer>\n  <Header>...</Header>\n  <Content>...</Content>\n</Outer>\n```\n\n----------------------------------------\n\nTITLE: Implementing Responsive Breakpoints in ALF\nDESCRIPTION: Example of using breakpoint utilities to implement responsive UI logic using the useBreakpoints hook.\nSOURCE: https://github.com/bluesky-social/social-app/blob/main/src/alf/README.md#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst b = useBreakpoints()\n\nif (b.gtMobile) {\n  // render tablet or desktop UI\n}\n```\n\n----------------------------------------\n\nTITLE: Non-React Translation Using t Macro\nDESCRIPTION: Demonstrates how to translate strings outside of React components using the t macro, noting that it won't react to dynamic locale changes.\nSOURCE: https://github.com/bluesky-social/social-app/blob/main/docs/localization.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { t } from \"@lingui/macro\";\n\nconst text = t`Hello World`;\n```\n\n----------------------------------------\n\nTITLE: Using Header Slot for Right-Side Button\nDESCRIPTION: Demonstrates how to use the Layout.Header.Slot component to position a button on the right side of the header, as shown in the Hashtag screen example.\nSOURCE: https://github.com/bluesky-social/social-app/blob/main/src/components/Layout/README.md#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<Layout.Header.Slot>\n  <Button size='small' shape='round'>...</Button>\n</Layout.Header.Slot>\n```\n\n----------------------------------------\n\nTITLE: Running Flashlight Performance Tests for Bluesky Social App\nDESCRIPTION: This snippet demonstrates various commands for running Flashlight performance tests on the Bluesky Social App. It includes commands for live preview, running specific tests, and viewing test results.\nSOURCE: https://github.com/bluesky-social/social-app/blob/main/docs/testing.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn perf:measure\nyarn perf:test:measure\nyarn:perf:results\nyarn perf:test <path_to_test>\n```\n\n----------------------------------------\n\nTITLE: Running Maestro E2E Tests for Bluesky Social App\nDESCRIPTION: This snippet shows the commands to run Maestro E2E tests for the Bluesky Social App. It involves running a mock server, a metro bundler, and the actual test execution in separate terminal tabs.\nSOURCE: https://github.com/bluesky-social/social-app/blob/main/docs/testing.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n- In one tab, run `yarn e2e:mock-server`\n- In a second tab, run `yarn e2e:metro`\n- In a third tab, run `yarn e2e:run`\n```\n\n----------------------------------------\n\nTITLE: Android Badge Count Fix Implementation\nDESCRIPTION: Documentation for a patch that addresses badge count clearing issues on Android by replacing ShortcutBadger's setCount method with direct Android API calls for more reliable badge management.\nSOURCE: https://github.com/bluesky-social/social-app/blob/main/patches/expo-notifications+0.29.11.patch.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### `setBadgeCountAsync` fix on Android\n\n`ShortcutBadger`'s `setCount` doesn't work for clearing the badge on Android for some reason. Instead, let's use the\nAndroid API for clearing the badge.\n```\n\n----------------------------------------\n\nTITLE: Important Android Notification Module Patch\nDESCRIPTION: Critical patch for Android background notification handling that enables message processing in onMessageReceived and allows setting notification channel ID from the data payload instead of the notification object.\nSOURCE: https://github.com/bluesky-social/social-app/blob/main/patches/expo-notifications+0.29.11.patch.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## LOAD BEARING PATCH, DO NOT REMOVE\n\n## Expo-Notifications Patch\n\nThis patch supports the Android background notification handling module. Incoming messages\nin `onMessageReceived` are sent to the module for handling.\n\nIt also allows us to set the Android notification channel ID from the notification `data`, rather\nthan the `notification` object in the payload.\n```\n\n----------------------------------------\n\nTITLE: Uploading iOS Sourcemaps to Sentry after OTA Updates\nDESCRIPTION: Command to upload iOS sourcemaps to Sentry after an OTA update. This command specifies the release name, update ID, and paths to the bundle and sourcemap files for proper error tracking on iOS.\nSOURCE: https://github.com/bluesky-social/social-app/blob/main/docs/build.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnode_modules/@sentry/cli/bin/sentry-cli releases \\\nfiles <release name> \\\nupload-sourcemaps \\\n--dist <iOS Update ID> \\\n--rewrite \\\ndist/bundles/main.jsbundle dist/bundles/ios-<hash>.map\n```\n\n----------------------------------------\n\nTITLE: Uploading Android Sourcemaps to Sentry after OTA Updates\nDESCRIPTION: Command to upload Android sourcemaps to Sentry after an OTA update. This command specifies the release name, update ID, and paths to the bundle and sourcemap files for proper error tracking.\nSOURCE: https://github.com/bluesky-social/social-app/blob/main/docs/build.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnode_modules/@sentry/cli/bin/sentry-cli releases \\\nfiles <release name> \\\nupload-sourcemaps \\\n--dist <Android Update ID> \\\n--rewrite \\\ndist/bundles/index.android.bundle dist/bundles/android-<hash>.map\n```\n\n----------------------------------------\n\nTITLE: Go Server Build and Run Commands\nDESCRIPTION: Commands to build and run the Go server for serving the web app in production\nSOURCE: https://github.com/bluesky-social/social-app/blob/main/docs/build.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncd social-app\nyarn && yarn build-web\ncd bskyweb/\ngo mod tidy\ngo build -v -tags timetzdata -o bskyweb ./cmd/bskyweb\n./bskyweb serve --appview-host=https://public.api.bsky.app\n```\n\n----------------------------------------\n\nTITLE: Building Web Bundle for SPA\nDESCRIPTION: Command to build the monolithic static JavaScript file (bundle.web.js) for the SPA from the top level of the repository.\nSOURCE: https://github.com/bluesky-social/social-app/blob/main/bskyweb/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# in the top level of this repo\nyarn build-web\n```\n\n----------------------------------------\n\nTITLE: Running Web Development Server for SPA\nDESCRIPTION: Command to start the yarn web development server for local development and testing of the SPA.\nSOURCE: https://github.com/bluesky-social/social-app/blob/main/bskyweb/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# run yarn web dev server, if you wanted\nyarn web\n```\n\n----------------------------------------\n\nTITLE: Building Golang Daemon Binary\nDESCRIPTION: Command to build the Golang daemon into a standalone binary named 'bskyweb' that can be deployed or run directly.\nSOURCE: https://github.com/bluesky-social/social-app/blob/main/bskyweb/README.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# build and output a binary\ngo build -o bskyweb ./cmd/bskyweb/\n```\n\n----------------------------------------\n\nTITLE: Running Golang Daemon in Development Mode\nDESCRIPTION: Command to rebuild and run the Golang daemon using go run, which compiles and executes the code in one step for development purposes.\nSOURCE: https://github.com/bluesky-social/social-app/blob/main/bskyweb/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# re-build and run daemon\ngo run ./cmd/bskyweb serve\n```\n\n----------------------------------------\n\nTITLE: Share Extension Plugin Documentation in Markdown\nDESCRIPTION: This markdown document outlines the implementation steps for integrating share extensions into Expo applications for both iOS and Android platforms, including necessary file modifications and build configurations.\nSOURCE: https://github.com/bluesky-social/social-app/blob/main/plugins/shareExtension/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Share extension plugin for Expo\n\nThis plugin handles moving the necessary files into their respective iOS and Android targets and updating the build\nphases, plists, manifests, etc.\n\n## Steps\n\n### ios\n\n1. Update entitlements\n2. Set the app group to group.<identifier>\n3. Add the extension plist\n4. Add the view controller\n5. Update the xcode project's build phases\n\n### android\n\n1. Update the manifest with the intents the app can receive\n\n## Credits\n\nAdapted from https://github.com/andrew-levy/react-native-safari-extension and https://github.com/timedtext/expo-config-plugin-ios-share-extension/blob/master/src/withShareExtensionXcodeTarget.ts\n```\n\n----------------------------------------\n\nTITLE: Implementing oEmbed Link for Bluesky Social Posts in HTML\nDESCRIPTION: This snippet demonstrates how to include an oEmbed link in HTML for embedding Bluesky Social posts. It specifies the alternate link type and the oEmbed API endpoint with necessary parameters.\nSOURCE: https://github.com/bluesky-social/social-app/blob/main/bskyweb/README.embed.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<link rel=\"alternate\" type=\"application/json+oembed\" href=\"https://embed.bsky.app/oembed?format=json&url=https://bsky.app/profile/bnewbold.net/post/abc123\" />\n```\n\n----------------------------------------\n\nTITLE: Creating Bluesky Post Blockquote in HTML\nDESCRIPTION: This snippet shows the HTML structure for embedding a Bluesky post using a blockquote. It includes placeholders for post text, author information, and a link to the original post.\nSOURCE: https://github.com/bluesky-social/social-app/blob/main/bskyweb/README.embed.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<blockquote class=\"bluesky-post\" data-lang=\"en\" data-align=\"center\">\n  <p lang=\"en\" dir=\"ltr\">{{ post-text }}</p>\n  &mdash; US Department of the Interior (@Interior) <a href=\"https://twitter.com/Interior/status/463440424141459456?ref_src=twsrc%5Etfw\">May 5, 2014</a>\n</blockquote>\n```\n\n----------------------------------------\n\nTITLE: Android ADB Port Forwarding Command\nDESCRIPTION: Command to enable localhost access for Android simulator\nSOURCE: https://github.com/bluesky-social/social-app/blob/main/docs/build.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nadb reverse tcp:{PORT} tcp:{PORT}\n```\n\n----------------------------------------\n\nTITLE: iOS Simulator Runtime Installation Commands\nDESCRIPTION: Commands for setting up iOS simulator runtime and Xcode configuration\nSOURCE: https://github.com/bluesky-social/social-app/blob/main/docs/build.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nxcode-select -s /Applications/Xcode.app\nxcodebuild -runFirstLaunch\nxcrun simctl runtime add \"~/Downloads/iOS_17.4_Simulator_Runtime.dmg\"\n```\n\n----------------------------------------\n\nTITLE: Environment Setup Commands for iOS Ruby Configuration\nDESCRIPTION: Series of commands to set up Ruby environment with rbenv and install correct dependencies for iOS development\nSOURCE: https://github.com/bluesky-social/social-app/blob/main/docs/build.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nbrew install rbenv\nrbenv install 2.7.6\nrbenv global 2.7.6\neval \"$(rbenv init - zsh)\"\n```\n\n----------------------------------------\n\nTITLE: Setting up Node.js Environment for SPA Bundle\nDESCRIPTION: Commands to install Node.js using nvm, set the current version, and install yarn globally as a prerequisite for building the SPA bundle.\nSOURCE: https://github.com/bluesky-social/social-app/blob/main/bskyweb/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# install nodejs\nnvm install\nnvm use\nnpm install --global yarn\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies for SPA Bundle\nDESCRIPTION: Command to install project dependencies using yarn with the frozen-lockfile flag to ensure consistent installations across environments.\nSOURCE: https://github.com/bluesky-social/social-app/blob/main/bskyweb/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# setup tools and deps (in top level of this repo)\nyarn install --frozen-lockfile\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Crawler Permissions in robots.txt for Bluesky Social App\nDESCRIPTION: This robots.txt configuration allows crawlers to access all content on the domain while providing advice about using the official API for bulk operations. It notes that rate limiting is implemented via HTTP 429 status codes, with a recommendation that a few concurrent requests should be acceptable.\nSOURCE: https://github.com/bluesky-social/social-app/blob/main/bskyweb/embedr-static/robots.txt#2025-04-23_snippet_0\n\nLANGUAGE: robots.txt\nCODE:\n```\n# Hello Friends!\n# If you are considering bulk or automated crawling, you may want to look in\n# to our protocol (API), including a firehose of updates. See: https://atproto.com/\n\n# By default, may crawl anything on this domain. HTTP 429 (\"backoff\") status\n# codes are used for rate-limiting. Up to a handful concurrent requests should\n# be ok.\nUser-Agent: *\nAllow: /\n```\n\n----------------------------------------\n\nTITLE: Defining Crawling Permissions in robots.txt for Bluesky Social App\nDESCRIPTION: This robots.txt configuration allows all user agents to crawl the entire domain. It mentions that rate limiting is implemented via HTTP 429 responses and suggests that a small number of concurrent requests should be acceptable.\nSOURCE: https://github.com/bluesky-social/social-app/blob/main/bskyweb/static/robots.txt#2025-04-23_snippet_0\n\nLANGUAGE: robots.txt\nCODE:\n```\n# Hello Friends!\n# If you are considering bulk or automated crawling, you may want to look in\n# to our protocol (API), including a firehose of updates. See: https://atproto.com/\n\n# By default, may crawl anything on this domain. HTTP 429 (\"backoff\") status\n# codes are used for rate-limiting. Up to a handful concurrent requests should\n# be ok.\nUser-Agent: *\nAllow: /\n```\n\n----------------------------------------\n\nTITLE: Configuring Robots.txt to Disallow Crawling for Development BlueSkySocial Web App\nDESCRIPTION: This robots.txt configuration blocks all web crawlers from indexing any content on a development or self-hosted instance of the BlueSkySocial web application. It uses the wildcard User-Agent to apply the rule to all crawlers and disallows access to the entire site.\nSOURCE: https://github.com/bluesky-social/social-app/blob/main/bskyweb/static/robots-disallow-all.txt#2025-04-23_snippet_0\n\nLANGUAGE: robots.txt\nCODE:\n```\n# This is an development or self-hosted instance of the bsky web app, and crawling has been disallowed by the operator team.\nUser-Agent: *\nDisallow: /\n```"
  }
]