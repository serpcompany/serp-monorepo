[
  {
    "owner": "magento",
    "repo": "magento2",
    "content": "TITLE: Registering Modules in Magento 2 using ComponentRegistrar\nDESCRIPTION: This snippet demonstrates how to register a module in Magento 2 using the ComponentRegistrar class. It uses the MODULE constant and requires the module name and directory path.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/lib/internal/Magento/Framework/Component/README.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nComponentRegistrar::register(ComponentRegistrar::MODULE, '<module name>', __DIR__);\n```\n\n----------------------------------------\n\nTITLE: Extending Abstract Payment Method in Magento 2\nDESCRIPTION: The Magento\\Payment\\Model\\Method\\AbstractMethod is an abstract model that should be extended when implementing new payment methods in Magento 2. This class provides the base functionality and structure for payment method implementations.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/app/code/Magento/Payment/README.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nMagento\\Payment\\Model\\Method\\AbstractMethod\n```\n\n----------------------------------------\n\nTITLE: Magento Catalog Events Configuration - Main Events\nDESCRIPTION: XML configuration defining the main event observers for product and category lifecycle events in the Magento catalog system. These events handle entity operations like save, delete, and load for products and categories.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/app/code/Magento/Catalog/README.md#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n- `etc/events.xml`\n   - `magento_catalog_api_data_productinterface_save_before`\n   - `magento_catalog_api_data_productinterface_save_after`\n   - `magento_catalog_api_data_productinterface_delete_before`\n   - `magento_catalog_api_data_productinterface_delete_after`\n   - `magento_catalog_api_data_productinterface_load_after`\n```\n\n----------------------------------------\n\nTITLE: Generating Shell Commands with Object-Oriented Interface\nDESCRIPTION: Provides a flexible mechanism for creating shell commands with automatic argument escaping and potential for command interception or mocking. Supports cross-platform command generation with built-in logging capabilities.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/lib/internal/Magento/Framework/Shell/README.md#2025-04-21_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nShell Command Generation Library\n```\n\n----------------------------------------\n\nTITLE: Defining Interceptor Class in Magento 2 PHP\nDESCRIPTION: This code snippet defines an interceptor class for the ReflectionUnionTypeSample. The class constructor initializes the interceptor, and it includes methods for getting and setting a value. The methods utilize plugin information to determine the appropriate behavior based on extensions present in the system.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/lib/internal/Magento/Framework/Interception/Test/Unit/Code/Generator/_files/ReflectionUnionTypeSampleInterceptor.txt#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace Magento\\Framework\\Interception\\Code\\Generator\\ReflectionUnionTypeSample;\n\n/**\n * Interceptor class for @see \\Magento\\Framework\\Interception\\Code\\Generator\\ReflectionUnionTypeSample\n */\nclass Interceptor extends \\Magento\\Framework\\Interception\\Code\\Generator\\ReflectionUnionTypeSample implements \\Magento\\Framework\\Interception\\InterceptorInterface\n{\n    use \\Magento\\Framework\\Interception\\Interceptor;\n\n    public function __construct()\n    {\n        $this->___init();\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function getValue() : int|string\n    {\n        $pluginInfo = $this->pluginList->getNext($this->subjectType, 'getValue');\n        return $pluginInfo ? $this->___callPlugins('getValue', func_get_args(), $pluginInfo) : parent::getValue();\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function setValue(int|string $value)\n    {\n        $pluginInfo = $this->pluginList->getNext($this->subjectType, 'setValue');\n        return $pluginInfo ? $this->___callPlugins('setValue', func_get_args(), $pluginInfo) : parent::setValue($value);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Magento via Command Line - PHP\nDESCRIPTION: This code snippet demonstrates how to execute the Magento installation command through the PHP command line interface, specifying various parameters such as database credentials, admin user details, locale, and search engine settings.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/phpserver/README.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nphp bin/magento setup:install --base-url=http://127.0.0.1:8082 \\\n--db-host=localhost --db-name=magento --db-user=magento --db-password=magento \\\n--admin-firstname=Magento --admin-lastname=User --admin-email=user@example.com \\\n--admin-user=admin --admin-password=admin123 --language=en_US \\\n--currency=USD --timezone=America/Chicago --use-rewrites=1 \\\n--search-engine=elasticsearch8 --elasticsearch-host=es-host.example.com --elasticsearch-port=9200\n```\n\n----------------------------------------\n\nTITLE: Running Magento with PHP Built-in Server - Shell\nDESCRIPTION: This code snippet shows how to start the PHP built-in server with specified parameters, setting the document root and routing to a custom router script for handling requests.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/phpserver/README.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nphp -S 127.0.0.1:8082 -t ./pub/ ./phpserver/router.php\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Import Entity in Magento\nDESCRIPTION: This snippet provides instructions for developers on how to create a custom import entity in Magento by declaring it in the etc/import.xml file and creating the corresponding import model. This process allows for the integration of new import functionalities tailored to specific business needs.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/app/code/Magento/ImportExport/README.md#2025-04-21_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n1. Declare the new import entity in `etc/import.xml`\n2. Create an import model\n```\n\n----------------------------------------\n\nTITLE: User Role and Permission Management in Magento 2\nDESCRIPTION: Describes the core user management capabilities for defining administrative roles, permissions, and access controls within the Magento 2 backend system\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/app/code/Magento/User/README.md#2025-04-21_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n# User management features\n- Role assignment\n- Password reset\n- Access token invalidation\n- Password lifetime configuration\n- Brute force protection\n```\n\n----------------------------------------\n\nTITLE: Defining Sample Data Packages in Composer\nDESCRIPTION: Specifies required Magento sample data packages in the `composer.json` file. This action is necessary for installing specific sample data modules, such as Magento_Catalog, Magento_Sales, etc. It requires defining these packages under the `require` section, with versions matching the Magento instance.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/app/code/Magento/SampleData/README.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"require\": {\n        ...\n        \"magento/module-catalog-sample-data\": \"{version}\",\n        \"magento/module-configurable-sample-data\": \"{version}\",\n        \"magento/module-cms-sample-data\": \"{version}\",\n        \"magento/module-sales-sample-data\": \"{version}\"\n        ....\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Export Entity in Magento\nDESCRIPTION: This snippet outlines the steps for developers to create a custom export entity in Magento. It includes declaring the entity in the etc/export.xml file and creating the corresponding export model, enabling the customization of export processes within Magento.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/app/code/Magento/ImportExport/README.md#2025-04-21_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n1. Declare the new import entity in `etc/export.xml`\n2. Create an export model\n```\n\n----------------------------------------\n\nTITLE: Configuring New Relic Performance Monitoring in Magento 2\nDESCRIPTION: This snippet shows how to configure the ApplicationPerformanceMonitorNewRelic module in Magento 2's env.php file. It enables outputting performance metrics to New Relic and provides an option for verbose metrics output.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/app/code/Magento/ApplicationPerformanceMonitorNewRelic/README.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n'application' => [\n    'performance_monitor' => [\n        'newrelic_output_enable' => 1,\n        'newrelic_output_verbose' => 0,\n    ]\n]\n```\n\n----------------------------------------\n\nTITLE: Defining ProductExtensionInterface in PHP\nDESCRIPTION: This snippet defines the ProductExtensionInterface which extends the ExtensionAttributesInterface from Magento. It includes methods to get and set additional product attributes, including string and complex object attributes.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/lib/internal/Magento/Framework/Api/Test/Unit/Code/Generator/_files/SampleExtensionInterface.txt#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace Magento\\Catalog\\Api\\Data;\n\n/**\n * ExtensionInterface class for @see \\Magento\\Catalog\\Api\\Data\\ProductInterface\n */\ninterface ProductExtensionInterface extends \\Magento\\Framework\\Api\\ExtensionAttributesInterface\n{\n    /**\n     * @return string|null\n     */\n    public function getStringAttribute();\n\n    /**\n     * @param string $stringAttribute\n     * @return $this\n     */\n    public function setStringAttribute($stringAttribute);\n\n    /**\n     * @return \\Magento\\Bundle\\Api\\Data\\OptionInterface[]|null\n     */\n    public function getComplexObjectAttribute();\n\n    /**\n     * @param \\Magento\\Bundle\\Api\\Data\\OptionInterface[] $complexObjectAttribute\n     * @return $this\n     */\n    public function setComplexObjectAttribute($complexObjectAttribute);\n\n    /**\n     * @return \\Magento\\Bundle\\Api\\Data\\BundleOptionInterface|null\n     */\n    public function getComplexObjectAttributeWithTypeDeclaration();\n\n    /**\n     * @param \\Magento\\Bundle\\Api\\Data\\BundleOptionInterface $complexObjectAttributeWithTypeDeclaration\n     * @return $this\n     */\n    public function setComplexObjectAttributeWithTypeDeclaration(\\Magento\\Bundle\\Api\\Data\\BundleOptionInterface $complexObjectAttributeWithTypeDeclaration);\n}\n```\n\n----------------------------------------\n\nTITLE: Reset Sample Data Entities\nDESCRIPTION: Resets and reinstalls sample data entities using the Magento CLI command `sampledata:reset`. This command restores deleted sample data but preserves entities' changes. It is crucial for reinstating the default dataset after modifications.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/app/code/Magento/SampleData/README.md#2025-04-21_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n# bin/magento sampledata:reset\n```\n\n----------------------------------------\n\nTITLE: SampleFactory Create Method in Magento 2\nDESCRIPTION: The create method uses the ObjectManager to instantiate the specified class with optional data.  It calls the ObjectManager's `create` method with the instance name and data array, returning a new instance of the class.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/lib/internal/Magento/Framework/ObjectManager/Test/Unit/Code/Generator/_files/SampleFactory.txt#2025-04-21_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n    /**\n     * Create class instance with specified parameters\n     *\n     * @param array $data\n     * @return \\Magento\\Framework\\ObjectManager\\Code\\Generator\\Sample\n     */\n    public function create(array $data = [])\n    {\n        return $this->_objectManager->create($this->_instanceName, $data);\n    }\n```\n\n----------------------------------------\n\nTITLE: Magento Catalog Events Configuration - Admin Events\nDESCRIPTION: XML configuration for admin-specific event observers in the Magento catalog system, handling WYSIWYG images, category product indexing, and category movement operations.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/app/code/Magento/Catalog/README.md#2025-04-21_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n- `/etc/adminhtml/events.xml`\n   `cms_wysiwyg_images_static_urls_allowed`\n   - `catalog_category_change_products`\n   - `category_move`\n```\n\n----------------------------------------\n\nTITLE: Extracting DTO from Model in Magento 2\nDESCRIPTION: This method extracts data from a Magento model and creates a DTO using the SampleBuilder. It populates the SampleBuilder with the model's data using `populateWithArray` and then creates the DTO using `create`. The input is an AbstractModel and the output is a Sample DTO.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/lib/internal/Magento/Framework/Api/Test/Unit/Code/Generator/_files/SampleMapper.txt#2025-04-21_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n    /**\n     * Extract data object from model\n     *\n     * @param \\Magento\\Framework\\Model\\AbstractModel $object\n     * @return \\Magento\\Framework\\Api\\Code\\Generator\\Sample\n     */\n    public function extractDto(\\Magento\\Framework\\Model\\AbstractModel $object)\n    {\n        $this->sampleBuilder->populateWithArray($object->getData());\n        return $this->sampleBuilder->create();\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring Performance Monitor in Magento 2 env.php\nDESCRIPTION: Configuration settings for the Performance Monitor in Magento 2's env.php file. Includes options for enabling basic and verbose logging output.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/app/code/Magento/ApplicationPerformanceMonitor/README.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n'application' => [\n    'performance_monitor' => [\n        'logger_output_enable' => 1,\n        'logger_output_verbose' => 0,\n    ]\n]\n```\n\n----------------------------------------\n\nTITLE: SampleFactory Constructor in Magento 2\nDESCRIPTION: This constructor initializes the SampleFactory with an ObjectManager instance and an instance name. The ObjectManager is used to create instances of the target class, and the instance name specifies the class to be instantiated.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/lib/internal/Magento/Framework/ObjectManager/Test/Unit/Code/Generator/_files/SampleFactory.txt#2025-04-21_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n    /**\n     * Factory constructor\n     *\n     * @param \\Magento\\Framework\\ObjectManagerInterface $objectManager\n     * @param string $instanceName\n     */\n    public function __construct(\\Magento\\Framework\\ObjectManagerInterface $objectManager, $instanceName = '\\\\Magento\\\\Framework\\\\ObjectManager\\\\Code\\\\Generator\\\\Sample')\n    {\n        $this->_objectManager = $objectManager;\n        $this->_instanceName = $instanceName;\n    }\n```\n\n----------------------------------------\n\nTITLE: Clone and Link Sample Data from GitHub\nDESCRIPTION: Clones the sample data from GitHub and links it to the Magento instance. Branch selection corresponds to the Magento instance branch. This step is critical for deploying sample data from GitHub, ensuring proper branch alignment and functionality via the build-sample-data script.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/app/code/Magento/SampleData/README.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n# php -f <sample-data_clone_dir>/dev/tools/build-sample-data.php -- --ce-source=\"<path_to_your_magento_instance>\"\n```\n\n----------------------------------------\n\nTITLE: Defining SampleMapper class in Magento 2\nDESCRIPTION: This code defines the SampleMapper class, which is part of the Magento\\Framework\\Api\\Code\\Generator namespace. It is responsible for mapping Magento models to data transfer objects (DTOs) of type Sample. It depends on the SampleBuilder class to construct the DTO.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/lib/internal/Magento/Framework/Api/Test/Unit/Code/Generator/_files/SampleMapper.txt#2025-04-21_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nnamespace Magento\\Framework\\Api\\Code\\Generator;\n\n/**\n * Mapper class for @see \\Magento\\Framework\\Api\\Code\\Generator\\Sample\n */\nclass SampleMapper\n{\n    /**\n     * sampleBuilder\n     *\n     * @var \\Magento\\Framework\\Api\\Code\\Generator\\SampleBuilder\n     */\n    protected $sampleBuilder = null;\n\n    /**\n     * \\Magento\\Framework\\Api\\Code\\Generator\\Sample[]\n     *\n     * @var array\n     */\n    protected $registry = [\n        \n    ];\n\n    /**\n     * Mapper constructor\n     *\n     * @param \\Magento\\Framework\\Api\\Code\\Generator\\Sample $sampleBuilder\n     */\n    public function __construct(\\Magento\\Framework\\Api\\Code\\Generator\\SampleBuilder $sampleBuilder)\n    {\n        $this->sampleBuilder = $sampleBuilder;\n    }\n\n    /**\n     * Extract data object from model\n     *\n     * @param \\Magento\\Framework\\Model\\AbstractModel $object\n     * @return \\Magento\\Framework\\Api\\Code\\Generator\\Sample\n     */\n    public function extractDto(\\Magento\\Framework\\Model\\AbstractModel $object)\n    {\n        $this->sampleBuilder->populateWithArray($object->getData());\n        return $this->sampleBuilder->create();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Interceptor with Method Interception in PHP\nDESCRIPTION: Implements an interceptor class that allows plugins to modify method execution by wrapping original methods with plugin logic. Uses Magento's plugin system to dynamically inject additional behavior before, after, or around method calls.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/lib/internal/Magento/Framework/Interception/Test/Unit/Code/Generator/_files/Interceptor.txt#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass Interceptor extends \\Magento\\Framework\\Interception\\Code\\Generator\\Sample implements \\Magento\\Framework\\Interception\\InterceptorInterface\n{\n    use \\Magento\\Framework\\Interception\\Interceptor;\n\n    public function __construct()\n    {\n        $this->___init();\n    }\n\n    public function getValue()\n    {\n        $pluginInfo = $this->pluginList->getNext($this->subjectType, 'getValue');\n        return $pluginInfo ? $this->___callPlugins('getValue', func_get_args(), $pluginInfo) : parent::getValue();\n    }\n```\n\n----------------------------------------\n\nTITLE: Saving Customer via Message Queue\nDESCRIPTION: This snippet implements the save method of the CustomerRepositoryInterface by publishing a message to the 'magento.customer.api.customerRepositoryInterface.save' queue. It passes the customer data and password hash as parameters in the message body. This enables asynchronous saving of customer data.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/lib/internal/Magento/Framework/MessageQueue/Test/Unit/Code/Generator/_files/RemoteService.txt#2025-04-21_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n    /**\n     * @inheritdoc\n     */\n    public function save(\\Magento\\Customer\\Api\\Data\\CustomerInterface $customer, $passwordHash = null)\n    {\n        return $this->publisher->publish(\n            'magento.customer.api.customerRepositoryInterface.save',\n            ['customer' => $customer, 'passwordHash' => $passwordHash]\n        );\n    }\n```\n\n----------------------------------------\n\nTITLE: Setting Up Customer Logout Event Observer in Magento 2 Checkout Module\nDESCRIPTION: This XML snippet defines an observer for the 'customer_logout' event in the frontend area of the Magento_Checkout module. It specifies the observer class that will handle unsetting all related data upon customer logout.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/app/code/Magento/Checkout/README.md#2025-04-21_snippet_2\n\nLANGUAGE: XML\nCODE:\n```\n<customer_logout event in `Magento\\Checkout\\Observer\\UnsetAllObserver`>\n```\n\n----------------------------------------\n\nTITLE: Registering Themes in Magento 2 using ComponentRegistrar\nDESCRIPTION: This snippet shows the process of registering a theme in Magento 2 using the ComponentRegistrar class. It uses the THEME constant and requires the theme name and directory path.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/lib/internal/Magento/Framework/Component/README.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nComponentRegistrar::register(ComponentRegistrar::THEME, '<theme name>', __DIR__);\n```\n\n----------------------------------------\n\nTITLE: Providing Sibling SKUs in Stock for Configurable Products in PHP\nDESCRIPTION: The SiblingSkuListInStockProvider class for configurable products provides functionality to retrieve SKUs of sibling configurable products that are in stock. This is crucial for maintaining product visibility and inventory accuracy for related products within Magento catalogs.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/dev/tests/static/testsuite/Magento/Test/Php/_files/phpcpd/blacklist/inventory.txt#2025-04-21_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace Magento\\InventoryConfigurableProductIndexer\\Indexer\\SourceItem;\n\nclass SiblingSkuListInStockProvider {\n    // Logic for providing sibling SKUs in stock\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Customer List via Message Queue\nDESCRIPTION: This snippet implements the getList method of the CustomerRepositoryInterface by publishing a message to the 'magento.customer.api.customerRepositoryInterface.getList' queue. It passes the search criteria as a parameter. This enables asynchronous retrieval of a list of customers.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/lib/internal/Magento/Framework/MessageQueue/Test/Unit/Code/Generator/_files/RemoteService.txt#2025-04-21_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n    /**\n     * @inheritdoc\n     */\n    public function getList(\\Magento\\Framework\\Api\\SearchCriteriaInterface $searchCriteria)\n    {\n        return $this->publisher->publish(\n            'magento.customer.api.customerRepositoryInterface.getList',\n            ['searchCriteria' => $searchCriteria]\n        );\n    }\n```\n\n----------------------------------------\n\nTITLE: Getting String Attribute - PHP\nDESCRIPTION: This method retrieves the value of a simple string attribute associated with a product. It returns either a string or null if the attribute is not set.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/lib/internal/Magento/Framework/Api/Test/Unit/Code/Generator/_files/SampleExtension.txt#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n    /**\n     * @return string|null\n     */\n    public function getStringAttribute()\n    {\n        return $this->_get('string_attribute');\n    }\n```\n\n----------------------------------------\n\nTITLE: SampleFactory Class Definition in Magento 2\nDESCRIPTION: This code defines the SampleFactory class, which is responsible for creating instances of the \\Magento\\Framework\\ObjectManager\\Code\\Generator\\Sample class. It utilizes the ObjectManager to instantiate the class, allowing for dependency injection and parameterization.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/lib/internal/Magento/Framework/ObjectManager/Test/Unit/Code/Generator/_files/SampleFactory.txt#2025-04-21_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nnamespace Magento\\Framework\\ObjectManager\\Code\\Generator;\n\n/**\n * Factory class for @see \\Magento\\Framework\\ObjectManager\\Code\\Generator\\Sample\n */\nclass SampleFactory\n{\n    /**\n     * Object Manager instance\n     * @var \\Magento\\Framework\\ObjectManagerInterface\n     */\n    protected $\\_objectManager = null;\n\n    /**\n     * Instance name to create\n     * @var string\n     */\n    protected $\\_instanceName = null;\n\n    /**\n     * Factory constructor\n     * @param \\Magento\\Framework\\ObjectManagerInterface $objectManager\n     * @param string $instanceName\n     */\n    public function __construct(\\Magento\\Framework\\ObjectManagerInterface $objectManager, $instanceName = '\\\\Magento\\\\Framework\\\\ObjectManager\\\\Code\\\\Generator\\\\Sample')\n    {\n        $this->_objectManager = $objectManager;\n        $this->_instanceName = $instanceName;\n    }\n\n    /**\n     * Create class instance with specified parameters\n     * @param array $data\n     * @return \\Magento\\Framework\\ObjectManager\\Code\\Generator\\Sample\n     */\n    public function create(array $data = [])\n    {\n        return $this->_objectManager->create($this->_instanceName, $data);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Remote TRepositoryInterface with Message Queue in PHP\nDESCRIPTION: This PHP class implements the TRepositoryInterfaceRemote which uses the Magento Framework's PublisherInterface to remotely handle CRUD operations on entities over a message queue. The constructor initializes the publisher as a dependency. Each method in the class, such as save, get, getById, getList, delete, and deleteById, publishes a message to a specified queue for handling these operations. The interface methods in this class, taking parameters like entity object, attributes, IDs, or criteria, are relayed through the message queue.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/lib/internal/Magento/Framework/MessageQueue/Test/Unit/Code/Generator/_files/TRemoteService.txt#2025-04-21_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nnamespace Magento\\Framework\\MessageQueue\\Code\\Generator;\n\n/**\n * Remote class for @see \\Magento\\Framework\\MessageQueue\\Code\\Generator\\TRepositoryInterface\n */\nclass TRepositoryInterfaceRemote implements TRepositoryInterface\n{\n    /**\n     * Publisher\n     *\n     * @var \\Magento\\Framework\\MessageQueue\\PublisherInterface\n     */\n    protected $publisher = null;\n\n    /**\n     * Initialize dependencies.\n     *\n     * @param \\Magento\\Framework\\MessageQueue\\PublisherInterface $publisher\n     */\n    public function __construct(\\Magento\\Framework\\MessageQueue\\PublisherInterface $publisher)\n    {\n        $this->publisher = $publisher;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public function save(\\Magento\\Framework\\MessageQueue\\Code\\Generator\\TInterface $t) : \\Magento\\Framework\\MessageQueue\\Code\\Generator\\TInterface\n    {\n        return $this->publisher->publish(\n            'magento.framework.messageQueue.code.generator.tRepositoryInterface.save',\n            ['t' => $t]\n        );\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public function get(string $attribute, int $typeId = null) : \\Magento\\Framework\\MessageQueue\\Code\\Generator\\TInterface\n    {\n        return $this->publisher->publish(\n            'magento.framework.messageQueue.code.generator.tRepositoryInterface.get',\n            ['attribute' => $attribute, 'typeId' => $typeId]\n        );\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public function getById(int $tId) : \\Magento\\Framework\\MessageQueue\\Code\\Generator\\TInterface\n    {\n        return $this->publisher->publish(\n            'magento.framework.messageQueue.code.generator.tRepositoryInterface.getById',\n            ['tId' => $tId]\n        );\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public function getList(\\Magento\\Framework\\Api\\SearchCriteriaInterface $searchCriteria)\n    {\n        return $this->publisher->publish(\n            'magento.framework.messageQueue.code.generator.tRepositoryInterface.getList',\n            ['searchCriteria' => $searchCriteria]\n        );\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public function delete(\\Magento\\Framework\\MessageQueue\\Code\\Generator\\TInterface $t) : bool\n    {\n        return $this->publisher->publish(\n            'magento.framework.messageQueue.code.generator.tRepositoryInterface.delete',\n            ['t' => $t]\n        );\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public function deleteById(int $tId) : bool\n    {\n        return $this->publisher->publish(\n            'magento.framework.messageQueue.code.generator.tRepositoryInterface.deleteById',\n            ['tId' => $tId]\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Saving Currency Rates in Magento 2\nDESCRIPTION: In SaveRates.php, this snippet provides functionality to save the conversion rates for various currencies defined in the system. Administrators can input updated rates which are then stored for use in transactions.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/app/code/Magento/CurrencySymbol/README.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace CurrencySymbol\\Controller\\Adminhtml\\System\\Currency;\n\nclass SaveRates extends \\Magento\\Backend\\App\\Action\n{\n    // Controller action to save currency conversion rates\n}\n\n```\n\n----------------------------------------\n\nTITLE: Bulk Assigning Sources in Magento Admin for Inventory Management in PHP\nDESCRIPTION: The BulkAssignPost controller allows for bulk assignment of product sources in the Magento admin panel. It processes requests to associate multiple products with designated inventory sources, facilitating better stock management. Dependencies include Magento's controller and request handling modules.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/dev/tests/static/testsuite/Magento/Test/Php/_files/phpcpd/blacklist/inventory.txt#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace Magento\\InventoryCatalogAdminUi\\Controller\\Adminhtml\\Source;\n\nclass BulkAssignPost extends \\Magento\\Backend\\App\\Action {\n    // Controller logic for bulk assigning sources\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Complex Object Attribute with Type Declaration - PHP\nDESCRIPTION: This method sets a complex object attribute with a type declaration, accepting a BundleOptionInterface object as a parameter and returning the current instance for chaining.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/lib/internal/Magento/Framework/Api/Test/Unit/Code/Generator/_files/SampleExtension.txt#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n    /**\n     * @param \\Magento\\Bundle\\Api\\Data\\BundleOptionInterface $complexObjectAttributeWithTypeDeclaration\n     * @return $this\n     */\n    public function setComplexObjectAttributeWithTypeDeclaration(\\Magento\\Bundle\\Api\\Data\\BundleOptionInterface $complexObjectAttributeWithTypeDeclaration)\n    {\n        $this->setData('complex_object_attribute_with_type_declaration', $complexObjectAttributeWithTypeDeclaration);\n        return $this;\n    }\n```\n\n----------------------------------------\n\nTITLE: Implementing Option Value Interface in Magento Model\nDESCRIPTION: Models must implement Magento\\Framework\\Option\\ArrayInterface to create value-label pairs for forms. Failure to implement this interface will result in an exception being thrown.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/lib/internal/Magento/Framework/Option/README.md#2025-04-21_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse Magento\\Framework\\Option\\ArrayInterface;\n```\n\n----------------------------------------\n\nTITLE: Getting Customer by ID via Message Queue\nDESCRIPTION: This snippet implements the getById method of the CustomerRepositoryInterface by publishing a message to the 'magento.customer.api.customerRepositoryInterface.getById' queue. It passes the customer's ID as a parameter in the message body, allowing for asynchronous retrieval.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/lib/internal/Magento/Framework/MessageQueue/Test/Unit/Code/Generator/_files/RemoteService.txt#2025-04-21_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n    /**\n     * @inheritdoc\n     */\n    public function getById($customerId)\n    {\n        return $this->publisher->publish(\n            'magento.customer.api.customerRepositoryInterface.getById',\n            ['customerId' => $customerId]\n        );\n    }\n```\n\n----------------------------------------\n\nTITLE: Setting Complex Object Attribute - PHP\nDESCRIPTION: This method sets a complex object attribute, taking an array of OptionInterface objects as a parameter. It returns the current instance for chaining.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/lib/internal/Magento/Framework/Api/Test/Unit/Code/Generator/_files/SampleExtension.txt#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n    /**\n     * @param \\Magento\\Bundle\\Api\\Data\\OptionInterface[] $complexObjectAttribute\n     * @return $this\n     */\n    public function setComplexObjectAttribute($complexObjectAttribute)\n    {\n        $this->setData('complex_object_attribute', $complexObjectAttribute);\n        return $this;\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring MSRP Price Calculator in Magento 2\nDESCRIPTION: Example of configuring custom MSRP price calculators for configurable products using dependency injection in di.xml. This configuration allows developers to specify product-type specific price calculators.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/app/code/Magento/Msrp/README.md#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<type name=\"Magento\\Msrp\\Pricing\\MsrpPriceCalculator\">\n    <arguments>\n        <argument name=\"msrpPriceCalculators\" xsi:type=\"array\">\n            <item name=\"configurable\" xsi:type=\"array\">\n                <item name=\"productType\" xsi:type=\"const\">Magento\\ConfigurableProduct\\Model\\Product\\Type\\Configurable::TYPE_CODE</item>\n                <item name=\"priceCalculator\" xsi:type=\"object\">Magento\\MsrpConfigurableProduct\\Pricing\\MsrpPriceCalculator</item>\n            </item>\n        </argument>\n    </arguments>\n</type>\n```\n\n----------------------------------------\n\nTITLE: Authenticating Customer Login Interface\nDESCRIPTION: Interface for authenticating a customer using a secret key, providing a mechanism for admin users to log in as a specific customer account\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/app/code/Magento/LoginAsCustomerApi/README.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n\\Magento\\LoginAsCustomerApi\\Api\\AuthenticateCustomerBySecretInterface\n```\n\n----------------------------------------\n\nTITLE: Getting Complex Object Attribute - PHP\nDESCRIPTION: This method retrieves a complex object attribute. It can return an array of OptionInterface instances, or null if not set.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/lib/internal/Magento/Framework/Api/Test/Unit/Code/Generator/_files/SampleExtension.txt#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n    /**\n     * @return \\Magento\\Bundle\\Api\\Data\\OptionInterface[]|null\n     */\n    public function getComplexObjectAttribute()\n    {\n        return $this->_get('complex_object_attribute');\n    }\n```\n\n----------------------------------------\n\nTITLE: File Utility Operations in Magento 2\nDESCRIPTION: Provides core file management functionality for reading, writing, analyzing, and transferring files within the Magento framework. Supports CSV operations, mime-type detection, file size calculation, and HTTP file transfer.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/lib/internal/Magento/Framework/File/README.md#2025-04-21_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n// File Utility Operations\n* Reading/writing data from/to CSV-files\n* Determining mime-type of files based on their extension\n* Calculating file size\n* Sending contents of a file via HTTP (for download)\n* Uploading files\n```\n\n----------------------------------------\n\nTITLE: Dispatching `wishlist_update_item` Event in UpdateItemOptions Controller\nDESCRIPTION: This snippet demonstrates the dispatching of the `wishlist_update_item` event which allows for updating options of an existing wishlist item, capturing essential parameters like the updated wishlist and item.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/app/code/Magento/Wishlist/README.md#2025-04-21_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nnamespace Magento\\Wishlist\\Controller\\Index;\n\nclass UpdateItemOptions extends \\Magento\\Framework\\App\\Action\\Action\n{\n    public function execute()\n    {\n        // Logic for updating item options\n        $this->_eventManager->dispatch('wishlist_update_item', ['wishlist' => $wishlist, 'product' => $product, 'item' => $item]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Magento 2 Translation Methods in PHP\nDESCRIPTION: This snippet demonstrates how to call translation methods on different objects in Magento 2. It shows the use of __() method which is a standard translation function in Magento, as well as ___toString() which appears to be a custom method.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/dev/tests/integration/testsuite/Magento/Setup/Module/I18n/Parser/Adapter/Php/Tokenizer/_files/methodsCode.php.txt#2025-04-21_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\n$obj1->___toString('Irrelevant string');\n$obj2->__('Some string');\n$obj3->__('One more string');\n```\n\n----------------------------------------\n\nTITLE: Extending Magento CLI with Custom Command in XML\nDESCRIPTION: This XML snippet demonstrates how to add a new custom command to the Magento CLI using dependency injection configuration. It registers a new command 'test_me' implemented by the class Magento\\MyModule\\Console\\TestMeCommand.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/lib/internal/Magento/Framework/Console/README.md#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<type name=\"Magento\\Framework\\Console\\CommandListInterface\">\n    <arguments>\n        <argument name=\"commands\" xsi:type=\"array\">\n            <item name=\"test_me\" xsi:type=\"object\">Magento\\MyModule\\Console\\TestMeCommand</item>\n        </argument>\n    </arguments>\n</type>\n```\n\n----------------------------------------\n\nTITLE: Moving Menu Item with Plugin Support - PHP\nDESCRIPTION: This method moves a menu item from one position to another in the menu structure. It checks for any plugins that could influence this operation.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/lib/internal/Magento/Framework/Interception/Test/Unit/Code/Generator/_files/ReflectionIntersectionTypeSampleInterceptor.txt#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\npublic function move($itemId, $toItemId, $sortIndex = null)\n{\n    $pluginInfo = $this->pluginList->getNext($this->subjectType, 'move');\n    return $pluginInfo ? $this->___callPlugins('move', func_get_args(), $pluginInfo) : parent::move($itemId, $toItemId, $sortIndex);\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Magento2 Admin Controller Classes\nDESCRIPTION: A comprehensive list of Magento2 admin controller classes showing their namespace hierarchy and organization. These classes handle various administrative tasks including session management, product handling, CMS operations, and inventory management.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/dev/tests/static/testsuite/Magento/Test/Integrity/Magento/Backend/_files/controller_acl_test_whitelist_ce.txt#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nMagento\\Security\\Controller\\Adminhtml\\Session\\Activity\nMagento\\Security\\Controller\\Adminhtml\\Session\\LogoutAll\nMagento\\Backend\\Controller\\Adminhtml\\Denied\nMagento\\Backend\\Controller\\Adminhtml\\Noroute\\Index\nMagento\\Directory\\Controller\\Adminhtml\\Json\\CountryRegion\nMagento\\Tax\\Controller\\Adminhtml\\Rule\\AjaxLoadRates\nMagento\\Bundle\\Controller\\Adminhtml\\Product\\Initialization\\Helper\\Plugin\\Bundle\nMagento\\CatalogUrlRewrite\\Plugin\\Catalog\\Controller\\Adminhtml\\Product\\Initialization\\Helper\nMagento\\Catalog\\Controller\\Adminhtml\\Product\\Builder\nMagento\\Catalog\\Controller\\Adminhtml\\Product\\Initialization\\Helper\nMagento\\Catalog\\Controller\\Adminhtml\\Product\\Initialization\\Helper\\HandlerFactory\nMagento\\Catalog\\Controller\\Adminhtml\\Product\\Initialization\\Helper\\Plugin\\Handler\\Composite\nMagento\\Catalog\\Controller\\Adminhtml\\Product\\Initialization\\StockDataFilter\nMagento\\Cms\\Controller\\Adminhtml\\Page\\PostDataProcessor\nMagento\\Config\\Controller\\Adminhtml\\System\\ConfigSectionChecker\nMagento\\ConfigurableProduct\\Controller\\Adminhtml\\Product\\Builder\\Plugin\nMagento\\ConfigurableProduct\\Controller\\Adminhtml\\Product\\Initialization\\Helper\\Plugin\\Configurable\nMagento\\ConfigurableProduct\\Controller\\Adminhtml\\Product\\Initialization\\Helper\\Plugin\\UpdateConfigurations\nMagento\\Downloadable\\Controller\\Adminhtml\\Product\\Initialization\\Helper\\Plugin\\Downloadable\nMagento\\Paypal\\Controller\\Adminhtml\\Transparent\\RequestSecureToken\nMagento\\Paypal\\Controller\\Adminhtml\\Transparent\\Response\nMagento\\Paypal\\Controller\\Adminhtml\\Transparent\\Redirect\nMagento\\Sales\\Controller\\Adminhtml\\Order\\CreditmemoLoader\nMagento\\Search\\Controller\\Adminhtml\\Synonyms\\ResultPageBuilder\nMagento\\Shipping\\Controller\\Adminhtml\\Order\\ShipmentLoader\nMagento\\Swatches\\Controller\\Adminhtml\\Product\\Attribute\\Plugin\\Save\nMagento\\Ui\\Controller\\Adminhtml\\Export\\GridToCsv\nMagento\\Ui\\Controller\\Adminhtml\\Export\\GridToXml\nMagento\\Catalog\\Controller\\Adminhtml\\Product\\Initialization\\Helper\\AttributeFilter\nMagento\\Inventory\\Controller\\Adminhtml\\Source\\SourceCarrierDataProcessor\nMagento\\Inventory\\Controller\\Adminhtml\\Source\\SourceHydrator\nMagento\\Inventory\\Controller\\Adminhtml\\Stock\\StockSaveProcessor\nMagento\\Inventory\\Controller\\Adminhtml\\Stock\\StockSourceLinkProcessor\nMagento\\InventoryCatalogAdminUi\\Controller\\Adminhtml\\Bulk\\BulkPageProcessor\n```\n\n----------------------------------------\n\nTITLE: Defining Containers in Magento 2 Layout XML\nDESCRIPTION: Shows how to define containers in Magento 2 layout XML. The example demonstrates creating a container with a specific name and HTML tag, along with setting attributes like htmlClass and htmlId.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/dev/tests/integration/testsuite/Magento/Framework/Filesystem/_files/foo/file_three.txt#2025-04-21_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<container name=\"container.name\" htmlTag=\"div\" htmlClass=\"class-name\" htmlId=\"container-id\">\n    <!-- Container content goes here -->\n</container>\n```\n\n----------------------------------------\n\nTITLE: Defining SampleMixed Proxy Class in Magento 2\nDESCRIPTION: This code defines a proxy class named SampleMixed_Proxy that extends the SampleMixed class and implements the NoninterceptableInterface. It uses the ObjectManager to handle the creation and management of SampleMixed instances, enabling lazy loading and potentially other proxy-related functionalities.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/lib/internal/Magento/Framework/ObjectManager/Test/Unit/Code/Generator/_files/SampleMixedProxy.txt#2025-04-21_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nnamespace Magento\\Framework\\ObjectManager\\Code\\Generator;\n\n/**\n * Proxy class for @see \\Magento\\Framework\\ObjectManager\\Code\\Generator\\SampleMixed\n */\nclass SampleMixed_Proxy extends SampleMixed implements \\Magento\\Framework\\ObjectManager\\NoninterceptableInterface\n{\n    /**\n     * Object Manager instance\n     *\n     * @var \\Magento\\Framework\\ObjectManagerInterface\n     */\n    protected $_objectManager = null;\n\n    /**\n     * Proxied instance name\n     *\n     * @var string\n     */\n    protected $_instanceName = null;\n\n    /**\n     * Proxied instance\n     *\n     * @var \\Magento\\Framework\\ObjectManager\\Code\\Generator\\SampleMixed\n     */\n    protected $_subject = null;\n\n    /**\n     * Instance shareability flag\n     *\n     * @var bool\n     */\n    protected $_isShared = null;\n\n    /**\n     * Proxy constructor\n     *\n     * @param \\Magento\\Framework\\ObjectManagerInterface $objectManager\n     * @param string $instanceName\n     * @param bool $shared\n     */\n    public function __construct(\\Magento\\Framework\\ObjectManagerInterface $objectManager, $instanceName = '\\\\Magento\\\\Framework\\\\ObjectManager\\\\Code\\\\Generator\\\\SampleMixed', $shared = true)\n    {\n        $this->_objectManager = $objectManager;\n        $this->_instanceName = $instanceName;\n        $this->_isShared = $shared;\n    }\n\n    /**\n     * @return array\n     */\n    public function __sleep()\n    {\n        return ['_subject', '_isShared', '_instanceName'];\n    }\n\n    /**\n     * Retrieve ObjectManager from global scope\n     */\n    public function __wakeup()\n    {\n        $this->_objectManager = \\Magento\\Framework\\App\\ObjectManager::getInstance();\n    }\n\n    /**\n     * Clone proxied instance\n     */\n    public function __clone()\n    {\n        if ($this->_subject) {\n            $this->_subject = clone $this->_getSubject();\n        }\n    }\n\n    /**\n     * Debug proxied instance\n     */\n    public function __debugInfo()\n    {\n        return ['i' => $this->_subject];\n    }\n\n    /**\n     * Get proxied instance\n     *\n     * @return \\Magento\\Framework\\ObjectManager\\Code\\Generator\\SampleMixed\n     */\n    protected function _getSubject()\n    {\n        if (!$this->_subject) {\n            $this->_subject = true === $this->_isShared\n                ? $this->_objectManager->get($this->_instanceName)\n                : $this->_objectManager->create($this->_instanceName);\n        }\n        return $this->_subject;\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function setMixed(mixed $mixed = null) : void\n    {\n        $this->_getSubject()->setMixed($mixed);\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function getMixed() : mixed\n    {\n        return $this->_getSubject()->getMixed();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Customer by Email via Message Queue\nDESCRIPTION: This snippet implements the get method of the CustomerRepositoryInterface by publishing a message to the 'magento.customer.api.customerRepositoryInterface.get' queue. It passes the customer's email and website ID as parameters in the message body. This enables asynchronous retrieval of customer data by email.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/lib/internal/Magento/Framework/MessageQueue/Test/Unit/Code/Generator/_files/RemoteService.txt#2025-04-21_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n    /**\n     * @inheritdoc\n     */\n    public function get($email, $websiteId = null)\n    {\n        return $this->publisher->publish(\n            'magento.customer.api.customerRepositoryInterface.get',\n            ['email' => $email, 'websiteId' => $websiteId]\n        );\n    }\n```\n\n----------------------------------------\n\nTITLE: Defining Cron Job for MySQL Message Queue Cleanup in Magento 2\nDESCRIPTION: This snippet shows the configuration for a cron job named 'mysqlmq_clean_messages' in the etc/crontab.xml file. The job is responsible for cleaning up old messages from the database.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/app/code/Magento/MysqlMq/README.md#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<cron group=\"mysqlmq_clean_messages\">\n    <job name=\"mysqlmq_clean_messages\" instance=\"Magento\\MysqlMq\\Cron\\CleanMessages\" method=\"execute\" />\n</cron>\n```\n\n----------------------------------------\n\nTITLE: Extending Magento_NewsletterGraphQl Module\nDESCRIPTION: Guidance on extending the Magento_NewsletterGraphQl module for developers. It mentions Magento's extension mechanism, plug-ins, and dependency injection as ways to interact with and override the module's functionality.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/app/code/Magento/NewsletterGraphQl/README.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## Extensibility\n\nExtension developers can interact with the Magento_NewsletterGraphQl module. For more information about the Magento extension mechanism, see [Magento plug-ins](https://developer.adobe.com/commerce/php/development/components/plugins/).\n\n[The Magento dependency injection mechanism](https://developer.adobe.com/commerce/php/development/components/dependency-injection/) enables you to override the functionality of the Magento_NewsletterGraphQl module.\n```\n\n----------------------------------------\n\nTITLE: Extending Search Results in Magento Framework PHP\nDESCRIPTION: This PHP snippet defines a class named SampleSearchResults, which extends the Magento\\Framework\\Api\\SearchResults class. It contains a method getItems() that overrides the parent method to return an array of items. The method is expected to return an array of objects of type \\Magento\\Framework\\Api\\Code\\Generator\\Sample. Prerequisites include having the Magento Framework API library available.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/lib/internal/Magento/Framework/Api/Test/Unit/Code/Generator/_files/SampleSearchResults.txt#2025-04-21_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nnamespace Magento\\Framework\\Api\\Code\\Generator;\\n\\nclass SampleSearchResults extends \\Magento\\Framework\\Api\\SearchResults\\n{\\n    /**\\n     * Returns array of items\\n     *\\n     * @return \\Magento\\Framework\\Api\\Code\\Generator\\Sample[]\\n     */\\n    public function getItems()\\n    {\\n        return parent::getItems();\\n    }\\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Gallery Switch Strategy in view.xml\nDESCRIPTION: This code snippet demonstrates how to configure the gallery image switch strategy in the theme's `view.xml` file.  It sets the `gallery_switch_strategy` variable to `replace`, which means that the parent configurable product images will be replaced by the simple product images upon a configuration change.  The `vars` tag is used to define module-specific variables that can be accessed in the theme.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/app/code/Magento/ConfigurableProduct/README.md#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<vars module=\"Magento_ConfigurableProduct\">\n    <var name=\"gallery_switch_strategy\">replace</var>\n</vars>\n```\n\n----------------------------------------\n\nTITLE: Using Update Handles in Magento 2 Layout XML\nDESCRIPTION: Shows how to use update handles to include other layout files in Magento 2. This allows for modular layout definitions and reusing layout configurations across multiple pages.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/dev/tests/integration/testsuite/Magento/Framework/Filesystem/_files/foo/file_three.txt#2025-04-21_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<update handle=\"another_layout_handle\" />\n```\n\n----------------------------------------\n\nTITLE: Deleting Customer via Message Queue\nDESCRIPTION: This snippet implements the delete method of the CustomerRepositoryInterface by publishing a message to the 'magento.customer.api.customerRepositoryInterface.delete' queue. It passes the customer data as a parameter. Asynchronous deletion of a customer is enabled.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/lib/internal/Magento/Framework/MessageQueue/Test/Unit/Code/Generator/_files/RemoteService.txt#2025-04-21_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n    /**\n     * @inheritdoc\n     */\n    public function delete(\\Magento\\Customer\\Api\\Data\\CustomerInterface $customer)\n    {\n        return $this->publisher->publish(\n            'magento.customer.api.customerRepositoryInterface.delete',\n            ['customer' => $customer]\n        );\n    }\n```\n\n----------------------------------------\n\nTITLE: Defining JWT Manager Interface in Magento\nDESCRIPTION: Provides an interface for JWT management operations within the Magento framework, allowing for token creation, validation, and processing using the jwt-framework library\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/app/code/Magento/JwtFrameworkAdapter/README.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace Magento\\Framework\\Jwt;\n\ninterface JwtManagerInterface\n```\n\n----------------------------------------\n\nTITLE: Configuring Payment Specification for Multishipping Checkout\nDESCRIPTION: XML configuration example showing how to modify the payment specification for the multishipping checkout type using dependency injection configuration. This allows customization of payment behavior in the multishipping flow.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/app/code/Magento/Multishipping/README.md#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<type name=\"Magento\\Multishipping\\Model\\Checkout\\Type\\Multishipping\">\n     <arguments>\n         <argument name=\"paymentSpecification\" xsi:type=\"object\">multishippingPaymentSpecification</argument>\n     </arguments>\n</type>\n```\n\n----------------------------------------\n\nTITLE: Custom Implementation for Payment Method Integration in XML\nDESCRIPTION: This XML snippet illustrates how to provide custom implementations for the instant purchase features. It specifies custom classes for availability checking, token formatting, and additional information providing, thereby enhancing user experience.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/app/code/Magento/InstantPurchase/README.md#2025-04-21_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<instant_purchase>\n    <available>Implementation_Of_Magento\\InstantPurchase\\PaymentMethodIntegration\\AvailabilityCheckerInterface</available>\n    <tokenFormat>Implementation_Of_Magento\\InstantPurchase\\PaymentMethodIntegration\\PaymentTokenFormatterInterface</tokenFormat>\n    <additionalInformation>Implementation_Of_Magento\\InstantPurchase\\PaymentMethodIntegration\\PaymentAdditionalInformationProviderInterface</additionalInformation>\n</instant_purchase>\n```\n\n----------------------------------------\n\nTITLE: Magento CLI Command for Image Resizing\nDESCRIPTION: Command line interface command to create resized product images in Magento.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/app/code/Magento/MediaStorage/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbin/magento catalog:images:resize\n```\n\n----------------------------------------\n\nTITLE: Swagger Generator for Inventory In-Store Pickup Web API in PHP\nDESCRIPTION: The Generator class generates Swagger documentation for the REST API endpoints related to in-store pickup features in Magento. It ensures that the API is well-documented and adheres to specified standards, aiding developers in understanding available endpoints and their uses.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/dev/tests/static/testsuite/Magento/Test/Php/_files/phpcpd/blacklist/inventory.txt#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace Magento\\InventoryInStorePickupWebapiExtension\\Model\\Rest\\Swagger;\n\nclass Generator {\n    // Logic for generating Swagger documentation\n}\n```\n\n----------------------------------------\n\nTITLE: Login as Customer Availability Interfaces\nDESCRIPTION: Interfaces for checking if login as customer functionality is enabled for specific customers and managing related configuration settings\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/app/code/Magento/LoginAsCustomerApi/README.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n\\Magento\\LoginAsCustomerApi\\Api\\IsLoginAsCustomerEnabledForCustomerInterface\n```\n\nLANGUAGE: php\nCODE:\n```\n\\Magento\\LoginAsCustomerApi\\Api\\Data\\IsLoginAsCustomerEnabledForCustomerResultInterface\n```\n\n----------------------------------------\n\nTITLE: Listing UI Components for CMS Module in Magento 2\nDESCRIPTION: This snippet lists the XML files defining UI components used by the CMS module in the admin area. These components are responsible for creating interactive interfaces for managing CMS blocks and pages.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/app/code/Magento/Cms/README.md#2025-04-21_snippet_2\n\nLANGUAGE: XML\nCODE:\n```\ncms_block_form.xml\ncms_block_listing.xml\ncms_page_form.xml\ncms_page_listing.xml\n```\n\n----------------------------------------\n\nTITLE: Observing Persistent Session Expired Event in PHP\nDESCRIPTION: This code snippet shows the event observed in the CheckExpirePersistentQuoteObserver execute method. It demonstrates how the module handles the 'persistent_session_expired' event.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/app/code/Magento/Persistent/README.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n\\Magento\\Persistent\\Observer\\CheckExpirePersistentQuoteObserver::execute\n```\n\n----------------------------------------\n\nTITLE: Authentication Data Management Interfaces\nDESCRIPTION: Interfaces for generating, saving, retrieving, and deleting authentication data for admin login as customer functionality\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/app/code/Magento/LoginAsCustomerApi/README.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n\\Magento\\LoginAsCustomerApi\\Api\\GenerateAuthenticationSecretInterface\n```\n\nLANGUAGE: php\nCODE:\n```\n\\Magento\\LoginAsCustomerApi\\Api\\SaveAuthenticationDataInterface\n```\n\nLANGUAGE: php\nCODE:\n```\n\\Magento\\LoginAsCustomerApi\\Api\\GetAuthenticationDataBySecretInterface\n```\n\nLANGUAGE: php\nCODE:\n```\n\\Magento\\LoginAsCustomerApi\\Api\\DeleteAuthenticationDataForUserInterface\n```\n\n----------------------------------------\n\nTITLE: Adding Menu Item with Plugin Support - PHP\nDESCRIPTION: This method adds a new item to the menu, utilizing the plugin list to check for any alterations or additional processing defined by plugins.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/lib/internal/Magento/Framework/Interception/Test/Unit/Code/Generator/_files/ReflectionIntersectionTypeSampleInterceptor.txt#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\npublic function add(\\Magento\\Backend\\Model\\Menu\\Item $item, $parentId = null, $index = null)\n{\n    $pluginInfo = $this->pluginList->getNext($this->subjectType, 'add');\n    return $pluginInfo ? $this->___callPlugins('add', func_get_args(), $pluginInfo) : parent::add($item, $parentId, $index);\n}\n```\n\n----------------------------------------\n\nTITLE: Data Provider for Sources by Order ID, SKU, and Quantity in PHP\nDESCRIPTION: This GetSourcesByOrderIdSkuAndQty class provides a data provider that retrieves inventory sources based on order ID, SKU, and quantity. It is used to facilitate order fulfillment and inventory tracking in Magento. Dependencies include various Magento data management components.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/dev/tests/static/testsuite/Magento/Test/Php/_files/phpcpd/blacklist/inventory.txt#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace Magento\\InventoryShippingAdminUi\\Ui\\DataProvider;\n\nclass GetSourcesByOrderIdSkuAndQty {\n    // Logic for acquiring source data based on order details\n}\n```\n\n----------------------------------------\n\nTITLE: Login Session Management Interfaces\nDESCRIPTION: Interfaces for tracking and managing admin and customer IDs during login as customer sessions, including checking session activity and setting/getting related IDs\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/app/code/Magento/LoginAsCustomerApi/README.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n\\Magento\\LoginAsCustomerApi\\Api\\IsLoginAsCustomerSessionActiveInterface\n```\n\nLANGUAGE: php\nCODE:\n```\n\\Magento\\LoginAsCustomerApi\\Api\\SetLoggedAsCustomerAdminIdInterface\n```\n\nLANGUAGE: php\nCODE:\n```\n\\Magento\\LoginAsCustomerApi\\Api\\SetLoggedAsCustomerCustomerIdInterface\n```\n\nLANGUAGE: php\nCODE:\n```\n\\Magento\\LoginAsCustomerApi\\Api\\GetLoggedAsCustomerAdminIdInterface\n```\n\nLANGUAGE: php\nCODE:\n```\n\\Magento\\LoginAsCustomerApi\\Api\\GetLoggedAsCustomerCustomerIdInterface\n```\n\n----------------------------------------\n\nTITLE: Referencing Magento Framework App Filesystem in PHP\nDESCRIPTION: This snippet demonstrates how to reference the Magento\\Framework\\App\\Filesystem library and use the DirectoryList class for accessing application directories in Magento 2.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/lib/internal/Magento/Framework/App/Filesystem/README.md#2025-04-21_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n\\Magento\\Framework\\App\\Filesystem\n```\n\nLANGUAGE: PHP\nCODE:\n```\n\\Magento\\Framework\\App\\Filesystem\\DirectoryList\n```\n\n----------------------------------------\n\nTITLE: Login as Customer Configuration Interface\nDESCRIPTION: Interface for checking Login as Customer extension configuration, including overall extension enablement, store view manual choice, and authentication data expiration\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/app/code/Magento/LoginAsCustomerApi/README.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n\\Magento\\LoginAsCustomerApi\\Api\\ConfigInterface\n```\n\n----------------------------------------\n\nTITLE: Defining Sales Quote Save After Event Observer in Magento 2 Checkout Module\nDESCRIPTION: This XML snippet defines an observer for the 'sales_quote_save_after' event in the Magento_Checkout module. It specifies the observer class that will handle this event.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/app/code/Magento/Checkout/README.md#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<sales_quote_save_after event in\\n      Magento\\Checkout\\Observer\\SalesQuoteSaveAfterObserver file.>\n```\n\n----------------------------------------\n\nTITLE: Describing PaypalGraphQl Module Functionality in Markdown\nDESCRIPTION: This snippet explains the purpose of the PaypalGraphQl module. It provides resolver information for using Paypal payment methods through GraphQL in Magento 2.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/app/code/Magento/PaypalGraphQl/README.md#2025-04-21_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# PaypalGraphQl\n\n**PaypalGraphQl** provides resolver information for using Paypal payment methods via GraphQl.\n```\n\n----------------------------------------\n\nTITLE: Retrieving Magento Version and Edition\nDESCRIPTION: Allows external systems to query the current Magento version and edition information via HTTP GET request. Useful for system compatibility checks and integration purposes.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/app/code/Magento/Version/README.md#2025-04-21_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nMagento\\Version\n```\n\n----------------------------------------\n\nTITLE: Constructing Interceptor in Magento 2 - PHP\nDESCRIPTION: This snippet initializes the Interceptor class with necessary dependencies such as LoggerInterface, Menu Item Factory, and Serializer Interface. The constructor calls the parent constructor along with initialization of the Interceptor functionality.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/lib/internal/Magento/Framework/Interception/Test/Unit/Code/Generator/_files/ReflectionIntersectionTypeSampleInterceptor.txt#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\npublic function __construct(\\Psr\\Log\\LoggerInterface $logger, $pathInMenuStructure = '', ?\\Magento\\Backend\\Model\\Menu\\Item\\Factory $menuItemFactory = null, ?\\Magento\\Framework\\Serialize\\SerializerInterface $serializer = null)\n{\n    $this->___init();\n    parent::__construct($logger, $pathInMenuStructure, $menuItemFactory, $serializer);\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Complex Object Attribute with Type Declaration - PHP\nDESCRIPTION: This method retrieves a complex object attribute that includes type declaration. It returns an instance of BundleOptionInterface or null if not set.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/lib/internal/Magento/Framework/Api/Test/Unit/Code/Generator/_files/SampleExtension.txt#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n    /**\n     * @return \\Magento\\Bundle\\Api\\Data\\BundleOptionInterface|null\n     */\n    public function getComplexObjectAttributeWithTypeDeclaration()\n    {\n        return $this->_get('complex_object_attribute_with_type_declaration');\n    }\n```\n\n----------------------------------------\n\nTITLE: Setting Value with Plugin Support - PHP\nDESCRIPTION: This method sets the value for the menu item while incorporating plugin behavior that can enhance or modify the setting operation if defined.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/lib/internal/Magento/Framework/Interception/Test/Unit/Code/Generator/_files/ReflectionIntersectionTypeSampleInterceptor.txt#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\npublic function setValue(\\Magento\\Backend\\Model\\Menu&\\Magento\\Framework\\Interception\\Code\\Generator\\ReflectionIntersectionTypeSample $value)\n{\n    $pluginInfo = $this->pluginList->getNext($this->subjectType, 'setValue');\n    return $pluginInfo ? $this->___callPlugins('setValue', func_get_args(), $pluginInfo) : parent::setValue($value);\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Currency Rates in Magento 2\nDESCRIPTION: This snippet in FetchRates.php retrieves the conversion rate for a specified currency. It ensures that all defined currencies within the Magento system are supported. The functionality allows admin users to easily fetch current currency exchange rates.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/app/code/Magento/CurrencySymbol/README.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace CurrencySymbol\\Controller\\Adminhtml\\System\\Currency;\n\nclass FetchRates extends \\Magento\\Backend\\App\\Action\n{\n    // Controller action to fetch currency conversion rates\n}\n\n```\n\n----------------------------------------\n\nTITLE: Message Queue Consumer Configuration\nDESCRIPTION: Defines the message queue consumer that handles media gallery rendition updates. The consumer processes updates for specific paths or all renditions if an empty array is provided.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/app/code/Magento/MediaGalleryRenditions/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nmedia.gallery.renditions.update\n```\n\n----------------------------------------\n\nTITLE: Dispatching `wishlist_add_product` Event in Controller\nDESCRIPTION: This snippet shows how to dispatch the `wishlist_add_product` event when a product is added to a wishlist in the controller. It captures crucial parameters like the wishlist and product details.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/app/code/Magento/Wishlist/README.md#2025-04-21_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nnamespace Magento\\Wishlist\\Controller\\Index;\n\nclass Add extends \\Magento\\Framework\\App\\Action\\Action\n{\n    public function execute()\n    {\n        // Logic for adding a product to the wishlist\n        $this->_eventManager->dispatch('wishlist_add_product', ['wishlist' => $wishlist, 'product' => $product, 'item' => $item]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Dispatching `wishlist_add_item` Event in Wishlist Model\nDESCRIPTION: This snippet dispatches the `wishlist_add_item` event whenever a new item is added to the wishlist. It allows other components to respond to this action and perform additional logic.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/app/code/Magento/Wishlist/README.md#2025-04-21_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nnamespace Magento\\Wishlist\\Model;\n\nclass Wishlist\n{\n    public function addItem($item)\n    {\n        // Dispatch `wishlist_add_item` event after adding an item\n        $this->_eventManager->dispatch('wishlist_add_item', ['item' => $item]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Last Menu Item with Plugin Support - PHP\nDESCRIPTION: This method checks if a specific menu item is the last item in the menu, incorporating potential plugin alterations to this logic.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/lib/internal/Magento/Framework/Interception/Test/Unit/Code/Generator/_files/ReflectionIntersectionTypeSampleInterceptor.txt#2025-04-21_snippet_8\n\nLANGUAGE: php\nCODE:\n```\npublic function isLast(\\Magento\\Backend\\Model\\Menu\\Item $item)\n{\n    $pluginInfo = $this->pluginList->getNext($this->subjectType, 'isLast');\n    return $pluginInfo ? $this->___callPlugins('isLast', func_get_args(), $pluginInfo) : parent::isLast($item);\n}\n```\n\n----------------------------------------\n\nTITLE: Running Media Gallery Synchronization Command in Magento 2\nDESCRIPTION: This console command synchronizes media storage and media assets in the database for the Magento_MediaGallerySynchronization module.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/app/code/Magento/MediaGallerySynchronization/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbin/magento media-gallery:sync\n```\n\n----------------------------------------\n\nTITLE: Describing Magento_OrderCancellationUi Module Functionality in Markdown\nDESCRIPTION: This snippet outlines the key features and functionality of the Magento_OrderCancellationUi module. It specifies which order statuses can be cancelled and mentions the refund processing for paid orders.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/app/code/Magento/OrderCancellationUi/README.md#2025-04-21_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# Magento_OrderCancellationUi module\n\nThis module allows to cancel an order and specify the order cancellation reason in the storefront. Only orders in `RECEIVED`, `PENDING` or `PROCESSING` statuses can be cancelled. If the customer has paid for the order a refund is processed.\n```\n\n----------------------------------------\n\nTITLE: Providing Sibling SKUs in Stock for Bundle Products in PHP\nDESCRIPTION: The SiblingSkuListInStockProvider class provides a list of sibling SKUs that are currently in stock for bundle products. This functionality ensures that inventory accuracy is maintained across related products. It is part of the indexing process for bundle products in Magento.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/dev/tests/static/testsuite/Magento/Test/Php/_files/phpcpd/blacklist/inventory.txt#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace Magento\\InventoryBundleProductIndexer\\Indexer\\SourceItem;\n\nclass SiblingSkuListInStockProvider {\n    // Methods for retrieving sibling SKUs in stock\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation - Magento Test Module Description\nDESCRIPTION: Simple markdown documentation explaining the purpose of the functional test module for Magento's Catalog URL Rewrite GraphQL functionality.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/app/code/Magento/CatalogUrlRewriteGraphQl/Test/Mftf/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Catalog Url Rewrite Graph Ql Functional Tests\n\nThe Functional Test Module for **Magento Catalog Url Rewrite Graph Ql** module.\n```\n\n----------------------------------------\n\nTITLE: Initializing Publisher Dependency\nDESCRIPTION: This snippet initializes the CustomerRepositoryInterfaceRemote class with a dependency on the Magento\\Framework\\MessageQueue\\PublisherInterface. This publisher is used to send messages to the message queue for remote execution of customer repository operations. The constructor injects the publisher instance.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/lib/internal/Magento/Framework/MessageQueue/Test/Unit/Code/Generator/_files/RemoteService.txt#2025-04-21_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n    /**\n     * Publisher\n     *   @var \\Magento\\Framework\\MessageQueue\\PublisherInterface\n     */\n    protected $publisher = null;\n\n    /**\n     * Initialize dependencies.\n     *\n     * @param \\Magento\\Framework\\MessageQueue\\PublisherInterface $publisher\n     */\n    public function __construct(\\Magento\\Framework\\MessageQueue\\PublisherInterface $publisher)\n    {\n        $this->publisher = $publisher;\n    }\n```\n\n----------------------------------------\n\nTITLE: Deleting Customer by ID via Message Queue\nDESCRIPTION: This snippet implements the deleteById method of the CustomerRepositoryInterface by publishing a message to the 'magento.customer.api.customerRepositoryInterface.deleteById' queue. It passes the customer's ID as a parameter for asynchronous deletion.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/lib/internal/Magento/Framework/MessageQueue/Test/Unit/Code/Generator/_files/RemoteService.txt#2025-04-21_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n    /**\n     * @inheritdoc\n     */\n    public function deleteById($customerId)\n    {\n        return $this->publisher->publish(\n            'magento.customer.api.customerRepositoryInterface.deleteById',\n            ['customerId' => $customerId]\n        );\n    }\n```\n\n----------------------------------------\n\nTITLE: UI Component Configuration Files in Magento_Backend Module\nDESCRIPTION: The Magento_Backend module uses two XML configuration files for its UI components: design_config_form.xml for form configuration and design_config_listing.xml for listing configuration.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/app/code/Magento/Backend/README.md#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\nview/adminhtml/ui_component/design_config_form.xml\nview/adminhtml/ui_component/design_config_listing.xml\n```\n\n----------------------------------------\n\nTITLE: Dispatching Persistent Session Expired Event in PHP\nDESCRIPTION: This code snippet shows the event dispatched in the UnsetCookie execute method. It demonstrates how the module triggers the 'persistent_session_expired' event.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/app/code/Magento/Persistent/README.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n\\Magento\\Persistent\\Controller\\Index\\UnsetCookie::execute\n```\n\n----------------------------------------\n\nTITLE: Handling Variadic and Reference Method Interception in PHP\nDESCRIPTION: Demonstrates advanced method interception techniques including variadic parameters, by-reference parameters, and complex method signatures while preserving original method behavior through plugin mechanisms.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/lib/internal/Magento/Framework/Interception/Test/Unit/Code/Generator/_files/Interceptor.txt#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\npublic function firstVariadicParameter(... $variadicValue)\n{\n    $pluginInfo = $this->pluginList->getNext($this->subjectType, 'firstVariadicParameter');\n    return $pluginInfo ? $this->___callPlugins('firstVariadicParameter', func_get_args(), $pluginInfo) : parent::firstVariadicParameter(... $variadicValue);\n}\n\npublic function byRefVariadic(&... $variadicValue)\n{\n    $pluginInfo = $this->pluginList->getNext($this->subjectType, 'byRefVariadic');\n    return $pluginInfo ? $this->___callPlugins('byRefVariadic', func_get_args(), $pluginInfo) : parent::byRefVariadic(... $variadicValue);\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation Header for Magento Catalog GraphQL Tests\nDESCRIPTION: Header documentation explaining the purpose of the functional test module for Magento Catalog GraphQL.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/app/code/Magento/CatalogGraphQl/Test/Mftf/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Catalog Graph Ql Functional Tests\n\nThe Functional Test Module for **Magento Catalog Graph Ql** module.\n```\n\n----------------------------------------\n\nTITLE: Message Queue Consumer for Image Resizing\nDESCRIPTION: Message queue consumer identifier used for asynchronous product image resizing operations.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/app/code/Magento/MediaStorage/README.md#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nmedia.storage.catalog.image.resize\n```\n\n----------------------------------------\n\nTITLE: Setting String Attribute - PHP\nDESCRIPTION: This method allows setting a simple string attribute associated with a product. It accepts a string parameter and returns the current instance of the class for method chaining.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/lib/internal/Magento/Framework/Api/Test/Unit/Code/Generator/_files/SampleExtension.txt#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n    /**\n     * @param string $stringAttribute\n     * @return $this\n     */\n    public function setStringAttribute($stringAttribute)\n    {\n        $this->setData('string_attribute', $stringAttribute);\n        return $this;\n    }\n```\n\n----------------------------------------\n\nTITLE: Getting Value with Plugin Support - PHP\nDESCRIPTION: This method retrieves the value, allowing for the implementation of plugins using Magento's interceptor pattern. It checks if a plugin is available for the 'getValue' method and executes accordingly.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/lib/internal/Magento/Framework/Interception/Test/Unit/Code/Generator/_files/ReflectionIntersectionTypeSampleInterceptor.txt#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\npublic function getValue() : \\Magento\\Backend\\Model\\Menu&\\Magento\\Framework\\Interception\\Code\\Generator\\ReflectionIntersectionTypeSample\n{\n    $pluginInfo = $this->pluginList->getNext($this->subjectType, 'getValue');\n    return $pluginInfo ? $this->___callPlugins('getValue', func_get_args(), $pluginInfo) : parent::getValue();\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Menu Item with Plugin Support - PHP\nDESCRIPTION: This function handles the removal of a menu item by its ID, monitoring for plugin hooks that may affect the removal process.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/lib/internal/Magento/Framework/Interception/Test/Unit/Code/Generator/_files/ReflectionIntersectionTypeSampleInterceptor.txt#2025-04-21_snippet_6\n\nLANGUAGE: php\nCODE:\n```\npublic function remove($itemId)\n{\n    $pluginInfo = $this->pluginList->getNext($this->subjectType, 'remove');\n    return $pluginInfo ? $this->___callPlugins('remove', func_get_args(), $pluginInfo) : parent::remove($itemId);\n}\n```\n\n----------------------------------------\n\nTITLE: Deploy Sample Data Using Magento CLI\nDESCRIPTION: Deploys sample data modules using the Magento CLI command `sampledata:deploy`. This operation collects dependencies suggested in `composer.json` files. The Magento instance must be installed, and the command is executed in the Magento root directory.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/app/code/Magento/SampleData/README.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# bin/magento sampledata:deploy\n```\n\n----------------------------------------\n\nTITLE: Listing Code Library Functionalities in Markdown\nDESCRIPTION: This snippet outlines the main functionalities provided by the Code library in Magento 2, including service entity generation, content minification, class and argument reading, and various validation types.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/lib/internal/Magento/Framework/Code/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* Generating service entities - factories, proxies and interceptors.\n* Minifying content\n* Class, arguments reader\n* Varies validators - arguments, constructor, context aggregation, type duplication\n```\n\n----------------------------------------\n\nTITLE: Defining Module Dependencies in XML\nDESCRIPTION: XML configuration listing module dependencies for Magento_Integration module, specifying required base modules for proper functionality.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/app/code/Magento/Integration/README.md#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n- `Magento_Store`\n- `Magento_User`\n- `Magento_Security`\n```\n\n----------------------------------------\n\nTITLE: Gift Options Prepare Items Event\nDESCRIPTION: This event is dispatched in the `\\Magento\\GiftMessage\\Block\\Message\\Inline::getItems` method. It allows developers to modify the items before they are displayed in the gift message section.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/app/code/Magento/GiftMessage/README.md#2025-04-21_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n\"gift_options_prepare_items\"\n```\n\n----------------------------------------\n\nTITLE: Creating Database Tables for Magento_Authorization Module\nDESCRIPTION: The Magento_Authorization module creates two tables in the database using db_schema.xml: authorization_role and authorization_rule. These tables are essential for managing access control lists in the application.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/app/code/Magento/Authorization/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- `authorization_role`\n- `authorization_rule`\n```\n\n----------------------------------------\n\nTITLE: Message Queue Poison Pill Configuration\nDESCRIPTION: Configures handling for failed messages (poison pills) in message queues. Sets maxAttempts for retry attempts before messages are considered failed.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/dev/tests/static/testsuite/Magento/Test/Integrity/DBSchema/_files/primary_key_exemption_list.txt#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nqueue_poison_pill\n```\n\n----------------------------------------\n\nTITLE: Getting Parent Items for a Menu Item - PHP\nDESCRIPTION: This method retrieves all parent items for a given menu item, allowing for plugins to expand or modify the behavior during retrieval.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/lib/internal/Magento/Framework/Interception/Test/Unit/Code/Generator/_files/ReflectionIntersectionTypeSampleInterceptor.txt#2025-04-21_snippet_10\n\nLANGUAGE: php\nCODE:\n```\npublic function getParentItems($itemId)\n{\n    $pluginInfo = $this->pluginList->getNext($this->subjectType, 'getParentItems');\n    return $pluginInfo ? $this->___callPlugins('getParentItems', func_get_args(), $pluginInfo) : parent::getParentItems($itemId);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Currency Symbols in Magento 2\nDESCRIPTION: The Save.php snippet is designed to create new custom currency symbols within the Magento system. The functionality is aimed at administrators looking to personalize currency display for different markets.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/app/code/Magento/CurrencySymbol/README.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace CurrencySymbol\\Controller\\Adminhtml\\System\\Currencysymbol;\n\nclass Save extends \\Magento\\Backend\\App\\Action\n{\n    // Controller action to save custom currency symbols\n}\n\n```\n\n----------------------------------------\n\nTITLE: Reordering Menu Item with Plugin Support - PHP\nDESCRIPTION: This method allows reordering of an existing menu item, utilizing the plugin list to determine if additional behavior is required during the process.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/lib/internal/Magento/Framework/Interception/Test/Unit/Code/Generator/_files/ReflectionIntersectionTypeSampleInterceptor.txt#2025-04-21_snippet_7\n\nLANGUAGE: php\nCODE:\n```\npublic function reorder($itemId, $position)\n{\n    $pluginInfo = $this->pluginList->getNext($this->subjectType, 'reorder');\n    return $pluginInfo ? $this->___callPlugins('reorder', func_get_args(), $pluginInfo) : parent::reorder($itemId, $position);\n}\n```\n\n----------------------------------------\n\nTITLE: Admin Sales Order Create Index Layout\nDESCRIPTION: This layout is introduced in the `view/adminhtml/layout` directory and is used for the sales order creation index page in the admin panel. It allows for customization of the admin order creation interface.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/app/code/Magento/GiftMessage/README.md#2025-04-21_snippet_2\n\nLANGUAGE: XML\nCODE:\n```\n\"sales_order_create_index\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Customer Login Event Observer in Magento 2 Checkout Module\nDESCRIPTION: This XML snippet defines an observer for the 'customer_login' event in the frontend area of the Magento_Checkout module. It specifies the observer class responsible for loading the customer quote.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/app/code/Magento/Checkout/README.md#2025-04-21_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<customer_login event in `Magento\\Checkout\\Observer\\LoadCustomerQuoteObserver`>\n```\n\n----------------------------------------\n\nTITLE: UI Component: product_attributes_listing\nDESCRIPTION: This UI component, extended by the Magento_LayeredNavigation module in the `view/adminhtml/ui_component` directory, is related to the product attributes listing in the admin panel.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/app/code/Magento/LayeredNavigation/README.md#2025-04-21_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n\"product_attributes_listing\"\n```\n\n----------------------------------------\n\nTITLE: Observing catalogsearch_query_save_after Event in Magento 2\nDESCRIPTION: This snippet shows the event observed by the Magento_AdvancedSearch module. It is used in the SaveSearchQueryRelationsObserver file to handle actions after a search query is saved.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/app/code/Magento/AdvancedSearch/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- `catalogsearch_query_save_after` in the `Magento\\AdvancedSearch\\Model\\Recommendations\\SaveSearchQueryRelationsObserver` file.\n```\n\n----------------------------------------\n\nTITLE: Getting Menu Item by ID with Plugin Support - PHP\nDESCRIPTION: This function retrieves a menu item based on its ID, employing the interceptor mechanism to allow for plugin modifications before and after the retrieval process.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/lib/internal/Magento/Framework/Interception/Test/Unit/Code/Generator/_files/ReflectionIntersectionTypeSampleInterceptor.txt#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\npublic function get($itemId)\n{\n    $pluginInfo = $this->pluginList->getNext($this->subjectType, 'get');\n    return $pluginInfo ? $this->___callPlugins('get', func_get_args(), $pluginInfo) : parent::get($itemId);\n}\n```\n\n----------------------------------------\n\nTITLE: Gift Options Prepare Event\nDESCRIPTION: This event is dispatched in the `\\Magento\\GiftMessage\\Block\\Message\\Inline::isMessagesOrderAvailable` method. It enables developers to customize the availability of gift message options for an entity object.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/app/code/Magento/GiftMessage/README.md#2025-04-21_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n\"gift_options_prepare\"\n```\n\n----------------------------------------\n\nTITLE: Magento Catalog Events Configuration - Frontend Events\nDESCRIPTION: XML configuration for frontend-specific event observers in the Magento catalog system, handling customer login and logout events for product comparison functionality.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/app/code/Magento/Catalog/README.md#2025-04-21_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n- `/etc/frontend/events.xml`\n   - `customer_login`\n   - `customer_logout`\n```\n\n----------------------------------------\n\nTITLE: Page Layout Modification: 2columns-left\nDESCRIPTION: This module modifies the `2columns-left` page layout, moving the `catalog.leftnav` block into the `sidebar.main` container, affecting two-column layouts with a left sidebar.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/app/code/Magento/LayeredNavigation/README.md#2025-04-21_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n\"2columns-left\"\n```\n\n----------------------------------------\n\nTITLE: Layout Handles for Magento_AdvancedSearch in Admin Panel\nDESCRIPTION: These are the layout handles used by the Magento_AdvancedSearch module in the admin panel. They are located in the view/adminhtml/layout directory and define the structure of various admin pages related to catalog search.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/app/code/Magento/AdvancedSearch/README.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- `catalog_search_block`\n- `catalog_search_edit`\n- `catalog_search_relatedgrid`\n```\n\n----------------------------------------\n\nTITLE: Recommended CSS Selectors in Magento 2\nDESCRIPTION: Demonstrates the recommended CSS selector patterns in Magento 2, including class selectors, adjacent sibling selectors, and pseudo-class selectors.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/lib/web/css/docs/source/README.md#2025-04-21_snippet_5\n\nLANGUAGE: css\nCODE:\n```\n.nav {\n    ...\n}\n\n.nav + bar {\n    ...\n}\n\n.nav:not(.bar) {\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Layout Handle: catalog_category_view_type_layered\nDESCRIPTION: This layout handle is introduced by the Magento_LayeredNavigation module in the `view/frontend/layout` directory. It is used to customize the layout of category pages with layered navigation.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/app/code/Magento/LayeredNavigation/README.md#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n\"catalog_category_view_type_layered\"\n```\n\n----------------------------------------\n\nTITLE: Instantiating Magento 2 Phrase Objects\nDESCRIPTION: This snippet demonstrates how to create instances of the \\Magento\\Framework\\Phrase class.  It illustrates both using the fully qualified class name and using an assumed or aliased class name. This is fundamental for creating translatable text strings in Magento 2.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/setup/src/Magento/Setup/Test/Unit/Module/I18n/Parser/Adapter/Php/_files/objectsCode.php.txt#2025-04-21_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nnew \\Magento\\Framework\\Phrase('Testing');\nnew Phrase('More testing');\n```\n\n----------------------------------------\n\nTITLE: Frontend Layout Handle for Magento_AdvancedSearch\nDESCRIPTION: This is the layout handle used by the Magento_AdvancedSearch module on the frontend. It is located in the view/frontend/layout directory and defines the structure of the catalog search result page.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/app/code/Magento/AdvancedSearch/README.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n- `catalogsearch_result_index`\n```\n\n----------------------------------------\n\nTITLE: Extending Admin Notifications UI Component in Magento 2\nDESCRIPTION: This snippet specifies the configuration file used for extending admin notifications using UI components. It indicates the file path for customizing the notification area in the admin panel.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/app/code/Magento/AdminNotification/README.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nYou can extend admin notifications using the `view/adminhtml/ui_component/notification_area.xml` configuration file.\n```\n\n----------------------------------------\n\nTITLE: Configuring Sitemap Location in robots.txt\nDESCRIPTION: Specifies the location of the XML sitemap file for search engine crawlers. This directive helps search engines discover and index the site content efficiently.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/dev/tests/integration/testsuite/Magento/Config/Model/_files/robots.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nSitemap: http://store.com/sitemap.xml\n```\n\n----------------------------------------\n\nTITLE: Instantiating a PHP Class\nDESCRIPTION: This code snippet demonstrates how to create a new instance of a PHP class. The code creates an object named `$myClass` of the `MyClass` class.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/dev/tests/static/framework/tests/unit/testsuite/Magento/TestFramework/Utility/_files/create_new_instance.txt#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * Copyright © Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\n$myClass = new MyClass();\n```\n\n----------------------------------------\n\nTITLE: Registering Libraries in Magento 2 using ComponentRegistrar\nDESCRIPTION: This snippet demonstrates the registration of a library in Magento 2 using the ComponentRegistrar class. It uses the LIBRARY constant and requires the library name and directory path.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/lib/internal/Magento/Framework/Component/README.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nComponentRegistrar::register(ComponentRegistrar::LIBRARY, '<library name>', __DIR__);\n```\n\n----------------------------------------\n\nTITLE: MessageQueue Component Header\nDESCRIPTION: Markdown header and brief description of the MessageQueue component that provides AMQP support in Magento 2\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/app/code/Magento/MessageQueue/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# MessageQueue\n\n**MessageQueue** provides support of Advanced Message Queuing Protocol\n```\n\n----------------------------------------\n\nTITLE: Defining Non-Cacheable Block in Magento 2 Layout XML\nDESCRIPTION: This snippet demonstrates how to set a block as non-cacheable in Magento 2 layout XML files. Blocks marked as non-cacheable will prevent the entire page from being cached.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/app/code/Magento/PageCache/README.md#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<block class=\"Block\\Class\" name=\"blockname\" cacheable=\"false\" />\n```\n\n----------------------------------------\n\nTITLE: Magento Weee Module Dependencies\nDESCRIPTION: List of module dependencies required for Magento_Weee module installation and functionality\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/app/code/Magento/Weee/README.md#2025-04-21_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nDependencies:\n- Magento_Catalog\n- Magento_Checkout\n- Magento_Customer\n- Magento_Quote\n- Magento_Sales\n- Magento_Store\n- Magento_Tax\n```\n\n----------------------------------------\n\nTITLE: Database Tables Created by Integration Module\nDESCRIPTION: List of database tables created by the Magento_Integration module for managing OAuth and integration-related data.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/app/code/Magento/Integration/README.md#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\n- `oauth_consumer`\n- `oauth_token`\n- `oauth_nonce`\n- `integration`\n- `oauth_token_request_log`\n```\n\n----------------------------------------\n\nTITLE: Omitting Leading Zeros in Decimal Values\nDESCRIPTION: Example of the recommended practice of omitting leading zeros in decimal values in Magento 2 CSS.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/lib/web/css/docs/source/README.md#2025-04-21_snippet_31\n\nLANGUAGE: css\nCODE:\n```\nmargin-left: .5rem;\n```\n\n----------------------------------------\n\nTITLE: Remove Sample Data via Magento CLI\nDESCRIPTION: Removes installed sample data modules when they were deployed from the composer repository. The command `sampledata:remove` clears these modules from the current Magento setup, simplifying the cleanup process.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/app/code/Magento/SampleData/README.md#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n# bin/magento sampledata:remove\n```\n\n----------------------------------------\n\nTITLE: Magento Encryption Key Module Layout Definition\nDESCRIPTION: Defines the administrative layout for the encryption key management interface in Magento 2 admin panel\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/app/code/Magento/EncryptionKey/README.md#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\nadminhtml_crypt_key_index\n```\n\n----------------------------------------\n\nTITLE: Serializing Menu Items with Plugin Support - PHP\nDESCRIPTION: This method serializes the menu item object, checking for plugins that may modify the serialization process before executing the parent logic.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/lib/internal/Magento/Framework/Interception/Test/Unit/Code/Generator/_files/ReflectionIntersectionTypeSampleInterceptor.txt#2025-04-21_snippet_11\n\nLANGUAGE: php\nCODE:\n```\npublic function serialize()\n{\n    $pluginInfo = $this->pluginList->getNext($this->subjectType, 'serialize');\n    return $pluginInfo ? $this->___callPlugins('serialize', func_get_args(), $pluginInfo) : parent::serialize();\n}\n```\n\n----------------------------------------\n\nTITLE: Cron Configuration for Token Management\nDESCRIPTION: XML configuration for cron jobs related to cleaning up authentication failures and expired tokens in the Integration module.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/app/code/Magento/Integration/README.md#2025-04-21_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n- `outdated_authentication_failures_cleanup`\n- `expired_tokens_cleanups`\n```\n\n----------------------------------------\n\nTITLE: Admin Sales Order Create Load Block Data Layout\nDESCRIPTION: This layout is introduced in the `view/adminhtml/layout` directory. It is used during the sales order creation process to load block data, enabling developers to modify the data loading process.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/app/code/Magento/GiftMessage/README.md#2025-04-21_snippet_3\n\nLANGUAGE: XML\nCODE:\n```\n\"sales_order_create_load_block_data\"\n```\n\n----------------------------------------\n\nTITLE: Defining Blocks in Magento 2 Layout XML\nDESCRIPTION: Demonstrates how to define blocks in Magento 2 layout XML. The example shows creating a block with a specific template and class, and setting arguments for the block.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/dev/tests/integration/testsuite/Magento/Framework/Filesystem/_files/foo/file_three.txt#2025-04-21_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<block class=\"Magento\\Module\\Block\\Class\" name=\"block.name\" template=\"Module_Name::template.phtml\">\n    <arguments>\n        <argument name=\"param_name\" xsi:type=\"string\">param_value</argument>\n    </arguments>\n</block>\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query Context Interface Path - PHP\nDESCRIPTION: Interface path definition for GraphQL query context in the Magento_GraphQl module.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/dev/tests/static/testsuite/Magento/Test/Integrity/Magento/Framework/Api/_files/ExtensibleInterfacesTest/blacklist_ce.txt#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nmodule Magento_GraphQl Model/Query/ContextInterface.php\n```\n\n----------------------------------------\n\nTITLE: LESS Code Formatting Standards - CSS\nDESCRIPTION: This section provides guidelines for formatting LESS code in the Magento UI library. It stresses using spaces over tabs, proper brace alignment, and consistent property declaration style to enhance readability and maintainability.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/lib/web/css/docs/source/README.md#2025-04-21_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n// Indentation: Use spaces instead of tabs\n.nav {\n    .nav-item {\n        ...\n    }\n}\n\n// Recommended brace format\n.nav {\n    color: @nav__color;\n}\n\n// On property line breaks\n.nav {\n    background-color: @nav__background-color;\n    color: @nav__color;\n}\n```\n\n----------------------------------------\n\nTITLE: Unserializing Menu Items with Plugin Support - PHP\nDESCRIPTION: This method unserializes a serialized representation of a menu item, including checks for any plugins that might influence the operation.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/lib/internal/Magento/Framework/Interception/Test/Unit/Code/Generator/_files/ReflectionIntersectionTypeSampleInterceptor.txt#2025-04-21_snippet_13\n\nLANGUAGE: php\nCODE:\n```\npublic function unserialize($serialized)\n{\n    $pluginInfo = $this->pluginList->getNext($this->subjectType, 'unserialize');\n    return $pluginInfo ? $this->___callPlugins('unserialize', func_get_args(), $pluginInfo) : parent::unserialize($serialized);\n}\n```\n\n----------------------------------------\n\nTITLE: Page Layout Modification: 1columns\nDESCRIPTION: This module modifies the `1columns` page layout, moving the `catalog.leftnav` block into the `content.top` container, affecting single-column layouts.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/app/code/Magento/LayeredNavigation/README.md#2025-04-21_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n\"1columns\"\n```\n\n----------------------------------------\n\nTITLE: Admin Sales Order Create Load Block Items Layout\nDESCRIPTION: This layout is introduced in the `view/adminhtml/layout` directory and is used to load items during sales order creation in the admin panel. It enables modification of the item loading process.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/app/code/Magento/GiftMessage/README.md#2025-04-21_snippet_4\n\nLANGUAGE: XML\nCODE:\n```\n\"sales_order_create_load_block_items\"\n```\n\n----------------------------------------\n\nTITLE: Building Select Statements for Inventory Bundle Product Indexing in PHP\nDESCRIPTION: The SelectBuilder class constructs SQL select statements for the inventory bundle product indexer. It manages relationships and filters for fetching relevant inventory data. Key methods include those for generating selects based on bundle configurations and product visibility. Dependencies on Magento's framework for data retrieval are implicit.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/dev/tests/static/testsuite/Magento/Test/Php/_files/phpcpd/blacklist/inventory.txt#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace Magento\\InventoryBundleProductIndexer\\Indexer;\n\nclass SelectBuilder {\n    // Code for building select statements\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting CSS Comments in Magento 2\nDESCRIPTION: Demonstrates the recommended format for comments in Magento 2 CSS/LESS files, including first-level comments, second-level comments, inline comments, and new line comments.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/lib/web/css/docs/source/README.md#2025-04-21_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n//\n//  First level comment\n//  _____________________________________________\n\n.nav {\n    background-color: @nav__background-color;\n}\n\n//\n//  Second level comment\n//  ---------------------------------------------\n\n.nav {\n    background-color: @nav__background-color;\n}\n\n//  Comment\n.nav {\n    //  New line comment\n    background-color: @nav__background-color; // ToDo UI: todo inline comment\n    color: @nav__color; // inline comment\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Magento2 PHP Class Definition\nDESCRIPTION: Defines a minimal PHP class using Magento 2 conventions, including copyright header and PSR-4 compliant namespace. The class Foo is empty and serves as a template structure.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/dev/tests/static/framework/tests/unit/testsuite/Magento/TestFramework/Utility/_files/class_with_namespace.txt#2025-04-21_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n/**\n * Copyright © Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\nnamespace Magento\\ModuleName\\SubDirectoryName;\n\nclass Foo\n{\n}\n```\n\n----------------------------------------\n\nTITLE: UI Component: product_attributes_grid\nDESCRIPTION: This UI component, extended by the Magento_LayeredNavigation module in the `view/adminhtml/ui_component` directory, is related to the product attributes grid in the admin panel.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/app/code/Magento/LayeredNavigation/README.md#2025-04-21_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n\"product_attributes_grid\"\n```\n\n----------------------------------------\n\nTITLE: Admin Sales Order View Layout\nDESCRIPTION: This layout, introduced in the `view/adminhtml/layout` directory, is used for displaying the sales order view in the admin panel. It allows developers to customize the appearance and functionality of the sales order view.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/app/code/Magento/GiftMessage/README.md#2025-04-21_snippet_5\n\nLANGUAGE: XML\nCODE:\n```\n\"sales_order_view\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Cron Job for Clearing Expired Sessions in XML\nDESCRIPTION: This XML snippet shows the cron job configuration for clearing expired persistent sessions. It defines the 'persistent_clear_expired' cron job in the etc/crontab.xml file.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/app/code/Magento/Persistent/README.md#2025-04-21_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<group id=\"default\">\n    <job name=\"persistent_clear_expired\" instance=\"Magento\\Persistent\\Cron\\CleanExpiredSessions\" method=\"execute\">\n        <schedule>0 * * * *</schedule>\n    </job>\n</group>\n```\n\n----------------------------------------\n\nTITLE: Defining PHP Class with Interface Implementation in Magento 2\nDESCRIPTION: Defines a basic PHP class named Foo that implements InterfaceName interface. Includes standard Magento copyright header.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/dev/tests/static/framework/tests/unit/testsuite/Magento/TestFramework/Utility/_files/class_without_namespace.txt#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * Copyright © Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\nclass Foo implements InterfaceName\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Avoiding ID Selectors in Magento 2 CSS\nDESCRIPTION: Shows why ID selectors should be avoided in Magento 2 CSS and demonstrates alternative class-based selectors that are recommended instead.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/lib/web/css/docs/source/README.md#2025-04-21_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n#foo {\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Local Variable Declaration in Module LESS Files\nDESCRIPTION: Example of how to declare local variables in Magento 2 module LESS files, placing them at the top with appropriate comments.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/lib/web/css/docs/source/README.md#2025-04-21_snippet_34\n\nLANGUAGE: css\nCODE:\n```\n...\n\n//\n//  Variables\n//  _____________________________________________\n\n//  Colors\n@btn__color: @color-brownie;\n@btn-primary__color: @color-white;\n@btn-secondary__color: @color-white;\n...\n```\n\n----------------------------------------\n\nTITLE: Media Gallery UI Component Extensions\nDESCRIPTION: UI component configuration files and extensions for media gallery listings and related functionality.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/app/code/Magento/MediaGalleryUi/README.md#2025-04-21_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\nmedia_gallery_listing\nstandalone_media_gallery_listing\ncms_block_listing\ncms_page_listing\nproduct_listing\n```\n\n----------------------------------------\n\nTITLE: Layout Handle: catalogsearch_result_index\nDESCRIPTION: This layout handle, introduced by the Magento_LayeredNavigation module in the `view/frontend/layout` directory, is used to customize the layout of search results pages with layered navigation.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/app/code/Magento/LayeredNavigation/README.md#2025-04-21_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n\"catalogsearch_result_index\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Interface in Magento 2 PHP Class\nDESCRIPTION: Defines a class that implements a specific interface, demonstrating Magento 2 class structure and interface inheritance\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/dev/tests/static/framework/tests/unit/testsuite/Magento/TestFramework/Utility/_files/implements2.txt#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * Copyright © Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\nMyClassChild implements \\MyClass\n{\n```\n\n----------------------------------------\n\nTITLE: Helper Class Naming with Underscore Prefix\nDESCRIPTION: Example of the recommended helper class naming convention in Magento 2 CSS which starts with an underscore.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/lib/web/css/docs/source/README.md#2025-04-21_snippet_9\n\nLANGUAGE: css\nCODE:\n```\n._active {\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Recommended Class Naming Convention with Dash Separation\nDESCRIPTION: Shows the recommended way to name classes in Magento 2 CSS using lowercase with dash separation between words.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/lib/web/css/docs/source/README.md#2025-04-21_snippet_8\n\nLANGUAGE: css\nCODE:\n```\n.nav-bar {\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Mixin Naming Convention in Magento 2\nDESCRIPTION: Example of recommended naming conventions for mixins in Magento 2 LESS files, using prefixes for grouping.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/lib/web/css/docs/source/README.md#2025-04-21_snippet_35\n\nLANGUAGE: css\nCODE:\n```\n.extend__clearfix (...) {\n    ...\n}\n\n.vendor-prefix__flex-direction (...) {\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Module Directory Structure Reference\nDESCRIPTION: Shows the Pricing directory structure containing MSRP price calculation implementation for Configurable Products through the MsrpPriceCalculator class.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/app/code/Magento/MsrpGroupedProduct/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`Pricing\\` - directory contains implementation of msrp price calculation\nfor Configurable Product (`Magento\\MsrpConfigurableProduct\\Pricing\\MsrpPriceCalculator` class).\n```\n\n----------------------------------------\n\nTITLE: Public API: \\Magento\\LayeredNavigation\\Block\\Navigation\\FilterRendererInterface\nDESCRIPTION: This Public API, `\\Magento\\LayeredNavigation\\Block\\Navigation\\FilterRendererInterface`, provides the interface for rendering layered navigation filters.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/app/code/Magento/LayeredNavigation/README.md#2025-04-21_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n\"\\\\Magento\\\\LayeredNavigation\\\\Block\\\\Navigation\\\\FilterRendererInterface\"\n```\n\n----------------------------------------\n\nTITLE: Executing Media Gallery Synchronization Message Queue Consumer in Magento 2\nDESCRIPTION: This message queue consumer runs media files synchronization for the Magento_MediaGallerySynchronization module.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/app/code/Magento/MediaGallerySynchronization/README.md#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nmedia.gallery.synchronization\n```\n\n----------------------------------------\n\nTITLE: Implementing Magento 2 PHP Class\nDESCRIPTION: Defines a PHP class named Foo that implements InterfaceName within the Magento\\ModuleName\\SubDirectoryName namespace. Includes standard Magento copyright header and class documentation.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/dev/tests/static/framework/tests/unit/testsuite/Magento/TestFramework/Utility/_files/class_with_comment.txt#2025-04-21_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n/**\n * Copyright © Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\nnamespace Magento\\ModuleName\\SubDirectoryName;\n\n/**\n * Class Foo responsibility is ...\n */\nclass Foo implements InterfaceName\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Recommended Flat Class Naming Without Nesting\nDESCRIPTION: Shows the recommended approach of using complete class names without relying on LESS nesting in Magento 2.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/lib/web/css/docs/source/README.md#2025-04-21_snippet_14\n\nLANGUAGE: css\nCODE:\n```\n.product-list-item {\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Recommended Flatter Selector Structure\nDESCRIPTION: Example of the recommended approach with flatter selector structure in Magento 2 LESS/CSS to avoid excessive nesting.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/lib/web/css/docs/source/README.md#2025-04-21_snippet_23\n\nLANGUAGE: css\nCODE:\n```\n.footer {\n    ...\n    .nav {\n        ...\n    }\n    .nav-list {\n        ...\n    }\n    .nav-list-item {\n        ...\n     }\n}\n```\n\n----------------------------------------\n\nTITLE: Describing CatalogInventoryGraphQl Module Purpose in Markdown\nDESCRIPTION: This markdown snippet describes the purpose of the CatalogInventoryGraphQl module. It explains that the module provides type information for the GraphQl module to generate inventory stock fields for product information endpoints.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/app/code/Magento/CatalogInventoryGraphQl/README.md#2025-04-21_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# CatalogInventoryGraphQl\n\n**CatalogInventoryGraphQl** provides type information for the GraphQl module\nto generate inventory stock fields for product information endpoints.\n```\n\n----------------------------------------\n\nTITLE: Converting to Array with Plugin Support - PHP\nDESCRIPTION: This snippet converts the menu item object to an array format, allowing plugins to intervene and customize the conversion process if necessary.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/lib/internal/Magento/Framework/Interception/Test/Unit/Code/Generator/_files/ReflectionIntersectionTypeSampleInterceptor.txt#2025-04-21_snippet_12\n\nLANGUAGE: php\nCODE:\n```\npublic function toArray()\n{\n    $pluginInfo = $this->pluginList->getNext($this->subjectType, 'toArray');\n    return $pluginInfo ? $this->___callPlugins('toArray', func_get_args(), $pluginInfo) : parent::toArray();\n}\n```\n\n----------------------------------------\n\nTITLE: Checking MongoDB Extension in PHP\nDESCRIPTION: This snippet checks if the MongoDB extension is loaded in the PHP environment. If the extension is not loaded, it defines a fake class, MongoBinData, to ensure that unit tests can run without the actual MongoDB extension. The fake class mimics the basic structure intended for use in cases where the extension is unavailable, allowing for compatibility in development and testing environments.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/lib/internal/Magento/Framework/Cache/Test/Unit/Backend/_files/MongoBinData.txt#2025-04-21_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nif (!extension_loaded('mongo')) {\n    class MongoBinData\n    {\n        const BYTE_ARRAY = 2;\n        public $bin;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Alphabetically Sorted CSS Properties\nDESCRIPTION: Example of the recommended alphabetical sorting of CSS properties in Magento 2 CSS.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/lib/web/css/docs/source/README.md#2025-04-21_snippet_25\n\nLANGUAGE: css\nCODE:\n```\n.nav {\n    background-color: @nav__background-color;\n    color: @nav__color;\n    text-align: center;\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Module Dependencies in Markdown\nDESCRIPTION: Lists the modules that depend on Magento_Analytics, which should be considered before disabling or uninstalling.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/app/code/Magento/Analytics/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- Magento_CatalogAnalytics\n- Magento_CustomerAnalytics\n- Magento_QuoteAnalytics\n- Magento_ReviewAnalytics\n- Magento_SalesAnalytics\n- Magento_WishlistAnalytics\n```\n\n----------------------------------------\n\nTITLE: CatalogCmsGraphQl Module Introduction in Markdown\nDESCRIPTION: Module header and description that explains the purpose of the CatalogCmsGraphQl module in Magento 2's architecture\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/app/code/Magento/CatalogCmsGraphQl/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# CatalogCmsGraphQl\n\n**CatalogCmsGraphQl** provides type and resolver information for GraphQL attributes that have dependencies on the Catalog and Cms modules.\n```\n\n----------------------------------------\n\nTITLE: Magento 2 JavaScript File Paths\nDESCRIPTION: This code snippet provides a list of JavaScript file paths commonly found within a Magento 2 project.  These paths are useful for identifying locations of JavaScript files for customization and extension development. The structure shows the different areas of a Magento 2 install where JavaScript files can be found.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/dev/tests/static/testsuite/Magento/Test/Js/_files/whitelist/magento.txt#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n\"app/code/**/*.js\napp/design/**/*.js\ndev/tests/js/jasmine/tests/**/*.js\nlib/web/css/docs/source/js/dropdown.js\nlib/web/less/config.less.js\nlib/web/mage/**/*.js\nlib/web/magnifier/**/*.js\nlib/web/varien/**/*.js\nvendor/magento/**/*.js\"\n```\n\n----------------------------------------\n\nTITLE: Defining Cron Job for Newsletter Sending in Magento 2\nDESCRIPTION: This snippet shows the cron job configuration for scheduling newsletter sending in Magento 2. It defines a cron job named 'newsletter_send_all' in the etc/crontab.xml file.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/app/code/Magento/Newsletter/README.md#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n- `newsletter_send_all` - schedules newsletter sending\n```\n\n----------------------------------------\n\nTITLE: Implementing an Interface in PHP Class\nDESCRIPTION: This snippet defines a PHP class 'Foo' that implements an interface named 'InterfaceName'. It demonstrates the basic syntax for interface implementation in PHP. No specific dependencies other than PHP are required.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/dev/tests/static/framework/tests/unit/testsuite/Magento/TestFramework/Utility/_files/implements_keyword_on_different_line.txt#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * Copyright © Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\nclass Foo\n    implements InterfaceName\n{\n}\n\n```\n\n----------------------------------------\n\nTITLE: Avoiding Excessively Long Class Names\nDESCRIPTION: Example of a class name that is not recommended in Magento 2 because it is too long and verbose.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/lib/web/css/docs/source/README.md#2025-04-21_snippet_10\n\nLANGUAGE: css\nCODE:\n```\n.navigation-panel-in-footer {\n   ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Empty PHP Class in Magento 2\nDESCRIPTION: Defines a PHP class named 'Foo' that implements the 'InterfaceName' interface in the Magento module namespace. This is a basic skeleton class without any implementation details.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/dev/tests/static/framework/tests/unit/testsuite/Magento/TestFramework/Utility/_files/class_implements_interface.txt#2025-04-21_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n/**\n * Copyright © Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\nnamespace Magento\\ModuleName\\SubDirectoryName;\n\nclass Foo implements InterfaceName\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Directory GraphQL Module Overview\nDESCRIPTION: Defines directory-related GraphQL type and resolver configurations for Magento 2's GraphQL API endpoints\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/app/code/Magento/DirectoryGraphQl/README.md#2025-04-21_snippet_0\n\nLANGUAGE: GraphQL\nCODE:\n```\n# DirectoryGraphQl module provides GraphQL schema for directory information\n```\n\n----------------------------------------\n\nTITLE: Extending PHP Class in Magento 2\nDESCRIPTION: Basic class extension template showing a child class extending from MyClass with Magento copyright header. The structure follows Magento 2 coding standards.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/dev/tests/static/framework/tests/unit/testsuite/Magento/TestFramework/Utility/_files/extends2.txt#2025-04-21_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n/**\n * Copyright © Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\nMyClassChild extends \\MyClass\n{\n```\n\n----------------------------------------\n\nTITLE: Static Method Call: Foo::bar\nDESCRIPTION: This snippet calls the static method `bar` of the class `Foo`. It passes two arguments: the variable `$foo` and the result of `$this->getData('bar')`. This suggests that `Foo` is a class with a static method used to process or retrieve data, and `$this` refers to an object with a `getData` method for data access, potentially within a Magento context.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/dev/tests/static/framework/tests/unit/testsuite/Magento/TestFramework/Utility/_files/test.txt#2025-04-21_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n\"Foo::bar($foo, $this->getData('bar'))\"\n```\n\n----------------------------------------\n\nTITLE: Static Method Call: Foo::foo\nDESCRIPTION: This snippet shows a static method call to the `foo` method of the class `Foo`. No arguments are passed. This indicates that `foo` is a static method within the `Foo` class that can be called directly without needing to instantiate an object of that class.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/dev/tests/static/framework/tests/unit/testsuite/Magento/TestFramework/Utility/_files/test.txt#2025-04-21_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n\"Foo::foo()\"\n```\n\n----------------------------------------\n\nTITLE: Setting Production Mode in Magento 2 Setup\nDESCRIPTION: This code configures Magento 2 to run in production mode during setup. It sets performance configurations like enabling static content signing, cache, and minification, while also enabling developer dashboard with profiler.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/dev/tests/integration/testsuite/Magento/Theme/Model/_files/design/frontend/Test/default/Magento_Catalog/theme_file.txt#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nprivate function _setupProductionMode()\n{\n    // Enable static content signing\n    $this->_setConfigValue(\\Magento\\Framework\\View\\Asset\\Config::XML_PATH_STATIC_FILE_SIGNATURE_LIFETIME, 0);\n    // Enable SID in store URLs\n    $this->_setConfigValue(\\Magento\\Framework\\Session\\Sid::XML_PATH_USE_FRONTEND_SID, 1);\n    // Enable cache\n    $this->_setConfigValue(self::XML_PATH_DEV_FRONT_END_DEVELOPMENT_WORKFLOW, 'classic');\n    $this->_setConfigValue(self::XML_PATH_DEV_STATIC_SIGN, 1);\n    $this->_setConfigValue(self::XML_PATH_DEV_CSS_MINIFY_FILES, 1);\n    $this->_setConfigValue(self::XML_PATH_DEV_JS_MINIFY_FILES, 1);\n    $this->_setConfigValue(self::XML_PATH_DEV_TEMPLATES_MINIFY_HTML, 1);\n    // Enable developer dashboard with profiler\n    $this->_setConfigValue(\\Magento\\Developer\\Helper\\Data::XML_PATH_DEV_DEBUG_TEMPLATE_HINTS_STOREFRONT, 1);\n    $this->_setConfigValue(\\Magento\\Developer\\Helper\\Data::XML_PATH_DEV_DEBUG_TEMPLATE_HINTS_BLOCKS, 1);\n    $this->_setConfigValue(\\Magento\\Developer\\Helper\\Data::XML_PATH_DEV_DEBUG_TEMPLATE_HINTS_ADMIN, 1);\n    $this->_setConfigValue(\\Magento\\Profiler\\Model\\Config::CONFIG_PATH_ENABLED, 1);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing PHP Class with Interface\nDESCRIPTION: Defines a PHP class named Foo that implements InterfaceName interface. Includes standard Magento copyright header comment.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/dev/tests/static/framework/tests/unit/testsuite/Magento/TestFramework/Utility/_files/extra_whitespaces.txt#2025-04-21_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n/**\n * Copyright © Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\nclass  Foo  implements InterfaceName\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Magento 2 Modules for Functional Testing\nDESCRIPTION: This code snippet specifies the Magento 2 modules (Magento_ConfigurableProduct and Magento_Wishlist) that are covered by the functional tests described in this file. It uses Markdown syntax to highlight the module names.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/dev/tests/acceptance/tests/functional/Magento/ConfigurableProductWishlist/README.md#2025-04-21_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n**Magento_ConfigurableProduct** and **Magento_Wishlist**\n```\n\n----------------------------------------\n\nTITLE: SampleMapper constructor in Magento 2\nDESCRIPTION: This constructor initializes the SampleMapper class with a SampleBuilder instance. The SampleBuilder is used to construct the Sample DTOs from model data.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/lib/internal/Magento/Framework/Api/Test/Unit/Code/Generator/_files/SampleMapper.txt#2025-04-21_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n    /**\n     * Mapper constructor\n     *\n     * @param \\Magento\\Framework\\Api\\Code\\Generator\\Sample $sampleBuilder\n     */\n    public function __construct(\\Magento\\Framework\\Api\\Code\\Generator\\SampleBuilder $sampleBuilder)\n    {\n        $this->sampleBuilder = $sampleBuilder;\n    }\n```\n\n----------------------------------------\n\nTITLE: Stock Indexing for Bundle Products in PHP\nDESCRIPTION: The StockIndexer class is responsible for indexing stock levels for bundle products within Magento's inventory system. It optimizes how stock data is retrieved and updated to reflect the current inventory status accurately. Relies on the Magento indexing framework for performance and integration.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/dev/tests/static/testsuite/Magento/Test/Php/_files/phpcpd/blacklist/inventory.txt#2025-04-21_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace Magento\\InventoryBundleProductIndexer\\Indexer;\n\nclass StockIndexer {\n    // Stock indexing logic\n}\n```\n\n----------------------------------------\n\nTITLE: Documenting New Relic Reporting Functional Tests in Markdown\nDESCRIPTION: This snippet provides a brief description of the functional test module for the Magento New Relic Reporting feature. It outlines the purpose of the tests and their relationship to the main Magento New Relic Reporting module.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/app/code/Magento/NewRelicReporting/Test/Mftf/README.md#2025-04-21_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# New Relic Reporting Functional Tests\n\nThe Functional Test Module for **Magento New Relic Reporting** module.\n```\n\n----------------------------------------\n\nTITLE: Checking Production Mode in Magento 2\nDESCRIPTION: This code snippet checks if the Magento 2 store is running in production mode by comparing the current mode with the MODE_PRODUCTION constant.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/dev/tests/integration/testsuite/Magento/Theme/Model/_files/design/frontend/Test/default/Magento_Catalog/theme_file.txt#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nprotected function _isProductionMode()\n{\n    return $this->_getAppState()->getMode() === \\Magento\\Framework\\App\\State::MODE_PRODUCTION;\n}\n```\n\n----------------------------------------\n\nTITLE: Running Varnish Tests\nDESCRIPTION: This command executes all Varnish test cases (*.vtc) in the current directory using the varnishtest tool. Varnish must be installed for these tests to run.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/dev/tests/varnish/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n``` shell\nvarnishtest *.vtc\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Magento Test Library Configuration\nDESCRIPTION: Configuration that defines a Magento test library and associates PHP files with a custom test language identifier\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/dev/tests/integration/testsuite/Magento/Framework/App/Utility/_files/patterns/paths_two.txt#2025-04-21_snippet_0\n\nLANGUAGE: magento_test_lang\nCODE:\n```\nlibrary magento/test One*\nlanguage magento_test_lang *.php\n```\n\n----------------------------------------\n\nTITLE: Markdown Header and Description for Magento Async Tests\nDESCRIPTION: Markdown header and description text identifying the functional test module for Magento's asynchronous operations functionality.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/app/code/Magento/AsynchronousOperations/Test/Mftf/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Asynchronous Operations Functional Tests\n\nThe Functional Test Module for **Magento Asynchronous Operations** module.\n```\n\n----------------------------------------\n\nTITLE: Setting Block Properties in Magento 2 Layout XML\nDESCRIPTION: Demonstrates how to set various properties on blocks in Magento 2 layout XML. The example shows setting template, ttl, and display properties of a block.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/dev/tests/integration/testsuite/Magento/Framework/Filesystem/_files/foo/file_three.txt#2025-04-21_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<referenceBlock name=\"block.name\">\n    <action method=\"setTemplate\">\n        <argument name=\"template\" xsi:type=\"string\">Module_Name::new_template.phtml</argument>\n    </action>\n    <action method=\"setTtl\">\n        <argument name=\"ttl\" xsi:type=\"number\">86400</argument>\n    </action>\n    <action method=\"setDisplay\" ifconfig=\"config/path/enabled\">\n        <argument name=\"display\" xsi:type=\"boolean\">true</argument>\n    </action>\n</referenceBlock>\n```\n\n----------------------------------------\n\nTITLE: Declaring Namespace and Importing Class in PHP for Magento Framework\nDESCRIPTION: This code snippet declares the namespace Magento\\Framework\\MyNamespace and imports the MyClass for use within the file. It also includes a standard Magento copyright notice and license reference in the file header.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/dev/tests/static/framework/tests/unit/testsuite/Magento/TestFramework/Utility/_files/use2.txt#2025-04-21_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n/**\n * Copyright © Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\nnamespace Magento\\Framework\\MyNamespace;\n\nuse \\MyClass;\n```\n\n----------------------------------------\n\nTITLE: Describing CmsGraphQl Module in Markdown\nDESCRIPTION: This snippet provides a brief description of the CmsGraphQl module in Markdown format. It explains that the module offers type information for the GraphQl module to generate CMS fields for cms information endpoints in Magento 2.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/app/code/Magento/CmsGraphQl/README.md#2025-04-21_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# CmsGraphQl\n\n**CmsGraphQl** provides type information for the GraphQl module\nto generate CMS fields for cms information endpoints.\n```\n\n----------------------------------------\n\nTITLE: Magento Backup Module Layout Handles\nDESCRIPTION: List of layout XML files provided by the Magento_Backup module in the adminhtml layout directory for handling backup-related admin interfaces.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/app/code/Magento/Backup/README.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nbackup_index_block\nbackup_index_disabled\nbackup_index_grid\nbackup_index_index\n```\n\n----------------------------------------\n\nTITLE: Defining Admin Notification Layout Handles in Magento 2\nDESCRIPTION: This snippet lists the layout handles introduced by the Magento_AdminNotification module in the adminhtml layout directory. These handles are used for rendering admin notification pages and blocks.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/app/code/Magento/AdminNotification/README.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- `adminhtml_notification_index`\n- `adminhtml_notification_block`\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation Header for Magento Captcha Tests\nDESCRIPTION: Markdown header and description explaining the purpose of the Magento Captcha functional test module\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/app/code/Magento/Captcha/Test/Mftf/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Captcha Functional Tests\n\nThe Functional Test Module for **Magento Captcha** module.\n```\n\n----------------------------------------\n\nTITLE: Using References in Magento 2 Layout XML\nDESCRIPTION: Demonstrates how to use references to add content to existing blocks or containers in Magento 2. The example shows referencing a container and adding a block inside it.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/dev/tests/integration/testsuite/Magento/Framework/Filesystem/_files/foo/file_three.txt#2025-04-21_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<referenceContainer name=\"container.name\">\n    <block class=\"Magento\\Module\\Block\\Class\" name=\"child.block.name\" template=\"Module_Name::template.phtml\" />\n</referenceContainer>\n```\n\n----------------------------------------\n\nTITLE: Configuring Magento 2 Path References\nDESCRIPTION: Defines path patterns for modules and libraries in a Magento 2 installation. Includes specific reference to the magento/framework library path.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/dev/tests/static/testsuite/Magento/Test/Integrity/Readme/_files/scan_list.txt#2025-04-21_snippet_0\n\nLANGUAGE: config\nCODE:\n```\nmodule * /\nlibrary * /\nlibrary magento/framework */\n```\n\n----------------------------------------\n\nTITLE: Listing Admin Layout Handles for CMS Module in Magento 2\nDESCRIPTION: This snippet lists the XML layout files used by the CMS module in the admin area. These files define the structure and components of various CMS-related pages in the Magento admin panel.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/app/code/Magento/Cms/README.md#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\ncms_block_edit.xml\ncms_block_index.xml\ncms_block_new.xml\ncms_page_edit.xml\ncms_page_index.xml\ncms_page_new.xml\ncms_wysiwyg_images_contents.xml\ncms_wysiwyg_images_index.xml\n```\n\n----------------------------------------\n\nTITLE: Listing Frontend Layout Handles for CMS Module in Magento 2\nDESCRIPTION: This snippet lists the XML layout files used by the CMS module in the frontend. These files define the structure and components of various CMS-related pages on the customer-facing side of the Magento store.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/app/code/Magento/Cms/README.md#2025-04-21_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\ncms_index_defaultindex.xml\ncms_index_defaultnoroute.xml\ncms_index_index.xml\ncms_index_nocookies.xml\ncms_noroute_index.xml\ncms_page_view.xml\ndefault.xml\nprint.xml\n```\n\n----------------------------------------\n\nTITLE: Defining LESS Variables Naming Conventions - CSS\nDESCRIPTION: This section outlines the naming conventions for LESS variables used in the Magento UI library. Every variable must start with '@' and can only contain specific characters to ensure clarity and consistency. The naming structure helps in identifying the purpose of each variable.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/lib/web/css/docs/source/README.md#2025-04-21_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n// Examples of acceptable variable names\n@link-color-hover;\n@color-primary;\n@color-2;\n\n// Examples of private variables\n@_padding-left;\n@_font-size;\n```\n\n----------------------------------------\n\nTITLE: Resetting Custom Currency Symbols in Magento 2\nDESCRIPTION: The Reset.php snippet allows for the reset of all custom currency symbols in the system. This is useful for administrators who wish to revert to default symbols for any reason.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/app/code/Magento/CurrencySymbol/README.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace CurrencySymbol\\Controller\\Adminhtml\\System\\Currencysymbol;\n\nclass Reset extends \\Magento\\Backend\\App\\Action\n{\n    // Controller action to reset custom currency symbols\n}\n\n```\n\n----------------------------------------\n\nTITLE: Describing CatalogWidget Module in Markdown\nDESCRIPTION: This snippet provides a brief description of the CatalogWidget module and lists its main component, the Product List widget. It explains that the module extends the functionality of the Catalog module in Magento 2.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/app/code/Magento/CatalogWidget/README.md#2025-04-21_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# CatalogWidget\n\n**CatalogWidget** contains various widgets that extend Catalog module functionality:\n\n- Product List widget provides widget that contains product list created using rule based filter.\n```\n\n----------------------------------------\n\nTITLE: Observing Controller Action Predispatch Event in Magento 2\nDESCRIPTION: This snippet shows the event that the Magento_AdminNotification module observes. It listens for the 'controller_action_predispatch' event in the PredispatchAdminActionControllerObserver file.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/app/code/Magento/AdminNotification/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- `controller_action_predispatch` event in `Magento\\AdminNotification\\Observer\\PredispatchAdminActionControllerObserver` file.\n```\n\n----------------------------------------\n\nTITLE: Avoiding Type Selectors with Classes\nDESCRIPTION: Example of not recommended practice of qualifying class names with type selectors in Magento 2 CSS.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/lib/web/css/docs/source/README.md#2025-04-21_snippet_18\n\nLANGUAGE: css\nCODE:\n```\ndiv.error {\n   ...\n}\n```\n\n----------------------------------------\n\nTITLE: Avoiding Individual CSS Properties Instead of Shorthand\nDESCRIPTION: Example of not recommended use of individual CSS properties where shorthand properties could be used in Magento 2 CSS.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/lib/web/css/docs/source/README.md#2025-04-21_snippet_26\n\nLANGUAGE: css\nCODE:\n```\nborder-top-style: none;\npadding-bottom: 2rem;\npadding-left: 1rem;\npadding-right: 1rem;\npadding-top: 0;\n```\n\n----------------------------------------\n\nTITLE: Omitting Units with Zero Values\nDESCRIPTION: Example of the recommended practice of omitting units with zero values in Magento 2 CSS for cleaner code.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/lib/web/css/docs/source/README.md#2025-04-21_snippet_29\n\nLANGUAGE: css\nCODE:\n```\nborder-width: 0;\nmargin: 0;\n```\n\n----------------------------------------\n\nTITLE: Documenting BundleGraphQl Module Purpose in Markdown\nDESCRIPTION: A markdown description explaining that BundleGraphQl provides type definitions and resolvers for the GraphQl module to generate bundle product information in Magento 2.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/app/code/Magento/BundleGraphQl/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# BundleGraphQl\n\n**BundleGraphQl** provides type and resolver information for the GraphQl module\nto generate bundle product information.\n```\n\n----------------------------------------\n\nTITLE: Describing CheckoutAgreementsGraphQl Module in Markdown\nDESCRIPTION: This snippet provides a brief description of the CheckoutAgreementsGraphQl module for Magento 2. It explains that the module provides type information for the GraphQl module to generate Checkout Agreements fields for Checkout Agreements information endpoints.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/app/code/Magento/CheckoutAgreementsGraphQl/README.md#2025-04-21_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# CheckoutAgreementsGraphQl\n\n**CheckoutAgreementsGraphQl** provides type information for the GraphQl module\nto generate Checkout Agreements fields for Checkout Agreements information endpoints.\n```\n\n----------------------------------------\n\nTITLE: Message Queue Publisher Path - PHP\nDESCRIPTION: Framework library path for RPC message queue publisher implementation.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/dev/tests/static/testsuite/Magento/Test/Integrity/Magento/Framework/Api/_files/ExtensibleInterfacesTest/blacklist_ce.txt#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nlibrary magento/framework MessageQueue/Rpc/Publisher.php\n```\n\n----------------------------------------\n\nTITLE: Leading Zeros in Decimal Values\nDESCRIPTION: Example of not recommended use of leading zeros in decimal values in Magento 2 CSS.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/lib/web/css/docs/source/README.md#2025-04-21_snippet_30\n\nLANGUAGE: css\nCODE:\n```\nmargin-left: 0.5rem;\n```\n\n----------------------------------------\n\nTITLE: Using CSS Shorthand Properties\nDESCRIPTION: Example of the recommended use of CSS shorthand properties for more efficient and readable code in Magento 2 CSS.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/lib/web/css/docs/source/README.md#2025-04-21_snippet_27\n\nLANGUAGE: css\nCODE:\n```\nborder-top: 0;\npadding: 0 1em 2em;\n```\n\n----------------------------------------\n\nTITLE: Documentation Header in Markdown\nDESCRIPTION: Module documentation header explaining the purpose of CatalogCustomerGraphQl module and its dependencies on Catalog and Customer modules.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/app/code/Magento/CatalogCustomerGraphQl/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# CatalogCustomerGraphQl\n\n**CatalogCustomerGraphQl** provides type and resolver information for GraphQL attributes that have dependences on the Catalog and Customer modules.\n```\n\n----------------------------------------\n\nTITLE: Media Gallery Layout Files Configuration\nDESCRIPTION: Layout files defined in the view/adminhtml/layout directory that control the media gallery interface structure.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/app/code/Magento/MediaGalleryUi/README.md#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\nmedia_gallery_index_index\nmedia_gallery_media_index\n```\n\n----------------------------------------\n\nTITLE: Describing CatalogUrlRewriteGraphQl Module in Markdown\nDESCRIPTION: This snippet provides a brief description of the CatalogUrlRewriteGraphQl module for Magento 2. It explains that the module offers type information for GraphQL to generate URL rewrite fields for catalog and product information endpoints.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/app/code/Magento/CatalogUrlRewriteGraphQl/README.md#2025-04-21_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# CatalogUrlRewriteGraphQl\n\n**CatalogUrlRewriteGraphQl** provides type information for the GraphQl module\nto generate url rewrite fields for catalog and product information endpoints.\n```\n\n----------------------------------------\n\nTITLE: Frontend Checkout Cart Item Renderers Layout\nDESCRIPTION: This layout, introduced in the `view/frontend/layout` directory, is used for rendering items in the shopping cart on the frontend.  It allows developers to customize how individual cart items are displayed.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/app/code/Magento/GiftMessage/README.md#2025-04-21_snippet_7\n\nLANGUAGE: XML\nCODE:\n```\n\"checkout_cart_item_renderers\"\n```\n\n----------------------------------------\n\nTITLE: Recommended Class-Only Selectors\nDESCRIPTION: Example of the recommended practice of using class selectors without element type qualifiers in Magento 2 CSS.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/lib/web/css/docs/source/README.md#2025-04-21_snippet_19\n\nLANGUAGE: css\nCODE:\n```\n.error {\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Module Description\nDESCRIPTION: Markdown documentation describing the purpose of the CatalogRuleGraphQl Magento module.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/app/code/Magento/CatalogRuleGraphQl/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# CatalogRuleGraphQl\n\nThe *Magento_CatalogRuleGraphQl* module applies catalog rules to products for GraphQL requests.\n```\n\n----------------------------------------\n\nTITLE: Module Documentation in Markdown\nDESCRIPTION: Documentation explaining the purpose of the Magento_CatalogAnalytics module and its integration with Advanced Reporting functionality.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/app/code/Magento/CatalogAnalytics/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Magento_CatalogAnalytics module\n\nThe Magento_CatalogAnalytics module configures data definitions for a data collection related to the Catalog module entities to be used in [Advanced Reporting](https://developer.adobe.com/commerce/php/development/advanced-reporting/modules/).\n```\n\n----------------------------------------\n\nTITLE: Getting First Available Menu Item - PHP\nDESCRIPTION: This function retrieves the first available menu item, implementing plugin functionality to enhance or alter the retrieval process.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/lib/internal/Magento/Framework/Interception/Test/Unit/Code/Generator/_files/ReflectionIntersectionTypeSampleInterceptor.txt#2025-04-21_snippet_9\n\nLANGUAGE: php\nCODE:\n```\npublic function getFirstAvailable()\n{\n    $pluginInfo = $this->pluginList->getNext($this->subjectType, 'getFirstAvailable');\n    return $pluginInfo ? $this->___callPlugins('getFirstAvailable', func_get_args(), $pluginInfo) : parent::getFirstAvailable();\n}\n```\n\n----------------------------------------\n\nTITLE: Listing GraphQL PHPUnit Test Classes\nDESCRIPTION: This code lists specific PHPUnit test classes that are related to GraphQL functionality in Magento, ensuring these tests can be run in isolation. It is used for organizing test execution in distinct groups based on particular characteristics, such as being long-running or requiring special environments.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/dev/tests/api-functional/isolate_gql.txt#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n# Optional configuration file for dev/tests/utils/phpunitGroupConfig.php\n# List graphql phpunit tests that have to be isolated in their own groups, e.g. long running test, special environments, etc\n# One per line by class name\nMagento\\GraphQl\\Quote\\Customer\\CheckoutEndToEnd\n```\n\n----------------------------------------\n\nTITLE: Defining Lock Manager Interface in Magento\nDESCRIPTION: Interface specification for lock management operations in Magento, defining core methods for lock manipulation and status checking\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/lib/internal/Magento/Framework/Lock/README.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ninterface LockManagerInterface {\n    public function lock($name, $timeout = -1);\n    public function unlock($name);\n    public function isLocked($name);\n}\n```\n\n----------------------------------------\n\nTITLE: Mass Disabling Source Entities in Magento Admin for Inventory Management in PHP\nDESCRIPTION: The MassDisable controller allows admins to disable multiple inventory source entities at once within the Magento backend. This functionality improves inventory management by enabling bulk changes without the need for individual updates. Dependencies include Magento's admin and resource management systems.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/dev/tests/static/testsuite/Magento/Test/Php/_files/phpcpd/blacklist/inventory.txt#2025-04-21_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace Magento\\InventoryAdminUi\\Controller\\Adminhtml\\Source;\n\nclass MassDisable extends \\Magento\\Backend\\App\\Action {\n    // Methods for mass disabling sources\n}\n```\n\n----------------------------------------\n\nTITLE: Defining LESS Mixins Naming Conventions - CSS\nDESCRIPTION: This section specifies naming conventions for LESS mixins, which are reusable styles defined in the library. Mixin names should reflect their function and consist of lowercase characters with hyphens used to separate words.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/lib/web/css/docs/source/README.md#2025-04-21_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n// Examples of acceptable mixin names\n.mixin-name() {}\n.transition() {}\n.mixin() {}\n._button-gradient() {}\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation for Catalog Analytics Tests\nDESCRIPTION: Header and description text for the test module documentation, written in Markdown format. Specifies that this is the functional test module for Magento Catalog Analytics.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/app/code/Magento/CatalogAnalytics/Test/Mftf/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Catalog Analytics Functional Tests\n\nThe Functional Test Module for **Magento Catalog Analytics** module.\n```\n\n----------------------------------------\n\nTITLE: UI Component: product_attribute_add_form\nDESCRIPTION: This UI component, extended by the Magento_LayeredNavigation module in the `view/adminhtml/ui_component` directory, is related to product attribute creation form within the admin panel.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/app/code/Magento/LayeredNavigation/README.md#2025-04-21_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n\"product_attribute_add_form\"\n```\n\n----------------------------------------\n\nTITLE: Rendering Project Header with HTML\nDESCRIPTION: HTML markup for displaying project badges, logos and title in a centered layout at the top of the documentation.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/README.md#2025-04-21_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<p align=\"center\">\n<a href=\"https://www.codetriage.com/magento/magento2\"><img src=\"https://www.codetriage.com/magento/magento2/badges/users.svg\" alt=\"Open Source Helpers\" /></a>\n<a href=\"https://gitter.im/magento/magento2?utm_source=badge&amp;utm_medium=badge&amp;utm_campaign=pr-badge\"><img src=\"https://badges.gitter.im/Join%20Chat.svg\" alt=\"Gitter\" /></a> <a href=\"https://crowdin.com/project/magento-2\"><img src=\"https://d322cqt584bo4o.cloudfront.net/magento-2/localized.svg\" alt=\"Crowdin\" /></a><br/>\n<a href=\"https://magento.com/products/magento-open-source\">\n<img alt=\"Adobe logo\" height=\"50px\" src=\"https://www.adobe.com/content/dam/cc/icons/Adobe_Corporate_Horizontal_Red_HEX.svg\"/>\n</a>\n</p>\n\n<h1 align=\"center\">Magento Open Source</h1>\n```\n\n----------------------------------------\n\nTITLE: Login As Customer Authentication Interface Path - PHP\nDESCRIPTION: API interface path for login-as-customer authentication data in the Magento_LoginAsCustomerApi module.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/dev/tests/static/testsuite/Magento/Test/Integrity/Magento/Framework/Api/_files/ExtensibleInterfacesTest/blacklist_ce.txt#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nmodule Magento_LoginAsCustomerApi Api/Data/AuthenticationDataInterface.php\n```\n\n----------------------------------------\n\nTITLE: Building Select Statements for Configurable Product Indexing in PHP\nDESCRIPTION: Similar to the bundle product select builder, this class constructs select statements specifically for configurable product indexing. It filters and manages data retrieval relevant to configurable products ensuring holistic inventory management within Magento.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/dev/tests/static/testsuite/Magento/Test/Php/_files/phpcpd/blacklist/inventory.txt#2025-04-21_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace Magento\\InventoryConfigurableProductIndexer\\Indexer;\n\nclass SelectBuilder {\n    // Logic for building selects for configurable inventory\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Developer Mode in Magento 2\nDESCRIPTION: This code retrieves the current development mode in Magento 2. It uses the bootstrap parameter 'MAGE_MODE' to determine the mode, defaulting to 'developer' if not set.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/dev/tests/integration/testsuite/Magento/Theme/Model/_files/design/frontend/Test/default/Magento_Catalog/theme_file.txt#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\npublic function getDeveloperMode(\\Magento\\Framework\\App\\Bootstrap $bootstrap)\n{\n    $mode = $bootstrap->getEnvironment()->getMode();\n    if (empty($mode)) {\n        $params = $bootstrap->getParams();\n        if (isset($params[\\Magento\\Framework\\App\\Bootstrap::PARAM_MODE])) {\n            $mode = $params[\\Magento\\Framework\\App\\Bootstrap::PARAM_MODE];\n        } else {\n            $mode = \\Magento\\Framework\\App\\State::MODE_DEVELOPER;\n        }\n    }\n    return $mode;\n}\n```\n\n----------------------------------------\n\nTITLE: Page Layout Modification: empty\nDESCRIPTION: This module modifies the `empty` page layout, moving the `catalog.leftnav` block into the `category.product.list.additional` container, affecting layouts with no default blocks.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/app/code/Magento/LayeredNavigation/README.md#2025-04-21_snippet_11\n\nLANGUAGE: xml\nCODE:\n```\n\"empty\"\n```\n\n----------------------------------------\n\nTITLE: Payment Information Model Path - PHP\nDESCRIPTION: File path specification for the payment information model within Magento_Payment module.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/dev/tests/static/testsuite/Magento/Test/Integrity/Magento/Framework/Api/_files/ExtensibleInterfacesTest/blacklist_ce.txt#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nmodule Magento_Payment Model/Info.php\n```\n\n----------------------------------------\n\nTITLE: Method Call: foo\nDESCRIPTION: This snippet calls the `$this->foo` method, passing the string `'bar'` as an argument.  The method `foo` is likely a member of the current object or class and is being invoked with a string value. The specific functionality is unknown without further context.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/dev/tests/static/framework/tests/unit/testsuite/Magento/TestFramework/Utility/_files/test.txt#2025-04-21_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n\"$this->foo('bar')\"\n```\n\n----------------------------------------\n\nTITLE: Recommended Specific and Meaningful Class Names\nDESCRIPTION: Examples of specific and meaningful class names in Magento 2 CSS that reflect the purpose of the elements.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/lib/web/css/docs/source/README.md#2025-04-21_snippet_17\n\nLANGUAGE: css\nCODE:\n```\n.category {\n    ...\n}\n.category-title {\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Magento 2 Core Module and Library Listing\nDESCRIPTION: Directory structure listing showing core Magento 2 modules and framework libraries that provide essential functionality like import/export, URL rewrites, access control, caching, database operations, and various utility components.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/dev/tests/static/testsuite/Magento/Test/Integrity/Readme/_files/blacklist/ce.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmodule Magento_CatalogImportExport /\nmodule Magento_CatalogUrlRewrite /\nmodule Magento_CmsUrlRewrite /\nmodule Magento_ConfigurableImportExport /\nmodule Magento_GroupedImportExport /\nmodule Magento_Msrp /\nmodule Magento_TaxImportExport /\nmodule Magento_Translation /\nlibrary magento/framework Acl\nlibrary magento/framework Api\nlibrary magento/framework Authorization\nlibrary magento/framework Cache\nlibrary magento/framework Config\nlibrary magento/framework DB\nlibrary magento/framework DomDocument\nlibrary magento/framework Filter\nlibrary magento/framework HTTP\nlibrary magento/framework Interception\nlibrary magento/framework Json\nlibrary magento/framework Mail\nlibrary magento/framework Mview\nlibrary magento/framework Notification\nlibrary magento/framework Oauth\nlibrary magento/framework Parse\nlibrary magento/framework Pricing\nlibrary magento/framework Reflection\nlibrary magento/framework RequireJs\nlibrary magento/framework Search\nlibrary magento/framework Simplexml\nlibrary magento/framework System\nlibrary magento/framework Test\nlibrary magento/framework App/Utility\nlibrary magento/framework Url\nlibrary magento/framework Xml\nlibrary magento/framework XsltProcessor\nlibrary magento/framework /\n```\n\n----------------------------------------\n\nTITLE: Magento Weee Module UI Component Configurations\nDESCRIPTION: UI component configuration files for extending product attributes and widgets\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/app/code/Magento/Weee/README.md#2025-04-21_snippet_2\n\nLANGUAGE: XML\nCODE:\n```\nUI Component Directories:\n- view/adminhtml/ui_component\n- view/frontend/ui_component\n```\n\n----------------------------------------\n\nTITLE: Parsing HTTP Response Headers\nDESCRIPTION: Demonstrates different case variations for Set-Cookie headers in an HTTP response. Shows how headers can be set with mixed case (Normal, Uppercase, Lowercase) while maintaining functionality.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/lib/internal/Magento/Framework/HTTP/Test/Unit/Client/_files/curl_headers.txt#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nStatus: 200 OK\nContent-Type: text/html; charset=utf-8\nSet-Cookie: Normal=OK\nSET-COOKIE: Uppercase=OK\nset-cookie: Lowercase=OK\n```\n\n----------------------------------------\n\nTITLE: PHP Class Extension in Magento 2\nDESCRIPTION: Defines a PHP class named MyClassChild that extends the parent class MyClass. Includes standard Magento copyright header comment.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/dev/tests/static/framework/tests/unit/testsuite/Magento/TestFramework/Utility/_files/extends.txt#2025-04-21_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n/**\n * Copyright © Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\nMyClassChild extends MyClass\n{\n```\n\n----------------------------------------\n\nTITLE: Avoiding Presentational Class Names\nDESCRIPTION: Examples of presentational class names that should be avoided in Magento 2 CSS as they describe appearance rather than purpose.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/lib/web/css/docs/source/README.md#2025-04-21_snippet_16\n\nLANGUAGE: css\nCODE:\n```\n.button-green {\n   ...\n}\n\n.clear {\n   ...\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Languages in Magento 2 using ComponentRegistrar\nDESCRIPTION: This code snippet illustrates how to register a language pack in Magento 2 using the ComponentRegistrar class. It uses the LANGUAGE constant and requires the language name and directory path.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/lib/internal/Magento/Framework/Component/README.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nComponentRegistrar::register(ComponentRegistrar::LANGUAGE, '<language name>', __DIR__);\n```\n\n----------------------------------------\n\nTITLE: Magento Weee Module Layout Configurations\nDESCRIPTION: Overview of layout files and handles introduced by the Magento_Weee module for different views and contexts\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/app/code/Magento/Weee/README.md#2025-04-21_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\nLayout Directories:\n- view/adminhtml/layout\n- view/base/layout\n- view/frontend/layout\n```\n\n----------------------------------------\n\nTITLE: Initializing Magento Framework Namespace in PHP\nDESCRIPTION: Defines the namespace Magento\\Framework\\MyNamespace and includes copyright header. Uses standard Magento file structure with copyright notice and license reference.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/dev/tests/static/framework/tests/unit/testsuite/Magento/TestFramework/Utility/_files/use.txt#2025-04-21_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n/**\n * Copyright © Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\nnamespace Magento\\Framework\\MyNamespace;\n\nuse MyClass;\n```\n\n----------------------------------------\n\nTITLE: Not Recommended Hexadecimal Color Notation\nDESCRIPTION: Example of not recommended hexadecimal color notation in Magento 2 CSS, using uppercase and full 6-character notation when 3 would suffice.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/lib/web/css/docs/source/README.md#2025-04-21_snippet_32\n\nLANGUAGE: css\nCODE:\n```\ncolor: #ff0000;\n@nav__color: #FAFAFA;\n@nav-item__color: red;\n```\n\n----------------------------------------\n\nTITLE: Using Lowercase HTML Elements in Selectors\nDESCRIPTION: Example of the recommended practice of using lowercase HTML element names in selectors in Magento 2 CSS.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/lib/web/css/docs/source/README.md#2025-04-21_snippet_21\n\nLANGUAGE: css\nCODE:\n```\n.nav > li {\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Moving and Removing Elements in Magento 2 Layout XML\nDESCRIPTION: Shows how to move and remove elements in Magento 2 layout XML. The example demonstrates moving a block to a different container and removing a block from the layout.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/dev/tests/integration/testsuite/Magento/Framework/Filesystem/_files/foo/file_three.txt#2025-04-21_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<move element=\"block.to.move\" destination=\"destination.container\" />\n<remove name=\"block.to.remove\" />\n```\n\n----------------------------------------\n\nTITLE: Verbose Performance Monitor Log Output Example\nDESCRIPTION: Example of the verbose performance metrics output in the log file, showing detailed memory usage, timing information, and system resources utilization.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/app/code/Magento/ApplicationPerformanceMonitor/README.md#2025-04-21_snippet_2\n\nLANGUAGE: log\nCODE:\n```\n[2023-10-04T20:55:31.174304+00:00] report.ERROR: \"Profile information\": {\n        \"applicationClass\":     \"Magento\\ApplicationServer\\App\\Application\\Interceptor\",\n        \"applicationServer\":    \"1\",\n        \"threadPreviousRequestCount\":   \"42\",\n        \"memoryUsageBefore\":    \"239568640 B\",\n        \"memoryUsageAfter\":     \"239686808 B\",\n        \"memoryUsageAfterComparedToPrevious\":   \"0 B\",\n        \"memoryUsageDelta\":     \"118168 B\",\n        \"peakMemoryUsageBefore\":        \"243053632 B\",\n        \"peakMemoryUsageAfter\": \"243053632 B\",\n        \"peakMemoryUsageDelta\": \"0 B\",\n        \"wallTimeBefore\":       \"2023-10-04T20:55:31.170300\",\n        \"wallTimeAfter\":        \"2023-10-04T20:55:31.174200\",\n        \"wallTimeElapsed\":      \"0.0038700103759766 s\",\n        \"userTimeBefore\":       \"3.771626 s\",\n        \"userTimeAfter\":        \"3.771626 s\",\n        \"userTimeElapsed\":      \"0 s\",\n        \"systemTimeBefore\":     \"0.095585 s\",\n        \"systemTimeAfter\":      \"0.099126 s\",\n        \"systemTimeElapsed\":    \"0.003541 s\"\n}\n```\n\n----------------------------------------\n\nTITLE: Analyzing HTTP Continue Responses\nDESCRIPTION: Multiple 100 Continue status codes indicating client request processing and server acknowledgment\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/lib/internal/Magento/Framework/HTTP/Test/Unit/Adapter/_files/curl_response1.txt#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 100 Continue\nSet-Cookie: ...\n```\n\n----------------------------------------\n\nTITLE: Initializing MyClass Instance in Magento\nDESCRIPTION: This snippet demonstrates the creation of a new instance of MyClass within the Magento framework. It assumes that MyClass is defined and available for use. The instance can be utilized for further functionality pertinent to the Magento application.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/dev/tests/static/framework/tests/unit/testsuite/Magento/TestFramework/Utility/_files/create_new_instance3.txt#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$myClass = new \\MyClass();\n```\n\n----------------------------------------\n\nTITLE: Avoiding Underscore Separation in Class Names\nDESCRIPTION: Example of not recommended underscore separation in class names for Magento 2 CSS.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/lib/web/css/docs/source/README.md#2025-04-21_snippet_7\n\nLANGUAGE: css\nCODE:\n```\n.nav_bar {\n   ...\n}\n```\n\n----------------------------------------\n\nTITLE: Function Call: foo\nDESCRIPTION: This snippet shows a function call to `foo` with a single argument, the string `'bar'`. This likely calls a function defined elsewhere in the code or a built-in PHP function, although it is more probable a custom function `foo`.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/dev/tests/static/framework/tests/unit/testsuite/Magento/TestFramework/Utility/_files/test.txt#2025-04-21_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n\"foo(\n    'bar'\n)\"\n```\n\n----------------------------------------\n\nTITLE: Standard Performance Monitor Log Output Example\nDESCRIPTION: Example of the standard (non-verbose) performance metrics output in the log file, showing basic memory usage and timing information.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/app/code/Magento/ApplicationPerformanceMonitor/README.md#2025-04-21_snippet_1\n\nLANGUAGE: log\nCODE:\n```\n[2023-10-04T20:48:23.727037+00:00] report.ERROR: \"Profile information\": {\n        \"applicationClass\":     \"Magento\\ApplicationServer\\App\\Application\\Interceptor\",\n        \"applicationServer\":    \"1\",\n        \"threadPreviousRequestCount\":   \"73\",\n        \"memoryUsageAfter\":     \"240 MB\",\n        \"memoryUsageAfterComparedToPrevious\":   \"0 B\",\n        \"memoryUsageDelta\":     \"118 KB\",\n        \"peakMemoryUsageAfter\": \"243 MB\",\n        \"peakMemoryUsageDelta\": \"0 B\",\n        \"wallTimeElapsed\":      \"0 s\"\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing UPS Online Shipping Rate Response Format\nDESCRIPTION: Raw response data from UPS shipping rate API showing service codes, origin/destination zip codes, weights, base rates, surcharges, total rates and delivery commitments. Each line represents a different shipping service option like Next Day Air, 2nd Day Air, Ground etc.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/dev/tests/api-functional/_files/Magento/TestModuleUps/_files/mock_response_us.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nUPSOnLine4%1DM%90034%US%75477%US%106%1%112.44%0.00%112.44%12:00 P.M.%\n4%1DA%90034%US%75477%US%106%1%80.42%0.00%80.42%End of Day%\n4%2DA%90034%US%75477%US%206%1%39.05%0.00%39.05%End of Day%\n4%3DS%90034%US%75477%US%306%1%31.69%0.00%31.69%End of Day%\n4%GND%90034%US%75477%US%006%1%15.61%0.00%15.61%End of Day%\n```\n\n----------------------------------------\n\nTITLE: Message Queue Module Header\nDESCRIPTION: Markdown header and brief description of the Message Queue functional test module documentation.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/app/code/Magento/MessageQueue/Test/Mftf/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Message Queue Functional Tests\n\nThe Functional Test Module for **Magento Message Queue** module.\n```\n\n----------------------------------------\n\nTITLE: Recommended Hexadecimal Color Notation\nDESCRIPTION: Example of the recommended hexadecimal color notation in Magento 2 CSS, using lowercase, 3-character notation where possible, and variables for colors.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/lib/web/css/docs/source/README.md#2025-04-21_snippet_33\n\nLANGUAGE: css\nCODE:\n```\n@nav__color: #fafafa;\n@nav-item__color: #f00;\n...\ncolor: @nav-item__color;\n```\n\n----------------------------------------\n\nTITLE: String Conversion to Uppercase\nDESCRIPTION: This snippet converts a concatenated string to uppercase. It first converts the individual strings `$foo` and `$bar` to lowercase, then concatenates them, and finally converts the entire result to uppercase. This ensures a case-insensitive operation.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/dev/tests/static/framework/tests/unit/testsuite/Magento/TestFramework/Utility/_files/test.txt#2025-04-21_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n\"strtoupper(strtolower($foo . $bar))\"\n```\n\n----------------------------------------\n\nTITLE: Describing Bundle Import Export Functional Tests in Markdown\nDESCRIPTION: This markdown snippet outlines the purpose of the functional test module for Magento Bundle Import Export. It specifies that the module is designed for testing the Bundle Import Export functionality in Magento 2.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/app/code/Magento/BundleImportExport/Test/Mftf/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Bundle Import Export Functional Tests\n\nThe Functional Test Module for **Magento Bundle Import Export** module.\n```\n\n----------------------------------------\n\nTITLE: GNU GPL Program Notice\nDESCRIPTION: Provides a template for applying GNU GPL terms to a new program, including copyright notice and warranty disclaimer. No dependencies; must include program name, author, and year.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/lib/internal/GnuFreeFont/gpl-3.0.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n```\n\n----------------------------------------\n\nTITLE: Method Call: generateHash\nDESCRIPTION: This snippet calls the `$this->generateHash` method, passing in two arguments. The first argument is the result of calling `foo($bar)` and the second argument is the variable `$foo`. The method `generateHash` likely computes a hash value based on the provided inputs.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/dev/tests/static/framework/tests/unit/testsuite/Magento/TestFramework/Utility/_files/test.txt#2025-04-21_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n\"$this->generateHash(foo($bar), $foo)\"\n```\n\n----------------------------------------\n\nTITLE: Markdown Title and Description\nDESCRIPTION: Simple markdown header and description text for the Media Storage functional test module documentation.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/app/code/Magento/MediaStorage/Test/Mftf/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Media Storage Functional Tests\n\nThe Functional Test Module for **Magento Media Storage** module.\n```\n\n----------------------------------------\n\nTITLE: Copyright Disclaimer Example\nDESCRIPTION: This code snippet provides a sample copyright disclaimer that an employer or school can sign to relinquish copyright interest in a program. It includes the company/school name, program name, author, signature, title, and date.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/lib/internal/LinLibertineFont/GPL.txt#2025-04-21_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nYoyodyne, Inc., hereby disclaims all copyright interest in the program\n  `Gnomovision' (which makes passes at compilers) written by James Hacker.\n\n  <signature of Ty Coon>, 1 April 1989\n  Ty Coon, President of Vice\n```\n\n----------------------------------------\n\nTITLE: Markdown - Magento Catalog Inventory Test Description\nDESCRIPTION: Markdown documentation header describing the functional test module for Magento Catalog Inventory component.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/app/code/Magento/CatalogInventory/Test/Mftf/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Catalog Inventory Functional Tests\n\nThe Functional Test Module for **Magento Catalog Inventory** module.\n```\n\n----------------------------------------\n\nTITLE: Function Definition: foo\nDESCRIPTION: This snippet defines a function named `foo` that takes two arguments: `$merchantMd5` and `$merchantApiLogin`.  The purpose of this function is not evident from the snippet alone but suggests it might be related to merchant authentication or API interaction. It is likely part of a larger class or script.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/dev/tests/static/framework/tests/unit/testsuite/Magento/TestFramework/Utility/_files/test.txt#2025-04-21_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n\"function foo($merchantMd5, $merchantApiLogin)\"\n```\n\n----------------------------------------\n\nTITLE: Documentation Header in Markdown\nDESCRIPTION: Markdown header and description text for the Advanced Pricing Import Export functional test module documentation.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/app/code/Magento/AdvancedPricingImportExport/Test/Mftf/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Advanced Pricing Import Export Functional Tests\n\nThe Functional Test Module for **Magento Advanced Pricing Import Export** module.\n```\n\n----------------------------------------\n\nTITLE: Recommended Class Name Length Balance\nDESCRIPTION: Example of a class name that has the right balance of brevity and descriptiveness in Magento 2 CSS.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/lib/web/css/docs/source/README.md#2025-04-21_snippet_12\n\nLANGUAGE: css\nCODE:\n```\n.nav-bar {\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Header for MSRP Test Documentation\nDESCRIPTION: Markdown header and brief description of the MSRP functional test module for Magento 2.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/app/code/Magento/Msrp/Test/Mftf/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Msrp Functional Tests\n\nThe Functional Test Module for **Magento Msrp** module.\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation for Magento Catalog Rule Tests\nDESCRIPTION: Markdown documentation header explaining the purpose of the functional test module for Magento Catalog Rule Configurable testing.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/app/code/Magento/CatalogRuleConfigurable/Test/Mftf/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Catalog Rule Configurable Functional Tests\n\nThe Functional Test Module for **Magento Catalog Rule Configurable** module.\n```\n\n----------------------------------------\n\nTITLE: Dispatching `product_option_renderer_init` Event in Wishlist Options\nDESCRIPTION: This snippet shows how the `product_option_renderer_init` event is dispatched in the Wishlist Options Block. It allows for the interaction and customization of the product options in the wishlist context.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/app/code/Magento/Wishlist/README.md#2025-04-21_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nnamespace Magento\\Wishlist\\Block\\Customer\\Wishlist\\Item;\n\nclass Options extends \\Magento\\Framework\\View\\Element\\Template\n{\n    protected function _construct()\n    {\n        // Dispatching an event for product option rendering\n        $this->_eventManager->dispatch('product_option_renderer_init', ['block' => $this]);\n        parent::_construct();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Component Registration Rule\nDESCRIPTION: This line defines a component registration rule using glob patterns. The `* * /` pattern likely includes everything in the project, effectively registering all components found at the root directory.  This is a catch-all rule.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/dev/tests/static/testsuite/Magento/Test/Xml/_files/whitelist/common.txt#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n\"* * /\"\n```\n\n----------------------------------------\n\nTITLE: Defining Magento MySQL MQ Functional Test Module in Markdown\nDESCRIPTION: This markdown snippet provides a concise description of the functional test module for the Magento MySQL MQ module. It specifies the project context and the purpose of the file.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/app/code/Magento/MysqlMq/Test/Mftf/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Mysql Mq Functional Tests\n\nThe Functional Test Module for **Magento Mysql Mq** module.\n```\n\n----------------------------------------\n\nTITLE: Interactive Mode Notice\nDESCRIPTION: Template for notice displayed during interactive mode of a program under GPL, instructing users on warranty details and license conditions. Replace tokens with program information.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/lib/internal/GnuFreeFont/gpl-3.0.txt#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n    <program>  Copyright (C) <year>  <name of author>\n    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n```\n\n----------------------------------------\n\nTITLE: Avoiding Excessive Selector Nesting\nDESCRIPTION: Example of not recommended excessive nesting of selectors (beyond 3 levels) in Magento 2 LESS/CSS.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/lib/web/css/docs/source/README.md#2025-04-21_snippet_22\n\nLANGUAGE: css\nCODE:\n```\n.footer {\n    ...\n    .nav {\n        ...\n        .nav-list {\n            ...\n            .nav-list-item {\n                ...\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Unsorted CSS Properties\nDESCRIPTION: Example of not recommended property ordering in Magento 2 CSS where properties are not sorted alphabetically.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/lib/web/css/docs/source/README.md#2025-04-21_snippet_24\n\nLANGUAGE: css\nCODE:\n```\n.nav {\n    color: @nav__color;\n    text-align: center;\n    background-color: @nav__background-color;\n}\n```\n\n----------------------------------------\n\nTITLE: Avoiding Non-Meaningful Class Names\nDESCRIPTION: Example of a class name that should be avoided because it lacks meaning and context in Magento 2 CSS.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/lib/web/css/docs/source/README.md#2025-04-21_snippet_15\n\nLANGUAGE: css\nCODE:\n```\n.foo-1901 {\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Avoiding LESS Selector Nesting for Class Names\nDESCRIPTION: Example of not recommended LESS nesting for creating component class names in Magento 2.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/lib/web/css/docs/source/README.md#2025-04-21_snippet_13\n\nLANGUAGE: css\nCODE:\n```\n.product {\n    ...\n    &-list {\n        ...\n        &-item {\n            ...\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: HTTP 101 Continue Status Code\nDESCRIPTION: Represents a protocol switching response, indicating server's willingness to change protocols\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/lib/internal/Magento/Framework/HTTP/Test/Unit/Adapter/_files/curl_response1.txt#2025-04-21_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 101 Continue\nSet-Cookie: ...\n```\n\n----------------------------------------\n\nTITLE: Avoiding Uppercase HTML Elements in Selectors\nDESCRIPTION: Example of not recommended practice of using uppercase HTML element names in selectors in Magento 2 CSS.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/lib/web/css/docs/source/README.md#2025-04-21_snippet_20\n\nLANGUAGE: css\nCODE:\n```\n.nav > LI {\n   ...\n}\n```\n\n----------------------------------------\n\nTITLE: Avoiding Camel Case in Class Names\nDESCRIPTION: Example of not recommended camel case class naming convention in Magento 2 CSS.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/lib/web/css/docs/source/README.md#2025-04-21_snippet_6\n\nLANGUAGE: css\nCODE:\n```\n.navBar {\n   ...\n}\n```\n\n----------------------------------------\n\nTITLE: Adding GPL License Notice to Source Files\nDESCRIPTION: This code snippet demonstrates how to add the GNU General Public License notice to the start of each source file of a new program. It includes the program's name, copyright information, and a pointer to the full license notice, ensuring the exclusion of warranty.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/lib/internal/LinLibertineFont/GPL.txt#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n\t<one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This program is free software; you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation; either version 2 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program; if not, write to the Free Software\n    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA\n```\n\n----------------------------------------\n\nTITLE: Interactive Program GPL Notice\nDESCRIPTION: This code snippet illustrates how to display a short notice when an interactive program starts. It includes the program name, copyright information, warranty disclaimer, and instructions for displaying the full license details.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/lib/internal/LinLibertineFont/GPL.txt#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nGnomovision version 69, Copyright (C) year name of author\n    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n```\n\n----------------------------------------\n\nTITLE: Avoiding Excessively Short Class Names\nDESCRIPTION: Example of a class name that is not recommended in Magento 2 because it is too short and not descriptive enough.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/lib/web/css/docs/source/README.md#2025-04-21_snippet_11\n\nLANGUAGE: css\nCODE:\n```\n.nvpf {\n   ...\n}\n```\n\n----------------------------------------\n\nTITLE: Successful HTTP 200 OK Response\nDESCRIPTION: Complete HTTP response with server details, security headers, content type, and additional metadata\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/lib/internal/Magento/Framework/HTTP/Test/Unit/Adapter/_files/curl_response1.txt#2025-04-21_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nServer: Apache\nX-Frame-Options: SAMEORIGIN\nStrict-Transport-Security: max-age=14400\nContent-Type: text/html; charset=UTF-8\nDate: Mon, 22 Apr 2013 09:52:36 GMT\nContent-Length: 8\nConnection: keep-alive\nSet-Cookie: ...\n```\n\n----------------------------------------\n\nTITLE: Customer Address Model Path - PHP\nDESCRIPTION: File path for the abstract customer address model in the Magento_Customer module.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/dev/tests/static/testsuite/Magento/Test/Integrity/Magento/Framework/Api/_files/ExtensibleInterfacesTest/blacklist_ce.txt#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nmodule Magento_Customer Model/Address/AbstractAddress.php\n```\n\n----------------------------------------\n\nTITLE: Frontend Checkout Cart Index Layout\nDESCRIPTION: This layout, introduced in the `view/frontend/layout` directory, is used for the shopping cart index page on the frontend. It allows developers to customize the appearance and functionality of the shopping cart.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/app/code/Magento/GiftMessage/README.md#2025-04-21_snippet_6\n\nLANGUAGE: XML\nCODE:\n```\n\"checkout_cart_index\"\n```\n\n----------------------------------------\n\nTITLE: Layout Handle: catalog_category_view_type_layered_without_children\nDESCRIPTION: This layout handle is introduced by the Magento_LayeredNavigation module in the `view/frontend/layout` directory.  It customizes the layout of category pages with layered navigation but without child categories.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/app/code/Magento/LayeredNavigation/README.md#2025-04-21_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n\"catalog_category_view_type_layered_without_children\"\n```\n\n----------------------------------------\n\nTITLE: Page Layout Modification: 2columns-right\nDESCRIPTION: This module modifies the `2columns-right` page layout, moving the `catalog.leftnav` block into the `sidebar.main` container, affecting two-column layouts with a right sidebar.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/app/code/Magento/LayeredNavigation/README.md#2025-04-21_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\n\"2columns-right\"\n```\n\n----------------------------------------\n\nTITLE: Page Layout Modification: 3columns\nDESCRIPTION: This module modifies the `3columns` page layout, moving the `catalog.leftnav` block into the `sidebar.main` container, affecting three-column layouts.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/app/code/Magento/LayeredNavigation/README.md#2025-04-21_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n\"3columns\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Magento 2 Class with Interface\nDESCRIPTION: Partial class definition showing implementation of a parent class or interface in a Magento 2 PHP file. The class is left incomplete, suggesting it is a work in progress or part of a larger implementation.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/dev/tests/static/framework/tests/unit/testsuite/Magento/TestFramework/Utility/_files/implements.txt#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * Copyright © Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\nMyClassChild implements MyClass\n{\n\n}\n```\n\n----------------------------------------\n\nTITLE: Magento 2 Module Class Definition\nDESCRIPTION: This snippet defines a PHP class within a Magento 2 module. It declares the namespace, class name, and implements a specified interface. This structure is fundamental for creating custom modules in Magento 2.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/dev/tests/static/framework/tests/unit/testsuite/Magento/TestFramework/Utility/_files/missing_class_keyword.txt#2025-04-21_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n/**\n * Copyright © Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\nnamespace Magento\\ModuleName\\SubDirectoryName;\n\nFoo implements InterfaceName\n{\n}\n\n```\n\n----------------------------------------\n\nTITLE: Populating from Array with Plugin Support - PHP\nDESCRIPTION: This method populates the menu item from an associative array while allowing plugin behavior to be applied during the population process.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/lib/internal/Magento/Framework/Interception/Test/Unit/Code/Generator/_files/ReflectionIntersectionTypeSampleInterceptor.txt#2025-04-21_snippet_14\n\nLANGUAGE: php\nCODE:\n```\npublic function populateFromArray(array $data)\n{\n    $pluginInfo = $this->pluginList->getNext($this->subjectType, 'populateFromArray');\n    return $pluginInfo ? $this->___callPlugins('populateFromArray', func_get_args(), $pluginInfo) : parent::populateFromArray($data);\n}\n```\n\n----------------------------------------\n\nTITLE: Instantiating Magento 2 DataObject\nDESCRIPTION: This snippet demonstrates how to create an instance of the \\Magento\\Framework\\DataObject class.  DataObject is a versatile class used for storing and accessing data in a generic way within Magento 2 modules. It serves as a base class for many other data structures.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/setup/src/Magento/Setup/Test/Unit/Module/I18n/Parser/Adapter/Php/_files/objectsCode.php.txt#2025-04-21_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nnew \\Magento\\Framework\\DataObject();\n```\n\n----------------------------------------\n\nTITLE: Basic Structure of Magento 2 Layout XML\nDESCRIPTION: Shows the basic structure of a Magento 2 layout XML file with page configuration and body content sections. The example includes a page layout definition with head and body components.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/dev/tests/integration/testsuite/Magento/Framework/Filesystem/_files/foo/file_three.txt#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<page xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"urn:magento:framework:View/Layout/etc/page_configuration.xsd\">\n    <head>\n        <title>Page Title</title>\n    </head>\n    <body>\n        <!-- Body content goes here -->\n    </body>\n</page>\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Groups Comment Block\nDESCRIPTION: Documentation comment block explaining the purpose of the configuration file for isolating specific PHPUnit integration tests into separate groups.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/dev/tests/integration/isolate.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# Optional configuration file for dev/tests/utils/phpunitGroupConfig.php\n# List integration phpunit tests that have to be isolated in their own groups, e.g. long running test, special environments, etc\n# One per line by class name\n```\n\n----------------------------------------\n\nTITLE: Defining Component Pattern Format in Magento 2\nDESCRIPTION: Specifies the format for matching component types (module, library, theme, language, or wildcard) and their corresponding glob patterns in Magento 2. The pattern allows for matching any component type with any component name using a wildcard path pattern.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/dev/tests/static/testsuite/Magento/Test/Html/_files/whitelist/common.txt#2025-04-21_snippet_0\n\nLANGUAGE: configuration\nCODE:\n```\n* * /\n```\n\n----------------------------------------\n\nTITLE: Enabling Instant Purchase for Payment Method in XML Configuration\nDESCRIPTION: This XML snippet enables the instant purchase feature for a payment method by adding a configuration option in 'config.xml'. It sets 'supported' to true, allowing the method to be used for instant purchases.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/app/code/Magento/InstantPurchase/README.md#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<instant_purchase>\n    <supported>1</supported>\n</instant_purchase>\n```\n\n----------------------------------------\n\nTITLE: Source Item Indexing in Inventory Bundle Products in PHP\nDESCRIPTION: The SourceItemIndexer class indexes source item data for bundle products, enabling effective inventory management for Magento. It handles indexing logic and updates based on product changes, ensuring that stock data remains current. Depends on Magento's indexing framework.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/dev/tests/static/testsuite/Magento/Test/Php/_files/phpcpd/blacklist/inventory.txt#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace Magento\\InventoryBundleProductIndexer\\Indexer\\SourceItem;\n\nclass SourceItemIndexer {\n    // Key functionality for indexing source items\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Magento 2 Module and Theme Paths\nDESCRIPTION: Demonstrates the standard path patterns for defining Magento 2 modules and frontend themes. The module follows vendor_Module format while theme follows frontend/Vendor/theme pattern.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/dev/tests/integration/testsuite/Magento/Framework/App/Utility/_files/patterns/paths_one.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmodule Magento_Module *\ntheme frontend/Test/theme One*\n```\n\n----------------------------------------\n\nTITLE: Instantiating Magento Framework Classes in PHP\nDESCRIPTION: The code snippets demonstrate the creation of new instances of Magento Framework classes, specifically the Phrase and DataObject classes. This is typically used within a Magento-based PHP application to generate translatable text objects and generic data containers. Usage requires the Magento Framework to be properly included within the project. These classes play a role in handling data and text localization within Magento applications.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/dev/tests/integration/testsuite/Magento/Setup/Module/I18n/Parser/Adapter/Php/Tokenizer/_files/objectsCode.php.txt#2025-04-21_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nnew \\Magento\\Framework\\Phrase('Testing');\nnew Phrase('More testing');\nnew \\Magento\\Framework\\DataObject();\n```\n\n----------------------------------------\n\nTITLE: Authentication Data Interfaces\nDESCRIPTION: Interface for storing and managing authentication-related data during login as customer process\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/app/code/Magento/LoginAsCustomerApi/README.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n\\Magento\\LoginAsCustomerApi\\Api\\Data\\AuthenticationDataInterface\n```\n\n----------------------------------------\n\nTITLE: Avoiding Units with Zero Values\nDESCRIPTION: Example of not recommended practice of specifying units with zero values in Magento 2 CSS.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/lib/web/css/docs/source/README.md#2025-04-21_snippet_28\n\nLANGUAGE: css\nCODE:\n```\nborder-width: 0px;\nmargin: 0rem;\n```\n\n----------------------------------------\n\nTITLE: Enabling AsyncConfig via Magento 2 CLI\nDESCRIPTION: This bash command uses the Magento 2 command-line interface to enable the AsyncConfig module. It sets the --config-async flag to 1, which is equivalent to modifying the env.php file.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/app/code/Magento/AsyncConfig/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbin/magento setup:config:set --config-async 1\n```\n\n----------------------------------------\n\nTITLE: Updating Composer Dependencies\nDESCRIPTION: Updates the Composer dependencies to ensure all required sample data modules are installed. This is typically run after specifying the sample data packages in the `composer.json` file and must be executed in the Magento root directory.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/app/code/Magento/SampleData/README.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n# composer update\n```\n\n----------------------------------------\n\nTITLE: Unlink Sample Data from GitHub\nDESCRIPTION: Unlinks and removes sample data modules if they were deployed from the GitHub repository. This operation uses the `build-sample-data.php` script to unlink data from the Magento instance cleanly.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/app/code/Magento/SampleData/README.md#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n# php -f <sample-data_clone_dir>/dev/tools/build-sample-data.php – --command=unlink --ce-source=\"<path_to_your_magento_instance>\"\n```\n\n----------------------------------------\n\nTITLE: Documentation Header in Markdown\nDESCRIPTION: The markdown header defining the purpose of the functional test module for Magento multishipping functionality.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/app/code/Magento/Multishipping/Test/Mftf/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Multishipping Functional Tests\n\nThe Functional Test Module for **Magento Multishipping** module.\n```\n\n----------------------------------------\n\nTITLE: Basic PHP Class Instantiation\nDESCRIPTION: Creates a new instance of MyClass without using parentheses in the constructor call. Includes standard Magento copyright header.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/dev/tests/static/framework/tests/unit/testsuite/Magento/TestFramework/Utility/_files/create_new_instance2.txt#2025-04-21_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n/**\n * Copyright © Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\n$myClass = new MyClass;\n```\n\n----------------------------------------\n\nTITLE: Installing Magento_NewsletterGraphQl Module\nDESCRIPTION: Instructions for installing the Magento_NewsletterGraphQl module in Magento 2. It notes the dependency on the Magento_Newsletter module and provides a link to the official documentation for module management.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/app/code/Magento/NewsletterGraphQl/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Installation\n\nBefore installing this module, note that the Magento_NewsletterGraphQl is dependent on the Magento_Newsletter module.\n\nFor information about a module installation in Magento 2, see [Enable or disable modules](https://experienceleague.adobe.com/docs/commerce-operations/installation-guide/tutorials/manage-modules.html).\n```\n\n----------------------------------------\n\nTITLE: Parsing UPS Shipping Response Data Format\nDESCRIPTION: Raw UPS shipping response data showing multiple service options (XDM, XPR, WXS, XPD, STD) with details like origin zip (90034), destination country (US), postal code (M4L 1V3), state (CA), weight (1), and rates. Fields are delimited by % symbols.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/dev/tests/api-functional/_files/Magento/TestModuleUps/_files/mock_response_ca.txt#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nUPSOnLine4%XDM%90034%US%M4L 1V3%CA%081%1%138.17%0.00%138.17%-1%\n4%XPR%90034%US%M4L 1V3%CA%081%1%95.07%0.00%95.07%12:00 P.M.%\n4%WXS%90034%US%M4L 1V3%CA%481%1%93.99%0.00%93.99%-1%\n4%XPD%90034%US%M4L 1V3%CA%071%1%85.85%0.00%85.85%-1%\n4%STD%90034%US%M4L 1V3%CA%053%1%27.08%0.00%27.08%-1%\n```\n\n----------------------------------------\n\nTITLE: Enabling AsyncConfig in env.php for Magento 2\nDESCRIPTION: This PHP code snippet demonstrates how to enable the AsyncConfig module by setting the 'config/async' variable to 1 in the env.php file. This configuration allows for asynchronous saving of admin configurations.\nSOURCE: https://github.com/magento/magento2/blob/2.4-develop/app/code/Magento/AsyncConfig/README.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n      'config' => [\n               'async' => 1\n       ]\n```"
  }
]