[
  {
    "owner": "jpudysz",
    "repo": "react-native-unistyles",
    "content": "TITLE: Creating a StyleSheet with Variants and Dynamic Styles in Unistyles\nDESCRIPTION: Demonstrates how to use StyleSheet.create to define styles with variants, compound variants, and dynamic functions. It showcases theme and runtime usage, as well as responsive styles based on breakpoints.\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/docs/src/content/docs/v3/references/stylesheet.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { StyleSheet } from 'react-native-unistyles'\n\nconst styles = StyleSheet.create((theme, rt) => ({\n    container: {\n        backgroundColor: theme.colors.background,\n        variants: {\n            size: {\n                small: {\n                    width: 100,\n                    height: 100\n                },\n                medium: {\n                    width: 200,\n                    height: 200\n                },\n                large: {\n                    width: 300,\n                    height: 300\n                }\n            },\n            isPrimary: {\n                true: {\n                    color: theme.colors.primary\n                },\n                default: {\n                    color: theme.colors.secondary\n                },\n                special: {\n                    color: theme.colors.special\n                }\n            }\n        }\n    },\n    text: {\n        fontSize: rt.fontScale * 20,\n        color: {\n            sm: theme.colors.text,\n            md: theme.colors.textSecondary\n        }\n    })\n}))\n```\n\n----------------------------------------\n\nTITLE: Complete Unistyles Configuration Example\nDESCRIPTION: A comprehensive example showing the full configuration of Unistyles with themes, breakpoints, TypeScript types, and StyleSheet configuration in a single file.\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/docs/src/content/docs/v3/start/configuration.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { StyleSheet } from 'react-native-unistyles'\n\nconst lightTheme = {\n    colors: {\n        primary: '#ff1ff4',\n        secondary: '#1ff4ff'\n    },\n    gap: (v: number) => v * 8\n}\n\nconst otherTheme = {\n    colors: {\n        primary: '#aa12ff',\n        secondary: 'pink'\n    },\n    gap: (v: number) => v * 8\n}\n\nconst appThemes = {\n    light: lightTheme,\n    other: otherTheme\n}\n\nconst breakpoints = {\n    xs: 0,\n    sm: 300,\n    md: 500,\n    lg: 800,\n    xl: 1200\n}\n\ntype AppBreakpoints = typeof breakpoints\ntype AppThemes = typeof appThemes\n\ndeclare module 'react-native-unistyles' {\n    export interface UnistylesThemes extends AppThemes {}\n    export interface UnistylesBreakpoints extends AppBreakpoints {}\n}\n\nStyleSheet.configure({\n    settings: {\n        initialTheme: 'light',\n    },\n    breakpoints,\n    themes: appThemes\n})\n```\n\n----------------------------------------\n\nTITLE: Replacing React Native StyleSheet with Unistyles StyleSheet\nDESCRIPTION: Diff showing how to replace the standard React Native StyleSheet import with Unistyles StyleSheet, which provides additional features while maintaining the same API for creating styles.\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/docs/src/content/docs/v3/start/getting-started.mdx#2025-04-23_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n- import { StyleSheet } from 'react-native'\n+ import { StyleSheet } from 'react-native-unistyles'\n\nconst MyComponent = () => {\n  return (\n    <View style={styles.container}>\n      <Text>Hello world from Unistyles</Text>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n   container: {\n     backgroundColor: 'red'\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Adaptive Themes\nDESCRIPTION: Shows how to set up adaptive themes that automatically switch based on device color scheme preferences. Requires registering themes with the special names 'light' and 'dark'.\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/docs/src/content/docs/v3/guides/theming.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nStyleSheet.configure({\n    themes: {\n        light: lightTheme,\n        dark: darkTheme,\n        // you may have more themes\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Theme in TypeScript\nDESCRIPTION: Example of how to structure a theme object in Unistyles. Themes can include any combination of properties, nested objects, and even functions. There are no restrictions on the structure.\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/docs/src/content/docs/v3/guides/theming.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst myTheme = {\n    // any keys\n    colors: {\n        // your colors\n    },\n    components: {\n        // any number of nesting\n        button: {\n            deepKey: {}\n        }\n    },\n    utils: {\n        // you can even use functions here\n        hexToRGBA: () => {}\n    },\n    // or compute your themes with functions and spread operators\n    ...premiumFeatures,\n    ...getMyColors()\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Themes in Unistyles for React Native\nDESCRIPTION: Example of how to define multiple themes in Unistyles. This creates two themes (light and other) with colors and a gap function that can be used throughout the application.\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/docs/src/content/docs/v3/start/configuration.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst lightTheme = {\n    colors: {\n        primary: '#ff1ff4',\n        secondary: '#1ff4ff'\n        // any nesting, spreading, arrays, etc.\n    },\n    // functions, external imports, etc.\n    gap: (v: number) => v * 8\n}\n\nconst otherTheme = {\n    colors: {\n        primary: '#aa12ff',\n        secondary: 'pink'\n    },\n    gap: (v: number) => v * 8\n}\n\nconst appThemes = {\n    light: lightTheme,\n    other: otherTheme\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Variant Styles in React Native Unistyles\nDESCRIPTION: Shows how to define specific variant styles within variant groups. Includes examples of color, size, and other variants.\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/docs/src/content/docs/v3/references/variants.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst styles = StyleSheet.create(theme => ({\n    container: {\n        flex: 1,\n        variants: {\n            color: {\n                primary: {\n                    backgroundColor: theme.colors.primary\n                },\n                secondary: {\n                    backgroundColor: theme.colors.secondary\n                }\n            },\n            size: {\n                small: {\n                    width: 100,\n                    height: 100\n                },\n                medium: {\n                    width: 200,\n                    height: 200\n                },\n                large: {\n                    width: 300,\n                    height: 300\n                }\n            },\n            otherGroupName: {\n                // other variants\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating StyleSheet with Theme Dependencies in TypeScript\nDESCRIPTION: Example demonstrating how to create a StyleSheet with static styles, theme-dependent styles, and dynamic styles that depend on runtime values. Shows how Unistyles identifies and tracks different types of style dependencies.\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/docs/src/content/docs/v3/start/how-unistyles-works.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst styles = StyleSheet.create((theme, rt) => ({\n  // static: no dependencies\n  container: {\n    backgroundColor: 'red',\n  },\n  // depends on theme and font scale\n  text: {\n    color: theme.colors.text,\n    fontSize: rt.fontScale * 16\n  },\n  dynamic: (isOdd: boolean) => ({\n    // depends on theme\n    color: isOdd ? theme.colors.primary : theme.colors.secondary,\n  })\n}))\n```\n\n----------------------------------------\n\nTITLE: Setting Unistyles Configuration\nDESCRIPTION: How to apply all configuration options by calling the StyleSheet.configure function with themes, breakpoints, and settings.\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/docs/src/content/docs/v3/start/configuration.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { StyleSheet } from 'react-native-unistyles'\n\nStyleSheet.configure({\n    themes: appThemes,\n    breakpoints,\n    settings\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Size Variants Across Multiple Styles in React Native Unistyles\nDESCRIPTION: Example of using the 'size' variant group in multiple style components (container and text). This pattern allows responsive styling with consistent variant names across different elements.\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/docs/src/content/docs/v3/references/variants.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nconst styles = StyleSheet.create(theme => ({\n    container: {\n        flex: 1,\n        variants: {\n            size: {\n                small: {\n                    width: 100,\n                    height: 100\n                },\n                medium: {\n                    width: 200,\n                    height: 200\n                },\n                large: {\n                    width: 300,\n                    height: 300\n                }\n            }\n        }\n    },\n    text: {\n        fontWeight: 'bold',\n        variants: {\n            size: {\n                small: {\n                    fontSize: 12\n                },\n                medium: {\n                    fontSize: 16\n                },\n                large: {\n                    fontSize: 20\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Themable StyleSheet in Unistyles\nDESCRIPTION: Shows how to create a StyleSheet that uses theme values, allowing for dynamic styling based on the current theme.\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/docs/src/content/docs/v3/references/stylesheet.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { StyleSheet } from 'react-native-unistyles'\n\nconst styles = StyleSheet.create(theme => ({\n    container: {\n        backgroundColor: theme.colors.background\n    }\n}))\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of useUnistyles Hook in React Native\nDESCRIPTION: Demonstrates how to import and use the useUnistyles hook to access theme and runtime properties in a React Native component.\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/docs/src/content/docs/v3/references/use-unistyles.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useUnistyles } from 'react-native-unistyles'\n\nconst MyComponent = () => {\n    const { theme, rt } = useUnistyles()\n\n    return (\n        // your view\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Using Variants as Component Props in React Native Unistyles\nDESCRIPTION: Shows how to use variants as component props, including TypeScript type definitions for the props.\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/docs/src/content/docs/v3/references/variants.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react'\nimport { StyleSheet } from 'react-native-unistyles'\n\ntype ComponentProps = {\n    color: 'primary' | 'secondary'\n    size: 'small' | 'medium' | 'large'\n}\n\nconst Component: React.FunctionComponent = ({ color, size }) => {\n    styles.useVariants({\n        color,\n        size\n    })\n\n    return (\n        <View style={styles.container} />\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Settings in Unistyles\nDESCRIPTION: Examples of different ways to configure Unistyles settings including specifying the initial theme with a string value, using a synchronous function, or enabling adaptive themes.\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/docs/src/content/docs/v3/start/configuration.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst settings = {\n    initialTheme: 'light'\n}\n\n// or with a synchronous function\nconst settings = {\n    initialTheme: () => {\n        // get preferred theme from user's preferences/MMKV/SQL/StanJS etc.\n\n        return storage.getString('preferredTheme') ?? 'light'\n    }\n}\n\n// or with adaptive themes\nconst settings = {\n    adaptiveThemes: true\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TypeScript Types for Unistyles\nDESCRIPTION: How to override the library types for optimal TypeScript autocomplete and type safety for themes and breakpoints by extending the Unistyles interfaces.\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/docs/src/content/docs/v3/start/configuration.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\ntype AppThemes = typeof appThemes\ntype AppBreakpoints = typeof breakpoints\n\ndeclare module 'react-native-unistyles' {\n    export interface UnistylesThemes extends AppThemes {}\n    export interface UnistylesBreakpoints extends AppBreakpoints {}\n}\n```\n\n----------------------------------------\n\nTITLE: Using UnistylesRuntime in StyleSheet Creation\nDESCRIPTION: Demonstrates how to access the miniRuntime (rt) within a StyleSheet.create call to dynamically style components based on device properties. The example shows how to use screen dimensions that will automatically update when screen size changes.\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/docs/src/content/docs/v3/references/unistyles-runtime.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { StyleSheet } from 'react-native-unistyles'\n\n// your component\n\nconst style = StyleSheet.create((theme, rt) => ({\n    container: {\n        backgroundColor: theme.colors.background,\n        width: rt.screen.width,\n        height: rt.screen.height\n    }\n}))\n```\n\n----------------------------------------\n\nTITLE: Creating a Themable StyleSheet with MiniRuntime in Unistyles\nDESCRIPTION: Demonstrates how to create a StyleSheet that uses both theme values and the miniRuntime object for dynamic styling based on runtime values like device metrics.\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/docs/src/content/docs/v3/references/stylesheet.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { StyleSheet } from 'react-native-unistyles'\n\nconst styles = StyleSheet.create((theme, rt) => ({\n    container: {\n        backgroundColor: theme.colors.background,\n        paddingTop: rt.insets.top\n    }\n}))\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Breakpoints in Unistyles\nDESCRIPTION: Demonstrates how to define custom breakpoints in Unistyles. The breakpoints are defined as key-value pairs, with the first breakpoint starting at 0.\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/docs/src/content/docs/v3/references/breakpoints.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n// unistyles.ts\nconst breakpoints = {\n    xs: 0,\n    sm: 576,\n    md: 768,\n    lg: 992,\n    xl: 1200,\n    superLarge: 2000,\n    tvLike: 4000\n} as const\n```\n\n----------------------------------------\n\nTITLE: Combining Width and Height Media Queries in React Native Unistyles\nDESCRIPTION: This example shows how to combine width and height media queries using the mq utility in React Native Unistyles. It applies different background colors based on both width and height conditions.\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/docs/src/content/docs/v3/references/media-queries.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { StyleSheet, mq } from 'react-native-unistyles'\n\nconst styles = Stylesheet.create(theme => ({\n    container: {\n        flex: 1,\n        justifyContent: 'center',\n        alignItems: 'center'\n        backgroundColor: theme.colors.background,\n        backgroundColor: {\n            [mq.width(240, 380).and.height(300)]: theme.colors.background,\n            [mq.width(380).and.height(300)]: theme.colors.barbie\n        }\n    }\n}))\n```\n\n----------------------------------------\n\nTITLE: Configuring Breakpoints in Unistyles\nDESCRIPTION: Example of defining responsive breakpoints in Unistyles. At least one breakpoint with value 0 is required to simulate the cascading behavior of CSS media queries.\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/docs/src/content/docs/v3/start/configuration.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst breakpoints = {\n    xs: 0, // <-- make sure to register one breakpoint with value 0\n    sm: 300,\n    md: 500,\n    lg: 800,\n    xl: 1200\n    // use as many breakpoints as you need\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Theme in StyleSheet.create\nDESCRIPTION: Demonstrates how to access the current theme when creating styles with StyleSheet.create. This is the recommended way to use theme values in your styles.\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/docs/src/content/docs/v3/guides/theming.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nconst styles = StyleSheet.create(theme => ({\n    ...\n}))\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Variant Structure in React Native Unistyles\nDESCRIPTION: Shows the basic structure for defining variants within a StyleSheet.create call in Unistyles. Variants are nested objects within style definitions.\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/docs/src/content/docs/v3/references/variants.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst styles = StyleSheet.create(theme => ({\n    container: {\n        backgroundColor: theme.colors.background,\n        variants: {\n            // here you can define your variants\n        }\n    },\n    text: {\n        color: theme.colors.text,\n        variants: {\n            // here you can define other variants!\n        }\n    }\n}))\n```\n\n----------------------------------------\n\nTITLE: Theme-Only Subscription with useUnistyles\nDESCRIPTION: Example showing how to subscribe only to theme changes using the useUnistyles hook.\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/docs/src/content/docs/v3/references/use-unistyles.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n// subscribes to theme changes, rt is not yet used\nconst { theme, rt } = useUnistyles()\n```\n\n----------------------------------------\n\nTITLE: Full Examples of Media Queries in React Native Unistyles\nDESCRIPTION: This reference snippet provides complete examples of using media queries with the mq utility in React Native Unistyles. It shows how to target specific width and height ranges, including the use of breakpoints.\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/docs/src/content/docs/v3/references/media-queries.mdx#2025-04-23_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nmq.only.width(100, 200) // width from 100 to 199\nmq.height(500).and.width('sm') // heigh from 500 onwards and width from 'sm' breakpoint onwards\nmq.only.height(null, 1000) // height from 0 to 999\n```\n\n----------------------------------------\n\nTITLE: Creating Theme-Aware Dynamic Styles in TypeScript\nDESCRIPTION: Example of defining styles that depend on the current theme in Unistyles. The container style uses theme colors for its background.\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/docs/src/content/docs/v3/references/web-styles.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst styles = StyleSheet.create(theme => ({\n    container: {\n        flex: 1,\n        backgroundColor: theme.colors.background\n    }\n}))\n```\n\n----------------------------------------\n\nTITLE: Creating Variants in StyleSheet for Typography Component in React Native\nDESCRIPTION: Defines a StyleSheet with basic typography styling and three variant types: size (small, medium, large), isBold (true), and color (primary, secondary, link). The baseText style defines font family and weight, while themedText contains all the variant definitions.\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/docs/src/content/docs/v3/references/compound-variants.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst styles = StyleSheet.create(theme => ({\n    baseText: {\n        fontFamily: theme.fonts.base,\n        fontWeight: 'normal'\n    },\n    themedText: {\n        variants: {\n            size: {\n                small: {\n                    fontSize: 12\n                },\n                medium: {\n                    fontSize: 16\n                },\n                large: {\n                    fontSize: 20\n                }\n            },\n            isBold: {\n                true: {\n                    fontWeight: 'bold'\n                }\n            },\n            color: {\n                primary: {\n                    color: theme.colors.primary\n                },\n                secondary: {\n                    color: theme.colors.secondary\n                },\n                link: {\n                    color: theme.colors.link\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Boolean Variants in React Native Unistyles\nDESCRIPTION: Shows how to define and use boolean variants in Unistyles, including conditional selection based on component props.\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/docs/src/content/docs/v3/references/variants.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { StyleSheet } from 'react-native-unistyles'\n\nconst Component = ({ isPrimary, isDisabled }) => {\n    styles.useVariants({\n        color: !isDisabled,\n        borderColor: isPrimary\n        // you can also use strings\n        // color: \"true\" | \"false\"\n    })\n\n    return (\n        <View style={styles.container} />\n    )\n}\n\nconst styles = StyleSheet.create(theme => ({\n    container: {\n        // otter styles\n        variants: {\n            color: {\n                true: {\n                    backgroundColor: theme.colors.primary\n                },\n                false: {\n                    backgroundColor: theme.colors.disabled\n                },\n                // you can still specify a default variant\n                default: {\n                    backgroundColor: theme.colors.barbie\n                }\n                // or other variants\n                special: {\n                    backgroundColor: theme.colors.special\n                }\n            },\n            borderColor: {\n                true: {\n                    borderColor: theme.colors.primary\n                }\n                // you can also skip \"false\" here\n            }\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Registering Themes with StyleSheet.configure\nDESCRIPTION: Shows how to register themes using the StyleSheet.configure method. Themes are registered using a unique name identifier that can be referenced later.\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/docs/src/content/docs/v3/guides/theming.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { StyleSheet } from 'react-native-unistyles'\nimport { myTheme } from './themes'\n\nStyleSheet.configure({\n    themes: {\n        name: myTheme,\n        // you can add more themes here\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Converting Static Styles to Dynamic Functions in Unistyles\nDESCRIPTION: This code diff demonstrates how to change a static style object to a dynamic function by wrapping the style properties in a function. This allows passing parameters from JSX to the stylesheet.\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/docs/src/content/docs/v3/references/dynamic-functions.mdx#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n```diff lang=\"tsx\" del=\"container: {\" ins=\"container: () => ({\"\nconst styles = StyleSheet.create(theme => ({\n    container: {\n    container: () => ({\n        backgroundColor: theme.colors.background,\n        flex: 1,\n        justifyContent: 'center',\n        alignItems: 'center'\n-    }\n+    })\n}))\n```\n```\n\n----------------------------------------\n\nTITLE: Selecting Variants in React Native Unistyles\nDESCRIPTION: Demonstrates how to use the useVariants hook to select specific variants for a component.\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/docs/src/content/docs/v3/references/variants.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { StyleSheet } from 'react-native-unistyles'\n\nconst Component = () => {\n    styles.useVariants({\n        color: 'primary',\n        size: 'small'\n    })\n\n    return (\n        <View style={styles.container} />\n    )\n}\n\nconst styles = ...\n```\n\n----------------------------------------\n\nTITLE: Using mq Utility for Media Queries in React Native Unistyles\nDESCRIPTION: This snippet demonstrates how to use the mq utility to create media queries for styling in React Native Unistyles. It shows how to apply different background colors based on screen width ranges.\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/docs/src/content/docs/v3/references/media-queries.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Stylesheet, mq } from 'react-native-unistyles'\n\nconst styles = Stylesheet.create(theme => ({\n    container: {\n        flex: 1,\n        justifyContent: 'center',\n        alignItems: 'center'\n        backgroundColor: {\n            [mq.only.width(240, 380)]: theme.colors.background,\n            [mq.only.width(380)]: theme.colors.barbie\n       }\n    }\n}))\n```\n\n----------------------------------------\n\nTITLE: Merging Multiple Styles in React Native with Unistyles\nDESCRIPTION: Demonstrates the recommended way to merge multiple styles using array syntax in React Native components with Unistyles. This approach ensures proper style application and updates.\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/docs/src/content/docs/v3/guides/merging-styles.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<View style={[styles.container, styles.container2]} />\n```\n\n----------------------------------------\n\nTITLE: Accessing Screen Dimensions in TypeScript/React Native\nDESCRIPTION: Demonstrates how to access the width and height of the device screen using UnistylesRuntime.\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/docs/src/content/docs/v3/references/dimensions.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { UnistylesRuntime } from 'react-native-unistyles'\n\nUnistylesRuntime.screen.width // eg. 400\nUnistylesRuntime.screen.height // eg. 760\n```\n\n----------------------------------------\n\nTITLE: Extending TypeScript Types for Unistyles Themes\nDESCRIPTION: How to properly type your themes when using TypeScript. This snippet shows how to extend the UnistylesThemes interface to include your custom theme types.\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/docs/src/content/docs/v3/guides/theming.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\ntype AppThemes = {\n  name: typeof myTheme\n}\n\ndeclare module 'react-native-unistyles' {\n  export interface UnistylesThemes extends AppThemes {}\n}\n```\n\n----------------------------------------\n\nTITLE: Using Breakpoints in React Native Styles with Unistyles\nDESCRIPTION: Shows how to use breakpoints in React Native styles, changing a simple value to an object with breakpoint-specific values.\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/docs/src/content/docs/v3/references/breakpoints.mdx#2025-04-23_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\nconst styles = StyleSheet.create(theme => ({\n    container: {\n        flex: 1,\n        justifyContent: 'center',\n        alignItems: 'center',\n        backgroundColor: theme.colors.background,\n        backgroundColor: {\n+            // your breakpoints\n+            xs: theme.colors.background,\n+            sm: theme.colors.barbie\n+        }\n    },\n    text: {\n        color: theme.colors.typography\n    }\n}))\n```\n\n----------------------------------------\n\nTITLE: Configuring Breakpoints in Unistyles\nDESCRIPTION: Demonstrates how to register the defined breakpoints using StyleSheet.configure method from Unistyles.\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/docs/src/content/docs/v3/references/breakpoints.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { UnistylesRegistry } from 'react-native-unistyles'\n\nStyleSheet.configure({\n    breakpoints\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Static StyleSheet in Unistyles\nDESCRIPTION: Demonstrates how to create a static StyleSheet using Unistyles, which is similar to React Native's StyleSheet.create method.\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/docs/src/content/docs/v3/references/stylesheet.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { StyleSheet } from 'react-native-unistyles'\n\nconst styles = StyleSheet.create({\n    container: {\n        backgroundColor: 'red'\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Replacing UnistylesRegistry with StyleSheet.configure in React Native Unistyles\nDESCRIPTION: Shows how to migrate from UnistylesRegistry.addConfig to StyleSheet.configure, highlighting removed options and updated configuration structure.\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/docs/src/content/docs/v3/start/migration-guide.mdx#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n-   import { UnistylesRegistry } from 'react-native-unistyles'\n+   import { StyleSheet } from 'react-native-unistyles'\n\n-    UnistylesRegistry.addConfig({\n-       adaptiveThemes: false,\n-       initialTheme: 'dark',\n-       plugins: [...],\n-       experimentalCSSMediaQueries: true,\n-       windowResizeDebounceTimeMs: 100,\n-       disableAnimatedInsets: true\n-    })\n\n+    StyleSheet.configure({\n+         settings: {\n+             adaptiveThemes: false, // works exactly the same like in 2.0\n+             initialTheme: 'dark', // works exactly the same like in 2.0\n                 // plugins are removed, instead transform your styles with static functions\n                 // experimentalCSSMediaQueries: these options is also removed, and enabled by default with custom parser\n                 // windowResizeDebounceTimeMs: removed, there is no debouncing anymore. Styles are updated with CSS media queries\n                 // disableAnimatedInsets: removed, insets won't re-render your views\n+        }\n+    })\n```\n\n----------------------------------------\n\nTITLE: Implementing Compound Variants in StyleSheet for React Native\nDESCRIPTION: Extends the previous StyleSheet by adding a compoundVariants array. This example demonstrates how to apply a text underline style when both isBold is true and color is link, showing how compound variants can simplify complex conditional styling.\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/docs/src/content/docs/v3/references/compound-variants.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst styles = StyleSheet.create(theme => ({\n    baseText: {\n        fontFamily: theme.fonts.base,\n        fontWeight: 'normal'\n    },\n    themedText: {\n        variants: {\n            size: {\n                small: {\n                    fontSize: 12\n                },\n                medium: {\n                    fontSize: 16\n                },\n                large: {\n                    fontSize: 20\n                }\n            },\n            isBold: {\n                true: {\n                    fontWeight: 'bold'\n                }\n            },\n            color: {\n                primary: {\n                    color: theme.colors.primary\n                },\n                secondary: {\n                    color: theme.colors.secondary\n                },\n                link: {\n                    color: theme.colors.link\n                }\n            }\n        },\n        compoundVariants: [\n            {\n                isBold: true, // when isBold is true\n                color: 'link', // and color is link\n                // apply following styles\n                styles: {\n                    textDecorationLine: 'underline'\n                    // and more styles\n                }\n            }\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Keyboard Avoiding View with Unistyles in React Native\nDESCRIPTION: This example demonstrates how to use the 'ime' inset to create a keyboard-avoiding view in React Native. The container component automatically adjusts its position when the keyboard appears, ensuring the TextInput remains visible. The transform property uses the negative ime inset value to move the container upward when the keyboard appears.\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/docs/src/content/docs/v3/guides/avoiding-keyboard.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { TextInput, View } from 'react-native'\nimport { StyleSheet } from 'react-native-unistyles'\n\nconst KeyboardAvoidingView = () => {\n    return (\n        <View style={styles.container}>\n            <TextInput style={styles.input} />\n        </View>\n    )\n}\n\nconst styles = StyleSheet.create((theme, rt) => ({\n    container: {\n        flex: 1,\n        alignItems: 'center',\n        justifyContent: 'flex-end',\n        backgroundColor: theme.colors.backgroundColor,\n        paddingHorizontal: theme.gap(2),\n        paddingTop: rt.insets.top,\n        transform: [\n            {\n                translateY: rt.insets.ime * -1\n            }\n        ]\n    },\n    input: {\n        width: '100%',\n    }\n}))\n```\n\n----------------------------------------\n\nTITLE: Updating Unistyles Import Statements\nDESCRIPTION: Shows how to update import statements from using createStyleSheet and useStyles to the unified StyleSheet import.\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/docs/src/content/docs/v3/start/migration-guide.mdx#2025-04-23_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n- import { createStyleSheet, useStyles } from 'react-native-unistyles'\n+ import { StyleSheet } from 'react-native-unistyles'\n```\n\n----------------------------------------\n\nTITLE: Defining Default Variants in React Native Unistyles\nDESCRIPTION: Demonstrates how to define a default variant that will be used when no specific variant is selected.\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/docs/src/content/docs/v3/references/variants.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nconst styles = StyleSheet.create(theme => ({\n    container: {\n        flex: 1,\n        variants: {\n            color: {\n                primary: {\n                    backgroundColor: theme.colors.primary\n                },\n                secondary: {\n                    backgroundColor: theme.colors.secondary\n                },\n                default: {\n                    backgroundColor: theme.colors.barbie\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Manually Changing Themes\nDESCRIPTION: Demonstrates how to manually switch to a different theme using UnistylesRuntime.setTheme method. This can only be used when adaptive themes are disabled.\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/docs/src/content/docs/v3/guides/theming.mdx#2025-04-23_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nimport { UnistylesRuntime } from 'react-native-unistyles'\n\n// change the theme in any component\nexport const ChangeTheme = () => (\n    <Button\n        title=\"Change theme\"\n        onPress={() => UnistylesRuntime.setTheme('dark')}\n    />\n)\n```\n\n----------------------------------------\n\nTITLE: Parsed StyleSheet Example in Unistyles\nDESCRIPTION: Shows an example of how Unistyles parses and calculates the final styles based on the current theme, breakpoint, and runtime values.\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/docs/src/content/docs/v3/references/stylesheet.mdx#2025-04-23_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\n{\n    container: {\n        backgroundColor: '#000',\n        width: 200,\n        height: 200,\n        color: '#ff33aa'\n    },\n    text: {\n        fontSize: 32,\n        color: 'gold'\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Variant Groups in React Native Unistyles\nDESCRIPTION: Demonstrates how to define variant groups within a style object. Groups are used to organize and select variants.\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/docs/src/content/docs/v3/references/variants.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst styles = StyleSheet.create(theme => ({\n    container: {\n        flex: 1,\n        variants: {\n            color: {},\n            size: {},\n            otherGroupName: {}\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Current Breakpoint in Unistyles\nDESCRIPTION: Shows how to access the current breakpoint using UnistylesRuntime in a React Native component.\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/docs/src/content/docs/v3/references/breakpoints.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { UnistylesRuntime } from 'react-native-unistyles'\n\n// check the current breakpoint\nexport const CurrentBreakpoint = () => (\n    <Text>\n        Current breakpoint is {UnistylesRuntime.breakpoint}\n    </Text>\n)\n```\n\n----------------------------------------\n\nTITLE: Updating Theme Properties During Runtime\nDESCRIPTION: Shows how to modify a theme's properties at runtime using UnistylesRuntime.updateTheme. This allows dynamic customization of themes based on user preferences.\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/docs/src/content/docs/v3/guides/theming.mdx#2025-04-23_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\nimport { UnistylesRuntime } from 'react-native-unistyles'\n\n// update the theme at any time\nexport const UpdateTheme = ({ selectedColors }) => (\n    <Button\n        title=\"Update theme\"\n        onPress={() => UnistylesRuntime.updateTheme('dark', currentTheme => ({\n            ...currentTheme,\n            colors: {\n                ...currentTheme.colors,\n                ...selectedColors\n            }\n        }))}\n    />\n)\n```\n\n----------------------------------------\n\nTITLE: MiniRuntime Type Definition in TypeScript\nDESCRIPTION: TypeScript type definition for the MiniRuntime object, which provides access to theme properties, device dimensions, and other UI context values that can be referenced in StyleSheets. This runtime is automatically injected when Unistyles resolves a StyleSheet that depends on it.\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/docs/src/content/docs/v3/references/mini-runtime.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\ntype MiniRuntime = {\n    readonly themeName?: string, // eg. light or undefined if you haven't registered any themes\n    readonly breakpoint?: string, // eg. sm or undefined if you haven't registered any breakpoints\n    readonly hasAdaptiveThemes: boolean, //  true if you have enabled adaptive themes\n    readonly colorScheme: ColorScheme, // eg. light or dark or unspecified\n    readonly screen: Dimensions, // eg. {width: 1024, height: 768}\n    readonly contentSizeCategory: string, // eg. Large\n    readonly insets: Insets, // eg. { top: 28, bottom: 40, left: 0, right: 0 , ime: 0 }\n    readonly pixelRatio: number, // eg. 3.0\n    readonly fontScale: number, // eg. 1.5\n    readonly rtl: boolean // true if your user prefers RTL\n    readonly statusBar: Dimensions, // eg. { width: 240, height: 20,  }\n    readonly navigationBar: Dimensions // eg. { width: 240, height: 44,  }\n    readonly isPortrait: boolean, // true if your device is in portrait mode\n    readonly isLandscape: boolean // true if your device is in landscape mode\n}\n```\n\n----------------------------------------\n\nTITLE: Using Breakpoints with Nested Objects in Unistyles\nDESCRIPTION: Demonstrates how to use breakpoints with nested objects like transform, shadowOffset, or filters in Unistyles.\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/docs/src/content/docs/v3/references/breakpoints.mdx#2025-04-23_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nconst styles = StyleSheet.create(theme => ({\n    container: {\n        flex: 1,\n        justifyContent: 'center',\n        alignItems: 'center',\n        backgroundColor: {\n            xs: theme.colors.background,\n            sm: theme.colors.barbie\n        },\n        transform: [\n            {\n                translateX: 100\n            },\n            {\n                scale: {\n                    xs: 1.5,\n                    xl: 0.9\n                }\n            }\n        ]\n    }\n}))\n```\n\n----------------------------------------\n\nTITLE: Updating Root View Background Color\nDESCRIPTION: Demonstrates how to dynamically change the application's root view background color using UnistylesRuntime.setRootViewBackgroundColor method.\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/docs/src/content/docs/v3/guides/theming.mdx#2025-04-23_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\nimport { UnistylesRuntime } from 'react-native-unistyles'\n\n// update the theme at any time\nexport const UpdateTheme = ({ selectedColors }) => (\n    <Button\n        title=\"Update theme\"\n        onPress={() => UnistylesRuntime.setRootViewBackgroundColor(theme.colors.primary)}\n    />\n)\n```\n\n----------------------------------------\n\nTITLE: Using Breakpoints with Media Queries in React Native Unistyles\nDESCRIPTION: This example shows how to use predefined breakpoints with media queries in React Native Unistyles. It applies different background colors based on a specific height and a width range up to the 'xl' breakpoint.\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/docs/src/content/docs/v3/references/media-queries.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { StyleSheet, mq } from 'react-native-unistyles'\n\nconst styles = Stylesheet.create(theme => ({\n    container: {\n        flex: 1,\n        justifyContent: 'center',\n        alignItems: 'center'\n        backgroundColor: theme.colors.background,\n        backgroundColor: {\n            [mq.only.height(500)]: theme.colors.background,\n            [mq.only.width(200, 'xl')]: theme.colors.barbie\n        }\n    }\n}))\n```\n\n----------------------------------------\n\nTITLE: Combining Media Queries with Breakpoints in React Native Unistyles\nDESCRIPTION: This example demonstrates how to combine media queries with breakpoints in React Native Unistyles. It shows that media queries have higher priority over breakpoints when resolving styles.\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/docs/src/content/docs/v3/references/media-queries.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { StyleSheet, mq} from 'react-native-unistyles'\n\nconst styles = Stylesheet.create(theme => ({\n    container: {\n        flex: 1,\n        justifyContent: 'center',\n        alignItems: 'center'\n        backgroundColor: {\n            sm: theme.colors.background,\n            // Unistyles will firsly resolve to this style, even though 'sm' breakpoint may be also correct\n            [mq.only.width(200, 'xl')]: theme.colors.barbie\n        }\n    }\n}))\n```\n\n----------------------------------------\n\nTITLE: Accessing Insets in TypeScript/React Native\nDESCRIPTION: Shows how to retrieve safe area insets for top, bottom, left, right, and IME using UnistylesRuntime.\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/docs/src/content/docs/v3/references/dimensions.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { UnistylesRuntime } from 'react-native-unistyles'\n\nUnistylesRuntime.insets.top // eg. 42\nUnistylesRuntime.insets.bottom // eg. 24\nUnistylesRuntime.insets.left // eg. 0, or in vertical orientation can be top inset\nUnistylesRuntime.insets.right // eg. 0\nUnistylesRuntime.insets.ime // eg. 0\n```\n\n----------------------------------------\n\nTITLE: Using withUnistyles for Auto-Mapping in React Native\nDESCRIPTION: Shows how to use withUnistyles to automatically handle style mapping for third-party components that expect style props.\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/docs/src/content/docs/v3/references/with-unistyles.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Blurhash } from 'react-native-blurhash'\nimport { withUnistyles } from 'react-native-unistyles'\n\n// ✨ Magic auto mapping\nconst UniBlurHash = withUnistyles(Blurhash)\n\nconst MyComponent = () => {\n    return (\n        <UniBlurHash\n            blurhash=\"LGFFaXYk^6#M@-5c,1J5@[or[Q6.\"\n            // now Blurhash will re-render when theme changes\n            style={styles.container}\n        />\n    )\n}\n\nconst styles = StyleSheet.create(theme => ({\n    container: {\n        borderWidth: 1,\n        // blurhash depends on theme\n        borderColor: theme.colors.primary\n    }\n}))\n```\n\n----------------------------------------\n\nTITLE: Setting Initial Theme in StyleSheet.configure\nDESCRIPTION: Demonstrates how to specify an initial theme when configuring Unistyles. This approach is used when you know the starting theme upfront.\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/docs/src/content/docs/v3/guides/theming.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nStyleSheet.configure({\n    settings: {\n        initialTheme: 'premium'\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Available Media Query Combinations in React Native Unistyles\nDESCRIPTION: This reference snippet shows the available combinations for media queries using the mq utility in React Native Unistyles. It includes targeting width, height, or both.\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/docs/src/content/docs/v3/references/media-queries.mdx#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nmq.only.width // target only width\nmq.only.height // target only height\nmq.width(...).and.height(...) // target both width and height\nmq.height(...).and.width(...) // target both height and width\n```\n\n----------------------------------------\n\nTITLE: Dynamic Prop Mapping with uniProps in React Native\nDESCRIPTION: Shows how to use the uniProps prop for dynamic mappings based on component state or external values.\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/docs/src/content/docs/v3/references/with-unistyles.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Switch } from 'react-native'\nimport { withUnistyles } from 'react-native-unistyles'\n\n// leave it empty here\nconst MySwitch = withUnistyles(Switch)\n\nconst MyComponent = ({ isDisabled }) => {\n    return (\n        <MySwitch\n            uniProps={(theme, rt) => ({\n                trackColor: isDisabled\n                    ? theme.colors.disabled\n                    : theme.colors.primary\n            })}\n        />\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Resolving Initial Theme Dynamically\nDESCRIPTION: Shows how to use a synchronous function to determine the initial theme based on user preferences or stored settings during runtime initialization.\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/docs/src/content/docs/v3/guides/theming.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nStyleSheet.configure({\n    settings: {\n        initialTheme: () =>  {\n            // get preferred theme from user's preferences/MMKV/SQL/StanJS etc.\n            return storage.getString('preferredTheme') ?? 'light'\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Conditionally Displaying Components with Unistyles Breakpoints\nDESCRIPTION: Demonstrates how to show or hide components based on screen size using the 'mq' utility and the 'Display' and 'Hide' components from Unistyles.\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/docs/src/content/docs/v3/references/breakpoints.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Display, Hide, mq } from 'react-native-unistyles'\n\nconst MyComponent = () => {\n    return (\n        <Display mq={mq.only.width(0, 400)}>\n            <Text>This text is visible on small devices</Text>\n        </Display>\n        <Hide mq={mq.only.width(400)}>\n            <Text>This text is hidden on big devices</Text>\n        </Hide>\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Current Theme Name with UnistylesRuntime\nDESCRIPTION: Demonstrates how to access the current theme name using the UnistylesRuntime object. This is useful for displaying the active theme to users.\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/docs/src/content/docs/v3/guides/theming.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { UnistylesRuntime } from 'react-native-unistyles'\n\n// access the current theme name in your component\nexport const UserTheme = () => (\n    <Text>\n        Selected theme is {UnistylesRuntime.themeName}\n    </Text>\n)\n```\n\n----------------------------------------\n\nTITLE: Available Value Formats for Media Queries in React Native Unistyles\nDESCRIPTION: This reference snippet demonstrates the various formats for specifying values in media queries using the mq utility in React Native Unistyles. It includes numeric ranges, breakpoint names, and undefined/null values.\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/docs/src/content/docs/v3/references/media-queries.mdx#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n(100, 200) // from 100 to 199\n(400, 'xl') // from 400 to 'xl' breakpoint\n('sm', 'md') // from 'sm' to 'md' breakpoint\n(undefined, 1000) // from 0 to 999\n(null, 800) // from 0 to 799\n(500) // from 500 onwards\n```\n\n----------------------------------------\n\nTITLE: Generated CSS Output from Unistyles StyleSheet\nDESCRIPTION: The CSS that Unistyles generates from the StyleSheet definition. It shows how flex properties are applied and how media queries are automatically created for responsive styles based on breakpoints.\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/docs/src/content/docs/v3/references/web-styles.mdx#2025-04-23_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.unistyles_1u0egm6 {\n  flex: 1;\n}\n\n@media (min-width: 0px) {\n  .unistyles_kaoph5 {\n    font-size: 32px;\n  }\n}\n\n@media (min-width: 1200px) {\n  .unistyles_kaoph5 {\n    font-size: 40px;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Display Component with Breakpoints in React Native Unistyles\nDESCRIPTION: Demonstrates how to use the Display component to show content based on breakpoint conditions. The example shows content becoming visible at the 'sm' breakpoint.\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/docs/src/content/docs/v3/references/display-hide.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react'\nimport { View } from 'react-native'\nimport { Display, mq } from 'react-native-unistyles'\n\nconst Component = () => {\n    return (\n        <View style={styles.container}>\n            <Display mq={mq.only.width('sm')}>\n                <View style={styles.text}>\n                    I will be visible from 'sm' breakpoint and up\n                </View>\n            </Display>\n        </View>\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Theme Definition for CSS Variables\nDESCRIPTION: Shows a theme definition which will be converted to CSS variables by Unistyles 3.0, eliminating heavy JS processing when changing themes.\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/docs/src/content/docs/v3/references/web-only.mdx#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst darkTheme = {\n    colors: {\n        primary: '#4b7594'\n    },\n    gap: (v: number) => v * 8,\n    fontSize: 16\n}\n```\n\n----------------------------------------\n\nTITLE: Applying System Insets with Unistyles in React Native\nDESCRIPTION: This snippet demonstrates how to properly apply system insets (top, bottom, left, right) to a container component using Unistyles' runtime properties. It shows how to create responsive layouts that respect device-specific insets like status bars and navigation bars.\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/docs/src/content/docs/v3/references/edge-to-edge.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { StyleSheet } from 'react-native-unistyles'\n\nconst App = () => (\n    <View style={styles.container}>\n        <Text style={styles.text}>\n            Correct insets\n        </Text>\n    </View>\n)\n\nconst styles = StyleSheet.create((theme, rt) => ({\n    container: {\n        backgroundColor: theme.colors.background,\n        flex: 1,\n        // apply insets to the container,\n        // so it will add required paddings\n        paddingTop: rt.insets.top,\n        paddingBottom: rt.insets.bottom,\n        paddingLeft: rt.insets.left,\n        paddingRight: rt.insets.right\n    },\n}))\n```\n\n----------------------------------------\n\nTITLE: Using Dynamic Functions with TypeScript Parameters in Unistyles\nDESCRIPTION: Example showing how to implement dynamic stylesheet functions with TypeScript type hints. The function accepts parameters (maxWidth and isOdd) that are passed from the JSX component and used to conditionally style elements.\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/docs/src/content/docs/v3/references/dynamic-functions.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx /maxWidth/ /isOdd/\nexport const Example = ({ maxWidth, isOdd, children }) => {\n    return (\n        <View style={styles.container(maxWidth, isOdd)}>\n            {children}\n        </View>\n    )\n}\n\nconst styles = StyleSheet.create(theme => ({\n    container: (maxWidth: number, isOdd: boolean) => ({\n        backgroundColor: theme.colors.background,\n        flex: 1,\n        justifyContent: 'center,\n        alignItems: 'center',\n        maxWidth,\n        borderBottomWidth: isOdd ? 1 : undefined\n    })\n}))\n```\n```\n\n----------------------------------------\n\nTITLE: Enabling Adaptive Themes\nDESCRIPTION: Demonstrates how to explicitly enable adaptive themes support in StyleSheet.configure settings. This allows Unistyles to automatically switch between light and dark themes.\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/docs/src/content/docs/v3/guides/theming.mdx#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nStyleSheet.configure({\n    themes: {\n        light: lightTheme,\n        dark: darkTheme\n    },\n    settings: {\n        adaptiveThemes: true\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Using Web-Only Styles in StyleSheet\nDESCRIPTION: Shows how to implement web-specific styles using the _web key in a StyleSheet. These styles are merged with other styles on web but ignored on Android and iOS.\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/docs/src/content/docs/v3/references/web-only.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        // Web only styles:\n        _web: {\n            display: 'grid',\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Using Pseudo Elements and Selectors in Web Styles\nDESCRIPTION: Demonstrates how to use pseudo-elements and selectors in web styles by replacing ':' and '::' with '_' for easier usage.\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/docs/src/content/docs/v3/references/web-only.mdx#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst styles = StyleSheet.create(theme => ({\n    button: {\n        backgroundColor: theme.colors.button,\n        _web: {\n            _hover: {\n                backgroundColor: theme.colors.hovered,\n            },\n            _before: {\n                content: '\"🦄\"',\n            }\n        }\n    },\n}))\n```\n\n----------------------------------------\n\nTITLE: Using Built-in Landscape and Portrait Breakpoints in Unistyles\nDESCRIPTION: Shows how to use the built-in 'landscape' and 'portrait' breakpoints in Unistyles, which are available on mobile devices by default.\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/docs/src/content/docs/v3/references/breakpoints.mdx#2025-04-23_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nconst styles = StyleSheet.create(theme => ({\n    container: {\n        flex: 1,\n        justifyContent: 'center',\n        alignItems: 'center',\n        backgroundColor: {\n            landscape: theme.colors.background,\n            portrait: theme.colors.barbie\n        }\n    }\n}))\n```\n\n----------------------------------------\n\nTITLE: Importing UnistylesRuntime in React Native\nDESCRIPTION: Shows how to import the UnistylesRuntime from the react-native-unistyles package. This is the entry point for accessing runtime platform-specific values and functionality.\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/docs/src/content/docs/v3/references/unistyles-runtime.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { UnistylesRuntime } from 'react-native-unistyles'\n```\n\n----------------------------------------\n\nTITLE: Using Height-Only Media Queries in React Native Unistyles\nDESCRIPTION: This snippet demonstrates how to use height-only media queries with the mq utility in React Native Unistyles. It applies different background colors based on screen height ranges.\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/docs/src/content/docs/v3/references/media-queries.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { StyleSheet, mq } from 'react-native-unistyles'\n\nconst styles = Stylesheet.create(theme => ({\n    container: {\n        flex: 1,\n        justifyContent: 'center',\n        alignItems: 'center'\n        backgroundColor: theme.colors.background,\n        backgroundColor: {\n            [mq.only.height(300, 500)]: theme.colors.background,\n            [mq.only.height(500)]: theme.colors.barbie\n        }\n    }\n}))\n```\n\n----------------------------------------\n\nTITLE: Inferring TypeScript Types for Variants in React Native Unistyles\nDESCRIPTION: Demonstrates how to use UnistylesVariants to infer TypeScript types for variants from the stylesheet definition.\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/docs/src/content/docs/v3/references/variants.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react'\nimport { StyleSheet, UnistylesVariants } from 'react-native-unistyles'\n\ntype ComponentProps = UnistylesVariants<typeof styles>\n\nconst Component: React.FunctionComponent = ({ color, size }) => {\n    styles.useVariants({\n        color,\n        size\n    })\n\n    return (\n        <View style={styles.container} />\n    )\n}\n\n// infers type of your variants from the stylesheet below\nconst styles = ...\n```\n\n----------------------------------------\n\nTITLE: Checking Adaptive Themes Status\nDESCRIPTION: Demonstrates how to check if adaptive themes are currently enabled using the UnistylesRuntime.hasAdaptiveThemes property.\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/docs/src/content/docs/v3/guides/theming.mdx#2025-04-23_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport { UnistylesRuntime } from 'react-native-unistyles'\n\n// check if you've enabled adaptive themes\nexport const AdaptiveThemes = () => (\n    <Text>\n        Adaptive themes are {UnistylesRuntime.hasAdaptiveThemes ? 'enabled' : 'disabled'}\n    </Text>\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel for React Compiler with Unistyles in React Native\nDESCRIPTION: A sample Babel configuration showing the correct order of plugins for integrating React Compiler with Unistyles. The Unistyles Babel plugin must run before the React Compiler plugin to properly process Variants.\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/docs/src/content/docs/v3/guides/react-compiler.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = function () {\n  return {\n    plugins: [\n      ['react-native-unistyles/plugin'], // Must run before react-compiler\n+     'babel-plugin-react-compiler',\n      // Add other plugins here\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Display Component with Pixel Values in React Native Unistyles\nDESCRIPTION: Shows how to use the Display component with pixel-based width values instead of breakpoints. The example demonstrates showing content within a specific pixel range.\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/docs/src/content/docs/v3/references/display-hide.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react'\nimport { View } from 'react-native'\nimport { Display, mq } from 'react-native-unistyles'\n\nconst Component = () => {\n    return (\n        <View style={styles.container}>\n            <Display mq={mq.only.width(0, 500)}>\n                <View style={styles.text}>\n                    I will be visible from 0 to 500px\n                </View>\n            </Display>\n        </View>\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Unistyles and Dependencies via Yarn\nDESCRIPTION: Commands to install Unistyles v3 (next version) along with its required dependencies react-native-nitro-modules and react-native-edge-to-edge using Yarn package manager.\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/docs/src/content/docs/v3/start/getting-started.mdx#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nyarn add react-native-unistyles@next\nyarn add react-native-nitro-modules react-native-edge-to-edge\n```\n\n----------------------------------------\n\nTITLE: Migrating Variants to styles.useVariants\nDESCRIPTION: Shows how to migrate from passing variants to useStyles to using the new styles.useVariants method.\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/docs/src/content/docs/v3/start/migration-guide.mdx#2025-04-23_snippet_14\n\nLANGUAGE: diff\nCODE:\n```\n- import { useStyles } from 'react-native-unistyles'\n+ import { StyleSheet } from 'react-native-unistyles'\n\nconst MyComponent = () => {\n-   const { styles } = useStyles(stylesheet, {\n-       variant1: 'primary',\n-       variant2: 'secondary'\n-   })\n+   styles.useVariants({\n+       variant1: 'primary',\n+       variant2: 'secondary'\n+   })\n\n    return <View style={styles.container} />\n}\n```\n\n----------------------------------------\n\nTITLE: Toggling Adaptive Themes During Runtime\nDESCRIPTION: Shows how to enable or disable adaptive theme support dynamically at runtime using UnistylesRuntime.setAdaptiveThemes method.\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/docs/src/content/docs/v3/guides/theming.mdx#2025-04-23_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport { UnistylesRuntime } from 'react-native-unistyles'\n\n// toggle support for adaptive themes at any point\nexport const ToggleAdaptiveThemes = () => (\n    <Button\n        title=\"Disable adaptive themes\"\n        onPress={() => UnistylesRuntime.setAdaptiveThemes(false)}\n    />\n)\n```\n\n----------------------------------------\n\nTITLE: Theme and Insets Subscription with useUnistyles\nDESCRIPTION: Example showing how to subscribe to both theme and insets changes by accessing the rt.insets property.\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/docs/src/content/docs/v3/references/use-unistyles.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n// subscribes to theme and insets changes\nconst { theme, rt } = useUnistyles()\n\nrt.insets // reading this value will automatically subscribe to insets changes\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel for Unistyles\nDESCRIPTION: Configuration for babel.config.js to add the Unistyles plugin. The example shows both React Native and Expo preset options commented out, with the Unistyles plugin added to the plugins array.\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/docs/src/content/docs/v3/start/getting-started.mdx#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = function (api) {\n  api.cache(true)\n\n  return {\n    // for bare React Native\n    // presets: ['module:@react-native/babel-preset'],\n\n    // or for Expo\n    // presets: ['babel-preset-expo'],\n\n    // other config\n    plugins: [\n        // other plugins\n        ['react-native-unistyles/plugin']\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Prop Mapping with withUnistyles in React Native\nDESCRIPTION: Demonstrates how to use withUnistyles to map custom props to Unistyles styles for components that don't use standard style props.\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/docs/src/content/docs/v3/references/with-unistyles.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Button } from 'react-native'\nimport { withUnistyles } from 'react-native-unistyles'\n\n// ✨ Some magic happens under the hood\nconst UniButton = withUnistyles(Button, (theme, rt) => ({\n    // map `primary` color to `color` prop\n    color: theme.colors.primary\n    // any other props that Button supports\n}))\n\nconst MyComponent = () => {\n    return (\n        // you don't need to specify color props here\n        <UniButton />\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of useUnistyles with a Single Component\nDESCRIPTION: A best practice example showing how to use useUnistyles with a single third-party component to minimize re-renders.\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/docs/src/content/docs/v3/references/use-unistyles.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useUnistyles } from 'react-native-unistyles'\nimport Icon from 'react-native-cool-icons/MaterialIcons'\n\nconst MyComponent = () => {\n    const { theme } = useUnistyles()\n\n    // Ensure this component has no children\n    return (\n        <Icon color={theme.colors.primary} />\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Using useUnistyles with React Navigation Components\nDESCRIPTION: Example of using useUnistyles with React Navigation Stack component, which is acceptable since React Navigation doesn't re-render screens on style changes.\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/docs/src/content/docs/v3/references/use-unistyles.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Stack } from 'expo-router'\n\nexport default function Layout() {\n    const { theme } = useUnistyles()\n\n    return (\n        <Stack\n            screenOptions={{\n                headerStyle: {\n                    backgroundColor: theme.colors.background\n                }\n            }}\n        >\n            <Stack.Screen name=\"home\" />\n        </Stack>\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Refactoring Theme Access Using withUnistyles HOC\nDESCRIPTION: Demonstrates how to refactor components that need theme access using the withUnistyles higher-order component instead of useStyles.\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/docs/src/content/docs/v3/start/migration-guide.mdx#2025-04-23_snippet_6\n\nLANGUAGE: diff\nCODE:\n```\nimport { Button } from 'react-native'\n-import { useStyles } from 'react-native-unistyles'\n+import { withUnistyles } from 'react-native-unistyles'\n\n+const UniButton = withUnistyles(Button, theme => ({\n+    color: theme.colors.primary\n+}))\n\nconst MyButton = () => {\n    return <UniButton />\n}\n\nconst MyButton = () => {\n-    const { theme } = useStyles(stylesheet)\n\n-     return <Button color={theme.colors.primary} />\n+    return <UniButton />\n}\n```\n\n----------------------------------------\n\nTITLE: Using Hide Component with Breakpoint Range in React Native Unistyles\nDESCRIPTION: Demonstrates how to use the Hide component to conditionally hide content between specific breakpoints. The example shows content being hidden between 'sm' and 'lg' breakpoints.\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/docs/src/content/docs/v3/references/display-hide.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react'\nimport { View } from 'react-native'\nimport { Hide, mq } from 'react-native-unistyles'\n\nconst Component = () => {\n    return (\n        <View style={styles.container}>\n            <Hide mq={mq.only.width('sm', 'lg')}>\n                <View style={styles.text}>\n                    I will be hidden from 'sm' breakpoint to 'lg' breakpoint\n                </View>\n            </Hide>\n        </View>\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Using hairlineWidth in Unistyles StyleSheet\nDESCRIPTION: Shows how to use StyleSheet.hairlineWidth to create the thinnest possible line on the device, useful for borders or dividers.\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/docs/src/content/docs/v3/references/stylesheet.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { StyleSheet } from 'react-native-unistyles'\n\nconst styles = StyleSheet.create(theme => ({\n    container: {\n        borderBottomWidth: StyleSheet.hairlineWidth,\n        borderColor: theme.colors.accent\n    }\n}))\n```\n\n----------------------------------------\n\nTITLE: Correcting Transform Property for Web\nDESCRIPTION: Shows how to properly use the transform property on web by using a string value instead of the React Native array syntax.\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/docs/src/content/docs/v3/references/web-only.mdx#2025-04-23_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        _web: {\n            display: 'grid',\n-           transform: [{ translateX: 10 }],\n+           transform: 'translateX(10px)',\n        }\n     }\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing Device Color Scheme\nDESCRIPTION: Shows how to retrieve the current device color scheme preference (light, dark, or unspecified) using UnistylesRuntime.colorScheme.\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/docs/src/content/docs/v3/guides/theming.mdx#2025-04-23_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nimport { UnistylesRuntime } from 'react-native-unistyles'\n\n// check the current device scheme preference\nexport const UserTheme = () => (\n    <Text>\n        My device is using the {UnistylesRuntime.colorScheme} scheme.\n    </Text>\n)\n```\n\n----------------------------------------\n\nTITLE: Defining StyleSheet with Static and Responsive Styles in TypeScript\nDESCRIPTION: Example of creating a StyleSheet with static and responsive styles in Unistyles. The example shows how to define a container with static styles, text with breakpoint-specific font sizes, and a parent container.\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/docs/src/content/docs/v3/references/web-styles.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        backgroundColor: 'red',\n        fontSize: 32,\n    },\n    text: {\n        fontSize: {\n            xs: 28,\n            lg: 40\n        },\n    },\n    parentContainer: {\n        flex: 1,\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Using Multiple ClassNames with Array\nDESCRIPTION: Demonstrates how to use multiple custom CSS classes by passing an array of strings to the _classNames property.\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/docs/src/content/docs/v3/references/web-only.mdx#2025-04-23_snippet_6\n\nLANGUAGE: diff\nCODE:\n```\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        _web: {\n-           _classNames: 'my-custom-class',\n+           _classNames: ['my-custom-class', 'my-other-class'],\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Switching Theme in Unistyles\nDESCRIPTION: Code showing how to change the current theme to 'light' using the UnistylesRuntime API.\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/docs/src/content/docs/v3/references/web-styles.mdx#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nUnistylesRuntime.setTheme('light')\n```\n\n----------------------------------------\n\nTITLE: Accessing Navigation Bar Dimensions in TypeScript/React Native\nDESCRIPTION: Demonstrates how to access the width and height of the navigation bar using UnistylesRuntime.\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/docs/src/content/docs/v3/references/dimensions.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { UnistylesRuntime } from 'react-native-unistyles'\n\nUnistylesRuntime.navigationBar.width // eg. 400\nUnistylesRuntime.navigationBar.height // eg. 24\n```\n\n----------------------------------------\n\nTITLE: Conditionally Applying ClassNames\nDESCRIPTION: Shows how to conditionally apply custom CSS classes based on component props or other conditions.\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/docs/src/content/docs/v3/references/web-only.mdx#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst styles = StyleSheet.create({\n    button: (isPrimary: boolean) => ({\n        _web: {\n            _classNames: isPrimary ? 'primary-button' : 'secondary-button',\n        }\n    })\n})\n```\n\n----------------------------------------\n\nTITLE: Retrieving Registered Breakpoints in Unistyles\nDESCRIPTION: Demonstrates how to access the registered breakpoints object using UnistylesRuntime in a React Native component.\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/docs/src/content/docs/v3/references/breakpoints.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport { UnistylesRuntime } from 'react-native-unistyles'\n\n// check the registered breakpoints\nexport const RegisteredBreakpoints = () => (\n    <Text>\n        My registered breakpoint are {JSON.stringify(UnistylesRuntime.breakpoints)}\n    </Text>\n)\n```\n\n----------------------------------------\n\nTITLE: StyleSheet Theme Dependency Detection\nDESCRIPTION: Example showing how the Babel plugin detects theme dependencies in StyleSheet definitions\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/docs/src/content/docs/v3/other/babel-plugin.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst stylesheet = StyleSheet.create(theme => ({\n    container: {\n        backgroundColor: theme.colors.background\n    },\n    text: {\n        fontSize: 12\n    }\n}))\n```\n\n----------------------------------------\n\nTITLE: Basic ScopedTheme Implementation in React Native\nDESCRIPTION: Demonstrates basic usage of ScopedTheme component to apply a dark theme to a specific View component and its children.\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/docs/src/content/docs/v3/references/scoped-theme.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<ScopedTheme name=\"dark\">\n    // components here will be fixed to dark theme\n    <View style={styles.container}>\n        <Text style={styles.text}>\n            Hello world\n        </Text>\n    </View>\n</ScopedTheme>\n```\n\n----------------------------------------\n\nTITLE: Implementing SSR-compatible Style Component for Next.js App Router\nDESCRIPTION: This code snippet defines a client-side Style component that enables server-side rendering of Unistyles in a Next.js application using the App router. It utilizes useServerUnistyles and useServerInsertedHTML hooks to inject CSS on the server side.\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/docs/src/content/docs/v3/guides/server-side-rendering.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n'use client'\n\nimport { PropsWithChildren, useRef } from 'react'\nimport { useServerUnistyles } from 'react-native-unistyles/server'\nimport { useServerInsertedHTML } from 'next/navigation'\nimport './unistyles'\n\nexport const Style = ({ children }: PropsWithChildren) => {\n    const isServerInserted = useRef(false)\n    const unistyles = useServerUnistyles()\n\n    useServerInsertedHTML(() => {\n        if (isServerInserted.current) {\n            return null\n        }\n\n        isServerInserted.current = true\n\n        return unistyles\n    })\n\n    return <>{children}</>\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Unistyles Breakpoint Types in TypeScript\nDESCRIPTION: Shows how to override the Unistyles library's type definitions to include custom breakpoints when using TypeScript.\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/docs/src/content/docs/v3/references/breakpoints.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\ntype AppBreakpoints = typeof breakpoints\n\ndeclare module 'react-native-unistyles' {\n  export interface UnistylesBreakpoints extends AppBreakpoints {}\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing createStyleSheet with StyleSheet.create\nDESCRIPTION: Demonstrates how to replace the createStyleSheet function with StyleSheet.create in Unistyles 3.0.\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/docs/src/content/docs/v3/start/migration-guide.mdx#2025-04-23_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n- const stylesheet = createStyleSheet(theme => ({\n+ const stylesheet = StyleSheet.create(theme => ({\n```\n\n----------------------------------------\n\nTITLE: Implementing SSR for Unistyles in Next.js Pages Router\nDESCRIPTION: This code snippet shows how to implement server-side rendering for Unistyles in a Next.js application using the Pages router. It modifies the _document.tsx file to include server-side styles and resets the server Unistyles after rendering.\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/docs/src/content/docs/v3/guides/server-side-rendering.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n+ import { getServerUnistyles, resetServerUnistyles } from 'react-native-unistyles/server'\n\n    export default class Document extends NextDocument {\n+       static async getInitialProps({ renderPage }: DocumentContext) {\n+           const page = await renderPage()\n+           const styles = getServerUnistyles()\n\n+           resetServerUnistyles()\n\n+           return {\n+               ...page,\n+               styles\n+           }\n+       }\n```\n\n----------------------------------------\n\nTITLE: Integrating Style Component in Next.js App Router Layout\nDESCRIPTION: This code snippet demonstrates how to integrate the Style component into the root layout of a Next.js application using the App router. It wraps the children of the body element with the Style component to ensure proper initialization of Unistyles.\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/docs/src/content/docs/v3/guides/server-side-rendering.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n+ import '../unistyles'\n+ import { Style } from '../Style'\n\nexport default function RootLayout({\nchildren,\n}: Readonly<{\nchildren: React.ReactNode;\n}>) {\nreturn (\n    <html lang=\"en\">\n    <body>\n+        <Style>\n            {children}\n+        </Style>\n    </body>\n    </html>\n);\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Font Scale in TypeScript/React Native\nDESCRIPTION: Shows how to access the device's font scale using UnistylesRuntime.\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/docs/src/content/docs/v3/references/dimensions.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nUnistylesRuntime.fontScale // eg. 1.0\n```\n\n----------------------------------------\n\nTITLE: Creating index.ts for Initializing Expo Router and Unistyles\nDESCRIPTION: Creates an index.ts file that imports Expo Router entry and Unistyles configuration to ensure proper initialization order.\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/docs/src/content/docs/v3/guides/expo-router.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport 'expo-router/entry'\nimport './unistyles' // <-- file that initializes Unistyles\n```\n\n----------------------------------------\n\nTITLE: Injecting Custom ClassNames with String Value\nDESCRIPTION: Shows how to add custom CSS classes to your components using the _classNames property inside the _web block.\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/docs/src/content/docs/v3/references/web-only.mdx#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        _web: {\n            _classNames: 'my-custom-class',\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Using useUnistyles Hook to Access Theme\nDESCRIPTION: Shows how to access the current theme using the useUnistyles hook. This approach is not recommended as it causes component re-renders on theme changes.\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/docs/src/content/docs/v3/guides/theming.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useUnistyles } from 'react-native-unistyles'\n\nconst MyComponent = () => {\n    const { theme } = useUnistyles()\n\n    return (\n        <Text>\n            My theme is {theme.colors.primary}\n        </Text>\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Initial Theme with StyleSheet.configure\nDESCRIPTION: Shows how to set an initial theme in StyleSheet.configure, replacing the useInitialTheme hook.\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/docs/src/content/docs/v3/start/migration-guide.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { StyleSheet } from 'react-native-unistyles'\n\nStyleSheet.configure({\n    themes,\n    breakpoints,\n    settings: {\n        initialTheme: () => {\n            // get preferred theme from user's preferences/MMKV/SQL/StanJS etc.\n            // must be synchronous\n            return storage.getString('preferredTheme') ?? 'light'\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Generated CSS Variables for Theme\nDESCRIPTION: Shows how Unistyles converts theme values into CSS variables that are used instead of string references.\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/docs/src/content/docs/v3/references/web-only.mdx#2025-04-23_snippet_9\n\nLANGUAGE: css\nCODE:\n```\n:root.dark {\n    --colors-primary: #4b7594;\n}\n```\n\n----------------------------------------\n\nTITLE: Nested ScopedTheme Components in React Native\nDESCRIPTION: Shows how to nest multiple ScopedTheme components to apply different themes to different sections of the UI hierarchy.\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/docs/src/content/docs/v3/references/scoped-theme.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<ScopedTheme name=\"dark\">\n    // I will be dark!\n    <View style={styles.container}>\n        <Text style={styles.text}>\n            Dark\n        </Text>\n    </View>\n    <ScopedTheme name=\"light\">\n        // I will be light!\n        <View style={styles.container}>\n            <Text style={styles.text}>\n                Light\n            </Text>\n        </View>\n    </ScopedTheme>\n    // I will be dark again!\n    <View style={styles.container}>\n        <Text style={styles.text}>\n            Dark\n        </Text>\n    </View>\n</ScopedTheme>\n```\n\n----------------------------------------\n\nTITLE: Props Resolution Priority with withUnistyles in React Native\nDESCRIPTION: Illustrates the priority order of prop resolution when using withUnistyles, including global mappings, uniProps, and inline props.\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/docs/src/content/docs/v3/references/with-unistyles.mdx#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// By default, Button is red\nconst UniButton = withUnistyles(Button, theme => ({\n    color: theme.colors.red\n}))\n\n// `uniProps` have higher priority,\n// so the button is orange\n<UniButton\n    uniProps={theme => ({\n       color: theme.colors.orange\n    })}\n/>\n\n// Inline props have the highest priority,\n// so Button is pink\n<UniButton\n    color=\"pink\"\n    uniProps={theme => ({\n       color: theme.colors.orange\n    })}\n/>\n```\n\n----------------------------------------\n\nTITLE: Handling Third-Party Components with Unistyles in React Native\nDESCRIPTION: Demonstrates the limitation of using Unistyles with third-party components that don't expose a native view via the ref prop.\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/docs/src/content/docs/v3/references/with-unistyles.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Blurhash } from 'react-native-blurhash'\n\nconst MyComponent = () => {\n    return\n        <Blurhash\n            blurhash=\"LGFFaXYk^6#M@-5c,1J5@[or[Q6.\"\n            // 💥 Oops! Blurhash is 3rd party view, that might not expose the `ref` prop\n            // it will never update when theme changes\n            style={styles.container}\n        />\n    }\n}\n\nconst styles = StyleSheet.create(theme => ({\n    container: {\n        borderWidth: 1,\n        borderColor: theme.colors.primary\n    }\n}))\n```\n\n----------------------------------------\n\nTITLE: Compatible Theme-based Styling for CSS Variables\nDESCRIPTION: Shows the recommended approach for styling with CSS variables, relying on consistent theme values across different themes.\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/docs/src/content/docs/v3/references/web-only.mdx#2025-04-23_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n// ✅ OK\nconst styles = StyleSheet.create(theme => ({\n    container: {\n        // your rely on the same theme values across different themes\n        backgroundColor: theme.colors.background\n    }\n}))\n```\n\n----------------------------------------\n\nTITLE: Accessing Content Size Category in React Native with Unistyles\nDESCRIPTION: This snippet demonstrates how to retrieve the current content size category using UnistylesRuntime in a React Native component. It creates a Text component that displays the current content size category of the device.\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/docs/src/content/docs/v3/references/content-size-category.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { UnistylesRuntime } from 'react-native-unistyles'\n\n// check the current content size category\nexport const ContentSizeCategory = () => (\n    <Text>\n        My device is using the {UnistylesRuntime.contentSizeCategory} size.\n    </Text>\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Expo Router Web for Static Rendering in app.json\nDESCRIPTION: Sets up the Expo application configuration for static rendering with Metro bundler in app.json.\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/docs/src/content/docs/v3/guides/expo-router.mdx#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"web\": {\n      \"bundler\": \"metro\",\n      \"output\": \"static\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Display and Hide Components for Responsive Design\nDESCRIPTION: Shows how to use the new Display and Hide components with media queries to create responsive interfaces instead of accessing breakpoints directly.\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/docs/src/content/docs/v3/start/migration-guide.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Text } from 'react-native'\nimport { Display, Hide, mq } from 'react-native-unistyles'\n\nconst MyText = () => {\n    return (\n        <Display mq={mq.only.width(0, 400)}>\n            <Text>This text is visible on small devices</Text>\n        </Display>\n        <Hide mq={mq.only.width(400)}>\n            <Text>This text is hidden on big devices</Text>\n        </Hide>\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Using useUnistyles Hook for Faster Migration\nDESCRIPTION: Shows how to use the useUnistyles hook to maintain theme access during migration, allowing components to continue re-rendering on theme changes.\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/docs/src/content/docs/v3/start/migration-guide.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button } from 'react-native'\nimport { useUnistyles } from 'react-native-unistyles'\n\nconst MyText = () => {\n    const { theme } = useUnistyles()\n\n    return (\n        <Button color={theme.colors.primary} />\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Suppressing Hydration Warning in Next.js Root HTML Element\nDESCRIPTION: This code snippet shows how to suppress hydration warnings on the root HTML element when using Unistyles without adaptive themes. It adds the suppressHydrationWarning attribute to the html tag.\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/docs/src/content/docs/v3/guides/server-side-rendering.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n- <html lang=\"en\">\n+ <html lang=\"en\" suppressHydrationWarning>\n```\n\n----------------------------------------\n\nTITLE: Importing Content Size Category Enums in React Native with Unistyles\nDESCRIPTION: This snippet shows how to import the AndroidContentSizeCategory and IOSContentSizeCategory enums from react-native-unistyles. These enums can be used to compare the current content size category based on the platform.\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/docs/src/content/docs/v3/references/content-size-category.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AndroidContentSizeCategory, IOSContentSizeCategory } from 'react-native-unistyles'\n\n// compare the current content size category based on platform\n```\n\n----------------------------------------\n\nTITLE: Importing UnistylesRuntime in TypeScript/React Native\nDESCRIPTION: Shows how to import the UnistylesRuntime module from react-native-unistyles to access dimension metadata.\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/docs/src/content/docs/v3/references/dimensions.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { UnistylesRuntime } from 'react-native-unistyles'\n```\n\n----------------------------------------\n\nTITLE: Adding Theme Class to Root HTML Element in Next.js\nDESCRIPTION: This code snippet demonstrates how to directly add a theme-specific className to the root HTML element when using Unistyles. It adds the 'dark' class to the html tag as an example.\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/docs/src/content/docs/v3/guides/server-side-rendering.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n- <html lang=\"en\">\n+ <html lang=\"en\" className=\"dark\">\n```\n\n----------------------------------------\n\nTITLE: Accessing Pixel Ratio in TypeScript/React Native\nDESCRIPTION: Demonstrates how to retrieve the device's pixel ratio using UnistylesRuntime.\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/docs/src/content/docs/v3/references/dimensions.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nUnistylesRuntime.pixelRatio // eg. 2.0\n```\n\n----------------------------------------\n\nTITLE: Hydrating Server Unistyles in Next.js Pages Router\nDESCRIPTION: This code snippet demonstrates how to hydrate server Unistyles in the _app.tsx file of a Next.js application using the Pages router. It uses the useEffect hook to call hydrateServerUnistyles on the client side.\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/docs/src/content/docs/v3/guides/server-side-rendering.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n+ import { hydrateServerUnistyles } from 'react-native-unistyles/server'\n\n{/* JSX of your component */}\n+ useEffect(() => {\n+     hydrateServerUnistyles()\n+ }, [])\n```\n\n----------------------------------------\n\nTITLE: Importing ScopedTheme Component in TypeScript\nDESCRIPTION: Shows how to import the ScopedTheme component from react-native-unistyles library.\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/docs/src/content/docs/v3/references/scoped-theme.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ScopedTheme } from 'react-native-unistyles'\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel Debug Mode for Unistyles in JavaScript\nDESCRIPTION: Shows how to enable debug mode in the Babel plugin configuration to help identify dependency detection issues. This outputs detected dependencies for each file and style to the console when Metro server is restarted.\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/docs/src/content/docs/v3/guides/why-my-view-doesnt-update.mdx#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = function (api) {\n  api.cache(true)\n\n  return {\n    // other config\n    plugins: [\n        // other plugins\n        ['react-native-unistyles/plugin', {\n            debug: true\n        }]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Status Bar Dimensions in TypeScript/React Native\nDESCRIPTION: Shows how to retrieve the width and height of the status bar using UnistylesRuntime.\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/docs/src/content/docs/v3/references/dimensions.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { UnistylesRuntime } from 'react-native-unistyles'\n\nUnistylesRuntime.statusBar.width // eg. 400\nUnistylesRuntime.statusBar.height // eg. 24\n```\n\n----------------------------------------\n\nTITLE: Using Empty Variant Objects for Type Consistency in Unistyles\nDESCRIPTION: Solution to TypeScript typing issues by including empty objects for unused variants. This ensures consistent TypeScript types across all styles while allowing specific variants to have no effect.\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/docs/src/content/docs/v3/references/variants.mdx#2025-04-23_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nconst styles = StyleSheet.create(theme => ({\n    container: {\n        flex: 1,\n        variants: {\n            size: {\n                small: {\n                    width: 100,\n                    height: 100\n                },\n                medium: {\n                    width: 200,\n                    height: 200\n                },\n                large: {\n                    width: 300,\n                    height: 300\n                }\n            }\n        }\n    },\n    text: {\n        fontWeight: 'bold',\n        variants: {\n            size: {\n                small: {\n                    fontSize: 12\n                },\n                medium: {},\n                large: {}\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generated CSS for Light Theme\nDESCRIPTION: The CSS output after switching to the light theme. The background color automatically updates to a light value (#fff).\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/docs/src/content/docs/v3/references/web-styles.mdx#2025-04-23_snippet_5\n\nLANGUAGE: css\nCODE:\n```\n.unistyles_1u0egm6 {\n  flex: 1;\n  background-color: #fff;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing React Native Unistyles Package\nDESCRIPTION: Command to install the next version of react-native-unistyles using yarn package manager.\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nyarn add react-native-unistyles@next\n```\n\n----------------------------------------\n\nTITLE: Configuring Unistyles Babel Plugin in JavaScript\nDESCRIPTION: A comprehensive example of how to configure the Unistyles Babel plugin in babel.config.js with various options including autoProcessRoot, autoProcessImports, autoProcessPaths, and debug flag.\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/docs/src/content/docs/v3/other/babel-plugin.mdx#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('react-native-unistyles/plugin').UnistylesPluginOptions} */\nconst unistylesPluginOptions = {\n    autoProcessRoot: 'src',\n    autoProcessImports: ['@react-native-ui-kit', '@codemask/styles'],\n\n    autoProcessPaths: ['external-library/components'],\n    debug: true,\n}\n\nmodule.exports = function (api) {\n    api.cache(true)\n\n    return {\n        // other config\n        plugins: [\n            ['react-native-unistyles/plugin', unistylesPluginOptions]\n            // other plugins\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Pods for React Native iOS\nDESCRIPTION: Command to install CocoaPods dependencies for React Native iOS projects after adding Unistyles.\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/docs/src/content/docs/v3/start/getting-started.mdx#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncd ios && pod install\n```\n\n----------------------------------------\n\nTITLE: Logging Style Values in React Native Mobile vs Web\nDESCRIPTION: Demonstrates the difference in how styles are handled on mobile vs web platforms in Unistyles. On mobile, styles are directly accessible objects while on web they're converted to CSS classes.\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/docs/src/content/docs/v3/guides/why-my-view-doesnt-update.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nexport const MyView: React.FunctionComponent = () => {\n    console.log(styles.container) // { backgroundColor: 'red' }\n\n    return (\n        ...\n    )\n}\n\nconst styles = StyleSheet.create({\n    container: {\n        backgroundColor: 'red'\n    }\n})\n```\n\nLANGUAGE: tsx\nCODE:\n```\nexport const MyView: React.FunctionComponent = () => {\n    console.log(styles.container) // {}\n\n    return (\n        ...\n    )\n}\n\nconst styles = StyleSheet.create({\n    container: {\n        backgroundColor: 'red'\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Using ime Inset Instead of bottom for Keyboard Positioning\nDESCRIPTION: Shows how to use the new ime inset property instead of bottom inset for keyboard-aware positioning.\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/docs/src/content/docs/v3/start/migration-guide.mdx#2025-04-23_snippet_10\n\nLANGUAGE: diff\nCODE:\n```\nconst style = StyleSheet.create({\n    container: {\n-      paddingBottom: rt.insets.bottom // bottom is no longer dynamic\n+      paddingBottom: rt.insets.ime\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Moving hairlineWidth from UnistylesRuntime to StyleSheet\nDESCRIPTION: Shows how to access hairlineWidth property from StyleSheet instead of UnistylesRuntime.\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/docs/src/content/docs/v3/start/migration-guide.mdx#2025-04-23_snippet_13\n\nLANGUAGE: diff\nCODE:\n```\n- UnistylesRuntime.hairlineWidth // no longer available\n+ StyleSheet.hairlineWidth // matches StyleSheet API\n```\n\n----------------------------------------\n\nTITLE: Bad Practice: Using useUnistyles with Complex Components\nDESCRIPTION: An example of incorrect usage where useUnistyles is used with a component that has many children, causing unnecessary re-renders.\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/docs/src/content/docs/v3/references/use-unistyles.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useUnistyles } from 'react-native-unistyles'\nimport { Blurhash } from 'react-native-blurhash'\n\nconst MyComponent = () => {\n    const { theme } = useUnistyles()\n\n    return (\n        <View>\n            <Component1 />\n            <Component2 />\n            <ComponentN />\n            <Blurhash\n                blurhash=\"LGFFaXYk^6#M@-5c,1J5@[or[Q6.\"\n                style={{\n                    backgroundColor: theme.colors.primary\n                }}\n            />\n        </View>\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Bad Practice: Using useUnistyles with React Native Components\nDESCRIPTION: Demonstrates the incorrect use of useUnistyles with standard React Native components, which should be avoided since Unistyles can update them without re-rendering.\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/docs/src/content/docs/v3/references/use-unistyles.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useUnistyles } from 'react-native-unistyles'\nimport { Text } from 'react-native'\n\nconst MyComponent = () => {\n    const { theme } = useUnistyles()\n\n    return (\n        <Text style={{ color: theme.colors.primary }}>\n            Hello world\n        </Text>\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Example of Incompatible Themes for CSS Variables\nDESCRIPTION: Shows an example of themes with different size variables and functions that are not suitable for CSS variables optimization.\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/docs/src/content/docs/v3/references/web-only.mdx#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n// ❌ Not OK\nconst regularTheme = {\n    colors: sharedColors,\n    gap: (v: number) => v * 8,\n    fontSize: 16\n}\n\nconst largeTheme = {\n    colors: sharedColors,\n    // gap function has a different factor\n    gap: (v: number) => v * 16,\n    // fontSize is a different value\n    fontSize: 32\n}\n```\n\n----------------------------------------\n\nTITLE: Bad Practice: Using useUnistyles at Root Level\nDESCRIPTION: Example showing the anti-pattern of using useUnistyles at the application root level, which eliminates all performance benefits.\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/docs/src/content/docs/v3/references/use-unistyles.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useUnistyles } from 'react-native-unistyles'\n\nconst MyApp = () => {\n    const { theme } = useUnistyles()\n\n    return (\n        <View>\n            <App />\n        </View>\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Example of Compatible Themes for CSS Variables\nDESCRIPTION: Shows an example of themes with consistent sizing functions and variables that work well with CSS variables optimization.\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/docs/src/content/docs/v3/references/web-only.mdx#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n// ✅ OK\nconst lightTheme = {\n    colors: {\n        ...sharedColors,\n        background: '#fff',\n        typography: '#000'\n    },\n    gap: (v: number) => v * 8,\n    fontSize: 16\n}\n\nconst darkTheme = {\n    colors: {\n        ...sharedColors,\n        background: '#000',\n        typography: '#fff'\n    },\n    gap: (v: number) => v * 8,\n    fontSize: 16\n}\n```\n\n----------------------------------------\n\nTITLE: Removing UnistylesProvider Component\nDESCRIPTION: Shows how to remove the UnistylesProvider component which is no longer available in Unistyles 3.0.\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/docs/src/content/docs/v3/start/migration-guide.mdx#2025-04-23_snippet_9\n\nLANGUAGE: diff\nCODE:\n```\n-import { UnistylesProvider } from 'react-native-unistyles'\n\n-<UnistylesProvider>\n     <App />\n-</UnistylesProvider>\n```\n\n----------------------------------------\n\nTITLE: Generated CSS for Dark Theme\nDESCRIPTION: The CSS output for the theme-aware styles when using the dark theme. The background color is set to a dark value (#000).\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/docs/src/content/docs/v3/references/web-styles.mdx#2025-04-23_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n.unistyles_1u0egm6 {\n  flex: 1;\n  background-color: #000;\n}\n```\n\n----------------------------------------\n\nTITLE: Problematic Style Spreading with Unistyles\nDESCRIPTION: Illustrates an anti-pattern of spreading Unistyles and merging with inline styles. This approach can lead to unpredictable behavior and should be avoided.\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/docs/src/content/docs/v3/guides/merging-styles.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<View style={{...styles.container, ...{ backgroundColor: 'red' }}} />\n```\n\n----------------------------------------\n\nTITLE: Default autoProcessPaths Configuration in TypeScript\nDESCRIPTION: The default configuration for autoProcessPaths option that specifies which third-party component paths to process for compatibility with Unistyles. By default, it includes Reanimated and Gesture Handler components.\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/docs/src/content/docs/v3/other/babel-plugin.mdx#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n['react-native-reanimated/src/component', 'react-native-gesture-handler/src/components']\n```\n\n----------------------------------------\n\nTITLE: Removing useStyles Hook\nDESCRIPTION: Shows how to remove the useStyles hook which is no longer needed in Unistyles 3.0.\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/docs/src/content/docs/v3/start/migration-guide.mdx#2025-04-23_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n- const { styles } = useStyles(stylesheet)\n```\n\n----------------------------------------\n\nTITLE: Modifying Main Entry in package.json for Expo Router and Unistyles\nDESCRIPTION: Changes the main entry point in package.json to accommodate Expo Router and Unistyles initialization.\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/docs/src/content/docs/v3/guides/expo-router.mdx#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n-   \"main\": \"expo-router/entry\"\n+   \"main\": \"index.ts\"\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Style Access Limitation in TypeScript\nDESCRIPTION: Example showing a limitation of Unistyles web implementation where directly accessing styles returns an empty object because styles are implemented as CSS classes rather than inline styles.\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/docs/src/content/docs/v3/references/web-styles.mdx#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1\n    }\n})\n\n// This will result in an empty object since we generate classes instead of inline styles\nconsole.log(styles) // {}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of React Native Transform in Web Styles\nDESCRIPTION: Demonstrates an error case where React Native specific styles like transform arrays cannot be used within the _web block, as they require web-specific syntax.\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/docs/src/content/docs/v3/references/web-only.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        _web: {\n          display: 'grid',\n          // 💥 Error! This is React Native specific style\n          transform: [{ translateX: 10 }],\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Modifying Root HTML Component for Expo Router Static Rendering with Unistyles\nDESCRIPTION: Updates the +html.tsx file to initialize Unistyles for static rendering in Expo Router web applications.\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/docs/src/content/docs/v3/guides/expo-router.mdx#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport React from 'react'\nimport { ScrollViewStyleReset } from 'expo-router/html'\nimport { type PropsWithChildren } from 'react'\n+ import '../unistyles' // <-- file that initializes Unistyles\n\nexport default function Root({ children }: PropsWithChildren) {\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Removed UnistylesRuntime Methods\nDESCRIPTION: Lists the UnistylesRuntime methods that have been removed in Unistyles 3.0, including plugin methods and Android status/navigation bar methods.\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/docs/src/content/docs/v3/start/migration-guide.mdx#2025-04-23_snippet_11\n\nLANGUAGE: diff\nCODE:\n```\n- UnistylesRuntime.addPlugin(plugin) // Unistyles has no plugins anymore\n- UnistylesRuntime.removePlugin(plugin) // Unistyles has no plugins anymore\n- UnistylesRuntime.statusBar.setColor(color) // removed due to Android 15 deprecation\n- UnistylesRuntime.navigationBar.setColor(color) // removed due to Android 15 deprecation\n```\n\n----------------------------------------\n\nTITLE: Installing Required Dependencies\nDESCRIPTION: Commands to install required dependencies including react-native-edge-to-edge and a specific version of react-native-nitro-modules.\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn add react-native-edge-to-edge react-native-nitro-modules@0.25.2\n```\n\n----------------------------------------\n\nTITLE: Updated Color Handling in UnistylesRuntime Methods\nDESCRIPTION: Shows how UnistylesRuntime methods now accept color values directly without separate alpha parameters.\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/docs/src/content/docs/v3/start/migration-guide.mdx#2025-04-23_snippet_12\n\nLANGUAGE: diff\nCODE:\n```\n- UnistylesRuntime.setRootViewBackgroundColor(color, alpha) // no need for separate alpha\n+ UnistylesRuntime.setRootViewBackgroundColor(color) // accepts any color\n```\n\n----------------------------------------\n\nTITLE: Incompatible Conditional Styling for CSS Variables\nDESCRIPTION: Shows an example of conditional styling that won't work with CSS variables because it relies on theme properties for conditions rather than consistent values.\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/docs/src/content/docs/v3/references/web-only.mdx#2025-04-23_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n// ❌ Not OK\nconst styles = StyleSheet.create(theme => ({\n    container: {\n        // this is a condition and won't work with CSS variables\n        backgroundColor: theme.isDark\n            ? theme.colors.grey200\n            : theme.colors.grey700\n    }\n}))\n```\n\n----------------------------------------\n\nTITLE: Moving React Native Styles Out of Web Block\nDESCRIPTION: Shows how to organize styles when you want to use React Native specific styles that will be automatically parsed for web platforms.\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/docs/src/content/docs/v3/references/web-only.mdx#2025-04-23_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        // ✅ This is React Native specific style, and will be parsed correctly for web\n+        transform: [{ translateX: 10 }],\n        _web: {\n            display: 'grid',\n-           transform: [{ translateX: 10 }],\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating SEO Component with Astro in Unistyles Documentation\nDESCRIPTION: This snippet shows the use of a custom Seo component in an Astro-based documentation page for Unistyles. The component receives SEO metadata including title and description for the tutorial page.\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/docs/src/content/docs/v3/tutorial/intro.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Seo\n    seo={{\n        title: 'Tutorial',\n        description: 'Introduction - tutorial react-native-unistyles'\n    }}\n>\n\n🚧 Work is progress. Tutorial will be released soon.\n\n</Seo>\n```\n\n----------------------------------------\n\nTITLE: Component Factory Implementation\nDESCRIPTION: Shows the basic structure of the component factory function used to override refs\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/docs/src/content/docs/v3/other/babel-plugin.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst factory = Component => <Component ref={someMagic✨} {...props} />;\n```\n\n----------------------------------------\n\nTITLE: Using Seo Component in Astro for Unistyles Sponsorship Page\nDESCRIPTION: Implementation of a Seo component in Astro to provide SEO metadata for the Unistyles sponsorship page. It sets the title and description for search engine optimization.\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/docs/src/content/docs/v3/other/for-sponsors.mdx#2025-04-23_snippet_0\n\nLANGUAGE: astro\nCODE:\n```\n<Seo\n    seo={{\n        title: 'Sponsor Unistyles 3.0',\n        description: 'Sponsor Unistyles 3.0 development'\n    }}\n>\n```\n\n----------------------------------------\n\nTITLE: Renaming Stylesheet Variable to Styles\nDESCRIPTION: Demonstrates renaming the stylesheet variable to styles for more direct access in Unistyles 3.0.\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/docs/src/content/docs/v3/start/migration-guide.mdx#2025-04-23_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n- const stylesheet = StyleSheet.create(theme => ({\n+ const styles = StyleSheet.create(theme => ({\n```\n\n----------------------------------------\n\nTITLE: Running Expo Prebuild Command\nDESCRIPTION: Expo-specific command to finalize Unistyles installation by generating native code with the prebuild command and the clean flag.\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/docs/src/content/docs/v3/start/getting-started.mdx#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nyarn expo prebuild --clean\n```\n\n----------------------------------------\n\nTITLE: Rendering SEO Component in JSX\nDESCRIPTION: JSX component implementation for SEO metadata configuration using Astro's Starlight components. Sets up title and description for the dependencies documentation page.\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/docs/src/content/docs/v3/other/dependencies.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Seo\n    seo={{\n        title: 'Unistyles dependencies',\n        description: 'Learn about Unistyles dependencies'\n    }}\n>\n```\n\n----------------------------------------\n\nTITLE: Incomplete Variant Definition Causing TypeScript Errors in Unistyles\nDESCRIPTION: Example showing a mistake where 'medium' and 'large' variants are missing in the text style. While the code will work at runtime, TypeScript will generate a confusing union type for the size variant.\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/docs/src/content/docs/v3/references/variants.mdx#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nconst styles = StyleSheet.create(theme => ({\n    container: {\n        flex: 1,\n        variants: {\n            size: {\n                small: {\n                    width: 100,\n                    height: 100\n                },\n                medium: {\n                    width: 200,\n                    height: 200\n                },\n                large: {\n                    width: 300,\n                    height: 300\n                }\n            }\n        }\n    },\n    text: {\n        fontWeight: 'bold',\n        variants: {\n            size: {\n                small: {\n                    fontSize: 12\n                },\n                // missing medium and large variants!\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: StyleSheet Multi-Dependency Detection\nDESCRIPTION: Example demonstrating detection of multiple dependencies (theme, runtime) in StyleSheet creation\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/docs/src/content/docs/v3/other/babel-plugin.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst stylesheet = StyleSheet.create((theme, rt) => ({\n    container: {\n        paddingTop: rt.insets.top,\n        paddingBottom: rt.insets.bottom,\n        backgroundColor: theme.colors.background\n    },\n    text: (fontSize: number) => ({\n        color: theme.colors.text,\n        fontSize: rt.fontScale >= 3\n            ? fontSize * 1.5\n            : fontSize * 0.8\n    })\n}))\n```\n\n----------------------------------------\n\nTITLE: View Component Reference Transformation\nDESCRIPTION: Example of how the Babel plugin transforms View component imports and references\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/docs/src/content/docs/v3/other/babel-plugin.mdx#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { View } from 'react-native'\n\nconst ref = useRef()\n\n<View ref={ref} />\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { View } from 'react-native-unistyles/src/components/native/View'\n\nconst ref = useRef()\n\n<View ref={ref} />\n```\n\n----------------------------------------\n\nTITLE: Multiple Components Reference Transformation\nDESCRIPTION: Demonstrates transformation of multiple React Native components with refs\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/docs/src/content/docs/v3/other/babel-plugin.mdx#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Pressable, Image } from 'react-native'\n\n<Pressable\n    ref={ref => {\n        doSomething(ref)\n    }}\n    onPress={() => {}}\n/>\n<Image source={require('./image.png')} style={styles.image} ref={ref2} />\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Pressable } from 'react-native-unistyles/components/native/Pressable'\nimport { Image } from 'react-native-unistyles/components/native/Image'\n\n<Pressable\n    ref={ref => {\n        doSomething(ref)\n    }}\n    onPress={() => {}}\n/>\n<Image source={require('./image.png')} style={styles.image} ref={ref2} />\n```\n\n----------------------------------------\n\nTITLE: Rendering SEO Component for Custom Web Integration in JSX\nDESCRIPTION: This code snippet demonstrates the usage of a custom Seo component to set SEO metadata for the Custom Web integration page of Unistyles 3.0. It includes title and description properties.\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/docs/src/content/docs/v3/guides/custom-web.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Seo\n    seo={{\n        title: 'Custom Web integration',\n        description: 'Learn how to use Unistyles 3.0 without React Native Web'\n    }}\n>\n```\n\n----------------------------------------\n\nTITLE: Implementing SEO Component in Astro for Unistyles Examples Page\nDESCRIPTION: This code uses Astro's SEO component to set metadata for the Unistyles examples page. It defines the title as 'Examples' and provides a description for search engines.\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/docs/src/content/docs/v3/examples/examples.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Seo\n    seo={{\n        title: 'Examples',\n        description: 'Browse examples using react-native-unistyles'\n    }}\n>\n\n🚧 Work is progress. Examples will be released soon.\n\n</Seo>\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build for Unistyles Android Native Module\nDESCRIPTION: Defines the CMake build configuration for the Unistyles library on Android. It includes core and platform-specific C++ source files, sets include directories, configures compiler flags, and ensures compatibility with React Native 0.76 or higher.\nSOURCE: https://github.com/jpudysz/react-native-unistyles/blob/main/android/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.9.0)\n\nproject(unistyles)\n\nfile(GLOB_RECURSE CORE_SRC RELATIVE ${CMAKE_SOURCE_DIR} \"../cxx/**/*.cpp\")\nfile(GLOB_RECURSE PLATFORM_SRC RELATIVE ${CMAKE_SOURCE_DIR} \"./src/main/cxx/*.cpp\")\n\nadd_library(unistyles\n    SHARED\n    ${CORE_SRC}\n    ${PLATFORM_SRC}\n)\n\ninclude(\"${CMAKE_SOURCE_DIR}/../nitrogen/generated/android/unistyles+autolinking.cmake\")\n\ninclude_directories(\n    ./src/main/cxx\n    ../cxx\n    ../cxx/common\n    ../cxx/core\n    ../cxx/hybridObjects\n    ../cxx/parser\n    ../cxx/shadowTree\n)\n\n# Nitro appends all Folly Flags, leaving it empty\nstring(APPEND CMAKE_CXX_FLAGS \" \")\n\nset_target_properties(unistyles PROPERTIES\n    CXX_STANDARD 20\n    CXX_STANDARD_REQUIRED ON\n    CXX_EXTENSIONS OFF\n    POSITION_INDEPENDENT_CODE ON\n)\n\n# For React Native 0.76 and above, we don't need to link anything\n# as NitroModules will automatically add ReactAndroid::reactnative prefab\nif (ReactAndroid_VERSION_MINOR LESS 76)\n    message(FATAL_ERROR \"Unistyles 3.0 requires min. React Native version to be 0.76\")\nendif ()\n```"
  }
]