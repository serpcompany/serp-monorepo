[
  {
    "owner": "tigerfintech",
    "repo": "openapi-python-sdk",
    "content": "TITLE: Installing TigerOpen Python SDK\nDESCRIPTION: This snippet demonstrates how to install the TigerOpen Python SDK using pip or by cloning the repository and running the setup script. The SDK allows developers to access Tiger Brokers' trading, market data, and account services.\nSOURCE: https://github.com/tigerfintech/openapi-python-sdk/blob/master/README.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\npip install tigeropen\n\n或者\n\ngit clone https://github.com/tigerfintech/openapi-python-sdk.git\npython setup.py install\n```\n\n----------------------------------------\n\nTITLE: Accessing Trade APIs\nDESCRIPTION: This snippet demonstrates how to access trade APIs using the TigerOpen Python SDK. It initializes a TradeClient with the client configuration and calls the `get_managed_accounts` method. It depends on the `tigeropen` library, specifically the `TradeClient` class. Requires setting up the client configuration beforehand.\nSOURCE: https://github.com/tigerfintech/openapi-python-sdk/blob/master/README.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef get_trade_apis():\n    client_config = get_client_config()\n    trade_client = TradeClient(client_config)\n    trade_client.get_managed_accounts()\n```\n\n----------------------------------------\n\nTITLE: Accessing Quote APIs\nDESCRIPTION: This snippet demonstrates how to access quote APIs using the TigerOpen Python SDK. It initializes a QuoteClient with the client configuration and calls various methods to retrieve market status, briefs, timeline, and bars data for specified symbols. It depends on the `tigeropen` library, specifically the `QuoteClient` class and related constants like `Market`, `TimelinePeriod`, and `QuoteRight`. Requires setting up the client configuration beforehand.\nSOURCE: https://github.com/tigerfintech/openapi-python-sdk/blob/master/README.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef get_quote_apis():\n    client_config = get_client_config()\n    quote_client = QuoteClient(client_config)\n    quote_client.get_market_status(Market.US)\n    quote_client.get_briefs(symbols=['AAPL', '00700', '600519'], include_ask_bid=True, right=QuoteRight.BR)\n    quote_client.get_timeline(['AAPL'], period=TimelinePeriod.DAY, include_hour_trading=True)\n    quote_client.get_bars(['AAPL'])\n```\n\n----------------------------------------\n\nTITLE: Retrieving Account Information\nDESCRIPTION: This code snippet demonstrates how to retrieve account information using the TigerOpen Python SDK. It initializes a TigerOpenClient with the necessary configuration, creates an AccountsParams object, builds an OpenApiRequest, and executes the request to fetch account details. It depends on the `tigeropen` library, specifically the `TigerOpenClient`, `TigerOpenClientConfig`, `OpenApiRequest`, and `AccountsParams` classes. It requires setting up the client configuration with your private key, Tiger ID, and account number.\nSOURCE: https://github.com/tigerfintech/openapi-python-sdk/blob/master/README.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport traceback\n\nfrom tigeropen.common.consts import Language, Market, TimelinePeriod, QuoteRight\nfrom tigeropen.common.response import TigerResponse\nfrom tigeropen.quote.quote_client import QuoteClient\nfrom tigeropen.quote.request import OpenApiRequest\nfrom tigeropen.tiger_open_client import TigerOpenClient\nfrom tigeropen.tiger_open_config import TigerOpenClientConfig\nfrom tigeropen.common.util.signature_utils import read_private_key\nfrom tigeropen.common.consts.service_types import ACCOUNTS\nfrom tigeropen.trade.request.model import AccountsParams\nfrom tigeropen.trade.trade_client import TradeClient\n\n\ndef get_client_config():\n    \"\"\"\n    :return:\n    \"\"\"\n    is_sandbox = False\n    client_config = TigerOpenClientConfig(sandbox_debug=is_sandbox)\n    client_config.private_key = read_private_key('your private key file path')\n    client_config.tiger_id = 'your tiger id'\n    client_config.account = 'your account'\n    client_config.language = Language.en_US\n    return client_config\n\ndef get_account_info():\n    client_config = get_client_config()\n    openapi_client = TigerOpenClient(client_config)\n    account = AccountsParams()\n    account.account = 'DU575569'\n    request = OpenApiRequest(method=ACCOUNTS, biz_model=account)\n\n    response_content = None\n    try:\n        response_content = openapi_client.execute(request)\n    except Exception as e:\n        print(traceback.format_exc())\n    if not response_content:\n        print(\"failed to execute\")\n    else:\n        response = TigerResponse()\n        response.parse_response_content(response_content)\n        if response.is_success():\n            print(\"get response data:\" + response.data)\n        else:\n            print(response.code + \",\" + response.msg + \",\" + response.data)\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Real-time Data Push\nDESCRIPTION: This snippet shows how to subscribe to real-time data push using the TigerOpen Python SDK. It sets up a PushClient, configures callback functions for quote changes and subscribed symbols, connects to the server, queries subscribed quotes, subscribes to specific symbols and asset data, and then disconnects after a specified time. It depends on the `tigeropen` library, specifically the `PushClient` class, and requires setting up the client configuration with your private key, Tiger ID, and account number.\nSOURCE: https://github.com/tigerfintech/openapi-python-sdk/blob/master/README.md#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom tigeropen.common.consts import Language\nfrom tigeropen.common.util.signature_utils import read_private_key\nfrom tigeropen.push.push_client import PushClient\nfrom tigeropen.tiger_open_config import TigerOpenClientConfig\n\n\ndef on_query_subscribed_quote(symbols, focus_keys, limit, used):\n    print(symbols, focus_keys, limit, used)\n\n\ndef on_quote_changed(symbol, items, hour_trading):\n    print(symbol, items, hour_trading)\n\n\nis_sandbox = False\nclient_config = TigerOpenClientConfig(sandbox_debug=is_sandbox)\nclient_config.private_key = read_private_key('your private key file path')\n# https://www.itiger.com/openapi/info 开发者信息获取\nclient_config.tiger_id = 'your tiger id'\nclient_config.account = 'your account'\nclient_config.language = Language.en_US\nprotocol, host, port = client_config.socket_host_port\npush_client = PushClient(host, port, use_ssl=(protocol == 'ssl'))\npush_client.quote_changed = on_quote_changed\npush_client.subscribed_symbols = on_query_subscribed_quote\npush_client.connect(client_config.tiger_id, client_config.private_key)\npush_client.query_subscribed_quote()\npush_client.subscribe_quote(['AAPL', 'GOOG'])\npush_client.subscribe_asset()\n\ntime.sleep(600)\npush_client.disconnect()\n```\n\n----------------------------------------\n\nTITLE: Retrieving Option Quote Data\nDESCRIPTION: This snippet demonstrates how to retrieve option quote data using the TigerOpen Python SDK. It initializes a QuoteClient and retrieves option expirations, chain, briefs and bars for a given symbol. It depends on the `tigeropen` library, specifically the `QuoteClient` class. Requires setting up the client configuration beforehand.\nSOURCE: https://github.com/tigerfintech/openapi-python-sdk/blob/master/README.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef get_option_quote():\n    client_config = get_client_config()\n    quote_client = QuoteClient(client_config)\n    symbol = 'AAPL'\n    expirations = quote_client.get_option_expirations(symbols=[symbol])\n    if len(expirations) > 1:\n        expiry = int(expirations[expirations['symbol'] == symbol].at[0, 'timestamp'])\n        quote_client.get_option_chain(symbol, expiry)\n\n    quote_client.get_option_briefs(['AAPL  190104C00121000'])\n    quote_client.get_option_bars(['AAPL  190104P00134000'])\n    quote_client.get_option_trade_ticks(['AAPL  190104P00134000'])\n```\n\n----------------------------------------\n\nTITLE: Retrieving Future Quote Data\nDESCRIPTION: This snippet demonstrates how to retrieve future quote data using the TigerOpen Python SDK. It initializes a QuoteClient and retrieves future exchanges, bars, trade ticks, contracts, trading times and brief for a given symbol. It depends on the `tigeropen` library, specifically the `QuoteClient` class. Requires setting up the client configuration beforehand.\nSOURCE: https://github.com/tigerfintech/openapi-python-sdk/blob/master/README.md#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef get_future_quote():\n    client_config = get_client_config()\n    quote_client = QuoteClient(client_config)\n    exchanges = quote_client.get_future_exchanges()\n    print(exchanges)\n    quote_client.get_future_bars(['CN1901'], begin_time=-1, end_time=1545105097358)\n    quote_client.get_future_trade_ticks(['CN1901'])\n    quote_client.get_future_contracts('CME')\n    quote_client.get_future_trading_times('CN1901', trading_date=1545049282852)\n    quote_client.get_future_brief(['ES1906', 'CN1901'])\n```\n\n----------------------------------------\n\nTITLE: Generate Python Code from Protocol Buffer Definitions (Shell)\nDESCRIPTION: This shell command changes the directory to `openapi-python-sdk`, and then uses the `protoc` compiler to generate Python code and interface stubs from the protobuf definitions located in the `tigeropen/push/pb` directory.  It uses the current directory as the proto path and outputs the generated python code and interface to the current directory.\nSOURCE: https://github.com/tigerfintech/openapi-python-sdk/blob/master/tigeropen/push/pb/readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncd openapi-python-sdk\nprotoc  --proto_path=.  --python_out=.  --pyi_out=. tigeropen/push/pb/*.proto\n```"
  }
]