[
  {
    "owner": "pixijs",
    "repo": "pixi-react",
    "content": "TITLE: Creating Custom Viewport Component with PixiJS React\nDESCRIPTION: Demonstrates how to create a custom viewport component using the pixi-viewport library and the extend API from @pixi/react. The example shows importing necessary dependencies, extending the Viewport component, and using it within an Application component.\nSOURCE: https://github.com/pixijs/pixi-react/blob/main/docs/docs/components/custom-components.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {\n    Application,\n    extend,\n} from '@pixi/react';\nimport { Viewport } from 'pixi-viewport';\n\nextend({ Viewport });\n\nconst MyComponent = () => (\n    <Application>\n        <pixiViewport>\n            <pixiContainer />\n        </pixiViewport>\n    </Application>\n);\n```\n\n----------------------------------------\n\nTITLE: Basic Pixi React Application Setup\nDESCRIPTION: Example of a basic Pixi React application setup, demonstrating the use of Stage, Sprite, Container, and Text components with various PixiJS properties and filters.\nSOURCE: https://github.com/pixijs/pixi-react/blob/main/docs/versioned_docs/version-7.x/about.mdx#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport './App.css';\nimport { useMemo } from 'react';\n\nimport { BlurFilter, TextStyle } from 'pixi.js';\nimport { Stage, Container, Sprite, Text } from '@pixi/react';\n\nconst App = () => {\n  const blurFilter = useMemo(() => new BlurFilter(2), []);\n  const bunnyUrl = 'https://react.pixijs.io/v7/img/bunny.png';\n  return (\n    <Stage width={800} height={600} options={{ background: 0x1099bb }}>\n      <Sprite image={bunnyUrl} x={300} y={150} />\n      <Sprite image={bunnyUrl} x={500} y={150} />\n      <Sprite image={bunnyUrl} x={400} y={200} />\n\n      <Container x={200} y={200}>\n        <Text\n          text=\"Hello World\"\n          anchor={0.5}\n          x={220}\n          y={150}\n          filters={[blurFilter]}\n          style={\n            new TextStyle({\n              align: 'center',\n              fill: '0xffffff',\n              fontSize: 50,\n              letterSpacing: 20,\n              dropShadow: true,\n              dropShadowColor: '#E72264',\n              dropShadowDistance: 6,\n            })\n          }\n        />\n      </Container>\n    </Stage>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Basic @pixi/react Component Implementation with Graphics\nDESCRIPTION: Example of a basic React component using @pixi/react to render a PixiJS application with a red square. Demonstrates the extend API, Application component, and Graphics drawing.\nSOURCE: https://github.com/pixijs/pixi-react/blob/main/README.md#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport {\n  Application,\n  extend,\n} from '@pixi/react'\nimport {\n  Container,\n  Graphics,\n} from 'pixi.js'\nimport { useCallback } from 'react'\n\nextend({\n  Container,\n  Graphics,\n})\n\nconst MyComponent = () => {\n  const drawCallback = useCallback(graphics => {\n    graphics.clear()\n    graphics.setFillStyle({ color: 'red' })\n    graphics.rect(0, 0, 100, 100)\n    graphics.fill()\n  }, [])\n\n  return (\n    <Application>\n      <pixiContainer x={100} y={100}>\n        <pixiGraphics draw={drawCallback} />\n      </pixiContainer>\n    </Application>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom ReactPixi Components with TypeScript\nDESCRIPTION: Demonstrates how to create a custom PixiComponent with TypeScript by defining props interface, creating a component with PixiComponent factory, and implementing create and applyProps methods for a rectangle component.\nSOURCE: https://github.com/pixijs/pixi-react/blob/main/docs/versioned_docs/version-7.x/typescript.mdx#2025-04-16_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { PixiComponent } from '@pixi/react';\nimport { Graphics } from 'pixi.js';\n\ninterface RectangleProps {\n  x: number;\n  y: number;\n  width: number;\n  height: number;\n  color: number;\n}\n\nconst Rectangle = PixiComponent<RectangleProps, Graphics>('Rectangle', {\n  create: () => new Graphics(),\n  applyProps: (ins, _, props) => {\n    ins.x = props.x;\n    ins.beginFill(props.color);\n    ins.drawRect(props.x, props.y, props.width, props.height);\n    ins.endFill();\n  },\n});\n\nconst App = () => (\n  <Stage>\n    <Rectangle x={100} y={100} width={100} height={100} color={0xff0000} />\n  </Stage>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Common Pixi.js Components in React\nDESCRIPTION: Demonstrates how to use various Pixi.js components as React elements. These components are prefixed with 'pixi' and correspond to Pixi.js classes.\nSOURCE: https://github.com/pixijs/pixi-react/blob/main/docs/docs/components/pixi-components.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<pixiContainer />\n<pixiGraphics />\n<pixiSprite />\n<pixiAnimatedSprite />\n<pixiText />\n<pixiHtmlText />\n```\n\n----------------------------------------\n\nTITLE: Basic Application Component Usage in PixiJS React\nDESCRIPTION: Demonstrates how to use the Application component from @pixi/react with autoStart and sharedTicker props enabled.\nSOURCE: https://github.com/pixijs/pixi-react/blob/main/docs/docs/components/application.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Application } from '@pixi/react';\n\nconst MyComponent = () => (\n    <Application autoStart sharedTicker />\n);\n```\n\n----------------------------------------\n\nTITLE: Using PixiJS Properties with Pixi React Components\nDESCRIPTION: Example demonstrating how to pass PixiJS properties directly as component props in Pixi React, including texture, anchor, position, blend mode, and filters.\nSOURCE: https://github.com/pixijs/pixi-react/blob/main/docs/versioned_docs/version-7.x/about.mdx#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Sprite } from '@pixi/react';\nimport { BLEND_MODES, BlurFilter } from 'pixi.js';\nimport { useMemo } from 'react';\n\nconst MyComponent = () => (\n  const blurFilter = useMemo(() => new BlurFilter(4), []);\n\n  <Sprite\n    texture={myTexture}\n    anchor={0.5}\n    position={[100, 200]}\n    blendMode={BLEND_MODES.ADD}\n    roundPixels={true}\n    filters={[blurFilter]}\n  />;\n);\n```\n\n----------------------------------------\n\nTITLE: Extending @pixi/react with Pixi.js Container Component\nDESCRIPTION: This snippet demonstrates how to use the 'extend' API to make the Pixi.js Container component available as a JSX element in @pixi/react. It imports necessary modules, extends the Container, and shows a basic usage example.\nSOURCE: https://github.com/pixijs/pixi-react/blob/main/docs/docs/extend.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {\n    Application,\n    extend,\n} from '@pixi/react';\nimport { Container } from 'pixi.js';\n\nextend({ Container });\n\nconst MyComponent = () => (\n    <pixiContainer />\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Context Bridge Pattern with PixiJS React and Redux\nDESCRIPTION: Demonstrates the implementation of a Context Bridge component that enables Redux context to be passed through PixiJS Stage components. This solution allows child components within a custom renderer to access parent contexts that would otherwise be inaccessible due to React's design limitations.\nSOURCE: https://github.com/pixijs/pixi-react/blob/main/docs/versioned_docs/version-7.x/context-bridge.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n// the context bridge:\nconst ContextBridge = ({ children, Context, render }) => {\n  return (\n    <Context.Consumer>\n      {(value) =>\n        render(<Context.Provider value={value}>{children}</Context.Provider>)\n      }\n    </Context.Consumer>\n  );\n};\n\n// your Stage:\nimport { Stage as PixiStage } from '@pixi/react';\nimport { ReactReduxContext } from 'react-redux';\n\nexport const Stage = ({ children, ...props }) => {\n  return (\n    <ContextBridge\n      Context={ReactReduxContext}\n      render={(children) => <PixiStage {...props}>{children}</PixiStage>}\n    >\n      {children}\n    </ContextBridge>\n  );\n};\n\n// your App\nconst App = (\n  <Stage>\n    <SomeComponentUsingRedux />\n  </Stage>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering PIXI React Components in ReactDOM\nDESCRIPTION: This snippet demonstrates how to render PIXI components within a React application using ReactDOM. It shows how to integrate a PIXI Stage and Sprite within a regular React component tree.\nSOURCE: https://github.com/pixijs/pixi-react/blob/main/docs/versioned_docs/version-7.x/render/Render.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Stage, Sprite } from '@pixi/react';\nimport { createRoot } from 'react-dom/client';\n\nconst App = () => (\n  <div>\n    {/* somewhere in your tree */}\n    <Stage>\n      <Sprite image=\"./bunny.png\" x={100} y={100} />\n    </Stage>\n  </div>\n);\n\nconst root = createRoot(document.getElementById('root'));\nroot.render(<App />);\n```\n\n----------------------------------------\n\nTITLE: Basic React Spring Animation with Pixi.js\nDESCRIPTION: Example showing how to use react-spring with Pixi.js components to animate sprite position. The Spring component from react-spring wraps a Pixi Sprite and animates its x and y coordinates from (0,0) to (200,200).\nSOURCE: https://github.com/pixijs/pixi-react/blob/main/docs/versioned_docs/version-7.x/react-spring.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Spring } from 'react-spring';\nimport { Texture } from 'pixi.js';\nimport { Stage, Sprite } from '@pixi/react-animated';\n\nconst App = () => (\n    <Stage>\n        <Spring native from={{ x: 0, y: 0 }} to={{ x: 200, y: 200 }}>\n            {(props) => <Sprite texture={Texture.WHITE} tint={0xff0000} {...props} />}\n        </Spring>\n    </Stage>\n);\n```\n\n----------------------------------------\n\nTITLE: Basic Stage Usage with PixiJS-React\nDESCRIPTION: Basic example of using the Stage component from @pixi/react to create a canvas with a PixiJS Application. The Stage component accepts width and height props and can contain other Pixi React components.\nSOURCE: https://github.com/pixijs/pixi-react/blob/main/docs/versioned_docs/version-7.x/stage/Stage.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { render } from 'react-dom'\nimport { Stage, Container, Sprite } from '@pixi/react'\n\nconst App = () => (\n  <Stage width={500} height={400}>\n    { // Pixi React components here... }\n  </Stage>\n)\n\nrender(<App />, document.getElementById('root'))\n```\n\n----------------------------------------\n\nTITLE: Using the draw prop with React.useCallback in PixiJS React Graphics Component\nDESCRIPTION: This snippet demonstrates how to use the 'draw' prop with the useCallback hook to efficiently render a rectangle in PixiJS. The callback is memoized to prevent unnecessary re-renders, and it draws a rectangle with the specified color, position, and dimensions.\nSOURCE: https://github.com/pixijs/pixi-react/blob/main/docs/versioned_docs/version-7.x/components/Graphics.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useCallback } from 'react';\nimport { Graphics } from '@pixi/react';\n\nfunction Rectangle(props) {\n  const draw = useCallback(\n    (g) => {\n      g.clear();\n      g.beginFill(props.color);\n      g.drawRect(props.x, props.y, props.width, props.height);\n      g.endFill();\n    },\n    [props],\n  );\n\n  return <Graphics draw={draw} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Using useApp Hook with Pixi React\nDESCRIPTION: This snippet demonstrates how to use the useApp hook to access the PIXI.Application instance within a React component. The hook must be called inside an AppProvider context, which is automatically created when using the Stage component.\nSOURCE: https://github.com/pixijs/pixi-react/blob/main/docs/versioned_docs/version-7.x/hooks/Hooks.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useApp } from '@pixi/react'\n\nfunction MyComponent () {\n  const app = useApp()\n  // app => PIXI.Application\n\n  return (\n    ...\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using the geometry prop for template-based rendering in PixiJS React\nDESCRIPTION: This example shows how to use the 'geometry' prop to reuse a graphics object as a template across multiple instances, which helps reduce memory usage when the same shape is used repeatedly. It creates a Grid component that renders multiple instances of a Rectangle template.\nSOURCE: https://github.com/pixijs/pixi-react/blob/main/docs/versioned_docs/version-7.x/components/Graphics.mdx#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useCallback } from 'react';\nimport { Graphics } from '@pixi/react';\n\nfunction Rectangle(props) {\n  const draw = useCallback((g) => {\n    g.clear();\n    g.lineStyle(props.lineWidth, props.color);\n    g.drawRect(\n      props.lineWidth,\n      props.lineWidth,\n      props.width - 2 * props.lineWidth,\n      props.height - 2 * props.lineWidth\n    );\n  }, [props]);\n\n  return <Graphics draw={draw} />\n}\n\nfunction Grid(props) {\n  const rect = useRef();\n  const [mounted, setMounted] = React.useState(false);\n\n  React.useEffect(() => {\n    setMounted(true);\n  }, []);\n\n  return (\n    <>\n      {/* create the graphics component here */}\n      <Rectangle ref={rect}>\n\n      {/* make sure to wait till `Rectangle` is mounted */}\n      {/* geometry can only be set during component creation */}\n      {mounted && (\n        <>\n          <Graphics x={0} y={0} geometry={rect.current} />\n          <Graphics x={props.width} y={0} geometry={rect.current} />\n          <Graphics x={0} y={props.height} geometry={rect.current} />\n          <Graphics x={props.width} y={props.height} geometry={rect.current} />\n        </>\n      )}\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing PIXI.Application with useApp Hook\nDESCRIPTION: Example of using the useApp hook to access the PIXI.Application instance in a functional component. This is the most modern approach using React Hooks API.\nSOURCE: https://github.com/pixijs/pixi-react/blob/main/docs/versioned_docs/version-7.x/stage/Stage.mdx#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useApp } from '@pixi/react';\n\nconst MyComponent = () => {\n    const app = useApp();\n    // app => PIXI.Application\n};\n```\n\n----------------------------------------\n\nTITLE: Advanced useTick Usage with Options Object in PixiJS React\nDESCRIPTION: Example showing how to use useTick with an options object to control ticker.add parameters and conditionally enable/disable the callback. The example rotates a sprite using a reference context.\nSOURCE: https://github.com/pixijs/pixi-react/blob/main/docs/docs/hooks/useTick.mdx#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport {\n    Application,\n    useTick,\n} from '@pixi/react';\nimport { UPDATE_PRIORITY } from 'pixi.js'\nimport { useRef } from 'react'\n\nconst ChildComponent = () => {\n    const spriteRef = useRef(null)\n\n    useTick({\n        callback() {\n            // this === context\n            this.current.rotation += 1\n        },\n        context: spriteRef,\n        isEnabled: true,\n        priority: UPDATE_PRIORITY.HIGH,\n    })\n\n    return <pixiSprite ref={spriteRef} />\n};\n\nconst MyComponent = () => (\n    <Application>\n        <ChildComponent />\n    </Application>\n);\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of useApplication Hook\nDESCRIPTION: Example showing the correct way to use the useApplication hook within a child component of an Application component to access the PixiJS application instance.\nSOURCE: https://github.com/pixijs/pixi-react/blob/main/README.md#2025-04-16_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport {\n  Application,\n  useApplication,\n} from '@pixi/react'\n\nconst ChildComponent = () => {\n  const { app } = useApplication()\n\n  console.log(app)\n\n  return (\n    <container />\n  )\n}\n\nconst ParentComponent = () => (\n  <Application>\n    <ChildComponent />\n  </Application>\n)\n```\n\n----------------------------------------\n\nTITLE: Using useExtend Hook with PixiJS Container in React Components\nDESCRIPTION: This example demonstrates how to use the useExtend hook to make PixiJS Container available in React components. The hook is memoized, making it more efficient than the non-memoized extend function. The code creates a child component that uses the Container and renders it within a PixiJS Application component.\nSOURCE: https://github.com/pixijs/pixi-react/blob/main/docs/docs/hooks/useExtend.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {\n    Application,\n    useExtend,\n} from '@pixi/react';\nimport { Container } from 'pixi.js';\n\nfunction ChildComponent() {\n    useExtend({ Container });\n\n    return <pixiContainer />;\n};\n\nconst MyComponent = () => (\n    <Application>\n        <ChildComponent />\n    </Application>\n);\n```\n\n----------------------------------------\n\nTITLE: Using the Draw Property with pixiGraphics in React\nDESCRIPTION: Demonstrates the special 'draw' property of the pixiGraphics component. This property takes a callback function that receives the Graphics context and is called on every tick for drawing.\nSOURCE: https://github.com/pixijs/pixi-react/blob/main/docs/docs/components/pixi-components.mdx#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<pixiGraphics draw={(graphics) => {\n    graphics.clear();\n    graphics.setFillStyle({ color: 'red' });\n    graphics.rect(0, 0, 100, 100);\n    graphics.fill();\n}} />\n```\n\n----------------------------------------\n\nTITLE: Drawing with pixiGraphics Component\nDESCRIPTION: Example of using the pixiGraphics component with its draw callback property to render a red square on every tick.\nSOURCE: https://github.com/pixijs/pixi-react/blob/main/README.md#2025-04-16_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nconst MyComponent = () => {\n  return (\n    <pixiGraphics draw={graphics => {\n      graphics.clear()\n      graphics.setFillStyle({ color: 'red' })\n      graphics.rect(0, 0, 100, 100)\n      graphics.fill()\n    }} />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of useApplication Hook in React with PIXI.js\nDESCRIPTION: This example shows the correct way to use useApplication hook within a child component of an Application component, which allows proper access to the parent PIXI.Application instance via React Context.\nSOURCE: https://github.com/pixijs/pixi-react/blob/main/docs/docs/hooks/useApplication.mdx#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport {\n    Application,\n    useApplication,\n} from '@pixi/react';\n\nconst ChildComponent = () => {\n    const { app } = useApplication();\n\n    return <container />;\n};\n\nconst MyComponent = () => (\n    <Application>\n        <ChildComponent />\n    </Application>\n);\n```\n\n----------------------------------------\n\nTITLE: Optimized useTick Implementation with useCallback\nDESCRIPTION: Demonstrates the correct way to use useTick with useCallback to prevent continuous re-renders when updating state in the tick callback.\nSOURCE: https://github.com/pixijs/pixi-react/blob/main/README.md#2025-04-16_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\nimport {\n  useCallback,\n  useState,\n} from 'react'\nimport { useTick } from '@pixi/react'\n\nconst MyComponent = () => {\n  const [count, setCount] = useState(0)\n\n  const updateCount = useCallback(() => setCount(previousCount => previousCount + 1), [])\n\n  useTick(updateCount)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining PointLike Type in ReactPixi with TypeScript\nDESCRIPTION: Defines the PointLike type used for position, scale, pivot, anchor, and skew props in ReactPixi components. It can accept objects with x/y properties, Point instances, ObservablePoint instances, numbers, or arrays of numbers.\nSOURCE: https://github.com/pixijs/pixi-react/blob/main/docs/versioned_docs/version-7.x/typescript.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype PointLike =\n  | { x: number; y: number }\n  | Point\n  | ObservablePoint\n  | number\n  | [number]\n  | [number, number];\n```\n\n----------------------------------------\n\nTITLE: Extending Built-in PixiJS Components with TypeScript in React\nDESCRIPTION: Shows how to extend built-in PixiJS component types using the PixiElements type from @pixi/react. This example creates a TilingSpriteProps type that extends the default props and adds optional image and texture properties.\nSOURCE: https://github.com/pixijs/pixi-react/blob/main/docs/docs/typescript.mdx#2025-04-16_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { type Texture } from 'pixi.js';\nimport { type PixiElements } from '@pixi/react';\n\nexport type TilingSpriteProps = PixiElements['pixiTilingSprite'] & {\n    image?: string;\n    texture?: Texture;\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Pixi.js Properties on React Components\nDESCRIPTION: Shows how to set Pixi.js properties directly on React components. This example demonstrates positioning a container and setting sprite properties.\nSOURCE: https://github.com/pixijs/pixi-react/blob/main/docs/docs/components/pixi-components.mdx#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<pixiContainer x={100} y={100}>\n    <pixiSprite anchor={{ 0.5, 0.5 }} texture={texture} />\n</pixiContainer>\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Component with PixiComponent in ReactPixi\nDESCRIPTION: This snippet demonstrates the structure of creating a custom component using PixiComponent in ReactPixi. It shows the create, didMount, willUnmount, and applyProps lifecycle methods, as well as configuration options.\nSOURCE: https://github.com/pixijs/pixi-react/blob/main/docs/versioned_docs/version-7.x/custom-component.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nexport default PixiComponent('ComponentName', {\n  create: (props) => {\n    // instantiate something and return it.\n    // for instance:\n    return new Graphics();\n  },\n  didMount: (instance, parent) => {\n    // apply custom logic on mount\n  },\n  willUnmount: (instance, parent) => {\n    // clean up before removal\n  },\n  applyProps: (instance, oldProps, newProps) => {\n    // props changed\n    // apply logic to the instance\n  },\n  config: {\n    // destroy instance on unmount?\n    // default true\n    destroy: true,\n\n    /// destroy its children on unmount?\n    // default true\n    destroyChildren: true,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of useTick Hook in PixiJS React\nDESCRIPTION: Basic example of using the useTick hook to execute a callback on every animation frame. The callback is attached to the Ticker of the parent Application component.\nSOURCE: https://github.com/pixijs/pixi-react/blob/main/docs/docs/hooks/useTick.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {\n    Application,\n    useTick,\n} from '@pixi/react';\n\nconst ChildComponent = () => {\n    useTick(() => console.log('This will be logged on every tick'));\n};\n\nconst MyComponent = () => (\n    <Application>\n        <ChildComponent />\n    </Application>\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Counter Component with applyDefaultProps in ReactPixi\nDESCRIPTION: This example shows how to create a custom Counter component using PixiComponent and the applyDefaultProps utility. It demonstrates handling a specific prop (count) separately while applying default props to the PIXI.Text instance.\nSOURCE: https://github.com/pixijs/pixi-react/blob/main/docs/versioned_docs/version-7.x/custom-component.mdx#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Text } from 'pixi.js';\nimport { Stage, applyDefaultProps, PixiComponent } from '@pixi/react';\n\nexport default PixiComponent('Counter', {\n  create: ({ count }) => {\n    return new Text(count.toString());\n  },\n  applyProps: (instance, oldProps, newProps) => {\n    const { count, ...oldP } = oldProps;\n    const { count, ...newP } = newProps;\n\n    // apply rest props to PIXI.Text\n    applyDefaultProps(instance, oldP, newP);\n\n    // set new count\n    instance.text = count.toString();\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Custom Rendering PIXI React Components\nDESCRIPTION: This snippet shows how to render PIXI React components directly using a custom render call, bypassing ReactDOM entirely. It demonstrates setting up a PIXI Application and rendering a Text component into it.\nSOURCE: https://github.com/pixijs/pixi-react/blob/main/docs/versioned_docs/version-7.x/render/Render.mdx#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createRoot, Text } from '@pixi/react';\nimport { Application } from 'pixi.js';\n\n// Setup PIXI app\nconst app = new Application({\n  width: 800,\n  height: 600,\n  backgroundColor: 0x10bb99,\n  view: document.getElementById('container'),\n});\n\n// Use the custom renderer to render a valid PIXI object into a PIXI container.\nconst root = createRoot(app.stage);\nroot.render(<Text text=\"Hello World\" x={200} y={200} />);\n```\n\n----------------------------------------\n\nTITLE: Using the extend API with PixiJS Components\nDESCRIPTION: Demonstrates how to use the extend API to register PixiJS components for use with @pixi/react, which is required before using any PixiJS component as JSX.\nSOURCE: https://github.com/pixijs/pixi-react/blob/main/README.md#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Container } from 'pixi.js'\nimport { extend } from '@pixi/react'\n\nextend({ Container })\n\nconst MyComponent = () => (\n  <pixiContainer />\n)\n```\n\n----------------------------------------\n\nTITLE: Unmounting PIXI React Components\nDESCRIPTION: This snippet demonstrates the proper way to clean up PIXI React components when unmounting them. It shows how to create a PIXI Application, render a Text component, and then properly unmount it to prevent memory leaks.\nSOURCE: https://github.com/pixijs/pixi-react/blob/main/docs/versioned_docs/version-7.x/render/Render.mdx#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { render, unmountComponentAtNode, Text } from '@pixi/react';\nimport { Application } from 'pixi.js';\n\nconst app = new Application({...});\n\nconst root = createRoot(app.stage);\nroot.render(<Text text=\"Hello World\" />);\n\n// clean up on unmount\nroot.unmount();\n```\n\n----------------------------------------\n\nTITLE: Basic Application Component Usage\nDESCRIPTION: Example showing how to use the Application component from @pixi/react with configuration options autoStart and sharedTicker.\nSOURCE: https://github.com/pixijs/pixi-react/blob/main/README.md#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Application } from '@pixi/react'\n\nconst MyComponent = () => {\n  return (\n    <Application\n      autoStart\n      sharedTicker />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Component Types to PixiJS React\nDESCRIPTION: Demonstrates how to add custom component types to the PixiElements interface for type safety. The example shows adding a viewport component from pixi-viewport to the type system.\nSOURCE: https://github.com/pixijs/pixi-react/blob/main/README.md#2025-04-16_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n// global.d.ts\nimport { type PixiReactElementProps } from '@pixi/react'\nimport { type Viewport } from 'pixi-viewport'\n\ndeclare module '@pixi/react' {\n  interface PixiElements {\n    viewport: PixiReactElementProps<typeof Viewport>;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Filter Application with withFilters in PixiJS React\nDESCRIPTION: Demonstrates how to wrap a Container component with filters using withFilters HOC. Shows implementation of blur and adjustment filters with configurable parameters passed as props.\nSOURCE: https://github.com/pixijs/pixi-react/blob/main/docs/versioned_docs/version-7.x/hoc/with-filters.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { AdjustmentFilter } from '@pixi/filter-adjustment';\nimport { Container } from '@pixi/react';\n\nconst Filters = withFilters(Container, {\n  blur: PIXI.filters.BlurFilter,\n  adjust: AdjustmentFilter,\n});\n\nconst App = () => (\n  <Stage>\n    <Filters scale={2} blur={{ blur: 5 }} adjust={{ gamma: 3, brightness: 5 }}>\n      <Sprite image=\"./image.png\" />\n    </Filters>\n  </Stage>\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Components with extend API\nDESCRIPTION: Example showing how to create custom components with @pixi/react by extending third-party libraries like pixi-viewport.\nSOURCE: https://github.com/pixijs/pixi-react/blob/main/README.md#2025-04-16_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport { extend } from '@pixi/react'\nimport { Viewport } from 'pixi-viewport'\n\nextend({ Viewport })\n\nconst MyComponent = () => {\n  <viewport>\n    <pixiContainer />\n  </viewport>\n}\n```\n\n----------------------------------------\n\nTITLE: Filter Method Application in PixiJS React\nDESCRIPTION: Shows how to use the apply prop with withFilters to call filter methods. Example demonstrates applying a greyscale effect using ColorMatrixFilter.\nSOURCE: https://github.com/pixijs/pixi-react/blob/main/docs/versioned_docs/version-7.x/hoc/with-filters.mdx#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Container } from '@pixi/react';\n\nconst Filters = withFilters(Container, {\n  matrix: PIXI.filters.ColorMatrixFilter,\n});\n\nconst App = () => (\n  <Stage>\n    <Filters\n      matrix={{ enabled: true }}\n      apply={({ matrix }) => matrix.greyscale()}\n    >\n      <Sprite image=\"./image.png\" />\n    </Filters>\n  </Stage>\n);\n```\n\n----------------------------------------\n\nTITLE: Adding Type Definitions for Custom PixiJS Components in React\nDESCRIPTION: Demonstrates how to add type definitions for custom components by extending the PixiElements interface. This example adds type support for a 'viewport' component from pixi-viewport to ensure TypeScript recognizes it correctly.\nSOURCE: https://github.com/pixijs/pixi-react/blob/main/docs/docs/typescript.mdx#2025-04-16_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n// global.d.ts\nimport { type Viewport } from 'pixi-viewport';\nimport { type PixiReactElementProps } from '@pixi/react';\n\ndeclare module '@pixi/react'\n{\n    interface PixiElements\n    {\n        viewport: PixiReactElementProps<typeof Viewport>;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using resizeTo with React Refs in Application Component\nDESCRIPTION: Shows how to make the Application component resize dynamically by using a React ref with the resizeTo prop, which allows the canvas to resize based on its parent container.\nSOURCE: https://github.com/pixijs/pixi-react/blob/main/docs/docs/components/application.mdx#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Application } from '@pixi/react';\nimport { useRef } from 'react';\n\nconst MyComponent = () => {\n    const parentRef = useRef(null);\n\n    return (\n        <div ref={parentRef}>\n            <Application resizeTo={parentRef} />\n        </div>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Accessing PIXI.Application with AppConsumer\nDESCRIPTION: Example of using the AppConsumer component to access the PIXI.Application instance in child components. This is useful for directly manipulating the PIXI application in your component tree.\nSOURCE: https://github.com/pixijs/pixi-react/blob/main/docs/versioned_docs/version-7.x/stage/Stage.mdx#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { AppConsumer } from '@pixi/react';\n\nconst MyComponent = () => <AppConsumer>{(app) => <OtherComponent app={app} />}</AppConsumer>;\n```\n\n----------------------------------------\n\nTITLE: Using useExtend Hook for Component Registration\nDESCRIPTION: Demonstrates using the useExtend hook as an alternative to the extend function for registering PixiJS components within a React component.\nSOURCE: https://github.com/pixijs/pixi-react/blob/main/README.md#2025-04-16_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Container } from 'pixi.js'\nimport { useExtend } from '@pixi/react'\n\nconst MyComponent = () => {\n  useExtend({ Container })\n\n  return (\n    <container />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Stage with Canvas Options\nDESCRIPTION: JSX code showing how to force canvas rendering and enable hello message in PixiJS v7+ by configuring the Stage component's options.\nSOURCE: https://github.com/pixijs/pixi-react/blob/main/docs/versioned_docs/version-7.x/fallback-to-canvas.mdx#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Stage options={{ hello: true, forceCanvas: true }} />\n```\n\n----------------------------------------\n\nTITLE: Basic useTick Hook Usage\nDESCRIPTION: Example of using the useTick hook to execute a callback on every frame tick of the PixiJS application.\nSOURCE: https://github.com/pixijs/pixi-react/blob/main/README.md#2025-04-16_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useTick } from '@pixi/react'\n\nconst MyComponent = () => {\n  useTick(() => console.log('This will be logged on every tick'))\n}\n```\n\n----------------------------------------\n\nTITLE: Composing ReactPixi Components\nDESCRIPTION: This snippet demonstrates the recommended approach for composing existing ReactPixi components, such as Sprite, instead of creating custom components for them.\nSOURCE: https://github.com/pixijs/pixi-react/blob/main/docs/versioned_docs/version-7.x/custom-component.mdx#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconst Rectangle = (props) => <Sprite {...props}>;\n```\n\n----------------------------------------\n\nTITLE: Conditional useTick Hook with isEnabled Flag\nDESCRIPTION: Shows how to use the useTick hook with the isEnabled option to conditionally enable or disable the tick callback based on component state.\nSOURCE: https://github.com/pixijs/pixi-react/blob/main/README.md#2025-04-16_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react'\nimport { useTick } from '@pixi/react'\n\nconst MyComponent = () => {\n  const [isEnabled, setIsEnabled] = useState(false)\n\n  useTick(() => console.log('This will be logged on every tick as long as `isEnabled` is `true`'), isEnabled)\n\n  return (\n    <sprite onClick={setIsEnabled(previousState => !previousState)}>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using resizeTo with React Refs in Application Component\nDESCRIPTION: Demonstrates how to use the resizeTo property of the Application component with a React ref to automatically resize the PixiJS canvas.\nSOURCE: https://github.com/pixijs/pixi-react/blob/main/README.md#2025-04-16_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Application } from '@pixi/react'\nimport { useRef } from 'react'\nconst MyComponent = () => {\n  const parentRef = useRef(null)\n  return (\n    <div ref={parentRef}>\n      <Application resizeTo={parentRef} />\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using useTick Hook with Pixi React\nDESCRIPTION: This snippet shows how to use the useTick hook to bind a listener to the PIXI.Application ticker event. This allows component logic to run on each animation frame, receiving the delta time between frames as a parameter.\nSOURCE: https://github.com/pixijs/pixi-react/blob/main/docs/versioned_docs/version-7.x/hooks/Hooks.mdx#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useTick } from '@pixi/react'\n\nfunction MyComponent () {\n  useTick(delta => {\n    // do something here\n  })\n\n  return (\n    ...\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding SimpleMesh Code Editor in React Documentation\nDESCRIPTION: Embeds an interactive code editor showing SimpleMesh implementation examples. The editor displays multiple files including the main index file and a makeSimpleMeshData helper file with PixiJS v7 context.\nSOURCE: https://github.com/pixijs/pixi-react/blob/main/docs/versioned_docs/version-7.x/components/SimpleMesh.mdx#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<EmbeddedEditor version={'v7'} files={{ 'App.js': IndexFile, 'makeSimpleMeshData.js': makeSimpleMeshDataFile }} />\n```\n\n----------------------------------------\n\nTITLE: Optimized useTick Implementation with useCallback in PixiJS React\nDESCRIPTION: Improved useTick implementation that solves the performance problem by memoizing the callback function with useCallback. This prevents unnecessary re-subscriptions to the ticker on component re-renders.\nSOURCE: https://github.com/pixijs/pixi-react/blob/main/docs/docs/hooks/useTick.mdx#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport {\n    Application,\n    useTick,\n} from '@pixi/react';\nimport { useCallback, useState } from 'react'\n\nconst ChildComponent = () => {\n    const [rotation, setRotation] = useState(0)\n\n    const animateRotation = useCallback(() => setRotation(previousState => previousState + 1), []);\n\n    useTick(animateRotation);\n\n    return <pixiSprite rotation={rotation} />;\n};\n\nconst MyComponent = () => (\n    <Application>\n        <ChildComponent />\n    </Application>\n);\n```\n\n----------------------------------------\n\nTITLE: Using EmbeddedEditor Component to Display Container Example\nDESCRIPTION: This JSX code creates an embedded code editor showing a Container component example. It passes in the PixiJS version, height configuration, and the imported example file.\nSOURCE: https://github.com/pixijs/pixi-react/blob/main/docs/versioned_docs/version-7.x/components/Container.mdx#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<EmbeddedEditor version={'v7'} height={350} files={{ 'App.js': IndexFile }} />\n```\n\n----------------------------------------\n\nTITLE: Accessing PIXI.Application with withPixiApp HOC\nDESCRIPTION: Example of using the withPixiApp higher-order component to inject the PIXI.Application instance into a component. This pattern follows the traditional HOC pattern in React.\nSOURCE: https://github.com/pixijs/pixi-react/blob/main/docs/versioned_docs/version-7.x/stage/Stage.mdx#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { withPixiApp } from '@pixi/react';\n\nconst MyComponent = withPixiApp(OtherComponent);\n```\n\n----------------------------------------\n\nTITLE: Embedding Interactive TilingSprite Editor in React Documentation\nDESCRIPTION: This JSX code embeds an interactive editor component to demonstrate the usage of the TilingSprite. It uses the imported IndexFile and sets up the editor with specific props.\nSOURCE: https://github.com/pixijs/pixi-react/blob/main/docs/versioned_docs/version-7.x/components/TilingSprite.mdx#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<EmbeddedEditor version={'v7'} height={350} files={{ 'App.js': IndexFile }} />\n```\n\n----------------------------------------\n\nTITLE: Using Source Props with ReactPixi Components\nDESCRIPTION: Shows examples of setting image and video sources directly on a Sprite component using the Source type properties.\nSOURCE: https://github.com/pixijs/pixi-react/blob/main/docs/versioned_docs/version-7.x/typescript.mdx#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Sprite image=\"./my-image.png\" />\n<Sprite video={document.querySelector('#video')} />\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of useApplication Hook in React with PIXI.js\nDESCRIPTION: This example demonstrates an incorrect usage of the useApplication hook where it will fail because it's not used within a child component of an Application component but in the same component that creates the Application.\nSOURCE: https://github.com/pixijs/pixi-react/blob/main/docs/docs/hooks/useApplication.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {\n    Application,\n    useApplication,\n} from '@pixi/react';\n\nconst MyComponent = () => {\n    // This will cause an invariant violation.\n    const { app } = useApplication();\n\n    return <Application />;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Source Type for ReactPixi Components in TypeScript\nDESCRIPTION: Defines the Source type used for directly applying source to components like Sprite, Text, NineSlicePlane, TilingSprite, SimpleRope, SimpleMesh, and AnimatedSprite. It supports images, videos, and various texture sources.\nSOURCE: https://github.com/pixijs/pixi-react/blob/main/docs/versioned_docs/version-7.x/typescript.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntype Source = {\n  image?: ImageSource;\n  video?: VideoSource;\n  source?:\n    | number\n    | ImageSource\n    | VideoSource\n    | HTMLCanvasElement\n    | Texture;\n};\n```\n\n----------------------------------------\n\nTITLE: Problematic useTick Implementation Causing Re-renders\nDESCRIPTION: Example showing a potential issue with useTick where non-memoized callbacks updating state can cause continuous re-renders and performance problems.\nSOURCE: https://github.com/pixijs/pixi-react/blob/main/README.md#2025-04-16_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react'\nimport { useTick } from '@pixi/react'\n\nconst MyComponent = () => {\n  const [count, setCount] = useState(0)\n\n  useTick(() => setCount(previousCount => previousCount + 1))\n\n  return null\n}\n```\n\n----------------------------------------\n\nTITLE: Using PointLike Props with Sprite Component in ReactPixi\nDESCRIPTION: Demonstrates various ways to set the anchor property on a Sprite component using different PointLike formats, including object literal, Point instance, number, and arrays.\nSOURCE: https://github.com/pixijs/pixi-react/blob/main/docs/versioned_docs/version-7.x/typescript.mdx#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Sprite } from '@pixi/react';\nimport { Point } from 'pixi.js';\n\n<Sprite anchor={{ x: 0.5, y: 0.5 }} />\n<Sprite anchor={new Point(0.5, 0.5)} />\n<Sprite anchor={0.5} />\n<Sprite anchor={[0.5]} />\n<Sprite anchor={[0.5, 0.5]} />\n```\n\n----------------------------------------\n\nTITLE: Problematic useTick Implementation with State Updates in PixiJS React\nDESCRIPTION: Example of a problematic useTick implementation that causes performance issues. The non-memoized callback updates state on every tick, causing constant re-renders and ticker subscription changes.\nSOURCE: https://github.com/pixijs/pixi-react/blob/main/docs/docs/hooks/useTick.mdx#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport {\n    Application,\n    useTick,\n} from '@pixi/react';\nimport { useState } from 'react'\n\nconst ChildComponent = () => {\n    const [rotation, setRotation] = useState(0)\n\n    useTick(() => setRotation(previousState => previousState + 1));\n\n    return <pixiSprite rotation={rotation} />;\n};\n\nconst MyComponent = () => (\n    <Application>\n        <ChildComponent />\n    </Application>\n);\n```\n\n----------------------------------------\n\nTITLE: Using PixiRef to Get PixiJS Instance Types in ReactPixi\nDESCRIPTION: Shows how to use the PixiRef utility type to get the native PixiJS instance type for a ReactPixi component, which is useful for creating strongly-typed refs.\nSOURCE: https://github.com/pixijs/pixi-react/blob/main/docs/versioned_docs/version-7.x/typescript.mdx#2025-04-16_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Container, PixiRef } from '@pixi/react';\n\ntype IContainer = PixiRef<typeof Container>; // Pixi Container\n\nconst App = () => {\n  const containerRef = React.useRef<IContainer>(null);\n  return <Container ref={containerRef} />;\n};\n```\n\n----------------------------------------\n\nTITLE: ParticleContainer Editor Implementation\nDESCRIPTION: Component implementation showing the embedded editor setup for the ParticleContainer example with specified height and file configuration.\nSOURCE: https://github.com/pixijs/pixi-react/blob/main/docs/versioned_docs/version-7.x/components/ParticleContainer.mdx#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<EmbeddedEditor version={'v7'} height={350} files={{ 'App.js': IndexFile, 'ExampleAssetLoader.js': ExampleAssetLoader }} />\n```\n\n----------------------------------------\n\nTITLE: Extracting Component Prop Types in ReactPixi with TypeScript\nDESCRIPTION: Demonstrates how to extract specific prop types from ReactPixi components using ComponentProps from React, focusing on the draw prop of the Graphics component.\nSOURCE: https://github.com/pixijs/pixi-react/blob/main/docs/versioned_docs/version-7.x/typescript.mdx#2025-04-16_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useCallback, ComponentProps } from 'react';\nimport { Graphics } from '@pixi/react';\n\ntype Draw = ComponentProps<typeof Graphics>['draw'];\n\nconst App = () => {\n  const draw = useCallback<Draw>((g) => {\n    g; // PIXI.Graphics\n\n    g.clear();\n    g.beginFill(props.color);\n    g.drawRect(0, 0, 100, 100);\n    g.endFill();\n  });\n\n  return <Graphics draw={draw} />;\n};\n```\n\n----------------------------------------\n\nTITLE: Importing SimpleMesh Example Components in React\nDESCRIPTION: Imports the EmbeddedEditor component and raw code files for SimpleMesh examples. This code loads the necessary files to display interactive code examples on the documentation page.\nSOURCE: https://github.com/pixijs/pixi-react/blob/main/docs/versioned_docs/version-7.x/components/SimpleMesh.mdx#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { EmbeddedEditor } from '@site/src/components/Editor/EmbeddedEditor';\nimport IndexFile from '!!raw-loader!./SimpleMesh/index';\nimport makeSimpleMeshDataFile from '!!raw-loader!./SimpleMesh/makeSimpleMeshData';\n```\n\n----------------------------------------\n\nTITLE: Extending Built-in PixiJS Component Types\nDESCRIPTION: Example of extending built-in component types from PixiElements to create custom component props. Shows how to add additional properties to existing component types.\nSOURCE: https://github.com/pixijs/pixi-react/blob/main/README.md#2025-04-16_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type PixiElements } from '@pixi/react'\n\nexport type TilingSpriteProps = PixiElements['pixiTilingSprite'] & {\n  image?: string;\n  texture?: Texture;\n};\n```\n\n----------------------------------------\n\nTITLE: Importing Container Component Demo File in React Documentation\nDESCRIPTION: This code imports components for documentation purposes, specifically the EmbeddedEditor component and a raw Container example file to be displayed in the documentation.\nSOURCE: https://github.com/pixijs/pixi-react/blob/main/docs/versioned_docs/version-7.x/components/Container.mdx#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { EmbeddedEditor } from '@site/src/components/Editor/EmbeddedEditor';\nimport IndexFile from '!!raw-loader!./Container';\n```\n\n----------------------------------------\n\nTITLE: Enabling Unprefixed PixiJS Element Names in React\nDESCRIPTION: Shows how to enable unprefixed element names (like <container> instead of <pixiContainer>) by extending the PixiElements interface with UnprefixedPixiElements. This allows for shorter component names but may cause conflicts with other libraries.\nSOURCE: https://github.com/pixijs/pixi-react/blob/main/docs/docs/typescript.mdx#2025-04-16_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n// global.d.ts\nimport { type UnprefixedPixiElements } from '@pixi/react';\n\ndeclare module '@pixi/react'\n{\n    interface PixiElements extends UnprefixedPixiElements {}\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding CodePen Example for PixiJS SimpleMesh\nDESCRIPTION: Embeds a CodePen example demonstrating SimpleMesh functionality in action. The iframe loads an external CodePen that showcases practical implementation of the SimpleMesh component.\nSOURCE: https://github.com/pixijs/pixi-react/blob/main/docs/versioned_docs/version-7.x/components/SimpleMesh.mdx#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<iframe\n    height={500}\n    scrolling='no'\n    title='Mesh'\n    src='//codepen.io/inlet/embed/69e7153234c4e01232a7dbc50bbceb40/?height=300&theme-id=33987&default-tab=result&embed-version=2'\n    frameBorder='no'\n    allowFullScreen={true}\n    style={{ width: '100%' }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Enabling Unprefixed PixiJS Element Types\nDESCRIPTION: Shows how to enable unprefixed element types in @pixi/react by extending the PixiElements interface with UnprefixedPixiElements. This allows using shorter component names but may cause naming conflicts with other libraries.\nSOURCE: https://github.com/pixijs/pixi-react/blob/main/README.md#2025-04-16_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n// global.d.ts\nimport { type UnprefixedPixiElements } from '@pixi/react'\n\ndeclare module '@pixi/react' {\n  interface PixiElements extends UnprefixedPixiElements {}\n}\n```\n\n----------------------------------------\n\nTITLE: ParticleContainer CodePen Example\nDESCRIPTION: Iframe implementation showing a live CodePen example of the ParticleContainer in action, with full-width display and customized styling.\nSOURCE: https://github.com/pixijs/pixi-react/blob/main/docs/versioned_docs/version-7.x/components/ParticleContainer.mdx#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n<iframe\n    height={600}\n    scrolling='no'\n    title='Particle Container'\n    src='//codepen.io/inlet/embed/db5dc6ecfb42bbf8dd5322a1015dff70/?height=600&theme-id=33987&default-tab=result&embed-version=2'\n    frameBorder='no'\n    allowFullScreen={true}\n    style={{ width: '100%' }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Using BitmapText Component with @pixi/react\nDESCRIPTION: A complete example showing how to load bitmap font assets before rendering a BitmapText component using @pixi/react. The example demonstrates both the legacy Loader.shared approach and the newer Assets API available in PixiJS v7+.\nSOURCE: https://github.com/pixijs/pixi-react/blob/main/docs/versioned_docs/version-7.x/components/BitmapText.mdx#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { render } from 'react-dom'\nimport { Stage, BitmapText } from '@pixi/react'\nimport { Loader } from 'pixi.js'\n\nLoader.shared\n  .add('desyrel', './assets/desyrel.xml')\n  .load(onAssetsLoaded)\n\n// If using v7 or later, use the following code:\n// import { Assets } from 'pixi.js'\n//\n// Assets\n//  .load('./assets/desyrel.xml')\n//  .then(onAssetsLoaded)\n\nconst App = () => (\n  <Stage>\n    <BitmapText text=\"Hello World\" style={{ fontName: 'Desyrel', fontSize: 35 }}>\n  </Stage>\n)\n\nfunction onAssetsLoaded() {\n  render(<App />, document.getElementById('root'))\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New React Project with Vite\nDESCRIPTION: Commands to create a new React project using Vite and install necessary dependencies for Pixi React.\nSOURCE: https://github.com/pixijs/pixi-react/blob/main/docs/versioned_docs/version-7.x/about.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# for typescript use \"--template react-ts\"\nnpx create-vite@latest --template react my-app\ncd my-app\nnpm install\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install pixi.js@7 @pixi/react@7\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Component Destruction in ReactPixi\nDESCRIPTION: This example shows how to configure a custom component (Spine) to prevent automatic destruction of the instance and its children on unmount.\nSOURCE: https://github.com/pixijs/pixi-react/blob/main/docs/versioned_docs/version-7.x/custom-component.mdx#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nconst Spine = PixiComponent('Spine', {\n  config: {\n    destroy: false, // we don't want to auto destroy the instance on unmount\n    destroyChildren: false, // we also don't want to destroy its children on unmount\n  },\n  create: () => new SpineInstance(),\n  ...\n});\n```\n\n----------------------------------------\n\nTITLE: Running the Pixi React Application\nDESCRIPTION: Command to run the Pixi React application after setup.\nSOURCE: https://github.com/pixijs/pixi-react/blob/main/docs/versioned_docs/version-7.x/about.mdx#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Installing @pixi/react Dependencies with npm\nDESCRIPTION: Command to install the required dependencies for using @pixi/react in a React application, specifying PixiJS v8.2.6 or higher.\nSOURCE: https://github.com/pixijs/pixi-react/blob/main/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install pixi.js@^8.2.6 @pixi/react\n```\n\n----------------------------------------\n\nTITLE: Importing Canvas Modules for Advanced Users\nDESCRIPTION: TypeScript imports for specific canvas modules needed when using @pixi scoped packages instead of the full pixi.js-legacy package.\nSOURCE: https://github.com/pixijs/pixi-react/blob/main/docs/versioned_docs/version-7.x/fallback-to-canvas.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport '@pixi/canvas-display';\nimport '@pixi/canvas-extract';\nimport '@pixi/canvas-graphics';\nimport '@pixi/canvas-mesh';\nimport '@pixi/canvas-particle-container';\nimport '@pixi/canvas-prepare';\nimport '@pixi/canvas-renderer';\nimport '@pixi/canvas-sprite-tiling';\nimport '@pixi/canvas-sprite';\nimport '@pixi/canvas-text';\n```\n\n----------------------------------------\n\nTITLE: Installing Pixi.js and @pixi/react dependencies\nDESCRIPTION: Command to install the required Pixi.js and @pixi/react packages into an existing React application. It specifies Pixi.js version 8.2.6 or higher and the beta version of @pixi/react.\nSOURCE: https://github.com/pixijs/pixi-react/blob/main/docs/docs/getting-started.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install pixi.js@^8.2.6 @pixi/react@beta\n```\n\n----------------------------------------\n\nTITLE: Installing PixiJS Legacy Package\nDESCRIPTION: Command to install the legacy version of PixiJS that supports Canvas fallback.\nSOURCE: https://github.com/pixijs/pixi-react/blob/main/docs/versioned_docs/version-7.x/fallback-to-canvas.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install pixi.js-legacy\n```\n\n----------------------------------------\n\nTITLE: Installing Individual Canvas Module\nDESCRIPTION: Example command for installing a specific canvas module for advanced users using @pixi scoped packages.\nSOURCE: https://github.com/pixijs/pixi-react/blob/main/docs/versioned_docs/version-7.x/fallback-to-canvas.mdx#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @pixi/canvas-display\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of useApplication Hook\nDESCRIPTION: Example demonstrating incorrect usage of the useApplication hook outside the context of an Application component, which will cause an invariant violation.\nSOURCE: https://github.com/pixijs/pixi-react/blob/main/README.md#2025-04-16_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport {\n  Application,\n  useApplication,\n} from '@pixi/react'\n\nconst ParentComponent = () => {\n  // This will cause an invariant violation.\n  const { app } = useApplication()\n\n  return (\n    <Application />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Using AnimatedSprite Component in React\nDESCRIPTION: Demonstrates how to import necessary components and files for using AnimatedSprite in a React application with Pixi.js integration. The imports include embedded editor components and raw code examples.\nSOURCE: https://github.com/pixijs/pixi-react/blob/main/docs/versioned_docs/version-7.x/components/AnimatedSprite.mdx#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { EmbeddedEditor } from \"@site/src/components/Editor/EmbeddedEditor\";\nimport IndexFile from '!!raw-loader!./AnimatedSprite/index';\nimport makeAnimatedSpriteTexturesFile from '!!raw-loader!./AnimatedSprite/makeAnimatedSpriteTextures';\n```\n\n----------------------------------------\n\nTITLE: Embedding CodePen Example for Container Component\nDESCRIPTION: This JSX code embeds a CodePen demonstration of the Container component. It includes configuration for height, scrolling behavior, and other iframe properties.\nSOURCE: https://github.com/pixijs/pixi-react/blob/main/docs/versioned_docs/version-7.x/components/Container.mdx#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<iframe\n  height={500}\n  scrolling=\"no\"\n  title=\"Container\"\n  src=\"//codepen.io/inlet/embed/ca683993e355b9f3370f0a44d189141f/?height=300&theme-id=33987&default-tab=result&embed-version=2\"\n  frameBorder=\"no\"\n  allowFullScreen={true}\n  style={{ width: '100%' }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Text Component in React with PixiJS\nDESCRIPTION: The code imports an EmbeddedEditor component and raw content for a Text component example. This is used to provide an interactive code editor on the documentation page.\nSOURCE: https://github.com/pixijs/pixi-react/blob/main/docs/versioned_docs/version-7.x/components/Text.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { EmbeddedEditor } from '@site/src/components/Editor/EmbeddedEditor';\nimport IndexFile from '!!raw-loader!./Text';\n```\n\n----------------------------------------\n\nTITLE: Importing Editor Components and Raw Source in JavaScript\nDESCRIPTION: Imports the embedded editor component and loads the raw source code for the NineSlicePlane component example.\nSOURCE: https://github.com/pixijs/pixi-react/blob/main/docs/versioned_docs/version-7.x/components/NineSlicePlane.mdx#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { EmbeddedEditor } from '@site/src/components/Editor/EmbeddedEditor';\nimport IndexFile from '!!raw-loader!./NineSlicePlane';\n```\n\n----------------------------------------\n\nTITLE: Importing ParticleContainer Dependencies\nDESCRIPTION: Import statements for the ParticleContainer component and related dependencies, including the embedded editor component and raw loaders for example files.\nSOURCE: https://github.com/pixijs/pixi-react/blob/main/docs/versioned_docs/version-7.x/components/ParticleContainer.mdx#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { EmbeddedEditor } from '@site/src/components/Editor/EmbeddedEditor';\nimport IndexFile from '!!raw-loader!./ParticleContainer';\nimport ExampleAssetLoader from '!!raw-loader!./ExampleAssetLoader';\n```\n\n----------------------------------------\n\nTITLE: Importing and Using SimpleRope Component in React\nDESCRIPTION: Example of importing the EmbeddedEditor component for displaying a code example of SimpleRope usage. The component takes version and files props to render the example.\nSOURCE: https://github.com/pixijs/pixi-react/blob/main/docs/versioned_docs/version-7.x/components/SimpleRope.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { EmbeddedEditor } from '@site/src/components/Editor/EmbeddedEditor';\nimport IndexFile from '!!raw-loader!./SimpleRope';\n```\n\n----------------------------------------\n\nTITLE: Importing PixiJS React Sprite Components\nDESCRIPTION: Import statements for setting up the embedded editor component and loading the Sprite example code.\nSOURCE: https://github.com/pixijs/pixi-react/blob/main/docs/versioned_docs/version-7.x/components/Sprite.mdx#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { EmbeddedEditor } from '@site/src/components/Editor/EmbeddedEditor';\nimport IndexFile from '!!raw-loader!./Sprite';\n```\n\n----------------------------------------\n\nTITLE: Importing EmbeddedEditor and TilingSprite Example in React\nDESCRIPTION: This code snippet imports the EmbeddedEditor component and a raw TilingSprite example file. It's used to set up the interactive code example in the documentation.\nSOURCE: https://github.com/pixijs/pixi-react/blob/main/docs/versioned_docs/version-7.x/components/TilingSprite.mdx#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { EmbeddedEditor } from '@site/src/components/Editor/EmbeddedEditor';\nimport IndexFile from '!!raw-loader!./TilingSprite';\n```\n\n----------------------------------------\n\nTITLE: Embedding CodePen Example for TilingSprite in React Documentation\nDESCRIPTION: This HTML code embeds a CodePen example demonstrating the TilingSprite component. It's set up as an iframe with specific dimensions and styling to fit within the documentation page.\nSOURCE: https://github.com/pixijs/pixi-react/blob/main/docs/versioned_docs/version-7.x/components/TilingSprite.mdx#2025-04-16_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<iframe\n  height={500}\n  scrolling=\"no\"\n  title=\"Tiling Sprite\"\n  src=\"//codepen.io/inlet/embed/a6b5965c309e78fd1306a99c22b38d79/?height=300&theme-id=33987&default-tab=result&embed-version=2\"\n  frameBorder=\"no\"\n  allowFullScreen={true}\n  style={{ width: '100%' }}\n/>\n```"
  }
]