[
  {
    "owner": "tiagogrosso",
    "repo": "instagram-graph-api-lib",
    "content": "TITLE: Initializing Instagram API Client in TypeScript\nDESCRIPTION: Shows how to create a new Client instance and build basic requests for page info and media.\nSOURCE: https://github.com/tiagogrosso/instagram-graph-api-lib/blob/master/README.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Client, GetPageInfoRequest, GetPageMediaRequest } from 'instagram-graph-api';\n\nconst client: Client = new Client(ACCESS_TOKEN, PAGE_ID);\n\nconst pageInfoRequest: GetPageInfoRequest = client.newGetPageInfoRequest();\nconst pageMediaRequest: GetPageMediaRequest = client.newGetPageMediaRequest();\n[...]\n```\n\n----------------------------------------\n\nTITLE: Generating Long-Lived User Tokens\nDESCRIPTION: Demonstrates how to convert a short-lived user token into a long-lived token using the API.\nSOURCE: https://github.com/tiagogrosso/instagram-graph-api-lib/blob/master/README.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { GetUserLongLivedTokenRequest, GetUserLongLivedTokenResponse } from 'instagram-graph-api';\n\n// You can get your APP_ID and APP_SECRET_ID through the Facebook Developers website.\nconst request: GetUserLongLivedTokenRequest = new GetUserLongLivedTokenRequest(\n    APP_ID,\n    APP_SECRET_ID,\n    USER_ACCESS_TOKEN\n);\n\nrequest.execute().then((response: GetUserLongLivedTokenResponse) => {\n    const longLivedToken: string = response.getLongLivedToken();\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Facebook Page IDs using GetAuthorizedFacebookPagesRequest in TypeScript\nDESCRIPTION: This snippet shows how to retrieve Facebook Page IDs by executing a GetAuthorizedFacebookPagesRequest with an access token. The response contains a list of authorized Facebook pages with their IDs, which can be used to find linked Instagram accounts.\nSOURCE: https://github.com/tiagogrosso/instagram-graph-api-lib/blob/master/README.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { GetAuthorizedFacebookPagesRequest, GetAuthorizedFacebookPagesResponse } from 'instagram-graph-api';\n\nconst request: GetAuthorizedFacebookPagesRequest = new GetAuthorizedFacebookPagesRequest(ACCESS_TOKEN);\n\nrequest.execute().then((response: GetAuthorizedFacebookPagesResponse) => {\n    const firstFacebookPage: string = pagesResponse.getAuthorizedFacebookPages()[0].id;\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Instagram Page ID using GetLinkedInstagramAccountRequest in TypeScript\nDESCRIPTION: This snippet demonstrates how to retrieve an Instagram Page ID by executing a GetLinkedInstagramAccountRequest with a Facebook Page ID and access token. The response contains the Instagram Page ID that can be used for subsequent API calls.\nSOURCE: https://github.com/tiagogrosso/instagram-graph-api-lib/blob/master/README.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { GetLinkedInstagramAccountRequest, GetLinkedInstagramAccountResponse } from 'instagram-graph-api';\n\nconst request: GetLinkedInstagramAccountRequest = new GetLinkedInstagramAccountRequest(ACCESS_TOKEN, FACEBOOK_PAGE_ID);\n\nrequest.execute().then((response: GetLinkedInstagramAccountResponse) => {\n    const pageId: string = response.getInstagramPageId();\n});\n```\n\n----------------------------------------\n\nTITLE: Executing API Requests with Response Parsing\nDESCRIPTION: Shows how to execute a request using the built-in execute() method and handle the parsed response.\nSOURCE: https://github.com/tiagogrosso/instagram-graph-api-lib/blob/master/README.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { GetPageInfoRequest, GetPageInfoResponse } from 'instagram-graph-api';\n\nconst request: GetPageInfoRequest = new GetPageInfoRequest(ACCESS_TOKEN, PAGE_ID);\n\nrequest.execute().then((response: GetPageInfoResponse) => {\n    console.log(`The page ${response.getName()} has ${response.getFollowers()} followers.`);\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Pagination for Media Requests\nDESCRIPTION: Shows how to handle paginated responses when fetching media data using the PageOption parameter.\nSOURCE: https://github.com/tiagogrosso/instagram-graph-api-lib/blob/master/README.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { GetPageMediaRequest, GetPageMediaResponse, PageOption } from 'instagram-graph-api';\n\nconst request: GetPageMediaRequest = new GetPageMediaRequest(ACCESS_TOKEN, PAGE_ID);\n\nrequest.execute().then((response: GetPageMediaResponse) => {\n      const nextPage: string | undefined = response.getPaging().getAfter();\n    if (nextPage) {\n        request.withPaging({ option: PageOption.AFTER, value: nextPage })\n               .execute([...]); // you can reuse the old request ðŸ˜Ž\n    } else {\n        console.log('ðŸ›‘ðŸ›‘ðŸ›‘');\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Date Range for Insights Requests\nDESCRIPTION: Demonstrates how to set date range parameters when fetching Instagram insights data.\nSOURCE: https://github.com/tiagogrosso/instagram-graph-api-lib/blob/master/README.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { GetPageLifetimeInsightsRequest, GetPageLifetimeInsightsRequest } from 'instagram-graph-api';\n\n\nconst request: GetPageLifetimeInsightsRequest = new GetPageLifetimeInsightsRequest(ACCESS_TOKEN, PAGE_ID)\n                                                        .withRange(new Date('2021-01-01'), new Date('2021-01-15'))\n\nrequest.execute().then((response: GetPageLifetimeInsightsResponse) => {\n    [...]\n});\n```\n\n----------------------------------------\n\nTITLE: Limiting Media Request Results\nDESCRIPTION: Shows how to limit the number of items returned in a media request using the withLimit method.\nSOURCE: https://github.com/tiagogrosso/instagram-graph-api-lib/blob/master/README.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { GetPageMediaRequest, GetPageMediaResponse } from 'instagram-graph-api';\n\nconst request: GetPageMediaRequest = new GetPageMediaRequest(ACCESS_TOKEN, PAGE_ID).withLimit(5);\n\nrequest.execute().then((response: GetPageMediaResponse) => {\n    console.log(response.getData().length); // This will be < 5\n});\n```\n\n----------------------------------------\n\nTITLE: Extracting Request Configuration\nDESCRIPTION: Demonstrates how to extract the request configuration for custom execution handling.\nSOURCE: https://github.com/tiagogrosso/instagram-graph-api-lib/blob/master/README.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { GetPageInfoRequest, RequestConfig } from 'instagram-graph-api';\n\nconst request: GetPageInfoRequest = new GetPageInfoRequest(ACCESS_TOKEN, PAGE_ID);\n\nconst config: RequestConfig = request.config();\n\n[...]\n```\n\n----------------------------------------\n\nTITLE: Manual Request Building in TypeScript\nDESCRIPTION: Demonstrates how to manually construct an API request without using the client.\nSOURCE: https://github.com/tiagogrosso/instagram-graph-api-lib/blob/master/README.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst request: GetPageInfoRequest = new GetPageInfoRequest(ACCESS_TOKEN, PAGE_ID);\n```\n\n----------------------------------------\n\nTITLE: Required Environment Variables for Integration Tests\nDESCRIPTION: Environment variables needed to run integration tests, either directly or via .env file at project root\nSOURCE: https://github.com/tiagogrosso/instagram-graph-api-lib/blob/master/CONTRIBUTING.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nPAGE_ID - The id of the instagram page.\nPAGE_ACCESS_TOKEN - A token with permissions to run operations over that page.\n```"
  }
]