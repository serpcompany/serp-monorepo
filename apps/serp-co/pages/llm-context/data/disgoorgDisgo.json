[
  {
    "owner": "disgoorg",
    "repo": "disgo",
    "content": "TITLE: Building a Basic DisGo Bot Client in Go\nDESCRIPTION: Example code showing how to create a basic DisGo client with gateway connection, event handling, and graceful shutdown. The example sets up gateway intents and a basic event listener.\nSOURCE: https://github.com/disgoorg/disgo/blob/master/README.md#2025-04-11_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"os\"\n\t\"os/signal\"\n\t\"syscall\"\n\n\t\"github.com/disgoorg/disgo\"\n\t\"github.com/disgoorg/disgo/bot\"\n\t\"github.com/disgoorg/disgo/events\"\n\t\"github.com/disgoorg/disgo/gateway\"\n)\n\nfunc main() {\n\tclient, err := disgo.New(\"token\",\n\t\t// set gateway options\n\t\tbot.WithGatewayConfigOpts(\n\t\t\t// set enabled intents\n\t\t\tgateway.WithIntents(\n\t\t\t\tgateway.IntentGuilds,\n\t\t\t\tgateway.IntentGuildMessages,\n\t\t\t\tgateway.IntentDirectMessages,\n\t\t\t),\n\t\t),\n\t\t// add event listeners\n\t\tbot.WithEventListenerFunc(func(e *events.MessageCreate) {\n\t\t\t// event code here\n\t\t}),\n\t)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\t// connect to the gateway\n\tif err = client.OpenGateway(context.TODO()); err != nil {\n\t\tpanic(err)\n\t}\n\n\ts := make(chan os.Signal, 1)\n\tsignal.Notify(s, syscall.SIGINT, syscall.SIGTERM)\n\t<-s\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Messages via Webhook in Go\nDESCRIPTION: Send messages through a webhook using different methods. Examples include sending simple text content, embeds, and structured messages using builders or direct structs.\nSOURCE: https://github.com/disgoorg/disgo/blob/master/webhook/README.md#2025-04-11_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nclient := webhook.New(snowflake.ID(\"webhookID\"), \"webhookToken\")\n\nmessage, err := client.CreateContent(\"hello world!\")\n\nmessage, err := client.CreateEmbeds(discord.NewEmbedBuilder().\n\tSetDescription(\"hello world!\").\n\tBuild(),\n)\n\nmessage, err := client.CreateMessage(webhook.NewWebhookMessageCreateBuilder().\n\tSetContent(\"hello world!\").\n\tBuild(),\n)\n\nmessage, err := client.CreateMessage(discord.WebhookMessageCreate{\n\tContent: \"hello world!\",\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Voice Connection with bot.Client in Go\nDESCRIPTION: This snippet demonstrates how to create a voice connection using the bot.Client package, connect to a voice channel, send an opus frame, and close the connection. It handles the connection lifecycle including opening and error handling.\nSOURCE: https://github.com/disgoorg/disgo/blob/master/voice/README.md#2025-04-11_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nconst (\n    guildID = 12345\n    channelID = 12345\n)\n\nvar client bot.Client\n\nconn := client.VoiceManager().CreateConn(guildID)\n\nerr := conn.Open(context.TODO(), channelID, false, false)\n// handle err\n\n// send opus frame\nconn.Conn().Write(frame)\n\n// close connection\nconn.Close()\n```\n\n----------------------------------------\n\nTITLE: Configuring Webhook Client with Optional Parameters in Go\nDESCRIPTION: Create a webhook client with optional configuration parameters such as custom logger and default allowed mentions. These options are passed as variadic arguments to the webhook.New function.\nSOURCE: https://github.com/disgoorg/disgo/blob/master/webhook/README.md#2025-04-11_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nclient := webhook.New(snowflake.ID(\"webhookID\"), \"webhookToken\",\n\twebhook.WithLogger(logrus.New()),\n\twebhook.WithDefaultAllowedMentions(discord.AllowedMentions{\n\t\tRepliedUser: false,\n\t}),\n)\n```\n\n----------------------------------------\n\nTITLE: Editing Messages via Webhook in Go\nDESCRIPTION: Update existing messages sent through a webhook. Examples show how to update content, embeds, and structured messages using different methods including builders and direct structs.\nSOURCE: https://github.com/disgoorg/disgo/blob/master/webhook/README.md#2025-04-11_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nclient := webhook.New(snowflake.ID(\"webhookID\"), \"webhookToken\")\n\nmessage, err := client.UpdateContent(\"870741249114652722\", \"hello world!\")\n\nmessage, err := client.UpdateEmbeds(\"870741249114652722\", discord.NewEmbedBuilder().\n\tSetDescription(\"hello world!\").\n\tBuild(),\n)\n\nmessage, err := client.UpdateMessage(\"870741249114652722\", discord.NewWebhookMessageUpdateBuilder().\n\tSetContent(\"hello world!\").\n\tBuild(),\n)\n\nmessage, err := client.UpdateMessage(\"870741249114652722\", discord.WebhookMessageUpdate{\n\tContent: json.Ptr(\"hello world!\"),\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Voice Connection with Standalone Voice Package in Go\nDESCRIPTION: This code snippet shows how to use the voice package independently by creating a voice manager and a connection. After creating the connection, it requires sending a gateway.OpcodeVoiceStateUpdate packet to the Discord gateway.\nSOURCE: https://github.com/disgoorg/disgo/blob/master/voice/README.md#2025-04-11_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Ed25519 Verification in DisGo HTTP Server\nDESCRIPTION: Example of implementing custom signature verification using the curve25519-voi library for improved performance (0.13ms vs 0.54ms with crypto/ed25519). Demonstrates how to override the default verification function with a custom implementation.\nSOURCE: https://github.com/disgoorg/disgo/blob/master/httpserver/README.md#2025-04-11_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"github.com/oasisprotocol/curve25519-voi/primitives/ed25519\"\n\t\"github.com/disgoorg/disgo/httpserver\"\n)\nfunc main() {\n\thttpserver.Verify = func(publicKey httpserver.PublicKey, message, sig []byte) bool {\n\t\treturn ed25519.Verify(publicKey, message, sig)\n\t}\n}\n\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for disgo with Proxies\nDESCRIPTION: This code snippet defines the necessary environment variables for configuring disgo to work with gateway and REST proxies. It includes the Discord bot token, guild ID for registering commands, and URLs for the gateway and REST proxies.\nSOURCE: https://github.com/disgoorg/disgo/blob/master/_examples/proxy/README.md#2025-04-11_snippet_0\n\nLANGUAGE: env\nCODE:\n```\ndisgo_token=discord bot token\n\ndisgo_guild_id=guild id to register commmands to\n\ndisgo_gateway_url=url to your gateway proxy. example: ws://gateway-proxy:7878\n\ndisgo_rest_url=url to your rest proxy. example: http://rest-proxy:7979/api/v10\n```\n\n----------------------------------------\n\nTITLE: Creating a Webhook Client in Go\nDESCRIPTION: Initialize a webhook client using either a webhook ID and token combination or a webhook URL. The client should be created once as it maintains important state information.\nSOURCE: https://github.com/disgoorg/disgo/blob/master/webhook/README.md#2025-04-11_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nclient := webhook.New(snowflake.ID(\"webhookID\"), \"webhookToken\")\n\nclient, err := webhook.NewWithURL(\"webhookURL\")\n```\n\n----------------------------------------\n\nTITLE: Deleting Messages via Webhook in Go\nDESCRIPTION: Delete messages previously sent through a webhook by providing the message ID to the DeleteMessage method of the webhook client.\nSOURCE: https://github.com/disgoorg/disgo/blob/master/webhook/README.md#2025-04-11_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nclient := webhook.New(snowflake.ID(\"webhookID\"), \"webhookToken\")\n\nerr := client.DeleteMessage(\"message_id\")\n```\n\n----------------------------------------\n\nTITLE: Installing DisGo with Go Get\nDESCRIPTION: Command for installing the DisGo library using Go's package manager.\nSOURCE: https://github.com/disgoorg/disgo/blob/master/README.md#2025-04-11_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ go get github.com/disgoorg/disgo\n```\n\n----------------------------------------\n\nTITLE: Importing the Webhook Package in Go\nDESCRIPTION: Import the webhook package from the disgo library into your Go project. This is required before using any webhook functionality.\nSOURCE: https://github.com/disgoorg/disgo/blob/master/webhook/README.md#2025-04-11_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/disgoorg/disgo/webhook\"\n```"
  }
]