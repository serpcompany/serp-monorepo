[
  {
    "owner": "auth0",
    "repo": "auth0-vue",
    "content": "TITLE: Configuring Auth0 SDK in Vue 3 Application\nDESCRIPTION: This snippet demonstrates how to configure the Auth0 SDK in a Vue 3 application by creating an instance of Auth0Plugin and using it with Vue's app.use() method.\nSOURCE: https://github.com/auth0/auth0-vue/blob/main/README.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createAuth0 } from '@auth0/auth0-vue';\n\nconst app = createApp(App);\n\napp.use(\n  createAuth0({\n    domain: '<AUTH0_DOMAIN>',\n    clientId: '<AUTH0_CLIENT_ID>',\n    authorizationParams: {\n      redirect_uri: '<MY_CALLBACK_URL>'\n    }\n  })\n);\n\napp.mount('#app');\n```\n\n----------------------------------------\n\nTITLE: Protecting Routes with Auth0-Vue Navigation Guard in TypeScript\nDESCRIPTION: Sets up a Vue application with Auth0 and Vue-Router, demonstrating how to protect routes using the authGuard navigation guard. The route '/profile' is protected, requiring authentication before access.\nSOURCE: https://github.com/auth0/auth0-vue/blob/main/EXAMPLES.md#2025-04-17_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createApp } from 'vue';\nimport { createRouter, createWebHashHistory } from 'vue-router';\nimport { createAuth0, authGuard } from '@auth0/auth0-vue';\n\nconst app = createApp(App);\napp.use(createRouter({\n  routes: [\n    {\n      path: '/',\n      name: 'home',\n      component: Home\n    },\n    {\n      path: '/profile',\n      name: 'profile',\n      component: Profile,\n      beforeEnter: authGuard\n    }\n  ],\n  history: createWebHashHistory()\n}));\napp.use(createAuth0({ ... }));\napp.mount('#app');\n```\n\n----------------------------------------\n\nTITLE: Applying Authentication Guard to Protected Routes in Vue Router\nDESCRIPTION: JavaScript configuration for Vue Router that applies the authGuard to protect the profile route. This ensures that only authenticated users can access the profile page.\nSOURCE: https://github.com/auth0/auth0-vue/blob/main/tutorial/vue2-login.md#2025-04-17_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n// .. other imports ..\n\nimport { authGuard } from '../auth/authGuard';\n\nconst router = new VueRouter({\n  mode: 'history',\n  base: process.env.BASE_URL,\n  routes: [\n    // .. other routes ..\n    {\n      path: '/profile',\n      name: 'profile',\n      component: Profile,\n      beforeEnter: authGuard\n    }\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Creating an Authentication Guard for Vue Router\nDESCRIPTION: JavaScript implementation of an authentication guard function for Vue Router. This function checks if the user is authenticated before allowing access to protected routes, redirecting to login if necessary.\nSOURCE: https://github.com/auth0/auth0-vue/blob/main/tutorial/vue2-login.md#2025-04-17_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getInstance } from './index';\n\nexport const authGuard = (to, from, next) => {\n  const authService = getInstance();\n\n  const fn = () => {\n    // If the user is authenticated, continue with the route\n    if (authService.isAuthenticated) {\n      return next();\n    }\n\n    // Otherwise, log in\n    authService.loginWithRedirect({ appState: { targetUrl: to.fullPath } });\n  };\n\n  // If loading has already finished, check our auth state using `fn()`\n  if (!authService.loading) {\n    return fn();\n  }\n\n  // Watch for the loading property to change before we check isAuthenticated\n  authService.$watch('loading', loading => {\n    if (loading === false) {\n      return fn();\n    }\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Login with Auth0 in Vue Using Composition API\nDESCRIPTION: Shows how to implement login functionality using Auth0's loginWithRedirect method with Vue's Composition API. Demonstrates both the script setup and template implementation.\nSOURCE: https://github.com/auth0/auth0-vue/blob/main/EXAMPLES.md#2025-04-17_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script>\n  import { useAuth0 } from '@auth0/auth0-vue';\n\n  export default {\n    setup() {\n      const { loginWithRedirect } = useAuth0();\n\n      return {\n        login: () => {\n          loginWithRedirect();\n        }\n      };\n    }\n  };\n</script>\n```\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <div>\n    <button @click=\"login\">Log in</button>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing Login and Logout Methods in Vue.js Component\nDESCRIPTION: JavaScript implementation of login and logout methods in a Vue component. Uses Auth0's loginWithRedirect method for login and logout method with returnTo parameter to specify where to redirect after logout.\nSOURCE: https://github.com/auth0/auth0-vue/blob/main/tutorial/vue2-login.md#2025-04-17_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n<script>\n// .. imports removed for brevity\n\nexport default {\n  name: \"home\",\n  components: {\n    HelloWorld\n  },\n  methods: {\n    // Log the user in\n    login() {\n      this.$auth.loginWithRedirect();\n    },\n    // Log the user out\n    logout() {\n      this.$auth.logout({\n        logoutParams: {\n          returnTo: window.location.origin\n        }\n      });\n    }\n  }\n};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Exporting Auth0 Plugin Instance in TypeScript\nDESCRIPTION: Creates and exports an Auth0 plugin instance for use outside of Vue components. This approach allows the Auth0Client to be accessed from anywhere in the application.\nSOURCE: https://github.com/auth0/auth0-vue/blob/main/EXAMPLES.md#2025-04-17_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nexport const auth0 = createAuth0({ ... });\n```\n\n----------------------------------------\n\nTITLE: Making Authenticated API Calls with Auth0\nDESCRIPTION: Shows how to retrieve an access token and use it to make authenticated API calls. Includes error handling and token management.\nSOURCE: https://github.com/auth0/auth0-vue/blob/main/EXAMPLES.md#2025-04-17_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<script>\n  import { useAuth0 } from '@auth0/auth0-vue';\n\n  export default {\n    setup() {\n      const { getAccessTokenSilently } = useAuth0();\n\n      return {\n        doSomethingWithToken: async () => {\n          const token = await getAccessTokenSilently();\n          const response = await fetch('https://api.example.com/posts', {\n            headers: {\n              Authorization: `Bearer ${token}`\n            }\n          });\n          const data = await response.json();\n        }\n      };\n    }\n  };\n</script>\n```\n\n----------------------------------------\n\nTITLE: Creating Auth0 Authentication Wrapper for Vue\nDESCRIPTION: Implementation of a Vue-based wrapper around the Auth0 SPA SDK, providing reactive authentication state and methods for login, logout, and token retrieval. Also includes a Vue plugin to expose the wrapper throughout the application.\nSOURCE: https://github.com/auth0/auth0-vue/blob/main/tutorial/vue2-login.md#2025-04-17_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport Vue from 'vue';\nimport { createAuth0Client } from '@auth0/auth0-spa-js';\n\n/** Define a default action to perform after authentication */\nconst DEFAULT_REDIRECT_CALLBACK = () =>\n  window.history.replaceState({}, document.title, window.location.pathname);\n\nlet instance;\n\n/** Returns the current instance of the SDK */\nexport const getInstance = () => instance;\n\n/** Creates an instance of the Auth0 SDK. If one has already been created, it returns that instance */\nexport const useAuth0 = ({\n  onRedirectCallback = DEFAULT_REDIRECT_CALLBACK,\n  redirectUri = window.location.origin,\n  ...options\n}) => {\n  if (instance) return instance;\n\n  // The 'instance' is simply a Vue object\n  instance = new Vue({\n    data() {\n      return {\n        loading: true,\n        isAuthenticated: false,\n        user: {},\n        auth0Client: null,\n        popupOpen: false,\n        error: null\n      };\n    },\n    methods: {\n      /** Authenticates the user using a popup window */\n      async loginWithPopup(options, config) {\n        this.popupOpen = true;\n\n        try {\n          await this.auth0Client.loginWithPopup(options, config);\n          this.user = await this.auth0Client.getUser();\n          this.isAuthenticated = await this.auth0Client.isAuthenticated();\n          this.error = null;\n        } catch (e) {\n          this.error = e;\n          // eslint-disable-next-line\n          console.error(e);\n        } finally {\n          this.popupOpen = false;\n        }\n\n        this.user = await this.auth0Client.getUser();\n        this.isAuthenticated = true;\n      },\n      /** Handles the callback when logging in using a redirect */\n      async handleRedirectCallback() {\n        this.loading = true;\n        try {\n          await this.auth0Client.handleRedirectCallback();\n          this.user = await this.auth0Client.getUser();\n          this.isAuthenticated = true;\n          this.error = null;\n        } catch (e) {\n          this.error = e;\n        } finally {\n          this.loading = false;\n        }\n      },\n      /** Authenticates the user using the redirect method */\n      loginWithRedirect(o) {\n        return this.auth0Client.loginWithRedirect(o);\n      },\n      /** Returns all the claims present in the ID token */\n      getIdTokenClaims(o) {\n        return this.auth0Client.getIdTokenClaims(o);\n      },\n      /** Returns the access token. If the token is invalid or missing, a new one is retrieved */\n      getTokenSilently(o) {\n        return this.auth0Client.getTokenSilently(o);\n      },\n      /** Gets the access token using a popup window */\n\n      getTokenWithPopup(o) {\n        return this.auth0Client.getTokenWithPopup(o);\n      },\n      /** Logs the user out and removes their session on the authorization server */\n      logout(o) {\n        return this.auth0Client.logout(o);\n      }\n    },\n    /** Use this lifecycle method to instantiate the SDK client */\n    async created() {\n      // Create a new instance of the SDK client using members of the given options object\n      this.auth0Client = await createAuth0Client({\n        ...options,\n        authorizationParams: {\n          redirect_uri: redirectUri,\n          ...options.authorizationParams\n        }\n      });\n\n      try {\n        // If the user is returning to the app after authentication..\n        if (\n          window.location.search.includes('code=') &&\n          window.location.search.includes('state=')\n        ) {\n          // handle the redirect and retrieve tokens\n          const { appState } = await this.auth0Client.handleRedirectCallback();\n\n          this.error = null;\n\n          // Notify subscribers that the redirect callback has happened, passing the appState\n          // (useful for retrieving any pre-authentication state)\n          onRedirectCallback(appState);\n        }\n      } catch (e) {\n        this.error = e;\n      } finally {\n        // Initialize our internal authentication state\n        this.isAuthenticated = await this.auth0Client.isAuthenticated();\n        this.user = await this.auth0Client.getUser();\n        this.loading = false;\n      }\n    }\n  });\n\n  return instance;\n};\n\n// Create a simple Vue plugin to expose the wrapper object throughout the application\nexport const Auth0Plugin = {\n  install(Vue, options) {\n    Vue.prototype.$auth = useAuth0(options);\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Login with Auth0 in Vue 3 Component (Composition API)\nDESCRIPTION: This snippet shows how to implement login functionality using Auth0 in a Vue 3 component using the Composition API. It demonstrates the use of useAuth0 hook and loginWithRedirect function.\nSOURCE: https://github.com/auth0/auth0-vue/blob/main/README.md#2025-04-17_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<script>\n  import { useAuth0 } from '@auth0/auth0-vue';\n\n  export default {\n    setup() {\n      const { loginWithRedirect } = useAuth0();\n\n      return {\n        login: () => {\n          loginWithRedirect();\n        }\n      };\n    }\n  };\n</script>\n\n<template>\n  <div>\n    <button @click=\"login\">Log in</button>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Accessing Auth0 Methods Outside Vue Components\nDESCRIPTION: Shows how to access Auth0 methods from outside Vue components by importing the exported Auth0 plugin instance. This pattern is useful for using Auth0 functionality in services like Axios interceptors.\nSOURCE: https://github.com/auth0/auth0-vue/blob/main/EXAMPLES.md#2025-04-17_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { auth0 } from './auth0';\n\nexport async function getAccessTokenSilentlyOutsideComponent(options) {\n  return auth0.getAccessTokenSilently(options);\n}\n```\n\n----------------------------------------\n\nTITLE: Protecting Routes with Multiple Vue Applications using Auth0-Vue\nDESCRIPTION: Demonstrates how to protect routes when using multiple Vue applications with different Auth0 configurations. The createAuthGuard function is used with a specific app instance to ensure the guard connects to the right Auth0Plugin.\nSOURCE: https://github.com/auth0/auth0-vue/blob/main/EXAMPLES.md#2025-04-17_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createApp } from 'vue';\nimport { createRouter, createWebHashHistory } from 'vue-router';\nimport { createAuth0, createAuthGuard } from '@auth0/auth0-vue';\nimport App from './App.vue';\nimport Home from './components/Home.vue';\nimport Profile from './components/Profile.vue';\n\nconst app = createApp(App);\napp.use(\n  createRouter({\n    linkActiveClass: 'btn-primary',\n    routes: [\n      {\n        path: '/',\n        name: 'home',\n        component: Home\n      },\n      {\n        path: '/profile',\n        name: 'profile',\n        component: Profile,\n        beforeEnter: createAuthGuard(app)\n      }\n    ],\n    history: createWebHashHistory()\n  })\n);\napp.use(\n  createAuth0({\n    domain,\n    clientId\n  })\n);\napp.mount('#app');\n```\n\n----------------------------------------\n\nTITLE: Configuring Auth0 for API Access\nDESCRIPTION: Demonstrates how to configure Auth0 plugin with API audience and make authenticated API calls using access tokens.\nSOURCE: https://github.com/auth0/auth0-vue/blob/main/EXAMPLES.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createAuth0 } from '@auth0/auth0-vue';\n\nconst app = createApp(App);\n\napp.use(\n  createAuth0({\n    domain: '<AUTH0_DOMAIN>',\n    clientId: '<AUTH0_CLIENT_ID>',\n    authorizationParams: {\n      redirect_uri: '<MY_CALLBACK_URL>',\n      audience: '<AUTH0_AUDIENCE>'\n    }\n  })\n);\n\napp.mount('#app');\n```\n\n----------------------------------------\n\nTITLE: Implementing Logout with Auth0 in Vue\nDESCRIPTION: Shows how to implement logout functionality using Auth0's logout method. Includes configuration for redirect URL after logout.\nSOURCE: https://github.com/auth0/auth0-vue/blob/main/EXAMPLES.md#2025-04-17_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script>\n  import { useAuth0 } from '@auth0/auth0-vue';\n\n  export default {\n    setup() {\n      const { logout } = useAuth0();\n\n      return {\n        logout: () => {\n          logout({ logoutParams: { returnTo: window.location.origin } });\n        }\n      };\n    }\n  };\n</script>\n```\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <div>\n    <button @click=\"logout\">Log out</button>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Displaying User Profile with Auth0 in Vue\nDESCRIPTION: Demonstrates how to access and display the authenticated user's profile information using Auth0's user object. Includes both script and template implementations.\nSOURCE: https://github.com/auth0/auth0-vue/blob/main/EXAMPLES.md#2025-04-17_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script>\n  import { useAuth0 } from '@auth0/auth0-vue';\n\n  export default {\n    setup() {\n      const { loginWithRedirect, user } = useAuth0();\n\n      return {\n        login: () => {\n          loginWithRedirect();\n        },\n        user\n      };\n    }\n  };\n</script>\n```\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <div>\n    <h2>User Profile</h2>\n    <button @click=\"login\">Log in</button>\n    <pre>\n        <code>{{ user }}</code>\n      </pre>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing Authenticated API Calls in Vue\nDESCRIPTION: Vue component implementation showing how to make authenticated API calls using access tokens obtained from Auth0.\nSOURCE: https://github.com/auth0/auth0-vue/blob/main/tutorial/vue2-api.md#2025-04-17_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <div>\n    <button @click=\"callApi\">Call</button>\n  </div>\n</template>\n\n<script>\n  import axios from 'axios';\n\n  export default {\n    name: 'external-api',\n    methods: {\n      async callApi() {\n        // Get the access token from the auth wrapper\n        const token = await this.$auth.getTokenSilently();\n\n        // Use Axios to make a call to the API\n        const { data } = await axios.get('<YOUR API URL>', {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n      }\n    }\n  };\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing Authentication Buttons in Vue.js Template\nDESCRIPTION: HTML template code for adding login and logout buttons to a Vue component. The buttons are conditionally rendered based on the user's authentication status, with checks to ensure the Auth0 SDK has finished loading.\nSOURCE: https://github.com/auth0/auth0-vue/blob/main/tutorial/vue2-login.md#2025-04-17_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <div class=\"home\">\n    <img alt=\"Vue logo\" src=\"../assets/logo.png\" />\n    <HelloWorld msg=\"Welcome to Your Vue.js App\" />\n\n    <!-- Check that the SDK client is not currently loading before accessing is methods -->\n    <div v-if=\"!$auth.loading\">\n      <!-- show login when not authenticated -->\n      <button v-if=\"!$auth.isAuthenticated\" @click=\"login\">Log in</button>\n      <!-- show logout when authenticated -->\n      <button v-if=\"$auth.isAuthenticated\" @click=\"logout\">Log out</button>\n    </div>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Configuring Auth0 with Refresh Tokens and Local Storage in Vue\nDESCRIPTION: Configuration for Auth0 Vue SDK that enables refresh token rotation and local storage caching to maintain authentication state across page refreshes, particularly useful for browsers with ITP or when using MFA.\nSOURCE: https://github.com/auth0/auth0-vue/blob/main/FAQ.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createAuth0 } from '@auth0/auth0-vue';\n\nconst app = createApp(App);\napp.use(\n  createAuth0({\n    domain: '<AUTH0_DOMAIN>',\n    clientId: '<AUTH0_CLIENT_ID>',\n    useRefreshTokens: true,\n    cacheLocation: 'localstorage',\n    authorizationParams: {\n      redirect_uri: '<MY_CALLBACK_URL>'.\n    },\n  })\n);\napp.mount('#app');\n```\n\n----------------------------------------\n\nTITLE: Initializing Auth0 Vue Plugin\nDESCRIPTION: Vue.js plugin initialization with Auth0 configuration including audience parameter for API access.\nSOURCE: https://github.com/auth0/auth0-vue/blob/main/tutorial/vue2-api.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nVue.use(Auth0Plugin, {\n  domain,\n  clientId,\n  authorizationParams,\n  onRedirectCallback: appState => {\n    router.push(\n      appState && appState.targetUrl\n        ? appState.targetUrl\n        : window.location.pathname\n    );\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Vue Main File with Auth0 Plugin\nDESCRIPTION: Updated main.js file that imports the Auth0 plugin, configuration values, and installs the plugin with a custom redirect callback that uses Vue Router.\nSOURCE: https://github.com/auth0/auth0-vue/blob/main/tutorial/vue2-login.md#2025-04-17_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nimport Vue from 'vue';\nimport App from './App.vue';\nimport router from './router';\n\n// Import the Auth0 configuration\nimport { domain, clientId } from '../auth_config.json';\n\n// Import the plugin here\nimport { Auth0Plugin } from './auth';\n\n// Install the authentication plugin here\nVue.use(Auth0Plugin, {\n  domain,\n  clientId,\n  onRedirectCallback: appState => {\n    router.push(\n      appState && appState.targetUrl\n        ? appState.targetUrl\n        : window.location.pathname\n    );\n  }\n});\n\nVue.config.productionTip = false;\n\nnew Vue({\n  router,\n  render: h => h(App)\n}).$mount('#app');\n```\n\n----------------------------------------\n\nTITLE: Handling User Invitations with Auth0-Vue\nDESCRIPTION: Processes user invitations by extracting organization and invitation parameters from the route and passing them to the login methods. This Vue component shows how to accept organization invitations in a SaaS or B2B application.\nSOURCE: https://github.com/auth0/auth0-vue/blob/main/EXAMPLES.md#2025-04-17_snippet_12\n\nLANGUAGE: vue\nCODE:\n```\n<script>\n  import { useAuth0 } from '@auth0/auth0-vue';\n\n  export default {\n    setup() {\n      const { loginWithRedirect, loginWithPopup } = useAuth0();\n      const route = useRoute();\n      const { organization, invitation } = route.params;\n\n      return {\n        login: () => {\n          // Using a redirect\n          loginWithRedirect({\n            authorizationParams: {\n              organization,\n              invitation,\n            }\n          });\n\n          // Using a popup window\n          loginWithPopup({\n            authorizationParams: {\n              organization,\n              invitation,\n            }\n          })\n        }\n      };\n    }\n  };\n</script>\n```\n\n----------------------------------------\n\nTITLE: Organization-Specific Login with Auth0-Vue\nDESCRIPTION: Implements login functionality with organization support using both redirect and popup methods. This Vue component demonstrates how to log users into a specific organization when initiating the authentication flow.\nSOURCE: https://github.com/auth0/auth0-vue/blob/main/EXAMPLES.md#2025-04-17_snippet_11\n\nLANGUAGE: vue\nCODE:\n```\n<script>\n  import { useAuth0 } from '@auth0/auth0-vue';\n\n  export default {\n    setup() {\n      const { loginWithRedirect, loginWithPopup } = useAuth0();\n\n      return {\n        login: () => {\n          // Using a redirect\n          loginWithRedirect({\n            authorizationParams: {\n              organization: 'YOUR_ORGANIZATION_ID_OR_NAME',\n            }\n          });\n\n          // Using a popup window\n          loginWithPopup({\n            authorizationParams: {\n              organization: 'YOUR_ORGANIZATION_ID_OR_NAME',\n            }\n          })\n        }\n      };\n    }\n  };\n</script>\n```\n\n----------------------------------------\n\nTITLE: Creating a User Profile Display Component in Vue.js\nDESCRIPTION: HTML template for a Profile component that displays authenticated user information. It shows the user's picture, name, and email, along with a JSON representation of the complete user object.\nSOURCE: https://github.com/auth0/auth0-vue/blob/main/tutorial/vue2-login.md#2025-04-17_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <div>\n    <div>\n      <img :src=\"$auth.user.picture\" />\n      <h2>{{ $auth.user.name }}</h2>\n      <p>{{ $auth.user.email }}</p>\n    </div>\n\n    <div>\n      <pre>{{ JSON.stringify($auth.user, null, 2) }}</pre>\n    </div>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Configuring Auth0 with Organization Support in JavaScript\nDESCRIPTION: Initializes the Auth0 plugin with organization support for SaaS and B2B applications. The organization parameter is specified in the authorization parameters to log users into a specific organization.\nSOURCE: https://github.com/auth0/auth0-vue/blob/main/EXAMPLES.md#2025-04-17_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\napp.use(\n  createAuth0({\n    domain: '<AUTH0_DOMAIN>',\n    clientId: '<AUTH0_CLIENT_ID>',\n    authorizationParams: {\n      redirect_uri: '<MY_CALLBACK_URL>',\n      organization: 'YOUR_ORGANIZATION_ID_OR_NAME'\n    }\n  })\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Login with Auth0 in Vue 3 Component (Options API)\nDESCRIPTION: This snippet demonstrates how to implement login functionality using Auth0 in a Vue 3 component using the Options API. It shows how to access the Auth0 instance via this.$auth0.\nSOURCE: https://github.com/auth0/auth0-vue/blob/main/README.md#2025-04-17_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <div>\n    <button @click=\"login\">Log in</button>\n  </div>\n</template>\n\n<script>\n  export default {\n    methods: {\n      login() {\n        this.$auth0.loginWithRedirect();\n      }\n    }\n  };\n</script>\n```\n\n----------------------------------------\n\nTITLE: Restoring Query Parameters After Auth0 Redirect in Vue\nDESCRIPTION: Demonstrates how to preserve and restore query parameters after Auth0 authentication redirects by using the appState parameter in the loginWithRedirect method.\nSOURCE: https://github.com/auth0/auth0-vue/blob/main/FAQ.md#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nloginWithRedirect({\n  appState: { target: '/some-url?query=value' }\n});\n```\n\n----------------------------------------\n\nTITLE: Redirecting to Specific Page After Auth0 Login in Vue\nDESCRIPTION: Example showing how to redirect users to a specific URL after authentication by using the appState parameter with loginWithRedirect method of the Auth0 Vue SDK.\nSOURCE: https://github.com/auth0/auth0-vue/blob/main/FAQ.md#2025-04-17_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script>\n  import { useAuth0 } from '@auth0/auth0-vue';\n\n  export default {\n    setup() {\n      const { loginWithRedirect } = useAuth0();\n\n      return {\n        login: () => {\n          loginWithRedirect({\n            appState: { target: '/some-url' }\n          });\n        }\n      };\n    }\n  };\n</script>\n```\n\n----------------------------------------\n\nTITLE: Adding Conditional Navigation Links in Vue.js App Template\nDESCRIPTION: HTML template for the main App component with navigation links. Includes a conditional link to the profile page that only appears when the user is authenticated.\nSOURCE: https://github.com/auth0/auth0-vue/blob/main/tutorial/vue2-login.md#2025-04-17_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<!-- NEW - add a route to the profile page -->\n<template>\n  <div id=\"app\">\n    <div id=\"nav\">\n      <router-link to=\"/\">Home</router-link>|\n      <router-link to=\"/about\">About</router-link>|\n\n      <!-- NEW - add a route to the profile page -->\n      <router-link v-if=\"$auth.isAuthenticated\" to=\"/profile\"\n        >Profile</router-link\n      >\n    </div>\n    <router-view />\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Importing Auth0 Plugin in Vue Application\nDESCRIPTION: Demonstrates how to import the exported Auth0 plugin instance when configuring a Vue application. This allows the Auth0 plugin to be registered with the Vue app.\nSOURCE: https://github.com/auth0/auth0-vue/blob/main/EXAMPLES.md#2025-04-17_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { auth0 } from './auth0';\n\ncreateApp(App).use(auth0).mount('#app');\n```\n\n----------------------------------------\n\nTITLE: Accessing Auth0 User Data Outside Vue Components\nDESCRIPTION: Code example showing how to access Auth0 user information outside of Vue component context by using Vue's toRaw function to unwrap the reactive values.\nSOURCE: https://github.com/auth0/auth0-vue/blob/main/FAQ.md#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = toRaw(auth0.user).value;\nconsole.log(user.name);\n```\n\n----------------------------------------\n\nTITLE: Configuring Auth0 API Authentication Parameters\nDESCRIPTION: Configuration file setup for Auth0 SDK with API audience parameter to enable JWT access token requests.\nSOURCE: https://github.com/auth0/auth0-vue/blob/main/tutorial/vue2-api.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"domain\": \"<YOUR AUTH0 DOMAIN>\",\n  \"clientId\": \"<YOUR AUTH0 CLIENT ID>\",\n  \"authorizationParams\": {\n    \"audience\": \"<YOUR AUTH0 API IDENTIFIER>\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing authorizationParams in Auth0 Configuration\nDESCRIPTION: Shows how to migrate from the v1 flat configuration structure to the v2 structure that uses authorizationParams for Auth0-specific parameters. This separates SDK configuration properties from Auth0 authorization parameters.\nSOURCE: https://github.com/auth0/auth0-vue/blob/main/MIGRATION_GUIDE.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\napp.use(\n  createAuth0({\n    domain: '<AUTH0_DOMAIN>',\n    client_id: '<AUTH0_CLIENT_ID>',\n    redirect_uri: '<MY_CALLBACK_URL>',\n    audience: '<AUTH0_API_IDENTIFIER>'\n  })\n);\n```\n\nLANGUAGE: typescript\nCODE:\n```\napp.use(\n  createAuth0({\n    domain: '<AUTH0_DOMAIN>',\n    clientId: '<AUTH0_CLIENT_ID>',\n    authorizationParams: {\n      redirect_uri: '<MY_CALLBACK_URL>',\n      audience: '<AUTH0_API_IDENTIFIER>'\n    }\n  })\n);\n```\n\n----------------------------------------\n\nTITLE: Replacing localOnly with openUrl for Local Logout\nDESCRIPTION: Demonstrates how to migrate from v1's localOnly parameter to v2's openUrl parameter when implementing a logout that doesn't redirect to Auth0.\nSOURCE: https://github.com/auth0/auth0-vue/blob/main/MIGRATION_GUIDE.md#2025-04-17_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst { logout } = useAuth0();\nawait logout({\n  openUrl: false\n});\n```\n\n----------------------------------------\n\nTITLE: Replacing redirectMethod with openUrl in loginWithRedirect\nDESCRIPTION: Shows how to migrate from the v1 redirectMethod parameter to v2's openUrl callback in loginWithRedirect, enabling custom redirect behavior.\nSOURCE: https://github.com/auth0/auth0-vue/blob/main/MIGRATION_GUIDE.md#2025-04-17_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst { loginWithRedirect } = useAuth0();\nawait loginWithRedirect({\n  redirectMethod: 'replace'\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst { loginWithRedirect } = useAuth0();\nawait loginWithRedirect({\n  async openUrl(url) {\n    window.location.replace(url);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Auth0 Plugin Configuration with Merged Scopes in v2\nDESCRIPTION: Updated configuration for Auth0 Vue plugin in v2, merging previously separate defaultScope and scope values into a single scope property as advancedOptions has been removed.\nSOURCE: https://github.com/auth0/auth0-vue/blob/main/MIGRATION_GUIDE.md#2025-04-17_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\napp.use(\n  createAuth0({\n    scope: 'email scope1'\n  });\n);\n```\n\n----------------------------------------\n\nTITLE: Using logoutParams in Auth0 Logout Method\nDESCRIPTION: Demonstrates how to use the new logoutParams object in v2 to structure logout parameters. This replaces the previous approach where all parameters were passed at the root level.\nSOURCE: https://github.com/auth0/auth0-vue/blob/main/MIGRATION_GUIDE.md#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nawait logout({\n  clientId: '',\n  logoutParams: {\n    federated: true / false,\n    returnTo: '',\n    any_custom_property: 'value'\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Auth0 Configuration File\nDESCRIPTION: JSON configuration file that stores the Auth0 domain and client ID for the application. This file should not be committed to source control.\nSOURCE: https://github.com/auth0/auth0-vue/blob/main/tutorial/vue2-login.md#2025-04-17_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"domain\": \"<YOUR AUTH0 DOMAIN>\",\n  \"clientId\": \"<YOUR AUTH0 CLIENT ID>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing buildAuthorizeUrl with openUrl for Ionic Integration\nDESCRIPTION: Shows how to migrate from v1's buildAuthorizeUrl method to v2's openUrl parameter when using Auth0 with external browsers like in Ionic applications.\nSOURCE: https://github.com/auth0/auth0-vue/blob/main/MIGRATION_GUIDE.md#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst { buildAuthorizeUrl } = useAuth0();\nconst url = buildAuthorizeUrl();\nawait Browser.open({ url });\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst { loginWithRedirect } = useAuth0();\n\nawait loginWithRedirect({\n  async openUrl(url) {\n    await Browser.open({ url });\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Replacing buildLogoutUrl with openUrl for Custom Browsers\nDESCRIPTION: Demonstrates migrating from v1's buildLogoutUrl method to v2's openUrl parameter when handling logout in external browsers like Capacitor's Browser.\nSOURCE: https://github.com/auth0/auth0-vue/blob/main/MIGRATION_GUIDE.md#2025-04-17_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst { buildLogoutUrl } = useAuth0();\nconst url = buildLogoutUrl();\nawait Browser.open({ url });\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst { logout } = useAuth0();\n\nclient.logout({\n  async openUrl(url) {\n    await Browser.open({ url });\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Using cacheMode in Auth0 Vue SDK v2\nDESCRIPTION: Updated example showing how to bypass token cache in Auth0 Vue SDK v2 using the new cacheMode property instead of ignoreCache when calling getAccessTokenSilently.\nSOURCE: https://github.com/auth0/auth0-vue/blob/main/MIGRATION_GUIDE.md#2025-04-17_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst { getAccessTokenSilently } = useAuth0();\nconst token = await getAccessTokenSilently({ cacheMode: 'off' });\n```\n\n----------------------------------------\n\nTITLE: Configuring Routes for Profile Page in Vue Router\nDESCRIPTION: JavaScript code for configuring Vue Router to include a profile route. Imports the Profile component and adds a new route definition for the /profile path.\nSOURCE: https://github.com/auth0/auth0-vue/blob/main/tutorial/vue2-login.md#2025-04-17_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n//.. other imports\n\n// NEW - Import the profile component\nimport Profile from '../views/Profile.vue';\n\nconst router = new VueRouter({\n  mode: 'history',\n  routes: [\n    // .. other routes and pages ..\n\n    // NEW - add the route to the /profile component\n    {\n      path: '/profile',\n      name: 'profile',\n      component: Profile\n    }\n  ]\n});\n\nexport default router;\n```\n\n----------------------------------------\n\nTITLE: Updating Client ID Parameter in Auth0 Configuration (v1 to v2)\nDESCRIPTION: Demonstrates the change from using 'client_id' in v1 to 'clientId' in v2 when configuring the Auth0 plugin. This represents a breaking change in the parameter naming convention.\nSOURCE: https://github.com/auth0/auth0-vue/blob/main/MIGRATION_GUIDE.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\napp.use(\n  createAuth0({\n    client_id: '<AUTH0_CLIENT_ID>'\n  })\n);\n```\n\nLANGUAGE: typescript\nCODE:\n```\napp.use(\n  createAuth0({\n    clientId: '<AUTH0_CLIENT_ID>',\n  })\n);\n```\n\n----------------------------------------\n\nTITLE: Auth0 Plugin Configuration with Explicit Scope in v2\nDESCRIPTION: Updated configuration for Auth0 Vue plugin in v2, which requires explicitly including 'profile email' scopes if they are needed, as v2 only includes 'openid' by default when scope is explicitly set.\nSOURCE: https://github.com/auth0/auth0-vue/blob/main/MIGRATION_GUIDE.md#2025-04-17_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\napp.use(\n  createAuth0({\n    scope: 'profile email scope1'\n  })\n);\n```\n\n----------------------------------------\n\nTITLE: Auth0 Plugin Configuration with Explicit Scope in v1\nDESCRIPTION: Example showing how to configure Auth0 Vue plugin with explicit scope in v1, which would automatically include 'openid profile email' scopes as well.\nSOURCE: https://github.com/auth0/auth0-vue/blob/main/MIGRATION_GUIDE.md#2025-04-17_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\napp.use(\n  createAuth0({\n    scope: 'scope1'\n  })\n);\n```\n\n----------------------------------------\n\nTITLE: Installing Axios HTTP Client\nDESCRIPTION: Command to install Axios package for making HTTP requests to the API.\nSOURCE: https://github.com/auth0/auth0-vue/blob/main/tutorial/vue2-api.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install axios\n```\n\n----------------------------------------\n\nTITLE: Installing Auth0 SPA SDK\nDESCRIPTION: Command to install the Auth0 SPA SDK package which provides the core authentication functionality.\nSOURCE: https://github.com/auth0/auth0-vue/blob/main/tutorial/vue2-login.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @auth0/auth0-spa-js\n```\n\n----------------------------------------\n\nTITLE: Installing Auth0 SDK for Vue 3 using yarn\nDESCRIPTION: Command to install the Auth0 SDK for Vue 3 using yarn package manager.\nSOURCE: https://github.com/auth0/auth0-vue/blob/main/README.md#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn add @auth0/auth0-vue\n```\n\n----------------------------------------\n\nTITLE: Installing Auth0 SDK for Vue 3 using npm\nDESCRIPTION: Command to install the Auth0 SDK for Vue 3 using npm package manager.\nSOURCE: https://github.com/auth0/auth0-vue/blob/main/README.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @auth0/auth0-vue\n```\n\n----------------------------------------\n\nTITLE: Running Auth0 Vue SDK Playground\nDESCRIPTION: Commands to install dependencies and start the SDK playground, a Vue.js app for testing and experimenting with SDK features.\nSOURCE: https://github.com/auth0/auth0-vue/blob/main/DEVELOPMENT.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# Install dependencies\nnpm i\n\n# Run the playground app\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Using ignoreCache in Auth0 Vue SDK v1\nDESCRIPTION: Example showing how to bypass token cache in Auth0 Vue SDK v1 using the ignoreCache property when calling getAccessTokenSilently.\nSOURCE: https://github.com/auth0/auth0-vue/blob/main/MIGRATION_GUIDE.md#2025-04-17_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst { getAccessTokenSilently } = useAuth0();\nconst token = await getAccessTokenSilently({ ignoreCache: true });\n```\n\n----------------------------------------\n\nTITLE: Auth0 Plugin Configuration with Advanced Options in v1\nDESCRIPTION: Example of configuring Auth0 Vue plugin in v1 using both advancedOptions.defaultScope and scope properties, which has been deprecated in v2.\nSOURCE: https://github.com/auth0/auth0-vue/blob/main/MIGRATION_GUIDE.md#2025-04-17_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\napp.use(\n  createAuth0({\n    advancedOptions: { defaultScope: 'email' },\n    scope: 'scope1'\n  });\n);\n```\n\n----------------------------------------\n\nTITLE: Starting the Vue Application\nDESCRIPTION: Command to start the Vue development server on port 3000, which will automatically reload when changes are made to the code.\nSOURCE: https://github.com/auth0/auth0-vue/blob/main/tutorial/vue2-login.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run serve -- --port 3000\n```\n\n----------------------------------------\n\nTITLE: Installing Vue CLI and Creating a Vue 2 Application\nDESCRIPTION: Commands to install Vue CLI globally, create a new Vue 2 application with default settings, and add Vue Router to the project.\nSOURCE: https://github.com/auth0/auth0-vue/blob/main/tutorial/vue2-login.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Install the CLI\nnpm install -g @vue/cli\n\n# Create the application using the Vue CLI.\n# When asked to pick a preset, accept the defaults\nvue create my-app\n\n# Move into the project directory\ncd my-app\n\n# Add the router, as we will be using it later\n# Select 'yes' when asked if you want to use history mode\nvue add router\n```\n\n----------------------------------------\n\nTITLE: Running Integration Tests for Auth0 Vue SDK\nDESCRIPTION: Commands to run integration tests using Cypress. Includes options for running tests once or in watch mode.\nSOURCE: https://github.com/auth0/auth0-vue/blob/main/DEVELOPMENT.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test:integration\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test:watch:integration\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests for Auth0 Vue SDK\nDESCRIPTION: Commands to run unit tests using Jest. Includes options for running tests once or in watch mode.\nSOURCE: https://github.com/auth0/auth0-vue/blob/main/DEVELOPMENT.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm test\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test:watch\n```\n\n----------------------------------------\n\nTITLE: Viewing Test Coverage for Auth0 Vue SDK\nDESCRIPTION: Command to serve and view the test coverage report generated by running tests.\nSOURCE: https://github.com/auth0/auth0-vue/blob/main/DEVELOPMENT.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm run serve:coverage\n```\n\n----------------------------------------\n\nTITLE: Building Auth0 Vue SDK with Rollup\nDESCRIPTION: Command to build the Auth0 Vue SDK using npm. This uses Rollup to compile JavaScript assets into output modules.\nSOURCE: https://github.com/auth0/auth0-vue/blob/main/DEVELOPMENT.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Building Auth0 Vue SDK with Bundle Stats\nDESCRIPTION: Commands to build the Auth0 Vue SDK with bundle size statistics and view the results. This generates a visualization in the bundle-stats folder.\nSOURCE: https://github.com/auth0/auth0-vue/blob/main/DEVELOPMENT.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nWITH_STATS=true npm run build\nnpm run serve:stats\n```\n\n----------------------------------------\n\nTITLE: Running Auth0 Vue SDK Playground on Custom Port\nDESCRIPTION: Command to start the SDK playground on a custom port using the DEV_PORT environment variable.\nSOURCE: https://github.com/auth0/auth0-vue/blob/main/DEVELOPMENT.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nDEV_PORT=8080 npm start\n```"
  }
]