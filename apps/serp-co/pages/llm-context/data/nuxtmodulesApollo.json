[
  {
    "owner": "nuxt-modules",
    "repo": "apollo",
    "content": "TITLE: Real-time Updates with useSubscription in Nuxt Apollo\nDESCRIPTION: This snippet demonstrates using useSubscription to interface with WebSocket-compliant GraphQL servers for real-time updates. It shows how to define a subscription query and variables to listen for updates.\nSOURCE: https://github.com/nuxt-modules/apollo/blob/v5/docs/content/1.getting-started/3.composables.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst query = gql`\n  subscription onMessageAdded($channelId: ID!) {\n    messageAdded(channelId: $channelId) {\n      id\n      text\n    }\n  }\n`\n\nconst variables = { channelId: 'abc' }\n\nconst { result } = useSubscription(query, variables)\n```\n\n----------------------------------------\n\nTITLE: Modifying Server Data with useMutation in Nuxt Apollo\nDESCRIPTION: This snippet demonstrates using useMutation composable to modify server-side data. It shows how to define a mutation query and variables, then access the mutate function to execute the operation.\nSOURCE: https://github.com/nuxt-modules/apollo/blob/v5/docs/content/1.getting-started/3.composables.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst query = gql`\n  mutation addUser ($input: UserInput!) {\n    addUser (input: $input) {\n      id\n    }\n  }\n`\n\nconst variables = {\n  name: 'John Doe',\n  email: 'jd@example.com'\n}\n\nconst { mutate } = useMutation(query, { variables })\n```\n\n----------------------------------------\n\nTITLE: Interactive GraphQL Queries with useQuery in Nuxt Apollo\nDESCRIPTION: This snippet shows how to use useQuery for interactive data fetching in any scenario, making it more suitable than useAsyncQuery for user interactions. It returns the query result directly from the GraphQL server.\nSOURCE: https://github.com/nuxt-modules/apollo/blob/v5/docs/content/1.getting-started/3.composables.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst query = gql`\n  query getShips($limit: Int!) {\n    ships(limit: $limit) {\n      id\n    }\n  }\n`\n\nconst variables = { limit: 5 }\n\nconst { result } = useQuery(query, variables)\n```\n\n----------------------------------------\n\nTITLE: Example GraphQL Query Using Nuxt Apollo Composables\nDESCRIPTION: A Vue component example demonstrating how to use the Apollo composables to fetch data with GraphQL. This shows the use of the useAsyncQuery composable with a GraphQL query and variables.\nSOURCE: https://github.com/nuxt-modules/apollo/blob/v5/docs/content/1.getting-started/1.quick-start.md#2025-04-20_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <p>There are {{ data?.ships?.length || 0 }} ships.</p>\n</template>\n\n<script lang=\"ts\" setup>\nconst query = gql`\n  query getShips($limit: Int!) {\n    ships(limit: $limit) {\n      id\n      name\n    }\n  }\n`\nconst variables = { limit: 5 }\n\nconst { data } = await useAsyncQuery(query, variables)\n</script>\n```\n\n----------------------------------------\n\nTITLE: Querying GraphQL with useAsyncQuery in Nuxt Apollo\nDESCRIPTION: This snippet shows how to use useAsyncQuery to fetch data from a GraphQL server during initial page load. It wraps Nuxt's useAsyncData and extracts the data property from the GraphQL query result.\nSOURCE: https://github.com/nuxt-modules/apollo/blob/v5/docs/content/1.getting-started/3.composables.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst query = gql`\nquery getShips($limit: Int!) {\n  ships(limit: $limit) {\n    id\n  }\n}`\n\nconst { data } = await useAsyncQuery(query, { limit: 2 })\n\nif (data.value?.ships) {\n  // log response\n  console.log(data.value.ships)\n}\n```\n\n----------------------------------------\n\nTITLE: Lazily Loading GraphQL Queries with useLazyAsyncQuery in Nuxt Apollo\nDESCRIPTION: This snippet demonstrates useLazyAsyncQuery for non-blocking, lazy loading of GraphQL queries. Unlike useAsyncQuery, this composable doesn't block execution, requiring manual handling of null states.\nSOURCE: https://github.com/nuxt-modules/apollo/blob/v5/docs/content/1.getting-started/3.composables.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst query = gql`\n  query currentUser { \n    whoAmI { \n      id \n    }\n  }\n`\n\nconst { data } = await useLazyAsyncQuery(query)\n```\n\n----------------------------------------\n\nTITLE: Configuring Apollo Clients in nuxt.config.ts\nDESCRIPTION: Comprehensive configuration of Apollo clients directly in nuxt.config.ts, including HTTP/WebSocket endpoints, caching options, authentication, and DevTools integration.\nSOURCE: https://github.com/nuxt-modules/apollo/blob/v5/docs/content/1.getting-started/2.configuration.md#2025-04-20_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nexport default defineNuxtConfig({\n  modules: ['@nuxtjs/apollo'],\n\n  apollo: {\n    clients: {\n      default: {\n        httpEndpoint: '',\n        browserHttpEndpoint: '',\n        wsEndpoint: '',\n        httpLinkOptions: {},\n        wsLinkOptions: {},\n        wsEndpoint: '',\n        websocketsOnly: false,\n        connectToDevTools: false,\n        defaultOptions: {},\n        inMemoryCacheOptions: {},\n        tokenName: 'apollo:<client-name>.token',\n        tokenStorage: 'cookie',\n        authType: 'Bearer',\n        authHeader: 'Authorization'\n      },\n      other: './apollo/other.ts'\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Handling User Login with onLogin in Nuxt Apollo\nDESCRIPTION: Shows how to apply an authentication token to an Apollo client during a login flow using the onLogin helper function. By default, this function resets the Apollo client cache and re-executes all queries unless skipResetStore is set to true.\nSOURCE: https://github.com/nuxt-modules/apollo/blob/v5/docs/content/1.getting-started/4.auth-helpers.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst { onLogin } = useApollo()\n\nfunction handleLogin() {\n  // your login flow...\n\n  onLogin(token)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Pinia Store-Based Auth Hook in Nuxt Apollo\nDESCRIPTION: This plugin demonstrates how to integrate a Pinia store with Apollo authentication. It retrieves an auth token from a user store and applies it to Apollo client requests using the apollo:auth hook.\nSOURCE: https://github.com/nuxt-modules/apollo/blob/v5/docs/content/2.recipes/1.authentication.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {useUserStore} from \"~/store/user\"\n\nexport default defineNuxtPlugin((nuxtApp) => {\n  const userStore = useUserStore()\n  nuxtApp.hook(\"apollo:auth\", ({client, token}) => {\n    if (userStore.authToken) { \n      token.value = userStore.authToken\n    }\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Type Casting with GraphQL Queries in Nuxt Apollo (TypeScript)\nDESCRIPTION: Demonstrates how to type-cast GraphQL query results in Nuxt Apollo with TypeScript, defining a custom type for the query response data and passing it as a generic type parameter to useQuery and useAsyncQuery hooks.\nSOURCE: https://github.com/nuxt-modules/apollo/blob/v5/docs/content/2.recipes/3.typescript-support.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst query = gql`\n  query getShips($limit: Int!) {\n    ships(limit: $limit) {\n      id\n      name\n    }\n  }\n`\n\nconst variables = { limit: 5 }\n\ntype ShipsResult = {\n  ships: {\n    id?: string;\n    name: string;\n  }[]\n}\n\nuseQuery<ShipsResult>(query, variables)\nuseAsyncQuery<ShipsResult>(query, variables)\n```\n\n----------------------------------------\n\nTITLE: Configuring Apollo Client in Nuxt\nDESCRIPTION: Extended configuration that sets up an Apollo client with a GraphQL endpoint. This shows how to define client configurations including the HTTP endpoint for GraphQL requests.\nSOURCE: https://github.com/nuxt-modules/apollo/blob/v5/docs/content/1.getting-started/1.quick-start.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineNuxtConfig } from 'nuxt/config'\n\nexport default defineNuxtConfig({\n  modules: ['@nuxtjs/apollo'],\n\n  apollo: {\n    clients: {\n      default: {\n        httpEndpoint: 'https://spacex-production.up.railway.app'\n      }\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Apollo Error Hook in Nuxt Plugin\nDESCRIPTION: This snippet demonstrates how to create a Nuxt plugin that captures Apollo client errors using the 'apollo:error' hook. The hook allows for centralized error handling, logging, and custom error management for GraphQL operations.\nSOURCE: https://github.com/nuxt-modules/apollo/blob/v5/docs/content/2.recipes/2.error-handling.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtPlugin((nuxtApp) => {\n  nuxtApp.hook('apollo:error', (error) => {\n    console.error(error)\n\n    // Handle different error cases\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Using Authentication Helpers with useApollo in Nuxt Apollo\nDESCRIPTION: This snippet demonstrates how to use the useApollo composable to access authentication helpers and Apollo clients in a Nuxt application. It provides access to clients, getToken, onLogin, and onLogout functions.\nSOURCE: https://github.com/nuxt-modules/apollo/blob/v5/docs/content/1.getting-started/3.composables.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst { clients, getToken, onLogin, onLogout } = useApollo()\n```\n\n----------------------------------------\n\nTITLE: Retrieving Authentication Tokens with getToken in Nuxt Apollo\nDESCRIPTION: Demonstrates how to retrieve authentication tokens for Apollo clients using the getToken helper function. This function adheres to the apollo:auth hook and can retrieve tokens for the default client or a specified client.\nSOURCE: https://github.com/nuxt-modules/apollo/blob/v5/docs/content/1.getting-started/4.auth-helpers.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst { getToken } = useApollo()\n\nconst token = getToken()\n\nconst otherToken = getToken('<client_name>')\n```\n\n----------------------------------------\n\nTITLE: Handling User Logout with onLogout in Nuxt Apollo\nDESCRIPTION: Demonstrates how to remove an authentication token from an Apollo client during a logout flow using the onLogout helper function. This function can be configured to skip resetting the Apollo client cache.\nSOURCE: https://github.com/nuxt-modules/apollo/blob/v5/docs/content/1.getting-started/4.auth-helpers.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst { onLogout } = useApollo()\n\nfunction handleLogout() {\n  // your logout flow...\n\n  onLogout()\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Cookie-Based Auth Hook in Nuxt Apollo\nDESCRIPTION: This plugin implements the apollo:auth hook to provide custom authentication logic using cookies. It accesses a named cookie and applies its value as the authentication token for Apollo client requests.\nSOURCE: https://github.com/nuxt-modules/apollo/blob/v5/docs/content/2.recipes/1.authentication.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtPlugin((nuxtApp) => {\n  // access cookie for auth\n  const cookie = useCookie('<cookie_name>')\n\n  nuxtApp.hook('apollo:auth', ({ client, token }) => {\n    // `client` can be used to differentiate logic on a per client basis.\n\n    // apply apollo client token\n    token.value = '<secret_token>'\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring localStorage Token Storage in Nuxt Apollo\nDESCRIPTION: This snippet shows how to configure Nuxt Apollo to use localStorage for token storage instead of the default cookie storage. This is applied to the default Apollo client via the nuxt.config.ts file.\nSOURCE: https://github.com/nuxt-modules/apollo/blob/v5/docs/content/2.recipes/1.authentication.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  modules: ['@nuxtjs/apollo'],\n\n  apollo: {\n    clients: {\n      default: {\n        tokenStorage: 'localStorage',\n      }\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Cross-Domain Credentials in Nuxt Apollo\nDESCRIPTION: This example demonstrates how to configure the credentials option for Apollo HTTP link to allow sending cookies to third-party domains. This is necessary when the backend server is on a different domain than the client.\nSOURCE: https://github.com/nuxt-modules/apollo/blob/v5/docs/content/2.recipes/1.authentication.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  modules: ['@nuxtjs/apollo'],\n\n  apollo: {\n    clients: {\n      default: {\n        httpLinkOptions: {\n          credentials: 'include'\n        }\n      }\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Defining External Apollo Client Configuration\nDESCRIPTION: Creating a separate Apollo client configuration file using defineApolloClient helper, which allows for more modular and organized client setup.\nSOURCE: https://github.com/nuxt-modules/apollo/blob/v5/docs/content/1.getting-started/2.configuration.md#2025-04-20_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport { defineApolloClient } from '@nuxtjs/apollo/config'\n\nexport default defineApolloClient({\n  httpEndpoint: '',\n  browserHttpEndpoint: '',\n  wsEndpoint: '',\n  httpLinkOptions: {},\n  wsLinkOptions: {},\n  wsEndpoint: '',\n  websocketsOnly: false,\n  connectToDevTools: false,\n  defaultOptions: {},\n  inMemoryCacheOptions: {},\n  tokenName: 'apollo:<client-name>.token',\n  tokenStorage: 'cookie',\n  authType: 'Bearer',\n  authHeader: 'Authorization'\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Apollo Settings in Nuxt\nDESCRIPTION: Basic configuration setup for the Apollo module in Nuxt with default values for authentication, token storage, and client initialization.\nSOURCE: https://github.com/nuxt-modules/apollo/blob/v5/docs/content/1.getting-started/2.configuration.md#2025-04-20_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nexport default defineNuxtConfig({\n  modules: ['@nuxtjs/apollo'],\n\n  apollo: {\n    autoImports: true,\n    authType: 'Bearer',\n    authHeader: 'Authorization',\n    tokenStorage: 'cookie',\n    proxyCookies: true,\n    clients: {}\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: GraphQL Module Type Declarations in TypeScript\nDESCRIPTION: Creates type declarations for .gql and .graphql files to resolve TypeScript module import errors. Defines these files as exporting DocumentNode from graphql, allowing them to be properly imported in TypeScript projects.\nSOURCE: https://github.com/nuxt-modules/apollo/blob/v5/docs/content/2.recipes/3.typescript-support.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare module '*.gql' {\n  import { DocumentNode } from 'graphql'\n  const Schema: DocumentNode\n  export = Schema\n}\n\ndeclare module '*.graphql' {\n  import { DocumentNode } from 'graphql'\n  const Schema: DocumentNode\n  export = Schema\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Nuxt Apollo Module with Package Managers\nDESCRIPTION: Commands to install the Nuxt Apollo module as a development dependency using different package managers (Yarn, NPM, pnpm).\nSOURCE: https://github.com/nuxt-modules/apollo/blob/v5/docs/content/1.getting-started/1.quick-start.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add -D @nuxtjs/apollo@next\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm i -D @nuxtjs/apollo@next\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @nuxtjs/apollo@next --save-dev\n```\n\n----------------------------------------\n\nTITLE: Enabling Nuxt Apollo Module in Configuration\nDESCRIPTION: Basic configuration to enable the Nuxt Apollo module in the Nuxt application.\nSOURCE: https://github.com/nuxt-modules/apollo/blob/v5/docs/content/1.getting-started/1.quick-start.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineNuxtConfig } from 'nuxt/config'\n\nexport default defineNuxtConfig({\n  modules: ['@nuxtjs/apollo'],\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Nuxt Apollo Module\nDESCRIPTION: Command to install the Nuxt Apollo module using Yarn. This snippet shows how to add the module as a development dependency in a Nuxt project.\nSOURCE: https://github.com/nuxt-modules/apollo/blob/v5/docs/content/1.index.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add -D @nuxtjs/apollo@next\n```\n\n----------------------------------------\n\nTITLE: Running Docus Development Server\nDESCRIPTION: Command to start the development server for the Docus project, enabling live preview and hot module replacement.\nSOURCE: https://github.com/nuxt-modules/apollo/blob/v5/docs/README.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Cloning Docus Starter Template Using Nuxi\nDESCRIPTION: Command to initialize a new Docus application using the nuxtlabs/docus-starter template via npx nuxi.\nSOURCE: https://github.com/nuxt-modules/apollo/blob/v5/docs/README.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx nuxi init docus-app -t nuxtlabs/docus-starter\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Docus Project\nDESCRIPTION: Command to install all necessary dependencies for the Docus project using Yarn package manager.\nSOURCE: https://github.com/nuxt-modules/apollo/blob/v5/docs/README.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn install\n```\n\n----------------------------------------\n\nTITLE: Building Docus for Edge Side Rendering\nDESCRIPTION: Command to build the Docus application for Edge Side Rendering, which can be deployed to various serverless environments like Vercel, Netlify, or AWS.\nSOURCE: https://github.com/nuxt-modules/apollo/blob/v5/docs/README.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyarn build\n```\n\n----------------------------------------\n\nTITLE: Generating Static Site from Docus Project\nDESCRIPTION: Command to generate a static version of the Docus site. This creates HTML files in the .output/public directory that can be deployed to any static hosting service.\nSOURCE: https://github.com/nuxt-modules/apollo/blob/v5/docs/README.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nyarn generate\n```\n\n----------------------------------------\n\nTITLE: Previewing Docus Build Locally\nDESCRIPTION: Command to preview the built Docus application locally before deployment, allowing verification of the production build.\nSOURCE: https://github.com/nuxt-modules/apollo/blob/v5/docs/README.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nyarn preview\n```"
  }
]