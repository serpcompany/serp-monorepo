[
  {
    "owner": "gnome",
    "repo": "libadwaita",
    "content": "TITLE: Implementing Adaptive View Switching with AdwViewSwitcher and AdwBreakpoint in XML\nDESCRIPTION: This XML snippet demonstrates an adaptive UI pattern using AdwWindow with a child AdwBreakpoint that toggles the visibility and placement of view switchers depending on window width. It includes a toolbar with a header bar containing an AdwViewSwitcher for wide policy and a bottom AdwViewSwitcherBar. The AdwBreakpoint widget activates based on a maximum window width condition (550sp) and sets properties to reveal or hide widgets accordingly. Dependencies include Libadwaita widgets such as AdwWindow, AdwBreakpoint, AdwViewSwitcher, AdwViewSwitcherBar, and AdwViewStack.\nSOURCE: https://github.com/gnome/libadwaita/blob/main/doc/adaptive-layouts.md#_snippet_2\n\nLANGUAGE: XML\nCODE:\n```\n<object class=\"AdwWindow\">\n  <child>\n    <object class=\"AdwBreakpoint\">\n      <condition>max-width: 550sp</condition>\n      <setter object=\"switcher_bar\" property=\"reveal\">True</setter>\n      <setter object=\"header_bar\" property=\"title-widget\"/>\n    </object>\n  </child>\n  <property name=\"content\">\n    <object class=\"AdwToolbarView\">\n      <child type=\"top\">\n        <object class=\"AdwHeaderBar\" id=\"header_bar\">\n          <property name=\"title-widget\">\n            <object class=\"AdwViewSwitcher\">\n              <property name=\"stack\">stack</property>\n              <property name=\"policy\">wide</property>\n            </object>\n          </property>\n        </object>\n      </child>\n      <property name=\"content\">\n        <object class=\"AdwViewStack\" id=\"stack\"/>\n      </property>\n      <child type=\"bottom\">\n        <object class=\"AdwViewSwitcherBar\" id=\"switcher_bar\">\n          <property name=\"stack\">stack</property>\n        </object>\n      </child>\n    </object>\n  </property>\n</object>\n```\n\n----------------------------------------\n\nTITLE: Implementing Adaptive Layouts with AdwMultiLayoutView in XML\nDESCRIPTION: This XML snippet demonstrates using AdwMultiLayoutView to create an adaptive interface that switches between two layouts based on width. It defines two AdwLayout children named 'sidebar' (using AdwOverlaySplitView) and 'bottom-sheet' (using AdwBottomSheet). An AdwBreakpoint triggers when the width is 400sp or less, setting the AdwMultiLayoutView's 'layout-name' property to 'bottom-sheet'. AdwLayoutSlot widgets with matching IDs ('primary', 'secondary') ensure child widgets are placed correctly in either layout.\nSOURCE: https://github.com/gnome/libadwaita/blob/main/doc/adaptive-layouts.md#_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\n<object class=\"AdwWindow\">\n  <child>\n    <object class=\"AdwBreakpoint\">\n      <condition>max-width: 400sp</condition>\n      <setter object=\"multi_layout_view\" property=\"layout-name\">bottom-sheet</setter>\n    </object>\n  </child>\n  <property name=\"content\">\n    <object class=\"AdwMultiLayoutView\" id=\"multi_layout_view\">\n      <child>\n        <object class=\"AdwLayout\">\n          <property name=\"name\">sidebar</property>\n          <property name=\"content\">\n            <object class=\"AdwOverlaySplitView\">\n              <property name=\"sidebar-position\">end</property>\n              <property name=\"sidebar\">\n                <object class=\"AdwLayoutSlot\">\n                  <property name=\"id\">secondary</property>\n                </object>\n              </property>\n              <property name=\"content\">\n                <object class=\"AdwLayoutSlot\">\n                  <property name=\"id\">primary</property>\n                </object>\n              </property>\n            </object>\n          </property>\n        </object>\n      </child>\n      <child>\n        <object class=\"AdwLayout\">\n          <property name=\"name\">bottom-sheet</property>\n          <property name=\"content\">\n            <object class=\"AdwBottomSheet\">\n              <property name=\"open\">True</property>\n              <property name=\"content\">\n                <object class=\"AdwLayoutSlot\">\n                  <property name=\"id\">primary</property>\n                </object>\n              </property>\n              <property name=\"sheet\">\n                <object class=\"AdwLayoutSlot\">\n                  <property name=\"id\">secondary</property>\n                </object>\n              </property>\n            </object>\n          </property>\n        </object>\n      </child>\n      <child type=\"primary\">\n        <!-- primary child -->\n      </child>\n      <child type=\"secondary\">\n        <!-- secondary child -->\n      </child>\n    </object>\n  </property>\n</object>\n```\n\n----------------------------------------\n\nTITLE: Implementing Adaptive Sidebar with AdwNavigationSplitView in XML\nDESCRIPTION: This example shows how to migrate to the AdwNavigationSplitView for adaptive sidebars using GObject XML. It introduces AdwBreakpoint to collapse the view responsively, and replaces child arrangement with AdwNavigationPage widgets providing separate sidebar and content pages, each with an AdwToolbarView and a header bar. Dependencies include the Adwaita library and Gtk XML support. The snippet expects the presence of breakpoints using sp units for accessibility and references split_view using IDs in property setters.\nSOURCE: https://github.com/gnome/libadwaita/blob/main/doc/migrating-to-breakpoints.md#_snippet_7\n\nLANGUAGE: XML\nCODE:\n```\n<object class=\"AdwWindow\">\n  <child>\n    <object class=\"AdwBreakpoint\">\n      <condition>max-width: 400sp</condition>\n      <setter object=\"split_view\" property=\"collapsed\">True</setter>\n    </object>\n  </child>\n  <property name=\"content\">\n    <object class=\"AdwNavigationSplitView\" id=\"split_view\">\n      <property name=\"sidebar\">\n        <object class=\"AdwNavigationPage\">\n          <property name=\"title\" translatable=\"yes\">Sidebar</property>\n          <property name=\"child\">\n            <object class=\"AdwToolbarView\">\n              <child type=\"top\">\n                <object class=\"AdwHeaderBar\"/>\n              </child>\n              <property name=\"content\">\n                <!-- sidebar -->\n              </property>\n            </object>\n          </property>\n        </object>\n      </property>\n      <property name=\"content\">\n        <object class=\"AdwNavigationPage\">\n          <property name=\"title\" translatable=\"yes\">Content</property>\n          <property name=\"child\">\n            <object class=\"AdwToolbarView\">\n              <child type=\"top\">\n                <object class=\"AdwHeaderBar\"/>\n              </child>\n              <property name=\"content\">\n                <!-- content -->\n              </property>\n            </object>\n          </property>\n        </object>\n      </property>\n    </object>\n  </property>\n</object>\n```\n\n----------------------------------------\n\nTITLE: Migrating GtkWindow to AdwWindow with AdwToolbarView content XML layout\nDESCRIPTION: This snippet shows how to migrate a GtkWindow UI definition to an AdwWindow, embedding an AdwToolbarView as the main content. The header bar is inserted as a top bar, and window content is assigned to the content property of the AdwToolbarView. This approach supports breakpoints for adaptive layouts. Required dependencies include Libadwaita 1.4 and GTK XML UI infrastructure. The snippet also highlights setting minimal window sizes via properties like width-request and height-request to ensure contents fit within adaptive breakpoints. Inputs are existing GtkWindow UIs, outputs updated AdwWindow UIs facilitating breakpoints and adaptive behavior.\nSOURCE: https://github.com/gnome/libadwaita/blob/main/doc/migrating-to-breakpoints.md#_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<object class=\"GtkWindow\">\n  <property name=\"titlebar\">\n    <!-- titlebar -->\n  </property>\n  <property name=\"child\">\n    <!-- content -->\n  </property>\n</object>\n```\n\nLANGUAGE: XML\nCODE:\n```\n<object class=\"AdwWindow\">\n  <property name=\"content\">\n    <object class=\"AdwToolbarView\">\n      <child type=\"top\">\n        <!-- titlebar -->\n      </child>\n      <property name=\"content\">\n        <!-- content -->\n    </object>\n  </property>\n</object>\n```\n\n----------------------------------------\n\nTITLE: Declaring a Property Row with Adwaita Style in XML\nDESCRIPTION: This XML snippet defines an AdwActionRow widget styled as a 'property' row in libadwaita. It demonstrates setting a title and a selectable subtitle, and applying the '.property' style class which deemphasizes the title and emphasizes the subtitle, suitable for displaying read-only properties in GTK applications. The snippet requires GTK 4 and libadwaita 1.4 or later.\nSOURCE: https://github.com/gnome/libadwaita/blob/main/doc/style-classes.md#_snippet_3\n\nLANGUAGE: XML\nCODE:\n```\n<object class=\"AdwActionRow\">\n  <property name=\"title\" translatable=\"yes\">Property Name</property>\n  <property name=\"subtitle\">Value</property>\n  <property name=\"subtitle-selectable\">True</property>\n  <style>\n    <class name=\"property\"/>\n  </style>\n</object>\n```\n\n----------------------------------------\n\nTITLE: Replacing GtkHeaderBar with AdwHeaderBar XML snippet\nDESCRIPTION: This snippet migrates a GtkHeaderBar to AdwHeaderBar in the UI definition XML, replacing the boolean property show-title-buttons on GtkHeaderBar with two finer-grained boolean properties on AdwHeaderBar: show-start-title-buttons and show-end-title-buttons. This provides improved integration with adaptive widgets in Libadwaita. Dependencies include Libadwaita 1.4. Inputs are GTK XML UI header bar definitions, outputs are updated header bars better suited for adaptive usage.\nSOURCE: https://github.com/gnome/libadwaita/blob/main/doc/migrating-to-breakpoints.md#_snippet_3\n\nLANGUAGE: XML\nCODE:\n```\n<object class=\"GtkHeaderBar\">\n  <property name=\"show-title-buttons\">False</property>\n</object>\n```\n\nLANGUAGE: XML\nCODE:\n```\n<object class=\"AdwHeaderBar\">\n  <property name=\"show-start-title-buttons\">False</property>\n  <property name=\"show-end-title-buttons\">False</property>\n</object>\n```\n\n----------------------------------------\n\nTITLE: Defining New Window Structure with AdwToolbarView XML\nDESCRIPTION: This GtkBuilder XML snippet shows the recommended structure for an `AdwWindow` when migrating to Libadwaita 1.5. It utilizes the `AdwToolbarView` as the window's `content`, allowing the header bar (`AdwHeaderBar`) to be placed as a top child and the action bar (`GtkActionBar`) as a bottom child, managed directly by the toolbar view.\nSOURCE: https://github.com/gnome/libadwaita/blob/main/doc/migrating-to-adaptive-dialogs.md#_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<object class=\"AdwWindow\">\n  <property name=\"content\">\n    <object class=\"AdwToolbarView\">\n      <child type=\"top\">\n        <object class=\"AdwHeaderBar\"/>\n      </child>\n      <property name=\"content\">\n        <!-- content -->\n      </property>\n      <child type=\"bottom\">\n        <object class=\"GtkActionBar\"/>\n      </child>\n    </object>\n  </property>\n</object>\n```\n\n----------------------------------------\n\nTITLE: Defining Constrained Layout Using AdwClamp in XML\nDESCRIPTION: This snippet demonstrates the use of the AdwClamp widget in XML, which restricts the maximum size of its single child while allowing it to shrink when space is limited. It is typically used to create boxed list layouts with adaptive margins and paddings. The snippet includes a vertical GtkBox with margins and spacing containing a GtkListBox with no selection mode and a boxed-list style for rows. Dependencies include Libadwaita and GTK for the respective widgets.\nSOURCE: https://github.com/gnome/libadwaita/blob/main/doc/adaptive-layouts.md#_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<object class=\"AdwClamp\">\n  <property name=\"child\">\n    <object class=\"GtkBox\">\n      <property name=\"orientation\">vertical</property>\n      <property name=\"margin-top\">24</property>\n      <property name=\"margin-bottom\">24</property>\n      <property name=\"margin-start\">12</property>\n      <property name=\"margin-end\">12</property>\n      <property name=\"spacing\">24</property>\n      <child>\n        <object class=\"GtkListBox\">\n          <property name=\"selection-mode\">none</property>\n          <style>\n            <class name=\"boxed-list\"/>\n          </style>\n          <!-- rows -->\n        </object>\n      </child>\n      <!-- more lists -->\n    </object>\n  </property>\n</object>\n```\n\n----------------------------------------\n\nTITLE: Setting Border Color using CSS\nDESCRIPTION: This CSS snippet demonstrates how to apply a border to a widget using the `.frame` style class. It utilizes the CSS variable `--border-color` to define the border color, providing a default border appearance to the widget.\nSOURCE: https://github.com/gnome/libadwaita/blob/main/doc/style-classes.md#_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n.frame {\n  border: 1px solid var(--border-color);\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Libadwaita Dependency with Version and Options in Meson\nDESCRIPTION: Meson build snippet showing how to declare the Libadwaita dependency with explicit version requirement (>= 1.0.0) and fallback configuration. It disables examples, introspection, tests, and Vala API generation through default options and enables using fallback subproject if the system version is unavailable. Dependencies are assigned to the variable 'libadwaita' for further use in the build.\nSOURCE: https://github.com/gnome/libadwaita/blob/main/doc/build-howto.md#_snippet_3\n\nLANGUAGE: meson\nCODE:\n```\nlibadwaita = dependency(\n  'libadwaita-1',\n  version: '>= 1.0.0',\n  fallback: ['libadwaita', 'libadwaita_dep'],\n  default_options: [\n    'examples=false',\n    'introspection=disabled',\n    'tests=false',\n    'vapi=false',\n  ]\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Background Color and Foreground Color using CSS\nDESCRIPTION: This CSS snippet demonstrates how to set the background and foreground colors of a widget using the `.background` style class. It utilizes CSS variables `--window-bg-color` and `--window-fg-color` for the respective colors, providing an opaque background and matching foreground color.\nSOURCE: https://github.com/gnome/libadwaita/blob/main/doc/style-classes.md#_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.background {\n  background-color: var(--window-bg-color);\n  color: var(--window-fg-color);\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Libadwaita Dependency with Meson Build System in Meson\nDESCRIPTION: Shows how to declare a Libadwaita dependency using the Meson build system by specifying the 'libadwaita-1' package. This snippet uses Meson\\'s dependency function, targeting Libadwaita API version 1, facilitating integration of the library in Meson-based projects. No external dependencies besides Meson and pkg-config are specifically required here.\nSOURCE: https://github.com/gnome/libadwaita/blob/main/doc/build-howto.md#_snippet_0\n\nLANGUAGE: meson\nCODE:\n```\ndependency('libadwaita-1')\n```\n\n----------------------------------------\n\nTITLE: Setting minimal size for AdwWindow to support breakpoints XML example\nDESCRIPTION: This snippet sets the minimal size on an AdwWindow to recommended dimensions (360x294) for proper breakpoint functionality supporting phone portrait and landscape modes. The defined width-request and height-request ensure the contained widgets fully fit within the breakpoint constraints. This avoids content overflow and warnings during resize. Dependencies are AdwWindow and Libadwaita 1.4. Inputs are window UI definitions, outputs a window guaranteed to honor breakpoints without content clipping.\nSOURCE: https://github.com/gnome/libadwaita/blob/main/doc/migrating-to-breakpoints.md#_snippet_2\n\nLANGUAGE: XML\nCODE:\n```\n<object class=\"AdwWindow\">\n  <property name=\"width-request\">360</property>\n  <property name=\"height-request\">294</property>\n  <property name=\"content\">\n    <object class=\"AdwToolbarView\">\n      <child type=\"top\">\n        <!-- titlebar -->\n      </child>\n      <property name=\"content\">\n        <!-- content -->\n    </object>\n  </property>\n</object>\n```\n\n----------------------------------------\n\nTITLE: Defining a Boxed List Using GtkListBox in XML\nDESCRIPTION: This XML snippet shows how to declare a boxed list using GtkListBox, set its selection mode to 'none', and apply the '.boxed-list' style class for correct layout in Libadwaita. Each child leverages AdwActionRow to define interactive rows, each with a distinct title property. Dependencies include GTK, libadwaita, and appropriate style class support. Inputs are static action rows defined as children, with titles set for each list item. The output is a styled, non-selectable boxed list UI component as per GNOME HIG guidelines.\nSOURCE: https://github.com/gnome/libadwaita/blob/main/doc/boxed-lists.md#_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<object class=\"GtkListBox\">\n  <property name=\"selection-mode\">none</property>\n  <style>\n    <class name=\"boxed-list\"/>\n  </style>\n  <child>\n    <object class=\"AdwActionRow\">\n      <property name=\"title\">Item 1</property>\n    </object>\n  </child>\n  <child>\n    <object class=\"AdwActionRow\">\n      <property name=\"title\">Item 2</property>\n    </object>\n  </child>\n  <child>\n    <object class=\"AdwActionRow\">\n      <property name=\"title\">Item 3</property>\n    </object>\n  </child>\n</object>\n\n```\n\n----------------------------------------\n\nTITLE: Configuring NavigationSplitView with Adaptive Collapsing Using AdwBreakpoint in XML\nDESCRIPTION: This snippet shows how to define an adaptive multi-pane layout using AdwWindow with an embedded AdwBreakpoint controlling the collapsed state of an AdwNavigationSplitView based on window width (max-width 400sp). The split view consists of two AdwNavigationPage children: sidebar and content, each containing an AdwToolbarView with a header bar and a content placeholder. AdwNavigationSplitView transitions to a NavigationView when collapsed, showing the sidebar as the root page. Dependencies include Libadwaita's AdwWindow, AdwBreakpoint, AdwNavigationSplitView, AdwNavigationPage, and AdwToolbarView widgets.\nSOURCE: https://github.com/gnome/libadwaita/blob/main/doc/adaptive-layouts.md#_snippet_3\n\nLANGUAGE: XML\nCODE:\n```\n<object class=\"AdwWindow\">\n  <child>\n    <object class=\"AdwBreakpoint\">\n      <condition>max-width: 400sp</condition>\n      <setter object=\"split_view\" property=\"collapsed\">True</setter>\n    </object>\n  </child>\n  <property name=\"content\">\n    <object class=\"AdwNavigationSplitView\" id=\"split_view\">\n      <property name=\"sidebar\">\n        <object class=\"AdwNavigationPage\">\n          <property name=\"title\" translatable=\"yes\">Sidebar</property>\n          <property name=\"tag\">sidebar</property>\n          <property name=\"child\">\n            <object class=\"AdwToolbarView\">\n              <child type=\"top\">\n                <object class=\"AdwHeaderBar\"/>\n              </child>\n              <property name=\"content\">\n                <!-- sidebar -->\n              </property>\n            </object>\n          </property>\n        </object>\n      </property>\n      <property name=\"content\">\n        <object class=\"AdwNavigationPage\">\n          <property name=\"title\" translatable=\"yes\">Content</property>\n          <property name=\"tag\">content</property>\n          <property name=\"child\">\n            <object class=\"AdwToolbarView\">\n              <child type=\"top\">\n                <object class=\"AdwHeaderBar\"/>\n              </child>\n              <property name=\"content\">\n                <!-- content -->\n              </property>\n            </object>\n          </property>\n        </object>\n      </property>\n    </object>\n  </property>\n</object>\n```\n\n----------------------------------------\n\nTITLE: Creating a Property Row with AdwActionRow in XML\nDESCRIPTION: This XML snippet demonstrates defining a property row with AdwActionRow that deemphasizes its title and highlights the subtitle for read-only data display. The style class 'property' enables the correct visual treatment, and properties like 'subtitle-selectable' allow copying of the value text. Mandatory dependencies include AdwActionRow support and the relevant style class. Key parameters are 'title' for the property label and 'subtitle' for the value to show, both of which are read-only. Outputs a stylized, non-editable row suitable for property display in boxed lists.\nSOURCE: https://github.com/gnome/libadwaita/blob/main/doc/boxed-lists.md#_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<object class=\"AdwActionRow\">\n  <property name=\"title\" translatable=\"yes\">Property Name</property>\n  <property name=\"subtitle\">Value</property>\n  <property name=\"subtitle-selectable\">True</property>\n  <style>\n    <class name=\"property\"/>\n  </style>\n</object>\n\n```\n\n----------------------------------------\n\nTITLE: Installing Build Dependencies on macOS with Homebrew in Bash\nDESCRIPTION: A Bash command line snippet to install necessary build tools and dependencies on macOS for building Libadwaita. Uses Homebrew package manager to install pkg-config, GTK4, Meson, gobject-introspection, and Vala compiler. Prerequisite for compiling Libadwaita on macOS platforms.\nSOURCE: https://github.com/gnome/libadwaita/blob/main/doc/build-howto.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nbrew install pkg-config gtk4 meson gobject-introspection vala\n```\n\n----------------------------------------\n\nTITLE: Using Standalone Color Variable\nDESCRIPTION: This CSS snippet demonstrates how to use the standalone version of the accent color. Standalone colors are used as foreground colors on top of a neutral background. The example shows how to apply the `--accent-color` variable to the `color` property of a widget.\nSOURCE: https://github.com/gnome/libadwaita/blob/main/doc/css-variables.md#_snippet_2\n\nLANGUAGE: css\nCODE:\n```\nmy-widget {\n  color: var(--accent-color);\n}\n```\n\n----------------------------------------\n\nTITLE: Building libadwaita with Meson and Ninja\nDESCRIPTION: This snippet demonstrates the basic steps for building libadwaita using Meson and Ninja. It initializes the build environment, compiles the code, and installs the library.  Requires Meson and Ninja to be installed.\nSOURCE: https://github.com/gnome/libadwaita/blob/main/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nmeson setup _build\nninja -C _build\nninja -C _build install\n```\n\n----------------------------------------\n\nTITLE: Building libadwaita with Documentation Enabled\nDESCRIPTION: This snippet demonstrates how to build libadwaita with documentation enabled using Meson and Ninja. It sets the `documentation` option to `true` during the Meson setup. Requires Meson and Ninja to be installed.\nSOURCE: https://github.com/gnome/libadwaita/blob/main/README.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nmeson setup _build -Ddocumentation=true\nninja -C _build\n```\n\n----------------------------------------\n\nTITLE: Replacing GtkBox with AdwToolbarView XML layout\nDESCRIPTION: This snippet demonstrates how to migrate a GtkBox container layout into AdwToolbarView in XML UI definitions. It shows moving from a vertical GtkBox containing an AdwHeaderBar and a content widget with vexpand=true, to an AdwToolbarView with the header bar added as a top bar and the content set via the content property. Dependencies include Libadwaita 1.4 and understanding of GTK UI XML syntax. Inputs are UI layout widgets, outputs are updated UI definitions. It enables correct header bar style and toolbar handling in sidebars, removing the need for vexpand on the content widget.\nSOURCE: https://github.com/gnome/libadwaita/blob/main/doc/migrating-to-breakpoints.md#_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<object class=\"GtkBox\">\n  <property name=\"orientation\">vertical</property>\n  <child>\n    <object class=\"AdwHeaderBar\">\n      <!-- ... -->\n    </object>\n  </child>\n  <child>\n    <object class=\"...\">\n      <property name=\"vexpand\">True</property>\n      <!-- ... -->\n    </object>\n  </child>\n</object>\n```\n\nLANGUAGE: XML\nCODE:\n```\n<object class=\"AdwToolbarView\">\n  <child type=\"top\">\n    <object class=\"AdwHeaderBar\">\n      <!-- ... -->\n    </object>\n  </child>\n  <property name=\"content\">\n    <object class=\"...\">\n      <!-- ... -->\n    </object>\n  </property>\n</object>\n```\n\n----------------------------------------\n\nTITLE: Sidebar Color Variables in CSS\nDESCRIPTION: CSS color variables used for sidebars attached to the left or right sides of a window in Libadwaita, with values for both light and dark themes.\nSOURCE: https://github.com/gnome/libadwaita/blob/main/doc/css-variables.md#_snippet_6\n\nLANGUAGE: CSS\nCODE:\n```\n--sidebar-bg-color: #ebebed; /* Light theme: light gray, Dark theme: #2e2e32 */\n--sidebar-fg-color: rgb(0 0 6 / 80%); /* Light theme: semi-transparent black, Dark theme: white */\n--sidebar-backdrop-color: #f2f2f4; /* Light theme: light gray, Dark theme: #28282c */\n--sidebar-border-color: rgb(0 0 6 / 7%); /* Light theme: 7% black, Dark theme: 36% black */\n--sidebar-shade-color: rgb(0 0 6 / 7%); /* Light theme: 7% black, Dark theme: 25% black */\n```\n\n----------------------------------------\n\nTITLE: Defining Adaptive Sidebar Layout with AdwLeaflet in XML\nDESCRIPTION: This snippet illustrates the use of an AdwLeaflet with associated header bars and content arrangements to construct an adaptive sidebar layout using GObject XML UI notation. Dependencies include GNOME's Adwaita and Gtk 4.0 UI definitions. Key properties such as can-navigate-back and custom bindings are in use, while header bars manage the window button visibility based on the leaflet's folded state. This serves as the legacy approach prior to using AdwNavigationSplitView.\nSOURCE: https://github.com/gnome/libadwaita/blob/main/doc/migrating-to-breakpoints.md#_snippet_6\n\nLANGUAGE: XML\nCODE:\n```\n<object class=\"AdwWindow\">\n  <property name=\"content\">\n    <object class=\"AdwLeaflet\" id=\"leaflet\">\n      <property name=\"can-navigate-back\">True</property>\n      <child>\n        <object class=\"AdwToolbarView\">\n          <child type=\"top\">\n            <object class=\"AdwHeaderBar\">\n              <property name=\"show-end-title-buttons\"\n                              bind-object=\"leaflet\"\n                              bind-property=\"folded\"\n                              bind-flags=\"sync-create\"/>\n              <property name=\"title-widget\">\n                <object class=\"AdwWindowTitle\">\n                  <property name=\"title\" translatable=\"yes\">Sidebar</property>\n                </object>\n              </property>\n            </object>\n          </child>\n          <property name=\"content\">\n            <!-- sidebar -->\n          </property>\n        </object>\n      </child>\n      <child>\n        <object class=\"AdwLeafletPage\">\n          <property name=\"navigatable\">False</property>\n          <property name=\"child\">\n            <object class=\"GtkSeparator\"/>\n          </property>\n        </object>\n      </child>\n      <child>\n        <object class=\"AdwToolbarView\">\n          <property name=\"hexpand\">True</property>\n          <child type=\"top\">\n            <object class=\"AdwHeaderBar\">\n              <property name=\"show-start-title-buttons\"\n                              bind-object=\"leaflet\"\n                              bind-property=\"folded\"\n                              bind-flags=\"sync-create\"/>\n              <child type=\"start\">\n                <object class=\"GtkButton\">\n                  <property name=\"visible\"\n                                  bind-object=\"leaflet\"\n                                  bind-property=\"folded\"\n                                  bind-flags=\"sync-create\"/>\n                  <property name=\"icon-name\">go-previous-symbolic</property>\n                </object>\n              </child>\n              <property name=\"title-widget\">\n                <object class=\"AdwWindowTitle\">\n                  <property name=\"title\" translatable=\"yes\">Content</property>\n                </object>\n              </property>\n            </object>\n          </child>\n          <property name=\"content\">\n            <!-- content -->\n          </property>\n        </object>\n      </child>\n    </object>\n  </property>\n</object>\n```\n\n----------------------------------------\n\nTITLE: Integrating Utility Pane with AdwFlap in XML\nDESCRIPTION: This snippet provides a sample for constructing a utility pane using AdwFlap inside an AdwToolbarView and manipulating the reveal-flap property by binding it to a GtkToggleButton's active state, as defined in GObject XML. It shows usage prior to the OverlaySplitView approach, and highlights dependency on Adwaita UI XML, Gtk 4, and proper binding configuration. The pane supports main content and an auxiliary utility region, with optional separator support.\nSOURCE: https://github.com/gnome/libadwaita/blob/main/doc/migrating-to-breakpoints.md#_snippet_8\n\nLANGUAGE: XML\nCODE:\n```\n<object class=\"AdwWindow\">\n  <property name=\"content\">\n    <object class=\"AdwToolbarView\">\n      <property name=\"top-bar-style\">raised</property>\n      <child type=\"top\">\n        <object class=\"AdwHeaderBar\">\n          <object class=\"GtkToggleButton\" id=\"toggle_pane_button\">\n            <property name=\"icon-name\">sidebar-show-symbolic</property>\n            <property name=\"active\">True</property>\n          </object>\n        </object>\n      </child>\n      <property name=\"content\">\n        <object class=\"AdwFlap\">\n          <property name=\"reveal-flap\"\n                    bind-source=\"toggle_pane_button\"\n                    bind-property=\"active\"\n                    bind-flags=\"sync-create|bidirectional\"/>\n          <property name=\"flap\">\n            <!-- utility pane -->\n          </property>\n          <property name=\"separator\">\n            <object class=\"GtkSeparator\"/>\n          </property>\n          <property name=\"content\">\n            <!-- main view -->\n          </property>\n        </object>\n\n      </property>\n    </object>\n  </property>\n</object>\n```\n\n----------------------------------------\n\nTITLE: Toggling Button Visibility with Breakpoint - XML\nDESCRIPTION: This snippet demonstrates how to toggle the visibility of a button using a breakpoint. The button controls the visibility of a utility pane. The breakpoint sets the `visible` property of the toggle button to `True` only on smaller screens (max-width: 400sp) by using the setter and condition combination within the `AdwBreakpoint` object. The `toggle_pane_button` is initially hidden.\nSOURCE: https://github.com/gnome/libadwaita/blob/main/doc/adaptive-layouts.md#_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<object class=\"AdwBreakpoint\">\n  <condition>max-width: 400sp</condition>\n  <setter object=\"split_view\" property=\"collapsed\">True</setter>\n  <setter object=\"toggle_pane_button\" property=\"visible\">True</setter>\n</object>\n<!-- ... -->\n<object class=\"GtkToggleButton\" id=\"toggle_pane_button\">\n  <property name=\"icon-name\">sidebar-show-symbolic</property>\n  <property name=\"active\">True</property>\n  <property name=\"visible\">False</property>\n</object>\n```\n\n----------------------------------------\n\nTITLE: Defining Adaptive Tabs with AdwTabView and Breakpoints in XML\nDESCRIPTION: This XML snippet defines an adaptive tab interface using AdwTabView as the core container. It integrates AdwTabOverview, AdwTabBar, AdwHeaderBar, and AdwTabButton. An AdwBreakpoint is used to modify the UI when the width is 500px or less: it hides the AdwTabBar and a 'new tab' button, making an 'overview' button visible instead, effectively switching to an overview mode for narrow views.\nSOURCE: https://github.com/gnome/libadwaita/blob/main/doc/adaptive-layouts.md#_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<object class=\"AdwWindow\">\n  <child>\n    <object class=\"AdwBreakpoint\">\n      <condition>max-width: 500px</condition>\n      <setter object=\"overview_btn\" property=\"visible\">True</setter>\n      <setter object=\"new_tab_btn\" property=\"visible\">False</setter>\n      <setter object=\"tab_bar\" property=\"visible\">False</setter>\n    </object>\n  </child>\n  <property name=\"content\">\n    <object class=\"AdwTabOverview\">\n      <property name=\"view\">view</property>\n      <property name=\"enable-new-tab\">True</property>\n      <property name=\"child\">\n        <object class=\"AdwToolbarView\">\n          <property name=\"top-bar-style\">raised</property>\n          <child type=\"top\">\n            <object class=\"AdwHeaderBar\">\n              <child type=\"end\">\n                <object class=\"AdwTabButton\" id=\"overview_btn\">\n                  <property name=\"visible\">False</property>\n                  <property name=\"view\">view</property>\n                  <property name=\"action-name\">overview.open</property>\n                </object>\n              </child>\n              <child type=\"end\">\n                <object class=\"GtkButton\" id=\"new_tab_btn\">\n                  <property name=\"icon-name\">tab-new-symbolic</property>\n                </object>\n              </child>\n            </object>\n          </child>\n          <child type=\"top\">\n            <object class=\"AdwTabBar\" id=\"tab_bar\">\n              <property name=\"view\">view</property>\n            </object>\n          </child>\n          <property name=\"content\">\n            <object class=\"AdwTabView\" id=\"view\"/>\n          </property>\n        </object>\n      </property>\n    </object>\n  </property>\n</object>\n```\n\n----------------------------------------\n\nTITLE: Creating Nested NavigationSplitView - XML\nDESCRIPTION: This snippet demonstrates how to create a triple-pane layout by nesting two `AdwNavigationSplitView` widgets.  The inner `AdwNavigationSplitView` is placed within the sidebar of the outer `AdwNavigationSplitView`. Breakpoints are used to collapse the outer view and also to adjust the `sidebar-width-fraction` property of the inner view for adaptive behavior. The sidebar widths are also controlled by `min-sidebar-width` and `max-sidebar-width` properties.\nSOURCE: https://github.com/gnome/libadwaita/blob/main/doc/adaptive-layouts.md#_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<object class=\"AdwWindow\">\n  <child>\n    <object class=\"AdwBreakpoint\">\n      <condition>max-width: 860sp</condition>\n      <setter object=\"outer_view\" property=\"collapsed\">True</setter>\n      <setter object=\"inner_view\" property=\"sidebar-width-fraction\">0.33</setter>\n    </object>\n  </child>\n  <child>\n    <object class=\"AdwBreakpoint\">\n      <condition>max-width: 500sp</condition>\n      <setter object=\"outer_view\" property=\"collapsed\">True</setter>\n      <setter object=\"inner_view\" property=\"sidebar-width-fraction\">0.33</setter>\n      <setter object=\"inner_view\" property=\"collapsed\">True</setter>\n    </object>\n  </child>\n  <property name=\"content\">\n    <object class=\"AdwNavigationSplitView\" id=\"outer_view\">\n      <property name=\"min-sidebar-width\">470</property>\n      <property name=\"max-sidebar-width\">780</property>\n      <property name=\"sidebar-width-fraction\">0.47</property>\n      <property name=\"sidebar\">\n        <object class=\"AdwNavigationPage\">\n          <property name=\"child\">\n            <object class=\"AdwNavigationSplitView\" id=\"inner_view\">\n              <property name=\"max-sidebar-width\">260</property>\n              <property name=\"sidebar-width-fraction\">0.38</property>\n              <property name=\"sidebar\">\n                <!-- sidebar -->\n              </property>\n              <property name=\"content\">\n                <!-- middle pane -->\n              </property>\n            </object>\n          </property>\n        </object>\n      </property>\n      <property name=\"content\">\n        <!-- content -->\n      </property>\n    </object>\n  </property>\n</object>\n```\n\n----------------------------------------\n\nTITLE: Flatpak Manifest Module for Bundling Libadwaita Library in JSON\nDESCRIPTION: Defines a JSON snippet for a Flatpak manifest to build and bundle the Libadwaita library along with its dependencies 'libsass' and 'sassc'. It specifies Git repositories and branches for each, disables building examples and tests via Meson configuration options, and uses Meson as the build system. Intended for inclusion in Flatpak manifests requiring Libadwaita on systems without native support.\nSOURCE: https://github.com/gnome/libadwaita/blob/main/doc/build-howto.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\" : \"libadwaita\",\n    \"buildsystem\" : \"meson\",\n    \"config-opts\" : [\n        \"-Dexamples=false\",\n        \"-Dtests=false\"\n    ],\n    \"sources\" : [\n        {\n            \"type\" : \"git\",\n            \"url\" : \"https://gitlab.gnome.org/GNOME/libadwaita.git\",\n            \"branch\" : \"main\"\n        }\n    ],\n    \"modules\" : [\n        {\n            \"name\" : \"libsass\",\n            \"buildsystem\" : \"meson\",\n            \"cleanup\" : [\n                \"*\"\n            ],\n            \"sources\" : [\n                {\n                    \"type\" : \"git\",\n                    \"url\" : \"https://github.com/lazka/libsass.git\",\n                    \"branch\" : \"meson\"\n                }\n            ]\n        },\n        {\n            \"name\" : \"sassc\",\n            \"buildsystem\" : \"meson\",\n            \"cleanup\" : [\n                \"*\"\n            ],\n            \"sources\" : [\n                {\n                    \"type\" : \"git\",\n                    \"url\" : \"https://github.com/lazka/sassc.git\",\n                    \"branch\" : \"meson\"\n                }\n            ]\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Suggested Action Button Style Using CSS in libadwaita\nDESCRIPTION: This CSS snippet illustrates how to create a custom suggested action button style by combining the '.opaque' style class with customized background and foreground colors using CSS variables. It overrides the button's default appearance to mimic the '.suggested-action' style but with user-defined colors. This example assumes the button has the ID 'custom-suggested-action-button'.\nSOURCE: https://github.com/gnome/libadwaita/blob/main/doc/style-classes.md#_snippet_4\n\nLANGUAGE: CSS\nCODE:\n```\n#custom-suggested-action-button {\n  background-color: var(--accent-bg-color);\n  color: var(--accent-fg-color);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Libadwaita as a Meson Subproject with Wrap File in INI\nDESCRIPTION: Provides the contents of a 'subprojects/libadwaita.wrap' file for using Libadwaita as a Meson subproject dependency. It specifies a Git repository URL, the main branch, depth of clone, and directory name. This enables fallback dependency resolution within Meson builds. Requires Meson build system and Git to fetch the subproject.\nSOURCE: https://github.com/gnome/libadwaita/blob/main/doc/build-howto.md#_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[wrap-git]\ndirectory=libadwaita\nurl=https://gitlab.gnome.org/GNOME/libadwaita.git\nrevision=main\ndepth=1\n```\n\n----------------------------------------\n\nTITLE: Running the Adwaita Demo\nDESCRIPTION: This snippet demonstrates how to run the adwaita demo application after building. It assumes the demo has been built and is located in the `_build/demo` directory.  It requires the adwaita library to be built.\nSOURCE: https://github.com/gnome/libadwaita/blob/main/README.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n_build/run _build/demo/adwaita-1-demo\n```\n\n----------------------------------------\n\nTITLE: Defining AdwViewSwitcherTitle in GNOME UI (XML)\nDESCRIPTION: This code snippet demonstrates the previous method of using AdwViewSwitcherTitle within an AdwWindow and AdwToolbarView. Dependencies include Gtk, AdwToolbarView, AdwHeaderBar, AdwViewSwitcherTitle, AdwViewStack, and AdwViewSwitcherBar. The example sets up window sizing, stacks components, and manages dynamic title display and view switching. Expected input is a GtkBuilder XML UI file; outputs are the constructed GTK widgets in the running application.\nSOURCE: https://github.com/gnome/libadwaita/blob/main/doc/migrating-to-breakpoints.md#_snippet_10\n\nLANGUAGE: XML\nCODE:\n```\n<object class=\"AdwWindow\">\n  <property name=\"width-request\">360</property>\n  <property name=\"height-request\">294</property>\n  <property name=\"content\">\n    <object class=\"AdwToolbarView\">\n      <child type=\"top\">\n        <object class=\"AdwHeaderBar\">\n          <property name=\"centering-policy\">strict</property>\n          <property name=\"title-widget\">\n            <object class=\"AdwViewSwitcherTitle\" id=\"title\">\n              <property name=\"stack\">stack</property>\n              <property name=\"title\" translatable=\"yes\">Title</property>\n            </object>\n          </property>\n        </object>\n      </child>\n      <property name=\"content\">\n        <object class=\"AdwViewStack\" id=\"stack\">\n          <!-- ... -->\n        </object>\n      </property>\n      <child type=\"bottom\">\n        <object class=\"AdwViewSwitcherBar\">\n          <property name=\"stack\">stack</property>\n          <property name=\"reveal\"\n                    bind-source=\"title\"\n                    bind-property=\"title-visible\"\n                    bind-flags=\"sync-create\"/>\n        </object>\n      </child>\n    </object>\n  </property>\n</object>\n```\n\n----------------------------------------\n\nTITLE: Building Utility Pane with AdwOverlaySplitView in XML\nDESCRIPTION: This snippet demonstrates the modern AdwOverlaySplitView-based approach for a utility pane. It introduces the show-sidebar property bound to a GtkToggleButton's active state, responsive adaptation with AdwBreakpoint, and clear assignment of sidebar and content widgets. It assumes Adwaita, Gtk XML, and AdwOverlaySplitView are available. Requires using IDs for referencing the split view in breakpoint setters and supports accessibility through sp-based breakpoints.\nSOURCE: https://github.com/gnome/libadwaita/blob/main/doc/migrating-to-breakpoints.md#_snippet_9\n\nLANGUAGE: XML\nCODE:\n```\n<object class=\"AdwWindow\">\n  <child>\n    <object class=\"AdwBreakpoint\">\n      <condition>max-width: 400sp</condition>\n      <setter object=\"split_view\" property=\"collapsed\">True</setter>\n    </object>\n  </child>\n  <property name=\"content\">\n    <object class=\"AdwToolbarView\">\n      <property name=\"top-bar-style\">raised</property>\n      <child type=\"top\">\n        <object class=\"AdwHeaderBar\">\n          <object class=\"GtkToggleButton\" id=\"toggle_pane_button\">\n            <property name=\"icon-name\">sidebar-show-symbolic</property>\n            <property name=\"active\">True</property>\n          </object>\n        </object>\n      </child>\n      <property name=\"content\">\n        <object class=\"AdwOverlaySplitView\" id=\"split_view\">\n          <property name=\"show-sidebar\"\n                    bind-source=\"toggle_pane_button\"\n                    bind-property=\"active\"\n                    bind-flags=\"sync-create|bidirectional\"/>\n          <property name=\"sidebar\">\n            <!-- utility pane -->\n          </property>\n          <property name=\"content\">\n            <!-- main view -->\n          </property>\n        </object>\n\n      </property>\n    </object>\n  </property>\n</object>\n```\n\n----------------------------------------\n\nTITLE: Original AdwSqueezer Layout with Multiple GtkBox Children (XML)\nDESCRIPTION: This snippet displays the use of AdwSqueezer containing child GtkBox widgets for adaptive layouts. Each box can have differing orientations, here shown as one horizontal and one vertical, each populated with GtkButton children. Dependencies include AdwSqueezer and standard Gtk widgets. The input should be a GtkBuilder XML; output is a squeezed layout switching visible children as space permits.\nSOURCE: https://github.com/gnome/libadwaita/blob/main/doc/migrating-to-breakpoints.md#_snippet_14\n\nLANGUAGE: XML\nCODE:\n```\n<object class=\"AdwSqueezer\">\n  <property name=\"homogeneous\">False</property>\n  <child>\n    <object class=\"GtkBox\">\n      <property name=\"spacing\">6</property>\n      <child>\n        <object class=\"GtkButton\">\n          <property name=\"label\">Button 1</property>\n        </object>\n      </child>\n      <child>\n        <object class=\"GtkButton\">\n          <property name=\"label\">Button 2</property>\n        </object>\n      </child>\n    </object>\n  </child>\n  <child>\n    <object class=\"GtkBox\">\n      <property name=\"orientation\">vertical</property>\n      <property name=\"spacing\">6</property>\n      <child>\n        <object class=\"GtkButton\">\n          <property name=\"label\">Button 1</property>\n        </object>\n      </child>\n      <child>\n        <object class=\"GtkButton\">\n          <property name=\"label\">Button 2</property>\n        </object>\n      </child>\n    </object>\n  </child>\n</object>\n```\n\n----------------------------------------\n\nTITLE: Custom Destructive Action Button Color Overrides in CSS\nDESCRIPTION: This CSS snippet demonstrates overriding default accent colors for an action button to apply a destructive style in libadwaita. The button with the ID 'custom-destructive-action-button' uses CSS variables to set background, foreground, and accent colors to predefined destructive theme colors. This approach is recommended instead of using deprecated '.opaque' styles, providing a more semantically clear way to style buttons.\nSOURCE: https://github.com/gnome/libadwaita/blob/main/doc/style-classes.md#_snippet_5\n\nLANGUAGE: CSS\nCODE:\n```\n#custom-destructive-action-button {\n  --accent-bg-color: var(--destructive-bg-color);\n  --accent-fg-color: var(--destructive-fg-color);\n  --accent-color: var(--destructive-color);\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Accent Color and Text Color for Individual Widgets - CSS\nDESCRIPTION: This CSS snippet shows how to override both the accent background color and the foreground (text) color for a specific widget in a Libadwaita application. It sets the background accent to purple and recalculates the corresponding foreground color using the oklab color function with a standalone color parameter, ensuring proper contrast. This snippet requires support for CSS variables and the appropriate color functions. Inputs include the widget selector and color variables. This allows finer-grained styling of individual widgets beyond global accent overrides.\nSOURCE: https://github.com/gnome/libadwaita/blob/main/doc/styles-and-appearance.md#_snippet_1\n\nLANGUAGE: CSS\nCODE:\n```\nmy-widget {\n  --accent-bg-color: var(--accent-purple); /* Always use the purple color */\n  --accent-color: oklab(from var(--accent-bg-color) var(--standalone-color-oklab));\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Overlay Split View with Breakpoint - XML\nDESCRIPTION: This code snippet demonstrates how to create an `AdwOverlaySplitView` and configure it to collapse the sidebar as an overlay on smaller screens using `AdwBreakpoint`. It uses a toggle button to control the sidebar visibility. The breakpoint sets the `collapsed` property to `True` when the `max-width` is 400sp, causing the sidebar to overlay the content.\nSOURCE: https://github.com/gnome/libadwaita/blob/main/doc/adaptive-layouts.md#_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<object class=\"AdwWindow\">\n  <child>\n    <object class=\"AdwBreakpoint\">\n      <condition>max-width: 400sp</condition>\n      <setter object=\"split_view\" property=\"collapsed\">True</setter>\n    </object>\n  </child>\n  <property name=\"content\">\n    <object class=\"AdwToolbarView\">\n      <property name=\"top-bar-style\">raised</property>\n      <child type=\"top\">\n        <object class=\"AdwHeaderBar\">\n          <child type=\"start\">\n            <object class=\"GtkToggleButton\" id=\"show_sidebar_button\">\n              <property name=\"icon-name\">sidebar-show-symbolic</property>\n              <property name=\"active\">True</property>\n            </object>\n          </child>\n        </object>\n      </child>\n      <property name=\"content\">\n        <object class=\"AdwOverlaySplitView\" id=\"split_view\">\n          <property name=\"show-sidebar\"\n                    bind-source=\"show_sidebar_button\"\n                    bind-property=\"active\"\n                    bind-flags=\"sync-create|bidirectional\"/>\n          <property name=\"sidebar\">\n            <!-- utility pane -->\n          </property>\n          <property name=\"content\">\n            <!-- main view -->\n          </property>\n        </object>\n      </property>\n    </object>\n  </property>\n</object>\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Foreground Color for Bright Accent Colors - CSS\nDESCRIPTION: This CSS code snippet demonstrates how to set a custom foreground color when the accent background color is very bright, to maintain legibility in Libadwaita applications. By defining --accent-fg-color with a semi-transparent black color, it overrides the default white text color used by accent colors. This is necessary when using bright backgrounds like yellow. The snippet expects color variables set within a root or global style context. It relies on standard CSS color and opacity syntax.\nSOURCE: https://github.com/gnome/libadwaita/blob/main/doc/styles-and-appearance.md#_snippet_2\n\nLANGUAGE: CSS\nCODE:\n```\n:root {\n  --accent-bg-color: var(--yellow-3);\n  --accent-fg-color: rgb(0 0 0 / 80%);\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Accent Color Using CSS in Libadwaita Applications - CSS\nDESCRIPTION: This CSS snippet demonstrates how to override the system accent background color globally within a Libadwaita application by setting the CSS variable --accent-bg-color to a permanent green accent color. This allows apps to use a consistent custom accent regardless of system settings. No dependencies are required beyond standard CSS support in widgets. The expected input is a CSS declaration within the application's style resource, affecting all widgets using accent styling by default.\nSOURCE: https://github.com/gnome/libadwaita/blob/main/doc/styles-and-appearance.md#_snippet_0\n\nLANGUAGE: CSS\nCODE:\n```\n:root {\n  --accent-bg-color: var(--accent-green); /* Always use the green color */\n}\n```\n\n----------------------------------------\n\nTITLE: AdwLeaflet XML Configuration\nDESCRIPTION: Demonstrates a typical AdwLeaflet setup with two AdwLeafletPage objects. This configuration showcases the use of AdwToolbarView and GtkHeaderBar for page content and titles. The can-unfold property is set to FALSE, and can-navigate-back is set to TRUE.\nSOURCE: https://github.com/gnome/libadwaita/blob/main/doc/migrating-to-breakpoints.md#_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<object class=\"AdwLeaflet\">\n  <property name=\"can-unfold\">False</property>\n  <property name=\"can-navigate-back\">True</property>\n  <child>\n    <object class=\"AdwLeafletPage\">\n      <property name=\"name\">page-1</property>\n      <property name=\"child\">\n        <object class=\"AdwToolbarView\">\n          <child type=\"top\">\n            <object class=\"GtkHeaderBar\">\n              <property name=\"title-widget\">\n                <object class=\"AdwWindowTitle\">\n                  <property name=\"title\" translatable=\"yes\">Page 1</property>\n                </object>\n              </property>\n            </object>\n          </child>\n          <property name=\"content\">\n            <!-- ... -->\n          </property>\n        </object>\n      </property>\n    </object>\n  </child>\n  <child>\n    <object class=\"AdwLeafletPage\">\n      <property name=\"name\">page-2</property>\n      <property name=\"child\">\n        <object class=\"AdwToolbarView\">\n          <child type=\"top\">\n            <object class=\"GtkHeaderBar\">\n              <child type=\"start\">\n                <object class=\"GtkButton\">\n                  <property name=\"icon-name\">go-previous-symbolic</property>\n                  <property name=\"tooltip-text\" translatable=\"yes\">Back</property>\n                  <signal name=\"clicked\" handler=\"back_clicked_cb\" swapped=\"yes\"/>\n                </object>\n              </child>\n              <property name=\"title-widget\">\n                <object class=\"AdwWindowTitle\">\n                  <property name=\"title\" translatable=\"yes\">Page 2</property>\n                </object>\n              </property>\n            </object>\n          </child>\n          <property name=\"content\">\n            <!-- ... -->\n          </property>\n        </object>\n      </property>\n    </object>\n  </child>\n</object>\n```\n\n----------------------------------------\n\nTITLE: Applying AdwBreakpoint for Adaptive Header Bar and Switcher Bar (XML)\nDESCRIPTION: This code demonstrates setting up AdwBreakpoint to dynamically modify the header bar's title-widget and the view switcher bar's 'reveal' property for adaptive layouts. It also encapsulates the updated toolbar structure, using AdwToolbarView, AdwHeaderBar, AdwViewSwitcher, AdwViewStack, and AdwViewSwitcherBar with IDs for runtime property mutation. Requires Gtk, Adwaita, and breakpoint-aware widgets. Inputs are GtkBuilder XML with breakpoint definition; outputs are adaptive UI elements that change layout properties based on window size.\nSOURCE: https://github.com/gnome/libadwaita/blob/main/doc/migrating-to-breakpoints.md#_snippet_12\n\nLANGUAGE: XML\nCODE:\n```\n<object class=\"AdwWindow\">\n  <property name=\"title\" translatable=\"yes\">Title</property>\n  <child>\n    <object class=\"AdwBreakpoint\">\n      <condition>max-width: 550sp</condition>\n      <setter object=\"header_bar\" property=\"title-widget\"/>\n      <setter object=\"switcher_bar\" property=\"reveal\">True</setter>\n    </object>\n  </child>\n  <property name=\"child\">\n    <object class=\"AdwToolbarView\">\n      <child type=\"top\">\n        <object class=\"AdwHeaderBar\" id=\"header_bar\">\n          <property name=\"title-widget\">\n            <object class=\"AdwViewSwitcher\">\n              <property name=\"policy\">wide</property>\n              <property name=\"stack\">stack</property>\n            </object>\n          </property>\n        </object>\n      </child>\n      <property name=\"content\">\n        <object class=\"AdwViewStack\" id=\"stack\">\n          <!-- ... -->\n        </object>\n      </property>\n      <child type=\"bottom\">\n        <object class=\"AdwViewSwitcherBar\" id=\"switcher_bar\">\n          <property name=\"stack\">stack</property>\n        </object>\n      </child>\n    </object>\n  </property>\n</object>\n```\n\n----------------------------------------\n\nTITLE: Documenting Parameters in Markdown\nDESCRIPTION: This snippet shows the preferred way to document parameters in libadwaita using Markdown format for gi-docgen. It focuses on providing a clear description of the parameter's role or purpose, omitting the explicit type unless necessary for clarity or transfer ownership notes.\nSOURCE: https://github.com/gnome/libadwaita/blob/main/CONTRIBUTING.md#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n* @self: a window\n * @breakpoint: (transfer full): the breakpoint to add\n```\n\n----------------------------------------\n\nTITLE: Replacing AdwViewSwitcherTitle with AdwViewSwitcher and Responsive Breakpoints (XML)\nDESCRIPTION: Shows how to replace AdwViewSwitcherTitle in a GNOME UI file by using a regular AdwViewSwitcher set to the 'wide' policy. This example demonstrates the updated pattern, which removes deprecated property bindings and makes use of IDs for header and switcher bar elements to interact with AdwBreakpoint objects. Prerequisites include Gtk, AdwToolbarView, AdwHeaderBar, AdwViewSwitcher, AdwBreakpoint, and AdwViewSwitcherBar. Inputs are XML UI files and breakpoint conditions (e.g., max-width: 550sp); outputs are responsive toolbars with adaptive switchers.\nSOURCE: https://github.com/gnome/libadwaita/blob/main/doc/migrating-to-breakpoints.md#_snippet_11\n\nLANGUAGE: XML\nCODE:\n```\n<object class=\"AdwHeaderBar\" id=\"header_bar\">\n  <!-- ... -->\n  <property name=\"title-widget\">\n    <object class=\"AdwViewSwitcher\">\n      <property name=\"policy\">wide</property>\n      <property name=\"stack\">stack</property>\n    </object>\n  </property>\n  <!-- ... -->\n</object>\n<!-- ... -->\n<object class=\"AdwViewSwitcherBar\" id=\"switcher_bar\">\n  <property name=\"stack\">stack</property>\n</object>\n```\n\n----------------------------------------\n\nTITLE: Linking Libadwaita Symbols (Markdown)\nDESCRIPTION: This snippet provides examples of the recommended Markdown syntax for linking to libadwaita API symbols like classes, properties, methods, signals, and enums using gi-docgen, generally omitting the `Adw` namespace for brevity.\nSOURCE: https://github.com/gnome/libadwaita/blob/main/CONTRIBUTING.md#_snippet_2\n\nLANGUAGE: Markdown\nCODE:\n```\n[class@NavigationView]\n[property@Banner:title]\n[method@Dialog.present]\n[signal@AlertDialog::response]\n[enum@AnimationState]\n```\n\n----------------------------------------\n\nTITLE: Linking Enum Members (Markdown)\nDESCRIPTION: This snippet demonstrates the required Markdown syntax for linking specifically to a member of an enum within the libadwaita documentation using gi-docgen. Unlike linking to the enum itself, linking to a member requires including the `Adw` namespace.\nSOURCE: https://github.com/gnome/libadwaita/blob/main/CONTRIBUTING.md#_snippet_3\n\nLANGUAGE: Markdown\nCODE:\n```\n[enum@Adw.AnimationState.PLAYING]\n```\n\n----------------------------------------\n\nTITLE: Using Level 2 Headings in Doc Comments (Markdown)\nDESCRIPTION: This snippet shows the recommended use of a level 2 Markdown heading (`##`) for structuring sections within API documentation comments, such as describing CSS nodes. This is to avoid conflict with the level 1 heading automatically generated by gi-docgen for the symbol itself.\nSOURCE: https://github.com/gnome/libadwaita/blob/main/CONTRIBUTING.md#_snippet_5\n\nLANGUAGE: Markdown\nCODE:\n```\n## CSS Nodes\n```\n\n----------------------------------------\n\nTITLE: Replacing AdwSqueezer with GtkBox and AdwBreakpoint (XML)\nDESCRIPTION: Demonstrates the migration from AdwSqueezer to a responsive GtkBox, using AdwBreakpoint to switch the box's orientation. Only standard Gtk widgets and AdwBreakpoint are needed. The code consists of a GtkBox for buttons and a separate breakpoint definition that sets its orientation to vertical at a max-width of 400sp. Inputs are XML UI files; output is a responsive button box adapting its direction based on window size.\nSOURCE: https://github.com/gnome/libadwaita/blob/main/doc/migrating-to-breakpoints.md#_snippet_15\n\nLANGUAGE: XML\nCODE:\n```\n<object class=\"GtkBox\" id=\"box\">\n  <property name=\"spacing\">6</property>\n  <child>\n    <object class=\"GtkButton\">\n      <property name=\"label\">Button 1</property>\n    </object>\n  </child>\n  <child>\n    <object class=\"GtkButton\">\n      <property name=\"label\">Button 2</property>\n    </object>\n  </child>\n</object>\n\n<!-- ... -->\n\n<object class=\"AdwBreakpoint\">\n  <condition>max-width: 400sp</condition>\n  <setter object=\"box\" property=\"orientation\">vertical</setter>\n</object>\n```\n\n----------------------------------------\n\nTITLE: AdwNavigationView XML Configuration\nDESCRIPTION: Illustrates how to configure AdwNavigationView with two AdwNavigationPage objects. Each page contains an AdwToolbarView and an AdwHeaderBar. The example demonstrates setting the title and tag properties for each page, replacing the use of AdwLeafletPage:name with AdwNavigationPage:tag.\nSOURCE: https://github.com/gnome/libadwaita/blob/main/doc/migrating-to-breakpoints.md#_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<object class=\"AdwNavigationView\">\n  <child>\n    <object class=\"AdwNavigationPage\">\n      <property name=\"title\" translatable=\"yes\">Page 1</property>\n      <property name=\"tag\">page-1</property>\n      <property name=\"child\">\n        <object class=\"AdwToolbarView\">\n          <child type=\"top\">\n            <object class=\"AdwHeaderBar\"/>\n          </child>\n          <property name=\"content\">\n            <!-- ... -->\n          </property>\n        </object>\n      </property>\n    </object>\n  </child>\n  <child>\n    <object class=\"AdwNavigationPage\">\n      <property name=\"title\" translatable=\"yes\">Page 2</property>\n      <property name=\"tag\">page-2</property>\n      <property name=\"child\">\n        <object class=\"AdwToolbarView\">\n          <child type=\"top\">\n            <object class=\"AdwHeaderBar\"/>\n          </child>\n          <property name=\"content\">\n            <!-- ... -->\n          </property>\n        </object>\n      </property>\n    </object>\n  </child>\n</object>\n```\n\n----------------------------------------\n\nTITLE: Avoid Namespace When Linking Symbols (Markdown)\nDESCRIPTION: This snippet shows examples of deprecated Markdown syntax for linking to libadwaita API symbols. It illustrates the discouraged practice of explicitly including the `Adw` namespace prefix in the link syntax for classes, properties, methods, signals, and enums.\nSOURCE: https://github.com/gnome/libadwaita/blob/main/CONTRIBUTING.md#_snippet_4\n\nLANGUAGE: Markdown\nCODE:\n```\n[class@Adw.NavigationView]\n[property@Adw.Banner:title]\n[method@Adw.Dialog.present]\n[signal@Adw.AlertDialog::response]\n[enum@Adw.AnimationState]\n```\n\n----------------------------------------\n\nTITLE: Regenerating All Widget Screenshots (Shell)\nDESCRIPTION: This shell command executes the `screenshot` tool without specifying an individual image, triggering the regeneration of all screenshots defined by the UI files found in the source data directory (`../doc/tools/data/`). This command should be run from the build directory.\nSOURCE: https://github.com/gnome/libadwaita/blob/main/CONTRIBUTING.md#_snippet_9\n\nLANGUAGE: Shell\nCODE:\n```\n./doc/tools/screenshot ../doc/tools/data/ ../doc/images/\n```\n\n----------------------------------------\n\nTITLE: Generating Single Widget Screenshot (Shell)\nDESCRIPTION: This shell command shows how to execute the `screenshot` tool from the build directory to generate image files (`.png`, `-dark.png`) for a specific UI file defined in the data directory. It takes the data directory, output image directory, and the base name of the UI file as arguments.\nSOURCE: https://github.com/gnome/libadwaita/blob/main/CONTRIBUTING.md#_snippet_8\n\nLANGUAGE: Shell\nCODE:\n```\n./doc/tools/screenshot ../doc/tools/data/ ../doc/images/ -i IMAGE\n```\n\n----------------------------------------\n\nTITLE: Switching Title and Subtitle Responsively with GtkStack and Breakpoints (XML)\nDESCRIPTION: Illustrates the use of GtkStack for toggling between an AdwViewSwitcher and AdwWindowTitle (with subtitle) via breakpoints. This enables dynamic switching of the title widget in the header bar depending on window width, leveraging AdwBreakpoint conditions, GtkStack, AdwWindowTitle, and AdwViewSwitcherBar. Suitable for applications needing to show both title and subtitle for adaptive UIs. Depends on Gtk, Adwaita, proper breakpoint wiring, and XML definitions.\nSOURCE: https://github.com/gnome/libadwaita/blob/main/doc/migrating-to-breakpoints.md#_snippet_13\n\nLANGUAGE: XML\nCODE:\n```\n<object class=\"AdwWindow\">\n  <child>\n    <object class=\"AdwBreakpoint\">\n      <condition>max-width: 550sp</condition>\n      <setter object=\"title_stack\" property=\"visible-child\">window_title</setter>\n      <setter object=\"switcher_bar\" property=\"reveal\">True</setter>\n    </object>\n  </child>\n  <property name=\"child\">\n    <object class=\"AdwToolbarView\">\n      <child type=\"top\">\n        <object class=\"AdwHeaderBar\">\n          <property name=\"title-widget\">\n            <object class=\"GtkStack\" id=\"title_stack\">\n              <child>\n                <object class=\"AdwViewSwitcher\">\n                  <property name=\"policy\">wide</property>\n                  <property name=\"stack\">stack</property>\n                </object>\n              </child>\n              <child>\n                <object class=\"AdwWindowTitle\" id=\"window_title\">\n                  <property name=\"title\" translatable=\"yes\">Title</property>\n                  <property name=\"subtitle\" translatable=\"yes\">Subtitle</property>\n                </object>\n              </child>\n            </object>\n          </property>\n        </object>\n      </child>\n      <property name=\"content\">\n        <object class=\"AdwViewStack\" id=\"stack\">\n          <!-- ... -->\n        </object>\n      </property>\n      <child type=\"bottom\">\n        <object class=\"AdwViewSwitcherBar\" id=\"switcher_bar\">\n          <property name=\"stack\">stack</property>\n        </object>\n      </child>\n    </object>\n  </property>\n</object>\n```\n\n----------------------------------------\n\nTITLE: Avoid Level 1 Headings in Doc Comments (Markdown)\nDESCRIPTION: This snippet shows an example of an incorrect heading level (`#` for H1) used within API documentation comments. The guidelines state that level 1 headings should be avoided in this context as gi-docgen uses them for the symbol's main title.\nSOURCE: https://github.com/gnome/libadwaita/blob/main/CONTRIBUTING.md#_snippet_6\n\nLANGUAGE: Markdown\nCODE:\n```\n# CSS Nodes\n```\n\n----------------------------------------\n\nTITLE: Setting View Background and Foreground Color using CSS\nDESCRIPTION: This CSS snippet demonstrates how to set the background and foreground colors of a widget using the `.view` style class. It utilizes CSS variables `--view-bg-color` and `--view-fg-color` for the respective colors, providing the default view background and foreground.\nSOURCE: https://github.com/gnome/libadwaita/blob/main/doc/style-classes.md#_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.view {\n  background-color: var(--view-bg-color);\n  color: var(--view-fg-color);\n}\n```\n\n----------------------------------------\n\nTITLE: Nesting NavigationSplitView in OverlaySplitView - XML\nDESCRIPTION: This snippet presents a triple-pane layout where an `AdwNavigationSplitView` is nested within the content area of an `AdwOverlaySplitView`. This setup allows for an overlay sidebar and a two-pane layout within the main content area.  Breakpoints control the collapsing behavior of both split views for different screen sizes. The `sidebar-width-fraction` and `max-sidebar-width` properties configure the dimensions of the sidebars.\nSOURCE: https://github.com/gnome/libadwaita/blob/main/doc/adaptive-layouts.md#_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<object class=\"AdwWindow\">\n  <child>\n    <object class=\"AdwBreakpoint\">\n      <condition>max-width: 860sp</condition>\n      <setter object=\"outer_view\" property=\"collapsed\">True</setter>\n    </object>\n  </child>\n  <child>\n    <object class=\"AdwBreakpoint\">\n      <condition>max-width: 500sp</condition>\n      <setter object=\"outer_view\" property=\"collapsed\">True</setter>\n      <setter object=\"inner_view\" property=\"collapsed\">True</setter>\n    </object>\n  </child>\n  <property name=\"content\">\n    <object class=\"AdwOverlaySplitView\" id=\"outer_view\">\n      <property name=\"max-sidebar-width\">260</property>\n      <property name=\"sidebar-width-fraction\">0.179</property>\n      <property name=\"sidebar\">\n        <!-- sidebar -->\n      </property>\n      <property name=\"content\">\n        <object class=\"AdwNavigationSplitView\" id=\"inner_view\">\n          <property name=\"min-sidebar-width\">290</property>\n          <property name=\"max-sidebar-width\">520</property>\n          <property name=\"sidebar-width-fraction\">0.355</property>\n          <property name=\"sidebar\">\n            <!-- middle pane -->\n          </property>\n          <property name=\"content\">\n            <!-- content -->\n          </property>\n        </object>\n      </property>\n    </object>\n  </property>\n</object>\n```\n\n----------------------------------------\n\nTITLE: Basic CSS Variable Usage\nDESCRIPTION: This code demonstrates how to use predefined CSS variables from the Adwaita stylesheet to style a widget's background and foreground colors. It sets the background to the accent background color and the text color to the accent foreground color. This ensures consistency with the Adwaita theme.\nSOURCE: https://github.com/gnome/libadwaita/blob/main/doc/css-variables.md#_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nmy-widget {\n  background-color: var(--accent-bg-color);\n  color: var(--accent-fg-color);\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding CSS Variables\nDESCRIPTION: This code shows how to override a CSS variable in the Adwaita stylesheet.  It re-declares the `--accent-bg-color` variable to a specific hexadecimal color value. This customization affects all elements using the `--accent-bg-color` variable.\nSOURCE: https://github.com/gnome/libadwaita/blob/main/doc/css-variables.md#_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n:root {\n  --accent-bg-color: #e01b24;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GTK3 Compatibility Color Aliases in CSS\nDESCRIPTION: Defines legacy color names from GTK3 Adwaita (e.g., `@theme_bg_color`, `@borders`) using the older GTK-specific syntax. These are provided for compatibility and are typically aliases of newer UI color variables (like `@window_bg_color`) or derived using CSS `color-mix` functions. It is recommended to avoid using these compatibility colors in new development.\nSOURCE: https://github.com/gnome/libadwaita/blob/main/doc/css-variables.md#_snippet_10\n\nLANGUAGE: CSS\nCODE:\n```\n/* Note: These use GTK-specific syntax, interpreted by the CSS engine */\n@theme_bg_color: @window_bg_color;\n@theme_fg_color: @window_fg_color;\n@theme_base_color: @view_bg_color;\n@theme_text_color: @view_fg_color;\n@theme_selected_bg_color: @accent_bg_color;\n@theme_selected_fg_color: @accent_fg_color;\n@insensitive_bg_color: color-mix(@window_bg_color 60%, @view_bg_color);\n@insensitive_fg_color: color-mix(in srgb, @window_fg_color 50%, transparent);\n@insensitive_base_color: @view_bg_color;\n@borders: color-mix(in srgb, currentColor 15%, transparent);\n/* ... other unfocused and compatibility definitions ... */\n@unfocused_borders: @borders;\n```\n\n----------------------------------------\n\nTITLE: Overriding Background and Standalone Colors\nDESCRIPTION: This code snippet shows how to override both the background and standalone accent colors for a specific widget. When overriding the background color, the standalone color must also be overridden to ensure proper contrast. The standalone color is derived from the background color using the `oklab` color function and the `--standalone-color-oklab` variable.\nSOURCE: https://github.com/gnome/libadwaita/blob/main/doc/css-variables.md#_snippet_3\n\nLANGUAGE: css\nCODE:\n```\nmy-widget {\n  --accent-bg-color: var(--purple-3);\n  --accent-color: oklab(from var(--accent-bg-color) var(--standalone-color-oklab));\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Old Window Structure with GtkBuilder XML\nDESCRIPTION: This GtkBuilder XML snippet demonstrates a typical layout for a `GtkWindow` before migrating to Libadwaita 1.5 adaptive dialogs. It uses the `titlebar` property for the header bar and arranges the main content and action bar within a vertical `GtkBox` set as the window's `child`.\nSOURCE: https://github.com/gnome/libadwaita/blob/main/doc/migrating-to-adaptive-dialogs.md#_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<object class=\"GtkWindow\">\n  <property name=\"titlebar\">\n    <object class=\"AdwHeaderBar\"/>\n  </property>\n  <property name=\"child\">\n    <object class=\"GtkBox\">\n      <property name=\"orientation\">vertical</property>\n      <child>\n        <!-- content -->\n      </child>\n      <child>\n        <object class=\"GtkActionBar\"/>\n      </child>\n    </object>\n  </property>\n</object>\n```\n\n----------------------------------------\n\nTITLE: Color Pill Styling\nDESCRIPTION: This CSS styles color pills with rounded borders and a transparent border. It defines variations for light and dark modes by adjusting the border color using `rgb` with opacity values. It also includes combined light and dark styles.\nSOURCE: https://github.com/gnome/libadwaita/blob/main/doc/css-variables.md#_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n.color-pill {\n    width: 20px;\n    height: 20px;\n    border-radius: 100%;\n    background-clip: padding-box;\n    border: 1px solid transparent;\n}\n\n.color-pill.light {\n    border-color: rgb(0 0 0 / 10%);\n}\n\n.color-pill.dark {\n    border-color: rgb(255 255 255 / 20%);\n}\n\n.color-pill.light.dark {\n    border-color: rgb(200 200 200 / 35%);\n}\n```\n\n----------------------------------------\n\nTITLE: Header Bar Color Variables in CSS\nDESCRIPTION: CSS color variables used for header bars and similar widgets in Libadwaita, with values for both light and dark themes.\nSOURCE: https://github.com/gnome/libadwaita/blob/main/doc/css-variables.md#_snippet_5\n\nLANGUAGE: CSS\nCODE:\n```\n--headerbar-bg-color: #ffffff; /* Light theme: white, Dark theme: #2e2e32 */\n--headerbar-fg-color: rgb(0 0 6 / 80%); /* Light theme: semi-transparent black, Dark theme: white */\n--headerbar-border-color: rgb(0 0 6 / 80%); /* Light theme: semi-transparent black, Dark theme: white */\n--headerbar-backdrop-color: #fafafb; /* Light theme: light gray, Dark theme: #222226 */\n--headerbar-shade-color: rgb(0 0 6 / 12%); /* Light theme: 12% black, Dark theme: 36% black */\n--headerbar-darker-shade-color: rgb(0 0 6 / 12%); /* Light theme: 12% black, Dark theme: 90% black */\n```\n\n----------------------------------------\n\nTITLE: Defining GNOME Palette Colors as CSS Variables\nDESCRIPTION: Defines the standard GNOME color palette hues (blue, green, yellow, orange, red, purple, brown, light, dark) as CSS custom properties (variables). Each color has five shades, numbered 1 (lightest) to 5 (darkest), with their corresponding hex values. These variables are intended for use within Libadwaita/GTK4 stylesheets.\nSOURCE: https://github.com/gnome/libadwaita/blob/main/doc/css-variables.md#_snippet_9\n\nLANGUAGE: CSS\nCODE:\n```\n--blue-1: #99c1f1;\n--blue-2: #62a0ea;\n--blue-3: #3584e4;\n--blue-4: #1c71d8;\n--blue-5: #1a5fb4;\n\n--green-1: #8ff0a4;\n/* ... other green shades ... */\n--green-5: #26a269;\n\n/* ... definitions for yellow, orange, red, purple, brown ... */\n\n--light-1: #ffffff;\n/* ... other light shades ... */\n--light-5: #9a9996;\n\n--dark-1: #77767b;\n/* ... other dark shades ... */\n--dark-5: #000000;\n```\n\n----------------------------------------\n\nTITLE: Applying System Fonts using CSS Variables in Libadwaita\nDESCRIPTION: Demonstrates how to use the provided Libadwaita CSS variables `--monospace-font-family` and `--monospace-font-size` together to style an element with the system's designated monospace font. This pattern applies similarly to the document font variables.\nSOURCE: https://github.com/gnome/libadwaita/blob/main/doc/css-variables.md#_snippet_8\n\nLANGUAGE: CSS\nCODE:\n```\n.my-content {\n  font-family: var(--monospace-font-family);\n  font-size: var(--monospace-font-size);\n}\n```\n\n----------------------------------------\n\nTITLE: Secondary Sidebar Color Variables in CSS\nDESCRIPTION: CSS color variables used for middle panes in triple-pane layouts in Libadwaita, typically created by nesting two split views. Available since version 1.4.\nSOURCE: https://github.com/gnome/libadwaita/blob/main/doc/css-variables.md#_snippet_7\n\nLANGUAGE: CSS\nCODE:\n```\n--secondary-sidebar-bg-color: #f3f3f5; /* Light theme: light gray, Dark theme: #28282c */\n--secondary-sidebar-fg-color: rgb(0 0 6 / 80%); /* Light theme: semi-transparent black, Dark theme: white */\n--secondary-sidebar-backdrop-color: #f6f6fa; /* Light theme: very light gray, Dark theme: #252529 */\n--secondary-sidebar-border-color: rgb(0 0 6 / 7%); /* Light theme: 7% black, Dark theme: 36% black */\n--secondary-sidebar-shade-color: rgb(0 0 6 / 7%); /* Light theme: 7% black, Dark theme: 25% black */\n```\n\n----------------------------------------\n\nTITLE: Creating Wrappable Containers with AdwWrapBox in XML\nDESCRIPTION: This snippet configures an AdwWrapBox, a container that behaves like a word-wrapping label but for widgets. It wraps children to the next line when space is insufficient and allows defining spacing between lines and between children. It is suitable for tag-like UI components or tags that adapt to available width. Requires Libadwaita environment.\nSOURCE: https://github.com/gnome/libadwaita/blob/main/doc/adaptive-layouts.md#_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<object class=\"AdwWrapBox\">\n  <property name=\"line-spacing\">6</property>\n  <property name=\"child-spacing\">6</property>\n  <!-- children -->\n</object>\n```\n\n----------------------------------------\n\nTITLE: Running Manual Tests for libadwaita Using Shell Commands\nDESCRIPTION: Provides the shell commands necessary to navigate to the build directory and execute specific manual test binaries for the libadwaita project. This snippet assumes that the project has already been built and the tests compiled. There are no additional dependencies beyond the standard shell and build environment. Inputs include the test binary names, and the output is the execution of that test with any results printed to the console.\nSOURCE: https://github.com/gnome/libadwaita/blob/main/tests/manual/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncd build\n./tests/manual/test-button-states\n```\n\n----------------------------------------\n\nTITLE: Initializing Libadwaita Using adw_init() in C\nDESCRIPTION: This snippet shows how to initialize Libadwaita manually in environments where AdwApplication cannot be used. It calls adw_init() before creating a GTK window with a label, sets window properties, and presents it. Additionally, it includes a main loop to process events.\nSOURCE: https://github.com/gnome/libadwaita/blob/main/doc/initialization.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\n#include <adwaita.h>\n\nint\nmain (int   argc,\n      char *argv[]) \n{\n  GtkWidget *window, *label;\n\n  adw_init ();\n\n  window = gtk_window_new ();\n  label = gtk_label_new (\"Hello World\");\n\n  gtk_window_set_title (GTK_WINDOW (window), \"Hello\");\n  gtk_window_set_default_size (GTK_WINDOW (window), 200, 200);\n  gtk_window_set_child (GTK_WINDOW (window), label);\n  gtk_window_present (GTK_WINDOW (window));\n\n  while (g_list_model_get_n_items (gtk_window_get_toplevels ()) > 0)\n    g_main_context_iteration (NULL, TRUE);\n\n  return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Libadwaita Using AdwApplication in C\nDESCRIPTION: This snippet demonstrates how to create a GNOME application with Libadwaita support by utilizing adw_application_new(), which automatically handles Libadwaita initialization. The code sets up a simple window with a label, sets window properties, and integrates with the GTK application lifecycle.\nSOURCE: https://github.com/gnome/libadwaita/blob/main/doc/initialization.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#include <adwaita.h>\n\nstatic void\nactivate_cb (GtkApplication *app)\n{\n  GtkWidget *window = gtk_application_window_new (app);\n  GtkWidget *label = gtk_label_new (\"Hello World\");\n\n  gtk_window_set_title (GTK_WINDOW (window), \"Hello\");\n  gtk_window_set_default_size (GTK_WINDOW (window), 200, 200);\n  gtk_window_set_child (GTK_WINDOW (window), label);\n  gtk_window_present (GTK_WINDOW (window));\n}\n\nint\nmain (int   argc,\n      char *argv[]) \n{\n  g_autoptr (AdwApplication) app = NULL;\n\n  app = adw_application_new (\"org.example.Hello\", G_APPLICATION_FLAGS_NONE);\n\n  g_signal_connect (app, \"activate\", G_CALLBACK (activate_cb), NULL);\n\n  return g_application_run (G_APPLICATION (app), argc, argv);\n}\n```\n\n----------------------------------------\n\nTITLE: Avoid Repeating Types in Parameter Docs (Markdown)\nDESCRIPTION: This snippet shows an example of how *not* to document parameters in libadwaita using Markdown. It illustrates the redundant inclusion of explicit types (`AdwWindow`, `AdwBreakpoint`) which should be avoided according to the documentation guidelines.\nSOURCE: https://github.com/gnome/libadwaita/blob/main/CONTRIBUTING.md#_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n* @self: an `AdwWindow`\n * @breakpoint: (transfer full): an `AdwBreakpoint`\n```\n\n----------------------------------------\n\nTITLE: Compiling a C Program Linking Libadwaita and GTK4 with pkg-config on macOS in Bash\nDESCRIPTION: Demonstrates how to compile a ‘main.c’ C source file linking both GTK4 and Libadwaita libraries using pkg-config flags on macOS. It shows using gcc with dynamically generated compiler and linker flags for GTK4 and Libadwaita-1, producing an executable named 'main'. Requires pkg-config to be properly configured.\nSOURCE: https://github.com/gnome/libadwaita/blob/main/doc/build-howto.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngcc $(pkg-config --cflags --libs gtk4) $(pkg-config --cflags --libs libadwaita-1) main.c -o main\n```\n\n----------------------------------------\n\nTITLE: Cloning and Building Libadwaita on macOS Using Meson and Ninja in Bash\nDESCRIPTION: Step-by-step Bash commands to clone the Libadwaita source from GitLab, configure the build directory using Meson, and build and install the library using Ninja on macOS. Assumes build dependencies are installed. Provides the standard process for compiling Libadwaita on Apple systems.\nSOURCE: https://github.com/gnome/libadwaita/blob/main/doc/build-howto.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://gitlab.gnome.org/GNOME/libadwaita.git\ncd libadwaita\nmeson setup _build\nninja -C _build\nninja -C _build install\n```\n\n----------------------------------------\n\nTITLE: Binding Model and Expression with AdwComboRow - C\nDESCRIPTION: This C snippet demonstrates how to migrate from deprecated HdyComboRow methods to the modern AdwComboRow API by creating a property expression and model for use with a combo row widget. It requires GTK 4, Libadwaita, and GObject, including types like ADW_TYPE_ENUM_LIST_ITEM and GTK_TYPE_ORIENTATION. Key parameters include the property expression (expr) and the list model (model), both of which need to be created and connected to the combo row before usage. The expected input is that ADW_TYPE_ENUM_LIST_ITEM and GTK_TYPE_ORIENTATION are valid types, and the model presents an enumeration for combo selection. The code assumes initialization of GTK and widget allocation is already handled elsewhere.\nSOURCE: https://github.com/gnome/libadwaita/blob/main/doc/migrating-libhandy-1-4-to-libadwaita.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nexpr = gtk_property_expression_new (ADW_TYPE_ENUM_LIST_ITEM, NULL, \"nick\");\nmodel = G_LIST_MODEL (adw_enum_list_model_new (GTK_TYPE_ORIENTATION));\n\nadw_combo_row_set_expression (row, expr);\nadw_combo_row_set_model (row, model);\n```\n\n----------------------------------------\n\nTITLE: Creating UI File for Widget Screenshot (XML)\nDESCRIPTION: This XML snippet provides an example of a simple Glade UI file used to define a single widget (`GtkButton`) for the purpose of generating a documentation screenshot. It includes the necessary `requires` tags and uses the `widget` ID to identify the main element to be captured by the screenshot tool.\nSOURCE: https://github.com/gnome/libadwaita/blob/main/CONTRIBUTING.md#_snippet_7\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<interface>\n  <requires lib=\"gtk\" version=\"4.0\"/>\n  <requires lib=\"libadwaita\" version=\"1.0\"/>\n  <object class=\"GtkButton\" id=\"widget\">\n    <property name=\"label\">Example</property>\n  </object>\n</interface>\n```\n\n----------------------------------------\n\nTITLE: Binding UI Object Properties to AdwLeaflet in GtkBuilder - XML\nDESCRIPTION: This XML snippet shows how to bind UI properties in a GtkBuilder XML file to account for the removal of HdyHeaderGroup by directly linking AdwHeaderBar button-visibility properties to an AdwLeaflet's folded property. Dependencies include GtkBuilder XML parsing, GTK 4, and Libadwaita. Main parameters include widget classes (AdwLeaflet, AdwHeaderBar) and property bindings (show-start-title-buttons, show-end-title-buttons, folded). Expected input is a valid GtkBuilder-compatible XML UI file; output is a responsive UI where header bar button visibility adapts depending on the folded state of the leaflet. This approach requires all referenced widget IDs and classes to exist within the context.\nSOURCE: https://github.com/gnome/libadwaita/blob/main/doc/migrating-libhandy-1-4-to-libadwaita.md#_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<object class=\"AdwLeaflet\" id=\"leaflet\">\n  <child>\n    <object class=\"GtkBox\">\n      <property name=\"orientation\">vertical</property>\n      <object class=\"AdwHeaderBar\">\n        <binding name=\"show-end-title-buttons\">\n          <lookup name=\"folded\">leaflet</lookup>\n        </binding>\n      </object>\n      ...\n    </object>\n  </child>\n  ...\n  <child>\n    <object class=\"GtkBox\">\n       <property name=\"orientation\">vertical</property>\n      <object class=\"AdwHeaderBar\">\n        <binding name=\"show-start-title-buttons\">\n          <lookup name=\"folded\">leaflet</lookup>\n        </binding>\n      </object>\n      ...\n    </object>\n  </child>\n</object>\n```"
  }
]