[
  {
    "owner": "wilfredinni",
    "repo": "python-cheatsheet",
    "content": "TITLE: Basic Dataclass Implementation Comparison in Python\nDESCRIPTION: Demonstrates the difference between creating a regular class and using the dataclass decorator to create a simple Number class with a val attribute.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/dataclasses.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> class Number:\n...     def __init__(self, val):\n...         self.val = val\n...\n>>> obj = Number(2)\n>>> obj.val\n# 2\n```\n\n----------------------------------------\n\nTITLE: Implementing Abstraction with Abstract Classes in Python\nDESCRIPTION: This code snippet demonstrates the use of abstract classes in Python to implement abstraction. It defines an abstract Shape class with an abstract area method, and two concrete classes (Rectangle and Circle) that inherit from it. The example shows how to create and use objects of these classes.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/oop-basics.md#2025-04-17_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\n# Import the abc module to define abstract classes and methods\nfrom abc import ABC, abstractmethod\n\n# Define an abstract class called Shape that has an abstract method called area\nclass Shape(ABC):\n    @abstractmethod\n    def area(self):\n        pass\n\n# Define a Rectangle class that inherits from Shape\nclass Rectangle(Shape):\n    def __init__(self, width, height):\n        self.width = width\n        self.height = height\n\n    # Implement the area method for Rectangles\n    def area(self):\n        return self.width * self.height\n\n# Define a Circle class that also inherits from Shape\nclass Circle(Shape):\n    def __init__(self, radius):\n        self.radius = radius\n\n    # Implement the area method for Circles\n    def area(self):\n        return 3.14 * self.radius ** 2\n\n# Create a list of shapes that includes both Rectangles and Circles\nshapes = [Rectangle(4, 5), Circle(7)]\n\n# Loop through each shape in the list and print its area\nfor shape in shapes:\n    print(shape.area())\n```\n\n----------------------------------------\n\nTITLE: Basic Main Function Implementation in Python\nDESCRIPTION: Demonstrates the basic pattern for implementing a main function check in Python. This ensures code only executes when the script is run directly and not when imported as a module.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/main.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nif __name__ == \"__main__\":\n    # execute only if run as a script\n    main()\n```\n\n----------------------------------------\n\nTITLE: Multiple Exception Handling in Python\nDESCRIPTION: Demonstrates handling multiple exceptions (ZeroDivisionError and TypeError) in a single except block.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/exception-handling.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef divide(dividend , divisor):\n    try:\n        if (dividend == 10):\n          var = 'str' + 1\n        else:\n          print(dividend / divisor)\n    except (ZeroDivisionError, TypeError) as error:\n        print(error)\n```\n\n----------------------------------------\n\nTITLE: Try-Except-Finally Block in Python\nDESCRIPTION: Shows the usage of finally block which executes regardless of whether an exception occurs or not.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/exception-handling.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef divide(dividend , divisor):\n    try:\n        print(dividend / divisor)\n    except ZeroDivisionError:\n        print('You can not divide by 0')\n    finally:\n        print('Execution finished')\n```\n\n----------------------------------------\n\nTITLE: Writing JSON File in Python\nDESCRIPTION: Shows how to serialize a Python object to JSON and write it to a file using json.dumps() and file operations.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/modules/json-module.md#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> import json\n\n>>> person = {'name': 'Charles', 'age': 33}\n\n>>> with open(\"filename.json\", \"w\") as f:\n...     f.write(json.dumps(person))\n```\n\n----------------------------------------\n\nTITLE: Walking a Directory Tree in Python using os.walk()\nDESCRIPTION: This snippet demonstrates how to use os.walk() to traverse a directory tree, printing folder names, subfolders, and filenames. It iterates through each level of the directory structure, providing information about the contents at each step.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/file-directory-path.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport os\n\nfor folder_name, subfolders, filenames in os.walk('C:\\\\delicious'):\n    print(f'The current folder is {folder_name}')\n    for subfolder in subfolders:\n        print(f'SUBFOLDER OF {folder_name}: {subfolder}')\n    for filename in filenames:\n        print(f'FILE INSIDE {folder_name}: {filename}')\n    print('')\n```\n\n----------------------------------------\n\nTITLE: Using Type Conversion Functions in Python\nDESCRIPTION: This snippet shows how to use the str(), int(), and float() functions for type conversion in Python. These functions allow changing between string, integer, and float data types.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/basics.md#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n>>> str(29)\n# '29'\n\n>>> str(-3.14)\n# '-3.14'\n\n>>> int('11')\n# 11\n\n>>> float('3.14')\n# 3.14\n```\n\n----------------------------------------\n\nTITLE: Raising Exceptions in Python\nDESCRIPTION: Demonstrates how to raise custom exceptions with error messages using the raise statement and Exception() function. This is a fundamental way to handle error conditions in Python.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/debugging.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> raise Exception('This is the error message.')\n# Traceback (most recent call last):\n#   File \"<pyshell#191>\", line 1, in <module>\n#     raise Exception('This is the error message.')\n# Exception: This is the error message.\n```\n\n----------------------------------------\n\nTITLE: Filtering Lists with For Loops and List Comprehensions in Python\nDESCRIPTION: Compares filtering a list using a traditional for loop with an if statement to using a list comprehension with a conditional. Both methods filter names starting with 'C'.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/comprehensions.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> names = ['Charles', 'Susan', 'Patrick', 'George', 'Carol']\n\n>>> new_list = []\n>>> for n in names:\n...     if n.startswith('C'):\n...         new_list.append(n)\n...\n>>> print(new_list)\n# ['Charles', 'Carol']\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> new_list = [n for n in names if n.startswith('C')]\n>>> print(new_list)\n# ['Charles', 'Carol']\n```\n\n----------------------------------------\n\nTITLE: Defining Function with *args and **kwargs in Python\nDESCRIPTION: Demonstrates how to define a function that accepts a variable number of arguments and keyword arguments using *args and **kwargs parameters, and shows different ways to call this function.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/blog/python-easy-args-kwargs.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef some_function(*args, **kwargs):\n    pass\n\n# call some_function with any number of arguments\nsome_function(arg1, arg2, arg3)\n\n# call some_function with any number of keywords\nsome_function(key1=arg1, key2=arg2, key3=arg3)\n\n# call both, arguments and keywords\nsome_function(arg, key1=arg1)\n\n# or none\nsome_function()\n```\n\n----------------------------------------\n\nTITLE: Basic Function with Arguments in Python\nDESCRIPTION: Demonstrates how to define a function that takes an argument and performs an action. This example creates a function that receives a name parameter and prints a greeting using that name.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/functions.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> def say_hello(name):\n...    print(f'Hello {name}')\n...\n>>> say_hello('Carlos')\n# Hello Carlos\n\n>>> say_hello('Wanda')\n# Hello Wanda\n\n>>> say_hello('Rose')\n# Hello Rose\n```\n\n----------------------------------------\n\nTITLE: Using Python open() Function for File Operations\nDESCRIPTION: Demonstrates three common file operations using open(): creating a new file with 'x' mode, appending content with 'a' mode, and reading file contents. Shows proper file handling using both manual close() and context manager (with statement).\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/builtin/open.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> spam = open('spam.txt', mode='x')\n>>> spam.write('My first line\\n\\n')\n>>> spam.close()\n# Opens a brand new file (in 'x' mode will throw if already exists)\n\n>>> with open('spam.txt', mode='a') as spam:\n...     spam.write('My second line')\n# Appends to file and automatically closes afterward\n\n>>> with open('spam.txt') as spam:\n...     content = spam.read()\n...     print(content)\n# My first line\n#\n# My second line\n```\n\n----------------------------------------\n\nTITLE: Using Python type() Function with Different Data Types\nDESCRIPTION: This example demonstrates how to use the type() function to identify the data types of various Python objects. It shows the return value when applying type() to strings, integers, floats, lists, tuples, sets, and dictionaries.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/builtin/type.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> type('span')\n# <class 'str'>\n\n>>> type(99)\n# <class 'int'>\n\n>>> type(1.1)\n# <class 'float'>\n\n>>> type([1, 2])\n# <class 'list'>\n\n>>> type((1, 2))\n# <class 'tuple'>\n\n>>> type({1, 2})\n# <class 'set'>\n\n>>> type({'a': 1, 'b': 2})\n# <class 'dict'>\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Python Decorator\nDESCRIPTION: A simple Python decorator that wraps a function with pre and post processing. This example demonstrates how to create a basic decorator and apply it to a function using the '@' syntax.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/decorators.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef your_decorator(func):\n  def wrapper():\n    # Do stuff before func...\n    print(\"Before func!\")\n    func()\n    # Do stuff after func...\n    print(\"After func!\")\n  return wrapper\n\n@your_decorator\ndef foo():\n  print(\"Hello World!\")\n\nfoo()\n# Before func!\n# Hello World!\n# After func!\n```\n\n----------------------------------------\n\nTITLE: Basic For Loop in Python\nDESCRIPTION: Example of a for loop that iterates through elements in a list, executing the indented code block for each item.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/control-flow.md#2025-04-17_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n>>> pets = ['Bella', 'Milo', 'Loki']\n>>> for pet in pets:\n...     print(pet)\n...\n# Bella\n# Milo\n# Loki\n```\n\n----------------------------------------\n\nTITLE: Using get() Method to Safely Access Dictionary Values\nDESCRIPTION: Shows how to use the get() method to retrieve values from a dictionary with a fallback to None when the key doesn't exist, avoiding KeyError exceptions.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/dictionaries.md#2025-04-17_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n>>> wife = {'name': 'Rose', 'age': 33}\n\n>>> f'My wife name is {wife.get(\"name\")}'\n# 'My wife name is Rose'\n\n>>> f'She is {wife.get(\"age\")} years old.'\n# 'She is 33 years old.'\n\n>>> f'She is deeply in love with {wife.get(\"husband\")}'\n# 'She is deeply in love with None'\n```\n\n----------------------------------------\n\nTITLE: Mixing Boolean and Comparison Operators in Python\nDESCRIPTION: Examples demonstrating how to combine multiple boolean operators with comparison operators in a single expression, including operator precedence.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/control-flow.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> 2 + 2 == 4 and not 2 + 2 == 5 and 2 * 2 == 2 + 2\nTrue\n>>> # In the statement below 3 < 4 and 5 > 5 gets executed first evaluating to False\n>>> # Then 5 > 4 returns True so the results after True or False is True\n>>> 5 > 4 or 3 < 4 and 5 > 5\nTrue\n>>> # Now the statement within parentheses gets executed first so True and False returns False.\n>>> (5 > 4 or 3 < 4) and 5 > 5\nFalse\n```\n\n----------------------------------------\n\nTITLE: Removing Elements from Python Lists\nDESCRIPTION: Demonstrates various methods to remove elements from a list, including del() for removing by index, remove() for removing by value, and pop() for removing and returning an element.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/lists-and-tuples.md#2025-04-17_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n>>> furniture = ['table', 'chair', 'rack', 'shelf']\n>>> del furniture[2]\n>>> furniture\n# ['table', 'chair', 'shelf']\n\n>>> del furniture[2]\n>>> furniture\n# ['table', 'chair']\n\n>>> furniture = ['table', 'chair', 'rack', 'shelf']\n>>> furniture.remove('chair')\n>>> furniture\n# ['table', 'rack', 'shelf']\n\n>>> animals = ['cat', 'bat', 'rat', 'elephant']\n\n>>> animals.pop()\n'elephant'\n\n>>> animals\n['cat', 'bat', 'rat']\n\n>>> animals.pop(0)\n'cat'\n\n>>> animals\n['bat', 'rat']\n```\n\n----------------------------------------\n\nTITLE: Merging Python Dictionaries with Dictionary Unpacking Operator\nDESCRIPTION: Demonstrates how to merge two dictionaries using the ** dictionary unpacking operator in Python 3.5+. When keys overlap, the value from the second dictionary takes precedence.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/dictionaries.md#2025-04-17_snippet_19\n\nLANGUAGE: python\nCODE:\n```\n>>> dict_a = {'a': 1, 'b': 2}\n>>> dict_b = {'b': 3, 'c': 4}\n>>> dict_c = {**dict_a, **dict_b}\n>>> dict_c\n# {'a': 1, 'b': 3, 'c': 4}\n```\n\n----------------------------------------\n\nTITLE: List Concatenation and Replication in Python\nDESCRIPTION: Demonstrates how to concatenate lists using the + operator and replicate lists using the * operator. It also shows how to extend an existing list using concatenation.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/lists-and-tuples.md#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n>>> [1, 2, 3] + ['A', 'B', 'C']\n# [1, 2, 3, 'A', 'B', 'C']\n\n>>> ['X', 'Y', 'Z'] * 3\n# ['X', 'Y', 'Z', 'X', 'Y', 'Z', 'X', 'Y', 'Z']\n\n>>> my_list = [1, 2, 3]\n>>> my_list = my_list + ['A', 'B', 'C']\n>>> my_list\n# [1, 2, 3, 'A', 'B', 'C']\n```\n\n----------------------------------------\n\nTITLE: Implementing a Timer Decorator in Python\nDESCRIPTION: Implementation of the 'timer' decorator that measures and prints a function's execution time. Uses the pendulum library for time calculations and functools.wraps to preserve the wrapped function's metadata.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/blog/python-projects-with-poetry-and-vscode-part-3.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# how_long.py\nfrom functools import wraps\n\nimport pendulum\n\n\ndef timer(function):\n    \"\"\"\n    Simple Decorator to measure a function execution time.\n    \"\"\"\n\n    @wraps(function)\n    def function_wrapper():\n        start = pendulum.now()\n        function()\n        elapsed_time = pendulum.now() - start\n        print(f\"Execution Time: {elapsed_time.microseconds} ms.\")\n\n    return function_wrapper\n```\n\n----------------------------------------\n\nTITLE: Using max() with Lists and Tuples in Python\nDESCRIPTION: Demonstrates how to use the max() function to find the largest value in both a list and tuple data structure. The function evaluates all elements and returns the highest value.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/builtin/max.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> max([1, 2, 10, 40, 5])\n# 40\n>>> max((1, 2, 10, 40, 5))\n# 40\n```\n\n----------------------------------------\n\nTITLE: Custom Exception with Message in Python\nDESCRIPTION: Shows how to create and raise a custom exception with a custom error message.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/exception-handling.md#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclass MyCustomException(Exception):\n    pass\n\nraise MyCustomException('A custom message for my custom exception')\n```\n\n----------------------------------------\n\nTITLE: Checking if a Key Exists in a Dictionary\nDESCRIPTION: Shows how to check if a key exists in a dictionary using the 'in' operator with the keys() method or directly with the dictionary.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/dictionaries.md#2025-04-17_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n>>> person = {'name': 'Rose', 'age': 33}\n\n>>> 'name' in person.keys()\n# True\n\n>>> 'height' in person.keys()\n# False\n\n>>> 'skin' in person # You can omit keys()\n# False\n```\n\n----------------------------------------\n\nTITLE: Sorting Python Lists\nDESCRIPTION: Shows how to sort lists using the sort() method and the sorted() function. It demonstrates sorting in ascending and descending order, as well as sorting with a custom key function.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/lists-and-tuples.md#2025-04-17_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n>>> numbers = [2, 5, 3.14, 1, -7]\n>>> numbers.sort()\n>>> numbers\n# [-7, 1, 2, 3.14, 5]\n\nfurniture = ['table', 'chair', 'rack', 'shelf']\nfurniture.sort()\nfurniture\n# ['chair', 'rack', 'shelf', 'table']\n\n>>> furniture.sort(reverse=True)\n>>> furniture\n# ['table', 'shelf', 'rack', 'chair']\n\n>>> letters = ['a', 'z', 'A', 'Z']\n>>> letters.sort(key=str.lower)\n>>> letters\n# ['a', 'A', 'z', 'Z']\n\n>>> furniture = ['table', 'chair', 'rack', 'shelf']\n>>> sorted(furniture)\n# ['chair', 'rack', 'shelf', 'table']\n```\n\n----------------------------------------\n\nTITLE: Implementing a Python Decorator with Parameters\nDESCRIPTION: This decorator pattern allows you to pass parameters to the decorator itself. It uses a triple-nested function structure where the outermost function accepts decorator parameters.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/decorators.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport functools\n\ndef your_decorator(arg):\n  def decorator(func):\n    @functools.wraps(func) # For preserving the metadata of func.\n    def wrapper(*args,**kwargs):\n      # Do stuff before func possibly using arg...\n      result = func(*args,**kwargs)\n      # Do stuff after func possibly using arg...\n      return result\n    return wrapper\n  return decorator\n```\n\n----------------------------------------\n\nTITLE: Using range() Function with Default Parameters in Python\nDESCRIPTION: Demonstrates the basic usage of range() function in a for loop. The function starts at 0 by default, increments by 1, and stops before the specified number (5 in this case).\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/control-flow.md#2025-04-17_snippet_19\n\nLANGUAGE: python\nCODE:\n```\n>>> for i in range(5):\n...     print(f'Will stop at 5! or 4? ({i})')\n...\n# Will stop at 5! or 4? (0)\n# Will stop at 5! or 4? (1)\n# Will stop at 5! or 4? (2)\n# Will stop at 5! or 4? (3)\n# Will stop at 5! or 4? (4)\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Context Manager with contextlib.contextmanager in Python\nDESCRIPTION: Shows how to create a custom context manager using generator syntax and the contextlib.contextmanager decorator. This approach allows for simpler implementation of context managers without defining a full class.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/context-manager.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> import contextlib\n>>> @contextlib.contextmanager\n... def context_manager(num):\n...     print('Enter')\n...     yield num + 1\n...     print('Exit')\n...\n>>> with context_manager(2) as cm:\n...     # the following instructions are run when\n...     # the 'yield' point of the context manager is\n...     # reached. 'cm' will have the value that was yielded\n...     print('Right in the middle with cm = {}'.format(cm))\n...\n# Enter\n# Right in the middle with cm = 3\n# Exit\n```\n\n----------------------------------------\n\nTITLE: Function with Exception Handling in Python\nDESCRIPTION: Shows how to implement a function that raises exceptions based on parameter validation and how to handle those exceptions in the calling code using try/except blocks.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/debugging.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> def box_print(symbol, width, height):\n...     if len(symbol) != 1:\n...       raise Exception('Symbol must be a single character string.')\n...     if width <= 2:\n...       raise Exception('Width must be greater than 2.')\n...     if height <= 2:\n...       raise Exception('Height must be greater than 2.')\n...     print(symbol * width)\n...     for i in range(height - 2):\n...         print(symbol + (' ' * (width - 2)) + symbol)\n...     print(symbol * width)\n...\n>>> for sym, w, h in (('*', 4, 4), ('O', 20, 5), ('x', 1, 3), ('ZZ', 3, 3)):\n...     try:\n...         box_print(sym, w, h)\n...     except Exception as err:\n...         print('An exception happened: ' + str(err))\n...\n# ****\n# *  *\n# *  *\n# ****\n# OOOOOOOOOOOOOOOOOOOO\n# O                  O\n# O                  O\n# O                  O\n# OOOOOOOOOOOOOOOOOOOO\n# An exception happened: Width must be greater than 2.\n# An exception happened: Symbol must be a single character string.\n```\n\n----------------------------------------\n\nTITLE: Implementing Polymorphism in Python\nDESCRIPTION: Demonstrates polymorphism using Shape classes with different area calculations. Shows how different objects can be treated uniformly through a common interface.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/oop-basics.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass Shape:\n    def area(self):\n        pass\n\nclass Rectangle(Shape):\n    def __init__(self, width, height):\n        self.width = width\n        self.height = height\n\n    def area(self):\n        return self.width * self.height\n\nclass Circle(Shape):\n    def __init__(self, radius):\n        self.radius = radius\n\n    def area(self):\n        return 3.14 * self.radius ** 2\n\nshapes = [Rectangle(4, 5), Circle(7)]\nfor shape in shapes:\n    print(shape.area())\n```\n\n----------------------------------------\n\nTITLE: Local and Global Scope in Python\nDESCRIPTION: Demonstrates the concept of local and global variable scopes in Python functions. This example shows how global variables can be accessed inside functions while local variables remain confined to their function scope.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/functions.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nglobal_variable = 'I am available everywhere'\n\n>>> def some_function():\n...     print(global_variable)  # because is global\n...     local_variable = \"only available within this function\"\n...     print(local_variable)\n...\n>>> # the following code will throw error because\n>>> # 'local_variable' only exists inside 'some_function'\n>>> print(local_variable)\nTraceback (most recent call last):\n  File \"<stdin>\", line 10, in <module>\nNameError: name 'local_variable' is not defined\n```\n\n----------------------------------------\n\nTITLE: Using isinstance() to check object types in Python\nDESCRIPTION: Demonstrates how to use the isinstance() function to verify if a value is of a specific type. The first example checks if 1 is an integer (returns True), while the second example checks if 1 is a string (returns False).\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/builtin/isinstance.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> isinstance(1, int)\n# True\n>>> isinstance(1, str)\n# False\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Logging in Python\nDESCRIPTION: Shows how to set up basic logging configuration to display log messages on screen. This configures the logging level and format for displaying timestamps and log levels.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/debugging.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> import logging\n>>> logging.basicConfig(level=logging.DEBUG, format=' %(asctime)s - %(levelname)s- %(message)s')\n```\n\n----------------------------------------\n\nTITLE: Reading JSON File in Python\nDESCRIPTION: Demonstrates how to read a JSON file using Python's json module. The content is loaded into a Python object using the json.load() function.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/json-yaml.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> import json\n>>> with open(\"filename.json\", \"r\") as f:\n...     content = json.load(f)\n```\n\n----------------------------------------\n\nTITLE: Using items() Method to Access Dictionary Key-Value Pairs\nDESCRIPTION: Shows how to iterate through all key-value pairs in a dictionary using the items() method, which returns each pair as a tuple.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/dictionaries.md#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n>>> pet = {'color': 'red', 'age': 42}\n>>> for item in pet.items():\n...     print(item)\n...\n# ('color', 'red')\n# ('age', 42)\n```\n\n----------------------------------------\n\nTITLE: Creating Lists with For Loops and List Comprehensions in Python\nDESCRIPTION: Demonstrates the difference between creating a new list using a traditional for loop and a list comprehension. Both methods create an identical list from an existing collection of names.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/comprehensions.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> names = ['Charles', 'Susan', 'Patrick', 'George']\n\n>>> new_list = []\n>>> for n in names:\n...     new_list.append(n)\n...\n>>> new_list\n# ['Charles', 'Susan', 'Patrick', 'George']\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> names = ['Charles', 'Susan', 'Patrick', 'George']\n\n>>> new_list = [n for n in names]\n>>> new_list\n# ['Charles', 'Susan', 'Patrick', 'George']\n```\n\n----------------------------------------\n\nTITLE: Return Values in Python Functions\nDESCRIPTION: Explains how to return values from Python functions using the return statement. This example defines a function that adds two numbers and returns the result which is then stored in a variable.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/functions.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> def sum_two_numbers(number_1, number_2):\n...    return number_1 + number_2\n...\n>>> result = sum_two_numbers(7, 8)\n>>> print(result)\n# 15\n```\n\n----------------------------------------\n\nTITLE: Reading JSON File in Python\nDESCRIPTION: Demonstrates how to read a JSON file and parse its contents into a Python object using json.loads().\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/modules/json-module.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> import json\n>>> with open(\"filename.json\", \"r\") as f:\n...     json_content = json.loads(f.read())\n...\n>>> json.loads(json_content)\n# {'name': 'Charles', 'age': 33, 'has_hair': False}\n```\n\n----------------------------------------\n\nTITLE: Template for a Reusable Python Decorator\nDESCRIPTION: A comprehensive template for creating decorators that preserve the original function's metadata using functools.wraps. This pattern works for functions with or without parameters and handles return values correctly.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/decorators.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport functools\n\ndef your_decorator(func):\n  @functools.wraps(func) # For preserving the metadata of func.\n  def wrapper(*args,**kwargs):\n    # Do stuff before func...\n    result = func(*args,**kwargs)\n    # Do stuff after func..\n    return result\n  return wrapper\n```\n\n----------------------------------------\n\nTITLE: Slicing Python Lists\nDESCRIPTION: Illustrates how to use slicing to get sublists from a Python list. It covers various slicing techniques including start:end, omitting start or end, and negative indexes in slices.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/lists-and-tuples.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> furniture = ['table', 'chair', 'rack', 'shelf']\n\n>>> furniture[0:4]\n# ['table', 'chair', 'rack', 'shelf']\n\n>>> furniture[1:3]\n# ['chair', 'rack']\n\n>>> furniture[0:-1]\n# ['table', 'chair', 'rack']\n\n>>> furniture[:2]\n# ['table', 'chair']\n\n>>> furniture[1:]\n# ['chair', 'rack', 'shelf']\n\n>>> furniture[:]\n# ['table', 'chair', 'rack', 'shelf']\n```\n\n----------------------------------------\n\nTITLE: Iterating Through Multiple Lists with zip() in Python\nDESCRIPTION: Shows how to use the zip() function to iterate through multiple lists simultaneously, pairing elements from each list.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/lists-and-tuples.md#2025-04-17_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n>>> furniture = ['table', 'chair', 'rack', 'shelf']\n>>> price = [100, 50, 80, 40]\n\n>>> for item, amount in zip(furniture, price):\n...     print(f'The {item} costs ${amount}')\n# The table costs $100\n# The chair costs $50\n# The rack costs $80\n# The shelf costs $40\n```\n\n----------------------------------------\n\nTITLE: Creating Directories with os.makedirs in Python\nDESCRIPTION: Demonstrates how to create new directories using os.makedirs() function, which can create multiple levels of directories at once.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/modules/os-module.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> import os\n>>> os.makedirs('C:\\\\delicious\\\\walnut\\\\waffles')\n```\n\n----------------------------------------\n\nTITLE: Checking File and Directory Existence in Python\nDESCRIPTION: Demonstrates how to check if a file or directory exists, and how to determine if a path is a file or a directory using os.path functions.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/modules/os-module.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> import os\n\n>>> os.path.exists('.')\n# True\n\n>>> os.path.exists('setup.py')\n# True\n\n>>> os.path.exists('/etc')\n# True\n\n>>> os.path.exists('nonexistentfile')\n# False\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> import os\n\n>>> os.path.isfile('setup.py')\n# True\n\n>>> os.path.isfile('/home')\n# False\n\n>>> os.path.isfile('nonexistentfile')\n# False\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> import os\n\n>>> os.path.isdir('/')\n# True\n\n>>> os.path.isdir('setup.py')\n# False\n\n>>> os.path.isdir('/spam')\n# False\n```\n\n----------------------------------------\n\nTITLE: Defining a Function with Args and Kwargs in Python\nDESCRIPTION: Demonstrates how to define a function that accepts variable positional arguments (*args) and keyword arguments (**kwargs), with examples of different calling patterns.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/args-and-kwargs.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> def some_function(*args, **kwargs):\n...     pass\n...\n>>> # call some_function with any number of arguments\n>>> some_function(arg1, arg2, arg3)\n\n>>> # call some_function with any number of keywords\n>>> some_function(key1=arg1, key2=arg2, key3=arg3)\n\n>>> # call both, arguments and keywords\n>>> some_function(arg, key1=arg1)\n\n>>> # or none\n>>> some_function()\n```\n\n----------------------------------------\n\nTITLE: Handling Custom Exceptions in Python\nDESCRIPTION: Demonstrates how to handle custom exceptions using try-except blocks.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/exception-handling.md#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ntry:\n    raise MyCustomException('A custom message for my custom exception')\nexcept MyCustomException:\n    print('My custom exception was raised')\n```\n\n----------------------------------------\n\nTITLE: Case Conversion Methods for Python Strings\nDESCRIPTION: This example shows how to use upper(), lower(), and title() methods to change the case of Python strings.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/manipulating-strings.md#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ngreet = 'Hello world!'\ngreet.upper()\n# 'HELLO WORLD!'\n\ngreet.lower()\n# 'hello world!'\n\ngreet.title()\n# 'Hello World!'\n```\n\n----------------------------------------\n\nTITLE: Implementing Dataclass Decorator in Python\nDESCRIPTION: Shows how to use the @dataclass decorator to create a Number class with an automatically generated __init__ method and type hints.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/dataclasses.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> @dataclass\n... class Number:\n...     val: int\n...\n>>> obj = Number(2)\n>>> obj.val\n# 2\n```\n\n----------------------------------------\n\nTITLE: Basic Lambda Function in Python\nDESCRIPTION: Demonstrates how to create and use a lambda function (anonymous function) in Python. This example shows a regular function and its equivalent lambda expression for adding two numbers.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/functions.md#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> def add(x, y):\n...     return x + y\n...\n>>> add(5, 3)\n# 8\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> add = lambda x, y: x + y\n>>> add(5, 3)\n# 8\n```\n\n----------------------------------------\n\nTITLE: Basic Division Error Handling in Python\nDESCRIPTION: Demonstrates basic exception handling with a division function that raises ZeroDivisionError when attempting to divide by zero.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/exception-handling.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef divide(dividend , divisor):\n    print(dividend / divisor)\n\ndivide(dividend=10, divisor=5)\ndivide(dividend=10, divisor=0)\n```\n\n----------------------------------------\n\nTITLE: Directory Creation and Management\nDESCRIPTION: Examples of creating directories using both os.makedirs and pathlib.mkdir with proper error handling.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/file-directory-path.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> import os\n>>> os.makedirs('C:\\\\delicious\\\\walnut\\\\waffles')\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> from pathlib import Path\n>>> cwd = Path.cwd()\n>>> (cwd / 'delicious' / 'walnut' / 'waffles').mkdir(parents=True)\n```\n\n----------------------------------------\n\nTITLE: Basic Phone Number Pattern Matching in Python\nDESCRIPTION: Demonstrates creating a regex pattern for finding phone numbers and using the search method to find matches in a string. The example shows how to extract the matched text using the group() method.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/regular-expressions.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> phone_num_regex = re.compile(r'\\d\\d\\d-\\d\\d\\d-\\d\\d\\d\\d')\n\n>>> mo = phone_num_regex.search('My number is 415-555-4242.')\n\n>>> print(f'Phone number found: {mo.group()}')\n# Phone number found: 415-555-4242\n```\n\n----------------------------------------\n\nTITLE: Creating Sets with Set Comprehension in Python\nDESCRIPTION: Shows how to use set comprehension to create a new set by applying an operation to each element of an existing set.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/comprehensions.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> b = {\"abc\", \"def\"}\n>>> {s.upper() for s in b}\n{\"ABC\", \"DEF\"}\n```\n\n----------------------------------------\n\nTITLE: Using a Timer Decorator Example in Python\nDESCRIPTION: Example of how to use the 'how_long' decorator to measure a function's execution time. The decorator prints the execution time in milliseconds after the function completes.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/blog/python-projects-with-poetry-and-vscode-part-3.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom how_long import timer\n\n@timer\ndef test_function():\n    [i for i in range(10000)]\n\ntest_function()\n# Execution Time: 955 ms.\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Unique Elements in Python Sets\nDESCRIPTION: Shows how a set automatically removes duplicate values and that sets are unordered, thus cannot be indexed.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/sets.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> s = {1, 2, 3, 2, 3, 4}\n>>> s\n# {1, 2, 3, 4}\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> s = {1, 2, 3}\n>>> s[0]\n# Traceback (most recent call last):\n#   File \"<stdin>\", line 1, in <module>\n# TypeError: 'set' object does not support indexing\n```\n\n----------------------------------------\n\nTITLE: Using enumerate() in Python List Iteration\nDESCRIPTION: Demonstrates how to use the enumerate() function to get both the index and value of list elements during iteration.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/lists-and-tuples.md#2025-04-17_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n>>> furniture = ['table', 'chair', 'rack', 'shelf']\n\n>>> for index, item in enumerate(furniture):\n...     print(f'index: {index} - item: {item}')\n# index: 0 - item: table\n# index: 1 - item: chair\n# index: 2 - item: rack\n# index: 3 - item: shelf\n```\n\n----------------------------------------\n\nTITLE: File System Operations\nDESCRIPTION: Demonstrates file and directory operations like copying, moving, and getting file sizes using shutil module.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/file-directory-path.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> import shutil, os\n\n>>> os.chdir('C:\\\\')\n>>> shutil.copy('C:\\\\spam.txt', 'C:\\\\delicious')\n# C:\\\\delicious\\\\spam.txt'\n\n>>> shutil.copy('eggs.txt', 'C:\\\\delicious\\\\eggs2.txt')\n# 'C:\\\\delicious\\\\eggs2.txt'\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> import shutil\n\n>>> shutil.move('C:\\\\bacon.txt', 'C:\\\\eggs')\n# 'C:\\\\eggs\\\\bacon.txt'\n```\n\n----------------------------------------\n\nTITLE: Replacing Substrings with replace() Method in Python\nDESCRIPTION: This snippet shows how to use the replace() method to substitute substrings within Python strings, with an optional limit on the number of replacements.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/manipulating-strings.md#2025-04-17_snippet_13\n\nLANGUAGE: python\nCODE:\n```\ntext = \"Hello, world!\"\ntext.replace(\"world\", \"planet\")\n# 'Hello, planet!'\n\nfruits = \"apple, banana, cherry, apple\"\nfruits.replace(\"apple\", \"orange\", 1)\n# 'orange, banana, cherry, apple'\n\nsentence = \"I like apples, Apples are my favorite fruit\"\nsentence.replace(\"apples\", \"oranges\")\n# 'I like oranges, Apples are my favorite fruit'\n```\n\n----------------------------------------\n\nTITLE: Using zip() to Iterate Over Multiple Lists in Python\nDESCRIPTION: Demonstrates how to use zip() to iterate over two lists simultaneously, combining furniture items with their corresponding prices. The example shows how to unpack paired values in a for loop and format the output using f-strings.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/builtin/zip.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfurniture = ['table', 'chair', 'rack', 'shelf']\nprice = [100, 50, 80, 40]\n\nfor item, amount in zip(furniture, price):\n    print(f'The {item} costs ${amount}')\n# The table costs $100\n# The chair costs $50\n# The rack costs $80\n# The shelf costs $40\n```\n\n----------------------------------------\n\nTITLE: Loading Configuration File with Anyconfig in Python\nDESCRIPTION: Demonstrates how to use the Anyconfig package to load a configuration file. Anyconfig abstracts the underlying file format, allowing for easy handling of JSON, YAML, TOML, and other formats.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/json-yaml.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> import anyconfig\n>>> conf1 = anyconfig.load(\"/path/to/foo/conf.d/a.yml\")\n```\n\n----------------------------------------\n\nTITLE: Demonstrating List Slicing in Python\nDESCRIPTION: This snippet shows different ways to slice a list using Python's slice notation. It demonstrates slicing with various start, stop, and step values, including negative indexing.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/builtin/slice.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> furniture = ['table', 'chair', 'rack', 'shelf']\n\n>>> furniture[0:4]\n# ['table', 'chair', 'rack', 'shelf']\n\n>>> furniture[1:3]\n# ['chair', 'rack']\n\n>>> furniture[0:-1]\n# ['table', 'chair', 'rack']\n\n>>> furniture[:2]\n# ['table', 'chair']\n\n>>> furniture[1:]\n# ['chair', 'rack', 'shelf']\n\n>>> furniture[:]\n# ['table', 'chair', 'rack', 'shelf']\n```\n\n----------------------------------------\n\nTITLE: Practical Example of Main Function Usage in Python\nDESCRIPTION: Shows a practical example of implementing the main function check with a simple addition function. The add() function will only be executed when the script is run directly.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/main.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef add(a, b):\n    return a+b\n\nif __name__ == \"__main__\":\n    add(3, 5)\n```\n\n----------------------------------------\n\nTITLE: Using ascii() with Different Input Types in Python\nDESCRIPTION: Demonstrates how the ascii() function works with different input types including ASCII characters, non-ASCII characters, and collections. The function returns a string representation with non-ASCII characters escaped using hex notation.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/builtin/ascii.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> ascii('A')\n# 'A'\n\n>>> ascii('ë')\n# '\\xeb'\n\n>>> ascii(['A', 'ë'])\n# ['A', '\\xeb']\n```\n\n----------------------------------------\n\nTITLE: Serializing Python Object to JSON using json.dumps()\nDESCRIPTION: Shows how to use json.dumps() method to convert a Python dictionary into a JSON string.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/modules/json-module.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> import json\n\n>>> python_person = {'name': 'Charles', 'age': 33, 'has_hair': False, 'hobbies': ['photography', 'running']}\n>>> json_person = json.dumps(python_person)\n\n>>> json_person\n# '{\"name\": \"Charles\", \"age\": 33, \"has_hair\": false, \"hobbies\": [\"photography\", \"running\"]}'\n\n>>> type(json_person)\n# <class 'str'>\n```\n\n----------------------------------------\n\nTITLE: Implementing Inheritance in Python\nDESCRIPTION: Shows class inheritance with a base Animal class and derived Dog and Cat classes. Demonstrates method overriding and how child classes can extend parent class functionality.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/oop-basics.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass Animal:\n    def __init__(self, name):\n        self.name = name\n\n    def speak(self):\n        print(\"\")\n\nclass Dog(Animal):\n    def speak(self):\n        print(\"Woof!\")\n\nclass Cat(Animal):\n    def speak(self):\n        print(\"Meow!\")\n\ndog = Dog(\"Rover\")\ncat = Cat(\"Whiskers\")\ndog.speak()   # output: Woof!\ncat.speak()   # output: Meow!\n```\n\n----------------------------------------\n\nTITLE: Basic Length Calculation using len() in Python\nDESCRIPTION: Demonstrates how to use len() function to get the number of items in different Python objects like strings and lists. Shows that len() returns an integer representing the number of elements.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/builtin/len.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> len('hello')\n# 5\n\n>>> len(['cat', 3, 'dog'])\n# 3\n```\n\n----------------------------------------\n\nTITLE: Converting Values to Integers Using Python's int() Function\nDESCRIPTION: This code demonstrates different ways to use the int() function in Python. It shows how to convert a string to an integer, convert a float to an integer (truncating the decimal portion), and how calling int() without arguments returns 0.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/builtin/int.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> # transform a string to an integer\n>>> from_integer = int('29')\n>>> from_integer\n# 29\n>>> type(from_integer)\n# <class 'int'>\n\n>>> # transform a float to integer\n>>> from_float = int(-3.14)\n>>> from_float\n# -3\n>>> type(from_float)\n# <class 'int'>\n\n>>> # return an empty string\n>>> int()\n# 0\n```\n\n----------------------------------------\n\nTITLE: Accessing Kwargs in Python Functions\nDESCRIPTION: Demonstrates how to access variable keyword arguments (**kwargs) inside a function. The kwargs parameter is treated as a dictionary containing all the keyword arguments passed to the function.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/args-and-kwargs.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> def some_function(**kwargs):\n...     print(f'keywords: {kwargs} as {type(kwargs)}')\n...\n>>> some_function(key1='arg1', key2='arg2')\n# keywords: {'key1': 'arg1', 'key2': 'arg2'} as <class 'dict'>\n```\n\n----------------------------------------\n\nTITLE: Path Joining with os.path and pathlib\nDESCRIPTION: Demonstrates different methods of joining file paths using os.path.join and pathlib.Path.joinpath across Windows and Unix systems.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/file-directory-path.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> import os\n\n>>> os.path.join('usr', 'bin', 'spam')\n# 'usr\\\\bin\\\\spam'\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> from pathlib import Path\n\n>>> print(Path('usr').joinpath('bin').joinpath('spam'))\n# usr/bin/spam\n```\n\n----------------------------------------\n\nTITLE: Creating a Countdown with range() in Python\nDESCRIPTION: Demonstrates using range() with a negative step argument to count down instead of up. The loop starts at 5, decrements by 1 each iteration, and stops at -1 (not including -1).\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/control-flow.md#2025-04-17_snippet_21\n\nLANGUAGE: python\nCODE:\n```\n>>> for i in range(5, -1, -1):\n...     print(i)\n...\n# 5\n# 4\n# 3\n# 2\n# 1\n# 0\n```\n\n----------------------------------------\n\nTITLE: Initializing Python Sets\nDESCRIPTION: Demonstrates two ways to create sets in Python: using curly braces {} and the built-in function set(). It also warns about the pitfall of creating an empty dictionary instead of an empty set.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/sets.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> s = {1, 2, 3}\n>>> s = set([1, 2, 3])\n\n>>> s = {}  # this will create a dictionary instead of a set\n>>> type(s)\n# <class 'dict'>\n```\n\n----------------------------------------\n\nTITLE: Defining a Static Method in a Python Class\nDESCRIPTION: This example shows the basic syntax for defining a static method in a Python class using the @staticmethod decorator.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/builtin/staticmethod.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> class C:\n>>>    @staticmethod\n>>>    def function(): ....\n```\n\n----------------------------------------\n\nTITLE: Setting Key-Value Pairs Using Subscript Operator in Python Dictionaries\nDESCRIPTION: Demonstrates how to add a new key-value pair to an existing dictionary using the subscript operator. The example adds the cat's age to the dictionary.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/dictionaries.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> my_cat = {\n...  'size': 'fat',\n...  'color': 'gray',\n...  'disposition': 'loud',\n... }\n>>> my_cat['age_years'] = 2\n>>> print(my_cat)\n...\n# {'size': 'fat', 'color': 'gray', 'disposition': 'loud', 'age_years': 2}\n```\n\n----------------------------------------\n\nTITLE: Creating a Python List\nDESCRIPTION: Demonstrates how to create a simple Python list containing string elements.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/lists-and-tuples.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n['John', 'Peter', 'Debora', 'Charles']\n```\n\n----------------------------------------\n\nTITLE: Unpacking Key-Value Pairs in Dictionary Iteration\nDESCRIPTION: Demonstrates how to unpack key-value pairs while iterating through a dictionary with the items() method, allowing direct access to both components.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/dictionaries.md#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n>>> pet = {'color': 'red', 'age': 42}\n>>> for key, value in pet.items():\n...     print(f'Key: {key} Value: {value}')\n...\n# Key: color Value: red\n# Key: age Value: 42\n```\n\n----------------------------------------\n\nTITLE: Complete if-elif-else Chain in Python\nDESCRIPTION: Example demonstrating a full if-elif-else chain where the else block executes when all previous conditions are False.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/control-flow.md#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n>>> name = 'Antony'\n\n>>> if name == 'Debora':\n...    print('Hi Debora!')\n... elif name == 'George':\n...    print('Hi George!')\n... else:\n...    print('Who are you?')\n...\n# Who are you?\n```\n\n----------------------------------------\n\nTITLE: Basic Switch-Case (Pattern Matching) in Python\nDESCRIPTION: Example of Python 3.10's structural pattern matching (switch-case) for single values, introduced in PEP 622.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/control-flow.md#2025-04-17_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n>>> response_code = 201\n>>> match response_code:\n...     case 200:\n...         print(\"OK\")\n...     case 201:\n...         print(\"Created\")\n...     case 300:\n...         print(\"Multiple Choices\")\n...     case 307:\n...         print(\"Temporary Redirect\")\n...     case 404:\n...         print(\"404 Not Found\")\n...     case 500:\n...         print(\"Internal Server Error\")\n...     case 502:\n...         print(\"502 Bad Gateway\")\n...\n# Created\n```\n\n----------------------------------------\n\nTITLE: Rounding Decimal Places in f-Strings\nDESCRIPTION: Shows how to round floating-point numbers to a specific number of decimal places using the :.2f format specifier in f-strings.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/string-formatting.md#2025-04-17_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n>>> a = 3.1415926\n>>> f\"{a:.2f}\"\n# '3.14'\n```\n\n----------------------------------------\n\nTITLE: Iterating Over args in Python\nDESCRIPTION: Shows how to iterate through each argument passed to a function via *args, processing each argument individually.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/blog/python-easy-args-kwargs.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef some_function(*args):\n    for a in args:\n        print(a)\n\n\nsome_function('arg1', 'arg2', 'arg3')\n# arg1\n# arg2\n# arg3\n```\n\n----------------------------------------\n\nTITLE: Default Case in Pattern Matching\nDESCRIPTION: Example showing how to specify a default case using the underscore (_) wildcard pattern in Python's pattern matching.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/control-flow.md#2025-04-17_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n>>> response_code = 800\n>>> match response_code:\n...     case 200 | 201:\n...         print(\"OK\")\n...     case 300 | 307:\n...         print(\"Redirect\")\n...     case 400 | 401:\n...         print(\"Bad Request\")\n...     case 500 | 502:\n...         print(\"Internal Server Error\")\n...     case _:\n...         print(\"Invalid Code\")\n...\n# Invalid Code\n```\n\n----------------------------------------\n\nTITLE: Working Directory Operations\nDESCRIPTION: Shows how to get and change the current working directory using both os and pathlib approaches.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/file-directory-path.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> import os\n\n>>> os.getcwd()\n# 'C:\\\\Python34'\n>>> os.chdir('C:\\\\Windows\\\\System32')\n\n>>> os.getcwd()\n# 'C:\\\\Windows\\\\System32'\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> from pathlib import Path\n>>> from os import chdir\n\n>>> print(Path.cwd())\n# /home/asweigart\n\n>>> chdir('/usr/lib/python3.6')\n>>> print(Path.cwd())\n# /usr/lib/python3.6\n```\n\n----------------------------------------\n\nTITLE: Using the with Statement with File Objects in Python\nDESCRIPTION: Demonstrates how to use Python's 'with' statement with file objects as context managers. This ensures files are automatically closed when the context ends, preventing resource leaks.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/context-manager.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> with open(filename) as f:\n...     file_contents = f.read()\n...\n>>> # the open_file object has automatically been closed.\n```\n\n----------------------------------------\n\nTITLE: Reading ZIP Files with Python's zipfile Module\nDESCRIPTION: Demonstrates how to open a ZIP file, list its contents, and retrieve compression information for a specific file using the ZipFile class.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/modules/zipfile-module.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> with zipfile.ZipFile('example.zip') as example_zip:\n...     print(example_zip.namelist())\n...     spam_info = example_zip.getinfo('spam.txt')\n...     print(spam_info.file_size)\n...     print(spam_info.compress_size)\n...     print('Compressed file is %sx smaller!' % (round(spam_info.file_size / spam_info.compress_size, 2)))\n...\n# ['spam.txt', 'cats/', 'cats/catnames.txt', 'cats/zophie.jpg']\n# 13908\n# 3828\n# 'Compressed file is 3.63x smaller!'\n```\n\n----------------------------------------\n\nTITLE: Implementing if-elif Statements in Python\nDESCRIPTION: Example showing how elif (else if) statements are evaluated only after the preceding if condition is False.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/control-flow.md#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> name = 'George'\n\n>>> if name == 'Debora':\n...    print('Hi Debora!')\n... elif name == 'George':\n...    print('Hi George!')\n...\n# Hi George!\n```\n\n----------------------------------------\n\nTITLE: Using Keyword Arguments in Python Functions\nDESCRIPTION: Shows how to use keyword arguments to make function calls more explicit and readable. This example defines a function that takes two parameters and demonstrates calling it with and without keyword arguments.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/functions.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> def say_hi(name, greeting):\n...    print(f\"{greeting} {name}\")\n...\n>>> # without keyword arguments\n>>> say_hi('John', 'Hello')\n# Hello John\n\n>>> # with keyword arguments\n>>> say_hi(name='Anna', greeting='Hi')\n# Hi Anna\n```\n\n----------------------------------------\n\nTITLE: Set and Dictionary Comprehension Examples\nDESCRIPTION: Shows how to use comprehension syntax with sets and dictionaries, demonstrating the similarity to list comprehensions.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/blog/python-comprehensions-step-by-step.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> my_set = {\"abc\", \"def\"}\n\n>>> new_set = set()\n>>> for s in my_set:\n...    new_set.add(s.upper())\n>>> print(new_set)\n\n>>> new_set = {s.upper() for s in my_set}\n>>> print(new_set)\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> my_dict = {'name': 'Christine', 'age': 98}\n\n>>> new_dict = {}\n>>> for key, value in my_dict.items():\n...     new_dict[key] = value\n>>> print(new_dict)\n\n>>> new_dict = {key: value for key, value in my_dict.items()}\n>>> print(new_dict)\n```\n\n----------------------------------------\n\nTITLE: Using 'in' and 'not in' Operators with Python Lists\nDESCRIPTION: Demonstrates how to use the 'in' and 'not in' operators to check for the presence or absence of elements in a list.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/lists-and-tuples.md#2025-04-17_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n>>> 'rack' in ['table', 'chair', 'rack', 'shelf']\n# True\n\n>>> 'bed' in ['table', 'chair', 'rack', 'shelf']\n# False\n\n>>> 'bed' not in furniture\n# True\n\n>>> 'rack' not in furniture\n# False\n```\n\n----------------------------------------\n\nTITLE: Using Continue Statement in While Loop\nDESCRIPTION: Example of using the continue statement to skip the rest of the current iteration and jump back to the start of the loop when certain conditions are met.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/control-flow.md#2025-04-17_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n>>> while True:\n...     name = input('Who are you? ')\n...     if name != 'Joe':\n...         continue\n...     password = input('Password? (It is a fish.): ')\n...     if password == 'swordfish':\n...         break\n...\n>>> print('Access granted.')\n# Who are you? Charles\n# Who are you? Debora\n# Who are you? Joe\n# Password? (It is a fish.): swordfish\n# Access granted.\n```\n\n----------------------------------------\n\nTITLE: Using Custom Parameter Names Instead of args/kwargs in Python\nDESCRIPTION: Shows that while args and kwargs are conventional parameter names, you can use custom names with the * and ** operators. However, following the convention is recommended for code readability.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/blog/python-easy-args-kwargs.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# This function would work just fine\ndef some_function(*arguments, **keywords):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Using map() with Multiple Iterables and Lambda Function\nDESCRIPTION: Shows how to use map() with multiple iterables and a lambda function. The multi_map function accepts a function and variable number of iterables, applies map() to them, and returns the result as a list.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/builtin/map.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef multi_map(func, *iters):\n  my_map = map(func, *iters)\n  return list(my_map)\n\nlist1 = [1,2,3]\nlist2 = [4,5,6]\n\nprint(multi_map((lambda item1, item2: item1*item2), list1, list2))\n```\n\n----------------------------------------\n\nTITLE: Using f-Strings for String Formatting in Python 3.6+\nDESCRIPTION: Shows f-strings (formatted string literals), the recommended way to format strings in Python 3.6+. F-strings allow expressions to be evaluated at runtime inside string literals.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/string-formatting.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> name = 'Elizabeth'\n>>> f'Hello {name}!'\n# 'Hello Elizabeth!'\n```\n\n----------------------------------------\n\nTITLE: Using strftime() Method\nDESCRIPTION: Demonstrates how to format datetime objects into human-readable strings using strftime().\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/modules/datetime-module.md#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n>>> from datetime import datetime\n>>> now = datetime.now()\n>>> now\n# datetime.datetime(2022, 7, 23, 20, 31, 19, 751479)\n\n>>> now.strftime(\"%d-%b-%Y\")\n# '23-Jul-2022'\n\n>>> now.strftime(\"%d-%m-%Y\")\n# '23-07-2022'\n\n>>> now.strftime(\"%d-%b-%Y\")\n# '23-Jul-2022'\n\n>>> now.strftime(\"%d-%m-%Y\")\n# '23-07-2022'\n\n>>> now.strftime(\"%m/%d/%Y\")\n# '07/23/2022'\n\n>>> now.strftime(\"%b/%d/%Y - %H:%M:%S\")\n# 'Jul/23/2022 - 20:31:19'\n```\n\n----------------------------------------\n\nTITLE: Using range() with start and stop parameters\nDESCRIPTION: Example demonstrating range() with both start and stop parameters. The range begins at the start value (1) and iterates up to but not including the stop value (8).\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/builtin/range.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> for i in range(1,8):\n...     print(i)\n# 1\n# 2\n# 3\n# 4\n# 5\n# 6\n# 7\n```\n\n----------------------------------------\n\nTITLE: Checking Path Types and Existence\nDESCRIPTION: Examples of validating paths, checking if they exist, and determining if they are files or directories.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/modules/pathlib-module.md#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom pathlib import Path\n\n>>> Path('.').exists()\n# True\n\n>>> Path('setup.py').is_file()\n# True\n\n>>> Path('/').is_dir()\n# True\n```\n\n----------------------------------------\n\nTITLE: Iterating Through File Lines in Python\nDESCRIPTION: Demonstrates how to iterate through a file line by line using a for loop, which is memory efficient for large files as it reads one line at a time.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/reading-and-writing-files.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nwith open('sonnet29.txt') as sonnet_file:\n    for line in sonnet_file:\n        print(line, end='')\n\n# When, in disgrace with fortune and men's eyes,\n# I all alone beweep my outcast state,\n# And trouble deaf heaven with my bootless cries,\n# And look upon myself and curse my fate,\n```\n\n----------------------------------------\n\nTITLE: Removing Dictionary Items with popitem() Method\nDESCRIPTION: Demonstrates the popitem() method which removes and returns the last inserted item in a dictionary as a key-value tuple.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/dictionaries.md#2025-04-17_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n>>> wife = {'name': 'Rose', 'age': 33, 'hair': 'brown'}\n>>> wife.popitem()\n# ('hair', 'brown')\n>>> wife\n# {'name': 'Rose', 'age': 33}\n```\n\n----------------------------------------\n\nTITLE: Using If-Else in List Comprehensions in Python\nDESCRIPTION: Demonstrates how to incorporate an if-else statement within a list comprehension to conditionally modify list elements.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/comprehensions.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> nums = [1, 2, 3, 4, 5, 6]\n>>> new_list = [num*2 if num % 2 == 0 else num for num in nums]\n>>> print(new_list)\n# [1, 4, 3, 8, 5, 12]\n```\n\n----------------------------------------\n\nTITLE: Iterating Over kwargs Key-Value Pairs in Python\nDESCRIPTION: Shows how to iterate through each keyword argument passed to a function via **kwargs, accessing both keys and values.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/blog/python-easy-args-kwargs.md#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndef some_function(**kwargs):\n    for key, value in kwargs.items():\n        print(f'{key}: {value}')\n\n\nsome_function(key1='arg1', key2='arg2', key3='arg3')\n# key1: arg1\n# key2: arg2\n# key3: arg3\n```\n\n----------------------------------------\n\nTITLE: Using strptime() Method\nDESCRIPTION: Shows how to parse strings into datetime objects using strptime() with various format patterns.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/modules/datetime-module.md#2025-04-17_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n>>> from datetime import datetime\n\n>>> datetime_str = '12-Jul-2023'\n>>> datetime.strptime(datetime_str, '%d-%b-%Y')\n# datetime.datetime(2023, 7, 12, 0, 0)\n\n>>> datetime_str = 'Jul/12/2023 - 14:38:37'\n>>> datetime.strptime(datetime_str, \"%b/%d/%Y - %H:%M:%S\")\n# datetime.datetime(2023, 7, 12, 14, 38, 37)\n```\n\n----------------------------------------\n\nTITLE: Try-Except Block Implementation in Python\nDESCRIPTION: Shows how to handle ZeroDivisionError using try-except blocks to provide a user-friendly error message.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/exception-handling.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef divide(dividend , divisor):\n    try:\n        print(dividend / divisor)\n    except ZeroDivisionError:\n        print('You can not divide by 0')\n\ndivide(dividend=10, divisor=5)\ndivide(dividend=10, divisor=0)\n```\n\n----------------------------------------\n\nTITLE: Reading YAML File using Ruamel.yaml in Python\nDESCRIPTION: Demonstrates how to read a YAML file using the Ruamel.yaml library. This method preserves comments and allows for modification of YAML content without altering comments.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/json-yaml.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> from ruamel.yaml import YAML\n\n>>> with open(\"filename.yaml\") as f:\n...     yaml=YAML()\n...     yaml.load(f)\n```\n\n----------------------------------------\n\nTITLE: Using now() Method with DateTime\nDESCRIPTION: Shows how to get current system time and access its attributes using now() method.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/modules/datetime-module.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> from datetime import datetime\n>>> now = datetime.now()\n>>> now\n# datetime.datetime(2022, 7, 23, 19, 56, 49, 589806)\n```\n\n----------------------------------------\n\nTITLE: Creating Lists from Dictionaries with List Comprehension in Python\nDESCRIPTION: Shows how to use list comprehension to create a new list by formatting key-value pairs from a dictionary.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/comprehensions.md#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n>>> c = {'name': 'Pooka', 'age': 5}\n>>> [\"{}:{}\".format(k.upper(), v) for k, v in c.items()]\n['NAME:Pooka', 'AGE:5']\n```\n\n----------------------------------------\n\nTITLE: Examples of randint() in Python's Random Module\nDESCRIPTION: Multiple examples of using randint() to generate random integers between 1 and 5, demonstrating different possible outputs within the specified range.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/modules/random-module.md#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> random.randint(1, 5)\n# 3\n>>> random.randint(1, 5)\n# 2\n>>> random.randint(1, 5)\n# 5\n>>> random.randint(1, 5)\n# 1\n>>> random.randint(1, 5)\n# 3\n>>> random.randint(1, 5)\n# 1\n```\n\n----------------------------------------\n\nTITLE: Using datetime() Object in Python\nDESCRIPTION: Demonstrates creation and usage of datetime objects combining both date and time attributes.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/modules/datetime-module.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> from datetime import datetime\n>>> obj = datetime(2024, 12, 1, 15, 35, 59)\n>>> obj.year\n# 2024\n>>> obj.month\n# 12\n>>> obj.day\n# 1\n>>> obj.hour\n# 15\n>>> obj.second\n# 59\n```\n\n----------------------------------------\n\nTITLE: Creating and Using an Enumerate Object in Python\nDESCRIPTION: This snippet demonstrates how to create an enumerate object from a list and use its __next__() method to iterate through the enumerated items. It shows the tuple structure returned by enumerate() containing the index and value.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/builtin/enumerate.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> l = enumerate([1, 2, 3, 4, 5])\n>>> l\n# <enumerate object at 0x7fcac409cc40>\n>>> l.__next__()\n# (0, 1)\n>>> l.__next__()\n# (1, 2)\n>>> l.__next__()\n# (2, 3)\n>>> l.__next__()\n# (3, 4)\n>>> l.__next__()\n# (4, 5)\n>>> l.__next__()\n# Traceback (most recent call last):\n#   File \"<stdin>\", line 1, in <module>\n# StopIteration\n```\n\n----------------------------------------\n\nTITLE: Writing JSON File in Python\nDESCRIPTION: Shows how to write a Python dictionary to a JSON file using the json.dump() function. The indent parameter is used for pretty-printing the JSON output.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/json-yaml.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> import json\n\n>>> content = {\"name\": \"Joe\", \"age\": 20}\n>>> with open(\"filename.json\", \"w\") as f:\n...     json.dump(content, f, indent=2)\n```\n\n----------------------------------------\n\nTITLE: Using startswith() and endswith() Methods in Python Strings\nDESCRIPTION: This snippet shows how to use startswith() and endswith() methods to check the beginning and end of Python strings.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/manipulating-strings.md#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n'Hello world!'.startswith('Hello')\n# True\n\n'Hello world!'.endswith('world!')\n# True\n\n'abc123'.startswith('abcdef')\n# False\n\n'abc123'.endswith('12')\n# False\n\n'Hello world!'.startswith('Hello world!')\n# True\n\n'Hello world!'.endswith('Hello world!')\n# True\n```\n\n----------------------------------------\n\nTITLE: Reading File Content in Python\nDESCRIPTION: Demonstrates opening and reading the entire contents of a text file using the with statement and read() method. Uses a file path to access the file and returns the content as a string.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/reading-and-writing-files.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nwith open('C:\\\\Users\\\\your_home_folder\\\\hi.txt') as hello_file:\n    hello_content = hello_file.read()\n\nhello_content\n'Hello World!'\n```\n\n----------------------------------------\n\nTITLE: Checking if a Value Exists in a Dictionary\nDESCRIPTION: Demonstrates how to check if a specific value exists in a dictionary using the 'in' operator with the values() method.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/dictionaries.md#2025-04-17_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n>>>  person = {'name': 'Rose', 'age': 33}\n\n>>> 'Rose' in person.values()\n# True\n\n>>> 33 in person.values()\n# True\n```\n\n----------------------------------------\n\nTITLE: Creating Dictionaries with Dict Comprehension in Python\nDESCRIPTION: Demonstrates how to use dictionary comprehension to create a new dictionary by swapping keys and values of an existing dictionary.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/comprehensions.md#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> c = {'name': 'Pooka', 'age': 5}\n>>> {v: k for k, v in c.items()}\n{'Pooka': 'name', 5: 'age'}\n```\n\n----------------------------------------\n\nTITLE: Summing Lists of Numbers with Python's sum() Function\nDESCRIPTION: These examples demonstrate how to use the sum() function to calculate the total of numeric values in a list. The function iterates over the list elements from left to right, adding them together to produce a single sum.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/builtin/sum.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> sum([2, 4, 6])\n# 12\n>>> sum([10, 10, 10])\n# 30\n```\n\n----------------------------------------\n\nTITLE: Filtering Even Numbers Using Python filter()\nDESCRIPTION: Demonstrates how to use the filter() function to extract even numbers from a list. The example shows defining a predicate function is_even() that checks if a number is even, then applying it to filter a list of numbers.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/builtin/filter.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef is_even(num):\n    return num % 2 == 0\n\nnumbers = [1, 2, 3, 4, 5, 6]\neven_numbers = list(filter(is_even, numbers))\nprint(even_numbers)\n[2, 4, 6]\n```\n\n----------------------------------------\n\nTITLE: Adding Elements to Python Sets\nDESCRIPTION: Demonstrates how to add single elements using add() and multiple elements using update() method in Python sets.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/sets.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> s = {1, 2, 3}\n>>> s.add(4)\n>>> s\n# {1, 2, 3, 4}\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> s = {1, 2, 3}\n>>> s.update([2, 3, 4, 5, 6])\n>>> s\n# {1, 2, 3, 4, 5, 6}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating String Concatenation and Replication in Python\nDESCRIPTION: This snippet shows how to perform string concatenation and replication in Python. Concatenation joins strings together, while replication repeats a string a specified number of times.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/basics.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> 'Alice' 'Bob'\n# 'AliceBob'\n\n>>> 'Alice' * 5\n# 'AliceAliceAliceAliceAlice'\n```\n\n----------------------------------------\n\nTITLE: Matching Start of String with Caret in Python Regex\nDESCRIPTION: Demonstrates using the caret (^) symbol at the start of a regex to indicate that the match must occur at the beginning of the searched text.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/regular-expressions.md#2025-04-17_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n>>> begins_with_hello = re.compile(r'^Hello')\n>>> begins_with_hello.search('Hello world!')\n# <_sre.SRE_Match object; span=(0, 5), match='Hello'>\n\n>>> begins_with_hello.search('He said hello.') is None\n# True\n```\n\n----------------------------------------\n\nTITLE: Inline Arithmetic in f-Strings in Python\nDESCRIPTION: Demonstrates how to perform inline arithmetic operations within f-strings, showcasing the ability to evaluate expressions inside the curly braces.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/string-formatting.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> a = 5\n>>> b = 10\n>>> f'Five plus ten is {a + b} and not {2 * (a + b)}.'\n# 'Five plus ten is 15 and not 30.'\n```\n\n----------------------------------------\n\nTITLE: Creating a Python Decorator for Functions with Parameters\nDESCRIPTION: This decorator handles functions with parameters by using *args and **kwargs in the wrapper function. This allows the decorator to work with any function regardless of its parameter list.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/decorators.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef your_decorator(func):\n  def wrapper(*args,**kwargs):\n    # Do stuff before func...\n    print(\"Before func!\") \n    func(*args,**kwargs)\n    # Do stuff after func...\n    print(\"After func!\")\n  return wrapper\n\n@your_decorator\ndef foo(bar):\n  print(\"My name is \" + bar)\n\nfoo(\"Jack\")\n\n# Before func!\n# My name is Jack\n# After func!\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Python input() Function\nDESCRIPTION: This snippet demonstrates the basic usage of the input() function in Python. It prompts the user for their name, stores the input in a variable, and then prints a greeting using the entered name.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/builtin/input.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> print('What is your name?')   # ask for their name\n>>> my_name = input()\n>>> print('Hi, {}'.format(my_name))\n# What is your name?\n# Martha\n# Hi, Martha\n```\n\n----------------------------------------\n\nTITLE: Lambda Functions as Lexical Closures in Python\nDESCRIPTION: Shows how lambda functions can work as lexical closures, capturing and remembering the environment in which they were created. This example creates a function factory that produces adder functions with different values.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/functions.md#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n>>> def make_adder(n):\n...     return lambda x: x + n\n...\n>>> plus_3 = make_adder(3)\n>>> plus_5 = make_adder(5)\n\n>>> plus_3(4)\n# 7\n>>> plus_5(4)\n# 9\n```\n\n----------------------------------------\n\nTITLE: Using randint() Method in Python's Random Module\nDESCRIPTION: The randint() method generates a random integer between specified start and stop values (inclusive). It takes two integer parameters defining the range.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/modules/random-module.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nrandom.randint(start: int, stop: int)\n```\n\n----------------------------------------\n\nTITLE: Practical getattr() Usage Example\nDESCRIPTION: Demonstrates practical usage of getattr() with a custom class. Shows how to access attributes dynamically and handle cases where attributes might not exist using a default value.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/builtin/getattr.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass Example:\n    attribute = \"Hello, World!\"\n\n# Creating an instance of the class\nobj = Example()\n\n# Using getattr to access the attribute\nvalue = getattr(obj, 'attribute', 'Nothing found')\n\nprint(value)  # Output: Hello, World!\n\n# If the 'attribute' does not exist then 'Nothing found' will be printed.\n```\n\n----------------------------------------\n\nTITLE: Matching Zero or More with Star in Python Regex\nDESCRIPTION: Demonstrates using the * (star) character to match zero or more occurrences of a group. This example shows matching 'Batman', 'Batwoman', and any number of 'wo' repeats.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/regular-expressions.md#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n>>> bat_regex = re.compile(r'Bat(wo)*man')\n>>> mo1 = bat_regex.search('The Adventures of Batman')\n>>> mo1.group()\n'Batman'\n\n>>> mo2 = bat_regex.search('The Adventures of Batwoman')\n>>> mo2.group()\n'Batwoman'\n\n>>> mo3 = bat_regex.search('The Adventures of Batwowowowoman')\n>>> mo3.group()\n'Batwowowowoman'\n```\n\n----------------------------------------\n\nTITLE: Using range() with non-divisible stop and step values\nDESCRIPTION: Example demonstrating range() behavior when the stop parameter is not divisible by the step parameter. It still includes all values up to but not including the stop value.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/builtin/range.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> for i in range(0,10,3):\n...     print(i)\n# 0\n# 3\n# 6\n# 9\n```\n\n----------------------------------------\n\nTITLE: Using sample() Method in Python's Random Module\nDESCRIPTION: The sample() method returns a list with a random selection from an iterable. It takes an iterable and k parameter specifying how many elements to return without replacement.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/modules/random-module.md#2025-04-17_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nrandom.sample(iterable, k: int)\n```\n\n----------------------------------------\n\nTITLE: Using Python's any() built-in function with different iterables\nDESCRIPTION: This example demonstrates how the any() function evaluates the truthiness of elements in various iterables. It returns True if at least one element is truthy, and False if all elements are falsy or if the iterable is empty.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/builtin/any.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> any([False, False, False])\n# False\n\n>>> any((0, True, False))\n# True\n\n>>> any({0, 0, 0})\n# False\n```\n\n----------------------------------------\n\nTITLE: Implementing Encapsulation in Python Classes\nDESCRIPTION: Demonstrates encapsulation using protected and private variables in a Python class. Shows how access modifiers work using underscore conventions and illustrates access restrictions.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/oop-basics.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass MyClass:\n    def __init__(self):\n        self._protected_var = 10\n        self.__private_var = 20\n\nobj = MyClass()\nprint(obj._protected_var)   # output: 10\nprint(obj.__private_var)    # AttributeError: 'MyClass' object has no attribute '__private_var'\n```\n\n----------------------------------------\n\nTITLE: Removing Dictionary Items with del Statement\nDESCRIPTION: Shows how to remove a specific key-value pair from a dictionary using the del statement with the key as the target.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/dictionaries.md#2025-04-17_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n>>> wife = {'name': 'Rose', 'age': 33, 'hair': 'brown'}\n>>> del wife['age']\n>>> wife\n# {'name': 'Rose', 'hair': 'brown'}\n```\n\n----------------------------------------\n\nTITLE: Using Assertions for Sanity Checks in Python\nDESCRIPTION: Demonstrates how to use assert statements for sanity checks in your code. Assertions verify conditions that should be true and raise AssertionError if they fail, helping catch logical errors early.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/debugging.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> pod_bay_door_status = 'open'\n>>> assert pod_bay_door_status == 'open', 'The pod bay doors need to be \"open\".'\n\n>>> pod_bay_door_status = 'I\\'m sorry, Dave. I\\'m afraid I can\\'t do that.'\n>>> assert pod_bay_door_status == 'open', 'The pod bay doors need to be \"open\".'\n# Traceback (most recent call last):\n#   File \"<pyshell#10>\", line 1, in <module>\n#     assert pod_bay_door_status == 'open', 'The pod bay doors need to be \"open\".'\n# AssertionError: The pod bay doors need to be \"open\".\n```\n\n----------------------------------------\n\nTITLE: Using the = Specifier in f-Strings to Display Expressions\nDESCRIPTION: Demonstrates the = specifier in f-strings (Python 3.8+) which displays both the expression and its value, useful for debugging.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/string-formatting.md#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n>>> from datetime import datetime\n>>> now = datetime.now().strftime(\"%b/%d/%Y - %H:%M:%S\")\n>>> f'date and time: {now=}'\n# \"date and time: now='Nov/14/2022 - 20:50:01'\"\n```\n\n----------------------------------------\n\nTITLE: Basic pyproject.toml Configuration for Poetry\nDESCRIPTION: The initial pyproject.toml file created by Poetry, containing project metadata and dependency sections for both runtime and development dependencies.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/virtual-environments.md#2025-04-17_snippet_9\n\nLANGUAGE: toml\nCODE:\n```\n[tool.poetry]\nname = \"my-project\"\nversion = \"0.1.0\"\ndescription = \"\"\nauthors = [\"your name <your@mail.com>\"]\n\n[tool.poetry.dependencies]\npython = \"*\"\n\n[tool.poetry.dev-dependencies]\npytest = \"^3.4\"\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Python map() Function\nDESCRIPTION: Demonstrates the basic usage of map() function by applying a custom 'double' function to a list of numbers. The function double_map takes a function and an iterable, applies map() to them, and returns the result as a list.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/builtin/map.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef double_map(func, iter):\n  my_map = map(func, iter)\n  return list(my_map)\n\ndef double(element):\n  return element*2\n\nnums = [1,2,3,4]\n\nprint(double_map(double, nums))\n```\n\n----------------------------------------\n\nTITLE: Initializing Python Sets using set() Function\nDESCRIPTION: Demonstrates how to create a set using the built-in set() function by passing a list of elements. The resulting set is unordered and contains no duplicates.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/blog/python-sets-what-why-how.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> s1 = set([1, 2, 3])\n>>> s1\n{1, 2, 3}\n>>> type(s1)\n<class 'set'>\n```\n\n----------------------------------------\n\nTITLE: Joining Strings with join() Method in Python\nDESCRIPTION: This example demonstrates how to use the join() method to concatenate strings from various iterable objects in Python.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/manipulating-strings.md#2025-04-17_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n''.join(['My', 'name', 'is', 'Simon'])\n'MynameisSimon'\n\n', '.join(['cats', 'rats', 'bats'])\n# 'cats, rats, bats'\n\n' '.join(['My', 'name', 'is', 'Simon'])\n# 'My name is Simon'\n\n'ABC'.join(['My', 'name', 'is', 'Simon'])\n# 'MyABCnameABCisABCSimon'\n```\n\n----------------------------------------\n\nTITLE: Working with Python Tuples\nDESCRIPTION: Demonstrates the basics of working with tuples in Python, including creation, indexing, and slicing. It also shows how to convert between lists and tuples.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/lists-and-tuples.md#2025-04-17_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n>>> furniture = ('table', 'chair', 'rack', 'shelf')\n\n>>> furniture[0]\n# 'table'\n\n>>> furniture[1:3]\n# ('chair', 'rack')\n\n>>> len(furniture)\n# 4\n\n>>> tuple(['cat', 'dog', 5])\n# ('cat', 'dog', 5)\n\n>>> list(('cat', 'dog', 5))\n# ['cat', 'dog', 5]\n\n>>> list('hello')\n# ['h', 'e', 'l', 'l', 'o']\n```\n\n----------------------------------------\n\nTITLE: Using Boolean Operators in Python\nDESCRIPTION: Examples of Python's boolean operators (and, or, not) and how they can be combined with comparison operators.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/control-flow.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> (4 < 5) and (5 < 6)\nTrue\n\n>>> (4 < 5) and (9 < 6)\nFalse\n\n>>> (1 == 2) or (2 == 2)\nTrue\n```\n\n----------------------------------------\n\nTITLE: Performing Set Difference in Python\nDESCRIPTION: Shows how to perform a set difference using the difference() method or the - operator, returning only the elements unique to the first set.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/sets.md#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n>>> s1 = {1, 2, 3}\n>>> s2 = {2, 3, 4}\n\n>>> s1.difference(s2)  # or 's1 - s2'\n# {1}\n\n>>> s2.difference(s1) # or 's2 - s1'\n# {4}\n```\n\n----------------------------------------\n\nTITLE: Using choice() Method in Python's Random Module\nDESCRIPTION: The choice() method randomly selects an element from an iterable such as a list, set, or string. It returns a single random element from the sequence.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/modules/random-module.md#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n>>> random.choice([1, 2, 3, 4])\n# 1\n>>> random.choice([1, 2, 3, 4])\n# 2\n>>> random.choice([1, 2, 3, 4])\n# 4\n>>> random.choice([1, 2, 3, 4])\n# 4\n```\n\n----------------------------------------\n\nTITLE: Setting Project Directory with virtualenvwrapper\nDESCRIPTION: Command to bind the virtual environment to the current working directory, allowing automatic activation when navigating to the project folder.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/virtual-environments.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsetprojectdir .\n```\n\n----------------------------------------\n\nTITLE: Ternary Conditional Operator in Python\nDESCRIPTION: Examples of Python's ternary operator, which provides a concise way to write simple conditional expressions in one line.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/control-flow.md#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n>>> age = 15\n\n>>> # this if statement:\n>>> if age < 18:\n...    print('kid')\n... else:\n...    print('adult')\n...\n# output: kid\n\n>>> # is equivalent to this ternary operator:\n>>> print('kid' if age < 18 else 'adult')\n# output: kid\n```\n\n----------------------------------------\n\nTITLE: Terminating a Program with sys.exit() in Python\nDESCRIPTION: Demonstrates how to end a Python program using sys.exit() from the sys module. This example creates an infinite loop that only exits when the user types 'exit'.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/control-flow.md#2025-04-17_snippet_23\n\nLANGUAGE: python\nCODE:\n```\n>>> import sys\n\n>>> while True:\n...     feedback = input('Type exit to exit: ')\n...     if feedback == 'exit':\n...         print(f'You typed {feedback}.')\n...         sys.exit()\n...\n# Type exit to exit: open\n# Type exit to exit: close\n# Type exit to exit: exit\n# You typed exit\n```\n\n----------------------------------------\n\nTITLE: Initializing Python Sets using Curly Braces\nDESCRIPTION: Shows how to create a set using curly braces {}. This method directly initializes a set with the given elements, resulting in an unordered collection with no duplicates.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/blog/python-sets-what-why-how.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> s2 = {3, 4, 5}\n>>> s2\n{3, 4, 5}\n>>> type(s2)\n<class 'set'>\n>>>\n```\n\n----------------------------------------\n\nTITLE: Calculating Date Difference with timedelta\nDESCRIPTION: Demonstrates how to calculate the difference between two dates using datetime.strptime() and timedelta. Shows how to parse string dates and get the number of days between them.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/modules/datetime-module.md#2025-04-17_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n>>> from datetime import datetime\n\n>>> date_1 = datetime.strptime('12-Jul-2023', '%d-%b-%Y')\n>>> date_2 = datetime.strptime('01-Jan-2024', '%d-%b-%Y')\n\n>>> difference = date_2 - date_1\n>>> difference\n# datetime.timedelta(days=173)\n>>> difference.days\n# 173\n```\n\n----------------------------------------\n\nTITLE: Performing Set Intersection in Python\nDESCRIPTION: Demonstrates how to perform a set intersection using the intersection() method or the & operator, returning a set with only the elements common to all sets.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/sets.md#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> s1 = {1, 2, 3}\n>>> s2 = {2, 3, 4}\n>>> s3 = {3, 4, 5}\n>>> s1.intersection(s2, s3)  # or 's1 & s2 & s3'\n# {3}\n```\n\n----------------------------------------\n\nTITLE: Using Enumerate in a For Loop in Python\nDESCRIPTION: This snippet shows how to use enumerate() in a for loop to iterate over a list while simultaneously accessing both the index and the item. It demonstrates a common use case for enumerate() in Python.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/builtin/enumerate.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> for i, item in enumerate([1, 2, 3, 4, 5]):\n...     print(f\"Index: {i}, Item: {item}\")\n...\n# Index: 0, Item: 1\n# Index: 1, Item: 2\n# Index: 2, Item: 3\n# Index: 3, Item: 4\n# Index: 4, Item: 5\n```\n\n----------------------------------------\n\nTITLE: Using delattr() to Remove Object Attributes in Python\nDESCRIPTION: This example demonstrates how to use the delattr() function to remove attributes from objects. It shows both successful attribute deletion and error handling when attempting to delete a non-existent attribute. The code creates Person and Car classes with attributes that can be deleted programmatically.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/builtin/delattr.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\n>>> person = Person(\"John\", 30)\n>>> delattr(person, 'age')\n>>> person.__dict__\n# {'name': 'John'}\n\nclass Car:\n    def __init__(self, make, model):\n        self.make = make\n        self.model = model\n\n>>> car = Car(\"Toyota\", \"Corolla\")\n>>> try:\n...     delattr(car, 'year')\n... except AttributeError as e:\n...     print(f\"Error: {e}\")\n# Error: 'Car' object has no attribute 'year'\n```\n\n----------------------------------------\n\nTITLE: Implementing For-Else Statement in Python\nDESCRIPTION: Shows how to use the else clause with a for loop. The else block executes only if the loop completes without encountering a break statement. In this example, the else block doesn't execute because the loop breaks when i equals 3.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/control-flow.md#2025-04-17_snippet_22\n\nLANGUAGE: python\nCODE:\n```\n>>> for i in [1, 2, 3, 4, 5]:\n...    if i == 3:\n...        break\n... else:\n...    print(\"only executed when no item is equal to 3\")\n```\n\n----------------------------------------\n\nTITLE: Using Pipe with Groups in Python Regex\nDESCRIPTION: Demonstrates using the pipe character within a group to match one of several patterns as part of a larger regex pattern. This example shows matching various bat-related terms.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/regular-expressions.md#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> bat_regex = re.compile(r'Bat(man|mobile|copter|bat)')\n>>> mo = bat_regex.search('Batmobile lost a wheel')\n\n>>> mo.group()\n# 'Batmobile'\n\n>>> mo.group(1)\n# 'mobile'\n```\n\n----------------------------------------\n\nTITLE: Working with Current Directory in Pathlib\nDESCRIPTION: Shows how to get and change the current working directory using pathlib and os module.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/modules/pathlib-module.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> from pathlib import Path\n>>> from os import chdir\n\n>>> print(Path.cwd())\n# /home/docs\n\n>>> chdir('/usr/lib/python3.10')\n>>> print(Path.cwd())\n# /usr/lib/python3.10\n```\n\n----------------------------------------\n\nTITLE: Using Any Type Hints in Python Dataclasses\nDESCRIPTION: Shows how to use the typing.Any type hint when you don't want to specify explicit types for dataclass attributes.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/dataclasses.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> from dataclasses import dataclass\n>>> from typing import Any\n\n>>> @dataclass\n... class WithoutExplicitTypes:\n...    name: Any\n...    value: Any = 42\n```\n\n----------------------------------------\n\nTITLE: Avoiding Empty Set Initialization Pitfall\nDESCRIPTION: Illustrates a common mistake when trying to create an empty set. Using empty curly braces {} results in an empty dictionary instead of a set.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/blog/python-sets-what-why-how.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> s = {}\n>>> type(s)\n<class 'dict'>\n```\n\n----------------------------------------\n\nTITLE: Basic Custom Exception Creation in Python\nDESCRIPTION: Demonstrates how to create and raise a basic custom exception class.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/exception-handling.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass MyCustomException(Exception):\n    pass\n\nraise MyCustomException\n```\n\n----------------------------------------\n\nTITLE: Removing Elements from Python Sets\nDESCRIPTION: Illustrates the difference between remove() and discard() methods for removing elements from a set. remove() raises a KeyError if the element doesn't exist, while discard() doesn't.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/sets.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> s = {1, 2, 3}\n>>> s.remove(3)\n>>> s\n# {1, 2}\n\n>>> s.remove(3)\n# Traceback (most recent call last):\n#   File \"<stdin>\", line 1, in <module>\n# KeyError: 3\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> s = {1, 2, 3}\n>>> s.discard(3)\n>>> s\n# {1, 2}\n>>> s.discard(3)\n```\n\n----------------------------------------\n\nTITLE: Matching Complete Strings with Start and End Anchors in Python Regex\nDESCRIPTION: Shows how to use both ^ (start) and $ (end) anchors to ensure the entire string matches the pattern. This example checks if a string consists entirely of digits.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/regular-expressions.md#2025-04-17_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n>>> whole_string_is_num = re.compile(r'^\\d+$')\n\n>>> whole_string_is_num.search('1234567890')\n# <_sre.SRE_Match object; span=(0, 10), match='1234567890'>\n\n>>> whole_string_is_num.search('12345xyz67890') is None\n# True\n\n>>> whole_string_is_num.search('12 34567890') is None\n# True\n```\n\n----------------------------------------\n\nTITLE: Getting List Length in Python\nDESCRIPTION: Demonstrates how to use the len() function to get the number of elements in a Python list.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/lists-and-tuples.md#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> furniture = ['table', 'chair', 'rack', 'shelf']\n>>> len(furniture)\n# 4\n```\n\n----------------------------------------\n\nTITLE: Using get() Method with Custom Default Value\nDESCRIPTION: Demonstrates using the get() method with a custom default value instead of None for keys that don't exist in the dictionary.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/dictionaries.md#2025-04-17_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n>>> wife = {'name': 'Rose', 'age': 33}\n\n>>> f'She is deeply in love with {wife.get(\"husband\", \"lover\")}'\n# 'She is deeply in love with lover'\n```\n\n----------------------------------------\n\nTITLE: Using Pipe Character for Multiple Pattern Matching in Python\nDESCRIPTION: Shows how to use the | (pipe) character to match one of several alternative patterns in a regex. This example demonstrates matching either 'Batman' or 'Tina Fey'.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/regular-expressions.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> hero_regex = re.compile (r'Batman|Tina Fey')\n\n>>> mo1 = hero_regex.search('Batman and Tina Fey.')\n>>> mo1.group()\n# 'Batman'\n\n>>> mo2 = hero_regex.search('Tina Fey and Batman.')\n>>> mo2.group()\n# 'Tina Fey'\n```\n\n----------------------------------------\n\nTITLE: Indexing and Slicing Python Strings\nDESCRIPTION: These examples demonstrate how to access individual characters and substrings using indexing and slicing in Python strings.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/manipulating-strings.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nspam = 'Hello world!'\n\nspam[0]\n# 'H'\n\nspam[4]\n# 'o'\n\nspam[-1]\n# '!'\n\nspam[0:5]\n# 'Hello'\n\nspam[:5]\n# 'Hello'\n\nspam[6:]\n# 'world!'\n\nspam[6:-1]\n# 'world'\n\nspam[:-1]\n# 'Hello world'\n\nspam[::-1]\n# '!dlrow olleH'\n\nfizz = spam[0:5]\nfizz\n# 'Hello'\n```\n\n----------------------------------------\n\nTITLE: Using Python's pow() Function for Exponentiation and Modular Arithmetic\nDESCRIPTION: Demonstrates various uses of the pow() function including basic exponentiation, modular exponentiation with three arguments, and working with negative exponents. The pow() function is more efficient than using base ** exp % mod when all three arguments are provided.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/builtin/pow.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Basic exponentiation\n>>> pow(2, 3)\n# 8\n\n# Using three arguments (modular exponentiation)\n>>> pow(2, 3, 5)\n# 3  (since 2^3 = 8, and 8 % 5 = 3)\n\n# Works with negative exponents (returns float)\n>>> pow(2, -3)\n# 0.125  (since 2^(-3) = 1/8)\n```\n\n----------------------------------------\n\nTITLE: Efficient Duplicate Removal Using Sets\nDESCRIPTION: Demonstrates the most efficient way to remove duplicates from a list by converting it to a set and back to a list. This method is both concise and performant.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/blog/python-sets-what-why-how.md#2025-04-17_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n>>> my_list = [1, 2, 3, 2, 3, 4]\n>>> no_duplicate_list = list(set(my_list))\n>>> no_duplicate_list\n[1, 2, 3, 4]\n```\n\n----------------------------------------\n\nTITLE: Adding Dictionary Items with setdefault() Method\nDESCRIPTION: Demonstrates the setdefault() method which adds a key-value pair if the key doesn't exist, providing a more concise alternative to conditional checks.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/dictionaries.md#2025-04-17_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n>>> wife = {'name': 'Rose', 'age': 33}\n>>> wife.setdefault('has_hair', True)\n>>> wife\n# {'name': 'Rose', 'age': 33, 'has_hair': True}\n```\n\n----------------------------------------\n\nTITLE: Accessing args as a Tuple in Python\nDESCRIPTION: Demonstrates how arguments passed to *args are accessible as a tuple within the function, showing the data type and contents of the args parameter.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/blog/python-easy-args-kwargs.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef some_function(*args):\n    print(f'Arguments passed: {args} as {type(args)}')\n\n\nsome_function('arg1', 'arg2', 'arg3')\n# Arguments passed: ('arg1', 'arg2', 'arg3') as <class 'tuple'>\n```\n\n----------------------------------------\n\nTITLE: Reading File Lines in Python\nDESCRIPTION: Shows how to read a file line by line using the readlines() method, which returns a list of strings where each string represents a line from the file including newline characters.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/reading-and-writing-files.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nwith open('sonnet29.txt') as sonnet_file:\n    sonnet_file.readlines()\n\n# [When, in disgrace with fortune and men's eyes,\\n',\n# ' I all alone beweep my  outcast state,\\n',\n# And trouble deaf heaven with my bootless cries,\\n', And\n# look upon myself and curse my fate,']\n```\n\n----------------------------------------\n\nTITLE: Exploring Module Attributes with Python dir() Function\nDESCRIPTION: Shows how to use dir() to list all attributes and methods of an imported module, in this case, the math module.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/builtin/dir.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport math\nprint(dir(math))\n# Output: ['__doc__', '__loader__', '__name__', '__package__', '__spec__', 'acos', 'acosh', 'asin', ... ]\n```\n\n----------------------------------------\n\nTITLE: Using vars() to access object attributes in Python\nDESCRIPTION: This example demonstrates how to use the vars() built-in function to retrieve the __dict__ attribute of a class instance. It creates a Person class with name and age attributes, instantiates it, and then uses vars() to get a dictionary representation of the instance's attributes.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/builtin/vars.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\nmy_person = Person(\"Dwight\", 35)\n\nmy_vars = vars(my_person)\n\nprint(my_vars)\n# {'name': 'Dwight', 'age': 35}\n```\n\n----------------------------------------\n\nTITLE: Activating Poetry shell and opening VSCode\nDESCRIPTION: Commands to activate the Poetry virtual environment and open the current project folder in VSCode.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/blog/python-projects-with-poetry-and-vscode-part-2.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ poetry shell\n$ code .\n```\n\n----------------------------------------\n\nTITLE: Accessing Dictionary Values Using Subscript Operator in Python\nDESCRIPTION: Shows how to access dictionary values using keys and the subscript operator. Includes an example of what happens when trying to access a non-existent key, which raises a KeyError.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/dictionaries.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> my_cat = {\n...  'size': 'fat',\n...  'color': 'gray',\n...  'disposition': 'loud',\n... }\n>>> print(my_cat['size'])\n...\n# fat\n>>> print(my_cat['eye_color'])\n# Traceback (most recent call last):\n#   File \"<stdin>\", line 1, in <module>\n# KeyError: 'eye_color'\n```\n\n----------------------------------------\n\nTITLE: Accessing Args in Python Functions\nDESCRIPTION: Shows how to access variable positional arguments (*args) inside a function. The args parameter is treated as a tuple containing all the positional arguments passed to the function.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/args-and-kwargs.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> def some_function(*args):\n...     print(f'Arguments passed: {args} as {type(args)}')\n...\n>>> some_function('arg1', 'arg2', 'arg3')\n# Arguments passed: ('arg1', 'arg2', 'arg3') as <class 'tuple'>\n```\n\n----------------------------------------\n\nTITLE: Managing Current Working Directory in Python\nDESCRIPTION: Shows how to get and change the current working directory using os.getcwd() and os.chdir() functions.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/modules/os-module.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> import os\n\n>>> os.getcwd()\n# 'C:\\\\Python34'\n>>> os.chdir('C:\\\\Windows\\\\System32')\n\n>>> os.getcwd()\n# 'C:\\\\Windows\\\\System32'\n```\n\n----------------------------------------\n\nTITLE: Iterating Through Dictionary Keys Without keys() Method\nDESCRIPTION: Demonstrates that a for loop iterates through the keys by default when a dictionary is provided as the iterable, without needing to call the keys() method.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/dictionaries.md#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> pet = {'color': 'red', 'age': 42}\n>>> for key in pet:\n...     print(key)\n...\n# color\n# age\n```\n\n----------------------------------------\n\nTITLE: Using Break Statement in While Loop\nDESCRIPTION: Example of using the break statement to exit a while loop when a specific condition is met, in this case when the user enters the correct input.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/control-flow.md#2025-04-17_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n>>> while True:\n...     name = input('Please type your name: ')\n...     if name == 'your name':\n...         break\n...\n>>> print('Thank you!')\n# Please type your name: your name\n# Thank you!\n```\n\n----------------------------------------\n\nTITLE: Removing Dictionary Items with pop() Method\nDESCRIPTION: Shows how to remove an item from a dictionary using the pop() method, which returns the value of the removed item.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/dictionaries.md#2025-04-17_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n>>> wife = {'name': 'Rose', 'age': 33, 'hair': 'brown'}\n>>> wife.pop('age')\n# 33\n>>> wife\n# {'name': 'Rose', 'hair': 'brown'}\n```\n\n----------------------------------------\n\nTITLE: Using now() with Timezone\nDESCRIPTION: Shows how to use now() method with specific timezone parameters.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/modules/datetime-module.md#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n>>> from datetime import datetime, timezone\n>>> datetime.now(timezone.utc)\n# datetime.datetime(2022, 7, 24, 0, 20, 8, 265634, tzinfo=datetime.timezone.utc)\n```\n\n----------------------------------------\n\nTITLE: Creating a Class-Based Python Decorator\nDESCRIPTION: This example shows how to implement a decorator as a class rather than a function. Class-based decorators are useful when you need to maintain state between function calls, as demonstrated with a call counter.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/decorators.md#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nclass CountCallNumber:\n\n  def __init__(self, func):\n    self.func = func\n    self.call_number = 0\n\n  def __call__(self, *args, **kwargs):\n    self.call_number += 1\n    print(\"This is execution number \" + str(self.call_number))\n    return self.func(*args, **kwargs)\n\n@CountCallNumber\ndef say_hi(name):\n  print(\"Hi! My name is \" + name)\n\nsay_hi(\"Jack\")\n# This is execution number 1\n# Hi! My name is Jack\n\nsay_hi(\"James\")\n# This is execution number 2\n# Hi! My name is James\n```\n\n----------------------------------------\n\nTITLE: Using the len() Function and Testing for Emptiness in Python\nDESCRIPTION: This snippet demonstrates the use of the len() function to get the length of strings, lists, etc. It also shows the recommended way to test for emptiness in Python using boolean evaluation instead of len().\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/basics.md#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n>>> len('hello')\n# 5\n\n>>> len(['cat', 3, 'dog'])\n# 3\n\n>>> a = [1, 2, 3]\n\n# bad\n>>> if len(a) > 0:  # evaluates to True\n...     print(\"the list is not empty!\")\n...\n# the list is not empty!\n\n# good\n>>> if a: # evaluates to True\n...     print(\"the list is not empty!\")\n...\n# the list is not empty!\n```\n\n----------------------------------------\n\nTITLE: Using Python's all() Function with Different Iterables\nDESCRIPTION: Demonstrates how the all() function evaluates different types of iterables including lists, tuples, and sets. The function returns True only when all elements in the iterable evaluate to True, and False otherwise. Empty iterables return True by default.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/builtin/all.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> all([True, True, True])\n# True\n\n>>> all((0, True, False))\n# False\n\n>>> all({1, 1, 1})\n# True\n```\n\n----------------------------------------\n\nTITLE: Chaining Ternary Operators in Python\nDESCRIPTION: Example showing how to chain multiple ternary operators to create more complex conditional expressions.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/control-flow.md#2025-04-17_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n>>> age = 15\n\n>>> # this ternary operator:\n>>> print('kid' if age < 13 else 'teen' if age < 18 else 'adult')\n\n>>> # is equivalent to this if statement:\n>>> if age < 18:\n...     if age < 13:\n...         print('kid')\n...     else:\n...         print('teen')\n... else:\n...     print('adult')\n...\n# output: teen\n```\n\n----------------------------------------\n\nTITLE: Handling Absolute and Relative Paths in Python\nDESCRIPTION: Shows how to check if a path is absolute, get an absolute path, and find relative paths between two locations using os.path functions.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/modules/os-module.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> import os\n>>> os.path.isabs('/')\n# True\n\n>>> os.path.isabs('..')\n# False\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> import os\n>>> os.getcwd()\n'/home/docs'\n\n>>> os.path.abspath('..')\n'/home'\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> import os\n>>> os.path.relpath('/etc/passwd', '/')\n# 'etc/passwd'\n```\n\n----------------------------------------\n\nTITLE: Creating Nested Directories with Pathlib\nDESCRIPTION: Demonstrates creating nested directories using mkdir() with the parents parameter.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/modules/pathlib-module.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> from pathlib import Path\n>>> cwd = Path.cwd()\n>>> (cwd / 'delicious' / 'walnut' / 'waffles').mkdir(parents=True)\n```\n\n----------------------------------------\n\nTITLE: Examples of sample() in Python's Random Module\nDESCRIPTION: Examples showing how to use sample() to randomly select different numbers of elements from a list without replacement.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/modules/random-module.md#2025-04-17_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n>>> random.sample([1, 2, 3, 4], 1)\n# [3]\n>>> random.sample([1, 2, 3, 4], 2)\n# [3, 4]\n>>> random.sample([1, 2, 3, 4], 3)\n# [4, 3, 2]\n>>> random.sample([1, 2, 3, 4], 4)\n# [1, 2, 4, 3]\n```\n\n----------------------------------------\n\nTITLE: Using the global Statement in Python\nDESCRIPTION: Shows how to modify global variables from within a function scope using the global statement. This example defines a function that changes the value of a global variable.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/functions.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> def spam():\n...     global eggs\n...     eggs = 'spam'\n...\n>>> eggs = 'global'\n>>> spam()\n>>> print(eggs)\n```\n\n----------------------------------------\n\nTITLE: Using input() with a Default Message in Python\nDESCRIPTION: This example shows how to use the input() function with a default message, eliminating the need for a separate print() statement. It directly prompts the user for their name and then prints a greeting.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/builtin/input.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> my_name = input('What is your name? ')  # default message\n>>> print('Hi, {}'.format(my_name))\n# What is your name? Martha\n# Hi, Martha\n```\n\n----------------------------------------\n\nTITLE: Using the index() Method with Python Lists\nDESCRIPTION: Demonstrates how to use the index() method to find the index of a specific value in a list.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/lists-and-tuples.md#2025-04-17_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n>>> furniture = ['table', 'chair', 'rack', 'shelf']\n>>> furniture.index('chair')\n# 1\n```\n\n----------------------------------------\n\nTITLE: Creating a Copy of a List Using Slicing in Python\nDESCRIPTION: This example illustrates how slicing can be used to create a shallow copy of a list. It demonstrates that modifying the original list after copying does not affect the copy.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/builtin/slice.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> spam2 = spam[:]\n# ['cat', 'bat', 'rat', 'elephant']\n\n>>> spam.append('dog')\n>>> spam\n# ['cat', 'bat', 'rat', 'elephant', 'dog']\n\n>>> spam2\n# ['cat', 'bat', 'rat', 'elephant']\n```\n\n----------------------------------------\n\nTITLE: Adding Elements to Python Lists\nDESCRIPTION: Shows how to add elements to a list using the append() and insert() methods. append() adds an element to the end of the list, while insert() adds an element at a specified position.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/lists-and-tuples.md#2025-04-17_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n>>> furniture = ['table', 'chair', 'rack', 'shelf']\n>>> furniture.append('bed')\n>>> furniture\n# ['table', 'chair', 'rack', 'shelf', 'bed']\n\n>>> furniture = ['table', 'chair', 'rack', 'shelf']\n>>> furniture.insert(1, 'bed')\n>>> furniture\n# ['table', 'bed', 'chair', 'rack', 'shelf']\n```\n\n----------------------------------------\n\nTITLE: Evaluating Expressions with Python eval() Function\nDESCRIPTION: The eval() function is used to evaluate Python expressions passed as strings. It can handle arithmetic operations, function calls, and variable comparisons.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/builtin/eval.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> eval('1 + 4')\n# 5\n\n>>> eval('print(\"Hello World!\")')\n# Hello World!\n\n>>> x = 10\n>>> eval('x == 10')\n# True\n```\n\n----------------------------------------\n\nTITLE: Creating and Adding to ZIP Files\nDESCRIPTION: Shows how to create a new ZIP file and add compressed content to it using the ZIP_DEFLATED compression method.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/modules/zipfile-module.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> import zipfile\n>>>\n>>> with zipfile.ZipFile('new.zip', 'w') as new_zip:\n...     new_zip.write('spam.txt', compress_type=zipfile.ZIP_DEFLATED)\n```\n\n----------------------------------------\n\nTITLE: Clearing All Items from a Dictionary with clear() Method\nDESCRIPTION: Demonstrates how to remove all items from a dictionary using the clear() method, resulting in an empty dictionary.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/dictionaries.md#2025-04-17_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n>>> wife = {'name': 'Rose', 'age': 33, 'hair': 'brown'}\n>>> wife.clear()\n>>> wife\n# {}\n```\n\n----------------------------------------\n\nTITLE: Using symmetric_difference() Method with Python Sets\nDESCRIPTION: Illustrates how to find elements that are in either of the sets but not in their intersection using the symmetric_difference() method or the ^ operator.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/blog/python-sets-what-why-how.md#2025-04-17_snippet_21\n\nLANGUAGE: python\nCODE:\n```\n>>> s1 = {1, 2, 3}\n>>> s2 = {2, 3, 4}\n>>> s1.symmetric_difference(s2)  # or 's1 ^ s2'\n{1, 4}\n```\n\n----------------------------------------\n\nTITLE: Multiple Assignment with Python Lists\nDESCRIPTION: Shows how to use the multiple assignment trick to assign multiple variables with values from a list in a single line of code. It also demonstrates how to swap variable values using this technique.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/lists-and-tuples.md#2025-04-17_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n>>> furniture = ['table', 'chair', 'rack', 'shelf']\n>>> table, chair, rack, shelf = furniture\n\n>>> table\n# 'table'\n\n>>> chair\n# 'chair'\n\n>>> rack\n# 'rack'\n\n>>> shelf\n# 'shelf'\n\n>>> a, b = 'table', 'chair'\n>>> a, b = b, a\n>>> print(a)\n# chair\n\n>>> print(b)\n# table\n```\n\n----------------------------------------\n\nTITLE: Pretty Printing Dictionaries with pprint Module\nDESCRIPTION: Shows how to use the pprint module to display dictionaries in a more readable format, particularly useful for complex or nested dictionaries.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/dictionaries.md#2025-04-17_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n>>> import pprint\n\n>>> wife = {'name': 'Rose', 'age': 33, 'has_hair': True, 'hair_color': 'brown', 'height': 1.6, 'eye_color': 'brown'}\n>>> pprint.pprint(wife)\n# {'age': 33,\n#  'eye_color': 'brown',\n#  'hair_color': 'brown',\n#  'has_hair': True,\n#  'height': 1.6,\n#  'name': 'Rose'}\n```\n\n----------------------------------------\n\nTITLE: Using random() Method in Python's Random Module\nDESCRIPTION: The random() method returns a random floating-point number between 0.0 and 1.0. This method requires no parameters and is commonly used for generating random probabilities.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/modules/random-module.md#2025-04-17_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n>>> random.random()\n# 0.4143139993007743\n>>> random.random()\n# 0.17300740157905092\n>>> random.random()\n# 0.548798761388153\n>>> random.random()\n# 0.7030407620656315\n```\n\n----------------------------------------\n\nTITLE: Handling Different Iterable Lengths with map()\nDESCRIPTION: Demonstrates how map() handles iterables of different lengths. The map() function stops when the shortest iterable is exhausted, as shown by applying a max function to two lists of different lengths.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/builtin/map.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef max(a,b):\n  if a > b: return a\n  else: return b\n\nlist1= [1,1,1]\n\nlist2= [0,0,0,1,1,1,1,1,1,1]\n\nresult = list(map(max,list1,list2))\n\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Character Classes in Python Regex\nDESCRIPTION: Demonstrates how to create a custom character class using square brackets. This example creates a class that matches any vowel, both lowercase and uppercase.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/regular-expressions.md#2025-04-17_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n>>> vowel_regex = re.compile(r'[aeiouAEIOU]')\n>>> vowel_regex.findall('Robocop eats baby food. BABY FOOD.')\n# ['o', 'o', 'o', 'e', 'a', 'a', 'o', 'o', 'A', 'O', 'O']\n```\n\n----------------------------------------\n\nTITLE: Using Python's id() Function with Different Data Types\nDESCRIPTION: This example demonstrates how the id() function returns different identity values for various Python objects including an integer, a string, and a list. The function returns a unique integer identifier for each object.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/builtin/id.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> id(1)\n# 9788960\n>>> id('1')\n# 140269689726000\n>>> id([1, 2])\n# 140269672924928\n```\n\n----------------------------------------\n\nTITLE: Listing Directory Contents with Pathlib\nDESCRIPTION: Demonstrates how to iterate over directory contents using iterdir().\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/modules/pathlib-module.md#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n>>> from pathlib import Path\n\n>>> for f in Path('/usr/bin').iterdir():\n...     print(f)\n...\n```\n\n----------------------------------------\n\nTITLE: Using the 'sep' Keyword Argument with Python's print() Function\nDESCRIPTION: Demonstrates the use of the 'sep' keyword argument to specify a custom separator between multiple objects in a single print statement.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/builtin/print.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nprint('cats', 'dogs', 'mice', sep=',')\n# cats,dogs,mice\n```\n\n----------------------------------------\n\nTITLE: Non-Greedy Matching with Dot-Star-Question Mark in Python Regex\nDESCRIPTION: Demonstrates how to use the dot-star-question mark (.*?) pattern for non-greedy matching, which matches as little text as possible. This is useful for extracting content between HTML tags.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/regular-expressions.md#2025-04-17_snippet_19\n\nLANGUAGE: python\nCODE:\n```\n>>> non_greedy_regex = re.compile(r'<.*?>')\n>>> mo = non_greedy_regex.search('<To serve man> for dinner.>')\n>>> mo.group()\n```\n\n----------------------------------------\n\nTITLE: Using keys() Method to Access Dictionary Keys in Python\nDESCRIPTION: Shows how to iterate through all keys in a dictionary using the keys() method in a for loop.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/dictionaries.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> pet = {'color': 'red', 'age': 42}\n>>> for key in pet.keys():\n...     print(key)\n...\n# color\n# age\n```\n\n----------------------------------------\n\nTITLE: Sample Poetry Project Structure\nDESCRIPTION: The directory structure created by Poetry for a new project, including the pyproject.toml file, README, source code directory, and tests directory.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/virtual-environments.md#2025-04-17_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nmy-project\n├── pyproject.toml\n├── README.rst\n├── poetry_demo\n│   └── __init__.py\n└── tests\n    ├── __init__.py\n    └── test_poetry_demo.py\n```\n\n----------------------------------------\n\nTITLE: Adding Default Values to Dataclass Fields in Python\nDESCRIPTION: Demonstrates how to add default values to dataclass fields using a Product class with name, count, and price attributes.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/dataclasses.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> @dataclass\n... class Product:\n...     name: str\n...     count: int = 0\n...     price: float = 0.0\n...\n>>> obj = Product(\"Python\")\n>>> obj.name\n# Python\n\n>>> obj.count\n# 0\n\n>>> obj.price\n# 0.0\n```\n\n----------------------------------------\n\nTITLE: Converting Various Data Types to Strings Using Python's str() Function\nDESCRIPTION: This code snippet demonstrates the usage of Python's str() function to convert different data types to strings. It shows how to convert an integer and a float to string, and how to create an empty string. The type() function is used to verify the resulting data type.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/builtin/str.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# transform an integer to a string\nfrom_integer = str(29)\nfrom_integer\n# '29'\ntype(from_integer)\n# <class 'str'>\n\n# transform a float to string\nfrom_float = str(-3.14)\nfrom_float\n# '-3.14'\ntype(from_float)\n# <class 'str'>\n\n# return an empty string\nstr()\n# ''\n```\n\n----------------------------------------\n\nTITLE: Using a Parameterized Python Decorator\nDESCRIPTION: Demonstrates how to apply a decorator that takes parameters to a function. The decorator is applied with arguments before being applied to the function.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/decorators.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@your_decorator(arg = 'x')\ndef foo(bar):\n  return bar\n```\n\n----------------------------------------\n\nTITLE: Modifying List Elements in Python\nDESCRIPTION: Shows how to change values in a list by assigning new values to specific indexes. It includes examples of replacing elements and using list indexes in assignments.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/lists-and-tuples.md#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n>>> furniture = ['table', 'chair', 'rack', 'shelf']\n\n>>> furniture[0] = 'desk'\n>>> furniture\n# ['desk', 'chair', 'rack', 'shelf']\n\n>>> furniture[2] = furniture[1]\n>>> furniture\n# ['desk', 'chair', 'chair', 'shelf']\n\n>>> furniture[-1] = 'bed'\n>>> furniture\n# ['desk', 'chair', 'chair', 'bed']\n```\n\n----------------------------------------\n\nTITLE: Using Dictionary Methods with Python Shelve\nDESCRIPTION: This snippet demonstrates how to use dictionary-like methods keys() and values() with shelf objects. It shows how to convert the list-like return values to actual Python lists using the list() function.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/modules/shelve-module.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> with shelve.open('mydata') as shelf_file:\n...     print(list(shelf_file.keys()))\n...     print(list(shelf_file.values()))\n...\n# ['wife']\n# [['Pretty', 'Lovely', 'Nice']]\n```\n\n----------------------------------------\n\nTITLE: Creating Multiline Strings in Python\nDESCRIPTION: This snippet shows how to create and print multiline strings in Python using triple quotes.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/manipulating-strings.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nprint(\n\"\"\"Dear Alice,\n\nEve's cat has been arrested for catnapping,\ncat burglary, and extortion.\n\nSincerely,\nBob\"\"\"\n)\n\n# Dear Alice,\n\n# Eve's cat has been arrested for catnapping,\n# cat burglary, and extortion.\n\n# Sincerely,\n# Bob\n```\n\n----------------------------------------\n\nTITLE: Greedy vs Non-Greedy Matching in Python Regex\nDESCRIPTION: Demonstrates the difference between greedy and non-greedy matching. By default, Python's regex is greedy (matches the longest possible string), but adding ? after curly brackets makes it non-greedy.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/regular-expressions.md#2025-04-17_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n>>> greedy_ha_regex = re.compile(r'(Ha){3,5}')\n\n>>> mo1 = greedy_ha_regex.search('HaHaHaHaHa')\n>>> mo1.group()\n# 'HaHaHaHaHa'\n\n>>> non_greedy_ha_regex = re.compile(r'(Ha){3,5}?')\n>>> mo2 = non_greedy_ha_regex.search('HaHaHaHaHa')\n>>> mo2.group()\n# 'HaHaHa'\n```\n\n----------------------------------------\n\nTITLE: Demonstrating callable() with Various Python Objects\nDESCRIPTION: This code snippet shows how to use the callable() function with different types of Python objects, including a function, a class with a __call__ method, an integer, and a lambda function. It demonstrates which objects are considered callable in Python.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/builtin/callable.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> def my_function():\n...     pass\n...\n>>> class MyClass:\n...     def __call__(self):\n...         pass\n...\n>>> x = 5\n>>> y = my_function\n>>> z = MyClass()\n>>> a = lambda: None\n>>>\n>>> print(callable(x))\n# False\n>>> print(callable(y))\n# True\n>>> print(callable(z))\n# True\n>>> print(callable(a))\n# True\n```\n\n----------------------------------------\n\nTITLE: Adding Dependencies with Poetry\nDESCRIPTION: Commands to add production dependencies to a Poetry project\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/blog/python-projects-with-poetry-and-vscode-part-1.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ poetry add pendulum coo\n```\n\n----------------------------------------\n\nTITLE: Subtracting Time with timedelta\nDESCRIPTION: Demonstrates how to subtract days and seconds from a datetime object using timedelta. Shows subtracting multiple time units at once.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/modules/datetime-module.md#2025-04-17_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n>>> from datetime import datetime, timedelta\n\n>>> now = datetime.now()\n>>> now\n# datetime.datetime(2022, 7, 23, 21, 25, 2, 341081)\n\n>>> now - timedelta(days=10, seconds=15)\n# datetime.datetime(2022, 7, 13, 21, 59, 41, 100883)\n```\n\n----------------------------------------\n\nTITLE: Accessing List Elements with Indexes in Python\nDESCRIPTION: Shows how to access individual elements of a list using positive indexes. The example uses a list of furniture items.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/lists-and-tuples.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> furniture = ['table', 'chair', 'rack', 'shelf']\n\n>>> furniture[0]\n# 'table'\n\n>>> furniture[1]\n# 'chair'\n\n>>> furniture[2]\n# 'rack'\n\n>>> furniture[3]\n# 'shelf'\n```\n\n----------------------------------------\n\nTITLE: Matching a Range of Repetitions in Python Regex\nDESCRIPTION: Shows how to use curly brackets to specify a range of repetitions. This example matches between 2 and 3 occurrences of 'Ha'.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/regular-expressions.md#2025-04-17_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n>>> ha_regex = re.compile(r'(Ha){2,3}')\n>>> mo1 = ha_regex.search('HaHaHaHa')\n>>> mo1.group()\n# 'HaHaHa'\n```\n\n----------------------------------------\n\nTITLE: Using seed() Method in Python's Random Module\nDESCRIPTION: The seed() method initializes the random number generator. Setting the seed to a specific value will always produce the same random sequence, which is useful for reproducibility.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/modules/random-module.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> random.seed(1)\n>>> random.random()\n# 0.13436424411240122\n```\n\n----------------------------------------\n\nTITLE: Calculating Total Directory Size in Python\nDESCRIPTION: Demonstrates how to calculate the total size of all files in a directory. Note that directories themselves also have a size.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/modules/os-module.md#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n>>> import os\n>>> total_size = 0\n\n>>> for filename in os.listdir('C:\\\\Windows\\\\System32'):\n...     total_size = total_size + os.path.getsize(os.path.join('C:\\\\Windows\\\\System32', filename))\n...\n>>> print(total_size)\n# 1117846456\n```\n\n----------------------------------------\n\nTITLE: Joining Paths with os.path.join in Python\nDESCRIPTION: Demonstrates how to use os.path.join to create platform-independent file paths. This function handles the differences in path separators between Windows and Unix-based systems.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/modules/os-module.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> import os\n\n>>> os.path.join('usr', 'bin', 'spam')\n# 'usr\\\\bin\\\\spam'\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> my_files = ['accounts.txt', 'details.csv', 'invite.docx']\n\n>>> for filename in my_files:\n...     print(os.path.join('C:\\\\Users\\\\asweigart', filename))\n...\n# C:\\Users\\docs\\accounts.txt\n# C:\\Users\\docs\\details.csv\n# C:\\Users\\docs\\invite.docx\n```\n\n----------------------------------------\n\nTITLE: Joining Paths with Pathlib in Python\nDESCRIPTION: Demonstrates how to join file system paths using pathlib.Path.joinpath() and the / operator for cross-platform compatibility.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/modules/pathlib-module.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> from pathlib import Path\n\n>>> print(Path('usr').joinpath('bin').joinpath('spam'))\n# usr/bin/spam\n```\n\n----------------------------------------\n\nTITLE: Formatting with Alignment and Fill Characters in f-Strings\nDESCRIPTION: Shows how to add spacing or characters for alignment in f-strings using format specifiers like :^20 for center alignment with width 20.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/string-formatting.md#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n>>> f\"{name.upper() = :-^20}\"\n# 'name.upper() = -------ROBERT-------'\n>>>\n>>> f\"{name.upper() = :^20}\"\n# 'name.upper() =        ROBERT       '\n>>>\n>>> f\"{name.upper() = :20}\"\n# 'name.upper() = ROBERT              '\n```\n\n----------------------------------------\n\nTITLE: Creating a Virtual Environment with virtualenvwrapper\nDESCRIPTION: Command to create a new virtual environment named 'HelloWorld' using virtualenvwrapper, which isolates packages for this specific project.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/virtual-environments.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmkvirtualenv HelloWorld\n```\n\n----------------------------------------\n\nTITLE: Error Handling with exec()\nDESCRIPTION: Shows how to handle errors that might occur during code execution with exec() by using try-except blocks inside the executed code.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/builtin/exec.md#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ncode = \"\"\"\ntry:\n    print(undefined_variable)\nexcept NameError as e:\n    print(f\\\"Error: {e}\\\")\n\"\"\"\nexec(code)\n# Output: Error: name 'undefined_variable' is not defined\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Python Tuples\nDESCRIPTION: This snippet demonstrates creating an empty tuple, checking its type, and converting a list to a tuple. It shows the immutability and sequence nature of tuples in Python.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/builtin/tuple.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> t = tuple()\n>>> type(t)\n# <class 'tuple'>\n>>> t\n# ()\n\n>>> l = [1, 2, 3]\n>>> tuple(l)\n# (1, 2, 3)\n```\n\n----------------------------------------\n\nTITLE: Walking a Directory Tree in Python\nDESCRIPTION: Shows how to traverse a directory tree using os.walk(), which yields the folder name, subfolders, and filenames for each directory in the tree.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/modules/os-module.md#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n>>> import os\n>>>\n>>> for folder_name, subfolders, filenames in os.walk('C:\\\\delicious'):\n...     print(f'The current folder is {folder_name}')\n...     for subfolder in subfolders:\n...         print(f'SUBFOLDER OF {folder_name}: {subfolder}')\n...     for filename in filenames:\n...         print(f'FILE INSIDE {folder_name}: filename{filename}')\n...     print('')\n...\n# The current folder is C:\\delicious\n# SUBFOLDER OF C:\\delicious: cats\n# SUBFOLDER OF C:\\delicious: walnut\n# FILE INSIDE C:\\delicious: spam.txt\n\n# The current folder is C:\\delicious\\cats\n# FILE INSIDE C:\\delicious\\cats: catnames.txt\n# FILE INSIDE C:\\delicious\\cats: zophie.jpg\n\n# The current folder is C:\\delicious\\walnut\n# SUBFOLDER OF C:\\delicious\\walnut: waffles\n\n# The current folder is C:\\delicious\\walnut\\waffles\n# FILE INSIDE C:\\delicious\\walnut\\waffles: butter.txt\n```\n\n----------------------------------------\n\nTITLE: Using values() Method to Access Dictionary Values in Python\nDESCRIPTION: Demonstrates how to iterate through all values in a dictionary using the values() method in a for loop.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/dictionaries.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> pet = {'color': 'red', 'age': 42}\n>>> for value in pet.values():\n...     print(value)\n...\n# red\n# 42\n```\n\n----------------------------------------\n\nTITLE: Performing Symmetric Difference in Python Sets\nDESCRIPTION: Demonstrates how to perform a symmetric difference using the symmetric_difference() method or the ^ operator, returning all elements that are not common between the sets.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/sets.md#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n>>> s1 = {1, 2, 3}\n>>> s2 = {2, 3, 4}\n>>> s1.symmetric_difference(s2)  # or 's1 ^ s2'\n# {1, 4}\n```\n\n----------------------------------------\n\nTITLE: Grouping with Parentheses in Python Regex\nDESCRIPTION: Shows how to use parentheses to create groups in a regex pattern, allowing you to extract specific parts of the matched text separately using the group() method with different indices.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/regular-expressions.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> phone_num_regex = re.compile(r'(\\d\\d\\d)-(\\d\\d\\d-\\d\\d\\d\\d)')\n>>> mo = phone_num_regex.search('My number is 415-555-4242.')\n\n>>> mo.group(1)\n# '415'\n\n>>> mo.group(2)\n# '555-4242'\n\n>>> mo.group(0)\n# '415-555-4242'\n\n>>> mo.group()\n# '415-555-4242'\n```\n\n----------------------------------------\n\nTITLE: Using str.format Method for String Formatting in Python\nDESCRIPTION: Demonstrates the str.format() method introduced in Python 3 (back-ported to Python 2.7), which provides a more regular syntax for string formatting.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/string-formatting.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> name = 'John'\n>>> age = 20\n\n>>> \"Hello I'm {}, my age is {}\".format(name, age)\n# \"Hello I'm John, my age is 20\"\n\n>>> \"Hello I'm {0}, my age is {1}\".format(name, age)\n# \"Hello I'm John, my age is 20\"\n```\n\n----------------------------------------\n\nTITLE: Adding Thousands Separator in Numeric Formatting with f-Strings\nDESCRIPTION: Demonstrates how to add a thousands separator (comma) when formatting numbers in f-strings using the :, format specifier.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/string-formatting.md#2025-04-17_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n>>> a = 10000000\n>>> f\"{a:,}\"\n# '10,000,000'\n```\n\n----------------------------------------\n\nTITLE: Installing Packages with Pipenv\nDESCRIPTION: Commands to navigate to a project directory and install packages using Pipenv, which creates a Pipfile to track dependencies.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/virtual-environments.md#2025-04-17_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\ncd my_project\npipenv install <package>\n```\n\n----------------------------------------\n\nTITLE: Using Template Strings for Safer User-Generated Content in Python\nDESCRIPTION: Demonstrates Template strings from the string module, a simpler and safer alternative for handling strings generated by users due to their reduced complexity.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/string-formatting.md#2025-04-17_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n>>> from string import Template\n>>> name = 'Elizabeth'\n>>> t = Template('Hey $name!')\n>>> t.substitute(name=name)\n# 'Hey Elizabeth!'\n```\n\n----------------------------------------\n\nTITLE: Implementing a Class Method to Create New Instances in Python\nDESCRIPTION: Example demonstrating how to use the @classmethod decorator to create a factory method that returns a new instance of the class. The class method receives the class (cls) as its first argument, allowing it to instantiate the class without requiring an existing instance.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/builtin/classmethod.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass Counter:\n    def __init__(self):\n        self.count = 0\n\n    def increment(self):\n        self.count += 1\n        return self.count\n\n    @classmethod  # passes the class as the first argument to the method instead of passing the instance\n    def get_new_instance(cls):\n        return cls()\n\nif __name__ == \"__main__\":\n    counter = Counter()\n    print(counter.increment())\n    # 1\n\n    counter = counter.get_new_instance()\n    print(counter.increment())\n    # 1\n```\n\n----------------------------------------\n\nTITLE: Creating Shallow Copies with copy.copy()\nDESCRIPTION: Demonstrates how to use copy.copy() to create a shallow copy of a nested list. A shallow copy constructs a new compound object but inserts references to the objects found in the original.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/modules/copy-module.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> import copy\n>>> a = [[1],[2],[3]]\n>>> b = copy.copy(a) ## this will copy the list a to list b\n\n>>> a\n#[[1], [2], [3]]\n>>> b\n#[[1], [2], [3]]\n```\n\n----------------------------------------\n\nTITLE: Performing Set Union in Python\nDESCRIPTION: Shows how to perform a set union using the union() method or the | operator, creating a new set with all elements from the provided sets.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/sets.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> s1 = {1, 2, 3}\n>>> s2 = {3, 4, 5}\n>>> s1.union(s2)  # or 's1 | s2'\n# {1, 2, 3, 4, 5}\n```\n\n----------------------------------------\n\nTITLE: Parsing JSON to Python Object using json.loads()\nDESCRIPTION: Demonstrates how to use json.loads() method to parse a JSON string and convert it into a Python dictionary.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/modules/json-module.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> import json\n\n>>> json_person = '{\"name\": \"Charles\", \"age\": 33, \"has_hair\": false, \"hobbies\": [\"photography\", \"running\"]}'\n>>> python_person = json.loads(json_person)\n>>> python_person\n# {'name': 'Charles', 'age': 33, 'has_hair': False, 'hobbies': ['photography', 'running']}\n\n>>> type(python_person)\n# <class 'dict'>\n\n>>> python_person.get(\"name\")\n# 'Charles'\n```\n\n----------------------------------------\n\nTITLE: Dynamic Function Creation with exec()\nDESCRIPTION: Illustrates how to use exec() to dynamically create and define functions at runtime based on variable parameters.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/builtin/exec.md#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef create_dynamic_function(name, args):\n    code = f\"def {name}({', '.join(args)}): return sum({args})\"\n    exec(code)\n\ncreate_dynamic_function(\"add_numbers\", [\"a\", \"b\", \"c\"])\nresult = add_numbers(2, 3, 5)\nprint(result)  # Output: 10\n```\n\n----------------------------------------\n\nTITLE: Copying a List in Python\nDESCRIPTION: Shows how to create a copy of a list using slicing. This technique creates a new list object with the same elements as the original.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/lists-and-tuples.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> spam2 = spam[:]\n# ['cat', 'bat', 'rat', 'elephant']\n\n>>> spam.append('dog')\n>>> spam\n# ['cat', 'bat', 'rat', 'elephant', 'dog']\n\n>>> spam2\n# ['cat', 'bat', 'rat', 'elephant']\n```\n\n----------------------------------------\n\nTITLE: Matching Specific Repetitions with Curly Brackets in Python Regex\nDESCRIPTION: Demonstrates using curly brackets to specify exactly how many times a group should repeat. This example matches exactly three occurrences of 'Ha'.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/regular-expressions.md#2025-04-17_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n>>> ha_regex = re.compile(r'(Ha){3}')\n\n>>> mo1 = ha_regex.search('HaHaHa')\n>>> mo1.group()\n# 'HaHaHa'\n\n>>> mo2 = ha_regex.search('Ha')\n>>> mo2 is None\n# True\n```\n\n----------------------------------------\n\nTITLE: Installing Pipenv for Python Project Management\nDESCRIPTION: Command to install Pipenv, a tool that combines pip and virtualenv to manage Python project dependencies, using pip.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/virtual-environments.md#2025-04-17_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\npip install pipenv\n```\n\n----------------------------------------\n\nTITLE: Empty Collection Testing in Python\nDESCRIPTION: Illustrates the proper way to test for emptiness in Python collections. Demonstrates why direct boolean evaluation is preferred over using len() for emptiness checks.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/builtin/len.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> a = [1, 2, 3]\n\n# bad\n>>> if len(a) > 0:  # evaluates to True\n...     print(\"the list is not empty!\")\n...\n# the list is not empty!\n\n# good\n>>> if a: # evaluates to True\n...     print(\"the list is not empty!\")\n...\n# the list is not empty!\n```\n\n----------------------------------------\n\nTITLE: Saving Variables with Python Shelve Module\nDESCRIPTION: This snippet demonstrates how to save Python variables to a persistent shelf file. It uses the shelve.open() method with a context manager to create a shelf file named 'mydata' and stores a list under the key 'wife'.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/modules/shelve-module.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> import shelve\n\n>>> wife = ['Pretty', 'Lovely', 'Nice']\n>>> with shelve.open('mydata') as shelf_file:\n...     shelf_file['wife'] = wife\n```\n\n----------------------------------------\n\nTITLE: Exploring Object Attributes with Python dir() Function\nDESCRIPTION: Illustrates using dir() to list attributes and methods of a custom class instance, including both built-in and user-defined attributes.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/builtin/dir.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass MyClass:\n    def __init__(self):\n        self.x = 5\n        self.y = \"Hello\"\n\nobj = MyClass()\nprint(dir(obj))\n# Output: ['__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', ... 'x', 'y']\n```\n\n----------------------------------------\n\nTITLE: Using min() with List and Tuple in Python\nDESCRIPTION: Demonstrates how to use the min() function with a list and a tuple to find the smallest item in each iterable. The function returns the smallest value regardless of the iterable type.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/builtin/min.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> min([1, 2, 10, 40, 5])\n# 1\n>>> min((1, 2, 10, 40, 5))\n# 1\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Python Dictionary\nDESCRIPTION: Example of initializing a Python dictionary with key-value pairs for storing cat attributes.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/dictionaries.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nmy_cat = {\n    'size': 'fat',\n    'color': 'gray',\n    'disposition': 'loud'\n}\n```\n\n----------------------------------------\n\nTITLE: Using Python sorted() function with lists and parameters\nDESCRIPTION: Demonstrates how to use the sorted() function to sort both numeric and alphabetic lists. Shows the basic usage as well as using the reverse parameter to sort in descending order.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/builtin/sorted.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> sorted([1, 2, 3, 7, 4])\n# [1, 2, 3, 4, 7]\n\n>>> sorted(['a', 'h', 'e'])\n# ['a', 'e', 'h']\n\n>>> sorted([1, 2, 3, 7, 4], reverse=True)\n# [7, 4, 3, 2, 1]\n\n>>> sorted(['a', 'h', 'e'], reverse=True)\n# ['h', 'e', 'a']\n```\n\n----------------------------------------\n\nTITLE: Accessing kwargs as a Dictionary in Python\nDESCRIPTION: Demonstrates that keyword arguments passed to **kwargs are accessible as a dictionary within the function, showing the data type and contents.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/blog/python-easy-args-kwargs.md#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndef some_function(**kwargs):\n    print(f'keywords: {kwargs} as {type(kwargs)}')\n\n\nsome_function(key1='arg1', key2='arg2', key3='arg3')\n# keywords: {'key1': 'arg1', 'key2': 'arg2', 'key3': 'arg3'} as <class 'dict'>\n```\n\n----------------------------------------\n\nTITLE: Optional Matching with Question Mark in Python Regex\nDESCRIPTION: Shows how to use the ? character to make a group optional in a regex pattern. This example demonstrates matching both 'Batman' and 'Batwoman' with a single pattern.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/regular-expressions.md#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n>>> bat_regex = re.compile(r'Bat(wo)?man')\n\n>>> mo1 = bat_regex.search('The Adventures of Batman')\n>>> mo1.group()\n# 'Batman'\n\n>>> mo2 = bat_regex.search('The Adventures of Batwoman')\n>>> mo2.group()\n# 'Batwoman'\n```\n\n----------------------------------------\n\nTITLE: Creating a Virtual Environment with Anaconda\nDESCRIPTION: Command to create a new conda virtual environment named 'HelloWorld' using Anaconda's environment management system.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/virtual-environments.md#2025-04-17_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\nconda create -n HelloWorld\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Seed Consistency in Python's Random Module\nDESCRIPTION: Multiple examples showing how using the same seed value consistently produces the same random number, illustrating the deterministic nature of pseudo-random number generation.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/modules/random-module.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> random.seed(1)\n>>> random.random()\n# 0.13436424411240122\n\n>>> random.seed(1)\n>>> random.random()\n# 0.13436424411240122\n\n>>> random.seed(1)\n>>> random.random()\n# 0.13436424411240122\n\n>>> random.seed(1)\n>>> random.random()\n# 0.13436424411240122\n\n>>> random.seed(1)\n>>> random.random()\n# 0.13436424411240122\n```\n\n----------------------------------------\n\nTITLE: Customizing range() with Start, Stop, and Step Parameters in Python\nDESCRIPTION: Shows how to use range() with custom start, stop, and step arguments. This example starts at 0, stops before 10, and increments by 2 on each iteration.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/control-flow.md#2025-04-17_snippet_20\n\nLANGUAGE: python\nCODE:\n```\n# range(start, stop, step)\n>>> for i in range(0, 10, 2):\n...    print(i)\n...\n# 0\n# 2\n# 4\n# 6\n# 8\n```\n\n----------------------------------------\n\nTITLE: Implementing the Walrus Operator in Python\nDESCRIPTION: This snippet shows the usage of the Walrus Operator (Assignment Expression Operator) introduced in Python 3.8. It allows assignment of variables within an expression while returning the value of the variable.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/basics.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> print(my_var:=\"Hello World!\")\n# 'Hello world!'\n\n>>> my_var=\"Yes\"\n>>> print(my_var)\n# 'Yes'\n\n>>> print(my_var:=\"Hello\")\n# 'Hello'\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Python's round() Function with Various Inputs\nDESCRIPTION: This code snippet shows different use cases of the round() function in Python. It demonstrates rounding to the nearest integer and rounding to a specified number of decimal places.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/builtin/round.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> round(1.4)\n# 1\n>>> round(1.5)\n# 2\n>>> round(2.1)\n# 2\n>>> round(2.9)\n# 3\n>>> round(2/3, ndigits=3)\n# 0.667\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Escape Characters in Python Strings\nDESCRIPTION: This snippet shows how to use escape characters in Python strings to include special characters like newlines and quotes.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/manipulating-strings.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nprint(\"Hello there!\\nHow are you?\\nI\\'m doing fine.\")\n# Hello there!\n# How are you?\n# I'm doing fine.\n```\n\n----------------------------------------\n\nTITLE: Using Wildcard Character in Python Regex\nDESCRIPTION: Demonstrates using the dot (.) character as a wildcard to match any single character except a newline. This example finds all three-letter words ending with 'at'.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/regular-expressions.md#2025-04-17_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n>>> at_regex = re.compile(r'.at')\n\n>>> at_regex.findall('The cat in the hat sat on the flat mat.')\n['cat', 'hat', 'sat', 'lat', 'mat']\n```\n\n----------------------------------------\n\nTITLE: Accessing args by Index in Python\nDESCRIPTION: Demonstrates how to access specific arguments in *args by their index position, just like accessing elements in a tuple.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/blog/python-easy-args-kwargs.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef some_function(*args):\n    print(args[1])\n\n\nsome_function('arg1', 'arg2', 'arg3')  # arg2\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Regex Groups at Once in Python\nDESCRIPTION: Demonstrates how to use the groups() method to retrieve all grouped matches at once, and how to assign these groups to variables using tuple unpacking.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/regular-expressions.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> mo.groups()\n('415', '555-4242')\n\n>>> area_code, main_number = mo.groups()\n\n>>> print(area_code)\n415\n\n>>> print(main_number)\n555-4242\n```\n\n----------------------------------------\n\nTITLE: Activating an Anaconda Virtual Environment\nDESCRIPTION: Command to activate a conda virtual environment named 'HelloWorld', allowing installation of packages specific to this environment.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/virtual-environments.md#2025-04-17_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\nconda activate HelloWorld\n```\n\n----------------------------------------\n\nTITLE: Getting File Size and Listing Directories in Python\nDESCRIPTION: Shows how to get a file's size in bytes and list the contents of a directory using os.path.getsize() and os.listdir() functions.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/modules/os-module.md#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> import os\n\n>>> os.path.getsize('C:\\\\Windows\\\\System32\\\\calc.exe')\n# 776192\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> import os\n\n>>> os.listdir('C:\\\\Windows\\\\System32')\n# ['0409', '12520437.cpx', '12520850.cpx', '5U877.ax', 'aaclient.dll',\n# --snip--\n# 'xwtpdui.dll', 'xwtpw32.dll', 'zh-CN', 'zh-HK', 'zh-TW', 'zipfldr.dll']\n```\n\n----------------------------------------\n\nTITLE: Using intersection() Method with Python Sets\nDESCRIPTION: Shows how to find common elements between multiple sets using the intersection() method or the & operator.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/blog/python-sets-what-why-how.md#2025-04-17_snippet_19\n\nLANGUAGE: python\nCODE:\n```\n>>> s1 = {1, 2, 3}\n>>> s2 = {2, 3, 4}\n>>> s3 = {3, 4, 5}\n>>> s1.intersection(s2, s3)  # or 's1 & s2 & s3'\n{3}\n```\n\n----------------------------------------\n\nTITLE: Formatting Numbers as Percentages in f-Strings\nDESCRIPTION: Demonstrates how to format a decimal number as a percentage with the :.2% format specifier in f-strings, which multiplies by 100 and adds % symbol.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/string-formatting.md#2025-04-17_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n>>> a = 0.816562\n>>> f\"{a:.2%}\"\n# '81.66%'\n```\n\n----------------------------------------\n\nTITLE: Accessing DateTime Attributes\nDESCRIPTION: Demonstrates how to access various date and time attributes from a datetime object.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/modules/datetime-module.md#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> now.date()\n# datetime.date(2022, 7, 23)\n>>> now.time()\n# datetime.time(19, 56, 49, 589806)\n>>> now.year\n# 2022\n>>> now.month\n# 7\n>>> now.day\n# 23\n>>> now.hour\n# 19\n>>> now.minute\n# 56\n>>> now.second\n# 49\n>>> now.microsecond\n# 589806\n```\n\n----------------------------------------\n\nTITLE: Using shuffle() Method in Python's Random Module\nDESCRIPTION: The shuffle() method randomly reorders elements in a mutable sequence in-place. This function modifies the original list rather than returning a new one.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/modules/random-module.md#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n>>> my_list = [1, 2, 3, 4]\n\n>>> random.shuffle(my_list)\n>>> my_list\n# [1, 4, 3, 2]\n\n>>> random.shuffle(my_list)\n>>> my_list\n# [2, 4, 3, 1]\n\n>>> random.shuffle(my_list)\n>>> my_list\n# [4, 2, 3, 1]\n```\n\n----------------------------------------\n\nTITLE: Using 'in' and 'not in' Operators with Python Strings\nDESCRIPTION: This snippet demonstrates how to use the 'in' and 'not in' operators to check for substrings within Python strings.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/manipulating-strings.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n'Hello' in 'Hello World'\n# True\n\n'Hello' in 'Hello'\n# True\n\n'HELLO' in 'Hello World'\n# False\n\n'' in 'spam'\n# True\n\n'cats' not in 'cats and dogs'\n# False\n```\n\n----------------------------------------\n\nTITLE: Retrieving Filenames from ZIP Archive\nDESCRIPTION: Demonstrates how to get a list of all filenames contained in a ZIP archive using the namelist() method.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/modules/zipfile-module.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> import zipfile\n>>>\n>>> with zipfile.ZipFile('example.zip', 'r') as zf:\n...    print(zf.namelist())\n...\n# ['README.txt']\n```\n\n----------------------------------------\n\nTITLE: Compiling and Executing Code String with Python compile() Function\nDESCRIPTION: This example demonstrates how to use the compile() function to convert a string containing Python code into a code object. The code object is then executed using exec(), and a function defined within the code string is called.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/builtin/compile.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ncode_string = \"\"\"\ndef hello_world():\n    print('Hello, world!')\n\"\"\"\n\n# Compile the string into a code object\ncode_object = compile(code_string, '<string>', 'exec')\n\n# Execute the code object\nexec(code_object)\n\n# Call the function defined in the code object\nhello_world()\n```\n\n----------------------------------------\n\nTITLE: Importing Python Datetime Module\nDESCRIPTION: Basic import statement for the datetime module.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/modules/datetime-module.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport datetime\n```\n\n----------------------------------------\n\nTITLE: Pattern Matching by Iterable Length in Python\nDESCRIPTION: Example of pattern matching based on the length and contents of an iterable, demonstrating unpacking and rest patterns.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/control-flow.md#2025-04-17_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n>>> today_responses = [200, 300, 404, 500]\n>>> match today_responses:\n...     case [a]:\n...             print(f\"One response today: {a}\")\n...     case [a, b]:\n...             print(f\"Two responses today: {a} and {b}\")\n...     case [a, b, *rest]:\n...             print(f\"All responses: {a}, {b}, {rest}\")\n...\n# All responses: 200, 300, [404, 500]\n```\n\n----------------------------------------\n\nTITLE: Performance Comparison: List vs Set for Duplicate Removal\nDESCRIPTION: Uses the timeit module to compare the performance of removing duplicates using a list comprehension versus using a set. The set method proves to be faster.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/blog/python-sets-what-why-how.md#2025-04-17_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n>>> from timeit import timeit\n>>> def no_duplicates(list):\n...     no_duplicate_list = []\n...     [no_duplicate_list.append(item) for item in list if item not in no_duplicate_list]\n...     return no_duplicate_list\n...\n>>> # first, let's see how the list perform:\n>>> print(timeit('no_duplicates([1, 2, 3, 1, 7])', globals=globals(), number=1000))\n0.0018683355819786227\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> from timeit import timeit\n>>> # and the set:\n>>> print(timeit('list(set([1, 2, 3, 1, 2, 3, 4]))', number=1000))\n0.0010220493243764395\n>>> # faster and cleaner =)\n```\n\n----------------------------------------\n\nTITLE: Conditional List Comprehension\nDESCRIPTION: Demonstrates how to add conditional filtering to list comprehensions compared to traditional for loops.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/blog/python-comprehensions-step-by-step.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> names = ['Charles', 'Susan', 'Patrick', 'George', 'Carol']\n\n>>> new_list = []\n>>> for n in names:\n...     if n.startswith('C'):\n...         new_list.append(n)\n\n>>> print(new_list)\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> names = ['Charles', 'Susan', 'Patrick', 'George', 'Carol']\n>>> new_list = [n for n in names if n.startswith('C')]\n>>> print(new_list)\n```\n\n----------------------------------------\n\nTITLE: Adding Time with timedelta\nDESCRIPTION: Shows how to add days and seconds to a datetime object using timedelta. Demonstrates adding multiple time units simultaneously.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/modules/datetime-module.md#2025-04-17_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n>>> from datetime import datetime, timedelta\n\n>>> now = datetime.now()\n>>> now\n# datetime.datetime(2022, 7, 23, 21, 25, 2, 341081)\n\n>>> now + timedelta(days=10, seconds=15)\n# datetime.datetime(2022, 8, 2, 21, 25, 17, 341081)\n```\n\n----------------------------------------\n\nTITLE: Extracting All Files from ZIP Archive\nDESCRIPTION: Shows how to extract all files from a ZIP archive to the current working directory using the extractall() method.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/modules/zipfile-module.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> with zipfile.ZipFile('example.zip') as example_zip:\n...     example_zip.extractall()\n```\n\n----------------------------------------\n\nTITLE: Using time() Object in Python\nDESCRIPTION: Shows how to create and use time objects with hour, minute, and second attributes.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/modules/datetime-module.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> from datetime import time\n>>> obj = time(10, 20, 33)\n>>> obj.hour\n# 10\n>>> obj.second\n# 33\n>>> obj.microsecond\n# 0\n```\n\n----------------------------------------\n\nTITLE: Converting Values to Float in Python\nDESCRIPTION: Demonstrates how to use the float() function to convert both string and integer values to floating point numbers. The function accepts either numeric strings or integers as input and returns their floating point representation.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/builtin/float.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> float('10')\n# 10.0\n>>> float(10)\n# 10.0\n```\n\n----------------------------------------\n\nTITLE: While Loop Example in Python\nDESCRIPTION: Basic while loop that repeats execution as long as a condition remains True, with a counter to control the number of iterations.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/control-flow.md#2025-04-17_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n>>> spam = 0\n>>> while spam < 5:\n...     print('Hello, world.')\n...     spam = spam + 1\n...\n# Hello, world.\n# Hello, world.\n# Hello, world.\n# Hello, world.\n# Hello, world.\n```\n\n----------------------------------------\n\nTITLE: Creating a bytearray from bytes in Python\nDESCRIPTION: This example shows how to create a bytearray object from a bytes object using the bytearray() function.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/builtin/bytearray.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> data = b\"Hello, World!\"\n>>> bytearray_obj = bytearray(data)\n>>> print(bytearray_obj)\n# bytearray(b'Hello, World!')\n```\n\n----------------------------------------\n\nTITLE: Comparing chr() with its Inverse Function ord()\nDESCRIPTION: Shows how chr() works as the inverse of ord() function, which converts characters back to their Unicode code point integers.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/builtin/chr.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nprint(ord('a'))\n# 97\nprint(ord('A'))\n# 65\nprint(ord('x'))\n# 120\n```\n\n----------------------------------------\n\nTITLE: Using get() Method with kwargs in Python\nDESCRIPTION: Demonstrates how to use the dictionary get() method to retrieve values from kwargs by their key names.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/blog/python-easy-args-kwargs.md#2025-04-17_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ndef some_function(key, **kwargs):\n    print(kwargs.get(key))\n\n\nsome_function('key3', key1='arg1', key2='arg2', key3='arg3')\n# arg3\n```\n\n----------------------------------------\n\nTITLE: Demonstrating String Formatting in Python\nDESCRIPTION: This code snippet shows two ways of formatting strings in Python: using the format() method and f-strings. It demonstrates how to insert variables into a string template.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/builtin/format.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nname = 'Micheal'\ncompany = 'Dunder Mifflin'\n\nprint(\"My name is {0} and I work for {1}.\".format(name, company))\n\n# Formatting string (faster and easier)\nprint(f\"My name is {name} and I work for {company}.\")\n```\n\n----------------------------------------\n\nTITLE: Using pop() Method with Python Sets\nDESCRIPTION: Shows how to use pop() method to randomly remove and return an element from a set.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/blog/python-sets-what-why-how.md#2025-04-17_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n>>> s = {1, 2, 3, 4, 5}\n>>> s.pop()  # removes an arbitrary element\n1\n>>> s\n{2, 3, 4, 5}\n```\n\n----------------------------------------\n\nTITLE: Installing virtualenv in Python\nDESCRIPTION: Command to install the virtualenv package using pip, which allows creation of isolated Python environments.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/virtual-environments.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install virtualenv\n```\n\n----------------------------------------\n\nTITLE: Setting up the Python Cheatsheet project locally\nDESCRIPTION: Commands to clone the project repository, navigate to the directory, and install dependencies using pnpm.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/src/pages/contributing.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/wilfredinni/python-cheatsheet.git\ncd python-cheatsheet\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Justifying Text with rjust(), ljust(), and center() in Python\nDESCRIPTION: These examples demonstrate how to use rjust(), ljust(), and center() methods to align and pad Python strings.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/manipulating-strings.md#2025-04-17_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n'Hello'.rjust(10)\n# '     Hello'\n\n'Hello'.rjust(20)\n# '               Hello'\n\n'Hello World'.rjust(20)\n# '         Hello World'\n\n'Hello'.ljust(10)\n# 'Hello     '\n\n'Hello'.center(20)\n# '       Hello       '\n\n'Hello'.rjust(20, '*')\n# '***************Hello'\n\n'Hello'.ljust(20, '-')\n# 'Hello---------------'\n\n'Hello'.center(20, '=')\n# '=======Hello========'\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Math Operators in Python\nDESCRIPTION: This snippet shows examples of various mathematical operations in Python, including exponents, modulus, integer division, and regular division. It demonstrates the order of operations and how different operators work.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/basics.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> 2 + 3 * 6\n# 20\n\n>>> (2 + 3) * 6\n# 30\n\n>>> 2 ** 8\n#256\n\n>>> 23 // 7\n# 3\n\n>>> 23 % 7\n# 2\n\n>>> (5 - 1) * ((7 + 1) / (3 - 1))\n# 16.0\n```\n\n----------------------------------------\n\nTITLE: Sample Python code with formatting issues\nDESCRIPTION: Example of poorly formatted Python code to demonstrate Black's formatting capabilities.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/blog/python-projects-with-poetry-and-vscode-part-2.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfor i in range(5):         # this comment has too many spaces\n      print(i)  # this line has 6 space indentation.\n```\n\n----------------------------------------\n\nTITLE: Using chr() to Convert Integers to Characters\nDESCRIPTION: Demonstrates the basic usage of chr() function by converting integer Unicode code points to their corresponding characters.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/builtin/chr.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> print(chr(97))\n# 'a'\n>>> print(chr(65))\n# 'A'\n>>> print(chr(120))\n# 'x'\n```\n\n----------------------------------------\n\nTITLE: Slicing args in Python\nDESCRIPTION: Shows how to use slice notation to get a subset of the arguments passed to a function via *args.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/blog/python-easy-args-kwargs.md#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef some_function(*args):\n    print(args[0:2])\n\n\nsome_function('arg1', 'arg2', 'arg3')\n# ('arg1', 'arg2')\n```\n\n----------------------------------------\n\nTITLE: Creating Tuples with List Comprehension in Python\nDESCRIPTION: Shows how to use list comprehension to create a list of tuples containing combinations of numbers from 1 to 2.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/comprehensions.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> n = [(a, b) for a in range(1, 3) for b in range(1, 3)]\n>>> n\n# [(1, 1), (1, 2), (2, 1), (2, 2)]\n```\n\n----------------------------------------\n\nTITLE: Calling a Static Method on a Python Class Instance\nDESCRIPTION: This example shows how to call a static method on an instance of a class, demonstrating that static methods can be accessed through both the class and its instances.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/builtin/staticmethod.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> class Class:\n>>>    @staticmethod\n>>>    def function():\n>>>        print(\"X\")\n>>>\n>>> new_class = Class()\n>>> new_class.function()\n>>> # X\n```\n\n----------------------------------------\n\nTITLE: Checking String Case with isupper() and islower() in Python\nDESCRIPTION: These examples demonstrate how to use isupper() and islower() methods to check the case of Python strings.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/manipulating-strings.md#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nspam = 'Hello world!'\nspam.islower()\n# False\n\nspam.isupper()\n# False\n\n'HELLO'.isupper()\n# True\n\n'abc12345'.islower()\n# True\n\n'12345'.islower()\n# False\n\n'12345'.isupper()\n# False\n```\n\n----------------------------------------\n\nTITLE: Creating a new branch for contributions\nDESCRIPTION: Git commands to create and switch to a new branch for making changes to the project.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/src/pages/contributing.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit branch fix_bug\ngit checkout fix_bug\n```\n\n----------------------------------------\n\nTITLE: Using help() with Python Built-in Objects\nDESCRIPTION: Examples demonstrating the usage of help() function with different Python built-in objects (type, str, and help). Shows the detailed documentation output including method descriptions, parameters, and return values for each object.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/builtin/help.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> help(type)\n# Help on class type in module builtins:\n\n# class type(object)\n#  |  type(object_or_name, bases, dict)\n#  |  type(object) -> the object's type\n#  |  type(name, bases, dict) -> a new type\n#  |\n#  |  Methods defined here:\n#  |\n#  |  __call__(self, /, *args, **kwargs)\n#  |      Call self as a function.\n#  |\n#  |  __delattr__(self, name, /)\n#  |      Implement delattr(self, name).\n#  |\n#  |  __dir__(self, /)\n#  |      Specialized __dir__ implementation for types.\n#  |\n#  |  __getattribute__(self, name, /)\n# :\n\n>>> help(str)\n# Help on class str in module builtins:\n\n# class str(object)\n#  |  str(object='') -> str\n#  |  str(bytes_or_buffer[, encoding[, errors]]) -> str\n#  |\n#  |  Create a new string object from the given object. If encoding or\n#  |  errors is specified, then the object must expose a data buffer\n#  |  that will be decoded using the given encoding and error handler.\n#  |  Otherwise, returns the result of object.__str__() (if defined)\n#  |  or repr(object).\n#  |  encoding defaults to sys.getdefaultencoding().\n#  |  errors defaults to 'strict'.\n#  |\n#  |  Methods defined here:\n# :\n\n>>> help(help)\n# Help on _Helper in module _sitebuiltins object:\n\n# class _Helper(builtins.object)\n#  |  Define the builtin 'help'.\n#  |\n#  |  This is a wrapper around pydoc.help that provides a helpful message\n#  |  when 'help' is typed at the Python interactive prompt.\n#  |\n#  |  Calling help() at the Python prompt starts an interactive help session.\n#  |  Calling help(thing) prints help for the python object 'thing'.\n#  |\n#  |  Methods defined here:\n#  |\n#  |  __call__(self, *args, **kwds)\n#  |      Call self as a function.\n#  |\n# :\n```\n\n----------------------------------------\n\nTITLE: Using Augmented Assignment Operators in Python\nDESCRIPTION: This snippet demonstrates the use of augmented assignment operators in Python. These operators combine assignment with arithmetic operations, providing a more concise way to update variables.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/basics.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> greeting = 'Hello'\n>>> greeting += ' world!'\n>>> greeting\n# 'Hello world!'\n\n>>> number = 1\n>>> number += 1\n>>> number\n# 2\n\n>>> my_list = ['item']\n>>> my_list *= 3\n>>> my_list\n# ['item', 'item', 'item']\n```\n\n----------------------------------------\n\nTITLE: Default Random Number Generation in Python\nDESCRIPTION: Without specifying a seed value, Python's random generator uses the current system time as seed, producing different numbers on each call.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/modules/random-module.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> random.random()\n# 0.8474337369372327\n>>> random.random()\n# 0.763774618976614\n>>> random.random()\n# 0.2550690257394217\n```\n\n----------------------------------------\n\nTITLE: Checking Class Inheritance with issubclass() in Python\nDESCRIPTION: This example demonstrates the usage of issubclass() function to check hierarchical relationships between classes. It creates two classes, First and Second, where Second inherits from First, then tests the relationship in both directions.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/builtin/issubclass.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass First:\n    pass\n\nclass Second(First):\n    pass\n\nprint(issubclass(Second, First))  # True\nprint(issubclass(First, Second)) # False\n```\n\n----------------------------------------\n\nTITLE: Using Negative Indexes with Python Lists\nDESCRIPTION: Demonstrates how to access list elements using negative indexes, which count from the end of the list. It also shows string formatting with list elements.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/lists-and-tuples.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> furniture = ['table', 'chair', 'rack', 'shelf']\n\n>>> furniture[-1]\n# 'shelf'\n\n>>> furniture[-3]\n# 'chair'\n\n>>> f'The {furniture[-1]} is bigger than the {furniture[-3]}'\n# 'The shelf is bigger than the chair'\n```\n\n----------------------------------------\n\nTITLE: Guard Clauses in Pattern Matching\nDESCRIPTION: Example of using guard clauses (if conditions) within pattern matching cases for additional conditional filtering.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/control-flow.md#2025-04-17_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n>>> response_code = 300\n>>> match response_code:\n...     case int():\n...             if response_code > 99 and response_code < 500:\n...                 print('Code is a valid number')\n...     case _:\n...             print('Code is an invalid number')\n...\n# Code is a valid number\n```\n\n----------------------------------------\n\nTITLE: Illustrating Set Indexing Limitation\nDESCRIPTION: Demonstrates that sets do not support indexing. Attempting to access a set element by index raises a TypeError.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/blog/python-sets-what-why-how.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> s = {1, 2, 3}\n>>> s[0]\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nTypeError: 'set' object does not support indexing\n```\n\n----------------------------------------\n\nTITLE: Implementing a Class-based Context Manager in Python\nDESCRIPTION: Demonstrates how to create a context manager by defining a class with __enter__ and __exit__ methods. This approach provides more control over the context management process.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/context-manager.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass ContextManager:\n    def __enter__(self, *args, **kwargs):\n        print(\"--enter--\")\n\n    def __exit__(self, *args):\n        print(\"--exit--\")\n\n\nwith ContextManager():\n    print(\"test\")\n#--enter--\n#test\n#--exit--\n```\n\n----------------------------------------\n\nTITLE: Creating Multiline f-Strings in Python\nDESCRIPTION: Shows how to create multiline formatted strings using f-strings in Python, which can improve readability for longer strings.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/string-formatting.md#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> name = 'Robert'\n>>> messages = 12\n>>> (\n... f'Hi, {name}. '\n... f'You have {messages} unread messages'\n... )\n# 'Hi, Robert. You have 12 unread messages'\n```\n\n----------------------------------------\n\nTITLE: Using globals and locals Parameters with exec()\nDESCRIPTION: Shows how to use custom global and local namespaces with exec() to control variable scope and visibility during code execution.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/builtin/exec.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nx = 5\ncode = \"x = x * 2\"\nglobals_dict = {\"x\": 10}\nlocals_dict = {\"x\": 20}\nexec(code, globals_dict, locals_dict)\nprint(x)             # Output: 5 (unchanged)\nprint(globals_dict)  # Output: {'x': 10}\nprint(locals_dict)   # Output: {'x': 40}\n```\n\n----------------------------------------\n\nTITLE: Adding Dictionary Items with Conditional Check\nDESCRIPTION: Shows a traditional way to add an item to a dictionary by first checking if the key exists to avoid overwriting existing values.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/dictionaries.md#2025-04-17_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n>>> wife = {'name': 'Rose', 'age': 33}\n>>> if 'has_hair' not in wife:\n...     wife['has_hair'] = True\n```\n\n----------------------------------------\n\nTITLE: Using next() with List Iterator in Python\nDESCRIPTION: Shows how to create a list iterator and use next() to retrieve successive elements. Demonstrates the basic functionality of next() by iterating through a simple list of integers.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/builtin/next.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ni = iter([1, 2, 3])\ni\n# <list_iterator object at 0x7f93158badc0>\nnext(i)\n# 1\nnext(i)\n# 2\nnext(i)\n# 3\n```\n\n----------------------------------------\n\nTITLE: Using dir() with Built-in Types in Python\nDESCRIPTION: Demonstrates how dir() can be used to explore the methods and attributes of built-in Python types, such as lists.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/builtin/dir.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nmy_list = [1, 2, 3]\nprint(dir(my_list))\n# Output: [..., 'append', 'clear', 'copy', 'count', 'extend', 'index', 'insert', 'pop', 'remove', 'reverse', 'sort']\n```\n\n----------------------------------------\n\nTITLE: Converting Integers to Hexadecimal Strings using Python's hex() Function\nDESCRIPTION: This code snippet demonstrates the usage of the hex() function in Python to convert integer values to lowercase hexadecimal strings. The function automatically prefixes the result with '0x'.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/builtin/hex.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> hex(1)\n# '0x1'\n>>> hex(10)\n# '0xa'\n>>> hex(100)\n# '0x64'\n>>> hex(1000)\n# '0x3e8'\n```\n\n----------------------------------------\n\nTITLE: Adding Single Element to a Set\nDESCRIPTION: Demonstrates how to add a single element to a set using the add() method.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/blog/python-sets-what-why-how.md#2025-04-17_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n>>> s = {1, 2, 3}\n>>> s.add(4)\n>>> s\n{1, 2, 3, 4}\n```\n\n----------------------------------------\n\nTITLE: Splitting Strings with split() Method in Python\nDESCRIPTION: This snippet shows how to use the split() method to divide Python strings into lists of substrings based on specified delimiters.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/manipulating-strings.md#2025-04-17_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n'My name is Simon'.split()\n# ['My', 'name', 'is', 'Simon']\n\n'MyABCnameABCisABCSimon'.split('ABC')\n# ['My', 'name', 'is', 'Simon']\n\n'My name is Simon'.split('m')\n# ['My na', 'e is Si', 'on']\n\n' My  name is  Simon'.split()\n# ['My', 'name', 'is', 'Simon']\n\n' My  name is  Simon'.split(' ')\n# ['', 'My', '', 'name', 'is', '', 'Simon']\n```\n\n----------------------------------------\n\nTITLE: Matching Everything with Dot-Star in Python Regex\nDESCRIPTION: Shows how to use the dot-star (.*) combination to match any text pattern between two known strings. This example extracts first and last names from a formatted string.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/regular-expressions.md#2025-04-17_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n>>> name_regex = re.compile(r'First Name: (.*) Last Name: (.*)')\n\n>>> mo = name_regex.search('First Name: Al Last Name: Sweigart')\n>>> mo.group(1)\n# 'Al'\n\n>>> mo.group(2)\n'Sweigart'\n```\n\n----------------------------------------\n\nTITLE: Using locals() Function to Access Local Variables in Python\nDESCRIPTION: This example demonstrates how to use the locals() built-in function to access all local variables within a function scope. The function defines two local variables 'name' and 'age', then calls locals() to retrieve and print a dictionary containing these local variables and their values.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/builtin/locals.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef my_function():\n    name = \"Jim\"\n    age = 35\n    print(locals())\n\nmy_function() # {'name': 'Jim', 'age': 35}\n```\n\n----------------------------------------\n\nTITLE: Creating Negative Character Classes in Python Regex\nDESCRIPTION: Shows how to create a negative character class that matches any character that is NOT in the specified set. This is done by placing a caret (^) after the opening bracket.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/regular-expressions.md#2025-04-17_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n>>> consonant_regex = re.compile(r'[^aeiouAEIOU]')\n>>> consonant_regex.findall('Robocop eats baby food. BABY FOOD.')\n# ['R', 'b', 'c', 'p', ' ', 't', 's', ' ', 'b', 'b', 'y', ' ', 'f', 'd', '.', '\\n', 'B', 'B', 'Y', ' ', 'F', 'D', '.']\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Iterator with Python iter()\nDESCRIPTION: Demonstrates how to create an iterator from a list using iter() and access elements using __next__(). The example shows creating an iterator from a list [1, 2, 3] and retrieving each element sequentially using the __next__() method.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/builtin/iter.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> i = iter([1, 2, 3])\n>>> i\n# <list_iterator object at 0x7f93158badc0>\n>>> i.__next__()\n# 1\n>>> i.__next__()\n# 2\n>>> i.__next__()\n# 3\n```\n\n----------------------------------------\n\nTITLE: Creating and Checking Type of Dictionary Using dict() in Python\nDESCRIPTION: This snippet demonstrates how to create an empty dictionary using the dict() function and then checks its type using the type() function. It shows that the resulting object is of class 'dict'.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/builtin/dict.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> a = dict()\n>>> type(a)\n# <class 'dict'>\n```\n\n----------------------------------------\n\nTITLE: Importing Python's Random Module\nDESCRIPTION: How to import Python's built-in random module which allows generating random elements.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/modules/random-module.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport random\n```\n\n----------------------------------------\n\nTITLE: Basic For Loop vs List Comprehension Example\nDESCRIPTION: Demonstrates the basic syntax difference between a traditional for loop and list comprehension for printing items from a list.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/blog/python-comprehensions-step-by-step.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> names = ['Charles', 'Susan', 'Patrick', 'George', 'Carol']\n>>> for n in names:\n...     print(n)\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> names = ['Charles', 'Susan', 'Patrick', 'George', 'Carol']\n>>> [print(n) for n in names]\n```\n\n----------------------------------------\n\nTITLE: Using date() Object in Python\nDESCRIPTION: Demonstrates creation and usage of date objects with year, month, and day attributes.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/modules/datetime-module.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> from datetime import date\n>>> obj = date(2022, 12, 1)\n>>> obj.year\n# 2022\n>>> obj.month\n# 12\n>>> obj.day\n# 1\n```\n\n----------------------------------------\n\nTITLE: Implementing Debug Logging in a Factorial Function\nDESCRIPTION: Demonstrates how to use logging to debug a factorial function by tracking execution flow and variable values at different stages. This helps identify where calculations go wrong.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/debugging.md#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> import logging\n>>> logging.basicConfig(level=logging.DEBUG, format=' %(asctime)s - %(levelname)s- %(message)s')\n>>> logging.debug('Start of program')\n\n>>> def factorial(n):\n...     logging.debug('Start of factorial(%s)' % (n))\n...     total = 1\n...     for i in range(1, n + 1):\n...         total *= i\n...         logging.debug('i is ' + str(i) + ', total is ' + str(total))\n...     logging.debug('End of factorial(%s)' % (n))\n...     return total\n...\n>>> print(factorial(5))\n>>> logging.debug('End of program')\n# 2015-05-23 16:20:12,664 - DEBUG - Start of program\n# 2015-05-23 16:20:12,664 - DEBUG - Start of factorial(5)\n# 2015-05-23 16:20:12,665 - DEBUG - i is 0, total is 0\n# 2015-05-23 16:20:12,668 - DEBUG - i is 1, total is 0\n# 2015-05-23 16:20:12,670 - DEBUG - i is 2, total is 0\n# 2015-05-23 16:20:12,673 - DEBUG - i is 3, total is 0\n# 2015-05-23 16:20:12,675 - DEBUG - i is 4, total is 0\n# 2015-05-23 16:20:12,678 - DEBUG - i is 5, total is 0\n# 2015-05-23 16:20:12,680 - DEBUG - End of factorial(5)\n# 0\n# 2015-05-23 16:20:12,684 - DEBUG - End of program\n```\n\n----------------------------------------\n\nTITLE: Creating and Manipulating Python Lists\nDESCRIPTION: This snippet demonstrates how to create an empty list using the list() constructor and then add elements to it using the append() method. It shows the basic operations of initializing a list and modifying its contents.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/builtin/list.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> l = list()\n>>> l\n# []\n>>> l.append(1)\n>>> l.append(2)\n>>> l\n# [1, 2]\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of exec() in Python\nDESCRIPTION: Demonstrates how to execute a simple Python statement stored as a string using the exec() function.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/builtin/exec.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ncode_to_execute = \"print('Hello, exec()!')\"\nexec(code_to_execute)\n# Output: Hello, exec()!\n```\n\n----------------------------------------\n\nTITLE: Exploring Names in the Current Namespace with Python dir() Function\nDESCRIPTION: Demonstrates how to use dir() without arguments to list names in the current local scope, including variables and functions.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/builtin/dir.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\na = 10\nb = \"Hello\"\ndef my_function():\n    pass\n\nprint(dir())\n# Output: ['__annotations__', '__builtins__', '__doc__', '__loader__', '__name__', '__package__', '__spec__', 'a', 'b', 'my_function']\n```\n\n----------------------------------------\n\nTITLE: Counting Occurrences with count() Method in Python Strings\nDESCRIPTION: This example demonstrates how to use the count() method to count occurrences of a substring within a Python string, with optional start and end indices.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/manipulating-strings.md#2025-04-17_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nsentence = 'one sheep two sheep three sheep four'\nsentence.count('sheep')\n# 3\n\nsentence.count('e')\n# 9\n\nsentence.count('e', 6)\n# 8\n# returns count of e after 'one sh' i.e 6 chars since beginning of string\n\nsentence.count('e', 7)\n# 7\n```\n\n----------------------------------------\n\nTITLE: Performance Comparison: List vs Set for Membership Tests\nDESCRIPTION: Compares the performance of membership tests in lists versus sets using the timeit module. Sets demonstrate significantly faster performance for this operation.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/blog/python-sets-what-why-how.md#2025-04-17_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n>>> from timeit import timeit\n>>> def in_test(iterable):\n...     for i in range(1000):\n...             if i in iterable:\n...                     pass\n...\n>>> timeit('in_test(iterable)', setup=\"from __main__ import in_test; iterable = list(range(1000))\", number=1000)\n# 12.459663048726043\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> from timeit import timeit\n>>> def in_test(iterable):\n...     for i in range(1000):\n...             if i in iterable:\n...                     pass\n...\n>>> timeit('in_test(iterable)', setup=\"from __main__ import in_test; iterable = set(range(1000))\", number=1000)\n# 0.12354438152988223\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Python's hash() function with different data types\nDESCRIPTION: This code snippet demonstrates the usage of Python's hash() built-in function with different data types. It shows how numeric values (1) and string values ('1', '10') produce different hash values, illustrating that hash values are unique to each object's value and type.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/builtin/hash.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> hash(1)\n# 1\n>>> hash('1')\n# -3658718886659147670\n>>> hash('10')\n# 5216539490891759533\n```\n\n----------------------------------------\n\nTITLE: Running Pytest in terminal\nDESCRIPTION: Command to run Pytest in the terminal to execute all tests in the project.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/blog/python-projects-with-poetry-and-vscode-part-2.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ pytest\n```\n\n----------------------------------------\n\nTITLE: Using range() with negative step parameter\nDESCRIPTION: Example showing range() with negative step parameter, which allows iterating backward. The range starts at 0 and counts down to -5.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/builtin/range.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> for i in range(0,-6,-1):\n...     print(i)\n# 0\n# -1\n# -2\n# -3\n# -4\n# -5\n```\n\n----------------------------------------\n\nTITLE: Basic Print Function Usage in Python\nDESCRIPTION: Demonstrates the basic usage of the print() function in Python, showing how it handles multiple arguments and different data types.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/builtin/print.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> print('Hello world!')\n# Hello world!\n\n>>> a = 1\n>>> print('Hello world!', a)\n# Hello world! 1\n```\n\n----------------------------------------\n\nTITLE: Importing Python's Regex Module\nDESCRIPTION: Shows how to import the regular expression module in Python, which is the first step for using regex functionality.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/regular-expressions.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> import re\n```\n\n----------------------------------------\n\nTITLE: Converting Integer to String with %d Specifier in Python\nDESCRIPTION: Shows how to use the %d format specifier to convert an integer value to a string within a formatted string.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/string-formatting.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> num = 5\n>>> 'I have %d apples' % num\n# \"I have 5 apples\"\n```\n\n----------------------------------------\n\nTITLE: Using if-else Statements in Python\nDESCRIPTION: Example of if-else statements where the else block executes only when the if condition evaluates to False.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/control-flow.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> name = 'Debora'\n\n>>> if name == 'George':\n...    print('Hi, George.')\n... else:\n...    print('You are not George')\n...\n# You are not George\n```\n\n----------------------------------------\n\nTITLE: Removing Whitespace with strip(), rstrip(), and lstrip() in Python\nDESCRIPTION: This snippet shows how to use strip(), rstrip(), and lstrip() methods to remove whitespace or specified characters from Python strings.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/manipulating-strings.md#2025-04-17_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nspam = '    Hello World     '\nspam.strip()\n# 'Hello World'\n\nspam.lstrip()\n# 'Hello World     '\n\nspam.rstrip()\n# '    Hello World'\n\nspam = 'SpamSpamBaconSpamEggsSpamSpam'\nspam.strip('ampS')\n# 'BaconSpamEggs'\n```\n\n----------------------------------------\n\nTITLE: Capturing Traceback Information as a String in Python\nDESCRIPTION: Shows how to use the traceback module to capture exception information as a string and write it to a file, which is useful for logging errors while allowing the program to continue execution.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/debugging.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> import traceback\n\n>>> try:\n...     raise Exception('This is the error message.')\n>>> except:\n...     with open('errorInfo.txt', 'w') as error_file:\n...         error_file.write(traceback.format_exc())\n...     print('The traceback info was written to errorInfo.txt.')\n...\n# 116\n# The traceback info was written to errorInfo.txt.\n```\n\n----------------------------------------\n\nTITLE: Iterating Through a List in Python\nDESCRIPTION: Shows how to use a for loop to iterate through elements of a Python list.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/lists-and-tuples.md#2025-04-17_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n>>> furniture = ['table', 'chair', 'rack', 'shelf']\n\n>>> for item in furniture:\n...     print(item)\n# table\n# chair\n# rack\n# shelf\n```\n\n----------------------------------------\n\nTITLE: Matching Builtin Classes in Python\nDESCRIPTION: Example of pattern matching against built-in Python types, demonstrating type-based conditional execution.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/control-flow.md#2025-04-17_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n>>> response_code = \"300\"\n>>> match response_code:\n...     case int():\n...             print('Code is a number')\n...     case str():\n...             print('Code is a string')\n...     case _:\n...             print('Code is neither a string nor a number')\n...\n# Code is a string\n```\n\n----------------------------------------\n\nTITLE: Using the print() Function with Keywords in Python\nDESCRIPTION: This snippet demonstrates the use of the print() function in Python, including its 'end' and 'sep' keyword arguments. These keywords allow for customization of output formatting.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/basics.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> print('Hello world!')\n# Hello world!\n\n>>> a = 1\n>>> print('Hello world!', a)\n# Hello world! 1\n\nphrase = ['printed', 'with', 'a', 'dash', 'in', 'between']\n>>> for word in phrase:\n...     print(word, end='-')\n...\n# printed-with-a-dash-in-between-\n\nprint('cats', 'dogs', 'mice', sep=',')\n# cats,dogs,mice\n```\n\n----------------------------------------\n\nTITLE: Basic getattr() Syntax Examples\nDESCRIPTION: Shows the basic syntax patterns for using getattr() function in Python. Demonstrates both the two-argument and three-argument forms of the function.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/builtin/getattr.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ngetattr(object, name)\n```\n\nLANGUAGE: python\nCODE:\n```\ngetattr(object, name, default)\n```\n\n----------------------------------------\n\nTITLE: Using bool() Function with Different Values in Python\nDESCRIPTION: Examples demonstrating how bool() function evaluates different types of values. Shows bool() converting numbers, strings, and boolean values to their corresponding Boolean representation following Python's truth testing procedure.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/builtin/bool.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> bool(0)\n# False\n\n>>> bool(1)\n# True\n\n>>> bool(2)\n# True\n\n>>> bool('3')\n# True\n\n>>> bool(False)\n# False\n\n>>> bool(True)\n# True\n```\n\n----------------------------------------\n\nTITLE: Basic if Statement Usage in Python\nDESCRIPTION: Examples of using if statements to conditionally execute code based on boolean expressions.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/control-flow.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> name = 'Debora'\n\n>>> if name == 'Debora':\n...    print('Hi, Debora')\n...\n# Hi, Debora\n\n>>> if name != 'George':\n...    print('You are not George')\n...\n# You are not George\n```\n\n----------------------------------------\n\nTITLE: Filtering dir() Output in Python\nDESCRIPTION: Shows how to use a list comprehension with dir() to filter out built-in attributes and focus on user-defined or module-specific attributes.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/builtin/dir.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport math\nprint([name for name in dir(math) if not name.startswith(\"__\")])\n# Output: ['acos', 'acosh', 'asin', 'asinh', 'atan', 'atan2', ... ]\n```\n\n----------------------------------------\n\nTITLE: Creating New List with Comprehension\nDESCRIPTION: Shows how to create a new list from an existing collection using both a traditional for loop and list comprehension approach.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/blog/python-comprehensions-step-by-step.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> names = ['Charles', 'Susan', 'Patrick', 'George', 'Carol']\n\n>>> new_list = []\n>>> for n in names:\n...     new_list.append(n)\n\n>>> print(new_list)\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> names = ['Charles', 'Susan', 'Patrick', 'George', 'Carol']\n>>> new_list = [n for n in names]\n>>> print(new_list)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Comparison Operators in Python\nDESCRIPTION: Examples of Python's comparison operators (==, !=, <, >, <=, >=) and how they evaluate to True or False based on different values.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/control-flow.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> 42 == 42\nTrue\n\n>>> 40 == 42\nFalse\n\n>>> 'hello' == 'hello'\nTrue\n\n>>> 'hello' == 'Hello'\nFalse\n\n>>> 'dog' != 'cat'\nTrue\n\n>>> 42 == 42.0\nTrue\n\n>>> 42 == '42'\nFalse\n```\n\n----------------------------------------\n\nTITLE: Calling a Static Method on a Python Class\nDESCRIPTION: This example demonstrates how to call a static method directly on the class itself without creating an instance.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/builtin/staticmethod.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> class Class:\n>>>    @staticmethod\n>>>    def function():\n>>>        print(\"X\")\n>>>\n>>> Class.function()\n>>> # X\n```\n\n----------------------------------------\n\nTITLE: Using the 'end' Keyword Argument with Python's print() Function\nDESCRIPTION: Shows how to use the 'end' keyword argument to modify the ending of each print statement, in this case adding a dash between words instead of a newline.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/builtin/print.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nphrase = ['printed', 'with', 'a', 'dash', 'in', 'between']\n>>> for word in phrase:\n...     print(word, end='-')\n...\n# printed-with-a-dash-in-between-\n```\n\n----------------------------------------\n\nTITLE: Creating a New Project with Poetry\nDESCRIPTION: Command to initialize a new Python project with Poetry, which creates a directory structure with pyproject.toml for dependency management.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/virtual-environments.md#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npoetry new my-project\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Python's abs() function with various numeric types\nDESCRIPTION: This code snippet shows the usage of the abs() function with different types of numbers including integers, floating-point numbers, complex numbers, and numbers in hexadecimal, binary, and octal formats. It demonstrates how abs() returns the absolute value or magnitude for each type.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/builtin/abs.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> abs(-1)\n# 1\n>>> abs(0)\n# 0\n>>> abs(1)\n# 1\n>>> abs(3.14)\n# 3.14\n>>> abs(3 + 2j)\n# 3.6055512754639896\n>>> abs(0x10)\n# 16\n>>> abs(0b10)\n# 2\n>>> abs(0o20)\n# 16\n```\n\n----------------------------------------\n\nTITLE: Converting Integers to Binary Strings using Python's bin() Function\nDESCRIPTION: This code demonstrates how to use Python's bin() function to convert integers to binary string representation. The result is always prefixed with '0b' to indicate a binary number. The examples show bin() applied to values 1, 10, 100, and 1000.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/builtin/bin.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> bin(1)\n# '0b1'\n\n>>> bin(10)\n# '0b1010'\n\n>>> bin(100)\n# '0b1100100'\n\n>>> bin(1000)\n# '0b1111101000'\n```\n\n----------------------------------------\n\nTITLE: Joining Multiple File Paths\nDESCRIPTION: Example of joining multiple file paths under a home directory using pathlib.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/modules/pathlib-module.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> my_files = ['accounts.txt', 'details.csv', 'invite.docx']\n>>> home = Path.home()\n>>> for filename in my_files:\n...     print(home / filename)\n...\n# /home/docs/accounts.txt\n# /home/docs/details.csv\n# /home/docs/invite.docx\n```\n\n----------------------------------------\n\nTITLE: Testing a Python Package in Interactive Shell\nDESCRIPTION: Example of how to test the 'how_long' package manually in the Python interactive shell after local installation, demonstrating the timer decorator functionality.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/blog/python-projects-with-poetry-and-vscode-part-3.md#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> from how_long import timer\n>>>\n>>> @timer\n... def test_function():\n...     [i for i in range(10000)]\n...\n>>> test_function()\nExecution Time: 705 ms.\n```\n\n----------------------------------------\n\nTITLE: JSON Data Structure Example\nDESCRIPTION: Illustrates a sample JSON object with various data types including strings, numbers, booleans, null, objects, and arrays.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/modules/json-module.md#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"Charles\",\n  \"age\": 33,\n  \"has_hair\": false,\n  \"hobbies\": [\"photography\", \"running\"],\n  \"appearance\": {\n    \"eyes\": \"brown\",\n    \"hair_color\": null\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing JSON Module in Python\nDESCRIPTION: Demonstrates how to import the built-in json module in Python for working with JSON data.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/modules/json-module.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport json\n```\n\n----------------------------------------\n\nTITLE: Using reversed() with a list in Python\nDESCRIPTION: This snippet demonstrates how to use the reversed() function with a list in Python. It creates a reverse iterator and shows how to access its elements using the __next__() method. The example also illustrates that the iterator object remains after all elements have been accessed.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/builtin/reversed.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> i = reversed([1, 2, 3])\n>>> i.__next__()\n# 3\n>>> i.__next__()\n# 2\n>>> i.__next__()\n# 1\n>>> i\n# <list_reverseiterator object at 0x7f93159ded00>\n```\n\n----------------------------------------\n\nTITLE: Adding Dependencies with Poetry Command\nDESCRIPTION: Command to add a dependency (pendulum) to a Poetry project, which automatically updates the pyproject.toml file with an appropriate version constraint.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/virtual-environments.md#2025-04-17_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n$ poetry add pendulum\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Elements to a Set\nDESCRIPTION: Shows how to add multiple elements to a set using the update() method. Duplicate elements are automatically removed.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/blog/python-sets-what-why-how.md#2025-04-17_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n>>> s = {1, 2, 3}\n>>> s.update([2, 3, 4, 5, 6])\n>>> s\n{1, 2, 3, 4, 5, 6}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Basic Usage of Python's property() Function\nDESCRIPTION: This snippet shows two basic examples of using the property() function in Python. It demonstrates that property() returns a property object when called with different types of arguments.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/builtin/property.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> property(1)\n# <property object at 0x7f93158c8590>\n>>> property('1')\n# <property object at 0x7f93159fe2c0>\n```\n\n----------------------------------------\n\nTITLE: Getting File Size with Pathlib\nDESCRIPTION: Shows how to get file size and other statistics using stat() method.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/modules/pathlib-module.md#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n>>> from pathlib import Path\n\n>>> stat = Path('/bin/python3.10').stat()\n>>> print(stat.st_size) # size in bytes\n# 10024\n```\n\n----------------------------------------\n\nTITLE: Updating Poetry dependencies in terminal\nDESCRIPTION: Command to check for and update project dependencies using Poetry in the terminal.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/blog/python-projects-with-poetry-and-vscode-part-2.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ poetry update\n```\n\n----------------------------------------\n\nTITLE: Matching One or More with Plus in Python Regex\nDESCRIPTION: Shows how to use the + (plus) character to match one or more occurrences of a group. The group must appear at least once for a match to occur.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/regular-expressions.md#2025-04-17_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n>>> bat_regex = re.compile(r'Bat(wo)+man')\n\n>>> mo1 = bat_regex.search('The Adventures of Batwoman')\n>>> mo1.group()\n# 'Batwoman'\n\n>>> mo2 = bat_regex.search('The Adventures of Batwowowowoman')\n>>> mo2.group()\n# 'Batwowowowoman'\n\n>>> mo3 = bat_regex.search('The Adventures of Batman')\n>>> mo3 is None\n# True\n```\n\n----------------------------------------\n\nTITLE: Creating a bytearray from a string in Python\nDESCRIPTION: This snippet demonstrates how to create a bytearray object from a string using the bytearray() constructor with UTF-8 encoding.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/builtin/bytearray.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> data = \"Hello, World!\"\n>>> bytearray_obj = bytearray(data, \"utf-8\")\n>>> print(bytearray_obj)\n# bytearray(b'Hello, World!')\n```\n\n----------------------------------------\n\nTITLE: Creating and Inspecting an Empty Set in Python\nDESCRIPTION: This snippet demonstrates how to create an empty set using the set() function, display its contents, and check its type. It shows that an empty set is represented as set() and confirms that it is an instance of the 'set' class.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/builtin/set.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> s = set()\n>>> s\n# set()\n>>> type(s)\n# <class 'set'>\n```\n\n----------------------------------------\n\nTITLE: Installing Python Package Using Setup.py\nDESCRIPTION: Basic command to install a Python package using setup.py. This is the standard way to install Python packages from source.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/setup-py.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython setup.py install\n```\n\n----------------------------------------\n\nTITLE: Creating bytes object using bytes() constructor in Python\nDESCRIPTION: Demonstrates how to create a bytes object from a string using the bytes() constructor with UTF-8 encoding. The resulting bytes object is then printed.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/builtin/bytes.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> data = \"Hello, World!\"\n>>> bytes_obj = bytes(data, \"utf-8\")\n>>> print(bytes_obj)\n# b'Hello, World!'\n```\n\n----------------------------------------\n\nTITLE: Creating frozenset Objects from Different Iterables in Python\nDESCRIPTION: Examples showing how to create frozenset objects from different iterable types including lists, sets, and tuples. The frozenset() function creates an immutable set containing unique elements from the provided iterable.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/builtin/frozenset.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> frozenset([1, 2, 3])\n# frozenset({1, 2, 3})\n\n>>> frozenset({1, 2, 3})\n# frozenset({1, 2, 3})\n\n>>> frozenset((1, 2, 3))\n# frozenset({1, 2, 3})\n```\n\n----------------------------------------\n\nTITLE: Converting Integers to Octal Strings using Python oct()\nDESCRIPTION: Examples demonstrating the use of Python's oct() function to convert various integer values to their octal string representations. Each result is prefixed with '0o' to indicate an octal number format.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/builtin/oct.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> oct(1)\n# '0o1'\n>>> oct(10)\n# '0o12'\n>>> oct(100)\n# '0o144'\n>>> oct(1000)\n# '0o1750'\n```\n\n----------------------------------------\n\nTITLE: Package Initialization with Version in Python\nDESCRIPTION: The __init__.py file for the 'how_long' package that imports and exposes the timer decorator and defines the package version.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/blog/python-projects-with-poetry-and-vscode-part-3.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom .how_long import timer\n\n__version__ = \"0.1.1\"\n```\n\n----------------------------------------\n\nTITLE: Disabling Logging in Python\nDESCRIPTION: Shows how to disable logging at specific levels using logging.disable() function. This allows for keeping logging code in place but silencing log messages when they're not needed.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/debugging.md#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n>>> import logging\n\n>>> logging.basicConfig(level=logging.INFO, format=' %(asctime)s -%(levelname)s - %(message)s')\n>>> logging.critical('Critical error! Critical error!')\n# 2015-05-22 11:10:48,054 - CRITICAL - Critical error! Critical error!\n\n>>> logging.disable(logging.CRITICAL)\n>>> logging.critical('Critical error! Critical error!')\n>>> logging.error('Error! Error!')\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with Poetry\nDESCRIPTION: Command to install all dependencies listed in the pyproject.toml file, creating or updating the virtual environment for the project.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/virtual-environments.md#2025-04-17_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\npoetry install\n```\n\n----------------------------------------\n\nTITLE: Switch-Case with OR Pattern in Python\nDESCRIPTION: Example of using the OR pattern (|) in pattern matching to handle multiple cases with the same response.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/control-flow.md#2025-04-17_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n>>> response_code = 502\n>>> match response_code:\n...     case 200 | 201:\n...         print(\"OK\")\n...     case 300 | 307:\n...         print(\"Redirect\")\n...     case 400 | 401:\n...         print(\"Bad Request\")\n...     case 500 | 502:\n...         print(\"Internal Server Error\")\n...\n# Internal Server Error\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Packages with Pipenv\nDESCRIPTION: Command to remove a package from a Pipenv project, updating the Pipfile accordingly.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/virtual-environments.md#2025-04-17_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\npipenv uninstall <package>\n```\n\n----------------------------------------\n\nTITLE: Creating bytes object using literal notation in Python\nDESCRIPTION: Shows how to create a bytes object using the literal notation by prefixing a string with 'b' or 'B'. The resulting bytes object is then printed.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/builtin/bytes.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndata = b\"Hello, World!\"\nprint(data)\n# b'Hello, World!'\n```\n\n----------------------------------------\n\nTITLE: Using % Operator for String Formatting in Python\nDESCRIPTION: Demonstrates the usage of the % operator for string formatting in Python. This is an older method, and newer alternatives like f-strings are recommended for new code.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/string-formatting.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> name = 'Pete'\n>>> 'Hello %s' % name\n# \"Hello Pete\"\n```\n\n----------------------------------------\n\nTITLE: Creating Deep Copies with copy.deepcopy()\nDESCRIPTION: Demonstrates how to use copy.deepcopy() to create a deep copy of a nested list. A deep copy recursively constructs new copies of all objects found in the original, showing how modifications to the original don't affect the deep copy.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/modules/copy-module.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> import copy\n>>> a = [[1],[2],[3]]\n>>> b = copy.deepcopy(a) ## this will copy the list a to list b\n\n>>> a[0][0] = 0\n>>> a[1] = None\n\n>>> a\n#[[0], None, [3]]\n>>> b\n#[[1], [2], [3]]\n```\n\n----------------------------------------\n\nTITLE: Removing Elements from a Set\nDESCRIPTION: Illustrates the difference between remove() and discard() methods for removing elements from a set. remove() raises an error if the element is not found, while discard() does not.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/blog/python-sets-what-why-how.md#2025-04-17_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n>>> s = {1, 2, 3}\n>>> s.remove(3)\n>>> s\n{1, 2}\n>>> s.remove(3)\n# Traceback (most recent call last):\n#   File \"<stdin>\", line 1, in <module>\n```\n\n----------------------------------------\n\nTITLE: Writing and Appending to Files in Python\nDESCRIPTION: Shows how to write new content to a file ('w' mode) and append content to an existing file ('a' mode). Also demonstrates reading back the written content using the read() method.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/reading-and-writing-files.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nwith open('bacon.txt', 'w') as bacon_file:\n    bacon_file.write('Hello world!\\n')\n# 13\n\nwith open('bacon.txt', 'a') as bacon_file:\n    bacon_file.write('Bacon is not a vegetable.')\n# 25\n\nwith open('bacon.txt') as bacon_file:\n    content = bacon_file.read()\n\nprint(content)\n# Hello world!\n# Bacon is not a vegetable.\n```\n\n----------------------------------------\n\nTITLE: Activating an Existing Virtual Environment\nDESCRIPTION: Command to activate a previously created virtual environment named 'HelloWorld' and move to its project directory.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/virtual-environments.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nworkon HelloWorld\n```\n\n----------------------------------------\n\nTITLE: Utilizing the input() Function in Python\nDESCRIPTION: This snippet shows how to use the input() function to receive user input in Python. It demonstrates basic usage, setting a default message, and using formatted strings to display the input.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/basics.md#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> print('What is your name?')   # ask for their name\n>>> my_name = input()\n>>> print('Hi, {}'.format(my_name))\n# What is your name?\n# Martha\n# Hi, Martha\n\n>>> my_name = input('What is your name? ')  # default message\n>>> print('Hi, {}'.format(my_name))\n# What is your name? Martha\n# Hi, Martha\n\n>>> my_name = input('What is your name? ')  # default message\n>>> print(f'Hi, {my_name}')\n# What is your name? Martha\n# Hi, Martha\n```\n\n----------------------------------------\n\nTITLE: Deactivating a Virtual Environment\nDESCRIPTION: Command to exit the currently active virtual environment and return to the global Python installation.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/virtual-environments.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndeactivate\n```\n\n----------------------------------------\n\nTITLE: Using ord() to Convert Characters to Unicode Code Points in Python\nDESCRIPTION: Examples of using the ord() function to convert single characters to their corresponding Unicode code point values. The numeric character '1' has a Unicode value of 49, while the lowercase letter 'a' has a Unicode value of 97.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/builtin/ord.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> ord('1')\n# 49\n>>> ord('a')\n# 97\n```\n\n----------------------------------------\n\nTITLE: Using Raw Strings in Python\nDESCRIPTION: This example demonstrates how raw strings in Python ignore escape characters and print backslashes as-is.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/manipulating-strings.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nprint(r\"Hello there!\\nHow are you?\\nI\\'m doing fine.\")\n# Hello there!\\nHow are you?\\nI\\'m doing fine.\n```\n\n----------------------------------------\n\nTITLE: Basic Setup.py Configuration\nDESCRIPTION: Example of a basic setup.py configuration file that includes the three required fields (name, version, packages) along with license information and a long description from README.txt.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/setup-py.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom distutils.core import setup\nsetup(\n   name='pythonCheatsheet',\n   version='0.1',\n   packages=['pipenv',],\n   license='MIT',\n   long_description=open('README.txt').read(),\n)\n```\n\n----------------------------------------\n\nTITLE: Using range() with only stop parameter\nDESCRIPTION: Example showing how to use range() with only the stop parameter. The range starts from 0 (default) and iterates up to but not including the stop value (5).\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/builtin/range.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> for i in range(5):\n...     print(i)\n# 0\n# 1\n# 2\n# 3\n# 4\n```\n\n----------------------------------------\n\nTITLE: Using difference() Method with Python Sets\nDESCRIPTION: Demonstrates how to create a new set with elements that are in the first set but not in the second set using the difference() method or the - operator.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/blog/python-sets-what-why-how.md#2025-04-17_snippet_20\n\nLANGUAGE: python\nCODE:\n```\n>>> s1 = {1, 2, 3}\n>>> s2 = {2, 3, 4}\n>>> s1.difference(s2)  # or 's1 - s2'\n{1}\n```\n\n----------------------------------------\n\nTITLE: Using breakpoint() in a Loop for Debugging in Python\nDESCRIPTION: This example demonstrates how to use the breakpoint() function within a for loop to enter the debugger when a specific condition is met. When the variable i equals 3, the debugger is activated, pausing execution and allowing inspection of the program state.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/builtin/breakpoint.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> # Create a loop over 5 integers\n>>> for i in range(5):\n...     # Stream i to stdout\n...     print(i)\n...     # Create breakpoint at # 3\n...     if i == 3:\n...         breakpoint()\n...\n# 0\n# 1\n# 2\n# 3\n# > c:\\users\\user\\path\\to\\your\\project\\example.py(24)<module>()\n# -> for i in range(5):\n# (Pdb)\n```\n\n----------------------------------------\n\nTITLE: Using range() with all parameters (start, stop, step)\nDESCRIPTION: Example showing range() with start, stop, and step parameters. The range begins at 0, increments by 5, and stops before reaching 30.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/builtin/range.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> for i in range(0,30,5):\n...     print(i)\n# 0\n# 5\n# 10\n# 15\n# 20\n# 25\n```\n\n----------------------------------------\n\nTITLE: Configuring Flake8 line length in VSCode settings\nDESCRIPTION: JSON configuration to set the maximum line length for Flake8 in VSCode settings to match Black's default.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/blog/python-projects-with-poetry-and-vscode-part-2.md#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    ...\n    \"python.linting.flake8Args\": [\n        \"--max-line-length=88\"\n    ],\n}\n```\n\n----------------------------------------\n\nTITLE: Using divmod() Function in Python\nDESCRIPTION: Demonstrates the usage of the divmod() function with different numeric inputs. The function returns a tuple containing the quotient and remainder of integer division.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/builtin/divmod.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> divmod(2, 2)\n# (1, 0)\n>>> divmod(10, 2)\n# (5, 0)\n>>> divmod(7, 2)\n# (3, 1)\n```\n\n----------------------------------------\n\nTITLE: Creating New Poetry Project\nDESCRIPTION: Command to initialize a new Python project with Poetry's basic structure\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/blog/python-projects-with-poetry-and-vscode-part-1.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ poetry new how-long\n```\n\n----------------------------------------\n\nTITLE: Extracting Individual Files from ZIP Archive\nDESCRIPTION: Demonstrates how to extract a single file from a ZIP archive using the extract() method, with options to specify the destination path.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/modules/zipfile-module.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> with zipfile.ZipFile('example.zip') as example_zip:\n...     print(example_zip.extract('spam.txt'))\n...     print(example_zip.extract('spam.txt', 'C:\\\\some\\\\new\\\\folders'))\n...\n# 'C:\\\\spam.txt'\n# 'C:\\\\some\\\\new\\\\folders\\\\spam.txt'\n```\n\n----------------------------------------\n\nTITLE: Using discard() Method with Python Sets\nDESCRIPTION: Demonstrates how to safely remove elements from a set using the discard() method, which doesn't raise errors even if the element doesn't exist.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/blog/python-sets-what-why-how.md#2025-04-17_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n>>> s = {1, 2, 3}\n>>> s.discard(3)\n>>> s\n{1, 2}\n>>> s.discard(3)\n>>> # nothing happens!\n```\n\n----------------------------------------\n\nTITLE: Removing Dependencies\nDESCRIPTION: Commands demonstrating how to remove both regular and development dependencies\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/blog/python-projects-with-poetry-and-vscode-part-1.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ poetry remove coo\n$ poetry remove -D mypy\n```\n\n----------------------------------------\n\nTITLE: Removing Dependencies with Poetry\nDESCRIPTION: Command to remove a dependency (pendulum) from a Poetry project, which updates the pyproject.toml file and the virtual environment.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/virtual-environments.md#2025-04-17_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\npoetry remove pendulum\n```\n\n----------------------------------------\n\nTITLE: Path Joining with Forward Slash Operator\nDESCRIPTION: Shows the shorthand method of joining paths using the forward slash operator in pathlib.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/modules/pathlib-module.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> from pathlib import Path\n\n>>> print(Path('usr') / 'bin' / 'spam')\n# usr/bin/spam\n```\n\n----------------------------------------\n\nTITLE: Installing virtualenvwrapper for Windows\nDESCRIPTION: Command to install virtualenvwrapper-win, which provides a set of commands for managing virtual environments specifically for Windows users.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/virtual-environments.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install virtualenvwrapper-win\n```\n\n----------------------------------------\n\nTITLE: Creating Complex Numbers with Python's complex() Function\nDESCRIPTION: Examples of using the complex() function to create complex numbers from different types of inputs. The function can convert integers and strings to complex numbers, defaulting the imaginary part to zero when only the real part is provided.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/builtin/complex.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> complex(1)\n# (1+0j)\n>>> complex('1')\n# (1+0j)\n>>> complex(100)\n# (100+0j)\n>>> complex('100')\n# (100+0j)\n```\n\n----------------------------------------\n\nTITLE: Installing Poetry for Python Dependency Management\nDESCRIPTION: Command to install Poetry, a tool for dependency management and packaging in Python, using pip with user-specific installation.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/virtual-environments.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npip install --user poetry\n```\n\n----------------------------------------\n\nTITLE: Using aiter() in an Async Function\nDESCRIPTION: This code snippet demonstrates how to use the aiter() function within an async function to iterate over an asynchronous iterable and collect the results in a list. The function returns a synchronous iterator of the collected results.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/builtin/aiter.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nasync def aitersync(iterable):\n    results = []\n    async for x in aiter(iterable):\n        results.append(x)\n    return iter(results)\n```\n\n----------------------------------------\n\nTITLE: Using clear() Method with Python Sets\nDESCRIPTION: Demonstrates how to remove all elements from a set using the clear() method, resulting in an empty set.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/blog/python-sets-what-why-how.md#2025-04-17_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n>>> s = {1, 2, 3, 4, 5}\n>>> s.clear()  # discard all the items\n>>> s\nset()\n```\n\n----------------------------------------\n\nTITLE: Using findall() Method in Python Regex\nDESCRIPTION: Shows how to use the findall() method to find all occurrences of a pattern in a string. Unlike search(), which returns the first match, findall() returns all matches as a list.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/regular-expressions.md#2025-04-17_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n>>> phone_num_regex = re.compile(r'\\d\\d\\d-\\d\\d\\d-\\d\\d\\d\\d') # has no groups\n\n>>> phone_num_regex.findall('Cell: 415-555-9999 Work: 212-555-0000')\n# ['415-555-9999', '212-555-0000']\n```\n\n----------------------------------------\n\nTITLE: Adding Dependencies Manually in pyproject.toml\nDESCRIPTION: Example of manually adding a dependency (pendulum) with a version constraint to the dependencies section of the pyproject.toml file.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/virtual-environments.md#2025-04-17_snippet_10\n\nLANGUAGE: toml\nCODE:\n```\n[tool.poetry.dependencies]\npendulum = \"^1.4\"\n```\n\n----------------------------------------\n\nTITLE: Calculating Directory Size\nDESCRIPTION: Example of calculating total size of all files in a directory using pathlib.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/modules/pathlib-module.md#2025-04-17_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n>>> from pathlib import Path\n\n>>> total_size = 0\n>>> for sub_path in Path('/usr/bin').iterdir():\n...     total_size += sub_path.stat().st_size\n...\n>>> print(total_size)\n# 1903178911\n```\n\n----------------------------------------\n\nTITLE: Installing Poetry via pip\nDESCRIPTION: Basic installation of Poetry using pip package manager\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/blog/python-projects-with-poetry-and-vscode-part-1.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install poetry\n```\n\n----------------------------------------\n\nTITLE: Basic setattr() Usage Example\nDESCRIPTION: Demonstrates the basic usage of setattr() to set an attribute named 'foobar' with value 123 on object x. This is equivalent to direct attribute assignment using dot notation.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/builtin/setattr.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nsetattr(x, 'foobar', 123)  # Equivalent to x.foobar = 123\n```\n\n----------------------------------------\n\nTITLE: Installing Poetry via Official Installer\nDESCRIPTION: Recommended installation method using Poetry's own installer script to vendorize dependencies\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/blog/python-projects-with-poetry-and-vscode-part-1.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python -\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Set Element Restrictions\nDESCRIPTION: Shows that sets can only contain hashable data types. Attempting to include a mutable type like a list results in a TypeError.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/blog/python-sets-what-why-how.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> s = {1, 'coffee', [4, 'python']}\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nTypeError: unhashable type: 'list'\n```\n\n----------------------------------------\n\nTITLE: Using union() Method with Python Sets\nDESCRIPTION: Illustrates how to create a new set containing all elements from multiple sets using the union() method or the | operator.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/blog/python-sets-what-why-how.md#2025-04-17_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n>>> s1 = {1, 2, 3}\n>>> s2 = {3, 4, 5}\n>>> s1.union(s2)  # or 's1 | s2'\n{1, 2, 3, 4, 5}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Python Class Method Decorator\nDESCRIPTION: A decorator defined within a class for handling exceptions in class methods. This example shows how to create and apply a decorator specifically for class methods with no arguments.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/decorators.md#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclass DecorateMyMethod:\n\n  def decorator_for_class_method_with_no_args(method):\n    def wrapper_for_class_method(self)\n      try:\n        return method(self)\n      except Exception as e:\n        print(\"\\nWARNING: Please make note of the following:\\n\")\n        print(e)\n    return wrapper_for_class_method\n\n  def __init__(self,succeed:bool):\n    self.succeed = succeed\n\n  @decorator_for_class_method_with_no_args\n  def class_action(self):\n    if self.succeed:\n      print(\"You succeeded by choice.\")\n    else:\n      raise Exception(\"Epic fail of your own creation.\")\n\ntest_succeed = DecorateMyMethods(True)\ntest_succeed.class_action()\n# You succeeded by choice.\n\ntest_fail = DecorateMyMethod(False)\ntest_fail.class_action()\n# Exception: Epic fail of your own creation.\n```\n\n----------------------------------------\n\nTITLE: Opening and Reading Variables from Python Shelve\nDESCRIPTION: This snippet shows how to open an existing shelf file and read stored variables. It demonstrates accessing the stored list using its key and displays the type of the shelf object.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/modules/shelve-module.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> with shelve.open('mydata') as shelf_file:\n...     print(type(shelf_file))\n...     print(shelf_file['wife'])\n...\n# <class 'shelve.DbfilenameShelf'>\n# ['Pretty', 'Lovely', 'Nice']\n```\n\n----------------------------------------\n\nTITLE: Committing and pushing changes\nDESCRIPTION: Git commands to add, commit, and push changes to GitHub for submitting a pull request.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/src/pages/contributing.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit add .\ngit commit -m 'succinct explanation of what changed'\ngit push origin fix_bug\n```\n\n----------------------------------------\n\nTITLE: Accessing Detailed ZIP File Metadata\nDESCRIPTION: Shows how to retrieve and display comprehensive metadata for all files in a ZIP archive, including modification dates, system information, and file sizes.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/modules/zipfile-module.md#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> import datetime\n>>> import zipfile\n>>>\n>>> with zipfile.ZipFile(archive_name) as zf:\n...    for info in zf.infolist():\n...        system = 'Windows' if info.create_system == 0 else 'Unix'\n...        modified = datetime.datetime(*info.date_time)\n...        print(info.filename)\n...        print(f'Comment     : {info.comment}')\n...        print(f'Modified    : {modified}')\n...        print(f'System      : {system}')\n...        print(f'ZIP version : {info.create_version}')\n...        print(f'Compressed  : {info.compress_size} bytes')\n...        print(f'Uncompressed: {info.file_size} bytes')\n...\n# README.txt\n# Comment     : b''\n# Modified    : 2022-11-15 06:48:02\n# System      : Unix\n# ZIP version : 30\n# Compressed  : 65 bytes\n# Uncompressed: 76 bytes\n```\n\n----------------------------------------\n\nTITLE: README.rst for Python Package Documentation\nDESCRIPTION: RST-formatted README file for the 'how_long' package that includes a brief description and a code example showing how to use the timer decorator.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/blog/python-projects-with-poetry-and-vscode-part-3.md#2025-04-17_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\nhow_long\n========\n\nSimple Decorator to measure a function execution time.\n\nExample\n_______\n\n.. code-block:: python\n\n    from how_long import timer\n\n\n    @timer\n    def some_function():\n        return [x for x in range(10_000_000)]\n```\n\n----------------------------------------\n\nTITLE: Using range() with stop parameter of 0\nDESCRIPTION: Example demonstrating range() with a stop parameter of 0, which produces an empty range and the loop body never executes.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/builtin/range.md#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> for i in range(0):\n...     print(i)\n#\n```\n\n----------------------------------------\n\nTITLE: Using uniform() Method in Python's Random Module\nDESCRIPTION: The uniform() method returns a random floating-point number between specified values. Similar to randint() but returns a float instead of an integer.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/modules/random-module.md#2025-04-17_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n>>> random.uniform(1, 5)\n# 3.697943322009309\n>>> random.uniform(1, 5)\n# 2.498812082006561\n>>> random.uniform(1, 5)\n# 2.7558465201782525\n>>> random.uniform(1, 5)\n# 3.0337059529999273\n```\n\n----------------------------------------\n\nTITLE: Configuring Logging to a File in Python\nDESCRIPTION: Demonstrates how to configure logging to write messages to a file instead of displaying them on screen. This is useful for long-running programs or when you need to analyze logs later.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/debugging.md#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n>>> import logging\n>>> logging.basicConfig(filename='myProgramLog.txt', level=logging.DEBUG, format='%(asctime)s - %(levelname)s - %(message)s')\n```\n\n----------------------------------------\n\nTITLE: Security Considerations with exec()\nDESCRIPTION: Highlights the security risks associated with using exec() to execute user-provided code without proper sanitization or validation.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/builtin/exec.md#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nuser_input = input(\"Enter code to execute: \")\nexec(user_input)  # Caution: This can be a security risk if not properly sanitized.\n```\n\n----------------------------------------\n\nTITLE: Removing Duplicates Using List Comprehension\nDESCRIPTION: Shows how to remove duplicates from a list using a list comprehension. While more concise than a for loop, this method is still less efficient than using sets.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/blog/python-sets-what-why-how.md#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n>>> my_list = [1, 2, 3, 2, 3, 4]\n>>> no_duplicate_list = []\n>>> [no_duplicate_list.append(item) for item in my_list if item not in no_duplicate_list]\n[None, None, None, None]\n>>> no_duplicate_list\n[1, 2, 3, 4]\n```\n\n----------------------------------------\n\nTITLE: Installing pnpm on Linux/macOS\nDESCRIPTION: Command to install the pnpm package manager on Linux or macOS systems using curl.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/src/pages/contributing.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -fsSL https://get.pnpm.io/install.sh | sh -\n```\n\n----------------------------------------\n\nTITLE: Membership Test Example\nDESCRIPTION: Illustrates a basic membership test using an if statement to check if an element is in a list.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/blog/python-sets-what-why-how.md#2025-04-17_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nmy_list = [1, 2, 3]\n>>> if 2 in my_list:\n...     print('Yes, this is a membership test!')\n...\n# Yes, this is a membership test!\n```\n\n----------------------------------------\n\nTITLE: Exiting a Pipenv Virtual Environment\nDESCRIPTION: Command to exit the currently active Pipenv virtual environment and return to the system shell.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/virtual-environments.md#2025-04-17_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nexit\n```\n\n----------------------------------------\n\nTITLE: Router Links to Python Built-in Functions Documentation with Descriptions\nDESCRIPTION: A table structure containing router links to different Python built-in functions documentation pages. Each row contains a function name as a clickable link and a brief description of what the function does.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/built-in-functions.md#2025-04-17_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n| <router-link to='/builtin/type'>type()</router-link>                 | Return the type of an object.                                             |\n| <router-link to='/builtin/vars'>vars()</router-link>                 | Return the dict attribute for any other object with a dict attribute.     |\n| <router-link to='/builtin/zip'>zip()</router-link>                   | Iterate over several iterables in parallel.                               |\n| <router-link to='/builtin/import'>**import**()</router-link>         | This function is invoked by the import statement.                         |\n```\n\n----------------------------------------\n\nTITLE: Installing pnpm on Windows (PowerShell)\nDESCRIPTION: Command to install the pnpm package manager on Windows systems using PowerShell.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/src/pages/contributing.md#2025-04-17_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\niwr https://get.pnpm.io/install.ps1 -useb | iex\n```\n\n----------------------------------------\n\nTITLE: Modifying Variables Using exec()\nDESCRIPTION: Demonstrates how exec() can modify variables in the current scope by executing code that references and updates existing variables.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/builtin/exec.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nx = 10\ncode = \"x += 5\"\nexec(code)\nprint(x)  # Output: 15\n```\n\n----------------------------------------\n\nTITLE: Unit Testing a Python Decorator with pytest\nDESCRIPTION: Test cases for the 'how_long' package, checking both the package version and that the decorator correctly preserves the wrapped function's name using the @wraps functionality.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/blog/python-projects-with-poetry-and-vscode-part-3.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom how_long import __version__\nfrom how_long import timer\n\n\ndef test_version():\n    assert __version__ == \"0.1.1\"\n\n\ndef test_wrap():\n    @timer\n    def wrapped_function():\n        return\n\n    assert wrapped_function.__name__ == \"wrapped_function\"\n```\n\n----------------------------------------\n\nTITLE: Placeholder for Empty Section in Markdown\nDESCRIPTION: This snippet uses a custom component 'empty-section' as a placeholder for content that hasn't been added yet. It's wrapped in HTML comments to indicate it should be removed when editing begins.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/builtin/memoryview.md#2025-04-17_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n<!-- remove this tag to start editing this page -->\n<empty-section />\n<!-- remove this tag to start editing this page -->\n```\n\n----------------------------------------\n\nTITLE: Removing Duplicates Using For Loop and If Statement\nDESCRIPTION: Demonstrates a verbose method of removing duplicates from a list using a for loop and conditional statement. This approach is less efficient than using sets.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/blog/python-sets-what-why-how.md#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n>>> my_list = [1, 2, 3, 2, 3, 4]\n>>> no_duplicate_list = []\n>>> for item in my_list:\n...     if item not in no_duplicate_list:\n...             no_duplicate_list.append(item)\n...\n>>> no_duplicate_list\n[1, 2, 3, 4]\n```\n\n----------------------------------------\n\nTITLE: Deactivating an Anaconda Virtual Environment\nDESCRIPTION: Command to exit the currently active conda virtual environment and return to the base environment.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/virtual-environments.md#2025-04-17_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\nconda deactivate\n```\n\n----------------------------------------\n\nTITLE: Creating a Disclaimer Section with HTML in Markdown\nDESCRIPTION: This snippet creates a disclaimer section using custom HTML components. It includes a title with a link to the official Python documentation and content describing the memoryview() function.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/builtin/memoryview.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<base-disclaimer>\n  <base-disclaimer-title>\n    From the <a target=\"_blank\" href=\"https://docs.python.org/3/library/functions.html#memoryview\">Python 3 documentation</a>\n  </base-disclaimer-title>\n  <base-disclaimer-content>\n   Return a \"memory view\" object created from the given argument. See Memory Views for more information.\n  </base-disclaimer-content>\n</base-disclaimer>\n```\n\n----------------------------------------\n\nTITLE: Executing Multiple Statements with exec()\nDESCRIPTION: Shows how to use exec() to run multiple Python statements contained in a multi-line string.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/builtin/exec.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ncode = \"\"\"\nfor i in range(5):\n    print(i)\n\"\"\"\nexec(code)\n# Output: 0\n#         1\n#         2\n#         3\n#         4\n```\n\n----------------------------------------\n\nTITLE: Basic Syntax of Python exec() Function\nDESCRIPTION: Shows the standard syntax for the exec() function, including its parameters: object (required), globals (optional), and locals (optional).\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/builtin/exec.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nexec(object[, globals[, locals]])\n```\n\n----------------------------------------\n\nTITLE: Sample Pytest file for version testing\nDESCRIPTION: Example of a Pytest file that tests the version of the project, typically created by Poetry.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/blog/python-projects-with-poetry-and-vscode-part-2.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# test_how_long.py\nfrom how_long import __version__\n\n\ndef test_version():\n    assert __version__ == '0.1.0'\n```\n\n----------------------------------------\n\nTITLE: Using range() with start greater than stop\nDESCRIPTION: Example showing range() behavior when the start parameter is greater than the stop parameter, resulting in an empty range.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/builtin/range.md#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n>>> for i in range(1,0):\n...     print(i)\n#\n```\n\n----------------------------------------\n\nTITLE: Error When Using copy Module Without Importing\nDESCRIPTION: Shows the error that occurs when trying to use the copy module without importing it first. The error message indicates that the 'copy' name is not defined in the current scope.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/modules/copy-module.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Traceback (most recent call last):\n# File \"<stdin>\", line 1, in <module>\n# NameError: name 'copy' is not defined\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Set Slicing Limitation\nDESCRIPTION: Shows that sets do not support slicing operations. Attempting to use slice notation on a set raises a TypeError.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/blog/python-sets-what-why-how.md#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> s[0:2]\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nTypeError: 'set' object is not subscriptable\n```\n\n----------------------------------------\n\nTITLE: Poetry Project Configuration\nDESCRIPTION: Basic pyproject.toml configuration file for Poetry project setup including dependencies and project metadata\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/blog/python-projects-with-poetry-and-vscode-part-1.md#2025-04-17_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n[tool.poetry]\nname = \"how-long\"\nversion = \"0.1.0\"\ndescription = \"A simple decorator to measure a function execution time.\"\nauthors = [\"wilfredinni <carlos.w.montecinos@gmail.com>\"]\n\n[tool.poetry.dependencies]\npython = \"^3.7\"\n\n[tool.poetry.dev-dependencies]\npytest = \"^3.0\"\n\n[build-system]\nrequires = [\"poetry>=0.12\"]\nbuild-backend = \"poetry.masonry.api\"\n```\n\n----------------------------------------\n\nTITLE: Adding Development Dependencies\nDESCRIPTION: Commands to add development dependencies including Black formatter with pre-release flag\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/blog/python-projects-with-poetry-and-vscode-part-1.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ poetry add -D flake8 mypy\n$ poetry add -D black --allow-prereleases\n```\n\n----------------------------------------\n\nTITLE: Installing Anyconfig Package using pip\nDESCRIPTION: Shows the command to install the Anyconfig package using pip. Anyconfig is a versatile package for handling various configuration file formats.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/json-yaml.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npip install anyconfig\n```\n\n----------------------------------------\n\nTITLE: Activating a Pipenv Virtual Environment\nDESCRIPTION: Command to activate the virtual environment created by Pipenv for the current project.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/cheatsheet/virtual-environments.md#2025-04-17_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\npipenv shell\n```\n\n----------------------------------------\n\nTITLE: Configuring Universal Web Crawler Access in robots.txt\nDESCRIPTION: This robots.txt configuration allows all user agents to access the entire website. It uses the wildcard (*) to match any user agent and provides full access with the 'Allow: /' directive.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/public/robots.txt#2025-04-17_snippet_0\n\nLANGUAGE: robots.txt\nCODE:\n```\nUser-agent: *\nAllow: /\n```\n\n----------------------------------------\n\nTITLE: Displaying Title and Description using Vue.js Component in Markdown\nDESCRIPTION: This snippet uses a custom Vue.js component called 'base-title' to display the title and description of the page. It references values from the frontmatter.\nSOURCE: https://github.com/wilfredinni/python-cheatsheet/blob/master/docs/builtin/memoryview.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<base-title :title=\"frontmatter.title\" :description=\"frontmatter.description\">\nPython memoryview() built-in function\n</base-title>\n```"
  }
]