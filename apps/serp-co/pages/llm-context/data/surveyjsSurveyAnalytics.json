[
  {
    "owner": "surveyjs",
    "repo": "survey-analytics",
    "content": "TITLE: Complete Dashboard Component Implementation with SurveyJS Visualization Panel\nDESCRIPTION: Full implementation of a React component that initializes and renders a SurveyJS Visualization Panel with sample survey data and results. Includes state management for survey and visualization panel instances.\nSOURCE: https://github.com/surveyjs/survey-analytics/blob/master/docs/get-started-react.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// components/Dashboard.tsx\n'use client'\n\nimport { useState, useEffect } from 'react';\nimport 'survey-analytics/survey.analytics.css';\nimport { Model } from 'survey-core';\nimport { IVisualizationPanelOptions, VisualizationPanel } from 'survey-analytics';\n\nconst surveyJson = {\n  elements: [{\n    name: \"satisfaction-score\",\n    title: \"How would you describe your experience with our product?\",\n    type: \"radiogroup\",\n    choices: [\n      { value: 5, text: \"Fully satisfying\" },\n      { value: 4, text: \"Generally satisfying\" },\n      { value: 3, text: \"Neutral\" },\n      { value: 2, text: \"Rather unsatisfying\" },\n      { value: 1, text: \"Not satisfying at all\" }\n    ],\n    isRequired: true\n  }, {\n    name: \"nps-score\",\n    title: \"On a scale of zero to ten, how likely are you to recommend our product to a friend or colleague?\",\n    type: \"rating\",\n    rateMin: 0,\n    rateMax: 10,\n  }],\n  completedHtml: \"Thank you for your feedback!\",\n};\n\nconst surveyResults = [{\n  \"satisfaction-score\": 5,\n  \"nps-score\": 10\n}, {\n  \"satisfaction-score\": 5,\n  \"nps-score\": 9\n}, {\n  \"satisfaction-score\": 3,\n  \"nps-score\": 6\n}, {\n  \"satisfaction-score\": 3,\n  \"nps-score\": 6\n}, {\n  \"satisfaction-score\": 2,\n  \"nps-score\": 3\n}];\n\nconst vizPanelOptions: IVisualizationPanelOptions = {\n  allowHideQuestions: false\n}\n\nexport default function DashboardComponent() {\n  const [survey, setSurvey] = useState<Model>();\n  const [vizPanel, setVizPanel] = useState<VisualizationPanel>();\n  if (!survey) {\n    const survey = new Model(surveyJson);\n    setSurvey(survey);\n  }\n\n  if (!vizPanel && !!survey) {\n    const vizPanel = new VisualizationPanel(\n      survey.getAllQuestions(),\n      surveyResults,\n      vizPanelOptions\n    );\n    setVizPanel(vizPanel);\n  }\n\n  useEffect(() => {\n    vizPanel?.render(\"surveyVizPanel\");\n    return () => {\n      vizPanel?.clear();\n    }\n  }, [vizPanel]);\n\n  return (\n    <div id=\"surveyVizPanel\" />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Vue Component for SurveyJS Dashboard Integration\nDESCRIPTION: Full Vue component implementation that integrates SurveyJS Dashboard. Includes imports, survey model definition, sample data, visualization panel configuration, and rendering code.\nSOURCE: https://github.com/surveyjs/survey-analytics/blob/master/docs/get-started-vue.md#2025-04-18_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<script setup lang=\"ts\">\nimport 'survey-analytics/survey.analytics.css'\nimport { Model } from 'survey-core'\nimport { VisualizationPanel } from 'survey-analytics'\nimport { onMounted } from \"vue\"\n\nconst surveyJson = {\n  elements: [{\n    name: \"satisfaction-score\",\n    title: \"How would you describe your experience with our product?\",\n    type: \"radiogroup\",\n    choices: [\n      { value: 5, text: \"Fully satisfying\" },\n      { value: 4, text: \"Generally satisfying\" },\n      { value: 3, text: \"Neutral\" },\n      { value: 2, text: \"Rather unsatisfying\" },\n      { value: 1, text: \"Not satisfying at all\" }\n    ],\n    isRequired: true\n  }, {\n    name: \"nps-score\",\n    title: \"On a scale of zero to ten, how likely are you to recommend our product to a friend or colleague?\",\n    type: \"rating\",\n    rateMin: 0,\n    rateMax: 10,\n  }],\n  completedHtml: \"Thank you for your feedback!\",\n};\n\nconst surveyResults = [{\n  \"satisfaction-score\": 5,\n  \"nps-score\": 10\n}, {\n  \"satisfaction-score\": 5,\n  \"nps-score\": 9\n}, {\n  \"satisfaction-score\": 3,\n  \"nps-score\": 6\n}, {\n  \"satisfaction-score\": 3,\n  \"nps-score\": 6\n}, {\n  \"satisfaction-score\": 2,\n  \"nps-score\": 3\n}];\n\nconst vizPanelOptions = {\n  allowHideQuestions: false\n}\n\nonMounted(() => {\n  const survey = new Model(surveyJson);\n  const vizPanel = new VisualizationPanel(\n    survey.getAllQuestions(),\n    surveyResults,\n    vizPanelOptions\n  );\n  vizPanel.render(\"surveyVizPanel\");\n});\n</script>\n\n<template>\n  <div id=\"surveyVizPanel\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Complete JavaScript Implementation for SurveyJS Visualization Panel\nDESCRIPTION: Full JavaScript code for creating and rendering a SurveyJS Visualization Panel, including survey definition, sample results data, and visualization panel configuration.\nSOURCE: https://github.com/surveyjs/survey-analytics/blob/master/docs/get-started-knockout-jquery.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst surveyJson = {\n    elements: [{\n        name: \"satisfaction-score\",\n        title: \"How would you describe your experience with our product?\",\n        type: \"radiogroup\",\n        choices: [\n            { value: 5, text: \"Fully satisfying\" },\n            { value: 4, text: \"Generally satisfying\" },\n            { value: 3, text: \"Neutral\" },\n            { value: 2, text: \"Rather unsatisfying\" },\n            { value: 1, text: \"Not satisfying at all\" }\n        ],\n        isRequired: true\n    }, {\n        name: \"nps-score\",\n        title: \"On a scale of zero to ten, how likely are you to recommend our product to a friend or colleague?\",\n        type: \"rating\",\n        rateMin: 0,\n        rateMax: 10,\n    }],\n    showQuestionNumbers: \"off\",\n    completedHtml: \"Thank you for your feedback!\",\n};\n\nconst survey = new Survey.Model(surveyJson);\n\nconst surveyResults = [{\n    \"satisfaction-score\": 5,\n    \"nps-score\": 10\n}, {\n    \"satisfaction-score\": 5,\n    \"nps-score\": 9\n}, {\n    \"satisfaction-score\": 3,\n    \"nps-score\": 6\n}, {\n    \"satisfaction-score\": 3,\n    \"nps-score\": 6\n}, {\n    \"satisfaction-score\": 2,\n    \"nps-score\": 3\n}];\n\nconst vizPanelOptions = {\n    allowHideQuestions: false\n}\n\nconst vizPanel = new SurveyAnalytics.VisualizationPanel(\n    survey.getAllQuestions(),\n    surveyResults,\n    vizPanelOptions\n);\n\ndocument.addEventListener(\"DOMContentLoaded\", function() {\n    vizPanel.render(\"surveyVizPanel\");\n});\n```\n\n----------------------------------------\n\nTITLE: Complete JavaScript Implementation for SurveyJS Dashboard\nDESCRIPTION: Full JavaScript implementation that sets up the survey model, defines sample results, and initializes the Visualization Panel with configuration options.\nSOURCE: https://github.com/surveyjs/survey-analytics/blob/master/docs/get-started-html-css-javascript.md#2025-04-18_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nconst surveyJson = {\n    elements: [{\n        name: \"satisfaction-score\",\n        title: \"How would you describe your experience with our product?\",\n        type: \"radiogroup\",\n        choices: [\n            { value: 5, text: \"Fully satisfying\" },\n            { value: 4, text: \"Generally satisfying\" },\n            { value: 3, text: \"Neutral\" },\n            { value: 2, text: \"Rather unsatisfying\" },\n            { value: 1, text: \"Not satisfying at all\" }\n        ],\n        isRequired: true\n    }, {\n        name: \"nps-score\",\n        title: \"On a scale of zero to ten, how likely are you to recommend our product to a friend or colleague?\",\n        type: \"rating\",\n        rateMin: 0,\n        rateMax: 10,\n    }],\n    completedHtml: \"Thank you for your feedback!\",\n};\n\nconst survey = new Survey.Model(surveyJson);\n\nconst surveyResults = [{\n    \"satisfaction-score\": 5,\n    \"nps-score\": 10\n}, {\n    \"satisfaction-score\": 5,\n    \"nps-score\": 9\n}, {\n    \"satisfaction-score\": 3,\n    \"nps-score\": 6\n}, {\n    \"satisfaction-score\": 3,\n    \"nps-score\": 6\n}, {\n    \"satisfaction-score\": 2,\n    \"nps-score\": 3\n}];\n\nconst vizPanelOptions = {\n    allowHideQuestions: false\n}\n\nconst vizPanel = new SurveyAnalytics.VisualizationPanel(\n    survey.getAllQuestions(),\n    surveyResults,\n    vizPanelOptions\n);\n```\n\n----------------------------------------\n\nTITLE: Complete Angular Component for SurveyJS Visualization\nDESCRIPTION: This is the full TypeScript code for an Angular component that sets up and renders a SurveyJS Visualization Panel. It includes survey configuration, results data, and visualization options.\nSOURCE: https://github.com/surveyjs/survey-analytics/blob/master/docs/get-started-angular.md#2025-04-18_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AfterViewInit, Component } from '@angular/core';\nimport { Model } from 'survey-core';\nimport { VisualizationPanel } from 'survey-analytics';\n\nconst surveyJson = {\n  elements: [{\n    name: \"satisfaction-score\",\n    title: \"How would you describe your experience with our product?\",\n    type: \"radiogroup\",\n    choices: [\n      { value: 5, text: \"Fully satisfying\" },\n      { value: 4, text: \"Generally satisfying\" },\n      { value: 3, text: \"Neutral\" },\n      { value: 2, text: \"Rather unsatisfying\" },\n      { value: 1, text: \"Not satisfying at all\" }\n    ],\n    isRequired: true\n  }, {\n    name: \"nps-score\",\n    title: \"On a scale of zero to ten, how likely are you to recommend our product to a friend or colleague?\",\n    type: \"rating\",\n    rateMin: 0,\n    rateMax: 10,\n  }],\n  completedHtml: \"Thank you for your feedback!\",\n};\n\nconst surveyResults = [{\n  \"satisfaction-score\": 5,\n  \"nps-score\": 10\n}, {\n  \"satisfaction-score\": 5,\n  \"nps-score\": 9\n}, {\n  \"satisfaction-score\": 3,\n  \"nps-score\": 6\n}, {\n  \"satisfaction-score\": 3,\n  \"nps-score\": 6\n}, {\n  \"satisfaction-score\": 2,\n  \"nps-score\": 3\n}];\n\nconst vizPanelOptions = {\n  allowHideQuestions: false\n}\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent implements AfterViewInit {\n  title = 'SurveyJS Dashboard for Angular';\n\n  ngAfterViewInit(): void {\n    const survey = new Model(surveyJson);\n    const vizPanel = new VisualizationPanel(\n      survey.getAllQuestions(),\n      surveyResults,\n      vizPanelOptions\n    );\n    vizPanel.render(\"surveyVizPanel\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Complete JavaScript Implementation for SurveyJS Dashboard Table View\nDESCRIPTION: This JavaScript code provides a full implementation of the SurveyJS Dashboard Table View, including survey definition, data generation, and rendering.\nSOURCE: https://github.com/surveyjs/survey-analytics/blob/master/docs/set-up-table-view-html-css-javascript.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst surveyJson = {\n    elements: [{\n        name: \"satisfaction-score\",\n        title: \"How would you describe your experience with our product?\",\n        type: \"radiogroup\",\n        choices: [\n            { value: 5, text: \"Fully satisfying\" },\n            { value: 4, text: \"Generally satisfying\" },\n            { value: 3, text: \"Neutral\" },\n            { value: 2, text: \"Rather unsatisfying\" },\n            { value: 1, text: \"Not satisfying at all\" }\n        ],\n        isRequired: true\n    }, {\n        name: \"nps-score\",\n        title: \"On a scale of zero to ten, how likely are you to recommend our product to a friend or colleague?\",\n        type: \"rating\",\n        rateMin: 0,\n        rateMax: 10,\n    }],\n    completedHtml: \"Thank you for your feedback!\",\n};\n\nconst survey = new Survey.Model(surveyJson);\n\nfunction randomIntFromInterval(min, max) {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n}\nfunction generateData() {\n    const data = [];\n    for (let index = 0; index < 100; index++) {\n        const satisfactionScore = randomIntFromInterval(1, 5);\n        const npsScore = satisfactionScore > 3 ? randomIntFromInterval(7, 10) : randomIntFromInterval(1, 6);\n        data.push({\n            \"satisfaction-score\": satisfactionScore,\n            \"nps-score\": npsScore\n        });\n    }\n    return data;\n}\n\nconst surveyDataTable = new SurveyAnalyticsTabulator.Tabulator(\n    survey,\n    generateData()\n);\n\ndocument.addEventListener(\"DOMContentLoaded\", function() {\n    surveyDataTable.render(document.getElementById(\"surveyDataTable\"));\n});\n```\n\n----------------------------------------\n\nTITLE: Complete Angular Component for SurveyJS Dashboard Implementation\nDESCRIPTION: Full implementation of an Angular component that sets up a SurveyJS Dashboard with a sample survey model, results data, and visualization panel configuration.\nSOURCE: https://github.com/surveyjs/survey-analytics/blob/master/docs/get-started-angular.md#2025-04-18_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nimport { AfterViewInit, Component } from '@angular/core';\nimport { Model } from 'survey-core';\nimport { VisualizationPanel } from 'survey-analytics';\n\nconst surveyJson = {\n  elements: [{\n    name: \"satisfaction-score\",\n    title: \"How would you describe your experience with our product?\",\n    type: \"radiogroup\",\n    choices: [\n      { value: 5, text: \"Fully satisfying\" },\n      { value: 4, text: \"Generally satisfying\" },\n      { value: 3, text: \"Neutral\" },\n      { value: 2, text: \"Rather unsatisfying\" },\n      { value: 1, text: \"Not satisfying at all\" }\n    ],\n    isRequired: true\n  }, {\n    name: \"nps-score\",\n    title: \"On a scale of zero to ten, how likely are you to recommend our product to a friend or colleague?\",\n    type: \"rating\",\n    rateMin: 0,\n    rateMax: 10,\n  }],\n  completedHtml: \"Thank you for your feedback!\",\n};\n\nconst surveyResults = [{\n  \"satisfaction-score\": 5,\n  \"nps-score\": 10\n}, {\n  \"satisfaction-score\": 5,\n  \"nps-score\": 9\n}, {\n  \"satisfaction-score\": 3,\n  \"nps-score\": 6\n}, {\n  \"satisfaction-score\": 3,\n  \"nps-score\": 6\n}, {\n  \"satisfaction-score\": 2,\n  \"nps-score\": 3\n}];\n\nconst vizPanelOptions = {\n  allowHideQuestions: false\n}\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent implements AfterViewInit {\n  title = 'SurveyJS Dashboard for Angular';\n\n  ngAfterViewInit(): void {\n    const survey = new Model(surveyJson);\n    const vizPanel = new VisualizationPanel(\n      survey.getAllQuestions(),\n      surveyResults,\n      vizPanelOptions\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Dashboard Component\nDESCRIPTION: Complete React component implementation for the dashboard, including visualization panel configuration and state management.\nSOURCE: https://github.com/surveyjs/survey-analytics/blob/master/docs/get-started-react.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport 'survey-analytics/survey.analytics.css';\nimport { useState } from 'react';\nimport { Model } from 'survey-core';\nimport { IVisualizationPanelOptions, VisualizationPanel } from 'survey-analytics';\n\nconst surveyJson = { /* ... */ };\nconst surveyResults = [ /* ... */ ];\nconst vizPanelOptions = {\n  allowHideQuestions: false\n}\n\nexport default function DashboardComponent() {\n  const [survey, setSurvey] = useState<Model>();\n  const [vizPanel, setVizPanel] = useState<VisualizationPanel>();\n  if (!survey) {\n    const survey = new Model(surveyJson);\n    setSurvey(survey);\n  }\n\n  if (!vizPanel && !!survey) {\n    const vizPanel = new VisualizationPanel(\n      survey.getAllQuestions(),\n      surveyResults,\n      vizPanelOptions\n    );\n    setVizPanel(vizPanel);\n  }\n\n  return \"...\";\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Implementation of SurveyJS Tabulator Component in React\nDESCRIPTION: A full implementation of the Tabulator component with survey definition, data generation functions, and rendering logic. Shows the complete structure of the component with all necessary imports and state management.\nSOURCE: https://github.com/surveyjs/survey-analytics/blob/master/docs/set-up-table-view-react.md#2025-04-18_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// components/Tabulator.tsx\n'use client'\n\nimport 'tabulator-tables/dist/css/tabulator.css';\nimport 'survey-analytics/survey.analytics.tabulator.css';\nimport { useState, useEffect } from 'react';\nimport { Model } from 'survey-core';\nimport { Tabulator } from 'survey-analytics/survey.analytics.tabulator';\n\nconst surveyJson = {\n  elements: [{\n    name: \"satisfaction-score\",\n    title: \"How would you describe your experience with our product?\",\n    type: \"radiogroup\",\n    choices: [\n      { value: 5, text: \"Fully satisfying\" },\n      { value: 4, text: \"Generally satisfying\" },\n      { value: 3, text: \"Neutral\" },\n      { value: 2, text: \"Rather unsatisfying\" },\n      { value: 1, text: \"Not satisfying at all\" }\n    ],\n    isRequired: true\n  }, {\n    name: \"nps-score\",\n    title: \"On a scale of zero to ten, how likely are you to recommend our product to a friend or colleague?\",\n    type: \"rating\",\n    rateMin: 0,\n    rateMax: 10,\n  }],\n  completedHtml: \"Thank you for your feedback!\",\n};\n\nfunction randomIntFromInterval(min: number, max: number): number  {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\ninterface INpsDataObject {\n  \"satisfaction-score\": number;\n  \"nps-score\": number;\n}\n\nfunction generateData(): Array<INpsDataObject> {\n  const data: Array<INpsDataObject> = [];\n  for (let index = 0; index < 100; index++) {\n    const satisfactionScore = randomIntFromInterval(1, 5);\n    const npsScore = satisfactionScore > 3 ? randomIntFromInterval(7, 10) : randomIntFromInterval(1, 6);\n    data.push({\n      \"satisfaction-score\": satisfactionScore,\n      \"nps-score\": npsScore\n    });\n  }\n  return data;\n}\n\nexport default function TableViewComponent() {\n  const [survey, setSurvey] = useState<Model>();\n  const [surveyDataTable, setSurveyDataTable] = useState<Tabulator>();\n  const [surveyResults, setSurveyResults] = useState<Array<INpsDataObject>>(generateData());\n  if (!survey) {\n    const survey = new Model(surveyJson);\n    setSurvey(survey);\n  }\n  if (!surveyResults) {\n    setSurveyResults(generateData());\n  }\n\n  if (!surveyDataTable && !!survey) {\n    const surveyDataTable = new Tabulator(\n      survey,\n      surveyResults\n    );\n    setSurveyDataTable(surveyDataTable);\n  }\n\n  useEffect(() => {\n    surveyDataTable?.render(\"surveyDataTable\");\n    return () => {\n      document.getElementById(\"surveyDataTable\")!.innerHTML = \"\";\n    }\n  }, [surveyDataTable]);\n\n  return (\n    <div id=\"surveyDataTable\" />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Vue.js Component for SurveyJS Table View Integration\nDESCRIPTION: Full implementation of a Vue.js component that shows survey results in a Table View. It includes stylesheet imports, model definition, data generation, and component rendering.\nSOURCE: https://github.com/surveyjs/survey-analytics/blob/master/docs/set-up-table-view-vue.md#2025-04-18_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<script setup lang=\"ts\">\nimport 'tabulator-tables/dist/css/tabulator.css';\nimport 'survey-analytics/survey.analytics.tabulator.css';\nimport { Model } from 'survey-core'\nimport { Tabulator } from 'survey-analytics/survey.analytics.tabulator'\nimport { onMounted } from \"vue\"\n\nconst surveyJson = {\n  elements: [{\n    name: \"satisfaction-score\",\n    title: \"How would you describe your experience with our product?\",\n    type: \"radiogroup\",\n    choices: [\n      { value: 5, text: \"Fully satisfying\" },\n      { value: 4, text: \"Generally satisfying\" },\n      { value: 3, text: \"Neutral\" },\n      { value: 2, text: \"Rather unsatisfying\" },\n      { value: 1, text: \"Not satisfying at all\" }\n    ],\n    isRequired: true\n  }, {\n    name: \"nps-score\",\n    title: \"On a scale of zero to ten, how likely are you to recommend our product to a friend or colleague?\",\n    type: \"rating\",\n    rateMin: 0,\n    rateMax: 10,\n  }],\n  completedHtml: \"Thank you for your feedback!\",\n};\n\nfunction randomIntFromInterval(min: number, max: number) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\nfunction generateData() {\n  const data = [];\n  for (let index = 0; index < 100; index++) {\n    const satisfactionScore = randomIntFromInterval(1, 5);\n    const npsScore = satisfactionScore > 3 ? randomIntFromInterval(7, 10) : randomIntFromInterval(1, 6);\n    data.push({\n      \"satisfaction-score\": satisfactionScore,\n      \"nps-score\": npsScore\n    });\n  }\n  return data;\n}\n\nonMounted(() => {\n  const survey = new Model(surveyJson);\n  const surveyDataTable = new Tabulator(\n    survey,\n    generateData()\n  );\n  surveyDataTable.render(\"surveyDataTable\");\n});\n</script>\n\n<template>\n  <div id=\"surveyDataTable\" />\n</template>\n\n</script>\n```\n\n----------------------------------------\n\nTITLE: JavaScript Implementation for SurveyJS Visualization Panel\nDESCRIPTION: Complete JavaScript code that defines a survey structure, sample results data, configures a visualization panel with options, and renders it to the DOM. Demonstrates the full workflow for setting up a survey dashboard.\nSOURCE: https://github.com/surveyjs/survey-analytics/blob/master/docs/get-started-html-css-javascript.md#2025-04-18_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst surveyJson = {\n    elements: [{\n        name: \"satisfaction-score\",\n        title: \"How would you describe your experience with our product?\",\n        type: \"radiogroup\",\n        choices: [\n            { value: 5, text: \"Fully satisfying\" },\n            { value: 4, text: \"Generally satisfying\" },\n            { value: 3, text: \"Neutral\" },\n            { value: 2, text: \"Rather unsatisfying\" },\n            { value: 1, text: \"Not satisfying at all\" }\n        ],\n        isRequired: true\n    }, {\n        name: \"nps-score\",\n        title: \"On a scale of zero to ten, how likely are you to recommend our product to a friend or colleague?\",\n        type: \"rating\",\n        rateMin: 0,\n        rateMax: 10,\n    }],\n    completedHtml: \"Thank you for your feedback!\",\n};\n\nconst survey = new Survey.Model(surveyJson);\n\nconst surveyResults = [{\n    \"satisfaction-score\": 5,\n    \"nps-score\": 10\n}, {\n    \"satisfaction-score\": 5,\n    \"nps-score\": 9\n}, {\n    \"satisfaction-score\": 3,\n    \"nps-score\": 6\n}, {\n    \"satisfaction-score\": 3,\n    \"nps-score\": 6\n}, {\n    \"satisfaction-score\": 2,\n    \"nps-score\": 3\n}];\n\nconst vizPanelOptions = {\n    allowHideQuestions: false\n}\n\nconst vizPanel = new SurveyAnalytics.VisualizationPanel(\n    survey.getAllQuestions(),\n    surveyResults,\n    vizPanelOptions\n);\n\ndocument.addEventListener(\"DOMContentLoaded\", function() {\n    vizPanel.render(document.getElementById(\"surveyVizPanel\"));\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering Visualization Panel with React useEffect in Next.js\nDESCRIPTION: Basic implementation of a SurveyJS Visualization Panel in a React component using the useEffect hook to handle rendering and cleanup. Includes the 'use client' directive required for Next.js compatibility.\nSOURCE: https://github.com/surveyjs/survey-analytics/blob/master/docs/get-started-react.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// components/Dashboard.tsx\n'use client'\n// ...\nimport { useEffect } from 'react';\n\nexport default function DashboardComponent() {\n  // ...\n  useEffect(() => {\n    vizPanel?.render(\"surveyVizPanel\");\n    return () => {\n      vizPanel?.clear();\n    }\n  }, [vizPanel]);\n\n  return (\n    <div id=\"surveyVizPanel\" />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Complete HTML Structure for SurveyJS Dashboard with Knockout\nDESCRIPTION: Full HTML document structure including all required script and CSS imports for a SurveyJS Analytics dashboard using Knockout.js integration.\nSOURCE: https://github.com/surveyjs/survey-analytics/blob/master/docs/get-started-knockout-jquery.md#2025-04-18_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n<head>\n    <title>SurveyJS Dashboard for Knockout</title>\n    <meta charset=\"utf-8\">\n    <script type=\"text/javascript\" src=\"https://unpkg.com/knockout/build/output/knockout-latest.js\"></script>\n\n    <script type=\"text/javascript\" src=\"https://unpkg.com/survey-core/survey.core.min.js\"></script>\n    <!-- Uncomment the following lines if you also display the survey on the page -->\n    <!-- <link href=\"https://unpkg.com/survey-core/defaultV2.min.css\" type=\"text/css\" rel=\"stylesheet\"> -->\n    <!-- <script type=\"text/javascript\" src=\"https://unpkg.com/survey-knockout-ui/survey-knockout-ui.min.js\"></script> -->\n\n    <script src=\"https://unpkg.com/plotly.js-dist-min/plotly.min.js\"></script>\n    <!-- Uncomment the following line if you use the Text, Multiple Text, or Comment question types in your surveys -->\n    <!-- <script src=\"https://unpkg.com/wordcloud/src/wordcloud2.js\"></script> -->\n\n    <link href=\"https://unpkg.com/survey-analytics/survey.analytics.min.css\" rel=\"stylesheet\">\n    <script src=\"https://unpkg.com/survey-analytics/survey.analytics.min.js\"></script>\n\n    <script type=\"text/javascript\" src=\"index.js\"></script>\n</head>\n<body>\n    <div id=\"surveyVizPanel\"></div>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Complete HTML Structure for SurveyJS Dashboard Table View\nDESCRIPTION: This HTML snippet provides the full page structure, including necessary script and stylesheet references for implementing the SurveyJS Dashboard Table View.\nSOURCE: https://github.com/surveyjs/survey-analytics/blob/master/docs/set-up-table-view-html-css-javascript.md#2025-04-18_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Table View: SurveyJS Dashboard</title>\n    <meta charset=\"utf-8\">\n    <script type=\"text/javascript\" src=\"https://unpkg.com/survey-core/survey.core.min.js\"></script>\n\n    <!-- jsPDF for export to PDF -->\n    <script type=\"text/javascript\" src=\"https://unpkg.com/jspdf@2.4.0/dist/jspdf.umd.min.js\"></script>\n    <script type=\"text/javascript\" src=\"https://unpkg.com/jspdf-autotable@3.5.20/dist/jspdf.plugin.autotable.min.js\"></script>\n    \n    <!-- SheetJS for export to Excel -->\n    <script type=\"text/javascript\" src=\"https://oss.sheetjs.com/sheetjs/xlsx.full.min.js\"></script>\n\n    <!-- Tabulator -->\n    <link href=\"https://unpkg.com/tabulator-tables@6.3.1/dist/css/tabulator.min.css\" rel=\"stylesheet\">\n    <script type=\"text/javascript\" src=\"https://unpkg.com/tabulator-tables@6.3.1/dist/js/tabulator.min.js\"></script>\n\n    <!-- SurveyJS plugin for Tabulator -->\n    <link href=\"https://unpkg.com/survey-analytics/survey.analytics.tabulator.min.css\" rel=\"stylesheet\">\n    <script src=\"https://unpkg.com/survey-analytics/survey.analytics.tabulator.min.js\"></script>\n\n    <script type=\"text/javascript\" src=\"index.js\"></script>\n</head>\n<body>\n    <div id=\"surveyDataTable\"></div>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Configuring and Initializing the Visualization Panel\nDESCRIPTION: Code that initializes the VisualizationPanel by importing required dependencies, creating a survey model instance, and configuring the visualization panel with survey questions and results.\nSOURCE: https://github.com/surveyjs/survey-analytics/blob/master/docs/get-started-vue.md#2025-04-18_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<script setup lang=\"ts\">\n// ...\nimport { Model } from 'survey-core'\nimport { VisualizationPanel } from 'survey-analytics'\n\nconst surveyJson = { /* ... */ };\nconst surveyResults = [ /* ... */ ];\nconst vizPanelOptions = { /* ... */ };\n\nonMounted(() => {\n  const survey = new Model(surveyJson);\n  const vizPanel = new VisualizationPanel(\n    survey.getAllQuestions(),\n    surveyResults,\n    vizPanelOptions\n  );\n});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Angular Component Implementation\nDESCRIPTION: Complete Angular component implementation showing Table View initialization and rendering\nSOURCE: https://github.com/surveyjs/survey-analytics/blob/master/docs/set-up-table-view-angular.md#2025-04-18_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AfterViewInit, Component } from '@angular/core';\nimport { Model } from 'survey-core';\nimport { Tabulator } from 'survey-analytics/survey.analytics.tabulator';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent implements AfterViewInit {\n  ngAfterViewInit(): void {\n    const survey = new Model(surveyJson);\n    const surveyDataTable = new Tabulator(\n      survey,\n      generateData()\n    );\n    surveyDataTable.render(\"surveyDataTable\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Complete HTML Structure for SurveyJS Dashboard\nDESCRIPTION: Full HTML structure for the SurveyJS Dashboard implementation, including all necessary script references and CSS links to properly render the analytics interface.\nSOURCE: https://github.com/surveyjs/survey-analytics/blob/master/docs/get-started-html-css-javascript.md#2025-04-18_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n<head>\n    <title>SurveyJS Dashboard</title>\n    <meta charset=\"utf-8\">\n    <script type=\"text/javascript\" src=\"https://unpkg.com/survey-core/survey.core.min.js\"></script>\n    <!-- Uncomment the following lines if you also display the survey on the page -->\n    <!-- <link href=\"https://unpkg.com/survey-core/survey-core.min.css\" type=\"text/css\" rel=\"stylesheet\"> -->\n    <!-- <script type=\"text/javascript\" src=\"https://unpkg.com/survey-js-ui/survey-js-ui.min.js\"></script> -->\n\n    <script src=\"https://unpkg.com/plotly.js-dist-min/plotly.min.js\"></script>\n\n    <link href=\"https://unpkg.com/survey-analytics/survey.analytics.min.css\" rel=\"stylesheet\">\n    <script src=\"https://unpkg.com/survey-analytics/survey.analytics.min.js\"></script>\n\n    <script type=\"text/javascript\" src=\"index.js\"></script>\n</head>\n<body>\n\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Complete JavaScript Implementation\nDESCRIPTION: Full JavaScript implementation including survey configuration, data generation, and table initialization.\nSOURCE: https://github.com/surveyjs/survey-analytics/blob/master/docs/set-up-table-view-knockout-jquery.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst surveyJson = {\n    elements: [{\n        name: \"satisfaction-score\",\n        title: \"How would you describe your experience with our product?\",\n        type: \"radiogroup\",\n        choices: [\n            { value: 5, text: \"Fully satisfying\" },\n            { value: 4, text: \"Generally satisfying\" },\n            { value: 3, text: \"Neutral\" },\n            { value: 2, text: \"Rather unsatisfying\" },\n            { value: 1, text: \"Not satisfying at all\" }\n        ],\n        isRequired: true\n    }, {\n        name: \"nps-score\",\n        title: \"On a scale of zero to ten, how likely are you to recommend our product to a friend or colleague?\",\n        type: \"rating\",\n        rateMin: 0,\n        rateMax: 10,\n    }],\n    showQuestionNumbers: \"off\",\n    completedHtml: \"Thank you for your feedback!\",\n};\n\nconst survey = new Survey.Model(surveyJson);\n\nfunction randomIntFromInterval(min, max) {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n}\nfunction generateData() {\n    const data = [];\n    for (let index = 0; index < 100; index++) {\n        const satisfactionScore = randomIntFromInterval(1, 5);\n        const npsScore = satisfactionScore > 3 ? randomIntFromInterval(7, 10) : randomIntFromInterval(1, 6);\n        data.push({\n            \"satisfaction-score\": satisfactionScore,\n            \"nps-score\": npsScore\n        });\n    }\n    return data;\n}\n\nconst surveyDataTable = new SurveyAnalyticsTabulator.Tabulator(\n    survey,\n    generateData()\n);\n\ndocument.addEventListener(\"DOMContentLoaded\", function() {\n    surveyDataTable.render(\"surveyDataTable\");\n});\n```\n\n----------------------------------------\n\nTITLE: Complete HTML Setup with Dependencies\nDESCRIPTION: Full HTML implementation including all required CSS and JavaScript dependencies for SurveyJS Table View functionality.\nSOURCE: https://github.com/surveyjs/survey-analytics/blob/master/docs/set-up-table-view-knockout-jquery.md#2025-04-18_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Table View: SurveyJS Dashboard for Knockout</title>\n    <meta charset=\"utf-8\">\n    <script type=\"text/javascript\" src=\"https://unpkg.com/knockout/build/output/knockout-latest.js\"></script>\n\n    <script type=\"text/javascript\" src=\"https://unpkg.com/survey-core/survey.core.min.js\"></script>\n\n    <!-- jsPDF for export to PDF -->\n    <script type=\"text/javascript\" src=\"https://cdnjs.cloudflare.com/ajax/libs/jspdf/1.5.3/jspdf.min.js\"></script>\n    <script type=\"text/javascript\" src=\"https://cdnjs.cloudflare.com/ajax/libs/jspdf-autotable/3.0.10/jspdf.plugin.autotable.min.js\"></script>\n    \n    <!-- SheetJS for export to Excel -->\n    <script type=\"text/javascript\" src=\"https://oss.sheetjs.com/sheetjs/xlsx.full.min.js\"></script>\n\n    <!-- Tabulator -->\n    <link href=\"https://cdnjs.cloudflare.com/ajax/libs/tabulator/4.7.2/css/tabulator.min.css\" rel=\"stylesheet\">\n    <script type=\"text/javascript\" src=\"https://cdnjs.cloudflare.com/ajax/libs/tabulator/4.7.2/js/tabulator.min.js\"></script>\n\n    <!-- SurveyJS plugin for Tabulator -->\n    <link href=\"https://unpkg.com/survey-analytics/survey.analytics.tabulator.min.css\" rel=\"stylesheet\">\n    <script src=\"https://unpkg.com/survey-analytics/survey.analytics.tabulator.min.js\"></script>\n\n    <script type=\"text/javascript\" src=\"index.js\"></script>\n</head>\n<body>\n    <div id=\"surveyDataTable\"></div>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Initializing Tabulator Component in React with TypeScript\nDESCRIPTION: Sets up the basic structure for a SurveyJS Tabulator component in React with TypeScript. Creates state variables for the survey model, tabulator instance, and survey results, then initializes them conditionally.\nSOURCE: https://github.com/surveyjs/survey-analytics/blob/master/docs/set-up-table-view-react.md#2025-04-18_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// components/Tabulator.tsx\n// ...\nimport { useState } from 'react';\nimport { Model } from 'survey-core';\nimport { Tabulator } from 'survey-analytics/survey.analytics.tabulator';\n\nconst surveyJson = { /* ... */ }\ninterface INpsDataObject { /* ... */ }\nfunction generateData(): Array<INpsDataObject> { /* ... */ }\n\nexport default function TableViewComponent() {\n  const [survey, setSurvey] = useState<Model>();\n  const [surveyDataTable, setSurveyDataTable] = useState<Tabulator>();\n  const [surveyResults, setSurveyResults] = useState<Array<INpsDataObject>>(generateData());\n\n  if (!survey) {\n    const survey = new Model(surveyJson);\n    setSurvey(survey);\n  }\n\n  if (!surveyResults) {\n    setSurveyResults(generateData());\n  }\n\n  if (!surveyDataTable && !!survey) {\n    const surveyDataTable = new Tabulator(\n      survey,\n      surveyResults\n    );\n    setSurveyDataTable(surveyDataTable);\n  }\n\n  return \"...\";\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Configuring a SurveyJS Visualization Panel\nDESCRIPTION: Angular component code that shows how to instantiate a SurveyJS Visualization Panel with survey questions, results, and configuration options.\nSOURCE: https://github.com/surveyjs/survey-analytics/blob/master/docs/get-started-angular.md#2025-04-18_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nimport { AfterViewInit, Component } from '@angular/core';\nimport { Model } from 'survey-core';\nimport { VisualizationPanel } from 'survey-analytics';\n\nconst surveyJson = { /* ... */ };\nconst surveyResults = [ /* ... */ ];\nconst vizPanelOptions = { /* ... */ };\n\n@Component({\n  // ...\n})\nexport class AppComponent implements AfterViewInit {\n  ngAfterViewInit(): void {\n    const survey = new Model(surveyJson);\n    const vizPanel = new VisualizationPanel(\n      survey.getAllQuestions(),\n      surveyResults,\n      vizPanelOptions\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Complete HTML Setup for SurveyJS Dashboard\nDESCRIPTION: Full HTML document with all required dependencies for SurveyJS Dashboard including survey-core, plotly.js, and survey-analytics libraries. Sets up the structure for the visualization panel.\nSOURCE: https://github.com/surveyjs/survey-analytics/blob/master/docs/get-started-html-css-javascript.md#2025-04-18_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n<head>\n    <title>SurveyJS Dashboard</title>\n    <meta charset=\"utf-8\">\n    <script type=\"text/javascript\" src=\"https://unpkg.com/survey-core/survey.core.min.js\"></script>\n    <!-- Uncomment the following lines if you also display the survey on the page -->\n    <!-- <link href=\"https://unpkg.com/survey-core/survey-core.min.css\" type=\"text/css\" rel=\"stylesheet\"> -->\n    <!-- <script type=\"text/javascript\" src=\"https://unpkg.com/survey-js-ui/survey-js-ui.min.js\"></script> -->\n\n    <script src=\"https://unpkg.com/plotly.js-dist-min/plotly.min.js\"></script>\n\n    <link href=\"https://unpkg.com/survey-analytics/survey.analytics.min.css\" rel=\"stylesheet\">\n    <script src=\"https://unpkg.com/survey-analytics/survey.analytics.min.js\"></script>\n\n    <script type=\"text/javascript\" src=\"index.js\"></script>\n</head>\n<body>\n    <div id=\"surveyVizPanel\"></div>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Configuring PDF and Excel Export in Vue 3 for SurveyJS Dashboard\nDESCRIPTION: Setup code for a Vue 3 component that enables PDF and Excel export in SurveyJS Dashboard Table View. The code imports jsPDF, applies the AutoTable plugin, and imports SheetJS, then passes these dependencies to the Tabulator constructor.\nSOURCE: https://github.com/surveyjs/survey-analytics/blob/master/docs/set-up-table-view-vue.md#2025-04-18_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<script setup lang=\"ts\">\n// ...\nimport jsPDF from \"jspdf\";\nimport { applyPlugin } from \"jspdf-autotable\";\napplyPlugin(jsPDF);\n\nimport * as XLSX from \"xlsx\";\n\nconst surveyJson = { /* ... */ };\nfunction generateData() { /* ... */ }\n\nonMounted(() => {\n  const survey = new Model(surveyJson);\n  const surveyDataTable = new Tabulator(\n    survey,\n    generateData(),\n    { jspdf: jsPDF, xlsx: XLSX }\n  );\n  surveyDataTable.render(\"surveyDataTable\");\n});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Rendering Visualization Panel in Angular Component\nDESCRIPTION: This TypeScript code demonstrates how to render the SurveyJS Visualization Panel in an Angular component using the AfterViewInit lifecycle hook.\nSOURCE: https://github.com/surveyjs/survey-analytics/blob/master/docs/get-started-angular.md#2025-04-18_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n@Component({\n  // ...\n})\nexport class AppComponent implements AfterViewInit {\n  ngAfterViewInit(): void {\n    // ...\n    vizPanel.render(\"surveyVizPanel\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering the SurveyJS Tabulator Component with Client-Side Directive\nDESCRIPTION: Implements the rendering logic for the Tabulator component with useEffect hook to handle DOM operations. Uses the 'use client' directive to ensure compatibility with React Server Components frameworks.\nSOURCE: https://github.com/surveyjs/survey-analytics/blob/master/docs/set-up-table-view-react.md#2025-04-18_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// components/Tabulator.tsx\n'use client'\n// ...\nimport { useEffect } from 'react';\n\nexport default function TableViewComponent() {\n  // ...\n\n  useEffect(() => {\n    surveyDataTable?.render(\"surveyDataTable\");\n    return () => {\n      document.getElementById(\"surveyDataTable\")!.innerHTML = \"\";\n    }\n  }, [surveyDataTable]);\n\n  return (\n    <div id=\"surveyDataTable\" />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring PDF and Excel Export in Angular for SurveyJS Dashboard\nDESCRIPTION: This code snippet demonstrates how to import and configure jsPDF, jsPDF-AutoTable, and SheetJS in an Angular component to enable PDF and Excel export functionality for the SurveyJS Dashboard Table View. It includes importing necessary modules, applying plugins, and passing instances to the Tabulator constructor.\nSOURCE: https://github.com/surveyjs/survey-analytics/blob/master/docs/set-up-table-view-angular.md#2025-04-18_snippet_7\n\nLANGUAGE: js\nCODE:\n```\n// ... \nimport jsPDF from \"jspdf\";\nimport { applyPlugin } from \"jspdf-autotable\";\napplyPlugin(jsPDF);\n\nimport * as XLSX from \"xlsx\";\n\nconst surveyJson = { /* ... */ };\nfunction generateData() { /* ... */ }\n\n@Component({\n  // ...\n})\nexport class AppComponent implements AfterViewInit {\n  ngAfterViewInit(): void {\n    const survey = new Model(surveyJson);\n    const surveyDataTable = new Tabulator(\n      survey,\n      generateData(),\n      { jspdf: jsPDF, xlsx: XLSX }\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring and Instantiating Visualization Panel in JavaScript\nDESCRIPTION: This code configures the Visualization Panel options and creates a new instance of the VisualizationPanel class using the survey questions, results, and options.\nSOURCE: https://github.com/surveyjs/survey-analytics/blob/master/docs/get-started-knockout-jquery.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst surveyJson = { /* ... */ };\nconst surveyResults = [ /* ... */ ];\nconst vizPanelOptions = {\n    allowHideQuestions: false\n}\n\nconst survey = new Survey.Model(surveyJson);\n\nconst vizPanel = new SurveyAnalytics.VisualizationPanel(\n    survey.getAllQuestions(),\n    surveyResults,\n    vizPanelOptions\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring PDF and Excel Export in SurveyJS Tabulator\nDESCRIPTION: Integrates jsPDF, jsPDF-AutoTable, and SheetJS libraries with the SurveyJS Tabulator component to enable PDF and Excel export functionality. Pass the library instances to the Tabulator constructor options.\nSOURCE: https://github.com/surveyjs/survey-analytics/blob/master/docs/set-up-table-view-react.md#2025-04-18_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// components/Tabulator.tsx\n// ...\nimport jsPDF from \"jspdf\";\nimport { applyPlugin } from \"jspdf-autotable\";\napplyPlugin(jsPDF);\nimport * as XLSX from \"xlsx\";\n// ...\nexport default function TableViewComponent() {\n  // ...\n  if (!surveyDataTable && !!survey) {\n    const surveyDataTable = new Tabulator(\n      survey,\n      surveyResults,\n      { jspdf: jsPDF, xlsx: XLSX }\n    );\n    setSurveyDataTable(surveyDataTable);\n  }\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing and Rendering the Tabulator Component in Vue.js\nDESCRIPTION: Code that instantiates the Tabulator component with the survey model and results data, then renders it in the specified container on the page.\nSOURCE: https://github.com/surveyjs/survey-analytics/blob/master/docs/set-up-table-view-vue.md#2025-04-18_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<script setup lang=\"ts\">\n// ...\n// Stylesheets are imported here\n// ...\nimport { Model } from 'survey-core';\nimport { Tabulator } from 'survey-analytics/survey.analytics.tabulator';\n\nconst surveyJson = { /* ... */ };\nfunction generateData() { /* ... */ }\n\nonMounted(() => {\n  const survey = new Model(surveyJson);\n  const surveyDataTable = new Tabulator(\n    survey,\n    generateData()\n  );\n});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Rendering the Visualization Panel in a Vue Component\nDESCRIPTION: Vue component code that renders the SurveyJS Visualization Panel in a container div. The vizPanel.render() method attaches the dashboard to the specified container element.\nSOURCE: https://github.com/surveyjs/survey-analytics/blob/master/docs/get-started-vue.md#2025-04-18_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<script setup lang=\"ts\">\n// ...\nonMounted(() => {\n  // ...\n  vizPanel.render(\"surveyVizPanel\");\n});\n</script>\n\n<template>\n  <div id=\"surveyVizPanel\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Initializing SurveyJS Tabulator with Survey Model and Data in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a SurveyJS Tabulator instance using a survey model and generated data. It includes a placeholder for the survey JSON and a function to generate sample data.\nSOURCE: https://github.com/surveyjs/survey-analytics/blob/master/docs/set-up-table-view-html-css-javascript.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst surveyJson = { /* ... */ };\nfunction generateData() { /* ... */ }\n\nconst survey = new Survey.Model(surveyJson);\n\nconst surveyDataTable = new SurveyAnalyticsTabulator.Tabulator(\n    survey,\n    generateData()\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering SurveyJS Visualization Panel with JavaScript\nDESCRIPTION: JavaScript code to render the Visualization Panel into the container element when the DOM is fully loaded. Uses the render() method on the vizPanel instance.\nSOURCE: https://github.com/surveyjs/survey-analytics/blob/master/docs/get-started-html-css-javascript.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ndocument.addEventListener(\"DOMContentLoaded\", function() {\n    vizPanel.render(document.getElementById(\"surveyVizPanel\"));\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing SurveyJS Tabulator Component\nDESCRIPTION: Creates a Tabulator instance by passing a survey model and generated data to display survey results in tabular format.\nSOURCE: https://github.com/surveyjs/survey-analytics/blob/master/docs/set-up-table-view-knockout-jquery.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst surveyJson = { /* ... */ };\nfunction generateData() { /* ... */ }\n\nconst survey = new Survey.Model(surveyJson);\n\nconst surveyDataTable = new SurveyAnalyticsTabulator.Tabulator(\n    survey,\n    generateData()\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering SurveyJS Table View\nDESCRIPTION: Initializes the table view rendering after DOM content is loaded by calling the render method with the container ID.\nSOURCE: https://github.com/surveyjs/survey-analytics/blob/master/docs/set-up-table-view-knockout-jquery.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ndocument.addEventListener(\"DOMContentLoaded\", function() {\n    surveyDataTable.render(\"surveyDataTable\");\n});\n```\n\n----------------------------------------\n\nTITLE: Next.js Page Component with Dynamic Import for Dashboard\nDESCRIPTION: Next.js page component that imports the Dashboard component dynamically with server-side rendering disabled to prevent hydration errors with SurveyJS components.\nSOURCE: https://github.com/surveyjs/survey-analytics/blob/master/docs/get-started-react.md#2025-04-18_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// dashboard/page.tsx\nimport dynamic from \"next/dynamic\";\n\nconst Dashboard = dynamic(() => import('@/components/Dashboard'), {\n  ssr: false,\n});\n\nexport default function SurveyDashboard() {\n  return (\n    <Dashboard />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering the Table View in a Vue.js Component\nDESCRIPTION: Vue component template that defines a container for the Table View and JavaScript code that renders the Tabulator in that container.\nSOURCE: https://github.com/surveyjs/survey-analytics/blob/master/docs/set-up-table-view-vue.md#2025-04-18_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<script setup lang=\"ts\">\n// ...\nonMounted(() => {\n  // ...\n  surveyDataTable.render(\"surveyDataTable\");\n});\n</script>\n\n<template>\n  <div id=\"surveyDataTable\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Configuring Survey Model and Results\nDESCRIPTION: Example configuration of a survey model with questions and sample survey results data structure.\nSOURCE: https://github.com/surveyjs/survey-analytics/blob/master/docs/get-started-react.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst surveyJson = {\n  elements: [{\n    name: \"satisfaction-score\",\n    title: \"How would you describe your experience with our product?\",\n    type: \"radiogroup\",\n    choices: [\n      { value: 5, text: \"Fully satisfying\" },\n      { value: 4, text: \"Generally satisfying\" },\n      { value: 3, text: \"Neutral\" },\n      { value: 2, text: \"Rather unsatisfying\" },\n      { value: 1, text: \"Not satisfying at all\" }\n    ],\n    isRequired: true\n  }, {\n    name: \"nps-score\",\n    title: \"On a scale of zero to ten, how likely are you to recommend our product to a friend or colleague?\",\n    type: \"rating\",\n    rateMin: 0,\n    rateMax: 10,\n  }],\n  completedHtml: \"Thank you for your feedback!\",\n};\n\nconst surveyResults = [{\n  \"satisfaction-score\": 5,\n  \"nps-score\": 10\n}, {\n  \"satisfaction-score\": 5,\n  \"nps-score\": 9\n}, {\n  \"satisfaction-score\": 3,\n  \"nps-score\": 6\n}, {\n  \"satisfaction-score\": 3,\n  \"nps-score\": 6\n}, {\n  \"satisfaction-score\": 2,\n  \"nps-score\": 3\n}];\n```\n\n----------------------------------------\n\nTITLE: Rendering SurveyJS Visualization Panel in Container\nDESCRIPTION: JavaScript code that renders the previously created Visualization Panel instance in the designated container once the DOM is fully loaded.\nSOURCE: https://github.com/surveyjs/survey-analytics/blob/master/docs/get-started-knockout-jquery.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ndocument.addEventListener(\"DOMContentLoaded\", function() {\n    vizPanel.render(\"surveyVizPanel\");\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Survey Model and Sample Results\nDESCRIPTION: Sample code that defines a survey model with two questions (satisfaction score and NPS) and provides sample survey results for demonstration purposes.\nSOURCE: https://github.com/surveyjs/survey-analytics/blob/master/docs/get-started-vue.md#2025-04-18_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nconst surveyJson = {\n  elements: [{\n    name: \"satisfaction-score\",\n    title: \"How would you describe your experience with our product?\",\n    type: \"radiogroup\",\n    choices: [\n      { value: 5, text: \"Fully satisfying\" },\n      { value: 4, text: \"Generally satisfying\" },\n      { value: 3, text: \"Neutral\" },\n      { value: 2, text: \"Rather unsatisfying\" },\n      { value: 1, text: \"Not satisfying at all\" }\n    ],\n    isRequired: true\n  }, {\n    name: \"nps-score\",\n    title: \"On a scale of zero to ten, how likely are you to recommend our product to a friend or colleague?\",\n    type: \"rating\",\n    rateMin: 0,\n    rateMax: 10,\n  }],\n  completedHtml: \"Thank you for your feedback!\",\n};\n\nconst surveyResults = [{\n  \"satisfaction-score\": 5,\n  \"nps-score\": 10\n}, {\n  \"satisfaction-score\": 5,\n  \"nps-score\": 9\n}, {\n  \"satisfaction-score\": 3,\n  \"nps-score\": 6\n}, {\n  \"satisfaction-score\": 3,\n  \"nps-score\": 6\n}, {\n  \"satisfaction-score\": 2,\n  \"nps-score\": 3\n}];\n```\n\n----------------------------------------\n\nTITLE: Rendering SurveyJS Table View in JavaScript\nDESCRIPTION: This JavaScript code demonstrates how to render the SurveyJS Table View in the specified HTML container after the DOM content has loaded.\nSOURCE: https://github.com/surveyjs/survey-analytics/blob/master/docs/set-up-table-view-html-css-javascript.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ndocument.addEventListener(\"DOMContentLoaded\", function() {\n    surveyDataTable.render(document.getElementById(\"surveyDataTable\"));\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Survey Model and Sample Results\nDESCRIPTION: Example JavaScript code that defines a survey JSON structure with two questions (satisfaction score and NPS) and provides sample survey results in the required format for visualization.\nSOURCE: https://github.com/surveyjs/survey-analytics/blob/master/docs/get-started-html-css-javascript.md#2025-04-18_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nconst surveyJson = {\n    elements: [{\n        name: \"satisfaction-score\",\n        title: \"How would you describe your experience with our product?\",\n        type: \"radiogroup\",\n        choices: [\n            { value: 5, text: \"Fully satisfying\" },\n            { value: 4, text: \"Generally satisfying\" },\n            { value: 3, text: \"Neutral\" },\n            { value: 2, text: \"Rather unsatisfying\" },\n            { value: 1, text: \"Not satisfying at all\" }\n        ],\n        isRequired: true\n    }, {\n        name: \"nps-score\",\n        title: \"On a scale of zero to ten, how likely are you to recommend our product to a friend or colleague?\",\n        type: \"rating\",\n        rateMin: 0,\n        rateMax: 10,\n    }],\n    completedHtml: \"Thank you for your feedback!\",\n};\n\nconst surveyResults = [{\n    \"satisfaction-score\": 5,\n    \"nps-score\": 10\n}, {\n    \"satisfaction-score\": 5,\n    \"nps-score\": 9\n}, {\n    \"satisfaction-score\": 3,\n    \"nps-score\": 6\n}, {\n    \"satisfaction-score\": 3,\n    \"nps-score\": 6\n}, {\n    \"satisfaction-score\": 2,\n    \"nps-score\": 3\n}];\n```\n\n----------------------------------------\n\nTITLE: Adding Visualization Panel Container in Angular HTML\nDESCRIPTION: This snippet shows how to add a container element for the SurveyJS Visualization Panel in the Angular component template.\nSOURCE: https://github.com/surveyjs/survey-analytics/blob/master/docs/get-started-angular.md#2025-04-18_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"surveyVizPanel\"></div>\n```\n\n----------------------------------------\n\nTITLE: Defining Survey Model and Results in JavaScript\nDESCRIPTION: This snippet shows the structure of a survey model in JSON format and an array of survey results. It includes two questions: a satisfaction score and an NPS score.\nSOURCE: https://github.com/surveyjs/survey-analytics/blob/master/docs/get-started-knockout-jquery.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst surveyJson = {\n    elements: [{\n        name: \"satisfaction-score\",\n        title: \"How would you describe your experience with our product?\",\n        type: \"radiogroup\",\n        choices: [\n            { value: 5, text: \"Fully satisfying\" },\n            { value: 4, text: \"Generally satisfying\" },\n            { value: 3, text: \"Neutral\" },\n            { value: 2, text: \"Rather unsatisfying\" },\n            { value: 1, text: \"Not satisfying at all\" }\n        ],\n        isRequired: true\n    }, {\n        name: \"nps-score\",\n        title: \"On a scale of zero to ten, how likely are you to recommend our product to a friend or colleague?\",\n        type: \"rating\",\n        rateMin: 0,\n        rateMax: 10,\n    }],\n    showQuestionNumbers: \"off\",\n    completedHtml: \"Thank you for your feedback!\",\n};\n\nconst surveyResults = [{\n    \"satisfaction-score\": 5,\n    \"nps-score\": 10\n}, {\n    \"satisfaction-score\": 5,\n    \"nps-score\": 9\n}, {\n    \"satisfaction-score\": 3,\n    \"nps-score\": 6\n}, {\n    \"satisfaction-score\": 3,\n    \"nps-score\": 6\n}, {\n    \"satisfaction-score\": 2,\n    \"nps-score\": 3\n}];\n```\n\n----------------------------------------\n\nTITLE: Defining Survey Model and Sample Results for Dashboard\nDESCRIPTION: JavaScript code that defines a sample survey model and corresponding results data. This demonstrates the expected data structure for the visualization panel.\nSOURCE: https://github.com/surveyjs/survey-analytics/blob/master/docs/get-started-angular.md#2025-04-18_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nconst surveyJson = {\n  elements: [{\n    name: \"satisfaction-score\",\n    title: \"How would you describe your experience with our product?\",\n    type: \"radiogroup\",\n    choices: [\n      { value: 5, text: \"Fully satisfying\" },\n      { value: 4, text: \"Generally satisfying\" },\n      { value: 3, text: \"Neutral\" },\n      { value: 2, text: \"Rather unsatisfying\" },\n      { value: 1, text: \"Not satisfying at all\" }\n    ],\n    isRequired: true\n  }, {\n    name: \"nps-score\",\n    title: \"On a scale of zero to ten, how likely are you to recommend our product to a friend or colleague?\",\n    type: \"rating\",\n    rateMin: 0,\n    rateMax: 10,\n  }],\n  completedHtml: \"Thank you for your feedback!\",\n};\n\nconst surveyResults = [{\n  \"satisfaction-score\": 5,\n  \"nps-score\": 10\n}, {\n  \"satisfaction-score\": 5,\n  \"nps-score\": 9\n}, {\n  \"satisfaction-score\": 3,\n  \"nps-score\": 6\n}, {\n  \"satisfaction-score\": 3,\n  \"nps-score\": 6\n}, {\n  \"satisfaction-score\": 2,\n  \"nps-score\": 3\n}];\n```\n\n----------------------------------------\n\nTITLE: Survey Model and Data Generation\nDESCRIPTION: TypeScript code defining survey structure and generating sample survey results data\nSOURCE: https://github.com/surveyjs/survey-analytics/blob/master/docs/set-up-table-view-angular.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst surveyJson = {\n  elements: [{\n    name: \"satisfaction-score\",\n    title: \"How would you describe your experience with our product?\",\n    type: \"radiogroup\",\n    choices: [\n      { value: 5, text: \"Fully satisfying\" },\n      { value: 4, text: \"Generally satisfying\" },\n      { value: 3, text: \"Neutral\" },\n      { value: 2, text: \"Rather unsatisfying\" },\n      { value: 1, text: \"Not satisfying at all\" }\n    ],\n    isRequired: true\n  }, {\n    name: \"nps-score\",\n    title: \"On a scale of zero to ten, how likely are you to recommend our product to a friend or colleague?\",\n    type: \"rating\",\n    rateMin: 0,\n    rateMax: 10,\n  }],\n  completedHtml: \"Thank you for your feedback!\",\n};\n\nfunction randomIntFromInterval(min: number, max: number): number {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\nfunction generateData() {\n  const data = [];\n  for (let index = 0; index < 100; index++) {\n    const satisfactionScore = randomIntFromInterval(1, 5);\n    const npsScore = satisfactionScore > 3 ? randomIntFromInterval(7, 10) : randomIntFromInterval(1, 6);\n    data.push({\n      \"satisfaction-score\": satisfactionScore,\n      \"nps-score\": npsScore\n    });\n  }\n  return data;\n}\n```\n\n----------------------------------------\n\nTITLE: Handling SSR Compatibility with Next.js Dynamic Imports\nDESCRIPTION: Demonstrates how to use Next.js dynamic imports with the ssr: false option to prevent hydration errors when rendering SurveyJS components that don't support server-side rendering.\nSOURCE: https://github.com/surveyjs/survey-analytics/blob/master/docs/set-up-table-view-react.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// tabulator/page.tsx\nimport dynamic from \"next/dynamic\";\n\nconst TableView = dynamic(() => import('@/components/Tabulator'), {\n  ssr: false,\n})\n\nexport default function SurveyTabulator() {\n  return (\n    <TableView />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring and Initializing Visualization Panel\nDESCRIPTION: JavaScript code that configures the Visualization Panel options and initializes it with survey questions and results. This example disables the ability to hide questions in the dashboard.\nSOURCE: https://github.com/surveyjs/survey-analytics/blob/master/docs/get-started-html-css-javascript.md#2025-04-18_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nconst vizPanelOptions = {\n    allowHideQuestions: false\n}\n\nconst vizPanel = new SurveyAnalytics.VisualizationPanel(\n    survey.getAllQuestions(),\n    surveyResults,\n    vizPanelOptions\n);\n```\n\n----------------------------------------\n\nTITLE: Generating Mock Survey Data for Table View in React\nDESCRIPTION: Code that defines a survey model with satisfaction and NPS questions, along with functions to generate random survey results for demonstration purposes.\nSOURCE: https://github.com/surveyjs/survey-analytics/blob/master/docs/set-up-table-view-react.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// components/Tabulator.tsx\n// ...\nconst surveyJson = {\n  elements: [{\n    name: \"satisfaction-score\",\n    title: \"How would you describe your experience with our product?\",\n    type: \"radiogroup\",\n    choices: [\n      { value: 5, text: \"Fully satisfying\" },\n      { value: 4, text: \"Generally satisfying\" },\n      { value: 3, text: \"Neutral\" },\n      { value: 2, text: \"Rather unsatisfying\" },\n      { value: 1, text: \"Not satisfying at all\" }\n    ],\n    isRequired: true\n  }, {\n    name: \"nps-score\",\n    title: \"On a scale of zero to ten, how likely are you to recommend our product to a friend or colleague?\",\n    type: \"rating\",\n    rateMin: 0,\n    rateMax: 10,\n  }],\n  completedHtml: \"Thank you for your feedback!\",\n};\n\nfunction randomIntFromInterval(min: number, max: number): number  {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\ninterface INpsDataObject {\n  \"satisfaction-score\": number;\n  \"nps-score\": number;\n}\n\nfunction generateData(): Array<INpsDataObject> {\n  const data: Array<INpsDataObject> = [];\n  for (let index = 0; index < 100; index++) {\n    const satisfactionScore = randomIntFromInterval(1, 5);\n    const npsScore = satisfactionScore > 3 ? randomIntFromInterval(7, 10) : randomIntFromInterval(1, 6);\n    data.push({\n      \"satisfaction-score\": satisfactionScore,\n      \"nps-score\": npsScore\n    });\n  }\n  return data;\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Demo Survey Data\nDESCRIPTION: JavaScript code showing survey model definition and a function to generate mock survey results for demonstration purposes.\nSOURCE: https://github.com/surveyjs/survey-analytics/blob/master/docs/set-up-table-view-knockout-jquery.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst surveyJson = {\n    elements: [{\n        name: \"satisfaction-score\",\n        title: \"How would you describe your experience with our product?\",\n        type: \"radiogroup\",\n        choices: [\n            { value: 5, text: \"Fully satisfying\" },\n            { value: 4, text: \"Generally satisfying\" },\n            { value: 3, text: \"Neutral\" },\n            { value: 2, text: \"Rather unsatisfying\" },\n            { value: 1, text: \"Not satisfying at all\" }\n        ],\n        isRequired: true\n    }, {\n        name: \"nps-score\",\n        title: \"On a scale of zero to ten, how likely are you to recommend our product to a friend or colleague?\",\n        type: \"rating\",\n        rateMin: 0,\n        rateMax: 10,\n    }],\n    showQuestionNumbers: \"off\",\n    completedHtml: \"Thank you for your feedback!\",\n};\n\nfunction randomIntFromInterval(min: number, max: number): number {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n}\nfunction generateData() {\n    const data = [];\n    for (let index = 0; index < 100; index++) {\n        const satisfactionScore = randomIntFromInterval(1, 5);\n        const npsScore = satisfactionScore > 3 ? randomIntFromInterval(7, 10) : randomIntFromInterval(1, 6);\n        data.push({\n            \"satisfaction-score\": satisfactionScore,\n            \"nps-score\": npsScore\n        });\n    }\n    return data;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Survey Model and Generating Sample Data in JavaScript\nDESCRIPTION: Definition of a survey model structure and a function that generates random survey results for demonstration purposes.\nSOURCE: https://github.com/surveyjs/survey-analytics/blob/master/docs/set-up-table-view-vue.md#2025-04-18_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nconst surveyJson = {\n  elements: [{\n    name: \"satisfaction-score\",\n    title: \"How would you describe your experience with our product?\",\n    type: \"radiogroup\",\n    choices: [\n      { value: 5, text: \"Fully satisfying\" },\n      { value: 4, text: \"Generally satisfying\" },\n      { value: 3, text: \"Neutral\" },\n      { value: 2, text: \"Rather unsatisfying\" },\n      { value: 1, text: \"Not satisfying at all\" }\n    ],\n    isRequired: true\n  }, {\n    name: \"nps-score\",\n    title: \"On a scale of zero to ten, how likely are you to recommend our product to a friend or colleague?\",\n    type: \"rating\",\n    rateMin: 0,\n    rateMax: 10,\n  }],\n  completedHtml: \"Thank you for your feedback!\",\n};\n\nfunction randomIntFromInterval(min: number, max: number): number {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\nfunction generateData() {\n  const data = [];\n  for (let index = 0; index < 100; index++) {\n    const satisfactionScore = randomIntFromInterval(1, 5);\n    const npsScore = satisfactionScore > 3 ? randomIntFromInterval(7, 10) : randomIntFromInterval(1, 6);\n    data.push({\n      \"satisfaction-score\": satisfactionScore,\n      \"nps-score\": npsScore\n    });\n  }\n  return data;\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Survey Results from Server in Angular\nDESCRIPTION: Angular component code that loads survey results from a server using an XMLHttpRequest. It demonstrates how to fetch survey result data based on a survey ID.\nSOURCE: https://github.com/surveyjs/survey-analytics/blob/master/docs/get-started-angular.md#2025-04-18_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nimport { AfterViewInit, Component } from '@angular/core';\n\nconst SURVEY_ID = 1;\n\n@Component({\n  // ...\n})\nexport class AppComponent implements AfterViewInit {\n  // ...\n  ngAfterViewInit(): void {\n    loadSurveyResults(\"https://your-web-service.com/\" + SURVEY_ID)\n      .then((surveyResults) => {\n        // ...\n        // Configure and render the Visualization Panel here\n        // Refer to the help topics below\n        // ...\n      });\n  }\n}\n\nfunction loadSurveyResults (url) {\n  return new Promise((resolve, reject) => {\n    const request = new XMLHttpRequest();\n    request.open('GET', url);\n    request.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');\n    request.onload = () => {\n      const response = request.response ? JSON.parse(request.response) : [];\n      resolve(response);\n    }\n    request.onerror = () => {\n      reject(request.statusText);\n    }\n    request.send();\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Demo Survey Results in JavaScript\nDESCRIPTION: JavaScript code that defines a survey model and generates random survey results for demonstration purposes. The sample survey includes satisfaction and NPS score questions, and the generation function creates 100 random responses with correlated scores.\nSOURCE: https://github.com/surveyjs/survey-analytics/blob/master/docs/set-up-table-view-html-css-javascript.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst surveyJson = {\n    elements: [{\n        name: \"satisfaction-score\",\n        title: \"How would you describe your experience with our product?\",\n        type: \"radiogroup\",\n        choices: [\n            { value: 5, text: \"Fully satisfying\" },\n            { value: 4, text: \"Generally satisfying\" },\n            { value: 3, text: \"Neutral\" },\n            { value: 2, text: \"Rather unsatisfying\" },\n            { value: 1, text: \"Not satisfying at all\" }\n        ],\n        isRequired: true\n    }, {\n        name: \"nps-score\",\n        title: \"On a scale of zero to ten, how likely are you to recommend our product to a friend or colleague?\",\n        type: \"rating\",\n        rateMin: 0,\n        rateMax: 10,\n    }],\n    completedHtml: \"Thank you for your feedback!\",\n};\n\nfunction randomIntFromInterval(min: number, max: number): number {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n}\nfunction generateData() {\n    const data = [];\n    for (let index = 0; index < 100; index++) {\n        const satisfactionScore = randomIntFromInterval(1, 5);\n        const npsScore = satisfactionScore > 3 ? randomIntFromInterval(7, 10) : randomIntFromInterval(1, 6);\n        data.push({\n            \"satisfaction-score\": satisfactionScore,\n            \"nps-score\": npsScore\n        });\n    }\n    return data;\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Survey Results with XMLHttpRequest\nDESCRIPTION: Function that retrieves survey results from a server using an AJAX request. It accepts a URL, sends a GET request, and returns a Promise that resolves to the parsed JSON response.\nSOURCE: https://github.com/surveyjs/survey-analytics/blob/master/docs/get-started-vue.md#2025-04-18_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script setup lang=\"ts\">\n// ...\nimport { onMounted } from \"vue\"\n\nconst SURVEY_ID = 1;\n\nfunction loadSurveyResults (url) {\n  return new Promise((resolve, reject) => {\n    const request = new XMLHttpRequest();\n    request.open('GET', url);\n    request.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');\n    request.onload = () => {\n      const response = request.response ? JSON.parse(request.response) : [];\n      resolve(response);\n    }\n    request.onerror = () => {\n      reject(request.statusText);\n    }\n    request.send();\n  });\n}\n\nonMounted(() => {\n  loadSurveyResults(\"https://your-web-service.com/\" + SURVEY_ID)\n    .then((surveyResults) => {\n      // ...\n      // Configure and render the Visualization Panel here\n      // Refer to the section below\n      // ...\n    });\n});\n</script>\n\n<template>\n  <!-- ... -->\n</template>\n```\n\n----------------------------------------\n\nTITLE: Registering NPS Visualizer in SurveyJS Analytics\nDESCRIPTION: Code to enable the NPS (Net Promoter Score) visualizer for rating questions in SurveyJS Analytics. The NPS visualizer must be explicitly registered since it is disabled by default.\nSOURCE: https://github.com/surveyjs/survey-analytics/blob/master/docs/chart-types.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { VisualizationManager, NpsVisualizer } from \"survey-analytics\";\n\nVisualizationManager.registerVisualizer(\"rating\", NpsVisualizer);\n```\n\n----------------------------------------\n\nTITLE: Implementing Survey Results Loading\nDESCRIPTION: Function to load survey results from a server using XMLHttpRequest, returning a Promise with the parsed JSON response.\nSOURCE: https://github.com/surveyjs/survey-analytics/blob/master/docs/get-started-react.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction loadSurveyResults (url: string) {\n  return new Promise((resolve, reject) => {\n    const request = new XMLHttpRequest();\n    request.open('GET', url);\n    request.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');\n    request.onload = () => {\n      const response = request.response ? JSON.parse(request.response) : [];\n      resolve(response);\n    }\n    request.onerror = () => {\n      reject(request.statusText);\n    }\n    request.send();\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dynamic Import for SurveyJS Components in Next.js\nDESCRIPTION: Using Next.js dynamic import with SSR disabled to prevent hydration errors when rendering SurveyJS components which don't support server-side rendering.\nSOURCE: https://github.com/surveyjs/survey-analytics/blob/master/docs/get-started-react.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// dashboard/page.tsx\nimport dynamic from \"next/dynamic\";\n\nconst Dashboard = dynamic(() => import('@/components/Dashboard'), {\n  ssr: false,\n});\n\nexport default function SurveyDashboard() {\n  return (\n    <Dashboard />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Survey Results in JavaScript\nDESCRIPTION: This JavaScript function demonstrates how to load survey results from a server using an XMLHttpRequest. It returns a Promise that resolves with the parsed JSON response.\nSOURCE: https://github.com/surveyjs/survey-analytics/blob/master/docs/get-started-knockout-jquery.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction loadSurveyResults (url) {\n    return new Promise((resolve, reject) => {\n        const request = new XMLHttpRequest();\n        request.open('GET', url);\n        request.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');\n        request.onload = () => {\n            const response = request.response ? JSON.parse(request.response) : [];\n            resolve(response);\n        }\n        request.onerror = () => {\n            reject(request.statusText);\n        }\n        request.send();\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Survey Results from Server in React\nDESCRIPTION: React component structure for loading survey results from a web service. Includes a function to fetch data via XMLHttpRequest and state management for the table view.\nSOURCE: https://github.com/surveyjs/survey-analytics/blob/master/docs/set-up-table-view-react.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// components/Tabulator.tsx\n// ...\nimport { useState } from 'react';\n\nconst SURVEY_ID = 1;\n\nexport default function TableViewComponent() {\n  const [surveyDataTable, setSurveyDataTable] = useState<Tabulator>();\n\n  if (!surveyDataTable) {\n    loadSurveyResults(\"https://your-web-service.com/\" + SURVEY_ID)\n      .then((surveyResults: any) => {\n        // ...\n        // Configure the Table View here\n        // Refer to the sections below\n        // ...\n      });\n  }\n\n  return \"...\";\n}\n\nfunction loadSurveyResults (url: string) {\n  return new Promise((resolve, reject) => {\n    const request = new XMLHttpRequest();\n    request.open('GET', url);\n    request.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');\n    request.onload = () => {\n      const response = request.response ? JSON.parse(request.response) : [];\n      resolve(response);\n    }\n    request.onerror = () => {\n      reject(request.statusText);\n    }\n    request.send();\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Survey Results - HTTP Request Implementation\nDESCRIPTION: TypeScript implementation for loading survey results from a server using XMLHttpRequest\nSOURCE: https://github.com/surveyjs/survey-analytics/blob/master/docs/set-up-table-view-angular.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction loadSurveyResults (url) {\n  return new Promise((resolve, reject) => {\n    const request = new XMLHttpRequest();\n    request.open('GET', url);\n    request.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');\n    request.onload = () => {\n      const response = request.response ? JSON.parse(request.response) : [];\n      resolve(response);\n    }\n    request.onerror = () => {\n      reject(request.statusText);\n    }\n    request.send();\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Survey Results via XMLHttpRequest in Vue.js\nDESCRIPTION: Function that loads survey results from a server using XMLHttpRequest. It sends the survey ID to the server and expects an array of JSON objects with survey results.\nSOURCE: https://github.com/surveyjs/survey-analytics/blob/master/docs/set-up-table-view-vue.md#2025-04-18_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script setup lang=\"ts\">\n// ...\nimport { onMounted } from \"vue\"\n\nconst SURVEY_ID = 1;\n\nfunction loadSurveyResults (url) {\n  return new Promise((resolve, reject) => {\n    const request = new XMLHttpRequest();\n    request.open('GET', url);\n    request.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');\n    request.onload = () => {\n      const response = request.response ? JSON.parse(request.response) : [];\n      resolve(response);\n    }\n    request.onerror = () => {\n      reject(request.statusText);\n    }\n    request.send();\n  });\n}\n\nonMounted(() => {\n  loadSurveyResults(\"https://your-web-service.com/\" + SURVEY_ID)\n    .then((surveyResults) => {\n      // ...\n      // Configure and render the Table View here\n      // Refer to the section below\n      // ...\n    });\n});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Next.js Page Component with Dynamic Import for Tabulator\nDESCRIPTION: A Next.js page component that dynamically imports the Tabulator component with SSR disabled to prevent hydration errors. This pattern ensures proper client-side rendering of SurveyJS components.\nSOURCE: https://github.com/surveyjs/survey-analytics/blob/master/docs/set-up-table-view-react.md#2025-04-18_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// tabulator/page.tsx\nimport dynamic from \"next/dynamic\";\n\nconst TableViewComponent = dynamic(() => import('@/components/Tabulator'), {\n  ssr: false,\n})\n\nexport default function TableView() {\n  return (\n    <TableViewComponent />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Survey Results from Server in JavaScript\nDESCRIPTION: JavaScript function to load survey results from a server using XMLHttpRequest. The code sends a request to a specified URL with a survey ID and returns the response as a Promise that resolves with the survey results array.\nSOURCE: https://github.com/surveyjs/survey-analytics/blob/master/docs/set-up-table-view-html-css-javascript.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst SURVEY_ID = 1;\n\nloadSurveyResults(\"https://your-web-service.com/\" + SURVEY_ID)\n    .then((surveyResults) => {\n        // ...\n        // Configure and render the Table View here\n        // Refer to the help topics below\n        // ...\n    });\n\nfunction loadSurveyResults (url) {\n    return new Promise((resolve, reject) => {\n        const request = new XMLHttpRequest();\n        request.open('GET', url);\n        request.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');\n        request.onload = () => {\n            const response = request.response ? JSON.parse(request.response) : [];\n            resolve(response);\n        }\n        request.onerror = () => {\n            reject(request.statusText);\n        }\n        request.send();\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Container Element for SurveyJS Visualization Panel in HTML\nDESCRIPTION: Basic HTML markup that adds a container div element with the ID 'surveyVizPanel' where the SurveyJS Visualization Panel will be rendered.\nSOURCE: https://github.com/surveyjs/survey-analytics/blob/master/docs/get-started-html-css-javascript.md#2025-04-18_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<body>\n    <div id=\"surveyVizPanel\"></div>\n</body>\n```\n\n----------------------------------------\n\nTITLE: Loading Survey Results from Server\nDESCRIPTION: JavaScript function to load survey results from a server by sending the survey ID and receiving a JSON array of results. This demonstrates the pattern for retrieving real survey data.\nSOURCE: https://github.com/surveyjs/survey-analytics/blob/master/docs/get-started-html-css-javascript.md#2025-04-18_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst SURVEY_ID = 1;\n\nloadSurveyResults(\"https://your-web-service.com/\" + SURVEY_ID)\n    .then((surveyResults) => {\n        // ...\n        // Configure and render the Visualization Panel here\n        // Refer to the help topics below\n        // ...\n    });\n\nfunction loadSurveyResults (url) {\n    return new Promise((resolve, reject) => {\n        const request = new XMLHttpRequest();\n        request.open('GET', url);\n        request.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');\n        request.onload = () => {\n            const response = request.response ? JSON.parse(request.response) : [];\n            resolve(response);\n        }\n        request.onerror = () => {\n            reject(request.statusText);\n        }\n        request.send();\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Container Setup for Table View\nDESCRIPTION: Defines the HTML container element where the table view will be rendered.\nSOURCE: https://github.com/surveyjs/survey-analytics/blob/master/docs/set-up-table-view-knockout-jquery.md#2025-04-18_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<body>\n    <div id=\"surveyDataTable\"></div>\n</body>\n```\n\n----------------------------------------\n\nTITLE: Loading Survey Results with Client-Side Processing\nDESCRIPTION: JavaScript code demonstrating how to load survey results from a server for client-side processing using XMLHttpRequest.\nSOURCE: https://github.com/surveyjs/survey-analytics/blob/master/docs/set-up-table-view-knockout-jquery.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst SURVEY_ID = 1;\n\nloadSurveyResults(\"https://your-web-service.com/\" + SURVEY_ID)\n    .then((surveyResults) => {\n        // ...\n        // Configure and render the Table View here\n        // Refer to the help topics below\n        // ...\n    });\n\nfunction loadSurveyResults (url) {\n    return new Promise((resolve, reject) => {\n        const request = new XMLHttpRequest();\n        request.open('GET', url);\n        request.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');\n        request.onload = () => {\n            const response = request.response ? JSON.parse(request.response) : [];\n            resolve(response);\n        }\n        request.onerror = () => {\n            reject(request.statusText);\n        }\n        request.send();\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Creating HTML Container for Visualization Panel\nDESCRIPTION: Adds a container div to the HTML body where the SurveyJS Visualization Panel will be rendered.\nSOURCE: https://github.com/surveyjs/survey-analytics/blob/master/docs/get-started-knockout-jquery.md#2025-04-18_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<body>\n    <div id=\"surveyVizPanel\"></div>\n</body>\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for PDF and Excel Export in SurveyJS Dashboard\nDESCRIPTION: This snippet shows the npm commands to install the required third-party libraries (jsPDF, jsPDF-AutoTable, and SheetJS) for enabling PDF and Excel export functionality in the SurveyJS Dashboard Table View.\nSOURCE: https://github.com/surveyjs/survey-analytics/blob/master/docs/set-up-table-view-angular.md#2025-04-18_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nnpm i jspdf@2.4.0 --save\nnpm i jspdf-autotable@3.5.20 --save\nnpm i xlsx@0.18.5 --save\n```\n\n----------------------------------------\n\nTITLE: Importing Required Stylesheets in Vue Component\nDESCRIPTION: Vue component setup that imports necessary CSS files from Tabulator and survey-analytics to style the Table View component.\nSOURCE: https://github.com/surveyjs/survey-analytics/blob/master/docs/set-up-table-view-vue.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script setup lang=\"ts\">\nimport 'tabulator-tables/dist/css/tabulator.css';\nimport 'survey-analytics/survey.analytics.tabulator.css';\n</script>\n\n<template>\n  <!-- ... -->\n</template>\n```\n\n----------------------------------------\n\nTITLE: Installing Third-Party Libraries for PDF and Excel Export in SurveyJS\nDESCRIPTION: Commands to install the required third-party libraries (jsPDF, jsPDF-AutoTable, and SheetJS) for enabling PDF and Excel export functionality in the Table View component.\nSOURCE: https://github.com/surveyjs/survey-analytics/blob/master/docs/set-up-table-view-react.md#2025-04-18_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nnpm i jspdf@2.4.0 --save\nnpm i jspdf-autotable@3.5.20 --save\nnpm i xlsx@0.18.5 --save\n```\n\n----------------------------------------\n\nTITLE: Configuring SurveyJS Dashboard Styles in Angular\nDESCRIPTION: Angular.json configuration to include the SurveyJS Dashboard stylesheet in the project build. This ensures the visualization components are properly styled.\nSOURCE: https://github.com/surveyjs/survey-analytics/blob/master/docs/get-started-angular.md#2025-04-18_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n{\n  \"$schema\": \"./node_modules/@angular/cli/lib/config/schema.json\",\n  // ...\n  \"projects\": {\n    \"project-name\": {\n      \"projectType\": \"application\",\n      // ...\n      \"architect\": {\n        \"build\": {\n          // ...\n          \"options\": {\n            // ...\n            \"styles\": [\n              \"src/styles.css\",\n              \"node_modules/survey-analytics/survey.analytics.min.css\"\n            ],\n            // ...\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing SurveyJS Dashboard Styles in Vue Component\nDESCRIPTION: Vue component setup that imports the necessary CSS for SurveyJS Dashboard. This ensures the dashboard components are properly styled.\nSOURCE: https://github.com/surveyjs/survey-analytics/blob/master/docs/get-started-vue.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script setup lang=\"ts\">\nimport 'survey-analytics/survey.analytics.css'\n</script>\n\n<template>\n  <!-- ... -->\n</template>\n```\n\n----------------------------------------\n\nTITLE: Linking Required Resources for SurveyJS Dashboard in HTML\nDESCRIPTION: HTML code that references all required dependencies for SurveyJS Dashboard, including Survey Core, jsPDF, SheetJS, Tabulator, and the SurveyJS plugin for Tabulator. These resources enable the Table View functionality with export capabilities for survey results.\nSOURCE: https://github.com/surveyjs/survey-analytics/blob/master/docs/set-up-table-view-html-css-javascript.md#2025-04-18_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<head>\n    <!-- ... -->\n    <!-- SurveyJS Form Library resources -->\n    <script type=\"text/javascript\" src=\"https://unpkg.com/survey-core/survey.core.min.js\"></script>\n    <!-- Uncomment the following lines if you also display the survey on the page -->\n    <!-- <link href=\"https://unpkg.com/survey-core/survey-core.min.css\" type=\"text/css\" rel=\"stylesheet\"> -->\n    <!-- <script type=\"text/javascript\" src=\"https://unpkg.com/survey-js-ui/survey-js-ui.min.js\"></script> -->\n\n    <!-- jsPDF for export to PDF -->\n    <script type=\"text/javascript\" src=\"https://unpkg.com/jspdf@2.4.0/dist/jspdf.umd.min.js\"></script>\n    <script type=\"text/javascript\" src=\"https://unpkg.com/jspdf-autotable@3.5.20/dist/jspdf.plugin.autotable.min.js\"></script>\n    \n    <!-- SheetJS for export to Excel -->\n    <script type=\"text/javascript\" src=\"https://oss.sheetjs.com/sheetjs/xlsx.full.min.js\"></script>\n\n    <!-- Tabulator -->\n    <link href=\"https://unpkg.com/tabulator-tables@6.3.1/dist/css/tabulator.min.css\" rel=\"stylesheet\">\n    <script type=\"text/javascript\" src=\"https://unpkg.com/tabulator-tables@6.3.1/dist/js/tabulator.min.js\"></script>\n\n    <!-- SurveyJS plugin for Tabulator -->\n    <link href=\"https://unpkg.com/survey-analytics/survey.analytics.tabulator.min.css\" rel=\"stylesheet\">\n    <script src=\"https://unpkg.com/survey-analytics/survey.analytics.tabulator.min.js\"></script>\n\n    <script type=\"text/javascript\" src=\"index.js\"></script>\n</head>\n```\n\n----------------------------------------\n\nTITLE: Importing SurveyJS Dashboard Styles\nDESCRIPTION: Import statement to include the required CSS styles for SurveyJS Dashboard visualization.\nSOURCE: https://github.com/surveyjs/survey-analytics/blob/master/docs/get-started-react.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport 'survey-analytics/survey.analytics.css';\n```\n\n----------------------------------------\n\nTITLE: Linking Required Resources for SurveyJS Dashboard in HTML\nDESCRIPTION: This snippet shows how to include necessary JavaScript libraries and CSS files for SurveyJS Dashboard in the HTML head section. It includes Knockout, SurveyJS Core, Plotly.js, and SurveyJS Analytics resources.\nSOURCE: https://github.com/surveyjs/survey-analytics/blob/master/docs/get-started-knockout-jquery.md#2025-04-18_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<head>\n    <!-- ... -->\n    <script type=\"text/javascript\" src=\"https://unpkg.com/knockout/build/output/knockout-latest.js\"></script>\n\n    <!-- SurveyJS Form Library resources -->\n    <script type=\"text/javascript\" src=\"https://unpkg.com/survey-core/survey.core.min.js\"></script>\n    <!-- Uncomment the following lines if you also display the survey on the page -->\n    <!-- <link href=\"https://unpkg.com/survey-core/defaultV2.min.css\" type=\"text/css\" rel=\"stylesheet\"> -->\n    <!-- <script type=\"text/javascript\" src=\"https://unpkg.com/survey-knockout-ui/survey-knockout-ui.min.js\"></script> -->\n\n    <!-- Third-party visualization libraries -->\n    <script src=\"https://unpkg.com/plotly.js-dist-min/plotly.min.js\"></script>\n    <!-- Uncomment the following line if you use the Text, Multiple Text, or Comment question types in your surveys -->\n    <!-- <script src=\"https://unpkg.com/wordcloud/src/wordcloud2.js\"></script> -->\n\n    <!-- SurveyJS Dashboard resources-->\n    <link href=\"https://unpkg.com/survey-analytics/survey.analytics.min.css\" rel=\"stylesheet\">\n    <script src=\"https://unpkg.com/survey-analytics/survey.analytics.min.js\"></script>\n</head>\n```\n\n----------------------------------------\n\nTITLE: Configuring Angular Styles\nDESCRIPTION: Angular configuration to include required Tabulator and Table View stylesheets in angular.json\nSOURCE: https://github.com/surveyjs/survey-analytics/blob/master/docs/set-up-table-view-angular.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"$schema\": \"./node_modules/@angular/cli/lib/config/schema.json\",\n  // ...\n  \"projects\": {\n    \"project-name\": {\n      \"projectType\": \"application\",\n      // ...\n      \"architect\": {\n        \"build\": {\n          // ...\n          \"options\": {\n            // ...\n            \"styles\": [\n              \"src/styles.css\",\n              \"node_modules/tabulator-tables/dist/css/tabulator.min.css\",\n              \"node_modules/survey-analytics/survey.analytics.tabulator.min.css\"\n            ],\n            // ...\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Linking SurveyJS Dashboard Resources in HTML\nDESCRIPTION: HTML code that shows how to reference SurveyJS Dashboard dependencies in the correct order: Survey Core, Plotly.js, and SurveyJS Dashboard library files.\nSOURCE: https://github.com/surveyjs/survey-analytics/blob/master/docs/get-started-html-css-javascript.md#2025-04-18_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<head>\n    <!-- ... -->\n    <!-- SurveyJS Form Library resources -->\n    <script type=\"text/javascript\" src=\"https://unpkg.com/survey-core/survey.core.min.js\"></script>\n    <!-- Uncomment the following lines if you also display the survey on the page -->\n    <!-- <link href=\"https://unpkg.com/survey-core/survey-core.min.css\" type=\"text/css\" rel=\"stylesheet\"> -->\n    <!-- <script type=\"text/javascript\" src=\"https://unpkg.com/survey-js-ui/survey-js-ui.min.js\"></script> -->\n\n    <!-- Third-party data visualization library -->\n    <script src=\"https://unpkg.com/plotly.js-dist-min/plotly.min.js\"></script>\n\n    <!-- SurveyJS Dashboard resources-->\n    <link href=\"https://unpkg.com/survey-analytics/survey.analytics.min.css\" rel=\"stylesheet\">\n    <script src=\"https://unpkg.com/survey-analytics/survey.analytics.min.js\"></script>\n</head>\n```\n\n----------------------------------------\n\nTITLE: Installing Required Libraries for PDF and Excel Export in SurveyJS Dashboard\nDESCRIPTION: npm commands to install the required third-party libraries (jsPDF, jsPDF-AutoTable, and SheetJS) for enabling PDF and Excel export functionality in SurveyJS Dashboard.\nSOURCE: https://github.com/surveyjs/survey-analytics/blob/master/docs/set-up-table-view-vue.md#2025-04-18_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nnpm i jspdf@2.4.0 --save\nnpm i jspdf-autotable@3.5.20 --save\nnpm i xlsx@0.18.5 --save\n```\n\n----------------------------------------\n\nTITLE: Importing Required CSS Styles for Tabulator and Survey Analytics\nDESCRIPTION: Imports the necessary CSS files for Tabulator tables and Survey Analytics styling to properly display the table view component in React.\nSOURCE: https://github.com/surveyjs/survey-analytics/blob/master/docs/set-up-table-view-react.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// components/Tabulator.tsx\nimport 'tabulator-tables/dist/css/tabulator.css';\nimport 'survey-analytics/survey.analytics.tabulator.css';\n```\n\n----------------------------------------\n\nTITLE: Table View HTML Template\nDESCRIPTION: HTML template for the Table View container element\nSOURCE: https://github.com/surveyjs/survey-analytics/blob/master/docs/set-up-table-view-angular.md#2025-04-18_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"surveyDataTable\"></div>\n```\n\n----------------------------------------\n\nTITLE: Installing SurveyJS Dashboard Package\nDESCRIPTION: Command to install the survey-analytics npm package which includes SurveyJS Dashboard functionality and its Plotly.js dependency.\nSOURCE: https://github.com/surveyjs/survey-analytics/blob/master/docs/get-started-react.md#2025-04-18_snippet_0\n\nLANGUAGE: cmd\nCODE:\n```\nnpm install survey-analytics --save\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript for Plotly.js Support\nDESCRIPTION: Configuration in tsconfig.json to enable synthetic default imports, which is required for proper Plotly.js integration with TypeScript.\nSOURCE: https://github.com/surveyjs/survey-analytics/blob/master/docs/get-started-angular.md#2025-04-18_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    // ...\n    \"allowSyntheticDefaultImports\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Test Examples for SurveyJS Dashboard\nDESCRIPTION: Command to start a local HTTP server for running test examples of the SurveyJS Dashboard.\nSOURCE: https://github.com/surveyjs/survey-analytics/blob/master/README.md#2025-04-18_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Installing SurveyJS Dashboard Package with npm\nDESCRIPTION: Command to install the survey-analytics npm package which is required for implementing SurveyJS Dashboard. This package also installs Plotly.js as a dependency.\nSOURCE: https://github.com/surveyjs/survey-analytics/blob/master/docs/get-started-vue.md#2025-04-18_snippet_0\n\nLANGUAGE: cmd\nCODE:\n```\nnpm install survey-analytics --save\n```\n\n----------------------------------------\n\nTITLE: Cloning the SurveyJS Dashboard Repository\nDESCRIPTION: Commands to clone the SurveyJS Dashboard repository and navigate to the project directory.\nSOURCE: https://github.com/surveyjs/survey-analytics/blob/master/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/surveyjs/survey-analytics.git\ncd survey-analytics\n```\n\n----------------------------------------\n\nTITLE: Installing SurveyJS Dashboard Package with npm\nDESCRIPTION: Command to install the survey-analytics npm package, which is required for implementing SurveyJS Dashboard in your application.\nSOURCE: https://github.com/surveyjs/survey-analytics/blob/master/docs/get-started-angular.md#2025-04-18_snippet_0\n\nLANGUAGE: cmd\nCODE:\n```\nnpm install survey-analytics --save\n```\n\n----------------------------------------\n\nTITLE: Survey Analytics Version Links in Markdown\nDESCRIPTION: Markdown formatted list of version releases with comparison links to GitHub repository changes between versions\nSOURCE: https://github.com/surveyjs/survey-analytics/blob/master/CHANGELOG.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### [1.9.91](https://github.com/surveyjs/survey-analytics/compare/v1.9.90...v1.9.91) (2023-06-08)\n```\n\n----------------------------------------\n\nTITLE: Installing survey-analytics npm Package for Vue.js\nDESCRIPTION: Command to install the survey-analytics package which provides the Table View functionality for survey results visualization.\nSOURCE: https://github.com/surveyjs/survey-analytics/blob/master/docs/set-up-table-view-vue.md#2025-04-18_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install survey-analytics --save\n```\n\n----------------------------------------\n\nTITLE: Installing survey-analytics Package\nDESCRIPTION: NPM command to install the survey-analytics package which provides Table View functionality\nSOURCE: https://github.com/surveyjs/survey-analytics/blob/master/docs/set-up-table-view-angular.md#2025-04-18_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install survey-analytics --save\n```\n\n----------------------------------------\n\nTITLE: Installing survey-analytics npm Package for React\nDESCRIPTION: Command to install the survey-analytics npm package which provides Table View functionality for survey results. This package automatically includes Tabulator as a dependency.\nSOURCE: https://github.com/surveyjs/survey-analytics/blob/master/docs/set-up-table-view-react.md#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install survey-analytics --save\n```\n\n----------------------------------------\n\nTITLE: Linking Required Resources in HTML\nDESCRIPTION: HTML code showing how to reference required JavaScript libraries including Knockout, Survey Core, export libraries (jsPDF, SheetJS), and Tabulator for interactive tables.\nSOURCE: https://github.com/surveyjs/survey-analytics/blob/master/docs/set-up-table-view-knockout-jquery.md#2025-04-18_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<head>\n    <!-- ... -->\n    <script type=\"text/javascript\" src=\"https://unpkg.com/knockout/build/output/knockout-latest.js\"></script>\n\n    <!-- SurveyJS Form Library resources -->\n    <script type=\"text/javascript\" src=\"https://unpkg.com/survey-core/survey.core.min.js\"></script>\n    <!-- Uncomment the following lines if you also display the survey on the page -->\n    <!-- <link href=\"https://unpkg.com/survey-core/defaultV2.min.css\" type=\"text/css\" rel=\"stylesheet\"> -->\n    <!-- <script type=\"text/javascript\" src=\"https://unpkg.com/survey-knockout-ui/survey-knockout-ui.min.js\"></script> -->\n\n    <!-- jsPDF for export to PDF -->\n    <script type=\"text/javascript\" src=\"https://cdnjs.cloudflare.com/ajax/libs/jspdf/1.5.3/jspdf.min.js\"></script>\n    <script type=\"text/javascript\" src=\"https://cdnjs.cloudflare.com/ajax/libs/jspdf-autotable/3.0.10/jspdf.plugin.autotable.min.js\"></script>\n    \n    <!-- SheetJS for export to Excel -->\n    <script type=\"text/javascript\" src=\"https://oss.sheetjs.com/sheetjs/xlsx.full.min.js\"></script>\n\n    <!-- Tabulator -->\n    <link href=\"https://cdnjs.cloudflare.com/ajax/libs/tabulator/4.7.2/css/tabulator.min.css\" rel=\"stylesheet\">\n    <script type=\"text/javascript\" src=\"https://cdnjs.cloudflare.com/ajax/libs/tabulator/4.7.2/js/tabulator.min.js\"></script>\n\n    <!-- SurveyJS plugin for Tabulator -->\n    <link href=\"https://unpkg.com/survey-analytics/survey.analytics.tabulator.min.css\" rel=\"stylesheet\">\n    <script src=\"https://unpkg.com/survey-analytics/survey.analytics.tabulator.min.js\"></script>\n\n    <script type=\"text/javascript\" src=\"index.js\"></script>\n</head>\n```\n\n----------------------------------------\n\nTITLE: IE11 Polyfill References in HTML/Markup\nDESCRIPTION: Required polyfill references for Internet Explorer 11 support in SurveyJS Dashboard, including Flexibility for flexbox support, CSS Variables Polyfill for CSS custom properties, and Bluebird for Vue 3 compatibility.\nSOURCE: https://github.com/surveyjs/survey-analytics/blob/master/docs/supported-browsers.md#2025-04-18_snippet_0\n\nLANGUAGE: markup\nCODE:\n```\n<a href=\"https://github.com/jonathantneal/flexibility\" target=\"_blank\">Flexibility</a>\n<a href=\"https://github.com/nuxodin/ie11CustomProperties\" target=\"_blank\">CSS Variables Polyfill</a>\n<a href=\"http://bluebirdjs.com/docs/getting-started.html\" target=\"_blank\">Bluebird</a>\n```\n\n----------------------------------------\n\nTITLE: Installing Plotly.js Type Definitions\nDESCRIPTION: Command to install type definitions for Plotly.js, which is a dependency of SurveyJS Dashboard. This provides TypeScript type support for the visualization library.\nSOURCE: https://github.com/surveyjs/survey-analytics/blob/master/docs/get-started-angular.md#2025-04-18_snippet_1\n\nLANGUAGE: cmd\nCODE:\n```\nnpm i @types/plotly.js-dist-min --save-dev\n```\n\n----------------------------------------\n\nTITLE: Building the SurveyJS Dashboard Library\nDESCRIPTION: Command to build the SurveyJS Dashboard library for production use.\nSOURCE: https://github.com/surveyjs/survey-analytics/blob/master/README.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build:prod\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for SurveyJS Dashboard\nDESCRIPTION: Command to install the necessary dependencies for the SurveyJS Dashboard project using npm.\nSOURCE: https://github.com/surveyjs/survey-analytics/blob/master/README.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests for SurveyJS Dashboard\nDESCRIPTION: Command to execute unit tests for the SurveyJS Dashboard project.\nSOURCE: https://github.com/surveyjs/survey-analytics/blob/master/README.md#2025-04-18_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Importing Localization File in SurveyJS Dashboard\nDESCRIPTION: This code demonstrates how to import a localization file (french.ts in this example) in the SurveyJS Dashboard entries directory for Webpack. This step is required after creating a new language dictionary to make it available in the library.\nSOURCE: https://github.com/surveyjs/survey-analytics/blob/master/src/analytics-localization/readme.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"../analytics-localization/french\";\n```\n\n----------------------------------------\n\nTITLE: Adding HTML Container for SurveyJS Table View\nDESCRIPTION: This HTML snippet shows the necessary markup to create a container for rendering the SurveyJS Table View on the page.\nSOURCE: https://github.com/surveyjs/survey-analytics/blob/master/docs/set-up-table-view-html-css-javascript.md#2025-04-18_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<body>\n    <div id=\"surveyDataTable\"></div>\n</body>\n```"
  }
]