[
  {
    "owner": "burnash",
    "repo": "gspread",
    "content": "TITLE: Basic Google Sheets Operations with gspread\nDESCRIPTION: Demonstrates core gspread functionality including authentication, opening a spreadsheet, updating cell ranges and single cells, and applying cell formatting.\nSOURCE: https://github.com/burnash/gspread/blob/master/docs/index.rst#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport gspread\n\ngc = gspread.service_account()\n\n# Open a sheet from a spreadsheet in one go\nwks = gc.open(\"Where is the money Lebowski?\").sheet1\n\n# Update a range of cells using the top left corner address\nwks.update([[1, 2], [3, 4]], 'A1')\n\n# Or update a single cell\nwks.update_acell('B42', \"it's down there somewhere, let me take another look.\")\n\n# Format the header\nwks.format('A1:B1', {'textFormat': {'bold': True}})\n```\n\n----------------------------------------\n\nTITLE: Basic Google Sheets Operations\nDESCRIPTION: Demonstrates core operations including authentication, opening a spreadsheet, updating cells and formatting.\nSOURCE: https://github.com/burnash/gspread/blob/master/README.md#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport gspread\n\n# First you need access to the Google API. Based on the route you\n# chose in Step 1, call either service_account(), oauth() or api_key().\ngc = gspread.service_account()\n\n# Open a sheet from a spreadsheet in one go\nwks = gc.open(\"Where is the money Lebowski?\").sheet1\n\n# Update a range of cells using the top left corner address\nwks.update([[1, 2], [3, 4]], \"A1\")\n\n# Or update a single cell\nwks.update_acell(\"B42\", \"it's down there somewhere, let me take another look.\")\n\n# Format the header\nwks.format('A1:B1', {'textFormat': {'bold': True}})\n```\n\n----------------------------------------\n\nTITLE: Writing pandas DataFrame to Google Sheets with gspread\nDESCRIPTION: Shows how to update a worksheet with pandas DataFrame data, including the column headers. The update() method is used to write both the column names and values to the sheet.\nSOURCE: https://github.com/burnash/gspread/blob/master/docs/user-guide.rst#2025-04-19_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport pandas as pd\n\nworksheet.update([dataframe.columns.values.tolist()] + dataframe.values.tolist())\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Service Account in Python using gspread\nDESCRIPTION: This snippet demonstrates how to authenticate with Google Sheets API using a service account. It loads the service account credentials from the default location and opens a spreadsheet.\nSOURCE: https://github.com/burnash/gspread/blob/master/docs/oauth2.rst#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport gspread\n\ngc = gspread.service_account()\n\nsh = gc.open(\"Example spreadsheet\")\n\nprint(sh.sheet1.get('A1'))\n```\n\n----------------------------------------\n\nTITLE: Converting Google Sheets Data to pandas DataFrame with gspread\nDESCRIPTION: Demonstrates how to import worksheet data into a pandas DataFrame using the get_all_records() method. This is useful for performing data analysis on Google Sheets data.\nSOURCE: https://github.com/burnash/gspread/blob/master/docs/user-guide.rst#2025-04-19_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport pandas as pd\n\ndataframe = pd.DataFrame(worksheet.get_all_records())\n```\n\n----------------------------------------\n\nTITLE: Writing NumPy Array to Google Sheets with gspread\nDESCRIPTION: Shows how to update a worksheet with data from a NumPy array. The example creates a 2D array and writes it to the worksheet starting from cell A2 using the update() method.\nSOURCE: https://github.com/burnash/gspread/blob/master/docs/user-guide.rst#2025-04-19_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\n\narray = np.array([[1, 2, 3], [4, 5, 6]])\n\n# Write the array to worksheet starting from the A2 cell\nworksheet.update(array.tolist(), 'A2')\n```\n\n----------------------------------------\n\nTITLE: Creating and Sharing Spreadsheets\nDESCRIPTION: Examples of creating new spreadsheets and managing sharing permissions.\nSOURCE: https://github.com/burnash/gspread/blob/master/README.md#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nsh = gc.create('A new spreadsheet')\n\n# But that new spreadsheet will be visible only to your script's account.\n# To be able to access newly created spreadsheet you *must* share it\n# with your email. Which brings us toâ€¦\n```\n\nLANGUAGE: python\nCODE:\n```\nsh.share('otto@example.com', perm_type='user', role='writer')\n```\n\n----------------------------------------\n\nTITLE: Custom Authentication Using Authlib with gspread\nDESCRIPTION: This snippet shows how to use Authlib for custom authentication with gspread. It creates an AssertionSession using a configuration file and uses it to authenticate gspread. The code also demonstrates opening a spreadsheet, updating a cell, and fetching a cell range.\nSOURCE: https://github.com/burnash/gspread/blob/master/docs/advanced.rst#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport json\nfrom gspread import Client\nfrom authlib.integrations.requests_client import AssertionSession\n\ndef create_assertion_session(conf_file, scopes, subject=None):\n    with open(conf_file, 'r') as f:\n        conf = json.load(f)\n\n    token_url = conf['token_uri']\n    issuer = conf['client_email']\n    key = conf['private_key']\n    key_id = conf.get('private_key_id')\n\n    header = {'alg': 'RS256'}\n    if key_id:\n        header['kid'] = key_id\n\n    # Google puts scope in payload\n    claims = {'scope': ' '.join(scopes)}\n    return AssertionSession(\n        grant_type=AssertionSession.JWT_BEARER_GRANT_TYPE,\n        token_endpoint=token_url,\n        issuer=issuer,\n        audience=token_url,\n        claims=claims,\n        subject=subject,\n        key=key,\n        header=header,\n    )\n\nscopes = [\n    'https://www.googleapis.com/auth/spreadsheets',\n    'https://www.googleapis.com/auth/drive',\n]\nsession = create_assertion_session('your-google-conf.json', scopes)\ngc = Client(None, session)\n\nwks = gc.open(\"Where is the money Lebowski?\").sheet1\n\nwks.update_acell('B2', \"it's down there somewhere, let me take another look.\")\n\n# Fetch a cell range\ncell_list = wks.range('A1:B7')\n```\n\n----------------------------------------\n\nTITLE: OAuth Authentication from Dictionary in Python using gspread\nDESCRIPTION: This code demonstrates how to authenticate using OAuth by providing the credentials as a Python dictionary rather than loading from a file.\nSOURCE: https://github.com/burnash/gspread/blob/master/docs/oauth2.rst#2025-04-19_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport gspread\n\ncredentials = {\n    \"installed\": {\n        \"client_id\": \"12345678901234567890abcdefghijklmn.apps.googleusercontent.com\",\n        \"project_id\": \"my-project1234\",\n        \"auth_uri\": \"https://accounts.google.com/o/oauth2/auth\",\n        \"token_uri\": \"https://oauth2.googleapis.com/token\",\n        ...\n    }\n}\ngc, authorized_user = gspread.oauth_from_dict(credentials)\n\nsh = gc.open(\"Example spreadsheet\")\n\nprint(sh.sheet1.get('A1'))\n```\n\n----------------------------------------\n\nTITLE: OAuth Authentication in Python using gspread\nDESCRIPTION: This snippet demonstrates how to authenticate with Google Sheets API using OAuth. It launches a browser for user authentication and stores credentials for future use.\nSOURCE: https://github.com/burnash/gspread/blob/master/docs/oauth2.rst#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport gspread\n\ngc = gspread.oauth()\n\nsh = gc.open(\"Example spreadsheet\")\n\nprint(sh.sheet1.get('A1'))\n```\n\n----------------------------------------\n\nTITLE: Converting Google Sheets Data to NumPy Array with gspread\nDESCRIPTION: Demonstrates reading worksheet data into a NumPy array. The example shows how to handle all values from a sheet, with a note about skipping header rows if necessary.\nSOURCE: https://github.com/burnash/gspread/blob/master/docs/user-guide.rst#2025-04-19_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\narray = np.array(worksheet.get_all_values())\n```\n\n----------------------------------------\n\nTITLE: Creating and Sharing Spreadsheets\nDESCRIPTION: Creating a new spreadsheet and sharing it with other users with specific permissions.\nSOURCE: https://github.com/burnash/gspread/blob/master/docs/user-guide.rst#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nsh = gc.create('A new spreadsheet')\n```\n\nLANGUAGE: python\nCODE:\n```\nsh.share('otto@example.com', perm_type='user', role='writer')\n```\n\n----------------------------------------\n\nTITLE: Advanced Cell Formatting in Google Sheets with gspread\nDESCRIPTION: Applies multiple formatting options to cells A2:B2 including background color, horizontal alignment, text color and font size. This demonstrates how to use complex formatting objects with the worksheet.format() method.\nSOURCE: https://github.com/burnash/gspread/blob/master/docs/user-guide.rst#2025-04-19_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nworksheet.format(\"A2:B2\", {\n    \"backgroundColor\": {\n      \"red\": 0.0,\n      \"green\": 0.0,\n      \"blue\": 0.0\n    },\n    \"horizontalAlignment\": \"CENTER\",\n    \"textFormat\": {\n      \"foregroundColor\": {\n        \"red\": 1.0,\n        \"green\": 1.0,\n        \"blue\": 1.0\n      },\n      \"fontSize\": 12,\n      \"bold\": True\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Data Validation Rules\nDESCRIPTION: Adding data validation rules to cells including number validation and dropdown lists.\nSOURCE: https://github.com/burnash/gspread/blob/master/docs/user-guide.rst#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nws.add_validation(\n   'A1',\n   ValidationConditionType.number_greater,\n   [10],\n   strict=True,\n   inputMessage='Value must be greater than 10'\n)\n```\n\nLANGUAGE: python\nCODE:\n```\nworksheet.add_validation(\n   'C2:C7',\n   ValidationConditionType.one_of_list,\n   ['Yes',\n   'No',],\n   showCustomUi=True\n)\n```\n\n----------------------------------------\n\nTITLE: Accessing a Spreadsheet with Regular Authentication in Python\nDESCRIPTION: Example code showing how to open a spreadsheet by name and access cell data using standard authentication credentials. This method requires proper authorization setup and works with both private and public spreadsheets.\nSOURCE: https://github.com/burnash/gspread/blob/master/docs/oauth2.rst#2025-04-19_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nsh = gc.open(\"Example spreadsheet\")\n\nprint(sh.sheet1.get('A1'))\n```\n\n----------------------------------------\n\nTITLE: Cell Operations and Data Validation\nDESCRIPTION: Examples of reading, updating cells and adding data validation rules.\nSOURCE: https://github.com/burnash/gspread/blob/master/README.md#2025-04-19_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport gspread\nfrom gspread.utils import ValidationConditionType\n\n# Restrict the input to greater than 10 in a single cell\nworksheet.add_validation(\n  'A1',\n  ValidationConditionType.number_greater,\n  [10],\n  strict=True,\n  inputMessage='Value must be greater than 10',\n)\n\n# Restrict the input to Yes/No for a specific range with dropdown\nworksheet.add_validation(\n  'C2:C7',\n   ValidationConditionType.one_of_list,\n   ['Yes',\n   'No',]\n   showCustomUi=True\n)\n```\n\n----------------------------------------\n\nTITLE: Service Account Authentication with Custom Path in Python using gspread\nDESCRIPTION: This snippet shows how to authenticate with a service account by specifying a custom path to the credentials file.\nSOURCE: https://github.com/burnash/gspread/blob/master/docs/oauth2.rst#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ngc = gspread.service_account(filename='path/to/the/downloaded/file.json')\n```\n\n----------------------------------------\n\nTITLE: Cell Operations and Value Retrieval\nDESCRIPTION: Methods for getting and updating cell values, including formatted and unformatted values.\nSOURCE: https://github.com/burnash/gspread/blob/master/docs/user-guide.rst#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nval = worksheet.acell('B1').value\n\nval = worksheet.cell(1, 2).value\n\ncell = worksheet.acell('B1', value_render_option='FORMULA').value\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom gspread.utils import ValueRenderOption\nworksheet.get(\"A1:B2\", value_render_option=ValueRenderOption.unformatted)\n```\n\n----------------------------------------\n\nTITLE: Opening Spreadsheets\nDESCRIPTION: Shows different methods to open Google Sheets by title, key, or URL.\nSOURCE: https://github.com/burnash/gspread/blob/master/README.md#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# You can open a spreadsheet by its title as it appears in Google Docs\nsh = gc.open('My poor gym results') # <-- Look ma, no keys!\n\n# If you want to be specific, use a key (which can be extracted from\n# the spreadsheet's url)\nsht1 = gc.open_by_key('0BmgG6nO_6dprdS1MN3d3MkdPa142WFRrdnRRUWl1UFE')\n\n# Or, if you feel really lazy to extract that key, paste the entire url\nsht2 = gc.open_by_url('https://docs.google.com/spreadsheet/ccc?key=0Bm...FE&hl')\n```\n\n----------------------------------------\n\nTITLE: OAuth Authentication with Stored Authorized User in Python using gspread\nDESCRIPTION: This snippet shows how to authenticate with OAuth using both credentials and previously authorized user information, which can bypass the authentication flow if the tokens haven't expired.\nSOURCE: https://github.com/burnash/gspread/blob/master/docs/oauth2.rst#2025-04-19_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport gspread\n\ncredentials = {\n    \"installed\": {\n        \"client_id\": \"12345678901234567890abcdefghijklmn.apps.googleusercontent.com\",\n        \"project_id\": \"my-project1234\",\n        \"auth_uri\": \"https://accounts.google.com/o/oauth2/auth\",\n        \"token_uri\": \"https://oauth2.googleapis.com/token\",\n        ...\n    }\n}\nauthorized_user = {\n    \"refresh_token\": \"8//ThisALONGTOkEn....\",\n    \"token_uri\": \"https://oauth2.googleapis.com/token\",\n    \"client_id\": \"12345678901234567890abcdefghijklmn.apps.googleusercontent.com\",\n    \"client_secret\": \"MySecRet....\",\n    \"scopes\": [\n        \"https://www.googleapis.com/auth/spreadsheets\",\n        \"https://www.googleapis.com/auth/drive\"\n    ],\n    \"expiry\": \"1070-01-01T00:00:00.000001Z\"\n}\ngc, authorized_user = gspread.oauth_from_dict(credentials, authorized_user)\n```\n\n----------------------------------------\n\nTITLE: Worksheet Selection and Management\nDESCRIPTION: Different methods to select, create, and delete worksheets within a spreadsheet.\nSOURCE: https://github.com/burnash/gspread/blob/master/docs/user-guide.rst#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nworksheet = sh.get_worksheet(0)\n\nworksheet = sh.worksheet(\"January\")\n\nworksheet = sh.sheet1\n\nworksheet_list = sh.worksheets()\n```\n\nLANGUAGE: python\nCODE:\n```\nworksheet = sh.add_worksheet(title=\"A worksheet\", rows=100, cols=20)\n```\n\nLANGUAGE: python\nCODE:\n```\nsh.del_worksheet(worksheet)\n```\n\n----------------------------------------\n\nTITLE: Worksheet Operations\nDESCRIPTION: Examples of selecting, creating, and deleting worksheets.\nSOURCE: https://github.com/burnash/gspread/blob/master/README.md#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# Select worksheet by index. Worksheet indexes start from zero\nworksheet = sh.get_worksheet(0)\n\n# By title\nworksheet = sh.worksheet(\"January\")\n\n# Most common case: Sheet1\nworksheet = sh.sheet1\n\n# Get a list of all worksheets\nworksheet_list = sh.worksheets()\n```\n\nLANGUAGE: python\nCODE:\n```\nworksheet = sh.add_worksheet(title=\"A worksheet\", rows=\"100\", cols=\"20\")\n```\n\nLANGUAGE: python\nCODE:\n```\nsh.del_worksheet(worksheet)\n```\n\n----------------------------------------\n\nTITLE: Authenticating and Using gspread in Google Colaboratory\nDESCRIPTION: This snippet demonstrates how to authenticate and use gspread within Google Colaboratory. It uses Google Colab's built-in authentication and the google.auth library to set up credentials for gspread.\nSOURCE: https://github.com/burnash/gspread/blob/master/docs/advanced.rst#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom google.colab import auth\nauth.authenticate_user()\n\nimport gspread\nfrom google.auth import default\ncreds, _ = default()\n\ngc = gspread.authorize(creds)\n```\n\n----------------------------------------\n\nTITLE: Authentication Functions in gspread Python Library\nDESCRIPTION: This snippet shows the three main authentication functions available in the gspread library: oauth for OAuth-based authentication, service_account for service account authentication, and authorize for general authorization with credentials.\nSOURCE: https://github.com/burnash/gspread/blob/master/docs/api/top-level.rst#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. autofunction:: oauth\n.. autofunction:: service_account\n.. autofunction:: authorize\n```\n\n----------------------------------------\n\nTITLE: Formatting Text Bold in Google Sheets with gspread\nDESCRIPTION: Sets the text format of cells A1:B1 to bold using the worksheet.format() method. This demonstrates basic text formatting capabilities in gspread.\nSOURCE: https://github.com/burnash/gspread/blob/master/docs/user-guide.rst#2025-04-19_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nworksheet.format('A1:B1', {'textFormat': {'bold': True}})\n```\n\n----------------------------------------\n\nTITLE: Service Account Authentication from Dictionary in Python using gspread\nDESCRIPTION: This snippet shows how to authenticate with a service account by providing credentials as a Python dictionary instead of a file.\nSOURCE: https://github.com/burnash/gspread/blob/master/docs/oauth2.rst#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport gspread\n\ncredentials = {\n    \"type\": \"service_account\",\n    \"project_id\": \"api-project-XXX\",\n    \"private_key_id\": \"2cd â€¦ ba4\",\n    \"private_key\": \"-----BEGIN PRIVATE KEY-----\\nNrDyLw â€¦ jINQh/9\\n-----END PRIVATE KEY-----\\n\",\n    \"client_email\": \"473000000000-yoursisdifferent@developer.gserviceaccount.com\",\n    \"client_id\": \"473 â€¦ hd.apps.googleusercontent.com\",\n    ...\n}\n\ngc = gspread.service_account_from_dict(credentials)\n\nsh = gc.open(\"Example spreadsheet\")\n\nprint(sh.sheet1.get('A1'))\n```\n\n----------------------------------------\n\nTITLE: Opening Google Spreadsheet in Python\nDESCRIPTION: Examples of different methods to open a Google Spreadsheet using gspread, including opening by title, key, or URL.\nSOURCE: https://github.com/burnash/gspread/blob/master/docs/user-guide.rst#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nsh = gc.open('My poor gym results')\n```\n\nLANGUAGE: python\nCODE:\n```\nsht1 = gc.open_by_key('0BmgG6nO_6dprdS1MN3d3MkdPa142WFRrdnRRUWl1UFE')\n```\n\nLANGUAGE: python\nCODE:\n```\nsht2 = gc.open_by_url('https://docs.google.com/spreadsheet/ccc?key=0Bm...FE&hl')\n```\n\n----------------------------------------\n\nTITLE: Manual Service Account Authentication with Google Auth in Python\nDESCRIPTION: This code demonstrates manual authentication using google.oauth2 credentials for service accounts. It explicitly defines the required scopes and creates the credentials object.\nSOURCE: https://github.com/burnash/gspread/blob/master/docs/oauth2.rst#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom google.oauth2.service_account import Credentials\n\nscopes = [\n    'https://www.googleapis.com/auth/spreadsheets',\n    'https://www.googleapis.com/auth/drive'\n]\n\ncredentials = Credentials.from_service_account_file(\n    'path/to/the/downloaded/file.json',\n    scopes=scopes\n)\n\ngc = gspread.authorize(credentials)\n```\n\n----------------------------------------\n\nTITLE: OAuth Authentication with Custom Paths in Python using gspread\nDESCRIPTION: This snippet shows how to authenticate using OAuth by specifying custom paths for both the credentials file and the authorized user file.\nSOURCE: https://github.com/burnash/gspread/blob/master/docs/oauth2.rst#2025-04-19_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ngc = gspread.oauth(\n    credentials_filename='path/to/the/credentials.json',\n    authorized_user_filename='path/to/the/authorized_user.json'\n)\n```\n\n----------------------------------------\n\nTITLE: Installing gspread with pip\nDESCRIPTION: Command to install the gspread library using pip package manager. Requires Python 3+.\nSOURCE: https://github.com/burnash/gspread/blob/master/docs/index.rst#2025-04-19_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npip install gspread\n```\n\n----------------------------------------\n\nTITLE: Installing gspread package\nDESCRIPTION: Command to install the gspread package using pip package manager.\nSOURCE: https://github.com/burnash/gspread/blob/master/README.md#2025-04-19_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npip install gspread\n```\n\n----------------------------------------\n\nTITLE: Accessing a Public Spreadsheet with API Key in Python\nDESCRIPTION: Example code showing how to open a public spreadsheet using an API key. This method only works with public spreadsheets and requires specifying the spreadsheet by key or URL rather than by name.\nSOURCE: https://github.com/burnash/gspread/blob/master/docs/oauth2.rst#2025-04-19_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport gspread\n\ngc = gspread.api_key(\"<your newly create key>\")\n\nsh = gc.open_by_key(\"1BxiMVs0XRA5nFMdKvBdBZjgmUUqptlbs74OgvE2upms\")\n\nprint(sh.sheet1.get('A1'))\n```\n\n----------------------------------------\n\nTITLE: Python Package Dependencies for gspread\nDESCRIPTION: Specifies the required Python packages and their versions needed to run the gspread library. Includes Google authentication packages, testing frameworks like pytest, and HTTP client urllib3 with specific version constraints.\nSOURCE: https://github.com/burnash/gspread/blob/master/test-requirements.txt#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ngoogle-auth==1.12.0\ngoogle-auth-oauthlib==0.4.1\nvcrpy\npytest\npytest-vcr\nurllib3==1.26.15\n```\n\n----------------------------------------\n\nTITLE: Listing Python Package Dependencies for gspread\nDESCRIPTION: This snippet specifies the required Python packages and their versions for the gspread project. It includes tools for security testing, code formatting, spell checking, linting, import sorting, and static type checking.\nSOURCE: https://github.com/burnash/gspread/blob/master/lint-requirements.txt#2025-04-19_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\nbandit==1.7.10\nblack==24.8.0\ncodespell==2.2.5\nflake8==7.1.1\nisort==5.12.0\nmypy==1.11.2\nmypy-extensions==1.0.0\ntyping_extensions==4.12.2\n```\n\n----------------------------------------\n\nTITLE: Specifying Sphinx Documentation Dependencies\nDESCRIPTION: Lists the required Python packages for generating documentation using Sphinx. Includes the core Sphinx package (version 6.2.1), the Read the Docs theme, and the sphinx-toolbox extension package.\nSOURCE: https://github.com/burnash/gspread/blob/master/docs/requirements.txt#2025-04-19_snippet_0\n\nLANGUAGE: requirements\nCODE:\n```\nsphinx==6.2.1\nsphinx_rtd_theme\nsphinx-toolbox\n```\n\n----------------------------------------\n\nTITLE: Documenting ValueRange Class in gspread.worksheet Module\nDESCRIPTION: This snippet uses reStructuredText to generate API documentation for the ValueRange class in the gspread.worksheet module. It includes all members of the class.\nSOURCE: https://github.com/burnash/gspread/blob/master/docs/api/models/worksheet.rst#2025-04-19_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: gspread.worksheet.ValueRange\n   :members:\n```\n\n----------------------------------------\n\nTITLE: Documenting Worksheet Class in gspread.worksheet Module\nDESCRIPTION: This snippet uses reStructuredText to generate API documentation for the Worksheet class in the gspread.worksheet module. It includes all members of the class.\nSOURCE: https://github.com/burnash/gspread/blob/master/docs/api/models/worksheet.rst#2025-04-19_snippet_1\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: gspread.worksheet.Worksheet\n   :members:\n```\n\n----------------------------------------\n\nTITLE: Defining Spreadsheet Class Documentation Structure in reStructuredText\nDESCRIPTION: The code snippet defines the documentation structure for the Spreadsheet class from the gspread library using reStructuredText (rst) format. It uses the autoclass directive to automatically generate documentation including all members of the Spreadsheet class from the gspread.spreadsheet module.\nSOURCE: https://github.com/burnash/gspread/blob/master/docs/api/models/spreadsheet.rst#2025-04-19_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: gspread.spreadsheet.Spreadsheet\n   :members:\n```\n\n----------------------------------------\n\nTITLE: Documenting Cell Class in gspread using Sphinx\nDESCRIPTION: This snippet uses Sphinx's autoclass directive to generate documentation for the Cell class in the gspread.cell module. It includes all members of the class in the documentation.\nSOURCE: https://github.com/burnash/gspread/blob/master/docs/api/models/cell.rst#2025-04-19_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. autoclass:: gspread.cell.Cell\n   :members:\n```\n\n----------------------------------------\n\nTITLE: Documenting gspread Client Class with Sphinx in RST\nDESCRIPTION: This RST (reStructuredText) snippet uses Sphinx's autoclass directive to generate documentation for the gspread.Client class and all of its members. The directive automatically pulls docstrings and signature information from the class definition.\nSOURCE: https://github.com/burnash/gspread/blob/master/docs/api/client.rst#2025-04-19_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: gspread.Client\n   :members:\n```\n\n----------------------------------------\n\nTITLE: Documenting HTTPClient Class in reStructuredText\nDESCRIPTION: This snippet defines the documentation structure for the HTTPClient class in the gspread library. It uses the autoclass directive to automatically generate documentation for the class and its members.\nSOURCE: https://github.com/burnash/gspread/blob/master/docs/api/http_client.rst#2025-04-19_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: gspread.HTTPClient\n   :members:\n```\n\n----------------------------------------\n\nTITLE: Documenting BackOffHTTPClient Class in reStructuredText\nDESCRIPTION: This snippet defines the documentation structure for the BackOffHTTPClient class in the gspread library. It uses the autoclass directive to automatically generate documentation for the class and its members.\nSOURCE: https://github.com/burnash/gspread/blob/master/docs/api/http_client.rst#2025-04-19_snippet_1\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: gspread.BackOffHTTPClient\n   :members:\n```\n\n----------------------------------------\n\nTITLE: Documenting gspread Exception Classes in reStructuredText\nDESCRIPTION: A reStructuredText document that references all the exception classes defined in the gspread.exceptions module. Uses autoexception directive to automatically generate documentation for each exception class.\nSOURCE: https://github.com/burnash/gspread/blob/master/docs/api/exceptions.rst#2025-04-19_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\nExceptions\n==========\n\n\n.. autoexception:: gspread.exceptions.APIError\n.. autoexception:: gspread.exceptions.GSpreadException\n.. autoexception:: gspread.exceptions.IncorrectCellLabel\n.. autoexception:: gspread.exceptions.InvalidInputValue\n.. autoexception:: gspread.exceptions.NoValidUrlKeyFound\n.. autoexception:: gspread.exceptions.SpreadsheetNotFound\n.. autoexception:: gspread.exceptions.UnSupportedExportFormat\n.. autoexception:: gspread.exceptions.WorksheetNotFound\n```\n\n----------------------------------------\n\nTITLE: Sphinx automodule directive for gspread.utils\nDESCRIPTION: ReStructuredText directive to automatically generate documentation from the gspread.utils module, including all members and undocumented members\nSOURCE: https://github.com/burnash/gspread/blob/master/docs/api/utils.rst#2025-04-19_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: gspread.utils\n   :members:\n   :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Documenting Authentication Module with Sphinx in RST\nDESCRIPTION: This RST (reStructuredText) snippet configures Sphinx to automatically document the gspread.auth module. The automodule directive tells Sphinx to include documentation for all members of the module.\nSOURCE: https://github.com/burnash/gspread/blob/master/docs/api/auth.rst#2025-04-19_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: gspread.auth\n   :members:\n```\n\n----------------------------------------\n\nTITLE: Defining API Reference Table of Contents in reStructuredText\nDESCRIPTION: This is a reStructuredText (RST) document that defines the structure of the API reference documentation for gspread. It uses the toctree directive to organize documentation into logical sections with a maximum depth of 2 levels.\nSOURCE: https://github.com/burnash/gspread/blob/master/docs/api/index.rst#2025-04-19_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :maxdepth: 2\n\n   top-level\n   auth\n   client\n   http_client\n   models/index\n   utils\n   exceptions\n```"
  }
]