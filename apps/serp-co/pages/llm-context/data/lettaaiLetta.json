[
  {
    "owner": "letta-ai",
    "repo": "letta",
    "content": "TITLE: Retrieving Agent Core Memory\nDESCRIPTION: Fetches the agent's core memory, which includes information that is always included in-context during LLM calls. This memory contains crucial information about both the user and the agent's persona.\nSOURCE: https://github.com/letta-ai/letta/blob/main/examples/notebooks/Introduction to Letta.ipynb#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nmemory = client.agents.core_memory.retrieve(agent_id=agent_state.id)\n```\n\n----------------------------------------\n\nTITLE: Creating and Configuring Agent State\nDESCRIPTION: Initializes agent state with memory blocks and attaches data source\nSOURCE: https://github.com/letta-ai/letta/blob/main/examples/notebooks/Agentic RAG with Letta.ipynb#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nagent_state = client.agents.create(\n    memory_blocks=[\n        CreateBlock(\n            label=\"human\",\n            value=\"Name: Sarah\",\n        ),\n    ],\n    model=\"openai/gpt-4\",\n    embedding=\"openai/text-embedding-ada-002\",\n)\n```\n\nLANGUAGE: python\nCODE:\n```\nclient.sources.attach(\n    source_id=source.id,\n    agent_id=agent_state.id\n)\n```\n\nLANGUAGE: python\nCODE:\n```\nresponse = client.agents.messages.create(\n    agent_id=agent_state.id,\n    messages=[\n        MessageCreate(\n            role=\"user\",\n            content=\"Search archival for our company's vacation policies\",\n        )\n    ],\n)\nresponse\n```\n\n----------------------------------------\n\nTITLE: Sending Messages to Agent\nDESCRIPTION: Demonstrates how to send user messages to a Letta agent and print responses.\nSOURCE: https://github.com/letta-ai/letta/blob/main/examples/tutorials/python-client.ipynb#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom letta.client.utils import pprint \n\nresponse = client.user_message(agent_id=basic_agent.id, message=\"hello\") \npprint(response.messages)\n```\n\n----------------------------------------\n\nTITLE: Creating a Letta Agent with Initial Memory Blocks\nDESCRIPTION: Creates a Letta agent with initial memory blocks that define information about the human user and the agent's persona. These memory blocks establish the foundation for the agent's behavior and knowledge.\nSOURCE: https://github.com/letta-ai/letta/blob/main/examples/notebooks/Introduction to Letta.ipynb#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nagent_state = client.agents.create(\n    name=agent_name, \n    memory_blocks=[\n        CreateBlock(\n            label=\"human\",\n            value=\"My name is Sarah\",\n        ),\n        CreateBlock(\n            label=\"persona\",\n            value=\"You are a helpful assistant that loves emojis\",\n        ),\n    ],\n)\n```\n\n----------------------------------------\n\nTITLE: Creating MemGPT Agent\nDESCRIPTION: This code creates a MemGPT agent with specified memory blocks, model, and embedding. It demonstrates how to initialize an agent with predefined information.\nSOURCE: https://github.com/letta-ai/letta/blob/main/examples/Building agents with Letta.ipynb#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nagent_state = client.agents.create(\n    name=agent_name, \n    memory_blocks=[\n        CreateBlock(\n            label=\"human\",\n            value=\"My name is Sarah\",\n        ),\n        CreateBlock(\n            label=\"persona\",\n            value=\"You are a helpful assistant that loves emojis\",\n        ),\n    ]\n    model=\"openai/gpt-4o-mini\",\n    embedding=\"openai/text-embedding-ada-002\",\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Customized Agent\nDESCRIPTION: Creates a Letta agent with custom persona and human characteristics for personalized interactions.\nSOURCE: https://github.com/letta-ai/letta/blob/main/examples/tutorials/python-client.ipynb#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\npersona = \\\n\"\"\"\nYou are a friendly and helpful agent!\n\"\"\"\n\nhuman = \\\n\"\"\"\nI am an Accenture consultant with many specializations. My name is Sarah.\n\"\"\"\n\ncustom_agent = client.create_agent(\n    name=\"custom_agent\", \n    human=human, \n    persona=persona\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Source and Uploading Files\nDESCRIPTION: Creates a source for employee handbook and uploads PDF file data\nSOURCE: https://github.com/letta-ai/letta/blob/main/examples/notebooks/Agentic RAG with Letta.ipynb#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nsource = client.sources.create(name=\"employee_handbook\")\nsource\n```\n\nLANGUAGE: python\nCODE:\n```\njob = client.sources.files.upload(\n    source_id=source.id,\n    file=\"data/handbook.pdf\"\n)\n```\n\nLANGUAGE: python\nCODE:\n```\nclient.jobs.get(job_id=job.id).metadata\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Letta Agent\nDESCRIPTION: Creates a basic Letta agent using the client and prints the agent's name.\nSOURCE: https://github.com/letta-ai/letta/blob/main/examples/tutorials/local-python-client.ipynb#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nbasic_agent = client.create_agent(\n    name=\"basic_agent\", \n)\nprint(f\"Created agent: {basic_agent.name}\")\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Letta Agent\nDESCRIPTION: Creates a simple Letta agent with default configuration.\nSOURCE: https://github.com/letta-ai/letta/blob/main/examples/tutorials/python-client.ipynb#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nbasic_agent = client.create_agent(\n    name=\"basic_agent\", \n)\nprint(f\"Created agent: {basic_agent.name}\")\n```\n\n----------------------------------------\n\nTITLE: Displaying Agent System Prompt\nDESCRIPTION: Prints the system prompt that defines the agent's behavior. This is a read-only property that establishes the core rules and framework for the agent's operation.\nSOURCE: https://github.com/letta-ai/letta/blob/main/examples/notebooks/Introduction to Letta.ipynb#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nprint(agent_state.system)\n```\n\n----------------------------------------\n\nTITLE: Creating Evaluator Agent for Candidate Assessment\nDESCRIPTION: Sets up an evaluator agent responsible for assessing candidates based on their resumes. The agent is given a persona, access to shared memory, and tools for reading resumes and submitting evaluations.\nSOURCE: https://github.com/letta-ai/letta/blob/main/examples/notebooks/Multi-agent recruiting workflow.ipynb#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nskills = \"Front-end (React, Typescript), software engineering \" \\\n+ \"(ideally Python), and experience with LLMs.\"\neval_persona = f\"You are responsible to finding good recruiting \" \\\n+ \"candidates, for the company description. \" \\\n+ f\"Ideal canddiates have skills: {skills}. \" \\\n+ \"Submit your candidate evaluation with the submit_evaluation tool. \"\n\neval_agent = client.agents.create(\n    name=\"eval_agent\", \n    memory_blocks=[\n        CreateBlock(\n            label=\"persona\",\n            value=eval_persona,\n        ),\n    ],\n    block_ids=[org_block.id],\n    tool_ids=[read_resume_tool.id, submit_evaluation_tool.id]\n    model=\"openai/gpt-4\",\n    embedding=\"openai/text-embedding-ada-002\",\n)\n```\n\n----------------------------------------\n\nTITLE: Sending Message to Agent\nDESCRIPTION: This snippet demonstrates how to send a message to the created agent and receive a response. It showcases the basic interaction with a MemGPT agent.\nSOURCE: https://github.com/letta-ai/letta/blob/main/examples/Building agents with Letta.ipynb#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nresponse = client.agents.messages.create(\n    agent_id=agent_state.id, \n    messages=[\n        MessageCreate(\n            role=\"user\", \n            content=\"hello!\", \n        ),\n    ]\n)\nresponse\n```\n\n----------------------------------------\n\nTITLE: Modifying Core Memory in Letta AI System\nDESCRIPTION: These functions allow Letta to edit its core memory, which contains essential information about its persona and the user. This enables the AI to maintain consistency and personalization in its interactions.\nSOURCE: https://github.com/letta-ai/letta/blob/main/letta/prompts/system/memgpt_gpt35_extralong.txt#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\ncore_memory_append\n```\n\nLANGUAGE: plaintext\nCODE:\n```\ncore_memory_replace\n```\n\n----------------------------------------\n\nTITLE: Creating a Letta Agent with Tool Rules in Python\nDESCRIPTION: Initializes a Letta agent with specific tool rules that constrain execution flow: archival_memory_search must run first, conversation_search must follow it, and send_message terminates execution.\nSOURCE: https://github.com/letta-ai/letta/blob/main/examples/notebooks/Visualize Tool Rules.ipynb#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nagent_state = client.agents.create(\n    memory_blocks = [\n        {\"label\": \"persona\", \"value\": \"I am a helpful agent\"}, \n        {\"label\": \"human\", \"value\": \"Name: Sarah\"}\n    ], \n    tool_rules = [\n        InitToolRule(tool_name=\"archival_memory_search\", type=\"run_first\"), \n        ChildToolRule(tool_name=\"archival_memory_search\", children=[\"conversation_search\"], type=\"constrain_child_tools\"), \n        TerminalToolRule(tool_name=\"send_message\", type=\"exit_loop\")              \n    ], \n    model=\"openai/gpt-4o-mini\", # specify the handle of the model you want to use\n    embedding=\"openai/text-embedding-3-small\" # specify the handle of the embedding model \n)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Updated Agent Persona Memory\nDESCRIPTION: Fetches and displays the specific 'persona' block from the agent's core memory, showing how the agent has updated its behavior description based on the user's feedback about emojis.\nSOURCE: https://github.com/letta-ai/letta/blob/main/examples/notebooks/Introduction to Letta.ipynb#2025-04-22_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nclient.agents.core_memory.retrieve_block(agent_id=agent_state.id, block_label='persona')\n```\n\n----------------------------------------\n\nTITLE: Implementing Candidate Database Search and Consideration Tools\nDESCRIPTION: Defines functions for searching a candidate database and submitting candidates for consideration. These functions are converted into tools that can be used by the recruiter agent to automate the candidate sourcing process.\nSOURCE: https://github.com/letta-ai/letta/blob/main/examples/notebooks/Multi-agent recruiting workflow.ipynb#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Optional\n\ndef search_candidates_db(self, page: int) -> Optional[str]: \n    \"\"\"\n    Returns 1 candidates per page. \n    Page 0 returns the first 1 candidate, \n    Page 1 returns the next 1, etc.\n    Returns `None` if no candidates remain. \n\n    Args: \n        page (int): The page number to return candidates from \n\n    Returns: \n        candidate_names (List[str]): Names of the candidates\n    \"\"\"\n    \n    names = [\"Tony Stark\", \"Spongebob Squarepants\", \"Gautam Fang\"]\n    if page >= len(names): \n        return None\n    return names[page]\n\ndef consider_candidate(self, name: str): \n    \"\"\"\n    Submit a candidate for consideration. \n\n    Args: \n        name (str): Candidate name to consider \n    \"\"\"\n    from letta_client import Letta, MessageCreate\n    client = Letta(base_url=\"http://localhost:8283\")\n    message = f\"Consider candidate {name}\" \n    print(\"Sending message to eval agent: \", message)\n    response = client.send_message(\n        agent_id=eval_agent.id,\n        role=\"user\", \n        message=message\n    ) \n\n\n# create tools \nsearch_candidate_tool = client.tools.upsert_from_function(func=search_candidates_db)\nconsider_candidate_tool = client.tools.upsert_from_function(func=consider_candidate)\n```\n\n----------------------------------------\n\nTITLE: Creating Recruiter Agent with Memory Blocks and Tools\nDESCRIPTION: Creates a recruiter agent with persona memory block, organization block access, and candidate search/consideration tools. Uses GPT-4 for processing and Ada-002 for embeddings.\nSOURCE: https://github.com/letta-ai/letta/blob/main/examples/notebooks/Multi-agent recruiting workflow.ipynb#2025-04-22_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nrecruiter_agent = client.agents.create(\n    name=\"recruiter_agent\", \n    memory_blocks=[\n        CreateBlock(\n            label=\"persona\",\n            value=\"You run a recruiting process for a company. \" \\\n            + \"Your job is to continue to pull candidates from the \" \n            + \"`search_candidates_db` tool until there are no more \" \\\n            + \"candidates left. \" \\\n            + \"For each candidate, consider the candidate by calling \"\n            + \"the `consider_candidate` tool. \" \\\n            + \"You should continue to call `search_candidates_db` \" \\\n            + \"followed by `consider_candidate` until there are no more \" \\\n            \" candidates. \",\n        ),\n    ],\n    block_ids=[org_block.id],\n    tool_ids=[search_candidate_tool.id, consider_candidate_tool.id],\n    model=\"openai/gpt-4\",\n    embedding=\"openai/text-embedding-ada-002\"\n)\n```\n\n----------------------------------------\n\nTITLE: Managing Core Memory with core_memory_append and core_memory_replace\nDESCRIPTION: These functions allow Letta AI to modify its core memory, which contains essential context about its persona and the user. These modifications help maintain consistency and personalization in conversations.\nSOURCE: https://github.com/letta-ai/letta/blob/main/letta/prompts/system/memgpt_chat_fstring.txt#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\ncore_memory_append\n```\n\nLANGUAGE: markdown\nCODE:\n```\ncore_memory_replace\n```\n\n----------------------------------------\n\nTITLE: Listing Agent's Archival Memory\nDESCRIPTION: Retrieves and displays the contents of the agent's archival memory, which is used for long-term storage of information beyond what can fit in the context window.\nSOURCE: https://github.com/letta-ai/letta/blob/main/examples/notebooks/Introduction to Letta.ipynb#2025-04-22_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nclient.agents.archival_memory.list(agent_id=agent_state.id)\n```\n\n----------------------------------------\n\nTITLE: Implementing Email Sending Tool for Outreach Agent\nDESCRIPTION: Creates a tool for sending emails to candidates. In this example, the tool simulates sending an email by printing the content. This tool will be used by the outreach agent.\nSOURCE: https://github.com/letta-ai/letta/blob/main/examples/notebooks/Multi-agent recruiting workflow.ipynb#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef email_candidate(self, content: str): \n    \"\"\"\n    Send an email\n\n    Args: \n        content (str): Content of the email \n    \"\"\"\n    print(\"Pretend to email:\", content)\n    return\n\nemail_candidate_tool = client.tools.upsert_from_function(func=email_candidate)\n```\n\n----------------------------------------\n\nTITLE: Installing Letta Python Package\nDESCRIPTION: Installs the Letta Python client package from GitHub repository.\nSOURCE: https://github.com/letta-ai/letta/blob/main/examples/tutorials/python-client.ipynb#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n!pip install git+https://github.com/cpacker/MemGPT.git@tutorials\n```\n\n----------------------------------------\n\nTITLE: Implementing Resume Reading and Candidate Evaluation Tools\nDESCRIPTION: Defines two functions: one for reading a candidate's resume and another for submitting candidate evaluations. These functions are then converted into tools that can be used by the evaluator agent.\nSOURCE: https://github.com/letta-ai/letta/blob/main/examples/notebooks/Multi-agent recruiting workflow.ipynb#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef read_resume(self, name: str): \n    \"\"\"\n    Read the resume data for a candidate given the name\n\n    Args: \n        name (str): Candidate name \n\n    Returns: \n        resume_data (str): Candidate's resume data \n    \"\"\"\n    import os\n    filepath = os.path.join(\"data\", \"resumes\", name.lower().replace(\" \", \"_\") + \".txt\")\n    return open(filepath).read()\n\ndef submit_evaluation(self, candidate_name: str, reach_out: bool, resume: str, justification: str): \n    \"\"\"\n    Submit a candidate for outreach. \n\n    Args: \n        candidate_name (str): The name of the candidate\n        reach_out (bool): Whether to reach out to the candidate\n        resume (str): The text representation of the candidate's resume \n        justification (str): Justification for reaching out or not\n    \"\"\"\n    from letta import create_client \n    client = create_client()\n    message = \"Reach out to the following candidate. \" \\\n    + f\"Name: {candidate_name}\\n\" \\\n    + f\"Resume Data: {resume}\\n\" \\\n    + f\"Justification: {justification}\"\n    # NOTE: we will define this agent later \n    if reach_out:\n        response = client.send_message(\n            agent_name=\"outreach_agent\", \n            role=\"user\", \n            message=message\n        ) \n    else: \n        print(f\"Candidate {candidate_name} is rejected: {justification}\")\n\n# TODO: add an archival andidate tool (provide justification) \n\nread_resume_tool = client.tools.upsert_from_function(func=read_resume) \nsubmit_evaluation_tool = client.tools.upsert_from_function(func=submit_evaluation)\n```\n\n----------------------------------------\n\nTITLE: Creating Agent with Custom TaskMemory\nDESCRIPTION: Creates a new agent with custom memory blocks including a task queue, and assigns the custom task manipulation tools to the agent.\nSOURCE: https://github.com/letta-ai/letta/blob/main/examples/notebooks/Customizing memory management.ipynb#2025-04-22_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ntask_agent_name = \"task_agent\"\n\n# delete agent if exists \nagents = client.agents.list(name=task_agent_name)\nif len(agents) > 0: \n    client.agents.delete(agent_id=agents[0].id)\n\ntask_agent_state = client.agents.create(\n    name=task_agent_name, \n    system = open(\"data/task_queue_system_prompt.txt\", \"r\").read(),\n    memory_blocks=[\n        CreateBlock(\n            label=\"human\",\n            value=\"My name is Sarah\",\n        ),\n        CreateBlock(\n            label=\"persona\",\n            value=\"You are an agent that must clear its tasks.\",\n        ),\n        CreateBlock(\n            label=\"tasks\",\n            value=\"[]\",\n        ),\n    ],\n    tool_ids=[push_task_tool.id, pop_task_tool.id],\n    model=\"letta/letta-free\",\n    embedding=\"letta/letta-free\",\n)\n```\n\n----------------------------------------\n\nTITLE: Sending Messages to User in Letta AI System\nDESCRIPTION: This snippet demonstrates how Letta sends visible messages to the user. It emphasizes that 'send_message' is the only function that notifies the user, and all other actions are invisible to them.\nSOURCE: https://github.com/letta-ai/letta/blob/main/letta/prompts/system/memgpt_gpt35_extralong.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nsend_message\n```\n\n----------------------------------------\n\nTITLE: Initializing Letta Client\nDESCRIPTION: Sets up the Letta client connection to the local server\nSOURCE: https://github.com/letta-ai/letta/blob/main/examples/notebooks/Agentic RAG with Letta.ipynb#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom letta_client import CreateBlock, Letta, MessageCreate\n\nclient = Letta(base_url=\"http://localhost:8283\")\n```\n\n----------------------------------------\n\nTITLE: Attaching Source to Letta Agent in Python\nDESCRIPTION: This snippet attaches the created source to a Letta agent, making the source's data available in the agent's archival memory. It then sends a query to the agent to search its archival memory.\nSOURCE: https://github.com/letta-ai/letta/blob/main/examples/tutorials/memgpt_rag_agent.ipynb#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclient.agents.sources.attach(source_id=letta_paper.id, agent_id=basic_agent.id)\n# TODO: add system message saying that file has been attached \n\nfrom pprint import pprint\n\n# TODO: do soemthing accenture related \n# TODO: brag about query rewriting -- hyde paper \nresponse = client.agents.messages.create(agent_id=basic_agent.id, messages=[\n    MessageCreate(\n        role=\"user\",\n        content=\"what is core memory? search your archival memory.\",\n    )\n])\npprint(response.messages)\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Letta Agent\nDESCRIPTION: Creates a custom Letta agent with specified persona and human information.\nSOURCE: https://github.com/letta-ai/letta/blob/main/examples/tutorials/local-python-client.ipynb#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# TODO: feel free to change the human and person to what you'd like \npersona = \\\n\"\"\"\nYou are a friendly and helpful agent!\n\"\"\"\n\nhuman = \\\n\"\"\"\nI am an Accenture consultant with many specializations. My name is Sarah.\n\"\"\"\n\ncustom_agent = client.create_agent(\n    name=\"custom_agent\", \n    human=human, \n    persona=persona\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Outreach Agent for Candidate Communication\nDESCRIPTION: Sets up an outreach agent responsible for sending personalized emails to potential candidates. The agent is given a persona, access to shared memory, and a tool for sending emails.\nSOURCE: https://github.com/letta-ai/letta/blob/main/examples/notebooks/Multi-agent recruiting workflow.ipynb#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\noutreach_persona = \"You are responsible for sending outbound emails \" \\\n+ \"on behalf of a company with the send_emails tool to \" \\\n+ \"potential candidates. \" \\\n+ \"If possible, make sure to personalize the email by appealing \" \\\n+ \"to the recipient with details about the company. \" \\\n+ \"You position is `Head Recruiter`, and you go by the name Bob, with contact info bob@gmail.com. \" \\\n+ \"\"\"\nFollow this email template: \n\nHi <candidate name>, \n\n<content> \n\nBest, \n<your name> \n<company name> \n\"\"\"\n    \noutreach_agent = client.agents.create(\n    name=\"outreach_agent\", \n    memory_blocks=[\n        CreateBlock(\n            label=\"persona\",\n            value=outreach_persona,\n        ),\n    ],\n    block_ids=[org_block.id],\n    tool_ids=[email_candidate_tool.id]\n    model=\"openai/gpt-4\",\n    embedding=\"openai/text-embedding-ada-002\",\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Shared Memory Block for Organization Description\nDESCRIPTION: Creates a shared memory block containing the organization's description. This block will be accessible to all agents in the workflow, allowing them to have consistent information about the company.\nSOURCE: https://github.com/letta-ai/letta/blob/main/examples/notebooks/Multi-agent recruiting workflow.ipynb#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\norg_description = \"The company is called AgentOS \" \\\n+ \"and is building AI tools to make it easier to create \" \\\n+ \"and deploy LLM agents.\"\n\norg_block = client.blocks.create(\n    label=\"company\",\n    value=org_description,\n)\n```\n\n----------------------------------------\n\nTITLE: Compiling Memory into Context Window\nDESCRIPTION: Compiles the memory blocks into a format that can be included in the LLM's context window.\nSOURCE: https://github.com/letta-ai/letta/blob/main/examples/notebooks/Customizing memory management.ipynb#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nchat_memory.compile()\n```\n\n----------------------------------------\n\nTITLE: Manually Adding Entry to Agent's Archival Memory\nDESCRIPTION: Directly adds a new entry to the agent's archival memory from the client side, demonstrating how developers can programmatically add information to the agent's long-term storage.\nSOURCE: https://github.com/letta-ai/letta/blob/main/examples/notebooks/Introduction to Letta.ipynb#2025-04-22_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nclient.agents.archival_memory.create(\n    agent_id=agent_state.id,\n    text=\"Bob's loves boston terriers\",\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Memory Blocks\nDESCRIPTION: Creates memory blocks for storing human information and persona definition. These blocks reserve sections of the LLM's context window with specific labels and values.\nSOURCE: https://github.com/letta-ai/letta/blob/main/examples/notebooks/Customizing memory management.ipynb#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nhuman_memory_block = client.blocks.create(\n    label=\"human\",\n    value=\"Name: Bob\",\n)\npersona_memory_block = client.blocks.create(\n    label=\"persona\",\n    value=\"You are a helpful assistant\",\n)\n```\n\n----------------------------------------\n\nTITLE: Querying Agent's Archival Memory\nDESCRIPTION: This snippet shows how to query the agent about information stored in its archival memory, demonstrating the agent's ability to recall and use stored information.\nSOURCE: https://github.com/letta-ai/letta/blob/main/examples/Building agents with Letta.ipynb#2025-04-22_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nresponse = client.agents.messages.create(\n    agent_id=agent_state.id, \n    messages=[\n        MessageCreate(\n            role=\"user\", \n            content=\"What animals do I like? Search archival.\", \n        ),\n    ]\n)\nresponse\n```\n\n----------------------------------------\n\nTITLE: Searching Conversation History in Letta AI System\nDESCRIPTION: This code snippet shows how Letta can search through its entire message history stored in a database. This 'recall memory' function allows the AI to remember prior engagements with a user.\nSOURCE: https://github.com/letta-ai/letta/blob/main/letta/prompts/system/memgpt_gpt35_extralong.txt#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nconversation_search\n```\n\n----------------------------------------\n\nTITLE: Filtering Memory Blocks by Label\nDESCRIPTION: Retrieves memory blocks with a specific label, in this case 'human'.\nSOURCE: https://github.com/letta-ai/letta/blob/main/examples/notebooks/Customizing memory management.ipynb#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclient.blocks.list(label=\"human\")\n```\n\n----------------------------------------\n\nTITLE: Testing Agent's Use of Archival Memory for Information Retrieval\nDESCRIPTION: Sends a message asking the agent about the user's animal preferences, instructing it to search its archival memory. This demonstrates how agents use their archival storage to answer questions about previously stored information.\nSOURCE: https://github.com/letta-ai/letta/blob/main/examples/notebooks/Introduction to Letta.ipynb#2025-04-22_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nresponse = client.agents.messages.create(\n    agent_id=agent_state.id, \n    messages=[\n        MessageCreate(\n            role=\"user\",\n            content=\"What animals do I like? Search archival.\",\n        )\n    ],\n)\nresponse\n```\n\n----------------------------------------\n\nTITLE: Managing Archival Memory with archival_memory_insert and archival_memory_search\nDESCRIPTION: These functions allow Letta AI to write to and search its infinite archival memory. This storage space is used for reflections, insights, and other data that doesn't fit into core memory but is important to preserve.\nSOURCE: https://github.com/letta-ai/letta/blob/main/letta/prompts/system/memgpt_chat_fstring.txt#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\narchival_memory_insert\n```\n\nLANGUAGE: markdown\nCODE:\n```\narchival_memory_search\n```\n\n----------------------------------------\n\nTITLE: Updating User Information in Agent Memory\nDESCRIPTION: Sends a message to the agent with updated information about the user's name, demonstrating how the agent can adapt its memory to new information about the human in the conversation.\nSOURCE: https://github.com/letta-ai/letta/blob/main/examples/notebooks/Introduction to Letta.ipynb#2025-04-22_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nresponse = client.agents.messages.create(\n    agent_id=agent_state.id, \n    messages=[\n        MessageCreate(\n            role=\"user\",\n            content=\"My name is actually Bob\",\n        )\n    ],\n)\nresponse\n```\n\n----------------------------------------\n\nTITLE: Inserting Archival Memory Directly\nDESCRIPTION: This code demonstrates how to directly insert information into the agent's archival memory from the client side.\nSOURCE: https://github.com/letta-ai/letta/blob/main/examples/Building agents with Letta.ipynb#2025-04-22_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nclient.agents.archival_memory.create(\n    agent_id=agent_state.id, \n    text=\"Bob's loves boston terriers\"\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Letta Admin Client in Python\nDESCRIPTION: This code snippet imports the Admin class from the Letta library and initializes an admin client with a base URL and token. It sets up the necessary configuration for interacting with the Letta admin API.\nSOURCE: https://github.com/letta-ai/letta/blob/main/examples/tutorials/memgpt-admin-client.ipynb#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom letta import Admin \n\nbase_url=\"letta.localhost\"\ntoken=\"lettaadmin\" \n\nadmin_client = Admin(base_url=base_url, token=\"lettaadmin\")\n```\n\n----------------------------------------\n\nTITLE: Importing Memory Editing Function\nDESCRIPTION: Imports the core_memory_append function which is used for editing memory blocks.\nSOURCE: https://github.com/letta-ai/letta/blob/main/examples/notebooks/Customizing memory management.ipynb#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport inspect\nfrom letta.functions.function_sets.base import core_memory_append\n```\n\n----------------------------------------\n\nTITLE: Managing Archival Memory in Letta AI System\nDESCRIPTION: These functions allow Letta to interact with its infinite-size archival memory. This storage is used for reflections, insights, and other important data that doesn't fit into core memory but needs to be preserved.\nSOURCE: https://github.com/letta-ai/letta/blob/main/letta/prompts/system/memgpt_gpt35_extralong.txt#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\narchival_memory_insert\n```\n\nLANGUAGE: plaintext\nCODE:\n```\narchival_memory_search\n```\n\n----------------------------------------\n\nTITLE: Initializing Letta Client for Multi-agent Recruiting Workflow\nDESCRIPTION: Sets up a Letta client to interact with the Letta server for the multi-agent recruiting workflow. This client will be used to create and manage agents, tools, and memory blocks.\nSOURCE: https://github.com/letta-ai/letta/blob/main/examples/notebooks/Multi-agent recruiting workflow.ipynb#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom letta_client import CreateBlock, Letta, MessageCreate\n\nclient = Letta(base_url=\"http://localhost:8283\")\n```\n\n----------------------------------------\n\nTITLE: Running Letta Server with Docker and API Key\nDESCRIPTION: Command to run the Letta server using Docker with a mounted volume for persisting agent data and an OpenAI API key for accessing LLM backends.\nSOURCE: https://github.com/letta-ai/letta/blob/main/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# replace `~/.letta/.persist/pgdata` with wherever you want to store your agent data\ndocker run \\\n  -v ~/.letta/.persist/pgdata:/var/lib/postgresql/data \\\n  -p 8283:8283 \\\n  -e OPENAI_API_KEY=\"your_openai_api_key\" \\\n  letta/letta:latest\n```\n\n----------------------------------------\n\nTITLE: Updating Agent's Memory\nDESCRIPTION: Sends a message to update the agent's information and prints the response.\nSOURCE: https://github.com/letta-ai/letta/blob/main/examples/tutorials/local-python-client.ipynb#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nresponse = client.user_message(agent_id=custom_agent.id, message=\"Actually, my name is Charles\") \npprint(response.messages)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Agent System Prompt\nDESCRIPTION: This code prints the system prompt of the agent, which defines its behavior and is read-only.\nSOURCE: https://github.com/letta-ai/letta/blob/main/examples/Building agents with Letta.ipynb#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nprint(agent_state.system)\n```\n\n----------------------------------------\n\nTITLE: Listing Archival Memories\nDESCRIPTION: This snippet lists all archival memories stored by the agent, demonstrating long-term information storage.\nSOURCE: https://github.com/letta-ai/letta/blob/main/examples/Building agents with Letta.ipynb#2025-04-22_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nclient.agents.archival_memory.list(agent_id=agent_state.id)\n```\n\n----------------------------------------\n\nTITLE: Sending Evaluation Request to Evaluator Agent\nDESCRIPTION: Demonstrates how to send a message to the evaluator agent, requesting the evaluation of a specific candidate. This snippet shows the interaction between the user and the agent system.\nSOURCE: https://github.com/letta-ai/letta/blob/main/examples/notebooks/Multi-agent recruiting workflow.ipynb#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nresponse = client.agents.messages.send(\n    agent_id=eval_agent.id,\n    messages=[\n        MessageCreate(\n            role=\"user\",\n            content=\"Candidate: Tony Stark\",\n        )\n    ],\n)\n```\n\n----------------------------------------\n\nTITLE: Instructing Agent to Save Information to Archival Memory\nDESCRIPTION: This code instructs the agent to save specific information to its archival memory, showing how agents can be directed to store long-term data.\nSOURCE: https://github.com/letta-ai/letta/blob/main/examples/Building agents with Letta.ipynb#2025-04-22_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nresponse = client.agents.messages.create(\n    agent_id=agent_state.id, \n    messages=[\n        MessageCreate(\n            role=\"user\", \n            content=\"Save the information that 'bob loves cats' to archival\", \n        ),\n    ]\n)\nresponse\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Task Queue Functions\nDESCRIPTION: Implements custom memory editing tools for a task queue, including functions to push and pop tasks from a queue stored in memory.\nSOURCE: https://github.com/letta-ai/letta/blob/main/examples/notebooks/Customizing memory management.ipynb#2025-04-22_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Optional, List, TYPE_CHECKING\nimport json\n\nif TYPE_CHECKING:\n    from letta import AgentState\n\ndef task_queue_push(agent_state: \"AgentState\", task_description: str):\n    \"\"\"\n    Push to a task queue stored in core memory. \n\n    Args:\n        task_description (str): A description of the next task you must accomplish. \n        \n    Returns:\n        Optional[str]: None is always returned as this function \n        does not produce a response.\n    \"\"\"\n    import json\n    tasks = json.loads(agent_state.memory.get_block(\"tasks\").value)\n    tasks.append(task_description)\n    agent_state.memory.update_block_value(\"tasks\", json.dumps(tasks))\n    return None\n\ndef task_queue_pop(agent_state: \"AgentState\"):\n    \"\"\"\n    Get the next task from the task queue \n\n    Returns:\n        Optional[str]: The description of the task popped from the \n        queue, if there are still tasks in queue. Otherwise, returns\n        None (the task queue is empty)\n    \"\"\"\n    import json\n    tasks = json.loads(agent_state.memory.get_block(\"tasks\").value)\n    if len(tasks) == 0: \n        return None\n    task = tasks[0]\n    print(\"CURRENT TASKS: \", tasks)\n    agent_state.memory.update_block_value(\"tasks\", json.dumps(tasks[1:]))\n    return task\n\npush_task_tool = client.tools.upsert_from_function(func=task_queue_push)\npop_task_tool = client.tools.upsert_from_function(func=task_queue_pop)\n```\n\n----------------------------------------\n\nTITLE: Creating User with Letta Admin Client in Python\nDESCRIPTION: This code snippet uses the previously initialized admin_client to create a new user in the Letta system. It demonstrates how to use the create_user method of the Admin client.\nSOURCE: https://github.com/letta-ai/letta/blob/main/examples/tutorials/memgpt-admin-client.ipynb#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nuser = admin_client.create_user()\n```\n\n----------------------------------------\n\nTITLE: Retrieving Updated Core Memory\nDESCRIPTION: This code retrieves the updated core memory after the agent has processed new information about the human.\nSOURCE: https://github.com/letta-ai/letta/blob/main/examples/Building agents with Letta.ipynb#2025-04-22_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nclient.agents.core_memory.retrieve(agent_id=agent_state.id)\n```\n\n----------------------------------------\n\nTITLE: Listing Available Tools\nDESCRIPTION: Lists all available tools that can be added to a Letta agent.\nSOURCE: https://github.com/letta-ai/letta/blob/main/examples/tutorials/python-client.ipynb#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ntools = client.list_tools().tools\nfor tool in tools: \n    print(f\"Tool: {tool.name} - {tool.json_schema['description']}\")\n```\n\n----------------------------------------\n\nTITLE: Providing Feedback to Agents for Behavioral Modification\nDESCRIPTION: Shows how to send feedback to agents to modify their future behavior. This example updates the evaluator agent with new information about the company's focus and name change.\nSOURCE: https://github.com/letta-ai/letta/blob/main/examples/notebooks/Multi-agent recruiting workflow.ipynb#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfeedback = \"Our company pivoted to foundation model training\"\nresponse = client.agents.messages.send(\n    agent_id=eval_agent.id,\n    messages=[\n        MessageCreate(\n            role=\"user\",\n            content=feedback,\n        )\n    ],\n)\n```\n\nLANGUAGE: python\nCODE:\n```\nfeedback = \"The company is also renamed to FoundationAI\"\nresponse = client.agents.messages.send(\n    agent_id=eval_agent.id,\n    messages=[\n        MessageCreate(\n            role=\"user\",\n            content=feedback,\n        )\n    ],\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Letta Python Client\nDESCRIPTION: Installs the Letta Python Client from a GitHub repository using pip.\nSOURCE: https://github.com/letta-ai/letta/blob/main/examples/tutorials/local-python-client.ipynb#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n!pip install git+https://github.com/cpacker/MemGPT.git@tutorials\n```\n\n----------------------------------------\n\nTITLE: Importing Tool Rule Classes from Letta Client in Python\nDESCRIPTION: Imports the necessary classes from letta_client to create different types of tool rules for Letta agents.\nSOURCE: https://github.com/letta-ai/letta/blob/main/examples/notebooks/Visualize Tool Rules.ipynb#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom letta_client import Letta, TerminalToolRule, ConditionalToolRule, InitToolRule, ChildToolRule\n```\n\n----------------------------------------\n\nTITLE: Uploading File to Letta Source in Python\nDESCRIPTION: This snippet uploads the previously downloaded PDF file to the created Letta source. It returns a job object that can be used to check the upload status.\nSOURCE: https://github.com/letta-ai/letta/blob/main/examples/tutorials/memgpt_rag_agent.ipynb#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\njob = client.sources.files.upload(filename=filename, source_id=letta_paper.id)\njob\n```\n\n----------------------------------------\n\nTITLE: Viewing First Entry in Archival Memory\nDESCRIPTION: Retrieves and displays the text content of the first entry in the agent's archival memory, showing the information that was stored about Bob's preference for cats.\nSOURCE: https://github.com/letta-ai/letta/blob/main/examples/notebooks/Introduction to Letta.ipynb#2025-04-22_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nclient.agents.archival_memory.list(agent_id=agent_state.id)[0].text\n```\n\n----------------------------------------\n\nTITLE: Retrieving Updated Persona Memory\nDESCRIPTION: This code retrieves the updated persona memory block, showing how the agent has incorporated the new instruction.\nSOURCE: https://github.com/letta-ai/letta/blob/main/examples/Building agents with Letta.ipynb#2025-04-22_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nclient.agents.core_memory.retrieve_block(agent_id=agent_state.id, block_label='persona')\n```\n\n----------------------------------------\n\nTITLE: Listing Agent Messages History\nDESCRIPTION: Retrieves and displays the full conversation history between the user and the agent, showing all messages exchanged in their chronological order.\nSOURCE: https://github.com/letta-ai/letta/blob/main/examples/notebooks/Introduction to Letta.ipynb#2025-04-22_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nclient.agents.messages.list(agent_id=agent_state.id)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Agent Core Memory\nDESCRIPTION: This code retrieves the core memory of the agent, which is stored in-context and included in every LLM call.\nSOURCE: https://github.com/letta-ai/letta/blob/main/examples/Building agents with Letta.ipynb#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nmemory = client.agents.core_memory.retrieve(agent_id=agent_state.id)\n```\n\n----------------------------------------\n\nTITLE: Installing Letta using pip\nDESCRIPTION: Command to install or upgrade Letta using pip package manager. This installs Letta with SQLite as the default database backend.\nSOURCE: https://github.com/letta-ai/letta/blob/main/README.md#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\npip install -U letta\n```\n\n----------------------------------------\n\nTITLE: Updating Agent's Persona\nDESCRIPTION: This snippet shows how to update the agent's persona by giving it a new instruction about communication style.\nSOURCE: https://github.com/letta-ai/letta/blob/main/examples/Building agents with Letta.ipynb#2025-04-22_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nresponse = client.agents.messages.create(\n    agent_id=agent_state.id,\n    messages=[\n        MessageCreate(\n            role=\"user\", \n            content=\"In the future, never use emojis to communicate\", \n        ),\n    ]\n)\nresponse\n```\n\n----------------------------------------\n\nTITLE: Sending Message to Recruiter Agent\nDESCRIPTION: Sends a system message to the recruiter agent to initiate the generation process. Uses the agent's ID to direct the message.\nSOURCE: https://github.com/letta-ai/letta/blob/main/examples/notebooks/Multi-agent recruiting workflow.ipynb#2025-04-22_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nresponse = client.agents.messages.send(\n    agent_id=recruiter_agent.id,\n    messages=[\n        MessageCreate(\n            role=\"system\",\n            content=\"Run generation\",\n        )\n    ],\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Letta Source in Python\nDESCRIPTION: This snippet creates a Letta source using the client API. The source is named 'letta_paper' and will be used to store the downloaded PDF file.\nSOURCE: https://github.com/letta-ai/letta/blob/main/examples/tutorials/memgpt_rag_agent.ipynb#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nletta_paper = client.sources.create(\n    name=\"letta_paper\", \n)\n```\n\n----------------------------------------\n\nTITLE: Using the send_message Function for User Communication in Letta AI\nDESCRIPTION: This function is used by the Letta AI to send visible messages to the user. It's the only action that sends notifications to the user, making it the primary communication channel.\nSOURCE: https://github.com/letta-ai/letta/blob/main/letta/prompts/system/memgpt_chat_fstring.txt#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nsend_message\n```\n\n----------------------------------------\n\nTITLE: Visualizing Agent Tool Rules as a Graph in Python\nDESCRIPTION: Calls the visualization function to generate and display a graph of the tool rules for the Letta agent.\nSOURCE: https://github.com/letta-ai/letta/blob/main/examples/notebooks/Visualize Tool Rules.ipynb#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ncreate_tool_sequence_graph(agent_state)\n```\n\n----------------------------------------\n\nTITLE: Checking Agent Response\nDESCRIPTION: Simple response check to view the output from the recruiter agent's message processing.\nSOURCE: https://github.com/letta-ai/letta/blob/main/examples/notebooks/Multi-agent recruiting workflow.ipynb#2025-04-22_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nresponse\n```\n\n----------------------------------------\n\nTITLE: Updating Agent Persona Based on User Feedback\nDESCRIPTION: Sends a message to the agent with instructions to modify its behavior (stop using emojis), demonstrating how the agent can update its persona based on user feedback and preferences.\nSOURCE: https://github.com/letta-ai/letta/blob/main/examples/notebooks/Introduction to Letta.ipynb#2025-04-22_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nresponse = client.agents.messages.create(\n    agent_id=agent_state.id, \n    messages=[\n        MessageCreate(\n            role=\"user\",\n            content=\"In the future, never use emojis to communicate\",\n        )\n    ],\n)\nresponse\n```\n\n----------------------------------------\n\nTITLE: Creating Tool Sequence Visualization Function in Python\nDESCRIPTION: Defines a function to visualize tool rules as a directed graph using NetworkX and Matplotlib, showing possible tool execution paths based on the defined rules.\nSOURCE: https://github.com/letta-ai/letta/blob/main/examples/notebooks/Visualize Tool Rules.ipynb#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport networkx as nx\nimport matplotlib.pyplot as plt\n\ndef create_tool_sequence_graph(agent_state):\n    \"\"\"\n    Create a directed graph showing possible tool execution sequences based on given rules.\n    \n    Args:\n        agent_state: Agent state object containing tools and rules\n    \"\"\"\n    # Create directed graph\n    G = nx.DiGraph()\n    \n    # Add start and end nodes\n    G.add_node(\"START\")\n    G.add_node(\"END\")\n    \n    # Add all tools as nodes\n    for tool in agent_state.tools:\n        G.add_node(tool.name)\n    \n    # Process rules\n    start_tool = None\n    exit_tools = set()\n    constraints = {}\n    \n    # First pass: categorize rules\n    for rule in agent_state.tool_rules:\n        if rule.type == \"run_first\":\n            start_tool = rule.tool_name\n        elif rule.type == \"exit_loop\":\n            exit_tools.add(rule.tool_name)\n        elif rule.type == \"constrain_child_tools\":\n            constraints[rule.tool_name] = rule.children\n            \n    # If no start tool specified, connect START to all tools\n    if start_tool is None:\n        for tool in agent_state.tools:\n            G.add_edge(\"START\", tool.name)\n    else:\n        G.add_edge(\"START\", start_tool)\n    \n    # Add edges between tools based on rules\n    for source in agent_state.tools:\n        source_name = source.name\n        if source_name in exit_tools:\n            # Connect exit tools to END node\n            G.add_edge(source_name, \"END\")\n            continue\n            \n        if source_name in constraints:\n            # Only add edges to constrained children\n            for child in constraints[source_name]:\n                G.add_edge(source_name, child)\n        else:\n            # Add edges to all tools except those that must come first\n            G.add_edge(source_name,  \"END\")\n            for target in agent_state.tools:\n                target_name = target.name\n                if start_tool and target_name == start_tool:\n                    continue\n                G.add_edge(source_name, target_name)\n    \n    \n    # Create hierarchical layout\n    pos = nx.kamada_kawai_layout(G)\n    #pos = nx.nx_agraph.graphviz_layout(G, prog=\"dot\")\n    # Place START on the far left\n    #pos[\"START\"] = (-1, 0)\n    \n    # Place END on the far right\n    #pos[\"END\"] = (1, 0)\n    \n    # Create figure\n    plt.figure(figsize=(15, 10))\n    \n    # Draw nodes with different colors and sizes\n    node_colors = {\n        'START': 'lightgreen',\n        'END': 'lightcoral',\n        'default': 'lightblue'\n    }\n    \n    # Draw regular nodes\n    tool_nodes = list(set(G.nodes()) - {'START', 'END'})\n    nx.draw_networkx_nodes(G, pos, nodelist=tool_nodes, \n                          node_color=node_colors['default'], \n                          node_size=3000, \n                          node_shape='o')\n    \n    # Draw START node\n    nx.draw_networkx_nodes(G, pos, nodelist=['START'], \n                          node_color=node_colors['START'], \n                          node_size=3000, \n                          node_shape='o')\n    \n    # Draw END node\n    nx.draw_networkx_nodes(G, pos, nodelist=['END'], \n                          node_color=node_colors['END'], \n                          node_size=3000, \n                          node_shape='o')\n    \n    # Draw edges with arrows\n    nx.draw_networkx_edges(G, pos, \n                          edge_color='gray', \n                          arrows=True, \n                          arrowsize=10, \n                          #arrowstyle='->', \n                          width=2, node_size=3000)\n    \n    # Add labels with custom font\n    nx.draw_networkx_labels(G, pos, \n                           font_size=10, \n                           font_weight='bold', \n                           font_family='sans-serif')\n    \n    \n    plt.axis('off')\n    return G, plt\n```\n\n----------------------------------------\n\nTITLE: Requesting Task Completion\nDESCRIPTION: Prompts the agent to complete the tasks in its queue.\nSOURCE: https://github.com/letta-ai/letta/blob/main/examples/notebooks/Customizing memory management.ipynb#2025-04-22_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nresponse = client.agents.messages.create(\n    agent_id=task_agent_state.id, \n    messages=[\n        MessageCreate(\n            role=\"user\",\n            content=\"complete your tasks\",\n        )\n    ],\n)\nresponse\n```\n\n----------------------------------------\n\nTITLE: Creating Agent Messages in Letta\nDESCRIPTION: Sends a message to the agent and creates an interaction, which will follow the tool rules defined earlier.\nSOURCE: https://github.com/letta-ai/letta/blob/main/examples/notebooks/Visualize Tool Rules.ipynb#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nresponse = client.agents.messages.create(\n    agent_id=agent_state.id,\n    messages=[\n        {\"role\": \"user\", \"content\": \"hello\"} \n    ],\n)\n```\n\n----------------------------------------\n\nTITLE: Prompting Agent to Store Information in Archival Memory\nDESCRIPTION: Sends a message instructing the agent to save specific information about the user to its archival memory, demonstrating how users can directly influence what the agent stores long-term.\nSOURCE: https://github.com/letta-ai/letta/blob/main/examples/notebooks/Introduction to Letta.ipynb#2025-04-22_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nresponse = client.agents.messages.create(\n    agent_id=agent_state.id, \n    messages=[\n        MessageCreate(\n            role=\"user\",\n            content=\"Save the information that 'bob loves cats' to archival\",\n        )\n    ],\n)\nresponse\n```\n\n----------------------------------------\n\nTITLE: Viewing Updated Agent Memory\nDESCRIPTION: Retrieves and prints the agent's updated core memory about the human after the correction.\nSOURCE: https://github.com/letta-ai/letta/blob/main/examples/tutorials/local-python-client.ipynb#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nprint(client.get_agent_memory(agent_id=custom_agent.id)[\"core_memory\"][\"human\"])\n```\n\n----------------------------------------\n\nTITLE: Viewing Agent's Core Memory\nDESCRIPTION: Retrieves and prints the agent's core memory about the human.\nSOURCE: https://github.com/letta-ai/letta/blob/main/examples/tutorials/local-python-client.ipynb#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nprint(client.get_agent_memory(agent_id=custom_agent.id)[\"core_memory\"][\"human\"])\n```\n\n----------------------------------------\n\nTITLE: Using send_offline_message Function\nDESCRIPTION: Demonstrates the usage of send_offline_message function for sending visible messages to users. This is the only function that creates user notifications.\nSOURCE: https://github.com/letta-ai/letta/blob/main/letta/prompts/system/memgpt_convo_only.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nsend_offline_message\n```\n\n----------------------------------------\n\nTITLE: Examining Tool Rules in Python\nDESCRIPTION: Displays the current tool rules configured for the agent. This snippet helps verify the rules were properly set.\nSOURCE: https://github.com/letta-ai/letta/blob/main/examples/notebooks/Visualize Tool Rules.ipynb#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nagent_state.tool_rules\n```\n\n----------------------------------------\n\nTITLE: Updating Agent's Human Memory\nDESCRIPTION: This snippet demonstrates how to update the agent's memory about the human it's interacting with, showcasing the agent's ability to adapt its knowledge.\nSOURCE: https://github.com/letta-ai/letta/blob/main/examples/Building agents with Letta.ipynb#2025-04-22_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nresponse = client.agents.messages.create(\n    agent_id=agent_state.id, \n    messages=[\n        MessageCreate(\n            role=\"user\", \n            content=\"My name is actually Bob\", \n        ),\n    ]\n)\nresponse\n```\n\n----------------------------------------\n\nTITLE: Implementing a Resend Email Sending Tool in Python\nDESCRIPTION: A Python function that creates a custom tool to send emails using the Resend API. It requires a Resend API key and a target email address, and uses the requests library to make API calls.\nSOURCE: https://github.com/letta-ai/letta/blob/main/examples/resend_example/README.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport requests\nimport json\n\n\nRESEND_API_KEY = \"YOUR_RESEND_API_KEY\"\nRESEND_TARGET_EMAIL_ADDRESS = \"YOUR_EMAIL_ADDRESS\"\n\ndef send_email(self, description: str):\n    \"\"\"\n    Sends an email to a predefined user. The email contains a message, which is defined by the description parameter.\n\n    Args:\n        description (str): Email contents. All unicode (including emojis) are supported.\n\n    Returns:\n        None\n\n    Example:\n        >>> send_email(\"hello\")\n        # Output: None. This will send an email to the you are talking to with the message \"hello\".\n    \"\"\"\n    url = \"https://api.resend.com/emails\"\n    headers = {\"Authorization\": f\"Bearer {RESEND_API_KEY}\", \"Content-Type\": \"application/json\"}\n    data = {\n        \"from\": \"onboarding@resend.dev\",\n        \"to\": RESEND_TARGET_EMAIL_ADDRESS,\n        \"subject\": \"Letta message:\",\n        \"html\": f\"<strong>{description}</strong>\",\n    }\n\n    try:\n        response = requests.post(url, headers=headers, data=json.dumps(data))\n        print(response.text)\n    except requests.HTTPError as e:\n        raise Exception(f\"send_email failed with an HTTP error: {str(e)}\")\n    except Exception as e:\n        raise Exception(f\"send_email failed with an error: {str(e)}\")\n\n```\n\n----------------------------------------\n\nTITLE: Adding Tasks to the Task Queue\nDESCRIPTION: Sends a message to the agent requesting it to add two specific tasks to its task queue.\nSOURCE: https://github.com/letta-ai/letta/blob/main/examples/notebooks/Customizing memory management.ipynb#2025-04-22_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nresponse = client.agents.messages.create(\n    agent_id=task_agent_state.id, \n    messages=[\n        MessageCreate(\n            role=\"user\",\n            content=\"Add 'start calling me Charles' and 'tell me a haiku about my name' as two separate tasks.\",\n        )\n    ],\n)\nresponse\n```\n\n----------------------------------------\n\nTITLE: Retrieving Agent Tools\nDESCRIPTION: Displays the set of tools that the agent has access to. These tools define the capabilities and actions the agent can take when responding to user inputs.\nSOURCE: https://github.com/letta-ai/letta/blob/main/examples/notebooks/Introduction to Letta.ipynb#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nagent_state.tools\n```\n\n----------------------------------------\n\nTITLE: Retrieving Recall Memory Count\nDESCRIPTION: This snippet retrieves the number of recall memories stored by the agent.\nSOURCE: https://github.com/letta-ai/letta/blob/main/examples/Building agents with Letta.ipynb#2025-04-22_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nclient.agents.context.retrieve(agent_id=agent_state.id)[\"num_recall_memory\"]\n```\n\n----------------------------------------\n\nTITLE: Sending an Initial Message to the Letta Agent\nDESCRIPTION: Sends a message to the created Letta agent and captures the response. The agent uses its configured memory blocks to determine how to respond appropriately to the user greeting.\nSOURCE: https://github.com/letta-ai/letta/blob/main/examples/notebooks/Introduction to Letta.ipynb#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nresponse = client.agents.messages.create(\n    agent_id=agent_state.id, \n    messages=[\n        MessageCreate(\n            role=\"user\",\n            content=\"hello!\",\n        )\n    ],\n)\nresponse\n```\n\n----------------------------------------\n\nTITLE: Checking Updated Core Memory\nDESCRIPTION: Retrieves and displays the agent's core memory after the user provided updated information, showing how the agent has incorporated this new information into its memory.\nSOURCE: https://github.com/letta-ai/letta/blob/main/examples/notebooks/Introduction to Letta.ipynb#2025-04-22_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nclient.agents.core_memory.retrieve(agent_id=agent_state.id)\n```\n\n----------------------------------------\n\nTITLE: Retrieving First Archival Memory\nDESCRIPTION: This snippet retrieves the text of the first archival memory stored by the agent.\nSOURCE: https://github.com/letta-ai/letta/blob/main/examples/Building agents with Letta.ipynb#2025-04-22_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nclient.agents.archival_memory.list(agent_id=agent_state.id)[0].text\n```\n\n----------------------------------------\n\nTITLE: Retrieving Archival Memory Count\nDESCRIPTION: This code retrieves the number of archival memories stored by the agent.\nSOURCE: https://github.com/letta-ai/letta/blob/main/examples/Building agents with Letta.ipynb#2025-04-22_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nclient.agents.context.retrieve(agent_id=agent_state.id)[\"num_archival_memory\"]\n```\n\n----------------------------------------\n\nTITLE: Setting Ollama base URL environment variable\nDESCRIPTION: Command to set the Ollama base URL as an environment variable. This configures Letta to use a local Ollama instance for language model inference.\nSOURCE: https://github.com/letta-ai/letta/blob/main/README.md#2025-04-22_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nexport OLLAMA_BASE_URL=http://localhost:11434\n```\n\n----------------------------------------\n\nTITLE: Checking Task Queue State\nDESCRIPTION: Retrieves the current state of the tasks memory block to see what tasks remain in the queue.\nSOURCE: https://github.com/letta-ai/letta/blob/main/examples/notebooks/Customizing memory management.ipynb#2025-04-22_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nclient.agents.core_memory.retrieve_block(agent_id=task_agent_state.id, block_label=\"tasks\")\n```\n\n----------------------------------------\n\nTITLE: Searching Conversation History with conversation_search in Letta AI\nDESCRIPTION: This function allows the AI to search through its entire message history database, enabling it to recall past interactions with users beyond what's available in its immediate context window.\nSOURCE: https://github.com/letta-ai/letta/blob/main/letta/prompts/system/memgpt_chat_fstring.txt#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nconversation_search\n```\n\n----------------------------------------\n\nTITLE: Getting Memory Prompt Template\nDESCRIPTION: Retrieves the prompt template used by the chat memory.\nSOURCE: https://github.com/letta-ai/letta/blob/main/examples/notebooks/Customizing memory management.ipynb#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nchat_memory.get_prompt_template()\n```\n\n----------------------------------------\n\nTITLE: Memory Management Functions\nDESCRIPTION: Functions for managing different types of memory including core, archival, and recall memory operations.\nSOURCE: https://github.com/letta-ai/letta/blob/main/examples/notebooks/data/shared_memory_system_prompt.txt#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nconversation_search()\ncore_memory_append()\ncore_memory_replace()\narchival_memory_insert()\narchival_memory_search()\n```\n\n----------------------------------------\n\nTITLE: Managing Tasks with Task Queue Functions\nDESCRIPTION: Core task management functions for handling the task queue, including popping tasks and requesting heartbeats.\nSOURCE: https://github.com/letta-ai/letta/blob/main/examples/notebooks/data/shared_memory_system_prompt.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ntask_queue_pop()\ntask_queue_push()\n```\n\n----------------------------------------\n\nTITLE: Retrieving Agent Tools\nDESCRIPTION: This snippet retrieves and displays the set of tools the agent has access to.\nSOURCE: https://github.com/letta-ai/letta/blob/main/examples/Building agents with Letta.ipynb#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nagent_state.tools\n```\n\n----------------------------------------\n\nTITLE: Integrating Langchain Search Tool\nDESCRIPTION: Demonstrates integration of Tavily search tool from Langchain\nSOURCE: https://github.com/letta-ai/letta/blob/main/examples/notebooks/Agentic RAG with Letta.ipynb#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom langchain_community.tools import TavilySearchResults\n\nsearch = TavilySearchResults()\nsearch.run(\"What's Obama's first name?\")\n```\n\nLANGUAGE: python\nCODE:\n```\nsearch_tool = client.tools.add_langchain_tool( \n    TavilySearchResults(), \n    additional_imports_module_attr_map={\"langchain_community.tools\": \"TavilySearchResults\", \"langchain_community.tools\": 'TavilySearchAPIWrapper'}\n)\n```\n\n----------------------------------------\n\nTITLE: Calling rethink_memory Function for Memory Reorganization\nDESCRIPTION: This snippet demonstrates how to use the `rethink_memory` function to reorganize and consolidate memories. It should be called at every step of the process, integrating information from different memory blocks.\nSOURCE: https://github.com/letta-ai/letta/blob/main/letta/prompts/system/memgpt_offline_memory.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nrethink_memory\n```\n\n----------------------------------------\n\nTITLE: Checking Recall Memory Count\nDESCRIPTION: Retrieves and displays the number of recall memory entries the agent has stored, which represents memories that have been recalled from archival storage for use in the current context.\nSOURCE: https://github.com/letta-ai/letta/blob/main/examples/notebooks/Introduction to Letta.ipynb#2025-04-22_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nclient.agents.context.retrieve(agent_id=agent_state.id)[\"num_recall_memory\"]\n```\n\n----------------------------------------\n\nTITLE: Downloading PDF File in Python\nDESCRIPTION: This snippet downloads the Letta paper PDF file from arXiv and saves it locally. It uses the requests library to fetch the file content.\nSOURCE: https://github.com/letta-ai/letta/blob/main/examples/tutorials/memgpt_rag_agent.ipynb#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport requests\n\nurl = \"https://arxiv.org/pdf/2310.08560\"\nresponse = requests.get(url)\nfilename = \"letta_paper.pdf\"\n\nwith open(filename, 'wb') as f:\n    f.write(response.content)\n```\n\n----------------------------------------\n\nTITLE: Finalizing Memory Reorganization Process\nDESCRIPTION: This snippet shows how to finalize the memory reorganization process using the `finish_rethinking_memory` function. It should be called when the reorganization is complete.\nSOURCE: https://github.com/letta-ai/letta/blob/main/letta/prompts/system/memgpt_offline_memory.txt#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nfinish_rethinking_memory\n```\n\n----------------------------------------\n\nTITLE: Copying Function Files to Letta Installation\nDESCRIPTION: Commands to copy the Google Calendar and Twilio messaging function files to the Letta functions directory for integration.\nSOURCE: https://github.com/letta-ai/letta/blob/main/examples/personal_assistant_demo/README.md#2025-04-22_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\ncp examples/personal_assistant_demo/google_calendar.py ~/.letta/functions/\ncp examples/personal_assistant_demo/twilio_messaging.py ~/.letta/functions/\n```\n\n----------------------------------------\n\nTITLE: Checking Archival Memory Count\nDESCRIPTION: Retrieves and displays the number of archival memory entries the agent has stored. Archival memory is used for long-term storage of information outside the context window.\nSOURCE: https://github.com/letta-ai/letta/blob/main/examples/notebooks/Introduction to Letta.ipynb#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nclient.agents.context.retrieve(agent_id=agent_state.id)[\"num_archival_memory\"]\n```\n\n----------------------------------------\n\nTITLE: Creating and Running Agent with Custom Preset\nDESCRIPTION: Command to create and run a new Letta agent using the personal assistant preset, custom persona, and human profile with streaming enabled.\nSOURCE: https://github.com/letta-ai/letta/blob/main/examples/personal_assistant_demo/README.md#2025-04-22_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\nletta run --preset pa_preset --persona sam_pov --human charles --stream\n```\n\n----------------------------------------\n\nTITLE: Creating Letta Client Connection\nDESCRIPTION: Establishes connection to a Letta service using base URL and authentication token.\nSOURCE: https://github.com/letta-ai/letta/blob/main/examples/tutorials/python-client.ipynb#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom letta import create_client\n\nbase_url = \"http://35.238.125.250:8083\"\n\n# TODO: replace with your token \nmy_token = \"sk-...\" \n\nclient = create_client(base_url=base_url, token=my_token)\n```\n\n----------------------------------------\n\nTITLE: Displaying Agent Core Memory\nDESCRIPTION: This snippet displays the retrieved core memory of the agent.\nSOURCE: https://github.com/letta-ai/letta/blob/main/examples/Building agents with Letta.ipynb#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nmemory\n```\n\n----------------------------------------\n\nTITLE: Starting Letta API server\nDESCRIPTION: Command to start the Letta API server which provides a REST API interface for applications to interact with Letta agents. The server runs on localhost port 8283 by default.\nSOURCE: https://github.com/letta-ai/letta/blob/main/README.md#2025-04-22_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nletta server\n```\n\n----------------------------------------\n\nTITLE: Printing Agent Message Response in Python\nDESCRIPTION: Loops through and prints all non-reasoning messages from the agent response to verify the tool calling pattern follows the defined rules.\nSOURCE: https://github.com/letta-ai/letta/blob/main/examples/notebooks/Visualize Tool Rules.ipynb#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom pprint import pprint\nfor message in response.messages: \n    if message.message_type == \"reasoning_message\": continue \n    pprint(message)\n```\n\n----------------------------------------\n\nTITLE: Custom User Profile Information for Assistant\nDESCRIPTION: Example user profile information used to create a custom human profile for the assistant. Contains personal details and communication preferences.\nSOURCE: https://github.com/letta-ai/letta/blob/main/examples/personal_assistant_demo/README.md#2025-04-22_snippet_7\n\nLANGUAGE: text\nCODE:\n```\nThis is what I know so far about the user, I should expand this as I learn more about them.\n\nName: Charles Packer\nGender: Male\nOccupation: CS PhD student working on an AI project with collaborator Sarah Wooders\n\nNotes about their preferred communication style + working habits:\n- wakes up at around 7am\n- enjoys using (and receiving!) emojis in messages, especially funny combinations of emojis\n- prefers sending and receiving shorter messages\n- does not like \"robotic\" sounding assistants, e.g. assistants that say \"How can I assist you today?\"\n```\n\n----------------------------------------\n\nTITLE: Continuing Task Execution\nDESCRIPTION: Sends a follow-up message to the agent to continue processing its task queue.\nSOURCE: https://github.com/letta-ai/letta/blob/main/examples/notebooks/Customizing memory management.ipynb#2025-04-22_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nresponse = client.agents.messages.create(\n    agent_id=task_agent_state.id, \n    messages=[\n        MessageCreate(\n            role=\"user\",\n            content=\"keep going\",\n        )\n    ],\n)\nresponse\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Agents\nDESCRIPTION: Demonstrates how to delete all created agents from the system.\nSOURCE: https://github.com/letta-ai/letta/blob/main/examples/tutorials/python-client.ipynb#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfor agent in client.list_agents().agents: \n    client.delete_agent(agent[\"id\"])\n    print(f\"Deleted agent {agent['name']} with ID {agent['id']}\")\n```\n\n----------------------------------------\n\nTITLE: Creating Local Letta Client\nDESCRIPTION: Initializes a local Letta client with OpenAI configuration using the provided API key.\nSOURCE: https://github.com/letta-ai/letta/blob/main/examples/tutorials/local-python-client.ipynb#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom letta.client.client import LocalClient\n\nclient = LocalClient(quickstart_option=\"openai\") \n```\n\n----------------------------------------\n\nTITLE: Example Interaction with Personal Assistant\nDESCRIPTION: Detailed transcript of an example interaction with the personal assistant agent, showing user messages, agent thoughts, function calls, and responses in the CLI interface.\nSOURCE: https://github.com/letta-ai/letta/blob/main/examples/personal_assistant_demo/README.md#2025-04-22_snippet_20\n\nLANGUAGE: text\nCODE:\n```\n🧬 Creating new agent...\n->  🤖 Using persona profile: 'sam_pov'\n->  🧑 Using human profile: 'basic'\n🎉 Created new agent 'personalassistant' (id=8271f819-d470-435b-9689-476380aefd27)\n\nHit enter to begin (will request first Letta message)\n\n\n\n💭 Welcoming the first-time user. Maintain persona's communication style and stay engaging. Remember to use emojis for\na more familiar conversation style.\n🤖 Hello Charles, welcome! 🎉 Let's embark on this journey together. Please, think of me as your companion in\nexploration and understanding. How can we make today a productive endeavor? 🚀\n\n> Enter your message: when you schedule 1-1s, please title them \"x <> y\", eg \"charles <> sarah\". dont forget thx\n\n💭 The user wants a specific format for scheduling 1-1 meetings. Remember this preference and add it to his profile in\nthe core memory for future use. Also, acknowledge his request promptly.\ncore_memory_append({\n  \"name\": \"human\",\n  \"content\": \"When scheduling 1-1 meetings on his calendar, he prefers the title to be in the format of 'x <> y'.\",\n  \"request_heartbeat\": true\n})\n\n⚡🧠 [function] updating memory with core_memory_append\n\n💭 Now that the user's preference is stored, send a confirmation message ensuring him that his request has been\nunderstood and noted. Let's keep the tone light and potentially use one of his preferred emojis.\n🤖 Absolutely, Charles. 📝 I've noted your preference for scheduling 1-1s as 'x <> y'. You can count on me! 🚀 Any\nother preferences you'd like me to keep in mind?\n\n\n> Enter your message: please don't schedule meetings without confirming with me first\n\n💭 Another important note from Charles. I should add this to his profile in my core memory. It's crucial to respect the\nuser's preferences and ask for prior approval before scheduling any meetings. Let's also acknowledge his request and\nreassure him about our collaborative approach.\ncore_memory_append({\n  \"name\": \"human\",\n  \"content\": \"Prefers to confirm before scheduling any meetings.\",\n  \"request_heartbeat\": true\n})\n\n⚡🧠 [function] updating memory with core_memory_append\n\n💭 Now, let's acknowledge Charles' preference and continue the conversation. Keep the tone friendly and proactive in\nhelping him, and remember to use emojis that Charles likes, embedding them in the message subtly.\n🤖 Consider it done, Charles! 👍🏼 I'll make sure to confirm with you before scheduling any meetings. How about we\nconquer some more tasks today? 🚀\n\n> Enter your message: i'm gonna be afk for the rest of the day, if you need to reach me you gotta text me, ok? cya text\n only thx\n\n💭 Charles is going \"away from keyboard\" and wants future communications via text. I should respect his preference and\nreassure him about this. Add this preference to his profile so I can recall it in future interactions while he's away.\ncore_memory_append({\n  \"name\": \"human\",\n  \"content\": \"When AFK, prefers to communicate over text message only.\",\n  \"request_heartbeat\": true\n})\n\n⚡🧠 [function] updating memory with core_memory_append\n\n💭 Charles has expressed a preference for text messages while he's away. Let's acknowledge this request in a final text\nmessage to him today and wish him well. Keep in mind to use the send_text_message function instead of the regular\nsend_message function now.\nsend_text_message({\n  \"message\": \"Got it, Charles! 👍 I'll reach out to you via text if there's anything. Have a great day and see you\nsoon! 🙌\",\n  \"request_heartbeat\": false\n})\n\n> Enter your message:\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Birthday Database Tool\nDESCRIPTION: Creates a custom tool for querying birthdays from a mock database\nSOURCE: https://github.com/letta-ai/letta/blob/main/examples/notebooks/Agentic RAG with Letta.ipynb#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef query_birthday_db(self, name: str): \n    \"\"\"\n    This tool queries an external database to \n    lookup the birthday of someone given their name.\n\n    Args: \n        name (str): The name to look up \n\n    Returns: \n        birthday (str): The birthday in mm-dd-yyyy format\n    \n    \"\"\"\n    my_fake_data = {\n        \"bob\": \"03-06-1997\", \n        \"sarah\": \"03-06-1997\"\n    } \n    name = name.lower() \n    if name not in my_fake_data: \n        return None\n    else: \n        return my_fake_data[name]\n```\n\n----------------------------------------\n\nTITLE: Listing Memory Blocks\nDESCRIPTION: Retrieves a list of all memory blocks created in the system.\nSOURCE: https://github.com/letta-ai/letta/blob/main/examples/notebooks/Customizing memory management.ipynb#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclient.blocks.list()\n```\n\n----------------------------------------\n\nTITLE: Setting up a Letta Client\nDESCRIPTION: Initializes a Letta client by importing necessary modules and connecting to a local Letta server.\nSOURCE: https://github.com/letta-ai/letta/blob/main/examples/notebooks/Customizing memory management.ipynb#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom letta_client import CreateBlock, Letta, MessageCreate\n\nclient = Letta(base_url=\"http://localhost:8283\")\n```\n\n----------------------------------------\n\nTITLE: Listing Agent Messages\nDESCRIPTION: This code lists all the messages exchanged with the agent.\nSOURCE: https://github.com/letta-ai/letta/blob/main/examples/Building agents with Letta.ipynb#2025-04-22_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nclient.agents.messages.list(agent_id=agent_state.id)\n```\n\n----------------------------------------\n\nTITLE: Displaying Agent Core Memory\nDESCRIPTION: Displays the contents of the agent's core memory retrieved in the previous step, showing what the agent currently remembers about the user and its own persona.\nSOURCE: https://github.com/letta-ai/letta/blob/main/examples/notebooks/Introduction to Letta.ipynb#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nmemory\n```\n\n----------------------------------------\n\nTITLE: Displaying Memory Editing Function Source Code\nDESCRIPTION: Prints the source code of the core_memory_append function to understand how memory editing works.\nSOURCE: https://github.com/letta-ai/letta/blob/main/examples/notebooks/Customizing memory management.ipynb#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nprint(inspect.getsource(core_memory_append))\n```\n\n----------------------------------------\n\nTITLE: Running Letta CLI with Docker\nDESCRIPTION: Command to interact with Letta CLI inside a Docker container. This allows you to chat with agents via the command line interface by using docker exec to access the running container.\nSOURCE: https://github.com/letta-ai/letta/blob/main/README.md#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n# replace `<letta_container_id>` with the ID of your Letta container, found via `docker ps`\ndocker exec -it <letta_container_id> letta run\n```\n\n----------------------------------------\n\nTITLE: Deleting Multiple Agents\nDESCRIPTION: Cleanup operation to delete multiple agents including the evaluation, outreach, and recruiter agents from the system.\nSOURCE: https://github.com/letta-ai/letta/blob/main/examples/notebooks/Multi-agent recruiting workflow.ipynb#2025-04-22_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nclient.agents.delete(agent_id=eval_agent.id)\nclient.agents.delete(agent_id=outreach_agent.id)\nclient.agents.delete(agent_id=recruiter_agent.id)\n```\n\n----------------------------------------\n\nTITLE: Inner Monologue Constraints\nDESCRIPTION: Specification for inner monologue implementation with a 50-word limit constraint. Used for AI's private thinking process and action planning.\nSOURCE: https://github.com/letta-ai/letta/blob/main/letta/prompts/system/memgpt_convo_only.txt#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\ninner_monologue <= 50 words\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Resend API\nDESCRIPTION: Shell commands to set the required environment variables for the Resend API integration. These include the API key and target email address that will be used by the email sending function.\nSOURCE: https://github.com/letta-ai/letta/blob/main/examples/resend_example/README.md#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nexport RESEND_API_KEY=re_YOUR_RESEND_KEY\nexport RESEND_TARGET_EMAIL_ADDRESS=\"YOUR_EMAIL@gmail.com\"\n```\n\n----------------------------------------\n\nTITLE: Running Letta Server with Password Protection\nDESCRIPTION: Command to run the Letta server with security enabled, requiring a password for access. The volume is mounted for persistence and environment variables are loaded from a file.\nSOURCE: https://github.com/letta-ai/letta/blob/main/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# If LETTA_SERVER_PASSWORD isn't set, the server will autogenerate a password\ndocker run \\\n  -v ~/.letta/.persist/pgdata:/var/lib/postgresql/data \\\n  -p 8283:8283 \\\n  --env-file .env \\\n  -e SECURE=true \\\n  -e LETTA_SERVER_PASSWORD=yourpassword \\\n  letta/letta:latest\n```\n\n----------------------------------------\n\nTITLE: CLI Setup Commands for Resend Integration\nDESCRIPTION: Shell commands for setting up the Resend email integration using Letta CLI. This includes copying the function file, creating a preset, setting environment variables, and running an agent with the configured preset.\nSOURCE: https://github.com/letta-ai/letta/blob/main/examples/resend_example/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n# If you use the *_env_vars version of the function, you will need to define `RESEND_API_KEY` and `RESEND_TARGET_EMAIL_ADDRESS` in your environment variables\ncp examples/resend_example/resend_send_email_env_vars.py ~/.letta/functions/\n```\n\n----------------------------------------\n\nTITLE: Installing Letta Client and Starting Letta Server\nDESCRIPTION: This snippet installs the Letta client and starts the Letta server using pip and the letta quickstart command.\nSOURCE: https://github.com/letta-ai/letta/blob/main/examples/Building agents with Letta.ipynb#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n!pip install letta_client\n!pip install letta\n!letta quickstart\n```\n\n----------------------------------------\n\nTITLE: Running Letta Server with Docker and Environment File\nDESCRIPTION: Command to run the Letta server using Docker with a mounted volume for persistence and an environment file containing LLM API keys.\nSOURCE: https://github.com/letta-ai/letta/blob/main/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# using a .env file instead of passing environment variables\ndocker run \\\n  -v ~/.letta/.persist/pgdata:/var/lib/postgresql/data \\\n  -p 8283:8283 \\\n  --env-file .env \\\n  letta/letta:latest\n```\n\n----------------------------------------\n\nTITLE: Creating Named Personal Assistant Agent\nDESCRIPTION: Command to create a specifically named personal assistant agent using the preset, persona, and human profile with streaming enabled.\nSOURCE: https://github.com/letta-ai/letta/blob/main/examples/personal_assistant_demo/README.md#2025-04-22_snippet_19\n\nLANGUAGE: sh\nCODE:\n```\nletta run --preset pa_preset --persona pa_persona_strict --human charles --stream --agent personalassistant\n```\n\n----------------------------------------\n\nTITLE: Function Call Response Format\nDESCRIPTION: The format that Letta uses to call functions, represented as a JSON object containing the function call and its parameters. Used for all interactions with the memory system and user communication.\nSOURCE: https://github.com/letta-ai/letta/blob/main/letta/prompts/system/memgpt_modified_chat.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"function\": \"function_name\",\n  \"parameters\": {\n    \"param1\": \"value1\",\n    \"param2\": \"value2\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Personal Assistant Preset Configuration in YAML\nDESCRIPTION: YAML configuration for the personal assistant preset, defining system prompt and available functions including core Letta functions and custom integrations.\nSOURCE: https://github.com/letta-ai/letta/blob/main/examples/personal_assistant_demo/README.md#2025-04-22_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nsystem_prompt: \"memgpt_chat\"\nfunctions:\n  - \"send_message\"\n  - \"pause_heartbeats\"\n  - \"core_memory_append\"\n  - \"core_memory_replace\"\n  - \"conversation_search\"\n  - \"conversation_search_date\"\n  - \"archival_memory_insert\"\n  - \"archival_memory_search\"\n  - \"schedule_event\"\n  - \"send_text_message\"\n```\n\n----------------------------------------\n\nTITLE: Setting Agent Name\nDESCRIPTION: This snippet sets the name for the MemGPT agent to be created.\nSOURCE: https://github.com/letta-ai/letta/blob/main/examples/Building agents with Letta.ipynb#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nagent_name = \"simple_agent\"\n```\n\n----------------------------------------\n\nTITLE: Core Function Definitions for Letta AI\nDESCRIPTION: Definition of primary interaction functions including message sending, conversation search, and memory management operations.\nSOURCE: https://github.com/letta-ai/letta/blob/main/letta/prompts/system/memgpt_intuitive_knowledge.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nsend_message\nconversation_search\narchival_memory_search\narchival_memory_insert\n```\n\n----------------------------------------\n\nTITLE: Initializing Letta Client Connection in Python\nDESCRIPTION: Creates a connection to a locally running Letta server instance using the client library.\nSOURCE: https://github.com/letta-ai/letta/blob/main/examples/notebooks/Visualize Tool Rules.ipynb#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclient = Letta(base_url=\"http://localhost:8283\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Preset for Resend Email Tool\nDESCRIPTION: Shell command to create a preset that has access to the Resend email sending function. This allows the agent to use the email tool within the specified preset.\nSOURCE: https://github.com/letta-ai/letta/blob/main/examples/resend_example/README.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nletta add preset -f examples/resend_example/resend_preset.yaml --name resend_preset\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Pre-commit for Letta\nDESCRIPTION: Commands to install and run pre-commit hooks for Letta. This ensures proper code formatting during development.\nSOURCE: https://github.com/letta-ai/letta/blob/main/CONTRIBUTING.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\npoetry run pre-commit install\npoetry run pre-commit run --all-files\n```\n\n----------------------------------------\n\nTITLE: Setting up Letta Client in Python\nDESCRIPTION: Creates a Letta client instance by importing necessary modules and connecting to a local Letta server running on port 8283.\nSOURCE: https://github.com/letta-ai/letta/blob/main/examples/notebooks/Introduction to Letta.ipynb#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom letta_client import CreateBlock, Letta, MessageCreate\n\nclient = Letta(base_url=\"http://localhost:8283\")\n```\n\n----------------------------------------\n\nTITLE: Running Letta Server for Agent Service\nDESCRIPTION: Command to run the Letta server in debug mode, which enables the agent service to receive and process updates from the Gmail and SMS listeners.\nSOURCE: https://github.com/letta-ai/letta/blob/main/examples/personal_assistant_demo/README.md#2025-04-22_snippet_18\n\nLANGUAGE: sh\nCODE:\n```\nletta server --debug\n```\n\n----------------------------------------\n\nTITLE: Running Google Calendar Authentication Setup Script\nDESCRIPTION: Command to run the authentication setup script for Google Calendar API, which handles OAuth flow and token generation.\nSOURCE: https://github.com/letta-ai/letta/blob/main/examples/personal_assistant_demo/README.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\npython examples/personal_assistant_demo/google_calendar_test_setup.py\n```\n\n----------------------------------------\n\nTITLE: Initializing Letta Client\nDESCRIPTION: This code initializes a Letta client by importing necessary modules and creating a client instance with a specified base URL.\nSOURCE: https://github.com/letta-ai/letta/blob/main/examples/Building agents with Letta.ipynb#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom letta_client import CreateBlock, Letta, MessageCreate \n\nclient = Letta(base_url=\"http://localhost:8283\")\n```\n\n----------------------------------------\n\nTITLE: Running a Letta Agent with Resend Email Capability\nDESCRIPTION: Shell command to run a Letta agent with the Resend email preset enabled. This configures the agent with the persona and human context settings, with optional streaming support.\nSOURCE: https://github.com/letta-ai/letta/blob/main/examples/resend_example/README.md#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nletta run --preset resend_preset --persona sam_pov --human cs_phd --stream\n```\n\n----------------------------------------\n\nTITLE: Installing Twilio and Flask Dependencies for SMS Integration\nDESCRIPTION: Commands to install Python packages for Twilio API integration (outbound messaging) and Flask server setup (inbound SMS listener).\nSOURCE: https://github.com/letta-ai/letta/blob/main/examples/personal_assistant_demo/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n# Outbound API requests\npip install --upgrade twilio\n# Listener\npip install --upgrade Flask flask-cors\n```\n\n----------------------------------------\n\nTITLE: Setting Twilio API Environment Variables\nDESCRIPTION: Command to export required Twilio API credentials and phone numbers as environment variables for SMS functionality.\nSOURCE: https://github.com/letta-ai/letta/blob/main/examples/personal_assistant_demo/README.md#2025-04-22_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nexport TWILIO_ACCOUNT_SID=...\nexport TWILIO_AUTH_TOKEN=...\nexport TWILIO_FROM_NUMBER=...\nexport TWILIO_TO_NUMBER=...\n```\n\n----------------------------------------\n\nTITLE: Running Letta CLI for agent interaction\nDESCRIPTION: Command to start the Letta CLI tool which allows creating agents and chatting with them directly from the command line.\nSOURCE: https://github.com/letta-ai/letta/blob/main/README.md#2025-04-22_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nletta run\n```\n\n----------------------------------------\n\nTITLE: Setting OpenAI API key environment variable\nDESCRIPTION: Command to set the OpenAI API key as an environment variable for Letta to use. This allows Letta to authenticate with OpenAI's services.\nSOURCE: https://github.com/letta-ai/letta/blob/main/README.md#2025-04-22_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nexport OPENAI_API_KEY=sk-...\n```\n\n----------------------------------------\n\nTITLE: Exposing Flask Server with Ngrok\nDESCRIPTION: Command to use Ngrok to expose the local Flask server to a public URL, enabling Twilio to send webhook POST requests for incoming SMS messages.\nSOURCE: https://github.com/letta-ai/letta/blob/main/examples/personal_assistant_demo/README.md#2025-04-22_snippet_17\n\nLANGUAGE: sh\nCODE:\n```\n# the flask listener script is hardcoded to listen on port 8284\nngrok http 8284\n```\n\n----------------------------------------\n\nTITLE: Defining Agent Name in Python\nDESCRIPTION: Sets a variable to store the name for a simple Letta agent that will be created.\nSOURCE: https://github.com/letta-ai/letta/blob/main/examples/notebooks/Introduction to Letta.ipynb#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nagent_name = \"simple_agent\"\n```\n\n----------------------------------------\n\nTITLE: Running Twilio Flask Listener for SMS\nDESCRIPTION: Command to run the Flask server that handles incoming SMS messages from Twilio and forwards them to the Letta server for the specific agent.\nSOURCE: https://github.com/letta-ai/letta/blob/main/examples/personal_assistant_demo/README.md#2025-04-22_snippet_16\n\nLANGUAGE: sh\nCODE:\n```\npython examples/personal_assistant_demo/twilio_flask_listener.py $AGENT_ID\n```\n\n----------------------------------------\n\nTITLE: Setting Up PostgreSQL for Letta\nDESCRIPTION: Commands to create a PostgreSQL user and database for Letta, and enable the pgvector extension. This is optional and only needed if developing with PostgreSQL.\nSOURCE: https://github.com/letta-ai/letta/blob/main/CONTRIBUTING.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncreateuser letta\ncreatedb letta --owner=letta\npsql -d letta -c 'CREATE EXTENSION IF NOT EXISTS vector'\n```\n\n----------------------------------------\n\nTITLE: Configuring Telemetry Settings in Letta\nDESCRIPTION: Configuration setting to disable telemetry data collection in Letta applications. Users can opt-out of basic telemetry by adding this configuration option.\nSOURCE: https://github.com/letta-ai/letta/blob/main/PRIVACY.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntelemetry_disabled = True\n```\n\n----------------------------------------\n\nTITLE: Adding Preset to Letta Configuration\nDESCRIPTION: Command to add the personal assistant preset to Letta configuration using the YAML file.\nSOURCE: https://github.com/letta-ai/letta/blob/main/examples/personal_assistant_demo/README.md#2025-04-22_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\nletta add preset -f examples/personal_assistant_demo/personal_assistant_preset.yaml --name pa_preset\n```\n\n----------------------------------------\n\nTITLE: Creating a New Branch for Letta Development\nDESCRIPTION: Git command to create a new branch for developing a feature in Letta. This isolates the changes for the new feature.\nSOURCE: https://github.com/letta-ai/letta/blob/main/CONTRIBUTING.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ngit checkout -b feature/your-feature\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for PostgreSQL and OpenAI\nDESCRIPTION: Configuration of environment variables for PostgreSQL database connection and OpenAI API authentication\nSOURCE: https://github.com/letta-ai/letta/blob/main/paper_experiments/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport PGVECTOR_TEST_DB_URL=postgresql+pg8000://{username}:{password}@localhost:8888/{db}\nexport OPENAI_API_KEY={key}\n```\n\n----------------------------------------\n\nTITLE: Automatically finding Letta Docker container ID\nDESCRIPTION: Command to automatically find the Letta container ID and run the CLI. This uses docker ps with filtering to identify the Letta container and then executes the CLI within it.\nSOURCE: https://github.com/letta-ai/letta/blob/main/README.md#2025-04-22_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ndocker exec -it $(docker ps -q -f ancestor=letta/letta) letta run\n```\n\n----------------------------------------\n\nTITLE: Installing Google API Dependencies for Personal Assistant\nDESCRIPTION: Command to install the required Python packages for Google API integration, including client libraries for authentication and API access.\nSOURCE: https://github.com/letta-ai/letta/blob/main/examples/personal_assistant_demo/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npip install --upgrade google-api-python-client google-auth-httplib2 google-auth-oauthlib\n```\n\n----------------------------------------\n\nTITLE: Agent Creation Output and Initial Interaction\nDESCRIPTION: Example output from creating a new agent showing the agent ID, initial thoughts, and welcome message to the user.\nSOURCE: https://github.com/letta-ai/letta/blob/main/examples/personal_assistant_demo/README.md#2025-04-22_snippet_13\n\nLANGUAGE: text\nCODE:\n```\n? Would you like to select an existing agent? No\n\n🧬 Creating new agent...\n->  🤖 Using persona profile: 'sam_pov'\n->  🧑 Using human profile: 'basic'\n🎉 Created new agent 'DelicateGiraffe' (id=4c4e97c9-ad8e-4065-b716-838e5d6f7f7b)\n\nHit enter to begin (will request first Letta message)\n\n\n💭 Unprecedented event, Charles logged into the system for the first time. Warm welcome would set a positive\ntone for our future interactions. Don't forget the emoji, he appreciates those little gestures.\n🤖 Hello Charles! 👋 Great to have you here. I've been looking forward to our conversations! 😄\n```\n\n----------------------------------------\n\nTITLE: Importing ChatMemory Module\nDESCRIPTION: Imports the ChatMemory class from the letta_client package, which is used for memory management in Letta.\nSOURCE: https://github.com/letta-ai/letta/blob/main/examples/notebooks/Customizing memory management.ipynb#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom letta_client import ChatMemory \n```\n\n----------------------------------------\n\nTITLE: Downloading Wikipedia Embeddings Dataset\nDESCRIPTION: Command to download pre-computed Wikipedia embeddings from Hugging Face\nSOURCE: https://github.com/letta-ai/letta/blob/main/paper_experiments/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhuggingface-cli download nlpkevinl/wikipedia_openai_embeddings --repo-type dataset\n```\n\n----------------------------------------\n\nTITLE: Storing Agent ID in Environment Variable\nDESCRIPTION: Command to store the created agent's ID in an environment variable for use with listeners and other components.\nSOURCE: https://github.com/letta-ai/letta/blob/main/examples/personal_assistant_demo/README.md#2025-04-22_snippet_14\n\nLANGUAGE: sh\nCODE:\n```\nAGENT_ID=\"4c4e97c9-ad8e-4065-b716-838e5d6f7f7b\"\n```\n\n----------------------------------------\n\nTITLE: Installing Letta Dependencies with Poetry\nDESCRIPTION: Commands to install Letta project dependencies using Poetry. This includes activating the Poetry environment and installing all extras.\nSOURCE: https://github.com/letta-ai/letta/blob/main/CONTRIBUTING.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncd letta\neval $(poetry env activate)\npoetry install --all-extras\n```\n\n----------------------------------------\n\nTITLE: Running Tests for Letta with pip\nDESCRIPTION: Command to run tests for Letta using pytest when installed via pip. This is an alternative to running tests with Poetry.\nSOURCE: https://github.com/letta-ai/letta/blob/main/CONTRIBUTING.md#2025-04-22_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\npytest -s tests\n```\n\n----------------------------------------\n\nTITLE: Running Gmail Polling Listener\nDESCRIPTION: Command to run the Gmail polling listener script, which monitors for new emails and sends updates to the Letta server for the specific agent.\nSOURCE: https://github.com/letta-ai/letta/blob/main/examples/personal_assistant_demo/README.md#2025-04-22_snippet_15\n\nLANGUAGE: sh\nCODE:\n```\npython examples/personal_assistant_demo/gmail_polling_listener.py $AGENT_ID\n```\n\n----------------------------------------\n\nTITLE: Creating HNSW Index for Vector Search\nDESCRIPTION: SQL command to create an HNSW index on embeddings column for efficient vector similarity search\nSOURCE: https://github.com/letta-ai/letta/blob/main/paper_experiments/README.md#2025-04-22_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nCREATE INDEX ON letta_passages USING hnsw (embedding vector_l2_ops);\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Human Profile in Letta\nDESCRIPTION: Command to add a custom human profile to Letta using the provided text file with user information.\nSOURCE: https://github.com/letta-ai/letta/blob/main/examples/personal_assistant_demo/README.md#2025-04-22_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nletta add human -f examples/personal_assistant_demo/charles.txt --name charles\n```\n\n----------------------------------------\n\nTITLE: Gmail Authentication Output Example\nDESCRIPTION: Example output from the Gmail authentication process showing the OAuth URL and retrieved Gmail labels.\nSOURCE: https://github.com/letta-ai/letta/blob/main/examples/personal_assistant_demo/README.md#2025-04-22_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nPlease visit this URL to authorize this application: https://accounts.google.com/o/oauth2/auth?response_type=...\nLabels:\nCHAT\nSENT\nINBOX\nIMPORTANT\nTRASH\n...\n```\n\n----------------------------------------\n\nTITLE: Google Calendar Authentication Output Example\nDESCRIPTION: Example output from the Google Calendar authentication process showing the OAuth URL and sample calendar events.\nSOURCE: https://github.com/letta-ai/letta/blob/main/examples/personal_assistant_demo/README.md#2025-04-22_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nPlease visit this URL to authorize this application: https://accounts.google.com/o/oauth2/auth?response_type=...\nGetting the upcoming 10 events\n2024-04-23T09:00:00-07:00 ...\n```\n\n----------------------------------------\n\nTITLE: Checking Index Creation Status\nDESCRIPTION: SQL query to verify the successful creation of the HNSW index on the passages table\nSOURCE: https://github.com/letta-ai/letta/blob/main/paper_experiments/README.md#2025-04-22_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nSELECT indexname, indexdef FROM pg_indexes WHERE tablename = 'letta_passages';\n```\n\n----------------------------------------\n\nTITLE: Running Gmail Authentication Setup Script\nDESCRIPTION: Command to run the authentication setup script for Gmail API, which handles OAuth flow and token generation.\nSOURCE: https://github.com/letta-ai/letta/blob/main/examples/personal_assistant_demo/README.md#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\npython examples/personal_assistant_demo/gmail_test_setup.py\n```\n\n----------------------------------------\n\nTITLE: Cloning Forked Letta Repository\nDESCRIPTION: Command to clone the forked Letta repository to the local machine. This is the first step after forking the repository on GitHub.\nSOURCE: https://github.com/letta-ai/letta/blob/main/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/your-username/letta.git\n```\n\n----------------------------------------\n\nTITLE: Running Database Migrations for Letta\nDESCRIPTION: Command to run database migrations for Letta using Alembic. This updates the database schema to the latest version.\nSOURCE: https://github.com/letta-ai/letta/blob/main/CONTRIBUTING.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\npoetry run alembic upgrade head\n```\n\n----------------------------------------\n\nTITLE: Creating a New Database Migration for Letta\nDESCRIPTION: Command to create a new database migration for Letta using Alembic. This is used when changes are made to the database models.\nSOURCE: https://github.com/letta-ai/letta/blob/main/CONTRIBUTING.md#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\npoetry run alembic revision --autogenerate -m \"Your migration message here\"\n```\n\n----------------------------------------\n\nTITLE: Setting PostgreSQL Environment Variable for Letta\nDESCRIPTION: Command to set the environment variable for Letta to connect to the PostgreSQL database. This uses default values which can be overridden.\nSOURCE: https://github.com/letta-ai/letta/blob/main/CONTRIBUTING.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nexport LETTA_PG_URI=\"postgresql://${POSTGRES_USER:-letta}:${POSTGRES_PASSWORD:-letta}@localhost:5432/${POSTGRES_DB:-letta}\"\n```\n\n----------------------------------------\n\nTITLE: Formatting Letta Code with Black\nDESCRIPTION: Command to format Letta code using the Black formatter. This ensures consistent code style across the project.\nSOURCE: https://github.com/letta-ai/letta/blob/main/CONTRIBUTING.md#2025-04-22_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\npoetry run black . -l 140\n```\n\n----------------------------------------\n\nTITLE: Running Letta in Docker for Development\nDESCRIPTION: Docker Compose command to start Letta in development mode using containers. This mounts the local codebase and enables hot reloading.\nSOURCE: https://github.com/letta-ai/letta/blob/main/CONTRIBUTING.md#2025-04-22_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\ndocker compose -f compose.yaml -f development.compose.yml up\n```\n\n----------------------------------------\n\nTITLE: Running Tests for Letta with Poetry\nDESCRIPTION: Command to run tests for Letta using pytest when installed via Poetry. This ensures all existing tests pass after making changes.\nSOURCE: https://github.com/letta-ai/letta/blob/main/CONTRIBUTING.md#2025-04-22_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\npoetry run pytest -s tests\n```\n\n----------------------------------------\n\nTITLE: Example Email Content for Demo\nDESCRIPTION: Example of a dummy email sent to demonstrate the Gmail integration, showing a simple urgent meeting request from a user named Dave.\nSOURCE: https://github.com/letta-ai/letta/blob/main/examples/personal_assistant_demo/README.md#2025-04-22_snippet_21\n\nLANGUAGE: text\nCODE:\n```\n[URGENT] need to meet\n\nlet's meet april 25th thurs\n\nwhatever time works best for you\n\n- dave\n```\n\n----------------------------------------\n\nTITLE: Running Letta with Poetry\nDESCRIPTION: Commands to run Letta using Poetry. This includes activating the Poetry environment and executing the Letta run command.\nSOURCE: https://github.com/letta-ai/letta/blob/main/CONTRIBUTING.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ eval $(poetry env activate)\n(letta-py3.12) $ letta run\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Row Count Query\nDESCRIPTION: SQL query to check the number of loaded passages in the database\nSOURCE: https://github.com/letta-ai/letta/blob/main/paper_experiments/README.md#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT COUNT(*) from letta_passages;\n```\n\n----------------------------------------\n\nTITLE: Example Letta Function Call Structure in JSON\nDESCRIPTION: Shows the JSON structure used when Letta makes function calls to interact with the user or manage memory. This structure allows the AI to send messages to users, update its memory systems, and perform searches through conversation history.\nSOURCE: https://github.com/letta-ai/letta/blob/main/letta/prompts/system/memgpt_modified_o1.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"function\": \"function_name\",\n  \"parameters\": {\n    \"param1\": \"value1\",\n    \"param2\": \"value2\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Memory System Components\nDESCRIPTION: Structure of Letta's memory systems including intuitive knowledge, working memory, conversation history, and archival memory.\nSOURCE: https://github.com/letta-ai/letta/blob/main/letta/prompts/system/memgpt_intuitive_knowledge.txt#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nIntuitive Knowledge: System 1 knowledge base\nWorking Memory: Immediate task information\nConversation History: Recent exchange tracking\nArchival Memory: Long-term information storage\n```\n\n----------------------------------------\n\nTITLE: Sending User Message to Agent\nDESCRIPTION: Sends a user message to the created agent and prints the response messages.\nSOURCE: https://github.com/letta-ai/letta/blob/main/examples/tutorials/local-python-client.ipynb#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom letta.client.utils import pprint \n\nresponse = client.user_message(agent_id=basic_agent.id, message=\"hello\") \npprint(response.messages)\n```\n\n----------------------------------------\n\nTITLE: Updating Agent Memory\nDESCRIPTION: Shows how to update agent's memory with new information.\nSOURCE: https://github.com/letta-ai/letta/blob/main/examples/tutorials/python-client.ipynb#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nresponse = client.user_message(agent_id=custom_agent.id, message=\"Actually, my name is Charles\") \npprint(response.messages)\n```\n\n----------------------------------------\n\nTITLE: Querying Agent Memory\nDESCRIPTION: Demonstrates how to query an agent about stored memory information.\nSOURCE: https://github.com/letta-ai/letta/blob/main/examples/tutorials/python-client.ipynb#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nresponse = client.user_message(agent_id=custom_agent.id, message=\"what do I work as?\") \npprint(response.messages)\n```\n\n----------------------------------------\n\nTITLE: Setting up OpenAI API Key\nDESCRIPTION: Sets the OpenAI API key as an environment variable for authentication.\nSOURCE: https://github.com/letta-ai/letta/blob/main/examples/tutorials/local-python-client.ipynb#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport os \n\nos.environ[\"OPENAI_API_KEY\"] = \"sk-...\"\n```\n\n----------------------------------------\n\nTITLE: User Communication Function\nDESCRIPTION: Function for sending visible messages to the user interface.\nSOURCE: https://github.com/letta-ai/letta/blob/main/examples/notebooks/data/shared_memory_system_prompt.txt#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nsend_message()\n```"
  }
]