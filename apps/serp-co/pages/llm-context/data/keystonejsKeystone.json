[
  {
    "owner": "keystonejs",
    "repo": "keystone",
    "content": "TITLE: Configuring Keystone System Components in TypeScript\nDESCRIPTION: Demonstrates the structure of a complete Keystone configuration object, including lists, database, UI, server, session, and GraphQL settings.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/config/config.md#2025-04-13_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default config({\n  lists: { /* ... */ },\n  db: { /* ... */ },\n  ui: { /* ... */ },\n  server: { /* ... */ },\n  session: { /* ... */ },\n  graphql: { /* ... */ },\n  extendGraphqlSchema: { /* ... */ },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Field Type Backend in TypeScript\nDESCRIPTION: This snippet shows how to define the backend portion of a custom field type 'myInt' in Keystone.js. It includes type definitions, configuration options, and GraphQL schema setup.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/guides/custom-fields.md#2025-04-13_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  BaseListTypeInfo,\n  FieldTypeFunc,\n  CommonFieldConfig,\n  fieldType,\n  orderDirectionEnum,\n} from '@keystone-6/core/types'\nimport { graphql } from '@keystone-6/core'\n\nexport type MyIntFieldConfig<ListTypeInfo extends BaseListTypeInfo> =\n  CommonFieldConfig<ListTypeInfo> & {\n    isIndexed?: boolean | 'unique'\n  }\n\nexport function myInt <ListTypeInfo extends BaseListTypeInfo>({\n  isIndexed,\n  ...config\n}: MyIntFieldConfig<ListTypeInfo> = {}): FieldTypeFunc<ListTypeInfo> {\n  return meta =>\n    fieldType({\n      kind: 'scalar',\n      mode: 'optional',\n      scalar: 'Int',\n      index: isIndexed === true ? 'index' : isIndexed || undefined,\n    })({\n      ...config,\n      input: {\n        create: { arg: graphql.arg({ type: graphql.Int }) },\n        update: { arg: graphql.arg({ type: graphql.Int }) },\n        orderBy: { arg: graphql.arg({ type: orderDirectionEnum }) },\n      },\n      output: graphql.field({ type: graphql.Int }),\n      views: './view',\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Operation-Level Access Control\nDESCRIPTION: Demonstrates how to configure operation-level access control for a list, which lets you control which operations (query, create, update, delete) can be accessed by a user based on session and context.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/config/access-control.md#2025-04-13_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { config, list } from '@keystone-6/core';\n\nexport default config({\n  lists: {\n    ListKey: list({\n      access: {\n        operation: {\n          query: ({ session, context, listKey, operation }) => true,\n          create: ({ session, context, listKey, operation }) => true,\n          update: ({ session, context, listKey, operation }) => true,\n          delete: ({ session, context, listKey, operation }) => true,\n        }\n      },\n    }),\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Item-Level Access Control for Mutations\nDESCRIPTION: Demonstrates how to use item-level access control to restrict which specific items can be created, updated, or deleted based on the input data or existing item data.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/config/access-control.md#2025-04-13_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { config, list } from '@keystone-6/core';\nimport { checkbox } from '@keystone-6/core/fields';\n\nexport default config({\n  lists: {\n    ListKey: list({\n      access: {\n        item: {\n          create: ({ session, context, listKey, operation, inputData }) => true,\n          update: ({ session, context, listKey, operation, inputData, item }) => true,\n          delete: ({ session, context, listKey, operation, item }) => true,\n        }\n      },\n    }),\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Validate Hooks in KeystoneJS\nDESCRIPTION: Example showing how to implement validate hooks at both list and field levels in KeystoneJS. The validate hook allows for data validation before create, update, or delete operations, with support for custom validation error messages.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/config/hooks.md#2025-04-13_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { config, list } from '@keystone-6/core';\nimport { text } from '@keystone-6/core/fields';\n\nexport default config({\n  lists: {\n    SomeListName: list({\n      hooks: {\n        validate: {\n          create: async ({\n            listKey,\n            operation,\n            inputData,\n            resolvedData,\n            context,\n            addValidationError,\n          }) => { /* ... */ },\n          update: async ({\n            listKey,\n            operation,\n            inputData,\n            item,\n            resolvedData,\n            context,\n            addValidationError,\n          }) => { /* ... */ },\n          delete: async ({\n            listKey,\n            operation,\n            item,\n            context,\n            addValidationError,\n          }) => { /* ... */ },\n        },\n      },\n      fields: {\n        someFieldName: text({\n          hooks: {\n            validate: {\n              create: async ({\n                listKey,\n                fieldKey,\n                operation,\n                inputData,\n                resolvedData,\n                context,\n                addValidationError,\n              }) => { /* ... */ },\n              update: async ({\n                listKey,\n                fieldKey,\n                operation,\n                inputData,\n                item,\n                resolvedData,\n                context,\n                addValidationError,\n              }) => { /* ... */ },\n              delete: async ({\n                listKey,\n                fieldKey,\n                operation,\n                item,\n                context,\n                addValidationError,\n              }) => { /* ... */ },\n            },\n          },\n        }),\n      },\n    }),\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Access Control Type Definitions\nDESCRIPTION: Comprehensive type definitions for different levels of access control in KeystoneJS.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/guides/auth-and-access-control.md#2025-04-13_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\ntype Filter = Record<string, any>; // the GraphQL Filters for the List\n\ntype Access = {\n  operation: {\n    query: ({ session, context, listKey, operation }) => boolean;\n    create: ({ session, context, listKey, operation }) => boolean;\n    update: ({ session, context, listKey, operation }) => boolean;\n    delete: ({ session, context, listKey, operation }) => boolean;\n  };\n  filter: {\n    query: ({ session, context, listKey, operation }) => Filter | boolean;\n    update: ({ session, context, listKey, operation }) => Filter | boolean;\n    delete: ({ session, context, listKey, operation }) => Filter | boolean;\n  };\n  item: {\n    create: ({ session, context, listKey, operation, inputData }) => boolean;\n    update: ({ session, context, listKey, operation, inputData, item }) => boolean;\n    delete: ({ session, context, listKey, operation, item }) => boolean;\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Complete Keystone Configuration with Auth and Sessions\nDESCRIPTION: Full implementation of a Keystone configuration with SQLite database, user list definition, authentication, and stateless sessions. Shows how all the components work together.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/guides/auth-and-access-control.md#2025-04-13_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport { config, list } from '@keystone-6/core';\nimport { checkbox, password, text } from '@keystone-6/core/fields';\nimport { statelessSessions } from '@keystone-6/core/session';\nimport { createAuth } from '@keystone-6/auth';\n\nconst db = {\n  provider: 'sqlite',\n  url: process.env.DATABASE_URL || 'file:./keystone-example.db',\n};\n\nconst { withAuth } = createAuth({\n  listKey: 'Person',\n  identityField: 'email',\n  secretField: 'password',\n});\n\nconst session = statelessSessions({\n  secret: '-- EXAMPLE COOKIE SECRET; CHANGE ME --',\n});\n\nconst lists = {\n  Person: list({\n    access: allowAll,\n    fields: {\n      name: text(),\n      email: text({ isIndexed: 'unique' }),\n      password: password(),\n      isAdmin: checkbox(),\n    },\n  }),\n};\n\nexport default withAuth(\n  config({\n    db,\n    lists,\n    session,\n  })\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Relationship Fields in KeystoneJS with TypeScript\nDESCRIPTION: Example configuration for setting up relationship fields in a Keystone schema. Demonstrates various options including foreign key configuration, UI display modes, and relationship cardinality settings.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/fields/relationship.md#2025-04-13_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { config, list } from '@keystone-6/core';\nimport { relationship } from '@keystone-6/core/fields';\n\nexport default config({\n  lists: {\n    SomeListName: list({\n      fields: {\n        someFieldName: relationship({\n          ref: '...',\n          many: false,\n          db: {\n            foreignKey: {\n              map: 'foreign_id',\n            },\n          },\n          ui: {\n            hideCreate: false,\n            displayMode: 'select',\n            labelField: 'name',\n            displayMode: 'cards',\n            cardFields: [...],\n            linkToItem: true,\n            removeMode: 'disconnect',\n            inlineCreate: { fields: [...] },\n            inlineEdit: { fields: [...] },\n            inlineConnect: true,\n            // Display mode: 'count'\n            // requires many: true above\n            displayMode: 'count',\n           },\n        }),\n        /* ... */\n      },\n    }),\n    /* ... */\n  },\n  /* ... */\n});\n```\n\n----------------------------------------\n\nTITLE: Basic List Configuration in KeystoneJS\nDESCRIPTION: Demonstrates the basic structure of configuring a list in KeystoneJS, showing all available top-level configuration options including fields, access, UI, hooks, and GraphQL settings.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/config/lists.md#2025-04-13_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { config, list } from '@keystone-6/core';\n\nexport default config({\n  lists: ({\n    SomeListName: list({\n      fields: { /* ... */ },\n      access: { /* ... */ },\n      ui: { /* ... */ },\n      hooks: { /* ... */ },\n      graphql: { /* ... */ },\n      db: { /* ... */ },\n      description: '...',\n      isSingleton: false,\n      defaultIsFilterable: false,\n      defaultIsOrderable: false,\n    }),\n    /* ... */\n  }),\n  /* ... */\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Common Field Options in Keystone\nDESCRIPTION: This example shows the common configuration options that can be applied to any field type in Keystone, including filtering, ordering, access control, hooks, UI settings, and GraphQL API configuration.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/fields/overview.md#2025-04-13_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default config({\n  lists: {\n    SomeListName: list({\n      fields: {\n        someFieldName: text({\n          isFilterable: ({ context, session, fieldKey, listKey }) => true,\n          isOrderable: ({ context, session, fieldKey, listKey }) => true,\n          access: { /* ... */ },\n          hooks: { /* ... */ },\n          label: '...',\n          ui: {\n            views: './path/to/viewsModule',\n            createView: {\n              fieldMode: ({ session, context }) => 'edit',\n            },\n            itemView: {\n              fieldMode: ({ session, context, item }) => 'read',\n            },\n            listView: {\n              fieldMode: ({ session, context }) => 'read',\n            },\n          },\n          graphql: {\n            cacheHint: { maxAge: 60, scope: CacheScope.Private },\n            omit: {\n              read: true,\n              create: true,\n              update: true,\n            },\n          }\n        }),\n        /* ... */\n      },\n    }),\n    /* ... */\n  },\n  /* ... */\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Authentication in Keystone 6\nDESCRIPTION: This snippet demonstrates how to set up authentication in a Keystone 6 project using createAuth(). It shows the basic configuration options and how to integrate authentication with the Keystone config.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/config/auth.md#2025-04-13_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { config, list } from '@keystone-6/core'\nimport { text, password, checkbox } from '@keystone-6/core/fields'\nimport { createAuth } from '@keystone-6/auth'\n\nconst { withAuth } = createAuth({\n  // Required options\n  listKey: 'User',\n  identityField: 'email',\n  secretField: 'password',\n\n  // Additional options\n  sessionData: 'id name email',\n  initFirstItem: {\n    fields: ['email', 'password'],\n    itemData: { isAdmin: true },\n    skipKeystoneWelcome: false,\n  },\n})\n\nexport default withAuth(\n  config({\n    lists: {\n      User: list({\n        fields: {\n          email: text({ isIndexed: 'unique' }),\n          password: password(),\n          isAdmin: checkbox(),\n        },\n      }),\n      session: { /* ... */ },\n    },\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Field Configuration in KeystoneJS\nDESCRIPTION: Shows how to configure fields within a Keystone list definition using the fields property and importing field types.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/config/lists.md#2025-04-13_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { config, list } from '@keystone-6/core';\nimport { text } from '@keystone-6/core/fields';\n\nexport default config({\n  lists: {\n    SomeListName: list({\n      fields: {\n        someFieldName: text({ /* ... */ }),\n        /* ... */\n      },\n    }),\n    /* ... */\n  },\n  /* ... */\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Field-Level Access Control in Keystone.js\nDESCRIPTION: This snippet demonstrates how to implement field-level access control for a Person list in Keystone.js. It includes complex rules for different fields and operations.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/guides/auth-and-access-control.md#2025-04-13_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\ntype PersonData = {\n  id: string;\n  name: string;\n  email: string;\n  isAdmin: boolean;\n};\n\nconst isUser = ({ session }: { session?: Session }) =>\n  !!session?.data.id;\n\nconst isAdmin = ({ session }: { session?: Session }) =>\n  Boolean(session?.data.isAdmin);\n\nconst isPerson = ({ session, item }: { session?: Session, item: PersonData }) =>\n  session?.data.id === item.id;\n\nconst isAdminOrPerson = ({ session, item }: { session?: Session, item: PersonData }) =>\n  isAdmin({ session }) || isPerson({ session, item });\n\nconst Person = list({\n  access: {\n    operation: {\n      query: isAdmin,\n      create: isAdmin,\n      update: isAdmin,      \n      delete: isAdmin,\n    },\n    item: {\n      update: isAdminOrPerson,\n    },\n  },\n  fields: {\n    name: text(),\n    email: text({ isIndexed: 'unique', access: {\n      read: isAdminOrPerson,\n    }}),\n    password: password({ access: {\n      read: isAdminOrPerson,\n      update: isPerson,\n    }}),\n    isAdmin: checkbox({ access: {\n      read: isUser,\n      update: isAdmin,\n    }}),\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Hooks in KeystoneJS Lists and Fields\nDESCRIPTION: This code demonstrates how to define hooks at both the list and field level in a KeystoneJS configuration. It shows the structure for all four hook types (resolveInput, validate, beforeOperation, and afterOperation) and their respective operation handlers (create, update, delete).\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/config/hooks.md#2025-04-13_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { config, list } from '@keystone-6/core';\nimport { text } from '@keystone-6/core/fields';\n\nexport default config({\n  lists: {\n    SomeListName: list({\n      hooks: {\n        resolveInput: {\n          create: async args => { /* ... */ },\n          update: async args => { /* ... */ },\n        },\n        validate: {\n          create: async args => { /* ... */ },\n          update: async args => { /* ... */ },\n          delete: async args => { /* ... */ },\n        },\n        beforeOperation: {\n          create: async args => { /* ... */ },\n          update: async args => { /* ... */ },\n          delete: async args => { /* ... */ },\n        },\n        afterOperation: {\n          create: async args => { /* ... */ },\n          update: async args => { /* ... */ },\n          delete: async args => { /* ... */ },\n        }\n      },\n      fields: {\n        someFieldName: text({\n          hooks: {\n            resolveInput: {\n              create: async args => { /* ... */ },\n              update: async args => { /* ... */ },\n            },\n            validate: {\n              create: async args => { /* ... */ },\n              update: async args => { /* ... */ },\n              delete: async args => { /* ... */ },\n            },\n            beforeOperation: {\n              create: async args => { /* ... */ },\n              update: async args => { /* ... */ },\n              delete: async args => { /* ... */ },\n            },\n            afterOperation: {\n              create: async args => { /* ... */ },\n              update: async args => { /* ... */ },\n              delete: async args => { /* ... */ },\n            }\n          },\n        }),\n      },\n    }),\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Access Control Configuration in Keystone\nDESCRIPTION: Demonstrates the basic structure for configuring access control at both list and field levels in a Keystone system. Shows where access properties should be placed in the configuration object.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/config/access-control.md#2025-04-13_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { config, list } from '@keystone-6/core';\nimport { text } from '@keystone-6/core/fields';\n\nexport default config({\n  lists: {\n    ListKey: list({\n      fields: {\n        fieldName: text({ access: { /* ... */ }, }),\n      },\n      access: { /* ... */ },\n    }),\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Two-sided Relationship in Keystone\nDESCRIPTION: Demonstrates how to set up a two-sided relationship between Posts and Users. The relationship is configured from both sides, allowing queries from either direction. Both fields reference each other using the format ListName.fieldName.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/guides/relationships.md#2025-04-13_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { config, list } from '@keystone-6/core';\nimport { text, relationship } from '@keystone-6/core/fields';\n\nexport default config({\n  lists: {\n    User: list({\n      fields: {\n        name: text(),\n        // relates posts to authors\n        posts: relationship({ref: 'Post.authors', many: true }),\n      },\n    }),\n    Post: list({\n      fields: {\n        title: text(),\n        content: text(),\n        // relates authors to posts\n        authors: relationship({ ref: 'User.posts', many: true }),\n      },\n    }),\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Session Management in Keystone.js\nDESCRIPTION: This code snippet shows how to configure session management in Keystone.js using the statelessSessions function from the @keystone-6/core/session package. It demonstrates the basic structure for setting up sessions in the Keystone configuration.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/config/config.md#2025-04-13_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { statelessSessions } from '@keystone-6/core/session';\n\nexport default config<TypeInfo>({\n  session: statelessSessions({ /* ... */ }),\n  /* ... */\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring GraphQL Options in Keystone.js\nDESCRIPTION: This snippet illustrates how to configure various GraphQL options in Keystone.js, including debug mode, API path, and Apollo Server settings. It shows the structure of the graphql configuration object within the Keystone config.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/config/config.md#2025-04-13_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nexport default config<TypeInfo>({\n  graphql: {\n    debug: process.env.NODE_ENV !== 'production',\n    path: '/api/graphql',\n    apolloConfig: {\n      debug: true,\n      /* ... */\n    },\n  },\n  /* ... */\n});\n```\n\n----------------------------------------\n\nTITLE: Two-sided Relationship Query Example in GraphQL\nDESCRIPTION: Shows how to query users with their posts using GraphQL in a two-sided relationship. This query retrieves all users with their names and the titles and content of their posts.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/guides/relationships.md#2025-04-13_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  users {\n    name\n    posts {\n      title\n      content\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Field-Level Access Control in Keystone.js\nDESCRIPTION: This code snippet demonstrates how to set up field-level access control for a text field in a Keystone.js configuration. It includes access control functions for read, create, and update operations.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/config/access-control.md#2025-04-13_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { config, list } from '@keystone-6/core';\nimport { text } from '@keystone-6/core/fields';\n\nexport default config({\n  lists: {\n    ListKey: list({\n      fields: {\n        fieldName: text({\n          access: {\n            read: ({ session, context, listKey, fieldKey, operation, item }) => true,\n            create: ({ session, context, listKey, fieldKey, operation, inputData }) => true,\n            update: ({ session, context, listKey, fieldKey, operation, inputData, item }) => true,\n          },\n        }),\n      },\n    }),\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Relationship in Keystone\nDESCRIPTION: Demonstrates how to define a relationship field between Post and User lists in Keystone. The example shows a one-sided relationship where posts have authors, using the relationship field's ref configuration to connect to the User list.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/guides/relationships.md#2025-04-13_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { config, list } from '@keystone-6/core';\nimport { text, relationship } from '@keystone-6/core/fields';\n\nexport default config({\n  lists: {\n    User: list({ fields: { name: text() } }),\n    Post: list({\n      fields: {\n        title: text(),\n        content: text(),\n        authors: relationship({ ref: 'User', many: true, }),\n      },\n    }),\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a User List in Keystone\nDESCRIPTION: Example of creating a Person list with name, email, password, and admin status fields. Email is configured as unique, which is necessary for authentication.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/guides/auth-and-access-control.md#2025-04-13_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nconst Person = list({\n  access: allowAll,\n  fields: {\n    name: text(),\n    email: text({ isIndexed: 'unique' }),\n    password: password(),\n    isAdmin: checkbox(),\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Keystone Configuration in TypeScript\nDESCRIPTION: Basic structure for creating a Keystone configuration file. It imports the config function from @keystone-6/core and exports the default configuration.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/config/config.md#2025-04-13_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { config } from '@keystone-6/core';\n\nexport default config({ /* ... */ });\n```\n\n----------------------------------------\n\nTITLE: Database API Structure for Keystone Lists\nDESCRIPTION: Shows the structure of the database API available for each list in the Keystone system. It includes methods for finding, creating, updating, and deleting items.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/context/db-items.md#2025-04-13_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  findOne({ where: { id } }),\n  findMany({ where, take, skip, orderBy }),\n  count({ where }),\n  createOne({ data }),\n  createMany({ data }),\n  updateOne({ where, data }),\n  updateMany({ data }),\n  deleteOne({ where }),\n  deleteMany({ where }),\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Filter-Level Access Control\nDESCRIPTION: Shows how to use filter-level access control to restrict which items can be operated on by providing functions that return GraphQL filters. Includes examples for query, update, and delete operations.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/config/access-control.md#2025-04-13_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { config, list } from '@keystone-6/core';\nimport { checkbox } from '@keystone-6/core/fields';\n\nexport default config({\n  lists: {\n    ListKey: list({\n      fields: {\n        isReadable: checkbox(),\n        isUpdatable: checkbox(),\n        isDeletable: checkbox(),\n      }\n      access: {\n        filter: {\n          query: ({ session, context, listKey, operation }) => {\n            return { isReadable: { equals: true } };\n          },\n          update: ({ session, context, listKey, operation }) => {\n            return { isUpdatable: { equals: true } };\n          },\n          delete: ({ session, context, listKey, operation }) => {\n            return { isDeletable: { equals: true } };\n          },\n        }\n      },\n    }),\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Extending GraphQL Schema with Keystone's graphql.extend\nDESCRIPTION: Example of using graphql.extend to add a custom 'publishPost' mutation to the GraphQL schema. The mutation accepts a post ID, updates its status to 'published', and sets the publishDate to the current time.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/guides/schema-extension.md#2025-04-13_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { graphql, config } from '@keystone/core';\nimport { Context } from '.keystone/types';\n\nexport default config({\n  {/* ... */},\n  extendGraphqlSchema: graphql.extend(base => {\n    return {\n      mutation: {\n        publishPost: graphql.field({\n          type: base.object('Post'),\n          args: { id: graphql.arg({ type: graphql.nonNull(graphql.ID) }) },\n          resolve(source, { id }, context:Context) {\n            return context.db.Post.updateOne({\n              where: { id },\n              data: { status: 'published', publishDate: new Date().toISOString() },\n            });\n          },\n        }),\n      },\n    };\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: One-sided Relationship Query Example in GraphQL\nDESCRIPTION: Shows how to query posts with their authors using GraphQL in a one-sided relationship. This query retrieves all posts with their title, content, and the names of their authors.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/guides/relationships.md#2025-04-13_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  posts {\n    title\n    content\n    authors {\n      name\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Settings in Keystone.js Lists\nDESCRIPTION: Demonstrates how to configure database settings for a Keystone.js list, including setting UUID as the ID field type and custom table mapping. Shows the usage of idField and map options in the db configuration.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/config/lists.md#2025-04-13_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { config, list } from '@keystone-6/core';\n\nexport default config({\n  lists: {\n    SomeListName: list({\n      db: {\n        idField: { kind: 'uuid' },\n        map: 'table_name',\n      },\n      /* ... */\n    }),\n    /* ... */\n  },\n  /* ... */\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Filter-Level Access Control\nDESCRIPTION: Implements filter-based access control to restrict post visibility based on publication status.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/guides/auth-and-access-control.md#2025-04-13_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nfunction filterPosts ({ session }: { session?: Session }) {\n  // if the user is an Admin, they can access all the records\n  if (session?.data.isAdmin) return true;\n  // otherwise, filter for published posts\n  return { isPublished: { equals: true } }\n}\n\nconst Post = list({\n  access: {\n    operation: {\n      // see above\n    },\n    filter: {\n      query: filterPosts,\n    }\n  },\n  fields: {\n    // see above\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Keystone Field Types in TypeScript\nDESCRIPTION: This snippet demonstrates how to import and configure various field types in a Keystone project, including scalar types, relationship types, virtual types, file types, and complex types.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/fields/overview.md#2025-04-13_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { config, list } from '@keystone-6/core';\nimport {\n  // Scalar types\n  checkbox,\n  integer,\n  bigInt,\n  json,\n  float,\n  decimal,\n  password,\n  select,\n  multiselect,\n  text,\n  timestamp,\n  calendarDay,\n\n  // Relationship type\n  relationship,\n\n  // Virtual type\n  virtual,\n\n  // File types\n  file,\n  image,\n} from '@keystone-6/core/fields';\n\n// Complex types\nimport { document } from '@keystone-6/fields-document';\nimport { cloudinaryImage } from '@keystone-6/cloudinary';\n\nexport default config({\n  lists: {\n    SomeListName: list({\n      fields: {\n        someFieldName: text({ /* ... */ }),\n        /* ... */\n      },\n    }),\n    /* ... */\n  },\n  /* ... */\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a One-to-Many Relationship Between Users and Posts\nDESCRIPTION: Implementing a two-sided relationship between User and Post lists, where a post has one author (User) and a user can have many posts. This uses Keystone's relationship field.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/walkthroughs/lesson-2.md#2025-04-13_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { config, list } from '@keystone-6/core';\nimport { allowAll } from '@keystone-6/core/access';\nimport { text, relationship } from '@keystone-6/core/fields';\n\nconst lists = {\n  User: list({\n    access: allowAll,\n    fields: {\n      name: text({ validation: { isRequired: true } }),\n      email: text({ validation: { isRequired: true }, isIndexed: 'unique' }),\n      posts: relationship({ ref: 'Post.author', many: true }),\n    },\n  }),\n  Post: list({\n    access: allowAll,\n    fields: {\n      title: text(),\n      author: relationship({ ref: 'User.posts' }),\n    },\n  }),\n};\n\nexport default config({\n  db: {\n    provider: 'sqlite',\n    url: 'file:./keystone.db',\n  },\n  lists,\n});\n```\n\n----------------------------------------\n\nTITLE: GraphQL API for Authentication in Keystone 6\nDESCRIPTION: This GraphQL schema snippet shows the mutations and types added to the API when authentication is enabled. It includes mutations for user authentication and session management.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/config/auth.md#2025-04-13_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\ntype Mutation {\n  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult!\n  endSession: Boolean!\n}\n\ntype Query {\n  authenticatedItem: AuthenticatedItem\n}\n\nunion AuthenticatedItem = User\n\nunion UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure\n\ntype UserAuthenticationWithPasswordSuccess {\n  sessionToken: String!\n  item: User!\n}\n\ntype UserAuthenticationWithPasswordFailure {\n  message: String!\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Float Field in KeystoneJS Schema\nDESCRIPTION: Example configuration of a float field in a KeystoneJS schema definition. Demonstrates setting up a float field with default value, custom database mapping, validation requirements, and unique indexing.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/fields/float.md#2025-04-13_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { config, list } from '@keystone-6/core';\nimport { float } from '@keystone-6/core/fields';\n\nexport default config({\n  lists: {\n    SomeListName: list({\n      fields: {\n        someFieldName: float({\n          defaultValue: 3.14159,\n          db: { map: 'my_float' },\n          validation: {\n            isRequired: true,\n          },\n          isIndexed: 'unique',\n        }),\n        /* ... */\n      },\n    }),\n    /* ... */\n  },\n  /* ... */\n});\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query: Fetching Multiple Users\nDESCRIPTION: Example of a GraphQL query to fetch multiple users with filtering, ordering, and pagination options.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/graphql/overview.md#2025-04-13_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\ntype Query {\n  users(\n    where: UserWhereInput! = {}\n    orderBy: [UserOrderByInput!]! = []\n    take: Int\n    skip: Int! = 0\n  ): [User!]\n}\n\ntype User {\n  id: ID!\n  name: String\n}\n\ninput UserWhereInput {\n  AND: [UserWhereInput!]\n  OR: [UserWhereInput!]\n  NOT: [UserWhereInput!]\n  id: IDFilter\n  name: StringNullableFilter\n}\n\ninput IDFilter {\n  equals: ID\n  in: [ID!]\n  notIn: [ID!]\n  lt: ID\n  lte: ID\n  gt: ID\n  gte: ID\n  not: IDFilter\n}\n\ninput StringNullableFilter {\n  equals: String\n  in: [String!]\n  notIn: [String!]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  mode: QueryMode\n  not: NestedStringNullableFilter\n}\n\nenum QueryMode {\n  default\n  insensitive\n}\n\ninput NestedStringNullableFilter {\n  equals: String\n  in: [String!]\n  notIn: [String!]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringNullableFilter\n}\n\ninput UserOrderByInput {\n  id: OrderDirection\n  name: OrderDirection\n}\n\nenum OrderDirection {\n  asc\n  desc\n}\n```\n\n----------------------------------------\n\nTITLE: Complete KeystoneJS Schema with Publishing Workflow\nDESCRIPTION: The final schema that includes all the publishing workflow features: timestamp for publish date, select field for status with default value and improved UI. This provides everything needed for editorial control of content.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/walkthroughs/lesson-3.md#2025-04-13_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// keystone.ts\nimport { list, config } from '@keystone-6/core';\nimport { text, timestamp, select, relationship } from '@keystone-6/core/fields';\n\nconst lists = {\n  User: list({\n    fields: {\n      name: text({ validation: { isRequired: true } }),\n      email: text({ validation: { isRequired: true }, isIndexed: 'unique' }),\n      posts: relationship({ ref: 'Post.author', many: true }),\n    },\n  }),\n  Post: list({\n    fields: {\n      title: text(),\n      publishedAt: timestamp(),\n      status: select({\n        options: [\n          { label: 'Published', value: 'published' },\n          { label: 'Draft', value: 'draft' },\n        ],\n        defaultValue: 'draft',\n        ui: { displayMode: 'segmented-control' },\n      }),\n      author: relationship({ ref: 'User.posts' }),\n    },\n  }),\n};\n\nexport default config({\n  db: {\n    provider: 'sqlite',\n    url: 'file:./keystone.db',\n  },\n  lists,\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Component Blocks in TypeScript/React\nDESCRIPTION: Demonstrates how to create a custom quote component block with content and attribution fields. The component includes preview rendering and field schema configuration.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/guides/document-fields.md#2025-04-13_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport { NotEditable, component, fields } from '@keystone-6/fields-document/component-blocks';\n\nexport const componentBlocks = {\n  quote: component({\n    preview: (props) => {\n      return (\n        <div\n          style={{\n            borderLeft: '3px solid #CBD5E0',\n            paddingLeft: 16,\n          }}\n        >\n          <div style={{ fontStyle: 'italic', color: '#4A5568' }}>{props.fields.content.element}</div>\n          <div style={{ fontWeight: 'bold', color: '#718096' }}>\n            <NotEditable>— </NotEditable>\n            {props.fields.attribution.element}\n          </div>\n        </div>\n      );\n    },\n    label: 'Quote',\n    schema: {\n      content: fields.child({\n        kind: 'block',\n        placeholder: 'Quote...',\n        formatting: { inlineMarks: 'inherit', softBreaks: 'inherit' },\n        links: 'inherit',\n      }),\n      attribution: fields.child({ kind: 'inline', placeholder: 'Attribution...' }),\n    },\n    chromeless: true,\n  }),\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing Test Environment with KeystoneJS\nDESCRIPTION: Sets up the test environment with database configuration and reset functionality. Uses Jest for running tests and configures a unique database per test worker for parallel execution.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/guides/testing.md#2025-04-13_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getContext } from '@keystone-6/core/context';\nimport { resetDatabase } from '@keystone-6/core/testing';\nimport * as PrismaModule from '.prisma/client';\nimport baseConfig from './keystone';\n\nconst dbUrl = `file:./test-${process.env.JEST_WORKER_ID}.db`;\nconst prismaSchemaPath = path.join(__dirname, 'schema.prisma');\nconst config = { ...baseConfig, db: { ...baseConfig.db, url: dbUrl } };\n\nbeforeEach(async () => {\n  await resetDatabase(dbUrl, prismaSchemaPath);\n});\n\nconst context = getContext(config, PrismaModule);\n\ntest('Your unit test', async () => {\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Post.content Document Field with Full Formatting Options\nDESCRIPTION: TypeScript configuration for the Post.content document field with full formatting capabilities, including dividers, links, multi-column layouts, and inline relationships for mentioning authors.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/examples/document-field/README.md#2025-04-13_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ncontent: document({\n  formatting: true,\n  dividers: true,\n  links: true,\n  layouts: [\n    [1, 1],\n    [1, 1, 1],\n  ],\n  relationships: {\n    mention: {\n      kind: 'inline',\n      listKey: 'Author',\n      label: 'Mention',\n      selection: 'id name',\n    },\n  },\n}),\n```\n\n----------------------------------------\n\nTITLE: Configuring Stateless Sessions in Keystone.js with TypeScript\nDESCRIPTION: Example of configuring stateless sessions using the statelessSessions() function. This defines how session cookies are encrypted and managed, with options for secret, maxAge, and cookie security settings.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/config/session.md#2025-04-13_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { config } from '@keystone-6/core';\nimport { statelessSessions } from '@keystone-6/core/session';\n\nexport default config({\n  session: statelessSessions({\n    secret: 'ABCDEFGH1234567887654321HGFEDCBA',\n    ironOptions: { /* ... */ },\n    maxAge: 60 * 60 * 24,\n    secure: true,\n    path: '/',\n    domain: 'localhost',\n    sameSite: 'lax',\n  }),\n  /* ... */\n});\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query for Filtered Posts\nDESCRIPTION: Example GraphQL query demonstrating how to filter posts by publication status.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/guides/auth-and-access-control.md#2025-04-13_snippet_10\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  posts(where: { isPublished: { equals: true } }) {\n    title\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Self-referencing Two-sided Relationship in Keystone\nDESCRIPTION: Demonstrates a self-referencing two-sided relationship within the User list. This creates a follows/followers relationship between users, where both sides reference each other and allow access from either direction.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/guides/relationships.md#2025-04-13_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { config, list } from '@keystone-6/core';\nimport { text, relationship } from '@keystone-6/core/fields';\n\nexport default config({\n  lists: {\n    User: list({\n      fields: {\n        name: text(),\n        follows: relationship({ ref: 'User.followers', many: true }),\n        followers: relationship({ ref: 'User.follows', many: true }),\n      },\n    }),\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Querying Data in Next.js getServerSideProps\nDESCRIPTION: Demonstrates how to access Keystone data directly within a Next.js getServerSideProps function. This allows server-side rendering with data from the Keystone database without making external HTTP requests.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/blog/nextjs-keystone.md#2025-04-13_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n/* nextjs-app/src/pages/index.tsx */\n\nexport const getServerSideProps: GetServerSideProps = async ({ req, res }) => {\n  const users = await context.db.User.findMany();\n\n  return {\n    props: { users: users }, // will be passed to the page component as props\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Initial User Creation in Keystone 6 Authentication\nDESCRIPTION: This snippet shows how to configure the initFirstItem option in Keystone 6 authentication. It allows for bootstrapping the first user into the system via the Admin UI, specifying fields to include and additional item data.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/config/auth.md#2025-04-13_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createAuth } from '@keystone-6/auth';\n\nconst { withAuth } = createAuth({\n  listKey: 'User',\n  identityField: 'email',\n  secretField: 'password',\n\n  initFirstItem: {\n    fields: ['email', 'password'],\n    itemData: { isAdmin: true },\n    skipKeystoneWelcome: false,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Combining Multiple Filters in GraphQL Query\nDESCRIPTION: A GraphQL query demonstrating how to combine multiple filters to find tasks matching multiple conditions simultaneously.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/guides/filters.md#2025-04-13_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  tasks(where: {\n    label: { contains: \"He\" },\n    finishBy: { gt: \"2022-01-01T00:00:00.000Z\" }\n  }) {\n    id\n    label\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering by To-Many Relationship with 'none' in GraphQL\nDESCRIPTION: A GraphQL query showing how to filter people based on the absence of specific tasks, specifically finding people with no high-priority, incomplete tasks.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/guides/filters.md#2025-04-13_snippet_14\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  people(where: { tasks: { none: { priority: { equals: high }, isComplete: { equals: false } } } }) {\n    id\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Virtual Field with Arguments\nDESCRIPTION: This example shows how to create a virtual field that accepts arguments. It creates an 'excerpt' field on a Post list that takes a 'length' parameter to control how much of the content to return.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/guides/virtual-fields.md#2025-04-13_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport default config({\n  lists: {\n    Post: list({\n      fields: {\n        content: text(),\n        excerpt: virtual({\n          field: graphql.field({\n            type: graphql.String,\n            args: {\n              length: graphql.arg({\n                type: graphql.nonNull(graphql.Int),\n                defaultValue: 200\n              }),\n            },\n            resolve(item, { length }) {\n              if (!item.content) {\n                return null;\n              }\n              const content = item.content as string;\n              if (content.length <= length) {\n                return content;\n              } else {\n                return content.slice(0, length - 3) + '...';\n              }\n            },\n          }),\n          ui: { query: '(length: 500)' },\n        }),\n      },\n    }),\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL Database in Keystone\nDESCRIPTION: Example configuration for using PostgreSQL as the database provider in Keystone, including connection URL and advanced options.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/config/config.md#2025-04-13_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport default config<TypeInfo>({\n  db: {\n    provider: 'postgresql',\n    url: 'postgres://dbuser:dbpass@localhost:5432/keystone',\n    onConnect: async context => { /* ... */ },\n    // Optional advanced configuration\n    enableLogging: true,\n    idField: { kind: 'uuid' },\n    shadowDatabaseUrl: 'postgres://dbuser:dbpass@localhost:5432/shadowdb'\n  },\n  /* ... */\n});\n```\n\n----------------------------------------\n\nTITLE: Complete Authentication Configuration\nDESCRIPTION: Final auth.ts file with complete authentication and session configuration, including initial user creation.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/walkthroughs/lesson-4.md#2025-04-13_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// auth.ts\nimport { createAuth } from '@keystone-6/auth';\nimport { statelessSessions } from '@keystone-6/core/session';\n\nconst { withAuth } = createAuth({\n  listKey: 'User',\n  identityField: 'email',\n  sessionData: 'name',\n  secretField: 'password',\n  initFirstItem: {\n    fields: ['name', 'email', 'password'],\n  },\n});\n\nlet sessionSecret = '-- DEV COOKIE SECRET; CHANGE ME --';\nlet sessionMaxAge = 60 * 60 * 24; // 24 hours\n\nconst session = statelessSessions({\n  maxAge: sessionMaxAge,\n  secret: sessionSecret,\n});\n\nexport { withAuth, session }\n```\n\n----------------------------------------\n\nTITLE: Configuring Document Field Type in KeystoneJS with TypeScript\nDESCRIPTION: Example configuration for setting up a document field in a KeystoneJS schema. Shows how to import and configure the document field type with various options including relationships, component blocks, formatting, links, dividers, and layouts.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/fields/document.md#2025-04-13_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { config, list } from '@keystone-6/core';\nimport { document } from '@keystone-6/fields-document';\n\nexport default config({\n  lists: {\n    SomeListName: list({\n      fields: {\n        someFieldName: document({\n          relationships: { /* ... */ },\n          componentBlocks: {\n            block: { /* ... */ },\n            /* ... */\n          },\n          formatting: { /* ... */ },\n          links: true,\n          dividers: true,\n          layouts: [/* ... */],\n        }),\n        /* ... */\n      },\n    }),\n    /* ... */\n  },\n  /* ... */\n});\n```\n\n----------------------------------------\n\nTITLE: Executing updateMany Query in TypeScript\nDESCRIPTION: Demonstrates how to use the updateMany method to update multiple users in a single operation. Each update specifies the user to update and the data to change. The query parameter defines the fields to be returned for each updated user.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/context/query.md#2025-04-13_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst users = await context.query.User.updateMany({\n  data: [\n    {\n      where: { id: '...' },\n      data: {\n        name: 'Alice',\n        posts: { create: [{ title: 'Alices first post' }] },\n      },\n    },\n    {\n      where: { id: '...' },\n      data: {\n        name: 'Bob',\n        posts: { create: [{ title: 'Bobs first post' }] },\n      },\n    },\n  ],\n  query: 'id name posts { id title }',\n});\n```\n\n----------------------------------------\n\nTITLE: Executing createMany Query in TypeScript\nDESCRIPTION: Demonstrates how to use the createMany method to create multiple users with related posts in a single operation. The query parameter defines the fields to be returned for each created user.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/context/query.md#2025-04-13_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst users = await context.query.User.createMany({\n  data: [\n    {\n      name: 'Alice',\n      posts: { create: [{ title: 'Alices first post' }] },\n    },\n    {\n      name: 'Bob',\n      posts: { create: [{ title: 'Bobs first post' }] },\n    },\n  ],\n  query: 'id name posts { id title }',\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Checkbox Field in Keystone.js (TypeScript)\nDESCRIPTION: This snippet demonstrates how to configure a checkbox field in a Keystone.js project. It shows the usage of various options such as defaultValue, db mapping, and GraphQL nullability settings.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/fields/checkbox.md#2025-04-13_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { config, list } from '@keystone-6/core';\nimport { checkbox } from '@keystone-6/core/fields';\n\nexport default config({\n  lists: {\n    SomeListName: list({\n      fields: {\n        someFieldName: checkbox({\n          defaultValue: true,\n          db: { map: 'my_checkbox' },\n          graphql: {\n            isNonNull: {\n              read: true,\n              create: true,\n            },\n          }\n        }),\n        /* ... */\n      },\n    }),\n    /* ... */\n  },\n  /* ... */\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing afterOperation Hooks in KeystoneJS Config\nDESCRIPTION: Example showing how to configure afterOperation hooks at both list and field levels in KeystoneJS. The hooks can be defined for create, update, and delete operations, with access to context, data, and item information.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/config/hooks.md#2025-04-13_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { config, list } from '@keystone-6/core';\nimport { text } from '@keystone-6/core/fields';\n\nexport default config({\n  lists: {\n    SomeListName: list({\n      hooks: {\n        afterOperation: {\n          create: async ({\n            listKey,\n            operation,\n            inputData,\n            item,\n            resolvedData,\n            context,\n          }) => { /* ... */ },\n          update: async ({\n            listKey,\n            operation,\n            inputData,\n            originalItem,\n            item,\n            resolvedData,\n            context,\n          }) => { /* ... */ },\n          delete: async ({\n            listKey,\n            operation,\n            originalItem,\n            context,\n          }) => { /* ... */ },\n        },\n      },\n      fields: {\n        someFieldName: text({\n          hooks: {\n            afterOperation: {\n              create: async ({\n                listKey,\n                fieldKey,\n                operation,\n                inputData,\n                item,\n                resolvedData,\n                context,\n              }) => { /* ... */ },\n              update: async ({\n                listKey,\n                fieldKey,\n                operation,\n                inputData,\n                originalItem,\n                item,\n                resolvedData,\n                context,\n              }) => { /* ... */ },\n              delete: async ({\n                listKey,\n                fieldKey,\n                operation,\n                originalItem,\n                context,\n              }) => { /* ... */ },\n            },\n          },\n        }),\n      },\n    }),\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Filtering People with Any Tasks in GraphQL\nDESCRIPTION: A GraphQL query demonstrating how to find people who have any tasks assigned by using an empty object with the 'some' operator.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/guides/filters.md#2025-04-13_snippet_13\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  people(where: { tasks: { some: {} } }) {\n    id\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing resolveInput Hook for Title Capitalization in Keystone.js\nDESCRIPTION: Shows how to use the resolveInput hook to modify incoming data by capitalizing the first letter of a blog post title before saving to the database.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/guides/hooks.md#2025-04-13_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { config, list } from '@keystone-6/core';\nimport { text } from '@keystone-6/core/fields';\n\nexport default config({\n  lists: {\n    Post: list({\n      fields: {\n        title: text({ validation: { isRequired: true } }),\n        content: text({ validation: { isRequired: true } }),\n       },\n      hooks: {\n        resolveInput: ({ resolvedData }) => {\n          const { title } = resolvedData;\n          if (title) {\n            return {\n              ...resolvedData,\n              // Ensure the first letter of the title is capitalised\n              title: title[0].toUpperCase() + title.slice(1)\n            }\n          }\n          // We always return resolvedData from the resolveInput hook\n          return resolvedData;\n        }\n      },\n    }),\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Singleton List in KeystoneJS Schema\nDESCRIPTION: This snippet shows how to define a Singleton list named 'WebsiteConfiguration' in the Keystone schema. It demonstrates setting the 'isSingleton' property to true and defining fields for the list.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/blog/singleton.md#2025-04-13_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// schema.ts\nexport default config({\n  lists: ({\n    WebsiteConfiguration: list({\n      ...\n      isSingleton: true,\n      fields: { \n        websiteName: text(),\n        copyrightText: text(),\n      }\n    }),\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Context Object Structure Overview in TypeScript\nDESCRIPTION: This code snippet shows the structure of the Context object in KeystoneJS, including all its properties and methods. It demonstrates the available APIs for querying, database operations, session management, GraphQL operations, and image handling.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/context/overview.md#2025-04-13_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Context } from '.keystone/types'\n\nconst context = {\n  // Query API\n  query,\n\n  // Database API\n  db,\n\n  // HTTP request object\n  req,\n  res,\n\n  // Session API\n  session,\n  sessionStrategy\n\n  // GraphQL helpers\n  graphql: {\n    schema,\n    run,\n    raw,\n  },\n\n  // New context creators\n  sudo,\n  withRequest,\n  withSession,\n\n  // Raw Prisma access\n  prisma,\n\n  // Images API\n  images: {\n    getUrl,\n    getDataFromRef,\n    getDataFromStream,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Password Field in KeystoneJS Schema\nDESCRIPTION: Example of configuring a password field in a KeystoneJS schema with custom mapping, validation rules, and security settings. Demonstrates setting minimum and maximum length requirements, required field validation, and common password rejection.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/fields/password.md#2025-04-13_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { config, list } from '@keystone-6/core';\nimport { password } from '@keystone-6/core/fields';\n\nexport default config({\n  lists: {\n    SomeListName: list({\n      fields: {\n        someFieldName: password({\n          db: { map: 'password_field' },\n          validation: {\n            length: { min: 10, max: 1000 },\n            isRequired: true,\n            rejectCommon: true,\n          },\n        }),\n        /* ... */\n      },\n    }),\n    /* ... */\n  },\n  /* ... */\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Virtual Fields in Keystone Schema\nDESCRIPTION: Comprehensive example of creating and configuring a virtual field in a Keystone schema. Shows how to define the field type, arguments, and resolver function.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/fields/virtual.md#2025-04-13_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { config, createSchema, graphql, list } from '@keystone-6/core';\nimport { virtual } from '@keystone-6/core/fields';\n\nexport default config({\n  lists: {\n    SomeListName: list({\n      fields: {\n        someFieldName: virtual({\n          field: graphql.field({\n            type: graphql.String,\n            args: { something: graphql.arg({ type: graphql.Int }) },\n            resolve(item, args, context, info) {\n\n            }\n          })\n        }),\n        /* ... */\n      },\n    }),\n    /* ... */\n  },\n  /* ... */\n});\n```\n\n----------------------------------------\n\nTITLE: Two-sided Many-to-Many Relationship in Keystone\nDESCRIPTION: Configures a two-sided relationship where posts can have multiple authors and users can have multiple posts. Both sides of the relationship have many set to true to establish this cardinality.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/guides/relationships.md#2025-04-13_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { config, list } from '@keystone-6/core';\nimport { text, relationship } from '@keystone-6/core/fields';\n\nexport default config({\n  lists: {\n    User: list({\n      fields: {\n        name: text(),\n        posts: relationship({ ref: 'Post.authors', many: true }),\n      },\n    }),\n    Post: list({\n      fields: {\n        title: text(),\n        content: text(),\n        authors: relationship({ ref: 'User.posts', many: true }),\n      },\n    }),\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring an Image Field with Custom Storage in Keystone\nDESCRIPTION: This example demonstrates how to configure an image field in Keystone with custom storage implementation. It shows defining a list with an image field that uses filesystem storage to save uploaded images to the public/files directory.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/fields/image.md#2025-04-13_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { config, list } from '@keystone-6/core';\nimport { image } from '@keystone-6/core/fields';\nimport fs from 'node:fs/promises';\n\nexport default config({\n  lists: {\n    SomeListName: list({\n      fields: {\n        avatar: image({\n          storage: {\n            async put(key, stream) {\n              await fs.writeFile(`public/files/${key}`, stream)\n            },\n            async delete(key) {\n              await fs.unlink(`public/files/${key}`)\n            },\n            url(key) {\n              return `http://localhost:3000/files/${key}`\n            },\n          },\n        }),\n        /* ... */\n      },\n    }),\n    /* ... */\n  },\n  /* ... */\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Relational Virtual Field\nDESCRIPTION: This example demonstrates a more complex virtual field that fetches related data. It defines an 'authorName' field on a Post list that retrieves the author's name by querying the related Author record.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/guides/virtual-fields.md#2025-04-13_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport default config({\n  lists: {\n    Post: list({\n      fields: {\n        content: text(),\n        author: relationship({ ref: 'Author', many: false }),\n        authorName: virtual({\n          field: graphql.field({\n            type: graphql.String,\n            async resolve(item, args, context) {\n              const { author } = await context.query.Post.findOne({\n                where: { id: item.id.toString() },\n                query: 'author { name }',\n              });\n              return author && author.name;\n            },\n          }),\n        }),\n      },\n    }),\n    Author: list({\n      fields: {\n        name: text({ validation: { isRequired: true } }),\n      },\n    }),\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Component Blocks in Keystone Config\nDESCRIPTION: Shows how to integrate component blocks into the Keystone configuration file by importing and configuring them with document fields.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/guides/document-fields.md#2025-04-13_snippet_11\n\nLANGUAGE: ts\nCODE:\n```\nimport { config, list } from '@keystone-6/core';\nimport { document } from '@keystone-6/fields-document';\nimport { componentBlocks } from './component-blocks';\n\nexport default config({\n  lists: {\n    ListName: list({\n      fields: {\n        fieldName: document({\n          ui: {\n            views: './component-blocks'\n          },\n          componentBlocks,\n        }),\n      },\n    }),\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing afterOperation Hook for Welcome Email in Keystone.js\nDESCRIPTION: Shows how to trigger side effects using the afterOperation hook to send a welcome email when a new user is created.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/guides/hooks.md#2025-04-13_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { config, list } from '@keystone-6/core';\nimport { text } from '@keystone-6/core/fields';\n// Keystone leaves it up to you to decide how best to implement email in your system\nimport { sendWelcomeEmail } from './lib/welcomeEmail';\n\nexport default config({\n  lists: {\n    User: list({\n      fields: {\n        name: text(),\n        email: text(),\n       },\n      hooks: {\n        afterOperation: ({ operation, item }) => {\n          if (operation === 'create') {\n            sendWelcomeEmail(item.name, item.email);\n          }\n        }\n      },\n    }),\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Executing findOne Query in TypeScript\nDESCRIPTION: Demonstrates how to use the findOne method to retrieve a single user by ID, including related posts. The query parameter specifies which fields to return.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/context/query.md#2025-04-13_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = await context.query.User.findOne({\n  where: { id: '...' },\n  query: 'id name posts { id title }',\n});\n```\n\n----------------------------------------\n\nTITLE: Complete Keystone Configuration with Authentication\nDESCRIPTION: Final keystone.ts file showing the complete schema with User and Post lists, authentication integration, and access control for Admin UI.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/walkthroughs/lesson-4.md#2025-04-13_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n//keystone.ts\nimport { list, config } from '@keystone-6/core';\nimport { password, text, timestamp, select, relationship } from '@keystone-6/core/fields';\nimport { withAuth, session } from './auth';\n\nconst lists = {\n  User: list({\n    fields: {\n      name: text({ validation: { isRequired: true } }),\n      email: text({ validation: { isRequired: true }, isIndexed: 'unique' }),\n      posts: relationship({ ref: 'Post.author', many: true }),\n      password: password({ validation: { isRequired: true } })\n    },\n  }),\n  Post: list({\n    fields: {\n      title: text(),\n      publishedAt: timestamp(),\n      status: select({\n        options: [\n          { label: 'Published', value: 'published' },\n          { label: 'Draft', value: 'draft' },\n        ],\n        defaultValue: 'draft',\n        ui: { displayMode: 'segmented-control' },\n      }),\n      author: relationship({ ref: 'User.posts' }),\n    },\n  }),\n};\n\nexport default config(\n  withAuth({\n    db: {\n      provider: 'sqlite',\n      url: 'file:./keystone.db',\n    },\n    lists,\n    session,\n    ui: {\n      isAccessAllowed: (context) => !!context.session?.data,\n    },\n  })\n);\n```\n\n----------------------------------------\n\nTITLE: Two-sided One-to-One Relationship in Keystone\nDESCRIPTION: Configures a two-sided relationship where posts have a single author and users can create only one post. Both sides of the relationship have many set to false to establish this cardinality.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/guides/relationships.md#2025-04-13_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { config, list } from '@keystone-6/core';\nimport { text, relationship } from '@keystone-6/core/fields';\n\nexport default config({\n  lists: {\n    User: list({\n      fields: {\n        name: text(),\n        post: relationship({ ref: 'Post.author', many: false }),\n      },\n    }),\n    Post: list({\n      fields: {\n        title: text(),\n        content: text(),\n        author: relationship({ ref: 'User.post', many: false }),\n      },\n    }),\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Custom GraphQL Query for Recent Posts\nDESCRIPTION: Implements a custom GraphQL query to fetch recent posts for a user within a specified number of days. Includes default parameter and date filtering.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/examples/extend-graphql-schema-graphql-tools/README.md#2025-04-13_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n  extendGraphqlSchema: graphQLSchemaExtension({\n    typeDefs: `\n      type Query {\n        \"\"\" Return all posts for a user from the last <days> days \"\"\"\n        recentPosts(id: ID!, days: Int! = 7): [Post]\n      }`,\n    resolvers: {\n      Query: {\n        recentPosts: (root, { id, days }, context) => {\n          const cutoff = new Date(\n            new Date().setUTCDate(new Date().getUTCDate() - days)\n          ).toUTCString();\n          return context.db.Post.findMany({\n            where: { author: { id }, publishDate_gt: cutoff },\n          });\n        },\n      },\n    },\n  }),\n```\n\n----------------------------------------\n\nTITLE: Configuring Keystone with SQLite Database\nDESCRIPTION: Sets up the Keystone configuration with a SQLite database. This includes specifying the database provider and the file path for the SQLite database.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/walkthroughs/lesson-1.md#2025-04-13_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { config } from '@keystone-6/core';\n\nexport default config({\n  db: {\n    provider: 'sqlite',\n    url: 'file:./keystone.db',\n  },\n  lists: {} // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Decimal Field in KeystoneJS using TypeScript\nDESCRIPTION: Example showing how to configure a decimal field in a KeystoneJS list definition with various options including precision, scale, validation rules, and database mapping. The example demonstrates setting default values, validation constraints, and indexing options.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/fields/decimal.md#2025-04-13_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { config, list } from '@keystone-6/core';\nimport { decimal } from '@keystone-6/core/fields';\n\nexport default config({\n  lists: {\n    SomeListName: list({\n      fields: {\n        someFieldName: decimal({\n          defaultValue: '3.142',\n          precision: 12,\n          scale: 3,\n          db: { map: 'my_decimal' },\n          validation: {\n            isRequired: true,\n            max: '10000',\n            min: '2',\n          },\n          isIndexed: 'unique',\n        }),\n        /* ... */\n      },\n    }),\n    /* ... */\n  },\n  /* ... */\n});\n```\n\n----------------------------------------\n\nTITLE: Querying Multiple Users with Keystone's Database API\nDESCRIPTION: Shows how to use the findMany method to retrieve multiple users with filtering, pagination, and sorting options.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/context/db-items.md#2025-04-13_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst users = await context.db.User.findMany({\n  where: { name: { startsWith: 'A' } },\n  take: 10,\n  skip: 20,\n  orderBy: [{ name: 'asc' }],\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Keystone.js with User List Schema\nDESCRIPTION: Basic Keystone.js configuration with a User list that includes name and email fields. This serves as the starting point for the relationship tutorial.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/walkthroughs/lesson-2.md#2025-04-13_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// keystone.ts\nimport { config, list } from '@keystone-6/core';\nimport { allowAll } from '@keystone-6/core/access';\nimport { text } from '@keystone-6/core/fields';\n\nexport default config({\n  db: {\n    provider: 'sqlite',\n    url: 'file:./keystone.db',\n  },\n  lists: {\n    User: list({\n      access: allowAll,\n      fields: {\n        name: text({ validation: { isRequired: true } }),\n        email: text({ validation: { isRequired: true }, isIndexed: 'unique' }),\n      },\n    }),\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing BeforeOperation Hooks in KeystoneJS\nDESCRIPTION: Example demonstrating the implementation of beforeOperation hooks for both list and field levels in KeystoneJS. These hooks execute just before database operations and are useful for performing side effects.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/config/hooks.md#2025-04-13_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { config, list } from '@keystone-6/core';\nimport { text } from '@keystone-6/core/fields';\n\nexport default config({\n  lists: {\n    SomeListName: list({\n      hooks: {\n        beforeOperation: {\n          create: async ({\n            listKey,\n            operation,\n            inputData,\n            resolvedData,\n            context,\n          }) => { /* ... */ },\n          update: async ({\n            listKey,\n            operation,\n            inputData,\n            item,\n            resolvedData,\n            context,\n          }) => { /* ... */ },\n          delete: async ({\n            listKey,\n            operation,\n            item,\n            context,\n          }) => { /* ... */ },\n        },\n      },\n      fields: {\n        someFieldName: text({\n          hooks: {\n            beforeOperation: {\n              create: async ({\n                listKey,\n                fieldKey,\n                operation,\n                inputData,\n                resolvedData,\n                context,\n              }) => { /* ... */ },\n              update: async ({\n                listKey,\n                fieldKey,\n                operation,\n                inputData,\n                item,\n                resolvedData,\n                context,\n              }) => { /* ... */ },\n              delete: async ({\n                listKey,\n                fieldKey,\n                operation,\n                item,\n                context,\n              }) => { /* ... */ },\n            },\n          },\n        }),\n      },\n    }),\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Cloudinary Image Field in KeystoneJS Schema\nDESCRIPTION: This snippet demonstrates how to import and configure a cloudinaryImage field in a KeystoneJS schema. It includes setting up the Cloudinary account details using environment variables for security.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/fields/cloudinaryimage.md#2025-04-13_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { config, list } from '@keystone-6/core';\nimport { cloudinaryImage } from '@keystone-6/cloudinary';\n\nexport default config({\n  lists: {\n    SomeListName: list({\n      fields: {\n        someFieldName: cloudinaryImage({\n          cloudinary: {\n            cloudName: process.env.CLOUDINARY_CLOUD_NAME,\n            apiKey: process.env.CLOUDINARY_API_KEY,\n            apiSecret: process.env.CLOUDINARY_API_SECRET,\n            folder: process.env.CLOUDINARY_API_FOLDER,\n          },\n        }),\n        /* ... */\n      },\n    }),\n    /* ... */\n  },\n  /* ... */\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Operation-Level Access Control\nDESCRIPTION: Sets up operation-based access control for CRUD operations based on admin status.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/guides/auth-and-access-control.md#2025-04-13_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst isAdmin = ({ session }: { session?: Session }) => Boolean(session?.data.isAdmin);\n\nconst Post = list({\n  access: {\n    operation: {\n      query: isAdmin,\n      create: isAdmin,\n      update: isAdmin,\n      delete: isAdmin,\n    },\n  },\n  fields: {\n    // see above\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Session Data in Keystone 6 Authentication\nDESCRIPTION: This snippet demonstrates how to configure session data in Keystone 6 authentication. It specifies which fields should be populated on the session.data object for authenticated users.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/config/auth.md#2025-04-13_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createAuth } from '@keystone-6/auth'\n\nconst { withAuth } = createAuth({\n  listKey: 'User',\n  identityField: 'email',\n  secretField: 'password',\n  sessionData: 'id name isAdmin',\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Authentication in Keystone\nDESCRIPTION: Creating authentication configuration using createAuth from the @keystone-6/auth package. Defines which list to use for users and which fields store identity and password.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/guides/auth-and-access-control.md#2025-04-13_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport { createAuth } from '@keystone-6/auth';\n\nconst { withAuth } = createAuth({\n  listKey: 'Person',\n  identityField: 'email',\n  secretField: 'password',\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing resolveInput Hooks in KeystoneJS\nDESCRIPTION: This code shows the detailed implementation of resolveInput hooks with their arguments for both list and field levels. It demonstrates how to access context variables and properly return transformed data for create and update operations.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/config/hooks.md#2025-04-13_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { config, list } from '@keystone-6/core';\nimport { text } from '@keystone-6/core/fields';\n\nexport default config({\n  lists: {\n    SomeListName: list({\n      hooks: {\n        resolveInput: {\n          create: async ({\n            listKey,\n            operation, // always 'create'\n            inputData,\n            item,\n            resolvedData,\n            context,\n          }) => {\n            /* ... */\n            return resolvedData;\n          },\n          update: async ({\n            listKey,\n            operation, // always 'update'\n            inputData,\n            item,\n            resolvedData,\n            context,\n          }) => {\n            /* ... */\n            return resolvedData;\n          },\n        },\n      },\n      fields: {\n        someFieldName: text({\n          hooks: {\n            resolveInput: {\n              create: async ({\n                listKey,\n                fieldKey,\n                operation,\n                inputData,\n                item,\n                resolvedData,\n                context,\n              }) => {\n                /* ... */\n                return resolvedData[fieldKey];\n              },\n              update: async ({\n                listKey,\n                fieldKey,\n                operation,\n                inputData,\n                item,\n                resolvedData,\n                context,\n              }) => {\n                /* ... */\n                return resolvedData[fieldKey];\n              },\n            },\n          },\n        }),\n      },\n    }),\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Two-sided One-to-Many Relationship in Keystone\nDESCRIPTION: Configures a two-sided relationship where posts have a single author but users can have multiple posts. The author field has many set to false, while the posts field has many set to true to establish this cardinality.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/guides/relationships.md#2025-04-13_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { config, list } from '@keystone-6/core';\nimport { text, relationship } from '@keystone-6/core/fields';\n\nexport default config({\n  lists: {\n    User: list({\n      fields: {\n        name: text(),\n        posts: relationship({ref: 'Post.author', many: true }),\n      },\n    }),\n    Post: list({\n      fields: {\n        title: text(),\n        content: text(),\n        author: relationship({ ref: 'User.posts', many: false }),\n      },\n    }),\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating User List with Fields in Keystone\nDESCRIPTION: Defines a User list in Keystone with name and email fields. It includes access control, field validation, and indexing for the email field.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/walkthroughs/lesson-1.md#2025-04-13_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { config, list } from '@keystone-6/core';\nimport { allowAll } from '@keystone-6/core/access';\nimport { text } from '@keystone-6/core/fields';\n\nexport default config({\n  db: {\n    provider: 'sqlite',\n    url: 'file:./keystone.db',\n  },\n  lists: {\n    User: list({\n      access: allowAll,\n      fields: {\n        name: text({ validation: { isRequired: true } }),\n        email: text({ validation: { isRequired: true }, isIndexed: 'unique' }),\n      },\n    }),\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Custom Page in Keystone Admin UI (TSX)\nDESCRIPTION: This snippet shows how to create a simple custom page in the Keystone Admin UI using TypeScript and React. It creates a basic page with a title and a link.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/guides/custom-admin-ui-pages.md#2025-04-13_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n// admin/pages/custom-page.tsx\nimport Link from 'next/link'\n\nexport default function CustomPage () {\n    return (\n        <>\n            <h1>This is a custom Admin UI Page</h1>\n            <p>It can be accessed via the route <Link href=\"/custom-page\">/custom-page</Link></p>\n        </>\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Extending GraphQL Schema with GraphQL-Tools\nDESCRIPTION: Example of using GraphQL-Tools' mergeSchemas to extend the schema with a custom 'publishPost' mutation. This approach uses typeDefs and resolvers to achieve the same functionality as the graphql.extend example.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/guides/schema-extension.md#2025-04-13_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport default config({\n  {/* ... */},\n  extendGraphqlSchema: schema =>\n    mergeSchemas({\n      schemas: [schema],\n      typeDefs: `\n      type Mutation {\n        publishPost(id: ID!): Post\n      `,\n      resolvers: {\n        Mutation: {\n          publishPost: (root, { id }, context) => {\n            return context.db.Post.updateOne({\n              where: { id },\n              data: { status: 'published', publishDate: new Date().toUTCString() },\n            });\n          },\n        },\n      },\n    }),\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Timestamp Field in Keystone.js Lists\nDESCRIPTION: This example demonstrates how to configure a timestamp field in a Keystone.js list definition. The field is set with a default value, custom database mapping, validation requirements, and unique indexing. It shows the complete structure needed within a Keystone config object.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/fields/timestamp.md#2025-04-13_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { config, list } from '@keystone-6/core';\nimport { timestamp } from '@keystone-6/core/fields';\n\nexport default config({\n  lists: {\n    SomeListName: list({\n      fields: {\n        someFieldName: timestamp({\n          defaultValue: '1970-01-01T00:00:00.000Z',\n          db: { map: 'my_timestamp' },\n          validation: { isRequired: true },\n          isIndexed: 'unique',\n        }),\n        /* ... */\n      },\n    }),\n    /* ... */\n  },\n  /* ... */\n});\n```\n\n----------------------------------------\n\nTITLE: GraphQL Configuration in KeystoneJS\nDESCRIPTION: Shows how to configure GraphQL-specific options for a Keystone list, including API descriptions, query/mutation naming, and cache hints.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/config/lists.md#2025-04-13_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { config, list } from '@keystone-6/core';\n\nexport default config({\n  lists: {\n    SomeListName: list({\n      graphql: {\n        description: '...',\n        itemQueryName: '...',\n        listQueryName: '...',\n        maxTake: 100,\n        cacheHint: { maxAge: 60, scope: 'PRIVATE' },\n        omit: {\n          query: true,\n          create: true,\n          update: true,\n          delete: true,\n        },\n      },\n      /* ... */\n    }),\n    /* ... */\n  },\n  /* ... */\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Select Field in KeystoneJS TypeScript\nDESCRIPTION: Example configuration of a select field in KeystoneJS showing various options including type definition, value options, validation, database mapping, and UI display settings. The field supports string, integer, or enum values with customizable labels and database storage options.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/fields/select.md#2025-04-13_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { config, list } from '@keystone-6/core';\nimport { select } from '@keystone-6/core/fields';\n\nexport default config({\n  lists: {\n    SomeListName: list({\n      fields: {\n        someFieldName: select({\n          type: 'enum',\n          options: [\n            { label: '...', value: '...' },\n            /* ... */\n          ],\n          defaultValue: '...',\n          db: { map: 'my_select' },\n          validation: { isRequired: true, },\n          isIndexed: 'unique',\n          ui: { displayMode: 'select' },\n        }),\n        /* ... */\n      },\n    }),\n    /* ... */\n  },\n  /* ... */\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Text Field in Keystone.js\nDESCRIPTION: This snippet demonstrates how to configure a text field in a Keystone.js list. It shows various options including default value, database mapping, validation rules, indexing, and UI display mode.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/fields/text.md#2025-04-13_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { config, list } from '@keystone-6/core';\nimport { text } from '@keystone-6/core/fields';\n\nexport default config({\n  lists: {\n    SomeListName: list({\n      fields: {\n        someFieldName: text({\n          defaultValue: '...',\n          db: { map: 'my_text', nativeType: 'VarChar(40)' },\n          validation: { isRequired: true },\n          isIndexed: 'unique',\n          ui: { displayMode: 'textarea' },\n        }),\n        /* ... */\n      },\n    }),\n    /* ... */\n  },\n  /* ... */\n});\n```\n\n----------------------------------------\n\nTITLE: Denying All Operations Except One\nDESCRIPTION: Demonstrates how to deny all operations except one using allOperations and denyAll helpers. This pattern is useful when you want to create a read-only list.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/config/access-control.md#2025-04-13_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { config, list } from '@keystone-6/core';\nimport { denyAll, allOperations } from '@keystone-6/core/access';\n\nexport default config({\n  lists: {\n    ListKey: list({\n      access: {\n        operation: {\n          ...allOperations(denyAll)\n          // hint: unconditionally returning `true` is equivalent to using allowAll for this operation\n          query: ({ session, context, listKey, operation }) => true,\n        }\n      },\n    }),\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Extending HTTP Server for WebSocket Support in Keystone.js\nDESCRIPTION: This snippet demonstrates how to extend the HTTP server in Keystone.js to add WebSocket support for GraphQL subscriptions. It uses the 'ws' package for WebSocket server creation and 'graphql-ws' for integrating with the GraphQL schema.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/config/config.md#2025-04-13_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { WebSocketServer } from 'ws';\nimport { useServer as wsUseServer } from 'graphql-ws/lib/use/ws';\n\nexport default config<TypeInfo>({\n  server: {\n    extendHttpServer: (httpServer, commonContext) => {\n      const wss = new WebSocketServer({\n        server: httpServer,\n        path: '/api/graphql',\n      });\n\n      wsUseServer({ schema: commonContext.graphql.schema }, wss);\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Authentication in Keystone 6\nDESCRIPTION: This snippet shows the minimal configuration required to set up authentication in Keystone 6. It specifies the list to authenticate against, the identity field, and the secret field.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/config/auth.md#2025-04-13_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createAuth } from '@keystone-6/auth'\n\nconst { withAuth } = createAuth({\n  listKey: 'User',\n  identityField: 'email',\n  secretField: 'password',\n})\n```\n\n----------------------------------------\n\nTITLE: Self-referencing One-sided Relationship in Keystone\nDESCRIPTION: Shows how to create a self-referencing relationship within the same list, using a Twitter-style following example. Users can follow other users, creating a one-sided relationship to the User list itself.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/guides/relationships.md#2025-04-13_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { config, list } from '@keystone-6/core';\nimport { text, relationship } from '@keystone-6/core/fields';\n\nexport default config({\n  lists: {\n    User: list({\n      fields: {\n        name: text(),\n        follows: relationship({ ref: 'User', many: true }),\n      },\n    }),\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: One-sided Many-to-Many Relationship in Keystone\nDESCRIPTION: Configures a one-sided relationship where posts can have multiple authors and users can have multiple posts. Sets the relationship's many option to true to establish this cardinality.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/guides/relationships.md#2025-04-13_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { config, list } from '@keystone-6/core';\nimport { text, relationship } from '@keystone-6/core/fields';\n\nexport default config({\n  lists: {\n    User: list({\n      fields: {\n        name: text(),\n      },\n    }),\n    Post: list({\n      fields: {\n        title: text(),\n        content: text(),\n        authors: relationship({ ref: 'User', many: true }),\n      },\n    }),\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Testing CRUD Operations with Context Query API\nDESCRIPTION: Demonstrates how to test basic CRUD operations using the Context Query API. Creates a person record and verifies the expected output including password hashing.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/guides/testing.md#2025-04-13_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst person = await context.query.Person.createOne({\n  data: { name: 'Alice', email: 'alice@example.com', password: 'super-secret' },\n  query: 'id name email password { isSet }',\n});\nexpect(person.name).toEqual('Alice');\nexpect(person.email).toEqual('alice@example.com');\nexpect(person.password.isSet).toEqual(true);\n```\n\n----------------------------------------\n\nTITLE: Implementing afterOperation Hook for User Creation Logging in Keystone.js\nDESCRIPTION: Demonstrates how to set up a basic hook that logs information when a new user is created using the afterOperation hook.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/guides/hooks.md#2025-04-13_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { config, list } from '@keystone-6/core';\nimport { text } from '@keystone-6/core/fields';\n\nexport default config({\n  lists: {\n    User: list({\n      fields: {\n        name: text(),\n        email: text(),\n       },\n      hooks: {\n        afterOperation: ({ operation, item }) => {\n          if (operation === 'create') {\n            console.log(`New user created. Name: ${item.name}, Email: ${item.email}`);\n          }\n        }\n      },\n    }),\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Testing Access Control with Session Context\nDESCRIPTION: Demonstrates testing access control rules using context.withSession() to simulate authenticated users. Tests authorization restrictions on task updates.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/guides/testing.md#2025-04-13_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst [alice, bob] = await context.query.Person.createMany({\n  data: [\n    { name: 'Alice', email: 'alice@example.com', password: 'super-secret' },\n    { name: 'Bob', email: 'bob@example.com', password: 'super-secret' },\n  ],\n});\n\nconst task = await context.query.Task.createOne({\n  data: {\n    label: 'Experiment with Keystone',\n    priority: 'high',\n    isComplete: false,\n    assignedTo: { connect: { id: alice.id } },\n  },\n});\n\nconst { data, errors } = await context\n  .withSession({ itemId: bob.id, data: {} })\n  .graphql.raw({\n    query: `mutation update($id: ID!) {\n      updateTask(where: { id: $id }, data: { isComplete: true }) {\n        id\n      }\n    }`,\n    variables: { id: task.id },\n  });\nexpect(data!.updateTask).toBe(null);\nexpect(errors).toHaveLength(1);\nexpect(errors![0].path).toEqual(['updateTask']);\nexpect(errors![0].message).toEqual(\n  `Access denied: You cannot perform the 'update' operation on the item '{\"id\":\"${task.id}\"}'. It may not exist.`\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Image and File Fields with S3 Storage in Keystone.js\nDESCRIPTION: This code snippet shows how to set up image and file fields in a Keystone.js schema using Amazon S3 for storage. It demonstrates configuring both public and private buckets, handling file uploads, deletions, and URL generation for images and files.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/guides/images-and-files.md#2025-04-13_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { list } from '@keystone-6/core'\nimport { allowAll } from '@keystone-6/core/access'\nimport { text, image, file } from '@keystone-6/core/fields'\nimport { getSignedUrl } from '@aws-sdk/s3-request-presigner'\nimport { S3, GetObjectCommand } from '@aws-sdk/client-s3'\nimport { Upload } from '@aws-sdk/lib-storage'\n\nconst s3 = new S3({ /* configure the s3 client however you would like */ })\n\nconst publicBucketName = 'my-public-bucket'\nconst privateBucketName = 'my-private-bucket'\n\nexport const lists = {\n  Post: list({\n    access: allowAll,\n    fields: {\n      title: text({ validation: { isRequired: true } }),\n      content: text(),\n      banner: image({\n        storage: {\n          async put(key, stream, meta) {\n            const upload = new Upload({\n              client: s3,\n              params: { Bucket: publicBucketName, Key: key, Body: stream, ContentType: meta.contentType },\n            })\n            await upload.done()\n          },\n          async delete(key) {\n            await s3.deleteObject({ Bucket: publicBucketName, Key: key })\n          },\n          url(key) {\n            return `https://${publicBucketName}.s3.amazonaws.com/${key}`\n          },\n        },\n      }),\n      attachment: file({\n        storage: {\n          async put(key, stream, meta) {\n            const upload = new Upload({\n              client: s3,\n              params: {\n                Bucket: privateBucketName,\n                Key: key,\n                Body: stream,\n                ContentType: meta.contentType,\n              },\n            })\n            await upload.done()\n          },\n          async delete(key) {\n            await s3.deleteObject({ Bucket: privateBucketName, Key: key })\n          },\n          url(key) {\n            return getSignedUrl(s3, new GetObjectCommand({ Bucket: privateBucketName, Key: key }))\n          },\n        },\n      }),\n    },\n  }),\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Document Field with All Options in Keystone TypeScript\nDESCRIPTION: Demonstrates how to set up a document field in a Keystone schema with all built-in formatting options enabled, including dividers, links, and column layouts.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/guides/document-fields.md#2025-04-13_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { list } from '@keystone-6/core';\nimport { document } from '@keystone-6/fields-document';\n\nexport const lists = {\n  Post: list({\n    fields: {\n      content: document({\n        formatting: true,\n        dividers: true,\n        links: true,\n        layouts: [\n          [1, 1],\n          [1, 1, 1],\n        ],\n      }),\n    },\n  }),\n};\n```\n\n----------------------------------------\n\nTITLE: Querying a Virtual Field with Arguments\nDESCRIPTION: This GraphQL query demonstrates how to use the 'excerpt' virtual field with a custom length argument to retrieve shorter excerpts of posts without over-fetching data.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/guides/virtual-fields.md#2025-04-13_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  posts {\n    id\n    excerpt(length: 100)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up GraphQL Server in Next.js API Route\nDESCRIPTION: Creates a GraphQL endpoint using GraphQL Yoga in a Next.js API route. This setup uses Keystone's generated GraphQL schema and handles authentication by unwrapping the session cookie from the request to provide access control.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/blog/nextjs-keystone.md#2025-04-13_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n/* nextjs-app/src/pages/api/graphql.ts*/\n\nimport { createYoga } from 'graphql-yoga';\nimport type { NextApiRequest, NextApiResponse } from 'next';\nimport { keystoneContext } from '../../keystone/context';\n\n// An example of how to setup your own yoga graphql server\n// using the generated Keystone GraphQL schema.\nexport const config = {\n  api: {\n    bodyParser: false,\n  },\n};\n\n// Use Keystone's context to create GraphQL handler\nexport default createYoga<{\n  req: NextApiRequest;\n  res: NextApiResponse;\n}>({\n  graphqlEndpoint: '/api/graphql',\n  schema: keystoneContext.graphql.schema,\n  /*\n    `keystoneContext` object doesn't have user's session information.\n    You need an authenticated context to CRUD data behind access control.\n    keystoneContext.withRequest(req, res) automatically unwraps the session cookie\n    in the request object and gives you a `context` object with session info\n    and an elevated sudo context to bypass access control if needed (context.sudo()).\n  */\n  context: ({ req, res }) => keystoneContext.withRequest(req, res),\n});\n```\n\n----------------------------------------\n\nTITLE: Dynamic Field Configuration in KeystoneJS\nDESCRIPTION: Implementation of dynamic isFilterable and isOrderable field configurations that can be evaluated at runtime when fields are used for filtering and ordering.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/packages/core/CHANGELOG.md#2025-04-13_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\njsonFieldTypePolyfilledForSQLite\n```\n\n----------------------------------------\n\nTITLE: Updating Multiple Users with Keystone's Database API\nDESCRIPTION: Demonstrates how to use the updateMany method to modify multiple users' data in a single operation.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/context/db-items.md#2025-04-13_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst users = await context.db.User.updateMany({\n  data: [\n    {\n      where: { id: '...' },\n      data: {\n        name: 'Alice',\n        posts: { create: [{ title: 'Alices first post' }] },\n      },\n    },\n    {\n      where: { id: '...' },\n      data: {\n        name: 'Bob',\n        posts: { create: [{ title: 'Bobs first post' }] },\n      },\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Complete Keystone.js Schema with User-Post Relationship\nDESCRIPTION: The final Keystone.js configuration with User and Post lists connected through a two-sided relationship. The relationship field in the Post list is configured with enhanced UI options for better editing experience.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/walkthroughs/lesson-2.md#2025-04-13_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// keystone.ts\nimport { config, list } from '@keystone-6/core';\nimport { allowAll } from '@keystone-6/core/access';\nimport { text, relationship } from '@keystone-6/core/fields';\n\nconst lists = {\n  User: list({\n    access: allowAll,\n    fields: {\n      name: text({ validation: { isRequired: true } }),\n      email: text({ validation: { isRequired: true }, isIndexed: 'unique' }),\n      posts: relationship({ ref: 'Post.author', many: true }),\n    },\n  }),\n  Post: list({\n    access: allowAll,\n    fields: {\n      title: text(),\n      author: relationship({\n        ref: 'User.posts',\n        ui: {\n          displayMode: 'cards',\n          cardFields: ['name', 'email'],\n          inlineEdit: { fields: ['name', 'email'] },\n          linkToItem: true,\n          inlineCreate: { fields: ['name', 'email'] },\n        },\n      }),\n    },\n  }),\n};\n\nexport default config({\n  db: {\n    provider: 'sqlite',\n    url: 'file:./keystone.db',\n  },\n  lists,\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Granular Formatting Options for Document Field in TypeScript\nDESCRIPTION: Shows how to configure specific formatting options for a document field with fine-grained control, including inline marks, list types, alignment, heading levels, and block types.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/guides/document-fields.md#2025-04-13_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ncontent: document({\n  formatting: {\n    inlineMarks: {\n      bold: true,\n      italic: true,\n      underline: true,\n      strikethrough: true,\n      code: true,\n      superscript: true,\n      subscript: true,\n      keyboard: true,\n    },\n    listTypes: {\n      ordered: true,\n      unordered: true,\n    },\n    alignment: {\n      center: true,\n      end: true,\n    },\n    headingLevels: [1, 2, 3, 4, 5, 6],\n    blockTypes: {\n      blockquote: true,\n      code: true\n    },\n    softBreaks: true,\n  },\n}),\n```\n\n----------------------------------------\n\nTITLE: Implementing Field-Level validateInput Hook for Email Validation in Keystone.js\nDESCRIPTION: Demonstrates how to implement field-specific validation using a validateInput hook to ensure email addresses contain an '@' character.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/guides/hooks.md#2025-04-13_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { config, list } from '@keystone-6/core';\nimport { text } from '@keystone-6/core/fields';\n\nexport default config({\n  lists: {\n    User: list({\n      fields: {\n        name: text(),\n        email: text({\n          validation: { isRequired: true },\n          hooks: {\n            validateInput: ({ addValidationError, resolvedData, fieldKey }) => {\n              const email = resolvedData[fieldKey];\n              if (email !== undefined && email !== null && !email.includes('@')) {\n                addValidationError(`The email address ${email} provided for the field ${fieldKey} must contain an '@' character`);\n              }\n            },\n          },\n        }),\n       },\n    }),\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Filtering by To-Many Relationship with 'every' in GraphQL\nDESCRIPTION: A GraphQL query showing how to filter people based on all related items matching a condition, specifically finding people who have completed all their assigned tasks.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/guides/filters.md#2025-04-13_snippet_16\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  people(where: { tasks: { every: { isComplete: { equals: true } } } }) {\n    id\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Keystone Schema in TypeScript\nDESCRIPTION: Example of defining a simple Keystone schema with a User list containing a name field using TypeScript.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/graphql/overview.md#2025-04-13_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { config, list } from '@keystone-6/core';\nimport { text } from '@keystone-6/core/fields';\n\nexport default config({\n  lists: {\n    User: list({ fields: { name: text() } }),\n  },\n  /* ... */\n});\n```\n\n----------------------------------------\n\nTITLE: Extending Express App in Keystone Server Configuration\nDESCRIPTION: Examples of extending the Express app in Keystone's server configuration, including adding custom middleware, route handlers, and API endpoints.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/config/config.md#2025-04-13_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nexport default config<TypeInfo>({\n  server: {\n    extendExpressApp: (app) => {\n      app.use((req, res, next) => {\n        console.log('A request!');\n        next();\n      });\n    },\n  },\n});\n\nexport default config<TypeInfo>({\n  server: {\n    extendExpressApp: (app) => {\n      app.get('/_version', (req, res) => {\n        res.send('v6.0.0-rc.2');\n      });\n    },\n  },\n});\n\nexport default config<TypeInfo>({\n  server: {\n    extendExpressApp: (app, commonContext) => {\n      app.get('/api/users', async (req, res) => {\n        const context = await commonContext.withRequest(req, res);\n        const users = await context.query.User.findMany();\n        res.json(users);\n      });\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Quick Start Commands for Keystone.js Installation\nDESCRIPTION: Basic commands to create and start a new Keystone.js project using npm.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/getting-started.md#2025-04-13_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm create keystone-app@latest\ncd my-app\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Bypassing Access Control with context.sudo() in Keystone.js\nDESCRIPTION: This snippet shows how to use context.sudo() to bypass access control in a custom GraphQL query. It checks if an email is in use without exposing other user data.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/guides/auth-and-access-control.md#2025-04-13_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nconst extendGraphqlSchema = graphQLSchemaExtension({\n  typeDefs: `\n    type Query {\n      isEmailInUse(email: String!): Boolean!\n    }`,\n  resolvers: {\n    Query: {\n      isEmailInUse: async (root, { email }, context) => {\n        const sudoContext = context.sudo();\n        const emailCount = await sudoContext.db.User.count({\n          where: {\n            email: { equals: email, mode: 'insensitive' },\n          },\n        });\n        return !!emailCount;\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Executing updateOne Query in TypeScript\nDESCRIPTION: Shows how to use the updateOne method to update a single user by ID, including creating new related posts. The query parameter specifies which fields to return after the update.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/context/query.md#2025-04-13_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = await context.query.User.updateOne({\n  where: { id: '...' },\n  data: {\n    name: 'Alice',\n    posts: { create: [{ title: 'My first post' }] },\n  },\n  query: 'id name posts { id title }',\n});\n```\n\n----------------------------------------\n\nTITLE: Importing graphql from Keystone Core\nDESCRIPTION: Shows how to import the graphql utility from Keystone core, which is based on @graphql-ts/schema for type-safe schema extension.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/guides/schema-extension.md#2025-04-13_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { graphql } from '@keystone/core';\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Session Validation in KeystoneJS\nDESCRIPTION: TypeScript implementation of a custom session strategy that adds timestamps to sessions and validates them against password change times, invalidating sessions when passwords have been changed after the session started.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/examples/custom-session-invalidation/README.md#2025-04-13_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { statelessSessions } from '@keystone-6/core/session'\nconst maxSessionAge = 60 * 60 * 8 // 8 hours, in seconds\n\nconst withTimeData = (\n  _sessionStrategy: SessionStrategy<Record<string, any>>\n): SessionStrategy<Record<string, any>> => {\n  const { get, start, ...sessionStrategy } = _sessionStrategy\n  return {\n    ...sessionStrategy,\n    get: async ({ req, createContext }) => {\n      const session = await get({ req, createContext })\n      if (!session || !session.startTime) return\n      if (session.data.passwordChangedAt === null) return session\n      if (session.data.passwordChangedAt === undefined) {\n        throw new TypeError('passwordChangedAt is not listed in sessionData')\n      }\n      if (session.data.passwordChangedAt > session.startTime) {\n        return\n      }\n\n      return session\n    },\n    start: async ({ res, data, createContext }) => {\n      const withTimeData = {\n        ...data,\n        startTime: new Date(),\n      }\n      return await start({ res, data: withTimeData, createContext })\n    },\n  }\n}\n\nconst myAuth = (keystoneConfig: KeystoneConfig): KeystoneConfig => {\n  // Add the session strategy to the config\n  if (!keystoneConfig.session) throw new TypeError('Missing .session configuration')\n  return {\n    ...keystoneConfig,\n    session: withTimeData(keystoneConfig.session),\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Interacting with Singleton List in Server Environment\nDESCRIPTION: This snippet shows how to read and update a Singleton list within the server environment using the default identifier '1'. It demonstrates querying and updating the 'WebsiteConfiguration' list.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/blog/singleton.md#2025-04-13_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// read\ncontext.query.WebsiteConfiguration.findOne({ where: { id: '1' } });\n\n// update\ncontext.query.WebsiteConfiguration.updateOne({\n  where: {\n    id: '1',\n  },\n  data: {\n    websiteName: 'name to update',\n    copyrightText: 'text to update',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Querying Document Field Data with GraphQL\nDESCRIPTION: GraphQL query example to fetch document field content from Keystone posts. The query returns the JSON representation of the document content.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/guides/document-fields.md#2025-04-13_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  posts {\n    content {\n      document\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Initial User Creation\nDESCRIPTION: Adds the initFirstItem feature to the auth configuration to allow creating the first user when no users exist in the database, specifying which fields to collect.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/walkthroughs/lesson-4.md#2025-04-13_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// auth.ts\nimport { createAuth } from '@keystone-6/auth';\nimport { statelessSessions } from '@keystone-6/core/session';\n\nconst { withAuth } = createAuth({\n  listKey: 'User',\n  identityField: 'email',\n  sessionData: 'name',\n  secretField: 'password',\n  initFirstItem: {\n    fields: ['name', 'email', 'password'],\n  },\n});\n\nlet sessionSecret = '-- DEV COOKIE SECRET; CHANGE ME --';\nlet sessionMaxAge = 60 * 60 * 24; // 24 hours\n\nconst session = statelessSessions({\n  maxAge: sessionMaxAge,\n  secret: sessionSecret,\n});\n\nexport { withAuth, session }\n```\n\n----------------------------------------\n\nTITLE: Querying and Mutating Singleton List with GraphQL\nDESCRIPTION: This snippet demonstrates how to query and mutate a Singleton list using GraphQL. It includes examples of reading data, creating a new entry, and updating an existing entry without needing an identifier.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/blog/singleton.md#2025-04-13_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  websiteConfiguration {\n    websiteName\n    copyrightText\n  }\n}\n\nmutation createNew {\n  createWebsiteConfiguration(\n    data: { websiteName: \"cool website\", copyrightText: \"do not copy me\" }\n  ) {\n    websiteName\n    copyrightText\n  }\n}\n\nmutation updateExisting {\n  updateWebsiteConfiguration(\n    data: { websiteName: \"cool website\", copyrightText: \"do not copy me\" }\n  ) {\n    websiteName\n    copyrightText\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom GraphQL Type for User Statistics\nDESCRIPTION: Implements a custom GraphQL type 'Statistics' with resolvers for computing user-specific statistics including draft count, published count, and latest post. Uses field-level resolvers for efficient data fetching.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/examples/extend-graphql-schema-graphql-tools/README.md#2025-04-13_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n  extendGraphqlSchema: graphQLSchemaExtension({\n    typeDefs: `\n      type Query {\n        \"\"\" Compute statistics for a user \"\"\"\n        stats(id: ID!): Statistics\n\n      }\n\n      \"\"\" A custom type to represent statistics for a user \"\"\"\n      type Statistics {\n        draft: Int\n        published: Int\n        latest: Post\n      }`,\n    resolvers: {\n      Query: {\n        stats: async (root, { id }) => {\n          return { authorId: id };\n        },\n      },\n      Statistics: {\n        latest: async (val, args, context) => {\n          const [post] = await context.db.Post.findMany({\n            take: 1,\n            orderBy: { publishDate: 'desc' },\n            where: { author: { id: { equals: val.authorId } } },\n          });\n          return post;\n        },\n        draft: (val, args, context) => {\n          return context.query.Post.count({\n            where: { author: { id: { equals: val.authorId } }, status: { equals: 'draft' } },\n          });\n        },\n        published: (val, args, context) => {\n          return context.query.Post.count({\n            where: { author: { id: { equals: val.authorId } }, status: { equals: 'published' } },\n          });\n        },\n      },\n    },\n  }),\n```\n\n----------------------------------------\n\nTITLE: Creating a Virtual Field with a Custom Object Type\nDESCRIPTION: This example demonstrates how to create a virtual field that returns a complex object type. It defines a 'counts' field that returns statistics about a post's content such as word, sentence, and paragraph counts.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/guides/virtual-fields.md#2025-04-13_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport default config({\n  lists: {\n    Post: list({\n      fields: {\n        content: text(),\n        counts: virtual({\n          field: graphql.field({\n            type: graphql.object<{\n              words: number;\n              sentences: number;\n              paragraphs: number;\n            }>()({ \n              name: 'PostCounts',\n              fields: {\n                words: graphql.field({ type: graphql.Int }),\n                sentences: graphql.field({ type: graphql.Int }),\n                paragraphs: graphql.field({ type: graphql.Int }),\n              },\n            }),\n            resolve(item: any) {\n              const content = item.content || '';\n              return {\n                words: content.split(' ').length,\n                sentences: content.split('.').length,\n                paragraphs: content.split('\\n\\n').length,\n              };\n            },\n          }),\n          ui: { query: '{ words sentences paragraphs }' },\n        }),\n      },\n    }),\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Stateless Sessions in Keystone\nDESCRIPTION: Setting up stateless sessions using an encrypted cookie to store user identification information. Requires a secret key for encryption and decryption.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/guides/auth-and-access-control.md#2025-04-13_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nconst session = statelessSessions({\n  secret: '-- EXAMPLE COOKIE SECRET; CHANGE ME --',\n});\n```\n\n----------------------------------------\n\nTITLE: Filtering People with No Tasks in GraphQL\nDESCRIPTION: A GraphQL query demonstrating how to find people who have no tasks assigned at all by using an empty object with the 'none' operator.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/guides/filters.md#2025-04-13_snippet_15\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  people(where: { tasks: { none: {} } }) {\n    id\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring File Field with Custom Storage in KeystoneJS\nDESCRIPTION: Example configuration of a file field in KeystoneJS with custom storage implementation. Demonstrates how to set up file upload, deletion, and URL generation using the local filesystem. The storage configuration includes put, delete, and url functions for handling file operations.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/fields/file.md#2025-04-13_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { config, list } from '@keystone-6/core';\nimport { file } from '@keystone-6/core/fields';\nimport fs from 'node:fs/promises';\n\nexport default config({\n  lists: {\n    SomeListName: list({\n      fields: {\n        repo: file({\n          storage: {\n            async put(key, stream) {\n              await fs.writeFile(`public/files/${key}`, stream)\n            },\n            async delete(key) {\n              await fs.unlink(`public/files/${key}`)\n            },\n            url(key) {\n              return `http://localhost:3000/files/${key}`\n            },\n          },\n        }),\n        /* ... */\n      },\n    }),\n    /* ... */\n  },\n  /* ... */\n});\n```\n\n----------------------------------------\n\nTITLE: Complex Relationship Filtering in GraphQL\nDESCRIPTION: A GraphQL query showing how to filter people with no high-priority, incomplete tasks while also retrieving their incomplete tasks, demonstrating filtering at both the top-level and related item level.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/guides/filters.md#2025-04-13_snippet_18\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  # Only return people who have no high-priority, incomplete tasks\n  people(where: {\n    tasks: {\n      none: {\n        priority: { equals: high },\n        isComplete: { equals: false }\n      }\n    }\n  }) {\n    id\n    name\n    # For each person, get tasks that are not complete\n    tasks(where: {\n      isComplete: { equals: false }\n    }) {\n      id\n      label\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting a Single User with Keystone's Database API\nDESCRIPTION: Shows how to use the deleteOne method to remove a single user by their ID.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/context/db-items.md#2025-04-13_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = await context.db.User.deleteOne({\n  where: { id: '...' },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Integer Field in Keystone JS\nDESCRIPTION: This example demonstrates how to configure an integer field in a Keystone JS application. It shows setting a default value, custom database mapping, required validation, and unique indexing. The integer field is added to a list configuration within the Keystone config object.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/fields/integer.md#2025-04-13_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { config, list } from '@keystone-6/core';\nimport { integer } from '@keystone-6/core/fields';\n\nexport default config({\n  lists: {\n    SomeListName: list({\n      fields: {\n        someFieldName: integer({\n          defaultValue: 0,\n          db: { map: 'my_integer' },\n          validation: {\n            isRequired: true,\n          },\n          isIndexed: 'unique',\n        }),\n        /* ... */\n      },\n    }),\n    /* ... */\n  },\n  /* ... */\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Lists with Virtual Fields in KeystoneJS\nDESCRIPTION: This code snippet demonstrates how to define Keystone lists with a virtual field. It shows the creation of 'Post' and 'Author' lists, with the 'Author' list including a 'latestPost' virtual field that returns a Post object.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/guides/virtual-fields.md#2025-04-13_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nexport const lists = {\n  Post: list({\n    fields: {\n      title: text(),\n      content: text(),\n      publishDate: timestamp(),\n      author: relationship({ ref: 'Author.posts', many: false }),\n    },\n  }),\n  Author: list({\n    fields: {\n      name: text({ validation: { isRequired: true } }),\n      email: text({ isIndexed: 'unique', validation: { isRequired: true } }),\n      posts: relationship({ ref: 'Post.author', many: true }),\n      latestPost: virtual({\n        field: lists =>\n          graphql.field({\n            type: lists.Post.types.output,\n            async resolve(item, args, context) {\n              const { posts } = await context.query.Author.findOne({\n                where: { id: item.id.toString() },\n                query: `posts(\n                    orderBy: { publishDate: desc }\n                    take: 1\n                  ) { id }`,\n              });\n              if (posts.length > 0) {\n                return context.db.Post.findOne({\n                  where: { id: posts[0].id }\n                });\n              }\n            },\n          }),\n        ui: { query: '{ title publishDate }' },\n      }),\n    },\n  }),\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Navigation in Keystone Admin UI (TSX)\nDESCRIPTION: This snippet shows how to set up a custom navigation component in the Keystone Admin UI. It includes the configuration file and the custom navigation component.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/guides/custom-admin-ui-pages.md#2025-04-13_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n// admin/config.ts\nimport type { AdminConfig } from '@keystone-6/core/types'\nimport { CustomNavigation } from './components/CustomNavigation'\nexport const components: AdminConfig['components']= {\n    Navigation: CustomNavigation\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\n// admin/components/CustomNavigation.tsx\nimport { NavigationContainer, ListNavItems, NavItem } from '@keystone-6/core/admin-ui/components'\nimport type { NavigationProps } from '@keystone-6/core/admin-ui/components'\nexport function CustomNavigation({ lists }: NavigationProps) {\n    return (\n        <NavigationContainer>\n            <NavItem href=\"/\">Dashboard</NavItem>\n            <ListNavItems lists={lists} />\n            <NavItem href=\"/custom-page\">Custom Page</NavItem>\n        </NavigationContainer>\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing validateInput Hook for Title Validation in Keystone.js\nDESCRIPTION: Demonstrates input validation using the validateInput hook to prevent empty blog post titles from being saved to the database.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/guides/hooks.md#2025-04-13_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { config, list } from '@keystone-6/core';\nimport { text } from '@keystone-6/core/fields';\n\nexport default config({\n  lists: {\n    Post: list({\n      fields: {\n        title: text({ validation: { isRequired: true } }),\n        content: text({ validation: { isRequired: true } }),\n       },\n      hooks: {\n        validateInput: ({ resolvedData, addValidationError }) => {\n          const { title } = resolvedData;\n          if (title === '') {\n            // We call addValidationError to indicate an invalid value.\n            addValidationError('The title of a blog post cannot be the empty string');\n          }\n        }\n      },\n    }),\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring CORS in Keystone.js\nDESCRIPTION: This code snippet demonstrates how to configure CORS options in a Keystone.js project using the config.server.cors option.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/packages/core/CHANGELOG.md#2025-04-13_snippet_40\n\nLANGUAGE: JavaScript\nCODE:\n```\nconfig.server.cors\n```\n\n----------------------------------------\n\nTITLE: Implementing List-Level Access Control in Keystone.js\nDESCRIPTION: This snippet demonstrates how to implement list-level access control for a Person list in Keystone.js. It restricts all operations to admin users only.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/guides/auth-and-access-control.md#2025-04-13_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nconst isAdmin = ({ session }: { session?: Session }) => Boolean(session?.data.isAdmin);\n\nconst Person = list({\n  access: {\n    query: isAdmin,\n    create: isAdmin,\n    update: isAdmin,\n    delete: isAdmin\n  },\n  fields: {\n    // see above\n  },\n}),\n```\n\n----------------------------------------\n\nTITLE: Generated GraphQL Schema for User List\nDESCRIPTION: The complete GraphQL schema generated by Keystone based on the User list definition, including queries and mutations.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/graphql/overview.md#2025-04-13_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\ntype Query {\n  users(\n    where: UserWhereInput! = {}\n    orderBy: [UserOrderByInput!]! = []\n    take: Int\n    skip: Int! = 0\n  ): [User!]\n  user(where: UserWhereUniqueInput!): User\n  usersCount(where: UserWhereInput! = {}): Int\n}\n\ntype User {\n  id: ID!\n  name: String\n}\n\ninput UserWhereUniqueInput {\n  id: ID\n}\n\ninput UserWhereInput {\n  AND: [UserWhereInput!]\n  OR: [UserWhereInput!]\n  NOT: [UserWhereInput!]\n  id: IDFilter\n  name: StringNullableFilter\n}\n\ninput IDFilter {\n  equals: ID\n  in: [ID!]\n  notIn: [ID!]\n  lt: ID\n  lte: ID\n  gt: ID\n  gte: ID\n  not: IDFilter\n}\n\ninput StringNullableFilter {\n  equals: String\n  in: [String!]\n  notIn: [String!]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  mode: QueryMode\n  not: NestedStringNullableFilter\n}\n\nenum QueryMode {\n  default\n  insensitive\n}\n\ninput NestedStringNullableFilter {\n  equals: String\n  in: [String!]\n  notIn: [String!]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringNullableFilter\n}\n\ninput UserOrderByInput {\n  id: OrderDirection\n  name: OrderDirection\n}\n\nenum OrderDirection {\n  asc\n  desc\n}\n\ntype Mutation {\n  createUser(data: UserCreateInput!): User\n  createUsers(data: [UserCreateInput!]!): [User]\n  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User\n  updateUsers(data: [UserUpdateArgs!]!): [User]\n  deleteUser(where: UserWhereUniqueInput!): User\n  deleteUsers(where: [UserWhereUniqueInput!]!): [User]\n}\n\ninput UserUpdateInput {\n  name: String\n}\n\ninput UserUpdateArgs {\n  where: UserWhereUniqueInput!\n  data: UserUpdateInput!\n}\n\ninput UserCreateInput {\n  name: String\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Calendar Day Field in Keystone.js (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to configure a 'calendarDay' field in a Keystone.js list. It shows various options such as defaultValue, database mapping, validation, and indexing.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/fields/calendarday.md#2025-04-13_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { config, list } from '@keystone-6/core';\nimport { calendarDay } from '@keystone-6/core/fields';\n\nexport default config({\n  lists: {\n    SomeListName: list({\n      fields: {\n        someFieldName: calendarDay({\n          defaultValue: '1970-01-01',\n          db: { map: 'my_date' },\n          validation: { isRequired: true },\n          isIndexed: 'unique',\n        }),\n        /* ... */\n      },\n    }),\n    /* ... */\n  },\n  /* ... */\n});\n```\n\n----------------------------------------\n\nTITLE: UI Configuration in KeystoneJS\nDESCRIPTION: Demonstrates comprehensive UI configuration options for a Keystone list, including label field, search fields, view modes, and navigation settings.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/config/lists.md#2025-04-13_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { config, list } from '@keystone-6/core';\nimport { text } from '@keystone-6/core/fields`;\n\nexport default config({\n  lists: {\n    SomeListName: list({\n      fields: { name: text({ /* ... */ }) },\n      ui: {\n        labelField: 'name',\n        searchFields: ['name', 'alternativeName'],\n        description: '...',\n        hideNavigation: ({ session, context }) => false,\n        hideCreate: ({ session, context }) => false,\n        hideDelete: ({ session, context }) => false,\n        createView: {\n          defaultFieldMode: ({ session, context }) => 'edit',\n        },\n        itemView: {\n          defaultFieldMode: ({ session, context, item }) => 'edit',\n        },\n        listView: {\n          defaultFieldMode: ({ session, context }) => 'read',\n          initialColumns: ['name', /* ... */],\n          initialSort: { field: 'name', direction: 'ASC' },\n          pageSize: 50,\n        },\n        label: \"Some List\",\n        singular: \"Item\",\n        plural: \"Items\",\n        path: 'some-list'\n      },\n    }),\n    /* ... */\n  },\n  /* ... */\n});\n```\n\n----------------------------------------\n\nTITLE: GraphQL Mutation: Updating a Single User\nDESCRIPTION: Example of a GraphQL mutation to update a single user identified by a unique input and the data to be updated.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/graphql/overview.md#2025-04-13_snippet_8\n\nLANGUAGE: graphql\nCODE:\n```\ntype Mutation {\n  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User\n}\n\ninput UserWhereUniqueInput {\n  id: ID\n}\n\ninput UserUpdateInput {\n  name: String\n}\n\ntype User {\n  id: ID!\n  name: String\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Session Management to Authentication\nDESCRIPTION: Extends the auth configuration with session management using statelessSessions, setting up cookie secrets and session duration.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/walkthroughs/lesson-4.md#2025-04-13_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// auth.ts\nimport { createAuth } from '@keystone-6/auth';\nimport { statelessSessions } from '@keystone-6/core/session';\n\nconst { withAuth } = createAuth({\n  listKey: 'User',\n  identityField: 'email',\n  sessionData: 'name',\n  secretField: 'password',\n});\n\nlet sessionSecret = '-- DEV COOKIE SECRET; CHANGE ME --';\nlet sessionMaxAge = 60 * 60 * 24; // 24 hours\n\nconst session = statelessSessions({\n  maxAge: sessionMaxAge,\n  secret: sessionSecret,\n});\n\nexport { withAuth, session }\n```\n\n----------------------------------------\n\nTITLE: GraphQL Mutation: Updating Multiple Users\nDESCRIPTION: Example of a GraphQL mutation to update multiple users with their respective unique identifiers and update data.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/graphql/overview.md#2025-04-13_snippet_9\n\nLANGUAGE: graphql\nCODE:\n```\ntype Mutation {\n  updateUsers(data: [UserUpdateArgs!]!): [User]\n}\n\ninput UserUpdateArgs {\n  where: UserWhereUniqueInput!\n  data: UserUpdateInput!\n}\n\ninput UserWhereUniqueInput {\n  id: ID\n}\n\ninput UserUpdateInput {\n  name: String\n}\n\ntype User {\n  id: ID!\n  name: String\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Password Field to User Schema\nDESCRIPTION: Enhances the User list by adding a password field for authentication, importing the password field type from Keystone core fields.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/walkthroughs/lesson-4.md#2025-04-13_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { list, config } from '@keystone-6/core';\nimport { password, text, timestamp, select, relationship } from '@keystone-6/core/fields';\n\nconst lists = {\n  User: list({\n    fields: {\n      name: text({ validation: { isRequired: true } }),\n      email: text({ validation: { isRequired: true }, isIndexed: 'unique' }),\n      posts: relationship({ ref: 'Post.author', many: true }),\n      password: password({ validation: { isRequired: true } })\n    },\n  }),\n  Post: list({\n    fields: {\n      title: text(),\n      publishedAt: timestamp(),\n      status: select({\n        options: [\n          { label: 'Published', value: 'published' },\n          { label: 'Draft', value: 'draft' },\n        ],\n        defaultValue: 'draft',\n        ui: { displayMode: 'segmented-control' },\n      }),\n      author: relationship({ ref: 'User.posts' }),\n    },\n  }),\n};\n\nexport default config({\n  db: {\n    provider: 'sqlite',\n    url: 'file:./keystone.db',\n  },\n  lists,\n});\n```\n\n----------------------------------------\n\nTITLE: Query API Structure in TypeScript\nDESCRIPTION: Outlines the structure of the Query API, showing available methods for each list in the system. Each method corresponds to a GraphQL operation and accepts similar arguments.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/context/query.md#2025-04-13_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  findOne({ where: { id }, query }),\n  findMany({ where, take, skip, orderBy, query }),\n  count({ where }),\n  createOne({ data, query }),\n  createMany({ data, query }),\n  updateOne({ where: { id }, data, query }),\n  updateMany({ data, query }),\n  deleteOne({ where: { id }, query }),\n  deleteMany({ where, query }),\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SQLite Database in Keystone\nDESCRIPTION: Example configuration for using SQLite as the database provider in Keystone, including file path and advanced options.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/config/config.md#2025-04-13_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport default config<TypeInfo>({\n  db: {\n    provider: 'sqlite',\n    url: 'file:./keystone.db',\n    onConnect: async context => { /* ... */ },\n    // Optional advanced configuration\n    enableLogging: true,\n    idField: { kind: 'uuid' },\n  },\n  /* ... */\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Post List to Keystone.js Schema\nDESCRIPTION: Extending the Keystone.js schema with a new Post list that includes a title field, while maintaining the existing User list.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/walkthroughs/lesson-2.md#2025-04-13_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { config, list } from '@keystone-6/core';\nimport { allowAll } from '@keystone-6/core/access';\nimport { text } from '@keystone-6/core/fields';\n\nconst lists = {\n  User: list({\n    access: allowAll,\n    fields: {\n      name: text({ validation: { isRequired: true } }),\n      email: text({ validation: { isRequired: true }, isIndexed: 'unique' }),\n    },\n  }),\n  Post: list({\n    access: allowAll,\n    fields: {\n      title: text(),\n    },\n  }),\n};\n\nexport default config({\n  db: {\n    provider: 'sqlite',\n    url: 'file:./keystone.db',\n  },\n  lists,\n});\n```\n\n----------------------------------------\n\nTITLE: Executing findMany Query in TypeScript\nDESCRIPTION: Shows how to use the findMany method to retrieve multiple users with filtering, pagination, and sorting. The query parameter defines the fields to be returned for each user.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/context/query.md#2025-04-13_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst users = await context.query.User.findMany({\n  where: { name: { startsWith: 'A' } },\n  take: 10,\n  skip: 20,\n  orderBy: [{ name: 'asc' }],\n  query: 'id name posts { id title }',\n});\n```\n\n----------------------------------------\n\nTITLE: Allowing All Access with allowAll Helper\nDESCRIPTION: Shows how to use the allowAll helper function to grant full access to all operations on a list. This is a shorthand for enabling all access control options.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/config/access-control.md#2025-04-13_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { config, list } from '@keystone-6/core';\nimport { allowAll } from '@keystone-6/core/access';\n\nexport default config({\n  lists: {\n    ListKey: list({\n      access: allowAll,\n    }),\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query: Fetching a Single User\nDESCRIPTION: Example of a GraphQL query to fetch a single user by their unique identifier.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/graphql/overview.md#2025-04-13_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\ntype Query {\n  user(where: UserWhereUniqueInput!): User\n}\n\ntype User {\n  id: ID!\n  name: String\n}\n\ninput UserWhereUniqueInput {\n  id: ID\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiselect Field in Keystone.js\nDESCRIPTION: This snippet demonstrates how to configure a multiselect field in a Keystone.js project. It shows the import statements, list configuration, and field options including type, options array, default value, and database mapping.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/fields/multiselect.md#2025-04-13_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { config, list } from '@keystone-6/core';\nimport { multiselect } from '@keystone-6/core/fields';\n\nexport default config({\n  lists: {\n    SomeListName: list({\n      fields: {\n        someFieldName: multiselect({\n          type: 'enum',\n          options: [\n            { label: '...', value: '...' },\n            /* ... */\n          ],\n          defaultValue: ['...'],\n          db: { map: 'my_multiselect' },\n        }),\n        /* ... */\n      },\n    }),\n    /* ... */\n  },\n  /* ... */\n});\n```\n\n----------------------------------------\n\nTITLE: GraphQL Mutation: Creating a Single User\nDESCRIPTION: Example of a GraphQL mutation to create a single user with the provided data.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/graphql/overview.md#2025-04-13_snippet_6\n\nLANGUAGE: graphql\nCODE:\n```\ntype Mutation {\n  createUser(data: UserCreateInput!): User\n}\n\ninput UserCreateInput {\n  name: String\n}\n\ntype User {\n  id: ID!\n  name: String\n}\n```\n\n----------------------------------------\n\nTITLE: Adding GraphQL API Endpoint to Next.js\nDESCRIPTION: Sets up a GraphQL API endpoint and playground in the Next.js frontend by exposing the Keystone-generated API.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/blog/embedded-mode-with-sqlite-nextjs.md#2025-04-13_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n// pages/api/graphql.tsx\n\nexport { default, config } from '.keystone/next/graphql-api';\n```\n\n----------------------------------------\n\nTITLE: Using OR Operator in GraphQL Query\nDESCRIPTION: A GraphQL query demonstrating the use of the OR operator to combine multiple conditions, returning items that match at least one of the specified conditions.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/guides/filters.md#2025-04-13_snippet_7\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  tasks(where: { OR: [\n    { label: { contains: \"H\" } },\n    { label: { contains: \"ll\" } }\n  ] }) {\n    id\n    label\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL Database Provider in Keystone\nDESCRIPTION: Example configuration for setting up a MySQL database in Keystone. It specifies the database provider, connection URL and configures UUID for ID fields.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/blog/mysql-support.md#2025-04-13_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default config({\n  db: {\n    provider: 'mysql',\n    url: 'mysql://dbuser:dbpass@localhost:3306/keystone',\n    idField: { kind: 'uuid' },\n  },\n  ...\n});\n```\n\n----------------------------------------\n\nTITLE: Extending GraphQL Schema in Keystone.js\nDESCRIPTION: This code example demonstrates how to extend the GraphQL schema in Keystone.js. It shows the basic structure of the extendGraphqlSchema function, which takes the Keystone-generated schema and returns an extended version. This allows for custom additions to the GraphQL API.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/config/config.md#2025-04-13_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { GraphQLSchema } from 'graphql'\nimport { config, graphql } from '@keystone-6/core'\n\nexport default config<TypeInfo>({\n  extendGraphqlSchema: (keystoneSchema: GraphQLSchema) => {\n    /* ... */\n    return newExtendedSchema\n  }\n  /* ... */\n})\n```\n\n----------------------------------------\n\nTITLE: Executing deleteMany Query in TypeScript\nDESCRIPTION: Demonstrates how to use the deleteMany method to delete multiple users in a single operation. The where parameter specifies which users to delete, and the query parameter defines the fields to be returned for each deleted user.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/context/query.md#2025-04-13_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst users = await context.query.User.deleteMany({\n  where: [{ id: '...' }, { id: '...' }],\n  query: 'id name posts { id title }',\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Keystone Context in Next.js\nDESCRIPTION: Sets up the Keystone context object for use within a Next.js application. Includes handling for development hot reloading by storing the context in a global variable to prevent multiple Prisma clients from being created.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/blog/nextjs-keystone.md#2025-04-13_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/* nextjs-app/src/keystone/context.ts */\n\nimport { getContext } from '@keystone-6/core/context';\nimport config from '../../keystone';\nimport { Context } from '.keystone/types';\nimport * as PrismaModule from '.prisma/client';\n\n// Making sure multiple prisma clients are not created during dev hot reloading\nexport const keystoneContext: Context =\n  (globalThis as any).keystoneContext || getContext(config, PrismaModule);\n\nif (process.env.NODE_ENV !== 'production') {\n    (globalThis as any).keystoneContext = keystoneContext;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Field Component in React\nDESCRIPTION: This snippet shows the React component for rendering the custom 'myInt' field in the Keystone Admin UI. It uses the TextField component from @keystar/ui for input handling.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/guides/custom-fields.md#2025-04-13_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { TextField } from '@keystar/ui/text-field'\n\nexport function Field ({ field, value, onChange, autoFocus }: FieldProps<typeof controller>) {\n  const disabled = onChange === undefined\n\n  return (\n    <TextField\n      autoFocus={autoFocus}\n      description={field.description}\n      label={field.label}\n      isDisabled={disabled}\n      onChange={x => onChange?.(x === '' ? null : x)}\n      value={value ?? ''}\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring JSON Field Type in KeystoneJS with TypeScript\nDESCRIPTION: Demonstrates how to configure a JSON field type in a KeystoneJS schema including setting default values and custom database column mapping. The example shows field configuration within a list definition using the @keystone-6/core package.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/fields/json.md#2025-04-13_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { config, list } from '@keystone-6/core';\nimport { json } from '@keystone-6/core/fields';\n\nexport default config({\n  lists: {\n    SomeListName: list({\n      fields: {\n        someFieldName: json({\n          defaultValue: { something: true },\n          db: { map: 'my_json' },\n        }),\n        /* ... */\n      },\n    }),\n    /* ... */\n  },\n  /* ... */\n});\n```\n\n----------------------------------------\n\nTITLE: Querying with Lists API using query option in JavaScript\nDESCRIPTION: Example of the new query option for Lists API which allows specifying fields to return when querying for resolved field values. This approach replaces the deprecated resolveFields: false use case.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/packages/core/CHANGELOG.md#2025-04-13_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\nconst [post] = await context.lists.Post.findMany({\n  where: { slug },\n  query: `\n    title\n    content\n    image {\n      src\n      width\n      height\n    }`,\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Dynamic Post Pages with Next.js and Keystone\nDESCRIPTION: Implements dynamic page generation for individual blog posts using getStaticPaths and getStaticProps. Handles post content retrieval and display with navigation.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/blog/embedded-mode-with-sqlite-nextjs.md#2025-04-13_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n// pages/post/[slug].tsx\n\nimport { GetStaticPathsResult, GetStaticPropsContext, InferGetStaticPropsType } from 'next';\nimport Link from 'next/link';\n\nimport { query } from '.keystone/api';\nimport type { Lists } from '.keystone/types';\n\ntype Post = {\n  id: string;\n  title: string;\n  content: string;\n};\n\nexport default function PostPage({ post }: { post: Post }) {\n  return (\n    <div>\n      <main style={{ margin: '3rem' }}>\n        <div>\n          <Link href=\"/\">\n            &larr; back home\n          </Link>\n        </div>\n        <h1>{post.title}</h1>\n        <p>{post.content}</p>\n      </main>\n    </div>\n  );\n}\n\nexport async function getStaticPaths(): Promise<GetStaticPathsResult> {\n  const posts = (await query.Post.findMany({\n    query: `slug`,\n  })) as { slug: string }[];\n\n  const paths = posts.filter(({ slug }) => !!slug).map(({ slug }) => `/post/${slug}`);\n\n  return {\n    paths,\n    fallback: false,\n  };\n}\n\nexport async function getStaticProps({ params }: GetStaticPropsContext) {\n  const post = (await query.Post.findOne({\n    where: { slug: params!.slug as string },\n    query: 'id title content',\n  })) as Post | null;\n  if (!post) {\n    return { notFound: true };\n  }\n  return { props: { post } };\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Child Fields in Component Blocks\nDESCRIPTION: Example of implementing child fields in a component block with both inline and block-level editing capabilities.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/guides/document-fields.md#2025-04-13_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nimport { NotEditable, component, fields } from '@keystone-6/fields-document/component-blocks';\n\ncomponent({\n  preview: (props) => {\n    return (\n      <div\n        style={{\n          borderLeft: '3px solid #CBD5E0',\n          paddingLeft: 16,\n        }}\n      >\n        <div style={{ fontStyle: 'italic', color: '#4A5568' }}>{props.fields.content.element}</div>\n        <div style={{ fontWeight: 'bold', color: '#718096' }}>\n          <NotEditable>— </NotEditable>\n          {props.fields.attribution.element}\n        </div>\n      </div>\n    );\n  },\n  label: 'Quote',\n  schema: {\n    content: fields.child({\n      kind: 'block',\n      placeholder: 'Quote...',\n      formatting: { inlineMarks: 'inherit', softBreaks: 'inherit' },\n      links: 'inherit',\n    }),\n    attribution: fields.child({ kind: 'inline', placeholder: 'Attribution...' }),\n  },\n  chromeless: true,\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL Database in Keystone\nDESCRIPTION: Example configuration for using MySQL as the database provider in Keystone, including connection URL and advanced options.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/config/config.md#2025-04-13_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport default config<TypeInfo>({\n  db: {\n    provider: 'mysql',\n    url: 'mysql://dbuser:dbpass@localhost:3306/keystone',\n    onConnect: async context => { /* ... */ },\n    // Optional advanced configuration\n    enableLogging: true,\n    idField: { kind: 'uuid' },\n  },\n  /* ... */\n});\n```\n\n----------------------------------------\n\nTITLE: Finding a Single User with Keystone's Database API\nDESCRIPTION: Demonstrates how to use the findOne method to retrieve a single user by their ID.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/context/db-items.md#2025-04-13_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = await context.db.User.findOne({\n  where: { id: '...' },\n});\n```\n\n----------------------------------------\n\nTITLE: Updating a Single User with Keystone's Database API\nDESCRIPTION: Illustrates how to use the updateOne method to modify an existing user's data and create a new related post.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/context/db-items.md#2025-04-13_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = await context.db.User.updateOne({\n  where: { id: '...' },\n  data: {\n    name: 'Alice',\n    posts: { create: [{ title: 'My first post' }] },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Author.bio Document Field with Limited Formatting Options\nDESCRIPTION: TypeScript configuration for the Author.bio document field with limited formatting options, allowing only bold and italic text, unordered lists, and links.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/examples/document-field/README.md#2025-04-13_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nbio: document({\n  formatting: {\n    inlineMarks: {\n      bold: true,\n      italic: true,\n    },\n    listTypes: { unordered: true },\n  },\n  links: true,\n}),\n```\n\n----------------------------------------\n\nTITLE: Configuring Inline Relationships in Document Field with TypeScript\nDESCRIPTION: Shows how to set up inline relationships in a document field that reference other items in your Keystone database, such as mentioning authors in post content.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/guides/document-fields.md#2025-04-13_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { config, list } from '@keystone-6/core';\nimport { document } from '@keystone-6/fields-document';\nimport { text } from '@keystone-6/core/fields';\n\nexport default config({\n  lists: {\n    Post: list({\n      fields: {\n        content: document({\n          relationships: {\n            mention: {\n              listKey: 'Author',\n              label: 'Mention',\n              selection: 'id name',\n            },\n          },\n        }),\n      },\n    }),\n    Author: list({\n      fields: {\n        name: text(),\n      }\n    }),\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Substring Filtering in GraphQL Query\nDESCRIPTION: A GraphQL query demonstrating how to filter tasks based on a substring within the label using the 'contains' operator.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/guides/filters.md#2025-04-13_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  tasks(where: { label: { contains: \"He\" } }) {\n    id\n    label\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running KeystoneJS Custom Field Example Project\nDESCRIPTION: Command to start the development server for the KeystoneJS custom field example project. This will launch the Admin UI at localhost:3000 and make the GraphQL Playground available at localhost:3000/api/graphql.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/examples/custom-field/README.md#2025-04-13_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Filtering by To-One Relationship in GraphQL\nDESCRIPTION: A GraphQL query demonstrating how to filter tasks based on a to-one relationship, specifically finding tasks assigned to a user with a specific name.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/guides/filters.md#2025-04-13_snippet_9\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  tasks(where: { assignedTo: { name: { equals: \"Alice\" } } }) {\n    id\n    label\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initial KeystoneJS Schema with User and Post Lists\nDESCRIPTION: The starting point schema that defines User and Post lists with a relationship between them. This establishes the foundation for the blog application with basic user and post functionality.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/walkthroughs/lesson-3.md#2025-04-13_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// keystone.ts\nimport { list, config } from '@keystone-6/core';\nimport { text, relationship } from '@keystone-6/core/fields';\n\nconst lists = {\n  User: list({\n    fields: {\n      name: text({ validation: { isRequired: true } }),\n      email: text({ validation: { isRequired: true }, isIndexed: 'unique' }),\n      posts: relationship({ ref: 'Post.author', many: true }),\n    },\n  }),\n  Post: list({\n    fields: {\n      title: text(),\n      author: relationship({\n        ref: 'User.posts',\n        ui: {\n          displayMode: 'cards',\n          cardFields: ['name', 'email'],\n          inlineEdit: { fields: ['name', 'email'] },\n          linkToItem: true,\n          inlineCreate: { fields: ['name', 'email'] },\n        },\n      }),\n    },\n  }),\n};\n\nexport default config({\n  db: {\n    provider: 'sqlite',\n    url: 'file:./keystone.db',\n  },\n  lists,\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Relationship Field UI in Keystone.js\nDESCRIPTION: Enhancing the author relationship field in the Post list with UI configuration options to improve the editing experience. This includes displaying the relationship as cards and enabling inline editing and creation.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/walkthroughs/lesson-2.md#2025-04-13_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n//keystone.ts\nimport { config, list } from '@keystone-6/core';\nimport { allowAll } from '@keystone-6/core/access';\nimport { text, relationship } from '@keystone-6/core/fields';\n\nconst lists = {\n  User: list({\n    access: allowAll,\n    fields: {\n      name: text({ validation: { isRequired: true } }),\n      email: text({ validation: { isRequired: true }, isIndexed: 'unique' }),\n      posts: relationship({ ref: 'Post.author', many: true }),\n    },\n  }),\n  Post: list({\n    access: allowAll,\n    fields: {\n      title: text(),\n      author: relationship({\n        ref: 'User.posts',\n        ui: {\n          displayMode: 'cards',\n          cardFields: ['name', 'email'],\n          inlineEdit: { fields: ['name', 'email'] },\n          linkToItem: true,\n          inlineCreate: { fields: ['name', 'email'] },\n        },\n      }),\n    },\n  }),\n};\nexport default config({\n  db: {\n    provider: 'sqlite',\n    url: 'file:./keystone.db',\n  },\n  lists,\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Admin UI in Keystone\nDESCRIPTION: Example configuration for the Admin UI in Keystone, including access control and advanced options like custom pages and file generation.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/config/config.md#2025-04-13_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport default config<TypeInfo>({\n  ui: {\n    isDisabled: false,\n    isAccessAllowed: async (context) => context.session !== undefined,\n\n    // advanced configuration\n    publicPages: ['/welcome'],\n    getAdditionalFiles: [\n      async (config: KeystoneConfig) => [\n        {\n          mode: 'write',\n          src: `\n            import { jsx } from '@keystone-ui/core';\n            export default function Welcome() {\n              return (<h1>Welcome to my Keystone system</h1>);\n            }`,\n          outputPath: 'pages/welcome.js',\n        },\n        {\n          mode: 'copy',\n          inputPath: '...',\n          outputPath: 'pages/farewell.js',\n        }\n      ],\n    ],\n  },\n  /* ... */\n});\n```\n\n----------------------------------------\n\nTITLE: Querying Document Field with Hydrated Relationships in GraphQL\nDESCRIPTION: GraphQL query example showing how to retrieve a document with fully hydrated relationship data, which includes the related item's label and selected fields.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/guides/document-fields.md#2025-04-13_snippet_7\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  posts {\n    content {\n      document(hydrateRelationships: true)\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Tasks by Label Equality in GraphQL\nDESCRIPTION: A GraphQL query demonstrating how to filter tasks based on an exact label match using the 'equals' operator.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/guides/filters.md#2025-04-13_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  tasks(where: { label: { equals: \"Hello\" } }) {\n    id\n    label\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Renderer for Inline Relationships in Document Field\nDESCRIPTION: Example of implementing a custom renderer for inline relationships in a document field, handling cases like missing data and transforming author mentions into links.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/guides/document-fields.md#2025-04-13_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DocumentRenderer, DocumentRendererProps } from '@keystone-6/document-renderer';\n\nconst renderers: DocumentRendererProps['renderers'] = {\n  inline: {\n    relationship({ relationship, data }) {\n      if (relationship === 'mention') {\n        if (data === null || data.data === undefined) {\n          return <span>[unknown author]</span>\n        } else {\n          return <Link href={`/author/${data.data.id}`}>{data.data.name}</Link>;\n        }\n      }\n      return null;\n    },\n  },\n};\n\n<DocumentRenderer document={document} renderers={renderers} />;\n```\n\n----------------------------------------\n\nTITLE: Executing createOne Query in TypeScript\nDESCRIPTION: Shows how to use the createOne method to create a new user with related posts. The query parameter specifies which fields to return after creation.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/context/query.md#2025-04-13_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = await context.query.User.createOne({\n  data: {\n    name: 'Alice',\n    posts: { create: [{ title: 'My first post' }] },\n  },\n  query: 'id name posts { id title }',\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Field Controller in TypeScript\nDESCRIPTION: This snippet defines the controller for the custom 'myInt' field type. It handles serialization, deserialization, and other functional aspects of the field's frontend implementation.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/guides/custom-fields.md#2025-04-13_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const controller = (config: FieldControllerConfig): FieldController<string, string> => {\n  return {\n    path: config.path,\n    label: config.label,\n    graphqlSelection: config.path,\n    defaultValue: '',\n    deserialize: data => {\n      const value = data[config.path]\n      return typeof value === 'number' ? value + '' : ''\n    },\n    serialize: value => ({ [config.path]: value === '' ? null : parseInt(value, 10) }),\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: ImageData Type Definitions in KeystoneJS\nDESCRIPTION: This snippet defines the TypeScript types used for image handling in KeystoneJS. It includes definitions for ImageMode, ImageExtension, and the ImageData object structure that contains metadata about images stored in the system.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/context/overview.md#2025-04-13_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype ImageMode = 'local';\n\ntype ImageExtension = 'jpg' | 'png' | 'webp' | 'gif';\n\ntype ImageData = {\n  mode: ImageMode;\n  id: string;\n  extension: ImageExtension;\n  filesize: number;\n  width: number;\n  height: number;\n};\n```\n\n----------------------------------------\n\nTITLE: KeystoneJS Configuration with Document Field\nDESCRIPTION: Enhanced KeystoneJS configuration that adds a Document field to the Post list with basic formatting capabilities.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/walkthroughs/lesson-5.md#2025-04-13_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { list, config } from '@keystone-6/core';\nimport { password, text, timestamp, select, relationship } from '@keystone-6/core/fields';\nimport { document } from '@keystone-6/fields-document';\nimport { withAuth, session } from './auth';\n\nconst lists = {\n  User: list({\n    fields: {\n      name: text({ validation: { isRequired: true } }),\n      email: text({ validation: { isRequired: true }, isIndexed: 'unique' }),\n      posts: relationship({ ref: 'Post.author', many: true }),\n      password: password({ validation: { isRequired: true } })\n    },\n  }),\n  Post: list({\n    fields: {\n      title: text(),\n      publishedAt: timestamp(),\n      status: select({\n        options: [\n          { label: 'Published', value: 'published' },\n          { label: 'Draft', value: 'draft' },\n        ],\n        defaultValue: 'draft',\n      }),\n      author: relationship({ ref: 'User.posts' }),\n      content: document()\n    },\n  }),\n};\n\nexport default config(\n  withAuth({\n    db: {\n      provider: 'sqlite',\n      url: 'file:./keystone.db',\n    },\n    lists,\n    session,\n    ui: { isAccessAllowed: (context) => !!context.session?.data },\n  })\n);\n```\n\n----------------------------------------\n\nTITLE: Updating GraphQL OrderBy Input in KeystoneJS\nDESCRIPTION: Demonstrates the change in the GraphQL 'orderBy' filter API, moving from a string-based approach to a more structured input type.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/packages/core/CHANGELOG.md#2025-04-13_snippet_30\n\nLANGUAGE: graphql\nCODE:\n```\norderBy: String\n```\n\nLANGUAGE: graphql\nCODE:\n```\norderBy: [UserOrderByInput!]! = []\n\ninput UserOrderByInput {\n  id: OrderDirection\n  name: OrderDirection\n  score: OrderDirection\n}\n\nenum OrderDirection {\n  asc\n  desc\n}\n```\n\n----------------------------------------\n\nTITLE: Combining 'every' and 'some' Filters in GraphQL\nDESCRIPTION: A GraphQL query demonstrating how to combine 'every' and 'some' filters to find people who have completed all their tasks and have at least one task assigned.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/guides/filters.md#2025-04-13_snippet_17\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  people(where: { tasks: { every: { isComplete: { equals: true } }, some: {} } }) {\n    id\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Error Handling with GraphQL Raw Operations\nDESCRIPTION: Shows how to test error cases using context.graphql.raw, specifically testing validation errors when required fields are missing.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/guides/testing.md#2025-04-13_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst { data, errors } = await context.graphql.raw({\n  query: `mutation {\n    createPerson(data: { email: \"alice@example.com\", password: \"super-secret\" }) {\n      id name email password { isSet }\n    }\n  }`,\n});\nexpect(data.createPerson).toBe(null);\nexpect(errors).toHaveLength(1);\nexpect(errors[0].path).toEqual(['createPerson']);\nexpect(errors[0].message).toEqual(\n  'You provided invalid data for this operation.\\n  - Person.name: Name must not be empty'\n);\n```\n\n----------------------------------------\n\nTITLE: Negating Label Filter in GraphQL Query\nDESCRIPTION: A GraphQL query showing how to filter tasks that don't have a specific label using the 'not' and 'equals' operators.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/guides/filters.md#2025-04-13_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  tasks(where: { label: { not: { equals: \"Hello\" } } }) {\n    id\n    label\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Virtual Field in Keystone 6\nDESCRIPTION: This example demonstrates how to create a basic 'hello' virtual field that returns a static string. It shows the minimal setup required to define a virtual field within a Keystone list.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/guides/virtual-fields.md#2025-04-13_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { config, createSchema, graphql, list } from '@keystone-6/core';\nimport { virtual } from '@keystone-6/core/fields';\n\nexport default config({\n  lists: {\n    Example: list({\n      fields: {\n        hello: virtual({\n          field: graphql.field({\n            type: graphql.String,\n            resolve() {\n              return \"Hello, world!\";\n            },\n          }),\n        }),\n      },\n    }),\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Enhancing Status Field with Default Value and Segmented Control UI\nDESCRIPTION: Improves the status field by adding a default value of 'draft' and using a segmented control UI display mode. This creates a better editorial experience by making all options visible and preventing accidental publishing.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/walkthroughs/lesson-3.md#2025-04-13_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { list, config } from '@keystone-6/core';\nimport { text, timestamp, select, relationship } from '@keystone-6/core/fields';\n\nconst lists = {\n  User: list({\n    fields: {\n      name: text({ validation: { isRequired: true } }),\n      email: text({ validation: { isRequired: true }, isIndexed: 'unique' }),\n      posts: relationship({ ref: 'Post.author', many: true }),\n    },\n  }),\n  Post: list({\n    fields: {\n      title: text(),\n      publishedAt: timestamp(),\n      status: select({\n        options: [\n          { label: 'Published', value: 'published' },\n          { label: 'Draft', value: 'draft' },\n        ],\n        defaultValue: 'draft',\n        ui: { displayMode: 'segmented-control' },\n      }),\n      author: relationship({ ref: 'User.posts' }),\n    },\n  }),\n};\n\nexport default config({\n  db: {\n    provider: 'sqlite',\n    url: 'file:./keystone.db',\n  },\n  lists,\n});\n```\n\n----------------------------------------\n\nTITLE: Filtering by To-Many Relationship with 'some' in GraphQL\nDESCRIPTION: A GraphQL query showing how to filter people based on a to-many relationship, specifically finding people with at least one task containing 'shopping' in the label.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/guides/filters.md#2025-04-13_snippet_12\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  people(where: { tasks: { some: { label: { contains: \"shopping\" } } } }) {\n    id\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example GraphQL Query for Session Data\nDESCRIPTION: Illustrates the equivalent GraphQL query that Keystone executes to load session data. Shows how the sessionData configuration translates to a GraphQL query.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/guides/auth-and-access-control.md#2025-04-13_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  person(where: { id: $session.itemId }) {\n    id\n    isAdmin\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Keystone Configuration with Post Schema\nDESCRIPTION: TypeScript configuration file for Keystone that defines a Post list with title, slug, and content fields, using SQLite as the database provider.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/blog/embedded-mode-with-sqlite-nextjs.md#2025-04-13_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n// keystone.ts\n\nimport { config, list } from '@keystone-6/core';\nimport { text } from '@keystone-6/core/fields';\nimport { allowAll } from '@keystone-6/core/access';\nimport type { Lists } from '.keystone/types';\n\nconst Post: Lists.Post = list({\n  fields: {\n    title: text({ validation: { isRequired: true } }),\n    slug: text({ isIndexed: 'unique', isFilterable: true }),\n    content: text(),\n  },\n  access: allowAll\n});\n\nexport default config({\n  db: { provider: 'sqlite', url: 'file:./app.db' },\n  lists: { Post },\n});\n```\n\n----------------------------------------\n\nTITLE: Updated To-Many Relationship Input Types\nDESCRIPTION: Revised schema for to-many relationship inputs, replacing disconnectAll with set operation and adding separate create/update input types.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/packages/core/CHANGELOG.md#2025-04-13_snippet_26\n\nLANGUAGE: graphql\nCODE:\n```\ninput ItemRelateToManyForCreateInput {\n  create: [ItemCreateInput!]\n  connect: [ItemWhereUniqueInput!]\n}\ninput ItemRelateToManyForUpdateInput {\n  disconnect: [ItemWhereUniqueInput!]\n  set: [ItemWhereUniqueInput!]\n  create: [ItemCreateInput!]\n  connect: [ItemWhereUniqueInput!]\n}\n```\n\n----------------------------------------\n\nTITLE: Styled Custom Logo Implementation with Emotion\nDESCRIPTION: Demonstrates how to create a custom logo component with emotion styling using @keystone-ui/core package for consistent styling with Keystone's internal emotion implementation.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/guides/custom-admin-ui-logo.md#2025-04-13_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n// admin/config.tsx\n\nimport { jsx } from '@keystone-ui/core';\n\nfunction CustomLogo () {\n    return <h3 css={{\n        background: 'papayawhip'\n    }}>Custom Logo here</h3>\n}\n\nexport const components = {\n    Logo: CustomLogo\n}\n```\n\n----------------------------------------\n\nTITLE: Querying raw database data with context.db.lists API in JavaScript\nDESCRIPTION: Example showing how to query for unresolved item data directly from the database using the new context.db.lists API. This replaces the resolveFields: boolean use case.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/packages/core/CHANGELOG.md#2025-04-13_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\nconst [post] = await context.db.lists.Post.findMany({\n  where: { slug },\n})\n```\n\n----------------------------------------\n\nTITLE: Applying Migrations in Production\nDESCRIPTION: This command starts Keystone and applies migrations in a production environment.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/guides/database-migration.md#2025-04-13_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nkeystone start --with-migrations\n```\n\n----------------------------------------\n\nTITLE: Customizing Document Renderer with Custom Component Renderers\nDESCRIPTION: Example of overriding the default renderers in the DocumentRenderer component to customize how specific document elements are displayed in React.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/guides/document-fields.md#2025-04-13_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { DocumentRenderer, DocumentRendererProps } from '@keystone-6/document-renderer';\n\nconst renderers: DocumentRendererProps['renderers'] = {\n  // use your editor's autocomplete to see what other renderers you can override\n  inline: {\n    bold: ({ children }) => {\n      return <strong>{children}</strong>;\n    },\n  },\n  block: {\n    paragraph: ({ children, textAlign }) => {\n      return <p style={{ textAlign }}>{children}</p>;\n    },\n  },\n};\n\n<DocumentRenderer document={document} renderers={renderers} />;\n```\n\n----------------------------------------\n\nTITLE: Configuring Keystone Schema with User and Post Lists\nDESCRIPTION: Initial Keystone.js configuration with User and Post lists, showing the data model before adding authentication.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/walkthroughs/lesson-4.md#2025-04-13_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n//keystone.ts\nimport { list, config } from '@keystone-6/core';\nimport { text, timestamp, select, relationship } from '@keystone-6/core/fields';\n\nconst lists = {\n  User: list({\n    fields: {\n      name: text({ validation: { isRequired: true } }),\n      email: text({ validation: { isRequired: true }, isIndexed: 'unique' }),\n      posts: relationship({ ref: 'Post.author', many: true }),\n    },\n  }),\n  Post: list({\n    fields: {\n      title: text(),\n      publishedAt: timestamp(),\n      status: select({\n        options: [\n          { label: 'Published', value: 'published' },\n          { label: 'Draft', value: 'draft' },\n        ],\n        defaultValue: 'draft',\n        ui: { displayMode: 'segmented-control' },\n      }),\n      author: relationship({ ref: 'User.posts' }),\n    },\n  }),\n};\n\nexport default config({\n  db: {\n    provider: 'sqlite',\n    url: 'file:./keystone.db',\n  },\n  lists,\n});\n```\n\n----------------------------------------\n\nTITLE: Session Type Definition for Access Control\nDESCRIPTION: Defines the Session type interface with user ID and admin status.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/guides/auth-and-access-control.md#2025-04-13_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ntype Session = {\n  data: {\n    id: string;\n    isAdmin: boolean;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Next.js Configuration for Keystone Integration\nDESCRIPTION: Modifications to the Next.js config file to integrate Keystone using the withKeystone function that allows Next.js to encapsulate Keystone.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/blog/embedded-mode-with-sqlite-nextjs.md#2025-04-13_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\n// next.config.js\n\n/** @type {import('next').NextConfig} */\n\n- module.exports = {\n-   reactStrictMode: true,\n- }\n\n+ const { withKeystone } = require(\"@keystone-6/core/next\");\n\n+ module.exports = withKeystone({\n+  reactStrictMode: true,\n+ });\n```\n\n----------------------------------------\n\nTITLE: Updated Update Mutation Schema\nDESCRIPTION: Modified update mutations to accept where unique inputs and made where/data arguments non-null. Shows revised mutation structure.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/packages/core/CHANGELOG.md#2025-04-13_snippet_27\n\nLANGUAGE: graphql\nCODE:\n```\ntype Mutation {\n  updateItem(where: ItemWhereUniqueInput!, data: ItemUpdateInput!): Item\n  updateItems(data: [ItemUpdateArgs!]!): [Item]\n}\n\ninput ItemUpdateArgs {\n  where: ItemWhereUniqueInput!\n  data: ItemUpdateInput!\n}\n```\n\n----------------------------------------\n\nTITLE: Grouping Fields in Keystone Admin UI\nDESCRIPTION: This snippet demonstrates how to use the group function to organize related fields together in the Keystone Admin UI, with customizable labels and descriptions for better organization.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/fields/overview.md#2025-04-13_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { config, list, group } from '@keystone-6/core';\nimport { text } from '@keystone-6/core/fields';\n\nexport default config({\n  lists: {\n    SomeListName: list({\n      fields: {\n        ...group({\n          label: 'Group label',\n          description: 'Group description',\n          fields: {\n            someFieldName: text({ /* ... */ }),\n            /* ... */\n          },\n        }),\n        /* ... */\n      },\n    }),\n    /* ... */\n  },\n  /* ... */\n});\n```\n\n----------------------------------------\n\nTITLE: Styling Custom Page in Keystone Admin UI with Emotion (TSX)\nDESCRIPTION: This code demonstrates how to apply styling to a custom Keystone Admin UI page using Emotion. It uses the jsx runtime from @keystone-ui/core for compatibility with Keystone's internal Emotion version.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/guides/custom-admin-ui-pages.md#2025-04-13_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n// admin/pages/custom-page.tsx\n/** @jsxRuntime classic */\n\nimport Link from 'next/link'\nimport { jsx } from '@keystone-ui/core'\nimport { PageContainer } from '@keystone-6/core/admin-ui/components'\nimport { Heading } from '@keystone-ui/core'\n\nexport default function CustomPage () {\n    return (\n        <PageContainer\n            header={(\n                <Heading type=\"h3\">\n                    Custom Page\n                </Heading>\n            )}>\n            <h1 css={{\n                width: '100%',\n                textAlign: 'center',\n            }}>\n                This is a custom Admin UI Page\n            </h1>\n            <p css={{ textAlign: 'center' }}>\n                It can be accessed via the route <Link href=\"/custom-page\">/custom-page</Link>\n            </p>\n        </PageContainer>\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Server Options in Keystone\nDESCRIPTION: Example configuration for the server options in Keystone, including CORS settings, port, file size limits, and custom Express app extensions.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/config/config.md#2025-04-13_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nexport default config<TypeInfo>({\n  server: {\n    cors: { origin: ['http://localhost:7777'], credentials: true },\n    port: 3000,\n    maxFileSize: 200 * 1024 * 1024,\n    extendExpressApp: async (app, commonContext) => { /* ... */ },\n    extendHttpServer: async (httpServer, commonContext) => { /* ... */ },\n  },\n  /* ... */\n});\n```\n\n----------------------------------------\n\nTITLE: Date-based Filtering in GraphQL Query\nDESCRIPTION: A GraphQL query showing how to filter tasks based on a timestamp field, specifically finding tasks due after a certain date.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/guides/filters.md#2025-04-13_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  tasks(where: { finishBy: { gt: \"2022-01-01T00:00:00.000Z\" } }) {\n    id\n    label\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom GraphQL Query Extension\nDESCRIPTION: Implements a custom GraphQL query extension for fetching recent posts with access control.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/guides/auth-and-access-control.md#2025-04-13_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nconst extendGraphqlSchema = graphQLSchemaExtension({\n  typeDefs: `\n    type Query {\n      recentPosts: [Post!]\n    }`,\n  resolvers: {\n    Query: {\n      recentPosts: (root, args, context) => {\n        var oneWeekAgo = new Date();\n        oneWeekAgo.setDate(oneWeekAgo.getDate() - 7);\n        return context.db.Post.findMany({\n          where: { publishDate: { gt: oneWeekAgo.toUTCString() } },\n          orderBy: { publishDate: 'desc' },\n        });\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Initial Keystone Configuration File\nDESCRIPTION: Creates a basic keystone.ts file with an empty default export. This file will be used to configure Keystone's behavior.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/walkthroughs/lesson-1.md#2025-04-13_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// keystone.ts\nexport default {};\n```\n\n----------------------------------------\n\nTITLE: Implementing Next.js Home Page with Keystone Query\nDESCRIPTION: Sets up the main index page that queries and displays posts from Keystone using getStaticProps. Includes post listing with links to individual post pages.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/blog/embedded-mode-with-sqlite-nextjs.md#2025-04-13_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n// pages/index.tsx\n\nimport { InferGetStaticPropsType } from 'next';\nimport Link from 'next/link';\n\n// Import the generated Lists API and types from Keystone\nimport type { Lists } from '.keystone/types';\n\ntype Post = {\n  id: string;\n  title: string;\n  slug: string;\n};\n\n// Home receives a `posts` prop from `getStaticProps` below\nexport default function Home({ posts }: InferGetStaticPropsType<typeof getStaticProps>) {\n  return (\n    <div>\n      <main style={{ margin: '3rem' }}>\n        <h1>Hello World! 👋🏻 </h1>\n        <ul>\n          {/* Render each post with a link to the content page */}\n          {posts.map(post => (\n            <li key={post.id}>\n              <Link href={`/post/${post.slug}`}>{post.title}</Link>\n            </li>\n          ))}\n        </ul>\n      </main>\n    </div>\n  );\n}\n\n// Here we use the Lists API to load all the posts we want to display\n// The return of this function is provided to the `Home` component\nexport async function getStaticProps() {\n  const posts = (await context.query.Post.findMany({ query: 'id title slug' })) as Post[];\n  return {\n    props: {\n      posts,\n    },\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Post Schema with Basic Fields in KeystoneJS\nDESCRIPTION: Creates a basic Post list schema with fields for title, publication status, timestamp, and author relationship.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/guides/auth-and-access-control.md#2025-04-13_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst Post = list({\n  fields: {\n    title: text(),\n    isPublished: checkbox(),\n    publishDate: timestamp(),\n    author: relationship({ ref: 'Person' }),\n    // more content fields would go here\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Custom GraphQL Mutation for Publishing Posts\nDESCRIPTION: Implements a custom GraphQL mutation to publish a post by updating its status and publish date. Uses the extendGraphqlSchema configuration with typeDefs and resolvers.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/examples/extend-graphql-schema-graphql-tools/README.md#2025-04-13_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n  extendGraphqlSchema: graphQLSchemaExtension({\n    typeDefs: `\n      type Mutation {\n        \"\"\" Publish a post \"\"\"\n        publishPost(id: ID!): Post\n      }`,\n    resolvers: {\n      Mutation: {\n        publishPost: (root, { id }, context) => {\n          return context.db.Post.updateOne({\n            id,\n            data: { status: 'published', publishDate: new Date().toUTCString() },\n          });\n        },\n      },\n    },\n  }),\n```\n\n----------------------------------------\n\nTITLE: Adding Admin UI Layout to Custom Page (TSX)\nDESCRIPTION: This code demonstrates how to use the PageContainer component from Keystone to add the Admin UI layout to a custom page. It includes a header prop for the page title.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/guides/custom-admin-ui-pages.md#2025-04-13_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n// admin/pages/custom-page.tsx\nimport Link from 'next/link'\nimport { PageContainer } from '@keystone-6/core/admin-ui/components'\nimport { Heading } from '@keystone-ui/core'\n\nexport default function CustomPage () {\n    return (\n        <PageContainer header={<Heading type=\"h3\">Custom Page</Heading>}>\n            <h1>This is a custom Admin UI Page</h1>\n            <p>It can be accessed via the route `/custom-page`</p>\n        </PageContainer>\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Inferring Component Block Props Types in KeystoneJS\nDESCRIPTION: Example showing how to use InferRenderersForComponentBlocks to type component block props in a DocumentRenderer. This demonstrates TypeScript type inference for component blocks with proper imports and renderer setup.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/guides/document-fields.md#2025-04-13_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nimport { DocumentRenderer } from '@keystone-6/document-renderer';\nimport { InferRenderersForComponentBlocks } from '@keystone-6/fields-document/component-blocks';\nimport { componentBlocks } from '../path/to/your/custom/views';\n\nconst componentBlockRenderers: InferRenderersForComponentBlocks<typeof componentBlocks> = {\n  someComponentBlock: props => {\n    // props will be inferred from your component blocks\n  },\n};\n\n<DocumentRenderer document={document} componentBlocks={componentBlockRenderers} />;\n```\n\n----------------------------------------\n\nTITLE: Creating a Single User with Keystone's Database API\nDESCRIPTION: Demonstrates how to use the createOne method to create a new user with nested data for related posts.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/context/db-items.md#2025-04-13_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = await context.db.User.createOne({\n  data: {\n    name: 'Alice',\n    posts: { create: [{ title: 'My first post' }] },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: One-sided One-to-Many Relationship in Keystone\nDESCRIPTION: Configures a one-sided relationship where posts have a single author but users can have multiple posts. Sets the relationship's many option to false to establish this cardinality.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/guides/relationships.md#2025-04-13_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { config, list } from '@keystone-6/core';\nimport { text, relationship } from '@keystone-6/core/fields';\n\nexport default config({\n  lists: {\n    User: list({\n      fields: {\n        name: text(),\n      },\n    }),\n    Post: list({\n      fields: {\n        title: text(),\n        content: text(),\n        author: relationship({ ref: 'User', many: false }),\n      },\n    }),\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Querying All Tasks in GraphQL\nDESCRIPTION: A basic GraphQL query to retrieve all tasks from the system, returning their id and label.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/guides/filters.md#2025-04-13_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  tasks {\n    id\n    label\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Password Change Tracking Fields in KeystoneJS\nDESCRIPTION: TypeScript implementation of fields added to the Person list schema, featuring a password field and a hidden timestamp field that automatically updates when a password is changed.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/examples/custom-session-invalidation/README.md#2025-04-13_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n    email: text({ isIndexed: 'unique', validation: { isRequired: true } }),\n    password: password({\n        validation: { isRequired: true },\n      }),\n    passwordChangedAt: timestamp({\n        access: () => false,\n        hooks: {\n          resolveInput: ({ resolvedData }) => {\n            if (resolvedData.password) {\n              return new Date();\n            }\n            return;\n          },\n        },\n        ui: {\n          createView: { fieldMode: 'hidden' },\n          itemView: { fieldMode: 'hidden' },\n          listView: { fieldMode: 'hidden' },\n        },\n      }),\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Users with Keystone's Database API\nDESCRIPTION: Shows how to use the createMany method to create multiple users with their related posts in a single operation.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/context/db-items.md#2025-04-13_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst users = await context.db.User.createMany({\n  data: [\n    {\n      name: 'Alice',\n      posts: { create: [{ title: 'Alices first post' }] },\n    },\n    {\n      name: 'Bob',\n      posts: { create: [{ title: 'Bobs first post' }] },\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: GraphQL Mutation: Deleting a Single User\nDESCRIPTION: Example of a GraphQL mutation to delete a single user identified by a unique input.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/graphql/overview.md#2025-04-13_snippet_10\n\nLANGUAGE: graphql\nCODE:\n```\ntype Mutation {\n  deleteUser(where: UserWhereUniqueInput!): User\n}\n\ninput UserWhereUniqueInput {\n  id: ID\n}\n\ntype User {\n  id: ID!\n  name: String\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL API for Initial User Creation in Keystone 6\nDESCRIPTION: This GraphQL schema snippet shows the mutation added to the API when the initFirstItem option is enabled. It allows for creating the initial user in the system.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/config/auth.md#2025-04-13_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\ntype Mutation {\n  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!\n}\n\ninput CreateInitialUserInput {\n  name: String\n  email: String\n  password: String\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Navigation Component Structure in KeystoneJS\nDESCRIPTION: Sets up the basic structure for the CustomNavigation component, including the necessary imports and component definition.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/guides/custom-admin-ui-navigation.md#2025-04-13_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n// admin/components/CustomNavigation.tsx\n\nimport type { NavigationProps } from '@keystone-6/core/admin-ui/components'\nexport function CustomNavigation({ lists }: NavigationProps) {\n  return (\n    {/* ... */}\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Executing count Query in TypeScript\nDESCRIPTION: Demonstrates how to use the count method to get the number of users matching a specific condition.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/context/query.md#2025-04-13_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst count = await context.query.User.count({\n  where: { name: { startsWith: 'A' } },\n});\n```\n\n----------------------------------------\n\nTITLE: Filtering Assigned Tasks in GraphQL\nDESCRIPTION: A GraphQL query demonstrating how to find tasks that have any user assigned by using the NOT operator with a null check.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/guides/filters.md#2025-04-13_snippet_11\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  tasks(where: { NOT: { assignedTo: null } }) {\n    id\n    label\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using TypeInfo for Keystone Configuration in TypeScript\nDESCRIPTION: Shows how to use the TypeInfo type argument with the config function to ensure proper typing for the Keystone Context.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/config/config.md#2025-04-13_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { TypeInfo } from \".keystone/types\";\n\nexport default config<TypeInfo>({ /* ... */ });\n```\n\n----------------------------------------\n\nTITLE: Initializing Apollo Client with GraphQL Endpoint in JavaScript\nDESCRIPTION: Example of initializing an Apollo Client instance with the GraphQL API endpoint, typically set as an environment variable.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/graphql/overview.md#2025-04-13_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst client = new ApolloClient({\n  uri: process.env.APOLLO_CLIENT_GRAPHQL_URI || 'http://localhost:3000/api/graphql',\n  cache: new InMemoryCache()\n});\n```\n\n----------------------------------------\n\nTITLE: Keystone.js Project Directory Structure\nDESCRIPTION: Overview of the files and folders generated by create-keystone-app, including configuration files, dependencies, and TypeScript setup.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/getting-started.md#2025-04-13_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n.\n├── auth.ts            # Authentication configuration for Keystone\n├── keystone.ts        # The main entry file for configuring Keystone\n├── node_modules       # Your dependencies\n├── package.json       # Your package.json with four scripts prepared for you\n├── package-lock.json  # Your npm lock file\n├── README.md          # Additional info to help you get started\n├── schema.graphql     # GraphQL schema (automatically generated by Keystone)\n├── schema.prisma      # Prisma configuration (automatically generated by Keystone)\n├── schema.ts          # Where you design your data schema\n└── tsconfig.json      # Your typescript config\n```\n\n----------------------------------------\n\nTITLE: Rendering Author.bio with Default DocumentRenderer\nDESCRIPTION: React component using the DocumentRenderer from @keystone-6/document-renderer to render the Author.bio field with minimal default styling.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/examples/document-field/README.md#2025-04-13_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { DocumentRenderer } from '@keystone-6/document-renderer'\n;<DocumentRenderer document={author.bio.document} />\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Navigation Component in KeystoneJS\nDESCRIPTION: Completes the implementation of the CustomNavigation component, using Keystone's helper components to render list items and custom routes.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/guides/custom-admin-ui-navigation.md#2025-04-13_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { NavigationContainer, NavItem, ListNavItems } from '@keystone-6/core/admin-ui/components'\nimport type { NavigationProps } from '@keystone-6/core/admin-ui/components'\n\nexport function CustomNavigation({ lists }: NavigationProps) {\n  return (\n    <NavigationContainer>\n      <NavItem href=\"/\">Dashboard</NavItem>\n      <ListNavItems lists={lists}/>\n      <NavItem href=\"https://keystonejs.com/\">\n        Keystone Docs\n      </NavItem>\n    </NavigationContainer>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query: Counting Users\nDESCRIPTION: Example of a GraphQL query to count the number of users matching specific criteria.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/graphql/overview.md#2025-04-13_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\ntype Query {\n  usersCount(where: UserWhereInput! = {}): Int\n}\n\ninput UserWhereInput {\n  AND: [UserWhereInput!]\n  OR: [UserWhereInput!]\n  NOT: [UserWhereInput!]\n  id: IDFilter\n  name: StringNullableFilter\n}\n\ninput IDFilter {\n  equals: ID\n  in: [ID!]\n  notIn: [ID!]\n  lt: ID\n  lte: ID\n  gt: ID\n  gte: ID\n  not: IDFilter\n}\n\ninput StringNullableFilter {\n  equals: String\n  in: [String!]\n  notIn: [String!]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  mode: QueryMode\n  not: NestedStringNullableFilter\n}\n\nenum QueryMode {\n  default\n  insensitive\n}\n\ninput NestedStringNullableFilter {\n  equals: String\n  in: [String!]\n  notIn: [String!]\n  lt: String\n  lte: String\n  gt: String\n  gte: String\n  contains: String\n  startsWith: String\n  endsWith: String\n  not: NestedStringNullableFilter\n}\n```\n\n----------------------------------------\n\nTITLE: Choosing Between Stateless and Stored Sessions in Keystone.js\nDESCRIPTION: Demonstrates the two session configuration approaches in Keystone.js. Stateless sessions store all data in cookies, while stored sessions keep a session ID in cookies with data stored server-side.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/config/session.md#2025-04-13_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { config } from '@keystone-6/core';\nimport { statelessSessions, storedSessions } from '@keystone-6/core/session';\n\nexport default config({\n  // Stateless\n  session: statelessSessions({ /* ... */ }),\n\n  // Stored\n  session: storedSessions({ store: { /* ... */ }, /* ... */ }),\n  /* ... */\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Navigation Component in KeystoneJS\nDESCRIPTION: Specifies the custom Navigation component in the AdminConfig file.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/guides/custom-admin-ui-navigation.md#2025-04-13_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// /admin/config.ts\nimport type { AdminConfig } from '@keystone-6/core/types'\nimport { CustomNavigation } from './components/CustomNavigation'\n\nexport const components: AdminConfig['components'] = {\n  Navigation: CustomNavigation\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Basic Authentication Configuration\nDESCRIPTION: Initial authentication setup that configures the User list for authentication, specifying email and password as the fields used for login.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/walkthroughs/lesson-4.md#2025-04-13_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// auth.ts\nimport { createAuth } from '@keystone-6/auth';\n\nconst { withAuth } = createAuth({\n  listKey: 'User',\n  identityField: 'email',\n  sessionData: 'name',\n  secretField: 'password',\n});\n\nexport { withAuth };\n```\n\n----------------------------------------\n\nTITLE: Creating a Self-Referencing GraphQL Object Type\nDESCRIPTION: This example shows how to create a GraphQL object type that references itself, which is useful for recursive data structures. It defines a Person type where each person can have friends who are also Person objects.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/guides/virtual-fields.md#2025-04-13_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ntype PersonSource = { name: string; friends: PersonSource[] };\n\nconst Person: graphql.ObjectType<PersonSource> = graphql.object<PersonSource>()({ \n  name: \"Person\",\n  fields: () => ({\n    name: graphql.field({ type: graphql.String }),\n    friends: graphql.field({ type: graphql.list(Person) }),\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Querying All Posts with GraphQL\nDESCRIPTION: A basic GraphQL query that fetches all posts from the API. This demonstrates how to access the blog post data via GraphQL regardless of publish status.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/walkthroughs/lesson-3.md#2025-04-13_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nquery getAllPosts {\n  posts {\n    title\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updated Authentication Configuration with sessionData\nDESCRIPTION: New implementation of KeystoneJS authentication using sessionData option in createAuth function. Demonstrates the simplified approach to configuring user session data.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/packages/auth/CHANGELOG.md#2025-04-13_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { config, createSchema, list } from '@keystone-next/keystone/schema';\nimport { statelessSessions } from '@keystone-next/keystone/session';\nimport { text, password, checkbox } from '@keystone-next/fields';\nimport { createAuth } from '@keystone-next/auth';\n\nconst { withAuth } = createAuth({\n  listKey: 'User',\n  identityField: 'email',\n  secretField: 'password',\n  sessionData: 'id isAdmin',\n});\n\nconst session = statelessSessions({ secret: '-- EXAMPLE COOKIE SECRET; CHANGE ME --' });\n\nexport default withAuth(\n  config({\n    lists: createSchema({\n        fields: {\n          email: text({ isUnique: true }),\n          password: password(),\n          isAdmin: checkbox(),\n        },\n      }),\n      session,\n    }),\n  })\n);\n```\n\n----------------------------------------\n\nTITLE: Keystone Database Reset Command\nDESCRIPTION: Command to reset and recreate the database from scratch using Prisma.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/guides/cli.md#2025-04-13_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ keystone prisma db push --force-reset\n```\n\n----------------------------------------\n\nTITLE: Counting Users with Keystone's Database API\nDESCRIPTION: Illustrates how to use the count method to get the number of users matching a specific condition.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/context/db-items.md#2025-04-13_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst count = await context.db.User.count({\n  where: { name: { startsWith: 'A' } },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Many-to-Many Relationships in TypeScript\nDESCRIPTION: Example of defining relationships between Post and Tag entities in Keystone using the relationship field type.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/packages/core/CHANGELOG.md#2025-04-13_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nPost: list({\n  fields: {\n    tags: relationship({ ref: 'Tag.posts', many: true }),\n  },\n}),\nTag: list({\n  fields: {\n    posts: relationship({ ref: 'Post.tags', many: true }),\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL Database in Keystone\nDESCRIPTION: Configuration snippet for setting up PostgreSQL as the database provider in Keystone. Requires a valid PostgreSQL connection URL to be provided via environment variable or direct configuration.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/packages/create/starter/README.md#2025-04-13_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ndb: {\n    provider: 'postgresql',\n    url: process.env.DATABASE_URL || 'DATABASE_URL_TO_REPLACE',\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating Auth and Sessions with Keystone Config\nDESCRIPTION: Updates the Keystone configuration to use authentication and session management, adding access control to restrict Admin UI to authenticated users only.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/walkthroughs/lesson-4.md#2025-04-13_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n//keystone.ts\nimport { list, config } from '@keystone-6/core';\nimport { password, text, timestamp, select, relationship } from '@keystone-6/core/fields';\nimport { withAuth, session } from './auth';\n\nconst lists = {\n  User: list({\n    fields: {\n      name: text({ validation: { isRequired: true } }),\n      email: text({ validation: { isRequired: true }, isIndexed: 'unique' }),\n      posts: relationship({ ref: 'Post.author', many: true }),\n      password: password({ validation: { isRequired: true } })\n    },\n  }),\n  Post: list({\n    fields: {\n      title: text(),\n      publishedAt: timestamp(),\n      status: select({\n        options: [\n          { label: 'Published', value: 'published' },\n          { label: 'Draft', value: 'draft' },\n        ],\n        defaultValue: 'draft',\n        ui: { displayMode: 'segmented-control' },\n      }),\n      author: relationship({ ref: 'User.posts' }),\n    },\n  }),\n};\n\nexport default config(\n  withAuth({\n    db: {\n      provider: 'sqlite',\n      url: 'file:./keystone.db',\n    },\n    lists,\n    session,\n    ui: {\n      isAccessAllowed: (context) => !!context.session?.data,\n    },\n  })\n);\n```\n\n----------------------------------------\n\nTITLE: Executing deleteOne Query in TypeScript\nDESCRIPTION: Shows how to use the deleteOne method to delete a single user by ID. The query parameter specifies which fields of the deleted user to return.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/context/query.md#2025-04-13_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = await context.query.User.deleteOne({\n  where: { id: '...' },\n  query: 'id name posts { id title }',\n});\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server\nDESCRIPTION: Command to start the development server which serves the web frontend at localhost:3000\nSOURCE: https://github.com/keystonejs/keystone/blob/main/examples/framework-nextjs-two-servers/nextjs-frontend/README.md#2025-04-13_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query for Tags with Posts\nDESCRIPTION: Example GraphQL query showing how to fetch tags with their associated posts.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/guides/auth-and-access-control.md#2025-04-13_snippet_12\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  tags {\n    posts {\n      title\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Keystone Artifacts API\nDESCRIPTION: A new artifacts entrypoint is available for accessing generated Keystone artifacts like the Prisma client or GraphQL schema.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/packages/core/CHANGELOG.md#2025-04-13_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\nimport { /* artifacts exports */ } from '@keystone-next/keystone/artifacts';\n```\n\n----------------------------------------\n\nTITLE: Initial KeystoneJS Configuration with User and Post Lists\nDESCRIPTION: Basic KeystoneJS configuration showing User and Post list definitions with authentication setup. Includes field definitions for basic post metadata and user information.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/walkthroughs/lesson-5.md#2025-04-13_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { list, config } from '@keystone-6/core';\nimport { password, text, timestamp, select, relationship } from '@keystone-6/core/fields';\nimport { withAuth, session } from './auth';\n\nconst lists = {\n  User: list({\n    fields: {\n      name: text({ validation: { isRequired: true } }),\n      email: text({ validation: { isRequired: true }, isIndexed: 'unique' }),\n      posts: relationship({ ref: 'Post.author', many: true }),\n      password: password({ validation: { isRequired: true } })\n    },\n  }),\n  Post: list({\n    fields: {\n      title: text(),\n      publishedAt: timestamp(),\n      status: select({\n        options: [\n          { label: 'Published', value: 'published' },\n          { label: 'Draft', value: 'draft' },\n        ],\n        defaultValue: 'draft',\n        ui: { displayMode: 'segmented-control' },\n      }),\n      author: relationship({ ref: 'User.posts' }),\n    },\n  }),\n};\n\nexport default config(\n  withAuth({\n    db: {\n      provider: 'sqlite',\n      url: 'file:./keystone.db',\n    },\n    lists,\n    session,\n    ui: {\n      isAccessAllowed: (context) => !!context.session?.data,\n    },\n  })\n);\n```\n\n----------------------------------------\n\nTITLE: Querying Published Posts with GraphQL Filters\nDESCRIPTION: A filtered GraphQL query that fetches only published posts. This demonstrates how to use the status field to control which posts are returned from the API.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/walkthroughs/lesson-3.md#2025-04-13_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\nquery getPublishedPosts {\n  posts(where: { status: { equals: \"published\" } }) {\n    title\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Document Field Content with React Component\nDESCRIPTION: Basic example of rendering document field content in a React application using the DocumentRenderer component from the @keystone-6/document-renderer package.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/guides/document-fields.md#2025-04-13_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { DocumentRenderer } from '@keystone-6/document-renderer';\n\n<DocumentRenderer document={document} />;\n```\n\n----------------------------------------\n\nTITLE: Legacy Authentication Configuration with withItemData\nDESCRIPTION: Previous implementation of KeystoneJS authentication using withItemData wrapper for session configuration. Shows how to set up user authentication with email, password and admin status.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/packages/auth/CHANGELOG.md#2025-04-13_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { config, createSchema, list } from '@keystone-next/keystone/schema';\nimport { statelessSessions, withAuthData } from '@keystone-next/keystone/session';\nimport { text, password, checkbox } from '@keystone-next/fields';\nimport { createAuth } from '@keystone-next/auth';\n\nconst { withAuth } = createAuth({\n  listKey: 'User',\n  identityField: 'email',\n  secretField: 'password',\n});\n\nconst session = statelessSessions({ secret: '-- EXAMPLE COOKIE SECRET; CHANGE ME --' });\n\nexport default withAuth(\n  config({\n    lists: createSchema({\n        fields: {\n          email: text({ isUnique: true }),\n          password: password(),\n          isAdmin: checkbox(),\n        },\n      }),\n      session: withItemData(session, { User: 'id isAdmin' }),\n    }),\n  })\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Session Data in Keystone Auth\nDESCRIPTION: Adding sessionData configuration to createAuth to specify which fields should be loaded during session initialization. This example loads the isAdmin field for access control.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/guides/auth-and-access-control.md#2025-04-13_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nconst { withAuth } = createAuth({\n  // ...\n  sessionData: 'isAdmin',\n});\n```\n\n----------------------------------------\n\nTITLE: Filtering Unassigned Tasks in GraphQL\nDESCRIPTION: A GraphQL query showing how to find tasks that have no assigned user by setting the relationship field to null.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/guides/filters.md#2025-04-13_snippet_10\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  tasks(where: { assignedTo: null }) {\n    id\n    label\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Keystone Development Server\nDESCRIPTION: Command to start the Keystone development server, which launches the Admin UI at localhost:3000 and provides access to a GraphQL Playground.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/examples/limits/README.md#2025-04-13_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Initializing Keystone Context Using getContext\nDESCRIPTION: Example showing how to initialize a Keystone context using getContext function. Requires a built Prisma client and Keystone configuration. Note that this context doesn't have an implicit session and isn't a sudo() context.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/context/get-context.md#2025-04-13_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getContext } from '@keystone-6/core/context';\nimport config from './keystone';\nimport * as PrismaModule from '.prisma/client';\n\nconst context = getContext(config, PrismaModule);\n\n// ... whatever you need\n```\n\n----------------------------------------\n\nTITLE: Updated Relationship Input Types for Create Operations\nDESCRIPTION: New schema for to-one relationship inputs in create operations, requiring exactly one field per input. Shows ItemRelateToOneForCreate and Update inputs.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/packages/core/CHANGELOG.md#2025-04-13_snippet_25\n\nLANGUAGE: graphql\nCODE:\n```\ninput ItemRelateToOneForCreateInput {\n  create: ItemCreateInput\n  connect: ItemWhereUniqueInput\n}\ninput ItemRelateToOneForUpdateInput {\n  create: ItemCreateInput\n  connect: ItemWhereUniqueInput\n  disconnect: Boolean\n}\n```\n\n----------------------------------------\n\nTITLE: Customized Document Field Configuration\nDESCRIPTION: Final KeystoneJS configuration with fully customized Document field including formatting options, links, dividers, and custom layouts.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/walkthroughs/lesson-5.md#2025-04-13_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { list, config } from '@keystone-6/core';\nimport { password, text, timestamp, select, relationship } from '@keystone-6/core/fields';\nimport { document } from '@keystone-6/fields-document';\nimport { withAuth, session } from './auth';\n\nconst lists = {\n  User: list({\n    fields: {\n      name: text({ validation: { isRequired: true } }),\n      email: text({ validation: { isRequired: true }, isIndexed: 'unique' }),\n      posts: relationship({ ref: 'Post.author', many: true }),\n      password: password({ validation: { isRequired: true } })\n    },\n  }),\n  Post: list({\n    fields: {\n      title: text(),\n      publishedAt: timestamp(),\n      status: select({\n        options: [\n          { label: 'Published', value: 'published' },\n          { label: 'Draft', value: 'draft' },\n        ],\n        defaultValue: 'draft',\n      }),\n      author: relationship({ ref: 'User.posts' }),\n      content: document({\n        formatting: true,\n        links: true,\n        dividers: true,\n        layouts: [\n          [1, 1],\n          [1, 1, 1],\n          [2, 1],\n          [1, 2],\n          [1, 2, 1],\n        ],\n      }),\n    },\n  }),\n};\n\nexport default config(\n  withAuth({\n    db: {\n      provider: 'sqlite',\n      url: 'file:./keystone.db',\n    },\n    lists,\n    session,\n    ui: { isAccessAllowed: (context) => !!context.session?.data },\n  })\n);\n```\n\n----------------------------------------\n\nTITLE: GraphQL Response with Virtual Field\nDESCRIPTION: This shows the expected JSON response from querying a virtual field. The response includes both the requested ID field and the computed 'hello' virtual field value.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/guides/virtual-fields.md#2025-04-13_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{ example: { id: \"1\", hello: \"Hello, world! } }\n```\n\n----------------------------------------\n\nTITLE: Configuring KeystoneJS Auth with Session Data\nDESCRIPTION: TypeScript code for the KeystoneJS authentication setup, specifying the list, identity field, secret field, initialization settings, and including passwordChangedAt in session data.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/examples/custom-session-invalidation/README.md#2025-04-13_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createAuth } from '@keystone-6/auth'\n\nconst { withAuth } = createAuth({\n  listKey: 'Person',\n  identityField: 'email',\n  secretField: 'password',\n  initFirstItem: { fields: ['name', 'email', 'password'] },\n  sessionData: 'id passwordChangedAt',\n})\n```\n\n----------------------------------------\n\nTITLE: Post Published Subscription Query in GraphQL\nDESCRIPTION: GraphQL subscription query that receives post data whenever the custom publishPost mutation is triggered. Returns post ID, title, publish date and author information.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/examples/extend-graphql-subscriptions/README.md#2025-04-13_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nsubscription PublishedPost {\n  postPublished {\n    id\n    title\n    publishDate\n    author {\n      name\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using allowAll for Operation-Level Access Control\nDESCRIPTION: Shows how to use the allowAll helper function specifically for operation-level access control to enable all operations on a list.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/config/access-control.md#2025-04-13_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { config, list } from '@keystone-6/core';\nimport { allowAll } from '@keystone-6/core/access';\n\nexport default config({\n  lists: {\n    ListKey: list({\n      access: {\n        operation: allowAll\n      },\n    }),\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Deleting Multiple Users with Keystone's Database API\nDESCRIPTION: Illustrates how to use the deleteMany method to remove multiple users by their IDs in a single operation.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/context/db-items.md#2025-04-13_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst users = await context.db.User.deleteMany({\n  where: [{ id: '...' }, { id: '...' }],\n});\n```\n\n----------------------------------------\n\nTITLE: Running Keystone Project with Custom Admin UI\nDESCRIPTION: Command to start the Keystone project with a custom Admin UI. This will launch the Admin UI at localhost:3000 and provide access to a GraphQL Playground.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/examples/custom-admin-ui-logo/README.md#2025-04-13_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Session Store Interface for Stored Sessions in Keystone.js\nDESCRIPTION: Defines the SessionStore interface needed when implementing stored sessions. The store must provide methods for setting, getting, and deleting session data by sessionId.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/config/session.md#2025-04-13_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst store = {\n  set: async (sessionId, data) => { /* ... */ },\n  get: async (sessionId) => {\n    /* ... */\n    return data;\n  },\n  delete: async (sessionId) => { /* ... */ },\n};\n```\n\n----------------------------------------\n\nTITLE: Importing mergeSchemas from GraphQL-Tools\nDESCRIPTION: Shows how to import the mergeSchemas function from @graphql-tools/schema to use for combining schemas.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/guides/schema-extension.md#2025-04-13_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { mergeSchemas } from '@graphql-tools/schema';\n```\n\n----------------------------------------\n\nTITLE: Disabling Telemetry in Project Configuration\nDESCRIPTION: Code snippet showing how to disable telemetry for a specific project by adding a configuration option to the keystone.ts file, which is compatible with source control.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/reference/telemetry.md#2025-04-13_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nexport default config({\n  db: {\n    // ...\n  },\n  lists,\n\n  // this will opt-out of device and project telemetry, for this project\n  telemetry: false\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring BigInt Field in KeystoneJS Schema\nDESCRIPTION: Example configuration of a BigInt field in a KeystoneJS schema definition. Shows how to set up a BigInt field with default value, custom database mapping, required validation, and unique indexing.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/fields/bigint.md#2025-04-13_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { config, list } from '@keystone-6/core';\nimport { bigInt } from '@keystone-6/core/fields';\n\nexport default config({\n  lists: {\n    SomeListName: list({\n      fields: {\n        someFieldName: bigInt({\n          defaultValue: 0n,\n          db: { map: 'my_bigint' },\n          validation: {\n            isRequired: true,\n          },\n          isIndexed: 'unique',\n        }),\n        /* ... */\n      },\n    }),\n    /* ... */\n  },\n  /* ... */\n});\n```\n\n----------------------------------------\n\nTITLE: Using GraphQL Field Extensions in Keystone 6\nDESCRIPTION: New GraphQL extension capabilities with graphql.extend and graphql.wrap methods for extending the GraphQL schema functionality.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/packages/core/CHANGELOG.md#2025-04-13_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// Using the new graphql.extend and graphql.wrap methods\ngraphql: {\n  extend: customExtensionFunction,\n  wrap: customWrapperFunction\n}\n```\n\n----------------------------------------\n\nTITLE: Time Subscription Query in GraphQL\nDESCRIPTION: GraphQL subscription query that continuously receives the current time in ISO format every second.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/examples/extend-graphql-subscriptions/README.md#2025-04-13_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nsubscription Time {\n  time {\n    iso\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Custom Navigation Implementation in KeystoneJS\nDESCRIPTION: Shows the full implementation of the custom Navigation component and its configuration in the Admin UI.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/guides/custom-admin-ui-navigation.md#2025-04-13_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n// admin/components/CustomNavigation.tsx\nimport { NavigationContainer, NavItem, ListNavItems } from '@keystone-6/core/admin-ui/components'\nimport type { NavigationProps } from '@keystone-6/core/admin-ui/components'\n\nexport function CustomNavigation({ lists }: NavigationProps) {\n  return (\n    <NavigationContainer>\n      <NavItem href=\"/\">Dashboard</NavItem>\n      <ListNavItems lists={lists}/>\n      <NavItem href=\"https://keystonejs.com/\">\n        Keystone Docs\n      </NavItem>\n    </NavigationContainer>\n  )\n}\n\n\n// admin/config.ts\nimport { AdminConfig } from '@keystone-6/core/types'\nimport { CustomNavigation } from './components/CustomNavigation'\nexport const components: AdminConfig['components'] = {\n  Navigation: CustomNavigation\n}\n```\n\n----------------------------------------\n\nTITLE: Integer Field Auto-increment Configuration\nDESCRIPTION: Configuration example for Integer fields with auto-increment in MySQL, showing the required indexing configuration.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/guides/choosing-a-database.md#2025-04-13_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\ndefaultValue: { kind: 'autoincrement' }\nisIndexed: true\n```\n\n----------------------------------------\n\nTITLE: KeystoneJS Development Server Start Command\nDESCRIPTION: Shell command to start the KeystoneJS development server after installing dependencies.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/examples/extend-graphql-subscriptions/README.md#2025-04-13_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: SQL Migration for Checkbox Field Non-Nullable Update\nDESCRIPTION: A SQL migration example to modify a PostgreSQL database when upgrading checkbox fields to be non-nullable. This script sets default values for any null fields, then enforces the non-nullable constraint.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/packages/core/CHANGELOG.md#2025-04-13_snippet_16\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE \"User\" ALTER COLUMN \"isAdmin\" SET DEFAULT false;\nUPDATE \"User\" SET \"isAdmin\" = DEFAULT WHERE \"isAdmin\" IS NULL;\nALTER TABLE \"User\" ALTER COLUMN \"isAdmin\" SET NOT NULL;\n```\n\n----------------------------------------\n\nTITLE: Document Field Structure Example in JSON\nDESCRIPTION: Example of how document field data is stored as a JSON blob in KeystoneJS, showing a simple document with a heading and paragraph structure. Demonstrates the hierarchical nature of Slate's data model.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/packages/fields-document/ARCHITECTURE.md#2025-04-13_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"type\": \"heading\",\n    \"level\": 1,\n    \"children\": [\n      {\n        \"text\": \"content\"\n      }\n    ]\n  }\n  {\n    \"type\": \"paragraph\",\n    \"children\": [\n      {\n        \"text\": \"some text\"\n      }\n    ]\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Example Project Telemetry JSON Format\nDESCRIPTION: Demonstrates the structure of project telemetry data that Keystone collects, including package versions, database type, number of lists, and field types being used in a project.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/reference/telemetry.md#2025-04-13_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"lastSentDate\": \"2024-11-23\",\n  \"packages\": {\n    \"@keystone-6/auth\": \"8.0.1\",\n    \"@keystone-6/core\": \"6.1.0\",\n    \"@keystone-6/document-renderer\": \"1.1.2\",\n    \"@keystone-6/fields-document\": \"5.0.2\"\n  },\n  \"database\": \"postgresql\",\n  \"lists\": 3,\n  \"fields\": {\n    \"unknown\": 1,\n    \"@keystone-6/text\": 5,\n    \"@keystone-6/timestamp\": 2,\n    \"@keystone-6/checkbox\": 1\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Publish Date with timestamp Field\nDESCRIPTION: Extends the Post list with a publishedAt timestamp field to capture when posts should be published. This enables tracking of publication dates for controlling content visibility.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/walkthroughs/lesson-3.md#2025-04-13_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { list, config } from '@keystone-6/core';\nimport { text, timestamp, relationship } from '@keystone-6/core/fields';\n\nconst lists = {\n  User: list({\n    fields: {\n      name: text({ validation: { isRequired: true } }),\n      email: text({ validation: { isRequired: true }, isIndexed: 'unique' }),\n      posts: relationship({ ref: 'Post.author', many: true }),\n    },\n  }),\n  Post: list({\n    fields: {\n      title: text(),\n      publishedAt: timestamp(),\n      author: relationship({\n        ref: 'User.posts',\n        ui: {\n          displayMode: 'cards',\n          cardFields: ['name', 'email'],\n          inlineEdit: { fields: ['name', 'email'] },\n          linkToItem: true,\n          inlineCreate: { fields: ['name', 'email'] },\n        },\n      }),\n    },\n  }),\n};\n\nexport default config({\n  db: {\n    provider: 'sqlite',\n    url: 'file:./keystone.db',\n  },\n  lists,\n});\n```\n\n----------------------------------------\n\nTITLE: Updated Query Filter Schema in GraphQL\nDESCRIPTION: Updated filter structure to use nested filters instead of flattened ones and added top-level NOT operator. Example shows posts query with nested title filter.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/packages/core/CHANGELOG.md#2025-04-13_snippet_24\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  posts(where: { title: { contains: \"Something\" } }) {\n    title\n    content\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Next.js + Keystone Example to Vercel\nDESCRIPTION: A markdown snippet containing a Vercel deployment button for the Next.js + Keystone example. This allows users to quickly clone and deploy the example project to Vercel for testing and exploration.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/examples/framework-nextjs-app-directory/README.md#2025-04-13_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![Deploy with Vercel](https://vercel.com/button)](https://vercel.com/new/clone?repository-url=https%3A%2F%2Fgithub.com%2Fkeystonejs%2Fkeystone%2Ftree%2Fmain%2Fexamples%2Fframework-nextjs-app-directory)\n```\n\n----------------------------------------\n\nTITLE: Adding a Status Field with select Field\nDESCRIPTION: Extends the Post list with a status select field that provides published/draft options. This enables tracking of a post's editorial status for controlling content visibility.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/walkthroughs/lesson-3.md#2025-04-13_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { list, config } from '@keystone-6/core';\nimport { text, relationship, timestamp, select } from '@keystone-6/core/fields';\n\nconst lists = {\n  User: list({\n    fields: {\n      name: text({ validation: { isRequired: true } }),\n      email: text({ validation: { isRequired: true }, isIndexed: 'unique' }),\n      posts: relationship({ ref: 'Post.author', many: true }),\n    },\n  }),\n  Post: list({\n    fields: {\n      title: text(),\n      publishedAt: timestamp(),\n      author: relationship({\n        ref: 'User.posts',\n        ui: {\n          displayMode: 'cards',\n          cardFields: ['name', 'email'],\n          inlineEdit: { fields: ['name', 'email'] },\n          linkToItem: true,\n          inlineCreate: { fields: ['name', 'email'] },\n        },\n      }),\n      status: select({\n        options: [\n          { label: 'Published', value: 'published' },\n          { label: 'Draft', value: 'draft' },\n        ],\n      }),\n    },\n  }),\n};\n\nexport default config({\n  db: {\n    provider: 'sqlite',\n    url: 'file:./keystone.db',\n  },\n  lists,\n});\n```\n\n----------------------------------------\n\nTITLE: Adding withKeystone NextJS Integration\nDESCRIPTION: A new function called withKeystone is available in the next entrypoint for integrating Keystone with Next.js applications.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/packages/core/CHANGELOG.md#2025-04-13_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\nimport { withKeystone } from '@keystone-next/keystone/next';\n```\n\n----------------------------------------\n\nTITLE: Exporting Custom Components for Keystone Admin UI\nDESCRIPTION: Example of how to export custom components, specifically a custom logo, for use in the Keystone Admin UI. This code would be placed in the /admin/config.tsx file.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/examples/custom-admin-ui-logo/README.md#2025-04-13_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\n\n// Example of exporting custom components\nexport const components = {\n  // Custom logo component\n  Logo: () => <img src=\"/path/to/your/logo.png\" alt=\"Custom Logo\" />\n};\n```\n\n----------------------------------------\n\nTITLE: Generated Prisma Schema for Many-to-Many Relationships\nDESCRIPTION: Example of the Prisma schema generated by Keystone for many-to-many relationships between Post and Tag models.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/packages/core/CHANGELOG.md#2025-04-13_snippet_7\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource postgresql {\n  url      = env(\"DATABASE_URL\")\n  provider = \"postgresql\"\n}\n\ngenerator client {\n  provider   = \"prisma-client-js\"\n  output     = \"node_modules/.prisma/client\"\n  engineType = \"binary\"\n}\n\nmodel Post {\n  id   String @id @default(cuid())\n  tags Tag[]  @relation(\"Post_tags_Tag_posts\")\n}\n\nmodel Tag {\n  id    String @id @default(cuid())\n  posts Post[] @relation(\"Post_tags_Tag_posts\")\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Keystone Postinstall Script to Package.json\nDESCRIPTION: Update to the package.json scripts to include Keystone's postinstall script which ensures proper setup after dependency installation.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/blog/embedded-mode-with-sqlite-nextjs.md#2025-04-13_snippet_6\n\nLANGUAGE: diff\nCODE:\n```\n\"scripts\": {\n+ \"postinstall\": \"keystone postinstall\",\n  \"dev\": \"next dev\",\n  \"build\": \"next build\",\n  \"start\": \"next start\",\n  \"lint\": \"next lint\"\n},\n```\n\n----------------------------------------\n\nTITLE: Configuring KeystoneJS with Custom Auth and Session Validation\nDESCRIPTION: TypeScript code that composes the final KeystoneJS configuration by wrapping the auth configuration with the custom session validation, specifying the database provider and session settings.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/examples/custom-session-invalidation/README.md#2025-04-13_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport default myAuth(\n  withAuth(\n    config({\n      db: {\n        provider: 'sqlite',\n        url: process.env.DATABASE_URL || 'file:./keystone-example.db',\n      },\n      lists,\n      // We add our session configuration to the system here.\n      session,\n    })\n  )\n)\n```\n\n----------------------------------------\n\nTITLE: Using AND Operator in GraphQL Query\nDESCRIPTION: A GraphQL query showing how to use the AND operator to combine multiple conditions, returning items that match all specified conditions.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/guides/filters.md#2025-04-13_snippet_6\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  tasks(where: { AND: [\n    { label: { contains: \"H\" } },\n    { label: { contains: \"ll\" } }\n  ] }) {\n    id\n    label\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting KeystoneJS Development Server\nDESCRIPTION: Command to start the KeystoneJS development server which launches the Admin UI at localhost:3000\nSOURCE: https://github.com/keystonejs/keystone/blob/main/examples/usecase-blog/README.md#2025-04-13_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: JSON Structure for Hydrated Relationships in Document Field\nDESCRIPTION: Example of the JSON data structure for a hydrated relationship within a document field, showing the additional label and data fields that are populated with the query option.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/guides/document-fields.md#2025-04-13_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n...{\n  \"type\": \"relationship\",\n  \"data\": {\n    \"id\": \"ckqk4hkcg0030f5mu6le6xydu\",\n    \"label\": \"Alice\",\n    \"data\": {\n      \"id\": \"ckqk4hkcg0030f5mu6le6xydu\",\n      \"name\": \"Alice\"\n    }\n  },\n  \"relationship\": \"mention\",\n  \"children\": [{ \"text\": \"\" }\n}...\n```\n\n----------------------------------------\n\nTITLE: Using pushPrismaSchemaToDatabase from migrations API\nDESCRIPTION: The migrations entrypoint provides the pushPrismaSchemaToDatabase function for programmatically updating the database schema from the Prisma schema file.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/packages/core/CHANGELOG.md#2025-04-13_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\nimport { pushPrismaSchemaToDatabase } from '@keystone-next/keystone/migrations';\n```\n\n----------------------------------------\n\nTITLE: Post Updated Subscription Query in GraphQL\nDESCRIPTION: GraphQL subscription query that receives post data whenever a post is mutated and triggers an afterOperation hook. Returns post ID, title, content and author information.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/examples/extend-graphql-subscriptions/README.md#2025-04-13_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nsubscription PostUpdated {\n  postUpdated {\n    id\n    title\n    content\n    author {\n      name\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Posts with Nested Filters in GraphQL\nDESCRIPTION: Example of using the new nested filter syntax in GraphQL queries for Keystone.js. This query filters posts where the title contains 'Something'.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/packages/fields-document/CHANGELOG.md#2025-04-13_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  posts(where: { title: { contains: \"Something\" } }) {\n    title\n    content\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Keystone Prisma Migration Command\nDESCRIPTION: Command for deploying Prisma migrations in production.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/guides/cli.md#2025-04-13_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ keystone prisma migrate deploy\n```\n\n----------------------------------------\n\nTITLE: Deploying Next.js with Keystone using Vercel\nDESCRIPTION: A deployment button for quickly setting up the Next.js + Keystone example project on Vercel. This allows users to easily test and deploy the integration.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/examples/framework-nextjs-pages-directory/README.md#2025-04-13_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![Deploy with Vercel](https://vercel.com/button)](https://vercel.com/new/clone?repository-url=https%3A%2F%2Fgithub.com%2Fkeystonejs%2Fkeystone%2Ftree%2Fmain%2Fexamples%2Fframework-nextjs-pages-directory)\n```\n\n----------------------------------------\n\nTITLE: Refactoring Keystone.js Schema with Lists Object\nDESCRIPTION: Restructuring the Keystone.js configuration by extracting the lists into a separate object for better code organization and readability.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/walkthroughs/lesson-2.md#2025-04-13_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { config, list } from '@keystone-6/core';\nimport { allowAll } from '@keystone-6/core/access';\nimport { text } from '@keystone-6/core/fields';\n\nconst lists = {\n  User: list({\n    access: allowAll,\n    fields: {\n      name: text({ validation: { isRequired: true } }),\n      email: text({ validation: { isRequired: true }, isIndexed: 'unique' }),\n    },\n  }),\n};\n\nexport default config({\n  db: {\n    provider: 'sqlite',\n    url: 'file:./keystone.db',\n  },\n  lists,\n});\n```\n\n----------------------------------------\n\nTITLE: Using the createExpressServer Function with Updated Return Type\nDESCRIPTION: The createExpressServer function now returns both the Express server and Apollo server to allow for proper server shutdown.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/packages/core/CHANGELOG.md#2025-04-13_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n// Before\nconst app = await createExpressServer(config);\n\n// After - with access to both Express and Apollo servers\nconst { expressServer, apolloServer } = await createExpressServer(config);\n\n// Now you can properly shut down the Apollo server\nawait apolloServer.stop();\n```\n\n----------------------------------------\n\nTITLE: Starting KeystoneJS Development Server\nDESCRIPTION: Command to start the Keystone development server which launches the Admin UI at localhost:3000\nSOURCE: https://github.com/keystonejs/keystone/blob/main/examples/usecase-todo/README.md#2025-04-13_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: GraphQL Mutation: Creating Multiple Users\nDESCRIPTION: Example of a GraphQL mutation to create multiple users with the provided data.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/graphql/overview.md#2025-04-13_snippet_7\n\nLANGUAGE: graphql\nCODE:\n```\ntype Mutation {\n  createUsers(data: [UserCreateInput!]!): [User]\n}\n\ninput UserCreateInput {\n  name: String\n}\n\ntype User {\n  id: ID!\n  name: String\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Authentication Configuration in KeystoneJS\nDESCRIPTION: Shows the change from using 'withItemData' to configuring 'sessionData' in 'createAuth' function for authentication setup in KeystoneJS.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/packages/core/CHANGELOG.md#2025-04-13_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\nimport { config, createSchema, list } from '@keystone-next/keystone/schema';\nimport { statelessSessions, withAuthData } from '@keystone-next/keystone/session';\nimport { text, password, checkbox } from '@keystone-next/fields';\nimport { createAuth } from '@keystone-next/auth';\n\nconst { withAuth } = createAuth({\n  listKey: 'User',\n  identityField: 'email',\n  secretField: 'password',\n});\n\nconst session = statelessSessions({ secret: '-- EXAMPLE COOKIE SECRET; CHANGE ME --' });\n\nexport default withAuth(\n  config({\n    lists: createSchema({\n\n        fields: {\n          email: text({ isUnique: true }),\n          password: password(),\n          isAdmin: checkbox(),\n        },\n      }),\n      session: withItemData(session, { User: 'id isAdmin' }),\n    }),\n  })\n);\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { config, createSchema, list } from '@keystone-next/keystone/schema';\nimport { statelessSessions } from '@keystone-next/keystone/session';\nimport { text, password, checkbox } from '@keystone-next/fields';\nimport { createAuth } from '@keystone-next/auth';\n\nconst { withAuth } = createAuth({\n  listKey: 'User',\n  identityField: 'email',\n  secretField: 'password',\n  sessionData: 'id isAdmin',\n});\n\nconst session = statelessSessions({ secret: '-- EXAMPLE COOKIE SECRET; CHANGE ME --' });\n\nexport default withAuth(\n  config({\n    lists: createSchema({\n\n        fields: {\n          email: text({ isUnique: true }),\n          password: password(),\n          isAdmin: checkbox(),\n        },\n      }),\n      session,\n    }),\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Running Keystone.js Development Server with GraphQL Code Generator\nDESCRIPTION: This command starts the Keystone.js development server, which includes the Admin UI and GraphQL Playground. It assumes you have already cloned the Keystone repository and installed dependencies.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/examples/graphql-codegen/README.md#2025-04-13_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: ListNavItems Component Props\nDESCRIPTION: Type definition for the props of the ListNavItems component. It takes lists and an optional include array to filter which lists to render.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/examples/custom-admin-ui-navigation/README.md#2025-04-13_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ntype ListNavItemsProps = {\n  lists: ListMeta[]\n  include?: string[]\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Keystone and Next.js Servers\nDESCRIPTION: Command to start both Keystone backend and Next.js frontend servers simultaneously from the project directory.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/examples/framework-nextjs-two-servers/README.md#2025-04-13_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: JSON Structure for Inline Relationship in Document Field\nDESCRIPTION: Example of the JSON data structure for an inline relationship reference within a document field, showing how the related item's ID is stored.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/guides/document-fields.md#2025-04-13_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n...{\n  \"type\": \"relationship\",\n  \"data\": {\n    \"id\": \"ckqk4hkcg0030f5mu6le6xydu\"\n  },\n  \"relationship\": \"mention\",\n  \"children\": [{ \"text\": \"\" }]\n}...\n```\n\n----------------------------------------\n\nTITLE: GraphQL Mutation: Deleting Multiple Users\nDESCRIPTION: Example of a GraphQL mutation to delete multiple users identified by an array of unique inputs.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/graphql/overview.md#2025-04-13_snippet_11\n\nLANGUAGE: graphql\nCODE:\n```\ntype Mutation {\n  deleteUsers(ids: [UserWhereUniqueInput!]!): [User]\n}\n\ninput UserWhereUniqueInput {\n  id: ID\n}\n\ntype User {\n  id: ID!\n  name: String\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Keystone.js Development Server\nDESCRIPTION: Command to start the Keystone.js development server which launches the Admin UI at localhost:3000 and provides access to the GraphQL Playground.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/examples/graphql-ts-gql/README.md#2025-04-13_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Admin UI Page with PageContainer Component\nDESCRIPTION: React component example showing how to implement a custom Admin UI page using Keystone's PageContainer and Heading components to maintain consistent styling with the rest of the Admin UI.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/examples/custom-admin-ui-pages/README.md#2025-04-13_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { PageContainer } from '@keystone-6/core/admin-ui/component'\nimport { Heading } from '@keystar/ui/typography'\n\nexport default () => {\n  return (\n    <PageContainer header={<Heading type=\"h3\">Custom Page</Heading>}>{/* ... */}</PageContainer>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Keystone CLI Commands and Options Overview\nDESCRIPTION: Lists all available Keystone CLI commands and their options including dev, build, start, prisma and telemetry commands.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/guides/cli.md#2025-04-13_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n$ keystone [command]\n\nCommands\n  dev           start the project in development mode (default)\n  postinstall   build the project (for development, optional)\n  build         build the project (required by `keystone start`)\n  start         start the project\n  prisma        run Prisma CLI commands safely\n  telemetry     sets telemetry preference (enable/disable/status)\nOptions\n  --fix (postinstall) @deprecated\n    do build the graphql or prisma schemas, don't validate them\n\n  --frozen (build)\n    don't build the graphql or prisma schemas, only validate them\n\n  --no-db-push (dev)\n    don't push any updates of your Prisma schema to your database\n\n  --no-prisma (build, dev)\n    don't build or validate the prisma schema\n\n  --no-server (dev)\n    don't start the express server\n\n  --no-ui (build, dev, start)\n    don't build and serve the AdminUI\n\n  --with-migrations (start)\n    trigger prisma to run migrations as part of startup\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Keystone-Remix Example\nDESCRIPTION: Step-by-step commands to set up and run the Keystone-Remix example application. Includes instructions for installing dependencies, starting the Keystone server for post creation, and running the Remix application.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/examples/framework-remix/README.md#2025-04-13_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\ncd examples/framework-remix\npnpm keystone dev\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Renaming Function in JavaScript\nDESCRIPTION: This code snippet shows the renaming of a function from createKeystone to createSystem for consistency with type names.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/packages/core/CHANGELOG.md#2025-04-13_snippet_41\n\nLANGUAGE: JavaScript\nCODE:\n```\ncreateKeystone to createSystem\n```\n\n----------------------------------------\n\nTITLE: Starting KeystoneJS Development Server\nDESCRIPTION: Command to start the KeystoneJS development server which runs the Admin UI on localhost:3000\nSOURCE: https://github.com/keystonejs/keystone/blob/main/examples/extend-graphql-schema-graphql-tools/README.md#2025-04-13_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Keystone-Next.js Project\nDESCRIPTION: Command to install all required dependencies from the root of the repository using pnpm package manager.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/examples/framework-nextjs-two-servers/README.md#2025-04-13_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Querying Singleton Lists in Keystone.js GraphQL\nDESCRIPTION: Shows how to query a singleton list using GraphQL. Demonstrates both singular and plural query formats for accessing a singleton configuration, which is limited to a single row with an ID of 1.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/config/lists.md#2025-04-13_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  # singular (null or an item)\n  seoConfiguration {\n    title\n    description\n  }\n\n  # plural (0 or 1 items)\n  seoConfigurations {\n    title\n    description\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using NOT Operator in GraphQL Query\nDESCRIPTION: A GraphQL query showing how to use the NOT operator to exclude items that match a specific condition.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/guides/filters.md#2025-04-13_snippet_8\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  tasks(where: { NOT: {\n    label: { contains: \"H\" }\n  } }) {\n    id\n    label\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Keystone.js Development Server\nDESCRIPTION: Command to start the Keystone.js development server, which launches the Admin UI at localhost:3000 and provides access to a GraphQL Playground.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/examples/byte-encoding/README.md#2025-04-13_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Using AdminConfig Type for Custom Components\nDESCRIPTION: Utilizing the AdminConfig type exported by Keystone for better developer experience when defining custom components.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/examples/custom-admin-ui-navigation/README.md#2025-04-13_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AdminConfig } from '@keystone-6/core/types'\nexport const components: AdminConfig['components'] = {\n  Logo,\n  Navigation,\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Migrations Without Starting Server\nDESCRIPTION: This command applies migrations in production without starting the Keystone server.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/guides/database-migration.md#2025-04-13_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nkeystone start --with-migrations --no-server\n```\n\n----------------------------------------\n\nTITLE: Unfiltered Access Control\nDESCRIPTION: Function for creating an empty filter in access control rules\nSOURCE: https://github.com/keystonejs/keystone/blob/main/packages/core/CHANGELOG.md#2025-04-13_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { unfiltered } from '@keystone-6/core/access'\n```\n\n----------------------------------------\n\nTITLE: Original PostgreSQL Migration - Generated by Prisma\nDESCRIPTION: The initial auto-generated Prisma migration script for making the document field non-nullable, which needs modification to handle existing null values.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/packages/fields-document/CHANGELOG.md#2025-04-13_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\n-- AlterTable\nALTER TABLE \"Post\" ALTER COLUMN \"content\" SET NOT NULL,\nALTER COLUMN \"content\" SET DEFAULT E'[{\"type\":\"paragraph\",\"children\":[{\"text\":\"\"}]}]';\n```\n\n----------------------------------------\n\nTITLE: Running Keystone in Development Mode\nDESCRIPTION: Starts the Keystone server in development mode using npx. This command initializes the database, starts the Admin UI, and the GraphQL API server.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/walkthroughs/lesson-1.md#2025-04-13_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpx keystone dev\n```\n\n----------------------------------------\n\nTITLE: Rendering Post.content with Custom Heading Styles\nDESCRIPTION: React component using the DocumentRenderer with custom renderers to style heading elements in the Post.content field, applying uppercase text transformation while using default styling for other elements.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/examples/document-field/README.md#2025-04-13_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { DocumentRenderer, DocumentRendererProps } from '@keystone-6/document-renderer'\n\nconst renderers: DocumentRendererProps['renderers'] = {\n  block: {\n    heading({ level, children, textAlign }) {\n      const Comp = `h${level}` as const\n      return <Comp style={{ textAlign, textTransform: 'uppercase' }}>{children}</Comp>\n    },\n  },\n}\n\n;<DocumentRenderer document={post.content.document} renderers={renderers} />\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Cell Component in React\nDESCRIPTION: This snippet defines a custom Cell component for displaying the 'myInt' field value in the list view of the Keystone Admin UI.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/guides/custom-fields.md#2025-04-13_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { CellLink, CellContainer } from '@keystone-6/core/admin-ui/components'\nimport { CellComponent } from '@keystone-6/core/types'\n\nexport const Cell: CellComponent<typeof controller> = ({ value }) => {\n  return <CellContainer>{value}</CellContainer>\n}\n```\n\n----------------------------------------\n\nTITLE: Starting the Keystone Server for Document Field Customisation Example\nDESCRIPTION: This command starts the development server for the Keystone example project, which will launch the GraphQL Server and Admin UI on localhost:3000.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/examples/document-field-customisation/keystone-server/README.md#2025-04-13_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Type Definition for Custom Components in KeystoneJS\nDESCRIPTION: Type signature for the components object exported in the admin/config.ts file. It defines optional Logo and Navigation components.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/examples/custom-admin-ui-navigation/README.md#2025-04-13_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n{\n    Logo?: (props: {}) => ReactElement\n    Navigation?: (props: NavigationProps) => ReactElement\n}\n```\n\n----------------------------------------\n\nTITLE: Rolling Back a Migration with Prisma\nDESCRIPTION: This command rolls back a specific migration using Prisma's migration tools.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/guides/database-migration.md#2025-04-13_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nprisma migrate resolve --rolled-back \"<migration_name>\"\n```\n\n----------------------------------------\n\nTITLE: Keystone Build Command\nDESCRIPTION: Command for generating production files with Keystone.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/guides/cli.md#2025-04-13_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ keystone build\n```\n\n----------------------------------------\n\nTITLE: Version Header and Type Fix in Markdown\nDESCRIPTION: Version number and patch change documentation for KeystoneContext type fix\nSOURCE: https://github.com/keystonejs/keystone/blob/main/packages/core/CHANGELOG.md#2025-04-13_snippet_15\n\nLANGUAGE: markdown\nCODE:\n```\n## 26.0.1\n\n### Patch Changes\n\n- [#6711](https://github.com/keystonejs/keystone/pull/6711) [`1a0614351`](https://github.com/keystonejs/keystone/commit/1a0614351808d4cb024840308fcc8288860e1de5) Thanks [@mitchellhamilton](https://github.com/mitchellhamilton)! - Fix `KeystoneContext` type exported from `.keystone/types`\n```\n\n----------------------------------------\n\nTITLE: Starting the Frontend Development Server\nDESCRIPTION: Command to start the frontend development server at localhost:3001, which renders the document field data from the Keystone backend.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/examples/document-field/README.md#2025-04-13_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm dev:site\n```\n\n----------------------------------------\n\nTITLE: Installing and Running KeystoneJS Project with Extended Prisma Schema\nDESCRIPTION: Commands to install dependencies and start the KeystoneJS development server. This will launch the Admin UI at localhost:3000 and provide access to a GraphQL Playground.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/examples/extend-prisma-schema/README.md#2025-04-13_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Implementing Singleton Pattern for BaseProject in Keystone.js\nDESCRIPTION: This code defines a BaseProject class with a static getInstance method to ensure only one instance is created. It includes methods for initialization and retrieval of configuration and keystone instance.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/examples/singleton/README.md#2025-04-13_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nclass BaseProject {\n  static getInstance() {\n    if (!BaseProject.instance) {\n      BaseProject.instance = new BaseProject();\n    }\n    return BaseProject.instance;\n  }\n\n  constructor() {\n    this.keystone = null;\n    this.config = null;\n  }\n\n  async init(config) {\n    this.config = config;\n    this.keystone = new Keystone(config);\n    await this.keystone.connect();\n  }\n\n  getKeystone() {\n    return this.keystone;\n  }\n\n  getConfig() {\n    return this.config;\n  }\n}\n\nmodule.exports = BaseProject;\n```\n\n----------------------------------------\n\nTITLE: Using Context Functions for UI Configuration in Keystone 6\nDESCRIPTION: Configuration functions that now accept a context argument, enabling dynamic UI behaviors based on the current request context.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/packages/core/CHANGELOG.md#2025-04-13_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n// List level UI configuration with context\nlist: {\n  ui: {\n    isHidden: ({ context }) => context.session?.data.role !== 'admin',\n    hideCreate: ({ context }) => !context.session?.data.canCreateItems,\n    hideDelete: ({ context }) => !context.session?.data.canDeleteItems,\n    createView: {\n      defaultFieldMode: ({ context }) => context.session ? 'edit' : 'hidden'\n    },\n    itemView: {\n      defaultFieldMode: ({ context }) => context.session ? 'edit' : 'read'\n    },\n    listView: {\n      defaultFieldMode: ({ context }) => context.session ? 'read' : 'hidden'\n    }\n  }\n}\n\n// Field level UI configuration with context\nfield: {\n  ui: {\n    createView: {\n      fieldMode: ({ context }) => context.session?.data.canEdit ? 'edit' : 'hidden'\n    },\n    itemView: {\n      fieldMode: ({ context }) => context.session?.data.canEdit ? 'edit' : 'read'\n    },\n    listView: {\n      fieldMode: ({ context }) => context.session ? 'read' : 'hidden'\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting KeystoneJS and Next.js Development Servers\nDESCRIPTION: Command to start both the KeystoneJS server (which will run on port 3000) and the Next.js frontend server (which will run on port 8000). This should be executed from the examples/document-field-customisation directory.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/examples/document-field-customisation/README.md#2025-04-13_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: ListNavItem Component Props\nDESCRIPTION: Type definition for the props of the ListNavItem component. It takes a single list object and renders a NavItem optimized for Keystone lists.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/examples/custom-admin-ui-navigation/README.md#2025-04-13_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ntype ListNavItemProps = {\n  list: ListMeta\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Automatic Schema Updates in Development\nDESCRIPTION: This command starts Keystone in development mode without automatic database schema updates.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/guides/database-migration.md#2025-04-13_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nkeystone dev --no-db-push\n```\n\n----------------------------------------\n\nTITLE: Adding Keystone Directory to .gitignore\nDESCRIPTION: Configuration to ignore the auto-generated .keystone directory in Git version control.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/blog/embedded-mode-with-sqlite-nextjs.md#2025-04-13_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# In your .gitignore\n.keystone\n```\n\n----------------------------------------\n\nTITLE: Package Version and Changes List in Markdown\nDESCRIPTION: Markdown formatted changelog entry listing various patch changes including pull request references, commit hashes, and descriptions of changes made to the KeystoneJS framework.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/packages/core/CHANGELOG.md#2025-04-13_snippet_14\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\n\n- [#6732](https://github.com/keystonejs/keystone/pull/6732) [`73544fd19`](https://github.com/keystonejs/keystone/commit/73544fd19b865be9fbf3ea9ae68fae5f039eb13f) Thanks [@timleslie](https://github.com/timleslie)! - Improved the error messages for user input errors on relationships in update/create operations.\n\n* [#6744](https://github.com/keystonejs/keystone/pull/6744) [`0ef1ee3cc`](https://github.com/keystonejs/keystone/commit/0ef1ee3ccd99f0f3e1f955f03d00b1a0f238c7cd) Thanks [@bladey](https://github.com/bladey)! - Renamed branch `master` to `main`.\n\n- [#6737](https://github.com/keystonejs/keystone/pull/6737) [`930b7129f`](https://github.com/keystonejs/keystone/commit/930b7129f37beb396bb8ecc8a8dc9f1b3615a7e0) Thanks [@mitchellhamilton](https://github.com/mitchellhamilton)! - Improved dev startup performance\n```\n\n----------------------------------------\n\nTITLE: Running KeystoneJS Project with Development Server\nDESCRIPTION: Command to start the KeystoneJS development server which will launch the Admin UI at localhost:3000.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/examples/custom-admin-ui-pages/README.md#2025-04-13_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Running Keystone-6 Roles-based Access Example Project\nDESCRIPTION: Instructions for setting up and running the Keystone-6 roles-based access control example project. It involves cloning the repository, installing dependencies using pnpm, and starting the development server.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/examples/usecase-roles/README.md#2025-04-13_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- Clone this repo\n- Run `pnpm install` in the root (this repo is a monorepo and uses pnpm workspaces, so that will install everything you'll need)\n- Open this folder in your terminal and run `pnpm dev`\n```\n\n----------------------------------------\n\nTITLE: GraphQL Case Sensitivity Query Example\nDESCRIPTION: Example showing how to use mode parameter in StringFilter for case insensitive queries in Postgres. This functionality is not available in MySQL or SQLite.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/guides/choosing-a-database.md#2025-04-13_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nmode: insensitive\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Keystone Development Server\nDESCRIPTION: Command to start the Keystone development server after installing dependencies. This launches the Admin UI on port 3000 and enables the GraphQL playground.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/examples/logging/README.md#2025-04-13_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Tag List Schema Definition\nDESCRIPTION: Defines a Tag list with a relationship to Posts.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/guides/auth-and-access-control.md#2025-04-13_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst Tag = list({\n  fields: {\n    label: text(),\n    posts: relationship({ ref: 'Post', many: true }),\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Keystone Start Command\nDESCRIPTION: Command for starting Keystone in production mode.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/guides/cli.md#2025-04-13_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ keystone start\n```\n\n----------------------------------------\n\nTITLE: Example Device Telemetry JSON Format\nDESCRIPTION: Shows the structure of the device telemetry data that Keystone collects during development, including the last sent date, operating system, and Node.js major version number.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/reference/telemetry.md#2025-04-13_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"lastSentDate\": \"2024-11-23\",\n  \"os\": \"darwin\",\n  \"node\": \"20\"\n}\n```\n\n----------------------------------------\n\nTITLE: Keystone Dev Command\nDESCRIPTION: Command for starting Keystone in development mode with database reset instructions.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/guides/cli.md#2025-04-13_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ keystone dev\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for KeystoneJS Document Field Customization Project\nDESCRIPTION: Command to install all project dependencies from the root of the repository using pnpm package manager. This must be run before starting the development servers.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/examples/document-field-customisation/README.md#2025-04-13_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm\n```\n\n----------------------------------------\n\nTITLE: Starting Keystone Development Server\nDESCRIPTION: Command to start the Keystone.js development server which launches the Admin UI at localhost:3000\nSOURCE: https://github.com/keystonejs/keystone/blob/main/examples/usecase-versioning/README.md#2025-04-13_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Basic Custom Logo Implementation in KeystoneJS Admin UI\nDESCRIPTION: Shows the basic implementation of a custom logo component in the Admin UI using a simple React component exported through admin/config.tsx.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/guides/custom-admin-ui-logo.md#2025-04-13_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n// admin/config.tsx\nfunction CustomLogo () {\n    return <h3>Custom Logo here</h3>\n}\n\nexport const components = {\n    Logo: CustomLogo\n}\n```\n\n----------------------------------------\n\nTITLE: Development Workflow with Migrations\nDESCRIPTION: This snippet shows the recommended workflow for applying migrations before starting development.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/guides/database-migration.md#2025-04-13_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nkeystone migrate apply\nkeystone dev\n```\n\n----------------------------------------\n\nTITLE: Starting KeystoneJS Development Server\nDESCRIPTION: Command to start the KeystoneJS development server with Redis session store implementation. This will launch the Admin UI at localhost:3000 and provide access to the GraphQL Playground.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/examples/custom-session-redis/README.md#2025-04-13_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Installing Keystone.js with npm\nDESCRIPTION: Command to create a new Keystone.js project using npm's create command.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/getting-started.md#2025-04-13_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm create keystone-app@latest\n```\n\n----------------------------------------\n\nTITLE: Querying Virtual Fields in GraphQL with AdminUI\nDESCRIPTION: Example GraphQL query showing how the Admin UI fetches data from a virtual field. This format is used when the ui.query option is interpolated into a query.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/fields/virtual.md#2025-04-13_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  item(where: { id: \"...\" }) {\n    field${ui.query}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Next.js Pages Directory Structure\nDESCRIPTION: Expected directory structure for the pages folder after removing the API directory from the Next.js application.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/blog/embedded-mode-with-sqlite-nextjs.md#2025-04-13_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n.\n└── pages\n   ├── _app.tsx\n   └── index.tsx\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server for Next.js KeystoneJS Example\nDESCRIPTION: This command starts the development server for the Next.js frontend example, which will serve the customized document renderer for KeystoneJS.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/examples/document-field-customisation/nextjs-frontend/README.md#2025-04-13_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Starting Keystone.js Development Server\nDESCRIPTION: Command to start the Keystone.js development server which launches the Admin UI at localhost:3000 and GraphQL Playground at localhost:3000/api/graphql\nSOURCE: https://github.com/keystonejs/keystone/blob/main/examples/usecase-relationship-union/README.md#2025-04-13_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Starting the Keystone.js Development Server\nDESCRIPTION: Commands to navigate into the newly created project directory and start the development server.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/getting-started.md#2025-04-13_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncd my-app\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Running Keystone + Astro Development Setup\nDESCRIPTION: Command sequence for setting up and running a Keystone-Astro integrated development environment. Includes steps for installation, starting Keystone server, and running Astro development server.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/examples/framework-astro/README.md#2025-04-13_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\ncd examples/framework-astro\npnpm keystone dev\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Starting Keystone Development Server\nDESCRIPTION: Command to start the Keystone development server which runs the GraphQL Server and Admin UI on localhost:3000.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/examples/framework-nextjs-two-servers/keystone-server/README.md#2025-04-13_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Installing Keystone 6 Core Dependency\nDESCRIPTION: Command to add the Keystone 6 core package as a dependency to the Next.js project.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/blog/embedded-mode-with-sqlite-nextjs.md#2025-04-13_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @keystone-6/core\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Migration for Document Field Non-null Update\nDESCRIPTION: SQL migration script to make document field non-nullable while setting default values for existing null entries in PostgreSQL database. This modification needs to be applied to the auto-generated Prisma migration.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/packages/fields-document/CHANGELOG.md#2025-04-13_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE \"Post\" ALTER COLUMN \"content\" SET DEFAULT E'[{\"type\":\"paragraph\",\"children\":[{\"text\":\"\"}]}]';\nUPDATE \"Post\" SET \"content\" = DEFAULT WHERE \"content\" IS NULL;\nALTER TABLE \"Post\" ALTER COLUMN \"content\" SET NOT NULL;\n```\n\n----------------------------------------\n\nTITLE: JavaScript Code Block Collapsing\nDESCRIPTION: Demonstrates the syntax for collapsing specific line ranges in JavaScript code blocks.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/README.md#2025-04-13_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n```js[4-7]\n```\n\n----------------------------------------\n\nTITLE: Running Prisma Utils Command in KeystoneJS\nDESCRIPTION: Command to generate GraphQL filters using the prisma-utils package in KeystoneJS. This should be run from the project root whenever CI fails due to filter-related issues, typically after Prisma updates or script changes.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/prisma-utils/README.md#2025-04-13_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\npnpm generate-filters\n```\n\n----------------------------------------\n\nTITLE: Random Identifier Configuration\nDESCRIPTION: Configuration for setting up random ID fields with customizable byte length and encoding\nSOURCE: https://github.com/keystonejs/keystone/blob/main/packages/core/CHANGELOG.md#2025-04-13_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{ db: { idField: { kind: 'random', bytes: 32, encoding: 'base64url' } } }\n```\n\n----------------------------------------\n\nTITLE: Using NavigationContainer Component\nDESCRIPTION: Example of using the NavigationContainer component provided by Keystone to create a custom Navigation. It's responsible for rendering semantic markup and styles for the containing element.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/examples/custom-admin-ui-navigation/README.md#2025-04-13_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ntype NavigationContainerProps = {\n  children: ReactNode\n}\n\nconst CustomNavigation = () => {\n  return (\n    <NavigationContainer>\n      {/* the rest goes here */}\n    </NavigationContainer>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting Custom Components in admin/config.ts\nDESCRIPTION: Keystone looks for this configuration file to customize components. It exports Logo and Navigation components for use in the Admin UI.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/examples/custom-admin-ui-navigation/README.md#2025-04-13_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const components = {\n  Logo,\n  Navigation,\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with PNPM\nDESCRIPTION: Command to install project dependencies using the PNPM package manager.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/examples/framework-nextjs-two-servers/keystone-server/README.md#2025-04-13_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm\n```\n\n----------------------------------------\n\nTITLE: Creating a Next.js App with TypeScript\nDESCRIPTION: Command to create a new Next.js application with TypeScript support and navigate into the project directory.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/blog/embedded-mode-with-sqlite-nextjs.md#2025-04-13_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm create next-app --typescript my-project\ncd my-project\n```\n\n----------------------------------------\n\nTITLE: Keystone Package.json Script Configuration\nDESCRIPTION: Recommended script configurations for package.json to handle common Keystone CLI operations.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/guides/cli.md#2025-04-13_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"build\": \"keystone build\",\n    \"dev\": \"keystone dev\",\n    \"postinstall\": \"keystone postinstall\",\n    \"generate\": \"keystone prisma migrate dev\",\n    \"start\": \"keystone start --with-migrations\",\n    \"deploy\": \"keystone build && keystone prisma migrate deploy\",\n    \"dev\": \"keystone dev\",\n    \"postinstall\": \"keystone postinstall\",\n    \"start\": \"keystone start\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Test Execution Output\nDESCRIPTION: Example output from running the test suite showing successful test execution with timing information.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/examples/testing/README.md#2025-04-13_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n✔ Create a User using the Query API (139.404167ms)\n✔ Check that trying to create user with no name (required field) fails (96.580875ms)\n✔ Check access control by running updateTask as a specific user via context.withSession() (193.86275ms)\nℹ tests 3\nℹ suites 0\nℹ pass 3\nℹ fail 0\nℹ cancelled 0\nℹ skipped 0\nℹ todo 0\nℹ duration_ms 0.072292\n```\n\n----------------------------------------\n\nTITLE: Custom Page Container Type Definition in TypeScript\nDESCRIPTION: TypeScript interface for the PageContainer component from KeystoneJS admin UI, defining the component props structure including header, children, and optional title.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/examples/custom-admin-ui-pages/README.md#2025-04-13_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype PageContainerProps = {\n  header: ReactElement\n  children: ReactNode\n  title?: string\n}\n```\n\n----------------------------------------\n\nTITLE: String Identifier Configuration\nDESCRIPTION: Configuration for setting up string-based ID fields in KeystoneJS schema\nSOURCE: https://github.com/keystonejs/keystone/blob/main/packages/core/CHANGELOG.md#2025-04-13_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{ db: { idField: { kind: 'string' } } }\n```\n\n----------------------------------------\n\nTITLE: Applying Migrations in Development\nDESCRIPTION: This command applies pending migrations in the local development environment.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/guides/database-migration.md#2025-04-13_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nkeystone migrate apply\n```\n\n----------------------------------------\n\nTITLE: Extended Express App Configuration in KeystoneJS\nDESCRIPTION: Added createContext parameter to the server configuration for extending Express app functionality, providing access to the full context API.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/packages/core/CHANGELOG.md#2025-04-13_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nconfig.server.extendExpressApp\n```\n\n----------------------------------------\n\nTITLE: KeystoneJS Changelog Entry\nDESCRIPTION: Changelog entry documenting various updates and changes to the KeystoneJS framework including minor changes, patches and breaking changes.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/packages/core/CHANGELOG.md#2025-04-13_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n### Minor Changes\n\n- [#8321](https://github.com/keystonejs/keystone/pull/8321) [`8e7729880`](https://github.com/keystonejs/keystone/commit/8e7729880606363203d91b1c74a61e58295dadca) Thanks [@MurzNN](https://github.com/MurzNN)! - Extend `db.enableLogging` to support other Prisma log levels\n\n### Patch Changes\n\n- [#8177](https://github.com/keystonejs/keystone/pull/8177) [`3ef0d9d7d`](https://github.com/keystonejs/keystone/commit/3ef0d9d7d857c622cec95b702ea717fa920f8fc0) Thanks [@borisno2](https://github.com/borisno2)! - Fixes creating new relationships in card view on create item page\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Next.js KeystoneJS Example\nDESCRIPTION: This command installs the necessary dependencies for the Next.js frontend example using pnpm package manager.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/examples/document-field-customisation/nextjs-frontend/README.md#2025-04-13_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm\n```\n\n----------------------------------------\n\nTITLE: Starting KeystoneJS Development Server\nDESCRIPTION: Command to start the KeystoneJS development server which launches the Admin UI at localhost:3000 and provides access to the GraphQL Playground.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/examples/extend-graphql-schema-graphql-ts/README.md#2025-04-13_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: NavItem Component Props\nDESCRIPTION: Type definition for the props of the NavItem component. It's a thin wrapper around Next.js Link component with additional styling and accessibility features.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/examples/custom-admin-ui-navigation/README.md#2025-04-13_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ntype NavItemProps = {\n  children: ReactNode\n  href: string\n  isSelected?: boolean\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server in Keystone.js\nDESCRIPTION: Command to start the Keystone.js development server which launches the Admin UI at localhost:3000.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/examples/testing/README.md#2025-04-13_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Updating GraphQL Mutation Schema for Item Updates\nDESCRIPTION: Changes the GraphQL schema for item update mutations to use 'where' inputs instead of just 'id', and makes 'where' and 'data' arguments non-null.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/packages/auth/CHANGELOG.md#2025-04-13_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ntype Mutation {\n  updateItem(where: ItemWhereUniqueInput!, data: ItemUpdateInput!): Item\n  updateItems(data: [ItemUpdateArgs!]!): [Item]\n}\n\ninput ItemUpdateArgs {\n  where: ItemWhereUniqueInput!\n  data: ItemUpdateInput!\n}\n```\n\n----------------------------------------\n\nTITLE: NavigationProps Interface Definition\nDESCRIPTION: Type definition for the props passed to the custom Navigation component by Keystone. It includes a lists property of type ListMeta[].\nSOURCE: https://github.com/keystonejs/keystone/blob/main/examples/custom-admin-ui-navigation/README.md#2025-04-13_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n   NavigationProps = {\n    lists: ListMeta[]\n   }\n```\n\n----------------------------------------\n\nTITLE: Running KeystoneJS project with REST API endpoints\nDESCRIPTION: This command starts the development server for the KeystoneJS project, which includes REST API endpoints. It launches the Admin UI at localhost:3000 where users can create items in the database.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/examples/extend-express-app/README.md#2025-04-13_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Migration for Relationship Renaming\nDESCRIPTION: SQL migration script for PostgreSQL to rename relationship tables and constraints without data loss.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/packages/core/CHANGELOG.md#2025-04-13_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE \"_Post_tags_Tag_posts\" RENAME TO \"_Post_tags\";\nALTER INDEX \"_Post_tags_Tag_posts_AB_unique\" RENAME TO \"_Post_tags_AB_unique\";\nALTER INDEX \"_Post_tags_Tag_posts_B_index\" RENAME TO \"_Post_tags_B_index\";\nALTER TABLE \"_Post_tags\" RENAME CONSTRAINT \"_Post_tags_Tag_posts_A_fkey\" TO \"_Post_tags_A_fkey\";\nALTER TABLE \"_Post_tags\" RENAME CONSTRAINT \"_Post_tags_Tag_posts_B_fkey\" TO \"_Post_tags_B_fkey\";\n```\n\n----------------------------------------\n\nTITLE: Adding Sample Data to Keystone.js Project\nDESCRIPTION: Commands to initialize the project, seed the database with sample data, and restart the development server with the new data in place.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/examples/custom-id/README.md#2025-04-13_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm dev\npnpm seed-data\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Running KeystoneJS Project with Custom Admin UI Navigation\nDESCRIPTION: Command to start the KeystoneJS project with custom Admin UI Navigation. This will launch the Admin UI at localhost:3000.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/examples/custom-admin-ui-navigation/README.md#2025-04-13_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: YouTube Video Embed in Markdown\nDESCRIPTION: Markdown syntax for embedding a YouTube video about Keystone 6 presentation at Prisma Day 2021, using a custom embed component with no-cookie domain and disabled related videos.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/blog/prisma-day-2021.md#2025-04-13_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{% youtube url=\"https://www.youtube-nocookie.com/embed/fPWRlmedCbo?rel=0\" label=\"Next-gen CMS and GraphQL API with KeystoneJS and Prisma - Jed Watson | Prisma Day 2021\" /%}\n```\n\n----------------------------------------\n\nTITLE: Running KeystoneJS Development Server\nDESCRIPTION: This command starts the KeystoneJS development server, which launches the Admin UI at localhost:3000 and allows you to add items to an empty database.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/examples/reuse/README.md#2025-04-13_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Dependency Version Updates for KeystoneJS\nDESCRIPTION: Lists updated dependency versions with their corresponding commit hashes and pull request references. This covers updates to admin UI, keystone core, types, fields and utilities packages.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/packages/auth/CHANGELOG.md#2025-04-13_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n\"dependencies\": [\n  [\"dc58df5c8\", \"@keystone-next/admin-ui@4.0.0\"],\n  [\"c89b43d07\", \"@keystone-next/keystone@6.0.0\"],\n  [\"a5d7b264a\", \"@keystone-next/types@6.0.0\"],\n  [\"b7a4b997b\", \"@keystone-next/fields@3.2.2\"],\n  [\"ca34424d5\", \"@keystone-next/admin-ui-utils@2.0.2\"]\n]\n```\n\n----------------------------------------\n\nTITLE: Creating Keystone Project Directory and Initializing NPM\nDESCRIPTION: Sets up a new directory for the Keystone project and initializes it with npm. This creates the basic project structure and package.json file.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/walkthroughs/lesson-1.md#2025-04-13_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir keystone-learning\ncd keystone-learning\nnpm init\n```\n\n----------------------------------------\n\nTITLE: Admin UI Field Mode Configuration\nDESCRIPTION: GraphQL field configuration for Admin UI that allows omitting id argument and handles static field modes for item views.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/packages/core/CHANGELOG.md#2025-04-13_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nitemView.fieldMode: 'hidden'\n```\n\n----------------------------------------\n\nTITLE: Documenting Patch Changes in Markdown\nDESCRIPTION: Documentation of recent patch changes including UI fixes, MySQL support addition, and Prisma schema generation fixes.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/packages/core/CHANGELOG.md#2025-04-13_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\n\n- [#7616](https://github.com/keystonejs/keystone/pull/7616) [`65382ed80`](https://github.com/keystonejs/keystone/commit/65382ed80a77761fd7b0b7b21990151ab7b3eb30) Thanks [@mitchellhamilton](https://github.com/mitchellhamilton)! - Fixes the inconsistent spacing in the Admin UI on relationships fields using the cards display mode\n\n* [#7639](https://github.com/keystonejs/keystone/pull/7639) [`a48fe5e81`](https://github.com/keystonejs/keystone/commit/a48fe5e818421524a6e1f5c52f21431444e003c7) Thanks [@u-ishii](https://github.com/u-ishii)! - Changes segmented control to not show a clear button if `isRequired` is set\n```\n\n----------------------------------------\n\nTITLE: Installing GraphQL-Tools for Schema Merging\nDESCRIPTION: Command to install @graphql-tools/schema package, which provides tools for merging GraphQL schemas and adding custom resolvers.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/guides/schema-extension.md#2025-04-13_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @graphql-tools/schema\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Keystone Document Field Customisation Example\nDESCRIPTION: This command installs the necessary dependencies for the Keystone example project using pnpm package manager.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/examples/document-field-customisation/keystone-server/README.md#2025-04-13_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm\n```\n\n----------------------------------------\n\nTITLE: SQLite Migration for Relationship Renaming\nDESCRIPTION: SQL migration script for SQLite to rename relationship tables and recreate indexes without data loss.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/packages/core/CHANGELOG.md#2025-04-13_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE \"_Post_tags_Tag_posts\" RENAME TO \"_Post_tags\";\nDROP INDEX \"_Post_tags_Tag_posts_AB_unique\";\nDROP INDEX \"_Post_tags_Tag_posts_B_index\";\nCREATE UNIQUE INDEX \"_Post_tags_AB_unique\" ON \"_Post_tags\"(\"A\", \"B\");\nCREATE INDEX \"_Post_tags_B_index\" ON \"_Post_tags\"(\"B\");\n```\n\n----------------------------------------\n\nTITLE: Creating a Migration in Keystone\nDESCRIPTION: This command creates a new migration file based on the current Keystone schema.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/guides/database-migration.md#2025-04-13_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nkeystone migrate create\n```\n\n----------------------------------------\n\nTITLE: Major Changes in KeystoneJS Core\nDESCRIPTION: Describes core re-implementation changes that affect field implementation and API modifications\nSOURCE: https://github.com/keystonejs/keystone/blob/main/packages/cloudinary/CHANGELOG.md#2025-04-13_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n### Major Changes\n\n- [#5665](https://github.com/keystonejs/keystone/pull/5665) [`a3b07ea16`](https://github.com/keystonejs/keystone/commit/a3b07ea16ffc0f6741c0c0e5e281622a1831e0e7) Thanks [@mitchellhamilton](https://github.com/mitchellhamilton)! - The core of Keystone has been re-implemented to make implementing fields and new features in Keystone easier.\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Health Check Endpoint in KeystoneJS\nDESCRIPTION: Demonstrates how to enable and customize the health check endpoint in KeystoneJS server configuration. Shows options for specifying a custom path and returning dynamic data.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/packages/core/CHANGELOG.md#2025-04-13_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nconfig({\n  server: {\n    healthCheck: {\n      path: '/my-health-check',\n      data: () => ({\n        status: 'healthy',\n        timestamp: Date.now(),\n        uptime: process.uptime(),\n      }),\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Keystone.js with npx\nDESCRIPTION: Command to create a new Keystone.js project using npx to run the create-keystone-app tool.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/getting-started.md#2025-04-13_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpx create-keystone-app@latest\n```\n\n----------------------------------------\n\nTITLE: Updating Next.js Dependency in JavaScript\nDESCRIPTION: Updates the Next.js dependency to version ^10.2.0 using npm's caret range syntax.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/packages/core/CHANGELOG.md#2025-04-13_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\n\"^10.2.0\"\n```\n\n----------------------------------------\n\nTITLE: Keystone Postinstall Command\nDESCRIPTION: Command for generating necessary files and fixing validation errors.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/guides/cli.md#2025-04-13_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ keystone postinstall\n```\n\n----------------------------------------\n\nTITLE: Installing TypeScript\nDESCRIPTION: Adds TypeScript as a project dependency. This is necessary for using TypeScript in the Keystone configuration file.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/walkthroughs/lesson-1.md#2025-04-13_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install typescript\n```\n\n----------------------------------------\n\nTITLE: Configuring GraphQL Playground in Keystone 6\nDESCRIPTION: Configuration options for setting the GraphQL playground in Keystone applications. Keystone now defaults to GraphQL Playground instead of Apollo Sandbox, with options to customize behavior in development and production environments.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/packages/core/CHANGELOG.md#2025-04-13_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// Default behavior - GraphQL Playground in development, nothing in production\ngraphql: {\n  playground: process.env.NODE_ENV !== 'production'\n}\n\n// Explicitly use Apollo Sandbox\ngraphql: {\n  playground: 'apollo'\n}\n\n// Always enable/disable playground regardless of environment\ngraphql: {\n  playground: true // or false\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with pnpm\nDESCRIPTION: Command to install project dependencies using pnpm package manager\nSOURCE: https://github.com/keystonejs/keystone/blob/main/examples/framework-nextjs-two-servers/nextjs-frontend/README.md#2025-04-13_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm\n```\n\n----------------------------------------\n\nTITLE: Field Indexing Configuration Update\nDESCRIPTION: Changed isUnique field configuration to use isIndexed='unique' syntax.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/packages/cloudinary/CHANGELOG.md#2025-04-13_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nisIndexed: 'unique' // Previously: isUnique: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Prisma Preview Features in KeystoneJS\nDESCRIPTION: Added support for Prisma preview features through configuration option. This allows enabling experimental Prisma features via the db configuration.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/packages/core/CHANGELOG.md#2025-04-13_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nconfig.db.prismaPreviewFeatures\n```\n\n----------------------------------------\n\nTITLE: Error Handling Update in Version 7.0.2\nDESCRIPTION: Documents removal of runtime errors in favor of using native cloudinary package errors\nSOURCE: https://github.com/keystonejs/keystone/blob/main/packages/cloudinary/CHANGELOG.md#2025-04-13_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\n\n- [#8836] [`a216bc2d2`] Thanks [@dcousens]! - Remove runtime errors from the Cloudinary field, fall back to the `cloudinary` package for Cloudinary errors\n```\n\n----------------------------------------\n\nTITLE: Creating Auth Configuration File\nDESCRIPTION: Command to create a new file for authentication configuration in the project root.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/walkthroughs/lesson-4.md#2025-04-13_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ntouch auth.ts\n```\n\n----------------------------------------\n\nTITLE: Disabling Telemetry with Command Line\nDESCRIPTION: Command to opt-out of Keystone telemetry for your user profile. This needs to be run again if you change your user profile on your device.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/reference/telemetry.md#2025-04-13_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ keystone telemetry disable\n```\n\n----------------------------------------\n\nTITLE: Test Script Configuration in package.json\nDESCRIPTION: NPM script configuration that uses tsx loader to run the example test file.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/examples/testing/README.md#2025-04-13_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n    \"test\": \"node --loader tsx example-test.ts\"\n```\n\n----------------------------------------\n\nTITLE: Running KeystoneJS Project with Nexus Integration\nDESCRIPTION: This command starts the development server for the KeystoneJS project with Nexus integration. It launches the Admin UI at localhost:3000 and provides access to a GraphQL Playground at localhost:3000/api/graphql.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/examples/extend-graphql-schema-nexus/README.md#2025-04-13_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: JSX Runtime Configuration Change\nDESCRIPTION: Updated JSX usage from @keystone-ui/core to explicitly specify classic JSX runtime.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/packages/cloudinary/CHANGELOG.md#2025-04-13_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n/** @jsxRuntime classic */\n```\n\n----------------------------------------\n\nTITLE: Running Keystone Project with gql.tada\nDESCRIPTION: This command starts the development server for the Keystone project with gql.tada integration. It launches the Admin UI at localhost:3000 and provides access to a GraphQL Playground.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/examples/graphql-gql.tada/README.md#2025-04-13_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Dependency Update in Version 8.0.0\nDESCRIPTION: Shows updated dependency references for @keystone-6/core version 6.0.0\nSOURCE: https://github.com/keystonejs/keystone/blob/main/packages/cloudinary/CHANGELOG.md#2025-04-13_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- Updated dependencies [[`e21c117`], [`d609c6b`], [`7bbc613`], [`e382f9e`], [`d609c6b`], [`70ffa67`]...]:\n  - @keystone-6/core@6.0.0\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Keystone Project\nDESCRIPTION: Commands for installing dependencies and starting the Keystone development server. This will launch the Admin UI on port 3000 and provide access to the GraphQL playground.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/examples/script/README.md#2025-04-13_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: ListMeta Type Definition for Navigation\nDESCRIPTION: Type definition for the ListMeta objects used in the lists prop of NavigationProps. It includes key properties relevant to Navigation implementation.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/examples/custom-admin-ui-navigation/README.md#2025-04-13_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ntype ListMeta = {\n  /** Used for optimising the generated list of NavItems in React */\n  key: string\n  /** Used as the href for each list generated NavItem */\n  path: string\n  /** Used as the label for each list generated NavItem */\n  label: string\n  /** Other properties exists, but these are the ones that are relevant to the Navigation implementation */\n}\n\ntype Lists = ListMeta[]\n```\n\n----------------------------------------\n\nTITLE: Renaming TypeScript Types in Keystone\nDESCRIPTION: Several TypeScript types were renamed to improve clarity and consistency. This includes renaming base types, list types, and adding type parameters to config types.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/packages/cloudinary/CHANGELOG.md#2025-04-13_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nBaseGeneratedListTypes → BaseListTypeInfo\nItemRootValue → BaseItem\nListInfo → ListGraphQLTypes\nTypesForList → GraphQLTypesForList\n\nFieldTypeFunc // now has required type param satisfying BaseListTypeInfo\n\n// These now have required type param satisfying BaseKeystoneTypeInfo:\nServerConfig\nCreateRequestContext\nAdminUIConfig\nDatabaseConfig\nListOperationAccessControl\nMaybeSessionFunction\nMaybeItemFunction\n\nGraphQLResolver // required type param satisfying KeystoneContext\nGraphQLSchemaExtension // required type param satisfying KeystoneContext\n\nKeystoneGraphQLAPI // no longer has type param\n\n// In .keystone/types:\nListKeyListTypeInfo → Lists.ListKey.TypeInfo\nKeystoneContext → Context\n```\n\n----------------------------------------\n\nTITLE: Starting KeystoneJS Development Server\nDESCRIPTION: Command to start the KeystoneJS development server which launches the Admin UI at localhost:3000 and provides access to the GraphQL Playground.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/examples/default-values/README.md#2025-04-13_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: KeystoneJS Package Dependencies Update\nDESCRIPTION: Lists updated dependencies including @keystone-next/fields, @keystone-next/types, and @keystone-ui packages with their commit references.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/packages/cloudinary/CHANGELOG.md#2025-04-13_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\n\n- [#5925](https://github.com/keystonejs/keystone/pull/5925) [`de0a5c19e`](https://github.com/keystonejs/keystone/commit/de0a5c19e656360ea3febc7e0240543c7817253e) Thanks [@timleslie](https://github.com/timleslie)! - Removed unused dependencies.\n\n- Updated dependencies [[`de0a5c19e`](https://github.com/keystonejs/keystone/commit/de0a5c19e656360ea3febc7e0240543c7817253e), [`7a25925c3`](https://github.com/keystonejs/keystone/commit/7a25925c3dc5b2af2cf1209ee949563fb71a4a8c), [`50ad1ce6b`](https://github.com/keystonejs/keystone/commit/50ad1ce6be90f5fb2481840dbd01328b6f629432)]\n```\n\n----------------------------------------\n\nTITLE: Running Keystone.js Project with Custom ID\nDESCRIPTION: Command to start the Keystone.js development server, which launches the Admin UI at localhost:3000 and provides access to the GraphQL Playground.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/examples/custom-id/README.md#2025-04-13_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry for Version 0.0.2\nDESCRIPTION: Documents removal of node engine restrictions in version 0.0.2\nSOURCE: https://github.com/keystonejs/keystone/blob/main/prisma-utils/CHANGELOG.md#2025-04-13_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.0.2\n\n### Patch Changes\n\n- [#7804](https://github.com/keystonejs/keystone/pull/7804) [`c93768cab`](https://github.com/keystonejs/keystone/commit/c93768cab52c76384608f1d890b1ba1840be5e7d) Thanks [@dcousens](https://github.com/dcousens)! - Removes node `.engines` restrictions\n```\n\n----------------------------------------\n\nTITLE: Basic JavaScript Line Highlighting\nDESCRIPTION: Shows the syntax for highlighting a single line in a JavaScript code block using Prism syntax.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/README.md#2025-04-13_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```js{5}\n```\n\n----------------------------------------\n\nTITLE: Updating Package Dependencies in Keystone.js Changelog\nDESCRIPTION: This code snippet shows the format for listing updated dependencies in a Keystone.js changelog entry. It includes the package name, version, and a link to the commit.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/packages/fields-document/CHANGELOG.md#2025-04-13_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n- [`f4e4498c6`](https://github.com/keystonejs/keystone/commit/f4e4498c6e4c7301288f23048f4aad3c492985c7) [#5018](https://github.com/keystonejs/keystone/pull/5018) Thanks [@bladey](https://github.com/bladey)! - Updated legacy packages to the @keystone-next namespace.\n```\n\n----------------------------------------\n\nTITLE: Node.js Version Requirement Update\nDESCRIPTION: Updates Node.js version requirements and consolidates admin UI package\nSOURCE: https://github.com/keystonejs/keystone/blob/main/packages/cloudinary/CHANGELOG.md#2025-04-13_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n### Major Changes\n\n- [#5746](https://github.com/keystonejs/keystone/pull/5746) [`19750d2dc`](https://github.com/keystonejs/keystone/commit/19750d2dc5801cc8d2ffae1f50d1d5ca6ab9407d) Thanks [@timleslie](https://github.com/timleslie)! - Update Node.js dependency to `^12.20 || >= 14.13`.\n```\n\n----------------------------------------\n\nTITLE: Benchmarks Header in Markdown\nDESCRIPTION: Simple markdown header indicating a benchmarks section\nSOURCE: https://github.com/keystonejs/keystone/blob/main/tests/benchmarks/README.md#2025-04-13_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Benchmarks\n```\n\n----------------------------------------\n\nTITLE: Combined Highlighting and Collapsing\nDESCRIPTION: Demonstrates how to combine both highlighting and collapsing syntax in JavaScript code blocks.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/README.md#2025-04-13_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n```js{1-3}[4-5]\n```\n\n----------------------------------------\n\nTITLE: Version 2.0.1 Patch Changes\nDESCRIPTION: Lists updated dependencies with their corresponding commit references for version 2.0.1\nSOURCE: https://github.com/keystonejs/keystone/blob/main/packages/cloudinary/CHANGELOG.md#2025-04-13_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\n\n- Updated dependencies [[`11777cddb`](https://github.com/keystonejs/keystone/commit/11777cddba45b28a9e17a3149b792db121322b46), [`cbf11a69b`](https://github.com/keystonejs/keystone/commit/cbf11a69b8f2c428e2c0a08dd568b3bc0e0d80f4), [`b2de22941`](https://github.com/keystonejs/keystone/commit/b2de229419cc93b69ee4027c387cab9c8d701488), [`cc987d078`](https://github.com/keystonejs/keystone/commit/cc987d078653fd9e686069f9f885f1269b64a882), [`60e061246`](https://github.com/keystonejs/keystone/commit/60e061246bc35b76031f43ff6c07446fe6ad3c6b), [`cc987d078`](https://github.com/keystonejs/keystone/commit/cc987d078653fd9e686069f9f885f1269b64a882)]:\n  - @keystone-next/admin-ui@3.0.0\n  - @keystone-next/types@4.0.0\n```\n\n----------------------------------------\n\nTITLE: Starting KeystoneJS Development Server\nDESCRIPTION: Command to start the KeystoneJS development server which launches the Admin UI at localhost:3000 and provides access to GraphQL Playground.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/examples/virtual-field/README.md#2025-04-13_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Installing Keystone Auth Package\nDESCRIPTION: Command to install the Keystone authentication package, which is required to add authentication capabilities to the application.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/walkthroughs/lesson-4.md#2025-04-13_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @keystone-6/auth\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry for Version 0.0.1\nDESCRIPTION: Documents Prisma dependency update to v3.6.0 in version 0.0.1\nSOURCE: https://github.com/keystonejs/keystone/blob/main/prisma-utils/CHANGELOG.md#2025-04-13_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.0.1\n\n### Patch Changes\n\n- [#7062](https://github.com/keystonejs/keystone/pull/7062) [`30b3cacb0`](https://github.com/keystonejs/keystone/commit/30b3cacb08601a8db445e3c7be85dee10d0d2958) Thanks [@dcousens](https://github.com/dcousens)! - Updated prisma monorepo to [v3.6.0 (minor)](https://github.com/prisma/prisma/releases/tag/3.6.0).\n```\n\n----------------------------------------\n\nTITLE: JavaScript Line Range Highlighting\nDESCRIPTION: Demonstrates how to highlight a range of lines in JavaScript code blocks using Prism syntax.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/README.md#2025-04-13_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n```js{5-10}\n```\n\n----------------------------------------\n\nTITLE: Package Change Reference in Version 7.0.3\nDESCRIPTION: Documents upgrade of cloudinary library to version 2\nSOURCE: https://github.com/keystonejs/keystone/blob/main/packages/cloudinary/CHANGELOG.md#2025-04-13_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\n\n- [#9004](https://github.com/keystonejs/keystone/pull/9004) [`47cd7f8`] Thanks [@dcousens]! - Upgrade `cloudinary` library to version 2\n```\n\n----------------------------------------\n\nTITLE: Alternative Combined Syntax\nDESCRIPTION: Shows an alternative order for combining highlighting and collapsing syntax in JavaScript code blocks.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/README.md#2025-04-13_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n```js[4-5]{1-3}\n```\n\n----------------------------------------\n\nTITLE: Running Tests in Keystone.js\nDESCRIPTION: Command to execute the configured test suite using pnpm.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/examples/testing/README.md#2025-04-13_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npnpm test\n```\n\n----------------------------------------\n\nTITLE: Starting Keystone Development Server\nDESCRIPTION: Command to start the Keystone development server locally\nSOURCE: https://github.com/keystonejs/keystone/blob/main/packages/create/starter/README.md#2025-04-13_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Multiple Range Code Collapsing\nDESCRIPTION: Shows how to collapse multiple ranges of lines in JavaScript code blocks.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/README.md#2025-04-13_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n```js[1-5,8-10]\n```\n\n----------------------------------------\n\nTITLE: Multiple JavaScript Line Highlighting\nDESCRIPTION: Shows how to highlight multiple individual lines and ranges in JavaScript code blocks.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/README.md#2025-04-13_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n```js{1,3,5-10,15,17-19}\n```\n\n----------------------------------------\n\nTITLE: Changing Image Reference Format in JavaScript\nDESCRIPTION: Modifies the format of image references to use the pattern ${mode}:image:${id}.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/packages/core/CHANGELOG.md#2025-04-13_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\n\"${mode}:image:${id}\"\n```\n\n----------------------------------------\n\nTITLE: Running the KeystoneJS Project with Shell Commands\nDESCRIPTION: Command to start the development server for the KeystoneJS project, which will launch the Admin UI at localhost:3000 and provide access to the GraphQL Playground.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/examples/custom-session-invalidation/README.md#2025-04-13_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Configuring CI Test Matrix in GitHub Actions\nDESCRIPTION: YAML configuration snippet for adding new test files to the GitHub Actions workflow matrix. This configuration enables CI to recognize and execute new test files within the admin UI integration test suite.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/tests/admin-ui-tests/README.md#2025-04-13_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nstrategy:\n  matrix:\n    test: ['init.test.ts', ADD_YOUR_FILENAME_HERE]\n    fail-fast: false\n```\n\n----------------------------------------\n\nTITLE: Displaying Version Information in Markdown\nDESCRIPTION: Documentation of version 2.0.0 changes including major updates to React 18 support, S3 storage integration, and various UI improvements.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/packages/core/CHANGELOG.md#2025-04-13_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n## 2.0.0\n\n### Major Changes\n\n- [#7601](https://github.com/keystonejs/keystone/pull/7601) [`4234ed488`](https://github.com/keystonejs/keystone/commit/4234ed488377367582e1fb1895f4a581c097fbea) Thanks [@dcousens](https://github.com/dcousens)! - upgrade dependancy `\"react\": \"^18.1.0\"`\n\n* [#7601](https://github.com/keystonejs/keystone/pull/7601) [`4234ed488`](https://github.com/keystonejs/keystone/commit/4234ed488377367582e1fb1895f4a581c097fbea) Thanks [@dcousens](https://github.com/dcousens)! - New support for uploading images and files to Amazon S3 and other compatible providers.\n```\n\n----------------------------------------\n\nTITLE: Adding Schema File Comments in Prisma and GraphQL\nDESCRIPTION: Added warning comments to schema.prisma and schema.graphql files indicating they are auto-generated and should not be modified manually.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/packages/core/CHANGELOG.md#2025-04-13_snippet_22\n\nLANGUAGE: prisma\nCODE:\n```\n// This file is automatically generated by Keystone, do not modify it manually\n```\n\nLANGUAGE: graphql\nCODE:\n```\n# This file is automatically generated by Keystone, do not modify it manually\n```\n\n----------------------------------------\n\nTITLE: Version 2.0.2 Patch Changes\nDESCRIPTION: Lists updated dependencies with their corresponding commit references for version 2.0.2\nSOURCE: https://github.com/keystonejs/keystone/blob/main/packages/cloudinary/CHANGELOG.md#2025-04-13_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\n\n- Updated dependencies [[`b6498d9f1`](https://github.com/keystonejs/keystone/commit/b6498d9f1341648742f2db78fec53b851b36dddd), [`d36e580cc`](https://github.com/keystonejs/keystone/commit/d36e580cc21e4b77a1bd0615c96c0793b9c5dac5), [`803626e88`](https://github.com/keystonejs/keystone/commit/803626e8854f9b7d293bd1829398d25a6692154a)]:\n  - @keystone-next/types@5.0.0\n  - @keystone-next/admin-ui@3.1.2\n```\n\n----------------------------------------\n\nTITLE: Replacing Keystone CLI Commands with Prisma Equivalents\nDESCRIPTION: New command replacements for the keystone-next CLI, where deploy, reset, and generate commands now use the Prisma migration system directly through the keystone-next prisma command.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/packages/core/CHANGELOG.md#2025-04-13_snippet_35\n\nLANGUAGE: bash\nCODE:\n```\nkeystone-next deploy -> keystone-next prisma migrate deploy\nkeystone-next reset -> keystone-next prisma migrate reset\nkeystone-next generate -> keystone-next prisma migrate dev\n```\n\n----------------------------------------\n\nTITLE: Installing Keystone Core Package\nDESCRIPTION: Installs the main Keystone package (@keystone-6/core) using npm. This package is essential for building Keystone applications.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/walkthroughs/lesson-1.md#2025-04-13_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @keystone-6/core\n```\n\n----------------------------------------\n\nTITLE: Adding JSX Runtime Directive\nDESCRIPTION: Updated JSX usage to explicitly specify classic runtime through a JSX pragma comment.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/packages/core/CHANGELOG.md#2025-04-13_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\n/** @jsxRuntime classic */\n```\n\n----------------------------------------\n\nTITLE: Installing Document Field Package\nDESCRIPTION: Command to install the KeystoneJS Document field package as a project dependency.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/walkthroughs/lesson-5.md#2025-04-13_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @keystone-6/fields-document\n```\n\n----------------------------------------\n\nTITLE: Patch Changes Markdown Documentation\nDESCRIPTION: Lists patch changes and dependency updates, including UI improvements like block-menu logic and field adapter type updates\nSOURCE: https://github.com/keystonejs/keystone/blob/main/packages/fields-document/CHANGELOG.md#2025-04-13_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\n\n- [#5618](https://github.com/keystonejs/keystone/pull/5618) [`7e24b9c2a`](https://github.com/keystonejs/keystone/commit/7e24b9c2ab9313753932a27c45d238a2e9a61e9f) Thanks [@gwyneplaine](https://github.com/gwyneplaine)! - Added logic to ensure the block-menu in the toolbar is hidden when no component blocks or relationships are provided.\n\n- Updated dependencies [[`3aea3b12f`](https://github.com/keystonejs/keystone/commit/3aea3b12fd0047e54671ead796fca15b625ade66), [`11814ce98`](https://github.com/keystonejs/keystone/commit/11814ce9865bc14ffdf5ca2a09b7221001539857), [`b0a72a112`](https://github.com/keystonejs/keystone/commit/b0a72a112dae7857defc8b745e674d55a29be766), [`79a0844b9`](https://github.com/keystonejs/keystone/commit/79a0844b9d5125891e3eaad4dc3999b232cefaa2)]\n```\n\n----------------------------------------\n\nTITLE: Generated Prisma Migration with Warning\nDESCRIPTION: An example of a generated Prisma migration that makes a checkbox column non-nullable. This shows the warning about existing NULL values that would cause the migration to fail without modification.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/packages/core/CHANGELOG.md#2025-04-13_snippet_17\n\nLANGUAGE: sql\nCODE:\n```\n/*\n  Warnings:\n\n  - Made the column `isAdmin` on table `User` required. This step will fail if there are existing NULL values in that column.\n\n*/\n-- AlterTable\nALTER TABLE \"User\" ALTER COLUMN \"isAdmin\" SET NOT NULL,\nALTER COLUMN \"isAdmin\" SET DEFAULT false;\n```\n\n----------------------------------------\n\nTITLE: Keystone Package Dependencies Update\nDESCRIPTION: List of version number updates for keystone UI, admin, fields and core packages\nSOURCE: https://github.com/keystonejs/keystone/blob/main/packages/auth/CHANGELOG.md#2025-04-13_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n- @keystone-ui/button@3.0.1\n- @keystone-ui/core@2.0.1 \n- @keystone-ui/fields@2.0.1\n- @keystone-ui/notice@2.0.1\n- @keystone-next/admin-ui@10.0.0\n- @keystone-next/admin-ui-utils@3.0.1\n- @keystone-next/fields@5.1.0\n- @keystone-next/keystone@11.0.0\n- @keystone-next/types@14.0.0\n```\n\n----------------------------------------\n\nTITLE: Updating Dependency in JavaScript\nDESCRIPTION: This code snippet shows an example of updating a dependency version in a JavaScript project's package.json file.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/packages/core/CHANGELOG.md#2025-04-13_snippet_39\n\nLANGUAGE: JavaScript\nCODE:\n```\n\"@keystone-next/fields@3.2.0\"\n```\n\n----------------------------------------\n\nTITLE: Configuring robots.txt for KeystoneJS Website\nDESCRIPTION: Standard robots.txt configuration that allows all user agents to crawl the entire website, specifies the canonical host URL, and points to the sitemap location. This ensures proper indexing by search engines.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/public/robots.txt#2025-04-13_snippet_0\n\nLANGUAGE: robotstxt\nCODE:\n```\n# *\nUser-agent: *\nAllow: /\n\n# Host\nHost: https://keystonejs.com\n\n# Sitemaps\nSitemap: https://keystonejs.com/sitemap.xml\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation Template with Well Component\nDESCRIPTION: Documentation template using custom well component to display a related content link for the Relationship Field API Reference. The template includes heading, gradient style, href link and target properties.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/guides/relationships.md#2025-04-13_snippet_11\n\nLANGUAGE: markdown\nCODE:\n```\n## Related resources\n\n{% related-content %}\n{% well\n   heading=\"Relationship Field API Reference\"\n   grad=\"grad1\"\n   href=\"/docs/fields/relationship\"\n   target=\"\" %}\nDefines the names, types, and configuration of Keystone fields. See all the fields and the configuration options they accept.\n{% /well %}\n{% /related-content %}\n```\n\n----------------------------------------\n\nTITLE: Running the Admin UI with Keystone in Development Mode\nDESCRIPTION: Command to start the Keystone Admin UI development server at localhost:3000, which provides access to the Admin UI for creating database items and a GraphQL Playground for running queries and mutations.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/examples/document-field/README.md#2025-04-13_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Querying a Virtual Field in GraphQL\nDESCRIPTION: This GraphQL query demonstrates how to request a virtual field ('hello') along with an ID field from an example item. The query targets a specific item with ID '1'.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/docs/guides/virtual-fields.md#2025-04-13_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  example(where: { id: \"1\" }) {\n    id\n    hello\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Keystone 6 Application\nDESCRIPTION: Command to create a new Keystone 6 application using npm.\nSOURCE: https://github.com/keystonejs/keystone/blob/main/docs/content/blog/general-availability.md#2025-04-13_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm create keystone-app@latest\n```"
  }
]