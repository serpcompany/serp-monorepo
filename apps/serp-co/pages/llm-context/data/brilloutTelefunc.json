[
  {
    "owner": "brillout",
    "repo": "telefunc",
    "content": "TITLE: Securing Telefunctions with Permission Checks and shield()\nDESCRIPTION: Demonstrates how to secure a telefunction by combining shield() for type validation with explicit permission checks using Abort(), ensuring that even if the function is called outside the intended frontend flow, it remains secure.\nSOURCE: https://github.com/brillout/telefunc/blob/main/docs/pages/RPC/+Page.mdx#2025-04-18_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// Comment.telefunc.js\n// Environment: server\n\nimport { getContext, Abort, shield } from 'telefunc'\n\nshield(onDelete, [shield.type.number])\nexport async function onDelete(id) {\n  const { user } = getContext()\n\n  // onDelete() is public and anyone can call it without being an admin.\n  // We must abort if that happens.\n  if (!user.isAdmin) throw Abort()\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Remote Todo Creation Function with Telefunc in TypeScript\nDESCRIPTION: Defines a server-side function that creates a new todo item in a database. The function demonstrates how Telefunc makes server functions callable from the browser, validates input parameters, extracts user context, and offers examples of database integration using both ORM and SQL approaches.\nSOURCE: https://github.com/brillout/telefunc/blob/main/docs/pages/index/CodePreviewBlockLeft.mdx#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// CreateTodo.telefunc.ts\n// Environment: server\n\n// Telefunc makes onNewTodo() remotely callable\n// from the browser.\nexport { onNewTodo }\n\nimport { getContext } from 'telefunc'\n\n// Telefunction arguments are automatically validated\n// at runtime, so `text` is guaranteed to be a string.\nasync function onNewTodo(text: string) {\n  const { user } = getContext()\n\n  // With an ORM\n  await Todo.create({ text, authorId: user.id })\n\n  // With SQL\n  await sql(\n    \"INSERT INTO todo_items VALUES (:text, :authorId)\",\n    { text, authorId: user.id })\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Telefunc Middleware in Express.js/Fastify Server\nDESCRIPTION: This code snippet shows how to integrate the Telefunc middleware with server frameworks like Express.js or Fastify. It demonstrates setting up an endpoint at '/_telefunc' that processes requests using the telefunc() function, passing the URL, HTTP method, request body, and optional context.\nSOURCE: https://github.com/brillout/telefunc/blob/main/docs/pages/telefunc/+Page.mdx#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// server.js\n\n// Server (Express.js/Fastify/...)\n\nimport { telefunc } from 'telefunc'\n\n// Telefunc middleware\napp.all('/_telefunc', async (req, res) => {\n  const httpResponse = await telefunc({\n    // HTTP Request URL, which is '/_telefunc' if we didn't modify config.telefuncUrl\n    url: req.url,\n    // HTTP Request Method (GET, POST, ...)\n    method: req.method,\n    // HTTP Request Body, which can be a string, buffer, or stream\n    body: req.body,\n    // Optional\n    context: {\n      /* Some context */\n    }\n  })\n  const { body, statusCode, contentType } = httpResponse\n  res.status(statusCode).type(contentType).send(body)\n})\n```\n\n----------------------------------------\n\nTITLE: Frontend Component with Restricted Telefunction Call\nDESCRIPTION: A React component that conditionally renders a delete button based on user permissions, demonstrating a frontend pattern that restricts when a telefunction is called based on user role.\nSOURCE: https://github.com/brillout/telefunc/blob/main/docs/pages/RPC/+Page.mdx#2025-04-18_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// Comment.jsx\n// Environment: client\n\nimport { onDelete } from './Comment.telefunc.js'\n\nfunction Comment({ id, text }) {\n  const deleteButton =\n    // The delete button is only shown to admins\n    !user.isAdmin ? null : <button onClick={() => onDelete(id)}>Delete</button>\n  return <>\n    <p>{ text }</p>\n    { deleteButton }\n  </>\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up Telefunc in SvelteKit\nDESCRIPTION: Step-by-step instructions for adding Telefunc to a SvelteKit project, including installation, plugin setup, server middleware configuration, and creating telefunc files. This setup enables end-to-end typesafe remote function calls with automatic runtime validation.\nSOURCE: https://github.com/brillout/telefunc/blob/main/docs/pages/svelte-kit/+Page.mdx#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install telefunc\n```\n\n----------------------------------------\n\nTITLE: Using shield() for Object Argument Type Validation\nDESCRIPTION: Shows how to use shield() to validate a complex object argument with multiple properties of different types, providing both runtime validation and TypeScript type inference.\nSOURCE: https://github.com/brillout/telefunc/blob/main/docs/pages/RPC/+Page.mdx#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// CreateTodo.telefunc.js\n// Environment: server\n\nimport { shield } from 'telefunc'\nconst t = shield.type\n\nshield(onNewTodo, [{ text: t.string, isCompleted: t.boolean }])\nexport async function onNewTodo({ text, isCompleted }) {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom User Authentication Wrapper in Telefunc\nDESCRIPTION: Shows how to create a getUser() utility that wraps getContext() to provide centralized authentication logic with custom abort values for redirecting unauthenticated users.\nSOURCE: https://github.com/brillout/telefunc/blob/main/docs/pages/permissions/+Page.mdx#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// auth/getUser.ts\n// Environment: server\n\n// Note that getUser() isn't a telefunction: it's a wrapper around getContext()\nexport { getUser }\n\nimport { getContext, Abort } from 'telefunc'\n\nfunction getUser() {\n  const { user } = getContext()\n  if (!user) {\n    throw Abort({ notLoggedIn: true })\n  }\n  return user\n}\n```\n\n----------------------------------------\n\nTITLE: Using throw Abort() for Permissions in Telefunc\nDESCRIPTION: Shows the syntax for using throw Abort() to implement permission checks in Telefunc server-side code. This pattern is used to abort function execution when permission requirements are not met.\nSOURCE: https://github.com/brillout/telefunc/blob/main/docs/pages/Abort/+Page.mdx#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nthrow Abort()\n```\n\n----------------------------------------\n\nTITLE: Returning Form Validation Errors in Telefunc\nDESCRIPTION: This example shows how to perform form validation in a Telefunc server function and return validation errors to the frontend by using a return value. It validates email and password fields and returns either validation errors or the created user.\nSOURCE: https://github.com/brillout/telefunc/blob/main/docs/pages/form-validation/+Page.mdx#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// SignUpForm.telefunc.ts\n// Environment: server\n\nexport async function onFormSubmit(email: string, password: string) {\n  // Form validation\n  const inputErrors = {}\n\n  if (!email) {\n    inputErrors.email = 'Please enter your email.'\n  } else if (!email.includes('@')) {\n    inputErrors.email = 'Invalid email; make sure to enter a valid email.'\n  }\n\n  if (!password) {\n    inputErrors.password = 'Please enter a password.'\n  } else if (password.length < 8) {\n    inputErrors.password = 'Password must have at least 8 charachters.'\n  }\n\n  if (Object.keys(inputErrors).length > 0) {\n    // Instead of `throw Abort()`\n    return { inputErrors }\n  }\n\n  // Some ORM/SQL query\n  const user = await User.create({ email, password })\n\n  return { user }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Permissions in Telefunc Server Functions\nDESCRIPTION: Demonstrates how to implement basic permissions in a Telefunc server function using getContext(), Abort(), and conditional returns for handling different authorization scenarios.\nSOURCE: https://github.com/brillout/telefunc/blob/main/docs/pages/permissions/+Page.mdx#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// TodoItem.telefunc.ts\n// Environment: server\n\nexport { onTextChange }\n\nimport { getContext, Abort } from 'telefunc'\n\nfunction onTextChange(id: string, text: string) {\n  const { user } = getContext()\n  if (!user) {\n    // We return `notLoggedIn: true` so that the frontend can redirect the user to the login page\n    return { notLoggedIn: true }\n  }\n\n  const todoItem = await Todo.findOne({ id })\n  if (!todoItem) {\n    // `throw Abort()` corresponds to \"403 Forbidden\" of classical APIs\n    throw Abort()\n  }\n\n  // We can easily programmatically implement advanced permissions such\n  // as \"only allow the author or admins to modify a to-do item\".\n  if (todoItem.authorId !== user.id && !user.isAdmin) {\n    throw Abort()\n  }\n  await todoItem.update({ text })\n}\n```\n\n----------------------------------------\n\nTITLE: Using getContext() to Access User Data in a Telefunction\nDESCRIPTION: Demonstrates how to use getContext() to access user information from the context object in a server-side telefunction, retrieving todo items for the authenticated user.\nSOURCE: https://github.com/brillout/telefunc/blob/main/docs/pages/getContext/+Page.mdx#2025-04-18_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n// TodoList.telefunc.ts\n// Environment: server\n\nimport { getContext } from 'telefunc'\n\nexport async function onLoad() {\n  const context = getContext()\n  const { user } = context\n  const todoItems = await Todo.findMany({ select: 'text', authorId: user.id })\n  return {\n    todoItems,\n    userName: user.name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Shield Usage for Telefunctions in JavaScript\nDESCRIPTION: Demonstrates how to use shield() to ensure arguments are of the expected type. In this example, shield() guarantees that the text parameter is a string.\nSOURCE: https://github.com/brillout/telefunc/blob/main/docs/pages/shield/+Page.mdx#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// CreateTodo.telefunc.js\n// Environment: server\n\nexport { onNewTodo }\n\nimport { shield } from 'telefunc'\nconst t = shield.type\n\nshield(onNewTodo, [t.string])\nasync function onNewTodo(text) {\n  // `text` is guaranteed to be a `string`: if `onNewTodo(42)` is called then Telefunc\n  // throws an error that `text` should be a `string` (instead of a `number`)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Server-Side Mark-All-Completed Telefunction in TypeScript\nDESCRIPTION: Defines a telefunction that marks all incomplete tasks as completed in a single server operation. Demonstrates both SQL and ORM approaches for database operations, showing how a tailored telefunction can efficiently handle a specific frontend action.\nSOURCE: https://github.com/brillout/telefunc/blob/main/docs/pages/event-based/+Page.mdx#2025-04-18_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\n// TodoList.telefunc.ts\n// Environment: server\n\nexport async function onMarkAllAsCompleted() {\n  // With SQL\n  await sql('UPDATE tasks SET completed = true WHERE completed = false')\n\n  // With an ORM\n  const updateUser = await Tasks.update({\n    where: {\n      completed: false\n    },\n    data: {\n      completed: true\n    }\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Common Shield Type Usage Examples in JavaScript\nDESCRIPTION: Provides examples of common shield() type patterns including primitive types, objects, arrays, nullable types, optional types, and union types.\nSOURCE: https://github.com/brillout/telefunc/blob/main/docs/pages/shield/+Page.mdx#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// TodoList.telefunc.js\n// Environment: server\n\nimport { shield } from 'telefunc'\nconst t = shield.type\n\nshield(onTextChange, [t.number, t.string])\nasync function onTextChange(id, text) {\n  // typeof id === 'number'\n  // typeof text === 'string'\n}\n\nshield(onCompletedToggle, [{ id: t.number, isCompleted: t.boolean }])\nasync function onCompletedToggle({ id, isCompleted }) {\n  // typeof id === 'number'\n  // typeof isCompleted === 'boolean'\n}\n\nshield(onTagListChange, [t.array(t.string)])\nasync function onTagListChange(tagList) {\n  // tagList.every(tagName => typeof tagName === 'string')\n}\n\nshield(onNewMilestone, [{\n  name: t.string,\n  deadline: t.nullable(t.date),\n  ownerId: t.optional(t.number)\n}])\nasync function onNewMilestone({ name, deadline, ownerId }) {\n  // typeof name === 'string'\n  // deadline === null || deadline.constructor === Date\n  // ownerId === undefined || typeof ownerId === 'number'\n}\n\nshield(onStatusChange, [t.or(\n  t.const('DONE'),\n  t.const('PROGRESS'),\n  t.const('POSTPONED')\n)])\nasync function onStatusChange(status) {\n  // status === 'DONE' || status === 'PROGRESS' || status === 'POSTPONED'\n}\n```\n\n----------------------------------------\n\nTITLE: Using shield() for Simple Argument Type Validation\nDESCRIPTION: Demonstrates how to use the shield() function from Telefunc to validate a single string argument, which is more concise than manual validation and provides TypeScript type inference.\nSOURCE: https://github.com/brillout/telefunc/blob/main/docs/pages/RPC/+Page.mdx#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// CreateTodo.telefunc.js\n// Environment: server\n\nimport { shield } from 'telefunc'\nconst t = shield.type\n\nshield(onNewTodo, [t.string])\nexport async function onNewTodo(text) {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Telefunc Plugin in Vite\nDESCRIPTION: Demonstrates how to configure the Telefunc Vite plugin in the vite.config.js file. Shows plugin initialization with optional configuration parameters like disabling naming conventions.\nSOURCE: https://github.com/brillout/telefunc/blob/main/docs/pages/vite-plugin/+Page.mdx#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// vite.config.js\n\nimport { telefunc } from 'telefunc/vite'\n\nexport default {\n  plugins: [\n    telefunc({\n      disableNamingConvention: true,\n      // ...\n    })\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Automatic Type Validation with TypeScript in Telefunc\nDESCRIPTION: Shows how TypeScript integration automatically generates shield() validations for telefunctions, providing runtime type safety without manual shield definitions.\nSOURCE: https://github.com/brillout/telefunc/blob/main/docs/pages/shield/+Page.mdx#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// hello.telefunc.ts\n\n// We don't need to define a shield() when using TypeScript: Telefunc automatically generates\n// it for us. For example here, Telefunc automatically aborts the telefunction call if the\n// argument is `hello({ name: 42 })` and throws an error that `name` should be a `number`.\nexport async function hello({ name }: { name: string }) {\n   return `Welcome to Telefunc, ${name}.`\n}\n```\n\n----------------------------------------\n\nTITLE: Protected Telefunction Example\nDESCRIPTION: Demonstrates how to implement security measures in telefunctions using Abort() and context checking.\nSOURCE: https://github.com/brillout/telefunc/blob/main/docs/pages/RPC/+Page.mdx#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// run.telefunc.js\n// Environment: server\n\nexport { run }\n\nimport { Abort, getContext } from 'telefunc'\n\nasync function run(sql) {\n  const { user } = getContext()\n\n  // Only admins are allowed to run this telefunction\n  if (user.isAdmin !== true) throw Abort()\n\n  return await database.execute(sql)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Abort Handling in Telefunc Client\nDESCRIPTION: Demonstrates how to set up a global onAbort handler on the client side to consistently handle aborted telefunctions, such as redirecting unauthenticated users to the login page.\nSOURCE: https://github.com/brillout/telefunc/blob/main/docs/pages/permissions/+Page.mdx#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Environment: client\n\nimport { onAbort } from 'telefunc/client'\n\nonAbort(err => {\n  if (err.abortValue.notLoggedIn) {\n    // Redirect user to login page\n    window.location.href = '/login'\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Todo List Data Fetching with Telefunc RPC\nDESCRIPTION: Demonstrates a telefunction that fetches todo list data from a database. Shows how RPC endpoints can be tightly coupled to frontend component needs, returning specific data for a TodoList component including user authentication check.\nSOURCE: https://github.com/brillout/telefunc/blob/main/docs/pages/RPC-vs-GraphQL-REST/+Page.mdx#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// TodoList.telefunc.js\n// Environment: server\n\nimport { getContext } from 'telefunc'\n\n// This telefunction is tightly coupled to the frontend: it returns exactly and\n// only what the <TodoList /> component needs.\n\nexport async function getInitialData() {\n  const { user } = getContext()\n  if (!user) {\n    return { isNotLoggedIn: true }\n  }\n  const todoItems = await database.query(\n    'SELECT id, text FROM todos WHERE authorId = :authorId',\n    { authorId: user.id }\n  )\n  const { firstName } = user\n  return {\n    user: { firstName },\n    todoItems\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Telefunc URL on Client Side\nDESCRIPTION: Configures the URL pathname for Telefunc communication on the client side. This must match the server-side configuration for proper communication.\nSOURCE: https://github.com/brillout/telefunc/blob/main/docs/pages/telefuncUrl/+Page.mdx#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Environment: client\n\nimport { config } from 'telefunc/client'\n\nconfig.telefuncUrl = '/api/_telefunc'\n```\n\n----------------------------------------\n\nTITLE: Setting Telefunc URL on Server Side\nDESCRIPTION: Configures the URL pathname for Telefunc communication on the server side. The server-side configuration always requires a URL pathname.\nSOURCE: https://github.com/brillout/telefunc/blob/main/docs/pages/telefuncUrl/+Page.mdx#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Environment: server\n\nimport { config } from 'telefunc'\n\nconfig.telefuncUrl = '/api/_telefunc'\n```\n\n----------------------------------------\n\nTITLE: Using Abort for Form Validation in Telefunc\nDESCRIPTION: This snippet demonstrates an alternative approach to handling form validation errors in Telefunc by using the Abort mechanism. It shows how to throw an Abort with validation error information that can be caught by the frontend.\nSOURCE: https://github.com/brillout/telefunc/blob/main/docs/pages/form-validation/+Page.mdx#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// SignUpForm.telefunc.ts\n// Environment: server\n\nimport { Abort } from 'telefunc'\n\nexport async function onFormSubmit(email: string, password: string) {\n  if (!email) {\n    throw Abort({\n      inputErrors: {\n        email: 'Please enter your email.'\n      }\n    })\n  }\n  /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Shield Error Logging in Telefunc Server\nDESCRIPTION: This snippet demonstrates how to configure the logging of shield errors in the Telefunc server environment. It shows two ways to set the 'shieldErrors' option: as a boolean or as an object with separate settings for development and production environments.\nSOURCE: https://github.com/brillout/telefunc/blob/main/docs/pages/log/+Page.mdx#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Environment: server\n\nimport { config } from 'telefunc'\n\nconfig.log.shieldErrors = true\n// Or\nconfig.log.shieldErrors = { dev: true, prod: true }\n```\n\n----------------------------------------\n\nTITLE: Providing Context to Telefunc Server Middleware\nDESCRIPTION: Shows how to provide the context object to Telefunc's server middleware, typically including user authentication information from the request object.\nSOURCE: https://github.com/brillout/telefunc/blob/main/docs/pages/getContext/+Page.mdx#2025-04-18_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n// server.js\n\n// Server (Express.js/Fastify/...)\n\nimport { telefunc } from 'telefunc'\n\n// Telefunc middleware\napp.all('/_telefunc', async (req, res) => {\n  // Authentication middlewares (e.g. Passport.js or Grant) usually provide information\n  // about the logged-in user on the `req` object:\n  const user = req.user\n  // Or when using a third-party authentication provider (e.g. Auth0):\n  const user = await authProviderApi.getUser(req.headers)\n\n  const httpResponse = await telefunc({\n    // We provide the context object here:\n    context: {\n      user,\n    },\n    url: req.url,\n    method: req.method,\n    body: req.body,\n  })\n\n  const { body, statusCode, contentType } = httpResponse\n  res.status(statusCode).type(contentType).send(body)\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Telefunc with Vite\nDESCRIPTION: Shows how to set up the Telefunc Vite plugin to transform *.telefunc.js files automatically in a Vite project.\nSOURCE: https://github.com/brillout/telefunc/blob/main/docs/pages/install/+Page.mdx#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// vite.config.js\n\nimport { telefunc } from 'telefunc/vite'\n\nexport default {\n  plugins: [telefunc()]\n}\n```\n\n----------------------------------------\n\nTITLE: Using throw Abort(someValue) for Context Wrappers in Telefunc\nDESCRIPTION: Demonstrates how to use throw Abort() with a value parameter to implement getContext() wrappers in Telefunc. This approach allows passing values through the abortion mechanism.\nSOURCE: https://github.com/brillout/telefunc/blob/main/docs/pages/Abort/+Page.mdx#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nthrow Abort(someValue)\n```\n\n----------------------------------------\n\nTITLE: Handling Telefunc Permission Responses in React Component\nDESCRIPTION: Shows how to handle permission-related responses from telefunctions in a React component, specifically redirecting users to a login page when they're not authenticated.\nSOURCE: https://github.com/brillout/telefunc/blob/main/docs/pages/permissions/+Page.mdx#2025-04-18_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n// TodoItem.tsx\n// Environment: client\n\nimport { onTextChange } from './TodoItem.telefunc'\n\nfunction onChange(id: string, text: string) {\n  const res = await onTextChange(id, text)\n  if (res?.notLoggedIn) {\n    // Redirect user to login page\n    window.location.href = '/login'\n  }\n}\n\nfunction TodoItem({ id, text }: { id: string; text: string }) {\n  return <input input=\"text\" value={text} onChange={(ev) => onChange(id, ev.target.value)} />\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Telefunction Argument Validation Using Abort()\nDESCRIPTION: Shows how to manually validate telefunction arguments by checking their type and throwing Abort() when validation fails, preventing runtime errors when receiving unexpected argument types.\nSOURCE: https://github.com/brillout/telefunc/blob/main/docs/pages/RPC/+Page.mdx#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// CreateTodo.telefunc.js\n// Environment: server\n\nexport async function onNewTodo(text) {\n  // ❌ This may throw:\n  // ```\n  // Uncaught TypeError: Cannot read properties of undefined (reading 'toUpperCase')\n  // ```\n  // While the frontend may always call onNewTodo(text) with `typeof text === 'string'`,\n  // because onNewTodo() is public, anyone can call onNewTodo(undefined) instead.\n  text = text.toUpperCase()\n\n  // ✅ We ensure `text` is a string\n  if (typeof text !== 'string') {\n    throw Abort()\n  }\n  text = text.toUpperCase()\n}\n```\n\n----------------------------------------\n\nTITLE: Using Telefunc without a transformer (TypeScript)\nDESCRIPTION: Demonstrates how to use Telefunc in a client environment with TypeScript support by importing types from the telefunc file and using them with the defineTelefunction method.\nSOURCE: https://github.com/brillout/telefunc/blob/main/docs/pages/install/+Page.mdx#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// TodoList.ts\n// Environment: client\n\nimport { defineTelefunction } from 'telefunc/client'\nimport type { onNewTodo as onNewTodoType } from './TodoList.telefunc.ts'\nconst onNewTodo = defineTelefunction<typeof onNewTodoType>('TodoList.telefunc.ts', 'onNewTodo')\n\nasync function onClick(form) {\n  const text = form.input.value\n  // Exactly as usual, including TypeScript support\n  await onNewTodo({ text })\n}\n```\n\n----------------------------------------\n\nTITLE: Client-Side Error Handling for Telefunc Calls\nDESCRIPTION: Shows how to catch and handle telefunction errors on the client side using try-catch blocks.\nSOURCE: https://github.com/brillout/telefunc/blob/main/docs/pages/error-handling/+Page.mdx#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- index.html -->\n<!-- Environment: client -->\n\n<html>\n  <body>\n    <script type=\"module\">\n      import { hello } from './hello.telefunc.js'\n\n      try {\n        await hello('Eva')\n        console.log(\"I'm never printed\")\n      } catch(err) {\n        console.log(err.message) // Prints 'Internal Server Error'\n        // E.g. show a popup \"Something went wrong. Try again (later).\"\n        // ...\n      }\n    </script>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Creating a Reusable getContext() Wrapper for Telefunc\nDESCRIPTION: Demonstrates how to implement a telefunction that uses a custom getUser() wrapper to centralize permission logic for reuse across multiple functions.\nSOURCE: https://github.com/brillout/telefunc/blob/main/docs/pages/permissions/+Page.mdx#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// components/TodoItem.telefunc.ts\n// Environment: server\n\nexport { onTextChange }\n\nimport { getUser } from '../auth/getUser'\n\nfunction onTextChange(id: string, text: string) {\n  const user = getUser()\n  /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Proper Error Handling in Telefunc (JavaScript)\nDESCRIPTION: This example demonstrates the correct usage of `throw Abort()` and `throw new Error()` in a Telefunc context wrapper. It shows how to handle different permissions and user states.\nSOURCE: https://github.com/brillout/telefunc/blob/main/docs/pages/abort-vs-error/+Page.mdx#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// auth/getUser.ts\n// Environment: server\n\n// Note that `auth/getUser.ts` is not a `.telefunc.js` file (`getUser()` is\n// not a telefunction but a so-called `getContext()` wrapper).\nexport { getUser }\n\nimport { Abort, getContext } from 'telefunc'\n\nfunction getUser({ permission }) {\n  if (!permission) {\n    throw new Error('Wrong getUser() usage: missing permission')\n  }\n  // We avoid typos (a typo like `admni` could have dramatic consequences)\n  if (!['public', 'admin'].includes(permission)) {\n    throw new Error('Wrong getUser() usage: unknown permission ' + permission)\n  }\n\n  const { user } = getContext()\n\n  if (!user) {\n    throw Abort()\n  }\n\n  if (permission === 'admin') {\n    if (!user.isAdmin) {\n      throw Abort()\n    }\n    return user\n  }\n\n  if (permission === 'public') {\n    return user\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting HTTP Headers for Telefunc Client Requests\nDESCRIPTION: Example of how to configure Telefunc client to send custom HTTP headers with each request. This is commonly used to send authentication tokens as Authorization headers.\nSOURCE: https://github.com/brillout/telefunc/blob/main/docs/pages/httpHeaders/+Page.mdx#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Environment: client\n\nimport { config } from 'telefunc/client'\n\nconfig.httpHeaders = {\n  Authorization: `Bearer ${token}`\n}\n```\n\n----------------------------------------\n\nTITLE: Using Abort for Expected Error Handling\nDESCRIPTION: Alternative approach to handling expected errors using Telefunc's Abort utility.\nSOURCE: https://github.com/brillout/telefunc/blob/main/docs/pages/error-handling/+Page.mdx#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { validate } from 'some-library'\nimport { Abort } from 'telefunc'\n\nfunction onFromSubmit(data) {\n  try {\n    validate(data)\n  } catch(err) {\n    throw Abort({\n      errorMessage: `Data is invalid: ${err.message}. Please enter valid data.`\n    })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Manual Shield Definition with TypeScript in Telefunc\nDESCRIPTION: Shows how to manually define shield() with TypeScript when automatic generation isn't available, while preserving type inference for function arguments.\nSOURCE: https://github.com/brillout/telefunc/blob/main/docs/pages/shield/+Page.mdx#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { shield } from 'telefunc'\n\nexport const onNewTodo = shield(\n  [shield.type.string],\n  async function (text) {\n    // ✅ TypeScript knows that `text` is of type `string`\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of getContext() Before Await\nDESCRIPTION: Demonstrates the correct pattern of calling getContext() before any await statements to ensure proper access to the context object.\nSOURCE: https://github.com/brillout/telefunc/blob/main/docs/pages/getContext/+Page.mdx#2025-04-18_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n// TodoList.telefunc.js\n\nexport async function myTelefunction() {\n  // ✅ Good: we call getContext() before `await`\n  const context = getContext()\n  await something()\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Cross-Domain Communication for Server\nDESCRIPTION: Sets up Telefunc URL on the server side when using different domains for frontend and backend. The server-side configuration always needs to be a URL pathname.\nSOURCE: https://github.com/brillout/telefunc/blob/main/docs/pages/telefuncUrl/+Page.mdx#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Environment: server\n\nimport { config } from 'telefunc'\n\n// The server-side value always needs to be a URL pathname (such as '/_telefunc')\nconfig.telefuncUrl = '/api/_telefunc'\n```\n\n----------------------------------------\n\nTITLE: React Component with Telefunction\nDESCRIPTION: Shows how to use telefunctions within a React component for data fetching.\nSOURCE: https://github.com/brillout/telefunc/blob/main/docs/pages/RPC/+Page.mdx#2025-04-18_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n// TodoList.jsx\n// Environment: client\n\nimport { onLoad } from './TodoList.telefunc.js'\n\nasync function TodoList() {\n  const todoItems = await onLoad()\n  return (\n    <ul>{ todoItems.map(item =>\n      <li>{ item.text }</li>\n    )}</ul>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Error Tracking with onBug in Telefunc\nDESCRIPTION: This snippet demonstrates how to use the onBug() function from Telefunc to track errors. The callback function receives the error object, which can then be sent to error tracking services like Sentry, Bugsnag, or Rollbar.\nSOURCE: https://github.com/brillout/telefunc/blob/main/docs/pages/onBug/+Page.mdx#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { onBug } from 'telefunc'\n\nonBug(err => {\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Todo Component with Telefunc Integration in TSX\nDESCRIPTION: A React component that implements a todo creation form with Telefunc integration for server communication. The component imports a Telefunc handler that is automatically transformed into an HTTP client. It includes a form with text input and submit button.\nSOURCE: https://github.com/brillout/telefunc/blob/main/docs/pages/index/CodePreviewBlockRight.mdx#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n// CreateTodo.tsx\n// Environment: client\n\n// CreateTodo.telefunc.ts isn't actually loaded;\n// Telefunc transforms it into a thin HTTP client.\nimport { onNewTodo } from './CreateTodo.telefunc.ts'\n\nasync function onClick(form) {\n  const text = form.input.value\n  // Behind the scenes, Telefunc makes an HTTP request\n  // to the server.\n  await onNewTodo(text)\n}\n\nfunction CreateTodo() {\n  return (\n    <form>\n      <input input=\"text\"></input>\n      <button onClick={onClick}>Add To-Do</button>\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Telefunc Files in Server Environment\nDESCRIPTION: Example of how to configure Telefunc by providing the list of .telefunc.js files and setting the root directory. This is necessary when not using Telefunc's transformer on the server-side.\nSOURCE: https://github.com/brillout/telefunc/blob/main/docs/pages/telefuncFiles/+Page.mdx#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Environment: server\n\nimport { config } from 'telefunc'\n\n// List of telefunc files\nconfig.telefuncFiles = [\n  require.resolve('./hello.telefunc.mjs')\n]\n\n// The root directory of the project\nconfig.root = __dirname\n```\n\n----------------------------------------\n\nTITLE: Integrating Telefunctions into React Components\nDESCRIPTION: Shows how to import and use a telefunction in a React component. The example demonstrates triggering the 'onMarkAllAsCompleted' telefunction when a button is clicked.\nSOURCE: https://github.com/brillout/telefunc/blob/main/docs/pages/event-based/+Page.mdx#2025-04-18_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n// TodoList.tsx\n// Environment: client\n\nimport { onMarkAllAsCompleted } from './TodoList.telefunc.ts'\n\nfunction TodoList() {\n  return <>\n    {/* ... */}\n    <button onClick={() => onMarkAllAsCompleted()}>\n      Mark all as completed\n    </button>\n  </>\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Telefunc Root Configuration in JavaScript\nDESCRIPTION: This snippet demonstrates how to set the root directory configuration for Telefunc. It imports the config object from Telefunc and sets the root to the current directory using __dirname. This configuration is necessary when using the config.telefuncFiles feature.\nSOURCE: https://github.com/brillout/telefunc/blob/main/docs/pages/root/+Page.mdx#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Environment: server\n\nimport { config } from 'telefunc'\n\n// Your project's root directory\nconfig.root = __dirname\n```\n\n----------------------------------------\n\nTITLE: Defining Global Context Type with TypeScript\nDESCRIPTION: Shows how to use TypeScript's module augmentation to globally define the type of the context object returned by getContext().\nSOURCE: https://github.com/brillout/telefunc/blob/main/docs/pages/getContext/+Page.mdx#2025-04-18_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\n// TelefuncContext.d.ts\n\nimport 'telefunc'\nimport type { User } from './User.ts'\n\ndeclare module 'telefunc' {\n  namespace Telefunc {\n    interface Context {\n      user: null | User\n    }\n  }\n}\n```\n\nLANGUAGE: ts\nCODE:\n```\n// User.ts\n\nexport type User = { id: number }\n```\n\nLANGUAGE: ts\nCODE:\n```\n// *.telefunc.ts\n\nimport { getContext } from 'telefunc'\n\nexport async function someTelefunction() {\n  // TypeScript knows that `user.id` is a `number`\n  const { user } = getContext()\n}\n```\n\n----------------------------------------\n\nTITLE: Using Telefunc without a transformer (JavaScript)\nDESCRIPTION: Shows how to use Telefunc in a client environment without TypeScript by manually defining telefunctions using the defineTelefunction method.\nSOURCE: https://github.com/brillout/telefunc/blob/main/docs/pages/install/+Page.mdx#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// TodoList.js\n// Environment: client\n\nimport { defineTelefunction } from 'telefunc/client'\nconst onNewTodo = defineTelefunction('TodoList.telefunc.js', 'onNewTodo')\n\nasync function onClick(form) {\n  const text = form.input.value\n  // Exactly as usual\n  await onNewTodo({ text })\n}\n```\n\n----------------------------------------\n\nTITLE: Using Telefunc Error Handling in a Telefunction (JavaScript)\nDESCRIPTION: This snippet shows how to use the `getUser()` wrapper in a telefunction, demonstrating the application of proper error handling techniques in a real-world scenario.\nSOURCE: https://github.com/brillout/telefunc/blob/main/docs/pages/abort-vs-error/+Page.mdx#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// components/Comment.telefunc.ts\n// Environment: server\n\nimport { getUser } from '../auth/getUser'\n\nexport async function onCommentDelete(id: number) {\n  // Only admins are allowed to delete a comment\n  const user = getUser({ permission: 'admin' })\n  const comment = await Comment.findOne({ id })\n  await comment.delete()\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Telefunc with Webpack\nDESCRIPTION: Shows how to set up the Telefunc webpack loader to transform *.telefunc.js files automatically in a webpack project.\nSOURCE: https://github.com/brillout/telefunc/blob/main/docs/pages/install/+Page.mdx#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// webpack.config.js\n\nmodule.exports = {\n  module: {\n    rules: [\n     { test: /\\.telefunc\\./, use: 'telefunc/webpack/loader' }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Bug Handling in Telefunc Server Function\nDESCRIPTION: Example showing how a bug in a telefunction (using undefined variable) results in an error that gets handled on the client side.\nSOURCE: https://github.com/brillout/telefunc/blob/main/docs/pages/error-handling/+Page.mdx#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// hello.telefunc.js\n// Environment: server\n\nexport { hello }\n\nfunction hello(name) {\n  // This telefunction has a bug: it should be `name` instead of `namee`\n  return 'Hello ' + namee\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Telefunc Shield in Development Environment\nDESCRIPTION: Configuration snippet showing how to enable shield() generation in development mode. This setting is server-side only and defaults to false. Enabling this may impact development performance.\nSOURCE: https://github.com/brillout/telefunc/blob/main/docs/pages/shield-config/+Page.mdx#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Environment: server\n\nimport { config } from 'telefunc'\n\nconfig.shield.dev = true\n```\n\n----------------------------------------\n\nTITLE: Configuring Telefunc in Express.js Server\nDESCRIPTION: This snippet shows how to import Telefunc's config and set server-side configurations in an Express.js server entry point. It demonstrates importing necessary modules, creating an Express app instance, and setting a custom configuration value for Telefunc.\nSOURCE: https://github.com/brillout/telefunc/blob/main/docs/components/ConfigWhereServer.mdx#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// /server/index.js\n// Environment: server\n\nimport express from 'express'\nimport { config } from 'telefunc'\n\nconst app = express()\n\n// Config values can be set here\nconfig.someServerSideSetting = 'some-value'\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of getContext() After Await\nDESCRIPTION: Shows an incorrect pattern where getContext() is called after an await operator, which will result in an error as context must be accessed before any await statements.\nSOURCE: https://github.com/brillout/telefunc/blob/main/docs/pages/getContext/+Page.mdx#2025-04-18_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n// TodoList.telefunc.js\n\nexport async function myTelefunction() {\n  await something()\n  // ❌ Bad: we should call getContext() before `await something()`\n  const context = getContext()\n}\n```\n\n----------------------------------------\n\nTITLE: Server-Side Error Handling in Telefunc Middleware\nDESCRIPTION: Example of handling telefunction errors at the server middleware level.\nSOURCE: https://github.com/brillout/telefunc/blob/main/docs/pages/error-handling/+Page.mdx#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// server.js\n\n// Server (Express.js/Fastify/...)\n\nimport { telefunc } from 'telefunc'\n\n// Telefunc middleware\napp.all('/_telefunc', async (req, res) => {\n  const httpResponse = await telefunc(/* ... */)\n  // Telefunc exposes any error thrown by a telefunction at httpResponse.err\n  if (httpResponse.err) {\n    // Our error handling\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: TypeScript Limitation with Named Functions in Shield\nDESCRIPTION: Demonstrates a limitation where TypeScript cannot infer types from shield() when using named functions, requiring alternative approaches.\nSOURCE: https://github.com/brillout/telefunc/blob/main/docs/pages/shield/+Page.mdx#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { shield } from 'telefunc'\n\nshield(onNewTodo, [shield.type.string])\n// TypeScript cannot infer the type of named functions by design.\nexport async function onNewTodo(text) {\n  // ❌ TypeScript doesn't know that `text` is of type `string`\n}\n```\n\n----------------------------------------\n\nTITLE: Database Integration Example\nDESCRIPTION: Demonstrates how to use telefunctions with ORM and SQL database operations.\nSOURCE: https://github.com/brillout/telefunc/blob/main/docs/pages/RPC/+Page.mdx#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// TodoList.telefunc.js\n// Environment: server\n\nexport { onLoad }\n\nasync function onLoad() {\n  // ORM\n  const todoItems = await Todo.findMany({ select: 'text' })\n  // SQL\n  const todoItems = await execute(\"SELECT text FROM todo_items;\")\n\n  return todoItems\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Expected Errors with Return Values\nDESCRIPTION: Example of handling expected validation errors by returning an error message object to the client.\nSOURCE: https://github.com/brillout/telefunc/blob/main/docs/pages/error-handling/+Page.mdx#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { validate } from 'some-library'\n\nfunction onFromSubmit(data) {\n  try {\n    validate(data)\n  } catch(err) {\n    return {\n      errorMessage: `Data is invalid: ${err.message}. Please enter valid data.`\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Generic Type Parameter with getContext()\nDESCRIPTION: Demonstrates how to directly specify the context type using a generic type parameter with getContext<T>() for local type definitions.\nSOURCE: https://github.com/brillout/telefunc/blob/main/docs/pages/getContext/+Page.mdx#2025-04-18_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\n// *.telefunc.ts\n\nimport { getContext } from 'telefunc'\n\ntype Context = {\n  userId: number\n}\n\nexport async function someTelefunction() {\n  // TypeScript knows that `userId` is a `number`\n  const { userId } = getContext<Context>()\n}\n```\n\n----------------------------------------\n\nTITLE: Telefunction Naming Convention Examples\nDESCRIPTION: Demonstrates recommended naming patterns for telefunctions, contrasting generic names with event-based alternatives. Shows how to name telefunctions that respond to specific user actions and data loading events.\nSOURCE: https://github.com/brillout/telefunc/blob/main/docs/pages/event-based/+Page.mdx#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n    TELEFUNCTION NAME\n    =================\n❌  # Generic telefunction:\n❌  updateTodoItem\n✅  # Telefunctions tailored to user events:\n✅  onTodoItemTextUpdate\n✅  onTodoItemCompleteToggle\n\n    # Fetching data:\n❌  loadData\n✅  onLoad\n✅  onPagination\n✅  onInfiniteScroll\n```\n\n----------------------------------------\n\nTITLE: Setting Telefunc Client-Side Configuration in JavaScript\nDESCRIPTION: Example of defining client-side configurations in Telefunc applications. This shows how to import the config object from 'telefunc/client' and set custom configuration values in a global client-side module that is always executed, such as a Vike /pages/+client.js file.\nSOURCE: https://github.com/brillout/telefunc/blob/main/docs/components/ConfigWhereClient.mdx#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// /pages/+client.js\n// Environment: client\n\nimport { config } from 'telefunc/client'\n\n// Config values can be set here\nconfig.someClientSideSetting = 'some-value'\n```\n\n----------------------------------------\n\nTITLE: Basic Telefunction Example\nDESCRIPTION: Demonstrates a basic server-side telefunction implementation that returns a welcome message.\nSOURCE: https://github.com/brillout/telefunc/blob/main/docs/pages/RPC/+Page.mdx#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// hello.telefunc.js\n// Environment: server\n\nexport { hello }\n\n// hello() always runs on the server-side\nasync function hello({ name }) {\n  const message = 'Welcome ' + name\n  return { message }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Telefunc Naming Convention\nDESCRIPTION: Code snippet showing how to disable the default telefunction naming convention using the Telefunc config object. This configuration must be done in a server environment.\nSOURCE: https://github.com/brillout/telefunc/blob/main/docs/pages/disableNamingConvention/+Page.mdx#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Environment: server\n\nimport { config } from 'telefunc'\n\nconfig.disableNamingConvention = true\n```\n\n----------------------------------------\n\nTITLE: Handling Network Connection Errors\nDESCRIPTION: Demonstrates how to detect and handle network connectivity issues in Telefunc client calls.\nSOURCE: https://github.com/brillout/telefunc/blob/main/docs/pages/error-handling/+Page.mdx#2025-04-18_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<!-- index.html -->\n<!-- Environment: client -->\n\n<html>\n  <body>\n    <script type=\"module\">\n      import { hello } from './hello.telefunc.js'\n\n      try {\n        await hello('Eva')\n      } catch(err) {\n        if (err.isConnectionError) {\n          // There is a network problem:\n          //  - the user isn't connected to the internet, or\n          //  - our server is down.\n          console.log(err.message) // Prints 'No Server Connection'\n        }\n      }\n    </script>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Configuring Cross-Domain Communication for Client\nDESCRIPTION: Sets up Telefunc URL on the client side when using different domains for frontend and backend. The client-side value can be a URL pathname, a full URL with origin, or an IP address.\nSOURCE: https://github.com/brillout/telefunc/blob/main/docs/pages/telefuncUrl/+Page.mdx#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Environment: client\n\nimport { config } from 'telefunc/client'\n\n// The client-side value can be:\n// - a URL pathname (such as '/_telefunc')\n// - a URL with origin (such as 'https://example.org/api/_telefunc')\n// - an IP address (such as '192.158.1.38')\nconfig.telefuncUrl = 'https://example.org/api/_telefunc'\n```\n\n----------------------------------------\n\nTITLE: Client-side Telefunction Usage\nDESCRIPTION: Shows how to consume a telefunction from the client-side using HTML and JavaScript.\nSOURCE: https://github.com/brillout/telefunc/blob/main/docs/pages/RPC/+Page.mdx#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<html>\n  <body>\n    <script type=\"module\">\n      // This import doesn't actually load the hello.telefunc.js file: Telefunc transforms\n      // hello.telefunc.js into a thin HTTP client.\n      import { hello } from './hello.telefunc.js'\n      // This thin HTTP client makes an HTTP request when the hello() function is called.\n      const { message } = await hello({ name: 'Eva' })\n      console.log(message) // Prints 'Welcome Eva'\n    </script>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Telefunction File Organization Best Practices\nDESCRIPTION: Illustrates the recommended approach for organizing telefunction files by collocating them with their corresponding UI component files. Shows proper and improper file naming and placement examples.\nSOURCE: https://github.com/brillout/telefunc/blob/main/docs/pages/event-based/+Page.mdx#2025-04-18_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n    FILES\n    ===============================\n    # UI Component\n    components/TodoItem.tsx\n    # Telefunction\n✅  components/TodoItem.telefunc.ts\n❌  db/todo.telefunc.ts\n\n    # UI Component\n    pages/edit/+Page.vue\n    # Telefunction\n✅  pages/edit/Page.telefunc.js\n❌  pages/edit/all.telefunc.js\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Error Handling in Telefunc (JavaScript)\nDESCRIPTION: This snippet shows an example of using `throw new Error()` instead of `throw Abort()` in a telefunction. It's used to illustrate the difference between the two approaches.\nSOURCE: https://github.com/brillout/telefunc/blob/main/docs/pages/abort-vs-error/+Page.mdx#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// TodoList.telefunc.js\n// Environment: server\n\nimport { getContext } from 'telefunc'\n\nexport async function getTodoList() {\n  const { user } = getContext()\n  if (!user) {\n    // Instead of `throw Abort()`\n    throw new Error()\n  }\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Telefunc to Cloudflare Workers\nDESCRIPTION: Command to deploy the telefunctions to Cloudflare Workers. Requires Cloudflare account setup and proper configuration in wrangler.toml.\nSOURCE: https://github.com/brillout/telefunc/blob/main/examples/cloudflare-workers/readme.md#2025-04-18_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm run deploy\n```\n\n----------------------------------------\n\nTITLE: Testing Cloudflare Worker Locally with Wrangler\nDESCRIPTION: Command to preview the Cloudflare Worker locally using Wrangler CLI tool. Requires a Cloudflare account with the account ID configured in wrangler.toml.\nSOURCE: https://github.com/brillout/telefunc/blob/main/examples/cloudflare-workers/readme.md#2025-04-18_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run preview:wrangler\n```\n\n----------------------------------------\n\nTITLE: Testing Cloudflare Worker Locally with Miniflare\nDESCRIPTION: Command to preview the Cloudflare Worker locally using Miniflare, which doesn't require a Cloudflare account.\nSOURCE: https://github.com/brillout/telefunc/blob/main/examples/cloudflare-workers/readme.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run preview\n```\n\n----------------------------------------\n\nTITLE: Cloning and Running Telefunc SvelteKit Example\nDESCRIPTION: Commands to clone the Telefunc repository, navigate to the SvelteKit example directory, install dependencies, and run the development server.\nSOURCE: https://github.com/brillout/telefunc/blob/main/examples/svelte-kit/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:brillout/telefunc\ncd telefunc/examples/svelte-kit/\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Using Vike's onBeforeRender Hook for Data Fetching\nDESCRIPTION: A reference to Vike's onBeforeRender() hook that allows fetching initial data directly from a database. This is presented as an alternative to using Telefunc for initial data fetching.\nSOURCE: https://github.com/brillout/telefunc/blob/main/docs/pages/vike/+Page.mdx#2025-04-18_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nonBeforeRender()\n```\n\n----------------------------------------\n\nTITLE: Setting up Telefunc with Vite and Vike\nDESCRIPTION: This bash script demonstrates how to clone the Telefunc repository, navigate to the Vike example, install dependencies, and start the development server.\nSOURCE: https://github.com/brillout/telefunc/blob/main/examples/vike/readme.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:brillout/telefunc\ncd telefunc/examples/vike/\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Setting up Telefunc with Vite, Vike, and React-Streaming\nDESCRIPTION: Commands to clone the Telefunc repository, navigate to the react-streaming example directory, install dependencies, and start the development server.\nSOURCE: https://github.com/brillout/telefunc/blob/main/examples/react-streaming/readme.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:brillout/telefunc\ncd telefunc/examples/react-streaming/\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Cloning and Running Telefunc React Native Example\nDESCRIPTION: Commands to clone the Telefunc repository, navigate to the React Native example directory, install dependencies, and start the application.\nSOURCE: https://github.com/brillout/telefunc/blob/main/examples/react-native/readme.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:brillout/telefunc\ncd telefunc/examples/react-native/\nnpm install\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Building Telefunc from Source Code\nDESCRIPTION: Command to build Telefunc from source code for use in the React Native example project. This is necessary because symlinks don't work with Metro bundler.\nSOURCE: https://github.com/brillout/telefunc/blob/main/examples/react-native/readme.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build:telefunc\n```\n\n----------------------------------------\n\nTITLE: Cloning and Running Telefunc Babel Example\nDESCRIPTION: Terminal commands to clone the Telefunc repository, navigate to the Babel example directory, install dependencies, and start the application.\nSOURCE: https://github.com/brillout/telefunc/blob/main/examples/babel/readme.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:brillout/telefunc\ncd telefunc/examples/babel/\nnpm install\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Telefunc To-Do Example\nDESCRIPTION: Command sequence to clone the Telefunc repository, navigate to the React To-Do list example directory, install dependencies, and start the development server.\nSOURCE: https://github.com/brillout/telefunc/blob/main/examples/authentication/readme.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:brillout/telefunc\ncd telefunc/examples/todo-list-react/\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Setting up Telefunc Cloudflare Workers Example\nDESCRIPTION: Commands to clone the telefunc repository and install dependencies for the Cloudflare Workers example.\nSOURCE: https://github.com/brillout/telefunc/blob/main/examples/cloudflare-workers/readme.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:brillout/telefunc\ncd telefunc/examples/cloudflare-workers/\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Running Telefunc Tests\nDESCRIPTION: Commands for running different types of tests in the Telefunc project, including end-to-end tests, unit tests, and type checking.\nSOURCE: https://github.com/brillout/telefunc/blob/main/CONTRIBUTING.md#2025-04-18_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n# At the monorepo root\n\n# Run the end-to-end tests (`/**/*.test.js`)\npnpm exec test-e2e\n# Run the unit tests (`/**/*.spec.js`)\npnpm exec vitest\n# Typecheck all `.ts` files\npnpm exec test-types\n```\n\n----------------------------------------\n\nTITLE: Importing Telefunc Next.js Documentation Components\nDESCRIPTION: JSX imports for documentation components used in explaining Telefunc integration with Next.js. Includes navigation links and custom components for mutation explanations.\nSOURCE: https://github.com/brillout/telefunc/blob/main/docs/pages/next/+Page.mdx#2025-04-18_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Link, RepoLink } from '@brillout/docpress'\nimport { MostlyMutations } from '../../components'\n```\n\n----------------------------------------\n\nTITLE: Cloning and Installing Telefunc Repository\nDESCRIPTION: Commands for cloning the Telefunc repository from GitHub and installing dependencies using pnpm. This is the first step for contributing to the project.\nSOURCE: https://github.com/brillout/telefunc/blob/main/CONTRIBUTING.md#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone git@github.com:brillout/telefunc\n# Go to the monorepo root\ncd telefunc/\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Importing and Using React Components for Documentation in Telefunc Project\nDESCRIPTION: This code imports components from documentation libraries and renders the MostlyMutations component with configuration for linking to different framework documentation pages about initial data handling.\nSOURCE: https://github.com/brillout/telefunc/blob/main/docs/pages/initial-data/+Page.mdx#2025-04-18_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport { Link } from '@brillout/docpress'\nimport { MostlyMutations } from '../../components'\n\n<MostlyMutations\n  toolName=\"our framework\"\n  builtInMechanism={\n    <>\n      See:\n      <ul>\n        <li>\n          <Link href=\"/next#initial-data\" />\n        </li>\n        <li>\n          <Link href=\"/svelte-kit#initial-data\" />\n        </li>\n        <li>\n          <Link href=\"/vike#initial-data\" />\n        </li>\n      </ul>\n    </>\n  }\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Example Component in JavaScript/React\nDESCRIPTION: Imports the Example component from a relative path, which is used to display a Remix integration example with Telefunc.\nSOURCE: https://github.com/brillout/telefunc/blob/main/docs/pages/remix/+Page.mdx#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Example } from '../../components'\n```\n\n----------------------------------------\n\nTITLE: Running Tests for Specific Examples\nDESCRIPTION: Commands demonstrating how to run tests for a specific example or boilerplate, either by changing to the example directory or by providing a path substring.\nSOURCE: https://github.com/brillout/telefunc/blob/main/CONTRIBUTING.md#2025-04-18_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncd examples/some-example/ && pnpm exec test-e2e\n# Altenertively: provide a substring of the path\npnpm exec test-e2e ome-exampl # At the monorepo root\n```\n\n----------------------------------------\n\nTITLE: Importing RepoLink Component\nDESCRIPTION: Import statement for RepoLink component from docpress package used for documentation purposes.\nSOURCE: https://github.com/brillout/telefunc/blob/main/docs/pages/react-native/+Page.mdx#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { RepoLink } from '@brillout/docpress'\n```\n\n----------------------------------------\n\nTITLE: Running an Example Project\nDESCRIPTION: Commands for navigating to an example directory and running it, typically using the development script defined in the example's package.json.\nSOURCE: https://github.com/brillout/telefunc/blob/main/CONTRIBUTING.md#2025-04-18_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ncd examples/some-example/\n# See package.json#scripts, e.g. package.json#scripts['dev']:\npnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Building Telefunc Source Code\nDESCRIPTION: Command to build Telefunc's source code from the monorepo root directory using pnpm.\nSOURCE: https://github.com/brillout/telefunc/blob/main/CONTRIBUTING.md#2025-04-18_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# At the monorepo root\npnpm run build\n```\n\n----------------------------------------\n\nTITLE: Developing Telefunc\nDESCRIPTION: Command to run the development environment for Telefunc from the monorepo root.\nSOURCE: https://github.com/brillout/telefunc/blob/main/CONTRIBUTING.md#2025-04-18_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n# At the monorepo root\npnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Running Telefunc Development Server with Express.js\nDESCRIPTION: Command to start a development server using Express.js for faster development instead of using a worker directly.\nSOURCE: https://github.com/brillout/telefunc/blob/main/examples/cloudflare-workers/readme.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Importing Link Component from @brillout/docpress\nDESCRIPTION: Imports the Link component from the @brillout/docpress package, which is used for creating documentation links within a documentation site.\nSOURCE: https://github.com/brillout/telefunc/blob/main/docs/pages/babel-plugin/+Page.mdx#2025-04-18_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Link } from '@brillout/docpress'\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry Links\nDESCRIPTION: Markdown links to version comparison views between releases on GitHub\nSOURCE: https://github.com/brillout/telefunc/blob/main/CHANGELOG.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[0.2.3](https://github.com/brillout/telefunc/compare/v0.2.2...v0.2.3)\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry Headers\nDESCRIPTION: Markdown headers denoting version numbers and release dates\nSOURCE: https://github.com/brillout/telefunc/blob/main/CHANGELOG.md#2025-04-18_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## [0.2.3](https://github.com/brillout/telefunc/compare/v0.2.2...v0.2.3) (2025-04-04)\n```\n\n----------------------------------------\n\nTITLE: Changelog Categories\nDESCRIPTION: Markdown section headers for different types of changes\nSOURCE: https://github.com/brillout/telefunc/blob/main/CHANGELOG.md#2025-04-18_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n### Bug Fixes\n### Features\n### BREAKING CHANGES\n```"
  }
]