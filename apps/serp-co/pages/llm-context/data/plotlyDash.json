[
  {
    "owner": "plotly",
    "repo": "dash",
    "content": "TITLE: Accessing Callback Context in Dash\nDESCRIPTION: Code snippet demonstrating how to access callback context to determine which inputs triggered a callback and access input/state values by name.\nSOURCE: https://github.com/plotly/dash/blob/dev/CHANGELOG.md#2025-04-21_snippet_26\n\nLANGUAGE: python\nCODE:\n```\n# Determine which inputs triggered the callback\ntriggered_inputs = dash.callback_context.triggered\n\n# Access input/state values by name\nbutton_clicks = dash.callback_context.states.get('btn.n_clicks')\n```\n\n----------------------------------------\n\nTITLE: Implementing Dash Callbacks with Auto-generated IDs\nDESCRIPTION: Demonstrates the new callback syntax that allows using component instances directly instead of ID strings, with auto-generated IDs if not supplied explicitly.\nSOURCE: https://github.com/plotly/dash/blob/dev/CHANGELOG.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nmy_input = dcc.Input()\nmy_output = html.Div()\napp.layout = html.Div([my_input, my_output])\n\n@dash.callback(Output(my_output, 'children'), Input(my_input, 'value'))\ndef update(value):\n    return f'You have entered {value}'\n```\n\n----------------------------------------\n\nTITLE: Using Patch Operations for Efficient Updates\nDESCRIPTION: Shows how to use patch operators to efficiently update portions of larger data structures without sending the entire object. This is particularly useful for optimizing performance when working with large datasets.\nSOURCE: https://github.com/plotly/dash/blob/dev/CHANGELOG.md#2025-04-21_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nfrom dash import Patch\n\n@app.callback(\n    Output('graph-data', 'figure'),\n    Input('update-button', 'n_clicks')\n)\ndef update_graph_partially(n_clicks):\n    if not n_clicks:\n        return dash.no_update\n    \n    # Create a Patch object\n    patched_figure = Patch()\n    \n    # Update only specific parts of the figure\n    patched_figure['data'][0]['y'] = [new_values]\n    patched_figure['layout']['title'] = 'Updated Title'\n    \n    return patched_figure\n```\n\n----------------------------------------\n\nTITLE: Setting Component Properties with set_props in Callbacks\nDESCRIPTION: Demonstrates how to use set_props to update component properties during callback execution. This allows for updating multiple components, even those not defined in the callback's Output.\nSOURCE: https://github.com/plotly/dash/blob/dev/CHANGELOG.md#2025-04-21_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nfrom dash import callback_context\n\n@app.callback(\n    Output('output-id', 'children'),\n    Input('input-id', 'value')\n)\ndef update_output(value):\n    # Update a component not in the Output\n    callback_context.set_props({\n        'another-component-id': {'property': 'new value'}\n    })\n    \n    # Can be called multiple times\n    callback_context.set_props({\n        'yet-another-id': {'property': 'another value'}\n    })\n    \n    return f\"Input value: {value}\"\n```\n\n----------------------------------------\n\nTITLE: Using the Error Handler for Dash Callbacks\nDESCRIPTION: Demonstrates how to implement error handling for Dash callbacks. The error handler can be defined globally or per callback and receives the exception as its first argument. It can return output values or None for no_update.\nSOURCE: https://github.com/plotly/dash/blob/dev/CHANGELOG.md#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n# Global error handler on app initialization\napp = Dash(__name__, on_callback_error=global_error_handler)\n\n# Per-callback error handler\n@app.callback(\n    Output('output-id', 'children'),\n    Input('input-id', 'value'),\n    on_error=callback_specific_error_handler\n)\ndef update_output(value):\n    # function body\n    pass\n\n# Error handler function receives the exception\ndef error_handler(error):\n    # Can return output values or None for no_update\n    # Access to original callback context is preserved\n    # set_props works inside the error handler\n    return f\"An error occurred: {error}\"\n```\n\n----------------------------------------\n\nTITLE: Defining Dash Callbacks\nDESCRIPTION: Adds interactivity to Dash applications using both server-side and client-side callbacks. Server-side callbacks use Python functions while client-side callbacks use JavaScript. Both types connect inputs and outputs through component properties.\nSOURCE: https://github.com/plotly/dash/blob/dev/MAKE_A_NEW_BACK_END.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@app.callback(Output(...), Input(...), Input(...), State(...), ...)\ndef my_callback(input1, input2, state):\n    <do stuff>\n    return my_output_value\n\napp.clientside_callback(\n    \"<JavaScript function as a string or reference>\",\n    Output(...), Input(...), Input(...), State(...), ...\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Dash Hooks in Python\nDESCRIPTION: Shows how to use the new hook-based extension system for Dash. These hooks allow packages to extend Dash functionality through entry points and provide ways to modify layouts, add callbacks, and customize app behavior.\nSOURCE: https://github.com/plotly/dash/blob/dev/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n# In setup.py - define entry points\nentry_points={\n    'dash-hooks': ['module_name = package.module']\n}\n\n# Using hooks in Python\ndash.hooks.layout  # takes and returns a layout\ndash.hooks.callback  # defines a callback\ndash.hooks.clientside_callback  # defines a clientside callback\ndash.hooks.setup  # called before app start with app instance\ndash.hooks.error  # receives callback errors\ndash.hooks.index  # changes Dash.index_string\ndash.hooks.route  # adds a Flask route\n```\n\n----------------------------------------\n\nTITLE: Accessing Callback Context in Clientside Callbacks\nDESCRIPTION: Shows how to access the callback context in clientside callbacks. The window.dash_clientside.callback_context object provides information about the callback's outputs, inputs, and state.\nSOURCE: https://github.com/plotly/dash/blob/dev/CHANGELOG.md#2025-04-21_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nwindow.dash_clientside.my_namespace = {\n    my_clientside_function: function(input_value) {\n        // Access the callback context\n        const context = window.dash_clientside.callback_context;\n        \n        // Access outputs_list property\n        const outputs = context.outputs_list;\n        \n        // Other available properties\n        const triggered = context.triggered;\n        const inputs = context.inputs;\n        const states = context.states;\n        \n        return some_result;\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Accessing Redux Store via dash_component_api Methods\nDESCRIPTION: Shows how to access the Dash app's Redux store using the dash_component_api methods. These methods provide alternatives to removed _dashprivate props and allow components to interact with the Dash context.\nSOURCE: https://github.com/plotly/dash/blob/dev/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ndash_component_api.useDashContext\ndash_component_api.DashContext\n\n// Context properties and methods\nDashContext.componentPath\nDashContext.useLoading(options?)\nDashContext.isLoading\nDashContext.useSelector\nDashContext.useStore\nDashContext.useDispatch\n\n// Layout access method\ndash_component_api.getLayout(path)\n```\n\n----------------------------------------\n\nTITLE: Creating an Interactive DataTable with Dash and Pandas\nDESCRIPTION: This snippet demonstrates how to create a basic interactive DataTable using Dash and pandas. It loads data from a CSV file, creates a Dash application, and renders the data in a DataTable component.\nSOURCE: https://github.com/plotly/dash/blob/dev/components/dash-table/README.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom dash import Dash, dash_table\nimport pandas as pd\n\ndf = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/solar.csv')\n\napp = Dash(__name__)\n\napp.layout = dash_table.DataTable(\n    id='table',\n    columns=[{\"name\": i, \"id\": i} for i in df.columns],\n    data=df.to_dict('records'),\n)\n\nif __name__ == '__main__':\n    app.run(debug=True)\n```\n\n----------------------------------------\n\nTITLE: Enabling MathJax Support in Dash Components\nDESCRIPTION: Example of enabling MathJax support for math rendering in dcc.Markdown and dcc.Graph components. MathJax can be enabled by setting the mathjax prop to True, allowing for LaTeX math notation rendering.\nSOURCE: https://github.com/plotly/dash/blob/dev/CHANGELOG.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# For dcc.Markdown component\ndcc.Markdown(\"$E=mc^2$\", mathjax=True)\n\n# For dcc.Graph component\ndcc.Graph(figure=fig, mathjax=True)\n```\n\n----------------------------------------\n\nTITLE: Simplified DataTable Implementation\nDESCRIPTION: Shows the new simplified DataTable syntax with automatic column inference from data.\nSOURCE: https://github.com/plotly/dash/blob/dev/CHANGELOG.md#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\ndash_table.DataTable(data=df.to_dict('records'))\n```\n\n----------------------------------------\n\nTITLE: Simplified Dropdown Component Usage\nDESCRIPTION: Shows the new simplified syntax for Dropdown components with flexible types for options and values.\nSOURCE: https://github.com/plotly/dash/blob/dev/CHANGELOG.md#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\ndcc.Dropdown(['New York', 'Montreal'], 'New York')\n```\n\nLANGUAGE: python\nCODE:\n```\ndcc.Dropdown({'NYC': 'New York', 'MTL': 'Montreal'}, 'New York')\n```\n\n----------------------------------------\n\nTITLE: Using Data and ARIA Attributes in Dash HTML Components\nDESCRIPTION: Demonstrates how to add aria-* and data-* attributes to Dash HTML components using dictionary expansion syntax.\nSOURCE: https://github.com/plotly/dash/blob/dev/CHANGELOG.md#2025-04-21_snippet_30\n\nLANGUAGE: python\nCODE:\n```\nhtml.Div(id=\"my-div\", **{\"data-toggle\": \"toggled\", \"aria-toggled\": \"true\"})\n```\n\n----------------------------------------\n\nTITLE: Using Walrus Operator with Dash Callbacks\nDESCRIPTION: Shows how to use Python 3.8's walrus operator (:=) to define and reference components inline within the layout definition.\nSOURCE: https://github.com/plotly/dash/blob/dev/CHANGELOG.md#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\napp.layout = html.Div([\n    my_input := dcc.Input(),\n    my_output := html.Div()\n])\n\n@dash.callback(Output(my_output, 'children'), Input(my_input, 'value'))\ndef update(value):\n    return f'You have entered {value}'\n```\n\n----------------------------------------\n\nTITLE: Modifying Flask Response with Custom Headers\nDESCRIPTION: Code snippet showing how to add custom cookies or headers to the Flask response object using the callback_context.response property in Dash.\nSOURCE: https://github.com/plotly/dash/blob/dev/CHANGELOG.md#2025-04-21_snippet_27\n\nLANGUAGE: python\nCODE:\n```\n# Adding custom cookies or headers to the response\ndash.callback_context.response\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Package Dependencies\nDESCRIPTION: Defines required Python packages and version constraints needed to run a Dash/Plotly application. Includes core web framework dependencies (Flask, Werkzeug), visualization library (Plotly), and utility packages for Python compatibility and functionality.\nSOURCE: https://github.com/plotly/dash/blob/dev/requirements/install.txt#2025-04-21_snippet_0\n\nLANGUAGE: plain text\nCODE:\n```\nFlask>=1.0.4,<3.1\nWerkzeug<3.1\nplotly>=5.0.0\nimportlib-metadata\ntyping_extensions>=4.1.1\nrequests\nretrying\nnest-asyncio\nsetuptools\n```\n\n----------------------------------------\n\nTITLE: Demonstrating PreventUpdate in Dash Clientside Functions\nDESCRIPTION: Shows how to prevent updates in clientside functions by throwing a PreventUpdate exception or returning a no_update value.\nSOURCE: https://github.com/plotly/dash/blob/dev/CHANGELOG.md#2025-04-21_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nthrow window.dash_clientside.PreventUpdate;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nreturn window.dash_clientside.no_update\n```\n\n----------------------------------------\n\nTITLE: Running the Dash Server\nDESCRIPTION: Starts the web server that hosts the Dash application. The run_server method accepts various options that control how the server operates, including development tools and performance settings.\nSOURCE: https://github.com/plotly/dash/blob/dev/MAKE_A_NEW_BACK_END.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\napp.run_server(...)\n```\n\n----------------------------------------\n\nTITLE: Enabling Persistence in Dash Components\nDESCRIPTION: Demonstrates how to enable prop persistence in Dash components by setting the persistence, persisted_props, and persistence_type props.\nSOURCE: https://github.com/plotly/dash/blob/dev/CHANGELOG.md#2025-04-21_snippet_22\n\nLANGUAGE: python\nCODE:\n```\npersistence=True\n```\n\n----------------------------------------\n\nTITLE: Enabling Undo/Redo Toolbar in Dash\nDESCRIPTION: Code snippet showing how to enable the undo/redo toolbar functionality when initializing a Dash application.\nSOURCE: https://github.com/plotly/dash/blob/dev/CHANGELOG.md#2025-04-21_snippet_25\n\nLANGUAGE: python\nCODE:\n```\napp=Dash(show_undo_redo=true)\n```\n\n----------------------------------------\n\nTITLE: Running Pytest for Dash Tests\nDESCRIPTION: This snippet demonstrates how to run Pytest for Dash tests, including running all tests, specific directories, or filtering by test case name.\nSOURCE: https://github.com/plotly/dash/blob/dev/CONTRIBUTING.md#2025-04-21_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test\npytest tests/unit\npytest -k cbcx004\npytest -k cbcx\n```\n\n----------------------------------------\n\nTITLE: Relative Path Functions in Dash\nDESCRIPTION: New utility functions added to Dash for handling relative paths and asset URLs without requiring direct app object access.\nSOURCE: https://github.com/plotly/dash/blob/dev/CHANGELOG.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ndash.get_relative_path\ndash.strip_relative_path\ndash.get_asset_url\n```\n\n----------------------------------------\n\nTITLE: Specifying Dependencies for DiskcacheLongCallbackManager in Dash\nDESCRIPTION: This snippet specifies the minimum required versions of three Python packages needed by the DiskcacheLongCallbackManager in Dash: diskcache, multiprocess, and psutil. These packages are essential for handling disk-based caching, multiprocessing, and system utilization monitoring respectively.\nSOURCE: https://github.com/plotly/dash/blob/dev/requirements/diskcache.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ndiskcache>=5.2.1\nmultiprocess>=0.70.12\npsutil>=5.8.0\n```\n\n----------------------------------------\n\nTITLE: Using new Download component in Dash Core Components (Python)\nDESCRIPTION: Example of using the new Download component and utility functions for sending files, DataFrames, bytes and strings.\nSOURCE: https://github.com/plotly/dash/blob/dev/CHANGELOG.md#2025-04-21_snippet_17\n\nLANGUAGE: Python\nCODE:\n```\nimport dash_core_components as dcc\n\ndcc.Download(id='download')\n\n# In a callback:\ndcc.send_file('/path/to/file')\ndcc.send_data_frame(df.to_csv, 'myfile.csv')\ndcc.send_bytes(b'content', 'myfile.txt')\ndcc.send_string('content', 'myfile.txt')\n```\n\n----------------------------------------\n\nTITLE: Defining Dependencies for Dash CeleryLongCallbackManager\nDESCRIPTION: Specifies the minimum version requirements for Redis and Celery packages needed by the CeleryLongCallbackManager in Dash. Redis 3.5.3 or newer is required as a message broker, and Celery 5.1.2 or newer with Redis integration is needed for task processing.\nSOURCE: https://github.com/plotly/dash/blob/dev/requirements/celery.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nredis>=3.5.3\ncelery[redis]>=5.1.2\n```\n\n----------------------------------------\n\nTITLE: Simplified Slider Component Implementation\nDESCRIPTION: Demonstrates the new simplified syntax for Slider components with automatic step calculation and mark generation.\nSOURCE: https://github.com/plotly/dash/blob/dev/CHANGELOG.md#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\ndcc.Slider(1, 3, 1)\n```\n\nLANGUAGE: python\nCODE:\n```\ndcc.Slider(0, 100)\n```\n\n----------------------------------------\n\nTITLE: Creating Textarea Component in Dash\nDESCRIPTION: Implementation of the new Textarea component in Dash for displaying multiline text content. The component's value can be controlled through the value property.\nSOURCE: https://github.com/plotly/dash/blob/dev/components/dash-core-components/CHANGELOG.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndcc.Textarea(id='my-text-area' value='''\nSELECT * FROM MY_TABLES\nLIMIT 10;\n''')\n```\n\n----------------------------------------\n\nTITLE: Using Improved Callback Context in Dash 2.4.0+\nDESCRIPTION: Examples of using the improved callback context features added in Dash 2.4.0, including the more concise dash.ctx name and new properties like triggered_id and args_grouping for accessing callback information.\nSOURCE: https://github.com/plotly/dash/blob/dev/CHANGELOG.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n# Using the more concise dash.ctx instead of dash.callback_context\nfrom dash import ctx\n\n# Getting the id of the component that triggered the callback\ntriggered_id = ctx.triggered_id\n\n# Getting a dictionary of the component ids and props that triggered the callback\ntriggered_props = ctx.triggered_prop_ids\n\n# Accessing grouped arguments when using flexible callback signatures\nargs = ctx.args_grouping\n```\n\n----------------------------------------\n\nTITLE: Disabling Local Assets Serving in Dash\nDESCRIPTION: Code snippet demonstrating how to configure Dash to serve JavaScript assets from CDN instead of locally by setting the serve_locally property to False.\nSOURCE: https://github.com/plotly/dash/blob/dev/CHANGELOG.md#2025-04-21_snippet_24\n\nLANGUAGE: python\nCODE:\n```\napp.scripts.config.serve_locally = False\n```\n\n----------------------------------------\n\nTITLE: Enabling Dev Tools in Dash Application\nDESCRIPTION: Code snippet showing how to enable the Dev Tools UI and property validation in a Dash application using configuration flags in the run_server method.\nSOURCE: https://github.com/plotly/dash/blob/dev/CHANGELOG.md#2025-04-21_snippet_23\n\nLANGUAGE: python\nCODE:\n```\napp.run_server(dev_tools_props_check=True, dev_tools_ui=True)\n```\n\n----------------------------------------\n\nTITLE: Using disabled_days prop in DatePicker components (JavaScript)\nDESCRIPTION: New 'disabled_days' prop for DatePickerRange and DatePickerSingle to specify unselectable days.\nSOURCE: https://github.com/plotly/dash/blob/dev/CHANGELOG.md#2025-04-21_snippet_18\n\nLANGUAGE: JavaScript\nCODE:\n```\n<DatePickerRange\n  disabled_days={[new Date(2021, 3, 1), new Date(2021, 3, 2)]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Setting Dash Application Layout\nDESCRIPTION: Defines the UI structure of the Dash application using nested Dash components. The layout property determines what will be displayed in the browser.\nSOURCE: https://github.com/plotly/dash/blob/dev/MAKE_A_NEW_BACK_END.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\napp.layout = html.Div(...)\n```\n\n----------------------------------------\n\nTITLE: Initializing a Dash Application in Python\nDESCRIPTION: Creates a new Dash application instance. The constructor accepts various configuration options that control the behavior and features of the application.\nSOURCE: https://github.com/plotly/dash/blob/dev/MAKE_A_NEW_BACK_END.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom dash import Dash\napp = Dash(...)\n```\n\n----------------------------------------\n\nTITLE: Using External Plotly.js Script\nDESCRIPTION: Example URL for including strict bundle of Plotly.js as an external script in Dash for CSP compliance.\nSOURCE: https://github.com/plotly/dash/blob/dev/CHANGELOG.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nhttps://cdn.plot.ly/plotly-strict-2.11.0.min.js\n```\n\n----------------------------------------\n\nTITLE: Disabling Default Viewport Meta Tag in Dash\nDESCRIPTION: Example of how to disable the default viewport meta tag that was added in Dash 2.5.0. This code demonstrates providing an empty viewport meta tag to the Dash application constructor.\nSOURCE: https://github.com/plotly/dash/blob/dev/CHANGELOG.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\napp = Dash(meta_tags=[{\"name\": \"viewport\"}])\n```\n\n----------------------------------------\n\nTITLE: Specifying Dash CI Dependencies with Version Requirements\nDESCRIPTION: A comprehensive list of Python packages with their version constraints used for Continuous Integration testing of the Plotly Dash project. Includes testing tools, code quality checkers, and data processing libraries.\nSOURCE: https://github.com/plotly/dash/blob/dev/requirements/ci.txt#2025-04-21_snippet_0\n\nLANGUAGE: plain\nCODE:\n```\nblack==22.3.0\nflake8==7.0.0\nflaky==3.8.1\nflask-talisman==1.0.0\nipython<9.0.0\nmimesis<=11.1.0\nmock==4.0.3\nnumpy<=1.26.3\norjson==3.10.3\nopenpyxl\npandas>=1.4.0\npyarrow\npylint==3.0.3\npytest-mock\npytest-sugar==0.9.6\npyzmq==25.1.2\nxlrd>=2.0.1\npytest-rerunfailures\njupyterlab<4.0.0\npyright==1.1.398;python_version>=\"3.7\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Graph Component in Python\nDESCRIPTION: Example showing how to configure a Dash Graph component with custom mode bar buttons and editable properties\nSOURCE: https://github.com/plotly/dash/blob/dev/components/dash-core-components/CHANGELOG.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport dash\nimport dash_core_components as dcc\nimport dash_html_components as html\n\napp = dash.Dash()\n\napp.layout = html.Div([\n    dcc.Graph(\n        id='my-graph',\n        figure={'data': [{'x': [1, 2, 3]}]},\n        config={'editable': True, 'modeBarButtonsToRemove': ['pan2d', 'lasso2d']}\n    )\n])\n\nif __name__ == '__main__':\n    app.run_server(debug=True)\n```\n\n----------------------------------------\n\nTITLE: Adding extra hot reload paths in Dash constructor (Python)\nDESCRIPTION: New Dash constructor argument 'extra_hot_reload_paths' allows re-initializing Python code when non-Python files change.\nSOURCE: https://github.com/plotly/dash/blob/dev/CHANGELOG.md#2025-04-21_snippet_16\n\nLANGUAGE: Python\nCODE:\n```\napp = dash.Dash(__name__, extra_hot_reload_paths=['/path/to/non/python/file'])\n```\n\n----------------------------------------\n\nTITLE: CSS Selectors for Styling Dash Table Components\nDESCRIPTION: Demonstrates CSS selectors and classes available for styling dash-table components. Shows how to target specific columns and style various table elements using data attributes and predefined classes.\nSOURCE: https://github.com/plotly/dash/blob/dev/components/dash-table/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.dash-cell,\n.dash-header {\n    &[data-dash-column='ticker'] {\n        // styling\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Percentage-Based Column Width in Dash Table\nDESCRIPTION: Shows how to configure a dash-table to use percentage-based column widths by setting content_style to 'grow', defining table styles, and specifying percentage values for column width.\nSOURCE: https://github.com/plotly/dash/blob/dev/components/dash-table/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncontent_style='grow'\n\ntable_style=[{ selector: '.dash-spreadsheet', rule: 'width: 100%; max-width: 100%' }]\n\ncolumns=[{\n    id: 'column',\n    width: '40%'\n}]\n```\n\n----------------------------------------\n\nTITLE: Installing Dash Core Components for Development\nDESCRIPTION: Instructions for installing Dash and its core components in development mode with extras. This process includes setting up a virtual environment, installing dependencies, and building the project.\nSOURCE: https://github.com/plotly/dash/blob/dev/components/dash-core-components/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# It's recommended to install your python packages in a virtualenv\n# As of dash 2.0, python 3 is required\n$ python -m venv venv && . venv/bin/activate\n\n# make sure dash is installed with dev and testing dependencies\n$ pip install -e .[dev,testing]  # in some shells you need \\ to escape []\n\n# run the build process - this will build all of dash, including dcc\n$ npm ci && npm run build\n\n# install dcc in editable mode\n$ pip install -e .\n```\n\n----------------------------------------\n\nTITLE: Dash HTML Template Structure in Python\nDESCRIPTION: Basic structure of the HTML template used for rendering Dash applications. It includes placeholders for configuration, scripts, and renderer initialization.\nSOURCE: https://github.com/plotly/dash/blob/dev/MAKE_A_NEW_BACK_END.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"<!DOCTYPE html>\n<html>\n    <head>\n        {%metas%}\n        <title>{%title%}</title>\n        {%favicon%}\n        {%css%}\n    </head>\n    <body>\n        {%app_entry%}\n        <footer>\n            {%config%}\n            {%scripts%}\n            {%renderer%}\n        </footer>\n    </body>\n</html>\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Setting React Version in Dash Renderer\nDESCRIPTION: Code to configure which React version (15.4.2 or 16.2.0) to use with dash_renderer before initializing the Dash application.\nSOURCE: https://github.com/plotly/dash/blob/dev/CHANGELOG.md#2025-04-21_snippet_29\n\nLANGUAGE: python\nCODE:\n```\nimport dash_renderer\n\n# Set the react version before setting up the Dash application\ndash_renderer._set_react_version('16.2.0')\n\napp = dash.Dash(...)\n```\n\n----------------------------------------\n\nTITLE: Serializing Dash Component to JSON in Python\nDESCRIPTION: Example of how a Dash component should serialize to JSON when requested by the framework. This format is consistent across all backends.\nSOURCE: https://github.com/plotly/dash/blob/dev/MAKE_A_NEW_BACK_END.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\"namespace\": \"dash_core_components\", \"type\": \"Checklist\", \"props\": {...}}\n```\n\n----------------------------------------\n\nTITLE: Setting Working Directory for R Apps in Dash Testing\nDESCRIPTION: Demonstrates how to set the working directory when running R apps using the dashr fixture in Dash testing.\nSOURCE: https://github.com/plotly/dash/blob/dev/CHANGELOG.md#2025-04-21_snippet_20\n\nLANGUAGE: r\nCODE:\n```\ndashr.start_server(cwd=\"/path/to/working/directory\")\n```\n\n----------------------------------------\n\nTITLE: Generating HTML Components for Dash\nDESCRIPTION: Runs the npm script that programmatically generates components in src/components and the export index in src/index.js from element definitions.\nSOURCE: https://github.com/plotly/dash/blob/dev/components/dash-html-components/README.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n$ npm run generate-components\n```\n\n----------------------------------------\n\nTITLE: Configuring Percy Assets Path in Pytest\nDESCRIPTION: Shows how to specify extra application assets path for Percy in pytest configuration.\nSOURCE: https://github.com/plotly/dash/blob/dev/CHANGELOG.md#2025-04-21_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\n--percy-assets\n```\n\n----------------------------------------\n\nTITLE: Defining Dash Testing Dependencies in Requirements File\nDESCRIPTION: A comprehensive list of Python package dependencies needed for testing Dash applications. The file specifies version constraints for packages like BeautifulSoup, Selenium, and other utilities required for browser automation, web scraping, security, and process management.\nSOURCE: https://github.com/plotly/dash/blob/dev/requirements/testing.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nbeautifulsoup4>=4.8.2\ncryptography\nlxml>=4.6.2\npercy>=2.0.2\npytest>=6.0.2\nrequests[security]>=2.21.0\nselenium>=3.141.0,<=4.2.0\nwaitress>=1.4.4\nmultiprocess>=0.70.12\npsutil>=5.8.0\ndash_testing_stub>=0.0.2\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Dependencies for Dash Component Development\nDESCRIPTION: Lists the required Python packages with minimum version constraints needed for developing new Dash components. The dependencies include coloredlogs for enhanced logging output, fire for creating command-line interfaces, and PyYAML for processing YAML configuration files.\nSOURCE: https://github.com/plotly/dash/blob/dev/requirements/dev.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ncoloredlogs>=15.0.1\nfire>=0.4.0\nPyYAML>=5.4.1\n```\n\n----------------------------------------\n\nTITLE: Running Selenium Integration Tests for Dash Core Components\nDESCRIPTION: Command to execute the Selenium integration tests defined in test_integration.py for Dash Core Components.\nSOURCE: https://github.com/plotly/dash/blob/dev/components/dash-core-components/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Building Dash Components - Linux/Mac\nDESCRIPTION: Command to build all Dash components on Linux/Mac systems.\nSOURCE: https://github.com/plotly/dash/blob/dev/CONTRIBUTING.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Installing Dash Dependencies\nDESCRIPTION: Commands to install Dash and its dependencies using pip and npm.\nSOURCE: https://github.com/plotly/dash/blob/dev/CONTRIBUTING.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npip install -e .[ci,dev,testing,celery,diskcache]\nnpm ci\n```\n\n----------------------------------------\n\nTITLE: Setting Up Test Components\nDESCRIPTION: Command to build and install components used in tests.\nSOURCE: https://github.com/plotly/dash/blob/dev/CONTRIBUTING.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnpm run setup-tests.py\n```\n\n----------------------------------------\n\nTITLE: Building Dash Components - Windows\nDESCRIPTION: Command to build all Dash components on Windows systems with additional setup steps.\nSOURCE: https://github.com/plotly/dash/blob/dev/CONTRIBUTING.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpm run first-build\n```\n\n----------------------------------------\n\nTITLE: Installing Python Package Locally\nDESCRIPTION: Installs the Python package in the local site-packages directory for testing before publishing to PyPi.\nSOURCE: https://github.com/plotly/dash/blob/dev/components/dash-html-components/README.md#2025-04-21_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\n# Install in `site-packages` on your machine\n$ npm run install-local\n```\n\n----------------------------------------\n\nTITLE: Running Build Watcher for Dash Core Components\nDESCRIPTION: Command to start the build watcher for continuous compilation of Dash Core Components during development.\nSOURCE: https://github.com/plotly/dash/blob/dev/components/dash-core-components/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build:watch\n```\n\n----------------------------------------\n\nTITLE: Building Dash HTML Components for Production\nDESCRIPTION: Creates a production build of the JavaScript code using npm's build script.\nSOURCE: https://github.com/plotly/dash/blob/dev/components/dash-html-components/README.md#2025-04-21_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\n$ npm run build\n```\n\n----------------------------------------\n\nTITLE: Updating Individual Components\nDESCRIPTION: Command to rebuild specific Dash components during development.\nSOURCE: https://github.com/plotly/dash/blob/dev/CONTRIBUTING.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ndash-update-components \"dash-core-components\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Python Distribution Package\nDESCRIPTION: Generates a Python distribution tarball in the dist/ folder using setuptools.\nSOURCE: https://github.com/plotly/dash/blob/dev/components/dash-html-components/README.md#2025-04-21_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\n$ python setup.py sdist\n```\n\n----------------------------------------\n\nTITLE: Verifying Dash Installation\nDESCRIPTION: Commands to verify the successful installation of Dash.\nSOURCE: https://github.com/plotly/dash/blob/dev/CONTRIBUTING.md#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\npip list | grep dash\n```\n\n----------------------------------------\n\nTITLE: Publishing to PyPI\nDESCRIPTION: Uploads the distribution package to the Python Package Index (PyPI) using twine.\nSOURCE: https://github.com/plotly/dash/blob/dev/components/dash-html-components/README.md#2025-04-21_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\n$ twine upload dist/*\n```\n\n----------------------------------------\n\nTITLE: Watching for Changes During Development\nDESCRIPTION: Starts a watch process that automatically rebuilds the JavaScript bundle when changes are detected in the source files.\nSOURCE: https://github.com/plotly/dash/blob/dev/components/dash-html-components/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ npm run build:watch\n```\n\n----------------------------------------\n\nTITLE: Installing Module Locally for Development\nDESCRIPTION: Installs the module locally for testing, generating metadata and building the JavaScript bundle in the process.\nSOURCE: https://github.com/plotly/dash/blob/dev/components/dash-html-components/README.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# Generate metadata, and build the JavaScript bundle\n$ npm run install-local\n\n# Now you're done. For subsequent changes, if you've got `npm run build:watch`\n$ python setup.py install\n```\n\n----------------------------------------\n\nTITLE: Installing Dash via pip\nDESCRIPTION: Command to install the Dash library using pip package manager.\nSOURCE: https://github.com/plotly/dash/blob/dev/components/dash-table/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install dash\n```\n\n----------------------------------------\n\nTITLE: Testing the Distribution Package\nDESCRIPTION: Tests the generated tarball by installing it in a new environment to verify it works properly.\nSOURCE: https://github.com/plotly/dash/blob/dev/components/dash-html-components/README.md#2025-04-21_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\n$ pip install dash-html-components-<new-version>.tar.gz\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Python Package Locally\nDESCRIPTION: Removes the locally installed Python package when testing is complete.\nSOURCE: https://github.com/plotly/dash/blob/dev/components/dash-html-components/README.md#2025-04-21_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\n$ npm run uninstall-local\n```\n\n----------------------------------------\n\nTITLE: Setting Up Python Virtual Environment - Windows\nDESCRIPTION: Commands to create and activate a Python virtual environment on Windows systems.\nSOURCE: https://github.com/plotly/dash/blob/dev/CONTRIBUTING.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npython -m venv .venv/dev\nsource .venv/dev/scripts/activate\n```\n\n----------------------------------------\n\nTITLE: Specifying Flask-Compress Dependency\nDESCRIPTION: Package name specification for Flask-Compress, a Flask extension that compresses responses in Flask applications using gzip or other compression algorithms.\nSOURCE: https://github.com/plotly/dash/blob/dev/requirements/compress.txt#2025-04-21_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\nflask-compress\n```\n\n----------------------------------------\n\nTITLE: Example Version Entry Format in Markdown\nDESCRIPTION: Shows the standard format used for version entries in the changelog, including version number, date, and categorized changes (Fixed, Updated, Added, Changed).\nSOURCE: https://github.com/plotly/dash/blob/dev/components/dash-core-components/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## [1.17.1] - 2021-07-12\n\n### Fixed\n\n- Removed unnecessary Julia files from npm package\n```\n\n----------------------------------------\n\nTITLE: Issue Reference Format in Markdown\nDESCRIPTION: Demonstrates how GitHub issues and pull requests are referenced in the changelog entries using markdown links.\nSOURCE: https://github.com/plotly/dash/blob/dev/components/dash-core-components/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[#963](https://github.com/plotly/dash-core-components/pull/963) Fixes [#885](https://github.com/plotly/dash-core-components/issues/885)\n```\n\n----------------------------------------\n\nTITLE: CSS Hack for Hiding Undo/Redo Toolbar (Deprecated)\nDESCRIPTION: CSS hack to hide the undo/redo toolbar in previous versions of Dash, which is no longer needed with the show_undo_redo parameter.\nSOURCE: https://github.com/plotly/dash/blob/dev/CHANGELOG.md#2025-04-21_snippet_28\n\nLANGUAGE: css\nCODE:\n```\n._dash-undo-redo:{display:none;}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Python Virtual Environment - Linux/Mac\nDESCRIPTION: Commands to create and activate a Python virtual environment on Linux/Mac systems.\nSOURCE: https://github.com/plotly/dash/blob/dev/CONTRIBUTING.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npython3 -m venv .venv/dev\nsource .venv/dev/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Setting up Virtual Environment for Dash HTML Components\nDESCRIPTION: Creates and activates a virtual environment for development. Includes a note about Windows activation path differences.\nSOURCE: https://github.com/plotly/dash/blob/dev/components/dash-html-components/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ virtualenv venv\n$ venv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Installing Python Dependencies for Dash HTML Components\nDESCRIPTION: Installs the required Python packages needed to build the components using pip and the dev-requirements.txt file.\nSOURCE: https://github.com/plotly/dash/blob/dev/components/dash-html-components/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install -r dev-requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Installing npm Packages for Dash HTML Components\nDESCRIPTION: Installs the required npm packages needed for component generation and development using the CI (clean install) command.\nSOURCE: https://github.com/plotly/dash/blob/dev/components/dash-html-components/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ npm ci\n```\n\n----------------------------------------\n\nTITLE: Publishing to NPM\nDESCRIPTION: Publishes the package to NPM to make JavaScript bundles available on the unpkg CDN.\nSOURCE: https://github.com/plotly/dash/blob/dev/components/dash-html-components/README.md#2025-04-21_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\n$ npm publish\n```\n\n----------------------------------------\n\nTITLE: Installing Latest Node.js Version\nDESCRIPTION: Commands to install and activate the latest version of Node.js using nvm (Node Version Manager).\nSOURCE: https://github.com/plotly/dash/blob/dev/CONTRIBUTING.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnvm install latest\n```\n\nLANGUAGE: bash\nCODE:\n```\nnvm use latest\n```\n\nLANGUAGE: bash\nCODE:\n```\nnode -v\nnpm -v\n```\n\n----------------------------------------\n\nTITLE: Cloning Dash Repository - HTTPS Method\nDESCRIPTION: Command to clone the forked Dash repository using HTTPS protocol. Replace <your_user_name> with your GitHub username.\nSOURCE: https://github.com/plotly/dash/blob/dev/CONTRIBUTING.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/<your_user_name>/dash.git\n```\n\n----------------------------------------\n\nTITLE: Cloning Dash Repository - SSH Method\nDESCRIPTION: Command to clone the forked Dash repository using SSH protocol. Replace <your_user_name> with your GitHub username.\nSOURCE: https://github.com/plotly/dash/blob/dev/CONTRIBUTING.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:<your_user_name>/dash.git\n```\n\n----------------------------------------\n\nTITLE: Cleaning up the Distribution Folder\nDESCRIPTION: Removes the distribution folder after publishing to clean up the workspace.\nSOURCE: https://github.com/plotly/dash/blob/dev/components/dash-html-components/README.md#2025-04-21_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\n$ rimraf dist\n```"
  }
]