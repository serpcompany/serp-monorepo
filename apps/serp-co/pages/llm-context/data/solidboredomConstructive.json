[
  {
    "owner": "solidboredom",
    "repo": "constructive",
    "content": "TITLE: Creating a Basic Box with Constructive\nDESCRIPTION: This code creates a box with sides of 10mm, centered around the origin.  It requires the `constructive-compiled.scad` library to be included. It's equivalent to `cube([10,10,10],center=true)` in standard OpenSCAD.\nSOURCE: https://github.com/solidboredom/constructive/blob/main/tutorials/basic-tutorial.md#_snippet_0\n\nLANGUAGE: SCAD\nCODE:\n```\ninclude <constructive-compiled.scad>\n\nbox(side=10);\n```\n\n----------------------------------------\n\nTITLE: Performing Boolean Operations with assemble(), add(), remove() in Constructive OpenSCAD\nDESCRIPTION: This example illustrates the basic usage of the `assemble()` block to manage boolean operations. It shows how `add()` includes shapes and `remove()` subtracts them, demonstrating the flexibility to interleave positive and negative shapes within the assembly block, unlike standard OpenSCAD difference(). Transformations can be applied to individual shapes.\nSOURCE: https://github.com/solidboredom/constructive/blob/main/tutorials/tutorial-partIII.md#_snippet_1\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <constructive-compiled.scad>\n\nassemble()\n{\n  g(X(10),turnXY(45),solid())\n  {\n    remove()\n      box(15,h=10);\n    add()\n      tube(d=10,h=20);\n  }\n\n  add()Z(-3)\n    box(10,h=10);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Ball (Sphere)\nDESCRIPTION: Creates a ball (sphere) with a diameter of 10mm. Requires `constructive-compiled.scad`. Preferred over vanilla OpenSCAD's sphere() due to better compatibility with Constructive functions like align() and stack().\nSOURCE: https://github.com/solidboredom/constructive/blob/main/tutorials/basic-tutorial.md#_snippet_5\n\nLANGUAGE: SCAD\nCODE:\n```\ninclude <constructive-compiled.scad>\nball(10);\n```\n\n----------------------------------------\n\nTITLE: Creating a Ball Shell\nDESCRIPTION: Creates a hollow ball shell (similar to a ping pong ball) with a diameter of 10mm.  Requires `constructive-compiled.scad`. The space inside the shell does not affect other bodies. Preferred over sphere() for Constructive.\nSOURCE: https://github.com/solidboredom/constructive/blob/main/tutorials/basic-tutorial.md#_snippet_6\n\nLANGUAGE: SCAD\nCODE:\n```\ninclude <constructive-compiled.scad>\nballShell(10);\n```\n\n----------------------------------------\n\nTITLE: Creating a Tube with Diameter, Height, and Wall\nDESCRIPTION: Creates a tube with an outer diameter of 10mm, a wall thickness of 2.5mm, and a height of 20mm. Requires `constructive-compiled.scad`.\nSOURCE: https://github.com/solidboredom/constructive/blob/main/tutorials/basic-tutorial.md#_snippet_7\n\nLANGUAGE: SCAD\nCODE:\n```\ninclude <constructive-compiled.scad>\n\ntube(d=10,h=20,wall=2.5);\n```\n\n----------------------------------------\n\nTITLE: Creating a Solid Rod (Tube)\nDESCRIPTION: Creates a solid rod with a diameter of 10mm and a height of 20mm. Requires `constructive-compiled.scad`. Equivalent to `cylinder(d=10,h=20)` in standard OpenSCAD.\nSOURCE: https://github.com/solidboredom/constructive/blob/main/tutorials/basic-tutorial.md#_snippet_9\n\nLANGUAGE: SCAD\nCODE:\n```\ninclude <constructive-compiled.scad>\n\ntube(d=10,h=20,solid=true);\n```\n\n----------------------------------------\n\nTITLE: Grouping Operations with g() in Constructive OpenSCAD\nDESCRIPTION: This snippet demonstrates the use of the `g()` command to group multiple transformations and default parameters for child objects. It applies vertical reflection, translation, and alignment, while setting default height and solid state for primitives within the group. The nested `g()` shows how transformations can be locally applied.\nSOURCE: https://github.com/solidboredom/constructive/blob/main/tutorials/tutorial-partIII.md#_snippet_0\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <constructive-compiled.scad>\n\ntwo()\n  g( reflectZ(sides()), Z(10) ,TOUP()\n    , height(7), solid(true) )\n  {\n    tube(d=20);\n    g(turnXY(45), X(60)) box(20);\n  }  \n```\n\n----------------------------------------\n\nTITLE: Applying Opacity and Color to Bodies Using Constructive (OpenSCAD)\nDESCRIPTION: Demonstrates usage of the Constructive library's opaq(color) and clear(color) shortcuts to color bodies with specific opacity. opaq(color) simplifies the native color() function with full opacity, while clear(color) adds partial transparency. Accepts color constants or web color strings. Requires 'constructive-compiled.scad' in the same directory.\nSOURCE: https://github.com/solidboredom/constructive/blob/main/tutorials/tutorial-partII.md#_snippet_0\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nopaq(red)\n\nclear(blue)\n```\n\n----------------------------------------\n\nTITLE: Creating a Box with Implicit Side Parameter\nDESCRIPTION: This code is a shorthand for creating a box with equal sides of 10mm.  It omits the `side=` parameter name.  It requires `constructive-compiled.scad`.\nSOURCE: https://github.com/solidboredom/constructive/blob/main/tutorials/basic-tutorial.md#_snippet_1\n\nLANGUAGE: SCAD\nCODE:\n```\ninclude <constructive-compiled.scad>\n\nbox(10);\n```\n\n----------------------------------------\n\nTITLE: Creating a Box with Height Parameter\nDESCRIPTION: Creates a box with sides of 10mm and a height of 15mm, centered around the origin. Requires `constructive-compiled.scad`. Equivalent to `cube([10,10,15],center=true)` in standard OpenSCAD.\nSOURCE: https://github.com/solidboredom/constructive/blob/main/tutorials/basic-tutorial.md#_snippet_2\n\nLANGUAGE: SCAD\nCODE:\n```\ninclude <constructive-compiled.scad>\n\nbox(10,h=15);\n```\n\n----------------------------------------\n\nTITLE: Moving Objects with X() and Z()\nDESCRIPTION: This code moves two boxes. The first (4mm side) is moved 5mm to the right using X(5). The second (8mm side) is moved 13mm down using Z(-13). Requires `constructive-compiled.scad`.\nSOURCE: https://github.com/solidboredom/constructive/blob/main/tutorials/basic-tutorial.md#_snippet_10\n\nLANGUAGE: SCAD\nCODE:\n```\ninclude <constructive-compiled.scad>\n\nX(5) box(4);\nZ(-13) box(8);\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Objects Using pieces() and every() with Constructive (OpenSCAD)\nDESCRIPTION: Uses pieces(n) and every(distance) to generate sequences of similar bodies without for-loops. The first snippet creates 7 boxes spaced 20mm apart; the second incrementally increases box height by 5 per step. Requires 'constructive-compiled.scad'. Suitable for concise, parameterized duplication.\nSOURCE: https://github.com/solidboredom/constructive/blob/main/tutorials/tutorial-partII.md#_snippet_3\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <constructive-compiled.scad>\n\npieces(7) X(every(20)) box(10);\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <constructive-compiled.scad> \npieces(7) X(every(20)) box(10,h=10+every(5));\n```\n\n----------------------------------------\n\nTITLE: Creating a Box with Height and Depth Parameters\nDESCRIPTION: Creates a box with a side of 10, height of 15, and depth (y) of 25, centered. Requires `constructive-compiled.scad`. Equivalent to `cube([10,25,15],center=true)`.\nSOURCE: https://github.com/solidboredom/constructive/blob/main/tutorials/basic-tutorial.md#_snippet_3\n\nLANGUAGE: SCAD\nCODE:\n```\ninclude <constructive-compiled.scad>\n\nbox(10,y=25,h=15);\n```\n\n----------------------------------------\n\nTITLE: Creating a Box with X and Height Parameters\nDESCRIPTION: Creates a box where x=35 and h=15. The remaining side will default to 10. Requires `constructive-compiled.scad`. Equivalent to `cube([35,10,15],center=true)`.\nSOURCE: https://github.com/solidboredom/constructive/blob/main/tutorials/basic-tutorial.md#_snippet_4\n\nLANGUAGE: SCAD\nCODE:\n```\ninclude <constructive-compiled.scad>\n\nbox(10,x=35,h=15);\n```\n\n----------------------------------------\n\nTITLE: Creating a Tube with Inner and Outer Diameters\nDESCRIPTION: Creates a tube with an outer diameter of 45mm, an inner diameter of 25mm, and a height of 20mm. Requires `constructive-compiled.scad`.\nSOURCE: https://github.com/solidboredom/constructive/blob/main/tutorials/basic-tutorial.md#_snippet_8\n\nLANGUAGE: SCAD\nCODE:\n```\ninclude <constructive-compiled.scad>\n\ntube(dOuter=45,dInner=25,h=20);\n```\n\n----------------------------------------\n\nTITLE: Using assemble() with add(), addRemove(), tube(), tubeShell() in Constructive OpenSCAD\nDESCRIPTION: This example demonstrates a more complex assembly using `assemble()`, combining `add()` and `addRemove()`. `add()` is used for main parts like a base tube and a shell, while `addRemove()` is used for a tube intended to create a hole. It highlights how `addRemove` parts disappear in F7 preview after creating the hole.\nSOURCE: https://github.com/solidboredom/constructive/blob/main/tutorials/tutorial-partIII.md#_snippet_4\n\nLANGUAGE: OpenSCAD\nCODE:\n```\n\ninclude <../devlibs/constructive/constructive-all.scad>\n\n//Assemb\nassemble()\n{\n add(TOUP())tube(d=20,wall=2,h=100);\t\n\n //we use add() here because addRemove() would add and then remove the same tubeShell()\n //so it would dissaperafter rendering (with keypress F7)\n add(Z(20))tubeShell(d=60,wall=3,h=8);\n\n//the tube can be used with addRemove(),it is meant to remove bodies of the Part inside it\n addRemove(Z(60))tube(d=60,wall=3,h=12); \n\n }\n```\n\n----------------------------------------\n\nTITLE: Turning Objects in XY Plane\nDESCRIPTION: This code turns a box by 45 degrees in the horizontal (XY) plane using turnXY(45). Requires `constructive-compiled.scad`.\nSOURCE: https://github.com/solidboredom/constructive/blob/main/tutorials/basic-tutorial.md#_snippet_12\n\nLANGUAGE: SCAD\nCODE:\n```\ninclude <constructive-compiled.scad>\n\nturnXY(45) box(10);\n```\n\n----------------------------------------\n\nTITLE: Applying Multiple Turns\nDESCRIPTION: This code applies two rotations to a box: turnXZ(-30) followed by turnXY(45). Requires `constructive-compiled.scad`.\nSOURCE: https://github.com/solidboredom/constructive/blob/main/tutorials/basic-tutorial.md#_snippet_13\n\nLANGUAGE: SCAD\nCODE:\n```\ninclude <constructive-compiled.scad>\n\nturnXZ(-30) turnXY(45) box(10);\n```\n\n----------------------------------------\n\nTITLE: Combining Turns and Moves\nDESCRIPTION: This code demonstrates combining translation and rotation transformations on a box. Requires `constructive-compiled.scad`. Note that the order of transformations matters.\nSOURCE: https://github.com/solidboredom/constructive/blob/main/tutorials/basic-tutorial.md#_snippet_14\n\nLANGUAGE: SCAD\nCODE:\n```\ninclude <constructive-compiled.scad>\n\nturnXZ(-30) X(5) Y(10) turnXY(45) Z(15) box(10);\n```\n\n----------------------------------------\n\nTITLE: Placing Symmetrical Bodies Using two() and sides() with Constructive (OpenSCAD)\nDESCRIPTION: Demonstrates generation of two symmetrically placed objects using pieces(2) via two() and sides(distance). The first snippet places two spheres mirrored at X = ±15mm. The next uses sides() to symmetrically rotate two boxes. Requires 'constructive-compiled.scad'. Common for mirrored parts.\nSOURCE: https://github.com/solidboredom/constructive/blob/main/tutorials/tutorial-partII.md#_snippet_4\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <constructive-compiled.scad>\n\ntwo() X(sides(15)) ball(10);\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <constructive-compiled.scad>\n\ntwo() X(sides(15)) turnXZ(-sides(30)) box(10);\n```\n\n----------------------------------------\n\nTITLE: Creating Gaps Between Parts with margin() in Constructive OpenSCAD\nDESCRIPTION: This example illustrates how to use the `margin()` function within primitive dimensions (like `d` for `tube` or dimensions for `box`) to create controlled gaps between parts in an assembly. `margin()` automatically adjusts the size based on whether the operation is `add` or `remove`, ensuring a consistent gap when parts are combined.\nSOURCE: https://github.com/solidboredom/constructive/blob/main/tutorials/tutorial-partIII.md#_snippet_8\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <constructive-compiled.scad>\nassemble(\"rod,plate\")\n{\n  g(X(10),turnXY(45),solid())\n  {\n    add(\"rod\",remove=\"plate\")\n      tube(d=margin(16,1),h=20);\n\n    add(\"plate\")\n      box(margin(20),h=3);\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Reflecting Bodies Along the Z Axis Using Constructive (OpenSCAD)\nDESCRIPTION: Illustrates reflecting a 3D object along the Z axis using reflectZ() with Constructive. This snippet creates a box and a sphere, reflecting their group along the Z axis. It requires 'constructive-compiled.scad' to be included. The example also contrasts the effect of applying reflectZ() versus not applying it.\nSOURCE: https://github.com/solidboredom/constructive/blob/main/tutorials/tutorial-partII.md#_snippet_1\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <constructive-compiled.scad>\n\nreflectZ() TOUP()\n{\n  box(10,h=3);\n  Z(3) ball(5);\n}\n//-----------\n//and this Part of the example is not using reflectZ()\n#TOUP()\n{\n  box(10,h=3);\n  Z(3) ball(5);\n}\n```\n\n----------------------------------------\n\nTITLE: Scaling Bodies Along Axes with cscale() Using Constructive (OpenSCAD)\nDESCRIPTION: Shows resizing of bodies via the cscale() command. cscale(x=2) doubles the X dimension of a sphere; cscale(y=2,z=.5) doubles Y and halves Z. 'constructive-compiled.scad' must be included. Multiple axes can be scaled independently for non-uniform transforms. Synonymous with scale() inside g() group functions.\nSOURCE: https://github.com/solidboredom/constructive/blob/main/tutorials/tutorial-partII.md#_snippet_2\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <constructive-compiled.scad>\n\ncscale(x=2)ball(20);\nY(-30) cscale(y=2,z=.5) ball(20);\n```\n\n----------------------------------------\n\nTITLE: Applying Multiple Movements\nDESCRIPTION: This code demonstrates applying multiple transformations to a single object, translating it along the X, Y, and Z axes. Requires `constructive-compiled.scad`.\nSOURCE: https://github.com/solidboredom/constructive/blob/main/tutorials/basic-tutorial.md#_snippet_11\n\nLANGUAGE: SCAD\nCODE:\n```\ninclude <constructive-compiled.scad>\n\nX(8) Y(-20) Z(-30) box(15);\nX(5) box(4);\nZ(13) box(5);\nY(-24) box(3);\n```\n\n----------------------------------------\n\nTITLE: Creating Skinned Objects with skin() and addRemove() in Constructive OpenSCAD\nDESCRIPTION: This snippet illustrates the use of the `skin()` function to define object dimensions relative to a specified skin thickness (`$skinThick`). It applies skinning to `tube` and `box` primitives within an `addRemove()` operation inside an `assemble()` block, incorporating transformations and chamfering. This creates a shell around the underlying shape geometry.\nSOURCE: https://github.com/solidboredom/constructive/blob/main/tutorials/tutorial-partIII.md#_snippet_5\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <constructive-compiled.scad>\n\n$skinThick=1.5; //thickness of the Skin in mm\n\nassemble()    \n{\n    //hull()    \n    addRemove(height(skin(20)))\n    {        \n\n        g(X(-10),chamfer(-4,-4-1))\n             tube( d = skin(30),solid=true);\n\n            g(X(4),chamfer(-1,-1,-5))\n                box(skin(37), skin(18), h=skin(4));                \n    }    \n    remove(TOLEFT(TOFRONT))    box(30);        \n}\n```\n\n----------------------------------------\n\nTITLE: Spanning Objects Evenly With pieces() and span() Using Constructive (OpenSCAD)\nDESCRIPTION: Demonstrates even distribution of bodies across a range using pieces(n) and span(range). The first snippet places 5 boxes across 100mm; the second creates 8 boxes rotating across 90° in the YZ plane. Range is filled inclusively. Requires 'constructive-compiled.scad'. Reduces need for manual calculation of steps.\nSOURCE: https://github.com/solidboredom/constructive/blob/main/tutorials/tutorial-partII.md#_snippet_6\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <constructive-compiled.scad>\n\npieces(5) X(span(100)) box(10);\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <constructive-compiled.scad>\n\npieces(8) X(span(100)) turnYZ(span(90)) box(10);\n```\n\n----------------------------------------\n\nTITLE: Using autocolor() with assemble() in Constructive/OpenSCAD\nDESCRIPTION: Demonstrates applying automatic coloring using `autocolor()` after an `assemble()` call. The first string argument lists parts treated as transparent outer shells (e.g., \"Part1,part2,part3\"), while the second lists opaque inner details (e.g., \"screws,part5,part6\"). Each listed part is assigned a unique color from a built-in palette.\nSOURCE: https://github.com/solidboredom/constructive/blob/main/versionlog.txt#_snippet_0\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nassemble(\"Part1,part2,part3\",\"screws,part5,part6\")autoColor((){ .....}\n```\n\n----------------------------------------\n\nTITLE: Mirroring Bodies with reflectX() and sides() Using Constructive (OpenSCAD)\nDESCRIPTION: Illustrates mirroring two objects about the X axis using reflectX(sides()). The snippet creates two boxes, each mirrored and shifted, achieving results equivalent to using two() and sides(). Requires 'constructive-compiled.scad'. Useful in combinatorial geometry workflows.\nSOURCE: https://github.com/solidboredom/constructive/blob/main/tutorials/tutorial-partII.md#_snippet_5\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <constructive-compiled.scad>\n\ntwo() reflectX(sides()) X(15) turnXZ(-30) box(10);\n```\n\n----------------------------------------\n\nTITLE: Applying Transformations Chained Before add() in Constructive OpenSCAD\nDESCRIPTION: This snippet demonstrates an alternative syntax for applying transformations and parameters to an operation like `add()`. Instead of enclosing them within the function's parameters, they are chained before the operation call, affecting the subsequent object(s). This syntax achieves the same result as placing them inside the parentheses.\nSOURCE: https://github.com/solidboredom/constructive/blob/main/tutorials/tutorial-partIII.md#_snippet_2\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <constructive-compiled.scad>\n\nassemble()\n{\n  Z(10) turnXY(45) TOUP() add() g(height(10)) X(20) box(30);\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Transformations Within add() Parameters in Constructive OpenSCAD\nDESCRIPTION: This snippet shows the preferred syntax for applying transformations and parameters directly within the `add()` function's parameters. Transformations such as translation (`Z`, `X`), rotation (`turnXY`), alignment (`TOUP`), and default parameters (`height`) are passed as arguments to `add()`, applying them to the subsequent object (`box`).\nSOURCE: https://github.com/solidboredom/constructive/blob/main/tutorials/tutorial-partIII.md#_snippet_3\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <constructive-compiled.scad>\n\nassemble()\n{\n  add( Z(10), turnXY(45), TOUP(), height(10), X(20) ) box(30);\n}\n```\n\n----------------------------------------\n\nTITLE: Maintaining Uniform Skin Thickness with alignSkin() and TOUP() in Constructive OpenSCAD\nDESCRIPTION: This example demonstrates how to use `alignSkin()` in conjunction with alignment commands like `TOUP()` when applying skinning. Adding `alignSkin(TOUP)` to the `addRemove` operation ensures that the skin walls remain equally thick on all sides despite the object's alignment transformation, preventing uneven skin distribution.\nSOURCE: https://github.com/solidboredom/constructive/blob/main/tutorials/tutorial-partIII.md#_snippet_6\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nassemble()    \n{\n    //hull()                                                             \n    addRemove(height(skin(20)), TOUP(),alignSkin(TOUP))\n    {        \n\n        g(X(-10),chamfer(-4,-4-1))\n             tube( d = skin(30),solid=true);\n\n            g(X(4),chamfer(-1,-1,-5))\n                box(skin(30), skin(18), h=skin(10));                \n    }    \n    remove(TOLEFT(TOFRONT))    box(30,h=100);        \n}\n```\n\n----------------------------------------\n\nTITLE: Distributing Objects Over Angles Using span() and spanAllButLast() (OpenSCAD)\nDESCRIPTION: Compared usage of span() and spanAllButLast() for distributing multiple bodies over angular or linear ranges. Includes 3-box arrangements at 0°/90°/180° (span), at 0°/180°/360°, and using spanAllButLast() to avoid overlap at 360°, as well as linear distribution of balls over a range, with and without the last-space gap. All snippets require 'constructive-compiled.scad'.\nSOURCE: https://github.com/solidboredom/constructive/blob/main/tutorials/tutorial-partII.md#_snippet_7\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <constructive-compiled.scad>\n\npieces(3) turnXY(span(180)) X(20) box(10);\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <constructive-compiled.scad>\n\npieces(3) turnXY(span(360)) X(20) box(10);\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <constructive-compiled.scad>\n\npieces(3) turnXY(spanAllButLast(360)) X(20) box(10);\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <constructive-compiled.scad>\n\npieces(5) X(span(100)) ball(10);\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <constructive-compiled.scad>\n\npieces(5) X(spanAllButLast(100)) ball(10);\n```\n\n----------------------------------------\n\nTITLE: Controlling Part Application with applyTo() and Prefixes in Constructive OpenSCAD\nDESCRIPTION: This snippet demonstrates advanced part management using named parts within `assemble()`. `applyTo()` limits subsequent operations (`add`, `remove`) to specified parts. The prefixes `+` (add to list), `:` (exact match), and `!` (exclude exact match) refine which parts an operation affects, as shown with the `echo($currentBody)` output.\nSOURCE: https://github.com/solidboredom/constructive/blob/main/tutorials/tutorial-partIII.md#_snippet_7\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <constructive-compiled.scad>\n\nassemble(\"aaa,ccc,ddd\",$derivedParts=[\"bbb,ccc\"])\napplyTo(\"ddd,bbb\")\n{\n  add(\"ccc,+aaa,!bbb\")\n  echo($currentBody);\n}\n```\n\n----------------------------------------\n\nTITLE: Using `pieces()` with `vals()` to assign variable values per piece in OpenSCAD\nDESCRIPTION: This snippet demonstrates how to use the `pieces()` function in conjunction with `vals()` to assign specific values to each piece generated. It illustrates how values are selected from a list for each piece, enabling varied component sizes or parameters. The code assumes the inclusion of the `constructive-compiled.scad` library and outputs a series of pieces with varying parameters.\nSOURCE: https://github.com/solidboredom/constructive/blob/main/tutorials/tutorial-partII.md#_snippet_8\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <constructive-compiled.scad>\n\npieces(6) X(span(120)) Z(vals(10,20,40,15,25,35)) ball(20);\n```\n\n----------------------------------------\n\nTITLE: Using `g()` grouping with `vals()` to combine commands into a single value dimension in OpenSCAD\nDESCRIPTION: This snippet shows how to combine multiple transformation commands such as `X()`, `Y()`, and `turnXY()` using the `g()` grouping function, then assign the grouped command as a value to `pieces()` using `vals()`. This allows complex transformations to be applied to each piece individually. The code includes the necessary library and applies colors and transformations, outputting a series of uniquely transformed balls.\nSOURCE: https://github.com/solidboredom/constructive/blob/main/tutorials/tutorial-partII.md#_snippet_9\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <constructive-compiled.scad>\n\npieces(3) g(vals(X(20),X(40)*Y(20),turnXY(45)*X(100)))\n  color(vals(red,green,blue))\n    ball(15);\n```\n\n----------------------------------------\n\nTITLE: Automatic Color Assignment Using autocolor() in SCAD\nDESCRIPTION: This snippet describes a simplified autocoloring system using the `autocolor()` function.  The `assemble()` function takes two arguments: the first for outer objects (shells) drawn in transparent colors, and the second for inner details (screws) drawn in opaque colors. Each part receives a distinct color from a built-in palette.\nSOURCE: https://github.com/solidboredom/constructive/blob/main/tutorials/tutorial-partIII.md#_snippet_10\n\nLANGUAGE: SCAD\nCODE:\n```\nassemble(\"Part1,part2,part3\",\"screws,part5,part6\")autoColor((){ .....}\n```\n\n----------------------------------------\n\nTITLE: Using `vRepeat()` to cycle through values for over-parameterized piece counts in OpenSCAD\nDESCRIPTION: This snippet demonstrates the use of `vRepeat()` to cycle through a list of values when the number of pieces exceeds the list length. It repeats the pattern of Y positions and colors across all pieces created by `pieces(15)`, ensuring each piece gets a value by repeating the sequence as needed. This is useful for creating repeated patterns with limited parameter lists.\nSOURCE: https://github.com/solidboredom/constructive/blob/main/tutorials/tutorial-partII.md#_snippet_10\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <constructive-compiled.scad>\n\npieces(15) X(span(200))\n  Y(vRepeat(0,10,30,70))\n    color(vRepeat(red,green,blue,cyan))\n      ball(15);\n```\n\n----------------------------------------\n\nTITLE: Confinement Mechanism Using confinementOf() in SCAD\nDESCRIPTION: This snippet introduces a simplified confinement mechanism using `confinementOf()` to create a confining object for a part. Parts that contribute to the confinement are marked with the `confines()` marker function within `add()` or `remove()` operations. The `intersection()` function is then used to confine the parts within the generated confinement volume.\nSOURCE: https://github.com/solidboredom/constructive/blob/main/tutorials/tutorial-partIII.md#_snippet_11\n\nLANGUAGE: SCAD\nCODE:\n```\nadd(confines(\"part1\"))box()\nremove(confines(\"part2\"))tube(d=2,h=10)\n\nintersection()\n{\n confinement()moduleWithParts();\n assemble()moduleWithParts();\n}\n```\n\n----------------------------------------\n\nTITLE: Using `vSpread()` to distribute values evenly among all pieces in OpenSCAD\nDESCRIPTION: This snippet shows how to evenly spread a pattern of values across all pieces using `vSpread()`. Unlike `vRepeat()`, `vSpread()` assigns values in a manner that distributes them uniformly, ensuring each adjacent piece gets a distinct value from the list. It is suitable for creating evenly spaced variations among multiple objects.\nSOURCE: https://github.com/solidboredom/constructive/blob/main/tutorials/tutorial-partII.md#_snippet_11\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <constructive-compiled.scad>\n\npieces(15) X(span(200))\n  Y(vSpread(0,10,30,70))\n    color(vSpread(red,green,blue,cyan))\n      ball(15);\n```\n\n----------------------------------------\n\nTITLE: Defining and Applying Confinement in Constructive/OpenSCAD\nDESCRIPTION: Illustrates the `confinementOf()` mechanism. Parts contributing to the confinement boundary are marked using `confines(\"id\")` within `add()` or `remove()` operations. The `intersection()` operation then combines the generated `confinement()` boundary with the regular `assemble()` output to effectively clip the assembled module.\nSOURCE: https://github.com/solidboredom/constructive/blob/main/versionlog.txt#_snippet_1\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nadd(confines(\"part1\"))box():\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nremove(confines(\"part2\"))tube(d=2,h=10);\n```\n\nLANGUAGE: OpenSCAD\nCODE:\n```\nintersection()\n{\n  confinement()moduleWithParts();\n  assemble()moduleWithParts();\n}\n```\n\n----------------------------------------\n\nTITLE: Using `skipFirst()` to omit commands for initial pieces in OpenSCAD\nDESCRIPTION: This snippet demonstrates skipping the execution of a command, such as creating a box, for the first N pieces. The command within the `skipFirst()` block is only applied starting from the N+1-th piece, enabling selective application of features or transformations on later pieces. It relies on the `constructive-compiled.scad` library.\nSOURCE: https://github.com/solidboredom/constructive/blob/main/tutorials/tutorial-partII.md#_snippet_12\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <constructive-compiled.scad>\n\npieces(15) X(span(200))\n  {\n    TOUP()ball(10);\n\n    skipFirst(10)\n      box(10,h=2);  \n  }\n```\n\n----------------------------------------\n\nTITLE: Using `ifFirst()` to execute commands only on initial pieces in OpenSCAD\nDESCRIPTION: This snippet illustrates executing a command, such as creating a box, only for the first N pieces using `ifFirst()`. The command inside this block is only applied to the initial set of pieces, enabling selective feature inclusion and variation at the start of the sequence.\nSOURCE: https://github.com/solidboredom/constructive/blob/main/tutorials/tutorial-partII.md#_snippet_13\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <constructive-compiled.scad>\n\npieces(15) X(span(200))\n  {\n    TOUP()ball(10);\n\n    ifFirst(5)\n      box(10,h=2);  \n  }\n```\n\n----------------------------------------\n\nTITLE: Using `ifLast()` to execute commands only on last pieces in OpenSCAD\nDESCRIPTION: This snippet demonstrates applying a command, like creating a box, only on the last N pieces with `ifLast()`. This enables adding features exclusively at the end of a sequence of generated objects, useful for finishing details or boundary conditions.\nSOURCE: https://github.com/solidboredom/constructive/blob/main/tutorials/tutorial-partII.md#_snippet_14\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <constructive-compiled.scad>\n\npieces(15) X(span(200))\n  {\n    TOUP()ball(10);\n\n    ifLast(2)\n      box(10,h=2);  \n  }\n```\n\n----------------------------------------\n\nTITLE: Conditional Parameter Change Using $removing Variable in SCAD\nDESCRIPTION: This snippet demonstrates how to modify object parameters based on whether the object is being removed from another object using the `$removing` variable. When `$removing` is true, different parameter values are applied to the tube and the Z and turnXZ transformations.\nSOURCE: https://github.com/solidboredom/constructive/blob/main/tutorials/tutorial-partIII.md#_snippet_9\n\nLANGUAGE: SCAD\nCODE:\n```\ninclude <constructive-compiled.scad>\nassemble(\"rod,plate\")\n{\n  g(X(10),turnXY(45),solid())\n  {\n    add(\"rod\",remove=\"plate\",\n      Z($removing?5:0),turnXZ($removing?-35:15))\n      tube(d=$removing?30:10,h=20);\n\n    clear(grey)\n       add(\"plate\")\n      box(margin(40),h=10);\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Using `selectPieces()` with a boolean list to conditionally execute commands in OpenSCAD\nDESCRIPTION: This snippet employs `selectPieces()` with a decision list of booleans to selectively execute a block of code only for certain pieces. In this example, the block is applied to pieces at positions where the list value is true, allowing fine-grained control over individual pieces.\nSOURCE: https://github.com/solidboredom/constructive/blob/main/tutorials/tutorial-partII.md#_snippet_15\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <constructive-compiled.scad>\n\npieces(5) X(span(200))\n  {\n    TOUP()ball(10);\n\n    selectPieces([true,false,false,true])\n      box(10,h=2);  \n  }\n```\n\n----------------------------------------\n\nTITLE: Conditional value assignment using bodyIs() in SCAD\nDESCRIPTION: This snippet demonstrates assigning a value based on whether the specified body is selected using `bodyIs(body)`. If `bodyIs(body)` is true, it evaluates `what+($removing? extra:0)`, otherwise, it returns 0.\nSOURCE: https://github.com/solidboredom/constructive/blob/main/tutorials/tutorial-partIII.md#_snippet_12\n\nLANGUAGE: SCAD\nCODE:\n```\nbodyIs(body)?(what+($removing? extra:0)):0;\n```\n\n----------------------------------------\n\nTITLE: Using `runFor()` with a condition list to selectively generate pieces in OpenSCAD\nDESCRIPTION: This snippet shows how `runFor()` accepts a boolean sequence to determine which pieces to generate, effectively short-cutting the need for explicit loops or conditional checks. It generates specified objects only for the piece indices marked true, simplifying pattern variations.\nSOURCE: https://github.com/solidboredom/constructive/blob/main/tutorials/tutorial-partII.md#_snippet_16\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <constructive-compiled.scad>\n\nrunFor([true,false,false,true,false,true,true])\n X(span(100))\n  {\n    TOUP()ball(10);\n    box(10,h=2);  \n  }\n```\n\n----------------------------------------\n\nTITLE: Using `$valPtr` to access current piece index within `pieces()` in OpenSCAD\nDESCRIPTION: This snippet utilizes the `$valPtr` variable, a built-in in the Constructive system, to identify the current piece's index within a `pieces()` block. It conditionally creates different objects based on the index, enabling custom behavior per piece, such as applying transformations or features selectively.\nSOURCE: https://github.com/solidboredom/constructive/blob/main/tutorials/tutorial-partII.md#_snippet_17\n\nLANGUAGE: OpenSCAD\nCODE:\n```\ninclude <constructive-compiled.scad>\n\npieces(10)\n X(span(100))\n{\n  if($valPtr==3)\n    ball(10);\n  else if($valPtr< 3 || $valPtr >4)\n    box(10,h=$valPtr*4+1);   \n}\n```\n\n----------------------------------------\n\nTITLE: Arc function definition in SCAD\nDESCRIPTION: This snippet presents the definition of an `arc` function and an `addOffset` function along with a function called `arcPoints`. The arc function creates an arc, while addOffset is not fully specified. arcPoints likely computes points for an arc.\nSOURCE: https://github.com/solidboredom/constructive/blob/main/tutorials/tutorial-partIII.md#_snippet_14\n\nLANGUAGE: SCAD\nCODE:\n```\narc(r,angle=90,deltaA=1,noCenter=false,wall=0)\naddOffset(rOuter=1,rInner=0)\nfunction arcPoints(r,angle=90,deltaA=1,noCenter=false)\n```\n\n----------------------------------------\n\nTITLE: Applying Inverse Transformations with Constructive Syntax in OpenScad\nDESCRIPTION: This snippet demonstrates the use of the Constructive Library's g() group function combined with backwards() to apply inverse transformations (e.g., translation and rotation) to a box() primitive. Dependencies include OpenScad and the constructive-compiled.scad file for the required syntax extensions. It expects a list of transformations—such as X(), Y(), and turnXY()—passed as an array to backwards(), which are then applied in reverse order. The output is a 3D box with the specified transformations inversely applied; limitations may exist concerning feature completeness in 'inverse' transformation handling.\nSOURCE: https://github.com/solidboredom/constructive/blob/main/README.md#_snippet_0\n\nLANGUAGE: OpenScad\nCODE:\n```\ng(backwards([X(10),Y(15),turnXY(45),X(30)])\n\n    box(10);\n```\n\n----------------------------------------\n\nTITLE: Definition of removeFor() in SCAD\nDESCRIPTION: This snippet provides the signature for a function named `removeFor()`, which takes parameters `body`, `extra` (defaulting to `$removeExtra`), and `what` (defaulting to 0). The actual implementation of this function is not provided.\nSOURCE: https://github.com/solidboredom/constructive/blob/main/tutorials/tutorial-partIII.md#_snippet_13\n\nLANGUAGE: SCAD\nCODE:\n```\nremoveFor(body,extra=$removeExtra,what=0)\n```"
  }
]