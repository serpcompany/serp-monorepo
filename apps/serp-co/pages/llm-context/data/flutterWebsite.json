[
  {
    "owner": "flutter",
    "repo": "website",
    "content": "TITLE: Encoding JSON with json_serializable in Dart\nDESCRIPTION: This snippet demonstrates how to encode a `User` object into a JSON string using the generated `toJson` method.  It leverages the `jsonEncode` function from `dart:convert` and the generated serialization logic.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/data-and-backend/serialization/json.md#_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nString json = jsonEncode(user);\n```\n\n----------------------------------------\n\nTITLE: Deserialize JSON with User Model\nDESCRIPTION: This example shows how to deserialize JSON into a `User` object using the `User.fromJson` constructor.  It first decodes the JSON string into a `Map<String, dynamic>` and then passes it to the `User.fromJson` constructor. This approach provides type safety and improves code maintainability.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/data-and-backend/serialization/json.md#_snippet_3\n\nLANGUAGE: Dart\nCODE:\n```\nfinal userMap = jsonDecode(jsonString) as Map<String, dynamic>;\nfinal user = User.fromJson(userMap);\n\nprint('Howdy, ${user.name}!');\nprint('We sent the verification link to ${user.email}.');\n```\n\n----------------------------------------\n\nTITLE: Connect to WebSocket Server in Flutter\nDESCRIPTION: Connects to a WebSocket server using the `WebSocketChannel.connect` method from the `web_socket_channel` package. The `Uri.parse` function creates a URI object from the provided WebSocket endpoint.  This example connects to a test WebSocket server.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/networking/web-sockets.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nfinal channel = WebSocketChannel.connect(\n  Uri.parse('wss://echo.websocket.events'),\n);\n```\n\n----------------------------------------\n\nTITLE: Overriding buildTextSpan After Migration (Dart)\nDESCRIPTION: This code snippet demonstrates the updated `buildTextSpan` override, including the required `BuildContext` parameter. This allows the controller to access inherited widgets and theme data.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/buildtextspan-buildcontext.md#_snippet_1\n\nLANGUAGE: Dart\nCODE:\n```\nclass MyTextEditingController {\n  @override\n  TextSpan buildTextSpan({required BuildContext context, TextStyle? style, required bool withComposing}) {\n    /* ... */\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Flutter Return Data - Complete Example\nDESCRIPTION: This code provides a complete, runnable Flutter application that demonstrates returning data from a new screen using `Navigator.pop()`.  It defines the `HomeScreen`, `SelectionButton`, and `SelectionScreen` widgets, showing how to launch a new screen, receive data back, and display it in a snackbar.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/navigation/returning-data.md#_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\n\nvoid main() {\n  runApp(const MaterialApp(title: 'Returning Data', home: HomeScreen()));\n}\n\nclass HomeScreen extends StatelessWidget {\n  const HomeScreen({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: const Text('Returning Data Demo')),\n      body: const Center(child: SelectionButton()),\n    );\n  }\n}\n\nclass SelectionButton extends StatefulWidget {\n  const SelectionButton({super.key});\n\n  @override\n  State<SelectionButton> createState() => _SelectionButtonState();\n}\n\nclass _SelectionButtonState extends State<SelectionButton> {\n  @override\n  Widget build(BuildContext context) {\n    return ElevatedButton(\n      onPressed: () {\n        _navigateAndDisplaySelection(context);\n      },\n      child: const Text('Pick an option, any option!'),\n    );\n  }\n\n  // A method that launches the SelectionScreen and awaits the result from\n  // Navigator.pop.\n  Future<void> _navigateAndDisplaySelection(BuildContext context) async {\n    // Navigator.push returns a Future that completes after calling\n    // Navigator.pop on the Selection Screen.\n    final result = await Navigator.push(\n      context,\n      MaterialPageRoute(builder: (context) => const SelectionScreen()),\n    );\n\n    // When a BuildContext is used from a StatefulWidget, the mounted property\n    // must be checked after an asynchronous gap.\n    if (!context.mounted) return;\n\n    // After the Selection Screen returns a result, hide any previous snackbars\n    // and show the new result.\n    ScaffoldMessenger.of(context)\n      ..removeCurrentSnackBar()\n      ..showSnackBar(SnackBar(content: Text('$result')));\n  }\n\n}\n\nclass SelectionScreen extends StatelessWidget {\n  const SelectionScreen({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: const Text('Pick an option')),\n      body: Center(\n        child: Column(\n          mainAxisAlignment: MainAxisAlignment.center,\n          children: <Widget>[\n            Padding(\n              padding: const EdgeInsets.all(8),\n              child: ElevatedButton(\n                onPressed: () {\n                  // Close the screen and return \"Yep!\" as the result.\n                  Navigator.pop(context, 'Yep!');\n                },\n                child: const Text('Yep!'),\n              ),\n            ),\n            Padding(\n              padding: const EdgeInsets.all(8),\n              child: ElevatedButton(\n                onPressed: () {\n                  // Close the screen and return \"Nope.\" as the result.\n                  Navigator.pop(context, 'Nope.');\n                },\n                child: const Text('Nope.'),\n              ),\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Add css_colors Dependency in pubspec.yaml\nDESCRIPTION: This YAML snippet demonstrates how to add the `css_colors` package as a dependency in the `pubspec.yaml` file. It also includes the Flutter SDK dependency. This package provides color constants for CSS colors.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/packages-and-plugins/using-packages.md#_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  flutter:\n    sdk: flutter\n  css_colors: ^1.0.0\n```\n\n----------------------------------------\n\nTITLE: Complete Flutter HTTP Get Example\nDESCRIPTION: This snippet shows a complete Flutter application that fetches data from a REST API using the `http` package. It defines an `Album` class to represent the data, a `fetchAlbum` function to make the API call and parse the JSON response, and a `MyApp` widget to display the data in a UI using `FutureBuilder`. The `fetchAlbum` function uses `http.get()` to make the API request and `jsonDecode()` to parse the JSON response. The `FutureBuilder` widget handles the asynchronous operation and displays the data when it's available, or an error message if there's an error.  It includes error handling for non-200 status codes. Requires the `http` package.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/networking/fetch-data.md#_snippet_7\n\nLANGUAGE: Dart\nCODE:\n```\nimport 'dart:async';\nimport 'dart:convert';\n\nimport 'package:flutter/material.dart';\nimport 'package:http/http.dart' as http;\n\nFuture<Album> fetchAlbum() async {\n  final response = await http.get(\n    Uri.parse('https://jsonplaceholder.typicode.com/albums/1'),\n  );\n\n  if (response.statusCode == 200) {\n    // If the server did return a 200 OK response,\n    // then parse the JSON.\n    return Album.fromJson(jsonDecode(response.body) as Map<String, dynamic>);\n  } else {\n    // If the server did not return a 200 OK response,\n    // then throw an exception.\n    throw Exception('Failed to load album');\n  }\n}\n\nclass Album {\n  final int userId;\n  final int id;\n  final String title;\n\n  const Album({required this.userId, required this.id, required this.title});\n\n  factory Album.fromJson(Map<String, dynamic> json) {\n    return switch (json) {\n      {'userId': int userId, 'id': int id, 'title': String title} => Album(\n        userId: userId,\n        id: id,\n        title: title,\n      ),\n      _ => throw const FormatException('Failed to load album.'),\n    };\n  }\n}\n\nvoid main() => runApp(const MyApp());\n\nclass MyApp extends StatefulWidget {\n  const MyApp({super.key});\n\n  @override\n  State<MyApp> createState() => _MyAppState();\n}\n\nclass _MyAppState extends State<MyApp> {\n  late Future<Album> futureAlbum;\n\n  @override\n  void initState() {\n    super.initState();\n    futureAlbum = fetchAlbum();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: 'Fetch Data Example',\n      theme: ThemeData(\n        colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),\n      ),\n      home: Scaffold(\n        appBar: AppBar(title: const Text('Fetch Data Example')),\n        body: Center(\n          child: FutureBuilder<Album>(\n            future: futureAlbum,\n            builder: (context, snapshot) {\n              if (snapshot.hasData) {\n                return Text(snapshot.data!.title);\n              } else if (snapshot.hasError) {\n                return Text('${snapshot.error}');\n              }\n\n              // By default, show a loading spinner.\n              return const CircularProgressIndicator();\n            },\n          ),\n        ),\n      ),\n    );\n  }\n\n}\n\n```\n\n----------------------------------------\n\nTITLE: Complete Flutter Example with Text Field Focus Control\nDESCRIPTION: This complete Flutter example demonstrates how to use `FocusNode` to control the focus of a `TextField`. It includes creating and disposing of the `FocusNode`, associating it with a `TextField`, and requesting focus when a button is tapped, along with an example of autofocus.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/forms/focus.md#_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\n\nvoid main() => runApp(const MyApp());\n\nclass MyApp extends StatelessWidget {\n  const MyApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return const MaterialApp(title: 'Text Field Focus', home: MyCustomForm());\n  }\n}\n\n// Define a custom Form widget.\nclass MyCustomForm extends StatefulWidget {\n  const MyCustomForm({super.key});\n\n  @override\n  State<MyCustomForm> createState() => _MyCustomFormState();\n}\n\n// Define a corresponding State class.\n// This class holds data related to the form.\nclass _MyCustomFormState extends State<MyCustomForm> {\n  // Define the focus node. To manage the lifecycle, create the FocusNode in\n  // the initState method, and clean it up in the dispose method.\n  late FocusNode myFocusNode;\n\n  @override\n  void initState() {\n    super.initState();\n\n    myFocusNode = FocusNode();\n  }\n\n  @override\n  void dispose() {\n    // Clean up the focus node when the Form is disposed.\n    myFocusNode.dispose();\n\n    super.dispose();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: const Text('Text Field Focus')),\n      body: Padding(\n        padding: const EdgeInsets.all(16),\n        child: Column(\n          children: [\n            // The first text field is focused on as soon as the app starts.\n            const TextField(autofocus: true),\n            // The second text field is focused on when a user taps the\n            // FloatingActionButton.\n            TextField(focusNode: myFocusNode),\n          ],\n        ),\n      ),\n      floatingActionButton: FloatingActionButton(\n        // When the button is pressed,\n        // give focus to the text field using myFocusNode.\n        onPressed: () => myFocusNode.requestFocus(),\n        tooltip: 'Focus Second Text Field',\n        child: const Icon(Icons.edit),\n      ), // This trailing comma makes auto-formatting nicer for build methods.\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring LLM for JSON Responses in Dart\nDESCRIPTION: This code snippet shows how to configure an LLM (specifically GeminiProvider) to respond in JSON format with a predefined schema. It sets the `responseMimeType` to `'application/json'` and provides a `Schema` object and system instructions defining the expected JSON structure within the `GenerationConfig` object.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ai-toolkit/feature-integration.md#_snippet_14\n\nLANGUAGE: dart\nCODE:\n```\nclass _HomePageState extends State<HomePage> {\n  ...\n\n  // create a new provider with the given history and the current settings\n  LlmProvider _createProvider([List<ChatMessage>? history]) => GeminiProvider(\n        ...\n        model: GenerativeModel(\n          ...\n          generationConfig: GenerationConfig(\n            responseMimeType: 'application/json',\n            responseSchema: Schema(...),\n          systemInstruction: Content.system('''\n...\nGenerate each response in JSON format\nwith the following schema, including one or more \\\"text\\\" and \\\"recipe\\\" pairs as\nwell as any trailing text commentary you care to provide:\n\n{\n  \\\"recipes\\\": [\n    {\n      \\\"text\\\": \\\"Any commentary you care to provide about the recipe.\\\",\n      \\\"recipe\\\":\n      {\n        \\\"title\\\": \\\"Recipe Title\\\",\n        \\\"description\\\": \\\"Recipe Description\\\",\n        \\\"ingredients\\\": [\\\"Ingredient 1\\\", \\\"Ingredient 2\\\", \\\"Ingredient 3\\\"],\n        \\\"instructions\\\": [\\\"Instruction 1\\\", \\\"Instruction 2\\\", \\\"Instruction 3\\\"]\n      }\n    }\n  ],\n  \\\"text\\\": \\\"any final commentary you care to provide\\\",\n}\n''',\n          ),\n        ),\n      );\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Update ColorScheme to fromSeed (After) - Dart\nDESCRIPTION: This snippet shows the updated ColorScheme configuration after migrating to Material 3, using ColorScheme.fromSeed to generate a harmonious color palette based on a seed color. This resolves potential UI inconsistencies introduced by the 3.16 release and ensures a visually coherent and accessible user interface.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/material-3-migration.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\ntheme: ThemeData(\n  colorScheme: ColorScheme.fromSeed(seedColor: Colors.blue),\n),\n```\n\n----------------------------------------\n\nTITLE: Complete example using SharedPreferences - Dart\nDESCRIPTION: This is a complete Flutter example demonstrating how to use the `shared_preferences` package to persist and retrieve an integer counter. The app displays the counter value and increments it when a button is pressed. The `_loadCounter` method retrieves the persisted value on app startup, and the `_incrementCounter` method saves the updated value after each increment.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/persistence/key-value.md#_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\nimport 'package:shared_preferences/shared_preferences.dart';\n\nvoid main() => runApp(const MyApp());\n\nclass MyApp extends StatelessWidget {\n  const MyApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return const MaterialApp(\n      title: 'Shared preferences demo',\n      home: MyHomePage(title: 'Shared preferences demo'),\n    );\n  }\n}\n\nclass MyHomePage extends StatefulWidget {\n  const MyHomePage({super.key, required this.title});\n\n  final String title;\n\n  @override\n  State<MyHomePage> createState() => _MyHomePageState();\n}\n\nclass _MyHomePageState extends State<MyHomePage> {\n  int _counter = 0;\n\n  @override\n  void initState() {\n    super.initState();\n    _loadCounter();\n  }\n\n  /// Load the initial counter value from persistent storage on start,\n  /// or fallback to 0 if it doesn't exist.\n  Future<void> _loadCounter() async {\n    final prefs = await SharedPreferences.getInstance();\n    setState(() {\n      _counter = prefs.getInt('counter') ?? 0;\n    });\n  }\n\n  /// After a click, increment the counter state and\n  /// asynchronously save it to persistent storage.\n  Future<void> _incrementCounter() async {\n    final prefs = await SharedPreferences.getInstance();\n    setState(() {\n      _counter = (prefs.getInt('counter') ?? 0) + 1;\n      prefs.setInt('counter', _counter);\n    });\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: Text(widget.title)),\n      body: Center(\n        child: Column(\n          mainAxisAlignment: MainAxisAlignment.center,\n          children: [\n            const Text('You have pushed the button this many times: '),\n            Text(\n              '$_counter',\n              style: Theme.of(context).textTheme.headlineMedium,\n            ),\n          ],\n        ),\n      ),\n      floatingActionButton: FloatingActionButton(\n        onPressed: _incrementCounter,\n        tooltip: 'Increment',\n        child: const Icon(Icons.add),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Camera App Example\nDESCRIPTION: This code shows a complete example of using the camera plugin in a Flutter app. It initializes the camera, allows users to take a picture, and displays the captured image on a new screen. It requires the `camera` and `path_provider` plugins.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/plugins/picture-using-camera.md#_snippet_7\n\nLANGUAGE: Dart\nCODE:\n```\nimport 'dart:async';\nimport 'dart:io';\n\nimport 'package:camera/camera.dart';\nimport 'package:flutter/material.dart';\n\nFuture<void> main() async {\n  // Ensure that plugin services are initialized so that `availableCameras()`\n  // can be called before `runApp()`\n  WidgetsFlutterBinding.ensureInitialized();\n\n  // Obtain a list of the available cameras on the device.\n  final cameras = await availableCameras();\n\n  // Get a specific camera from the list of available cameras.\n  final firstCamera = cameras.first;\n\n  runApp(\n    MaterialApp(\n      theme: ThemeData.dark(),\n      home: TakePictureScreen(\n        // Pass the appropriate camera to the TakePictureScreen widget.\n        camera: firstCamera,\n      ),\n    ),\n  );\n}\n\n// A screen that allows users to take a picture using a given camera.\nclass TakePictureScreen extends StatefulWidget {\n  const TakePictureScreen({super.key, required this.camera});\n\n  final CameraDescription camera;\n\n  @override\n  TakePictureScreenState createState() => TakePictureScreenState();\n}\n\nclass TakePictureScreenState extends State<TakePictureScreen> {\n  late CameraController _controller;\n  late Future<void> _initializeControllerFuture;\n\n  @override\n  void initState() {\n    super.initState();\n    // To display the current output from the Camera,\n    // create a CameraController.\n    _controller = CameraController(\n      // Get a specific camera from the list of available cameras.\n      widget.camera,\n      // Define the resolution to use.\n      ResolutionPreset.medium,\n    );\n\n    // Next, initialize the controller. This returns a Future.\n    _initializeControllerFuture = _controller.initialize();\n  }\n\n  @override\n  void dispose() {\n    // Dispose of the controller when the widget is disposed.\n    _controller.dispose();\n    super.dispose();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: const Text('Take a picture')),\n      // You must wait until the controller is initialized before displaying the\n      // camera preview. Use a FutureBuilder to display a loading spinner until the\n      // controller has finished initializing.\n      body: FutureBuilder<void>(\n        future: _initializeControllerFuture,\n        builder: (context, snapshot) {\n          if (snapshot.connectionState == ConnectionState.done) {\n            // If the Future is complete, display the preview.\n            return CameraPreview(_controller);\n          } else {\n            // Otherwise, display a loading indicator.\n            return const Center(child: CircularProgressIndicator());\n          }\n        },\n      ),\n      floatingActionButton: FloatingActionButton(\n        // Provide an onPressed callback.\n        onPressed: () async {\n          // Take the Picture in a try / catch block. If anything goes wrong,\n          // catch the error.\n          try {\n            // Ensure that the camera is initialized.\n            await _initializeControllerFuture;\n\n            // Attempt to take a picture and get the file `image`\n            // where it was saved.\n            final image = await _controller.takePicture();\n\n            if (!context.mounted) return;\n\n            // If the picture was taken, display it on a new screen.\n            await Navigator.of(context).push(\n              MaterialPageRoute(\n                builder:\n                    (context) => DisplayPictureScreen(\n                      // Pass the automatically generated path to\n                      // the DisplayPictureScreen widget.\n                      imagePath: image.path,\n                    ),\n              ),\n            );\n          } catch (e) {\n            // If an error occurs, log the error to the console.\n            print(e);\n          }\n        },\n        child: const Icon(Icons.camera_alt),\n      ),\n    );\n  }\n}\n\n// A widget that displays the picture taken by the user.\nclass DisplayPictureScreen extends StatelessWidget {\n  final String imagePath;\n\n  const DisplayPictureScreen({super.key, required this.imagePath});\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: const Text('Display the Picture')),\n      // The image is stored as a file on the device. Use the `Image.file`\n      // constructor with the given path to display the image.\n      body: Image.file(File(imagePath)),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Submit Button with Validation Flutter\nDESCRIPTION: This snippet demonstrates how to create an ElevatedButton that validates a Flutter form upon being pressed. It retrieves the form state using the GlobalKey and calls the validate() method. If the form is valid, a success message is displayed. If not, error messages are shown on the TextFormFields.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/forms/validation.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nElevatedButton(\n  onPressed: () {\n    // Validate returns true if the form is valid, or false otherwise.\n    if (_formKey.currentState!.validate()) {\n      // If the form is valid, display a snackbar. In the real world,\n      // you'd often call a server or save the information in a database.\n      ScaffoldMessenger.of(context).showSnackBar(\n        const SnackBar(content: Text('Processing Data')),\n      );\n    }\n  },\n  child: const Text('Submit'),\n),\n```\n\n----------------------------------------\n\nTITLE: User Class with Nested Address and explicitToJson in Dart\nDESCRIPTION: This snippet demonstrates a `User` class that contains a nested `Address` object. It shows how to use `@JsonSerializable` with `explicitToJson: true` to ensure nested objects are properly serialized to JSON. It includes the necessary `fromJson` and `toJson` methods.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/data-and-backend/serialization/json.md#_snippet_13\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:json_annotation/json_annotation.dart';\n\nimport 'address.dart';\n\npart 'user.g.dart';\n\n@JsonSerializable(explicitToJson: true)\nclass User {\n  User(this.name, this.address);\n\n  String name;\n  Address address;\n\n  factory User.fromJson(Map<String, dynamic> json) => _$UserFromJson(json);\n  Map<String, dynamic> toJson() => _$UserToJson(this);\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing MaterialApp with ThemeData in Flutter\nDESCRIPTION: This code snippet demonstrates how to initialize a `MaterialApp` widget with a custom `ThemeData`. It shows how to define the default brightness, colors using `ColorScheme.fromSeed`, and text styles using `TextTheme`, including integrating Google Fonts.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/design/themes.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nMaterialApp(\n  title: appName,\n  theme: ThemeData(\n    // Define the default brightness and colors.\n    colorScheme: ColorScheme.fromSeed(\n      seedColor: Colors.purple,\n      // ···\n      brightness: Brightness.dark,\n    ),\n\n    // Define the default `TextTheme`. Use this to specify the default\n    // text styling for headlines, titles, bodies of text, and more.\n    textTheme: TextTheme(\n      displayLarge: const TextStyle(\n        fontSize: 72,\n        fontWeight: FontWeight.bold,\n      ),\n      // ···\n      titleLarge: GoogleFonts.oswald(\n        fontSize: 30,\n        fontStyle: FontStyle.italic,\n      ),\n      bodyMedium: GoogleFonts.merriweather(),\n      displaySmall: GoogleFonts.pacifico(),\n    ),\n  ),\n  home: const MyHomePage(title: appName),\n);\n```\n\n----------------------------------------\n\nTITLE: Specifying supported platforms for a plugin\nDESCRIPTION: This YAML snippet demonstrates how to specify the platforms a plugin supports in the `pubspec.yaml` file using the `platforms` map. It shows an example for a plugin that supports only Android and iOS.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/packages-and-plugins/developing-packages.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nflutter:\n  plugin:\n    platforms:\n      android:\n        package: com.example.hello\n        pluginClass: HelloPlugin\n      ios:\n        pluginClass: HelloPlugin\n```\n\n----------------------------------------\n\nTITLE: User Model Class with JSON Serialization\nDESCRIPTION: Defines a `User` model class with `fromJson` and `toJson` methods for manual JSON serialization.  The `fromJson` constructor parses a `Map<String, dynamic>` and creates a `User` instance, while the `toJson` method converts a `User` instance to a `Map<String, dynamic>`. This ensures type safety and compile-time checks.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/data-and-backend/serialization/json.md#_snippet_2\n\nLANGUAGE: Dart\nCODE:\n```\nclass User {\n  final String name;\n  final String email;\n\n  User(this.name, this.email);\n\n  User.fromJson(Map<String, dynamic> json)\n    : name = json['name'] as String,\n      email = json['email'] as String;\n\n  Map<String, dynamic> toJson() => {'name': name, 'email': email};\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Gemini AI Provider in Flutter\nDESCRIPTION: Demonstrates how to initialize the Gemini AI provider using the `google_generative_ai` package and integrate it with the `LlmChatView` from `flutter_ai_toolkit`.  Requires obtaining an API key from Gemini AI Studio.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ai-toolkit/index.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:google_generative_ai/google_generative_ai.dart';\nimport 'package:flutter_ai_toolkit/flutter_ai_toolkit.dart';\n\n// ... app stuff here\n\nclass ChatPage extends StatelessWidget {\n  const ChatPage({super.key});\n\n  @override\n  Widget build(BuildContext context) => Scaffold(\n        appBar: AppBar(title: const Text(App.title)),\n        body: LlmChatView(\n          provider: GeminiProvider(\n            model: GenerativeModel(\n              model: 'gemini-2.0-flash',\n              apiKey: 'GEMINI-API-KEY',\n            ),\n          ),\n        ),\n      );\n}\n```\n\n----------------------------------------\n\nTITLE: Handling All Types of Errors in Flutter\nDESCRIPTION: This code snippet demonstrates a comprehensive approach to handling various error types in Flutter applications. It sets up handlers for both Flutter-caught errors (FlutterError.onError) and errors not caught by Flutter (PlatformDispatcher.instance.onError). It also defines a custom error widget to be displayed during build phase errors, effectively providing a centralized error handling mechanism.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/testing/errors.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\nimport 'dart:ui';\n\nFuture<void> main() async {\n  await myErrorsHandler.initialize();\n  FlutterError.onError = (details) {\n    FlutterError.presentError(details);\n    myErrorsHandler.onErrorDetails(details);\n  };\n  PlatformDispatcher.instance.onError = (error, stack) {\n    myErrorsHandler.onError(error, stack);\n    return true;\n  };\n  runApp(const MyApp());\n}\n\nclass MyApp extends StatelessWidget {\n  const MyApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      builder: (context, widget) {\n        Widget error = const Text('...rendering error...');\n        if (widget is Scaffold || widget is Navigator) {\n          error = Scaffold(body: Center(child: error));\n        }\n        ErrorWidget.builder = (errorDetails) => error;\n        if (widget != null) return widget;\n        throw StateError('widget is null');\n      },\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Form Validation Example Flutter\nDESCRIPTION: This complete example demonstrates how to implement form validation in Flutter using a Form, GlobalKey, TextFormField, and ElevatedButton. It includes UI elements, validation logic, and a submission handler that displays a snackbar message upon successful validation.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/forms/validation.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\n\nvoid main() => runApp(const MyApp());\n\nclass MyApp extends StatelessWidget {\n  const MyApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    const appTitle = 'Form Validation Demo';\n\n    return MaterialApp(\n      title: appTitle,\n      home: Scaffold(\n        appBar: AppBar(title: const Text(appTitle)),\n        body: const MyCustomForm(),\n      ),\n    );\n  }\n}\n\n// Create a Form widget.\nclass MyCustomForm extends StatefulWidget {\n  const MyCustomForm({super.key});\n\n  @override\n  MyCustomFormState createState() {\n    return MyCustomFormState();\n  }\n}\n\n// Create a corresponding State class.\n// This class holds data related to the form.\nclass MyCustomFormState extends State<MyCustomForm> {\n  // Create a global key that uniquely identifies the Form widget\n  // and allows validation of the form.\n  //\n  // Note: This is a GlobalKey<FormState>,\n  // not a GlobalKey<MyCustomFormState>.\n  final _formKey = GlobalKey<FormState>();\n\n  @override\n  Widget build(BuildContext context) {\n    // Build a Form widget using the _formKey created above.\n    return Form(\n      key: _formKey,\n      child: Column(\n        crossAxisAlignment: CrossAxisAlignment.start,\n        children: [\n          TextFormField(\n            // The validator receives the text that the user has entered.\n            validator: (value) {\n              if (value == null || value.isEmpty) {\n                return 'Please enter some text';\n              }\n              return null;\n            },\n          ),\n          Padding(\n            padding: const EdgeInsets.symmetric(vertical: 16),\n            child: ElevatedButton(\n              onPressed: () {\n                // Validate returns true if the form is valid, or false otherwise.\n                if (_formKey.currentState!.validate()) {\n                  // If the form is valid, display a snackbar. In the real world,\n                  // you'd often call a server or save the information in a database.\n                  ScaffoldMessenger.of(context).showSnackBar(\n                    const SnackBar(content: Text('Processing Data')),\n                  );\n                }\n              },\n              child: const Text('Submit'),\n            ),\n          ),\n        ],\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Define a Data Model Class in Dart\nDESCRIPTION: This code defines a data model class `Album` with properties `userId`, `id`, and `title`. It also includes a factory constructor `fromJson` to create an `Album` object from a JSON map, employing pattern matching for parsing. A `FormatException` is thrown if parsing fails.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/networking/fetch-data.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nclass Album {\n  final int userId;\n  final int id;\n  final String title;\n\n  const Album({required this.userId, required this.id, required this.title});\n\n  factory Album.fromJson(Map<String, dynamic> json) {\n    return switch (json) {\n      {'userId': int userId, 'id': int id, 'title': String title} => Album(\n        userId: userId,\n        id: id,\n        title: title,\n      ),\n      _ => throw const FormatException('Failed to load album.'),\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Widget Test Example\nDESCRIPTION: This is a complete example of a widget test that covers entering text, tapping a button to add an item to a list, and swiping the item to dismiss it. It uses various methods of the `WidgetTester` class to simulate user interactions and verify the expected outcomes.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/testing/widget/tap-drag.md#_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\nimport 'package:flutter_test/flutter_test.dart';\n\nvoid main() {\n  testWidgets('Add and remove a todo', (tester) async {\n    // Build the widget.\n    await tester.pumpWidget(const TodoList());\n\n    // Enter 'hi' into the TextField.\n    await tester.enterText(find.byType(TextField), 'hi');\n\n    // Tap the add button.\n    await tester.tap(find.byType(FloatingActionButton));\n\n    // Rebuild the widget with the new item.\n    await tester.pump();\n\n    // Expect to find the item on screen.\n    expect(find.text('hi'), findsOneWidget);\n\n    // Swipe the item to dismiss it.\n    await tester.drag(find.byType(Dismissible), const Offset(500, 0));\n\n    // Build the widget until the dismiss animation ends.\n    await tester.pumpAndSettle();\n\n    // Ensure that the item is no longer on screen.\n    expect(find.text('hi'), findsNothing);\n  });\n}\n\nclass TodoList extends StatefulWidget {\n  const TodoList({super.key});\n\n  @override\n  State<TodoList> createState() => _TodoListState();\n}\n\nclass _TodoListState extends State<TodoList> {\n  static const _appTitle = 'Todo List';\n  final todos = <String>[];\n  final controller = TextEditingController();\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: _appTitle,\n      home: Scaffold(\n        appBar: AppBar(title: const Text(_appTitle)),\n        body: Column(\n          children: [\n            TextField(controller: controller),\n            Expanded(\n              child: ListView.builder(\n                itemCount: todos.length,\n                itemBuilder: (context, index) {\n                  final todo = todos[index];\n\n                  return Dismissible(\n                    key: Key('$todo$index'),\n                    onDismissed: (direction) => todos.removeAt(index),\n                    background: Container(color: Colors.red),\n                    child: ListTile(title: Text(todo)),\n                  );\n                },\n              ),\n            ),\n          ],\n        ),\n        floatingActionButton: FloatingActionButton(\n          onPressed: () {\n            setState(() {\n              todos.add(controller.text);\n              controller.clear();\n            });\n          },\n          child: const Icon(Icons.add),\n        ),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Serializable User Class in Dart\nDESCRIPTION: This snippet demonstrates how to create a `User` class that can be serialized to and from JSON using the `json_serializable` package. It includes the necessary imports, annotations (`@JsonSerializable`), and factory methods (`fromJson` and `toJson`) to enable automatic code generation for JSON serialization.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/data-and-backend/serialization/json.md#_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:json_annotation/json_annotation.dart';\n\n/// This allows the `User` class to access private members in\n/// the generated file. The value for this is *.g.dart, where\n/// the star denotes the source file name.\npart 'user.g.dart';\n\n/// An annotation for the code generator to know that this class needs the\n/// JSON serialization logic to be generated.\n@JsonSerializable()\nclass User {\n  User(this.name, this.email);\n\n  String name;\n  String email;\n\n  /// A necessary factory constructor for creating a new User instance\n  /// from a map. Pass the map to the generated `_$UserFromJson()` constructor.\n  /// The constructor is named after the source class, in this case, User.\n  factory User.fromJson(Map<String, dynamic> json) => _$UserFromJson(json);\n\n  /// `toJson` is the convention for a class to declare support for serialization\n  /// to JSON. The implementation simply calls the private, generated\n  /// helper method `_$UserToJson`.\n  Map<String, dynamic> toJson() => _$UserToJson(this);\n}\n```\n\n----------------------------------------\n\nTITLE: Convert HTTP Response to Dart Object\nDESCRIPTION: This asynchronous function `fetchAlbum` makes an HTTP GET request and converts the response to an `Album` object. It checks the response status code; if it's 200 (OK), it parses the JSON response body using `jsonDecode` and creates an `Album` using the `fromJson` factory. Otherwise, it throws an exception.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/networking/fetch-data.md#_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nFuture<Album> fetchAlbum() async {\n  final response = await http.get(\n    Uri.parse('https://jsonplaceholder.typicode.com/albums/1'),\n  );\n\n  if (response.statusCode == 200) {\n    // If the server did return a 200 OK response,\n    // then parse the JSON.\n    return Album.fromJson(jsonDecode(response.body) as Map<String, dynamic>);\n  } else {\n    // If the server did not return a 200 OK response,\n    // then throw an exception.\n    throw Exception('Failed to load album');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Flutter Mixed Lists Hands-On Example in Dart\nDESCRIPTION: This code provides a complete Flutter application that demonstrates how to create a mixed list with different types of items using `ListView.builder`. It defines the data model with `ListItem`, `HeadingItem`, and `MessageItem` and shows how to generate the data and display it in a list. The example is wrapped in a DartPad compatible structure, for an interactive, runnable environment.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/lists/mixed-list.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\n\nvoid main() {\n  runApp(\n    MyApp(\n      items: List<ListItem>.generate(\n        1000,\n        (i) =>\n            i % 6 == 0\n                ? HeadingItem('Heading $i')\n                : MessageItem('Sender $i', 'Message body $i'),\n      ),\n    ),\n  );\n}\n\nclass MyApp extends StatelessWidget {\n  final List<ListItem> items;\n\n  const MyApp({super.key, required this.items});\n\n  @override\n  Widget build(BuildContext context) {\n    const title = 'Mixed List';\n\n    return MaterialApp(\n      title: title,\n      home: Scaffold(\n        appBar: AppBar(title: const Text(title)),\n        body: ListView.builder(\n          // Let the ListView know how many items it needs to build.\n          itemCount: items.length,\n          // Provide a builder function. This is where the magic happens.\n          // Convert each item into a widget based on the type of item it is.\n          itemBuilder: (context, index) {\n            final item = items[index];\n\n            return ListTile(\n              title: item.buildTitle(context),\n              subtitle: item.buildSubtitle(context),\n            );\n          },\n        ),\n      ),\n    );\n  }\n}\n\n/// The base class for the different types of items the list can contain.\nabstract class ListItem {\n  /// The title line to show in a list item.\n  Widget buildTitle(BuildContext context);\n\n  /// The subtitle line, if any, to show in a list item.\n  Widget buildSubtitle(BuildContext context);\n}\n\n/// A ListItem that contains data to display a heading.\nclass HeadingItem implements ListItem {\n  final String heading;\n\n  HeadingItem(this.heading);\n\n  @override\n  Widget buildTitle(BuildContext context) {\n    return Text(heading, style: Theme.of(context).textTheme.headlineSmall);\n  }\n\n  @override\n  Widget buildSubtitle(BuildContext context) => const SizedBox.shrink();\n}\n\n/// A ListItem that contains data to display a message.\nclass MessageItem implements ListItem {\n  final String sender;\n  final String body;\n\n  MessageItem(this.sender, this.body);\n\n  @override\n  Widget buildTitle(BuildContext context) => Text(sender);\n\n  @override\n  Widget buildSubtitle(BuildContext context) => Text(body);\n}\n```\n\n----------------------------------------\n\nTITLE: Define Album Class with JSON Factory in Dart\nDESCRIPTION: Defines a Dart class Album with id and title properties. Includes a factory constructor fromJson to create Album instances from JSON data. Uses pattern matching to extract id and title from the JSON map, throwing an exception if the expected format is not met.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/networking/send-data.md#_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nclass Album {\n  final int id;\n  final String title;\n\n  const Album({required this.id, required this.title});\n\n  factory Album.fromJson(Map<String, dynamic> json) {\n    return switch (json) {\n      {'id': int id, 'title': String title} => Album(id: id, title: title),\n      _ => throw const FormatException('Failed to load album.'),\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Dispose TextEditingController - Flutter\nDESCRIPTION: This snippet shows how to properly dispose of a `TextEditingController` in Flutter within the `dispose` method of a `StatefulWidget`. Disposing the controller releases resources and prevents memory leaks by removing the text change listener.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/forms/text-field-changes.md#_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\n@override\nvoid dispose() {\n  // Clean up the controller when the widget is removed from the widget tree.\n  // This also removes the _printLatestValue listener.\n  myController.dispose();\n  super.dispose();\n}\n```\n\n----------------------------------------\n\nTITLE: Opening a SQLite Database Connection\nDESCRIPTION: This snippet demonstrates how to open a connection to an SQLite database using the `sqflite` package. It uses `getDatabasesPath()` to determine the appropriate database directory for the platform, `join` from the `path` package to construct the full path to the database file ('doggie_database.db'), and `openDatabase()` to establish the connection.  `WidgetsFlutterBinding.ensureInitialized()` is called before opening the database to ensure that the Flutter framework is initialized.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/persistence/sqlite.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\n// Avoid errors caused by flutter upgrade.\n// Importing 'package:flutter/widgets.dart' is required.\nWidgetsFlutterBinding.ensureInitialized();\n// Open the database and store the reference.\nfinal database = openDatabase(\n  // Set the path to the database. Note: Using the `join` function from the\n  // `path` package is best practice to ensure the path is correctly\n  // constructed for each platform.\n  join(await getDatabasesPath(), 'doggie_database.db'),\n);\n```\n\n----------------------------------------\n\nTITLE: Creating and Disposing a FocusNode in Flutter\nDESCRIPTION: This code snippet demonstrates how to create a `FocusNode` in the `initState` method of a `State` class and properly dispose of it in the `dispose` method. This is crucial for managing the lifecycle of long-lived focus nodes and preventing memory leaks.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/forms/focus.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\n// Define a custom Form widget.\nclass MyCustomForm extends StatefulWidget {\n  const MyCustomForm({super.key});\n\n  @override\n  State<MyCustomForm> createState() => _MyCustomFormState();\n}\n\n// Define a corresponding State class.\n// This class holds data related to the form.\nclass _MyCustomFormState extends State<MyCustomForm> {\n  // Define the focus node. To manage the lifecycle, create the FocusNode in\n  // the initState method, and clean it up in the dispose method.\n  late FocusNode myFocusNode;\n\n  @override\n  void initState() {\n    super.initState();\n\n    myFocusNode = FocusNode();\n  }\n\n  @override\n  void dispose() {\n    // Clean up the focus node when the Form is disposed.\n    myFocusNode.dispose();\n\n    super.dispose();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    // Fill this out in the next step.\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using localized text in AppBar title - Dart\nDESCRIPTION: This code snippet demonstrates how to use the `AppLocalizations` class to display localized text in the `AppBar` title. It retrieves the `helloWorld` message based on the current locale.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/accessibility-and-internationalization/internationalization.md#_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\nappBar: AppBar(\n  // The [AppBar] title text should update its message\n  // according to the system locale of the target platform.\n  // Switching between English and Spanish locales should\n  // cause this text to update.\n  title: Text(AppLocalizations.of(context)!.helloWorld),\n),\n```\n\n----------------------------------------\n\nTITLE: Updating pubspec.yaml to include custom fonts\nDESCRIPTION: This YAML configuration demonstrates how to declare custom fonts (Raleway and RobotoMono) in the `pubspec.yaml` file, specifying the font family name, asset paths, styles (italic), and weights (700).  This makes the fonts available for use within the Flutter application.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/design/fonts.md#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nname: custom_fonts\ndescription: An example of how to use custom fonts with Flutter\n\ndependencies:\n  flutter:\n    sdk: flutter\n\ndev_dependencies:\n  flutter_test:\n    sdk: flutter\n\nflutter:\n  fonts:\n    - family: Raleway\n      fonts:\n        - asset: fonts/Raleway-Regular.ttf\n        - asset: fonts/Raleway-Italic.ttf\n          style: italic\n    - family: RobotoMono\n      fonts:\n        - asset: fonts/RobotoMono-Regular.ttf\n        - asset: fonts/RobotoMono-Bold.ttf\n          weight: 700\n  uses-material-design: true\n```\n\n----------------------------------------\n\nTITLE: Using TextEditingController with TextField in Flutter\nDESCRIPTION: This Dart snippet showcases how to use a `TextEditingController` with a `TextField` widget in Flutter. The `TextEditingController` manages the text field's content, and the snippet demonstrates how to access the entered text when a submit button is pressed, displaying it in an alert dialog. It also includes basic styling using `InputDecoration`.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/react-native-devs.md#_snippet_52\n\nLANGUAGE: Dart\nCODE:\n```\nfinal TextEditingController _controller = TextEditingController();\n\n@override\nWidget build(BuildContext context) {\n  return Column(\n    children: [\n      TextField(\n        controller: _controller,\n        decoration: const InputDecoration(\n          hintText: 'Type something',\n          labelText: 'Text Field',\n        ),\n      ),\n      ElevatedButton(\n        child: const Text('Submit'),\n        onPressed: () {\n          showDialog(\n            context: context,\n            builder: (context) {\n              return AlertDialog(\n                title: const Text('Alert'),\n                content: Text('You typed ${_controller.text}'),\n              );\n            },\n          );\n        },\n      ),\n    ],\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Display Data with FutureBuilder in Flutter\nDESCRIPTION: This code snippet demonstrates how to use `FutureBuilder` to display data fetched asynchronously. It takes a `Future<Album>` and a `builder` function. The builder handles different states: displaying the album title if data is available, showing an error message if an error occurred, or showing a loading spinner by default.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/networking/fetch-data.md#_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nFutureBuilder<Album>(\n  future: futureAlbum,\n  builder: (context, snapshot) {\n    if (snapshot.hasData) {\n      return Text(snapshot.data!.title);\n    } else if (snapshot.hasError) {\n      return Text('${snapshot.error}');\n    }\n\n    // By default, show a loading spinner.\n    return const CircularProgressIndicator();\n  },\n)\n```\n\n----------------------------------------\n\nTITLE: Using StatefulWidget in Flutter\nDESCRIPTION: This code demonstrates the simplest way to manage state in Flutter using a StatefulWidget. It encapsulates the state (count) within the widget and updates it using setState.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/fundamentals/state-management.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nclass MyCounter extends StatefulWidget {\n  const MyCounter({super.key});\n\n  @override\n  State<MyCounter> createState() => _MyCounterState();\n}\n\nclass _MyCounterState extends State<MyCounter> {\n  int count = 0;\n\n  @override\n  Widget build(BuildContext context) {\n    return Column(\n      children: [\n        Text('Count: $count'),\n        TextButton(\n          onPressed: () {\n            setState(() {\n              count++;\n            });\n          },\n          child: Text('Increment'),\n        )\n      ],\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Keyboard Shortcuts with Shortcuts and Actions\nDESCRIPTION: This snippet demonstrates how to use the `Shortcuts` and `Actions` widgets to implement keyboard shortcuts in a Flutter application. It defines a custom `Intent` (CreateNewItemIntent) and binds it to a key combination (Control+N). The `Actions` widget then maps the intent to a specific method (_createNewItem()). The subtree needs to be wrapped in a focusNode to receive focus.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/adaptive-responsive/input.md#_snippet_4\n\nLANGUAGE: Dart\nCODE:\n```\n// Define a class for each type of shortcut action you want\nclass CreateNewItemIntent extends Intent {\n  const CreateNewItemIntent();\n}\n\nWidget build(BuildContext context) {\n  return Shortcuts(\n    // Bind intents to key combinations\n    shortcuts: const <ShortcutActivator, Intent>{\n      SingleActivator(LogicalKeyboardKey.keyN, control: true):\n          CreateNewItemIntent(),\n    },\n    child: Actions(\n      // Bind intents to an actual method in your code\n      actions: <Type, Action<Intent>>{\n        CreateNewItemIntent: CallbackAction<CreateNewItemIntent>(\n          onInvoke: (intent) => _createNewItem(),\n        ),\n      },\n      // Your sub-tree must be wrapped in a focusNode, so it can take focus.\n      child: Focus(autofocus: true, child: Container()),\n    ),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Get Booking with Data Combination (Dart)\nDESCRIPTION: This code shows the `getBooking` method within the `BookingRepositoryRemote` class.  It fetches raw booking data and related destination and activity data from the `ApiClient` service. The data is then combined and transformed into a `Booking` domain model which encapsulates all required booking details. Error handling is included using the `Result` type.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/app-architecture/case-study/data-layer.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\n// This method was edited for brevity.\nFuture<Result<Booking>> getBooking(int id) async {\n  try {\n    // Get the booking by ID from server.\n    final resultBooking = await _apiClient.getBooking(id);\n    if (resultBooking is Error<BookingApiModel>) {\n      return Result.error(resultBooking.error);\n    }\n    final booking = resultBooking.asOk.value;\n\n    final destination = _apiClient.getDestination(booking.destinationRef);\n    final activities = _apiClient.getActivitiesForBooking(\n            booking.activitiesRef);\n\n    return Result.ok(\n      Booking(\n        startDate: booking.startDate,\n        endDate: booking.endDate,\n        destination: destination,\n        activity: activities,\n      ),\n    );\n  } on Exception catch (e) {\n    return Result.error(e);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Google Fonts in Flutter\nDESCRIPTION: This snippet shows how to customize a Google Font by setting properties on the resulting `TextStyle`.  It applies the Lato font and modifies the text style, font size, font weight and font style.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/design/text/typography.md#_snippet_1\n\nLANGUAGE: Dart\nCODE:\n```\nText(\n  'This is Google Fonts',\n  style: GoogleFonts.lato(\n    textStyle: Theme.of(context).textTheme.displayLarge,\n    fontSize: 48,\n    fontWeight: FontWeight.w700,\n    fontStyle: FontStyle.italic,\n  ),\n),\n```\n\n----------------------------------------\n\nTITLE: Update ColorScheme to fromSeed - Dart\nDESCRIPTION: This snippet demonstrates how to update the ColorScheme in your Flutter app to use ColorScheme.fromSeed for Material 3 compatibility. It replaces the direct ColorScheme.light constructor with ColorScheme.fromSeed, which generates a ColorScheme based on a seed color. This ensures that colors work well together and meet contrast requirements for accessibility.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/material-3-migration.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\ntheme: ThemeData(\n  colorScheme: ColorScheme.light(primary: Colors.blue),\n),\n```\n\n----------------------------------------\n\nTITLE: Using @JsonKey for Default Values, Required Fields and Ignored Fields in Dart\nDESCRIPTION: This code snippet illustrates how to use `@JsonKey` annotations to provide default values for missing JSON keys, enforce required fields that must be present in the JSON data, and ignore fields during serialization and deserialization.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/data-and-backend/serialization/json.md#_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\n/// Tell json_serializable to use \"defaultValue\" if the JSON doesn't\n/// contain this key or if the value is `null`.\n@JsonKey(defaultValue: false)\nfinal bool isAdult;\n\n/// When `true` tell json_serializable that JSON must contain the key, \n/// If the key doesn't exist, an exception is thrown.\n@JsonKey(required: true)\nfinal String id;\n\n/// When `true` tell json_serializable that generated code should \n/// ignore this field completely. \n@JsonKey(ignore: true)\nfinal String verificationCode;\n```\n\n----------------------------------------\n\nTITLE: Add HTTP Package Dependency in Flutter\nDESCRIPTION: This command adds the `http` package as a dependency to your Flutter project. The `http` package simplifies fetching data from the internet.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/networking/fetch-data.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ flutter pub add http\n```\n\n----------------------------------------\n\nTITLE: Complete WebSocket Example in Flutter\nDESCRIPTION: A complete Flutter example demonstrating how to connect to a WebSocket server, send and receive messages, and close the connection. This includes necessary imports, the main app structure, and a StatefulWidget with methods for sending messages and disposing of the channel.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/networking/web-sockets.md#_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\nimport 'package:web_socket_channel/web_socket_channel.dart';\n\nvoid main() => runApp(const MyApp());\n\nclass MyApp extends StatelessWidget {\n  const MyApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    const title = 'WebSocket Demo';\n    return const MaterialApp(title: title, home: MyHomePage(title: title));\n  }\n}\n\nclass MyHomePage extends StatefulWidget {\n  const MyHomePage({super.key, required this.title});\n\n  final String title;\n\n  @override\n  State<MyHomePage> createState() => _MyHomePageState();\n}\n\nclass _MyHomePageState extends State<MyHomePage> {\n  final TextEditingController _controller = TextEditingController();\n  final _channel = WebSocketChannel.connect(\n    Uri.parse('wss://echo.websocket.events'),\n  );\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: Text(widget.title)),\n      body: Padding(\n        padding: const EdgeInsets.all(20),\n        child: Column(\n          crossAxisAlignment: CrossAxisAlignment.start,\n          children: [\n            Form(\n              child: TextFormField(\n                controller: _controller,\n                decoration: const InputDecoration(labelText: 'Send a message')\n              ),\n            ),\n            const SizedBox(height: 24),\n            StreamBuilder(\n              stream: _channel.stream,\n              builder: (context, snapshot) {\n                return Text(snapshot.hasData ? '${snapshot.data}' : '');\n              },\n            ),\n          ],\n        ),\n      ),\n      floatingActionButton: FloatingActionButton(\n        onPressed: _sendMessage,\n        tooltip: 'Send message',\n        child: const Icon(Icons.send),\n      ), // This trailing comma makes auto-formatting nicer for build methods.\n    );\n  }\n\n  void _sendMessage() {\n    if (_controller.text.isNotEmpty) {\n      _channel.sink.add(_controller.text);\n    }\n  }\n\n  @override\n  void dispose() {\n    _channel.sink.close();\n    _controller.dispose();\n    super.dispose();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Flutter package\nDESCRIPTION: This command creates a starter Flutter package project in the specified folder. The `--template=package` flag indicates that a package project should be created.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/packages-and-plugins/developing-packages.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ flutter create --template=package hello\n```\n\n----------------------------------------\n\nTITLE: Flutter Text Input Example\nDESCRIPTION: This interactive example demonstrates how to use both TextField and TextFormField widgets within a Flutter application. It provides a complete runnable example that includes necessary imports, MaterialApp, Scaffold, and widgets to show both types of text fields.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/forms/text-input.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\n\nvoid main() => runApp(const MyApp());\n\nclass MyApp extends StatelessWidget {\n  const MyApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    const appTitle = 'Form Styling Demo';\n    return MaterialApp(\n      title: appTitle,\n      home: Scaffold(\n        appBar: AppBar(title: const Text(appTitle)),\n        body: const MyCustomForm(),\n      ),\n    );\n  }\n}\n\nclass MyCustomForm extends StatelessWidget {\n  const MyCustomForm({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return Column(\n      crossAxisAlignment: CrossAxisAlignment.start,\n      children: <Widget>[\n        const Padding(\n          padding: EdgeInsets.symmetric(horizontal: 8, vertical: 16),\n          child: TextField(\n            decoration: InputDecoration(\n              border: OutlineInputBorder(),\n              hintText: 'Enter a search term',\n            ),\n          ),\n        ),\n        Padding(\n          padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 16),\n          child: TextFormField(\n            decoration: const InputDecoration(\n              border: UnderlineInputBorder(),\n              labelText: 'Enter your username',\n            ),\n          ),\n        ),\n      ],\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Calling the Callback in Flutter\nDESCRIPTION: This code snippet showcases how to call the onChanged callback function in Flutter when an event, like button press, occurs. It allows the parent widget to respond to changes in the child widget's state.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/fundamentals/state-management.md#_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nTextButton(\n  onPressed: () {\n    widget.onChanged(count++);\n  },\n),\n```\n\n----------------------------------------\n\nTITLE: Managing State with StatefulWidget in Flutter\nDESCRIPTION: This snippet demonstrates managing state using StatefulWidget in Flutter. It defines a StatefulWidget called Counter that displays a counter and an ElevatedButton to increment it. The _increment method uses setState to update the counter and trigger a rebuild of the UI.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/index.md#_snippet_5\n\nLANGUAGE: Dart\nCODE:\n```\nimport 'package:flutter/material.dart';\n\nclass Counter extends StatefulWidget {\n  // This class is the configuration for the state.\n  // It holds the values (in this case nothing) provided\n  // by the parent and used by the build  method of the\n  // State. Fields in a Widget subclass are always marked\n  // \"final\".\n\n  const Counter({super.key});\n\n  @override\n  State<Counter> createState() => _CounterState();\n}\n\nclass _CounterState extends State<Counter> {\n  int _counter = 0;\n\n  void _increment() {\n    setState(() {\n      // This call to setState tells the Flutter framework\n      // that something has changed in this State, which\n      // causes it to rerun the build method below so that\n      // the display can reflect the updated values. If you\n      // change _counter without calling setState(), then\n      // the build method won't be called again, and so\n      // nothing would appear to happen.\n      _counter++;\n    });\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    // This method is rerun every time setState is called,\n    // for instance, as done by the _increment method above.\n    // The Flutter framework has been optimized to make\n    // rerunning build methods fast, so that you can just\n    // rebuild anything that needs updating rather than\n    // having to individually changes instances of widgets.\n    return Row(\n      mainAxisAlignment: MainAxisAlignment.center,\n      children: <Widget>[\n        ElevatedButton(onPressed: _increment, child: const Text('Increment')),\n        const SizedBox(width: 16),\n        Text('Count: $_counter'),\n      ],\n    );\n  }\n}\n\nvoid main() {\n  runApp(const MaterialApp(home: Scaffold(body: Center(child: Counter()))));\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Example: Parse JSON in Background\nDESCRIPTION: This is a complete example showing how to fetch and parse a JSON response in the background using Flutter isolates. It includes fetching the data, parsing the JSON into a list of Photo objects, and displaying the data in a grid view.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/networking/background-parsing.md#_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nimport 'dart:async';\nimport 'dart:convert';\n\nimport 'package:flutter/foundation.dart';\nimport 'package:flutter/material.dart';\nimport 'package:http/http.dart' as http;\n\nFuture<List<Photo>> fetchPhotos(http.Client client) async {\n  final response = await client.get(\n    Uri.parse('https://jsonplaceholder.typicode.com/photos'),\n  );\n\n  // Use the compute function to run parsePhotos in a separate isolate.\n  return compute(parsePhotos, response.body);\n}\n\n// A function that converts a response body into a List<Photo>.\nList<Photo> parsePhotos(String responseBody) {\n  final parsed =\n      (jsonDecode(responseBody) as List).cast<Map<String, dynamic>>();\n\n  return parsed.map<Photo>((json) => Photo.fromJson(json)).toList();\n}\n\nclass Photo {\n  final int albumId;\n  final int id;\n  final String title;\n  final String url;\n  final String thumbnailUrl;\n\n  const Photo({\n    required this.albumId,\n    required this.id,\n    required this.title,\n    required this.url,\n    required this.thumbnailUrl,\n  });\n\n  factory Photo.fromJson(Map<String, dynamic> json) {\n    return Photo(\n      albumId: json['albumId'] as int,\n      id: json['id'] as int,\n      title: json['title'] as String,\n      url: json['url'] as String,\n      thumbnailUrl: json['thumbnailUrl'] as String,\n    );\n  }\n}\n\nvoid main() => runApp(const MyApp());\n\nclass MyApp extends StatelessWidget {\n  const MyApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    const appTitle = 'Isolate Demo';\n\n    return const MaterialApp(\n      title: appTitle,\n      home: MyHomePage(title: appTitle),\n    );\n  }\n}\n\nclass MyHomePage extends StatefulWidget {\n  const MyHomePage({super.key, required this.title});\n\n  final String title;\n\n  @override\n  State<MyHomePage> createState() => _MyHomePageState();\n}\n\nclass _MyHomePageState extends State<MyHomePage> {\n  late Future<List<Photo>> futurePhotos;\n\n  @override\n  void initState() {\n    super.initState();\n    futurePhotos = fetchPhotos(http.Client());\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: Text(widget.title)),\n      body: FutureBuilder<List<Photo>>(\n        future: futurePhotos,\n        builder: (context, snapshot) {\n          if (snapshot.hasError) {\n            return const Center(child: Text('An error has occurred!'));\n          } else if (snapshot.hasData) {\n            return PhotosList(photos: snapshot.data!);\n          } else {\n            return const Center(child: CircularProgressIndicator());\n          }\n        },\n      ),\n    );\n  }\n}\n\nclass PhotosList extends StatelessWidget {\n  const PhotosList({super.key, required this.photos});\n\n  final List<Photo> photos;\n\n  @override\n  Widget build(BuildContext context) {\n    return GridView.builder(\n      gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(\n        crossAxisCount: 2,\n      ),\n      itemCount: photos.length,\n      itemBuilder: (context, index) {\n        return Image.network(photos[index].thumbnailUrl);\n      },\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing FlutterMethodChannel in AppDelegate.m (Objective-C)\nDESCRIPTION: This Objective-C code initializes a FlutterMethodChannel in the AppDelegate.m file for the iOS platform. It sets up a method call handler for handling communication from the Flutter side. The channel name is 'samples.flutter.dev/battery'.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/platform-integration/platform-channels.md#_snippet_15\n\nLANGUAGE: Objective-C\nCODE:\n```\n#import <Flutter/Flutter.h>\n#import \"GeneratedPluginRegistrant.h\"\n\n@implementation AppDelegate\n- (BOOL)application:(UIApplication*)application didFinishLaunchingWithOptions:(NSDictionary*)launchOptions {\n  FlutterViewController* controller = (FlutterViewController*)self.window.rootViewController;\n\n  FlutterMethodChannel* batteryChannel = [FlutterMethodChannel\n                                          methodChannelWithName:@\"samples.flutter.dev/battery\"\n                                          binaryMessenger:controller.binaryMessenger];\n\n  [batteryChannel setMethodCallHandler:^(FlutterMethodCall* call, FlutterResult result) {\n    // This method is invoked on the UI thread.\n    // TODO\n  }];\n\n  [GeneratedPluginRegistrant registerWithRegistry:self];\n  return [super application:application didFinishLaunchingWithOptions:launchOptions];\n}\n\n```\n\n----------------------------------------\n\nTITLE: Saving data with SharedPreferences - Dart\nDESCRIPTION: This code snippet demonstrates how to save an integer value to persistent storage using the `SharedPreferences` class. It retrieves an instance of `SharedPreferences`, then uses the `setInt` method to store the value of the `counter` variable under the key 'counter'. This method updates the value in memory and asynchronously persists it to disk.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/persistence/key-value.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\n// Load and obtain the shared preferences for this app.\nfinal prefs = await SharedPreferences.getInstance();\n\n// Save the counter value to persistent storage under the 'counter' key.\nawait prefs.setInt('counter', counter);\n```\n\n----------------------------------------\n\nTITLE: Adding shared_preferences dependency\nDESCRIPTION: To use shared_preferences, add the package as a dependency to your Flutter project using the flutter pub add command.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/persistence/key-value.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nflutter pub add shared_preferences\n```\n\n----------------------------------------\n\nTITLE: Migrate accentColor usage (Flutter/Dart)\nDESCRIPTION: Demonstrates how to replace direct usage of `Theme.of(context).accentColor` with `Theme.of(context).colorScheme.secondary`. This applies to custom components that previously relied on the accentColor.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/theme-data-accent-properties.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nColor myColor = Theme.of(context).accentColor;\n```\n\n----------------------------------------\n\nTITLE: Using PopScope to Control Back Navigation - Dart\nDESCRIPTION: This snippet demonstrates how to use the `PopScope` widget to control back navigation, replacing the deprecated `WillPopScope`. The `canPop` parameter determines whether a pop is allowed, and `onPopInvoked` is called after the pop is handled.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/android-predictive-back.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nPopScope(\n  canPop: _myPopDisableEnableLogic(),\n  onPopInvoked: (bool didPop) {\n    // Handle the pop. If `didPop` is false, it was blocked.\n  },\n)\n```\n\n----------------------------------------\n\nTITLE: Inserting a Dog into the Database\nDESCRIPTION: This snippet defines an `insertDog` function that inserts a `Dog` object into the 'dogs' table in the SQLite database. It retrieves a reference to the database, converts the `Dog` object to a map using the `toMap()` method, and then uses the `insert()` method of the database to insert the map into the 'dogs' table. The `conflictAlgorithm` is set to `ConflictAlgorithm.replace` to handle potential ID conflicts.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/persistence/sqlite.md#_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\n// Define a function that inserts dogs into the database\nFuture<void> insertDog(Dog dog) async {\n  // Get a reference to the database.\n  final db = await database;\n\n  // Insert the Dog into the correct table. You might also specify the\n  // `conflictAlgorithm` to use in case the same dog is inserted twice.\n  //\n  // In this case, replace any previous data.\n  await db.insert(\n    'dogs',\n    dog.toMap(),\n    conflictAlgorithm: ConflictAlgorithm.replace,\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Define Method Channel - Dart\nDESCRIPTION: Defines a MethodChannel within the `_MyHomePageState` class for communication with platform-specific code. A static constant named `platform` is declared and initialized with a MethodChannel instance, using the unique channel name 'samples.flutter.dev/battery'.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/platform-integration/platform-channels.md#_snippet_1\n\nLANGUAGE: Dart\nCODE:\n```\nclass _MyHomePageState extends State<MyHomePage> {\n  static const platform = MethodChannel('samples.flutter.dev/battery');\n  // Get battery level.\n```\n\n----------------------------------------\n\nTITLE: Copyable Text Field with Actions and Shortcuts in Flutter\nDESCRIPTION: This Flutter code defines a CopyableTextField widget that incorporates Actions and Shortcuts. It uses TextEditingController for handling text input, Actions for mapping intents to actions (ClearIntent, CopyIntent, SelectAllIntent), and IconButton widgets to trigger these actions. A LoggingActionDispatcher is used to log all invoked actions. It also showcases the integration of custom intents and actions for text manipulation.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/interactivity/actions-and-shortcuts.md#_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\nimport 'package:flutter/services.dart';\n\n/// A text field that also has buttons to select all the text and copy the\n/// selected text to the clipboard.\nclass CopyableTextField extends StatefulWidget {\n  const CopyableTextField({super.key, required this.title});\n\n  final String title;\n\n  @override\n  State<CopyableTextField> createState() => _CopyableTextFieldState();\n}\n\nclass _CopyableTextFieldState extends State<CopyableTextField> {\n  late final TextEditingController controller = TextEditingController();\n\n  @override\n  void dispose() {\n    controller.dispose();\n    super.dispose();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Actions(\n      dispatcher: LoggingActionDispatcher(),\n      actions: <Type, Action<Intent>>{\n        ClearIntent: ClearAction(controller),\n        CopyIntent: CopyAction(controller),\n        SelectAllIntent: SelectAllAction(controller),\n      },\n      child: Builder(\n        builder: (context) {\n          return Scaffold(\n            body: Center(\n              child: Row(\n                children: <Widget>[\n                  const Spacer(),\n                  Expanded(child: TextField(controller: controller)),\n                  IconButton(\n                    icon: const Icon(Icons.copy),\n                    onPressed: Actions.handler<CopyIntent>(\n                      context,\n                      const CopyIntent(),\n                    ),\n                  ),\n                  IconButton(\n                    icon: const Icon(Icons.select_all),\n                    onPressed: Actions.handler<SelectAllIntent>(\n                      context,\n                      const SelectAllIntent(),\n                    ),\n                  ),\n                  const Spacer(),\n                ],\n              ),\n            ),\n          );\n        },\n      ),\n    );\n  }\n}\n\n/// A ShortcutManager that logs all keys that it handles.\nclass LoggingShortcutManager extends ShortcutManager {\n  @override\n  KeyEventResult handleKeypress(BuildContext context, KeyEvent event) {\n    final KeyEventResult result = super.handleKeypress(context, event);\n    if (result == KeyEventResult.handled) {\n      print('Handled shortcut $event in $context');\n    }\n    return result;\n  }\n}\n\n/// An ActionDispatcher that logs all the actions that it invokes.\nclass LoggingActionDispatcher extends ActionDispatcher {\n  @override\n  Object? invokeAction(\n    covariant Action<Intent> action,\n    covariant Intent intent, [\n    BuildContext? context,\n  ]) {\n    print('Action invoked: $action($intent) from $context');\n    super.invokeAction(action, intent, context);\n\n    return null;\n  }\n}\n\n/// An intent that is bound to ClearAction in order to clear its\n/// TextEditingController.\nclass ClearIntent extends Intent {\n  const ClearIntent();\n}\n\n/// An action that is bound to ClearIntent that clears its\n/// TextEditingController.\nclass ClearAction extends Action<ClearIntent> {\n  ClearAction(this.controller);\n\n  final TextEditingController controller;\n\n  @override\n  Object? invoke(covariant ClearIntent intent) {\n    controller.clear();\n\n    return null;\n  }\n}\n\n/// An intent that is bound to CopyAction to copy from its\n/// TextEditingController.\nclass CopyIntent extends Intent {\n  const CopyIntent();\n}\n\n/// An action that is bound to CopyIntent that copies the text in its\n/// TextEditingController to the clipboard.\nclass CopyAction extends Action<CopyIntent> {\n  CopyAction(this.controller);\n\n  final TextEditingController controller;\n\n  @override\n  Object? invoke(covariant CopyIntent intent) {\n    final String selectedString = controller.text.substring(\n      controller.selection.baseOffset,\n      controller.selection.extentOffset,\n    );\n    Clipboard.setData(ClipboardData(text: selectedString));\n\n    return null;\n  }\n}\n\n/// An intent that is bound to SelectAllAction to select all the text in its\n/// controller.\nclass SelectAllIntent extends Intent {\n  const SelectAllIntent();\n}\n\n/// An action that is bound to SelectAllAction that selects all text in its\n/// TextEditingController.\nclass SelectAllAction extends Action<SelectAllIntent> {\n  SelectAllAction(this.controller);\n\n  final TextEditingController controller;\n\n  @override\n  Object? invoke(covariant SelectAllIntent intent) {\n    controller.selection = controller.selection.copyWith(\n      baseOffset: 0,\n      extentOffset: controller.text.length,\n      affinity: controller.selection.affinity,\n    );\n\n    return null;\n  }\n}\n\n/// The top level application class.\n///\n/// Shortcuts defined here are in effect for the whole app,\n/// although different widgets may fulfill them differently.\nclass MyApp extends StatelessWidget {\n  const MyApp({super.key});\n\n  static const String title = 'Shortcuts and Actions Demo';\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: title,\n      theme: ThemeData(\n        colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),\n      ),\n      home: Shortcuts(\n        shortcuts: <LogicalKeySet, Intent>{\n          LogicalKeySet(LogicalKeyboardKey.escape): const ClearIntent(),\n          LogicalKeySet(LogicalKeyboardKey.control, LogicalKeyboardKey.keyC):\n              const CopyIntent(),\n          LogicalKeySet(LogicalKeyboardKey.control, LogicalKeyboardKey.keyA):\n              const SelectAllIntent(),\n        },\n        child: const CopyableTextField(title: title),\n      ),\n    );\n  }\n}\n\nvoid main() => runApp(const MyApp());\n```\n\n----------------------------------------\n\nTITLE: Flutter Tap Handling Interactive Example\nDESCRIPTION: This DartPad example demonstrates a complete Flutter application that uses GestureDetector to handle taps on a custom button. The example includes a MaterialApp, a Scaffold with an AppBar, and a custom MyButton widget wrapped in a GestureDetector.  When tapped, the button displays a SnackBar.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/gestures/handling-taps.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\n\nvoid main() => runApp(const MyApp());\n\nclass MyApp extends StatelessWidget {\n  const MyApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    const title = 'Gesture Demo';\n\n    return const MaterialApp(title: title, home: MyHomePage(title: title));\n  }\n}\n\nclass MyHomePage extends StatelessWidget {\n  final String title;\n\n  const MyHomePage({super.key, required this.title});\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: Text(title)),\n      body: const Center(child: MyButton()),\n    );\n  }\n}\n\nclass MyButton extends StatelessWidget {\n  const MyButton({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    // The GestureDetector wraps the button.\n    return GestureDetector(\n      // When the child is tapped, show a snackbar.\n      onTap: () {\n        const snackBar = SnackBar(content: Text('Tap'));\n\n        ScaffoldMessenger.of(context).showSnackBar(snackBar);\n      },\n      // The custom button\n      child: Container(\n        padding: const EdgeInsets.all(12),\n        decoration: BoxDecoration(\n          color: Colors.lightBlue,\n          borderRadius: BorderRadius.circular(8),\n        ),\n        child: const Text('My Button'),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Channel Handler on Background Thread - Kotlin\nDESCRIPTION: This Kotlin code snippet shows how to set up a MethodChannel to execute its handlers on a background thread using the Task Queue API in Android. It creates a task queue and associates it with the MethodChannel during initialization, ensuring that incoming method calls are handled on a background thread.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/platform-integration/platform-channels.md#_snippet_23\n\nLANGUAGE: Kotlin\nCODE:\n```\noverride fun onAttachedToEngine(@NonNull flutterPluginBinding: FlutterPlugin.FlutterPluginBinding) {\n  val taskQueue =\n      flutterPluginBinding.binaryMessenger.makeBackgroundTaskQueue()\n  channel = MethodChannel(flutterPluginBinding.binaryMessenger,\n                          \"com.example.foo\",\n                          StandardMethodCodec.INSTANCE,\n                          taskQueue)\n  channel.setMethodCallHandler(this)\n}\n```\n\n----------------------------------------\n\nTITLE: Printing the List of Dogs\nDESCRIPTION: This snippet demonstrates how to use the `dogs()` function to retrieve all dogs from the database and print the resulting list to the console. It uses `await` to wait for the asynchronous operation to complete before printing the list.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/persistence/sqlite.md#_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\n// Now, use the method above to retrieve all the dogs.\nprint(await dogs()); // Prints a list that include Fido.\n```\n\n----------------------------------------\n\nTITLE: Customizing JSON Key Names with @JsonKey in Dart\nDESCRIPTION: This code snippet shows how to use the `@JsonKey` annotation to map a field in a Dart class to a different key name in the JSON representation. This is useful when the API uses a different naming convention (e.g., snake_case) than the Dart code (e.g., lowerCamelCase).\nSOURCE: https://github.com/flutter/website/blob/main/src/content/data-and-backend/serialization/json.md#_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\n/// Tell json_serializable that \"registration_date_millis\" should be\n/// mapped to this property.\n@JsonKey(name: 'registration_date_millis')\nfinal int registrationDateMillis;\n```\n\n----------------------------------------\n\nTITLE: Form with TextFormField and Validation in Flutter\nDESCRIPTION: This snippet showcases how to create a Form in Flutter, use TextFormField widgets for input, and implement form validation using the validator property. It demonstrates handling form submission and validating user input.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/fundamentals/user-input.md#_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nfinal GlobalKey<FormState> _formKey = GlobalKey<FormState>();\n\n@override\nWidget build(BuildContext context) {\n  return Form(\n    key: _formKey,\n    child: Column(\n      crossAxisAlignment: CrossAxisAlignment.start,\n      children: <Widget>[\n        TextFormField(\n          decoration: const InputDecoration(\n            hintText: 'Enter your email',\n          ),\n          validator: (String? value) {\n            if (value == null || value.isEmpty) {\n              return 'Please enter some text';\n            }\n            return null;\n          },\n        ),\n        Padding(\n          padding: const EdgeInsets.symmetric(vertical: 16.0),\n          child: ElevatedButton(\n            onPressed: () {\n              // Validate returns true if the form is valid, or false otherwise.\n              if (_formKey.currentState!.validate()) {\n                // Process data.\n              }\n            },\n            child: const Text('Submit'),\n          ),\n        ),\n      ],\n    ),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Extracting Route Arguments in Flutter\nDESCRIPTION: This code snippet shows how to extract arguments passed to a Flutter route using `ModalRoute.of(context)?.settings.arguments`.  It retrieves the `Person` object passed during navigation and displays the person's name and age using `Text` widgets within a `Column`.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/swiftui-devs.md#_snippet_25\n\nLANGUAGE: Dart\nCODE:\n```\nclass DetailsPage extends StatelessWidget {\n  const DetailsPage({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    // Read the person instance from the arguments.\n    final Person person = ModalRoute.of(context)?.settings.arguments as Person;\n    // Extract the age.\n    final age = '${person.age} years old';\n    return Scaffold(\n      // Display name and age.\n      body: Column(children: [Text(person.name), Text(age)]),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Extract arguments in ExtractArgumentsScreen in Dart\nDESCRIPTION: Creates a StatelessWidget `ExtractArgumentsScreen` that extracts arguments passed via `Navigator.pushNamed()` using `ModalRoute.of(context)!.settings.arguments` and displays them.  It accesses the current route's settings to retrieve the arguments.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/navigation/navigate-with-arguments.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\n// A Widget that extracts the necessary arguments from\n// the ModalRoute.\nclass ExtractArgumentsScreen extends StatelessWidget {\n  const ExtractArgumentsScreen({super.key});\n\n  static const routeName = '/extractArguments';\n\n  @override\n  Widget build(BuildContext context) {\n    // Extract the arguments from the current ModalRoute\n    // settings and cast them as ScreenArguments.\n    final args = ModalRoute.of(context)!.settings.arguments as ScreenArguments;\n\n    return Scaffold(\n      appBar: AppBar(title: Text(args.title)),\n      body: Center(child: Text(args.message)),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Mock HTTP Client with Mockito in Flutter\nDESCRIPTION: Shows how to create a mock HTTP client using the Mockito package. The `@GenerateMocks([http.Client])` annotation generates a `MockClient` class that can be used to simulate different HTTP responses in unit tests.  This snippet also showcases the import statements required.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/testing/unit/mocking.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:http/http.dart' as http;\nimport 'package:mocking/main.dart';\nimport 'package:mockito/annotations.dart';\n\n// Generate a MockClient using the Mockito package.\n// Create new instances of this class in each test.\n@GenerateMocks([http.Client])\nvoid main() {\n}\n```\n\n----------------------------------------\n\nTITLE: Get Battery Level Method (Kotlin)\nDESCRIPTION: This Kotlin code defines a function `getBatteryLevel()` that retrieves the battery level of the Android device. It uses `BatteryManager` for Android versions Lollipop and above, and `IntentFilter` for older versions. The function returns the battery level as an integer.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/platform-integration/platform-channels.md#_snippet_6\n\nLANGUAGE: Kotlin\nCODE:\n```\n  private fun getBatteryLevel(): Int {\n    val batteryLevel: Int\n    if (VERSION.SDK_INT >= VERSION_CODES.LOLLIPOP) {\n      val batteryManager = getSystemService(Context.BATTERY_SERVICE) as BatteryManager\n      batteryLevel = batteryManager.getIntProperty(BatteryManager.BATTERY_PROPERTY_CAPACITY)\n    } else {\n      val intent = ContextWrapper(applicationContext).registerReceiver(null, IntentFilter(Intent.ACTION_BATTERY_CHANGED))\n      batteryLevel = intent!!.getIntExtra(BatteryManager.EXTRA_LEVEL, -1) * 100 / intent.getIntExtra(BatteryManager.EXTRA_SCALE, -1)\n    }\n\n    return batteryLevel\n  }\n```\n\n----------------------------------------\n\nTITLE: Aligning Widgets in a Row\nDESCRIPTION: This snippet shows how to use the `Row` widget in Flutter to arrange widgets horizontally, with the `mainAxisAlignment` property set to `spaceEvenly` to distribute space evenly between, before, and after each image. It requires the images to be loaded as assets. The code uses `Image.asset` widget to display images.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/layout/index.md#_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nRow(\n  mainAxisAlignment: MainAxisAlignment.spaceEvenly,\n  children: [\n    Image.asset('images/pic1.jpg'),\n    Image.asset('images/pic2.jpg'),\n    Image.asset('images/pic3.jpg'),\n  ],\n);\n```\n\n----------------------------------------\n\nTITLE: Loading a Shader from Asset - Dart\nDESCRIPTION: This snippet demonstrates how to load a shader into a `FragmentProgram` object at runtime using the `FragmentProgram.fromAsset` constructor in Dart. The asset's name is the path to the shader as specified in the `pubspec.yaml` file. The `FragmentProgram` can then be used to create `FragmentShader` instances.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/design/graphics/fragment-shaders.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nvoid loadMyShader() async {\n  var program = await FragmentProgram.fromAsset('shaders/myshader.frag');\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing DemoLocalizationsDelegate - Dart\nDESCRIPTION: This code implements the `DemoLocalizationsDelegate` which is responsible for loading the `DemoLocalizations` class based on the current locale. It overrides the `isSupported`, `load`, and `shouldReload` methods. The `load` method returns a `SynchronousFuture` because the localization data is loaded synchronously.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/accessibility-and-internationalization/internationalization.md#_snippet_39\n\nLANGUAGE: dart\nCODE:\n```\nclass DemoLocalizationsDelegate\n    extends LocalizationsDelegate<DemoLocalizations> {\n  const DemoLocalizationsDelegate();\n\n  @override\n  bool isSupported(Locale locale) =>\n      DemoLocalizations.languages().contains(locale.languageCode);\n\n  @override\n  Future<DemoLocalizations> load(Locale locale) {\n    // Returning a SynchronousFuture here because an async \"load\" operation\n    // isn't needed to produce an instance of DemoLocalizations.\n    return SynchronousFuture<DemoLocalizations>(DemoLocalizations(locale));\n  }\n\n  @override\n  bool shouldReload(DemoLocalizationsDelegate old) => false;\n}\n```\n\n----------------------------------------\n\nTITLE: Building ListView with ListView.builder - Dart\nDESCRIPTION: This snippet shows how to use ListView.builder to display a list of items.  It configures the itemCount, prototypeItem and itemBuilder to efficiently render the list, creating widgets only when they are needed. prototypeItem is used to calculate the item extent and improve performance.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/lists/long-lists.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nListView.builder(\n  itemCount: items.length,\n  prototypeItem: ListTile(title: Text(items.first)),\n  itemBuilder: (context, index) {\n    return ListTile(title: Text(items[index]));\n  },\n)\n```\n\n----------------------------------------\n\nTITLE: Complete Navigation Example (Cupertino)\nDESCRIPTION: This complete example shows navigation using Cupertino widgets for an iOS-style app. It defines two routes (`FirstRoute` and `SecondRoute`) and uses `Navigator.push()` with `CupertinoPageRoute` and `Navigator.pop()` for navigation. The `main()` function initializes the app with `FirstRoute` as the home route within a `CupertinoApp`.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/navigation/navigation-basics.md#_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/cupertino.dart';\n\nvoid main() {\n  runApp(const CupertinoApp(title: 'Navigation Basics', home: FirstRoute()));\n}\n\nclass FirstRoute extends StatelessWidget {\n  const FirstRoute({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return CupertinoPageScaffold(\n      navigationBar: const CupertinoNavigationBar(middle: Text('First Route')),\n      child: Center(\n        child: CupertinoButton(\n          child: const Text('Open route'),\n          onPressed: () {\n            Navigator.push(\n              context,\n              CupertinoPageRoute(builder: (context) => const SecondRoute()),\n            );\n          },\n        ),\n      ),\n    );\n  }\n}\n\nclass SecondRoute extends StatelessWidget {\n  const SecondRoute({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return CupertinoPageScaffold(\n      navigationBar: const CupertinoNavigationBar(middle: Text('Second Route')),\n      child: Center(\n        child: CupertinoButton(\n          onPressed: () {\n            Navigator.pop(context);\n          },\n          child: const Text('Go back!'),\n        ),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating ListView Dart\nDESCRIPTION: This snippet creates a ListView using ListView.builder to display the items. The itemBuilder function generates a ListTile widget for each item in the items list, showing the text of the item. This implements a basic list view for displaying the data.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/gestures/dismissible.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nListView.builder(\n  itemCount: items.length,\n  itemBuilder: (context, index) {\n    return ListTile(title: Text(items[index]));\n  },\n)\n```\n\n----------------------------------------\n\nTITLE: Adding a Button to Launch the Selection Screen in Flutter\nDESCRIPTION: This code defines the `SelectionButton` widget, which launches the `SelectionScreen` when pressed. The `_navigateAndDisplaySelection` method uses `Navigator.push` to navigate to the `SelectionScreen` and awaits the result using `await`, which is then used to display a snackbar.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/navigation/returning-data.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nclass SelectionButton extends StatefulWidget {\n  const SelectionButton({super.key});\n\n  @override\n  State<SelectionButton> createState() => _SelectionButtonState();\n}\n\nclass _SelectionButtonState extends State<SelectionButton> {\n  @override\n  Widget build(BuildContext context) {\n    return ElevatedButton(\n      onPressed: () {\n        _navigateAndDisplaySelection(context);\n      },\n      child: const Text('Pick an option, any option!'),\n    );\n  }\n\n  Future<void> _navigateAndDisplaySelection(BuildContext context) async {\n    // Navigator.push returns a Future that completes after calling\n    // Navigator.pop on the Selection Screen.\n    final result = await Navigator.push(\n      context,\n      // Create the SelectionScreen in the next step.\n      MaterialPageRoute(builder: (context) => const SelectionScreen()),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Flutter Navigation with Named Routes\nDESCRIPTION: This example demonstrates how to use named routes for navigation in Flutter. It defines a MaterialApp with a map of route names to WidgetBuilders, allowing navigation to different pages within the app.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/android-devs.md#_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() {\n  runApp(\n    MaterialApp(\n      home: const MyAppHome(), // Becomes the route named '/'.\n      routes: <String, WidgetBuilder>{\n        '/a': (context) => const MyPage(title: 'page A'),\n        '/b': (context) => const MyPage(title: 'page B'),\n        '/c': (context) => const MyPage(title: 'page C'),\n      },\n    ),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Building Animated List Items - Dart\nDESCRIPTION: Builds a list of animated widgets, where each list item slides from right to left and fades in using an Interval and an easeOut curve.  AnimatedBuilder is used with _staggeredController to handle the animation. The opacity and translation of each item are animated based on its corresponding Interval.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/effects/staggered-menu-animation.md#_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nList<Widget> _buildListItems() {\n  final listItems = <Widget>[];\n  for (var i = 0; i < _menuTitles.length; ++i) {\n    listItems.add(\n      AnimatedBuilder(\n        animation: _staggeredController,\n        builder: (context, child) {\n          final animationPercent = Curves.easeOut.transform(\n            _itemSlideIntervals[i].transform(_staggeredController.value),\n          );\n          final opacity = animationPercent;\n          final slideDistance = (1.0 - animationPercent) * 150;\n\n          return Opacity(\n            opacity: opacity,\n            child: Transform.translate(\n              offset: Offset(slideDistance, 0),\n              child: child,\n            ),\n          );\n        },\n        child: Padding(\n          padding: const EdgeInsets.symmetric(horizontal: 36, vertical: 16),\n          child: Text(\n            _menuTitles[i],\n            textAlign: TextAlign.left,\n            style: const TextStyle(fontSize: 24, fontWeight: FontWeight.w500),\n          ),\n        ),\n      ),\n    );\n  }\n  return listItems;\n}\n```\n\n----------------------------------------\n\nTITLE: Channel Handler on Background Thread - Java\nDESCRIPTION: This Java code demonstrates configuring a MethodChannel to execute its handlers on a background thread using the Task Queue API in Android. A task queue is created using `makeBackgroundTaskQueue()` and linked to the `MethodChannel` during its initialization, ensuring handler methods run on a background thread. Requires `FlutterPluginBinding` and `BinaryMessenger` from the Flutter Android embedding.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/platform-integration/platform-channels.md#_snippet_24\n\nLANGUAGE: Java\nCODE:\n```\n@Override\npublic void onAttachedToEngine(@NonNull FlutterPluginBinding binding) {\n  BinaryMessenger messenger = binding.getBinaryMessenger();\n  BinaryMessenger.TaskQueue taskQueue =\n      messenger.makeBackgroundTaskQueue();\n  channel =\n      new MethodChannel(\n          messenger,\n          \"com.example.foo\",\n          StandardMethodCodec.INSTANCE,\n          taskQueue);\n  channel.setMethodCallHandler(this);\n}\n```\n\n----------------------------------------\n\nTITLE: ThemeData using TextSelectionThemeData (Dart)\nDESCRIPTION: Demonstrates the recommended way to customize text selection appearance using TextSelectionThemeData within ThemeData. This encapsulates the cursor color, selection color, and selection handle color.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/text-selection-theme.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nThemeData(\n  textSelectionTheme: TextSelectionThemeData(\n    cursorColor: Colors.red,\n    selectionColor: Colors.green,\n    selectionHandleColor: Colors.blue,\n  )\n)\n```\n\n----------------------------------------\n\nTITLE: Add Maven repositories in settings.gradle.kts (Kotlin)\nDESCRIPTION: Adds the necessary Maven repositories in `settings.gradle.kts` for resolving Flutter dependencies. It includes Google's Maven repository, Maven Central, and a custom Maven repository pointing to Flutter's storage.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/add-to-app/android/project-setup.md#_snippet_8\n\nLANGUAGE: Kotlin\nCODE:\n```\ndependencyResolutionManagement {\n    repositoriesMode.set(RepositoriesMode.PREFER_SETTINGS)\n    repositories {\n        google()\n        mavenCentral()\n        maven(\"https://storage.googleapis.com/download.flutter.io\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: ApiClientService Class Definition (Result)\nDESCRIPTION: Modifies the ApiClientService class to use the Result pattern. The getUserProfile method now returns a Result<UserProfile>. It wraps the successful UserProfile in Result.ok and any exceptions in Result.error, ensuring that the caller handles potential errors. Dependencies: http client, utf8 decoder, jsonDecode, Result.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/app-architecture/design-patterns/result.md#_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nclass ApiClientService {\n  // ···\n\n  Future<Result<UserProfile>> getUserProfile() async {\n    // ···\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Separating Concerns with Stateless Widgets in Flutter\nDESCRIPTION: This snippet demonstrates separating concerns by using stateless widgets (CounterDisplay and CounterIncrementor) in Flutter. The Counter widget manages the state, while CounterDisplay displays the counter value, and CounterIncrementor provides a button to increment the counter. This separation promotes better code organization and maintainability.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/index.md#_snippet_6\n\nLANGUAGE: Dart\nCODE:\n```\nimport 'package:flutter/material.dart';\n\nclass CounterDisplay extends StatelessWidget {\n  const CounterDisplay({required this.count, super.key});\n\n  final int count;\n\n  @override\n  Widget build(BuildContext context) {\n    return Text('Count: $count');\n  }\n}\n\nclass CounterIncrementor extends StatelessWidget {\n  const CounterIncrementor({required this.onPressed, super.key});\n\n  final VoidCallback onPressed;\n\n  @override\n  Widget build(BuildContext context) {\n    return ElevatedButton(onPressed: onPressed, child: const Text('Increment'));\n  }\n}\n\nclass Counter extends StatefulWidget {\n  const Counter({super.key});\n\n  @override\n  State<Counter> createState() => _CounterState();\n}\n\nclass _CounterState extends State<Counter> {\n  int _counter = 0;\n\n  void _increment() {\n    setState(() {\n      ++_counter;\n    });\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Row(\n      mainAxisAlignment: MainAxisAlignment.center,\n      children: <Widget>[\n        CounterIncrementor(onPressed: _increment),\n        const SizedBox(width: 16),\n        CounterDisplay(count: _counter),\n      ],\n    );\n  }\n}\n\nvoid main() {\n  runApp(const MaterialApp(home: Scaffold(body: Center(child: Counter()))));\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the ViewModel with ChangeNotifier in Dart\nDESCRIPTION: This code defines a `CounterViewModel` class, which extends `ChangeNotifier` to manage the state and notify the View of changes. It encapsulates a `CounterModel` instance to interact with the data layer. It includes methods for initializing the count, incrementing the count, and handling potential errors by storing error messages. The `notifyListeners()` method is called to trigger UI updates.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/fundamentals/state-management.md#_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/foundation.dart';\n\nclass CounterViewModel extends ChangeNotifier {\n  final CounterModel model;\n  int? count;\n  String? errorMessage;\n  CounterViewModel(this.model);\n\n  Future<void> init() async {\n    try {\n      count = (await model.loadCountFromServer()).count;\n    } catch (e) {\n      errorMessage = 'Could not initialize counter';\n    }\n    notifyListeners();\n  }\n\n  Future<void> increment() async {\n    final currentCount = count;\n    if (currentCount == null) {\n      throw('Not initialized');\n    }\n    try {\n      final incrementedCount = currentCount + 1;\n      await model.updateCountOnServer(incrementedCount);\n      count = incrementedCount;\n    } catch(e) {\n      errorMessage = 'Count not update count';\n    }\n    notifyListeners();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: PhotoHero Widget Implementation in Dart\nDESCRIPTION: This code defines a PhotoHero widget that extends StatelessWidget. It displays an image asset within a Hero widget for animating transitions between routes. The image is wrapped in an InkWell for tap interaction.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/animations/hero-animations.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nclass PhotoHero extends StatelessWidget {\n  const PhotoHero({\n    super.key,\n    required this.photo,\n    this.onTap,\n    required this.width,\n  });\n\n  final String photo;\n  final VoidCallback? onTap;\n  final double width;\n\n  @override\n  Widget build(BuildContext context) {\n    return SizedBox(\n      width: width,\n      child: Hero(\n        tag: photo,\n        child: Material(\n          color: Colors.transparent,\n          child: InkWell(\n            onTap: onTap,\n            child: Image.asset(\n              photo,\n              fit: BoxFit.contain,\n            ),\n          ),\n        ),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Display Toggle Button Dart\nDESCRIPTION: Creates a FloatingActionButton that toggles the visibility of the animated widget. When pressed, the button calls setState to update the _visible boolean, triggering a UI rebuild to update the opacity.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/animation/opacity-animation.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nFloatingActionButton(\n  onPressed: () {\n    // Call setState. This tells Flutter to rebuild the\n    // UI with the changes.\n    setState(() {\n      _visible = !_visible;\n    });\n  },\n  tooltip: 'Toggle Opacity',\n  child: const Icon(Icons.flip),\n)\n```\n\n----------------------------------------\n\nTITLE: Animating Flutter Logo - Dart\nDESCRIPTION: This snippet demonstrates how to animate the Flutter logo to grow from nothing to full size. It uses `AnimationController`, `Tween`, and `addListener` to update the widget's state and trigger a rebuild. The `vsync` parameter is required for `AnimationController` and provided by mixing in `SingleTickerProviderStateMixin`.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/animations/tutorial.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nclass _LogoAppState extends State<LogoApp> with SingleTickerProviderStateMixin {\n  late Animation<double> animation;\n  late AnimationController controller;\n\n  @override\n  void initState() {\n    super.initState();\n    controller =\n        AnimationController(duration: const Duration(seconds: 2), vsync: this);\n    animation = Tween<double>(begin: 0, end: 300).animate(controller)\n      ..addListener(() {\n        setState(() {\n          // The state that has changed here is the animation object's value.\n        });\n      });\n    controller.forward();\n  }\n\n   @override\n   Widget build(BuildContext context) {\n     return Center(\n       child: Container(\n         margin: const EdgeInsets.symmetric(vertical: 10),\n         height: animation.value,\n         width: animation.value,\n         child: const FlutterLogo(),\n       ),\n     );\n   }\n\n  @override\n  void dispose() {\n    controller.dispose();\n    super.dispose();\n  }\n }\n```\n\n----------------------------------------\n\nTITLE: Fake Booking Repository Implementation in Dart\nDESCRIPTION: This snippet shows a simplified implementation of a `FakeBookingRepository` class that implements the `BookingRepository` interface. It provides a basic `createBooking` method that adds a booking to an in-memory list. This fake repository is used for testing purposes, allowing isolation from the real data layer.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/app-architecture/case-study/testing.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nclass FakeBookingRepository implements BookingRepository {\n  List<Booking> bookings = List.empty(growable: true);\n\n  @override\n  Future<Result<void>> createBooking(Booking booking) async {\n    bookings.add(booking);\n    return Result.ok(null);\n  }\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Firestore Controller Class - Dart\nDESCRIPTION: This code snippet defines the FirestoreController class, responsible for synchronizing the game state between players. It includes methods for reading and writing game data (playing cards) to Firestore, as well as subscribing to changes in both Firestore and local game state. The controller uses FirebaseFirestore to interact with the Firestore database and BoardState to manage local game state.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/games/firestore-multiplayer.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nimport 'dart:async';\n\nimport 'package:cloud_firestore/cloud_firestore.dart';\nimport 'package:flutter/foundation.dart';\nimport 'package:logging/logging.dart';\n\nimport '../game_internals/board_state.dart';\nimport '../game_internals/playing_area.dart';\nimport '../game_internals/playing_card.dart';\n\nclass FirestoreController {\n  static final _log = Logger('FirestoreController');\n\n  final FirebaseFirestore instance;\n\n  final BoardState boardState;\n\n  /// For now, there is only one match. But in order to be ready\n  /// for match-making, put it in a Firestore collection called matches.\n  late final _matchRef = instance.collection('matches').doc('match_1');\n\n  late final _areaOneRef = _matchRef\n      .collection('areas')\n      .doc('area_one')\n      .withConverter<List<PlayingCard>>(\n        fromFirestore: _cardsFromFirestore,\n        toFirestore: _cardsToFirestore,\n      );\n\n  late final _areaTwoRef = _matchRef\n      .collection('areas')\n      .doc('area_two')\n      .withConverter<List<PlayingCard>>(\n        fromFirestore: _cardsFromFirestore,\n        toFirestore: _cardsToFirestore,\n      );\n\n  StreamSubscription? _areaOneFirestoreSubscription;\n  StreamSubscription? _areaTwoFirestoreSubscription;\n\n  StreamSubscription? _areaOneLocalSubscription;\n  StreamSubscription? _areaTwoLocalSubscription;\n\n  FirestoreController({required this.instance, required this.boardState}) {\n    // Subscribe to the remote changes (from Firestore).\n    _areaOneFirestoreSubscription = _areaOneRef.snapshots().listen((snapshot) {\n      _updateLocalFromFirestore(boardState.areaOne, snapshot);\n    });\n    _areaTwoFirestoreSubscription = _areaTwoRef.snapshots().listen((snapshot) {\n      _updateLocalFromFirestore(boardState.areaTwo, snapshot);\n    });\n\n    // Subscribe to the local changes in game state.\n    _areaOneLocalSubscription = boardState.areaOne.playerChanges.listen((_) {\n      _updateFirestoreFromLocalAreaOne();\n    });\n    _areaTwoLocalSubscription = boardState.areaTwo.playerChanges.listen((_) {\n      _updateFirestoreFromLocalAreaTwo();\n    });\n\n    _log.fine('Initialized');\n  }\n\n  void dispose() {\n    _areaOneFirestoreSubscription?.cancel();\n    _areaTwoFirestoreSubscription?.cancel();\n    _areaOneLocalSubscription?.cancel();\n    _areaTwoLocalSubscription?.cancel();\n\n    _log.fine('Disposed');\n  }\n\n  /// Takes the raw JSON snapshot coming from Firestore and attempts to\n  /// convert it into a list of [PlayingCard]s.\n  List<PlayingCard> _cardsFromFirestore(\n    DocumentSnapshot<Map<String, dynamic>> snapshot,\n    SnapshotOptions? options,\n  ) {\n    final data = snapshot.data()?['cards'] as List?;\n\n    if (data == null) {\n      _log.info('No data found on Firestore, returning empty list');\n      return [];\n    }\n\n    final list = List.castFrom<Object?, Map<String, Object?>>(data);\n\n    try {\n      return list.map((raw) => PlayingCard.fromJson(raw)).toList();\n    } catch (e) {\n      throw FirebaseControllerException(\n        'Failed to parse data from Firestore: $e',\n      );\n    }\n  }\n\n  /// Takes a list of [PlayingCard]s and converts it into a JSON object\n  /// that can be saved into Firestore.\n  Map<String, Object?> _cardsToFirestore(\n    List<PlayingCard> cards,\n    SetOptions? options,\n  ) {\n    return {'cards': cards.map((c) => c.toJson()).toList()};\n  }\n\n  /// Updates Firestore with the local state of [area].\n  Future<void> _updateFirestoreFromLocal(\n    PlayingArea area,\n    DocumentReference<List<PlayingCard>> ref,\n  ) async {\n    try {\n      _log.fine('Updating Firestore with local data (${area.cards}) ...');\n      await ref.set(area.cards);\n      _log.fine('... done updating.');\n    } catch (e) {\n      throw FirebaseControllerException(\n        'Failed to update Firestore with local data (${area.cards}): $e',\n      );\n    }\n  }\n\n  /// Sends the local state of `boardState.areaOne` to Firestore.\n  void _updateFirestoreFromLocalAreaOne() {\n    _updateFirestoreFromLocal(boardState.areaOne, _areaOneRef);\n  }\n\n  /// Sends the local state of `boardState.areaTwo` to Firestore.\n  void _updateFirestoreFromLocalAreaTwo() {\n    _updateFirestoreFromLocal(boardState.areaTwo, _areaTwoRef);\n  }\n\n  /// Updates the local state of [area] with the data from Firestore.\n  void _updateLocalFromFirestore(\n    PlayingArea area,\n    DocumentSnapshot<List<PlayingCard>> snapshot,\n  ) {\n    _log.fine('Received new data from Firestore (${snapshot.data()})');\n\n    final cards = snapshot.data() ?? [];\n\n    if (listEquals(cards, area.cards)) {\n      _log.fine('No change');\n    } else {\n      _log.fine('Updating local data with Firestore data ($cards)');\n      area.replaceWith(cards);\n    }\n  }\n}\n\nclass FirebaseControllerException implements Exception {\n  final String message;\n\n  FirebaseControllerException(this.message);\n\n  @override\n  String toString() => 'FirebaseControllerException: $message';\n}\n\n```\n\n----------------------------------------\n\nTITLE: TextField With MaterialApp (After Migration)\nDESCRIPTION: This code shows how to resolve the MaterialLocalizations requirement by wrapping the TextField in a MaterialApp widget. MaterialApp automatically provides the necessary localizations, resolving the assertion error. This is the simplest approach if a MaterialApp is not already present in the widget tree.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/text-field-material-localizations.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\n\nvoid main() => runApp(Foo());\n\nclass Foo extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      home: Material(\n        child: TextField(),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating from Route.willPop to Route.popDisposition - Dart\nDESCRIPTION: This snippet shows how to migrate from the asynchronous `Route.willPop` to the synchronous getter `Route.popDisposition`. The code checks the value of `popDisposition` to determine if back gestures are disabled.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/android-predictive-back.md#_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nif (myRoute.popDisposition == RoutePopDisposition.doNotPop) {\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Returning to the Previous Screen with pop - Flutter\nDESCRIPTION: This snippet shows how to return to the previous screen using Navigator.pop(). The onPressed callback of the ElevatedButton in the SecondScreen is updated to call Navigator.pop(context), which removes the current route from the stack and returns to the FirstScreen.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/navigation/named-routes.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\n// Within the SecondScreen widget\nonPressed: () {\n  // Navigate back to the first screen by popping the current route\n  // off the stack.\n  Navigator.pop(context);\n}\n```\n\n----------------------------------------\n\nTITLE: ADB Command to Test App Links\nDESCRIPTION: This command-line instruction uses `adb` (Android Debug Bridge) to simulate launching the app via a deep link.  Replace `<web-domain>` with your web domain and `<package name>` with the package name of your app.  This is useful for testing the app link configuration without requiring the web files to be correctly hosted.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/navigation/set-up-app-links.md#_snippet_8\n\nLANGUAGE: console\nCODE:\n```\nadb shell 'am start -a android.intent.action.VIEW \\\n    -c android.intent.category.BROWSABLE \\\n    -d \"http://<web-domain>/details\"' \\\n    <package name>\n```\n\n----------------------------------------\n\nTITLE: Displaying a DatePickerDialog in Flutter\nDESCRIPTION: This code snippet demonstrates how to display a `DatePickerDialog` in Flutter using the `showDatePicker` function. It uses the `ElevatedButton` to trigger the dialog. The selected date is stored in the `selectedDate` variable and displayed using `DateFormat` from the `intl` package.  It shows an example of using async/await.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/fundamentals/user-input.md#_snippet_13\n\nLANGUAGE: dart\nCODE:\n```\nDateTime? selectedDate;\n\n@override\nWidget build(BuildContext context) {\n  var date = selectedDate;\n\n  return Column(children: [\n    Text(\n      date == null\n          ? \"You haven't picked a date yet.\"\n          : DateFormat('MM-dd-yyyy').format(date),\n    ),\n    ElevatedButton.icon(\n      icon: const Icon(Icons.calendar_today),\n      onPressed: () async {\n        var pickedDate = await showDatePicker(\n          context: context,\n          initialEntryMode: DatePickerEntryMode.calendarOnly,\n          initialDate: DateTime.now(),\n          firstDate: DateTime(2019),\n          lastDate: DateTime(2050),\n        );\n\n        setState(() {\n          selectedDate = pickedDate;\n        });\n      },\n      label: const Text('Pick a date'),\n    )\n  ]);\n}\n```\n\n----------------------------------------\n\nTITLE: ElevatedButton (After M3) - Dart\nDESCRIPTION: This snippet demonstrates how to style an ElevatedButton after migrating to Material 3 to achieve the same visual appearance as before. It uses ElevatedButton.styleFrom to set the backgroundColor to Theme.of(context).colorScheme.primary and the foregroundColor to Theme.of(context).colorScheme.onPrimary, replicating the previous styling.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/material-3-migration.md#_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nElevatedButton(\n  style: ElevatedButton.styleFrom(\n    backgroundColor: Theme.of(context).colorScheme.primary,\n    foregroundColor: Theme.of(context).colorScheme.onPrimary,\n  ),\n  onPressed: () {},\n  child: const Text('Button'),\n),\n```\n\n----------------------------------------\n\nTITLE: Adding a Todo Item using FilledButton in Flutter\nDESCRIPTION: This code snippet shows the implementation of a `FilledButton` that, when pressed, executes the `add` command in the `TodoListViewModel` with the text from the text controller. The button includes an icon and a label.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/app-architecture/design-patterns/sql.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nFilledButton.icon(\n  onPressed:\n      () => widget.viewModel.add.execute(_controller.text),\n  label: const Text('Add'),\n  icon: const Icon(Icons.add),\n)\n```\n\n----------------------------------------\n\nTITLE: Address Class with json_serializable in Dart\nDESCRIPTION: This snippet shows a simple `Address` class annotated with `@JsonSerializable` for automatic JSON serialization. It includes the `fromJson` and `toJson` methods and the `part` directive for generated code.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/data-and-backend/serialization/json.md#_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:json_annotation/json_annotation.dart';\npart 'address.g.dart';\n\n@JsonSerializable()\nclass Address {\n  String street;\n  String city;\n\n  Address(this.street, this.city);\n\n  factory Address.fromJson(Map<String, dynamic> json) =>\n      _$AddressFromJson(json);\n  Map<String, dynamic> toJson() => _$AddressToJson(this);\n}\n```\n\n----------------------------------------\n\nTITLE: Jump to Main Thread - Swift\nDESCRIPTION: This Swift code demonstrates how to execute a block of code on the main thread (UI thread) in iOS. It uses `DispatchQueue.main.async` to schedule a closure to be executed asynchronously on the main dispatch queue, ensuring UI-related operations are performed safely.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/platform-integration/platform-channels.md#_snippet_30\n\nLANGUAGE: Swift\nCODE:\n```\nDispatchQueue.main.async {\n  // Call the desired channel message here.\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Command Class Implementation\nDESCRIPTION: Complete implementation of the command class including running, error and completed states.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/app-architecture/design-patterns/command.md#_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\nclass Command extends ChangeNotifier {\n  Command(this._action);\n\n  bool _running = false;\n  bool get running => _running;\n\n  Exception? _error;\n  Exception? get error => _error;\n\n  bool _completed = false;\n  bool get completed => _completed;\n\n  final Future<void> Function() _action;\n\n  Future<void> execute() async {\n    if (_running) {\n      return;\n    }\n\n    _running = true;\n    _completed = false;\n    _error = null;\n    notifyListeners();\n\n    try {\n      await _action();\n      _completed = true;\n    } on Exception catch (error) {\n      _error = error;\n    } finally {\n      _running = false;\n      notifyListeners();\n    }\n  }\n\n  void clear() {\n    _running = false;\n    _error = null;\n    _completed = false;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Cart Model - Recommended Approach\nDESCRIPTION: This snippet shows the recommended way to access and update the cart model using the `provider` package.  It retrieves the `cartModel` from the context, allowing updates to the cart's state. The key is to get state using `context` from a provider, not directly manipulating widgets.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/data-and-backend/state-mgmt/simple.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\n// GOOD\nvoid myTapHandler(BuildContext context) {\n  var cartModel = somehowGetMyCartModel(context);\n  cartModel.add(item);\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying a SnackBar in Flutter\nDESCRIPTION: This snippet shows how to create and display a SnackBar using ScaffoldMessenger.  The SnackBar is created with a text message and then displayed in the context of the Scaffold.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/design/snackbars.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nconst snackBar = SnackBar(content: Text('Yay! A SnackBar!'));\n\n// Find the ScaffoldMessenger in the widget tree\n// and use it to show a SnackBar.\nScaffoldMessenger.of(context).showSnackBar(snackBar);\n```\n\n----------------------------------------\n\nTITLE: DetailScreen using RouteSettings in Dart\nDESCRIPTION: This snippet shows a `DetailScreen` widget that retrieves data passed via `RouteSettings`. It accesses the `Todo` object using `ModalRoute.of(context)!.settings.arguments`. This allows data to be passed during navigation without explicitly defining it in the constructor. This assumes that the `Todo` was passed as an argument using `RouteSettings` during navigation.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/navigation/passing-data.md#_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nclass DetailScreen extends StatelessWidget {\n  const DetailScreen({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    final todo = ModalRoute.of(context)!.settings.arguments as Todo;\n\n    // Use the Todo to create the UI.\n    return Scaffold(\n      appBar: AppBar(title: Text(todo.title)),\n      body: Padding(\n        padding: const EdgeInsets.all(16),\n        child: Text(todo.description),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Connect TextField to Controller in Flutter\nDESCRIPTION: This snippet demonstrates how to associate a TextField widget with a TextEditingController. By setting the 'controller' property of the TextField, changes in the text field are automatically reflected in the controller, and vice versa.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/forms/retrieve-input.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nreturn TextField(controller: myController);\n```\n\n----------------------------------------\n\nTITLE: Flutter Animated Container Complete Example\nDESCRIPTION: This is a complete interactive Flutter example showcasing the AnimatedContainer widget.  It includes the necessary imports, the StatefulWidget, State class, AnimatedContainer, and FloatingActionButton to trigger the animation.  Tapping the button randomizes the container's width, height, color, and border radius, causing it to animate to the new values.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/animation/animated-container.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nimport 'dart:math';\n\nimport 'package:flutter/material.dart';\n\nvoid main() => runApp(const AnimatedContainerApp());\n\nclass AnimatedContainerApp extends StatefulWidget {\n  const AnimatedContainerApp({super.key});\n\n  @override\n  State<AnimatedContainerApp> createState() => _AnimatedContainerAppState();\n}\n\nclass _AnimatedContainerAppState extends State<AnimatedContainerApp> {\n  // Define the various properties with default values. Update these properties\n  // when the user taps a FloatingActionButton.\n  double _width = 50;\n  double _height = 50;\n  Color _color = Colors.green;\n  BorderRadiusGeometry _borderRadius = BorderRadius.circular(8);\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      home: Scaffold(\n        appBar: AppBar(title: const Text('AnimatedContainer Demo')),\n        body: Center(\n          child: AnimatedContainer(\n            // Use the properties stored in the State class.\n            width: _width,\n            height: _height,\n            decoration: BoxDecoration(\n              color: _color,\n              borderRadius: _borderRadius,\n            ),\n            // Define how long the animation should take.\n            duration: const Duration(seconds: 1),\n            // Provide an optional curve to make the animation feel smoother.\n            curve: Curves.fastOutSlowIn,\n          ),\n        ),\n        floatingActionButton: FloatingActionButton(\n          // When the user taps the button\n          onPressed: () {\n            // Use setState to rebuild the widget with new values.\n            setState(() {\n              // Create a random number generator.\n              final random = Random();\n\n              // Generate a random width and height.\n              _width = random.nextInt(300).toDouble();\n              _height = random.nextInt(300).toDouble();\n\n              // Generate a random color.\n              _color = Color.fromRGBO(\n                random.nextInt(256),\n                random.nextInt(256),\n                random.nextInt(256),\n                1,\n              );\n\n              // Generate a random border radius.\n              _borderRadius = BorderRadius.circular(\n                random.nextInt(100).toDouble(),\n              );\n            });\n          },\n          child: const Icon(Icons.play_arrow),\n        ),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: FAB Cross-fade Implementation - Dart\nDESCRIPTION: Implements the cross-fade animation between the expand and collapse states of the FAB using `AnimatedContainer` and `AnimatedOpacity`. The open button sits on top of the close button within a `Stack`, allowing for the visual appearance of a cross-fade as the top button appears and disappears. It also includes logic for managing the open/close state and preventing tap events on the hidden open button using `IgnorePointer`.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/effects/expandable-fab.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nclass _ExpandableFabState extends State<ExpandableFab> {\n  bool _open = false;\n\n  @override\n  void initState() {\n    super.initState();\n    _open = widget.initialOpen ?? false;\n  }\n\n  void _toggle() {\n    setState(() {\n      _open = !_open;\n    });\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return SizedBox.expand(\n      child: Stack(\n        alignment: Alignment.bottomRight,\n        clipBehavior: Clip.none,\n        children: [_buildTapToCloseFab(), _buildTapToOpenFab()],\n      ),\n    );\n  }\n\n  Widget _buildTapToCloseFab() {\n    return SizedBox(\n      width: 56,\n      height: 56,\n      child: Center(\n        child: Material(\n          shape: const CircleBorder(),\n          clipBehavior: Clip.antiAlias,\n          elevation: 4,\n          child: InkWell(\n            onTap: _toggle,\n            child: Padding(\n              padding: const EdgeInsets.all(8),\n              child: Icon(Icons.close, color: Theme.of(context).primaryColor),\n            ),\n          ),\n        ),\n      ),\n    );\n  }\n\n  Widget _buildTapToOpenFab() {\n    return IgnorePointer(\n      ignoring: _open,\n      child: AnimatedContainer(\n        transformAlignment: Alignment.center,\n        transform: Matrix4.diagonal3Values(\n          _open ? 0.7 : 1.0,\n          _open ? 0.7 : 1.0,\n          1.0,\n        ),\n        duration: const Duration(milliseconds: 250),\n        curve: const Interval(0.0, 0.5, curve: Curves.easeOut),\n        child: AnimatedOpacity(\n          opacity: _open ? 0.0 : 1.0,\n          curve: const Interval(0.25, 1.0, curve: Curves.easeInOut),\n          duration: const Duration(milliseconds: 250),\n          child: FloatingActionButton(\n            onPressed: _toggle,\n            child: const Icon(Icons.create),\n          ),\n        ),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Load a banner ad in Flutter\nDESCRIPTION: This snippet demonstrates how to load a banner ad using the google_mobile_ads plugin. It creates a `BannerAd` instance, sets its properties (size, adUnitId, request, and listener), and then calls `load()` to initiate the ad request. The `BannerAdListener` handles success and failure callbacks. Important considerations are disposing the add if the widget is not mounted, and setting the banner ad using setState.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/plugins/google-mobile-ads.md#_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\n/// Loads a banner ad.\nvoid _loadAd() {\n  final bannerAd = BannerAd(\n    size: widget.adSize,\n    adUnitId: widget.adUnitId,\n    request: const AdRequest(),\n    listener: BannerAdListener(\n      // Called when an ad is successfully received.\n      onAdLoaded: (ad) {\n        if (!mounted) {\n          ad.dispose();\n          return;\n        }\n        setState(() {\n          _bannerAd = ad as BannerAd;\n        });\n      },\n      // Called when an ad request failed.\n      onAdFailedToLoad: (ad, error) {\n        debugPrint('BannerAd failed to load: $error');\n        ad.dispose();\n      },\n    ),\n  );\n\n  // Start loading.\n  bannerAd.load();\n}\n```\n\n----------------------------------------\n\nTITLE: Building SubscribeButton Widget in Flutter\nDESCRIPTION: This code snippet defines the build method for the `SubscribeButton` widget. It utilizes `ListenableBuilder` to listen to changes in the view model and updates the `FilledButton`'s text and style based on the subscription state. The `onPressed` callback triggers the `subscribe` method of the view model.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/app-architecture/design-patterns/optimistic-state.md#_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\n@override\nWidget build(BuildContext context) {\n  return ListenableBuilder(\n    listenable: widget.viewModel,\n    builder: (context, _) {\n      return FilledButton(\n        onPressed: widget.viewModel.subscribe,\n        style:\n            widget.viewModel.subscribed\n                ? SubscribeButtonStyle.subscribed\n                : SubscribeButtonStyle.unsubscribed,\n        child:\n            widget.viewModel.subscribed\n                ? const Text('Subscribed')\n                : const Text('Subscribe'),\n      );\n    },\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Mapping ChatMessage Attachments to Gemini Content in Dart\nDESCRIPTION: This snippet demonstrates how to map attachments from the standard `ChatMessage` class to the `Content` type used by the Gemini AI SDK.  It defines a `_partFrom` method to convert attachments like files and links into `DataPart` or `FilePart` respectively, and a `_contentFrom` method to create `Content` objects from `ChatMessage` instances.  This mapping is essential for providing context to the LLM from various sources.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ai-toolkit/custom-llm-providers.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:google_generative_ai/google_generative_ai.dart';\n...\n\nclass GeminiProvider extends LlmProvider with ChangeNotifier {\n  ...\n  static Part _partFrom(Attachment attachment) => switch (attachment) {\n        (final FileAttachment a) => DataPart(a.mimeType, a.bytes),\n        (final LinkAttachment a) => FilePart(a.url),\n      };\n\n  static Content _contentFrom(ChatMessage message) => Content(\n        message.origin.isUser ? 'user' : 'model',\n        [\n          TextPart(message.text ?? ''),\n          ...message.attachments.map(_partFrom),\n        ],\n      );\n}\n```\n\n----------------------------------------\n\nTITLE: Setting System Instructions for LLM in Flutter\nDESCRIPTION: This snippet demonstrates how to provide system instructions to the LLM using the systemInstruction parameter within the GenerativeModel. These instructions guide the LLM's behavior and tailor its responses to the application's needs. It shows the specific example from the recipe example app to set the LLM to deliver recipes.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ai-toolkit/feature-integration.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nclass _HomePageState extends State<HomePage> {\n  ...\n  // create a new provider with the given history and the current settings\n  LlmProvider _createProvider([List<ChatMessage>? history]) => GeminiProvider(\n      history: history,\n        ...,\n        model: GenerativeModel(\n          model: 'gemini-2.0-flash',\n          apiKey: geminiApiKey,\n          ...,\n          systemInstruction: Content.system('''\nYou are a helpful assistant that generates recipes based on the ingredients and \ninstructions provided as well as my food preferences, which are as follows:\n${Settings.foodPreferences.isEmpty ? 'I don\\'t have any food preferences' : Settings.foodPreferences}\n\nYou should keep things casual and friendly. You may generate multiple recipes in a single response, but only if asked. ...\n''',\n          ),\n        ),\n      );\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Building an Image Column with Container in Flutter (Dart)\nDESCRIPTION: This snippet shows how to use a Container widget to set the background color of a column in Flutter. It creates a column containing two rows of images, with the Container providing the background decoration.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/layout/index.md#_snippet_15\n\nLANGUAGE: dart\nCODE:\n```\nWidget _buildImageColumn() {\n    return Container(\n      decoration: const BoxDecoration(color: Colors.black26),\n      child: Column(children: [_buildImageRow(1), _buildImageRow(3)]),\n    );\n  }\n```\n\n----------------------------------------\n\nTITLE: Adding an Empty Drawer to a Scaffold - Dart\nDESCRIPTION: This code snippet shows how to add an empty `Drawer` to a `Scaffold`. The `Drawer` widget is a Material Design component that slides in from the side of the screen. It's typically used for navigation or displaying app options.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/design/drawer.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nScaffold(\n  appBar: AppBar(title: const Text('AppBar with hamburger button')),\n  drawer: Drawer(\n    child: // Populate the Drawer in the next step.\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Reading data with SharedPreferences - Dart\nDESCRIPTION: This code snippet demonstrates how to read an integer value from persistent storage using the `SharedPreferences` class. It retrieves an instance of `SharedPreferences`, then uses the `getInt` method to retrieve the value associated with the key 'counter'. If the key is not found, the code uses the null-aware operator `??` to default the value to 0.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/persistence/key-value.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nfinal prefs = await SharedPreferences.getInstance();\n\n// Try reading the counter value from persistent storage.\n// If not present, null is returned, so default to 0.\nfinal counter = prefs.getInt('counter') ?? 0;\n```\n\n----------------------------------------\n\nTITLE: Aligning components vertically using Column - Flutter/Dart\nDESCRIPTION: This snippet demonstrates how to align components vertically using the `Column` widget in Flutter.  It centers the children within the column. Dependencies: `cupertino_icons`.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/swiftui-devs.md#_snippet_10\n\nLANGUAGE: Dart\nCODE:\n```\nColumn(\n  mainAxisAlignment: MainAxisAlignment.center,\n  children: [Icon(CupertinoIcons.globe), Text('Hello, world!')],\n),\n```\n\n----------------------------------------\n\nTITLE: Showing SnackBar using ScaffoldMessenger (New)\nDESCRIPTION: This code illustrates the recommended way to display SnackBars using ScaffoldMessenger.of(context).showSnackBar. This approach allows SnackBars to persist across route changes and avoid potential context invalidation issues.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/scaffold-messenger.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nScaffold(\n  key: scaffoldKey,\n  body: GestureDetector(\n    onTap: () {\n      ScaffoldMessenger.of(context).showSnackBar(SnackBar(\n        content: const Text('snack'),\n        duration: const Duration(seconds: 1),\n        action: SnackBarAction(\n          label: 'ACTION',\n          onPressed: () { },\n        ),\n      ));\n    },\n    child: const Text('SHOW SNACK'),\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a Flutter Plugin Package (Java)\nDESCRIPTION: This command creates a Flutter plugin project named 'hello' configured for Android (Java), iOS, Linux, macOS, and Windows platforms. It uses the specified organization 'com.example'.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/packages-and-plugins/developing-packages.md#_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n$ flutter create --org com.example --template=plugin --platforms=android,ios,linux,macos,windows -a java hello\n```\n\n----------------------------------------\n\nTITLE: Mouse Hover Effects with MouseRegion in Flutter\nDESCRIPTION: This code snippet demonstrates how to create custom rollover and hover effects using `MouseRegion`. It uses `onEnter` and `onExit` callbacks to update the state of the widget and change the background color of a `Container` based on whether the mouse is hovering over it.  The `onHover` callback prints the local position of the mouse.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/adaptive-responsive/input.md#_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nreturn MouseRegion(\n  onEnter: (_) => setState(() => _isMouseOver = true),\n  onExit: (_) => setState(() => _isMouseOver = false),\n  onHover: (e) => print(e.localPosition),\n  child: Container(\n    height: 500,\n    color: _isMouseOver ? Colors.blue : Colors.black,\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Monitoring Animation State Flutter Dart\nDESCRIPTION: This code snippet demonstrates how to monitor the state of an animation using `addStatusListener()`. It adds a listener to the animation that prints the current status whenever it changes. This helps to track the progress of the animation, such as when it starts, stops, or reverses. It requires importing the Flutter material package.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/animations/tutorial.md#_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nclass _LogoAppState extends State<LogoApp> with SingleTickerProviderStateMixin {\n  late Animation<double> animation;\n  late AnimationController controller;\n\n  @override\n  void initState() {\n    super.initState();\n    controller = AnimationController(\n      duration: const Duration(seconds: 2),\n      vsync: this,\n    );\n    animation =\n        Tween<double>(begin: 0, end: 300).animate(controller)\n          ..addStatusListener((status) => print('$status'));\n    controller.forward();\n  }\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Battery Level in AppDelegate.swift (Swift)\nDESCRIPTION: This Swift code retrieves the battery level on iOS using the UIDevice API.  It checks for battery monitoring availability and returns the battery level as an integer percentage, or an error if unavailable.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/platform-integration/platform-channels.md#_snippet_13\n\nLANGUAGE: Swift\nCODE:\n```\nprivate func receiveBatteryLevel(result: FlutterResult) {\n  let device = UIDevice.current\n  device.isBatteryMonitoringEnabled = true\n  if device.batteryState == UIDevice.BatteryState.unknown {\n    result(FlutterError(code: \"UNAVAILABLE\",\n                        message: \"Battery level not available.\",\n                        details: nil))\n  } else {\n    result(Int(device.batteryLevel * 100))\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Physics Package in Dart\nDESCRIPTION: Imports the `flutter/physics.dart` package, which is required for using physics-based animations like `SpringSimulation`. This import is essential for implementing realistic motion effects in the animation.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/animation/physics-simulation.md#_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/physics.dart';\n```\n\n----------------------------------------\n\nTITLE: Fetching Local User Profile in Flutter\nDESCRIPTION: This code snippet demonstrates how to fetch a user profile from a local database in a Flutter application. It uses a `_databaseService` to fetch the profile and throws an exception if the data is not found. This approach requires the data to be preloaded and kept up to date with a synchronization mechanism.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/app-architecture/design-patterns/offline-first.md#_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nFuture<UserProfile> getUserProfile() async {\n  // Fetch the user profile from the database\n  final userProfile = await _databaseService.fetchUserProfile();\n\n  // Return the database result if it exists\n  if (userProfile == null) {\n    throw Exception('Data not found');\n  }\n\n  return userProfile;\n}\n\nFuture<void> sync() async {\n  try {\n    // Fetch the user profile from the API\n    final userProfile = await _apiClientService.getUserProfile();\n\n    // Update the database with the API result\n    await _databaseService.updateUserProfile(userProfile);\n  } catch (e) {\n    // Try again later\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Display TextField Value in Flutter Alert\nDESCRIPTION: This code shows how to display the current value of a TextField in an AlertDialog when a FloatingActionButton is pressed. It uses the 'myController.text' property to access the text entered by the user in the TextField and displays it within the AlertDialog's content.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/forms/retrieve-input.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nFloatingActionButton(\n  // When the user presses the button, show an alert dialog containing\n  // the text that the user has entered into the text field.\n  onPressed: () {\n    showDialog(\n      context: context,\n      builder: (context) {\n        return AlertDialog(\n          // Retrieve the text that the user has entered by using the\n          // TextEditingController.\n          content: Text(myController.text),\n        );\n      },\n    );\n  },\n  tooltip: 'Show me the value!',\n  child: const Icon(Icons.text_fields),\n),\n```\n\n----------------------------------------\n\nTITLE: Updating AndroidManifest.xml to use customized app name\nDESCRIPTION: This XML snippet demonstrates how to update the `AndroidManifest.xml` file to use the `app_name` resource defined in `build.gradle.kts`. This allows the app to display different names based on the current product flavor.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/deployment/flavors.md#_snippet_5\n\nLANGUAGE: XML\nCODE:\n```\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\">\n    <application\n      android:label=\"@string/app_name\"\n      ...\n    />\n/>\n```\n\n----------------------------------------\n\nTITLE: Deleting Data from SQLite Table in Dart\nDESCRIPTION: This snippet demonstrates the `delete()` method for removing a ToDo item from the SQLite database based on its `id`.  It returns an error if no rows were deleted indicating that no ToDo item with the given ID was found.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/app-architecture/design-patterns/sql.md#_snippet_13\n\nLANGUAGE: dart\nCODE:\n```\nFuture<Result<void>>> delete(int id) async {\n  try {\n    final rowsDeleted = await _database!.delete(\n      _kTableTodo,\n      where: '$_kColumnId = ?',\n      whereArgs: [id],\n    );\n    if (rowsDeleted == 0) {\n      return Result.error(Exception('No todo found with id $id'));\n    }\n    return Result.ok(null);\n  } on Exception catch (e) {\n    return Result.error(e);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: FormField autoValidate Before Migration Dart\nDESCRIPTION: This code snippet demonstrates how to use the `autovalidate` parameter in a `FormField` before the API migration. It shows the deprecated way of enabling auto-validation, where validation happens on the first build.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/form-field-autovalidation-api.md#_snippet_0\n\nLANGUAGE: Dart\nCODE:\n```\nclass MyWidget extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return FormField(\n      autovalidate: true,\n      builder: (FormFieldState state) {\n        return Container();\n      },\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Channel Handler on Background Thread - Objective-C\nDESCRIPTION: This Objective-C code sets up a FlutterMethodChannel to execute its handlers on a background thread by leveraging the Task Queue API on iOS. It retrieves a task queue from the registrar's messenger and associates it with the channel, ensuring that method calls are processed on a separate background thread.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/platform-integration/platform-channels.md#_snippet_26\n\nLANGUAGE: Objective-C\nCODE:\n```\n+ (void)registerWithRegistrar:(NSObject<FlutterPluginRegistrar>*)registrar {\n  NSObject<FlutterTaskQueue>* taskQueue =\n      [[registrar messenger] makeBackgroundTaskQueue];\n  FlutterMethodChannel* channel =\n      [FlutterMethodChannel methodChannelWithName:@\"com.example.foo\"\n                                  binaryMessenger:[registrar messenger]\n                                            codec:[FlutterStandardMethodCodec sharedInstance]\n                                        taskQueue:taskQueue];\n  MyPlugin* instance = [[MyPlugin alloc] init];\n  [registrar addMethodCallDelegate:instance channel:channel];\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Method Channel in Dart\nDESCRIPTION: This snippet demonstrates how to create a method channel in Dart to communicate with native Android code. The `platformMethodChannel` constant is initialized with a unique channel name, which must match the channel name in the Kotlin code. This channel is used to invoke methods on the Android side.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/platform-integration/android/compose-activity.md#_snippet_0\n\nLANGUAGE: Dart\nCODE:\n```\nimport 'package:flutter/material.dart';\nimport 'package:flutter/services.dart';\n\n// SECTION 1: START COPYING HERE\nconst platformMethodChannel = MethodChannel(\n  // Note: You can change this string value, but it must match\n  // the `CHANNEL` attribute in the next step.\n  'com.example.flutter_android_activity',\n);\n// SECTION 1: END COPYING HERE\n```\n\n----------------------------------------\n\nTITLE: Making Network Calls with Http Package in Flutter\nDESCRIPTION: This code snippet shows how to use the `http` package to make a network call in Flutter. It fetches data from a specified URL using the `http.get()` method. The response body is then logged for further processing.  This example utilizes `async`/`await` for asynchronous operation.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/android-devs.md#_snippet_21\n\nLANGUAGE: dart\nCODE:\n```\nimport 'dart:developer' as developer;\nimport 'package:http/http.dart' as http;\n\nFuture<void> loadData() async {\n  var dataURL = Uri.parse('https://jsonplaceholder.typicode.com/posts');\n  http.Response response = await http.get(dataURL);\n  developer.log(response.body);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding SQLite and Path Dependencies\nDESCRIPTION: This snippet demonstrates how to add the `sqflite` and `path` packages as dependencies to a Flutter project using the `flutter pub add` command. The `sqflite` package enables interaction with SQLite databases, while the `path` package provides functions for defining database storage locations.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/persistence/sqlite.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ flutter pub add sqflite path\n```\n\n----------------------------------------\n\nTITLE: Interactive Flutter app orientation example - Dart\nDESCRIPTION: This snippet provides a complete, interactive Flutter app example that demonstrates how to use OrientationBuilder to dynamically adjust the layout of a GridView based on the device orientation. It generates a grid of items, displaying them in two columns in portrait mode and three columns in landscape mode.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/design/orientation.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\n\nvoid main() {\n  runApp(const MyApp());\n}\n\nclass MyApp extends StatelessWidget {\n  const MyApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    const appTitle = 'Orientation Demo';\n\n    return const MaterialApp(\n      title: appTitle,\n      home: OrientationList(title: appTitle),\n    );\n  }\n}\n\nclass OrientationList extends StatelessWidget {\n  final String title;\n\n  const OrientationList({super.key, required this.title});\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: Text(title)),\n      body: OrientationBuilder(\n        builder: (context, orientation) {\n          return GridView.count(\n            // Create a grid with 2 columns in portrait mode, or\n            // 3 columns in landscape mode.\n            crossAxisCount: orientation == Orientation.portrait ? 2 : 3,\n            // Generate 100 widgets that display their index in the list.\n            children: List.generate(100, (index) {\n              return Center(\n                child: Text(\n                  'Item $index',\n                  style: TextTheme.of(context).displayLarge,\n                ),\n              );\n            }),\n          );\n        },\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Signing in to Game Services with GamesServices.signIn() in Dart\nDESCRIPTION: This Dart code snippet shows how to sign in a player to the platform-specific game service (Game Center on iOS, Play Games Services on Android) using the `GamesServices.signIn()` method from the `games_services` package.  It includes a try-catch block to handle potential `PlatformException` errors during the sign-in process.  It's crucial to call this after `runApp()` to avoid blocking the app's initial rendering.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/games/achievements-leaderboard.md#_snippet_2\n\nLANGUAGE: Dart\nCODE:\n```\ntry {\n  await GamesServices.signIn();\n} on PlatformException catch (e) {\n  // ... deal with failures ...\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Tab Content with TabBarView in Flutter\nDESCRIPTION: This snippet shows how to display content for each tab using the TabBarView widget. The children of TabBarView correspond to the tabs defined in the TabBar, ensuring content is displayed correctly when a tab is selected.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/design/tabs.md#_snippet_2\n\nLANGUAGE: Dart\nCODE:\n```\nbody: const TabBarView(\n  children: [\n    Icon(Icons.directions_car),\n    Icon(Icons.directions_transit),\n    Icon(Icons.directions_bike),\n  ],\n),\n```\n\n----------------------------------------\n\nTITLE: Setting font for a Text widget in Flutter\nDESCRIPTION: This code snippet shows how to apply a custom font (RobotoMono) to a `Text` widget by specifying the `fontFamily` property in the `TextStyle`.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/design/fonts.md#_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nchild: Text(\n  'Roboto Mono sample',\n  style: TextStyle(fontFamily: 'RobotoMono'),\n),\n```\n\n----------------------------------------\n\nTITLE: Update Album Title with TextField Input in Dart\nDESCRIPTION: This code snippet creates a `Column` widget containing a `TextField` for user input and an `ElevatedButton` to trigger the data update. Upon pressing the button, it updates the `_futureAlbum` state with the result of calling `updateAlbum` with the user's input from the `TextField`.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/networking/update-data.md#_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nColumn(\n  mainAxisAlignment: MainAxisAlignment.center,\n  children: <Widget>[\n    Padding(\n      padding: const EdgeInsets.all(8),\n      child: TextField(\n        controller: _controller,\n        decoration: const InputDecoration(hintText: 'Enter Title'),\n      ),\n    ),\n    ElevatedButton(\n      onPressed: () {\n        setState(() {\n          _futureAlbum = updateAlbum(_controller.text);\n        });\n      },\n      child: const Text('Update Data'),\n    ),\n  ],\n);\n```\n\n----------------------------------------\n\nTITLE: Define ScreenArguments class in Dart\nDESCRIPTION: Defines a class `ScreenArguments` to hold the title and message to be passed as arguments to a named route. This class encapsulates the data being passed between routes.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/navigation/navigate-with-arguments.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n// You can pass any object to the arguments parameter.\n// In this example, create a class that contains both\n// a customizable title and message.\nclass ScreenArguments {\n  final String title;\n  final String message;\n\n  ScreenArguments(this.title, this.message);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Widget\nDESCRIPTION: This snippet shows how to create a custom Flutter widget called PaddedText that extends StatelessWidget. It overrides the build method to return a Padding widget containing a Text widget, demonstrating widget composition.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/fundamentals/widgets.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nclass PaddedText extends StatelessWidget {\n  const PaddedText({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return Padding(\n      padding: const EdgeInsets.all(8.0),\n      child: const Text('Hello, World!'),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Empty Flutter Project\nDESCRIPTION: This command creates a Flutter project with a minimal `main.dart` file. The `--empty` option ensures that the project starts with a bare-bones structure, allowing for greater control over the initial codebase. This can be useful for projects that require a custom setup or have specific architectural requirements.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/reference/create-new-app.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ flutter create --empty\n```\n\n----------------------------------------\n\nTITLE: Listen for Changes with TextEditingController - Flutter\nDESCRIPTION: This snippet illustrates how to listen for changes to a `TextEditingController` in Flutter and trigger a callback function when the text changes. The `addListener` method is used within the `initState` to start listening, and the listener is removed in the `dispose` method to prevent memory leaks.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/forms/text-field-changes.md#_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\n@override\nvoid initState() {\n  super.initState();\n\n  // Start listening to changes.\n  myController.addListener(_printLatestValue);\n}\n```\n\n----------------------------------------\n\nTITLE: Using Form widget with TextFormField in Flutter\nDESCRIPTION: This Dart snippet demonstrates the usage of the `Form` widget with `TextFormField` widgets in Flutter.  It defines a form with a single email input field, including validation using a validator and saving the value using the `onSaved` callback. The `formKey` is used to reference the form's state.  An `ElevatedButton` triggers the form submission.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/react-native-devs.md#_snippet_53\n\nLANGUAGE: Dart\nCODE:\n```\n@override\nWidget build(BuildContext context) {\n  return Form(\n    key: formKey,\n    child: Column(\n      children: <Widget>[\n        TextFormField(\n          validator: (value) {\n            if (value != null && value.contains('@')) {\n              return null;\n            }\n            return 'Not a valid email.';\n          },\n          onSaved: (val) {\n            _email = val;\n          },\n          decoration: const InputDecoration(\n            hintText: 'Enter your email',\n            labelText: 'Email',\n          ),\n        ),\n        ElevatedButton(onPressed: _submit, child: const Text('Login')),\n      ],\n    ),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing dart:io for HTTP Client in Flutter\nDESCRIPTION: This Dart snippet shows how to import the `dart:io` library in Flutter.  `dart:io` provides the core HTTP support client and is required to create an HTTP client to perform network requests.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/react-native-devs.md#_snippet_49\n\nLANGUAGE: Dart\nCODE:\n```\nimport 'dart:io';\n```\n\n----------------------------------------\n\nTITLE: Implementing Customer Cart Widget\nDESCRIPTION: This snippet defines the `CustomerCart` StatelessWidget, representing the area where food items are dropped. It updates the UI based on whether items are present, highlights the cart when an item is being dragged over it, and displays the customer's name and total price.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/effects/drag-a-widget.md#_snippet_9\n\nLANGUAGE: Dart\nCODE:\n```\nclass CustomerCart extends StatelessWidget {\n  const CustomerCart({\n    super.key,\n    required this.customer,\n    this.highlighted = false,\n    this.hasItems = false,\n  });\n\n  final Customer customer;\n  final bool highlighted;\n  final bool hasItems;\n\n  @override\n  Widget build(BuildContext context) {\n    final textColor = highlighted ? Colors.white : Colors.black;\n\n    return Transform.scale(\n      scale: highlighted ? 1.075 : 1.0,\n      child: Material(\n        elevation: highlighted ? 8 : 4,\n        borderRadius: BorderRadius.circular(22),\n        color: highlighted ? const Color(0xFFF64209) : Colors.white,\n        child: Padding(\n          padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 24),\n          child: Column(\n            mainAxisSize: MainAxisSize.min,\n            children: [\n              ClipOval(\n                child: SizedBox(\n                  width: 46,\n                  height: 46,\n                  child: Image(\n                    image: customer.imageProvider,\n                    fit: BoxFit.cover,\n                  ),\n                ),\n              ),\n              const SizedBox(height: 8),\n              Text(\n                customer.name,\n                style: Theme.of(context).textTheme.titleMedium?.copyWith(\n                  color: textColor,\n                  fontWeight: hasItems ? FontWeight.normal : FontWeight.bold,\n                ),\n              ),\n              Visibility(\n                visible: hasItems,\n                maintainState: true,\n                maintainAnimation: true,\n                maintainSize: true,\n                child: Column(\n                  children: [\n                    const SizedBox(height: 4),\n                    Text(\n                      customer.formattedTotalItemPrice,\n                      style: Theme.of(context).textTheme.bodySmall!.copyWith(\n                        color: textColor,\n                        fontSize: 16,\n                        fontWeight: FontWeight.bold,\n                      ),\n                    ),\n                    const SizedBox(height: 4),\n                    Text(\n                      '${customer.items.length} item${customer.items.length != 1 ? 's' : ''}',\n                      style: Theme.of(context).textTheme.titleMedium!.copyWith(\n                        color: textColor,\n                        fontSize: 12,\n                      ),\n                    ),\n                  ],\n                ),\n              ),\n            ],\n          ),\n        ),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Menu List Item Widget\nDESCRIPTION: This snippet defines the `MenuListItem` StatelessWidget, which represents each individual food item in the menu list. It displays the item's name, price, and image.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/effects/drag-a-widget.md#_snippet_10\n\nLANGUAGE: Dart\nCODE:\n```\nclass MenuListItem extends StatelessWidget {\n  const MenuListItem({\n    super.key,\n    this.name = '',\n    this.price = '',\n    required this.photoProvider,\n    this.isDepressed = false,\n  });\n\n  final String name;\n  final String price;\n  final ImageProvider photoProvider;\n  final bool isDepressed;\n\n  @override\n  Widget build(BuildContext context) {\n    return Material(\n      elevation: 12,\n      borderRadius: BorderRadius.circular(20),\n      child: Padding(\n        padding: const EdgeInsets.all(12),\n        child: Row(\n          mainAxisSize: MainAxisSize.max,\n          children: [\n            ClipRRect(\n              borderRadius: BorderRadius.circular(12),\n              child: SizedBox(\n                width: 120,\n                height: 120,\n                child: Center(\n                  child: AnimatedContainer(\n                    duration: const Duration(milliseconds: 100),\n                    curve: Curves.easeInOut,\n                    height: isDepressed ? 115 : 120,\n                    width: isDepressed ? 115 : 120,\n                    child: Image(image: photoProvider, fit: BoxFit.cover),\n                  ),\n                ),\n              ),\n            ),\n            const SizedBox(width: 30),\n            Expanded(\n              child: Column(\n                crossAxisAlignment: CrossAxisAlignment.start,\n                children: [\n                  Text(\n                    name,\n                    style: Theme.of(\n                      context,\n                    ).textTheme.titleMedium?.copyWith(fontSize: 18),\n                  ),\n                  const SizedBox(height: 10),\n                  Text(\n                    price,\n                    style: Theme.of(context).textTheme.titleMedium?.copyWith(\n                      fontWeight: FontWeight.bold,\n                      fontSize: 18,\n                    ),\n                  ),\n                ],\n              ),\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sharing State with Widget Constructors in Flutter\nDESCRIPTION: This code shows how to share state between widgets by passing data through widget constructors (dependency injection).  The MyCounter widget receives the 'count' value through its constructor and displays it.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/fundamentals/state-management.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nclass MyCounter extends StatelessWidget {\n  final int count;\n  const MyCounter({super.key, required this.count});\n\n  @override\n  Widget build(BuildContext context) {\n    return Text('$count');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Full Sample App Using Isolates in Flutter\nDESCRIPTION: This code provides a complete Flutter application demonstrating the use of Isolates for background data loading.  It includes UI elements like a loading indicator and a list view to display the fetched data. The application showcases how to use Isolates to prevent UI blocking when performing network requests and JSON parsing.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/android-devs.md#_snippet_19\n\nLANGUAGE: dart\nCODE:\n```\nimport 'dart:async';\nimport 'dart:convert';\nimport 'dart:isolate';\n\nimport 'package:flutter/material.dart';\nimport 'package:http/http.dart' as http;\n\nvoid main() {\n  runApp(const SampleApp());\n}\n\nclass SampleApp extends StatelessWidget {\n  const SampleApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: 'Sample App',\n      theme: ThemeData(\n        colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),\n      ),\n      home: const SampleAppPage(),\n    );\n  }\n}\n\nclass SampleAppPage extends StatefulWidget {\n  const SampleAppPage({super.key});\n\n  @override\n  State<SampleAppPage> createState() => _SampleAppPageState();\n}\n\nclass _SampleAppPageState extends State<SampleAppPage> {\n  List widgets = [];\n\n  @override\n  void initState() {\n    super.initState();\n    loadData();\n  }\n\n  Widget getBody() {\n    bool showLoadingDialog = widgets.isEmpty;\n    if (showLoadingDialog) {\n      return getProgressDialog();\n    } else {\n      return getListView();\n    }\n  }\n\n  Widget getProgressDialog() {\n    return const Center(child: CircularProgressIndicator());\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: const Text('Sample App')),\n      body: getBody(),\n    );\n  }\n\n  ListView getListView() {\n    return ListView.builder(\n      itemCount: widgets.length,\n      itemBuilder: (context, position) {\n        return getRow(position);\n      },\n    );\n  }\n\n  Widget getRow(int i) {\n    return Padding(\n      padding: const EdgeInsets.all(10),\n      child: Text(\"Row ${widgets[i][\"title\"]}\"),\n    );\n  }\n\n  Future<void> loadData() async {\n    ReceivePort receivePort = ReceivePort();\n    await Isolate.spawn(dataLoader, receivePort.sendPort);\n\n    // The 'echo' isolate sends its SendPort as the first message.\n    SendPort sendPort = await receivePort.first as SendPort;\n\n    final msg =\n        await sendReceive(\n              sendPort,\n              'https://jsonplaceholder.typicode.com/posts',\n            )\n            as List<Object?>;\n\n    setState(() {\n      widgets = msg;\n    });\n  }\n\n  // The entry point for the isolate.\n  static Future<void> dataLoader(SendPort sendPort) async {\n    // Open the ReceivePort for incoming messages.\n    ReceivePort port = ReceivePort();\n\n    // Notify any other isolates what port this isolate listens to.\n    sendPort.send(port.sendPort);\n\n    await for (var msg in port) {\n      String data = msg[0] as String;\n      SendPort replyTo = msg[1] as SendPort;\n\n      String dataURL = data;\n      http.Response response = await http.get(Uri.parse(dataURL));\n      // Lots of JSON to parse\n      replyTo.send(jsonDecode(response.body));\n    }\n  }\n\n  Future<Object?> sendReceive(SendPort port, Object? msg) {\n    ReceivePort response = ReceivePort();\n    port.send([msg, response.sendPort]);\n    return response.first;\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up Dependency Injection using MultiProvider (Dart)\nDESCRIPTION: This code shows how to use `MultiProvider` to provide instances of services and repositories to the Flutter widget tree. It uses `Provider` and `ChangeNotifierProvider` to create and expose instances of `AuthApiClient`, `ApiClient`, `SharedPreferencesService`, `AuthRepositoryRemote`, `DestinationRepositoryRemote`, and `ContinentRepositoryRemote`. The repositories are injected with their dependencies using `context.read()`.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/app-architecture/case-study/dependency-injection.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nrunApp(\n  MultiProvider(\n    providers: [\n      Provider(create: (context) => AuthApiClient()),\n      Provider(create: (context) => ApiClient()),\n      Provider(create: (context) => SharedPreferencesService()),\n      ChangeNotifierProvider(\n        create: (context) => AuthRepositoryRemote(\n          authApiClient: context.read(),\n          apiClient: context.read(),\n          sharedPreferencesService: context.read(),\n        ) as AuthRepository,\n      ),\n      Provider(create: (context) =>\n        DestinationRepositoryRemote(\n          apiClient: context.read(),\n        ) as DestinationRepository,\n      ),\n      Provider(create: (context) =>\n        ContinentRepositoryRemote(\n          apiClient: context.read(),\n        ) as ContinentRepository,\n      ),\n      // In the Compass app, additional service and repository providers live here.\n    ],\n    child: const MainApp(),\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Adding Http Package Dependency in Flutter\nDESCRIPTION: This code snippet demonstrates how to add the `http` package as a dependency to a Flutter project using the `flutter pub add` command. The `http` package is a popular library for making network requests in Flutter applications.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/android-devs.md#_snippet_20\n\nLANGUAGE: dart\nCODE:\n```\n$ flutter pub add http\n```\n\n----------------------------------------\n\nTITLE: Implementing TapboxC in Flutter\nDESCRIPTION: This snippet defines the TapboxC widget, a StatefulWidget that manages the '_highlight' state internally and exports the '_active' state to its parent. The GestureDetector listens to tap events, updating the '_highlight' state on tap down, tap up, and tap cancel events. It triggers the onChanged callback to notify the parent about state changes.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/interactivity/index.md#_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\n//----------------------------- TapboxC ------------------------------\n\nclass TapboxC extends StatefulWidget {\n  const TapboxC({super.key, this.active = false, required this.onChanged});\n\n  final bool active;\n  final ValueChanged<bool> onChanged;\n\n  @override\n  State<TapboxC> createState() => _TapboxCState();\n}\n\nclass _TapboxCState extends State<TapboxC> {\n  bool _highlight = false;\n\n  void _handleTapDown(TapDownDetails details) {\n    setState(() {\n      _highlight = true;\n    });\n  }\n\n  void _handleTapUp(TapUpDetails details) {\n    setState(() {\n      _highlight = false;\n    });\n  }\n\n  void _handleTapCancel() {\n    setState(() {\n      _highlight = false;\n    });\n  }\n\n  void _handleTap() {\n    widget.onChanged(!widget.active);\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    // This example adds a green border on tap down.\n    // On tap up, the square changes to the opposite state.\n    return GestureDetector(\n      onTapDown: _handleTapDown, // Handle the tap events in the order that\n      onTapUp: _handleTapUp, // they occur: down, up, tap, cancel\n      onTap: _handleTap,\n      onTapCancel: _handleTapCancel,\n      child: Container(\n        width: 200,\n        height: 200,\n        decoration: BoxDecoration(\n          color: widget.active ? Colors.lightGreen[700] : Colors.grey[600],\n          border:\n              _highlight\n                  ? Border.all(color: Colors.teal[700]!, width: 10)\n                  : null,\n        ),\n        child: Center(\n          child: Text(\n            widget.active ? 'Active' : 'Inactive',\n            style: const TextStyle(fontSize: 32, color: Colors.white),\n          ),\n        ),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using StatefulWidget - Dynamically Updating Text in Flutter\nDESCRIPTION: This code snippet illustrates how to dynamically update text using a `StatefulWidget` in Flutter.  A `StatefulWidget` is used to wrap the `Text` widget and update it when a button is clicked, demonstrating state management in Flutter.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/android-devs.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\n\nvoid main() {\n  runApp(const SampleApp());\n}\n\nclass SampleApp extends StatelessWidget {\n  const SampleApp({super.key});\n  // This widget is the root of your application.\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: 'Sample App',\n      theme: ThemeData(\n        colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),\n      ),\n      home: const SampleAppPage(),\n    );\n  }\n}\n\nclass SampleAppPage extends StatefulWidget {\n  const SampleAppPage({super.key});\n\n  @override\n  State<SampleAppPage> createState() => _SampleAppPageState();\n}\n\nclass _SampleAppPageState extends State<SampleAppPage> {\n  // Default placeholder text.\n  String textToShow = 'I Like Flutter';\n\n  void _updateText() {\n    setState(() {\n      // Update the text.\n      textToShow = 'Flutter is Awesome!';\n    });\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: const Text('Sample App')),\n      body: Center(child: Text(textToShow)),\n      floatingActionButton: FloatingActionButton(\n        onPressed: _updateText,\n        tooltip: 'Update Text',\n        child: const Icon(Icons.update),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Rotating Flutter Logo on Double Tap (Dart)\nDESCRIPTION: This snippet demonstrates how to use `GestureDetector` to detect a double tap and animate the rotation of a Flutter logo. It uses `AnimationController` and `RotationTransition` to achieve the animation. The animation is reversed if it's already completed upon the double tap.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/xamarin-forms-devs.md#_snippet_45\n\nLANGUAGE: dart\nCODE:\n```\nclass RotatingFlutterDetector extends StatefulWidget {\n  const RotatingFlutterDetector({super.key});\n\n  @override\n  State<RotatingFlutterDetector> createState() =>\n      _RotatingFlutterDetectorState();\n}\n\nclass _RotatingFlutterDetectorState extends State<RotatingFlutterDetector>\n    with SingleTickerProviderStateMixin {\n  late final AnimationController controller;\n  late final CurvedAnimation curve;\n\n  @override\n  void initState() {\n    super.initState();\n    controller = AnimationController(\n      duration: const Duration(milliseconds: 2000),\n      vsync: this,\n    );\n    curve = CurvedAnimation(parent: controller, curve: Curves.easeIn);\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: Center(\n        child: GestureDetector(\n          onDoubleTap: () {\n            if (controller.isCompleted) {\n              controller.reverse();\n            } else {\n              controller.forward();\n            }\n          },\n          child: RotationTransition(\n            turns: curve,\n            child: const FlutterLogo(size: 200),\n          ),\n        ),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: TextButton with foreground color override using styleFrom() in Dart\nDESCRIPTION: This snippet shows how to override the foreground color of a TextButton using the styleFrom() utility method. It simplifies the process of creating a ButtonStyle with a simple set of values, including the ColorScheme colors it depends on.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/buttons.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nTextButton(\n  style: TextButton.styleFrom(\n    foregroundColor: Colors.blue,\n  ),\n  onPressed: () { },\n  child: Text('TextButton'),\n)\n```\n\n----------------------------------------\n\nTITLE: Navigator Push Named Route in Flutter\nDESCRIPTION: This snippet shows how to use named routes for navigation in Flutter. It uses `Navigator.pushNamed(context, '/second')` to navigate to a route defined in `MaterialApp.routes`. While simple, this approach has limitations for complex deep linking scenarios.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/navigation/index.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nchild: const Text('Open second screen'),\nonPressed: () {\n  Navigator.pushNamed(context, '/second');\n},\n```\n\n----------------------------------------\n\nTITLE: Creating Album via HTTP POST in Dart\nDESCRIPTION: This code snippet demonstrates how to create an album by sending an HTTP POST request to a specified API endpoint using the http package. It defines an asynchronous function createAlbum that takes the album title as input, encodes it as JSON, and includes it in the request body. The function returns an Album object if the server returns a 201 CREATED status code, or throws an exception if the request fails.  Requires the 'http' package. The title parameter is the title of the album.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/networking/send-data.md#_snippet_8\n\nLANGUAGE: Dart\nCODE:\n```\nimport 'dart:async';\nimport 'dart:convert';\n\nimport 'package:flutter/material.dart';\nimport 'package:http/http.dart' as http;\n\nFuture<Album> createAlbum(String title) async {\n  final response = await http.post(\n    Uri.parse('https://jsonplaceholder.typicode.com/albums'),\n    headers: <String, String>{\n      'Content-Type': 'application/json; charset=UTF-8',\n    },\n    body: jsonEncode(<String, String>{'title': title}),\n  );\n\n  if (response.statusCode == 201) {\n    // If the server did return a 201 CREATED response,\n    // then parse the JSON.\n    return Album.fromJson(jsonDecode(response.body) as Map<String, dynamic>);\n  } else {\n    // If the server did not return a 201 CREATED response,\n    // then throw an exception.\n    throw Exception('Failed to create album.');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Authenticated Request Example - Dart\nDESCRIPTION: This complete example shows how to fetch data from a web service with authentication in Flutter. It imports necessary packages, defines an `Album` class, and includes a function `fetchAlbum` that makes an authenticated GET request using the `http` package and parses the response.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/networking/authenticated-requests.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nimport 'dart:async';\nimport 'dart:convert';\nimport 'dart:io';\n\nimport 'package:http/http.dart' as http;\n\nFuture<Album> fetchAlbum() async {\n  final response = await http.get(\n    Uri.parse('https://jsonplaceholder.typicode.com/albums/1'),\n    // Send authorization headers to the backend.\n    headers: {HttpHeaders.authorizationHeader: 'Basic your_api_token_here'},\n  );\n  final responseJson = jsonDecode(response.body) as Map<String, dynamic>;\n\n  return Album.fromJson(responseJson);\n}\n\nclass Album {\n  final int userId;\n  final int id;\n  final String title;\n\n  const Album({required this.userId, required this.id, required this.title});\n\n  factory Album.fromJson(Map<String, dynamic> json) {\n    return switch (json) {\n      {'userId': int userId, 'id': int id, 'title': String title} => Album(\n        userId: userId,\n        id: id,\n        title: title,\n      ),\n      _ => throw const FormatException('Failed to load album.'),\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating ThemeSwitch with ThemeSwitchViewModel - Dart\nDESCRIPTION: This snippet shows how to create a `ThemeSwitch` widget and its associated `ThemeSwitchViewModel`, passing the `ThemeRepository` as a dependency to the ViewModel. This allows the ThemeSwitch to interact with the ThemeRepository to manage the application's theme.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/app-architecture/design-patterns/key-value-data.md#_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nThemeSwitch(\n  viewmodel: ThemeSwitchViewModel(widget.themeRepository),\n),\n```\n\n----------------------------------------\n\nTITLE: Listening to the command state in ListenableBuilder\nDESCRIPTION: This code demonstrates how to use a `ListenableBuilder` to listen to the `Command`'s state and rebuild the widget when the state changes. Instead of listening to the view model directly, the `ListenableBuilder` listens to the command object.  Requires Flutter SDK.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/app-architecture/design-patterns/command.md#_snippet_13\n\nLANGUAGE: dart\nCODE:\n```\nListenableBuilder(\n  listenable: widget.viewModel.load,\n  builder: (context, child) {\n    if (widget.viewModel.load.running) {\n      return const Center(child: CircularProgressIndicator());\n    }\n  // ···\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Form with GlobalKey Flutter\nDESCRIPTION: This snippet demonstrates how to create a StatefulWidget containing a Form with a GlobalKey. The GlobalKey allows validation of the form. It initializes the state and builds the basic form structure.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/forms/validation.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\n\n// Define a custom Form widget.\nclass MyCustomForm extends StatefulWidget {\n  const MyCustomForm({super.key});\n\n  @override\n  MyCustomFormState createState() {\n    return MyCustomFormState();\n  }\n}\n\n// Define a corresponding State class.\n// This class holds data related to the form.\nclass MyCustomFormState extends State<MyCustomForm> {\n  // Create a global key that uniquely identifies the Form widget\n  // and allows validation of the form.\n  //\n  // Note: This is a `GlobalKey<FormState>`,\n  // not a GlobalKey<MyCustomFormState>.\n  final _formKey = GlobalKey<FormState>();\n\n  @override\n  Widget build(BuildContext context) {\n    // Build a Form widget using the _formKey created above.\n    return Form(\n      key: _formKey,\n      child: const Column(\n        children: <Widget>[\n          // Add TextFormFields and ElevatedButton here.\n        ],\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Opt-out of Nonlinear Text Scaling in Flutter (Dart)\nDESCRIPTION: This code snippet demonstrates how to temporarily opt-out of nonlinear text scaling on Android 14 by using a modified `MediaQuery` widget. It wraps the `realWidgetTree` with a `Builder` and a `MediaQuery` that forces linear text scaling using the deprecated `textScaleFactor` API.  This snippet relies on Flutter's `MediaQuery` and `TextScaler` classes.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/android-14-nonlinear-text-scaling-migration.md#_snippet_0\n\nLANGUAGE: Dart\nCODE:\n```\nrunApp(\n  Builder(builder: (context) {\n    final mediaQueryData = MediaQuery.of(context);\n    final mediaQueryDataWithLinearTextScaling = mediaQueryData\n      .copyWith(textScaler: TextScaler.linear(mediaQueryData.textScaler.textScaleFactor));\n    return MediaQuery(data: mediaQueryDataWithLinearTextScaling, child: realWidgetTree);\n  }),\n);\n```\n\n----------------------------------------\n\nTITLE: Isolate.run example: Parsing JSON in the background\nDESCRIPTION: This code demonstrates how to use `Isolate.run` to parse a large JSON file in a background isolate. This prevents UI jank by offloading the decoding process from the main isolate. The `getPhotos` function loads a JSON string from an asset, then uses `Isolate.run` to decode the JSON and convert it into a list of `Photo` objects.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/perf/isolates.md#_snippet_0\n\nLANGUAGE: Dart\nCODE:\n```\n// Produces a list of 211,640 photo objects.\n// (The JSON file is ~20MB.)\nFuture<List<Photo>> getPhotos() async {\n  final String jsonString = await rootBundle.loadString('assets/photos.json');\n  final List<Photo> photos = await Isolate.run<List<Photo>>(() {\n    final List<Object?> photoData = jsonDecode(jsonString) as List<Object?>;\n    return photoData.cast<Map<String, Object?>>().map(Photo.fromJson).toList();\n  });\n  return photos;\n}\n```\n\n----------------------------------------\n\nTITLE: Building a ListView of Todos in Dart\nDESCRIPTION: This snippet shows how to build a `ListView` using `ListView.builder` to display a list of `Todo` items.  It iterates through the `todos` list and creates a `ListTile` for each todo, displaying its title.  This assumes a `todos` variable is already defined.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/navigation/passing-data.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nListView.builder(\n  itemCount: todos.length,\n  itemBuilder: (context, index) {\n    return ListTile(title: Text(todos[index].title));\n  },\n)\n```\n\n----------------------------------------\n\nTITLE: CustomScrollView in MaterialApp (Material)\nDESCRIPTION: This code snippet demonstrates how to create a CustomScrollView within a MaterialApp. It includes a Scaffold with a body containing a CustomScrollView. The slivers property, which will hold the app bar and list, is initialized as an empty list.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/lists/floating-app-bar.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nMaterialApp(\n  title: 'Floating App Bar',\n  home: Scaffold(\n    // No app bar property provided yet.\n    body: CustomScrollView(\n      // Add the app bar and list of items as slivers in the next steps.\n      slivers: <Widget>[],\n    ),\n  ),\n)\n```\n\n----------------------------------------\n\nTITLE: Building a Flutter Web App for Release\nDESCRIPTION: This command builds a release version of the Flutter web application. It generates optimized and minified files suitable for deployment to a web server. The output is placed in the `build/web` directory. The assets need to be served from the root of your domain or a configured subpath.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/platform-integration/web/building.md#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ flutter build web\n```\n\n----------------------------------------\n\nTITLE: Full Flutter App with Custom Themes\nDESCRIPTION: This complete Flutter application demonstrates the use of custom themes, including defining a `ThemeData` for the `MaterialApp`, applying it to various widgets, and using Google Fonts for text styling. It also showcases overriding the theme for a specific `FloatingActionButton`.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/design/themes.md#_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\n// Include the Google Fonts package to provide more text format options\n// https://pub.dev/packages/google_fonts\nimport 'package:google_fonts/google_fonts.dart';\n\nvoid main() {\n  runApp(const MyApp());\n}\n\nclass MyApp extends StatelessWidget {\n  const MyApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    const appName = 'Custom Themes';\n\n    return MaterialApp(\n      title: appName,\n      theme: ThemeData(\n        // Define the default brightness and colors.\n        colorScheme: ColorScheme.fromSeed(\n          seedColor: Colors.purple,\n          // TRY THIS: Change to \"Brightness.light\"\n          //           and see that all colors change\n          //           to better contrast a light background.\n          brightness: Brightness.dark,\n        ),\n\n        // Define the default `TextTheme`. Use this to specify the default\n        // text styling for headlines, titles, bodies of text, and more.\n        textTheme: TextTheme(\n          displayLarge: const TextStyle(\n            fontSize: 72,\n            fontWeight: FontWeight.bold,\n          ),\n          // TRY THIS: Change one of the GoogleFonts\n          //           to \"lato\", \"poppins\", or \"lora\".\n          //           The title uses \"titleLarge\"\n          //           and the middle text uses \"bodyMedium\".\n          titleLarge: GoogleFonts.oswald(\n            fontSize: 30,\n            fontStyle: FontStyle.italic,\n          ),\n          bodyMedium: GoogleFonts.merriweather(),\n          displaySmall: GoogleFonts.pacifico(),\n        ),\n      ),\n      home: const MyHomePage(title: appName),\n    );\n  }\n}\n\nclass MyHomePage extends StatelessWidget {\n  final String title;\n\n  const MyHomePage({super.key, required this.title});\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: Text(\n          title,\n          style: Theme.of(context).textTheme.titleLarge!.copyWith(\n            color: Theme.of(context).colorScheme.onSecondary,\n          ),\n        ),\n        backgroundColor: Theme.of(context).colorScheme.secondary,\n      ),\n      body: Center(\n        child: Container(\n          padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 12),\n          color: Theme.of(context).colorScheme.primary,\n          child: Text(\n            'Text with a background color',\n            // TRY THIS: Change the Text value\n            //           or change the Theme.of(context).textTheme\n            //           to \"displayLarge\" or \"displaySmall\".\n            style: Theme.of(context).textTheme.bodyMedium!.copyWith(\n              color: Theme.of(context).colorScheme.onPrimary,\n            ),\n          ),\n        ),\n      ),\n      floatingActionButton: Theme(\n        data: Theme.of(context).copyWith(\n          // TRY THIS: Change the seedColor to \"Colors.red\" or\n          //           \"Colors.blue\".\n          colorScheme: ColorScheme.fromSeed(\n            seedColor: Colors.pink,\n            brightness: Brightness.dark,\n          ),\n        ),\n        child: FloatingActionButton(\n          onPressed: () {},\n          child: const Icon(Icons.add),\n        ),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Returning to First Route\nDESCRIPTION: This snippet illustrates how to return from the `SecondRoute` back to the `FirstRoute` using `Navigator.pop(context)`. This removes the current route from the navigation stack, revealing the previous route.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/navigation/navigation-basics.md#_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\n// Within the SecondRoute widget\nonPressed: () {\n  Navigator.pop(context);\n}\n```\n\n----------------------------------------\n\nTITLE: Making a simple HTTP GET request using the http package in Dart\nDESCRIPTION: This snippet demonstrates how to make a basic HTTP GET request using the `http` package in Dart. It imports the `http` package, makes a GET request to a specified URL, and prints the response body. This is a simple example of retrieving data from the internet within a Flutter app. Requires the 'http' package.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/fundamentals/networking.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:http/http.dart' as http;\n\nvoid main() async {\n  var response = await http.get(\n    Uri.parse('https://jsonplaceholder.typicode.com/albums/1'),\n  );\n  print(response.body);\n}\n```\n\n----------------------------------------\n\nTITLE: Using Callbacks for State Updates in Flutter\nDESCRIPTION: This code demonstrates how to use callbacks to notify other widgets when a value changes. The MyCounter widget exposes an onChanged callback that is invoked when the count is incremented.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/fundamentals/state-management.md#_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nclass MyCounter extends StatefulWidget {\n  const MyCounter({super.key, required this.onChanged});\n\n  final ValueChanged<int> onChanged;\n\n  @override\n  State<MyCounter> createState() => _MyCounterState();\n}\n```\n\n----------------------------------------\n\nTITLE: Flutter Video Player App\nDESCRIPTION: This Dart code snippet demonstrates a complete Flutter application that plays a video from a network URL using the `video_player` package. It includes initializing the `VideoPlayerController`, displaying the video using the `VideoPlayer` widget, and providing play/pause controls. The video loops and handles resource disposal.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/plugins/play-video.md#_snippet_6\n\nLANGUAGE: Dart\nCODE:\n```\nimport 'dart:async';\n\nimport 'package:flutter/material.dart';\nimport 'package:video_player/video_player.dart';\n\nvoid main() => runApp(const VideoPlayerApp());\n\nclass VideoPlayerApp extends StatelessWidget {\n  const VideoPlayerApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return const MaterialApp(\n      title: 'Video Player Demo',\n      home: VideoPlayerScreen(),\n    );\n  }\n}\n\nclass VideoPlayerScreen extends StatefulWidget {\n  const VideoPlayerScreen({super.key});\n\n  @override\n  State<VideoPlayerScreen> createState() => _VideoPlayerScreenState();\n}\n\nclass _VideoPlayerScreenState extends State<VideoPlayerScreen> {\n  late VideoPlayerController _controller;\n  late Future<void> _initializeVideoPlayerFuture;\n\n  @override\n  void initState() {\n    super.initState();\n\n    // Create and store the VideoPlayerController. The VideoPlayerController\n    // offers several different constructors to play videos from assets, files,\n    // or the internet.\n    _controller = VideoPlayerController.networkUrl(\n      Uri.parse(\n        'https://flutter.github.io/assets-for-api-docs/assets/videos/butterfly.mp4',\n      ),\n    );\n\n    // Initialize the controller and store the Future for later use.\n    _initializeVideoPlayerFuture = _controller.initialize();\n\n    // Use the controller to loop the video.\n    _controller.setLooping(true);\n  }\n\n  @override\n  void dispose() {\n    // Ensure disposing of the VideoPlayerController to free up resources.\n    _controller.dispose();\n\n    super.dispose();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: const Text('Butterfly Video')),\n      // Use a FutureBuilder to display a loading spinner while waiting for the\n      // VideoPlayerController to finish initializing.\n      body: FutureBuilder(\n        future: _initializeVideoPlayerFuture,\n        builder: (context, snapshot) {\n          if (snapshot.connectionState == ConnectionState.done) {\n            // If the VideoPlayerController has finished initialization, use\n            // the data it provides to limit the aspect ratio of the video.\n            return AspectRatio(\n              aspectRatio: _controller.value.aspectRatio,\n              // Use the VideoPlayer widget to display the video.\n              child: VideoPlayer(_controller),\n            );\n          } else {\n            // If the VideoPlayerController is still initializing, show a\n            // loading spinner.\n            return const Center(child: CircularProgressIndicator());\n          }\n        },\n      ),\n      floatingActionButton: FloatingActionButton(\n        onPressed: () {\n          // Wrap the play or pause in a call to `setState`. This ensures the\n          // correct icon is shown.\n          setState(() {\n            // If the video is playing, pause it.\n            if (_controller.value.isPlaying) {\n              _controller.pause();\n            } else {\n              // If the video is paused, play it.\n              _controller.play();\n            }\n          });\n        },\n        // Display the correct icon depending on the state of the player.\n        child: Icon(\n          _controller.value.isPlaying ? Icons.pause : Icons.play_arrow,\n        ),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Tweens for Animation - Dart\nDESCRIPTION: This code initializes an AnimationController and two Tween objects: one for size animation and another for opacity animation. The AnimationController manages the animation's duration and synchronization with the screen's refresh rate. The Tweens define the start and end values for the size and opacity properties that will be animated.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/animations/tutorial.md#_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\ncontroller = AnimationController(\n  duration: const Duration(seconds: 2),\n  vsync: this,\n);\nsizeAnimation = Tween<double>(begin: 0, end: 300).animate(controller);\nopacityAnimation = Tween<double>(begin: 0.1, end: 1).animate(controller);\n```\n\n----------------------------------------\n\nTITLE: Listen for WebSocket Messages with StreamBuilder in Flutter\nDESCRIPTION: Listens for messages from the WebSocket server using a `StreamBuilder` widget. The `StreamBuilder` rebuilds its UI whenever it receives a new message from the `channel.stream`.  The `snapshot.data` contains the data received from the WebSocket.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/networking/web-sockets.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nStreamBuilder(\n  stream: channel.stream,\n  builder: (context, snapshot) {\n    return Text(snapshot.hasData ? '${snapshot.data}' : '');\n  },\n),\n```\n\n----------------------------------------\n\nTITLE: Creating ImageSection Widget in Flutter\nDESCRIPTION: Defines an `ImageSection` widget that displays an image from the app's assets. It takes an `image` string (the asset path) as input and uses an `Image.asset` widget to load and display the image. The `BoxFit.cover` property ensures the image fills the allocated space.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/layout/tutorial.md#_snippet_11\n\nLANGUAGE: Dart\nCODE:\n```\nclass ImageSection extends StatelessWidget {\n  const ImageSection({super.key, required this.image});\n\n  final String image;\n\n  @override\n  Widget build(BuildContext context) {\n    return Image.asset(image, width: 600, height: 240, fit: BoxFit.cover);\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Connect TextEditingController to TextField - Flutter\nDESCRIPTION: This snippet demonstrates how to connect a `TextEditingController` to a `TextField` in Flutter.  The `controller` property of the `TextField` is set to an instance of `TextEditingController`, enabling control and monitoring of the text field's input.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/forms/text-field-changes.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nTextField(controller: myController),\n```\n\n----------------------------------------\n\nTITLE: Build Flutter AAR (Console)\nDESCRIPTION: Builds a Flutter module as an Android Archive (AAR) using the `flutter build aar` command. This creates a local Maven repository containing AAR and POM artifacts, allowing the host app to depend on the Flutter module without requiring the Flutter SDK to be installed.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/add-to-app/android/project-setup.md#_snippet_6\n\nLANGUAGE: console\nCODE:\n```\ncd some/path/flutter_module\nflutter build aar\n```\n\n----------------------------------------\n\nTITLE: Using ChangeNotifier in Flutter\nDESCRIPTION: This code demonstrates how to use ChangeNotifier to manage and notify listeners of state changes.  The CounterNotifier class extends ChangeNotifier and calls notifyListeners() whenever the increment() method is called.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/fundamentals/state-management.md#_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nclass CounterNotifier extends ChangeNotifier {\n  int _count = 0;\n  int get count => _count;\n\n  void increment() {\n    _count++;\n    notifyListeners();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Dismissible Widget Dart\nDESCRIPTION: This snippet wraps each item in a Dismissible widget, enabling users to swipe items away. The onDismissed function removes the item from the list and displays a snackbar. A Key is required for uniquely identifying the widgets. The setState is used to rebuild the widget after removing the element.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/gestures/dismissible.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nitemBuilder: (context, index) {\n  final item = items[index];\n  return Dismissible(\n    // Each Dismissible must contain a Key. Keys allow Flutter to\n    // uniquely identify widgets.\n    key: Key(item),\n    // Provide a function that tells the app\n    // what to do after an item has been swiped away.\n    onDismissed: (direction) {\n      // Remove the item from the data source.\n      setState(() {\n        items.removeAt(index);\n      });\n\n      // Then show a snackbar.\n      ScaffoldMessenger.of(\n        context,\n      ).showSnackBar(SnackBar(content: Text('$item dismissed')));\n    },\n    child: ListTile(title: Text(item)),\n  );\n},\n```\n\n----------------------------------------\n\nTITLE: Flutter Swipe to Dismiss Example Dart\nDESCRIPTION: This snippet provides a complete interactive example using DartPad, demonstrating the swipe-to-dismiss functionality with a Dismissible widget in Flutter. It includes a StatefulWidget (MyApp) to manage the list of items and update the UI upon swiping. It also shows how to display a snackbar.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/gestures/dismissible.md#_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\n\nvoid main() {\n  runApp(const MyApp());\n}\n\n// MyApp is a StatefulWidget. This allows updating the state of the\n// widget when an item is removed.\nclass MyApp extends StatefulWidget {\n  const MyApp({super.key});\n\n  @override\n  MyAppState createState() {\n    return MyAppState();\n  }\n}\n\nclass MyAppState extends State<MyApp> {\n  final items = List<String>.generate(20, (i) => 'Item ${i + 1}');\n\n  @override\n  Widget build(BuildContext context) {\n    const title = 'Dismissing Items';\n\n    return MaterialApp(\n      title: title,\n      theme: ThemeData(\n        colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),\n      ),\n      home: Scaffold(\n        appBar: AppBar(title: const Text(title)),\n        body: ListView.builder(\n          itemCount: items.length,\n          itemBuilder: (context, index) {\n            final item = items[index];\n            return Dismissible(\n              // Each Dismissible must contain a Key. Keys allow Flutter to\n              // uniquely identify widgets.\n              key: Key(item),\n              // Provide a function that tells the app\n              // what to do after an item has been swiped away.\n              onDismissed: (direction) {\n                // Remove the item from the data source.\n                setState(() {\n                  items.removeAt(index);\n                });\n\n                // Then show a snackbar.\n                ScaffoldMessenger.of(\n                  context,\n                ).showSnackBar(SnackBar(content: Text('$item dismissed')));\n              },\n              // Show a red background as the item is swiped away.\n              background: Container(color: Colors.red),\n              child: ListTile(title: Text(item)),\n            );\n          },\n        ),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the Model with HTTP Client in Dart\nDESCRIPTION: This code defines a `CounterModel` class responsible for loading and updating counter state using an HTTP client. It includes a `CounterData` class to represent the data structure.  The model makes HTTP requests to a server and parses the response. It avoids using Flutter-specific libraries to maintain platform independence and testability.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/fundamentals/state-management.md#_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:http/http.dart';\n\nclass CounterData {\n  CounterData(this.count);\n\n  final int count;\n}\n\nclass CounterModel {\n  Future<CounterData> loadCountFromServer() async {\n    final uri = Uri.parse('https://myfluttercounterapp.net/count');\n    final response = await get(uri);\n\n    if (response.statusCode != 200) {\n      throw ('Failed to update resource');\n    }\n\n    return CounterData(int.parse(response.body));\n  }\n\n  Future<CounterData> updateCountOnServer(int newCount) async {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Display the video player with FutureBuilder and AspectRatio\nDESCRIPTION: This Dart code snippet demonstrates how to display the video player using a FutureBuilder to handle the asynchronous initialization of the VideoPlayerController. It uses AspectRatio to maintain the correct proportions of the video.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/plugins/play-video.md#_snippet_4\n\nLANGUAGE: Dart\nCODE:\n```\n// Use a FutureBuilder to display a loading spinner while waiting for the\n// VideoPlayerController to finish initializing.\nFutureBuilder(\n  future: _initializeVideoPlayerFuture,\n  builder: (context, snapshot) {\n    if (snapshot.connectionState == ConnectionState.done) {\n      // If the VideoPlayerController has finished initialization, use\n      // the data it provides to limit the aspect ratio of the video.\n      return AspectRatio(\n        aspectRatio: _controller.value.aspectRatio,\n        // Use the VideoPlayer widget to display the video.\n        child: VideoPlayer(_controller),\n      );\n    } else {\n      // If the VideoPlayerController is still initializing, show a\n      // loading spinner.\n      return const Center(child: CircularProgressIndicator());\n    }\n  },\n)\n```\n\n----------------------------------------\n\nTITLE: AndroidManifest.xml Intent Filter\nDESCRIPTION: This XML snippet adds an intent filter to the `AndroidManifest.xml` file, enabling the app to handle `http` and `https` deep links for the specified domain (`example.com`).  The `android:autoVerify=\"true\"` attribute enables Android to automatically verify the app link by checking the `assetlinks.json` file on the specified domain. Replace `example.com` with your domain.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/navigation/set-up-app-links.md#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<intent-filter android:autoVerify=\"true\">\n    <action android:name=\"android.intent.action.VIEW\" />\n    <category android:name=\"android.intent.category.DEFAULT\" />\n    <category android:name=\"android.intent.category.BROWSABLE\" />\n    <data android:scheme=\"http\" android:host=\"example.com\" />\n    <data android:scheme=\"https\" />\n</intent-filter>\n```\n\n----------------------------------------\n\nTITLE: Custom Element forgetChild Override (After Migration) - Dart\nDESCRIPTION: This code snippet demonstrates the correct implementation after the migration, where the super.forgetChild(child) call is included within the overridden forgetChild method. This ensures proper global key reservation removal.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/forgetchild-call-super.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nclass CustomElement extends Element {\n\n    @override\n    void forgetChild(Element child) {\n        ...\n        super.forgetChild(child);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using ListenableBuilder with ChangeNotifier in Flutter\nDESCRIPTION: This code demonstrates how to use ListenableBuilder to rebuild a widget when a ChangeNotifier updates its listeners.  The ListenableBuilder listens to the counterNotifier and rebuilds the Text widget to display the updated count.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/fundamentals/state-management.md#_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nColumn(\n  children: [\n    ListenableBuilder(\n      listenable: counterNotifier,\n      builder: (context, child) {\n        return Text('counter: ${counterNotifier.count}');\n      },\n    ),\n    TextButton(\n      child: Text('Increment'),\n      onPressed: () {\n        counterNotifier.increment();\n      },\n    ),\n  ],\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a DropdownMenu in Flutter\nDESCRIPTION: This code snippet shows how to create a DropdownMenu widget in Flutter, allowing users to select from a list of options. It demonstrates using a TextEditingController for programmatically controlling the TextField, defining DropdownMenuEntrys for each menu item, and handling the onSelected callback when an option is chosen. The example also customizes the appearance of the menu items.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/fundamentals/user-input.md#_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nenum ColorLabel {\n  blue('Blue', Colors.blue),\n  pink('Pink', Colors.pink),\n  green('Green', Colors.green),\n  yellow('Orange', Colors.orange),\n  grey('Grey', Colors.grey);\n\n  const ColorLabel(this.label, this.color);\n  final String label;\n  final Color color;\n}\n\n// StatefulWidget...\n@override\nWidget build(BuildContext context) {\n  return DropdownMenu<ColorLabel>(\n    initialSelection: ColorLabel.green,\n    controller: colorController,\n    // requestFocusOnTap is enabled/disabled by platforms when it is null.\n    // On mobile platforms, this is false by default. Setting this to true will\n    // trigger focus request on the text field and virtual keyboard will appear\n    // afterward. On desktop platforms however, this defaults to true.\n    requestFocusOnTap: true,\n    label: const Text('Color'),\n    onSelected: (ColorLabel? color) {\n      setState(() {\n        selectedColor = color;\n      });\n    },\n    dropdownMenuEntries: ColorLabel.values\n      .map<DropdownMenuEntry<ColorLabel>>(\n          (ColorLabel color) {\n            return DropdownMenuEntry<ColorLabel>(\n              value: color,\n              label: color.label,\n              enabled: color.label != 'Grey',\n              style: MenuItemButton.styleFrom(\n                foregroundColor: color.color,\n              ),\n            );\n      }).toList(),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Prompting User Before Exiting Setup Flow in Dart\nDESCRIPTION: This snippet shows the code to prompt the user for confirmation before exiting the setup flow. This prevents accidental loss of progress. The prompt appears when pressing the hardware back button or when the user taps the back arrow in the app bar. PopScope handles the back button press, while IconButton handles the app bar back button.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/effects/nested-nav.md#_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> _onExitPressed() async {\n  final isConfirmed = await _isExitDesired();\n\n  if (isConfirmed && mounted) {\n    _exitSetup();\n  }\n}\n\nFuture<bool> _isExitDesired() async {\n  return await showDialog<bool>(\n        context: context,\n        builder: (context) {\n          return AlertDialog(\n            title: const Text('Are you sure?'),\n            content: const Text(\n              'If you exit device setup, your progress will be lost.',\n            ),\n            actions: [\n              TextButton(\n                onPressed: () {\n                  Navigator.of(context).pop(true);\n                },\n                child: const Text('Leave'),\n              ),\n              TextButton(\n                onPressed: () {\n                  Navigator.of(context).pop(false);\n                },\n                child: const Text('Stay'),\n              ),\n            ],\n          );\n        },\n      ) ??\n      false;\n}\n\nvoid _exitSetup() {\n  Navigator.of(context).pop();\n}\n\n@override\nWidget build(BuildContext context) {\n  return PopScope(\n    canPop: false,\n    onPopInvokedWithResult: (didPop, _) async {\n      if (didPop) return;\n\n      if (await _isExitDesired() && context.mounted) {\n        _exitSetup();\n      }\n    },\n    child: Scaffold(appBar: _buildFlowAppBar(), body: const SizedBox()),\n  );\n}\n\nPreferredSizeWidget _buildFlowAppBar() {\n  return AppBar(\n    leading: IconButton(\n      onPressed: _onExitPressed,\n      icon: const Icon(Icons.chevron_left),\n    ),\n    title: const Text('Bulb Setup'),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Offline-First User Profile Update in Flutter\nDESCRIPTION: This code snippet demonstrates how to update a user profile by first storing the updated data in the local database and then attempting to send it to the API service. This allows users to store data locally even when offline. However, if the network call fails, the local database and the API service can become out of sync.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/app-architecture/design-patterns/offline-first.md#_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> updateUserProfile(UserProfile userProfile) async {\n  // Update the database with the user profile\n  await _databaseService.updateUserProfile(userProfile);\n\n  try {\n    // Update the API with the user profile\n    await _apiClientService.putUserProfile(userProfile);\n  } catch (e) {\n    // Handle the error\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring iOS Plugin Dependency in .podspec\nDESCRIPTION: This code snippet demonstrates how to declare a dependency on another Flutter plugin (url_launcher) in the `.podspec` file for the iOS platform. This allows the plugin's native iOS code to access the API exposed by `url_launcher`.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/packages-and-plugins/developing-packages.md#_snippet_37\n\nLANGUAGE: ruby\nCODE:\n```\nPod::Spec.new do |s|\n  # lines skipped\n  s.dependency 'url_launcher'\n```\n\n----------------------------------------\n\nTITLE: Unconditionally Accepting User Selected Locale - Dart\nDESCRIPTION: This code snippet shows how to use the localeResolutionCallback property in MaterialApp to unconditionally accept the locale selected by the user, ignoring the supportedLocales list. This allows the app to always use the user's preferred locale, regardless of whether it is explicitly supported.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/accessibility-and-internationalization/internationalization.md#_snippet_27\n\nLANGUAGE: Dart\nCODE:\n```\nMaterialApp(\n  localeResolutionCallback: (locale, supportedLocales) {\n    return locale;\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Registering a Background Isolate - Dart\nDESCRIPTION: This Dart code demonstrates how to register a background Isolate to use plugins. It initializes the `BackgroundIsolateBinaryMessenger` and then retrieves and prints a shared preference to demonstrate functionality within the isolate. This allows plugins to be used in isolates other than the root isolate.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/platform-integration/platform-channels.md#_snippet_22\n\nLANGUAGE: Dart\nCODE:\n```\nimport 'package:flutter/services.dart';\nimport 'package:shared_preferences/shared_preferences.dart';\n\nvoid _isolateMain(RootIsolateToken rootIsolateToken) async {\n  BackgroundIsolateBinaryMessenger.ensureInitialized(rootIsolateToken);\n  SharedPreferences sharedPreferences = await SharedPreferences.getInstance();\n  print(sharedPreferences.getBool('isDebug'));\n}\n\nvoid main() {\n  RootIsolateToken rootIsolateToken = RootIsolateToken.instance!;\n  Isolate.spawn(_isolateMain, rootIsolateToken);\n}\n```\n\n----------------------------------------\n\nTITLE: Decoding JSON with json_serializable in Dart\nDESCRIPTION: This snippet shows how to decode a JSON string into a `User` object using the generated `fromJson` factory constructor.  It assumes the `json_serializable` package has been configured and the `User` class has the necessary annotations.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/data-and-backend/serialization/json.md#_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nfinal userMap = jsonDecode(jsonString) as Map<String, dynamic>;\nfinal user = User.fromJson(userMap);\n```\n\n----------------------------------------\n\nTITLE: Using Select Statements in Dart\nDESCRIPTION: This Dart snippet shows how to use a `select` statement in `AppLocalizations`. It passes different string values ('male', 'female', 'other') to the `pronoun` method, which returns the corresponding pronoun based on the specified gender. Case sensitivity is important for the select statement to function correctly.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/accessibility-and-internationalization/internationalization.md#_snippet_19\n\nLANGUAGE: dart\nCODE:\n```\n// Examples of internationalized strings.\nreturn Column(\n  children: <Widget>[\n    ...\n    // Returns 'he'\n    Text(AppLocalizations.of(context)!.pronoun('male')),\n    // Returns 'she'\n    Text(AppLocalizations.of(context)!.pronoun('female')),\n    // Returns 'they'\n    Text(AppLocalizations.of(context)!.pronoun('other')),\n  ],\n);\n```\n\n----------------------------------------\n\nTITLE: TextInputClient Implementation (After Migration)\nDESCRIPTION: Demonstrates how to implement the `insertContent` method in the `TextInputClient` interface.  It includes the `@override` annotation. This will allow the application to receive rich content from the IME.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/insert-content-text-input-client.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nclass MyCustomTextInputClient implements TextInputClient {\n  // ...\n  @override\n  void insertContent() {\n    // ...\n  }\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating custom button elevation override - Flutter\nDESCRIPTION: Shows how to override a specific elevation, like the pressed elevation, when migrating from RaisedButton to ElevatedButton.  It illustrates the use of MaterialStateProperty to define state-dependent elevations.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/buttons.md#_snippet_16\n\nLANGUAGE: dart\nCODE:\n```\nRaisedButton(\n  highlightElevation: 16,\n  onPressed: () { },\n  child: Text('RaisedButton with a custom elevation'),\n)\n\nElevatedButton(\n  style: ButtonStyle(\n    elevation: MaterialStateProperty.resolveWith<double?>(\n      (Set<MaterialState> states) {\n        if (states.contains(MaterialState.pressed))\n          return 16;\n        return null;\n      }),\n  ),\n  onPressed: () { },\n  child: Text('ElevatedButton with a custom elevation'),\n)\n```\n\n----------------------------------------\n\nTITLE: Adapting App Bar Styles for iOS in Flutter\nDESCRIPTION: This code snippet demonstrates how to adapt the styling of an AppBar in Flutter to better match iOS platform styles. It modifies properties such as surfaceTintColor, shadowColor, scrolledUnderElevation and toolbarHeight based on the Platform.isIOS check. Additionally, it shows how to apply a custom TextTheme based on the cupertino theme on iOS.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/adaptive-responsive/platform-adaptations.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n// Map the text theme to iOS styles\nTextTheme cupertinoTextTheme = TextTheme(\n    headlineMedium: CupertinoThemeData()\n        .textTheme\n        .navLargeTitleTextStyle\n         // fixes a small bug with spacing\n        .copyWith(letterSpacing: -1.5),\n    titleLarge: CupertinoThemeData().textTheme.navTitleTextStyle)\n...\n\n// Use iOS text theme on iOS devices\nThemeData(\n      textTheme: Platform.isIOS ? cupertinoTextTheme : null,\n      ...\n)\n...\n\n// Modify AppBar properties\nAppBar(\n        surfaceTintColor: Platform.isIOS ? Colors.transparent : null,\n        shadowColor: Platform.isIOS ? CupertinoColors.darkBackgroundGray : null,\n        scrolledUnderElevation: Platform.isIOS ? .1 : null,\n        toolbarHeight: Platform.isIOS ? 44 : null,\n        ...\n      ),\n```\n\n----------------------------------------\n\nTITLE: Adding flutter_localizations and intl to pubspec.yaml (YAML)\nDESCRIPTION: This snippet demonstrates how to add the `flutter_localizations` and `intl` packages as dependencies in the `pubspec.yaml` file.  It uses the Flutter SDK for `flutter_localizations` and specifies `any` version for `intl`.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/accessibility-and-internationalization/internationalization.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  flutter:\n    sdk: flutter\n  flutter_localizations:\n    sdk: flutter\n  intl: any\n```\n\n----------------------------------------\n\nTITLE: Define API Client Service (Dart)\nDESCRIPTION: This code defines an `ApiClient` service class responsible for making CRUD calls to a client-facing server. Each method wraps a different API endpoint and exposes asynchronous response objects. It returns data classes specifically for raw data from the API, such as `BookingApiModel`.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/app-architecture/case-study/data-layer.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nclass ApiClient {\n  // Some code omitted for demo purposes.\n\n  Future<Result<List<ContinentApiModel>>> getContinents() async { /* ... */ }\n\n  Future<Result<List<DestinationApiModel>>> getDestinations() async { /* ... */ }\n\n  Future<Result<List<ActivityApiModel>>> getActivityByDestination(String ref) async { /* ... */ }\n\n  Future<Result<List<BookingApiModel>>> getBookings() async { /* ... */ }\n\n  Future<Result<BookingApiModel>> getBooking(int id) async { /* ... */ }\n\n  Future<Result<BookingApiModel>> postBooking(BookingApiModel booking) async { /* ... */ }\n\n  Future<Result<void>> deleteBooking(int id) async { /* ... */ }\n\n  Future<Result<UserApiModel>> getUser() async { /* ... */ }\n}\n```\n\n----------------------------------------\n\nTITLE: TextField Styling in Flutter\nDESCRIPTION: This snippet demonstrates how to create a TextField with an OutlineInputBorder and a hint text. The InputDecoration is used to customize the appearance of the text field.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/forms/text-input.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nTextField(\n  decoration: InputDecoration(\n    border: OutlineInputBorder(),\n    hintText: 'Enter a search term',\n  ),\n)\n```\n\n----------------------------------------\n\nTITLE: NavigationDrawer Implementation in Flutter\nDESCRIPTION: This code demonstrates how to implement the new NavigationDrawer widget in Flutter, replacing the Drawer. It uses NavigationDrawerDestination widgets for each item. This requires importing the material package. The children parameter expects a list of NavigationDrawerDestination widgets.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/material-3-migration.md#_snippet_14\n\nLANGUAGE: dart\nCODE:\n```\nNavigationDrawer(\n  children: <Widget>[\n    DrawerHeader(\n      child: Text(\n        'Drawer Header',\n        style: Theme.of(context).textTheme.titleLarge,\n      ),\n    ),\n    const NavigationDrawerDestination(\n      icon: Icon(Icons.message),\n      label: Text('Messages'),\n    ),\n    const NavigationDrawerDestination(\n      icon: Icon(Icons.account_circle),\n      label: Text('Profile'),\n    ),\n    const NavigationDrawerDestination(\n      icon: Icon(Icons.settings),\n      label: Text('Settings'),\n    ),\n  ],\n),\n```\n\n----------------------------------------\n\nTITLE: Building APKs with ABI Splitting using Flutter CLI\nDESCRIPTION: This snippet shows how to build separate release APKs for each target ABI using the Flutter CLI. This results in smaller APKs tailored to specific device architectures, reducing download sizes for users.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/deployment/android.md#_snippet_11\n\nLANGUAGE: none\nCODE:\n```\nflutter build apk --split-per-abi\n```\n\n----------------------------------------\n\nTITLE: Declare Internet Permission in AndroidManifest.xml (Android)\nDESCRIPTION: This XML snippet declares the necessary permission for an Android application to access the internet. It should be added to the AndroidManifest.xml file located in the android/app/src/main directory of your Flutter project. This permission allows the app to make HTTP requests and access network resources.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/data-and-backend/networking.md#_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<manifest xmlns:android...>\n ...\n <uses-permission android:name=\"android.permission.INTERNET\" />\n <application ...\n</manifest>\n```\n\n----------------------------------------\n\nTITLE: Overlaying Text on an Image with Stack in Flutter (Dart)\nDESCRIPTION: This snippet shows how to use a Stack to overlay text on top of an image (CircleAvatar) in Flutter. The `alignment` property of the Stack is used to position the text relative to the image.  It creates a circular avatar with a name overlaid.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/layout/index.md#_snippet_19\n\nLANGUAGE: dart\nCODE:\n```\nWidget _buildStack() {\n  return Stack(\n    alignment: const Alignment(0.6, 0.6),\n    children: [\n      const CircleAvatar(\n        backgroundImage: AssetImage('images/pic.jpg'),\n        radius: 100,\n      ),\n      Container(\n        decoration: const BoxDecoration(color: Colors.black45),\n        child: const Text(\n          'Mia B',\n          style: TextStyle(\n            fontSize: 20,\n            fontWeight: FontWeight.bold,\n            color: Colors.white,\n          ),\n        ),\n      ),\n    ],\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Testing A11y Guidelines with Flutter Test\nDESCRIPTION: This Dart snippet demonstrates how to use the Flutter Accessibility Guideline API to test if a widget (`AccessibleApp`) adheres to accessibility recommendations. It checks for minimum tap target sizes for Android and iOS, labeled tap targets, and sufficient text contrast. The `SemanticsHandle` is used to ensure semantics are properly initialized and disposed of.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/accessibility-and-internationalization/accessibility.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter_test/flutter_test.dart';\nimport 'package:your_accessible_app/main.dart';\n\nvoid main() {\n  testWidgets('Follows a11y guidelines', (tester) async {\n    final SemanticsHandle handle = tester.ensureSemantics();\n    await tester.pumpWidget(const AccessibleApp());\n\n    // Checks that tappable nodes have a minimum size of 48 by 48 pixels\n    // for Android.\n    await expectLater(tester, meetsGuideline(androidTapTargetGuideline));\n\n    // Checks that tappable nodes have a minimum size of 44 by 44 pixels\n    // for iOS.\n    await expectLater(tester, meetsGuideline(iOSTapTargetGuideline));\n\n    // Checks that touch targets with a tap or long press action are labeled.\n    await expectLater(tester, meetsGuideline(labeledTapTargetGuideline));\n\n    // Checks whether semantic nodes meet the minimum text contrast levels.\n    // The recommended text contrast is 3:1 for larger text\n    // (18 point and above regular).\n    await expectLater(tester, meetsGuideline(textContrastGuideline));\n    handle.dispose();\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Flutter Named Routes Example (Complete)\nDESCRIPTION: This comprehensive example combines all the elements: two screens (FirstScreen and SecondScreen), named route definitions using MaterialApp, navigation to the second screen using Navigator.pushNamed(), and returning to the first screen using Navigator.pop(). It provides a fully functional demonstration of named routes in Flutter.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/navigation/named-routes.md#_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\n\nvoid main() {\n  runApp(\n    MaterialApp(\n      title: 'Named Routes Demo',\n      // Start the app with the \"/\" named route. In this case, the app starts\n      // on the FirstScreen widget.\n      initialRoute: '/',\n      routes: {\n        // When navigating to the \"/\" route, build the FirstScreen widget.\n        '/': (context) => const FirstScreen(),\n        // When navigating to the \"/second\" route, build the SecondScreen widget.\n        '/second': (context) => const SecondScreen(),\n      },\n    ),\n  );\n}\n\nclass FirstScreen extends StatelessWidget {\n  const FirstScreen({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: const Text('First Screen')),\n      body: Center(\n        child: ElevatedButton(\n          // Within the `FirstScreen` widget\n          onPressed: () {\n            // Navigate to the second screen using a named route.\n            Navigator.pushNamed(context, '/second');\n          },\n          child: const Text('Launch screen'),\n        ),\n      ),\n    );\n  }\n}\n\nclass SecondScreen extends StatelessWidget {\n  const SecondScreen({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: const Text('Second Screen')),\n      body: Center(\n        child: ElevatedButton(\n          // Within the SecondScreen widget\n          onPressed: () {\n            // Navigate back to the first screen by popping the current route\n            // off the stack.\n            Navigator.pop(context);\n          },\n          child: const Text('Go back!'),\n        ),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Building a ListenableBuilder Widget in Flutter\nDESCRIPTION: This code snippet shows how to build a `ListenableBuilder` widget that listens to changes in a `TodoListViewModel` and displays a list of ToDo items using a `ListView`. Each item in the list is represented by a `ListTile` with a delete button.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/app-architecture/design-patterns/sql.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nListenableBuilder(\n  listenable: widget.viewModel,\n  builder: (context, child) {\n    return ListView.builder(\n      itemCount: widget.viewModel.todos.length,\n      itemBuilder: (context, index) {\n        final todo = widget.viewModel.todos[index];\n        return ListTile(\n          title: Text(todo.task),\n          trailing: IconButton(\n            icon: const Icon(Icons.delete),\n            onPressed: () => widget.viewModel.delete.execute(todo.id),\n          ),\n        );\n      },\n    );\n  },\n)\n```\n\n----------------------------------------\n\nTITLE: Handle Method Call for Battery Level (Kotlin)\nDESCRIPTION: This Kotlin code handles the `getBatteryLevel` method call from Flutter. It calls the `getBatteryLevel()` function and returns the result to Flutter. It also includes error handling and a `notImplemented()` response for unknown methods.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/platform-integration/platform-channels.md#_snippet_7\n\nLANGUAGE: Kotlin\nCODE:\n```\n    MethodChannel(flutterEngine.dartExecutor.binaryMessenger, CHANNEL).setMethodCallHandler {\n      // This method is invoked on the main thread.\n      call, result ->\n      if (call.method == \"getBatteryLevel\") {\n        val batteryLevel = getBatteryLevel()\n\n        if (batteryLevel != -1) {\n          result.success(batteryLevel)\n        } else {\n          result.error(\"UNAVAILABLE\", \"Battery level not available.\", null)\n        }\n      } else {\n        result.notImplemented()\n      }\n    }\n```\n\n----------------------------------------\n\nTITLE: Flutter Expandable FAB Example\nDESCRIPTION: This Dart code implements an expandable floating action button (FAB) in Flutter. The example includes the main application setup, the expandable FAB widget with its animation logic, action buttons, and a dummy list view to showcase the FAB's placement.\nIt defines widgets such as `ExampleExpandableFab`, `ExpandableFab`, `_ExpandingActionButton`, `ActionButton`, and `FakeItem` to create the UI and functionality of the expandable FAB.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/effects/expandable-fab.md#_snippet_7\n\nLANGUAGE: Dart\nCODE:\n```\nimport 'dart:math' as math;\n\nimport 'package:flutter/material.dart';\n\nvoid main() {\n  runApp(\n    const MaterialApp(\n      home: ExampleExpandableFab(),\n      debugShowCheckedModeBanner: false,\n    ),\n  );\n}\n\n@immutable\nclass ExampleExpandableFab extends StatelessWidget {\n  static const _actionTitles = ['Create Post', 'Upload Photo', 'Upload Video'];\n\n  const ExampleExpandableFab({super.key});\n\n  void _showAction(BuildContext context, int index) {\n    showDialog<void>(\n      context: context,\n      builder: (context) {\n        return AlertDialog(\n          content: Text(_actionTitles[index]),\n          actions: [\n            TextButton(\n              onPressed: () => Navigator.of(context).pop(),\n              child: const Text('CLOSE'),\n            ),\n          ],\n        );\n      },\n    );\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: const Text('Expandable Fab')),\n      body: ListView.builder(\n        padding: const EdgeInsets.symmetric(vertical: 8),\n        itemCount: 25,\n        itemBuilder: (context, index) {\n          return FakeItem(isBig: index.isOdd);\n        },\n      ),\n      floatingActionButton: ExpandableFab(\n        distance: 112,\n        children: [\n          ActionButton(\n            onPressed: () => _showAction(context, 0),\n            icon: const Icon(Icons.format_size),\n          ),\n          ActionButton(\n            onPressed: () => _showAction(context, 1),\n            icon: const Icon(Icons.insert_photo),\n          ),\n          ActionButton(\n            onPressed: () => _showAction(context, 2),\n            icon: const Icon(Icons.videocam),\n          ),\n        ],\n      ),\n    );\n  }\n}\n\n@immutable\nclass ExpandableFab extends StatefulWidget {\n  const ExpandableFab({\n    super.key,\n    this.initialOpen,\n    required this.distance,\n    required this.children,\n  });\n\n  final bool? initialOpen;\n  final double distance;\n  final List<Widget> children;\n\n  @override\n  State<ExpandableFab> createState() => _ExpandableFabState();\n}\n\nclass _ExpandableFabState extends State<ExpandableFab>\n    with SingleTickerProviderStateMixin {\n  late final AnimationController _controller;\n  late final Animation<double> _expandAnimation;\n  bool _open = false;\n\n  @override\n  void initState() {\n    super.initState();\n    _open = widget.initialOpen ?? false;\n    _controller = AnimationController(\n      value: _open ? 1.0 : 0.0,\n      duration: const Duration(milliseconds: 250),\n      vsync: this,\n    );\n    _expandAnimation = CurvedAnimation(\n      curve: Curves.fastOutSlowIn,\n      reverseCurve: Curves.easeOutQuad,\n      parent: _controller,\n    );\n  }\n\n  @override\n  void dispose() {\n    _controller.dispose();\n    super.dispose();\n  }\n\n  void _toggle() {\n    setState(() {\n      _open = !_open;\n      if (_open) {\n        _controller.forward();\n      } else {\n        _controller.reverse();\n      }\n    });\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return SizedBox.expand(\n      child: Stack(\n        alignment: Alignment.bottomRight,\n        clipBehavior: Clip.none,\n        children: [\n          _buildTapToCloseFab(),\n          ..._buildExpandingActionButtons(),\n          _buildTapToOpenFab(),\n        ],\n      ),\n    );\n  }\n\n  Widget _buildTapToCloseFab() {\n    return SizedBox(\n      width: 56,\n      height: 56,\n      child: Center(\n        child: Material(\n          shape: const CircleBorder(),\n          clipBehavior: Clip.antiAlias,\n          elevation: 4,\n          child: InkWell(\n            onTap: _toggle,\n            child: Padding(\n              padding: const EdgeInsets.all(8),\n              child: Icon(Icons.close, color: Theme.of(context).primaryColor),\n            ),\n          ),\n        ),\n      ),\n    );\n  }\n\n  List<Widget> _buildExpandingActionButtons() {\n    final children = <Widget>[];\n    final count = widget.children.length;\n    final step = 90.0 / (count - 1);\n    for (\n      var i = 0, angleInDegrees = 0.0;\n      i < count;\n      i++, angleInDegrees += step\n    ) {\n      children.add(\n        _ExpandingActionButton(\n          directionInDegrees: angleInDegrees,\n          maxDistance: widget.distance,\n          progress: _expandAnimation,\n          child: widget.children[i],\n        ),\n      );\n    }\n    return children;\n  }\n\n  Widget _buildTapToOpenFab() {\n    return IgnorePointer(\n      ignoring: _open,\n      child: AnimatedContainer(\n        transformAlignment: Alignment.center,\n        transform: Matrix4.diagonal3Values(\n          _open ? 0.7 : 1.0,\n          _open ? 0.7 : 1.0,\n          1.0,\n        ),\n        duration: const Duration(milliseconds: 250),\n        curve: const Interval(0.0, 0.5, curve: Curves.easeOut),\n        child: AnimatedOpacity(\n          opacity: _open ? 0.0 : 1.0,\n          curve: const Interval(0.25, 1.0, curve: Curves.easeInOut),\n          duration: const Duration(milliseconds: 250),\n          child: FloatingActionButton(\n            onPressed: _toggle,\n            child: const Icon(Icons.create),\n          ),\n        ),\n      ),\n    );\n  }\n}\n\n@immutable\nclass _ExpandingActionButton extends StatelessWidget {\n  const _ExpandingActionButton({\n    required this.directionInDegrees,\n    required this.maxDistance,\n    required this.progress,\n    required this.child,\n  });\n\n  final double directionInDegrees;\n  final double maxDistance;\n  final Animation<double> progress;\n  final Widget child;\n\n  @override\n  Widget build(BuildContext context) {\n    return AnimatedBuilder(\n      animation: progress,\n      builder: (context, child) {\n        final offset = Offset.fromDirection(\n          directionInDegrees * (math.pi / 180.0),\n          progress.value * maxDistance,\n        );\n        return Positioned(\n          right: 4.0 + offset.dx,\n          bottom: 4.0 + offset.dy,\n          child: Transform.rotate(\n            angle: (1.0 - progress.value) * math.pi / 2,\n            child: child!,\n          ),\n        );\n      },\n      child: FadeTransition(opacity: progress, child: child),\n    );\n  }\n}\n\n@immutable\nclass ActionButton extends StatelessWidget {\n  const ActionButton({super.key, this.onPressed, required this.icon});\n\n  final VoidCallback? onPressed;\n  final Widget icon;\n\n  @override\n  Widget build(BuildContext context) {\n    final theme = Theme.of(context);\n    return Material(\n      shape: const CircleBorder(),\n      clipBehavior: Clip.antiAlias,\n      color: theme.colorScheme.secondary,\n      elevation: 4,\n      child: IconButton(\n        onPressed: onPressed,\n        icon: icon,\n        color: theme.colorScheme.onSecondary,\n      ),\n    );\n  }\n}\n\n@immutable\nclass FakeItem extends StatelessWidget {\n  const FakeItem({super.key, required this.isBig});\n\n  final bool isBig;\n\n  @override\n  Widget build(BuildContext context) {\n    return Container(\n      margin: const EdgeInsets.symmetric(vertical: 8, horizontal: 24),\n      height: isBig ? 128 : 36,\n      decoration: BoxDecoration(\n        borderRadius: const BorderRadius.all(Radius.circular(8)),\n        color: Colors.grey.shade300,\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: User class definition with freezed in Dart\nDESCRIPTION: This code shows the `User` class definition using `package:freezed` to enforce immutability. It demonstrates how to define a data class with required fields and a factory constructor for creating instances from JSON. `freezed` generates the implementation for useful methods like `copyWith` and `toJson`.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/app-architecture/case-study/ui-layer.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\n@freezed\nclass User with _$User {\n  const factory User({\n    /// The user's name.\n    required String name,\n\n    /// The user's picture URL.\n    required String picture,\n  }) = _User;\n\n  factory User.fromJson(Map<String, Object?> json) => _$UserFromJson(json);\n}\n```\n\n----------------------------------------\n\nTITLE: Update Data with HTTP PUT Request in Dart\nDESCRIPTION: This function, `updateAlbum`, sends a PUT request to update the title of an album on a server. It takes the new title as input and returns a `Future` containing the `http.Response`.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/networking/update-data.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nFuture<http.Response> updateAlbum(String title) {\n  return http.put(\n    Uri.parse('https://jsonplaceholder.typicode.com/albums/1'),\n    headers: <String, String>{\n      'Content-Type': 'application/json; charset=UTF-8',\n    },\n    body: jsonEncode(<String, String>{'title': title}),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Autofocus for a TextField in Flutter\nDESCRIPTION: This code shows how to automatically focus a TextField when it becomes visible using the `autofocus` property. This is useful for forms where you want the user to immediately start typing.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/forms/focus.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nTextField(\n  autofocus: true,\n);\n```\n\n----------------------------------------\n\nTITLE: Opening/Creating SQLite Database in Dart\nDESCRIPTION: This snippet shows the `open()` method in the `DatabaseService`, responsible for opening an existing SQLite database or creating a new one if it doesn't exist. It uses the `sqflite` package to interact with the database and sets up the database schema using `onCreate`.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/app-architecture/design-patterns/sql.md#_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> open() async {\n  _database = await databaseFactory.openDatabase(\n    join(await databaseFactory.getDatabasesPath(), 'app_database.db'),\n    options: OpenDatabaseOptions(\n      onCreate: (db, version) {\n        return db.execute(\n          'CREATE TABLE $_kTableTodo($_kColumnId INTEGER PRIMARY KEY AUTOINCREMENT, $_kColumnTask TEXT)',\n        );\n      },\n      version: 1,\n    ),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Flutter TabBar Interactive Example\nDESCRIPTION: This snippet provides a complete interactive example of using TabBar, TabBarView and DefaultTabController to implement a tabbed layout in Flutter.  It includes MaterialApp, Scaffold, AppBar, TabBar and TabBarView widgets.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/design/tabs.md#_snippet_3\n\nLANGUAGE: Dart\nCODE:\n```\nimport 'package:flutter/material.dart';\n\nvoid main() {\n  runApp(const TabBarDemo());\n}\n\nclass TabBarDemo extends StatelessWidget {\n  const TabBarDemo({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      home: DefaultTabController(\n        length: 3,\n        child: Scaffold(\n          appBar: AppBar(\n            bottom: const TabBar(\n              tabs: [\n                Tab(icon: Icon(Icons.directions_car)),\n                Tab(icon: Icon(Icons.directions_transit)),\n                Tab(icon: Icon(Icons.directions_bike)),\n              ],\n            ),\n            title: const Text('Tabs Demo'),\n          ),\n          body: const TabBarView(\n            children: [\n              Icon(Icons.directions_car),\n              Icon(Icons.directions_transit),\n              Icon(Icons.directions_bike),\n            ],\n          ),\n        ),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Data with HTTP DELETE Request in Dart\nDESCRIPTION: This snippet shows how to delete data from a server using the `http.delete()` method. It constructs the URI, sets the headers (Content-Type), and handles the response asynchronously. It takes an `id` as input to specify which resource to delete.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/networking/delete-data.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nFuture<http.Response> deleteAlbum(String id) async {\n  final http.Response response = await http.delete(\n    Uri.parse('https://jsonplaceholder.typicode.com/albums/$id'),\n    headers: <String, String>{\n      'Content-Type': 'application/json; charset=UTF-8',\n    },\n  );\n\n  return response;\n}\n```\n\n----------------------------------------\n\nTITLE: Building Theme Switch Widget - Flutter\nDESCRIPTION: Defines a StatelessWidget named ThemeSwitch, which contains a Switch widget. It utilizes a ThemeSwitchViewModel to manage the state of the switch (isDarkMode). The switch's onChanged event triggers the toggle command in the view model, updating the theme preference.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/app-architecture/design-patterns/key-value-data.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nclass ThemeSwitch extends StatelessWidget {\n  const ThemeSwitch({super.key, required this.viewmodel});\n\n  final ThemeSwitchViewModel viewmodel;\n\n  @override\n  Widget build(BuildContext context) {\n    return Padding(\n      padding: const EdgeInsets.symmetric(horizontal: 16.0),\n      child: Row(\n        children: [\n          const Text('Dark Mode'),\n          ListenableBuilder(\n            listenable: viewmodel,\n            builder: (context, _) {\n              return Switch(\n                value: viewmodel.isDarkMode,\n                onChanged: (_) {\n                  viewmodel.toggle.execute();\n                },\n              );\n            },\n          ),\n        ],\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Number Formatting Definition\nDESCRIPTION: This JSON snippet shows how to define a number format for an integer placeholder using `compactCurrency`. It also includes optional parameters to customize the formatting, such as `decimalDigits`. The `type` specifies the data type of the placeholder, in this case `int`.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/accessibility-and-internationalization/internationalization.md#_snippet_23\n\nLANGUAGE: json\nCODE:\n```\n\"numberOfDataPoints\": \"Number of data points: {value}\",\n\"@numberOfDataPoints\": {\n  \"description\": \"A message with a formatted int parameter\",\n  \"placeholders\": {\n    \"value\": {\n      \"type\": \"int\",\n      \"format\": \"compactCurrency\",\n      \"optionalParameters\": {\n        \"decimalDigits\": 2\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initialize MethodChannel in MainActivity (Java)\nDESCRIPTION: This Java code initializes a MethodChannel in the `MainActivity` to handle calls from the Flutter side. It sets a method call handler that currently has a placeholder comment. The channel name is defined as `samples.flutter.dev/battery`.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/platform-integration/platform-channels.md#_snippet_8\n\nLANGUAGE: Java\nCODE:\n```\nimport androidx.annotation.NonNull;\nimport io.flutter.embedding.android.FlutterActivity;\nimport io.flutter.embedding.engine.FlutterEngine;\nimport io.flutter.plugin.common.MethodChannel;\n\npublic class MainActivity extends FlutterActivity {\n  private static final String CHANNEL = \"samples.flutter.dev/battery\";\n\n  @Override\n  public void configureFlutterEngine(@NonNull FlutterEngine flutterEngine) {\n    super.configureFlutterEngine(flutterEngine);\n    new MethodChannel(flutterEngine.getDartExecutor().getBinaryMessenger(), CHANNEL)\n        .setMethodCallHandler(\n          (call, result) -> {\n            // This method is invoked on the main thread.\n            // TODO\n          }\n        );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Delete Booking via API Client (Dart)\nDESCRIPTION: This code shows the `delete` method in the `BookingRepositoryRemote`. It calls the `deleteBooking` method of the injected `ApiClient` to perform the deletion on the server. It wraps the API call in a try-catch block for error handling and returns a `Result` indicating the success or failure of the operation.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/app-architecture/case-study/data-layer.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nFuture<Result<void>> delete(int id) async {\n  try {\n    return _apiClient.deleteBooking(id);\n  } on Exception catch (e) {\n    return Result.error(e);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Serialize User Object to JSON\nDESCRIPTION: Shows how to serialize a `User` object back into a JSON string using `jsonEncode` from `dart:convert`.  The `jsonEncode` function automatically calls the `toJson` method of the `User` object. This approach simplifies the serialization process for the calling code.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/data-and-backend/serialization/json.md#_snippet_4\n\nLANGUAGE: Dart\nCODE:\n```\nString json = jsonEncode(user);\n```\n\n----------------------------------------\n\nTITLE: PanGestureRecognizer with Listener after Migration (Dart)\nDESCRIPTION: This snippet shows the code *after* migration, demonstrating the updated usage of `PanGestureRecognizer` with `Listener` to properly handle `PointerPanZoomStart` events. It includes the `onPointerPanZoomStart` callback in the `Listener`, which calls `recognizer.addPointerPanZoom` to enable the application to correctly recognize and respond to trackpad gestures. This ensures that trackpad gestures trigger the recognizer's callbacks.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/trackpad-gestures.md#_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() => runApp(Foo());\n\nclass Foo extends StatefulWidget {\n  late final PanGestureRecognizer recognizer;\n\n  @override\n  void initState() {\n    super.initState();\n    recognizer = PanGestureRecognizer()\n    ..onStart = _onPanStart\n    ..onUpdate = _onPanUpdate\n    ..onEnd = _onPanEnd;\n  }\n\n  void _onPanStart(DragStartDetails details) {\n    debugPrint('onStart');\n  }\n\n  void _onPanUpdate(DragUpdateDetails details) {\n    debugPrint('onUpdate');\n  }\n\n  void _onPanEnd(DragEndDetails details) {\n    debugPrint('onEnd');\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Listener(\n      onPointerDown: recognizer.addPointer,\n      onPointerPanZoomStart: recognizer.addPointerPanZoom,\n      child: Container()\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Wrap Content with Shimmer Widget in Flutter\nDESCRIPTION: Wraps the screen's content with the `Shimmer` widget, providing the `linearGradient` and the child content, typically a ListView. This allows the Shimmer effect to be applied to the entire screen or a specific section.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/effects/shimmer-loading.md#_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nclass _ExampleUiLoadingAnimationState extends State<ExampleUiLoadingAnimation> {\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: Shimmer(\n        linearGradient: _shimmerGradient,\n        child: ListView(\n          // ListView Contents\n        ),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Build method for Hybrid Composition - Dart\nDESCRIPTION: This code snippet demonstrates the `build` method implementation for the Hybrid Composition approach.  It uses `PlatformViewLink` and `AndroidViewSurface` widgets to embed the native Android view.  The `viewType` is a unique identifier for the native view, and `creationParams` allows passing data to the native view. A Surface is initialized with the given parameters.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/platform-integration/android/platform-views.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nWidget build(BuildContext context) {\n  // This is used in the platform side to register the view.\n  const String viewType = '<platform-view-type>';\n  // Pass parameters to the platform side.\n  const Map<String, dynamic> creationParams = <String, dynamic>{};\n\n  return PlatformViewLink(\n    viewType: viewType,\n    surfaceFactory: (context, controller) {\n      return AndroidViewSurface(\n        controller: controller as AndroidViewController,\n        gestureRecognizers: const <Factory<OneSequenceGestureRecognizer>>{},\n        hitTestBehavior: PlatformViewHitTestBehavior.opaque,\n      );\n    },\n    onCreatePlatformView: (params) {\n      return PlatformViewsService.initSurfaceAndroidView(\n          id: params.id,\n          viewType: viewType,\n          layoutDirection: TextDirection.ltr,\n          creationParams: creationParams,\n          creationParamsCodec: const StandardMessageCodec(),\n          onFocus: () {\n            params.onFocusChanged(true);\n          },\n        )\n        ..addOnPlatformViewCreatedListener(params.onPlatformViewCreated)\n        ..create();\n    },\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring GeminiProvider with GenerativeModel in Dart\nDESCRIPTION: This example demonstrates how to allow users to fully configure the underlying model by passing it as a parameter to the custom provider.  This ensures that future changes to the underlying model's configuration options remain accessible to the user. The `GenerativeModel` is passed as a required parameter to the `GeminiProvider` constructor.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ai-toolkit/custom-llm-providers.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nclass GeminiProvider extends LlmProvider ... {\n  @immutable\n  GeminiProvider({\n    required GenerativeModel model,\n    ...\n  })  : _model = model,\n        ...\n\n  final GenerativeModel _model;\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Key Combinations with HardwareKeyboard Listener\nDESCRIPTION: This snippet demonstrates how to handle specific key combinations using the global `HardwareKeyboard` listener. It checks if the Shift key and the 'N' key are pressed simultaneously, and if so, it invokes the `_createNewItem()` method and returns `true` to indicate that the event was handled.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/adaptive-responsive/input.md#_snippet_7\n\nLANGUAGE: Dart\nCODE:\n```\nbool _handleKey(KeyEvent event) {\n  bool isShiftDown = isKeyDown({\n    LogicalKeyboardKey.shiftLeft,\n    LogicalKeyboardKey.shiftRight,\n  });\n\n  if (isShiftDown && event.logicalKey == LogicalKeyboardKey.keyN) {\n    _createNewItem();\n    return true;\n  }\n\n  return false;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding TextFormField with Validator Flutter\nDESCRIPTION: This snippet shows how to add a TextFormField with a validator function to a Flutter form. The validator function checks if the input is empty and returns an error message if it is, otherwise it returns null. This ensures that the form field is not empty before submission.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/forms/validation.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nTextFormField(\n  // The validator receives the text that the user has entered.\n  validator: (value) {\n    if (value == null || value.isEmpty) {\n      return 'Please enter some text';\n    }\n    return null;\n  },\n),\n```\n\n----------------------------------------\n\nTITLE: Get Battery Level Method (Java)\nDESCRIPTION: This Java code defines a function `getBatteryLevel()` that retrieves the battery level of the Android device. It uses `BatteryManager` for Android versions Lollipop and above, and `IntentFilter` for older versions. The function returns the battery level as an integer.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/platform-integration/platform-channels.md#_snippet_10\n\nLANGUAGE: Java\nCODE:\n```\n  private int getBatteryLevel() {\n    int batteryLevel = -1;\n    if (VERSION.SDK_INT >= VERSION_CODES.LOLLIPOP) {\n      BatteryManager batteryManager = (BatteryManager) getSystemService(BATTERY_SERVICE);\n      batteryLevel = batteryManager.getIntProperty(BatteryManager.BATTERY_PROPERTY_CAPACITY);\n    } else {\n      Intent intent = new ContextWrapper(getApplicationContext()).\n          registerReceiver(null, new IntentFilter(Intent.ACTION_BATTERY_CHANGED));\n      batteryLevel = (intent.getIntExtra(BatteryManager.EXTRA_LEVEL, -1) * 100) /\n          intent.getIntExtra(BatteryManager.EXTRA_SCALE, -1);\n    }\n\n    return batteryLevel;\n  }\n```\n\n----------------------------------------\n\nTITLE: Running Tasks in the Background with Isolates in Flutter\nDESCRIPTION: This snippet shows how to run computationally intensive tasks in the background using Isolates in Flutter to avoid blocking the main thread. It spawns a new Isolate, sends messages to it using SendPort and ReceivePort, and updates the UI with the result. The isolate performs a network request and JSON parsing.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/xamarin-forms-devs.md#_snippet_24\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> loadData() async {\n  final ReceivePort receivePort = ReceivePort();\n  await Isolate.spawn(dataLoader, receivePort.sendPort);\n\n  // The 'echo' isolate sends its SendPort as the first message\n  final SendPort sendPort = await receivePort.first as SendPort;\n  final List<Map<String, dynamic>> msg = await sendReceive(\n    sendPort,\n    'https://jsonplaceholder.typicode.com/posts',\n  );\n  setState(() {\n    data = msg;\n  });\n}\n\n// The entry point for the isolate\nstatic Future<void> dataLoader(SendPort sendPort) async {\n  // Open the ReceivePort for incoming messages.\n  final ReceivePort port = ReceivePort();\n\n  // Notify any other isolates what port this isolate listens to.\n  sendPort.send(port.sendPort);\n  await for (final dynamic msg in port) {\n    final String url = msg[0] as String;\n    final SendPort replyTo = msg[1] as SendPort;\n\n    final Uri dataURL = Uri.parse(url);\n    final http.Response response = await http.get(dataURL);\n    // Lots of JSON to parse\n    replyTo.send(jsonDecode(response.body) as List<Map<String, dynamic>>);\n  }\n}\n\nFuture<List<Map<String, dynamic>>> sendReceive(SendPort port, String msg) {\n  final ReceivePort response = ReceivePort();\n  port.send(<dynamic>[msg, response.sendPort]);\n  return response.first as Future<List<Map<String, dynamic>>>;\n}\n```\n\n----------------------------------------\n\nTITLE: Building AnimatedContainer with Properties in Flutter\nDESCRIPTION: This snippet constructs an AnimatedContainer widget using the properties defined in the _AnimatedContainerAppState.  It sets the width, height, decoration (including color and borderRadius), duration, and curve for the animation. The duration specifies how long the animation takes, and the curve determines the animation's feel.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/animation/animated-container.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nAnimatedContainer(\n  // Use the properties stored in the State class.\n  width: _width,\n  height: _height,\n  decoration: BoxDecoration(\n    color: _color,\n    borderRadius: _borderRadius,\n  ),\n  // Define how long the animation should take.\n  duration: const Duration(seconds: 1),\n  // Provide an optional curve to make the animation feel smoother.\n  curve: Curves.fastOutSlowIn,\n)\n```\n\n----------------------------------------\n\nTITLE: Building the Selection Screen in Flutter\nDESCRIPTION: This code defines the `SelectionScreen` widget, which contains two buttons: 'Yep!' and 'Nope.'.  Each button's `onPressed` callback is currently empty and needs to be updated to return data when tapped.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/navigation/returning-data.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nclass SelectionScreen extends StatelessWidget {\n  const SelectionScreen({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: const Text('Pick an option')),\n      body: Center(\n        child: Column(\n          mainAxisAlignment: MainAxisAlignment.center,\n          children: [\n            Padding(\n              padding: const EdgeInsets.all(8),\n              child: ElevatedButton(\n                onPressed: () {\n                  // Pop here with \"Yep\"...\n                },\n                child: const Text('Yep!'),\n              ),\n            ),\n            Padding(\n              padding: const EdgeInsets.all(8),\n              child: ElevatedButton(\n                onPressed: () {\n                  // Pop here with \"Nope\"...\n                },\n                child: const Text('Nope.'),\n              ),\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Managing State with StatefulWidget in Flutter (Dart)\nDESCRIPTION: Illustrates managing local state in Flutter using a StatefulWidget. The MyHomePage widget extends StatefulWidget, and its associated _MyHomePageState class holds the state (_counter). setState() is called to update the state and trigger a UI rebuild.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/compose-devs.md#_snippet_15\n\nLANGUAGE: dart\nCODE:\n```\nclass MyHomePage extends StatefulWidget {\n  const MyHomePage({super.key});\n  @override\n  State<MyHomePage> createState() => _MyHomePageState();\n}\n\nclass _MyHomePageState extends State<MyHomePage> {\n  int _counter = 0;\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: Center(\n        child: Column(\n          mainAxisAlignment: MainAxisAlignment.center,\n          children: [\n            Text('$_counter'),\n            TextButton(\n              onPressed: () => setState(() {\n                _counter++;\n              }),\n              child: const Text('+'),\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a List with ListView.builder in Flutter (Dart)\nDESCRIPTION: Shows how to create a dynamically built list in Flutter using ListView.builder.  itemCount sets the number of items, and itemBuilder defines how each item is constructed. The example uses ListTile to display each item with its name.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/compose-devs.md#_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nclass Person {\n  String name;\n  Person(this.name);\n}\n\nvar items = [\n  Person('Person 1'),\n  Person('Person 2'),\n  Person('Person 3'),\n];\n\nclass HomePage extends StatelessWidget {\n  const HomePage({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: ListView.builder(\n        itemCount: items.length,\n        itemBuilder: (context, index) {\n          return ListTile(\n            title: Text(items[index].name),\n          );\n        },\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Create and initialize VideoPlayerController in Flutter\nDESCRIPTION: This Dart code snippet demonstrates how to create and initialize a VideoPlayerController within a StatefulWidget. It initializes the controller with a network video URL, stores the initialization Future, and disposes of the controller in the dispose method to free up resources.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/plugins/play-video.md#_snippet_3\n\nLANGUAGE: Dart\nCODE:\n```\nclass VideoPlayerScreen extends StatefulWidget {\n  const VideoPlayerScreen({super.key});\n\n  @override\n  State<VideoPlayerScreen> createState() => _VideoPlayerScreenState();\n}\n\nclass _VideoPlayerScreenState extends State<VideoPlayerScreen> {\n  late VideoPlayerController _controller;\n  late Future<void> _initializeVideoPlayerFuture;\n\n  @override\n  void initState() {\n    super.initState();\n\n    // Create and store the VideoPlayerController. The VideoPlayerController\n    // offers several different constructors to play videos from assets, files,\n    // or the internet.\n    _controller = VideoPlayerController.networkUrl(\n      Uri.parse(\n        'https://flutter.github.io/assets-for-api-docs/assets/videos/butterfly.mp4',\n      ),\n    );\n\n    _initializeVideoPlayerFuture = _controller.initialize();\n  }\n\n  @override\n  void dispose() {\n    // Ensure disposing of the VideoPlayerController to free up resources.\n    _controller.dispose();\n\n    super.dispose();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    // Complete the code in the next step.\n    return Container();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating Button with custom disabled colors using styleFrom in Dart\nDESCRIPTION: This code snippet demonstrates a simplified migration for disabled colors by overriding the `disabledForegroundColor` using `styleFrom`. This is suitable when you only need to change the foreground color of the disabled button.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/buttons.md#_snippet_13\n\nLANGUAGE: dart\nCODE:\n```\nRaisedButton(\n  disabledColor: Colors.red.withOpacity(0.12),\n  disabledTextColor: Colors.red.withOpacity(0.38),\n  onPressed: null,\n  child: Text('RaisedButton with custom disabled colors'),\n),\n\nElevatedButton(\n  style: ElevatedButton.styleFrom(disabledForegroundColor: Colors.red),\n  onPressed: null,\n  child: Text('ElevatedButton with custom disabled colors'),\n)\n```\n\n----------------------------------------\n\nTITLE: GetUserProfile with Stream in Dart\nDESCRIPTION: Retrieves a UserProfile using a Stream, first emitting data from the local database and then attempting to fetch and emit data from the API.  It updates the database with the API data upon successful retrieval.  This allows for near-instant data display from the cache, followed by updated data from the network, when available.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/app-architecture/design-patterns/offline-first.md#_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nStream<UserProfile> getUserProfile() async* {\n  // Fetch the user profile from the database\n  final userProfile = await _databaseService.fetchUserProfile();\n  // Returns the database result if it exists\n  if (userProfile != null) {\n    yield userProfile;\n  }\n\n  // Fetch the user profile from the API\n  try {\n    final apiUserProfile = await _apiClientService.getUserProfile();\n    //Update the database with the API result\n    await _databaseService.updateUserProfile(apiUserProfile);\n    // Return the API result\n    yield apiUserProfile;\n  } catch (e) {\n    // Handle the error\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Navigation Example (Android)\nDESCRIPTION: This is a complete example of navigation in Flutter, demonstrating how to define two routes (`FirstRoute` and `SecondRoute`) and navigate between them using `Navigator.push()` with `MaterialPageRoute` and `Navigator.pop()`. The `main()` function initializes the app with `FirstRoute` as the home route.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/navigation/navigation-basics.md#_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\n\nvoid main() {\n  runApp(const MaterialApp(title: 'Navigation Basics', home: FirstRoute()));\n}\n\nclass FirstRoute extends StatelessWidget {\n  const FirstRoute({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: const Text('First Route')),\n      body: Center(\n        child: ElevatedButton(\n          child: const Text('Open route'),\n          onPressed: () {\n            Navigator.push(\n              context,\n              MaterialPageRoute(builder: (context) => const SecondRoute()),\n            );\n          },\n        ),\n      ),\n    );\n  }\n}\n\nclass SecondRoute extends StatelessWidget {\n  const SecondRoute({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: const Text('Second Route')),\n      body: Center(\n        child: ElevatedButton(\n          onPressed: () {\n            Navigator.pop(context);\n          },\n          child: const Text('Go back!'),\n        ),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Symbolize Obfuscated Stack Trace\nDESCRIPTION: This command takes an obfuscated stack trace and a corresponding symbols file, then outputs a human-readable stack trace. The `-i` flag specifies the path to the stack trace file, and the `-d` flag specifies the path to the symbols file. This process is essential for debugging crashes and errors in obfuscated applications.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/deployment/obfuscate.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ flutter symbolize \\\n   -i <stack-trace-file> \\\n   -d <obfuscated-symbols-file>\n```\n\n----------------------------------------\n\nTITLE: Creating a LoggingActionDispatcher in Dart\nDESCRIPTION: This code snippet demonstrates how to create a custom `ActionDispatcher` for logging actions. It defines a `LoggingActionDispatcher` that extends the `ActionDispatcher` class and overrides the `invokeAction` and `invokeActionIfEnabled` methods to print a log message before invoking the action using the superclass's implementation. It allows intercepting every invoked action.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/interactivity/actions-and-shortcuts.md#_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nclass LoggingActionDispatcher extends ActionDispatcher {\n  @override\n  Object? invokeAction(\n    covariant Action<Intent> action,\n    covariant Intent intent, [\n    BuildContext? context,\n  ]) {\n    print('Action invoked: $action($intent) from $context');\n    super.invokeAction(action, intent, context);\n\n    return null;\n  }\n\n  @override\n  (bool, Object?) invokeActionIfEnabled(\n    covariant Action<Intent> action,\n    covariant Intent intent, [\n    BuildContext? context,\n  ]) {\n    print('Action invoked: $action($intent) from $context');\n    return super.invokeActionIfEnabled(action, intent, context);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: FittedBox with Large Text in Flutter\nDESCRIPTION: This example shows FittedBox inside of a Center, containing large Text that exceeds screen width.  FittedBox resizes Text so that it fits within the available screen space.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/layout/constraints.md#_snippet_50\n\nLANGUAGE: dart\nCODE:\n```\nconst Center(\n  child: FittedBox(\n    child: Text(\n      'This is some very very very large text that is too big to fit a regular screen in a single line.',\n    ),\n  ),\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Named Routes in MaterialApp - Flutter\nDESCRIPTION: This code snippet shows how to define named routes within the MaterialApp constructor. It sets the initialRoute to '/' and defines routes for '/' (FirstScreen) and '/second' (SecondScreen).  Using named routes facilitates navigation to specific screens by name rather than creating new routes each time.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/navigation/named-routes.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nMaterialApp(\n  title: 'Named Routes Demo',\n  // Start the app with the \"/\" named route. In this case, the app starts\n  // on the FirstScreen widget.\n  initialRoute: '/',\n  routes: {\n    // When navigating to the \"/\" route, build the FirstScreen widget.\n    '/': (context) => const FirstScreen(),\n    // When navigating to the \"/second\" route, build the SecondScreen widget.\n    '/second': (context) => const SecondScreen(),\n  },\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Floating AppBar with Material widgets in Flutter\nDESCRIPTION: This code snippet demonstrates how to implement a floating app bar using Material widgets in Flutter. It uses `SliverAppBar` within a `CustomScrollView` to create a scrollable view with a floating app bar. The `pinned` property is set to true to ensure the app bar remains visible while scrolling.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/lists/floating-app-bar.md#_snippet_6\n\nLANGUAGE: Dart\nCODE:\n```\nimport 'package:flutter/material.dart';\n\nvoid main() => runApp(const MyApp());\n\nclass MyApp extends StatelessWidget {\n  const MyApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    const title = 'Floating App Bar';\n\n    return MaterialApp(\n      title: title,\n      home: Scaffold(\n        // No app bar provided to Scaffold, only a body with a\n        // CustomScrollView.\n        body: CustomScrollView(\n          slivers: [\n            // Add the app bar to the CustomScrollView.\n            const SliverAppBar(\n              // Provide a standard title.\n              title: Text(title),\n              // Pin the app bar when scrolling\n              pinned: true,\n              // Display a placeholder widget to visualize the shrinking size.\n              flexibleSpace: Placeholder(),\n              // Make the initial height of the SliverAppBar larger than normal.\n              expandedHeight: 200,\n            ),\n            // Next, create a SliverList\n            SliverList.builder(\n              // The builder function returns a ListTile with a title that\n              // displays the index of the current item.\n              itemBuilder:\n                  (context, index) => ListTile(title: Text('Item #$index')),\n              // Builds 50 ListTiles\n              itemCount: 50,\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Flutter Long List Example\nDESCRIPTION: This is a complete Flutter application demonstrating the use of ListView.builder to create a long, scrollable list. It includes the necessary imports, the main function to run the app, a MyApp StatelessWidget, and a ListView.builder to display the generated list of items. It shows how to integrate data generation and list rendering into a functional Flutter application.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/lists/long-lists.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\n\nvoid main() {\n  runApp(\n    MyApp(\n      items: List<String>.generate(10000, (i) => 'Item $i'),\n    ),\n  );\n}\n\nclass MyApp extends StatelessWidget {\n  final List<String> items;\n\n  const MyApp({super.key, required this.items});\n\n  @override\n  Widget build(BuildContext context) {\n    const title = 'Long List';\n\n    return MaterialApp(\n      title: title,\n      home: Scaffold(\n        appBar: AppBar(title: const Text(title)),\n        body: ListView.builder(\n          itemCount: items.length,\n          prototypeItem: ListTile(title: Text(items.first)),\n          itemBuilder: (context, index) {\n            return ListTile(title: Text(items[index]));\n          },\n        ),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sizing Widgets with Expanded\nDESCRIPTION: This snippet shows how to use the `Expanded` widget to size widgets within a `Row` so that they fit within the available space. Each image is wrapped in an `Expanded` widget.  This prevents overflow when the row's content is wider than the available space.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/layout/index.md#_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nRow(\n  crossAxisAlignment: CrossAxisAlignment.center,\n  children: [\n    Expanded(child: Image.asset('images/pic1.jpg')),\n    Expanded(child: Image.asset('images/pic2.jpg')),\n    Expanded(child: Image.asset('images/pic3.jpg')),\n  ],\n);\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Programming with Futures: Dart\nDESCRIPTION: This snippet illustrates asynchronous programming using Futures in Dart, analogous to Promises in JavaScript. It shows how to fetch data from an API and handle the response.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/react-native-devs.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\n// JavaScript\nclass Example {\n  _getIPAddress() {\n    const url = 'https://httpbin.org/ip';\n    return fetch(url)\n      .then(response => response.json())\n      .then(responseJson => {\n        const ip = responseJson.origin;\n        return ip;\n      });\n  }\n}\n\nfunction main() {\n  const example = new Example();\n  example\n    ._getIPAddress()\n    .then(ip => console.log(ip))\n    .catch(error => console.error(error));\n}\n\nmain();\n```\n\nLANGUAGE: Dart\nCODE:\n```\n// Dart\nimport 'dart:convert';\n\nimport 'package:http/http.dart' as http;\n\nclass Example {\n  Future<String> _getIPAddress() {\n    final url = Uri.https('https://httpbin.org', '/ip');\n    return http.get(url).then((response) {\n      final ip = jsonDecode(response.body)['origin'] as String;\n      return ip;\n    });\n  }\n}\n\nvoid main() {\n  final example = Example();\n  example\n      ._getIPAddress()\n      .then((ip) => print(ip))\n      .catchError((error) => print(error));\n}\n```\n\n----------------------------------------\n\nTITLE: Sizing Widgets with Expanded and Flex\nDESCRIPTION: This snippet demonstrates using the `Expanded` widget with the `flex` property to control how widgets share space within a `Row`. The middle image has a `flex` factor of 2, meaning it will occupy twice as much space as the other images.  The other images implicitly have a flex of 1.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/layout/index.md#_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nRow(\n  crossAxisAlignment: CrossAxisAlignment.center,\n  children: [\n    Expanded(child: Image.asset('images/pic1.jpg')),\n    Expanded(flex: 2, child: Image.asset('images/pic2.jpg')),\n    Expanded(child: Image.asset('images/pic3.jpg')),\n  ],\n);\n```\n\n----------------------------------------\n\nTITLE: Centering Content with Center Widget - Dart\nDESCRIPTION: Demonstrates how to use the `Center` widget in Flutter to center its child both horizontally and vertically. The `Center` widget takes a single `child` property, which can be any visible widget.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/layout/index.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nCenter(\n  // Content to be centered here.\n)\n```\n\n----------------------------------------\n\nTITLE: Migrating TextTheme properties in Flutter (Dart)\nDESCRIPTION: This snippet demonstrates how to migrate from deprecated TextTheme properties (headline1, headline2, etc.) to the new Material Design specification properties (displayLarge, displayMedium, etc.) in Flutter. It includes examples for the TextTheme constructor, copyWith method, and getters.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/3-19-deprecations.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n// TextTheme\n// Base constructor\nTextTheme(\n  headline1: headline1Style,\n  headline2: headline2Style,\n  headline3: headline3Style,\n  headline4: headline4Style,\n  headline5: headline5Style,\n  headline6: headline6Style,\n  subtitle1: subtitle1Style,\n  subtitle2: subtitle2Style,\n  bodyText1: bodyText1Style,\n  bodyText2: bodyText2Style,\n  caption: captionStyle,\n  button: buttonStyle,\n  overline: overlineStyle,\n);\n\n// copyWith\nTextTheme.copyWith(\n  headline1: headline1Style,\n  headline2: headline2Style,\n  headline3: headline3Style,\n  headline4: headline4Style,\n  headline5: headline5Style,\n  headline6: headline6Style,\n  subtitle1: subtitle1Style,\n  subtitle2: subtitle2Style,\n  bodyText1: bodyText1Style,\n  bodyText2: bodyText2Style,\n  caption: captionStyle,\n  button: buttonStyle,\n  overline: overlineStyle,\n);\n\n// Getters\nTextStyle style;\nstyle = textTheme.headline1,\nstyle = textTheme.headline2,\nstyle = textTheme.headline3,\nstyle = textTheme.headline4,\nstyle = textTheme.headline5,\nstyle = textTheme.headline6,\nstyle = textTheme.subtitle1,\nstyle = textTheme.subtitle2,\nstyle = textTheme.bodyText1,\nstyle = textTheme.bodyText2,\nstyle = textTheme.caption,\nstyle = textTheme.button,\nstyle = textTheme.overline,\n```\n\n----------------------------------------\n\nTITLE: Flutter Data Passing with RouteSettings in Dart\nDESCRIPTION: This Flutter code demonstrates how to pass data (a Todo object) between screens using `RouteSettings`. It defines a `Todo` class, a `TodosScreen` displaying a list of Todos, and a `DetailScreen` displaying the details of a selected Todo. When a Todo item is tapped in the list, `Navigator.push` navigates to the `DetailScreen`, passing the selected Todo via `RouteSettings`.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/navigation/passing-data.md#_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\n\nclass Todo {\n  final String title;\n  final String description;\n\n  const Todo(this.title, this.description);\n}\n\nvoid main() {\n  runApp(\n    MaterialApp(\n      title: 'Passing Data',\n      home: TodosScreen(\n        todos: List.generate(\n          20,\n          (i) => Todo(\n            'Todo $i',\n            'A description of what needs to be done for Todo $i',\n          ),\n        ),\n      ),\n    ),\n  );\n}\n\nclass TodosScreen extends StatelessWidget {\n  const TodosScreen({super.key, required this.todos});\n\n  final List<Todo> todos;\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: const Text('Todos')),\n      body: ListView.builder(\n        itemCount: todos.length,\n        itemBuilder: (context, index) {\n          return ListTile(\n            title: Text(todos[index].title),\n            // When a user taps the ListTile, navigate to the DetailScreen.\n            // Notice that you're not only creating a DetailScreen, you're\n            // also passing the current todo through to it.\n            onTap: () {\n              Navigator.push(\n                context,\n                MaterialPageRoute(\n                  builder: (context) => const DetailScreen(),\n                  // Pass the arguments as part of the RouteSettings. The\n                  // DetailScreen reads the arguments from these settings.\n                  settings: RouteSettings(arguments: todos[index]),\n                ),\n              );\n            },\n          );\n        },\n      ),\n    );\n  }\n}\n\nclass DetailScreen extends StatelessWidget {\n  const DetailScreen({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    final todo = ModalRoute.of(context)!.settings.arguments as Todo;\n\n    // Use the Todo to create the UI.\n    return Scaffold(\n      appBar: AppBar(title: Text(todo.title)),\n      body: Padding(\n        padding: const EdgeInsets.all(16),\n        child: Text(todo.description),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Verify Widget using Matcher Dart\nDESCRIPTION: Verifies the title and message Text widgets appear on screen using the `findsOneWidget` Matcher constant provided by `flutter_test`. This ensures that the widgets appear exactly once in the widget tree.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/testing/widget/introduction.md#_snippet_5\n\nLANGUAGE: Dart\nCODE:\n```\nvoid main() {\n  testWidgets('MyWidget has a title and message', (tester) async {\n    await tester.pumpWidget(const MyWidget(title: 'T', message: 'M'));\n    final titleFinder = find.text('T');\n    final messageFinder = find.text('M');\n\n    // Use the `findsOneWidget` matcher provided by flutter_test to verify\n    // that the Text widgets appear exactly once in the widget tree.\n    expect(titleFinder, findsOneWidget);\n    expect(messageFinder, findsOneWidget);\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Album Class in Dart\nDESCRIPTION: This snippet defines the Album class with properties for id and title. It includes a factory constructor fromJson that parses the JSON response from the server and constructs an Album object. It uses Dart's pattern matching for more concise JSON parsing and exception handling if the JSON format is invalid. The json parameter is a Map<String, dynamic> representing the JSON data.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/networking/send-data.md#_snippet_9\n\nLANGUAGE: Dart\nCODE:\n```\nclass Album {\n  final int id;\n  final String title;\n\n  const Album({required this.id, required this.title});\n\n  factory Album.fromJson(Map<String, dynamic> json) {\n    return switch (json) {\n      {'id': int id, 'title': String title} => Album(id: id, title: title),\n      _ => throw const FormatException('Failed to load album.'),\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Removing data with SharedPreferences - Dart\nDESCRIPTION: This code snippet demonstrates how to remove a key-value pair from persistent storage using the `SharedPreferences` class. It retrieves an instance of `SharedPreferences`, then uses the `remove` method to delete the key-value pair associated with the key 'counter'.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/persistence/key-value.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nfinal prefs = await SharedPreferences.getInstance();\n\n// Remove the counter key-value pair from persistent storage.\nawait prefs.remove('counter');\n```\n\n----------------------------------------\n\nTITLE: Using Plurals in Dart\nDESCRIPTION: This Dart snippet demonstrates how to call a pluralized message in `AppLocalizations`. It passes different numerical values to the `nWombats` method, which returns the appropriate pluralized string based on the provided count. It relies on the ARB file defining the correct plural forms.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/accessibility-and-internationalization/internationalization.md#_snippet_17\n\nLANGUAGE: dart\nCODE:\n```\n// Examples of internationalized strings.\nreturn Column(\n  children: <Widget>[\n    ...\n    // Returns 'no wombats'\n    Text(AppLocalizations.of(context)!.nWombats(0)),\n    // Returns '1 wombat'\n    Text(AppLocalizations.of(context)!.nWombats(1)),\n    // Returns '5 wombats'\n    Text(AppLocalizations.of(context)!.nWombats(5)),\n  ],\n);\n```\n\n----------------------------------------\n\nTITLE: Selectable Rich Text Widget - Flutter\nDESCRIPTION: This snippet demonstrates how to create selectable rich text in Flutter using the `SelectableText.rich` constructor and `TextSpan` widgets. It allows you to apply different styles to different parts of the text while still enabling text selection. In this example, the word 'Bold' is styled with a bold font weight.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/adaptive-responsive/idioms.md#_snippet_4\n\nLANGUAGE: Dart\nCODE:\n```\nreturn const SelectableText.rich(\n  TextSpan(\n    children: [\n      TextSpan(text: 'Hello'),\n      TextSpan(text: 'Bold', style: TextStyle(fontWeight: FontWeight.bold)),\n    ],\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: MaterialLocalizations Shorthand Getter Dart\nDESCRIPTION: This code shows the implementation of a static getter within the MaterialLocalizations class that provides a convenient shorthand for accessing the MaterialLocalizations instance. It avoids the need for verbose Localizations.of() calls.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/accessibility-and-internationalization/internationalization.md#_snippet_29\n\nLANGUAGE: Dart\nCODE:\n```\nstatic MaterialLocalizations of(BuildContext context) {\n  return Localizations.of<MaterialLocalizations>(context, MaterialLocalizations);\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Date Formatting Definition\nDESCRIPTION: This JSON defines a date parameter with a specified format. The `format` attribute dictates how the DateTime object should be represented as a String according to the `DateFormat` class. The `type` attribute is `DateTime`.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/accessibility-and-internationalization/internationalization.md#_snippet_24\n\nLANGUAGE: json\nCODE:\n```\n\"helloWorldOn\": \"Hello World on {date}\",\n\"@helloWorldOn\": {\n  \"description\": \"A message with a date parameter\",\n  \"placeholders\": {\n    \"date\": {\n      \"type\": \"DateTime\",\n      \"format\": \"yMd\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Positioning Buttons with Row Widget in Flutter\nDESCRIPTION: This snippet demonstrates how to position buttons within a `Row` widget in Flutter. It creates three instances of the `ButtonWithText` widget and arranges them evenly along the horizontal axis using `MainAxisAlignment.spaceEvenly`. The color, icon, and label are passed to each `ButtonWithText` instance.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/layout/tutorial.md#_snippet_6\n\nLANGUAGE: Dart\nCODE:\n```\nclass ButtonSection extends StatelessWidget {\n  const ButtonSection({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    final Color color = Theme.of(context).primaryColor;\n    return SizedBox(\n      child: Row(\n        mainAxisAlignment: MainAxisAlignment.spaceEvenly,\n        children: [\n          ButtonWithText(color: color, icon: Icons.call, label: 'CALL'),\n          ButtonWithText(color: color, icon: Icons.near_me, label: 'ROUTE'),\n          ButtonWithText(color: color, icon: Icons.share, label: 'SHARE'),\n        ],\n      ),\n    );\n  }\n\n}\n\nclass ButtonWithText extends StatelessWidget {\n  const ButtonWithText({\n    super.key,\n    required this.color,\n    required this.icon,\n    required this.label,\n  });\n\n  final Color color;\n  final IconData icon;\n  final String label;\n\n  @override\n  Widget build(BuildContext context) {\n    return Column(\n      // ···\n    );\n  }\n\n}\n\n```\n\n----------------------------------------\n\nTITLE: Testing Container Color (Before Migration) - Dart\nDESCRIPTION: This Dart code snippet demonstrates a widget test that asserts the color of a Container before the optimization. It expects the color to be found within a BoxDecoration.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/container-color.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\ntestWidgets('Container color', (WidgetTester tester) async {\n  await tester.pumpWidget(Container(color: Colors.red));\n\n  final Container container = tester.widgetList<Container>().first;\n  expect(container.decoration.color, Colors.red);\n  // Or, a test may have specifically looked for the BoxDecoration, e.g.:\n  expect(find.byType(BoxDecoration), findsOneWidget);\n});\n```\n\n----------------------------------------\n\nTITLE: Using Mutable Object in Zone for Data Transfer - Dart\nDESCRIPTION: Demonstrates how to use a mutable object within Zone values to pass data between zones, specifically when a plugin provides a value after WidgetsFlutterBinding.ensureInitialized() is called. It involves creating a mutable wrapper, placing it in zoneValues, initializing Flutter bindings, updating the value from the plugin, and then running the app. This approach ensures that all parts of the Flutter framework work in the same Zone and can be used if you are obtaining the data after `WidgetsFlutterBinding.ensureInitialized()` has been called.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/zone-errors.md#_snippet_0\n\nLANGUAGE: Dart\nCODE:\n```\nimport 'dart:async';\nimport 'package:flutter/material.dart';\n\nclass Mutable<T> {\n  Mutable(this.value);\n  T value;\n}\n\nvoid main() {\n  var myValue = Mutable<double>(0.0);\n  Zone.current.fork(\n    zoneValues: {\n      'myKey': myValue,\n    }\n  ).run(() {\n    WidgetsFlutterBinding.ensureInitialized();\n    var newValue = ...; // obtain value from plugin\n    myValue.value = newValue; // update value in Zone\n    runApp(...);\n  });\n}\n\n```\n\n----------------------------------------\n\nTITLE: Navigating and Passing Data in Flutter (push-await)\nDESCRIPTION: This Dart code demonstrates how to use the Navigator class to push a new route onto the stack and await a result from it. The pushNamed method is used to navigate to the specified route ('/location'), and the result (coordinates) is awaited.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/android-devs.md#_snippet_13\n\nLANGUAGE: dart\nCODE:\n```\nObject? coordinates = await Navigator.of(context).pushNamed('/location');\n```\n\n----------------------------------------\n\nTITLE: Enabling Accessibility Programmatically for Web in Flutter\nDESCRIPTION: This code snippet demonstrates how to programmatically enable accessibility in a Flutter web application.  It imports the necessary packages (material and semantics) and uses `SemanticsBinding.instance.ensureSemantics()` to ensure the semantics tree is built for screen readers. This allows users to skip manually enabling accessibility through a button.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/accessibility-and-internationalization/accessibility.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\nimport 'package:flutter/semantics.dart';\n\nvoid main() {\n  runApp(const MyApp());\n  SemanticsBinding.instance.ensureSemantics();\n}\n```\n\n----------------------------------------\n\nTITLE: Build a ListView with mixed item types in Dart\nDESCRIPTION: This code snippet shows how to use `ListView.builder()` to create a list of widgets from a list of `ListItem` objects. The `itemBuilder` function is used to create a `ListTile` widget for each item in the list, using the `buildTitle` and `buildSubtitle` methods of the `ListItem` to populate the title and subtitle of the `ListTile`. It defines how to render the mixed data types in a Flutter List.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/lists/mixed-list.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nListView.builder(\n  // Let the ListView know how many items it needs to build.\n  itemCount: items.length,\n  // Provide a builder function. This is where the magic happens.\n  // Convert each item into a widget based on the type of item it is.\n  itemBuilder: (context, index) {\n    final item = items[index];\n\n    return ListTile(\n      title: item.buildTitle(context),\n      subtitle: item.buildSubtitle(context),\n    );\n  },\n)\n```\n\n----------------------------------------\n\nTITLE: Toggle Favorite State in Flutter Widget\nDESCRIPTION: This code snippet shows the _toggleFavorite() method, which is responsible for updating the state of the Flutter widget when the IconButton is pressed. It calls setState() to trigger a UI update, toggling the _isFavorited flag and incrementing/decrementing the _favoriteCount accordingly.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/interactivity/index.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nvoid _toggleFavorite() {\n  setState(() {\n    if (_isFavorited) {\n      _favoriteCount -= 1;\n      _isFavorited = false;\n    } else {\n      _favoriteCount += 1;\n      _isFavorited = true;\n    }\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Using SlideTransition AnimatedWidget in Flutter\nDESCRIPTION: This code shows how to wrap the child widget with a SlideTransition to animate the page. It takes the Animation<Offset> generated in the previous step and sets it as the position of the SlideTransition. The SlideTransition then applies a FractionalTranslation to its child based on the animation's current value.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/animation/page-route-animation.md#_snippet_2\n\nLANGUAGE: Dart\nCODE:\n```\ntransitionsBuilder: (context, animation, secondaryAnimation, child) {\n  const begin = Offset(0.0, 1.0);\n  const end = Offset.zero;\n  final tween = Tween(begin: begin, end: end);\n  final offsetAnimation = animation.drive(tween);\n\n  return SlideTransition(position: offsetAnimation, child: child);\n},\n```\n\n----------------------------------------\n\nTITLE: Adding AnimationController to DraggableCardState in Dart\nDESCRIPTION: Extends the `_DraggableCardState` class with `SingleTickerProviderStateMixin` and initializes an `AnimationController` in `initState`. Sets the `vsync` to `this` and defines a duration for the animation.  The dispose method is also overridden to properly dispose of the controller, which is crucial for preventing memory leaks.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/animation/physics-simulation.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nclass _DraggableCardState extends State<DraggableCard>\n    with SingleTickerProviderStateMixin {\n  late AnimationController _controller;\n\n   @override\n   void initState() {\n     super.initState();\n    _controller =\n        AnimationController(vsync: this, duration: const Duration(seconds: 1));\n   }\n\n   @override\n   void dispose() {\n    _controller.dispose();\n     super.dispose();\n   }\n```\n\n----------------------------------------\n\nTITLE: Add HTTP Package using Flutter Pub\nDESCRIPTION: This command adds the `http` package as a dependency to your Flutter project, allowing you to make HTTP requests.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/networking/update-data.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ flutter pub add http\n```\n\n----------------------------------------\n\nTITLE: Overriding Text Scaling Strategy Dart\nDESCRIPTION: Shows how to override the existing `TextScaler` in a widget subtree using `MediaQuery`. It demonstrates replacing `textScaleFactor` with a custom `TextScaler` instance.  It is important to note the document recommends using existing methods like `MediaQuery.withNoTextScaling` and `MediaQuery.withClampedTextScaling` when possible.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/deprecate-textscalefactor.md#_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nMediaQuery( \n  data: MediaQuery.of(context).copyWith(textScaleFactor: 2.0),\n  child: child,\n)\n```\n\nLANGUAGE: dart\nCODE:\n```\nMediaQuery( \n  data: MediaQuery.of(context).copyWith(textScaler: _myCustomTextScaler),\n  child: child,\n)\n```\n\n----------------------------------------\n\nTITLE: Loading Data with Async/Await in Flutter\nDESCRIPTION: This code snippet demonstrates how to load data from a network resource using the `async`/`await` keywords in Flutter. It fetches data from a specified URL using the `http` package and updates the UI with the retrieved data. This is suitable for I/O-bound operations.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/android-devs.md#_snippet_17\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> loadData() async {\n  final dataURL = Uri.parse('https://jsonplaceholder.typicode.com/posts');\n  final response = await http.get(dataURL);\n  setState(() {\n    widgets =\n        (jsonDecode(response.body) as List).cast<Map<String, Object?>>();\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Input with TextEditingController Flutter\nDESCRIPTION: This Flutter code demonstrates how to retrieve user input from a TextField using a TextEditingController. The controller is initialized, associated with the TextField, and used to access the current text value when a button is pressed. It also shows how to properly dispose of the controller.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/xamarin-forms-devs.md#_snippet_52\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\n\nclass MyForm extends StatefulWidget {\n  const MyForm({super.key});\n\n  @override\n  State<MyForm> createState() => _MyFormState();\n}\n\nclass _MyFormState extends State<MyForm> {\n  /// Create a text controller and use it to retrieve the current value\n  /// of the TextField.\n  final TextEditingController myController = TextEditingController();\n\n  @override\n  void dispose() {\n    // Clean up the controller when disposing of the widget.\n    myController.dispose();\n    super.dispose();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: const Text('Retrieve Text Input')),\n      body: Padding(\n        padding: const EdgeInsets.all(16),\n        child: TextField(controller: myController),\n      ),\n      floatingActionButton: FloatingActionButton(\n        // When the user presses the button, show an alert dialog with the\n        // text that the user has typed into our text field.\n        onPressed: () {\n          showDialog(\n            context: context,\n            builder: (context) {\n              return AlertDialog(\n                // Retrieve the text that the user has entered using the\n                // TextEditingController.\n                content: Text(myController.text),\n              );\n            },\n          );\n        },\n        tooltip: 'Show me the value!',\n        child: const Icon(Icons.text_fields),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MaterialApp for Localization - Dart\nDESCRIPTION: This code snippet configures the `MaterialApp` widget to support localization. It adds `AppLocalizations.delegate` to the `localizationsDelegates` list and specifies the supported locales as English and Spanish.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/accessibility-and-internationalization/internationalization.md#_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nreturn const MaterialApp(\n  title: 'Localizations Sample App',\n  localizationsDelegates: [\n    AppLocalizations.delegate, // Add this line\n    GlobalMaterialLocalizations.delegate,\n    GlobalWidgetsLocalizations.delegate,\n    GlobalCupertinoLocalizations.delegate,\n  ],\n  supportedLocales: [\n    Locale('en'), // English\n    Locale('es'), // Spanish\n  ],\n  home: MyHomePage(),\n);\n```\n\n----------------------------------------\n\nTITLE: Dart Function Definition Snippet\nDESCRIPTION: Inserts a function definition. No dependencies are required. Input: None. Output: A basic function definition structure.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/tools/vs-code.md#_snippet_10\n\nLANGUAGE: Dart\nCODE:\n```\nvoid myFunction(String name) {  }\n```\n\n----------------------------------------\n\nTITLE: ApiClientService Class in Dart\nDESCRIPTION: Defines a service for interacting with a remote API to fetch and update user profile data. It performs GET requests to retrieve a UserProfile and PUT requests to update it. This service represents the remote data source in the offline-first architecture.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/app-architecture/design-patterns/offline-first.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nclass ApiClientService {\n  /// performs GET network request to obtain a UserProfile\n  Future<UserProfile> getUserProfile() async {\n    // ···\n  }\n\n  /// performs PUT network request to update a UserProfile\n  Future<void> putUserProfile(UserProfile userProfile) async {\n    // ···\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Multi-View Mode in flutter_bootstrap.js\nDESCRIPTION: This JavaScript snippet shows how to enable multi-view (embedded) mode for a Flutter web application. Setting `multiViewEnabled` to `true` during engine initialization allows the Flutter application to render into multiple DOM elements.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/platform-integration/web/embedding-flutter-web.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n_flutter.loader.load({\n  onEntrypointLoaded: async function onEntrypointLoaded(engineInitializer) {\n    let engine = await engineInitializer.initializeEngine({\n      multiViewEnabled: true, // Enables embedded mode.\n    });\n    let app = await engine.runApp();\n    // Make this `app` object available to your JS app.\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Displaying an AppBar for the SetupFlow in Dart\nDESCRIPTION: This snippet shows how to build the UI by returning a Scaffold widget from the SetupFlow widget's build() method with the desired AppBar widget. The appBar contains title and possibly leading back button which can be configured to pop the current setup flow.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/effects/nested-nav.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\n@override\nWidget build(BuildContext context) {\n  return Scaffold(appBar: _buildFlowAppBar(), body: const SizedBox());\n}\n\nPreferredSizeWidget _buildFlowAppBar() {\n  return AppBar(title: const Text('Bulb Setup'));\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Image Asset using AssetImage in Flutter\nDESCRIPTION: This Dart snippet shows how to load an image asset using the `AssetImage` class within a Flutter widget's `build()` method. It creates an `Image` widget that displays the specified image from the asset bundle. The asset 'assets/background.png' must be defined in your `pubspec.yaml`.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/assets/assets-and-images.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nreturn const Image(image: AssetImage('assets/background.png'));\n```\n\n----------------------------------------\n\nTITLE: Adding Key to Flutter FloatingActionButton (Dart)\nDESCRIPTION: This code snippet demonstrates how to add a `Key` to a `FloatingActionButton` in a Flutter app. The `Key` allows the integration test to find the widget specifically for tapping and testing.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/testing/integration-tests/index.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nfloatingActionButton: FloatingActionButton(\n  key: const ValueKey('increment'),\n  onPressed: _incrementCounter,\n  tooltip: 'Increment',\n  child: const Icon(Icons.add),\n),\n```\n\n----------------------------------------\n\nTITLE: Running a Flutter app with a specified flavor\nDESCRIPTION: This command allows you to run a Flutter application with a specific flavor.  Replace `<flavor_name>` with the desired flavor (e.g., staging, production).  It requires a connected Android device or emulator.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/deployment/flavors.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ flutter (run | build) --flavor <flavor_name>\n```\n\n----------------------------------------\n\nTITLE: Animating Flashing Circles with AnimationController in Flutter\nDESCRIPTION: This snippet demonstrates how to create a repeating animation using `AnimationController` in Flutter to animate the flashing circles of a typing indicator.  It initializes the controller, starts it when the indicator is shown, stops it when hidden, and passes it to the `StatusBubble` widget. Requires `TickerProviderStateMixin` for the animation.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/effects/typing-indicator.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nclass _TypingIndicatorState extends State<TypingIndicator>\n    with TickerProviderStateMixin {\n  late AnimationController _appearanceController;\n\n  late Animation<double> _indicatorSpaceAnimation;\n\n  late Animation<double> _smallBubbleAnimation;\n  late Animation<double> _mediumBubbleAnimation;\n  late Animation<double> _largeBubbleAnimation;\n\n  late AnimationController _repeatingController;\n  final List<Interval> _dotIntervals = const [\n    Interval(0.25, 0.8),\n    Interval(0.35, 0.9),\n    Interval(0.45, 1.0),\n  ];\n\n  @override\n  void initState() {\n    super.initState();\n\n    // other initializations...\n\n    _repeatingController = AnimationController(\n      vsync: this,\n      duration: const Duration(milliseconds: 1500),\n    );\n\n    if (widget.showIndicator) {\n      _showIndicator();\n    }\n  }\n\n  @override\n  void dispose() {\n    _appearanceController.dispose();\n    _repeatingController.dispose();\n    super.dispose();\n  }\n\n  void _showIndicator() {\n    _appearanceController\n      ..duration = const Duration(milliseconds: 750)\n      ..forward();\n    _repeatingController.repeat(); // <-- Add this\n  }\n\n  void _hideIndicator() {\n    _appearanceController\n      ..duration = const Duration(milliseconds: 150)\n      ..reverse();\n    _repeatingController.stop(); // <-- Add this\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return AnimatedBuilder(\n      animation: _indicatorSpaceAnimation,\n      builder: (context, child) {\n        return SizedBox(height: _indicatorSpaceAnimation.value, child: child);\n      },\n      child: Stack(\n        children: [\n          AnimatedBubble(\n            animation: _smallBubbleAnimation,\n            left: 8,\n            bottom: 8,\n            bubble: CircleBubble(size: 8, bubbleColor: widget.bubbleColor),\n          ),\n          AnimatedBubble(\n            animation: _mediumBubbleAnimation,\n            left: 10,\n            bottom: 10,\n            bubble: CircleBubble(size: 16, bubbleColor: widget.bubbleColor),\n          ),\n          AnimatedBubble(\n            animation: _largeBubbleAnimation,\n            left: 12,\n            bottom: 12,\n            bubble: StatusBubble(\n              repeatingController: _repeatingController, // <-- Add this\n              dotIntervals: _dotIntervals,\n              flashingCircleDarkColor: widget.flashingCircleDarkColor,\n              flashingCircleBrightColor: widget.flashingCircleBrightColor,\n              bubbleColor: widget.bubbleColor,\n            ),\n          ),\n        ],\n      ),\n    );\n  }\n}\n\nclass StatusBubble extends StatelessWidget {\n  const StatusBubble({\n    super.key,\n    required this.repeatingController,\n    required this.dotIntervals,\n    required this.flashingCircleBrightColor,\n    required this.flashingCircleDarkColor,\n    required this.bubbleColor,\n  });\n\n  final AnimationController repeatingController;\n  final List<Interval> dotIntervals;\n  final Color flashingCircleDarkColor;\n  final Color flashingCircleBrightColor;\n  final Color bubbleColor;\n\n  @override\n  Widget build(BuildContext context) {\n    return Container(\n      width: 85,\n      height: 44,\n      padding: const EdgeInsets.symmetric(horizontal: 8),\n      decoration: BoxDecoration(\n        borderRadius: BorderRadius.circular(27),\n        color: bubbleColor,\n      ),\n      child: Row(\n        mainAxisAlignment: MainAxisAlignment.spaceEvenly,\n        children: [\n          FlashingCircle(\n            index: 0,\n            repeatingController: repeatingController,\n            dotIntervals: dotIntervals,\n            flashingCircleDarkColor: flashingCircleDarkColor,\n            flashingCircleBrightColor: flashingCircleBrightColor,\n          ),\n          FlashingCircle(\n            index: 1,\n            repeatingController: repeatingController,\n            dotIntervals: dotIntervals,\n            flashingCircleDarkColor: flashingCircleDarkColor,\n            flashingCircleBrightColor: flashingCircleBrightColor,\n          ),\n          FlashingCircle(\n            index: 2,\n            repeatingController: repeatingController,\n            dotIntervals: dotIntervals,\n            flashingCircleDarkColor: flashingCircleDarkColor,\n            flashingCircleBrightColor: flashingCircleBrightColor,\n          ),\n        ],\n      ),\n    );\n  }\n}\n\nclass FlashingCircle extends StatelessWidget {\n  const FlashingCircle({\n    super.key,\n    required this.index,\n    required this.repeatingController,\n    required this.dotIntervals,\n    required this.flashingCircleBrightColor,\n    required this.flashingCircleDarkColor,\n  });\n\n  final int index;\n  final AnimationController repeatingController;\n  final List<Interval> dotIntervals;\n  final Color flashingCircleDarkColor;\n  final Color flashingCircleBrightColor;\n\n  @override\n  Widget build(BuildContext context) {\n    return AnimatedBuilder(\n      animation: repeatingController,\n      builder: (context, child) {\n        final circleFlashPercent = dotIntervals[index].transform(\n          repeatingController.value,\n        );\n        final circleColorPercent = sin(pi * circleFlashPercent);\n\n        return Container(\n          width: 12,\n          height: 12,\n          decoration: BoxDecoration(\n            shape: BoxShape.circle,\n            color: Color.lerp(\n              flashingCircleDarkColor,\n              flashingCircleBrightColor,\n              circleColorPercent,\n            ),\n          ),\n        );\n      },\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Animation with setState in Flutter\nDESCRIPTION: This snippet demonstrates how to trigger the animation by updating the properties of the AnimatedContainer within a setState() call.  When the FloatingActionButton is pressed, setState() is used to generate new random values for width, height, color, and borderRadius, which causes the AnimatedContainer to animate to the new values. Random is imported from 'dart:math'.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/animation/animated-container.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nFloatingActionButton(\n  // When the user taps the button\n  onPressed: () {\n    // Use setState to rebuild the widget with new values.\n    setState(() {\n      // Create a random number generator.\n      final random = Random();\n\n      // Generate a random width and height.\n      _width = random.nextInt(300).toDouble();\n      _height = random.nextInt(300).toDouble();\n\n      // Generate a random color.\n      _color = Color.fromRGBO(\n        random.nextInt(256),\n        random.nextInt(256),\n        random.nextInt(256),\n        1,\n      );\n\n      // Generate a random border radius.\n      _borderRadius = BorderRadius.circular(\n        random.nextInt(100).toDouble(),\n      );\n    });\n  },\n  child: const Icon(Icons.play_arrow),\n)\n```\n\n----------------------------------------\n\nTITLE: Accessing Localized Strings in Flutter (Dart)\nDESCRIPTION: This code shows how to access localized strings from an ARB file in Flutter using `AppLocalizations`. It demonstrates how to retrieve a string and pass in dynamic values for placeholders.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/android-devs.md#_snippet_27\n\nLANGUAGE: Dart\nCODE:\n```\nText(AppLocalizations.of(context)!.hello('John'));\n```\n\n----------------------------------------\n\nTITLE: Checking if Keys are Pressed with HardwareKeyboard\nDESCRIPTION: This snippet demonstrates how to check if a set of keys is currently pressed using `HardwareKeyboard.instance.logicalKeysPressed`. The `isKeyDown` method checks if any of the provided keys are present in the set of currently pressed keys.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/adaptive-responsive/input.md#_snippet_6\n\nLANGUAGE: Dart\nCODE:\n```\nstatic bool isKeyDown(Set<LogicalKeyboardKey> keys) {\n  return keys\n      .intersection(HardwareKeyboard.instance.logicalKeysPressed)\n      .isNotEmpty;\n}\n```\n\n----------------------------------------\n\nTITLE: Requesting Focus on a TextField in Flutter\nDESCRIPTION: This code demonstrates how to use the `requestFocus()` method of a `FocusNode` to give focus to the associated `TextField`.  This is typically triggered by a user interaction, such as tapping a button.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/forms/focus.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nFloatingActionButton(\n  // When the button is pressed,\n  // give focus to the text field using myFocusNode.\n  onPressed: () => myFocusNode.requestFocus(),\n),\n```\n\n----------------------------------------\n\nTITLE: Extract arguments using onGenerateRoute in Dart\nDESCRIPTION: Illustrates how to use `onGenerateRoute()` to extract arguments and pass them to a widget. This function handles route generation based on settings and is used as an alternative to the `routes` table. The function checks the route name, casts the arguments, and returns a MaterialPageRoute with the arguments passed to the builder.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/navigation/navigate-with-arguments.md#_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nMaterialApp(\n  // Provide a function to handle named routes.\n  // Use this function to identify the named\n  // route being pushed, and create the correct\n  // Screen.\n  onGenerateRoute: (settings) {\n    // If you push the PassArguments route\n    if (settings.name == PassArgumentsScreen.routeName) {\n      // Cast the arguments to the correct\n      // type: ScreenArguments.\n      final args = settings.arguments as ScreenArguments;\n\n      // Then, extract the required data from\n      // the arguments and pass the data to the\n      // correct screen.\n      return MaterialPageRoute(\n        builder: (context) {\n          return PassArgumentsScreen(\n            title: args.title,\n            message: args.message,\n          );\n        },\n      );\n    }\n    // The code only supports\n    // PassArgumentsScreen.routeName right now.\n    // Other values need to be implemented if we\n    // add them. The assertion here will help remind\n    // us of that higher up in the call stack, since\n    // this assertion would otherwise fire somewhere\n    // in the framework.\n    assert(false, 'Need to implement ${settings.name}');\n    return null;\n  },\n)\n```\n\n----------------------------------------\n\nTITLE: YAML Dependency with Version Range\nDESCRIPTION: Example of a dependency declaration in `pubspec.yaml` using a caret syntax to specify a minimum version that covers all versions up to the next major version.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/packages-and-plugins/using-packages.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  url_launcher: ^5.4.0    # Good, any version >= 5.4.0 but < 6.0.0\n  image_picker: '5.4.3'   # Not so good, only version 5.4.3 works.\n```\n\n----------------------------------------\n\nTITLE: Defining the Dog Data Model with toMap and toString\nDESCRIPTION: This snippet extends the `Dog` class to include a `toMap()` method, which converts a `Dog` object into a `Map<String, Object?>` suitable for inserting into the database. It also includes a `toString()` method to provide a readable string representation of the `Dog` object for debugging purposes.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/persistence/sqlite.md#_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nclass Dog {\n  final int id;\n  final String name;\n  final int age;\n\n  Dog({required this.id, required this.name, required this.age});\n\n  // Convert a Dog into a Map. The keys must correspond to the names of the\n  // columns in the database.\n  Map<String, Object?> toMap() {\n    return {'id': id, 'name': name, 'age': age};\n  }\n\n  // Implement toString to make it easier to see information about\n  // each dog when using the print statement.\n  @override\n  String toString() {\n    return 'Dog{id: $id, name: $name, age: $age}';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing and Disposing of Listener in Flutter\nDESCRIPTION: This snippet demonstrates the `initState` and `dispose` methods for managing a listener on the view model.  `initState` adds the `_onViewModelChange` method as a listener. `dispose` removes the listener to prevent errors when the widget is no longer in the tree.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/app-architecture/design-patterns/optimistic-state.md#_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\n@override\nvoid initState() {\n  super.initState();\n  widget.viewModel.addListener(_onViewModelChange);\n}\n\n@override\nvoid dispose() {\n  widget.viewModel.removeListener(_onViewModelChange);\n  super.dispose();\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the View with ListenableBuilder in Dart\nDESCRIPTION: This code defines the View using a `ListenableBuilder` widget. It listens to changes in the `CounterViewModel` and rebuilds its widget tree accordingly. It displays the counter value and an error message, if any, based on the ViewModel's state.  A `TextButton` is included to trigger the increment action in the ViewModel.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/fundamentals/state-management.md#_snippet_13\n\nLANGUAGE: dart\nCODE:\n```\nListenableBuilder(\n  listenable: viewModel,\n  builder: (context, child) {\n    return Column(\n      children: [\n        if (viewModel.errorMessage != null)\n          Text(\n            'Error: ${viewModel.errorMessage}',\n            style: Theme.of(context)\n                .textTheme\n                .labelSmall\n                ?.apply(color: Colors.red),\n          ),\n        Text('Count: ${viewModel.count}'),\n        TextButton(\n          onPressed: () {\n            viewModel.increment();\n          },\n          child: Text('Increment'),\n        ),\n      ],\n    );\n  },\n)\n```\n\n----------------------------------------\n\nTITLE: Create and Initialize CameraController (Dart)\nDESCRIPTION: Creates a StatefulWidget, initializes the CameraController with a specific camera and resolution, and defines the state management for the camera preview. It also handles the disposal of the controller when the widget is disposed to prevent memory leaks.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/plugins/picture-using-camera.md#_snippet_3\n\nLANGUAGE: Dart\nCODE:\n```\n// A screen that allows users to take a picture using a given camera.\nclass TakePictureScreen extends StatefulWidget {\n  const TakePictureScreen({super.key, required this.camera});\n\n  final CameraDescription camera;\n\n  @override\n  TakePictureScreenState createState() => TakePictureScreenState();\n}\n\nclass TakePictureScreenState extends State<TakePictureScreen> {\n  late CameraController _controller;\n  late Future<void> _initializeControllerFuture;\n\n  @override\n  void initState() {\n    super.initState();\n    // To display the current output from the Camera,\n    // create a CameraController.\n    _controller = CameraController(\n      // Get a specific camera from the list of available cameras.\n      widget.camera,\n      // Define the resolution to use.\n      ResolutionPreset.medium,\n    );\n\n    // Next, initialize the controller. This returns a Future.\n    _initializeControllerFuture = _controller.initialize();\n  }\n\n  @override\n  void dispose() {\n    // Dispose of the controller when the widget is disposed.\n    _controller.dispose();\n    super.dispose();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    // Fill this out in the next steps.\n    return Container();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Define Photo Class with fromJson Factory\nDESCRIPTION: This code defines a `Photo` class to represent a photo object with properties like `albumId`, `id`, `title`, `url`, and `thumbnailUrl`. It includes a `fromJson` factory method to create a `Photo` instance from a JSON object.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/networking/background-parsing.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nclass Photo {\n  final int albumId;\n  final int id;\n  final String title;\n  final String url;\n  final String thumbnailUrl;\n\n  const Photo({\n    required this.albumId,\n    required this.id,\n    required this.title,\n    required this.url,\n    required this.thumbnailUrl,\n  });\n\n  factory Photo.fromJson(Map<String, dynamic> json) {\n    return Photo(\n      albumId: json['albumId'] as int,\n      id: json['id'] as int,\n      title: json['title'] as String,\n      url: json['url'] as String,\n      thumbnailUrl: json['thumbnailUrl'] as String,\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Styling ElevatedButton to resemble RaisedButton in Dart\nDESCRIPTION: This code snippet demonstrates how to style an `ElevatedButton` to visually resemble a deprecated `RaisedButton` using the `ButtonStyle` API. It sets the foreground color, background color, minimum size, padding, and shape to match the original `RaisedButton` appearance.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/buttons.md#_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nfinal ButtonStyle raisedButtonStyle = ElevatedButton.styleFrom(\n  foregroundColor: Colors.black87,\n  backgroundColor: Colors.grey[300],\n  minimumSize: Size(88, 36),\n  padding: EdgeInsets.symmetric(horizontal: 16),\n  shape: const RoundedRectangleBorder(\n    borderRadius: BorderRadius.all(Radius.circular(2)),\n  ),\n);\nElevatedButton(\n  style: raisedButtonStyle,\n  onPressed: () { },\n  child: Text('Looks like a RaisedButton'),\n)\n```\n\n----------------------------------------\n\nTITLE: Display Camera Preview with FutureBuilder (Dart)\nDESCRIPTION: Uses a FutureBuilder widget to display a loading indicator while the camera controller is initializing and then displays the camera preview once the initialization is complete. This ensures that the camera preview is only shown when the controller is ready.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/plugins/picture-using-camera.md#_snippet_4\n\nLANGUAGE: Dart\nCODE:\n```\n// You must wait until the controller is initialized before displaying the\n// camera preview. Use a FutureBuilder to display a loading spinner until the\n// controller has finished initializing.\nFutureBuilder<void>(\n  future: _initializeControllerFuture,\n  builder: (context, snapshot) {\n    if (snapshot.connectionState == ConnectionState.done) {\n      // If the Future is complete, display the preview.\n      return CameraPreview(_controller);\n    } else {\n      // Otherwise, display a loading indicator.\n      return const Center(child: CircularProgressIndicator());\n    }\n  },\n)\n```\n\n----------------------------------------\n\nTITLE: Create Flutter App\nDESCRIPTION: Creates a new Flutter application named 'deeplink_cookbook'. This is the starting point for implementing deep linking functionality.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/navigation/set-up-universal-links.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ flutter create deeplink_cookbook\n```\n\n----------------------------------------\n\nTITLE: Migrating AppBar properties in Dart\nDESCRIPTION: This snippet showcases how to migrate deprecated AppBar properties like `brightness` and `textTheme` to their replacements, `systemOverlayStyle`, `toolbarTextStyle`, and `titleTextStyle`, respectively. It also demonstrates the replacement of `AppBarTheme.color` with `AppBarTheme.backgroundColor`. The snippet offers a clear side-by-side comparison for easy migration.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/3-7-deprecations.md#_snippet_2\n\nLANGUAGE: Dart\nCODE:\n```\nvar toolbarTextStyle = TextStyle(...);\nvar titleTextStyle = TextStyle(...);\nAppBar(\n  brightness: Brightness.light,\n  textTheme: TextTheme(\n    bodyMedium: toolbarTextStyle,\n    titleLarge: titleTextStyle,\n  )\n  backwardsCompatibility: true,\n);\nAppBarTheme(color: Colors.blue);\n\n```\n\nLANGUAGE: Dart\nCODE:\n```\nvar toolbarTextStyle = TextStyle(...);\nvar titleTextStyle = TextStyle(...);\nAppBar(\n  systemOverlayStyle: SystemOverlayStyle(statusBarBrightness: Brightness.light),\n  toolbarTextStyle: toolbarTextStyle,\n  titleTextStyle: titleTextStyle,\n);\nAppBarTheme(backgroundColor: Colors.blue);\n\n```\n\n----------------------------------------\n\nTITLE: Creating Drag and Drop Widget\nDESCRIPTION: This snippet defines the `ExampleDragAndDrop` StatefulWidget, which manages the state and UI for the drag and drop interaction. It includes building the app bar, menu list, and the row of customer carts.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/effects/drag-a-widget.md#_snippet_8\n\nLANGUAGE: Dart\nCODE:\n```\n@immutable\nclass ExampleDragAndDrop extends StatefulWidget {\n  const ExampleDragAndDrop({super.key});\n\n  @override\n  State<ExampleDragAndDrop> createState() => _ExampleDragAndDropState();\n}\n\nclass _ExampleDragAndDropState extends State<ExampleDragAndDrop>\n    with TickerProviderStateMixin {\n  final List<Customer> _people = [\n    Customer(\n      name: 'Makayla',\n      imageProvider: const NetworkImage(\n        'https://docs.flutter.dev'\n        '/cookbook/img-files/effects/split-check/Avatar1.jpg',\n      ),\n    ),\n    Customer(\n      name: 'Nathan',\n      imageProvider: const NetworkImage(\n        'https://docs.flutter.dev'\n        '/cookbook/img-files/effects/split-check/Avatar2.jpg',\n      ),\n    ),\n    Customer(\n      name: 'Emilio',\n      imageProvider: const NetworkImage(\n        'https://docs.flutter.dev'\n        '/cookbook/img-files/effects/split-check/Avatar3.jpg',\n      ),\n    ),\n  ];\n\n  final GlobalKey _draggableKey = GlobalKey();\n\n  void _itemDroppedOnCustomerCart({\n    required Item item,\n    required Customer customer,\n  }) {\n    setState(() {\n      customer.items.add(item);\n    });\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      backgroundColor: const Color(0xFFF7F7F7),\n      appBar: _buildAppBar(),\n      body: _buildContent(),\n    );\n  }\n\n  PreferredSizeWidget _buildAppBar() {\n    return AppBar(\n      iconTheme: const IconThemeData(color: Color(0xFFF64209)),\n      title: Text(\n        'Order Food',\n        style: Theme.of(context).textTheme.headlineMedium?.copyWith(\n          fontSize: 36,\n          color: const Color(0xFFF64209),\n          fontWeight: FontWeight.bold,\n        ),\n      ),\n      backgroundColor: const Color(0xFFF7F7F7),\n      elevation: 0,\n    );\n  }\n\n  Widget _buildContent() {\n    return Stack(\n      children: [\n        SafeArea(\n          child: Column(\n            children: [Expanded(child: _buildMenuList()), _buildPeopleRow()],\n          ),\n        ),\n      ],\n    );\n  }\n\n  Widget _buildMenuList() {\n    return ListView.separated(\n      padding: const EdgeInsets.all(16),\n      itemCount: _items.length,\n      separatorBuilder: (context, index) {\n        return const SizedBox(height: 12);\n      },\n      itemBuilder: (context, index) {\n        final item = _items[index];\n        return _buildMenuItem(item: item);\n      },\n    );\n  }\n\n  Widget _buildMenuItem({required Item item}) {\n    return LongPressDraggable<Item>(\n      data: item,\n      dragAnchorStrategy: pointerDragAnchorStrategy,\n      feedback: DraggingListItem(\n        dragKey: _draggableKey,\n        photoProvider: item.imageProvider,\n      ),\n      child: MenuListItem(\n        name: item.name,\n        price: item.formattedTotalItemPrice,\n        photoProvider: item.imageProvider,\n      ),\n    );\n  }\n\n  Widget _buildPeopleRow() {\n    return Container(\n      padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 20),\n      child: Row(children: _people.map(_buildPersonWithDropZone).toList()),\n    );\n  }\n\n  Widget _buildPersonWithDropZone(Customer customer) {\n    return Expanded(\n      child: Padding(\n        padding: const EdgeInsets.symmetric(horizontal: 6),\n        child: DragTarget<Item>(\n          builder: (context, candidateItems, rejectedItems) {\n            return CustomerCart(\n              hasItems: customer.items.isNotEmpty,\n              highlighted: candidateItems.isNotEmpty,\n              customer: customer,\n            );\n          },\n          onAcceptWithDetails: (details) {\n            _itemDroppedOnCustomerCart(item: details.data, customer: customer);\n          },\n        ),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Android Launch Screen XML\nDESCRIPTION: This XML snippet shows how to customize the launch screen in an Android Flutter application using a layer list drawable. You can modify the existing template in `res/drawable/launch_background.xml` to add an image or other drawables to the splash screen.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/assets/assets-and-images.md#_snippet_11\n\nLANGUAGE: xml\nCODE:\n```\n<layer-list xmlns:android=\"http://schemas.android.com/apk/res/android\">\n    <item\n        android:drawable=\"@android:color/white\"/>\n\n    <!-- You can insert your own image assets here -->\n    <!--\n    <item>\n        <bitmap\n            android:gravity=\"center\"\n            android:src=\"@drawable/your_image\"/>\n    </item>\n    -->\n</layer-list>\n```\n\n----------------------------------------\n\nTITLE: UserProfile Model with Synchronization Flag in Flutter\nDESCRIPTION: This code snippet defines a `UserProfile` data class with a `synchronized` flag.  This flag indicates whether the local data has been successfully synchronized with the server. The synchronization logic uses this flag to determine whether to send updates to the API service.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/app-architecture/design-patterns/offline-first.md#_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\n@freezed\nabstract class UserProfile with _$UserProfile {\n  const factory UserProfile({\n    required String name,\n    required String photoUrl,\n    @Default(false) bool synchronized,\n  }) = _UserProfile;\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Flutter App with HTTP Data Fetching\nDESCRIPTION: This complete example shows the full code for a Flutter application that fetches data from an HTTP endpoint and displays it. It includes the `Album` class, the `fetchAlbum` function, and the UI components to display the fetched data. It demonstrates how to handle successful and error responses, and how to show a loading indicator while waiting for the data.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/testing/unit/mocking.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nimport 'dart:async';\nimport 'dart:convert';\n\nimport 'package:flutter/material.dart';\nimport 'package:http/http.dart' as http;\n\nFuture<Album> fetchAlbum(http.Client client) async {\n  final response = await client.get(\n    Uri.parse('https://jsonplaceholder.typicode.com/albums/1'),\n  );\n\n  if (response.statusCode == 200) {\n    // If the server did return a 200 OK response,\n    // then parse the JSON.\n    return Album.fromJson(jsonDecode(response.body) as Map<String, dynamic>);\n  } else {\n    // If the server did not return a 200 OK response,\n    // then throw an exception.\n    throw Exception('Failed to load album');\n  }\n}\n\nclass Album {\n  final int userId;\n  final int id;\n  final String title;\n\n  const Album({required this.userId, required this.id, required this.title});\n\n  factory Album.fromJson(Map<String, dynamic> json) {\n    return Album(\n      userId: json['userId'] as int,\n      id: json['id'] as int,\n      title: json['title'] as String,\n    );\n  }\n}\n\nvoid main() => runApp(const MyApp());\n\nclass MyApp extends StatefulWidget {\n  const MyApp({super.key});\n\n  @override\n  State<MyApp> createState() => _MyAppState();\n}\n\nclass _MyAppState extends State<MyApp> {\n  late final Future<Album> futureAlbum;\n\n  @override\n  void initState() {\n    super.initState();\n    futureAlbum = fetchAlbum(http.Client());\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: 'Fetch Data Example',\n      theme: ThemeData(\n        colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),\n      ),\n      home: Scaffold(\n        appBar: AppBar(title: const Text('Fetch Data Example')),\n        body: Center(\n          child: FutureBuilder<Album>(\n            future: futureAlbum,\n            builder: (context, snapshot) {\n              if (snapshot.hasData) {\n                return Text(snapshot.data!.title);\n              } else if (snapshot.hasError) {\n                return Text('${snapshot.error}');\n              }\n\n              // By default, show a loading spinner.\n              return const CircularProgressIndicator();\n            },\n          ),\n        ),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handle Text Field Changes with onChanged Callback - Flutter\nDESCRIPTION: This snippet demonstrates how to use the `onChanged` callback of a `TextField` widget in Flutter to detect and handle text changes. The callback function is invoked every time the text in the field changes, printing the current value and length to the console.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/forms/text-field-changes.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nTextField(\n  onChanged: (text) {\n    print('First text field: $text (${text.characters.length})');\n  },\n),\n```\n\n----------------------------------------\n\nTITLE: Styling Text in Flutter (Dart)\nDESCRIPTION: Illustrates styling text in Flutter using the TextStyle widget, which is passed to the style parameter of the Text widget. This allows customizing various text attributes like fontSize, fontWeight, and color.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/compose-devs.md#_snippet_21\n\nLANGUAGE: dart\nCODE:\n```\nText(\n  'Hello, world!',\n  style: TextStyle(\n    fontSize: 30,\n    fontWeight: FontWeight.bold,\n    color: Colors.blue,\n  ),\n),\n```\n\n----------------------------------------\n\nTITLE: Using the Actions Widget in Dart\nDESCRIPTION: This code snippet demonstrates how to integrate an action into a Flutter application using the `Actions` widget. It creates an `Actions` widget that maps the `SelectAllIntent` to the `SelectAllAction`, providing a context in which the action can be invoked.  The widget wraps a child widget to which the actions will apply.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/interactivity/actions-and-shortcuts.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\n@override\nWidget build(BuildContext context) {\n  return Actions(\n    actions: <Type, Action<Intent>>{SelectAllIntent: SelectAllAction(model)},\n    child: child,\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Fading Widget Animation in Flutter\nDESCRIPTION: This example shows how to create a FadeTransition animation in Flutter.  It uses an AnimationController and CurvedAnimation to control the opacity of a FlutterLogo. When the FloatingActionButton is pressed, the logo fades in.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/android-devs.md#_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\n\nvoid main() {\n  runApp(const FadeAppTest());\n}\n\nclass FadeAppTest extends StatelessWidget {\n  const FadeAppTest({super.key});\n  // This widget is the root of your application.\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: 'Fade Demo',\n      theme: ThemeData(\n        colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),\n      ),\n      home: const MyFadeTest(title: 'Fade Demo'),\n    );\n  }\n}\n\nclass MyFadeTest extends StatefulWidget {\n  const MyFadeTest({super.key, required this.title});\n\n  final String title;\n  @override\n  State<MyFadeTest> createState() => _MyFadeTest();\n}\n\nclass _MyFadeTest extends State<MyFadeTest> with TickerProviderStateMixin {\n  late AnimationController controller;\n  late CurvedAnimation curve;\n\n  @override\n  void initState() {\n    super.initState();\n    controller = AnimationController(\n      duration: const Duration(milliseconds: 2000),\n      vsync: this,\n    );\n    curve = CurvedAnimation(parent: controller, curve: Curves.easeIn);\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: Text(widget.title)),\n      body: Center(\n        child: FadeTransition(\n          opacity: curve,\n          child: const FlutterLogo(size: 100),\n        ),\n      ),\n      floatingActionButton: FloatingActionButton(\n        tooltip: 'Fade',\n        onPressed: () {\n          controller.forward();\n        },\n        child: const Icon(Icons.brush),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Apply Sliding Gradient Transform in Flutter\nDESCRIPTION: Applies the `_SlidingGradientTransform` to the `LinearGradient` by using the `_shimmerController`'s value as the `slidePercent`. This connects the animation controller to the gradient's transform, creating the animated shimmer effect.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/effects/shimmer-loading.md#_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\nLinearGradient get gradient => LinearGradient(\n  colors: widget.linearGradient.colors,\n  stops: widget.linearGradient.stops,\n  begin: widget.linearGradient.begin,\n  end: widget.linearGradient.end,\n  transform: _SlidingGradientTransform(\n    slidePercent: _shimmerController.value,\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Button Widget in Flutter\nDESCRIPTION: This snippet demonstrates how to create a custom button widget in Flutter by composing existing widgets, rather than extending them. The `CustomButton` class encapsulates an `ElevatedButton` with a label, providing a reusable button component with custom styling or behavior.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/xamarin-forms-devs.md#_snippet_15\n\nLANGUAGE: dart\nCODE:\n```\nclass CustomButton extends StatelessWidget {\n  const CustomButton(this.label, {super.key});\n\n  final String label;\n\n  @override\n  Widget build(BuildContext context) {\n    return ElevatedButton(onPressed: () {}, child: Text(label));\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting a Dog from the Database\nDESCRIPTION: This snippet defines a `deleteDog` function that deletes a `Dog` object from the 'dogs' table in the SQLite database based on its `id`. It retrieves a reference to the database and then uses the `delete()` method of the database to remove the corresponding row from the 'dogs' table. The `where` and `whereArgs` parameters are used to prevent SQL injection.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/persistence/sqlite.md#_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> deleteDog(int id) async {\n  // Get a reference to the database.\n  final db = await database;\n\n  // Remove the Dog from the database.\n  await db.delete(\n    'dogs',\n    // Use a `where` clause to delete a specific dog.\n    where: 'id = ?',\n    // Pass the Dog's id as a whereArg to prevent SQL injection.\n    whereArgs: [id],\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Flutter main.dart with custom font application\nDESCRIPTION: This Dart code shows a complete Flutter application that uses custom fonts.  It sets 'Raleway' as the default font for the entire application theme and then applies 'RobotoMono' to a specific `Text` widget. The `pubspec.yaml` must be configured to include these fonts.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/design/fonts.md#_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\n\nvoid main() => runApp(const MyApp());\n\nclass MyApp extends StatelessWidget {\n  const MyApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: 'Custom Fonts',\n      // Set Raleway as the default app font.\n      theme: ThemeData(fontFamily: 'Raleway'),\n      home: const MyHomePage(),\n    );\n  }\n}\n\nclass MyHomePage extends StatelessWidget {\n  const MyHomePage({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      // The AppBar uses the app-default Raleway font.\n      appBar: AppBar(title: const Text('Custom Fonts')),\n      body: const Center(\n        // This Text widget uses the RobotoMono font.\n        child: Text(\n          'Roboto Mono sample',\n          style: TextStyle(fontFamily: 'RobotoMono'),\n        ),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating App with Button Section in Flutter\nDESCRIPTION: Shows how to integrate the `ButtonSection` widget into the main layout. This involves adding the `ButtonSection()` widget to the `children` list of another widget (likely a `Column` or `ListView`) to display the buttons in the app.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/layout/tutorial.md#_snippet_7\n\nLANGUAGE: Dart\nCODE:\n```\n    TitleSection(\n      name: 'Oeschinen Lake Campground',\n      location: 'Kandersteg, Switzerland',\n    ),\n+   ButtonSection(),\n  ],\n```\n\n----------------------------------------\n\nTITLE: Build Flutter Desktop Release\nDESCRIPTION: These commands generate a release build for the specified desktop platform (Windows, macOS, or Linux). The build artifacts can then be distributed.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/platform-integration/desktop.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nPS C:\\> flutter build windows\n$ flutter build macos\n$ flutter build linux\n```\n\n----------------------------------------\n\nTITLE: Theming LinearProgressIndicator to Material 3 (Dart)\nDESCRIPTION: This snippet shows how to apply the updated Material 3 design to all LinearProgressIndicators within your application. By setting the `ProgressIndicatorThemeData.year2023` property to `false` within the `MaterialApp`'s theme, you ensure all instances of the LinearProgressIndicator use the new design.  It requires importing necessary Flutter material libraries.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/updated-material-3-progress-indicators.md#_snippet_1\n\nLANGUAGE: Dart\nCODE:\n```\nreturn MaterialApp(\n  theme: ThemeData(progressIndicatorTheme: const ProgressIndicatorThemeData(year2023: false)),\n        // ...\n        LinearProgressIndicator(\n          year2023: false,\n          value: 0.5,\n        ),\n        // ...\n\n```\n\n----------------------------------------\n\nTITLE: Drawing on Canvas in Flutter\nDESCRIPTION: This example demonstrates how to draw on a Canvas in Flutter using CustomPaint and CustomPainter. It creates a simple signature pad where users can draw lines by touching the screen. The drawn lines are stored as a list of Offset objects.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/android-devs.md#_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\n\nvoid main() => runApp(const MaterialApp(home: DemoApp()));\n\nclass DemoApp extends StatelessWidget {\n  const DemoApp({super.key});\n\n  @override\n  Widget build(BuildContext context) => const Scaffold(body: Signature());\n}\n\nclass Signature extends StatefulWidget {\n  const Signature({super.key});\n\n  @override\n  SignatureState createState() => SignatureState();\n}\n\nclass SignatureState extends State<Signature> {\n  List<Offset?> _points = <Offset>[];\n  @override\n  Widget build(BuildContext context) {\n    return GestureDetector(\n      onPanUpdate: (details) {\n        setState(() {\n          RenderBox? referenceBox = context.findRenderObject() as RenderBox;\n          Offset localPosition = referenceBox.globalToLocal(\n            details.globalPosition,\n          );\n          _points = List.from(_points)..add(localPosition);\n        });\n      },\n      onPanEnd: (details) => _points.add(null),\n      child: CustomPaint(\n        painter: SignaturePainter(_points),\n        size: Size.infinite,\n      ),\n    );\n  }\n}\n\nclass SignaturePainter extends CustomPainter {\n  SignaturePainter(this.points);\n  final List<Offset?> points;\n  @override\n  void paint(Canvas canvas, Size size) {\n    var paint =\n        Paint()\n          ..color = Colors.black\n          ..strokeCap = StrokeCap.round\n          ..strokeWidth = 5;\n    for (int i = 0; i < points.length - 1; i++) {\n      if (points[i] != null && points[i + 1] != null) {\n        canvas.drawLine(points[i]!, points[i + 1]!, paint);\n      }\n    }\n  }\n\n  @override\n  bool shouldRepaint(SignaturePainter oldDelegate) =>\n      oldDelegate.points != points;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Provider with History in Dart\nDESCRIPTION: Demonstrates how to create a new LlmProvider instance (specifically a GeminiProvider) with a given history. The `_createProvider` method takes an optional `List<ChatMessage>` as input and passes it to the history parameter of the GeminiProvider constructor. This allows for the continuation of a chat session after settings changes.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ai-toolkit/feature-integration.md#_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nclass _HomePageState extends State<HomePage> {\n  ...\n  // create a new provider with the given history and the current settings\n  LlmProvider _createProvider([List<ChatMessage>? history]) =>\n    GeminiProvider(\n      history: history,\n      ...\n    );\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Dart: Setting Default Font in MaterialApp\nDESCRIPTION: This Dart code snippet shows how to set a default font for the entire Flutter application using the `theme` property of `MaterialApp`. It sets the `fontFamily` to 'Raleway', which corresponds to the font family defined in the `pubspec.yaml` file, making Raleway the default font for all text in the app.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/design/fonts.md#_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nreturn MaterialApp(\n  title: 'Custom Fonts',\n  // Set Raleway as the default app font.\n  theme: ThemeData(fontFamily: 'Raleway'),\n  home: const MyHomePage(),\n);\n```\n\n----------------------------------------\n\nTITLE: Creating TodoListScreen with ViewModel in Dart\nDESCRIPTION: This snippet demonstrates how to create the `TodoListScreen` with its corresponding `TodoListViewModel` and pass the `TodoRepository` as a dependency to the view model.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/app-architecture/design-patterns/sql.md#_snippet_15\n\nLANGUAGE: dart\nCODE:\n```\nTodoListScreen(\n  viewModel: TodoListViewModel(todoRepository: widget.todoRepository),\n)\n```\n\n----------------------------------------\n\nTITLE: Lock device orientation - Dart\nDESCRIPTION: This snippet shows how to lock the device orientation to a specific value (portraitUp in this case) using SystemChrome.setPreferredOrientations(). This prevents the app from rotating to other orientations, ensuring a consistent user experience.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/design/orientation.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() {\n  WidgetsFlutterBinding.ensureInitialized();\n  SystemChrome.setPreferredOrientations([DeviceOrientation.portraitUp]);\n  runApp(const MyApp());\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Subscription State Variables to ViewModel in Dart\nDESCRIPTION: This code snippet adds boolean variables to the SubscribeButtonViewModel to represent the subscription state (`subscribed`) and the error state (`error`). These variables are used to manage the UI's display based on the outcome of the subscription attempt. Initially both flags are set to `false`.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/app-architecture/design-patterns/optimistic-state.md#_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\n// Whether the user is subscribed\nbool subscribed = false;\n\n// Whether the subscription action has failed\nbool error = false;\n```\n\n----------------------------------------\n\nTITLE: Loading Data Asynchronously with async/await in Flutter\nDESCRIPTION: This code snippet demonstrates how to load data from a remote URL using the `http` package and `async`/`await` in a Flutter application. It fetches data, decodes the JSON response, and updates the UI using `setState()`. It avoids blocking the main UI thread during the network request.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/uikit-devs.md#_snippet_25\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> loadData() async {\n  final Uri dataURL = Uri.parse('https://jsonplaceholder.typicode.com/posts');\n  final http.Response response = await http.get(dataURL);\n  setState(() {\n    data = (jsonDecode(response.body) as List).cast<Map<String, Object?>>();\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Applying a Theme Color to a Container in Flutter\nDESCRIPTION: This code snippet shows how to apply a color from the current theme to a `Container` widget. It retrieves the primary color from the `Theme.of(context).colorScheme` and sets it as the background color of the container.  It also demonstrates setting the text style using theme data.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/design/themes.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nContainer(\n  padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 12),\n  color: Theme.of(context).colorScheme.primary,\n  child: Text(\n    'Text with a background color',\n    // ···\n    style: Theme.of(context).textTheme.bodyMedium!.copyWith(\n      color: Theme.of(context).colorScheme.onPrimary,\n    ),\n  ),\n),\n```\n\n----------------------------------------\n\nTITLE: Fetch Photos using Compute Function\nDESCRIPTION: This code updates the `fetchPhotos` function to use the `compute` function to run the `parsePhotos` function in a separate isolate. This prevents the UI from freezing while parsing the JSON data.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/networking/background-parsing.md#_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nFuture<List<Photo>> fetchPhotos(http.Client client) async {\n  final response = await client.get(\n    Uri.parse('https://jsonplaceholder.typicode.com/photos'),\n  );\n\n  // Use the compute function to run parsePhotos in a separate isolate.\n  return compute(parsePhotos, response.body);\n}\n```\n\n----------------------------------------\n\nTITLE: Initialize MethodChannel in MainActivity (Kotlin)\nDESCRIPTION: This Kotlin code initializes a MethodChannel in the `MainActivity` to handle calls from the Flutter side. It sets a method call handler that currently has a placeholder comment. The channel name is defined as `samples.flutter.dev/battery`.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/platform-integration/platform-channels.md#_snippet_4\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport androidx.annotation.NonNull\nimport io.flutter.embedding.android.FlutterActivity\nimport io.flutter.embedding.engine.FlutterEngine\nimport io.flutter.plugin.common.MethodChannel\n\nclass MainActivity: FlutterActivity() {\n  private val CHANNEL = \"samples.flutter.dev/battery\"\n\n  override fun configureFlutterEngine(@NonNull flutterEngine: FlutterEngine) {\n    super.configureFlutterEngine(flutterEngine)\n    MethodChannel(flutterEngine.dartExecutor.binaryMessenger, CHANNEL).setMethodCallHandler {\n      call, result ->\n      // This method is invoked on the main thread.\n      // TODO\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using InheritedWidget in Flutter\nDESCRIPTION: This code defines a custom InheritedWidget (MyState) to efficiently host data in a parent widget and allows child widgets to access it without storing it directly.  The updateShouldNotify method determines when to rebuild dependent widgets.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/fundamentals/state-management.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nclass MyState extends InheritedWidget {\n  const MyState({\n    super.key,\n    required this.data,\n    required super.child,\n  });\n\n  final String data;\n\n  static MyState of(BuildContext context) {\n    // This method looks for the nearest `MyState` widget ancestor.\n    final result = context.dependOnInheritedWidgetOfExactType<MyState>();\n\n    assert(result != null, 'No MyState found in context');\n\n    return result!;\n  }\n\n  @override\n  // This method should return true if the old widget's data is different\n  // from this widget's data. If true, any widgets that depend on this widget\n  // by calling `of()` will be re-built.\n  bool updateShouldNotify(MyState oldWidget) => data != oldWidget.data;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Leave Behind Indicator Dart\nDESCRIPTION: This snippet adds a red background as a leave-behind indicator when an item is swiped away. This is achieved by adding the background parameter to the Dismissible widget, showing a visual cue to the user while swiping.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/gestures/dismissible.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\n    ScaffoldMessenger.of(context)\n        .showSnackBar(SnackBar(content: Text('$item dismissed')));\n  },\n+ // Show a red background as the item is swiped away.\n+ background: Container(color: Colors.red),\n  child: ListTile(\n    title: Text(item),\n  ),\n```\n\n----------------------------------------\n\nTITLE: Declaring SplitCompatApplication in AndroidManifest (XML)\nDESCRIPTION: Declares `SplitCompatApplication` as the application subclass in the `AndroidManifest.xml` file. The Flutter compatibility code from `FlutterApplication` is added to the application class. This is another valid method to support SplitCompat.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/perf/deferred-components.md#_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<application\n    ...\n    android:name=\"com.google.android.play.core.splitcompat.SplitCompatApplication\">\n</application>\n\n```\n\n----------------------------------------\n\nTITLE: Full Example: AnimatedOpacity Dart\nDESCRIPTION: A complete, runnable example demonstrating the use of AnimatedOpacity to fade a green box in and out when a button is pressed.  This example includes the MaterialApp, Scaffold, StatefulWidget, State, AnimatedOpacity, FloatingActionButton, and logic for toggling visibility.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/animation/opacity-animation.md#_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\n\nvoid main() => runApp(const MyApp());\n\nclass MyApp extends StatelessWidget {\n  const MyApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    const appTitle = 'Opacity Demo';\n    return const MaterialApp(\n      title: appTitle,\n      home: MyHomePage(title: appTitle),\n    );\n  }\n}\n\n// The StatefulWidget's job is to take data and create a State class.\n// In this case, the widget takes a title, and creates a _MyHomePageState.\nclass MyHomePage extends StatefulWidget {\n  const MyHomePage({super.key, required this.title});\n\n  final String title;\n\n  @override\n  State<MyHomePage> createState() => _MyHomePageState();\n}\n\n// The State class is responsible for two things: holding some data you can\n// update and building the UI using that data.\nclass _MyHomePageState extends State<MyHomePage> {\n  // Whether the green box should be visible\n  bool _visible = true;\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: Text(widget.title)),\n      body: Center(\n        child: AnimatedOpacity(\n          // If the widget is visible, animate to 0.0 (invisible).\n          // If the widget is hidden, animate to 1.0 (fully visible).\n          opacity: _visible ? 1.0 : 0.0,\n          duration: const Duration(milliseconds: 500),\n          // The green box must be a child of the AnimatedOpacity widget.\n          child: Container(width: 200, height: 200, color: Colors.green),\n        ),\n      ),\n      floatingActionButton: FloatingActionButton(\n        onPressed: () {\n          // Call setState. This tells Flutter to rebuild the\n          // UI with the changes.\n          setState(() {\n            _visible = !_visible;\n          });\n        },\n        tooltip: 'Toggle Opacity',\n        child: const Icon(Icons.flip),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating app version in pubspec.yaml\nDESCRIPTION: This code snippet shows how to update the version number of a Flutter app by modifying the `pubspec.yaml` file. The version number consists of three numbers separated by dots, followed by an optional build number separated by a `+` sign. The `version` parameter uses semantic versioning to track releases and build numbers.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/deployment/macos.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nversion: 1.0.0+1\n```\n\n----------------------------------------\n\nTITLE: Integrate Stateful Widget in Flutter UI\nDESCRIPTION: This diff snippet demonstrates how to integrate the custom stateful widget (FavoriteWidget) into the widget tree. It replaces the original Icon and Text widgets with the FavoriteWidget, allowing the stateful widget to manage the interactive star and count display.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/interactivity/index.md#_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\n  child: Row(\n    children: [\n      // ...\n-     Icon(\n-       Icons.star,\n-       color: Colors.red[500],\n-     ),\n-     const Text('41'),\n+     const FavoriteWidget(),\n    ],\n  ),\n```\n\n----------------------------------------\n\nTITLE: Invoking a Method on the Android Side from Dart\nDESCRIPTION: This snippet shows how to invoke a method on the Android side using the created method channel. The `invokeMethod` function is called with the method name ('launchActivity') and a map containing data to be passed to the Android activity. The method name and data structure must match the corresponding Kotlin code.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/platform-integration/android/compose-activity.md#_snippet_1\n\nLANGUAGE: Dart\nCODE:\n```\n  void _launchAndroidActivity() {\n    platformMethodChannel.invokeMethod(\n      // Note: You can change this value, but it must match\n      // the `call.method` value in the next section.\n      'launchActivity',\n\n      // Note: You can pass any primitive data types you like.\n      // To pass complex types, use package:pigeon to generate\n      // matching Dart and Kotlin classes that share serialization logic.\n      {'message': 'Hello from Flutter'},\n    );\n  }\n```\n\n----------------------------------------\n\nTITLE: Remove AnimatedSize.vsync - Dart\nDESCRIPTION: This code snippet demonstrates removing the `vsync` parameter from `AnimatedSize`. The `vsync` parameter is no longer necessary because `AnimatedSize` was converted to a `StatefulWidget` and now handles vsync internally, preventing memory leaks.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/3-7-deprecations.md#_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nAnimatedSize(\n  vsync: this,\n  // ...\n);\n```\n\n----------------------------------------\n\nTITLE: Updating and Printing Updated Dog\nDESCRIPTION: This snippet updates the `age` of the `fido` `Dog` instance, calls the `updateDog` function to persist the changes in the SQLite database, and then prints the updated list of dogs from the database to the console.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/persistence/sqlite.md#_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\n// Update Fido's age and save it to the database.\nfido = Dog(id: fido.id, name: fido.name, age: fido.age + 7);\nawait updateDog(fido);\n\n// Print the updated results.\nprint(await dogs()); // Prints Fido with age 42.\n```\n\n----------------------------------------\n\nTITLE: Pushing Route and Awaiting Result\nDESCRIPTION: This snippet demonstrates how to push a named route and await a result from it.  The Navigator.pushNamed function returns a Future, which resolves when the pushed route is popped.  The result passed to Navigator.pop is then available.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/uikit-devs.md#_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nObject? coordinates = await Navigator.of(context).pushNamed('/location');\n```\n\n----------------------------------------\n\nTITLE: Interactive TextField Change Example - Flutter\nDESCRIPTION: This complete example demonstrates how to create a Flutter app with two text fields, handling changes to the text using both `onChanged` callback and `TextEditingController`. It includes initializing, listening, and disposing the controller, along with printing the text values on changes.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/forms/text-field-changes.md#_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\n\nvoid main() => runApp(const MyApp());\n\nclass MyApp extends StatelessWidget {\n  const MyApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return const MaterialApp(\n      title: 'Retrieve Text Input',\n      home: MyCustomForm(),\n    );\n  }\n}\n\n// Define a custom Form widget.\nclass MyCustomForm extends StatefulWidget {\n  const MyCustomForm({super.key});\n\n  @override\n  State<MyCustomForm> createState() => _MyCustomFormState();\n}\n\n// Define a corresponding State class.\n// This class holds data related to the Form.\nclass _MyCustomFormState extends State<MyCustomForm> {\n  // Create a text controller and use it to retrieve the current value\n  // of the TextField.\n  final myController = TextEditingController();\n\n  @override\n  void initState() {\n    super.initState();\n\n    // Start listening to changes.\n    myController.addListener(_printLatestValue);\n  }\n\n  @override\n  void dispose() {\n    // Clean up the controller when the widget is removed from the widget tree.\n    // This also removes the _printLatestValue listener.\n    myController.dispose();\n    super.dispose();\n  }\n\n  void _printLatestValue() {\n    final text = myController.text;\n    print('Second text field: $text (${text.characters.length})');\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: const Text('Retrieve Text Input')),\n      body: Padding(\n        padding: const EdgeInsets.all(16),\n        child: Column(\n          children: [\n            TextField(\n              onChanged: (text) {\n                print('First text field: $text (${text.characters.length})');\n              },\n            ),\n            TextField(controller: myController),\n          ],\n        ),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Flutter App setup - Dart\nDESCRIPTION: Shows the basic structure of a Flutter app, starting with the `main` function and the `runApp` function. The `runApp` function takes an instance of your app widget, which is typically a `MaterialApp`.  The example includes defining a `MyApp` StatelessWidget and a `HomePage` StatelessWidget.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/compose-devs.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() {\n  runApp(const MyApp());\n}\n\n```\n\nLANGUAGE: dart\nCODE:\n```\nclass MyApp extends StatelessWidget {\n  const MyApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return const MaterialApp(\n      home: HomePage(),\n    );\n  }\n}\n```\n\nLANGUAGE: dart\nCODE:\n```\nclass HomePage extends StatelessWidget {\n  const HomePage({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return const Scaffold(\n      body: Center(\n        child: Text(\n          'Hello, World!',\n        ),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Routes (Android & iOS)\nDESCRIPTION: This code defines two basic routes, `FirstRoute` and `SecondRoute`, using `StatelessWidget`. Each route displays an `AppBar` and a button.  Tapping the button in `FirstRoute` should navigate to `SecondRoute`, and tapping the button in `SecondRoute` should navigate back to `FirstRoute`.  This snippet sets up the basic UI structure but lacks the actual navigation logic.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/navigation/navigation-basics.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nclass FirstRoute extends StatelessWidget {\n  const FirstRoute({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: const Text('First Route')),\n      body: Center(\n        child: ElevatedButton(\n          child: const Text('Open route'),\n          onPressed: () {\n            // Navigate to second route when tapped.\n          },\n        ),\n      ),\n    );\n  }\n}\n\nclass SecondRoute extends StatelessWidget {\n  const SecondRoute({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: const Text('Second Route')),\n      body: Center(\n        child: ElevatedButton(\n          onPressed: () {\n            // Navigate back to first route when tapped.\n          },\n          child: const Text('Go back!'),\n        ),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: TextButton with foreground color override in Dart\nDESCRIPTION: This snippet demonstrates how to override the default foreground color of a TextButton using the ButtonStyle and MaterialStateProperty.all method.  It sets the text color to blue for all states of the button.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/buttons.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nTextButton(\n  style: ButtonStyle(\n    foregroundColor: MaterialStateProperty.all<Color>(Colors.blue),\n  ),\n  onPressed: () { },\n  child: Text('TextButton'),\n)\n```\n\n----------------------------------------\n\nTITLE: Creating the Dogs Table\nDESCRIPTION: This snippet demonstrates how to create a table named 'dogs' in an SQLite database using the `onCreate` callback of the `openDatabase()` function. The table has three columns: 'id' (INTEGER, PRIMARY KEY), 'name' (TEXT), and 'age' (INTEGER). The version parameter is set to 1, triggering the onCreate function when the database is first created or when the version number increases.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/persistence/sqlite.md#_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nfinal database = openDatabase(\n  // Set the path to the database. Note: Using the `join` function from the\n  // `path` package is best practice to ensure the path is correctly\n  // constructed for each platform.\n  join(await getDatabasesPath(), 'doggie_database.db'),\n  // When the database is first created, create a table to store dogs.\n  onCreate: (db, version) {\n    // Run the CREATE TABLE statement on the database.\n    return db.execute(\n      'CREATE TABLE dogs(id INTEGER PRIMARY KEY, name TEXT, age INTEGER)',\n    );\n  },\n  // Set the version. This executes the onCreate function and provides a\n  // path to perform database upgrades and downgrades.\n  version: 1,\n);\n```\n\n----------------------------------------\n\nTITLE: Building an App Bundle with Flutter CLI\nDESCRIPTION: This snippet demonstrates how to build a release app bundle using the Flutter CLI. Running this command generates an .aab file suitable for uploading to the Google Play Store. The resulting app bundle supports multiple ABIs by default.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/deployment/android.md#_snippet_10\n\nLANGUAGE: none\nCODE:\n```\nflutter build appbundle\n```\n\n----------------------------------------\n\nTITLE: Get Battery Level - Dart\nDESCRIPTION: Asynchronously invokes the 'getBatteryLevel' method on the platform channel and updates the UI with the result. It uses a try-catch block to handle potential `PlatformException` errors, and calls `setState` to update the `_batteryLevel` variable, triggering a UI rebuild.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/platform-integration/platform-channels.md#_snippet_2\n\nLANGUAGE: Dart\nCODE:\n```\n// Get battery level.\nString _batteryLevel = 'Unknown battery level.';\n\nFuture<void> _getBatteryLevel() async {\n  String batteryLevel;\n  try {\n    final result = await platform.invokeMethod<int>('getBatteryLevel');\n    batteryLevel = 'Battery level at $result % .';\n  } on PlatformException catch (e) {\n    batteryLevel = \"Failed to get battery level: '${e.message}'.\";\n  }\n\n  setState(() {\n    _batteryLevel = batteryLevel;\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating from `MediaQuery.of` with `nullOk: true` in Dart\nDESCRIPTION: This snippet demonstrates how to convert a `MediaQuery.of` call with `nullOk: true` to use `MediaQuery.maybeOf` instead, which returns a nullable `MediaQueryData` object. This change eliminates the need for the `nullOk` parameter and provides a more explicit way to handle potential null values.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/eliminating-nullok-parameters.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nMediaQueryData? data = MediaQuery.of(context, nullOk: true);\n```\n\nLANGUAGE: dart\nCODE:\n```\nMediaQueryData? data = MediaQuery.maybeOf(context);\n```\n\n----------------------------------------\n\nTITLE: Navigating to Second Route (Android)\nDESCRIPTION: This snippet shows how to navigate from the `FirstRoute` to the `SecondRoute` using `Navigator.push()` and `MaterialPageRoute`.  `MaterialPageRoute` provides a platform-specific transition animation for Android. The `builder` parameter creates an instance of the `SecondRoute` to be displayed.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/navigation/navigation-basics.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\n// Within the `FirstRoute` widget:\nonPressed: () {\n  Navigator.push(\n    context,\n    MaterialPageRoute(builder: (context) => const SecondRoute()),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Shimmer Gradient Definition in Dart\nDESCRIPTION: This code defines a linear gradient named `_shimmerGradient` for the shimmer effect.  It specifies the colors, stops, begin and end alignments, and the tile mode for the gradient. The gradient is used to create the shimmering effect on the loading placeholders.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/effects/shimmer-loading.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nconst _shimmerGradient = LinearGradient(\n  colors: [Color(0xFFEBEBF4), Color(0xFFF4F4F4), Color(0xFFEBEBF4)],\n  stops: [0.1, 0.3, 0.4],\n  begin: Alignment(-1.0, -0.3),\n  end: Alignment(1.0, 0.3),\n  tileMode: TileMode.clamp,\n);\n\n```\n\n----------------------------------------\n\nTITLE: GetUserProfile with Fallback in Dart\nDESCRIPTION: Retrieves a UserProfile, first attempting to fetch it from the API and, if that fails, falling back to the local database. If neither source has the profile, it throws an error. This approach provides basic offline support by using the database as a backup.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/app-architecture/design-patterns/offline-first.md#_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nFuture<UserProfile> getUserProfile() async {\n  try {\n    // Fetch the user profile from the API\n    final apiUserProfile = await _apiClientService.getUserProfile();\n    //Update the database with the API result\n    await _databaseService.updateUserProfile(apiUserProfile);\n\n    return apiUserProfile;\n  } catch (e) {\n    // If the network call failed,\n    // fetch the user profile from the database\n    final databaseUserProfile = await _databaseService.fetchUserProfile();\n\n    // If the user profile was never fetched from the API\n    // it will be null, so throw an  error\n    if (databaseUserProfile != null) {\n      return databaseUserProfile;\n    } else {\n      // Handle the error\n      throw Exception('User profile not found');\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Data and Decoding JSON in Dart\nDESCRIPTION: This Dart code snippet demonstrates how to fetch data from a URL, decode the returned JSON, and print the data to the console. It uses the `http` package for making HTTP requests and the `dart:convert` library for JSON decoding. It also showcases the use of classes, asynchronous functions, and basic error handling.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/fundamentals/dart.md#_snippet_0\n\nLANGUAGE: Dart\nCODE:\n```\nimport 'dart:convert';\nimport 'package:http/http.dart' as http;\n\nclass Package {\n  final String name;\n  final String latestVersion; \n  final String? description;\n\n  Package(this.name, this.latestVersion, {this.description});\n\n  @override\n  String toString() {\n    return 'Package{name: $name, latestVersion: $latestVersion, description: $description}';\n  }\n}\n\nvoid main() async {\n  final httpPackageUrl = Uri.https('dart.dev', '/f/packages/http.json');\n  final httpPackageResponse = await http.get(httpPackageUrl);\n  if (httpPackageResponse.statusCode != 200) {\n    print('Failed to retrieve the http package!');\n    return;\n  }\n  final json = jsonDecode(httpPackageResponse.body);\n  final package = Package(\n    json['name'],\n    json['latestVersion'],\n    description: json['description'],\n  );\n  print(package);\n}\n```\n\n----------------------------------------\n\nTITLE: Interactive Drawer Example - Dart\nDESCRIPTION: This example provides a complete interactive demonstration of a drawer within a Scaffold.  It includes a list of selectable items, a drawer header, and updates the main content area based on the selected item. The drawer closes after an item is tapped using `Navigator.pop(context)`.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/design/drawer.md#_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\n\nvoid main() => runApp(const MyApp());\n\nclass MyApp extends StatelessWidget {\n  const MyApp({super.key});\n\n  static const appTitle = 'Drawer Demo';\n\n  @override\n  Widget build(BuildContext context) {\n    return const MaterialApp(\n      title: appTitle,\n      home: MyHomePage(title: appTitle),\n    );\n  }\n}\n\nclass MyHomePage extends StatefulWidget {\n  const MyHomePage({super.key, required this.title});\n\n  final String title;\n\n  @override\n  State<MyHomePage> createState() => _MyHomePageState();\n}\n\nclass _MyHomePageState extends State<MyHomePage> {\n  int _selectedIndex = 0;\n  static const TextStyle optionStyle = TextStyle(\n    fontSize: 30,\n    fontWeight: FontWeight.bold,\n  );\n  static const List<Widget> _widgetOptions = <Widget>[\n    Text('Index 0: Home', style: optionStyle),\n    Text('Index 1: Business', style: optionStyle),\n    Text('Index 2: School', style: optionStyle),\n  ];\n\n  void _onItemTapped(int index) {\n    setState(() {\n      _selectedIndex = index;\n    });\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: Text(widget.title),\n        leading: Builder(\n          builder: (context) {\n            return IconButton(\n              icon: const Icon(Icons.menu),\n              onPressed: () {\n                Scaffold.of(context).openDrawer();\n              },\n            );\n          },\n        ),\n      ),\n      body: Center(child: _widgetOptions[_selectedIndex]),\n      drawer: Drawer(\n        // Add a ListView to the drawer. This ensures the user can scroll\n        // through the options in the drawer if there isn't enough vertical\n        // space to fit everything.\n        child: ListView(\n          // Important: Remove any padding from the ListView.\n          padding: EdgeInsets.zero,\n          children: [\n            const DrawerHeader(\n              decoration: BoxDecoration(color: Colors.blue),\n              child: Text('Drawer Header'),\n            ),\n            ListTile(\n              title: const Text('Home'),\n              selected: _selectedIndex == 0,\n              onTap: () {\n                // Update the state of the app\n                _onItemTapped(0);\n                // Then close the drawer\n                Navigator.pop(context);\n              },\n            ),\n            ListTile(\n              title: const Text('Business'),\n              selected: _selectedIndex == 1,\n              onTap: () {\n                // Update the state of the app\n                _onItemTapped(1);\n                // Then close the drawer\n                Navigator.pop(context);\n              },\n            ),\n            ListTile(\n              title: const Text('School'),\n              selected: _selectedIndex == 2,\n              onTap: () {\n                // Update the state of the app\n                _onItemTapped(2);\n                // Then close the drawer\n                Navigator.pop(context);\n              },\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Slider Widget in Flutter\nDESCRIPTION: This code demonstrates how to implement a Slider widget in Flutter to adjust a volume value. It sets the value, max, divisions, and label properties to configure the slider. The onChanged callback updates the current volume value when the slider handle is moved, updating the UI using setState.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/fundamentals/user-input.md#_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\ndouble _currentVolume = 1;\n\n@override\nWidget build(BuildContext context) {\n  return Slider(\n    value: _currentVolume,\n    max: 5,\n    divisions: 5,\n    label: _currentVolume.toString(),\n    onChanged: (double value) {\n      setState(() {\n        _currentVolume = value;\n      });\n    },\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Online-Only User Profile Update in Flutter\nDESCRIPTION: This code snippet illustrates how to update a user profile by first attempting to send the updated data to an API service. If the API call is successful, the data is then stored in the local database. This ensures data consistency between the server and the local database but requires the user to be online for write operations.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/app-architecture/design-patterns/offline-first.md#_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> updateUserProfile(UserProfile userProfile) async {\n  try {\n    // Update the API with the user profile\n    await _apiClientService.putUserProfile(userProfile);\n\n    // Only if the API call was successful\n    // update the database with the user profile\n    await _databaseService.updateUserProfile(userProfile);\n  } catch (e) {\n    // Handle the error\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Shared Preferences Service - Flutter\nDESCRIPTION: The SharedPreferencesService encapsulates the SharedPreferences plugin, abstracting away the third-party dependency.  It provides methods (setDarkMode and isDarkMode) for storing and retrieving the dark mode setting using the SharedPreferences API. It handles the details of using setBool() and getBool().\nSOURCE: https://github.com/flutter/website/blob/main/src/content/app-architecture/design-patterns/key-value-data.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nclass SharedPreferencesService {\n  static const String _kDarkMode = 'darkMode';\n\n  Future<void> setDarkMode(bool value) async {\n    final prefs = await SharedPreferences.getInstance();\n    await prefs.setBool(_kDarkMode, value);\n  }\n\n  Future<bool> isDarkMode() async {\n    final prefs = await SharedPreferences.getInstance();\n    return prefs.getBool(_kDarkMode) ?? false;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying the \"Copy\" button's callback in Flutter context menu\nDESCRIPTION: This code shows how to modify the callback of the 'Copy' button in a Flutter TextField's context menu. It finds the 'Copy' button, replaces its onPressed callback with a new one that shows an AlertDialog in addition to performing the original copy action. It utilizes the contextMenuBuilder for customization.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/context-menus.md#_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nTextField(\n  contextMenuBuilder: (BuildContext context, EditableTextState editableTextState) {\n    final List<ContextMenuButtonItem> buttonItems =\n        editableTextState.contextMenuButtonItems;\n    final int copyButtonIndex = buttonItems.indexWhere(\n      (ContextMenuButtonItem buttonItem) {\n        return buttonItem.type == ContextMenuButtonType.copy;\n      },\n    );\n    if (copyButtonIndex >= 0) {\n      final ContextMenuButtonItem copyButtonItem =\n          buttonItems[copyButtonIndex];\n      buttonItems[copyButtonIndex] = copyButtonItem.copyWith(\n        onPressed: () {\n          copyButtonItem.onPressed();\n          Navigator.of(context).push(\n            DialogRoute<void>(\n              context: context,\n              builder: (BuildContext context) =>\n                const AlertDialog(\n                  title: Text('Copied, but also showed this dialog.'),\n                ),\n            );\n          )\n        },\n      );\n    }\n    return AdaptiveTextSelectionToolbar.buttonItems(\n      anchors: editableTextState.contextMenuAnchors,\n      buttonItems: buttonItems,\n    );\n  },\n)\n```\n\n----------------------------------------\n\nTITLE: Get Available Cameras (Dart)\nDESCRIPTION: Initializes plugin services, retrieves a list of available cameras on the device, and selects the first camera in the list. This code snippet prepares the application to use a specific camera for capturing images or videos.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/plugins/picture-using-camera.md#_snippet_2\n\nLANGUAGE: Dart\nCODE:\n```\n// Ensure that plugin services are initialized so that `availableCameras()`\n// can be called before `runApp()`\nWidgetsFlutterBinding.ensureInitialized();\n\n// Obtain a list of the available cameras on the device.\nfinal cameras = await availableCameras();\n\n// Get a specific camera from the list of available cameras.\nfinal firstCamera = cameras.first;\n```\n\n----------------------------------------\n\nTITLE: Setting Uniforms in Dart - Flutter\nDESCRIPTION: This snippet shows how to initialize uniform values in Dart for the GLSL uniform declarations. It uses `FragmentShader.setFloat` to set the float uniforms and `FragmentShader.setImageSampler` to set the sampler2D uniform. The indices for `setFloat` are determined by the order of declaration in the GLSL code, excluding sampler2D.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/design/graphics/fragment-shaders.md#_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nvoid updateShader(FragmentShader shader, Color color, Image image) {\n  shader.setFloat(0, 23);  // uScale\n  shader.setFloat(1, 114); // uMagnitude x\n  shader.setFloat(2, 83);  // uMagnitude y\n\n  // Convert color to premultiplied opacity.\n  shader.setFloat(3, color.red / 255 * color.opacity);   // uColor r\n  shader.setFloat(4, color.green / 255 * color.opacity); // uColor g\n  shader.setFloat(5, color.blue / 255 * color.opacity);  // uColor b\n  shader.setFloat(6, color.opacity);                     // uColor a\n\n  // Initialize sampler uniform.\n  shader.setImageSampler(0, image);\n }\n```\n\n----------------------------------------\n\nTITLE: Updating App Version in pubspec.yaml (YAML)\nDESCRIPTION: This snippet illustrates how to update the app's version number and build number within the `pubspec.yaml` file. This is important for managing app releases and updates on app stores. The version number follows the semantic versioning format (e.g., 1.0.0+1).\nSOURCE: https://github.com/flutter/website/blob/main/src/content/deployment/android.md#_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nversion: 1.0.0+1\n```\n\n----------------------------------------\n\nTITLE: Generating Routes Dynamically in Dart\nDESCRIPTION: This snippet implements the `onGenerateRoute` function for the top-level Navigator. It checks the incoming route name and returns the appropriate widget based on whether it matches a top-level route or starts with the setup flow prefix. The `SetupFlow` widget receives the sub-route for handling its own navigation.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/effects/nested-nav.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nonGenerateRoute: (settings) {\n  final Widget page;\n  if (settings.name == routeHome) {\n    page = const HomeScreen();\n  } else if (settings.name == routeSettings) {\n    page = const SettingsScreen();\n  } else if (settings.name!.startsWith(routePrefixDeviceSetup)) {\n    final subRoute = settings.name!.substring(\n      routePrefixDeviceSetup.length,\n    );\n    page = SetupFlow(setupPageRoute: subRoute);\n  } else {\n    throw Exception('Unknown route: ${settings.name}');\n  }\n\n  return MaterialPageRoute<dynamic>(\n    builder: (context) {\n      return page;\n    },\n    settings: settings,\n  );\n},\n```\n\n----------------------------------------\n\nTITLE: Loading Todos in TodoListViewModel in Dart\nDESCRIPTION: This snippet shows the `_load` method in `TodoListViewModel`, which fetches a list of `Todo` items using the `TodoRepository`. It handles both successful and error scenarios and updates the UI by calling `notifyListeners()`.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/app-architecture/design-patterns/sql.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nList<Todo> _todos = [];\n\nList<Todo> get todos => _todos;\n\nFuture<Result<void>> _load() async {\n  try {\n    final result = await _todoRepository.fetchTodos();\n    switch (result) {\n      case Ok<List<Todo>>():\n        _todos = result.value;\n        return Result.ok(null);\n      case Error():\n        return Result.error(result.error);\n    }\n  } on Exception catch (e) {\n    return Result.error(e);\n  } finally {\n    notifyListeners();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initialize Mobile Ads SDK in Flutter\nDESCRIPTION: This code snippet shows how to initialize the Mobile Ads SDK in a Flutter application. Initialization should occur early in the app's lifecycle, typically within the `main` function. This ensures the SDK is ready before any ad requests are made. `WidgetsFlutterBinding.ensureInitialized()` is called to ensure that Flutter's widget binding is initialized before using any plugins that require it.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/plugins/google-mobile-ads.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() async {\n  WidgetsFlutterBinding.ensureInitialized();\n  unawaited(MobileAds.instance.initialize());\n\n  runApp(const MyApp());\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Ratings Row in Flutter\nDESCRIPTION: This code snippet demonstrates how to create a row of star icons and a text widget to display ratings information. It utilizes the `Row` widget to arrange the stars horizontally and the `Container` widget to add padding and overall structure. The code defines a `stars` variable to hold the row of star icons and then uses it within the `ratings` container.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/layout/index.md#_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\nfinal stars = Row(\n  mainAxisSize: MainAxisSize.min,\n  children: [\n    Icon(Icons.star, color: Colors.green[500]),\n    Icon(Icons.star, color: Colors.green[500]),\n    Icon(Icons.star, color: Colors.green[500]),\n    const Icon(Icons.star, color: Colors.black),\n    const Icon(Icons.star, color: Colors.black),\n  ],\n);\n\nfinal ratings = Container(\n  padding: const EdgeInsets.all(20),\n  child: Row(\n    mainAxisAlignment: MainAxisAlignment.spaceEvenly,\n    children: [\n      stars,\n      const Text(\n        '170 Reviews',\n        style: TextStyle(\n          color: Colors.black,\n          fontWeight: FontWeight.w800,\n          fontFamily: 'Roboto',\n          letterSpacing: 0.5,\n          fontSize: 20,\n        ),\n      ),\n    ],\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Photo Widget Implementation in Dart\nDESCRIPTION: This Dart code defines a Photo widget to display an image with a tap interaction. It uses Material and InkWell to handle taps and apply a slightly opaque background color for images with transparency, making transitions more visible.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/animations/hero-animations.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nclass Photo extends StatelessWidget {\n  const Photo({super.key, required this.photo, this.color, this.onTap});\n\n  final String photo;\n  final Color? color;\n  final VoidCallback onTap;\n\n  Widget build(BuildContext context) {\n    return [!Material(!]\n      // Slightly opaque color appears where the image has transparency.\n      [!color: Theme.of(context).primaryColor.withValues(alpha: 0.25),!]\n      child: [!InkWell(!]\n        onTap: [!onTap,!]\n        child: [!Image.asset(!]\n          photo,\n          fit: BoxFit.contain,\n        ),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Window Creation in main.cpp (C++)\nDESCRIPTION: This code snippet demonstrates how to modify the default window creation in the `main.cpp` file of a Flutter Windows application. It allows you to set the window title, initial size, and location by adjusting the `origin` and `size` parameters of the `Win32Window` class.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/platform-integration/windows/building.md#_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nWin32Window::Point origin(10, 10);\nWin32Window::Size size(1280, 720);\nif (!window.CreateAndShow(L\"myapp\", origin, size))\n{\n    return EXIT_FAILURE;\n}\n```\n\n----------------------------------------\n\nTITLE: Using CallbackAction in Dart\nDESCRIPTION: This snippet shows how to use the `CallbackAction` class as a more concise way to define an action in Flutter. Instead of creating a new class, it uses a lambda expression to define the action's behavior directly in the constructor, invoking the `selectAll()` method on the model when the action is triggered. This avoids the need for a separate class definition.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/interactivity/actions-and-shortcuts.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nCallbackAction(onInvoke: (intent) => model.selectAll());\n```\n\n----------------------------------------\n\nTITLE: Displaying a progress indicator based on the running state\nDESCRIPTION: This code shows how to use the `running` state in a `ListenableBuilder` to display a `CircularProgressIndicator` while an action is in progress. The `ListenableBuilder` rebuilds the widget when the `running` state changes. Requires Flutter SDK.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/app-architecture/design-patterns/command.md#_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nListenableBuilder(\n  listenable: widget.viewModel,\n  builder: (context, _) {\n    if (widget.viewModel.running) {\n      return const Center(child: CircularProgressIndicator());\n    }\n    // ···\n  },\n)\n```\n\n----------------------------------------\n\nTITLE: Defining a SelectAllAction in Dart\nDESCRIPTION: This code snippet demonstrates how to define a custom action in Flutter by extending the `Action<Intent>` class. It defines a `SelectAllAction` that takes a `Model` instance in its constructor and invokes the `selectAll()` method on that model when the action is invoked. This action is associated with the `SelectAllIntent`.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/interactivity/actions-and-shortcuts.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nclass SelectAllAction extends Action<SelectAllIntent> {\n  SelectAllAction(this.model);\n\n  final Model model;\n\n  @override\n  void invoke(covariant SelectAllIntent intent) => model.selectAll();\n}\n```\n\n----------------------------------------\n\nTITLE: Define TypingIndicator Widget in Dart\nDESCRIPTION: Defines a stateful `TypingIndicator` widget that accepts a boolean to control visibility, bubble color, and flashing circle colors. The widget's state is managed by `_TypingIndicatorState`.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/effects/typing-indicator.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nclass TypingIndicator extends StatefulWidget {\n  const TypingIndicator({\n    super.key,\n    this.showIndicator = false,\n    this.bubbleColor = const Color(0xFF646b7f),\n    this.flashingCircleDarkColor = const Color(0xFF333333),\n    this.flashingCircleBrightColor = const Color(0xFFaec1dd),\n  });\n\n  final bool showIndicator;\n  final Color bubbleColor;\n  final Color flashingCircleDarkColor;\n  final Color flashingCircleBrightColor;\n\n  @override\n  State<TypingIndicator> createState() => _TypingIndicatorState();\n}\n\nclass _TypingIndicatorState extends State<TypingIndicator> {\n  @override\n  Widget build(BuildContext context) {\n    // TODO:\n    return const SizedBox();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Button Tap Callbacks in Flutter Download Button\nDESCRIPTION: This snippet shows the implementation of tap callbacks for a Flutter download button. It defines the `DownloadButton` StatelessWidget with properties for handling download, cancel, and open actions. The `_onPressed` method handles the different states of the download and invokes the appropriate callback function.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/effects/download-button.md#_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\n@immutable\nclass DownloadButton extends StatelessWidget {\n  const DownloadButton({\n    super.key,\n    required this.status,\n    this.downloadProgress = 0,\n    required this.onDownload,\n    required this.onCancel,\n    required this.onOpen,\n    this.transitionDuration = const Duration(milliseconds: 500),\n  });\n\n  final DownloadStatus status;\n  final double downloadProgress;\n  final VoidCallback onDownload;\n  final VoidCallback onCancel;\n  final VoidCallback onOpen;\n  final Duration transitionDuration;\n\n  bool get _isDownloading => status == DownloadStatus.downloading;\n\n  bool get _isFetching => status == DownloadStatus.fetchingDownload;\n\n  bool get _isDownloaded => status == DownloadStatus.downloaded;\n\n  void _onPressed() {\n    switch (status) {\n      case DownloadStatus.notDownloaded:\n        onDownload();\n      case DownloadStatus.fetchingDownload:\n        // do nothing.\n        break;\n      case DownloadStatus.downloading:\n        onCancel();\n      case DownloadStatus.downloaded:\n        onOpen();\n    }\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return GestureDetector(\n      onTap: _onPressed,\n      child: const Stack(\n        children: [\n          /* ButtonShapeWidget and progress indicator */\n        ],\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Fake Message Widget in Flutter\nDESCRIPTION: This snippet defines a `FakeMessage` StatelessWidget in Flutter. It creates a simple rectangular container with rounded corners and a grey background color. The height of the container is determined by the `isBig` parameter, allowing for different sized placeholder messages.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/effects/typing-indicator.md#_snippet_6\n\nLANGUAGE: Dart\nCODE:\n```\nclass FakeMessage extends StatelessWidget {\n  const FakeMessage({super.key, required this.isBig});\n\n  final bool isBig;\n\n  @override\n  Widget build(BuildContext context) {\n    return Container(\n      margin: const EdgeInsets.symmetric(vertical: 8, horizontal: 24),\n      height: isBig ? 128 : 36,\n      decoration: BoxDecoration(\n        borderRadius: const BorderRadius.all(Radius.circular(8)),\n        color: Colors.grey.shade300,\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: ViewModel Constructor with Private Repository Injection (Dart)\nDESCRIPTION: This code demonstrates how a view model receives injected repositories as constructor parameters and stores them as private final fields. This helps to control access to the repositories from the view and maintain separation of concerns. The injected dependencies `BookingRepository` and `UserRepository` are required parameters.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/app-architecture/case-study/dependency-injection.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nclass HomeViewModel extends ChangeNotifier {\n  HomeViewModel({\n    required BookingRepository bookingRepository,\n    required UserRepository userRepository,\n  })  : _bookingRepository = bookingRepository,\n        _userRepository = userRepository;\n\n  final BookingRepository _bookingRepository;\n  final UserRepository _userRepository;\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Floating Navigation Bar with Cupertino widgets in Flutter\nDESCRIPTION: This code snippet demonstrates how to implement a floating navigation bar using Cupertino widgets in Flutter. It uses `CupertinoSliverNavigationBar` within a `CustomScrollView` to create a scrollable view with a floating navigation bar. The largeTitle property is used to display a large title in the navigation bar.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/lists/floating-app-bar.md#_snippet_7\n\nLANGUAGE: Dart\nCODE:\n```\nimport 'package:flutter/cupertino.dart';\n\nvoid main() => runApp(const MyApp());\n\nclass MyApp extends StatelessWidget {\n  const MyApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    const title = 'Floating Navigation Bar';\n\n    return CupertinoApp(\n      title: title,\n      home: CupertinoPageScaffold(\n        // No navigation bar provided to CupertinoPageScaffold,\n        // only a body with a CustomScrollView.\n        child: CustomScrollView(\n          slivers: [\n            // Add the navigation bar to the CustomScrollView.\n            const CupertinoSliverNavigationBar(\n              // Provide a standard title.\n              largeTitle: Text(title),\n            ),\n            // Next, create a SliverList\n            SliverList.builder(\n              // The builder function returns a CupertinoListTile with a title\n              // that displays the index of the current item.\n              itemBuilder:\n                  (context, index) =>\n                      CupertinoListTile(title: Text('Item #$index')),\n              // Builds 50 CupertinoListTile\n              itemCount: 50,\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Improved Delete with Album Response in Dart\nDESCRIPTION: This snippet shows how to improve the `deleteAlbum` function by returning an `Album` object. If the server returns a 200 OK, an empty `Album` object is returned. Otherwise, an exception is thrown. This ensures the `FutureBuilder` rebuilds and handles successful deletion without errors.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/networking/delete-data.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nFuture<Album> deleteAlbum(String id) async {\n  final http.Response response = await http.delete(\n    Uri.parse('https://jsonplaceholder.typicode.com/albums/$id'),\n    headers: <String, String>{\n      'Content-Type': 'application/json; charset=UTF-8',\n    },\n  );\n\n  if (response.statusCode == 200) {\n    // If the server did return a 200 OK response,\n    // then return an empty Album. After deleting,\n    // you'll get an empty JSON `{}` response.\n    // Don't return `null`, otherwise `snapshot.hasData`\n    // will always return false on `FutureBuilder`.\n    return Album.empty();\n  } else {\n    // If the server did not return a \"200 OK response\",\n    // then throw an exception.\n    throw Exception('Failed to delete album.');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Widget for Testing in Flutter (Dart)\nDESCRIPTION: This code snippet defines a `loadWidget` method that prepares the widget tree for testing the `HomeScreen`. It uses `ChangeNotifierProvider` and `Provider` to inject fake repositories into the widget tree. It calls a generalized `testApp` method for creating the necessary testing environment.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/app-architecture/case-study/testing.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nvoid loadWidget(WidgetTester tester) async {\n  await testApp(\n    tester,\n    ChangeNotifierProvider.value(\n      value: FakeAuthRepository() as AuthRepository,\n      child: Provider.value(\n        value: FakeItineraryConfigRepository() as ItineraryConfigRepository,\n        child: HomeScreen(viewModel: viewModel),\n      ),\n    ),\n    goRouter: goRouter,\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing FlutterMethodChannel in AppDelegate.swift (Swift)\nDESCRIPTION: This code initializes a FlutterMethodChannel in the AppDelegate.swift file for the iOS platform. It sets up a method call handler for handling communication from the Flutter side. The channel name is 'samples.flutter.dev/battery'.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/platform-integration/platform-channels.md#_snippet_12\n\nLANGUAGE: Swift\nCODE:\n```\n@UIApplicationMain\n@objc class AppDelegate: FlutterAppDelegate {\n  override func application(\n    _ application: UIApplication,\n    didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {\n\n    let controller : FlutterViewController = window?.rootViewController as! FlutterViewController\n    let batteryChannel = FlutterMethodChannel(name: \"samples.flutter.dev/battery\",\n                                              binaryMessenger: controller.binaryMessenger)\n    batteryChannel.setMethodCallHandler({\n      [weak self] (call: FlutterMethodCall, result: FlutterResult) -> Void in\n      // This method is invoked on the UI thread.\n      // Handle battery messages.\n    })\n\n    GeneratedPluginRegistrant.register(with: self)\n    return super.application(application, didFinishLaunchingWithOptions: launchOptions)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Present FlutterViewController in UIKit (ObjC)\nDESCRIPTION: Presents a FlutterViewController in a UIKit application using Objective-C.  This creates a FlutterViewController with a default project, nib name, and bundle and presents it modally. This demonstrates interoperability with existing Objective-C codebases.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/add-to-app/ios/add-flutter-screen.md#_snippet_8\n\nLANGUAGE: Objective-C\nCODE:\n```\n// Existing code omitted.\n- (void)showFlutter {\n  FlutterViewController *flutterViewController =\n      [[FlutterViewController alloc] initWithProject:nil nibName:nil bundle:nil];\n  [self presentViewController:flutterViewController animated:YES completion:nil];\n}\n@end\n```\n\n----------------------------------------\n\nTITLE: UserProfileViewModel Class in Dart\nDESCRIPTION: Defines a view model that interacts with the UserProfileRepository to manage and display user profile data. It uses `ChangeNotifier` to notify listeners (e.g., UI widgets) of data changes, enabling reactive updates to the user interface.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/app-architecture/design-patterns/offline-first.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nclass UserProfileViewModel extends ChangeNotifier {\n  // ···\n  final UserProfileRepository _userProfileRepository;\n\n  UserProfile? get userProfile => _userProfile;\n  // ···\n\n  /// Load the user profile from the database or the network\n  Future<void> load() async {\n    // ···\n  }\n\n  /// Save the user profile with the new name\n  Future<void> save(String newName) async {\n    // ···\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Portrait Orientation Test\nDESCRIPTION: This widget test verifies that the Flutter app displays two columns when in portrait mode. It pumps the `MyApp` widget, sets the screen size to a portrait orientation, and asserts that the `GridView` displays two columns using `SliverGridDelegateWithFixedCrossAxisCount`.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/testing/widget/orientation.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\n// Check if portrait mode displays correctly.\ntestWidgets('Displays 2 columns in portrait mode', (tester) async {\n  // Build the app.\n  await tester.pumpWidget(const MyApp());\n\n  // Change to portrait.\n  tester.view.physicalSize = const Size(600, 800);\n  tester.view.devicePixelRatio = 1.0;\n  addTearDown(() {\n    tester.view.resetPhysicalSize();\n  });\n  await tester.pump();\n\n  // Verify initial orientation is portrait.\n  final orientation =\n      MediaQuery.of(\n        tester.element(find.byType(OrientationList)),\n      ).orientation;\n  expect(orientation, Orientation.portrait);\n\n  // Verify there are only 2 columns in portrait mode.\n  final gridViewFinder = find.byType(GridView);\n  final gridView = tester.widget<GridView>(gridViewFinder);\n  final delegate =\n      gridView.gridDelegate as SliverGridDelegateWithFixedCrossAxisCount;\n  expect(delegate.crossAxisCount, 2);\n});\n```\n\n----------------------------------------\n\nTITLE: Add Camera Plugin Dependencies (Console)\nDESCRIPTION: Adds the camera, path_provider, and path packages as dependencies to the Flutter project using the flutter pub add command. These packages are essential for accessing the device camera, finding file paths, and creating platform-independent paths.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/plugins/picture-using-camera.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ flutter pub add camera path_provider path\n```\n\n----------------------------------------\n\nTITLE: Accessing Shared Preferences in Flutter\nDESCRIPTION: This code snippet demonstrates how to access and use Shared Preferences in a Flutter application for storing and retrieving simple key-value pairs. It initializes SharedPreferences, increments a counter, and saves the updated value. The shared_preferences plugin is a dependency.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/android-devs.md#_snippet_45\n\nLANGUAGE: Dart\nCODE:\n```\nimport 'dart:async';\nimport 'package:flutter/material.dart';\n\nimport 'package:shared_preferences/shared_preferences.dart';\n\nvoid main() {\n  runApp(\n    const MaterialApp(\n      home: Scaffold(\n        body: Center(\n          child: ElevatedButton(\n            onPressed: _incrementCounter,\n            child: Text('Increment Counter'),\n          ),\n        ),\n      ),\n    ),\n  );\n}\n\nFuture<void> _incrementCounter() async {\n  SharedPreferences prefs = await SharedPreferences.getInstance();\n  int counter = (prefs.getInt('counter') ?? 0) + 1;\n  await prefs.setInt('counter', counter);\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies - Dart\nDESCRIPTION: This snippet demonstrates importing the necessary dependencies in `play_session_screen.dart` for using Firebase Firestore and the FirestoreController. The `cloud_firestore` package provides the Firebase Firestore API, while `firestore_controller.dart` contains the custom FirestoreController class.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/games/firestore-multiplayer.md#_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:cloud_firestore/cloud_firestore.dart';\nimport '../multiplayer/firestore_controller.dart';\n```\n\n----------------------------------------\n\nTITLE: Interactive SnackBar Example in Flutter\nDESCRIPTION: This Flutter example showcases a SnackBar displayed upon pressing a button. It integrates the SnackBar with an action to undo a change, using ScaffoldMessenger to display the message.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/design/snackbars.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\n\nvoid main() => runApp(const SnackBarDemo());\n\nclass SnackBarDemo extends StatelessWidget {\n  const SnackBarDemo({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: 'SnackBar Demo',\n      home: Scaffold(\n        appBar: AppBar(title: const Text('SnackBar Demo')),\n        body: const SnackBarPage(),\n      ),\n    );\n  }\n}\n\nclass SnackBarPage extends StatelessWidget {\n  const SnackBarPage({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return Center(\n      child: ElevatedButton(\n        onPressed: () {\n          final snackBar = SnackBar(\n            content: const Text('Yay! A SnackBar!'),\n            action: SnackBarAction(\n              label: 'Undo',\n              onPressed: () {\n                // Some code to undo the change.\n              },\n            ),\n          );\n\n          // Find the ScaffoldMessenger in the widget tree\n          // and use it to show a SnackBar.\n          ScaffoldMessenger.of(context).showSnackBar(snackBar);\n        },\n        child: const Text('Show SnackBar'),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Centered Container with red color Flutter\nDESCRIPTION: This snippet creates a Center widget that contains a Container widget with red background color. Since the Container has no fixed size or child, it takes as much space as possible.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/layout/constraints.md#_snippet_36\n\nLANGUAGE: dart\nCODE:\n```\nCenter(child: Container(color: red))\n```\n\n----------------------------------------\n\nTITLE: ThemeData.primaryColorBrightness Migration (Dart)\nDESCRIPTION: Demonstrates how to migrate code that uses the deprecated `ThemeData.primaryColorBrightness` property. The property is removed, and the brightness is now extrapolated from `ThemeData.primaryColor` if `ThemeData.brightness` has not been explicitly provided. The code shows the before and after migration examples using Dart.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/3-10-deprecations.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nvar themeData = ThemeData(\n  primaryColorBrightness: Brightness.dark,\n);\n```\n\nLANGUAGE: dart\nCODE:\n```\nvar themeData = ThemeData(\n);\n```\n\n----------------------------------------\n\nTITLE: Router Push Route with go_router in Flutter\nDESCRIPTION: This snippet demonstrates navigation using the `go_router` package with the Router in Flutter. It uses `context.go('/second')` to navigate to a new route. The `go_router` package provides a declarative approach to routing, which is beneficial for complex navigation and deep linking scenarios, especially in web applications.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/navigation/index.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nchild: const Text('Open second screen'),\nonPressed: () => context.go('/second'),\n```\n\n----------------------------------------\n\nTITLE: Flutter Navigation with Arguments in Dart\nDESCRIPTION: This Flutter example demonstrates navigation between screens with arguments, showcasing two approaches: extracting arguments directly within a screen's build method and passing them through the onGenerateRoute function. It defines MaterialApp with routes and onGenerateRoute to handle navigation and argument passing. The code also includes HomeScreen, ExtractArgumentsScreen, PassArgumentsScreen and ScreenArguments class.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/navigation/navigate-with-arguments.md#_snippet_5\n\nLANGUAGE: Dart\nCODE:\n```\nimport 'package:flutter/material.dart';\n\nvoid main() => runApp(const MyApp());\n\nclass MyApp extends StatelessWidget {\n  const MyApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      routes: {\n        ExtractArgumentsScreen.routeName:\n            (context) => const ExtractArgumentsScreen(),\n      },\n      // Provide a function to handle named routes.\n      // Use this function to identify the named\n      // route being pushed, and create the correct\n      // Screen.\n      onGenerateRoute: (settings) {\n        // If you push the PassArguments route\n        if (settings.name == PassArgumentsScreen.routeName) {\n          // Cast the arguments to the correct\n          // type: ScreenArguments.\n          final args = settings.arguments as ScreenArguments;\n\n          // Then, extract the required data from\n          // the arguments and pass the data to the\n          // correct screen.\n          return MaterialPageRoute(\n            builder: (context) {\n              return PassArgumentsScreen(\n                title: args.title,\n                message: args.message,\n              );\n            },\n          );\n        }\n        // The code only supports\n        // PassArgumentsScreen.routeName right now.\n        // Other values need to be implemented if we\n        // add them. The assertion here will help remind\n        // us of that higher up in the call stack, since\n        // this assertion would otherwise fire somewhere\n        // in the framework.\n        assert(false, 'Need to implement ${settings.name}');\n        return null;\n      },\n      title: 'Navigation with Arguments',\n      home: const HomeScreen(),\n    );\n  }\n}\n\nclass HomeScreen extends StatelessWidget {\n  const HomeScreen({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: const Text('Home Screen')),\n      body: Center(\n        child: Column(\n          mainAxisAlignment: MainAxisAlignment.center,\n          children: [\n            // A button that navigates to a named route.\n            // The named route extracts the arguments\n            // by itself.\n            ElevatedButton(\n              onPressed: () {\n                // When the user taps the button,\n                // navigate to a named route and\n                // provide the arguments as an optional\n                // parameter.\n                Navigator.pushNamed(\n                  context,\n                  ExtractArgumentsScreen.routeName,\n                  arguments: ScreenArguments(\n                    'Extract Arguments Screen',\n                    'This message is extracted in the build method.',\n                  ),\n                );\n              },\n              child: const Text('Navigate to screen that extracts arguments'),\n            ),\n            // A button that navigates to a named route.\n            // For this route, extract the arguments in\n            // the onGenerateRoute function and pass them\n            // to the screen.\n            ElevatedButton(\n              onPressed: () {\n                // When the user taps the button, navigate\n                // to a named route and provide the arguments\n                // as an optional parameter.\n                Navigator.pushNamed(\n                  context,\n                  PassArgumentsScreen.routeName,\n                  arguments: ScreenArguments(\n                    'Accept Arguments Screen',\n                    'This message is extracted in the onGenerateRoute '\n                        'function.',\n                  ),\n                );\n              },\n              child: const Text('Navigate to a named that accepts arguments'),\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n}\n\n// A Widget that extracts the necessary arguments from\n// the ModalRoute.\nclass ExtractArgumentsScreen extends StatelessWidget {\n  const ExtractArgumentsScreen({super.key});\n\n  static const routeName = '/extractArguments';\n\n  @override\n  Widget build(BuildContext context) {\n    // Extract the arguments from the current ModalRoute\n    // settings and cast them as ScreenArguments.\n    final args = ModalRoute.of(context)!.settings.arguments as ScreenArguments;\n\n    return Scaffold(\n      appBar: AppBar(title: Text(args.title)),\n      body: Center(child: Text(args.message)),\n    );\n  }\n}\n\n// A Widget that accepts the necessary arguments via the\n// constructor.\nclass PassArgumentsScreen extends StatelessWidget {\n  static const routeName = '/passArguments';\n\n  final String title;\n  final String message;\n\n  // This Widget accepts the arguments as constructor\n  // parameters. It does not extract the arguments from\n  // the ModalRoute.\n  //\n  // The arguments are extracted by the onGenerateRoute\n  // function provided to the MaterialApp widget.\n  const PassArgumentsScreen({\n    super.key,\n    required this.title,\n    required this.message,\n  });\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: Text(title)),\n      body: Center(child: Text(message)),\n    );\n  }\n}\n\n// You can pass any object to the arguments parameter.\n// In this example, create a class that contains both\n// a customizable title and message.\nclass ScreenArguments {\n  final String title;\n  final String message;\n\n  ScreenArguments(this.title, this.message);\n}\n```\n\n----------------------------------------\n\nTITLE: Add Battery Level Imports (Kotlin)\nDESCRIPTION: This Kotlin code snippet adds the necessary imports for accessing the Android battery APIs. These imports provide classes for interacting with the battery manager, intents, and operating system versions.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/platform-integration/platform-channels.md#_snippet_5\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport android.content.Context\nimport android.content.ContextWrapper\nimport android.content.Intent\nimport android.content.IntentFilter\nimport android.os.BatteryManager\nimport android.os.Build.VERSION\nimport android.os.Build.VERSION_CODES\n```\n\n----------------------------------------\n\nTITLE: assetlinks.json Example\nDESCRIPTION: This JSON snippet represents the `assetlinks.json` file, which is hosted on the web domain to verify the association between the website and the Android application. Replace `com.example.deeplink_cookbook` with your app's package name and `FF:2A:CF:7B:DD:CC:F1:03:3E:E8:B2:27:7C:A2:E3:3C:DE:13:DB:AC:8E:EB:3A:B9:72:A1:0E:26:8A:F5:EC:AF` with the SHA256 fingerprint of your app's signing certificate.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/navigation/set-up-app-links.md#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n[{\n  \"relation\": [\"delegate_permission/common.handle_all_urls\"],\n  \"target\": {\n    \"namespace\": \"android_app\",\n    \"package_name\": \"com.example.deeplink_cookbook\",\n    \"sha256_cert_fingerprints\":\n    [\"FF:2A:CF:7B:DD:CC:F1:03:3E:E8:B2:27:7C:A2:E3:3C:DE:13:DB:AC:8E:EB:3A:B9:72:A1:0E:26:8A:F5:EC:AF\"]\n  }\n}]\n```\n\n----------------------------------------\n\nTITLE: Migrating to NavigationBar in Flutter\nDESCRIPTION: This snippet demonstrates replacing the Material 2 style BottomNavigationBar with the new NavigationBar widget in Flutter. The NavigationBar is slightly taller, contains pill-shaped navigation indicators, and uses new color mappings. This requires manual migration as the Flutter SDK does not automatically handle this update.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/material-3-migration.md#_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\nBottomNavigationBar(\n  items: const <BottomNavigationBarItem>[\n    BottomNavigationBarItem(\n      icon: Icon(Icons.home),\n      label: 'Home',\n    ),\n    BottomNavigationBarItem(\n      icon: Icon(Icons.business),\n      label: 'Business',\n    ),\n    BottomNavigationBarItem(\n      icon: Icon(Icons.school),\n      label: 'School',\n    ),\n  ],\n),\n```\n\n----------------------------------------\n\nTITLE: Configure Android Build Features for Compose in Groovy\nDESCRIPTION: This code snippet configures the `android` block in `android/app/build.gradle` to enable Compose features and set the Kotlin compiler extension version. The `compose true` enables Compose. Adjust `kotlinCompilerExtensionVersion` based on installed versions.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/platform-integration/android/compose-activity.md#_snippet_3\n\nLANGUAGE: groovy\nCODE:\n```\nandroid {\n  // Begin adding here\n  buildFeatures {\n    compose true\n  }\n  composeOptions {\n    // https://developer.android.com/jetpack/androidx/releases/compose-kotlin\n    kotlinCompilerExtensionVersion = \"1.4.8\"\n  }\n  // End adding here\n}\n```\n\n----------------------------------------\n\nTITLE: Fade In/Out with AnimatedOpacity Dart\nDESCRIPTION: Implements the fade-in/fade-out animation using the AnimatedOpacity widget.  The opacity property is bound to the _visible state variable, which allows the widget to fade in and out when the button is pressed. The duration property controls the animation speed.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/animation/opacity-animation.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nAnimatedOpacity(\n  // If the widget is visible, animate to 0.0 (invisible).\n  // If the widget is hidden, animate to 1.0 (fully visible).\n  opacity: _visible ? 1.0 : 0.0,\n  duration: const Duration(milliseconds: 500),\n  // The green box must be a child of the AnimatedOpacity widget.\n  child: Container(width: 200, height: 200, color: Colors.green),\n)\n```\n\n----------------------------------------\n\nTITLE: Inserting Data into SQLite Table in Dart\nDESCRIPTION: This snippet demonstrates the `insert()` method for creating a new ToDo item in the SQLite database. It inserts the `task` into the `_kTableTodo` table and returns a `Todo` instance with the newly generated ID.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/app-architecture/design-patterns/sql.md#_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\nFuture<Result<Todo>> insert(String task) async {\n  try {\n    final id = await _database!.insert(_kTableTodo, {_kColumnTask: task});\n    return Result.ok(Todo(id: id, task: task));\n  } on Exception catch (e) {\n    return Result.error(e);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Create Basic Screens with Image in Flutter\nDESCRIPTION: This code creates two stateless widgets, `MainScreen` and `DetailScreen`, both displaying the same image fetched from a network.  `MainScreen` navigates to `DetailScreen` on tap, and `DetailScreen` navigates back to `MainScreen` on tap. This provides the basic structure for demonstrating Hero animations. Dependencies: flutter/material.dart\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/navigation/hero-animations.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\n\nclass MainScreen extends StatelessWidget {\n  const MainScreen({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: const Text('Main Screen')),\n      body: GestureDetector(\n        onTap: () {\n          Navigator.push(\n            context,\n            MaterialPageRoute(\n              builder: (context) {\n                return const DetailScreen();\n              },\n            ),\n          );\n        },\n        child: Image.network('https://picsum.photos/250?image=9'),\n      ),\n    );\n  }\n}\n\nclass DetailScreen extends StatelessWidget {\n  const DetailScreen({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: GestureDetector(\n        onTap: () {\n          Navigator.pop(context);\n        },\n        child: Center(\n          child: Image.network('https://picsum.photos/250?image=9'),\n        ),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Two Screens in Flutter\nDESCRIPTION: This snippet defines two Flutter screens, FirstScreen and SecondScreen, each with an AppBar and an ElevatedButton. The buttons are initially configured with empty onPressed callbacks that will later be used for navigation.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/navigation/named-routes.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\n\nclass FirstScreen extends StatelessWidget {\n  const FirstScreen({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: const Text('First Screen')),\n      body: Center(\n        child: ElevatedButton(\n          onPressed: () {\n            // Navigate to the second screen when tapped.\n          },\n          child: const Text('Launch screen'),\n        ),\n      ),\n    );\n  }\n}\n\nclass SecondScreen extends StatelessWidget {\n  const SecondScreen({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: const Text('Second Screen')),\n      body: Center(\n        child: ElevatedButton(\n          onPressed: () {\n            // Navigate back to first screen when tapped.\n          },\n          child: const Text('Go back!'),\n        ),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Build Flutter App with Obfuscation\nDESCRIPTION: This command builds a Flutter application for a specific target (e.g., apk) with obfuscation enabled. The `--obfuscate` flag enables the obfuscation process, and `--split-debug-info` specifies the directory where the symbol files (SYMBOLS) should be stored. These symbol files are crucial for de-obfuscating stack traces later. The build target specifies the platform (e.g., apk, ios, etc.) for which you are building.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/deployment/obfuscate.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ flutter build <build-target> \\\n   --obfuscate \\\n   --split-debug-info=/<symbols-directory>\n```\n\n----------------------------------------\n\nTITLE: Adding a Drawer to a Scaffold in Flutter\nDESCRIPTION: This Flutter code demonstrates how to integrate a `Drawer` into a `Scaffold` widget. The `Scaffold` automatically handles the display of the drawer using an IconButton in the AppBar, and includes swipe gestures to open the `Drawer`.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/react-native-devs.md#_snippet_43\n\nLANGUAGE: dart\nCODE:\n```\n@override\nWidget build(BuildContext context) {\n  return Scaffold(\n    drawer: Drawer(\n      elevation: 20,\n      child: ListTile(\n        leading: const Icon(Icons.change_history),\n        title: const Text('Screen2'),\n        onTap: () {\n          Navigator.of(context).pushNamed('/b');\n        },\n      ),\n    ),\n    appBar: AppBar(title: const Text('Home')),\n    body: Container(),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Building a ListView with itemBuilder in Dart\nDESCRIPTION: This code creates a ListView.builder that dynamically generates list items based on the items list. The itemBuilder callback is called for each item, passing the context and the item's index. It displays the description and isComplete properties of each ToDo item. Requires a list of ToDo objects named items and uses Padding and Row widgets for layout.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/fundamentals/layout.md#_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\nfinal List<ToDo> items = Repository.fetchTodos();\n\nWidget build(BuildContext context) {\n  return ListView.builder(\n    itemCount: items.length,\n    itemBuilder: (context, idx) {\n      var item = items[idx];\n      return Padding(\n        padding: const EdgeInsets.all(8.0),\n        child: Row(\n          mainAxisAlignment: MainAxisAlignment.spaceBetween,\n          children: [\n            Text(item.description),\n            Text(item.isComplete),\n          ],\n        ),\n      );\n    },\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: SliverList.builder in CustomScrollView (Material)\nDESCRIPTION: This code snippet demonstrates how to add a SliverList to a CustomScrollView using the builder constructor. It creates a list of 50 items, each displayed as a ListTile with a title indicating its index. The itemBuilder function is used to generate the list items on demand.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/lists/floating-app-bar.md#_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\n// Next, create a SliverList\nSliverList.builder(\n  // The builder function returns a ListTile with a title that\n  // displays the index of the current item.\n  itemBuilder:\n      (context, index) => ListTile(title: Text('Item #$index')),\n  // Builds 50 ListTiles\n  itemCount: 50,\n)\n```\n\n----------------------------------------\n\nTITLE: Building an Efficient ListView with ListView.builder in Flutter\nDESCRIPTION: This code snippet demonstrates how to build an efficient ListView using ListView.builder, which is recommended for dynamic lists or lists with large amounts of data. ListView.builder recycles list elements automatically, similar to RecyclerView in Android.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/android-devs.md#_snippet_40\n\nLANGUAGE: dart\nCODE:\n```\nimport 'dart:developer' as developer;\n\nimport 'package:flutter/material.dart';\n\nvoid main() {\n  runApp(const SampleApp());\n}\n\nclass SampleApp extends StatelessWidget {\n  const SampleApp({super.key});\n  // This widget is the root of your application.\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: 'Sample App',\n      theme: ThemeData(\n        colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),\n      ),\n      home: const SampleAppPage(),\n    );\n  }\n}\n\nclass SampleAppPage extends StatefulWidget {\n  const SampleAppPage({super.key});\n\n  @override\n  State<SampleAppPage> createState() => _SampleAppPageState();\n}\n\nclass _SampleAppPageState extends State<SampleAppPage> {\n  List<Widget> widgets = [];\n\n  @override\n  void initState() {\n    super.initState();\n    for (int i = 0; i < 100; i++) {\n      widgets.add(getRow(i));\n    }\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: const Text('Sample App')),\n      body: ListView.builder(\n        itemCount: widgets.length,\n        itemBuilder: (context, position) {\n          return getRow(position);\n        },\n      ),\n    );\n  }\n\n  Widget getRow(int i) {\n    return GestureDetector(\n      onTap: () {\n        setState(() {\n          widgets.add(getRow(widgets.length));\n          developer.log('row $i');\n        });\n      },\n      child: Padding(padding: const EdgeInsets.all(10), child: Text('Row $i')),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Create TextEditingController - Flutter\nDESCRIPTION: This snippet shows how to create a `TextEditingController` in Flutter. The controller is used to retrieve the current value of the `TextField`. It also includes the `dispose` method to clean up the controller when the widget is removed from the widget tree.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/forms/text-field-changes.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\n// Define a custom Form widget.\nclass MyCustomForm extends StatefulWidget {\n  const MyCustomForm({super.key});\n\n  @override\n  State<MyCustomForm> createState() => _MyCustomFormState();\n}\n\n// Define a corresponding State class.\n// This class holds data related to the Form.\nclass _MyCustomFormState extends State<MyCustomForm> {\n  // Create a text controller. Later, use it to retrieve the\n  // current value of the TextField.\n  final myController = TextEditingController();\n\n  @override\n  void dispose() {\n    // Clean up the controller when the widget is removed from the\n    // widget tree.\n    myController.dispose();\n    super.dispose();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    // Fill this out in the next step.\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Build UI - Dart\nDESCRIPTION: Builds the UI to display the battery level and a button to refresh the value. An ElevatedButton is used to trigger the _getBatteryLevel method when pressed. A Text widget displays the _batteryLevel string which represents the current battery level or any error message.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/platform-integration/platform-channels.md#_snippet_3\n\nLANGUAGE: Dart\nCODE:\n```\n@override\nWidget build(BuildContext context) {\n  return Material(\n    child: Center(\n      child: Column(\n        mainAxisAlignment: MainAxisAlignment.spaceEvenly,\n        children: [\n          ElevatedButton(\n            onPressed: _getBatteryLevel,\n            child: const Text('Get Battery Level'),\n          ),\n          Text(_batteryLevel),\n        ],\n      ),\n    ),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Wrapping CustomerCart with DragTarget in Dart\nDESCRIPTION: This snippet shows how to wrap a `CustomerCart` with a `DragTarget` widget to handle dropped items. It defines a builder to display the `CustomerCart`, and an `onAcceptWithDetails` callback to process the dropped item and update the customer's cart.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/effects/drag-a-widget.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nDragTarget<Item>(\n  builder: (context, candidateItems, rejectedItems) {\n    return CustomerCart(\n      hasItems: customer.items.isNotEmpty,\n      highlighted: candidateItems.isNotEmpty,\n      customer: customer,\n    );\n  },\n  onAcceptWithDetails: (details) {\n    _itemDroppedOnCustomerCart(item: details.data, customer: customer);\n  },\n)\n```\n\n----------------------------------------\n\nTITLE: Flutter Container Centered with Dimensions\nDESCRIPTION: This example creates a Container widget with a specified width and height of 100 pixels and a red background color, wrapped in a Center widget. The Center widget allows the Container to respect its width and height constraints because it doesn't force the child to be a specific size. It centers the container within the available space.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/layout/constraints.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nCenter(\n   child: Container(width: 100, height: 100, color: red))\n```\n\n----------------------------------------\n\nTITLE: Updating UI with ListenableBuilder Dart\nDESCRIPTION: This snippet shows the use of `ListenableBuilder` to rebuild the UI when the `viewModel` changes.  The `CustomScrollView` and `SliverList.builder` within the `ListenableBuilder` will re-render whenever `viewModel.notifyListeners()` is called.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/app-architecture/case-study/ui-layer.md#_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\n@override\nWidget build(BuildContext context) {\n  return Scaffold(\n    // Some code was removed for brevity.\n      body: SafeArea(\n        child: ListenableBuilder(\n          listenable: viewModel,\n          builder: (context, _) {\n            return CustomScrollView(\n              slivers: [\n                SliverToBoxAdapter(),\n                SliverList.builder(\n                  itemCount: viewModel.bookings.length,\n                  itemBuilder: (_, index) =>\n                      _Booking(\n                        key: ValueKey(viewModel.bookings[index].id),\n                        booking: viewModel.bookings[index],\n                        onTap: () =>\n                            context.push(Routes.bookingWithId(\n                                viewModel.bookings[index].id)\n                            ),\n                        onDismissed: (_) =>\n                            viewModel.deleteBooking.execute(\n                              viewModel.bookings[index].id,\n                            ),\n                      ),\n                ),\n              ],\n            );\n          }\n        )\n      )\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Flutter Hero Animation Complete Example\nDESCRIPTION: This code provides a complete interactive example demonstrating the Hero animation in Flutter using DartPad. It defines a `HeroApp` as the root widget, which navigates between `MainScreen` and `DetailScreen`. Both screens contain a `Hero` widget with the same tag, enabling a smooth animation when navigating between them. Dependencies: flutter/material.dart\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/navigation/hero-animations.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\n\nvoid main() => runApp(const HeroApp());\n\nclass HeroApp extends StatelessWidget {\n  const HeroApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return const MaterialApp(title: 'Transition Demo', home: MainScreen());\n  }\n}\n\nclass MainScreen extends StatelessWidget {\n  const MainScreen({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: const Text('Main Screen')),\n      body: GestureDetector(\n        onTap: () {\n          Navigator.push(\n            context,\n            MaterialPageRoute(\n              builder: (context) {\n                return const DetailScreen();\n              },\n            ),\n          );\n        },\n        child: Hero(\n          tag: 'imageHero',\n          child: Image.network('https://picsum.photos/250?image=9'),\n        ),\n      ),\n    );\n  }\n}\n\nclass DetailScreen extends StatelessWidget {\n  const DetailScreen({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: GestureDetector(\n        onTap: () {\n          Navigator.pop(context);\n        },\n        child: Center(\n          child: Hero(\n            tag: 'imageHero',\n            child: Image.network('https://picsum.photos/250?image=9'),\n          ),\n        ),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Add Battery Level Imports (Java)\nDESCRIPTION: This Java code snippet adds the necessary imports for accessing the Android battery APIs. These imports provide classes for interacting with the battery manager, intents, and operating system versions.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/platform-integration/platform-channels.md#_snippet_9\n\nLANGUAGE: Java\nCODE:\n```\nimport android.content.ContextWrapper;\nimport android.content.Intent;\nimport android.content.IntentFilter;\nimport android.os.BatteryManager;\nimport android.os.Build.VERSION;\nimport android.os.Build.VERSION_CODES;\nimport android.os.Bundle;\n```\n\n----------------------------------------\n\nTITLE: Medium AppBar Implementation in Flutter\nDESCRIPTION: This snippet demonstrates how to implement a medium app bar in Flutter using CustomScrollView and SliverAppBar. The medium app bar displays a larger headline before scrolling and uses ColorScheme.surfaceTint for separation from the content. It depends on the material and cupertino packages.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/material-3-migration.md#_snippet_15\n\nLANGUAGE: dart\nCODE:\n```\nCustomScrollView(\n  slivers: <Widget>[\n    const SliverAppBar.medium(\n      title: Text('Title'),\n    ),\n    SliverToBoxAdapter(\n      child: Card(\n        child: SizedBox(\n          height: 1200,\n          child: Padding(\n            padding: const EdgeInsets.fromLTRB(8, 100, 8, 100),\n            child: Text(\n              'Here be scrolling content...',\n              style: Theme.of(context).textTheme.headlineSmall,\n            ),\n          ),\n        ),\n      ),\n    ),\n  ],\n),\n```\n\n----------------------------------------\n\nTITLE: LlmProvider Interface Definition in Dart\nDESCRIPTION: Defines the abstract LlmProvider class, which includes methods for generating and sending messages, as well as getting and setting chat history.  It uses streams for asynchronous message handling and includes attachment support.  The history property is an Iterable of ChatMessage objects, and implementing classes must notify listeners on changes to the history.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ai-toolkit/feature-integration.md#_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nabstract class LlmProvider implements Listenable {\n  Stream<String> generateStream(\n    String prompt, { \n    Iterable<Attachment> attachments,\n  });\n\n  Stream<String> sendMessageStream(\n    String prompt, { \n    Iterable<Attachment> attachments,\n  });\n\n  Iterable<ChatMessage> get history;\n  set history(Iterable<ChatMessage> history);\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Text Flutter/Dart\nDESCRIPTION: Shows how to style text in Flutter/Dart, setting width, height, background color, font family, size, weight, and text alignment. Depends on the Flutter framework and the 'bold24Roboto' TextStyle variable. Returns a styled Container widget containing centered text.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/web-devs.md#_snippet_1\n\nLANGUAGE: Dart\nCODE:\n```\nfinal container = Container(\n  // grey box\n  width: 320,\n  height: 240,\n  color: Colors.grey[300],\n  child: const Text(\n    'Lorem ipsum',\n    style: TextStyle(\n      fontFamily: 'Georgia',\n      fontSize: 24,\n      fontWeight: FontWeight.bold,\n    ),\n    textAlign: TextAlign.center,\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Data Loading and Display in Flutter\nDESCRIPTION: This complete Flutter example demonstrates how to fetch data from an API and display it in a `ListView`. It includes the necessary imports, widget structure, asynchronous data loading, and UI updates using `setState`.  Requires the `http` package.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/xamarin-forms-devs.md#_snippet_22\n\nLANGUAGE: dart\nCODE:\n```\nimport 'dart:convert';\n\nimport 'package:flutter/material.dart';\nimport 'package:http/http.dart' as http;\n\nvoid main() {\n  runApp(const SampleApp());\n}\n\nclass SampleApp extends StatelessWidget {\n  const SampleApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return const MaterialApp(title: 'Sample App', home: SampleAppPage());\n  }\n}\n\nclass SampleAppPage extends StatefulWidget {\n  const SampleAppPage({super.key});\n\n  @override\n  State<SampleAppPage> createState() => _SampleAppPageState();\n}\n\nclass _SampleAppPageState extends State<SampleAppPage> {\n  List<Map<String, Object?>> data = [];\n\n  @override\n  void initState() {\n    super.initState();\n    loadData();\n  }\n\n  Future<void> loadData() async {\n    final Uri dataURL = Uri.parse('https://jsonplaceholder.typicode.com/posts');\n    final http.Response response = await http.get(dataURL);\n    setState(() {\n      data = (jsonDecode(response.body) as List).cast<Map<String, Object?>>();\n    });\n  }\n\n  Widget getRow(int index) {\n    return Padding(\n      padding: const EdgeInsets.all(10),\n      child: Text('Row ${data[index]['title']}'),\n    );\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: const Text('Sample App')),\n      body: ListView.builder(\n        itemCount: data.length,\n        itemBuilder: (context, index) {\n          return getRow(index);\n        },\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: DropdownMenuEntry Text Style After Migration (Dart)\nDESCRIPTION: This code snippet shows how to explicitly set the text style of a DropdownMenuEntry to match the previous (non-Material 3) default text style. This involves accessing the Theme's bodyLarge text style.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/menus-text-style.md#_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nDropdownMenuEntry<ColorLabel>(\n  style: MenuItemButton.styleFrom(\n    textStyle: Theme.of(context).textTheme.bodyLarge,\n  ),\n  value: color,\n  label: color.label,\n),\n```\n\n----------------------------------------\n\nTITLE: Initializing FlutterFragment with Kotlin\nDESCRIPTION: This code snippet demonstrates how to initialize a `FlutterFragment` in Kotlin, using both a new `FlutterEngine` and a cached `FlutterEngine`. It utilizes the `shouldAttachEngineToActivity(false)` method to prevent Flutter from interacting with the surrounding Activity, thus preventing Flutter from controlling the Activity's system UI. Two initialization methods are shown, using a new FlutterEngine and a cached FlutterEngine respectively.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/add-to-app/android/add-flutter-fragment.md#_snippet_16\n\nLANGUAGE: Kotlin\nCODE:\n```\n// Using a new FlutterEngine.\nval flutterFragment = FlutterFragment.withNewEngine()\n    .shouldAttachEngineToActivity(false)\n    .build()\n\n// Using a cached FlutterEngine.\nval flutterFragment = FlutterFragment.withCachedEngine(\"my_engine_id\")\n    .shouldAttachEngineToActivity(false)\n    .build()\n```\n\n----------------------------------------\n\nTITLE: Implementing Material Design in Flutter with Dart\nDESCRIPTION: This snippet demonstrates how to use Material Design components in a Flutter application. It uses the MaterialApp, Scaffold, and AppBar widgets to create a basic UI with an app bar, body, and floating action button. The Scaffold widget provides a layout structure for Material Components.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/index.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\n\nvoid main() {\n  runApp(const MaterialApp(title: 'Flutter Tutorial', home: TutorialHome()));\n}\n\nclass TutorialHome extends StatelessWidget {\n  const TutorialHome({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    // Scaffold is a layout for\n    // the major Material Components.\n    return Scaffold(\n      appBar: AppBar(\n        leading: const IconButton(\n          icon: Icon(Icons.menu),\n          tooltip: 'Navigation menu',\n          onPressed: null,\n        ),\n        title: const Text('Example title'),\n        actions: const [\n          IconButton(\n            icon: Icon(Icons.search),\n            tooltip: 'Search',\n            onPressed: null,\n          ),\n        ],\n      ),\n      // body is the majority of the screen.\n      body: const Center(child: Text('Hello, world!')),\n      floatingActionButton: const FloatingActionButton(\n        tooltip: 'Add', // used by assistive technologies\n        onPressed: null,\n        child: Icon(Icons.add),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Platform-Specific Bottom Navigation Bars in Flutter\nDESCRIPTION: This code snippet shows how to implement platform-specific bottom navigation bars in Flutter using the `NavigationBar` widget on Android and the `CupertinoTabBar` widget on iOS. It uses `Platform.isIOS` to conditionally render the appropriate widget and demonstrates how to populate the navigation bar with items from a map.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/adaptive-responsive/platform-adaptations.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nfinal Map<String, Icon> _navigationItems = {\n    'Menu': Platform.isIOS ? Icon(CupertinoIcons.house_fill) : Icon(Icons.home),\n    'Order': Icon(Icons.adaptive.share),\n  };\n\n...\n\nScaffold(\n  body: _currentWidget,\n  bottomNavigationBar: Platform.isIOS\n          ? CupertinoTabBar(\n              currentIndex: _currentIndex,\n              onTap: (index) {\n                setState(() => _currentIndex = index);\n                _loadScreen();\n              },\n              items: _navigationItems.entries\n                  .map<BottomNavigationBarItem>(\n                      (entry) => BottomNavigationBarItem(\n                            icon: entry.value,\n                            label: entry.key,\n                          ))\n                  .toList(),\n            )\n          : NavigationBar(\n              selectedIndex: _currentIndex,\n              onDestinationSelected: (index) {\n                setState(() => _currentIndex = index);\n                _loadScreen();\n              },\n              destinations: _navigationItems.entries\n                  .map<Widget>((entry) => NavigationDestination(\n                        icon: entry.value,\n                        label: entry.key,\n                      ))\n                  .toList(),\n            ));\n```\n\n----------------------------------------\n\nTITLE: Building a Flutter Web App for Release with WebAssembly\nDESCRIPTION: This command builds a release version of the Flutter web application using WebAssembly (Wasm).  It generates optimized and minified Wasm files suitable for deployment to a web server. The output is placed in the `build/web` directory. The assets need to be served from the root of your domain or a configured subpath.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/platform-integration/web/building.md#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ flutter build web --wasm\n```\n\n----------------------------------------\n\nTITLE: Loading Data Asynchronously in Flutter (async/await)\nDESCRIPTION: This Dart code shows how to load data asynchronously from a network resource using the async/await paradigm.  The loadData function uses the http package to make a GET request and updates the UI with the retrieved data using setState. It fetches data from a URL and then parses the JSON response.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/android-devs.md#_snippet_15\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> loadData() async {\n  final dataURL = Uri.parse('https://jsonplaceholder.typicode.com/posts');\n  final response = await http.get(dataURL);\n  setState(() {\n    widgets =\n        (jsonDecode(response.body) as List).cast<Map<String, Object?>>();\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Set background color to grey[50] (After) - Dart\nDESCRIPTION: This code snippet demonstrates how to override the default background color of the ColorScheme in a light theme to match the Material 2 appearance using Colors.grey[50]. It uses the copyWith method to modify the background property of the generated ColorScheme. While this approach can restore the pre-Material 3 look, it's not recommended as a long-term solution.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/material-3-migration.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\ntheme: ThemeData(\n  colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple).copyWith(\n    background: Colors.grey[50]!,\n  ),\n),\n```\n\n----------------------------------------\n\nTITLE: State Modification with setState - Dart\nDESCRIPTION: This code snippet demonstrates the correct way to modify the state of a Flutter widget. By wrapping the state change (`buttonLabel = newLabel`) within a `setState` call, the widget is properly rebuilt when the value returned by `Navigator.pushNamed` is assigned. This resolves issues arising from the OverlayEntry optimization and ensures correct UI updates. This example shows the code after applying the fix.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/overlay-entry-rebuilds.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nclass FooState extends State<Foo> {\n  String buttonLabel = 'Click Me';\n  @override\n  Widget build(BuildContext context) {\n    return ElevatedButton(\n      onPressed: () async {\n        final newLabel = await Navigator.pushNamed(context, '/bar');\n        setState(() {\n          buttonLabel = newLabel;\n        });\n      },\n      child: Text(buttonLabel),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating UI state with notifyListeners in Dart\nDESCRIPTION: This code demonstrates how the `_load` method in `HomeViewModel` updates the UI state and calls `notifyListeners()` to trigger a re-render of the view. The snippet shows how to handle data loading from repositories and update the UI state based on the result.  The `notifyListeners()` call alerts the view of new UI state.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/app-architecture/case-study/ui-layer.md#_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nclass HomeViewModel extends ChangeNotifier {\n  // ...\n\n Future<Result> _load() async {\n    try {\n      final userResult = await _userRepository.getUser();\n      switch (userResult) {\n        case Ok<User>():\n          _user = userResult.value;\n          _log.fine('Loaded user');\n        case Error<User>():\n          _log.warning('Failed to load user', userResult.error);\n      }\n\n      // ...\n\n      return userResult;\n    } finally {\n      notifyListeners();\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Draggable Card with Physics Animation in Flutter\nDESCRIPTION: This Flutter example implements a draggable card that uses physics-based animation to return to the center when released. It utilizes `SpringSimulation` to create a natural spring effect.  The card's position is controlled by an `AnimationController` and updated based on user drag gestures.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/animation/physics-simulation.md#_snippet_7\n\nLANGUAGE: Dart\nCODE:\n```\nimport 'package:flutter/material.dart';\nimport 'package:flutter/physics.dart';\n\nvoid main() {\n  runApp(const MaterialApp(home: PhysicsCardDragDemo()));\n}\n\nclass PhysicsCardDragDemo extends StatelessWidget {\n  const PhysicsCardDragDemo({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(),\n      body: const DraggableCard(child: FlutterLogo(size: 128)),\n    );\n  }\n}\n\n/// A draggable card that moves back to [Alignment.center] when it's\n/// released.\nclass DraggableCard extends StatefulWidget {\n  const DraggableCard({required this.child, super.key});\n\n  final Widget child;\n\n  @override\n  State<DraggableCard> createState() => _DraggableCardState();\n}\n\nclass _DraggableCardState extends State<DraggableCard>\n    with SingleTickerProviderStateMixin {\n  late AnimationController _controller;\n\n  /// The alignment of the card as it is dragged or being animated.\n  ///\n  /// While the card is being dragged, this value is set to the values computed\n  /// in the GestureDetector onPanUpdate callback. If the animation is running,\n  /// this value is set to the value of the [_animation].\n  Alignment _dragAlignment = Alignment.center;\n\n  late Animation<Alignment> _animation;\n\n  /// Calculates and runs a [SpringSimulation].\n  void _runAnimation(Offset pixelsPerSecond, Size size) {\n    _animation = _controller.drive(\n      AlignmentTween(begin: _dragAlignment, end: Alignment.center),\n    );\n    // Calculate the velocity relative to the unit interval, [0,1],\n    // used by the animation controller.\n    final unitsPerSecondX = pixelsPerSecond.dx / size.width;\n    final unitsPerSecondY = pixelsPerSecond.dy / size.height;\n    final unitsPerSecond = Offset(unitsPerSecondX, unitsPerSecondY);\n    final unitVelocity = unitsPerSecond.distance;\n\n    const spring = SpringDescription(mass: 30, stiffness: 1, damping: 1);\n\n    final simulation = SpringSimulation(spring, 0, 1, -unitVelocity);\n\n    _controller.animateWith(simulation);\n  }\n\n  @override\n  void initState() {\n    super.initState();\n    _controller = AnimationController(vsync: this);\n\n    _controller.addListener(() {\n      setState(() {\n        _dragAlignment = _animation.value;\n      });\n    });\n  }\n\n  @override\n  void dispose() {\n    _controller.dispose();\n    super.dispose();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    final size = MediaQuery.of(context).size;\n    return GestureDetector(\n      onPanDown: (details) {\n        _controller.stop();\n      },\n      onPanUpdate: (details) {\n        setState(() {\n          _dragAlignment += Alignment(\n            details.delta.dx / (size.width / 2),\n            details.delta.dy / (size.height / 2),\n          );\n        });\n      },\n      onPanEnd: (details) {\n        _runAnimation(details.velocity.pixelsPerSecond, size);\n      },\n      child: Align(alignment: _dragAlignment, child: Card(child: widget.child)),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Update main.dart Flutter\nDESCRIPTION: Replaces the content of `lib/main.dart` with a Flutter app that uses the `url_launcher` package to launch URLs in a browser or in-app web view. It includes state management and UI components for the URL launcher functionality.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/testing/native-debugging.md#_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\n// Copyright 2023 The Flutter Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport 'package:flutter/material.dart';\nimport 'package:url_launcher/url_launcher.dart';\n\nvoid main() {\n  runApp(const MyApp());\n}\n\nclass MyApp extends StatelessWidget {\n  const MyApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: 'URL Launcher',\n      theme: ThemeData(\n        colorSchemeSeed: Colors.purple,\n        brightness: Brightness.light,\n      ),\n      home: const MyHomePage(title: 'URL Launcher'),\n    );\n  }\n}\n\nclass MyHomePage extends StatefulWidget {\n  const MyHomePage({super.key, required this.title});\n  final String title;\n\n  @override\n  State<MyHomePage> createState() => _MyHomePageState();\n}\n\nclass _MyHomePageState extends State<MyHomePage> {\n  Future<void>? _launched;\n\n  Future<void> _launchInBrowser(Uri url) async {\n    if (!await launchUrl(\n      url,\n      mode: LaunchMode.externalApplication,\n    )) {\n      throw Exception('Could not launch $url');\n    }\n  }\n\n  Future<void> _launchInWebView(Uri url) async {\n    if (!await launchUrl(\n      url,\n      mode: LaunchMode.inAppWebView,\n    )) {\n      throw Exception('Could not launch $url');\n    }\n  }\n\n  Widget _launchStatus(BuildContext context, AsyncSnapshot<void> snapshot) {\n    if (snapshot.hasError) {\n      return Text('Error: ${snapshot.error}');\n    } else {\n      return const Text('');\n    }\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    final Uri toLaunch = Uri(\n        scheme: 'https',\n        host: 'docs.flutter.dev',\n        path: 'testing/native-debugging');\n    return Scaffold(\n      appBar: AppBar(\n        title: Text(widget.title),\n      ),\n      body: Center(\n        child: Column(\n          mainAxisAlignment: MainAxisAlignment.center,\n          children: <Widget>[\n            Padding(\n              padding: const EdgeInsets.all(16),\n              child: Text(toLaunch.toString()),\n            ),\n            FilledButton(\n              onPressed: () => setState(() {\n                _launched = _launchInBrowser(toLaunch);\n              }),\n              child: const Text('Launch in browser'),\n            ),\n            const Padding(padding: EdgeInsets.all(16)),\n            FilledButton(\n              onPressed: () => setState(() {\n                _launched = _launchInWebView(toLaunch);\n              }),\n              child: const Text('Launch in app'),\n            ),\n            const Padding(padding: EdgeInsets.all(16.0)),\n            FutureBuilder<void>(future: _launched, builder: _launchStatus),\n          ],\n        ),\n      ),\n    );\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Complete Flutter Counter App (Dart)\nDESCRIPTION: This is the complete code for the counter app's `lib/main.dart` file.  It initializes a basic Flutter app with a button that increments a counter. The code is used as the target for integration tests.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/testing/integration-tests/index.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\n\nvoid main() => runApp(const MyApp());\n\nclass MyApp extends StatelessWidget {\n  const MyApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return const MaterialApp(\n      title: 'Counter App',\n      home: MyHomePage(title: 'Counter App Home Page'),\n    );\n  }\n}\n\nclass MyHomePage extends StatefulWidget {\n  const MyHomePage({super.key, required this.title});\n\n  final String title;\n\n  @override\n  State<MyHomePage> createState() => _MyHomePageState();\n}\n\nclass _MyHomePageState extends State<MyHomePage> {\n  int _counter = 0;\n\n  void _incrementCounter() {\n    setState(() {\n      _counter++;\n    });\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: Text(widget.title)),\n      body: Center(\n        child: Column(\n          mainAxisAlignment: MainAxisAlignment.center,\n          children: <Widget>[\n            const Text('You have pushed the button this many times:'),\n            Text(\n              '$_counter',\n              style: Theme.of(context).textTheme.headlineMedium,\n            ),\n          ],\n        ),\n      ),\n      floatingActionButton: FloatingActionButton(\n        // Provide a Key to this button. This allows finding this\n        // specific button inside the test suite, and tapping it.\n        key: const Key('increment'),\n        onPressed: _incrementCounter,\n        tooltip: 'Increment',\n        child: const Icon(Icons.add),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Grouped Unit Tests for Counter in Dart\nDESCRIPTION: This Dart code shows how to group related unit tests using the `group` function from the `test` package. It imports the `test` package and the `Counter` class, then defines a group of tests for the `Counter` class's initial value, increment, and decrement functionality. Each test case uses the `expect` function to assert the expected behavior.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/testing/unit/introduction.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:counter_app/counter.dart';\nimport 'package:test/test.dart';\n\nvoid main() {\n  group('Test start, increment, decrement', () {\n    test('value should start at 0', () {\n      expect(Counter().value, 0);\n    });\n\n    test('value should be incremented', () {\n      final counter = Counter();\n\n      counter.increment();\n\n      expect(counter.value, 1);\n    });\n\n    test('value should be decremented', () {\n      final counter = Counter();\n\n      counter.decrement();\n\n      expect(counter.value, -1);\n    });\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Passing Callbacks to Child Widgets\nDESCRIPTION: This snippet shows how to pass a callback function to a child widget (`MyListItem`).  The parent widget defines the callback and provides it to the child, allowing the child to trigger actions in the parent. This approach becomes less manageable when there are many widgets that need to modify the app state from different places.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/data-and-backend/state-mgmt/simple.md#_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\n@override\nWidget build(BuildContext context) {\n  return SomeWidget(\n    // Construct the widget, passing it a reference to the method above.\n    MyListItem(myTapCallback),\n  );\n}\n\nvoid myTapCallback(Item item) {\n  print('user tapped on $item');\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing PageRouteBuilder for Route Navigation in Flutter\nDESCRIPTION: This code snippet demonstrates how to set up a basic PageRouteBuilder to create a custom route in Flutter. It defines two routes: Page1 (home) with a button to navigate to Page2. The _createRoute function returns a PageRouteBuilder that specifies the pageBuilder and transitionsBuilder. Initially, the transitionsBuilder simply returns the child without any animation.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/animation/page-route-animation.md#_snippet_0\n\nLANGUAGE: Dart\nCODE:\n```\nimport 'package:flutter/material.dart';\n\nvoid main() {\n  runApp(const MaterialApp(home: Page1()));\n}\n\nclass Page1 extends StatelessWidget {\n  const Page1({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(),\n      body: Center(\n        child: ElevatedButton(\n          onPressed: () {\n            Navigator.of(context).push(_createRoute());\n          },\n          child: const Text('Go!'),\n        ),\n      ),\n    );\n  }\n}\n\nRoute _createRoute() {\n  return PageRouteBuilder(\n    pageBuilder: (context, animation, secondaryAnimation) => const Page2(),\n    transitionsBuilder: (context, animation, secondaryAnimation, child) {\n      return child;\n    },\n  );\n}\n\nclass Page2 extends StatelessWidget {\n  const Page2({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(),\n      body: const Center(child: Text('Page 2')),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Detecting Gestures using GestureDetector in Flutter\nDESCRIPTION: This Flutter code snippet shows how to use a `GestureDetector` widget to detect various gestures, including taps, long presses, and horizontal/vertical swipes. It prints corresponding messages to the console for each detected gesture.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/react-native-devs.md#_snippet_46\n\nLANGUAGE: dart\nCODE:\n```\n@override\nWidget build(BuildContext context) {\n  return GestureDetector(\n    child: Scaffold(\n      appBar: AppBar(title: const Text('Gestures')),\n      body: const Center(\n        child: Column(\n          mainAxisAlignment: MainAxisAlignment.center,\n          children: <Widget>[\n            Text('Tap, Long Press, Swipe Horizontally or Vertically'),\n          ],\n        ),\n      ),\n    ),\n    onTap: () {\n      print('Tapped');\n    },\n    onLongPress: () {\n      print('Long Pressed');\n    },\n    onVerticalDragEnd: (value) {\n      print('Swiped Vertically');\n    },\n    onHorizontalDragEnd: (value) {\n      print('Swiped Horizontally');\n    },\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Text Direction for Horizontal Button Order\nDESCRIPTION: This code snippet adjusts the `TextDirection` property of a `Row` widget to handle platform-specific button order differences. On Windows, the confirmation button appears on the left (RTL), while on other platforms, it appears on the right (LTR).\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/adaptive-responsive/idioms.md#_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nTextDirection btnDirection =\n    DeviceType.isWindows ? TextDirection.rtl : TextDirection.ltr;\nreturn Row(\n  children: [\n    const Spacer(),\n    Row(\n      textDirection: btnDirection,\n      children: [\n        DialogButton(\n          label: 'Cancel',\n          onPressed: () => Navigator.pop(context, false),\n        ),\n        DialogButton(\n          label: 'Ok',\n          onPressed: () => Navigator.pop(context, true),\n        ),\n      ],\n    ),\n  ],\n);\n```\n\n----------------------------------------\n\nTITLE: Disabling Impeller during debugging\nDESCRIPTION: This command line instruction shows how to disable Impeller when debugging a Flutter application on iOS or Android using the `flutter run` command. This is achieved by including the `--no-enable-impeller` flag.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/perf/impeller.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nflutter run --no-enable-impeller\n```\n\n----------------------------------------\n\nTITLE: Centering a Widget in Flutter (Dart)\nDESCRIPTION: This snippet demonstrates how to center a widget using the `Center` widget in Flutter. It takes a `BuildContext` and returns a `Widget` that centers a `BorderedImage`. The `BorderedImage` is assumed to be a custom widget defined elsewhere.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/fundamentals/layout.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nWidget build(BuildContext context) {\n  return Center(\n    child: BorderedImage(),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Submitting Form with Form.save() in Flutter\nDESCRIPTION: This Dart snippet demonstrates the `_submit` function, which is called when the form is submitted in Flutter. It validates the form, saves the form's data using `form.save()`, and displays the entered email (and password) in an alert dialog.  It requires access to the `formKey` (a `GlobalKey<FormState>`) to obtain the form's state.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/react-native-devs.md#_snippet_54\n\nLANGUAGE: Dart\nCODE:\n```\nvoid _submit() {\n  final form = formKey.currentState;\n  if (form != null && form.validate()) {\n    form.save();\n    showDialog(\n      context: context,\n      builder: (context) {\n        return AlertDialog(\n          title: const Text('Alert'),\n          content: Text('Email: $_email, password: $_password'),\n        );\n      },\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Flutter with Staging Flavor\nDESCRIPTION: This command runs the Flutter application with staging flavor. This will launch the application in debug mode, using staging scheme.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/deployment/flavors-ios.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ flutter run --flavor staging\n```\n\n----------------------------------------\n\nTITLE: Extending the Command Pattern with Arguments in Flutter\nDESCRIPTION: This code snippet illustrates how to extend the Command pattern in Flutter to support different numbers of arguments. It defines a `HomeViewModel` class that uses `Command0` for actions without arguments (e.g., `load`) and `Command1` for actions with one argument (e.g., `edit`). `Command0` and `Command1` represent command variants designed to handle a specific number of arguments. This extension enhances the flexibility and reusability of the Command pattern.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/app-architecture/design-patterns/command.md#_snippet_17\n\nLANGUAGE: dart\nCODE:\n```\nclass HomeViewModel extends ChangeNotifier {\n  HomeViewModel() {\n    load = Command0(_load)..execute();\n    edit = Command1<String>(_edit);\n  }\n\n  User? get user => // ...\n\n  // Command0 accepts 0 arguments\n  late final Command0 load;\n\n  // Command1 accepts 1 argument\n  late final Command1 edit;\n\n  Future<void> _load() async {\n    // load user\n  }\n\n  Future<void> _edit(String name) async {\n    // edit user\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamically Updating a ListView in Flutter\nDESCRIPTION: This code snippet demonstrates how to dynamically update a ListView by creating a new List inside of setState() and copying the data from the old list to the new list.  This triggers a rebuild and updates the UI.  It's not recommended for large datasets.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/android-devs.md#_snippet_39\n\nLANGUAGE: dart\nCODE:\n```\nimport 'dart:developer' as developer;\n\nimport 'package:flutter/material.dart';\n\nvoid main() {\n  runApp(const SampleApp());\n}\n\nclass SampleApp extends StatelessWidget {\n  const SampleApp({super.key});\n  // This widget is the root of your application.\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: 'Sample App',\n      theme: ThemeData(\n        colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),\n      ),\n      home: const SampleAppPage(),\n    );\n  }\n}\n\nclass SampleAppPage extends StatefulWidget {\n  const SampleAppPage({super.key});\n\n  @override\n  State<SampleAppPage> createState() => _SampleAppPageState();\n}\n\nclass _SampleAppPageState extends State<SampleAppPage> {\n  List<Widget> widgets = [];\n\n  @override\n  void initState() {\n    super.initState();\n    for (int i = 0; i < 100; i++) {\n      widgets.add(getRow(i));\n    }\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: const Text('Sample App')),\n      body: ListView(children: widgets),\n    );\n  }\n\n  Widget getRow(int i) {\n    return GestureDetector(\n      onTap: () {\n        setState(() {\n          widgets = List.from(widgets);\n          widgets.add(getRow(widgets.length));\n          developer.log('row $i');\n        });\n      },\n      child: Padding(padding: const EdgeInsets.all(10), child: Text('Row $i')),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Define Shimmer Widget in Flutter\nDESCRIPTION: Defines a stateful widget named `Shimmer` that takes a `LinearGradient` and provides access to its state to descendant widgets. The `of` method allows descendant widgets to access the `ShimmerState` object.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/effects/shimmer-loading.md#_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nclass Shimmer extends StatefulWidget {\n  static ShimmerState? of(BuildContext context) {\n    return context.findAncestorStateOfType<ShimmerState>();\n  }\n\n  const Shimmer({super.key, required this.linearGradient, this.child});\n\n  final LinearGradient linearGradient;\n  final Widget? child;\n\n  @override\n  ShimmerState createState() => ShimmerState();\n}\n\nclass ShimmerState extends State<Shimmer> {\n  @override\n  Widget build(BuildContext context) {\n    return widget.child ?? const SizedBox();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Full Flutter Passing Data Example in Dart\nDESCRIPTION: This provides a complete, runnable Flutter example showcasing data passing between two screens. It includes the `Todo` class, `TodosScreen`, and `DetailScreen` widgets, along with the necessary `MaterialApp` setup and navigation logic. It demonstrates how to pass a `Todo` object from a list of todos on the `TodosScreen` to the `DetailScreen` for display.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/navigation/passing-data.md#_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\n\nclass Todo {\n  final String title;\n  final String description;\n\n  const Todo(this.title, this.description);\n}\n\nvoid main() {\n  runApp(\n    MaterialApp(\n      title: 'Passing Data',\n      home: TodosScreen(\n        todos: List.generate(\n          20,\n          (i) => Todo(\n            'Todo $i',\n            'A description of what needs to be done for Todo $i',\n          ),\n        ),\n      ),\n    ),\n  );\n}\n\nclass TodosScreen extends StatelessWidget {\n  const TodosScreen({super.key, required this.todos});\n\n  final List<Todo> todos;\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: const Text('Todos')),\n      body: ListView.builder(\n        itemCount: todos.length,\n        itemBuilder: (context, index) {\n          return ListTile(\n            title: Text(todos[index].title),\n            // When a user taps the ListTile, navigate to the DetailScreen.\n            // Notice that you're not only creating a DetailScreen, you're\n            // also passing the current todo through to it.\n            onTap: () {\n              Navigator.push(\n                context,\n                MaterialPageRoute(\n                  builder: (context) => DetailScreen(todo: todos[index]),\n                ),\n              );\n            },\n          );\n        },\n      ),\n    );\n  }\n}\n\nclass DetailScreen extends StatelessWidget {\n  // In the constructor, require a Todo.\n  const DetailScreen({super.key, required this.todo});\n\n  // Declare a field that holds the Todo.\n  final Todo todo;\n\n  @override\n  Widget build(BuildContext context) {\n    // Use the Todo to create the UI.\n    return Scaffold(\n      appBar: AppBar(title: Text(todo.title)),\n      body: Padding(\n        padding: const EdgeInsets.all(16),\n        child: Text(todo.description),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Spring Simulation Animation in Dart\nDESCRIPTION: The `_runAnimation` function calculates and runs a spring simulation.  It calculates the velocity of the drag, creates a `SpringSimulation` object, and uses `animateWith` to run the simulation. The method updates the animation based on drag velocity and the spring simulation.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/animation/physics-simulation.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\n/// Calculates and runs a [SpringSimulation].\nvoid _runAnimation(Offset pixelsPerSecond, Size size) {\n  _animation = _controller.drive(\n    AlignmentTween(begin: _dragAlignment, end: Alignment.center),\n  );\n  // Calculate the velocity relative to the unit interval, [0,1],\n  // used by the animation controller.\n  final unitsPerSecondX = pixelsPerSecond.dx / size.width;\n  final unitsPerSecondY = pixelsPerSecond.dy / size.height;\n  final unitsPerSecond = Offset(unitsPerSecondX, unitsPerSecondY);\n  final unitVelocity = unitsPerSecond.distance;\n\n  const spring = SpringDescription(mass: 30, stiffness: 1, damping: 1);\n\n  final simulation = SpringSimulation(spring, 0, 1, -unitVelocity);\n\n  _controller.animateWith(simulation);\n}\n```\n\n----------------------------------------\n\nTITLE: Using Form.canPop and Form.onPopInvoked - Dart\nDESCRIPTION: This snippet shows how to use `Form.canPop` and `Form.onPopInvoked` in place of the deprecated `Form.onWillPop`.  `canPop` determines if the form can be popped, and `onPopInvoked` is triggered after the pop attempt, indicating success or failure.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/android-predictive-back.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nForm(\n  canPop: _myPopDisableEnableLogic(),\n  onPopInvoked: (bool didPop) {\n    // Handle the pop. If `didPop` is false, it was blocked.\n  },\n)\n```\n\n----------------------------------------\n\nTITLE: Using Command in a view model\nDESCRIPTION: This example demonstrates how to use the `Command` class in a view model to encapsulate an action. The `load` action is now a `Command` object, and the original `load()` method is renamed to `_load()`. The command is initialized and executed upon view model creation.  Requires Flutter SDK.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/app-architecture/design-patterns/command.md#_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nclass HomeViewModel extends ChangeNotifier {\n  HomeViewModel() {\n    load = Command(_load)..execute();\n  }\n\n  User? get user => // ...\n\n  late final Command load;\n\n  void _load() {\n    // load user\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: SQLite Database Operations in Flutter with sqflite\nDESCRIPTION: This Dart code demonstrates how to use the sqflite package to perform CRUD (Create, Read, Update, Delete) operations on a SQLite database in a Flutter application. It includes defining a Dog class, opening a database connection, creating a table, inserting data, querying data, updating data, and deleting data. It depends on the `sqflite` and `path` packages. The `WidgetsFlutterBinding.ensureInitialized()` call is necessary to interact with the underlying platform when using plugins before calling `runApp()`.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/persistence/sqlite.md#_snippet_13\n\nLANGUAGE: dart\nCODE:\n```\nimport 'dart:async';\n\nimport 'package:flutter/widgets.dart';\nimport 'package:path/path.dart';\nimport 'package:sqflite/sqflite.dart';\n\nvoid main() async {\n  // Avoid errors caused by flutter upgrade.\n  // Importing 'package:flutter/widgets.dart' is required.\n  WidgetsFlutterBinding.ensureInitialized();\n  // Open the database and store the reference.\n  final database = openDatabase(\n    // Set the path to the database. Note: Using the `join` function from the\n    // `path` package is best practice to ensure the path is correctly\n    // constructed for each platform.\n    join(await getDatabasesPath(), 'doggie_database.db'),\n    // When the database is first created, create a table to store dogs.\n    onCreate: (db, version) {\n      // Run the CREATE TABLE statement on the database.\n      return db.execute(\n        'CREATE TABLE dogs(id INTEGER PRIMARY KEY, name TEXT, age INTEGER)',\n      );\n    },\n    // Set the version. This executes the onCreate function and provides a\n    // path to perform database upgrades and downgrades.\n    version: 1,\n  );\n\n  // Define a function that inserts dogs into the database\n  Future<void> insertDog(Dog dog) async {\n    // Get a reference to the database.\n    final db = await database;\n\n    // Insert the Dog into the correct table. You might also specify the\n    // `conflictAlgorithm` to use in case the same dog is inserted twice.\n    //\n    // In this case, replace any previous data.\n    await db.insert(\n      'dogs',\n      dog.toMap(),\n      conflictAlgorithm: ConflictAlgorithm.replace,\n    );\n  }\n\n  // A method that retrieves all the dogs from the dogs table.\n  Future<List<Dog>> dogs() async {\n    // Get a reference to the database.\n    final db = await database;\n\n    // Query the table for all the dogs.\n    final List<Map<String, Object?>> dogMaps = await db.query('dogs');\n\n    // Convert the list of each dog's fields into a list of `Dog` objects.\n    return [\n      for (final {'id': id as int, 'name': name as String, 'age': age as int}\n          in dogMaps)\n        Dog(id: id, name: name, age: age),\n    ];\n  }\n\n  Future<void> updateDog(Dog dog) async {\n    // Get a reference to the database.\n    final db = await database;\n\n    // Update the given Dog.\n    await db.update(\n      'dogs',\n      dog.toMap(),\n      // Ensure that the Dog has a matching id.\n      where: 'id = ?',\n      // Pass the Dog's id as a whereArg to prevent SQL injection.\n      whereArgs: [dog.id],\n    );\n  }\n\n  Future<void> deleteDog(int id) async {\n    // Get a reference to the database.\n    final db = await database;\n\n    // Remove the Dog from the database.\n    await db.delete(\n      'dogs',\n      // Use a `where` clause to delete a specific dog.\n      where: 'id = ?',\n      // Pass the Dog's id as a whereArg to prevent SQL injection.\n      whereArgs: [id],\n    );\n  }\n\n  // Create a Dog and add it to the dogs table\n  var fido = Dog(id: 0, name: 'Fido', age: 35);\n\n  await insertDog(fido);\n\n  // Now, use the method above to retrieve all the dogs.\n  print(await dogs()); // Prints a list that include Fido.\n\n  // Update Fido's age and save it to the database.\n  fido = Dog(id: fido.id, name: fido.name, age: fido.age + 7);\n  await updateDog(fido);\n\n  // Print the updated results.\n  print(await dogs()); // Prints Fido with age 42.\n\n  // Delete Fido from the database.\n  await deleteDog(fido.id);\n\n  // Print the list of dogs (empty).\n  print(await dogs());\n}\n\nclass Dog {\n  final int id;\n  final String name;\n  final int age;\n\n  Dog({required this.id, required this.name, required this.age});\n\n  // Convert a Dog into a Map. The keys must correspond to the names of the\n  // columns in the database.\n  Map<String, Object?> toMap() {\n    return {'id': id, 'name': name, 'age': age};\n  }\n\n  // Implement toString to make it easier to see information about\n  // each dog when using the print statement.\n  @override\n  String toString() {\n    return 'Dog{id: $id, name: $name, age: $age}';\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Launching ChromeDriver\nDESCRIPTION: This command launches ChromeDriver on port 4444, making it ready to accept connections from the Flutter driver during integration tests. This must be running before the flutter drive command.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/testing/integration-tests/index.md#_snippet_12\n\nLANGUAGE: console\nCODE:\n```\n$ chromedriver --port=4444\n```\n\n----------------------------------------\n\nTITLE: Migrating from WillPopScope to PopScope\nDESCRIPTION: This is the code before the migration from WillPopScope widget to PopScope widget\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/android-predictive-back.md#_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\nWillPopScope(\n  onWillPop: () async {\n    return _myCondition;\n  },\n  child: ...\n),\n```\n\n----------------------------------------\n\nTITLE: Custom Widget with ElevatedButton Composition\nDESCRIPTION: This snippet creates a custom button widget by composing an ElevatedButton with a Text label. It demonstrates how to build custom widgets in Flutter by composing smaller widgets instead of extending them. Requires the flutter/material package.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/uikit-devs.md#_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nclass CustomButton extends StatelessWidget {\n  const CustomButton(this.label, {super.key});\n\n  final String label;\n\n  @override\n  Widget build(BuildContext context) {\n    return ElevatedButton(onPressed: () {}, child: Text(label));\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Building a Custom Widget in Flutter\nDESCRIPTION: This example demonstrates how to create a custom widget in Flutter by composing smaller widgets. It defines a `CustomButton` widget that composes an `ElevatedButton` with a specified label.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/android-devs.md#_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nclass CustomButton extends StatelessWidget {\n  final String label;\n\n  const CustomButton(this.label, {super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return ElevatedButton(onPressed: () {}, child: Text(label));\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Migrate Scrollbar.showTrackOnHover in Flutter\nDESCRIPTION: This snippet demonstrates how to migrate from the deprecated `showTrackOnHover` property in `Scrollbar` and `ScrollbarThemeData` to the new `trackVisibility` property, which utilizes `MaterialStateProperty` for more flexible state management.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/3-19-deprecations.md#_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nScrollbar(\n  showTrackOnHover: true,\n  child: //...\n);\nScrollbarThemeData(\n  showTrackOnHover: true,\n);\n```\n\nLANGUAGE: dart\nCODE:\n```\nScrollbar(\n  child: //...\n);\nScrollbarThemeData(\n  // This will always show the track for any state.\n  trackVisibility: MaterialStateProperty<bool>.all(true),\n);\n// Or\nScrollbarThemeData(\n  // Only show on hover.\n  trackVisibility: (Set<MaterialState> states) => states.contains(MaterialState.hovered),\n);\n```\n\n----------------------------------------\n\nTITLE: FinishedPage Widget to Complete Setup\nDESCRIPTION: This StatelessWidget displays a success message and a finish button after successful setup. It invokes the `onFinishPressed` callback when the button is pressed.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/effects/nested-nav.md#_snippet_10\n\nLANGUAGE: Dart\nCODE:\n```\nclass FinishedPage extends StatelessWidget {\n  const FinishedPage({super.key, required this.onFinishPressed});\n\n  final VoidCallback onFinishPressed;\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: Center(\n        child: Padding(\n          padding: const EdgeInsets.symmetric(horizontal: 24),\n          child: SingleChildScrollView(\n            child: Column(\n              mainAxisSize: MainAxisSize.min,\n              children: [\n                Container(\n                  width: 200,\n                  height: 200,\n                  decoration: const BoxDecoration(\n                    shape: BoxShape.circle,\n                    color: Color(0xFF222222),\n                  ),\n                  child: const Center(\n                    child: Icon(\n                      Icons.lightbulb,\n                      size: 140,\n                      color: Colors.white,\n                    ),\n                  ),\n                ),\n                const SizedBox(height: 32),\n                const Text(\n                  'Bulb added!',\n                  textAlign: TextAlign.center,\n                  style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold),\n                ),\n                const SizedBox(height: 32),\n                ElevatedButton(\n                  style: ButtonStyle(\n                    padding: WidgetStateProperty.resolveWith((states) {\n                      return const EdgeInsets.symmetric(\n                        horizontal: 24,\n                        vertical: 12,\n                      );\n                    }),\n                    backgroundColor: WidgetStateColor.resolveWith((states) {\n                      return const Color(0xFF222222);\n                    }),\n                    shape: WidgetStateProperty.resolveWith((states) {\n                      return const StadiumBorder();\n                    }),\n                  ),\n                  onPressed: onFinishPressed,\n                  child: const Text('Finish', style: TextStyle(fontSize: 24)),\n                ),\n              ],\n            ),\n          ),\n        ),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: CupertinoSliverNavigationBar in CustomScrollView\nDESCRIPTION: This code snippet demonstrates how to add a CupertinoSliverNavigationBar to a CustomScrollView. It sets the largeTitle property to display a title for the navigation bar.  This navigation bar shrinks when scrolling down and floats when not at the top of the page.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/lists/floating-app-bar.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nslivers: [\n  // Add the navigation bar to the CustomScrollView.\n  CupertinoSliverNavigationBar(\n    // Provide a standard title.\n    largeTitle: Text('Floating App Bar'),\n  ),\n],\n```\n\n----------------------------------------\n\nTITLE: Code After Migration - Designating a Primary ListView - Dart\nDESCRIPTION: This code demonstrates the correct way to handle multiple ListViews side-by-side after the changes. One ListView needs to be explicitly designated as `primary: true` to receive default ScrollActions. This ensures that the correct ListView is used by the PrimaryScrollController, especially on desktop platforms.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/primary-scroll-controller-desktop.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\n// These side-by-side ListViews will no longer throw errors, but for\n// default ScrollActions, one will need to be designated as primary.\nScaffold(\n  body: LayoutBuilder(\n    builder: (context, constraints) {\n      return Row(\n        children: [\n          SizedBox(\n            height: constraints.maxHeight,\n            width: constraints.maxWidth / 2,\n            child: ListView.builder(\n              // This ScrollView will use the PrimaryScrollController\n              primary: true,\n              itemBuilder: (BuildContext context, int index) {\n                return Text('List 1 - Item $index');\n              }\n            ),\n          ),\n          SizedBox(\n            height: constraints.maxHeight,\n            width: constraints.maxWidth / 2,\n            child: ListView.builder(\n              itemBuilder: (BuildContext context, int index) {\n                return Text('List 2 - Item $index');\n              }\n            ),\n          ),\n        ]\n      );\n    },\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Generating Data for Long List - Dart\nDESCRIPTION: This snippet demonstrates how to generate a list of strings, suitable for displaying in a long list.  It uses List.generate to create a list of 10,000 items, each with the format 'Item i'. This is a common pattern for creating sample data for testing and demonstration purposes.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/lists/long-lists.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nList<String>.generate(10000, (i) => 'Item $i')\n```\n\n----------------------------------------\n\nTITLE: Initializing Subscribe Button Widget, ViewModel, and Repository in Dart\nDESCRIPTION: This code snippet initializes the basic structure for a Flutter SubscribeButton widget, its corresponding ViewModel (SubscribeButtonViewModel), and a SubscriptionRepository. The SubscribeButton is a StatefulWidget, the ViewModel extends ChangeNotifier, and the Repository will handle subscription logic.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/app-architecture/design-patterns/optimistic-state.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nclass SubscribeButton extends StatefulWidget {\n  const SubscribeButton({super.key});\n\n  @override\n  State<SubscribeButton> createState() => _SubscribeButtonState();\n}\n\nclass _SubscribeButtonState extends State<SubscribeButton> {\n  @override\n  Widget build(BuildContext context) {\n    return const Placeholder();\n  }\n}\n\nclass SubscribeButtonViewModel extends ChangeNotifier {}\n\nclass SubscriptionRepository {}\n```\n\n----------------------------------------\n\nTITLE: Complete Widget Test Example Dart\nDESCRIPTION: Complete example of widget testing using flutter_test. Includes setting up the test, building the widget, finding elements, and verifying the results with matchers.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/testing/widget/introduction.md#_snippet_6\n\nLANGUAGE: Dart\nCODE:\n```\nimport 'package:flutter/material.dart';\nimport 'package:flutter_test/flutter_test.dart';\n\nvoid main() {\n  // Define a test. The TestWidgets function also provides a WidgetTester\n  // to work with. The WidgetTester allows building and interacting\n  // with widgets in the test environment.\n  testWidgets('MyWidget has a title and message', (tester) async {\n    // Create the widget by telling the tester to build it.\n    await tester.pumpWidget(const MyWidget(title: 'T', message: 'M'));\n\n    // Create the Finders.\n    final titleFinder = find.text('T');\n    final messageFinder = find.text('M');\n\n    // Use the `findsOneWidget` matcher provided by flutter_test to\n    // verify that the Text widgets appear exactly once in the widget tree.\n    expect(titleFinder, findsOneWidget);\n    expect(messageFinder, findsOneWidget);\n  });\n}\n\nclass MyWidget extends StatelessWidget {\n  const MyWidget({super.key, required this.title, required this.message});\n\n  final String title;\n  final String message;\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: 'Flutter Demo',\n      home: Scaffold(\n        appBar: AppBar(title: Text(title)),\n        body: Center(child: Text(message)),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Efficient ListView with ListView.Builder Flutter\nDESCRIPTION: This example demonstrates using ListView.builder for efficient list rendering, particularly suitable for dynamic or large datasets. It creates a ListView that only renders items currently visible on screen. The item builder function defines how each item in the list is created and displayed. The onTap function adds items without recreating the whole list.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/xamarin-forms-devs.md#_snippet_49\n\nLANGUAGE: dart\nCODE:\n```\nimport 'dart:developer' as developer;\nimport 'package:flutter/material.dart';\n\nvoid main() {\n  runApp(const SampleApp());\n}\n\nclass SampleApp extends StatelessWidget {\n  /// This widget is the root of your application.\n  const SampleApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return const MaterialApp(title: 'Sample App', home: SampleAppPage());\n  }\n}\n\nclass SampleAppPage extends StatefulWidget {\n  const SampleAppPage({super.key});\n\n  @override\n  State<SampleAppPage> createState() => _SampleAppPageState();\n}\n\nclass _SampleAppPageState extends State<SampleAppPage> {\n  List<Widget> widgets = [];\n\n  @override\n  void initState() {\n    super.initState();\n    for (int i = 0; i < 100; i++) {\n      widgets.add(getRow(i));\n    }\n  }\n\n  Widget getRow(int index) {\n    return GestureDetector(\n      onTap: () {\n        setState(() {\n          widgets.add(getRow(widgets.length));\n          developer.log('Row $index');\n        });\n      },\n      child: Padding(\n        padding: const EdgeInsets.all(10),\n        child: Text('Row $index'),\n      ),\n    );\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: const Text('Sample App')),\n      body: ListView.builder(\n        itemCount: widgets.length,\n        itemBuilder: (context, index) {\n          return getRow(index);\n        },\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Export iOS Distribution Certificate Private Key\nDESCRIPTION: This command exports the private key from an existing iOS Distribution certificate. The exported private key can then be used by Codemagic CLI tools to sign the app.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/deployment/ios.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nopenssl pkcs12 -in <certificate_name>.p12 -nodes -nocerts | openssl rsa -out cert_key\n```\n\n----------------------------------------\n\nTITLE: Initializing TabController in Flutter\nDESCRIPTION: This snippet shows how to initialize a TabController using the DefaultTabController widget. It creates a MaterialApp with a DefaultTabController and sets the length parameter to define the number of tabs.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/design/tabs.md#_snippet_0\n\nLANGUAGE: Dart\nCODE:\n```\nreturn MaterialApp(\n  home: DefaultTabController(length: 3, child: Scaffold()),\n);\n```\n\n----------------------------------------\n\nTITLE: Invoking Method Channel Asynchronously\nDESCRIPTION: This code snippet demonstrates how to invoke a method channel asynchronously within an onPressed callback.  It uses the MethodChannel class to invoke a method named 'blah'. If the method call throws an error, it will be forwarded to the PlatformDispatcher's error handler, rather than FlutterError.onError.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/testing/errors.md#_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nOutlinedButton(\n  child: const Text('Click me!'),\n  onPressed: () async {\n    const channel = MethodChannel('crashy-custom-channel');\n    await channel.invokeMethod('blah');\n  },\n)\n```\n\n----------------------------------------\n\nTITLE: MaterialApp with ThemeData for Styling in Flutter\nDESCRIPTION: This Dart snippet shows how to theme a Flutter app using MaterialApp and ThemeData. It demonstrates how to set the color scheme and text selection color for the entire application.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/xamarin-forms-devs.md#_snippet_56\n\nLANGUAGE: dart\nCODE:\n```\nclass SampleApp extends StatelessWidget {\n  /// This widget is the root of your application.\n  const SampleApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: 'Sample App',\n      theme: ThemeData(\n        colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),\n        textSelectionTheme: const TextSelectionThemeData(\n          selectionColor: Colors.red,\n        ),\n      ),\n      home: const SampleAppPage(),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Define ListItem abstract class and subclasses in Dart\nDESCRIPTION: This code defines an abstract class `ListItem` and two concrete subclasses, `HeadingItem` and `MessageItem`. These classes represent different types of items that can be displayed in a list. Each class implements the `buildTitle` and `buildSubtitle` methods, which return widgets to display the item's title and subtitle respectively. It defines the structure for different types of data to be shown in a list.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/lists/mixed-list.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n/// The base class for the different types of items the list can contain.\nabstract class ListItem {\n  /// The title line to show in a list item.\n  Widget buildTitle(BuildContext context);\n\n  /// The subtitle line, if any, to show in a list item.\n  Widget buildSubtitle(BuildContext context);\n}\n\n/// A ListItem that contains data to display a heading.\nclass HeadingItem implements ListItem {\n  final String heading;\n\n  HeadingItem(this.heading);\n\n  @override\n  Widget buildTitle(BuildContext context) {\n    return Text(heading, style: Theme.of(context).textTheme.headlineSmall);\n  }\n\n  @override\n  Widget buildSubtitle(BuildContext context) => const SizedBox.shrink();\n}\n\n/// A ListItem that contains data to display a message.\nclass MessageItem implements ListItem {\n  final String sender;\n  final String body;\n\n  MessageItem(this.sender, this.body);\n\n  @override\n  Widget buildTitle(BuildContext context) => Text(sender);\n\n  @override\n  Widget buildSubtitle(BuildContext context) => Text(body);\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Data with HTTP Client in Flutter (fetchAlbum)\nDESCRIPTION: Defines a function `fetchAlbum` that fetches data from a specified URL using an injected `http.Client`. It parses the JSON response if the status code is 200, and throws an exception otherwise. The use of `http.Client` dependency injection enables easier testing with mock clients.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/testing/unit/mocking.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nFuture<Album> fetchAlbum(http.Client client) async {\n  final response = await client.get(\n    Uri.parse('https://jsonplaceholder.typicode.com/albums/1'),\n  );\n\n  if (response.statusCode == 200) {\n    // If the server did return a 200 OK response,\n    // then parse the JSON.\n    return Album.fromJson(jsonDecode(response.body) as Map<String, dynamic>);\n  } else {\n    // If the server did not return a 200 OK response,\n    // then throw an exception.\n    throw Exception('Failed to load album');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Actions.handler to create an onPressed callback in Dart\nDESCRIPTION: This code snippet demonstrates how to use `Actions.handler` to create a callback function for a button's `onPressed` property. It retrieves a handler function for the `SelectAllIntent` and assigns it to the button's `onPressed` callback. If no enabled action for the intent is found, `Actions.handler` returns null, effectively disabling the button. An Actions widget must exist higher in the widget tree.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/interactivity/actions-and-shortcuts.md#_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\n@override\nWidget build(BuildContext context) {\n  return Actions(\n    actions: <Type, Action<Intent>>{SelectAllIntent: SelectAllAction(model)},\n    child: Builder(\n      builder:\n          (context) => TextButton(\n            onPressed: Actions.handler<SelectAllIntent>(\n              context,\n              SelectAllIntent(controller: controller),\n            ),\n            child: const Text('SELECT ALL'),\n          ),\n    ),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Create Album and Parse JSON Response in Dart\nDESCRIPTION: Asynchronously creates an album by sending an HTTP POST request with the provided title. It parses the JSON response and creates an `Album` object if the server returns a 201 CREATED status code, otherwise, throws an exception.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/networking/send-data.md#_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nFuture<Album> createAlbum(String title) async {\n  final response = await http.post(\n    Uri.parse('https://jsonplaceholder.typicode.com/albums'),\n    headers: <String, String>{\n      'Content-Type': 'application/json; charset=UTF-8',\n    },\n    body: jsonEncode(<String, String>{'title': title}),\n  );\n\n  if (response.statusCode == 201) {\n    // If the server did return a 201 CREATED response,\n    // then parse the JSON.\n    return Album.fromJson(jsonDecode(response.body) as Map<String, dynamic>);\n  } else {\n    // If the server did not return a 201 CREATED response,\n    // then throw an exception.\n    throw Exception('Failed to create album.');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Import Google Sign-In Extension for Authentication\nDESCRIPTION: Imports the extension_google_sign_in_as_googleapis_auth package, which provides an extension method on GoogleSignIn to obtain an authenticated HTTP client. This client is then used to interact with the Google APIs.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/data-and-backend/google-apis.md#_snippet_3\n\nLANGUAGE: Dart\nCODE:\n```\nimport 'package:extension_google_sign_in_as_googleapis_auth/extension_google_sign_in_as_googleapis_auth.dart';\n```\n\n----------------------------------------\n\nTITLE: TextButton with focus overlay color override in Dart\nDESCRIPTION: This snippet demonstrates how to override only the focus overlay color of a TextButton using MaterialStateProperty.resolveWith. It sets the focus overlay color to red, while deferring to the widget's default for other states.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/buttons.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nTextButton(\n  style: ButtonStyle(\n    overlayColor: MaterialStateProperty.resolveWith<Color?>(\n      (Set<MaterialState> states) {\n        if (states.contains(MaterialState.focused))\n          return Colors.red;\n        return null; // Defer to the widget's default.\n      }\n    ),\n  ),\n  onPressed: () { },\n  child: Text('TextButton'),\n)\n```\n\n----------------------------------------\n\nTITLE: Building Flutter Web App with Wasm\nDESCRIPTION: The command builds a Flutter web application with WebAssembly enabled. The `--wasm` flag instructs the Flutter toolchain to compile the application to Wasm, while the `flutter build web` command handles the web build process.  The output is placed in the `build/web` directory.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/platform-integration/web/wasm.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ flutter build web --wasm\n```\n\n----------------------------------------\n\nTITLE: Listen for Shimmer Changes in Flutter\nDESCRIPTION: Listens for changes to the ancestor `ShimmerState`'s `shimmerChanges` property in `ShimmerLoading` and repaints the shimmer gradient. This ensures that the `ShimmerLoading` widget updates when the shimmer animation changes, creating a dynamic shimmer effect.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/effects/shimmer-loading.md#_snippet_13\n\nLANGUAGE: dart\nCODE:\n```\nclass _ShimmerLoadingState extends State<ShimmerLoading> {\n  Listenable? _shimmerChanges;\n\n  @override\n  void didChangeDependencies() {\n    super.didChangeDependencies();\n    if (_shimmerChanges != null) {\n      _shimmerChanges!.removeListener(_onShimmerChange);\n    }\n    _shimmerChanges = Shimmer.of(context)?.shimmerChanges;\n    if (_shimmerChanges != null) {\n      _shimmerChanges!.addListener(_onShimmerChange);\n    }\n  }\n\n  @override\n  void dispose() {\n    _shimmerChanges?.removeListener(_onShimmerChange);\n    super.dispose();\n  }\n\n  void _onShimmerChange() {\n    if (widget.isLoading) {\n      setState(() {\n        // Update the shimmer painting.\n      });\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Styling Text in Flutter\nDESCRIPTION: This snippet illustrates how to style text in Flutter using the `TextStyle` widget. It sets the font size, font weight, and color of the text using the corresponding properties of the `TextStyle` widget.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/swiftui-devs.md#_snippet_29\n\nLANGUAGE: Dart\nCODE:\n```\nText(\n  'Hello, world!',\n  style: TextStyle(\n    fontSize: 30,\n    fontWeight: FontWeight.bold,\n    color: CupertinoColors.systemYellow,\n  ),\n),\n```\n\n----------------------------------------\n\nTITLE: Drawing on a Canvas with CustomPaint in Flutter\nDESCRIPTION: Shows how to draw shapes on a canvas using `CustomPaint` and `CustomPainter` in Flutter. The `MyCanvasPainter` class extends `CustomPainter` and implements the `paint` method to draw a circle and a rectangle. `MyCanvasWidget` uses `CustomPaint` to render the custom painting.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/react-native-devs.md#_snippet_23\n\nLANGUAGE: dart\nCODE:\n```\nclass MyCanvasPainter extends CustomPainter {\n  const MyCanvasPainter();\n\n  @override\n  void paint(Canvas canvas, Size size) {\n    final Paint paint = Paint()..color = Colors.amber;\n    canvas.drawCircle(const Offset(100, 200), 40, paint);\n    final Paint paintRect = Paint()..color = Colors.lightBlue;\n    final Rect rect = Rect.fromPoints(\n      const Offset(150, 300),\n      const Offset(300, 400),\n    );\n    canvas.drawRect(rect, paintRect);\n  }\n\n  @override\n  bool shouldRepaint(MyCanvasPainter oldDelegate) => false;\n}\n\nclass MyCanvasWidget extends StatelessWidget {\n  const MyCanvasWidget({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return const Scaffold(body: CustomPaint(painter: MyCanvasPainter()));\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Launching FlutterActivity with transparency (Java)\nDESCRIPTION: These Java snippets demonstrate how to launch a `FlutterActivity` with a transparent background using `FlutterActivity.withNewEngine()` or `FlutterActivity.withCachedEngine()`. The `backgroundMode` is set to `FlutterActivityLaunchConfigs.BackgroundMode.transparent` to enable transparency.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/add-to-app/android/add-flutter-screen.md#_snippet_14\n\nLANGUAGE: java\nCODE:\n```\n// Using a new FlutterEngine.\nstartActivity(\n  FlutterActivity\n    .withNewEngine()\n    .backgroundMode(FlutterActivityLaunchConfigs.BackgroundMode.transparent)\n    .build(context)\n);\n\n// Using a cached FlutterEngine.\nstartActivity(\n  FlutterActivity\n    .withCachedEngine(\"my_engine_id\")\n    .backgroundMode(FlutterActivityLaunchConfigs.BackgroundMode.transparent)\n    .build(context)\n);\n```\n\n----------------------------------------\n\nTITLE: Loading Data in Background Isolate in Flutter\nDESCRIPTION: This code demonstrates how to load data in a background `Isolate` to avoid blocking the main UI thread for CPU-intensive tasks. It spawns an Isolate, sends a URL to it, receives the data, and updates the UI using `setState()`. It uses `ReceivePort` and `SendPort` for inter-isolate communication.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/uikit-devs.md#_snippet_27\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> loadData() async {\n  final ReceivePort receivePort = ReceivePort();\n  await Isolate.spawn(dataLoader, receivePort.sendPort);\n\n  // The 'echo' isolate sends its SendPort as the first message.\n  final SendPort sendPort = await receivePort.first as SendPort;\n\n  final List<Map<String, dynamic>> msg = await sendReceive(\n    sendPort,\n    'https://jsonplaceholder.typicode.com/posts',\n  );\n\n  setState(() {\n    data = msg;\n  });\n}\n\n// The entry point for the isolate.\nstatic Future<void> dataLoader(SendPort sendPort) async {\n  // Open the ReceivePort for incoming messages.\n  final ReceivePort port = ReceivePort();\n\n  // Notify any other isolates what port this isolate listens to.\n  sendPort.send(port.sendPort);\n\n  await for (final dynamic msg in port) {\n    final String url = msg[0] as String;\n    final SendPort replyTo = msg[1] as SendPort;\n\n    final Uri dataURL = Uri.parse(url);\n    final http.Response response = await http.get(dataURL);\n    // Lots of JSON to parse\n    replyTo.send(jsonDecode(response.body) as List<Map<String, dynamic>>);\n  }\n}\n\nFuture<List<Map<String, dynamic>>> sendReceive(SendPort port, String msg) {\n  final ReceivePort response = ReceivePort();\n  port.send(<dynamic>[msg, response.sendPort]);\n  return response.first as Future<List<Map<String, dynamic>>>;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating ListView with ListView.builder\nDESCRIPTION: This code snippet demonstrates a more efficient way to dynamically update a ListView using ListView.builder in Flutter.  It takes an item count and itemBuilder. The itemBuilder function returns the widget to be rendered at each position.  A GestureDetector is used to add a new row to the list on tap.  It uses dart:developer for logging purposes.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/uikit-devs.md#_snippet_20\n\nLANGUAGE: Dart\nCODE:\n```\nimport 'dart:developer' as developer;\n\nimport 'package:flutter/material.dart';\n\nvoid main() {\n  runApp(const SampleApp());\n}\n\nclass SampleApp extends StatelessWidget {\n  const SampleApp({super.key});\n  // This widget is the root of your application.\n  @override\n  Widget build(BuildContext context) {\n    return const MaterialApp(title: 'Sample App', home: SampleAppPage());\n  }\n}\n\nclass SampleAppPage extends StatefulWidget {\n  const SampleAppPage({super.key});\n\n  @override\n  State<SampleAppPage> createState() => _SampleAppPageState();\n}\n\nclass _SampleAppPageState extends State<SampleAppPage> {\n  List<Widget> widgets = [];\n\n  @override\n  void initState() {\n    super.initState();\n    for (int i = 0; i < 100; i++) {\n      widgets.add(getRow(i));\n    }\n  }\n\n  Widget getRow(int i) {\n    return GestureDetector(\n      onTap: () {\n        setState(() {\n          widgets.add(getRow(widgets.length));\n          developer.log('row $i');\n        });\n      },\n      child: Padding(padding: const EdgeInsets.all(10), child: Text('Row $i')),\n    );\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: const Text('Sample App')),\n      body: ListView.builder(\n        itemCount: widgets.length,\n        itemBuilder: (context, position) {\n          return getRow(position);\n        },\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Commands in a Flutter ViewModel\nDESCRIPTION: This code snippet demonstrates how to define multiple command classes within a single ViewModel in Flutter. It defines a `HomeViewModel2` class that extends `ChangeNotifier` and initializes two commands, `load` and `delete`, in its constructor.  The `load` command is executed immediately after initialization. Each command is responsible for a specific action related to the ViewModel's data. This approach simplifies ViewModel implementation and reduces code duplication.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/app-architecture/design-patterns/command.md#_snippet_16\n\nLANGUAGE: dart\nCODE:\n```\nclass HomeViewModel2 extends ChangeNotifier {\n  HomeViewModel2() {\n    load = Command(_load)..execute();\n    delete = Command(_delete);\n  }\n\n  User? get user => // ...\n\n  late final Command load;\n\n  late final Command delete;\n\n  Future<void> _load() async {\n    // load user\n  }\n\n  Future<void> _delete() async {\n    // delete user\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating Actions Mapping for Pre-defined Actions in Flutter\nDESCRIPTION: This code snippet demonstrates how to update the action maps in the `Actions` widget for predefined actions in Flutter, such as `ActivateAction` and `SelectAction`. It involves updating the argument type of the `actions` argument and using an instance of a specific `Intent` class in the `Shortcuts` mapping. The `ActivateIntent` constant is used instead of creating an `Intent` instance with `ActivateAction.key`.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/actions-api-revision.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nclass MyWidget extends StatelessWidget {\n  // ...\n  @override\n  Widget build(BuildContext context) {\n    return Shortcuts(\n      shortcuts: <LogicalKeySet, Intent> {\n        LogicalKeySet(LogicalKeyboardKey.enter): Intent(ActivateAction.key),\n      },\n      child: Actions(\n        actions: <LocalKey, ActionFactory>{\n          Activate.key: () => ActivateAction(),\n        },\n        child: Container(),\n      )\n    );\n  }\n}\n```\n\nLANGUAGE: dart\nCODE:\n```\nclass MyWidget extends StatelessWidget {\n  // ...\n  @override\n  Widget build(BuildContext context) {\n    return Shortcuts(\n      shortcuts: <LogicalKeySet, Intent> {\n        LogicalKeySet(LogicalKeyboardKey.enter): ActivateIntent,\n      },\n      child: Actions(\n        actions: <Type, Action<Intent>>{\n          ActivateIntent: ActivateAction(),\n        },\n        child: Container(),\n      )\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using HardwareKeyboard for Global Keyboard Listener\nDESCRIPTION: This snippet demonstrates how to use `HardwareKeyboard` to implement a global keyboard listener in a Flutter application. The `addHandler` method is used to register a callback (_handleKey) that will be invoked for every keyboard event. The handler is removed in the dispose method to prevent memory leaks.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/adaptive-responsive/input.md#_snippet_5\n\nLANGUAGE: Dart\nCODE:\n```\n@override\nvoid initState() {\n  super.initState();\n  HardwareKeyboard.instance.addHandler(_handleKey);\n}\n\n@override\nvoid dispose() {\n  HardwareKeyboard.instance.removeHandler(_handleKey);\n  super.dispose();\n}\n```\n\n----------------------------------------\n\nTITLE: Initialize Future in State's initState Method in Dart\nDESCRIPTION: This snippet shows how to initialize a `Future` within the `initState` method of a Flutter `State` object. The `initState` method is called only once when the widget is first created, making it suitable for initiating asynchronous operations like fetching data. The result is stored in `futureAlbum` for later use.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/networking/fetch-data.md#_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nclass _MyAppState extends State<MyApp> {\n  late Future<Album> futureAlbum;\n\n  @override\n  void initState() {\n    super.initState();\n    futureAlbum = fetchAlbum();\n  }\n  // ···\n}\n```\n\n----------------------------------------\n\nTITLE: ApiClientService Class Implementation (Result)\nDESCRIPTION: Implements the getUserProfile method of the ApiClientService class using the Result pattern. It wraps the successful UserProfile in Result.ok and any exceptions in Result.error, ensuring that the caller handles potential errors.  Dependencies: http client, utf8 decoder, jsonDecode, Result.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/app-architecture/design-patterns/result.md#_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nclass ApiClientService {\n  // ···\n\n  Future<Result<UserProfile>> getUserProfile() async {\n    try {\n      final request = await client.get(_host, _port, '/user');\n      final response = await request.close();\n      if (response.statusCode == 200) {\n        final stringData = await response.transform(utf8.decoder).join();\n        return Result.ok(UserProfile.fromJson(jsonDecode(stringData)));\n      } else {\n        return const Result.error(HttpException('Invalid response'));\n      }\n    } on Exception catch (exception) {\n      return Result.error(exception);\n    } finally {\n      client.close();\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: MenuButtonThemeData Text Style After Migration (Dart)\nDESCRIPTION: This code shows how to explicitly set the text style of a MenuButtonThemeData to match the previous (non-Material 3) default text style. This involves accessing the Theme's bodyLarge text style.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/menus-text-style.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nmenuButtonTheme: MenuButtonThemeData(\n  style: MenuItemButton.styleFrom(\n    textStyle: Theme.of(context).textTheme.bodyLarge,\n  ),\n),\n```\n\n----------------------------------------\n\nTITLE: Migrating deprecated background color role in Dart\nDESCRIPTION: This code shows how to migrate away from the deprecated `background` color role to using `surface` in a `MaterialApp`'s `ThemeData`.  The code snippet replaces `background` with `surface`, `onBackground` with `onSurface`, and `surfaceVariant` with `surfaceContainerHighest` in the color scheme.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/new-color-scheme-roles.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nfinal ColorScheme colorScheme = ColorScheme();\nMaterialApp(\n  theme: ThemeData(\n    //...\n    colorScheme: colorScheme.copyWith(\n      surface: myColor1,\n      onSurface: myColor2,\n      surfaceContainerHighest: myColor3,\n    ),\n  ),\n  //...\n)\n\n```\n\n----------------------------------------\n\nTITLE: Console: Navigating to Flutter Project\nDESCRIPTION: This console command shows how to navigate to the root directory of a Flutter project using the command line. This is a common step when working with Flutter projects from the terminal.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/design/fonts.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ cd /path/to/custom_fonts\n```\n\n----------------------------------------\n\nTITLE: Managing UI state (running, error) in the view model\nDESCRIPTION: This snippet demonstrates how to manage UI state, such as `running` and `error`, within the view model.  These states allow the view to display a progress indicator or an error message depending on the state of an action. No external dependencies beyond the Flutter SDK are required.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/app-architecture/design-patterns/command.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nclass HomeViewModel extends ChangeNotifier {\n\n  User? get user => // ...\n\n  bool get running => // ...\n\n  Exception? get error => // ...\n\n  void load() {\n    // load user\n  }\n  // ···\n}\n```\n\n----------------------------------------\n\nTITLE: Build Flutter iOS App\nDESCRIPTION: This command builds the Flutter iOS project for release. It generates an IPA file that can be uploaded to App Store Connect. The `--export-options-plist` flag specifies the export options plist file, which is typically the output of the `xcode-project use-profiles` command.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/deployment/ios.md#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nflutter build ipa --release \\\n    --export-options-plist=$HOME/export_options.plist\n```\n\n----------------------------------------\n\nTITLE: TextField with MaxLengthEnforcement.enforced (Dart)\nDESCRIPTION: Illustrates how to use `MaxLengthEnforcement.enforced` with `maxLength` after the migration. This enforces the maximum length, truncating the input.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/use-maxLengthEnforcement-instead-of-maxLengthEnforced.md#_snippet_2\n\nLANGUAGE: Dart\nCODE:\n```\nTextField(\n  maxLength: 6,\n  maxLengthEnforcement: MaxLengthEnforcement.enforced,\n)\n```\n\n----------------------------------------\n\nTITLE: Rendering a Simple List with ListView.builder in Flutter\nDESCRIPTION: Illustrates how to create a dynamic list of widgets in Flutter using `ListView.builder`.  The `itemBuilder` function is called for each visible item, allowing for efficient rendering of large lists. It takes context and the index of the item and returns a widget.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/react-native-devs.md#_snippet_20\n\nLANGUAGE: dart\nCODE:\n```\nvar data = ['Hello', 'World'];\nreturn ListView.builder(\n  itemCount: data.length,\n  itemBuilder: (context, index) {\n    return Text(data[index]);\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: RawGestureDetector Pan Gesture After Migration (Trackpad)\nDESCRIPTION: This snippet demonstrates the correct way to use RawGestureDetector after the trackpad support changes. It explicitly sets the supportedDevices for PanGestureRecognizer to exclude PointerDeviceKind.trackpad, ensuring precise control over gesture recognition.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/trackpad-gestures.md#_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\n// Example of code after the change.\nvoid main() => runApp(Foo());\n\nclass Foo extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return RawGestureDetector(\n      gestures: {\n        PanGestureRecognizer:\n            GestureRecognizerFactoryWithHandlers<PanGestureRecognizer>(\n          () => PanGestureRecognizer(\n            supportedDevices: {\n              PointerDeviceKind.touch,\n              PointerDeviceKind.mouse,\n              PointerDeviceKind.stylus,\n              PointerDeviceKind.invertedStylus,\n              // Do not include PointerDeviceKind.trackpad\n            }\n          ),\n          (recognizer) {\n            recognizer\n              ..onStart = (details) {\n                debugPrint('onStart');\n              }\n              ..onUpdate = (details) {\n                debugPrint('onUpdate');\n              }\n              ..onEnd = (details) {\n                debugPrint('onEnd');\n              };\n          },\n        ),\n      },\n      child: Container()\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: HomeViewModel extending ChangeNotifier in Dart\nDESCRIPTION: This snippet shows how the `HomeViewModel` extends `ChangeNotifier` to trigger UI updates when new data is available.  By extending `ChangeNotifier`, the view model can notify the view when the state changes, causing it to re-render. The `notifyListeners()` method is crucial for updating the UI.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/app-architecture/case-study/ui-layer.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nclass HomeViewModel [!extends ChangeNotifier!] {\n  HomeViewModel({\n   required BookingRepository bookingRepository,\n   required UserRepository userRepository,\n  }) : _bookingRepository = bookingRepository,\n      _userRepository = userRepository;\n  final BookingRepository _bookingRepository;\n  final UserRepository _userRepository;\n\n  User? _user;\n  User? get user => _user;\n\n  List<BookingSummary> _bookings = [];\n  List<BookingSummary> get bookings => _bookings;\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Running Flutter in Release Mode\nDESCRIPTION: This command compiles the Flutter application in release mode, optimizing for maximum performance and minimal size, suitable for deployment.  It disables assertions and debugging information.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/testing/build-modes.md#_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\nflutter run --release\n```\n\n----------------------------------------\n\nTITLE: State Modification Before setState - Dart\nDESCRIPTION: This code snippet demonstrates an illegal state modification within a Flutter widget's `build` method. Assigning the return value of `Navigator.pushNamed` directly to `buttonLabel` modifies the state without using `setState`, leading to potential issues after the OverlayEntry optimization. This example shows the code before applying the fix.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/overlay-entry-rebuilds.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nclass FooState extends State<Foo> {\n  String buttonLabel = 'Click Me';\n  @override\n  Widget build(BuildContext context) {\n    return ElevatedButton(\n      onPressed: () async {\n        // Illegal state modification that should be wrapped in setState.\n        buttonLabel = await Navigator.pushNamed(context, '/bar');\n      },\n      child: Text(buttonLabel),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating App Body to Scrolling View Dart\nDESCRIPTION: This diff shows how to change the app body to a scrolling view using SingleChildScrollView and Column widgets. The SingleChildScrollView allows for scrolling when the content exceeds the screen size, and the Column arranges its children vertically.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/layout/tutorial.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\n- body: const Center(\n-   child: Text('Hello World'),\n+ body: const SingleChildScrollView(\n+   child: Column(\n+     children: [\n```\n\n----------------------------------------\n\nTITLE: UserProfileRepository Class Definition (Result)\nDESCRIPTION: Modifies the UserProfileRepository class to use the Result pattern. The getUserProfile method now returns a Result<UserProfile>.  It simply calls the getUserProfile method of the ApiClientService and returns the Result. No error handling is performed within this repository. Dependency: ApiClientService, Result.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/app-architecture/design-patterns/result.md#_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nFuture<Result<UserProfile>> getUserProfile() async {\n  return await _apiClientService.getUserProfile();\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Internet Permission on Android\nDESCRIPTION: Shows the XML code snippet needed to request internet access permission in the `AndroidManifest.xml` file of an Android application.  This is required for network communication.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ai-toolkit/index.md#_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\">\n    ...\n    <uses-permission android:name=\"android.permission.INTERNET\"/>\n</manifest>\n```\n\n----------------------------------------\n\nTITLE: Building Row with Expanded Children in Flutter\nDESCRIPTION: This example showcases the use of Expanded within a Row.  The Row won't let this child define its own width anymore, and will define the Expanded width according to other children, and then the Expanded forces the original child to have the Expanded's width.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/layout/constraints.md#_snippet_25\n\nLANGUAGE: dart\nCODE:\n```\n'Row(children:[\\n'   'Expanded(\\n'   '       child: Container(color: red, child: Text(\\'…\\')))\\n'   '   Container(color: green, child: Text(\\'Goodbye!\\'))]'\n```\n\n----------------------------------------\n\nTITLE: Creating a Stateful Widget\nDESCRIPTION: This snippet demonstrates a stateful widget CounterWidget. It uses StatefulWidget and State to manage a counter that increments. The setState method is used to trigger a rebuild of the UI when the counter changes.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/fundamentals/widgets.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nclass CounterWidget extends StatefulWidget {\n  @override\n  State<CounterWidget> createState() => _CounterWidgetState();\n}\n\nclass _CounterWidgetState extends State<CounterWidget> {\n  int _counter = 0;\n\n  void _incrementCounter() {\n    setState(() {\n      _counter++;\n    });\n  }\n  \n  @override\n  Widget build(BuildContext context) {\n    return Text('$_counter');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Tap Action Flutter Driver\nDESCRIPTION: This snippet demonstrates how to perform a tap action on a widget using flutter_driver.  It uses `driver.tap` to tap a widget identified by a finder. It uses `waitForAbsent` to verify a widget is no longer displayed.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/flutter-driver-migration.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\ntest('tap on the first item (Alder), verify selected', () async {\n  // find the item by text\n  final item = find.text('Alder');\n\n  // Wait for the list item to appear.\n  await driver.waitFor(item);\n\n  // Emulate a tap on the tile item.\n  await driver.tap(item);\n\n  // Wait for species name to be displayed\n  await driver.waitFor(find.text('Alnus'));\n\n  // 'please select' text should not be displayed\n  await driver.waitForAbsent(\n    find.text('Please select a plant from the list.'),\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Parse JSON Response into List of Photos\nDESCRIPTION: This code defines the `parsePhotos` function, which converts the HTTP response body into a `List<Photo>` using `jsonDecode`. It also includes an updated `fetchPhotos` function that synchronously calls `parsePhotos` in the main isolate.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/networking/background-parsing.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\n// A function that converts a response body into a List<Photo>.\nList<Photo> parsePhotos(String responseBody) {\n  final parsed =\n      (jsonDecode(responseBody) as List).cast<Map<String, dynamic>>();\n\n  return parsed.map<Photo>((json) => Photo.fromJson(json)).toList();\n}\n\nFuture<List<Photo>> fetchPhotos(http.Client client) async {\n  final response = await client.get(\n    Uri.parse('https://jsonplaceholder.typicode.com/photos'),\n  );\n\n  // Synchronously run parsePhotos in the main isolate.\n  return parsePhotos(response.body);\n}\n```\n\n----------------------------------------\n\nTITLE: Update MainActivity for v2 Embedding - Java\nDESCRIPTION: This code snippet updates the example app's `MainActivity.java` to use the v2 embedding `FlutterActivity`. This step is crucial for projects that have not yet adopted the v2 embedding and are using plugins that rely on it. It removes the need for manual plugin registration.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/plugin-api-migration.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\npackage io.flutter.plugins.firebasecoreexample;\n\nimport io.flutter.embedding.android.FlutterActivity;\nimport io.flutter.embedding.engine.FlutterEngine;\nimport io.flutter.plugins.firebase.core.FirebaseCorePlugin;\n\npublic class MainActivity extends FlutterActivity {\n  // You can keep this empty class or remove it. Plugins on the new embedding\n  // now automatically registers plugins.\n}\n\n```\n\n----------------------------------------\n\nTITLE: Self-Managed State Tapbox Implementation in Flutter\nDESCRIPTION: This code demonstrates how a Flutter widget can manage its own state. The TapboxA widget manages its active state internally using the _TapboxAState class. The _handleTap() function updates the _active boolean and calls setState() to rebuild the UI when the box is tapped, toggling between green and grey.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/interactivity/index.md#_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\n\n// TapboxA manages its own state.\n\n//------------------------- TapboxA ----------------------------------\n\nclass TapboxA extends StatefulWidget {\n  const TapboxA({super.key});\n\n  @override\n  State<TapboxA> createState() => _TapboxAState();\n}\n\nclass _TapboxAState extends State<TapboxA> {\n  bool _active = false;\n\n  void _handleTap() {\n    setState(() {\n      _active = !_active;\n    });\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return GestureDetector(\n      onTap: _handleTap,\n      child: Container(\n        width: 200,\n        height: 200,\n        decoration: BoxDecoration(\n          color: _active ? Colors.lightGreen[700] : Colors.grey[600],\n        ),\n        child: Center(\n          child: Text(\n            _active ? 'Active' : 'Inactive',\n            style: const TextStyle(fontSize: 32, color: Colors.white),\n          ),\n        ),\n      ),\n    );\n  }\n}\n\n//------------------------- MyApp ----------------------------------\n\nclass MyApp extends StatelessWidget {\n  const MyApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: 'Flutter Demo',\n      home: Scaffold(\n        appBar: AppBar(title: const Text('Flutter Demo')),\n        body: const Center(child: TapboxA()),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Async/Await: Dart\nDESCRIPTION: This snippet demonstrates the use of `async` and `await` keywords in Dart for asynchronous programming, similar to JavaScript. It retrieves data from an API and handles potential errors.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/react-native-devs.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\n// JavaScript\nclass Example {\n  async function _getIPAddress() {\n    const url = 'https://httpbin.org/ip';\n    const response = await fetch(url);\n    const json = await response.json();\n    const data = json.origin;\n    return data;\n  }\n}\n\nasync function main() {\n  const example = new Example();\n  try {\n    const ip = await example._getIPAddress();\n    console.log(ip);\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nmain();\n```\n\nLANGUAGE: Dart\nCODE:\n```\n// Dart\nimport 'dart:convert';\n\nimport 'package:http/http.dart' as http;\n\nclass Example {\n  Future<String> _getIPAddress() async {\n    final url = Uri.https('https://httpbin.org', '/ip');\n    final response = await http.get(url);\n    final ip = jsonDecode(response.body)['origin'] as String;\n    return ip;\n  }\n}\n\n/// An async function returns a `Future`.\n/// It can also return `void`, unless you use\n/// the `avoid_void_async` lint. In that case,\n/// return `Future<void>`.\nvoid main() async {\n  final example = Example();\n  try {\n    final ip = await example._getIPAddress();\n    print(ip);\n  } catch (error) {\n    print(error);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Material Flutter App - Dart\nDESCRIPTION: Illustrates how to create a Flutter app using the Material Design library. This example uses `MaterialApp` and `Scaffold` to provide a basic app structure with an `AppBar` and a centered `Text` widget in the body.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/layout/index.md#_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nclass MyApp extends StatelessWidget {\n  const MyApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    const String appTitle = 'Flutter layout demo';\n    return MaterialApp(\n      title: appTitle,\n      home: Scaffold(\n        appBar: AppBar(title: const Text(appTitle)),\n        body: const Center(\n          child: Text('Hello World'),\n        ),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Data from Network with http Flutter\nDESCRIPTION: This code snippet demonstrates how to fetch data from a remote API using the `http` package in Flutter. It defines an `async` function `loadData` that makes an HTTP GET request and updates the state with the received data.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/uikit-devs.md#_snippet_30\n\nLANGUAGE: Dart\nCODE:\n```\nFuture<void> loadData() async {\n  final Uri dataURL = Uri.parse('https://jsonplaceholder.typicode.com/posts');\n  final http.Response response = await http.get(dataURL);\n  setState(() {\n    data = (jsonDecode(response.body) as List).cast<Map<String, Object?>>();\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies in build.gradle.kts (Kotlin)\nDESCRIPTION: This snippet shows how to configure dependencies in the `app/build.gradle.kts` file to include a Flutter module as an AAR dependency.  It defines debug, release, and profile implementations for different build types.  The snippet assumes the existence of `com.example.flutter_module` AAR artifacts.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/add-to-app/android/project-setup.md#_snippet_10\n\nLANGUAGE: Kotlin\nCODE:\n```\nandroid {\n    buildTypes {\n        release {\n          ...\n        }\n        debug {\n          ...\n        }\n        create(\"profile\") {\n            initWith(getByName(\"debug\"))\n        }\n}\n\ndependencies {\n  // ...\n  debugImplementation(\"com.example.flutter_module:flutter_debug:1.0\")\n  releaseImplementation(\"com.example.flutter_module:flutter_release:1.0\")\n  add(\"profileImplementation\", \"com.example.flutter_module:flutter_profile:1.0\")\n}\n```\n\n----------------------------------------\n\nTITLE: Using ListenableBuilder to update MaterialApp theme - Dart\nDESCRIPTION: This code snippet demonstrates how to use `ListenableBuilder` to dynamically update the `MaterialApp`'s theme based on the `isDarkMode` property of the `MainAppViewModel`. The `ListenableBuilder` rebuilds the `MaterialApp` whenever the `_viewModel` changes, ensuring that the UI reflects the current theme setting.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/app-architecture/design-patterns/key-value-data.md#_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nListenableBuilder(\n  listenable: _viewModel,\n  builder: (context, child) {\n    return MaterialApp(\n      theme: _viewModel.isDarkMode ? ThemeData.dark() : ThemeData.light(),\n      home: child,\n    );\n  },\n  child: //...\n)\n```\n\n----------------------------------------\n\nTITLE: Managing Ephemeral State with StatefulWidget in Flutter\nDESCRIPTION: This snippet demonstrates how to manage ephemeral state, such as the currently selected index in a bottom navigation bar, using a StatefulWidget.  The `_index` variable is stored within the `_MyHomepageState` class and updated using `setState()` within the `onTap` callback of the `BottomNavigationBar`.  This approach is suitable for state that is local to the widget and does not need to be shared or persisted.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/data-and-backend/state-mgmt/ephemeral-vs-app.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nclass MyHomepage extends StatefulWidget {\n  const MyHomepage({super.key});\n\n  @override\n  State<MyHomepage> createState() => _MyHomepageState();\n}\n\nclass _MyHomepageState extends State<MyHomepage> {\n  int _index = 0;\n\n  @override\n  Widget build(BuildContext context) {\n    return BottomNavigationBar(\n      currentIndex: _index,\n      onTap: (newIndex) {\n        setState(() {\n          _index = newIndex;\n        });\n      },\n      // ... items ...\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Display download button text in Dart\nDESCRIPTION: This code adds text to the `ButtonShapeWidget` to display \"GET\" or \"OPEN\" based on the download status. An `AnimatedOpacity` widget is used to fade the text in and out. The text is displayed within the `AnimatedContainer` of the `ButtonShapeWidget`.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/effects/download-button.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\n@immutable\nclass ButtonShapeWidget extends StatelessWidget {\n  const ButtonShapeWidget({\n    super.key,\n    required this.isDownloading,\n    required this.isDownloaded,\n    required this.isFetching,\n    required this.transitionDuration,\n  });\n\n  final bool isDownloading;\n  final bool isDownloaded;\n  final bool isFetching;\n  final Duration transitionDuration;\n\n  @override\n  Widget build(BuildContext context) {\n    final ShapeDecoration shape;\n    if (isDownloading || isFetching) {\n      shape = const ShapeDecoration(\n        shape: CircleBorder(),\n        color: Colors.transparent,\n      );\n    } else {\n      shape = const ShapeDecoration(\n        shape: StadiumBorder(),\n        color: CupertinoColors.lightBackgroundGray,\n      );\n    }\n\n    return AnimatedContainer(\n      duration: transitionDuration,\n      curve: Curves.ease,\n      width: double.infinity,\n      decoration: shape,\n      child: Padding(\n        padding: const EdgeInsets.symmetric(vertical: 6),\n        child: AnimatedOpacity(\n          duration: transitionDuration,\n          opacity: isDownloading || isFetching ? 0.0 : 1.0,\n          curve: Curves.ease,\n          child: Text(\n            isDownloaded ? 'OPEN' : 'GET',\n            textAlign: TextAlign.center,\n            style: Theme.of(context).textTheme.labelLarge?.copyWith(\n              fontWeight: FontWeight.bold,\n              color: CupertinoColors.activeBlue,\n            ),\n          ),\n        ),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Row with Multiple Expanded Children\nDESCRIPTION: Shows a Row where all children are wrapped with Expanded widgets, demonstrating how the Row distributes space proportionally based on each Expanded widget's flex parameter. The Expanded widgets then enforce their allocated width onto their respective children, essentially ignoring the children's preferred widths and ensuring they fit within the allocated space.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/layout/constraints.md#_snippet_56\n\nLANGUAGE: dart\nCODE:\n```\nRow(\n  children: [\n    Expanded(\n      child: Container(\n        color: red,\n        child: const Text(\n          'This is a very long text that won\\'t fit the line.',\n          style: big,\n        ),\n      ),\n    ),\n    Expanded(\n      child: Container(\n        color: green,\n        child: const Text('Goodbye!', style: big),\n      ),\n    ),\n  ],\n)\n```\n\n----------------------------------------\n\nTITLE: Installing an APK on a Connected Device using Flutter CLI\nDESCRIPTION: This snippet demonstrates how to install an APK on a connected Android device using the Flutter CLI. It requires a USB connection between the device and the computer.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/deployment/android.md#_snippet_12\n\nLANGUAGE: none\nCODE:\n```\nflutter install\n```\n\n----------------------------------------\n\nTITLE: Assets field YAML\nDESCRIPTION: This code snippet shows how to declare asset paths in the `pubspec.yaml` file for a Flutter project.  The `assets` field specifies the location of static resources like images. It can define individual files, entire directories, or flavor-specific asset paths.  The snippets shows the structure and examples of how to define `path_to_file`, `path_to_directory` and `flavor_path_field`.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/tools/pubspec.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nflutter:\n  assets:\n    - [ path_to_file | path_to_directory ]\n      [ flavor_path_field ]\n    [...]\n```\n\nLANGUAGE: yaml\nCODE:\n```\n# path_to_file structure\n- path/to/directory/file\n```\n\nLANGUAGE: yaml\nCODE:\n```\n# path_to_directory structure\n- path/to/directory/\n```\n\nLANGUAGE: yaml\nCODE:\n```\n# flavor_path_field strucure\n- path: path/to/directory\n  flavors:\n  - flavor_name\n```\n\n----------------------------------------\n\nTITLE: Install Codemagic CLI Tools\nDESCRIPTION: This command installs the Codemagic CLI tools using pip3. This allows you to use Codemagic CLI commands for building and publishing your Flutter iOS app.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/deployment/ios.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npip3 install codemagic-cli-tools\n```\n\n----------------------------------------\n\nTITLE: Package Structure Example in Flutter\nDESCRIPTION: This code snippet demonstrates a recommended package structure for a Flutter application, organizing code by feature and type (data, domain, ui). It shows the organization of UI, domain, and data layers, including core widgets, models, repositories, and services. The structure also includes config, utils, routing, main entry points, test, and testing directories.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/app-architecture/case-study/index.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nlib\n├─┬─ ui\n│ ├─┬─ core\n│ │ ├─┬─ ui\n│ │ │ └─── <shared widgets>\n│ │ └─── themes\n│ └─┬─ <FEATURE NAME>\n│   ├─┬─ view_model\n│   │ └─── <view_model class>.dart\n│   └─┬─ widgets\n│     ├── <feature name>_screen.dart\n│     └── <other widgets>\n├─┬─ domain\n│ └─┬─ models\n│   └─── <model name>.dart\n├─┬─ data\n│ ├─┬─ repositories\n│ │ └─── <repository class>.dart\n│ ├─┬─ services\n│ │ └─── <service class>.dart\n│ └─┬─ model\n│   └─── <api model class>.dart\n├─── config\n├─── utils\n├─── routing\n├─── main_staging.dart\n├─── main_development.dart\n└─── main.dart\n\n// The test folder contains unit and widget tests\ntest\n├─── data\n├─── domain\n├─── ui\n└─── utils\n\n// The testing folder contains mocks other classes need to execute tests\ntesting\n├─── fakes\n└─── models\n```\n\n----------------------------------------\n\nTITLE: Theme Repository - Flutter\nDESCRIPTION: The ThemeRepository acts as the single source of truth for theming configuration settings. It handles errors from the SharedPreferencesService. The repository exposes the dark mode setting through an observable Stream, enabling other parts of the application to subscribe to theme changes. It depends on SharedPreferencesService for data persistence.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/app-architecture/design-patterns/key-value-data.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nclass ThemeRepository {\n  ThemeRepository(this._service);\n\n  final _darkModeController = StreamController<bool>.broadcast();\n\n  final SharedPreferencesService _service;\n\n  /// Get if dark mode is enabled\n  Future<Result<bool>> isDarkMode() async {\n    try {\n      final value = await _service.isDarkMode();\n      return Result.ok(value);\n    } on Exception catch (e) {\n      return Result.error(e);\n    }\n  }\n\n  /// Set dark mode\n  Future<Result<void>> setDarkMode(bool value) async {\n    try {\n      await _service.setDarkMode(value);\n      _darkModeController.add(value);\n      return Result.ok(null);\n    } on Exception catch (e) {\n      return Result.error(e);\n    }\n  }\n\n  /// Stream that emits theme config changes.\n  /// ViewModels should call [isDarkMode] to get the current theme setting.\n  Stream<bool> observeDarkMode() => _darkModeController.stream;\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Assets in pubspec.yaml (Directory)\nDESCRIPTION: This snippet shows how to include all assets under a directory by specifying the directory name with the `/` character at the end in the `pubspec.yaml` file. This includes all files directly within the directory.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/assets/assets-and-images.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nflutter:\n  assets:\n    - directory/\n    - directory/subdirectory/\n```\n\n----------------------------------------\n\nTITLE: Creating TextSection Widget in Flutter\nDESCRIPTION: Defines a `TextSection` widget that displays a text description. It takes a `description` string as input and uses a `Padding` widget to add spacing around the `Text` widget. The `softWrap` property ensures that the text wraps properly within the available space.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/layout/tutorial.md#_snippet_8\n\nLANGUAGE: Dart\nCODE:\n```\nclass TextSection extends StatelessWidget {\n  const TextSection({super.key, required this.description});\n\n  final String description;\n\n  @override\n  Widget build(BuildContext context) {\n    return Padding(\n      padding: const EdgeInsets.all(32),\n      child: Text(description, softWrap: true),\n    );\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Setting Visual Density in Flutter MaterialApp\nDESCRIPTION: This code snippet shows how to set a custom visual density in a Flutter `MaterialApp`. It uses a boolean `touchMode` to determine the density amount. The `VisualDensity` is injected into the `ThemeData` of the `MaterialApp`, which allows `MaterialComponents` to animate their densities accordingly.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/adaptive-responsive/input.md#_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\ndouble densityAmt = touchMode ? 0.0 : -1.0;\nVisualDensity density = VisualDensity(\n  horizontal: densityAmt,\n  vertical: densityAmt,\n);\nreturn MaterialApp(\n  theme: ThemeData(visualDensity: density),\n  home: MainAppScaffold(),\n  debugShowCheckedModeBanner: false,\n);\n```\n\n----------------------------------------\n\nTITLE: Theming a Flutter App with ThemeData\nDESCRIPTION: This code snippet demonstrates how to theme a Flutter application using the ThemeData object within a MaterialApp widget. It showcases how to customize the color scheme and text selection color of the app. The theme settings are applied to all child components within the MaterialApp.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/android-devs.md#_snippet_44\n\nLANGUAGE: Dart\nCODE:\n```\nimport 'package:flutter/material.dart';\n\nclass SampleApp extends StatelessWidget {\n  const SampleApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: 'Sample App',\n      theme: ThemeData(\n        colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),\n        textSelectionTheme: const TextSelectionThemeData(\n          selectionColor: Colors.red,\n        ),\n      ),\n      home: const SampleAppPage(),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: SegmentedButton for Option Selection in Flutter\nDESCRIPTION: This snippet demonstrates how to create a SegmentedButton in Flutter, allowing users to select from a limited set of options. It includes defining segments, handling selection changes, and updating the application state.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/fundamentals/user-input.md#_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nenum Calendar { day, week, month, year }\n\n// StatefulWidget...\nCalendar calendarView = Calendar.day;\n\n@override\nWidget build(BuildContext context) {\n  return SegmentedButton<Calendar>(\n    segments: const <ButtonSegment<Calendar>>[\n      ButtonSegment<Calendar>(\n          value: Calendar.day,\n          label: Text('Day'),\n          icon: Icon(Icons.calendar_view_day)),\n      ButtonSegment<Calendar>(\n          value: Calendar.week,\n          label: Text('Week'),\n          icon: Icon(Icons.calendar_view_week)),\n      ButtonSegment<Calendar>(\n          value: Calendar.month,\n          label: Text('Month'),\n          icon: Icon(Icons.calendar_view_month)),\n      ButtonSegment<Calendar>(\n          value: Calendar.year,\n          label: Text('Year'),\n          icon: Icon(Icons.calendar_today)),\n    ],\n    selected: <Calendar>{calendarView},\n    onSelectionChanged: (Set<Calendar> newSelection) {\n      setState(() {\n        Suggested change\n        // By default there is only a single segment that can be\n        // selected at one time, so its value is always the first\n        // By default, only a single segment can be\n        // selected at one time, so its value is always the first\n        calendarView = newSelection.first;\n      });\n    },\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Switch Statement After Migration - Dart\nDESCRIPTION: This code shows the updated switch statement that includes cases for the new 'linux' and 'windows' TargetPlatform values. It avoids analyzer warnings and ensures that all possible platforms are handled correctly. It's recommended to avoid a default case in order for the analyzer to help with detecting missing cases.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/target-platform-linux-windows.md#_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nvoid dance(TargetPlatform platform) {\n  switch (platform) {\n    case TargetPlatform.android:\n      // Do Android dance.\n      break;\n    case TargetPlatform.fuchsia:\n      // Do Fuchsia dance.\n      break;\n    case TargetPlatform.iOS:\n      // Do iOS dance.\n      break;\n    case TargetPlatform.linux: // new case\n      // Do Linux dance.\n      break;\n    case TargetPlatform.macOS:\n      // Do macOS dance.\n      break;\n    case TargetPlatform.windows: // new case\n      // Do Windows dance.\n      break;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Exposing data to the view from a view model\nDESCRIPTION: This example demonstrates how a view model can expose data to the view, using a `User` instance as an example. The view can then access this data to display it in the UI.  No external dependencies beyond the Flutter SDK are required.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/app-architecture/design-patterns/command.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nclass HomeViewModel extends ChangeNotifier {\n\n  User? get user => // ...\n  // ···\n}\n```\n\n----------------------------------------\n\nTITLE: ListView.builder for Dynamic Lists - Dart\nDESCRIPTION: This code shows how to use `ListView.builder` to efficiently display a list of items when the number of items is unknown or very large. `ListView.builder` only builds children that are currently visible on the screen improving performance.  It displays a list of ToDo items fetched from a repository.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/fundamentals/layout.md#_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nfinal List<ToDo> items = Repository.fetchTodos();\n\nWidget build(BuildContext context) {\n  return ListView.builder(\n    itemCount: items.length,\n    itemBuilder: (context, idx) {\n      var item = items[idx];\n      return Padding(\n        padding: const EdgeInsets.all(8.0),\n        child: Row(\n          mainAxisAlignment: MainAxisAlignment.spaceBetween,\n          children: [\n            Text(item.description),\n            Text(item.isComplete),\n          ],\n        ),\n      );\n    },\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: TextField with TextEditingController in Flutter\nDESCRIPTION: This snippet demonstrates how to create a TextField in Flutter, associate it with a TextEditingController to programmatically control the text, and customize its appearance using InputDecoration.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/fundamentals/user-input.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nfinal TextEditingController _controller = TextEditingController();\n\n@override\nWidget build(BuildContext context) {\n  return TextField(\n    controller: _controller,\n    decoration: const InputDecoration(\n      border: OutlineInputBorder(),\n      labelText: 'Mascot Name',\n    ),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving MaterialLocalizations Instance Dart\nDESCRIPTION: This snippet demonstrates how to retrieve an instance of the MaterialLocalizations class using Localizations.of(). It is used to access localized strings for Material Components widgets.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/accessibility-and-internationalization/internationalization.md#_snippet_28\n\nLANGUAGE: Dart\nCODE:\n```\nLocalizations.of<MaterialLocalizations>(context, MaterialLocalizations);\n```\n\n----------------------------------------\n\nTITLE: Handling Repeat Key Events with KeyRepeatEvent (After)\nDESCRIPTION: This snippet demonstrates how to handle repeated key events using the new `KeyRepeatEvent` type. It checks if the `keyEvent` is either a `KeyDownEvent` or a `KeyRepeatEvent`.  The input is a `KeyEvent` and the output is printing to the console. Using `keyEvent is KeyRepeatEvent` avoids the need to access a boolean flag to check if it is a repeat event.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/key-event-migration.md#_snippet_5\n\nLANGUAGE: Dart\nCODE:\n```\nKeyEventResult _handleKeyEvent(KeyEvent _) {\n  if (keyEvent is KeyDownEvent || keyEvent is KeyRepeatEvent) {\n    print('Key down: ${keyEvent.logicalKey.keyLabel}(${keyEvent is KeyRepeatEvent ? ' (repeated)' : ''})');\n  }\n  return KeyEventResult.ignored;\n}\n```\n\n----------------------------------------\n\nTITLE: Gradle Dependencies for Material Components (Groovy)\nDESCRIPTION: This code snippet adds the dependency for Android's Material Components to the app's build.gradle file.  It allows using Material Design components in the Flutter app. The `<version>` placeholder should be replaced with the latest version available from Google Maven.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/deployment/android.md#_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\ndependencies {\n    // ...\n    implementation(\"com.google.android.material:material:<version>\")\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Data with Async/Await in Flutter\nDESCRIPTION: This snippet demonstrates how to load data asynchronously using the `async` and `await` keywords in Flutter. It fetches data from a remote URL using the `http` package and updates the UI using `setState` after parsing the JSON response. This is suitable for I/O-bound operations.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/xamarin-forms-devs.md#_snippet_23\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> loadData() async {\n  final Uri dataURL = Uri.parse('https://jsonplaceholder.typicode.com/posts');\n  final http.Response response = await http.get(dataURL);\n  setState(() {\n    data = (jsonDecode(response.body) as List).cast<Map<String, Object?>>();\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Building a Row with Expanded Widgets Flutter\nDESCRIPTION: This code snippet builds a Row widget with two Expanded children, each containing a Container with a specific color (red and green) and a Text widget. The Expanded widgets distribute the available space proportionally based on their flex parameters (implicitly 1 in this case), forcing their children to occupy that space. The text within each Container displays a message, demonstrating how Expanded widgets ignore the preferred width of their children.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/layout/constraints.md#_snippet_27\n\nLANGUAGE: dart\nCODE:\n```\nWidget build(BuildContext context) {\n  return Row(\n    children: [\n      Expanded(\n        child: Container(\n          color: red,\n          child: const Text(\n            'This is a very long text that won\\'t fit the line.',\n            style: big,\n          ),\n        ),\n      ),\n      Expanded(\n        child: Container(\n          color: green,\n          child: const Text('Goodbye!', style: big),\n        ),\n      ],\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Dispose object conditionally\nDESCRIPTION: This snippet demonstrates the correct way to call `dispose()`: only when the current code created the object. This prevents double disposal errors.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/dispose.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nif (xIsCreatedByMe) {\n  x.dispose();\n}\n```\n\n----------------------------------------\n\nTITLE: Using ValueNotifier in Flutter\nDESCRIPTION: This code demonstrates how to use ValueNotifier to manage a single value and notify listeners when it changes.  A ValueNotifier<int> is created and its value is updated directly.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/fundamentals/state-management.md#_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nValueNotifier<int> counterNotifier = ValueNotifier(0);\n```\n\n----------------------------------------\n\nTITLE: Generate a List of ListItem objects in Dart\nDESCRIPTION: This code generates a list of `ListItem` objects. It creates 1000 items, alternating between `HeadingItem` and `MessageItem` based on the index. This is a data source that can be used to populate a ListView with different types of content. It demonstrates how to programmatically create the data to be displayed.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/lists/mixed-list.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nfinal items = List<ListItem>.generate(\n  1000,\n  (i) =>\n      i % 6 == 0\n          ? HeadingItem('Heading $i')\n          : MessageItem('Sender $i', 'Message body $i'),\n);\n```\n\n----------------------------------------\n\nTITLE: Handling onDoubleTap Gesture for Rotation\nDESCRIPTION: This code snippet demonstrates using GestureDetector to handle the onDoubleTap event, which triggers an animation to rotate the Flutter logo. An AnimationController and CurvedAnimation are used to manage the rotation animation. The controller reverses if it is completed and forwards otherwise.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/uikit-devs.md#_snippet_24\n\nLANGUAGE: Dart\nCODE:\n```\nclass SampleApp extends StatefulWidget {\n  const SampleApp({super.key});\n\n  @override\n  State<SampleApp> createState() => _SampleAppState();\n}\n\nclass _SampleAppState extends State<SampleApp>\n    with SingleTickerProviderStateMixin {\n  late AnimationController controller;\n  late CurvedAnimation curve;\n\n  @override\n  void initState() {\n    super.initState();\n    controller = AnimationController(\n      vsync: this,\n      duration: const Duration(milliseconds: 2000),\n    );\n    curve = CurvedAnimation(parent: controller, curve: Curves.easeIn);\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: Center(\n        child: GestureDetector(\n          onDoubleTap: () {\n            if (controller.isCompleted) {\n              controller.reverse();\n            } else {\n              controller.forward();\n            }\n          },\n          child: RotationTransition(\n            turns: curve,\n            child: const FlutterLogo(size: 200),\n          ),\n        ),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Replace MediaQuery.boldTextOverride with boldTextOf in Flutter\nDESCRIPTION: This snippet shows how to replace the `boldTextOverride` method of `MediaQuery` with `boldTextOf`. This change was part of a larger refactor aimed at reducing rebuilds.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/3-19-deprecations.md#_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nMediaQuery.boldTextOverride(context);\n```\n\nLANGUAGE: dart\nCODE:\n```\nMediaQuery.boldTextOf(context)\n```\n\n----------------------------------------\n\nTITLE: Dart Plugin Registration\nDESCRIPTION: This Dart snippet shows how to register a Dart-only platform implementation. It defines a class `HelloPluginWindows` that extends a platform interface and includes a static `registerWith()` method to set the default instance of the platform interface.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/packages-and-plugins/developing-packages.md#_snippet_17\n\nLANGUAGE: Dart\nCODE:\n```\nclass HelloPluginWindows extends HelloPluginPlatform {\n  /// Registers this class as the default instance of [HelloPluginPlatform].\n  static void registerWith() {\n    HelloPluginPlatform.instance = HelloPluginWindows();\n  }\n\n```\n\n----------------------------------------\n\nTITLE: Display Animated GIF Flutter\nDESCRIPTION: This snippet demonstrates how to display an animated GIF using the `Image.network` constructor in Flutter. It fetches a GIF from a specified URL and displays it, leveraging the `Image` widget's built-in support for animated GIFs.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/images/network-image.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nImage.network(\n  'https://docs.flutter.dev/assets/images/dash/dash-fainting.gif',\n);\n```\n\n----------------------------------------\n\nTITLE: Retrieving the Current Locale - Dart\nDESCRIPTION: This code snippet shows how to retrieve the current locale of the application using Localizations.localeOf(context). The returned Locale object represents the user's currently selected language and region.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/accessibility-and-internationalization/internationalization.md#_snippet_26\n\nLANGUAGE: Dart\nCODE:\n```\nLocale myLocale = Localizations.localeOf(context);\n```\n\n----------------------------------------\n\nTITLE: Navigator: onDidRemovePage usage after migration (Dart)\nDESCRIPTION: This code snippet illustrates the updated usage of the `Navigator` widget with the `onDidRemovePage` property. The `onDidRemovePage` callback is now only responsible for updating the `pages` list. Vetoing a pop is now handled by setting the `canPop` property of the `Page` object.  The example sets `canPop: false` on `page2` to prevent it from being popped.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/navigator-and-page-api.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\n\nfinal MaterialPage<void> page1 = MaterialPage<void>(child: Placeholder());\nfinal MaterialPage<void> page2 = MaterialPage<void>(canPop: false, child: Placeholder());\nfinal MaterialPage<void> page3 = MaterialPage<void>(child: Placeholder());\n\nvoid main() {\n  final List<Page<void>> pages = <Page<void>>[page1, page2, page3];\n  runApp(\n    MaterialApp(\n      home: Navigator(\n        pages: pages,\n        onDidRemovePage: (Page<Object?> page) {\n          pages.remove(page);\n        },\n      ),\n    ),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Localizing app description via onGenerateTitle - Dart\nDESCRIPTION: This code snippet demonstrates how to localize the app description using `MaterialApp.onGenerateTitle`. The `onGenerateTitle` callback provides the context, allowing access to localized strings via the `DemoLocalizations` class.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/accessibility-and-internationalization/internationalization.md#_snippet_13\n\nLANGUAGE: dart\nCODE:\n```\nreturn MaterialApp(\n  onGenerateTitle: (context) => DemoLocalizations.of(context).title,\n\n```\n\n----------------------------------------\n\nTITLE: Handle Method Call for Battery Level (Java)\nDESCRIPTION: This Java code handles the `getBatteryLevel` method call from Flutter. It calls the `getBatteryLevel()` function and returns the result to Flutter. It also includes error handling and a `notImplemented()` response for unknown methods.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/platform-integration/platform-channels.md#_snippet_11\n\nLANGUAGE: Java\nCODE:\n```\n      new MethodChannel(flutterEngine.getDartExecutor().getBinaryMessenger(), CHANNEL)\n        .setMethodCallHandler(\n          (call, result) -> {\n            // This method is invoked on the main thread.\n            if (call.method.equals(\"getBatteryLevel\")) {\n              int batteryLevel = getBatteryLevel();\n\n              if (batteryLevel != -1) {\n                result.success(batteryLevel);\n              } else {\n                result.error(\"UNAVAILABLE\", \"Battery level not available.\", null);\n              }\n            } else {\n              result.notImplemented();\n            }\n          }\n      );\n```\n\n----------------------------------------\n\nTITLE: Define Booking Repository (Dart)\nDESCRIPTION: This code defines a `BookingRepositoryRemote` class, which implements the `BookingRepository` interface. It depends on the `ApiClient` service to interact with the server for fetching and updating booking data. The repository manages application data, transforms raw data into domain models, and provides methods to create, get, and delete bookings.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/app-architecture/case-study/data-layer.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nclass BookingRepositoryRemote implements BookingRepository {\n  BookingRepositoryRemote({\n    required ApiClient apiClient,\n  }) : _apiClient = apiClient;\n\n  final ApiClient _apiClient;\n  List<Destination>? _cachedDestinations;\n\n  Future<Result<void>> createBooking(Booking booking) async {...}\n  Future<Result<Booking>> getBooking(int id) async {...}\n  Future<Result<List<BookingSummary>>> getBookingsList() async {...}\n  Future<Result<void>> delete(int id) async {...}\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Firebase CLI\nDESCRIPTION: This command installs or updates the Firebase CLI, which is required for deploying Flutter web apps to Firebase Hosting.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/deployment/web.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nnpm install -g firebase-tools\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Data Loading in Flutter\nDESCRIPTION: This snippet demonstrates how to load data asynchronously from a network resource in Flutter using `async`/`await`. It fetches data using the `http` package, decodes the JSON response, and updates the UI using `setState()` to trigger a rebuild of the widget.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/xamarin-forms-devs.md#_snippet_21\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> loadData() async {\n  final Uri dataURL = Uri.parse('https://jsonplaceholder.typicode.com/posts');\n  final http.Response response = await http.get(dataURL);\n  setState(() {\n    data = (jsonDecode(response.body) as List).cast<Map<String, Object?>>();\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Take a Picture with CameraController (Dart)\nDESCRIPTION: Creates a FloatingActionButton that, when pressed, initializes the camera (if not already), takes a picture using the CameraController, and handles potential errors. The image is stored as an XFile.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/plugins/picture-using-camera.md#_snippet_5\n\nLANGUAGE: Dart\nCODE:\n```\nFloatingActionButton(\n  // Provide an onPressed callback.\n  onPressed: () async {\n    // Take the Picture in a try / catch block. If anything goes wrong,\n    // catch the error.\n    try {\n      // Ensure that the camera is initialized.\n      await _initializeControllerFuture;\n\n      // Attempt to take a picture and then get the location\n      // where the image file is saved.\n      final image = await _controller.takePicture();\n    } catch (e) {\n      // If an error occurs, log the error to the console.\n      print(e);\n    }\n  },\n  child: const Icon(Icons.camera_alt),\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Circular Progress Indicator Widget in Flutter\nDESCRIPTION: This code defines a Flutter StatelessWidget called ProgressIndicatorWidget which displays a circular progress indicator. It animates the progress indicator using TweenAnimationBuilder. The color and background color depends on the isDownloading and isFetching parameters.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/effects/download-button.md#_snippet_8\n\nLANGUAGE: Dart\nCODE:\n```\nclass ProgressIndicatorWidget extends StatelessWidget {\n  const ProgressIndicatorWidget({\n    super.key,\n    required this.downloadProgress,\n    required this.isDownloading,\n    required this.isFetching,\n  });\n\n  final double downloadProgress;\n  final bool isDownloading;\n  final bool isFetching;\n\n  @override\n  Widget build(BuildContext context) {\n    return AspectRatio(\n      aspectRatio: 1,\n      child: TweenAnimationBuilder<double>(\n        tween: Tween(begin: 0, end: downloadProgress),\n        duration: const Duration(milliseconds: 200),\n        builder: (context, progress, child) {\n          return CircularProgressIndicator(\n            backgroundColor:\n                isDownloading\n                    ? CupertinoColors.lightBackgroundGray\n                    : Colors.transparent,\n            valueColor: AlwaysStoppedAnimation(\n              isFetching\n                  ? CupertinoColors.lightBackgroundGray\n                  : CupertinoColors.activeBlue,\n            ),\n            strokeWidth: 2,\n            value: isFetching ? null : progress,\n          );\n        },\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Battery Level in flutter_window.cpp (C++)\nDESCRIPTION: This C++ code retrieves the battery level on Windows using the `GetSystemPowerStatus` API.  It returns the battery level as an integer percentage, or -1 if unavailable.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/platform-integration/platform-channels.md#_snippet_20\n\nLANGUAGE: C++\nCODE:\n```\nstatic int GetBatteryLevel() {\n  SYSTEM_POWER_STATUS status;\n  if (GetSystemPowerStatus(&status) == 0 || status.BatteryLifePercent == 255) {\n    return -1;\n  }\n  return status.BatteryLifePercent;\n}\n```\n\n----------------------------------------\n\nTITLE: Applying a Theme in Flutter using Theme Widget\nDESCRIPTION: This Flutter code snippet illustrates how to apply a theme using the `Theme` widget.  It takes a `ThemeData` object and applies it to all its child widgets. The background color of a `Scaffold` is set to the primary color defined in the theme.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/react-native-devs.md#_snippet_34\n\nLANGUAGE: dart\nCODE:\n```\n@override\nWidget build(BuildContext context) {\n  return Theme(\n    data: ThemeData(primaryColor: Colors.cyan, brightness: brightness),\n    child: Scaffold(\n      backgroundColor: Theme.of(context).primaryColor,\n      //...\n    ),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Toggling Widgets - Adding/Removing Components in Flutter\nDESCRIPTION: This code snippet illustrates how to toggle between two widgets when a `FloatingActionButton` is clicked. It uses a boolean flag to control the child's creation, demonstrating how to dynamically add or remove components in Flutter, similar to `addChild()` and `removeChild()` in Android.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/android-devs.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\n\nvoid main() {\n  runApp(const SampleApp());\n}\n\nclass SampleApp extends StatelessWidget {\n  const SampleApp({super.key});\n\n  // This widget is the root of your application.\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: 'Sample App',\n      theme: ThemeData(\n        colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),\n      ),\n      home: const SampleAppPage(),\n    );\n  }\n}\n\nclass SampleAppPage extends StatefulWidget {\n  const SampleAppPage({super.key});\n\n  @override\n  State<SampleAppPage> createState() => _SampleAppPageState();\n}\n\nclass _SampleAppPageState extends State<SampleAppPage> {\n  // Default value for toggle.\n  bool toggle = true;\n  void _toggle() {\n    setState(() {\n      toggle = !toggle;\n    });\n  }\n\n  Widget _getToggleChild() {\n    if (toggle) {\n      return const Text('Toggle One');\n    } else {\n      return ElevatedButton(onPressed: () {}, child: const Text('Toggle Two'));\n    }\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: const Text('Sample App')),\n      body: Center(child: _getToggleChild()),\n      floatingActionButton: FloatingActionButton(\n        onPressed: _toggle,\n        tooltip: 'Update Text',\n        child: const Icon(Icons.update),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Fonts to Text Widgets in Flutter\nDESCRIPTION: This code snippet shows how to apply a custom font to a Text widget in Flutter. It assumes that the font has been added to the pubspec.yaml file and placed in the appropriate fonts directory. The fontFamily property of the TextStyle is set to the name defined in pubspec.yaml.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/android-devs.md#_snippet_41\n\nLANGUAGE: dart\nCODE:\n```\n@override\nWidget build(BuildContext context) {\n  return Scaffold(\n    appBar: AppBar(title: const Text('Sample App')),\n    body: const Center(\n      child: Text(\n        'This is a custom font text',\n        style: TextStyle(fontFamily: 'MyCustomFont'),\n      ),\n    ),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Build Widget with IconButton and Text in Flutter\nDESCRIPTION: This code defines the build method for a Flutter stateful widget. It creates a row containing an IconButton (for the star icon) and Text (for the favorite count). The IconButton's onPressed property is set to the _toggleFavorite method, which updates the widget's state.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/interactivity/index.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nclass _FavoriteWidgetState extends State<FavoriteWidget> {\n  // ···\n  @override\n  Widget build(BuildContext context) {\n    return Row(\n      mainAxisSize: MainAxisSize.min,\n      children: [\n        Container(\n          padding: const EdgeInsets.all(0),\n          child: IconButton(\n            padding: const EdgeInsets.all(0),\n            alignment: Alignment.center,\n            icon:\n                (_isFavorited\n                    ? const Icon(Icons.star)\n                    : const Icon(Icons.star_border)),\n            color: Colors.red[500],\n            onPressed: _toggleFavorite,\n          ),\n        ),\n        SizedBox(width: 18, child: SizedBox(child: Text('$_favoriteCount'))),\n      ],\n    );\n  }\n\n  // ···\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Inserting a Dog Instance\nDESCRIPTION: This snippet creates a `Dog` instance named `fido` with specific values for `id`, `name`, and `age`.  Then, it calls the `insertDog` function to insert this `Dog` instance into the SQLite database.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/persistence/sqlite.md#_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\n// Create a Dog and add it to the dogs table\nvar fido = Dog(id: 0, name: 'Fido', age: 35);\n\nawait insertDog(fido);\n```\n\n----------------------------------------\n\nTITLE: Interactive Flutter Page Routing Example in DartPad\nDESCRIPTION: This code represents a complete interactive example for page routing with animated transitions in Flutter. It incorporates the Tween chaining method to create a slide-up animation with easing. This complete example is designed to be run directly in DartPad.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/animation/page-route-animation.md#_snippet_6\n\nLANGUAGE: Dart\nCODE:\n```\nimport 'package:flutter/material.dart';\n\nvoid main() {\n  runApp(const MaterialApp(home: Page1()));\n}\n\nclass Page1 extends StatelessWidget {\n  const Page1({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(),\n      body: Center(\n        child: ElevatedButton(\n          onPressed: () {\n            Navigator.of(context).push(_createRoute());\n          },\n          child: const Text('Go!'),\n        ),\n      ),\n    );\n  }\n}\n\nRoute _createRoute() {\n  return PageRouteBuilder(\n    pageBuilder: (context, animation, secondaryAnimation) => const Page2(),\n    transitionsBuilder: (context, animation, secondaryAnimation, child) {\n      const begin = Offset(0.0, 1.0);\n      const end = Offset.zero;\n      const curve = Curves.ease;\n\n      var tween = Tween(begin: begin, end: end).chain(CurveTween(curve: curve));\n\n      return SlideTransition(position: animation.drive(tween), child: child);\n    },\n  );\n}\n\nclass Page2 extends StatelessWidget {\n  const Page2({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(),\n      body: const Center(child: Text('Page 2')),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generate Keystore (Windows PowerShell) (Powershell)\nDESCRIPTION: This PowerShell command generates a keystore for signing the Android app. It is equivalent to the macOS/Linux command but adapted for the Windows environment. The keystore file is stored in the user's profile directory.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/deployment/android.md#_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nkeytool -genkey -v -keystore $env:USERPROFILE\\upload-keystore.jks `\n           -storetype JKS -keyalg RSA -keysize 2048 -validity 10000 `\n           -alias upload\n```\n\n----------------------------------------\n\nTITLE: Flutter Parallax Scrolling Example\nDESCRIPTION: This Dart code demonstrates a parallax scrolling effect in Flutter using `Flow`, `FlowDelegate`, and `RenderObject`. It creates a list of location items where the background image moves at a different speed than the foreground content when the user scrolls. The example includes custom widgets and render objects to achieve the effect.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/effects/parallax-scrolling.md#_snippet_16\n\nLANGUAGE: Dart\nCODE:\n```\nimport 'package:flutter/material.dart';\nimport 'package:flutter/rendering.dart';\n\nconst Color darkBlue = Color.fromARGB(255, 18, 32, 47);\n\nvoid main() {\n  runApp(const MyApp());\n}\n\nclass MyApp extends StatelessWidget {\n  const MyApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      theme: ThemeData.dark().copyWith(scaffoldBackgroundColor: darkBlue),\n      debugShowCheckedModeBanner: false,\n      home: const Scaffold(body: Center(child: ExampleParallax())),\n    );\n  }\n}\n\nclass ExampleParallax extends StatelessWidget {\n  const ExampleParallax({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return SingleChildScrollView(\n      child: Column(\n        children: [\n          for (final location in locations)\n            LocationListItem(\n              imageUrl: location.imageUrl,\n              name: location.name,\n              country: location.place,\n            ),\n        ],\n      ),\n    );\n  }\n}\n\nclass LocationListItem extends StatelessWidget {\n  LocationListItem({\n    super.key,\n    required this.imageUrl,\n    required this.name,\n    required this.country,\n  });\n\n  final String imageUrl;\n  final String name;\n  final String country;\n  final GlobalKey _backgroundImageKey = GlobalKey();\n\n  @override\n  Widget build(BuildContext context) {\n    return Padding(\n      padding: const EdgeInsets.symmetric(horizontal: 24, vertical: 16),\n      child: AspectRatio(\n        aspectRatio: 16 / 9,\n        child: ClipRRect(\n          borderRadius: BorderRadius.circular(16),\n          child: Stack(\n            children: [\n              _buildParallaxBackground(context),\n              _buildGradient(),\n              _buildTitleAndSubtitle(),\n            ],\n          ),\n        ),\n      ),\n    );\n  }\n\n  Widget _buildParallaxBackground(BuildContext context) {\n    return Flow(\n      delegate: ParallaxFlowDelegate(\n        scrollable: Scrollable.of(context),\n        listItemContext: context,\n        backgroundImageKey: _backgroundImageKey,\n      ),\n      children: [\n        Image.network(imageUrl, key: _backgroundImageKey, fit: BoxFit.cover),\n      ],\n    );\n  }\n\n  Widget _buildGradient() {\n    return Positioned.fill(\n      child: DecoratedBox(\n        decoration: BoxDecoration(\n          gradient: LinearGradient(\n            colors: [Colors.transparent, Colors.black.withValues(alpha: 0.7)],\n            begin: Alignment.topCenter,\n            end: Alignment.bottomCenter,\n            stops: const [0.6, 0.95],\n          ),\n        ),\n      ),\n    );\n  }\n\n  Widget _buildTitleAndSubtitle() {\n    return Positioned(\n      left: 20,\n      bottom: 20,\n      child: Column(\n        mainAxisSize: MainAxisSize.min,\n        crossAxisAlignment: CrossAxisAlignment.start,\n        children: [\n          Text(\n            name,\n            style: const TextStyle(\n              color: Colors.white,\n              fontSize: 20,\n              fontWeight: FontWeight.bold,\n            ),\n          ),\n          Text(\n            country,\n            style: const TextStyle(color: Colors.white, fontSize: 14),\n          ),\n        ],\n      ),\n    );\n  }\n}\n\nclass ParallaxFlowDelegate extends FlowDelegate {\n  ParallaxFlowDelegate({\n    required this.scrollable,\n    required this.listItemContext,\n    required this.backgroundImageKey,\n  }) : super(repaint: scrollable.position);\n\n\n  final ScrollableState scrollable;\n  final BuildContext listItemContext;\n  final GlobalKey backgroundImageKey;\n\n  @override\n  BoxConstraints getConstraintsForChild(int i, BoxConstraints constraints) {\n    return BoxConstraints.tightFor(width: constraints.maxWidth);\n  }\n\n  @override\n  void paintChildren(FlowPaintingContext context) {\n    // Calculate the position of this list item within the viewport.\n    final scrollableBox = scrollable.context.findRenderObject() as RenderBox;\n    final listItemBox = listItemContext.findRenderObject() as RenderBox;\n    final listItemOffset = listItemBox.localToGlobal(\n      listItemBox.size.centerLeft(Offset.zero),\n      ancestor: scrollableBox,\n    );\n\n    // Determine the percent position of this list item within the\n    // scrollable area.\n    final viewportDimension = scrollable.position.viewportDimension;\n    final scrollFraction = (listItemOffset.dy / viewportDimension).clamp(\n      0.0,\n      1.0,\n    );\n\n    // Calculate the vertical alignment of the background\n    // based on the scroll percent.\n    final verticalAlignment = Alignment(0.0, scrollFraction * 2 - 1);\n\n    // Convert the background alignment into a pixel offset for\n    // painting purposes.\n    final backgroundSize =\n        (backgroundImageKey.currentContext!.findRenderObject() as RenderBox)\n            .size;\n    final listItemSize = context.size;\n    final childRect = verticalAlignment.inscribe(\n      backgroundSize,\n      Offset.zero & listItemSize,\n    );\n\n    // Paint the background.\n    context.paintChild(\n      0,\n      transform:\n          Transform.translate(offset: Offset(0.0, childRect.top)).transform,\n    );\n  }\n\n  @override\n  bool shouldRepaint(ParallaxFlowDelegate oldDelegate) {\n    return scrollable != oldDelegate.scrollable ||\n        listItemContext != oldDelegate.listItemContext ||\n        backgroundImageKey != oldDelegate.backgroundImageKey;\n  }\n\n}\n\nclass Parallax extends SingleChildRenderObjectWidget {\n  const Parallax({super.key, required Widget background})\n    : super(child: background);\n\n  @override\n  RenderObject createRenderObject(BuildContext context) {\n    return RenderParallax(scrollable: Scrollable.of(context));\n  }\n\n  @override\n  void updateRenderObject(\n    BuildContext context,\n    covariant RenderParallax renderObject,\n  ) {\n    renderObject.scrollable = Scrollable.of(context);\n  }\n}\n\nclass ParallaxParentData extends ContainerBoxParentData<RenderBox> {}\n\nclass RenderParallax extends RenderBox\n    with RenderObjectWithChildMixin<RenderBox>, RenderProxyBoxMixin {\n  RenderParallax({required ScrollableState scrollable})\n    : _scrollable = scrollable;\n\n  ScrollableState _scrollable;\n\n  ScrollableState get scrollable => _scrollable;\n\n  set scrollable(ScrollableState value) {\n    if (value != _scrollable) {\n      if (attached) {\n        _scrollable.position.removeListener(markNeedsLayout);\n      }\n      _scrollable = value;\n      if (attached) {\n        _scrollable.position.addListener(markNeedsLayout);\n      }\n    }\n  }\n\n  @override\n  void attach(covariant PipelineOwner owner) {\n    super.attach(owner);\n    _scrollable.position.addListener(markNeedsLayout);\n  }\n\n  @override\n  void detach() {\n    _scrollable.position.removeListener(markNeedsLayout);\n    super.detach();\n  }\n\n  @override\n  void setupParentData(covariant RenderObject child) {\n    if (child.parentData is! ParallaxParentData) {\n      child.parentData = ParallaxParentData();\n    }\n  }\n\n  @override\n  void performLayout() {\n    size = constraints.biggest;\n\n    // Force the background to take up all available width\n    // and then scale its height based on the image's aspect ratio.\n    final background = child!;\n    final backgroundImageConstraints = BoxConstraints.tightFor(\n      width: size.width,\n    );\n    background.layout(backgroundImageConstraints, parentUsesSize: true);\n\n    // Set the background's local offset, which is zero.\n    (background.parentData as ParallaxParentData).offset = Offset.zero;\n  }\n\n  @override\n  void paint(PaintingContext context, Offset offset) {\n    // Get the size of the scrollable area.\n    final viewportDimension = scrollable.position.viewportDimension;\n\n    // Calculate the global position of this list item.\n    final scrollableBox = scrollable.context.findRenderObject() as RenderBox;\n    final backgroundOffset = localToGlobal(\n      size.centerLeft(Offset.zero),\n      ancestor: scrollableBox,\n    );\n\n    // Determine the percent position of this list item within the\n    // scrollable area.\n    final scrollFraction = (backgroundOffset.dy / viewportDimension).clamp(\n      0.0,\n      1.0,\n    );\n\n    // Calculate the vertical alignment of the background\n    // based on the scroll percent.\n    final verticalAlignment = Alignment(0.0, scrollFraction * 2 - 1);\n\n    // Convert the background alignment into a pixel offset for\n    // painting purposes.\n    final background = child!;\n    final backgroundSize = background.size;\n    final listItemSize = size;\n    final childRect = verticalAlignment.inscribe(\n      backgroundSize,\n      Offset.zero & listItemSize,\n    );\n\n    // Paint the background.\n    context.paintChild(\n      background,\n      (background.parentData as ParallaxParentData).offset +\n          offset +\n          Offset(0.0, childRect.top),\n    );\n  }\n}\n\nclass Location {\n  const Location({\n    required this.name,\n    required this.place,\n    required this.imageUrl,\n  });\n\n  final String name;\n  final String place;\n  final String imageUrl;\n}\n\nconst urlPrefix =\n    'https://docs.flutter.dev/cookbook/img-files/effects/parallax';\nconst locations = [\n  Location(\n    name: 'Mount Rushmore',\n    place: 'U.S.A',\n    imageUrl: '$urlPrefix/01-mount-rushmore.jpg',\n  ),\n  Location(\n    name: 'Gardens By The Bay',\n    place: 'Singapore',\n    imageUrl: '$urlPrefix/02-singapore.jpg',\n  ),\n  Location(\n    name: 'Machu Picchu',\n    place: 'Peru',\n    imageUrl: '$urlPrefix/03-machu-picchu.jpg',\n  ),\n  Location(\n    name: 'Vitznau',\n    place: 'Switzerland',\n    imageUrl: '$urlPrefix/04-vitznau.jpg',\n  ),\n  Location(\n    name: 'Bali',\n    place: 'Indonesia',\n    imageUrl: '$urlPrefix/05-bali.jpg',\n  ),\n  Location(\n    name: 'Mexico City',\n    place: 'Mexico',\n    imageUrl: '$urlPrefix/06-mexico-city.jpg',\n  ),\n  Location(name: 'Cairo', place: 'Egypt', imageUrl: '$urlPrefix/07-cairo.jpg'),\n];\n```\n\n----------------------------------------\n\nTITLE: Enabling Debug Paint Size - Flutter (Dart)\nDESCRIPTION: This code snippet enables the `debugPaintSizeEnabled` flag in Flutter, which visually highlights the size and layout of widgets with teal borders for boxes, blue for padding, and yellow arrows for alignment.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/testing/code-debugging.md#_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\n// Add import to the Flutter rendering library.\nimport 'package:flutter/rendering.dart';\n\nvoid main() {\n  debugPaintSizeEnabled = true;\n  runApp(const MyApp());\n}\n```\n\n----------------------------------------\n\nTITLE: Add go_router dependency\nDESCRIPTION: Adds the `go_router` package as a dependency to the Flutter project.  The `go_router` package is used for handling the application's routing logic, which is essential for deep linking to specific screens.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/navigation/set-up-universal-links.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ flutter pub add go_router\n```\n\n----------------------------------------\n\nTITLE: Using DialogThemeData.backgroundColor in Dart\nDESCRIPTION: This code snippet demonstrates the recommended way to set the background color of dialogs using `DialogThemeData.backgroundColor`. It utilizes the component-specific theme to override the default background color. The `const` keyword is used for performance optimization.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/deprecate-themedata-dialogbackgroundcolor.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\ntheme: ThemeData(\n  dialogTheme: const DialogThemeData(backgroundColor: Colors.orange),\n),\n```\n\n----------------------------------------\n\nTITLE: Using ListenableBuilder with Commands in Dart\nDESCRIPTION: This snippet demonstrates how to use `ListenableBuilder` in a Flutter view to conditionally render different widgets based on the state of a `Command` object. The view listens for changes in the `load` command's state and displays a loading indicator, an error indicator, or the main view widget accordingly. This showcases how the Command pattern enables reactive UI updates based on asynchronous operation status.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/app-architecture/case-study/ui-layer.md#_snippet_13\n\nLANGUAGE: dart\nCODE:\n```\n// ...\nchild: ListenableBuilder(\n  listenable: [!viewModel.load!],\n  builder: (context, child) {\n    if ([!viewModel.load.running!]) {\n      return const Center(child: CircularProgressIndicator());\n    }\n\n    if ([!viewModel.load.error!]) {\n      return ErrorIndicator(\n        title: AppLocalization.of(context).errorWhileLoadingHome,\n        label: AppLocalization.of(context).tryAgain,\n          onPressed: viewModel.load.execute,\n        );\n     }\n\n    // The command has completed without error.\n    // Return the main view widget.\n    return child!;\n  },\n),\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Mouse Cursor Change with MouseRegion in Flutter\nDESCRIPTION: This code snippet demonstrates how to change the mouse cursor to a hand cursor when hovering over a widget using `MouseRegion`. It also shows how to request focus when the widget is clicked. The `GestureDetector` is used to handle the tap event, and `Focus.of(context).requestFocus()` is used to request focus. `Logo` is assumed to be a custom widget.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/adaptive-responsive/input.md#_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\n// Show hand cursor\nreturn MouseRegion(\n  cursor: SystemMouseCursors.click,\n  // Request focus when clicked\n  child: GestureDetector(\n    onTap: () {\n      Focus.of(context).requestFocus();\n      _submit();\n    },\n    child: Logo(showBorder: hasFocus),\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Flutter Optimistic State Example in DartPad\nDESCRIPTION: This full example demonstrates the `SubscribeButton` widget with optimistic state management in Flutter. It includes the `MyApp` widget to initialize and display the `SubscribeButton`, the `SubscribeButtonViewModel` to manage the subscription state, and the `SubscriptionRepository` to simulate a network request that may fail, demonstrating optimistic UI updates.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/app-architecture/design-patterns/optimistic-state.md#_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\n// ignore_for_file: avoid_print\n\nimport 'package:flutter/material.dart';\n\nvoid main() {\n  runApp(const MyApp());\n}\n\nclass MyApp extends StatelessWidget {\n  const MyApp({super.key});\n\n  // This widget is the root of your application.\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      home: Scaffold(\n        body: Center(\n          child: SubscribeButton(\n            viewModel: SubscribeButtonViewModel(\n              subscriptionRepository: SubscriptionRepository(),\n            ),\n          ),\n        ),\n      ),\n    );\n  }\n}\n\n/// A button that simulates a subscription action.\n/// For example, subscribing to a newsletter or a streaming channel.\nclass SubscribeButton extends StatefulWidget {\n  const SubscribeButton({super.key, required this.viewModel});\n\n  /// Subscribe button view model.\n  final SubscribeButtonViewModel viewModel;\n\n  @override\n  State<SubscribeButton> createState() => _SubscribeButtonState();\n}\n\nclass _SubscribeButtonState extends State<SubscribeButton> {\n  @override\n  void initState() {\n    super.initState();\n    widget.viewModel.addListener(_onViewModelChange);\n  }\n\n  @override\n  void dispose() {\n    widget.viewModel.removeListener(_onViewModelChange);\n    super.dispose();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return ListenableBuilder(\n      listenable: widget.viewModel,\n      builder: (context, _) {\n        return FilledButton(\n          onPressed: widget.viewModel.subscribe,\n          style:\n              widget.viewModel.subscribed\n                  ? SubscribeButtonStyle.subscribed\n                  : SubscribeButtonStyle.unsubscribed,\n          child:\n              widget.viewModel.subscribed\n                  ? const Text('Subscribed')\n                  : const Text('Subscribe'),\n        );\n      },\n    );\n  }\n\n  /// Listen to ViewModel changes.\n  void _onViewModelChange() {\n    // If the subscription action has failed\n    if (widget.viewModel.error) {\n      // Reset the error state\n      widget.viewModel.error = false;\n      // Show an error message\n      ScaffoldMessenger.of(\n        context,\n      ).showSnackBar(const SnackBar(content: Text('Failed to subscribe')));\n    }\n  }\n\n}\n\nclass SubscribeButtonStyle {\n  static const unsubscribed = ButtonStyle(\n    backgroundColor: WidgetStatePropertyAll(Colors.red),\n  );\n\n  static const subscribed = ButtonStyle(\n    backgroundColor: WidgetStatePropertyAll(Colors.green),\n  );\n}\n\n/// Subscribe button View Model.\n/// Handles the subscribe action and exposes the state to the subscription.\nclass SubscribeButtonViewModel extends ChangeNotifier {\n  SubscribeButtonViewModel({required this.subscriptionRepository});\n\n  final SubscriptionRepository subscriptionRepository;\n\n  // Whether the user is subscribed\n  bool subscribed = false;\n\n  // Whether the subscription action has failed\n  bool error = false;\n\n  // Subscription action\n  Future<void> subscribe() async {\n    // Ignore taps when subscribed\n    if (subscribed) {\n      return;\n    }\n\n    // Optimistic state.\n    // It will be reverted if the subscription fails.\n    subscribed = true;\n    // Notify listeners to update the UI\n    notifyListeners();\n\n    try {\n      await subscriptionRepository.subscribe();\n    } catch (e) {\n      print('Failed to subscribe: $e');\n      // Revert to the previous state\n      subscribed = false;\n      // Set the error state\n      error = true;\n    } finally {\n      notifyListeners();\n    }\n  }\n\n}\n\n/// Repository of subscriptions.\nclass SubscriptionRepository {\n  /// Simulates a network request and then fails.\n  Future<void> subscribe() async {\n    // Simulate a network request\n    await Future.delayed(const Duration(seconds: 1));\n    // Fail after one second\n    throw Exception('Failed to subscribe');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Landscape Orientation Test\nDESCRIPTION: This widget test verifies that the Flutter app displays three columns when in landscape mode. It pumps the `MyApp` widget, sets the screen size to a landscape orientation, and asserts that the `GridView` displays three columns using `SliverGridDelegateWithFixedCrossAxisCount`.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/testing/widget/orientation.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\n// Check if landscape mode displays correctly.\ntestWidgets('Displays 3 columns in landscape mode', (tester) async {\n  // Build the app.\n  await tester.pumpWidget(const MyApp());\n\n  // Change to landscape.\n  tester.view.physicalSize = const Size(800, 600);\n  tester.view.devicePixelRatio = 1.0;\n  addTearDown(() {\n    tester.view.resetPhysicalSize();\n  });\n  await tester.pump();\n\n  // Verify initial orientation is landscape.\n  final orientation =\n      MediaQuery.of(\n        tester.element(find.byType(OrientationList)),\n      ).orientation;\n  expect(orientation, Orientation.landscape);\n\n  // Verify there are only 3 columns in landscape mode.\n  final gridViewFinder = find.byType(GridView);\n  final gridView = tester.widget<GridView>(gridViewFinder);\n  final delegate =\n      gridView.gridDelegate as SliverGridDelegateWithFixedCrossAxisCount;\n  expect(delegate.crossAxisCount, 3);\n});\n```\n\n----------------------------------------\n\nTITLE: Adding FlutterFragment with new FlutterEngine - Kotlin\nDESCRIPTION: This Kotlin snippet demonstrates how to add a `FlutterFragment` to an existing Android `Activity`. It retrieves the `FragmentManager`, checks for an existing `FlutterFragment`, and creates a new one if needed, adding it to a container within the `Activity`'s layout. It assumes a FrameLayout exists with an ID of R.id.fragment_container.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/add-to-app/android/add-flutter-fragment.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nclass MyActivity : FragmentActivity() {\n  companion object {\n    // Define a tag String to represent the FlutterFragment within this\n    // Activity's FragmentManager. This value can be whatever you'd like.\n    private const val TAG_FLUTTER_FRAGMENT = \"flutter_fragment\"\n  }\n\n  // Declare a local variable to reference the FlutterFragment so that you\n  // can forward calls to it later.\n  private var flutterFragment: FlutterFragment? = null\n\n  override fun onCreate(savedInstanceState: Bundle?) {\n    super.onCreate(savedInstanceState)\n\n    // Inflate a layout that has a container for your FlutterFragment. For\n    // this example, assume that a FrameLayout exists with an ID of\n    // R.id.fragment_container.\n    setContentView(R.layout.my_activity_layout)\n\n    // Get a reference to the Activity's FragmentManager to add a new\n    // FlutterFragment, or find an existing one.\n    val fragmentManager: FragmentManager = supportFragmentManager\n\n    // Attempt to find an existing FlutterFragment, in case this is not the\n    // first time that onCreate() was run.\n    flutterFragment = fragmentManager\n      .findFragmentByTag(TAG_FLUTTER_FRAGMENT) as FlutterFragment?\n\n    // Create and attach a FlutterFragment if one does not exist.\n    if (flutterFragment == null) {\n      var newFlutterFragment = FlutterFragment.createDefault()\n      flutterFragment = newFlutterFragment\n      fragmentManager\n        .beginTransaction()\n        .add(\n          R.id.fragment_container,\n          newFlutterFragment,\n          TAG_FLUTTER_FRAGMENT\n        )\n        .commit()\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Flutter project with Kotlin\nDESCRIPTION: This command creates a new Flutter project named 'flavors_example' using Kotlin as the Android language. The project will include default debug and release build types.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/deployment/flavors.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ flutter create --android-language kotlin flavors_example\n```\n\n----------------------------------------\n\nTITLE: Fetch Code Signing Files from App Store Connect\nDESCRIPTION: This command fetches the code signing files (profiles and certificates) from App Store Connect. It uses the bundle ID of the Xcode project and the API key to authenticate with App Store Connect.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/deployment/ios.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\napp-store-connect fetch-signing-files $(xcode-project detect-bundle-id) \\\n    --platform IOS \\\n    --type IOS_APP_STORE \\\n    --certificate-key=@file:/path/to/cert_key \\\n    --create\n```\n\n----------------------------------------\n\nTITLE: Using ListenableBuilder to Handle Command States in Flutter\nDESCRIPTION: This code snippet shows how to use multiple `ListenableBuilder` widgets in Flutter to listen to the `running` and `error` states of a ViewModel's command before displaying the ViewModel data. The `ListenableBuilder` widget rebuilds its child when the `Listenable` it's listening to changes, in this case, the `load` command's `running` and `error` properties. It displays a loading indicator while the command is running, an error message if the command results in an error, and finally, the ViewModel data when the command completes successfully.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/app-architecture/design-patterns/command.md#_snippet_15\n\nLANGUAGE: dart\nCODE:\n```\nbody: ListenableBuilder(\n  listenable: widget.viewModel.load,\n  builder: (context, child) {\n    if (widget.viewModel.load.running) {\n      return const Center(child: CircularProgressIndicator());\n    }\n\n    if (widget.viewModel.load.error != null) {\n      return Center(\n        child: Text('Error: ${widget.viewModel.load.error}'),\n      );\n    }\n\n    return child!;\n  },\n  child: ListenableBuilder(\n    listenable: widget.viewModel,\n    builder: (context, _) {\n      // ···\n    },\n  ),\n),\n```\n\n----------------------------------------\n\nTITLE: Updating iOS Podfile for Flutter Flavors (staging, production)\nDESCRIPTION: This snippet demonstrates how to update the `ios/Podfile` in a Flutter project to include configurations for staging and production flavors. It ensures that the correct build types are associated with each flavor. This update is crucial when adding new Xcode schemes for Flutter iOS projects.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/deployment/flavors-ios.md#_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nproject 'Runner', {\n  ...\n  'Debug' => :debug,\n  'Debug-staging' => :debug,\n  'Debug-production' => :debug,\n  'Profile' => :release,\n  'Profile-staging' => :release,\n  'Profile-production' => :release,\n  'Release' => :release,\n  'Release-staging' => :release,\n  'Release-production' => :release,\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Interactive Flutter GridView Example\nDESCRIPTION: This interactive example demonstrates a complete Flutter app that creates a grid list using `GridView.count`. The app displays a grid with two columns, populated with 100 items labeled with their index.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/lists/grid-lists.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\n\nvoid main() {\n  runApp(const MyApp());\n}\n\nclass MyApp extends StatelessWidget {\n  const MyApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    const title = 'Grid List';\n\n    return MaterialApp(\n      title: title,\n      home: Scaffold(\n        appBar: AppBar(title: const Text(title)),\n        body: GridView.count(\n          // Create a grid with 2 columns.\n          // If you change the scrollDirection to horizontal,\n          // this produces 2 rows.\n          crossAxisCount: 2,\n          // Generate 100 widgets that display their index in the list.\n          children: List.generate(100, (index) {\n            return Center(\n              child: Text(\n                'Item $index',\n                style: TextTheme.of(context).headlineSmall,\n              ),\n            );\n          }),\n        ),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Escaping in l10n.yaml\nDESCRIPTION: This YAML snippet shows how to enable escaping in the `l10n.yaml` file.  When enabled, any string of characters wrapped with a pair of single quotes is ignored by the parser, allowing special characters like `{` and `}` to be used as normal characters.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/accessibility-and-internationalization/internationalization.md#_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\nuse-escaping: true\n```\n\n----------------------------------------\n\nTITLE: Flutter App Entry Point and Basic UI\nDESCRIPTION: This Dart code defines the entry point of a Flutter application and creates a simple UI with a MaterialApp, Scaffold, AppBar, Text, and ElevatedButton. It demonstrates the basic structure of a Flutter app and how widgets are composed to build the user interface. It shows how to create a stateless widget (`MyApp`) and define its UI in the `build` method, creating a home page with a title and a button that prints 'Click!' to the console when pressed.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/resources/architectural-overview.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\nimport 'package:flutter/services.dart';\n\nvoid main() => runApp(const MyApp());\n\nclass MyApp extends StatelessWidget {\n  const MyApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      home: Scaffold(\n        appBar: AppBar(title: const Text('My Home Page')),\n        body: Center(\n          child: Builder(\n            builder: (context) {\n              return Column(\n                children: [\n                  const Text('Hello World'),\n                  const SizedBox(height: 20),\n                  ElevatedButton(\n                    onPressed: () {\n                      print('Click!');\n                    },\n                    child: const Text('A button'),\n                  ),\n                ],\n              );\n            },\n          ),\n        ),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Set Login Keychain as Default\nDESCRIPTION: Sets the login keychain as the default to avoid authentication issues with apps on the machine.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/deployment/macos.md#_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nkeychain use-login\n```\n\n----------------------------------------\n\nTITLE: Add Firestore Instance to App using Provider\nDESCRIPTION: This snippet integrates the Firestore instance into the app using the `provider` package. The `Provider.value` widget makes the `FirebaseFirestore.instance` available to all child widgets in the widget tree. This enables widgets to easily access and interact with the Firestore database. The provider is placed above `MyApp` to enable testing the app without Firebase.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/games/firestore-multiplayer.md#_snippet_2\n\nLANGUAGE: Dart\nCODE:\n```\nrunApp(Provider.value(value: FirebaseFirestore.instance, child: MyApp()));\n```\n\n----------------------------------------\n\nTITLE: Accessing Localized Strings in Flutter\nDESCRIPTION: This snippet demonstrates how to access a localized string defined in the `Strings` class within a Flutter `Text` widget.  This is how strings are displayed within the UI.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/uikit-devs.md#_snippet_14\n\nLANGUAGE: dart\nCODE:\n```\nText(Strings.welcomeMessage);\n```\n\n----------------------------------------\n\nTITLE: Creating a Banner Ad Widget in Flutter\nDESCRIPTION: This code defines a Flutter stateful widget, `MyBannerAdWidget`, which loads and displays a banner ad using the `google_mobile_ads` package. It handles ad loading, error cases, and disposal. The ad unit ID is dynamically chosen based on the platform (Android or iOS).\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/plugins/google-mobile-ads.md#_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nimport 'dart:io';\n\nimport 'package:flutter/widgets.dart';\nimport 'package:google_mobile_ads/google_mobile_ads.dart';\n\nclass MyBannerAdWidget extends StatefulWidget {\n  /// The requested size of the banner. Defaults to [AdSize.banner].\n  final AdSize adSize;\n\n  /// The AdMob ad unit to show.\n  ///\n  /// TODO: replace this test ad unit with your own ad unit\n  final String adUnitId =\n      Platform.isAndroid\n          // Use this ad unit on Android...\n          ? 'ca-app-pub-3940256099942544/6300978111'\n          // ... or this one on iOS.\n          : 'ca-app-pub-3940256099942544/2934735716';\n\n  MyBannerAdWidget({super.key, this.adSize = AdSize.banner});\n\n  @override\n  State<MyBannerAdWidget> createState() => _MyBannerAdWidgetState();\n}\n\nclass _MyBannerAdWidgetState extends State<MyBannerAdWidget> {\n  /// The banner ad to show. This is `null` until the ad is actually loaded.\n  BannerAd? _bannerAd;\n\n  @override\n  Widget build(BuildContext context) {\n    return SafeArea(\n      child: SizedBox(\n        width: widget.adSize.width.toDouble(),\n        height: widget.adSize.height.toDouble(),\n        child:\n            _bannerAd == null\n                // Nothing to render yet.\n                ? const SizedBox()\n                // The actual ad.\n                : AdWidget(ad: _bannerAd!),\n      ),\n    );\n  }\n\n  @override\n  void initState() {\n    super.initState();\n    _loadAd();\n  }\n\n  @override\n  void dispose() {\n    _bannerAd?.dispose();\n    super.dispose();\n  }\n\n  /// Loads a banner ad.\n  void _loadAd() {\n    final bannerAd = BannerAd(\n      size: widget.adSize,\n      adUnitId: widget.adUnitId,\n      request: const AdRequest(),\n      listener: BannerAdListener(\n        // Called when an ad is successfully received.\n        onAdLoaded: (ad) {\n          if (!mounted) {\n            ad.dispose();\n            return;\n          }\n          setState(() {\n            _bannerAd = ad as BannerAd;\n          });\n        },\n        // Called when an ad request failed.\n        onAdFailedToLoad: (ad, error) {\n          debugPrint('BannerAd failed to load: $error');\n          ad.dispose();\n        },\n      ),\n    );\n\n    // Start loading.\n    bannerAd.load();\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Showing Validation Errors in Flutter\nDESCRIPTION: This code snippet demonstrates how to display validation errors within a Flutter TextField. It utilizes the InputDecoration object to set the errorText property based on the validation status of the input. The isEmail function validates whether input text is a valid email format.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/android-devs.md#_snippet_43\n\nLANGUAGE: Dart\nCODE:\n```\nimport 'package:flutter/material.dart';\n\nvoid main() {\n  runApp(const SampleApp());\n}\n\nclass SampleApp extends StatelessWidget {\n  const SampleApp({super.key});\n  // This widget is the root of your application.\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: 'Sample App',\n      theme: ThemeData(\n        colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),\n      ),\n      home: const SampleAppPage(),\n    );\n  }\n}\n\nclass SampleAppPage extends StatefulWidget {\n  const SampleAppPage({super.key});\n\n  @override\n  State<SampleAppPage> createState() => _SampleAppPageState();\n}\n\nclass _SampleAppPageState extends State<SampleAppPage> {\n  String? _errorText;\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: const Text('Sample App')),\n      body: Center(\n        child: TextField(\n          onSubmitted: (text) {\n            setState(() {\n              if (!isEmail(text)) {\n                _errorText = 'Error: This is not an email';\n              } else {\n                _errorText = null;\n              }\n            });\n          },\n          decoration: InputDecoration(\n            hintText: 'This is a hint',\n            errorText: _getErrorText(),\n          ),\n        ),\n      ),\n    );\n  }\n\n  String? _getErrorText() {\n    return _errorText;\n  }\n\n  bool isEmail(String em) {\n    String emailRegexp =\n        r'^(([^<>()[\\\\]\\\\.,;:\\s@\\\"]+(\\\\.[^<>()[\\\\]\\\\.,;:\\s@\\\"]+)*)|' // Escaping backslashes here\n        r'(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|' // Escaping backslashes here\n        r'(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$'; // Escaping backslashes here\n\n    RegExp regExp = RegExp(emailRegexp);\n\n    return regExp.hasMatch(em);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Finders Example - Flutter\nDESCRIPTION: This complete example combines the previous snippets, demonstrating how to find widgets by text, key, and instance within the same test file. It imports necessary packages (`flutter/material.dart` and `flutter_test/flutter_test.dart`) and defines three separate `testWidgets` functions, each showcasing a different `Finder` method. This provides a comprehensive overview of using `Finder` classes for widget testing in Flutter.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/testing/widget/finders.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\nimport 'package:flutter_test/flutter_test.dart';\n\nvoid main() {\n  testWidgets('finds a Text widget', (tester) async {\n    // Build an App with a Text widget that displays the letter 'H'.\n    await tester.pumpWidget(const MaterialApp(home: Scaffold(body: Text('H'))));\n\n    // Find a widget that displays the letter 'H'.\n    expect(find.text('H'), findsOneWidget);\n  });\n\n  testWidgets('finds a widget using a Key', (tester) async {\n    // Define the test key.\n    const testKey = Key('K');\n\n    // Build a MaterialApp with the testKey.\n    await tester.pumpWidget(MaterialApp(key: testKey, home: Container()));\n\n    // Find the MaterialApp widget using the testKey.\n    expect(find.byKey(testKey), findsOneWidget);\n  });\n\n  testWidgets('finds a specific instance', (tester) async {\n    const childWidget = Padding(padding: EdgeInsets.zero);\n\n    // Provide the childWidget to the Container.\n    await tester.pumpWidget(Container(child: childWidget));\n\n    // Search for the childWidget in the tree and verify it exists.\n    expect(find.byWidget(childWidget), findsOneWidget);\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Add Authorization Header - Dart\nDESCRIPTION: This snippet demonstrates how to add an authorization header to an HTTP GET request using the `http` package and `HttpHeaders` class in Dart. It sends a request to a specified URL with a 'Basic' authentication token.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/networking/authenticated-requests.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nfinal response = await http.get(\n  Uri.parse('https://jsonplaceholder.typicode.com/albums/1'),\n  // Send authorization headers to the backend.\n  headers: {HttpHeaders.authorizationHeader: 'Basic your_api_token_here'},\n);\n```\n\n----------------------------------------\n\nTITLE: Checking Modifier Key Presses with RawKeyEvent (Before)\nDESCRIPTION: This snippet demonstrates how to check for modifier key presses (Control, Shift, Alt, Meta) and a specific key press (Key A) using the deprecated RawKeyEvent API.  It uses `RawKeyEvent.isControlPressed`, `RawKeyEvent.isShiftPressed`, `RawKeyEvent.isAltPressed`, `RawKeyEvent.isMetaPressed`, and `RawKeyEvent.isKeyPressed`.  The input is a `RawKeyEvent` and the output is printing to the console.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/key-event-migration.md#_snippet_0\n\nLANGUAGE: Dart\nCODE:\n```\nKeyEventResult _handleKeyEvent(RawKeyEvent keyEvent) {\n  if (keyEvent.isControlPressed ||\n      keyEvent.isShiftPressed ||\n      keyEvent.isAltPressed ||\n      keyEvent.isMetaPressed) {\n    print('Modifier pressed: $keyEvent');\n  }\n  if (keyEvent.isKeyPressed(LogicalKeyboardKey.keyA)) {\n    print('Key A pressed.');\n  }\n  return KeyEventResult.ignored;\n}\n```\n\n----------------------------------------\n\nTITLE: YAML Caret Syntax Dependency Constraint\nDESCRIPTION: Example of using the caret syntax to specify a minimum version for a package dependency in the `pubspec.yaml` file. This covers all versions from that version to the next major version.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/packages-and-plugins/using-packages.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  collection: '^5.4.0'\n```\n\n----------------------------------------\n\nTITLE: Installing SplitCompat in attachBaseContext (Java)\nDESCRIPTION: Installs SplitCompat by calling `SplitCompat.install(this);` within the `attachBaseContext()` method of the Application class. This ensures that dynamic feature modules are properly installed. This is an alternative method for supporting SplitCompat.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/perf/deferred-components.md#_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n@Override\nprotected void attachBaseContext(Context base) {\n    super.attachBaseContext(base);\n    // Emulates installation of future on demand modules using SplitCompat.\n    SplitCompat.install(this);\n}\n\n```\n\n----------------------------------------\n\nTITLE: Pre-warm FlutterEngine (Kotlin)\nDESCRIPTION: This Kotlin code snippet shows how to pre-warm a `FlutterEngine` within the `Application` class. It instantiates a `FlutterEngine`, executes Dart code to pre-warm it, and caches the `FlutterEngine` for later use by a `FlutterActivity`.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/add-to-app/android/add-flutter-screen.md#_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyApplication : Application() {\n  lateinit var flutterEngine : FlutterEngine\n\n  override fun onCreate() {\n    super.onCreate()\n\n    // Instantiate a FlutterEngine.\n    flutterEngine = FlutterEngine(this)\n\n    // Start executing Dart code to pre-warm the FlutterEngine.\n    flutterEngine.dartExecutor.executeDartEntrypoint(\n      DartExecutor.DartEntrypoint.createDefault()\n    )\n\n    // Cache the FlutterEngine to be used by FlutterActivity.\n    FlutterEngineCache\n      .getInstance()\n      .put(\"my_engine_id\", flutterEngine)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Observatory and DevTools debugger availability\nDESCRIPTION: The output displayed in the terminal after running `flutter run`.  It provides two URLs - one for the Observatory debugger and profiler, and another to open DevTools connected to the running Flutter application. Each URL contains a security token unique to the run.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/tools/devtools/cli.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nAn Observatory debugger and profiler on macOS is available at:\nhttp://127.0.0.1:52129/QjqebSY4lQ8=/\nThe Flutter DevTools debugger and profiler on macOS is available at:\nhttp://127.0.0.1:9100?uri=http://127.0.0.1:52129/QjqebSY4lQ8=/\n```\n\n----------------------------------------\n\nTITLE: Sample Output of Flutter Analyze (Console)\nDESCRIPTION: This snippet presents an example of the output produced by the `flutter analyze` command when ChromeOS-specific lint checks are enabled. It illustrates a warning indicating that a hardware feature specified in the AndroidManifest.xml is not supported on ChromeOS.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/platform-integration/android/chromeos.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nAnalyzing ...\nwarning • This hardware feature is not supported on ChromeOS •\nandroid/app/src/main/AndroidManifest.xml:4:33 • unsupported_chrome_os_hardware\n```\n\n----------------------------------------\n\nTITLE: Associating a FocusNode with a TextField in Flutter\nDESCRIPTION: This snippet shows how to associate a `FocusNode` with a `TextField` by passing it to the `focusNode` property. This allows you to programmatically control the focus of the text field.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/forms/focus.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\n@override\nWidget build(BuildContext context) {\n  return TextField(focusNode: myFocusNode);\n}\n```\n\n----------------------------------------\n\nTITLE: SegmentedButton Implementation in Flutter\nDESCRIPTION: This code demonstrates how to implement the new SegmentedButton widget in Flutter, replacing ToggleButtons. It uses ButtonSegment widgets for each segment and a Set to manage selected items. The onSelectionChanged callback handles segment selection.  It requires importing the material package and defining an enum for possible segment values.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/material-3-migration.md#_snippet_18\n\nLANGUAGE: dart\nCODE:\n```\nenum Weather { cloudy, rainy, sunny }\n\nSegmentedButton<Weather>(\n  selected: const <Weather>{Weather.rainy},\n  onSelectionChanged: (Set<Weather> newSelection) { },\n  segments: const <ButtonSegment<Weather>>[\n    ButtonSegment(\n      icon: Icon(Icons.cloud_outlined),\n      value: Weather.cloudy,\n    ),\n    ButtonSegment(\n      icon: Icon(Icons.beach_access_sharp),\n      value: Weather.rainy,\n    ),\n    ButtonSegment(\n      icon: Icon(Icons.brightness_5_sharp),\n      value: Weather.sunny,\n    ),\n  ],\n),\n```\n\n----------------------------------------\n\nTITLE: Implement Native View Build Method - Dart\nDESCRIPTION: This snippet demonstrates how to implement the `build()` method in a Flutter widget to create a `UiKitView`, which is used to host native iOS views. It defines the view type, passes creation parameters, and specifies the layout direction and codec.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/platform-integration/ios/platform-views.md#_snippet_1\n\nLANGUAGE: Dart\nCODE:\n```\nWidget build(BuildContext context) {\n  // This is used in the platform side to register the view.\n  const String viewType = '<platform-view-type>';\n  // Pass parameters to the platform side.\n  final Map<String, dynamic> creationParams = <String, dynamic>{};\n\n  return UiKitView(\n    viewType: viewType,\n    layoutDirection: TextDirection.ltr,\n    creationParams: creationParams,\n    creationParamsCodec: const StandardMessageCodec(),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Intents and Shared Data in MainActivity.java\nDESCRIPTION: This Java code snippet shows how to handle incoming intents in the MainActivity of a Flutter Android application.  It retrieves shared text data from the intent and stores it. When the Flutter side requests the shared data through a MethodChannel, the data is sent across and cleared.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/android-devs.md#_snippet_11\n\nLANGUAGE: java\nCODE:\n```\npackage com.example.shared;\n\nimport android.content.Intent;\nimport android.os.Bundle;\n\nimport androidx.annotation.NonNull;\n\nimport io.flutter.plugin.common.MethodChannel;\nimport io.flutter.embedding.android.FlutterActivity;\nimport io.flutter.embedding.engine.FlutterEngine;\nimport io.flutter.plugins.GeneratedPluginRegistrant;\n\npublic class MainActivity extends FlutterActivity {\n\n  private String sharedText;\n  private static final String CHANNEL = \"app.channel.shared.data\";\n\n  @Override\n  protected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    Intent intent = getIntent();\n    String action = intent.getAction();\n    String type = intent.getType();\n\n    if (Intent.ACTION_SEND.equals(action) && type != null) {\n      if (\"text/plain\".equals(type)) {\n        handleSendText(intent); // Handle text being sent\n      }\n    }\n  }\n\n  @Override\n  public void configureFlutterEngine(@NonNull FlutterEngine flutterEngine) {\n      GeneratedPluginRegistrant.registerWith(flutterEngine);\n\n      new MethodChannel(flutterEngine.getDartExecutor().getBinaryMessenger(), CHANNEL)\n              .setMethodCallHandler(\n                      (call, result) -> {\n                          if (call.method.contentEquals(\"getSharedText\")) {\n                              result.success(sharedText);\n                              sharedText = null;\n                          }\n                      }\n              );\n  }\n\n  void handleSendText(Intent intent) {\n    sharedText = intent.getStringExtra(Intent.EXTRA_TEXT);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Flutter Material Ripple Interactive Example\nDESCRIPTION: This is a complete Flutter application demonstrating the use of `InkWell` to create ripple effects.  It includes a `MyApp` StatelessWidget that renders a `MyHomePage` which contains a `MyButton` widget.  The `MyButton` widget wraps a `Text` widget with `InkWell` to create the ripple effect when tapped. The `onTap` function displays a snackbar.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/gestures/ripples.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\n\nvoid main() => runApp(const MyApp());\n\nclass MyApp extends StatelessWidget {\n  const MyApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    const title = 'InkWell Demo';\n\n    return const MaterialApp(title: title, home: MyHomePage(title: title));\n  }\n}\n\nclass MyHomePage extends StatelessWidget {\n  final String title;\n\n  const MyHomePage({super.key, required this.title});\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: Text(title)),\n      body: const Center(child: MyButton()),\n    );\n  }\n}\n\nclass MyButton extends StatelessWidget {\n  const MyButton({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    // The InkWell wraps the custom flat button widget.\n    return InkWell(\n      // When the user taps the button, show a snackbar.\n      onTap: () {\n        ScaffoldMessenger.of(\n          context,\n        ).showSnackBar(const SnackBar(content: Text('Tap')));\n      },\n      child: const Padding(\n        padding: EdgeInsets.all(12),\n        child: Text('Flat Button'),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: AndroidManifest.xml Metadata (Flutter Deep Linking Opt-Out)\nDESCRIPTION: This XML snippet is used to opt-out of Flutter's default deep link handler, which is necessary when using a third-party plugin to handle deep links. It adds a metadata tag to the `AndroidManifest.xml` file, setting the `flutter_deeplinking_enabled` property to `false`, preventing Flutter from interfering with the third-party plugin.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/navigation/set-up-app-links.md#_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<meta-data android:name=\"flutter_deeplinking_enabled\" android:value=\"false\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Platform-Specific Code in Flutter\nDESCRIPTION: This Dart snippet demonstrates how to implement platform-specific code in Flutter. It uses `Theme.of(context).platform` to determine the current platform and returns a corresponding string.  It provides a way to adapt the application's behavior based on the underlying operating system (iOS, Android, or Fuchsia).\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/react-native-devs.md#_snippet_56\n\nLANGUAGE: Dart\nCODE:\n```\nfinal platform = Theme.of(context).platform;\nif (platform == TargetPlatform.iOS) {\n  return 'iOS';\n}\nif (platform == TargetPlatform.android) {\n  return 'android';\n}\nif (platform == TargetPlatform.fuchsia) {\n  return 'fuchsia';\n}\nreturn 'not recognized ';\n```\n\n----------------------------------------\n\nTITLE: Gemfile for fastlane dependencies\nDESCRIPTION: This plaintext snippet shows a basic Gemfile used to manage fastlane dependencies. It specifies the source and declares the fastlane gem. Using a Gemfile ensures reproducible builds across different environments.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/deployment/cd.md#_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nsource \"https://rubygems.org\"\n\ngem \"fastlane\"\n```\n\n----------------------------------------\n\nTITLE: Disabling Attachments and Audio Input in Flutter\nDESCRIPTION: This snippet demonstrates how to disable attachments (the + button) and audio input (the mic button) in the LlmChatView. It shows setting the enableAttachments and enableVoiceNotes parameters to false.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ai-toolkit/feature-integration.md#_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nclass ChatPage extends StatelessWidget {\n  const ChatPage({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    // ...\n\n    return Scaffold(\n      appBar: AppBar(title: const Text('Restricted Chat')),\n      body: LlmChatView(\n        // ...\n        enableAttachments: false,\n        enableVoiceNotes: false,\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: HomeViewModel UI State in Dart\nDESCRIPTION: This snippet shows how to expose UI state from the `HomeViewModel` class. It demonstrates how to expose the `User` object and a list of `BookingSummary` objects as public members. The snippet emphasizes the use of `UnmodifiableListView` to ensure immutability of the list.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/app-architecture/case-study/ui-layer.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nclass HomeViewModel {\n  HomeViewModel({\n   required BookingRepository bookingRepository,\n   required UserRepository userRepository,\n  }) : _bookingRepository = bookingRepository,\n      _userRepository = userRepository;\n \n  final BookingRepository _bookingRepository;\n  final UserRepository _userRepository;\n\n  User? _user;\n  User? get user => _user;\n\n  List<BookingSummary> _bookings = [];\n \n  /// Items in an [UnmodifiableListView] can't be directly modified,\n  /// but changes in the source list can be modified. Since _bookings\n  /// is private and bookings is not, the view has no way to modify the\n  /// list directly.\n  UnmodifiableListView<BookingSummary> get bookings => UnmodifiableListView(_bookings);\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating Custom Actions in Flutter\nDESCRIPTION: This code snippet illustrates how to migrate custom actions to the new Actions API. It involves eliminating the `LocalKeys` you've defined and replacing them with `Intent` subclasses. The type of the argument to the `actions` argument of the `Actions` widget also needs to be changed. `MyIntent` is a custom Intent class used to identify the action.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/actions-api-revision.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nclass MyAction extends Action {\n  MyAction() : super(key);\n\n  /// The [LocalKey] that uniquely identifies this action to an [Intent].\n  static const LocalKey key = ValueKey<Type>(RequestFocusAction);\n\n  @override\n  void invoke(FocusNode node, MyIntent intent) {\n    // ...\n  }\n}\n\nclass MyWidget extends StatelessWidget {\n  // ...\n  @override\n  Widget build(BuildContext context) {\n    return Shortcuts(\n      shortcuts: <LogicalKeySet, Intent> {\n        LogicalKeySet(LogicalKeyboardKey.enter): Intent(MyAction.key),\n      },\n      child: Actions(\n        actions: <LocalKey, ActionFactory>{\n          MyAction.key: () => MyAction(),\n        },\n        child: Container(),\n      )\n    );\n  }\n}\n```\n\nLANGUAGE: dart\nCODE:\n```\n// You may need to create new Intent subclasses if you used\n// a bare LocalKey before.\nclass MyIntent extends Intent {\n  const MyIntent();\n}\n\nclass MyAction extends Action<MyIntent> {\n  @override\n  Object invoke(MyIntent intent) {\n    // ...\n  }\n}\n\nclass MyWidget extends StatelessWidget {\n  // ...\n  @override\n  Widget build(BuildContext context) {\n    return Shortcuts(\n      shortcuts: <LogicalKeySet, Intent> {\n        LogicalKeySet(LogicalKeyboardKey.enter): MyIntent,\n      },\n      child: Actions(\n        actions: <Type, Action<Intent>>{\n          MyIntent: MyAction(),\n        },\n        child: Container(),\n      )\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Highlighting Repaints in Flutter\nDESCRIPTION: This code snippet demonstrates how to highlight repaints in Flutter, drawing a colored border around render boxes that change color each time they repaint. It uses the `debugRepaintRainbowEnabled` property from the `flutter/rendering.dart` package.  Setting `debugRepaintRainbowEnabled` to `true` enables the highlighting, helping to identify performance bottlenecks. No inputs are required.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/tools/devtools/inspector.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/rendering.dart';\n\nvoid highlightRepaints() {\n  debugRepaintRainbowEnabled = true;\n}\n```\n\n----------------------------------------\n\nTITLE: Layering Widgets with Stack in Flutter\nDESCRIPTION: Shows how to layer widgets using the `Stack` widget in Flutter. The `Stack` widget positions its children relative to the edges of its box, allowing for overlapping widgets. The `alignment` property controls the position of the children.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/react-native-devs.md#_snippet_26\n\nLANGUAGE: dart\nCODE:\n```\n@override\nWidget build(BuildContext context) {\n  return Stack(\n    alignment: const Alignment(0.6, 0.6),\n    children: <Widget>[\n      const CircleAvatar(\n        backgroundImage: NetworkImage(\n          'https://avatars3.githubusercontent.com/u/14101776?v=4',\n        ),\n      ),\n      Container(color: Colors.black45, child: const Text('Flutter')),\n    ],\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using AppLocalizations delegates and locales - Dart\nDESCRIPTION: This code configures the `MaterialApp` using auto-generated `localizationsDelegates` and `supportedLocales` lists provided by the `AppLocalizations` class. This approach simplifies the configuration process.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/accessibility-and-internationalization/internationalization.md#_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\nconst MaterialApp(\n  title: 'Localizations Sample App',\n  localizationsDelegates: AppLocalizations.localizationsDelegates,\n  supportedLocales: AppLocalizations.supportedLocales,\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Table Constants in Dart\nDESCRIPTION: This code snippet defines the table and column names as constants within the `DatabaseService`.  It uses static const variables to define table name (`_kTableTodo`) and column names for ID (`_kColumnId`) and Task (`_kColumnTask`). This is done to avoid typos and ensure consistency when writing SQL code.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/app-architecture/design-patterns/sql.md#_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nstatic const _kTableTodo = 'todo';\nstatic const _kColumnId = '_id';\nstatic const _kColumnTask = 'task';\n```\n\n----------------------------------------\n\nTITLE: FFI Plugin with Dart Class Configuration\nDESCRIPTION: This YAML snippet shows how to configure a platform within a Flutter plugin to use both FFI and a Dart class. This configuration uses `dartPluginClass` to specify a Dart class and `ffiPlugin: true` to enable native builds.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/packages-and-plugins/developing-packages.md#_snippet_21\n\nLANGUAGE: YAML\nCODE:\n```\nplugin:\n    implements: some_other_plugin\n    platforms:\n      some_platform:\n        dartPluginClass: SomeClass\n        ffiPlugin: true\n```\n\n----------------------------------------\n\nTITLE: CardListItem Widget with Loading State in Dart\nDESCRIPTION: This code defines a `CardListItem` widget that displays either a loading state with placeholder rectangles or actual text content, based on the `isLoading` property. When `isLoading` is true, it shows rounded rectangles as placeholders. Otherwise, it displays a text widget.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/effects/shimmer-loading.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nclass CardListItem extends StatelessWidget {\n  const CardListItem({super.key, required this.isLoading});\n\n  final bool isLoading;\n\n  @override\n  Widget build(BuildContext context) {\n    return Padding(\n      padding: const EdgeInsets.symmetric(horizontal: 24, vertical: 16),\n      child: Column(\n        crossAxisAlignment: CrossAxisAlignment.start,\n        children: [_buildImage(), const SizedBox(height: 16), _buildText()],\n      ),\n    );\n  }\n\n  Widget _buildImage() {\n    return AspectRatio(\n      aspectRatio: 16 / 9,\n      child: Container(\n        width: double.infinity,\n        decoration: BoxDecoration(\n          color: Colors.black,\n          borderRadius: BorderRadius.circular(16),\n        ),\n        child: ClipRRect(\n          borderRadius: BorderRadius.circular(16),\n          child: Image.network(\n            'https://docs.flutter.dev/cookbook'\n            '/img-files/effects/split-check/Food1.jpg',\n            fit: BoxFit.cover,\n          ),\n        ),\n      ),\n    );\n  }\n\n  Widget _buildText() {\n    if (isLoading) {\n      return Column(\n        crossAxisAlignment: CrossAxisAlignment.start,\n        children: [\n          Container(\n            width: double.infinity,\n            height: 24,\n            decoration: BoxDecoration(\n              color: Colors.black,\n              borderRadius: BorderRadius.circular(16),\n            ),\n          ),\n          const SizedBox(height: 16),\n          Container(\n            width: 250,\n            height: 24,\n            decoration: BoxDecoration(\n              color: Colors.black,\n              borderRadius: BorderRadius.circular(16),\n            ),\n          ),\n        ],\n      );\n    } else {\n      return const Padding(\n        padding: EdgeInsets.symmetric(horizontal: 8),\n        child: Text(\n          'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do '\n          'eiusmod tempor incididunt ut labore et dolore magna aliqua.',\n        ),\n      );\n    }\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Repository Unit Test in Flutter (Dart)\nDESCRIPTION: This snippet shows a unit test for the `BookingRepository`, using a `FakeApiClient` to mock the API client dependency.  The test calls `getBooking` on the `BookingRepository` and verifies that the result matches the expected booking object.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/app-architecture/case-study/testing.md#_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() {\n  group('BookingRepositoryRemote tests', () {\n    late BookingRepository bookingRepository;\n    late FakeApiClient fakeApiClient;\n\n    setUp(() {\n      fakeApiClient = FakeApiClient();\n      bookingRepository = BookingRepositoryRemote(\n        apiClient: fakeApiClient,\n      );\n    });\n\n    test('should get booking', () async {\n      final result = await bookingRepository.getBooking(0);\n      final booking = result.asOk.value;\n      expect(booking, kBooking);\n    });\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Migrate to setEnabledSystemUIMode - Dart\nDESCRIPTION: This code snippet demonstrates how to migrate to `SystemChrome.setEnabledSystemUIMode` from the deprecated `SystemChrome.setEnabledSystemUIOverlays` in Flutter. It uses `SystemUiMode.manual` and explicitly passes the list of overlays. This migration provides better support for fullscreen modes.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/3-7-deprecations.md#_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nSystemChrome.setEnabledSystemUIMode(\n  SystemUiMode.manual,\n  overlays: <SystemUiOverlay>[\n    SystemUiOverlay.top,\n    SystemUiOverlay.bottom,\n  ],\n);\n```\n\n----------------------------------------\n\nTITLE: Access Shimmer Properties in Flutter\nDESCRIPTION: Adds methods to the `ShimmerState` class to provide access to the linear gradient, the size of the `ShimmerState`'s `RenderBox`, and the position of a descendant within the `ShimmerState`'s `RenderBox`. It uses `context.findRenderObject()` to get the RenderBox and its size.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/effects/shimmer-loading.md#_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nclass ShimmerState extends State<Shimmer> {\n  Gradient get gradient => LinearGradient(\n    colors: widget.linearGradient.colors,\n    stops: widget.linearGradient.stops,\n    begin: widget.linearGradient.begin,\n    end: widget.linearGradient.end,\n  );\n\n  bool get isSized =>\n      (context.findRenderObject() as RenderBox?)?.hasSize ?? false;\n\n  Size get size => (context.findRenderObject() as RenderBox).size;\n\n  Offset getDescendantOffset({\n    required RenderBox descendant,\n    Offset offset = Offset.zero,\n  }) {\n    final shimmerBox = context.findRenderObject() as RenderBox;\n    return descendant.localToGlobal(offset, ancestor: shimmerBox);\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return widget.child ?? const SizedBox();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Build macOS app for release\nDESCRIPTION: This command builds a release version of the Flutter macOS app. This command needs to be executed from the base directory of your application project.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/deployment/macos.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nflutter build macos\n```\n\n----------------------------------------\n\nTITLE: Drawing on Canvas with CustomPainter\nDESCRIPTION: This snippet demonstrates how to draw on the screen using Flutter's Canvas and CustomPainter classes. It allows the user to draw a signature by tracking touch events and drawing lines between the points. Requires the flutter/material package.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/uikit-devs.md#_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\n\nvoid main() => runApp(const MaterialApp(home: DemoApp()));\n\nclass DemoApp extends StatelessWidget {\n  const DemoApp({super.key});\n\n  @override\n  Widget build(BuildContext context) => const Scaffold(body: Signature());\n}\n\nclass Signature extends StatefulWidget {\n  const Signature({super.key});\n\n  @override\n  State<Signature> createState() => SignatureState();\n}\n\nclass SignatureState extends State<Signature> {\n  List<Offset?> _points = <Offset?>[];\n  @override\n  Widget build(BuildContext context) {\n    return GestureDetector(\n      onPanUpdate: (details) {\n        setState(() {\n          RenderBox? referenceBox = context.findRenderObject() as RenderBox;\n          Offset localPosition = referenceBox.globalToLocal(\n            details.globalPosition,\n          );\n          _points = List.from(_points)..add(localPosition);\n        });\n      },\n      onPanEnd: (details) => _points.add(null),\n      child: CustomPaint(\n        painter: SignaturePainter(_points),\n        size: Size.infinite,\n      ),\n    );\n  }\n}\n\nclass SignaturePainter extends CustomPainter {\n  SignaturePainter(this.points);\n\n  final List<Offset?> points;\n\n  @override\n  void paint(Canvas canvas, Size size) {\n    final Paint paint =\n        Paint()\n          ..color = Colors.black\n          ..strokeCap = StrokeCap.round\n          ..strokeWidth = 5;\n    for (int i = 0; i < points.length - 1; i++) {\n      if (points[i] != null && points[i + 1] != null) {\n        canvas.drawLine(points[i]!, points[i + 1]!, paint);\n      }\n    }\n  }\n\n  @override\n  bool shouldRepaint(SignaturePainter oldDelegate) =>\n      oldDelegate.points != points;\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Routing with go_router\nDESCRIPTION: Creates a `GoRouter` object to handle routing within the Flutter app. This example defines routes for the home screen ('/') and a details screen ('/details'). It uses `MaterialApp.router` to integrate the router with the app's UI.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/navigation/set-up-universal-links.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\nimport 'package:go_router/go_router.dart';\n\nvoid main() => runApp(MaterialApp.router(routerConfig: router));\n\n/// This handles '/' and '/details'.\nfinal router = GoRouter(\n  routes: [\n    GoRoute(\n      path: '/',\n      builder: (_, __) => Scaffold(\n        appBar: AppBar(title: const Text('Home Screen')),\n      ),\n      routes: [\n        GoRoute(\n          path: 'details',\n          builder: (_, __) => Scaffold(\n            appBar: AppBar(title: const Text('Details Screen')),\n          ),\n        ),\n      ],\n    ),\n  ],\n);\n```\n\n----------------------------------------\n\nTITLE: Handling ListView Item Clicks in Flutter\nDESCRIPTION: This code snippet demonstrates how to handle item clicks in a ListView using GestureDetector widgets. Each list item is wrapped in a GestureDetector, and the onTap callback is used to execute code when the item is tapped, logging a message to the console in this example.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/android-devs.md#_snippet_38\n\nLANGUAGE: dart\nCODE:\n```\nimport 'dart:developer' as developer;\n\nimport 'package:flutter/material.dart';\n\nvoid main() {\n  runApp(const SampleApp());\n}\n\nclass SampleApp extends StatelessWidget {\n  const SampleApp({super.key});\n  // This widget is the root of your application.\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: 'Sample App',\n      theme: ThemeData(\n        colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),\n      ),\n      home: const SampleAppPage(),\n    );\n  }\n}\n\nclass SampleAppPage extends StatefulWidget {\n  const SampleAppPage({super.key});\n\n  @override\n  State<SampleAppPage> createState() => _SampleAppPageState();\n}\n\nclass _SampleAppPageState extends State<SampleAppPage> {\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: const Text('Sample App')),\n      body: ListView(children: _getListData()),\n    );\n  }\n\n  List<Widget> _getListData() {\n    List<Widget> widgets = [];\n    for (int i = 0; i < 100; i++) {\n      widgets.add(\n        GestureDetector(\n          onTap: () {\n            developer.log('row tapped');\n          },\n          child: Padding(\n            padding: const EdgeInsets.all(10),\n            child: Text('Row $i'),\n          ),\n        ),\n      );\n    }\n    return widgets;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: IgnorePointer, AbsorbPointer, SliverIgnorePointer after migration Dart\nDESCRIPTION: This code demonstrates how to migrate to the new implementation by wrapping the widgets with `ExcludeSemantics`. This ensures that the semantics tree is excluded as intended.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/ignoringsemantics-migration.md#_snippet_1\n\nLANGUAGE: Dart\nCODE:\n```\nExcludeSemantics(\n  child: IgnorePointer(\n    child: const PlaceHolder(),\n  ),\n);\n\nExcludeSemantics(\n  child: AbsorbPointer(\n    child: const PlaceHolder(),\n  ),\n);\n\nSliverIgnorePointer(\n  child: ExcludeSemantics(\n    child: const PlaceHolder(),\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Using Placeholders in Dart\nDESCRIPTION: This Dart code snippet shows how to use the generated `AppLocalizations` class to access the internationalized string with a placeholder.  It calls the `hello` method, passing in a string value for the `userName` placeholder.  It assumes that the AppLocalizations class has been generated from the ARB file.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/accessibility-and-internationalization/internationalization.md#_snippet_15\n\nLANGUAGE: dart\nCODE:\n```\n// Examples of internationalized strings.\nreturn Column(\n  children: <Widget>[\n    // Returns 'Hello John'\n    Text(AppLocalizations.of(context)!.hello('John')),\n  ],\n);\n```\n\n----------------------------------------\n\nTITLE: Display network image Flutter\nDESCRIPTION: This snippet demonstrates how to display an image from a URL using the `Image.network` constructor in Flutter. It fetches an image from a specified URL and displays it within the application.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/images/network-image.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nImage.network('https://picsum.photos/250?image=9'),\n```\n\n----------------------------------------\n\nTITLE: Building a ListView with ListTile widgets in Flutter (Dart)\nDESCRIPTION: This snippet demonstrates how to create a ListView containing a list of ListTile widgets, separated by a Divider.  Each ListTile displays a title, subtitle, and icon.  This example shows a list of restaurants and theaters.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/layout/index.md#_snippet_18\n\nLANGUAGE: dart\nCODE:\n```\nWidget _buildList() {\n  return ListView(\n    children: [\n      _tile('CineArts at the Empire', '85 W Portal Ave', Icons.theaters),\n      _tile('The Castro Theater', '429 Castro St', Icons.theaters),\n      _tile('Alamo Drafthouse Cinema', '2550 Mission St', Icons.theaters),\n      _tile('Roxie Theater', '3117 16th St', Icons.theaters),\n      _tile(\n        'United Artists Stonestown Twin',\n        '501 Buckingham Way',\n        Icons.theaters,\n      ),\n      _tile('AMC Metreon 16', '135 4th St #3000', Icons.theaters),\n      const Divider(),\n      _tile('K\\'s Kitchen', '757 Monterey Blvd', Icons.restaurant),\n      _tile('Emmy\\'s Restaurant', '1923 Ocean Ave', Icons.restaurant),\n      _tile('Chaiya Thai Restaurant', '272 Claremont Blvd', Icons.restaurant),\n      _tile('La Ciccia', '291 30th St', Icons.restaurant),\n    ],\n  );\n}\n\nListTile _tile(String title, String subtitle, IconData icon) {\n  return ListTile(\n    title: Text(\n      title,\n      style: const TextStyle(fontWeight: FontWeight.w500, fontSize: 20),\n    ),\n    subtitle: Text(subtitle),\n    leading: Icon(icon, color: Colors.blue[500]),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Output Example\nDESCRIPTION: This JSON snippet shows an example of the desired JSON output after enabling `explicitToJson: true` when serializing nested classes. This ensures that the nested `address` object is fully serialized instead of just showing 'Instance of Address'.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/data-and-backend/serialization/json.md#_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{ \"name\": \"John\", \"address\": { \"street\": \"My st.\", \"city\": \"New York\"}}\n```\n\n----------------------------------------\n\nTITLE: Complete HTTP Delete Example in Dart (Flutter)\nDESCRIPTION: This snippet provides a complete Flutter example demonstrating how to fetch and delete data from a server using HTTP. It includes the necessary imports, data model (Album), fetch and delete functions, and the Flutter UI implementation for displaying the data and triggering the delete operation. It uses `FutureBuilder` to handle the asynchronous operations and update the UI accordingly.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/networking/delete-data.md#_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nimport 'dart:async';\nimport 'dart:convert';\n\nimport 'package:flutter/material.dart';\nimport 'package:http/http.dart' as http;\n\nFuture<Album> fetchAlbum() async {\n  final response = await http.get(\n    Uri.parse('https://jsonplaceholder.typicode.com/albums/1'),\n  );\n\n  if (response.statusCode == 200) {\n    // If the server did return a 200 OK response, then parse the JSON.\n    return Album.fromJson(jsonDecode(response.body) as Map<String, dynamic>);\n  } else {\n    // If the server did not return a 200 OK response, then throw an exception.\n    throw Exception('Failed to load album');\n  }\n}\n\nFuture<Album> deleteAlbum(String id) async {\n  final http.Response response = await http.delete(\n    Uri.parse('https://jsonplaceholder.typicode.com/albums/$id'),\n    headers: <String, String>{\n      'Content-Type': 'application/json; charset=UTF-8',\n    },\n  );\n\n  if (response.statusCode == 200) {\n    // If the server did return a 200 OK response,\n    // then return an empty Album. After deleting,\n    // you'll get an empty JSON `{}` response.\n    // Don't return `null`, otherwise `snapshot.hasData`\n    // will always return false on `FutureBuilder`.\n    return Album.empty();\n  } else {\n    // If the server did not return a \"200 OK response\",\n    // then throw an exception.\n    throw Exception('Failed to delete album.');\n  }\n}\n\nclass Album {\n  int? id;\n  String? title;\n\n  Album({this.id, this.title});\n\n  Album.empty();\n\n  factory Album.fromJson(Map<String, dynamic> json) {\n    return switch (json) {\n      {'id': int id, 'title': String title} => Album(id: id, title: title),\n      _ => throw const FormatException('Failed to load album.'),\n    };\n  }\n}\n\nvoid main() {\n  runApp(const MyApp());\n}\n\nclass MyApp extends StatefulWidget {\n  const MyApp({super.key});\n\n  @override\n  State<MyApp> createState() {\n    return _MyAppState();\n  }\n}\n\nclass _MyAppState extends State<MyApp> {\n  late Future<Album> _futureAlbum;\n\n  @override\n  void initState() {\n    super.initState();\n    _futureAlbum = fetchAlbum();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: 'Delete Data Example',\n      theme: ThemeData(\n        colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),\n      ),\n      home: Scaffold(\n        appBar: AppBar(title: const Text('Delete Data Example')),\n        body: Center(\n          child: FutureBuilder<Album>(\n            future: _futureAlbum,\n            builder: (context, snapshot) {\n              // If the connection is done,\n              // check for response data or an error.\n              if (snapshot.connectionState == ConnectionState.done) {\n                if (snapshot.hasData) {\n                  return Column(\n                    mainAxisAlignment: MainAxisAlignment.center,\n                    children: <Widget>[\n                      Text(snapshot.data?.title ?? 'Deleted'),\n                      ElevatedButton(\n                        child: const Text('Delete Data'),\n                        onPressed: () {\n                          setState(() {\n                            _futureAlbum = deleteAlbum(\n                              snapshot.data!.id.toString(),\n                            );\n                          });\n                        },\n                      ),\n                    ],\n                  );\n                } else if (snapshot.hasError) {\n                  return Text('${snapshot.error}');\n                }\n              }\n\n              // By default, show a loading spinner.\n              return const CircularProgressIndicator();\n            },\n          ),\n        ),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Listening for Keyboard Events with Focus Widget in Flutter\nDESCRIPTION: This snippet shows how to use the `Focus` widget to listen for keyboard events on a specific widget, in this case a `TextField`. The `onKeyEvent` callback is used to capture key events and print the logical key pressed. The widget returns KeyEventResult.ignored which allows other widgets to also respond to the event.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/adaptive-responsive/input.md#_snippet_3\n\nLANGUAGE: Dart\nCODE:\n```\n  @override\n  Widget build(BuildContext context) {\n    return Focus(\n      onKeyEvent: (node, event) {\n        if (event is KeyDownEvent) {\n          print(event.logicalKey);\n        }\n        return KeyEventResult.ignored;\n      },\n      child: ConstrainedBox(\n        constraints: const BoxConstraints(maxWidth: 400),\n        child: const TextField(\n          decoration: InputDecoration(border: OutlineInputBorder()),\n        ),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: YAML Configuration for Deferred Components in pubspec.yaml\nDESCRIPTION: This YAML snippet demonstrates how to configure deferred components in the `pubspec.yaml` file. It defines the `boxComponent` with a specific library.  This configuration maps the Dart library to the deferred component, enabling deferred loading.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/perf/deferred-components.md#_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\n...\nflutter:\n  ...\n  deferred-components:\n    - name: boxComponent\n      libraries:\n        - package:MyAppName/box.Dart\n  ...\n```\n\n----------------------------------------\n\nTITLE: Creating Tabs with TabBar in Flutter\nDESCRIPTION: This snippet demonstrates how to create tabs using the TabBar widget within an AppBar. It includes three Tab widgets, each with an icon, and is wrapped inside a DefaultTabController for automatic tab management.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/design/tabs.md#_snippet_1\n\nLANGUAGE: Dart\nCODE:\n```\nreturn MaterialApp(\n  home: DefaultTabController(\n    length: 3,\n    child: Scaffold(\n      appBar: AppBar(\n        bottom: const TabBar(\n          tabs: [\n            Tab(icon: Icon(Icons.directions_car)),\n            Tab(icon: Icon(Icons.directions_transit)),\n            Tab(icon: Icon(Icons.directions_bike)),\n          ],\n        ),\n      ),\n    ),\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Wrapping CardListItem with ShimmerLoading in Dart\nDESCRIPTION: This code snippet demonstrates how to wrap a `CardListItem` widget with the `ShimmerLoading` widget to apply the shimmer effect during loading. The `_isLoading` boolean is passed to both `ShimmerLoading` and `CardListItem` widgets, ensuring consistent loading behavior.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/effects/shimmer-loading.md#_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nWidget _buildListItem() {\n  return ShimmerLoading(\n    isLoading: _isLoading,\n    child: CardListItem(isLoading: _isLoading),\n  );\n}\n\n```\n\n----------------------------------------\n\nTITLE: Custom Response Widget Implementation in Dart\nDESCRIPTION: This Dart code snippet shows how to use a custom widget to render the response from an LLM.  The `LlmChatView`'s `responseBuilder` parameter is set to a function that returns a `RecipeResponseView` widget, passing the LLM response to it. This allows for app-specific rendering of LLM output instead of the default Markdown formatting.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ai-toolkit/feature-integration.md#_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\nLlmChatView(\n  provider: _provider,\n  welcomeMessage: _welcomeMessage,\n  responseBuilder: (context, response) => RecipeResponseView(\n    response,\n  ),\n),\n```\n\n----------------------------------------\n\nTITLE: Complete SubscribeButtonViewModel Implementation in Dart\nDESCRIPTION: This code snippet presents the complete implementation of the SubscribeButtonViewModel, including the constructor with dependency injection, subscription state variables, and the asynchronous subscribe method with optimistic updates and error handling.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/app-architecture/design-patterns/optimistic-state.md#_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\n/// Subscribe button View Model.\n/// Handles the subscribe action and exposes the state to the subscription.\nclass SubscribeButtonViewModel extends ChangeNotifier {\n  SubscribeButtonViewModel({required this.subscriptionRepository});\n\n  final SubscriptionRepository subscriptionRepository;\n\n  // Whether the user is subscribed\n  bool subscribed = false;\n\n  // Whether the subscription action has failed\nbool error = false;\n\n  // Subscription action\n  Future<void> subscribe() async {\n    // Ignore taps when subscribed\n    if (subscribed) {\n      return;\n    }\n\n    // Optimistic state.\n    // It will be reverted if the subscription fails.\n    subscribed = true;\n    // Notify listeners to update the UI\n    notifyListeners();\n\n    try {\n      await subscriptionRepository.subscribe();\n    } catch (e) {\n      print('Failed to subscribe: $e');\n      // Revert to the previous state\n      subscribed = false;\n      // Set the error state\n      error = true;\n    } finally {\n      notifyListeners();\n    }\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Display Response with FutureBuilder in Dart\nDESCRIPTION: This uses a `FutureBuilder` widget to display the updated album title.  It handles different states of the `Future`: displays the title when data is available, shows an error message if there's an error, and presents a `CircularProgressIndicator` while loading.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/networking/update-data.md#_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nFutureBuilder<Album>(\n  future: _futureAlbum,\n  builder: (context, snapshot) {\n    if (snapshot.hasData) {\n      return Text(snapshot.data!.title);\n    } else if (snapshot.hasError) {\n      return Text('${snapshot.error}');\n    }\n\n    return const CircularProgressIndicator();\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing FlutterFragment with Java\nDESCRIPTION: This code snippet demonstrates how to initialize a `FlutterFragment` in Java, using both a new `FlutterEngine` and a cached `FlutterEngine`. It utilizes the `shouldAttachEngineToActivity(false)` method to prevent Flutter from interacting with the surrounding Activity. This is useful in scenarios where the `FlutterFragment` represents only a portion of a UI and should not affect Android's system chrome. Two approaches are shown: using a new FlutterEngine and a cached FlutterEngine.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/add-to-app/android/add-flutter-fragment.md#_snippet_17\n\nLANGUAGE: Java\nCODE:\n```\n// Using a new FlutterEngine.\nFlutterFragment flutterFragment = FlutterFragment.withNewEngine()\n    .shouldAttachEngineToActivity(false)\n    .build();\n\n// Using a cached FlutterEngine.\nFlutterFragment flutterFragment = FlutterFragment.withCachedEngine(\"my_engine_id\")\n    .shouldAttachEngineToActivity(false)\n    .build();\n```\n\n----------------------------------------\n\nTITLE: FutureBuilder to Display Album Data in Flutter\nDESCRIPTION: Uses a FutureBuilder widget to display the data received from a Future<Album>. Displays the album title if the Future completes successfully, an error message if the Future fails, or a CircularProgressIndicator while the Future is still loading.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/networking/send-data.md#_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nFutureBuilder<Album>(\n  future: _futureAlbum,\n  builder: (context, snapshot) {\n    if (snapshot.hasData) {\n      return Text(snapshot.data!.title);\n    } else if (snapshot.hasError) {\n      return Text('${snapshot.error}');\n    }\n\n    return const CircularProgressIndicator();\n  },\n)\n```\n\n----------------------------------------\n\nTITLE: Handling Method Call in AppDelegate.swift (Swift)\nDESCRIPTION: This Swift code handles the 'getBatteryLevel' method call from Flutter.  It calls the `receiveBatteryLevel` function to retrieve the battery level and returns the result to Flutter. If the method call is not 'getBatteryLevel', it returns FlutterMethodNotImplemented.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/platform-integration/platform-channels.md#_snippet_14\n\nLANGUAGE: Swift\nCODE:\n```\nbatteryChannel.setMethodCallHandler({\n  [weak self] (call: FlutterMethodCall, result: FlutterResult) -> Void in\n  // This method is invoked on the UI thread.\n  guard call.method == \"getBatteryLevel\" else {\n    result(FlutterMethodNotImplemented)\n    return\n  }\n  self?.receiveBatteryLevel(result: result)\n})\n```\n\n----------------------------------------\n\nTITLE: Use OrientationBuilder to change columns - Dart\nDESCRIPTION: This snippet demonstrates how to use OrientationBuilder to dynamically adjust the number of columns in a GridView based on the device's orientation. It uses the Orientation enum to check whether the device is in portrait or landscape mode and sets the crossAxisCount accordingly.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/design/orientation.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nbody: OrientationBuilder(\n  builder: (context, orientation) {\n    return GridView.count(\n      // Create a grid with 2 columns in portrait mode,\n      // or 3 columns in landscape mode.\n      crossAxisCount: orientation == Orientation.portrait ? 2 : 3,\n    );\n  },\n),\n```\n\n----------------------------------------\n\nTITLE: TextButton with overlay color overrides based on state in Dart\nDESCRIPTION: This snippet shows how to override the overlay color of a TextButton based on its state (hovered, focused, or pressed) using MaterialStateProperty.resolveWith. It provides different opacity values for the overlay color depending on the button's state.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/buttons.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nTextButton(\n  style: ButtonStyle(\n    foregroundColor: MaterialStateProperty.all<Color>(Colors.blue),\n    overlayColor: MaterialStateProperty.resolveWith<Color?>(\n      (Set<MaterialState> states) {\n        if (states.contains(MaterialState.hovered))\n          return Colors.blue.withOpacity(0.04);\n        if (states.contains(MaterialState.focused) ||\n            states.contains(MaterialState.pressed))\n          return Colors.blue.withOpacity(0.12);\n        return null; // Defer to the widget's default.\n      },\n    ),\n  ),\n  onPressed: () { },\n  child: Text('TextButton')\n)\n```\n\n----------------------------------------\n\nTITLE: Migrate ThemeData accentColor to colorScheme (Flutter/Dart)\nDESCRIPTION: Shows how to migrate from using ThemeData's accentColor to using the colorScheme's secondary color in Flutter applications. The `copyWith` method of ThemeData and ColorScheme is used to modify the theme.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/theme-data-accent-properties.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nfinal ThemeData theme = ThemeData();\nMaterialApp(\n  theme: theme.copyWith(\n    colorScheme: theme.colorScheme.copyWith(secondary: myColor),\n  ),\n  //...\n)\n```\n\n----------------------------------------\n\nTITLE: Add Git Dependency in pubspec.yaml\nDESCRIPTION: This YAML snippet demonstrates how to define a Git dependency in the `pubspec.yaml` file. This allows a Flutter app to depend on a package stored in a Git repository. It uses the URL of the Git repository.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/packages-and-plugins/using-packages.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  packageA:\n    git:\n      url: https://github.com/flutter/packageA.git\n```\n\n----------------------------------------\n\nTITLE: Animating with Multiple Tweens in AnimatedWidget - Dart\nDESCRIPTION: This code modifies the AnimatedLogo widget to incorporate opacity and size animation using static Tween objects. The build method utilizes Tween.evaluate() to calculate the animated size and opacity values based on the animation's current state. This is achieved using a parent Animation object. The static declaration improves performance by preventing unnecessary object creation on each build.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/animations/tutorial.md#_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nclass AnimatedLogo extends AnimatedWidget {\n  const AnimatedLogo({super.key, required Animation<double> animation})\n    : super(listenable: animation);\n\n  // Make the Tweens static because they don't change.\n  static final _opacityTween = Tween<double>(begin: 0.1, end: 1);\n  static final _sizeTween = Tween<double>(begin: 0, end: 300);\n\n  @override\n  Widget build(BuildContext context) {\n    final animation = listenable as Animation<double>;\n    return Center(\n      child: Opacity(\n        opacity: _opacityTween.evaluate(animation),\n        child: Container(\n          margin: const EdgeInsets.symmetric(vertical: 10),\n          height: _sizeTween.evaluate(animation),\n          width: _sizeTween.evaluate(animation),\n          child: const FlutterLogo(),\n        ),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Toggling Widgets with StatefulWidget - Flutter\nDESCRIPTION: This code demonstrates how to toggle between two widgets in Flutter using a `StatefulWidget` and a boolean flag. When the `FloatingActionButton` is pressed, the `_toggle` function updates the state, causing the `_getToggleChild` function to return a different widget based on the boolean value.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/xamarin-forms-devs.md#_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nclass SampleApp extends StatelessWidget {\n  /// This widget is the root of your application.\n  const SampleApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return const MaterialApp(title: 'Sample App', home: SampleAppPage());\n  }\n}\n\nclass SampleAppPage extends StatefulWidget {\n  const SampleAppPage({super.key});\n\n  @override\n  State<SampleAppPage> createState() => _SampleAppPageState();\n}\n\nclass _SampleAppPageState extends State<SampleAppPage> {\n  /// Default value for toggle\n  bool toggle = true;\n  void _toggle() {\n    setState(() {\n      toggle = !toggle;\n    });\n  }\n\n  Widget _getToggleChild() {\n    if (toggle) {\n      return const Text('Toggle One');\n    }\n    return CupertinoButton(onPressed: () {}, child: const Text('Toggle Two'));\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: const Text('Sample App')),\n      body: Center(child: _getToggleChild()),\n      floatingActionButton: FloatingActionButton(\n        onPressed: _toggle,\n        tooltip: 'Update Text',\n        child: const Icon(Icons.update),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GamesServicesController Class in Dart\nDESCRIPTION: This Dart code defines a `GamesServicesController` class that acts as a facade for the `package:games_services` plugin. It provides methods for signing in, awarding achievements, submitting leaderboard scores, and showing achievements/leaderboards UI. The class handles platform-specific implementations for iOS and Android, utilizing achievement and leaderboard IDs.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/games/achievements-leaderboard.md#_snippet_7\n\nLANGUAGE: Dart\nCODE:\n```\nimport 'dart:async';\n\nimport 'package:games_services/games_services.dart';\nimport 'package:logging/logging.dart';\n\n/// Allows awarding achievements and leaderboard scores,\n/// and also showing the platforms' UI overlays for achievements\n/// and leaderboards.\n///\n/// A facade of `package:games_services`.\nclass GamesServicesController {\n  static final Logger _log = Logger('GamesServicesController');\n\n  final Completer<bool> _signedInCompleter = Completer();\n\n  Future<bool> get signedIn => _signedInCompleter.future;\n\n  /// Unlocks an achievement on Game Center / Play Games.\n  ///\n  /// You must provide the achievement ids via the [iOS] and [android]\n  /// parameters.\n  ///\n  /// Does nothing when the game isn't signed into the underlying\n  /// games service.\n  Future<void> awardAchievement({\n    required String iOS,\n    required String android,\n  }) async {\n    if (!await signedIn) {\n      _log.warning('Trying to award achievement when not logged in.');\n      return;\n    }\n\n    try {\n      await GamesServices.unlock(\n        achievement: Achievement(androidID: android, iOSID: iOS),\n      );\n    } catch (e) {\n      _log.severe('Cannot award achievement: $e');\n    }\n  }\n\n  /// Signs into the underlying games service.\n  Future<void> initialize() async {\n    try {\n      await GamesServices.signIn();\n      // The API is unclear so we're checking to be sure. The above call\n      // returns a String, not a boolean, and there's no documentation\n      // as to whether every non-error result means we're safely signed in.\n      final signedIn = await GamesServices.isSignedIn;\n      _signedInCompleter.complete(signedIn);\n    } catch (e) {\n      _log.severe('Cannot log into GamesServices: $e');\n      _signedInCompleter.complete(false);\n    }\n  }\n\n  /// Launches the platform's UI overlay with achievements.\n  Future<void> showAchievements() async {\n    if (!await signedIn) {\n      _log.severe('Trying to show achievements when not logged in.');\n      return;\n    }\n\n    try {\n      await GamesServices.showAchievements();\n    } catch (e) {\n      _log.severe('Cannot show achievements: $e');\n    }\n  }\n\n  /// Launches the platform's UI overlay with leaderboard(s).\n  Future<void> showLeaderboard() async {\n    if (!await signedIn) {\n      _log.severe('Trying to show leaderboard when not logged in.');\n      return;\n    }\n\n    try {\n      await GamesServices.showLeaderboards(\n        // TODO: When ready, change both these leaderboard IDs.\n        iOSLeaderboardID: 'some_id_from_app_store',\n        androidLeaderboardID: 'sOmE_iD_fRoM_gPlAy',\n      );\n    } catch (e) {\n      _log.severe('Cannot show leaderboard: $e');\n    }\n  }\n\n  /// Submits [score] to the leaderboard.\n  Future<void> submitLeaderboardScore(int score) async {\n    if (!await signedIn) {\n      _log.warning('Trying to submit leaderboard when not logged in.');\n      return;\n    }\n\n    _log.info('Submitting $score to leaderboard.');\n\n    try {\n      await GamesServices.submitScore(\n        score: Score(\n          // TODO: When ready, change these leaderboard IDs.\n          iOSLeaderboardID: 'some_id_from_app_store',\n          androidLeaderboardID: 'sOmE_iD_fRoM_gPlAy',\n          value: score,\n        ),\n      );\n    } catch (e) {\n      _log.severe('Cannot submit leaderboard score: $e');\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: ColorScheme primaryVariant & secondaryVariant Migration (Dart)\nDESCRIPTION: Demonstrates how to migrate code that uses the deprecated `ColorScheme.primaryVariant` and `ColorScheme.secondaryVariant` properties. They are replaced by `ColorScheme.primaryContainer` and `ColorScheme.secondaryContainer` respectively. The code shows the before and after migration examples using Dart.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/3-10-deprecations.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nvar colorScheme = ColorScheme(\n  primaryVariant: Colors.blue,\n  secondaryVariant: Colors.amber,\n);\nvar primaryColor = colorScheme.primaryVariant;\nvar secondaryColor = colorScheme.secondaryVariant;\n```\n\nLANGUAGE: dart\nCODE:\n```\nvar colorScheme = ColorScheme(\n  primaryContainer: Colors.blue,\n  secondaryContainer: Colors.amber,\n);\nvar primaryColor = colorScheme.primaryContainer;\nvar secondaryColor = colorScheme.secondaryContainer;\n```\n\n----------------------------------------\n\nTITLE: Navigating to Second Route (iOS)\nDESCRIPTION: This snippet demonstrates how to navigate from the `FirstRoute` to the `SecondRoute` using `Navigator.push()` and `CupertinoPageRoute`. `CupertinoPageRoute` provides a platform-specific transition animation for iOS. The `builder` parameter creates an instance of the `SecondRoute` to be displayed.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/navigation/navigation-basics.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\n// Within the `FirstRoute` widget:\nonPressed: () {\n  Navigator.push(\n    context,\n    CupertinoPageRoute(builder: (context) => const SecondRoute()),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Persisting History During Provider Recreation in Dart\nDESCRIPTION: Illustrates how to preserve chat history when recreating an LlmProvider instance. It retrieves the current history from the old provider, converts it to a list, and then passes it to the _createProvider method when creating a new provider. The setState call ensures the UI is updated with the new provider.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ai-toolkit/feature-integration.md#_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nclass _HomePageState extends State<HomePage> {\n  ...\n  void _onSettingsSave() => setState(() {\n        // move the history over from the old provider to the new one\n        final history = _provider.history.toList();\n        _provider = _createProvider(history);\n      });\n}\n```\n\n----------------------------------------\n\nTITLE: Recipe Response View Widget in Dart\nDESCRIPTION: This Dart code defines a `RecipeResponseView` widget which takes the LLM response as a string, parses it as JSON to extract recipes and associated text, and renders them with custom UI elements, including a title, description, and an \"Add Recipe\" button. It handles potential parsing errors using a try-catch block.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ai-toolkit/feature-integration.md#_snippet_13\n\nLANGUAGE: dart\nCODE:\n```\nclass RecipeResponseView extends StatelessWidget {\n  const RecipeResponseView(this.response, {super.key});\n  final String response;\n\n  @override\n  Widget build(BuildContext context) {\n    final children = <Widget>[];\n    String? finalText;\n\n    // created with the response from the LLM as the response streams in, so\n    // many not be a complete response yet\n    try {\n      final map = jsonDecode(response);\n      final recipesWithText = map['recipes'] as List<dynamic>;\n      finalText = map['text'] as String?;\n\n      for (final recipeWithText in recipesWithText) {\n        // extract the text before the recipe\n        final text = recipeWithText['text'] as String?;\n        if (text != null && text.isNotEmpty) {\n          children.add(MarkdownBody(data: text));\n        }\n\n        // extract the recipe\n        final json = recipeWithText['recipe'] as Map<String, dynamic>;\n        final recipe = Recipe.fromJson(json);\n        children.add(const Gap(16));\n        children.add(Column(\n          crossAxisAlignment: CrossAxisAlignment.start,\n          children: [\n            Text(recipe.title, style: Theme.of(context).textTheme.titleLarge),\n            Text(recipe.description),\n            RecipeContentView(recipe: recipe),\n          ],\n        ));\n\n        // add a button to add the recipe to the list\n        children.add(const Gap(16));\n        children.add(OutlinedButton(\n          onPressed: () => RecipeRepository.addNewRecipe(recipe),\n          child: const Text('Add Recipe'),\n        ));\n        children.add(const Gap(16));\n      }\n    } catch (e) {\n      debugPrint('Error parsing response: $e');\n    }\n\n    ...\n\n    return Column(\n      crossAxisAlignment: CrossAxisAlignment.start,\n      children: children,\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Align Widget with Animation\nDESCRIPTION: The `Align` widget is updated to use the animated `_dragAlignment` field to move it. This ensures that the widget's position is updated according to the animation, resulting in a smooth visual transition. The alignment is updated when the animation controller produces a value.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/animation/physics-simulation.md#_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nchild: Align(alignment: _dragAlignment, child: Card(child: widget.child)),\n```\n\n----------------------------------------\n\nTITLE: Creating a scroll view using SingleChildScrollView - Flutter/Dart\nDESCRIPTION: This snippet demonstrates how to create a scroll view using `SingleChildScrollView` in Flutter.  It uses a Column widget to arrange the `PersonView` widgets vertically. Requires a `mockPersons` list and `PersonView` widget to be defined.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/swiftui-devs.md#_snippet_16\n\nLANGUAGE: Dart\nCODE:\n```\nSingleChildScrollView(\n  child: Column(\n    children:\n        mockPersons.map((person) => PersonView(person: person)).toList(),\n  ),\n),\n```\n\n----------------------------------------\n\nTITLE: Getting Battery Level in AppDelegate.m (Objective-C)\nDESCRIPTION: This Objective-C code retrieves the battery level on iOS using the UIDevice API. It checks for battery monitoring availability and returns the battery level as an integer percentage, or -1 if unavailable.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/platform-integration/platform-channels.md#_snippet_16\n\nLANGUAGE: Objective-C\nCODE:\n```\n- (int)getBatteryLevel {\n  UIDevice* device = UIDevice.currentDevice;\n  device.batteryMonitoringEnabled = YES;\n  if (device.batteryState == UIDeviceBatteryStateUnknown) {\n    return -1;\n  } else {\n    return (int)(device.batteryLevel * 100);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: TabBar Usage After TabAlignment Migration (Dart)\nDESCRIPTION: This code demonstrates how to use the TabBar.tabAlignment property to align tabs to the start of the scrollable TabBar after the migration.  It sets the `tabAlignment` property to `TabAlignment.start` to achieve the desired alignment without the default offset introduced in Material 3.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/tab-alignment.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nTabBar(\n  tabAlignment: TabAlignment.start,\n  isScrollable: true,\n  tabs: List<Tab>.generate(\n    count,\n    (int index) => Tab(text: 'Tab $index'),\n  ).toList(),\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a Page - Flutter State Object\nDESCRIPTION: This Flutter code defines the `_MyHomePageState` class, which manages the state of the `MyHomePage` widget. It includes a counter variable, a method to increment the counter using `setState`, and a `build` method that constructs the UI with an `AppBar`, `Center`, `Column`, and `FloatingActionButton`.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/xamarin-forms-devs.md#_snippet_6\n\nLANGUAGE: Dart\nCODE:\n```\nclass _MyHomePageState extends State<MyHomePage> {\n  int _counter = 0;\n\n  void _incrementCounter() {\n    setState(() {\n      _counter++;\n    });\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        // Take the value from the MyHomePage object that was created by\n        // the App.build method, and use it to set the appbar title.\n        title: Text(widget.title),\n      ),\n      body: Center(\n        // Center is a layout widget. It takes a single child and positions it\n        // in the middle of the parent.\n        child: Column(\n          mainAxisAlignment: MainAxisAlignment.center,\n          children: <Widget>[\n            const Text('You have pushed the button this many times:'),\n            Text(\n              '$_counter',\n              style: Theme.of(context).textTheme.headlineMedium,\n            ),\n          ],\n        ),\n      ),\n      floatingActionButton: FloatingActionButton(\n        onPressed: _incrementCounter,\n        tooltip: 'Increment',\n        child: const Icon(Icons.add),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using ValueListenableBuilder with ValueNotifier in Flutter\nDESCRIPTION: This code demonstrates how to use ValueListenableBuilder to rebuild a widget when a ValueNotifier's value changes. The ValueListenableBuilder listens to the counterNotifier and rebuilds the Text widget to display the updated value.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/fundamentals/state-management.md#_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nColumn(\n  children: [\n    ValueListenableBuilder(\n      valueListenable: counterNotifier,\n      builder: (context, value, child) {\n        return Text('counter: $value');\n      },\n    ),\n    TextButton(\n      child: Text('Increment'),\n      onPressed: () {\n        counterNotifier.value++;\n      },\n    ),\n  ],\n)\n```\n\n----------------------------------------\n\nTITLE: DynamicLibrary.open example (macOS)\nDESCRIPTION: This code shows how to dynamically link to a library in Dart using `DynamicLibrary.open`.  It assumes `libyourlibrary.dylib` is properly placed and configured in the macOS Flutter app project. The opened library handle allows calling functions exposed from the dynamic library.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/platform-integration/macos/c-interop.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nDynamicLibrary.open('libyourlibrary.dylib')\n```\n\n----------------------------------------\n\nTITLE: Fetch Album Data in Dart\nDESCRIPTION: This function fetches album data from a specified URL using an HTTP GET request.  It returns a `Future<Album>` object representing the fetched data or throws an exception if the request fails.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/networking/update-data.md#_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nFuture<Album> fetchAlbum() async {\n  final response = await http.get(\n    Uri.parse('https://jsonplaceholder.typicode.com/albums/1'),\n  );\n\n  if (response.statusCode == 200) {\n    // If the server did return a 200 OK response,\n    // then parse the JSON.\n    return Album.fromJson(jsonDecode(response.body) as Map<String, dynamic>);\n  } else {\n    // If the server did not return a 200 OK response,\n    // then throw an exception.\n    throw Exception('Failed to load album');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing CurvedAnimation in Dart\nDESCRIPTION: This code snippet shows how to initialize a `CurvedAnimation` with a parent `AnimationController` and a curve. The `CurvedAnimation` modifies the animation's progress using a non-linear curve, such as `Curves.easeIn`. The `parent` parameter takes the AnimationController instance. This creates a curved animation that is applied to the animation controller.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/animations/index.md#_snippet_0\n\nLANGUAGE: Dart\nCODE:\n```\nanimation = CurvedAnimation(parent: controller, curve: Curves.easeIn);\n```\n\n----------------------------------------\n\nTITLE: UserProfileViewModel Class Definition (With Try-Catch)\nDESCRIPTION: Defines the UserProfileViewModel class with a load method that loads the user profile data.  It calls the getUserProfile method of the UserProfileRepository within a try-catch block to handle potential exceptions. If an exception occurs, it is caught and handled. Dependency: UserProfileRepository, ChangeNotifier.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/app-architecture/design-patterns/result.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nclass UserProfileViewModel extends ChangeNotifier {\n  // ···\n\n  Future<void> load() async {\n    try {\n      _userProfile = await userProfileRepository.getUserProfile();\n      notifyListeners();\n    } on Exception catch (exception) {\n      // handle exception\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing AnimationController in initState() - Dart\nDESCRIPTION: Initializes the AnimationController and starts the staggered animation in the initState method. It also calls _createAnimationIntervals() and sets the duration and vsync of the AnimationController. The animation is started immediately using .forward().\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/effects/staggered-menu-animation.md#_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\n@override\nvoid initState() {\n  super.initState();\n\n  _createAnimationIntervals();\n\n  _staggeredController = AnimationController(\n    vsync: this,\n    duration: _animationDuration,\n  )..forward();\n}\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Integration Test (YAML)\nDESCRIPTION: This YAML snippet shows how to configure GitHub Actions to run integration tests on Linux, ensuring that the X server is invoked using `xvfb-action`. This ensures the Flutter app can launch and be tested.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/testing/integration-tests/index.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n      - name: Run Integration Tests\n        uses: username/xvfb-action@v1.1.2\n        with:\n          run: flutter test integration_test -d linux -r github\n```\n\n----------------------------------------\n\nTITLE: Flutter Typing Indicator Example\nDESCRIPTION: This Flutter code creates a typing indicator with animated bubbles. The main function runs the `ExampleIsTyping` widget, which displays a list of messages, a typing indicator, and a switch to toggle the indicator on and off. The `TypingIndicator` widget uses animations to create the typing effect.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/effects/typing-indicator.md#_snippet_4\n\nLANGUAGE: Dart\nCODE:\n```\nimport 'dart:math';\n\nimport 'package:flutter/cupertino.dart';\nimport 'package:flutter/material.dart';\n\nvoid main() {\n  runApp(\n    const MaterialApp(\n      home: ExampleIsTyping(),\n      debugShowCheckedModeBanner: false,\n    ),\n  );\n}\n\nconst _backgroundColor = Color(0xFF333333);\n\nclass ExampleIsTyping extends StatefulWidget {\n  const ExampleIsTyping({super.key});\n\n  @override\n  State<ExampleIsTyping> createState() => _ExampleIsTypingState();\n}\n\nclass _ExampleIsTypingState extends State<ExampleIsTyping> {\n  bool _isSomeoneTyping = false;\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      backgroundColor: _backgroundColor,\n      appBar: AppBar(title: const Text('Typing Indicator')),\n      body: Column(\n        children: [\n          Expanded(\n            child: ListView.builder(\n              padding: const EdgeInsets.symmetric(vertical: 8),\n              itemCount: 25,\n              reverse: true,\n              itemBuilder: (context, index) {\n                return Padding(\n                  padding: const EdgeInsets.only(left: 100),\n                  child: FakeMessage(isBig: index.isOdd),\n                );\n              },\n            ),\n          ),\n          Align(\n            alignment: Alignment.bottomLeft,\n            child: TypingIndicator(showIndicator: _isSomeoneTyping),\n          ),\n          Container(\n            color: Colors.grey,\n            padding: const EdgeInsets.all(16),\n            child: Center(\n              child: CupertinoSwitch(\n                onChanged: (newValue) {\n                  setState(() {\n                    _isSomeoneTyping = newValue;\n                  });\n                },\n                value: _isSomeoneTyping,\n              ),\n            ),\n          ),\n        ],\n      ),\n    );\n  }\n}\n\nclass TypingIndicator extends StatefulWidget {\n  const TypingIndicator({\n    super.key,\n    this.showIndicator = false,\n    this.bubbleColor = const Color(0xFF646b7f),\n    this.flashingCircleDarkColor = const Color(0xFF333333),\n    this.flashingCircleBrightColor = const Color(0xFFaec1dd),\n  });\n\n  final bool showIndicator;\n  final Color bubbleColor;\n  final Color flashingCircleDarkColor;\n  final Color flashingCircleBrightColor;\n\n  @override\n  State<TypingIndicator> createState() => _TypingIndicatorState();\n}\n\nclass _TypingIndicatorState extends State<TypingIndicator>\n    with TickerProviderStateMixin {\n  late AnimationController _appearanceController;\n\n  late Animation<double> _indicatorSpaceAnimation;\n\n  late Animation<double> _smallBubbleAnimation;\n  late Animation<double> _mediumBubbleAnimation;\n  late Animation<double> _largeBubbleAnimation;\n\n  late AnimationController _repeatingController;\n  final List<Interval> _dotIntervals = const [\n    Interval(0.25, 0.8),\n    Interval(0.35, 0.9),\n    Interval(0.45, 1.0),\n  ];\n\n  @override\n  void initState() {\n    super.initState();\n\n    _appearanceController = AnimationController(vsync: this)..addListener(() {\n      setState(() {});\n    });\n\n    _indicatorSpaceAnimation = CurvedAnimation(\n      parent: _appearanceController,\n      curve: const Interval(0.0, 0.4, curve: Curves.easeOut),\n      reverseCurve: const Interval(0.0, 1.0, curve: Curves.easeOut),\n    ).drive(Tween<double>(begin: 0.0, end: 60.0));\n\n    _smallBubbleAnimation = CurvedAnimation(\n      parent: _appearanceController,\n      curve: const Interval(0.0, 0.5, curve: Curves.elasticOut),\n      reverseCurve: const Interval(0.0, 0.3, curve: Curves.easeOut),\n    );\n    _mediumBubbleAnimation = CurvedAnimation(\n      parent: _appearanceController,\n      curve: const Interval(0.2, 0.7, curve: Curves.elasticOut),\n      reverseCurve: const Interval(0.2, 0.6, curve: Curves.easeOut),\n    );\n    _largeBubbleAnimation = CurvedAnimation(\n      parent: _appearanceController,\n      curve: const Interval(0.3, 1.0, curve: Curves.elasticOut),\n      reverseCurve: const Interval(0.5, 1.0, curve: Curves.easeOut),\n    );\n\n    _repeatingController = AnimationController(\n      vsync: this,\n      duration: const Duration(milliseconds: 1500),\n    );\n\n    if (widget.showIndicator) {\n      _showIndicator();\n    }\n  }\n\n  @override\n  void didUpdateWidget(TypingIndicator oldWidget) {\n    super.didUpdateWidget(oldWidget);\n\n    if (widget.showIndicator != oldWidget.showIndicator) {\n      if (widget.showIndicator) {\n        _showIndicator();\n      } else {\n        _hideIndicator();\n      }\n    }\n  }\n\n  @override\n  void dispose() {\n    _appearanceController.dispose();\n    _repeatingController.dispose();\n    super.dispose();\n  }\n\n  void _showIndicator() {\n    _appearanceController\n      ..duration = const Duration(milliseconds: 750)\n      ..forward();\n    _repeatingController.repeat();\n  }\n\n  void _hideIndicator() {\n    _appearanceController\n      ..duration = const Duration(milliseconds: 150)\n      ..reverse();\n    _repeatingController.stop();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return AnimatedBuilder(\n      animation: _indicatorSpaceAnimation,\n      builder: (context, child) {\n        return SizedBox(height: _indicatorSpaceAnimation.value, child: child);\n      },\n      child: Stack(\n        children: [\n          AnimatedBubble(\n            animation: _smallBubbleAnimation,\n            left: 8,\n            bottom: 8,\n            bubble: CircleBubble(size: 8, bubbleColor: widget.bubbleColor),\n          ),\n          AnimatedBubble(\n            animation: _mediumBubbleAnimation,\n            left: 10,\n            bottom: 10,\n            bubble: CircleBubble(size: 16, bubbleColor: widget.bubbleColor),\n          ),\n          AnimatedBubble(\n            animation: _largeBubbleAnimation,\n            left: 12,\n            bottom: 12,\n            bubble: StatusBubble(\n              repeatingController: _repeatingController,\n              dotIntervals: _dotIntervals,\n              flashingCircleDarkColor: widget.flashingCircleDarkColor,\n              flashingCircleBrightColor: widget.flashingCircleBrightColor,\n              bubbleColor: widget.bubbleColor,\n            ),\n          ),\n        ],\n      ),\n    );\n  }\n}\n\nclass CircleBubble extends StatelessWidget {\n  const CircleBubble({\n    super.key,\n    required this.size,\n    required this.bubbleColor,\n  });\n\n  final double size;\n  final Color bubbleColor;\n\n  @override\n  Widget build(BuildContext context) {\n    return Container(\n      width: size,\n      height: size,\n      decoration: BoxDecoration(shape: BoxShape.circle, color: bubbleColor),\n    );\n  }\n}\n\nclass AnimatedBubble extends StatelessWidget {\n  const AnimatedBubble({\n    super.key,\n    required this.animation,\n    required this.left,\n    required this.bottom,\n    required this.bubble,\n  });\n\n  final Animation<double> animation;\n  final double left;\n  final double bottom;\n  final Widget bubble;\n\n  @override\n  Widget build(BuildContext context) {\n    return Positioned(\n      left: left,\n      bottom: bottom,\n      child: AnimatedBuilder(\n        animation: animation,\n        builder: (context, child) {\n          return Transform.scale(\n            scale: animation.value,\n            alignment: Alignment.bottomLeft,\n            child: child,\n          );\n        },\n        child: bubble,\n      ),\n    );\n  }\n}\n\nclass StatusBubble extends StatelessWidget {\n  const StatusBubble({\n    super.key,\n    required this.repeatingController,\n    required this.dotIntervals,\n    required this.flashingCircleBrightColor,\n    required this.flashingCircleDarkColor,\n    required this.bubbleColor,\n  });\n\n  final AnimationController repeatingController;\n  final List<Interval> dotIntervals;\n  final Color flashingCircleDarkColor;\n  final Color flashingCircleBrightColor;\n  final Color bubbleColor;\n\n  @override\n  Widget build(BuildContext context) {\n    return Container(\n      width: 85,\n      height: 44,\n      padding: const EdgeInsets.symmetric(horizontal: 8),\n      decoration: BoxDecoration(\n        borderRadius: BorderRadius.circular(27),\n        color: bubbleColor,\n      ), \n      child: Row(\n        mainAxisAlignment: MainAxisAlignment.spaceEvenly,\n        children: [\n          FlashingCircle(\n            index: 0,\n            repeatingController: repeatingController,\n            dotIntervals: dotIntervals,\n            flashingCircleDarkColor: flashingCircleDarkColor,\n            flashingCircleBrightColor: flashingCircleBrightColor,\n          ),\n          FlashingCircle(\n            index: 1,\n            repeatingController: repeatingController,\n            dotIntervals: dotIntervals,\n            flashingCircleDarkColor: flashingCircleDarkColor,\n            flashingCircleBrightColor: flashingCircleBrightColor,\n          ),\n          FlashingCircle(\n            index: 2,\n            repeatingController: repeatingController,\n            dotIntervals: dotIntervals,\n            flashingCircleDarkColor: flashingCircleDarkColor,\n            flashingCircleBrightColor: flashingCircleBrightColor,\n          ),\n        ],\n      ),\n    );\n  }\n}\n\nclass FlashingCircle extends StatelessWidget {\n  const FlashingCircle({\n    super.key,\n    required this.index,\n    required this.repeatingController,\n    required this.dotIntervals,\n    required this.flashingCircleBrightColor,\n    required this.flashingCircleDarkColor,\n  });\n\n  final int index;\n  final AnimationController repeatingController;\n  final List<Interval> dotIntervals;\n  final Color flashingCircleDarkColor;\n  final Color flashingCircleBrightColor;\n\n  @override\n  Widget build(BuildContext context) {\n    return AnimatedBuilder(\n      animation: repeatingController,\n      builder: (context, child) {\n        final circleFlashPercent = dotIntervals[index].transform(\n          repeatingController.value,\n        );\n```\n\n----------------------------------------\n\nTITLE: Closing a Drawer Programmatically - Dart\nDESCRIPTION: This snippet demonstrates how to close the drawer programmatically using `Navigator.pop(context)`. This is typically done after a user selects an item in the drawer to navigate to a different screen or perform an action. The `Navigator` is used to pop the drawer off the navigation stack.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/design/drawer.md#_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nListTile(\n  title: const Text('Item 1'),\n  onTap: () {\n    // Update the state of the app\n    // ...\n    // Then close the drawer\n    Navigator.pop(context);\n  },\n),\n```\n\n----------------------------------------\n\nTITLE: AnimatedLogo Widget - Dart\nDESCRIPTION: This snippet demonstrates the use of the `AnimatedWidget` base class to separate the core widget code from the animation code. The `AnimatedLogo` widget takes an `Animation<double>` as input and uses its current value to draw the Flutter logo. It doesn't need to maintain a State object.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/animations/tutorial.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nclass AnimatedLogo extends AnimatedWidget {\n  const AnimatedLogo({super.key, required Animation<double> animation})\n    : super(listenable: animation);\n\n  @override\n  Widget build(BuildContext context) {\n    final animation = listenable as Animation<double>;\n    return Center(\n      child: Container(\n        margin: const EdgeInsets.symmetric(vertical: 10),\n        height: animation.value,\n        width: animation.value,\n        child: const FlutterLogo(),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating Button styleFrom Properties in Flutter\nDESCRIPTION: This snippet demonstrates how to migrate from the deprecated `primary` and `onSurface` properties of `TextButton.styleFrom`, `ElevatedButton.styleFrom`, and `OutlinedButton.styleFrom` to the new `foregroundColor`, `backgroundColor`, and `disabledForegroundColor` properties. It showcases the code before and after the migration.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/3-16-deprecations.md#_snippet_0\n\nLANGUAGE: Dart\nCODE:\n```\nTextButton.styleFrom(\n  primary: Colors.red,\n  onSurface: Colors.black,\n);\nElevatedButton.styleFrom(\n  primary: Colors.red,\n  onPrimary: Colors.blue,\n  onSurface: Colors.black,\n);\nOutlinedButton.styleFrom(\n  primary: Colors.red,\n  onSurface: Colors.black,\n);\n```\n\nLANGUAGE: Dart\nCODE:\n```\nTextButton.styleFrom(\n  foregroundColor: Colors.red,\n  disabledForegroundColor: Colors.black,\n);\nElevatedButton.styleFrom(\n  backgroundColor: Colors.red,\n  foregroundColor: Colors.blue,\n  disabledForegroundColor: Colors.black,\n);\nOutlinedButton.styleFrom(\n  foregroundColor: Colors.red,\n  disabledForegroundColor: Colors.black,\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing TextInputClient with showAutocorrectionPromptRect - Dart\nDESCRIPTION: This code demonstrates how to implement the TextInputClient interface with a sensible implementation of the new showAutocorrectionPromptRect method. The example `CustomTextInputClient` extends a `State` and tracks the `_currentPromptRectRange` for the autocorrection highlight. It updates the highlight range based on calls to `showAutocorrectionPromptRect` and dismisses it when the text changes or the input loses focus.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/add-showAutocorrectionPromptRect.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\n// Assume your `TextInputClient` is a `State` subclass, and it has a variable \n// `_currentPromptRectRange` that controls the autocorrection highlight.\nclass CustomTextInputClient extends State<...> implements TextInputClient {\n  @override\n  void updateEditingValue(TextEditingValue value) {\n    // When the text changes, the highlight needs to be dismissed.\n    if (value.text != _value.text) {\n      setState(() {\n        _currentPromptRectRange = null;\n      });\n    }\n  }\n\n  void _handleFocusChanged() {\n    // When this text input loses focus, the autocorrection highlight needs\n    // to be dismissed.\n    if (!_hasFocus) {\n      setState(() {\n        _currentPromptRectRange = null;\n      });\n    }\n  }\n\n  @override\n  void showAutocorrectionPromptRect(int start, int end) {\n    // Updates the range of the highlight, as iOS requested.\n    // This method isn't called when iOS decides to\n    // dismiss the highlight.\n    setState(() {\n      _currentPromptRectRange = TextRange(start: start, end: end);\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Extending the Parent Theme in Flutter\nDESCRIPTION: This code snippet illustrates how to extend the parent theme using the `copyWith()` method. Instead of creating a completely new theme, it modifies specific properties of the existing theme, such as the `colorScheme`, while inheriting the rest.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/design/themes.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nTheme(\n  // Find and extend the parent theme using `copyWith`.\n  // To learn more, check out the section on `Theme.of`.\n  data: Theme.of(\n    context,\n  ).copyWith(colorScheme: ColorScheme.fromSeed(seedColor: Colors.pink)),\n  child: const FloatingActionButton(onPressed: null, child: Icon(Icons.add)),\n);\n```\n\n----------------------------------------\n\nTITLE: Migrating to NavigationDrawer in Flutter\nDESCRIPTION: This snippet shows replacing the Drawer widget with the new NavigationDrawer widget in Flutter. The NavigationDrawer provides pill-shaped navigation indicators, rounded corners, and new color mappings. This requires manual migration as the Flutter SDK does not automatically handle this update.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/material-3-migration.md#_snippet_13\n\nLANGUAGE: dart\nCODE:\n```\nDrawer(\n  child: ListView(\n    children: <Widget>[\n      DrawerHeader(\n        child: Text(\n          'Drawer Header',\n          style: Theme.of(context).textTheme.titleLarge,\n        ),\n      ),\n      ListTile(\n        leading: const Icon(Icons.message),\n        title: const Text('Messages'),\n        onTap: () { },\n      ),\n      ListTile(\n        leading: const Icon(Icons.account_circle),\n        title: const Text('Profile'),\n        onTap: () {},\n      ),\n      ListTile(\n        leading: const Icon(Icons.settings),\n        title: const Text('Settings'),\n        onTap: () { },\n      ),\n    ],\n  ),\n),\n```\n\n----------------------------------------\n\nTITLE: Building a Row with Flexible Widgets Flutter\nDESCRIPTION: This code snippet builds a Row widget with two Flexible children, each containing a Container with a specific color (red and green) and a Text widget. Flexible widgets allow their children to be smaller than the available width. The text within each Container displays a message, demonstrating how Flexible widgets, like Expanded, ignore their children's preferred width when sizing themselves.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/layout/constraints.md#_snippet_28\n\nLANGUAGE: dart\nCODE:\n```\nRow(children:[\n   Flexible(\n       child: Container(color: red, child: Text('…')))\n   Flexible(\n       child: Container(color: green, child: Text('Goodbye!'))]\n```\n\n----------------------------------------\n\nTITLE: Defining a basic ChangeNotifier view model\nDESCRIPTION: This code snippet shows the basic structure of a view model class in Flutter, extending `ChangeNotifier`.  `ChangeNotifier` is used to notify listeners (typically views) when the view model's state changes.  No external dependencies are needed beyond the Flutter SDK.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/app-architecture/design-patterns/command.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nclass HomeViewModel extends ChangeNotifier {\n  // ···\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradle Build (Kotlin)\nDESCRIPTION: This Kotlin snippet shows the structure of the app-level build.gradle.kts file. It focuses on the android block where settings like namespace, compileSdk, applicationId, minSdk, targetSdk, versionCode and versionName are defined. The snippet emphasizes modifying these values to suit the specific application requirements. Note that some properties are populated from the Flutter Gradle plugin.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/deployment/android.md#_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\nandroid {\n    namespace = \"com.example.[project]\"\n    // Any value starting with \"flutter.\" gets its value from\n    // the Flutter Gradle plugin.\n    // To change from these defaults, make your changes in this file.\n    [!compileSdk = flutter.compileSdkVersion!]\n    ndkVersion = flutter.ndkVersion\n\n    ...\n\n    defaultConfig {\n        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).\n        [!applicationId = \"com.example.[project]\"!]\n        // You can update the following values to match your application needs.\n        [!minSdk = flutter.minSdkVersion!]\n        [!targetSdk = flutter.targetSdkVersion!]\n        // These two properties use values defined elsewhere in this file.\n        // You can set these values in the property declaration\n        // or use a variable.\n        [!versionCode = flutterVersionCode.toInteger()!]\n        [!versionName = flutterVersionName!]\n    }\n\n    buildTypes {\n        ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Theme Switch View Model - Flutter\nDESCRIPTION: Implements the ThemeSwitchViewModel, adhering to the MVVM pattern. It manages the state of the ThemeSwitch widget using a boolean variable (_isDarkMode). It interacts with the ThemeRepository to load and store the dark mode setting. It provides command actions for loading and toggling the theme, exposed via the isDarkMode getter.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/app-architecture/design-patterns/key-value-data.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nclass ThemeSwitchViewModel extends ChangeNotifier {\n  ThemeSwitchViewModel(this._themeRepository) {\n    load = Command0(_load)..execute();\n    toggle = Command0(_toggle);\n  }\n\n  final ThemeRepository _themeRepository;\n\n  bool _isDarkMode = false;\n\n  /// If true show dark mode\n  bool get isDarkMode => _isDarkMode;\n\n  late Command0 load;\n\n  late Command0 toggle;\n\n  /// Load the current theme setting from the repository\n  Future<Result<void>> _load() async {\n    try {\n      final result = await _themeRepository.isDarkMode();\n      if (result is Ok<bool>) {\n        _isDarkMode = result.value;\n      }\n      return result;\n    } on Exception catch (e) {\n      return Result.error(e);\n    } finally {\n      notifyListeners();\n    }\n  }\n\n  /// Toggle the theme setting\n  Future<Result<void>> _toggle() async {\n    try {\n      _isDarkMode = !_isDarkMode;\n      return await _themeRepository.setDarkMode(_isDarkMode);\n    } on Exception catch (e) {\n      return Result.error(e);\n    } finally {\n      notifyListeners();\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Cascade Notation Example - Dart\nDESCRIPTION: This snippet demonstrates Dart's cascade notation (`..`). It shows how `addListener()` can be called on the return value of `animate()` using the cascade operator. The two code examples are functionally equivalent.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/animations/tutorial.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nanimation = Tween<double>(begin: 0, end: 300).animate(controller)\n  ..addListener(() {\n    // ···\n  });\n```\n\nLANGUAGE: dart\nCODE:\n```\nanimation = Tween<double>(begin: 0, end: 300).animate(controller);\nanimation.addListener(() {\n    // ···\n  });\n```\n\n----------------------------------------\n\nTITLE: Using a LoggingActionDispatcher in Dart\nDESCRIPTION: This code snippet shows how to use the custom `LoggingActionDispatcher` in a Flutter application. It creates an `Actions` widget and sets its `dispatcher` property to an instance of `LoggingActionDispatcher`. This ensures that every action invoked within the subtree of this `Actions` widget will be logged by the custom dispatcher before being executed.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/interactivity/actions-and-shortcuts.md#_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\n@override\nWidget build(BuildContext context) {\n  return Actions(\n    dispatcher: LoggingActionDispatcher(),\n    actions: <Type, Action<Intent>>{SelectAllIntent: SelectAllAction(model)},\n    child: Builder(\n      builder:\n          (context) => TextButton(\n            onPressed: Actions.handler<SelectAllIntent>(\n              context,\n              const SelectAllIntent(),\n            ),\n            child: const Text('SELECT ALL'),\n          ),\n    ),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Add CocoaPod Dependency (Ruby)\nDESCRIPTION: This code snippet demonstrates how to add a CocoaPod dependency named 'HelloPod' with version '0.0.1' to the ios/hello.podspec file. It shows how to specify the dependency and, optionally, the source for private pods, either from GitHub or a local path.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/packages-and-plugins/developing-packages.md#_snippet_12\n\nLANGUAGE: ruby\nCODE:\n```\ns.dependency 'HelloPod', '0.0.1'\n```\n\n----------------------------------------\n\nTITLE: Centering Components Flutter/Dart\nDESCRIPTION: Centers a Text widget within a Container widget using the Center widget in Flutter/Dart. Requires the Flutter framework and the 'bold24Roboto' TextStyle. Returns a Container widget with centered text.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/web-devs.md#_snippet_6\n\nLANGUAGE: Dart\nCODE:\n```\nfinal container = Container(\n  // grey box\n  width: 320,\n  height: 240,\n  color: Colors.grey[300],\n  child: Center(\n    child: Text(\n      'Lorem ipsum',\n      style: bold24Roboto,\n    ),\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Create Flutter FFI plugin\nDESCRIPTION: This command creates a new Flutter plugin with FFI support, targeting Android, iOS, macOS, Windows, and Linux platforms. It initializes the plugin's directory structure, including C/C++ source files in the `native_add/src` directory, build files for different operating systems, and Dart files for invoking the native code.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/platform-integration/ios/c-interop.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ flutter create --platforms=android,ios,macos,windows,linux --template=plugin_ffi native_add\n$ cd native_add\n```\n\n----------------------------------------\n\nTITLE: Using IntTween with AnimationController in Dart\nDESCRIPTION: This snippet demonstrates how to use an `IntTween` with an `AnimationController` to generate integer values from 0 to 255 over 500 milliseconds. The `animate()` method on the `IntTween` is called with the controller to create an `Animation<int>`.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/animations/index.md#_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nAnimationController controller = AnimationController(\n  duration: const Duration(milliseconds: 500),\n  vsync: this,\n);\nAnimation<int> alpha = IntTween(begin: 0, end: 255).animate(controller);\n```\n\n----------------------------------------\n\nTITLE: Using Google Fonts Package in Flutter\nDESCRIPTION: This snippet demonstrates how to use the `google_fonts` package in Flutter to apply a Google Font to a Text widget. It applies the Lato font directly.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/design/text/typography.md#_snippet_0\n\nLANGUAGE: Dart\nCODE:\n```\nText(\n  'This is Google Fonts',\n  style: GoogleFonts.lato(),\n),\n```\n\n----------------------------------------\n\nTITLE: Fix RenderFlex Overflow with Expanded in Flutter\nDESCRIPTION: This code demonstrates the solution to the RenderFlex overflow error by wrapping the Column widget within an Expanded widget. This ensures that the Column does not attempt to be wider than the available space in the Row. By wrapping the Column in an Expanded widget, the Column is constrained to fill the available space within the Row.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/testing/common-errors.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nreturn const Row(\n  children: [\n    Icon(Icons.message),\n    Expanded(\n      child: Column(\n        // code omitted\n      ),\n    ),\n  ],\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing a MaterialLocalizationsDelegate\nDESCRIPTION: This code snippet shows the implementation of a `LocalizationsDelegate` subclass for providing custom `MaterialLocalizations`. It initializes date formatting for the specified locale using custom date symbols and patterns.  It also demonstrates how to handle number formatting by using the symbols from an existing locale as a substitute due to limitations in the `intl` library.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/accessibility-and-internationalization/internationalization.md#_snippet_36\n\nLANGUAGE: dart\nCODE:\n```\nclass _NnMaterialLocalizationsDelegate\n    extends LocalizationsDelegate<MaterialLocalizations> {\n  const _NnMaterialLocalizationsDelegate();\n\n  @override\n  bool isSupported(Locale locale) => locale.languageCode == 'nn';\n\n  @override\n  Future<MaterialLocalizations> load(Locale locale) async {\n    final String localeName = intl.Intl.canonicalizedLocale(locale.toString());\n\n    // The locale (in this case `nn`) needs to be initialized into the custom\n    // date symbols and patterns setup that Flutter uses.\n    date_symbol_data_custom.initializeDateFormattingCustom(\n      locale: localeName,\n      patterns: nnLocaleDatePatterns,\n      symbols: intl.DateSymbols.deserializeFromMap(nnDateSymbols),\n    );\n\n    return SynchronousFuture<MaterialLocalizations>(\n      NnMaterialLocalizations(\n        localeName: localeName,\n        // The `intl` library's NumberFormat class is generated from CLDR data\n        // (see https://github.com/dart-lang/i18n/blob/main/pkgs/intl/lib/number_symbols_data.dart).\n        // Unfortunately, there is no way to use a locale that isn't defined in\n        // this map and the only way to work around this is to use a listed\n        // locale's NumberFormat symbols. So, here we use the number formats\n        // for 'en_US' instead.\n        decimalFormat: intl.NumberFormat('#,##0.###', 'en_US'),\n        twoDigitZeroPaddedFormat: intl.NumberFormat('00', 'en_US'),\n        // DateFormat here will use the symbols and patterns provided in the\n        // `date_symbol_data_custom.initializeDateFormattingCustom` call above.\n        // However, an alternative is to simply use a supported locale's\n        // DateFormat symbols, similar to NumberFormat above.\n        fullYearFormat: intl.DateFormat('y', localeName),\n        compactDateFormat: intl.DateFormat('yMd', localeName),\n        shortDateFormat: intl.DateFormat('yMMMd', localeName),\n        mediumDateFormat: intl.DateFormat('EEE, MMM d', localeName),\n        longDateFormat: intl.DateFormat('EEEE, MMMM d, y', localeName),\n        yearMonthFormat: intl.DateFormat('MMMM y', localeName),\n        shortMonthDayFormat: intl.DateFormat('MMM d'),\n      ),\n    );\n  }\n\n  @override\n  bool shouldReload(_NnMaterialLocalizationsDelegate old) => false;\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Dithering Temporarily in Dart\nDESCRIPTION: This code snippet demonstrates how to temporarily disable dithering by setting `Paint.enableDithering` to `false` within the `main()` method of a Flutter application or test. This workaround is suggested for users who need to revert to the previous behavior while migrating. This is a temporary measure and should be removed after addressing golden image changes.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/paint-enableDithering.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n  void main() {\n+   // TODO: Remove this after XYZ.\n+   Paint.enableDithering = false;\n\n    runApp(MyApp());\n  }\n```\n\n----------------------------------------\n\nTITLE: Import Rendering Package for MouseTracker\nDESCRIPTION: This import statement is required to access MouseTracker and related symbols after they were moved from the gestures package to the rendering package. Add this import to resolve \"Undefined class\" or \"Undefined name\" errors for MouseDetectorAnnotationFinder, MouseTracker, MouseTrackerAnnotation, PointerEnterEventListener, PointerExitEventListener, and PointerHoverEventListener.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/mouse-tracker-moved-to-rendering.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/rendering.dart';\n```\n\n----------------------------------------\n\nTITLE: Toggle Scrollbar Visibility based on Device Type - Flutter\nDESCRIPTION: This snippet demonstrates how to toggle the visibility of a scrollbar in a Flutter application based on the device type. It uses the `DeviceType.isDesktop` property to conditionally show or hide the scrollbar's thumb. This is useful for adapting the UI to different platforms, such as desktop and mobile, where scrollbar expectations differ.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/adaptive-responsive/idioms.md#_snippet_0\n\nLANGUAGE: Dart\nCODE:\n```\nreturn Scrollbar(\n  thumbVisibility: DeviceType.isDesktop,\n  controller: _scrollController,\n  child: GridView.count(\n    controller: _scrollController,\n    padding: const EdgeInsets.all(Insets.extraLarge),\n    childAspectRatio: 1,\n    crossAxisCount: colCount,\n    children: listChildren,\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Build Method for StaggerDemo in Dart\nDESCRIPTION: The `build` method constructs the widget's UI.  It includes a `Scaffold` with an `AppBar`, and a `GestureDetector` to detect taps.  On tap, the `_playAnimation` method is called, initiating the animation. `timeDilation` slows down the animation for demonstration purposes. The `StaggerAnimation` widget (not defined in this code) is used to implement the actual staggered animation, driven by the `_controller`.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/animations/staggered-animations.md#_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nWidget build(BuildContext context) {\n    timeDilation = 10.0; // 1.0 is normal animation speed.\n    return Scaffold(\n      appBar: AppBar(\n        title: const Text('Staggered Animation'),\n      ),\n      body: GestureDetector(\n        behavior: HitTestBehavior.opaque,\n        onTap: () {\n          _playAnimation();\n        },\n        child: Center(\n          child: Container(\n            width: 300,\n            height: 300,\n            decoration: BoxDecoration(\n              color: Colors.black.withValues(alpha: 0.1),\n              border: Border.all(\n                color: Colors.black.withValues(alpha: 0.5),\n              ),\n            ),\n            child: StaggerAnimation(controller:_controller.view),\n          ),\n        ),\n      ),\n    );\n  }\n```\n\n----------------------------------------\n\nTITLE: Initializing Firebase Vertex AI in Flutter\nDESCRIPTION: Illustrates how to initialize Firebase in a Flutter app to use Firebase Vertex AI. This involves importing necessary packages, initializing Firebase using `Firebase.initializeApp`, and using the `DefaultFirebaseOptions` generated by `flutterfire config`.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ai-toolkit/index.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:firebase_core/firebase_core.dart';\nimport 'package:firebase_vertexai/firebase_vertexai.dart';\nimport 'package:flutter_ai_toolkit/flutter_ai_toolkit.dart';\n\n// ... other imports\n\nimport 'firebase_options.dart'; // from `flutterfire config`\n\nvoid main() async {\n  WidgetsFlutterBinding.ensureInitialized();\n  await Firebase.initializeApp(options: DefaultFirebaseOptions.currentPlatform);\n  runApp(const App());\n}\n\n// ...app stuff here\n```\n\n----------------------------------------\n\nTITLE: Handling Method Call in AppDelegate.m (Objective-C)\nDESCRIPTION: This Objective-C code handles the 'getBatteryLevel' method call from Flutter. It calls the `getBatteryLevel` function to retrieve the battery level and returns the result to Flutter. If the method call is not 'getBatteryLevel', it returns FlutterMethodNotImplemented.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/platform-integration/platform-channels.md#_snippet_17\n\nLANGUAGE: Objective-C\nCODE:\n```\n__weak typeof(self) weakSelf = self;\n[batteryChannel setMethodCallHandler:^(FlutterMethodCall* call, FlutterResult result) {\n  // This method is invoked on the UI thread.\n  if ([@\"getBatteryLevel\" isEqualToString:call.method]) {\n    int batteryLevel = [weakSelf getBatteryLevel];\n\n    if (batteryLevel == -1) {\n      result([FlutterError errorWithCode:@\"UNAVAILABLE\"\n                                 message:@\"Battery level not available.\"\n                                 details:nil]);\n    } else {\n      result(@(batteryLevel));\n    }\n  } else {\n    result(FlutterMethodNotImplemented);\n  }\n}];\n```\n\n----------------------------------------\n\nTITLE: Configuring Suggested Prompts in LlmChatView (Flutter)\nDESCRIPTION: This snippet shows how to configure suggested prompts within the LlmChatView using the suggestions parameter.  These prompts are displayed when there's no chat history, providing users with starting points for their conversations. It utilizes the GeminiProvider for the LLM interactions.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ai-toolkit/feature-integration.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nclass ChatPage extends StatelessWidget {\n const ChatPage({super.key});\n\n @override\n Widget build(BuildContext context) => Scaffold(\n       appBar: AppBar(title: const Text(App.title)),\n       body: LlmChatView(\n         suggestions: [\n           'I\\'m a Star Wars fan. What should I wear for Halloween?',\n           'I\\'m allergic to peanuts. What candy should I avoid at Halloween?',\n           'What\\'s the difference between a pumpkin and a squash?',\n         ],\n         provider: GeminiProvider(\n           model: GenerativeModel(\n             model: 'gemini-2.0-flash',\n             apiKey: geminiApiKey,\n           ),\n         ),\n       ),\n     );\n}\n```\n\n----------------------------------------\n\nTITLE: Analyzing Dart Code\nDESCRIPTION: This command analyzes the Dart code in the current project for potential errors and warnings. It helps ensure code quality and identify issues before runtime.\nSOURCE: https://github.com/flutter/website/blob/main/examples/animation/animate1/README.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ndart analyze\n```\n\n----------------------------------------\n\nTITLE: SnackBar Management (New)\nDESCRIPTION: This snippet demonstrates the new way to manage SnackBars after the migration to ScaffoldMessenger. It uses `ScaffoldMessenger.of(context)` and `scaffoldMessengerKey.currentState` to manage SnackBars.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/scaffold-messenger.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\n// The ScaffoldMessengerState of the current context is used for managing SnackBars.\nScaffoldMessenger.of(context).showSnackBar(mySnackBar);\nScaffoldMessenger.of(context).hideCurrentSnackBar(mySnackBar);\nScaffoldMessenger.of(context).removeCurrentSnackBar(mySnackBar);\n\n// If a ScaffoldMessenger.key is specified, the ScaffoldMessengerState can be directly\n// accessed without first obtaining it from a BuildContext via\n// ScaffoldMessenger.of. From the key, use the GlobalKey.currentState\n// getter. This is used to manage SnackBars.\nfinal GlobalKey<ScaffoldMessengerState> scaffoldMessengerKey = GlobalKey<ScaffoldMessengerState>();\nScaffoldMessenger(\n  key: scaffoldMessengerKey,\n  child: ...\n)\n\nscaffoldMessengerKey.currentState.showSnackBar(mySnackBar);\nscaffoldMessengerKey.currentState.hideCurrentSnackBar(mySnackBar);\nscaffoldMessengerKey.currentState.removeCurrentSnackBar(mySnackBar);\n\n// The root ScaffoldMessenger can also be accessed by providing a key to \n// MaterialApp.scaffoldMessengerKey. This way, the ScaffoldMessengerState can be directly accessed\n// without first obtaining it from a BuildContext via ScaffoldMessenger.of. From the key, use\n// the GlobalKey.currentState getter.\nfinal GlobalKey<ScaffoldMessengerState> rootScaffoldMessengerKey = GlobalKey<ScaffoldMessengerState>();\nMaterialApp(\n  scaffoldMessengerKey: rootScaffoldMessengerKey,\n  home: ...\n)\n\nrootScaffoldMessengerKey.currentState.showSnackBar(mySnackBar);\nrootScaffoldMessengerKey.currentState.hideCurrentSnackBar(mySnackBar);\nrootScaffoldMessengerKey.currentState.removeCurrentSnackBar(mySnackBar);\n```\n\n----------------------------------------\n\nTITLE: Initialize AnimationController in Dart\nDESCRIPTION: This snippet initializes the `AnimationController` within the `_StaggerDemoState`'s `initState` method. The controller governs the animation's duration (2000 milliseconds) and uses `TickerProviderStateMixin` to synchronize with the widget's lifecycle.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/animations/staggered-animations.md#_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nclass _StaggerDemoState extends State<StaggerDemo>\n    with TickerProviderStateMixin {\n  late AnimationController _controller;\n\n  @override\n  void initState() {\n    super.initState();\n\n    _controller = AnimationController(\n      duration: const Duration(milliseconds: 2000),\n      vsync: this,\n    );\n  }\n```\n\n----------------------------------------\n\nTITLE: ThemeData After Migration (CardThemeData, DialogThemeData, TabBarThemeData)\nDESCRIPTION: Shows the updated implementation using `CardThemeData`, `DialogThemeData`, and `TabBarThemeData` in `ThemeData`. This is the recommended way to define theme properties after the migration.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/material-theme-system-updates.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nfinal ThemeData theme = ThemeData(\n    cardTheme: CardThemeData(),\n    dialogTheme: DialogThemeData(),\n    tabBarTheme: TabBarThemeData(),\n);\n```\n\n----------------------------------------\n\nTITLE: New Material Buttons Implementation Dart\nDESCRIPTION: This snippet demonstrates the implementation of `TextButton`, `ElevatedButton`, and `OutlinedButton` as replacements for the deprecated `FlatButton`, `RaisedButton`, and `OutlineButton`. It shows the new widget names. Requires the Flutter SDK.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/2-10-deprecations.md#_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nTextButton(\n  onPressed: onPressed,\n  child: Text('Button'),\n  // ...\n);\n\nElevatedButton(\n  onPressed: onPressed,\n  child: Text('Button'),\n  // ...\n);\n\nOutlinedButton(\n  onPressed: onPressed,\n  child: Text('Button'),\n  // ...\n);\n```\n\n----------------------------------------\n\nTITLE: Updating Text Dynamically using StatefulWidget\nDESCRIPTION: This code demonstrates how to wrap a Text widget in a StatefulWidget to update it dynamically when a button is pressed. The SampleAppPage StatefulWidget manages the textToShow state variable. The _updateText method modifies the state, triggering a UI update to display the new text.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/uikit-devs.md#_snippet_1\n\nLANGUAGE: Dart\nCODE:\n```\nclass SampleApp extends StatelessWidget {\n  // This widget is the root of your application.\n  const SampleApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return const MaterialApp(title: 'Sample App', home: SampleAppPage());\n  }\n}\n\nclass SampleAppPage extends StatefulWidget {\n  const SampleAppPage({super.key});\n\n  @override\n  State<SampleAppPage> createState() => _SampleAppPageState();\n}\n\nclass _SampleAppPageState extends State<SampleAppPage> {\n  // Default placeholder text\n  String textToShow = 'I Like Flutter';\n\n  void _updateText() {\n    setState(() {\n      // Update the text\n      textToShow = 'Flutter is Awesome!';\n    });\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: const Text('Sample App')),\n      body: Center(child: Text(textToShow)),\n      floatingActionButton: FloatingActionButton(\n        onPressed: _updateText,\n        tooltip: 'Update Text',\n        child: const Icon(Icons.update),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: NativeViewFactory and NativeView Implementation\nDESCRIPTION: This Swift code defines the `NativeViewFactory` and `NativeView` classes, which are crucial for creating and managing native macOS views within a Flutter application.  The `NativeViewFactory` acts as a factory for creating `NativeView` instances, while `NativeView` represents the actual native view and handles its configuration, including adding a label.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/platform-integration/macos/platform-views.md#_snippet_2\n\nLANGUAGE: Swift\nCODE:\n```\nimport Cocoa\nimport FlutterMacOS\n\nclass NativeViewFactory: NSObject, FlutterPlatformViewFactory {\n  private var messenger: FlutterBinaryMessenger\n\n  init(messenger: FlutterBinaryMessenger) {\n    self.messenger = messenger\n    super.init()\n  }\n\n  func create(\n    withViewIdentifier viewId: Int64,\n    arguments args: Any?\n  ) -> NSView {\n    return NativeView(\n      viewIdentifier: viewId,\n      arguments: args,\n      binaryMessenger: messenger)\n  }\n\n  /// Implementing this method is only necessary when the `arguments` in `createWithFrame` is not `nil`.\n  public func createArgsCodec() -> (FlutterMessageCodec & NSObjectProtocol)? {\n    return FlutterStandardMessageCodec.sharedInstance()\n  }\n}\n\nclass NativeView: NSView {\n\n  init(\n    viewIdentifier viewId: Int64,\n    arguments args: Any?,\n    binaryMessenger messenger: FlutterBinaryMessenger?\n  ) {\n    super.init(frame: CGRect(x: 0, y: 0, width: 200, height: 200))\n    wantsLayer = true\n    layer?.backgroundColor = NSColor.systemBlue.cgColor\n    // macOS views can be created here\n    createNativeView(view: self)\n  }\n    \n    required init?(coder nsCoder: NSCoder) {\n        super.init(coder: nsCoder)\n    }\n    \n  func createNativeView(view _view: NSView) {\n    let nativeLabel = NSTextField()\n    nativeLabel.frame = CGRect(x: 0, y: 0, width: 180, height: 48.0)\n    nativeLabel.stringValue = \"Native text from macOS\"\n    nativeLabel.textColor = NSColor.black\n    nativeLabel.font = NSFont.systemFont(ofSize: 14)\n    nativeLabel.isBezeled = false\n    nativeLabel.focusRingType = .none\n    nativeLabel.isEditable = true\n    nativeLabel.sizeToFit()\n    _view.addSubview(nativeLabel)\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Example .flutter-plugins-dependencies file\nDESCRIPTION: This JSON snippet shows the new `.flutter-plugins-dependencies` file format, which provides a structured dependency graph for plugins, including their names, versions, and dependencies. This replaces the simpler `.flutter-plugins` format.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/flutter-plugins-configuration.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencyGraph\": {\n    \"camera\": {\n      \"name\": \"camera\",\n      \"version\": \"0.10.0\",\n      \"dependencies\": {\n        \"flutter\": \"0.0.0\"\n      }\n    },\n    \"shared_preferences\": {\n      \"name\": \"shared_preferences\",\n      \"version\": \"2.0.15\",\n      \"dependencies\": {\n        \"flutter\": \"0.0.0\"\n      }\n    }\n  },\n  \"flutter\": {\n    \"frameworkRevision\": \"3a0f99d4f2\",\n    \"channel\": \"stable\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Route With Result (After PR) - Dart\nDESCRIPTION: This code snippet shows the updated methods `removeRoute` and `removeRouteBelow` after the change. The methods now accept an optional `result` parameter, allowing developers to pass a result to the associated future, which is completed when the route is removed.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/navigator-complete-route.md#_snippet_1\n\nLANGUAGE: Dart\nCODE:\n```\nNavigator.of(context).removeRoute(route, result);\nNavigator.of(context).removeRouteBelow(route, result);\n```\n\n----------------------------------------\n\nTITLE: Configuring Localization Delegates and Supported Locales\nDESCRIPTION: This snippet demonstrates how to configure the `localizationsDelegates` and `supportedLocales` properties in a Flutter `MaterialApp` widget. This enables the app to support multiple languages.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/uikit-devs.md#_snippet_16\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\nimport 'package:flutter_localizations/flutter_localizations.dart';\n\nclass MyWidget extends StatelessWidget {\n  const MyWidget({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return const MaterialApp(\n      localizationsDelegates: <LocalizationsDelegate<dynamic>>[\n        // Add app-specific localization delegate[s] here\n        GlobalMaterialLocalizations.delegate,\n        GlobalWidgetsLocalizations.delegate,\n      ],\n      supportedLocales: <Locale>[\n        Locale('en', 'US'), // English\n        Locale('he', 'IL'), // Hebrew\n        // ... other locales the app supports\n      ],\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Play and pause video with FloatingActionButton in Flutter\nDESCRIPTION: This Dart code snippet demonstrates how to add a FloatingActionButton to control the play and pause state of the video. It uses setState to update the icon based on the current playback state of the VideoPlayerController.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/plugins/play-video.md#_snippet_5\n\nLANGUAGE: Dart\nCODE:\n```\nFloatingActionButton(\n  onPressed: () {\n    // Wrap the play or pause in a call to `setState`. This ensures the\n    // correct icon is shown.\n    setState(() {\n      // If the video is playing, pause it.\n      if (_controller.value.isPlaying) {\n        _controller.pause();\n      } else {\n        // If the video is paused, play it.\n        _controller.play();\n      }\n    });\n  },\n  // Display the correct icon depending on the state of the player.\n  child: Icon(\n    _controller.value.isPlaying ? Icons.pause : Icons.play_arrow,\n  ),\n)\n```\n\n----------------------------------------\n\nTITLE: Maintaining List Scroll Position on Orientation Change - Flutter\nDESCRIPTION: To maintain the scroll position in a List widget that doesn't change its layout when the device's orientation changes, use the `PageStorageKey` class. This class persists the widget state in storage when the widget is destroyed and restores it upon recreation. This is especially useful for ensuring a consistent user experience during device rotation or window resizing.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/adaptive-responsive/best-practices.md#_snippet_0\n\nLANGUAGE: flutter\nCODE:\n```\nuse the [`PageStorageKey`][] class.\n[`PageStorageKey`][] persists the\nwidget state in storage after the widget is\ndestroyed and restores state when recreated.\n```\n\n----------------------------------------\n\nTITLE: Removing Route Without Result (Before PR) - Dart\nDESCRIPTION: This code snippet demonstrates how routes were removed before the change. The `removeRoute` and `removeRouteBelow` methods would remove the route but not complete the associated future, meaning developers could not get results from the removed routes.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/navigator-complete-route.md#_snippet_0\n\nLANGUAGE: Dart\nCODE:\n```\nNavigator.of(context).removeRoute(route);\nNavigator.of(context).removeRouteBelow(route);\n```\n\n----------------------------------------\n\nTITLE: Show FlutterViewController in UIKit-Swift\nDESCRIPTION: This Swift code shows a `ViewController` with a `UIButton` hooked to present a `FlutterViewController`.  It retrieves the `FlutterEngine` instance from the `AppDelegate` and uses it to initialize the `FlutterViewController`. The `FlutterViewController` is then presented modally.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/add-to-app/ios/add-flutter-screen.md#_snippet_4\n\nLANGUAGE: Swift\nCODE:\n```\nimport UIKit\nimport Flutter\n\nclass ViewController: UIViewController {\n  override func viewDidLoad() {\n    super.viewDidLoad()\n\n    // Make a button to call the showFlutter function when pressed.\n    let button = UIButton(type:UIButton.ButtonType.custom)\n    button.addTarget(self, action: #selector(showFlutter), for: .touchUpInside)\n    button.setTitle(\"Show Flutter!\", for: UIControl.State.normal)\n    button.frame = CGRect(x: 80.0, y: 210.0, width: 160.0, height: 40.0)\n    button.backgroundColor = UIColor.blue\n    self.view.addSubview(button)\n  }\n\n  @objc func showFlutter() {\n    let flutterEngine = (UIApplication.shared.delegate as! AppDelegate).flutterEngine\n    let flutterViewController =\n        FlutterViewController(engine: flutterEngine, nibName: nil, bundle: nil)\n    present(flutterViewController, animated: true, completion: nil)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Modifier Key Presses with HardwareKeyboard (After)\nDESCRIPTION: This snippet demonstrates how to check for modifier key presses (Control, Shift, Alt, Meta) and a specific key press (Key A) using the HardwareKeyboard API.  It replaces the deprecated `RawKeyEvent` methods with `HardwareKeyboard.instance.isControlPressed`, `HardwareKeyboard.instance.isShiftPressed`, `HardwareKeyboard.instance.isAltPressed`, `HardwareKeyboard.instance.isMetaPressed`, and `HardwareKeyboard.instance.isLogicalKeyPressed`. The input is a `KeyEvent` and the output is printing to the console.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/key-event-migration.md#_snippet_1\n\nLANGUAGE: Dart\nCODE:\n```\nKeyEventResult _handleKeyEvent(KeyEvent _) {\n  if (HardwareKeyboard.instance.isControlPressed ||\n      HardwareKeyboard.instance.isShiftPressed ||\n      HardwareKeyboard.instance.isAltPressed ||\n      HardwareKeyboard.instance.isMetaPressed) {\n    print('Modifier pressed: $keyEvent');\n  }\n  if (HardwareKeyboard.instance.isLogicalKeyPressed(LogicalKeyboardKey.keyA)) {\n    print('Key A pressed.');\n  }\n  return KeyEventResult.ignored;\n}\n```\n\n----------------------------------------\n\nTITLE: SelectableText Widget in Flutter\nDESCRIPTION: This code snippet showcases the usage of the SelectableText widget in Flutter. The SelectableText widget allows users to highlight and copy text from the displayed string. The code displays a snippet from Romeo and Juliet.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/fundamentals/user-input.md#_snippet_1\n\nLANGUAGE: Dart\nCODE:\n```\n@override\nWidget build(BuildContext context) {\n  return const SelectableText('''\nTwo households, both alike in dignity,\nIn fair Verona, where we lay our scene,\nFrom ancient grudge break to new mutiny,\nWhere civil blood makes civil hands unclean.\nFrom forth the fatal loins of these two foes''');\n}\n```\n\n----------------------------------------\n\nTITLE: Rerouting Prompts with LlmStreamGenerator in Flutter\nDESCRIPTION: This code demonstrates how to intercept and log messages between the `LlmChatView` and the `GeminiProvider` using an `LlmStreamGenerator` function. The `messageSender` parameter of `LlmChatView` is set to the `_logMessage` function, which logs the prompt and attachments, forwards the message to the provider using `sendMessageStream`, logs the response, and yields the response. It requires the `GeminiProvider`, `Attachment`, and `debugPrint` from Flutter's core libraries.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ai-toolkit/feature-integration.md#_snippet_17\n\nLANGUAGE: dart\nCODE:\n```\nclass ChatPage extends StatelessWidget {\n  final _provider = GeminiProvider(...);\n\n  @override\n  Widget build(BuildContext context) => Scaffold(\n      appBar: AppBar(title: const Text(App.title)),\n      body: LlmChatView(\n        provider: _provider,\n        messageSender: _logMessage,\n      ),\n    );\n\n  Stream<String> _logMessage(\n    String prompt, {\n    required Iterable<Attachment> attachments,\n  }) async* {\n    // log the message and attachments\n    debugPrint('# Sending Message');\n    debugPrint('## Prompt\\n$prompt');\n    debugPrint('## Attachments\\n${attachments.map((a) => a.toString())}');\n\n    // forward the message on to the provider\n    final response = _provider.sendMessageStream(\n      prompt,\n      attachments: attachments,\n    );\n\n    // log the response\n    final text = await response.join();\n    debugPrint('## Response\\n$text');\n\n    // return it\n    yield text;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding an Action to a SnackBar in Flutter\nDESCRIPTION: This snippet demonstrates how to add an optional action to a SnackBar. The action is a button that performs a specific function, such as undoing a previous action.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/design/snackbars.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nfinal snackBar = SnackBar(\n  content: const Text('Yay! A SnackBar!'),\n  action: SnackBarAction(\n    label: 'Undo',\n    onPressed: () {\n      // Some code to undo the change.\n    },\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: ButtonBar Usage (Before Migration) - Dart\nDESCRIPTION: This code snippet demonstrates how to use the deprecated ButtonBar widget. It shows the use of buttonPadding and overflowButtonSpacing properties to control the spacing between and around the buttons. This needs to be migrated to the OverflowBar widget.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/deprecate-buttonbar.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nButtonBar(\n  buttonPadding: const EdgeInsets.all(8.0),\n  overflowButtonSpacing: 8.0,\n  children: <Widget>[\n    TextButton(child: const Text('Button 1'), onPressed: () {}),\n    TextButton(child: const Text('Button 2'), onPressed: () {}),\n    TextButton(child: const Text('Button 3'), onPressed: () {}),\n  ],\n),\n```\n\n----------------------------------------\n\nTITLE: Disabling Impeller on Android using AndroidManifest.xml\nDESCRIPTION: This XML snippet shows how to disable Impeller when deploying a Flutter application on Android. By adding the `meta-data` tag with the name `io.flutter.embedding.android.EnableImpeller` and a value of `false` to the `AndroidManifest.xml` file, Impeller is disabled for the application.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/perf/impeller.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<meta-data\n    android:name=\"io.flutter.embedding.android.EnableImpeller\"\n    android:value=\"false\" />\n```\n\n----------------------------------------\n\nTITLE: Submitting a Score to a Leaderboard using GamesServices.submitScore() in Dart\nDESCRIPTION: This Dart code snippet submits a player's score to a specific leaderboard using `GamesServices.submitScore()`.  The `Score` object includes the score value, and the Android and iOS leaderboard IDs. These IDs must match the leaderboard IDs configured in the Google Play Console and App Store Connect.  The platform handles whether the submitted score is a new high score.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/games/achievements-leaderboard.md#_snippet_5\n\nLANGUAGE: Dart\nCODE:\n```\nawait GamesServices.submitScore(\n  score: Score(\n    iOSLeaderboardID: 'some_id_from_app_store',\n    androidLeaderboardID: 'sOmE_iD_fRoM_gPlAy',\n    value: 100,\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Entering Text into TextField Widget\nDESCRIPTION: This code snippet demonstrates how to enter text into a TextField widget during a widget test using the `enterText()` method of the `WidgetTester`. It first builds the `TodoList` widget and then uses `enterText()` to input the string 'hi' into the `TextField`.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/testing/widget/tap-drag.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\ntestWidgets('Add and remove a todo', (tester) async {\n  // Build the widget\n  await tester.pumpWidget(const TodoList());\n\n  // Enter 'hi' into the TextField.\n  await tester.enterText(find.byType(TextField), 'hi');\n});\n```\n\n----------------------------------------\n\nTITLE: Managing state with StatefulWidget - Flutter/Dart\nDESCRIPTION: This snippet demonstrates state management using a `StatefulWidget` in Flutter. It illustrates how to create a counter with a button to increment it using `setState`.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/swiftui-devs.md#_snippet_18\n\nLANGUAGE: Dart\nCODE:\n```\nclass MyHomePage extends StatefulWidget {\n  const MyHomePage({super.key});\n  @override\n  State<MyHomePage> createState() => _MyHomePageState();\n}\n\nclass _MyHomePageState extends State<MyHomePage> {\n  int _counter = 0;\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: Center(\n        child: Column(\n          mainAxisAlignment: MainAxisAlignment.center,\n          children: [\n            Text('$_counter'),\n            TextButton(\n              onPressed:\n                  () => setState(() {\n                    _counter++;\n                  }),\n              child: const Text('+'),\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Errors Not Caught by Flutter\nDESCRIPTION: This snippet demonstrates how to catch errors that occur outside of Flutter's callback system, such as those thrown by asynchronous functions like MethodChannel.invokeMethod. It sets up an error handler on the PlatformDispatcher.instance.onError, which receives the error and stack trace. The handler then calls a custom function (myBackend.sendError) to process the error.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/testing/errors.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\nimport 'dart:ui';\n\nvoid main() {\n  MyBackend myBackend = MyBackend();\n  PlatformDispatcher.instance.onError = (error, stack) {\n    myBackend.sendError(error, stack);\n    return true;\n  };\n  runApp(const MyApp());\n}\n```\n\n----------------------------------------\n\nTITLE: Analyzing App Size with Flutter Build Flag\nDESCRIPTION: This command builds a release version of the Flutter application with the `--analyze-size` flag.  This creates a JSON file containing the size breakdown which can be further analyzed with DevTools.  This flag can be used with apk, appbundle, ios, linux, macos and windows build targets.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/perf/app-size.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nflutter build apk --analyze-size\n```\n\nLANGUAGE: console\nCODE:\n```\nflutter build appbundle --analyze-size\n```\n\nLANGUAGE: console\nCODE:\n```\nflutter build ios --analyze-size\n```\n\nLANGUAGE: console\nCODE:\n```\nflutter build linux --analyze-size\n```\n\nLANGUAGE: console\nCODE:\n```\nflutter build macos --analyze-size\n```\n\nLANGUAGE: console\nCODE:\n```\nflutter build windows --analyze-size\n```\n\n----------------------------------------\n\nTITLE: Complete FadeInImage Memory Example in Flutter\nDESCRIPTION: This example demonstrates a complete Flutter app using FadeInImage to display an image from the network with a transparent placeholder from memory (using transparent_image). It includes the necessary imports, a basic MaterialApp setup, and a Scaffold with a CircularProgressIndicator.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/images/fading-in-images.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\nimport 'package:transparent_image/transparent_image.dart';\n\nvoid main() {\n  runApp(const MyApp());\n}\n\nclass MyApp extends StatelessWidget {\n  const MyApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    const title = 'Fade in images';\n\n    return MaterialApp(\n      title: title,\n      home: Scaffold(\n        appBar: AppBar(title: const Text(title)),\n        body: Stack(\n          children: <Widget>[\n            const Center(child: CircularProgressIndicator()),\n            Center(\n              child: FadeInImage.memoryNetwork(\n                placeholder: kTransparentImage,\n                image: 'https://picsum.photos/250?image=9',\n              ),\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Opening a Drawer Programmatically - Dart\nDESCRIPTION: This snippet shows how to open the drawer programmatically using `Scaffold.of(context).openDrawer()`.  This allows for custom control over when the drawer opens, such as when a specific button is pressed.  It uses the `Builder` widget to obtain the `BuildContext`.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/design/drawer.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nScaffold(\n  appBar: AppBar(\n    title: const Text('AppBar with hamburger button'),\n    leading: Builder(\n      builder: (context) {\n        return IconButton(\n          icon: const Icon(Icons.menu),\n          onPressed: () {\n            Scaffold.of(context).openDrawer();\n          },\n        );\n      },\n    ),\n  ),\n  drawer: Drawer(\n    child: // Populate the Drawer in the last step.\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Basic ListView Implementation (Dart)\nDESCRIPTION: This snippet provides a basic implementation of a `ListView` in Flutter. It generates a list of `Text` widgets dynamically and displays them within the `ListView`, showing how easily you can create a scrollable list in Flutter.  It utilizes the immutable widget pattern in Flutter.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/xamarin-forms-devs.md#_snippet_46\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\n\nvoid main() {\n  runApp(const SampleApp());\n}\n\nclass SampleApp extends StatelessWidget {\n  /// This widget is the root of your application.\n  const SampleApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return const MaterialApp(title: 'Sample App', home: SampleAppPage());\n  }\n}\n\nclass SampleAppPage extends StatelessWidget {\n  const SampleAppPage({super.key});\n\n  List<Widget> _getListData() {\n    return List<Widget>.generate(\n      100,\n      (index) =>\n          Padding(padding: const EdgeInsets.all(10), child: Text('Row $index')),\n    );\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: const Text('Sample App')),\n      body: ListView(children: _getListData()),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Focus Traversal Order with FocusTraversalOrder in Flutter\nDESCRIPTION: This code snippet demonstrates how to implement a custom focus traversal order in a row of buttons using the `FocusTraversalOrder` widget with `NumericFocusOrder`.  It wraps the buttons in a `FocusTraversalGroup` and assigns numerical orders to each button, overriding the default reading order.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/interactivity/focus.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nclass OrderedButtonRow extends StatelessWidget {\n  const OrderedButtonRow({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return FocusTraversalGroup(\n      policy: OrderedTraversalPolicy(),\n      child: Row(\n        children: <Widget>[\n          const Spacer(),\n          FocusTraversalOrder(\n            order: const NumericFocusOrder(2),\n            child: TextButton(child: const Text('ONE'), onPressed: () {}),\n          ),\n          const Spacer(),\n          FocusTraversalOrder(\n            order: const NumericFocusOrder(1),\n            child: TextButton(child: const Text('TWO'), onPressed: () {}),\n          ),\n          const Spacer(),\n          FocusTraversalOrder(\n            order: const NumericFocusOrder(3),\n            child: TextButton(child: const Text('THREE'), onPressed: () {}),\n          ),\n          const Spacer(),\n        ],\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Grid with GridView.builder in Flutter (Dart)\nDESCRIPTION: Illustrates creating a grid layout using GridView.builder in Flutter. It uses SliverGridDelegateWithFixedCrossAxisCount to specify the grid's layout, including the number of columns (crossAxisCount) and the height of each item (mainAxisExtent).\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/compose-devs.md#_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\nconst widgets = [\n  Text('Row 1'),\n  Icon(Icons.arrow_downward),\n  Icon(Icons.arrow_upward),\n  Text('Row 2'),\n  Icon(Icons.arrow_downward),\n  Icon(Icons.arrow_upward),\n];\n\nclass HomePage extends StatelessWidget {\n  const HomePage({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: GridView.builder(\n        gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(\n          crossAxisCount: 3,\n          mainAxisExtent: 40,\n        ),\n        itemCount: widgets.length,\n        itemBuilder: (context, index) => widgets[index],\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Animating Circle Color with sin in Flutter\nDESCRIPTION: This snippet calculates a color based on the sine of an animation value. It uses `sin` to generate a value between -1 and 1, which is then used to interpolate between two colors using `Color.lerp`. This creates a flashing effect for a loading indicator.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/effects/typing-indicator.md#_snippet_5\n\nLANGUAGE: Dart\nCODE:\n```\nfinal circleColorPercent = sin(pi * circleFlashPercent);\n\n        return Container(\n          width: 12,\n          height: 12,\n          decoration: BoxDecoration(\n            shape: BoxShape.circle,\n            color: Color.lerp(\n              flashingCircleDarkColor,\n              flashingCircleBrightColor,\n              circleColorPercent,\n            ),\n          ),\n        );\n```\n\n----------------------------------------\n\nTITLE: Starting an App - Flutter\nDESCRIPTION: In Flutter, the `main` function is the entry point.  The `runApp` function is called with the root widget of the application. This widget becomes the base of the application's UI.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/xamarin-forms-devs.md#_snippet_1\n\nLANGUAGE: Dart\nCODE:\n```\nvoid main() {\n  runApp(const MyApp());\n}\n```\n\n----------------------------------------\n\nTITLE: Registering and Unregistering PopScope Widgets - Dart\nDESCRIPTION: This snippet shows how to register and unregister `PopScope` widgets using `ModalRoute.registerPopEntry` and `ModalRoute.unregisterPopEntry`. This is useful when implementing custom `PopScope` widgets to inform the route about their existence.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/android-predictive-back.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\n@override\nvoid didChangeDependencies() {\n  super.didChangeDependencies();\n  final ModalRoute<dynamic>? nextRoute = ModalRoute.of(context);\n  if (nextRoute != _route) {\n    _route?.unregisterPopEntry(this);\n    _route = nextRoute;\n    _route?.registerPopEntry(this);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Dart Using Const For Hot Reload\nDESCRIPTION: This Dart code defines both `foo` and `bar` as `const` variables. Changes to `foo` will be reflected in `bar` after a hot reload because `const` variables are treated as aliases, not as state.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/tools/hot-reload.md#_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nconst foo = 1;\nconst bar = foo; // Convert foo to a const...\nvoid onClick() {\n  print(foo);\n  print(bar);\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Flutter Engine with Method Channel in Kotlin\nDESCRIPTION: This Kotlin code modifies the `MainActivity` class to configure the Flutter engine with a method channel. It defines a channel name and sets up a method call handler to launch a new `SecondActivity` when the `launchActivity` method is invoked from the Flutter side. It receives a message from Flutter using the MethodChannel.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/platform-integration/android/compose-activity.md#_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MainActivity: FlutterActivity() {\n    // This value must match the `MethodChannel` name in your Dart code.\n    private val CHANNEL = \"com.example.flutter_android_activity\"\n\n    override fun configureFlutterEngine(flutterEngine: FlutterEngine) {\n        GeneratedPluginRegistrant.registerWith(flutterEngine)\n\n        MethodChannel(flutterEngine.dartExecutor.binaryMessenger, CHANNEL).setMethodCallHandler {\n            call: MethodCall, result: MethodChannel.Result ->\n                when (call.method) {\n                    // Note: This must match the first parameter passed to\n                    // `platformMethodChannel.invokeMethod` in your Dart code.\n                    \"launchActivity\" -> {\n                        try {\n                            // Takes an object, in this case a String.\n                            val message = call.arguments\n                            val intent = Intent(this@MainActivity, SecondActivity::class.java)\n                            intent.putExtra(\"message\", message.toString())\n                            startActivity(intent)\n                        } catch (e: Exception){}\n                            result.success(true)\n                        }\n                        else -> {}\n                }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Returning 'Yep!' from Selection Screen in Flutter\nDESCRIPTION: This code snippet updates the 'Yep!' button's `onPressed` callback to call `Navigator.pop(context, 'Yep!')`. This closes the screen and returns the string 'Yep!' as the result to the previous screen.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/navigation/returning-data.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nElevatedButton(\n  onPressed: () {\n    // Close the screen and return \"Yep!\" as the result.\n    Navigator.pop(context, 'Yep!');\n  },\n  child: const Text('Yep!'),\n)\n```\n\n----------------------------------------\n\nTITLE: Log Messages with Categories in Dart\nDESCRIPTION: This snippet demonstrates how to use the `dart:developer` library to log messages with specific categories.  This allows for more granular filtering and organization of log output.  It logs two messages with different category names.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/testing/code-debugging.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nimport 'dart:developer' as developer;\n\nvoid main() {\n  developer.log('log me', name: 'my.app.category');\n\n  developer.log('log me 1', name: 'my.other.category');\n  developer.log('log me 2', name: 'my.other.category');\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Page - Flutter MaterialApp\nDESCRIPTION: This Flutter code defines the home page using `MaterialApp`, which holds the root page in its `home` property. It demonstrates the creation of a `StatelessWidget` named `MyApp` that returns a `MaterialApp` with a title and `MyHomePage` as its home page.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/xamarin-forms-devs.md#_snippet_4\n\nLANGUAGE: Dart\nCODE:\n```\nclass MyApp extends StatelessWidget {\n  /// This widget is the root of your application.\n  const MyApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return const MaterialApp(\n      title: 'Flutter Demo',\n      home: MyHomePage(title: 'Flutter Demo Home Page'),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Navigating with RouteSettings in Dart\nDESCRIPTION: This code demonstrates how to navigate to the `DetailScreen` and pass data using `RouteSettings`.  Instead of passing the `Todo` directly to the `DetailScreen` constructor, it's passed as an argument within the `RouteSettings` when calling `Navigator.push`. The `DetailScreen` then retrieves the data from these settings.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/navigation/passing-data.md#_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nListView.builder(\n  itemCount: todos.length,\n  itemBuilder: (context, index) {\n    return ListTile(\n      title: Text(todos[index].title),\n      // When a user taps the ListTile, navigate to the DetailScreen.\n      // Notice that you're not only creating a DetailScreen, you're\n      // also passing the current todo through to it.\n      onTap: () {\n        Navigator.push(\n          context,\n          MaterialPageRoute(\n            builder: (context) => const DetailScreen(),\n            // Pass the arguments as part of the RouteSettings. The\n            // DetailScreen reads the arguments from these settings.\n            settings: RouteSettings(arguments: todos[index]),\n          ),\n        );\n      },\n    );\n  },\n)\n```\n\n----------------------------------------\n\nTITLE: Import statements for Hybrid Composition - Dart\nDESCRIPTION: These import statements are required for implementing the Hybrid Composition method for embedding native Android views in a Flutter app. They include necessary Flutter packages for foundation, gestures, material design, rendering, and platform services.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/platform-integration/android/platform-views.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/foundation.dart';\nimport 'package:flutter/gestures.dart';\nimport 'package:flutter/material.dart';\nimport 'package:flutter/rendering.dart';\nimport 'package:flutter/services.dart';\n```\n\n----------------------------------------\n\nTITLE: Creating HTML Element with HtmlElementView.fromTagName in Dart\nDESCRIPTION: This code snippet demonstrates how to create a `<video>` HTML element using the `HtmlElementView.fromTagName` constructor. It sets the `src` and `style` properties of the video element before injecting it into the DOM. The `onElementCreated` callback allows customization of the HTML element before it is rendered.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/platform-integration/web/web-content-in-flutter.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n// Create a `video` tag, and set its `src` and some `style` properties...\nHtmlElementView.fromTag('video', onElementCreated: (Object video) {\n  video as web.HTMLVideoElement;\n  video.src = 'https://interactive-examples.mdn.mozilla.net/media/cc0-videos/flower.mp4';\n  video.style.width = '100%';\n  video.style.height = '100%';\n  // other customizations to the element...\n});\n```\n\n----------------------------------------\n\nTITLE: Running Alignment Animation in Dart\nDESCRIPTION: Defines the `_runAnimation` method which creates an `AlignmentTween` to interpolate between the current `_dragAlignment` and the center. It then resets and starts the `AnimationController` to initiate the animation. This method sets up and starts the animation that moves the card back to the center.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/animation/physics-simulation.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nvoid _runAnimation() {\n  _animation = _controller.drive(\n    AlignmentTween(begin: _dragAlignment, end: Alignment.center),\n  );\n  _controller.reset();\n  _controller.forward();\n}\n```\n\n----------------------------------------\n\nTITLE: HighlightTextEditingController After BuildContext (Dart)\nDESCRIPTION: This code shows the updated `HighlightTextEditingController` using the `BuildContext` to access the theme's accent color.  It demonstrates how the context parameter allows the controller to dynamically retrieve the color.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/buildtextspan-buildcontext.md#_snippet_5\n\nLANGUAGE: Dart\nCODE:\n```\nclass HighlightTextEditingController extends TextEditingController {\n  @override\n  TextSpan buildTextSpan({required BuildContext context, TextStyle? style, required bool withComposing}) {\n    final Color color = Theme.of(context).accentColor;\n    return super.buildTextSpan(context: context, style: TextStyle(color: color), withComposing: withComposing);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Run Flutter Integration Test (Console)\nDESCRIPTION: This command runs the integration test specified by the file path.  It can be used to execute tests on desktop, Android, or other supported platforms.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/testing/integration-tests/index.md#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\nflutter test integration_test/app_test.dart\n```\n\n----------------------------------------\n\nTITLE: Creating a Logo Widget Flutter Dart\nDESCRIPTION: This stateless widget defines a simple Flutter logo.  It resides within a container with vertical margins. This widget is designed to be animated by a parent widget and uses the default Flutter logo.  It relies on the Flutter material package.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/animations/tutorial.md#_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nclass LogoWidget extends StatelessWidget {\n  const LogoWidget({super.key});\n\n  // Leave out the height and width so it fills the animating parent.\n  @override\n  Widget build(BuildContext context) {\n    return Container(\n      margin: const EdgeInsets.symmetric(vertical: 10),\n      child: const FlutterLogo(),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using FocusableActionDetector in Flutter\nDESCRIPTION: This snippet showcases the `FocusableActionDetector` widget, which is used to handle focus changes and actions triggered by keyboard or mouse interactions. It defines a stateful widget that tracks focus and displays a visual highlight when focused. An action is defined for the `ActivateIntent`, which is triggered when Enter or Space is pressed.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/adaptive-responsive/input.md#_snippet_1\n\nLANGUAGE: Dart\nCODE:\n```\nclass _BasicActionDetectorState extends State<BasicActionDetector> {\n  bool _hasFocus = false;\n  @override\n  Widget build(BuildContext context) {\n    return FocusableActionDetector(\n      onFocusChange: (value) => setState(() => _hasFocus = value),\n      actions: <Type, Action<Intent>>{\n        ActivateIntent: CallbackAction<Intent>(\n          onInvoke: (intent) {\n            print('Enter or Space was pressed!');\n            return null;\n          },\n        ),\n      },\n      child: Stack(\n        clipBehavior: Clip.none,\n        children: [\n          const FlutterLogo(size: 100),\n          // Position focus in the negative margin for a cool effect\n          if (_hasFocus)\n            Positioned(\n              left: -4,\n              top: -4,\n              bottom: -4,\n              right: -4,\n              child: _roundedBorder(),\n            ),\n        ],\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Drawer in Flutter\nDESCRIPTION: This Flutter code snippet shows how to create a `Drawer` widget.  It defines a simple `Drawer` with a `ListTile` that navigates to another named route when tapped. The drawer itself is a Material Design panel that slides in horizontally.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/react-native-devs.md#_snippet_42\n\nLANGUAGE: dart\nCODE:\n```\n@override\nWidget build(BuildContext context) {\n  return Drawer(\n    elevation: 20,\n    child: ListTile(\n      leading: const Icon(Icons.change_history),\n      title: const Text('Screen2'),\n      onTap: () {\n        Navigator.of(context).pushNamed('/b');\n      },\n    ),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Run Flutter Desktop App\nDESCRIPTION: These commands launch a Flutter application on the specified desktop platform (Windows, macOS, or Linux). The `-d` flag specifies the target device.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/platform-integration/desktop.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nC:\\> flutter run -d windows\n$ flutter run -d macos\n$ flutter run -d linux\n```\n\n----------------------------------------\n\nTITLE: Implicit Animation Container Example Dart\nDESCRIPTION: This Dart code demonstrates implicit animations using the AnimatedContainer widget in Flutter. It includes random color, border radius, and margin generation. The AnimatedContainer animates changes to these properties when a button is pressed, managed by a stateful widget.\nSOURCE: https://github.com/flutter/website/blob/main/src/_includes/docs/implicit-animations/shape-shifting-complete.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n// Copyright 2019 the Dart project authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license\n// that can be found in the LICENSE file.\n\nimport 'dart:math';\n\nimport 'package:flutter/material.dart';\n\nconst _duration = Duration(milliseconds: 400);\n\ndouble randomBorderRadius() {\n  return Random().nextDouble() * 64;\n}\n\ndouble randomMargin() {\n  return Random().nextDouble() * 64;\n}\n\nColor randomColor() {\n  return Color(0xFFFFFFFF & Random().nextInt(0xFFFFFFFF));\n}\n\nclass AnimatedContainerDemo extends StatefulWidget {\n  const AnimatedContainerDemo({super.key});\n\n  @override\n  State<AnimatedContainerDemo> createState() => _AnimatedContainerDemoState();\n}\n\nclass _AnimatedContainerDemoState extends State<AnimatedContainerDemo> {\n  late Color color;\n  late double borderRadius;\n  late double margin;\n\n  @override\n  void initState() {\n    super.initState();\n    color = randomColor();\n    borderRadius = randomBorderRadius();\n    margin = randomMargin();\n  }\n\n  void change() {\n    setState(() {\n      color = randomColor();\n      borderRadius = randomBorderRadius();\n      margin = randomMargin();\n    });\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: Center(\n        child: Column(\n          children: <Widget>[\n            SizedBox(\n              width: 128,\n              height: 128,\n              child: AnimatedContainer(\n                margin: EdgeInsets.all(margin),\n                decoration: BoxDecoration(\n                  color: color,\n                  borderRadius: BorderRadius.circular(borderRadius),\n                ),\n                duration: _duration,\n              ),\n            ),\n            ElevatedButton(\n              child: const Text('Change'),\n              onPressed: () => change(),\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n}\n\nclass MyApp extends StatelessWidget {\n  const MyApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return const MaterialApp(\n      debugShowCheckedModeBanner: false,\n      home: AnimatedContainerDemo(),\n    );\n  }\n}\n\nvoid main() {\n  runApp(\n    const MyApp(),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting ViewModels with Repositories using GoRouter (Dart)\nDESCRIPTION: This snippet demonstrates how to use `package:go_router` to configure routes and inject view models with their required repositories. It shows how repositories are accessed using `context.read()` within the `builder` of a `GoRoute` and passed to the view model's constructor. This configures dependency injection during route creation.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/app-architecture/case-study/dependency-injection.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\n// This code was modified for demo purposes.\nGoRouter router(\n  AuthRepository authRepository,\n) =>\n    GoRouter(\n      initialLocation: Routes.home,\n      debugLogDiagnostics: true,\n      redirect: _redirect,\n      refreshListenable: authRepository,\n      routes: [\n        GoRoute(\n          path: Routes.login,\n          builder: (context, state) {\n            return LoginScreen(\n              viewModel: LoginViewModel(\n                authRepository: context.read(),\n              ),\n            );\n          },\n        ),\n        GoRoute(\n          path: Routes.home,\n          builder: (context, state) {\n            final viewModel = HomeViewModel(\n              bookingRepository: context.read(),\n            );\n            return HomeScreen(viewModel: viewModel);\n          },\n          routes: [\n            // ...\n          ],\n        ),\n      ],\n    );\n```\n\n----------------------------------------\n\nTITLE: Using DeferredBox with loadLibrary (Dart)\nDESCRIPTION: Demonstrates how to use a deferred loaded Dart library with `loadLibrary()`. It uses `FutureBuilder` to wait for the `loadLibrary` `Future` to complete and then displays the `DeferredBox` widget.  If there's an error loading, it shows an error message. The `box.DeferredBox()` constructor is called only after the library is loaded.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/perf/deferred-components.md#_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\nimport 'box.dart' deferred as box;\n\nclass SomeWidget extends StatefulWidget {\n  const SomeWidget({super.key});\n\n  @override\n  State<SomeWidget> createState() => _SomeWidgetState();\n}\n\nclass _SomeWidgetState extends State<SomeWidget> {\n  late Future<void> _libraryFuture;\n\n  @override\n  void initState() {\n    super.initState();\n    _libraryFuture = box.loadLibrary();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return FutureBuilder<void>(\n      future: _libraryFuture,\n      builder: (context, snapshot) {\n        if (snapshot.connectionState == ConnectionState.done) {\n          if (snapshot.hasError) {\n            return Text('Error: ${snapshot.error}');\n          }\n          return box.DeferredBox();\n        }\n        return const CircularProgressIndicator();\n      },\n    );\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Generate Obfuscation Map\nDESCRIPTION: This command builds a Flutter application with obfuscation enabled and generates an obfuscation map. The `--obfuscate` flag enables the obfuscation process, `--split-debug-info` specifies where to save symbol files, and `--extra-gen-snapshot-options=--save-obfuscation-map` specifies the location to save the obfuscation map file (JSON). This map allows you to understand the mapping between original and obfuscated names.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/deployment/obfuscate.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ flutter build <build-target> \\\n   --obfuscate \\\n   --split-debug-info=/<symbols-directory> \\\n   --extra-gen-snapshot-options=--save-obfuscation-map=/<obfuscation-map-file>\n```\n\n----------------------------------------\n\nTITLE: Replacing deprecated ColorScheme properties in Dart\nDESCRIPTION: This code snippet illustrates how to replace deprecated `ColorScheme` properties, namely `background`, `onBackground`, and `surfaceVariant`, with the new equivalents: `surface`, `onSurface`, and `surfaceContainerHighest`. This ensures the custom components continue to fetch correct color values after the Material Design 3 update.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/new-color-scheme-roles.md#_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nColor myColor1 = Theme.of(context).colorScheme.surface;\nColor myColor2 = Theme.of(context).colorScheme.onSurface;\nColor myColor3 = Theme.of(context).colorScheme.surfaceContainerHighest;\n\n```\n\n----------------------------------------\n\nTITLE: Applying Button Themes to a Subtree in Dart\nDESCRIPTION: This code snippet demonstrates how to apply button themes to a specific widget subtree using `TextButtonTheme`, `ElevatedButtonTheme`, or `OutlinedButtonTheme`. This allows for localized styling of buttons within a specific part of the application.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/buttons.md#_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nTextButtonTheme(\n  data: TextButtonThemeData(style: flatButtonStyle),\n  child: myWidgetSubtree,\n)\n```\n\n----------------------------------------\n\nTITLE: Implement Factory and Platform View - Objective-C\nDESCRIPTION: This Objective-C code snippet provides the implementation for the `FLNativeViewFactory` and `FLNativeView` classes, which are responsible for creating and managing the native iOS view. The factory's `createWithFrame` method creates an instance of the native view, while the native view's `view` method returns the underlying `UIView`.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/platform-integration/ios/platform-views.md#_snippet_6\n\nLANGUAGE: Objective-C\nCODE:\n```\n#import \"FLNativeView.h\"\n\n@implementation FLNativeViewFactory {\n  NSObject<FlutterBinaryMessenger>* _messenger;\n}\n\n- (instancetype)initWithMessenger:(NSObject<FlutterBinaryMessenger>*)messenger {\n  self = [super init];\n  if (self) {\n    _messenger = messenger;\n  }\n  return self;\n}\n\n- (NSObject<FlutterPlatformView>*)createWithFrame:(CGRect)frame\n                                   viewIdentifier:(int64_t)viewId\n                                        arguments:(id _Nullable)args {\n  return [[FLNativeView alloc] initWithFrame:frame\n                              viewIdentifier:viewId\n                                   arguments:args\n                             binaryMessenger:_messenger];\n}\n\n/// Implementing this method is only necessary when the `arguments` in `createWithFrame` is not `nil`.\n- (NSObject<FlutterMessageCodec>*)createArgsCodec {\n    return [FlutterStandardMessageCodec sharedInstance];\n}\n\n@end\n\n@implementation FLNativeView {\n   UIView *_view;\n}\n\n- (instancetype)initWithFrame:(CGRect)frame\n               viewIdentifier:(int64_t)viewId\n                    arguments:(id _Nullable)args\n              binaryMessenger:(NSObject<FlutterBinaryMessenger>*)messenger {\n  if (self = [super init]) {\n    _view = [[UIView alloc] init];\n  }\n  return self;\n}\n\n- (UIView*)view {\n  return _view;\n}\n\n@end\n```\n\n----------------------------------------\n\nTITLE: Declaring Package Dependency in pubspec.yaml\nDESCRIPTION: This code snippet shows how to declare a dependency on another Dart package (url_launcher) in the `pubspec.yaml` file. This allows the current package to use the Dart API exposed by `url_launcher`.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/packages-and-plugins/developing-packages.md#_snippet_35\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  url_launcher: ^5.0.0\n```\n\n----------------------------------------\n\nTITLE: Initializing App with Long List - Dart\nDESCRIPTION: This snippet creates a Flutter app that displays a long list of items using ListView.builder. It initializes the list with 10000 items and adds keys to the ListView and ListTile widgets for testing purposes. These keys allow the widget test to find and interact with the list and its items.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/testing/widget/scrolling.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\n\nvoid main() {\n  runApp(MyApp(items: List<String>.generate(10000, (i) => 'Item $i')));\n}\n\nclass MyApp extends StatelessWidget {\n  final List<String> items;\n\n  const MyApp({super.key, required this.items});\n\n  @override\n  Widget build(BuildContext context) {\n    const title = 'Long List';\n\n    return MaterialApp(\n      title: title,\n      home: Scaffold(\n        appBar: AppBar(title: const Text(title)),\n        body: ListView.builder(\n          // Add a key to the ListView. This makes it possible to\n          // find the list and scroll through it in the tests.\n          key: const Key('long_list'),\n          itemCount: items.length,\n          itemBuilder: (context, index) {\n            return ListTile(\n              title: Text(\n                items[index],\n                // Add a key to the Text widget for each item. This makes\n                // it possible to look for a particular item in the list\n                // and verify that the text is correct\n                key: Key('item_${index}_text'),\n              ),\n            );\n          },\n        ),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Navigation Route Map\nDESCRIPTION: This snippet demonstrates how to define a map of routes for navigation in a Flutter app. It uses CupertinoApp to define routes to different pages based on route names. Requires the flutter/cupertino package.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/uikit-devs.md#_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() {\n  runApp(\n    CupertinoApp(\n      home: const MyAppHome(), // becomes the route named '/'\n      routes: <String, WidgetBuilder>{\n        '/a': (context) => const MyPage(title: 'page A'),\n        '/b': (context) => const MyPage(title: 'page B'),\n        '/c': (context) => const MyPage(title: 'page C'),\n      },\n    ),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Flutter Module pubspec.yaml Dependency (YAML)\nDESCRIPTION: This code snippet illustrates how to declare a dependency on the `firebase_crashlytics` plugin in a Flutter module's `pubspec.yaml` file.  The `dependencies` section lists the plugins the module relies on.  The `^0.1.3` version constraint specifies a compatible version range for the plugin.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/add-to-app/android/plugin-setup.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n…\ndependencies:\n  …\n  firebase_crashlytics: ^0.1.3\n  …\n…\n```\n\n----------------------------------------\n\nTITLE: Build Widget with WidgetTester Dart\nDESCRIPTION: Builds the `MyWidget` inside the test environment using the `pumpWidget()` method provided by `WidgetTester`. This method builds and renders the provided widget.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/testing/widget/introduction.md#_snippet_3\n\nLANGUAGE: Dart\nCODE:\n```\nvoid main() {\n  testWidgets('MyWidget has a title and message', (tester) async {\n    // Create the widget by telling the tester to build it.\n    await tester.pumpWidget(const MyWidget(title: 'T', message: 'M'));\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Set background color to grey[50] - Dart\nDESCRIPTION: This snippet sets the background color to Colors.grey[50] in a light theme, reverting to the previous Material 2 behavior. This is a temporary workaround and not recommended for long-term compatibility.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/material-3-migration.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\ntheme: ThemeData(\n  colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),\n),\n```\n\n----------------------------------------\n\nTITLE: Complete Flutter HTTP Example\nDESCRIPTION: This Dart code demonstrates a complete Flutter application that fetches data from a REST API using the `http` package, displays it in a UI, and updates the data by sending a PUT request. The code defines an `Album` class to represent the data, uses `Future` to handle asynchronous operations, and uses `FutureBuilder` to display the data in the UI. It depends on the `http` package for making HTTP requests and `flutter/material.dart` for the UI.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/networking/update-data.md#_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nimport 'dart:async';\nimport 'dart:convert';\n\nimport 'package:flutter/material.dart';\nimport 'package:http/http.dart' as http;\n\nFuture<Album> fetchAlbum() async {\n  final response = await http.get(\n    Uri.parse('https://jsonplaceholder.typicode.com/albums/1'),\n  );\n\n  if (response.statusCode == 200) {\n    // If the server did return a 200 OK response,\n    // then parse the JSON.\n    return Album.fromJson(jsonDecode(response.body) as Map<String, dynamic>);\n  } else {\n    // If the server did not return a 200 OK response,\n    // then throw an exception.\n    throw Exception('Failed to load album');\n  }\n}\n\nFuture<Album> updateAlbum(String title) async {\n  final response = await http.put(\n    Uri.parse('https://jsonplaceholder.typicode.com/albums/1'),\n    headers: <String, String>{\n      'Content-Type': 'application/json; charset=UTF-8',\n    },\n    body: jsonEncode(<String, String>{'title': title}),\n  );\n\n  if (response.statusCode == 200) {\n    // If the server did return a 200 OK response,\n    // then parse the JSON.\n    return Album.fromJson(jsonDecode(response.body) as Map<String, dynamic>);\n  } else {\n    // If the server did not return a 200 OK response,\n    // then throw an exception.\n    throw Exception('Failed to update album.');\n  }\n}\n\nclass Album {\n  final int id;\n  final String title;\n\n  const Album({required this.id, required this.title});\n\n  factory Album.fromJson(Map<String, dynamic> json) {\n    return switch (json) {\n      {'id': int id, 'title': String title} => Album(id: id, title: title),\n      _ => throw const FormatException('Failed to load album.'),\n    };\n  }\n}\n\nvoid main() {\n  runApp(const MyApp());\n}\n\nclass MyApp extends StatefulWidget {\n  const MyApp({super.key});\n\n  @override\n  State<MyApp> createState() {\n    return _MyAppState();\n  }\n}\n\nclass _MyAppState extends State<MyApp> {\n  final TextEditingController _controller = TextEditingController();\n  late Future<Album> _futureAlbum;\n\n  @override\n  void initState() {\n    super.initState();\n    _futureAlbum = fetchAlbum();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: 'Update Data Example',\n      theme: ThemeData(\n        colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),\n      ),\n      home: Scaffold(\n        appBar: AppBar(title: const Text('Update Data Example')),\n        body: Container(\n          alignment: Alignment.center,\n          padding: const EdgeInsets.all(8),\n          child: FutureBuilder<Album>(\n            future: _futureAlbum,\n            builder: (context, snapshot) {\n              if (snapshot.connectionState == ConnectionState.done) {\n                if (snapshot.hasData) {\n                  return Column(\n                    mainAxisAlignment: MainAxisAlignment.center,\n                    children: <Widget>[\n                      Text(snapshot.data!.title),\n                      TextField(\n                        controller: _controller,\n                        decoration: const InputDecoration(\n                          hintText: 'Enter Title',\n                        ),\n                      ),\n                      ElevatedButton(\n                        onPressed: () {\n                          setState(() {\n                            _futureAlbum = updateAlbum(_controller.text);\n                          });\n                        },\n                        child: const Text('Update Data'),\n                      ),\n                    ],\n                  );\n                } else if (snapshot.hasError) {\n                  return Text('${snapshot.error}');\n                }\n              }\n\n              return const CircularProgressIndicator();\n            },\n          ),\n        ),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Set Initial Route in Cached FlutterEngine - Kotlin\nDESCRIPTION: This Kotlin code snippet shows how to set the initial route for a cached FlutterEngine within the `onCreate` method of an `Application` class. It instantiates a `FlutterEngine`, sets the initial route using `navigationChannel.setInitialRoute`, executes the Dart entrypoint to pre-warm the engine, and caches the engine for later use by FlutterActivity or FlutterFragment. The route 'your/route/here' is set as the initial route.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/add-to-app/android/_initial-route-cached-engine.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nclass MyApplication : Application() {\n  lateinit var flutterEngine : FlutterEngine\n  override fun onCreate() {\n    super.onCreate()\n    // Instantiate a FlutterEngine.\n    flutterEngine = FlutterEngine(this)\n    // Configure an initial route.\n    flutterEngine.navigationChannel.setInitialRoute(\"your/route/here\");\n    // Start executing Dart code to pre-warm the FlutterEngine.\n    flutterEngine.dartExecutor.executeDartEntrypoint(\n      DartExecutor.DartEntrypoint.createDefault()\n    )\n    // Cache the FlutterEngine to be used by FlutterActivity or FlutterFragment.\n    FlutterEngineCache\n      .getInstance()\n      .put(\"my_engine_id\", flutterEngine)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: WidgetsBinding: Migrate to deferFirstFrame/allowFirstFrame (Dart)\nDESCRIPTION: This code snippet illustrates the migration to `deferFirstFrame` and `allowFirstFrame` from the deprecated methods. These new methods provide an option to delay rendering the first frame, which is useful for widgets that need to obtain initialization data asynchronously.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/1-22-deprecations.md#_snippet_13\n\nLANGUAGE: dart\nCODE:\n```\nfinal WidgetsBinding binding = WidgetsBinding.instance;\nbinding.deferFirstFrame();\nbinding.allowFirstFrame();\n```\n\n----------------------------------------\n\nTITLE: Launch FlutterActivity with Default Intent (Jetpack Compose)\nDESCRIPTION: This Kotlin code snippet shows how to launch a `FlutterActivity` using `createDefaultIntent` within a Jetpack Compose button's `onClick` listener. It starts the `FlutterActivity` with the default Dart entrypoint and initial route.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/add-to-app/android/add-flutter-screen.md#_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nMyButton(onClick = {\n    startActivity(\n        FlutterActivity.createDefaultIntent(this)\n    )\n})\n\n@Composable\nfun MyButton(onClick: () -> Unit) {\n    Button(onClick = onClick) {\n        Text(\"Launch Flutter!\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating app version in pubspec.yaml for Microsoft Store\nDESCRIPTION: This snippet demonstrates how to update the version number of a Flutter application in the `pubspec.yaml` file. The version number is used for packaging and publishing to the Microsoft Store, and the last number of the version should remain zero for all releases.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/deployment/windows.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\nversion: 1.0.0+1\n```\n\n----------------------------------------\n\nTITLE: Overriding Theme with ThemeData in Flutter\nDESCRIPTION: This snippet demonstrates overriding the app's theme for a specific widget using the `Theme` widget and a unique `ThemeData` instance. This allows a part of the application to have a different theme without affecting the rest.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/design/themes.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nTheme(\n  // Create a unique theme with `ThemeData`.\n  data: ThemeData(colorScheme: ColorScheme.fromSeed(seedColor: Colors.pink)),\n  child: FloatingActionButton(onPressed: () {}, child: const Icon(Icons.add)),\n);\n```\n\n----------------------------------------\n\nTITLE: Add Flutter build script phase (Bash)\nDESCRIPTION: This script is added as a new Run Script Phase in Xcode's Build Phases for the App Clip target. It ensures that the Flutter Dart code is compiled when building the App Clip.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/platform-integration/ios/ios-app-clip.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n/bin/sh \"$FLUTTER_ROOT/packages/flutter_tools/bin/xcode_backend.sh\" build\n```\n\n----------------------------------------\n\nTITLE: Awaiting Navigation Results in Flutter\nDESCRIPTION: This snippet shows how to await the result of a navigation action. By using `await Navigator.of(context).pushNamed()`, the code waits for the pushed route to be popped, and then retrieves the result that was passed back.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/xamarin-forms-devs.md#_snippet_19\n\nLANGUAGE: dart\nCODE:\n```\nObject? coordinates = await Navigator.of(context).pushNamed('/location');\n```\n\n----------------------------------------\n\nTITLE: Navigation Routes Definition in Flutter\nDESCRIPTION: This snippet shows how to define named routes in a Flutter app using the `routes` property of the `CupertinoApp` widget. It associates a route name (`detailsPageRouteName`) with a widget (`DetailsPage`) that will be built when navigating to that route. It defines `detailsPageRouteName` as a constant for reusability.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/swiftui-devs.md#_snippet_23\n\nLANGUAGE: Dart\nCODE:\n```\n// Defines the route name as a constant\n// so that it's reusable.\nconst detailsPageRouteName = '/details';\n\nclass App extends StatelessWidget {\n  const App({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return CupertinoApp(\n      home: const HomePage(),\n      // The [routes] property defines the available named routes\n      // and the widgets to build when navigating to those routes.\n      routes: {detailsPageRouteName: (context) => const DetailsPage()},\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Migrate to textTheme with colorScheme.onSecondary (Flutter/Dart)\nDESCRIPTION: Demonstrates replacing accentTextTheme with textTheme and colorScheme.onSecondary for getting a contrasting text style. The headline1 style is copied and its color set to onSecondary.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/theme-data-accent-properties.md#_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nfinal ThemeData theme = Theme.of(context);\nTextStyle style = theme.textTheme.headline1.copyWith(\n  color: theme.colorScheme.onSecondary,\n)\n```\n\n----------------------------------------\n\nTITLE: Using NavigatorPopHandler for Nested Navigators - Dart\nDESCRIPTION: This snippet demonstrates how to use `NavigatorPopHandler` to handle back gestures in nested `Navigator` widgets. It simplifies the process compared to using `WillPopScope`.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/android-predictive-back.md#_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nNavigatorPopHandler(\n  onPop: () => _nestedNavigatorKey.currentState!.pop(),\n  child: Navigator(\n    key: _nestedNavigatorKey,\n    …\n  ),\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Item to Customer Cart in Dart\nDESCRIPTION: This snippet defines the `_itemDroppedOnCustomerCart` method, which adds a dropped item to the customer's cart and updates the UI. It takes the item and customer as input, updates the customer's items list, and calls `setState()` to trigger a rebuild of the widget.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/effects/drag-a-widget.md#_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nvoid _itemDroppedOnCustomerCart({\n  required Item item,\n  required Customer customer,\n}) {\n  setState(() {\n    customer.items.add(item);\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Dogs from the Database\nDESCRIPTION: This snippet defines an asynchronous function `dogs` that retrieves all `Dog` objects from the 'dogs' table in the SQLite database.  It queries the database for all entries in the 'dogs' table, converts the resulting list of maps into a list of `Dog` objects, and returns the list.  It uses a for loop with map destructuring to create Dog objects from the retrieved maps.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/persistence/sqlite.md#_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\n// A method that retrieves all the dogs from the dogs table.\nFuture<List<Dog>> dogs() async {\n  // Get a reference to the database.\n  final db = await database;\n\n  // Query the table for all the dogs.\n  final List<Map<String, Object?>> dogMaps = await db.query('dogs');\n\n  // Convert the list of each dog's fields into a list of `Dog` objects.\n  return [\n    for (final {'id': id as int, 'name': name as String, 'age': age as int}\n        in dogMaps)\n      Dog(id: id, name: name, age: age),\n  ];\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Data with Isolates in Flutter\nDESCRIPTION: This code shows how to load data in a separate Isolate in Flutter, allowing for CPU-intensive tasks to run without blocking the main thread. It demonstrates the use of `ReceivePort` and `SendPort` for communication between the main thread and the Isolate. The isolate fetches and parses JSON data from a URL.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/android-devs.md#_snippet_18\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> loadData() async {\n  ReceivePort receivePort = ReceivePort();\n  await Isolate.spawn(dataLoader, receivePort.sendPort);\n\n  // The 'echo' isolate sends its SendPort as the first message.\n  SendPort sendPort = await receivePort.first as SendPort;\n\n  final msg =\n      await sendReceive(\n            sendPort,\n            'https://jsonplaceholder.typicode.com/posts',\n          )\n          as List<Object?>;\n\n  setState(() {\n    widgets = msg;\n  });\n}\n\n// The entry point for the isolate.\nstatic Future<void> dataLoader(SendPort sendPort) async {\n  // Open the ReceivePort for incoming messages.\n  ReceivePort port = ReceivePort();\n\n  // Notify any other isolates what port this isolate listens to.\n  sendPort.send(port.sendPort);\n\n  await for (var msg in port) {\n    String data = msg[0] as String;\n    SendPort replyTo = msg[1] as SendPort;\n\n    String dataURL = data;\n    http.Response response = await http.get(Uri.parse(dataURL));\n    // Lots of JSON to parse\n    replyTo.send(jsonDecode(response.body));\n  }\n}\n\nFuture<Object?> sendReceive(SendPort port, Object? msg) {\n  ReceivePort response = ReceivePort();\n  port.send([msg, response.sendPort]);\n  return response.first;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Curve to AnimatedContainer in Flutter\nDESCRIPTION: This code snippet demonstrates how to add an animation curve to an AnimatedContainer widget in Flutter. It shows how to use the `curve` property of the `AnimatedContainer` to control the rate of change for the animated properties. The `Curves.easeInOutBack` curve is used as an example to create a more visually appealing animation.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/codelabs/implicit-animations.md#_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\n  SizedBox(\n    width: 128,\n    height: 128,\n    child: AnimatedContainer(\n      margin: EdgeInsets.all(margin),\n      decoration: BoxDecoration(\n        color: color,\n        borderRadius: BorderRadius.circular(borderRadius),\n      ),\n      duration: _duration,\n+     curve: Curves.easeInOutBack,\n    ),\n  ),\n```\n\n----------------------------------------\n\nTITLE: Update app version in pubspec.yaml (Flutter)\nDESCRIPTION: This code snippet demonstrates how to update the version number of a Flutter application within the `pubspec.yaml` file. The version number consists of three numbers separated by dots (e.g., 1.0.0), followed by an optional build number separated by a `+` sign. Updating the build number is crucial for tracking different releases on App Store Connect.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/deployment/ios.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nversion: 1.0.0+1\n```\n\n----------------------------------------\n\nTITLE: FloatingActionButton: Code After Migration (floatingActionButtonTheme)\nDESCRIPTION: Shows the recommended way to configure FloatingActionButton's foreground color using ThemeData's floatingActionButtonTheme. This approach replaces the deprecated accentIconTheme.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/fab-theme-data-accent-properties.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nMaterialApp(\n  theme: ThemeData(\n    floatingActionButtonTheme: FloatingActionButtonThemeData(\n      foregroundColor: Colors.red,\n    ),\n  ),\n)\n```\n\n----------------------------------------\n\nTITLE: Navigator Push Route in Flutter\nDESCRIPTION: This snippet demonstrates how to navigate to a new screen using the Navigator in Flutter. It utilizes `Navigator.of(context).push()` with a `MaterialPageRoute` to define the route and transition animation for Material Design.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/navigation/index.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nchild: const Text('Open second screen'),\nonPressed: () {\n  Navigator.of(context).push(\n    MaterialPageRoute(builder: (context) => const SecondScreen()),\n  );\n},\n```\n\n----------------------------------------\n\nTITLE: Creating a Tween in Dart\nDESCRIPTION: This snippet creates a `Tween` that interpolates between -200.0 and 0.0. A `Tween` is a stateless object that defines a mapping from an input range to an output range. The `begin` and `end` parameters define the start and end values of the interpolation.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/animations/index.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\ntween = Tween<double>(begin: -200, end: 0);\n```\n\n----------------------------------------\n\nTITLE: RawScrollbar & subclasses updates Migration (Dart)\nDESCRIPTION: Demonstrates how to migrate code that uses the deprecated `isAlwaysShown` and `hoverThickness` properties of `RawScrollbar`, `Scrollbar`, `ScrollbarThemeData` and `CupertinoScrollbar`. `isAlwaysShown` is replaced by `thumbVisibility` and `hoverThickness` by `ScrollbarThemeData.thickness` and `MaterialStateProperty`. The code shows the before and after migration examples using Dart.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/3-10-deprecations.md#_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nvar rawScrollbar = RawScrollbar(\n  isAlwaysShown: true,\n);\nvar scrollbar = Scrollbar(\n  isAlwaysShown: true,\n  hoverThickness: 15.0,\n);\nvar cupertinoScrollbar = CupertinoScrollbar(\n  isAlwaysShown: true,\n);\nvar scrollbarThemeData = ScrollbarThemeData(\n  isAlwaysShown: true,\n);\n```\n\nLANGUAGE: dart\nCODE:\n```\nvar rawScrollbar = RawScrollbar(\n  thumbVisibility: true,\n);\nvar scrollbar = Scrollbar(\n  thumbVisibility: true,\n);\nvar cupertinoScrollbar = CupertinoScrollbar(\n  thumbVisibility: true,\n);\nvar scrollbarThemeData = ScrollbarThemeData(\n  thumbVisibility: true,\n  thickness: MaterialStateProperty.resolveWith((Set<MaterialState> states) {\n    return states.contains(MaterialState.hovered) ? null : 15.0;\n  }),\n);\n```\n\n----------------------------------------\n\nTITLE: LinearProgressIndicator with Material 3 Design (Dart)\nDESCRIPTION: This code snippet demonstrates how to opt into the updated Material 3 design for the LinearProgressIndicator by setting the `year2023` flag to `false`.  This will enable the new visual style, including gaps between active and inactive tracks, a stop indicator, and rounded corners. The `value` parameter sets the current progress of the indicator.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/updated-material-3-progress-indicators.md#_snippet_0\n\nLANGUAGE: Dart\nCODE:\n```\nLinearProgressIndicator(\n  year2023: false,\n  value: 0.5,\n),\n```\n\n----------------------------------------\n\nTITLE: Updating a Dog in the Database\nDESCRIPTION: This snippet defines an `updateDog` function that updates a `Dog` object in the 'dogs' table in the SQLite database. It retrieves a reference to the database, converts the `Dog` object to a map using the `toMap()` method, and then uses the `update()` method of the database to update the corresponding row in the 'dogs' table based on the `id`. The `where` and `whereArgs` parameters are used to prevent SQL injection.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/persistence/sqlite.md#_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> updateDog(Dog dog) async {\n  // Get a reference to the database.\n  final db = await database;\n\n  // Update the given Dog.\n  await db.update(\n    'dogs',\n    dog.toMap(),\n    // Ensure that the Dog has a matching id.\n    where: 'id = ?',\n    // Pass the Dog's id as a whereArg to prevent SQL injection.\n    whereArgs: [dog.id],\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Disable Service Worker in Flutter Web Build\nDESCRIPTION: This console command disables the generation of a service worker during a Flutter web build. It uses the `--pwa-strategy` flag set to `none`.  Disabling the default service worker allows developers to use their own custom service worker implementations or third-party tools.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/platform-integration/web/faq.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nflutter build web --pwa-strategy=none\n```\n\n----------------------------------------\n\nTITLE: Building Animated 'Get Started' Button - Dart\nDESCRIPTION: Builds an animated 'Get Started' button that appears with a springy effect using an elasticOut curve.  The animation controls the opacity and scale of the button using AnimatedBuilder. The animationPercent is clamped to ensure the opacity remains within the range of 0.0 to 1.0.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/effects/staggered-menu-animation.md#_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nWidget _buildGetStartedButton() {\n  return SizedBox(\n    width: double.infinity,\n    child: Padding(\n      padding: const EdgeInsets.all(24),\n      child: AnimatedBuilder(\n        animation: _staggeredController,\n        builder: (context, child) {\n          final animationPercent = Curves.elasticOut.transform(\n            _buttonInterval.transform(_staggeredController.value),\n          );\n          final opacity = animationPercent.clamp(0.0, 1.0);\n          final scale = (animationPercent * 0.5) + 0.5;\n\n          return Opacity(\n            opacity: opacity,\n            child: Transform.scale(scale: scale, child: child),\n          );\n        },\n        child: ElevatedButton(\n          style: ElevatedButton.styleFrom(\n            shape: const StadiumBorder(),\n            backgroundColor: Colors.blue,\n            padding: const EdgeInsets.symmetric(horizontal: 48, vertical: 14),\n          ),\n          onPressed: () {},\n          child: const Text(\n            'Get Started',\n            style: TextStyle(color: Colors.white, fontSize: 22),\n          ),\n        ),\n      ),\n    ),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Scaffold in Flutter\nDESCRIPTION: This snippet demonstrates how to create a basic Scaffold widget, which provides the visual structure for a Material Design app. It includes an AppBar and a body containing the SnackBarPage widget.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/design/snackbars.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nreturn MaterialApp(\n  title: 'SnackBar Demo',\n  home: Scaffold(\n    appBar: AppBar(title: const Text('SnackBar Demo')),\n    body: const SnackBarPage(),\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Build Flutter Web App (Default Build Mode)\nDESCRIPTION: This command builds a Flutter web application for release using the default build mode. The default build mode uses the `canvaskit` renderer. The `--wasm` flag is not specified, so the default build is used.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/platform-integration/web/renderers.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nflutter build web\n```\n\n----------------------------------------\n\nTITLE: Migrating deprecated background color role in Dart\nDESCRIPTION: This code shows how to migrate away from the deprecated `background` color role to using `surface` in a `MaterialApp`'s `ThemeData`. It demonstrates replacing `background` with `surface`, `onBackground` with `onSurface`, and `surfaceVariant` with `surfaceContainerHighest`.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/new-color-scheme-roles.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nfinal ColorScheme colorScheme = ColorScheme();\nMaterialApp(\n  theme: ThemeData(\n    //...\n    colorScheme: colorScheme.copyWith(\n      background: myColor1,\n      onBackground: myColor2,\n      surfaceVariant: myColor3,\n    ),\n  ),\n  //...\n)\n\n```\n\n----------------------------------------\n\nTITLE: CircularProgressIndicator with Material 3 Design (Dart)\nDESCRIPTION: This code snippet demonstrates how to opt into the updated Material 3 design for the CircularProgressIndicator by setting the `year2023` flag to `false`.  This will enable the new visual style, including a track gap and rounded stroke cap. The `value` parameter sets the current progress of the indicator.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/updated-material-3-progress-indicators.md#_snippet_2\n\nLANGUAGE: Dart\nCODE:\n```\nCircularProgressIndicator(\n  year2023: false,\n  value: 0.5,\n),\n```\n\n----------------------------------------\n\nTITLE: Using Path URL Strategy in Flutter\nDESCRIPTION: This Dart snippet shows how to use the `usePathUrlStrategy` function from the `flutter_web_plugins` library to configure Flutter to use the path URL strategy. This function must be called before `runApp`. It imports the `url_strategy.dart` library.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/navigation/url-strategies.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter_web_plugins/url_strategy.dart';\n\nvoid main() {\n  usePathUrlStrategy();\n  runApp(ExampleApp());\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating Color Calculations with Color Spaces\nDESCRIPTION: This example demonstrates how to migrate color calculations to account for different color spaces. It uses the `withValues` method to convert colors to a common color space (`extendedSRGB`) before performing calculations, preventing subtle unexpected results due to differing color spaces. It showcases calculating the ratio of red components of two colors.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/wide-gamut-framework.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\n// Before\ndouble redRatio(Color x, Color y) => x.red / y.red;\n\n// After\ndouble redRatio(Color x, Color y) {\n  final xPrime = x.withValues(colorSpace: ColorSpace.extendedSRGB);\n  final yPrime = y.withValues(colorSpace: ColorSpace.extendedSRGB);\n  return xPrime.r / yPrime.r;\n}\n```\n\n----------------------------------------\n\nTITLE: Send Data to WebSocket Server in Flutter\nDESCRIPTION: Sends data to the WebSocket server using the `channel.sink.add()` method. The `sink` property of the `WebSocketChannel` provides a `StreamSink` for sending messages to the server. The message 'Hello!' is sent to the server.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/networking/web-sockets.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nchannel.sink.add('Hello!');\n```\n\n----------------------------------------\n\nTITLE: Fastfile configuration to upload to Play Store\nDESCRIPTION: This plaintext snippet configures the `upload_to_play_store` action in a Fastfile for Android. It reads the JSON key data from an environment variable, ensuring credentials aren't directly in the file.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/deployment/cd.md#_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nupload_to_play_store(\n  ...\n  json_key_data: ENV['<variable name>']\n)\n```\n\n----------------------------------------\n\nTITLE: Displaying Progress with ProgressIndicator in Flutter (Dart)\nDESCRIPTION: This example demonstrates how to use a `ProgressIndicator` widget in Flutter to display progress during a long-running task. It shows how to conditionally render the progress indicator based on a boolean flag and update the UI using `setState`.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/android-devs.md#_snippet_22\n\nLANGUAGE: Dart\nCODE:\n```\nimport 'dart:convert';\n\nimport 'package:flutter/material.dart';\nimport 'package:http/http.dart' as http;\n\nvoid main() {\n  runApp(const SampleApp());\n}\n\nclass SampleApp extends StatelessWidget {\n  const SampleApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: 'Sample App',\n      theme: ThemeData(\n        colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),\n      ),\n      home: const SampleAppPage(),\n    );\n  }\n}\n\nclass SampleAppPage extends StatefulWidget {\n  const SampleAppPage({super.key});\n\n  @override\n  State<SampleAppPage> createState() => _SampleAppPageState();\n}\n\nclass _SampleAppPageState extends State<SampleAppPage> {\n  List<Map<String, Object?>> widgets = [];\n\n  @override\n  void initState() {\n    super.initState();\n    loadData();\n  }\n\n  Widget getBody() {\n    bool showLoadingDialog = widgets.isEmpty;\n    if (showLoadingDialog) {\n      return getProgressDialog();\n    } else {\n      return getListView();\n    }\n  }\n\n  Widget getProgressDialog() {\n    return const Center(child: CircularProgressIndicator());\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: const Text('Sample App')),\n      body: getBody(),\n    );\n  }\n\n  ListView getListView() {\n    return ListView.builder(\n      itemCount: widgets.length,\n      itemBuilder: (context, position) {\n        return getRow(position);\n      },\n    );\n  }\n\n  Widget getRow(int i) {\n    return Padding(\n      padding: const EdgeInsets.all(10),\n      child: Text(\"Row ${widgets[i][\"title\"]}\"),\n    );\n  }\n\n  Future<void> loadData() async {\n    final dataURL = Uri.parse('https://jsonplaceholder.typicode.com/posts');\n    final response = await http.get(dataURL);\n    setState(() {\n      widgets =\n          (jsonDecode(response.body) as List).cast<Map<String, Object?>>();\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Publish App to App Store Connect\nDESCRIPTION: Publishes the packaged app to App Store Connect using the `app-store-connect publish` command. This requires the path to the `.pkg` file.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/deployment/macos.md#_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\napp-store-connect publish \\\n    --path \"$PACKAGE_NAME\"\n```\n\n----------------------------------------\n\nTITLE: Using shared_preferences in a background isolate (Dart)\nDESCRIPTION: This code snippet demonstrates how to use the `shared_preferences` package within a background isolate in Flutter. It initializes the `BackgroundIsolateBinaryMessenger` and then retrieves a boolean value from shared preferences. The main isolate spawns the background isolate, passing a `RootIsolateToken` for initialization.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/perf/isolates.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nimport 'dart:isolate';\n\nimport 'package:flutter/services.dart';\nimport 'package:shared_preferences/shared_preferences.dart';\n\nvoid main() {\n  // Identify the root isolate to pass to the background isolate.\n  RootIsolateToken rootIsolateToken = RootIsolateToken.instance!;\n  Isolate.spawn(_isolateMain, rootIsolateToken);\n}\n\nFuture<void> _isolateMain(RootIsolateToken rootIsolateToken) async {\n  // Register the background isolate with the root isolate.\n  BackgroundIsolateBinaryMessenger.ensureInitialized(rootIsolateToken);\n\n  // You can now use the shared_preferences plugin.\n  SharedPreferences sharedPreferences = await SharedPreferences.getInstance();\n\n  print(sharedPreferences.getBool('isDebug'));\n}\n```\n\n----------------------------------------\n\nTITLE: Creating ButtonWithText Widget in Flutter\nDESCRIPTION: Defines a `ButtonWithText` widget in Flutter that takes a color, icon, and label as input. It builds a `Column` widget containing an `Icon` and a styled `Text` widget with padding. The widget is designed for creating reusable button-like components.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/layout/tutorial.md#_snippet_5\n\nLANGUAGE: Dart\nCODE:\n```\nclass ButtonSection extends StatelessWidget {\n  const ButtonSection({super.key});\n  // ···\n}\n\nclass ButtonWithText extends StatelessWidget {\n  const ButtonWithText({\n    super.key,\n    required this.color,\n    required this.icon,\n    required this.label,\n  });\n\n  final Color color;\n  final IconData icon;\n  final String label;\n\n  @override\n  Widget build(BuildContext context) {\n    return Column(\n      mainAxisSize: MainAxisSize.min,\n      mainAxisAlignment: MainAxisAlignment.center,\n      children: [\n        Icon(icon, color: color),\n        Padding(\n          padding: const EdgeInsets.only(top: 8),\n          child: Text(\n            label,\n            style: TextStyle(\n              fontSize: 12,\n              fontWeight: FontWeight.w400,\n              color: color,\n            ),\n          ),\n        ),\n      ],\n    );\n  }\n\n```\n\n----------------------------------------\n\nTITLE: Adding Web Support to an Existing Flutter Project\nDESCRIPTION: This command adds web support to an existing Flutter project. It generates the `web/` directory and necessary web assets to bootstrap and run the Flutter app in a browser environment. Ensure you run this command from the root of your Flutter project.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/platform-integration/web/building.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ flutter create . --platforms web\n```\n\n----------------------------------------\n\nTITLE: Pushing Named Routes for Navigation in Flutter\nDESCRIPTION: This snippet shows how to navigate to a specific route in Flutter by pushing its name onto the `Navigator` stack using `Navigator.of(context).pushNamed()`.  This allows programmatic navigation between different screens in the application.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/xamarin-forms-devs.md#_snippet_18\n\nLANGUAGE: dart\nCODE:\n```\nNavigator.of(context).pushNamed('/b');\n```\n\n----------------------------------------\n\nTITLE: Verifying Flutter and Dart Command Paths (Shell)\nDESCRIPTION: This snippet uses the `which` command to determine the paths of the `flutter` and `dart` executables. It helps verify if both commands originate from the same directory, indicating compatibility between the Flutter and Dart SDKs. The expected output shows the full paths of the commands.\nSOURCE: https://github.com/flutter/website/blob/main/src/_includes/docs/dart-tool.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n$ which flutter dart\n/path-to-flutter-sdk/bin/flutter\n/usr/local/bin/dart\n```\n\n----------------------------------------\n\nTITLE: Flutter App Initialization in main.dart\nDESCRIPTION: This Dart code snippet shows the default `main` method in a Flutter app, which initializes and runs the app. It uses the `runApp` function to start the Flutter application with the `MyApp` widget. This is where the Flutter app's execution begins.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/fundamentals/dart.md#_snippet_1\n\nLANGUAGE: Dart\nCODE:\n```\nvoid main() {\n  runApp(const MyApp());\n}\n```\n\n----------------------------------------\n\nTITLE: Subclass StatefulWidget in Flutter\nDESCRIPTION: This code snippet demonstrates how to create a custom stateful widget in Flutter by subclassing StatefulWidget. The createState() method is overridden to return an instance of the widget's State class, which is responsible for managing the widget's state and building its UI.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/interactivity/index.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nclass FavoriteWidget extends StatefulWidget {\n  const FavoriteWidget({super.key});\n\n  @override\n  State<FavoriteWidget> createState() => _FavoriteWidgetState();\n}\n```\n\n----------------------------------------\n\nTITLE: TextButton with foreground and disabled foreground color overrides using styleFrom() in Dart\nDESCRIPTION: This snippet demonstrates how to override both the foreground and disabledForegroundColor colors of a TextButton using the styleFrom() method. It sets the foreground color to blue and the disabled foreground color to red.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/buttons.md#_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nTextButton(\n  style: TextButton.styleFrom(\n    foregroundColor: Colors.blue,\n    disabledForegroundColor: Colors.red,\n  ),\n  onPressed: null,\n  child: Text('TextButton'),\n)\n```\n\n----------------------------------------\n\nTITLE: Drawing with a Shader - Flutter Canvas API\nDESCRIPTION: This snippet shows how to draw a rectangle with a shader applied using the Flutter Canvas API. The first example draws a filled rectangle, and the second example draws a stroked rectangle with the shader applied only to the stroke. It demonstrates the usage of `Paint.shader` and `PaintingStyle.stroke`.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/design/graphics/fragment-shaders.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nvoid paint(Canvas canvas, Size size, FragmentShader shader) {\n  // Draws a rectangle with the shader used as a color source.\n  canvas.drawRect(\n    Rect.fromLTWH(0, 0, size.width, size.height),\n    Paint()..shader = shader,\n  );\n\n  // Draws a stroked rectangle with the shader only applied to the fragments\n  // that lie within the stroke.\n  canvas.drawRect(\n    Rect.fromLTWH(0, 0, size.width, size.height),\n    Paint()\n      ..style = PaintingStyle.stroke\n      ..shader = shader,\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implicit animation with AnimatedRotation - Flutter/Dart\nDESCRIPTION: This snippet demonstrates implicit animation using the `AnimatedRotation` widget in Flutter. It rotates a button when tapped.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/swiftui-devs.md#_snippet_20\n\nLANGUAGE: Dart\nCODE:\n```\nAnimatedRotation(\n  duration: const Duration(seconds: 1),\n  turns: turns,\n  curve: Curves.easeIn,\n  TextButton(\n    onPressed: () {\n      setState(() {\n        turns += .125;\n      });\n    },\n    const Text('Tap me!'),\n  ),\n),\n```\n\n----------------------------------------\n\nTITLE: Integration Test Driver in Dart\nDESCRIPTION: This Dart code creates an integration test driver.  It imports the `integration_test_driver.dart` library and calls the `integrationDriver()` function within the main function. This is the entry point for running integration tests.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/testing/integration-tests/index.md#_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:integration_test/integration_test_driver.dart';\n\nFuture<void> main() => integrationDriver();\n```\n\n----------------------------------------\n\nTITLE: Migrating from WillPopScope to PopScope - Dart\nDESCRIPTION: This snippet illustrates the direct replacement of `WillPopScope` with `PopScope`. Logic previously in `onWillPop` is now set to `canPop` at build time. It demonstrates setting the `canPop` property based on a condition.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/android-predictive-back.md#_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nPopScope(\n  canPop: _myCondition,\n  child: ...\n),\n```\n\n----------------------------------------\n\nTITLE: Implementing CustomPainter for Drawing in Flutter (Dart)\nDESCRIPTION: Illustrates the CustomPainter implementation for drawing on a Canvas in Flutter. The SignaturePainter class extends CustomPainter and overrides the paint method to draw lines between a list of points.  The shouldRepaint method determines if the painter needs to be redrawn.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/compose-devs.md#_snippet_17\n\nLANGUAGE: dart\nCODE:\n```\nclass SignaturePainter extends CustomPainter {\n  SignaturePainter(this.points);\n\n  final List<Offset?> points;\n\n  @override\n  void paint(Canvas canvas, Size size) {\n    final Paint paint = Paint()\n      ..color = Colors.black\n      ..strokeCap = StrokeCap.round\n      ..strokeWidth = 5;\n    for (int i = 0; i < points.length - 1; i++) {\n      if (points[i] != null && points[i + 1] != null) {\n        canvas.drawLine(points[i]!, points[i + 1]!, paint);\n      }\n    }\n  }\n\n  @override\n  bool shouldRepaint(SignaturePainter oldDelegate) =>\n      oldDelegate.points != points;\n}\n```\n\n----------------------------------------\n\nTITLE: Flutter Staggered Menu Animation in Dart\nDESCRIPTION: This code implements a staggered menu animation in Flutter.  It utilizes `AnimationController` to control the animation, `Interval` to define time ranges for different elements, and `AnimatedBuilder` to update the UI based on the animation's progress. The menu slides in from the right with a staggered effect, and a 'Get started' button animates with a scaling and opacity effect.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/effects/staggered-menu-animation.md#_snippet_7\n\nLANGUAGE: Dart\nCODE:\n```\nimport 'package:flutter/material.dart';\n\nvoid main() {\n  runApp(\n    const MaterialApp(\n      home: ExampleStaggeredAnimations(),\n      debugShowCheckedModeBanner: false,\n    ),\n  );\n}\n\nclass ExampleStaggeredAnimations extends StatefulWidget {\n  const ExampleStaggeredAnimations({super.key});\n\n  @override\n  State<ExampleStaggeredAnimations> createState() =>\n      _ExampleStaggeredAnimationsState();\n}\n\nclass _ExampleStaggeredAnimationsState extends State<ExampleStaggeredAnimations>\n    with SingleTickerProviderStateMixin {\n  late AnimationController _drawerSlideController;\n\n  @override\n  void initState() {\n    super.initState();\n\n    _drawerSlideController = AnimationController(\n      vsync: this,\n      duration: const Duration(milliseconds: 150),\n    );\n  }\n\n  @override\n  void dispose() {\n    _drawerSlideController.dispose();\n    super.dispose();\n  }\n\n  bool _isDrawerOpen() {\n    return _drawerSlideController.value == 1.0;\n  }\n\n  bool _isDrawerOpening() {\n    return _drawerSlideController.status == AnimationStatus.forward;\n  }\n\n  bool _isDrawerClosed() {\n    return _drawerSlideController.value == 0.0;\n  }\n\n  void _toggleDrawer() {\n    if (_isDrawerOpen() || _isDrawerOpening()) {\n      _drawerSlideController.reverse();\n    } else {\n      _drawerSlideController.forward();\n    }\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      backgroundColor: Colors.white,\n      appBar: _buildAppBar(),\n      body: Stack(children: [_buildContent(), _buildDrawer()]),\n    );\n  }\n\n  PreferredSizeWidget _buildAppBar() {\n    return AppBar(\n      title: const Text('Flutter Menu', style: TextStyle(color: Colors.black)),\n      backgroundColor: Colors.transparent,\n      elevation: 0.0,\n      automaticallyImplyLeading: false,\n      actions: [\n        AnimatedBuilder(\n          animation: _drawerSlideController,\n          builder: (context, child) {\n            return IconButton(\n              onPressed: _toggleDrawer,\n              icon:\n                  _isDrawerOpen() || _isDrawerOpening()\n                      ? const Icon(Icons.clear, color: Colors.black)\n                      : const Icon(Icons.menu, color: Colors.black),\n            );\n          },\n        ),\n      ],\n    );\n  }\n\n  Widget _buildContent() {\n    // Put page content here.\n    return const SizedBox();\n  }\n\n  Widget _buildDrawer() {\n    return AnimatedBuilder(\n      animation: _drawerSlideController,\n      builder: (context, child) {\n        return FractionalTranslation(\n          translation: Offset(1.0 - _drawerSlideController.value, 0.0),\n          child: _isDrawerClosed() ? const SizedBox() : const Menu(),\n        );\n      },\n    );\n  }\n}\n\nclass Menu extends StatefulWidget {\n  const Menu({super.key});\n\n  @override\n  State<Menu> createState() => _MenuState();\n}\n\nclass _MenuState extends State<Menu> with SingleTickerProviderStateMixin {\n  static const _menuTitles = [\n    'Declarative style',\n    'Premade widgets',\n    'Stateful hot reload',\n    'Native performance',\n    'Great community',\n  ];\n\n  static const _initialDelayTime = Duration(milliseconds: 50);\n  static const _itemSlideTime = Duration(milliseconds: 250);\n  static const _staggerTime = Duration(milliseconds: 50);\n  static const _buttonDelayTime = Duration(milliseconds: 150);\n  static const _buttonTime = Duration(milliseconds: 500);\n  final _animationDuration =\n      _initialDelayTime +\n      (_staggerTime * _menuTitles.length) +\n      _buttonDelayTime +\n      _buttonTime;\n\n  late AnimationController _staggeredController;\n  final List<Interval> _itemSlideIntervals = [];\n  late Interval _buttonInterval;\n\n  @override\n  void initState() {\n    super.initState();\n\n    _createAnimationIntervals();\n\n    _staggeredController = AnimationController(\n      vsync: this,\n      duration: _animationDuration,\n    )..forward();\n  }\n\n  void _createAnimationIntervals() {\n    for (var i = 0; i < _menuTitles.length; ++i) {\n      final startTime = _initialDelayTime + (_staggerTime * i);\n      final endTime = startTime + _itemSlideTime;\n      _itemSlideIntervals.add(\n        Interval(\n          startTime.inMilliseconds / _animationDuration.inMilliseconds,\n          endTime.inMilliseconds / _animationDuration.inMilliseconds,\n        ),\n      );\n    }\n\n    final buttonStartTime =\n        Duration(milliseconds: (_menuTitles.length * 50)) + _buttonDelayTime;\n    final buttonEndTime = buttonStartTime + _buttonTime;\n    _buttonInterval = Interval(\n      buttonStartTime.inMilliseconds / _animationDuration.inMilliseconds,\n      buttonEndTime.inMilliseconds / _animationDuration.inMilliseconds,\n    );\n  }\n\n  @override\n  void dispose() {\n    _staggeredController.dispose();\n    super.dispose();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Container(\n      color: Colors.white,\n      child: Stack(\n        fit: StackFit.expand,\n        children: [_buildFlutterLogo(), _buildContent()],\n      ),\n    );\n  }\n\n  Widget _buildFlutterLogo() {\n    return const Positioned(\n      right: -100,\n      bottom: -30,\n      child: Opacity(opacity: 0.2, child: FlutterLogo(size: 400)),\n    );\n  }\n\n  Widget _buildContent() {\n    return Column(\n      crossAxisAlignment: CrossAxisAlignment.start,\n      children: [\n        const SizedBox(height: 16),\n        ..._buildListItems(),\n        const Spacer(),\n        _buildGetStartedButton(),\n      ],\n    );\n  }\n\n  List<Widget> _buildListItems() {\n    final listItems = <Widget>[];\n    for (var i = 0; i < _menuTitles.length; ++i) {\n      listItems.add(\n        AnimatedBuilder(\n          animation: _staggeredController,\n          builder: (context, child) {\n            final animationPercent = Curves.easeOut.transform(\n              _itemSlideIntervals[i].transform(_staggeredController.value),\n            );\n            final opacity = animationPercent;\n            final slideDistance = (1.0 - animationPercent) * 150;\n\n            return Opacity(\n              opacity: opacity,\n              child: Transform.translate(\n                offset: Offset(slideDistance, 0),\n                child: child,\n              ),\n            );\n          },\n          child: Padding(\n            padding: const EdgeInsets.symmetric(horizontal: 36, vertical: 16),\n            child: Text(\n              _menuTitles[i],\n              textAlign: TextAlign.left,\n              style: const TextStyle(fontSize: 24, fontWeight: FontWeight.w500),\n            ),\n          ),\n        ),\n      );\n    }\n    return listItems;\n  }\n\n  Widget _buildGetStartedButton() {\n    return SizedBox(\n      width: double.infinity,\n      child: Padding(\n        padding: const EdgeInsets.all(24),\n        child: AnimatedBuilder(\n          animation: _staggeredController,\n          builder: (context, child) {\n            final animationPercent = Curves.elasticOut.transform(\n              _buttonInterval.transform(_staggeredController.value),\n            );\n            final opacity = animationPercent.clamp(0.0, 1.0);\n            final scale = (animationPercent * 0.5) + 0.5;\n\n            return Opacity(\n              opacity: opacity,\n              child: Transform.scale(scale: scale, child: child),\n            );\n          },\n          child: ElevatedButton(\n            style: ElevatedButton.styleFrom(\n              shape: const StadiumBorder(),\n              backgroundColor: Colors.blue,\n              padding: const EdgeInsets.symmetric(horizontal: 48, vertical: 14),\n            ),\n            onPressed: () {},\n            child: const Text(\n              'Get started',\n              style: TextStyle(color: Colors.white, fontSize: 22),\n            ),\n          ),\n        ),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Dart Const and Final Variables After Hot Reload (Const Change)\nDESCRIPTION: This Dart code modifies the `const` variable `foo` to 2. The `final` variable `bar` retains its original value (1) after a hot reload because `final` variables are not reinitialized. The `const` variable `foo` however is updated.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/tools/hot-reload.md#_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nconst foo = 2; // modified\nfinal bar = foo;\nvoid onClick() {\n  print(foo);\n  print(bar);\n}\n```\n\n----------------------------------------\n\nTITLE: Create a Row layout - Dart\nDESCRIPTION: This Flutter code creates a `Row` widget to display child widgets horizontally. The `mainAxisAlignment` property is set to `MainAxisAlignment.center` to center the children within the row.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/xamarin-forms-devs.md#_snippet_36\n\nLANGUAGE: dart\nCODE:\n```\n@override\nWidget build(BuildContext context) {\n  return const Row(\n    mainAxisAlignment: MainAxisAlignment.center,\n    children: <Widget>[\n      Text('Row One'),\n      Text('Row Two'),\n      Text('Row Three'),\n      Text('Row Four'),\n    ],\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Add Navigator Widget with onGenerateRoute in Flutter\nDESCRIPTION: This code snippet adds a `Navigator` widget to a `SetupFlow` widget and implements the `onGenerateRoute` property to handle navigation within the flow. It defines routes for different setup stages, such as device discovery, selection, connection, and completion. The `_onGenerateRoute` function maps route names to corresponding pages using a switch statement.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/effects/nested-nav.md#_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nfinal _navigatorKey = GlobalKey<NavigatorState>();\n\nvoid _onDiscoveryComplete() {\n  _navigatorKey.currentState!.pushNamed(routeDeviceSetupSelectDevicePage);\n}\n\nvoid _onDeviceSelected(String deviceId) {\n  _navigatorKey.currentState!.pushNamed(routeDeviceSetupConnectingPage);\n}\n\nvoid _onConnectionEstablished() {\n  _navigatorKey.currentState!.pushNamed(routeDeviceSetupFinishedPage);\n}\n\n@override\nWidget build(BuildContext context) {\n  return PopScope(\n    canPop: false,\n    onPopInvokedWithResult: (didPop, _) async {\n      if (didPop) return;\n\n      if (await _isExitDesired() && context.mounted) {\n        _exitSetup();\n      }\n    },\n    child: Scaffold(\n      appBar: _buildFlowAppBar(),\n      body: Navigator(\n        key: _navigatorKey,\n        initialRoute: widget.setupPageRoute,\n        onGenerateRoute: _onGenerateRoute,\n      ),\n    ),\n  );\n}\n\nRoute<Widget> _onGenerateRoute(RouteSettings settings) {\n  final page = switch (settings.name) {\n    routeDeviceSetupStartPage => WaitingPage(\n      message: 'Searching for nearby bulb...', \n      onWaitComplete: _onDiscoveryComplete,\n    ),\n    routeDeviceSetupSelectDevicePage => SelectDevicePage(\n      onDeviceSelected: _onDeviceSelected,\n    ),\n    routeDeviceSetupConnectingPage => WaitingPage(\n      message: 'Connecting...', \n      onWaitComplete: _onConnectionEstablished,\n    ),\n    routeDeviceSetupFinishedPage => FinishedPage(onFinishPressed: _exitSetup),\n    _ => throw StateError('Unexpected route name: ${settings.name}!'),\n  };\n\n  return MaterialPageRoute(\n    builder: (context) {\n      return page;\n    },\n    settings: settings,\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using IntTween with CurvedAnimation in Dart\nDESCRIPTION: This snippet shows how to use an `IntTween` with a `CurvedAnimation` to generate integer values from 0 to 255, applying an `easeOut` curve. The `CurvedAnimation` modifies the animation's progress based on the specified curve.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/animations/index.md#_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nAnimationController controller = AnimationController(\n  duration: const Duration(milliseconds: 500),\n  vsync: this,\n);\nfinal Animation<double> curve = CurvedAnimation(\n  parent: controller,\n  curve: Curves.easeOut,\n);\nAnimation<int> alpha = IntTween(begin: 0, end: 255).animate(curve);\n```\n\n----------------------------------------\n\nTITLE: Flutter Horizontal List Example\nDESCRIPTION: This snippet provides a complete Flutter application that creates a horizontal list using ListView and demonstrates how to integrate it into a MaterialApp with a Scaffold. It showcases the necessary imports, the MyApp widget, and the ListView with horizontal scrolling.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/lists/horizontal-list.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\n\nvoid main() => runApp(const MyApp());\n\nclass MyApp extends StatelessWidget {\n  const MyApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    const title = 'Horizontal List';\n\n    return MaterialApp(\n      title: title,\n      home: Scaffold(\n        appBar: AppBar(title: const Text(title)),\n        body: Container(\n          margin: const EdgeInsets.symmetric(vertical: 20),\n          height: 200,\n          child: ListView(\n            // This next line does the trick.\n            scrollDirection: Axis.horizontal,\n            children: <Widget>[\n              Container(width: 160, color: Colors.red),\n              Container(width: 160, color: Colors.blue),\n              Container(width: 160, color: Colors.green),\n              Container(width: 160, color: Colors.yellow),\n              Container(width: 160, color: Colors.orange),\n            ],\n          ),\n        ),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Equality checks with isSameColorAs matcher\nDESCRIPTION: This example demonstrates how to perform equality checks on colors using the `isSameColorAs` matcher instead of direct equality, since colors may now use floating-point values. Using `isSameColorAs` allows for a small tolerance in color comparisons, accounting for potential rounding errors.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/wide-gamut-framework.md#_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\n// Before: Check exact equality of int-based color.\nexpect(calculateColor(), const Color(0xffff00ff));\n\n// After: Check rough equality of floating-point-based color.\nexpect(calculateColor(), isSameColorAs(const Color(0xffff00ff)));\n```\n\n----------------------------------------\n\nTITLE: Migrate BottomNavigationBarItem.title to label Dart\nDESCRIPTION: This snippet demonstrates how to migrate from the deprecated `title` property to the `label` property in `BottomNavigationBarItem`.  The `label` property provides better text scaling and accessibility features. It includes examples of both setting and accessing the property.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/2-5-deprecations.md#_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nconst BottomNavigationBarItem bottomNavigationBarItem = BottomNavigationBarItem(title: myTitle);\nconst BottomNavigationBarItem bottomNavigationBarItem = BottomNavigationBarItem();\nbottomNavigationBarItem.title;\n```\n\n----------------------------------------\n\nTITLE: Snapcraft YAML Configuration\nDESCRIPTION: This `snapcraft.yaml` file configures the build process for a Flutter application named 'super-cool-app'.  It defines the app's metadata, confinement level, base system, application command, extensions, plugs, and parts for building the snap.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/deployment/linux.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nname: super-cool-app\nversion: 0.1.0\nsummary: Super Cool App\ndescription: Super Cool App that does everything!\n\nconfinement: strict\nbase: core22\ngrade: stable\n\nslots:\n  dbus-super-cool-app: # adjust accordingly to your app name\n    interface: dbus\n    bus: session\n    name: org.bar.super_cool_app # adjust accordingly to your app name and\n    \napps:\n  super-cool-app:\n    command: super_cool_app\n    extensions: [gnome] # gnome includes the libraries required by flutter\n    plugs:\n    - network\n    slots:\n      - dbus-super-cool-app\nparts:\n  super-cool-app:\n    source: .\n    plugin: flutter\n    flutter-target: lib/main.dart # The main entry-point file of the application\n```\n\n----------------------------------------\n\nTITLE: Running Flutter app to trigger Swift Package Manager migration\nDESCRIPTION: This command runs the Flutter application using the Flutter CLI. If the iOS project is not already using Swift Package Manager, the CLI will attempt to automatically migrate the project to use it.\nSOURCE: https://github.com/flutter/website/blob/main/src/_includes/docs/swift-package-manager/migrate-ios-project.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ flutter run\nAdding Swift Package Manager integration...\n```\n\n----------------------------------------\n\nTITLE: DatabaseService Class in Dart\nDESCRIPTION: Defines a service for interacting with a local database to fetch and update user profile data. It uses SQL-like operations to store data persistently. This service acts as the local data source for offline access and data caching.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/app-architecture/design-patterns/offline-first.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nclass DatabaseService {\n  /// Fetches the UserProfile from the database.\n  /// Returns null if the user profile is not found.\n  Future<UserProfile?> fetchUserProfile() async {\n    // ···\n  }\n\n  /// Update UserProfile in the database.\n  Future<void> updateUserProfile(UserProfile userProfile) async {\n    // ···\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating Custom Actions with Arguments in Flutter\nDESCRIPTION: This example showcases the necessary code modifications for custom `Actions` and `Intents` that use arguments or hold state. It specifically focuses on updating the arguments to the `invoke` method, highlighting the shift from creating a new action instance for each execution to returning the state as a result of the `invoke` call, since a new instance isn't created for each invocation.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/actions-api-revision.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nclass MyIntent extends Intent {\n  const MyIntent({this.argument});\n\n  final int argument;\n}\n\nclass MyAction extends Action {\n  MyAction() : super(key);\n\n  /// The [LocalKey] that uniquely identifies this action to an [Intent].\n  static const LocalKey key = ValueKey<Type>(RequestFocusAction);\n\n  int state;\n\n  @override\n  void invoke(FocusNode node, MyIntent intent) {\n    // ...\n    state = intent.argument;\n  }\n}\n```\n\nLANGUAGE: dart\nCODE:\n```\nclass MyIntent extends Intent {\n  const MyIntent({this.argument});\n\n  final int argument;\n}\n\nclass MyAction extends Action<MyIntent> {\n  @override\n  int invoke(Intent intent) {\n    // ...\n    return intent.argument;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Radio Buttons in Flutter\nDESCRIPTION: This code snippet demonstrates how to implement a group of radio buttons in Flutter using the `Radio` widget and `ListTile`. It defines an enum `Character` for the radio button values, a `RadioExample` StatefulWidget, and a `_RadioExampleState` class to manage the selected radio button. The `onChanged` callback is used to update the selected character when a radio button is pressed.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/fundamentals/user-input.md#_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\nenum Character { musician, chef, firefighter, artist }\n\nclass RadioExample extends StatefulWidget {\n  const RadioExample({super.key});\n\n  @override\n  State<RadioExample> createState() => _RadioExampleState();\n}\n\nclass _RadioExampleState extends State<RadioExample> {\n  Character? _character = Character.musician;\n\n  void setCharacter(Character? value) {\n    setState(() {\n      _character = value;\n    });\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Column(\n      children: <Widget>[\n        ListTile(\n          title: const Text('Musician'),\n          leading: Radio<Character>(\n            value: Character.musician,\n            groupValue: _character,\n            onChanged: setCharacter,\n          ),\n        ),\n        ListTile(\n          title: const Text('Chef'),\n          leading: Radio<Character>(\n            value: Character.chef,\n            groupValue: _character,\n            onChanged: setCharacter,\n          ),\n        ),\n        ListTile(\n          title: const Text('Firefighter'),\n          leading: Radio<Character>(\n            value: Character.firefighter,\n            groupValue: _character,\n            onChanged: setCharacter,\n          ),\n        ),\n        ListTile(\n          title: const Text('Artist'),\n          leading: Radio<Character>(\n            value: Character.artist,\n            groupValue: _character,\n            onChanged: setCharacter,\n          ),\n        ),\n      ],\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Add Hero Widget to Second Screen in Flutter\nDESCRIPTION: This snippet wraps the `Image.network` widget in the `DetailScreen` with a `Hero` widget. The `Hero` widget's `tag` is set to 'imageHero', matching the tag of the `Hero` widget in `MainScreen`.  This shared tag enables the Flutter framework to animate the image between the two screens during navigation.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/navigation/hero-animations.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nHero(\n  tag: 'imageHero',\n  child: Image.network('https://picsum.photos/250?image=9'),\n)\n```\n\n----------------------------------------\n\nTITLE: Define State for a Flutter Widget\nDESCRIPTION: This code snippet shows how to define the State class for a Flutter widget. It includes fields to store mutable data that can change over the widget's lifetime, such as the `_isFavorited` boolean and the `_favoriteCount` integer. The `build()` method constructs the UI based on the current state.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/interactivity/index.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nclass _FavoriteWidgetState extends State<FavoriteWidget> {\n  bool _isFavorited = true;\n  int _favoriteCount = 41;\n```\n\n----------------------------------------\n\nTITLE: Nested Containers with Defined Size in Flutter\nDESCRIPTION: This example demonstrates nested containers.  The outer container's color is red, and it adapts its size to its child. The inner container's color is green, with a fixed width and height of 30 pixels. The red container is covered by the green container.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/layout/constraints.md#_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nCenter(\n   child: Container(color: red\n      child: Container(color: green, width: 30, height: 30)))\n```\n\n----------------------------------------\n\nTITLE: Configure ABI Filters in Gradle (Kotlin)\nDESCRIPTION: Configures the `abiFilters` within the `defaultConfig` block in the `build.gradle.kts` file to limit the supported architectures for the Android application to those supported by Flutter (armeabi-v7a, arm64-v8a, x86_64). This prevents runtime crashes due to missing `libflutter.so` for unsupported architectures.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/add-to-app/android/project-setup.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nandroid {\n    //...\n    defaultConfig {\n        ndk {\n            // Filter for architectures supported by Flutter\n            abiFilters += listOf(\"armeabi-v7a\", \"arm64-v8a\", \"x86_64\")\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Create Weather ViewModel Dart\nDESCRIPTION: Defines a simple view model in Dart to fetch the weather. The `load()` function returns a `Future<Weather>` object, simulating an asynchronous operation with a 1-second delay.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/dart-swift-concurrency.md#_snippet_6\n\nLANGUAGE: Dart\nCODE:\n```\n@immutable\nclass HomePageViewModel {\n  const HomePageViewModel();\n  Future<Weather> load() async {\n    await Future.delayed(const Duration(seconds: 1));\n    return Weather.sunny;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting onKeyEvent for Focus (After)\nDESCRIPTION: This code snippet shows how to set the `onKeyEvent` parameter for a `Focus` widget using the new `KeyEvent`. The `onKeyEvent` callback receives a `KeyEvent`. The input is a `KeyEvent` and the output is printing to the console. This replaces the deprecated `onKey` approach.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/key-event-migration.md#_snippet_3\n\nLANGUAGE: Dart\nCODE:\n```\nWidget build(BuildContext context) {\n  return Focus(\n    onKeyEvent: (KeyEvent keyEvent) {\n      print('Key event: $keyEvent');\n      return KeyEventResult.ignored;\n    }\n    child: child,\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Localized Strings Before Migration (Dart)\nDESCRIPTION: This code snippet demonstrates how to access the reorderItemToStart localized string from MaterialLocalizations before the migration. It uses the MaterialLocalizations.of(context) method to retrieve the string.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/material-localized-strings.md#_snippet_0\n\nLANGUAGE: Dart\nCODE:\n```\nMaterialLocalizations.of(context).reorderItemToStart;\n```\n\n----------------------------------------\n\nTITLE: Loading Text Asset using rootBundle in Flutter\nDESCRIPTION: This Dart snippet demonstrates how to load a text asset (e.g., a JSON file) using the `rootBundle` object from `package:flutter/services.dart`. It asynchronously loads the contents of the specified asset file as a string. Ensure `assets/config.json` exists and is properly declared in your `pubspec.yaml`.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/assets/assets-and-images.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/services.dart' show rootBundle;\n\nFuture<String> loadAsset() async {\n  return await rootBundle.loadString('assets/config.json');\n}\n```\n\n----------------------------------------\n\nTITLE: HeroAnimation Widget Implementation in Dart\nDESCRIPTION: This code demonstrates the HeroAnimation widget, showcasing a basic hero animation. It utilizes the PhotoHero widget to transition an image between two routes, using Navigator.push and Navigator.pop for route management.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/animations/hero-animations.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nclass HeroAnimation extends StatelessWidget {\n  const HeroAnimation({super.key});\n\n  Widget build(BuildContext context) {\n    [!timeDilation = 5.0; // 1.0 means normal animation speed.!]\n\n    return Scaffold(\n      appBar: AppBar(\n        title: const Text('Basic Hero Animation'),\n      ),\n      body: Center(\n        [!child: PhotoHero(!]\n          photo: 'images/flippers-alpha.png',\n          width: 300.0,\n          [!onTap: ()!] {\n            [!Navigator.of(context).push(MaterialPageRoute<void>(!]\n              [!builder: (context)!] {\n                return Scaffold(\n                  appBar: AppBar(\n                    title: const Text('Flippers Page'),\n                  ),\n                  body: Container(\n                    // Set background to blue to emphasize that it's a new route.\n                    color: Colors.lightBlueAccent,\n                    padding: const EdgeInsets.all(16),\n                    alignment: Alignment.topLeft,\n                    [!child: PhotoHero(!]\n                      photo: 'images/flippers-alpha.png',\n                      width: 100.0,\n                      [!onTap: ()!] {\n                        [!Navigator.of(context).pop();!]\n                      },\n                    ),\n                  ),\n                );\n              }\n            ));\n          },\n        ),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handle AppLifecycleState changes - Before Migration - Dart\nDESCRIPTION: This code snippet demonstrates how to handle `AppLifecycleState` changes before the introduction of the `hidden` state. It uses a switch statement to determine the application's lifecycle and perform actions based on whether the app is visible or not.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/add-applifecyclestate-hidden.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nvoid didChangeAppLifecycleState(AppLifecycleState state) {\n  switch (state) {\n    case AppLifecycleState.resumed:\n    case AppLifecycleState.inactive:\n      // Do something when the app is visible...\n      break;\n    case AppLifecycleState.paused:\n    case AppLifecycleState.detached:\n      // Do something when the app is not visible...\n      break;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Code after migration example in Dart\nDESCRIPTION: Illustrates code after a breaking change in Dart.  It's a placeholder that should be replaced with actual code demonstrating the new API usage. The developer provides an example of the migrated code.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/template.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\n// Example of code after the change.\n```\n\n----------------------------------------\n\nTITLE: Styling Buttons in Flutter\nDESCRIPTION: This code demonstrates how to style a `CupertinoButton` in Flutter. It sets the button's background color using the `color` property of `CupertinoButton` and the text color, font size, and font weight using the `TextStyle` widget applied to the child `Text` widget.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/swiftui-devs.md#_snippet_30\n\nLANGUAGE: Dart\nCODE:\n```\nchild: CupertinoButton(\n  color: CupertinoColors.systemYellow,\n  onPressed: () {},\n  padding: const EdgeInsets.all(16),\n  child: const Text(\n    'Do something',\n    style: TextStyle(\n      color: CupertinoColors.systemBlue,\n      fontSize: 30,\n      fontWeight: FontWeight.bold,\n    ),\n  ),\n),\n```\n\n----------------------------------------\n\nTITLE: Adding onClick Listener to ElevatedButton in Flutter\nDESCRIPTION: This snippet shows how to add an onClick listener to an ElevatedButton in Flutter using the `onPressed` parameter. When the button is pressed, the provided function is executed, logging a message to the console.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/android-devs.md#_snippet_33\n\nLANGUAGE: dart\nCODE:\n```\n@override\nWidget build(BuildContext context) {\n  return ElevatedButton(\n    onPressed: () {\n      developer.log('click');\n    },\n    child: const Text('Button'),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Tracing Dart Code Performance - Flutter (Dart)\nDESCRIPTION: This code snippet demonstrates how to use the `dart:developer` Timeline utilities to measure the wall or CPU time of specific segments of Dart code. It wraps the code to be measured within `Timeline.startSync` and `Timeline.finishSync` methods.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/testing/code-debugging.md#_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nimport 'dart:developer';\n\nvoid main() {\n  Timeline.startSync('interesting function');\n  // iWonderHowLongThisTakes();\n  Timeline.finishSync();\n}\n```\n\n----------------------------------------\n\nTITLE: Caching FlutterEngine in MyApplication (Java)\nDESCRIPTION: This Java code snippet demonstrates how to instantiate and cache a FlutterEngine within the Application class for later use by a FlutterFragment. It retrieves the DartExecutor, executes the default Dart entrypoint, and stores the FlutterEngine in the FlutterEngineCache with the ID \"my_engine_id\".\nSOURCE: https://github.com/flutter/website/blob/main/src/content/add-to-app/android/add-flutter-fragment.md#_snippet_5\n\nLANGUAGE: Java\nCODE:\n```\n// Somewhere in your app, before your FlutterFragment is needed,\n// like in the Application class ...\n// Instantiate a FlutterEngine.\nFlutterEngine flutterEngine = new FlutterEngine(context);\n\n// Start executing Dart code in the FlutterEngine.\nflutterEngine.getDartExecutor().executeDartEntrypoint(\n    DartEntrypoint.createDefault()\n);\n\n// Cache the pre-warmed FlutterEngine to be used later by FlutterFragment.\nFlutterEngineCache\n  .getInstance()\n  .put(\"my_engine_id\", flutterEngine);\n```\n\n----------------------------------------\n\nTITLE: Centering Text with Center Widget - Dart\nDESCRIPTION: Shows how to combine the `Center` and `Text` widgets to display centered text. This example demonstrates adding the `Text` widget as a `child` of the `Center` widget.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/layout/index.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nconst Center(\n  child: Text('Hello World'),\n),\n```\n\n----------------------------------------\n\nTITLE: Handling Chat History in GeminiProvider using Dart\nDESCRIPTION: This code snippet shows how the GeminiProvider manages chat history, including supporting initial history through the constructor, notifying listeners of changes, and implementing the history getter and setter.  It uses `ChangeNotifier` to implement `Listenable`, handles history as a `List<ChatMessage>`, and updates the chat when history is changed.  It's crucial for maintaining chat state and enabling features like replaying conversations.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ai-toolkit/custom-llm-providers.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nclass GeminiProvider extends LlmProvider with ChangeNotifier {\n  @immutable\n  GeminiProvider({\n    required GenerativeModel model,\n    Iterable<ChatMessage>? history,\n    ...\n  })  : _model = model,\n        _history = history?.toList() ?? [],\n        ... { ... }\n\n  final GenerativeModel _model;\n  final List<ChatMessage> _history;\n  ...\n\n  @override\n  Stream<String> sendMessageStream(\n    String prompt, {\n    Iterable<Attachment> attachments = const [],\n  }) async* {\n    final userMessage = ChatMessage.user(prompt, attachments);\n    final llmMessage = ChatMessage.llm();\n    _history.addAll([userMessage, llmMessage]);\n\n    final response = _generateStream(\n      prompt: prompt,\n      attachments: attachments,\n      contentStreamGenerator: _chat!.sendMessageStream,\n    );\n\n    yield* response.map((chunk) {\n      llmMessage.append(chunk);\n      return chunk;\n    });\n\n    notifyListeners();\n  }\n\n  @override\n  Iterable<ChatMessage> get history => _history;\n\n  @override\n  set history(Iterable<ChatMessage> history) {\n    _history.clear();\n    _history.addAll(history);\n    _chat = _startChat(history);\n    notifyListeners();\n  }\n\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Add Web Platform Support to Existing Plugin\nDESCRIPTION: This command adds web platform support to an existing Flutter plugin project by re-running the `flutter create` command with the `--template=plugin` and `--platforms=web` flags within the project directory.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/packages-and-plugins/developing-packages.md#_snippet_15\n\nLANGUAGE: console\nCODE:\n```\n$ flutter create --template=plugin --platforms=web .\n```\n\n----------------------------------------\n\nTITLE: Defining LlmProvider Interface in Dart\nDESCRIPTION: This code snippet defines the `LlmProvider` interface, which serves as the contract between the `LlmChatView` and any LLM implementation.  It specifies methods for generating text streams, sending messages, and managing chat history.  Implementing this interface allows plugging custom LLMs into the chat view.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ai-toolkit/custom-llm-providers.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nabstract class LlmProvider implements Listenable {\n  Stream<String> generateStream(String prompt, {Iterable<Attachment> attachments});\n  Stream<String> sendMessageStream(String prompt, {Iterable<Attachment> attachments});\n  Iterable<ChatMessage> get history;\n  set history(Iterable<ChatMessage> history);\n}\n```\n\n----------------------------------------\n\nTITLE: Launch FlutterActivity with Custom Route (Kotlin)\nDESCRIPTION: This Kotlin code snippet demonstrates how to launch a `FlutterActivity` with a specified initial route. It uses `withNewEngine()` and `initialRoute()` to configure the `FlutterActivity` before launching it with `startActivity`.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/add-to-app/android/add-flutter-screen.md#_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nmyButton.setOnClickListener {\n  startActivity(\n    FlutterActivity\n      .withNewEngine()\n      .initialRoute(\"/my_route\")\n      .build(this)\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Migrate Form autovalidate to autovalidateMode in Dart\nDESCRIPTION: This snippet demonstrates how to migrate from the deprecated `autovalidate` property in `Form`, `FormField`, `DropdownButtonFormField`, and `TextFormField` classes to the new `autovalidateMode` property. It shows how to replace `autovalidate: true` with `autovalidateMode: AutovalidateMode.always` and `autovalidate: false` with `autovalidateMode: AutovalidateMode.disabled`.  It also shows how to access the property after migration.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/2-5-deprecations.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nconst Form form = Form(autovalidate: true);\nconst Form form = Form(autovalidate: false);\nfinal autoMode = form.autovalidate;\n\nconst FormField formField = FormField(autovalidate: true);\nconst FormField formField = FormField(autovalidate: false);\nfinal autoMode = formField.autovalidate;\n\nconst TextFormField textFormField = TextFormField(autovalidate: true);\nconst TextFormField textFormField = TextFormField(autovalidate: false);\n\nconst DropdownButtonFormField dropDownButtonFormField = DropdownButtonFormField(autovalidate: true);\nconst DropdownButtonFormField dropdownButtonFormField = DropdownButtonFormField(autovalidate: false);\n```\n\nLANGUAGE: dart\nCODE:\n```\nconst Form form = Form(autovalidateMode: AutovalidateMode.always);\nconst Form form = Form(autovalidateMode: AutovalidateMode.disabled);\nfinal autoMode = form.autovalidateMode;\n\nconst FormField formField = FormField(autovalidateMode: AutovalidateMode.always);\nconst FormField formField = FormField(autovalidateMode: AutovalidateMode.disabled);\nfinal autoMode = formField.autovalidateMode;\n\nconst TextFormField textFormField = TextFormField(autovalidateMode: AutovalidateMode.always);\nconst TextFormField textFormField = TextFormField(autovalidateMode: AutovalidateMode.disabled);\n\nconst DropdownButtonFormField dropDownButtonFormField = DropdownButtonFormField(autovalidateMode: AutovalidateMode.always);\nconst DropdownButtonFormField dropdownButtonFormField = DropdownButtonFormField(autovalidateMode: AutovalidateMode.disabled);\n```\n\n----------------------------------------\n\nTITLE: Showing Result on Home Screen in Flutter\nDESCRIPTION: This code snippet shows how to display the result received from the `SelectionScreen` on the `HomeScreen` using a `SnackBar`.  It uses the `_navigateAndDisplaySelection` method in `SelectionButton` which awaits the returned value and then displays it in a `SnackBar`.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/navigation/returning-data.md#_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\n// A method that launches the SelectionScreen and awaits the result from\n// Navigator.pop.\nFuture<void> _navigateAndDisplaySelection(BuildContext context) async {\n  // Navigator.push returns a Future that completes after calling\n  // Navigator.pop on the Selection Screen.\n  final result = await Navigator.push(\n    context,\n    MaterialPageRoute(builder: (context) => const SelectionScreen()),\n  );\n\n  // When a BuildContext is used from a StatefulWidget, the mounted property\n  // must be checked after an asynchronous gap.\n  if (!context.mounted) return;\n\n  // After the Selection Screen returns a result, hide any previous snackbars\n  // and show the new result.\n  ScaffoldMessenger.of(context)\n    ..removeCurrentSnackBar()\n    ..showSnackBar(SnackBar(content: Text('$result')));\n}\n```\n\n----------------------------------------\n\nTITLE: Updating a Shader with Parameters and Drawing - Dart\nDESCRIPTION: This snippet shows how to update a shader with parameters (uniforms) and draw a rectangle using the shader in Dart. It retrieves a `FragmentShader` from a `FragmentProgram`, sets a float uniform value, and then draws a rectangle on the canvas with the shader applied as the color source.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/design/graphics/fragment-shaders.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nvoid updateShader(Canvas canvas, Rect rect, FragmentProgram program) {\n  var shader = program.fragmentShader();\n  shader.setFloat(0, 42.0);\n  canvas.drawRect(rect, Paint()..shader = shader);\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Transformed SVG Asset in Flutter using Dart\nDESCRIPTION: This Dart code snippet demonstrates how to display a transformed SVG asset using the `vector_graphics` package. It imports the necessary package and uses the `VectorGraphic` widget with an `AssetBytesLoader` to load the transformed asset located at `assets/logo.svg`.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/assets/asset-transformation.md#_snippet_1\n\nLANGUAGE: Dart\nCODE:\n```\nimport 'package:vector_graphics/vector_graphics.dart';\n\nconst Widget logo = VectorGraphic(loader: AssetBytesLoader('assets/logo.svg'));\n```\n\n----------------------------------------\n\nTITLE: MainActivity.kt (Kotlin) for Android 12 Splash Screen\nDESCRIPTION: This Kotlin code snippet disables the Android splash screen fade out animation to avoid a flicker before the similar frame is drawn in Flutter.  It uses `WindowCompat` to align the Flutter view vertically with the window and `splashScreen.setOnExitAnimationListener` to remove the splash screen view.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/platform-integration/android/splash-screen.md#_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nimport android.os.Build\nimport android.os.Bundle\nimport androidx.core.view.WindowCompat\nimport io.flutter.embedding.android.FlutterActivity\n\nclass MainActivity : FlutterActivity() {\n  override fun onCreate(savedInstanceState: Bundle?) {\n    // Aligns the Flutter view vertically with the window.\n    WindowCompat.setDecorFitsSystemWindows(getWindow(), false)\n\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.S) {\n      // Disable the Android splash screen fade out animation to avoid\n      // a flicker before the similar frame is drawn in Flutter.\n      splashScreen.setOnExitAnimationListener { splashScreenView -> splashScreenView.remove() }\n    }\n\n    super.onCreate(savedInstanceState)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Initial Routes with onGenerateInitialRoutes Dart\nDESCRIPTION: This snippet shows how to use the `onGenerateInitialRoutes` API in `MaterialApp` to fully control initial route generation.  This approach is recommended for complex use cases. It allows explicit creation of initial routes and requires the Flutter SDK 1.17 or later.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/route-navigator-refactoring.md#_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nMaterialApp(\n  onGenerateRoute: (RouteSetting setting) {\n    return RealRoute(setting);\n  },\n  onGenerateInitialRoutes: (String initialRouteName) {\n    return <Route>[FakeSplashRoute()];\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Update Flutter version\nDESCRIPTION: Updates the Flutter SDK to the latest version if the installed version is older than 3.7. This ensures access to the necessary features for dark title bar support.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/windows-dark-mode.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nflutter upgrade\n```\n\n----------------------------------------\n\nTITLE: RawGestureDetector Pan Gesture Migration (Flutter 3.3.0)\nDESCRIPTION: This snippet shows how to use RawGestureDetector to explicitly set the supportedDevices for PanGestureRecognizer in Flutter 3.3.0, excluding PointerDeviceKind.trackpad. This ensures that pan gestures are only recognized for touch, mouse, and stylus input.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/trackpad-gestures.md#_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\n// Example of code after the change.\nvoid main() => runApp(Foo());\n\nclass Foo extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return RawGestureDetector(\n      gestures: {\n        PanGestureRecognizer:\n            GestureRecognizerFactoryWithHandlers<PanGestureRecognizer>(\n          () => PanGestureRecognizer(\n            supportedDevices: {\n              PointerDeviceKind.touch,\n              PointerDeviceKind.mouse,\n              PointerDeviceKind.stylus,\n              PointerDeviceKind.invertedStylus,\n              // Do not include PointerDeviceKind.trackpad\n            }\n          ),\n          (recognizer) {\n            recognizer\n              ..onStart = (details) {\n                debugPrint('onStart');\n              }\n              ..onUpdate = (details) {\n                debugPrint('onUpdate');\n              }\n              ..onEnd = (details) {\n                debugPrint('onEnd');\n              };\n          },\n        ),\n      },\n      child: Container()\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Flutter CLI Swift Package Manager Migration\nDESCRIPTION: This command initiates the automatic migration of a Flutter macOS project to Swift Package Manager. It updates the Xcode project files to include Flutter plugin dependencies as Swift packages. The command should be run from the project's root directory.\nSOURCE: https://github.com/flutter/website/blob/main/src/_includes/docs/swift-package-manager/migrate-macos-project.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nflutter run -d macos\n```\n\n----------------------------------------\n\nTITLE: GestureDetector Tap Handler in Flutter\nDESCRIPTION: This snippet demonstrates wrapping a custom button with a GestureDetector widget to detect taps.  When a tap is detected, a SnackBar is displayed using ScaffoldMessenger.  The button is styled with padding, background color, and rounded corners.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/gestures/handling-taps.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nGestureDetector(\n  // When the child is tapped, show a snackbar.\n  onTap: () {\n    const snackBar = SnackBar(content: Text('Tap'));\n\n    ScaffoldMessenger.of(context).showSnackBar(snackBar);\n  },\n  // The custom button\n  child: Container(\n    padding: const EdgeInsets.all(12),\n    decoration: BoxDecoration(\n      color: Colors.lightBlue,\n      borderRadius: BorderRadius.circular(8),\n    ),\n    child: const Text('My Button'),\n  ),\n)\n```\n\n----------------------------------------\n\nTITLE: Adding onTap Listener with GestureDetector in Flutter\nDESCRIPTION: This snippet demonstrates how to add a tap listener to a widget that doesn't natively support event detection by wrapping it in a GestureDetector. The `onTap` parameter executes a function when the wrapped widget is tapped.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/android-devs.md#_snippet_34\n\nLANGUAGE: dart\nCODE:\n```\nclass SampleTapApp extends StatelessWidget {\n  const SampleTapApp({super.key});\n  \n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: Center(\n        child: GestureDetector(\n          onTap: () {\n            developer.log('tap');\n          },\n          child: const FlutterLogo(size: 200),\n        ),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Padding with ElevatedButton - Flutter\nDESCRIPTION: This code demonstrates how to add padding to an `ElevatedButton` in Flutter. It uses the `EdgeInsets.only` constructor to specify padding only on the left and right sides of the button.  The `ElevatedButton.styleFrom` method is used to customize the button's appearance.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/xamarin-forms-devs.md#_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\n@override\nWidget build(BuildContext context) {\n  return Scaffold(\n    appBar: AppBar(title: const Text('Sample App')),\n    body: Center(\n      child: ElevatedButton(\n        style: ElevatedButton.styleFrom(\n          padding: const EdgeInsets.only(left: 20, right: 30),\n        ),\n        onPressed: () {},\n        child: const Text('Hello'),\n      ),\n    ),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using css_colors Package in Flutter\nDESCRIPTION: This Dart code snippet shows how to use the `css_colors` package in a Flutter application. It imports the package and uses the `CSSColors.orange` constant to set the background color of a `Container` widget. This requires the `css_colors` package to be added as a dependency in the `pubspec.yaml` file.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/packages-and-plugins/using-packages.md#_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:css_colors/css_colors.dart';\nimport 'package:flutter/material.dart';\n\nvoid main() {\n  runApp(const MyApp());\n}\n\nclass MyApp extends StatelessWidget {\n  const MyApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return const MaterialApp(home: DemoPage());\n  }\n}\n\nclass DemoPage extends StatelessWidget {\n  const DemoPage({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(body: Container(color: CSSColors.orange));\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Outdated Flutter Packages\nDESCRIPTION: This command identifies out-of-date package dependencies and provides advice on how to update them. It helps you keep your app's dependencies up-to-date and secure.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/upgrade.md#_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ flutter pub outdated\n```\n\n----------------------------------------\n\nTITLE: Present FlutterViewController in UIKit (Swift)\nDESCRIPTION: Presents a FlutterViewController in a UIKit application using Swift. This creates a FlutterViewController with a default project, nib name, and bundle and presents it modally. This is useful for displaying a Flutter-based view within a traditional UIKit app.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/add-to-app/ios/add-flutter-screen.md#_snippet_7\n\nLANGUAGE: Swift\nCODE:\n```\n// Existing code omitted.\nfunc showFlutter() {\n  let flutterViewController = FlutterViewController(project: nil, nibName: nil, bundle: nil)\n  present(flutterViewController, animated: true, completion: nil)\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Styling LlmChatView in Flutter\nDESCRIPTION: This code demonstrates how to customize the style of the `LlmChatView` using the `style` parameter. The `LlmChatViewStyle` class allows modification of various UI elements like background, text field, and buttons. It depends on the `GeminiProvider` for the LLM functionality and applies a custom `LlmChatViewStyle`.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ai-toolkit/feature-integration.md#_snippet_15\n\nLANGUAGE: dart\nCODE:\n```\nLlmChatView(\n  provider: GeminiProvider(...),\n  style: LlmChatViewStyle(...),\n),\n```\n\n----------------------------------------\n\nTITLE: Set Background Color Flutter/Dart (Color)\nDESCRIPTION: Demonstrates setting the background color of a Container widget using the `color` property in Flutter/Dart. Relies on the Flutter framework and the 'bold24Roboto' TextStyle. Produces a Container widget with a grey background and styled text.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/web-devs.md#_snippet_3\n\nLANGUAGE: Dart\nCODE:\n```\nfinal container = Container(\n  // grey box\n  width: 320,\n  height: 240,\n  color: Colors.grey[300],\n  child: Text(\n    'Lorem ipsum',\n    style: bold24Roboto,\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Fetching Data from API with HttpClient in Flutter\nDESCRIPTION: This Dart snippet shows how to fetch data from an API using `HttpClient` in Flutter. It defines an asynchronous function `getIPAddress` that makes a GET request to 'https://httpbin.org/ip', decodes the response body using `utf8.decoder`, extracts the 'origin' field as the IP address, and updates the UI using `setState`.  It requires the `dart:io` and `dart:convert` libraries.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/react-native-devs.md#_snippet_50\n\nLANGUAGE: Dart\nCODE:\n```\nfinal url = Uri.parse('https://httpbin.org/ip');\nfinal httpClient = HttpClient();\n\nFuture<void> getIPAddress() async {\n  final request = await httpClient.getUrl(url);\n  final response = await request.close();\n  final responseBody = await response.transform(utf8.decoder).join();\n  final ip = jsonDecode(responseBody)['origin'] as String;\n  setState(() {\n    _ipAddress = ip;\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating GestureRecognizer.kind to supportedDevices in Dart\nDESCRIPTION: This snippet demonstrates how to migrate from the deprecated `GestureRecognizer.kind` property to the new `GestureRecognizer.supportedDevices` property. This change allows for multiple device support for gesture recognition. The snippet provides a before-and-after code example for a clear migration path.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/3-7-deprecations.md#_snippet_0\n\nLANGUAGE: Dart\nCODE:\n```\nvar myRecognizer = GestureRecognizer(\n  kind: PointerDeviceKind.mouse,  \n);\n\n```\n\nLANGUAGE: Dart\nCODE:\n```\nvar myRecognizer = GestureRecognizer(\n  supportedDevices: <PointerDeviceKind>[ PointerDeviceKind.mouse ],\n);\n\n```\n\n----------------------------------------\n\nTITLE: Using FFI to Call Win32 MessageBox API in Dart\nDESCRIPTION: This Dart code snippet demonstrates how to use Foreign Function Interface (FFI) to call the Win32 `MessageBox` API. It imports necessary libraries, defines `typedef`s for the native and Dart method signatures, opens the 'user32.dll' library, looks up the 'MessageBoxW' function, and calls it with sample parameters to display a message box.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/resources/architectural-overview.md#_snippet_10\n\nLANGUAGE: Dart\nCODE:\n```\nimport 'dart:ffi';\nimport 'package:ffi/ffi.dart'; // contains .toNativeUtf16() extension method\n\ntypedef MessageBoxNative =\n    Int32 Function(\n      IntPtr hWnd,\n      Pointer<Utf16> lpText,\n      Pointer<Utf16> lpCaption,\n      Int32 uType,\n    );\n\ntypedef MessageBoxDart =\n    int Function(\n      int hWnd,\n      Pointer<Utf16> lpText,\n      Pointer<Utf16> lpCaption,\n      int uType,\n    );\n\nvoid exampleFfi() {\n  final user32 = DynamicLibrary.open('user32.dll');\n  final messageBox = user32.lookupFunction<MessageBoxNative, MessageBoxDart>(\n    'MessageBoxW',\n  );\n\n  final result = messageBox(\n    0, // No owner window\n    'Test message'.toNativeUtf16(), // Message\n    'Window caption'.toNativeUtf16(), // Window title\n    0, // OK button only\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Page Structure for Flutter Web\nDESCRIPTION: This HTML snippet shows the basic structure required to launch a Flutter web application. It includes the necessary script tag that defers loading of the `flutter_bootstrap.js` file, which initializes the Flutter engine.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/platform-integration/web/embedding-flutter-web.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<!DOCTYPE html>\n<html>\n  <head>\n  </head>\n  <body>\n    <script src=\"flutter_bootstrap.js\" defer></script>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: MenuItemButton Text Style Before Migration (Dart)\nDESCRIPTION: This code snippet shows how the MenuItemButton was implemented before the Material 3 migration.  The text style was implicitly set by the default theme. To revert to the previous style after migration, explicitly set the textStyle property.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/menus-text-style.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nMenuItemButton(\n  child: Text(MenuEntry.about.label),\n  onPressed: () => _activate(MenuEntry.about),\n),\n```\n\n----------------------------------------\n\nTITLE: Launch FlutterActivity with Custom Route (Java)\nDESCRIPTION: This Java code snippet demonstrates how to launch a `FlutterActivity` with a specified initial route. It uses `withNewEngine()` and `initialRoute()` to configure the `FlutterActivity` before launching it with `startActivity`.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/add-to-app/android/add-flutter-screen.md#_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nmyButton.addOnClickListener(new OnClickListener() {\n  @Override\n  public void onClick(View v) {\n    startActivity(\n      FlutterActivity\n        .withNewEngine()\n        .initialRoute(\"/my_route\")\n        .build(currentActivity)\n      );\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Bindings - After Migration (Dart)\nDESCRIPTION: This code shows how custom bindings should be defined after the dependency reversal.  The `SchedulerBinding` mixin must be included before the `ServicesBinding` mixin.  Failure to do so will result in errors with Flutter version 1.18.0 or later.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/services-scheduler-dependency-reversed.md#_snippet_1\n\nLANGUAGE: Dart\nCODE:\n```\nclass FooBinding extends BindingBase with SchedulerBinding, ServicesBinding {\n // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Selectable Text Widget - Flutter\nDESCRIPTION: This snippet demonstrates the use of the `SelectableText` widget in Flutter, which allows users to select and copy text. It provides a basic implementation that displays the text 'Select me!' and enables text selection.  Useful for making text selectable on web/desktop platforms where it is expected.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/adaptive-responsive/idioms.md#_snippet_3\n\nLANGUAGE: Dart\nCODE:\n```\nreturn const SelectableText('Select me!');\n```\n\n----------------------------------------\n\nTITLE: Building FittedBox with Large Text in Flutter\nDESCRIPTION: This snippet demonstrates how FittedBox scales down very large text to fit within its constraints. The FittedBox is placed within a Center widget, and it scales the text down to fit the screen.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/layout/constraints.md#_snippet_20\n\nLANGUAGE: dart\nCODE:\n```\n'Center(\\n'   'child: FittedBox(\\n'   '      child: Text(\\'…\\')));'\n```\n\n----------------------------------------\n\nTITLE: Run a Flutter application\nDESCRIPTION: Starts a Flutter application. It assumes that you are in the root directory of a Flutter project and that you have a device connected or a simulator open.  The command runs the application and displays the Observatory and DevTools URLs in the console.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/tools/devtools/cli.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\ncd path/to/flutter/app\nflutter run\n```\n\n----------------------------------------\n\nTITLE: Styling Button Colors in Flutter (Dart)\nDESCRIPTION: This snippet demonstrates how to customize the background and text color of a button in Flutter using `FilledButton.styleFrom()`.  It sets the background color to amberAccent and the text color to blue, with a font size of 30 and bold font weight.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/compose-devs.md#_snippet_23\n\nLANGUAGE: dart\nCODE:\n```\nFilledButton(\n  onPressed: (){},\n  style: FilledButton.styleFrom(backgroundColor: Colors.amberAccent),\n  child: const Text(\n    'Do something',\n    style: TextStyle(\n      color: Colors.blue,\n      fontSize: 30,\n      fontWeight: FontWeight.bold,\n    )\n  )\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic ListView in Flutter\nDESCRIPTION: This code snippet demonstrates how to create a basic ListView in Flutter by passing a list of widgets to the ListView constructor. The example initializes a list of 100 Text widgets and displays them in a scrolling list.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/android-devs.md#_snippet_37\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\n\nvoid main() {\n  runApp(const SampleApp());\n}\n\nclass SampleApp extends StatelessWidget {\n  const SampleApp({super.key});\n  // This widget is the root of your application.\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: 'Sample App',\n      theme: ThemeData(\n        colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),\n      ),\n      home: const SampleAppPage(),\n    );\n  }\n}\n\nclass SampleAppPage extends StatefulWidget {\n  const SampleAppPage({super.key});\n\n  @override\n  State<SampleAppPage> createState() => _SampleAppPageState();\n}\n\nclass _SampleAppPageState extends State<SampleAppPage> {\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: const Text('Sample App')),\n      body: ListView(children: _getListData()),\n    );\n  }\n\n  List<Widget> _getListData() {\n    List<Widget> widgets = [];\n    for (int i = 0; i < 100; i++) {\n      widgets.add(\n        Padding(padding: const EdgeInsets.all(10), child: Text('Row $i')),\n      );\n    }\n    return widgets;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Tween for Page Transition Animation\nDESCRIPTION: This snippet demonstrates how to create a Tween to animate the page transition from the bottom of the screen. It initializes a Tween with begin offset (0.0, 1.0) and end offset Offset.zero. It then uses animation.drive(tween) to create an Animation<Offset> which represents the transition animation.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/animation/page-route-animation.md#_snippet_1\n\nLANGUAGE: Dart\nCODE:\n```\ntransitionsBuilder: (context, animation, secondaryAnimation, child) {\n  const begin = Offset(0.0, 1.0);\n  const end = Offset.zero;\n  final tween = Tween(begin: begin, end: end);\n  final offsetAnimation = animation.drive(tween);\n  return child;\n},\n```\n\n----------------------------------------\n\nTITLE: Android Manifest Meta-Data for Loading Unit Mapping\nDESCRIPTION: This XML snippet shows the meta-data entry within the `AndroidManifest.xml` that maps loading units to component names. This mapping is crucial for the embedder to translate Dart's internal loading unit ID to the name of the deferred component, enabling proper installation. The example shows loading unit '2' mapped to 'boxComponent'.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/perf/deferred-components.md#_snippet_11\n\nLANGUAGE: xml\nCODE:\n```\n...\n<application\n    android:label=\"MyApp\"\n    android:name=\"io.flutter.app.FlutterPlayStoreSplitApplication\"\n    android:icon=\"@mipmap/ic_launcher\">\n    ...\n    <meta-data android:name=\"io.flutter.embedding.engine.deferredcomponents.DeferredComponentManager.loadingUnitMapping\" android:value=\"2:boxComponent\"/>\n</application>\n...\n```\n\n----------------------------------------\n\nTITLE: Android 12 Launch Theme in styles.xml (Android)\nDESCRIPTION: This XML snippet shows how to define a splash screen using the Android 12 splash screen API. It sets the `windowSplashScreenBackground` and `windowSplashScreenAnimatedIcon` items.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/platform-integration/android/splash-screen.md#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<style name=\"LaunchTheme\" parent=\"@android:style/Theme.Black.NoTitleBar\">\n    <item name=\"android:windowSplashScreenBackground\">@color/bgColor</item>\n    <item name=\"android:windowSplashScreenAnimatedIcon\">@drawable/launch_background</item>\n</style>\n```\n\n----------------------------------------\n\nTITLE: Import Flutter Services - Dart\nDESCRIPTION: This snippet imports necessary Flutter packages for working with foundation and platform services.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/platform-integration/ios/platform-views.md#_snippet_0\n\nLANGUAGE: Dart\nCODE:\n```\nimport 'package:flutter/foundation.dart';\nimport 'package:flutter/services.dart';\n```\n\n----------------------------------------\n\nTITLE: Swift symbol visibility\nDESCRIPTION: This code snippet shows how to declare Swift functions so they are visible to Dart when using FFI. The `@_cdecl(\"myFunctionName\")` attribute makes the Swift function accessible from C, and thus from Dart via FFI.  `myFunctionName` is the name that the function will be known by in C (and Dart).\nSOURCE: https://github.com/flutter/website/blob/main/src/content/platform-integration/ios/c-interop.md#_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\n@_cdecl(\"myFunctionName\")\n```\n\n----------------------------------------\n\nTITLE: FFI Plugin with Method Channel Configuration\nDESCRIPTION: This YAML snippet demonstrates how to configure a plugin platform to use both FFI and method channels.  It shows a setting where `pluginClass` is defined alongside `ffiPlugin: true`, allowing both native code and standard Flutter platform channels to be utilized.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/packages-and-plugins/developing-packages.md#_snippet_22\n\nLANGUAGE: YAML\nCODE:\n```\nplugin:\n    platforms:\n      some_platform:\n        pluginClass: SomeName\n        ffiPlugin: true\n```\n\n----------------------------------------\n\nTITLE: Creating a Scaffold with a Drawer (Start) - Dart\nDESCRIPTION: This snippet demonstrates how to create a basic `Scaffold` widget with an `AppBar` and an empty `drawer`. The `Scaffold` provides the basic layout structure for a Material Design app. The `drawer` property is where the `Drawer` widget will be added.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/design/drawer.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nScaffold(\n  appBar: AppBar(title: const Text('AppBar without hamburger button')),\n  drawer: // Add a Drawer here in the next step.\n);\n```\n\n----------------------------------------\n\nTITLE: Building Debug APK for Specific Integration Test with Gradle\nDESCRIPTION: This Gradle command builds a debug APK for the Flutter application, targeting a specific integration test file. The `-Ptarget` argument specifies the path to the test file.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/testing/integration-tests/index.md#_snippet_18\n\nLANGUAGE: console\nCODE:\n```\n$ ./gradlew app:assembleDebug -Ptarget=integration_test/<name>_test.dart\n```\n\n----------------------------------------\n\nTITLE: Add Git Dependency with SSH in pubspec.yaml\nDESCRIPTION: This YAML snippet shows how to define a Git dependency using SSH in the `pubspec.yaml` file. This is useful for private repositories where SSH authentication is required. It uses the SSH URL of the Git repository.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/packages-and-plugins/using-packages.md#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  packageA:\n    git:\n      url: git@github.com:flutter/packageA.git\n```\n\n----------------------------------------\n\nTITLE: Scaling Widget with Transform - Dart\nDESCRIPTION: This Dart code snippet scales a Container widget by nesting it within a Transform widget. The `Matrix4.identity()..scale(1.5)` applies a scaling factor of 1.5. It uses a grey container as background and a red container that is being scaled.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/web-devs.md#_snippet_14\n\nLANGUAGE: dart\nCODE:\n```\nfinal container = Container(\n  // grey box\n  width: 320,\n  height: 240,\n  color: Colors.grey[300],\n  child: Center(\n    child: Transform(\n      alignment: Alignment.center,\n      transform: Matrix4.identity()..scale(1.5),\n      child: Container(\n        // red box\n        padding: const EdgeInsets.all(16),\n        decoration: BoxDecoration(\n          color: Colors.red[400],\n        ),\n        child: Text(\n          'Lorem ipsum',\n          style: bold24Roboto,\n          textAlign: TextAlign.center,\n        ),\n      ),\n    ),\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Register Platform View in Plugin - Objective-C\nDESCRIPTION: This Objective-C code snippet demonstrates how to register the platform view factory within a Flutter plugin. The `registerWithRegistrar` method is used to register the factory with the plugin registrar, associating it with a specific ID. This makes the native view available for use in the Flutter application through the plugin.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/platform-integration/ios/platform-views.md#_snippet_8\n\nLANGUAGE: Objective-C\nCODE:\n```\n#import <Flutter/Flutter.h>\n#import \"FLNativeView.h\"\n\n@interface FLPlugin : NSObject<FlutterPlugin>\n@end\n\n@implementation FLPlugin\n\n+ (void)registerWithRegistrar:(NSObject<FlutterPluginRegistrar>*)registrar {\n  FLNativeViewFactory* factory =\n      [[FLNativeViewFactory alloc] initWithMessenger:registrar.messenger];\n  [registrar registerViewFactory:factory withId:@\"<platform-view-type>\"];\n}\n\n@end\n```\n\n----------------------------------------\n\nTITLE: Row Layout Example in Flutter\nDESCRIPTION: This example displays a Row widget containing two Container widgets with Text children. The Row does not impose constraints on its children, allowing them to be their natural sizes. The Row then arranges its children horizontally.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/layout/constraints.md#_snippet_53\n\nLANGUAGE: dart\nCODE:\n```\nRow(\n  children: [\n    Container(color: red, child: const Text('Hello!', style: big)),\n    Container(color: green, child: const Text('Goodbye!', style: big)),\n  ],\n)\n```\n\n----------------------------------------\n\nTITLE: MaterialApp Theme Setup (Before Migration) - Dart\nDESCRIPTION: Illustrates setting up the MaterialApp theme before the page transition migration. This code sets the color scheme for the application.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/page-transition-replaced-by-ZoomPageTransitionBuilder.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nMaterialApp(\n  theme: ThemeData(colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple)),\n)\n```\n\n----------------------------------------\n\nTITLE: Integrating Vertex AI Provider in Flutter\nDESCRIPTION: Shows how to integrate the Vertex AI provider into the `LlmChatView` using the `firebase_vertexai` package. It initializes the `VertexProvider` with a `FirebaseVertexAI.instance.generativeModel` instance, specifying the model name. No API key is required as it's handled by Firebase.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ai-toolkit/index.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nclass ChatPage extends StatelessWidget {\n  const ChatPage({super.key});\n\n  @override\n  Widget build(BuildContext context) => Scaffold(\n        appBar: AppBar(title: const Text(App.title)),\n        // create the chat view, passing in the Vertex provider\n        body: LlmChatView(\n          provider: VertexProvider(\n            chatModel: FirebaseVertexAI.instance.generativeModel(\n              model: 'gemini-2.0-flash',\n            ),\n          ),\n        ),\n      );\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Includes in flutter_window.cpp (C++)\nDESCRIPTION: This C++ code adds necessary includes for using Flutter's MethodChannel and Windows API for getting battery information.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/platform-integration/platform-channels.md#_snippet_18\n\nLANGUAGE: C++\nCODE:\n```\n#include <flutter/event_channel.h>\n#include <flutter/event_sink.h>\n#include <flutter/event_stream_handler_functions.h>\n#include <flutter/method_channel.h>\n#include <flutter/standard_method_codec.h>\n#include <windows.h>\n\n#include <memory>\n```\n\n----------------------------------------\n\nTITLE: Migrate from `of!` to `of` Flutter\nDESCRIPTION: This code snippet illustrates the migration from using the null assertion operator (!) after calling the original static `of` function to directly using the `of` function, which now returns a non-nullable value. This eliminates the need for the explicit null assertion.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/supplemental-maybeOf-migration.md#_snippet_2\n\nLANGUAGE: Dart\nCODE:\n```\nScrollController controller = Scrollable.of(context)!;\n```\n\n----------------------------------------\n\nTITLE: TextField Validation with InputDecoration in Flutter\nDESCRIPTION: This Dart code provides an example of displaying validation errors in a Flutter TextField. It includes a TextField widget with InputDecoration for displaying a hint and error text. The error text is updated dynamically based on input validation.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/xamarin-forms-devs.md#_snippet_55\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\n\nvoid main() {\n  runApp(const SampleApp());\n}\n\nclass SampleApp extends StatelessWidget {\n  /// This widget is the root of your application.\n  const SampleApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return const MaterialApp(title: 'Sample App', home: SampleAppPage());\n  }\n}\n\nclass SampleAppPage extends StatefulWidget {\n  const SampleAppPage({super.key});\n\n  @override\n  State<SampleAppPage> createState() => _SampleAppPageState();\n}\n\nclass _SampleAppPageState extends State<SampleAppPage> {\n  String? _errorText;\n\n  String? _getErrorText() {\n    return _errorText;\n  }\n\n  bool isEmail(String em) {\n    const String emailRegexp =\n        r'^(([^<>()[\\\\]\\.,;:\\s@\\\"]+(\\.[^<>()[\\\\]\\.,;:\\s@\\\"]+)*)|' // Correctly escaped backslashes\n        r'(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|' // Correctly escaped backslashes\n        r'(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$'; // Correctly escaped backslashes\n    final RegExp regExp = RegExp(emailRegexp);\n    return regExp.hasMatch(em);\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: const Text('Sample App')),\n      body: Center(\n        child: TextField(\n          onSubmitted: (text) {\n            setState(() {\n              if (!isEmail(text)) {\n                _errorText = 'Error: This is not an email';\n              } else {\n                _errorText = null;\n              }\n            });\n          },\n          decoration: InputDecoration(\n            hintText: 'This is a hint',\n            errorText: _getErrorText(),\n          ),\n        ),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Combining Widgets in Flutter with Dart\nDESCRIPTION: This snippet demonstrates how to combine different Flutter widgets, such as Container, Row, Column, IconButton, and Text, to create a custom app bar and a basic scaffold.  It shows how to structure a UI using these building blocks. The MyAppBar widget displays a title and navigation buttons. The MyScaffold widget combines the MyAppBar with a central \"Hello, world!\" text.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/index.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\n\nclass MyAppBar extends StatelessWidget {\n  const MyAppBar({required this.title, super.key});\n\n  // Fields in a Widget subclass are always marked \"final\".\n\n  final Widget title;\n\n  @override\n  Widget build(BuildContext context) {\n    return Container(\n      height: 56, // in logical pixels\n      padding: const EdgeInsets.symmetric(horizontal: 8),\n      decoration: BoxDecoration(color: Colors.blue[500]),\n      // Row is a horizontal, linear layout.\n      child: Row(\n        children: [\n          const IconButton(\n            icon: Icon(Icons.menu),\n            tooltip: 'Navigation menu',\n            onPressed: null, // null disables the button\n          ),\n          // Expanded expands its child\n          // to fill the available space.\n          Expanded(child: title),\n          const IconButton(\n            icon: Icon(Icons.search),\n            tooltip: 'Search',\n            onPressed: null,\n          ),\n        ],\n      ),\n    );\n  }\n}\n\nclass MyScaffold extends StatelessWidget {\n  const MyScaffold({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    // Material is a conceptual piece\n    // of paper on which the UI appears.\n    return Material(\n      // Column is a vertical, linear layout.\n      child: Column(\n        children: [\n          MyAppBar(\n            title: Text(\n              'Example title',\n              style:\n                  Theme.of(context) //\n                  .primaryTextTheme.titleLarge,\n            ),\n          ),\n          const Expanded(child: Center(child: Text('Hello, world!'))),\n        ],\n      ),\n    );\n  }\n}\n\nvoid main() {\n  runApp(\n    const MaterialApp(\n      title: 'My app', // used by the OS task switcher\n      home: SafeArea(child: MyScaffold()),\n    ),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Returning 'Nope.' from Selection Screen in Flutter\nDESCRIPTION: This code snippet updates the 'Nope.' button's `onPressed` callback to call `Navigator.pop(context, 'Nope.')`. This closes the screen and returns the string 'Nope.' as the result to the previous screen.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/navigation/returning-data.md#_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nElevatedButton(\n  onPressed: () {\n    // Close the screen and return \"Nope.\" as the result.\n    Navigator.pop(context, 'Nope.');\n  },\n  child: const Text('Nope.'),\n)\n```\n\n----------------------------------------\n\nTITLE: Updating LLM Provider on Settings Change in Flutter\nDESCRIPTION: This code shows how to update the LLM provider when the user changes their preferences.  It creates a new LLM provider with the updated settings and transfers the chat history from the old provider to the new one using the _createProvider function.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ai-toolkit/feature-integration.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nclass _HomePageState extends State<HomePage> {\n  ...\n  void _onSettingsSave() => setState(() {\n        // move the history over from the old provider to the new one\n        final history = _provider.history.toList();\n        _provider = _createProvider(history);\n      });\n}\n```\n\n----------------------------------------\n\nTITLE: Theming CircularProgressIndicator to Material 3 (Dart)\nDESCRIPTION: This snippet shows how to apply the updated Material 3 design to all CircularProgressIndicators within your application. By setting the `ProgressIndicatorThemeData.year2023` property to `false` within the `MaterialApp`'s theme, you ensure all instances of the CircularProgressIndicator use the new design.  It requires importing necessary Flutter material libraries.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/updated-material-3-progress-indicators.md#_snippet_3\n\nLANGUAGE: Dart\nCODE:\n```\nreturn MaterialApp(\n  theme: ThemeData(progressIndicatorTheme: const ProgressIndicatorThemeData(year2023: false)),\n        // ...\n        CircularProgressIndicator(\n          year2023: false,\n          value: 0.5,\n        ),\n        // ...\n\n```\n\n----------------------------------------\n\nTITLE: Initialize TextEditingController in Flutter\nDESCRIPTION: This code snippet shows how to create a TextEditingController within a StatefulWidget to manage and retrieve text from a TextField. The controller is initialized and then disposed of in the dispose() method to prevent memory leaks.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/forms/retrieve-input.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n// Define a custom Form widget.\nclass MyCustomForm extends StatefulWidget {\n  const MyCustomForm({super.key});\n\n  @override\n  State<MyCustomForm> createState() => _MyCustomFormState();\n}\n\n// Define a corresponding State class.\n// This class holds the data related to the Form.\nclass _MyCustomFormState extends State<MyCustomForm> {\n  // Create a text controller and use it to retrieve the current value\n  // of the TextField.\n  final myController = TextEditingController();\n\n  @override\n  void dispose() {\n    // Clean up the controller when the widget is disposed.\n    myController.dispose();\n    super.dispose();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    // Fill this out in the next step.\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Add Hero Widget to First Screen in Flutter\nDESCRIPTION: This snippet wraps the `Image.network` widget in the `MainScreen` with a `Hero` widget. The `Hero` widget is configured with a `tag` set to 'imageHero', which is crucial for identifying the corresponding `Hero` widget on the destination screen for the animation. The `child` is the widget that will be animated.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/navigation/hero-animations.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nHero(\n  tag: 'imageHero',\n  child: Image.network('https://picsum.photos/250?image=9'),\n)\n```\n\n----------------------------------------\n\nTITLE: Using CurvedAnimation for Animation Easing in Flutter\nDESCRIPTION: This snippet demonstrates an alternative method for creating a custom animation with an easing curve using CurvedAnimation. A CurvedAnimation is initialized with a parent animation and a curve. The Tween then animates the CurvedAnimation to produce the final Animation<Offset> which is used by SlideTransition.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/animation/page-route-animation.md#_snippet_5\n\nLANGUAGE: Dart\nCODE:\n```\ntransitionsBuilder: (context, animation, secondaryAnimation, child) {\n  const begin = Offset(0.0, 1.0);\n  const end = Offset.zero;\n  const curve = Curves.ease;\n\n  final tween = Tween(begin: begin, end: end);\n  final curvedAnimation = CurvedAnimation(parent: animation, curve: curve);\n\n  return SlideTransition(\n    position: tween.animate(curvedAnimation),\n    child: child,\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Find recently modified files Windows Powershell\nDESCRIPTION: Finds recently modified files (within the last day) in the specified directory (`C:\\dev\\example\\`) and its subdirectories.  This command is useful to check what files were changed after adding the `url_launcher` dependency.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/testing/native-debugging.md#_snippet_7\n\nLANGUAGE: powershell\nCODE:\n```\nGet-ChildItem C:\\dev\\example\\ -Rescurse | Where-Object {$_.LastWriteTime -gt (Get-Date).AddDays(-1)}\n```\n\n----------------------------------------\n\nTITLE: Migrating CupertinoContextMenu.previewBuilder in Flutter (Dart)\nDESCRIPTION: This snippet shows how to migrate from the deprecated `previewBuilder` property to the new `builder` property of `CupertinoContextMenu`. The old code used `previewBuilder` to customize the context menu's preview, while the new code uses `builder` to manage the entire animation.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/3-19-deprecations.md#_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nCupertinoContextMenu(\n  previewBuilder: (BuildContext context, Animation<double> animation, Widget child) {\n    return FittedBox(\n      fit: BoxFit.cover,\n      child: ClipRRect(\n        borderRadius: BorderRadius.circular(64.0 * animation.value),\n        child: Image.asset('assets/photo.jpg'),\n      ),\n    );\n  },\n  actions: <Widget>[\n    CupertinoContextMenuAction(\n      child: const Text('Action one'),\n      onPressed: () {},\n    ),\n  ],\n  child: FittedBox(\n    fit: BoxFit.cover,\n    child: Image.asset('assets/photo.jpg'),\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Defining the Dog Data Model\nDESCRIPTION: This snippet defines a `Dog` class with three properties: `id` (an integer), `name` (a string), and `age` (an integer). The `Dog` class represents the data model for storing information about dogs in the SQLite database. The constructor uses the `required` keyword to ensure that these properties are provided when creating an instance of the `Dog` class.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/persistence/sqlite.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nclass Dog {\n  final int id;\n  final String name;\n  final int age;\n\n  const Dog({required this.id, required this.name, required this.age});\n}\n```\n\n----------------------------------------\n\nTITLE: Upgrading Flutter Packages to Latest Possible Versions\nDESCRIPTION: This command updates all dependencies listed in the `pubspec.yaml` file to the latest possible versions, including major version updates. It also updates the constraints in the `pubspec.yaml` file automatically. Use with caution as it may introduce breaking changes.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/upgrade.md#_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ flutter pub upgrade --major-versions\n```\n\n----------------------------------------\n\nTITLE: Changing the Executable Name in CMakeLists.txt (CMake)\nDESCRIPTION: This code snippet shows how to change the name of the generated Windows executable by modifying the `BINARY_NAME` variable in the `windows/CMakeLists.txt` file. This affects the on-disk filename of your application when built using `flutter build windows`.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/platform-integration/windows/building.md#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(windows_desktop_app LANGUAGES CXX)\n\n# The name of the executable created for the application.\n# Change this to change the on-disk name of your application.\nset(BINARY_NAME \"YourNewApp\")\n\ncmake_policy(SET CMP0063 NEW)\n```\n\n----------------------------------------\n\nTITLE: SelectDevicePage Widget for Device Selection\nDESCRIPTION: This StatelessWidget displays a list of nearby devices and allows the user to select one. It takes a callback function `onDeviceSelected` that is called when a device is selected. The page displays a button that simulates selecting a bulb.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/effects/nested-nav.md#_snippet_8\n\nLANGUAGE: Dart\nCODE:\n```\nclass SelectDevicePage extends StatelessWidget {\n  const SelectDevicePage({super.key, required this.onDeviceSelected});\n\n  final void Function(String deviceId) onDeviceSelected;\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: Center(\n        child: Padding(\n          padding: const EdgeInsets.symmetric(horizontal: 24),\n          child: Column(\n            mainAxisSize: MainAxisSize.min,\n            children: [\n              Text(\n                'Select a nearby device:',\n                style: Theme.of(context).textTheme.titleLarge,\n              ),\n              const SizedBox(height: 24),\n              SizedBox(\n                width: double.infinity,\n                height: 54,\n                child: ElevatedButton(\n                  style: ButtonStyle(\n                    backgroundColor: WidgetStateColor.resolveWith((states) {\n                      return const Color(0xFF222222);\n                    }),\n                  ),\n                  onPressed: () {\n                    onDeviceSelected('22n483nk5834');\n                  },\n                  child: const Text(\n                    'Bulb 22n483nk5834',\n                    style: TextStyle(fontSize: 24),\n                  ),\n                ),\n              ),\n            ],\n          ),\n        ),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Releasing App to Snap Store using Snapcraft\nDESCRIPTION: This command uploads the snap file to the Snap Store under a specific channel. The channel determines the target audience and stability level of the release.  The `<channel>` placeholder needs to be replaced with the desired channel (e.g., `stable`, `beta`, `edge`). The `<file>.snap` placeholder should be replaced with the actual filename of the snap package.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/deployment/linux.md#_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\n$ snapcraft upload --release=<channel> <file>.snap\n```\n\n----------------------------------------\n\nTITLE: Dart Table Initialization Before Hot Reload\nDESCRIPTION: This Dart code initializes a `final` list named `sampleTable` containing `Table` widgets. Each `Table` widget contains a single `TableRow` with a `Text` widget. This code represents the initial state of the table data.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/tools/hot-reload.md#_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nfinal sampleTable = [\n  Table(\n    children: const [\n      TableRow(children: [Text('T1')]),\n    ],\n  ),\n  Table(\n    children: const [\n      TableRow(children: [Text('T2')]),\n    ],\n  ),\n  Table(\n    children: const [\n      TableRow(children: [Text('T3')]),\n    ],\n  ),\n  Table(\n    children: const [\n      TableRow(children: [Text('T4')]),\n    ],\n  ),\n];\n```\n\n----------------------------------------\n\nTITLE: Migrating from ModalRoute.add/removeScopedWillPopCallback to ModalRoute.(un)registerPopEntry - Dart\nDESCRIPTION: This snippet demonstrates migrating from `ModalRoute.add/removeScopedWillPopCallback` to `ModalRoute.(un)registerPopEntry`. It shows how to register and unregister a `PopScope` using the new methods within the `didChangeDependencies` lifecycle method.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/android-predictive-back.md#_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\n@override\nvoid didChangeDependencies() {\n  super.didChangeDependencies();\n  _route?.unregisterPopEntry(this);\n  _route = ModalRoute.of(context);\n  _route?.registerPopEntry(this);\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Sentry SDK in Flutter (Dart)\nDESCRIPTION: This snippet initializes the Sentry SDK within a Flutter application using the `SentryFlutter.init` method. It sets the DSN (Data Source Name) for your Sentry project and provides a callback to run the main application.  It's crucial to import necessary packages and replace the placeholder DSN with your actual Sentry DSN.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/maintenance/error-reporting.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/widgets.dart';\nimport 'package:sentry_flutter/sentry_flutter.dart';\n\nFuture<void> main() async {\n  await SentryFlutter.init(\n    (options) => options.dsn = 'https://example@sentry.io/example',\n    appRunner: () => runApp(const MyApp()),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: ConstrainedBox with Larger Child Size in Flutter\nDESCRIPTION: This example shows a ConstrainedBox with a child Container that desires a size larger than the maximum constraints. The Center widget allows the ConstrainedBox to size itself freely. The ConstrainedBox enforces its maximum constraints on the child Container, resulting in the Container being sized to the maximum allowed.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/layout/constraints.md#_snippet_41\n\nLANGUAGE: dart\nCODE:\n```\nCenter(\n  child: ConstrainedBox(\n    constraints: const BoxConstraints(\n      minWidth: 70,\n      minHeight: 70,\n      maxWidth: 150,\n      maxHeight: 150,\n    ),\n    child: Container(color: red, width: 1000, height: 1000),\n  ),\n)\n```\n\n----------------------------------------\n\nTITLE: Creating LocationListItem Widget in Flutter\nDESCRIPTION: This snippet defines the LocationListItem widget, responsible for displaying a rounded-rectangle card with an image, a gradient, and text. It utilizes Stack, Positioned, Image.network, DecoratedBox, and Text widgets to achieve the desired visual appearance. The image is fetched from a network URL.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/effects/parallax-scrolling.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\n@immutable\nclass LocationListItem extends StatelessWidget {\n  const LocationListItem({\n    super.key,\n    required this.imageUrl,\n    required this.name,\n    required this.country,\n  });\n\n  final String imageUrl;\n  final String name;\n  final String country;\n\n  @override\n  Widget build(BuildContext context) {\n    return Padding(\n      padding: const EdgeInsets.symmetric(horizontal: 24, vertical: 16),\n      child: AspectRatio(\n        aspectRatio: 16 / 9,\n        child: ClipRRect(\n          borderRadius: BorderRadius.circular(16),\n          child: Stack(\n            children: [\n              _buildParallaxBackground(context),\n              _buildGradient(),\n              _buildTitleAndSubtitle(),\n            ],\n          ),\n        ),\n      ),\n    );\n  }\n\n  Widget _buildParallaxBackground(BuildContext context) {\n    return Positioned.fill(child: Image.network(imageUrl, fit: BoxFit.cover));\n  }\n\n  Widget _buildGradient() {\n    return Positioned.fill(\n      child: DecoratedBox(\n        decoration: BoxDecoration(\n          gradient: LinearGradient(\n            colors: [Colors.transparent, Colors.black.withValues(alpha: 0.7)],\n            begin: Alignment.topCenter,\n            end: Alignment.bottomCenter,\n            stops: const [0.6, 0.95],\n          ),\n        ),\n      ),\n    );\n  }\n\n  Widget _buildTitleAndSubtitle() {\n    return Positioned(\n      left: 20,\n      bottom: 20,\n      child: Column(\n        mainAxisSize: MainAxisSize.min,\n        crossAxisAlignment: CrossAxisAlignment.start,\n        children: [\n          Text(\n            name,\n            style: const TextStyle(\n              color: Colors.white,\n              fontSize: 20,\n              fontWeight: FontWeight.bold,\n            ),\n          ),\n          Text(\n            country,\n            style: const TextStyle(color: Colors.white, fontSize: 14),\n          ),\n        ],\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Styling TextButton to resemble FlatButton in Dart\nDESCRIPTION: This code snippet demonstrates how to style a `TextButton` to visually resemble a deprecated `FlatButton` using the `ButtonStyle` API.  It sets the foreground color, minimum size, padding, and shape to match the original `FlatButton` appearance.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/buttons.md#_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nfinal ButtonStyle flatButtonStyle = TextButton.styleFrom(\n  foregroundColor: Colors.black87,\n  minimumSize: Size(88, 36),\n  padding: EdgeInsets.symmetric(horizontal: 16),\n  shape: const RoundedRectangleBorder(\n    borderRadius: BorderRadius.all(Radius.circular(2)),\n  ),\n);\n\nTextButton(\n  style: flatButtonStyle,\n  onPressed: () { },\n  child: Text('Looks like a FlatButton'),\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Progress Indicator and ListView Flutter\nDESCRIPTION: This code snippet demonstrates the full implementation of a Flutter app that fetches data from a network and displays a progress indicator while loading. It shows a `CircularProgressIndicator` if data is empty, and a `ListView` with fetched data otherwise. The `http` package is used to make network calls.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/uikit-devs.md#_snippet_31\n\nLANGUAGE: Dart\nCODE:\n```\nimport 'dart:convert';\n\nimport 'package:flutter/material.dart';\nimport 'package:http/http.dart' as http;\n\nvoid main() {\n  runApp(const SampleApp());\n}\n\nclass SampleApp extends StatelessWidget {\n  const SampleApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return const MaterialApp(title: 'Sample App', home: SampleAppPage());\n  }\n}\n\nclass SampleAppPage extends StatefulWidget {\n  const SampleAppPage({super.key});\n\n  @override\n  State<SampleAppPage> createState() => _SampleAppPageState();\n}\n\nclass _SampleAppPageState extends State<SampleAppPage> {\n  List<Map<String, Object?>> data = [];\n\n  @override\n  void initState() {\n    super.initState();\n    loadData();\n  }\n\n  bool get showLoadingDialog => data.isEmpty;\n\n  Future<void> loadData() async {\n    final Uri dataURL = Uri.parse('https://jsonplaceholder.typicode.com/posts');\n    final http.Response response = await http.get(dataURL);\n    setState(() {\n      data = (jsonDecode(response.body) as List).cast<Map<String, Object?>>();\n    });\n  }\n\n  Widget getBody() {\n    if (showLoadingDialog) {\n      return getProgressDialog();\n    }\n\n    return getListView();\n  }\n\n  Widget getProgressDialog() {\n    return const Center(child: CircularProgressIndicator());\n  }\n\n  ListView getListView() {\n    return ListView.builder(\n      itemCount: data.length,\n      itemBuilder: (context, index) {\n        return getRow(index);\n      },\n    );\n  }\n\n  Widget getRow(int i) {\n    return Padding(\n      padding: const EdgeInsets.all(10),\n      child: Text(\"Row ${data[i][\"title\"]}\"),\n    );\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: const Text('Sample App')),\n      body: getBody(),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating to SegmentedButton in Flutter\nDESCRIPTION: This snippet demonstrates replacing ToggleButtons with the new SegmentedButton widget in Flutter. SegmentedButton uses fully rounded corners, differs in layout height and size, and uses a Dart Set to determine selected items. This requires manual migration.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/material-3-migration.md#_snippet_17\n\nLANGUAGE: dart\nCODE:\n```\nenum Weather { cloudy, rainy, sunny }\n\nToggleButtons(\n  isSelected: const [false, true, false],\n  onPressed: (int newSelection) { },\n  children: const <Widget>[\n    Icon(Icons.cloud_outlined),\n    Icon(Icons.beach_access_sharp),\n    Icon(Icons.brightness_5_sharp),\n  ],\n),\n```\n\n----------------------------------------\n\nTITLE: Creating a GridView with Maximum Tile Extent in Flutter (Dart)\nDESCRIPTION: This snippet shows how to create a GridView with a specified maximum tile width using `GridView.extent`. The `maxCrossAxisExtent` property controls the maximum width of each tile, and padding and spacing are added for visual clarity.  It requires a list of widgets to be passed in as children.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/layout/index.md#_snippet_17\n\nLANGUAGE: dart\nCODE:\n```\nWidget _buildGrid() => GridView.extent(\n  maxCrossAxisExtent: 150,\n  padding: const EdgeInsets.all(4),\n  mainAxisSpacing: 4,\n  crossAxisSpacing: 4,\n  children: _buildGridTileList(30),\n);\n\n// The images are saved with names pic0.jpg, pic1.jpg...pic29.jpg.\n// The List.generate() constructor allows an easy way to create\n// a list when objects have a predictable naming pattern.\nList<Widget> _buildGridTileList(int count) =>\n    List.generate(count, (i) => Image.asset('images/pic$i.jpg'));\n```\n\n----------------------------------------\n\nTITLE: Container with Dimensions Inside ConstrainedBox in Flutter\nDESCRIPTION: This snippet shows a Container with dimensions within the min/max bounds of a ConstrainedBox, inside a Center widget. The Container will take the size specified, since it is within the bounds provided by the ConstrainedBox.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/layout/constraints.md#_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\nCenter(\n   child: ConstrainedBox(\n      constraints: BoxConstraints(\n                 minWidth: 70, minHeight: 70,\n                 maxWidth: 150, maxHeight: 150),\n        child: Container(color: red, width: 100, height: 100))))\n```\n\n----------------------------------------\n\nTITLE: Enabling Performance Overlay - Flutter (Dart)\nDESCRIPTION: This code snippet shows how to enable the `PerformanceOverlay` widget in a Flutter app by setting the `showPerformanceOverlay` property to `true` in the `MaterialApp` constructor. This overlay provides graphs to interpret performance metrics.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/testing/code-debugging.md#_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\n\nclass MyApp extends StatelessWidget {\n  const MyApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      showPerformanceOverlay: true,\n      title: 'My Awesome App',\n      theme: ThemeData(\n        colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),\n      ),\n      home: const MyHomePage(title: 'My Awesome App'),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Box Shadows - Dart\nDESCRIPTION: This Dart code snippet adds two box shadows to a Container using the `boxShadow` property of a `BoxDecoration`. Two `BoxShadow` widgets are defined with different offsets, blur radii, and colors to create a layered shadow effect.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/web-devs.md#_snippet_22\n\nLANGUAGE: dart\nCODE:\n```\nfinal container = Container(\n  // grey box\n  width: 320,\n  height: 240,\n  margin: const EdgeInsets.only(bottom: 16),\n  decoration: BoxDecoration(\n    color: Colors.grey[300],\n  ),\n  child: Center(\n    child: Container(\n      // red box\n      padding: const EdgeInsets.all(16),\n      decoration: BoxDecoration(\n        color: Colors.red[400],\n        boxShadow: const <BoxShadow>[\n          BoxShadow(\n            color: Color(0xcc000000),\n            offset: Offset(0, 2),\n            blurRadius: 4,\n          ),\n          BoxShadow(\n            color: Color(0x80000000),\n            offset: Offset(0, 6),\n            blurRadius: 20,\n          ),\n        ],\n      ),\n      child: Text(\n        'Lorem ipsum',\n        style: bold24Roboto,\n      ),\n    ),\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Tap Action Integration Test\nDESCRIPTION: This snippet demonstrates how to perform a tap action on a widget using integration_test. It uses `tester.tap` to perform the tap and `tester.pumpAndSettle` to wait for the UI to update. It verifies the presence or absence of widgets using `expect` with `findsOneWidget` and `findsNothing` matchers.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/flutter-driver-migration.md#_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\ntestWidgets('tap on the first item (Alder), verify selected', (tester) async {\n  await tester.pumpWidget(const PlantsApp());\n\n  // wait for data to load\n  await tester.pumpAndSettle();\n\n  // find the item by text\n  final item = find.text('Alder');\n\n  // assert item is found\n  expect(item, findsOneWidget);\n\n  // Emulate a tap on the tile item.\n  await tester.tap(item);\n  await tester.pumpAndSettle();\n\n  // Species name should be displayed\n  expect(find.text('Alnus'), findsOneWidget);\n\n  // 'please select' text should not be displayed\n  expect(find.text('Please select a plant from the list.'), findsNothing);\n});\n```\n\n----------------------------------------\n\nTITLE: Applying Button Themes in MaterialApp in Dart\nDESCRIPTION: This code snippet demonstrates how to configure the new button themes in the application's `ThemeData` to restore the default appearance for buttons throughout the application. It uses `TextButtonThemeData`, `ElevatedButtonThemeData`, and `OutlinedButtonThemeData` to apply styles to the respective button types.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/buttons.md#_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nMaterialApp(\n  theme: ThemeData.from(colorScheme: ColorScheme.light()).copyWith(\n    textButtonTheme: TextButtonThemeData(style: flatButtonStyle),\n    elevatedButtonTheme: ElevatedButtonThemeData(style: raisedButtonStyle),\n    outlinedButtonTheme: OutlinedButtonThemeData(style: outlineButtonStyle),\n  ),\n)\n```\n\n----------------------------------------\n\nTITLE: Accessing Visual Density in Custom Flutter Views\nDESCRIPTION: This code snippet demonstrates how to access the current `VisualDensity` inside your own custom views in Flutter. It uses `Theme.of(context).visualDensity` to retrieve the `VisualDensity` set in the `MaterialApp` theme.  The obtained `VisualDensity` can be used to adjust the layout and sizing of custom widgets.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/adaptive-responsive/input.md#_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\nVisualDensity density = Theme.of(context).visualDensity;\n```\n\n----------------------------------------\n\nTITLE: Snapcraft Grade, Confinement, Base YAML Example\nDESCRIPTION: This YAML snippet specifies the grade, confinement, and base for the snap. Confinement defines the level of access the application has to system resources. The base defines the core root filesystem used by the snap.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/deployment/linux.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nconfinement: strict\nbase: core18\ngrade: stable\n```\n\n----------------------------------------\n\nTITLE: Verify Widget Display Flutter Driver\nDESCRIPTION: This snippet demonstrates how to verify that a widget is displayed using flutter_driver. It uses the `waitFor` method to wait until the finder can locate the widget. The test fails if the widget cannot be found.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/flutter-driver-migration.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\ntest(\n  'do not select any item, verify please select text is displayed',\n  () async {\n    // Wait for 'please select' text is displayed\n    await driver.waitFor(find.text('Please select a plant from the list.'));\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Adding HTTP Dependency in Flutter\nDESCRIPTION: This YAML snippet shows how to add the `http` package as a dependency in your Flutter project using `pubspec.yaml`.  This package simplifies making network requests in your Flutter application. After adding the dependency, you need to run `flutter pub get` to fetch the package.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/xamarin-forms-devs.md#_snippet_26\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  http: ^1.1.0\n```\n\n----------------------------------------\n\nTITLE: UnconstrainedBox Example in Flutter\nDESCRIPTION: This example shows how UnconstrainedBox allows its child to be any size it wants, ignoring parent constraints. The Container's width and height are set, and the UnconstrainedBox permits these dimensions regardless of external constraints.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/layout/constraints.md#_snippet_43\n\nLANGUAGE: dart\nCODE:\n```\nUnconstrainedBox(\n  child: Container(color: red, width: 20, height: 50),\n)\n```\n\n----------------------------------------\n\nTITLE: Migrate TextInputFormatters in Dart\nDESCRIPTION: This snippet demonstrates how to migrate from the deprecated `BlacklistingTextInputFormatter` and `WhitelistingTextInputFormatter` classes to the new `FilteringTextInputFormatter` class. It shows how to replace the blacklisting and whitelisting formatters with the corresponding `FilteringTextInputFormatter.deny()` and `FilteringTextInputFormatter.allow()` methods, respectively.  It also shows how to access the pattern after migration.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/2-5-deprecations.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nformatter = BlacklistingTextInputFormatter(pattern, replacementString: 'replacedPattern');\nformatter = BlacklistingTextInputFormatter.singleLineFormatter;\npattern = formatter.blacklistedPattern;\nformatter = WhitelistingTextInputFormatter(pattern);\nformatter = WhitelistingTextInputFormatter.digitsOnly;\npattern = formatter.whitelistedPattern;\n```\n\nLANGUAGE: dart\nCODE:\n```\nformatter = FilteringTextInputFormatter.deny(pattern, replacementString: 'replacedPattern');\nformatter = FilteringTextInputFormatter.singleLineFormatter;\npattern = formatter.filterPattern;\nformatter = FilteringTextInputFormatter.allow(pattern);\nformatter = FilteringTextInputFormatter.digitsOnly;\npattern = formatter.filterPattern;\n```\n\n----------------------------------------\n\nTITLE: Nested Centered Containers with colors Flutter\nDESCRIPTION: This snippet creates a Center widget containing a red Container, which contains a green Container with a specified width and height.  The red container sizes itself to the size of its child (the green container).\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/layout/constraints.md#_snippet_37\n\nLANGUAGE: dart\nCODE:\n```\nCenter(\n  child: Container(\n    color: red,\n    child: Container(color: green, width: 30, height: 30),\n  ),\n)\n```\n\n----------------------------------------\n\nTITLE: Dumping Layer Tree in Flutter\nDESCRIPTION: This code snippet demonstrates how to call the `debugDumpLayerTree()` function in a Flutter application. This function prints the layer tree to the console, which is useful for debugging compositing issues. The code defines a simple Flutter app with a button that, when pressed, calls the `debugDumpLayerTree()` function.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/testing/code-debugging.md#_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\n\nvoid main() {\n  runApp(const MaterialApp(home: AppHome()));\n}\n\nclass AppHome extends StatelessWidget {\n  const AppHome({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return Material(\n      child: Center(\n        child: TextButton(\n          onPressed: () {\n            debugDumpLayerTree();\n          },\n          child: const Text('Dump Layer Tree'),\n        ),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Animate opacity with AnimatedOpacity - Set animation trigger\nDESCRIPTION: This snippet configures the onPressed() handler of the TextButton to trigger the animation.  When the button is pressed, the setState() method updates the opacity to 1.0, causing the AnimatedOpacity widget to animate the opacity change.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/codelabs/implicit-animations.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\n  TextButton(\n    child: const Text(\n      'Show Details',\n      style: TextStyle(color: Colors.blueAccent),\n    ),\n-   onPressed: () => {},\n+   onPressed: () => setState(() {\n+     opacity = 1;\n+   }),\n  ),\n```\n\n----------------------------------------\n\nTITLE: Packing Widgets in a Row\nDESCRIPTION: This snippet uses the `mainAxisSize` property of the `Row` widget to pack its children closely together. Setting `mainAxisSize` to `MainAxisSize.min` causes the row to occupy only the space needed to contain its children. It utilizes `Icon` widgets to display star icons with green and black colors.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/layout/index.md#_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nRow(\n  mainAxisSize: MainAxisSize.min,\n  children: [\n    Icon(Icons.star, color: Colors.green[500]),\n    Icon(Icons.star, color: Colors.green[500]),\n    Icon(Icons.star, color: Colors.green[500]),\n    const Icon(Icons.star, color: Colors.black),\n    const Icon(Icons.star, color: Colors.black),\n  ],\n)\n```\n\n----------------------------------------\n\nTITLE: Define a stateless DownloadButton widget in Dart\nDESCRIPTION: This code defines a new stateless widget called `DownloadButton`. It's a basic structure for a button that will later be enhanced with visual states and functionality. Currently, it returns an empty `SizedBox`.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/effects/download-button.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n@immutable\nclass DownloadButton extends StatelessWidget {\n  const DownloadButton({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    // TODO:\n    return const SizedBox();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Flutter Download Button Example\nDESCRIPTION: This Dart code implements a Flutter application featuring a download button that changes states based on a simulated download progress. It includes UI elements to display the button and its current state (GET, Downloading, OPEN). The example uses StatefulWidget to manage the download state.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/effects/download-button.md#_snippet_7\n\nLANGUAGE: Dart\nCODE:\n```\nimport 'package:flutter/cupertino.dart';\nimport 'package:flutter/material.dart';\n\nvoid main() {\n  runApp(\n    const MaterialApp(\n      home: ExampleCupertinoDownloadButton(),\n      debugShowCheckedModeBanner: false,\n    ),\n  );\n}\n\n@immutable\nclass ExampleCupertinoDownloadButton extends StatefulWidget {\n  const ExampleCupertinoDownloadButton({super.key});\n\n  @override\n  State<ExampleCupertinoDownloadButton> createState() =>\n      _ExampleCupertinoDownloadButtonState();\n}\n\nclass _ExampleCupertinoDownloadButtonState\n    extends State<ExampleCupertinoDownloadButton> {\n  late final List<DownloadController> _downloadControllers;\n\n  @override\n  void initState() {\n    super.initState();\n    _downloadControllers = List<DownloadController>.generate(\n      20,\n      (index) => SimulatedDownloadController(\n        onOpenDownload: () {\n          _openDownload(index);\n        },\n      ),\n    );\n  }\n\n  void _openDownload(int index) {\n    ScaffoldMessenger.of(\n      context,\n    ).showSnackBar(SnackBar(content: Text('Open App ${index + 1}')));\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: const Text('Apps')),\n      body: ListView.separated(\n        itemCount: _downloadControllers.length,\n        separatorBuilder: (_, __) => const Divider(),\n        itemBuilder: _buildListItem,\n      ),\n    );\n  }\n\n  Widget _buildListItem(BuildContext context, int index) {\n    final theme = Theme.of(context);\n    final downloadController = _downloadControllers[index];\n\n    return ListTile(\n      leading: const DemoAppIcon(),\n      title: Text(\n        'App ${index + 1}',\n        overflow: TextOverflow.ellipsis,\n        style: theme.textTheme.titleLarge,\n      ),\n      subtitle: Text(\n        'Lorem ipsum dolor #${index + 1}',\n        overflow: TextOverflow.ellipsis,\n        style: theme.textTheme.bodySmall,\n      ),\n      trailing: SizedBox(\n        width: 96,\n        child: AnimatedBuilder(\n          animation: downloadController,\n          builder: (context, child) {\n            return DownloadButton(\n              status: downloadController.downloadStatus,\n              downloadProgress: downloadController.progress,\n              onDownload: downloadController.startDownload,\n              onCancel: downloadController.stopDownload,\n              onOpen: downloadController.openDownload,\n            );\n          },\n        ),\n      ),\n    );\n  }\n}\n\n@immutable\nclass DemoAppIcon extends StatelessWidget {\n  const DemoAppIcon({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return const AspectRatio(\n      aspectRatio: 1,\n      child: FittedBox(\n        child: SizedBox(\n          width: 80,\n          height: 80,\n          child: DecoratedBox(\n            decoration: BoxDecoration(\n              gradient: LinearGradient(colors: [Colors.red, Colors.blue]),\n              borderRadius: BorderRadius.all(Radius.circular(20)),\n            ),\n            child: Center(\n              child: Icon(Icons.ac_unit, color: Colors.white, size: 40),\n            ),\n          ),\n        ),\n      ),\n    );\n  }\n}\n\nenum DownloadStatus { notDownloaded, fetchingDownload, downloading, downloaded }\n\nabstract class DownloadController implements ChangeNotifier {\n  DownloadStatus get downloadStatus;\n  double get progress;\n\n  void startDownload();\n  void stopDownload();\n  void openDownload();\n}\n\nclass SimulatedDownloadController extends DownloadController\n    with ChangeNotifier {\n  SimulatedDownloadController({\n    DownloadStatus downloadStatus = DownloadStatus.notDownloaded,\n    double progress = 0.0,\n    required VoidCallback onOpenDownload,\n  }) : _downloadStatus = downloadStatus,\n       _progress = progress,\n       _onOpenDownload = onOpenDownload;\n\n  DownloadStatus _downloadStatus;\n  @override\n  DownloadStatus get downloadStatus => _downloadStatus;\n\n  double _progress;\n  @override\n  double get progress => _progress;\n\n  final VoidCallback _onOpenDownload;\n\n  bool _isDownloading = false;\n\n  @override\n  void startDownload() {\n    if (downloadStatus == DownloadStatus.notDownloaded) {\n      _doSimulatedDownload();\n    }\n  }\n\n  @override\n  void stopDownload() {\n    if (_isDownloading) {\n      _isDownloading = false;\n      _downloadStatus = DownloadStatus.notDownloaded;\n      _progress = 0.0;\n      notifyListeners();\n    }\n  }\n\n  @override\n  void openDownload() {\n    if (downloadStatus == DownloadStatus.downloaded) {\n      _onOpenDownload();\n    }\n  }\n\n  Future<void> _doSimulatedDownload() async {\n    _isDownloading = true;\n    _downloadStatus = DownloadStatus.fetchingDownload;\n    notifyListeners();\n\n    // Wait a second to simulate fetch time.\n    await Future<void>.delayed(const Duration(seconds: 1));\n\n    // If the user chose to cancel the download, stop the simulation.\n    if (!_isDownloading) {\n      return;\n    }\n\n    // Shift to the downloading phase.\n    _downloadStatus = DownloadStatus.downloading;\n    notifyListeners();\n\n    const downloadProgressStops = [0.0, 0.15, 0.45, 0.8, 1.0];\n    for (final stop in downloadProgressStops) {\n      // Wait a second to simulate varying download speeds.\n      await Future<void>.delayed(const Duration(seconds: 1));\n\n      // If the user chose to cancel the download, stop the simulation.\n      if (!_isDownloading) {\n        return;\n      }\n\n      // Update the download progress.\n      _progress = stop;\n      notifyListeners();\n    }\n\n    // Wait a second to simulate a final delay.\n    await Future<void>.delayed(const Duration(seconds: 1));\n\n    // If the user chose to cancel the download, stop the simulation.\n    if (!_isDownloading) {\n      return;\n    }\n\n    // Shift to the downloaded state, completing the simulation.\n    _downloadStatus = DownloadStatus.downloaded;\n    _isDownloading = false;\n    notifyListeners();\n  }\n}\n\n@immutable\nclass DownloadButton extends StatelessWidget {\n  const DownloadButton({\n    super.key,\n    required this.status,\n    this.downloadProgress = 0.0,\n    required this.onDownload,\n    required this.onCancel,\n    required this.onOpen,\n    this.transitionDuration = const Duration(milliseconds: 500),\n  });\n\n  final DownloadStatus status;\n  final double downloadProgress;\n  final VoidCallback onDownload;\n  final VoidCallback onCancel;\n  final VoidCallback onOpen;\n  final Duration transitionDuration;\n\n  bool get _isDownloading => status == DownloadStatus.downloading;\n\n  bool get _isFetching => status == DownloadStatus.fetchingDownload;\n\n  bool get _isDownloaded => status == DownloadStatus.downloaded;\n\n  void _onPressed() {\n    switch (status) {\n      case DownloadStatus.notDownloaded:\n        onDownload();\n      case DownloadStatus.fetchingDownload:\n        // do nothing.\n        break;\n      case DownloadStatus.downloading:\n        onCancel();\n      case DownloadStatus.downloaded:\n        onOpen();\n    }\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return GestureDetector(\n      onTap: _onPressed,\n      child: Stack(\n        children: [\n          ButtonShapeWidget(\n            transitionDuration: transitionDuration,\n            isDownloaded: _isDownloaded,\n            isDownloading: _isDownloading,\n            isFetching: _isFetching,\n          ),\n          Positioned.fill(\n            child: AnimatedOpacity(\n              duration: transitionDuration,\n              opacity: _isDownloading || _isFetching ? 1.0 : 0.0,\n              curve: Curves.ease,\n              child: Stack(\n                alignment: Alignment.center,\n                children: [\n                  ProgressIndicatorWidget(\n                    downloadProgress: downloadProgress,\n                    isDownloading: _isDownloading,\n                    isFetching: _isFetching,\n                  ),\n                  if (_isDownloading)\n                    const Icon(\n                      Icons.stop,\n                      size: 14,\n                      color: CupertinoColors.activeBlue,\n                    ),\n                ],\n              ),\n            ),\n          ),\n        ],\n      ),\n    );\n  }\n}\n\n@immutable\nclass ButtonShapeWidget extends StatelessWidget {\n  const ButtonShapeWidget({\n    super.key,\n    required this.isDownloading,\n    required this.isDownloaded,\n    required this.isFetching,\n    required this.transitionDuration,\n  });\n\n  final bool isDownloading;\n  final bool isDownloaded;\n  final bool isFetching;\n  final Duration transitionDuration;\n\n  @override\n  Widget build(BuildContext context {\n    final ShapeDecoration shape;\n    if (isDownloading || isFetching {\n      shape = const ShapeDecoration(\n        shape: CircleBorder(),\n        color: Colors.transparent,\n      );\n    } else {\n      shape = const ShapeDecoration(\n        shape: StadiumBorder(),\n        color: CupertinoColors.lightBackgroundGray,\n      );\n    }\n\n    return AnimatedContainer(\n      duration: transitionDuration,\n      curve: Curves.ease,\n      width: double.infinity,\n      decoration: shape,\n      child: Padding(\n        padding: const EdgeInsets.symmetric(vertical: 6),\n        child: AnimatedOpacity(\n          duration: transitionDuration,\n          opacity: isDownloading || isFetching ? 0.0 : 1.0,\n          curve: Curves.ease,\n          child: Text(\n            isDownloaded ? 'OPEN' : 'GET',\n            textAlign: TextAlign.center,\n            style: Theme.of(context).textTheme.labelLarge?.copyWith(\n              fontWeight: FontWeight.bold,\n              color: CupertinoColors.activeBlue,\n            ),\n          ),\n        ),\n      ),\n    );\n  }\n}\n\n@immutable\n```\n\n----------------------------------------\n\nTITLE: Add FlutterActivity to AndroidManifest.xml\nDESCRIPTION: This XML snippet demonstrates how to register the `FlutterActivity` in the `AndroidManifest.xml` file. The activity declaration includes configuration changes, hardware acceleration, and input mode adjustments. It specifies a theme that defines the appearance of the activity.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/add-to-app/android/add-flutter-screen.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<activity\n  android:name=\"io.flutter.embedding.android.FlutterActivity\"\n  android:theme=\"@style/LaunchTheme\"\n  android:configChanges=\"orientation|keyboardHidden|keyboard|screenSize|locale|layoutDirection|fontScale|screenLayout|density|uiMode\"\n  android:hardwareAccelerated=\"true\"\n  android:windowSoftInputMode=\"adjustResize\"\n  />\n```\n\n----------------------------------------\n\nTITLE: Generalized Test App Setup in Flutter (Dart)\nDESCRIPTION: This snippet presents a generalized `testApp` function used for setting up the widget testing environment. It configures the `WidgetTester`, sets the device pixel ratio and surface size, and wraps the provided widget `body` within a `MaterialApp` with necessary configurations like localization delegates and theme. A mocked router can also be injected through `InheritedGoRouter`.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/app-architecture/case-study/testing.md#_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nvoid testApp(\n  WidgetTester tester,\n  Widget body, { \n  GoRouter? goRouter,\n}) async {\n  tester.view.devicePixelRatio = 1.0;\n  await tester.binding.setSurfaceSize(const Size(1200, 800));\n  await mockNetworkImages(() async {\n    await tester.pumpWidget(\n      MaterialApp(\n        localizationsDelegates: [\n          GlobalWidgetsLocalizations.delegate,\n          GlobalMaterialLocalizations.delegate,\n          AppLocalizationDelegate(),\n        ],\n        theme: AppTheme.lightTheme,\n        home: InheritedGoRouter(\n          goRouter: goRouter ?? MockGoRouter(),\n          child: Scaffold(\n            body: body,\n          ),\n        ),\n      ),\n    );\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Running Flutter with Custom Dart Entrypoint and Library (Swift)\nDESCRIPTION: This Swift code snippet shows how to run a Flutter application with a custom Dart entrypoint and library URI. It uses the `run(withEntrypoint:libraryURI:)` method of the `FlutterEngine` to specify a function other than `main()` in a different file. Requires importing the Flutter framework.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/add-to-app/ios/add-flutter-screen.md#_snippet_14\n\nLANGUAGE: Swift\nCODE:\n```\nflutterEngine.run(withEntrypoint: \"myOtherEntrypoint\", libraryURI: \"other_file.dart\")\n```\n\n----------------------------------------\n\nTITLE: Corrected Navigator Setup with HeroControllerScope Flutter\nDESCRIPTION: This code shows the corrected approach by introducing separate HeroControllerScope widgets for each Navigator. Each HeroControllerScope is associated with a different HeroController, ensuring that each Navigator has its own scope and avoiding the assertion error.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/hero-controller-scope.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\n\nvoid main() {\n  runApp(\n    MaterialApp(\n      builder: (BuildContext context, Widget child) {\n        // Builds two parallel navigators.\n        return Stack(\n          children: <Widget>[\n            HeroControllerScope(\n              controller: MaterialApp.createMaterialHeroController(),\n              child: Navigator(\n                onGenerateRoute: (RouteSettings settings) {\n                  return MaterialPageRoute<void>(\n                    settings: settings,\n                    builder: (BuildContext context) {\n                      return const Text('first Navigator');\n                    }\n                  );\n                },\n              ),\n            ),\n            HeroControllerScope(\n              controller: MaterialApp.createMaterialHeroController(),\n              child: Navigator(\n                onGenerateRoute: (RouteSettings settings) {\n                  return MaterialPageRoute<void>(\n                    settings: settings,\n                    builder: (BuildContext context) {\n                      return const Text('second Navigator');\n                    }\n                  );\n                },\n              ),\n            ),\n          ],\n        );\n      }\n    )\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic ListView in Flutter\nDESCRIPTION: This code snippet demonstrates how to create a basic ListView with three ListTile widgets, each containing an icon and text. The ListView is populated with static data, creating a simple, non-interactive list.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/lists/basic-list.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nListView(\n  children: const <Widget>[\n    ListTile(leading: Icon(Icons.map), title: Text('Map')),\n    ListTile(leading: Icon(Icons.photo_album), title: Text('Album')),\n    ListTile(leading: Icon(Icons.phone), title: Text('Phone')),\n  ],\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Cupertino Icons dependency in Flutter\nDESCRIPTION: This YAML snippet shows how to add a dependency for `cupertino_icons` in the `pubspec.yaml` file.  This enables the use of iOS-style icons in a Flutter application.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/react-native-devs.md#_snippet_31\n\nLANGUAGE: yaml\nCODE:\n```\nname: my_awesome_application\ndependencies:\n  cupertino_icons: ^1.0.8\n```\n\n----------------------------------------\n\nTITLE: Animate Shimmer Gradient in Flutter\nDESCRIPTION: Configures an `AnimationController` in the `ShimmerState` class to animate the shimmer gradient. The `AnimationController` repeats between -0.5 and 1.5 with a period of 1000 milliseconds. This creates the appearance of motion.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/effects/shimmer-loading.md#_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\nclass ShimmerState extends State<Shimmer> with SingleTickerProviderStateMixin {\n  late AnimationController _shimmerController;\n\n  @override\n  void initState() {\n    super.initState();\n\n    _shimmerController = AnimationController.unbounded(vsync: this)\n      ..repeat(min: -0.5, max: 1.5, period: const Duration(milliseconds: 1000));\n  }\n\n  @override\n  void dispose() {\n    _shimmerController.dispose();\n    super.dispose();\n  }\n  }\n```\n\n----------------------------------------\n\nTITLE: Defining Localized Resources with DemoLocalizations - Dart\nDESCRIPTION: This code defines a `DemoLocalizations` class that manages localized strings directly within the class using a `Map`. It provides a static `of` method to access the localizations and a `title` getter to retrieve the localized title based on the current locale. The languages method returns a list of available languages.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/accessibility-and-internationalization/internationalization.md#_snippet_38\n\nLANGUAGE: dart\nCODE:\n```\nclass DemoLocalizations {\n  DemoLocalizations(this.locale);\n\n  final Locale locale;\n\n  static DemoLocalizations of(BuildContext context) {\n    return Localizations.of<DemoLocalizations>(context, DemoLocalizations)!;\n  }\n\n  static const _localizedValues = <String, Map<String, String>>{\n    'en': {'title': 'Hello World'},\n    'es': {'title': 'Hola Mundo'},\n  };\n\n  static List<String> languages() => _localizedValues.keys.toList();\n\n  String get title {\n    return _localizedValues[locale.languageCode]!['title']!;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Supported Locales for Chinese Variants - Dart\nDESCRIPTION: This code snippet demonstrates how to define supported locales for different variants of the Chinese language using Locale.fromSubtags(). This includes specifying language code, script code, and country code to differentiate between simplified and traditional Chinese, as well as regional variations.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/accessibility-and-internationalization/internationalization.md#_snippet_25\n\nLANGUAGE: Dart\nCODE:\n```\nsupportedLocales: [\n  Locale.fromSubtags(languageCode: 'zh'), // generic Chinese 'zh'\n  Locale.fromSubtags(\n    languageCode: 'zh',\n    scriptCode: 'Hans',\n  ), // generic simplified Chinese 'zh_Hans'\n  Locale.fromSubtags(\n    languageCode: 'zh',\n    scriptCode: 'Hant',\n  ), // generic traditional Chinese 'zh_Hant'\n  Locale.fromSubtags(\n    languageCode: 'zh',\n    scriptCode: 'Hans',\n    countryCode: 'CN',\n  ), // 'zh_Hans_CN'\n  Locale.fromSubtags(\n    languageCode: 'zh',\n    scriptCode: 'Hant',\n    countryCode: 'TW',\n  ), // 'zh_Hant_TW'\n  Locale.fromSubtags(\n    languageCode: 'zh',\n    scriptCode: 'Hant',\n    countryCode: 'HK',\n  ), // 'zh_Hant_HK'\n],\n```\n\n----------------------------------------\n\nTITLE: Widget Test Setup with Mocked Dependencies in Flutter (Dart)\nDESCRIPTION: This snippet demonstrates setting up a widget test for a `HomeScreen` in Flutter using mocked dependencies. It initializes a `HomeViewModel` with a `FakeBookingRepository` and a `FakeUserRepository`. A `MockGoRouter` is also used to mock navigation.  Dependencies include `package:mocktail` for mocking the router.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/app-architecture/case-study/testing.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() {\n  group('HomeScreen tests', () {\n    late HomeViewModel viewModel;\n    late MockGoRouter goRouter;\n    late FakeBookingRepository bookingRepository;\n\n    setUp(() {\n      bookingRepository = FakeBookingRepository()\n        ..createBooking(kBooking);\n      viewModel = HomeViewModel(\n        bookingRepository: bookingRepository,\n        userRepository: FakeUserRepository(),\n      );\n      goRouter = MockGoRouter();\n      when(() => goRouter.push(any())).thenAnswer((_) => Future.value(null));\n    });\n\n    // ...\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter Localization Dependencies\nDESCRIPTION: This snippet shows how to add the necessary dependencies for localization in Flutter, including `flutter_localizations` and `intl`. The `intl` package is used for i10n machinery, such as date/time formatting.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/uikit-devs.md#_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  flutter_localizations:\n    sdk: flutter\n  intl: any # Use version of intl from flutter_localizations.\n```\n\n----------------------------------------\n\nTITLE: Migrating from withOpacity to withValues\nDESCRIPTION: This code demonstrates how to migrate from using the deprecated `withOpacity` method to using the `withValues` method for setting the alpha channel of a color. `withValues` allows you to specify the alpha channel value with greater precision using a floating-point number.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/wide-gamut-framework.md#_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\n// Before: Create a new color with the specified opacity.\nfinal x = color.withOpacity(0.0);\n\n// After: Create a new color with the specified alpha channel value,\n// accounting for the current or specified color space.\nfinal x = color.withValues(alpha: 0.0);\n```\n\n----------------------------------------\n\nTITLE: Add url_launcher Dependency in pubspec.yaml\nDESCRIPTION: This YAML snippet demonstrates how to add the `url_launcher` plugin as a dependency in the `pubspec.yaml` file. It also includes the Flutter SDK dependency. This plugin allows opening URLs in the default browser.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/packages-and-plugins/using-packages.md#_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  flutter:\n    sdk: flutter\n  url_launcher: ^5.4.0\n```\n\n----------------------------------------\n\nTITLE: Upgrading Flutter Packages\nDESCRIPTION: This command updates all dependencies listed in the `pubspec.yaml` file to the latest compatible versions. It's used when you want to update your app's dependencies without upgrading the Flutter SDK itself.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/upgrade.md#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ flutter pub upgrade\n```\n\n----------------------------------------\n\nTITLE: Gradle Dependency Configuration in Existing Android App (Groovy)\nDESCRIPTION: This code snippet demonstrates a typical Gradle dependency declaration within an existing Android application's `build.gradle` file. It shows how to include a specific version of the Crashlytics SDK as a dependency.  The `implementation` keyword adds the dependency for use in the project. The specific version is '2.10.1'.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/add-to-app/android/plugin-setup.md#_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\n…\ndependencies {\n    …\n    implementation(\"com.crashlytics.sdk.android:crashlytics:2.10.1\")\n    …\n}\n…\n```\n\n----------------------------------------\n\nTITLE: Sized Container with red color Flutter\nDESCRIPTION: This snippet creates a Container widget with a specified width, height, and red background color. The screen forces the container to be the same size as the screen, ignoring the width and height parameters.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/layout/constraints.md#_snippet_32\n\nLANGUAGE: dart\nCODE:\n```\nContainer(width: 100, height: 100, color: red)\n```\n\n----------------------------------------\n\nTITLE: Parent-Managed State Tapbox Implementation in Flutter\nDESCRIPTION: This code demonstrates how a parent widget can manage the state of a child widget in Flutter. The ParentWidget manages the _active state for TapboxB.  The TapboxB StatelessWidget uses a callback (onChanged) to notify the parent when it's tapped. The parent then updates the state and rebuilds the UI.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/interactivity/index.md#_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\n\n// ParentWidget manages the state for TapboxB.\n\n//------------------------ ParentWidget --------------------------------\n\nclass ParentWidget extends StatefulWidget {\n  const ParentWidget({super.key});\n\n  @override\n  State<ParentWidget> createState() => _ParentWidgetState();\n}\n\nclass _ParentWidgetState extends State<ParentWidget> {\n  bool _active = false;\n\n  void _handleTapboxChanged(bool newValue) {\n    setState(() {\n      _active = newValue;\n    });\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return SizedBox(\n      child: TapboxB(active: _active, onChanged: _handleTapboxChanged),\n    );\n  }\n}\n\n//------------------------- TapboxB ----------------------------------\n\nclass TapboxB extends StatelessWidget {\n  const TapboxB({super.key, this.active = false, required this.onChanged});\n\n  final bool active;\n  final ValueChanged<bool> onChanged;\n\n  void _handleTap() {\n    onChanged(!active);\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return GestureDetector(\n      onTap: _handleTap,\n      child: Container(\n        width: 200,\n        height: 200,\n        decoration: BoxDecoration(\n          color: active ? Colors.lightGreen[700] : Colors.grey[600],\n        ),\n        child: Center(\n          child: Text(\n            active ? 'Active' : 'Inactive',\n            style: const TextStyle(fontSize: 32, color: Colors.white),\n          ),\n        ),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Flutter Shopping List Item Widget\nDESCRIPTION: This snippet defines the `ShoppingListItem` widget in Flutter. It is a stateless widget that displays a product and its cart status. The `onCartChanged` callback allows the parent widget to update the cart. It receives product details, cart status, and a callback function to notify the parent when the cart status changes.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/index.md#_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\n\nclass Product {\n  const Product({required this.name});\n\n  final String name;\n}\n\ntypedef CartChangedCallback = Function(Product product, bool inCart);\n\nclass ShoppingListItem extends StatelessWidget {\n  ShoppingListItem({\n    required this.product,\n    required this.inCart,\n    required this.onCartChanged,\n  }) : super(key: ObjectKey(product));\n\n  final Product product;\n  final bool inCart;\n  final CartChangedCallback onCartChanged;\n\n  Color _getColor(BuildContext context) {\n    // The theme depends on the BuildContext because different\n    // parts of the tree can have different themes.\n    // The BuildContext indicates where the build is\n    // taking place and therefore which theme to use.\n\n    return inCart //\n        ? Colors.black54\n        : Theme.of(context).primaryColor;\n  }\n\n  TextStyle? _getTextStyle(BuildContext context) {\n    if (!inCart) return null;\n\n    return const TextStyle(\n      color: Colors.black54,\n      decoration: TextDecoration.lineThrough,\n    );\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return ListTile(\n      onTap: () {\n        onCartChanged(product, inCart);\n      },\n      leading: CircleAvatar(\n        backgroundColor: _getColor(context),\n        child: Text(product.name[0]),\n      ),\n      title: Text(product.name, style: _getTextStyle(context)),\n    );\n  }\n}\n\nvoid main() {\n  runApp(\n    MaterialApp(\n      home: Scaffold(\n        body: Center(\n          child: ShoppingListItem(\n            product: const Product(name: 'Chips'),\n            inCart: true,\n            onCartChanged: (product, inCart) {},\n          ),\n        ),\n      ),\n    ),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Fade-in Animation with AnimationController and FadeTransition in Flutter\nDESCRIPTION: This snippet demonstrates a fade-in animation in Flutter using AnimationController and FadeTransition. It creates an AnimationController to manage the animation's progress and a Tween to define the opacity range. The FadeTransition widget then applies the animation to a FlutterLogo widget, creating a fade-in effect.  SingleTickerProviderStateMixin is used to prevent offscreen animations from consuming resources.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/react-native-devs.md#_snippet_58\n\nLANGUAGE: Dart\nCODE:\n```\nimport 'package:flutter/material.dart';\n\nvoid main() {\n  runApp(const Center(child: LogoFade()));\n}\n\nclass LogoFade extends StatefulWidget {\n  const LogoFade({super.key});\n\n  @override\n  State<LogoFade> createState() => _LogoFadeState();\n}\n\nclass _LogoFadeState extends State<LogoFade>\n    with SingleTickerProviderStateMixin {\n  late Animation<double> animation;\n  late AnimationController controller;\n\n  @override\n  void initState() {\n    super.initState();\n    controller = AnimationController(\n      duration: const Duration(milliseconds: 3000),\n      vsync: this,\n    );\n    final CurvedAnimation curve = CurvedAnimation(\n      parent: controller,\n      curve: Curves.easeIn,\n    );\n    animation = Tween(begin: 0.0, end: 1.0).animate(curve);\n    controller.forward();\n  }\n\n  @override\n  void dispose() {\n    controller.dispose();\n    super.dispose();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return FadeTransition(\n      opacity: animation,\n      child: const SizedBox(height: 300, width: 300, child: FlutterLogo()),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Add Asset to pubspec.yaml in Flutter\nDESCRIPTION: This snippet shows how to add an asset (loading.gif) to the Flutter project's pubspec.yaml file. This is required to use the asset as a placeholder for FadeInImage. Ensures the image is included in the build.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/images/fading-in-images.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nflutter:\n  assets:\n+   - assets/loading.gif\n```\n\n----------------------------------------\n\nTITLE: Example of MissingPluginException\nDESCRIPTION: This code shows an example of the MissingPluginException that can occur when running Dart unit tests or widget tests that call plugins, as the host code isn't available in these test environments.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/testing/plugins-in-tests.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nMissingPluginException(No implementation found for method someMethodName on channel some_channel_name)\n```\n\n----------------------------------------\n\nTITLE: MenuItemButton Text Style After Migration (Dart)\nDESCRIPTION: This code snippet shows how to explicitly set the text style of a MenuItemButton to match the previous (non-Material 3) default text style. This involves accessing the Theme's bodyLarge text style.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/menus-text-style.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nMenuItemButton(\n  style: MenuItemButton.styleFrom(\n    textStyle: Theme.of(context).textTheme.bodyLarge,\n  ),\n  child: Text(MenuEntry.about.label),\n  onPressed: () => _activate(MenuEntry.about),\n),\n```\n\n----------------------------------------\n\nTITLE: Forwarding OS Signals to FlutterFragment - Java\nDESCRIPTION: This Java code snippet demonstrates how to forward essential OS signals from an Android `Activity` to a `FlutterFragment`. These signals include `onPostResume`, `onNewIntent`, `onBackPressed`, `onRequestPermissionsResult`, `onActivityResult`, `onUserLeaveHint`, and `onTrimMemory`. Forwarding these signals ensures proper Flutter behavior within the `Fragment`.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/add-to-app/android/add-flutter-fragment.md#_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\npublic class MyActivity extends FragmentActivity {\n    @Override\n    public void onPostResume() {\n        super.onPostResume();\n        flutterFragment.onPostResume();\n    }\n\n    @Override\n    protected void onNewIntent(@NonNull Intent intent) {\n        flutterFragment.onNewIntent(intent);\n    }\n\n    @Override\n    public void onBackPressed() {\n        flutterFragment.onBackPressed();\n    }\n\n    @Override\n    public void onRequestPermissionsResult(\n        int requestCode,\n        @NonNull String[] permissions,\n        @NonNull int[] grantResults\n    ) {\n        flutterFragment.onRequestPermissionsResult(\n            requestCode,\n            permissions,\n            grantResults\n        );\n    }\n\n    @Override\n    public void onActivityResult(\n        int requestCode,\n        int resultCode,\n        @Nullable Intent data\n    ) {\n        super.onActivityResult(requestCode, resultCode, data);\n        flutterFragment.onActivityResult(\n            requestCode,\n            resultCode,\n            data\n        );\n    }\n\n    @Override\n    public void onUserLeaveHint() {\n        flutterFragment.onUserLeaveHint();\n    }\n\n    @Override\n    public void onTrimMemory(int level) {\n        super.onTrimMemory(level);\n        flutterFragment.onTrimMemory(level);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Create Flutter App\nDESCRIPTION: This command is used to create a new Flutter application.  Replace `<app-name>` with the desired name of your application. This initializes a new Flutter project with the basic structure and files.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/navigation/set-up-app-links.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ flutter create deeplink_cookbook\n```\n\n----------------------------------------\n\nTITLE: UnconstrainedBox with Overflow in Flutter\nDESCRIPTION: This example illustrates an UnconstrainedBox with a child Container that is larger than the available space. The UnconstrainedBox allows the oversized child, but this leads to an overflow warning because the Container doesn't fit within the visible area.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/layout/constraints.md#_snippet_44\n\nLANGUAGE: dart\nCODE:\n```\nUnconstrainedBox(\n  child: Container(color: red, width: 4000, height: 50),\n)\n```\n\n----------------------------------------\n\nTITLE: Pop Back Navigation in Flutter\nDESCRIPTION: This snippet demonstrates how to use `Navigator.of(context).pop()` to navigate back to the previous screen in Flutter. It's typically called within the `onPressed` callback of a button or other interactive widget.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/swiftui-devs.md#_snippet_26\n\nLANGUAGE: Dart\nCODE:\n```\nTextButton(\n  onPressed: () {\n    // This code allows the\n    // view to pop back to its presenter.\n    Navigator.of(context).pop();\n  },\n  child: const Text('Pop back'),\n),\n```\n\n----------------------------------------\n\nTITLE: Migrating RaisedButton with custom foreground and background colors in Dart\nDESCRIPTION: This code snippet demonstrates how to migrate from `RaisedButton` with custom `color` (background) and `textColor` (foreground) to `ElevatedButton` using the `backgroundColor` and `foregroundColor` properties within `ElevatedButton.styleFrom` to achieve the same effect.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/buttons.md#_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\nRaisedButton(\n  color: Colors.red, // background\n  textColor: Colors.white, // foreground\n  onPressed: () { },\n  child: Text('RaisedButton with custom foreground/background'),\n)\n\nElevatedButton(\n  style: ElevatedButton.styleFrom(\n    backgroundColor: Colors.red,\n    foregroundColor: Colors.white,\n  ),\n  onPressed: () { },\n  child: Text('ElevatedButton with custom foreground/background'),\n)\n```\n\n----------------------------------------\n\nTITLE: SliverAppBar in CustomScrollView (Material)\nDESCRIPTION: This code snippet demonstrates how to add a SliverAppBar to a CustomScrollView. It sets the title, pins the app bar, displays a placeholder, and sets an expanded height to visualize the shrinking effect during scrolling.  The `pinned` property ensures the app bar remains visible at the top of the screen, even when scrolled.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/lists/floating-app-bar.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nslivers: [\n  // Add the app bar to the CustomScrollView.\n  SliverAppBar(\n    // Provide a standard title.\n    title: Text('Floating App Bar'),\n    // Pin the app bar when scrolling.\n    pinned: true,\n    // Display a placeholder widget to visualize the shrinking size.\n    flexibleSpace: Placeholder(),\n    // Make the initial height of the SliverAppBar larger than normal.\n    expandedHeight: 200,\n  ),\n],\n```\n\n----------------------------------------\n\nTITLE: Deleting a Todo Item with IconButton in Flutter\nDESCRIPTION: This snippet illustrates the implementation of an `IconButton` used for deleting a ToDo item. When pressed, it executes the `delete` command in the `TodoListViewModel`, passing the ToDo item's ID.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/app-architecture/design-patterns/sql.md#_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nIconButton(\n  icon: const Icon(Icons.delete),\n  onPressed: () => widget.viewModel.delete.execute(todo.id),\n)\n```\n\n----------------------------------------\n\nTITLE: Bash script to deserialize upload key\nDESCRIPTION: This bash script decodes a base64 encoded upload key (intended for the Google Play Store) stored as an encrypted environment variable within a CI system, and writes it to a specified file path. This is part of securing login credentials during CI builds.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/deployment/cd.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\necho \"$PLAY_STORE_UPLOAD_KEY\" | base64 --decode > [path to your upload keystore]\n```\n\n----------------------------------------\n\nTITLE: Retrieving Display Object in Flutter\nDESCRIPTION: This code snippet demonstrates how to retrieve a `Display` object in Flutter to obtain the physical screen dimensions. It uses `View.maybeOf(context)` to get the `FlutterView` and then accesses the `display` property to get the `Display` object. This approach is useful for handling foldable devices and multi-display setups where physical screen dimensions are needed instead of window dimensions.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/adaptive-responsive/large-screens.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n/// AppState object.\nui.FlutterView? _view;\n\n@override\nvoid didChangeDependencies() {\n  super.didChangeDependencies();\n  _view = View.maybeOf(context);\n}\n\nvoid didChangeMetrics() {\n  final ui.Display? display = _view?.display;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Todos in TodoListViewModel in Dart\nDESCRIPTION: This code shows the `_add` method in the `TodoListViewModel`. This method uses the `TodoRepository` to create a new ToDo item, adding it to the `_todos` list in the view model and notifying listeners of the change.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/app-architecture/design-patterns/sql.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nFuture<Result<void>> _add(String task) async {\n  try {\n    final result = await _todoRepository.createTodo(task);\n    switch (result) {\n      case Ok<Todo>>():\n        _todos.add(result.value);\n        return Result.ok(null);\n      case Error():\n        return Result.error(result.error);\n    }\n  } on Exception catch (e) {\n    return Result.error(e);\n  } finally {\n    notifyListeners();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying ChromeDriver Installation\nDESCRIPTION: This command checks the installed version of ChromeDriver. It's used to ensure that ChromeDriver is correctly installed and accessible in the system's PATH.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/testing/integration-tests/index.md#_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n$ chromedriver --version\n```\n\n----------------------------------------\n\nTITLE: Migrate performResize to computeDryLayout in Dart\nDESCRIPTION: This code snippet demonstrates how to migrate an existing performResize method to the new computeDryLayout method. It involves changing the method signature and returning the calculated size instead of assigning it to the size setter. The old implementation of performResize is then removed.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/renderbox-dry-layout.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n  @override\n  void performResize() {\n     size = constraints.biggest;\n  }\n```\n\n----------------------------------------\n\nTITLE: Fixing Java Home Error on macOS for Flutter\nDESCRIPTION: This code snippet demonstrates how to fix the JAVA_HOME environment variable on macOS when encountering errors with the Android SDK locating the Java SDK. It involves modifying the path in the shell resource file (e.g., .zshrc) by either removing the backslash or enclosing the entire path in quotes and reloading shell configurations. This is a troubleshooting step to resolve JAVA_HOME related issues encountered when running flutter doctor.\nSOURCE: https://github.com/flutter/website/blob/main/src/_includes/docs/install/compiler/android.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport JAVA_HOME=\"/Applications/Android Studio.app/Contents/jre/Contents/Home\"\n```\n\nLANGUAGE: bash\nCODE:\n```\nsource ~/.zshrc\n```\n\n----------------------------------------\n\nTITLE: Simple Unit Test for Counter in Dart\nDESCRIPTION: This Dart code demonstrates a simple unit test for the `Counter` class. It imports the `test` package and the `Counter` class, then defines a test case that creates a `Counter` instance, increments its value, and asserts that the value is 1 using the `expect` function.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/testing/unit/introduction.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\n// Import the test package and Counter class\nimport 'package:counter_app/counter.dart';\nimport 'package:test/test.dart';\n\nvoid main() {\n  test('Counter value should be incremented', () {\n    final counter = Counter();\n\n    counter.increment();\n\n    expect(counter.value, 1);\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: TabBar Alignment Modification in Flutter\nDESCRIPTION: This snippet shows how to modify tab alignment in a scrollable TabBar using the tabAlignment property. It demonstrates setting the alignment to TabAlignment.start. This depends on the material package.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/material-3-migration.md#_snippet_16\n\nLANGUAGE: dart\nCODE:\n```\nAppBar(\n  title: const Text('Title'),\n  bottom: const TabBar(\n    tabAlignment: TabAlignment.start,\n    isScrollable: true,\n    tabs: <Widget>[\n      Tab(\n        icon: Icon(Icons.cloud_outlined),\n      ),\n      Tab(\n        icon: Icon(Icons.beach_access_sharp),\n      ),\n      Tab(\n        icon: Icon(Icons.brightness_5_sharp),\n      ),\n    ],\n  ),\n),\n```\n\n----------------------------------------\n\nTITLE: Building the Expandable FAB Layout with Stack - Dart\nDESCRIPTION: This code demonstrates how to build the layout of the expandable FAB using a `Stack` widget to overlay the different parts: the tap-to-close FAB, expanding action buttons, and the tap-to-open FAB. It calculates the position of each action button based on its index and animates its position using the `_ExpandingActionButton` widget.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/effects/expandable-fab.md#_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nclass _ExpandableFabState extends State<ExpandableFab>\n    with SingleTickerProviderStateMixin {\n  @override\n  Widget build(BuildContext context) {\n    return SizedBox.expand(\n      child: Stack(\n        alignment: Alignment.bottomRight,\n        clipBehavior: Clip.none,\n        children: [\n          _buildTapToCloseFab(),\n          ..._buildExpandingActionButtons(),\n          _buildTapToOpenFab(),\n        ],\n      ),\n    );\n  }\n\n  List<Widget> _buildExpandingActionButtons() {\n    final children = <Widget>[];\n    final count = widget.children.length;\n    final step = 90.0 / (count - 1);\n    for (\n      var i = 0, angleInDegrees = 0.0;\n      i < count;\n      i++, angleInDegrees += step\n    ) {\n      children.add(\n        _ExpandingActionButton(\n          directionInDegrees: angleInDegrees,\n          maxDistance: widget.distance,\n          progress: _expandAnimation,\n          child: widget.children[i],\n        ),\n      );\n    }\n    return children;\n  }\n  }\n```\n\n----------------------------------------\n\nTITLE: Flex Factor with Expanded Widget - Dart\nDESCRIPTION: This example illustrates how to use the `flex` property of the `Expanded` widget to control the relative space occupied by child widgets within a `Row`. The middle `BorderedImage` is configured to take up twice as much space as its siblings due to `flex: 2`.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/fundamentals/layout.md#_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nWidget build(BuildContext context) {\n  return const Row(\n    children: [\n      Expanded(\n        child: BorderedImage(width: 150, height: 150),\n      ),\n      Expanded(\n        flex: 2,\n        child: BorderedImage(width: 150, height: 150),\n      ),\n      Expanded(\n        child: BorderedImage(width: 150, height: 150),\n      ),\n    ],\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Circles with BoxShape - Dart\nDESCRIPTION: This Dart code snippet creates a circle using the `BoxShape.circle` enum in the `BoxDecoration` of a Container. The width and height of the container are set to the same value, and `BoxShape.circle` makes the container a circle.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/web-devs.md#_snippet_24\n\nLANGUAGE: dart\nCODE:\n```\nfinal container = Container(\n  // grey box\n  width: 320,\n  height: 240,\n  color: Colors.grey[300],\n  child: Center(\n    child: Container(\n      // red circle\n      decoration: BoxDecoration(\n        color: Colors.red[400],\n        shape: BoxShape.circle,\n      ),\n      padding: const EdgeInsets.all(16),\n      width: 160,\n      height: 160,\n      child: Text(\n        'Lorem ipsum',\n        style: bold24Roboto,\n        textAlign: TextAlign.center,\n      ),\n    ),\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Initialize FlutterEngine in SwiftUI\nDESCRIPTION: This Swift code initializes a FlutterEngine within a SwiftUI Observable object. The engine is pre-warmed by calling `run()` and then registered plugins. The `FlutterDependencies` is injected into the `ContentView` using the `environment()` view modifier.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/add-to-app/ios/add-flutter-screen.md#_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\nimport SwiftUI\nimport Flutter\n// The following library connects plugins with iOS platform code to this app.\nimport FlutterPluginRegistrant\n\n@Observable\nclass FlutterDependencies {\n  let flutterEngine = FlutterEngine(name: \"my flutter engine\")\n  init() {\n    // Runs the default Dart entrypoint with a default Flutter route.\n    flutterEngine.run()\n    // Connects plugins with iOS platform code to this app.\n    GeneratedPluginRegistrant.register(with: self.flutterEngine);\n  }\n}\n\n@main\nstruct MyApp: App {\n    // flutterDependencies will be injected through the view environment.\n    @State var flutterDependencies = FlutterDependencies()\n    var body: some Scene {\n      WindowGroup {\n        ContentView()\n          .environment(flutterDependencies)\n      }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: ViewModel Unit Test in Flutter (Dart)\nDESCRIPTION: This snippet demonstrates a unit test for a ViewModel in Flutter, specifically the `HomeViewModel`. It uses a `FakeBookingRepository` to mock the booking data source. The test verifies that the `bookings` list in the ViewModel is not empty after initialization. No Flutter libraries are required for this unit test.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/app-architecture/case-study/testing.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() {\n  group('HomeViewModel tests', () {\n    test('Load bookings', () {\n      // HomeViewModel._load is called in the constructor of HomeViewModel.\n      final viewModel = HomeViewModel(\n        bookingRepository: FakeBookingRepository()\n          ..createBooking(kBooking),\n        userRepository: FakeUserRepository(),\n      );\n\n      expect(viewModel.bookings.isNotEmpty, true);\n    });\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Integration Test File (Dart)\nDESCRIPTION: This Dart code shows the initial implementation of an integration test for the Flutter counter app. It initializes `IntegrationTestWidgetsFlutterBinding`, finds the increment button, taps it, and verifies that the counter increments by 1.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/testing/integration-tests/index.md#_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\nimport 'package:flutter_test/flutter_test.dart';\nimport 'package:how_to/main.dart';\nimport 'package:integration_test/integration_test.dart';\n\nvoid main() {\n  IntegrationTestWidgetsFlutterBinding.ensureInitialized();\n\n  group('end-to-end test', () {\n    testWidgets('tap on the floating action button, verify counter', (\n      tester,\n    ) async {\n      // Load app widget.\n      await tester.pumpWidget(const MyApp());\n\n      // Verify the counter starts at 0.\n      expect(find.text('0'), findsOneWidget);\n\n      // Finds the floating action button to tap on.\n      final fab = find.byKey(const ValueKey('increment'));\n\n      // Emulate a tap on the floating action button.\n      await tester.tap(fab);\n\n      // Trigger a frame.\n      await tester.pumpAndSettle();\n\n      // Verify the counter increments by 1.\n      expect(find.text('1'), findsOneWidget);\n    });\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Host Element for Flutter Web (JavaScript)\nDESCRIPTION: This JavaScript snippet shows how to configure the `hostElement` for a Flutter web application using the `_flutter.loader.load` function.  The `hostElement` specifies the HTML element where the Flutter web app will be rendered. This configuration is applicable for Flutter versions between 3.10 and 3.24.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/platform-integration/web/embedding-flutter-web.md#_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\n_flutter.loader.load({\n  config: {\n    hostElement: document.getElementById('flutter_host'),\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Route Constants in Dart\nDESCRIPTION: This snippet defines constants for various routes within the application, including top-level routes (home, settings) and routes specific to the device setup flow. It uses a prefix for the setup flow routes to allow the top-level Navigator to identify them without knowing all the specific pages.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/effects/nested-nav.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nconst routeHome = '/';\nconst routeSettings = '/settings';\nconst routePrefixDeviceSetup = '/setup/';\nconst routeDeviceSetupStart = '/setup/$routeDeviceSetupStartPage';\nconst routeDeviceSetupStartPage = 'find_devices';\nconst routeDeviceSetupSelectDevicePage = 'select_device';\nconst routeDeviceSetupConnectingPage = 'connecting';\nconst routeDeviceSetupFinishedPage = 'finished';\n```\n\n----------------------------------------\n\nTITLE: Import statements for Platform Views\nDESCRIPTION: Imports necessary Flutter packages for using platform views.  These imports are required to use the `AppKitView` widget and other related functionalities for platform view integration.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/platform-integration/macos/platform-views.md#_snippet_0\n\nLANGUAGE: Dart\nCODE:\n```\nimport 'package:flutter/foundation.dart';\nimport 'package:flutter/services.dart';\n```\n\n----------------------------------------\n\nTITLE: Creating a Column with Spaced Items in Dart\nDESCRIPTION: This snippet showcases how to use a Column with mainAxisAlignment set to spaceBetween to evenly distribute items within the available space. The Column is placed inside a ConstrainedBox and SingleChildScrollView to allow for both spacing and scrolling. ItemWidget is a placeholder widget.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/lists/spaced-items.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nLayoutBuilder(\n  builder: (context, constraints) {\n    return SingleChildScrollView(\n      child: ConstrainedBox(\n        constraints: BoxConstraints(minHeight: constraints.maxHeight),\n        child: Column(\n          mainAxisAlignment: MainAxisAlignment.spaceBetween,\n          children: [\n            ItemWidget(text: 'Item 1'),\n            ItemWidget(text: 'Item 2'),\n            ItemWidget(text: 'Item 3'),\n          ],\n        ),\n      ),\n    );\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Display spinner while fetching download in Dart\nDESCRIPTION: This code adds a radial spinner (`ProgressIndicatorWidget`) on top of the button shape during the `fetchingDownload` phase. The spinner is wrapped in an `AnimatedOpacity` to fade in and out. The `ButtonShapeWidget` is wrapped in a `Stack` widget to allow layering of the spinner and button shape.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/effects/download-button.md#_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\n@override\nWidget build(BuildContext context) {\n  return GestureDetector(\n    onTap: _onPressed,\n    child: Stack(\n      children: [\n        ButtonShapeWidget(\n          transitionDuration: transitionDuration,\n          isDownloaded: _isDownloaded,\n          isDownloading: _isDownloading,\n          isFetching: _isFetching,\n        ),\n        Positioned.fill(\n          child: AnimatedOpacity(\n            duration: transitionDuration,\n            opacity: _isDownloading || _isFetching ? 1.0 : 0.0,\n            curve: Curves.ease,\n            child: ProgressIndicatorWidget(\n              downloadProgress: downloadProgress,\n              isDownloading: _isDownloading,\n              isFetching: _isFetching,\n            ),\n          ),\n        ),\n      ],\n    ),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Command Class Implementation in Flutter\nDESCRIPTION: This code snippet presents the full implementation of the `Command`, `Command0`, and `Command1` classes in Flutter. The `Command` class serves as an abstract base class that encapsulates an action, exposes its running and error states, and prevents concurrent executions. `Command0` and `Command1` are concrete implementations of the `Command` class tailored for actions with zero and one arguments, respectively. The implementation uses the `Result` class to handle the success or failure of an action and leverages `ChangeNotifier` to notify listeners about changes in the command's state.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/app-architecture/design-patterns/command.md#_snippet_18\n\nLANGUAGE: dart\nCODE:\n```\n// Copyright 2024 The Flutter team. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport 'dart:async';\n\nimport 'package:flutter/foundation.dart';\n\nimport 'result.dart';\n\n/// Defines a command action that returns a [Result] of type [T].\n/// Used by [Command0] for actions without arguments.\ntypedef CommandAction0<T> = Future<Result<T>> Function();\n\n/// Defines a command action that returns a [Result] of type [T].\n/// Takes an argument of type [A].\n/// Used by [Command1] for actions with one argument.\ntypedef CommandAction1<T, A> = Future<Result<T>> Function(A);\n\n/// Facilitates interaction with a view model.\n///\n/// Encapsulates an action,\n/// exposes its running and error states,\n/// and ensures that it can't be launched again until it finishes.\n///\n/// Use [Command0] for actions without arguments.\n/// Use [Command1] for actions with one argument.\n///\n/// Actions must return a [Result] of type [T].\n///\n/// Consume the action result by listening to changes,\n/// then call to [clearResult] when the state is consumed.\nabstract class Command<T> extends ChangeNotifier {\n  bool _running = false;\n\n  /// Whether the action is running.\n  bool get running => _running;\n\n  Result<T>? _result;\n\n  /// Whether the action completed with an error.\n  bool get error => _result is Error;\n\n  /// Whether the action completed successfully.\n  bool get completed => _result is Ok;\n\n  /// The result of the most recent action.\n  ///\n  /// Returns `null` if the action is running or completed with an error.\n  Result<T>? get result => _result;\n\n  /// Clears the most recent action's result.\n  void clearResult() {\n    _result = null;\n    notifyListeners();\n  }\n\n  /// Execute the provided [action], notifying listeners and\n  /// setting the running and result states as necessary.\n  Future<void> _execute(CommandAction0<T> action) async {\n    // Ensure the action can't launch multiple times.\n    // e.g. avoid multiple taps on button\n    if (_running) return;\n\n    // Notify listeners.\n    // e.g. button shows loading state\n    _running = true;\n    _result = null;\n    notifyListeners();\n\n    try {\n      _result = await action();\n    } finally {\n      _running = false;\n      notifyListeners();\n    }\n  }\n}\n\n/// A [Command] that accepts no arguments.\nfinal class Command0<T> extends Command<T> {\n  /// Creates a [Command0] with the provided [CommandAction0].\n  Command0(this._action);\n\n  final CommandAction0<T> _action;\n\n  /// Executes the action.\n  Future<void> execute() async {\n    await _execute(() => _action());\n  }\n}\n\n/// A [Command] that accepts one argument.\nfinal class Command1<T, A> extends Command<T> {\n  /// Creates a [Command1] with the provided [CommandAction1].\n  Command1(this._action);\n\n  final CommandAction1<T, A> _action;\n\n  /// Executes the action with the specified [argument].\n  Future<void> execute(A argument) async {\n    await _execute(() => _action(argument));\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Forwarding OS Signals to FlutterFragment - Kotlin\nDESCRIPTION: This Kotlin code snippet demonstrates how to forward essential OS signals from an Android `Activity` to a `FlutterFragment`. These signals include `onPostResume`, `onNewIntent`, `onBackPressed`, `onRequestPermissionsResult`, `onActivityResult`, `onUserLeaveHint`, and `onTrimMemory`. Forwarding these signals ensures proper Flutter behavior within the `Fragment`.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/add-to-app/android/add-flutter-fragment.md#_snippet_2\n\nLANGUAGE: Kotlin\nCODE:\n```\nclass MyActivity : FragmentActivity() {\n  override fun onPostResume() {\n    super.onPostResume()\n    flutterFragment!!.onPostResume()\n  }\n\n  override fun onNewIntent(@NonNull intent: Intent) {\n    flutterFragment!!.onNewIntent(intent)\n  }\n\n  override fun onBackPressed() {\n    flutterFragment!!.onBackPressed()\n  }\n\n  override fun onRequestPermissionsResult(\n    requestCode: Int,\n    permissions: Array<String?>,\n    grantResults: IntArray\n  ) {\n    flutterFragment!!.onRequestPermissionsResult(\n      requestCode,\n      permissions,\n      grantResults\n    )\n  }\n\n  override fun onActivityResult(\n    requestCode: Int,\n    resultCode: Int,\n    data: Intent?\n  ) {\n    super.onActivityResult(requestCode, resultCode, data)\n    flutterFragment!!.onActivityResult(\n      requestCode,\n      resultCode,\n      data\n    )\n  }\n\n  override fun onUserLeaveHint() {\n    flutterFragment!!.onUserLeaveHint()\n  }\n\n  override fun onTrimMemory(level: Int) {\n    super.onTrimMemory(level)\n    flutterFragment!!.onTrimMemory(level)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Flutter Gradient Bubbles in DartPad\nDESCRIPTION: This Dart code demonstrates a Flutter application with gradient chat bubbles. It uses the CustomPaint widget to create a gradient effect that changes based on the scroll position of the ListView. The app dynamically generates chat messages and displays them in a list.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/effects/gradient-bubbles.md#_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nimport 'dart:math';\nimport 'dart:ui' as ui;\n\nimport 'package:flutter/material.dart';\n\nvoid main() {\n  runApp(const App(home: ExampleGradientBubbles()));\n}\n\n@immutable\nclass App extends StatelessWidget {\n  const App({super.key, this.home});\n\n  final Widget? home;\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      debugShowCheckedModeBanner: false,\n      title: 'Flutter Chat',\n      theme: ThemeData.dark(),\n      home: home,\n    );\n  }\n}\n\n@immutable\nclass ExampleGradientBubbles extends StatefulWidget {\n  const ExampleGradientBubbles({super.key});\n\n  @override\n  State<ExampleGradientBubbles> createState() => _ExampleGradientBubblesState();\n}\n\nclass _ExampleGradientBubblesState extends State<ExampleGradientBubbles> {\n  late final List<Message> data;\n\n  @override\n  void initState() {\n    super.initState();\n    data = MessageGenerator.generate(60, 1337);\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Theme(\n      data: ThemeData(\n        brightness: Brightness.dark,\n        primaryColor: const Color(0xFF4F4F4F),\n      ),\n      child: Scaffold(\n        appBar: AppBar(title: const Text('Flutter Chat')),\n        body: ListView.builder(\n          padding: const EdgeInsets.symmetric(vertical: 16.0),\n          reverse: true,\n          itemCount: data.length,\n          itemBuilder: (context, index) {\n            final message = data[index];\n            return MessageBubble(message: message, child: Text(message.text));\n          },\n        ),\n      ),\n    );\n  }\n}\n\n@immutable\nclass MessageBubble extends StatelessWidget {\n  const MessageBubble({super.key, required this.message, required this.child});\n\n  final Message message;\n  final Widget child;\n\n  @override\n  Widget build(BuildContext context) {\n    final messageAlignment =\n        message.isMine ? Alignment.topLeft : Alignment.topRight;\n\n    return FractionallySizedBox(\n      alignment: messageAlignment,\n      widthFactor: 0.8,\n      child: Align(\n        alignment: messageAlignment,\n        child: Padding(\n          padding: const EdgeInsets.symmetric(vertical: 6.0, horizontal: 20.0),\n          child: ClipRRect(\n            borderRadius: const BorderRadius.all(Radius.circular(16.0)),\n            child: BubbleBackground(\n              colors: [\n                if (message.isMine) ...const [\n                  Color(0xFF6C7689),\n                  Color(0xFF3A364B),\n                ] else ...const [Color(0xFF19B7FF), Color(0xFF491CCB)],\n              ],\n              child: DefaultTextStyle.merge(\n                style: const TextStyle(fontSize: 18.0, color: Colors.white),\n                child: Padding(\n                  padding: const EdgeInsets.all(12.0),\n                  child: child,\n                ),\n              ),\n            ),\n          ),\n        ),\n      ),\n    );\n  }\n}\n\n@immutable\nclass BubbleBackground extends StatelessWidget {\n  const BubbleBackground({super.key, required this.colors, this.child});\n\n  final List<Color> colors;\n  final Widget? child;\n\n  @override\n  Widget build(BuildContext context) {\n    return CustomPaint(\n      painter: BubblePainter(\n        scrollable: Scrollable.of(context),\n        bubbleContext: context,\n        colors: colors,\n      ),\n      child: child,\n    );\n  }\n}\n\nclass BubblePainter extends CustomPainter {\n  BubblePainter({\n    required ScrollableState scrollable,\n    required BuildContext bubbleContext,\n    required List<Color> colors,\n  }) : _scrollable = scrollable,\n       _bubbleContext = bubbleContext,\n       _colors = colors,\n       super(repaint: scrollable.position);\n\n  final ScrollableState _scrollable;\n  final BuildContext _bubbleContext;\n  final List<Color> _colors;\n\n  @override\n  void paint(Canvas canvas, Size size) {\n    final scrollableBox = _scrollable.context.findRenderObject() as RenderBox;\n    final scrollableRect = Offset.zero & scrollableBox.size;\n    final bubbleBox = _bubbleContext.findRenderObject() as RenderBox;\n\n    final origin = bubbleBox.localToGlobal(\n      Offset.zero,\n      ancestor: scrollableBox,\n    );\n    final paint =\n        Paint()\n          ..shader = ui.Gradient.linear(\n            scrollableRect.topCenter,\n            scrollableRect.bottomCenter,\n            _colors,\n            [0.0, 1.0],\n            TileMode.clamp,\n            Matrix4.translationValues(-origin.dx, -origin.dy, 0.0).storage,\n          );\n    canvas.drawRect(Offset.zero & size, paint);\n  }\n\n  @override\n  bool shouldRepaint(BubblePainter oldDelegate) {\n    return oldDelegate._scrollable != _scrollable ||\n        oldDelegate._bubbleContext != _bubbleContext ||\n        oldDelegate._colors != _colors;\n  }\n}\n\nenum MessageOwner { myself, other }\n\n@immutable\nclass Message {\n  const Message({required this.owner, required this.text});\n\n  final MessageOwner owner;\n  final String text;\n\n  bool get isMine => owner == MessageOwner.myself;\n}\n\nclass MessageGenerator {\n  static List<Message> generate(int count, [int? seed]) {\n    final random = Random(seed);\n    return List.unmodifiable(\n      List<Message>.generate(count, (index) {\n        return Message(\n          owner: random.nextBool() ? MessageOwner.myself : MessageOwner.other,\n          text: _exampleData[random.nextInt(_exampleData.length)],\n        );\n      }),\n    );\n  }\n\n  static final _exampleData = [\n    'Lorem ipsum dolor sit amet, consectetur adipiscing elit.',\n    'In tempus mauris at velit egestas, sed blandit felis ultrices.',\n    'Ut molestie mauris et ligula finibus iaculis.',\n    'Sed a tempor ligula.',\n    'Test',\n    'Phasellus ullamcorper, mi ut imperdiet consequat, nibh augue condimentum nunc, vitae molestie massa augue nec erat.',\n    'Donec scelerisque, erat vel placerat facilisis, eros turpis egestas nulla, a sodales elit nibh et enim.',\n    'Mauris quis dignissim neque. In a odio leo. Aliquam egestas egestas tempor. Etiam at tortor metus.',\n    'Quisque lacinia imperdiet faucibus.',\n    'Proin egestas arcu non nisl laoreet, vitae iaculis enim volutpat. In vehicula convallis magna.',\n    'Phasellus at diam a sapien laoreet gravida.',\n    'Fusce maximus fermentum sem a scelerisque.',\n    'Nam convallis sapien augue, malesuada aliquam dui bibendum nec.',\n    'Quisque dictum tincidunt ex non lobortis.',\n    'In hac habitasse platea dictumst.',\n    'Ut pharetra ligula libero, sit amet imperdiet lorem luctus sit amet.',\n    'Sed ex lorem, lacinia et varius vitae, sagittis eget libero.',\n    'Vestibulum scelerisque velit sed augue ultricies, ut vestibulum lorem luctus.',\n    'Pellentesque et risus pretium, egestas ipsum at, facilisis lectus.',\n    'Praesent id eleifend lacus.',\n    'Fusce convallis eu tortor sit amet mattis.',\n    'Vivamus lacinia magna ut urna feugiat tincidunt.',\n    'Sed in diam ut dolor imperdiet vehicula non ac turpis.',\n    'Praesent at est hendrerit, laoreet tortor sed, varius mi.',\n    'Nunc in odio leo.',\n    'Praesent placerat semper libero, ut aliquet dolor.',\n    'Vestibulum elementum leo metus, vitae auctor lorem tincidunt ut.',\n  ];\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting code with dart format command\nDESCRIPTION: This command formats Dart code files specified by the given paths. It uses the Dart formatter to ensure consistent code style across the project.  It is run from the command line interface (CLI).\nSOURCE: https://github.com/flutter/website/blob/main/src/content/tools/formatting.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ dart format path1 path2 [...]\n```\n\n----------------------------------------\n\nTITLE: CustomScrollView in CupertinoApp (Cupertino)\nDESCRIPTION: This code snippet demonstrates how to create a CustomScrollView within a CupertinoApp. It includes a CupertinoPageScaffold with a child containing a CustomScrollView. The slivers property, which will hold the navigation bar and list, is initialized as an empty list.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/lists/floating-app-bar.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nCupertinoApp(\n  title: 'Floating Navigation Bar',\n  home: CupertinoPageScaffold(\n    // No navigation bar property provided yet.\n    child: CustomScrollView(\n      // Add the navigation bar and list of items as slivers in the next steps.\n      slivers: <Widget>[],\n    ),\n  ),\n)\n```\n\n----------------------------------------\n\nTITLE: WidgetsBinding: Migrate deferFirstFrameReport/allowFirstFrameReport (Dart)\nDESCRIPTION: This code snippet illustrates the migration from `deferFirstFrameReport` and `allowFirstFrameReport` to `deferFirstFrame` and `allowFirstFrame` in `WidgetsBinding`. The old methods were deprecated and removed to provide a better way to delay the first frame rendering.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/1-22-deprecations.md#_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\nfinal WidgetsBinding binding = WidgetsBinding.instance;\nbinding.deferFirstFrameReport();\nbinding.allowFirstFrameReport();\n```\n\n----------------------------------------\n\nTITLE: Swiping to Dismiss and Animation Completion\nDESCRIPTION: This code demonstrates how to simulate a swipe-to-dismiss action and wait for the animation to complete in a widget test. It uses `tester.drag()` to simulate the swipe and `tester.pumpAndSettle()` to rebuild the widget until the dismiss animation is finished.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/testing/widget/tap-drag.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\ntestWidgets('Add and remove a todo', (tester) async {\n  // Enter text and add the item...\n\n  // Swipe the item to dismiss it.\n  await tester.drag(find.byType(Dismissible), const Offset(500, 0));\n\n  // Build the widget until the dismiss animation ends.\n  await tester.pumpAndSettle();\n\n  // Ensure that the item is no longer on screen.\n  expect(find.text('hi'), findsNothing);\n});\n```\n\n----------------------------------------\n\nTITLE: ImageProvider createStream and resolveStreamForKey Override (After) Dart\nDESCRIPTION: This code demonstrates the updated `ImageProvider` implementation after the migration. Instead of overriding `resolve`, developers should now override `createStream` and `resolveStreamForKey`. `createStream` is responsible for returning a stream.  `resolveStreamForKey` interacts with the cache, uses the key, potentially calls `load`, and reports any errors.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/image-cache-and-provider.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nclass MyImageProvider extends ImageProvider<Object> {\n  @override\n  ImageStream createStream(ImageConfiguration configuration) {\n    // Return stream, or use super.createStream(),\n    // which returns a new ImageStream.\n  }\n\n  @override\n  void resolveStreamForKey(\n    ImageConfiguration configuration,\n    ImageStream stream,\n    Object key,\n    ImageErrorListener handleError,\n  ) {\n    // Interact with the cache, use the key, potentially call `load`,\n    // and report any errors back through `handleError`.\n  }\n  ...\n}\n\n```\n\n----------------------------------------\n\nTITLE: Flutter App Entry Point and State Management\nDESCRIPTION: This section demonstrates the main function and the definition of a StatefulWidget (MyApp) and its corresponding State (_MyAppState). The _MyAppState class manages the state of the application, including the TextEditingController for user input and a Future<Album> to hold the result of the createAlbum function. It also includes a build method which creates the UI.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/networking/send-data.md#_snippet_10\n\nLANGUAGE: Dart\nCODE:\n```\nvoid main() {\n  runApp(const MyApp());\n}\n\nclass MyApp extends StatefulWidget {\n  const MyApp({super.key});\n\n  @override\n  State<MyApp> createState() {\n    return _MyAppState();\n  }\n}\n\nclass _MyAppState extends State<MyApp> {\n  final TextEditingController _controller = TextEditingController();\n  Future<Album>? _futureAlbum;\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: 'Create Data Example',\n      theme: ThemeData(\n        colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),\n      ),\n      home: Scaffold(\n        appBar: AppBar(title: const Text('Create Data Example')),\n        body: Container(\n          alignment: Alignment.center,\n          padding: const EdgeInsets.all(8),\n          child: (_futureAlbum == null) ? buildColumn() : buildFutureBuilder(),\n        ),\n      ),\n    );\n  }\n\n  Column buildColumn() {\n    return Column(\n      mainAxisAlignment: MainAxisAlignment.center,\n      children: <Widget>[\n        TextField(\n          controller: _controller,\n          decoration: const InputDecoration(hintText: 'Enter Title'),\n        ),\n        ElevatedButton(\n          onPressed: () {\n            setState(() {\n              _futureAlbum = createAlbum(_controller.text);\n            });\n          },\n          child: const Text('Create Data'),\n        ),\n      ],\n    );\n  }\n\n  FutureBuilder<Album> buildFutureBuilder() {\n    return FutureBuilder<Album>(\n      future: _futureAlbum,\n      builder: (context, snapshot) {\n        if (snapshot.hasData) {\n          return Text(snapshot.data!.title);\n        } else if (snapshot.hasError) {\n          return Text('${snapshot.error}');\n        }\n\n        return const CircularProgressIndicator();\n      },\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Populating ParallaxRecipe with LocationListItems in Flutter\nDESCRIPTION: This snippet updates the ParallaxRecipe widget to dynamically generate LocationListItem widgets based on a list of location data.  It iterates through the 'locations' list and creates a LocationListItem for each entry, passing in the imageUrl, name, and place as properties.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/effects/parallax-scrolling.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nclass ParallaxRecipe extends StatelessWidget {\n  const ParallaxRecipe({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return SingleChildScrollView(\n      child: Column(\n        children: [\n          for (final location in locations)\n            LocationListItem(\n              imageUrl: location.imageUrl,\n              name: location.name,\n              country: location.place,\n            ),\n        ],\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Navigating to Flutter SDK Directory\nDESCRIPTION: This command navigates the terminal to the Flutter SDK directory. You'll need to replace `/path/to/flutter` with the actual path to your Flutter SDK installation. This is required for switching to a specific Flutter version.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/upgrade.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ cd /path/to/flutter\n```\n\n----------------------------------------\n\nTITLE: Checking for Wasm Compilation via Environment Variable (Dart)\nDESCRIPTION: This Dart code snippet checks if the application is running with WebAssembly by checking for the existence of the `dart.tool.dart2wasm` environment variable. This variable is set during compilation when the application is compiled to Wasm.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/platform-integration/web/wasm.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nconst isRunningWithWasm = bool.fromEnvironment('dart.tool.dart2wasm');\n```\n\n----------------------------------------\n\nTITLE: Creating a Flutter Project\nDESCRIPTION: This command creates a new Flutter project without overwriting existing files. It is used to initialize a Flutter project for an example app from the repository.\nSOURCE: https://github.com/flutter/website/blob/main/examples/animation/animate1/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nflutter create --no-overwrite $PROJECT\n```\n\n----------------------------------------\n\nTITLE: Initialize FlutterEngine in UIKit-Swift\nDESCRIPTION: This Swift code demonstrates how to create a FlutterEngine as a property within the AppDelegate. The engine is initialized and run when the application finishes launching.  GeneratedPluginRegistrant is used to register plugins.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/add-to-app/ios/add-flutter-screen.md#_snippet_1\n\nLANGUAGE: Swift\nCODE:\n```\nimport UIKit\nimport Flutter\n// The following library connects plugins with iOS platform code to this app.\nimport FlutterPluginRegistrant\n\n@UIApplicationMain\nclass AppDelegate: FlutterAppDelegate { // More on the FlutterAppDelegate.\n  lazy var flutterEngine = FlutterEngine(name: \"my flutter engine\")\n\n  override func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {\n    // Runs the default Dart entrypoint with a default Flutter route.\n    flutterEngine.run();\n    // Connects plugins with iOS platform code to this app.\n    GeneratedPluginRegistrant.register(with: self.flutterEngine);\n    return super.application(application, didFinishLaunchingWithOptions: launchOptions);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating ThemeData Color Properties in Flutter (Dart)\nDESCRIPTION: This snippet demonstrates the migration of deprecated ThemeData color properties (errorColor, backgroundColor, bottomAppBarColor, toggleableActiveColor) to the new ThemeData.colorScheme and BottomAppBarTheme. It shows how to access the new color properties.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/3-19-deprecations.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nvar myTheme = ThemeData(\n  //...\n  errorColor: Colors.red,\n  backgroundColor: Colors.blue,\n  bottomAppBarColor: Colors.purple,\n  toggleableActiveColor: Colors.orange,\n  //...\n);\nvar errorColor = myTheme.errorColor;\nvar backgroundColor = myTheme.backgroundColor;\nvar bottomAppBarColor = myTheme.bottomAppBarColor;\nvar toggleableActiveColor = myTheme.toggleableActiveColor;\n```\n\n----------------------------------------\n\nTITLE: Building Widget Tree in Flutter\nDESCRIPTION: This Dart code snippet demonstrates how a Flutter widget's `build` method returns a widget tree.  `ContentWidget` is instantiated with `importantState`. The `build` method is responsible for constructing the user interface based on the current state. No specific dependencies are listed but it needs the Flutter SDK.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/resources/architectural-overview.md#_snippet_1\n\nLANGUAGE: Dart\nCODE:\n```\n@override\nWidget build(BuildContext context) {\n   return ContentWidget([!importantState!]);\n}\n```\n\n----------------------------------------\n\nTITLE: Running Flutter Tests\nDESCRIPTION: This command executes the Flutter tests defined in the project. It runs all tests located in the `test` directory and reports the results. The tests help verify the correctness and functionality of the application's code.\nSOURCE: https://github.com/flutter/website/blob/main/examples/layout/lakes/step3/README.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nflutter test\n```\n\n----------------------------------------\n\nTITLE: Creating a ScrollView with ListView\nDESCRIPTION: This code snippet demonstrates how to create a simple scroll view in Flutter using the ListView widget.  It acts as both a ScrollView and a TableView.  The children property takes a list of widgets that will be displayed vertically.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/uikit-devs.md#_snippet_21\n\nLANGUAGE: Dart\nCODE:\n```\n@override\nWidget build(BuildContext context) {\n  return ListView(\n    children: const <Widget>[\n      Text('Row One'),\n      Text('Row Two'),\n      Text('Row Three'),\n      Text('Row Four'),\n    ],\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Wrapping MenuListItem with LongPressDraggable in Dart\nDESCRIPTION: This snippet shows how to wrap a `MenuListItem` with a `LongPressDraggable` widget to enable drag-and-drop functionality. It sets the `data` to the `Item` object, uses `pointerDragAnchorStrategy` for positioning, and displays a `DraggingListItem` as feedback during the drag operation.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/effects/drag-a-widget.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nLongPressDraggable<Item>(\n  data: item,\n  dragAnchorStrategy: pointerDragAnchorStrategy,\n  feedback: DraggingListItem(\n    dragKey: _draggableKey,\n    photoProvider: item.imageProvider,\n  ),\n  child: MenuListItem(\n    name: item.name,\n    price: item.formattedTotalItemPrice,\n    photoProvider: item.imageProvider,\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Snapcraft Apps YAML Example\nDESCRIPTION: This YAML snippet defines the application within the snap, specifying the command to run, extensions to use, and plugs for system interfaces. The `gnome` extension includes necessary GTK libraries for Flutter apps.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/deployment/linux.md#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\napps:\n  super-cool-app:\n    command: super_cool_app\n    extensions: [gnome]\n```\n\n----------------------------------------\n\nTITLE: Setting Initial Route with FlutterViewController (Swift)\nDESCRIPTION: This snippet demonstrates initializing a FlutterViewController directly in Swift, specifying the initial route as '/onboarding'. The `project` parameter is set to nil.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/add-to-app/ios/add-flutter-screen.md#_snippet_18\n\nLANGUAGE: Swift\nCODE:\n```\nlet flutterViewController = FlutterViewController(\n      project: nil, initialRoute: \"/onboarding\", nibName: nil, bundle: nil)\n```\n\n----------------------------------------\n\nTITLE: Raw Strings for Parameterized Localization\nDESCRIPTION: This snippet demonstrates how to define raw strings (with `r` prefix) that include variables for dynamic localization. These variables are expanded by localization methods, allowing for parameterized text.  The example shows `pageRowsInfoTitleRaw` and `pageRowsInfoTitleApproximateRaw`.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/accessibility-and-internationalization/internationalization.md#_snippet_33\n\nLANGUAGE: dart\nCODE:\n```\n@override\nString get pageRowsInfoTitleRaw => r'$firstRow–$lastRow of $rowCount';\n\n@override\nString get pageRowsInfoTitleApproximateRaw =>\n    r'$firstRow–$lastRow of about $rowCount';\n```\n\n----------------------------------------\n\nTITLE: Using ExpandableFab with ActionButton - Dart\nDESCRIPTION: Shows how to use the `ExpandableFab` widget in conjunction with the `ActionButton` widget to create a functional expandable FAB. It passes a list of `ActionButton` widgets as children to the `ExpandableFab` widget.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/effects/expandable-fab.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nfloatingActionButton: ExpandableFab(\n  distance: 112,\n  children: [\n    ActionButton(\n      onPressed: () => _showAction(context, 0),\n      icon: const Icon(Icons.format_size),\n    ),\n    ActionButton(\n      onPressed: () => _showAction(context, 1),\n      icon: const Icon(Icons.insert_photo),\n    ),\n    ActionButton(\n      onPressed: () => _showAction(context, 2),\n      icon: const Icon(Icons.videocam),\n    ),\n  ],\n),\n```\n\n----------------------------------------\n\nTITLE: Font Asset Declaration without Family - YAML\nDESCRIPTION: This snippet shows how to declare a font asset that is not part of a font family within the `pubspec.yaml` file. It specifies the asset path, weight, and style for the font.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/tools/pubspec.md#_snippet_13\n\nLANGUAGE: YAML\nCODE:\n```\nflutter:\n  fonts:\n    - asset: fonts/Roboto-Regular.ttf\n      weight: 900 # Optional\n      style: italic # Optional  \n```\n\n----------------------------------------\n\nTITLE: Implementing Back Confirmation Dialog with PopScope - Dart\nDESCRIPTION: This snippet shows how to implement a back confirmation dialog using `PopScope` instead of `WillPopScope`.  The `canPop` is set to false, and `onPopInvoked` handles the display of the dialog and navigates if confirmed.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/android-predictive-back.md#_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nreturn PopScope(\n  canPop: false,\n  onPopInvoked: (bool didPop) async {\n    if (didPop) {\n      return;\n    }\n    final NavigatorState navigator = Navigator.of(context);\n    final bool? shouldPop = await _showBackDialog();\n    if (shouldPop ?? false) {\n      navigator.pop();\n    }\n  },\n  child: child,\n)\n```\n\n----------------------------------------\n\nTITLE: Using Stack Widget for Overlays (Dart)\nDESCRIPTION: This snippet shows how to use the `Stack` widget in Flutter to overlay widgets, a common use case for `Grid` in Xamarin.Forms. It creates two overlapping icons using `Stack` and `Positioned` widgets. The `Positioned` widget is used to offset one of the icons.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/xamarin-forms-devs.md#_snippet_39\n\nLANGUAGE: dart\nCODE:\n```\n@override\nWidget build(BuildContext context) {\n  return const Stack(\n    children: <Widget>[\n      Icon(Icons.add_box, size: 24, color: Colors.black),\n      Positioned(\n        left: 10,\n        child: Icon(Icons.add_circle, size: 24, color: Colors.black),\n      ),\n    ],\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Button - Dart (Flutter)\nDESCRIPTION: Demonstrates how to create a button in Flutter using the `FilledButton` widget. The `onPressed` function is called when the button is tapped. The `Text` widget is used to display text on the button.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/compose-devs.md#_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nFilledButton(\n  onPressed: () {\n    // This closure is called when your button is tapped.\n  },\n  const Text('Do something'),\n),\n```\n\n----------------------------------------\n\nTITLE: Accessing Assets in Native Code (Kotlin)\nDESCRIPTION: This code shows how to access Flutter assets from native Android code using Kotlin's `AssetManager`. It demonstrates opening an asset stream and specifying the path to the asset within the Flutter assets folder.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/android-devs.md#_snippet_23\n\nLANGUAGE: Kotlin\nCODE:\n```\nval flutterAssetStream = assetManager.open(\"flutter_assets/assets/my_flutter_asset.png\")\n```\n\n----------------------------------------\n\nTITLE: Creating a New Flutter App with Web Support\nDESCRIPTION: This command creates a new Flutter application with web support enabled by default. It initializes a basic Flutter project structure, including the necessary files and configurations for web deployment.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/platform-integration/web/building.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ flutter create my_app\n```\n\n----------------------------------------\n\nTITLE: Set background color to grey[850] in dark theme - Dart\nDESCRIPTION: This snippet shows how to set the background color to Colors.grey[850] in a dark theme for compatibility with Material 2 behavior. The brightness property is set to Brightness.dark and the background color is customized using copyWith.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/material-3-migration.md#_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\ndarkTheme: ThemeData(\n  colorScheme: ColorScheme.fromSeed(\n    seedColor: Colors.deepPurple,\n    brightness: Brightness.dark,\n  ).copyWith(background: Colors.grey[850]!),\n),\n```\n\n----------------------------------------\n\nTITLE: Defining Todo Data Class in Dart\nDESCRIPTION: This code snippet shows the definition of the `Todo` data class using the `freezed` package. This class represents a ToDo item and contains an ID (`int`) and a task description (`String`).\nSOURCE: https://github.com/flutter/website/blob/main/src/content/app-architecture/design-patterns/sql.md#_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\n@freezed\nabstract class Todo with _$Todo {\n  const factory Todo({\n    /// The unique identifier of the Todo item.\n    required int id,\n\n    /// The task description of the Todo item.\n    required String task,\n  }) = _Todo;\n}\n```\n\n----------------------------------------\n\nTITLE: ConstrainedBox Inside Center in Flutter\nDESCRIPTION: This example demonstrates a ConstrainedBox with min/max dimensions inside a Center widget. The Center allows the ConstrainedBox to have any size up to the screen size, and the ConstrainedBox applies additional constraints to the Container child. The Container defaults to the minimum size.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/layout/constraints.md#_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nCenter(\n   child: ConstrainedBox(\n      constraints: BoxConstraints(\n                 minWidth: 70, minHeight: 70,\n                 maxWidth: 150, maxHeight: 150),\n        child: Container(color: red, width: 10, height: 10))))\n```\n\n----------------------------------------\n\nTITLE: Add flutter_lints dependency\nDESCRIPTION: Adds `flutter_lints` as a dev dependency to the project's `pubspec.yaml` using the flutter pub add command.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/flutter-lints-package.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nflutter pub add --dev flutter_lints\n```\n\n----------------------------------------\n\nTITLE: Jump to UI Thread - Kotlin\nDESCRIPTION: This Kotlin code snippet demonstrates how to execute code on the Android UI thread from a background thread using a Handler and Looper. The `post()` method schedules a `Runnable` to be executed on the main thread's Looper, allowing you to perform UI-related operations safely.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/platform-integration/platform-channels.md#_snippet_27\n\nLANGUAGE: Kotlin\nCODE:\n```\nHandler(Looper.getMainLooper()).post {\n  // Call the desired channel message here.\n}\n```\n\n----------------------------------------\n\nTITLE: Add Flutter Pods Installation to Podfile Target (Ruby)\nDESCRIPTION: This code snippet shows how to add a call to `install_all_flutter_pods` within the target block of the Podfile. This ensures that all necessary Flutter pods are installed for the specified target in the iOS application.\nSOURCE: https://github.com/flutter/website/blob/main/src/_includes/docs/add-to-app/ios-project/embed-cocoapods.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\ntarget 'MyApp' do\n  install_all_flutter_pods(flutter_application_path)\nend\n```\n\n----------------------------------------\n\nTITLE: Using IntrinsicHeight with Spacer and Expanded in Dart\nDESCRIPTION: This snippet illustrates using IntrinsicHeight with Spacer and Expanded widgets to customize the spacing between items in a Column. IntrinsicHeight ensures the Column sizes itself to the minimum required height. The Spacer and Expanded widgets control the distribution of remaining space between the items.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/lists/spaced-items.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nLayoutBuilder(\n  builder: (context, constraints) {\n    return SingleChildScrollView(\n      child: ConstrainedBox(\n        constraints: BoxConstraints(minHeight: constraints.maxHeight),\n        child: IntrinsicHeight(\n          child: Column(\n            children: [\n              ItemWidget(text: 'Item 1'),\n              Spacer(),\n              ItemWidget(text: 'Item 2'),\n              Expanded(child: ItemWidget(text: 'Item 3')),\n            ],\n          ),\n        ),\n      ),\n    );\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Building App Bundle with Flutter CLI\nDESCRIPTION: This command builds an app bundle for a Flutter application with deferred component support. It also validates the project setup for deferred components.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/perf/deferred-components.md#_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n$ flutter build appbundle\n```\n\n----------------------------------------\n\nTITLE: Providing PlayStoreDeferredComponentManager (Java)\nDESCRIPTION: Provides a `PlayStoreDeferredComponentManager` instance to the Flutter embedder. This is done by creating an instance of the manager and setting it using a `FlutterInjector.Builder`. This allows the embedder to handle install requests for deferred components.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/perf/deferred-components.md#_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nimport io.flutter.embedding.engine.dynamicfeatures.PlayStoreDeferredComponentManager;\nimport io.flutter.FlutterInjector;\n... \nPlayStoreDeferredComponentManager deferredComponentManager = new\n  PlayStoreDeferredComponentManager(this, null);\nFlutterInjector.setInstance(new FlutterInjector.Builder()\n    .setDeferredComponentManager(deferredComponentManager).build());\n\n```\n\n----------------------------------------\n\nTITLE: Setting Predictive Back Transitions in Flutter Theme (Dart)\nDESCRIPTION: This code snippet demonstrates how to enable predictive back transitions in a Flutter app by configuring the `pageTransitionsTheme` within the `ThemeData` of a `MaterialApp`.  It sets the `PredictiveBackPageTransitionsBuilder` for the Android platform. This requires the `PredictiveBackPageTransitionsBuilder` to be available, which is part of Flutter 3.22.2 or later.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/platform-integration/android/predictive-back.md#_snippet_0\n\nLANGUAGE: Dart\nCODE:\n```\nMaterialApp(\n  theme: ThemeData(\n    pageTransitionsTheme: const PageTransitionsTheme(\n      builders: <TargetPlatform, PageTransitionsBuilder>{\n        // Set the predictive back transitions for Android.\n        TargetPlatform.android: PredictiveBackPageTransitionsBuilder(),\n      },\n    ),\n  ),\n  ...\n),\n```\n\n----------------------------------------\n\nTITLE: Migrating ShortcutActivator.accepts - Before\nDESCRIPTION: Shows the old implementation of `ShortcutActivator.accepts` using `RawKeyEvent` and `RawKeyboard`. This example demonstrates how to extend `ShortcutActivator` before the migration to `KeyEvent`.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/shortcut-key-event-migration.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nclass MyActivator extends ShortcutActivator {\n  @override\n  bool accepts(RawKeyEvent event, RawKeyboard state) {\n    // ... (your implementation here)\n    returns false;\n  }\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Adding SubscriptionRepository Dependency to ViewModel in Dart\nDESCRIPTION: This code snippet demonstrates how to inject the SubscriptionRepository into the SubscribeButtonViewModel. This allows the ViewModel to use the Repository for handling subscription logic.  The ViewModel now requires an instance of SubscriptionRepository to be created.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/app-architecture/design-patterns/optimistic-state.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nclass SubscribeButtonViewModel extends ChangeNotifier {\n  SubscribeButtonViewModel({required this.subscriptionRepository});\n\n  final SubscriptionRepository subscriptionRepository;\n}\n```\n\n----------------------------------------\n\nTITLE: Flutter APK Build with Size Analysis\nDESCRIPTION: This command builds an APK for Android (arm64 architecture) and generates a size analysis file.  The `--analyze-size` flag is required to create the analysis file. The output provides the path to the generated JSON file for further analysis using the DevTools App Size tool. It also displays the total compressed size of the APK.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/tools/devtools/app-size.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nflutter build apk --analyze-size --target-platform=android-arm64\n...\n▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒\napp-release.apk (total compressed)                               6 MB\n...\n▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒\nA summary of your APK analysis can be found at: build/apk-code-size-analysis_01.json\n```\n\n----------------------------------------\n\nTITLE: Centered Infinite Sized Container with red color Flutter\nDESCRIPTION: This snippet creates a Center widget that contains a Container widget with infinite width and height, and red background color. Since the container can't be bigger than the screen, it fills the screen.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/layout/constraints.md#_snippet_35\n\nLANGUAGE: dart\nCODE:\n```\nCenter(\n  child: Container(\n    width: double.infinity,\n    height: double.infinity,\n    color: red,\n  ),\n)\n```\n\n----------------------------------------\n\nTITLE: Publishing a Flutter Package\nDESCRIPTION: This command publishes the package to pub.dev. It is important to ensure that you are ready to publish, as publishing is permanent.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/packages-and-plugins/developing-packages.md#_snippet_34\n\nLANGUAGE: console\nCODE:\n```\n$ flutter pub publish\n```\n\n----------------------------------------\n\nTITLE: Initialize Google Sign-In with Scopes\nDESCRIPTION: Initializes the GoogleSignIn class with specific scopes, defining the permissions requested from the user. In this case, it requests read-only access to the user's YouTube data using YouTubeApi.youtubeReadonlyScope.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/data-and-backend/google-apis.md#_snippet_2\n\nLANGUAGE: Dart\nCODE:\n```\nfinal _googleSignIn = GoogleSignIn(\n  scopes: <String>[YouTubeApi.youtubeReadonlyScope],\n);\n```\n\n----------------------------------------\n\nTITLE: Creating ActionButton Widget - Dart\nDESCRIPTION: Defines the ActionButton stateless widget, representing the individual action buttons that appear when the FAB expands.  Each of the buttons that expand from the `ExpandableFab` have the same design. They're  blue circles with white icons. More precisely, the button background color is the `ColorScheme.secondary` color, and the icon color is `ColorScheme.onSecondary`.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/effects/expandable-fab.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\n@immutable\nclass ActionButton extends StatelessWidget {\n  const ActionButton({super.key, this.onPressed, required this.icon});\n\n  final VoidCallback? onPressed;\n  final Widget icon;\n\n  @override\n  Widget build(BuildContext context) {\n    final theme = Theme.of(context);\n    return Material(\n      shape: const CircleBorder(),\n      clipBehavior: Clip.antiAlias,\n      color: theme.colorScheme.secondary,\n      elevation: 4,\n      child: IconButton(\n        onPressed: onPressed,\n        icon: icon,\n        color: theme.colorScheme.onSecondary,\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Migrate accentTextTheme usage (Flutter/Dart)\nDESCRIPTION: Shows how to replace the use of accentTextTheme with textTheme and colorScheme.onSecondary to achieve the same contrasting text style effect.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/theme-data-accent-properties.md#_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nTextStyle style = Theme.of(context).accentTextTheme.headline1;\n```\n\n----------------------------------------\n\nTITLE: Using the Custom Widget in Flutter\nDESCRIPTION: This example shows how to use the `CustomButton` widget defined in the previous snippet within a Flutter application.  It creates a Center widget that contains the CustomButton with the label 'Hello'.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/android-devs.md#_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\n@override\nWidget build(BuildContext context) {\n  return const Center(child: CustomButton('Hello'));\n}\n```\n\n----------------------------------------\n\nTITLE: CustomPainter Implementation in Flutter\nDESCRIPTION: This code defines a `CustomPainter` subclass, `SignaturePainter`, which draws lines on the canvas based on a list of `Offset` points.  It iterates through the points and draws a line between consecutive points if they are not null.  The `shouldRepaint` method is overridden to optimize rendering by only repainting when the points change.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/swiftui-devs.md#_snippet_22\n\nLANGUAGE: Dart\nCODE:\n```\nclass SignaturePainter extends CustomPainter {\n  SignaturePainter(this.points);\n\n  final List<Offset?> points;\n\n  @override\n  void paint(Canvas canvas, Size size) {\n    final Paint paint =\n        Paint()\n          ..color = Colors.black\n          ..strokeCap = StrokeCap.round\n          ..strokeWidth = 5;\n    for (int i = 0; i < points.length - 1; i++) {\n      if (points[i] != null && points[i + 1] != null) {\n        canvas.drawLine(points[i]!, points[i + 1]!, paint);\n      }\n    }\n  }\n\n  @override\n  bool shouldRepaint(SignaturePainter oldDelegate) =>\n      oldDelegate.points != points;\n}\n```\n\n----------------------------------------\n\nTITLE: Finding Licenses with AboutListTile - Flutter\nDESCRIPTION: This section describes how to display licenses used in a Flutter application by adding an `AboutListTile` to the application's `Drawer`. This will automatically list the required licenses.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/resources/faq.md#_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Implementing SubscriptionRepository with Simulated Failure in Dart\nDESCRIPTION: This code snippet implements the SubscriptionRepository with an asynchronous subscribe method that simulates a network request and then throws an exception to simulate a failure. This enables testing of error handling scenarios in the UI. It uses `Future.delayed` to simulate network latency.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/app-architecture/design-patterns/optimistic-state.md#_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nclass SubscriptionRepository {\n  /// Simulates a network request and then fails.\n  Future<void> subscribe() async {\n    // Simulate a network request\n    await Future.delayed(const Duration(seconds: 1));\n    // Fail after one second\n    throw Exception('Failed to subscribe');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Opening the Xcode workspace\nDESCRIPTION: This command navigates to the `flavors_example` directory and opens the Xcode workspace for the iOS version of the project using the `open` command. This assumes that you are on a macOS system.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/deployment/flavors-ios.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ cd flavors_example && open ios/Runner.xcworkspace\n```\n\n----------------------------------------\n\nTITLE: GestureDetector Pan Gesture Migration (Flutter 3.4.0+)\nDESCRIPTION: This snippet demonstrates how to use GestureDetector to explicitly set the supportedDevices for pan gestures in Flutter 3.4.0 and later, excluding PointerDeviceKind.trackpad. It utilizes the supportedDevices parameter available directly on GestureDetector.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/trackpad-gestures.md#_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() => runApp(Foo());\n\nclass Foo extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return GestureDetector(\n      supportedDevices: {\n        PointerDeviceKind.touch,\n        PointerDeviceKind.mouse,\n        PointerDeviceKind.stylus,\n        PointerDeviceKind.invertedStylus,\n        // Do not include PointerDeviceKind.trackpad\n      },\n      onPanStart: (details) {\n        debugPrint('onStart');\n      },\n      onPanUpdate: (details) {\n        debugPrint('onUpdate');\n      },\n      onPanEnd: (details) {\n        debugPrint('onEnd');\n      }\n      child: Container()\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example of direct usage without null-aware operator (recommended)\nDESCRIPTION: This Dart code shows the recommended approach for calling `addPostFrameCallback` directly on `SchedulerBinding.instance` in Flutter 3. This avoids the need for the `_ambiguate` helper function and null-aware operators when older versions are no longer supported.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/release-notes/release-notes-3.0.0.md#_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nSchedulerBinding.instance.addPostFrameCallback(...);\n```\n\n----------------------------------------\n\nTITLE: TextFormField Styling in Flutter\nDESCRIPTION: This snippet shows how to create a TextFormField with an UnderlineInputBorder and a label text. The InputDecoration is used to customize the appearance and provide a label for the input field.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/forms/text-input.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nTextFormField(\n  decoration: const InputDecoration(\n    border: UnderlineInputBorder(),\n    labelText: 'Enter your username',\n  ),\n)\n```\n\n----------------------------------------\n\nTITLE: Include Flutter Module (Kotlin DSL)\nDESCRIPTION: This snippet shows how to include the Flutter module as a subproject in the host app's `settings.gradle.kts` file.  It applies the `include_flutter.groovy` script to configure the necessary dependencies. Requires Flutter 3.27+.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/add-to-app/android/project-setup.md#_snippet_13\n\nLANGUAGE: Kotlin\nCODE:\n```\n// Include the host app project. Assumed existing content.\ninclude(\":app\")            \n// Replace \"flutter_module\" with whatever package_name you supplied when you ran:\n// `$ flutter create -t module [package_name]\nval filePath = settingsDir.parentFile.toString() + \"/flutter_module/.android/include_flutter.groovy\"\napply(from = File(filePath))\n```\n\n----------------------------------------\n\nTITLE: Checking Route Pop Disposition - Dart\nDESCRIPTION: This snippet demonstrates how to use `Route.popDisposition` to determine the behavior of pops on a route.  It returns a `RoutePopDisposition` enum value indicating if pops are allowed or not.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/android-predictive-back.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nif (myRoute.popDisposition == RoutePopDisposition.doNotPop) {\n  // Back gestures are disabled.\n}\n```\n\n----------------------------------------\n\nTITLE: BottomNavigationBarItem After Migration (label)\nDESCRIPTION: This code snippet demonstrates the updated way to use `BottomNavigationBarItem` with the `label` parameter.  The `label` parameter accepts a `String`, allowing for tooltip support. This change was introduced to improve accessibility.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/bottom-navigation-title-to-label.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nBottomNavigationBarItem(\n  icon: Icons.add,\n  label: 'add',\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing generateStream and sendMessageStream in Dart\nDESCRIPTION: This code demonstrates how the `generateStream` and `sendMessageStream` methods are implemented in the `GeminiProvider`.  These methods are responsible for calling the underlying LLM API to generate content streams based on the user's prompt and attachments. The `_generateStream` method encapsulates the logic for creating the `Content` object and calling the appropriate `contentStreamGenerator` function.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ai-toolkit/custom-llm-providers.md#_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nclass GeminiProvider extends LlmProvider with ChangeNotifier {\n  ...\n\n  @override\n  Stream<String> generateStream(\n    String prompt, {\n    Iterable<Attachment> attachments = const [],\n  }) =>\n      _generateStream(\n        prompt: prompt,\n        attachments: attachments,\n        contentStreamGenerator: (c) => _model.generateContentStream([c]),\n      );\n\n  @override\n  Stream<String> sendMessageStream(\n    String prompt, {\n    Iterable<Attachment> attachments = const [],\n  }) async* {\n    final userMessage = ChatMessage.user(prompt, attachments);\n    final llmMessage = ChatMessage.llm();\n    _history.addAll([userMessage, llmMessage]);\n\n    final response = _generateStream(\n      prompt: prompt,\n      attachments: attachments,\n      contentStreamGenerator: _chat!.sendMessageStream,\n    );\n\n    yield* response.map((chunk) {\n      llmMessage.append(chunk);\n      return chunk;\n    });\n\n    notifyListeners();\n  }\n\n  Stream<String> _generateStream({\n    required String prompt,\n    required Iterable<Attachment> attachments,\n    required Stream<GenerateContentResponse> Function(Content)\n        contentStreamGenerator,\n  }) async* {\n    final content = Content('user', [\n      TextPart(prompt),\n      ...attachments.map(_partFrom),\n    ]);\n\n    final response = contentStreamGenerator(content);\n    yield* response\n        .map((chunk) => chunk.text)\n        .where((text) => text != null)\n        .cast<String>();\n  }\n\n  @override\n  Iterable<ChatMessage> get history => _history;\n\n  @override\n  set history(Iterable<ChatMessage> history) {\n    _history.clear();\n    _history.addAll(history);\n    _chat = _startChat(history);\n    notifyListeners();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Font Family Declaration - YAML\nDESCRIPTION: This snippet demonstrates how to declare a font family and its associated font assets within the `pubspec.yaml` file. It includes the font family name and the paths to the regular and bold font files, along with optional weight and style specifications.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/tools/pubspec.md#_snippet_14\n\nLANGUAGE: YAML\nCODE:\n```\nflutter:\n  fonts:\n  - family: Roboto # Optional\n        fonts:\n          - asset: fonts/Roboto-Regular.ttf\n          - asset: fonts/Roboto-Bold.ttf\n            weight: 700 # Optional\n            style: italic # Optional\n```\n\n----------------------------------------\n\nTITLE: Creating a Column Layout in Flutter\nDESCRIPTION: Demonstrates how to create a column layout in Flutter using the `Column` widget.  The `Column` widget arranges its children vertically.  The `Center` widget is used to center the column horizontally.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/react-native-devs.md#_snippet_25\n\nLANGUAGE: dart\nCODE:\n```\n@override\nWidget build(BuildContext context) {\n  return Center(\n    child: Column(\n      children: <Widget>[\n        Container(color: Colors.red, width: 100, height: 100),\n        Container(color: Colors.blue, width: 100, height: 100),\n        Container(color: Colors.green, width: 100, height: 100),\n      ],\n    ),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a RectTween using MaterialRectCenterArcTween\nDESCRIPTION: This code snippet shows how to create a custom RectTween using MaterialRectCenterArcTween. This is used to ensure that the image's aspect ratio remains constant during the hero animation. It takes two Rect objects, begin and end, as input.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/animations/hero-animations.md#_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nstatic RectTween _createRectTween(Rect? begin, Rect? end) {\n    return MaterialRectCenterArcTween(begin: begin, end: end);\n  }\n```\n\n----------------------------------------\n\nTITLE: Creating a Row Layout in Flutter\nDESCRIPTION: This snippet shows how to create a horizontal linear layout in Flutter using the Row widget. The mainAxisAlignment property centers the children widgets horizontally.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/android-devs.md#_snippet_30\n\nLANGUAGE: dart\nCODE:\n```\n@override\nWidget build(BuildContext context) {\n  return const Row(\n    mainAxisAlignment: MainAxisAlignment.center,\n    children: <Widget>[\n      Text('Row One'),\n      Text('Row Two'),\n      Text('Row Three'),\n      Text('Row Four'),\n    ],\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: ElevatedButton Example in Flutter\nDESCRIPTION: This code snippet demonstrates how to create an ElevatedButton in Flutter with a style, an onPressed callback function to update the state when the button is pressed, and a child Text widget.  The count variable is incremented on each button press. The style customizes the text size.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/fundamentals/user-input.md#_snippet_0\n\nLANGUAGE: Dart\nCODE:\n```\nint count = 0;\n\n@override\nWidget build(BuildContext context) {\n  return ElevatedButton(\n    style: ElevatedButton.styleFrom(\n      textStyle: const TextStyle(fontSize: 20),\n    ),\n    onPressed: () {\n      setState(() {\n        count += 1;\n      });\n    },\n    child: const Text('Enabled'),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Navigator.canPop() for route stack check Dart\nDESCRIPTION: This snippet demonstrates how to use `Navigator.canPop()` in combination with `Navigator.pop()` to achieve the same result as checking the boolean return value of `Navigator.pop()` in older Flutter versions.  `Navigator.canPop()` checks if popping is possible before actually popping the route.  This snippet is intended to replace the deprecated behavior.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/route-navigator-refactoring.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nTextField(\n  onTap: () {\n    if (Navigator.canPop(context))\n      print('There still is at least one route after pop');\n    else\n      print('Oops! No more routes.');\n    // Our navigator pops the route anyway.\n    Navigator.pop(context);\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: MaterialApp Theme Setup (After Migration) - Dart\nDESCRIPTION: Demonstrates how to explicitly define page transitions using FadeUpwardsPageTransitionsBuilder for Android after the default transition was changed to ZoomPageTransitionsBuilder.  This allows reverting to the previous behavior.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/page-transition-replaced-by-ZoomPageTransitionBuilder.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nMaterialApp(\n  theme: ThemeData(\n    pageTransitionsTheme: const PageTransitionsTheme(\n      builders: <TargetPlatform, PageTransitionsBuilder>{\n        TargetPlatform.android: FadeUpwardsPageTransitionsBuilder(), // Apply this to every platforms you need.\n      },\n    ),\n  ),\n)\n```\n\n----------------------------------------\n\nTITLE: Synchronizing User Profile Data in Flutter\nDESCRIPTION: This code snippet details the `sync()` method used to synchronize user profile data between a local database and an API service. It fetches the user profile from the database, checks if it requires synchronization (based on the `synchronized` flag), and then updates the API and database accordingly.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/app-architecture/design-patterns/offline-first.md#_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> sync() async {\n  try {\n    // Fetch the user profile from the database\n    final userProfile = await _databaseService.fetchUserProfile();\n\n    // Check if the user profile requires synchronization\n    if (userProfile == null || userProfile.synchronized) {\n      return;\n    }\n\n    // Update the API with the user profile\n    await _apiClientService.putUserProfile(userProfile);\n\n    // Set the user profile as synchronized\n    await _databaseService.updateUserProfile(\n      userProfile.copyWith(synchronized: true),\n    );\n  } catch (e) {\n    // Try again later\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Copying and Modifying Existing ScrollBehavior - After - Flutter\nDESCRIPTION: Shows how to copy and modify an existing ScrollBehavior using copyWith.  This allows customizing the multitouchDragStrategy without creating a completely new ScrollBehavior class. The modified behavior is applied to a specific widget using ScrollConfiguration.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/multi-touch-scrolling.md#_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\n// ScrollBehavior can be copied and adjusted.\nfinal ScrollController controller = ScrollController();\nScrollConfiguration(\n  behavior: ScrollConfiguration.of(context).copyWith(\n    multitouchDragStrategy: MultitouchDragStrategy.sumAllPointers,\n  ),\n  child: ListView.builder(\n    controller: controller,\n    itemBuilder: (BuildContext context, int index) {\n      return Text('Item $index');\n    },\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Replacing RenderEditable.onSelectionChanged in Dart\nDESCRIPTION: This snippet shows how to replace the deprecated `renderEditable.onSelectionChanged` and `textSelectionDelegate.textEditingValue` calls with `textSelectionDelegate.userUpdateTextEditingValue`. This change ensures correct selection values are passed to `TextInputFormatter`. The code illustrates the original calls and the updated replacement.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/2-10-deprecations.md#_snippet_9\n\nLANGUAGE: Dart\nCODE:\n```\nrenderEditable.onSelectionChanged(selection, renderObject, cause);\ntextSelectionDelegate.textEditingValue = value;\n```\n\nLANGUAGE: Dart\nCODE:\n```\ntextSelectionDelegate.userUpdateTextEditingValue(value, cause);\n```\n\n----------------------------------------\n\nTITLE: Migrating ThemeData accentColor to colorScheme.secondary in Dart\nDESCRIPTION: This snippet illustrates how to migrate from the deprecated `ThemeData.accentColor` to the recommended `ThemeData.colorScheme.secondary`. This change aligns with Material Design guidelines and improves theming clarity. The snippet includes code examples showing the before-and-after migration process.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/3-7-deprecations.md#_snippet_1\n\nLANGUAGE: Dart\nCODE:\n```\nvar myTheme = ThemeData(\n  //...\n  accentColor: Colors.blue,\n  //...\n);\nvar color = myTheme.accentColor;\n\n```\n\nLANGUAGE: Dart\nCODE:\n```\nvar myTheme = ThemeData(\n  //...\n  colorScheme: ColorScheme(\n    //...\n    secondary:Colors.blue,\n    //...\n  ),\n  //...\n);\nvar color = myTheme.colorScheme.secondary;\n\n```\n\n----------------------------------------\n\nTITLE: Capturing exceptions programmatically in Flutter (Dart)\nDESCRIPTION: This snippet demonstrates how to manually capture and report exceptions to Sentry from within your Flutter application using the `Sentry.captureException` method.  The method takes an exception object and an optional stack trace as arguments. The stackTrace parameter provides context for debugging the source of the error.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/maintenance/error-reporting.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nawait Sentry.captureException(exception, stackTrace: stackTrace);\n```\n\n----------------------------------------\n\nTITLE: Creating Package.swift\nDESCRIPTION: This code snippet demonstrates the basic structure of a Package.swift file for a Flutter plugin. It includes the package name, platform support, products (library), dependencies, and target definitions. The code shows where to update the plugin name, supported platforms, library name, and target name.\nSOURCE: https://github.com/flutter/website/blob/main/src/_includes/docs/swift-package-manager/migrate-swift-plugin.md#_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\n// swift-tools-version: 5.9\n// The swift-tools-version declares the minimum version of Swift required to build this package.\n\nimport PackageDescription\n\nlet package = Package(\n    // TODO: Update your plugin name.\n    name: \"plugin_name\",\n    platforms: [\n        // TODO: Update the platforms your plugin supports.\n        // If your plugin only supports iOS, remove `.macOS(...)`.\n        // If your plugin only supports macOS, remove `.iOS(...)`.\n        .iOS(\"12.0\"),\n        .macOS(\"10.14\")\n    ],\n    products: [\n        // TODO: Update your library and target names.\n        // If the plugin name contains \"_\", replace with \"-\" for the library name.\n        .library(name: \"plugin-name\", targets: [\"plugin_name\"])\n    ],\n    dependencies: [],\n    targets: [\n        .target(\n            // TODO: Update your target name.\n            name: \"plugin_name\",\n            dependencies: [],\n            resources: [\n                // TODO: If your plugin requires a privacy manifest\n                // (e.g. if it uses any required reason APIs), update the PrivacyInfo.xcprivacy file\n                // to describe your plugin's privacy impact, and then uncomment this line.\n                // For more information, see:\n                // https://developer.apple.com/documentation/bundleresources/privacy_manifest_files\n                // .process(\"PrivacyInfo.xcprivacy\"),\n\n                // TODO: If you have other resources that need to be bundled with your plugin, refer to\n                // the following instructions to add them:\n                // https://developer.apple.com/documentation/xcode/bundling-resources-with-a-swift-package\n            ]\n        )\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Importing Widgets: Dart\nDESCRIPTION: This snippet shows how to import widgets in Flutter from different libraries such as Material Design, Cupertino, and the basic Widgets library.  It emphasizes that Dart only imports the widgets that are actually used in the application.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/react-native-devs.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\n// React Native\nimport React from 'react';\nimport { StyleSheet, Text, View } from 'react-native';\n```\n\nLANGUAGE: Dart\nCODE:\n```\nimport 'package:flutter/cupertino.dart';\nimport 'package:flutter/material.dart';\nimport 'package:flutter/widgets.dart';\nimport 'package:my_widgets/my_widgets.dart';\n```\n\n----------------------------------------\n\nTITLE: Load UserProfile with Stream in Dart\nDESCRIPTION: Loads the user profile by subscribing to a stream provided by the UserProfileRepository. It updates the view model's state and notifies listeners whenever new data is emitted, ensuring that the UI always displays the latest available information.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/app-architecture/design-patterns/offline-first.md#_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> load() async {\n  await _userProfileRepository\n      .getUserProfile()\n      .listen(\n        (userProfile) {\n          _userProfile = userProfile;\n          notifyListeners();\n        },\n        onError: (error) {\n          // handle error\n        },\n      )\n      .asFuture();\n}\n```\n\n----------------------------------------\n\nTITLE: Shimmer Loading Example in DartPad\nDESCRIPTION: This Dart code implements a shimmer loading animation in a Flutter application. It uses custom widgets like `Shimmer`, `ShimmerLoading`, `CircleListItem`, and `CardListItem` to demonstrate the loading effect. The main functionality revolves around using `LinearGradient` and `ShaderMask` to create the shimmer visual effect, which is triggered by a loading state managed with `setState`.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/effects/shimmer-loading.md#_snippet_14\n\nLANGUAGE: Dart\nCODE:\n```\nimport 'package:flutter/material.dart';\n\nvoid main() {\n  runApp(\n    const MaterialApp(\n      home: ExampleUiLoadingAnimation(),\n      debugShowCheckedModeBanner: false,\n    ),\n  );\n}\n\nconst _shimmerGradient = LinearGradient(\n  colors: [Color(0xFFEBEBF4), Color(0xFFF4F4F4), Color(0xFFEBEBF4)],\n  stops: [0.1, 0.3, 0.4],\n  begin: Alignment(-1.0, -0.3),\n  end: Alignment(1.0, 0.3),\n  tileMode: TileMode.clamp,\n);\n\nclass ExampleUiLoadingAnimation extends StatefulWidget {\n  const ExampleUiLoadingAnimation({super.key});\n\n  @override\n  State<ExampleUiLoadingAnimation> createState() =>\n      _ExampleUiLoadingAnimationState();\n}\n\nclass _ExampleUiLoadingAnimationState extends State<ExampleUiLoadingAnimation> {\n  bool _isLoading = true;\n\n  void _toggleLoading() {\n    setState(() {\n      _isLoading = !_isLoading;\n    });\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: Shimmer(\n        linearGradient: _shimmerGradient,\n        child: ListView(\n          physics: _isLoading ? const NeverScrollableScrollPhysics() : null,\n          children: [\n            const SizedBox(height: 16),\n            _buildTopRowList(),\n            const SizedBox(height: 16),\n            _buildListItem(),\n            _buildListItem(),\n            _buildListItem(),\n          ],\n        ),\n      ),\n      floatingActionButton: FloatingActionButton(\n        onPressed: _toggleLoading,\n        child: Icon(_isLoading ? Icons.hourglass_full : Icons.hourglass_bottom),\n      ),\n    );\n  }\n\n  Widget _buildTopRowList() {\n    return SizedBox(\n      height: 72,\n      child: ListView(\n        physics: _isLoading ? const NeverScrollableScrollPhysics() : null,\n        scrollDirection: Axis.horizontal,\n        shrinkWrap: true,\n        children: [\n          const SizedBox(width: 16),\n          _buildTopRowItem(),\n          _buildTopRowItem(),\n          _buildTopRowItem(),\n          _buildTopRowItem(),\n          _buildTopRowItem(),\n          _buildTopRowItem(),\n        ],\n      ),\n    );\n  }\n\n  Widget _buildTopRowItem() {\n    return ShimmerLoading(isLoading: _isLoading, child: const CircleListItem());\n  }\n\n  Widget _buildListItem() {\n    return ShimmerLoading(\n      isLoading: _isLoading,\n      child: CardListItem(isLoading: _isLoading),\n    );\n  }\n}\n\nclass Shimmer extends StatefulWidget {\n  static ShimmerState? of(BuildContext context) {\n    return context.findAncestorStateOfType<ShimmerState>();\n  }\n\n  const Shimmer({super.key, required this.linearGradient, this.child});\n\n  final LinearGradient linearGradient;\n  final Widget? child;\n\n  @override\n  ShimmerState createState() => ShimmerState();\n}\n\nclass ShimmerState extends State<Shimmer> with SingleTickerProviderStateMixin {\n  late AnimationController _shimmerController;\n\n  @override\n  void initState() {\n    super.initState();\n\n    _shimmerController = AnimationController.unbounded(vsync: this)\n      ..repeat(min: -0.5, max: 1.5, period: const Duration(milliseconds: 1000));\n  }\n\n  @override\n  void dispose() {\n    _shimmerController.dispose();\n    super.dispose();\n  }\n\n  LinearGradient get gradient => LinearGradient(\n    colors: widget.linearGradient.colors,\n    stops: widget.linearGradient.stops,\n    begin: widget.linearGradient.begin,\n    end: widget.linearGradient.end,\n    transform: _SlidingGradientTransform(\n      slidePercent: _shimmerController.value,\n    ),\n  );\n\n  bool get isSized =>\n      (context.findRenderObject() as RenderBox?)?.hasSize ?? false;\n\n  Size get size => (context.findRenderObject() as RenderBox).size;\n\n  Offset getDescendantOffset({\n    required RenderBox descendant,\n    Offset offset = Offset.zero,\n  }) {\n    final shimmerBox = context.findRenderObject() as RenderBox?;\n    return descendant.localToGlobal(offset, ancestor: shimmerBox);\n  }\n\n  Listenable get shimmerChanges => _shimmerController;\n\n  @override\n  Widget build(BuildContext context) {\n    return widget.child ?? const SizedBox();\n  }\n}\n\nclass _SlidingGradientTransform extends GradientTransform {\n  const _SlidingGradientTransform({required this.slidePercent});\n\n  final double slidePercent;\n\n  @override\n  Matrix4? transform(Rect bounds, {TextDirection? textDirection}) {\n    return Matrix4.translationValues(bounds.width * slidePercent, 0.0, 0.0);\n  }\n}\n\nclass ShimmerLoading extends StatefulWidget {\n  const ShimmerLoading({\n    super.key,\n    required this.isLoading,\n    required this.child,\n  });\n\n  final bool isLoading;\n  final Widget child;\n\n  @override\n  State<ShimmerLoading> createState() => _ShimmerLoadingState();\n}\n\nclass _ShimmerLoadingState extends State<ShimmerLoading> {\n  Listenable? _shimmerChanges;\n\n  @override\n  void didChangeDependencies() {\n    super.didChangeDependencies();\n    if (_shimmerChanges != null) {\n      _shimmerChanges!.removeListener(_onShimmerChange);\n    }\n    _shimmerChanges = Shimmer.of(context)?.shimmerChanges;\n    if (_shimmerChanges != null) {\n      _shimmerChanges!.addListener(_onShimmerChange);\n    }\n  }\n\n  @override\n  void dispose() {\n    _shimmerChanges?.removeListener(_onShimmerChange);\n    super.dispose();\n  }\n\n  void _onShimmerChange() {\n    if (widget.isLoading) {\n      setState(() {\n        // Update the shimmer painting.\n      });\n    }\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    if (!widget.isLoading) {\n      return widget.child;\n    }\n\n    // Collect ancestor shimmer info.\n    final shimmer = Shimmer.of(context)!;\n    if (!shimmer.isSized) {\n      // The ancestor Shimmer widget has not laid\n      // itself out yet. Return an empty box.\n      return const SizedBox();\n    }\n    final shimmerSize = shimmer.size;\n    final gradient = shimmer.gradient;\n    final offsetWithinShimmer = shimmer.getDescendantOffset(\n      descendant: context.findRenderObject() as RenderBox,\n    );\n\n    return ShaderMask(\n      blendMode: BlendMode.srcATop,\n      shaderCallback: (bounds) {\n        return gradient.createShader(\n          Rect.fromLTWH(\n            -offsetWithinShimmer.dx,\n            -offsetWithinShimmer.dy,\n            shimmerSize.width,\n            shimmerSize.height,\n          ),\n        );\n      },\n      child: widget.child,\n    );\n  }\n}\n\n//----------- List Items ---------\nclass CircleListItem extends StatelessWidget {\n  const CircleListItem({super.key});\n  @override\n  Widget build(BuildContext context) {\n    return Padding(\n      padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 8),\n      child: Container(\n        width: 54,\n        height: 54,\n        decoration: const BoxDecoration(\n          color: Colors.black,\n          shape: BoxShape.circle,\n        ),\n        child: ClipOval(\n          child: Image.network(\n            'https://docs.flutter.dev/cookbook'\n            '/img-files/effects/split-check/Avatar1.jpg',\n            fit: BoxFit.cover,\n          ),\n        ),\n      ),\n    );\n  }\n}\n\nclass CardListItem extends StatelessWidget {\n  const CardListItem({super.key, required this.isLoading});\n\n  final bool isLoading;\n\n  @override\n  Widget build(BuildContext context) {\n    return Padding(\n      padding: const EdgeInsets.symmetric(horizontal: 24, vertical: 16),\n      child: Column(\n        crossAxisAlignment: CrossAxisAlignment.start,\n        children: [_buildImage(), const SizedBox(height: 16), _buildText()],\n      ),\n    );\n  }\n\n  Widget _buildImage() {\n    return AspectRatio(\n      aspectRatio: 16 / 9,\n      child: Container(\n        width: double.infinity,\n        decoration: BoxDecoration(\n          color: Colors.black,\n          borderRadius: BorderRadius.circular(16),\n        ),\n        child: ClipRRect(\n          borderRadius: BorderRadius.circular(16),\n          child: Image.network(\n            'https://docs.flutter.dev/cookbook'\n            '/img-files/effects/split-check/Food1.jpg',\n            fit: BoxFit.cover,\n          ),\n        ),\n      ),\n    );\n  }\n\n  Widget _buildText() {\n    if (isLoading) {\n      return Column(\n        crossAxisAlignment: CrossAxisAlignment.start,\n        children: [\n          Container(\n            width: double.infinity,\n            height: 24,\n            decoration: BoxDecoration(\n              color: Colors.black,\n              borderRadius: BorderRadius.circular(16),\n            ),\n          ),\n          const SizedBox(height: 16),\n          Container(\n            width: 250,\n            height: 24,\n            decoration: BoxDecoration(\n              color: Colors.black,\n              borderRadius: BorderRadius.circular(16),\n            ),\n          ),\n        ],\n      );\n    } else {\n      return const Padding(\n        padding: EdgeInsets.symmetric(horizontal: 8),\n        child: Text(\n          'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do '\n          'eiusmod tempor incididunt ut labore et dolore magna aliqua.',\n        ),\n      );\n    }\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Row of Widgets (Dart)\nDESCRIPTION: This snippet shows how to create a row of widgets using the `Row` widget in Flutter. It displays three `BorderedImage` widgets arranged horizontally.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/fundamentals/layout.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nWidget build(BuildContext context) {\n  return Row(\n    children: [\n      BorderedImage(),\n      BorderedImage(),\n      BorderedImage(),\n    ],\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating Button with custom disabled colors using MaterialStateProperty in Dart\nDESCRIPTION: This code snippet provides a complete migration for custom disabled colors using `MaterialStateProperty.resolveWith` to define both the background and foreground colors when the button is disabled. This allows for full control over the button's appearance in the disabled state.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/buttons.md#_snippet_14\n\nLANGUAGE: dart\nCODE:\n```\nRaisedButton(\n  disabledColor: Colors.red,\n  disabledTextColor: Colors.blue,\n  onPressed: null,\n  child: Text('RaisedButton with custom disabled colors'),\n)\n\nElevatedButton(\n  style: ButtonStyle(\n    backgroundColor: MaterialStateProperty.resolveWith<Color?>(\n      (Set<MaterialState> states) {\n        if (states.contains(MaterialState.disabled))\n          return Colors.red;\n        return null; // Defer to the widget's default.\n    }),\n    foregroundColor: MaterialStateProperty.resolveWith<Color?>(\n      (Set<MaterialState> states) {\n        if (states.contains(MaterialState.disabled))\n          return Colors.blue;\n        return null; // Defer to the widget's default.\n    }),\n  ),\n  onPressed: null,\n  child: Text('ElevatedButton with custom disabled colors'),\n)\n```\n\n----------------------------------------\n\nTITLE: ListView Navigation in Flutter\nDESCRIPTION: This snippet demonstrates how to use `Navigator.pushNamed()` in a Flutter app to navigate to a named route when a `ListTile` is tapped.  It passes data (a `person` object) to the new route as arguments using the `arguments` parameter. The code uses ListView.builder to display the list of items.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/swiftui-devs.md#_snippet_24\n\nLANGUAGE: Dart\nCODE:\n```\nListView.builder(\n  itemCount: mockPersons.length,\n  itemBuilder: (context, index) {\n    final person = mockPersons.elementAt(index);\n    final age = '${person.age} years old';\n    return ListTile(\n      title: Text(person.name),\n      subtitle: Text(age),\n      trailing: const Icon(Icons.arrow_forward_ios),\n      onTap: () {\n        // When a [ListTile] that represents a person is\n        // tapped, push the detailsPageRouteName route\n        // to the Navigator and pass the person's instance\n        // to the route.\n        Navigator.of(\n          context,\n        ).pushNamed(detailsPageRouteName, arguments: person);\n      },\n    );\n  },\n),\n```\n\n----------------------------------------\n\nTITLE: Register Platform View in Plugin - Swift\nDESCRIPTION: This Swift code snippet demonstrates how to register the platform view factory within a Flutter plugin. The `register(with:)` method is used to register the factory with the plugin registrar, associating it with a specific ID.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/platform-integration/ios/platform-views.md#_snippet_4\n\nLANGUAGE: Swift\nCODE:\n```\nimport Flutter\nimport UIKit\n\nclass FLPlugin: NSObject, FlutterPlugin {\n    public static func register(with registrar: FlutterPluginRegistrar) {\n        let factory = FLNativeViewFactory(messenger: registrar.messenger())\n        registrar.register(factory, withId: \"<platform-view-type>\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Create FFI Plugin\nDESCRIPTION: This console command creates a new Flutter FFI plugin project. It utilizes the `--template=plugin_ffi` flag to initialize the project with the necessary structure for FFI integration.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/packages-and-plugins/developing-packages.md#_snippet_19\n\nLANGUAGE: console\nCODE:\n```\n$ flutter create --template=plugin_ffi hello\n```\n\n----------------------------------------\n\nTITLE: Complete Flutter App with Isolate Data Loading\nDESCRIPTION: This is a complete Flutter app demonstrating the use of Isolates to load data. It includes the necessary imports, the main app setup, the stateful widget, the isolate spawning and communication, and the UI rendering logic.  It shows a loading indicator while the data is fetched in the background.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/uikit-devs.md#_snippet_28\n\nLANGUAGE: dart\nCODE:\n```\nimport 'dart:async';\nimport 'dart:convert';\nimport 'dart:isolate';\n\nimport 'package:flutter/material.dart';\nimport 'package:http/http.dart' as http;\n\nvoid main() {\n  runApp(const SampleApp());\n}\n\nclass SampleApp extends StatelessWidget {\n  const SampleApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return const MaterialApp(title: 'Sample App', home: SampleAppPage());\n  }\n}\n\nclass SampleAppPage extends StatefulWidget {\n  const SampleAppPage({super.key});\n\n  @override\n  State<SampleAppPage> createState() => _SampleAppPageState();\n}\n\nclass _SampleAppPageState extends State<SampleAppPage> {\n  List<Map<String, Object?>> data = [];\n\n  @override\n  void initState() {\n    super.initState();\n    loadData();\n  }\n\n  bool get showLoadingDialog => data.isEmpty;\n\n  Future<void> loadData() async {\n    final ReceivePort receivePort = ReceivePort();\n    await Isolate.spawn(dataLoader, receivePort.sendPort);\n\n    // The 'echo' isolate sends its SendPort as the first message.\n    final SendPort sendPort = await receivePort.first as SendPort;\n\n    final List<Map<String, dynamic>> msg = await sendReceive(\n      sendPort,\n      'https://jsonplaceholder.typicode.com/posts',\n    );\n\n    setState(() {\n      data = msg;\n    });\n  }\n\n  // The entry point for the isolate.\n  static Future<void> dataLoader(SendPort sendPort) async {\n    // Open the ReceivePort for incoming messages.\n    final ReceivePort port = ReceivePort();\n\n    // Notify any other isolates what port this isolate listens to.\n    sendPort.send(port.sendPort);\n\n    await for (final dynamic msg in port) {\n      final String url = msg[0] as String;\n      final SendPort replyTo = msg[1] as SendPort;\n\n      final Uri dataURL = Uri.parse(url);\n      final http.Response response = await http.get(dataURL);\n      // Lots of JSON to parse\n      replyTo.send(jsonDecode(response.body) as List<Map<String, dynamic>>);\n    }\n  }\n\n  Future<List<Map<String, dynamic>>> sendReceive(SendPort port, String msg) {\n    final ReceivePort response = ReceivePort();\n    port.send(<dynamic>[msg, response.sendPort]);\n    return response.first as Future<List<Map<String, dynamic>>>;\n  }\n\n  Widget getBody() {\n    bool showLoadingDialog = data.isEmpty;\n\n    if (showLoadingDialog) {\n      return getProgressDialog();\n    } else {\n      return getListView();\n    }\n  }\n\n  Widget getProgressDialog() {\n    return const Center(child: CircularProgressIndicator());\n  }\n\n  ListView getListView() {\n    return ListView.builder(\n      itemCount: data.length,\n      itemBuilder: (context, position) {\n        return getRow(position);\n      },\n    );\n  }\n\n  Widget getRow(int i) {\n    return Padding(\n      padding: const EdgeInsets.all(10),\n      child: Text(\"Row ${data[i][\"title\"]}\"),\n    );\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: const Text('Sample App')),\n      body: getBody(),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: BoxConstraints Tight Constructor\nDESCRIPTION: Presents the `BoxConstraints.tight` constructor, explaining how it defines tight constraints by setting the minimum and maximum width and height to the same value. This constructor is used to create constraints where a widget must have a specific, fixed size.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/layout/constraints.md#_snippet_60\n\nLANGUAGE: dart\nCODE:\n```\nBoxConstraints.tight(Size size)\n   : minWidth = size.width,\n     maxWidth = size.width,\n     minHeight = size.height,\n     maxHeight = size.height;\n```\n\n----------------------------------------\n\nTITLE: Defining DemoLocalizations Class with Intl\nDESCRIPTION: This code snippet defines the `DemoLocalizations` class, which encapsulates the app's localized strings using the `intl` package. It includes a `load` method to initialize messages and a `title` getter to retrieve the localized title. It depends on the `intl` package and utilizes `Intl.message` for looking up localized strings.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/accessibility-and-internationalization/internationalization.md#_snippet_31\n\nLANGUAGE: dart\nCODE:\n```\nclass DemoLocalizations {\n  DemoLocalizations(this.localeName);\n\n  static Future<DemoLocalizations> load(Locale locale) {\n    final String name =\n        locale.countryCode == null || locale.countryCode!.isEmpty\n            ? locale.languageCode\n            : locale.toString();\n    final String localeName = Intl.canonicalizedLocale(name);\n\n    return initializeMessages(localeName).then((_) {\n      return DemoLocalizations(localeName);\n    });\n  }\n\n  static DemoLocalizations of(BuildContext context) {\n    return Localizations.of<DemoLocalizations>(context, DemoLocalizations)!;\n  }\n\n  final String localeName;\n\n  String get title {\n    return Intl.message(\n      'Hello World',\n      name: 'title',\n      desc: 'Title for the Demo application',\n      locale: localeName,\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Nonlinear Text Scaling (Dart)\nDESCRIPTION: This snippet shows how to temporarily opt-out of nonlinear text scaling on Android 14. It modifies the MediaQuery to use a linear TextScaler by copying the current MediaQueryData and applying a linear text scaler.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/deprecate-textscalefactor.md#_snippet_9\n\nLANGUAGE: Dart\nCODE:\n```\nrunApp(\n  Builder(builder: (context) {\n    final mediaQueryData = MediaQuery.of(context);\n    final mediaQueryDataWithLinearTextScaling = mediaQueryData\n      .copyWith(textScaler: TextScaler.linear(mediaQueryData.textScaler.textScaleFactor));\n    return MediaQuery(data: mediaQueryDataWithLinearTextScaling, child: realWidgetTree);\n  }),\n);\n```\n\n----------------------------------------\n\nTITLE: CheckboxThemeData Customization After Migration (Dart)\nDESCRIPTION: This code demonstrates how to customize the CheckboxThemeData.fillColor property after the migration to achieve the previous behavior. The fillColor is set to transparent when the checkbox is unselected, and the desired border color is specified using the CheckboxThemeData.side property.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/checkbox-fillColor.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\ncheckboxTheme: CheckboxThemeData(\n  fillColor: MaterialStateProperty.resolveWith((states) {\n    if (!states.contains(MaterialState.selected)) {\n      return Colors.transparent;\n    }\n    return null;\n  }),\n  side: const BorderSide(color: Colors.red, width: 2),\n),\n```\n\n----------------------------------------\n\nTITLE: Update Xcode Project Settings to Use Profiles\nDESCRIPTION: Updates the Xcode project settings to use the fetched code signing profiles.  This ensures that the correct profiles are used when building the app.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/deployment/macos.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nxcode-project use-profiles\n```\n\n----------------------------------------\n\nTITLE: Stack Widget After ClipBehavior Migration Dart\nDESCRIPTION: This code snippet shows how to migrate the `Stack` widget by replacing `overflow: Overflow.visible` with `clipBehavior: Clip.none`.  It demonstrates the new approach to control clipping behavior for improved performance.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/clip-behavior.md#_snippet_1\n\nLANGUAGE: Dart\nCODE:\n```\n    await tester.pumpWidget(\n      Directionality(\n        textDirection: TextDirection.ltr,\n        child: Center(\n          child: Stack(\n            clipBehavior: Clip.none,\n            children: const <Widget>[\n              SizedBox(\n                width: 100.0,\n                height: 100.0,\n              ),\n            ],\n          ),\n        ),\n      ),\n    );\n```\n\n----------------------------------------\n\nTITLE: Tapping FloatingActionButton and Updating State\nDESCRIPTION: This snippet demonstrates how to simulate tapping a FloatingActionButton and rebuilding the widget tree to reflect state changes in a widget test. It taps the button using `tester.tap()` and then rebuilds the widget using `tester.pump()` to ensure the UI is updated.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/testing/widget/tap-drag.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\ntestWidgets('Add and remove a todo', (tester) async {\n  // Enter text code...\n\n  // Tap the add button.\n  await tester.tap(find.byType(FloatingActionButton));\n\n  // Rebuild the widget after the state has changed.\n  await tester.pump();\n\n  // Expect to find the item on screen.\n  expect(find.text('hi'), findsOneWidget);\n});\n```\n\n----------------------------------------\n\nTITLE: LayoutBuilder Widget in Flutter\nDESCRIPTION: This code snippet demonstrates the use of `LayoutBuilder` widget in Flutter. `LayoutBuilder` allows to build different layouts based on available constraints (maxWidth). This is useful for responsive layouts, where the UI adapts based on screen size.  If the maximum width is less than 600, it returns OneColumnLayout, otherwise TwoColumnLayout.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/resources/architectural-overview.md#_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nWidget build(BuildContext context) {\n  return LayoutBuilder(\n    builder: (context, constraints) {\n      if (constraints.maxWidth < 600) {\n        return const OneColumnLayout();\n      } else {\n        return const TwoColumnLayout();\n      }\n    },\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Assets directory path example YAML\nDESCRIPTION: This code snippet demonstrates how to declare entire directories as assets in the `pubspec.yaml` file. This indicates that all files within those directories should be included as assets.  It simplifies asset management when dealing with multiple assets in a structured directory layout.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/tools/pubspec.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nflutter:\n  assets:\n    - assets/images/\n    - assets/icons/\n```\n\n----------------------------------------\n\nTITLE: Flutter Debug Configuration in launch.json (Debug Mode)\nDESCRIPTION: This snippet shows an example `launch.json` configuration for running a Flutter app in debug mode within Visual Studio Code. It specifies the Flutter project, request type (launch), debugger type (dart), and the Flutter mode (debug).  This configuration allows developers to utilize breakpoints and step through the code during execution.  The `launch.json` file configures the debugging environment.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/tools/vs-code.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"configurations\": [\n    {\n      \"name\": \"Flutter\",\n      \"request\": \"launch\",\n      \"type\": \"dart\",\n      \"flutterMode\": \"debug\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: ThemeData Before Migration (toggleableActiveColor)\nDESCRIPTION: This code shows how to set the toggleableActiveColor in ThemeData before the migration. This property is now deprecated and should be replaced with component themes or widget color properties.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/toggleable-active-color.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nMaterialApp(\n  theme: ThemeData(toggleableActiveColor: myColor),\n  // ...\n);\n```\n\n----------------------------------------\n\nTITLE: Preventing Overscaling: After (Dart)\nDESCRIPTION: This code snippet demonstrates the recommended method for preventing content from overscaling in Flutter using MediaQuery.withClampedTextScaling. The maxScaleFactor parameter specifies the maximum allowed scaling factor.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/deprecate-textscalefactor.md#_snippet_8\n\nLANGUAGE: Dart\nCODE:\n```\nMediaQuery.withClampedTextScaling(\n  maxScaleFactor: _kMaxTitleTextScaleFactor,\n  child: title,\n)\n```\n\n----------------------------------------\n\nTITLE: ARB File Example for Localization\nDESCRIPTION: This example shows the structure of an ARB (Application Resource Bundle) file used for localization in Flutter. It demonstrates how to define key-value pairs for strings, including descriptions and placeholders for dynamic values.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/android-devs.md#_snippet_26\n\nLANGUAGE: JSON\nCODE:\n```\n{\n   \"@@locale\": \"en\",\n   \"hello\":\"Hello {userName}\",\n   \"@hello\":{\n      \"description\":\"A message with a single parameter\",\n      \"placeholders\":{\n         \"userName\":{\n            \"type\":\"String\",\n            \"example\":\"Bob\"\n         }\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: ListView without Manual Scrollbar (After)\nDESCRIPTION: This code shows how the Scrollbar is automatically applied on desktop platforms. The developer no longer needs to manually add a Scrollbar. A ScrollController is still created but only passed to the ListView.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/default-desktop-scrollbars.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nfinal ScrollController controller = ScrollController();\nListView.builder(\n  controller: controller,\n  itemBuilder: (BuildContext context, int index) {\n   return Text('Item $index');\n }\n);\n```\n\n----------------------------------------\n\nTITLE: Setting Slow Animations in Flutter\nDESCRIPTION: This code snippet demonstrates how to slow down animations in Flutter using the `timeDilation` property from the `flutter/scheduler.dart` package. Setting `timeDilation` to 5.0 will make animations run 5 times slower, which can be useful for detailed visual inspection of animations. No inputs are required, and the effect is global.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/tools/devtools/inspector.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/scheduler.dart';\n\nvoid setSlowAnimations() {\n  timeDilation = 5.0;\n}\n```\n\n----------------------------------------\n\nTITLE: AlertDialog Example After Migration - Dart\nDESCRIPTION: This code shows how to implement an AlertDialog after the automatic scrolling update.  The outer SingleChildScrollView is no longer necessary because the AlertDialog itself now handles scrolling.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/scrollable-alert-dialog.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nAlertDialog(\n  title: Text('Very, very large title', textScaleFactor: 5),\n  content: Text('Very, very large content', textScaleFactor: 5),\n  actions: <Widget>[\n    TextButton(child: Text('Button 1'), onPressed: () {}),\n    TextButton(child: Text('Button 2'), onPressed: () {}),\n  ],\n)\n```\n\n----------------------------------------\n\nTITLE: Flutter Container Aligned Bottom Right\nDESCRIPTION: This example creates a Container widget with a specified width and height of 100 pixels and a red background color, wrapped in an Align widget. The Align widget aligns the container to the bottom-right of the available space.  Like the Center Widget, Align doesn't force its child to a specific size.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/layout/constraints.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nAlign(\n   alignment: Alignment.bottomRight,\n   child: Container(width: 100, height: 100, color: red))\n```\n\n----------------------------------------\n\nTITLE: Deserialize JSON Inline (dart:convert)\nDESCRIPTION: This snippet demonstrates how to deserialize JSON inline using `jsonDecode` from the `dart:convert` library.  It decodes a JSON string into a `Map<String, dynamic>` and accesses the values by key. It highlights the lack of type safety with this approach.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/data-and-backend/serialization/json.md#_snippet_1\n\nLANGUAGE: Dart\nCODE:\n```\nfinal user = jsonDecode(jsonString) as Map<String, dynamic>;\n\nprint('Howdy, ${user['name']}!');\nprint('We sent the verification link to ${user['email']}.');\n```\n\n----------------------------------------\n\nTITLE: New attachToActivity signature Java\nDESCRIPTION: This code snippet shows the new `attachToActivity` method signature. It now takes an `ExclusiveAppComponent<Activity>` and a `Lifecycle` object as parameters.  This change enforces exclusion between activities connecting to the engine, preventing lifecycle cross-talk issues.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/android-activity-control-surface-attach.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nvoid attachToActivity(\n    @NonNull ExclusiveAppComponent<Activity> exclusiveActivity,\n    @NonNull Lifecycle lifecycle);\n```\n\n----------------------------------------\n\nTITLE: Creating a new Flutter project\nDESCRIPTION: This command creates a new Flutter project named `flavors_example`. It initializes a basic Flutter project structure.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/deployment/flavors-ios.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ flutter create flavors_example\n```\n\n----------------------------------------\n\nTITLE: Configure Java Version in Gradle (Groovy)\nDESCRIPTION: Configures the Java version compatibility in the `build.gradle` file of the Android application to Java 11 or later. This ensures that the Android project is compatible with the minimum Java version required by Flutter.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/add-to-app/android/project-setup.md#_snippet_3\n\nLANGUAGE: Groovy\nCODE:\n```\nandroid {\n    // ...\n    compileOptions {\n        sourceCompatibility = 11 // The minimum value\n        targetCompatibility = 11 // The minimum value\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Color Scheme in Flutter\nDESCRIPTION: This Flutter code snippet demonstrates how to set the color scheme of a `MaterialApp` using `ThemeData`. It sets the color scheme from seed to `deepPurple` and the text selection color to `red`.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/react-native-devs.md#_snippet_32\n\nLANGUAGE: dart\nCODE:\n```\nclass SampleApp extends StatelessWidget {\n  const SampleApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: 'Sample App',\n      theme: ThemeData(\n        colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),\n        textSelectionTheme: const TextSelectionThemeData(\n          selectionColor: Colors.red,\n        ),\n      ),\n      home: const SampleAppPage(),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating ShortcutManager.handleKeypress - After\nDESCRIPTION: Shows the updated implementation of `ShortcutManager.handleKeypress` using `KeyEvent`. This example shows how to extend `ShortcutManager` after the migration to `KeyEvent`. Note the check for `KeyRepeatEvent` instead of `event.repeat`.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/shortcut-key-event-migration.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nclass _MyShortcutManager extends ShortcutManager {\n  @override\n  KeyEventResult handleKeypress(BuildContext context, KeyEvent event) {\n    if (event is! KeyDownEvent && event is! KeyRepeatEvent) {\n      return KeyEventResult.ignored;\n    }\n    if (event is KeyRepeatEvent) {\n      // (Do something with repeated keys.)\n    }\n    // ... (your implementation here)\n    return KeyEventResult.handled;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example of Incorrect Navigator Setup Flutter\nDESCRIPTION: This code demonstrates an incorrect setup where two Navigators are built under the same HeroControllerScope, leading to an assertion error after the change. It shows how the MaterialApp implicitly creates a HeroControllerScope, and placing two Navigators within its builder function causes the issue.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/hero-controller-scope.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\n\nvoid main() {\n  runApp(\n    MaterialApp(\n      builder: (BuildContext context, Widget child) {\n        // Builds two parallel navigators. This throws\n        // error because both of navigators are under the same\n        // hero controller scope created by MaterialApp.\n        return Stack(\n          children: <Widget>[\n            Navigator(\n              onGenerateRoute: (RouteSettings settings) {\n                return MaterialPageRoute<void>(\n                  settings: settings,\n                  builder: (BuildContext context) {\n                    return const Text('first Navigator');\n                  }\n                );\n              },\n            ),\n            Navigator(\n              onGenerateRoute: (RouteSettings settings) {\n                return MaterialPageRoute<void>(\n                  settings: settings,\n                  builder: (BuildContext context) {\n                    return const Text('Second Navigator');\n                  }\n                );\n              },\n            ),\n          ],\n        );\n      }\n    )\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating MenuListItem Widget in Dart\nDESCRIPTION: This snippet demonstrates the creation of a `MenuListItem` widget, which displays the name, price, and photo of a menu item. It takes the item's name, formatted price, and image provider as input parameters.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/effects/drag-a-widget.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nMenuListItem(\n  name: item.name,\n  price: item.formattedTotalItemPrice,\n  photoProvider: item.imageProvider,\n)\n```\n\n----------------------------------------\n\nTITLE: Copy and Modify ScrollBehavior\nDESCRIPTION: This code demonstrates how to copy the existing ScrollBehavior and modify it using copyWith. In this example, the scrollbars are disabled. This allows for fine-grained control over the default ScrollBehavior without creating a completely new class.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/default-desktop-scrollbars.md#_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\n// ScrollBehavior can be copied and adjusted.\nfinal ScrollController controller = ScrollController();\nScrollConfiguration(\n  behavior: ScrollConfiguration.of(context).copyWith(scrollbars: false),\n  child: ListView.builder(\n    controller: controller,\n    itemBuilder: (BuildContext context, int index) {\n     return Text('Item $index');\n    }\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Accessing FlutterEngine from AppDelegate in SwiftUI\nDESCRIPTION: Demonstrates how to access the FlutterEngine created in a custom FlutterAppDelegate from a SwiftUI view. The AppDelegate instance is accessed through the view environment, and the FlutterEngine is passed to the FlutterViewController during its creation within a `UIViewControllerRepresentable`.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/add-to-app/ios/add-flutter-screen.md#_snippet_10\n\nLANGUAGE: Swift\nCODE:\n```\nimport SwiftUI\nimport Flutter\n\nstruct FlutterViewControllerRepresentable: UIViewControllerRepresentable {\n  // Access the AppDelegate through the view environment.\n  @Environment(AppDelegate.self) var appDelegate\n  \n  func makeUIViewController(context: Context) -> some UIViewController {\n    return FlutterViewController(\n      engine: appDelegate.flutterEngine,\n      nibName: nil,\n      bundle: nil)\n  }\n  \n  func updateUIViewController(_ uiViewController: UIViewControllerType, context: Context) {}\n}\n\nstruct ContentView: View {\n  var body: some View {\n    NavigationStack {\n      NavigationLink(\"My Flutter Feature\") {\n        FlutterViewControllerRepresentable()\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying a list view using ListView.builder - Flutter/Dart\nDESCRIPTION: This snippet demonstrates how to display a list view using `ListView.builder` in Flutter. It shows how to create a list from a data source without requiring identifiable items.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/swiftui-devs.md#_snippet_12\n\nLANGUAGE: Dart\nCODE:\n```\nclass Person {\n  String name;\n  Person(this.name);\n}\n\nfinal List<Person> items = [\n  Person('Person 1'),\n  Person('Person 2'),\n  Person('Person 3'),\n];\n\nclass HomePage extends StatelessWidget {\n  const HomePage({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: ListView.builder(\n        itemCount: items.length,\n        itemBuilder: (context, index) {\n          return ListTile(title: Text(items[index].name));\n        },\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing DraggableCard Widget State in Dart\nDESCRIPTION: Initializes the basic structure of a DraggableCard StatefulWidget, including a main function, stateless widget, and the DraggableCard and its state.  It sets up the initial widget structure for the physics animation example, defining the basic layout and including the Flutter logo.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/animation/physics-simulation.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\n\nvoid main() {\n  runApp(const MaterialApp(home: PhysicsCardDragDemo()));\n}\n\nclass PhysicsCardDragDemo extends StatelessWidget {\n  const PhysicsCardDragDemo({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(),\n      body: const DraggableCard(child: FlutterLogo(size: 128)),\n    );\n  }\n}\n\nclass DraggableCard extends StatefulWidget {\n  const DraggableCard({required this.child, super.key});\n\n  final Widget child;\n\n  @override\n  State<DraggableCard> createState() => _DraggableCardState();\n}\n\nclass _DraggableCardState extends State<DraggableCard> {\n  @override\n  void initState() {\n    super.initState();\n  }\n\n  @override\n  void dispose() {\n    super.dispose();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Align(child: Card(child: widget.child));\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying a Basic Tooltip in Flutter\nDESCRIPTION: This code snippet demonstrates how to display a basic tooltip using Flutter's built-in `Tooltip` widget. The tooltip appears when the user hovers over the specified text. It requires the `material` package and displays a message when hovered.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/adaptive-responsive/idioms.md#_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nreturn const Tooltip(\n  message: 'I am a Tooltip',\n  child: Text('Hover over the text to show a tooltip.'),\n);\n```\n\n----------------------------------------\n\nTITLE: JSON Placeholder Definition\nDESCRIPTION: This code snippet demonstrates how to define a placeholder in an Application Resource Bundle (.arb) file. It includes the message text with the placeholder `userName`, a description for the translator, and the placeholder definition specifying the type as `String` and providing an example value.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/accessibility-and-internationalization/internationalization.md#_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n\"hello\": \"Hello {userName}\",\n\"@hello\": {\n  \"description\": \"A message with a single parameter\",\n  \"placeholders\": {\n    \"userName\": {\n      \"type\": \"String\",\n      \"example\": \"Bob\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Flutter Application Run\nDESCRIPTION: Runs the Flutter application on a connected device or emulator. It requires a device or emulator to be properly configured and connected.\nSOURCE: https://github.com/flutter/website/blob/main/examples/layout/lakes/step5/README.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nflutter run\n```\n\n----------------------------------------\n\nTITLE: Multidex Keep File Configuration (Plaintext)\nDESCRIPTION: This plaintext snippet demonstrates the necessary configuration within a multidex keep file for a Flutter application.  It specifies the required FlutterLoader and PathUtils classes to be included, along with any other classes utilized during application startup.  This is necessary to avoid issues when targeting Android SDK 20 or below.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/deployment/android.md#_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\nio/flutter/embedding/engine/loader/FlutterLoader.class\nio/flutter/util/PathUtils.class\n```\n\n----------------------------------------\n\nTITLE: Adding Network Security Configuration Metadata to Android Manifest (XML)\nDESCRIPTION: This XML snippet demonstrates how to add metadata to the <application> tag in your Android manifest file to specify the location of your network security configuration XML file.  This allows Flutter to find and use the custom network policy. The `android:resource` attribute points to the XML file containing the network security configuration.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/network-policy-ios-android.md#_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<application ...>\n  ...\n  <meta-data android:name=\"io.flutter.network-policy\"\n             android:resource=\"@xml/network_security_config\"/>\n</application>\n```\n\n----------------------------------------\n\nTITLE: Populating a Drawer with List Items - Dart\nDESCRIPTION: This snippet demonstrates how to populate a `Drawer` with content using a `ListView`.  The `ListView` allows for scrolling if the content exceeds the screen height. It includes a `DrawerHeader` and two `ListTile` widgets.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/design/drawer.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nDrawer(\n  // Add a ListView to the drawer. This ensures the user can scroll\n  // through the options in the drawer if there isn't enough vertical\n  // space to fit everything.\n  child: ListView(\n    // Important: Remove any padding from the ListView.\n    padding: EdgeInsets.zero,\n    children: [\n      const DrawerHeader(\n        decoration: BoxDecoration(color: Colors.blue),\n        child: Text('Drawer Header'),\n      ),\n      ListTile(\n        title: const Text('Item 1'),\n        onTap: () {\n          // Update the state of the app.\n          // ...\n        },\n      ),\n      ListTile(\n        title: const Text('Item 2'),\n        onTap: () {\n          // Update the state of the app.\n          // ...\n        },\n      ),\n    ],\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Reusable Components in Flutter\nDESCRIPTION: This Flutter code demonstrates creating a reusable `CustomCard` widget and using it within another widget. The `CustomCard` widget takes an `index` and an `onPress` function as parameters. The `UseCard` widget uses the `CustomCard` and passes an anonymous function to the `onPress` parameter. Both widgets are `StatelessWidget`s.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/react-native-devs.md#_snippet_13\n\nLANGUAGE: Dart\nCODE:\n```\n/// Flutter\nclass CustomCard extends StatelessWidget {\n  const CustomCard({super.key, required this.index, required this.onPress});\n\n  final int index;\n  final void Function() onPress;\n\n  @override\n  Widget build(BuildContext context) {\n    return Card(\n      child: Column(\n        children: <Widget>[\n          Text('Card $index'),\n          TextButton(onPressed: onPress, child: const Text('Press')),\n        ],\n      ),\n    );\n  }\n}\n\nclass UseCard extends StatelessWidget {\n  const UseCard({super.key, required this.index});\n\n  final int index;\n\n  @override\n  Widget build(BuildContext context {\n    /// Usage\n    return CustomCard(\n      index: index,\n      onPress: () {\n        print('Card $index');\n      },\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Define Launch Theme in styles.xml (Android)\nDESCRIPTION: This XML snippet defines a launch theme for the Android app. It sets the `windowBackground` to a drawable resource that will be displayed as the launch screen. This is used to show a splash screen while the app initializes.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/platform-integration/android/splash-screen.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<style name=\"LaunchTheme\" parent=\"@android:style/Theme.Black.NoTitleBar\">\n    <item name=\"android:windowBackground\">@drawable/launch_background</item>\n</style>\n```\n\n----------------------------------------\n\nTITLE: Building UI with ViewModel Data Dart\nDESCRIPTION: Demonstrates how to access and display data from the view model within the `build` method of a widget. It uses `ListenableBuilder` to listen for updates and render a `CustomScrollView` containing a `SliverList.builder` that displays a list of bookings.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/app-architecture/case-study/ui-layer.md#_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\n@override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      // Some code was removed for brevity.\n      body: SafeArea(\n        child: ListenableBuilder(\n          listenable: viewModel,\n          builder: (context, _) {\n            return CustomScrollView(\n              slivers: [\n                SliverToBoxAdapter(...),\n                SliverList.builder(\n                   itemCount: [!viewModel.bookings.length!],\n                    itemBuilder: (_, index) => _Booking(\n                      key: ValueKey([!viewModel.bookings[index].id!]),\n                      booking:viewModel.bookings[index],\n                      onTap: () => context.push(Routes.bookingWithId(\n                         viewModel.bookings[index].id)),\n                      onDismissed: (_) => viewModel.deleteBooking.execute(\n                           viewModel.bookings[index].id,\n                         ),\n                    ),\n                ),\n              ],\n            );\n          },\n        ),\n      ),\n\n```\n\n----------------------------------------\n\nTITLE: Migrated AnimationSheetBuilder collate - Dart\nDESCRIPTION: Demonstrates the use of the `collate` method in `AnimationSheetBuilder` as a replacement for the deprecated `display` and `sheetSize` methods in Flutter tests. The collate method directly combines the recorded images and returns a single image asynchronously.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/3-10-deprecations.md#_snippet_6\n\nLANGUAGE: Dart\nCODE:\n```\nfinal AnimationSheetBuilder animationSheet = AnimationSheetBuilder(\n    frameSize: const Size(40, 40)\n);\n\nawait tester.pumpFrames(animationSheet.record(\n  const Directionality(\n    textDirection: TextDirection.ltr,\n    child: Padding(\n      padding: EdgeInsets.all(4),\n      child: CircularProgressIndicator(),\n    ),\n  ),\n), const Duration(seconds: 2));\n\nawait expectLater(\n  animationSheet.collate(20),\n  matchesGoldenFile('material.circular_progress_indicator.indeterminate.png'),\n);\n```\n\n----------------------------------------\n\nTITLE: Setting Dark Theme in Flutter (Dart)\nDESCRIPTION: Shows how to control the brightness mode (dark theme) in Flutter at the app level using the theme property of the MaterialApp widget. ThemeData is used to set the brightness to Brightness.dark.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/compose-devs.md#_snippet_18\n\nLANGUAGE: dart\nCODE:\n```\nconst MaterialApp(\n  theme: ThemeData(\n    brightness: Brightness.dark,\n  ),\n  home: HomePage(),\n);\n```\n\n----------------------------------------\n\nTITLE: Configure Xcode command-line tools - shell\nDESCRIPTION: Configures the command-line tools to use the installed version of Xcode and runs the first launch setup. It requires administrator privileges and assumes Xcode is installed in the /Applications directory. The path might need to be adjusted if a different Xcode version or location is used.\nSOURCE: https://github.com/flutter/website/blob/main/src/_includes/docs/install/compiler/xcode.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsudo sh -c 'xcode-select -s /Applications/Xcode.app/Contents/Developer && xcodebuild -runFirstLaunch'\n```\n\n----------------------------------------\n\nTITLE: Initializing Database Service and Repository in Dart\nDESCRIPTION: This code snippet shows how to initialize the `DatabaseService` and `TodoRepository` in the `main()` method of a Flutter application.  It handles platform-specific initialization for web, Linux, Windows, macOS and other native platforms and creates the repository with the database service.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/app-architecture/design-patterns/sql.md#_snippet_14\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() {\n  late DatabaseService databaseService;\n  if (kIsWeb) {\n    throw UnsupportedError('Platform not supported');\n  } else if (Platform.isLinux || Platform.isWindows || Platform.isMacOS) {\n    // Initialize FFI SQLite\n    sqfliteFfiInit();\n    databaseService = DatabaseService(databaseFactory: databaseFactoryFfi);\n  } else {\n    // Use default native SQLite\n    databaseService = DatabaseService(databaseFactory: databaseFactory);\n  }\n\n  runApp(\n    MainApp(\n      // ···\n      todoRepository: TodoRepository(database: databaseService),\n    ),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Animation Intervals in Flutter\nDESCRIPTION: This snippet shows how to calculate animation intervals for each list item and the bottom button using the `Interval` class.  These intervals specify the start and end times (as a percentage of the total animation duration) for each element's animation, enabling the staggered effect. The calculated intervals are stored in `_itemSlideIntervals` and `_buttonInterval`.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/effects/staggered-menu-animation.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nclass _MenuState extends State<Menu> with SingleTickerProviderStateMixin {\n  final List<Interval> _itemSlideIntervals = [];\n  late Interval _buttonInterval;\n\n  @override\n  void initState() {\n    super.initState();\n\n    _createAnimationIntervals();\n\n    _staggeredController = AnimationController(\n      vsync: this,\n      duration: _animationDuration,\n    );\n  }\n\n  void _createAnimationIntervals() {\n    for (var i = 0; i < _menuTitles.length; ++i) {\n      final startTime = _initialDelayTime + (_staggerTime * i);\n      final endTime = startTime + _itemSlideTime;\n      _itemSlideIntervals.add(\n        Interval(\n          startTime.inMilliseconds / _animationDuration.inMilliseconds,\n          endTime.inMilliseconds / _animationDuration.inMilliseconds,\n        ),\n      );\n    }\n\n    final buttonStartTime =\n        Duration(milliseconds: (_menuTitles.length * 50)) + _buttonDelayTime;\n    final buttonEndTime = buttonStartTime + _buttonTime;\n    _buttonInterval = Interval(\n      buttonStartTime.inMilliseconds / _animationDuration.inMilliseconds,\n      buttonEndTime.inMilliseconds / _animationDuration.inMilliseconds,\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: TodoList Widget Definition\nDESCRIPTION: This code defines a StatefulWidget called TodoList, which represents a basic todo application. It includes a TextField for entering todo items, a FloatingActionButton for adding them to a list, and a ListView to display the todos with swipe-to-dismiss functionality.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/testing/widget/tap-drag.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nclass TodoList extends StatefulWidget {\n  const TodoList({super.key});\n\n  @override\n  State<TodoList> createState() => _TodoListState();\n}\n\nclass _TodoListState extends State<TodoList> {\n  static const _appTitle = 'Todo List';\n  final todos = <String>[];\n  final controller = TextEditingController();\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: _appTitle,\n      home: Scaffold(\n        appBar: AppBar(title: const Text(_appTitle)),\n        body: Column(\n          children: [\n            TextField(controller: controller),\n            Expanded(\n              child: ListView.builder(\n                itemCount: todos.length,\n                itemBuilder: (context, index) {\n                  final todo = todos[index];\n\n                  return Dismissible(\n                    key: Key('$todo$index'),\n                    onDismissed: (direction) => todos.removeAt(index),\n                    background: Container(color: Colors.red),\n                    child: ListTile(title: Text(todo)),\n                  );\n                },\n              ),\n            ),\n          ],\n        ),\n        floatingActionButton: FloatingActionButton(\n          onPressed: () {\n            setState(() {\n              todos.add(controller.text);\n              controller.clear();\n            });\n          },\n          child: const Icon(Icons.add),\n        ),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using TextInput component in React Native\nDESCRIPTION: This JavaScript snippet demonstrates how to use the `TextInput` component in React Native to create a text input field. It utilizes the `useState` hook to manage the text input value and the `onChangeText` prop to update the state whenever the input changes. A button is included to submit the form.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/react-native-devs.md#_snippet_51\n\nLANGUAGE: JavaScript\nCODE:\n```\n// React Native\nconst [password, setPassword] = useState('')\n...\n<TextInput\n  placeholder=\"Enter your Password\"\n  onChangeText={password => setPassword(password)}\n/>\n<Button title=\"Submit\" onPress={this.validate} />\n```\n\n----------------------------------------\n\nTITLE: Dart Try-Catch Snippet\nDESCRIPTION: Inserts a try-catch block for handling exceptions. No dependencies are required. Input: None. Output: A basic try-catch block structure.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/tools/vs-code.md#_snippet_2\n\nLANGUAGE: Dart\nCODE:\n```\ntry {  } catch (e) {  }\n```\n\n----------------------------------------\n\nTITLE: Using cached FlutterEngine in MyActivity (Java)\nDESCRIPTION: This Java snippet shows how to create a FlutterFragment using a pre-warmed FlutterEngine that is retrieved from the FlutterEngineCache using the ID \"my_engine_id\".  The `withCachedEngine` method is used to specify the engine ID, and `build()` creates the fragment.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/add-to-app/android/add-flutter-fragment.md#_snippet_7\n\nLANGUAGE: Java\nCODE:\n```\nFlutterFragment.withCachedEngine(\"my_engine_id\").build();\n```\n\n----------------------------------------\n\nTITLE: ConstrainedBox within Center Widget in Flutter\nDESCRIPTION: This example shows a ConstrainedBox nested within a Center widget. The Center allows the ConstrainedBox to be any size up to the screen size. The ConstrainedBox then applies its additional constraints to the child Container, resulting in the Container's size being adjusted to meet the minimum constraints.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/layout/constraints.md#_snippet_40\n\nLANGUAGE: dart\nCODE:\n```\nCenter(\n  child: ConstrainedBox(\n    constraints: const BoxConstraints(\n      minWidth: 70,\n      minHeight: 70,\n      maxWidth: 150,\n      maxHeight: 150,\n    ),\n    child: Container(color: red, width: 10, height: 10),\n  ),\n)\n```\n\n----------------------------------------\n\nTITLE: Firebase Hosting Cache Headers Configuration\nDESCRIPTION: This JSON snippet configures cache headers for Firebase Hosting. It sets different caching strategies for static assets (images, fonts, CSS) and application scripts (JS, WASM, JSON). Static assets are cached longer on both the browser and CDN, while application scripts are cached only on the CDN to ensure users always get the latest version.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/platform-integration/web/faq.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"hosting\": {\n    \"headers\": [\n      {\n        \"source\":\n          \"**/*.@(jpg|jpeg|gif|png|svg|webp|css|eot|otf|ttf|ttc|woff|woff2|font.css)\",\n        \"headers\": [\n          {\n            \"key\": \"Cache-Control\",\n            \"value\": \"max-age=3600,s-maxage=604800\"\n          }\n        ]\n      },\n      {\n        \"source\":\n          \"**/*.@(mjs|js|wasm|json)\",\n        \"headers\": [\n          {\n            \"key\": \"Cache-Control\",\n            \"value\": \"max-age=0,s-maxage=604800\"\n          }\n        ]\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Chip: Before Migration - useDeleteButtonTooltip\nDESCRIPTION: This code snippet demonstrates the use of the deprecated useDeleteButtonTooltip property in Chip and RawChip widgets to control the delete button tooltip. The property is set to false to disable the tooltip and true to enable it.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/chip-usedeletebuttontooltip-migration.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nChip(\n  label: const Text('Disabled delete button tooltip'),\n  onDeleted: _handleDeleteChip,\n  useDeleteButtonTooltip: false,\n);\n\nRawChip(\n  label: const Text('Enabled delete button tooltip'),\n  onDeleted: _handleDeleteChip,\n  useDeleteButtonTooltip: true,\n);\n```\n\n----------------------------------------\n\nTITLE: Complete FadeInImage Asset Example in Flutter\nDESCRIPTION: This example demonstrates a complete Flutter app using FadeInImage to display an image from the network with an asset placeholder (loading.gif). It includes the necessary imports, a basic MaterialApp setup, and a Scaffold with the FadeInImage centered.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/images/fading-in-images.md#_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\n\nvoid main() {\n  runApp(const MyApp());\n}\n\nclass MyApp extends StatelessWidget {\n  const MyApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    const title = 'Fade in images';\n\n    return MaterialApp(\n      title: title,\n      home: Scaffold(\n        appBar: AppBar(title: const Text(title)),\n        body: Center(\n          child: FadeInImage.assetNetwork(\n            placeholder: 'assets/loading.gif',\n            image: 'https://picsum.photos/250?image=9',\n          ),\n        ),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling List Layout Changes on Orientation - Flutter\nDESCRIPTION: If a List widget changes its layout when the device's orientation changes, you might need to adjust the scroll position manually. This typically involves performing calculations to determine the new scroll position based on the updated layout. This ensures that the user's view remains consistent after the layout change.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/adaptive-responsive/best-practices.md#_snippet_1\n\nLANGUAGE: flutter\nCODE:\n```\nIf the `List` widget changes its layout\nwhen the device's orientation changes,\nyou might have to do a bit of math ([example][])\nto change the scroll position on screen rotation.\n```\n\n----------------------------------------\n\nTITLE: Migrating Button with custom overlay colors in Dart\nDESCRIPTION: This code snippet demonstrates how to migrate from specifying individual overlay colors (focusColor, hoverColor, splashColor) in `FlatButton` to using `MaterialStateProperty.resolveWith` in `TextButton` to define state-dependent overlay colors.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/buttons.md#_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\nFlatButton(\n  focusColor: Colors.red,\n  hoverColor: Colors.green,\n  splashColor: Colors.blue,\n  onPressed: () { },\n  child: Text('FlatButton with custom overlay colors'),\n)\n\nTextButton(\n  style: ButtonStyle(\n    overlayColor: MaterialStateProperty.resolveWith<Color?>(\n      (Set<MaterialState> states) {\n        if (states.contains(MaterialState.focused))\n          return Colors.red;\n        if (states.contains(MaterialState.hovered))\n            return Colors.green;\n        if (states.contains(MaterialState.pressed))\n            return Colors.blue;\n        return null; // Defer to the widget's default.\n    }),\n  ),\n  onPressed: () { },\n  child: Text('TextButton with custom overlay colors'),\n)\n```\n\n----------------------------------------\n\nTITLE: Accessing Initial Data in Dart\nDESCRIPTION: This Dart code shows how to access the initial data passed from JavaScript in the Dart side. The data is available through the `ui_web.views.getInitialData(viewId)` method.  You should cast the result to your defined JS interop type.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/platform-integration/web/embedding-flutter-web.md#_snippet_9\n\nLANGUAGE: Dart\nCODE:\n```\nfinal initialData = ui_web.views.getInitialData(viewId) as YourJsInteropType;\n```\n\n----------------------------------------\n\nTITLE: Registering App Name using Snapcraft CLI\nDESCRIPTION: These commands are used to log in to snapcraft and register the application name in the Snap Store using the command-line interface. This is a prerequisite for publishing a snap.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/deployment/linux.md#_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\n$ snapcraft login\n$ snapcraft register\n```\n\n----------------------------------------\n\nTITLE: Updating ColorScheme.fromSeed with fidelity variant in Dart\nDESCRIPTION: This code snippet shows how to update the `ColorScheme.fromSeed` method to maintain color brightness by setting `dynamicSchemeVariant` to `DynamicSchemeVariant.fidelity`. This is useful when the seed color is bright, and a bright output is desired.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/new-color-scheme-roles.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nColorScheme.fromSeed(\n    seedColor: Color(0xFF0000FF), // Bright blue\n    dynamicSchemeVariant: DynamicSchemeVariant.fidelity,\n)\n\n```\n\n----------------------------------------\n\nTITLE: Temporary Interface Definition (Dart)\nDESCRIPTION: This code snippet demonstrates a temporary interface definition that can be used to add the new `currentTextEditingValue` member to a class before the change lands in the Flutter framework. This allows you to prepare your code for the new member with an `@override` annotation.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/text-input-client-current-value.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nabstract class _TemporaryTextEditingClient {\n  TextEditingValue get currentTextEditingValue;\n}\n```\n\n----------------------------------------\n\nTITLE: Migrate GestureDetectors from kind to supportedDevices - After Migration\nDESCRIPTION: This snippet demonstrates the replacement of the deprecated `kind` parameter with `supportedDevices` in a VerticalDragGestureRecognizer.  It now accepts a Set of PointerDeviceKind, allowing for multiple device types to be supported. Requires importing relevant Flutter libraries for gestures.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/default-scroll-behavior-drag.md#_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nVerticalDragGestureRecognizer(\n  supportedDevices: <PointerDeviceKind>{ PointerDeviceKind.touch },\n);\n```\n\n----------------------------------------\n\nTITLE: Finding a Text Widget - Flutter\nDESCRIPTION: This snippet demonstrates how to locate a `Text` widget in a Flutter test environment using `find.text()`.  It builds a simple app with a `Text` widget displaying 'H' and then uses `find.text('H')` to locate the widget and verify its existence using `findsOneWidget`.  This assumes the `flutter_test` package is imported.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/testing/widget/finders.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\ntestWidgets('finds a Text widget', (tester) async {\n  // Build an App with a Text widget that displays the letter 'H'.\n  await tester.pumpWidget(const MaterialApp(home: Scaffold(body: Text('H'))));\n\n  // Find a widget that displays the letter 'H'.\n  expect(find.text('H'), findsOneWidget);\n});\n```\n\n----------------------------------------\n\nTITLE: Show FlutterViewController in SwiftUI\nDESCRIPTION: This Swift code defines a `FlutterViewControllerRepresentable` for SwiftUI. It creates a `FlutterViewController` instance using a pre-warmed `FlutterEngine` obtained from the environment.  A `NavigationLink` is used to present the Flutter screen.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/add-to-app/ios/add-flutter-screen.md#_snippet_3\n\nLANGUAGE: Swift\nCODE:\n```\nimport SwiftUI\nimport Flutter\n\nstruct FlutterViewControllerRepresentable: UIViewControllerRepresentable {\n  // Flutter dependencies are passed in through the view environment.\n  @Environment(FlutterDependencies.self) var flutterDependencies\n  \n  func makeUIViewController(context: Context) -> some UIViewController {\n    return FlutterViewController(\n      engine: flutterDependencies.flutterEngine,\n      nibName: nil,\n      bundle: nil)\n  }\n  \n  func updateUIViewController(_ uiViewController: UIViewControllerType, context: Context) {}\n}\n\nstruct ContentView: View {\n  var body: some View {\n    NavigationStack {\n      NavigationLink(\"My Flutter Feature\") {\n        FlutterViewControllerRepresentable()\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Font in Flutter (pubspec.yaml)\nDESCRIPTION: This snippet shows how to add a custom font to a Flutter project by configuring the `pubspec.yaml` file.  It specifies the font family name and the path to the font asset file. The asset file must be located within the project's `fonts` directory.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/swiftui-devs.md#_snippet_32\n\nLANGUAGE: YAML\nCODE:\n```\nflutter:\n  fonts:\n    - family: BungeeSpice\n      fonts:\n        - asset: fonts/BungeeSpice-Regular.ttf\n```\n\n----------------------------------------\n\nTITLE: Initializing a command and executing it\nDESCRIPTION: This snippet shows how to initialize a `Command` object in the view model's constructor and immediately execute it.  This is often used for actions that need to be performed when the view model is created, such as loading initial data. Requires Flutter SDK.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/app-architecture/design-patterns/command.md#_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\nHomeViewModel() {\n  load = Command(_load)..execute();\n}\n```\n\n----------------------------------------\n\nTITLE: Switching Flutter Channel\nDESCRIPTION: These commands switch the Flutter channel to beta and then upgrade to the latest version available in that channel. Ensure you upgrade after switching to get the corresponding SDK version.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/upgrade.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ flutter channel beta\n$ flutter upgrade\n```\n\n----------------------------------------\n\nTITLE: Incorrect addAllowedPointer Override (Before Migration) - Dart\nDESCRIPTION: This code snippet demonstrates the incorrect way to override the `addAllowedPointer` method before the migration.  It uses `PointerEvent` as the parameter type, which will result in a type error after the update.  The error occurs because the superclass now expects a `PointerDownEvent` object.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/gesture-recognizer-add-allowed-pointer.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nclass CustomGestureRecognizer extends ScaleGestureRecognizer {\n  @override\n  void addAllowedPointer(PointerEvent event) {\n    // insert custom handling of event here...\n    super.addAllowedPointer(event);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Column Layout in Flutter\nDESCRIPTION: This snippet demonstrates how to create a vertical linear layout in Flutter using the Column widget. The mainAxisAlignment property centers the children widgets vertically.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/android-devs.md#_snippet_31\n\nLANGUAGE: dart\nCODE:\n```\n@override\nWidget build(BuildContext context) {\n  return const Column(\n    mainAxisAlignment: MainAxisAlignment.center,\n    children: <Widget>[\n      Text('Column One'),\n      Text('Column Two'),\n      Text('Column Three'),\n      Text('Column Four'),\n    ],\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Image Loading in Flutter\nDESCRIPTION: This code snippet shows how to use the `Picture.toImage()` method, which now returns a `Future<Image>`.  It highlights the need to declare methods invoking `Picture` instances as `async` and use `await` to handle the asynchronous image rasterization. This change allows image rasterization to occur on the GPU thread, improving performance.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/release-notes/release-notes-1.2.1.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nvoid usePictureImage(Picture p) async { \n  var image = await p.toImage(); \n  // Do something with the pixels in image…. \n}\n```\n\n----------------------------------------\n\nTITLE: Migrating custom button elevations - Flutter\nDESCRIPTION: Demonstrates how to migrate custom button elevations from RaisedButton to ElevatedButton, including handling disabled, hovered, focused, and pressed states. It shows how to define baseline elevations and override specific elevation values.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/buttons.md#_snippet_15\n\nLANGUAGE: dart\nCODE:\n```\nRaisedButton(\n  elevation: 2,\n  focusElevation: 4,\n  hoverElevation: 4,\n  highlightElevation: 8,\n  disabledElevation: 0,\n  onPressed: () { },\n  child: Text('RaisedButton with custom elevations'),\n)\n\nElevatedButton(\n  style: ElevatedButton.styleFrom(elevation: 2),\n  onPressed: () { },\n  child: Text('ElevatedButton with custom elevations'),\n)\n```\n\n----------------------------------------\n\nTITLE: FlutterAppDelegate Subclass in SwiftUI\nDESCRIPTION: Demonstrates creating a subclass of FlutterAppDelegate in a SwiftUI application and using it to initialize and run a FlutterEngine. It includes the necessary imports and annotations, along with overriding the `application(_:didFinishLaunchingWithOptions:)` method to run the Flutter engine and register plugins.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/add-to-app/ios/add-flutter-screen.md#_snippet_9\n\nLANGUAGE: Swift\nCODE:\n```\nimport SwiftUI\nimport Flutter\nimport FlutterPluginRegistrant\n\n@Observable\nclass AppDelegate: FlutterAppDelegate {\n  let flutterEngine = FlutterEngine(name: \"my flutter engine\")\n\n  override func application(\n    _ application: UIApplication,\n    didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {\n      // Runs the default Dart entrypoint with a default Flutter route.\n      flutterEngine.run();\n      // Used to connect plugins (only if you have plugins with iOS platform code).\n      GeneratedPluginRegistrant.register(with: self.flutterEngine);\n      return true;\n    }\n}\n\n@main\nstruct MyApp: App {\n  // Use this property wrapper to tell SwiftUI\n  // it should use the AppDelegate class for the application delegate\n  @UIApplicationDelegateAdaptor(AppDelegate.self) var appDelegate\n\n  var body: some Scene {\n      WindowGroup {\n        ContentView()\n      }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Flutter App with Nested Navigation\nDESCRIPTION: This code initializes a Flutter MaterialApp with nested navigation using onGenerateRoute. It defines constants for route names and uses them to navigate between different screens, including a device setup flow implemented as a StatefulWidget.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/effects/nested-nav.md#_snippet_6\n\nLANGUAGE: Dart\nCODE:\n```\nimport 'package:flutter/material.dart';\n\nconst routeHome = '/';\nconst routeSettings = '/settings';\nconst routePrefixDeviceSetup = '/setup/';\nconst routeDeviceSetupStart = '/setup/$routeDeviceSetupStartPage';\nconst routeDeviceSetupStartPage = 'find_devices';\nconst routeDeviceSetupSelectDevicePage = 'select_device';\nconst routeDeviceSetupConnectingPage = 'connecting';\nconst routeDeviceSetupFinishedPage = 'finished';\n\nvoid main() {\n  runApp(\n    MaterialApp(\n      theme: ThemeData(\n        brightness: Brightness.dark,\n        appBarTheme: const AppBarTheme(backgroundColor: Colors.blue),\n        floatingActionButtonTheme: const FloatingActionButtonThemeData(\n          backgroundColor: Colors.blue,\n        ),\n      ),\n      onGenerateRoute: (settings) {\n        final Widget page;\n        if (settings.name == routeHome) {\n          page = const HomeScreen();\n        } else if (settings.name == routeSettings) {\n          page = const SettingsScreen();\n        } else if (settings.name!.startsWith(routePrefixDeviceSetup)) {\n          final subRoute = settings.name!.substring(\n            routePrefixDeviceSetup.length,\n          );\n          page = SetupFlow(setupPageRoute: subRoute);\n        } else {\n          throw Exception('Unknown route: ${settings.name}');\n        }\n\n        return MaterialPageRoute<dynamic>(\n          builder: (context) {\n            return page;\n          },\n          settings: settings,\n        );\n      },\n      debugShowCheckedModeBanner: false,\n    ),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Brightness in CupertinoThemeData Subclass - Dart\nDESCRIPTION: Demonstrates how to override the `brightness` property in a subclass of `CupertinoThemeData` to enforce a specific brightness, such as always dark mode.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/nullable-cupertinothemedata-brightness.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nclass AlwaysDarkCupertinoThemeData extends CupertinoThemeData {\n  Brightness brightness => Brightness.dark;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Flutter Android Plugin in Java\nDESCRIPTION: This code snippet shows the basic implementation of a Flutter Android plugin using the `FlutterPlugin` interface. It defines the `onAttachedToEngine()` and `onDetachedFromEngine()` methods for initializing and cleaning up plugin resources when the plugin is attached to and detached from a Flutter engine, respectively. The plugin can be associated with a Flutter experience at any given moment in time.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/plugin-api-migration.md#_snippet_10\n\nLANGUAGE: Java\nCODE:\n```\npublic class MyPlugin implements FlutterPlugin {\n  @Override\n  public void onAttachedToEngine(@NonNull FlutterPluginBinding binding) {\n    // TODO: your plugin is now attached to a Flutter experience.\n  }\n\n  @Override\n  public void onDetachedFromEngine(@NonNull FlutterPluginBinding binding) {\n    // TODO: your plugin is no longer attached to a Flutter experience.\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Dart Switch Statement Snippet\nDESCRIPTION: Inserts a switch statement. No dependencies are required. Input: None. Output: A basic switch statement structure.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/tools/vs-code.md#_snippet_5\n\nLANGUAGE: Dart\nCODE:\n```\nswitch (variable) { case value1:  break; case value2:  break; default:  }\n```\n\n----------------------------------------\n\nTITLE: Expanding a Scaffold's Child with SizedBox.expand Flutter\nDESCRIPTION: This code snippet builds a Scaffold widget, and its body is a SizedBox.expand, which contains a Container, which then contains a Column widget. The Column widget has two Text children.  SizedBox.expand forces its child to be exactly the same size as itself (and thus, the Scaffold). This demonstrates how a parent widget can supply tight constraints to its children, forcing them to occupy a specific size.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/layout/constraints.md#_snippet_30\n\nLANGUAGE: dart\nCODE:\n```\nScaffold(\n   body: Container(color: blue,\n   child: SizedBox.expand(\n      child: Column(\n         children: [\n            Text('Hello!'),\n            Text('Goodbye!')]))))\n```\n\n----------------------------------------\n\nTITLE: Conditional Purchase Link Logic in Flutter (Dart)\nDESCRIPTION: This code snippet demonstrates how to conditionally display a purchase link based on the platform.  It uses Platform.isIOS to check if the app is running on iOS and disables the purchase link if it is, due to App Store guidelines.  The method shouldAllowPurchaseClick encapsulates the policy decision, making the code more readable and testable.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/adaptive-responsive/capabilities.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nbool shouldAllowPurchaseClick() {\n  // Banned by Apple App Store guidelines. \n  return !Platform.isIOS;\n}\n\n...\nTextSpan(\n  text: 'Buy in browser',\n  style: new TextStyle(color: Colors.blue),\n  recognizer: shouldAllowPurchaseClick ? TapGestureRecognizer()\n    ..onTap = () { launch('<some url>') : null;\n  } : null,\n```\n\n----------------------------------------\n\nTITLE: RichText Widget Example in Flutter\nDESCRIPTION: This code snippet demonstrates the use of the RichText widget in Flutter to display styled text.  It creates a TextSpan with different text styles applied to different parts of the string.  In this case, the word \"bold\" is rendered in bold font.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/fundamentals/user-input.md#_snippet_2\n\nLANGUAGE: Dart\nCODE:\n```\n@override\nWidget build(BuildContext context) {\n  return RichText(\n    text: TextSpan(\n      text: 'Hello ',\n      style: DefaultTextStyle.of(context).style,\n      children: const <TextSpan>[\n        TextSpan(text: 'bold', style: TextStyle(fontWeight: FontWeight.bold)),\n        TextSpan(text: ' world!'),\n      ],\n    ),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Building Android Test APK with Gradle\nDESCRIPTION: This Gradle command builds an Android test APK for integration tests.  The `assembleAndroidTest` task compiles the test code.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/testing/integration-tests/index.md#_snippet_17\n\nLANGUAGE: console\nCODE:\n```\n$ ./gradlew app:assembleAndroidTest\n```\n\n----------------------------------------\n\nTITLE: Displaying Leaderboards UI using GamesServices.showLeaderboards() in Dart\nDESCRIPTION: This Dart code snippet displays the platform's native leaderboards UI as an overlay on the game, using `GamesServices.showLeaderboards()`. It takes optional iOS and Android leaderboard IDs to directly display a specific leaderboard. If no IDs are given, the platform will usually show a list of all leaderboards.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/games/achievements-leaderboard.md#_snippet_6\n\nLANGUAGE: Dart\nCODE:\n```\nawait GamesServices.showLeaderboards(\n  iOSLeaderboardID: 'some_id_from_app_store',\n  androidLeaderboardID: 'sOmE_iD_fRoM_gPlAy',\n);\n```\n\n----------------------------------------\n\nTITLE: Set Background Color Flutter/Dart (Decoration)\nDESCRIPTION: Illustrates setting the background color of a Container widget using the `decoration` property with a `BoxDecoration` in Flutter/Dart. Depends on the Flutter framework and the 'bold24Roboto' TextStyle. Displays a Container widget with a grey background and styled text, using BoxDecoration.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/web-devs.md#_snippet_4\n\nLANGUAGE: Dart\nCODE:\n```\nfinal container = Container(\n  // grey box\n  width: 320,\n  height: 240,\n  decoration: BoxDecoration(\n    color: Colors.grey[300],\n  ),\n  child: Text(\n    'Lorem ipsum',\n    style: bold24Roboto,\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Flutter module directory structure (plaintext)\nDESCRIPTION: This shows the directory structure of a Flutter module. The `lib/` directory contains the Dart code, the `pubspec.yaml` file manages dependencies, and the `.ios/` directory holds an Xcode workspace for running the module standalone.  The .ios/ directory is auto-generated and should be excluded from source control.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/add-to-app/ios/project-setup.md#_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nmy_flutter/\n├── .ios/\n│   ├── Runner.xcworkspace\n│   └── Flutter/podhelper.rb\n├── lib/\n│   └── main.dart\n├── test/\n└── pubspec.yaml\n```\n\n----------------------------------------\n\nTITLE: Flutter Implicit Animation with AnimatedOpacity in Dart\nDESCRIPTION: This Dart snippet demonstrates a Flutter application using `AnimatedOpacity` for implicit animation. It displays an image and, upon pressing a button, fades in details about the image. The `opacity` variable is updated via `setState` to trigger the animation handled by `AnimatedOpacity` with a duration of 2 seconds. This example shows a basic implementation of fading in content in Flutter using implicit animations.\nSOURCE: https://github.com/flutter/website/blob/main/src/_includes/docs/implicit-animations/fade-in-complete.md#_snippet_0\n\nLANGUAGE: Dart\nCODE:\n```\n// Copyright 2019 the Dart project authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license\n// that can be found in the LICENSE file.\n\nimport 'package:flutter/material.dart';\n\nconst owlUrl =\n    'https://raw.githubusercontent.com/flutter/website/main/src/content/assets/images/docs/owl.jpg';\n\nclass FadeInDemo extends StatefulWidget {\n  const FadeInDemo({super.key});\n\n  @override\n  State<FadeInDemo> createState() => _FadeInDemoState();\n}\n\nclass _FadeInDemoState extends State<FadeInDemo> {\n  double opacity = 0;\n\n  @override\n  Widget build(BuildContext context) {\n    return ListView(children: <Widget>[\n      Image.network(owlUrl),\n      TextButton(\n        child: const Text(\n          'Show Details',\n          style: TextStyle(color: Colors.blueAccent),\n        ),\n        onPressed: () => setState(() {\n          opacity = 1;\n        }),\n      ),\n      AnimatedOpacity(\n        duration: const Duration(seconds: 2),\n        opacity: opacity,\n        child: const Column(\n          children: [\n            Text('Type: Owl'),\n            Text('Age: 39'),\n            Text('Employment: None'),\n          ],\n        ),\n      )\n    ]);\n  }\n}\n\nclass MyApp extends StatelessWidget {\n  const MyApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return const MaterialApp(\n      home: Scaffold(\n        body: Center(\n          child: FadeInDemo(),\n        ),\n      ),\n    );\n  }\n}\n\nvoid main() {\n  runApp(\n    const MyApp(),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning Flutter SDK from GitHub Main Channel (Console)\nDESCRIPTION: This code snippet demonstrates how to clone the Flutter SDK directly from the `main` channel of the Flutter GitHub repository. It then executes the `flutter --version` command to trigger a download of the necessary SDK dependencies and verify the installation.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/archive.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ git clone -b main https://github.com/flutter/flutter.git\n$ ./flutter/bin/flutter --version\n```\n\n----------------------------------------\n\nTITLE: Running Flutter Tests\nDESCRIPTION: This command executes the Flutter tests defined in the project. It verifies the functionality of the application and ensures that it behaves as expected.\nSOURCE: https://github.com/flutter/website/blob/main/examples/animation/animate1/README.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nflutter test\n```\n\n----------------------------------------\n\nTITLE: Start Dart app in paused state\nDESCRIPTION: This command starts a Dart application in a paused state with isolate observation enabled. Similar to the Flutter command, this ensures that DevTools can capture all network traffic, including that occurring during application startup.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/tools/devtools/network.md#_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\ndart run --pause-isolates-on-start --observe ...\n```\n\n----------------------------------------\n\nTITLE: BubbleBackground Usage Example Dart\nDESCRIPTION: This snippet demonstrates how to use the `BubbleBackground` widget to display a message with a gradient background. It sets the gradient colors based on whether the message is from the user or another sender, and it wraps the message text in a `DefaultTextStyle` and padding.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/effects/gradient-bubbles.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nBubbleBackground(\n  // The colors of the gradient, which are different\n  // depending on which user sent this message.\n  colors:\n      message.isMine\n          ? const [Color(0xFF6C7689), Color(0xFF3A364B)]\n          : const [Color(0xFF19B7FF), Color(0xFF491CCB)],\n  // The content within the bubble.\n  child: DefaultTextStyle.merge(\n    style: const TextStyle(fontSize: 18.0, color: Colors.white),\n    child: Padding(\n      padding: const EdgeInsets.all(12),\n      child: Text(message.text),\n    ),\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Adding Privacy Manifest Resource in Package.swift\nDESCRIPTION: This snippet shows how to include a `PrivacyInfo.xcprivacy` file as a resource in the `Package.swift` file.  This is necessary if the plugin uses any APIs that require a privacy manifest.\nSOURCE: https://github.com/flutter/website/blob/main/src/_includes/docs/swift-package-manager/migrate-objective-c-plugin.md#_snippet_3\n\nLANGUAGE: Swift\nCODE:\n```\nresources: [\n    // TODO: If your plugin requires a privacy manifest\n    // (e.g. if it uses any required reason APIs), update the PrivacyInfo.xcprivacy file\n    // to describe your plugin's privacy impact, and then uncomment this line.\n    // For more information, see:\n    // https://developer.apple.com/documentation/bundleresources/privacy_manifest_files\n    [!.process(\"PrivacyInfo.xcprivacy\"),!]\n\n    // TODO: If you have other resources that need to be bundled with your plugin, refer to\n    // the following instructions to add them:\n    // https://developer.apple.com/documentation/xcode/bundling-resources-with-a-swift-package\n],\n```\n\n----------------------------------------\n\nTITLE: Configuring Renderer at Runtime (HTML)\nDESCRIPTION: This HTML snippet demonstrates how to configure the Flutter web renderer at runtime using a configuration object. The `renderer` property within the `config` object is set to either `canvaskit` or `skwasm` based on a boolean variable. The loader uses this to load the appropriate renderer.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/platform-integration/web/renderers.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<body>\n  <script>\n    {% raw %}{{flutter_js}}{% endraw %}\n    {% raw %}{{flutter_build_config}}{% endraw %}\n\n    // TODO: Replace this with your own code to determine which renderer to use.\n    const useCanvasKit = true;\n\n    const config = {\n      renderer: useCanvasKit ? \"canvaskit\" : \"skwasm\",\n    };\n    _flutter.loader.load({\n      config: config,\n    });\n  </script>\n</body>\n```\n\n----------------------------------------\n\nTITLE: Flutter SDK Dependency - YAML\nDESCRIPTION: This snippet demonstrates how to declare a dependency on the Flutter SDK itself within the `pubspec.yaml` file. This is useful when the project relies directly on the Flutter SDK rather than a regular package.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/tools/pubspec.md#_snippet_25\n\nLANGUAGE: YAML\nCODE:\n```\ndependencies:\n  flutter:\n    sdk: flutter\n```\n\n----------------------------------------\n\nTITLE: Remove registerWith Method in Flutter Plugin\nDESCRIPTION: This Java code snippet shows the `registerWith` method that should be removed from a `FlutterPlugin` interface implementation when migrating away from the Android v1 embedding. This method is no longer needed with the v2 embedding.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/v1-android-embedding.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic static void registerWith(@NonNull io.flutter.plugin.common.PluginRegistry.Registrar registrar);\n```\n\n----------------------------------------\n\nTITLE: Migrating InputDecoration.hasFloatingPlaceholder - Dart\nDESCRIPTION: This code snippet shows how to migrate from the deprecated `hasFloatingPlaceholder` property of `InputDecoration` and `InputDecorationTheme` to the new `floatingLabelBehavior` property. It includes examples of both the base constructor and field access, demonstrating the change from a boolean value to the `FloatingLabelBehavior` enum.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/2-2-deprecations.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n// InputDecoration\n// Base constructor\nInputDecoration(hasFloatingPlaceholder: true);\nInputDecoration(hasFloatingPlaceholder: false);\n\n// collapsed constructor\nInputDecoration.collapsed(hasFloatingPlaceholder: true);\nInputDecoration.collapsed(hasFloatingPlaceholder: false);\n\n// Field access\ninputDecoration.hasFloatingPlaceholder;\n\n// InputDecorationTheme\n// Base constructor\nInputDecorationTheme(hasFloatingPlaceholder: true);\nInputDecorationTheme(hasFloatingPlaceholder: false);\n\n// Field access\ninputDecorationTheme.hasFloatingPlaceholder;\n\n// copyWith\ninputDecorationTheme.copyWith(hasFloatingPlaceholder: false);\ninputDecorationTheme.copyWith(hasFloatingPlaceholder: true);\n```\n\nLANGUAGE: dart\nCODE:\n```\n// InputDecoration\n// Base constructor\nInputDecoration(floatingLabelBehavior: FloatingLabelBehavior.auto);\nInputDecoration(floatingLabelBehavior: FloatingLabelBehavior.never);\n\n// collapsed constructor\nInputDecoration.collapsed(floatingLabelBehavior: FloatingLabelBehavior.auto);\nInputDecoration.collapsed(floatingLabelBehavior: FloatingLabelBehavior.never);\n\n// Field access\ninputDecoration.floatingLabelBehavior;\n\n// InputDecorationTheme\n// Base constructor\nInputDecorationTheme(floatingLabelBehavior: FloatingLabelBehavior.auto);\nInputDecorationTheme(floatingLabelBehavior: FloatingLabelBehavior.never);\n\n// Field access\ninputDecorationTheme.floatingLabelBehavior;\n\n// copyWith\ninputDecorationTheme.copyWith(floatingLabelBehavior: FloatingLabelBehavior.never);\ninputDecorationTheme.copyWith(floatingLabelBehavior: FloatingLabelBehavior.auto);\n```\n\n----------------------------------------\n\nTITLE: Disabling Text Scaling: After (Dart)\nDESCRIPTION: This code snippet demonstrates the recommended approach to disable text scaling in Flutter using MediaQuery.withNoTextScaling. This simplifies the process and ensures consistent behavior.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/deprecate-textscalefactor.md#_snippet_6\n\nLANGUAGE: Dart\nCODE:\n```\nMediaQuery.withNoTextScaling(\n  child: IconTheme(\n    data: ...\n    child: icon,\n  ),\n)\n```\n\n----------------------------------------\n\nTITLE: CircleListItem Widget Definition in Dart\nDESCRIPTION: This code defines a `CircleListItem` widget that displays a circular image. It includes a `Container` with a specified width and height, styled with a black background and a circular shape. The `Image.network` widget loads an image from a URL and displays it within the clipped oval.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/effects/shimmer-loading.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nclass CircleListItem extends StatelessWidget {\n  const CircleListItem({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return Padding(\n      padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 8),\n      child: Container(\n        width: 54,\n        height: 54,\n        decoration: const BoxDecoration(\n          color: Colors.black,\n          shape: BoxShape.circle,\n        ),\n        child: ClipOval(\n          child: Image.network(\n            'https://docs.flutter.dev/cookbook'\n            '/img-files/effects/split-check/Avatar1.jpg',\n            fit: BoxFit.cover,\n          ),\n        ),\n      ),\n    );\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Objective-C Declaration of splashScreenView\nDESCRIPTION: The original, incorrect declaration of the `splashScreenView` property in Objective-C, which incorrectly marked it as `nonnull`.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/ios-flutterviewcontroller-splashscreenview-nullable.md#_snippet_0\n\nLANGUAGE: objective-c\nCODE:\n```\n@property(strong, nonatomic) UIView* splashScreenView;\n```\n\n----------------------------------------\n\nTITLE: YAML Ranged Dependency Constraint\nDESCRIPTION: Example of specifying a minimum and maximum version for a package dependency using ranged constraints in the `pubspec.yaml` file.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/packages-and-plugins/using-packages.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  url_launcher: '>=5.4.0 <6.0.0'\n```\n\n----------------------------------------\n\nTITLE: ListView with Alternating Background Colors in Dart\nDESCRIPTION: This code extends the previous example by adding alternating background colors to the ListView items. It uses the index passed to the itemBuilder to determine the background color of each Container. Even-indexed items have a light blue background, while odd-indexed items have a transparent background. This example also requires a list of ToDo items and uses a Container for the background color styling.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/fundamentals/layout.md#_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\nfinal List<ToDo> items = Repository.fetchTodos();\n\nWidget build(BuildContext context) {\n  return ListView.builder(\n    itemCount: items.length,\n    itemBuilder: (context, idx) {\n      var item = items[idx];\n      return Container(\n        [!color: idx % 2 == 0 ? Colors.lightBlue : Colors.transparent!],\n        padding: const EdgeInsets.all(8.0),\n        child: Row(\n          mainAxisAlignment: MainAxisAlignment.spaceBetween,\n          children: [\n            Text(item.description),\n            Text(item.isComplete),\n          ],\n        ),\n      );\n    },\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Pop Invocation with PopScope - Dart\nDESCRIPTION: This snippet demonstrates how to use `onPopInvoked` method to handle pop attempts. `onPopInvoked` is called after the pop is handled, providing notification of the event. It replaces logic previously within `onWillPop`.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/android-predictive-back.md#_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nPopScope(\n  canPop: true,\n  onPopInvoked: (bool didPop) {\n    _myHandleOnPopMethod();\n  },\n  child: ...\n),\n```\n\n----------------------------------------\n\nTITLE: Migrate from setEnabledSystemUIOverlays - Dart\nDESCRIPTION: This code snippet demonstrates how to migrate from the deprecated `SystemChrome.setEnabledSystemUIOverlays` to `SystemChrome.setEnabledSystemUIMode` in Flutter. It involves using `SystemUiMode.manual` and passing the overlay list. The old API is deprecated as of v2.3.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/3-7-deprecations.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nSystemChrome.setEnabledSystemUIOverlays(<SystemUiOverlay>[\n  SystemUiOverlay.top,\n  SystemUiOverlay.bottom,\n]);\n```\n\n----------------------------------------\n\nTITLE: Build Parallax Background with Flow Widget (Dart)\nDESCRIPTION: This snippet demonstrates how to wrap an `Image` widget with a `Flow` widget to enable custom painting behavior. The `Flow` widget is used to control the transform of the image immediately before it is painted, allowing for the parallax effect.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/effects/parallax-scrolling.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nWidget _buildParallaxBackground(BuildContext context) {\n  return Flow(\n    children: [Image.network(imageUrl, fit: BoxFit.cover)],\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Add Flutter Post-Install Hook to Podfile (Ruby)\nDESCRIPTION: This code snippet demonstrates how to add a post-install hook to the Podfile. This hook calls `flutter_post_install` if it's defined, allowing Flutter to perform post-installation tasks.\nSOURCE: https://github.com/flutter/website/blob/main/src/_includes/docs/add-to-app/ios-project/embed-cocoapods.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\npost_install do |installer|\n  flutter_post_install(installer) if defined?(flutter_post_install)\nend\n```\n\n----------------------------------------\n\nTITLE: Aligning Widgets in a Row with spaceEvenly (Dart)\nDESCRIPTION: This snippet shows how to use `MainAxisAlignment.spaceEvenly` to distribute space evenly between widgets in a `Row`. This ensures that the widgets are spaced evenly with equal space before, between, and after them.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/fundamentals/layout.md#_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nWidget build(BuildContext context) {\n  return Row(\n    [!mainAxisAlignment: MainAxisAlignment.spaceEvenly!],\n    children: [\n      BorderedImage(),\n      BorderedImage(),\n      BorderedImage(),\n    ],\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Example Flutter pubspec.yaml\nDESCRIPTION: This code snippet shows an example of a Flutter project's pubspec.yaml file. It highlights the Flutter-only fields and packages required for a basic Flutter app, including dependencies, dev_dependencies, assets, and fonts. It demonstrates how to specify Flutter SDK, localization, icons, testing, and linting configurations.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/tools/pubspec.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: <project name>\ndescription: A new Flutter project.\n\npublish_to: none\nversion: 1.0.0+1\n\nenvironment:\n  sdk: ^3.7.0\n\ndependencies:\n  [!flutter:!]       # Required for every Flutter project\n    [!sdk: flutter!] # Required for every Flutter project\n  [!flutter_localizations:!] # Required to enable localization\n    [!sdk: flutter!]         # Required to enable localization\n\n  [!cupertino_icons: ^1.0.8!] # Only required if you use Cupertino (iOS style) icons\n\ndev_dependencies:\n  [!flutter_test:!]\n    [!sdk: flutter!] # Required for a Flutter project that includes tests\n\n  [!flutter_lints: ^5.0.0!] # Contains a set of recommended lints for Flutter code\n\n[!flutter:!]\n\n  [!uses-material-design: true!] # Required if you use the Material icon font\n\n  [!generate: true!] # Enables generation of localized strings from arb files\n\n  [!assets:!]  # Lists assets, such as image files\n    [!- images/a_dot_burr.png!]\n    [!- images/a_dot_ham.png!]\n\n  [!fonts:!]              # Required if your app uses custom fonts\n    [!- family: Schyler!]\n      [!fonts:!]\n        [!- asset: fonts/Schyler-Regular.ttf!]\n        [!- asset: fonts/Schyler-Italic.ttf!]\n          [!style: italic!]\n    [!- family: Trajan Pro!]\n      [!fonts:!]\n        [!- asset: fonts/TrajanPro.ttf!]\n        [!- asset: fonts/TrajanPro_Bold.ttf!]\n          [!weight: 700!]\n```\n\n----------------------------------------\n\nTITLE: Using GeminiProvider Directly in Flutter\nDESCRIPTION: This example shows how to use the `GeminiProvider` directly to send messages and process responses without using the `LlmChatView`.  It is part of a `StatefulWidget` where a `GeminiProvider` instance is created and used to call `sendMessageStream` with a constructed prompt. The response is then parsed as JSON and displayed in an `AlertDialog`. It requires the `GeminiProvider` and `jsonDecode` from `dart:convert`.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ai-toolkit/feature-integration.md#_snippet_16\n\nLANGUAGE: dart\nCODE:\n```\nclass _EditRecipePageState extends State<EditRecipePage> {\n  ...\n  final _provider = GeminiProvider(...);\n  ...\n  Future<void> _onMagic() async {\n    final stream = _provider.sendMessageStream(\n      'Generate a modified version of this recipe based on my food preferences: '\n      '${_ingredientsController.text}\\n\\n${_instructionsController.text}',\n    );\n    var response = await stream.join();\n    final json = jsonDecode(response);\n\n    try {\n      final modifications = json['modifications'];\n      final recipe = Recipe.fromJson(json['recipe']);\n\n      if (!context.mounted) return;\n      final accept = await showDialog<bool>(\n        context: context,\n        builder: (context) => AlertDialog(\n          title: Text(recipe.title),\n          content: Column(\n            crossAxisAlignment: CrossAxisAlignment.start,\n            children: [\n              const Text('Modifications:'),\n              const Gap(16),\n              Text(_wrapText(modifications)),\n            ],\n          ),\n          actions: [\n            TextButton(\n              onPressed: () => context.pop(true),\n              child: const Text('Accept'),\n            ),\n            TextButton(\n              onPressed: () => context.pop(false),\n              child: const Text('Reject'),\n            ),\n          ],\n        ),\n      );\n      ...\n    } catch (ex) {\n      ...\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Page - Flutter Stateful Widget\nDESCRIPTION: This Flutter code defines a stateful widget `MyHomePage` that represents a page with mutable state. It includes a title property and overrides the `createState` method to return an instance of `_MyHomePageState`, managing the widget's state.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/xamarin-forms-devs.md#_snippet_5\n\nLANGUAGE: Dart\nCODE:\n```\nclass MyHomePage extends StatefulWidget {\n  const MyHomePage({super.key, required this.title});\n\n  final String title;\n\n  @override\n  State<MyHomePage> createState() => _MyHomePageState();\n}\n```\n\n----------------------------------------\n\nTITLE: Define StatefulWidget Dart\nDESCRIPTION: Defines a StatefulWidget and its corresponding State class, which manages the visibility state of the animated widget.  The StatefulWidget holds the title and creates the mutable state. The State class holds a boolean indicating whether the widget should be visible and rebuilds the UI accordingly.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/animation/opacity-animation.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\n// The StatefulWidget's job is to take data and create a State class.\n// In this case, the widget takes a title, and creates a _MyHomePageState.\nclass MyHomePage extends StatefulWidget {\n  final String title;\n\n  const MyHomePage({super.key, required this.title});\n\n  @override\n  State<MyHomePage> createState() => _MyHomePageState();\n}\n\n// The State class is responsible for two things: holding some data you can\n// update and building the UI using that data.\nclass _MyHomePageState extends State<MyHomePage> {\n  // Whether the green box should be visible.\n  bool _visible = true;\n\n  @override\n  Widget build(BuildContext context) {\n    // The green box goes here with some other Widgets.\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding .build/ and .swiftpm/ to .gitignore\nDESCRIPTION: This code snippet adds the `.build/` and `.swiftpm/` directories to the `.gitignore` file to prevent them from being committed to version control.\nSOURCE: https://github.com/flutter/website/blob/main/src/_includes/docs/swift-package-manager/migrate-swift-plugin.md#_snippet_8\n\nLANGUAGE: Text\nCODE:\n```\n.build/\n.swiftpm/\n```\n\n----------------------------------------\n\nTITLE: Applying GMS and Crashlytics plugins in app/build.gradle (Groovy)\nDESCRIPTION: This code snippet demonstrates adding the Google Mobile Services (GMS) and Firebase Crashlytics plugins to the `plugins` block in the `<app-src>/android/app/build.gradle` file. These plugins are necessary for using GMS and Crashlytics features in your Flutter app.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/flutter-gradle-plugin-apply.md#_snippet_10\n\nLANGUAGE: Groovy\nCODE:\n```\nplugins {\n      id \"com.android.application\"\n      id \"dev.flutter.flutter-gradle-plugin\"\n      id \"org.jetbrains.kotlin.android\"\n+     id \"com.google.gms.google-services\"\n+     id \"com.google.firebase.crashlytics\"\n  }\n```\n\n----------------------------------------\n\nTITLE: Building Android App Bundle\nDESCRIPTION: This command builds an Android App Bundle (.aab) which is suitable for uploading to the Google Play Store. The Play Store uses the app bundle to generate optimized APKs for different device configurations.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/perf/app-size.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nflutter build appbundle\n```\n\n----------------------------------------\n\nTITLE: Using ListView for Scrollable Content (Dart)\nDESCRIPTION: This snippet presents using `ListView` to display a scrollable list of widgets in Flutter. While similar in name to Xamarin.Forms' `ListView`, the Flutter version directly accepts a list of widgets and optimizes rendering. This example shows a simple list of `Text` widgets within a `ListView`.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/xamarin-forms-devs.md#_snippet_41\n\nLANGUAGE: dart\nCODE:\n```\n@override\nWidget build(BuildContext context) {\n  return ListView(\n    children: const <Widget>[\n      Text('Row One'),\n      Text('Row Two'),\n      Text('Row Three'),\n      Text('Row Four'),\n    ],\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Checkbox Customization After Migration (Dart)\nDESCRIPTION: This code snippet shows how to achieve the same effect as the previous code after the migration. The fillColor is now set to transparent when the checkbox is unselected and the border color is set using the Checkbox.side property. This ensures the red color is used for the border in the unselected state.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/checkbox-fillColor.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nCheckbox(\n  fillColor: MaterialStateProperty.resolveWith((states) {\n    if (!states.contains(MaterialState.selected)) {\n      return Colors.transparent;\n    }\n    return null;\n  }),\n  side: const BorderSide(color: Colors.red, width: 2),\n  value: _checked,\n  onChanged: _enabled\n    ? (bool? value) {\n        setState(() {\n          _checked = value!;\n        });\n      }\n    : null,\n),\n```\n\n----------------------------------------\n\nTITLE: BottomNavigationBarItem Before Migration (title)\nDESCRIPTION: This code snippet shows how to use the `BottomNavigationBarItem` widget with the deprecated `title` parameter. The `title` parameter expects a `Widget` object.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/bottom-navigation-title-to-label.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nBottomNavigationBarItem(\n  icon: Icons.add,\n  title: Text('add'),\n)\n```\n\n----------------------------------------\n\nTITLE: Using CheckboxListTile and SwitchListTile in Flutter\nDESCRIPTION: This code demonstrates the use of `CheckboxListTile` and `SwitchListTile` widgets in Flutter. It defines a StatefulWidget with two state variables, `timeDilation` and `_lights`.  The `CheckboxListTile` controls the `timeDilation` which affects animation speed and the `SwitchListTile` controls the `_lights` boolean.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/fundamentals/user-input.md#_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\ndouble timeDilation = 1.0;\nbool _lights = false;\n\n@override\nWidget build(BuildContext context) {\n  return Column(\n    children: [\n      CheckboxListTile(\n        title: const Text('Animate Slowly'),\n        value: timeDilation != 1.0,\n        onChanged: (bool? value) {\n          setState(() {\n            timeDilation = value! ? 10.0 : 1.0;\n          });\n        },\n        secondary: const Icon(Icons.hourglass_empty),\n      ),\n      SwitchListTile(\n        title: const Text('Lights'),\n        value: _lights,\n        onChanged: (bool value) {\n          setState(() {\n            _lights = value;\n          });\n        },\n        secondary: const Icon(Icons.lightbulb_outline),\n      ),\n    ],\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SpringDescription After Migration in Dart\nDESCRIPTION: Shows the adjusted SpringDescription object after applying the formula correction to maintain the original animation behavior. The mass is set to 1.0, and the stiffness and damping values are recalculated. This requires the 'flutter' package.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/spring-description-underdamped.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nconst spring = SpringDescription(\n  mass: 1.0,\n  stiffness: 100.499375,\n  damping: 20,\n);\n```\n\n----------------------------------------\n\nTITLE: Using Bundle.module for Resources\nDESCRIPTION: This code snippet shows how to use `Bundle.module` to load resources from a Swift Package Manager module. It includes a conditional compilation block to use `Bundle.module` when building as a Swift package.\nSOURCE: https://github.com/flutter/website/blob/main/src/_includes/docs/swift-package-manager/migrate-swift-plugin.md#_snippet_7\n\nLANGUAGE: Swift\nCODE:\n```\n#if SWIFT_PACKAGE\n     let settingsURL = Bundle.module.url(forResource: \"image\", withExtension: \"jpg\")\n#else\n     let settingsURL = Bundle(for: Self.self).url(forResource: \"image\", withExtension: \"jpg\")\n#endif\n```\n\n----------------------------------------\n\nTITLE: TextField canRequestFocus After Migration (Dart)\nDESCRIPTION: Shows the recommended way to control focus request behavior after the deprecation of `TextField.canRequestFocus`. A `FocusNode` is created with the `canRequestFocus` parameter set, and this `FocusNode` is then passed to the `TextField`'s `focusNode` property.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/can-request-focus.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nclass _MyWidgetState extends State<MyWidget> {\n  final FocusNode _focusNode = FocusNode(canRequestFocus: false);\n\n  @override\n  Widget build(BuildContext context) {\n    return TextField(\n      focusNode: _focusNode,\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Tab Bar with TabController in Flutter\nDESCRIPTION: This Flutter code snippet shows how to create a `TabBar` widget with a `TabController` for managing tab selection. It defines a stateful widget `_MyAppState` that uses a `TabController` to coordinate tab selection between a `TabBar` and a `TabBarView` (not shown in this snippet).\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/react-native-devs.md#_snippet_39\n\nLANGUAGE: dart\nCODE:\n```\nclass _MyAppState extends State<MyApp> with SingleTickerProviderStateMixin {\n  late TabController controller = TabController(length: 2, vsync: this);\n\n  @override\n  Widget build(BuildContext context) {\n    return TabBar(\n      controller: controller,\n      tabs: const <Tab>[\n        Tab(icon: Icon(Icons.person)),\n        Tab(icon: Icon(Icons.email)),\n      ],\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Building a Scaffold with a Column Flutter\nDESCRIPTION: This code snippet builds a Scaffold widget with a Container child, which contains a Column widget. The Column widget has two Text children. The Scaffold fills the screen, and the Container within it can be any size up to the screen size. This demonstrates how a parent widget can supply loose constraints to its children, allowing them to be smaller than the maximum available size.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/layout/constraints.md#_snippet_29\n\nLANGUAGE: dart\nCODE:\n```\nScaffold(\n   body: Container(color: blue,\n   child: Column(\n      children: [\n         Text('Hello!'),\n         Text('Goodbye!')]))\n```\n\n----------------------------------------\n\nTITLE: Implementing FlutterAppLifeCycleProvider in Swift\nDESCRIPTION: This Swift code snippet demonstrates how to implement the `FlutterAppLifeCycleProvider` protocol within your `AppDelegate` class. It ensures that Flutter plugins receive necessary lifecycle callbacks by delegating to a `FlutterPluginAppLifeCycleDelegate` instance. This is crucial when directly subclassing `FlutterAppDelegate` is not possible.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/add-to-app/ios/add-flutter-screen.md#_snippet_11\n\nLANGUAGE: Swift\nCODE:\n```\nimport Foundation\nimport Flutter\n\n@Observable\nclass AppDelegate: UIResponder, UIApplicationDelegate, FlutterAppLifeCycleProvider {\n\n  private let lifecycleDelegate = FlutterPluginAppLifeCycleDelegate()\n\n  let flutterEngine = FlutterEngine(name: \"my flutter engine\")\n\n  override func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey : Any]? = nil) -> Bool {\n  func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey : Any]? = nil) -> Bool {\n    flutterEngine.run()\n    return lifecycleDelegate.application(application, didFinishLaunchingWithOptions: launchOptions ?? [:])\n  }\n\n  func application(_ application: UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Data) {\n    lifecycleDelegate.application(application, didRegisterForRemoteNotificationsWithDeviceToken: deviceToken)\n  }\n\n  func application(_ application: UIApplication, didFailToRegisterForRemoteNotificationsWithError error: Error) {\n    lifecycleDelegate.application(application, didFailToRegisterForRemoteNotificationsWithError: error)\n  }\n\n  func application(_ application: UIApplication, didReceiveRemoteNotification userInfo: [AnyHashable : Any], fetchCompletionHandler completionHandler: @escaping (UIBackgroundFetchResult) -> Void) {\n    lifecycleDelegate.application(application, didReceiveRemoteNotification: userInfo, fetchCompletionHandler: completionHandler)\n  }\n\n  func application(_ app: UIApplication, open url: URL, options: [UIApplication.OpenURLOptionsKey : Any] = [:]) -> Bool {\n    return lifecycleDelegate.application(app, open: url, options: options)\n  }\n\n  func application(_ application: UIApplication, handleOpen url: URL) -> Bool {\n    return lifecycleDelegate.application(application, handleOpen: url)\n  }\n\n  func application(_ application: UIApplication, open url: URL, sourceApplication: String?, annotation: Any) -> Bool {\n    return lifecycleDelegate.application(application, open: url, sourceApplication: sourceApplication ?? \"\", annotation: annotation)\n  }\n\n  func application(_ application: UIApplication, performActionFor shortcutItem: UIApplicationShortcutItem, completionHandler: @escaping (Bool) -> Void) {\n    lifecycleDelegate.application(application, performActionFor: shortcutItem, completionHandler: completionHandler)\n  }\n\n  func application(_ application: UIApplication, handleEventsForBackgroundURLSession identifier: String, completionHandler: @escaping () -> Void) {\n    lifecycleDelegate.application(application, handleEventsForBackgroundURLSession: identifier, completionHandler: completionHandler)\n  }\n\n  func application(_ application: UIApplication, performFetchWithCompletionHandler completionHandler: @escaping (UIBackgroundFetchResult) -> Void) {\n    lifecycleDelegate.application(application, performFetchWithCompletionHandler: completionHandler)\n  }\n\n  func add(_ delegate: FlutterApplicationLifeCycleDelegate) {\n    lifecycleDelegate.add(delegate)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Migrate to SystemNavigator.routeInformationUpdated - Dart\nDESCRIPTION: This code snippet shows the updated method `SystemNavigator.routeInformationUpdated`, which replaces the deprecated `SystemNavigator.routeUpdated`. Using `routeInformationUpdated` ensures a single API for updating route information, improving consistency.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/3-7-deprecations.md#_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nSystemNavigator.routeInformationUpdated(location: 'foo');\n```\n\n----------------------------------------\n\nTITLE: GestureRecognizer and Listener with Missing Trackpad Support\nDESCRIPTION: This snippet illustrates a common mistake when using GestureRecognizer and Listener. If addPointerPanZoom is not called on the GestureRecognizer, trackpad gestures will not be recognized. This code highlights the importance of handling trackpad gestures explicitly.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/trackpad-gestures.md#_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() => runApp(Foo());\n\nclass Foo extends StatefulWidget {\n  late final PanGestureRecognizer recognizer;\n\n  @override\n  void initState() {\n    super.initState();\n    recognizer = PanGestureRecognizer()\n    ..onStart = _onPanStart\n    ..onUpdate = _onPanUpdate\n    ..onEnd = _onPanEnd;\n  }\n\n  void _onPanStart(DragStartDetails details) {\n    debugPrint('onStart');\n  }\n\n  void _onPanUpdate(DragUpdateDetails details) {\n    debugPrint('onUpdate');\n  }\n\n  void _onPanEnd(DragEndDetails details) {\n    debugPrint('onEnd');\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Listener(\n      onPointerDown: recognizer.addPointer,\n      // recognizer.addPointerPanZoom is not called\n      child: Container()\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Set Flutter Root (macOS/Linux)\nDESCRIPTION: This console command sets the `FLUTTER_ROOT` environment variable on macOS or Linux. This variable is used by the documentation tool to locate the Flutter SDK.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/packages-and-plugins/developing-packages.md#_snippet_25\n\nLANGUAGE: console\nCODE:\n```\nexport FLUTTER_ROOT=~/dev/flutter  # on macOS or Linux\n```\n\n----------------------------------------\n\nTITLE: TextField with MaxLengthEnforcement.none (Dart)\nDESCRIPTION: Illustrates how to use `MaxLengthEnforcement.none` with `maxLength` after the migration. This displays an error message when the length is exceeded but doesn't truncate.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/use-maxLengthEnforcement-instead-of-maxLengthEnforced.md#_snippet_4\n\nLANGUAGE: Dart\nCODE:\n```\nTextField(\n  maxLength: 6,\n  maxLengthEnforcement: MaxLengthEnforcement.none,\n)\n```\n\n----------------------------------------\n\nTITLE: Updating TextTheme properties in Flutter (Dart)\nDESCRIPTION: This snippet shows the updated code after migrating from deprecated TextTheme properties. It uses displayLarge, displayMedium, displaySmall, headlineMedium, headlineSmall, titleLarge, titleMedium, titleSmall, bodyLarge, bodyMedium, bodySmall, labelLarge, and labelSmall instead of the old properties.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/3-19-deprecations.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\n// TextTheme\n// Base constructor\nTextTheme(\n  displayLarge: headline1Style,\n  displayMedium: headline2Style,\n  displaySmall: headline3Style,\n  headlineMedium: headline4Style,\n  headlineSmall: headline5Style,\n  titleLarge: headline6Style,\n  titleMedium: subtitle1Style,\n  titleSmall: subtitle2Style,\n  bodyLarge: bodyText1Style,\n  bodyMedium: bodyText2Style,\n  bodySmall: captionStyle,\n  labelLarge: buttonStyle,\n  labelSmall: overlineStyle,\n);\n\nTextTheme.copyWith(\n  displayLarge: headline1Style,\n  displayMedium: headline2Style,\n  displaySmall: headline3Style,\n  headlineMedium: headline4Style,\n  headlineSmall: headline5Style,\n  titleLarge: headline6Style,\n  titleMedium: subtitle1Style,\n  titleSmall: subtitle2Style,\n  bodyLarge: bodyText1Style,\n  bodyMedium: bodyText2Style,\n  bodySmall: captionStyle,\n  labelLarge: buttonStyle,\n  labelSmall: overlineStyle,\n);\n\nTextStyle style;\nstyle = textTheme.displayLarge;\nstyle = textTheme.displayMedium;\nstyle = textTheme.displaySmall;\nstyle = textTheme.headlineMedium;\nstyle = textTheme.headlineSmall;\nstyle = textTheme.titleLarge;\nstyle = textTheme.titleMedium;\nstyle = textTheme.titleSmall;\nstyle = textTheme.bodyLarge;\nstyle = textTheme.bodyMedium;\nstyle = textTheme.bodySmall;\nstyle = textTheme.labelLarge;\nstyle = textTheme.labelSmall;\n```\n\n----------------------------------------\n\nTITLE: MainActivity.java (Java) for Android 12 Splash Screen\nDESCRIPTION: This Java code snippet disables the Android splash screen fade out animation to avoid a flicker before the similar frame is drawn in Flutter.  It uses `WindowCompat` to align the Flutter view vertically with the window and `getSplashScreen().setOnExitAnimationListener` to remove the splash screen view.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/platform-integration/android/splash-screen.md#_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nimport android.os.Build;\nimport android.os.Bundle;\nimport android.window.SplashScreenView;\nimport androidx.core.view.WindowCompat;\nimport io.flutter.embedding.android.FlutterActivity;\n\npublic class MainActivity extends FlutterActivity {\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        // Aligns the Flutter view vertically with the window.\n        WindowCompat.setDecorFitsSystemWindows(getWindow(), false);\n\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.S) {\n            // Disable the Android splash screen fade out animation to avoid\n            // a flicker before the similar frame is drawn in Flutter.\n            getSplashScreen()\n                .setOnExitAnimationListener(\n                    (SplashScreenView splashScreenView) -> {\n                        splashScreenView.remove();\n                    });\n        }\n\n        super.onCreate(savedInstanceState);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Dart VM Service URI Example\nDESCRIPTION: This is an example of the Dart VM service URI that Xcode displays after running a Flutter application. This URI is used to attach the VS Code debugger to the running Flutter process.\nSOURCE: https://github.com/flutter/website/blob/main/src/_includes/docs/debug/debug-flow-macos.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n2023-07-12 14:55:39.966191-0500 Runner[58361:53017145]\n    flutter: The Dart VM service is listening on\n    http://127.0.0.1:50642/00wEOvfyff8=/\n```\n\n----------------------------------------\n\nTITLE: Caching FlutterEngine in MyApplication (Kotlin)\nDESCRIPTION: This Kotlin code snippet demonstrates how to instantiate and cache a FlutterEngine within the Application class for later use by a FlutterFragment. It retrieves the DartExecutor, executes the default Dart entrypoint, and stores the FlutterEngine in the FlutterEngineCache with the ID \"my_engine_id\".\nSOURCE: https://github.com/flutter/website/blob/main/src/content/add-to-app/android/add-flutter-fragment.md#_snippet_4\n\nLANGUAGE: Kotlin\nCODE:\n```\n// Somewhere in your app, before your FlutterFragment is needed,\n// like in the Application class ...\n// Instantiate a FlutterEngine.\nval flutterEngine = FlutterEngine(context)\n\n// Start executing Dart code in the FlutterEngine.\nflutterEngine.getDartExecutor().executeDartEntrypoint(\n    DartEntrypoint.createDefault()\n)\n\n// Cache the pre-warmed FlutterEngine to be used later by FlutterFragment.\nFlutterEngineCache\n  .getInstance()\n  .put(\"my_engine_id\", flutterEngine)\n```\n\n----------------------------------------\n\nTITLE: CupertinoTabBar After Migration (Using CupertinoApp)\nDESCRIPTION: This code snippet demonstrates how to provide localization information to the CupertinoTabBar by wrapping it within a CupertinoApp widget. The CupertinoApp automatically provides the DefaultCupertinoLocalizations, satisfying the localization requirement of the CupertinoTabBar. This resolves the 'localizations != null' assertion error.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/cupertino-tab-bar-localizations.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/cupertino.dart';\n\nvoid main() => runApp(Foo());\n\nclass Foo extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return CupertinoApp(\n      home: CupertinoTabBar(\n        items: const <BottomNavigationBarItem>[\n          BottomNavigationBarItem(\n            icon: Icon(CupertinoIcons.add_circled),\n            label: 'Tab 1',\n          ),\n          BottomNavigationBarItem(\n            icon: Icon(CupertinoIcons.add_circled_solid),\n            label: 'Tab 2',\n          ),\n        ],\n        currentIndex: 1,\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Icons in Flutter\nDESCRIPTION: This Flutter code snippet shows how to use icons from the Material library. It creates an `Icon` widget with a specified icon and color.  Requires the Material library to be imported.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/react-native-devs.md#_snippet_29\n\nLANGUAGE: dart\nCODE:\n```\nreturn const Icon(Icons.lightbulb_outline, color: Colors.redAccent);\n```\n\n----------------------------------------\n\nTITLE: Updating App with Image Section in Flutter\nDESCRIPTION: Shows how to integrate the `ImageSection` widget into the app's layout by adding it as the first child in the `children` list. The `image` property is set to the path of the image asset.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/layout/tutorial.md#_snippet_12\n\nLANGUAGE: Dart\nCODE:\n```\n  children: [\n+   ImageSection(\n+     image: 'images/lake.jpg',\n+   ),\n    TitleSection(\n      name: 'Oeschinen Lake Campground',\n      location: 'Kandersteg, Switzerland',\n```\n\n----------------------------------------\n\nTITLE: Adjusting Letter Spacing Flutter\nDESCRIPTION: This Dart code creates a Flutter Container widget that mimics the CSS example, setting the letterSpacing property of the TextStyle to add space between letters.  It creates a grey container with a centered red container inside, which contains the text styled with specified font, color, and letter spacing. Requires Flutter SDK.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/web-devs.md#_snippet_26\n\nLANGUAGE: dart\nCODE:\n```\nfinal container = Container(\n  // grey box\n  width: 320,\n  height: 240,\n  color: Colors.grey[300],\n  child: Center(\n    child: Container(\n      // red box\n      padding: const EdgeInsets.all(16),\n      decoration: BoxDecoration(\n        color: Colors.red[400],\n      ),\n      child: const Text(\n        'Lorem ipsum',\n        style: TextStyle(\n          color: Colors.white,\n          fontSize: 24,\n          fontWeight: FontWeight.w900,\n          letterSpacing: 4,\n        ),\n      ),\n    ),\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Gradle Dependency in firebase_crashlytics Plugin (Groovy)\nDESCRIPTION: This snippet shows the Gradle dependency declaration for the `com.crashlytics.sdk.android:crashlytics` library within the `build.gradle` file of the `firebase_crashlytics` plugin. This dependency is transitively included when the plugin is used in a Flutter module.  The `implementation` keyword includes the dependency, specifying version `2.9.9`.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/add-to-app/android/plugin-setup.md#_snippet_2\n\nLANGUAGE: groovy\nCODE:\n```\n…\ndependencies {\n    …\n    implementation(\"com.crashlytics.sdk.android:crashlytics:2.9.9\")\n    …\n}\n…\n```\n\n----------------------------------------\n\nTITLE: Adding a load action to the view model\nDESCRIPTION: This code adds a `load` action to the `HomeViewModel`, which is responsible for loading the user data. This action would typically interact with a repository or service to fetch the data.  No external dependencies beyond the Flutter SDK are required.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/app-architecture/design-patterns/command.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nclass HomeViewModel extends ChangeNotifier {\n\n  User? get user => // ...\n  // ···\n  void load() {\n    // load user\n  }\n  // ···\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Container Color (After Migration) - Dart\nDESCRIPTION: This Dart code snippet shows the updated widget test after the Container optimization. It now checks the color property directly on the Container and verifies the presence of ColoredBox instead of BoxDecoration.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/container-color.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\ntestWidgets('Container color', (WidgetTester tester) async {\n  await tester.pumpWidget(Container(color: Colors.red));\n\n  final Container container = tester.widgetList<Container>().first;\n  expect(container.color, Colors.red);\n  // If your test needed to work directly with the BoxDecoration, it should\n  // instead look for the ColoredBox, e.g.:\n  expect(find.byType(BoxDecoration), findsNothing);\n  expect(find.byType(ColoredBox), findsOneWidget);\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Curve in Dart\nDESCRIPTION: This code snippet demonstrates how to define a custom animation curve by extending the `Curve` class and overriding the `transform` method. This allows for creating unique animation behaviors not available in the standard `Curves` class. The imported `dart:math` library is used for mathematical functions. A ShakeCurve is defined using a sine wave.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/animations/index.md#_snippet_1\n\nLANGUAGE: Dart\nCODE:\n```\nimport 'dart:math';\n\nclass ShakeCurve extends Curve {\n  @override\n  double transform(double t) => sin(t * pi * 2);\n}\n```\n\n----------------------------------------\n\nTITLE: Text Field with Hint Text using InputDecoration in Flutter\nDESCRIPTION: This Dart snippet demonstrates how to display hint text in a Flutter TextField using the InputDecoration object. The hintText property of InputDecoration is set to the desired hint text.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/xamarin-forms-devs.md#_snippet_54\n\nLANGUAGE: dart\nCODE:\n```\nTextField(decoration: InputDecoration(hintText: 'This is a hint'))\n```\n\n----------------------------------------\n\nTITLE: TextEditingClient After Migration (Dart)\nDESCRIPTION: This code snippet demonstrates the implementation of `TextEditingClient` after the migration.  It adds the `currentTextEditingValue` getter that returns the current value of the `TextEditingController`. This allows the platform to request the current state of the text input.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/text-input-client-current-value.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nclass _MyCustomTextWidgetState extends State<MyCustomWidget> implements TextEditingClient {\n  ...\n\n  @override\n  TextEditingValue get currentTextEditingValue => widget.textEditingController.value;\n\n  @override\n  void updateEditingValue(TextEditingValue value) {\n    ...\n  }\n\n  @override\n  void performAction(TextInputAction action) {\n    ...\n  }\n\n  @override\n  void updateFloatingCursor(RawFloatingCursorPoint point) {\n    ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: ThemeData before TextSelectionTheme migration (Dart)\nDESCRIPTION: Illustrates how to set cursorColor, textSelectionColor, and textSelectionHandleColor directly within ThemeData before the introduction of TextSelectionThemeData. This approach is now deprecated.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/text-selection-theme.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nThemeData(\n  cursorColor: Colors.red,\n  textSelectionColor: Colors.green,\n  textSelectionHandleColor: Colors.blue,\n)\n```\n\n----------------------------------------\n\nTITLE: Replacing deprecated ColorScheme properties in Dart\nDESCRIPTION: This code snippet illustrates how to replace deprecated `ColorScheme` properties such as `background`, `onBackground`, and `surfaceVariant` with their replacements: `surface`, `onSurface`, and `surfaceContainerHighest` respectively. This ensures compatibility with Material Design 3's updated color roles.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/new-color-scheme-roles.md#_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nColor myColor1 = Theme.of(context).colorScheme.background;\nColor myColor2 = Theme.of(context).colorScheme.onBackground;\nColor myColor3 = Theme.of(context).colorScheme.surfaceVariant;\n\n```\n\n----------------------------------------\n\nTITLE: Managing multiple action states in a view model\nDESCRIPTION: This example shows how managing the running and error states of multiple actions can become complex. Adding an `edit()` action to the `HomeViewModel` requires separate states for `runningLoad`, `errorLoad`, `runningEdit`, and `errorEdit`, leading to code duplication and increased complexity. Requires Flutter SDK.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/app-architecture/design-patterns/command.md#_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nclass HomeViewModel extends ChangeNotifier {\n  User? get user => // ...\n\n  bool get runningLoad => // ...\n\n  Exception? get errorLoad => // ...\n\n  bool get runningEdit => // ...\n\n  Exception? get errorEdit => // ...\n\n  void load() {\n    // load user\n  }\n\n  void edit(String name) {\n    // edit user\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: MultiViewApp Widget in Dart\nDESCRIPTION: This Dart code defines a `MultiViewApp` widget which manages multiple Flutter views. It listens for view additions and removals through the `WidgetsBindingObserver` and renders a widget for each view using the provided `viewBuilder` function. This widget is the root for multi-view Flutter apps.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/platform-integration/web/embedding-flutter-web.md#_snippet_4\n\nLANGUAGE: Dart\nCODE:\n```\nimport 'dart:ui' show FlutterView;\nimport 'package:flutter/widgets.dart';\n\n/// Calls [viewBuilder] for every view added to the app to obtain the widget to\n/// render into that view. The current view can be looked up with [View.of].\nclass MultiViewApp extends StatefulWidget {\n  const MultiViewApp({super.key, required this.viewBuilder});\n\n  final WidgetBuilder viewBuilder;\n\n  @override\n  State<MultiViewApp> createState() => _MultiViewAppState();\n}\n\nclass _MultiViewAppState extends State<MultiViewApp> with WidgetsBindingObserver {\n  @override\n  void initState() {\n    super.initState();\n    WidgetsBinding.instance.addObserver(this);\n    _updateViews();\n  }\n\n  @override\n  void didUpdateWidget(MultiViewApp oldWidget) {\n    super.didUpdateWidget(oldWidget);\n    // Need to re-evaluate the viewBuilder callback for all views.\n    _views.clear();\n    _updateViews();\n  }\n\n  @override\n  void didChangeMetrics() {\n    _updateViews();\n  }\n\n  Map<Object, Widget> _views = <Object, Widget>{};\n\n  void _updateViews() {\n    final Map<Object, Widget> newViews = <Object, Widget>{};\n    for (final FlutterView view in WidgetsBinding.instance.platformDispatcher.views) {\n      final Widget viewWidget = _views[view.viewId] ?? _createViewWidget(view);\n      newViews[view.viewId] = viewWidget;\n    }\n    setState(() {\n      _views = newViews;\n    });\n  }\n\n  Widget _createViewWidget(FlutterView view) {\n    return View(\n      view: view,\n      child: Builder(\n        builder: widget.viewBuilder,\n      ),\n    );\n  }\n\n  @override\n  void dispose() {\n    WidgetsBinding.instance.removeObserver(this);\n    super.dispose();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return ViewCollection(views: _views.values.toList(growable: false));\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: AlertDialog Example Before Migration - Dart\nDESCRIPTION: This code demonstrates how an AlertDialog was implemented before the automatic scrolling update.  Note the nested SingleChildScrollView in the content, which would not have been scrollable in this configuration.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/scrollable-alert-dialog.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nAlertDialog(\n  title: Text(\n    'Very, very large title that is also scrollable',\n    textScaleFactor: 5,\n  ),\n  content: SingleChildScrollView( // won't be scrollable\n    child: Text('Scrollable content', textScaleFactor: 5),\n  ),\n  actions: <Widget>[\n    TextButton(child: Text('Button 1'), onPressed: () {}),\n    TextButton(child: Text('Button 2'), onPressed: () {}),\n  ],\n)\n```\n\n----------------------------------------\n\nTITLE: Update AndroidManifest.xml for v2 Embedding - XML\nDESCRIPTION: This code snippet demonstrates how to update the `AndroidManifest.xml` file to use `io.flutter.embedding.android.FlutterActivity`. This is necessary when the `MainActivity.java` file has been removed, and the application needs to utilize the v2 embedding.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/plugin-api-migration.md#_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<activity android:name=\"io.flutter.embedding.android.FlutterActivity\"\n            android:theme=\"@style/LaunchTheme\"\n   android:configChanges=\"orientation|keyboardHidden|keyboard|screenSize|locale|layoutDirection|fontScale\"\n            android:hardwareAccelerated=\"true\"\n            android:exported=\"true\"\n            android:windowSoftInputMode=\"adjustResize\">\n            <meta-data\n                android:name=\"io.flutter.app.android.SplashScreenUntilFirstFrame\"\n                android:value=\"true\" />\n            <intent-filter>\n                <action android:name=\"android.intent.action.MAIN\"/>\n                <category android:name=\"android.intent.category.LAUNCHER\"/>\n            </intent-filter>\n        </activity>\n\n```\n\n----------------------------------------\n\nTITLE: Running Flutter Driver Tests Headless\nDESCRIPTION: This command runs Flutter integration tests in headless mode (without a visible browser window) using the `web-server` device.  It is used for automated testing environments.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/testing/integration-tests/index.md#_snippet_14\n\nLANGUAGE: console\nCODE:\n```\n$ flutter drive \\\n  --driver=test_driver/integration_test.dart \\\n  --target=integration_test/app_test.dart \\\n  -d web-server\n```\n\n----------------------------------------\n\nTITLE: Building APKs and Local Testing with bundletool (Console)\nDESCRIPTION: This snippet uses bundletool to build APKs from an AAB file for local testing. It requires Java and the bundletool JAR file. It outputs an APKS file that can be installed on a test device.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/perf/deferred-components.md#_snippet_16\n\nLANGUAGE: console\nCODE:\n```\n$ java -jar bundletool.jar build-apks --bundle=<your_app_project_dir>/build/app/outputs/bundle/release/app-release.aab --output=<your_temp_dir>/app.apks --local-testing\n```\n\n----------------------------------------\n\nTITLE: Custom Notification before migration (Dart)\nDESCRIPTION: This code snippet demonstrates how a custom `Notification` subclass was implemented before the removal of `Notification.visitAncestor`. It overrides the `visitAncestor` method to perform custom logic during notification dispatch.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/notifications.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/widgets.dart';\n\nclass MyNotification extends Notification {\n\n  @override\n  bool visitAncestor(Element element) {\n    print('Visiting $element');\n    return super.visitAncestor(element);\n  }\n}\n\nvoid methodThatSendsNotification(BuildContext? context) {\n  MyNotification().dispatch(context);\n}\n```\n\n----------------------------------------\n\nTITLE: Extracting Intl Messages to ARB - Console\nDESCRIPTION: This command extracts all `Intl.message()` calls from the specified Dart file (`lib/main.dart`) and generates an Application Resource Bundle (ARB) file (`intl_messages.arb`) in the specified output directory (`lib/l10n`).  This ARB file serves as a template for translations.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/accessibility-and-internationalization/internationalization.md#_snippet_40\n\nLANGUAGE: console\nCODE:\n```\n$ dart run intl_translation:extract_to_arb --output-dir=lib/l10n lib/main.dart\n```\n\n----------------------------------------\n\nTITLE: Unlocking an Achievement using GamesServices.unlock() in Dart\nDESCRIPTION: This Dart code unlocks a specific achievement for the player using `GamesServices.unlock()`. The `Achievement` object requires both Android and iOS IDs, which correspond to the achievement IDs configured in the Google Play Console and App Store Connect. The code assumes that achievement IDs are already registered on both platforms.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/games/achievements-leaderboard.md#_snippet_3\n\nLANGUAGE: Dart\nCODE:\n```\nawait GamesServices.unlock(\n  achievement: Achievement(\n    androidID: 'your android id',\n    iOSID: 'your ios id',\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Base HREF for Non-Root Hosting\nDESCRIPTION: This HTML snippet demonstrates how to update the `<base href>` tag in `web/index.html` to host a Flutter app at a non-root location. This example shows how to host the app at `my_app.dev/flutter_app`. The relative `base href` attribute should be adjusted based on the URL where the page is served.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/navigation/url-strategies.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<base href=\"/flutter_app/\">\n```\n\n----------------------------------------\n\nTITLE: Configure Gradle for signing (Kotlin)\nDESCRIPTION: This Kotlin code snippet configures the Gradle build file to use the upload key for signing the app in release mode. It reads the keystore properties from the `key.properties` file and applies them to the signing configuration. It also sets the signing config to use the release configuration in the `buildTypes` block, ensuring that release builds are signed correctly.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/deployment/android.md#_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nimport java.util.Properties\nimport java.io.FileInputStream\n\nplugins {\n   ...\n}\n\nval keystoreProperties = Properties()\nval keystorePropertiesFile = rootProject.file(\"key.properties\")\nif (keystorePropertiesFile.exists()) {\n    keystoreProperties.load(FileInputStream(keystorePropertiesFile))\n}\n\nandroid {\n   ...\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nandroid {\n    // ...\n\n    signingConfigs {\n        create(\"release\") {\n            keyAlias = keystoreProperties[\"keyAlias\"] as String\n            keyPassword = keystoreProperties[\"keyPassword\"] as String\n            storeFile = keystoreProperties[\"storeFile\"]?.let { file(it) }\n            storePassword = keystoreProperties[\"storePassword\"] as String\n        }\n    }\n    buildTypes {\n        release {\n            // TODO: Add your own signing config for the release build.\n            // Signing with the debug keys for now,\n            // so `flutter run --release` works.\n            signingConfig = signingConfigs.getByName(\"release\")\n        }\n    }\n...\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Font in Flutter\nDESCRIPTION: This snippet demonstrates how to use a custom font in a Flutter app after it has been declared in the `pubspec.yaml` file. It sets the `fontFamily` property of the `TextStyle` to the name of the font family defined in `pubspec.yaml`.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/swiftui-devs.md#_snippet_33\n\nLANGUAGE: Dart\nCODE:\n```\nText(\n  'Cupertino',\n  style: TextStyle(fontSize: 40, fontFamily: 'BungeeSpice'),\n),\n```\n\n----------------------------------------\n\nTITLE: Building Snap Package with LXD\nDESCRIPTION: This command builds the snap package using Snapcraft with the LXD container backend.  LXD provides an isolated environment for building snaps.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/deployment/linux.md#_snippet_12\n\nLANGUAGE: console\nCODE:\n```\n$ snapcraft --use-lxd\n```\n\n----------------------------------------\n\nTITLE: Display Weather with FutureBuilder (Dart)\nDESCRIPTION: Uses a `FutureBuilder` widget in Flutter to display the weather value fetched by the view model.  It handles the different states of the `Future` (loading, data available, error) to update the UI accordingly.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/dart-swift-concurrency.md#_snippet_7\n\nLANGUAGE: Dart\nCODE:\n```\nclass HomePage extends StatelessWidget {\n  const HomePage({super.key});\n\n  final HomePageViewModel viewModel = const HomePageViewModel();\n\n  @override\n  Widget build(BuildContext context) {\n    return CupertinoPageScaffold(\n      // Feed a FutureBuilder to your widget tree.\n      child: FutureBuilder<Weather>(\n        // Specify the Future that you want to track.\n        future: viewModel.load(),\n        builder: (context, snapshot) {\n          // A snapshot is of type `AsyncSnapshot` and contains the\n          // state of the Future. By looking if the snapshot contains\n          // an error or if the data is null, you can decide what to\n          // show to the user.\n          if (snapshot.hasData) {\n            return Center(child: Text(snapshot.data.toString()));\n          } else {\n            return const Center(child: CupertinoActivityIndicator());\n          }\n        },\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Run Flutter App\nDESCRIPTION: This shell command runs the Flutter app in the example directory, ensuring that the plugin is working correctly.\nSOURCE: https://github.com/flutter/website/blob/main/src/_includes/docs/swift-package-manager/migrate-swift-plugin.md#_snippet_11\n\nLANGUAGE: Shell\nCODE:\n```\nflutter run\n```\n\n----------------------------------------\n\nTITLE: pubspec.yaml Dependencies (YAML)\nDESCRIPTION: This YAML snippet shows the `dev_dependencies` section of the `pubspec.yaml` file after adding the `integration_test` dependency. It includes `flutter_test`, `flutter_lints`, and `integration_test`.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/testing/integration-tests/index.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# ...\ndev_dependencies:\n  # ... added dependencies\n  flutter_test:\n    sdk: flutter\n  flutter_lints: ^5.0.0\n  integration_test:\n    sdk: flutter\n# ...\n```\n\n----------------------------------------\n\nTITLE: Listener Handling PointerScrollEvent and PointerPanZoomUpdate after Migration (Dart)\nDESCRIPTION: This snippet demonstrates the updated `Listener` usage *after* migration, showing how to handle both `PointerScrollEvent` (mouse wheel) and `PointerPanZoomUpdate` events (trackpad scrolling).  It now captures both types of scrolling input, ensuring that both mouse wheel and trackpad interactions trigger the corresponding `debugPrint` statements.  This ensures complete desktop scrolling support.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/trackpad-gestures.md#_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() => runApp(Foo());\n\nclass Foo extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return Listener(\n      onPointerSignal: (PointerSignalEvent event) {\n        if (event is PointerScrollEvent) {\n          debugPrint('scroll wheel event');\n        }\n      },\n      onPointerPanZoomUpdate: (PointerPanZoomUpdateEvent event) {\n        debugPrint('trackpad scroll event');\n      }\n      child: Container()\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Add EmbeddingV1Activity to AndroidManifest.xml - XML\nDESCRIPTION: This code snippet adds the `EmbeddingV1Activity` to the `AndroidManifest.xml` file. This step is necessary if you've created `EmbeddingV1Activity` for testing v1 embedding compatibility, ensuring it's properly declared in the application manifest.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/plugin-api-migration.md#_snippet_3\n\nLANGUAGE: XML\nCODE:\n```\n<activity\n        android:name=\".EmbeddingV1Activity\"\n        android:theme=\"@style/LaunchTheme\"\n            android:configChanges=\"orientation|keyboardHidden|keyboard|screenSize|locale|layoutDirection|fontScale\"\n        android:hardwareAccelerated=\"true\"\n        android:exported=\"true\"\n        android:windowSoftInputMode=\"adjustResize\">\n    </activity>\n\n```\n\n----------------------------------------\n\nTITLE: Run Flutter App in Profile Mode (CLI)\nDESCRIPTION: This command line instruction demonstrates how to run a Flutter application in profile mode using the `--profile` flag. This mode is essential for performance debugging and provides the necessary tracing information for profiling tools.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/perf/ui-performance.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ flutter run --profile\n```\n\n----------------------------------------\n\nTITLE: ConstrainedBox with Suitable Child Size in Flutter\nDESCRIPTION: This example demonstrates a ConstrainedBox with a child Container that fits within the specified constraints. The Center widget allows the ConstrainedBox to size itself freely. The Container's desired size falls within the min/max constraints, and therefore its final size matches its desired size.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/layout/constraints.md#_snippet_42\n\nLANGUAGE: dart\nCODE:\n```\nCenter(\n  child: ConstrainedBox(\n    constraints: const BoxConstraints(\n      minWidth: 70,\n      minHeight: 70,\n      maxWidth: 150,\n      maxHeight: 150,\n    ),\n    child: Container(color: red, width: 100, height: 100),\n  ),\n)\n```\n\n----------------------------------------\n\nTITLE: Setting initial route (Kotlin)\nDESCRIPTION: This Kotlin code demonstrates how to create a FlutterFragment with a specified initial route.  A new FlutterEngine is used, and the `initialRoute` method sets the desired route to \"myInitialRoute/\".\nSOURCE: https://github.com/flutter/website/blob/main/src/content/add-to-app/android/add-flutter-fragment.md#_snippet_8\n\nLANGUAGE: Kotlin\nCODE:\n```\n// With a new FlutterEngine.\nval flutterFragment = FlutterFragment.withNewEngine()\n    .initialRoute(\"myInitialRoute/\")\n    .build()\n```\n\n----------------------------------------\n\nTITLE: Large Text within Center Widget in Flutter\nDESCRIPTION: This example uses a Center widget that contains Text too large to fit on the screen. The Text wraps to the next line to fit within the available space, without being scaled.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/layout/constraints.md#_snippet_51\n\nLANGUAGE: dart\nCODE:\n```\nconst Center(\n  child: Text(\n    'This is some very very very large text that is too big to fit a regular screen in a single line.',\n  ),\n)\n```\n\n----------------------------------------\n\nTITLE: Corrected addAllowedPointer Override (After Migration) - Dart\nDESCRIPTION: This code snippet shows the correct way to override the `addAllowedPointer` method after the migration. It uses `PointerDownEvent` as the parameter type, which is now required by the superclass.  This resolves the type error and ensures that the code compiles and runs correctly.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/gesture-recognizer-add-allowed-pointer.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nclass CustomGestureRecognizer extends ScaleGestureRecognizer {\n  @override\n  void addAllowedPointer(PointerDownEvent event) {\n    // insert custom handling of event here...\n    super.addAllowedPointer(event);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Override paintChildren to Calculate Position (Dart)\nDESCRIPTION: This snippet overrides the `paintChildren` method to calculate the pixel position of a list item within its ancestor `Scrollable`. This is the first step in calculating the parallax effect.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/effects/parallax-scrolling.md#_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\n@override\nvoid paintChildren(FlowPaintingContext context) {\n  // Calculate the position of this list item within the viewport.\n  final scrollableBox = scrollable.context.findRenderObject() as RenderBox;\n  final listItemBox = listItemContext.findRenderObject() as RenderBox;\n  final listItemOffset = listItemBox.localToGlobal(\n    listItemBox.size.centerLeft(Offset.zero),\n    ancestor: scrollableBox,\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Create a Column layout - Dart\nDESCRIPTION: This Flutter code creates a `Column` widget to display child widgets vertically. The `mainAxisAlignment` property is set to `MainAxisAlignment.center` to center the children within the column.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/xamarin-forms-devs.md#_snippet_37\n\nLANGUAGE: dart\nCODE:\n```\n@override\nWidget build(BuildContext context) {\n  return const Column(\n    mainAxisAlignment: MainAxisAlignment.center,\n    children: <Widget>[\n      Text('Column One'),\n      Text('Column Two'),\n      Text('Column Three'),\n      Text('Column Four'),\n    ],\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Navigating to Flutter Project Directory\nDESCRIPTION: This command changes the current working directory to the newly created Flutter project directory. This allows subsequent commands to be executed within the context of the project. $PROJECT represents the relative path to the example project directory.\nSOURCE: https://github.com/flutter/website/blob/main/examples/state_mgmt/simple/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncd $PROJECT\n```\n\n----------------------------------------\n\nTITLE: Test Universal Link on Simulator\nDESCRIPTION: Tests the universal link on the iOS Simulator using the `xcrun simctl openurl` command. Replace `https://<web domain>/details` with the actual URL to test. This command simulates opening the URL in the simulator, triggering the universal link.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/navigation/set-up-universal-links.md#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ xcrun simctl openurl booted https://<web domain>/details\n```\n\n----------------------------------------\n\nTITLE: Removing Deprecated 'serviceWorkerVersion' Variable - HTML\nDESCRIPTION: This snippet demonstrates the line that needs to be removed from the `web/index.html` file to resolve the deprecation warning related to `serviceWorkerVersion`. Removing this line prevents the warning and ensures compatibility with newer versions of Flutter.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/platform-integration/web/initialization.md#_snippet_5\n\nLANGUAGE: HTML\nCODE:\n```\nvar serviceWorkerVersion = null;\n```\n\n----------------------------------------\n\nTITLE: Referencing Image Assets in Flutter\nDESCRIPTION: This Flutter code shows how to reference an image asset using the `Image.asset` constructor. The code assumes that the image file 'assets/background.png' is properly declared in the `pubspec.yaml` file.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/react-native-devs.md#_snippet_15\n\nLANGUAGE: Dart\nCODE:\n```\nImage.asset('assets/background.png');\n```\n\n----------------------------------------\n\nTITLE: Leak-Prone Closure Example\nDESCRIPTION: This Dart code demonstrates a memory leak scenario with closures. A reference to a short-lived `myHugeObject` is implicitly stored in the closure's context and passed to `setHandler`, preventing it from being garbage collected as long as `handler` is reachable.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/tools/devtools/memory.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\n  final handler = () => print(myHugeObject.name);\n  setHandler(handler);\n```\n\n----------------------------------------\n\nTITLE: Unit Testing with Mock HTTP Client in Flutter\nDESCRIPTION: Demonstrates how to write unit tests for the `fetchAlbum` function using a mock HTTP client. It uses Mockito's `when` function to define the behavior of the mock client, returning different responses for success and failure scenarios. The tests assert that the function returns an `Album` object on success and throws an exception on failure.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/testing/unit/mocking.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter_test/flutter_test.dart';\nimport 'package:http/http.dart' as http;\nimport 'package:mocking/main.dart';\nimport 'package:mockito/annotations.dart';\nimport 'package:mockito/mockito.dart';\n\nimport 'fetch_album_test.mocks.dart';\n\n// Generate a MockClient using the Mockito package.\n// Create new instances of this class in each test.\n@GenerateMocks([http.Client])\nvoid main() {\n  group('fetchAlbum', () {\n    test('returns an Album if the http call completes successfully', () async {\n      final client = MockClient();\n\n      // Use Mockito to return a successful response when it calls the\n      // provided http.Client.\n      when(\n        client.get(Uri.parse('https://jsonplaceholder.typicode.com/albums/1')),\n      ).thenAnswer(\n        (_) async =>\n            http.Response('{\"userId\": 1, \"id\": 2, \"title\": \"mock\"}', 200),\n      );\n\n      expect(await fetchAlbum(client), isA<Album>());\n    });\n\n    test('throws an exception if the http call completes with an error', () {\n      final client = MockClient();\n\n      // Use Mockito to return an unsuccessful response when it calls the\n      // provided http.Client.\n      when(\n        client.get(Uri.parse('https://jsonplaceholder.typicode.com/albums/1')),\n      ).thenAnswer((_) async => http.Response('Not Found', 404));\n\n      expect(fetchAlbum(client), throwsException);\n    });\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing Robolectric Test API (After Migration) - Java\nDESCRIPTION: This code snippet shows the new way of setting up Robolectric tests in Flutter, using `FlutterInjector`. This replaces the deprecated `FlutterMain.setIsRunningInRobolectricTest()` API. It mocks `FlutterJNI` and sets it in the injector.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/android-setIsRunningInRobolectricTest-removed.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nFlutterJNI mockFlutterJNI = mock(FlutterJNI.class);\nFlutterInjector.setInstance(\n        new FlutterInjector.Builder()\n            .setFlutterLoader(new FlutterLoader(mockFlutterJNI))\n            .build());\n```\n\n----------------------------------------\n\nTITLE: CupertinoTextField without maxLength (Dart)\nDESCRIPTION: Shows how to remove `maxLength` and `maxLengthEnforced` to achieve the desired behavior in `CupertinoTextField` after the migration.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/use-maxLengthEnforcement-instead-of-maxLengthEnforced.md#_snippet_6\n\nLANGUAGE: Dart\nCODE:\n```\nCupertinoTextField()\n```\n\n----------------------------------------\n\nTITLE: Shared iOS and macOS implementations\nDESCRIPTION: This YAML snippet configures a Flutter plugin to share the same codebase for both iOS and macOS. The `sharedDarwinSource` option, when set to true, enables a single `darwin` directory for code and resources.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/packages-and-plugins/developing-packages.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nflutter:\n  plugin:\n    platforms:\n      ios:\n        pluginClass: HelloPlugin\n        sharedDarwinSource: true\n      macos:\n        pluginClass: HelloPlugin\n        sharedDarwinSource: true\n\nenvironment:\n  sdk: ^3.0.0\n  # Flutter versions prior to 3.7 did not support the\n  # sharedDarwinSource option.\n  flutter: \">=3.7.0\"\n```\n\n----------------------------------------\n\nTITLE: Updating Supported Platforms in Package.swift\nDESCRIPTION: This snippet demonstrates how to specify the supported platforms in the `Package.swift` file, which include iOS and macOS.  It allows developers to configure the plugin to support either iOS, macOS, or both.\nSOURCE: https://github.com/flutter/website/blob/main/src/_includes/docs/swift-package-manager/migrate-objective-c-plugin.md#_snippet_1\n\nLANGUAGE: Swift\nCODE:\n```\nplatforms: [\n    // TODO: Update the platforms your plugin supports.\n    // If your plugin only supports iOS, remove `.macOS(...)`.\n    // If your plugin only supports macOS, remove `.iOS(...)`.\n    [!.iOS(\"12.0\"),!]\n    [!.macOS(\"10.14\")!]\n],\n```\n\n----------------------------------------\n\nTITLE: Invoking an Action with Actions.maybeInvoke in Dart\nDESCRIPTION: This snippet demonstrates how to invoke an action directly using `Actions.maybeInvoke`. It attempts to find and invoke the action associated with the `SelectAllIntent` in the given `BuildContext`. If the action is found and enabled, it is invoked; otherwise, nothing happens, and null is returned. An Actions widget must exist in the context.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/interactivity/actions-and-shortcuts.md#_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nObject? result = Actions.maybeInvoke<SelectAllIntent>(\n  context,\n  const SelectAllIntent(),\n);\n```\n\n----------------------------------------\n\nTITLE: Handling view model changes and clearing error state\nDESCRIPTION: This snippet shows how to handle changes in the view model, specifically to check for errors and display a `SnackBar`. It's crucial to clear the error state after handling the error to prevent the action from being triggered repeatedly.  Requires Flutter SDK.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/app-architecture/design-patterns/command.md#_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nvoid _onViewModelChanged() {\n  if (widget.viewModel.error != null) {\n    widget.viewModel.clearError();\n    // Show Snackbar\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating Scaffold resizeToAvoidBottomPadding to resizeToAvoidBottomInset - Dart\nDESCRIPTION: Demonstrates how to migrate from the deprecated `resizeToAvoidBottomPadding` parameter of `Scaffold` to the `resizeToAvoidBottomInset` parameter. This involves replacing `resizeToAvoidBottomPadding` with `resizeToAvoidBottomInset`.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/1-22-deprecations.md#_snippet_6\n\nLANGUAGE: Dart\nCODE:\n```\nScaffold(resizeToAvoidBottomPadding: true);\n```\n\nLANGUAGE: Dart\nCODE:\n```\nScaffold(resizeToAvoidBottomInset: true);\n```\n\n----------------------------------------\n\nTITLE: Displaying a ListView in Flutter\nDESCRIPTION: This snippet demonstrates how to create a basic `ListView` in Flutter. It shows how to dynamically generate a list of `Text` widgets and display them in a scrollable view.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/uikit-devs.md#_snippet_17\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\n\nvoid main() {\n  runApp(const SampleApp());\n}\n\nclass SampleApp extends StatelessWidget {\n  const SampleApp({super.key});\n\n  // This widget is the root of your application.\n  @override\n  Widget build(BuildContext context) {\n    return const MaterialApp(title: 'Sample App', home: SampleAppPage());\n  }\n}\n\nclass SampleAppPage extends StatefulWidget {\n  const SampleAppPage({super.key});\n\n  @override\n  State<SampleAppPage> createState() => _SampleAppPageState();\n}\n\nclass _SampleAppPageState extends State<SampleAppPage> {\n  List<Widget> _getListData() {\n    final List<Widget> widgets = [];\n    for (int i = 0; i < 100; i++) {\n      widgets.add(\n        Padding(padding: const EdgeInsets.all(10), child: Text('Row $i')),\n      );\n    }\n    return widgets;\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: const Text('Sample App')),\n      body: ListView(children: _getListData()),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Impeller during debugging on macOS\nDESCRIPTION: This command line instruction demonstrates how to enable Impeller when debugging a Flutter application on macOS using the `flutter run` command. This is achieved by including the `--enable-impeller` flag.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/perf/impeller.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nflutter run --enable-impeller\n```\n\n----------------------------------------\n\nTITLE: Implicit Animation Containers DartPad Example (Dart)\nDESCRIPTION: This code provides a basic example of using `AnimatedContainer` in Flutter to create implicit animations. It defines a `StatefulWidget` called `AnimatedContainerDemo` that displays a container with randomly generated color, border radius, and margin.  The color, borderRadius, and margin are initialized in initState and are expected to be updated on button press (though the onPressed function is currently empty).  The initial state is randomized upon app initialization.\nSOURCE: https://github.com/flutter/website/blob/main/src/_includes/docs/implicit-animations/shape-shifting-starter-code.md#_snippet_0\n\nLANGUAGE: Dart\nCODE:\n```\n// Copyright 2019 the Dart project authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license\n// that can be found in the LICENSE file.\n\nimport 'dart:math';\n\nimport 'package:flutter/material.dart';\n\ndouble randomBorderRadius() {\n  return Random().nextDouble() * 64;\n}\n\ndouble randomMargin() {\n  return Random().nextDouble() * 64;\n}\n\nColor randomColor() {\n  return Color(0xFFFFFFFF & Random().nextInt(0xFFFFFFFF));\n}\n\nclass AnimatedContainerDemo extends StatefulWidget {\n  const AnimatedContainerDemo({super.key});\n\n  @override\n  State<AnimatedContainerDemo> createState() => _AnimatedContainerDemoState();\n}\n\nclass _AnimatedContainerDemoState extends State<AnimatedContainerDemo> {\n  late Color color;\n  late double borderRadius;\n  late double margin;\n\n  @override\n  void initState() {\n    super.initState();\n    color = randomColor();\n    borderRadius = randomBorderRadius();\n    margin = randomMargin();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: Center(\n        child: Column(\n          children: <Widget>[\n            SizedBox(\n              width: 128,\n              height: 128,\n              child: Container(\n                margin: EdgeInsets.all(margin),\n                decoration: BoxDecoration(\n                  color: color,\n                  borderRadius: BorderRadius.circular(borderRadius),\n                ),\n              ),\n            ),\n            ElevatedButton(\n              child: const Text('Change'),\n              onPressed: () => {},\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n}\n\nclass MyApp extends StatelessWidget {\n  const MyApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return const MaterialApp(\n      debugShowCheckedModeBanner: false,\n      home: AnimatedContainerDemo(),\n    );\n  }\n}\n\nvoid main() {\n  runApp(\n    const MyApp(),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Launch FlutterActivity with Custom Route (Jetpack Compose)\nDESCRIPTION: This Kotlin code snippet shows how to launch a `FlutterActivity` with a specified initial route using Jetpack Compose. It uses `withNewEngine()` and `initialRoute()` to configure the `FlutterActivity` before launching it with `startActivity`.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/add-to-app/android/add-flutter-screen.md#_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nMyButton(onClick = {\n  startActivity(\n    FlutterActivity\n      .withNewEngine()\n      .initialRoute(\"/my_route\")\n      .build(this)\n  )\n})\n\n@Composable\nfun MyButton(onClick: () -> Unit) {\n    Button(onClick = onClick) {\n        Text(\"Launch Flutter!\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Full Example with Isolates and UI Updates in Flutter\nDESCRIPTION: This is a complete Flutter example demonstrating the use of Isolates for background tasks, network requests using the `http` package, and UI updates using `setState`. It includes the necessary imports, widget definitions, and logic to display data fetched from a remote URL in a ListView, along with a loading indicator.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/xamarin-forms-devs.md#_snippet_25\n\nLANGUAGE: dart\nCODE:\n```\nimport 'dart:async';\nimport 'dart:convert';\nimport 'dart:isolate';\n\nimport 'package:flutter/material.dart';\nimport 'package:http/http.dart' as http;\n\nvoid main() {\n  runApp(const SampleApp());\n}\n\nclass SampleApp extends StatelessWidget {\n  const SampleApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return const MaterialApp(title: 'Sample App', home: SampleAppPage());\n  }\n}\n\nclass SampleAppPage extends StatefulWidget {\n  const SampleAppPage({super.key});\n\n  @override\n  State<SampleAppPage> createState() => _SampleAppPageState();\n}\n\nclass _SampleAppPageState extends State<SampleAppPage> {\n  List<Map<String, Object?>> data = [];\n\n  @override\n  void initState() {\n    super.initState();\n    loadData();\n  }\n\n  bool get showLoadingDialog => data.isEmpty;\n\n  Future<void> loadData() async {\n    final ReceivePort receivePort = ReceivePort();\n    await Isolate.spawn(dataLoader, receivePort.sendPort);\n\n    // The 'echo' isolate sends its SendPort as the first message\n    final SendPort sendPort = await receivePort.first as SendPort;\n    final List<Map<String, dynamic>> msg = await sendReceive(\n      sendPort,\n      'https://jsonplaceholder.typicode.com/posts',\n    );\n    setState(() {\n      data = msg;\n    });\n  }\n\n  // The entry point for the isolate\n  static Future<void> dataLoader(SendPort sendPort) async {\n    // Open the ReceivePort for incoming messages.\n    final ReceivePort port = ReceivePort();\n\n    // Notify any other isolates what port this isolate listens to.\n    sendPort.send(port.sendPort);\n    await for (final dynamic msg in port) {\n      final String url = msg[0] as String;\n      final SendPort replyTo = msg[1] as SendPort;\n\n      final Uri dataURL = Uri.parse(url);\n      final http.Response response = await http.get(dataURL);\n      // Lots of JSON to parse\n      replyTo.send(jsonDecode(response.body) as List<Map<String, dynamic>>);\n    }\n  }\n\n  Future<List<Map<String, dynamic>>> sendReceive(SendPort port, String msg) {\n    final ReceivePort response = ReceivePort();\n    port.send(<dynamic>[msg, response.sendPort]);\n    return response.first as Future<List<Map<String, dynamic>>>;\n  }\n\n  Widget getBody() {\n    if (showLoadingDialog) {\n      return getProgressDialog();\n    }\n    return getListView();\n  }\n\n  Widget getProgressDialog() {\n    return const Center(child: CircularProgressIndicator());\n  }\n\n  ListView getListView() {\n    return ListView.builder(\n      itemCount: data.length,\n      itemBuilder: (context, index) {\n        return getRow(index);\n      },\n    );\n  }\n\n  Widget getRow(int index) {\n    return Padding(\n      padding: const EdgeInsets.all(10),\n      child: Text('Row ${data[index]['title']}'),\n    );\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: const Text('Sample App')),\n      body: getBody(),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Hit Testing RenderEditable Without Layout - Dart\nDESCRIPTION: This code snippet demonstrates the scenario that causes the assertion error.  It creates a RenderEditable object, attaches it to a PipelineOwner, and then attempts to handle a PointerDownEvent before calling `layout`. This triggers the '!debugNeedsLayout': is not true assertion.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/rendereditable-layout-before-hit-test.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/rendering.dart';\nimport 'package:flutter_test/flutter_test.dart';\nimport 'package:flutter/material.dart';\n\nvoid main() {\n  test('attach and detach correctly handle gesture', () {\n    final RenderEditable editable = RenderEditable(\n      textDirection: TextDirection.ltr,\n      offset: ViewportOffset.zero(),\n      textSelectionDelegate: FakeEditableTextState(),\n      startHandleLayerLink: LayerLink(),\n      endHandleLayerLink: LayerLink(),\n    );\n    final PipelineOwner owner = PipelineOwner(onNeedVisualUpdate: () {});\n    editable.attach(owner);\n    // This throws an assertion error because\n    // the RenderEditable hasn't been laid out.\n    editable.handleEvent(const PointerDownEvent(),\n        BoxHitTestEntry(editable, const Offset(10, 10)));\n    editable.detach();\n  });\n}\n\nclass FakeEditableTextState extends TextSelectionDelegate {\n  @override\n  TextEditingValue textEditingValue;\n  @override\n  void hideToolbar() {}\n  @override\n  void bringIntoView(TextPosition position) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Install pods after modifying Podfile (Bash)\nDESCRIPTION: This snippet is a command-line instruction to navigate to the iOS directory and install the pods using CocoaPods. It should be executed after modifying the Podfile to include the App Clip target.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/platform-integration/ios/ios-app-clip.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd ios\npod install\n```\n\n----------------------------------------\n\nTITLE: Register ExtractArgumentsScreen route in MaterialApp in Dart\nDESCRIPTION: Registers the `ExtractArgumentsScreen` in the `MaterialApp`'s `routes` table, associating the `ExtractArgumentsScreen.routeName` with the widget. The routes table maps route names to the corresponding widget builders.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/navigation/navigate-with-arguments.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nMaterialApp(\n  routes: {\n    ExtractArgumentsScreen.routeName:\n        (context) => const ExtractArgumentsScreen(),\n  },\n)\n```\n\n----------------------------------------\n\nTITLE: Swift Code After Migration\nDESCRIPTION: Swift code demonstrating how to properly handle the nullable `splashScreenView` property by declaring it as an optional `UIView?`.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/ios-flutterviewcontroller-splashscreenview-nullable.md#_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nvar splashScreenView : UIView? = UIView()\nvar flutterEngine = FlutterEngine(name: \"my flutter engine\")\nlet flutterViewController = FlutterViewController(engine: flutterEngine, nibName: nil, bundle: nil)\nlet splashScreenView = flutterViewController.splashScreenView // compiles successfully\nif let splashScreenView = splashScreenView {\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Localized Strings After Migration (Dart)\nDESCRIPTION: This code snippet shows how to access the reorderItemToStart localized string from WidgetsLocalizations after the migration. It uses the WidgetsLocalizations.of(context) method to retrieve the string.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/material-localized-strings.md#_snippet_1\n\nLANGUAGE: Dart\nCODE:\n```\nWidgetsLocalizations.of(context).reorderItemToStart;\n```\n\n----------------------------------------\n\nTITLE: Scaffold with SizedBox.expand\nDESCRIPTION: Shows how to make the Scaffold's child take up the entire available space using SizedBox.expand. Wrapping the child with SizedBox.expand ensures that the child widget, in this case, the Container, occupies the full dimensions of the Scaffold.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/layout/constraints.md#_snippet_59\n\nLANGUAGE: dart\nCODE:\n```\nScaffold(\n  body: SizedBox.expand(\n    child: Container(\n      color: blue,\n      child: const Column(children: [Text('Hello!'), Text('Goodbye!')]),\n    ),\n  ),\n)\n```\n\n----------------------------------------\n\nTITLE: Non-endorsed federated plugin dependency\nDESCRIPTION: This YAML snippet shows how to manually add a non-endorsed plugin implementation to the `pubspec.yaml` file. This allows a developer to use a plugin implementation that is not endorsed by the original plugin author.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/packages-and-plugins/developing-packages.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  foobar: ^1.0.0\n  foobar_windows: ^1.0.0 # Non-endorsed plugin implementation\n```\n\n----------------------------------------\n\nTITLE: Gradle Dependency with API Differences (Groovy)\nDESCRIPTION: This code shows a different Gradle dependency declaration, where the existing app uses a newer, incompatible version of Crashlytics. This snippet highlights a potential issue where major API differences between versions can cause problems. The version specified is `17.0.0-beta03`, and its incompatibility with older versions is a key point.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/add-to-app/android/plugin-setup.md#_snippet_3\n\nLANGUAGE: groovy\nCODE:\n```\n…\ndependencies {\n    …\n    implementation(\"com.google.firebase:firebase-crashlytics:17.0.0-beta03\")\n    …\n}\n…\n```\n\n----------------------------------------\n\nTITLE: Flutter Text Input Retrieval Example\nDESCRIPTION: This DartPad example showcases a complete Flutter application that demonstrates how to retrieve text from a TextField using a TextEditingController. It includes setting up the MaterialApp, defining a StatefulWidget, creating and disposing of the controller, connecting it to the TextField, and displaying the input value in an AlertDialog.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/forms/retrieve-input.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\n\nvoid main() => runApp(const MyApp());\n\nclass MyApp extends StatelessWidget {\n  const MyApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return const MaterialApp(\n      title: 'Retrieve Text Input',\n      home: MyCustomForm(),\n    );\n  }\n}\n\n// Define a custom Form widget.\nclass MyCustomForm extends StatefulWidget {\n  const MyCustomForm({super.key});\n\n  @override\n  State<MyCustomForm> createState() => _MyCustomFormState();\n}\n\n// Define a corresponding State class.\n// This class holds the data related to the Form.\nclass _MyCustomFormState extends State<MyCustomForm> {\n  // Create a text controller and use it to retrieve the current value\n  // of the TextField.\n  final myController = TextEditingController();\n\n  @override\n  void dispose() {\n    // Clean up the controller when the widget is disposed.\n    myController.dispose();\n    super.dispose();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: const Text('Retrieve Text Input')),\n      body: Padding(\n        padding: const EdgeInsets.all(16),\n        child: TextField(controller: myController),\n      ),\n      floatingActionButton: FloatingActionButton(\n        // When the user presses the button, show an alert dialog containing\n        // the text that the user has entered into the text field.\n        onPressed: () {\n          showDialog(\n            context: context,\n            builder: (context) {\n              return AlertDialog(\n                // Retrieve the text the that user has entered by using the\n                // TextEditingController.\n                content: Text(myController.text),\n              );\n            },\n          );\n        },\n        tooltip: 'Show me the value!',\n        child: const Icon(Icons.text_fields),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating from ARGB Constructor to Floating-Point\nDESCRIPTION: This code snippet demonstrates how to migrate from the old `Color.fromARGB` constructor using 8-bit integers to the new `Color.from` constructor using normalized floating-point values. This ensures that the app can take advantage of Display P3 colors and other wide gamut color spaces. It showcases the construction of a magenta color using both methods.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/wide-gamut-framework.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n// Before: Constructing an sRGB color from the lower 8 bits of four integers.\nfinal magenta = Color.fromARGB(0xff, 0xff, 0x0, 0xff);\n\n// After: Constructing a color with normalized floating-point components.\nfinal magenta = Color.from(alpha: 1.0, red: 1.0, green: 0.0, blue: 1.0);\n```\n\n----------------------------------------\n\nTITLE: Applying Vertical Linear Gradient - Dart\nDESCRIPTION: This Dart code snippet applies a vertical linear gradient to a Container's background using BoxDecoration and LinearGradient. The gradient transitions from a shade of red to transparent.  Alignment.topCenter and Alignment(0.0, 0.6) define the start and end points of the gradient.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/web-devs.md#_snippet_16\n\nLANGUAGE: dart\nCODE:\n```\nfinal container = Container(\n  // grey box\n  width: 320,\n  height: 240,\n  color: Colors.grey[300],\n  child: Center(\n    child: Container(\n      // red box\n      decoration: const BoxDecoration(\n        gradient: LinearGradient(\n          begin: Alignment.topCenter,\n          end: Alignment(0.0, 0.6),\n          colors: <Color>[\n            Color(0xffef5350),\n            Color(0x00ef5350),\n          ],\n        ),\n      ),\n      padding: const EdgeInsets.all(16),\n      child: Text(\n        'Lorem ipsum',\n        style: bold24Roboto,\n      ),\n    ),\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing a Switch in Flutter\nDESCRIPTION: This code snippet shows how to create a Switch widget in Flutter to toggle a boolean value. It sets the value (light), activeColor, and onChanged callback. The onChanged callback updates the light value when the switch is toggled, and it updates the UI using setState.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/fundamentals/user-input.md#_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nbool light = true;\n\n@override\nWidget build(BuildContext context) {\n  return Switch(\n    // This bool value toggles the switch.\n    value: light,\n    activeColor: Colors.red,\n    onChanged: (bool value) {\n      // This is called when the user toggles the switch.\n      setState(() {\n        light = value;\n      });\n    },\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Declarative UI Definition in Dart (Flutter)\nDESCRIPTION: This Dart (Flutter) code snippet illustrates a declarative UI definition. It constructs a `ViewB` widget with specified color and a child `ViewC` widget. Instead of mutating existing UI elements, Flutter rebuilds the UI based on the new widget configuration, handling the transition between states automatically.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/declarative.md#_snippet_1\n\nLANGUAGE: Dart\nCODE:\n```\n// Declarative style\nreturn ViewB(color: red, child: const ViewC());\n```\n\n----------------------------------------\n\nTITLE: Implementing FlutterAppLifeCycleProvider in Objective-C (Implementation)\nDESCRIPTION: This Objective-C implementation file provides the logic for the `AppDelegate` class, including initializing the `FlutterEngine`, registering plugins, and delegating application lifecycle events to a `FlutterPluginAppLifeCycleDelegate`. This ensures proper handling of Flutter events when the app delegate cannot directly inherit from `FlutterAppDelegate`.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/add-to-app/ios/add-flutter-screen.md#_snippet_13\n\nLANGUAGE: Objective-C\nCODE:\n```\n@interface AppDelegate ()\n@property (nonatomic, strong) FlutterPluginAppLifeCycleDelegate* lifeCycleDelegate;\n@end\n\n@implementation AppDelegate\n\n- (instancetype)init {\n    if (self = [super init]) {\n        _lifeCycleDelegate = [[FlutterPluginAppLifeCycleDelegate alloc] init];\n    }\n    return self;\n}\n\n- (BOOL)application:(UIApplication*)application\ndidFinishLaunchingWithOptions:(NSDictionary<UIApplicationLaunchOptionsKey, id>*))launchOptions {\n    self.flutterEngine = [[FlutterEngine alloc] initWithName:@\"io.flutter\" project:nil];\n    [self.flutterEngine runWithEntrypoint:nil];\n    [GeneratedPluginRegistrant registerWithRegistry:self.flutterEngine];\n    return [_lifeCycleDelegate application:application didFinishLaunchingWithOptions:launchOptions];\n}\n\n// Returns the key window's rootViewController, if it's a FlutterViewController.\n// Otherwise, returns nil.\n- (FlutterViewController*)rootFlutterViewController {\n    UIViewController* viewController = [UIApplication sharedApplication].keyWindow.rootViewController;\n    if ([viewController isKindOfClass:[FlutterViewController class]]) {\n        return (FlutterViewController*)viewController;\n    }\n    return nil;\n}\n\n- (void)application:(UIApplication*)application\ndidRegisterUserNotificationSettings:(UIUserNotificationSettings*)notificationSettings {\n    [_lifeCycleDelegate application:application\ndidRegisterUserNotificationSettings:notificationSettings];\n}\n\n- (void)application:(UIApplication*)application\ndidRegisterForRemoteNotificationsWithDeviceToken:(NSData*)deviceToken {\n    [_lifeCycleDelegate application:application\ndidRegisterForRemoteNotificationsWithDeviceToken:deviceToken];\n}\n\n- (void)application:(UIApplication*)application\ndidReceiveRemoteNotification:(NSDictionary*)userInfo\nfetchCompletionHandler:(void (^)(UIBackgroundFetchResult result))completionHandler {\n    [_lifeCycleDelegate application:application\n       didReceiveRemoteNotification:userInfo\n             fetchCompletionHandler:completionHandler];\n}\n\n- (BOOL)application:(UIApplication*)application\n            openURL:(NSURL*)url\n            options:(NSDictionary<UIApplicationOpenURLOptionsKey, id>*)options {\n    return [_lifeCycleDelegate application:application openURL:url options:options];\n}\n\n- (BOOL)application:(UIApplication*)application handleOpenURL:(NSURL*)url {\n    return [_lifeCycleDelegate application:application handleOpenURL:url];\n}\n\n- (BOOL)application:(UIApplication*)application\n            openURL:(NSURL*)url\n  sourceApplication:(NSString*)sourceApplication\n         annotation:(id)annotation {\n    return [_lifeCycleDelegate application:application\n                                   openURL:url\n                         sourceApplication:sourceApplication\n                                annotation:annotation];\n}\n\n- (void)application:(UIApplication*)application\nperformActionForShortcutItem:(UIApplicationShortcutItem*)shortcutItem\n  completionHandler:(void (^)(BOOL succeeded))completionHandler {\n    [_lifeCycleDelegate application:application\n       performActionForShortcutItem:shortcutItem\n                  completionHandler:completionHandler];\n}\n\n- (void)application:(UIApplication*)application\nhandleEventsForBackgroundURLSession:(nonnull NSString*)identifier\n  completionHandler:(nonnull void (^)(void))completionHandler {\n    [_lifeCycleDelegate application:application\nhandleEventsForBackgroundURLSession:identifier\n                  completionHandler:completionHandler];\n}\n\n- (void)application:(UIApplication*)application\nperformFetchWithCompletionHandler:(void (^)(UIBackgroundFetchResult result))completionHandler {\n    [_lifeCycleDelegate application:application performFetchWithCompletionHandler:completionHandler];\n}\n\n- (void)addApplicationLifeCycleDelegate:(NSObject<FlutterPlugin>*)delegate {\n    [_lifeCycleDelegate addDelegate:delegate];\n}\n@end\n```\n\n----------------------------------------\n\nTITLE: FadeTransition Animation in Flutter\nDESCRIPTION: This snippet demonstrates how to create a FadeTransition animation in Flutter. It uses an AnimationController and a CurvedAnimation to fade a FlutterLogo in and out when a FloatingActionButton is pressed. Requires the flutter/material package.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/uikit-devs.md#_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\n\nclass SampleApp extends StatelessWidget {\n  // This widget is the root of your application.\n  const SampleApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return const MaterialApp(\n      title: 'Fade Demo',\n      home: MyFadeTest(title: 'Fade Demo'),\n    );\n  }\n}\n\nclass MyFadeTest extends StatefulWidget {\n  const MyFadeTest({super.key, required this.title});\n\n  final String title;\n\n  @override\n  State<MyFadeTest> createState() => _MyFadeTest();\n}\n\nclass _MyFadeTest extends State<MyFadeTest>\n    with SingleTickerProviderStateMixin {\n  late AnimationController controller;\n  late CurvedAnimation curve;\n\n  @override\n  void initState() {\n    super.initState();\n    controller = AnimationController(\n      duration: const Duration(milliseconds: 2000),\n      vsync: this,\n    );\n    curve = CurvedAnimation(parent: controller, curve: Curves.easeIn);\n  }\n\n  @override\n  void dispose() {\n    controller.dispose();\n    super.dispose();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: Text(widget.title)),\n      body: Center(\n        child: FadeTransition(\n          opacity: curve,\n          child: const FlutterLogo(size: 100),\n        ),\n      ),\n      floatingActionButton: FloatingActionButton(\n        onPressed: () {\n          controller.forward();\n        },\n        tooltip: 'Fade',\n        child: const Icon(Icons.brush),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Building AppBar for HomeScreen in Flutter\nDESCRIPTION: Defines the _buildAppBar method for the HomeScreen widget, creating a simple AppBar with a 'Welcome' title and a settings icon button.  Pressing the settings button navigates to the settings route using Navigator.pushNamed.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/effects/nested-nav.md#_snippet_12\n\nLANGUAGE: Dart\nCODE:\n```\nPreferredSizeWidget _buildAppBar(BuildContext context) {\n  return AppBar(\n    title: const Text('Welcome'),\n    actions: [\n      IconButton(\n        icon: const Icon(Icons.settings),\n        onPressed: () {\n          Navigator.pushNamed(context, routeSettings);\n        },\n      ),\n    ],\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Returning Data from a Route in Flutter (pop)\nDESCRIPTION: This Dart code demonstrates how to return data from a route using Navigator.pop. The pop method is called with a map containing latitude and longitude values, which are then passed back to the calling route.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/android-devs.md#_snippet_14\n\nLANGUAGE: dart\nCODE:\n```\nNavigator.of(context).pop({'lat': 43.821757, 'long': -79.226392});\n```\n\n----------------------------------------\n\nTITLE: Basic Custom Flutter Bootstrap Script (JS)\nDESCRIPTION: This snippet shows the most basic `flutter_bootstrap.js` file, including the necessary tokens for `flutter_js` and `flutter_build_config`, and a call to `_flutter.loader.load()` to start the Flutter app. This file needs to be placed in the `web` subdirectory of your project to override the default script.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/platform-integration/web/initialization.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n{% raw %}{{flutter_js}}{% endraw %}\n{% raw %}{{flutter_build_config}}{% endraw %}\n\n_flutter.loader.load();\n```\n\n----------------------------------------\n\nTITLE: Run Dart Doc (macOS/Linux)\nDESCRIPTION: This console command executes the `dart doc` tool, which is part of the Flutter SDK, on macOS or Linux, to generate API documentation for a Dart package.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/packages-and-plugins/developing-packages.md#_snippet_27\n\nLANGUAGE: console\nCODE:\n```\n   \\$FLUTTER_ROOT/bin/cache/dart-sdk/bin/dart doc   # on macOS or Linux\n```\n\n----------------------------------------\n\nTITLE: Migrating scaledFontSize Calculation Dart\nDESCRIPTION: Explains how to compute the scaled font size using `TextScaler.scale` instead of the `*` operator.  It highlights the use of the `scale` method for applying the text scaling strategy to font sizes.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/deprecate-textscalefactor.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nfinal scaledFontSize = textStyle.fontSize * MediaQuery.textScaleFactorOf(context);\n```\n\nLANGUAGE: dart\nCODE:\n```\nfinal scaledFontSize = MediaQuery.textScalerOf(context).scale(textStyle.fontSize);\n```\n\n----------------------------------------\n\nTITLE: Checking Git Version (Terminal)\nDESCRIPTION: This command is used to check if Git is installed on the system and to display the installed Git version in the terminal.\nSOURCE: https://github.com/flutter/website/blob/main/src/_includes/docs/install/reqs/macos/software.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit version\n```\n\n----------------------------------------\n\nTITLE: Launch FlutterActivity with Cached Engine (Java)\nDESCRIPTION: This Java code snippet demonstrates how to launch a `FlutterActivity` using a pre-warmed, cached `FlutterEngine`. It uses `withCachedEngine()` to specify the ID of the cached `FlutterEngine` before launching the `FlutterActivity`.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/add-to-app/android/add-flutter-screen.md#_snippet_10\n\nLANGUAGE: java\nCODE:\n```\nmyButton.addOnClickListener(new OnClickListener() {\n  @Override\n  public void onClick(View v) {\n    startActivity(\n      FlutterActivity\n        .withCachedEngine(\"my_engine_id\")\n        .build(currentActivity)\n      );\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Using Bundled Font in Compose (Kotlin)\nDESCRIPTION: This snippet demonstrates how to use a bundled font file in Compose. It creates a `FontFamily` object using the font file located in the resources and then uses this `FontFamily` in a `Text` composable.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/compose-devs.md#_snippet_25\n\nLANGUAGE: kotlin\nCODE:\n```\n// Font files bunded with app\nval firaSansFamily = FontFamily(\n   Font(R.font.firasans_regular, FontWeight.Normal),\n   // ...\n)\n\n// Usage\nText(text = \"Compose\", fontFamily = firaSansFamily, fontWeight = FontWeight.Normal)\n```\n\n----------------------------------------\n\nTITLE: Handling PointerScrollEvent and PointerPanZoom Events in Listener (Dart)\nDESCRIPTION: This snippet demonstrates how to use the `Listener` widget to capture and differentiate between `PointerScrollEvent` (mouse wheel) and `PointerPanZoom` events (trackpad scrolling) in Flutter.  It shows how to listen for `onPointerSignal`, `onPointerPanZoomStart`, `onPointerPanZoomUpdate`, and `onPointerPanZoomEnd` events. The `event` parameter provides data about the scroll or pan/zoom gesture.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/trackpad-gestures.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() => runApp(Foo());\n\nclass Foo extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return Listener(\n      onPointerSignal: (PointerSignalEvent event) {\n        if (event is PointerScrollEvent) {\n          debugPrint('mouse scrolled ${event.scrollDelta}');\n        }\n      },\n      onPointerPanZoomStart: (PointerPanZoomStartEvent event) {\n        debugPrint('trackpad scroll started');\n      },\n      onPointerPanZoomUpdate: (PointerPanZoomUpdateEvent event) {\n        debugPrint('trackpad scrolled ${event.panDelta}');\n      },\n      onPointerPanZoomEnd: (PointerPanZoomEndEvent event) {\n        debugPrint('trackpad scroll ended');\n      },\n      child: Container()\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Migrate InteractiveViewer.alignPanAxis to panAxis in Flutter\nDESCRIPTION: This snippet demonstrates how to migrate from the deprecated `alignPanAxis` property in `InteractiveViewer` to the new `panAxis` property, which uses the `PanAxis` enum for more control over panning behavior.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/3-19-deprecations.md#_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nInteractiveViewer(\n  alignPanAxis: true,\n);\n```\n\nLANGUAGE: dart\nCODE:\n```\nInteractiveViewer(\n  panAxis: PanAxis.aligned,\n);\n```\n\n----------------------------------------\n\nTITLE: Define Factory and Platform View Interfaces - Objective-C\nDESCRIPTION: This Objective-C code snippet defines the interfaces for `FLNativeViewFactory` and `FLNativeView`, which are essential for creating and managing native iOS views within a Flutter application. It declares the methods required for the factory and the view, including initialization and providing the view.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/platform-integration/ios/platform-views.md#_snippet_5\n\nLANGUAGE: Objective-C\nCODE:\n```\n#import <Flutter/Flutter.h>\n\n@interface FLNativeViewFactory : NSObject <FlutterPlatformViewFactory>\n- (instancetype)initWithMessenger:(NSObject<FlutterBinaryMessenger>*)messenger;\n@end\n\n@interface FLNativeView : NSObject <FlutterPlatformView>\n\n- (instancetype)initWithFrame:(CGRect)frame\n               viewIdentifier:(int64_t)viewId\n                    arguments:(id _Nullable)args\n              binaryMessenger:(NSObject<FlutterBinaryMessenger>*)messenger;\n\n- (UIView*)view;\n@end\n```\n\n----------------------------------------\n\nTITLE: Widget Hierarchy Example in Flutter\nDESCRIPTION: This code snippet demonstrates a basic widget hierarchy in Flutter, consisting of a Container, Row, Image, and Text widgets. It shows how widgets can be nested to create a simple UI layout.  The Container sets the background color, Row arranges the children horizontally, Image displays an image from a URL, and Text renders a string.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/resources/architectural-overview.md#_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nContainer(\n  color: Colors.blue,\n  child: Row(\n    children: [\n      Image.network('https://www.example.com/1.png'),\n      const Text('A'),\n    ],\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Build method for Texture Layer - Dart\nDESCRIPTION: This code snippet demonstrates the `build` method implementation for the Texture Layer Hybrid Composition approach using the `AndroidView` widget. The `viewType` is a unique identifier for the native view, and `creationParams` allows passing data to the native view.  It uses AndroidView to draw the platform views as textures.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/platform-integration/android/platform-views.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nWidget build(BuildContext context) {\n  // This is used in the platform side to register the view.\n  const String viewType = '<platform-view-type>';\n  // Pass parameters to the platform side.\n  final Map<String, dynamic> creationParams = <String, dynamic>{};\n\n  return AndroidView(\n    viewType: viewType,\n    layoutDirection: TextDirection.ltr,\n    creationParams: creationParams,\n    creationParamsCodec: const StandardMessageCodec(),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Import statements for Texture Layer - Dart\nDESCRIPTION: These import statements are required for implementing the Texture Layer Hybrid Composition method for embedding native Android views in a Flutter app. They include necessary Flutter packages for material design and platform services.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/platform-integration/android/platform-views.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\nimport 'package:flutter/services.dart';\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter Web Plugins SDK Dependency\nDESCRIPTION: This YAML snippet demonstrates how to add the `flutter_web_plugins` SDK dependency to your `pubspec.yaml` file. This is required to use the `usePathUrlStrategy` function. This dependency is part of the Flutter SDK and must be included in your `pubspec.yaml` file.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/navigation/url-strategies.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  flutter:\n    sdk: flutter\n  flutter_web_plugins:\n    sdk: flutter\n```\n\n----------------------------------------\n\nTITLE: RouteInformation Initialization After Migration (Dart)\nDESCRIPTION: Shows the initialization of RouteInformation using the `uri` parameter with `Uri.parse`. This example demonstrates the updated approach of creating a RouteInformation object using Uri.parse to represent the route.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/route-information-uri.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nfinal RouteInformation myRoute = RouteInformation(uri: Uri.parse('/myroute'));\n```\n\n----------------------------------------\n\nTITLE: Using PanGestureRecognizer with Listener for Trackpad Interactions (Dart)\nDESCRIPTION: This snippet demonstrates the correct usage of `Listener` and `GestureRecognizer` (specifically `PanGestureRecognizer`) to respond to trackpad interactions in a Flutter application. It shows how to initialize and configure a `PanGestureRecognizer` to handle pan start, update, and end events.  The `addPointer` and `addPointerPanZoom` methods are used to register interest in pointer events.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/trackpad-gestures.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() => runApp(Foo());\n\nclass Foo extends StatefulWidget {\n  late final PanGestureRecognizer recognizer;\n\n  @override\n  void initState() {\n    super.initState();\n    recognizer = PanGestureRecognizer()\n    ..onStart = _onPanStart\n    ..onUpdate = _onPanUpdate\n    ..onEnd = _onPanEnd;\n  }\n\n  void _onPanStart(DragStartDetails details) {\n    debugPrint('onStart');\n  }\n\n  void _onPanUpdate(DragUpdateDetails details) {\n    debugPrint('onUpdate');\n  }\n\n  void _onPanEnd(DragEndDetails details) {\n    debugPrint('onEnd');\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Listener(\n      onPointerDown: recognizer.addPointer,\n      onPointerPanZoomStart: recognizer.addPointerPanZoom,\n      child: Container()\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Bundling Assets in Flutter (YAML)\nDESCRIPTION: This YAML snippet shows how to declare assets (images and fonts) in the `pubspec.yaml` file for a Flutter project.  The assets are listed under the `flutter` section, specifying the paths to the image and font files. These assets can then be accessed within the Flutter application.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/compose-devs.md#_snippet_24\n\nLANGUAGE: yaml\nCODE:\n```\nflutter:\n  assets:\n    - assets/my_icon.png\n    - assets/background.png\n  fonts:\n    - family: FiraSans\n      fonts:\n        - asset: fonts/FiraSans-Regular.ttf\n```\n\n----------------------------------------\n\nTITLE: Initializing LlmChatView with Welcome Message in Flutter\nDESCRIPTION: This code snippet demonstrates how to initialize the LlmChatView with a custom welcome message using the welcomeMessage parameter. It uses the GeminiProvider for the LLM and displays the chat view within a Scaffold.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ai-toolkit/feature-integration.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nclass ChatPage extends StatelessWidget {\n const ChatPage({super.key});\n\n @override\n Widget build(BuildContext context) => Scaffold(\n       appBar: AppBar(title: const Text(App.title)),\n       body: LlmChatView(\n         welcomeMessage: 'Hello and welcome to the Flutter AI Toolkit!',\n         provider: GeminiProvider(\n           model: GenerativeModel(\n             model: 'gemini-2.0-flash',\n             apiKey: geminiApiKey,\n           ),\n         ),\n       ),\n     );\n}\n```\n\n----------------------------------------\n\nTITLE: Gradle Dependency Override\nDESCRIPTION: Example of forcing a specific version of a library (guava) within an Android project's `build.gradle` file.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/packages-and-plugins/using-packages.md#_snippet_2\n\nLANGUAGE: groovy\nCODE:\n```\nconfigurations.all {\n    resolutionStrategy {\n        force 'com.google.guava:guava:28.0-android'\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Reverting ColorScheme after Migration Dart\nDESCRIPTION: Demonstrates how to revert to the original default colors after the Material 3 tokens update using `ColorScheme.copyWith`.  This is useful to maintain the previous visual appearance of widgets that rely on these color roles. It sets specific color values for onPrimaryContainer, onSecondaryContainer, onTertiaryContainer, and onErrorContainer.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/material-design-3-token-update.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nfinal ColorScheme colors = ThemeData().colorScheme.copyWith(\n  onPrimaryContainer: const Color(0xFF21005D),\n  onSecondaryContainer: const Color(0xFF1D192B),\n  onTertiaryContainer: const Color(0xFF31111D),\n  onErrorContainer: const Color(0xFF410E0B),\n);\n```\n\n----------------------------------------\n\nTITLE: Customer Class Definition in Dart\nDESCRIPTION: This snippet defines the `Customer` class, which represents a customer with a name, image provider, and a list of items in their cart. It also includes a getter for calculating and formatting the total price of the items in the cart.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/effects/drag-a-widget.md#_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nclass Customer {\n  Customer({required this.name, required this.imageProvider, List<Item>? items})\n    : items = items ?? [];\n\n  final String name;\n  final ImageProvider imageProvider;\n  final List<Item> items;\n\n  String get formattedTotalItemPrice {\n    final totalPriceCents = items.fold<int>(\n      0,\n      (prev, item) => prev + item.totalPriceCents,\n    );\n    return '\\$${(totalPriceCents / 100.0).toStringAsFixed(2)}';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GridView.count Usage in Flutter\nDESCRIPTION: This snippet demonstrates how to use the `GridView.count` constructor to create a grid with a specified number of columns.  It generates a list of 100 widgets, each displaying its index, and arranges them in a grid layout.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/lists/grid-lists.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nGridView.count(\n  // Create a grid with 2 columns.\n  // If you change the scrollDirection to horizontal,\n  // this produces 2 rows.\n  crossAxisCount: 2,\n  // Generate 100 widgets that display their index in the list.\n  children: List.generate(100, (index) {\n    return Center(\n      child: Text(\n        'Item $index',\n        style: TextTheme.of(context).headlineSmall,\n      ),\n    );\n  }),\n),\n```\n\n----------------------------------------\n\nTITLE: Setting a translucent theme\nDESCRIPTION: This XML snippet demonstrates how to define an Android theme with the `android:windowIsTranslucent` property set to `true`. This is required for Activities that render with a translucent background. The parent theme should also be specified.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/add-to-app/android/add-flutter-screen.md#_snippet_11\n\nLANGUAGE: xml\nCODE:\n```\n<style name=\"MyTheme\" parent=\"@style/MyParentTheme\">\n  <item name=\"android:windowIsTranslucent\">true</item>\n</style>\n```\n\n----------------------------------------\n\nTITLE: Export or Create Private Key for Code Signing\nDESCRIPTION: Exports the private key from an existing certificate or creates a new private key using openssl or ssh-keygen.  This key is used to sign the Mac App Distribution and Mac Installer Distribution certificates.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/deployment/macos.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nopenssl pkcs12 -in <certificate_name>.p12 -nodes -nocerts | openssl rsa -out cert_key\n```\n\nLANGUAGE: bash\nCODE:\n```\nssh-keygen -t rsa -b 2048 -m PEM -f cert_key -q -N \"\"\n```\n\n----------------------------------------\n\nTITLE: Configuring android:windowBackground in styles.xml (XML)\nDESCRIPTION: This code snippet demonstrates how to configure the `android:windowBackground` attribute within a theme in the `styles.xml` file. This theme specifies the launch theme of the application. Setting `android:windowBackground` configures the custom splash screen, which is automatically removed when Flutter draws its first frame.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/splash-screen-migration.md#_snippet_2\n\nLANGUAGE: XML\nCODE:\n```\n   <resources>\n       <style\n           name=\"SomeTheme\"\n           // ...\n           >\n           <!-- Show a splash screen on the activity. Automatically removed when\n                Flutter draws its first frame -->\n           <item name=\"android:windowBackground\">@drawable/some_splash_screen</item>\n       </style>\n   </resources>\n```\n\n----------------------------------------\n\nTITLE: Accessing Route Location After Migration (Dart)\nDESCRIPTION: Demonstrates how to access the route location using the `uri.path` property.  This code snippet illustrates the new method of retrieving the route's path component from the Uri object.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/route-information-uri.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nfinal String myPath = myRoute.uri.path;\n```\n\n----------------------------------------\n\nTITLE: Listener Handling PointerScrollEvent before Migration (Dart)\nDESCRIPTION: This snippet illustrates how `Listener` was used *before* the migration to handle only `PointerScrollEvent` for desktop scrolling.  It captures scroll wheel events, but does not handle trackpad gestures, which are now represented by `PointerPanZoomUpdate` events. This means trackpad scrolling would not trigger the `debugPrint` statement.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/trackpad-gestures.md#_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() => runApp(Foo());\n\nclass Foo extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return Listener(\n      onPointerSignal: (PointerSignalEvent event) {\n        if (event is PointerScrollEvent) {\n          debugPrint('scroll wheel event');\n        }\n      }\n      child: Container()\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Animated Speech Bubbles\nDESCRIPTION: This snippet demonstrates how to create and animate staggered speech bubbles in Flutter. It uses `AnimationController` and `CurvedAnimation` to animate the scaling of three bubbles with slight timing differences, creating a staggered appearance effect.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/effects/typing-indicator.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nclass _TypingIndicatorState extends State<TypingIndicator>\n    with TickerProviderStateMixin {\n  late AnimationController _appearanceController;\n\n  late Animation<double> _indicatorSpaceAnimation;\n\n  late Animation<double> _smallBubbleAnimation;\n  late Animation<double> _mediumBubbleAnimation;\n  late Animation<double> _largeBubbleAnimation;\n\n  late AnimationController _repeatingController;\n  final List<Interval> _dotIntervals = const [\n    Interval(0.25, 0.8),\n    Interval(0.35, 0.9),\n    Interval(0.45, 1.0),\n  ];\n\n  @override\n  void initState() {\n    super.initState();\n\n    _appearanceController = AnimationController(vsync: this)..addListener(() {\n      setState(() {});\n    });\n\n    _indicatorSpaceAnimation = CurvedAnimation(\n      parent: _appearanceController,\n      curve: const Interval(0.0, 0.4, curve: Curves.easeOut),\n      reverseCurve: const Interval(0.0, 1.0, curve: Curves.easeOut),\n    ).drive(Tween<double>(begin: 0.0, end: 60.0));\n\n    _smallBubbleAnimation = CurvedAnimation(\n      parent: _appearanceController,\n      curve: const Interval(0.0, 0.5, curve: Curves.elasticOut),\n      reverseCurve: const Interval(0.0, 0.3, curve: Curves.easeOut),\n    );\n    _mediumBubbleAnimation = CurvedAnimation(\n      parent: _appearanceController,\n      curve: const Interval(0.2, 0.7, curve: Curves.elasticOut),\n      reverseCurve: const Interval(0.2, 0.6, curve: Curves.easeOut),\n    );\n    _largeBubbleAnimation = CurvedAnimation(\n      parent: _appearanceController,\n      curve: const Interval(0.3, 1.0, curve: Curves.elasticOut),\n      reverseCurve: const Interval(0.5, 1.0, curve: Curves.easeOut),\n    );\n\n    if (widget.showIndicator) {\n      _showIndicator();\n    }\n  }\n\n  @override\n  void didUpdateWidget(TypingIndicator oldWidget) {\n    super.didUpdateWidget(oldWidget);\n\n    if (widget.showIndicator != oldWidget.showIndicator) {\n      if (widget.showIndicator) {\n        _showIndicator();\n      } else {\n        _hideIndicator();\n      }\n    }\n  }\n\n  @override\n  void dispose() {\n    _appearanceController.dispose();\n    super.dispose();\n  }\n\n  void _showIndicator() {\n    _appearanceController\n      ..duration = const Duration(milliseconds: 750)\n      ..forward();\n  }\n\n  void _hideIndicator() {\n    _appearanceController\n      ..duration = const Duration(milliseconds: 150)\n      ..reverse();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return AnimatedBuilder(\n      animation: _indicatorSpaceAnimation,\n      builder: (context, child) {\n        return SizedBox(height: _indicatorSpaceAnimation.value, child: child);\n      },\n      child: Stack(\n        children: [\n          AnimatedBubble(\n            animation: _smallBubbleAnimation,\n            left: 8,\n            bottom: 8,\n            bubble: CircleBubble(size: 8, bubbleColor: widget.bubbleColor),\n          ),\n          AnimatedBubble(\n            animation: _mediumBubbleAnimation,\n            left: 10,\n            bottom: 10,\n            bubble: CircleBubble(size: 16, bubbleColor: widget.bubbleColor),\n          ),\n          AnimatedBubble(\n            animation: _largeBubbleAnimation,\n            left: 12,\n            bottom: 12,\n            bubble: StatusBubble(\n              dotIntervals: _dotIntervals,\n              flashingCircleDarkColor: widget.flashingCircleDarkColor,\n              flashingCircleBrightColor: widget.flashingCircleBrightColor,\n              bubbleColor: widget.bubbleColor,\n            ),\n          ),\n        ],\n      ),\n    );\n  }\n}\n\nclass CircleBubble extends StatelessWidget {\n  const CircleBubble({\n    super.key,\n    required this.size,\n    required this.bubbleColor,\n  });\n\n  final double size;\n  final Color bubbleColor;\n\n  @override\n  Widget build(BuildContext context) {\n    return Container(\n      width: size,\n      height: size,\n      decoration: BoxDecoration(shape: BoxShape.circle, color: bubbleColor),\n    );\n  }\n}\n\nclass AnimatedBubble extends StatelessWidget {\n  const AnimatedBubble({\n    super.key,\n    required this.animation,\n    required this.left,\n    required this.bottom,\n    required this.bubble,\n  });\n\n  final Animation<double> animation;\n  final double left;\n  final double bottom;\n  final Widget bubble;\n\n  @override\n  Widget build(BuildContext context) {\n    return Positioned(\n      left: left,\n      bottom: bottom,\n      child: AnimatedBuilder(\n        animation: animation,\n        builder: (context, child) {\n          return Transform.scale(\n            scale: animation.value,\n            alignment: Alignment.bottomLeft,\n            child: child,\n          );\n        },\n        child: bubble,\n      ),\n    );\n  }\n}\n\nclass StatusBubble extends StatelessWidget {\n  const StatusBubble({\n    super.key,\n    required this.dotIntervals,\n    required this.flashingCircleBrightColor,\n    required this.flashingCircleDarkColor,\n    required this.bubbleColor,\n  });\n\n  final List<Interval> dotIntervals;\n  final Color flashingCircleDarkColor;\n  final Color flashingCircleBrightColor;\n  final Color bubbleColor;\n\n  @override\n  Widget build(BuildContext context) {\n    return Container(\n      width: 85,\n      height: 44,\n      padding: const EdgeInsets.symmetric(horizontal: 8),\n      decoration: BoxDecoration(\n        borderRadius: BorderRadius.circular(27),\n        color: bubbleColor,\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Static Text Widget - Flutter\nDESCRIPTION: This code demonstrates how to display a static text widget in Flutter using the `Text` widget. It showcases the use of `StatelessWidget` for displaying UI elements that don't change during runtime. The `TextStyle` property is used to customize the appearance of the text, specifically setting the font weight to bold.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/xamarin-forms-devs.md#_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nconst Text(\n  'I like Flutter!',\n  style: TextStyle(fontWeight: FontWeight.bold),\n);\n```\n\n----------------------------------------\n\nTITLE: Jump to Main Thread - Objective-C\nDESCRIPTION: This Objective-C code shows how to execute code on the main thread (UI thread) in iOS. The `dispatch_async` function is used with the main dispatch queue to schedule a block of code to be executed asynchronously on the main thread.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/platform-integration/platform-channels.md#_snippet_29\n\nLANGUAGE: Objective-C\nCODE:\n```\ndispatch_async(dispatch_get_main_queue(), ^{\n  // Call the desired channel message here.\n});\n```\n\n----------------------------------------\n\nTITLE: UnconstrainedBox with Container in Flutter\nDESCRIPTION: This example showcases an UnconstrainedBox with a Container. The UnconstrainedBox allows the Container to have any size it wants, regardless of the parent's constraints. This means the Container takes on its declared width and height.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/layout/constraints.md#_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\nUnconstrainedBox(\n   child: Container(color: red, width: 20, height: 50));\n```\n\n----------------------------------------\n\nTITLE: Legacy settings.gradle file\nDESCRIPTION: This Groovy snippet shows a legacy `settings.gradle` file that reads the deprecated `.flutter-plugins` file. It iterates through the plugins defined in the file and includes them as subprojects. This needs to be updated to use the newer plugin DSL.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/flutter-plugins-configuration.md#_snippet_2\n\nLANGUAGE: groovy\nCODE:\n```\ninclude ':app'\n\ndef flutterProjectRoot = rootProject.projectDir.parentFile.toPath()\n\ndef plugins = new Properties()\n// Note explicitly reading the legacy '.flutter-plugins' file.\ndef pluginsFile = new File(flutterProjectRoot.toFile(), '.flutter-plugins')\nif (pluginsFile.exists()) {\n    pluginsFile.withReader('UTF-8') { reader -> plugins.load(reader) }\n}\n\nplugins.each { name, path ->\n    def pluginDirectory = flutterProjectRoot.resolve(path).resolve('android').toFile()\n    include \":$name\"\n    project(\":$name\").projectDir = pluginDirectory\n}\n```\n\n----------------------------------------\n\nTITLE: Code before migration example in Dart\nDESCRIPTION: Illustrates code before a breaking change in Dart.  It's a placeholder that should be replaced with actual code demonstrating the old API usage. The developer provides an example of the code that needs to be migrated.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/template.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n// Example of code before the change.\n```\n\n----------------------------------------\n\nTITLE: Calling the Launch Method on Button Press in Flutter\nDESCRIPTION: This snippet demonstrates how to call the `_launchAndroidActivity` function when a button is pressed. This creates a user interaction trigger for launching the native Android activity.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/platform-integration/android/compose-activity.md#_snippet_2\n\nLANGUAGE: Dart\nCODE:\n```\n        floatingActionButton: FloatingActionButton(\n          // SECTION 3: Call `_launchAndroidActivity` somewhere.\n          onPressed: _launchAndroidActivity,\n\n          // SECTION 3: End\n          tooltip: 'Launch Android activity',\n          child: const Icon(Icons.launch),\n        ),\n```\n\n----------------------------------------\n\nTITLE: Migrating RichText textScaleFactor Dart\nDESCRIPTION: Demonstrates how to migrate `RichText` widget usage from `textScaleFactor` to `textScaler`.  It illustrates a simple substitution of `textScaleFactor` with `textScaler` when the receiver API has already been migrated.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/deprecate-textscalefactor.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nRichText( \n  textScaleFactor: MediaQuery.textScaleFactorOf(context),\n  ...\n)\n```\n\nLANGUAGE: dart\nCODE:\n```\nRichText( \n  textScaler: MediaQuery.textScalerOf(context),\n  ...\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Dark Mode in Flutter\nDESCRIPTION: This code snippet demonstrates how to set the brightness mode (light or dark) for a Flutter app using the `CupertinoThemeData` widget and the `brightness` property. It sets the app to use dark mode by default.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/swiftui-devs.md#_snippet_28\n\nLANGUAGE: Dart\nCODE:\n```\nconst CupertinoApp(\n  theme: CupertinoThemeData(brightness: Brightness.dark),\n  home: HomePage(),\n);\n```\n\n----------------------------------------\n\nTITLE: Migrate RenderUnconstrainedBox to RenderConstraintsTransformBox Dart\nDESCRIPTION: This snippet demonstrates how to migrate from the deprecated `RenderUnconstrainedBox` to `RenderConstraintsTransformBox` in Flutter. It includes examples for unconstrained, horizontally constrained, and vertically constrained scenarios. The new API provides more flexibility for constraint transformations.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/3-3-deprecations.md#_snippet_0\n\nLANGUAGE: Dart\nCODE:\n```\n// Unconstrained\nfinal RenderUnconstrainedBox unconstrained = RenderUnconstrainedBox(\n  textDirection: TextDirection.ltr,\n  child: RenderConstrainedBox(\n    additionalConstraints: const BoxConstraints.tightFor(height: 200.0),\n  ),\n  alignment: Alignment.center,\n);\n\n// Constrained in horizontal axis\nfinal RenderUnconstrainedBox unconstrained = RenderUnconstrainedBox(\n  constrainedAxis: Axis.horizontal,\n  textDirection: TextDirection.ltr,\n  child: RenderConstrainedBox(\n    additionalConstraints: const BoxConstraints.tightFor(width: 200.0, height: 200.0),\n  ),\n  alignment: Alignment.center,\n);\n\n// Constrained in vertical axis\nfinal RenderUnconstrainedBox unconstrained = RenderUnconstrainedBox(\n  constrainedAxis: Axis.vertical,\n  textDirection: TextDirection.ltr,\n  child: RenderFlex(\n    direction: Axis.vertical,\n    textDirection: TextDirection.ltr,\n    children: <RenderBox>[flexible],\n  ),\n  alignment: Alignment.center,\n);\n```\n\nLANGUAGE: Dart\nCODE:\n```\n// Unconstrained\nfinal RenderConstraintsTransformBox unconstrained = RenderConstraintsTransformBox(\n  constraintsTransform: ConstraintsTransformBox.unconstrained,\n  textDirection: TextDirection.ltr,\n  child: RenderConstrainedBox(\n    additionalConstraints: const BoxConstraints.tightFor(height: 200.0),\n  ),\n  alignment: Alignment.center,\n);\n\n// Constrained in horizontal axis\nfinal RenderConstraintsTransformBox unconstrained = RenderConstraintsTransformBox(\n  constraintsTransform: ConstraintsTransformBox.widthUnconstrained,\n  textDirection: TextDirection.ltr,\n  child: RenderConstrainedBox(\n    additionalConstraints: const BoxConstraints.tightFor(width: 200.0, height: 200.0),\n  ),\n  alignment: Alignment.center,\n);\n\n// Constrained in vertical axis\nfinal RenderConstraintsTransformBox unconstrained = RenderConstraintsTransformBox(\n  constraintsTransform: ConstraintsTransformBox.widthUnconstrained,\n  textDirection: TextDirection.ltr,\n  child: RenderFlex(\n    direction: Axis.vertical,\n    textDirection: TextDirection.ltr,\n    children: <RenderBox>[flexible],\n  ),\n  alignment: Alignment.center,\n);\n```\n\n----------------------------------------\n\nTITLE: Show FlutterViewController in UIKit-ObjC\nDESCRIPTION: This Objective-C code shows a `ViewController` with a `UIButton` hooked to present a `FlutterViewController`. It retrieves the `FlutterEngine` instance from the `AppDelegate` and uses it to initialize the `FlutterViewController`. The `FlutterViewController` is then presented modally.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/add-to-app/ios/add-flutter-screen.md#_snippet_5\n\nLANGUAGE: Objective-C\nCODE:\n```\n@import Flutter;\n#import \"AppDelegate.h\"\n#import \"ViewController.h\"\n\n@implementation ViewController\n- (void)viewDidLoad {\n    [super viewDidLoad];\n\n    // Make a button to call the showFlutter function when pressed.\n    UIButton *button = [UIButton buttonWithType:UIButtonTypeCustom];\n    [button addTarget:self\n               action:@selector(showFlutter)\n     forControlEvents:UIControlEventTouchUpInside];\n    [button setTitle:@\"Show Flutter!\" forState:UIControlStateNormal];\n    button.backgroundColor = UIColor.blueColor;\n    button.frame = CGRectMake(80.0, 210.0, 160.0, 40.0);\n    [self.view addSubview:button];\n}\n\n- (void)showFlutter {\n    FlutterEngine *flutterEngine =\n        ((AppDelegate *)UIApplication.sharedApplication.delegate).flutterEngine;\n    FlutterViewController *flutterViewController =\n        [[FlutterViewController alloc] initWithEngine:flutterEngine nibName:nil bundle:nil];\n    [self presentViewController:flutterViewController animated:YES completion:nil];\n}\n@end\n```\n\n----------------------------------------\n\nTITLE: Configuring AndroidManifest for SplitCompat (XML)\nDESCRIPTION: Configures the `android:name` property in `AndroidManifest.xml` to use `FlutterPlayStoreSplitApplication`. This enables SplitCompat support, which is required when using Google Play Store for dynamic feature delivery. It handles both `SplitCompat` and provides an instance of a `PlayStoreDeferredComponentManager`.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/perf/deferred-components.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<manifest ...\n  <application\n     android:name=\"io.flutter.embedding.android.FlutterPlayStoreSplitApplication\"\n        ...\n  </application>\n</manifest>\n\n```\n\n----------------------------------------\n\nTITLE: Set surfaceTint to transparent - Dart\nDESCRIPTION: This code snippet illustrates how to set the surfaceTint of the ColorScheme to transparent, effectively reverting to the previous behavior of widgets in Material 2. It also shows how to set the shadowColor of the AppBarTheme using the shadow color from the color scheme. This helps differentiate the shadow from the content when the content has no shadow.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/material-3-migration.md#_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\ntheme: ThemeData(\n  colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),\n),\n```\n\n----------------------------------------\n\nTITLE: Animate opacity with AnimatedOpacity - Set duration\nDESCRIPTION: This snippet sets the duration for the AnimatedOpacity animation to 2 seconds. The duration parameter controls how long the fade-in transition will take, affecting the animation's smoothness and perceived speed.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/codelabs/implicit-animations.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\n  AnimatedOpacity(\n+   duration: const Duration(seconds: 2),\n    opacity: opacity,\n    child: const Column(\n```\n\n----------------------------------------\n\nTITLE: Handling onPanEnd Callback in Dart\nDESCRIPTION: The `onPanEnd` callback is modified to call the `_runAnimation` function with the velocity and size parameters. This ensures that the spring animation is triggered when the user stops dragging the card and that the animation takes into account the velocity of the drag and screen size to produce realistic-looking effects.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/animation/physics-simulation.md#_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nonPanEnd: (details) {\n  _runAnimation(details.velocity.pixelsPerSecond, size);\n},\n```\n\n----------------------------------------\n\nTITLE: Creating CustomerCart Widget in Dart\nDESCRIPTION: This snippet demonstrates the creation of a `CustomerCart` widget, which displays information about a customer's cart.  It takes a boolean indicating whether the cart has items, a boolean for highlight, and a Customer object as input parameters.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/effects/drag-a-widget.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nCustomerCart(\n  hasItems: customer.items.isNotEmpty,\n  highlighted: candidateItems.isNotEmpty,\n  customer: customer,\n);\n```\n\n----------------------------------------\n\nTITLE: Navigate to Project Directory\nDESCRIPTION: Changes the current directory to the specified Flutter project directory. The `$PROJECT` variable represents the path to the example project.\nSOURCE: https://github.com/flutter/website/blob/main/examples/layout/lakes/step5/README.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ncd $PROJECT\n```\n\n----------------------------------------\n\nTITLE: Setting platformDispatcher property after migration Dart\nDESCRIPTION: This code snippet demonstrates how to set and clear a property (`textScaleFactorTestValue`) on the `platformDispatcher` object after migration.  It uses `tester.binding.platformDispatcher` to access the `platformDispatcher` and `addTearDown` to clear the value after the test.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/3-13-deprecations.md#_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\ntestWidgets('My test', (WidgetTester tester) aysnc {\n  // For all instances, replace window with platformDispatcher\n  tester.binding.platformDispatcher.textScaleFactorTestValue = 42;\n  addTearDown(tester.binding.platformDispatcher.clearTextScaleFactorTestValue);\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Custom Element forgetChild Override (Before Migration) - Dart\nDESCRIPTION: This code snippet shows how an Element subclass might have overridden the forgetChild method before the required migration. It lacks the super.forgetChild(child) call, which can lead to global key duplication issues.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/forgetchild-call-super.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nclass CustomElement extends Element {\n\n    @override\n    void forgetChild(Element child) {\n        ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Dumping Semantics Tree in Flutter\nDESCRIPTION: This code snippet demonstrates how to call the `debugDumpSemanticsTree()` function in a Flutter application. This function prints the semantic tree to the console, which is useful for debugging accessibility issues.  The code defines a Flutter app with a Semantics widget wrapping a GestureDetector and Text widget. Tapping the Text widget calls `debugDumpSemanticsTree()` and prints 'Clicked!' to the console in debug mode.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/testing/code-debugging.md#_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/foundation.dart';\nimport 'package:flutter/material.dart';\nimport 'package:flutter/rendering.dart';\n\nvoid main() {\n  runApp(const MaterialApp(home: AppHome()));\n}\n\nclass AppHome extends StatelessWidget {\n  const AppHome({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return Material(\n      child: Center(\n        child: Semantics(\n          button: true,\n          enabled: true,\n          label: 'Clickable text here!',\n          child: GestureDetector(\n            onTap: () {\n              debugDumpSemanticsTree();\n              if (kDebugMode) {\n                print('Clicked!');\n              }\n            },\n            child: const Text('Click Me!', style: TextStyle(fontSize: 56)),\n          ),\n        ),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Calling showDialog During Build - Problem (Dart)\nDESCRIPTION: This snippet demonstrates the error of calling `showDialog` directly within the `build` method. `showDialog` internally calls `setState`, which is not allowed during the build process. This can lead to unexpected behavior and errors in Flutter applications.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/testing/common-errors.md#_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nWidget build(BuildContext context) {\n  // Don't do this.\n  showDialog(\n    context: context,\n    builder: (context) {\n      return const AlertDialog(title: Text('Alert Dialog'));\n    },\n  );\n\n  return const Center(\n    child: Column(children: <Widget>[Text('Show Material Dialog')]),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Padding to a Widget in Flutter (Dart)\nDESCRIPTION: This snippet shows how to add padding to a widget using the `Container` widget. It sets the padding using `EdgeInsets.all(16.0)` to add 16 logical pixels of padding around the `BorderedImage` widget.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/fundamentals/layout.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nWidget build(BuildContext context) {\n  return Container(\n    padding: EdgeInsets.all(16.0),\n    child: BorderedImage(),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Example network filter query\nDESCRIPTION: This example demonstrates how to filter network requests by method, type, and status code. Specifically, it searches for requests matching 'my-endpoint', using the GET method, JSON type, and a 200 status code.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/tools/devtools/network.md#_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nmy-endpoint m:get t:json s:200\n```\n\n----------------------------------------\n\nTITLE: Extending Flutter device timeout\nDESCRIPTION: This command allows to extend the timeout duration for device detection during Flutter app execution, which can be useful when using wireless debugging. The default timeout is 10 seconds; this example sets it to 60 seconds.\nSOURCE: https://github.com/flutter/website/blob/main/src/_includes/docs/install/devices/ios-physical.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ flutter run --device-timeout 60\n```\n\n----------------------------------------\n\nTITLE: BubblePainter Definition Dart\nDESCRIPTION: Defines the `BubblePainter` class, which extends `CustomPainter`. It holds references to the `ScrollableState`, `BuildContext` and colors. The `shouldRepaint` method determines when the painter needs to be redrawn.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/effects/gradient-bubbles.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nclass BubblePainter extends CustomPainter {\n  BubblePainter({\n    required ScrollableState scrollable,\n    required BuildContext bubbleContext,\n    required List<Color> colors,\n  }) : _scrollable = scrollable,\n       _bubbleContext = bubbleContext,\n       _colors = colors;\n\n  final ScrollableState _scrollable;\n  final BuildContext _bubbleContext;\n  final List<Color> _colors;\n\n  @override\n  bool shouldRepaint(BubblePainter oldDelegate) {\n    return oldDelegate._scrollable != _scrollable ||\n        oldDelegate._bubbleContext != _bubbleContext ||\n        oldDelegate._colors != _colors;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Windows Application Release Directory Structure\nDESCRIPTION: Shows the expected directory structure for a Flutter Windows application release build before packaging it into a zip file or installer. It highlights the essential files and directories required for the application to run correctly.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/platform-integration/windows/building.md#_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\nRelease\n│   flutter_windows.dll\n│   msvcp140.dll\n│   my_app.exe\n│   vcruntime140.dll\n│   vcruntime140_1.dll\n│\n└───data\n│   │   app.so\n│   │   icudtl.dat\n\n...\n```\n\n----------------------------------------\n\nTITLE: Implementing ParentDataWidget After Migration (Dart)\nDESCRIPTION: This code snippet demonstrates how to implement a ParentDataWidget after the migration to the new generic type. The FrogSize widget now extends ParentDataWidget with FrogJarParentData as the generic type. The debugTypicalAncestorWidgetClass getter has been added to specify the typical ancestor widget class.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/parent-data-widget-generic-type.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nclass FrogSize extends ParentDataWidget<FrogJarParentData> { // FrogJar changed to FrogJarParentData\n  FrogSize({\n    Key key,\n    required this.size,\n    required Widget child,\n  }) : assert(child != null),\n        assert(size != null),\n        super(key: key, child: child);\n\n  final Size size;\n\n  @override\n  void applyParentData(RenderObject renderObject) {\n    final FrogJarParentData parentData = renderObject.parentData;\n    if (parentData.size != size) {\n      parentData.size = size;\n      final RenderFrogJar targetParent = renderObject.parent;\n      targetParent.markNeedsLayout();\n    }\n  }\n\n  @override\n  Type get debugTypicalAncestorWidgetClass => FrogJar; // Newly added\n}\n```\n\n----------------------------------------\n\nTITLE: Loading iOS images in Flutter (ObjC)\nDESCRIPTION: This Objective-C snippet uses the `ios_platform_images` plugin to load an image that is hosted in iOS and use it in Flutter. This requires the `ios_platform_images` plugin to be installed and configured in your Flutter project.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/assets/assets-and-images.md#_snippet_9\n\nLANGUAGE: objective-c\nCODE:\n```\n[UIImage flutterImageWithName:@\"icons/heart.png\"];\n```\n\n----------------------------------------\n\nTITLE: Disable Flutter Platforms\nDESCRIPTION: This command disables specific Flutter platforms, such as iOS, Windows Desktop, Linux Desktop, macOS Desktop, Web, and Android, using the `flutter config` command. It can be used to reduce build times or avoid warnings for platforms that are not being actively developed for.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/platform-integration/desktop.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ flutter config --no-enable-ios\n```\n\n----------------------------------------\n\nTITLE: TextInputClient Interface Implementation After Migration (Dart)\nDESCRIPTION: This code snippet demonstrates the required implementation of the `showToolbar`, `insertTextPlaceholder`, and `removeTextPlaceholder` methods in a custom text input client *after* the introduction of Scribble support.  These methods must be overridden to either provide Scribble functionality or be implemented as empty functions.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/scribble-text-input-client.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nclass MyCustomTextInputClient implements TextInputClient {\n  ...\n  @override\n  void showToolbar() {\n    ...\n  }\n  \n  @override\n  void insertTextPlaceholder(Size size) {\n    ...\n  }\n  \n  @override\n  void removeTextPlaceholder() {\n    ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling ChromeOS-Specific Lint Analysis (YAML)\nDESCRIPTION: This snippet shows how to enable ChromeOS-specific lint analysis checks in a Flutter project by adding or updating the `analysis_options.yaml` file. This configuration includes the `chrome-os-manifest-checks` to identify potential issues related to hardware compatibility and permissions on ChromeOS devices.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/platform-integration/android/chromeos.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ninclude: package:flutter/analysis_options_user.yaml\nanalyzer:\n optional-checks:\n   chrome-os-manifest-checks\n```\n\n----------------------------------------\n\nTITLE: Migrate from `of!` to `of` Flutter\nDESCRIPTION: This code snippet illustrates the migration to directly using the `of` function, which now returns a non-nullable value. This eliminates the need for the explicit null assertion.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/supplemental-maybeOf-migration.md#_snippet_3\n\nLANGUAGE: Dart\nCODE:\n```\nScrollController controller = Scrollable.of(context);\n```\n\n----------------------------------------\n\nTITLE: Accessing FlutterView ID in MultiViewApp ViewBuilder in Dart\nDESCRIPTION: This Dart code snippet shows how to access the `viewId` inside the `viewBuilder` function of the `MultiViewApp` widget. The `viewId` allows you to customize what is rendered in each view based on its identifier.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/platform-integration/web/embedding-flutter-web.md#_snippet_7\n\nLANGUAGE: Dart\nCODE:\n```\nMultiViewApp(\n  viewBuilder: (BuildContext context) {\n    // Retrieve the `viewId` where this Widget is being built:\n    final int viewId = View.of(context).viewId;\n    // Decide what to render based on `viewId`...\n  },\n)\n```\n\n----------------------------------------\n\nTITLE: Building Flutter for a Specific Target in Release Mode\nDESCRIPTION: This command compiles a Flutter application for a specific target platform in release mode. The target is specified as an argument to the `flutter build` command. Use `flutter help build` to list supported targets.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/testing/build-modes.md#_snippet_1\n\nLANGUAGE: terminal\nCODE:\n```\nflutter build <target>\n```\n\n----------------------------------------\n\nTITLE: Adding Animation Listener with setState\nDESCRIPTION: This Dart code snippet demonstrates how to properly use an AnimationListener in conjunction with setState to ensure UI updates when the animation changes. This is particularly important when the LayoutBuilder depends on the animation's value.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/layout-builder-optimization.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nAnimation animation = … create animation …;\nanimation.addListener(() {\n  setState(() {\n    // Intentionally empty. The state is inside the animation object.\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Building iOS Flutter App via Command Line\nDESCRIPTION: This command generates the iOS platform dependencies for a Flutter app. It builds the app in debug mode, disables codesigning, and only configures the project without performing a full build. The output shows a warning about the disabled codesigning.\nSOURCE: https://github.com/flutter/website/blob/main/src/_includes/docs/debug/debug-flow-ios.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ flutter build ios --config-only --no-codesign --debug\n```\n\nLANGUAGE: console\nCODE:\n```\nWarning: Building for device with codesigning disabled. You will have to manually codesign before deploying to device.\nBuilding com.example.myApp for device (ios)...\n```\n\n----------------------------------------\n\nTITLE: Migrating WidgetTester.enterText in Dart\nDESCRIPTION: This code snippet demonstrates how to migrate tests using `WidgetTester.enterText` to maintain the previous behavior of setting an invalid selection after entering text. It uses `showKeyboard` and `updateEditingValue` to set the text and then calls `idle()`.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/enterText-trailing-caret.md#_snippet_1\n\nLANGUAGE: Dart\nCODE:\n```\nawait tester.showKeyboard(finder);\nawait tester.updateEditingValue(TextEditingValue(\n  text: text,\n));\nawait tester.idle();\n```\n\n----------------------------------------\n\nTITLE: Search Widget using Finder Dart\nDESCRIPTION: Searches the widget tree for the title and message Text widgets using a Finder. This allows verification that the widgets are being displayed correctly. Uses the `find.text()` method.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/testing/widget/introduction.md#_snippet_4\n\nLANGUAGE: Dart\nCODE:\n```\nvoid main() {\n  testWidgets('MyWidget has a title and message', (tester) async {\n    await tester.pumpWidget(const MyWidget(title: 'T', message: 'M'));\n\n    // Create the Finders.\n    final titleFinder = find.text('T');\n    final messageFinder = find.text('M');\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Periodic Synchronization Task using Timer in Flutter\nDESCRIPTION: This code snippet shows how to use a `Timer` to periodically run a synchronization task in a Flutter application. The `Timer` calls the `sync()` method every 5 minutes to synchronize the user profile data. This is a simple way to implement background synchronization, but it may consume battery and resources.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/app-architecture/design-patterns/offline-first.md#_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nTimer.periodic(const Duration(minutes: 5), (timer) => sync());\n```\n\n----------------------------------------\n\nTITLE: Migrating from ModalRoute.hasScopedWillPopCallback to ModalRoute.popDisposition - Dart\nDESCRIPTION: This snippet demonstrates the migration from checking for `ModalRoute.hasScopedWillPopCallback` to checking the `ModalRoute.popDisposition` property. The definitive logic of whether a `ModalRoute` has popping blocked by a `PopScope` widget is baked into `ModalRoute.popDisposition`.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/android-predictive-back.md#_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nif (_route.popDisposition == RoutePopDisposition.doNotPop) {\n  // Disable predictive route transitions.\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SpringDescription Before Migration in Dart\nDESCRIPTION: Illustrates how to define a SpringDescription object with specific mass, stiffness, and damping values before the formula correction.  It shows the initial configuration that needs to be updated for underdamped springs. This requires the 'flutter' package.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/spring-description-underdamped.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nconst spring = SpringDescription(\n  mass: 20.0,\n  stiffness: 10,\n  damping: 1,\n);\n```\n\n----------------------------------------\n\nTITLE: Clearing TextField on Add Action in Flutter\nDESCRIPTION: The following code snippet demonstrates clearing the text field after adding a new ToDo item by listening to the `add` command's completion status and clearing the `TextEditingController`.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/app-architecture/design-patterns/sql.md#_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nvoid _onAdd() {\n  // Clear the text field when the add command completes.\n  if (widget.viewModel.add.completed) {\n    widget.viewModel.add.clearResult();\n    _controller.clear();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Build Android App Bundle (Debug) - Flutter\nDESCRIPTION: This command generates an Android App Bundle (AAB) in debug mode. This is used for testing and development purposes. The output is located in the `build/app/outputs/bundle/debug/` directory.\nSOURCE: https://github.com/flutter/website/blob/main/src/_includes/docs/debug/debug-flow-android.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nflutter build appbundle --debug\n```\n\n----------------------------------------\n\nTITLE: Keystore properties (Properties)\nDESCRIPTION: This code snippet shows the content of the `key.properties` file, which stores the keystore password, key alias, key password, and keystore file location. This file is used by Gradle to sign the app during the release build process.  The file should be kept private and never checked into source control.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/deployment/android.md#_snippet_5\n\nLANGUAGE: properties\nCODE:\n```\nstorePassword=<password-from-previous-step>\nkeyPassword=<password-from-previous-step>\nkeyAlias=upload\nstoreFile=<keystore-file-location>\n```\n\n----------------------------------------\n\nTITLE: Installing APKs using bundletool (Console)\nDESCRIPTION: This snippet uses bundletool to install APKs from an APKS file onto a connected Android device.  It requires Java and the bundletool JAR file. It emulates the Play Store's dynamic delivery feature for local testing.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/perf/deferred-components.md#_snippet_17\n\nLANGUAGE: console\nCODE:\n```\n$ java -jar bundletool.jar install-apks --apks=<your_temp_dir>/app.apks\n```\n\n----------------------------------------\n\nTITLE: Navigating to DetailScreen with Data in Dart\nDESCRIPTION: This code demonstrates how to navigate to the `DetailScreen` when a user taps on a `ListTile` in the `TodosScreen`. It uses `Navigator.push` with `MaterialPageRoute` to push a new route onto the navigator's stack.  It also passes the selected `Todo` object to the `DetailScreen` through its constructor.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/navigation/passing-data.md#_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nbody: ListView.builder(\n  itemCount: todos.length,\n  itemBuilder: (context, index) {\n    return ListTile(\n      title: Text(todos[index].title),\n      // When a user taps the ListTile, navigate to the DetailScreen.\n      // Notice that you're not only creating a DetailScreen, you're\n      // also passing the current todo through to it.\n      onTap: () {\n        Navigator.push(\n          context,\n          MaterialPageRoute(\n            builder: (context) => DetailScreen(todo: todos[index]),\n          ),\n        );\n      },\n    );\n  },\n),\n```\n\n----------------------------------------\n\nTITLE: Using contextMenuBuilder in Flutter TextField\nDESCRIPTION: This snippet demonstrates how to use the `contextMenuBuilder` property of the `TextField` widget to create a custom context menu. It constructs a `_MyContextMenu` widget, passing the primary anchor position from the `editableTextState` and a list of adaptive buttons generated from the `contextMenuButtonItems`. This allows for a fully customized toolbar experience with access to default buttons.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/context-menus.md#_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nclass _MyTextField extends StatelessWidget {\n  const _MyTextField();\n\n  @override\n  Widget build(BuildContext context) {\n    return TextField(\n      controller: _controller,\n      maxLines: 4,\n      minLines: 2,\n      contextMenuBuilder: (context, editableTextState) {\n        return _MyContextMenu(\n          anchor: editableTextState.contextMenuAnchors.primaryAnchor,\n          children: AdaptiveTextSelectionToolbar.getAdaptiveButtons(\n            context,\n            editableTextState.contextMenuButtonItems,\n          ).toList(),\n        );\n      },\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Flutter Web App with Wasm\nDESCRIPTION: The command runs a Flutter web application in Chrome with WebAssembly enabled. The `--wasm` flag instructs the Flutter toolchain to compile and run the application using Wasm if the browser supports it. The `-d chrome` flag specifies the target device as Chrome.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/platform-integration/web/wasm.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ flutter run -d chrome --wasm\n```\n\n----------------------------------------\n\nTITLE: Creating a Left Column in Flutter\nDESCRIPTION: This snippet creates a `Column` widget that contains the title, subtitle, ratings row, and icon list. The `leftColumn` variable encapsulates all these elements within a `Container` with specified padding. It demonstrates how to combine previously defined UI elements into a larger, more complex layout component.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/layout/index.md#_snippet_13\n\nLANGUAGE: dart\nCODE:\n```\nfinal leftColumn = Container(\n  padding: const EdgeInsets.fromLTRB(20, 30, 20, 20),\n  child: Column(children: [titleText, subTitle, ratings, iconList]),\n);\n```\n\n----------------------------------------\n\nTITLE: Launch FlutterActivity with Default Intent (Kotlin)\nDESCRIPTION: This Kotlin code snippet shows how to launch a `FlutterActivity` using `createDefaultIntent` from an `OnClickListener`. It starts the `FlutterActivity` with the default Dart entrypoint and initial route.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/add-to-app/android/add-flutter-screen.md#_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nmyButton.setOnClickListener {\n  startActivity(\n    FlutterActivity.createDefaultIntent(this)\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Intent Filter in AndroidManifest.xml\nDESCRIPTION: This XML snippet demonstrates how to register an intent filter in the AndroidManifest.xml file. This filter allows the Flutter application to receive text sharing intents from other applications. The action, category, and data type are specified to handle 'text/plain' intents.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/android-devs.md#_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<activity\n  android:name=\".MainActivity\"\n  android:launchMode=\"singleTop\"\n  android:theme=\"@style/LaunchTheme\"\n  android:configChanges=\"orientation|keyboardHidden|keyboard|screenSize|locale|layoutDirection\"\n  android:hardwareAccelerated=\"true\"\n  android:windowSoftInputMode=\"adjustResize\">\n  <!-- ... -->\n  <intent-filter>\n    <action android:name=\"android.intent.action.SEND\" />\n    <category android:name=\"android.intent.category.DEFAULT\" />\n    <data android:mimeType=\"text/plain\" />\n  </intent-filter>\n</activity>\n```\n\n----------------------------------------\n\nTITLE: Flutter Container Infinity Dimensions Centered\nDESCRIPTION: This example creates a Container widget with infinite width and height and a red background color, wrapped in a Center widget. Although the container requests to have infinite width and height, because the Center widget constraints it to the screen size, the container can only fill the screen.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/layout/constraints.md#_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nCenter(\n   child: Container(\n              color: red,\n              width: double.infinity,\n              height: double.infinity))\n```\n\n----------------------------------------\n\nTITLE: Detecting Clicked List Item in Flutter\nDESCRIPTION: This snippet demonstrates how to detect when a user taps on a specific item in a `ListView` in Flutter. It uses `GestureDetector` to wrap each list item and handle the `onTap` event.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/uikit-devs.md#_snippet_18\n\nLANGUAGE: dart\nCODE:\n```\nimport 'dart:developer' as developer;\nimport 'package:flutter/material.dart';\n\nvoid main() {\n  runApp(const SampleApp());\n}\n\nclass SampleApp extends StatelessWidget {\n  const SampleApp({super.key});\n\n  // This widget is the root of your application.\n  @override\n  Widget build(BuildContext context) {\n    return const MaterialApp(title: 'Sample App', home: SampleAppPage());\n  }\n}\n\nclass SampleAppPage extends StatefulWidget {\n  const SampleAppPage({super.key});\n\n  @override\n  State<SampleAppPage> createState() => _SampleAppPageState();\n}\n\nclass _SampleAppPageState extends State<SampleAppPage> {\n  List<Widget> _getListData() {\n    List<Widget> widgets = [];\n    for (int i = 0; i < 100; i++) {\n      widgets.add(\n        GestureDetector(\n          onTap: () {\n            developer.log('row tapped');\n          },\n          child: Padding(\n            padding: const EdgeInsets.all(10),\n            child: Text('Row $i'),\n          ),\n        ),\n      );\n    }\n    return widgets;\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: const Text('Sample App')),\n      body: ListView(children: _getListData()),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a DeferredBox Widget (Dart)\nDESCRIPTION: Defines a simple `DeferredBox` widget in Dart. This widget is a blue 30x30 box, used as a placeholder for demonstrating deferred loading. It's a StatelessWidget that returns a Container with the specified properties.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/perf/deferred-components.md#_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\n\n/// A simple blue 30x30 box.\nclass DeferredBox extends StatelessWidget {\n  const DeferredBox({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return Container(height: 30, width: 30, color: Colors.blue);\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Dispose object directly\nDESCRIPTION: This snippet shows how `dispose()` might be called without checking if the object was created by the current code, potentially leading to a double disposal error.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/dispose.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nx.dispose();\n```\n\n----------------------------------------\n\nTITLE: Configure Xcode Cloud post-clone script (Shell)\nDESCRIPTION: Configures the `ci_post_clone.sh` script to install Flutter, its dependencies, and CocoaPods. It ensures the script fails if any subcommand fails, navigates to the root of the cloned repository, installs Flutter via Git, adds Flutter to the PATH, installs Flutter artifacts for iOS, installs Flutter dependencies, installs CocoaPods using Homebrew, and installs CocoaPods dependencies in the ios directory. Requires Homebrew to be available in the environment.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/deployment/cd.md#_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n#!/bin/sh\n\n# Fail this script if any subcommand fails.\nset -e\n\n# The default execution directory of this script is the ci_scripts directory.\ncd $CI_PRIMARY_REPOSITORY_PATH # change working directory to the root of your cloned repo.\n\n# Install Flutter using git.\ngit clone https://github.com/flutter/flutter.git --depth 1 -b stable $HOME/flutter\nexport PATH=\"$PATH:$HOME/flutter/bin\"\n\n# Install Flutter artifacts for iOS (--ios), or macOS (--macos) platforms.\nflutter precache --ios\n\n# Install Flutter dependencies.\nflutter pub get\n\n# Install CocoaPods using Homebrew.\nHOMEBREW_NO_AUTO_UPDATE=1 # disable homebrew's automatic updates.\nbrew install cocoapods\n\n# Install CocoaPods dependencies.\ncd ios && pod install # run `pod install` in the `ios` directory.\n\nexit 0\n```\n\n----------------------------------------\n\nTITLE: Creating a List with LazyColumn in Compose (Kotlin)\nDESCRIPTION: Illustrates creating a performant list using LazyColumn in Jetpack Compose. LazyColumn only lays out visible components, making it efficient for large lists. The items closure specifies how each item is rendered.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/compose-devs.md#_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\n@Composable\nfun ListDemo2(people: List<Person>) {\n   LazyColumn {\n      items(people) { person ->\n         Text(person.name)\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Row with Flexible Children\nDESCRIPTION: Demonstrates the use of Flexible widgets within a Row, contrasting it with Expanded. Flexible allows its child to have the same or smaller width than the Flexible widget itself, while Expanded forces its child to have the exact same width. Both, however, ignore their children's desired widths when sizing themselves, influencing the layout proportionally.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/layout/constraints.md#_snippet_57\n\nLANGUAGE: dart\nCODE:\n```\nRow(\n  children: [\n    Flexible(\n      child: Container(\n        color: red,\n        child: const Text(\n          'This is a very long text that won\\'t fit the line.',\n          style: big,\n        ),\n      ),\n    ),\n    Flexible(\n      child: Container(\n        color: green,\n        child: const Text('Goodbye!', style: big),\n      ),\n    ),\n  ],\n)\n```\n\n----------------------------------------\n\nTITLE: Accessing Flutter Asset iOS Swift\nDESCRIPTION: This Swift snippet demonstrates how to access a Flutter asset in iOS using the `Bundle` API.  It uses `FlutterViewController` to get the lookup key and retrieves the asset path from the main bundle. It is commonly used when developing an app including a platform view.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/assets/assets-and-images.md#_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\nlet key = controller.lookupKey(forAsset: \"icons/heart.png\")\nlet mainBundle = Bundle.main\nlet path = mainBundle.path(forResource: key, ofType: nil)\n```\n\n----------------------------------------\n\nTITLE: Creating Dragging List Item Widget\nDESCRIPTION: This snippet defines the `DraggingListItem` StatelessWidget, which is displayed as feedback during the drag operation. It shows a visual representation of the item being dragged.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/effects/drag-a-widget.md#_snippet_11\n\nLANGUAGE: Dart\nCODE:\n```\nclass DraggingListItem extends StatelessWidget {\n  const DraggingListItem({\n    super.key,\n    required this.dragKey,\n    required this.photoProvider,\n  });\n\n  final GlobalKey dragKey;\n  final ImageProvider photoProvider;\n\n  @override\n  Widget build(BuildContext context) {\n    return FractionalTranslation(\n      translation: const Offset(-0.5, -0.5),\n      child: ClipRRect(\n        key: dragKey,\n```\n\n----------------------------------------\n\nTITLE: Process JSON Data with compute (Dart)\nDESCRIPTION: Uses the `compute` function to decode JSON data in a separate isolate, with a callback function to process the data. This simplifies the process of running tasks in the background.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/dart-swift-concurrency.md#_snippet_10\n\nLANGUAGE: Dart\nCODE:\n```\nfinal jsonData = await compute(getNumberOfKeys, jsonString);\n```\n\n----------------------------------------\n\nTITLE: Allowing Arbitrary Loads for iOS Debug Builds (XML)\nDESCRIPTION: This XML snippet configures the `Info-debug.plist` file for iOS debug builds to allow arbitrary loads (HTTP connections). By setting `NSAllowsArbitraryLoads` to `true` under the `NSAppTransportSecurity` key, HTTP connections are permitted during debugging. This is not recommended for release builds due to security considerations.  Requires creating an `Info-debug.plist` file.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/network-policy-ios-android.md#_snippet_2\n\nLANGUAGE: XML\nCODE:\n```\n<key>NSAppTransportSecurity</key>\n<dict>\n    <key>NSAllowsArbitraryLoads</key>\n    <true/>\n</dict>\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter AI Toolkit dependencies in pubspec.yaml\nDESCRIPTION: Specifies the dependencies required for using the Flutter AI Toolkit, including flutter_ai_toolkit, google_generative_ai (for Gemini AI), and firebase_core (for Firebase Vertex AI).  The versions should be set appropriately.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ai-toolkit/index.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  flutter_ai_toolkit: ^latest_version\n  google_generative_ai: ^latest_version # you might choose to use Gemini,\n  firebase_core: ^latest_version        # or Vertex AI or both\n```\n\n----------------------------------------\n\nTITLE: Record Performance with traceAction() in Flutter\nDESCRIPTION: Records the performance of the app as it scrolls through a list using the `traceAction()` method provided by the `IntegrationTestWidgetsFlutterBinding` class. This method runs the provided function and records a `Timeline` with detailed information about the app's performance. It ensures a specific item is displayed and stores the `Timeline` under a specified `reportKey`.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/testing/integration/profiling.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nawait binding.traceAction(() async {\n  // Scroll until the item to be found appears.\n  await tester.scrollUntilVisible(\n    itemFinder,\n    500.0,\n    scrollable: listFinder,\n  );\n}, reportKey: 'scrolling_timeline');\n```\n\n----------------------------------------\n\nTITLE: Build GridView with 2 columns - Dart\nDESCRIPTION: This snippet demonstrates how to create a basic GridView with a fixed number of columns. The crossAxisCount parameter determines the number of columns in the grid. This is the initial setup before adapting to orientation changes.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/design/orientation.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nreturn GridView.count(\n  // A list with 2 columns\n  crossAxisCount: 2,\n  // ...\n);\n```\n\n----------------------------------------\n\nTITLE: Upload app bundle with altool (Bash)\nDESCRIPTION: This command uploads the app bundle to App Store Connect using the `altool` command-line tool. It requires an API key and issuer ID for authentication.  This is an alternative method to uploading via the Transporter app or Xcode.  `xcrun altool` is used for uploading iOS apps to the App Store.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/deployment/ios.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nxcrun altool --upload-app --type ios -f build/ios/ipa/*.ipa --apiKey your_api_key --apiIssuer your_issuer_id\n```\n\n----------------------------------------\n\nTITLE: Importing Packages in Dart\nDESCRIPTION: Shows how to import a Flutter package in Dart code.  The `import` statement makes the package's functionality available within the current file.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/react-native-devs.md#_snippet_19\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\n```\n\n----------------------------------------\n\nTITLE: Running Flutter Fix (Dry Run) via Command Line\nDESCRIPTION: This command allows you to preview the changes that Flutter Fix would make to your project without actually applying them. It's useful for understanding the scope of the necessary updates before committing to them.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/tools/flutter-fix.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ dart fix --dry-run\n```\n\n----------------------------------------\n\nTITLE: Passing Arguments to Asset Transformers in Flutter using YAML\nDESCRIPTION: This YAML snippet demonstrates how to pass arguments to an asset transformer within the `pubspec.yaml` file.  The `args` key allows specifying a list of string arguments that will be passed to the transformer package (`vector_graphics_compiler`) during the asset transformation process.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/assets/asset-transformation.md#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\nflutter:\n  assets:\n    - path: assets/logo.svg\n      transformers:\n        - package: vector_graphics_compiler\n          args: ['--tessellate', '--font-size=14']\n```\n\n----------------------------------------\n\nTITLE: StaggerAnimation Stateless Widget - Dart\nDESCRIPTION: This snippet defines the `StaggerAnimation` stateless widget, which is responsible for defining the `Tween`s, `Animation` objects, and building the animating portion of the widget tree.  It uses an `AnimatedBuilder` to rebuild the UI when the animation values change.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/animations/staggered-animations.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nclass StaggerAnimation extends StatelessWidget {\n  StaggerAnimation({super.key, required this.controller}) :\n\n    // Each animation defined here transforms its value during the subset\n    // of the controller's duration defined by the animation's interval.\n    // For example the opacity animation transforms its value during\n    // the first 10% of the controller's duration.\n\n    opacity = Tween<double>(\n      begin: 0.0,\n      end: 1.0,\n    ).animate(\n      CurvedAnimation(\n        parent: controller,\n        curve: const Interval(\n          0.0,\n          0.100,\n          curve: Curves.ease,\n        ),\n      ),\n    ),\n\n    // ... Other tween definitions ...\n    );\n\n  final AnimationController controller;\n  final Animation<double> opacity;\n  final Animation<double> width;\n  final Animation<double> height;\n  final Animation<EdgeInsets> padding;\n  final Animation<BorderRadius?> borderRadius;\n  final Animation<Color?> color;\n\n  // This function is called each time the controller \"ticks\" a new frame.\n  // When it runs, all of the animation's values will have been\n  // updated to reflect the controller's current value.\n  Widget _buildAnimation(BuildContext context, Widget? child) {\n    return Container(\n      padding: padding.value,\n      alignment: Alignment.bottomCenter,\n      child: Opacity(\n        opacity: opacity.value,\n        child: Container(\n          width: width.value,\n          height: height.value,\n          decoration: BoxDecoration(\n            color: color.value,\n            border: Border.all(\n              color: Colors.indigo[300]!,\n              width: 3,\n            ),\n            borderRadius: borderRadius.value,\n          ),\n        ),\n      ),\n    );\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return AnimatedBuilder(\n      builder: _buildAnimation,\n      animation: controller,\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Flutter Run Command Console\nDESCRIPTION: This code snippet illustrates how to run a Flutter app using the `flutter run` command. It shows the commands for running the default flavor (production) and a non-default flavor (staging). When running the default flavor, no `--flavor` argument is needed; for non-default flavors, it must be explicitly specified.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/tools/pubspec.md#_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n// Use this command to run the default flavor (production).\nflutter run\n\n// Use this command to run non-default flavors (staging).\nflutter run --flavor staging\n```\n\n----------------------------------------\n\nTITLE: Running Flutter in Profile Mode\nDESCRIPTION: This command compiles the Flutter application in profile mode, allowing for performance analysis with some debugging capabilities.  It is disabled on the emulator and simulator.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/testing/build-modes.md#_snippet_3\n\nLANGUAGE: terminal\nCODE:\n```\nflutter run --profile\n```\n\n----------------------------------------\n\nTITLE: Type Checking FocusNode Context Before Migration (Dart)\nDESCRIPTION: This Dart code snippet demonstrates how to check if a FocusNode is attached to an EditableText widget before the migration.  It relies on inspecting the widget property of the FocusNode's context to determine the type of widget.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/editable-text-focus-attachment.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nfinal Widget? focusedWidget = primaryFocus?.context?.widget;\nif (focusedWidget is EditableText) {\n  widget.controller.text = 'Updated Text';\n}\n```\n\n----------------------------------------\n\nTITLE: Replace Layer.findAll method\nDESCRIPTION: This snippet demonstrates the migration from the deprecated `Layer.findAll` method to using `Layer.findAllAnnotations(offset).annotations` instead. This change unifies the implementations of `find` and `findAll`.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/1-22-deprecations.md#_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nfindAll(offset);\n```\n\nLANGUAGE: dart\nCODE:\n```\nfindAllAnnotations(offset).annotations;\n```\n\n----------------------------------------\n\nTITLE: FittedBox within Center Widget in Flutter\nDESCRIPTION: This example places FittedBox inside a Center widget. Because Center allows FittedBox to take the size of the Text, no scaling occurs. The Text is rendered without any resizing or scaling.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/layout/constraints.md#_snippet_49\n\nLANGUAGE: dart\nCODE:\n```\nconst Center(child: FittedBox(child: Text('Some Example Text.')))\n```\n\n----------------------------------------\n\nTITLE: Flutter Spaced Items Interactive Example in Dart\nDESCRIPTION: This interactive DartPad example demonstrates a complete Flutter application that displays a list of evenly spaced items within a scrollable column. It uses LayoutBuilder, SingleChildScrollView, ConstrainedBox, and Column widgets. The number of items is dynamically generated, allowing for experimentation with different screen sizes and item counts.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/lists/spaced-items.md#_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\n\nvoid main() => runApp(const SpacedItemsList());\n\nclass SpacedItemsList extends StatelessWidget {\n  const SpacedItemsList({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    const items = 4;\n\n    return MaterialApp(\n      title: 'Flutter Demo',\n      debugShowCheckedModeBanner: false,\n      theme: ThemeData(\n        colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),\n        cardTheme: CardThemeData(color: Colors.blue.shade50),\n      ),\n      home: Scaffold(\n        body: LayoutBuilder(\n          builder: (context, constraints) {\n            return SingleChildScrollView(\n              child: ConstrainedBox(\n                constraints: BoxConstraints(minHeight: constraints.maxHeight),\n                child: Column(\n                  mainAxisAlignment: MainAxisAlignment.spaceBetween,\n                  crossAxisAlignment: CrossAxisAlignment.stretch,\n                  children: List.generate(\n                    items,\n                    (index) => ItemWidget(text: 'Item $index'),\n                  ),\n                ),\n              ),\n            );\n          },\n        ),\n      ),\n    );\n  }\n}\n\nclass ItemWidget extends StatelessWidget {\n  const ItemWidget({super.key, required this.text});\n\n  final String text;\n\n  @override\n  Widget build(BuildContext context) {\n    return Card(child: SizedBox(height: 100, child: Center(child: Text(text))));\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Synthetic Package in l10n.yaml (YAML)\nDESCRIPTION: This YAML snippet demonstrates how to disable the synthetic package generation by setting `synthetic-package: false` in the `l10n.yaml` file. It also shows how to configure the output directory for the generated localization files using `arb-dir` or `output-dir`.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/flutter-generate-i10n-source.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nsynthetic-package: false\n\n# The files are generated into the path specified by `arb-dir`\narb-dir: lib/i18n\n\n# Or, specifically provide an output path:\noutput-dir: lib/src/generated/i18n\n```\n\n----------------------------------------\n\nTITLE: Overriding WidgetsLocalizations After Migration (Dart)\nDESCRIPTION: This code snippet shows how to override WidgetsLocalizations to provide custom translations after the migration. The `reorderItemRight` getter is overridden in a subclass of `WidgetsLocalizationsEn`.  A separate class `MaterialLocalizationsMyLanguage` now extends `MaterialLocalizationsEn` without overriding the removed localization strings.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/material-localized-strings.md#_snippet_3\n\nLANGUAGE: Dart\nCODE:\n```\nclass MaterialLocalizationsMyLanguage extends MaterialLocalizationsEn {\n  // ...\n}\n\nclass WidgetsLocalizationsMyLanguage extends WidgetsLocalizationsEn {\n  // ...\n  @override\n  String get reorderItemRight => 'my translation';\n}\n```\n\n----------------------------------------\n\nTITLE: Building FittedBox within Center Widget in Flutter\nDESCRIPTION: This example shows how FittedBox behaves when placed inside a Center widget. The Center widget allows the FittedBox to have any size it wants, up to the screen size.  The FittedBox then sizes itself to the Text. No scaling happens because the FittedBox and Text have the same size.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/layout/constraints.md#_snippet_19\n\nLANGUAGE: dart\nCODE:\n```\n'Center(\\n'   'child: FittedBox(\\n'   '      child: Text(\\'Some Example Text.\\')));'\n```\n\n----------------------------------------\n\nTITLE: Using Custom Font in Text Widget Flutter\nDESCRIPTION: This snippet demonstrates how to apply a custom font to a Text widget in Flutter. It uses the TextStyle object's fontFamily property to specify the custom font name (MyCustomFont), which was previously defined in the pubspec.yaml file. This applies the custom font to the text displayed within the widget.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/xamarin-forms-devs.md#_snippet_51\n\nLANGUAGE: dart\nCODE:\n```\n@override\nWidget build(BuildContext context) {\n  return Scaffold(\n    appBar: AppBar(title: const Text('Sample App')),\n    body: const Center(\n      child: Text(\n        'This is a custom font text',\n        style: TextStyle(fontFamily: 'MyCustomFont'),\n      ),\n    ),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Flutter Integration Test (PowerShell)\nDESCRIPTION: This PowerShell command executes the integration test located at `.\\integration_test\\app_test.dart`. It resolves dependencies, downloads packages, connects to available devices, and runs the tests. The output shows the progress and results of the test execution.\nSOURCE: https://github.com/flutter/website/blob/main/src/_includes/docs/test/integration/windows-example.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nPS C:\\path\\to\\counter_app> flutter test .\\integration_test\\app_test.dart\nResolving dependencies...\nDownloading packages...\n  flutter_lints 3.0.2 (4.0.0 available)\n  leak_tracker 10.0.4 (10.0.5 available)\n  leak_tracker_flutter_testing 3.0.3 (3.0.5 available)\n  lints 3.0.0 (4.0.0 available)\n  material_color_utilities 0.8.0 (0.11.1 available)\n  meta 1.12.0 (1.15.0 available)\n  test_api 0.7.0 (0.7.1 available)\n  vm_service 14.2.1 (14.2.2 available)\nGot dependencies!\n8 packages have newer versions incompatible with dependency constraints.\nTry `flutter pub outdated` for more information.\n\nConnected devices:\n\nWindows (desktop) • windows • windows-x64    • Microsoft Windows [Version 10.0.22631.3593]\nChrome (web)      • chrome  • web-javascript • Google Chrome 124.0.6367.207\nEdge (web)        • edge    • web-javascript • Microsoft Edge 124.0.2478.97\n\n[1]: Windows (windows)\n[2]: Chrome (chrome)\n[3]: Edge (edge)\n\nPlease choose one (or \"q\" to quit\"): 1\n\n00:00 +0: loading C:/path/to/counter_app/integration_test/app_test.dart               B\n00:29 +0: loading C:/path/to/counter_app/counter_app/integration_test/app_test.dart   29.1s\n√ Built build\\windows\\x64\\runner\\Debug\\counter_app.exe\n00:31 +1: All tests passed!\n```\n\n----------------------------------------\n\nTITLE: TargetPlatform Enum Definition After Update - Dart\nDESCRIPTION: This snippet shows the updated TargetPlatform enum definition, including the newly added 'linux' and 'windows' values. This change requires updates to switch statements to handle these new cases. Failing to do so results in analyzer warnings.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/target-platform-linux-windows.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nenum TargetPlatform {\n  android,\n  fuchsia,\n  iOS,\n  linux, // new value\n  macOS,\n  windows, // new value\n}\n```\n\n----------------------------------------\n\nTITLE: Copy and modify existing ScrollBehavior - After Migration\nDESCRIPTION: This snippet demonstrates how to copy the existing ScrollBehavior from the context using copyWith and modify its dragDevices property. This allows you to adjust the scroll behavior without creating a completely new ScrollBehavior class. Requires a BuildContext to access the existing ScrollBehavior.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/default-scroll-behavior-drag.md#_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\n// ScrollBehavior can be copied and adjusted.\nfinal ScrollController controller = ScrollController();\nScrollConfiguration(\n  behavior: ScrollConfiguration.of(context).copyWith(dragDevices: {\n    PointerDeviceKind.touch,\n    PointerDeviceKind.mouse,\n  }),\n  child: ListView.builder(\n    controller: controller,\n    itemBuilder: (BuildContext context, int index) {\n     return Text('Item $index');\n    }\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a Scroll View with SingleChildScrollView in Flutter (Dart)\nDESCRIPTION: Shows how to create a scrollable view in Flutter using SingleChildScrollView.  It wraps a Column containing a list of PersonView widgets, allowing the content to scroll if it exceeds the screen size.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/compose-devs.md#_snippet_13\n\nLANGUAGE: dart\nCODE:\n```\nSingleChildScrollView(\n  child: Column(\n    children: mockPersons\n        .map(\n          (person) => PersonView(\n            person: person,\n          ),\n        )\n        .toList(),\n  ),\n),\n```\n\n----------------------------------------\n\nTITLE: Updating ColorScheme.fromSeed with fidelity variant in Dart\nDESCRIPTION: This code snippet demonstrates how to update the `ColorScheme.fromSeed` method to maintain color brightness by setting `dynamicSchemeVariant` to `DynamicSchemeVariant.fidelity`. This ensures the generated `ColorScheme` remains bright, even if the source color is bright and has high chroma.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/new-color-scheme-roles.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nColorScheme.fromSeed(\n    seedColor: Color(0xFF0000FF), // Bright blue\n)\n\n```\n\n----------------------------------------\n\nTITLE: Handling Platform Channel Calls in Swift (iOS)\nDESCRIPTION: This Swift code snippet demonstrates how to handle method calls received on a platform channel in an iOS environment. It creates a `FlutterMethodChannel` associated with the flutter view, sets a handler to respond to method calls, and returns a greeting when the 'bar' method is called with an argument.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/resources/architectural-overview.md#_snippet_9\n\nLANGUAGE: Swift\nCODE:\n```\n// iOS (Swift)\nlet channel = FlutterMethodChannel(name: \"foo\", binaryMessenger: flutterView)\nchannel.setMethodCallHandler {\n  (call: FlutterMethodCall, result: FlutterResult) -> Void in\n  switch (call.method) {\n    case \"bar\": result(\"Hello, \\(call.arguments as! String)\")\n    default: result(FlutterMethodNotImplemented)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Add Git Dependency with Path in pubspec.yaml\nDESCRIPTION: This YAML snippet shows how to define a Git dependency with a specified path in the `pubspec.yaml` file. This is used when the package is located in a subdirectory within the Git repository. It uses the URL of the Git repository and the path to the package.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/packages-and-plugins/using-packages.md#_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  packageA:\n    git:\n      url: https://github.com/flutter/packages.git\n      path: packages/packageA\n```\n\n----------------------------------------\n\nTITLE: File structure of local repository (Plaintext)\nDESCRIPTION: Demonstrates the file structure generated after executing the `flutter build aar` command. It shows the directory organization of the local Maven repository, including AAR and POM files for different build modes (debug, profile, release).\nSOURCE: https://github.com/flutter/website/blob/main/src/content/add-to-app/android/project-setup.md#_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\nbuild/host/outputs/repo\n└── com\n    └── example\n        └── flutter_module\n            ├── flutter_release\n            │   ├── 1.0\n            │   │   ├── flutter_release-1.0.aar\n            │   │   ├── flutter_release-1.0.aar.md5\n            │   │   ├── flutter_release-1.0.aar.sha1\n            │   │   ├── flutter_release-1.0.pom\n            │   │   ├── flutter_release-1.0.pom.md5\n            │   │   └── flutter_release-1.0.pom.sha1\n            │   ├── maven-metadata.xml\n            │   ├── maven-metadata.xml.md5\n            │   └── maven-metadata.xml.sha1\n            ├── flutter_profile\n            │   ├── ...\n            └── flutter_debug\n                └── ...\n```\n\n----------------------------------------\n\nTITLE: Defining Swift Package Products\nDESCRIPTION: This snippet shows how to define a library product within a `Package.swift` file, specifying whether it should be linked statically or dynamically.  It defines the plugin's module and its linkage type.\nSOURCE: https://github.com/flutter/website/blob/main/src/_includes/docs/swift-package-manager/migrate-objective-c-plugin.md#_snippet_9\n\nLANGUAGE: swift\nCODE:\n```\nproducts: [\n    .library(name: \"plugin-name\", type: .static, targets: [\"plugin_name\"])\n],\n```\n\n----------------------------------------\n\nTITLE: Adding Debug-staging Build Settings in Xcode\nDESCRIPTION: This snippet shows an example of setting the `API_BASE_URL` for the `Debug-staging` build configuration.  This allows for different environments to be targeted during debugging. The setting is added to a `.xcconfig` file.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/deployment/flavors-ios.md#_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\n# Debug-staging build settings\nAPI_BASE_URL = staging.flavors.com/api\n```\n\n----------------------------------------\n\nTITLE: Enable Analytics Reporting in Flutter\nDESCRIPTION: This command enables Flutter's analytics reporting, including crash reports and feature usage statistics. This allows Flutter to send data to Google to help improve the framework.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/reference/crash-reporting.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ flutter --enable-analytics\n```\n\n----------------------------------------\n\nTITLE: SwiftUI View Creation\nDESCRIPTION: Illustrates how to create a simple view in SwiftUI using a struct that conforms to the View protocol. It displays static text within the view's body.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/swiftui-devs.md#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nstruct HomePage: View {\n  var body: some View {\n    Text(\"Hello, World!\")\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Dart If-Else Statement Snippet\nDESCRIPTION: Inserts an if statement with an else block. No dependencies are required. Input: None. Output: An if-else statement structure.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/tools/vs-code.md#_snippet_4\n\nLANGUAGE: Dart\nCODE:\n```\nif (condition) {  } else {  }\n```\n\n----------------------------------------\n\nTITLE: Build Flutter macOS Project\nDESCRIPTION: Builds the Flutter macOS project in release mode using the `flutter build macos --release` command.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/deployment/macos.md#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nflutter build macos --release\n```\n\n----------------------------------------\n\nTITLE: AlertDialog Layout Before Scrollable Update - Dart\nDESCRIPTION: This code snippet shows the AlertDialog layout before the scrollable update. The title and content widgets are placed consecutively in a Column, leading to overflow issues when the content is too tall.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/scrollable-alert-dialog.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nColumn(\n  mainAxisSize: MainAxisSize.min,\n  crossAxisAlignment: CrossAxisAlignment.stretch,\n  children: <Widget>[\n    if (title != null)\n      Padding(\n        padding: titlePadding ?? EdgeInsets.fromLTRB(24, 24, 24, content == null ? 20 : 0),\n        child: DefaultTextStyle(\n          style: titleTextStyle ?? dialogTheme.titleTextStyle ?? theme.textTheme.title,\n          child: Semantics(\n          child: title,\n          namesRoute: true,\n          container: true,\n          ),\n        ),\n      ),\n    if (content != null)\n      Flexible(\n        child: Padding(\n        padding: contentPadding,\n        child: DefaultTextStyle(\n          style: contentTextStyle ?? dialogTheme.contentTextStyle ?? theme.textTheme.subhead,\n          child: content,\n        ),\n      ),\n    ),\n    // ...\n  ],\n);\n```\n\n----------------------------------------\n\nTITLE: Custom Golden File Comparator Setup (Deprecated)\nDESCRIPTION: This code snippet shows how a custom golden file comparator might have been used to work around the previous bug in `integration_test`. This workaround is no longer necessary with the updated default comparator.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/integration-test-default-golden-comparator.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:integration_test/integration_test.dart';\nimport 'package:my_integration_test/custom_golden_file_comparator.dart';\n\nvoid main() {\n  goldenFileComparator = CustomGoldenFileComparatorThatWorks();\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Import Google Sign-In Package\nDESCRIPTION: Imports the google_sign_in package, providing the GoogleSignIn class for user authentication. This package is a prerequisite for authenticating users with their Google identity before accessing Google APIs.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/data-and-backend/google-apis.md#_snippet_1\n\nLANGUAGE: Dart\nCODE:\n```\n/// Provides the `GoogleSignIn` class\nimport 'package:google_sign_in/google_sign_in.dart';\n```\n\n----------------------------------------\n\nTITLE: Display Weather with GCD (Swift)\nDESCRIPTION: Displays the weather results in a SwiftUI view, using the view model to fetch the data asynchronously. The `onAppear` modifier triggers the `load()` function when the view appears.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/dart-swift-concurrency.md#_snippet_2\n\nLANGUAGE: Swift\nCODE:\n```\nstruct ContentView: View {\n    @State var viewModel = ContentViewModel()\n    var body: some View {\n        Text(viewModel.result?.rawValue ?? \"Loading...\")\n            .onAppear {\n                viewModel.load()\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Flutter Driver Tests with Chrome\nDESCRIPTION: This command runs Flutter integration tests using the flutter drive command. It specifies the driver script (`test_driver/integration_test.dart`), the target test file (`integration_test/app_test.dart`), and the device (`chrome`).\nSOURCE: https://github.com/flutter/website/blob/main/src/content/testing/integration-tests/index.md#_snippet_13\n\nLANGUAGE: console\nCODE:\n```\n$ flutter drive \\\n  --driver=test_driver/integration_test.dart \\\n  --target=integration_test/app_test.dart \\\n  -d chrome\n```\n\n----------------------------------------\n\nTITLE: Build Windows application\nDESCRIPTION: Builds the Windows application after migrating the project. This step verifies that the changes were successful and that the application is functioning correctly.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/windows-dark-mode.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nflutter build windows\n```\n\n----------------------------------------\n\nTITLE: TabBar Usage Before TabAlignment Migration (Dart)\nDESCRIPTION: This code shows how a scrollable TabBar was implemented before the introduction of the TabBar.tabAlignment property. The tabs are aligned to the start without any specific offset.  This snippet is used for comparison against the updated implementation using `TabAlignment.start`.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/tab-alignment.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nTabBar(\n  isScrollable: true,\n  tabs: List<Tab>.generate(\n    count,\n    (int index) => Tab(text: 'Tab $index'),\n  ).toList(),\n);\n```\n\n----------------------------------------\n\nTITLE: Loading Images from Network in Flutter\nDESCRIPTION: This Flutter code demonstrates loading an image from a URL using the `Image.network` constructor. The code takes a URL as input and displays the image fetched from the network.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/react-native-devs.md#_snippet_16\n\nLANGUAGE: Dart\nCODE:\n```\nImage.network('https://docs.flutter.dev/assets/images/docs/owl.jpg');\n```\n\n----------------------------------------\n\nTITLE: Memory Management Example in Dart\nDESCRIPTION: This Dart code demonstrates object allocation, retainment, reachability, and garbage collection concepts. It shows how objects are retained in memory through retaining paths and how they become unreachable when these paths are broken.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/tools/devtools/memory.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nclass Child{}\n\nclass Parent {\n  Child? child;\n}\n\nParent parent1 = Parent();\n\nvoid myFunction() {\n\n  Child? child = Child();\n\n  // The `child` object was allocated in memory.\n  // It's now retained from garbage collection\n  // by one retaining path (root …-> myFunction -> child).\n\n  Parent? parent2 = Parent()..child = child;\n  parent1.child = child;\n\n  // At this point the `child` object has three retaining paths:\n  // root …-> myFunction -> child\n  // root …-> myFunction -> parent2 -> child\n  // root -> parent1 -> child\n\n  child = null;\n  parent1.child = null;\n  parent2 = null;\n\n  // At this point, the `child` instance is unreachable\n  // and will eventually be garbage collected.\n\n  …\n}\n```\n\n----------------------------------------\n\nTITLE: TextInputClient Abstract Class Definition Dart\nDESCRIPTION: Defines the abstract `TextInputClient` class with the required `currentAutofillScope` getter. All implementations of `TextInputClient` must provide a concrete implementation for this getter to enable autofill capabilities.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/add-currentAutofillScope-to-TextInputClient.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nabstract class TextInputClient {\n  AutofillScope get currentAutofillScope;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding app_en.arb template file - JSON\nDESCRIPTION: This JSON file defines the English localization messages. It includes a `helloWorld` key with the corresponding English text and a description for the key.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/accessibility-and-internationalization/internationalization.md#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"helloWorld\": \"Hello World!\",\n  \"@helloWorld\": {\n    \"description\": \"The conventional newborn programmer greeting\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Plugin Configuration - YAML\nDESCRIPTION: This snippet shows the structure of the `plugin` field in the `pubspec.yaml` file, which is used to configure settings specifically for Flutter plugins. It includes settings for different platforms such as Android, iOS, macOS, Windows, Linux and Web.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/tools/pubspec.md#_snippet_17\n\nLANGUAGE: YAML\nCODE:\n```\nflutter:\n  plugin:\n    platforms:\n      android: # Optional\n        package: com.example.my_plugin\n        pluginClass: MyPlugin\n        dartPluginClass: MyPluginClassName\n        ffiPlugin: true\n        default_package: my_plugin_name\n        fileName: my_file.dart\n      ios: # Optional\n        pluginClass: MyPlugin\n        dartPluginClass: MyPluginClassName\n        ffiPlugin: true\n        default_package: my_plugin_name\n        fileName: my_file.dart\n        sharedDarwinSource: true\n      macos: # Optional\n        pluginClass: MyPlugin\n        dartPluginClass: MyPluginClassName\n        ffiPlugin: true\n        default_package: my_plugin_name\n        fileName: my_file.dart\n        sharedDarwinSource: true\n      windows: # Optional\n        pluginClass: MyPlugin\n        dartPluginClass: MyPluginClassName\n        ffiPlugin: true\n        default_package: my_plugin_name\n        fileName: my_file.dart\n      linux: # Optional\n        pluginClass: MyPlugin\n        dartPluginClass: MyPluginClassName\n        ffiPlugin: true\n        default_package: my_plugin_name\n        fileName: my_file.dart\n      web: # Optional\n        ffiPlugin: true\n        default_package: my_plugin_name\n        fileName: my_file.dart\n    implements: # Optional\n      - example_platform_interface\n```\n\n----------------------------------------\n\nTITLE: Displaying Flutter Help Information (console)\nDESCRIPTION: This code snippet shows how to display the help information for the `flutter` command-line tool. The `--help` flag provides a list of available commands and options, while the `--verbose` flag provides more detailed information.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/reference/flutter-cli.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ flutter --help --verbose\n```\n\n----------------------------------------\n\nTITLE: Dart Do-While Loop Snippet\nDESCRIPTION: Inserts a do-while loop. No dependencies are required. Input: None. Output: A basic do-while loop structure.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/tools/vs-code.md#_snippet_9\n\nLANGUAGE: Dart\nCODE:\n```\ndo {  } while (condition);\n```\n\n----------------------------------------\n\nTITLE: LimitedBox within UnconstrainedBox in Flutter\nDESCRIPTION: This example demonstrates a LimitedBox nested inside an UnconstrainedBox. The UnconstrainedBox provides infinite constraints, which triggers LimitedBox to limit the maximum width to 100 for its child Container. This prevents rendering errors associated with infinite width.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/layout/constraints.md#_snippet_47\n\nLANGUAGE: dart\nCODE:\n```\nUnconstrainedBox(\n  child: LimitedBox(\n    maxWidth: 100,\n    child: Container(\n      color: Colors.red,\n      width: double.infinity,\n      height: 100,\n    ),\n  ),\n)\n```\n\n----------------------------------------\n\nTITLE: Pass Scrollable Context to Painter Dart\nDESCRIPTION: This snippet shows how to pass the `BuildContext` and the `ScrollableState` to the `BubblePainter`. This allows the painter to access layout information and determine the bubble's position within the scrollable area.  The `ScrollableState` is passed to the painter, enabling it to access the `Viewport` for calculating bubble position.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/effects/gradient-bubbles.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nBubblePainter(\n  colors: colors,\n  bubbleContext: context,\n  scrollable: ScrollableState(),\n),\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Project\nDESCRIPTION: This command creates a new Flutter project from an existing example, without overwriting existing files. This step ensures a clean environment for analyzing and running the example application.\nSOURCE: https://github.com/flutter/website/blob/main/examples/animation/animate4/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nflutter create --no-overwrite $PROJECT\n```\n\n----------------------------------------\n\nTITLE: Applying Flutter Fix Changes via Command Line\nDESCRIPTION: This command applies all the suggested fixes for deprecated APIs to the entire Flutter project. Use with caution, as it modifies the project's source code.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/tools/flutter-fix.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ dart fix --apply\n```\n\n----------------------------------------\n\nTITLE: Calculate Child Rect in paintChildren (Dart)\nDESCRIPTION: This snippet calculates the `Rect` that determines where the background image should be positioned. This is done by using the `verticalAlignment`, along with the size of the list item and the size of the background image.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/effects/parallax-scrolling.md#_snippet_13\n\nLANGUAGE: dart\nCODE:\n```\n@override\nvoid paintChildren(FlowPaintingContext context) {\n  // Calculate the position of this list item within the viewport.\n  final scrollableBox = scrollable.context.findRenderObject() as RenderBox;\n  final listItemBox = listItemContext.findRenderObject() as RenderBox;\n  final listItemOffset = listItemBox.localToGlobal(\n    listItemBox.size.centerLeft(Offset.zero),\n    ancestor: scrollableBox,\n  );\n\n  // Determine the percent position of this list item within the\n  // scrollable area.\n  final viewportDimension = scrollable.position.viewportDimension;\n  final scrollFraction = (listItemOffset.dy / viewportDimension).clamp(\n    0.0,\n    1.0,\n  );\n\n  // Calculate the vertical alignment of the background\n  // based on the scroll percent.\n  final verticalAlignment = Alignment(0.0, scrollFraction * 2 - 1);\n\n  // Convert the background alignment into a pixel offset for\n  // painting purposes.\n  final backgroundSize =\n      (backgroundImageKey.currentContext!.findRenderObject() as RenderBox)\n          .size;\n  final listItemSize = context.size;\n  final childRect = verticalAlignment.inscribe(\n    backgroundSize,\n    Offset.zero & listItemSize,\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Deprecated buildToolbar Override in Flutter\nDESCRIPTION: This snippet shows the deprecated method of overriding the `buildToolbar` method in a custom `TextSelectionControls` class to customize the text selection toolbar. This approach is no longer recommended; `contextMenuBuilder` should be used instead. It takes context, global editable region, text line height, selection midpoint, endpoints, delegate, clipboard status and last secondary tap down position as parameters and returns a custom toolbar widget.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/context-menus.md#_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\n// Deprecated.\nclass _MyMaterialTextSelectionControls extends MaterialTextSelectionControls {\n  @override\n  Widget buildToolbar(\n    BuildContext context,\n    Rect globalEditableRegion,\n    double textLineHeight,\n    Offset selectionMidpoint,\n    List<TextSelectionPoint> endpoints,\n    TextSelectionDelegate delegate,\n    ClipboardStatusNotifier clipboardStatus,\n    Offset lastSecondaryTapDownPosition,\n  ) {\n    return _MyCustomToolbar();\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: ThemeData Before Migration (CardTheme, DialogTheme, TabBarTheme)\nDESCRIPTION: Shows the previous implementation using `CardTheme`, `DialogTheme`, and `TabBarTheme` directly in `ThemeData`. This code needs to be updated to use the `xxxThemeData` versions.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/material-theme-system-updates.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nfinal ThemeData theme = ThemeData(\n    cardTheme: CardTheme(),\n    dialogTheme: DialogTheme(),\n    tabBarTheme: TabBarTheme(),\n);\n```\n\n----------------------------------------\n\nTITLE: InputChip - After Migration - Case 2 - Dart\nDESCRIPTION: This code snippet demonstrates the migration for the case where Semantics is used for more than just button semantics. The 'button: true' property is removed from the Semantics widget, but the other properties like 'hint' are kept.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/material-chip-button-semantics.md#_snippet_3\n\nLANGUAGE: Dart\nCODE:\n```\nWidget myInputChip = InputChip(\n  onPressed: () {},\n  label: Semantics(\n    hint: 'Example Hint',\n    child: Text('My Input Chip'),\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Generating Dart Localization Files from ARB - Console\nDESCRIPTION: This command generates Dart localization files (`intl_messages_<locale>.dart` and `intl_messages_all.dart`) from the specified ARB files (`intl_*.arb`). It disables deferred loading and uses the specified Dart file (`lib/main.dart`) to define the message structure. The output directory is set to `lib/l10n`.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/accessibility-and-internationalization/internationalization.md#_snippet_41\n\nLANGUAGE: console\nCODE:\n```\n$ dart run intl_translation:generate_from_arb \\\n        --output-dir=lib/l10n --no-use-deferred-loading \\\n        lib/main.dart lib/l10n/intl_*.arb\n```\n\n----------------------------------------\n\nTITLE: Analyzing Dart Code\nDESCRIPTION: This command runs the Dart analyzer on the project's Dart code. It identifies potential issues such as syntax errors, type errors, and style violations.\nSOURCE: https://github.com/flutter/website/blob/main/examples/layout/lakes/step4/README.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndart analyze\n```\n\n----------------------------------------\n\nTITLE: Enabling Localization in pubspec.yaml (YAML)\nDESCRIPTION: This snippet shows how to enable Flutter localization generation in the `pubspec.yaml` file.  Setting `generate: true` instructs the Flutter tool to generate localization files.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/flutter-generate-i10n-source.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nflutter:\n  generate: true\n```\n\n----------------------------------------\n\nTITLE: Importing SQLite and Path Packages\nDESCRIPTION: This snippet demonstrates how to import the necessary packages (`dart:async`, `package:flutter/widgets.dart`, `package:path/path.dart`, and `package:sqflite/sqflite.dart`) for working with SQLite databases in a Flutter application.  It's essential to import these packages to access the required classes and functions.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/persistence/sqlite.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nimport 'dart:async';\n\nimport 'package:flutter/widgets.dart';\nimport 'package:path/path.dart';\nimport 'package:sqflite/sqflite.dart';\n```\n\n----------------------------------------\n\nTITLE: Running Linux GoogleTest tests\nDESCRIPTION: This command executes Linux GoogleTest tests for a Flutter plugin from the command line. Replace \"my_plugin\" with the actual plugin project name. Ensure the example app is built in debug or release mode, and adjust the path accordingly.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/testing/testing-plugins.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nbuild/linux/plugins/x64/debug/my_plugin/my_plugin_test\n```\n\n----------------------------------------\n\nTITLE: Building macOS Platform View Widget\nDESCRIPTION: Implements the `build` method for a Flutter widget to host a native macOS view using `AppKitView`. It defines a view type, creation parameters, and sets the layout direction. The `StandardMessageCodec` is used to encode the creation parameters.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/platform-integration/macos/platform-views.md#_snippet_1\n\nLANGUAGE: Dart\nCODE:\n```\nWidget build(BuildContext context) {\n  // This is used in the platform side to register the view.\n  const String viewType = '<platform-view-type>';\n  // Pass parameters to the platform side.\n  final Map<String, dynamic> creationParams = <String, dynamic>{};\n\n  return AppKitView(\n    viewType: viewType,\n    layoutDirection: TextDirection.ltr,\n    creationParams: creationParams,\n    creationParamsCodec: const StandardMessageCodec(),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Building Row with Multiple Expanded Children in Flutter\nDESCRIPTION: This snippet builds a Row with multiple Expanded widgets. Each Expanded widget takes up an equal portion of the available space within the Row. The children's widths are determined by the Expanded widgets, not by their intrinsic sizes.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/layout/constraints.md#_snippet_26\n\nLANGUAGE: dart\nCODE:\n```\n'Row(children:[\\n'   'Expanded(\\n'   '       child: Container(color: red, child: Text(\\'…\\')))\\n'   '   Expanded(\\n'   '       child: Container(color: green, child: Text(\\'Goodbye!\\'))]'\n```\n\n----------------------------------------\n\nTITLE: Setting Initial Route with FlutterViewController (Objective-C)\nDESCRIPTION: This snippet shows how to initialize a FlutterViewController directly in Objective-C and set the initial route to '/onboarding'. The `project`, `nibName`, and `bundle` parameters are set to nil.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/add-to-app/ios/add-flutter-screen.md#_snippet_19\n\nLANGUAGE: Objective-C\nCODE:\n```\nFlutterViewController* flutterViewController =\n      [[FlutterViewController alloc] initWithProject:nil\n                                        initialRoute:@\"/onboarding\"\n                                             nibName:nil\n                                              bundle:nil];\n```\n\n----------------------------------------\n\nTITLE: Enable Oversized Image Highlighting - Flutter\nDESCRIPTION: This Dart code snippet enables highlighting of oversized images in Flutter by setting `debugInvertOversizedImages` to `true`. This inverts the colors and flips images that are using significantly more memory than required for their display size, aiding in performance optimization.  It requires importing the Flutter rendering library.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/tools/devtools/legacy-inspector.md#_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nvoid showOversizedImages() {\n  debugInvertOversizedImages = true;\n}\n```\n\n----------------------------------------\n\nTITLE: settings.gradle.kts using flutter-plugin-loader\nDESCRIPTION: This Kotlin snippet shows an updated `settings.gradle.kts` file that uses the `flutter-plugin-loader` plugin instead of reading the `.flutter-plugins` file directly.  It defines the flutterSdkPath and includes the flutter_tools gradle files. It also adds google, mavenCentral and gradlePluginPortal repositories. The core change is the `dev.flutter.flutter-plugin-loader` which handles plugin loading.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/flutter-plugins-configuration.md#_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\npluginManagement {\n    val flutterSdkPath = run {\n        val properties = java.util.Properties()\n        file(\"local.properties\").inputStream().use { properties.load(it) }\n        val flutterSdkPath = properties.getProperty(\"flutter.sdk\")\n        require(flutterSdkPath != null) { \"flutter.sdk not set in local.properties\" }\n        flutterSdkPath\n    }\n\n    includeBuild(\"$flutterSdkPath/packages/flutter_tools/gradle\")\n\n    repositories {\n        google()\n        mavenCentral()\n        gradlePluginPortal()\n    }\n}\n\nplugins {\n    // Note the use of the flutter-plugin-loader versus reading '.flutter-plugins'\n    id(\"dev.flutter.flutter-plugin-loader\") version \"1.0.0\"\n    id(\"com.android.application\") version \"8.1.0\" apply false\n    id(\"org.jetbrains.kotlin.android\") version \"1.8.22\" apply false\n}\n\ninclude(\":app\")\n```\n\n----------------------------------------\n\nTITLE: Running Flutter Tests\nDESCRIPTION: This command executes the Flutter test suite for the project. It verifies the functionality of the code and ensures that it meets the expected requirements.\nSOURCE: https://github.com/flutter/website/blob/main/examples/layout/lakes/step4/README.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nflutter test\n```\n\n----------------------------------------\n\nTITLE: Accessing Card, Dialog, and TabBar Themes (After)\nDESCRIPTION: This code demonstrates how to access the CardTheme, DialogTheme, and TabBarTheme from the Theme and their respective 'of' methods after the normalization changes. The type of the theme objects has changed to `CardThemeData`, `DialogThemeData`, and `TabBarThemeData` respectively.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/component-theme-normalization.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nfinal CardThemeData cardTheme = Theme.of(context).cardTheme;\nfinal CardThemeData cardTheme = CardTheme.of(context);\n\nfinal DialogThemeData dialogTheme = Theme.of(context).dialogTheme;\nfinal DialogThemeData dialogTheme = DialogTheme.of(context);\n\nfinal TabBarThemeData tabBarTheme = Theme.of(context).tabBarTheme;\nfinal TabBarThemeData tabBarTheme = TabBarTheme.of(context);\n```\n\n----------------------------------------\n\nTITLE: Chaining Tweens for Complex Animation Effects\nDESCRIPTION: This example shows how to combine a Tween<Offset> and a CurveTween using the chain() method. This creates a more sophisticated animation by first applying the curve and then translating the offset.  The tween is then driven by the animation to create the final Animation<Offset>.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/animation/page-route-animation.md#_snippet_4\n\nLANGUAGE: Dart\nCODE:\n```\nconst begin = Offset(0.0, 1.0);\nconst end = Offset.zero;\nconst curve = Curves.ease;\n\nvar tween = Tween(begin: begin, end: end).chain(CurveTween(curve: curve));\n```\n\nLANGUAGE: Dart\nCODE:\n```\nreturn SlideTransition(position: animation.drive(tween), child: child);\n```\n\n----------------------------------------\n\nTITLE: Building a Stop Icon Widget in Flutter\nDESCRIPTION: This snippet defines a Flutter widget, `StopIcon`, which displays a stop icon in the center of a radial progress bar during the downloading phase. It utilizes `GestureDetector` for tap actions, `Stack` for layering, and `AnimatedOpacity` for visual transitions based on the download status. It also includes the `ProgressIndicatorWidget` and `ButtonShapeWidget` which are likely defined elsewhere.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/effects/download-button.md#_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\n@override\nWidget build(BuildContext context) {\n  return GestureDetector(\n    onTap: _onPressed,\n    child: Stack(\n      children: [\n        ButtonShapeWidget(\n          transitionDuration: transitionDuration,\n          isDownloaded: _isDownloaded,\n          isDownloading: _isDownloading,\n          isFetching: _isFetching,\n        ),\n        Positioned.fill(\n          child: AnimatedOpacity(\n            duration: transitionDuration,\n            opacity: _isDownloading || _isFetching ? 1.0 : 0.0,\n            curve: Curves.ease,\n            child: Stack(\n              alignment: Alignment.center,\n              children: [\n                ProgressIndicatorWidget(\n                  downloadProgress: downloadProgress,\n                  isDownloading: _isDownloading,\n                  isFetching: _isFetching,\n                ),\n                if (_isDownloading)\n                  const Icon(\n                    Icons.stop,\n                    size: 14.0,\n                    color: CupertinoColors.activeBlue,\n                  ),\n              ],\n            ),\n          ),\n        ),\n      ],\n    ),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: TextField canRequestFocus Before Migration (Dart)\nDESCRIPTION: Demonstrates the use of `TextField.canRequestFocus` before the deprecation. The `canRequestFocus` parameter is set directly on the `TextField` widget. This approach is now deprecated and will trigger an error in debug mode.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/can-request-focus.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nclass _MyWidgetState extends State<MyWidget> {\n  @override\n  Widget build(BuildContext context) {\n    return TextField(\n      canRequestFocus: false,\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Platform View in Plugin\nDESCRIPTION: This Swift code demonstrates how to register a platform view within a Flutter plugin by modifying the plugin's main file. It retrieves the Flutter registrar, creates an instance of `NativeViewFactory`, and registers the factory with a specific ID.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/platform-integration/macos/platform-views.md#_snippet_4\n\nLANGUAGE: Swift\nCODE:\n```\nimport Cocoa\nimport FlutterMacOS\n\npublic class Plugin: NSObject, FlutterPlugin {\n  public static func register(with registrar: FlutterPluginRegistrar) {\n    let factory = NativeViewFactory(messenger: registrar.messenger)\n    registrar.register(factory, withId: \"<platform-view-type>\")\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Show a banner ad using AdWidget in Flutter\nDESCRIPTION: This code snippet shows how to display a loaded banner ad using the `AdWidget`. The `AdWidget` is wrapped in a `SafeArea` to avoid obstruction by device notches and a `SizedBox` to maintain a consistent size. It checks if the banner ad is loaded and, if so, renders the `AdWidget`; otherwise, it displays an empty `SizedBox`.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/plugins/google-mobile-ads.md#_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\n@override\nWidget build(BuildContext context) {\n  return SafeArea(\n    child: SizedBox(\n      width: widget.adSize.width.toDouble(),\n      height: widget.adSize.height.toDouble(),\n      child:\n          _bannerAd == null\n              // Nothing to render yet.\n              ? const SizedBox()\n              // The actual ad.\n              : AdWidget(ad: _bannerAd!),\n    ),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Showing Layout Guidelines in Flutter\nDESCRIPTION: This code snippet shows how to enable layout guidelines in Flutter, which visually represent render boxes, alignments, paddings, scroll views, clippings and spacers. It uses the `debugPaintSizeEnabled` property from the `flutter/rendering.dart` package. Setting `debugPaintSizeEnabled` to `true` enables the guidelines.  No inputs are required.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/tools/devtools/inspector.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/rendering.dart';\n\nvoid showLayoutGuidelines() {\n  debugPaintSizeEnabled = true;\n}\n```\n\n----------------------------------------\n\nTITLE: Flutter Project Setup and Execution\nDESCRIPTION: These commands create, analyze, test and run a flutter project. The commands are executed sequentially using the Flutter CLI. It requires Flutter SDK to be installed and configured correctly.\nSOURCE: https://github.com/flutter/website/blob/main/examples/layout/row_column/README.md#_snippet_0\n\nLANGUAGE: Dart\nCODE:\n```\nflutter create --no-overwrite $PROJECT\n```\n\nLANGUAGE: Dart\nCODE:\n```\ncd $PROJECT\n```\n\nLANGUAGE: Dart\nCODE:\n```\ndart analyze\n```\n\nLANGUAGE: Dart\nCODE:\n```\nflutter test\n```\n\nLANGUAGE: Dart\nCODE:\n```\nflutter run\n```\n\n----------------------------------------\n\nTITLE: Generate Private Key using OpenSSL\nDESCRIPTION: Generates a private key for creating a certificate. This key is used in subsequent steps to create a certificate signing request (CSR) and a signed certificate.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/platform-integration/windows/building.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nopenssl genrsa -out mykeyname.key 2048\n```\n\n----------------------------------------\n\nTITLE: Running a Flutter Web App in Chrome with WebAssembly\nDESCRIPTION: This command runs the Flutter web application in the Chrome browser using WebAssembly (Wasm). The `--wasm` flag enables the Wasm rendering backend, which can provide performance benefits. Chrome needs to be installed.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/platform-integration/web/building.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ flutter run -d chrome --wasm\n```\n\n----------------------------------------\n\nTITLE: Applying Plugins with Plugin DSL in app/build.gradle (Groovy)\nDESCRIPTION: This snippet shows how to apply the necessary plugins using the Plugin DSL in the app/build.gradle file. This block should be added to the top of the file.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/flutter-gradle-plugin-apply.md#_snippet_5\n\nLANGUAGE: Groovy\nCODE:\n```\nplugins {\n    id \"com.android.application\"\n    id \"kotlin-android\"\n    id \"dev.flutter.flutter-gradle-plugin\"\n}\n```\n\n----------------------------------------\n\nTITLE: Running Integration Tests on iOS Device\nDESCRIPTION: This command runs integration tests for a Flutter app on a connected iOS device. It targets the specified `app_test.dart` file within the `integration_test` directory.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/testing/integration-tests/index.md#_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ flutter test integration_test/app_test.dart\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Layout in Flutter\nDESCRIPTION: This code snippet shows how to create a simple layout in Flutter using widgets like `Scaffold`, `AppBar`, `Center`, and `ElevatedButton`. It demonstrates how to structure a basic UI with a button and padding.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/android-devs.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\n@override\nWidget build(BuildContext context) {\n  return Scaffold(\n    appBar: AppBar(title: const Text('Sample App')),\n    body: Center(\n      child: ElevatedButton(\n        style: ElevatedButton.styleFrom(\n          padding: const EdgeInsets.only(left: 20, right: 30),\n        ),\n        onPressed: () {},\n        child: const Text('Hello'),\n      ),\n    ),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Migrate GestureDetectors from kind to supportedDevices - Before Migration\nDESCRIPTION: This snippet shows the usage of the deprecated `kind` parameter in a VerticalDragGestureRecognizer.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/default-scroll-behavior-drag.md#_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nVerticalDragGestureRecognizer(\n  kind: PointerDeviceKind.touch,\n);\n```\n\n----------------------------------------\n\nTITLE: Setting a custom ScrollBehavior for your application - After Migration\nDESCRIPTION: This snippet demonstrates how to extend MaterialScrollBehavior to override the dragDevices getter, allowing you to customize which PointerDeviceKinds can trigger scrolling. It then applies this custom ScrollBehavior to the MaterialApp for app-wide effect. Requires importing relevant Flutter libraries for UI and gestures.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/default-scroll-behavior-drag.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nclass MyCustomScrollBehavior extends MaterialScrollBehavior {\n  // Override behavior methods and getters like dragDevices\n  @override\n  Set<PointerDeviceKind> get dragDevices => { \n    PointerDeviceKind.touch,\n    PointerDeviceKind.mouse,\n    // etc.\n  };\n}\n\n// Set ScrollBehavior for an entire application.\nMaterialApp(\n  scrollBehavior: MyCustomScrollBehavior(),\n  // ...\n);\n```\n\n----------------------------------------\n\nTITLE: Applying a Theme in Flutter using MaterialApp\nDESCRIPTION: This Flutter code demonstrates how to apply a theme to a `MaterialApp` widget. It sets the primary color to `cyan` and the brightness to `dark` using `ThemeData`.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/react-native-devs.md#_snippet_33\n\nLANGUAGE: dart\nCODE:\n```\n@override\nWidget build(BuildContext context) {\n  return MaterialApp(\n    theme: ThemeData(primaryColor: Colors.cyan, brightness: Brightness.dark),\n    home: const StylingPage(),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Platform-Specific Widget Implementation\nDESCRIPTION: Demonstrates how to use `defaultTargetPlatform` to render a platform-specific widget in Flutter.  It conditionally returns different widgets based on the operating system the application is running on.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/platform-integration/macos/platform-views.md#_snippet_5\n\nLANGUAGE: Dart\nCODE:\n```\nWidget build(BuildContext context) {\n  // This is used in the platform side to register the view.\n  const String viewType = '<platform-view-type>';\n  // Pass parameters to the platform side.\n  final Map<String, dynamic> creationParams = <String, dynamic>{};\n\n  switch (defaultTargetPlatform) {\n    case TargetPlatform.android:\n    // return widget on Android.\n    case TargetPlatform.iOS:\n    // return widget on iOS.\n    case TargetPlatform.macOS:\n    // return widget on macOS.\n    default:\n      throw UnsupportedError('Unsupported platform view');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Disable Deep Linking in info.plist (XML)\nDESCRIPTION: This code snippet demonstrates how to disable Flutter's default deep linking by setting the `FlutterDeepLinkingEnabled` key to `false` within your app's `info.plist` file. This is necessary when using third-party deep linking plugins.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/deep-links-flag-change.md#_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n <key>FlutterDeepLinkingEnabled</key>\n <false/>\n```\n\n----------------------------------------\n\nTITLE: Stateless Widget example in Flutter\nDESCRIPTION: This Flutter code snippet showcases a simple `StatelessWidget`.  It takes a text parameter in its constructor and displays it in a `Text` widget.  The text is immutable.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/react-native-devs.md#_snippet_35\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\n\nvoid main() => runApp(\n  const MyStatelessWidget(\n    text: 'StatelessWidget Example to show immutable data',\n  ),\n);\n\nclass MyStatelessWidget extends StatelessWidget {\n  const MyStatelessWidget({super.key, required this.text});\n\n  final String text;\n\n  @override\n  Widget build(BuildContext context) {\n    return Center(child: Text(text, textDirection: TextDirection.ltr));\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Define Sliding Gradient Transform in Flutter\nDESCRIPTION: Defines a `_SlidingGradientTransform` class that implements `GradientTransform`. This class is used to transform the `LinearGradient` to create the appearance of horizontal sliding. It takes a `slidePercent` as a parameter, which determines the amount of translation.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/effects/shimmer-loading.md#_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nclass _SlidingGradientTransform extends GradientTransform {\n  const _SlidingGradientTransform({required this.slidePercent});\n\n  final double slidePercent;\n\n  @override\n  Matrix4? transform(Rect bounds, {TextDirection? textDirection}) {\n    return Matrix4.translationValues(bounds.width * slidePercent, 0.0, 0.0);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Data Loading and Display in Flutter\nDESCRIPTION: This Dart code demonstrates asynchronous data loading and display in a Flutter application. It loads data from a remote URL, parses it as JSON, and displays it in a ListView. The UI is updated using setState after the data is loaded.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/android-devs.md#_snippet_16\n\nLANGUAGE: dart\nCODE:\n```\nimport 'dart:convert';\n\nimport 'package:flutter/material.dart';\nimport 'package:http/http.dart' as http;\n\nvoid main() {\n  runApp(const SampleApp());\n}\n\nclass SampleApp extends StatelessWidget {\n  const SampleApp({super.key});\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: 'Sample App',\n      theme: ThemeData(\n        colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),\n      ),\n      home: const SampleAppPage(),\n    );\n  }\n}\n\nclass SampleAppPage extends StatefulWidget {\n  const SampleAppPage({super.key});\n\n  @override\n  State<SampleAppPage> createState() => _SampleAppPageState();\n}\n\nclass _SampleAppPageState extends State<SampleAppPage> {\n  List<Map<String, Object?>> widgets = [];\n\n  @override\n  void initState() {\n    super.initState();\n    loadData();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: const Text('Sample App')),\n      body: ListView.builder(\n        itemCount: widgets.length,\n        itemBuilder: (context, position) {\n          return getRow(position);\n        },\n      ),\n    );\n  }\n\n  Widget getRow(int i) {\n    return Padding(\n      padding: const EdgeInsets.all(10),\n      child: Text(\"Row ${widgets[i][\"title\"]}\"),\n    );\n  }\n\n  Future<void> loadData() async {\n    final dataURL = Uri.parse('https://jsonplaceholder.typicode.com/posts');\n    final response = await http.get(dataURL);\n    setState(() {\n      widgets =\n          (jsonDecode(response.body) as List).cast<Map<String, Object?>>();\n    });\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: License File Organization Example 1\nDESCRIPTION: This plaintext snippet demonstrates how to organize a LICENSE file when multiple components are present. Each component license should be separated by a line of 80 hyphens and start with the names of the packages to which the component license applies.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/packages-and-plugins/developing-packages.md#_snippet_29\n\nLANGUAGE: plaintext\nCODE:\n```\npackage_1\n\n<some license text>\n\n--------------------------------------------------------------------------------\npackage_2\n\n<some license text>\n```\n\n----------------------------------------\n\nTITLE: Using Intents After Migration (Dart)\nDESCRIPTION: This Dart code snippet demonstrates the recommended approach after the migration, using Intents to interact with the focused text field. It avoids direct type checking of the FocusNode's context and instead fires a ReplaceTextIntent to update the text.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/editable-text-focus-attachment.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nfinal BuildContext? focusedContext = primaryFocus?.context;\nif (focusedContext != null) {\n  Actions.maybeInvoke(focusedContext, ReplaceTextIntent('UpdatedText'));\n}\n```\n\n----------------------------------------\n\nTITLE: Fetch Photos from Network Endpoint\nDESCRIPTION: This function fetches a list of photos from a JSON endpoint using the provided HTTP client. It returns a `Future<http.Response>` that resolves to the HTTP response from the server.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/networking/background-parsing.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nFuture<http.Response> fetchPhotos(http.Client client) async {\n  return client.get(Uri.parse('https://jsonplaceholder.typicode.com/photos'));\n}\n```\n\n----------------------------------------\n\nTITLE: Updating UI After Deletion in Dart\nDESCRIPTION: This snippet illustrates how to update the Flutter UI after attempting to delete data. It checks for the presence of data in the snapshot and displays either the data title or 'Deleted' text. It also includes a button that triggers the `deleteAlbum` function when pressed, updating the UI using `setState`.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/networking/delete-data.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nColumn(\n  mainAxisAlignment: MainAxisAlignment.center,\n  children: <Widget>[\n    Text(snapshot.data?.title ?? 'Deleted'),\n    ElevatedButton(\n      child: const Text('Delete Data'),\n      onPressed: () {\n        setState(() {\n          _futureAlbum = deleteAlbum(\n            snapshot.data!.id.toString(),\n          );\n        });\n      },\n    ),\n  ],\n);\n```\n\n----------------------------------------\n\nTITLE: ConstrainedBox with Min/Max Dimensions in Flutter\nDESCRIPTION: This snippet shows how ConstrainedBox with min and max dimensions behaves when its parent forces it to be a specific size. The constraints defined in ConstrainedBox are ignored because the parent widget overrides the size. The Container has width 10, height 10.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/layout/constraints.md#_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nConstrainedBox(\n   constraints: BoxConstraints(\n              minWidth: 70, minHeight: 70,\n              maxWidth: 150, maxHeight: 150),\n      child: Container(color: red, width: 10, height: 10)))\n```\n\n----------------------------------------\n\nTITLE: Complete main.dart Example\nDESCRIPTION: This code demonstrates the complete `main.dart` file for the example Flutter application using package fonts.  It shows how to import the necessary packages, define a basic MaterialApp, and style a Text widget with the Raleway font from the `awesome_package`.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/design/package-fonts.md#_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\n\nvoid main() => runApp(const MyApp());\n\nclass MyApp extends StatelessWidget {\n  const MyApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return const MaterialApp(title: 'Package Fonts', home: MyHomePage());\n  }\n}\n\nclass MyHomePage extends StatelessWidget {\n  const MyHomePage({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      // The AppBar uses the app-default font.\n      appBar: AppBar(title: const Text('Package Fonts')),\n      body: const Center(\n        // This Text widget uses the Raleway font.\n        child: Text(\n          'Using the Raleway font from the awesome_package',\n          style: TextStyle(fontFamily: 'Raleway'),\n        ),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Migrate from copyWith to constructor in Dart\nDESCRIPTION: This snippet demonstrates how to migrate from using the RouteSettings.copyWith method to using the RouteSettings constructor to create a new RouteSettings instance with modified properties.  The old settings' arguments are preserved in the new RouteSettings object.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/routesettings-copywith-migration.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nRouteSettings newSettings = oldSettings.copyWith(name: 'new name');\n```\n\n----------------------------------------\n\nTITLE: Updating CupertinoContextMenu.previewBuilder in Flutter (Dart)\nDESCRIPTION: This snippet shows the updated code after migrating from `CupertinoContextMenu.previewBuilder` to the new `builder`. It uses `BorderRadiusTween` and `DecorationTween` along with `CurvedAnimation` and `Interval` to control the animation of the context menu.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/3-19-deprecations.md#_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nCupertinoContextMenu(\n  actions: <Widget>[\n    CupertinoContextMenuAction(\n      child: const Text('Action one'),\n      onPressed: () {},\n    ),\n  ],\n  builder: (BuildContext context, Animation<double> animation) {\n    final Animation<BorderRadius?> borderRadiusAnimation = BorderRadiusTween(\n      begin: BorderRadius.circular(0.0),\n      end: BorderRadius.circular(CupertinoContextMenu.kOpenBorderRadius),\n    ).animate(\n      CurvedAnimation(\n        parent: animation,\n        curve: Interval(\n          CupertinoContextMenu.animationOpensAt,\n          1.0,\n        ),\n      ),\n    );\n\n    final Animation<Decoration> boxDecorationAnimation = DecorationTween(\n      begin: const BoxDecoration(\n        color: Color(0xFFFFFFFF),\n        boxShadow: <BoxShadow>[],\n      ),\n      end: BoxDecoration(\n        color: Color(0xFFFFFFFF),\n        boxShadow: CupertinoContextMenu.kEndBoxShadow,\n      ),\n    ).animate(\n      CurvedAnimation(\n        parent: animation,\n        curve: Interval(\n          0.0,\n          CupertinoContextMenu.animationOpensAt,\n        )\n      )\n    );\n\n    return Container(\n      decoration: animation.value < CupertinoContextMenu.animationOpensAt\n        ? boxDecorationAnimation.value\n        : null,\n      child: FittedBox(\n        fit: BoxFit.cover,\n        child: ClipRRect(\n          borderRadius: borderRadiusAnimation.value ?? BorderRadius.circular(0.0),\n          child: SizedBox(\n            height: 150,\n            width: 150,\n            child: Image.asset('assets/photo.jpg'),\n          ),\n        ),\n      )\n    );\n   }\n )\n```\n\n----------------------------------------\n\nTITLE: Play Animation Sequence in Dart\nDESCRIPTION: The `_playAnimation` function starts the animation sequence. It first runs the animation forward and then reverses it. `orCancel` ensures that the animation is cancelled if it's disposed of during the animation sequence. If a `TickerCanceled` exception occurs, it means the animation was cancelled (likely due to disposal).\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/animations/staggered-animations.md#_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> _playAnimation() async {\n    try {\n      await _controller.forward().orCancel;\n      await _controller.reverse().orCancel;\n    } on TickerCanceled {\n      // The animation got canceled, probably because it was disposed of.\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Paint Fullscreen Gradient Dart\nDESCRIPTION: This snippet implements the `paint` method of the `BubblePainter` class. It calculates the bubble's position within the `Scrollable`, creates a gradient shader with the specified colors, and applies a matrix translation to offset the shader based on the bubble's position. This results in a full-screen gradient effect for the chat bubble.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/effects/gradient-bubbles.md#_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nclass BubblePainter extends CustomPainter {\n  BubblePainter({\n    required ScrollableState scrollable,\n    required BuildContext bubbleContext,\n    required List<Color> colors,\n  }) : _scrollable = scrollable,\n       _bubbleContext = bubbleContext,\n       _colors = colors;\n\n  final ScrollableState _scrollable;\n  final BuildContext _bubbleContext;\n  final List<Color> _colors;\n\n  @override\n  bool shouldRepaint(BubblePainter oldDelegate) {\n    return oldDelegate._scrollable != _scrollable ||\n        oldDelegate._bubbleContext != _bubbleContext ||\n        oldDelegate._colors != _colors;\n  }\n\n  @override\n  void paint(Canvas canvas, Size size) {\n    final scrollableBox = _scrollable.context.findRenderObject() as RenderBox;\n    final scrollableRect = Offset.zero & scrollableBox.size;\n    final bubbleBox = _bubbleContext.findRenderObject() as RenderBox;\n\n    final origin = bubbleBox.localToGlobal(\n      Offset.zero,\n      ancestor: scrollableBox,\n    );\n    final paint =\n        Paint()\n          ..shader = ui.Gradient.linear(\n            scrollableRect.topCenter,\n            scrollableRect.bottomCenter,\n            _colors,\n            [0.0, 1.0],\n            TileMode.clamp,\n            Matrix4.translationValues(-origin.dx, -origin.dy, 0.0).storage,\n          );\n    canvas.drawRect(Offset.zero & size, paint);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding Flutter Web in an Iframe\nDESCRIPTION: This HTML snippet demonstrates how to embed a Flutter web application within an iframe.  The `src` attribute of the iframe should point to the `index.html` file of your compiled Flutter web application.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/platform-integration/web/embedding-flutter-web.md#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<iframe src=\"https://url-to-your-flutter/index.html\"></iframe>\n```\n\n----------------------------------------\n\nTITLE: Switch Statement Before Migration - Dart\nDESCRIPTION: This code shows a switch statement handling TargetPlatform before the addition of 'linux' and 'windows'. It does not include a `default` case and is missing cases for the new enum values, leading to analyzer warnings after the update.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/target-platform-linux-windows.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nvoid dance(TargetPlatform platform) {\n  switch (platform) {\n    case TargetPlatform.android:\n      // Do Android dance.\n      break;\n    case TargetPlatform.fuchsia:\n      // Do Fuchsia dance.\n      break;\n    case TargetPlatform.iOS:\n      // Do iOS dance.\n      break;\n    case TargetPlatform.macOS:\n      // Do macOS dance.\n      break;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Add Path Dependency in pubspec.yaml\nDESCRIPTION: This YAML snippet shows how to define a path dependency in the `pubspec.yaml` file. This allows a Flutter app to depend on a local package located in the file system. The path is relative to the `pubspec.yaml` file.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/packages-and-plugins/using-packages.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  packageA:\n    path: ../packageA/\n```\n\n----------------------------------------\n\nTITLE: Migrating to SurfaceProducer API - Surface Creation - Java\nDESCRIPTION: This code snippet demonstrates how to create a Surface from a SurfaceProducer.  Instead of directly creating a Surface from a SurfaceTextureEntry, the getSurface() method is called on the SurfaceProducer. This approach allows Flutter to opaquely pick the best implementation for the current platform and API level, improving efficiency and flexibility. The old approach created a surface from the entry's surfaceTexture.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/android-surface-plugins.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n- Surface surface = new Surface(entry.surfaceTexture());\n+ Surface surface = producer.getSurface();\n```\n\n----------------------------------------\n\nTITLE: CheckboxThemeData Customization Before Migration (Dart)\nDESCRIPTION: This code snippet illustrates how to customize the CheckboxThemeData.fillColor property before the migration. The fillColor is defined to be red when the checkbox is unselected and null otherwise, leading to the fill color being used as the border color in the unselected state.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/checkbox-fillColor.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\ncheckboxTheme: CheckboxThemeData(\n  fillColor: MaterialStateProperty.resolveWith((states) {\n    if (!states.contains(MaterialState.selected)) {\n      return Colors.red;\n    }\n    return null;\n  }),\n),\n```\n\n----------------------------------------\n\nTITLE: Scrolling Widget Test - Dart\nDESCRIPTION: This test scrolls through a long list to find a specific item using `scrollUntilVisible()`. It first builds the app with a list of 10000 items. Then, it uses `find.byType(Scrollable)` to find the scrollable list and `find.byKey` to locate the target item. Finally, it asserts that the item is found in the list using `expect(itemFinder, findsOneWidget)`. Requires flutter_test dependency.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/testing/widget/scrolling.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\n// This is a basic Flutter widget test.\n//\n// To perform an interaction with a widget in your test, use the WidgetTester\n// utility that Flutter provides. For example, you can send tap and scroll\n// gestures. You can also use WidgetTester to find child widgets in the widget\n// tree, read text, and verify that the values of widget properties are correct.\n\nimport 'package:flutter/material.dart';\nimport 'package:flutter_test/flutter_test.dart';\n\nimport 'package:scrolling/main.dart';\n\nvoid main() {\n  testWidgets('finds a deep item in a long list', (tester) async {\n    // Build our app and trigger a frame.\n    await tester.pumpWidget(\n      MyApp(items: List<String>.generate(10000, (i) => 'Item $i')),\n    );\n\n    final listFinder = find.byType(Scrollable);\n    final itemFinder = find.byKey(const ValueKey('item_50_text'));\n\n    // Scroll until the item to be found appears.\n    await tester.scrollUntilVisible(itemFinder, 500.0, scrollable: listFinder);\n\n    // Verify that the item contains the correct text.\n    expect(itemFinder, findsOneWidget);\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Resources from Bundle Objective-C\nDESCRIPTION: This snippet demonstrates how to load resources from a bundle in Objective-C, using `SWIFTPM_MODULE_BUNDLE` when building as a Swift Package, and falling back to the standard method otherwise.  It adapts resource loading based on the build environment.\nSOURCE: https://github.com/flutter/website/blob/main/src/_includes/docs/swift-package-manager/migrate-objective-c-plugin.md#_snippet_11\n\nLANGUAGE: objective-c\nCODE:\n```\n#if SWIFT_PACKAGE\n   NSBundle *bundle = SWIFTPM_MODULE_BUNDLE;\n #else\n   NSBundle *bundle = [NSBundle bundleForClass:[self class]];\n #endif\n NSURL *imageURL = [bundle URLForResource:@\"image\" withExtension:@\"jpg\"];\n```\n\n----------------------------------------\n\nTITLE: Parsing Image (Conditional Logic) - Dart\nDESCRIPTION: This code snippet demonstrates a more complex migration strategy that checks if the Flutter Web engine uses the correct raw image rendering behavior and adjusts the parsing accordingly.  It uses a `Future<bool>` named `imageRawUsesCorrectBehavior` to determine whether to flip the image vertically or not, and adjusts the pixel format based on the behavior. It shows how to dynamically adapt to different Flutter versions. Takes image, width and height as input.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/raw-images-on-web-uses-correct-origin-and-colors.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nUint8List verticallyFlipImage(Uint8List sourceBytes, int width, int height) {\n  // Same as the example above.\n}\n\nlate Future<bool> imageRawUsesCorrectBehavior = (() async {\n  final ui.ImageDescriptor descriptor = ui.ImageDescriptor.raw(\n    await ui.ImmutableBuffer.fromUint8List(Uint8List.fromList(<int>[0xED, 0, 0, 0xFF])),\n    width: 1, height: 1, pixelFormat: ui.PixelFormat.rgba8888);\n  final ui.Image image = (await (await descriptor.instantiateCodec()).getNextFrame()).image;\n  final Uint8List resultPixels = Uint8List.sublistView(\n    (await image.toByteData(format: ui.ImageByteFormat.rawStraightRgba))!);\n  return resultPixels[0] == 0xED;\n})();\n\nFuture<ui.Image> parseMyImage(Uint8List image, int width, int height) async {\n  final Uint8List correctedImage = (await imageRawUsesCorrectBehavior) ?\n    verticallyFlipImage(image, width, height) : image;\n  final ui.ImageDescriptor descriptor = ui.ImageDescriptor.raw(\n    await ui.ImmutableBuffer.fromUint8List(correctedImage), // Use the corrected image\n    width: width,\n    height: height,\n    pixelFormat: ui.PixelFormat.bgra8888, // Use the alternate format\n  );\n  return (await (await descriptor.instantiateCodec()).getNextFrame()).image;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Package Details in Package.swift\nDESCRIPTION: This snippet highlights the sections within `Package.swift` that require modification for plugin-specific details.  It includes the package name, library name, target name, and header search path, all of which need to be customized.\nSOURCE: https://github.com/flutter/website/blob/main/src/_includes/docs/swift-package-manager/migrate-objective-c-plugin.md#_snippet_2\n\nLANGUAGE: Swift\nCODE:\n```\nlet package = Package(\n    // TODO: Update your plugin name.\n    name: [!\"plugin_name\"!],\n    platforms: [\n        .iOS(\"12.0\"),\n        .macOS(\"10.14\")\n    ],\n    products: [\n        // TODO: Update your library and target names.\n        // If the plugin name contains \"_\", replace with \"-\" for the library name\n        .library(name: [!\"plugin-name\"!], targets: [[!\"plugin_name\"!]])\n    ],\n    dependencies: [],\n    targets: [\n        .target(\n            // TODO: Update your target name.\n            name: [!\"plugin_name\"!],\n            dependencies: [],\n            resources: [\n                // TODO: If your plugin requires a privacy manifest\n                // (e.g. if it uses any required reason APIs), update the PrivacyInfo.xcprivacy file\n                // to describe your plugin's privacy impact, and then uncomment this line.\n                // For more information, see:\n                // https://developer.apple.com/documentation/bundleresources/privacy_manifest_files\n                // .process(\"PrivacyInfo.xcprivacy\"),\n\n                // TODO: If you have other resources that need to be bundled with your plugin, refer to\n                // the following instructions to add them:\n                // https://developer.apple.com/documentation/xcode/bundling-resources-with-a-swift-package\n            ],\n            cSettings: [\n                // TODO: Update your plugin name.\n                .headerSearchPath(\"include/[!plugin_name!]\")\n            ]\n        )\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Updating ListView Dynamically\nDESCRIPTION: This code snippet demonstrates a simple way to dynamically update a ListView in Flutter by creating a new List inside setState() and copying the data from the old list to the new list.  A GestureDetector is used to add a new row to the list on tap. It uses dart:developer for logging purposes.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/uikit-devs.md#_snippet_19\n\nLANGUAGE: Dart\nCODE:\n```\nimport 'dart:developer' as developer;\n\nimport 'package:flutter/material.dart';\n\nvoid main() {\n  runApp(const SampleApp());\n}\n\nclass SampleApp extends StatelessWidget {\n  const SampleApp({super.key});\n\n  // This widget is the root of your application.\n  @override\n  Widget build(BuildContext context) {\n    return const MaterialApp(title: 'Sample App', home: SampleAppPage());\n  }\n}\n\nclass SampleAppPage extends StatefulWidget {\n  const SampleAppPage({super.key});\n\n  @override\n  State<SampleAppPage> createState() => _SampleAppPageState();\n}\n\nclass _SampleAppPageState extends State<SampleAppPage> {\n  List<Widget> widgets = <Widget>[];\n\n  @override\n  void initState() {\n    super.initState();\n    for (int i = 0; i < 100; i++) {\n      widgets.add(getRow(i));\n    }\n  }\n\n  Widget getRow(int i) {\n    return GestureDetector(\n      onTap: () {\n        setState(() {\n          widgets = List.from(widgets);\n          widgets.add(getRow(widgets.length));\n          developer.log('row $i');\n        });\n      },\n      child: Padding(padding: const EdgeInsets.all(10), child: Text('Row $i')),\n    );\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: const Text('Sample App')),\n      body: ListView(children: widgets),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Cupertino Icons Dependency - YAML\nDESCRIPTION: This snippet demonstrates how to add a dependency on the `cupertino_icons` package within the `pubspec.yaml` file to provide Apple's Cupertino icons for use in Flutter applications.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/tools/pubspec.md#_snippet_29\n\nLANGUAGE: YAML\nCODE:\n```\ndependencies:\n  cupertino_icons: ^1.0.0\n```\n\n----------------------------------------\n\nTITLE: Flutter Tool Building and Dependency Resolution Output\nDESCRIPTION: This snippet shows the detailed output in the VS Code terminal during the building flutter tool and dependency resolution stage of the Flutter SDK initialization.  It includes steps like running pub upgrade, downloading various fonts and tools.\nSOURCE: https://github.com/flutter/website/blob/main/src/_includes/docs/install/flutter/vscode.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nBuilding flutter tool...\nRunning pub upgrade...\nResolving dependencies...\nGot dependencies.\nDownloading Material fonts...\nDownloading Gradle Wrapper...\nDownloading package sky_engine...\nDownloading flutter_patched_sdk tools...\nDownloading flutter_patched_sdk_product tools...\nDownloading windows-x64 tools...\nDownloading windows-x64/font-subset tools...\n```\n\n----------------------------------------\n\nTITLE: PopScope: Code before migration (onPopInvoked)\nDESCRIPTION: Illustrates the usage of PopScope and Form with the deprecated onPopInvoked callback before the introduction of generic types and onPopInvokedWithResult.  The callback only provides a boolean value indicating whether the pop happened. It relies on a global navigatorKey.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/popscope-with-result.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\n\nvoid main() {\n  runApp(\n    MaterialApp(\n      navigatorKey: nav,\n      home: Column(\n        children: [\n          Form(\n            canPop: false,\n            onPopInvoked: (bool didPop) {\n              if (didPop) {\n                return;\n              }\n              launchConfirmationDialog();\n            },\n            child: MyWidget(),\n          ),\n          PopScope(\n            canPop: false,\n            onPopInvoked: (bool didPop) {\n              if (didPop) {\n                return;\n              }\n              launchConfirmationDialog();\n            },\n            child: MyWidget(),\n          ),\n        ],\n      ),\n    ),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Dart Const and Final Variables Before Hot Reload\nDESCRIPTION: This Dart code defines a `const` variable `foo` and a `final` variable `bar`, both initialized with the value 1. The `onClick` function prints the values of both variables. This snippet demonstrates the difference in behavior between `const` and `final` variables during hot reload.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/tools/hot-reload.md#_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nconst foo = 1;\nfinal bar = foo;\nvoid onClick() {\n  print(foo);\n  print(bar);\n}\n```\n\n----------------------------------------\n\nTITLE: Running Flutter with Custom Dart Entrypoint and Library (Objective-C)\nDESCRIPTION: This Objective-C code snippet demonstrates how to launch a Flutter application using a custom Dart entrypoint and library. The `runWithEntrypoint:libraryURI:` method of `FlutterEngine` is used to execute a specific function within a specified Dart file, deviating from the default `main()` function in `lib/main.dart`. The Flutter framework must be imported.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/add-to-app/ios/add-flutter-screen.md#_snippet_15\n\nLANGUAGE: Objective-C\nCODE:\n```\n[flutterEngine runWithEntrypoint:@\"myOtherEntrypoint\" libraryURI:@\"other_file.dart\"];\n```\n\n----------------------------------------\n\nTITLE: Migrate testWidgets timeout - Dart\nDESCRIPTION: Illustrates how to migrate from the deprecated `initialTimeout` parameter in `testWidgets` to the `timeout` parameter using the `Timeout` class in Flutter tests.  This change provides a more reliable way to configure test timeouts.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/3-10-deprecations.md#_snippet_7\n\nLANGUAGE: Dart\nCODE:\n```\ntestWidgets('Test', (_) {}, initialTimeout:  Duration(seconds: 5));\n```\n\n----------------------------------------\n\nTITLE: InputChip with Semantics - Before Migration - Case 1 - Dart\nDESCRIPTION: This code snippet shows how InputChip was implemented before the semantic change. The label of the InputChip is wrapped with a Semantics widget to manually mark it as a button. This workaround is no longer needed and can cause issues after the change.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/material-chip-button-semantics.md#_snippet_0\n\nLANGUAGE: Dart\nCODE:\n```\nWidget myInputChip = InputChip(\n  onPressed: () {},\n  label: Semantics(\n    button: true,\n    child: Text('My Input Chip'),\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Project from Example\nDESCRIPTION: Creates a new Flutter project based on the example app code, avoiding overwriting existing files. The `$PROJECT` variable represents the path to the example app's directory within the repository.\nSOURCE: https://github.com/flutter/website/blob/main/examples/animation/animate5/README.md#_snippet_0\n\nLANGUAGE: Dart\nCODE:\n```\nflutter create --no-overwrite $PROJECT\n```\n\n----------------------------------------\n\nTITLE: Creating a Flutter Project\nDESCRIPTION: This command creates a new Flutter project from the example app's source code. The `--no-overwrite` flag prevents overwriting existing files if the project directory already exists.\nSOURCE: https://github.com/flutter/website/blob/main/examples/layout/lakes/step4/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nflutter create --no-overwrite $PROJECT\n```\n\n----------------------------------------\n\nTITLE: Implement Factory and Platform View - Swift\nDESCRIPTION: This Swift code snippet shows the implementation of the `FLNativeViewFactory` and `FLNativeView` classes, which are responsible for creating and managing the native iOS view within the Flutter application. The factory creates the platform view, and the platform view provides a reference to the UIView.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/platform-integration/ios/platform-views.md#_snippet_2\n\nLANGUAGE: Swift\nCODE:\n```\nimport Flutter\nimport UIKit\n\nclass FLNativeViewFactory: NSObject, FlutterPlatformViewFactory {\n    private var messenger: FlutterBinaryMessenger\n\n    init(messenger: FlutterBinaryMessenger) {\n        self.messenger = messenger\n        super.init()\n    }\n\n    func create(\n        withFrame frame: CGRect,\n        viewIdentifier viewId: Int64,\n        arguments args: Any?\n    ) -> FlutterPlatformView {\n        return FLNativeView(\n            frame: frame,\n            viewIdentifier: viewId,\n            arguments: args,\n            binaryMessenger: messenger)\n    }\n\n    /// Implementing this method is only necessary when the `arguments` in `createWithFrame` is not `nil`.\n    public func createArgsCodec() -> FlutterMessageCodec & NSObjectProtocol {\n          return FlutterStandardMessageCodec.sharedInstance()\n    }\n}\n\nclass FLNativeView: NSObject, FlutterPlatformView {\n    private var _view: UIView\n\n    init(\n        frame: CGRect,\n        viewIdentifier viewId: Int64,\n        arguments args: Any?,\n        binaryMessenger messenger: FlutterBinaryMessenger?\n    ) {\n        _view = UIView()\n        super.init()\n        // iOS views can be created here\n        createNativeView(view: _view)\n    }\n\n    func view() -> UIView {\n        return _view\n    }\n\n    func createNativeView(view _view: UIView){\n        _view.backgroundColor = UIColor.blue\n        let nativeLabel = UILabel()\n        nativeLabel.text = \"Native text from iOS\"\n        nativeLabel.textColor = UIColor.white\n        nativeLabel.textAlignment = .center\n        nativeLabel.frame = CGRect(x: 0, y: 0, width: 180, height: 48.0)\n        _view.addSubview(nativeLabel)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Showing Layout Guidelines in Flutter\nDESCRIPTION: This code snippet demonstrates how to enable layout guidelines in a Flutter application by setting the `debugPaintSizeEnabled` property to true. This overlays guidelines that display render boxes, alignments, paddings, scroll views, clippings, and spacers, which assists in understanding and debugging layouts. Requires importing the `flutter/rendering.dart` package.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/tools/devtools/legacy-inspector.md#_snippet_1\n\nLANGUAGE: Dart\nCODE:\n```\nimport 'package:flutter/rendering.dart';\n\nvoid showLayoutGuidelines() {\n  debugPaintSizeEnabled = true;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing StatefulWidget with Default Properties in Flutter\nDESCRIPTION: Creates a StatefulWidget named AnimatedContainerApp with a State class named _AnimatedContainerAppState.  The state class defines properties such as width, height, color, and borderRadius with default values, which will be updated when the user interacts with the UI. This snippet shows the initial setup of the stateful widget.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/animation/animated-container.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nclass AnimatedContainerApp extends StatefulWidget {\n  const AnimatedContainerApp({super.key});\n\n  @override\n  State<AnimatedContainerApp> createState() => _AnimatedContainerAppState();\n}\n\nclass _AnimatedContainerAppState extends State<AnimatedContainerApp> {\n  // Define the various properties with default values. Update these properties\n  // when the user taps a FloatingActionButton.\n  double _width = 50;\n  double _height = 50;\n  Color _color = Colors.green;\n  BorderRadiusGeometry _borderRadius = BorderRadius.circular(8);\n\n  @override\n  Widget build(BuildContext context) {\n    // Fill this out in the next steps.\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Building Flutter Web App for Release\nDESCRIPTION: This command builds the Flutter web application for deployment, generating the necessary files and assets in the `/build/web` directory.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/deployment/web.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nflutter build web\n```\n\n----------------------------------------\n\nTITLE: Painting Children with Parallax Effect Flutter\nDESCRIPTION: This code snippet calculates the position of a list item within the viewport, determines the scroll fraction, and calculates the vertical alignment of the background based on the scroll percent. It then converts the background alignment into a pixel offset for painting purposes and paints the background using a transform.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/effects/parallax-scrolling.md#_snippet_14\n\nLANGUAGE: dart\nCODE:\n```\n@override\nvoid paintChildren(FlowPaintingContext context) {\n  // Calculate the position of this list item within the viewport.\n  final scrollableBox = scrollable.context.findRenderObject() as RenderBox;\n  final listItemBox = listItemContext.findRenderObject() as RenderBox;\n  final listItemOffset = listItemBox.localToGlobal(\n    listItemBox.size.centerLeft(Offset.zero),\n    ancestor: scrollableBox,\n  );\n\n  // Determine the percent position of this list item within the\n  // scrollable area.\n  final viewportDimension = scrollable.position.viewportDimension;\n  final scrollFraction = (listItemOffset.dy / viewportDimension).clamp(\n    0.0,\n    1.0,\n  );\n\n  // Calculate the vertical alignment of the background\n  // based on the scroll percent.\n  final verticalAlignment = Alignment(0.0, scrollFraction * 2 - 1);\n\n  // Convert the background alignment into a pixel offset for\n  // painting purposes.\n  final backgroundSize =\n      (backgroundImageKey.currentContext!.findRenderObject() as RenderBox)\n          .size;\n  final listItemSize = context.size;\n  final childRect = verticalAlignment.inscribe(\n    backgroundSize,\n    Offset.zero & listItemSize,\n  );\n\n  // Paint the background.\n  context.paintChild(\n    0,\n    transform:\n        Transform.translate(offset: Offset(0.0, childRect.top)).transform,\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Stack Widget Before ClipBehavior Migration Dart\nDESCRIPTION: This code snippet demonstrates how the `Stack` widget was used with `overflow: Overflow.visible` before the clipBehavior migration. It shows a basic setup with Directionality, Center, and a Stack containing a SizedBox.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/clip-behavior.md#_snippet_0\n\nLANGUAGE: Dart\nCODE:\n```\n    await tester.pumpWidget(\n      Directionality(\n        textDirection: TextDirection.ltr,\n        child: Center(\n          child: Stack(\n            overflow: Overflow.visible,\n            children: const <Widget>[\n              SizedBox(\n                width: 100,\n                height: 100,\n              ),\n            ],\n          ),\n        ),\n      ),\n    );\n```\n\n----------------------------------------\n\nTITLE: InputChip with Semantics - Before Migration - Case 2 - Dart\nDESCRIPTION: This code snippet shows an alternative pre-migration scenario where the Semantics widget is used for other properties, like 'hint'. The button property is manually set to true.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/material-chip-button-semantics.md#_snippet_2\n\nLANGUAGE: Dart\nCODE:\n```\nWidget myInputChip = InputChip(\n  onPressed: () {},\n  label: Semantics(\n    button: true,\n    hint: 'Example Hint',\n    child: Text('My Input Chip'),\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Using StatelessWidget - Displaying Static Text in Flutter\nDESCRIPTION: This code snippet demonstrates how to display static text using a `StatelessWidget` in Flutter. The `Text` widget is initialized with a string and a style, and it renders the text without any state changes during runtime.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/android-devs.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nText(\n  'I like Flutter!',\n  style: TextStyle(fontWeight: FontWeight.bold),\n);\n```\n\n----------------------------------------\n\nTITLE: Default Flavor Example YAML\nDESCRIPTION: This example shows how to set the `production` flavor as the default in a Flutter Android app. When the `production` flavor is set as default, running `flutter run` will execute the app with the `production` flavor, without needing to explicitly specify it with `--flavor`.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/tools/pubspec.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nflutter:\n  default-flavor: production\n```\n\n----------------------------------------\n\nTITLE: Migrate ButtonTheme.bar constructor\nDESCRIPTION: This snippet demonstrates how to migrate from the deprecated `ButtonTheme.bar` constructor to using `ButtonTheme` or `ButtonBarTheme` instead. It shows the original code using `ButtonTheme.bar` and the updated code using `ButtonTheme` and `ButtonBarTheme` with the same properties.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/1-22-deprecations.md#_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nButtonTheme.bar(\n  minWidth: 10.0,\n  alignedDropdown: true,\n  height: 40.0,\n);\n```\n\nLANGUAGE: dart\nCODE:\n```\nButtonTheme(\n  minWidth: 10.0,\n  alignedDropdown: true,\n  height: 40.0,\n);\n```\n\nLANGUAGE: dart\nCODE:\n```\nButtonBarTheme(\n  data: ButtonBarThemeData(\n    buttonMinWidth: 10.0,\n    buttonAlignedDropdown: true,\n    buttonHeight: 40.0,\n  )\n);\n```\n\n----------------------------------------\n\nTITLE: Running iOS and macOS XCTest tests with xcodebuild\nDESCRIPTION: This command runs iOS and macOS XCTest tests from the command line using xcodebuild. It requires Xcode and a configured workspace (Runner.xcworkspace) for the Flutter plugin's example app. Code signing might need to be configured in Xcode.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/testing/testing-plugins.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nxcodebuild test -workspace Runner.xcworkspace -scheme Runner -configuration Debug\n```\n\n----------------------------------------\n\nTITLE: Specifying Asset Transformations in Flutter using YAML\nDESCRIPTION: This snippet shows how to specify asset transformations in the `pubspec.yaml` file. It lists the assets to be transformed and the associated transformer package (`vector_graphics_compiler`). This configuration ensures that `assets/logo.svg` is transformed by the specified package during the build process.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/assets/asset-transformation.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nflutter:\n  assets:\n    - path: assets/logo.svg\n      transformers:\n        - package: vector_graphics_compiler\n```\n\n----------------------------------------\n\nTITLE: Querying All Data from SQLite Table in Dart\nDESCRIPTION: This snippet shows the `getAll()` method for retrieving all ToDo items from the SQLite database. It performs a query on the `_kTableTodo` table, retrieves the `id` and `task` columns, and creates a `Todo` instance for each entry.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/app-architecture/design-patterns/sql.md#_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\nFuture<Result<List<Todo>>> getAll() async {\n  try {\n    final entries = await _database!.query(\n      _kTableTodo,\n      columns: [_kColumnId, _kColumnTask],\n    );\n    final list =\n        entries\n            .map(\n              (element) => Todo(\n                id: element[_kColumnId] as int,\n                task: element[_kColumnTask] as String,\n              ),\n            )\n            .toList();\n    return Result.ok(list);\n  } on Exception catch (e) {\n    return Result.error(e);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: ButtonBarThemeData Usage (Before Migration) - Dart\nDESCRIPTION: This code snippet shows how to use the deprecated ButtonBarThemeData within ThemeData. This demonstrates that the ThemeDate.buttonBarTheme should be removed. Customization should now be done directly using OverflowBar properties.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/deprecate-buttonbar.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nThemeData(\n  buttonBarTheme: ButtonBarThemeData(\n    alignment: MainAxisAlignment.center,\n  ),\n),\n```\n\n----------------------------------------\n\nTITLE: Disabling Impeller on iOS using Info.plist\nDESCRIPTION: This XML snippet shows how to disable Impeller when deploying a Flutter application on iOS. By adding the `FLTEnableImpeller` key with a value of `false` to the `Info.plist` file, Impeller is disabled for the application.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/perf/impeller.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n  <key>FLTEnableImpeller</key>\n  <false />\n```\n\n----------------------------------------\n\nTITLE: Deprecated Buttons Replacement Dart\nDESCRIPTION: This snippet demonstrates the replacement of `FlatButton`, `RaisedButton`, and `OutlineButton` with `TextButton`, `ElevatedButton`, and `OutlinedButton` respectively. It highlights the change in widget names for material buttons. Requires the Flutter SDK.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/2-10-deprecations.md#_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nFlatButton(\n  onPressed: onPressed,\n  child: Text('Button'),\n  // ...\n);\n\nRaisedButton(\n  onPressed: onPressed,\n  child: Text('Button'),\n  // ...\n);\n\nOutlineButton(\n  onPressed: onPressed,\n  child: Text('Button'),\n  // ...\n);\n```\n\n----------------------------------------\n\nTITLE: Create EmbeddingV1ActivityTest - Java\nDESCRIPTION: This code snippet creates a test file specifically for `EmbeddingV1Activity`, using AndroidX test libraries and JUnit.  It includes an `ActivityTestRule` to handle the activity lifecycle during the test execution.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/plugin-api-migration.md#_snippet_6\n\nLANGUAGE: Java\nCODE:\n```\npackage io.flutter.plugins.firebase.core;\n\nimport androidx.test.rule.ActivityTestRule;\nimport io.flutter.plugins.firebasecoreexample.EmbeddingV1Activity;\nimport org.junit.Rule;\nimport org.junit.runner.RunWith;\n\n@RunWith(FlutterRunner.class)\npublic class EmbeddingV1ActivityTest {\n  @Rule\n  public ActivityTestRule<EmbeddingV1Activity> rule =\n          new ActivityTestRule<>(EmbeddingV1Activity.class);\n}\n\n```\n\n----------------------------------------\n\nTITLE: Centering Components CSS\nDESCRIPTION: Centers content within a div using CSS flexbox properties. Requires a basic HTML structure and uses flexbox to center the content horizontally and vertically. The grey-box class sets the background color, dimensions, font, and flexbox alignment.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/web-devs.md#_snippet_5\n\nLANGUAGE: CSS\nCODE:\n```\n.grey-box {\n    background-color: #e0e0e0; /* grey 300 */\n    width: 320px;\n    height: 240px;\n    font: 900 24px Roboto;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n}\n```\n\n----------------------------------------\n\nTITLE: DropdownMenu Text Style After Migration (Dart)\nDESCRIPTION: This code snippet shows how to explicitly set the text style of a DropdownMenu to match the previous (non-Material 3) default text style. This involves accessing the Theme's labelLarge text style.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/menus-text-style.md#_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nDropdownMenu<ColorLabel>(\n  textStyle: Theme.of(context).textTheme.labelLarge,\n  initialSelection: ColorLabel.green,\n  controller: colorController,\n  label: const Text('Color'),\n  dropdownMenuEntries: colorEntries,\n  onSelected: (ColorLabel? color) {\n    setState(() {\n      selectedColor = color;\n    });\n  },\n),\n```\n\n----------------------------------------\n\nTITLE: Enabling Material Design in Flutter\nDESCRIPTION: This YAML snippet demonstrates how to enable Material Design in a Flutter project by setting `uses-material-design` to `true` in the `pubspec.yaml` file. This ensures the `MaterialIcons` font is included in the app.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/react-native-devs.md#_snippet_30\n\nLANGUAGE: yaml\nCODE:\n```\nname: my_awesome_application\nflutter:\n  uses-material-design: true\n```\n\n----------------------------------------\n\nTITLE: Register Platform View in App Delegate - Swift\nDESCRIPTION: This Swift code snippet shows how to register the platform view factory in the application's `AppDelegate`. This is done within the `didFinishLaunchingWithOptions` method to make the native view available to the Flutter application.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/platform-integration/ios/platform-views.md#_snippet_3\n\nLANGUAGE: Swift\nCODE:\n```\nimport Flutter\nimport UIKit\n\n@UIApplicationMain\n@objc class AppDelegate: FlutterAppDelegate {\n    override func application(\n        _ application: UIApplication,\n        didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey : Any]?\n    ) -> Bool {\n        GeneratedPluginRegistrant.register(with: self)\n\n        guard let pluginRegistrar = self.registrar(forPlugin: \"plugin-name\") else { return false }\n\n        let factory = FLNativeViewFactory(messenger: pluginRegistrar.messenger())\n        pluginRegistrar.register(\n            factory,\n            withId: \"<platform-view-type>\")\n        return super.application(application, didFinishLaunchingWithOptions: launchOptions)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Create basic test case - Dart\nDESCRIPTION: Creates a basic integration test to verify the plugin is registered with the new embedder.  This test checks that the plugin properly registers and can be used.  It imports the required testing libraries and defines a simple test case.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/plugin-api-migration.md#_snippet_9\n\nLANGUAGE: Dart\nCODE:\n```\nimport 'package:flutter_test/flutter_test.dart';\nimport 'package:integration_test/integration_test.dart';\n\nvoid main() {\n  IntegrationTestWidgetsFlutterBinding.ensureInitialized();\n\n  testWidgets('Can get battery level', (tester) async {\n    final Battery battery = Battery();\n    final int batteryLevel = await battery.batteryLevel;\n    expect(batteryLevel, isNotNull);\n  });\n}\n\n```\n\n----------------------------------------\n\nTITLE: Building a Widget Tree in Flutter\nDESCRIPTION: This Flutter code demonstrates building a widget tree using Material Design widgets. The `MyApp` widget, a `StatelessWidget`, returns a `MaterialApp` widget, which contains an `AppBar` and a `Center` widget displaying 'Hello world'.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/react-native-devs.md#_snippet_11\n\nLANGUAGE: Dart\nCODE:\n```\n// Flutter\nimport 'package:flutter/material.dart';\n\nvoid main() => runApp(const MyApp());\n\nclass MyApp extends StatelessWidget {\n  const MyApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: 'Welcome to Flutter',\n      home: Scaffold(\n        appBar: AppBar(title: const Text('Welcome to Flutter')),\n        body: const Center(child: Text('Hello world')),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running the Flutter App\nDESCRIPTION: This command runs the Flutter app on a connected device or emulator. It compiles the Dart code and deploys it to the target platform, allowing the user to interact with the app.\nSOURCE: https://github.com/flutter/website/blob/main/examples/layout/base/README.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nflutter run\n```\n\n----------------------------------------\n\nTITLE: Implementing Grow Transition Flutter Dart\nDESCRIPTION: This StatelessWidget creates a grow transition effect using AnimatedBuilder. It takes a child widget and an animation object as input. The animation drives the size of a SizedBox, effectively scaling the child widget. It requires the Flutter material package and depends on an existing animation.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/animations/tutorial.md#_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nclass GrowTransition extends StatelessWidget {\n  const GrowTransition({\n    required this.child,\n    required this.animation,\n    super.key,\n  });\n\n  final Widget child;\n  final Animation<double> animation;\n\n  @override\n  Widget build(BuildContext context) {\n    return Center(\n      child: AnimatedBuilder(\n        animation: animation,\n        builder: (context, child) {\n          return SizedBox(\n            height: animation.value,\n            width: animation.value,\n            child: child,\n          );\n        },\n        child: child,\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Chat History from Disk in Dart\nDESCRIPTION: Loads chat history from JSON files stored on disk. It reads each file, deserializes the JSON into a ChatMessage using `ChatMessage.fromJson()`, and adds it to a list. The history is then set on the LlmProvider instance, making it available for use. Requires `jsonDecode` and file system access.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ai-toolkit/feature-integration.md#_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> _loadHistory() async {\n  // read the history from disk\n  final history = <ChatMessage>[];\n  for (var i = 0;; ++i) {\n    final file = await _messageFile(i);\n    if (!file.existsSync()) break;\n\n    final map = jsonDecode(await file.readAsString());\n    history.add(ChatMessage.fromJson(map));\n  }\n\n  // set the history on the controller\n  _provider.history = history;\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating FlatButton with custom foreground color in Dart\nDESCRIPTION: This code snippet shows how to migrate from `FlatButton` with a custom `textColor` to `TextButton` using the `foregroundColor` property within `TextButton.styleFrom` to achieve the same result.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/buttons.md#_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nFlatButton(\n  textColor: Colors.red, // foreground\n  onPressed: () { },\n  child: Text('FlatButton with custom foreground/background'),\n)\n\nTextButton(\n  style: TextButton.styleFrom(\n    foregroundColor: Colors.red,\n  ),\n  onPressed: () { },\n  child: Text('TextButton with custom foreground'),\n)\n```\n\n----------------------------------------\n\nTITLE: Removing \"Cut\" button using contextMenuBuilder in Flutter\nDESCRIPTION: This code snippet shows how to remove the 'Cut' button from the context menu in a Flutter TextField using the contextMenuBuilder. It filters the buttonItems list to exclude the ContextMenuButtonType.cut.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/context-menus.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nTextField(\n  contextMenuBuilder: (context, editableTextState) {\n    final List<ContextMenuButtonItem> buttonItems =\n        editableTextState.contextMenuButtonItems;\n    buttonItems.removeWhere((ContextMenuButtonItem buttonItem) {\n      return buttonItem.type == ContextMenuButtonType.cut;\n    });\n    return AdaptiveTextSelectionToolbar.buttonItems(\n      anchors: editableTextState.contextMenuAnchors,\n      buttonItems: buttonItems,\n    );\n  },\n)\n```\n\n----------------------------------------\n\nTITLE: MaterialState usage before migration in Dart\nDESCRIPTION: Demonstrates how MaterialState was used before the migration to WidgetState. Includes examples of accessing a state, using MaterialStateProperty, creating a custom MaterialStateMouseCursor, and using MaterialStateBorderSide.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/material-state.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nMaterialState selected = MaterialState.selected;\n\nfinal MaterialStateProperty<Color> backgroundColor;\n\nclass _MouseCursor extends MaterialStateMouseCursor{\n  const _MouseCursor(this.resolveCallback);\n\n  final MaterialPropertyResolver<MouseCursor?> resolveCallback;\n\n  @override\n  MouseCursor resolve(Set<MaterialState> states) => resolveCallback(states) ?? MouseCursor.uncontrolled;\n}\n\nBorderSide side = MaterialStateBorderSide.resolveWith((Set<MaterialState> states) {\n  if (states.contains(MaterialState.selected)) {\n    return const BorderSide(color: Colors.red);\n  }\n  return null;\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Dart entrypoint (Kotlin)\nDESCRIPTION: This Kotlin code snippet shows how to create a FlutterFragment and specify a custom Dart entrypoint to execute.  The `dartEntrypoint` method is called with the name of the desired entrypoint, in this case \"mySpecialEntrypoint\".\nSOURCE: https://github.com/flutter/website/blob/main/src/content/add-to-app/android/add-flutter-fragment.md#_snippet_10\n\nLANGUAGE: Kotlin\nCODE:\n```\nval flutterFragment = FlutterFragment.withNewEngine()\n    .dartEntrypoint(\"mySpecialEntrypoint\")\n    .build()\n```\n\n----------------------------------------\n\nTITLE: Set Login Keychain as Default\nDESCRIPTION: This command sets the login keychain as the default keychain.  This is necessary after initializing a temporary keychain to avoid authentication issues with apps on the machine.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/deployment/ios.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nkeychain use-login\n```\n\n----------------------------------------\n\nTITLE: Initializing ThemeRepository and MainApp in main() - Dart\nDESCRIPTION: This snippet demonstrates how to initialize the `ThemeRepository` and `SharedPreferencesService` in the `main()` function and pass them as constructor arguments to the `MainApp` widget, implementing dependency injection. It shows how to create instances of these services and inject them into the application's root widget.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/app-architecture/design-patterns/key-value-data.md#_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() {\n  // ···\n  runApp(\n    MainApp(\n      themeRepository: ThemeRepository(SharedPreferencesService()),\n      // ···\n    ),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Resetting Individual Properties After Migration (PlatformDispatcher)\nDESCRIPTION: This snippet shows how to reset individual platform-specific properties using `tester.platformDispatcher` after migration. It uses `addTeardown` in conjunction with `clear` methods, mirroring the previous example but using the new accessor.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/window-singleton.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\ntestWidgets('test name', (WidgetTester tester) async {\n  addTeardown(tester.platformDispatcher.clearAccessibilityFeaturesTestValue);\n  addTeardown(tester.platformDispatcher.clearAlwaysUse24HourFormatTestValue);\n  addTeardown(tester.platformDispatcher.clearBrieflyShowPasswordTestValue);\n  addTeardown(tester.platformDispatcher.clearDefaultRouteNameTestValue);\n  addTeardown(tester.platformDispatcher.clearInitialLifecycleStateTestValue);\n  addTeardown(tester.platformDispatcher.clearLocalesTestValue);\n  addTeardown(tester.platformDispatcher.clearLocaleTestValue);\n  addTeardown(tester.platformDispatcher.clearNativeSpellCheckServiceDefinedTestValue);\n  addTeardown(tester.platformDispatcher.clearPlatformBrightnessTestValue);\n  addTeardown(tester.platformDispatcher.clearSemanticsEnabledTestValue);\n  addTeardown(tester.platformDispatcher.clearTextScaleFactorTestValue);\n});\n```\n\n----------------------------------------\n\nTITLE: Replace KeepAliveHandle.release with dispose in Flutter\nDESCRIPTION: This snippet shows how to replace the `release` method of `KeepAliveHandle` with `dispose`.  Calling `dispose` now executes the same functionality that `release` used to.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/3-19-deprecations.md#_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nKeepAliveHandle handle = KeepAliveHandle();\nhandle.release();\nhandle.dispose();\n```\n\nLANGUAGE: dart\nCODE:\n```\nKeepAliveHandle handle = KeepAliveHandle();\nhandle.dispose();\n```\n\n----------------------------------------\n\nTITLE: Styling OutlinedButton to resemble OutlineButton in Dart\nDESCRIPTION: This code snippet demonstrates how to style an `OutlinedButton` to visually resemble a deprecated `OutlineButton` using the `ButtonStyle` API.  It handles the outline color change on press using `MaterialStateProperty` to define the pressed outline color based on the theme's primary color.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/buttons.md#_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nfinal ButtonStyle outlineButtonStyle = OutlinedButton.styleFrom(\n  foregroundColor: Colors.black87,\n  minimumSize: Size(88, 36),\n  padding: EdgeInsets.symmetric(horizontal: 16),\n  shape: const RoundedRectangleBorder(\n    borderRadius: BorderRadius.all(Radius.circular(2)),\n  ),\n).copyWith(\n  side: MaterialStateProperty.resolveWith<BorderSide?>(\n    (Set<MaterialState> states) {\n      if (states.contains(MaterialState.pressed)) {\n        return BorderSide(\n          color: Theme.of(context).colorScheme.primary,\n          width: 1,\n        );\n      }\n      return null;\n    },\n  ),\n);\n\nOutlinedButton(\n  style: outlineButtonStyle,\n  onPressed: () { },\n  child: Text('Looks like an OutlineButton'),\n)\n```\n\n----------------------------------------\n\nTITLE: Migrate to GoldenFileComparator (After)\nDESCRIPTION: This code snippet shows the updated implementation using `GoldenFileComparator`. The `compareBytes` method is renamed to `compare`, `updateBytes` is renamed to `update`, and the parameter order of `update` is changed to `(Uri golden, Uint8List bytes)`.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/web-golden-comparator.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\n// After\nclass MyGenericGoldenComparator extends GoldenFileComparator {\n  @override\n  Future<bool> compare(Uint8List bytes, Uri golden) {\n    // used to be \"compareBytes\"\n  }\n\n  @override\n  Future<bool> update(Uri golden, Uint8List bytes) {\n    // used to be \"updateBytes\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Flutter command not found troubleshooting\nDESCRIPTION: This snippet shows the error message when the `flutter` command is not recognized. It indicates that Flutter has not been added to the PATH environment variable.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/install/help.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n'flutter' is not recognized as an internal or external command operable program or batch file\n```\n\n----------------------------------------\n\nTITLE: Creating a Standard Flutter App - Dart\nDESCRIPTION: Demonstrates the structure of a basic Flutter app without Material Design elements. This example showcases how to create a `StatelessWidget` and return a `Container` with a centered `Text` widget.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/layout/index.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nclass MyApp extends StatelessWidget {\n  const MyApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return Container(\n      decoration: const BoxDecoration(color: Colors.white),\n      child: const Center(\n        child: Text(\n          'Hello World',\n          textDirection: TextDirection.ltr,\n          style: TextStyle(fontSize: 32, color: Colors.black87),\n        ),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Create New Private Key\nDESCRIPTION: This command generates a new RSA private key. This new key can later be used by the CLI tools to automatically create a new iOS Distribution certificate.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/deployment/ios.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nssh-keygen -t rsa -b 2048 -m PEM -f cert_key -q -N \"\"\n```\n\n----------------------------------------\n\nTITLE: Navigator: onPopPage usage before migration (Dart)\nDESCRIPTION: This code snippet demonstrates how the `onPopPage` property was used in the `Navigator` widget before the API change. It shows how to veto a pop operation and update the list of pages accordingly. The `onPopPage` callback is responsible for both determining whether a page can be popped and updating the `pages` list.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/navigator-and-page-api.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\n\nfinal MaterialPage<void> page1 = MaterialPage<void>(child: Placeholder());\nfinal MaterialPage<void> page2 = MaterialPage<void>(child: Placeholder());\nfinal MaterialPage<void> page3 = MaterialPage<void>(child: Placeholder());\n\nvoid main() {\n  final List<Page<void>> pages = <Page<void>>[page1, page2, page3];\n  runApp(\n    MaterialApp(\n      home: Navigator(\n        pages: pages,\n        onPopPage: (Route<Object?> route, Object? result) {\n          if (route.settings == page2) {\n            return false;\n          }\n          if (route.didPop) {\n            pages.remove(route.settings);\n            return true;\n          }\n          return false;\n        },\n      ),\n    ),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Extending SplitCompatApplication (Java)\nDESCRIPTION: An alternative method to support SplitCompat by making the application class extend `SplitCompatApplication`. This allows the application to receive updates for dynamic feature modules. This is an alternative to using `FlutterPlayStoreSplitApplication` in the `AndroidManifest.xml`.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/perf/deferred-components.md#_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic class MyApplication extends SplitCompatApplication {\n    ...\n}\n\n```\n\n----------------------------------------\n\nTITLE: Migrating MethodChannel MockMethodCallHandler Calls Dart\nDESCRIPTION: This code shows how to migrate from myMethodChannel.setMockMethodCallHandler and myMethodChannel.checkMockMethodCallHandler to tester.binding.defaultBinaryMessenger.setMockMethodCallHandler and tester.binding.defaultBinaryMessenger.checkMockMessageHandler when using a WidgetTester.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/mock-platform-channels.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\n// old code\nmyMethodChannel.setMockMethodCallHandler(...);\nmyMethodChannel.checkMockMethodCallHandler(...);\n// new code\ntester.binding.defaultBinaryMessenger.setMockMethodCallHandler(myMethodChannel, ...);\ntester.binding.defaultBinaryMessenger.checkMockMessageHandler(myMethodChannel, ...);\n```\n\n----------------------------------------\n\nTITLE: Set Conditional Breakpoints Programmatically in Dart\nDESCRIPTION: This snippet demonstrates how to set a programmatic breakpoint in Dart code using the `debugger()` function from the `dart:developer` library. The `when` parameter allows the breakpoint to be triggered only when a specific condition is met (in this case, when `offset` is greater than 30).\nSOURCE: https://github.com/flutter/website/blob/main/src/content/testing/code-debugging.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nimport 'dart:developer';\n\nvoid someFunction(double offset) {\n  debugger(when: offset > 30);\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: TextInputClient Interface Implementation Before Migration (Dart)\nDESCRIPTION: This code snippet illustrates how a custom text input client might have been implemented *before* the introduction of Scribble support.  It highlights the need to add the `showToolbar`, `insertTextPlaceholder`, and `removeTextPlaceholder` methods.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/scribble-text-input-client.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nclass MyCustomTextInputClient implements TextInputClient {\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Add Certificates to Keychain\nDESCRIPTION: This command adds the fetched certificates to the temporary keychain. This makes the certificates available for code signing.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/deployment/ios.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nkeychain add-certificates\n```\n\n----------------------------------------\n\nTITLE: Loading OpenGL ES (v3) in Dart using DynamicLibrary.open\nDESCRIPTION: This snippet demonstrates how to load the OpenGL ES (v3) library in Dart using `DynamicLibrary.open`. This is necessary when linking against a platform library.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/platform-integration/android/c-interop.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nDynamicLibrary.open('libGLES_v3.so');\n```\n\n----------------------------------------\n\nTITLE: Inline Formatting Flutter\nDESCRIPTION: This Dart code uses the RichText widget in Flutter to apply different styles to different parts of the text. It creates a TextSpan for 'Lorem' with a default style and another TextSpan for 'ipsum' with a custom style (italic and different font size).  Requires Flutter SDK.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/web-devs.md#_snippet_28\n\nLANGUAGE: dart\nCODE:\n```\nfinal container = Container(\n  // grey box\n  width: 320,\n  height: 240,\n  color: Colors.grey[300],\n  child: Center(\n    child: Container(\n      // red box\n      decoration: BoxDecoration(\n        color: Colors.red[400],\n      ),\n      padding: const EdgeInsets.all(16),\n      child: RichText(\n        text: TextSpan(\n          style: bold24Roboto,\n          children: const <TextSpan>[\n            TextSpan(text: 'Lorem '),\n            TextSpan(\n              text: 'ipsum',\n              style: TextStyle(\n                fontWeight: FontWeight.w300,\n                fontStyle: FontStyle.italic,\n                fontSize: 48,\n              ),\n            ),\n          ],\n        ),\n      ),\n    ),\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Animate Typing Indicator Height in Dart\nDESCRIPTION: Animates the height of the typing indicator using an `AnimationController` and `CurvedAnimation`. The `_indicatorSpaceAnimation` controls the height of the `SizedBox` widget, providing a smooth appearance and disappearance effect. The animation curves are different for forward and reverse animations to optimize the visual effect.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/effects/typing-indicator.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nclass _TypingIndicatorState extends State<TypingIndicator>\n    with TickerProviderStateMixin {\n  late AnimationController _appearanceController;\n  late Animation<double> _indicatorSpaceAnimation;\n\n  @override\n  void initState() {\n    super.initState();\n\n    _appearanceController = AnimationController(vsync: this);\n\n    _indicatorSpaceAnimation = CurvedAnimation(\n      parent: _appearanceController,\n      curve: const Interval(0.0, 0.4, curve: Curves.easeOut),\n      reverseCurve: const Interval(0.0, 1.0, curve: Curves.easeOut),\n    ).drive(Tween<double>(begin: 0.0, end: 60.0));\n\n    if (widget.showIndicator) {\n      _showIndicator();\n    }\n  }\n\n  @override\n  void didUpdateWidget(TypingIndicator oldWidget) {\n    super.didUpdateWidget(oldWidget);\n\n    if (widget.showIndicator != oldWidget.showIndicator) {\n      if (widget.showIndicator) {\n        _showIndicator();\n      } else {\n        _hideIndicator();\n      }\n    }\n  }\n\n  @override\n  void dispose() {\n    _appearanceController.dispose();\n    super.dispose();\n  }\n\n  void _showIndicator() {\n    _appearanceController\n      ..duration = const Duration(milliseconds: 750)\n      ..forward();\n  }\n\n  void _hideIndicator() {\n    _appearanceController\n      ..duration = const Duration(milliseconds: 150)\n      ..reverse();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return AnimatedBuilder(\n      animation: _indicatorSpaceAnimation,\n      builder: (context, child) {\n        return SizedBox(height: _indicatorSpaceAnimation.value);\n      },\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: YAML Configuration for Loading Units\nDESCRIPTION: This YAML snippet shows an example of the `deferred_components_loading_units.yaml` file. It lists loading units with their corresponding libraries. The loading unit ID is used internally by Dart.  This example shows a loading unit with id '2' containing the library 'package:MyAppName/box.Dart'.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/perf/deferred-components.md#_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nloading-units:\n  - id: 2\n    libraries:\n      - package:MyAppName/box.Dart\n```\n\n----------------------------------------\n\nTITLE: Generating Routes based on isInitialRoute Dart\nDESCRIPTION: This snippet illustrates how routes were previously generated based on the `isInitialRoute` property of `RouteSetting`. This approach is being replaced due to the removal of the `isInitialRoute` property. This approach requires the Flutter SDK before version 1.17.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/route-navigator-refactoring.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nMaterialApp(\n  onGenerateRoute: (RouteSetting setting) {\n    if (setting.isInitialRoute)\n      return FakeSplashRoute();\n    else\n      return RealRoute(setting);\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Accessing Route Location Before Migration (Dart)\nDESCRIPTION: Demonstrates how to access the route location using the deprecated `location` property. This code snippet illustrates the old method of retrieving the route as a simple string.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/route-information-uri.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nfinal String myPath = myRoute.location;\n```\n\n----------------------------------------\n\nTITLE: Accessing ColorScheme before Migration Dart\nDESCRIPTION: Shows how to access the ColorScheme before the Material 3 tokens update. This snippet retrieves the color scheme from the ThemeData, representing the original color mappings.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/material-design-3-token-update.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nfinal ColorScheme colors = ThemeData().colorScheme;\n```\n\n----------------------------------------\n\nTITLE: Adding app_es.arb translation file - JSON\nDESCRIPTION: This JSON file provides the Spanish translation for the `helloWorld` message. It contains the translated text \"¡Hola Mundo!\" corresponding to the `helloWorld` key.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/accessibility-and-internationalization/internationalization.md#_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"helloWorld\": \"¡Hola Mundo!\"\n}\n```\n\n----------------------------------------\n\nTITLE: Create a Flutter module (console)\nDESCRIPTION: This command creates a new Flutter module named `my_flutter` at the specified path. The `--template module` flag ensures that a module project structure is generated, suitable for embedding into an existing app. The command should be run in the terminal.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/add-to-app/ios/project-setup.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ cd /path/to/my_flutter\n$ flutter create --template module my_flutter\n```\n\n----------------------------------------\n\nTITLE: Set Light Theme in styles.xml (XML)\nDESCRIPTION: This XML snippet modifies the `styles.xml` file to set the light theme to a Material Components theme. This is a necessary step to integrate Material Components into the app's theme, improving visual consistency with the Material Design guidelines.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/deployment/android.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n- <style name=\"NormalTheme\" parent=\"@android:style/Theme.Light.NoTitleBar\">\n+ <style name=\"NormalTheme\" parent=\"Theme.MaterialComponents.Light.NoActionBar\">\n```\n\n----------------------------------------\n\nTITLE: Defining SpringDescription with Damping Ratio After Migration in Dart\nDESCRIPTION: Illustrates the updated SpringDescription object using the `.withDampingRatio` constructor after applying the formula changes.  The mass, stiffness, and ratio are adjusted to preserve the original animation. This requires the 'flutter' package.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/spring-description-underdamped.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nconst spring = SpringDescription.withDampingRatio(\n  mass: 1,\n  stiffness: 1.87392,\n  ratio: 0.60017287468545,\n);\n```\n\n----------------------------------------\n\nTITLE: Custom SliverIgnorePointer with Semantics Dart\nDESCRIPTION: This code defines a custom `_SliverIgnorePointerWithSemantics` widget that ignores pointer events without modifying the semantics tree. This is useful for preserving the original behavior when `ignoringSemantics` was set to `false`.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/ignoringsemantics-migration.md#_snippet_4\n\nLANGUAGE: Dart\nCODE:\n```\n/// A sliver ignores pointer events without modifying the semantics tree.\nclass _SliverIgnorePointerWithSemantics extends SingleChildRenderObjectWidget {\n  const _SliverIgnorePointerWithSemantics({\n    super.child,\n  });\n\n  @override\n  _RenderSliverIgnorePointerWithSemantics createRenderObject(BuildContext context) {\n    return _RenderSliverIgnorePointerWithSemantics();\n  }\n}\n\nclass _RenderSliverIgnorePointerWithSemantics extends RenderProxySliver {\n  _RenderSliverIgnorePointerWithSemantics();\n\n  @override\n  bool hitTest(BoxHitTestResult result, { required Offset position }) => false;\n}\n```\n\n----------------------------------------\n\nTITLE: Assets file path example YAML\nDESCRIPTION: This code snippet demonstrates how to specify individual image files as assets in the `pubspec.yaml` file. The paths provided are relative to the root of the Flutter project.  These assets will be bundled into the application package during the build process.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/tools/pubspec.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nflutter:\n  assets:\n    - assets/images/my_image_a.png\n    - assets/images/my_image_b.png\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Error Widget for Build Phase Errors\nDESCRIPTION: This code shows how to define a custom error widget that displays when the builder fails to build a widget during the build phase. It overrides the MaterialApp.builder to intercept widget building. It checks if the widget being built is a Scaffold or Navigator and adjusts the error widget accordingly. ErrorWidget.builder is then assigned to display the custom error widget.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/testing/errors.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nclass MyApp extends StatelessWidget {\n  const MyApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      builder: (context, widget) {\n        Widget error = const Text('...rendering error...');\n        if (widget is Scaffold || widget is Navigator) {\n          error = Scaffold(body: Center(child: error));\n        }\n        ErrorWidget.builder = (errorDetails) => error;\n        if (widget != null) return widget;\n        throw StateError('widget is null');\n      },\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding sentry_flutter package using flutter pub add\nDESCRIPTION: This command adds the `sentry_flutter` package as a dependency to your Flutter project, enabling the use of Sentry for error reporting.  Run this command in your project's root directory to update the `pubspec.yaml` file and download the necessary dependencies.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/maintenance/error-reporting.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ flutter pub add sentry_flutter\n```\n\n----------------------------------------\n\nTITLE: Handling onTap Gesture with GestureDetector\nDESCRIPTION: This code snippet demonstrates how to use GestureDetector to handle onTap events in Flutter.  It wraps a FlutterLogo widget within a GestureDetector, so when the logo is tapped, the provided function is executed, logging a message to the console using dart:developer.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/uikit-devs.md#_snippet_23\n\nLANGUAGE: Dart\nCODE:\n```\nclass SampleTapApp extends StatelessWidget {\n  const SampleTapApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: Center(\n        child: GestureDetector(\n          onTap: () {\n            developer.log('tap');\n          },\n          child: const FlutterLogo(size: 200),\n        ),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Manual Scrollbar (Migration)\nDESCRIPTION: This code demonstrates how to conditionally add the Scrollbar based on the platform. It uses a switch statement to check the current platform and only adds the Scrollbar when not running on a desktop platform.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/default-desktop-scrollbars.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nfinal ScrollController controller = ScrollController();\nfinal Widget child = ListView.builder(\n  controller: controller,\n  itemBuilder: (BuildContext context, int index) {\n    return Text('Item $index');\n  }\n);\n// Only manually add a `Scrollbar` when not on desktop platforms.\n// Or, see other migrations for changing `ScrollBehavior`.\nswitch (currentPlatform) {\n  case TargetPlatform.linux:\n  case TargetPlatform.macOS:\n  case TargetPlatform.windows:\n    return child;\n  case TargetPlatform.android:\n  case TargetPlatform.fuchsia:\n  case TargetPlatform.iOS:\n    return Scrollbar(\n      controller: controller,\n      child: child;\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Update App to Display Title Section Dart\nDESCRIPTION: This diff shows how to add the TitleSection widget to the Column's children, displaying it at the top of the screen.  It passes the name and location parameters to the TitleSection constructor.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/layout/tutorial.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\n+ children: [\n+   TitleSection(\n+     name: 'Oeschinen Lake Campground',\n+     location: 'Kandersteg, Switzerland',\n+   ),\n+ ],\n```\n\n----------------------------------------\n\nTITLE: Basic Flutter App with Widgets\nDESCRIPTION: This snippet demonstrates a basic Flutter application structure using various widgets like MaterialApp, Scaffold, AppBar, Text, Center, Builder, Column, SizedBox, and ElevatedButton to create a simple UI with a title, text, and a button.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/fundamentals/widgets.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\nimport 'package:flutter/services.dart';\n\nvoid main() => runApp(const MyApp());\n\nclass MyApp extends StatelessWidget {\n  const MyApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp( // Root widget\n      home: Scaffold(\n        appBar: AppBar(\n          title: const Text('My Home Page'),\n        ),\n        body: Center(\n          child: Builder(\n            builder: (context) {\n              return Column(\n                children: [\n                  const Text('Hello, World!'),\n                  const SizedBox(height: 20),\n                  ElevatedButton(\n                    onPressed: () {\n                      print('Click!');\n                    },\n                    child: const Text('A button'),\n                  ),\n                ],\n              );\n            },\n          ),\n        ),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Import in Objective-C Tests\nDESCRIPTION: This snippet demonstrates how to conditionally import a module in Objective-C test files to maintain compatibility with both CocoaPods and Swift Package Manager.  It checks for the existence of the umbrella header before importing the test module.\nSOURCE: https://github.com/flutter/website/blob/main/src/_includes/docs/swift-package-manager/migrate-objective-c-plugin.md#_snippet_5\n\nLANGUAGE: Objective-C\nCODE:\n```\n@import plugin_name;\n- @import plugin_name.Test;\n+ #if __has_include(<plugin_name/plugin_name-umbrella.h>)\n+   @import plugin_name.Test;\n+ #endif\n```\n\n----------------------------------------\n\nTITLE: Updating Import Statements in Objective-C\nDESCRIPTION: This snippet demonstrates how to update import statements in Objective-C implementation files after migrating header files to the new SPM structure.  It updates the path to reflect the new location of the public header files.\nSOURCE: https://github.com/flutter/website/blob/main/src/_includes/docs/swift-package-manager/migrate-objective-c-plugin.md#_snippet_6\n\nLANGUAGE: Objective-C\nCODE:\n```\n- #import \"PublicHeaderFile.h\"\n+ #import \"./include/plugin_name/PublicHeaderFile.h\"\n```\n\n----------------------------------------\n\nTITLE: Requesting Shared Data from Flutter (Dart)\nDESCRIPTION: This Dart code demonstrates how to request shared text data from the Android native side using a MethodChannel.  The getSharedText method invokes the native method and updates the UI with the received data using setState. It initializes the platform channel and calls invokeMethod to retrieve the data.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/android-devs.md#_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\nimport 'package:flutter/services.dart';\n\nvoid main() {\n  runApp(const SampleApp());\n}\n\nclass SampleApp extends StatelessWidget {\n  const SampleApp({super.key});\n\n  // This widget is the root of your application.\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: 'Sample Shared App Handler',\n      theme: ThemeData(\n        colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),\n      ),\n      home: const SampleAppPage(),\n    );\n  }\n}\n\nclass SampleAppPage extends StatefulWidget {\n  const SampleAppPage({super.key});\n\n  @override\n  State<SampleAppPage> createState() => _SampleAppPageState();\n}\n\nclass _SampleAppPageState extends State<SampleAppPage> {\n  static const platform = MethodChannel('app.channel.shared.data');\n  String dataShared = 'No data';\n\n  @override\n  void initState() {\n    super.initState();\n    getSharedText();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(body: Center(child: Text(dataShared)));\n  }\n\n  Future<void> getSharedText() async {\n    var sharedData = await platform.invokeMethod('getSharedText');\n    if (sharedData != null) {\n      setState(() {\n        dataShared = sharedData as String;\n      });\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Navigating to Flutter Project Directory\nDESCRIPTION: This command changes the current directory to the project directory that was previously created. This allows subsequent commands to be executed within the context of the Flutter project.\nSOURCE: https://github.com/flutter/website/blob/main/examples/animation/animate4/README.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ncd $PROJECT\n```\n\n----------------------------------------\n\nTITLE: Installing Core Development Packages on Linux\nDESCRIPTION: This snippet installs essential packages like curl, git, unzip, xz-utils, zip, and libglu1-mesa using apt-get. It updates the package list and upgrades existing packages before installing the new ones. This is a prerequisite for Flutter development on Linux.\nSOURCE: https://github.com/flutter/website/blob/main/src/_includes/docs/install/reqs/linux/software.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ sudo apt-get update -y && sudo apt-get upgrade -y;\n$ sudo apt-get install -y curl git unzip xz-utils zip libglu1-mesa\n```\n\n----------------------------------------\n\nTITLE: Removing ThemeData.selectedRowColor in Flutter\nDESCRIPTION: This snippet illustrates the removal of the `selectedRowColor` property from `ThemeData`.  Since this property is no longer used by the framework, the migration guide suggests removing its usage from the code.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/3-16-deprecations.md#_snippet_1\n\nLANGUAGE: Dart\nCODE:\n```\nThemeData(\n  // ...\n  selectedRowColor: Colors.pink, // Would have no effect.  \n);\n```\n\nLANGUAGE: Dart\nCODE:\n```\nThemeData(\n  // ...\n  // Remove uses.  \n);\n```\n\n----------------------------------------\n\nTITLE: Basic ListView Widget - Dart\nDESCRIPTION: This code demonstrates a basic implementation of the `ListView` widget. It's similar to using a `Column` or `Row`, but automatically provides scrolling when its content exceeds the available space. Child widgets automatically expand to take up all the available space on the cross axis.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/fundamentals/layout.md#_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nWidget build(BuildContext context) {\n  return ListView(\n    children: const [\n      BorderedImage(),\n      BorderedImage(),\n      BorderedImage(),\n    ],\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Existing APK File (Console)\nDESCRIPTION: This snippet removes the existing APKS file from the temporary directory before rebuilding. This ensures that the previous version is removed before a new build is created for testing.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/perf/deferred-components.md#_snippet_18\n\nLANGUAGE: console\nCODE:\n```\n$ rm <your_temp_dir>/app.apks\n```\n\n----------------------------------------\n\nTITLE: Deploying Flutter Web App to Firebase Hosting\nDESCRIPTION: This command deploys the Flutter web application to Firebase Hosting. It automatically builds the app in release mode using `flutter build web --release` before deploying.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/deployment/web.md#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\nfirebase deploy\n```\n\n----------------------------------------\n\nTITLE: Migrating Scaffold SnackBar methods in Dart\nDESCRIPTION: This snippet demonstrates how to migrate from the deprecated `showSnackBar`, `removeCurrentSnackBar`, and `hideCurrentSnackBar` methods of `Scaffold` to the corresponding methods of `ScaffoldMessenger`. It showcases the code before and after the migration, utilizing `ScaffoldMessenger.of(context)` instead of `Scaffold.of(context)` for displaying and managing SnackBars.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/2-10-deprecations.md#_snippet_6\n\nLANGUAGE: Dart\nCODE:\n```\nScaffold.of(context).showSnackBar(mySnackBar);\nScaffold.of(context).removeCurrentSnackBar(mySnackBar);\nScaffold.of(context).hideCurrentSnackBar(mySnackBar);\n```\n\nLANGUAGE: Dart\nCODE:\n```\nScaffoldMessenger.of(context).showSnackBar(mySnackBar);\nScaffoldMessenger.of(context).removeCurrentSnackBar(mySnackBar);\nScaffoldMessenger.of(context).hideCurrentSnackBar(mySnackBar);\n```\n\n----------------------------------------\n\nTITLE: Dart Enum Definition Before Hot Reload\nDESCRIPTION: This Dart code defines an enum named `Color` with three possible values: `red`, `green`, and `blue`. Hot reload does not work when enumerated types are changed to regular classes or vice versa.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/tools/hot-reload.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nenum Color { red, green, blue }\n```\n\n----------------------------------------\n\nTITLE: Creating a Cupertino Flutter App - Dart\nDESCRIPTION: Shows how to create a Flutter app using the Cupertino library for iOS-style design.  This example uses `CupertinoApp` and `CupertinoPageScaffold` to create an app with a `CupertinoNavigationBar` and a centered column containing a `Text` widget.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/layout/index.md#_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nclass MyApp extends StatelessWidget {\n  const MyApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return const CupertinoApp(\n      title: 'Flutter layout demo',\n      theme: CupertinoThemeData(\n        brightness: Brightness.light,\n        primaryColor: CupertinoColors.systemBlue,\n      ),\n      home: CupertinoPageScaffold(\n        navigationBar: CupertinoNavigationBar(\n          backgroundColor: CupertinoColors.systemGrey,\n          middle: Text('Flutter layout demo'),\n        ),\n        child: Center(\n          child: Column(\n            mainAxisAlignment: MainAxisAlignment.center,\n            children: [Text('Hello World')],\n          ),\n        ),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: MenuButtonThemeData Text Style Before Migration (Dart)\nDESCRIPTION: This code shows how the MenuButtonThemeData was implemented before Material 3 Migration. To revert to the previous style after migration, explicitly set the textStyle property.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/menus-text-style.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nmenuButtonTheme: MenuButtonThemeData(\n  style: MenuItemButton.styleFrom(\n    /// ...\n  ),\n),\n```\n\n----------------------------------------\n\nTITLE: Creating a Flutter plugin\nDESCRIPTION: This command creates a new Flutter plugin with macOS platform support, designed for use with dart:ffi. It sets up the necessary directory structure and build files.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/platform-integration/macos/c-interop.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ flutter create --platforms=macos --template=plugin_ffi native_add\n$ cd native_add\n```\n\n----------------------------------------\n\nTITLE: Change Directory to Flutter App\nDESCRIPTION: This command changes the current directory to the newly created Flutter app's directory, 'my_app'. This is necessary to run Flutter commands within the project context.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/testing/native-debugging.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ cd my_app\n```\n\n----------------------------------------\n\nTITLE: Dumping Render Tree in Flutter\nDESCRIPTION: This code snippet demonstrates how to call the `debugDumpRenderTree()` function in a Flutter application. This function prints the render tree to the console, which is useful for debugging layout issues. The code defines a simple Flutter app with a button that, when pressed, calls the `debugDumpRenderTree()` function.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/testing/code-debugging.md#_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\n\nvoid main() {\n  runApp(const MaterialApp(home: AppHome()));\n}\n\nclass AppHome extends StatelessWidget {\n  const AppHome({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return Material(\n      child: Center(\n        child: TextButton(\n          onPressed: () {\n            debugDumpRenderTree();\n          },\n          child: const Text('Dump Render Tree'),\n        ),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: OverscrollIndicatorNotification.disallowGlow Migration (Dart)\nDESCRIPTION: Demonstrates how to migrate code that uses the deprecated `OverscrollIndicatorNotification.disallowGlow()` method.  The method is replaced by `disallowIndicator()`. The code shows the before and after migration examples using Dart.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/3-10-deprecations.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nbool _handleOverscrollIndicatorNotification(OverscrollIndicatorNotification notification) {\n  notification.disallowGlow();\n  return false;\n}\n```\n\nLANGUAGE: dart\nCODE:\n```\nbool _handleOverscrollIndicatorNotification(OverscrollIndicatorNotification notification) {\n  notification.disallowIndicator();\n  return false;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding ConstrainedBox inside SingleChildScrollView in Dart\nDESCRIPTION: This snippet demonstrates adding a ConstrainedBox within a SingleChildScrollView to enforce a minimum height equal to the maximum height provided by the LayoutBuilder's constraints. This ensures the content occupies the available space but allows scrolling when the content exceeds that space. A Placeholder is used as a temporary child.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/lists/spaced-items.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nLayoutBuilder(\n  builder: (context, constraints) {\n    return SingleChildScrollView(\n      child: ConstrainedBox(\n        constraints: BoxConstraints(minHeight: constraints.maxHeight),\n        child: Placeholder(),\n      ),\n    );\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: FloatingActionButton: Text Style Configuration (Deprecated)\nDESCRIPTION: Illustrates how the textStyle was derived from theme.accentTextTheme.button, which is now replaced with theme.textTheme. This impacts the text color within the FloatingActionButton.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/fab-theme-data-accent-properties.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\n// theme.accentTextTheme becomes theme.textTheme\nfinal TextStyle textStyle = theme.accentTextTheme.button.copyWith(\n  color: foregroundColor,\n  letterSpacing: 1.2,\n);\n```\n\n----------------------------------------\n\nTITLE: Navigating to the Project Directory\nDESCRIPTION: This command changes the current directory to the newly created Flutter project directory. This is necessary to execute subsequent Flutter commands within the project's context.\nSOURCE: https://github.com/flutter/website/blob/main/examples/layout/lakes/step4/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncd $PROJECT\n```\n\n----------------------------------------\n\nTITLE: Flutter CupertinoButton Creation\nDESCRIPTION: Demonstrates how to create a button in Flutter using the CupertinoButton class. The onPressed parameter specifies the callback function to be executed when the button is pressed.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/swiftui-devs.md#_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nCupertinoButton(\n  onPressed: () {\n    // This closure is called when your button is tapped.\n  },\n  const Text('Do something'),\n),\n```\n\n----------------------------------------\n\nTITLE: Set PATH for CocoaPods - bash\nDESCRIPTION: Updates the PATH environment variable to include the CocoaPods executable. This ensures that the `pod` command can be found when running from the command line. This assumes that CocoaPods has placed executables in the user's .gem/bin directory. The modification is made to the ~/.zshenv file.\nSOURCE: https://github.com/flutter/website/blob/main/src/_includes/docs/install/compiler/xcode.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nexport PATH=$HOME/.gem/bin:$PATH\n```\n\n----------------------------------------\n\nTITLE: DropdownMenuThemeData Text Style After Migration (Dart)\nDESCRIPTION: This code shows how to explicitly set a custom text style in DropdownMenuThemeData.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/menus-text-style.md#_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\ndropdownMenuTheme: DropdownMenuThemeData(\n  textStyle: TextStyle(\n    fontStyle: FontStyle.italic,\n    fontWeight: FontWeight.bold,\n  ),\n),\n```\n\n----------------------------------------\n\nTITLE: Generate .pfx file with OpenSSL\nDESCRIPTION: Generates a .pfx file (Personal Information Exchange) using the private key and CRT file. This file is a container for the certificate and its private key.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/platform-integration/windows/building.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nopenssl pkcs12 -export -out CERTIFICATE.pfx -inkey mykeyname.key -in mycrtname.crt\n```\n\n----------------------------------------\n\nTITLE: Setting onKey for Focus (Before)\nDESCRIPTION: This code snippet shows how to set the `onKey` parameter for a `Focus` widget using the deprecated `RawKeyEvent`. The `onKey` callback receives a `RawKeyEvent`. The input is a `RawKeyEvent` and the output is printing to the console. This approach is deprecated.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/key-event-migration.md#_snippet_2\n\nLANGUAGE: Dart\nCODE:\n```\nWidget build(BuildContext context) {\n  return Focus(\n    onKey: (RawKeyEvent keyEvent) {\n      print('Key event: $keyEvent');\n      return KeyEventResult.ignored;\n    }\n    child: child,\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Scrolling Flutter Driver\nDESCRIPTION: This snippet demonstrates how to scroll a list using flutter_driver.  It uses `driver.scroll` with a specific offset and duration to scroll a `Scrollable` widget.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/flutter-driver-migration.md#_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\ntest('scroll, tap on the last item (Zedoary), verify selected', () async {\n  // find the list of plants, by Key\n  final listFinder = find.byValueKey('listOfPlants');\n\n  // Scroll to the last position of the list\n  // a -100,000 pixels is enough to reach the bottom of the list\n  await driver.scroll(\n    listFinder,\n    0,\n    -100000,\n    const Duration(milliseconds: 500),\n  );\n\n  // find the item by text\n  final item = find.text('Zedoary');\n\n  // Wait for the list item to appear.\n  await driver.waitFor(item);\n\n  // Emulate a tap on the tile item.\n  await driver.tap(item);\n\n  // Wait for species name to be displayed\n  await driver.waitFor(find.text('Curcuma zedoaria'));\n\n  // 'please select' text should not be displayed\n  await driver.waitForAbsent(\n    find.text('Please select a plant from the list.'),\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: TextEditingClient Before Migration (Dart)\nDESCRIPTION: This code snippet shows an example implementation of `TextEditingClient` before the migration to include `currentTextEditingValue`. It demonstrates the existing methods that are implemented.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/text-input-client-current-value.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nclass _MyCustomTextWidgetState extends State<MyCustomWidget> implements TextEditingClient {\n  ...\n\n  @override\n  void updateEditingValue(TextEditingValue value) {\n    ...\n  }\n\n  @override\n  void performAction(TextInputAction action) {\n    ...\n  }\n\n  @override\n  void updateFloatingCursor(RawFloatingCursorPoint point) {\n    ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Current Shell\nDESCRIPTION: This snippet shows how to determine the shell running in the current console. The `$0` environment variable contains the name of the current shell.\nSOURCE: https://github.com/flutter/website/blob/main/src/_includes/docs/install/reqs/linux/set-path.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n$ echo $0\n```\n\n----------------------------------------\n\nTITLE: Configure localization delegates - Dart\nDESCRIPTION: This code configures localization delegates and supported locales for a Flutter app. It adds `GlobalMaterialLocalizations.delegate` and `GlobalWidgetsLocalizations.delegate` and specifies the supported locales (English and Hebrew).\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/xamarin-forms-devs.md#_snippet_35\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter_localizations/flutter_localizations.dart';\n\nclass MyWidget extends StatelessWidget {\n  const MyWidget({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return const MaterialApp(\n      localizationsDelegates: <LocalizationsDelegate<dynamic>>[\n        // Add app-specific localization delegate[s] here\n        GlobalMaterialLocalizations.delegate,\n        GlobalWidgetsLocalizations.delegate,\n      ],\n      supportedLocales: <Locale>[\n        Locale('en', 'US'), // English\n        Locale('he', 'IL'), // Hebrew\n        // ... other locales the app supports\n      ],\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Pigeon Output Paths in Dart\nDESCRIPTION: This snippet demonstrates how to update the output paths for Pigeon-generated files in the Dart Pigeon input file.  The paths need to be adjusted to reflect the new SPM structure.\nSOURCE: https://github.com/flutter/website/blob/main/src/_includes/docs/swift-package-manager/migrate-objective-c-plugin.md#_snippet_7\n\nLANGUAGE: Dart\nCODE:\n```\njavaOptions: JavaOptions(),\n- objcHeaderOut: 'ios/Classes/messages.g.h',\n- objcSourceOut: 'ios/Classes/messages.g.m',\n```\n\n----------------------------------------\n\nTITLE: Migrating ImageProvider and PaintingBinding in Flutter\nDESCRIPTION: This snippet illustrates the migration from `PaintingBinding.instantiateImageCodec` to `PaintingBinding.instantiateImageCodecFromBuffer`, and how these changes improved performance in image loading using a buffer. This was deprecated in v2.13.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/3-13-deprecations.md#_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nPaintingBinding.instance.instantiateImageCodec\n```\n\nLANGUAGE: dart\nCODE:\n```\nPaintingBinding.instance.instantiateImageCodecFromBuffer\n```\n\n----------------------------------------\n\nTITLE: Running Flutter Doctor with Verbose Flag\nDESCRIPTION: This snippet illustrates how to run the `flutter doctor` command with the `-v` (verbose) flag. This provides more detailed output, which is useful for troubleshooting issues and identifying specific problems with the Flutter setup or related components.\nSOURCE: https://github.com/flutter/website/blob/main/src/_includes/docs/install/flutter-doctor.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n{{prompt}} flutter doctor -v\n```\n\n----------------------------------------\n\nTITLE: Verify Flutter and Dart SDK Compatibility (CMD)\nDESCRIPTION: This command checks the location of the `flutter` and `dart` executables to ensure they originate from the same `bin` directory within the Flutter SDK, indicating compatibility. It's executed in the Command Prompt (cmd.exe) environment.\nSOURCE: https://github.com/flutter/website/blob/main/src/_includes/docs/dart-tool-win.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nC:\\>where flutter dart\nC:\\path-to-flutter-sdk\\bin\\flutter\nC:\\path-to-flutter-sdk\\bin\\flutter.bat\nC:\\path-to-dart-sdk\\bin\\dart.exe        :: this should go after `C:\\path-to-flutter-sdk\\bin\\` commands\nC:\\path-to-flutter-sdk\\bin\\dart\nC:\\path-to-flutter-sdk\\bin\\dart.bat\n```\n\n----------------------------------------\n\nTITLE: Parsing Image (Before Migration) - Dart\nDESCRIPTION: This code snippet demonstrates how to parse an image before the fix for raw image rendering in Flutter Web.  It assumes that the pixel data is in BGRA order and starts from the bottom-left corner. It uses `ui.ImageDescriptor.raw` to create an image descriptor from the raw pixel data. The code imports 'dart:typed_data' and 'dart:ui' and defines a function parseMyImage which takes the image, width, and height as input.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/raw-images-on-web-uses-correct-origin-and-colors.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'dart:typed_data';\nimport 'dart:ui' as ui;\n\n// Parse `image` as a displayable image.\n//\n// Each byte in `image` is a pixel channel, in the order of blue, green, red,\n// and alpha, starting from the bottom left corner and going row first.\nFuture<ui.Image> parseMyImage(Uint8List image, int width, int height) async {\n  final ui.ImageDescriptor descriptor = ui.ImageDescriptor.raw(\n    await ui.ImmutableBuffer.fromUint8List(image),\n    width: width,\n    height: height,\n    pixelFormat: ui.PixelFormat.rgba8888,\n  );\n  return (await (await descriptor.instantiateCodec()).getNextFrame()).image;\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying a TimePickerDialog in Flutter\nDESCRIPTION: This code demonstrates how to display a `TimePickerDialog` in Flutter using the `showTimePicker` function. An `ElevatedButton` triggers the dialog. The selected time is stored in the `selectedTime` variable and displayed using the `time.format(context)` method. The `initialEntryMode` is set to `TimePickerEntryMode.dial`, showing the time selection using a clock dial. It shows an example of using async/await.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/fundamentals/user-input.md#_snippet_14\n\nLANGUAGE: dart\nCODE:\n```\nTimeOfDay? selectedTime;\n\n@override\nWidget build(BuildContext context) {\n  var time = selectedTime;\n\n  return Column(children: [\n    Text(\n      time == null ? \"You haven't picked a time yet.\" : time.format(context),\n    ),\n    ElevatedButton.icon(\n      icon: const Icon(Icons.calendar_today),\n      onPressed: () async {\n        var pickedTime = await showTimePicker(\n          context: context,\n          initialEntryMode: TimePickerEntryMode.dial,\n          initialTime: TimeOfDay.now(),\n        );\n\n        setState(() {\n          selectedTime = pickedTime;\n        });\n      },\n      label: const Text('Pick a date'),\n    )\n  ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ImageProvider.loadBuffer (After Migration) - Dart\nDESCRIPTION: This code snippet demonstrates the implementation of `ImageProvider.loadBuffer` after the migration. It shows how to load image data, convert it to an `ui.ImmutableBuffer`, decode it, and return an `ImageStreamCompleter`.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/image-provider-load-buffer.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nclass MyImageProvider extends ImageProvider<MyImageProvider> {\n  @override\n  ImageStreamCompleter loadBuffer(MyImageProvider key, DecoderBufferCallback decode) {\n    return MultiFrameImageStreamCompleter(\n        codec: _loadData(key, decode),\n    );\n  }\n\n  Future<ui.Codec> _loadData(MyImageProvider key, DecoderBufferCallback decode) async {\n    final Uint8List bytes = await bytesFromSomeApi();\n    final ui.ImmutableBuffer buffer = await ui.ImmutableBuffer.fromUint8List(bytes);\n    return decode(buffer);\n  }\n}\n\nclass MyDelegatingProvider extends ImageProvider<MyDelegatingProvider> {\n  MyDelegatingProvider(this.provider);\n\n  final ImageProvder provider;\n\n  @override\n  ImageStreamCompleter loadBuffer(MyDelegatingProvider key, DecoderCallback decode) {\n    return provider.loadBuffer(key, decode);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Toggling Between Two Widgets\nDESCRIPTION: This code shows how to toggle between two widgets (Text and CupertinoButton) when a FloatingActionButton is pressed.  The SampleAppPage StatefulWidget manages the toggle boolean. The _toggle method updates the state, and _getToggleChild returns either the Text widget or the CupertinoButton based on the current toggle value. This demonstrates conditional UI rendering in Flutter.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/uikit-devs.md#_snippet_3\n\nLANGUAGE: Dart\nCODE:\n```\nclass SampleApp extends StatelessWidget {\n  // This widget is the root of your application.\n  const SampleApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return const MaterialApp(title: 'Sample App', home: SampleAppPage());\n  }\n}\n\nclass SampleAppPage extends StatefulWidget {\n  const SampleAppPage({super.key});\n\n  @override\n  State<SampleAppPage> createState() => _SampleAppPageState();\n}\n\nclass _SampleAppPageState extends State<SampleAppPage> {\n  // Default value for toggle.\n  bool toggle = true;\n\n  void _toggle() {\n    setState(() {\n      toggle = !toggle;\n    });\n  }\n\n  Widget _getToggleChild() {\n    if (toggle) {\n      return const Text('Toggle One');\n    }\n\n    return CupertinoButton(onPressed: () {}, child: const Text('Toggle Two'));\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: const Text('Sample App')),\n      body: Center(child: _getToggleChild()),\n      floatingActionButton: FloatingActionButton(\n        onPressed: _toggle,\n        tooltip: 'Update Text',\n        child: const Icon(Icons.update),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Building a Card with ListTile in Flutter\nDESCRIPTION: This Dart code snippet demonstrates how to build a Card widget containing a Column of ListTile widgets in Flutter.  It defines the structure and content of the card, including text, icons, and a Divider. The card's height is constrained using a SizedBox.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/layout/index.md#_snippet_20\n\nLANGUAGE: dart\nCODE:\n```\nWidget _buildCard() {\n  return SizedBox(\n    height: 210,\n    child: [!Card!](      child: Column(\n        children: [\n          ListTile(\n            title: const Text(\n              '1625 Main Street',\n              style: TextStyle(fontWeight: FontWeight.w500),\n            ),\n            subtitle: const Text('My City, CA 99984'),\n            leading: Icon(Icons.restaurant_menu, color: Colors.blue[500]),\n          ),\n          const Divider(),\n          ListTile(\n            title: const Text(\n              '(408) 555-1212',\n              style: TextStyle(fontWeight: FontWeight.w500),\n            ),\n            leading: Icon(Icons.contact_phone, color: Colors.blue[500]),\n          ),\n          ListTile(\n            title: const Text('costa@example.com'),\n            leading: Icon(Icons.contact_mail, color: Colors.blue[500]),\n          ),\n        ],\n      ),\n    ),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Pre-warm FlutterEngine (Java)\nDESCRIPTION: This Java code snippet demonstrates how to pre-warm a `FlutterEngine` within the `Application` class. It instantiates a `FlutterEngine`, executes Dart code to pre-warm it, and caches the `FlutterEngine` for later use by a `FlutterActivity`.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/add-to-app/android/add-flutter-screen.md#_snippet_8\n\nLANGUAGE: java\nCODE:\n```\npublic class MyApplication extends Application {\n  public FlutterEngine flutterEngine;\n  \n  @Override\n  public void onCreate() {\n    super.onCreate();\n    // Instantiate a FlutterEngine.\n    flutterEngine = new FlutterEngine(this);\n\n    // Start executing Dart code to pre-warm the FlutterEngine.\n    flutterEngine.getDartExecutor().executeDartEntrypoint(\n      DartEntrypoint.createDefault()\n    );\n\n    // Cache the FlutterEngine to be used by FlutterActivity.\n    FlutterEngineCache\n      .getInstance()\n      .put(\"my_engine_id\", flutterEngine);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Uninstall Flutter SDK (Console Command)\nDESCRIPTION: This command removes the Flutter SDK directory. The specific path depends on the operating system and where Flutter was initially installed.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/uninstall/index.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n{{prompt}} {{rm-sdk}}\n```\n\n----------------------------------------\n\nTITLE: Adding Scrollbar Manually (Before)\nDESCRIPTION: This code shows the previous approach of manually adding a Scrollbar to a ListView. It requires creating a ScrollController and passing it to both the Scrollbar and the ListView.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/default-desktop-scrollbars.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nfinal ScrollController controller = ScrollController();\nScrollbar(\n  controller: controller,\n  child: ListView.builder(\n    controller: controller,\n    itemBuilder: (BuildContext context, int index) {\n      return Text('Item $index');\n    }\n  )\n);\n```\n\n----------------------------------------\n\nTITLE: Initialize Temporary Keychain\nDESCRIPTION: This command initializes a new temporary keychain to be used for code signing. This isolates the code signing process from the user's login keychain.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/deployment/ios.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nkeychain initialize\n```\n\n----------------------------------------\n\nTITLE: Setting View Constraints in Flutter Web (JavaScript)\nDESCRIPTION: This JavaScript snippet demonstrates how to add a view to a Flutter web application and configure its view constraints. The `viewConstraints` object allows you to specify `maxWidth`, `minHeight`, and `maxHeight` properties to control the layout of the view within the available space. These constraints should be compatible with the CSS styling of the `hostElement`.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/platform-integration/web/embedding-flutter-web.md#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Adding a view with initial data...\nlet viewId = app.addView({\n  hostElement: someElement,\n  viewConstraints: {\n    maxWidth: 320,\n    minHeight: 0,\n    maxHeight: Infinity,\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Mockito HTTP Client Mocking in Flutter\nDESCRIPTION: This code demonstrates how to use Mockito to mock HTTP client responses within Flutter integration tests. It defines a test suite for the `fetchAlbum` function, mocking both successful and error responses from a hypothetical API endpoint to verify expected behavior.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/testing/unit/mocking.md#_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter_test/flutter_test.dart';\nimport 'package:http/http.dart' as http;\nimport 'package:mocking/main.dart';\nimport 'package:mockito/annotations.dart';\nimport 'package:mockito/mockito.dart';\n\nimport 'fetch_album_test.mocks.dart';\n\n// Generate a MockClient using the Mockito package.\n// Create new instances of this class in each test.\n@GenerateMocks([http.Client])\nvoid main() {\n  group('fetchAlbum', () {\n    test('returns an Album if the http call completes successfully', () async {\n      final client = MockClient();\n\n      // Use Mockito to return a successful response when it calls the\n      // provided http.Client.\n      when(\n        client.get(Uri.parse('https://jsonplaceholder.typicode.com/albums/1')),\n      ).thenAnswer(\n        (_) async =>\n            http.Response('{\"userId\": 1, \"id\": 2, \"title\": \"mock\"}', 200),\n      );\n\n      expect(await fetchAlbum(client), isA<Album>());\n    });\n\n    test('throws an exception if the http call completes with an error', () {\n      final client = MockClient();\n\n      // Use Mockito to return an unsuccessful response when it calls the\n      // provided http.Client.\n      when(\n        client.get(Uri.parse('https://jsonplaceholder.typicode.com/albums/1')),\n      ).thenAnswer((_) async => http.Response('Not Found', 404));\n\n      expect(fetchAlbum(client), throwsException);\n    });\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Project\nDESCRIPTION: This command creates a new Flutter project without overwriting existing files. The $PROJECT variable represents the path to the specific app project.\nSOURCE: https://github.com/flutter/website/blob/main/examples/cookbook/persistence/reading_writing_files/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nflutter create --no-overwrite $PROJECT\n```\n\n----------------------------------------\n\nTITLE: Migrating Custom Paint Delegates Dart\nDESCRIPTION: Illustrates how to migrate custom paint delegates from using `textScaleFactor` to `TextScaler`. It shows how to change the parameter type in the `paint` method from `double` to `TextScaler`.  This ensures compatibility with the new text scaling strategy.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/deprecate-textscalefactor.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nabstract class _MyCustomPaintDelegate { \n  void paint(PaintingContext context, Offset offset, double textScaleFactor) { \n  }\n}\n```\n\nLANGUAGE: dart\nCODE:\n```\nabstract class _MyCustomPaintDelegate { \n  void paint(PaintingContext context, Offset offset, TextScaler textScaler) { \n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Display Weather with Actors (Swift)\nDESCRIPTION: Displays weather using Swift Actors. Defines the view model as a state using `@State`, with a `load()` function that can be called by the view model.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/dart-swift-concurrency.md#_snippet_4\n\nLANGUAGE: Swift\nCODE:\n```\nstruct ContentView: View {\n  @State var viewModel = ContentViewModel()\n  var body: some View {\n    Text(viewModel.result?.rawValue ?? \"Loading...\")\n      .task {\n        await viewModel.load()\n      }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: TextField hintText Modification in Docs (Dart)\nDESCRIPTION: This change modifies the TextField documentation by replacing 'labelText' with 'hintText' in a code snippet. This correction aims to provide accurate and up-to-date example usage for the TextField widget, guiding developers on how to properly use hint text within text fields.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/release-notes/release-notes-3.10.0.md#_snippet_0\n\nLANGUAGE: Dart\nCODE:\n```\nModified TextField docs - Replaced 'labelText' to 'hintText' in code snippet\n```\n\n----------------------------------------\n\nTITLE: Initializing Horizontal ListView Flutter\nDESCRIPTION: This snippet demonstrates how to create a horizontal ListView in Flutter by setting the scrollDirection property to Axis.horizontal. It includes several colored containers as children to visualize the horizontal scrolling.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/lists/horizontal-list.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nListView(\n  // This next line does the trick.\n  scrollDirection: Axis.horizontal,\n  children: <Widget>[\n    Container(width: 160, color: Colors.red),\n    Container(width: 160, color: Colors.blue),\n    Container(width: 160, color: Colors.green),\n    Container(width: 160, color: Colors.yellow),\n    Container(width: 160, color: Colors.orange),\n  ],\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Slow Animations in Flutter\nDESCRIPTION: This code snippet demonstrates how to slow down animations in a Flutter application by setting the `timeDilation` property. Setting `timeDilation` to 5.0 slows down animations by a factor of 5. This can be useful for detailed visual inspection and fine-tuning of animations. Requires importing the `flutter/scheduler.dart` package.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/tools/devtools/legacy-inspector.md#_snippet_0\n\nLANGUAGE: Dart\nCODE:\n```\nimport 'package:flutter/scheduler.dart';\n\nvoid setSlowAnimations() {\n  timeDilation = 5.0;\n}\n```\n\n----------------------------------------\n\nTITLE: Reviewing App Manifest (XML)\nDESCRIPTION: This XML snippet shows the structure of an AndroidManifest.xml file for a Flutter project. It highlights the application tag where the android:label attribute should be updated with the final app name. It also includes the uses-permission tag for requesting internet access, which is not included by default, but may be needed.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/deployment/android.md#_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\">\n    <application\n        [!android:label=\"[project]\"!]\n        ...\n    </application>\n    ...\n    [!<uses-permission android:name=\"android.permission.INTERNET\"/>!]\n</manifest>\n```\n\n----------------------------------------\n\nTITLE: Installing Snapcraft on Ubuntu\nDESCRIPTION: This command installs the Snapcraft command-line tool, which is used to build snap packages. The `--classic` flag grants Snapcraft classic confinement, allowing it broader access to system resources.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/deployment/linux.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ sudo snap install snapcraft --classic\n```\n\n----------------------------------------\n\nTITLE: Creating a Button with GestureDetector in Flutter\nDESCRIPTION: This snippet demonstrates creating a button using GestureDetector in Flutter. It defines a StatelessWidget called MyButton that uses GestureDetector to detect taps on a Container widget. When tapped, it prints a message to the console.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/index.md#_snippet_4\n\nLANGUAGE: Dart\nCODE:\n```\nimport 'package:flutter/material.dart';\n\nclass MyButton extends StatelessWidget {\n  const MyButton({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return GestureDetector(\n      onTap: () {\n        print('MyButton was tapped!');\n      },\n      child: Container(\n        height: 50,\n        padding: const EdgeInsets.all(8),\n        margin: const EdgeInsets.symmetric(horizontal: 8),\n        decoration: BoxDecoration(\n          borderRadius: BorderRadius.circular(5),\n          color: Colors.lightGreen[500],\n        ),\n        child: const Center(child: Text('Engage')),\n      ),\n    );\n  }\n}\n\nvoid main() {\n  runApp(const MaterialApp(home: Scaffold(body: Center(child: MyButton()))));\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying only the \"Cut\" button in Flutter context menu\nDESCRIPTION: This code demonstrates how to ensure that only the 'Cut' button appears in the context menu of a Flutter TextField using the contextMenuBuilder. It creates a list containing only the ContextMenuButtonItem for the 'Cut' action.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/context-menus.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nTextField(\n  contextMenuBuilder: (context, editableTextState) {\n    return AdaptiveTextSelectionToolbar.buttonItems(\n      anchors: editableTextState.contextMenuAnchors,\n      buttonItems: <ContextMenuButtonItem>[\n        ContextMenuButtonItem(\n          onPressed: () {\n            editableTextState.cutSelection(SelectionChangedCause.toolbar);\n          },\n          type: ContextMenuButtonType.cut,\n        ),\n      ],\n    );\n  },\n)\n```\n\n----------------------------------------\n\nTITLE: Navigating with pushNamed in Flutter\nDESCRIPTION: This snippet demonstrates how to navigate to a new screen using Navigator.pushNamed(). The onPressed callback of the ElevatedButton in the FirstScreen is updated to call Navigator.pushNamed(context, '/second'), which navigates to the SecondScreen.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/navigation/named-routes.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\n// Within the `FirstScreen` widget\nonPressed: () {\n  // Navigate to the second screen using a named route.\n  Navigator.pushNamed(context, '/second');\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Dismissible Widget in Flutter\nDESCRIPTION: This code snippet demonstrates how to implement a Dismissible widget within a Flutter ListView. It generates a list of integers and displays them as ListTile widgets. Each ListTile can be dismissed by swiping, triggering the `onDismissed` callback to remove the item from the list. The `background` property defines the background color shown during the swipe.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/fundamentals/user-input.md#_snippet_15\n\nLANGUAGE: dart\nCODE:\n```\nList<int> items = List<int>.generate(100, (int index) => index);\n\n@override\nWidget build(BuildContext context) {\n  return ListView.builder(\n    itemCount: items.length,\n    padding: const EdgeInsets.symmetric(vertical: 16),\n    itemBuilder: (BuildContext context, int index) {\n      return Dismissible(\n        background: Container(\n          color: Colors.green,\n        ),\n        key: ValueKey<int>(items[index]),\n        onDismissed: (DismissDirection direction) {\n          setState(() {\n            items.removeAt(index);\n          });\n        },\n        child: ListTile(\n          title: Text(\n            'Item ${items[index]}',\n          ),\n        ),\n      );\n    },\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Include flutter_lints in analysis_options.yaml\nDESCRIPTION: Configures the Dart analyzer to use the recommended lint rules from the `package:flutter_lints`. This is done by including the `flutter.yaml` file from the package in the project's `analysis_options.yaml` file.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/flutter-lints-package.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ninclude: package:flutter_lints/flutter.yaml\n```\n\n----------------------------------------\n\nTITLE: Custom Menu Before Migration Dart\nDESCRIPTION: This code shows an example of a custom menu implementation before the migration. The `MenuItemButton` and `SubmenuButton` widgets are used within a `CustomMenu` widget, which lacks the necessary `SemanticsRole.menu` or `SemanticsRole.menuBar` role, leading to an accessibility issue.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/menu-semantics-roles.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nMaterialApp(\n  home: CustomMenu(\n    children: [\n      MenuItemButton(onPressed: () {}, child: const Text('Menu item 0')),\n      MenuItemButton(onPressed: () {}, child: const Text('Menu item 1')),\n      SubmenuButton(\n        onPressed: () {}, \n        child: const Text('Submenu 0'),\n      ),\n    ],\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Dart Class Definition After Hot Reload (Enum Change)\nDESCRIPTION: This Dart code defines a class named `Color` with two final integer fields, `i` and `j`. This is the 'after' state of the enum example, showing the change from enum to class. Hot reload won't work after this change.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/tools/hot-reload.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nclass Color {\n  Color(this.i, this.j);\n  final int i;\n  final int j;\n}\n```\n\n----------------------------------------\n\nTITLE: Previous Brightness Getter Implementation - Dart\nDESCRIPTION: Shows the previous implementation of the `brightness` getter in `CupertinoThemeData`, which defaulted to `Brightness.light` if the underlying `_brightness` property was null.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/nullable-cupertinothemedata-brightness.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nBrightness get brightness => _brightness ?? Brightness.light;\nfinal Brightness _brightness;\n```\n\n----------------------------------------\n\nTITLE: Migrating to SurfaceProducer API - Texture Creation - Java\nDESCRIPTION: This code snippet demonstrates how to replace the TextureRegistry.SurfaceTextureEntry with TextureRegistry.SurfaceProducer when creating a surface texture.  The SurfaceProducer provides a more flexible API for managing surfaces in Android plugins for Flutter.  This eliminates the need to manage the backing implementation of the Surface.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/android-surface-plugins.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n- TextureRegistry.SurfaceTextureEntry entry = textureRegistry.createSurfaceTexture();\n+ TextureRegistry.SurfaceProducer producer = textureRegistry.createSurfaceProducer();\n```\n\n----------------------------------------\n\nTITLE: Creating a 'Hello world!' App in React Native\nDESCRIPTION: This React Native code defines a functional component `App` that renders a 'Hello world!' text within a `View`. It uses React Native's `StyleSheet` to style the container, centering the text.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/react-native-devs.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\n// React Native\nimport React from 'react';\nimport { StyleSheet, Text, View } from 'react-native';\n\nconst App = () => {\n  return (\n    <View style={styles.container}>\n      <Text>Hello world!</Text>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n});\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Create Mac Installer Distribution Certificate\nDESCRIPTION: Creates a new Mac Installer Distribution certificate using the `app-store-connect` command. This command requires the type of certificate and the path to the certificate key.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/deployment/macos.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\napp-store-connect certificates create \\\n    --type MAC_INSTALLER_DISTRIBUTION \\\n    --certificate-key=@file:/path/to/cert_key \\\n    --save\n```\n\n----------------------------------------\n\nTITLE: Set Dark Theme in styles.xml (XML)\nDESCRIPTION: This XML snippet modifies the `styles.xml` file in the `values-night` directory to set the dark theme to a Material Components theme. This allows the application to switch into a dark mode, with Material Component styles.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/deployment/android.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n- <style name=\"NormalTheme\" parent=\"@android:style/Theme.Black.NoTitleBar\">\n+ <style name=\"NormalTheme\" parent=\"Theme.MaterialComponents.DayNight.NoActionBar\">\n```\n\n----------------------------------------\n\nTITLE: Highlighting Repaints: Limited Area Repaint\nDESCRIPTION: This Flutter code defines a StatelessWidget, `AreaRepaintsPage`, that displays a `CircularProgressIndicator` wrapped within a `RepaintBoundary`. This isolates the repainting to only the circular progress indicator, preventing the entire screen from repainting on every frame and improves performance.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/tools/devtools/inspector.md#_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nclass AreaRepaintsPage extends StatelessWidget {\n  const AreaRepaintsPage({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: const Text('Repaint Example')),\n      body: const Center(\n        child: RepaintBoundary(child: CircularProgressIndicator()),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Preventing Overscaling: Before (Dart)\nDESCRIPTION: This code snippet illustrates the previous method for preventing content from overscaling by clamping the textScaleFactor to a maximum value. It involves obtaining the current MediaQueryData and creating a copy with the adjusted textScaleFactor.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/deprecate-textscalefactor.md#_snippet_7\n\nLANGUAGE: Dart\nCODE:\n```\nfinal mediaQueryData = MediaQuery.of(context);\nMediaQuery(\n  data: mediaQueryData.copyWith(textScaleFactor: math.min(mediaQueryData.textScaleFactor, _kMaxTitleTextScaleFactor),\n  child: child,\n)\n```\n\n----------------------------------------\n\nTITLE: Migrating Chip Classes' useDeleteButtonTooltip in Flutter\nDESCRIPTION: This snippet shows how to migrate from the deprecated `useDeleteButtonTooltip` property to `deleteButtonTooltipMessage` in Chip classes (Chip, InputChip, RawChip) in Flutter. The older property was deprecated in v2.10 and has been removed.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/3-13-deprecations.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nChip(useDeleteButtonTooltip: false);\nInputChip(useDeleteButtonTooltip: true);\nRawChip rawChip = RawChip();\nrawChip.useDeleteButtonTooltip;\n```\n\nLANGUAGE: dart\nCODE:\n```\nChip(deleteButtonTooltipMessage: '');\nInputChip();\nRawChip rawChip = RawChip();\nrawChip.deleteButtonTooltipMessage;\n```\n\n----------------------------------------\n\nTITLE: Opening Another App in Flutter\nDESCRIPTION: This code shows how to open a URL (in this case, a website) in another application using the `url_launcher` plugin in Flutter.  It calls the `launchUrl()` function with the URL to open within an `async` function called from a `CupertinoButton`'s `onPressed` callback. The URL is parsed using `Uri.parse()`\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/swiftui-devs.md#_snippet_27\n\nLANGUAGE: Dart\nCODE:\n```\nCupertinoButton(\n  onPressed: () async {\n    await launchUrl(Uri.parse('https://google.com'));\n  },\n  const Text('Open website'),\n),\n```\n\n----------------------------------------\n\nTITLE: Clipboard reset before migration (Dart)\nDESCRIPTION: Demonstrates how to reset the clipboard text by setting the `text` argument of `ClipboardData` to `null` before the migration. This is deprecated and will no longer work as expected.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/clipboard-data-required.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nvoid resetClipboard() {\n  Clipboard.setData(ClipboardData(text: null));\n}\n```\n\n----------------------------------------\n\nTITLE: Include Flutter Module (Groovy)\nDESCRIPTION: This snippet shows how to include the Flutter module as a subproject in the host app's `settings.gradle` file using Groovy. It applies the `include_flutter.groovy` script to configure the necessary dependencies.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/add-to-app/android/project-setup.md#_snippet_14\n\nLANGUAGE: Groovy\nCODE:\n```\n// Include the host app project.\ninclude(\":app\")                                   // assumed existing content\nsetBinding(new Binding([gradle: this]))           // new\ndef filePath = settingsDir.parentFile.toString() + \"/flutter_module/.android/include_flutter.groovy\" // new\napply from: filePath                              // new\n```\n\n----------------------------------------\n\nTITLE: Setting a Custom ScrollBehavior - After Migration - Flutter\nDESCRIPTION: Illustrates how to set a custom ScrollBehavior for the entire Flutter application using MaterialApp.scrollBehavior. It extends MaterialScrollBehavior and overrides getMultitouchDragStrategy to customize the scrolling behavior.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/multi-touch-scrolling.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nclass MyCustomScrollBehavior extends MaterialScrollBehavior {\n  // Override behavior methods and getters like multitouchDragStrategy\n  @override\n  MultitouchDragStrategy getMultitouchDragStrategy(BuildContext context) => MultitouchDragStrategy.sumAllPointers;\n}\n\n// Set ScrollBehavior for an entire application.\nMaterialApp(\n  scrollBehavior: MyCustomScrollBehavior(),\n  // ...\n);\n```\n\n----------------------------------------\n\nTITLE: Deprecated: Overriding handleCut to customize context menu action in Flutter\nDESCRIPTION: This code illustrates the deprecated approach of customizing context menu actions by overriding handler methods in TextSelectionControls. This approach is replaced by contextMenuBuilder.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/context-menus.md#_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\n// Deprecated.\nclass _MyMaterialTextSelectionControls extends MaterialTextSelectionControls {\n  @override\n  bool handleCut() {\n    // My custom cut implementation here.\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Add Imports to Kotlin MainActivity\nDESCRIPTION: This code adds necessary import statements to the `MainActivity.kt` file.  These imports are required for Android intent handling, Compose UI elements, Flutter engine integration and MethodChannel communication.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/platform-integration/android/compose-activity.md#_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\npackage com.example.flutter_android_activity\n\nimport android.content.Intent\nimport android.os.Bundle\nimport androidx.activity.ComponentActivity\nimport androidx.activity.compose.setContent\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.material3.Button\nimport androidx.compose.material3.MaterialTheme\nimport androidx.compose.material3.Surface\nimport androidx.compose.material3.Text\nimport androidx.compose.ui.Modifier\nimport androidx.core.app.ActivityCompat\nimport io.flutter.embedding.android.FlutterActivity\nimport io.flutter.embedding.engine.FlutterEngine\nimport io.flutter.plugin.common.MethodCall\nimport io.flutter.plugin.common.MethodChannel\nimport io.flutter.plugins.GeneratedPluginRegistrant\n```\n\n----------------------------------------\n\nTITLE: Implementing Asynchronous Subscribe Method in ViewModel with Optimistic Updates in Dart\nDESCRIPTION: This code snippet implements the asynchronous subscribe method in the SubscribeButtonViewModel. It utilizes optimistic updates by immediately setting the `subscribed` state to true and notifying listeners.  It then calls the SubscriptionRepository's subscribe method within a try-catch block to handle potential errors, reverting the state if an error occurs.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/app-architecture/design-patterns/optimistic-state.md#_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\n// Subscription action\nFuture<void> subscribe() async {\n  // Ignore taps when subscribed\n  if (subscribed) {\n    return;\n  }\n\n  // Optimistic state.\n  // It will be reverted if the subscription fails.\n  subscribed = true;\n  // Notify listeners to update the UI\n  notifyListeners();\n\n  try {\n    await subscriptionRepository.subscribe();\n  } catch (e) {\n    print('Failed to subscribe: $e');\n    // Revert to the previous state\n    subscribed = false;\n    // Set the error state\n    error = true;\n  } finally {\n    notifyListeners();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enable Swift Package Manager (Shell)\nDESCRIPTION: This command enables Swift Package Manager support in Flutter. It configures the Flutter tool to use SPM for dependency resolution where possible.\nSOURCE: https://github.com/flutter/website/blob/main/src/_includes/docs/swift-package-manager/how-to-enable-disable.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nflutter config --enable-swift-package-manager\n```\n\n----------------------------------------\n\nTITLE: Load Weather with GCD (Swift)\nDESCRIPTION: Defines a view model with a `load()` function using Grand Central Dispatch (GCD) to simulate an asynchronous network delay and update the UI on the main thread. The `@Observable` macro publishes the result of type `Weather?`.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/dart-swift-concurrency.md#_snippet_1\n\nLANGUAGE: Swift\nCODE:\n```\n@Observable class ContentViewModel {\n    private(set) var result: Weather?\n\n    private let queue = DispatchQueue(label: \"weather_io_queue\")\n    func load() {\n        // Mimic 1 second network delay.\n        queue.asyncAfter(deadline: .now() + 1) { [weak self] in\n            DispatchQueue.main.async {\n                self?.result = .sunny\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Text with StatefulWidget - Flutter\nDESCRIPTION: This code demonstrates how to dynamically update a `Text` widget in Flutter using a `StatefulWidget`. A `FloatingActionButton` is used to trigger a state change, updating the text displayed on the screen.  The `setState` method is called within the `_updateText` function to rebuild the widget with the new text value.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/xamarin-forms-devs.md#_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\n\nvoid main() {\n  runApp(const SampleApp());\n}\n\nclass SampleApp extends StatelessWidget {\n  /// This widget is the root of your application.\n  const SampleApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return const MaterialApp(title: 'Sample App', home: SampleAppPage());\n  }\n}\n\nclass SampleAppPage extends StatefulWidget {\n  const SampleAppPage({super.key});\n\n  @override\n  State<SampleAppPage> createState() => _SampleAppPageState();\n}\n\nclass _SampleAppPageState extends State<SampleAppPage> {\n  /// Default placeholder text\n  String textToShow = 'I Like Flutter';\n\n  void _updateText() {\n    setState(() {\n      // Update the text\n      textToShow = 'Flutter is Awesome!';\n    });\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: const Text('Sample App')),\n      body: Center(child: Text(textToShow)),\n      floatingActionButton: FloatingActionButton(\n        onPressed: _updateText,\n        tooltip: 'Update Text',\n        child: const Icon(Icons.update),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: MainAppViewModel for Theme Change Handling - Dart\nDESCRIPTION: This snippet presents the `MainAppViewModel` class, responsible for listening to theme changes in the `ThemeRepository` and updating the UI accordingly. It uses a `StreamSubscription` to observe changes in dark mode settings and calls `notifyListeners()` to trigger UI updates. The `dispose` method cancels the subscription to prevent memory leaks.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/app-architecture/design-patterns/key-value-data.md#_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nclass MainAppViewModel extends ChangeNotifier {\n  MainAppViewModel(this._themeRepository) {\n    _subscription = _themeRepository.observeDarkMode().listen((isDarkMode) {\n      _isDarkMode = isDarkMode;\n      notifyListeners();\n    });\n    _load();\n  }\n\n  final ThemeRepository _themeRepository;\n  StreamSubscription<bool>? _subscription;\n\n  bool _isDarkMode = false;\n\n  bool get isDarkMode => _isDarkMode;\n\n  Future<void> _load() async {\n    try {\n      final result = await _themeRepository.isDarkMode();\n      if (result is Ok<bool>) {\n        _isDarkMode = result.value;\n      }\n    } on Exception catch (_) {\n      // handle error\n    } finally {\n      notifyListeners();\n    }\n  }\n\n  @override\n  void dispose() {\n    _subscription?.cancel();\n    super.dispose();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing RadialExpansion Widget in Flutter\nDESCRIPTION: This code snippet defines the RadialExpansion StatelessWidget, which clips an image during a hero animation. It takes maxRadius and child as parameters. It uses ClipOval, Center, SizedBox, and ClipRect widgets to create the clipping effect.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/animations/hero-animations.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nclass RadialExpansion extends StatelessWidget {\n  const RadialExpansion({\n    super.key,\n    required this.maxRadius,\n    this.child,\n  }) : [!clipRectSize = 2.0 * (maxRadius / math.sqrt2);!]\n\n  final double maxRadius;\n  final clipRectSize;\n  final Widget child;\n\n  @override\n  Widget build(BuildContext context) {\n    return [!ClipOval(!]\n      child: [!Center(!]\n        child: [!SizedBox(!]\n          width: clipRectSize,\n          height: clipRectSize,\n          child: [!ClipRect(!]\n            child: [!child,!] // Photo\n          ),\n        ),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Download iOS Simulator Platform using Xcode\nDESCRIPTION: Downloads the iOS platform for use with the Xcode build system, allowing you to run and test your Flutter application on the iOS simulator. This command ensures that the necessary iOS SDK and tools are available for development.\nSOURCE: https://github.com/flutter/website/blob/main/src/_includes/docs/install/devices/ios-simulator.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n{{prompt1}} xcodebuild -downloadPlatform iOS\n```\n\n----------------------------------------\n\nTITLE: Resize Image with cacheWidth/cacheHeight - Flutter\nDESCRIPTION: This Dart code snippet demonstrates how to resize an image in Flutter using the `cacheHeight` and `cacheWidth` properties of the `Image.asset` widget. This can reduce memory usage by decoding the image at the specified size rather than its full resolution. It uses the Flutter framework and assumes an image file 'dash.png' exists in the asset bundle.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/tools/devtools/legacy-inspector.md#_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nclass ResizedImage extends StatelessWidget {\n  const ResizedImage({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return Image.asset('dash.png', cacheHeight: 213, cacheWidth: 392);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Another example network filter query\nDESCRIPTION: This example shows filtering network requests that involve 'https' and have a status code of 404. This query can be useful for identifying broken links or resources.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/tools/devtools/network.md#_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps s:404\n```\n\n----------------------------------------\n\nTITLE: Running CupertinoSwitch Example in Flutter\nDESCRIPTION: This snippet demonstrates the commands to navigate to the CupertinoSwitch example within the Flutter repository and run it using the `flutter run` command. It assumes you have Flutter installed and configured. The `cd` commands change the directory, and `flutter run` executes the Dart file.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/design/cupertino/index.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ncd path/to/flutter\ncd examples/api\nflutter run lib/cupertino/switch/cupertino_switch.0.dart\n```\n\n----------------------------------------\n\nTITLE: Calling buildTextSpan Before Migration (Dart)\nDESCRIPTION: This code snippet illustrates how to call `buildTextSpan` before the introduction of the `BuildContext` parameter.  It shows the old way of calling the method without passing any context.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/buildtextspan-buildcontext.md#_snippet_2\n\nLANGUAGE: Dart\nCODE:\n```\nTextEditingController controller = /* ... */;\nTextSpan span = controller.buildTextSpan(withComposing: false);\n```\n\n----------------------------------------\n\nTITLE: Updating Golden Files in Flutter\nDESCRIPTION: This console command is used to update the master golden files in a Flutter project. It is useful when UI changes, like the Dialog border radius update, cause golden file tests to fail, and the new rendering is the desired behavior.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/dialog-border-radius.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nflutter test --update-goldens\n```\n\n----------------------------------------\n\nTITLE: Ambiguity helper function in Dart\nDESCRIPTION: This Dart code defines a generic helper function `_ambiguate` to treat a value of type T or T? as T?.  This is to support older versions of the Flutter API where binding instances may be nullable.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/release-notes/release-notes-3.0.0.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\n/// This allows a value of type T or T?\n/// to be treated as a value of type T?.\n///\n/// We use this so that APIs that have become\n/// non-nullable can still be used with `!` and `?`\n/// to support older versions of the API as well.\nT? _ambiguate<T>(T? value) => value;\n```\n\n----------------------------------------\n\nTITLE: Launch FlutterActivity with Cached Engine (Kotlin)\nDESCRIPTION: This Kotlin code snippet shows how to launch a `FlutterActivity` using a pre-warmed, cached `FlutterEngine`. It uses `withCachedEngine()` to specify the ID of the cached `FlutterEngine` before launching the `FlutterActivity`.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/add-to-app/android/add-flutter-screen.md#_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\nmyButton.setOnClickListener {\n  startActivity(\n    FlutterActivity\n      .withCachedEngine(\"my_engine_id\")\n      .build(this)\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Building UnconstrainedBox with LimitedBox in Flutter\nDESCRIPTION: This snippet demonstrates using UnconstrainedBox with LimitedBox. LimitedBox applies its constraints only when its incoming constraints are unbounded. In this case, UnconstrainedBox provides unbounded constraints, so LimitedBox limits the Container's width to 100.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/layout/constraints.md#_snippet_17\n\nLANGUAGE: dart\nCODE:\n```\n'UnconstrainedBox(\\n'   'child: LimitedBox(maxWidth: 100,\\n'   '      child: Container(color: Colors.red,\\n'   '                       width: double.infinity, height: 100));'\n```\n\n----------------------------------------\n\nTITLE: Finding an Action with Actions.maybeFind in Dart\nDESCRIPTION: This snippet shows how to use `Actions.maybeFind` to locate an action associated with a specific intent type within a given `BuildContext`. It attempts to find an `Action` for the `SelectAllIntent` and returns it if found; otherwise, it returns null. It is important that an Actions widget defining the action is present in the context.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/interactivity/actions-and-shortcuts.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nAction<SelectAllIntent>? selectAll = Actions.maybeFind<SelectAllIntent>(\n  context,\n);\n```\n\n----------------------------------------\n\nTITLE: Dart Generic Class After Hot Reload (Generic Type Change)\nDESCRIPTION: This Dart code modifies the generic class `A` to include a second nullable type parameter `V` and a field `v` of type `V?`. This change will prevent hot reload from working.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/tools/hot-reload.md#_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nclass A<T, V> {\n  T? i;\n  V? v;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ImageProvider.load (Before Migration) - Dart\nDESCRIPTION: This code snippet demonstrates the implementation of `ImageProvider.load` before the migration to `loadBuffer`. It shows how to load image data, decode it, and return an `ImageStreamCompleter`.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/image-provider-load-buffer.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nclass MyImageProvider extends ImageProvider<MyImageProvider> {\n  @override\n  ImageStreamCompleter load(MyImageProvider key, DecoderCallback decode) {\n    return MultiFrameImageStreamCompleter(\n        codec: _loadData(key, decode),\n    );\n  }\n\n  Future<ui.Codec> _loadData(MyImageProvider key, DecoderCallback decode) async {\n    final Uint8List bytes = await bytesFromSomeApi();\n    return decode(bytes);\n  }\n}\n\nclass MyDelegatingProvider extends ImageProvider<MyDelegatingProvider> {\n  MyDelegatingProvider(this.provider);\n\n  final ImageProvder provider;\n\n  @override\n  ImageStreamCompleter load(MyDelegatingProvider key, DecoderCallback decode) {\n    return provider.load(key, decode);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom analysis_options.yaml example\nDESCRIPTION: An example of a complete `analysis_options.yaml` file, showing how to include `flutter_lints` and customize linting rules.  It activates a set of recommended lints and shows how to disable or enable rules.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/flutter-lints-package.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# This file configures the analyzer, which statically analyzes Dart code to\n# check for errors, warnings, and lints.\n#\n# The issues identified by the analyzer are surfaced in the UI of Dart-enabled\n# IDEs (https://dart.dev/tools#ides-and-editors). The analyzer can also be\n# invoked from the command line by running `flutter analyze`.\n\n# The following line activates a set of recommended lints for Flutter apps,\n# packages, and plugins designed to encourage good coding practices.\ninclude: package:flutter_lints/flutter.yaml\n\nlinter:\n  # The lint rules applied to this project can be customized in the\n  # section below to disable rules from the `package:flutter_lints/flutter.yaml`\n  # included above or to enable additional rules. A list of all available lints\n  # and their documentation is published at\n  # https://dart-lang.github.io/linter/lints/index.html.\n  #\n  # Instead of disabling a lint rule for the entire project in the\n  # section below, it can also be suppressed for a single line of code\n  # or a specific dart file by using the `// ignore: name_of_lint` and\n  # `// ignore_for_file: name_of_lint` syntax on the line or in the file\n  # producing the lint.\n  rules:\n    # avoid_print: false  # Uncomment to disable the `avoid_print` rule\n    # prefer_single_quotes: true  # Uncomment to enable the `prefer_single_quotes` rule\n\n# Additional information about this file can be found at\n# https://dart.dev/guides/language/analysis-options\n```\n\n----------------------------------------\n\nTITLE: Flutter Container with Red Color\nDESCRIPTION: This example creates a simple Container widget with a red background color.  The Container will fill the available space provided by its parent, which in this case is the screen.  There are no explicit width or height constraints set on the Container directly, so it expands to fill the screen.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/layout/constraints.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nContainer(color: red)\n```\n\n----------------------------------------\n\nTITLE: Dart If Statement Snippet\nDESCRIPTION: Inserts a basic if statement. No dependencies are required. Input: None. Output: A basic if statement structure.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/tools/vs-code.md#_snippet_3\n\nLANGUAGE: Dart\nCODE:\n```\nif (condition) {  }\n```\n\n----------------------------------------\n\nTITLE: Use BottomNavigationBarItem.label Dart\nDESCRIPTION: This snippet demonstrates the usage of the `label` property in `BottomNavigationBarItem` as a replacement for the deprecated `title` property. The `label` property offers enhanced text scaling and accessibility features and should be used in place of the `title` property in new code.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/2-5-deprecations.md#_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nconst BottomNavigationBarItem bottomNavigationBarItem = BottomNavigationBarItem(label: myTitle);\nconst BottomNavigationBarItem bottomNavigationBarItem = BottomNavigationBarItem();\nbottomNavigationBarItem.label;\n```\n\n----------------------------------------\n\nTITLE: Running Flutter Tests\nDESCRIPTION: This command executes the unit and integration tests defined within the Flutter project. It verifies the correctness and reliability of the application's functionality.\nSOURCE: https://github.com/flutter/website/blob/main/examples/layout/grid_and_list/README.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nflutter test\n```\n\n----------------------------------------\n\nTITLE: Echo PUB_HOSTED_URL on Linux/macOS (Bash)\nDESCRIPTION: This command echoes the value of the PUB_HOSTED_URL environment variable on Linux/macOS using Bash. It checks if the variable is set and its current value.\nSOURCE: https://github.com/flutter/website/blob/main/src/_includes/docs/community/china/pub-settings.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n{{prompt}} echo $PUB_HOSTED_URL\n```\n\n----------------------------------------\n\nTITLE: TextField with Expanded - Solution (Dart)\nDESCRIPTION: This code snippet shows how to fix the unbounded width error by wrapping the TextFormField with an Expanded widget.  The Expanded widget provides a width constraint to the TextFormField, preventing the error. This ensures the InputDecorator has a finite width, satisfying its requirements.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/testing/common-errors.md#_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nWidget build(BuildContext context) {\n  return MaterialApp(\n    home: Scaffold(\n      appBar: AppBar(title: const Text('Unbounded Width of the TextField')),\n      body: Row(children: [Expanded(child: TextFormField())]),\n    ),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Debug-production Build Settings in Xcode\nDESCRIPTION: This snippet shows an example of setting the `API_BASE_URL` for the `Debug-production` build configuration. This allows for different environments to be targeted during debugging. The setting is added to a `.xcconfig` file.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/deployment/flavors-ios.md#_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\n# Debug-production build settings\nAPI_BASE_URL = flavors.com/api\n```\n\n----------------------------------------\n\nTITLE: CustomPaint Usage in Flutter\nDESCRIPTION: This snippet demonstrates the use of `CustomPaint` in Flutter to draw on the screen. It uses a `SignaturePainter` to handle the actual drawing logic and sets the `size` property to `Size.infinite` to allow drawing across the entire screen.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/swiftui-devs.md#_snippet_21\n\nLANGUAGE: Dart\nCODE:\n```\nCustomPaint(\n  painter: SignaturePainter(_points),\n  size: Size.infinite,\n),\n```\n\n----------------------------------------\n\nTITLE: Disabling Text Scaling: Before (Dart)\nDESCRIPTION: This code snippet shows the previous way to disable text scaling using MediaQuery in Flutter, by setting the textScaleFactor to 1.0. This approach is being replaced by the withNoTextScaling method.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/deprecate-textscalefactor.md#_snippet_5\n\nLANGUAGE: Dart\nCODE:\n```\nMediaQuery(\n  data: MediaQuery.of(context).copyWith(textScaleFactor: 1.0),\n  child: IconTheme(\n    data: ..\n    child: icon,\n  ),\n)\n```\n\n----------------------------------------\n\nTITLE: ImageCache containsKey implementation Dart\nDESCRIPTION: This snippet shows the default implementation of the `containsKey` method in `ImageCache`.  It checks both pending and cached image buckets to determine if a key is already being tracked. This allows clients to check for the existence of an image in the cache without triggering a load.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/image-cache-and-provider.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n  bool containsKey(Object key) {\n    return _pendingImages[key] != null || _cache[key] != null;\n  }\n```\n\n----------------------------------------\n\nTITLE: ImageCache Old Logic Pseudocode (Dart)\nDESCRIPTION: This pseudocode represents the old logic of the ImageCache.  It shows how the maxByteSize would be increased if an image's byte size exceeded the current maxByteSize. This could lead to uncontrolled growth of the cache size, potentially causing memory issues on resource-constrained devices.  The onLoadImage function adds the image to the cache and discards oldest images to maintain size limits.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/imagecache-large-images.md#_snippet_0\n\nLANGUAGE: Dart\nCODE:\n```\n// Old logic pseudocode\nvoid onLoadImage(Image image) {\n  if (image.byteSize > _cache.maxByteSize) {\n    _cache.maxByteSize = image.byteSize + 1000;\n  }\n  _cache.add(image);\n  while (_cache.count > _cache.maxCount\n      || _cache.byteSize > _cache.maxByteSize) {\n    _cache.discardOldestImage();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing AnimationSheetBuilder in Dart\nDESCRIPTION: This code snippet shows how to initialize AnimationSheetBuilder with a specific frame size. The frame size defines the dimensions of each frame recorded by the builder.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/animation-sheet-builder-display.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nfinal AnimationSheetBuilder animationSheet = AnimationSheetBuilder(frameSize: const Size(80, 30));\n```\n\n----------------------------------------\n\nTITLE: Override didPushRoute Before Migration (Dart)\nDESCRIPTION: Shows the previous way of overriding the `didPushRoute` method using a String argument. This highlights how routing updates were handled before the migration.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/route-information-uri.md#_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nclass MyObserverState extends State<MyWidget> with WidgetsBindingObserver {\n  @override\n  Future<bool> didPushRoute(String route) => _handleRoute(route);\n}\n```\n\n----------------------------------------\n\nTITLE: Stateful Widget Definition: StaggerDemo in Dart\nDESCRIPTION: This code defines a stateful widget named `StaggerDemo`. It creates the mutable state for this widget. The state is managed by the `_StaggerDemoState` class, which handles the animation logic.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/animations/staggered-animations.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nclass StaggerDemo extends StatefulWidget {\n  @override\n  State<StaggerDemo> createState() => _StaggerDemoState();\n}\n```\n\n----------------------------------------\n\nTITLE: Folder Structure Plaintext\nDESCRIPTION: This plaintext code represents the file structure of the Flutter project including the lib folder containing the counter.dart file, and the test folder containing counter_test.dart file. It is important for the test runner to be able to locate tests.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/testing/unit/introduction.md#_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\ncounter_app/\n  lib/\n    counter.dart\n  test/\n    counter_test.dart\n```\n\n----------------------------------------\n\nTITLE: Simple Result Class Definition\nDESCRIPTION: Defines a sealed class Result with two subclasses: Ok and Error. Result represents either a successful value (Ok) or an error (Error). The class uses generics to represent any return type.  This simplified version serves as a basic example of the Result pattern.  Dependencies: None.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/app-architecture/design-patterns/result.md#_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\n/// Utility class that simplifies handling errors.\n///\n/// Return a [Result] from a function to indicate success or failure.\n///\n/// A [Result] is either an [Ok] with a value of type [T]\n/// or an [Error] with an [Exception].\n///\n/// Use [Result.ok] to create a successful result with a value of type [T].\n/// Use [Result.error] to create an error result with an [Exception].\nsealed class Result<T> {\n  const Result();\n\n  /// Creates an instance of Result containing a value\n  factory Result.ok(T value) => Ok(value);\n\n  /// Create an instance of Result containing an error\n  factory Result.error(Exception error) => Error(error);\n}\n\n/// Subclass of Result for values\nfinal class Ok<T> extends Result<T> {\n  const Ok(this.value);\n\n  /// Returned value in result\n  final T value;\n}\n\n/// Subclass of Result for errors\nfinal class Error<T> extends Result<T> {\n  const Error(this.error);\n\n  /// Returned error in result\n  final Exception error;\n}\n```\n\n----------------------------------------\n\nTITLE: Save Performance Results to Disk in Flutter\nDESCRIPTION: Converts the `Timeline` into a `TimelineSummary` to facilitate the review of performance results. The `TimelineSummary` allows writing a JSON document summarizing the data contained within the `Timeline` and saves the complete `Timeline` as a JSON file on disk, which can be opened with the Chrome browser's tracing tools.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/testing/integration/profiling.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter_driver/flutter_driver.dart' as driver;\nimport 'package:integration_test/integration_test_driver.dart';\n\nFuture<void> main() {\n  return integrationDriver(\n    responseDataCallback: (data) async {\n      if (data != null) {\n        final timeline = driver.Timeline.fromJson(\n          data['scrolling_timeline'] as Map<String, dynamic>,\n        );\n\n        // Convert the Timeline into a TimelineSummary that's easier to\n        // read and understand.\n        final summary = driver.TimelineSummary.summarize(timeline);\n\n        // Then, write the entire timeline to disk in a json format.\n        // This file can be opened in the Chrome browser's tracing tools\n        // found by navigating to chrome://tracing.\n        // Optionally, save the summary to disk by setting includeSummary\n        // to true\n        await summary.writeTimelineToFile(\n          'scrolling_timeline',\n          pretty: true,\n          includeSummary: true,\n        );\n      }\n    },\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Adaptive Text Fields in Flutter\nDESCRIPTION: This code snippet demonstrates how to create an adaptive `TextField` in Flutter, using conditional logic to apply iOS-specific styling when running on iOS. It defines an `InputDecoration` with specific border, fill color, and padding to match iOS conventions. A sized box is used to constrain the height of the TextField to better match HIG guidelines.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/adaptive-responsive/platform-adaptations.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nWidget _createAdaptiveTextField() {\n  final _border = OutlineInputBorder(\n    borderSide: BorderSide(color: CupertinoColors.lightBackgroundGray),\n  );\n\n  final iOSDecoration = InputDecoration(\n    border: _border,\n    enabledBorder: _border,\n    focusedBorder: _border,\n    filled: true,\n    fillColor: CupertinoColors.white,\n    hoverColor: CupertinoColors.white,\n    contentPadding: EdgeInsets.fromLTRB(10, 0, 0, 0),\n  );\n\n  return Platform.isIOS\n      ? SizedBox(\n          height: 36.0,\n          child: TextField(\n            decoration: iOSDecoration,\n          ),\n        )\n      : TextField();\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Notification after migration (Dart)\nDESCRIPTION: This code snippet shows how to migrate a custom `Notification` subclass after the removal of `Notification.visitAncestor`. It replaces the override with a manual ancestor traversal using `context.visitAncestor`.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/notifications.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/widgets.dart';\n\nclass MyNotification extends Notification {\n\n  bool visitAncestor(Element element) {\n    print('Visiting $element');\n    if (element is ProxyElement) {\n      final Widget widget = element.widget;\n      if (widget is NotificationListener<MyNotification>) {\n        return widget.onNotification?.call(notification) ?? true;\n      }\n    }\n    return true;\n  }\n}\n\nvoid methodThatSendsNotification(BuildContext? context) {\n  context?.visitAncestor(MyNotification().visitAncestor);\n}\n```\n\n----------------------------------------\n\nTITLE: Add Privacy Manifest Resource Bundle (Ruby)\nDESCRIPTION: This snippet demonstrates how to add a resource bundle for a privacy manifest file (`PrivacyInfo.xcprivacy`) to the podspec file. This is needed if your plugin requires a privacy manifest to describe the plugin's privacy impact.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/packages-and-plugins/developing-packages.md#_snippet_14\n\nLANGUAGE: ruby\nCODE:\n```\ns.resource_bundles = {'your_plugin_privacy' => ['your_plugin/Sources/your_plugin/Resources/PrivacyInfo.xcprivacy']}\n```\n\n----------------------------------------\n\nTITLE: Viewing Current Flutter Channel\nDESCRIPTION: This command displays the currently active Flutter channel. It's useful for confirming which channel you're on before upgrading or switching channels.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/upgrade.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ flutter channel\n```\n\n----------------------------------------\n\nTITLE: Java version incompatibility troubleshooting\nDESCRIPTION: This snippet shows an error message indicating a mismatch between the Java Runtime version and the version used to compile a class. It typically occurs when an older JDK is installed on the computer.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/install/help.md#_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\njava.lang.UnsupportedClassVersionError: com/android/prefs/AndroidLocationsProvider \nhas been compiled by a more recent version of the Java Runtime (class file version 55.0), \nthis version of the Java Runtime only recognizes class file versions up to 52.0\n```\n\n----------------------------------------\n\nTITLE: Add INTERNET permission in AndroidManifest.xml\nDESCRIPTION: This XML snippet adds the INTERNET permission to the AndroidManifest.xml file. This allows the app to stream videos from the internet. It is placed within the <manifest> tag after the <application> definition.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/plugins/play-video.md#_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\">\n    <application ...>\n\n    </application>\n\n    <uses-permission android:name=\"android.permission.INTERNET\"/>\n</manifest>\n```\n\n----------------------------------------\n\nTITLE: PanGestureRecognizer with Listener before Migration (Dart)\nDESCRIPTION: This snippet shows the code *before* migration, demonstrating how `PanGestureRecognizer` was used with `Listener` without handling `PointerPanZoomStart` events. It highlights the missing `onPointerPanZoomStart` callback in the `Listener`, which prevents the application from correctly recognizing trackpad gestures. The `addPointerPanZoom` method is not called, so trackpad gestures will not trigger the recognizer.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/trackpad-gestures.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() => runApp(Foo());\n\nclass Foo extends StatefulWidget {\n  late final PanGestureRecognizer recognizer;\n\n  @override\n  void initState() {\n    super.initState();\n    recognizer = PanGestureRecognizer()\n    ..onStart = _onPanStart\n    ..onUpdate = _onPanUpdate\n    ..onEnd = _onPanEnd;\n  }\n\n  void _onPanStart(DragStartDetails details) {\n    debugPrint('onStart');\n  }\n\n  void _onPanUpdate(DragUpdateDetails details) {\n    debugPrint('onUpdate');\n  }\n\n  void _onPanEnd(DragEndDetails details) {\n    debugPrint('onEnd');\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Listener(\n      onPointerDown: recognizer.addPointer,\n      child: Container()\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing ExpandableFab Widget - Dart\nDESCRIPTION: Defines the ExpandableFab stateful widget with properties for initial open state, distance between action buttons, and a list of child widgets. It takes in parameters for whether or not the `ExpandedFab` begins in the expanded position, what the maximum distance of each action button is, and a list of children. You'll use the list later to provide the other action buttons.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/effects/expandable-fab.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n@immutable\nclass ExpandableFab extends StatefulWidget {\n  const ExpandableFab({\n    super.key,\n    this.initialOpen,\n    required this.distance,\n    required this.children,\n  });\n\n  final bool? initialOpen;\n  final double distance;\n  final List<Widget> children;\n\n  @override\n  State<ExpandableFab> createState() => _ExpandableFabState();\n}\n\nclass _ExpandableFabState extends State<ExpandableFab> {\n  @override\n  Widget build(BuildContext context) {\n    return const SizedBox();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions workflow for packaging and publishing Flutter Windows app to Microsoft Store\nDESCRIPTION: This GitHub Actions workflow demonstrates how to configure the Microsoft Store CLI, install Dart dependencies, create an MSIX package, and publish it to the Microsoft Store. It requires Azure AD credentials and the application to be present in the Microsoft Dev Center.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/deployment/windows.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\n- uses: microsoft/setup-msstore-cli@v1\n\n- name: Configure the Microsoft Store CLI\n  run: msstore reconfigure --tenantId ${{ secrets.AZURE_AD_TENANT_ID }} --clientId ${{ secrets.AZURE_AD_ClIENT_ID }} --clientSecret ${{ secrets.AZURE_AD_CLIENT_SECRET }} --sellerId ${{ secrets.SELLER_ID }}\n\n- name: Install Dart dependencies\n  run: flutter pub get\n\n- name: Create MSIX package\n  run: msstore package .\n\n- name: Publish MSIX to the Microsoft Store\n  run: msstore publish -v\n```\n\n----------------------------------------\n\nTITLE: Define Album Class in Dart\nDESCRIPTION: This defines a Dart class, `Album`, to represent album data. It includes a factory constructor, `fromJson`, for creating an `Album` instance from JSON data using pattern matching.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/networking/update-data.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nclass Album {\n  final int id;\n  final String title;\n\n  const Album({required this.id, required this.title});\n\n  factory Album.fromJson(Map<String, dynamic> json) {\n    return switch (json) {\n      {'id': int id, 'title': String title} => Album(id: id, title: title),\n      _ => throw const FormatException('Failed to load album.'),\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Regenerate iOS Project Configuration\nDESCRIPTION: This command regenerates the iOS project's configuration files after updating the minimum deployment target to ensure compatibility with Swift Package Manager plugins.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/packages-and-plugins/swift-package-manager/for-app-developers.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nflutter build ios --config-only\n```\n\n----------------------------------------\n\nTITLE: Aligning components horizontally/vertically - Kotlin (Jetpack Compose)\nDESCRIPTION: Demonstrates how to align components horizontally and vertically in Jetpack Compose using `Row` and `Column` composables. `horizontalArrangement = Arrangement.Center` centers the items horizontally within the `Row`, while `verticalArrangement = Arrangement.Center` centers them vertically within the `Column`.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/compose-devs.md#_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nRow(horizontalArrangement = Arrangement.Center) {\n   Image(Icons.Default.Public, contentDescription = \"\")\n   Text(\"Hello, world!\")\n}\n\nColumn(verticalArrangement = Arrangement.Center) {\n   Image(Icons.Default.Public, contentDescription = \"\")\n   Text(\"Hello, world!\")\n}\n```\n\n----------------------------------------\n\nTITLE: Flutter SDK Initialization Notification\nDESCRIPTION: This snippet shows the notification displayed in VS Code while initializing the Flutter SDK. It indicates that the initialization process is in progress and may take a few minutes.\nSOURCE: https://github.com/flutter/website/blob/main/src/_includes/docs/install/flutter/vscode.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nInitializing the Flutter SDK. This may take a few minutes.\n```\n\n----------------------------------------\n\nTITLE: Finding a Specific Widget Instance - Flutter\nDESCRIPTION: This snippet shows how to locate a specific instance of a widget using `find.byWidget()`.  It creates a `Padding` widget instance and then builds a `Container` that uses this widget as its child. It then searches for the specific `childWidget` instance in the widget tree and verifies its existence using `findsOneWidget`.  This is helpful for testing widget composition and verifying that a particular child widget is rendered.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/testing/widget/finders.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\ntestWidgets('finds a specific instance', (tester) async {\n  const childWidget = Padding(padding: EdgeInsets.zero);\n\n  // Provide the childWidget to the Container.\n  await tester.pumpWidget(Container(child: childWidget));\n\n  // Search for the childWidget in the tree and verify it exists.\n  expect(find.byWidget(childWidget), findsOneWidget);\n});\n```\n\n----------------------------------------\n\nTITLE: YAML Dependency Override\nDESCRIPTION: Example of overriding a package dependency in `pubspec.yaml` to force the use of a specific version.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/packages-and-plugins/using-packages.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  some_package:\n  another_package:\ndependency_overrides:\n  url_launcher: '5.4.0'\n```\n\n----------------------------------------\n\nTITLE: Update Podfile for add-to-app with App Clip target (Ruby)\nDESCRIPTION: This snippet demonstrates how to update the Podfile in an add-to-app project to incorporate the App Clip target, which involves specifying targets for both the host app and the App Clip.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/platform-integration/ios/ios-app-clip.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\ntarget 'MyApp' do\n  install_all_flutter_pods(flutter_application_path)\nend\n\ntarget '<name of your App Clip target>'\n  install_all_flutter_pods(flutter_application_path)\nend\n```\n\n----------------------------------------\n\nTITLE: Deleting provideSplashScreen() method in FlutterActivity (Java)\nDESCRIPTION: This code snippet illustrates the removal of the `provideSplashScreen()` method in a FlutterActivity implementation, which constructs the custom splash screen as a Drawable. This is a step in migrating from the deprecated splash screen API. The provided example returns a DrawableSplashScreen object.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/splash-screen-migration.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\n   @Override\n   public SplashScreen provideSplashScreen() {\n       // ...\n       return new DrawableSplashScreen(\n           new SomeDrawable(\n               ContextCompat.getDrawable(this, R.some_splash_screen)));\n   }\n```\n\n----------------------------------------\n\nTITLE: Rotating Components Flutter/Dart\nDESCRIPTION: Rotates a Container widget using the Transform widget and Matrix4.identity()..rotateZ() method in Flutter/Dart. Relies on the Flutter framework and the 'bold24Roboto' TextStyle. The widget is rotated by 15 degrees on the Z axis.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/web-devs.md#_snippet_12\n\nLANGUAGE: Dart\nCODE:\n```\nfinal container = Container(\n  // grey box\n  width: 320,\n  height: 240,\n  color: Colors.grey[300],\n  child: Center(\n    child: Transform(\n      alignment: Alignment.center,\n      transform: Matrix4.identity()..rotateZ(15 * 3.1415927 / 180),\n      child: Container(\n        // red box\n        padding: const EdgeInsets.all(16),\n        decoration: BoxDecoration(\n          color: Colors.red[400],\n        ),\n        child: Text(\n          'Lorem ipsum',\n          style: bold24Roboto,\n          textAlign: TextAlign.center,\n        ),\n      ),\n    ),\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Check if Multi-Select Modifier Key is Pressed - Flutter\nDESCRIPTION: This snippet provides a platform-aware utility function to check if the multi-select modifier key (Ctrl on Windows/Linux, Cmd on macOS) is currently pressed. It uses `Platform.isMacOS` to differentiate between platforms and checks for the appropriate `LogicalKeyboardKey` values. This is used for handling multi-select interactions in a platform-consistent way.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/adaptive-responsive/idioms.md#_snippet_2\n\nLANGUAGE: Dart\nCODE:\n```\nstatic bool get isMultiSelectModifierDown {\n  bool isDown = false;\n  if (Platform.isMacOS) {\n    isDown = isKeyDown({\n      LogicalKeyboardKey.metaLeft,\n      LogicalKeyboardKey.metaRight,\n    });\n  } else {\n    isDown = isKeyDown({\n      LogicalKeyboardKey.controlLeft,\n      LogicalKeyboardKey.controlRight,\n    });\n  }\n  return isDown;\n}\n```\n\n----------------------------------------\n\nTITLE: FloatingActionButton: Foreground Color Selection (Deprecated)\nDESCRIPTION: Demonstrates the old logic for determining the foregroundColor of a FloatingActionButton.  The theme.accentIconTheme.color path is being removed.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/fab-theme-data-accent-properties.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nfinal Color foregroundColor = this.foregroundColor\n      ?? floatingActionButtonTheme.foregroundColor\n      ?? theme.accentIconTheme.color // To be removed.\n      ?? theme.colorScheme.onSecondary;\n```\n\n----------------------------------------\n\nTITLE: Declaring Android Plugin Dependency in build.gradle\nDESCRIPTION: This code snippet demonstrates how to declare a dependency on another Flutter plugin (url_launcher) in the `build.gradle` file for the Android platform. This allows the plugin's native Android code to access the API exposed by `url_launcher`.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/packages-and-plugins/developing-packages.md#_snippet_36\n\nLANGUAGE: groovy\nCODE:\n```\nandroid {\n    // lines skipped\n    dependencies {\n        compileOnly rootProject.findProject(\":url_launcher\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Add integration_test Dependency (Console)\nDESCRIPTION: This command adds the `integration_test` and `flutter_test` packages as dev dependencies to the Flutter project using `flutter pub add`. It also specifies the Flutter SDK constraint.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/testing/integration-tests/index.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nflutter pub add 'dev:integration_test:{\"sdk\":\"flutter\"}'\n```\n\n----------------------------------------\n\nTITLE: Handling Surface Lifecycle Events with Callback - Java\nDESCRIPTION: This code snippet demonstrates how to use the setCallback method on SurfaceProducer to listen to surface lifecycle events, specifically when the surface is available and when it is destroyed. This is crucial for conserving memory when the application is suspended and ensuring proper surface recreation when it resumes. The onSurfaceAvailable event should be used for initialization and drawing, while onSurfaceDestroyed is for cleanup and stopping drawing.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/android-surface-plugins.md#_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nsurfaceProducer.setCallback(\n   new TextureRegistry.SurfaceProducer.Callback() {\n      @Override\n      public void onSurfaceAvailable() {\n         // Do surface initialization here, and draw the current frame.\n      }\n\n      @Override\n      public void onSurfaceDestroyed() {\n         // Do surface cleanup here, and stop drawing frames.\n      }\n   }\n);\n```\n\n----------------------------------------\n\nTITLE: ScaffoldMessenger Assertion Message\nDESCRIPTION: This code snippet contains the assertion message when no ScaffoldMessenger widget is found in the widget tree. It helps developers understand the requirement of having a ScaffoldMessenger ancestor for using Scaffold widgets.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/scaffold-messenger.md#_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nNo ScaffoldMessenger widget found.\nScaffold widgets require a ScaffoldMessenger widget ancestor.\nTypically, the ScaffoldMessenger widget is introduced by the MaterialApp\nat the top of your application widget tree.\n```\n\n----------------------------------------\n\nTITLE: Install Required System Libraries on Linux\nDESCRIPTION: This command demonstrates how to install necessary system libraries on a Linux system using the apt package manager. It installs `libgtk-3-0`, `libblkid1`, and `liblzma5` which are often required for Flutter applications on Linux. The `sudo apt-get install` command is used to install these packages.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/platform-integration/linux/building.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ sudo apt-get install libgtk-3-0 libblkid1 liblzma5\n```\n\n----------------------------------------\n\nTITLE: Running Flutter Doctor for Diagnostics\nDESCRIPTION: This command provides comprehensive information about the Flutter environment, including Flutter version, Dart version, connected devices, and installed tools. The `-v` flag enables verbose output.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/resources/bug-reports.md#_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nflutter doctor -v\n```\n\n----------------------------------------\n\nTITLE: Back confirmation dialog with WillPopScope\nDESCRIPTION: Code before migrating to back confirmation dialog with PopScope\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/android-predictive-back.md#_snippet_17\n\nLANGUAGE: dart\nCODE:\n```\nWillPopScope(\n  onWillPop: () async {\n    final bool? shouldPop = await _showBackDialog();\n    return shouldPop ?? false;\n  },\n  child: child,\n)\n```\n\n----------------------------------------\n\nTITLE: HomeScreen view definition in Dart\nDESCRIPTION: This snippet shows the definition of the `HomeScreen` view, which extends `StatelessWidget`. It takes a `HomeViewModel` as input and uses it to display data. The build method returns a `Scaffold` widget. The view's inputs should be the view model and a key.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/app-architecture/case-study/ui-layer.md#_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nclass HomeScreen extends StatelessWidget {\n  const HomeScreen({super.key, required this.viewModel});\n\n  final HomeViewModel viewModel;\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      // ...\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating ExpandingActionButton Widget - Dart\nDESCRIPTION: This snippet defines a stateless widget `_ExpandingActionButton` responsible for animating and positioning individual action buttons. It uses `AnimatedBuilder` and `Positioned` widgets to achieve the desired animation and layout. The `FadeTransition` adds a fade-in/fade-out effect during expansion/collapse.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/effects/expandable-fab.md#_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\n@immutable\nclass _ExpandingActionButton extends StatelessWidget {\n  const _ExpandingActionButton({\n    required this.directionInDegrees,\n    required this.maxDistance,\n    required this.progress,\n    required this.child,\n  });\n\n  final double directionInDegrees;\n  final double maxDistance;\n  final Animation<double> progress;\n  final Widget child;\n\n  @override\n  Widget build(BuildContext context) {\n    return AnimatedBuilder(\n      animation: progress,\n      builder: (context, child) {\n        final offset = Offset.fromDirection(\n          directionInDegrees * (math.pi / 180.0),\n          progress.value * maxDistance,\n        );\n        return Positioned(\n          right: 4.0 + offset.dx,\n          bottom: 4.0 + offset.dy,\n          child: Transform.rotate(\n            angle: (1.0 - progress.value) * math.pi / 2,\n            child: child!,\n          ),\n        );\n      },\n      child: FadeTransition(opacity: progress, child: child),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: ImageFilter.blur without explicit TileMode - Dart\nDESCRIPTION: This code snippet demonstrates how to create an ImageFilter without specifying a TileMode.  After the migration, the tileMode will be automatically selected based on the rendering context. This snippet showcases the recommended approach after the TileMode update.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/image-filter-blur-tilemode.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nfinal filter = ui.ImageFilter.blur(sigmaX: 4, sigmaY: 4);\n```\n\n----------------------------------------\n\nTITLE: BorderRadius Tween with CurvedAnimation - Dart\nDESCRIPTION: This snippet creates a tween for the `borderRadius` property, controlling the roundness of the square's corners. It uses `BorderRadiusTween` and `BorderRadius.circular()` to define the start and end border radius. `CurvedAnimation` and `Interval` are used to specify the animation curve and duration.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/animations/staggered-animations.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nborderRadius = BorderRadiusTween(\n  begin: BorderRadius.circular(4),\n  end: BorderRadius.circular(75),\n).animate(\n  CurvedAnimation(\n    parent: controller,\n    curve: const Interval(\n      0.375,\n      0.500,\n      curve: Curves.ease,\n    ),\n  ),\n),\n```\n\n----------------------------------------\n\nTITLE: Publish App to App Store Connect\nDESCRIPTION: This command publishes the IPA file to App Store Connect. It uses the API key to authenticate with App Store Connect and upload the IPA file.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/deployment/ios.md#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\napp-store-connect publish \\\n    --path $(find $(pwd) -name \"*.ipa\")\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter project from example\nDESCRIPTION: This command creates a new Flutter project in the specified directory without overwriting existing files. It's a necessary step before you can analyze, test, or run the example.\nSOURCE: https://github.com/flutter/website/blob/main/examples/layout/pavlova/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nflutter create --no-overwrite $PROJECT\n```\n\n----------------------------------------\n\nTITLE: Dart Table Initialization After Hot Reload (Data Change)\nDESCRIPTION: This Dart code modifies the last `Text` widget within the `sampleTable` list from 'T4' to 'T10'.  Because `sampleTable` is a `final` variable, the hot reload may not reflect this change unless a hot restart is performed.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/tools/hot-reload.md#_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nfinal sampleTable = [\n  Table(\n    children: const [\n      TableRow(children: [Text('T1')]),\n    ],\n  ),\n  Table(\n    children: const [\n      TableRow(children: [Text('T2')]),\n    ],\n  ),\n  Table(\n    children: const [\n      TableRow(children: [Text('T3')]),\n    ],\n  ),\n  Table(\n    children: const [\n      TableRow(\n        children: [Text('T10')], // modified\n      ),\n    ],\n  ),\n];\n```\n\n----------------------------------------\n\nTITLE: CocoaPods Validation (no libraries) - Shell\nDESCRIPTION: This command validates the plugin's podspec file using CocoaPods. It checks for common issues and ensures the plugin is compatible with CocoaPods. Key parameters include specifying the Debug configuration, skipping tests, using modular headers.\nSOURCE: https://github.com/flutter/website/blob/main/src/_includes/docs/swift-package-manager/migrate-swift-plugin.md#_snippet_14\n\nLANGUAGE: sh\nCODE:\n```\npod lib lint ios/plugin_name.podspec  --configuration=Debug --skip-tests --use-modular-headers\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter to the PATH Environment Variable\nDESCRIPTION: Adds the Flutter SDK's `bin` directory to the PATH environment variable. This allows the flutter and dart commands to be run from any terminal location.\nSOURCE: https://github.com/flutter/website/blob/main/src/_includes/docs/community/china/os-settings.md#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n{{setpath}}\n```\n\n----------------------------------------\n\nTITLE: Loading iOS images in Flutter (Swift)\nDESCRIPTION: This Swift snippet uses the `ios_platform_images` plugin to load an image from iOS into Flutter. This method requires that the `ios_platform_images` plugin be properly integrated within the Flutter project.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/assets/assets-and-images.md#_snippet_10\n\nLANGUAGE: swift\nCODE:\n```\nUIImage.flutterImageNamed(\"icons/heart.png\")\n```\n\n----------------------------------------\n\nTITLE: Using `maintainHintHeight` before migration in Dart\nDESCRIPTION: This code snippet demonstrates how `InputDecoration.maintainHintHeight` was used before the migration. It shows a TextField with an InputDecoration that sets `maintainHintHeight` to false.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/deprecate-inputdecoration-maintainhintheight.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nTextField(\n  indicator: InputDecoration(\n    maintainHintHeight: false,\n  ),\n),\n```\n\n----------------------------------------\n\nTITLE: Building OverflowBox in Flutter\nDESCRIPTION: This snippet demonstrates the use of OverflowBox. The OverflowBox allows its child to overflow its constraints. In this case, the Container is intentionally made very wide (4000 pixels), exceeding the OverflowBox's available space, but the OverflowBox displays it without warnings.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/layout/constraints.md#_snippet_15\n\nLANGUAGE: dart\nCODE:\n```\n@override\nWidget build(BuildContext context) {\n  return OverflowBox(\n    minWidth: 0,\n    minHeight: 0,\n    maxWidth: double.infinity,\n    maxHeight: double.infinity,\n    child: Container(color: red, width: 4000, height: 50),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Add google_mobile_ads plugin via flutter pub add\nDESCRIPTION: This command adds the google_mobile_ads plugin to your Flutter project as a dependency. This plugin provides the necessary APIs to integrate Google Mobile Ads into your Flutter application. It requires the Flutter SDK and pub package manager to be installed.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/plugins/google-mobile-ads.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ flutter pub add google_mobile_ads\n```\n\n----------------------------------------\n\nTITLE: Change Directory Command\nDESCRIPTION: This console command changes the current directory to the specified package directory. This step is necessary to execute subsequent documentation generation commands within the correct context.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/packages-and-plugins/developing-packages.md#_snippet_24\n\nLANGUAGE: console\nCODE:\n```\ncd ~/dev/mypackage\n```\n\n----------------------------------------\n\nTITLE: Setting Dialog Shape to Original Radius in Flutter\nDESCRIPTION: This Dart code demonstrates how to override the default BorderRadius of a Dialog to maintain the original 2 pixel radius. It shows an example usage within an AlertDialog using the shape property and RoundedRectangleBorder.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/dialog-border-radius.md#_snippet_0\n\nLANGUAGE: Dart\nCODE:\n```\nimport 'package:flutter/material.dart';\n\nvoid main() => runApp(Foo());\n\nclass Foo extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      home: Scaffold(\n        floatingActionButton: FloatingActionButton(onPressed: () {\n          showDialog(\n            context: context,\n            builder: (BuildContext context) {\n              return AlertDialog(\n                content: Text('Alert!'),\n                shape: RoundedRectangleBorder(\n                    borderRadius: BorderRadius.all(Radius.circular(2)))),\n              );\n            },\n          );\n        }),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: TextField with maxLengthEnforced true (Dart)\nDESCRIPTION: Demonstrates using `maxLengthEnforced: true` along with `maxLength` before the migration.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/use-maxLengthEnforcement-instead-of-maxLengthEnforced.md#_snippet_1\n\nLANGUAGE: Dart\nCODE:\n```\nTextField(\n  maxLength: 6,\n  maxLengthEnforced: true,\n)\n```\n\n----------------------------------------\n\nTITLE: Flutter network images hands-on example in DartPad\nDESCRIPTION: This is a complete Flutter application that demonstrates how to display a network image within a MaterialApp and Scaffold. It includes the necessary imports and setup for a basic Flutter application, making it easy to run and test in DartPad.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/images/network-image.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\n\nvoid main() => runApp(const MyApp());\n\nclass MyApp extends StatelessWidget {\n  const MyApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    var title = 'Web Images';\n\n    return MaterialApp(\n      title: title,\n      home: Scaffold(\n        appBar: AppBar(title: Text(title)),\n        body: Image.network('https://picsum.photos/250?image=9'),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Manually Popping View Controller in iOS (Objective-C)\nDESCRIPTION: This snippet shows how to manually pop a view controller in iOS using Objective-C code. This code is invoked when SystemNavigator.pop() is called from Dart code. It checks if the root view controller is a UINavigationController and, if so, pops the top view controller.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/uikit-devs.md#_snippet_12\n\nLANGUAGE: objc\nCODE:\n```\nUIViewController* viewController = [UIApplication sharedApplication].keyWindow.rootViewController;\nif ([viewController isKindOfClass:[UINavigationController class]]) {\n  [((UINavigationController*)viewController) popViewControllerAnimated:NO];\n}\n```\n\n----------------------------------------\n\nTITLE: Styling components using StyleSheet in React Native\nDESCRIPTION: This code snippet demonstrates how to style components in React Native using inline styling and `StyleSheet.create`. It shows how to define styles for a container and text using CSS-like properties.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/react-native-devs.md#_snippet_27\n\nLANGUAGE: js\nCODE:\n```\n// React Native\n<View style={styles.container}>\n  <Text style={%raw%}{{ fontSize: 32, color: 'cyan', fontWeight: '600' }}{%endraw%}>\n    This is a sample text\n  </Text>\n</View>\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Container with Padding and Child in Flutter\nDESCRIPTION: This example displays a red Container with padding and a green child Container of size 30x30. The red Container sizes itself to its child's size plus the padding, making the red color visible around the green container.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/layout/constraints.md#_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nCenter(\n   child: Container(color: red\n      padding: const EdgeInsets.all(20),\n      child: Container(color: green, width: 30, height: 30)))\n```\n\n----------------------------------------\n\nTITLE: Update Git Submodules - Console\nDESCRIPTION: Initializes and updates the git submodules after the repository has already been cloned. This command is used if the repository was initially cloned without the `--recurse-submodules` flag.\nSOURCE: https://github.com/flutter/website/blob/main/README.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\ngit submodule update --init --recursive\n```\n\n----------------------------------------\n\nTITLE: Extract Flutter SDK (Linux)\nDESCRIPTION: This shell command extracts the Flutter SDK tarball to a specified directory on Linux. It uses the 'tar' command with the '-xf' option to extract the file and the '-C' option to specify the destination directory. The variables {{dirdl}} and {{path}} define the source and destination paths, respectively.  The tar utility must be available.\nSOURCE: https://github.com/flutter/website/blob/main/src/_includes/docs/install/flutter/download.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n{{prompt}} {{unzip}} -xf {{dirdl}}flutter_sdk_v1.0.0.zip -C {{path}}\n```\n\n----------------------------------------\n\nTITLE: Listening for view model changes in the view\nDESCRIPTION: This code demonstrates how to listen for changes in the view model and execute UI actions accordingly, such as showing a `SnackBar` when an error occurs. It includes adding and removing the listener in `initState` and `dispose`.  Requires Flutter SDK.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/app-architecture/design-patterns/command.md#_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\n@override\nvoid initState() {\n  super.initState();\n  widget.viewModel.addListener(_onViewModelChanged);\n}\n\n@override\nvoid dispose() {\n  widget.viewModel.removeListener(_onViewModelChanged);\n  super.dispose();\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating TextSelectionOverlay.fadeDuration in Flutter\nDESCRIPTION: This snippet illustrates how to migrate from `TextSelectionOverlay.fadeDuration` to `SelectionOverlay.fadeDuration` in Flutter.  `TextSelectionOverlay.fadeDuration` was deprecated in v2.12.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/3-13-deprecations.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nTextSelectionOverlay.fadeDuration;\n```\n\nLANGUAGE: dart\nCODE:\n```\nSelectionOverlay.fadeDuration;\n```\n\n----------------------------------------\n\nTITLE: Analyzing Dart Code\nDESCRIPTION: Analyzes the Dart code in the current project directory for potential issues and errors. This uses the `dart analyze` command.\nSOURCE: https://github.com/flutter/website/blob/main/examples/layout/lakes/interactive/README.md#_snippet_2\n\nLANGUAGE: Dart\nCODE:\n```\ndart analyze\n```\n\n----------------------------------------\n\nTITLE: Configure Flutter Mode in launch.json (VS Code)\nDESCRIPTION: This code snippet shows how to configure the `flutterMode` property in the `launch.json` file within VS Code to run a Flutter application in profile mode. Profile mode is used for performance debugging, as it closely resembles release mode but includes tracing information for profiling tools.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/perf/ui-performance.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n  \"configurations\": [\n    {\n      \"name\": \"Flutter\",\n      \"request\": \"launch\",\n      \"type\": \"dart\",\n      \"flutterMode\": \"profile\"\n    }\n  ]\n```\n\n----------------------------------------\n\nTITLE: Deprecated: Overriding TextSelectionControls to customize context menu in Flutter\nDESCRIPTION: This code demonstrates the deprecated way of customizing context menus by overriding TextSelectionControls and modifying the canCut boolean. This approach is replaced by contextMenuBuilder.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/context-menus.md#_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\n// Deprecated.\nclass _MyMaterialTextSelectionControls extends MaterialTextSelectionControls {\n  @override\n  bool canCut() => false;\n}\n```\n\n----------------------------------------\n\nTITLE: List Flutter Configuration Files (Plaintext)\nDESCRIPTION: This displays a list of Flutter configuration files located in the user's home directory that can be optionally removed to completely uninstall Flutter.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/uninstall/index.md#_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n{{ flutter-files | strip }}\n```\n\n----------------------------------------\n\nTITLE: Binary Conversion for Frame Smoothness\nDESCRIPTION: This code snippet demonstrates converting a frame's rendering time (x, in milliseconds) into a binary indicator representing whether the frame is considered smooth (x <= 16). The indicator assigns 1 if the condition is true (smooth) and 0 if it's false.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/perf/appendix.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nisSmooth = [x <= 16] = (x <= 16 ? 1 :0)\n```\n\n----------------------------------------\n\nTITLE: Default Flavor YAML\nDESCRIPTION: This code snippet shows how to declare a default flavor for a Flutter Android app in the `pubspec.yaml` file. When a default flavor is specified, the `flutter run` command can be used without specifying the flavor. This simplifies the process of running the app for the most common flavor.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/tools/pubspec.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nflutter:\n  default-flavor: flavor_name # Android-only field\n```\n\n----------------------------------------\n\nTITLE: Aligning components vertically using VStack - SwiftUI\nDESCRIPTION: This snippet demonstrates how to align components vertically using `VStack` in SwiftUI. It creates a vertical stack containing an image and a text view.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/swiftui-devs.md#_snippet_9\n\nLANGUAGE: Swift\nCODE:\n```\nVStack {\n  Image(systemName: \"globe\")\n  Text(\"Hello, world!\")\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Pigeon Swift Output Path\nDESCRIPTION: This code snippet shows the change needed in the Pigeon configuration to update the Swift output path after migrating to Swift Package Manager.  It updates the `swiftOut` parameter to reflect the new directory structure.\nSOURCE: https://github.com/flutter/website/blob/main/src/_includes/docs/swift-package-manager/migrate-swift-plugin.md#_snippet_4\n\nLANGUAGE: Dart\nCODE:\n```\n     kotlinOptions: KotlinOptions(),\n     javaOut: 'android/app/src/main/java/io/flutter/plugins/Messages.java',\n     javaOptions: JavaOptions(),\n   - swiftOut: 'ios/Classes/messages.g.swift',\n   + swiftOut: 'ios/plugin_name/Sources/plugin_name/messages.g.swift',\n     swiftOptions: SwiftOptions(),\n```\n\n----------------------------------------\n\nTITLE: Building Center with Large Text in Flutter\nDESCRIPTION: This example shows how Text wraps when not inside FittedBox. The Text widget gets its maximum width from the screen, and breaks the line so that it fits the screen.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/layout/constraints.md#_snippet_21\n\nLANGUAGE: dart\nCODE:\n```\n'Center(\\n'   'child: Text(\\'…\\'));'\n```\n\n----------------------------------------\n\nTITLE: TransitionDelegate Resolve (Before Migration) - Dart\nDESCRIPTION: This code snippet demonstrates the `resolve` method of a custom `TransitionDelegate` before the migration. It shows how to handle entering and exiting routes by marking them for add or remove, respectively. Note that it uses `isEntering` to determine if a page route should be added.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/route-transition-record-and-transition-delegate.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/widgets.dart';\n\nclass NoAnimationTransitionDelegate extends TransitionDelegate<void> {\n  @override\n  Iterable<RouteTransitionRecord> resolve({\n    List<RouteTransitionRecord> newPageRouteHistory,\n    Map<RouteTransitionRecord, RouteTransitionRecord> locationToExitingPageRoute,\n    Map<RouteTransitionRecord, List<RouteTransitionRecord>> pageRouteToPagelessRoutes,\n  }) {\n    final List<RouteTransitionRecord> results = <RouteTransitionRecord>[];\n\n    for (final RouteTransitionRecord pageRoute in newPageRouteHistory) {\n      if (pageRoute.isEntering) {\n        pageRoute.markForAdd();\n      }\n      results.add(pageRoute);\n\n    }\n    for (final RouteTransitionRecord exitingPageRoute in locationToExitingPageRoute.values) {\n      exitingPageRoute.markForRemove();\n      final List<RouteTransitionRecord> pagelessRoutes = pageRouteToPagelessRoutes[exitingPageRoute];\n      if (pagelessRoutes != null) {\n        for (final RouteTransitionRecord pagelessRoute in pagelessRoutes) {\n          pagelessRoute.markForRemove();\n        }\n      }\n      results.add(exitingPageRoute);\n\n    }\n    return results;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Repository Constructor with Dependency Injection (Dart)\nDESCRIPTION: This code snippet demonstrates dependency injection in a repository class. It shows how a `MyService` instance is injected into the `MyRepository` constructor, which then stores it as a private member. The `MyService` instance is passed as a required named parameter to the constructor.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/app-architecture/case-study/dependency-injection.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nclass MyRepository {\n  MyRepository({required MyService myService})\n          : _myService = myService;\n\n  late final MyService _myService;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Stateful SetupFlow Widget in Dart\nDESCRIPTION: This snippet defines a stateful widget called `SetupFlow` that accepts a route name. It represents the parent widget for the nested navigation flow.  The setupPageRoute parameter is used to determine which screen within the setup flow should be displayed.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/effects/nested-nav.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nclass SetupFlow extends StatefulWidget {\n  const SetupFlow({super.key, required this.setupPageRoute});\n\n  final String setupPageRoute;\n\n  @override\n  State<SetupFlow> createState() => SetupFlowState();\n}\n\nclass SetupFlowState extends State<SetupFlow> {\n  //...\n}\n```\n\n----------------------------------------\n\nTITLE: Adding intl package dependency - Console\nDESCRIPTION: This command adds the `intl` package as a dependency to the Flutter project, pulling in the version pinned by `flutter_localizations`. This package is required for internationalization and localization support.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/accessibility-and-internationalization/internationalization.md#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ flutter pub add intl:any\n```\n\n----------------------------------------\n\nTITLE: ExclusiveAppComponent detachFromActivity Java\nDESCRIPTION: This code snippet represents the `detachFromActivity` method expected when implementing `ExclusiveAppComponent<Activity>`. It should be called when your custom activity is being destroyed naturally.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/android-activity-control-surface-attach.md#_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nvoid detachFromActivity();\n```\n\n----------------------------------------\n\nTITLE: Semantics Tree After Tooltip Change\nDESCRIPTION: This code represents the semantics tree structure corresponding to the widget tree *after* the tooltip accessibility change. It demonstrates that the tooltip message (SemanticsNode#6) is now a direct child of the \"child\" node (SemanticsNode#3), improving the accessibility traversal order.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/tooltip-semantics-order.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nSemanticsNode#0\n |\n └─SemanticsNode#1\n   │\n   └─SemanticsNode#5\n     │ flags: hasImplicitScrolling\n     │ scrollChildren: 3\n     │\n     ├─SemanticsNode#2\n     │   tags: RenderViewport.twoPane\n     │   label: \"before\"\n     │   textDirection: ltr\n     │\n     ├─SemanticsNode#3\n     │ │ tags: RenderViewport.twoPane\n     │ │ label: \"child\"\n     │ │ tooltip: \"message\"\n     │ │ textDirection: ltr\n     │ │\n     │ └─SemanticsNode#6\n     │     label: \"message\"\n     │     textDirection: ltr\n     │\n     └─SemanticsNode#4\n         tags: RenderViewport.twoPane\n         label: \"after\"\n         textDirection: ltr\n```\n\n----------------------------------------\n\nTITLE: Updated Objective-C Declaration of splashScreenView\nDESCRIPTION: The updated declaration of the `splashScreenView` property in Objective-C, correctly marked as `nullable`.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/ios-flutterviewcontroller-splashscreenview-nullable.md#_snippet_1\n\nLANGUAGE: objective-c\nCODE:\n```\n@property(strong, nonatomic, nullable) UIView* splashScreenView;\n```\n\n----------------------------------------\n\nTITLE: Saving Chat History to Disk in Dart\nDESCRIPTION: This Dart code saves the chat history to disk as JSON files. It iterates through the history, converts each ChatMessage to JSON using `toJson()`, and writes it to a separate file.  It skips writing if the file already exists, improving performance. Requires `JsonEncoder` and file system access.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ai-toolkit/feature-integration.md#_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> _saveHistory() async {\n  // get the latest history\n  final history = _provider.history.toList();\n\n  // write the new messages\n  for (var i = 0; i != history.length; ++i) {\n    // skip if the file already exists\n    final file = await _messageFile(i);\n    if (file.existsSync()) continue;\n\n    // write the new message to disk\n    final map = history[i].toJson();\n    final json = JsonEncoder.withIndent('  ').convert(map);\n    await file.writeAsString(json);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Corrected Menu Button Usage Example Dart\nDESCRIPTION: This example shows the corrected way to use standard buttons instead of `MenuItemButton` outside a menu context.  It replaces `MenuItemButton` with `TextButton` to resolve the exception thrown when menu buttons are used directly without a menu role.  This ensures that non-menu buttons are used outside of menu structures.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/menu-semantics-roles.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nMaterialApp(\n  home: Material(\n    child: Column(\n      children: [\n        ElevatedButton(onPressed: () {}, child: const Text('Button 0')),\n        OutlinedButton(onPressed: () {}, child: const Text('Button 1')),\n        TextButton(onPressed: () {}, child: const Text('Button 2')),\n      ]\n    )\n  )\n)\n```\n\n----------------------------------------\n\nTITLE: Remove Repositories Block from build.gradle (Groovy)\nDESCRIPTION: Removes the `repositories` block from the `build.gradle` file.  This is done as part of centralizing repository management within the `settings.gradle` file, which is the recommended approach with Gradle 7+.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/add-to-app/android/project-setup.md#_snippet_4\n\nLANGUAGE: Groovy\nCODE:\n```\n// Remove the following block, starting on the next line\n    repositories {\n        google()\n        mavenCentral()\n    }\n// ...to the previous line\n```\n\n----------------------------------------\n\nTITLE: Complete Flutter App with Asynchronous Data Loading\nDESCRIPTION: This example demonstrates a complete Flutter application that loads data asynchronously from a remote URL and displays it in a `ListView`. It includes imports, widget definitions, state management, asynchronous data fetching using `http` package, and UI rendering. The app displays a loading indicator while fetching data.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/uikit-devs.md#_snippet_26\n\nLANGUAGE: dart\nCODE:\n```\nimport 'dart:convert';\n\nimport 'package:flutter/material.dart';\nimport 'package:http/http.dart' as http;\n\nvoid main() {\n  runApp(const SampleApp());\n}\n\nclass SampleApp extends StatelessWidget {\n  const SampleApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return const MaterialApp(title: 'Sample App', home: SampleAppPage());\n  }\n}\n\nclass SampleAppPage extends StatefulWidget {\n  const SampleAppPage({super.key});\n\n  @override\n  State<SampleAppPage> createState() => _SampleAppPageState();\n}\n\nclass _SampleAppPageState extends State<SampleAppPage> {\n  List<Map<String, Object?>> data = [];\n\n  @override\n  void initState() {\n    super.initState();\n    loadData();\n  }\n\n  Future<void> loadData() async {\n    final Uri dataURL = Uri.parse('https://jsonplaceholder.typicode.com/posts');\n    final http.Response response = await http.get(dataURL);\n    setState(() {\n      data = (jsonDecode(response.body) as List).cast<Map<String, Object?>>();\n    });\n  }\n\n  Widget getRow(int index) {\n    return Padding(\n      padding: const EdgeInsets.all(10),\n      child: Text('Row ${data[index]['title']}'),\n    );\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: const Text('Sample App')),\n      body: ListView.builder(\n        itemCount: data.length,\n        itemBuilder: (context, index) {\n          return getRow(index);\n        },\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating HomeScreen Widget in Flutter\nDESCRIPTION: Defines the HomeScreen widget, which displays a lightbulb icon in a circle and a button to navigate to the device setup start screen. The HomeScreen uses a Scaffold with an AppBar and a body containing the icon and button.  Navigation is performed using Navigator.of(context).pushNamed.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/effects/nested-nav.md#_snippet_11\n\nLANGUAGE: Dart\nCODE:\n```\nconst HomeScreen({super.key});\n\n@override\nWidget build(BuildContext context) {\n  return Scaffold(\n    appBar: _buildAppBar(context),\n    body: Center(\n      child: Padding(\n        padding: const EdgeInsets.symmetric(horizontal: 24),\n        child: Column(\n          mainAxisSize: MainAxisSize.min,\n          children: [\n            Container(\n              width: 200,\n              height: 200,\n              decoration: const BoxDecoration(\n                shape: BoxShape.circle,\n                color: Color(0xFF222222),\n              ),\n              child: Center(\n                child: Icon(\n                  Icons.lightbulb,\n                  size: 140,\n                  color: Theme.of(context).scaffoldBackgroundColor,\n                ),\n              ),\n            ),\n            const SizedBox(height: 32),\n            const Text(\n              'Add your first bulb',\n              textAlign: TextAlign.center,\n              style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold),\n            ),\n          ],\n        ),\n      ),\n    ),\n    floatingActionButton: FloatingActionButton(\n      onPressed: () {\n        Navigator.of(context).pushNamed(routeDeviceSetupStart);\n      },\n      child: const Icon(Icons.add),\n    ),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Set Initial Route in Cached FlutterEngine - Java\nDESCRIPTION: This Java code snippet demonstrates how to configure the initial route for a cached FlutterEngine within the `onCreate` method of an `Application` class. It instantiates a `FlutterEngine`, sets the initial route using `getNavigationChannel().setInitialRoute`, executes the Dart entrypoint to pre-warm the engine, and caches the engine for subsequent use by FlutterActivity or FlutterFragment. The route 'your/route/here' is specified as the initial route.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/add-to-app/android/_initial-route-cached-engine.md#_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\npublic class MyApplication extends Application {\n  @Override\n  public void onCreate() {\n    super.onCreate();\n    // Instantiate a FlutterEngine.\n    flutterEngine = new FlutterEngine(this);\n    // Configure an initial route.\n    flutterEngine.getNavigationChannel().setInitialRoute(\"your/route/here\");\n    // Start executing Dart code to pre-warm the FlutterEngine.\n    flutterEngine.getDartExecutor().executeDartEntrypoint(\n      DartEntrypoint.createDefault()\n    );\n    // Cache the FlutterEngine to be used by FlutterActivity or FlutterFragment.\n    FlutterEngineCache\n      .getInstance()\n      .put(\"my_engine_id\", flutterEngine);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: FloatingActionButton: Code Before Migration (accentIconTheme)\nDESCRIPTION: Illustrates how to configure FloatingActionButton's foreground color using ThemeData's accentIconTheme before the migration. This approach is now deprecated.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/fab-theme-data-accent-properties.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nMaterialApp(\n  theme: ThemeData(\n    accentIconTheme: IconThemeData(color: Colors.red),\n  ),\n)\n```\n\n----------------------------------------\n\nTITLE: FormField autoValidate After Migration Dart\nDESCRIPTION: This code snippet demonstrates how to use the `autovalidateMode` parameter in a `FormField` after the API migration. It shows the new way of enabling auto-validation with `AutovalidateMode.always`, which replicates the old behavior of `autovalidate: true`.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/form-field-autovalidation-api.md#_snippet_1\n\nLANGUAGE: Dart\nCODE:\n```\nclass MyWidget extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return FormField(\n      autovalidateMode: AutovalidateMode.always,\n      builder: (FormFieldState state) {\n        return Container();\n      },\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: SwiftUI Button Creation\nDESCRIPTION: Shows how to create a button in SwiftUI using the Button struct. The closure passed to the Button is executed when the button is tapped.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/swiftui-devs.md#_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\nButton(\"Do something\") {\n  // this closure gets called when your\n  // button is tapped\n}\n```\n\n----------------------------------------\n\nTITLE: Flutter SDK in protected folder troubleshooting\nDESCRIPTION: This snippet displays an error message that occurs when the Flutter SDK is installed in a protected folder (e.g., `C:\\Program Files\\`) requiring administrator privileges. Moving the SDK to a user-writable location is suggested.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/install/help.md#_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nThe Flutter SDK is installed in a protected folder and may not function correctly.\nPlease move the SDK to a location that is user-writable without Administration permissions and restart.\n```\n\n----------------------------------------\n\nTITLE: Implementing ToDo Repository with Database Access in Dart\nDESCRIPTION: This snippet demonstrates the `TodoRepository` class, which serves as the source of truth for ToDo items. It uses a `DatabaseService` to access the SQLite database. The `fetchTodos()`, `createTodo()`, and `deleteTodo()` methods are implemented to interact with the database through the `DatabaseService` instance.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/app-architecture/design-patterns/sql.md#_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nclass TodoRepository {\n  TodoRepository({required DatabaseService database}) : _database = database;\n\n  final DatabaseService _database;\n\n  Future<Result<List<Todo>>> fetchTodos() async {\n    if (!_database.isOpen()) {\n      await _database.open();\n    }\n    return _database.getAll();\n  }\n\n  Future<Result<Todo>> createTodo(String task) async {\n    if (!_database.isOpen()) {\n      await _database.open();\n    }\n    return _database.insert(task);\n  }\n\n  Future<Result<void>>> deleteTodo(int id) async {\n    if (!_database.isOpen()) {\n      await _database.open();\n    }\n    return _database.delete(id);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Snapcraft Metadata YAML Example\nDESCRIPTION: This YAML snippet defines the metadata for the snap, including the name, version, summary, and description. The version is usually derived from the build system. This information is displayed in the Snap Store.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/deployment/linux.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nname: super-cool-app\nversion: 0.1.0\nsummary: Super Cool App\ndescription: Super Cool App that does everything!\n```\n\n----------------------------------------\n\nTITLE: Platform View Implementation with Target Platform Detection in Dart\nDESCRIPTION: This Dart code snippet demonstrates how to implement the `build()` method to detect the target platform and return the appropriate widget when using platform views in Flutter. It uses `defaultTargetPlatform` to determine the current platform and provides a switch statement to handle Android, iOS, and macOS. A placeholder `<platform-view-type>` needs to be replaced with the actual platform view type.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/platform-integration/ios/platform-views.md#_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nWidget build(BuildContext context) {\n  // This is used in the platform side to register the view.\n  const String viewType = '<platform-view-type>';\n  // Pass parameters to the platform side.\n  final Map<String, dynamic> creationParams = <String, dynamic>{};\n\n  switch (defaultTargetPlatform) {\n    case TargetPlatform.android:\n    // return widget on Android.\n    case TargetPlatform.iOS:\n    // return widget on iOS.\n    case TargetPlatform.macOS:\n    // return widget on macOS.\n    default:\n      throw UnsupportedError('Unsupported platform view');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Migrate DragAnchor to dragAnchorStrategy Dart\nDESCRIPTION: This snippet demonstrates how to migrate from the deprecated `DragAnchor` enum to `dragAnchorStrategy` in Flutter's `Draggable` and `LongPressDraggable` widgets. This change provides more accurate feedback for draggable widgets, especially when used with other widgets like `Stack` and `InteractiveViewer`.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/3-3-deprecations.md#_snippet_1\n\nLANGUAGE: Dart\nCODE:\n```\nDraggable draggable = Draggable();\ndraggable = Draggable(dragAnchor: DragAnchor.child);\ndraggable = Draggable(dragAnchor: DragAnchor.pointer);\n\nLongPressDraggable longPressDraggable = LongPressDraggable();\nlongPressDraggable = LongPressDraggable(dragAnchor: DragAnchor.child);\nlongPressDraggable = LongPressDraggable(dragAnchor: DragAnchor.pointer);\n```\n\nLANGUAGE: Dart\nCODE:\n```\nDraggable draggable = Draggable();\ndraggable = Draggable(dragAnchorStrategy: childDragAnchorStrategy);\ndraggable = Draggable(dragAnchorStrategy: pointerDragAnchorStrategy);\n\nLongPressDraggable longPressDraggable = LongPressDraggable();\nlongPressDraggable = LongPressDraggable(dragAnchorStrategy: childDragAnchorStrategy);\nlongPressDraggable = LongPressDraggable(dragAnchorStrategy: pointerDragAnchorStrategy);\n```\n\n----------------------------------------\n\nTITLE: JSON User Model Example\nDESCRIPTION: A simple JSON example demonstrating a user model with name and email fields.  This snippet provides a representation of data that is later serialized and deserialized.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/data-and-backend/serialization/json.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"name\": \"John Smith\",\n  \"email\": \"john@example.com\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing TextInputClient with empty showAutocorrectionPromptRect - Dart\nDESCRIPTION: This code demonstrates how to implement the TextInputClient interface with an empty implementation of the new showAutocorrectionPromptRect method. This is useful if your application doesn't target iOS or doesn't support autocorrect. The class CustomTextInputClient is shown to implement the TextInputClient interface and define the method.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/add-showAutocorrectionPromptRect.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nclass CustomTextInputClient implements TextInputClient {\n  void showAutocorrectionPromptRect(int start, int end) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating state-dependent shape and border - Flutter\nDESCRIPTION: Shows how to specify different border colors based on the button's state (e.g., pressed) when migrating from OutlineButton to OutlinedButton. It highlights the use of MaterialStateProperty.resolveWith for dynamic border styling.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/buttons.md#_snippet_18\n\nLANGUAGE: dart\nCODE:\n```\nOutlineButton(\n  shape: StadiumBorder(),\n  highlightedBorderColor: Colors.blue,\n  borderSide: BorderSide(\n    width: 2,\n    color: Colors.red\n  ),\n  onPressed: () { },\n  child: Text('OutlineButton with custom shape and border'),\n)\n\nOutlinedButton(\n  style: ButtonStyle(\n    shape: MaterialStateProperty.all<OutlinedBorder>(StadiumBorder()),\n    side: MaterialStateProperty.resolveWith<BorderSide>(\n      (Set<MaterialState> states) {\n        final Color color = states.contains(MaterialState.pressed)\n          ? Colors.blue\n          : Colors.red;\n        return BorderSide(color: color, width: 2);\n      }\n    ),\n  ),\n  onPressed: () { },\n  child: Text('OutlinedButton with custom shape and border'),\n)\n```\n\n----------------------------------------\n\nTITLE: Register Platform View in App Delegate - Objective-C\nDESCRIPTION: This Objective-C code snippet shows how to register the platform view factory within the application's `AppDelegate`. This registration occurs in the `didFinishLaunchingWithOptions` method, making the native view accessible to the Flutter application. A registrar is used to register the view factory with a specific ID.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/platform-integration/ios/platform-views.md#_snippet_7\n\nLANGUAGE: Objective-C\nCODE:\n```\n#import \"AppDelegate.h\"\n#import \"FLNativeView.h\"\n#import \"GeneratedPluginRegistrant.h\"\n\n@implementation AppDelegate\n\n- (BOOL)application:(UIApplication *)application\n    didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n  [GeneratedPluginRegistrant registerWithRegistry:self];\n\n   NSObject<FlutterPluginRegistrar>* registrar =\n      [self registrarForPlugin:@\"plugin-name\"];\n\n  FLNativeViewFactory* factory =\n      [[FLNativeViewFactory alloc] initWithMessenger:registrar.messenger];\n\n  [[self registrarForPlugin:@\"<plugin-name>\"] registerViewFactory:factory\n                                                          withId:@\"<platform-view-type>\"];\n  return [super application:application didFinishLaunchingWithOptions:launchOptions];\n}\n\n@end\n```\n\n----------------------------------------\n\nTITLE: Detecting Taps with GestureDetector (Dart)\nDESCRIPTION: This snippet demonstrates using the `GestureDetector` widget to detect tap events on a FlutterLogo widget. The `onTap` callback is invoked when the logo is tapped, logging a message to the console.  This approach is used for widgets that don't have built-in event detection.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/xamarin-forms-devs.md#_snippet_44\n\nLANGUAGE: dart\nCODE:\n```\nclass SampleApp extends StatelessWidget {\n  const SampleApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: Center(\n        child: GestureDetector(\n          onTap: () {\n            developer.log('tap');\n          },\n          child: const FlutterLogo(size: 200),\n        ),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Building UnconstrainedBox with Infinite Width in Flutter\nDESCRIPTION: This example showcases how UnconstrainedBox allows its child to have any size it wants. However, when the child (Container) has infinite width, Flutter throws an error because it cannot render infinite sizes. This demonstrates a limitation of using UnconstrainedBox with unbounded children.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/layout/constraints.md#_snippet_16\n\nLANGUAGE: dart\nCODE:\n```\n'UnconstrainedBox(\\n'   'child: Container(color: Colors.red, width: double.infinity, height: 100));'\n```\n\n----------------------------------------\n\nTITLE: Migrating to SystemContextMenuController.showWithItems\nDESCRIPTION: Demonstrates how to migrate from the deprecated `SystemContextMenuController.show` to the new `SystemContextMenuController.showWithItems` method. It gets the default context menu items using `SystemContextMenu.getDefaultItems`, converts them to the required data format using `IOSSystemContextMenuItem.getData`, and then calls `showWithItems` with the `selectionRect` and the converted data.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/system_context_menu_controller_show.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nfinal List<IOSSystemContextMenuItem> defaultItems =\n    SystemContextMenu.getDefaultItems(editableTextState);\nfinal WidgetsLocalizations localizations =\n    WidgetsLocalizations.of(context);\nfinal List<IOSSystemContextMenuItemData> defaultItemDatas =\n    defaultItems\n        .map((IOSSystemContextMenuItem item) =>\n            item.getData(localizations))\n        .toList();\n_controller.showWithItems(selectionRect, defaultItemDatas);\n```\n\n----------------------------------------\n\nTITLE: Popping Route with Result\nDESCRIPTION: This snippet demonstrates how to pop a route from the navigator stack and pass a result back to the calling route. It uses Navigator.pop to send a map containing latitude and longitude coordinates as the result.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/uikit-devs.md#_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\nNavigator.of(context).pop({'lat': 43.821757, 'long': -79.226392});\n```\n\n----------------------------------------\n\nTITLE: Migrating CupertinoNavigationBar actionsForegroundColor - Dart\nDESCRIPTION: Demonstrates how to migrate away from the deprecated `actionsForegroundColor` property of `CupertinoNavigationBar` and `CupertinoSliverNavigationBar`.  The `primaryColor` in `CupertinoThemeData` should be used instead.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/1-22-deprecations.md#_snippet_2\n\nLANGUAGE: Dart\nCODE:\n```\nCupertinoNavigationBar(\n  actionsForegroundColor: CupertinoColors.systemBlue,\n);\nCupertinoSliverNavigationBar(\n  actionsForegroundColor: CupertinoColors.systemBlue,\n);\n```\n\nLANGUAGE: Dart\nCODE:\n```\nCupertinoTheme(\n  data: CupertinoThemeData(\n    primaryColor: CupertinoColors.systemBlue\n  ),\n  child: ...\n);\n\n// To access the color from the `CupertinoTheme`\nCupertinoTheme.of(context).primaryColor;\n```\n\n----------------------------------------\n\nTITLE: List Dart Configuration Files (Plaintext)\nDESCRIPTION: This displays a list of Dart configuration files in the user's home directory, for optional removal during Flutter uninstallation.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/uninstall/index.md#_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n{{ dart-files | strip}}\n```\n\n----------------------------------------\n\nTITLE: Defining Todo Class in Dart\nDESCRIPTION: This code defines a `Todo` class with `title` and `description` properties. This class serves as a data model for passing data between screens. It is a simple data class with a constructor for initializing the title and description.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/navigation/passing-data.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nclass Todo {\n  final String title;\n  final String description;\n\n  const Todo(this.title, this.description);\n}\n```\n\n----------------------------------------\n\nTITLE: Container with Large Dimensions Inside ConstrainedBox in Flutter\nDESCRIPTION: This example illustrates a Container with large dimensions inside a ConstrainedBox with min/max dimensions and wrapped in Center. Because of the ConstrainedBox's maxWidth and maxHeight, the Container will be constrained to the maximum size even though it wants to be larger.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/layout/constraints.md#_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nCenter(\n   child: ConstrainedBox(\n      constraints: BoxConstraints(\n                 minWidth: 70, minHeight: 70,\n                 maxWidth: 150, maxHeight: 150),\n        child: Container(color: red, width: 1000, height: 1000))))\n```\n\n----------------------------------------\n\nTITLE: Main Activity setup - Kotlin (Jetpack Compose)\nDESCRIPTION: Shows the basic structure of a `MainActivity` class in Jetpack Compose. This includes setting the content of the activity using `setContent`, applying a theme, and using a `Scaffold` for basic layout. The `Greeting` composable is used to display a simple greeting.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/compose-devs.md#_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MainActivity : ComponentActivity() {\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        enableEdgeToEdge()\n        setContent {\n            SampleTheme {\n                Scaffold(modifier = Modifier.fillMaxSize()) { innerPadding ->\n                    Greeting(\n                        name = \"Android\",\n                        modifier = Modifier.padding(innerPadding)\n                    )\n                }\n            }\n        }\n    }\n}\n\n@Composable\nfun Greeting(name: String, modifier: Modifier = Modifier) {\n    Text(\n        text = \"Hello $name!\",\n        modifier = modifier\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: InputDecoration.collapsed Usage Before Migration (Dart)\nDESCRIPTION: Illustrates the usage of `InputDecoration.collapsed` with the deprecated parameters `floatingLabelAlignment` and `floatingLabelBehavior`.  These parameters are being removed as they have no effect when using the collapsed constructor. The code uses the Flutter material library.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/input-decoration-collapsed.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nInputDecoration.collapsed(\n  hintText: 'Hint',\n  floatingLabelAlignment: FloatingLabelAlignment.center,\n  floatingLabelBehavior: FloatingLabelBehavior.auto,\n),\n```\n\n----------------------------------------\n\nTITLE: Migrating showDialog child to builder - Dart\nDESCRIPTION: Illustrates how to migrate from the deprecated `child` parameter of `showDialog` to the `builder` parameter. The `child` is replaced with `builder`, and the widget is returned in a builder function.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/1-22-deprecations.md#_snippet_5\n\nLANGUAGE: Dart\nCODE:\n```\nshowDialog(child: myWidget);\n```\n\nLANGUAGE: Dart\nCODE:\n```\nshowDialog(builder: (context) => myWidget);\n```\n\n----------------------------------------\n\nTITLE: Warning message example\nDESCRIPTION: This plaintext snippet shows an example of a warning message related to null-aware operations in Flutter 3.0. It appears when migrating to Flutter 3 due to API simplification of bindings and an eager compiler.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/release-notes/release-notes-3.0.0.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nWarning: Operand of null-aware operation '!' has type 'SchedulerBinding' which excludes null.\n```\n\n----------------------------------------\n\nTITLE: TextField with Localizations Widget (After Migration)\nDESCRIPTION: This example shows how to explicitly provide localizations using the Localizations widget. This approach is useful when a MaterialApp is not desired or feasible.  It requires specifying the locale and delegates for widgets and material localizations. The locale is set to 'en_US' and DefaultWidgetsLocalizations.delegate and DefaultMaterialLocalizations.delegate are used.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/text-field-material-localizations.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\n\nvoid main() => runApp(Foo());\n\nclass Foo extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return Localizations(\n      locale: const Locale('en', 'US'),\n      delegates: const <LocalizationsDelegate<dynamic>>[\n        DefaultWidgetsLocalizations.delegate,\n        DefaultMaterialLocalizations.delegate,\n      ],\n      child: MediaQuery(\n        data: const MediaQueryData(),\n        child: Directionality(\n          textDirection: TextDirection.ltr,\n          child: Material(\n            child: TextField(),\n          ),\n        ),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Command Class Dart\nDESCRIPTION: Defines an abstract `Command` class that extends `ChangeNotifier`, used to encapsulate actions and manage their state. It includes properties to track running, completed, and error states, and methods to execute the action and notify listeners of state changes, enabling UI updates based on the command's state.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/app-architecture/case-study/ui-layer.md#_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\nabstract class Command<T> extends ChangeNotifier {\n  Command();\n  bool running = false;\n  Result<T>? _result;\n\n  /// true if action completed with error\n  bool get error => _result is Error;\n\n  /// true if action completed successfully\n  bool get completed => _result is Ok;\n\n  /// Internal execute implementation\n  Future<void> _execute(action) async {\n    if (_running) return;\n\n    // Emit running state - e.g. button shows loading state\n    _running = true;\n    _result = null;\n    notifyListeners();\n\n    try {\n      _result = await action();\n    } finally {\n      _running = false;\n      notifyListeners();\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Assets in pubspec.yaml (Package)\nDESCRIPTION: This snippet shows how to specify assets that are part of a package that need to be included in the application. This involves including the package name in the asset path.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/assets/assets-and-images.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nflutter:\n  assets:\n    - packages/fancy_backgrounds/backgrounds/background1.png\n```\n\n----------------------------------------\n\nTITLE: Implementing ParentWidget in Flutter\nDESCRIPTION: This snippet defines the ParentWidget, a StatefulWidget responsible for managing the '_active' state. It includes the '_handleTapboxChanged' method that updates the '_active' state using setState() when the TapboxC widget is tapped. It uses TapboxC widget and passes _active state and onChanged callback.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/interactivity/index.md#_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\n\n//---------------------------- ParentWidget ----------------------------\n\nclass ParentWidget extends StatefulWidget {\n  const ParentWidget({super.key});\n\n  @override\n  State<ParentWidget> createState() => _ParentWidgetState();\n}\n\nclass _ParentWidgetState extends State<ParentWidget> {\n  bool _active = false;\n\n  void _handleTapboxChanged(bool newValue) {\n    setState(() {\n      _active = newValue;\n    });\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return SizedBox(\n      child: TapboxC(active: _active, onChanged: _handleTapboxChanged),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Flutter App Initialization Dart\nDESCRIPTION: This code snippet initializes a basic Flutter app with a title, AppBar, and a simple 'Hello World' body. It demonstrates the basic structure of a Flutter app using MaterialApp, Scaffold, and Text widgets.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/layout/tutorial.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\n\nvoid main() => runApp(const MyApp());\n\nclass MyApp extends StatelessWidget {\n  const MyApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    const String appTitle = 'Flutter layout demo';\n    return MaterialApp(\n      title: appTitle,\n      home: Scaffold(\n        appBar: AppBar(title: const Text(appTitle)),\n        body: const Center(\n          child: Text('Hello World'),\n        ),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a ScrollView (Dart)\nDESCRIPTION: This snippet demonstrates the `SingleChildScrollView` widget in Flutter, which is the closest equivalent to Xamarin.Forms' `ScrollView`. It wraps a `Text` widget, making it scrollable if the content exceeds the screen size. The `SingleChildScrollView` ensures that content exceeding the available space can be viewed by scrolling.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/xamarin-forms-devs.md#_snippet_40\n\nLANGUAGE: dart\nCODE:\n```\n@override\nWidget build(BuildContext context) {\n  return const SingleChildScrollView(child: Text('Long Content'));\n}\n```\n\n----------------------------------------\n\nTITLE: Navigating to Project Directory\nDESCRIPTION: Changes the current directory to the newly created Flutter project. This step is necessary to execute subsequent commands within the context of the project.\nSOURCE: https://github.com/flutter/website/blob/main/examples/animation/animate3/README.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ncd $PROJECT\n```\n\n----------------------------------------\n\nTITLE: Flutter Project Creation\nDESCRIPTION: Creates a new Flutter project from an existing example, preventing overwriting existing files. The `$PROJECT` variable represents the path to the example project.\nSOURCE: https://github.com/flutter/website/blob/main/examples/layout/lakes/step5/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nflutter create --no-overwrite $PROJECT\n```\n\n----------------------------------------\n\nTITLE: Running Flutter with Flavor Flag\nDESCRIPTION: This command runs the Flutter application with a specified flavor. The `<xcode_scheme_name>` should be replaced with the actual name of the Xcode scheme (e.g., `staging` or `production`). This command is used to launch the application in debug mode using the specified scheme.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/deployment/flavors-ios.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ flutter run --flavor <xcode_scheme_name>\n```\n\n----------------------------------------\n\nTITLE: Analyzing Dart Code\nDESCRIPTION: This command analyzes the Dart code within the Flutter project to identify potential issues and errors.\nSOURCE: https://github.com/flutter/website/blob/main/examples/layout/lakes/step2/README.md#_snippet_2\n\nLANGUAGE: Dart\nCODE:\n```\ndart analyze\n```\n\n----------------------------------------\n\nTITLE: Variable Declaration: Dart\nDESCRIPTION: This snippet demonstrates how to declare variables in Dart. Dart is type-safe and requires variables to be either explicitly typed or inferred by the type system.  This contrasts with JavaScript's untyped variables.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/react-native-devs.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n// JavaScript\nlet name = 'JavaScript';\n```\n\nLANGUAGE: Dart\nCODE:\n```\n/// Dart\n/// Both variables are acceptable.\nString name = 'dart'; // Explicitly typed as a [String].\nvar otherName = 'Dart'; // Inferred [String] type.\n```\n\n----------------------------------------\n\nTITLE: Handling User Events Dart\nDESCRIPTION: Demonstrates how to handle user events, specifically deleting a booking using `Dismissible` widget. When a booking is dismissed, the `viewModel.deleteBooking` method is executed to update the application state.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/app-architecture/case-study/ui-layer.md#_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nSliverList.builder(\n  itemCount: widget.viewModel.bookings.length,\n  itemBuilder: (_, index) => _Booking(\n    key: ValueKey(viewModel.bookings[index].id),\n    booking: viewModel.bookings[index],\n    onTap: () => context.push(\n      Routes.bookingWithId(viewModel.bookings[index].id)\n    ),\n    onDismissed: (_) =>\n      viewModel.deleteBooking.execute(widget.viewModel.bookings[index].id),\n  ),\n),\n```\n\n----------------------------------------\n\nTITLE: Build Website - Bash\nDESCRIPTION: This command builds the Flutter website and copies the output to the `_site` directory.\nSOURCE: https://github.com/flutter/website/blob/main/README.md#_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\n./dash_site build\n```\n\n----------------------------------------\n\nTITLE: Opt-in to Updated Slider Design - Dart\nDESCRIPTION: This code snippet demonstrates how to opt into the updated Material 3 design specification for the Flutter Slider widget by setting the `year2023` flag to `false`. This needs to be done on individual slider instances.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/updated-material-3-slider.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nSlider(\n  year2023: false,\n  value: _value,\n  onChanged: (value) {\n    setState(() {\n      _value = value;\n    });\n  },\n),\n```\n\n----------------------------------------\n\nTITLE: Using url_launcher Package in Flutter\nDESCRIPTION: This Dart code snippet demonstrates how to use the `url_launcher` plugin in a Flutter application. It imports the package and uses the `launchUrl` function to open a URL in the default browser when a button is pressed. Requires the `url_launcher` package to be added as a dependency in `pubspec.yaml`.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/packages-and-plugins/using-packages.md#_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\nimport 'package:path/path.dart' as p;\nimport 'package:url_launcher/url_launcher.dart';\n\nvoid main() {\n  runApp(const MyApp());\n}\n\nclass MyApp extends StatelessWidget {\n  const MyApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return const MaterialApp(home: DemoPage());\n  }\n}\n\nclass DemoPage extends StatelessWidget {\n  const DemoPage({super.key});\n\n  void launchURL() {\n    launchUrl(p.toUri('https://flutter.dev'));\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: Center(\n        child: ElevatedButton(\n          onPressed: launchURL,\n          child: const Text('Show Flutter homepage'),\n        ),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Info.plist for Camera and Microphone Access (XML)\nDESCRIPTION: Configures the Info.plist file for iOS to request camera and microphone access. This step is crucial for obtaining the necessary permissions to use the camera and microphone on iOS devices.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/plugins/picture-using-camera.md#_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<key>NSCameraUsageDescription</key>\n<string>Explanation on why the camera access is needed.</string>\n<key>NSMicrophoneUsageDescription</key>\n<string>Explanation on why the microphone access is needed.</string>\n```\n\n----------------------------------------\n\nTITLE: Set Login Keychain as Default (Again)\nDESCRIPTION: This command, repeated for emphasis, sets the login keychain as the default keychain. This ensures that the user's login keychain is active after the build process, avoiding authentication issues with apps on the machine.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/deployment/ios.md#_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nkeychain use-login\n```\n\n----------------------------------------\n\nTITLE: Resetting All Properties After Migration (PlatformDispatcher)\nDESCRIPTION: This snippet shows how to reset all test values at once using `tester.platformDispatcher.clearAllTestValues` after the migration from `TestWindow`. This is the recommended approach for clearing all test values.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/window-singleton.md#_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\ntestWidgets('test name', (WidgetTester tester) async {\n  addTeardown(tester.platformDispatcher.clearAllTestValues);\n});\n```\n\n----------------------------------------\n\nTITLE: Implement computeDryLayout with debugCannotComputeDryLayout in Dart\nDESCRIPTION: This code snippet demonstrates the implementation of the computeDryLayout method when it is impossible to calculate the dry layout. It calls debugCannotComputeDryLayout with a reason and returns a dummy size of const Size(0, 0).\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/renderbox-dry-layout.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\n  @override\n  Size computeDryLayout(BoxConstraints constraints) {\n    assert(debugCannotComputeDryLayout(\n      reason: 'Layout requires baseline metrics, which are only available after a full layout.'\n    ));\n    return const Size(0, 0);\n  }\n```\n\n----------------------------------------\n\nTITLE: Repainting ParallaxFlowDelegate on Scroll Flutter\nDESCRIPTION: This code snippet updates the `ParallaxFlowDelegate` to repaint every time the scroll position changes. It passes the `ScrollableState`'s `ScrollPosition` to the `FlowDelegate` superclass's `repaint` parameter.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/effects/parallax-scrolling.md#_snippet_15\n\nLANGUAGE: dart\nCODE:\n```\nclass ParallaxFlowDelegate extends FlowDelegate {\n  ParallaxFlowDelegate({\n    required this.scrollable,\n    required this.listItemContext,\n    required this.backgroundImageKey,\n  }) : super(repaint: scrollable.position);\n}\n```\n\n----------------------------------------\n\nTITLE: Importing a Flutter package in Dart\nDESCRIPTION: This code snippet demonstrates how to import a Flutter package in a Dart file, making its functionalities available for use.  The package needs to be added as a dependency in the pubspec.yaml file first.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/platform-integration/ios/apple-frameworks.md#_snippet_1\n\nLANGUAGE: Dart\nCODE:\n```\nimport 'package:package_name/package_name.dart';\n```\n\n----------------------------------------\n\nTITLE: Configuring Maven Repositories (Kotlin)\nDESCRIPTION: This snippet configures the Maven repositories in the `settings.gradle.kts` file to include the Flutter repository and a local repository where the AAR for the Flutter module is located.  It is necessary to resolve the dependencies declared in the `app/build.gradle.kts` file.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/add-to-app/android/project-setup.md#_snippet_12\n\nLANGUAGE: Kotlin\nCODE:\n```\ninclude(\":app\")\n\ndependencyResolutionManagement {\n    repositories {\n        maven(url = \"https://storage.googleapis.com/download.flutter.io\")\n        maven(url = \"some/path/flutter_module_project/build/host/outputs/repo\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Opting out of Edge-to-Edge in styles.xml\nDESCRIPTION: This XML snippet shows how to modify the styles.xml file to opt out of edge-to-edge mode for Android SDK 15+. It involves adding the 'android:windowOptOutEdgeToEdgeEnforcement' attribute to the NormalTheme style. This attribute, when set to 'true', prevents the app from automatically using edge-to-edge mode.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/default-systemuimode-edge-to-edge.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<resources>\n    ...\n    <style name=\"NormalTheme\" parent=\"@android:style/Theme.Light.NoTitleBar\">\n        ...\n\t      <!-- Add the following line: -->\n        <item name=\"android:windowOptOutEdgeToEdgeEnforcement\">true</item>\n    </style>\n</resources>\n```\n\n----------------------------------------\n\nTITLE: Creating a DetailScreen Widget in Dart\nDESCRIPTION: This snippet defines a `DetailScreen` widget that displays the details of a specific `Todo` item.  It's a `StatelessWidget` that requires a `Todo` object to be passed in via its constructor.  It displays the todo's title in the AppBar and its description in the body.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/navigation/passing-data.md#_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nclass DetailScreen extends StatelessWidget {\n  // In the constructor, require a Todo.\n  const DetailScreen({super.key, required this.todo});\n\n  // Declare a field that holds the Todo.\n  final Todo todo;\n\n  @override\n  Widget build(BuildContext context {\n    // Use the Todo to create the UI.\n    return Scaffold(\n      appBar: AppBar(title: Text(todo.title)),\n      body: Padding(\n        padding: const EdgeInsets.all(16),\n        child: Text(todo.description),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Default Shell\nDESCRIPTION: This snippet shows how to check which shell starts when a new console window is opened. The `$SHELL` environment variable typically contains this information.\nSOURCE: https://github.com/flutter/website/blob/main/src/_includes/docs/install/reqs/linux/set-path.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n$ echo $SHELL\n```\n\n----------------------------------------\n\nTITLE: Initializing AnimationController for Expandable FAB - Dart\nDESCRIPTION: This code snippet demonstrates the initialization of an `AnimationController` and an `Animation` for controlling the expansion and collapse of the FAB. It initializes the controller with a duration of 250 milliseconds and a curved animation for a smooth visual effect. The initial open state is also handled.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/effects/expandable-fab.md#_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nclass _ExpandableFabState extends State<ExpandableFab>\n    with SingleTickerProviderStateMixin {\n  late final AnimationController _controller;\n  late final Animation<double> _expandAnimation;\n  bool _open = false;\n\n  @override\n  void initState() {\n    super.initState();\n    _open = widget.initialOpen ?? false;\n    _controller = AnimationController(\n      value: _open ? 1.0 : 0.0,\n      duration: const Duration(milliseconds: 250),\n      vsync: this,\n    );\n    _expandAnimation = CurvedAnimation(\n      curve: Curves.fastOutSlowIn,\n      reverseCurve: Curves.easeOutQuad,\n      parent: _controller,\n    );\n  }\n\n  @override\n  void dispose() {\n    _controller.dispose();\n    super.dispose();\n  }\n\n  void _toggle() {\n    setState(() {\n      _open = !_open;\n      if (_open) {\n        _controller.forward();\n      } else {\n        _controller.reverse();\n      }\n    });\n  }\n  }\n```\n\n----------------------------------------\n\nTITLE: Flutter Windows Build Output\nDESCRIPTION: This is the console output showing the successful completion of the Flutter Windows build process. It confirms that the debug executable file has been created.\nSOURCE: https://github.com/flutter/website/blob/main/src/_includes/docs/debug/debug-flow-windows.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nBuilding Windows application...                                    31.4s\n√  Built build\\windows\\runner\\Debug\\my_app.exe.\n```\n\n----------------------------------------\n\nTITLE: Encoding Image to PNG - Dart\nDESCRIPTION: This snippet demonstrates how to encode a `dart:ui Image` into a PNG format using the `toByteData()` method with the `format` parameter. It shows the correct way to specify the desired image format.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/release-notes/release-notes-0.0.21-1.0.0.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nimage.toByteData(format: ui.ImageByteFormat.png);\n```\n\n----------------------------------------\n\nTITLE: Update Podfile for full-Flutter app with App Clip target (Ruby)\nDESCRIPTION: This snippet shows how to modify the Podfile in a full-Flutter app to include the App Clip target, ensuring that plugins are correctly installed for both the main app and the App Clip.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/platform-integration/ios/ios-app-clip.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nuse_frameworks!\nuse_modular_headers!\nflutter_install_all_ios_pods File.dirname(File.realpath(__FILE__))\n\ntarget 'Runner'\ntarget '<name of your App Clip target>'\n```\n\n----------------------------------------\n\nTITLE: Console: Renaming a Flutter App\nDESCRIPTION: This console command demonstrates how to rename a Flutter application's directory. This step is necessary to match the example project name used in the documentation.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/design/fonts.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ mv /path/to/my_app /path/to/custom_fonts\n```\n\n----------------------------------------\n\nTITLE: macOS SocketException troubleshooting\nDESCRIPTION: This snippet displays an error related to macOS permissions that can occur while running `flutter run`. It usually points to network-related issues due to permission restrictions.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/install/help.md#_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n$ flutter run\nLaunching lib/main.dart in debug mode...\n...\nInstalling and launching...\nOops; flutter has exited unexpectedly: \"SocketException: Send failed (OS Error: No route to host, errno = 65), address = 0.0.0.0, port = 5353\".\n```\n\n----------------------------------------\n\nTITLE: Referencing Image Asset in Flutter (YAML)\nDESCRIPTION: This YAML snippet shows how to declare a specific image asset (Blueberries.jpg) in the `pubspec.yaml` file under the `flutter.assets` section. The path to the image is specified relative to the project's root directory.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/compose-devs.md#_snippet_29\n\nLANGUAGE: yaml\nCODE:\n```\nflutter:\n      assets:\n        - images/Blueberries.jpg\n```\n\n----------------------------------------\n\nTITLE: Overriding Cancel Callback Behavior in Flutter\nDESCRIPTION: This snippet shows how to override the default cancellation handling behavior in the LlmChatView.  It defines a custom onCancelCallback that shows a snackbar when a chat is cancelled, and sets a custom cancelMessage to be appended to the LLM response on cancel.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ai-toolkit/feature-integration.md#_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nclass ChatPage extends StatelessWidget {\n  // ...\n\n  void _onCancel(BuildContext context) {\n    ScaffoldMessenger.of(\n      context,\n    ).showSnackBar(const SnackBar(content: Text('Chat cancelled')));\n  }\n\n  @override\n  Widget build(BuildContext context) => Scaffold(\n    appBar: AppBar(title: const Text(App.title)),\n    body: LlmChatView(\n      // ...\n      onCancelCallback: _onCancel,\n      cancelMessage: 'Request cancelled',\n    ),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Poorly Organized License File Example 1\nDESCRIPTION: This plaintext snippet shows an example of a poorly organized LICENSE file.  The licenses are not separated from each other by the correct delimeter and package name.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/packages-and-plugins/developing-packages.md#_snippet_31\n\nLANGUAGE: plaintext\nCODE:\n```\n<some license text>\n\n--------------------------------------------------------------------------------\n<some license text>\n```\n\n----------------------------------------\n\nTITLE: Setting a custom ScrollBehavior for a specific widget - Before Migration\nDESCRIPTION: This snippet shows a basic ListView.builder implementation before the ScrollBehavior changes. It uses a default scroll behavior inherited from the context.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/default-scroll-behavior-drag.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nfinal ScrollController controller = ScrollController();\nListView.builder(\n  controller: controller,\n  itemBuilder: (BuildContext context, int index) {\n   return Text('Item $index');\n }\n);\n```\n\n----------------------------------------\n\nTITLE: Defining ViewModel with Commands in Dart\nDESCRIPTION: This snippet shows how to define a view model in Dart, including the use of Command objects for asynchronous operations. The `load` and `deleteBooking` commands are initialized in the constructor and executed asynchronously, ensuring that the view can render before data is fully loaded. It highlights how commands encapsulate asynchronous tasks.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/app-architecture/case-study/ui-layer.md#_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\nclass HomeViewModel extends ChangeNotifier {\n  HomeViewModel({\n   required BookingRepository bookingRepository,\n   required UserRepository userRepository,\n  }) : _bookingRepository = bookingRepository,\n      _userRepository = userRepository {\n    // Load required data when this screen is built.\n    load = Command0(_load)..execute();\n    deleteBooking = Command1(_deleteBooking);\n  }\n\n  final BookingRepository _bookingRepository;\n  final UserRepository _userRepository;\n\n  late Command0 load;\n  late Command1<void, int> deleteBooking;\n\n  User? _user;\n  User? get user => _user;\n\n  List<BookingSummary> _bookings = [];\n  List<BookingSummary> get bookings => _bookings;\n\n  Future<Result> _load() async {\n    // ...\n  }\n\n  Future<Result<void>> _deleteBooking(int id) async {\n    // ...\n  }\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Check for Golden File Comparator Type\nDESCRIPTION: This code demonstrates how to check the type of the goldenFileComparator. Because the default type has changed, such checks may no longer work as expected.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/integration-test-default-golden-comparator.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nif (goldenFileComparator is ...) {\n  // The new default is a new (hidden) type that has not existed before.\n}\n```\n\n----------------------------------------\n\nTITLE: SnackBar Management (Old)\nDESCRIPTION: This snippet shows how SnackBar management was handled before the migration. It includes `showSnackBar`, `hideCurrentSnackBar`, and `removeCurrentSnackBar` calls using `Scaffold.of(context)` and `scaffoldKey.currentState`.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/scaffold-messenger.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\n// The ScaffoldState of the current context was used for managing SnackBars.\nScaffold.of(context).showSnackBar(mySnackBar);\nScaffold.of(context).hideCurrentSnackBar(mySnackBar);\nScaffold.of(context).removeCurrentSnackBar(mySnackBar);\n\n// If a Scaffold.key is specified, the ScaffoldState can be directly\n// accessed without first obtaining it from a BuildContext via\n// Scaffold.of. From the key, use the GlobalKey.currentState\n// getter. This was previously used to manage SnackBars.\nfinal GlobalKey<ScaffoldState> scaffoldKey = GlobalKey<ScaffoldState>();\nScaffold(\n  key: scaffoldKey,\n  body: ...,\n);\n\nscaffoldKey.currentState.showSnackBar(mySnackBar);\nscaffoldKey.currentState.hideCurrentSnackBar(mySnackBar);\nscaffoldKey.currentState.removeCurrentSnackBar(mySnackBar);\n```\n\n----------------------------------------\n\nTITLE: Creating and Controlling Animation - Dart\nDESCRIPTION: This code snippet demonstrates how to create and control an animation using AnimationController and CurvedAnimation. The _LogoAppState class manages the animation controller, sets up the animation with a specified duration and curve (easeIn), and configures the animation to reverse and forward upon completion and dismissal, respectively. The AnimatedLogo widget is then used to render the animated logo.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/animations/tutorial.md#_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\nclass LogoApp extends StatefulWidget {\n  const LogoApp({super.key});\n\n  @override\n  State<LogoApp> createState() => _LogoAppState();\n}\n\nclass _LogoAppState extends State<LogoApp> with SingleTickerProviderStateMixin {\n  late Animation<double> animation;\n  late AnimationController controller;\n\n  @override\n  void initState() {\n    super.initState();\n    controller = AnimationController(\n      duration: const Duration(seconds: 2),\n      vsync: this,\n    );\n    animation = CurvedAnimation(parent: controller, curve: Curves.easeIn)\n      ..addStatusListener((status) {\n        if (status == AnimationStatus.completed) {\n          controller.reverse();\n        } else if (status == AnimationStatus.dismissed) {\n          controller.forward();\n        }\n      });\n    controller.forward();\n  }\n\n  @override\n  Widget build(BuildContext context) => AnimatedLogo(animation: animation);\n\n  @override\n  void dispose() {\n    controller.dispose();\n    super.dispose();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Remove Dart Configuration Files (Console Command)\nDESCRIPTION: This command removes Dart configuration files from the user's home directory.  It is an optional step, only recommended if the user wants to remove Dart configurations as well.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/uninstall/index.md#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n{{rm-dart-files | strip}}\n```\n\n----------------------------------------\n\nTITLE: Implementing Color: Accessing Red Component\nDESCRIPTION: This snippet shows how to implement the `Color` class and provide access to color components, specifically the red component.  It illustrates how to convert an integer representation to a normalized floating-point value within a custom `Color` implementation. It addresses the changes needed to implement the new methods added to `Color` due to wide gamut support.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/wide-gamut-framework.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nclass Foo implements Color {\n  int _red;\n\n  @override\n  double get r => _red / 255.0;\n}\n```\n\n----------------------------------------\n\nTITLE: Clearing Chat History in Dart\nDESCRIPTION: This Dart snippet demonstrates how to clear the chat history of an LlmProvider by assigning an empty list to its history property.  It assumes the existence of a _provider instance of type LlmProvider.  This will trigger a notifyListener call, updating any UI elements bound to the history.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ai-toolkit/feature-integration.md#_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nvoid _clearHistory() => _provider.history = [];\n```\n\n----------------------------------------\n\nTITLE: Fonts field YAML\nDESCRIPTION: This code snippet outlines the structure for configuring custom fonts within the `pubspec.yaml` file for a Flutter application.  The `fonts` field facilitates the inclusion of custom fonts, enabling the specification of font families and their corresponding asset paths.  It can hold either `font_family_field` or `font_asset_field`.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/tools/pubspec.md#_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nflutter:\n  fonts:\n    -  { font_family_field | font_asset_field }\n    [...]\n```\n\nLANGUAGE: yaml\nCODE:\n```\n# font_family_field structure\n- family: font_name\n      fonts:\n        - font_asset_field\n        [...]\n```\n\n----------------------------------------\n\nTITLE: Add HTTP Package via Flutter Pub\nDESCRIPTION: Adds the http package as a dependency using the flutter pub add command in the terminal. This allows the application to use the http library for making network requests.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/networking/send-data.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ flutter pub add http\n```\n\n----------------------------------------\n\nTITLE: Serve the Site Locally - Console\nDESCRIPTION: Runs the `dash_site` tool with the `serve` command to generate and serve the site locally. This allows previewing changes in a browser.\nSOURCE: https://github.com/flutter/website/blob/main/README.md#_snippet_11\n\nLANGUAGE: console\nCODE:\n```\n./dash_site serve\n```\n\n----------------------------------------\n\nTITLE: Building Row with Overflowing Children in Flutter\nDESCRIPTION: This snippet shows that if the children of Row are too big to fit the available width of the Row, just like an UnconstrainedBox, the Row displays the overflow warning.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/layout/constraints.md#_snippet_24\n\nLANGUAGE: dart\nCODE:\n```\n'Row(children:[\\n'   'Container(color: red, child: Text(\\'…\\'))\\n'   'Container(color: green, child: Text(\\'Goodbye!\\'))]'\n```\n\n----------------------------------------\n\nTITLE: ButtonBarTheme Widget Usage (Before Migration) - Dart\nDESCRIPTION: This code snippet shows how to use the deprecated ButtonBarTheme widget. This widget should be removed and its functionality replaced by directly configuring the OverflowBar widget.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/deprecate-buttonbar.md#_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nButtonBarTheme(\n  data: ButtonBarThemeData(\n    alignment: MainAxisAlignment.center,\n  ),\n  child: ButtonBar(\n    children: <Widget>[\n      // ...\n    ],\n  ),\n),\n```\n\n----------------------------------------\n\nTITLE: Flutter Main Application\nDESCRIPTION: This is the main application file (`main.dart`) that defines the structure of the Flutter app. It creates a `MaterialApp` with an `OrientationList` widget that dynamically adjusts the number of columns in a `GridView` based on the current screen orientation.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/testing/widget/orientation.md#_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\n\nvoid main() {\n  runApp(const MyApp());\n}\n\nclass MyApp extends StatelessWidget {\n  const MyApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    const appTitle = 'Orientation Demo';\n\n    return const MaterialApp(\n      title: appTitle,\n      home: OrientationList(title: appTitle),\n    );\n  }\n}\n\nclass OrientationList extends StatelessWidget {\n  final String title;\n\n  const OrientationList({super.key, required this.title});\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: Text(title)),\n      body: OrientationBuilder(\n        builder: (context, orientation) {\n          return GridView.count(\n            // Create a grid with 2 columns in portrait mode, or\n            // 3 columns in landscape mode.\n            crossAxisCount: orientation == Orientation.portrait ? 2 : 3,\n            // Generate 100 widgets that display their index in the list.\n            children: List.generate(100, (index) {\n              return Center(\n                child: Text(\n                  'Item $index',\n                  style: TextTheme.of(context).displayLarge,\n                ),\n              );\n            }),\n          );\n        },\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Swift Package Manager Configuration Shell\nDESCRIPTION: This snippet shows how to disable the Swift Package Manager feature in Flutter. This is used for verifying the plugin still works with CocoaPods.\nSOURCE: https://github.com/flutter/website/blob/main/src/_includes/docs/swift-package-manager/migrate-objective-c-plugin.md#_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\nflutter config --no-enable-swift-package-manager\n```\n\n----------------------------------------\n\nTITLE: Finder (After Migration) - Dart\nDESCRIPTION: Demonstrates how to migrate the finder scope by using the `descendant` method to refine the search within a specific widget type (DataTable), resolving the *Too many elements* error after the transition to ZoomPageTransitionsBuilder. The code searches for a widget with a specific icon within a descendant of the specified widget.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/page-transition-replaced-by-ZoomPageTransitionBuilder.md#_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nfinal Finder finder = find.descendant(\n  of: find.byType(DataTable),\n  matching: find.widgetWithIcon(Transform, Icons.arrow_upward),\n);\n```\n\n----------------------------------------\n\nTITLE: Shader File Path Declaration - YAML\nDESCRIPTION: This snippet showcases declaring the path to the shader file.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/tools/pubspec.md#_snippet_19\n\nLANGUAGE: YAML\nCODE:\n```\n# path_to_file structure\n- assets/shaders/file\n```\n\n----------------------------------------\n\nTITLE: Running Flutter Analyze with ChromeOS Lint Checks (Console)\nDESCRIPTION: This snippet demonstrates how to run the Flutter analyzer with the ChromeOS-specific lint checks enabled. This command analyzes the project and reports any warnings or errors related to ChromeOS compatibility, such as unsupported hardware features or incorrect Android manifest configurations.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/platform-integration/android/chromeos.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ flutter analyze\n```\n\n----------------------------------------\n\nTITLE: Observing App Lifecycle State in Flutter\nDESCRIPTION: This snippet demonstrates how to listen to the application lifecycle state changes in Flutter using the WidgetsBinding observer. It initializes a LifecycleWatcher widget, adds an observer to the WidgetsBinding instance, and updates the UI when the app lifecycle state changes.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/android-devs.md#_snippet_29\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/widgets.dart';\n\nclass LifecycleWatcher extends StatefulWidget {\n  const LifecycleWatcher({super.key});\n\n  @override\n  State<LifecycleWatcher> createState() => _LifecycleWatcherState();\n}\n\nclass _LifecycleWatcherState extends State<LifecycleWatcher>\n    with WidgetsBindingObserver {\n  AppLifecycleState? _lastLifecycleState;\n\n  @override\n  void initState() {\n    super.initState();\n    WidgetsBinding.instance.addObserver(this);\n  }\n\n  @override\n  void dispose() {\n    WidgetsBinding.instance.removeObserver(this);\n    super.dispose();\n  }\n\n  @override\n  void didChangeAppLifecycleState(AppLifecycleState state) {\n    setState(() {\n      _lastLifecycleState = state;\n    });\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    if (_lastLifecycleState == null) {\n      return const Text(\n        'This widget has not observed any lifecycle changes.',\n        textDirection: TextDirection.ltr,\n      );\n    }\n\n    return Text(\n      'The most recent lifecycle state this widget observed was: $_lastLifecycleState.',\n      textDirection: TextDirection.ltr,\n    );\n  }\n}\n\nvoid main() {\n  runApp(const Center(child: LifecycleWatcher()));\n}\n```\n\n----------------------------------------\n\nTITLE: Add Flutter Module Dependency (Groovy/Kotlin)\nDESCRIPTION: This snippet shows how to add a dependency on the Flutter module in the `app/build.gradle` file.  The code is identical for both Groovy and Kotlin DSL build files. It assumes that the Flutter module has been included as a subproject.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/add-to-app/android/project-setup.md#_snippet_15\n\nLANGUAGE: Groovy\nCODE:\n```\ndependencies {\n    implementation(project(\":flutter\"))\n}\n```\n\n----------------------------------------\n\nTITLE: Showing SnackBar using Scaffold (Old)\nDESCRIPTION: This code demonstrates how SnackBars were previously displayed using Scaffold.of(context).showSnackBar. This approach is now deprecated in favor of using ScaffoldMessenger.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/scaffold-messenger.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nScaffold(\n  key: scaffoldKey,\n  body: Builder(\n    builder: (BuildContext context) {\n      return GestureDetector(\n        onTap: () {\n          Scaffold.of(context).showSnackBar(SnackBar(\n            content: const Text('snack'),\n            duration: const Duration(seconds: 1),\n            action: SnackBarAction(\n              label: 'ACTION',\n              onPressed: () { },\n            ),\n          ));\n        },\n        child: const Text('SHOW SNACK'),\n      );\n    },\n  )\n);\n```\n\n----------------------------------------\n\nTITLE: SystemNavigator.routeInformationUpdated After Migration (Dart)\nDESCRIPTION: Demonstrates updating route information using the `uri` parameter with SystemNavigator.routeInformationUpdated. This shows the correct way to update the route using a Uri object.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/route-information-uri.md#_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nSystemNavigator.routeInformationUpdated(uri: Uri.parse('/myLocation'));\n```\n\n----------------------------------------\n\nTITLE: SwiftUI Horizontal Stack View\nDESCRIPTION: Illustrates the creation of a horizontal stack view in SwiftUI using the HStack struct. It adds a globe image and text to the stack, arranging them horizontally.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/swiftui-devs.md#_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\nHStack {\n  Image(systemName: \"globe\")\n  Text(\"Hello, world!\")\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Routes using initialRoute Dart\nDESCRIPTION: This snippet demonstrates how to migrate from using `isInitialRoute` by setting an explicit `initialRoute` value in `MaterialApp`.  The route name is compared against the explicit `initialRoute` value. It requires setting the `initialRoute` property explicitly as the default value might change.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/route-navigator-refactoring.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nMaterialApp(\n  initialRoute: '/', // Set this value explicitly. Default might be altered.\n  onGenerateRoute: (RouteSetting setting) {\n    if (setting.name == '/')\n      return FakeSplashRoute();\n    else\n      return RealRoute(setting);\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a ColorTween in Dart\nDESCRIPTION: This snippet creates a `ColorTween` that interpolates between `Colors.transparent` and `Colors.black54`.  `ColorTween` specifies a progression between two colors. The `begin` and `end` parameters define the start and end colors of the interpolation.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/animations/index.md#_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\ncolorTween = ColorTween(begin: Colors.transparent, end: Colors.black54);\n```\n\n----------------------------------------\n\nTITLE: Jump to UI Thread - Java\nDESCRIPTION: This Java code demonstrates how to execute code on the Android UI thread from a background thread. A `Handler` associated with the main Looper is used to `post` a `Runnable` to the UI thread, ensuring that UI-related operations are performed safely.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/platform-integration/platform-channels.md#_snippet_28\n\nLANGUAGE: Java\nCODE:\n```\nnew Handler(Looper.getMainLooper()).post(new Runnable() {\n  @Override\n  public void run() {\n    // Call the desired channel message here.\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Dart Typedef Snippet\nDESCRIPTION: Inserts a typedef. No dependencies are required. Input: None. Output: A basic typedef structure.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/tools/vs-code.md#_snippet_12\n\nLANGUAGE: Dart\nCODE:\n```\ntypedef MyFunction = void Function(String);\n```\n\n----------------------------------------\n\nTITLE: TextField maxLengthEnforcement Migration Dart\nDESCRIPTION: This snippet demonstrates the replacement of `maxLengthEnforced` with `maxLengthEnforcement` in `TextField`, `TextFormField`, and `CupertinoTextField` widgets. It showcases the use of `MaxLengthEnforcement.enforce` and `MaxLengthEnforcement.none` as replacements. Requires the Flutter SDK.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/2-10-deprecations.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nconst TextField textField = TextField(maxLengthEnforcement: MaxLengthEnforcement.enforce);\nconst TextField textField = TextField(maxLengthEnforcement: MaxLengthEnforcement.none);\nfinal lengthEnforced = textField.maxLengthEnforcement;\n\nconst TextFormField textFormField = TextFormField(maxLengthEnforcement: MaxLengthEnforcement.enforce);\nconst TextFormField textFormField = TextFormField(maxLengthEnforcement: MaxLengthEnforcement.none);\nfinal lengthEnforced = textFormField.maxLengthEnforcement;\n\nconst CupertinoTextField cupertinoTextField = CupertinoTextField(maxLengthEnforcement: MaxLengthEnforcement.enforce);\nconst CupertinoTextField cupertinoTextField = CupertinoTextField(maxLengthEnforcement: MaxLengthEnforcement.none);\nfinal lengthEnforced = cupertinoTextField.maxLengthEnforcement;\n```\n\n----------------------------------------\n\nTITLE: Dart Code Analysis\nDESCRIPTION: Analyzes the Dart code within the current project for potential errors and style issues. It requires the Dart SDK to be installed and configured.\nSOURCE: https://github.com/flutter/website/blob/main/examples/layout/lakes/step5/README.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ndart analyze\n```\n\n----------------------------------------\n\nTITLE: FFI Plugin Configuration\nDESCRIPTION: This YAML snippet configures a platform within a Flutter plugin to use FFI. The `ffiPlugin: true` setting in the `pubspec.yaml` enables the native build process for the target platform and bundles the resulting binaries with the Flutter application.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/packages-and-plugins/developing-packages.md#_snippet_20\n\nLANGUAGE: YAML\nCODE:\n```\nplugin:\n    platforms:\n      some_platform:\n        ffiPlugin: true\n```\n\n----------------------------------------\n\nTITLE: Sharing State with Widget Constructors Usage in Flutter\nDESCRIPTION: This snippet demonstrates how to use the MyCounter widget with data passed through its constructor. A Column contains two MyCounter widgets, each displaying the current value of count, which is managed outside of the MyCounter widget.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/fundamentals/state-management.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nColumn(\n  children: [\n    MyCounter(\n      count: count,\n    ),\n    MyCounter(\n      count: count,\n    ),\n    TextButton(\n      child: Text('Increment'),\n      onPressed: () {\n        setState(() {\n          count++;\n        });\n      },\n    )\n  ],\n)\n```\n\n----------------------------------------\n\nTITLE: Modifying AndroidManifest.xml to re-enable shared object compression\nDESCRIPTION: This XML diff shows how to re-enable compression of shared objects in the AndroidManifest.xml file.  It adds the `xmlns:tools` namespace and the `android:extractNativeLibs=\"true\"` attribute with `tools:replace` on the application tag. This is needed to reduce on-device size, at the cost of a slightly larger APK download size.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/platform-integration/android/c-interop.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n  <manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n-     package=\"com.example.your_app_name\">\n+     xmlns:tools=\"http://schemas.android.com/tools\"\n+     package=\"com.example.your_app_name\" >\n      <!-- io.flutter.app.FlutterApplication is an android.app.Application that\n           calls FlutterMain.startInitialization(this); in its onCreate method.\n           In most cases you can leave this as-is, but you if you want to provide\n           additional functionality it is fine to subclass or reimplement\n           FlutterApplication and put your custom class here. -->\n\n      <application\n          android:name=\"io.flutter.app.FlutterApplication\"\n          android:label=\"your_app_name\"\n-         android:icon=\"@mipmap/ic_launcher\">\n+         android:icon=\"@mipmap/ic_launcher\"\n+         android:extractNativeLibs=\"true\"\n+         tools:replace=\"android:extractNativeLibs\">\n```\n\n----------------------------------------\n\nTITLE: Flutter Test Dependency - YAML\nDESCRIPTION: This snippet demonstrates how to add a dependency on the `flutter_test` package within the `pubspec.yaml` file. This is used for unit, widget, or integration tests in a Flutter app.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/tools/pubspec.md#_snippet_27\n\nLANGUAGE: YAML\nCODE:\n```\ndependencies:\n  flutter_test:\n    sdk: flutter\n```\n\n----------------------------------------\n\nTITLE: SwiftUI App Initialization\nDESCRIPTION: Demonstrates how to start an app in SwiftUI using the @main attribute and the App struct. It shows the basic structure for defining the app's entry point and its user interface using a WindowGroup.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/swiftui-devs.md#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\n@main\nstruct MyApp: App {\n    var body: some Scene {\n        WindowGroup {\n            HomePage()\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating ShortcutActivator.accepts - After\nDESCRIPTION: Illustrates the updated implementation of `ShortcutActivator.accepts` using `KeyEvent` and `HardwareKeyboard`.  This example demonstrates how to extend `ShortcutActivator` after the migration to `KeyEvent`. The primary change is the type of the `event` and `state` parameters.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/shortcut-key-event-migration.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nclass MyActivator extends ShortcutActivator {\n  @override\n  bool accepts(KeyEvent event, HardwareKeyboard state) {\n    // ... (your implementation here)\n    returns false;\n  }\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: SystemContextMenu usage with SystemContextMenu widget (No change needed)\nDESCRIPTION: Illustrates the usage of SystemContextMenu widget with a TextField. The `contextMenuBuilder` uses the `SystemContextMenu.editableText` factory to provide the system context menu based on the `EditableTextState`. No migration is needed in this scenario, as `SystemContextMenu` handles the default items automatically.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/system_context_menu_controller_show.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nclass _MyWidgetState extends State<MyWidget> {\n  @override\n  Widget build(BuildContext context) {\n    TextField(\n      contextMenuBuilder: (BuildContext context, EditableTextState editableTextState) {\n        return SystemContextMenu.editableText(\n          editableTextState: editableTextState,\n        );\n      }\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Create a Git Branch - Console\nDESCRIPTION: Creates a new git branch with the specified name. Replace `<BRANCH_NAME>` with the desired name for the branch. It's useful for isolating changes during development.\nSOURCE: https://github.com/flutter/website/blob/main/README.md#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\ngit checkout -b <BRANCH_NAME>\n```\n\n----------------------------------------\n\nTITLE: Windows Build Path (Before Migration)\nDESCRIPTION: Illustrates the previous build path for Flutter Windows applications, assuming an x64 target architecture. The executable was located directly under the runner's Release directory.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/windows-build-architecture.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nbuild\\windows\\runner\\Release\\hello_world.exe\n```\n\n----------------------------------------\n\nTITLE: Handling Pan Gestures with GestureDetector (Dart)\nDESCRIPTION: This snippet demonstrates how to handle pan gestures using the `GestureDetector` widget in Flutter. `GestureDetector` automatically processes trackpad gesture events and triggers the `onPanStart`, `onPanUpdate`, and `onPanEnd` callbacks if recognized, simplifying the gesture handling process for common interactions. This approach works seamlessly for both touch and trackpad panning.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/trackpad-gestures.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() => runApp(Foo());\n\nclass Foo extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return GestureDetector(\n      onPanStart: (details) {\n        debugPrint('onStart');\n      },\n      onPanUpdate: (details) {\n        debugPrint('onUpdate');\n      },\n      onPanEnd: (details) {\n        debugPrint('onEnd');\n      },\n      child: Container()\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Flutter Widget Catalog with Markdown Template\nDESCRIPTION: This snippet uses a Jinja-like templating engine to render a catalog of Flutter widgets. It takes `docs/catalog-page.md` as a template and passes `categoryName` and `catalog` variables to it. The template likely iterates through the `catalog` and displays widgets belonging to the `Painting and effects` category.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/widgets/painting.md#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n{% render docs/catalog-page.md, categoryName:\"Painting and effects\", catalog:catalog %}\n```\n\n----------------------------------------\n\nTITLE: Function Declaration: Dart\nDESCRIPTION: This snippet demonstrates how to declare functions in Dart. It shows that Dart allows explicit definition of the return type, similar to other statically typed languages.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/react-native-devs.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\n// JavaScript\nfunction fn() {\n  return true;\n}\n```\n\nLANGUAGE: Dart\nCODE:\n```\n/// Dart\n/// You can explicitly define the return type.\nbool fn() {\n  return true;\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Updated Flutter and Dart Command Paths (Shell)\nDESCRIPTION: This snippet uses the `which` command to confirm that the paths of the `flutter` and `dart` executables have been correctly updated to point to the same directory after adjusting the PATH environment variable. This confirms the Flutter and Dart SDKs are compatible and properly configured. The expected output displays the updated full paths.\nSOURCE: https://github.com/flutter/website/blob/main/src/_includes/docs/dart-tool.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n$ which flutter dart\n/path-to-flutter-sdk/bin/flutter\n/path-to-flutter-sdk/bin/dart\n```\n\n----------------------------------------\n\nTITLE: Flutter Doctor Command Output\nDESCRIPTION: This snippet shows the output of the `flutter doctor` command.  It summarizes the status of various components required for Flutter development, such as Flutter SDK, Android toolchain, Xcode, Visual Studio, Android Studio, VS Code, connected devices, and network resources. The specific checks performed and the output format are determined by the `flutter doctor` command and the configuration in `include.config`.\nSOURCE: https://github.com/flutter/website/blob/main/src/_includes/docs/install/flutter-doctor-success.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nRunning flutter doctor...\nDoctor summary (to see all details, run flutter doctor -v):\n[✓] Flutter (Channel stable, {{site.appnow.flutter}}, on {{displayos}}, locale en)\n{%- if setup.windows == 'Y' %}\n[✓] Windows version (Installed version of Windows is version 10 or higher)\n{%- endif %}\n{% case setup.android-toolchain %}\n{% when 'Y' %}[✓] Android toolchain - develop for Android devices (Android SDK version {{site.appnow.android_sdk}})\n{% when 'N' %}[!] Android toolchain - develop for Android devices\n{% endcase %}\n{%- case setup.chrome %}\n{% when 'Y' %}[✓] Chrome - develop for the web\n{% when 'N' %}[!] Chrome - develop for the web\n{% endcase -%}\n{% unless setup.xcode == 'X' -%}\n{% case setup.xcode %}\n{% when 'Y' %}[✓] Xcode - develop for iOS and macOS (Xcode {{site.appnow.xcode}})\n{% when 'N' %}[!] Xcode - develop for iOS and macOS (Xcode not installed)\n{% endcase %}\n{%- endunless -%}\n{% unless setup.visual-studio == 'X' -%}\n{% case setup.visual-studio %}\n{% when 'Y' %}[✓] Visual Studio - develop Windows apps (version 2022)\n{% when 'N' %}[!] Visual Studio - develop Windows apps\n{% endcase %}\n{%- endunless %}\n{%- case setup.android-studio %}\n{% when 'Y' %}[✓] Android Studio (version {{site.appnow.android_studio}})\n{% when 'N' %}[!] Android Studio (not installed)\n{% endcase -%}\n{% unless setup.linux == 'X' -%}\n{% case setup.linux %}\n{% when 'Y' %}[✓] Linux toolchain - develop for Linux desktop\n{% when 'N' %}[!] Linux toolchain - develop for Linux desktop\n{% endcase %}\n{%- endunless -%}\n\n[✓] VS Code (version {{site.appnow.vscode}})\n[✓] Connected device (1 available)\n[✓] Network resources\n\n{% unless setup.errors == 0 %}\n! Doctor found issues in {{setup.errors}} categories.\n{% else %}\n∙ No issues found!\n{% endunless -%}\n```\n\n----------------------------------------\n\nTITLE: Verify Flutter and Dart SDK Compatibility (PowerShell)\nDESCRIPTION: This command checks the location of the `flutter` and `dart` executables in PowerShell. Because `where` is an alias for `Where-Object`, `where.exe` is used to ensure the correct executable is called to locate the SDK paths.\nSOURCE: https://github.com/flutter/website/blob/main/src/_includes/docs/dart-tool-win.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nPS C:\\> where.exe flutter dart\n```\n\n----------------------------------------\n\nTITLE: Add localization dependencies - YAML\nDESCRIPTION: This YAML snippet demonstrates how to add the `flutter_localizations` package and the `intl` package as dependencies to your Flutter project. These packages are essential for supporting multiple languages and internationalization features.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/xamarin-forms-devs.md#_snippet_34\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  flutter_localizations:\n    sdk: flutter\n  intl: any # Use version of intl from flutter_localizations.\n```\n\n----------------------------------------\n\nTITLE: Setting Container Width Flutter/Dart\nDESCRIPTION: Sets the width of nested Container widgets in Flutter/Dart. Relies on the Flutter framework and the 'bold24Roboto' TextStyle. The outer container has a fixed width of 320, and the inner container has a fixed width of 240.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/web-devs.md#_snippet_8\n\nLANGUAGE: Dart\nCODE:\n```\nfinal container = Container(\n  // grey box\n  width: 320,\n  height: 240,\n  color: Colors.grey[300],\n  child: Center(\n    child: Container(\n      // red box\n      width: 240, // max-width is 240\n      padding: const EdgeInsets.all(16),\n      decoration: BoxDecoration(\n        color: Colors.red[400],\n      ),\n      child: Text(\n        'Lorem ipsum',\n        style: bold24Roboto,\n      ),\n    ),\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Implicit animation with .animation() - SwiftUI\nDESCRIPTION: This snippet demonstrates implicit animation using the `.animation()` modifier in SwiftUI.  It rotates a button by 45 degrees with a duration of 1 second.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/swiftui-devs.md#_snippet_19\n\nLANGUAGE: Swift\nCODE:\n```\nButton(\"Tap me!\"){\n   angle += 45\n}\n.rotationEffect(.degrees(angle))\n.animation(.easeIn(duration: 1))\n```\n\n----------------------------------------\n\nTITLE: HTML Script Tag with Inlined Flutter Bootstrap JS\nDESCRIPTION: This snippet demonstrates how to inline the contents of `flutter_bootstrap.js` directly into the `index.html` file using the `{% raw %}{{flutter_bootstrap_js}}{% endraw %}` template token. This token is replaced during the build process. This approach avoids a separate HTTP request for the bootstrap script.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/platform-integration/web/initialization.md#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<html>\n  <body>\n    <script>\n      {% raw %}{{flutter_bootstrap_js}}{% endraw %}\n    </script>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Installing Android Studio Prerequisites on ChromeOS (Shell)\nDESCRIPTION: This command installs the necessary prerequisite packages for running Android Studio on a ChromeOS system. It ensures that the required libraries, such as libc6, libstdc++, lib32z1 and libbz2, are available for Android Studio to function correctly.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/platform-integration/android/install-android/install-android-from-web-on-chromeos.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n$ sudo apt-get install libc6:amd64 libstdc++6:amd64 lib32z1 libbz2-1.0:amd64\n```\n\n----------------------------------------\n\nTITLE: Update build.gradle for AndroidX - Groovy\nDESCRIPTION: These code snippets update the `build.gradle` file to replace references to `android.support.test` with `androidx.test`.  This is part of migrating tests to use AndroidX libraries, which is recommended for newer projects and compatibility with modern Android versions.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/plugin-api-migration.md#_snippet_4\n\nLANGUAGE: Groovy\nCODE:\n```\ndefaultConfig {\n      ...\n      testInstrumentationRunner \"androidx.test.runner.AndroidJUnitRunner\"\n      ...\n    }\n\n```\n\nLANGUAGE: Groovy\nCODE:\n```\ndependencies {\n    ...\n    androidTestImplementation 'androidx.test:runner:1.2.0'\n    androidTestImplementation 'androidx.test:rules:1.2.0'\n    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'\n    ...\n    }\n\n```\n\n----------------------------------------\n\nTITLE: Registering Platform View in App\nDESCRIPTION: This Swift code demonstrates how to register a platform view within a Flutter application by modifying the `MainFlutterWindow.swift` file. It retrieves the Flutter registrar, creates an instance of `NativeViewFactory`, and registers the factory with a specific ID.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/platform-integration/macos/platform-views.md#_snippet_3\n\nLANGUAGE: Swift\nCODE:\n```\nimport Cocoa\nimport FlutterMacOS\n\nclass MainFlutterWindow: NSWindow {\n  override func awakeFromNib() {\n    // ...\n\n    let registrar = flutterViewController.registrar(forPlugin: \"plugin-name\")\n    let factory = NativeViewFactory(messenger: registrar.messenger)\n    registrar.register(\n      factory,\n      withId: \"<platform-view-type>\")\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: License File Organization Example 2\nDESCRIPTION: This plaintext snippet demonstrates how to organize a LICENSE file when multiple components are present, and multiple components share the same license. Each component license should be separated by a line of 80 hyphens and start with the names of the packages to which the component license applies.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/packages-and-plugins/developing-packages.md#_snippet_30\n\nLANGUAGE: plaintext\nCODE:\n```\npackage_1\n\n<some license text>\n\n--------------------------------------------------------------------------------\npackage_1\npackage_2\n\n<some license text>\n```\n\n----------------------------------------\n\nTITLE: Using AssetImage in Flutter (Dart)\nDESCRIPTION: This example shows how to use the `AssetImage` class in Flutter to load and display an image from the assets folder. It demonstrates the basic syntax for specifying the image path.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/android-devs.md#_snippet_24\n\nLANGUAGE: Dart\nCODE:\n```\nAssetImage('images/my_icon.png'),\n```\n\n----------------------------------------\n\nTITLE: Migrating androidOverscrollIndicator in Flutter\nDESCRIPTION: This snippet shows how to migrate from the `androidOverscrollIndicator` property in `ScrollBehavior`, `MaterialScrollBehavior`, and `ThemeData` to using `ThemeData.useMaterial3` in Flutter. `androidOverscrollIndicator` was deprecated in v2.13.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/3-13-deprecations.md#_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nMaterialApp(\n  scrollBehavior: MaterialScrollBehavior(\n    androidOverscrollIndicator: AndroidOverscrollIndicator.glow,\n  ),\n  //...\n);\n\nMaterialApp(\n  scrollBehavior: ScrollBehavior(\n    androidOverscrollIndicator: AndroidOverscrollIndicator.glow,\n  ),\n  //...\n);\n\nMaterialApp(\n  theme: Theme.light().copyWith(\n    androidOverscrollIndicator: AndroidOverscrollIndicator.glow,\n  ),\n  //...\n);\n```\n\nLANGUAGE: dart\nCODE:\n```\nMaterialApp(\n  theme: Theme.light().copyWith(\n    // defaults to true and stretching indicator,\n    // false results in glowing indicator\n    useMaterial3: false,\n  ),\n  //...\n);\n```\n\n----------------------------------------\n\nTITLE: Enabling Network Access on macOS\nDESCRIPTION: Shows the XML code snippet required to enable network access in a macOS application by adding the `com.apple.security.network.client` key to the entitlements file.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ai-toolkit/index.md#_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<plist version=\"1.0\">\n  <dict>\n    ...\n    <key>com.apple.security.network.client</key>\n    <true/>\n  </dict>\n</plist>\n```\n\n----------------------------------------\n\nTITLE: Initialize FlutterEngine in UIKit-ObjC\nDESCRIPTION: This Objective-C code demonstrates how to create a FlutterEngine as a property within the AppDelegate. The engine is initialized and run when the application finishes launching. GeneratedPluginRegistrant is used to register plugins.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/add-to-app/ios/add-flutter-screen.md#_snippet_2\n\nLANGUAGE: Objective-C\nCODE:\n```\n@import UIKit;\n@import Flutter;\n\n@interface AppDelegate : FlutterAppDelegate // More on the FlutterAppDelegate below.\n@property (nonatomic,strong) FlutterEngine *flutterEngine;\n@end\n```\n\nLANGUAGE: Objective-C\nCODE:\n```\n// The following library connects plugins with iOS platform code to this app.\n#import <FlutterPluginRegistrant/GeneratedPluginRegistrant.h>\n\n#import \"AppDelegate.h\"\n\n@implementation AppDelegate\n\n- (BOOL)application:(UIApplication *)application\n    didFinishLaunchingWithOptions:(NSDictionary<UIApplicationLaunchOptionsKey, id> *)launchOptions {\n  self.flutterEngine = [[FlutterEngine alloc] initWithName:@\"my flutter engine\"];\n  // Runs the default Dart entrypoint with a default Flutter route.\n  [self.flutterEngine run];\n  // Connects plugins with iOS platform code to this app.\n  [GeneratedPluginRegistrant registerWithRegistry:self.flutterEngine];\n  return [super application:application didFinishLaunchingWithOptions:launchOptions);\n}\n\n@end\n```\n\n----------------------------------------\n\nTITLE: Install Android Studio prerequisites on Linux\nDESCRIPTION: Installs the necessary prerequisite packages for Android Studio on a Linux system using apt-get. These packages provide essential libraries for compiling and running Android apps.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/platform-integration/android/install-android/install-android-from-web-on-linux.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nsudo apt-get install libc6:amd64 libstdc++6:amd64 lib32z1 libbz2-1.0:amd64\n```\n\n----------------------------------------\n\nTITLE: Flutter Assets Configuration in pubspec.yaml\nDESCRIPTION: This YAML snippet shows how to declare assets in the `pubspec.yaml` file for a Flutter project. It lists the paths to image assets (`my_icon.png` and `background.png`) that should be included in the application's asset bundle.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/react-native-devs.md#_snippet_17\n\nLANGUAGE: YAML\nCODE:\n```\nflutter:\n  assets:\n    - assets/my_icon.png\n    - assets/background.png\n```\n\n----------------------------------------\n\nTITLE: ConstrainedBox Example in Flutter\nDESCRIPTION: This example demonstrates how ConstrainedBox imposes additional constraints on its child. The ConstrainedBox is given minWidth, minHeight, maxWidth and maxHeight constraints. The child Container's size is affected by these constraints only if the parent allows the ConstrainedBox to respect them.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/layout/constraints.md#_snippet_39\n\nLANGUAGE: dart\nCODE:\n```\nConstrainedBox(\n  constraints: const BoxConstraints(\n    minWidth: 70,\n    minHeight: 70,\n    maxWidth: 150,\n    maxHeight: 150,\n  ),\n  child: Container(color: red, width: 10, height: 10),\n)\n```\n\n----------------------------------------\n\nTITLE: TextInputClient Implementation (Before Migration)\nDESCRIPTION: Shows the TextInputClient implementation before the addition of the insertContent method. This is the code that needs to be migrated to support rich content insertion.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/insert-content-text-input-client.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nclass MyCustomTextInputClient implements TextInputClient {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Building the Main Body in Flutter\nDESCRIPTION: This code snippet defines the main body of the Flutter application, centering content within a `Container` and a `Card`. It includes a `Row` containing the `leftColumn` (constrained by a `SizedBox`) and a `mainImage`. This structure demonstrates how to create a complete UI layout with nested widgets.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/layout/index.md#_snippet_14\n\nLANGUAGE: dart\nCODE:\n```\nbody: Center(\n  child: Container(\n    margin: const EdgeInsets.fromLTRB(0, 40, 0, 30),\n    height: 600,\n    child: Card(\n      child: Row(\n        crossAxisAlignment: CrossAxisAlignment.start,\n        children: [SizedBox(width: 440, child: leftColumn), mainImage],\n      ),\n    ),\n  ),\n),\n```\n\n----------------------------------------\n\nTITLE: Run Flutter Integration Test with Profiling\nDESCRIPTION: Runs the integration test with the specified driver and target, enabling the profile mode to compile the app for a more accurate benchmark result. The `--no-dds` option disables the Dart Development Service (DDS) when running on a mobile device or emulator.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/testing/integration/profiling.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nflutter drive \\\n  --driver=test_driver/perf_driver.dart \\\n  --target=integration_test/scrolling_test.dart \\\n  --profile\n```\n\n----------------------------------------\n\nTITLE: Add Flutter Pre-Action Script\nDESCRIPTION: This snippet shows the script to be added as a pre-action build script in Xcode. This script prepares the Flutter framework before the build process begins.\nSOURCE: https://github.com/flutter/website/blob/main/src/_includes/docs/swift-package-manager/migrate-macos-project-manually.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n\"$FLUTTER_ROOT\"/packages/flutter_tools/bin/macos_assemble.sh prepare\n```\n\n----------------------------------------\n\nTITLE: CupertinoTabBar Before Migration (No Localization)\nDESCRIPTION: This code snippet demonstrates the usage of CupertinoTabBar without providing localization information. Running this code will result in a 'localizations != null' assertion error, as the CupertinoTabBar requires a Localizations parent for proper semantic hints. The MediaQuery widget is used for providing media query data but does not handle localization.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/cupertino-tab-bar-localizations.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/cupertino.dart';\n\nvoid main() => runApp(Foo());\n\nclass Foo extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return MediaQuery(\n      data: const MediaQueryData(),\n      child: CupertinoTabBar(\n        items: const <BottomNavigationBarItem>[\n          BottomNavigationBarItem(\n            icon: Icon(CupertinoIcons.add_circled),\n            label: 'Tab 1',\n          ),\n          BottomNavigationBarItem(\n            icon: Icon(CupertinoIcons.add_circled_solid),\n            label: 'Tab 2',\n          ),\n        ],\n        currentIndex: 1,\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Clone Repo with Submodules - Console\nDESCRIPTION: Clones the Flutter website repository along with its submodules using the `--recurse-submodules` flag. This ensures that all necessary dependencies and components are included in the local copy of the repository.\nSOURCE: https://github.com/flutter/website/blob/main/README.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\ngit clone --recurse-submodules https://github.com/flutter/website.git\n```\n\n----------------------------------------\n\nTITLE: HTML Build ID Query Parameter Example\nDESCRIPTION: This HTML snippet demonstrates appending a build ID as a query parameter to the `flutter_bootstrap.js` script tag.  This technique is used to bust the browser cache and ensure that the latest version of the script is loaded after a deployment. The `v=123` part forces the browser to reload the resource.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/platform-integration/web/faq.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- Option 1, append build ID as a query parameter in your links -->\n<script src=\"flutter_bootstrap.js?v=123\" async></script>\n```\n\n----------------------------------------\n\nTITLE: Verify Zsh Default Shell (macOS)\nDESCRIPTION: This command uses the `dscl` utility to read the current user's shell configuration and verifies if Zsh is the default shell. It's used to check if Zsh is already configured as the default shell on macOS.\nSOURCE: https://github.com/flutter/website/blob/main/src/_includes/docs/install/reqs/macos/zsh-config.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n$ dscl . -read ~/ UserShell\n```\n\n----------------------------------------\n\nTITLE: Creating Tab Navigation in React Native\nDESCRIPTION: This snippet demonstrates how to create tab navigation using `createBottomTabNavigator` from the `react-navigation` library in React Native. It defines a `TabNavigator` with two screens (Home and Notifications) and sets the active tab color.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/react-native-devs.md#_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\n// React Native\nimport { createBottomTabNavigator } from 'react-navigation';\n\nconst MyApp = TabNavigator(\n  { Home: { screen: HomeScreen }, Notifications: { screen: tabNavScreen } },\n  { tabBarOptions: { activeTintColor: '#e91e63' } }\n);\n```\n\n----------------------------------------\n\nTITLE: Update Album and Convert Response in Dart\nDESCRIPTION: This updated `updateAlbum` function sends a PUT request and converts the response to an `Album` object. It parses the JSON response if the status code is 200; otherwise, it throws an exception. This utilizes async/await for handling the `Future` returned by `http.put`.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/networking/update-data.md#_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nFuture<Album> updateAlbum(String title) async {\n  final response = await http.put(\n    Uri.parse('https://jsonplaceholder.typicode.com/albums/1'),\n    headers: <String, String>{\n      'Content-Type': 'application/json; charset=UTF-8',\n    },\n    body: jsonEncode(<String, String>{'title': title}),\n  );\n\n  if (response.statusCode == 200) {\n    // If the server did return a 200 OK response,\n    // then parse the JSON.\n    return Album.fromJson(jsonDecode(response.body) as Map<String, dynamic>);\n  } else {\n    // If the server did not return a 200 OK response,\n    // then throw an exception.\n    throw Exception('Failed to update album.');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Preventing multiple action executions\nDESCRIPTION: This code snippet shows how to prevent an action from being executed multiple times by checking the `running` state before starting the action. This avoids accidental double-taps or rapid button presses from triggering the action multiple times. No external dependencies beyond the Flutter SDK are required.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/app-architecture/design-patterns/command.md#_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nvoid load() {\n  if (running) {\n    return;\n  }\n  // load user\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Bindings - Before Migration (Dart)\nDESCRIPTION: This code shows how custom bindings were defined before the dependency reversal.  The `ServicesBinding` mixin was included before the `SchedulerBinding` mixin.  This order must be reversed for code using Flutter version 1.18.0 or later.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/services-scheduler-dependency-reversed.md#_snippet_0\n\nLANGUAGE: Dart\nCODE:\n```\nclass FooBinding extends BindingBase with ServicesBinding, SchedulerBinding {\n // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Extract Flutter SDK (Windows)\nDESCRIPTION: This PowerShell command extracts the Flutter SDK zip file to a specified directory on Windows. It uses the Expand-Archive cmdlet to unzip the file. The variables $ps-dir-dl and $ps-dir-target define the source and destination paths, respectively. Ensure PowerShell is configured to allow script execution if needed.\nSOURCE: https://github.com/flutter/website/blob/main/src/_includes/docs/install/flutter/download.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n{{prompt}} Expand-Archive `\n         –Path {{ps-dir-dl}}flutter_sdk_v1.0.0.zip `\n         -Destination {{ps-dir-target}}\n```\n\n----------------------------------------\n\nTITLE: Initializing Firebase Hosting for Flutter Web\nDESCRIPTION: This command initializes Firebase Hosting in a Flutter project, guiding the user through configuration steps such as choosing the hosting source directory and region.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/deployment/web.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nfirebase init hosting\n```\n\n----------------------------------------\n\nTITLE: Complete Flutter Performance Driver Example\nDESCRIPTION: This is the complete example for the performance driver file. It imports necessary packages, initializes the integration driver, and defines a `responseDataCallback` function to process performance data and save timeline summaries to disk.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/testing/integration/profiling.md#_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter_driver/flutter_driver.dart' as driver;\nimport 'package:integration_test/integration_test_driver.dart';\n\nFuture<void> main() {\n  return integrationDriver(\n    responseDataCallback: (data) async {\n      if (data != null) {\n        final timeline = driver.Timeline.fromJson(\n          data['scrolling_timeline'] as Map<String, dynamic>,\n        );\n\n        // Convert the Timeline into a TimelineSummary that's easier to\n        // read and understand.\n        final summary = driver.TimelineSummary.summarize(timeline);\n\n        // Then, write the entire timeline to disk in a json format.\n        // This file can be opened in the Chrome browser's tracing tools\n        // found by navigating to chrome://tracing.\n        // Optionally, save the summary to disk by setting includeSummary\n        // to true\n        await summary.writeTimelineToFile(\n          'scrolling_timeline',\n          pretty: true,\n          includeSummary: true,\n        );\n      }\n    },\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating TestTextInput.enterText in Dart\nDESCRIPTION: This code snippet illustrates how to migrate tests using `TestTextInput.enterText` to maintain the previous behavior of setting an invalid selection (caret position) after entering text. It uses `updateEditingValue` to directly set the text without moving the caret.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/enterText-trailing-caret.md#_snippet_0\n\nLANGUAGE: Dart\nCODE:\n```\nawait testTextInput.updateEditingValue(TextEditingValue(\n  text: text,\n));\n```\n\n----------------------------------------\n\nTITLE: Create EmbeddingV1Activity for v1 Embedding Compatibility - Java\nDESCRIPTION: This code snippet shows how to create an `EmbeddingV1Activity.java` file for testing the v1 embedding compatibility of the plugin. It involves manually registering the plugin using `registrarFor()`. This ensures that the plugin still works with older Flutter projects.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/plugin-api-migration.md#_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\npackage io.flutter.plugins.batteryexample;\n\nimport android.os.Bundle;\nimport io.flutter.app.FlutterActivity;\nimport io.flutter.plugins.battery.BatteryPlugin;\n\npublic class EmbeddingV1Activity extends FlutterActivity {\n  @Override\n  protected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    BatteryPlugin.registerWith(registrarFor(\"io.flutter.plugins.battery.BatteryPlugin\"));\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Deleting Booking from ViewModel Dart\nDESCRIPTION: Shows the `_deleteBooking` method in the `HomeViewModel` which calls the repository to delete a booking. It handles potential errors and updates the UI by calling `notifyListeners` after the deletion is attempted, ensuring the view reflects the updated state.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/app-architecture/case-study/ui-layer.md#_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nFuture<Result<void>> _deleteBooking(int id) async {\n  try {\n    final resultDelete = await _bookingRepository.delete(id);\n    switch (resultDelete) {\n      case Ok<void>():\n        _log.fine('Deleted booking $id');\n      case Error<void>():\n        _log.warning('Failed to delete booking $id', resultDelete.error);\n        return resultDelete;\n    }\n\n    // Some code was omitted for brevity.\n    // final  resultLoadBookings = ...;\n\n    return resultLoadBookings;\n  } finally {\n    notifyListeners();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing runApp with runWidget in Dart\nDESCRIPTION: This Dart code shows how to replace `runApp` with `runWidget` when using multi-view mode. Instead of `runApp`, which assumes an implicit view, `runWidget` is used with the `MultiViewApp` to render widgets on each available `FlutterView`.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/platform-integration/web/embedding-flutter-web.md#_snippet_5\n\nLANGUAGE: Dart\nCODE:\n```\nvoid main() {\n  runWidget(\n    MultiViewApp(\n      viewBuilder: (BuildContext context) => const MyApp(),\n    ),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Removing kotlin-stdlib-jdk7 dependency (Groovy)\nDESCRIPTION: This code snippet shows the removal of the kotlin-stdlib-jdk7 dependency from the dependencies block in app/build.gradle.  If this was the only dependency, the whole dependencies block can be removed.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/flutter-gradle-plugin-apply.md#_snippet_6\n\nLANGUAGE: Groovy\nCODE:\n```\ndependencies {\n-     implementation \"org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version\"\n  }\n```\n\n----------------------------------------\n\nTITLE: Adding games_services dependency via console\nDESCRIPTION: This command demonstrates how to add the `games_services` package as a dependency to a Flutter project using the `flutter pub add` command. This package enables integration with platform-specific game services for achievements and leaderboards.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/games/achievements-leaderboard.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ flutter pub add games_services\n```\n\n----------------------------------------\n\nTITLE: Material Localization Getters\nDESCRIPTION: This code defines getter methods for various localized strings within a MaterialLocalizations subclass. These getters return raw Dart strings, which may contain variables for parameterized localization. The returned strings are in English and should be replaced with the corresponding translations for the desired locale.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/accessibility-and-internationalization/internationalization.md#_snippet_32\n\nLANGUAGE: dart\nCODE:\n```\n@override\nString get moreButtonTooltip => r'More';\n\n@override\nString get aboutListTileTitleRaw => r'About $applicationName';\n\n@override\nString get alertDialogLabel => r'Alert';\n```\n\n----------------------------------------\n\nTITLE: Accessing page property before controller nullability\nDESCRIPTION: Shows how to access the `page` property of the `PageView.controller` before the nullability update.  This code snippet will throw an error now if `pageView.controller` is null.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/pageview-controller.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\npageView.controller.page\n```\n\n----------------------------------------\n\nTITLE: Allowing Cleartext Traffic for Android Debug Builds (XML)\nDESCRIPTION: This XML snippet shows how to allow HTTP connections (cleartext traffic) for Android debug builds. By setting `android:usesCleartextTraffic` to `true` within the `<application>` tag of the debug manifest, HTTP connections are permitted during debugging.  This should not be used for release builds due to security implications.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/network-policy-ios-android.md#_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<application android:usesCleartextTraffic=\"true\"/>\n```\n\n----------------------------------------\n\nTITLE: Rendering Image with Liquid Templating\nDESCRIPTION: This Liquid template generates HTML for displaying an image within a figure element. It handles optional attributes like caption, width, height, and style. It escapes the 'alt' attribute for safety.\nSOURCE: https://github.com/flutter/website/blob/main/src/_includes/docs/app-figure.md#_snippet_0\n\nLANGUAGE: Liquid\nCODE:\n```\n{% assign alt = alt | default: caption -%}\n{% assign caption = caption | default: '' -%}\n{% if width -%}\n{% assign width = 'width: ' | append: width | append: ';' -%}\n{% else -%}\n{% assign width = '' -%}\n{% endif -%}\n{% if height -%}\n{% assign height = 'height: ' | append: height | append: ';' -%}\n{% else -%}\n{% assign height = '' -%}\n{% endif -%}\n\n<figure class=\"{{class}}\">\n  <div class=\"site-figure-container\">\n    <img src=\"/assets/images/docs/{{image}}\" class=\"{{img-class}}\" alt=\"{{alt | escape}}\" style=\"{{width}} {{height}} {{img-style}}\">\n    {% if caption and caption != '' -%}\n      <figcaption class=\"figure-caption\">{{caption}}</figcaption>\n    {% endif -%}\n  </div>\n</figure>\n```\n\n----------------------------------------\n\nTITLE: PopScope: Code after migration (onPopInvokedWithResult)\nDESCRIPTION: Shows how to use PopScope and Form with the new onPopInvokedWithResult callback after the introduction of generic types. The callback provides a boolean value indicating whether the pop happened, as well as the result of the pop operation, typed as Object?.  It relies on a global navigatorKey.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/popscope-with-result.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\n\nvoid main() {\n  runApp(\n    MaterialApp(\n      navigatorKey: nav,\n      home: Column(\n        children: [\n          Form(\n            canPop: false,\n            onPopInvokedWithResult: (bool didPop, Object? result) {\n              if (didPop) {\n                return;\n              }\n              launchConfirmationDialog();\n            },\n            child: MyWidget(),\n          ),\n          PopScope<Object?>(\n            canPop: false,\n            onPopInvokedWithResult: (bool didPop, Object? result) {\n              if (didPop) {\n                return;\n              }\n              launchConfirmationDialog();\n            },\n            child: MyWidget(),\n          ),\n        ],\n      ),\n    ),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding Platform Views in Flutter\nDESCRIPTION: This Dart code demonstrates how to embed platform-specific views (AndroidView or UiKitView) within a Flutter application. It checks the `defaultTargetPlatform` to determine whether to display an `AndroidView` or a `UiKitView`, and provides configurations like `viewType`, `onPlatformViewCreated`, and `creationParams` to configure the respective platform view.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/resources/architectural-overview.md#_snippet_11\n\nLANGUAGE: Dart\nCODE:\n```\nif (defaultTargetPlatform == TargetPlatform.android) {\n  return AndroidView(\n    viewType: 'plugins.flutter.io/google_maps',\n    onPlatformViewCreated: onPlatformViewCreated,\n    gestureRecognizers: gestureRecognizers,\n    creationParams: creationParams,\n    creationParamsCodec: const StandardMessageCodec(),\n  );\n} else if (defaultTargetPlatform == TargetPlatform.iOS) {\n  return UiKitView(\n    viewType: 'plugins.flutter.io/google_maps',\n    onPlatformViewCreated: onPlatformViewCreated,\n    gestureRecognizers: gestureRecognizers,\n    creationParams: creationParams,\n    creationParamsCodec: const StandardMessageCodec(),\n  );\n}\nreturn Text(\n    '$defaultTargetPlatform is not yet supported by the maps plugin');\n```\n\n----------------------------------------\n\nTITLE: Finding a Widget by Key - Flutter\nDESCRIPTION: This snippet demonstrates how to find a widget based on its `Key` using `find.byKey()`. It first defines a `Key` and then builds a `MaterialApp` with that key. Finally, it uses `find.byKey(testKey)` to locate the `MaterialApp` and asserts that it exists using `findsOneWidget`.  This is useful for uniquely identifying widgets in a list or complex layout.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/testing/widget/finders.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\ntestWidgets('finds a widget using a Key', (tester) async {\n  // Define the test key.\n  const testKey = Key('K');\n\n  // Build a MaterialApp with the testKey.\n  await tester.pumpWidget(MaterialApp(key: testKey, home: Container()));\n\n  // Find the MaterialApp widget using the testKey.\n  expect(find.byKey(testKey), findsOneWidget);\n});\n```\n\n----------------------------------------\n\nTITLE: ShimmerLoading Widget in Dart\nDESCRIPTION: This code defines a `ShimmerLoading` stateful widget that applies a shimmer effect to its child when `isLoading` is true. It uses `ShaderMask` to blend the `_shimmerGradient` with the child's painted areas, creating the shimmer animation. When `isLoading` is false, it simply returns the original child.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/effects/shimmer-loading.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nclass ShimmerLoading extends StatefulWidget {\n  const ShimmerLoading({\n    super.key,\n    required this.isLoading,\n    required this.child,\n  });\n\n  final bool isLoading;\n  final Widget child;\n\n  @override\n  State<ShimmerLoading> createState() => _ShimmerLoadingState();\n}\n\nclass _ShimmerLoadingState extends State<ShimmerLoading> {\n  @override\n  Widget build(BuildContext context) {\n    if (!widget.isLoading) {\n      return widget.child;\n    }\n\n    return ShaderMask(\n      blendMode: BlendMode.srcATop,\n      shaderCallback: (bounds) {\n        return _shimmerGradient.createShader(bounds);\n      },\n      child: widget.child,\n    );\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Creating Tabbed Scaffold with TabBarView in Flutter\nDESCRIPTION: This Flutter code defines a `Scaffold` with a `TabBar` at the bottom and a `TabBarView` as its body. The `TabController` coordinates the tab selection, and the `TabBarView` displays the corresponding screen for the selected tab.  The `HomeScreen` and `TabScreen` are assumed to be other widgets.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/react-native-devs.md#_snippet_40\n\nLANGUAGE: dart\nCODE:\n```\nclass _NavigationHomePageState extends State<NavigationHomePage>\n    with SingleTickerProviderStateMixin {\n  late TabController controller = TabController(length: 2, vsync: this);\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      bottomNavigationBar: Material(\n        color: Colors.blue,\n        child: TabBar(\n          tabs: const <Tab>[\n            Tab(icon: Icon(Icons.person)),\n            Tab(icon: Icon(Icons.email)),\n          ],\n          controller: controller,\n        ),\n      ),\n      body: TabBarView(\n        controller: controller,\n        children: const <Widget>[HomeScreen(), TabScreen()],\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: UserRepository with In-Memory Cache\nDESCRIPTION: This code snippet showcases a `UserRepository` class that implements in-memory caching for user data. It retrieves user data from an API, stores it in a cache, and returns the cached data on subsequent requests, minimizing network calls. It utilizes dependency injection, loose coupling, and separation of concerns principles.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/fundamentals/local-caching.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nclass UserRepository {\n  UserRepository(this.api);\n  \n  final Api api;\n  final Map<int, User?> _userCache = {};\n\n  Future<User?> loadUser(int id) async {\n    if (!_userCache.containsKey(id)) {\n      final response = await api.get(id);\n      if (response.statusCode == 200) {\n        _userCache[id] = User.fromJson(response.body);\n      } else {\n        _userCache[id] = null;\n      }\n    }\n    return _userCache[id];\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Firebase Login - Bash\nDESCRIPTION: This command logs you into your Firebase account, allowing you to interact with your Firebase projects. It uses the `firebase-tools` package.\nSOURCE: https://github.com/flutter/website/blob/main/README.md#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nnpm exec -- firebase-tools login\n```\n\n----------------------------------------\n\nTITLE: Implementing Activity Aware Flutter Android Plugin in Java\nDESCRIPTION: This code snippet demonstrates how to implement a Flutter Android plugin that interacts with the Android UI using the `ActivityAware` interface. It includes methods for managing the plugin's association with an `Activity`, including `onAttachedToActivity()`, `onDetachedFromActivityForConfigChanges()`, `onReattachedToActivityForConfigChanges()`, and `onDetachedFromActivity()`. These methods handle activity attachment, detachment during configuration changes, re-attachment after changes, and final detachment, respectively.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/plugin-api-migration.md#_snippet_11\n\nLANGUAGE: Java\nCODE:\n```\npublic class MyPlugin implements FlutterPlugin, ActivityAware {\n  //...normal plugin behavior is hidden...\n\n  @Override\n  public void onAttachedToActivity(ActivityPluginBinding activityPluginBinding) {\n    // TODO: your plugin is now attached to an Activity\n  }\n\n  @Override\n  public void onDetachedFromActivityForConfigChanges() {\n    // TODO: the Activity your plugin was attached to was\n    // destroyed to change configuration.\n    // This call will be followed by onReattachedToActivityForConfigChanges().\n  }\n\n  @Override\n  public void onReattachedToActivityForConfigChanges(ActivityPluginBinding activityPluginBinding) {\n    // TODO: your plugin is now attached to a new Activity\n    // after a configuration change.\n  }\n\n  @Override\n  public void onDetachedFromActivity() {\n    // TODO: your plugin is no longer associated with an Activity.\n    // Clean up references.\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Install Flutter Dependencies\nDESCRIPTION: This command installs the Flutter dependencies using `flutter packages pub get`.  This ensures that all necessary packages are installed before building the app.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/deployment/ios.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nflutter packages pub get\n```\n\n----------------------------------------\n\nTITLE: SetupFlow Widget for Device Setup\nDESCRIPTION: This StatefulWidget manages the device setup flow using a Navigator. It defines methods for handling discovery, device selection, connection establishment, and exit confirmation. The build method returns a Scaffold with an AppBar and a Navigator for the setup flow.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/effects/nested-nav.md#_snippet_7\n\nLANGUAGE: Dart\nCODE:\n```\n@immutable\nclass SetupFlow extends StatefulWidget {\n  static SetupFlowState of(BuildContext context) {\n    return context.findAncestorStateOfType<SetupFlowState>()!;\n  }\n\n  const SetupFlow({super.key, required this.setupPageRoute});\n\n  final String setupPageRoute;\n\n  @override\n  SetupFlowState createState() => SetupFlowState();\n}\n\nclass SetupFlowState extends State<SetupFlow> {\n  final _navigatorKey = GlobalKey<NavigatorState>();\n\n  @override\n  void initState() {\n    super.initState();\n  }\n\n  void _onDiscoveryComplete() {\n    _navigatorKey.currentState!.pushNamed(routeDeviceSetupSelectDevicePage);\n  }\n\n  void _onDeviceSelected(String deviceId) {\n    _navigatorKey.currentState!.pushNamed(routeDeviceSetupConnectingPage);\n  }\n\n  void _onConnectionEstablished() {\n    _navigatorKey.currentState!.pushNamed(routeDeviceSetupFinishedPage);\n  }\n\n  Future<void> _onExitPressed() async {\n    final isConfirmed = await _isExitDesired();\n\n    if (isConfirmed && mounted) {\n      _exitSetup();\n    }\n  }\n\n  Future<bool> _isExitDesired() async {\n    return await showDialog<bool>(\n          context: context,\n          builder: (context) {\n            return AlertDialog(\n              title: const Text('Are you sure?'),\n              content: const Text(\n                'If you exit device setup, your progress will be lost.',\n              ),\n              actions: [\n                TextButton(\n                  onPressed: () {\n                    Navigator.of(context).pop(true);\n                  },\n                  child: const Text('Leave'),\n                ),\n                TextButton(\n                  onPressed: () {\n                    Navigator.of(context).pop(false);\n                  },\n                  child: const Text('Stay'),\n                ),\n              ],\n            );\n          },\n        ) ??\n        false;\n  }\n\n  void _exitSetup() {\n    Navigator.of(context).pop();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return PopScope(\n      canPop: false,\n      onPopInvokedWithResult: (didPop, _) async {\n        if (didPop) return;\n\n        if (await _isExitDesired() && context.mounted) {\n          _exitSetup();\n        }\n      },\n      child: Scaffold(\n        appBar: _buildFlowAppBar(),\n        body: Navigator(\n          key: _navigatorKey,\n          initialRoute: widget.setupPageRoute,\n          onGenerateRoute: _onGenerateRoute,\n        ),\n      ),\n    );\n  }\n\n  Route<Widget> _onGenerateRoute(RouteSettings settings) {\n    final page = switch (settings.name) {\n      routeDeviceSetupStartPage => WaitingPage(\n        message: 'Searching for nearby bulb...',n        onWaitComplete: _onDiscoveryComplete,\n      ),\n      routeDeviceSetupSelectDevicePage => SelectDevicePage(\n        onDeviceSelected: _onDeviceSelected,\n      ),\n      routeDeviceSetupConnectingPage => WaitingPage(\n        message: 'Connecting...',n        onWaitComplete: _onConnectionEstablished,\n      ),\n      routeDeviceSetupFinishedPage => FinishedPage(onFinishPressed: _exitSetup),\n      _ => throw StateError('Unexpected route name: ${settings.name}!'),\n    };\n\n    return MaterialPageRoute(\n      builder: (context) {\n        return page;\n      },\n      settings: settings,\n    );\n  }\n\n  PreferredSizeWidget _buildFlowAppBar() {\n    return AppBar(\n      leading: IconButton(\n        onPressed: _onExitPressed,\n        icon: const Icon(Icons.chevron_left),\n      ),\n      title: const Text('Bulb Setup'),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding InkWell for Ripple Effect in Flutter\nDESCRIPTION: This code snippet shows how to wrap a widget with `InkWell` to add a ripple effect on tap. When the widget is tapped, a snackbar will appear. The snippet defines the `onTap` callback to trigger the snackbar.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/gestures/ripples.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n// The InkWell wraps the custom flat button widget.\nInkWell(\n  // When the user taps the button, show a snackbar.\n  onTap: () {\n    ScaffoldMessenger.of(\n      context,\n    ).showSnackBar(const SnackBar(content: Text('Tap')));\n  },\n  child: const Padding(\n    padding: EdgeInsets.all(12),\n    child: Text('Flat Button'),\n  ),\n)\n```\n\n----------------------------------------\n\nTITLE: Dynamically Updating ListView Flutter\nDESCRIPTION: This code snippet shows how to dynamically update a ListView in Flutter by creating a new List inside setState() and copying the data. While simple, this approach is not recommended for large datasets. Each time a row is tapped, a new row is added to the list, which is then re-rendered.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/xamarin-forms-devs.md#_snippet_48\n\nLANGUAGE: dart\nCODE:\n```\nimport 'dart:developer' as developer;\nimport 'package:flutter/material.dart';\n\nvoid main() {\n  runApp(const SampleApp());\n}\n\nclass SampleApp extends StatelessWidget {\n  /// This widget is the root of your application.\n  const SampleApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return const MaterialApp(title: 'Sample App', home: SampleAppPage());\n  }\n}\n\nclass SampleAppPage extends StatefulWidget {\n  const SampleAppPage({super.key});\n\n  @override\n  State<SampleAppPage> createState() => _SampleAppPageState();\n}\n\nclass _SampleAppPageState extends State<SampleAppPage> {\n  List<Widget> widgets = <Widget>[];\n\n  @override\n  void initState() {\n    super.initState();\n    for (int i = 0; i < 100; i++) {\n      widgets.add(getRow(i));\n    }\n  }\n\n  Widget getRow(int index) {\n    return GestureDetector(\n      onTap: () {\n        setState(() {\n          widgets = List<Widget>.from(widgets);\n          widgets.add(getRow(widgets.length));\n          developer.log('Row $index');\n        });\n      },\n      child: Padding(\n        padding: const EdgeInsets.all(10),\n        child: Text('Row $index'),\n      ),\n    );\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: const Text('Sample App')),\n      body: ListView(children: widgets),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: CupertinoTextField with maxLengthEnforced false (Dart)\nDESCRIPTION: Demonstrates using `maxLengthEnforced: false` with `maxLength` in `CupertinoTextField` before the migration.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/use-maxLengthEnforcement-instead-of-maxLengthEnforced.md#_snippet_5\n\nLANGUAGE: Dart\nCODE:\n```\nCupertinoTextField(\n  maxLength: 6,\n  maxLengthEnforced: false,\n)\n```\n\n----------------------------------------\n\nTITLE: Replacing RenderObjectElement methods in Dart\nDESCRIPTION: This snippet illustrates the migration from the deprecated `insertChildRenderObject`, `moveChildRenderObject`, and `removeChildRenderObject` methods to `insertRenderObjectChild`, `moveRenderObjectChild`, and `removeRenderObjectChild`, respectively. The example shows how to update the method names and adjust the function signature, particularly for `moveRenderObjectChild` to include both old and new slots.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/2-10-deprecations.md#_snippet_11\n\nLANGUAGE: Dart\nCODE:\n```\nelement.insertChildRenderObject(child, slot);\nelement.moveChildRenderObject(child, slot);\nelement.removeChildRenderObject(child);\n```\n\nLANGUAGE: Dart\nCODE:\n```\nelement.insertRenderObjectChild(child, slot);\nelement.moveRenderObjectChild(child, oldSlot, newSlot);\nelement.removeRenderObjectChild(child, slot);\n```\n\n----------------------------------------\n\nTITLE: Setting a custom ScrollBehavior for a specific widget - After Migration\nDESCRIPTION: This snippet demonstrates how to wrap a specific widget (in this case, a ListView.builder) with a ScrollConfiguration widget, applying a custom ScrollBehavior to only that part of the UI. It shows how to create a custom ScrollBehavior, override dragDevices, and apply it to the ListView. Requires importing relevant Flutter libraries for UI and gestures.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/default-scroll-behavior-drag.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nclass MyCustomScrollBehavior extends MaterialScrollBehavior {\n  // Override behavior methods and getters like dragDevices\n  @override\n  Set<PointerDeviceKind> get dragDevices => { \n    PointerDeviceKind.touch,\n    PointerDeviceKind.mouse,\n    // etc.\n  };\n}\n\n// ScrollBehavior can be set for a specific widget.\nfinal ScrollController controller = ScrollController();\nScrollConfiguration(\n  behavior: MyCustomScrollBehavior(),\n  child: ListView.builder(\n    controller: controller,\n    itemBuilder: (BuildContext context, int index) {\n     return Text('Item $index');\n    }\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Add Associated Domain in Runner.entitlements\nDESCRIPTION: Adds an associated domain entry to the `Runner.entitlements` file. Replace `example.com` with your actual web domain. This allows iOS to verify the association between your app and the specified web domain.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/navigation/set-up-universal-links.md#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n<dict>\n  [!<key>com.apple.developer.associated-domains</key>!]\n  [!<array>!]\n    [!<string>applinks:example.com</string>!]\n  [!</array>!]\n</dict>\n</plist>\n```\n\n----------------------------------------\n\nTITLE: Channel Handler on Background Thread - Swift\nDESCRIPTION: This Swift code configures a FlutterMethodChannel to execute handlers on a background thread using the Task Queue API on iOS. It obtains a task queue from the registrar's messenger, then initializes the channel with the queue. This ensures that method calls are processed on a background thread, improving UI responsiveness.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/platform-integration/platform-channels.md#_snippet_25\n\nLANGUAGE: Swift\nCODE:\n```\npublic static func register(with registrar: FlutterPluginRegistrar) {\n  let taskQueue = registrar.messenger().makeBackgroundTaskQueue?()\n  let channel = FlutterMethodChannel(name: \"com.example.foo\",\n                                     binaryMessenger: registrar.messenger(),\n                                     codec: FlutterStandardMethodCodec.sharedInstance(),\n                                     taskQueue: taskQueue)\n  let instance = MyPlugin()\n  registrar.addMethodCallDelegate(instance, channel: channel)\n}\n```\n\n----------------------------------------\n\nTITLE: Poorly Organized License File Example 2\nDESCRIPTION: This plaintext snippet shows an example of a poorly organized LICENSE file. The licenses are not separated from each other by the correct delimeter and package name.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/packages-and-plugins/developing-packages.md#_snippet_32\n\nLANGUAGE: plaintext\nCODE:\n```\npackage_1\n\n<some license text>\n--------------------------------------------------------------------------------\n<some license text>\n```\n\n----------------------------------------\n\nTITLE: Enabling Transparency (Java)\nDESCRIPTION: This Java code shows how to enable transparency for a FlutterFragment. Two examples are shown: one using a new FlutterEngine and another using a cached FlutterEngine.  `transparencyMode` is set to `FlutterView.TransparencyMode.transparent`. Transparency can negatively affect performance.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/add-to-app/android/add-flutter-fragment.md#_snippet_15\n\nLANGUAGE: Java\nCODE:\n```\n// Using a new FlutterEngine.\nFlutterFragment flutterFragment = FlutterFragment.withNewEngine()\n    .transparencyMode(FlutterView.TransparencyMode.transparent)\n    .build();\n\n// Using a cached FlutterEngine.\nFlutterFragment flutterFragment = FlutterFragment.withCachedEngine(\"my_engine_id\")\n    .transparencyMode(FlutterView.TransparencyMode.transparent)\n    .build();\n```\n\n----------------------------------------\n\nTITLE: Building AppBar for SettingsScreen in Flutter\nDESCRIPTION: Defines the _buildAppBar method for the SettingsScreen widget, creating a simple AppBar with a 'Settings' title.  It returns a PreferredSizeWidget.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/effects/nested-nav.md#_snippet_14\n\nLANGUAGE: Dart\nCODE:\n```\nPreferredSizeWidget _buildAppBar() {\n  return AppBar(title: const Text('Settings'));\n}\n```\n\n----------------------------------------\n\nTITLE: Showing Oversized Images in Flutter\nDESCRIPTION: This code snippet shows how to enable highlighting of oversized images in Flutter. When enabled, oversized images have their colors inverted and are flipped vertically. It uses the `debugInvertOversizedImages` property. Setting `debugInvertOversizedImages` to `true` enables the highlighting. No inputs are required.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/tools/devtools/inspector.md#_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nvoid showOversizedImages() {\n  debugInvertOversizedImages = true;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a CurveTween for Animation Easing in Flutter\nDESCRIPTION: This snippet illustrates how to define a CurveTween with a specific easing curve. A CurveTween is initialized with a chosen curve from the Curves class (e.g., Curves.ease). This CurveTween can then be chained with other Tweens to modify the animation's behavior over time.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/animation/page-route-animation.md#_snippet_3\n\nLANGUAGE: Dart\nCODE:\n```\nvar curve = Curves.ease;\nvar curveTween = CurveTween(curve: curve);\n```\n\n----------------------------------------\n\nTITLE: Set Flutter Root (Windows)\nDESCRIPTION: This console command sets the `FLUTTER_ROOT` environment variable on Windows. This variable is used by the documentation tool to locate the Flutter SDK.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/packages-and-plugins/developing-packages.md#_snippet_26\n\nLANGUAGE: console\nCODE:\n```\nset FLUTTER_ROOT=~/dev/flutter     # on Windows\n```\n\n----------------------------------------\n\nTITLE: Building FittedBox with Text in Flutter\nDESCRIPTION: This example demonstrates how FittedBox scales its child to fit within its own constraints. The Text widget is scaled to fit within the FittedBox's available space, ensuring that the text always fills the available width.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/layout/constraints.md#_snippet_18\n\nLANGUAGE: dart\nCODE:\n```\n'FittedBox(\\n'   'child: Text(\\'Some Example Text.\\'));'\n```\n\n----------------------------------------\n\nTITLE: HighlightTextEditingController Before BuildContext (Dart)\nDESCRIPTION: This code shows a `TextEditingController` subclass that highlights text with a specific color. Before the `BuildContext` parameter, the color had to be passed in the constructor.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/buildtextspan-buildcontext.md#_snippet_4\n\nLANGUAGE: Dart\nCODE:\n```\nclass HighlightTextEditingController extends TextEditingController {\n  HighlightTextEditingController(this.highlightColor);\n\n  final Color highlightColor;\n\n  @override\n  TextSpan buildTextSpan({TextStyle? style, required bool withComposing}) {\n    return super.buildTextSpan(style: TextStyle(color: highlightColor), withComposing: withComposing);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using cached FlutterEngine in MyActivity (Kotlin)\nDESCRIPTION: This Kotlin snippet shows how to create a FlutterFragment using a pre-warmed FlutterEngine that is retrieved from the FlutterEngineCache using the ID \"my_engine_id\".  The `withCachedEngine` method is used to specify the engine ID, and `build()` creates the fragment.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/add-to-app/android/add-flutter-fragment.md#_snippet_6\n\nLANGUAGE: Kotlin\nCODE:\n```\nFlutterFragment.withCachedEngine(\"my_engine_id\").build()\n```\n\n----------------------------------------\n\nTITLE: Running Pub Commands with Flutter (console)\nDESCRIPTION: This code snippet demonstrates how to execute Dart's `pub` package manager commands using the `flutter` command-line tool.  It covers common tasks such as fetching dependencies, checking for outdated packages, and upgrading dependencies.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/reference/flutter-cli.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ flutter pub get\n$ flutter pub outdated\n$ flutter pub upgrade\n```\n\n----------------------------------------\n\nTITLE: Check DevTools Version - Dart CLI\nDESCRIPTION: This command allows you to check the current version of DevTools installed on your system. It utilizes the Dart command-line interface (CLI).\nSOURCE: https://github.com/flutter/website/blob/main/src/content/tools/devtools/release-notes/index.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n$ dart devtools --version\n```\n\n----------------------------------------\n\nTITLE: Drawing on Screen with CustomPaint in Flutter\nDESCRIPTION: This snippet demonstrates how to draw a signature on the screen using `CustomPaint` and `CustomPainter` in Flutter. It captures touch input, stores the points, and uses a custom painter to draw lines connecting these points on the canvas. The `SignaturePainter` class handles the actual drawing logic.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/xamarin-forms-devs.md#_snippet_14\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\n\nvoid main() {\n  runApp(const MaterialApp(home: DemoApp()));\n}\n\nclass DemoApp extends StatelessWidget {\n  const DemoApp({super.key});\n\n  @override\n  Widget build(BuildContext context) => const Scaffold(body: Signature());\n}\n\nclass Signature extends StatefulWidget {\n  const Signature({super.key});\n\n  @override\n  SignatureState createState() => SignatureState();\n}\n\nclass SignatureState extends State<Signature> {\n  List<Offset?> _points = <Offset?>[];\n\n  void _onPanUpdate(DragUpdateDetails details) {\n    setState(() {\n      final RenderBox referenceBox = context.findRenderObject() as RenderBox;\n      final Offset localPosition = referenceBox.globalToLocal(\n        details.globalPosition,\n      );\n      _points = List.from(_points)..add(localPosition);\n    });\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return GestureDetector(\n      onPanUpdate: _onPanUpdate,\n      onPanEnd: (details) => _points.add(null),\n      child: CustomPaint(\n        painter: SignaturePainter(_points),\n        size: Size.infinite,\n      ),\n    );\n  }\n}\n\nclass SignaturePainter extends CustomPainter {\n  const SignaturePainter(this.points);\n\n  final List<Offset?> points;\n\n  @override\n  void paint(Canvas canvas, Size size) {\n    final Paint paint =\n        Paint()\n          ..color = Colors.black\n          ..strokeCap = StrokeCap.round\n          ..strokeWidth = 5;\n    for (int i = 0; i < points.length - 1; i++) {\n      if (points[i] != null && points[i + 1] != null) {\n        canvas.drawLine(points[i]!, points[i + 1]!, paint);\n      }\n    }\n  }\n\n  @override\n  bool shouldRepaint(SignaturePainter oldDelegate) =>\n      oldDelegate.points != points;\n}\n```\n\n----------------------------------------\n\nTITLE: Declare strings in a class - Dart\nDESCRIPTION: This code illustrates how to declare copy text as static fields within a class. This is a recommended practice for handling strings in Flutter applications, especially for simple cases before implementing more robust localization.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/xamarin-forms-devs.md#_snippet_32\n\nLANGUAGE: dart\nCODE:\n```\nclass Strings {\n  static const String welcomeMessage = 'Welcome To Flutter';\n}\n```\n\n----------------------------------------\n\nTITLE: Creating, Analyzing, Testing and Running a Flutter App (console)\nDESCRIPTION: This code snippet demonstrates the basic workflow for creating, analyzing, testing, and running a Flutter application using the `flutter` command-line tool. It showcases the sequence of commands typically used during development.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/reference/flutter-cli.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ flutter create my_app\n$ cd my_app\n$ flutter analyze\n$ flutter test\n$ flutter run lib/main.dart\n```\n\n----------------------------------------\n\nTITLE: Call an API with DateTime function after migration\nDESCRIPTION: This code snippet shows how to call an API after it's been modified to accept a `DateTime function()` instead of a `Clock` object. It illustrates passing the `now` method tearoff from the `TestWidgetsFlutterBinding`'s clock to the modified API.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/test-widgets-flutter-binding-clock.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\ntestWidgets('some test', (WidgetTester tester) {\n  modifiedApiThatTakesANowFunction(tester.binding.clock.now);\n});\n```\n\n----------------------------------------\n\nTITLE: Install CocoaPods Dependencies\nDESCRIPTION: Installs CocoaPods dependencies by searching for a `Podfile` and running `pod install` in the directory where the `Podfile` is located.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/deployment/macos.md#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nfind . -name \"Podfile\" -execdir pod install \\;\n```\n\n----------------------------------------\n\nTITLE: ThemeData After Migration (Component Themes)\nDESCRIPTION: This code demonstrates how to customize the active/selected color of toggleable widgets using component themes like SwitchThemeData, RadioThemeData, and CheckboxThemeData after the deprecation of ThemeData.toggleableActiveColor.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/toggleable-active-color.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nfinal ThemeData theme = ThemeData();\nMaterialApp(\n  theme: theme.copyWith(\n    switchTheme: SwitchThemeData(\n      thumbColor: MaterialStateProperty.resolveWith<Color?>(\n          (Set<MaterialState> states) {\n        if (states.contains(MaterialState.disabled)) {\n          return null;\n        }\n        if (states.contains(MaterialState.selected)) {\n          return myColor;\n        }\n        return null;\n      }),\n      trackColor: MaterialStateProperty.resolveWith<Color?>(\n          (Set<MaterialState> states) {\n        if (states.contains(MaterialState.disabled)) {\n          return null;\n        }\n        if (states.contains(MaterialState.selected)) {\n          return myColor;\n        }\n        return null;\n      }),\n    ),\n    radioTheme: RadioThemeData(\n      fillColor: MaterialStateProperty.resolveWith<Color?>(\n          (Set<MaterialState> states) {\n        if (states.contains(MaterialState.disabled)) {\n          return null;\n        }\n        if (states.contains(MaterialState.selected)) {\n          return myColor;\n        }\n        return null;\n      }),\n    ),\n    checkboxTheme: CheckboxThemeData(\n      fillColor: MaterialStateProperty.resolveWith<Color?>(\n          (Set<MaterialState> states) {\n        if (states.contains(MaterialState.disabled)) {\n          return null;\n        }\n        if (states.contains(MaterialState.selected)) {\n          return myColor;\n        }\n        return null;\n      }),\n    ),\n  ),\n  //...\n)\n```\n\n----------------------------------------\n\nTITLE: Load Weather with Actors (Swift)\nDESCRIPTION: Defines a view model using Swift actors to ensure synchronization for shared mutable state and perform work on the main thread. The `@MainActor` attribute ensures that the `ContentViewModel` and its methods are executed on the main thread.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/dart-swift-concurrency.md#_snippet_3\n\nLANGUAGE: Swift\nCODE:\n```\n@MainActor @Observable class ContentViewModel {\n  private(set) var result: Weather?\n  \n  func load() async {\n    // Mimic 1 second network delay.\n    try? await Task.sleep(nanoseconds: 1_000_000_000)\n    self.result = .sunny\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Add Desktop Support to Existing Flutter App\nDESCRIPTION: This command adds desktop support (Windows, macOS, and Linux) to an existing Flutter project.  The `--platforms` flag specifies the platforms to add. The `.` specifies to apply the change to the current directory.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/platform-integration/desktop.md#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ flutter create --platforms=windows,macos,linux .\n```\n\n----------------------------------------\n\nTITLE: Migrate to `maybeOf` Flutter\nDESCRIPTION: This code snippet demonstrates how to migrate from the original static `of` function, where nullability is important, to the new `maybeOf` form. The `maybeOf` method returns a nullable value, which is appropriate when the value might not be present in the context.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/supplemental-maybeOf-migration.md#_snippet_0\n\nLANGUAGE: Dart\nCODE:\n```\nScrollController? controller = Scrollable.of(context);\n```\n\n----------------------------------------\n\nTITLE: TextField with maxLengthEnforced false (Dart)\nDESCRIPTION: Shows how to use `maxLengthEnforced: false` with `maxLength` before the migration.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/use-maxLengthEnforcement-instead-of-maxLengthEnforced.md#_snippet_3\n\nLANGUAGE: Dart\nCODE:\n```\nTextField(\n  maxLength: 6,\n  maxLengthEnforced: false,\n)\n```\n\n----------------------------------------\n\nTITLE: Handling ListView Item Clicks Flutter\nDESCRIPTION: This snippet demonstrates how to detect and handle clicks on individual items within a Flutter ListView. It uses a GestureDetector widget wrapped around each item, with an onTap callback that logs the index of the tapped row. This provides a basic implementation for responding to user interactions within a list.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/xamarin-forms-devs.md#_snippet_47\n\nLANGUAGE: dart\nCODE:\n```\nimport 'dart:developer' as developer;\nimport 'package:flutter/material.dart';\n\nvoid main() {\n  runApp(const SampleApp());\n}\n\nclass SampleApp extends StatelessWidget {\n  // This widget is the root of your application.\n  const SampleApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return const MaterialApp(title: 'Sample App', home: SampleAppPage());\n  }\n}\n\nclass SampleAppPage extends StatefulWidget {\n  const SampleAppPage({super.key});\n\n  @override\n  State<SampleAppPage> createState() => _SampleAppPageState();\n}\n\nclass _SampleAppPageState extends State<SampleAppPage> {\n  List<Widget> _getListData() {\n    return List<Widget>.generate(\n      100,\n      (index) => GestureDetector(\n        onTap: () {\n          developer.log('Row $index tapped');\n        },\n        child: Padding(\n          padding: const EdgeInsets.all(10),\n          child: Text('Row $index'),\n        ),\n      ),\n    );\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: const Text('Sample App')),\n      body: ListView(children: _getListData()),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: DropdownMenu Text Style Before Migration (Dart)\nDESCRIPTION: This code snippet shows how the DropdownMenu was implemented before the Material 3 migration, using the default text style. To revert to the previous style after migration, explicitly set the textStyle property.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/menus-text-style.md#_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nDropdownMenu<ColorLabel>(\n  initialSelection: ColorLabel.green,\n  controller: colorController,\n  label: const Text('Color'),\n  dropdownMenuEntries: colorEntries,\n  onSelected: (ColorLabel? color) {\n    setState(() {\n      selectedColor = color;\n    });\n  },\n),\n```\n\n----------------------------------------\n\nTITLE: Checkbox Customization Before Migration (Dart)\nDESCRIPTION: This code snippet demonstrates how to customize the Checkbox.fillColor property before the migration. The fillColor is set to red when the checkbox is unselected and null otherwise. This approach results in the fill color being used for the border in the unselected state.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/checkbox-fillColor.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nCheckbox(\n  fillColor: MaterialStateProperty.resolveWith((states) {\n    if (!states.contains(MaterialState.selected)) {\n      return Colors.red;\n    }\n    return null;\n  }),\n  value: _checked,\n  onChanged: _enabled\n    ? (bool? value) {\n        setState(() {\n          _checked = value!;\n        });\n      }\n    : null,\n),\n```\n\n----------------------------------------\n\nTITLE: Handling Complex Gestures with PanResponder in React Native\nDESCRIPTION: This React Native code uses `PanResponder` to handle more complex gestures, such as swipes. It detects horizontal or vertical swipes and determines the swipe direction, logging the direction to the console when the gesture is released.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/react-native-devs.md#_snippet_45\n\nLANGUAGE: javascript\nCODE:\n```\n// React Native\nconst App = () => {\n  const panResponderRef = useRef(null);\n\n  useEffect(() => {\n    panResponderRef.current = PanResponder.create({\n      onMoveShouldSetPanResponder: (event, gestureState) =>\n        !!getDirection(gestureState),\n      onPanResponderMove: (event, gestureState) => true,\n      onPanResponderRelease: (event, gestureState) => {\n        const drag = getDirection(gestureState);\n      },\n      onPanResponderTerminationRequest: (event, gestureState) => true\n    });\n  }, []);\n\n  return (\n    <View style={styles.container} {...panResponderRef.current.panHandlers}>\n      <View style={styles.center}>\n        <Text>Swipe Horizontally or Vertically</Text>\n      </View>\n    </View>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Imperative UI Update in Java\nDESCRIPTION: This snippet demonstrates an imperative approach to UI modification. It directly manipulates a UI element (`b`) by setting its color, clearing its children, creating a new child element (`c3`), and adding it to `b`. This style requires manual management of UI state and updates.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/declarative.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\n// Imperative style\nb.setColor(red)\nb.clearChildren()\nViewC c3 = new ViewC(...)\nb.add(c3)\n```\n\n----------------------------------------\n\nTITLE: Updating UI from within a Widget (BAD)\nDESCRIPTION: This snippet illustrates the incorrect way to update the UI from within a widget by considering the current state and applying new data. This is complex and error-prone. It also showcases the incorrect 'build' method.  It is contrasted with Flutter's preferred method of rebuilding widgets from scratch whenever their data changes, simplifying the update process and reducing potential bugs.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/data-and-backend/state-mgmt/simple.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\n// BAD: DO NOT DO THIS\nWidget build(BuildContext context) {\n  return SomeWidget(\n    // The initial state of the cart.\n  );\n}\n\nvoid updateWith(Item item) {\n  // Somehow you need to change the UI from here.\n}\n```\n\n----------------------------------------\n\nTITLE: Snapcraft Parts YAML Example\nDESCRIPTION: This YAML snippet defines the parts required to assemble the snap, using the Flutter plugin. It specifies the source code location and the main entry-point file of the application.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/deployment/linux.md#_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nparts:\n  super-cool-app:\n    source: .\n    plugin: flutter\n    flutter-target: lib/main.dart # The main entry-point file of the application\n```\n\n----------------------------------------\n\nTITLE: Setting Platform Properties After Migration (PlatformDispatcher)\nDESCRIPTION: This code snippet shows how to set platform-specific properties using `tester.platformDispatcher` after migrating from `TestWindow`. It achieves the same functionality as the previous snippet but uses the new `platformDispatcher` accessor.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/window-singleton.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\ntestWidgets('test name', (WidgetTester tester) async {\n  tester.platformDispatcher.accessibilityFeaturesTestValue = FakeAccessibilityFeatures.allOn;\n  tester.platformDispatcher.alwaysUse24HourFormatTestValue = false;\n  tester.platformDispatcher.brieflyShowPasswordTestValue = true;\n  tester.platformDispatcher.defaultRouteNameTestValue = '/test';\n  tester.platformDispatcher.initialLifecycleStateTestValue = 'painting';\n  tester.platformDispatcher.localesTestValue = <Locale>[const Locale('en-us'), const Locale('ar-jo')];\n  tester.platformDispatcher.localeTestValue = const Locale('ar-jo');\n  tester.platformDispatcher.nativeSpellCheckServiceDefinedTestValue = false;\n  tester.platformDispatcher.platformBrightnessTestValue = Brightness.dark;\n  tester.platformDispatcher.semanticsEnabledTestValue = true;\n  tester.platformDispatcher.textScaleFactorTestValue = 2.0;\n});\n```\n\n----------------------------------------\n\nTITLE: Swift Code Before Migration\nDESCRIPTION: Swift code that would result in a compilation error due to the `splashScreenView` property being non-optional when it could be nil.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/ios-flutterviewcontroller-splashscreenview-nullable.md#_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nvar splashScreenView = UIView()\nvar flutterEngine = FlutterEngine(name: \"my flutter engine\")\nlet flutterViewController = FlutterViewController(engine: flutterEngine, nibName: nil, bundle: nil)\nsplashScreenView = flutterViewController.splashScreenView // compilation error: Value of optional type 'UIView?' must be unwrapped to a value of type 'UIView'\n```\n\n----------------------------------------\n\nTITLE: Setting Initial Route with FlutterEngine (Objective-C)\nDESCRIPTION: This snippet demonstrates how to initialize a FlutterEngine in Objective-C and set the initial route to '/onboarding'. The `FlutterDefaultDartEntrypoint` is equivalent to nil and executes the `main()` function.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/add-to-app/ios/add-flutter-screen.md#_snippet_17\n\nLANGUAGE: Objective-C\nCODE:\n```\nFlutterEngine *flutterEngine = [[FlutterEngine alloc] init];\n// FlutterDefaultDartEntrypoint is the same as nil, which will run main().\n[flutterEngine runWithEntrypoint:FlutterDefaultDartEntrypoint\n                    initialRoute:@\"/onboarding\"];\n```\n\n----------------------------------------\n\nTITLE: OverflowBox with Large Container in Flutter\nDESCRIPTION: This example uses an OverflowBox, which allows its child Container to overflow its boundaries.  The OverflowBox provides infinite constraints to its child so the Container can be arbitrarily large. In this case, the container has a width of 4000 and a height of 50.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/layout/constraints.md#_snippet_14\n\nLANGUAGE: dart\nCODE:\n```\nOverflowBox(\n   minWidth: 0,\n   minHeight: 0,\n   maxWidth: double.infinity,\n   maxHeight: double.infinity,\n   child: Container(color: red, width: 4000, height: 50));\n```\n\n----------------------------------------\n\nTITLE: Start iOS Simulator\nDESCRIPTION: Starts the iOS Simulator application, allowing you to test and debug your Flutter applications on a simulated iOS device. The command opens the Simulator app, providing a virtual environment for iOS development.\nSOURCE: https://github.com/flutter/website/blob/main/src/_includes/docs/install/devices/ios-simulator.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ open -a Simulator\n```\n\n----------------------------------------\n\nTITLE: Dart Test Block Snippet\nDESCRIPTION: Inserts a test block for unit testing. Requires the `test` package as a dependency. Input: None. Output: A basic test block structure.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/tools/vs-code.md#_snippet_13\n\nLANGUAGE: Dart\nCODE:\n```\ntest('My test description', () {  });\n```\n\n----------------------------------------\n\nTITLE: HomeScreen Widget Definition Dart\nDESCRIPTION: Defines the structure of the `HomeScreen` widget, taking a `HomeViewModel` as a required constructor argument. This allows the view to access and display data managed by the view model.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/app-architecture/case-study/ui-layer.md#_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nclass HomeScreen extends StatelessWidget {\n  const HomeScreen({super.key, [!required this.viewModel!]});\n\n  [!final HomeViewModel viewModel;!]\n\n  @override\n  Widget build(BuildContext context) {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Flutter PATH (Bash)\nDESCRIPTION: This snippet illustrates how to set the Flutter PATH environment variable for bash.  It assumes Flutter is installed in the `~/development/flutter` directory. The specific command is dynamically generated based on the `shell.set-path` variable within the loop, and this example reflects what it would likely be if the shell was bash.\nSOURCE: https://github.com/flutter/website/blob/main/src/_includes/docs/install/reqs/linux/set-path.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n$ {{shell.set-path}}\n```\n\n----------------------------------------\n\nTITLE: Jekyll Topics List Rendering\nDESCRIPTION: This snippet renders the list of topics.  It checks for the existence of `topics` and then iterates through the `topics` array. If a topic has a permalink, it renders it as a link; otherwise, it checks for a header and renders it as a level 4 heading.  If neither permalink nor header exists, it renders the topic title as a plain list item.\nSOURCE: https://github.com/flutter/website/blob/main/src/_layouts/toc.md#_snippet_2\n\nLANGUAGE: Jekyll\nCODE:\n```\n{% if topics -%}\n### Topics\n\n{% for topic in topics -%}\n\n{% if topic.permalink == nil -%}\n{% if topic contains 'header' %}\n#### {{topic.header}}\n\n{% else -%}\n  - {{topic.title}}\n{% endif -%}\n{% else -%}\n  - [{{topic.title}}]({{topic.permalink}})\n{% endif -%}\n{% endfor %}\n{% endif -%}\n```\n\n----------------------------------------\n\nTITLE: Updating podspec File Paths Ruby\nDESCRIPTION: This snippet illustrates how to update the paths in the `ios/plugin_name.podspec` file to reflect the new directory structure when supporting Swift Package Manager. It ensures CocoaPods can find the source files, headers, and module map.\nSOURCE: https://github.com/flutter/website/blob/main/src/_includes/docs/swift-package-manager/migrate-objective-c-plugin.md#_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\n- s.source_files = 'Classes/**/*.{h,m}'\n- s.public_header_files = 'Classes/**/*.h'\n- s.module_map = 'Classes/cocoapods_plugin_name.modulemap'\n- s.resource_bundles = {'plugin_name_privacy' => ['Resources/PrivacyInfo.xcprivacy']}\n+ s.source_files = 'plugin_name/Sources/plugin_name/**/*.{h,m}'\n+ s.public_header_files = 'plugin_name/Sources/plugin_name/include/**/*.h'\n+ s.module_map = 'plugin_name/Sources/plugin_name/include/cocoapods_plugin_name.modulemap'\n+ s.resource_bundles = {'plugin_name_privacy' => ['plugin_name/Sources/plugin_name/PrivacyInfo.xcprivacy']}\n```\n\n----------------------------------------\n\nTITLE: Adding Click Listeners in React Native\nDESCRIPTION: This React Native code demonstrates adding click and long press listeners to a component using `TouchableOpacity`. When the component is pressed, it logs \"Press\" to the console. When long pressed, it logs \"Long Press\" to the console.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/react-native-devs.md#_snippet_44\n\nLANGUAGE: javascript\nCODE:\n```\n// React Native\n<TouchableOpacity\n  onPress={() => {\n    console.log('Press');\n  }}\n  onLongPress={() => {\n    console.log('Long Press');\n  }}\n>\n  <Text>Tap or Long Press</Text>\n</TouchableOpacity>\n```\n\n----------------------------------------\n\nTITLE: Styling Text CSS\nDESCRIPTION: Demonstrates how to style text in CSS with background color, width, height, and font properties.  It sets the background color to light grey, the dimensions to 320x240 pixels, and the font to 900 24px Georgia. Requires basic HTML structure. Outputs a styled text box.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/web-devs.md#_snippet_0\n\nLANGUAGE: CSS\nCODE:\n```\n.grey-box {\n    background-color: #e0e0e0; /* grey 300 */\n    width: 320px;\n    height: 240px;\n    font: 900 24px Georgia;\n}\n```\n\n----------------------------------------\n\nTITLE: Custom AbsorbPointer with Semantics Dart\nDESCRIPTION: This code defines a custom `_AbsorbPointerWithSemantics` widget that absorbs pointer events without modifying the semantics tree. This is useful for preserving the original behavior when `ignoringSemantics` was set to `false`.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/ignoringsemantics-migration.md#_snippet_3\n\nLANGUAGE: Dart\nCODE:\n```\n/// A widget absorbs pointer events without modifying the semantics tree.\nclass _AbsorbPointerWithSemantics extends SingleChildRenderObjectWidget {\n  const _AbsorbPointerWithSemantics({\n    super.child,\n  });\n\n  @override\n  _RenderAbsorbPointerWithSemantics createRenderObject(BuildContext context) {\n    return _RenderAbsorbPointerWithSemantics();\n  }\n}\n\nclass _RenderAbsorbPointerWithSemantics extends RenderProxyBox {\n  _RenderAbsorbPointerWithSemantics();\n\n  @override\n  bool hitTest(BoxHitTestResult result, { required Offset position }) {\n    return size.contains(position);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Flutter Logo without Animation - Dart\nDESCRIPTION: This snippet shows how to render the Flutter logo without any animation. It defines a StatefulWidget `LogoApp` and its corresponding State `_LogoAppState`. The `build` method returns a `Container` widget that displays the Flutter logo.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/animations/tutorial.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\n\nvoid main() => runApp(const LogoApp());\n\nclass LogoApp extends StatefulWidget {\n  const LogoApp({super.key});\n\n  @override\n  State<LogoApp> createState() => _LogoAppState();\n}\n\nclass _LogoAppState extends State<LogoApp> {\n  @override\n  Widget build(BuildContext context) {\n    return Center(\n      child: Container(\n        margin: const EdgeInsets.symmetric(vertical: 10),\n        height: 300,\n        width: 300,\n        child: const FlutterLogo(),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: InputDecoration.collapsed Usage After Migration (Dart)\nDESCRIPTION: Demonstrates the corrected usage of `InputDecoration.collapsed` after removing the deprecated `floatingLabelAlignment` and `floatingLabelBehavior` parameters. The code simplifies the constructor call by omitting the ineffective parameters. This code uses the Flutter material library.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/input-decoration-collapsed.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nInputDecoration.collapsed(\n  hintText: 'Hint',\n),\n```\n\n----------------------------------------\n\nTITLE: Console: Creating a fonts Directory\nDESCRIPTION: This command creates a directory named 'fonts' in the root of your Flutter project.  This directory will hold the custom font files.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/design/fonts.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ mkdir fonts\n```\n\n----------------------------------------\n\nTITLE: Implementing ParentDataWidget Before Migration (Dart)\nDESCRIPTION: This code snippet demonstrates how to implement a ParentDataWidget before the migration to the new generic type.  It includes a FrogSize widget that extends ParentDataWidget, a FrogJarParentData class that extends ParentData, and a FrogJar class that extends RenderObjectWidget.  The generic type of ParentDataWidget is FrogJar.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/parent-data-widget-generic-type.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nclass FrogSize extends ParentDataWidget<FrogJar> {\n  FrogSize({\n    Key key,\n    required this.size,\n    required Widget child,\n  }) : assert(child != null),\n        assert(size != null),\n        super(key: key, child: child);\n\n  final Size size;\n\n  @override\n  void applyParentData(RenderObject renderObject) {\n    final FrogJarParentData parentData = renderObject.parentData;\n    if (parentData.size != size) {\n      parentData.size = size;\n      final RenderFrogJar targetParent = renderObject.parent;\n      targetParent.markNeedsLayout();\n    }\n  }\n}\n\nclass FrogJarParentData extends ParentData {\n  Size size;\n}\n\nclass FrogJar extends RenderObjectWidget {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Set surfaceTint to transparent (After) - Dart\nDESCRIPTION: This snippet shows the updated code with surfaceTint set to transparent and the AppBarTheme configured to use the shadow color from the color scheme. This ensures that the shadow is differentiated from the content.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/material-3-migration.md#_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\ntheme: ThemeData(\n  colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple).copyWith(\n    surfaceTint: Colors.transparent,\n  ),\n  appBarTheme: AppBarTheme(\n   elevation: 4.0,\n   shadowColor: Theme.of(context).colorScheme.shadow,\n ),\n),\n```\n\n----------------------------------------\n\nTITLE: Incorrect Menu Button Usage Example Dart\nDESCRIPTION: This example shows the incorrect usage of a `MenuItemButton` outside of a menu context.  It demonstrates a common mistake before the migration, where menu buttons were directly included in a `Column` without being wrapped in a menu widget.  This code will throw an exception after the update.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/menu-semantics-roles.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nMaterialApp(\n  home: Material(\n    child: Column(\n      children: [\n        ElevatedButton(onPressed: () {}, child: const Text('Button 0')),\n        OutlinedButton(onPressed: () {}, child: const Text('Button 1')),\n        MenuItemButton(onPressed: () {}, child: const Text('Button 2')),\n      ]\n    )\n  )\n)\n```\n\n----------------------------------------\n\nTITLE: C/C++/Objective-C symbol visibility\nDESCRIPTION: This code snippet shows how to declare C/C++/Objective-C symbols so they are visible to Dart when using FFI.  The `extern \"C\"` ensures C++ symbols are not mangled, and `__attribute__((visibility(\"default\"))) __attribute__((used)))` prevents the linker from discarding the symbols during link-time optimization.  This is necessary for the Dart FFI library to successfully bind to and call the native code.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/platform-integration/ios/c-interop.md#_snippet_1\n\nLANGUAGE: objc\nCODE:\n```\nextern \"C\" /* <= C++ only */ __attribute__((visibility(\"default\"))) __attribute__((used))\n```\n\n----------------------------------------\n\nTITLE: Creating a GridView in Flutter (Dart)\nDESCRIPTION: This snippet demonstrates how to create a `GridView` in Flutter, which is similar to a `Grid` in Xamarin.Forms. It shows how to define the number of columns and generate widgets for each cell, displaying an index within each cell.  The example generates 100 widgets in a 2-column grid.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/xamarin-forms-devs.md#_snippet_38\n\nLANGUAGE: dart\nCODE:\n```\n@override\nWidget build(BuildContext context) {\n  return GridView.count(\n    // Create a grid with 2 columns. If you change the scrollDirection to\n    // horizontal, this would produce 2 rows.\n    crossAxisCount: 2,\n    // Generate 100 widgets that display their index in the list.\n    children: List<Widget>.generate(100, (index) {\n      return Center(\n        child: Text(\n          'Item $index',\n          style: Theme.of(context).textTheme.headlineMedium,\n        ),\n      );\n    }),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Inline Formatting CSS\nDESCRIPTION: This CSS example demonstrates inline formatting by applying different styles to the `em` element within the red box. It sets the font and font style for the emphasized text, 'ipsum'. It depends on HTML structure with a `grey-box` containing a `red-box` with an `em` tag.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/web-devs.md#_snippet_27\n\nLANGUAGE: css\nCODE:\n```\n<div class=\"grey-box\">\n  <div class=\"red-box\">\n    Lorem <em>ipsum</em>\n  </div>\n</div>\n\n.grey-box {\n    background-color: #e0e0e0; /* grey 300 */\n    width: 320px;\n    height: 240px;\n    font: 900 24px Roboto;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n}\n.red-box {\n    background-color: #ef5350; /* red 400 */\n    padding: 16px;\n    color: #ffffff;\n}\n.red-box em {\n    font: 300 48px Roboto;\n    font-style: italic;\n}\n```\n\n----------------------------------------\n\nTITLE: Define Weather Enum Swift\nDESCRIPTION: Defines a simple `Weather` enum in Swift, representing different weather conditions. This enum will be used in subsequent code snippets demonstrating asynchronous weather fetching and UI updates.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/dart-swift-concurrency.md#_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\nenum Weather: String {\n    case rainy, sunny\n}\n```\n\n----------------------------------------\n\nTITLE: Install CocoaPods Dependencies\nDESCRIPTION: This command installs CocoaPods dependencies. It searches for Podfile in the project directory and executes pod install in the respective directories.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/deployment/ios.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nfind . -name \"Podfile\" -execdir pod install \\;\n```\n\n----------------------------------------\n\nTITLE: Row Layout Example\nDESCRIPTION: Demonstrates a Row layout without constraints, leading to a potential overflow warning if the children exceed the available width. It showcases how the Row widget, by default, doesn't impose constraints on its children, possibly resulting in an overflow situation if the children's content surpasses the Row's width.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/layout/constraints.md#_snippet_54\n\nLANGUAGE: dart\nCODE:\n```\nRow(\n  children: [\n    Container(\n      color: red,\n      child: const Text(\n        'This is a very long text that '\n        'won\\'t fit the line.',\n        style: big,\n      ),\n    ),\n    Container(color: green, child: const Text('Goodbye!', style: big)),\n  ],\n)\n```\n\n----------------------------------------\n\nTITLE: ApiClientService Class Definition (No Result)\nDESCRIPTION: Defines the ApiClientService class with a getUserProfile method that fetches user profile data.  It makes an HTTP request, parses the JSON response, and returns a UserProfile object. Exceptions are thrown for invalid responses or other errors.  Dependencies: http client, utf8 decoder, jsonDecode.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/app-architecture/design-patterns/result.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nclass ApiClientService {\n  // ···\n\n  Future<UserProfile> getUserProfile() async {\n    try {\n      final request = await client.get(_host, _port, '/user');\n      final response = await request.close();\n      if (response.statusCode == 200) {\n        final stringData = await response.transform(utf8.decoder).join();\n        return UserProfile.fromJson(jsonDecode(stringData));\n      } else {\n        throw const HttpException('Invalid response');\n      }\n    } finally {\n      client.close();\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing TextInputClient with AutofillGroup Dart\nDESCRIPTION: Illustrates how to implement `TextInputClient` using `AutofillGroup` to enable multifield autofill support. The `AutofillGroup.of(context)` method is used to find the closest `AutofillGroup` widget in the widget tree.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/add-currentAutofillScope-to-TextInputClient.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nclass CustomTextFieldState extends State<CustomTextField> implements TextInputClient {\n  AutofillScope get currentAutofillScope => AutofillGroup.of(context);\n}\n```\n\n----------------------------------------\n\nTITLE: Text Wrapping (After M3) - Dart\nDESCRIPTION: This snippet illustrates how to adjust the text style after migrating to Material 3 to achieve the previous text wrapping behavior. It changes the text style to Theme.of(context).textTheme.bodyMedium and adjusts the letterSpacing to 0.0. This ensures that the text wraps into two lines instead of three when constrained to a maxWidth of 200.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/material-3-migration.md#_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nConstrainedBox(\n  constraints: const BoxConstraints(maxWidth: 200),\n    child: Text(\n      'This is a very long text that should wrap to multiple lines.',\n      style: Theme.of(context).textTheme.bodyMedium!.copyWith(\n        letterSpacing: 0.0,\n      ),\n  ),\n),\n```\n\n----------------------------------------\n\nTITLE: Removing MouseTracker Annotation Methods (Dart Diff)\nDESCRIPTION: This code snippet showcases the removal of the `attachAnnotation`, `detachAnnotation`, and `isAnnotationAttached` methods from the `MouseTracker` class using a Dart diff. This illustrates the core change of no longer tracking annotations directly within the MouseTracker itself. The // ... represents other existing class members.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/mouse-tracker-no-longer-attaches-annotations.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n  class MouseTracker extends ChangeNotifier {\n    // ...\n-   void attachAnnotation(MouseTrackerAnnotation annotation) {/* ... */}\n\n-   void detachAnnotation(MouseTrackerAnnotation annotation) {/* ... */}\n\n-   @visibleForTesting\n-   bool isAnnotationAttached(MouseTrackerAnnotation annotation) {/* ... */}\n  }\n```\n\n----------------------------------------\n\nTITLE: Configure AndroidManifest.xml for AdMob App ID\nDESCRIPTION: This snippet shows how to add the AdMob App ID to your Android application's AndroidManifest.xml file. The AdMob App ID is required for the Google Mobile Ads SDK to function correctly.  It's crucial to replace the placeholder with your actual AdMob App ID obtained from the AdMob console.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/plugins/google-mobile-ads.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<manifest>\n    <application>\n        ...\n    \n        <!-- Sample AdMob app ID: ca-app-pub-3940256099942544~3347511713 -->\n        <meta-data\n            android:name=\"com.google.android.gms.ads.APPLICATION_ID\"\n            android:value=\"ca-app-pub-xxxxxxxxxxxxxxxx~yyyyyyyyyy\"/>\n    </application>\n</manifest>\n```\n\n----------------------------------------\n\nTITLE: Keytool Command for SHA256 Fingerprint\nDESCRIPTION: This command-line instruction uses the `keytool` utility to generate the SHA256 fingerprint of the signing key used to build the APK. Replace `<path-to-keystore>` with the actual path to your keystore file. The resulting fingerprint is required for configuring the `assetlinks.json` file.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/navigation/set-up-app-links.md#_snippet_6\n\nLANGUAGE: console\nCODE:\n```\nkeytool -list -v -keystore <path-to-keystore>\n```\n\n----------------------------------------\n\nTITLE: FadeInImage from Memory in Flutter\nDESCRIPTION: This snippet shows how to use FadeInImage with a transparent image placeholder loaded from memory, using the transparent_image package. It fetches the image from a network URL and fades it in when loaded. Requires the transparent_image package.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/images/fading-in-images.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nFadeInImage.memoryNetwork(\n  placeholder: kTransparentImage,\n  image: 'https://picsum.photos/250?image=9',\n),\n```\n\n----------------------------------------\n\nTITLE: Swipe Animation Using Dismissible Widget in Flutter\nDESCRIPTION: This snippet demonstrates how to add a swipe animation to cards using the Dismissible widget in Flutter. The Dismissible widget allows users to swipe away a card, triggering the onDismissed callback.  The key is used to identify the widget, and the onDismissed function is called when the card is swiped.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/react-native-devs.md#_snippet_59\n\nLANGUAGE: Dart\nCODE:\n```\nreturn Dismissible(\n  key: Key(widget.key.toString()),\n  onDismissed: (dismissDirection) {\n    cards.removeLast();\n  },\n  child: Container(\n    //...\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Loading Image Asset from Package using AssetImage in Flutter\nDESCRIPTION: This Dart snippet demonstrates how to load an image asset from a package dependency using the `AssetImage` class and specifying the `package` argument.  The `icons/heart.png` asset is loaded from the `my_icons` package. Make sure `my_icons` is a listed dependency in the app's `pubspec.yaml`.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/assets/assets-and-images.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nreturn const AssetImage('icons/heart.png', package: 'my_icons');\n```\n\n----------------------------------------\n\nTITLE: Navigate to Plugin Directory - Shell\nDESCRIPTION: This command navigates the terminal to the top-level directory of the Flutter plugin. It is a prerequisite for running subsequent commands related to plugin validation and testing.\nSOURCE: https://github.com/flutter/website/blob/main/src/_includes/docs/swift-package-manager/migrate-swift-plugin.md#_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\ncd path/to/plugin/\n```\n\n----------------------------------------\n\nTITLE: Migrate to colorScheme.secondary (Flutter/Dart)\nDESCRIPTION: Demonstrates how to replace direct usage of `Theme.of(context).accentColor` with `Theme.of(context).colorScheme.secondary` in Flutter. This migration is necessary since accentColor is deprecated.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/theme-data-accent-properties.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nColor myColor = Theme.of(context).colorScheme.secondary;\n```\n\n----------------------------------------\n\nTITLE: Snapcraft DBus Interface YAML Example\nDESCRIPTION: This YAML snippet configures a DBus interface for the snap, enabling inter-process communication.  It defines the interface name, bus (session), and well-known DBus name. Proper configuration is needed for the snap to claim this DBus name during the store review process.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/deployment/linux.md#_snippet_8\n\nLANGUAGE: plaintext\nCODE:\n```\ndbus-super-cool-app: # adjust accordingly to your app name\n  interface: dbus\n  bus: session\n  name: dev.site.super_cool_app \n```\n\n----------------------------------------\n\nTITLE: Displaying Text Widget in Flutter\nDESCRIPTION: Demonstrates how to display a simple Text widget in Flutter. The Text widget displays the string 'I like Flutter!' with bold font weight. It subclasses StatelessWidget, implying that its content remains static during runtime.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/uikit-devs.md#_snippet_0\n\nLANGUAGE: Dart\nCODE:\n```\nText(\n  'I like Flutter!',\n  style: TextStyle(fontWeight: FontWeight.bold),\n);\n```\n\n----------------------------------------\n\nTITLE: Get test help\nDESCRIPTION: This console command displays a help message showing all options for the Flutter test command.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/testing/unit/introduction.md#_snippet_7\n\nLANGUAGE: console\nCODE:\n```\nflutter test --help\n```\n\n----------------------------------------\n\nTITLE: Rotating Components CSS\nDESCRIPTION: Rotates a div element using CSS transform property. The red-box is rotated by 15 degrees.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/web-devs.md#_snippet_11\n\nLANGUAGE: CSS\nCODE:\n```\n.red-box {\n    background-color: #ef5350; /* red 400 */\n    padding: 16px;\n    color: #ffffff;\n    transform: rotate(15deg);\n}\n```\n\n----------------------------------------\n\nTITLE: Using quiver Clock with TestWidgetsFlutterBinding before migration\nDESCRIPTION: This code demonstrates how a `TestWidgetsFlutterBinding`'s clock might have been used with an API expecting a `package:quiver` Clock before the migration.  It highlights the context that requires changes due to the Clock implementation switch.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/test-widgets-flutter-binding-clock.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\ntestWidgets('some test', (WidgetTester tester) {\n  someApiThatWantsAQuiverClock(tester.binding.clock);\n});\n```\n\n----------------------------------------\n\nTITLE: Migrated testWidgets timeout - Dart\nDESCRIPTION: Shows the updated way of setting timeout for `testWidgets` using the `timeout` parameter and the `Timeout` class instead of the deprecated `initialTimeout` in Flutter tests.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/3-10-deprecations.md#_snippet_8\n\nLANGUAGE: Dart\nCODE:\n```\ntestWidgets('Test', (_) {}, timeout:  Timeout(Duration(seconds: 5)));\n```\n\n----------------------------------------\n\nTITLE: Counter Class Definition in Dart\nDESCRIPTION: This Dart code defines a `Counter` class with a `value` property initialized to 0, along with `increment` and `decrement` methods that modify the `value`. This is the unit that will be tested.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/testing/unit/introduction.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nclass Counter {\n  int value = 0;\n\n  void increment() => value++;\n\n  void decrement() => value--;\n}\n```\n\n----------------------------------------\n\nTITLE: Entry Point Comparison: JavaScript vs. Dart\nDESCRIPTION: This snippet compares how to define the entry point of an application in JavaScript and Dart. JavaScript doesn't have a pre-defined entry function, while Dart requires a top-level `main()` function.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/react-native-devs.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// JavaScript\nfunction startHere() {\n  // Can be used as entry point\n}\n```\n\nLANGUAGE: Dart\nCODE:\n```\n/// Dart\nvoid main() {}\n```\n\n----------------------------------------\n\nTITLE: Asserting Null Text Input State (After Migration) - Dart\nDESCRIPTION: This code snippet shows the recommended way to check the text input state after the migration.  It asserts that `editingState` is `null`, indicating that the state hasn't been modified yet. This ensures that tests are not relying on any prior state. Use this when intending to verify the initial state of the `TestTextInput`.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/test-text-input.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nexpect(tester.testTextInput.editingState, isNull);\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Project from Example\nDESCRIPTION: Creates a new Flutter project from an existing example. The `--no-overwrite` flag ensures that existing files are not overwritten during the creation process.  The `$PROJECT` variable represents the relative path to the example app.\nSOURCE: https://github.com/flutter/website/blob/main/examples/animation/animate3/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nflutter create --no-overwrite $PROJECT\n```\n\n----------------------------------------\n\nTITLE: Text Wrapping (Before M3) - Dart\nDESCRIPTION: This snippet demonstrates how the Text widget wraps a long string using TextTheme.bodyLarge in a constrained layout before the Flutter 3.16 release.  It shows that the text wraps into two lines when constrained to a maxWidth of 200.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/material-3-migration.md#_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nConstrainedBox(\n  constraints: const BoxConstraints(maxWidth: 200),\n    child: Text(\n      'This is a very long text that should wrap to multiple lines.',\n      style: Theme.of(context).textTheme.bodyLarge,\n  ),\n),\n```\n\n----------------------------------------\n\nTITLE: Disable Analytics Reporting in Flutter\nDESCRIPTION: This command disables Flutter's analytics reporting, including crash reports and feature usage statistics.  After running this command, Flutter will send an opt-out event and will no longer send or store any further information.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/reference/crash-reporting.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ flutter --disable-analytics\n```\n\n----------------------------------------\n\nTITLE: Hit Testing RenderEditable With Layout - Dart\nDESCRIPTION: This code snippet demonstrates the correct way to hit test a RenderEditable object.  Before calling `handleEvent`, the `layout` method is called with `BoxConstraints` to ensure the RenderEditable has been laid out. This prevents the assertion error.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/rendereditable-layout-before-hit-test.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/rendering.dart';\nimport 'package:flutter_test/flutter_test.dart';\nimport 'package:flutter/material.dart';\n\nvoid main() {\n  test('attach and detach correctly handle gesture', () {\n    final RenderEditable editable = RenderEditable(\n      textDirection: TextDirection.ltr,\n      offset: ViewportOffset.zero(),\n      textSelectionDelegate: FakeEditableTextState(),\n      startHandleLayerLink: LayerLink(),\n      endHandleLayerLink: LayerLink(),\n    );\n    // Lay out the RenderEditable first.\n    editable.layout(BoxConstraints.loose(const Size(1000.0, 1000.0)));\n    final PipelineOwner owner = PipelineOwner(onNeedVisualUpdate: () {});\n    editable.attach(owner);\n    editable.handleEvent(const PointerDownEvent(),\n        BoxHitTestEntry(editable, const Offset(10, 10)));\n    editable.detach();\n  });\n}\n\nclass FakeEditableTextState extends TextSelectionDelegate {\n  @override\n  TextEditingValue textEditingValue;\n  @override\n  void hideToolbar() {}\n  @override\n  void bringIntoView(TextPosition position) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Rounding Corners with BorderRadius - Dart\nDESCRIPTION: This Dart code snippet rounds the corners of a Container using the `borderRadius` property of a `BoxDecoration`. `BorderRadius.all(Radius.circular(8))` sets a circular radius of 8 pixels for all corners.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/web-devs.md#_snippet_20\n\nLANGUAGE: dart\nCODE:\n```\nfinal container = Container(\n  // grey box\n  width: 320,\n  height: 240,\n  color: Colors.grey[300],\n  child: Center(\n    child: Container(\n      // red circle\n      padding: const EdgeInsets.all(16),\n      decoration: BoxDecoration(\n        color: Colors.red[400],\n        borderRadius: const BorderRadius.all(\n          Radius.circular(8),\n        ),\n      ),\n      child: Text(\n        'Lorem ipsum',\n        style: bold24Roboto,\n      ),\n    ),\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Shallow vs Retained Size Example\nDESCRIPTION: This Dart code illustrates the difference between shallow size and retained size in memory management.  The `myHugeInstance` object contributes to the retained size of both `parent` and `parent.child` but not to their shallow sizes.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/tools/devtools/memory.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nclass Child{\n  /// The instance is part of both [parent] and [parent.child]\n  /// retained sizes.\n  final myHugeInstance = MyHugeInstance();\n}\n\nclass Parent {\n  Child? child;\n}\n\nParent parent = Parent()..child = Child();\n```\n\n----------------------------------------\n\nTITLE: Pass App Data to Logs Using JSON in Dart\nDESCRIPTION: This snippet shows how to pass app data to log calls by JSON encoding an object and passing the encoded string to the `error` parameter of the `log()` function from the `dart:developer` library.  The example also includes the necessary import statements for `dart:convert` and `dart:developer`.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/testing/code-debugging.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nimport 'dart:convert';\nimport 'dart:developer' as developer;\n\nvoid main() {\n  var myCustomObject = MyCustomObject();\n\n  developer.log(\n    'log me',\n    name: 'my.app.category',\n    error: jsonEncode(myCustomObject),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Fastfile build_app configuration for iOS beta deployment\nDESCRIPTION: This Ruby snippet configures the `build_app` action in a Fastfile for iOS beta deployment, specifically skipping the build archive and using an existing archive path to speed up the process. It then uploads the build to TestFlight.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/deployment/cd.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nbuild_app(\n  skip_build_archive: true,\n  archive_path: \"../build/ios/archive/Runner.xcarchive\",\n)\nupload_to_testflight\n```\n\n----------------------------------------\n\nTITLE: Add url_launcher dependency Flutter\nDESCRIPTION: Adds the `url_launcher` package as a dependency to the Flutter project using the `flutter pub add` command. This makes the `url_launcher` package available for use in the Flutter app.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/testing/native-debugging.md#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ flutter pub add url_launcher\n```\n\n----------------------------------------\n\nTITLE: Passing Parameters into Integration Tests with Gradle\nDESCRIPTION: This Gradle command passes parameters into the integration test as comma separated list, encoding the parameters in base64. Used to configure test behavior based on environmental variables.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/testing/integration-tests/index.md#_snippet_19\n\nLANGUAGE: console\nCODE:\n```\n$ ./gradlew project:task -Pdart-defines=\"{base64 (key=value)}[, ...]\"\n```\n\n----------------------------------------\n\nTITLE: FadeInImage from Asset in Flutter\nDESCRIPTION: This snippet shows how to use FadeInImage with an asset as a placeholder. It uses FadeInImage.assetNetwork to display the image from a network URL with the specified asset as a placeholder. Requires the asset to be defined in pubspec.yaml.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/images/fading-in-images.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nFadeInImage.assetNetwork(\n  placeholder: 'assets/loading.gif',\n  image: 'https://picsum.photos/250?image=9',\n),\n```\n\n----------------------------------------\n\nTITLE: Running Widget Tests - Console\nDESCRIPTION: This command is used to execute the widget tests located in the specified file. It runs the tests and displays the results in the console. Ensure that the command is executed from the root directory of the Flutter project.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/testing/widget/scrolling.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nflutter test test/widget_test.dart\n```\n\n----------------------------------------\n\nTITLE: WaitingPage Widget with Completion Callback\nDESCRIPTION: This StatefulWidget displays a waiting screen with a message and a CircularProgressIndicator. After a specified duration (3 seconds), it calls the `onWaitComplete` callback function.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/effects/nested-nav.md#_snippet_9\n\nLANGUAGE: Dart\nCODE:\n```\nclass WaitingPage extends StatefulWidget {\n  const WaitingPage({\n    super.key,\n    required this.message,\n    required this.onWaitComplete,\n  });\n\n  final String message;\n  final VoidCallback onWaitComplete;\n\n  @override\n  State<WaitingPage> createState() => _WaitingPageState();\n}\n\nclass _WaitingPageState extends State<WaitingPage> {\n  @override\n  void initState() {\n    super.initState();\n    _startWaiting();\n  }\n\n  Future<void> _startWaiting() async {\n    await Future<dynamic>.delayed(const Duration(seconds: 3));\n\n    if (mounted) {\n      widget.onWaitComplete();\n    }\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: Center(\n        child: Padding(\n          padding: const EdgeInsets.symmetric(horizontal: 24),\n          child: Column(\n            mainAxisSize: MainAxisSize.min,\n            children: [\n              const CircularProgressIndicator(),\n              const SizedBox(height: 32),\n              Text(widget.message),\n            ],\n          ),\n        ),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating cupertino_icons dependency to 1.0.0 in pubspec.yaml\nDESCRIPTION: This YAML snippet demonstrates how to update the `cupertino_icons` dependency in a Flutter project's `pubspec.yaml` file to version 1.0.0. This upgrade introduces new icon styles and features, as described in the document.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/cupertino-icons-1.0.0.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\ndependencies:\n  ... // Other dependencies\n  cupertino_icons: ^1.0.0\n```\n\n----------------------------------------\n\nTITLE: VelocityTracker Constructor Replacement Dart\nDESCRIPTION: This snippet demonstrates the replacement of the default `VelocityTracker` constructor with `VelocityTracker.withKind(PointerDeviceKind.touch)`. It shows how to explicitly specify the `PointerDeviceKind` for the tracker. Requires the Flutter SDK.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/2-10-deprecations.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nfinal VelocityTracker tracker = VelocityTracker();\n```\n\n----------------------------------------\n\nTITLE: Defining Animation Delays and Durations in Flutter\nDESCRIPTION: This code defines the durations and delays used in the staggered animation. These constants control the timing of each element's animation, including the initial delay, item slide time, stagger time, button delay, and button animation time. These are important for achieving the staggered effect.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/effects/staggered-menu-animation.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nclass _MenuState extends State<Menu> with SingleTickerProviderStateMixin {\n  static const _initialDelayTime = Duration(milliseconds: 50);\n  static const _itemSlideTime = Duration(milliseconds: 250);\n  static const _staggerTime = Duration(milliseconds: 50);\n  static const _buttonDelayTime = Duration(milliseconds: 150);\n  static const _buttonTime = Duration(milliseconds: 500);\n  final _animationDuration =\n      _initialDelayTime +\n      (_staggerTime * _menuTitles.length) +\n      _buttonDelayTime +\n      _buttonTime;\n}\n```\n\n----------------------------------------\n\nTITLE: Responsive Layout with LayoutBuilder in Dart\nDESCRIPTION: This code snippet demonstrates how to create a responsive layout using the LayoutBuilder widget in Flutter. It checks the available width using BoxConstraints and returns different layouts based on the width. If the maxWidth is less than or equal to 600, it returns _MobileLayout, otherwise, it returns _DesktopLayout. Requires a BuildContext and uses BoxConstraints to determine the layout.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/fundamentals/layout.md#_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nWidget build(BuildContext context) {\n  return LayoutBuilder(\n    builder: (BuildContext context, BoxConstraints constraints) {\n      [!if (constraints.maxWidth <= 600)!] {\n        return _MobileLayout();\n      } else {\n        return _DesktopLayout();\n      }\n    },\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Adding GMS and Crashlytics plugin application to settings.gradle (Groovy)\nDESCRIPTION: This shows how to add Google Mobile Services (GMS) and Firebase Crashlytics plugins within the `plugins` block in the `<app-src>/android/settings.gradle` file. Make sure to specify the correct plugin versions to match versions removed in the previous steps.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/flutter-gradle-plugin-apply.md#_snippet_9\n\nLANGUAGE: Groovy\nCODE:\n```\nplugins {\n      id \"dev.flutter.flutter-plugin-loader\" version \"1.0.0\"\n      id \"com.android.application\" version \"{agpVersion}\" apply false\n      id \"org.jetbrains.kotlin.android\" version \"{kotlinVersion}\" apply false\n+     id \"com.google.gms.google-services\" version \"4.4.0\" apply false\n+     id \"com.google.firebase.crashlytics\" version \"2.9.9\" apply false\n  }\n```\n\n----------------------------------------\n\nTITLE: Accessing Cart State - Imperative (BAD)\nDESCRIPTION: This snippet demonstrates the anti-pattern of directly updating a widget's state imperatively from outside using a method call.  This approach is discouraged in Flutter's declarative UI framework because it bypasses the framework's intended rebuild process and leads to potential bugs. It highlights the need to manage state above the widget that displays it.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/data-and-backend/state-mgmt/simple.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n// BAD: DO NOT DO THIS\nvoid myTapHandler() {\n  var cartWidget = somehowGetMyCartWidget();\n  cartWidget.updateWith(item);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Button - Kotlin (Jetpack Compose)\nDESCRIPTION: Demonstrates how to create a button in Jetpack Compose using the `Button` composable. The `onClick` lambda function is called when the button is pressed. The `Text` composable is used to display text on the button.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/compose-devs.md#_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nButton(onClick = {}) {\n    Text(\"Do something\")\n}\n```\n\n----------------------------------------\n\nTITLE: Flutter App Creation Output\nDESCRIPTION: This is the console output after creating a Flutter app. It displays the progress of creating the project, resolving dependencies, and the number of files written. It also provides instructions on how to run the application.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/testing/native-debugging.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nCreating project my_app...\nResolving dependencies in my_app...\nGot dependencies in my_app.\nWrote 129 files.\n\nAll done!\nYou can find general documentation for Flutter at: https://docs.flutter.dev/\nDetailed API documentation is available at: https://api.flutter.dev/\nIf you prefer video documentation, consider: https://www.youtube.com/c/flutterdev\n\nIn order to run your application, type:\n\n  $ cd my_app\n  $ flutter run\n\nYour application code is in my_app/lib/main.dart.\n```\n\n----------------------------------------\n\nTITLE: Shader Asset Declaration - YAML\nDESCRIPTION: This snippet demonstrates how to add a shader directory to the `assets` field in the `pubspec.yaml` file. This is an alternative method for including shaders in the project.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/tools/pubspec.md#_snippet_23\n\nLANGUAGE: YAML\nCODE:\n```\nflutter:\n  assets:\n    - assets/shaders/my_shader.frag\n```\n\n----------------------------------------\n\nTITLE: Firebase List Projects - Bash\nDESCRIPTION: This command lists all the Firebase projects associated with your account. It uses the `firebase-tools` package.\nSOURCE: https://github.com/flutter/website/blob/main/README.md#_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nnpm exec -- firebase-tools projects:list\n```\n\n----------------------------------------\n\nTITLE: Handle AppLifecycleState changes - After Migration - Dart\nDESCRIPTION: This code snippet demonstrates how to handle `AppLifecycleState` changes after the introduction of the `hidden` state. The `hidden` case is added to the switch statement to handle scenarios where the application is not visible to the user, specifically when transitioning between inactive and paused states on Android and iOS.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/add-applifecyclestate-hidden.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nvoid didChangeAppLifecycleState(AppLifecycleState state) {\n  switch (state) {\n    case AppLifecycleState.resumed:\n    case AppLifecycleState.inactive:\n      // Do something when the app is visible...\n      break;\n    case AppLifecycleState.hidden:  // <-- This is the new state.\n    case AppLifecycleState.paused:\n    case AppLifecycleState.detached:\n      // Do something when the app is not visible...\n      break;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: WillPop to Route.popDisposition\nDESCRIPTION: Code before migrating from Route.willPop to Route.popDisposition\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/android-predictive-back.md#_snippet_14\n\nLANGUAGE: dart\nCODE:\n```\nif (await myRoute.willPop() == RoutePopDisposition.doNotPop) {\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Recipes with Jekyll Liquid\nDESCRIPTION: This snippet iterates through recipes (child pages), sorts them by title, and generates a Markdown list with links to each recipe using Jekyll Liquid templating.\nSOURCE: https://github.com/flutter/website/blob/main/src/_includes/docs/cookbook-group-index.md#_snippet_0\n\nLANGUAGE: Jekyll Liquid\nCODE:\n```\n{% assign path_base = page.url %}\n{% assign recipes = collections.all\n      | children_pages: path_base\n      | sort: 'title' %}\n\n{% for recipe in recipes -%}\n- [{{ recipe.data.title }}]({{ recipe.url }})\n{% endfor -%}\n```\n\n----------------------------------------\n\nTITLE: Jekyll URL and Path Processing\nDESCRIPTION: This snippet processes the page URL to extract path components and prepare them for navigation in the sidenav structure. It removes trailing slashes and index variations and splits the URL into path segments for iterative processing. The snippet initializes variables for subsequent topic filtering.\nSOURCE: https://github.com/flutter/website/blob/main/src/_layouts/toc.md#_snippet_0\n\nLANGUAGE: Jekyll\nCODE:\n```\n{% assign url = page.url | regex_replace: '/index$|/index.html$|/$' -%}\n{% assign path_parts = url | split: '/' -%}\n{% assign topics = sidenav -%}\n{% assign path = '' -%}\n```\n\n----------------------------------------\n\nTITLE: Enable Swift Package Manager - Flutter CLI\nDESCRIPTION: This command enables Swift Package Manager support for Flutter projects using the Flutter CLI. It configures Flutter to use Swift Package Manager for dependency resolution.\nSOURCE: https://github.com/flutter/website/blob/main/src/_includes/docs/swift-package-manager/migrate-swift-plugin.md#_snippet_15\n\nLANGUAGE: sh\nCODE:\n```\nflutter config --enable-swift-package-manager\n```\n\n----------------------------------------\n\nTITLE: Displaying Chip Widgets in Flutter\nDESCRIPTION: This code snippet demonstrates how to create and display Chip widgets within a Wrap widget in Flutter. It includes setting up avatar images using AssetImage and defining the label text for each chip.  The Wrap widget ensures that the chips are displayed in multiple horizontal or vertical runs to prevent them from being cut off.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/fundamentals/user-input.md#_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\n@override\nWidget build(BuildContext context) {\n  return const SizedBox(\n    width: 500,\n    child: Wrap(\n      alignment: WrapAlignment.center,\n      spacing: 8,\n      runSpacing: 4,\n      children: [\n        Chip(\n          avatar: CircleAvatar(\n              backgroundImage: AssetImage('assets/images/dash_chef.png')),\n          label: Text('Chef Dash'),\n        ),\n        Chip(\n          avatar: CircleAvatar(\n              backgroundImage:\n                  AssetImage('assets/images/dash_firefighter.png')),\n          label: Text('Firefighter Dash'),\n        ),\n        Chip(\n          avatar: CircleAvatar(\n              backgroundImage: AssetImage('assets/images/dash_musician.png')),\n          label: Text('Musician Dash'),\n        ),\n        Chip(\n          avatar: CircleAvatar(\n              backgroundImage: AssetImage('assets/images/dash_artist.png')),\n          label: Text('Artist Dash'),\n        ),\n      ],\n    ),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Generate Signed Certificate (CRT) with OpenSSL\nDESCRIPTION: Generates a signed certificate (CRT) file using the private key and CSR file. The `-days` parameter specifies the validity period of the certificate in days.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/platform-integration/windows/building.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nopenssl x509 -in mycsrname.csr -out mycrtname.crt -req -signkey mykeyname.key -days 10000\n```\n\n----------------------------------------\n\nTITLE: HTML After Slot Implementation\nDESCRIPTION: Demonstrates the updated DOM structure using HTML slots for rendering platform views in Flutter web. This new approach uses `flt-platform-view-slot` and `slot` elements within a shadow root to project the platform view content, preventing DOM operations from directly affecting the underlying content.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/platform-views-using-html-slots-web.md#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n...\\n\n<flt-glass-pane>\n  #shadow-root\n  | ...\n  | <flt-platform-view-slot>\n  |   <slot name=\"platform-view-1\" />\n  | </flt-platform-view-slot>\n  | ...\n  <flt-platform-view slot=\"platform-view-1\">\n    <div id=\"platform-view\">Contents</div>\n  </flt-platform-view>\n  ...\n</flt-glass-pane>\n\n...\n```\n\n----------------------------------------\n\nTITLE: Updating app/build.gradle - Removing Legacy Plugin Application (Groovy)\nDESCRIPTION: This code shows the removal of the apply plugin statements from app/build.gradle.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/flutter-gradle-plugin-apply.md#_snippet_4\n\nLANGUAGE: Groovy\nCODE:\n```\n- apply plugin: 'com.android.application'\n- apply plugin: 'com.jetbrains.kotlin.android'\n- apply from: \"$flutterRoot/packages/flutter_tools/gradle/flutter.gradle\"\n```\n\n----------------------------------------\n\nTITLE: Define Normal Theme in styles.xml (Android)\nDESCRIPTION: This XML snippet defines the normal theme for the FlutterActivity. It sets the `windowBackground` to a solid color or a similar background to the primary UI in flutter. This is shown briefly after the launch screen disappears and during orientation changes.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/platform-integration/android/splash-screen.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<style name=\"NormalTheme\" parent=\"@android:style/Theme.Black.NoTitleBar\">\n    <item name=\"android:windowBackground\">@drawable/normal_background</item>\n</style>\n```\n\n----------------------------------------\n\nTITLE: Unset PUB_HOSTED_URL on Linux/macOS (Bash)\nDESCRIPTION: This command unsets the PUB_HOSTED_URL environment variable on Linux/macOS using Bash. This removes the variable from the current environment.\nSOURCE: https://github.com/flutter/website/blob/main/src/_includes/docs/community/china/pub-settings.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n{{prompt}} unset $PUB_HOSTED_URL\n```\n\n----------------------------------------\n\nTITLE: Installing Git via Brew (Terminal)\nDESCRIPTION: This command is used to install Git on macOS using the Homebrew package manager. It assumes that Homebrew is already installed on the system.\nSOURCE: https://github.com/flutter/website/blob/main/src/_includes/docs/install/reqs/macos/software.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nbrew install git\n```\n\n----------------------------------------\n\nTITLE: Current Brightness Property Implementation - Dart\nDESCRIPTION: Illustrates the current implementation of the `brightness` property in `CupertinoThemeData`, which is now a simple stored property, allowing it to be null.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/nullable-cupertinothemedata-brightness.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nfinal Brightness brightness;\n```\n\n----------------------------------------\n\nTITLE: Update golden files (Console)\nDESCRIPTION: Command to update golden files after changes to the TextSelectionTheme, ensuring UI tests reflect the updated text selection appearance. This is necessary if you accept the new defaults and golden file tests are failing.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/text-selection-theme.md#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ flutter test --update-goldens\n```\n\n----------------------------------------\n\nTITLE: Migrate AnimationSheetBuilder display & sheetSize - Dart\nDESCRIPTION: Demonstrates how to replace deprecated `display` and `sheetSize` methods of `AnimationSheetBuilder` with the `collate` method in Flutter tests. This migration streamlines the image collation process, reduces boilerplate, and improves image quality.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/3-10-deprecations.md#_snippet_5\n\nLANGUAGE: Dart\nCODE:\n```\nfinal AnimationSheetBuilder animationSheet = AnimationSheetBuilder(\n    frameSize: const Size(40, 40)\n);\n\nawait tester.pumpFrames(animationSheet.record(\n  const Directionality(\n    textDirection: TextDirection.ltr,\n    child: Padding(\n      padding: EdgeInsets.all(4),\n      child: CircularProgressIndicator(),\n    ),\n  ),\n), const Duration(seconds: 2));\n\ntester.binding.setSurfaceSize(animationSheet.sheetSize());\n\nfinal Widget display = await animationSheet.display();\nawait tester.pumpWidget(display);\n\nawait expectLater(\n  find.byWidget(display),\n  matchesGoldenFile('material.circular_progress_indicator.indeterminate.png'),\n);\n```\n\n----------------------------------------\n\nTITLE: YAML: Defining Fonts in pubspec.yaml\nDESCRIPTION: This YAML snippet defines custom fonts (Raleway and RobotoMono) within the `pubspec.yaml` file.  It specifies the font family name, the file path to the font assets, and optional styling information like italic style and font weight (700 for bold). This allows Flutter to recognize and use the custom fonts.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/design/fonts.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nfonts:\n  - family: Raleway\n    fonts:\n      - asset: fonts/Raleway-Regular.ttf\n      - asset: fonts/Raleway-Italic.ttf\n        style: italic\n  - family: RobotoMono\n    fonts:\n      - asset: fonts/RobotoMono-Regular.ttf\n      - asset: fonts/RobotoMono-Bold.ttf\n        weight: 700\n```\n\n----------------------------------------\n\nTITLE: Example of removed packageRoot API error Plaintext\nDESCRIPTION: This plaintext snippet shows an example error message that occurs when using an older version of the `package:platform` package with Dart 2.16 or later due to the removal of the `packageRoot` API.  This error indicates that the `packageRoot` member is not found.  Upgrading the `package:platform` version will resolve this issue.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/2-5-deprecations.md#_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\n../../.pub-cache/hosted/pub.dartlang.org/platform-3.0.0/\n  lib/src/interface/local_platform.dart:46:19:\n  Error: Member not found: 'packageRoot'.\n      io.Platform.packageRoot; // ignore: deprecated_member_use\n                  ^^^^^^^^^^^\n```\n\n----------------------------------------\n\nTITLE: Creating a Grid with LazyVerticalGrid in Compose (Kotlin)\nDESCRIPTION: Demonstrates creating a grid layout using LazyVerticalGrid in Jetpack Compose.  It configures the number of columns using GridCells.Fixed and adds padding. The items closure defines how each item is rendered, handling both String and ImageVector types.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/compose-devs.md#_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\nval widgets = arrayOf(\n        \"Row 1\",\n        Icons.Filled.ArrowDownward,\n        Icons.Filled.ArrowUpward,\n        \"Row 2\",\n        Icons.Filled.ArrowDownward,\n        Icons.Filled.ArrowUpward\n    )\n\n    LazyVerticalGrid (\n        columns = GridCells.Fixed(3),\n        contentPadding = PaddingValues(8.dp)\n    ) {\n        items(widgets) { i ->\n            if (i is String) {\n                Text(i)\n            } else {\n                Image(i as ImageVector, \"\")\n            }\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Setting Drag Start Behavior in Flutter\nDESCRIPTION: This code snippet demonstrates how to set the `dragStartBehavior` property of a `GestureDetector` to `DragStartBehavior.down`. This ensures that the `onStart` callback is invoked at the touch down location instead of after a certain number of pixels have been dragged. This is useful for reverting to the old drag gesture behavior.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/release-notes/release-notes-1.2.1.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nGestureDectector( \n  dragStartBehavior: DragStartBehavior.down,\n  onVerticalDragDown: myDragDown \n  onVerticalDragEnd: myDragEnd, \n  onVerticalDragStart: myDragStart, \n  onVerticalDragUpdate: myDragUpdate, \n  onVerticalDragCancel: myDragCancel, \n  onHorizontalDragDown: myDragDown \n  onHorizontalDragEnd: myDragEnd, \n  onHorizontalDragStart: myDragStart, \n  onHorizontalDragUpdate: myDragUpdate, \n  onHorizontalDragCancel: myDragCancel, \n// Other fields… \n```\n\n----------------------------------------\n\nTITLE: Initializing List of Items Dart\nDESCRIPTION: This snippet initializes a list of 20 strings named `items`. Each string is formatted as 'Item ${i + 1}', where i is the index of the element. This list serves as the data source for the swipe-to-dismiss example.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/gestures/dismissible.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nfinal items = List<String>.generate(20, (i) => 'Item ${i + 1}');\n```\n\n----------------------------------------\n\nTITLE: Add Activity Declaration in XML\nDESCRIPTION: This code adds an `<activity>` declaration for `SecondActivity` in `android/app/src/main/AndroidManifest.xml`. This declares the new activity to the Android system and specifies its exported status and theme.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/platform-integration/android/compose-activity.md#_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\">\n    <application\n        android:label=\"flutter_android_activity\"\n        android:name=\"${applicationName}\"\n        android:icon=\"@mipmap/ic_launcher\">\n\n       // START COPYING HERE\n        <activity android:name=\".SecondActivity\" android:exported=\"true\" android:theme=\"@style/LaunchTheme\"></activity>\n       // END COPYING HERE\n\n       <activity android:name=\".MainActivity\" …></activity>\n      …\n</manifest>\n```\n\n----------------------------------------\n\nTITLE: Adding HTTP Package Dependency in Flutter\nDESCRIPTION: This console command demonstrates how to add the `http` package as a dependency to a Flutter project using `flutter pub add`. This is a necessary step to use the `http` package for making HTTP requests in Flutter applications.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/react-native-devs.md#_snippet_48\n\nLANGUAGE: console\nCODE:\n```\n$ flutter pub add http\n```\n\n----------------------------------------\n\nTITLE: Running Flutter Tests\nDESCRIPTION: This command executes the Flutter tests defined within the project. Running tests ensures that the application's functionality works as expected and helps to identify and fix bugs.\nSOURCE: https://github.com/flutter/website/blob/main/examples/animation/animate2/README.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nflutter test\n```\n\n----------------------------------------\n\nTITLE: Groovy Configuration for Including Deferred Components in settings.gradle\nDESCRIPTION: This Groovy snippet illustrates how to include deferred components in the `android/settings.gradle` file. It adds the deferred components as includes, ensuring they are part of the Android project. The example includes `boxComponent`, `circleComponent`, and `assetComponent`.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/perf/deferred-components.md#_snippet_15\n\nLANGUAGE: groovy\nCODE:\n```\ninclude ':app', ':boxComponent', ':circleComponent', ':assetComponent'\n...\n```\n\n----------------------------------------\n\nTITLE: Updating ThemeData Color Properties in Flutter (Dart)\nDESCRIPTION: This snippet shows the updated code after migrating from deprecated ThemeData color properties. It illustrates the usage of ThemeData.colorScheme for error and background colors, and BottomAppBarTheme for bottomAppBarColor.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/3-19-deprecations.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nvar myTheme = ThemeData(\n  //...\n  colorScheme: ColorScheme(\n    /// ...\n    error: Colors.red,\n    background: Colors.blue,\n  ),\n  bottomAppBarTheme: BottomAppBarTheme(\n    color: Colors.purple,\n  ),\n  //...\n);\nvar errorColor = myTheme.colorScheme.error;\nvar backgroundColor = myTheme.colorScheme.background;\nvar bottomAppBarColor = myTheme.bottomAppBarTheme.color;\nvar toggleableActiveColor = Colors.orange;\n```\n\n----------------------------------------\n\nTITLE: Create Flutter Module (Console)\nDESCRIPTION: Creates a new Flutter module project using the `flutter create` command with the `-t module` flag, specifying the organization (`--org`) and module name. This command generates a Flutter module project, including an `.android/` folder that can be used to run the module as a standalone application and as a wrapper for embedding the Flutter module into an Android library.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/add-to-app/android/project-setup.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\ncd some/path/\nflutter create -t module --org com.example flutter_module\n```\n\n----------------------------------------\n\nTITLE: Adding FlutterFragment with new FlutterEngine - Java\nDESCRIPTION: This Java snippet demonstrates how to add a `FlutterFragment` to an existing Android `Activity`. It retrieves the `FragmentManager`, checks for an existing `FlutterFragment`, and creates a new one if needed, adding it to a container within the `Activity`'s layout. It assumes a FrameLayout exists with an ID of R.id.fragment_container.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/add-to-app/android/add-flutter-fragment.md#_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\npublic class MyActivity extends FragmentActivity {\n    // Define a tag String to represent the FlutterFragment within this\n    // Activity's FragmentManager. This value can be whatever you'd like.\n    private static final String TAG_FLUTTER_FRAGMENT = \"flutter_fragment\";\n\n    // Declare a local variable to reference the FlutterFragment so that you\n    // can forward calls to it later.\n    private FlutterFragment flutterFragment;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\n        // Inflate a layout that has a container for your FlutterFragment.\n        // For this example, assume that a FrameLayout exists with an ID of\n        // R.id.fragment_container.\n        setContentView(R.layout.my_activity_layout);\n\n        // Get a reference to the Activity's FragmentManager to add a new\n        // FlutterFragment, or find an existing one.\n        FragmentManager fragmentManager = getSupportFragmentManager();\n\n        // Attempt to find an existing FlutterFragment,\n        // in case this is not the first time that onCreate() was run.\n        flutterFragment = (FlutterFragment) fragmentManager\n            .findFragmentByTag(TAG_FLUTTER_FRAGMENT);\n\n        // Create and attach a FlutterFragment if one does not exist.\n        if (flutterFragment == null) {\n            flutterFragment = FlutterFragment.createDefault();\n\n            fragmentManager\n                .beginTransaction()\n                .add(\n                    R.id.fragment_container,\n                    flutterFragment,\n                    TAG_FLUTTER_FRAGMENT\n                )\n                .commit();\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Podspec file for shared iOS and macOS\nDESCRIPTION: This Ruby snippet shows how to update the podspec file for a Flutter plugin when using shared iOS and macOS implementations. It sets the dependencies and deployment targets for both platforms.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/packages-and-plugins/developing-packages.md#_snippet_7\n\nLANGUAGE: Ruby\nCODE:\n```\ns.ios.dependency 'Flutter'\ns.osx.dependency 'FlutterMacOS'\ns.ios.deployment_target = '11.0'\ns.osx.deployment_target = '10.14'\n```\n\n----------------------------------------\n\nTITLE: Building Debug APK with Flutter\nDESCRIPTION: This command builds a debug APK for the Flutter application using the Flutter CLI. The `--debug` flag ensures that the APK is built with debugging enabled, and is required to include `package:integration_test`.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/testing/integration-tests/index.md#_snippet_16\n\nLANGUAGE: console\nCODE:\n```\n$ flutter build apk --debug\n```\n\n----------------------------------------\n\nTITLE: Migrating from `MediaQuery.of` with default `nullOk` (false) in Dart\nDESCRIPTION: This snippet shows how to convert a `MediaQuery.of` call with the default `nullOk` value (false) to use the non-nullable return value of `MediaQuery.of` directly. It also highlights the removal of unnecessary `!` operators or `?` operators and fallback values after the call, making the code cleaner and safer.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/eliminating-nullok-parameters.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nMediaQueryData data = MediaQuery.of(context)!; // nullOk false by default.\nMediaQueryData? data = MediaQuery.of(context); // nullOk false by default.\n```\n\nLANGUAGE: dart\nCODE:\n```\nMediaQueryData data = MediaQuery.of(context); // No ! or ? operator here now.\n```\n\n----------------------------------------\n\nTITLE: Disable Swift Package Manager YAML\nDESCRIPTION: This code snippet shows how to disable the use of the Swift Package Manager (SPM) in a Flutter iOS or macOS project by setting the `disable-swift-package-manager` field to `true` in the `pubspec.yaml` file.  This can be useful in certain situations where SPM conflicts with other dependency management systems.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/tools/pubspec.md#_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nflutter:\n  disable-swift-package-manager: true\n```\n\n----------------------------------------\n\nTITLE: Installing Rosetta 2 on macOS\nDESCRIPTION: This command installs Rosetta 2 using the software update tool. Rosetta 2 is a translation process that allows Intel-based applications to run on Apple silicon Macs. The `--agree-to-license` flag automatically accepts the license agreement.\nSOURCE: https://github.com/flutter/website/blob/main/src/_includes/docs/install/reqs/macos/apple-silicon.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ sudo softwareupdate --install-rosetta --agree-to-license\n```\n\n----------------------------------------\n\nTITLE: Creating the Menu Widget in Flutter\nDESCRIPTION: This code snippet defines a stateful Flutter widget called `Menu` that displays a list of titles and a 'Get Started' button in a static layout. It serves as the foundation upon which the staggered animations will be built.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/effects/staggered-menu-animation.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nclass Menu extends StatefulWidget {\n  const Menu({super.key});\n\n  @override\n  State<Menu> createState() => _MenuState();\n}\n\nclass _MenuState extends State<Menu> {\n  static const _menuTitles = [\n    'Declarative Style',\n    'Premade Widgets',\n    'Stateful Hot Reload',\n    'Native Performance',\n    'Great Community',\n  ];\n\n  @override\n  Widget build(BuildContext context) {\n    return Container(\n      color: Colors.white,\n      child: Stack(\n        fit: StackFit.expand,\n        children: [_buildFlutterLogo(), _buildContent()],\n      ),\n    );\n  }\n\n  Widget _buildFlutterLogo() {\n    // TODO: We'll implement this later.\n    return Container();\n  }\n\n  Widget _buildContent() {\n    return Column(\n      crossAxisAlignment: CrossAxisAlignment.start,\n      children: [\n        const SizedBox(height: 16),\n        ..._buildListItems(),\n        const Spacer(),\n        _buildGetStartedButton(),\n      ],\n    );\n  }\n\n  List<Widget> _buildListItems() {\n    final listItems = <Widget>[];\n    for (var i = 0; i < _menuTitles.length; ++i) {\n      listItems.add(\n        Padding(\n          padding: const EdgeInsets.symmetric(horizontal: 36, vertical: 16),\n          child: Text(\n            _menuTitles[i],\n            textAlign: TextAlign.left,\n            style: const TextStyle(fontSize: 24, fontWeight: FontWeight.w500),\n          ),\n        ),\n      );\n    }\n    return listItems;\n  }\n\n  Widget _buildGetStartedButton() {\n    return SizedBox(\n      width: double.infinity,\n      child: Padding(\n        padding: const EdgeInsets.all(24),\n        child: ElevatedButton(\n          style: ElevatedButton.styleFrom(\n            shape: const StadiumBorder(),\n            backgroundColor: Colors.blue,\n            padding: const EdgeInsets.symmetric(horizontal: 48, vertical: 14),\n          ),\n          onPressed: () {},\n          child: const Text(\n            'Get Started',\n            style: TextStyle(color: Colors.white, fontSize: 22),\n          ),\n        ),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Define Weather Enum Dart\nDESCRIPTION: Defines a simple `Weather` enum in Dart, representing different weather conditions.  This enum is comparable to the Swift version and is used to demonstrate asynchronous weather fetching in Dart.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/dart-swift-concurrency.md#_snippet_5\n\nLANGUAGE: Dart\nCODE:\n```\nenum Weather { rainy, windy, sunny }\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Project from Example\nDESCRIPTION: This command creates a new Flutter project from existing example code. The `--no-overwrite` flag ensures that existing files are not overwritten, preventing data loss. $PROJECT represents the relative path to the example project directory.\nSOURCE: https://github.com/flutter/website/blob/main/examples/state_mgmt/simple/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nflutter create --no-overwrite $PROJECT\n```\n\n----------------------------------------\n\nTITLE: Mark script as executable (Console)\nDESCRIPTION: Marks the `ci_post_clone.sh` script as executable in the git repository.  This allows the script to be executed by Xcode Cloud during the build process. It's a necessary step after adding the script to the repository.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/deployment/cd.md#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ git add --chmod=+x ios/ci_scripts/ci_post_clone.sh\n```\n\n----------------------------------------\n\nTITLE: Building macOS app\nDESCRIPTION: This command builds the Flutter application for macOS using the flutter build command. After the build, it opens the macOS Runner.xcworkspace in Xcode to prepare for distribution.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/platform-integration/macos/building.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nflutter build macos\nopen macos/Runner.xcworkspace\n```\n\n----------------------------------------\n\nTITLE: Deleting Todos in TodoListViewModel in Dart\nDESCRIPTION: This code snippet presents the `_delete` method inside the `TodoListViewModel`. This method uses the `TodoRepository` to remove a ToDo item using its ID and updates the `_todos` list by removing the item and then notifying the UI.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/app-architecture/design-patterns/sql.md#_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nFuture<Result<void>> _delete(int id) async {\n  try {\n    final result = await _todoRepository.deleteTodo(id);\n    switch (result) {\n      case Ok<void>>():\n        _todos.removeWhere((todo) => todo.id == id);\n        return Result.ok(null);\n      case Error():\n        return Result.error(result.error);\n    }\n  } on Exception catch (e) {\n    return Result.error(e);\n  } finally {\n    notifyListeners();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using `maintainHintSize` after migration in Dart\nDESCRIPTION: This code snippet demonstrates the usage of `InputDecoration.maintainHintSize` after the migration. It shows a TextField with an InputDecoration that sets `maintainHintSize` to false, replacing the deprecated `maintainHintHeight`.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/deprecate-inputdecoration-maintainhintheight.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nTextField(\n  indicator: InputDecoration(\n    maintainHintSize: false,\n  ),\n),\n```\n\n----------------------------------------\n\nTITLE: Displaying Text with Text Widget - Dart\nDESCRIPTION: Illustrates how to use the `Text` widget in Flutter to display text.  The `Text` widget takes a string as its primary argument, which represents the text to be displayed.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/layout/index.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nText('Hello World')\n```\n\n----------------------------------------\n\nTITLE: Creating a Flutter Plugin Package (Kotlin)\nDESCRIPTION: This command creates a Flutter plugin project named 'hello' configured for Android (Kotlin), iOS, Linux, macOS, and Windows platforms. It uses the specified organization 'com.example'.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/packages-and-plugins/developing-packages.md#_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n$ flutter create --org com.example --template=plugin --platforms=android,ios,linux,macos,windows -a kotlin hello\n```\n\n----------------------------------------\n\nTITLE: Using Navigator.pop() with boolean return value Dart\nDESCRIPTION: This snippet shows how to use `Navigator.pop()` and check its return value to determine if there are more routes in the stack. This pattern is being replaced because `Navigator.pop()` no longer returns a boolean value. This requires the Flutter SDK before version 1.17.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/route-navigator-refactoring.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nTextField(\n  onTap: () {\n    if (Navigator.pop(context))\n      print('There still is at least one route after pop');\n    else\n      print('Oops! No more routes.');\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Using MaterialLocalizations Shorthand Dart\nDESCRIPTION: This snippet showcases how the MaterialLocalizations.of() shorthand getter is used to access localized values such as tooltip text. It simplifies access to localized strings within Flutter widgets.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/accessibility-and-internationalization/internationalization.md#_snippet_30\n\nLANGUAGE: Dart\nCODE:\n```\ntooltip: MaterialLocalizations.of(context).backButtonTooltip,\n```\n\n----------------------------------------\n\nTITLE: Add Flutter Test Dependency - YAML\nDESCRIPTION: This snippet shows how to add the `flutter_test` dependency to the `dev_dependencies` section of a `pubspec.yaml` file. This is required for running widget tests in Flutter.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/release-notes/release-notes-0.0.21-1.0.0.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ndev_dependencies:\n  flutter_test:\n    sdk: flutter\n```\n\n----------------------------------------\n\nTITLE: Migrating ShortcutManager.handleKeypress - Before\nDESCRIPTION: Demonstrates the initial implementation of `ShortcutManager.handleKeypress` using `RawKeyEvent`.  This example shows how to extend `ShortcutManager` before the migration to `KeyEvent`. Note the use of `event.repeat` to check for repeated keys.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/shortcut-key-event-migration.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nclass _MyShortcutManager extends ShortcutManager {\n  @override\n  KeyEventResult handleKeypress(BuildContext context, RawKeyEvent event) {\n    if (event is! RawKeyDownEvent) {\n      return KeyEventResult.ignored;\n    }\n    if (event.repeat) {\n      // (Do something with repeated keys.)\n    }\n    // ... (your implementation here)\n    return KeyEventResult.handled;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing FlutterAppLifeCycleProvider in Objective-C (Header)\nDESCRIPTION: This Objective-C header file defines the `AppDelegate` class, implementing `UIApplicationDelegate` and `FlutterAppLifeCycleProvider`. It declares properties for the `UIWindow` and `FlutterEngine`, essential components for integrating Flutter into a native iOS application.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/add-to-app/ios/add-flutter-screen.md#_snippet_12\n\nLANGUAGE: Objective-C\nCODE:\n```\n@import Flutter;\n@import UIKit;\n@import FlutterPluginRegistrant;\n\n@interface AppDelegate : UIResponder <UIApplicationDelegate, FlutterAppLifeCycleProvider>\n@property (strong, nonatomic) UIWindow *window;\n@property (nonatomic,strong) FlutterEngine *flutterEngine;\n@end\n```\n\n----------------------------------------\n\nTITLE: Navigating to Example App Directory Shell\nDESCRIPTION: This snippet shows how to navigate to the example app directory of a Flutter plugin.  It is a common step in verifying plugin functionality.\nSOURCE: https://github.com/flutter/website/blob/main/src/_includes/docs/swift-package-manager/migrate-objective-c-plugin.md#_snippet_14\n\nLANGUAGE: sh\nCODE:\n```\ncd path/to/plugin/example/\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables Permanently (Unix-like)\nDESCRIPTION: Example commands to append environment variable settings (PUB_HOSTED_URL, FLUTTER_STORAGE_BASE_URL, and PATH) to a shell configuration file (e.g., ~/.zprofile).  This makes the settings persistent across terminal sessions.\nSOURCE: https://github.com/flutter/website/blob/main/src/_includes/docs/community/china/os-settings.md#_snippet_7\n\nLANGUAGE: Shell\nCODE:\n```\ncat <<EOT >> ~/.zprofile\n{{envvarset}}PUB_HOSTED_URL=\"https://pub.flutter-io.cn\"\n{{envvarset}}FLUTTER_STORAGE_BASE_URL=\"https://storage.flutter-io.cn\"\n{{setpath}}\nEOT\n```\n\n----------------------------------------\n\nTITLE: Generate FFI Bindings\nDESCRIPTION: This console command uses the `ffigen` package to generate Dart bindings from a C header file. It uses a configuration file named `ffigen.yaml` to specify the header file and other generation options.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/packages-and-plugins/developing-packages.md#_snippet_23\n\nLANGUAGE: console\nCODE:\n```\n$ dart run ffigen --config ffigen.yaml\n```\n\n----------------------------------------\n\nTITLE: Fade-in Animation with Animated API in React Native\nDESCRIPTION: This snippet demonstrates a fade-in animation using the Animated API in React Native. It defines a FadeInView component that uses Animated.timing to gradually change the opacity of a Text component from 0 to 1 over a specified duration. The animation starts when the component mounts.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/react-native-devs.md#_snippet_57\n\nLANGUAGE: JavaScript\nCODE:\n```\n// React Native\nconst FadeInView = ({ style, children }) => {\n  const fadeAnim = useRef(new Animated.Value(0)).current;\n\n  useEffect(() => {\n    Animated.timing(fadeAnim, {\n      toValue: 1,\n      duration: 10000\n    }).start();\n  }, []);\n\n  return (\n    <Animated.View style={`{{ ...style, opacity: fadeAnim }}`}>\n      {children}\n    </Animated.View>\n  );\n};\n    ...\n<FadeInView>\n  <Text> Fading in </Text>\n</FadeInView>\n    ...\n```\n\n----------------------------------------\n\nTITLE: C/C++/Objective-C visibility attributes\nDESCRIPTION: This code shows how to add attributes to exported symbol declarations in C/C++/Objective-C to ensure they are visible to Dart. These attributes prevent the linker from discarding the symbols during link-time optimization.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/platform-integration/macos/c-interop.md#_snippet_1\n\nLANGUAGE: objc\nCODE:\n```\nextern \"C\" /* <= C++ only */ __attribute__((visibility(\"default\"))) __attribute__((used))\n```\n\n----------------------------------------\n\nTITLE: Adding http package dependency Flutter\nDESCRIPTION: This command adds the `http` package as a dependency to the Flutter project using `flutter pub add`. The `http` package is used to make network requests.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/uikit-devs.md#_snippet_29\n\nLANGUAGE: console\nCODE:\n```\nflutter pub add http\n```\n\n----------------------------------------\n\nTITLE: Example Flutter Attach Output\nDESCRIPTION: This snippet presents the expected output when the flutter attach command is executed successfully. It displays information about syncing files, hot reload/restart options, the Observatory debugger URL, and options to detach or quit the debugger.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/add-to-app/debugging.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nSyncing files to device iPhone 15 Pro...\n 7,738ms (!)\n\nTo hot reload the changes while running, press \"r\".\nTo hot restart (and rebuild state). press \"R\".\nAn Observatory debugger and profiler on iPhone 15 Pro is available at:\nhttp://127.0.0.1:65525/EXmCgco5zjo=/\nFor a more detailed help message, press \"h\".\nTo detach, press \"d\"; to quit, press \"q\".\n```\n\n----------------------------------------\n\nTITLE: Adding a custom \"Send email\" button to the context menu in Flutter\nDESCRIPTION: This code snippet demonstrates how to add a 'Send email' button to the default context menu in a Flutter TextField when an email address is selected. It uses the contextMenuBuilder parameter to customize the context menu and adds a new ContextMenuButtonItem to the list of button items.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/context-menus.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nTextField(\n  contextMenuBuilder: (context, editableTextState) {\n    final TextEditingValue value = editableTextState.textEditingValue;\n    final List<ContextMenuButtonItem> buttonItems =\n        editableTextState.contextMenuButtonItems;\n    if (isValidEmail(value.selection.textInside(value.text))) {\n      buttonItems.insert(\n          0,\n          ContextMenuButtonItem(\n            label: 'Send email',\n            onPressed: () {\n              ContextMenuController.removeAny();\n              Navigator.of(context).push(_showDialog(context));\n            },\n          ));\n    }\n    return AdaptiveTextSelectionToolbar.buttonItems(\n      anchors: editableTextState.contextMenuAnchors,\n      buttonItems: buttonItems,\n    );\n  },\n)\n```\n\n----------------------------------------\n\nTITLE: Overflowing Container Inside UnconstrainedBox in Flutter\nDESCRIPTION: This snippet demonstrates what happens when a Container, sized by UnconstrainedBox, is too large to fit within the screen. This results in an overflow warning because the Container's size exceeds the available screen space.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/layout/constraints.md#_snippet_13\n\nLANGUAGE: dart\nCODE:\n```\nUnconstrainedBox(\n   child: Container(color: red, width: 4000, height: 50));\n```\n\n----------------------------------------\n\nTITLE: Animate opacity with AnimatedOpacity - Add AnimatedOpacity\nDESCRIPTION: This snippet demonstrates how to wrap a Column widget within an AnimatedOpacity widget to enable animation of the opacity property. This setup is a crucial first step in achieving a fade-in effect for the wrapped content.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/codelabs/implicit-animations.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n  @override\n  Widget build(BuildContext context) {\n    return ListView(children: <Widget>[\n      Image.network(owlUrl),\n      TextButton(\n        child: const Text(\n          'Show Details',\n          style: TextStyle(color: Colors.blueAccent),\n        ),\n        onPressed: () => {},\n      ),\n-     const Column(\n-       children: [\n-         Text('Type: Owl'),\n-         Text('Age: 39'),\n-         Text('Employment: None'),\n-       ],\n-     ),\n+     AnimatedOpacity(\n+       child: const Column(\n+         children: [\n+           Text('Type: Owl'),\n+           Text('Age: 39'),\n+           Text('Employment: None'),\n+         ],\n+       ),\n+     ),\n    ]);\n  }\n```\n\n----------------------------------------\n\nTITLE: Setting Background Color and Text Style Using Theme in Flutter\nDESCRIPTION: This Dart code snippet demonstrates how to access and use the application's theme data in Flutter to style a `Container` and `Text` widget.  It accesses the `secondaryHeaderColor` for the background and `titleLarge` from `textTheme` for the text style.  It requires the Flutter SDK and assumes a `MaterialApp` is present in the widget tree to provide the theme.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/resources/architectural-overview.md#_snippet_3\n\nLANGUAGE: Dart\nCODE:\n```\nContainer(\n  color: Theme.of(context).secondaryHeaderColor,\n  child: Text(\n    'Text with a background color',\n    style: Theme.of(context).textTheme.titleLarge,\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Invoking an Action with Actions.of in Dart\nDESCRIPTION: This code snippet demonstrates how to invoke an action using `Actions.of` after it has been found. It checks if the action exists (is not null) and then invokes it using the `invokeAction` method of the `Actions` widget obtained from the context. The `SelectAllIntent` is passed as an argument.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/interactivity/actions-and-shortcuts.md#_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nObject? result;\nif (selectAll != null) {\n  result = Actions.of(\n    context,\n  ).invokeAction(selectAll, const SelectAllIntent());\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a new Flutter FFI plugin\nDESCRIPTION: This command creates a new Flutter plugin project with FFI support, targeting Android, iOS, macOS, Windows, and Linux platforms.  It sets up the basic project structure including C/C++ source code.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/platform-integration/android/c-interop.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ flutter create --platforms=android,ios,macos,windows,linux --template=plugin_ffi native_add\n$ cd native_add\n```\n\n----------------------------------------\n\nTITLE: OverflowBar Usage (After Migration) - Dart\nDESCRIPTION: This code snippet shows how to use the OverflowBar widget as a replacement for the deprecated ButtonBar. It includes the usage of Padding, alignment, spacing and overflowSpacing to achieve similar layout as ButtonBar. MainAxisAlignment.end aligns the buttons to the end of the layout.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/deprecate-buttonbar.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nPadding(\n  padding: const EdgeInsets.all(8.0),\n  child: OverflowBar(\n    alignment: MainAxisAlignment.end,\n    spacing: 8.0,\n    overflowSpacing: 8.0,\n    children: <Widget>[\n      TextButton(child: const Text('Button 1'), onPressed: () {}),\n      TextButton(child: const Text('Button 2'), onPressed: () {}),\n      TextButton(child: const Text('Button 3'), onPressed: () {}),\n    ],\n  ),\n),\n```\n\n----------------------------------------\n\nTITLE: Initializing LXD Container Manager\nDESCRIPTION: This command initializes the LXD container manager, configuring it for use in building snaps. The default answers to the prompts are suitable for most development environments. LXD is required for creating isolated build environments for snaps.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/deployment/linux.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ sudo lxd init\nWould you like to use LXD clustering? (yes/no) [default=no]:\nDo you want to configure a new storage pool? (yes/no) [default=yes]:\nName of the new storage pool [default=default]:\nName of the storage backend to use (btrfs, dir, lvm, zfs, ceph) [default=zfs]:\nCreate a new ZFS pool? (yes/no) [default=yes]:\nWould you like to use an existing empty disk or partition? (yes/no) [default=no]:\nSize in GB of the new loop device (1GB minimum) [default=5GB]:\nWould you like to connect to a MAAS server? (yes/no) [default=no]:\nWould you like to create a new local network bridge? (yes/no) [default=yes]:\nWhat should the new bridge be called? [default=lxdbr0]:\nWhat IPv4 address should be used? (CIDR subnet notation, \"auto\" or \"none\") [default=auto]:\nWhat IPv6 address should be used? (CIDR subnet notation, \"auto\" or \"none\") [default=auto]:\nWould you like LXD to be available over the network? (yes/no) [default=no]:\nWould you like stale cached images to be updated automatically? (yes/no) [default=yes]\nWould you like a YAML \"lxd init\" preseed to be printed? (yes/no) [default=no]:\n```\n\n----------------------------------------\n\nTITLE: Deferred Components Example YAML\nDESCRIPTION: This code snippet shows an example of how to define deferred components in the `pubspec.yaml` file. It defines two components: `box_component` with a single Dart library and `gallery_feature` with a Dart library and an asset. This demonstrates how to modularize an app and load specific features and assets on demand.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/tools/pubspec.md#_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nflutter:\n  deferred-components:\n    - name: box_component\n      libraries:\n        - package:testdeferredcomponents/box.dart\n    - name: gallery_feature\n      libraries:\n        - package:testdeferredcomponents/gallery_feature.dart\n      assets:\n        - assets/gallery_images/gallery_feature.png\n```\n\n----------------------------------------\n\nTITLE: UnconstrainedBox with Infinite Width in Flutter\nDESCRIPTION: This example shows UnconstrainedBox with a Container that has infinite width. Flutter cannot render widgets with infinite sizes, resulting in an error during rendering.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/layout/constraints.md#_snippet_46\n\nLANGUAGE: dart\nCODE:\n```\nUnconstrainedBox(\n  child: Container(color: Colors.red, width: double.infinity, height: 100),\n)\n```\n\n----------------------------------------\n\nTITLE: Project Structure: Awesome Package\nDESCRIPTION: This shows the directory structure of the `awesome_package` Flutter library, highlighting the location of the font files within the `lib/fonts` directory.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/design/package-fonts.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nawesome_package/\n  lib/\n    awesome_package.dart\n    fonts/\n      Raleway-Regular.ttf\n      Raleway-Italic.ttf\n```\n\n----------------------------------------\n\nTITLE: MaterialApp Theme Setup (All Platforms) - Dart\nDESCRIPTION: Shows how to apply the same page transition builder (FadeUpwardsPageTransitionsBuilder) to all TargetPlatform values. This approach ensures consistent transitions across different platforms.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/page-transition-replaced-by-ZoomPageTransitionBuilder.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nMaterialApp(\n  theme: ThemeData(\n    pageTransitionsTheme: PageTransitionsTheme(\n      builders: Map<TargetPlatform, PageTransitionsBuilder>.fromIterable(\n        TargetPlatform.values,\n        value: (dynamic _) => const FadeUpwardsPageTransitionsBuilder(),\n      ),\n    ),\n  ),\n)\n\n```\n\n----------------------------------------\n\nTITLE: Complete Flutter Integration Test Example\nDESCRIPTION: This is the complete integration test example. It builds a simple app, scrolls through a list, and records performance using the integration_test and flutter_test packages.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/testing/integration/profiling.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\nimport 'package:flutter_test/flutter_test.dart';\nimport 'package:integration_test/integration_test.dart';\nimport 'package:your_package/main.dart';\n\nvoid main() {\n  final binding = IntegrationTestWidgetsFlutterBinding.ensureInitialized();\n\n  testWidgets('Counter increments smoke test', (tester) async {\n    // Build our app and trigger a frame.\n    await tester.pumpWidget(\n      MyApp(items: List<String>.generate(10000, (i) => 'Item $i')),\n    );\n\n    final listFinder = find.byType(Scrollable);\n    final itemFinder = find.byKey(const ValueKey('item_50_text'));\n\n    await binding.traceAction(() async {\n      // Scroll until the item to be found appears.\n      await tester.scrollUntilVisible(\n        itemFinder,\n        500.0,\n        scrollable: listFinder,\n      );\n    }, reportKey: 'scrolling_timeline');\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Flutter Windows Show Bug: Code After Migration (C++)\nDESCRIPTION: This code snippet shows the updated code in `windows/runner/flutter_window.cpp` after the migration. It adds a call to `flutter_controller_->ForceRedraw()` to ensure the window is shown, even if the first frame has already completed. No dependencies required, it is part of the Flutter Windows application setup.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/windows-show-window-migration.md#_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\nflutter_controller_->engine()->SetNextFrameCallback([&]() {\n  this->Show();\n});\n\n// Flutter can complete the first frame before the \"show window\" callback is\n// registered. The following call ensures a frame is pending to ensure the\n// window is shown. It is a no-op if the first frame hasn't completed yet.\nflutter_controller_->ForceRedraw();\n```\n\n----------------------------------------\n\nTITLE: Update Xcode project file (project.pbxproj)\nDESCRIPTION: This snippet shows how to modify the `project.pbxproj` file in an Xcode project to update the paths to the Flutter and App frameworks to account for different build modes. It replaces the hardcoded `Release` string with `$(CONFIGURATION)` within the file.\nSOURCE: https://github.com/flutter/website/blob/main/src/_includes/docs/add-to-app/ios-project/link-and-embed.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n312885572C1A441C009F74FF /* Flutter.xcframework */ = {\n isa = PBXFileReference;\n expectedSignature = \"AppleDeveloperProgram:S8QB4VV633:FLUTTER.IO LLC\";\n lastKnownFileType = wrapper.xcframework;\n name = Flutter.xcframework;\n path = Flutter/[!Release!]/Flutter.xcframework;\n sourceTree = \"<group>\";\n};\n312885582C1A441C009F74FF /* App.xcframework */ = {\n isa = PBXFileReference;\n lastKnownFileType = wrapper.xcframework;\n name = App.xcframework;\n path = Flutter/[!Release!]/App.xcframework;\n sourceTree = \"<group>\";\n};\n```\n\nLANGUAGE: text\nCODE:\n```\n312885572C1A441C009F74FF /* Flutter.xcframework */ = {\n isa = PBXFileReference;\n expectedSignature = \"AppleDeveloperProgram:S8QB4VV633:FLUTTER.IO LLC\";\n lastKnownFileType = wrapper.xcframework;\n name = Flutter.xcframework;\n path = [!\"!]Flutter/[!$(CONFIGURATION)!]/Flutter.xcframework[!\"!];\n sourceTree = \"<group>\";\n};\n312885582C1A441C009F74FF /* App.xcframework */ = {\n isa = PBXFileReference;\n lastKnownFileType = wrapper.xcframework;\n name = App.xcframework;\n path = [!\"!]Flutter/[!$(CONFIGURATION)!]/App.xcframework[!\"!];\n sourceTree = \"<group>\";\n};\n```\n\n----------------------------------------\n\nTITLE: Running Flutter Application\nDESCRIPTION: This command runs the Flutter application on a connected device or emulator.\nSOURCE: https://github.com/flutter/website/blob/main/examples/layout/lakes/step2/README.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nflutter run\n```\n\n----------------------------------------\n\nTITLE: Migrating Default Typography - Dart\nDESCRIPTION: This code illustrates how to migrate from the deprecated default `Typography` constructor (which returned the 2014 Material Design specification) to the new `Typography.material2018()` constructor (or the default, which now also reflects the 2018 spec). It also shows how to use `Typography.material2014()` to access the former 2014 specification.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/2-2-deprecations.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\n// Formerly returned 2014 TextStyle spec\nTypography();\n```\n\nLANGUAGE: dart\nCODE:\n```\n// Use 2018 TextStyle spec, either by default or explicitly.\nTypography();\nTypography.material2018();\n\n// Use 2014 spec from former API\nTypography.material2014();\n```\n\n----------------------------------------\n\nTITLE: MouseRegion Code After Migration (Dart)\nDESCRIPTION: This code snippet demonstrates the updated implementation of `MyMouseRegion` after the migration. The `didUnmountRenderObject` method is overridden to prevent the onExit callback from being executed when the widget is unmounted. This addresses the issue of calling setState on an unmounted widget.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/mouse-tracker-no-longer-attaches-annotations.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nclass MyMouseRegion extends SingleChildRenderObjectWidget {\n  const MyMouseRegion({this.onHoverChange});\n\n  final ValueChanged<bool> onHoverChange;\n\n  @override\n  RenderMouseRegion createRenderObject(BuildContext context) {\n    return RenderMouseRegion(\n      onEnter: (_) { onHoverChange(true); },\n      onExit: (_) { onHoverChange(false); },\n    );\n  }\n\n  @override\n  void updateRenderObject(BuildContext context, RenderMouseRegion renderObject) {\n    renderObject\n      ..onEnter = (_) { onHoverChange(true); }\n      ..onExit = (_) { onHoverChange(false); };\n  }\n\n  @override\n  void didUnmountRenderObject(RenderMouseRegion renderObject) {\n    renderObject\n      ..onExit = onHoverChange == null ? null : (_) {};\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Set Run Script Title in Xcode\nDESCRIPTION: This snippet sets the title of a Run Script action in Xcode build schemes. It is crucial for identifying the purpose of the script during the build process.\nSOURCE: https://github.com/flutter/website/blob/main/src/_includes/docs/swift-package-manager/migrate-macos-project-manually.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nRun Prepare Flutter Framework Script\n```\n\n----------------------------------------\n\nTITLE: Managing State with remember in Compose (Kotlin)\nDESCRIPTION: Demonstrates managing local state in Jetpack Compose using the remember API and mutableIntStateOf. A counter is incremented when the FilledIconButton is clicked, and the UI is updated to reflect the new count. The Scaffold provides basic screen layout.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/compose-devs.md#_snippet_14\n\nLANGUAGE: kotlin\nCODE:\n```\nScaffold(\n   content = { padding ->\n      var _counter = remember {  mutableIntStateOf(0) }\n      Column(horizontalAlignment = Alignment.CenterHorizontally,\n         verticalArrangement = Arrangement.Center,\n         modifier = Modifier.fillMaxSize().padding(padding)) {\n            Text(_counter.value.toString())\n            Spacer(modifier = Modifier.height(16.dp))\n            FilledIconButton (onClick = { -> _counter.intValue += 1 }) {\n               Text(\"+\")\n            }\n      }\n   }\n)\n```\n\n----------------------------------------\n\nTITLE: ImageProvider resolve Override (Before) Dart\nDESCRIPTION: This code represents the `ImageProvider` implementation before the migration. The `resolve` method was typically overridden to create a stream, set up error handling, interact with the `ImageCache`, and call `obtainKey`/`load`. Overriding `resolve` could become problematic when composing multiple `ImageProvider`s.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/image-cache-and-provider.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nclass MyImageProvider extends ImageProvider<Object> {\n  @override\n  ImageStream resolve(ImageConfiguration configuration) {\n    // create stream\n    // set up error handling\n    // interact with ImageCache\n    // call obtainKey/load, etc.\n  }\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Entry Placeholder in XML\nDESCRIPTION: This XML snippet demonstrates how to define a placeholder for an Entry element in Xamarin.Forms. The Placeholder property is used to display hint text within the entry field when it's empty.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/xamarin-forms-devs.md#_snippet_53\n\nLANGUAGE: xml\nCODE:\n```\n<Entry Placeholder=\"This is a hint\">\n```\n\n----------------------------------------\n\nTITLE: Running Flutter Command in Verbose Mode\nDESCRIPTION: This command executes a Flutter command with the `--verbose` flag, providing detailed output that can be helpful for diagnosing issues related to the Flutter tool itself. The output should be attached to the GitHub issue.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/resources/bug-reports.md#_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nflutter <command> --verbose\n```\n\n----------------------------------------\n\nTITLE: Create MyWidget Class Dart\nDESCRIPTION: Defines a `MyWidget` StatelessWidget that displays a title and a message. This widget is used as an example for demonstrating widget testing in Flutter.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/testing/widget/introduction.md#_snippet_1\n\nLANGUAGE: Dart\nCODE:\n```\nclass MyWidget extends StatelessWidget {\n  const MyWidget({super.key, required this.title, required this.message});\n\n  final String title;\n  final String message;\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: 'Flutter Demo',\n      home: Scaffold(\n        appBar: AppBar(title: Text(title)),\n        body: Center(child: Text(message)),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Firestore Controller - Dart\nDESCRIPTION: This snippet shows how to initialize the FirestoreController within the `initState()` method of the `_PlaySessionScreenState` class. It retrieves the FirebaseFirestore instance from the context and, if available, creates a new FirestoreController with the Firestore instance and the board state.  If the Firestore instance is not available, a warning is logged.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/games/firestore-multiplayer.md#_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nfinal firestore = context.read<FirebaseFirestore?>();\nif (firestore == null) {\n  _log.warning(\n    \"Firestore instance wasn't provided. \"\n    'Running without _firestoreController.',\n  );\n} else {\n  _firestoreController = FirestoreController(\n    instance: firestore,\n    boardState: _boardState,\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating ThemeData text selection properties in Dart\nDESCRIPTION: This snippet demonstrates how to migrate from the deprecated `useTextSelectionTheme`, `textSelectionColor`, `cursorColor`, and `textSelectionHandleColor` properties of `ThemeData` to using `TextSelectionThemeData`. It involves replacing the individual properties with a `TextSelectionThemeData` object within `ThemeData`, setting the corresponding properties within the theme data object.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/2-10-deprecations.md#_snippet_8\n\nLANGUAGE: Dart\nCODE:\n```\nThemeData(\n  useTextSelectionTheme: false,\n  textSelectionColor: Colors.blue,\n  cursorColor: Colors.green,\n  textSelectionHandleColor: Colors.red,\n);\n```\n\nLANGUAGE: Dart\nCODE:\n```\nThemeData(\n  textSelectionTheme: TextSelectionThemeData(\n    selectionColor: Colors.blue,\n    cursorColor: Colors.green,\n    selectionHandleColor: Colors.red,\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Customizing Chip Border Color after Migration Dart\nDESCRIPTION: Demonstrates how to customize the border color of a chip (specifically an ActionChip) after the Material 3 tokens update.  It uses `ChipTheme` to override the default `side` property and explicitly set the border color to `ColorScheme.outline`, effectively reverting to the previous appearance. Requires context from the surrounding Widget tree.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/material-design-3-token-update.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nfinal chip = ChipTheme(\n  data: ChipThemeData(\n    side: BorderSide(\n      color: Theme.of(context).colorScheme.outline\n    ),\n  ),\n  child: ActionChip(\n    label: const Text('action chip'), \n    onPressed: () {}\n  )\n);\n```\n\n----------------------------------------\n\nTITLE: Running Flutter Integration Tests in Console\nDESCRIPTION: This command runs the integration tests located in the specified Dart file. It identifies connected devices, allowing the user to select a target device for test execution. The output shows the progress and results of the tests.\nSOURCE: https://github.com/flutter/website/blob/main/src/_includes/docs/test/integration/linux-example.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ flutter test integration_test/app_test.dart\n\nConnected devices:\n\nLinux (desktop) • linux  • linux-x64      • Ubuntu 22.04.4 LTS 6.5.0-35-generic\nChrome (web)    • chrome • web-javascript • Google Chrome 104.0.5112.101\n\n[1]: Linux (linux)\n[2]: Chrome (chrome)\n\nPlease choose one (or \"q\" to quit): 1\n\n00:00 +0: /path/to/counter_app/integration_test/app_test.dart     B\n00:16 +0: /path/to/counter_app/integration_test/app_test.dart\n\n✓ Built build/linux/x64/debug/bundle/counter_app\n```\n\n----------------------------------------\n\nTITLE: Define download states for the button in Dart\nDESCRIPTION: This code defines an enum `DownloadStatus` representing the possible states of the download button (notDownloaded, fetchingDownload, downloading, downloaded).  The `DownloadButton` widget is updated to accept a `DownloadStatus` and a `Duration` for animating transitions between states. Currently, it returns an empty `SizedBox`.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/effects/download-button.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nenum DownloadStatus { notDownloaded, fetchingDownload, downloading, downloaded }\n\n@immutable\nclass DownloadButton extends StatelessWidget {\n  const DownloadButton({\n    super.key,\n    required this.status,\n    this.transitionDuration = const Duration(milliseconds: 500),\n  });\n\n  final DownloadStatus status;\n  final Duration transitionDuration;\n\n  @override\n  Widget build(BuildContext context) {\n    // TODO: We'll add more to this later.\n    return const SizedBox();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Cupertino Theme Data Override in Flutter\nDESCRIPTION: This code snippet demonstrates how to override the default Cupertino theme using the `cupertinoOverrideTheme` property of `ThemeData`. It allows developers to provide a Cupertino-specific theme override, such as brightness and primary color. This ensures that Cupertino-specific widgets adhere to a customized theme distinct from the overall Material theme.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/release-notes/release-notes-1.2.1.md#_snippet_0\n\nLANGUAGE: Dart\nCODE:\n```\nWidget build(BuildContext context) { \n  // Set theme data for override in the CupertinoThemeData's constructor \n  Theme.of(context).cupertinoOverrideTheme = CupertinoThemeData(  \n    brightness: Brightness.dark,  \n    primaryColor: Color(0xFF42A5F5) \n  ); \n  return Text( \n    'Example', \n    style: Theme.of(context).textTheme.title, \n  ); \n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Widget Insertion in Flutter\nDESCRIPTION: This code snippet illustrates how a `ColoredBox` widget is conditionally inserted into the widget tree based on the `color` property of a `Container`. It shows how widgets can dynamically modify the widget tree during the build process.  If the color is not null, it creates a ColoredBox with the specified color and the original child as its child.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/resources/architectural-overview.md#_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nif (color != null)\n  current = ColoredBox(color: color!, child: current);\n```\n\n----------------------------------------\n\nTITLE: Update Xcode Project with Signing Profiles\nDESCRIPTION: This command updates the Xcode project settings to use the fetched code signing profiles. This ensures that the app is signed with the correct certificates and profiles.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/deployment/ios.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nxcode-project use-profiles\n```\n\n----------------------------------------\n\nTITLE: Installing Snap Package Locally\nDESCRIPTION: This command installs the snap package locally for testing. The `--dangerous` flag is required because the snap is not yet signed by the Snap Store.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/deployment/linux.md#_snippet_13\n\nLANGUAGE: console\nCODE:\n```\n$ sudo snap install ./super-cool-app_0.1.0_amd64.snap --dangerous\n```\n\n----------------------------------------\n\nTITLE: Deferred Components Structure YAML\nDESCRIPTION: This code snippet shows the structure of the `deferred-components` field in the `pubspec.yaml` file for Flutter Android apps. It defines a deferred component with a unique name, a list of Dart libraries, and a list of asset paths.  Deferred components allow for reducing the initial download size of an Android app by loading certain features or assets on demand.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/tools/pubspec.md#_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nflutter:\n  deferred-components:\n    name: component_name\n      libraries:\n        - string_expression\n        [...]\n      assets:\n        - string_expression\n        [...]\n    [...]\n```\n\n----------------------------------------\n\nTITLE: Running Flutter Tests\nDESCRIPTION: Executes the Flutter tests in the current project. This verifies the functionality of the application and ensures that it behaves as expected.\nSOURCE: https://github.com/flutter/website/blob/main/examples/animation/animate3/README.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nflutter test\n```\n\n----------------------------------------\n\nTITLE: Display Image from File (Dart)\nDESCRIPTION: Creates an Image widget to display a picture from a file stored on the device. The path to the image file is passed to the File constructor.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/plugins/picture-using-camera.md#_snippet_6\n\nLANGUAGE: Dart\nCODE:\n```\nImage.file(File('path/to/my/picture.png'));\n```\n\n----------------------------------------\n\nTITLE: TextScaler Abstract Class Definition Dart\nDESCRIPTION: Defines an abstract class `TextScaler` with a `scale` method for scaling font sizes and a deprecated `textScaleFactor` getter for backward compatibility.  The `scale` method takes a font size as input (double) and returns the scaled font size (double). The `textScaleFactor` getter is deprecated and will be removed in a future version of Flutter.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/deprecate-textscalefactor.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nabstract class TextScaler { \n  double scale(double fontSize);\n  double get textScaleFactor; // Deprecated. \n}\n```\n\n----------------------------------------\n\nTITLE: Setting Platform Properties Before Migration (TestWindow)\nDESCRIPTION: This code snippet demonstrates how to set platform-specific properties using `tester.binding.window` before the migration to `TestPlatformDispatcher`. It uses test setters to modify values like accessibility features, 24-hour format, and locale.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/window-singleton.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\ntestWidgets('test name', (WidgetTester tester) async {\n  tester.binding.window.accessibilityFeaturesTestValue = FakeAccessibilityFeatures.allOn;\n  tester.binding.window.alwaysUse24HourFormatTestValue = false;\n  tester.binding.window.brieflyShowPasswordTestValue = true;\n  tester.binding.window.defaultRouteNameTestValue = '/test';\n  tester.binding.window.initialLifecycleStateTestValue = 'painting';\n  tester.binding.window.localesTestValue = <Locale>[const Locale('en-us'), const Locale('ar-jo')];\n  tester.binding.window.localeTestValue = const Locale('ar-jo');\n  tester.binding.window.nativeSpellCheckServiceDefinedTestValue = false;\n  tester.binding.window.platformBrightnessTestValue = Brightness.dark;\n  tester.binding.window.semanticsEnabledTestValue = true;\n  tester.binding.window.textScaleFactorTestValue = 2.0;\n});\n```\n\n----------------------------------------\n\nTITLE: Add Gradle Plugin Dependency in Groovy\nDESCRIPTION: This code adds the Android Gradle plugin dependency within the `buildscript` block in `android/build.gradle`. It specifies the classpath for the Android Gradle plugin, which is required for building the Android project.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/platform-integration/android/compose-activity.md#_snippet_5\n\nLANGUAGE: groovy\nCODE:\n```\nbuildscript {\n    dependencies {\n        // Replace with the latest version.\n        classpath 'com.android.tools.build:gradle:8.1.1'\n    }\n    repositories {\n        google()\n        mavenCentral()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying a Progress Indicator during Initialization (JS)\nDESCRIPTION: This snippet demonstrates how to display a progress indicator to the user during the Flutter web app initialization process.  It uses the `onEntrypointLoaded` callback to update the DOM with messages indicating the current stage of initialization. It includes the `flutter_js` and `flutter_build_config` tokens.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/platform-integration/web/initialization.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n{% raw %}{{flutter_js}}{% endraw %}\n{% raw %}{{flutter_build_config}}{% endraw %}\n\nconst loading = document.createElement('div');\ndocument.body.appendChild(loading);\nloading.textContent = \"Loading Entrypoint...\";\n_flutter.loader.load({\n  onEntrypointLoaded: async function(engineInitializer) {\n    loading.textContent = \"Initializing engine...\";\n    const appRunner = await engineInitializer.initializeEngine();\n\n    loading.textContent = \"Running app...\";\n    await appRunner.runApp();\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring MaterialApp for localization (Dart)\nDESCRIPTION: This snippet demonstrates how to configure the `MaterialApp` widget for localization by specifying `localizationsDelegates` and `supportedLocales`. It includes delegates for Material, Widgets, and Cupertino localizations and defines English and Spanish as supported locales.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/accessibility-and-internationalization/internationalization.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nreturn const MaterialApp(\n  title: 'Localizations Sample App',\n  localizationsDelegates: [\n    GlobalMaterialLocalizations.delegate,\n    GlobalWidgetsLocalizations.delegate,\n    GlobalCupertinoLocalizations.delegate,\n  ],\n  supportedLocales: [\n    Locale('en'), // English\n    Locale('es'), // Spanish\n  ],\n  home: MyHomePage(),\n);\n```\n\n----------------------------------------\n\nTITLE: Analyzing Dart Code\nDESCRIPTION: This command uses the Dart analyzer to identify potential issues, errors, and style violations in the Dart code within the project.\nSOURCE: https://github.com/flutter/website/blob/main/examples/layout/card_and_stack/README.md#_snippet_2\n\nLANGUAGE: Dart\nCODE:\n```\ndart analyze\n```\n\n----------------------------------------\n\nTITLE: Navigating to Plugin Directory Shell\nDESCRIPTION: This snippet shows how to navigate to the top-level directory of a Flutter plugin. It's a common step when performing plugin-related tasks.\nSOURCE: https://github.com/flutter/website/blob/main/src/_includes/docs/swift-package-manager/migrate-objective-c-plugin.md#_snippet_16\n\nLANGUAGE: sh\nCODE:\n```\ncd path/to/plugin/\n```\n\n----------------------------------------\n\nTITLE: Regenerate macOS Project Configuration\nDESCRIPTION: This command regenerates the macOS project's configuration files after updating the minimum deployment target to ensure compatibility with Swift Package Manager plugins.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/packages-and-plugins/swift-package-manager/for-app-developers.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nflutter build macos --config-only\n```\n\n----------------------------------------\n\nTITLE: Import HTTP Package in Dart\nDESCRIPTION: This import statement brings the `http` package into your Dart file, allowing you to use its classes and functions for making HTTP requests. It's aliased as `http` for easier use.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/networking/fetch-data.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:http/http.dart' as http;\n```\n\n----------------------------------------\n\nTITLE: Accessing Current Position in Shader - GLSL\nDESCRIPTION: This snippet demonstrates how to access the local coordinates for the current fragment being evaluated within a GLSL shader. It imports the `flutter/runtime_effect.glsl` library and calls the `FlutterFragCoord` function to retrieve the current position.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/design/graphics/fragment-shaders.md#_snippet_6\n\nLANGUAGE: glsl\nCODE:\n```\n#include <flutter/runtime_effect.glsl>\n\nvoid main() {\n  vec2 currentPos = FlutterFragCoord().xy;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding resValue for app name customization in build.gradle.kts\nDESCRIPTION: This Kotlin snippet shows how to customize the app name for different product flavors. It uses the `resValue` property to define a string resource named `app_name` with different values for the 'staging' and 'production' flavors. This allows to distinguish different flavors of the app easily in app launchers or app lists.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/deployment/flavors.md#_snippet_4\n\nLANGUAGE: Kotlin\nCODE:\n```\nandroid {\n    ...\n    flavorDimensions += \"default\"\n    productFlavors {\n        create(\"staging\") {\n            dimension = \"default\"\n            resValue(\n                type = \"string\",\n                name = \"app_name\",\n                value = \"Flavors staging\")\n            applicationIdSuffix = \".staging\"\n        }\n        create(\"production\") {\n            dimension = \"default\"\n            resValue(\n                type = \"string\",\n                name = \"app_name\",\n                value = \"Flavors production\")\n            applicationIdSuffix = \".production\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: GLSL Uniform Declarations\nDESCRIPTION: This snippet shows example uniform declarations in a GLSL fragment program. Uniforms are used to configure the shader and can be set from Dart code. It declares a float, a sampler2D, a vec2, and a vec4 uniform.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/design/graphics/fragment-shaders.md#_snippet_4\n\nLANGUAGE: glsl\nCODE:\n```\nuniform float uScale;\nuniform sampler2D uTexture;\nuniform vec2 uMagnitude;\nuniform vec4 uColor;\n```\n\n----------------------------------------\n\nTITLE: Missing cmdline-tools component troubleshooting\nDESCRIPTION: This snippet displays an error message from `flutter doctor` indicating that the `cmdline-tools` component is missing from the Android toolchain. The suggested solution is to install it using the SDK Manager in Android Studio.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/install/help.md#_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n[!] Android toolchain - develop for Android devices (Android SDK version 33.0.2) \n    • Android SDK at C:\\Users\\My PC\\AppData\\Local\\Android\\sdk \n    X cmdline-tools component is missing \n```\n\n----------------------------------------\n\nTITLE: Refresh Code Excerpts - Bash\nDESCRIPTION: This command updates the code excerpts in the Markdown files to match the corresponding `.dart` files. It should be executed from the root of the `website` directory.\nSOURCE: https://github.com/flutter/website/blob/main/README.md#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n./dash_site refresh-excerpts\n```\n\n----------------------------------------\n\nTITLE: Getting Help on Flutter Build Command\nDESCRIPTION: This command displays the help documentation for the `flutter build` command, which lists the supported target platforms and options available for building Flutter applications.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/testing/build-modes.md#_snippet_2\n\nLANGUAGE: terminal\nCODE:\n```\nflutter help build\n```\n\n----------------------------------------\n\nTITLE: Code After Migration: Using collate in Dart\nDESCRIPTION: This code snippet demonstrates the new way of using AnimationSheetBuilder, which directly uses collate to combine the frames into a single image and then performs golden file matching. This simplifies the process and produces smaller image files.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/animation-sheet-builder-display.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\n  testWidgets('Indeterminate CircularProgressIndicator', (WidgetTester tester) async {\n    final AnimationSheetBuilder animationSheet = AnimationSheetBuilder(frameSize: const Size(40, 40));\n\n    await tester.pumpFrames(animationSheet.record(\n      const Directionality(\n        textDirection: TextDirection.ltr,\n        child: Padding(\n          padding: EdgeInsets.all(4),\n          child: CircularProgressIndicator(),\n        ),\n      ),\n    ), const Duration(seconds: 2));\n\n    await expectLater(\n      animationSheet.collate(20),\n      matchesGoldenFile('material.circular_progress_indicator.indeterminate.png'),\n    );\n  }, skip: isBrowser); // https://github.com/flutter/flutter/issues/42767\n```\n\n----------------------------------------\n\nTITLE: Project Structure for Flutter iOS Frameworks\nDESCRIPTION: This shows the expected directory structure after building the iOS frameworks. It includes Debug, Profile, and Release configurations, each containing Flutter.xcframework, App.xcframework, FlutterPluginRegistrant.xcframework (if plugins are used), and individual plugin frameworks.  The warning highlights the need to use frameworks from the same directory to avoid runtime crashes.\nSOURCE: https://github.com/flutter/website/blob/main/src/_includes/docs/add-to-app/ios-project/embed-framework-directory-tree.md#_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n/path/to/MyApp/\n└── Flutter/\n    ├── Debug/\n    │   ├── Flutter.xcframework\n    │   ├── App.xcframework\n    │   ├── FlutterPluginRegistrant.xcframework (only if you have plugins with iOS platform code)\n    │   └── example_plugin.xcframework (each plugin is a separate framework)\n    ├── Profile/\n    │   ├── Flutter.xcframework\n    │   ├── App.xcframework\n    │   ├── FlutterPluginRegistrant.xcframework\n    │   └── example_plugin.xcframework\n    └── Release/\n        ├── Flutter.xcframework\n        ├── App.xcframework\n        ├── FlutterPluginRegistrant.xcframework\n        └── example_plugin.xcframework\n```\n\n----------------------------------------\n\nTITLE: Add NSAppTransportSecurity in Info.plist for iOS\nDESCRIPTION: This XML snippet adds the NSAppTransportSecurity configuration to the Info.plist file for iOS. This allows the app to load arbitrary loads, which is necessary for streaming videos from the internet.  This should be used during development and might require more specific configurations for production.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/plugins/play-video.md#_snippet_2\n\nLANGUAGE: XML\nCODE:\n```\n<key>NSAppTransportSecurity</key>\n<dict>\n  <key>NSAllowsArbitraryLoads</key>\n  <true/>\n</dict>\n```\n\n----------------------------------------\n\nTITLE: Flutter Main Function Example\nDESCRIPTION: This Dart code represents the main function, the entry point of a Flutter application. It simply prints 'Hello, this is the main function.' to the console.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/react-native-devs.md#_snippet_14\n\nLANGUAGE: Dart\nCODE:\n```\n// Dart\nvoid main() {\n  print('Hello, this is the main function.');\n}\n```\n\n----------------------------------------\n\nTITLE: Navigate to ExtractArgumentsScreen using pushNamed in Dart\nDESCRIPTION: Demonstrates navigating to the `ExtractArgumentsScreen` using `Navigator.pushNamed()` and passing arguments via the `arguments` parameter. It creates an ElevatedButton that pushes the named route when pressed.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/navigation/navigate-with-arguments.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\n// A button that navigates to a named route.\n// The named route extracts the arguments\n// by itself.\nElevatedButton(\n  onPressed: () {\n    // When the user taps the button,\n    // navigate to a named route and\n    // provide the arguments as an optional\n    // parameter.\n    Navigator.pushNamed(\n      context,\n      ExtractArgumentsScreen.routeName,\n      arguments: ScreenArguments(\n        'Extract Arguments Screen',\n        'This message is extracted in the build method.',\n      ),\n    );\n  },\n  child: const Text('Navigate to screen that extracts arguments'),\n),\n```\n\n----------------------------------------\n\nTITLE: FittedBox Example in Flutter\nDESCRIPTION: This example showcases FittedBox scaling its child Text widget to fill the available space. The FittedBox scales the Text to fit within its bounds, effectively resizing the text to fit the screen width.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/layout/constraints.md#_snippet_48\n\nLANGUAGE: dart\nCODE:\n```\nconst FittedBox(child: Text('Some Example Text.'))\n```\n\n----------------------------------------\n\nTITLE: Adding Localization Delegate to MaterialApp\nDESCRIPTION: This code snippet demonstrates how to add a custom `LocalizationsDelegate` (in this case, `NnMaterialLocalizations.delegate`) to the `localizationsDelegates` list of a `MaterialApp`.  It also shows how to specify the supported locales for the application.  This ensures that the app will use the custom localizations when the user's device is set to one of the supported locales.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/accessibility-and-internationalization/internationalization.md#_snippet_37\n\nLANGUAGE: dart\nCODE:\n```\nconst MaterialApp(\n  localizationsDelegates: [\n    GlobalWidgetsLocalizations.delegate,\n    GlobalMaterialLocalizations.delegate,\n    NnMaterialLocalizations.delegate, // Add the newly created delegate\n  ],\n  supportedLocales: [Locale('en', 'US'), Locale('nn')],\n  home: Home(),\n),\n```\n\n----------------------------------------\n\nTITLE: Configure Dependency Resolution Management in settings.gradle (Groovy)\nDESCRIPTION: Adds the `dependencyResolutionManagement` block to the `settings.gradle` file, configuring the repository mode to `PREFER_SETTINGS` and specifying the repositories to use (Google, Maven Central). This centralizes repository management and is the recommended approach for Gradle 7+.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/add-to-app/android/project-setup.md#_snippet_5\n\nLANGUAGE: Groovy\nCODE:\n```\ndependencyResolutionManagement {\n   repositoriesMode = RepositoriesMode.PREFER_SETTINGS\n   repositories {\n       google()\n       mavenCentral()\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Test Before Migration Dart\nDESCRIPTION: This snippet demonstrates a test case before the migration, where a `CheckboxMenuButton` is used directly within a `MaterialApp` without being associated with a menu role. This would result in an accessibility violation.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/menu-semantics-roles.md#_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nawait tester.pumpWidget(\n  MaterialApp(\n    home: CheckboxMenuButton(\n      onPressed: () {},\n      child: const Text('Menu Button'),\n    ),\n  )\n);\n```\n\n----------------------------------------\n\nTITLE: Add Maven repositories in settings.gradle (Groovy)\nDESCRIPTION: Adds the necessary Maven repositories in `settings.gradle` for resolving Flutter dependencies. It includes Google's Maven repository, Maven Central, a local Maven repository pointing to the AAR output, and a custom Maven repository pointing to Flutter's storage.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/add-to-app/android/project-setup.md#_snippet_9\n\nLANGUAGE: Groovy\nCODE:\n```\ndependencyResolutionManagement {\n    repositoriesMode = RepositoriesMode.PREFER_SETTINGS\n    repositories {\n        google()\n        mavenCentral()\n\n        // Add the new repositories starting on the next line...\n        maven {\n            url = uri(\"some/path/flutter_module/build/host/outputs/repo\")\n            // This is relative to the location of the build.gradle file\n            // if using a relative path.\n        }\n\n        maven {\n            url = uri(\"https://storage.googleapis.com/download.flutter.io\")\n        }\n        // ...to before this line  \n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Dart Localization Files from ARB (Windows) - Console\nDESCRIPTION: This command is a Windows-specific version to generate Dart localization files (`intl_messages_<locale>.dart` and `intl_messages_all.dart`) from the specified ARB files. Since Windows doesn't support wildcard file matching, it explicitly lists all ARB files. It disables deferred loading and uses the specified Dart file (`lib/main.dart`).\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/accessibility-and-internationalization/internationalization.md#_snippet_42\n\nLANGUAGE: console\nCODE:\n```\n$ dart run intl_translation:generate_from_arb \\\n        --output-dir=lib/l10n --no-use-deferred-loading \\\n        lib/main.dart \\\n        lib/l10n/intl_en.arb lib/l10n/intl_fr.arb lib/l10n/intl_messages.arb\n```\n\n----------------------------------------\n\nTITLE: Tooltip Widget Tree Example (Before)\nDESCRIPTION: This code shows the widget tree structure for a Tooltip widget embedded in a ListView within an Overlay, before the accessibility change. It demonstrates how the tooltip is structured with surrounding Text widgets and how it's placed within the Overlay.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/tooltip-semantics-order.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nDirectionality(\n  textDirection: TextDirection.ltr,\n  child: Overlay(\n    initialEntries: <OverlayEntry>[\n      OverlayEntry(\n        builder: (BuildContext context) {\n          return ListView(\n            children: <Widget>[\n              const Text('before'),\n              Tooltip(\n                key: tooltipKey,\n                showDuration: const Duration(days: 365),\n                message: 'message',\n                child: const Text('child'),\n              ),\n              const Text('after'),\n            ],\n          );\n        },\n      ),\n    ],\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Import Firestore and Firebase Core in Dart\nDESCRIPTION: This snippet imports the necessary packages for using Cloud Firestore and Firebase Core in a Dart file. It includes the `cloud_firestore` package for interacting with the Firestore database, the `firebase_core` package for initializing Firebase, and the `firebase_options.dart` which contains the Firebase configuration. This step is crucial to access Firebase services within your Flutter application.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/games/firestore-multiplayer.md#_snippet_0\n\nLANGUAGE: Dart\nCODE:\n```\nimport 'package:cloud_firestore/cloud_firestore.dart';\nimport 'package:firebase_core/firebase_core.dart';\n\nimport 'firebase_options.dart';\n```\n\n----------------------------------------\n\nTITLE: Dumping Focus Tree in Flutter\nDESCRIPTION: This code snippet demonstrates how to call the `debugDumpFocusTree()` function in a Flutter application. This function prints the focus tree to the console, which is useful for debugging focus or shortcut issues. The code defines a simple Flutter app with a button that, when pressed, calls the `debugDumpFocusTree()` function.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/testing/code-debugging.md#_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\n\nvoid main() {\n  runApp(const MaterialApp(home: AppHome()));\n}\n\nclass AppHome extends StatelessWidget {\n  const AppHome({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return Material(\n      child: Center(\n        child: TextButton(\n          onPressed: () {\n            debugDumpFocusTree();\n          },\n          child: const Text('Dump Focus Tree'),\n        ),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Navigating to the Project Directory\nDESCRIPTION: Changes the current working directory to the newly created Flutter project directory. This is a necessary step before running subsequent Flutter commands.\nSOURCE: https://github.com/flutter/website/blob/main/examples/animation/animate5/README.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ncd $PROJECT\n```\n\n----------------------------------------\n\nTITLE: Declaring Font Assets in pubspec.yaml\nDESCRIPTION: This code snippet demonstrates how to declare custom font assets from a Flutter package in the `pubspec.yaml` file.  It configures the 'Raleway' font family to use regular and italic font styles from the `awesome_package`.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/design/package-fonts.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nflutter:\n  fonts:\n    - family: Raleway\n      fonts:\n        - asset: packages/awesome_package/fonts/Raleway-Regular.ttf\n        - asset: packages/awesome_package/fonts/Raleway-Italic.ttf\n          style: italic\n```\n\n----------------------------------------\n\nTITLE: Running Flutter app\nDESCRIPTION: This command runs the Flutter application on a connected device or emulator. It compiles the Dart code and deploys the app to the target platform.\nSOURCE: https://github.com/flutter/website/blob/main/examples/layout/pavlova/README.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nflutter run\n```\n\n----------------------------------------\n\nTITLE: Configure ABI Filters in Gradle (Groovy)\nDESCRIPTION: Configures the `abiFilters` within the `defaultConfig` block in the `build.gradle` file to limit the supported architectures for the Android application to those supported by Flutter (armeabi-v7a, arm64-v8a, x86_64). This prevents runtime crashes due to missing `libflutter.so` for unsupported architectures.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/add-to-app/android/project-setup.md#_snippet_1\n\nLANGUAGE: Groovy\nCODE:\n```\nandroid {\n    // ...\n    defaultConfig {\n        ndk {\n            // Filter for architectures supported by Flutter\n            abiFilters \"armeabi-v7a\", \"arm64-v8a\", \"x86_64\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring AndroidX in Flutter Module\nDESCRIPTION: This configuration enables AndroidX support for a Flutter module that is added to an existing Android app.  It requires adding the `androidX: true` line to the `pubspec.yaml` file within the `module` section. After the change, `flutter clean` is needed.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/androidx-migration.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nmodule:\n   ...\n    androidX: true # Add this line.\n```\n\n----------------------------------------\n\nTITLE: Liquid Template for OS and Channel Assignment\nDESCRIPTION: This snippet uses Liquid templating to assign values to the `os` and `channel` variables by converting the input `include.os` and `include.channel` to lowercase. These variables are later used to construct a unique ID for the download table.\nSOURCE: https://github.com/flutter/website/blob/main/src/_includes/docs/release/archive-release.md#_snippet_0\n\nLANGUAGE: Liquid\nCODE:\n```\n{% assign os = include.os | downcase -%}\n{% assign channel = include.channel | downcase -%}\n```\n\n----------------------------------------\n\nTITLE: OverflowBar Widget Usage (After Migration) - Dart\nDESCRIPTION: This code snippet demonstrates how to use the OverflowBar widget directly, replacing the ButtonBarTheme widget. The alignment property is set directly on the OverflowBar.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/deprecate-buttonbar.md#_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nOverflowBar(\n  alignment: MainAxisAlignment.center,\n  children: <Widget>[\n    // ...\n  ],\n),\n```\n\n----------------------------------------\n\nTITLE: Change Default Shell to Zsh (macOS)\nDESCRIPTION: This command uses the `chsh` utility to change the default shell to Zsh on macOS. `which zsh` determines the path to the Zsh executable, and `-s` option sets this path as the new default shell.\nSOURCE: https://github.com/flutter/website/blob/main/src/_includes/docs/install/reqs/macos/zsh-config.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n$ chsh -s `which zsh`\n```\n\n----------------------------------------\n\nTITLE: JSON Pluralization Definition\nDESCRIPTION: This code snippet shows the structure of a JSON definition for pluralization within an `.arb` file. It includes the different plural forms (=0, =1, other) and a placeholder `count` to indicate the number. The `format` attribute specifies that the number should be formatted as 'compact'.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/accessibility-and-internationalization/internationalization.md#_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n\"nWombats\": \"{count, plural, =0{no wombats} =1{1 wombat} other{{count} wombats}}\",\n\"@nWombats\": {\n  \"description\": \"A plural message\",\n  \"placeholders\": {\n    \"count\": {\n      \"type\": \"num\",\n      \"format\": \"compact\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting a Custom ScrollBehavior - Before Migration - Flutter\nDESCRIPTION: Demonstrates the basic MaterialApp setup before the multitouch drag strategy changes. This configuration lacks explicit scroll behavior control.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/multi-touch-scrolling.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nMaterialApp(\n  // ...\n);\n```\n\n----------------------------------------\n\nTITLE: Handling ViewModel Changes in Flutter\nDESCRIPTION: This code defines the `_onViewModelChange` method, which listens for changes in the view model. If the `error` state is true, it displays a `SnackBar` with an error message using `ScaffoldMessenger`.  The `error` flag is reset to false to prevent repeated error messages.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/app-architecture/design-patterns/optimistic-state.md#_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\n/// Listen to ViewModel changes.\nvoid _onViewModelChange() {\n  // If the subscription action has failed\n  if (widget.viewModel.error) {\n    // Reset the error state\n    widget.viewModel.error = false;\n    // Show an error message\n    ScaffoldMessenger.of(\n      context,\n    ).showSnackBar(const SnackBar(content: Text('Failed to subscribe')));\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Flutter Dependencies using apt-get\nDESCRIPTION: This command installs the necessary packages to build Flutter applications on Linux using the apt-get package manager. It installs clang, cmake, git, ninja-build, pkg-config, libgtk-3-dev, liblzma-dev, and libstdc++-12-dev. These packages are required for compiling and linking Flutter applications, handling build configurations, and providing necessary development libraries.\nSOURCE: https://github.com/flutter/website/blob/main/src/_includes/docs/install/reqs/linux/install-desktop-tools.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ sudo apt-get install \\\n\tclang cmake git \\\n\tninja-build pkg-config \\\n\tlibgtk-3-dev liblzma-dev \\\n\tlibstdc++-12-dev\n```\n\n----------------------------------------\n\nTITLE: Building UI Using Cart Model - Recommended Approach\nDESCRIPTION: This snippet demonstrates how to build the UI based on the current state of the cart model. It retrieves the `cartModel` from the context and constructs the UI based on its state.  The widget is rebuilt when the cart's state changes, ensuring the UI always reflects the current data.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/data-and-backend/state-mgmt/simple.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\n// GOOD\nWidget build(BuildContext context) {\n  var cartModel = somehowGetMyCartModel(context);\n  return SomeWidget(\n    // Just construct the UI once, using the current state of the cart.\n    // ···\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: TextField Without MaterialLocalizations (Before Migration)\nDESCRIPTION: This code demonstrates a TextField widget used without a MaterialLocalizations provider.  Prior to Flutter 1.20, this would render without error. After 1.20, this throws an assertion error indicating the missing MaterialLocalizations. The missing MaterialLocalizations must be provided by an ancestor MaterialApp or Localizations Widget.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/text-field-material-localizations.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\n\nvoid main() => runApp(Foo());\n\nclass Foo extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return MediaQuery(\n      data: const MediaQueryData(),\n      child: Directionality(\n        textDirection: TextDirection.ltr,\n        child: Material(\n          child: TextField(),\n        ),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Dispose of banner ad in Flutter\nDESCRIPTION: This snippet demonstrates how to dispose of a banner ad to release resources. It's crucial to call `dispose()` when the `AdWidget` is removed from the widget tree or in the `BannerAdListener.onAdFailedToLoad()` callback to prevent memory leaks.  The `_bannerAd?.dispose()` ensures that `dispose()` is only called if `_bannerAd` is not null.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/plugins/google-mobile-ads.md#_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\n_bannerAd?.dispose();\n```\n\n----------------------------------------\n\nTITLE: Add Integration Test Dependency YAML\nDESCRIPTION: Adds the integration_test dependency to the dev_dependencies section of the pubspec.yaml file. This allows you to use the integration_test package in your Flutter project.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/flutter-driver-migration.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndev_dependencies:\n  integration_test:\n    sdk: flutter\n```\n\n----------------------------------------\n\nTITLE: Adding PrivacyInfo.xcprivacy Resource\nDESCRIPTION: This code snippet shows how to include a PrivacyInfo.xcprivacy file as a resource in the Package.swift file. It provides instructions on where to move the file and how to uncomment the resource declaration.\nSOURCE: https://github.com/flutter/website/blob/main/src/_includes/docs/swift-package-manager/migrate-swift-plugin.md#_snippet_3\n\nLANGUAGE: Swift\nCODE:\n```\n               resources: [\n                   // TODO: If your plugin requires a privacy manifest\n                   // (e.g. if it uses any required reason APIs), update the PrivacyInfo.xcprivacy file\n                   // to describe your plugin's privacy impact, and then uncomment this line.\n                   // For more information, see:\n                   // https://developer.apple.com/documentation/bundleresources/privacy_manifest_files\n                   [!.process(\"PrivacyInfo.xcprivacy\"),!]\n   \n                   // TODO: If you have other resources that need to be bundled with your plugin, refer to\n                   // the following instructions to add them:\n                   // https://developer.apple.com/documentation/xcode/bundling-resources-with-a-swift-package\n               ],\n```\n\n----------------------------------------\n\nTITLE: Federated platform package implementation\nDESCRIPTION: This YAML snippet illustrates how a platform package specifies which app-facing package it implements using the `implements` entry in the `pubspec.yaml` file. This example shows a Windows implementation for the `hello` plugin.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/packages-and-plugins/developing-packages.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nflutter:\n  plugin:\n    implements: hello\n    platforms:\n      windows:\n        pluginClass: HelloPlugin\n```\n\n----------------------------------------\n\nTITLE: Defining Library Type in Package.swift\nDESCRIPTION: This code snippet shows how to explicitly define the library type as static in the Package.swift file. It includes the `type: .static` parameter in the library definition.\nSOURCE: https://github.com/flutter/website/blob/main/src/_includes/docs/swift-package-manager/migrate-swift-plugin.md#_snippet_5\n\nLANGUAGE: Swift\nCODE:\n```\n      products: [\n          .library(name: \"plugin-name\", type: .static, targets: [\"plugin_name\"])\n      ],\n```\n\n----------------------------------------\n\nTITLE: Flutter Row Widget\nDESCRIPTION: Demonstrates creating a horizontal arrangement of widgets in Flutter using the Row widget. The mainAxisAlignment property positions the children along the main axis, which is horizontal for Row.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/swiftui-devs.md#_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nRow(\n  mainAxisAlignment: MainAxisAlignment.center,\n  children: [Icon(CupertinoIcons.globe), Text('Hello, world!')],\n),\n```\n\n----------------------------------------\n\nTITLE: Executing Flutter Tests\nDESCRIPTION: This command runs the Flutter tests associated with the project. These tests verify the correctness and functionality of the code. It helps ensure that the application behaves as expected.\nSOURCE: https://github.com/flutter/website/blob/main/examples/animation/animate4/README.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nflutter test\n```\n\n----------------------------------------\n\nTITLE: Creating a TodosScreen Widget in Dart\nDESCRIPTION: This code defines a `TodosScreen` widget that displays a list of todos. It's a `StatelessWidget` that takes a list of `Todo` objects as input. It builds a `Scaffold` with an `AppBar` and a `ListView.builder` in the body to display the list of todos.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/navigation/passing-data.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nclass TodosScreen extends StatelessWidget {\n  // Requiring the list of todos.\n  const TodosScreen({super.key, required this.todos});\n\n  final List<Todo> todos;\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: const Text('Todos')),\n      //passing in the ListView.builder\n      body: ListView.builder(\n        itemCount: todos.length,\n        itemBuilder: (context, index) {\n          return ListTile(title: Text(todos[index].title));\n        },\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: TextField maxLengthEnforced Replacement Dart\nDESCRIPTION: This snippet demonstrates the replacement of `maxLengthEnforced` with `maxLengthEnforcement` in `TextField`, `TextFormField`, and `CupertinoTextField` widgets.  It showcases how to migrate from boolean values to `MaxLengthEnforcement.enforce` and `MaxLengthEnforcement.none`. Requires the Flutter SDK.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/2-10-deprecations.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nconst TextField textField = TextField(maxLengthEnforced: true);\nconst TextField textField = TextField(maxLengthEnforced: false);\nfinal lengthEnforced = textField.maxLengthEnforced;\n\nconst TextFormField textFormField = TextFormField(maxLengthEnforced: true);\nconst TextFormField textFormField = TextFormField(maxLengthEnforced: false);\nfinal lengthEnforced = textFormField.maxLengthEnforced;\n\nconst CupertinoTextField cupertinoTextField = CupertinoTextField(maxLengthEnforced: true);\nconst CupertinoTextField cupertinoTextField = CupertinoTextField(maxLengthEnforced: false);\nfinal lengthEnforced = cupertinoTextField.maxLengthEnforced;\n```\n\n----------------------------------------\n\nTITLE: Define ParallaxFlowDelegate (Dart)\nDESCRIPTION: This snippet defines the `ParallaxFlowDelegate` class, which extends `FlowDelegate`. The `FlowDelegate` controls how its children are sized and where they are painted. The methods `getConstraintsForChild`, `paintChildren`, and `shouldRepaint` are overridden to customize the painting behavior.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/effects/parallax-scrolling.md#_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nclass ParallaxFlowDelegate extends FlowDelegate {\n  ParallaxFlowDelegate();\n\n  @override\n  BoxConstraints getConstraintsForChild(int i, BoxConstraints constraints) {\n    // TODO: We'll add more to this later.\n  }\n\n  @override\n  void paintChildren(FlowPaintingContext context) {\n    // TODO: We'll add more to this later.\n  }\n\n  @override\n  bool shouldRepaint(covariant FlowDelegate oldDelegate) {\n    // TODO: We'll add more to this later.\n    return true;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Flutter Plugin Package (Swift)\nDESCRIPTION: This command creates a Flutter plugin project named 'hello' configured for Android, iOS (Swift), Linux, macOS, and Windows platforms. It uses the specified organization 'com.example'.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/packages-and-plugins/developing-packages.md#_snippet_11\n\nLANGUAGE: console\nCODE:\n```\n$ flutter create --org com.example --template=plugin --platforms=android,ios,linux,macos,windows -i swift hello\n```\n\n----------------------------------------\n\nTITLE: Using TabBarThemeData.indicatorColor in Dart\nDESCRIPTION: This code snippet demonstrates the recommended way of setting the tab bar indicator color using TabBarThemeData.indicatorColor. It uses the component-specific theme to override the default indicator color. This approach should be used when ThemeData.useMaterial3 is set to false.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/deprecate-themedata-indicatorcolor.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\ntheme: ThemeData(\n  tabBarTheme: const TabBarThemeData(indicatorColor: Colors.red),\n  useMaterial3: false,\n),\n```\n\n----------------------------------------\n\nTITLE: Analyzing Dart Code\nDESCRIPTION: Analyzes the Dart code within the project for potential errors, warnings, and style issues. This helps to identify and fix problems before running the application.\nSOURCE: https://github.com/flutter/website/blob/main/examples/layout/container/README.md#_snippet_2\n\nLANGUAGE: Dart\nCODE:\n```\ndart analyze\n```\n\n----------------------------------------\n\nTITLE: Sampling a Texture in GLSL - Flutter\nDESCRIPTION: This shader code shows how to sample a texture in a fragment shader. It uses the `FlutterFragCoord` function to get the current fragment's coordinates, calculates UV coordinates based on the texture size, and then samples the texture using the `texture` function. The resulting color is assigned to `fragColor`.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/design/graphics/fragment-shaders.md#_snippet_7\n\nLANGUAGE: glsl\nCODE:\n```\n#include <flutter/runtime_effect.glsl>\n\nuniform vec2 uSize;\nuniform sampler2D uTexture;\n\nout vec4 fragColor;\n\nvoid main() {\n  vec2 uv = FlutterFragCoord().xy / uSize;\n  fragColor = texture(uTexture, uv);\n}\n```\n\n----------------------------------------\n\nTITLE: Resizing Images with cacheHeight and cacheWidth\nDESCRIPTION: This Flutter code snippet demonstrates how to use `cacheHeight` and `cacheWidth` parameters of the Image.asset constructor to resize images. The code defines a `ResizedImage` StatelessWidget that displays an image named 'dash.png' with a specified cache height and width, reducing memory usage. The original image is decoded to the given dimensions before being displayed.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/tools/devtools/inspector.md#_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nclass ResizedImage extends StatelessWidget {\n  const ResizedImage({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return Image.asset('dash.png', cacheHeight: 213, cacheWidth: 392);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: LayoutBuilder Before Migration - Missing setState\nDESCRIPTION: This Dart code demonstrates a Flutter widget that uses LayoutBuilder but is missing a setState call within the onPressed callback. This omission can cause the UI not to update correctly after the LayoutBuilder optimization.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/layout-builder-optimization.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\n\nvoid main() {\n  runApp(MyApp());\n}\n\nclass MyApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: 'Flutter Demo',\n      theme: ThemeData(\n        colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),\n      ),\n      home: Counter(),\n    );\n  }\n}\n\nclass Counter extends StatefulWidget {\n  Counter({Key key}) : super(key: key);\n\n  @override\n  _CounterState createState() => _CounterState();\n}\n\nclass _CounterState extends State<Counter> {\n  int _counter = 0;\n\n  @override\n  Widget build(BuildContext context) {\n    return Center(child: Container(\n      child: LayoutBuilder(\n        builder: (BuildContext context, BoxConstraints constraints) {\n          return _ResizingBox(\n            TextButton(\n                onPressed: () {\n                  _counter++;\n                },\n                child: Text('Increment Counter')),\n            Text(_counter.toString()),\n          );\n        },\n      ),\n    ));\n  }\n}\n\nclass _ResizingBox extends StatefulWidget {\n  _ResizingBox(this.child1, this.child2);\n\n  final Widget child1;\n  final Widget child2;\n\n  @override\n  State<StatefulWidget> createState() => _ResizingBoxState();\n}\n\nclass _ResizingBoxState extends State<_ResizingBox>\n    with SingleTickerProviderStateMixin {\n  Animation animation;\n\n  @override\n  void initState() {\n    super.initState();\n    animation = AnimationController(\n      vsync: this,\n      duration: const Duration(minutes: 1),\n    )\n      ..forward()\n      ..addListener(() {\n        setState(() {});\n      });\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Row(\n      mainAxisSize: MainAxisSize.min,\n      children: [\n        SizedBox(\n          width: 100 + animation.value * 100,\n          child: widget.child1,\n        ),\n        SizedBox(\n          width: 100 + animation.value * 100,\n          child: widget.child2,\n        ),\n      ],\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Install Codemagic CLI tools with pip3\nDESCRIPTION: Installs the Codemagic CLI tools using pip3. This is a prerequisite for using the CLI tools in subsequent steps.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/deployment/macos.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npip3 install codemagic-cli-tools\n```\n\n----------------------------------------\n\nTITLE: Fading a Widget with FadeTransition - Flutter\nDESCRIPTION: This code demonstrates how to create a fade animation for a widget in Flutter using `FadeTransition` and `AnimationController`. The `AnimationController` manages the animation's progress, while `CurvedAnimation` defines the animation's curve.  The `controller.forward()` method starts the animation when the `FloatingActionButton` is pressed.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/xamarin-forms-devs.md#_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\n\nvoid main() {\n  runApp(const FadeAppTest());\n}\n\nclass FadeAppTest extends StatelessWidget {\n  /// This widget is the root of your application.\n  const FadeAppTest({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return const MaterialApp(\n      title: 'Fade Demo',\n      home: MyFadeTest(title: 'Fade Demo'),\n    );\n  }\n}\n\nclass MyFadeTest extends StatefulWidget {\n  const MyFadeTest({super.key, required this.title});\n\n  final String title;\n\n  @override\n  State<MyFadeTest> createState() => _MyFadeTest();\n}\n\nclass _MyFadeTest extends State<MyFadeTest> with TickerProviderStateMixin {\n  late final AnimationController controller;\n  late final CurvedAnimation curve;\n\n  @override\n  void initState() {\n    super.initState();\n    controller = AnimationController(\n      duration: const Duration(milliseconds: 2000),\n      vsync: this,\n    );\n    curve = CurvedAnimation(parent: controller, curve: Curves.easeIn);\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: Text(widget.title)),\n      body: Center(\n        child: FadeTransition(\n          opacity: curve,\n          child: const FlutterLogo(size: 100),\n        ),\n      ),\n      floatingActionButton: FloatingActionButton(\n        onPressed: () {\n          controller.forward();\n        },\n        tooltip: 'Fade',\n        child: const Icon(Icons.brush),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing MethodChannel in FlutterWindow::OnCreate (C++)\nDESCRIPTION: This C++ code initializes a Flutter MethodChannel in the `FlutterWindow::OnCreate` method.  It sets the method call handler to handle communication from the Flutter side, using the channel name 'samples.flutter.dev/battery'.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/platform-integration/platform-channels.md#_snippet_19\n\nLANGUAGE: C++\nCODE:\n```\nbool FlutterWindow::OnCreate() {\n  // ...\n  RegisterPlugins(flutter_controller_->engine());\n\n  flutter::MethodChannel<> channel(\n      flutter_controller_->engine()->messenger(), \"samples.flutter.dev/battery\",\n      &flutter::StandardMethodCodec::GetInstance());\n  channel.SetMethodCallHandler(\n      [](const flutter::MethodCall<>& call,\n         std::unique_ptr<flutter::MethodResult<>> result) {\n        // TODO\n      });\n\n  SetChildContent(flutter_controller_->view()->GetNativeWindow());\n  return true;\n}\n```\n\n----------------------------------------\n\nTITLE: Scrolling Integration Test\nDESCRIPTION: This snippet shows how to scroll a list using integration_test. It employs the `tester.scrollUntilVisible` method to scroll until a specific item becomes visible within the scrollable area. The method takes the item to scroll to and the scroll offset as parameters.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/flutter-driver-migration.md#_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\ntestWidgets('scroll, tap on the last item (Zedoary), verify selected', (\n  tester,\n) async {\n  await tester.pumpWidget(const PlantsApp());\n\n  // wait for data to load\n  await tester.pumpAndSettle();\n\n  // find the item by text\n  final item = find.text('Zedoary');\n\n  // finds Scrollable widget and scrolls until item is visible\n  // a 100,000 pixels is enough to reach the bottom of the list\n  await tester.scrollUntilVisible(item, 100000);\n\n  // assert item is found\n  expect(item, findsOneWidget);\n\n  // Emulate a tap on the tile item.\n  await tester.tap(item);\n  await tester.pumpAndSettle();\n\n  // Wait for species name to be displayed\n  expect(find.text('Curcuma zedoaria'), findsOneWidget);\n\n  // 'please select' text should not be displayed\n  expect(find.text('Please select a plant from the list.'), findsNothing);\n});\n```\n\n----------------------------------------\n\nTITLE: Upgrade Flutter SDK (Shell)\nDESCRIPTION: This command upgrades the Flutter SDK to the latest version. This is a prerequisite for enabling Swift Package Manager support.\nSOURCE: https://github.com/flutter/website/blob/main/src/_includes/docs/swift-package-manager/how-to-enable-disable.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nflutter upgrade\n```\n\n----------------------------------------\n\nTITLE: Adding Network Client Entitlement to macOS (XML)\nDESCRIPTION: This XML snippet demonstrates how to add the `com.apple.security.network.client` entitlement to the `DebugProfile.entitlements` and `Release.entitlements` files in a Flutter macOS project. This entitlement is required to allow the application to act as a network client and access the internet for data retrieval.\nSOURCE: https://github.com/flutter/website/blob/main/src/_includes/docs/cookbook/networking/internet-permission.md#_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<!-- Required to fetch data from the internet. -->\n<key>com.apple.security.network.client</key>\n<true/>\n```\n\n----------------------------------------\n\nTITLE: flutter_driver: Migrate to WaitForCondition(NoPendingFrame()) (Dart)\nDESCRIPTION: This snippet shows the updated method to use for `WaitUntilNoPendingFrame`\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/1-22-deprecations.md#_snippet_18\n\nLANGUAGE: dart\nCODE:\n```\nWaitForCondition(NoPendingFrame())\n```\n\n----------------------------------------\n\nTITLE: Displaying a grid using GridView.builder - Flutter/Dart\nDESCRIPTION: This snippet demonstrates how to display a grid using `GridView.builder` in Flutter. It uses `SliverGridDelegateWithFixedCrossAxisCount` to define the grid layout. Dependencies: `cupertino_icons`.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/swiftui-devs.md#_snippet_14\n\nLANGUAGE: Dart\nCODE:\n```\nconst widgets = [\n  Text('Row 1'),\n  Icon(CupertinoIcons.arrow_down_square),\n  Icon(CupertinoIcons.arrow_up_square),\n  Text('Row 2'),\n  Icon(CupertinoIcons.arrow_down_square),\n  Icon(CupertinoIcons.arrow_up_square),\n];\n\nclass HomePage extends StatelessWidget {\n  const HomePage({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: GridView.builder(\n        gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(\n          crossAxisCount: 3,\n          mainAxisExtent: 40,\n        ),\n        itemCount: widgets.length,\n        itemBuilder: (context, index) => widgets[index],\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sign Xcode license agreement - shell\nDESCRIPTION: Signs the Xcode license agreement. This is a necessary step before using Xcode for development. It requires administrator privileges.\nSOURCE: https://github.com/flutter/website/blob/main/src/_includes/docs/install/compiler/xcode.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nsudo xcodebuild -license\n```\n\n----------------------------------------\n\nTITLE: Fix Unbounded Height with Expanded in Flutter\nDESCRIPTION: This code demonstrates the solution to the unbounded height error by wrapping the ListView widget within an Expanded widget. This forces the ListView to take up the remaining space in the Column, resolving the layout issue. Using Expanded ensures the ListView's height is constrained by the Column, preventing the error.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/testing/common-errors.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nWidget build(BuildContext context) {\n  return Center(\n    child: Column(\n      children: <Widget>[\n        const Text('Header'),\n        Expanded(\n          child: ListView(\n            children: const <Widget>[\n              ListTile(leading: Icon(Icons.map), title: Text('Map')),\n              ListTile(leading: Icon(Icons.subway), title: Text('Subway')),\n            ],\n          ),\n        ),\n      ],\n    ),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Launch FlutterActivity with Default Intent (Java)\nDESCRIPTION: This Java code snippet demonstrates how to launch a `FlutterActivity` using `createDefaultIntent` from an `OnClickListener`. It starts the `FlutterActivity` with the default Dart entrypoint and initial route.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/add-to-app/android/add-flutter-screen.md#_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nmyButton.setOnClickListener(new OnClickListener() {\n  @Override\n  public void onClick(View v) {\n    startActivity(\n      FlutterActivity.createDefaultIntent(currentActivity)\n    );\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Migrating TextTheme styles - Dart\nDESCRIPTION: This code demonstrates how to migrate from the deprecated `display4`, `display3`, `display2`, `display1`, `headline`, `title`, `subhead`, `body2`, `body1`, and `subtitle` properties of `TextTheme` to their respective replacements: `headline1`, `headline2`, `headline3`, `headline4`, `headline5`, `headline6`, `subtitle1`, `bodyText1`, `bodyText2`, and `subtitle2`. The snippet includes examples for constructors, `copyWith`, and getter usage.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/2-2-deprecations.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\n// TextTheme\n// Base constructor\nTextTheme(\n  display4: displayStyle4,\n  display3: displayStyle3,\n  display2: displayStyle2,\n  display1: displayStyle1,\n  headline: headlineStyle,\n  title: titleStyle,\n  subhead: subheadStyle,\n  body2: body2Style,\n  body1: body1Style,\n  caption: captionStyle,\n  button: buttonStyle,\n  subtitle: subtitleStyle,\n  overline: overlineStyle,\n);\n\n// copyWith\nTextTheme.copyWith(\n  display4: displayStyle4,\n  display3: displayStyle3,\n  display2: displayStyle2,\n  display1: displayStyle1,\n  headline: headlineStyle,\n  title: titleStyle,\n  subhead: subheadStyle,\n  body2: body2Style,\n  body1: body1Style,\n  caption: captionStyle,\n  button: buttonStyle,\n  subtitle: subtitleStyle,\n  overline: overlineStyle,\n);\n\n// Getters\nTextStyle style;\nstyle = textTheme.display4;\nstyle = textTheme.display3;\nstyle = textTheme.display2;\nstyle = textTheme.display1;\nstyle = textTheme.headline;\nstyle = textTheme.title;\nstyle = textTheme.subhead;\nstyle = textTheme.body2;\nstyle = textTheme.body1;\nstyle = textTheme.caption;\nstyle = textTheme.button;\nstyle = textTheme.subtitle;\nstyle = textTheme.overline;\n```\n\nLANGUAGE: dart\nCODE:\n```\n// TextTheme\n// Base constructor\nTextTheme(\n  headline1: displayStyle4,\n  headline2: displayStyle3,\n  headline3: displayStyle2,\n  headline4: displayStyle1,\n  headline5: headlineStyle,\n  headline6: titleStyle,\n  subtitle1: subheadStyle,\n  bodyText1: body2Style,\n  bodyText2: body1Style,\n  caption: captionStyle,\n  button: buttonStyle,\n  subtitle2: subtitleStyle,\n  overline: overlineStyle,\n);\n\nTextTheme.copyWith(\n  headline1: displayStyle4,\n  headline2: displayStyle3,\n  headline3: displayStyle2,\n  headline4: displayStyle1,\n  headline5: headlineStyle,\n  headline6: titleStyle,\n  subtitle1: subheadStyle,\n  bodyText1: body2Style,\n  bodyText2: body1Style,\n  caption: captionStyle,\n  button: buttonStyle,\n  subtitle2: subtitleStyle,\n  overline: overlineStyle,\n);\n\nTextStyle style;\nstyle = textTheme.headline1;\nstyle = textTheme.headline2;\nstyle = textTheme.headline3;\nstyle = textTheme.headline4;\nstyle = textTheme.headline5;\nstyle = textTheme.headline6;\nstyle = textTheme.subtitle1;\nstyle = textTheme.bodyText1;\nstyle = textTheme.bodyText2;\nstyle = textTheme.caption;\nstyle = textTheme.button;\nstyle = textTheme.subtitle2;\nstyle = textTheme.overline;\n```\n\n----------------------------------------\n\nTITLE: Installing Android Studio Prerequisites on Linux\nDESCRIPTION: Installs necessary prerequisite packages for running Android Studio on a Linux system.  These packages provide essential libraries for Android Studio's functionality. The command uses `apt-get` to retrieve and install the specified packages.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/platform-integration/android/install-android/install-android-from-linux.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nsudo apt-get install libc6:amd64 libstdc++6:amd64 lib32z1 libbz2-1.0:amd64\n```\n\n----------------------------------------\n\nTITLE: Setting Custom ScrollBehavior (Widget-Specific)\nDESCRIPTION: This code shows how to apply a custom ScrollBehavior to a specific widget using ScrollConfiguration. The custom ScrollBehavior extends MaterialScrollBehavior and can override methods like buildOverscrollIndicator and buildScrollbar.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/default-desktop-scrollbars.md#_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\n// MaterialApps previously had a private ScrollBehavior.\n// This is available to extend now.\nclass MyCustomScrollBehavior extends MaterialScrollBehavior {\n  // Override behavior methods like buildOverscrollIndicator and buildScrollbar\n}\n\n// ScrollBehavior can be set for a specific widget.\nfinal ScrollController controller = ScrollController();\nScrollConfiguration(\n  behavior: MyCustomScrollBehavior(),\n  child: ListView.builder(\n    controller: controller,\n    itemBuilder: (BuildContext context, int index) {\n     return Text('Item $index');\n    }\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Fading an Image - Xamarin Forms (C#)\nDESCRIPTION: This C# code snippet demonstrates how to animate the opacity of an Image element in Xamarin.Forms. It uses the `FadeTo` method to fade the image to an opacity of 0 over a duration of 1000 milliseconds (1 second). The snippet relies on the existence of an Image element named 'myImage' in the XAML.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/xamarin-forms-devs.md#_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\nmyImage.FadeTo(0, 1000);\n```\n\n----------------------------------------\n\nTITLE: Dart: Setting Platform View Style\nDESCRIPTION: Shows how to set the `style.width` and `style.height` properties of a platform view's root element in Dart to fill the available space allocated by the framework. This prevents console warnings and ensures the platform view is correctly sized.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/platform-views-using-html-slots-web.md#_snippet_3\n\nLANGUAGE: Dart\nCODE:\n```\nui.platformViewRegistry.registerViewFactory(viewType, (int viewId) {\n  final html.Element htmlElement = html.DivElement()\n    // ..other props\n    ..style.width = '100%'\n    ..style.height = '100%';\n  // ...\n  return htmlElement;\n});\n```\n\n----------------------------------------\n\nTITLE: Listening to command state changes and clearing errors\nDESCRIPTION: This snippet shows how to listen for changes in the command's state and handle errors. When an error occurs, the `clear()` method is called on the command to reset its state, preventing the error from being triggered repeatedly.  Requires Flutter SDK.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/app-architecture/design-patterns/command.md#_snippet_14\n\nLANGUAGE: dart\nCODE:\n```\n@override\nvoid initState() {\n  super.initState();\n  widget.viewModel.addListener(_onViewModelChanged);\n}\n\n@override\nvoid dispose() {\n  widget.viewModel.removeListener(_onViewModelChanged);\n  super.dispose();\n}\n\n```\n\nLANGUAGE: dart\nCODE:\n```\nvoid _onViewModelChanged() {\n  if (widget.viewModel.load.error != null) {\n    widget.viewModel.load.clear();\n    // Show Snackbar\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Configuration using Liquid\nDESCRIPTION: This snippet uses Liquid templating to conditionally set values based on the 'include.target' variable. It checks if the target is 'desktop', 'mobile', or 'web' and sets corresponding values. If none of these conditions are met, it sets default values.\nSOURCE: https://github.com/flutter/website/blob/main/src/_includes/docs/install/reqs/linux/storage.md#_snippet_0\n\nLANGUAGE: Liquid\nCODE:\n```\n{% if include.target == 'desktop' -%}\n4.0 | 52.0 |\n{% elsif include.target == 'mobile' -%}\n10.0 | 10.0 |\n{% elsif include.target == 'web' -%}\n2.5 | 2.5 |\n{% else -%}\n11.0 | 60.0 |\n{% endif -%}\n\n{:.table .table-striped}\n```\n\n----------------------------------------\n\nTITLE: Navigation Between Pages using Routes in Flutter\nDESCRIPTION: This snippet demonstrates how to implement navigation between pages in Flutter using a `MaterialApp` with named routes. It defines a map of route names to widget builders, allowing navigation to different pages by pushing route names onto the `Navigator` stack.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/xamarin-forms-devs.md#_snippet_17\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() {\n  runApp(\n    MaterialApp(\n      home: const MyAppHome(), // becomes the route named '/'\n      routes: <String, WidgetBuilder>{\n        '/a': (context) => const MyPage(title: 'page A'),\n        '/b': (context) => const MyPage(title: 'page B'),\n        '/c': (context) => const MyPage(title: 'page C'),\n      },\n    ),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Container Width CSS\nDESCRIPTION: Sets the width and max-width of nested div elements using CSS. Requires a basic HTML structure and sets the grey-box to use flexbox for centering. The red-box has a width of 100% and a max-width of 240px.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/web-devs.md#_snippet_7\n\nLANGUAGE: CSS\nCODE:\n```\n.grey-box {\n    background-color: #e0e0e0; /* grey 300 */\n    width: 320px;\n    height: 240px;\n    font: 900 24px Roboto;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n}\n.red-box {\n    background-color: #ef5350; /* red 400 */\n    padding: 16px;\n    color: #ffffff;\n    width: 100%;\n    max-width: 240px;\n}\n```\n\n----------------------------------------\n\nTITLE: Add Flutter engine to Podfile (CocoaPods)\nDESCRIPTION: Adds the Flutter engine to an existing iOS project's Podfile using CocoaPods.  The path to the Flutter.podspec must be specified. The `build mode` value, either `Debug` or `Release`, must be hardcoded depending on the use case (e.g., `Debug` for `flutter attach`, `Release` for shipping).\nSOURCE: https://github.com/flutter/website/blob/main/src/_includes/docs/add-to-app/ios-project/embed-split.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\npod 'Flutter', :podspec => '/path/to/MyApp/Flutter/[![build mode]!]/Flutter.podspec'\n```\n\n----------------------------------------\n\nTITLE: Using Google Fonts in Compose (Kotlin)\nDESCRIPTION: This snippet demonstrates how to use Google Fonts in Compose. It creates a `GoogleFont.Provider` and `FontFamily` and then references the Google Font name.  It requires adding the Google Fonts service as a dependency.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/compose-devs.md#_snippet_27\n\nLANGUAGE: kotlin\nCODE:\n```\n// Font files bunded with app\nval provider = GoogleFont.Provider(\n    providerAuthority = \"com.google.android.gms.fonts\",\n    providerPackage = \"com.google.android.gms\",\n    certificates = R.array.com_google_android_gms_fonts_certs\n)\n\nval firaSansFamily = FontFamily(\n    Font(\n        googleFont = GoogleFont(\"FiraSans\"),\n        fontProvider = provider,\n    )\n)\n\n// Usage\nText(text = \"Compose\", fontFamily = firaSansFamily, fontWeight = FontWeight.Light)\n```\n\n----------------------------------------\n\nTITLE: Flutter Project Creation with Web Platform\nDESCRIPTION: This command regenerates the contents of the `web/` directory in a Flutter project, ensuring it includes the latest Flutter web app initialization files. This step is important when enabling Wasm support for an existing Flutter project, especially when upgrading to Flutter 3.22 or later.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/platform-integration/web/wasm.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ flutter create . --platforms web\n```\n\n----------------------------------------\n\nTITLE: Defining Locale Date Symbols\nDESCRIPTION: This snippet defines a `const` map containing locale-specific date symbols, such as the name of the locale and the eras used for dates.  These symbols are used by the date formatting functions to display dates in the correct format for the given locale. The comment placeholders indicate where further symbols should be defined.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/accessibility-and-internationalization/internationalization.md#_snippet_35\n\nLANGUAGE: dart\nCODE:\n```\nconst nnDateSymbols = {\n  'NAME': 'nn',\n  'ERAS': <dynamic>['f.Kr.', 'e.Kr.'],\n```\n\n----------------------------------------\n\nTITLE: Adding Shaders to pubspec.yaml - Flutter\nDESCRIPTION: This snippet demonstrates how to declare shaders in the `pubspec.yaml` file of a Flutter project. This declaration allows the Flutter tool to compile the shader to the appropriate backend format and include it in the application as an asset. Changes to the shader program will trigger recompilation during hot reload or hot restart in debug mode.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/design/graphics/fragment-shaders.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nflutter:\n  shaders:\n    - shaders/myshader.frag\n```\n\n----------------------------------------\n\nTITLE: Initializing Flutter Hello World in Dart\nDESCRIPTION: This snippet initializes a basic Flutter application that displays \"Hello, world!\" centered on the screen. It uses the Center and Text widgets to achieve this. The runApp() function is used to make the given Widget the root of the widget tree.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/index.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\n\nvoid main() {\n  runApp(\n    const Center(\n      child: Text('Hello, world!', textDirection: TextDirection.ltr),\n    ),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Building iOS Frameworks via Flutter CLI\nDESCRIPTION: This command builds the necessary iOS frameworks for a Flutter module. The `--output` flag specifies the destination directory for the generated frameworks.  Run this command every time the Flutter code changes to ensure the frameworks are up-to-date.\nSOURCE: https://github.com/flutter/website/blob/main/src/_includes/docs/add-to-app/ios-project/embed-framework-directory-tree.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ flutter build ios-framework --output=/path/to/MyApp/Flutter/\n```\n\n----------------------------------------\n\nTITLE: Verifying Connected Android Device - macOS\nDESCRIPTION: This command verifies if Flutter recognizes the connected Android device on a macOS machine. It requires Flutter to be installed and configured in the system's PATH environment variable. The command is executed in the Terminal.\nSOURCE: https://github.com/flutter/website/blob/main/src/_includes/docs/install/devices/android-physical.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ flutter devices\n```\n\n----------------------------------------\n\nTITLE: Add HTTP Package via Flutter Pub\nDESCRIPTION: This command adds the `http` package as a dependency to your Flutter project. The `http` package simplifies making network requests, such as fetching data from a JSON endpoint.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/networking/background-parsing.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ flutter pub add http\n```\n\n----------------------------------------\n\nTITLE: Including External Markdown File\nDESCRIPTION: This snippet demonstrates how to include the content of another markdown file into the current document using a Jekyll include tag. This allows for modular content management and reuse of common documentation elements. The included file is `release-notes-2.22.2-src.md`.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/tools/devtools/release-notes/release-notes-2.22.2.md#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n{% include ./release-notes-2.22.2-src.md %}\n```\n\n----------------------------------------\n\nTITLE: Handling Repeat Key Events with RawKeyEvent (Before)\nDESCRIPTION: This snippet shows how to determine if a key event is a repeated event using the deprecated `RawKeyEvent.repeat` attribute. It checks if the `keyEvent` is a `RawKeyDownEvent` and then uses the `repeat` property to determine if it's a repeated event. The input is a `RawKeyEvent` and the output is printing to the console.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/key-event-migration.md#_snippet_4\n\nLANGUAGE: Dart\nCODE:\n```\nKeyEventResult _handleKeyEvent(RawKeyEvent keyEvent) {\n  if (keyEvent is RawKeyDownEvent) {\n    print('Key down: ${keyEvent.data.logicalKey.keyLabel}(${keyEvent.repeat ? ' (repeated)' : ''})');\n  }\n  return KeyEventResult.ignored;\n}\n```\n\n----------------------------------------\n\nTITLE: Code Before Migration - Multiple ListViews Throwing Errors - Dart\nDESCRIPTION: This snippet showcases a scenario where multiple ListViews displayed side-by-side would previously throw errors due to conflicts with the PrimaryScrollController. This was a common issue before the changes were implemented, particularly concerning Scrollbars and ScrollActions.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/primary-scroll-controller-desktop.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\n// These side-by-side ListViews would throw errors from Scrollbars and\n// ScrollActions previously due to the PrimaryScrollController.\nScaffold(\n  body: LayoutBuilder(\n    builder: (context, constraints) {\n      return Row(\n        children: [\n          SizedBox(\n            height: constraints.maxHeight,\n            width: constraints.maxWidth / 2,\n            child: ListView.builder(\n              itemBuilder: (BuildContext context, int index) {\n                return Text('List 1 - Item $index');\n              }\n            ),\n          ),\n          SizedBox(\n            height: constraints.maxHeight,\n            width: constraints.maxWidth / 2,\n            child: ListView.builder(\n              itemBuilder: (BuildContext context, int index) {\n                return Text('List 2 - Item $index');\n              }\n            ),\n          ),\n        ]\n      );\n    },\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Attaching Flutter Debugger via Observatory URI\nDESCRIPTION: This command allows you to attach the Flutter debugger to an App Clip.  It requires the Observatory URI obtained from the Xcode console output. The URI should be copied and pasted to replace `<copied URI>` in the command. This is needed due to networking restrictions preventing auto-discovery.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/platform-integration/ios/ios-app-clip.md#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\nflutter attach --debug-uri <copied URI>\n```\n\n----------------------------------------\n\nTITLE: Creating a 'Hello world!' App in Flutter\nDESCRIPTION: This Flutter code creates a simple 'Hello world!' app using the `Center` and `Text` widgets. The `runApp` function renders a `Center` widget, which contains a `Text` widget displaying 'Hello, world!'. The text direction is set to left-to-right (ltr).\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/react-native-devs.md#_snippet_10\n\nLANGUAGE: Dart\nCODE:\n```\n// Flutter\nimport 'package:flutter/material.dart';\n\nvoid main() {\n  runApp(\n    const Center(\n      child: Text('Hello, world!', textDirection: TextDirection.ltr),\n    ),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Vertical Linear Gradient - CSS\nDESCRIPTION: This CSS snippet applies a vertical linear gradient to a div element (`.red-box`). The gradient transitions from `#ef5350` (red) to transparent, covering 80% of the element's height.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/web-devs.md#_snippet_15\n\nLANGUAGE: css\nCODE:\n```\n<div class=\"grey-box\">\n  <div class=\"red-box\">\n    Lorem ipsum\n  </div>\n</div>\n\n.grey-box {\n    background-color: #e0e0e0; /* grey 300 */\n    width: 320px;\n    height: 240px;\n    font: 900 24px Roboto;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n}\n.red-box {\n    padding: 16px;\n    color: #ffffff;\n    background: linear-gradient(180deg, #ef5350, rgba(0, 0, 0, 0) 80%);\n}\n```\n\n----------------------------------------\n\nTITLE: TextField and Button for User Input in Flutter\nDESCRIPTION: Creates a Column widget containing a TextField for user input and an ElevatedButton to trigger data creation. The TextField is controlled by a TextEditingController, and when the button is pressed, it updates the state to call createAlbum with the input text.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/networking/send-data.md#_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nColumn(\n  mainAxisAlignment: MainAxisAlignment.center,\n  children: <Widget>[\n    TextField(\n      controller: _controller,\n      decoration: const InputDecoration(hintText: 'Enter Title'),\n    ),\n    ElevatedButton(\n      onPressed: () {\n        setState(() {\n          _futureAlbum = createAlbum(_controller.text);\n        });\n      },\n      child: const Text('Create Data'),\n    ),\n  ],\n)\n```\n\n----------------------------------------\n\nTITLE: Console Output: Hot Reload Confirmation\nDESCRIPTION: This snippet shows the console output after a successful hot reload operation in Flutter. It indicates the number of libraries reloaded and the time taken for the operation.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/tools/hot-reload.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nPerforming hot reload...\nReloaded 1 of 448 libraries in 978ms.\n```\n\n----------------------------------------\n\nTITLE: Using Bundled Font in Flutter (Dart)\nDESCRIPTION: This snippet demonstrates how to use a bundled font in Flutter by specifying the `fontFamily` in the `TextStyle`. The `fontFamily` name should match the family name declared in the `pubspec.yaml` file.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/compose-devs.md#_snippet_26\n\nLANGUAGE: dart\nCODE:\n```\nText(\n  'Flutter',\n  style: TextStyle(\n    fontSize: 40,\n    fontFamily: 'FiraSans',\n  ),\n),\n```\n\n----------------------------------------\n\nTITLE: Displaying Text with Padding - Dart (Flutter)\nDESCRIPTION: Demonstrates how to display text with padding in Flutter using the `Padding` widget. This widget is used to add padding around the `Text` widget. The `EdgeInsets.all(10.0)` property defines the padding on all sides.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/compose-devs.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nPadding(                         // <-- This is a Widget\n  padding: EdgeInsets.all(10.0), // <-- So is this\n  child: Text(\"Hello, World!\"),  // <-- This, too\n)));\n```\n\n----------------------------------------\n\nTITLE: Nesting Rows and Columns for Layout (Dart)\nDESCRIPTION: This snippet demonstrates how to nest `Column` widgets within a `Row` widget to create a more complex layout. Each column contains a `BorderedImage` and a `Text` widget, resulting in a row of images with labels underneath them.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/fundamentals/layout.md#_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nWidget build(BuildContext context) {\n  return Row(\n    children: [\n      Column(\n        children: [\n          BorderedImage(),\n          Text('Dash 1'),\n        ],\n      ),\n      Column(\n        children: [\n          BorderedImage(),\n          Text('Dash 2'),\n        ],\n      ),\n      Column(\n        children: [\n          BorderedImage(),\n          Text('Dash 3'),\n        ],\n      ),\n    ],\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Initialize Firebase in Dart\nDESCRIPTION: This snippet initializes Firebase within the Flutter application. `WidgetsFlutterBinding.ensureInitialized()` ensures that the Flutter framework is properly initialized before Firebase is initialized. `Firebase.initializeApp()` initializes Firebase with the options provided in `DefaultFirebaseOptions.currentPlatform`, which are automatically generated by FlutterFire CLI.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/games/firestore-multiplayer.md#_snippet_1\n\nLANGUAGE: Dart\nCODE:\n```\nWidgetsFlutterBinding.ensureInitialized();\n\nawait Firebase.initializeApp(options: DefaultFirebaseOptions.currentPlatform);\n```\n\n----------------------------------------\n\nTITLE: Passing DSN to Flutter using dart-define (Shell)\nDESCRIPTION: This command shows how to pass the Sentry DSN (Data Source Name) as a build argument to a Flutter application. This allows you to configure the Sentry SDK without hardcoding the DSN directly into the Dart code. Replace the placeholder DSN with your actual Sentry DSN.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/maintenance/error-reporting.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n--dart-define SENTRY_DSN=https://example@sentry.io/example\n```\n\n----------------------------------------\n\nTITLE: Policy Class for Purchase Link Control in Flutter (Dart)\nDESCRIPTION: This snippet shows how to encapsulate the purchase link policy within a `Policy` class. This class contains a `shouldAllowPurchaseClick` method that determines whether to allow the purchase link based on the platform. By placing this logic in a class, it becomes easier to mock and test the behavior independently of the device where the app is running.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/adaptive-responsive/capabilities.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nclass Policy {\n\n  bool shouldAllowPurchaseClick() {\n    // Banned by Apple App Store guidelines. \n    return !Platform.isIOS;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Override getConstraintsForChild for Tight Width (Dart)\nDESCRIPTION: This snippet overrides the `getConstraintsForChild` method in the `FlowDelegate` to return tight width constraints for the background image child. This ensures that the image is exactly as wide as the `Flow` widget.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/effects/parallax-scrolling.md#_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\n@override\nBoxConstraints getConstraintsForChild(int i, BoxConstraints constraints) {\n  return BoxConstraints.tightFor(width: constraints.maxWidth);\n}\n```\n\n----------------------------------------\n\nTITLE: Create FlutterViewController in SwiftUI\nDESCRIPTION: Creates a FlutterViewController within a SwiftUI app without an explicit FlutterEngine. The FlutterViewController implicitly creates its own FlutterEngine. This snippet demonstrates the basic setup of a Flutter view within a SwiftUI view using `UIViewControllerRepresentable`.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/add-to-app/ios/add-flutter-screen.md#_snippet_6\n\nLANGUAGE: Swift\nCODE:\n```\nimport SwiftUI\nimport Flutter\n\nstruct FlutterViewControllerRepresentable: UIViewControllerRepresentable {\n  func makeUIViewController(context: Context) -> some UIViewController {\n    return FlutterViewController(\n      project: nil,\n      nibName: nil,\n      bundle: nil)\n  }\n  \n  func updateUIViewController(_ uiViewController: UIViewControllerType, context: Context) {}\n}\n\nstruct ContentView: View {\n  var body: some View {\n    NavigationStack {\n      NavigationLink(\"My Flutter Feature\") {\n        FlutterViewControllerRepresentable()\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Asserting Empty Text Input State (Before Migration) - Dart\nDESCRIPTION: This code snippet shows how the text input state was checked before the migration.  It expects the `editingState['text']` to be empty. This check might have passed previously due to dirty state from previous tests or because the state was not correctly set. This assertion is deprecated and should be removed or updated.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/test-text-input.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nexpect(tester.testTextInput.editingState['text'], isEmpty);\n```\n\n----------------------------------------\n\nTITLE: Accessing Shared State with InheritedWidget in Flutter\nDESCRIPTION: This Dart code snippet shows how to access shared state using `InheritedWidget` in Flutter. `StudentState.of(context)` retrieves the nearest ancestor of type `StudentState` from the widget tree. This requires the Flutter SDK and a pre-existing `InheritedWidget` implementation named `StudentState`.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/resources/architectural-overview.md#_snippet_2\n\nLANGUAGE: Dart\nCODE:\n```\nfinal studentState = StudentState.of(context);\n```\n\n----------------------------------------\n\nTITLE: Styling Text in Compose (Kotlin) - TextStyle\nDESCRIPTION: Demonstrates styling text in Jetpack Compose using a TextStyle object.  This allows multiple style attributes to be grouped and applied to the Text composable.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/compose-devs.md#_snippet_20\n\nLANGUAGE: kotlin\nCODE:\n```\nText(\"Hello, world!\", \n   style = TextStyle(\n      color = Color.Green, \n      fontSize = 30.sp, \n      fontWeight = FontWeight.Bold\n   ),\n)\n```\n\n----------------------------------------\n\nTITLE: Parse String with GCD (Swift)\nDESCRIPTION: Uses Grand Central Dispatch (GCD) to parse a string asynchronously on a background queue with a user-initiated quality of service. Simulates a 1-second delay before returning the result via a completion handler.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/dart-swift-concurrency.md#_snippet_8\n\nLANGUAGE: Swift\nCODE:\n```\nfunc parse(string: String, completion: @escaping ([String:Any]) -> Void) {\n  // Mimic 1 sec delay.\n  DispatchQueue(label: \"data_processing_queue\", qos: .userInitiated)\n    .asyncAfter(deadline: .now() + 1) {\n      let result: [String:Any] = [\"foo\": 123]\n      completion(result)\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: AnnotatedRegionLayer findAnnotations Modification Dart\nDESCRIPTION: This code snippet shows the change in the `findAnnotations` method of the `AnnotatedRegionLayer` class. The `localPosition` is now calculated by subtracting the `offset` from the received `localPosition`. This makes the local position relative to the clipping area instead of the layer itself. The snippet uses the rendering library from Flutter.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/annotations-return-local-position-relative-to-object.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nclass AnnotatedRegionLayer<T> extends ContainerLayer {\n  @override\n  bool findAnnotations<S>(AnnotationResult<S> result, Offset localPosition, { required bool onlyFirst }) {\n    ...\n    if (/* shouldAddAnnotation */) {\n      result.add(AnnotationEntry<S>(\n        annotation: typedValue,\n        // Used to be:\n        // localPosition: localPosition,\n        localPosition: localPosition - offset,\n      ));\n    }\n    ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Null/Zero Check: Dart\nDESCRIPTION: This snippet compares how to check for null or zero values in JavaScript and Dart.  In JavaScript, null and zero are treated as false, whereas in Dart, only `true` is considered true.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/react-native-devs.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n// JavaScript\nlet myNull = null;\nif (!myNull) {\n  console.log('null is treated as false');\n}\nlet zero = 0;\nif (!zero) {\n  console.log('0 is treated as false');\n}\n```\n\nLANGUAGE: Dart\nCODE:\n```\n/// Dart\nvar myNull;\nvar zero = 0;\nif (zero == 0) {\n  print('use \"== 0\" to check zero');\n}\n```\n\n----------------------------------------\n\nTITLE: Running Windows GoogleTest tests\nDESCRIPTION: This command executes Windows GoogleTest tests for a Flutter plugin from the command line.  Replace \"my_plugin\" with the plugin project name. Ensure the example app is built in debug or release mode, and adjust the path accordingly.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/testing/testing-plugins.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nbuild/windows/plugins/my_plugin/Debug/my_plugin_test.exe\n```\n\n----------------------------------------\n\nTITLE: Create MainActivityTest - Java\nDESCRIPTION: This code creates a test file for `MainActivity`, utilizing AndroidX test libraries and JUnit. It sets up an `ActivityTestRule` to manage the activity lifecycle during testing.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/plugin-api-migration.md#_snippet_5\n\nLANGUAGE: Java\nCODE:\n```\npackage io.flutter.plugins.firebase.core;\n\nimport androidx.test.rule.ActivityTestRule;\nimport io.flutter.plugins.firebasecoreexample.MainActivity;\nimport org.junit.Rule;\nimport org.junit.runner.RunWith;\n\n@RunWith(FlutterRunner.class)\npublic class MainActivityTest {\n  // Replace `MainActivity` with `io.flutter.embedding.android.FlutterActivity` if you removed `MainActivity`.\n  @Rule public ActivityTestRule<MainActivity> rule = new ActivityTestRule<>(MainActivity.class);\n}\n\n```\n\n----------------------------------------\n\nTITLE: Creating Drawer Navigation in React Native\nDESCRIPTION: This React Native code snippet demonstrates how to create a drawer navigator using `createDrawerNavigator` from the `react-navigation` library. It defines a `DrawerNavigator` with two screens, `Home` (SimpleApp) and `Screen2` (drawerScreen).\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/react-native-devs.md#_snippet_41\n\nLANGUAGE: javascript\nCODE:\n```\n// React Native\nexport default (MyApp1 = DrawerNavigator({\n  Home: {\n    screen: SimpleApp\n  },\n  Screen2: {\n    screen: drawerScreen\n  }\n}));\n```\n\n----------------------------------------\n\nTITLE: ScrollView Default Primary Property Post Change - Dart\nDESCRIPTION: This code shows how the ListView will only attach to the PrimaryScrollController by default on mobile platforms after the change. On desktop, developers must explicitly set the `primary` property to true if they want the ListView to be associated with the PrimaryScrollController.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/primary-scroll-controller-desktop.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\n// Only on mobile platforms will this attach to the PrimaryScrollController by\n// default.\nScaffold(\n  body: ListView.builder(\n    itemBuilder: (BuildContext context, int index) {\n      return Text('Item $index');\n    }\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Generate Keystore (macOS/Linux) (Console)\nDESCRIPTION: This command-line instruction uses `keytool` to generate a keystore for signing the Android app. It creates a `upload-keystore.jks` file in the user's home directory. The keystore contains the private key used to sign the app before publishing to the Play Store.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/deployment/android.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nkeytool -genkey -v -keystore ~/upload-keystore.jks -keyalg RSA \\\n           -keysize 2048 -validity 10000 -alias upload\n```\n\n----------------------------------------\n\nTITLE: Enable Network Client Access in Entitlements (macOS)\nDESCRIPTION: This XML snippet enables network client access for a macOS application. It should be added to the *.entitlements file of your macOS Flutter project.  This allows the app to initiate network connections and communicate with external servers.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/data-and-backend/networking.md#_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<key>com.apple.security.network.client</key>\n<true/>\n```\n\n----------------------------------------\n\nTITLE: Enabling Web Frameworks Preview in Firebase CLI\nDESCRIPTION: This command enables the web frameworks preview in the Firebase CLI, allowing the use of framework-aware features for Flutter web deployment.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/deployment/web.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nfirebase experiments:enable webframeworks\n```\n\n----------------------------------------\n\nTITLE: HTML Before Slot Implementation\nDESCRIPTION: Illustrates the DOM structure of platform views in Flutter web before the introduction of HTML slots. It shows how platform views were rendered directly into the DOM, which could lead to state loss issues with iframes and other elements.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/platform-views-using-html-slots-web.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n...\\n\n<flt-glass-pane>\n  ...\n  <div id=\"platform-view\">Contents</div> <!-- canvaskit -->\n  <!-- OR -->\n  <flt-platform-view>\n    #shadow-root\n    | <div id=\"platform-view\">Contents</div> <!-- html -->\n  </flt-platform-view>\n  ...\n</flt-glass-pane>\n\n...\n```\n\n----------------------------------------\n\nTITLE: Handling Method Call in flutter_window.cpp (C++)\nDESCRIPTION: This C++ code handles the 'getBatteryLevel' method call from Flutter.  It calls the `GetBatteryLevel` function to retrieve the battery level and returns the result to Flutter. If the method call is not 'getBatteryLevel', it returns FlutterMethodNotImplemented.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/platform-integration/platform-channels.md#_snippet_21\n\nLANGUAGE: C++\nCODE:\n```\nchannel.SetMethodCallHandler(\n      [](const flutter::MethodCall<>& call,\n         std::unique_ptr<flutter::MethodResult<>> result) {\n        if (call.method_name() == \"getBatteryLevel\") {\n          int battery_level = GetBatteryLevel();\n          if (battery_level != -1) {\n            result->Success(battery_level);\n          } else {\n            result->Error(\"UNAVAILABLE\", \"Battery level not available.\");\n          }\n        } else {\n          result->NotImplemented();\n        }\n      });\n```\n\n----------------------------------------\n\nTITLE: Configure DevTools Extension Enablement in YAML\nDESCRIPTION: This YAML snippet shows how to configure DevTools extension enablement states within the `devtools_options.yaml` file.  It defines the structure for enabling or disabling extensions on a per-project or per-user basis. The snippet contains example extension names and their boolean enablement statuses.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/tools/devtools/extensions.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndescription: This file stores settings for Dart & Flutter DevTools.\ndocumentation: https://docs.flutter.dev/tools/devtools/extensions#configure-extension-enablement-states\nextensions:\n  - provider: true\n  - shared_preferences: true\n  - foo: false\n```\n\n----------------------------------------\n\nTITLE: Examining build.gradle for AGP and Kotlin Versions (Groovy)\nDESCRIPTION: This code snippet shows how to find the Android Gradle Plugin (AGP) version and Kotlin version defined in the buildscript block of the android/build.gradle file. The AGP version is extracted from the classpath 'com.android.tools.build:gradle:...' and the Kotlin version from ext.kotlin_version.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/flutter-gradle-plugin-apply.md#_snippet_0\n\nLANGUAGE: Groovy\nCODE:\n```\nbuildscript {\n    ext.kotlin_version = '1.7.10'\n    repositories {\n        google()\n        mavenCentral()\n    }\n\n    dependencies {\n        classpath 'com.android.tools.build:gradle:7.3.0'\n        classpath \"org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version\"\n    }\n}\n\nallprojects {\n    repositories {\n        google()\n        mavenCentral()\n    }\n}\n\nrootProject.buildDir = '../build'\nsubprojects {\n    project.buildDir = \"${rootProject.buildDir}/${project.name}\"\n}\nsubprojects {\n    project.evaluationDependsOn(':app')\n}\n\ntasks.register(\"clean\", Delete) {\n    delete rootProject.buildDir\n}\n```\n\n----------------------------------------\n\nTITLE: ScrollView Default Primary Property Prior to Change - Dart\nDESCRIPTION: This code snippet demonstrates how the ListView would automatically be attached to the PrimaryScrollController on all platforms before the change. The primary property was implicitly set to true for vertical ScrollViews without a specified ScrollController.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/primary-scroll-controller-desktop.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n// Previously, this ListView would always result in primary being true,\n// and attached to the PrimaryScrollController on all platforms.\nScaffold(\n  body: ListView.builder(\n    itemBuilder: (BuildContext context, int index) {\n      return Text('Item $index');\n    }\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Using Google Fonts in Flutter (Dart)\nDESCRIPTION: This snippet demonstrates how to use Google Fonts in Flutter using the `google_fonts` package. It imports the package and then uses the `GoogleFonts.firaSans()` or `GoogleFonts.getFont('FiraSans')` methods to apply the FiraSans font to a `Text` widget.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/compose-devs.md#_snippet_28\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:google_fonts/google_fonts.dart';\n//...\nText(\n  'Flutter',\n  style: GoogleFonts.firaSans(),\n  // or \n  //style: GoogleFonts.getFont('FiraSans')\n),\n```\n\n----------------------------------------\n\nTITLE: NavigationBar Implementation in Flutter\nDESCRIPTION: This code shows how to implement the new NavigationBar widget in Flutter, replacing the BottomNavigationBar. It uses NavigationDestination widgets for each item. This requires importing the material package. The destinations parameter expects a list of NavigationDestination widgets.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/material-3-migration.md#_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\nNavigationBar(\n  destinations: const <Widget>[\n    NavigationDestination(\n      icon: Icon(Icons.home),\n      label: 'Home',\n    ),\n    NavigationDestination(\n      icon: Icon(Icons.business),\n      label: 'Business',\n    ),\n    NavigationDestination(\n      icon: Icon(Icons.school),\n      label: 'School',\n    ),\n  ],\n),\n```\n\n----------------------------------------\n\nTITLE: Read Asset List from Flutter App (After)\nDESCRIPTION: This code snippet demonstrates how to read the list of assets using the new AssetManifest API.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/asset-manifest-dot-json.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/services.dart';\n\nvoid readAssetList() async {\n  final assetManifest = await AssetManifest.loadFromAssetBundle(rootBundle);\n  final assets = assetManifest.listAssets();\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Flutter View Controller in Swift\nDESCRIPTION: This Swift code snippet demonstrates how to embed a FlutterViewController within a share extension using Swift, setting its frame to the view's bounds, and cancelling the request in viewDidDisappear to avoid memory leaks. It also shows how to handle the dismissal of the share extension.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/platform-integration/ios/app-extensions.md#_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\nimport UIKit\nimport Flutter\n\nclass ShareViewController: UIViewController {\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        showFlutter()\n    }\n\n    func showFlutter() {\n        let flutterViewController = FlutterViewController(project: nil, nibName: nil, bundle: nil)\n        addChild(flutterViewController)\n        view.addSubview(flutterViewController.view)\n        flutterViewController.view.frame = view.bounds\n    }\n\n    override func viewDidDisappear(_ animated: Bool) {\n        super.viewDidDisappear(animated)\n        self.extensionContext?.cancelRequest(\n            withError: NSError(domain: Bundle.main.bundleIdentifier!, code: 0))\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Console Warning Example\nDESCRIPTION: Illustrates the warning message printed to the console when the height or width of a platform view is not explicitly set.  This serves as a prompt for developers to set the appropriate dimensions using CSS to prevent unexpected layout behavior.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/platform-views-using-html-slots-web.md#_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\nHeight of Platform View type: [$viewType] may not be set. Defaulting to `height: 100%`.\nSet `style.height` to any appropriate value to stop this message.\n```\n\nLANGUAGE: Bash\nCODE:\n```\nWidth of Platform View type: [$viewType] may not be set. Defaulting to `width: 100%`.\nSet `style.width` to any appropriate value to stop this message.\n```\n\n----------------------------------------\n\nTITLE: Migrating custom shape and border - Flutter\nDESCRIPTION: Illustrates how to migrate custom shapes and borders from OutlineButton to OutlinedButton using StadiumBorder and BorderSide. It demonstrates setting consistent border colors for all states.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/buttons.md#_snippet_17\n\nLANGUAGE: dart\nCODE:\n```\nOutlineButton(\n  shape: StadiumBorder(),\n  highlightedBorderColor: Colors.red,\n  borderSide: BorderSide(\n    width: 2,\n    color: Colors.red\n  ),\n  onPressed: () { },\n  child: Text('OutlineButton with custom shape and border'),\n)\n\nOutlinedButton(\n  style: OutlinedButton.styleFrom(\n    shape: StadiumBorder(),\n    side: BorderSide(\n      width: 2,\n      color: Colors.red\n    ),\n  ),\n  onPressed: () { },\n  child: Text('OutlinedButton with custom shape and border'),\n)\n```\n\n----------------------------------------\n\nTITLE: Animate color, borderRadius, margin with AnimatedContainer - Set starting values\nDESCRIPTION: This snippet defines a change() method that uses setState() to update the color, borderRadius, and margin state variables. This method is called to generate new random values for the container properties, triggering the animation.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/codelabs/implicit-animations.md#_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\n+ void change() {\n+   setState(() {\n+     color = randomColor();\n+     borderRadius = randomBorderRadius();\n+     margin = randomMargin();\n+   });\n+ }\n+\n  @override\n  Widget build(BuildContext context) {\n    // ...\n```\n\n----------------------------------------\n\nTITLE: Chaining Asset Transformers in Flutter using YAML\nDESCRIPTION: This YAML snippet illustrates how to chain multiple asset transformers within the `pubspec.yaml` file. The transformers are applied in the order they are declared in the `transformers` list. In this example, `bird.png` is first transformed by `grayscale_filter` and then by `png_optimizer`.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/assets/asset-transformation.md#_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\nflutter:\n  assets:\n    - path: assets/bird.png\n      transformers:\n        - package: grayscale_filter\n        - package: png_optimizer\n```\n\n----------------------------------------\n\nTITLE: Dart VM Service URI Output\nDESCRIPTION: This is an example of the Dart VM service URI output in the Xcode console.  The URI is needed to attach the VS Code debugger to the running Flutter application.  It should be copied and pasted into the VS Code attach command.\nSOURCE: https://github.com/flutter/website/blob/main/src/_includes/docs/debug/debug-flow-xcode-as-start.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n2023-07-12 14:55:39.966191-0500 Runner[58361:53017145]\n    flutter: The Dart VM service is listening on\n    http://127.0.0.1:50642/00wEOvfyff8=/\n```\n\n----------------------------------------\n\nTITLE: WidgetState usage after migration in Dart\nDESCRIPTION: Shows how to use WidgetState after the migration from MaterialState. Includes examples of accessing a state, using WidgetStateProperty, creating a custom WidgetStateMouseCursor, and using WidgetStateBorderSide.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/material-state.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nWidgetState selected = WidgetState.selected;\n\nfinal WidgetStateProperty<Color> backgroundColor;\n\nclass _MouseCursor extends WidgetStateMouseCursor{\n  const _MouseCursor(this.resolveCallback);\n\n  final WidgetPropertyResolver<MouseCursor?> resolveCallback;\n\n  @override\n  MouseCursor resolve(Set<WidgetState> states) => resolveCallback(states) ?? MouseCursor.uncontrolled;\n}\n\nBorderSide side = WidgetStateBorderSide.resolveWith((Set<WidgetState> states) {\n  if (states.contains(WidgetState.selected)) {\n    return const BorderSide(color: Colors.red);\n  }\n  return null;\n});\n```\n\n----------------------------------------\n\nTITLE: Passing ViewModel to SubscribeButton Widget in Dart\nDESCRIPTION: This code snippet demonstrates how to pass an instance of the SubscribeButtonViewModel to the SubscribeButton widget. This enables the widget to access and interact with the ViewModel for updating the UI based on the subscription state.  The widget now requires an instance of the ViewModel to be created.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/app-architecture/design-patterns/optimistic-state.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nclass SubscribeButton extends StatefulWidget {\n  const SubscribeButton({super.key, required this.viewModel});\n\n  /// Subscribe button view model.\n  final SubscribeButtonViewModel viewModel;\n\n  @override\n  State<SubscribeButton> createState() => _SubscribeButtonState();\n}\n```\n\n----------------------------------------\n\nTITLE: Generating a List of Todos in Dart\nDESCRIPTION: This code generates a list of `Todo` objects using `List.generate`. The `List.generate` function creates 20 `Todo` instances, each with a unique title and description based on its index. This list is then used to populate a ListView.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/navigation/passing-data.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nfinal todos = List.generate(\n  20,\n  (i) => Todo(\n    'Todo $i',\n    'A description of what needs to be done for Todo $i',\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Set App Store Connect API Key Environment Variables\nDESCRIPTION: Sets the environment variables for App Store Connect API key. These variables are used by Codemagic CLI tools to authenticate with App Store Connect and automate operations like fetching signing files and publishing the app.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/deployment/macos.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nexport APP_STORE_CONNECT_ISSUER_ID=aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee\nexport APP_STORE_CONNECT_KEY_IDENTIFIER=ABC1234567\nexport APP_STORE_CONNECT_PRIVATE_KEY=`cat /path/to/api/key/AuthKey_XXXYYYZZZ.p8`\n```\n\n----------------------------------------\n\nTITLE: Create Album via HTTP POST Request in Dart\nDESCRIPTION: This function sends an HTTP POST request to create a new album on a server. It takes an album title as input, encodes it as JSON, includes it in the request body, and returns a Future containing the HTTP response.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/networking/send-data.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nFuture<http.Response> createAlbum(String title) {\n  return http.post(\n    Uri.parse('https://jsonplaceholder.typicode.com/albums'),\n    headers: <String, String>{\n      'Content-Type': 'application/json; charset=UTF-8',\n    },\n    body: jsonEncode(<String, String>{'title': title}),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Update Flutter SDK Version - YAML\nDESCRIPTION: This code snippet updates the minimum Flutter SDK version in the `pubspec.yaml` file's environment section. It sets the minimum version to 1.12.13+hotfix.6, ensuring the plugin supports the necessary features and APIs for the new embedding.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/plugin-api-migration.md#_snippet_8\n\nLANGUAGE: YAML\nCODE:\n```\nenvironment:\n      sdk: \">=2.16.1 <3.0.0\"\n      flutter: \">=1.17.0\"\n\n```\n\n----------------------------------------\n\nTITLE: Update Podfile with Flutter Module Path (Ruby)\nDESCRIPTION: This code snippet demonstrates how to update the Podfile to include the Flutter module path. It defines the path to the Flutter application and loads the `podhelper.rb` script, which is responsible for managing Flutter dependencies within the CocoaPods environment.\nSOURCE: https://github.com/flutter/website/blob/main/src/_includes/docs/add-to-app/ios-project/embed-cocoapods.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nflutter_application_path = '../my_flutter'\nload File.join(flutter_application_path, '.ios', 'Flutter', 'podhelper.rb')\n```\n\n----------------------------------------\n\nTITLE: Dart Test Group Snippet\nDESCRIPTION: Inserts a test group block for organizing unit tests. Requires the `test` package as a dependency. Input: None. Output: A basic test group block structure.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/tools/vs-code.md#_snippet_14\n\nLANGUAGE: Dart\nCODE:\n```\ngroup('My test group', () {  });\n```\n\n----------------------------------------\n\nTITLE: Aligning components horizontally/vertically - Dart (Flutter)\nDESCRIPTION: Demonstrates how to align components horizontally and vertically in Flutter using the `Row` and `Column` widgets. `mainAxisAlignment: MainAxisAlignment.center` centers the children along the main axis (horizontal for `Row`, vertical for `Column`). The `children` parameter takes a list of widgets.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/compose-devs.md#_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nRow(\n  mainAxisAlignment: MainAxisAlignment.center,\n  children: [\n    Icon(Icons.public),\n    Text('Hello, world!'),\n  ],\n),\n\nColumn(\n  mainAxisAlignment: MainAxisAlignment.center,\n  children: [\n    Icon(MaterialIcons.globe),\n    Text('Hello, world!'),\n  ],\n)\n\n```\n\n----------------------------------------\n\nTITLE: Migrate ThemeData accentColor (Flutter/Dart)\nDESCRIPTION: Shows how to migrate from using ThemeData's accentColor to using colorScheme's secondary color. This involves updating the MaterialApp's theme configuration.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/theme-data-accent-properties.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nMaterialApp(\n  theme: ThemeData(accentColor: myColor),\n  // ...\n);\n```\n\n----------------------------------------\n\nTITLE: Running Flutter Doctor Command\nDESCRIPTION: This snippet demonstrates how to execute the `flutter doctor` command in the terminal to validate the Flutter development environment. It checks for missing dependencies and potential issues with the setup.\nSOURCE: https://github.com/flutter/website/blob/main/src/_includes/docs/install/flutter-doctor.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n{{prompt}} flutter doctor\n```\n\n----------------------------------------\n\nTITLE: Setting Run Script Name\nDESCRIPTION: This snippet shows how to rename a run script in Xcode's Build Scheme pre-actions.  This provides better clarity and context for the purpose of the script.\nSOURCE: https://github.com/flutter/website/blob/main/src/_includes/docs/swift-package-manager/migrate-ios-project-manually.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nRun Prepare Flutter Framework Script\n```\n\n----------------------------------------\n\nTITLE: UserProfileRepository Class Definition (No Result)\nDESCRIPTION: Defines the UserProfileRepository class with a getUserProfile method that retrieves user profile data from the ApiClientService. It simply calls the getUserProfile method of the ApiClientService and returns the result. No error handling is performed within this repository. Dependency: ApiClientService.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/app-architecture/design-patterns/result.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nclass UserProfileRepository {\n  // ···\n\n  Future<UserProfile> getUserProfile() async {\n    return await _apiClientService.getUserProfile();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Build Flutter Web App (WebAssembly Build Mode)\nDESCRIPTION: This command builds a Flutter web application for release using the WebAssembly build mode. The `--wasm` flag makes both the `skwasm` and `canvaskit` renderers available, where `skwasm` is used if possible, falling back to `canvaskit` if WasmGC is not supported.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/platform-integration/web/renderers.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nflutter build web --wasm\n```\n\n----------------------------------------\n\nTITLE: Using a Checkbox in Flutter\nDESCRIPTION: This snippet demonstrates how to use a Checkbox widget in Flutter to toggle a boolean value. It includes setting the checkColor, value (isChecked), and onChanged callback. The onChanged callback updates the isChecked value when the checkbox is toggled, and it updates the UI using setState.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/fundamentals/user-input.md#_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nbool isChecked = false;\n\n@override\nWidget build(BuildContext context) {\n  return Checkbox(\n    checkColor: Colors.white,\n    value: isChecked,\n    onChanged: (bool? value) {\n      setState(() {\n        isChecked = value!;\n      });\n    },\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the Home Screen in Flutter\nDESCRIPTION: This code defines the home screen widget, which displays a button that launches the selection screen.  It utilizes the `Scaffold` widget for basic screen layout and contains a `SelectionButton` widget in the center.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/navigation/returning-data.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nclass HomeScreen extends StatelessWidget {\n  const HomeScreen({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: const Text('Returning Data Demo')),\n      // Create the SelectionButton widget in the next step.\n      body: const Center(child: SelectionButton()),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Check if Shift Key is Pressed - Flutter\nDESCRIPTION: This snippet provides a utility function to check if either the left or right Shift key is currently pressed.  It uses `LogicalKeyboardKey` to detect the key presses.  This is typically used as part of a multi-select implementation, allowing the user to select a range of items.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/adaptive-responsive/idioms.md#_snippet_1\n\nLANGUAGE: Dart\nCODE:\n```\nstatic bool get isSpanSelectModifierDown =>\n    isKeyDown({LogicalKeyboardKey.shiftLeft, LogicalKeyboardKey.shiftRight});\n```\n\n----------------------------------------\n\nTITLE: Creating a Page - Flutter Application Widget\nDESCRIPTION: In Flutter, the application itself is a widget. This example shows `MyApp`, a simple application `Widget` that displays a \"Hello World\" text.  It demonstrates how Flutter treats everything, even the application, as a widget.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/xamarin-forms-devs.md#_snippet_3\n\nLANGUAGE: Dart\nCODE:\n```\nclass MyApp extends StatelessWidget {\n  /// This widget is the root of your application.\n  const MyApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return const Center(\n      child: Text('Hello World!', textDirection: TextDirection.ltr),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Excluding Files in Package.swift Target\nDESCRIPTION: This snippet demonstrates how to exclude files from the target in `Package.swift`, specifically for handling `modulemap` and umbrella header files.  This is used to maintain compatibility with both CocoaPods and Swift Package Manager.\nSOURCE: https://github.com/flutter/website/blob/main/src/_includes/docs/swift-package-manager/migrate-objective-c-plugin.md#_snippet_4\n\nLANGUAGE: Swift\nCODE:\n```\n.target(\n    name: \"plugin_name\",\n    dependencies: [],\n    +     exclude: [\"include/cocoapods_plugin_name.modulemap\", \"include/plugin_name-umbrella.h\"],\n```\n\n----------------------------------------\n\nTITLE: Fetch Signing Files from App Store Connect\nDESCRIPTION: Fetches the code signing files from App Store Connect using the `app-store-connect` command.  This command requires the bundle identifier, platform, certificate type, and the path to the certificate key.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/deployment/macos.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\napp-store-connect fetch-signing-files YOUR.APP.BUNDLE_ID \\\n    --platform MAC_OS \\\n    --type MAC_APP_STORE \\\n    --certificate-key=@file:/path/to/cert_key \\\n    --create\n```\n\n----------------------------------------\n\nTITLE: Setting Initial Route with FlutterEngine (Swift)\nDESCRIPTION: This snippet shows how to initialize a FlutterEngine in Swift and set the initial route to '/onboarding'.  It runs the Flutter app from the 'main' entrypoint and specifies the initial route.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/add-to-app/ios/add-flutter-screen.md#_snippet_16\n\nLANGUAGE: Swift\nCODE:\n```\nlet flutterEngine = FlutterEngine()\n// FlutterDefaultDartEntrypoint is the same as nil, which will run main().\nengine.run(\n  withEntrypoint: \"main\", initialRoute: \"/onboarding\")\n```\n\n----------------------------------------\n\nTITLE: Analyzing Dart Code\nDESCRIPTION: Analyzes the Dart code in the current Flutter project. This command identifies potential errors, warnings, and style issues in the code.\nSOURCE: https://github.com/flutter/website/blob/main/examples/animation/animate3/README.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ndart analyze\n```\n\n----------------------------------------\n\nTITLE: Installing Android Studio Prerequisites on Linux\nDESCRIPTION: This snippet installs specific prerequisite packages required by Android Studio on Linux, specifically libc6:amd64, libstdc++6:amd64, lib32z1, and libbz2-1.0:amd64. These libraries are necessary for Android Studio to function correctly for Flutter development.\nSOURCE: https://github.com/flutter/website/blob/main/src/_includes/docs/install/reqs/linux/software.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ sudo apt-get install libc6:amd64 libstdc++6:amd64 lib32z1 libbz2-1.0:amd64\n```\n\n----------------------------------------\n\nTITLE: Updating cupertino_icons dependency to 0.1.0 in pubspec.yaml\nDESCRIPTION: This YAML snippet shows how to update the `cupertino_icons` dependency in the `pubspec.yaml` file of a Flutter project to version 0.1.0. This is the starting point before migrating to 1.0.0.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/cupertino-icons-1.0.0.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\ndependencies:\n  ... // Other dependencies\n  cupertino_icons: ^0.1.0\n```\n\n----------------------------------------\n\nTITLE: Custom Menu After Migration Dart\nDESCRIPTION: This example demonstrates the correct way to implement a custom menu with the necessary `SemanticsRole.menu` assigned. By wrapping the `CustomMenu` widget with a `Semantics` widget and specifying the role, the menu becomes accessible and adheres to the updated menu system guidelines.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/menu-semantics-roles.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nMaterialApp(\n  home: Semantics(\n    // Use `SemanticsRole.menuBar` if this is a custom menu bar.\n    role: SemanticsRole.menu,\n    child: CustomMenu(\n      children: [\n        MenuItemButton(onPressed: () {}, child: const Text('Menu item 0')),\n        MenuItemButton(onPressed: () {}, child: const Text('Menu item 1')),\n        SubmenuButton(\n          onPressed: () {}, \n          child: const Text('Submenu 0'),\n        ),\n      ],\n    ),\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Wrapping CircleListItem with ShimmerLoading in Dart\nDESCRIPTION: This code snippet shows how to wrap a `CircleListItem` widget with the `ShimmerLoading` widget, passing the `_isLoading` boolean to control the shimmer effect. This enables the shimmer effect on the circular list item when the loading state is active.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/effects/shimmer-loading.md#_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nWidget _buildTopRowItem() {\n  return ShimmerLoading(isLoading: _isLoading, child: const CircleListItem());\n}\n\n```\n\n----------------------------------------\n\nTITLE: Building Row with Unconstrained Children in Flutter\nDESCRIPTION: This example demonstrates how Row lays out its children without imposing constraints on them. The Row places the containers side-by-side, and any extra space remains empty.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/layout/constraints.md#_snippet_23\n\nLANGUAGE: dart\nCODE:\n```\n'Row(children:[\\n'   'Container(color: red, child: Text(\\'Hello!\\'))\\n'   'Container(color: green, child: Text(\\'Goodbye!\\'))]'\n```\n\n----------------------------------------\n\nTITLE: Setting ScrollBehavior for a Specific Widget - After - Flutter\nDESCRIPTION: Demonstrates setting a custom ScrollBehavior for a specific widget using ScrollConfiguration.  It wraps the ListView.builder with ScrollConfiguration, applying the custom scrolling behavior only to that part of the widget tree.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/multi-touch-scrolling.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nclass MyCustomScrollBehavior extends MaterialScrollBehavior {\n  // Override behavior methods and getters like multitouchDragStrategy\n  @override\n  MultitouchDragStrategy getMultitouchDragStrategy(BuildContext context) => MultitouchDragStrategy.sumAllPointers;\n}\n\n// ScrollBehavior can be set for a specific widget.\nfinal ScrollController controller = ScrollController();\nScrollConfiguration(\n  behavior: MyCustomScrollBehavior(),\n  child: ListView.builder(\n    controller: controller,\n    itemBuilder: (BuildContext context, int index) {\n      return Text('Item $index');\n    },\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Retrieving FlutterView ID from BuildContext in Dart\nDESCRIPTION: This Dart code demonstrates how to retrieve the `viewId` of the `FlutterView` from the `BuildContext` within a widget's `build` method. This `viewId` can be used to identify the specific view the widget is being rendered in.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/platform-integration/web/embedding-flutter-web.md#_snippet_6\n\nLANGUAGE: Dart\nCODE:\n```\nclass SomeWidget extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    // Retrieve the `viewId` where this Widget is being built:\n    final int viewId = View.of(context).viewId;\n    // ...\n\n```\n\n----------------------------------------\n\nTITLE: Migrating from opacity to alpha\nDESCRIPTION: This snippet shows the change from using the deprecated `opacity` property to directly accessing the `alpha` property of a `Color` object.  Since Flutter 3.27, alpha is stored as a floating-point value, which is more accurate than opacity.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/wide-gamut-framework.md#_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\n// Before: Access the alpha channel as a (converted) floating-point value.\nfinal x = color.opacity;\n\n// After: Access the alpha channel directly.\nfinal x = color.a;\n```\n\n----------------------------------------\n\nTITLE: Memory Leak Fix with Theme object\nDESCRIPTION: This Flutter code demonstrates how to avoid memory leaks by using a long-living `theme` object instead of directly referencing the `BuildContext` within a closure. The `theme` object is created once and shared, preventing the short-lived `BuildContext` from being retained.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/tools/devtools/memory.md#_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\n// GOOD\n@override\nWidget build(BuildContext context) {\n  final theme = Theme.of(context);\n  final handler = () => apply(theme);\n  useHandler(handler);\n…\n```\n\n----------------------------------------\n\nTITLE: Adding Internet Permission to AndroidManifest.xml (XML)\nDESCRIPTION: This XML snippet demonstrates how to add the INTERNET permission to the `AndroidManifest.xml` file in a Flutter Android project. This permission is required for the application to access the internet and fetch data from remote servers. It must be included within the `<manifest>` tag of the XML file.\nSOURCE: https://github.com/flutter/website/blob/main/src/_includes/docs/cookbook/networking/internet-permission.md#_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<!-- Required to fetch data from the internet. -->\n<uses-permission android:name=\"android.permission.INTERNET\" />\n```\n\n----------------------------------------\n\nTITLE: Customizing Flutter Configuration via URL Params (JS)\nDESCRIPTION: This JavaScript snippet demonstrates how to customize the Flutter configuration based on URL query parameters. It extracts the `renderer` parameter from the URL and uses it to configure the Flutter app via the `config` argument of `_flutter.loader.load()`. It utilizes URLSearchParams API.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/platform-integration/web/initialization.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n{% raw %}{{flutter_js}}{% endraw %}\n{% raw %}{{flutter_build_config}}{% endraw %}\n\nconst searchParams = new URLSearchParams(window.location.search);\nconst renderer = searchParams.get('renderer');\nconst userConfig = renderer ? {'renderer': renderer} : {};\n_flutter.loader.load({\n  config: userConfig,\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a List with Column in Compose (Kotlin)\nDESCRIPTION: Demonstrates creating a list of items using a Column in Jetpack Compose. It iterates through a list of Person objects and displays their names using the Text composable. This approach is suitable for small lists where all items can be displayed at once.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/compose-devs.md#_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class Person(val name: String)\n\nval people = arrayOf(\n   Person(name = \"Person 1\"),\n   Person(name = \"Person 2\"),\n   Person(name = \"Person 3\")\n)\n\n@Composable\nfun ListDemo(people: List<Person>) {\n   Column {\n      people.forEach { \n         Text(it.name)\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter Prepare Script\nDESCRIPTION: This snippet shows the shell script that needs to be added to Xcode's Build Scheme pre-actions. This script prepares the Flutter framework for building.\nSOURCE: https://github.com/flutter/website/blob/main/src/_includes/docs/swift-package-manager/migrate-ios-project-manually.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n\"$FLUTTER_ROOT/packages/flutter_tools/bin/xcode_backend.sh\" prepare\n```\n\n----------------------------------------\n\nTITLE: BuildContext: Migrate ancestorStateOfType using Generics (Dart)\nDESCRIPTION: This snippet demonstrates the migrated `ancestorStateOfType` using generics for improved type safety. It shows the new, simpler way using generics.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/1-22-deprecations.md#_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\nComplexLayoutState state = context.ancestorStateOfType<ComplexLayoutState>();\n```\n\n----------------------------------------\n\nTITLE: OverflowBox Example in Flutter\nDESCRIPTION: This demonstrates how OverflowBox allows its child to be any size, similar to UnconstrainedBox, but without displaying overflow warnings. The child Container is larger than the available space, but the OverflowBox handles this situation without generating an error.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/layout/constraints.md#_snippet_45\n\nLANGUAGE: dart\nCODE:\n```\nOverflowBox(\n  minWidth: 0,\n  minHeight: 0,\n  maxWidth: double.infinity,\n  maxHeight: double.infinity,\n  child: Container(color: red, width: 4000, height: 50),\n)\n```\n\n----------------------------------------\n\nTITLE: Declaring Image Assets in pubspec.yaml (YAML)\nDESCRIPTION: This code shows how to declare image assets in the `pubspec.yaml` file so that they can be used in your Flutter application.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/android-devs.md#_snippet_28\n\nLANGUAGE: YAML\nCODE:\n```\nassets:\n - images/my_icon.png\n```\n\n----------------------------------------\n\nTITLE: Setting Absolute Position CSS\nDESCRIPTION: Sets the absolute position of a div element using CSS. Requires a basic HTML structure. The grey-box is set to position: relative, and the red-box is set to position: absolute with top and left coordinates.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/web-devs.md#_snippet_9\n\nLANGUAGE: CSS\nCODE:\n```\n.grey-box {\n    position: relative;\n    background-color: #e0e0e0; /* grey 300 */\n    width: 320px;\n    height: 240px;\n    font: 900 24px Roboto;\n}\n.red-box {\n    background-color: #ef5350; /* red 400 */\n    padding: 16px;\n    color: #ffffff;\n    position: absolute;\n    top: 24px;\n    left: 24px;\n}\n```\n\n----------------------------------------\n\nTITLE: Navigating to a Route in Flutter\nDESCRIPTION: This example shows how to navigate to a named route in Flutter using Navigator.of(context).pushNamed(). This pushes the route with the specified name onto the navigator stack, causing the corresponding page to be displayed.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/android-devs.md#_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nNavigator.of(context).pushNamed('/b');\n```\n\n----------------------------------------\n\nTITLE: Migrate ScrollBehavior.buildViewportChrome Dart\nDESCRIPTION: This snippet demonstrates how to migrate from the deprecated `ScrollBehavior.buildViewportChrome` method in Flutter.  Instead of overriding `buildViewportChrome`, extending classes should now override `buildScrollbar` or `buildOverscrollIndicator` to customize specific decorators.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/3-3-deprecations.md#_snippet_2\n\nLANGUAGE: Dart\nCODE:\n```\nfinal ScrollBehavior scrollBehavior = ScrollBehavior();\nscrollBehavior.buildViewportChrome(context, child, axisDirection);\n```\n\nLANGUAGE: Dart\nCODE:\n```\nfinal ScrollBehavior scrollBehavior = ScrollBehavior();\nscrollBehavior.buildOverscrollIndicator(context, child, axisDirection);\n```\n\n----------------------------------------\n\nTITLE: Configure launch.json for Flutter Debugging in VS Code\nDESCRIPTION: This snippet demonstrates a `launch.json` configuration file for a Flutter project in VS Code. It defines three configurations: one for regular debugging, one for profiling, and one for release mode. The `flutterMode` parameter specifies the Flutter build mode for each configuration.\nSOURCE: https://github.com/flutter/website/blob/main/src/_includes/docs/debug/vscode-flutter-attach-json.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    // Use IntelliSense to learn about possible attributes.\n    // Hover to view descriptions of existing attributes.\n    // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n        {\n            \"name\": \"my_app\",\n            \"request\": \"launch\",\n            \"type\": \"dart\"\n        },\n        {\n            \"name\": \"my_app (profile mode)\",\n            \"request\": \"launch\",\n            \"type\": \"dart\",\n            \"flutterMode\": \"profile\"\n        },\n        {\n            \"name\": \"my_app (release mode)\",\n            \"request\": \"launch\",\n            \"type\": \"dart\",\n            \"flutterMode\": \"release\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Flutter plugin to a project using flutter pub add\nDESCRIPTION: This command adds a Flutter plugin as a dependency to the project. It modifies the pubspec.yaml file. Replace package_name with the actual name of the plugin.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/platform-integration/ios/apple-frameworks.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nflutter pub add package_name\n```\n\n----------------------------------------\n\nTITLE: Installing LXD for Snap Building\nDESCRIPTION: This command installs LXD, a container manager required by Snapcraft during the build process.  After installation, LXD needs to be initialized with `lxd init`. The default answers during initialization are suitable for most use cases.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/deployment/linux.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ sudo snap install lxd\n```\n\n----------------------------------------\n\nTITLE: Aligned Sized Container with red color Flutter\nDESCRIPTION: This snippet creates an Align widget that contains a Container widget with a specified width, height, and red background color. The Align widget positions the container at the bottom right of the screen, respecting the width and height parameters.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/layout/constraints.md#_snippet_34\n\nLANGUAGE: dart\nCODE:\n```\nAlign(\n  alignment: Alignment.bottomRight,\n  child: Container(width: 100, height: 100, color: red),\n)\n```\n\n----------------------------------------\n\nTITLE: Custom Flutter Context Menu Widget\nDESCRIPTION: This snippet defines a custom `StatelessWidget` named `_MyContextMenu` for creating a custom context menu. It receives the anchor position and a list of child widgets. The build method positions the context menu using a `Stack` and `Positioned` widgets, sets its size and background color, and arranges the children using a `Column`.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/context-menus.md#_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nclass _MyContextMenu extends StatelessWidget {\n  const _MyContextMenu({\n    required this.anchor,\n    required this.children,\n  });\n\n  final Offset anchor;\n  final List<Widget> children;\n\n  @override\n  Widget build(BuildContext context) {\n    return Stack(\n      children: <Widget>[\n        Positioned(\n          top: anchor.dy,\n          left: anchor.dx,\n          child: Container(\n            width: 200,\n            height: 200,\n            color: Colors.amberAccent,\n            child: Column(\n              children: children,\n            ),\n          ),\n        ),\n      ],\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Animation Controller Setup in Flutter\nDESCRIPTION: This snippet demonstrates how to add `SingleTickerProviderStateMixin` and instantiate an `AnimationController` within the `_MenuState` class.  The `AnimationController` is crucial for managing the timing and state of the animation.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/effects/staggered-menu-animation.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nclass _MenuState extends State<Menu> with SingleTickerProviderStateMixin {\n  late AnimationController _staggeredController;\n\n  @override\n  void initState() {\n    super.initState();\n\n    _staggeredController = AnimationController(vsync: this);\n  }\n\n  @override\n  void dispose() {\n    _staggeredController.dispose();\n    super.dispose();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Removing CocoaPod dependency in iOS Podfile\nDESCRIPTION: This snippet demonstrates how to remove a CocoaPod dependency (OCMock) from the Podfile in the example app's iOS directory. This step is necessary when migrating a Flutter plugin to Swift Package Manager and using SPM for test dependencies.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/packages-and-plugins/swift-package-manager/for-plugin-authors.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\ntarget 'RunnerTests' do\n  inherit! :search_paths\n\n-  pod 'OCMock', '3.5'\nend\n```\n\n----------------------------------------\n\nTITLE: Handling Button Press Events (Dart)\nDESCRIPTION: This snippet demonstrates how to handle button press events in Flutter using the `ElevatedButton` widget.  The `onPressed` callback function is invoked when the button is pressed, logging a message to the console. This is similar to handling click events in Xamarin.Forms.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/xamarin-forms-devs.md#_snippet_43\n\nLANGUAGE: dart\nCODE:\n```\n@override\nWidget build(BuildContext context) {\n  return ElevatedButton(\n    onPressed: () {\n      developer.log('click');\n    },\n    child: const Text('Button'),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Animate color, borderRadius, margin with AnimatedContainer - Set Animation Trigger\nDESCRIPTION: This snippet configures the ElevatedButton's onPressed() handler to call the change() method. When the button is pressed, the change() method updates the container's color, borderRadius, and margin, causing the AnimatedContainer to animate the transition.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/codelabs/implicit-animations.md#_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\n  ElevatedButton(\n    child: const Text('Change'),\n-   onPressed: () => {},\n+   onPressed: () => change(),\n  ),\n```\n\n----------------------------------------\n\nTITLE: Old dark theme defaults using TextSelectionThemeData (Dart)\nDESCRIPTION: Provides the old default color values for a dark theme before the TextSelectionTheme update.  This example shows how to maintain the previous text selection appearance in dark themes.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/text-selection-theme.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\n// Old defaults for a dark theme\nThemeData(\n  textSelectionTheme: TextSelectionThemeData(\n    cursorColor: const Color.fromRGBO(66, 133, 244, 1.0),\n    selectionColor: const Color(0xff64ffda),\n    selectionHandleColor: const Color(0xff1de9b6),\n  )\n)\n```\n\n----------------------------------------\n\nTITLE: Mirror URL Construction for SDK Download\nDESCRIPTION: This example demonstrates how to construct a mirror URL for downloading the Flutter SDK by replacing the standard Google Cloud Storage URL with a Chinese mirror URL. It assumes that the `filepath` variable has been previously generated using the Liquid snippet.\nSOURCE: https://github.com/flutter/website/blob/main/src/_includes/docs/community/china/download-urls.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nhttps://storage.googleapis.com/{{filepath}}\n```\n\nLANGUAGE: Shell\nCODE:\n```\nhttps://storage.flutter-io.cn/{{filepath}}\n```\n\n----------------------------------------\n\nTITLE: Animate color, borderRadius, margin with AnimatedContainer - Set duration\nDESCRIPTION: This snippet sets the duration for the AnimatedContainer animation to 400 milliseconds. This determines the speed of the transition between the old and new values of the animated properties.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/codelabs/implicit-animations.md#_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\n  SizedBox(\n    width: 128,\n    height: 128,\n    child: AnimatedContainer(\n      margin: EdgeInsets.all(margin),\n      decoration: BoxDecoration(\n        color: color,\n        borderRadius: BorderRadius.circular(borderRadius),\n      ),\n+     duration: const Duration(milliseconds: 400),\n    ),\n  ),\n```\n\n----------------------------------------\n\nTITLE: Creating SubscribeButton with ViewModel and Repository in Dart\nDESCRIPTION: This code snippet shows how to create the SubscribeButton widget, injecting both the SubscribeButtonViewModel and the SubscriptionRepository.  This sets up the widget with all its necessary dependencies, allowing the UI to interact with the logic and data layer.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/app-architecture/design-patterns/optimistic-state.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nSubscribeButton(\n  viewModel: SubscribeButtonViewModel(\n    subscriptionRepository: SubscriptionRepository(),\n  ),\n)\n```\n\n----------------------------------------\n\nTITLE: Print Latest Value from TextField - Flutter\nDESCRIPTION: This snippet shows how to define a function that prints the latest value of a `TextField` connected to a `TextEditingController` in Flutter. This function retrieves the current text from the controller and prints it to the console, including the character count.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/forms/text-field-changes.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nvoid _printLatestValue() {\n  final text = myController.text;\n  print('Second text field: $text (${text.characters.length})');\n}\n```\n\n----------------------------------------\n\nTITLE: Adding package to app\nDESCRIPTION: Adds `awesome_package` as a dependency to your flutter app. Run this in your app's root directory.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/design/package-fonts.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ flutter pub add awesome_package\n```\n\n----------------------------------------\n\nTITLE: Enable Repaint Highlighting - Flutter\nDESCRIPTION: This Dart code snippet shows how to enable repaint highlighting in Flutter by setting the `debugRepaintRainbowEnabled` flag to `true`. This helps identify areas of the UI that are repainting frequently, which could be a performance bottleneck. It uses the Flutter rendering library.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/tools/devtools/legacy-inspector.md#_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/rendering.dart';\n\nvoid highlightRepaints() {\n  debugRepaintRainbowEnabled = true;\n}\n```\n\n----------------------------------------\n\nTITLE: LayoutBuilder After Migration - setState added\nDESCRIPTION: This Dart code showcases the corrected Flutter widget after migration. The setState call has been added within the onPressed callback, ensuring that the UI updates correctly when the counter is incremented, thus addressing the issue introduced by the LayoutBuilder optimization.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/layout-builder-optimization.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\n\nvoid main() {\n  runApp(MyApp());\n}\n\nclass MyApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: 'Flutter Demo',\n      theme: ThemeData(\n        colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),\n      ),\n      home: Counter(),\n    );\n  }\n}\n\nclass Counter extends StatefulWidget {\n  Counter({Key key}) : super(key: key);\n\n  @override\n  _CounterState createState() => _CounterState();\n}\n\nclass _CounterState extends State<Counter> {\n  int _counter = 0;\n\n  @override\n  Widget build(BuildContext context) {\n    return Center(child: Container(\n      child: LayoutBuilder(\n        builder: (BuildContext context, BoxConstraints constraints) {\n          return _ResizingBox(\n            TextButton(\n                onPressed: () {\n                  setState(() {\n                    _counter++;\n                  });\n                },\n                child: Text('Increment Counter')),\n            Text(_counter.toString()),\n          );\n        },\n      ),\n    ));\n  }\n}\n\nclass _ResizingBox extends StatefulWidget {\n  _ResizingBox(this.child1, this.child2);\n\n  final Widget child1;\n  final Widget child2;\n\n  @override\n  State<StatefulWidget> createState() => _ResizingBoxState();\n}\n\nclass _ResizingBoxState extends State<_ResizingBox>\n    with SingleTickerProviderStateMixin {\n  Animation animation;\n\n  @override\n  void initState() {\n    super.initState();\n    animation = AnimationController(\n      vsync: this,\n      duration: const Duration(minutes: 1),\n    )\n      ..forward()\n      ..addListener(() {\n        setState(() {});\n      });\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Row(\n      mainAxisSize: MainAxisSize.min,\n      children: [\n        SizedBox(\n          width: 100 + animation.value * 100,\n          child: widget.child1,\n        ),\n        SizedBox(\n          width: 100 + animation.value * 100,\n          child: widget.child2,\n        ),\n      ],\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: BubbleBackground and BubblePainter Dart\nDESCRIPTION: This snippet defines the `BubbleBackground` stateless widget, which uses a `CustomPaint` to render the gradient bubble. It also includes an empty `BubblePainter` class, which will later be used to paint the gradient.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/effects/gradient-bubbles.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\n@immutable\nclass BubbleBackground extends StatelessWidget {\n  const BubbleBackground({super.key, required this.colors, this.child});\n\n  final List<Color> colors;\n  final Widget? child;\n\n  @override\n  Widget build(BuildContext context) {\n    return CustomPaint(painter: BubblePainter(colors: colors), child: child);\n  }\n}\n\nclass BubblePainter extends CustomPainter {\n  BubblePainter({required List<Color> colors}) : _colors = colors;\n\n  final List<Color> _colors;\n\n  @override\n  void paint(Canvas canvas, Size size) {\n    // TODO:\n  }\n\n  @override\n  bool shouldRepaint(BubblePainter oldDelegate) {\n    // TODO:\n    return false;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Processing External Window Messages in Flutter (C++)\nDESCRIPTION: This code snippet demonstrates how to integrate an external window into a Flutter Windows application's lifecycle by invoking `FlutterEngine::ProcessExternalWindowMessage` within the window's message handler (`WndProc`). This ensures the application lifecycle state is correctly updated when the external window is shown or hidden. The code returns the result of `ProcessExternalWindowMessage` if it has a value, otherwise it proceeds with the original window procedure.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/platform-integration/windows/extern_win.md#_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nLRESULT Window::Messagehandler(HWND hwnd, UINT msg, WPARAM wparam, LPARAM lparam) {\n+     std::optional<LRESULT> result = flutter_controller_->engine()->ProcessExternalWindowMessage(hwnd, msg, wparam, lparam);\n+     if (result.has_value()) {\n+         return *result;\n+     }\n      // Original contents of WndProc...\n  }\n```\n\n----------------------------------------\n\nTITLE: Analyze Dart Code (CLI)\nDESCRIPTION: This command analyzes the Dart code within the Flutter project for potential errors and warnings. It leverages the Dart analyzer to identify issues such as syntax errors, type mismatches, and unused code. This step is crucial for ensuring code quality.\nSOURCE: https://github.com/flutter/website/blob/main/examples/layout/sizing/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndart analyze\n```\n\n----------------------------------------\n\nTITLE: Creating Text Excerpts CSS\nDESCRIPTION: This CSS snippet creates a text excerpt by limiting the number of lines displayed and adding an ellipsis for overflow. It uses webkit-box-orient and webkit-line-clamp to achieve this. It relies on setting overflow to hidden and using the `-webkit-line-clamp` property, limiting to 2 lines here.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/web-devs.md#_snippet_29\n\nLANGUAGE: css\nCODE:\n```\n<div class=\"grey-box\">\n  <div class=\"red-box\">\n    Lorem ipsum dolor sit amet, consec etur\n  </div>\n</div>\n\n.grey-box {\n    background-color: #e0e0e0; /* grey 300 */\n    width: 320px;\n    height: 240px;\n    font: 900 24px Roboto;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n}\n.red-box {\n    background-color: #ef5350; /* red 400 */\n    padding: 16px;\n    color: #ffffff;\n    overflow: hidden;\n    display: -webkit-box;\n    -webkit-box-orient: vertical;\n    -webkit-line-clamp: 2;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Locale Date Patterns\nDESCRIPTION: This code defines a `const` map containing locale-specific date patterns. The patterns are used to format dates according to the conventions of the specified locale. The comment placeholders indicate where further patterns should be defined.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/accessibility-and-internationalization/internationalization.md#_snippet_34\n\nLANGUAGE: dart\nCODE:\n```\nconst nnLocaleDatePatterns = {\n  'd': 'd.',\n  'E': 'ccc',\n  'EEEE': 'cccc',\n  'LLL': 'LLL',\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Routes (Cupertino Style)\nDESCRIPTION: This code defines two basic routes, `FirstRoute` and `SecondRoute`, using `StatelessWidget` and Cupertino widgets. Each route displays a `CupertinoNavigationBar` and a `CupertinoButton`.  Tapping the button in `FirstRoute` should navigate to `SecondRoute`, and tapping the button in `SecondRoute` should navigate back to `FirstRoute`. This snippet sets up the basic UI structure but lacks the actual navigation logic, using Cupertino styling.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/navigation/navigation-basics.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nclass FirstRoute extends StatelessWidget {\n  const FirstRoute({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return CupertinoPageScaffold(\n      navigationBar: const CupertinoNavigationBar(middle: Text('First Route')),\n      child: Center(\n        child: CupertinoButton(\n          child: const Text('Open route'),\n          onPressed: () {\n            // Navigate to second route when tapped.\n          },\n        ),\n      ),\n    );\n  }\n}\n\nclass SecondRoute extends StatelessWidget {\n  const SecondRoute({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return CupertinoPageScaffold(\n      navigationBar: const CupertinoNavigationBar(middle: Text('Second Route')),\n      child: Center(\n        child: CupertinoButton(\n          onPressed: () {\n            // Navigate back to first route when tapped.\n          },\n          child: const Text('Go back!'),\n        ),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter project from Example\nDESCRIPTION: This command creates a new Flutter project in the specified directory using the source code from the example. The `--no-overwrite` flag ensures that existing files are not overwritten. $PROJECT represents the path to the app project.\nSOURCE: https://github.com/flutter/website/blob/main/examples/layout/grid_and_list/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nflutter create --no-overwrite $PROJECT\n```\n\n----------------------------------------\n\nTITLE: Create testWidgets Test Dart\nDESCRIPTION: Defines a `testWidgets` test case that verifies `MyWidget` displays a given title and message. It uses the `testWidgets` function from the `flutter_test` package to define the test.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/testing/widget/introduction.md#_snippet_2\n\nLANGUAGE: Dart\nCODE:\n```\nvoid main() {\n  // Define a test. The TestWidgets function also provides a WidgetTester\n  // to work with. The WidgetTester allows you to build and interact\n  // with widgets in the test environment.\n  testWidgets('MyWidget has a title and message', (tester) async {\n    // Test code goes here.\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Make a Network Request using HTTP GET in Dart\nDESCRIPTION: This function, `fetchAlbum`, makes an HTTP GET request to the specified URL. It returns a `Future<http.Response>`, which represents the asynchronous result of the request. The `http.Response` contains the data received from the server.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/networking/fetch-data.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nFuture<http.Response> fetchAlbum() {\n  return http.get(Uri.parse('https://jsonplaceholder.typicode.com/albums/1'));\n}\n```\n\n----------------------------------------\n\nTITLE: Complete pubspec.yaml Example\nDESCRIPTION: This shows the complete `pubspec.yaml` configuration for the sample application, including the dependency on `awesome_package` and the font asset declarations.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/design/package-fonts.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nname: package_fonts\ndescription: An example of how to use package fonts with Flutter\n\ndependencies:\n  awesome_package:\n  flutter:\n    sdk: flutter\n\ndev_dependencies:\n  flutter_test:\n    sdk: flutter\n\nflutter:\n  fonts:\n    - family: Raleway\n      fonts:\n        - asset: packages/awesome_package/fonts/Raleway-Regular.ttf\n        - asset: packages/awesome_package/fonts/Raleway-Italic.ttf\n          style: italic\n  uses-material-design: true\n```\n\n----------------------------------------\n\nTITLE: Setting Dart entrypoint (Java)\nDESCRIPTION: This Java code snippet shows how to create a FlutterFragment and specify a custom Dart entrypoint to execute.  The `dartEntrypoint` method is called with the name of the desired entrypoint, in this case \"mySpecialEntrypoint\".\nSOURCE: https://github.com/flutter/website/blob/main/src/content/add-to-app/android/add-flutter-fragment.md#_snippet_11\n\nLANGUAGE: Java\nCODE:\n```\nFlutterFragment flutterFragment = FlutterFragment.withNewEngine()\n    .dartEntrypoint(\"mySpecialEntrypoint\")\n    .build();\n```\n\n----------------------------------------\n\nTITLE: Animate color, borderRadius, margin with AnimatedContainer - Add AnimatedContainer\nDESCRIPTION: This snippet replaces a standard Container with an AnimatedContainer. By using AnimatedContainer, changes to properties like margin, decoration, color, and borderRadius will be animated automatically.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/codelabs/implicit-animations.md#_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\n  SizedBox(\n    width: 128,\n    height: 128,\n-   child: Container(\n+   child: AnimatedContainer(\n      margin: EdgeInsets.all(margin),\n      decoration: BoxDecoration(\n        color: color,\n        borderRadius: BorderRadius.circular(borderRadius),\n      ),\n    ),\n  ),\n```\n\n----------------------------------------\n\nTITLE: RouteInformation Initialization Before Migration (Dart)\nDESCRIPTION: Shows the initialization of RouteInformation using the deprecated `location` parameter. This example demonstrates how to create a RouteInformation object with a simple string location before the migration to using Uri objects.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/route-information-uri.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nconst RouteInformation myRoute = RouteInformation(location: '/myroute');\n```\n\n----------------------------------------\n\nTITLE: List Mac Installer Distribution Certificates\nDESCRIPTION: Lists the Mac Installer Distribution certificates using the `app-store-connect` command. This command requires the type of certificate and the path to the certificate key.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/deployment/macos.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\napp-store-connect certificates list \\\n    --type MAC_INSTALLER_DISTRIBUTION \\\n    --certificate-key=@file:/path/to/cert_key \\\n    --save\n```\n\n----------------------------------------\n\nTITLE: Removing buildscript Block from build.gradle (Groovy)\nDESCRIPTION: This snippet illustrates the removal of the entire buildscript block from the android/build.gradle file. This block is no longer needed when using the Plugin DSL.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/flutter-gradle-plugin-apply.md#_snippet_2\n\nLANGUAGE: Groovy\nCODE:\n```\n- buildscript {\n-     ext.kotlin_version = '{kotlinVersion}'\n-     repositories {\n-         google()\n-         mavenCentral()\n-     }\n-\n-     dependencies {\n-         classpath \"org.jetbrains.kotlin:gradle-plugin:$kotlin_version\"\n-     }\n- }\n```\n\n----------------------------------------\n\nTITLE: Migrating BinaryMessenger MockMessageHandler Calls Dart\nDESCRIPTION: This snippet demonstrates how to update tests that previously used ServicesBinding.defaultBinaryMessenger.setMockMessageHandler and ServicesBinding.defaultBinaryMessenger.checkMockMessageHandler to use tester.binding.defaultBinaryMessenger within a WidgetTester context.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/mock-platform-channels.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n// old code\nServicesBinding.defaultBinaryMessenger.setMockMessageHandler(...);\nServicesBinding.defaultBinaryMessenger.checkMockMessageHandler(...);\n// new code\ntester.binding.defaultBinaryMessenger.setMockMessageHandler(...);\ntester.binding.defaultBinaryMessenger.checkMockMessageHandler(...);\n```\n\n----------------------------------------\n\nTITLE: Setting RenderMode to TextureView (Java)\nDESCRIPTION: This Java code demonstrates how to configure a FlutterFragment to use a TextureView for rendering instead of the default SurfaceView. Two examples are shown: one using a new FlutterEngine and another using a cached FlutterEngine.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/add-to-app/android/add-flutter-fragment.md#_snippet_13\n\nLANGUAGE: Java\nCODE:\n```\n// With a new FlutterEngine.\nFlutterFragment flutterFragment = FlutterFragment.withNewEngine()\n    .renderMode(FlutterView.RenderMode.texture)\n    .build();\n\n// With a cached FlutterEngine.\nFlutterFragment flutterFragment = FlutterFragment.withCachedEngine(\"my_engine_id\")\n    .renderMode(FlutterView.RenderMode.texture)\n    .build();\n```\n\n----------------------------------------\n\nTITLE: Analyzing Dart Code\nDESCRIPTION: Analyzes the Dart code in the Flutter project to identify potential issues and errors. This helps ensure code quality and prevent runtime problems.\nSOURCE: https://github.com/flutter/website/blob/main/examples/animation/animate5/README.md#_snippet_2\n\nLANGUAGE: Dart\nCODE:\n```\ndart analyze\n```\n\n----------------------------------------\n\nTITLE: Centered Sized Container with red color Flutter\nDESCRIPTION: This snippet creates a Center widget that contains a Container widget with a specified width, height, and red background color. The Center widget allows the Container to respect the width and height parameters and centers it on the screen.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/layout/constraints.md#_snippet_33\n\nLANGUAGE: dart\nCODE:\n```\nCenter(child: Container(width: 100, height: 100, color: red))\n```\n\n----------------------------------------\n\nTITLE: Replace TimelineSummary.writeSummaryToFile with writeTimelineToFile\nDESCRIPTION: This snippet shows how to replace the `writeSummaryToFile` method of `TimelineSummary` with `writeTimelineToFile` in Flutter driver tests.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/3-19-deprecations.md#_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\nTimelineSummary summary = TimelineSummary.summarize(\n  myTimeline,\n);\nsummary.writeSummaryToFile(\n  traceName,\n  pretty: true,\n);\n```\n\nLANGUAGE: dart\nCODE:\n```\nTimelineSummary summary = TimelineSummary.summarize(\n  myTimeline,\n);\nsummary.writeTimelineToFile(\n  traceName,\n  pretty: true,\n);\n```\n\n----------------------------------------\n\nTITLE: Override shouldRepaint (Dart)\nDESCRIPTION: This snippet overrides the `shouldRepaint` method to determine when the `Flow` widget needs to be repainted. The `Flow` widget should be repainted when the `scrollable`, `listItemContext`, or `backgroundImageKey` changes.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/effects/parallax-scrolling.md#_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\n@override\nbool shouldRepaint(ParallaxFlowDelegate oldDelegate) {\n  return scrollable != oldDelegate.scrollable ||\n      listItemContext != oldDelegate.listItemContext ||\n      backgroundImageKey != oldDelegate.backgroundImageKey;\n}\n```\n\n----------------------------------------\n\nTITLE: Checking for Wasm Compilation via Number Representation (Dart)\nDESCRIPTION: This Dart code snippet determines whether the application is running with WebAssembly by comparing `double.nan` to itself using the `identical` function.  Due to differences in number representation between native (Wasm) and JavaScript, `identical` returns true only when running with Wasm.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/platform-integration/web/wasm.md#_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nfinal isRunningWithWasm = identical(double.nan, double.nan);\n```\n\n----------------------------------------\n\nTITLE: Add Flutter embed and thin script phase (Bash)\nDESCRIPTION: This script is added as a new Run Script Phase in Xcode's Build Phases for the App Clip target. It ensures that the Flutter app and engine are embedded into the App Clip bundle.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/platform-integration/ios/ios-app-clip.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n/bin/sh \"$FLUTTER_ROOT/packages/flutter_tools/bin/xcode_backend.sh\" embed_and_thin\n```\n\n----------------------------------------\n\nTITLE: Adding macOS and web support to a plugin\nDESCRIPTION: This YAML snippet extends the previous example to include support for macOS and web platforms. It shows how to add the necessary entries to the `platforms` map in the `pubspec.yaml` file.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/packages-and-plugins/developing-packages.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nflutter:\n  plugin:\n    platforms:\n      android:\n        package: com.example.hello\n        pluginClass: HelloPlugin\n      ios:\n        pluginClass: HelloPlugin\n      macos:\n        pluginClass: HelloPlugin\n      web:\n        pluginClass: HelloPlugin\n        fileName: hello_web.dart\n```\n\n----------------------------------------\n\nTITLE: WillPopScope with nested Navigators\nDESCRIPTION: Example usage of WillPopScope with nested navigators\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/android-predictive-back.md#_snippet_13\n\nLANGUAGE: dart\nCODE:\n```\nWillPopScope(\n  onWillPop: () async => !(await _nestedNavigatorKey.currentState!.maybePop()),\n  child: Navigator(\n    key: _nestedNavigatorKey,\n    …\n  ),\n)\n```\n\n----------------------------------------\n\nTITLE: Using describeEnum before migration (Dart)\nDESCRIPTION: This code snippet shows how `describeEnum` was used to convert an enum value to a string before its deprecation. It also shows usage of `EnumProperty` with non-enum types.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/describe-enum.md#_snippet_0\n\nLANGUAGE: Dart\nCODE:\n```\nenum MyEnum { paper, rock }\n\nprint(describeEnum(MyEnum.paper)); // output: paper\n\n// TextInputType is not an Enum\nproperties.add(EnumProperty<TextInputType>( ... ));\n```\n\n----------------------------------------\n\nTITLE: Flutter Desktop Entry File Example\nDESCRIPTION: This .desktop file is used to add the application to the desktop menu. It specifies the name, comment, executable, icon, and categories for the application.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/deployment/linux.md#_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\n[Desktop Entry]\nName=Super Cool App\nComment=Super Cool App that does everything\nExec=super-cool-app \nIcon=${SNAP}/meta/gui/super-cool-app.png # Replace name with your app name.\nTerminal=false\nType=Application\nCategories=Education; # Adjust accordingly your snap category.\n```\n\n----------------------------------------\n\nTITLE: Import Dart Convert for JSON Handling\nDESCRIPTION: Imports the dart:convert library in a Dart file, providing functionalities for encoding and decoding JSON data. This is essential for serializing Dart objects into JSON format for sending in HTTP requests and deserializing JSON responses from servers.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/networking/send-data.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nimport 'dart:convert';\n```\n\n----------------------------------------\n\nTITLE: Removing PlatformsViewsService.synchronizeToNativeViewHierarchy in Flutter\nDESCRIPTION: This snippet shows how to remove the deprecated `PlatformsViewsService.synchronizeToNativeViewHierarchy` method call in Flutter. This method was deprecated in v2.11 and is now a no-op, so it can be safely removed.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/3-13-deprecations.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nawait PlatformsViewsService.synchronizeToNativeViewHierarchy(false);\n```\n\nLANGUAGE: dart\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Endorsing a platform package\nDESCRIPTION: This YAML snippet demonstrates how an app-facing package endorses a platform package by adding a dependency on it and including it as a `default_package` in the `platforms` map. This allows the endorsed implementation to be automatically available to the app.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/packages-and-plugins/developing-packages.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nflutter:\n  plugin:\n    platforms:\n      android:\n        package: com.example.hello\n        pluginClass: HelloPlugin\n      ios:\n        pluginClass: HelloPlugin\n      windows:\n        default_package: hello_windows\n\ndependencies:\n  hello_windows: ^1.0.0\n```\n\n----------------------------------------\n\nTITLE: Flutter App Initialization\nDESCRIPTION: Shows how to start a Flutter app using the runApp function. This function takes an instance of the main app widget as its argument, initiating the Flutter application.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/swiftui-devs.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() {\n  runApp(const MyApp());\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Global Flutter Error Handler in Release Mode\nDESCRIPTION: This code snippet demonstrates how to set a global error handler for errors caught by Flutter. In release mode, it exits the application immediately after an error occurs.  It utilizes FlutterError.onError to catch the errors, FlutterError.presentError to print the error details, and kReleaseMode to check if the app is running in release mode.  It requires the dart:io and flutter/foundation packages.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/testing/errors.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'dart:io';\n\nimport 'package:flutter/foundation.dart';\nimport 'package:flutter/material.dart';\n\nvoid main() {\n  FlutterError.onError = (details) {\n    FlutterError.presentError(details);\n    if (kReleaseMode) exit(1);\n  };\n  runApp(const MyApp());\n}\n\n// The rest of the `flutter create` code...\n```\n\n----------------------------------------\n\nTITLE: Styling Button Colors in Compose (Kotlin)\nDESCRIPTION: This snippet demonstrates how to customize the background and text color of a button in Compose using the `ButtonDefaults.buttonColors().copy()` method. It sets the container color to yellow and the content color to blue.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/compose-devs.md#_snippet_22\n\nLANGUAGE: kotlin\nCODE:\n```\nButton(onClick = {},\n   colors = ButtonDefaults.buttonColors().copy(\n      containerColor = Color.Yellow, contentColor = Color.Blue,\n       )) {\n    Text(\"Do something\", fontSize = 30.sp, fontWeight = FontWeight.Bold)\n}\n```\n\n----------------------------------------\n\nTITLE: Import HTTP Package in Dart\nDESCRIPTION: This imports the `http` package into your Dart file, aliasing it as `http` for easier use.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/networking/update-data.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:http/http.dart' as http;\n```\n\n----------------------------------------\n\nTITLE: BuildContext: Migrate ancestorStateOfType using Generics (Dart)\nDESCRIPTION: This snippet demonstrates the migration of `ancestorStateOfType` to use generics for improved type safety. It shows the old way of casting after retrieving the state, and the new, simpler way using generics.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/1-22-deprecations.md#_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nComplexLayoutState state = context.ancestorStateOfType(const TypeMatcher<ComplexLayoutState>()) as ComplexLayoutState;\n```\n\n----------------------------------------\n\nTITLE: Handling onPressed Event on ElevatedButton\nDESCRIPTION: This code snippet shows how to handle the onPressed event of an ElevatedButton in Flutter.  When the button is pressed, the provided function is executed, logging a message to the console using dart:developer.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/uikit-devs.md#_snippet_22\n\nLANGUAGE: Dart\nCODE:\n```\n@override\nWidget build(BuildContext context) {\n  return ElevatedButton(\n    onPressed: () {\n      developer.log('click');\n    },\n    child: const Text('Button'),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Disable Deep Linking in AndroidManifest.xml (XML)\nDESCRIPTION: This code snippet shows how to disable Flutter's default deep linking by setting the `flutter_deeplinking_enabled` meta-data to `false` within your app's `AndroidManifest.xml` file. This is necessary when using third-party deep linking plugins. The `highlightLines=4` attribute indicates that line 4 is of particular importance.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/deep-links-flag-change.md#_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<manifest>\n   <application\n       <activity>\n<meta-data android:name=\"flutter_deeplinking_enabled\" android:value=\"false\" />\n       </activity>\n   </application>\n</manifest>\n```\n\n----------------------------------------\n\nTITLE: Defining a basic Command class\nDESCRIPTION: This code snippet defines a basic `Command` class that encapsulates an action and exposes its states: `running`, `error`, and `completed`. It extends `ChangeNotifier` to allow views to listen for state changes. This is a simplified version for demonstration purposes and may not include full error handling or asynchronous capabilities. Requires Flutter SDK.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/app-architecture/design-patterns/command.md#_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nclass Command extends ChangeNotifier {\n  Command(this._action);\n\n  bool get running => // ...\n\n  Exception? get error => // ...\n\n  bool get completed => // ...\n\n  void Function() _action;\n\n  void execute() {\n    // run _action\n  }\n\n  void clear() {\n    // clear state\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: ThemeData.fixTextFieldOutlineLabel Migration (Dart)\nDESCRIPTION: Demonstrates how to migrate code that uses the deprecated `ThemeData.fixTextFieldOutlineLabel` property. The property is removed, and the theme should be updated without it. The code shows the before and after migration examples using Dart.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/3-10-deprecations.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nvar themeData = ThemeData(\n  fixTextFieldOutlineLabel: true,  \n);\n```\n\nLANGUAGE: dart\nCODE:\n```\nvar themeData = ThemeData(\n);\n```\n\n----------------------------------------\n\nTITLE: Adding Play Core dependency to Android build.gradle (Groovy)\nDESCRIPTION: Adds the Play Core library as a dependency to the Android app's `build.gradle` file. This is necessary to utilize dynamic feature modules for deferred component loading on Android. Version 1.8.0 of the library is specified.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/perf/deferred-components.md#_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\n... \ndependencies {\n  ...\n  implementation \"com.google.android.play:core:1.8.0\"\n  ...\n}\n\n```\n\n----------------------------------------\n\nTITLE: Migrating Stack.overflow to Stack.clipBehavior in Dart\nDESCRIPTION: This snippet illustrates the migration from the deprecated `Stack.overflow` property (and `Overflow` enum) to the `Stack.clipBehavior` property. It shows how `Overflow.visible` should be replaced with `Clip.none`, and `Overflow.clip` should be replaced with `Clip.hardEdge`. This unifies clip behaviors across the framework.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/2-10-deprecations.md#_snippet_10\n\nLANGUAGE: Dart\nCODE:\n```\nconst Stack stack = Stack(overflow: Overflow.visible);\nconst Stack stack = Stack(overflow: Overflow.clip);\n```\n\nLANGUAGE: Dart\nCODE:\n```\nconst Stack stack = Stack(clipBehavior: Clip.none);\nconst Stack stack = Stack(clipBehavior: Clip.hardEdge);\n```\n\n----------------------------------------\n\nTITLE: Run Flutter Tests (CLI)\nDESCRIPTION: This command executes the Flutter tests defined within the project. These tests are designed to verify the correctness and reliability of the application's logic and UI components. The tests provide feedback on any regressions or issues introduced during development.\nSOURCE: https://github.com/flutter/website/blob/main/examples/layout/sizing/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nflutter test\n```\n\n----------------------------------------\n\nTITLE: Finding Category in Catalog Liquid\nDESCRIPTION: This snippet uses Liquid's `find` filter to locate a category within the `catalog.index` array based on its `name` property. The `categoryName` variable should be defined elsewhere and contain the name of the category to search for.\nSOURCE: https://github.com/flutter/website/blob/main/src/_includes/docs/catalog-page.md#_snippet_0\n\nLANGUAGE: Liquid\nCODE:\n```\n{% assign category = catalog.index | find: \"name\", categoryName %}\n```\n\n----------------------------------------\n\nTITLE: Dart Using Getter For Hot Reload\nDESCRIPTION: This Dart code defines `foo` as a `const` variable and `bar` as a getter that returns the value of `foo`. Changes to `foo` will be reflected when `bar` is accessed because the getter always returns the current value of `foo`.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/tools/hot-reload.md#_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nconst foo = 1;\nint get bar => foo; // ...or provide a getter.\nvoid onClick() {\n  print(foo);\n  print(bar);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Material Design in Flutter YAML\nDESCRIPTION: This YAML snippet configures the Flutter project to use Material Design. Adding the `uses-material-design: true` entry in the `flutter` section of `pubspec.yaml` enables the use of predefined Material icons and themes.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/index.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nname: my_app\nflutter:\n  uses-material-design: true\n```\n\n----------------------------------------\n\nTITLE: Drawing on Canvas with CustomPaint in Flutter (Dart)\nDESCRIPTION: Demonstrates drawing on the screen in Flutter using CustomPaint and CustomPainter. CustomPaint is used to specify the painter (SignaturePainter), and SignaturePainter implements the drawing algorithm using the Canvas API, drawing lines based on a list of Offset points.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/compose-devs.md#_snippet_16\n\nLANGUAGE: dart\nCODE:\n```\nCustomPaint(\n      painter: SignaturePainter(_points),\n      size: Size.infinite,\n    ),\n```\n\n----------------------------------------\n\nTITLE: Migrating NavigatorState.focusScopeNode in Flutter\nDESCRIPTION: This snippet demonstrates how to migrate from the deprecated `Navigator.of(context).focusScopeNode` property to the new `Navigator.of(context).focusNode.enclosingScope!` property. The old property accesses the `FocusScopeNode` directly, while the new property uses the `FocusNode` of the `NavigatorState` to access the enclosing scope.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/3-16-deprecations.md#_snippet_2\n\nLANGUAGE: Dart\nCODE:\n```\nNavigator.of(context).focusScopeNode;\n```\n\nLANGUAGE: Dart\nCODE:\n```\nNavigator.of(context).focusNode.enclosingScope!;\n```\n\n----------------------------------------\n\nTITLE: Install Pods (Console)\nDESCRIPTION: This command installs the necessary pods for the iOS application using CocoaPods. It should be executed from the iOS app's project directory (where the Podfile is located) to embed the Flutter components.\nSOURCE: https://github.com/flutter/website/blob/main/src/_includes/docs/add-to-app/ios-project/embed-cocoapods.md#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\npod install\n```\n\n----------------------------------------\n\nTITLE: Creating Package.swift\nDESCRIPTION: This snippet shows the template for the `Package.swift` file, which defines the plugin's metadata, dependencies, and targets.  It defines the package name, supported platforms (iOS, macOS), products (libraries), dependencies, and targets, including privacy manifest resources and C settings.\nSOURCE: https://github.com/flutter/website/blob/main/src/_includes/docs/swift-package-manager/migrate-objective-c-plugin.md#_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\n// swift-tools-version: 5.9\n// The swift-tools-version declares the minimum version of Swift required to build this package.\n\nimport PackageDescription\n\nlet package = Package(\n    // TODO: Update your plugin name.\n    name: \"plugin_name\",\n    platforms: [\n        // TODO: Update the platforms your plugin supports.\n        // If your plugin only supports iOS, remove `.macOS(...)`.\n        // If your plugin only supports macOS, remove `.iOS(...)`.\n        .iOS(\"12.0\"),\n        .macOS(\"10.14\")\n    ],\n    products: [\n        // TODO: Update your library and target names.\n        // If the plugin name contains \"_\", replace with \"-\" for the library name\n        .library(name: \"plugin-name\", targets: [\"plugin_name\"])\n    ],\n    dependencies: [],\n    targets: [\n        .target(\n            // TODO: Update your target name.\n            name: \"plugin_name\",\n            dependencies: [],\n            resources: [\n                // TODO: If your plugin requires a privacy manifest\n                // (e.g. if it uses any required reason APIs), update the PrivacyInfo.xcprivacy file\n                // to describe your plugin's privacy impact, and then uncomment this line.\n                // For more information, see:\n                // https://developer.apple.com/documentation/bundleresources/privacy_manifest_files\n                // .process(\"PrivacyInfo.xcprivacy\"),\n\n                // TODO: If you have other resources that need to be bundled with your plugin, refer to\n                // the following instructions to add them:\n                // https://developer.apple.com/documentation/xcode/bundling-resources-with-a-swift-package\n            ],\n            cSettings: [\n                // TODO: Update your plugin name.\n                .headerSearchPath(\"include/plugin_name\")\n            ]\n        )\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: InputChip - After Migration - Case 1 - Dart\nDESCRIPTION: This code snippet shows the recommended implementation of InputChip after the semantic change. The Semantics widget wrapping the label is removed, allowing the framework to handle the button semantics automatically.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/material-chip-button-semantics.md#_snippet_1\n\nLANGUAGE: Dart\nCODE:\n```\nWidget myInputChip = InputChip(\n  onPressed: () {},\n  label: Text('My Input Chip'),\n);\n```\n\n----------------------------------------\n\nTITLE: TransitionDelegate Resolve (After Migration) - Dart\nDESCRIPTION: This code snippet demonstrates the `resolve` method of a custom `TransitionDelegate` after the migration. It includes the `isWaitingForExitingDecision` check before removing the route and also renames the `isEntering` to `isWaitingForEnteringDecision`. This ensures that only routes truly waiting for a decision are processed.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/route-transition-record-and-transition-delegate.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/widgets.dart';\n\nclass NoAnimationTransitionDelegate extends TransitionDelegate<void> {\n  @override\n  Iterable<RouteTransitionRecord> resolve({\n    List<RouteTransitionRecord> newPageRouteHistory,\n    Map<RouteTransitionRecord, RouteTransitionRecord> locationToExitingPageRoute,\n    Map<RouteTransitionRecord, List<RouteTransitionRecord>> pageRouteToPagelessRoutes,\n  }) {\n    final List<RouteTransitionRecord> results = <RouteTransitionRecord>[];\n\n    for (final RouteTransitionRecord pageRoute in newPageRouteHistory) {\n      // Renames isEntering to isWaitingForEnteringDecision.\n      if (pageRoute.isWaitingForEnteringDecision) {\n        pageRoute.markForAdd();\n      }\n      results.add(pageRoute);\n\n    }\n    for (final RouteTransitionRecord exitingPageRoute in locationToExitingPageRoute.values) {\n      // Checks the isWaitingForExitingDecision before calling the markFor methods.\n      if (exitingPageRoute.isWaitingForExitingDecision) {\n        exitingPageRoute.markForRemove();\n        final List<RouteTransitionRecord> pagelessRoutes = pageRouteToPagelessRoutes[exitingPageRoute];\n        if (pagelessRoutes != null) {\n          for (final RouteTransitionRecord pagelessRoute in pagelessRoutes) {\n            pagelessRoute.markForRemove();\n          }\n        }\n      }\n      results.add(exitingPageRoute);\n\n    }\n    return results;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Create Flutter Project (CLI)\nDESCRIPTION: This command creates a new Flutter project from an existing example app. The `--no-overwrite` flag prevents overwriting existing files if the project already exists. `$PROJECT` represents the relative path to the example app.\nSOURCE: https://github.com/flutter/website/blob/main/examples/layout/sizing/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nflutter create --no-overwrite $PROJECT\n```\n\n----------------------------------------\n\nTITLE: Building Snap Package using Snapcraft\nDESCRIPTION: This command builds the snap package using Snapcraft. It creates a `.snap` file in the root project directory. Using LXD is an alternative build backend.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/deployment/linux.md#_snippet_11\n\nLANGUAGE: console\nCODE:\n```\n$ snapcraft\n```\n\n----------------------------------------\n\nTITLE: Obtain Authenticated HTTP Client\nDESCRIPTION: Obtains an authenticated HTTP client from the GoogleSignIn instance. This client includes the necessary credentials for making authenticated requests to Google APIs. The await keyword ensures that the authentication process is completed before proceeding.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/data-and-backend/google-apis.md#_snippet_4\n\nLANGUAGE: Dart\nCODE:\n```\nvar httpClient = (await _googleSignIn.authenticatedClient())!;\n```\n\n----------------------------------------\n\nTITLE: Running the Flutter Application\nDESCRIPTION: This command runs the Flutter application on a connected device or emulator. It compiles the Dart code and deploys the app to the target platform, allowing users to interact with the application's user interface and functionality.\nSOURCE: https://github.com/flutter/website/blob/main/examples/layout/lakes/step3/README.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nflutter run\n```\n\n----------------------------------------\n\nTITLE: Install CocoaPods - shell\nDESCRIPTION: Installs CocoaPods, a dependency manager for Swift and Objective-C Cocoa projects.  It uses the gem package manager and requires root privileges. This is needed if your Flutter project includes native iOS dependencies.\nSOURCE: https://github.com/flutter/website/blob/main/src/_includes/docs/install/compiler/xcode.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nsudo gem install cocoapods\n```\n\n----------------------------------------\n\nTITLE: Recreate Windows platform files\nDESCRIPTION: Recreates the Windows platform files for the Flutter project, ensuring they are compatible with Flutter 3.7 and later versions. This is a key step in enabling dark title bar support.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/windows-dark-mode.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nflutter create --platforms=windows .\n```\n\n----------------------------------------\n\nTITLE: hasScopedWillPopCallback to Route.popDisposition\nDESCRIPTION: Code before migrating from ModalRoute.hasScopedWillPopCallback to ModalRoute.popDisposition\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/android-predictive-back.md#_snippet_16\n\nLANGUAGE: dart\nCODE:\n```\nif (_route.hasScopedWillPopCallback) {\n  // Disable predictive route transitions.\n}\n```\n\n----------------------------------------\n\nTITLE: User Class with Nested Address and json_serializable in Dart\nDESCRIPTION: This snippet demonstrates a `User` class that contains a nested `Address` object. It shows how to use `@JsonSerializable` to handle nested classes and includes the necessary `fromJson` and `toJson` methods. The `explicitToJson: true` is not included here, which causes nested instances not to be serialized.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/data-and-backend/serialization/json.md#_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:json_annotation/json_annotation.dart';\n\nimport 'address.dart';\n\npart 'user.g.dart';\n\n@JsonSerializable()\nclass User {\n  User(this.name, this.address);\n\n  String name;\n  Address address;\n\n  factory User.fromJson(Map<String, dynamic> json) => _$UserFromJson(json);\n  Map<String, dynamic> toJson() => _$UserToJson(this);\n}\n```\n\n----------------------------------------\n\nTITLE: Use RouteSettings constructor in Dart\nDESCRIPTION: This snippet shows the updated code using the RouteSettings constructor to create a new instance with a new name and the old settings' arguments. This replaces the deprecated copyWith method.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/routesettings-copywith-migration.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nRouteSettings newSettings = RouteSettings(name: 'new name', arguments: oldSettings.arguments);\n```\n\n----------------------------------------\n\nTITLE: UserProfileViewModel Class Definition (Result)\nDESCRIPTION: Defines the UserProfileViewModel class. The load method now handles the Result<UserProfile> returned by the UserProfileRepository. It uses a switch statement to check whether the result is Ok or Error and handles the corresponding value or error accordingly. Dependencies: UserProfileRepository, ChangeNotifier, Result.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/app-architecture/design-patterns/result.md#_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nclass UserProfileViewModel extends ChangeNotifier {\n  // ···\n\n  UserProfile? userProfile;\n\n  Exception? error;\n\n  Future<void> load() async {\n    final result = await userProfileRepository.getUserProfile();\n    switch (result) {\n      case Ok<UserProfile>():\n        userProfile = result.value;\n      case Error<UserProfile>():\n        error = result.error;\n    }\n    notifyListeners();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Flavor specific assets path YAML\nDESCRIPTION: This code snippet demonstrates how to specify asset paths for specific Flutter flavors in the `pubspec.yaml` file. Each asset path is associated with one or more flavors.  This allows for different assets to be used for different versions or configurations of the app. The paths are defined using the 'path' key, and the associated flavors are listed under the 'flavors' key.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/tools/pubspec.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nflutter:\n  assets:\n    - path: assets/flavor_a_and_b/images\n      flavors:\n      - flavor_a\n      - flavor_b\n    - path: assets/flavor_c/images\n      flavors:\n      - flavor_c\n```\n\n----------------------------------------\n\nTITLE: Set App Store Connect API Key Env Variables\nDESCRIPTION: These commands set environment variables for the App Store Connect API key. These variables are used by the Codemagic CLI tools to authenticate with App Store Connect and automate operations such as fetching signing files and publishing the app.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/deployment/ios.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nexport APP_STORE_CONNECT_ISSUER_ID=aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee\nexport APP_STORE_CONNECT_KEY_IDENTIFIER=ABC1234567\nexport APP_STORE_CONNECT_PRIVATE_KEY=`cat /path/to/api/key/AuthKey_XXXYYYZZZ.p8`\n```\n\n----------------------------------------\n\nTITLE: Configure Ad Unit ID based on Platform\nDESCRIPTION: This code snippet shows how to determine the Ad Unit ID based on the target platform (Android or iOS) using Platform.isAndroid. This allows you to use different Ad Unit IDs for each platform, which is necessary for AdMob to correctly track ad performance. You need to replace the placeholder Ad Unit IDs with your actual Ad Unit IDs from AdMob.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/plugins/google-mobile-ads.md#_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nfinal String adUnitId =\n    Platform.isAndroid\n        // Use this ad unit on Android...\n        ? 'ca-app-pub-3940256099942544/6300978111'\n        // ... or this one on iOS.\n        : 'ca-app-pub-3940256099942544/2934735716';\n```\n\n----------------------------------------\n\nTITLE: Enable General Localization - YAML\nDESCRIPTION: This snippet demonstrates how to enable general localization support in a Flutter project by setting the `generate` field to `true` under the `flutter` section in the `pubspec.yaml` file.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/tools/pubspec.md#_snippet_16\n\nLANGUAGE: YAML\nCODE:\n```\nflutter:\n  generate: true\n```\n\n----------------------------------------\n\nTITLE: Launching Flutter DevTools for ChromeOS Android Apps (Console)\nDESCRIPTION: This snippet demonstrates how to launch Flutter DevTools for debugging Android applications running on ChromeOS. It involves running `flutter pub global run devtools` to start the DevTools server and then launching the Flutter app with the `--observatory-port` flag. The final step involves connecting to the app using the URL provided by `flutter run` in the Chrome browser.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/platform-integration/android/chromeos.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ flutter pub global run devtools --port 8000\n$ cd path/to/your/app\n$ flutter run --observatory-port=8080\n```\n\n----------------------------------------\n\nTITLE: Liquid Widget Filtering and Card Generation\nDESCRIPTION: This Liquid code snippet filters widgets based on their subcategory name using the `widget_filter`. It retrieves widgets from `catalog.widgets` and assigns filtered set to the `components` variable.  It generates a card grid containing links to the widget's documentation pages along with the widget's image and description. The description is truncated to 25 words.\nSOURCE: https://github.com/flutter/website/blob/main/src/_includes/docs/catalog-page-material.md#_snippet_2\n\nLANGUAGE: Liquid\nCODE:\n```\n{% assign components = catalog.widgets | widget_filter: \"subcategories\", sub.name %}\n{% if components.size != 0 -%}\n\n## {{sub.name}}\n\n<div class=\"card-grid material-cards\">\n  {% for comp in components -%}\n  <a class=\"card outlined-card\" href=\"{{comp.link}}\">\n    <div class=\"card-image-holder-material-3\" style=\"--bg-color: {{sub.color}}\">\n      <img alt=\"Rendered example of the {{comp.name}} Material widget.\" src=\"{{comp.image.src}}\">\n      <div class=\"card-image-material-3-hover\">\n        <img alt=\"Decorated background for material widget visualizations.\" src=\"{{comp.hoverBackground.src}}\" aria-hidden=\"true\">\n      </div>\n    </div>\n    <div class=\"card-header\">\n      <header class=\"card-title\">{{comp.name}}</header>\n    </div>\n    <div class=\"card-content\">\n      <p>{{ comp.description | truncatewords: 25 }}</p>\n    </div>\n  </a>\n  {% endfor -%}\n</div>\n\n{% endif -%}\n```\n\n----------------------------------------\n\nTITLE: Enabling Transparency (Kotlin)\nDESCRIPTION: This Kotlin code shows how to enable transparency for a FlutterFragment. Two examples are shown: one using a new FlutterEngine and another using a cached FlutterEngine.  `transparencyMode` is set to `FlutterView.TransparencyMode.transparent`. Transparency can negatively affect performance.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/add-to-app/android/add-flutter-fragment.md#_snippet_14\n\nLANGUAGE: Kotlin\nCODE:\n```\n// Using a new FlutterEngine.\nval flutterFragment = FlutterFragment.withNewEngine()\n    .transparencyMode(FlutterView.TransparencyMode.transparent)\n    .build()\n\n// Using a cached FlutterEngine.\nval flutterFragment = FlutterFragment.withCachedEngine(\"my_engine_id\")\n    .transparencyMode(FlutterView.TransparencyMode.transparent)\n    .build()\n```\n\n----------------------------------------\n\nTITLE: Set Background Color CSS\nDESCRIPTION: Sets the background color of a div element using CSS.  Sets the background color to light grey, the dimensions to 320x240 pixels, and the font to 900 24px Roboto. Requires a basic HTML structure.  Displays a grey box with text.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/web-devs.md#_snippet_2\n\nLANGUAGE: CSS\nCODE:\n```\n.grey-box {\n    background-color: #e0e0e0; /* grey 300 */\n    width: 320px;\n    height: 240px;\n    font: 900 24px Roboto;\n}\n```\n\n----------------------------------------\n\nTITLE: List YouTube Playlist Items\nDESCRIPTION: Demonstrates how to use the YouTube API to list items in a playlist. It creates a YouTubeApi instance with the authenticated HTTP client and then calls the playlistItems.list method to retrieve items from the 'Liked List' playlist.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/data-and-backend/google-apis.md#_snippet_5\n\nLANGUAGE: Dart\nCODE:\n```\nvar youTubeApi = YouTubeApi(httpClient);\n\nvar favorites = await youTubeApi.playlistItems.list(\n  ['snippet'],\n  playlistId: 'LL', // Liked List\n);\n```\n\n----------------------------------------\n\nTITLE: Example Flutter run command with staging flavor\nDESCRIPTION: This command runs the Flutter app in debug mode using the 'staging' flavor.  It requires a connected Android device or emulator.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/deployment/flavors.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ flutter run --flavor staging\n```\n\n----------------------------------------\n\nTITLE: Migrating PlatformMenuBar.body to child in Flutter\nDESCRIPTION: This snippet shows how to migrate from the deprecated `body` property of `PlatformMenuBar` to the new `child` property. It highlights the renaming of the property for better alignment with other Flutter widgets.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/3-16-deprecations.md#_snippet_3\n\nLANGUAGE: Dart\nCODE:\n```\nPlatformMenuBar(\n  body: myWidget,\n);\n```\n\nLANGUAGE: Dart\nCODE:\n```\nPlatformMenuBar(\n  child: myWidget,\n);\n```\n\n----------------------------------------\n\nTITLE: Add Certificates to Keychain\nDESCRIPTION: Adds the fetched certificates to the keychain, making them available for code signing.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/deployment/macos.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nkeychain add-certificates\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables Permanently (Windows PowerShell)\nDESCRIPTION: Example PowerShell script to set environment variables (PUB_HOSTED_URL and FLUTTER_STORAGE_BASE_URL) and add Flutter's bin directory to the PATH permanently on Windows. It also provides a command to refresh the current session's environment variables.\nSOURCE: https://github.com/flutter/website/blob/main/src/_includes/docs/community/china/os-settings.md#_snippet_6\n\nLANGUAGE: Powershell\nCODE:\n```\n   \n# cd to flutter dir\n$currentDirectory = Get-Location   \n$newPath = \"$currentDirectory\\bin;$env:PATH\"\n[System.Environment]::SetEnvironmentVariable('Path', $newPath, 'User')\n[System.Environment]::SetEnvironmentVariable('PUB_HOSTED_URL', 'https://pub.flutter-io.cn', 'User')\n[System.Environment]::SetEnvironmentVariable('FLUTTER_STORAGE_BASE_URL', 'https://storage.flutter-io.cn', 'User')\n\nWrite-Host \". $PROFILE\"\n   \n```\n\n----------------------------------------\n\nTITLE: flutter_driver: Migrate WaitUntilNoPendingFrame (Dart)\nDESCRIPTION: This snippet demonstrates migrating from `WaitUntilNoPendingFrame` to `WaitForCondition(NoPendingFrame())` in flutter_driver. The older method was deprecated and removed in favor of a composable `waitForCondition` API.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/1-22-deprecations.md#_snippet_15\n\nLANGUAGE: dart\nCODE:\n```\nWaitUntilNoPendingFrame\n```\n\n----------------------------------------\n\nTITLE: Use Shimmer Widget in ShimmerLoading in Flutter\nDESCRIPTION: Uses the `Shimmer` widget within the `ShimmerLoading` widget to paint the shared gradient.  It retrieves shimmer information from the ancestor `Shimmer` widget, checks if it is sized, calculates the offset within the shimmer, and applies a `ShaderMask` to create the shimmer effect on the child widget.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/effects/shimmer-loading.md#_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nclass _ShimmerLoadingState extends State<ShimmerLoading> {\n  @override\n  Widget build(BuildContext context) {\n    if (!widget.isLoading) {\n      return widget.child;\n    }\n\n    // Collect ancestor shimmer information.\n    final shimmer = Shimmer.of(context)!;\n    if (!shimmer.isSized) {\n      // The ancestor Shimmer widget isn't laid\n      // out yet. Return an empty box.\n      return const SizedBox();\n    }\n    final shimmerSize = shimmer.size;\n    final gradient = shimmer.gradient;\n    final offsetWithinShimmer = shimmer.getDescendantOffset(\n      descendant: context.findRenderObject() as RenderBox,\n    );\n\n    return ShaderMask(\n      blendMode: BlendMode.srcATop,\n      shaderCallback: (bounds) {\n        return gradient.createShader(\n          Rect.fromLTWH(\n            -offsetWithinShimmer.dx,\n            -offsetWithinShimmer.dy,\n            shimmerSize.width,\n            shimmerSize.height,\n          ),\n        );\n      },\n      child: widget.child,\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Flutter App\nDESCRIPTION: This snippet initializes the Flutter application with the ExampleDragAndDrop widget as the home screen. It sets up the basic MaterialApp configuration, disables the debug banner, and starts the UI rendering process.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/effects/drag-a-widget.md#_snippet_6\n\nLANGUAGE: Dart\nCODE:\n```\nimport 'package:flutter/material.dart';\n\nvoid main() {\n  runApp(\n    const MaterialApp(\n      home: ExampleDragAndDrop(),\n      debugShowCheckedModeBanner: false,\n    ),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Refresh Flutter Plugins (Console)\nDESCRIPTION: This command refreshes the Flutter plugins by running `flutter pub get` in the Flutter module directory. This step is crucial after modifying the `pubspec.yaml` file to ensure that the `podhelper.rb` script has an up-to-date list of plugins.\nSOURCE: https://github.com/flutter/website/blob/main/src/_includes/docs/add-to-app/ios-project/embed-cocoapods.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nflutter pub get\n```\n\n----------------------------------------\n\nTITLE: Verify Widget Display Integration Test\nDESCRIPTION: This snippet shows how to verify that a widget is displayed using integration_test. It first loads the main app widget using `tester.pumpWidget`. Then, it uses `expect` with the matcher `findsOneWidget` to verify that the widget is displayed.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/flutter-driver-migration.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\ntestWidgets(\n  'do not select any item, verify please select text is displayed',\n  (tester) async {\n    // load the PlantsApp widget\n    await tester.pumpWidget(const PlantsApp());\n\n    // wait for data to load\n    await tester.pumpAndSettle();\n\n    // Find widget with 'please select'\n    final finder = find.text('Please select a plant from the list.');\n\n    // Check if widget is displayed\n    expect(finder, findsOneWidget);\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Opening Xcode Archive\nDESCRIPTION: This command opens the Xcode archive file (.xcarchive) generated after building the iOS app. This allows further analysis and distribution preparation within Xcode. \nSOURCE: https://github.com/flutter/website/blob/main/src/content/perf/app-size.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nopen build/ios/archive/*.xcarchive\n```\n\n----------------------------------------\n\nTITLE: Add Private CocoaPod Dependency (Ruby)\nDESCRIPTION: This snippet configures the source for a private CocoaPod dependency, showing both GitHub and local path options for the pod's repository. It includes the tag matching the pod's version.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/packages-and-plugins/developing-packages.md#_snippet_13\n\nLANGUAGE: ruby\nCODE:\n```\ns.source = {\n    # For pods hosted on GitHub\n    :git => \"https://github.com/path/to/HelloPod.git\",\n    # Alternatively, for pods hosted locally\n    # :path => \"file:///path/to/private/repo\",\n    :tag => s.version.to_s\n  }\n```\n\n----------------------------------------\n\nTITLE: Initializing Orientation Test Group\nDESCRIPTION: This snippet sets up the basic structure for widget tests in `test/widget_test.dart`. It imports necessary Flutter packages and defines an `Orientation` test group to organize the orientation-specific tests.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/testing/widget/orientation.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\nimport 'package:flutter_test/flutter_test.dart';\nimport 'package:orientation_tests/main.dart';\n\nvoid main() {\n  group('Orientation', () {\n    // ···\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying a Simple Widget with Padding\nDESCRIPTION: This code demonstrates how to display a simple CupertinoButton widget with padding inside a Scaffold. The Scaffold provides a basic app structure with an AppBar and a body containing the button. The CupertinoButton has padding applied using EdgeInsets.only.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/uikit-devs.md#_snippet_2\n\nLANGUAGE: Dart\nCODE:\n```\n@override\nWidget build(BuildContext context) {\n  return Scaffold(\n    appBar: AppBar(title: const Text('Sample App')),\n    body: Center(\n      child: CupertinoButton(\n        onPressed: () {},\n        padding: const EdgeInsets.only(left: 10, right: 10),\n        child: const Text('Hello'),\n      ),\n    ),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Input Hint to TextField in Flutter\nDESCRIPTION: This code snippet demonstrates how to add a hint or placeholder text to a TextField widget using the InputDecoration object and its hintText property. The hint text appears when the input field is empty.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/android-devs.md#_snippet_42\n\nLANGUAGE: dart\nCODE:\n```\nCenter(\n  child: TextField(decoration: InputDecoration(hintText: 'This is a hint')),\n)\n```\n\n----------------------------------------\n\nTITLE: Camel Case Breaking Filter Liquid\nDESCRIPTION: This snippet uses a custom Liquid filter `camelCaseBreaker` to transform a camel case string into a human-readable title with spaces between words.  This filter is applied to the `comp.name` which is assumed to be camel cased.\nSOURCE: https://github.com/flutter/website/blob/main/src/_includes/docs/catalog-page.md#_snippet_5\n\nLANGUAGE: Liquid\nCODE:\n```\n{{comp.name | camelCaseBreaker}}\n```\n\n----------------------------------------\n\nTITLE: Migrate to `maybeOf` Flutter\nDESCRIPTION: This code snippet demonstrates how to migrate to the new `maybeOf` form. The `maybeOf` method returns a nullable value, which is appropriate when the value might not be present in the context.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/supplemental-maybeOf-migration.md#_snippet_1\n\nLANGUAGE: Dart\nCODE:\n```\nScrollController? controller = Scrollable.maybeOf(context);\n```\n\n----------------------------------------\n\nTITLE: ActionChip Before Migration Dart\nDESCRIPTION: Illustrates the creation of an ActionChip before the Material 3 tokens update. The snippet shows a basic ActionChip implementation with a label and an onPressed callback. The border color is implicitly derived from the default theme.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/material-design-3-token-update.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nfinal chip = ActionChip(\n  label: const Text('action chip'),\n  onPressed: () {},\n);\n```\n\n----------------------------------------\n\nTITLE: Remove Flutter PATH from .zshenv in macOS\nDESCRIPTION: This snippet shows the line that needs to be removed from the `~/.zshenv` file to remove Flutter from the system's PATH. This prevents Flutter commands from being accessible in the terminal. It assumes Flutter was installed in `$HOME/development/flutter`.\nSOURCE: https://github.com/flutter/website/blob/main/src/_includes/docs/install/reqs/macos/unset-path.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport PATH=$HOME/development/flutter/bin:$PATH\n```\n\n----------------------------------------\n\nTITLE: TextField with Unbounded Width - Problem (Dart)\nDESCRIPTION: This code snippet demonstrates the problem of a TextField within a Row that doesn't have a width constraint, leading to an error. The TextField lacks a defined width, causing the InputDecorator to throw an assertion error. This can be fixed by providing a finite width constraint to the TextField.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/testing/common-errors.md#_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nWidget build(BuildContext context) {\n  return MaterialApp(\n    home: Scaffold(\n      appBar: AppBar(title: const Text('Unbounded Width of the TextField')),\n      body: const Row(children: [TextField()]),\n    ),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Dart While Loop Snippet\nDESCRIPTION: Inserts a while loop. No dependencies are required. Input: None. Output: A basic while loop structure.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/tools/vs-code.md#_snippet_8\n\nLANGUAGE: Dart\nCODE:\n```\nwhile (condition) {  }\n```\n\n----------------------------------------\n\nTITLE: Drawing on a Canvas in React Native\nDESCRIPTION: Illustrates how to draw on a canvas using the `react-native-canvas` library in React Native. This snippet shows how to get the 2D context, set fill colors, draw shapes, and stroke the canvas.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/react-native-devs.md#_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nconst CanvasComp = () => {\n  const handleCanvas = (canvas) => {\n    const ctx = canvas.getContext('2d');\n    ctx.fillStyle = 'skyblue';\n    ctx.beginPath();\n    ctx.arc(75, 75, 50, 0, 2 * Math.PI);\n    ctx.fillRect(150, 100, 300, 300);\n    ctx.stroke();\n  };\n\n  return (\n    <View>\n      <Canvas ref={this.handleCanvas} />\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Copying and Modifying Existing ScrollBehavior - Before - Flutter\nDESCRIPTION: Illustrates the initial ListView.builder setup with a ScrollController before modifications to ScrollBehavior. It does not include custom scroll behavior logic.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/multi-touch-scrolling.md#_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nfinal ScrollController controller = ScrollController();\nListView.builder(\n  controller: controller,\n  itemBuilder: (BuildContext context, int index) {\n    return Text('Item $index');\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Applying Horizontal Linear Gradient - Dart\nDESCRIPTION: This Dart code snippet applies a horizontal linear gradient to a Container's background using BoxDecoration and LinearGradient. The gradient transitions from a shade of red to transparent. Alignment(-1.0, 0.0) and Alignment(0.6, 0.0) define the start and end points of the gradient.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/web-devs.md#_snippet_18\n\nLANGUAGE: dart\nCODE:\n```\nfinal container = Container(\n  // grey box\n  width: 320,\n  height: 240,\n  color: Colors.grey[300],\n  child: Center(\n    child: Container(\n      // red box\n      padding: const EdgeInsets.all(16),\n      decoration: const BoxDecoration(\n        gradient: LinearGradient(\n          begin: Alignment(-1.0, 0.0),\n          end: Alignment(0.6, 0.0),\n          colors: <Color>[\n            Color(0xffef5350),\n            Color(0x00ef5350),\n          ],\n        ),\n      ),\n      child: Text(\n        'Lorem ipsum',\n        style: bold24Roboto,\n      ),\n    ),\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying a grid using Grid and GridRow - SwiftUI\nDESCRIPTION: This snippet demonstrates how to display a grid using `Grid` and `GridRow` in SwiftUI.  It shows how to arrange items in a grid layout.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/swiftui-devs.md#_snippet_13\n\nLANGUAGE: Swift\nCODE:\n```\nGrid {\n  GridRow {\n    Text(\"Row 1\")\n    Image(systemName: \"square.and.arrow.down\")\n    Image(systemName: \"square.and.arrow.up\")\n  }\n  GridRow {\n    Text(\"Row 2\")\n    Image(systemName: \"square.and.arrow.down\")\n    Image(systemName: \"square.and.arrow.up\")\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Add test dependency using flutter pub\nDESCRIPTION: This command adds the `test` package as a dev dependency to your Flutter project, allowing you to write unit tests. The `dev:` prefix specifies that the dependency is only needed during development.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/testing/unit/introduction.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ flutter pub add dev:test\n```\n\n----------------------------------------\n\nTITLE: Overriding MaterialLocalizations Before Migration (Dart)\nDESCRIPTION: This code snippet illustrates how to override MaterialLocalizations to provide custom translations before the migration. The `reorderItemRight` getter is overridden in a subclass of `MaterialLocalizationsEn`.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/material-localized-strings.md#_snippet_2\n\nLANGUAGE: Dart\nCODE:\n```\nclass MaterialLocalizationsMyLanguage extends MaterialLocalizationsEn {\n  // ...\n  @override\n  String get reorderItemRight => 'my translation';\n}\n```\n\n----------------------------------------\n\nTITLE: Navigating to Project Directory\nDESCRIPTION: This command changes the current directory to the newly created Flutter project directory, enabling subsequent commands to be executed within the project's context. $PROJECT represents the path to the app project.\nSOURCE: https://github.com/flutter/website/blob/main/examples/layout/grid_and_list/README.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ncd $PROJECT\n```\n\n----------------------------------------\n\nTITLE: Run Flutter Doctor to Accept Android Licenses\nDESCRIPTION: This command is used to accept the Android SDK licenses after installing all prerequisites. It checks for unaccepted licenses and prompts the user to review and accept them. It requires Flutter to be installed and configured.\nSOURCE: https://github.com/flutter/website/blob/main/src/_includes/docs/install/compiler/android.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n{{prompt}} flutter doctor --android-licenses\n```\n\n----------------------------------------\n\nTITLE: Aligning Widgets in a Column\nDESCRIPTION: This snippet demonstrates using the `Column` widget in Flutter to arrange widgets vertically, with the `mainAxisAlignment` property set to `spaceEvenly`. This evenly distributes space between, above, and below the images. It depends on having image assets loaded. The code uses `Image.asset` to display images.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/layout/index.md#_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nColumn(\n  mainAxisAlignment: MainAxisAlignment.spaceEvenly,\n  children: [\n    Image.asset('images/pic1.jpg'),\n    Image.asset('images/pic2.jpg'),\n    Image.asset('images/pic3.jpg'),\n  ],\n);\n```\n\n----------------------------------------\n\nTITLE: Removing CupertinoTextThemeData.brightness - Dart\nDESCRIPTION: Explains that `CupertinoTextThemeData.brightness` has been deprecated and made ineffective. The migration involves removing any references to this parameter in the code.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/1-22-deprecations.md#_snippet_3\n\nLANGUAGE: Dart\nCODE:\n```\nconst CupertinoTextThemeData themeData = CupertinoTextThemeData(brightness: Brightness.dark);\nthemeData.copyWith(brightness: Brightness.light);\n```\n\nLANGUAGE: Dart\nCODE:\n```\nconst CupertinoTextThemeData themeData = CupertinoTextThemeData();\nthemeData.copyWith();\n```\n\n----------------------------------------\n\nTITLE: Image Asset Path Update - Dart\nDESCRIPTION: This snippet demonstrates the change in how image asset paths are specified. Leading slashes are no longer supported and should be removed from the path.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/release-notes/release-notes-0.0.21-1.0.0.md#_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\n// Before\nnew Image.asset('/foo/bar.png')\n\n// After:\nnew Image.asset('foo/bar.png')\n```\n\n----------------------------------------\n\nTITLE: Analyzing Dart Code\nDESCRIPTION: This command analyzes the Dart code in the Flutter project for potential errors, warnings, and style issues. It leverages the Dart analyzer tool to provide feedback on code quality and correctness.\nSOURCE: https://github.com/flutter/website/blob/main/examples/layout/lakes/step3/README.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ndart analyze\n```\n\n----------------------------------------\n\nTITLE: flutter_driver: Migrate WaitUntilNoTransientCallbacks (Dart)\nDESCRIPTION: This snippet demonstrates migrating from `WaitUntilNoTransientCallbacks` to `WaitForCondition(NoTransientCallbacks())` in flutter_driver. The older method was deprecated and removed in favor of a composable `waitForCondition` API.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/1-22-deprecations.md#_snippet_14\n\nLANGUAGE: dart\nCODE:\n```\nWaitUntilNoTransientCallbacks\n```\n\n----------------------------------------\n\nTITLE: Setting initial route (Java)\nDESCRIPTION: This Java code demonstrates how to create a FlutterFragment with a specified initial route.  A new FlutterEngine is used, and the `initialRoute` method sets the desired route to \"myInitialRoute/\".\nSOURCE: https://github.com/flutter/website/blob/main/src/content/add-to-app/android/add-flutter-fragment.md#_snippet_9\n\nLANGUAGE: Java\nCODE:\n```\n// With a new FlutterEngine.\nFlutterFragment flutterFragment = FlutterFragment.withNewEngine()\n    .initialRoute(\"myInitialRoute/\")\n    .build();\n```\n\n----------------------------------------\n\nTITLE: Pushing Named Route\nDESCRIPTION: This snippet demonstrates how to navigate to a named route in Flutter using Navigator.pushNamed. It pushes the route named '/b' onto the navigator stack, which will display the corresponding page.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/uikit-devs.md#_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nNavigator.of(context).pushNamed('/b');\n```\n\n----------------------------------------\n\nTITLE: Updating Platforms in Package.swift\nDESCRIPTION: This code snippet shows how to update the supported platforms in the Package.swift file. It highlights the iOS and macOS platform declarations and provides instructions on how to remove one if the plugin only supports the other.\nSOURCE: https://github.com/flutter/website/blob/main/src/_includes/docs/swift-package-manager/migrate-swift-plugin.md#_snippet_1\n\nLANGUAGE: Swift\nCODE:\n```\n       platforms: [\n           // TODO: Update the platforms your plugin supports.\n           // If your plugin only supports iOS, remove `.macOS(...)`.\n           // If your plugin only supports macOS, remove `.iOS(...)`.\n           [!.iOS(\"12.0\"),!]\n           [!.macOS(\"10.14\")!]\n       ],\n```\n\n----------------------------------------\n\nTITLE: Clipboard reset after migration (Dart)\nDESCRIPTION: Demonstrates the correct way to reset the clipboard text after the migration by setting the `text` argument of `ClipboardData` to an empty string `''`. This ensures consistent behavior across platforms.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/clipboard-data-required.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nvoid resetClipboard() {\n  Clipboard.setData(ClipboardData(text: ''));\n}\n```\n\n----------------------------------------\n\nTITLE: Flutter Dart SDK Initialization Output\nDESCRIPTION: This snippet shows the output in the VS Code terminal during the Flutter SDK initialization process. It includes steps like checking Dart SDK version, downloading the Dart SDK, and expanding the downloaded archive.\nSOURCE: https://github.com/flutter/website/blob/main/src/_includes/docs/install/flutter/vscode.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nChecking Dart SDK version...\nDownloading Dart SDK from the Flutter engine ...\nExpanding downloaded archive...\n```\n\n----------------------------------------\n\nTITLE: Creating an Icon List Row in Flutter\nDESCRIPTION: This code creates a row of columns, each containing an icon and two lines of text. It uses `DefaultTextStyle.merge` to apply a consistent style to the text within the row. The `iconList` variable defines the entire structure within a `Container` with padding and uses `Row` and `Column` widgets to arrange the icons and text.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/layout/index.md#_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\nconst descTextStyle = TextStyle(\n  color: Colors.black,\n  fontWeight: FontWeight.w800,\n  fontFamily: 'Roboto',\n  letterSpacing: 0.5,\n  fontSize: 18,\n  height: 2,\n);\n\n// DefaultTextStyle.merge() allows you to create a default text\n// style that is inherited by its child and all subsequent children.\nfinal iconList = DefaultTextStyle.merge(\n  style: descTextStyle,\n  child: Container(\n    padding: const EdgeInsets.all(20),\n    child: Row(\n      mainAxisAlignment: MainAxisAlignment.spaceEvenly,\n      children: [\n        Column(\n          children: [\n            Icon(Icons.kitchen, color: Colors.green[500]),\n            const Text('PREP:'),\n            const Text('25 min'),\n          ],\n        ),\n        Column(\n          children: [\n            Icon(Icons.timer, color: Colors.green[500]),\n            const Text('COOK:'),\n            const Text('1 hr'),\n          ],\n        ),\n        Column(\n          children: [\n            Icon(Icons.restaurant, color: Colors.green[500]),\n            const Text('FEEDS:'),\n            const Text('4-6'),\n          ],\n        ),\n      ],\n    ),\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Read Asset List from Flutter App (Before)\nDESCRIPTION: This code snippet demonstrates how to read the list of assets from AssetManifest.json using rootBundle before the AssetManifest API was introduced.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/asset-manifest-dot-json.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'dart:convert';\nimport 'package:flutter/services.dart';\n\nvoid readAssetList() async {\n  final assetManifestContent = await rootBundle.loadString('AssetManifest.json');\n  final decodedAssetManifest =\n      json.decode(assetManifestContent) as Map<String, Object?>;\n  final assets = decodedAssetManifest.keys.toList().cast<String>();\n}\n```\n\n----------------------------------------\n\nTITLE: Running Flutter App\nDESCRIPTION: Launches the Flutter application on a connected device or emulator. This allows the user to interact with the application and verify its behavior.\nSOURCE: https://github.com/flutter/website/blob/main/examples/layout/container/README.md#_snippet_4\n\nLANGUAGE: Dart\nCODE:\n```\nflutter run\n```\n\n----------------------------------------\n\nTITLE: Using Image.asset Widget in Flutter (Dart)\nDESCRIPTION: This example shows how to use the `Image.asset` widget in Flutter to display an image from the assets folder. It demonstrates how to include the widget within the build method.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/android-devs.md#_snippet_25\n\nLANGUAGE: Dart\nCODE:\n```\n@override\nWidget build(BuildContext context) {\n  return Image.asset('images/my_image.png');\n}\n```\n\n----------------------------------------\n\nTITLE: Console: Copying Font Files\nDESCRIPTION: This command copies TrueType font files (.ttf) from a Downloads directory into the newly created 'fonts' directory within the Flutter project.  It prepares the font files for use in the application.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/design/fonts.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ cp ~/Downloads/*.ttf ./fonts\n```\n\n----------------------------------------\n\nTITLE: Running the Flutter App\nDESCRIPTION: This command launches the Flutter application on a connected device or emulator. It compiles the Dart code and deploys the application to the target platform.\nSOURCE: https://github.com/flutter/website/blob/main/examples/layout/lakes/step4/README.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nflutter run\n```\n\n----------------------------------------\n\nTITLE: YAML Configuration for Assets in Deferred Components\nDESCRIPTION: This YAML snippet shows how to include assets in a deferred component's configuration within the `pubspec.yaml` file. It defines the `boxComponent` with a library and assets, including individual files and a wildcard directory. This configuration packages these assets with the deferred component.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/perf/deferred-components.md#_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\n  deferred-components:\n    - name: boxComponent\n      libraries:\n        - package:MyAppName/box.Dart\n      assets:\n        - assets/image.jpg\n        - assets/picture.png\n          # wildcard directory\n        - assets/gallery/\n```\n\n----------------------------------------\n\nTITLE: Creating SettingsScreen Widget in Flutter\nDESCRIPTION: Defines the SettingsScreen widget, which displays a list of rectangular containers within a SingleChildScrollView. It uses a Scaffold with an AppBar and a body containing the scrollable list. The list is generated using List.generate and each container has a fixed size and dark background.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/effects/nested-nav.md#_snippet_13\n\nLANGUAGE: Dart\nCODE:\n```\nclass SettingsScreen extends StatelessWidget {\n  const SettingsScreen({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: _buildAppBar(),\n      body: SingleChildScrollView(\n        child: Column(\n          mainAxisSize: MainAxisSize.min,\n          children: List.generate(8, (index) {\n            return Container(\n              width: double.infinity,\n              height: 54,\n              margin: const EdgeInsets.only(left: 16, right: 16, top: 16),\n              decoration: BoxDecoration(\n                borderRadius: BorderRadius.circular(8),\n                color: const Color(0xFF222222),\n              ),\n            );\n          }),\n        ),\n      ),\n    );\n  }\n\n```\n\n----------------------------------------\n\nTITLE: Disposing Firestore Controller - Dart\nDESCRIPTION: This snippet demonstrates how to dispose of the FirestoreController in the `dispose()` method of the `_PlaySessionScreenState` class.  Calling `_firestoreController?.dispose()` ensures that any active subscriptions are cancelled and resources are released to prevent memory leaks or unexpected behavior.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/games/firestore-multiplayer.md#_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\n_firestoreController?.dispose();\n```\n\n----------------------------------------\n\nTITLE: Analyzing Dart Code\nDESCRIPTION: This command analyzes the Dart code in the Flutter project for potential issues and errors. It uses the Dart analyzer to identify code quality problems and syntax errors.\nSOURCE: https://github.com/flutter/website/blob/main/examples/layout/base/README.md#_snippet_2\n\nLANGUAGE: Dart\nCODE:\n```\ndart analyze\n```\n\n----------------------------------------\n\nTITLE: Flutter Shopping List with Mutable State\nDESCRIPTION: This snippet demonstrates a `ShoppingList` widget in Flutter that uses `StatefulWidget` to manage mutable state. The `_ShoppingListState` class stores the shopping cart and updates the UI using `setState`. It takes a list of products as input and displays them using `ShoppingListItem` widgets.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/index.md#_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\n\nclass Product {\n  const Product({required this.name});\n\n  final String name;\n}\n\ntypedef CartChangedCallback = Function(Product product, bool inCart);\n\nclass ShoppingListItem extends StatelessWidget {\n  ShoppingListItem({\n    required this.product,\n    required this.inCart,\n    required this.onCartChanged,\n  }) : super(key: ObjectKey(product));\n\n  final Product product;\n  final bool inCart;\n  final CartChangedCallback onCartChanged;\n\n  Color _getColor(BuildContext context) {\n    // The theme depends on the BuildContext because different\n    // parts of the tree can have different themes.\n    // The BuildContext indicates where the build is\n    // taking place and therefore which theme to use.\n\n    return inCart //\n        ? Colors.black54\n        : Theme.of(context).primaryColor;\n  }\n\n  TextStyle? _getTextStyle(BuildContext context) {\n    if (!inCart) return null;\n\n    return const TextStyle(\n      color: Colors.black54,\n      decoration: TextDecoration.lineThrough,\n    );\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return ListTile(\n      onTap: () {\n        onCartChanged(product, inCart);\n      },\n      leading: CircleAvatar(\n        backgroundColor: _getColor(context),\n        child: Text(product.name[0]),\n      ),\n      title: Text(product.name, style: _getTextStyle(context)),\n    );\n  }\n}\n\nclass ShoppingList extends StatefulWidget {\n  const ShoppingList({required this.products, super.key});\n\n  final List<Product> products;\n\n  // The framework calls createState the first time\n  // a widget appears at a given location in the tree.\n  // If the parent rebuilds and uses the same type of\n  // widget (with the same key), the framework re-uses\n  // the State object instead of creating a new State object.\n\n  @override\n  State<ShoppingList> createState() => _ShoppingListState();\n}\n\nclass _ShoppingListState extends State<ShoppingList> {\n  final _shoppingCart = <Product>{};\n\n  void _handleCartChanged(Product product, bool inCart) {\n    setState(() {\n      // When a user changes what's in the cart, you need\n      // to change _shoppingCart inside a setState call to\n      // trigger a rebuild.\n      // The framework then calls build, below,\n      // which updates the visual appearance of the app.\n\n      if (!inCart) {\n        _shoppingCart.add(product);\n      } else {\n        _shoppingCart.remove(product);\n      }\n    });\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: const Text('Shopping List')),\n      body: ListView(\n        padding: const EdgeInsets.symmetric(vertical: 8),\n        children:\n            widget.products.map((product) {\n              return ShoppingListItem(\n                product: product,\n                inCart: _shoppingCart.contains(product),\n                onCartChanged: _handleCartChanged,\n              );\n            }).toList(),\n      ),\n    );\n  }\n}\n\nvoid main() {\n  runApp(\n    const MaterialApp(\n      title: 'Shopping App',\n      home: ShoppingList(\n        products: [\n          Product(name: 'Eggs'),\n          Product(name: 'Flour'),\n          Product(name: 'Chocolate chips'),\n        ],\n      ),\n    ),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Navigate to Android Directory - Console\nDESCRIPTION: This command navigates to the `android` directory within your Flutter project. This is a prerequisite for running Gradle commands related to the Android build process.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/android-java-gradle-migration-guide.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ cd android\n```\n\n----------------------------------------\n\nTITLE: Enabling Swift Package Manager Configuration Shell\nDESCRIPTION: This snippet shows how to enable the Swift Package Manager feature in Flutter. This is used for verifying the plugin works with Swift Package Manager.\nSOURCE: https://github.com/flutter/website/blob/main/src/_includes/docs/swift-package-manager/migrate-objective-c-plugin.md#_snippet_19\n\nLANGUAGE: sh\nCODE:\n```\nflutter config --enable-swift-package-manager\n```\n\n----------------------------------------\n\nTITLE: Add Flutter SDK to PATH Prompt (Windows)\nDESCRIPTION: This snippet shows the prompt displayed in VS Code (specifically on Windows) asking if the Flutter SDK should be added to the system PATH. This allows the `flutter` command to be accessible in external terminals.\nSOURCE: https://github.com/flutter/website/blob/main/src/_includes/docs/install/flutter/vscode.md#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\nDo you want to add the Flutter SDK to PATH so it's accessible\nin external terminals?\n```\n\n----------------------------------------\n\nTITLE: Migrate FloatingHeaderSnapConfiguration.vsync in Dart\nDESCRIPTION: This snippet illustrates how to migrate the deprecated `vsync` property from `FloatingHeaderSnapConfiguration` to `SliverPersistentHeaderDelegate.vsync`. Instead of specifying `vsync` within `FloatingHeaderSnapConfiguration`, it should now be specified in the `SliverPersistentHeaderDelegate` class.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/2-5-deprecations.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nclass MySliverPersistentHeaderDelegate extends SliverPersistentHeaderDelegate {\n  FloatingHeaderSnapConfiguration? get snapConfiguration => FloatingHeaderSnapConfiguration(vsync: myTickerProvider);\n}\n```\n\nLANGUAGE: dart\nCODE:\n```\nclass MySliverPersistentHeaderDelegate extends SliverPersistentHeaderDelegate {\n  FloatingHeaderSnapConfiguration? get snapConfiguration => FloatingHeaderSnapConfiguration();\n  TickerProvider? get vsync => myTickerProvider;\n}\n\n```\n\n----------------------------------------\n\nTITLE: TargetPlatform Enum Definition Before Update - Dart\nDESCRIPTION: This snippet shows the definition of the TargetPlatform enum before the addition of 'linux' and 'windows'. It highlights the original four supported platforms: android, fuchsia, iOS, and macOS. This is the enum definition that existed before Flutter version 1.15.4.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/target-platform-linux-windows.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nenum TargetPlatform {\n  android,\n  fuchsia,\n  iOS,\n  macOS,\n}\n```\n\n----------------------------------------\n\nTITLE: flutter_driver: Migrate to WaitForCondition(NoTransientCallbacks()) (Dart)\nDESCRIPTION: This snippet shows the updated method to use for `WaitUntilNoTransientCallbacks`\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/1-22-deprecations.md#_snippet_17\n\nLANGUAGE: dart\nCODE:\n```\nWaitForCondition(NoTransientCallbacks())\n```\n\n----------------------------------------\n\nTITLE: Analyzing Dart Code\nDESCRIPTION: This command performs static analysis on the Dart code within the project. It helps identify potential errors, style issues, and other code quality problems.\nSOURCE: https://github.com/flutter/website/blob/main/examples/layout/non_material/README.md#_snippet_2\n\nLANGUAGE: Dart\nCODE:\n```\ndart analyze\n```\n\n----------------------------------------\n\nTITLE: Defining profileImplementation Configuration (Kotlin)\nDESCRIPTION: This snippet defines a custom configuration called `profileImplementation` in the `app/build.gradle.kts` file. This configuration is used to include the profile variant of the Flutter module AAR.  It is necessary for including the profile version of the Flutter module.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/add-to-app/android/project-setup.md#_snippet_11\n\nLANGUAGE: Kotlin\nCODE:\n```\nconfigurations {\n    getByName(\"profileImplementation\") {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Chip: After Migration - deleteButtonTooltipMessage\nDESCRIPTION: This code snippet shows the updated implementation using the deleteButtonTooltipMessage property. To disable the tooltip, an empty string is assigned to the property. To enable the tooltip, the property is omitted, as it defaults to enabled.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/chip-usedeletebuttontooltip-migration.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nChip(\n  label: const Text('Disabled delete button tooltip'),\n  onDeleted: _handleDeleteChip,\n  deleteButtonTooltipMessage: '',\n);\n\nRawChip(\n  label: const Text('Enabled delete button tooltip'),\n  onDeleted: _handleDeleteChip,\n);\n```\n\n----------------------------------------\n\nTITLE: Deprecated attachToActivity signature Java\nDESCRIPTION: This code snippet shows the deprecated `attachToActivity` method signature.  It takes an `Activity` and a `Lifecycle` object as parameters. This method has been removed in Flutter 2.0.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/android-activity-control-surface-attach.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nvoid attachToActivity(@NonNull Activity activity, @NonNull Lifecycle lifecycle);\n```\n\n----------------------------------------\n\nTITLE: Import HTTP Package in Dart\nDESCRIPTION: Imports the http package in a Dart file to enable the use of HTTP client functionalities. This import statement allows access to classes and methods provided by the http package, aliased as 'http'.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/networking/send-data.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:http/http.dart' as http;\n```\n\n----------------------------------------\n\nTITLE: Building Flutter Windows App with Debug Configuration\nDESCRIPTION: This command builds a Flutter application for the Windows platform in debug mode. It generates the necessary platform-specific dependencies and compiles the application executable.\nSOURCE: https://github.com/flutter/website/blob/main/src/_includes/docs/debug/debug-flow-windows.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nC:\\> flutter build windows --debug\n```\n\n----------------------------------------\n\nTITLE: Access image asset using AssetImage - Dart\nDESCRIPTION: This snippet showcases how to access an image asset using the `AssetImage` class within an `Image` widget. It is an alternative approach to displaying images from the asset bundle.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/xamarin-forms-devs.md#_snippet_31\n\nLANGUAGE: dart\nCODE:\n```\n@override\nWidget build(BuildContext context) {\n  return const Image(image: AssetImage('images/my_image.png'));\n}\n```\n\n----------------------------------------\n\nTITLE: Flutter Localizations Dependency - YAML\nDESCRIPTION: This snippet showcases how to add a dependency on `flutter_localizations` within the `pubspec.yaml` file to enable the localization of ARB files. It is often used with the `intl` package.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/tools/pubspec.md#_snippet_26\n\nLANGUAGE: YAML\nCODE:\n```\ndependencies:\n  flutter_localizations:\n    sdk: flutter\n  intl: ^0.18.0\n```\n\n----------------------------------------\n\nTITLE: Run Dart Doc (Windows)\nDESCRIPTION: This console command executes the `dart doc` tool, which is part of the Flutter SDK, on Windows, to generate API documentation for a Dart package.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/packages-and-plugins/developing-packages.md#_snippet_28\n\nLANGUAGE: console\nCODE:\n```\n   %FLUTTER_ROOT%\\bin\\cache\\dart-sdk\\bin\\dart doc  # on Windows\n```\n\n----------------------------------------\n\nTITLE: Disable Flutter Deep Linking - Android\nDESCRIPTION: This snippet shows how to disable Flutter's default deep link handler in Android by setting `flutter_deeplinking_enabled` to false in `AndroidManifest.xml`. This is necessary when migrating from a plugin-based deep linking solution.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/navigation/deep-linking.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n`flutter_deeplinking_enabled` to false in `AndroidManifest.xml`\n```\n\n----------------------------------------\n\nTITLE: Running a Flutter Web App in Chrome\nDESCRIPTION: This command runs the Flutter web application in the Chrome browser. It launches the application and enables debugging. Chrome needs to be installed on your machine. This uses the default rendering mode.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/platform-integration/web/building.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ flutter run -d chrome\n```\n\n----------------------------------------\n\nTITLE: Code Before Migration: Using display and sheetSize in Dart\nDESCRIPTION: This code snippet illustrates the old way of using AnimationSheetBuilder, which involves setting the surface size using sheetSize, displaying the widget using display, and then performing golden file matching. These methods are now deprecated.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/animation-sheet-builder-display.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\n  testWidgets('Indeterminate CircularProgressIndicator', (WidgetTester tester) async {\n    final AnimationSheetBuilder animationSheet = AnimationSheetBuilder(frameSize: const Size(40, 40));\n\n    await tester.pumpFrames(animationSheet.record(\n      const Directionality(\n        textDirection: TextDirection.ltr,\n        child: Padding(\n          padding: EdgeInsets.all(4),\n          child: CircularProgressIndicator(),\n        ),\n      ),\n    ), const Duration(seconds: 2));\n\n    // The code starting here needs migration.\n\n    tester.binding.setSurfaceSize(animationSheet.sheetSize());\n\n    final Widget display = await animationSheet.display();\n    await tester.pumpWidget(display);\n\n    await expectLater(\n      find.byWidget(display),\n      matchesGoldenFile('material.circular_progress_indicator.indeterminate.png'),\n    );\n  }, skip: isBrowser); // https://github.com/flutter/flutter/issues/42767\n```\n\n----------------------------------------\n\nTITLE: Getting Flutter Version Information (console)\nDESCRIPTION: This code snippet demonstrates how to retrieve the current version of the Flutter SDK, including its framework, engine, and tools using the `flutter --version` command.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/reference/flutter-cli.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ flutter --version\n```\n\n----------------------------------------\n\nTITLE: Styling Text in Compose (Kotlin) - Multiple Properties\nDESCRIPTION: Demonstrates styling text in Jetpack Compose using individual properties on the Text composable. Color, fontWeight and fontSize are all applied directly to the Text component.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/compose-devs.md#_snippet_19\n\nLANGUAGE: kotlin\nCODE:\n```\nText(\"Hello, world!\", color = Color.Green,\n        fontWeight = FontWeight.Bold, fontSize = 30.sp)\n```\n\n----------------------------------------\n\nTITLE: Installing ChromeDriver using Puppeteer\nDESCRIPTION: This command uses the `@puppeteer/browsers` Node library to install the stable version of ChromeDriver. This is a prerequisite for running Flutter integration tests in a Chrome web browser.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/testing/integration-tests/index.md#_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n$ npx @puppeteer/browsers install chromedriver@stable\n```\n\n----------------------------------------\n\nTITLE: Running Flutter Tests\nDESCRIPTION: Executes the Flutter tests defined in the project to verify the functionality and correctness of the code. Ensures that the app behaves as expected.\nSOURCE: https://github.com/flutter/website/blob/main/examples/animation/animate5/README.md#_snippet_3\n\nLANGUAGE: Dart\nCODE:\n```\nflutter test\n```\n\n----------------------------------------\n\nTITLE: Declaring Strings for Localization in Flutter\nDESCRIPTION: This snippet shows the recommended way to declare copy text in Flutter using a class with static fields. This allows easy access to strings throughout the application.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/uikit-devs.md#_snippet_13\n\nLANGUAGE: dart\nCODE:\n```\nclass Strings {\n  static const String welcomeMessage = 'Welcome To Flutter';\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying AndroidManifest.xml to set styles\nDESCRIPTION: This XML snippet demonstrates how to specify the style in the Android manifest file. It shows the meta-data tag that references the style NormalTheme, which needs to be modified to opt-out of edge-to-edge behavior. This involves locating the meta-data tag within the activity tag and identifying the style resource.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/default-systemuimode-edge-to-edge.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\">\n    <application ...>\n        <activity ...>\n            <!-- Style to modify: -->\n            <meta-data\n              android:name=\"io.flutter.embedding.android.NormalTheme\"\n              android:resource=\"@style/NormalTheme\"\n            />\n        </activity>\n    </application>\n</manifest>\n```\n\n----------------------------------------\n\nTITLE: Setting ScrollBehavior for a Specific Widget - Before - Flutter\nDESCRIPTION: Shows a basic ListView.builder setup with a ScrollController before the ScrollBehavior changes.  It lacks explicit scroll behavior configuration.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/multi-touch-scrolling.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nfinal ScrollController controller = ScrollController();\nListView.builder(\n  controller: controller,\n  itemBuilder: (BuildContext context, int index) {\n    return Text('Item $index');\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: ThemeData without ButtonBarThemeData (After Migration) - Dart\nDESCRIPTION: This code snippet demonstrates the updated ThemeData, showing the removal of buttonBarTheme. The OverflowBar widget itself should be customized directly.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/deprecate-buttonbar.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nThemeData(\n  // ...\n),\n```\n\n----------------------------------------\n\nTITLE: Creating a new Flutter Project\nDESCRIPTION: This command creates a new Flutter project of a specified type at a given path. It's used as an alternative to Android Studio for migrating to AndroidX by creating a new project and moving code/assets.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/androidx-migration.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nflutter create -t <project-type> <new-project-path>\n```\n\n----------------------------------------\n\nTITLE: Close WebSocket Connection in Flutter\nDESCRIPTION: Closes the WebSocket connection using the `channel.sink.close()` method. This terminates the connection to the WebSocket server and releases associated resources. It's important to close the connection when it's no longer needed.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/networking/web-sockets.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nchannel.sink.close();\n```\n\n----------------------------------------\n\nTITLE: Using TextStyle with Package Font\nDESCRIPTION: This code shows how to apply a font from a package using the TextStyle. It specifies the `Raleway` font family to style a Text widget.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/design/package-fonts.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nchild: Text(\n  'Using the Raleway font from the awesome_package',\n  style: TextStyle(fontFamily: 'Raleway'),\n),\n```\n\n----------------------------------------\n\nTITLE: Building iOS IPA\nDESCRIPTION: This command builds an IPA file for iOS, which can then be analyzed using Xcode to estimate app size. The `--export-method development` flag is used to create a development build for analysis, not for distribution.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/perf/app-size.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nflutter build ipa --export-method development\n```\n\n----------------------------------------\n\nTITLE: Setting RenderMode to TextureView (Kotlin)\nDESCRIPTION: This Kotlin code demonstrates how to configure a FlutterFragment to use a TextureView for rendering instead of the default SurfaceView. Two examples are shown: one using a new FlutterEngine and another using a cached FlutterEngine.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/add-to-app/android/add-flutter-fragment.md#_snippet_12\n\nLANGUAGE: Kotlin\nCODE:\n```\n// With a new FlutterEngine.\nval flutterFragment = FlutterFragment.withNewEngine()\n    .renderMode(FlutterView.RenderMode.texture)\n    .build()\n\n// With a cached FlutterEngine.\nval flutterFragment = FlutterFragment.withCachedEngine(\"my_engine_id\")\n    .renderMode(FlutterView.RenderMode.texture)\n    .build()\n```\n\n----------------------------------------\n\nTITLE: Flutter Asset Declaration YAML\nDESCRIPTION: This YAML snippet shows how to declare assets in the `pubspec.yaml` file for a Flutter project.  The assets are specified under the `flutter` section, which allows the Flutter app to access these assets at runtime. The asset path is relative to the root of the Flutter project.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/assets/assets-and-images.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nflutter:\n  assets:\n    - icons/heart.png\n```\n\n----------------------------------------\n\nTITLE: Removing Custom Golden File Comparator (Migration)\nDESCRIPTION: This code snippet shows the recommended migration path by removing custom `goldenFileComparator` overrides to rely on the new default behavior. This approach leverages the fix in the integration_test package.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/integration-test-default-golden-comparator.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:integration_test/integration_test.dart';\n-import 'package:my_integration_test/custom_golden_file_comparator.dart';\n\nvoid main() {\n-  goldenFileComparator = CustomGoldenFileComparatorThatWorks();\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Display button shape based on download status in Dart\nDESCRIPTION: This code creates a `ButtonShapeWidget` that displays either a rounded rectangle (StadiumBorder) or a transparent circle (CircleBorder) based on the `DownloadStatus`. It uses `AnimatedContainer` to animate the shape change. The `DownloadButton`'s build method is updated to use `ButtonShapeWidget`.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/effects/download-button.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\n@immutable\nclass DownloadButton extends StatelessWidget {\n  const DownloadButton({\n    super.key,\n    required this.status,\n    this.transitionDuration = const Duration(milliseconds: 500),\n  });\n\n  final DownloadStatus status;\n  final Duration transitionDuration;\n\n  bool get _isDownloading => status == DownloadStatus.downloading;\n\n  bool get _isFetching => status == DownloadStatus.fetchingDownload;\n\n  bool get _isDownloaded => status == DownloadStatus.downloaded;\n\n  @override\n  Widget build(BuildContext context) {\n    return ButtonShapeWidget(\n      transitionDuration: transitionDuration,\n      isDownloaded: _isDownloaded,\n      isDownloading: _isDownloading,\n      isFetching: _isFetching,\n    );\n  }\n}\n\n@immutable\nclass ButtonShapeWidget extends StatelessWidget {\n  const ButtonShapeWidget({\n    super.key,\n    required this.isDownloading,\n    required this.isDownloaded,\n    required this.isFetching,\n    required this.transitionDuration,\n  });\n\n  final bool isDownloading;\n  final bool isDownloaded;\n  final bool isFetching;\n  final Duration transitionDuration;\n\n  @override\n  Widget build(BuildContext context) {\n    final ShapeDecoration shape;\n    if (isDownloading || isFetching) {\n      shape = const ShapeDecoration(\n        shape: CircleBorder(),\n        color: Colors.transparent,\n      );\n    } else {\n      shape = const ShapeDecoration(\n        shape: StadiumBorder(),\n        color: CupertinoColors.lightBackgroundGray,\n      );\n    }\n\n    return AnimatedContainer(\n      duration: transitionDuration,\n      curve: Curves.ease,\n      width: double.infinity,\n      decoration: shape,\n      child: const SizedBox(),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Unbounded Height Problem with ListView in Flutter\nDESCRIPTION: This code demonstrates the issue of an unbounded height when a ListView is placed inside a Column in Flutter. The ListView, by default, takes all the vertical space available to it, while the Column doesn't impose any height constraints on its children. This combination results in the failure to determine the size of the ListView, causing the 'Vertical viewport was given unbounded height' error.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/testing/common-errors.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nWidget build(BuildContext context) {\n  return Center(\n    child: Column(\n      children: <Widget>[\n        const Text('Header'),\n        ListView(\n          children: const <Widget>[\n            ListTile(leading: Icon(Icons.map), title: Text('Map')),\n            ListTile(leading: Icon(Icons.subway), title: Text('Subway')),\n          ],\n        ),\n      ],\n    ),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Running Flutter App\nDESCRIPTION: Runs the Flutter application on a connected device or emulator. This starts the application and allows users to interact with it.\nSOURCE: https://github.com/flutter/website/blob/main/examples/animation/animate3/README.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nflutter run\n```\n\n----------------------------------------\n\nTITLE: Building a GestureDetector Widget in Flutter (Before Change)\nDESCRIPTION: This Dart code snippet demonstrates the initial state of a Flutter application using a `GestureDetector` widget. The `MyApp` widget, a `StatelessWidget`, returns a `GestureDetector` that prints 'tapped' to the console when tapped. This is the original code before a change meant to be hot-reloaded.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/tools/hot-reload.md#_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\n\nvoid main() {\n  runApp(MyApp());\n}\n\nclass MyApp extends StatelessWidget {\n  const MyApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return GestureDetector(onTap: () => print('tapped'));\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Product Flavors in build.gradle.kts\nDESCRIPTION: This Kotlin snippet demonstrates how to add 'staging' and 'production' product flavors to the Android build configuration. It defines flavor dimensions and sets the applicationIdSuffix for each flavor.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/deployment/flavors.md#_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\nandroid {\n    ...\n    buildTypes {\n      getByName(\"debug\") {...}\n      getByName(\"release\") {...}\n    }\n    ...\n    flavorDimensions += \"default\"\n    productFlavors {\n        create(\"staging\") {\n            dimension = \"default\"\n            applicationIdSuffix = \".staging\"\n        }\n        create(\"production\") {\n            dimension = \"default\"\n            applicationIdSuffix = \".production\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing ParallaxRecipe Widget in Flutter\nDESCRIPTION: This snippet initializes the ParallaxRecipe widget, which contains a SingleChildScrollView and a Column to hold the parallax items. It currently returns an empty Column within a SingleChildScrollView.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/effects/parallax-scrolling.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nclass ParallaxRecipe extends StatelessWidget {\n  const ParallaxRecipe({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return const SingleChildScrollView(child: Column(children: []));\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding User to LXD Group\nDESCRIPTION: This command adds the current user to the `lxd` group, granting the necessary permissions to interact with the LXD socket.  After running this command, the user must log out and log back in for the changes to take effect.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/deployment/linux.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ sudo usermod -a -G lxd <your username>\n```\n\n----------------------------------------\n\nTITLE: TextInputClient Implementation (Empty Implementation)\nDESCRIPTION: Shows how to implement the `insertContent` method with an empty body. If the application doesn't need to receive rich content it can be implemented with an empty body.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/insert-content-text-input-client.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nclass MyCustomTextInputClient implements TextInputClient {\n  // ...\n  @override\n  void insertContent() {}\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Impeller on macOS using Info.plist\nDESCRIPTION: This XML snippet demonstrates how to enable Impeller when deploying a Flutter application on macOS. By adding the `FLTEnableImpeller` key with a value of `true` to the `Info.plist` file, Impeller is enabled for the application.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/perf/impeller.md#_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n  <key>FLTEnableImpeller</key>\n  <true />\n```\n\n----------------------------------------\n\nTITLE: Dart Main Function Snippet\nDESCRIPTION: Inserts a main function, which serves as the entry point of a Dart program. No dependencies are required. Input: None. Output: A basic main function structure.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/tools/vs-code.md#_snippet_1\n\nLANGUAGE: Dart\nCODE:\n```\nvoid main(List<String> args) {  }\n```\n\n----------------------------------------\n\nTITLE: Analyzing Dart Code\nDESCRIPTION: This command analyzes the Dart code within the Flutter project for potential errors, warnings, and style issues. It helps identify and resolve code quality problems before running the application.\nSOURCE: https://github.com/flutter/website/blob/main/examples/layout/grid_and_list/README.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ndart analyze\n```\n\n----------------------------------------\n\nTITLE: Managing Flutter Views from JavaScript\nDESCRIPTION: This JavaScript code shows how to add and remove Flutter views dynamically.  `app.addView` adds a new Flutter view associated with a host element. `app.removeView` removes a previously added view by its ID.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/platform-integration/web/embedding-flutter-web.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Adding a view...\nlet viewId = app.addView({\n  hostElement: document.querySelector('#some-element'),\n});\n\n// Removing viewId...\nlet viewConfig = app.removeView(viewId);\n```\n\n----------------------------------------\n\nTITLE: Create a Container Widget Dart\nDESCRIPTION: Creates a simple Container widget with a specified width, height, and color.  This is used as the widget to be animated with opacity. It's the foundation for the fading effect.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/animation/opacity-animation.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nContainer(width: 200, height: 200, color: Colors.green)\n```\n\n----------------------------------------\n\nTITLE: Setting PUB_HOSTED_URL Environment Variable\nDESCRIPTION: Sets the PUB_HOSTED_URL environment variable to the specified mirror site, which is used for resolving package dependencies. This allows the Flutter toolchain to download packages from a faster source.\nSOURCE: https://github.com/flutter/website/blob/main/src/_includes/docs/community/china/os-settings.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n{{envvarset}}PUB_HOSTED_URL=\"https://pub.flutter-io.cn\"\n```\n\n----------------------------------------\n\nTITLE: Example .flutter-plugins file\nDESCRIPTION: This plaintext snippet shows the old `.flutter-plugins` file format, which maps plugin names to their paths. This format is deprecated and replaced by `.flutter-plugins-dependencies`.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/flutter-plugins-configuration.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ncamera=/path/to/camera/plugin\nshared_preferences=shared_preferences\n```\n\n----------------------------------------\n\nTITLE: Analyzing Dart Code\nDESCRIPTION: This command runs the Dart analyzer on the code within the Flutter project directory. The analyzer checks for potential errors, warnings, and style violations in the Dart code, helping to ensure code quality and correctness.\nSOURCE: https://github.com/flutter/website/blob/main/examples/animation/animate2/README.md#_snippet_2\n\nLANGUAGE: Dart\nCODE:\n```\ndart analyze\n```\n\n----------------------------------------\n\nTITLE: Creating a Flutter Project\nDESCRIPTION: This command creates a new Flutter project without overwriting existing files. It is a necessary first step to setup the environment before running any example apps.\nSOURCE: https://github.com/flutter/website/blob/main/examples/layout/base/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nflutter create --no-overwrite $PROJECT\n```\n\n----------------------------------------\n\nTITLE: Flutter exit code 69 troubleshooting\nDESCRIPTION: This snippet demonstrates the \"exit code: 69\" error that can appear when running a `flutter` command. The suggestions involve checking the internet connection, restarting devices, and using a VPN.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/install/help.md#_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\nRunning \"flutter pub get\" in flutter_tools...\nResolving dependencies in .../flutter/packages/flutter_tools... (28.0s)\nGot TLS error trying to find package test at https://pub.dev/.\npub get failed\ncommand:\n\".../flutter/bin/cache/dart-sdk/bin/\ndart __deprecated_pub --color --directory\n.../flutter/packages/flutter_tools get --example\"\npub env: {\n  \"FLUTTER_ROOT\": \".../flutter\",\n  \"PUB_ENVIRONMENT\": \"flutter_cli:get\",\n  \"PUB_CACHE\": \".../.pub-cache\",\n}\nexit code: 69\n```\n\n----------------------------------------\n\nTITLE: Calculate Vertical Alignment in paintChildren (Dart)\nDESCRIPTION: This snippet calculates the vertical alignment of the background based on the scroll percentage. The alignment is used to position the background image so that it appears to move in the opposite direction of the list items.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/effects/parallax-scrolling.md#_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\n@override\nvoid paintChildren(FlowPaintingContext context) {\n  // Calculate the position of this list item within the viewport.\n  final scrollableBox = scrollable.context.findRenderObject() as RenderBox;\n  final listItemBox = listItemContext.findRenderObject() as RenderBox;\n  final listItemOffset = listItemBox.localToGlobal(\n    listItemBox.size.centerLeft(Offset.zero),\n    ancestor: scrollableBox,\n  );\n\n  // Determine the percent position of this list item within the\n  // scrollable area.\n  final viewportDimension = scrollable.position.viewportDimension;\n  final scrollFraction = (listItemOffset.dy / viewportDimension).clamp(\n    0.0,\n    1.0,\n  );\n\n  // Calculate the vertical alignment of the background\n  // based on the scroll percent.\n  final verticalAlignment = Alignment(0.0, scrollFraction * 2 - 1);\n}\n```\n\n----------------------------------------\n\nTITLE: Run Flutter in Chrome (Default Build Mode)\nDESCRIPTION: This command runs a Flutter web application in Chrome using the default build mode. This mode uses the `canvaskit` renderer. The `--wasm` flag is omitted to ensure the default build mode is used.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/platform-integration/web/renderers.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nflutter run -d chrome\n```\n\n----------------------------------------\n\nTITLE: Adding Rounded Borders and Margins to Images with Container (Dart)\nDESCRIPTION: This snippet demonstrates how to use a Container to add rounded borders and margins to images in Flutter. The Container's decoration property is used to define the border and border radius, while the margin property sets the spacing around the image.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/layout/index.md#_snippet_16\n\nLANGUAGE: dart\nCODE:\n```\nWidget _buildDecoratedImage(int imageIndex) => Expanded(\n  child: Container(\n    decoration: BoxDecoration(\n      border: Border.all(width: 10, color: Colors.black38),\n      borderRadius: const BorderRadius.all(Radius.circular(8)),\n    ),\n    margin: const EdgeInsets.all(4),\n    child: Image.asset('images/pic$imageIndex.jpg'),\n  ),\n);\n\nWidget _buildImageRow(int imageIndex) => Row(\n  children: [\n    _buildDecoratedImage(imageIndex),\n    _buildDecoratedImage(imageIndex + 1),\n  ],\n);\n```\n\n----------------------------------------\n\nTITLE: Opting into deferred components in pubspec.yaml (YAML)\nDESCRIPTION: Opts into deferred components by adding the `deferred-components` entry to the app's `pubspec.yaml` file under the `flutter` entry. This signals to the Flutter tool that the app should be built with deferred loading enabled.  The tool uses this entry to determine whether to build the app as deferred or not.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/perf/deferred-components.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n...\nflutter:\n  ...\n  deferred-components:\n  ...\n\n```\n\n----------------------------------------\n\nTITLE: XML Resource for Deferred Component Name\nDESCRIPTION: This XML snippet defines a string resource for a deferred component's name.  It maps a key `${componentName}Name` to `${componentName}` for use in the `AndroidManifest.xml` file of each feature module. This example shows the \"boxComponentName\" mapped to \"boxComponent\".\nSOURCE: https://github.com/flutter/website/blob/main/src/content/perf/deferred-components.md#_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<resources>\n  ...\n  <string name=\"boxComponentName\">boxComponent</string>\n</resources>\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Flutter App\nDESCRIPTION: This command creates a new Flutter application named 'my_app'. It sets up the basic project structure and necessary files for a Flutter app.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/testing/native-debugging.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ flutter create my_app\n```\n\n----------------------------------------\n\nTITLE: Running Flutter Tests\nDESCRIPTION: Executes the Flutter tests defined within the project to ensure the application's functionality is working as expected. This helps to maintain code quality and prevent regressions.\nSOURCE: https://github.com/flutter/website/blob/main/examples/layout/container/README.md#_snippet_3\n\nLANGUAGE: Dart\nCODE:\n```\nflutter test\n```\n\n----------------------------------------\n\nTITLE: Swift @_cdecl attribute\nDESCRIPTION: This code shows how to expose Swift functions to C by using the `@_cdecl` attribute.  This allows the function to be callable from Dart through FFI.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/platform-integration/macos/c-interop.md#_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\n@_cdecl(\"myFunctionName\")\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Project\nDESCRIPTION: This command creates a new Flutter project from the example app code. The `--no-overwrite` flag ensures that existing files are not overwritten.\nSOURCE: https://github.com/flutter/website/blob/main/examples/layout/lakes/step6/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nflutter create --no-overwrite $PROJECT\n```\n\n----------------------------------------\n\nTITLE: Run tests in a group using flutter test\nDESCRIPTION: This console command runs all tests within a specific group using the `--plain-name` flag. This allows you to target a subset of tests for execution.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/testing/unit/introduction.md#_snippet_6\n\nLANGUAGE: console\nCODE:\n```\nflutter test --plain-name \"Test start, increment, decrement\"\n```\n\n----------------------------------------\n\nTITLE: Importing app_localizations.dart - Dart\nDESCRIPTION: This import statement includes the generated `app_localizations.dart` file in the Dart code. This file provides the `AppLocalizations` class, which is used to access localized messages.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/accessibility-and-internationalization/internationalization.md#_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter_gen/gen_l10n/app_localizations.dart';\n```\n\n----------------------------------------\n\nTITLE: Run specific test using flutter test\nDESCRIPTION: This console command runs a specific test file using the Flutter test runner. Replace `test/counter_test.dart` with the path to your test file to execute the tests within that file.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/testing/unit/introduction.md#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\nflutter test test/counter_test.dart\n```\n\n----------------------------------------\n\nTITLE: Running Flutter App\nDESCRIPTION: This command runs the Flutter application on a connected device or emulator. It starts the application and allows users to interact with it.\nSOURCE: https://github.com/flutter/website/blob/main/examples/layout/lakes/step6/README.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nflutter run\n```\n\n----------------------------------------\n\nTITLE: Get Number of Keys Callback Function (Dart)\nDESCRIPTION: Defines the callback function used by `compute` to decode JSON data. Must be a top-level function to be used with `compute`.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/dart-swift-concurrency.md#_snippet_11\n\nLANGUAGE: Dart\nCODE:\n```\nMap<String, dynamic> getNumberOfKeys(String jsonString) {\n return jsonDecode(jsonString);\n}\n```\n\n----------------------------------------\n\nTITLE: Start Flutter app in paused state\nDESCRIPTION: This command starts a Flutter application in a paused state. This allows DevTools to start recording network traffic from the very beginning of the app's execution, including startup activities.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/tools/devtools/network.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nflutter run --start-paused ...\n```\n\n----------------------------------------\n\nTITLE: Migrate from WebGoldenComparator to GoldenFileComparator (Before)\nDESCRIPTION: This code snippet demonstrates the implementation of a custom `WebGoldenComparator` before the migration. It showcases the `compare`, `update`, `compareBytes`, and `updateBytes` methods that need to be adapted for the `GoldenFileComparator`.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/web-golden-comparator.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n// Before\nclass MyWebGoldenComparator extends WebGoldenComparator {\n  @override\n  Future<bool> compare(double width, double height, Uri golden) {\n    // will be removed in the migration\n  }\n\n  @override\n  Future<bool> update(double width, double height, Uri golden) {\n    // will be removed in the migration\n  }\n\n  @override\n  Future<bool> compareBytes(Uint8List bytes, Uri golden) {\n    // will be renamed \"compare\"\n  }\n\n  @override\n  Future<bool> updateBytes(Uint8List bytes, Uri golden) {\n    // will be renamed \"update\" and the parameter orders swapped\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Flutter tests\nDESCRIPTION: This command executes the Flutter tests defined in the project. It ensures that the app's functionality is working as expected and helps identify any regressions.\nSOURCE: https://github.com/flutter/website/blob/main/examples/layout/pavlova/README.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nflutter test\n```\n\n----------------------------------------\n\nTITLE: Migrating to ExpansibleController\nDESCRIPTION: This code demonstrates the migration to `ExpansibleController`. It replaces `ExpansionTileController` with `ExpansibleController` and implements the `dispose` method to release the controller's resources, as `ExpansibleController` is a `ChangeNotifier`.  The `ExpansibleController` is initialized and assigned to the `controller` property of `ExpansionTile`.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/expansion-tile-controller.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nclass _MyWidgetState extends State<MyWidget> {\n  final ExpansibleController controller = ExpansibleController();\n  \n  @override\n  void dispose() {\n    controller.dispose();\n    super.dispose();\n  }\n  \n  @override\n  Widget build(BuildContext context) {\n    return ExpansionTile(\n      controller: controller,\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Navigating to Project Directory\nDESCRIPTION: Changes the current working directory to the newly created Flutter project directory. This allows subsequent commands to be executed within the context of the project.\nSOURCE: https://github.com/flutter/website/blob/main/examples/layout/container/README.md#_snippet_1\n\nLANGUAGE: Dart\nCODE:\n```\ncd $PROJECT\n```\n\n----------------------------------------\n\nTITLE: Navigating to Project Directory\nDESCRIPTION: This command changes the current directory to the specified project path. It is necessary to execute subsequent Flutter commands within the project's root directory.\nSOURCE: https://github.com/flutter/website/blob/main/examples/animation/animate1/README.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ncd $PROJECT\n```\n\n----------------------------------------\n\nTITLE: Display DevTools URL\nDESCRIPTION: Shows the output when running DevTools from the command line. This output indicates the address where DevTools is being served. The address is provided in a plaintext format.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/tools/devtools/cli.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nServing DevTools at http://127.0.0.1:9100\n```\n\n----------------------------------------\n\nTITLE: Update Gradle Version - Console\nDESCRIPTION: This command uses the Gradle wrapper to update the Gradle version of the Android project. It takes the desired Gradle version as an argument. In this case it updates Gradle to version 7.6.1.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/android-java-gradle-migration-guide.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ ./gradlew wrapper --gradle-version=7.6.1\n```\n\n----------------------------------------\n\nTITLE: Rounding Corners with BorderRadius - CSS\nDESCRIPTION: This CSS snippet rounds the corners of a div element (`.red-box`) by applying a `border-radius` of 8px.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/web-devs.md#_snippet_19\n\nLANGUAGE: css\nCODE:\n```\n<div class=\"grey-box\">\n  <div class=\"red-box\">\n    Lorem ipsum\n  </div>\n</div>\n\n.grey-box {\n    background-color: #e0e0e0; /* grey 300 */\n    width: 320px;\n    height: 240px;\n    font: 900 24px Roboto;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n}\n.red-box {\n    background-color: #ef5350; /* red 400 */\n    padding: 16px;\n    color: #ffffff;\n    border-radius: 8px;\n}\n```\n\n----------------------------------------\n\nTITLE: JSON with Escaped Characters\nDESCRIPTION: This JSON snippet shows how to use escaping to include special characters like curly braces and single quotes in a translated string.  Single quotes are used to escape the curly braces, and two consecutive single quotes are used to represent a single quote character.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/accessibility-and-internationalization/internationalization.md#_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"helloWorld\": \"Hello! '{Isn''t}' this a wonderful day?\"\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Filename Update with Build ID Example\nDESCRIPTION: This HTML snippet demonstrates updating the filename of the `flutter_bootstrap.js` script to include a build ID.  This technique is another way to bypass the browser cache and ensure that the latest version of the script is loaded after a deployment.  Renaming the file effectively makes it a new resource in the browser's eyes.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/platform-integration/web/faq.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- Option 2, update the filename and update your links -->\n<script src=\"flutter_bootstrap.v123.js\" async></script>\n```\n\n----------------------------------------\n\nTITLE: ElevatedButton (Before M3) - Dart\nDESCRIPTION: This snippet shows the basic ElevatedButton implementation before the Material 3 migration. It demonstrates the default styling of the ElevatedButton before any Material 3 customizations.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/material-3-migration.md#_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nElevatedButton(\n  onPressed: () {},\n  child: const Text('Button'),\n),\n```\n\n----------------------------------------\n\nTITLE: Integrating GrowTransition and LogoWidget Flutter Dart\nDESCRIPTION: This code integrates the GrowTransition widget with the LogoWidget, using the animation object to drive the transition. The `build` method returns a `GrowTransition` widget with a `LogoWidget` as its child and binds it to the animation. This example demonstrates separation of concerns between widget rendering and animation management.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/animations/tutorial.md#_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nclass LogoApp extends StatefulWidget {\n    // ...\n\n    @override\n   Widget build(BuildContext context) {\n     return GrowTransition(\n       animation: animation,\n       child: const LogoWidget(),\n     );\n   }\n\n    // ...\n  }\n```\n\n----------------------------------------\n\nTITLE: Dart-Only Plugin Configuration\nDESCRIPTION: This YAML snippet configures a Flutter plugin for a Dart-only implementation on Windows. It replaces the 'pluginClass' with 'dartPluginClass' in the pubspec.yaml file, indicating that the platform implementation is entirely written in Dart.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/packages-and-plugins/developing-packages.md#_snippet_16\n\nLANGUAGE: YAML\nCODE:\n```\nflutter:\n  plugin:\n    implements: hello\n    platforms:\n      windows:\n        dartPluginClass: HelloPluginWindows\n```\n\n----------------------------------------\n\nTITLE: Running Flutter App\nDESCRIPTION: This command launches the Flutter application. The application will be built and run on a connected device or emulator. It allows the user to interact with the application and verify its functionality.\nSOURCE: https://github.com/flutter/website/blob/main/examples/animation/animate4/README.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nflutter run\n```\n\n----------------------------------------\n\nTITLE: Creating a Flutter Project with a Specified Name\nDESCRIPTION: This command creates a new Flutter project with the specified name. The project name must follow the `lowercase_with_underscores` naming convention as outlined in the Effective Dart guidelines. The command initializes the project structure and downloads necessary dependencies.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/reference/create-new-app.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ flutter create my_app\n```\n\n----------------------------------------\n\nTITLE: Verifying AndroidX Configuration\nDESCRIPTION: This configuration shows the required properties to enable AndroidX and Jetifier within the `android/gradle.properties` or `.android/gradle.properties` file.  This is how to confirm that AndroidX is properly configured for a project.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/androidx-migration.md#_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\nandroid.useAndroidX=true\nandroid.enableJetifier=true\n```\n\n----------------------------------------\n\nTITLE: Showing Baselines in Flutter\nDESCRIPTION: This code snippet enables the display of baselines in Flutter, which are horizontal lines used to position text. It uses the `debugPaintBaselinesEnabled` property from the `flutter/rendering.dart` package. Setting `debugPaintBaselinesEnabled` to `true` makes the baselines visible, allowing for precise vertical alignment checks. No inputs are required.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/tools/devtools/inspector.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/rendering.dart';\n\nvoid showBaselines() {\n  debugPaintBaselinesEnabled = true;\n}\n```\n\n----------------------------------------\n\nTITLE: Using the Custom Button Widget in Flutter\nDESCRIPTION: This snippet shows how to use the `CustomButton` widget within another widget's `build` method.  It demonstrates how to instantiate and display the custom button with a specific label.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/xamarin-forms-devs.md#_snippet_16\n\nLANGUAGE: dart\nCODE:\n```\n@override\nWidget build(BuildContext context) {\n  return const Center(child: CustomButton('Hello'));\n}\n```\n\n----------------------------------------\n\nTITLE: Switching to a Specific Flutter Version with Git\nDESCRIPTION: This command uses `git checkout` to switch to a specific Flutter version. Replace `<Flutter version>` with the desired version tag or commit hash from the Flutter SDK archive. Requires being in the Flutter SDK directory.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/upgrade.md#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ git checkout <Flutter version>\n```\n\n----------------------------------------\n\nTITLE: Running Flutter App\nDESCRIPTION: This command runs the Flutter app on a connected device or emulator. It compiles and deploys the app to the target environment.\nSOURCE: https://github.com/flutter/website/blob/main/examples/cookbook/persistence/reading_writing_files/README.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nflutter run\n```\n\n----------------------------------------\n\nTITLE: Build macOS Flutter App\nDESCRIPTION: This command generates the necessary macOS platform dependencies for a Flutter application. It compiles the Flutter code and prepares it for execution on macOS in debug mode.\nSOURCE: https://github.com/flutter/website/blob/main/src/_includes/docs/debug/debug-flow-macos.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nflutter build macos --debug\n```\n\n----------------------------------------\n\nTITLE: Running Flutter Application\nDESCRIPTION: This command launches the Flutter application on a connected device or emulator. It allows you to interact with the app and observe its behavior.\nSOURCE: https://github.com/flutter/website/blob/main/examples/layout/grid_and_list/README.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nflutter run\n```\n\n----------------------------------------\n\nTITLE: Reversing Animation on Completion Flutter Dart\nDESCRIPTION: This code snippet demonstrates how to reverse an animation automatically when it reaches the end or beginning. It uses `addStatusListener()` to check the animation status and reverse or forward the animation controller accordingly. This creates a looping or 'breathing' effect. It assumes that the animation controller and tween have already been initialized.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/animations/tutorial.md#_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nvoid initState() {\n    super.initState();\n    controller =\n        AnimationController(duration: const Duration(seconds: 2), vsync: this);\n    animation = Tween<double>(begin: 0, end: 300).animate(controller)\n     ..addStatusListener((status) {\n       if (status == AnimationStatus.completed) {\n         controller.reverse();\n       } else if (status == AnimationStatus.dismissed) {\n         controller.forward();\n       }\n     })\n     ..addStatusListener((status) => print('$status'));\n    controller.forward();\n  }\n```\n\n----------------------------------------\n\nTITLE: Handling Landscape Transitions (XML)\nDESCRIPTION: This snippet shows how to handle orientation changes by setting the `configChanges` attribute in the `AndroidManifest.xml` file.  This allows the activity to handle orientation and screen size changes without being restarted. This is equivalent to handling configuration changes in Xamarin.Forms.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/xamarin-forms-devs.md#_snippet_42\n\nLANGUAGE: xml\nCODE:\n```\n<activity android:configChanges=\"orientation|screenSize\" />\n```\n\n----------------------------------------\n\nTITLE: Creating Text Excerpts Flutter\nDESCRIPTION: This Dart code demonstrates creating a text excerpt in Flutter using the `maxLines` and `overflow` properties of the `Text` widget. It limits the text to one line and adds an ellipsis when the text overflows. Requires Flutter SDK.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/web-devs.md#_snippet_30\n\nLANGUAGE: dart\nCODE:\n```\nfinal container = Container(\n  // grey box\n  width: 320,\n  height: 240,\n  color: Colors.grey[300],\n  child: Center(\n    child: Container(\n      // red box\n      decoration: BoxDecoration(\n        color: Colors.red[400],\n      ),\n      padding: const EdgeInsets.all(16),\n      child: Text(\n        'Lorem ipsum dolor sit amet, consec etur',\n        style: bold24Roboto,\n        overflow: TextOverflow.ellipsis,\n        maxLines: 1,\n      ),\n    ),\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Windows Build Path (After Migration - x64)\nDESCRIPTION: Shows the updated build path for Flutter Windows applications when targeting the x64 architecture. A new 'x64' subdirectory is inserted between 'windows' and 'runner'.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/windows-build-architecture.md#_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nbuild\\windows\\x64\\runner\\Release\\hello_world.exe\n```\n\n----------------------------------------\n\nTITLE: Install Flutter Dependencies\nDESCRIPTION: Installs the Flutter dependencies using `flutter packages pub get`. This ensures all required packages for the Flutter project are installed.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/deployment/macos.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nflutter packages pub get\n```\n\n----------------------------------------\n\nTITLE: Add Integration Test Dependencies - YAML\nDESCRIPTION: This code snippet adds `integration_test` and `flutter_driver` as dev_dependencies in the `pubspec.yaml` file. These dependencies are essential for writing and running integration tests to verify the plugin's functionality.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/plugin-api-migration.md#_snippet_7\n\nLANGUAGE: YAML\nCODE:\n```\nintegration_test:\n      sdk: flutter\n    flutter_driver:\n      sdk: flutter\n\n```\n\n----------------------------------------\n\nTITLE: Navigating to Android Directory\nDESCRIPTION: This command changes the current directory to the `android` directory within the Flutter project.  This is necessary to execute Gradle commands.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/testing/integration-tests/index.md#_snippet_15\n\nLANGUAGE: console\nCODE:\n```\n$ pushd android\n```\n\n----------------------------------------\n\nTITLE: Publishing a Flutter Package (Dry Run)\nDESCRIPTION: This command performs a dry run of the publishing process to check for any issues before publishing to pub.dev. It analyzes the package and reports any errors or warnings.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/packages-and-plugins/developing-packages.md#_snippet_33\n\nLANGUAGE: console\nCODE:\n```\n$ flutter pub publish --dry-run\n```\n\n----------------------------------------\n\nTITLE: Migrate from SystemNavigator.routeUpdated - Dart\nDESCRIPTION: This code snippet illustrates the deprecated method `SystemNavigator.routeUpdated`. In later versions, this approach to updating the engine about routes was replaced by `SystemNavigator.routeInformationUpdated` to consolidate route update methods.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/3-7-deprecations.md#_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nSystemNavigator.routeUpdated(routeName: 'foo', previousRouteName: 'bar');\n```\n\n----------------------------------------\n\nTITLE: Using Navigator to Show Dialog - Solution (Dart)\nDESCRIPTION: This snippet provides a solution to the `setState called during build` error by using the Navigator API to trigger the dialog as a route. It navigates to a second screen and then pushes a dialog route on top of it, avoiding the direct call to `showDialog` within the `build` method.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/testing/common-errors.md#_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nclass FirstScreen extends StatelessWidget {\n  const FirstScreen({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: const Text('First Screen')),\n      body: Center(\n        child: ElevatedButton(\n          child: const Text('Launch screen'),\n          onPressed: () {\n            // Navigate to the second screen using a named route.\n            Navigator.pushNamed(context, '/second');\n            // Immediately show a dialog upon loading the second screen.\n            Navigator.push(\n              context,\n              PageRouteBuilder(\n                barrierDismissible: true,\n                opaque: false,\n                pageBuilder: (_, anim1, anim2) => const MyDialog(),\n              ),\n            );\n          },\n        ),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: FittedBox with Infinite Width Container in Flutter\nDESCRIPTION: This example demonstrates a FittedBox with a Container that has infinite width. FittedBox cannot scale widgets with infinite dimensions, so it will produce an error.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/layout/constraints.md#_snippet_52\n\nLANGUAGE: dart\nCODE:\n```\nFittedBox(\n  child: Container(height: 20, width: double.infinity, color: Colors.red),\n)\n```\n\n----------------------------------------\n\nTITLE: Access string from static class - Dart\nDESCRIPTION: This snippet shows how to access a string declared as a static field in a class. The string is used as the text for a `Text` widget.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/xamarin-forms-devs.md#_snippet_33\n\nLANGUAGE: dart\nCODE:\n```\nText(Strings.welcomeMessage);\n```\n\n----------------------------------------\n\nTITLE: TextField with truncateAfterCompositionEnds (Dart)\nDESCRIPTION: Illustrates using `MaxLengthEnforcement.truncateAfterCompositionEnds` with `maxLength` to allow composing text to exceed the limit temporarily.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/use-maxLengthEnforcement-instead-of-maxLengthEnforced.md#_snippet_7\n\nLANGUAGE: Dart\nCODE:\n```\nTextField(\n  maxLength: 6,\n  maxLengthEnforcement: MaxLengthEnforcement.truncateAfterCompositionEnds, // Temporarily lifts the limit.\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Flutter Project\nDESCRIPTION: This command initializes a new Flutter project in the specified directory. The `--no-overwrite` flag prevents overwriting existing files.\nSOURCE: https://github.com/flutter/website/blob/main/examples/layout/card_and_stack/README.md#_snippet_0\n\nLANGUAGE: Dart\nCODE:\n```\nflutter create --no-overwrite $PROJECT\n```\n\n----------------------------------------\n\nTITLE: Running Flutter Doctor\nDESCRIPTION: Runs the `flutter doctor` command to verify the Flutter installation and identify any missing dependencies or configuration issues.\nSOURCE: https://github.com/flutter/website/blob/main/src/_includes/docs/community/china/os-settings.md#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n{{prompt}} flutter doctor\n```\n\n----------------------------------------\n\nTITLE: flutter_driver: Migrate to WaitForCondition(FirstFrameRasterized)) (Dart)\nDESCRIPTION: This snippet shows the updated method to use for `WaitUntilFirstFrameRasterized`\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/1-22-deprecations.md#_snippet_19\n\nLANGUAGE: dart\nCODE:\n```\nWaitForCondition(FirstFrameRasterized))\n```\n\n----------------------------------------\n\nTITLE: Implementing Platform-Specific Code in React Native\nDESCRIPTION: This JavaScript snippet demonstrates how to implement platform-specific code in React Native. It uses the `Platform.OS` property to determine the operating system (iOS or Android) and returns a corresponding string. It provides a basic example of handling platform differences in React Native applications.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/react-native-devs.md#_snippet_55\n\nLANGUAGE: JavaScript\nCODE:\n```\n// React Native\nif (Platform.OS === 'ios') {\n  return 'iOS';\n} else if (Platform.OS === 'android') {\n  return 'android';\n} else {\n  return 'not recognised';\n}\n```\n\n----------------------------------------\n\nTITLE: DropdownMenuEntry Text Style Before Migration (Dart)\nDESCRIPTION: This code snippet shows how the DropdownMenuEntry was implemented before the Material 3 migration. To revert to the previous style after migration, explicitly set the textStyle property.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/menus-text-style.md#_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nDropdownMenuEntry<ColorLabel>(\n  value: color,\n  label: color.label,\n),\n```\n\n----------------------------------------\n\nTITLE: Accessing Flutter Asset Android Java\nDESCRIPTION: This Java snippet demonstrates how to access a Flutter asset in Android using the `AssetManager` API.  It uses the `PluginRegistry.Registrar` to get the context and lookup key for the asset, then opens the asset file descriptor. This requires access to the `registrar` instance provided by the Flutter plugin framework.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/assets/assets-and-images.md#_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nAssetManager assetManager = registrar.context().getAssets();\nString key = registrar.lookupKeyForAsset(\"icons/heart.png\");\nAssetFileDescriptor fd = assetManager.openFd(key);\n```\n\n----------------------------------------\n\nTITLE: Platform Override for Desktop Before Update - Dart\nDESCRIPTION: This snippet demonstrates the workaround used before the TargetPlatform update to enable Flutter desktop apps on Linux and Windows. It sets `debugDefaultTargetPlatformOverride` to `TargetPlatform.fuchsia` to avoid exceptions. This code is no longer needed after the update.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/target-platform-linux-windows.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\n// Sets a platform override for desktop to avoid exceptions. See\n// https://docs.flutter.dev/desktop#target-platform-override for more info.\nvoid _enablePlatformOverrideForDesktop() {\n  if (!kIsWeb && (Platform.isWindows || Platform.isLinux)) {\n    debugDefaultTargetPlatformOverride = TargetPlatform.fuchsia;\n  }\n}\n\nvoid main() {\n  _enablePlatformOverrideForDesktop();\n  runApp(MyApp());\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Explicit Package Dependencies (Shell)\nDESCRIPTION: This shell command enables the `explicit-package-dependencies` feature flag using the `flutter config` command. This flag changes how Flutter resolves package dependencies and avoids the need for `package:flutter_gen`.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/flutter-generate-i10n-source.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nflutter config --explicit-package-dependencies\n```\n\n----------------------------------------\n\nTITLE: Running Flutter Tests\nDESCRIPTION: This command executes the Flutter tests defined within the project.  It verifies the correctness and functionality of the application's code.\nSOURCE: https://github.com/flutter/website/blob/main/examples/layout/non_material/README.md#_snippet_3\n\nLANGUAGE: Dart\nCODE:\n```\nflutter test\n```\n\n----------------------------------------\n\nTITLE: Dart Generic Class Before Hot Reload\nDESCRIPTION: This Dart code defines a generic class `A` with a nullable type parameter `T` and a field `i` of type `T?`. Hot reload won't work if generic type declarations are modified.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/tools/hot-reload.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nclass A<T> {\n  T? i;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Flutter Project\nDESCRIPTION: This command creates a new Flutter project named `orientation_tests`. It is the initial step in setting up the testing environment.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/testing/widget/orientation.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nflutter create orientation_tests\n```\n\n----------------------------------------\n\nTITLE: Dart String with Escaped Characters Result\nDESCRIPTION: This Dart snippet shows the resulting string after the escaping rules have been applied to the JSON. The curly braces within the single quotes are preserved as literal characters, and the double single quote is reduced to a single single quote.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/accessibility-and-internationalization/internationalization.md#_snippet_22\n\nLANGUAGE: dart\nCODE:\n```\n\"Hello! {Isn't} this a wonderful day?\"\n```\n\n----------------------------------------\n\nTITLE: Finder (Before Migration) - Dart\nDESCRIPTION: Illustrates the original finder approach that may fail with a *Too many elements* exception after the transition to ZoomPageTransitionsBuilder.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/page-transition-replaced-by-ZoomPageTransitionBuilder.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nfinal Finder finder = find.widgetWithIcon(Transform, Icons.arrow_upward);\n```\n\n----------------------------------------\n\nTITLE: Calling buildTextSpan After Migration (Dart)\nDESCRIPTION: This code snippet demonstrates the updated call to `buildTextSpan`, including the `context` parameter. A `BuildContext` instance must be provided when calling the method.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/buildtextspan-buildcontext.md#_snippet_3\n\nLANGUAGE: Dart\nCODE:\n```\nBuildContext context = /* ... */;\nTextEditingController controller = /* ... */;\nTextSpan span = controller.buildTextSpan(context: context, withComposing: false);\n```\n\n----------------------------------------\n\nTITLE: Configure GoRouter in main.dart\nDESCRIPTION: This code snippet configures the `GoRouter` to handle routing within the Flutter application. It defines routes for the home ('/') and details ('/details') screens, specifying the `Scaffold` widgets to display for each route. The `MaterialApp.router` widget is used to integrate the `GoRouter` into the application.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/navigation/set-up-app-links.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\nimport 'package:go_router/go_router.dart';\n\nvoid main() => runApp(MaterialApp.router(routerConfig: router));\n\n/// This handles '/' and '/details'.\nfinal router = GoRouter(\n  routes: [\n    GoRoute(\n      path: '/',\n      builder: (_, __) => Scaffold(\n        appBar: AppBar(title: const Text('Home Screen')),\n      ),\n      routes: [\n        GoRoute(\n          path: 'details',\n          builder: (_, __) => Scaffold(\n            appBar: AppBar(title: const Text('Details Screen')),\n          ),\n        ),\n      ],\n    ),\n  ],\n);\n```\n\n----------------------------------------\n\nTITLE: TitleSection Widget Dart\nDESCRIPTION: This code creates a TitleSection widget, which displays a name and location with an icon and a number. It uses Row and Column widgets for layout, and Padding for spacing. The Expanded widget ensures the column takes up the available space.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/layout/tutorial.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nclass TitleSection extends StatelessWidget {\n  const TitleSection({super.key, required this.name, required this.location});\n\n  final String name;\n  final String location;\n\n  @override\n  Widget build(BuildContext context) {\n    return Padding(\n      padding: const EdgeInsets.all(32),\n      child: Row(\n        children: [\n          Expanded(\n            /*1*/\n            child: Column(\n              crossAxisAlignment: CrossAxisAlignment.start,\n              children: [\n                /*2*/\n                Padding(\n                  padding: const EdgeInsets.only(bottom: 8),\n                  child: Text(\n                    name,\n                    style: const TextStyle(fontWeight: FontWeight.bold),\n                  ),\n                ),\n                Text(location, style: TextStyle(color: Colors.grey[500])),\n              ],\n            ),\n          ),\n          /*3*/\n          Icon(Icons.star, color: Colors.red[500]),\n          const Text('41'),\n        ],\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Android JUnit tests using Gradle\nDESCRIPTION: This command runs Android JUnit tests from the command line using Gradle in the example/android directory of a Flutter plugin project. It requires the Android project to be configured and built at least once.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/testing/testing-plugins.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n./gradlew testDebugUnitTest\n```\n\n----------------------------------------\n\nTITLE: Add video_player dependency using flutter pub add\nDESCRIPTION: This command adds the video_player package as a dependency to your Flutter project. This is a necessary first step to use the video player plugin.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/plugins/play-video.md#_snippet_0\n\nLANGUAGE: Console\nCODE:\n```\n$ flutter pub add video_player\n```\n\n----------------------------------------\n\nTITLE: HTML Script Tag for Flutter Web App Initialization\nDESCRIPTION: This snippet shows how to include the `flutter_bootstrap.js` file in your `index.html` file using an async script tag. This script is necessary to initialize and run the Flutter web app. The script is placed within the `<body>` tag.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/platform-integration/web/initialization.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<html>\n  <body>\n    <script src=\"flutter_bootstrap.js\" async></script>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Migrating from WillPopScope to PopScope-Method\nDESCRIPTION: This code shows the migrating from WillPopScope to PopScope method for handling back gestures\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/android-predictive-back.md#_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\nWillPopScope(\n  onWillPop: () async {\n    _myHandleOnPopMethod();\n    return true;\n  },\n  child: ...\n),\n```\n\n----------------------------------------\n\nTITLE: Row with Expanded Child\nDESCRIPTION: Illustrates how wrapping a child of a Row with an Expanded widget allows the Row to control the child's width. The Row dictates the Expanded widget's width based on other children, which then forces the wrapped child to adopt this width. This demonstrates how Expanded overrides the original child's desired width.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/layout/constraints.md#_snippet_55\n\nLANGUAGE: dart\nCODE:\n```\nRow(\n  children: [\n    Expanded(\n      child: Center(\n        child: Container(\n          color: red,\n          child: const Text(\n            'This is a very long text that won\\'t fit the line.',\n            style: big,\n          ),\n        ),\n      ),\n    ),\n    Container(color: green, child: const Text('Goodbye!', style: big)),\n  ],\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Scrolling with ListView in Flutter\nDESCRIPTION: This snippet shows how to implement a scrollable list of widgets in Flutter using the ListView widget. It takes a list of children widgets as input.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/android-devs.md#_snippet_32\n\nLANGUAGE: dart\nCODE:\n```\n@override\nWidget build(BuildContext context) {\n  return ListView(\n    children: const <Widget>[\n      Text('Row One'),\n      Text('Row Two'),\n      Text('Row Three'),\n      Text('Row Four'),\n    ],\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Read Asset Manifest from Dart code outside Flutter\nDESCRIPTION: This code snippet demonstrates how to read the AssetManifest.bin file, generated by the Flutter CLI, from Dart code that is not part of a Flutter app. It uses the standard_message_codec package to parse the binary file.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/asset-manifest-dot-json.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nimport 'dart:io';\nimport 'dart:typed_data';\n\nimport 'package:standard_message_codec/standard_message_codec.dart';\n\nvoid main() {\n  // The path to AssetManifest.bin depends on the target platform.\n  final pathToAssetManifest = './build/web/assets/AssetManifest.bin';\n  final manifest = File(pathToAssetManifest).readAsBytesSync();\n  final decoded = const StandardMessageCodec()\n      .decodeMessage(ByteData.sublistView(manifest));\n  final assets = decoded.keys.cast<String>().toList();\n}\n```\n\n----------------------------------------\n\nTITLE: Liquid Template for Image Dimensions\nDESCRIPTION: This Liquid snippet defines the width and height styles for the image based on the provided parameters. If the width or height parameters are not provided, the corresponding style attribute will be set to an empty string.\nSOURCE: https://github.com/flutter/website/blob/main/src/_includes/docs/code-and-image.md#_snippet_0\n\nLANGUAGE: Liquid\nCODE:\n```\n{% assign alt = alt | default: caption -%}\n{% assign caption = caption | default: '' -%}\n{% if width -%}\n{% assign width = 'width: ' | append: width | append: ';' -%}\n{% else -%}\n{% assign width = '' -%}\n{% endif -%}\n{% if height -%}\n{% assign height = 'height: ' | append: height | append: ';' -%}\n{% else -%}\n{% assign height = '' -%}\n{% endif -%}\n```\n\n----------------------------------------\n\nTITLE: UserProfileViewModel Class Definition (Without Try-Catch)\nDESCRIPTION: Defines the UserProfileViewModel class with a load method that loads the user profile data. It directly calls the getUserProfile method of the UserProfileRepository without any error handling. This can lead to unhandled exceptions and crashes. Dependency: UserProfileRepository, ChangeNotifier.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/app-architecture/design-patterns/result.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nclass UserProfileViewModel extends ChangeNotifier {\n  // ···\n\n  Future<void> load() async {\n    _userProfile = await userProfileRepository.getUserProfile();\n    notifyListeners();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Launching FlutterActivity with transparency (Kotlin)\nDESCRIPTION: These Kotlin snippets demonstrate how to launch a `FlutterActivity` with a transparent background using `FlutterActivity.withNewEngine()` or `FlutterActivity.withCachedEngine()`. The `backgroundMode` is set to `FlutterActivityLaunchConfigs.BackgroundMode.transparent` to enable transparency.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/add-to-app/android/add-flutter-screen.md#_snippet_13\n\nLANGUAGE: kotlin\nCODE:\n```\n// Using a new FlutterEngine.\nstartActivity(\n  FlutterActivity\n    .withNewEngine()\n    .backgroundMode(FlutterActivityLaunchConfigs.BackgroundMode.transparent)\n    .build(this)\n);\n\n// Using a cached FlutterEngine.\nstartActivity(\n  FlutterActivity\n    .withCachedEngine(\"my_engine_id\")\n    .backgroundMode(FlutterActivityLaunchConfigs.BackgroundMode.transparent)\n    .build(this)\n);\n```\n\n----------------------------------------\n\nTITLE: Create Flutter Project\nDESCRIPTION: This command creates a new Flutter project named 'my_app'.  It is followed by changing the current directory to the newly created project directory.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/platform-integration/desktop.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ flutter create my_app\n$ cd my_app\n```\n\n----------------------------------------\n\nTITLE: Windows Build Path (After Migration - Arm64)\nDESCRIPTION: Demonstrates the build path for Flutter Windows applications when targeting the Arm64 architecture. An 'arm64' subdirectory is included, reflecting the target architecture.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/windows-build-architecture.md#_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nbuild\\windows\\arm64\\runner\\Release\\hello_world.exe\n```\n\n----------------------------------------\n\nTITLE: AnimatedSize without vsync - Dart\nDESCRIPTION: This code snippet illustrates how to use `AnimatedSize` after removing the deprecated `vsync` parameter. `AnimatedSize` now automatically handles vsync, simplifying its usage and resolving memory leak issues.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/3-7-deprecations.md#_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nAnimatedSize(\n  // ...\n);\n```\n\n----------------------------------------\n\nTITLE: Plaintext Error Message: Hot Reload Rejection\nDESCRIPTION: This snippet shows a typical error message received when a hot reload is rejected due to compilation errors in the Dart code. It includes the file path and line number where the error occurs, as well as a description of the error.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/tools/hot-reload.md#_snippet_11\n\nLANGUAGE: plaintext\nCODE:\n```\nHot reload was rejected:\n'/path/to/project/lib/main.dart': warning: line 16 pos 38: unbalanced '{' opens here\n  Widget build(BuildContext context) {\n                                     ^\n'/path/to/project/lib/main.dart': error: line 33 pos 5: unbalanced ')'\n    );\n    ^\n```\n\n----------------------------------------\n\nTITLE: Creating test_driver Directory\nDESCRIPTION: This command creates a new directory named `test_driver` in the `counter_app` project. This directory will contain the integration test driver file.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/testing/integration-tests/index.md#_snippet_10\n\nLANGUAGE: console\nCODE:\n```\n$ mkdir test_driver\n```\n\n----------------------------------------\n\nTITLE: flutter_driver: Migrate WaitUntilFirstFrameRasterized (Dart)\nDESCRIPTION: This snippet demonstrates migrating from `WaitUntilFirstFrameRasterized` to `WaitForCondition(FirstFrameRasterized))` in flutter_driver. The older method was deprecated and removed in favor of a composable `waitForCondition` API.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/1-22-deprecations.md#_snippet_16\n\nLANGUAGE: dart\nCODE:\n```\nWaitUntilFirstFrameRasterized\n```\n\n----------------------------------------\n\nTITLE: VelocityTracker withKind Constructor Dart\nDESCRIPTION: This snippet demonstrates the replacement of the default `VelocityTracker` constructor with `VelocityTracker.withKind(PointerDeviceKind.touch)`. It shows how to explicitly specify the `PointerDeviceKind` for the tracker. Requires the Flutter SDK.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/2-10-deprecations.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nfinal VelocityTracker tracker = VelocityTracker.withKind(PointerDeviceKind.touch);\n```\n\n----------------------------------------\n\nTITLE: Passing Initial Data to FlutterView from JavaScript\nDESCRIPTION: This JavaScript code shows how to pass initial data to a Flutter view when adding it using `app.addView`.  The `initialData` property can contain any JSON-serializable data which can be accessed in Dart.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/platform-integration/web/embedding-flutter-web.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Adding a view with initial data...\nlet viewId = app.addView({\n  hostElement: someElement,\n  initialData: {\n    greeting: 'Hello, world!',\n    randomValue: Math.floor(Math.random() * 100),\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Using the CustomButton Widget\nDESCRIPTION: This snippet shows how to use the CustomButton widget created in the previous snippet. It demonstrates how to instantiate and use a custom widget in a Flutter application within the build method of a widget.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/uikit-devs.md#_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\n@override\nWidget build(BuildContext context) {\n  return const Center(child: CustomButton('Hello'));\n}\n```\n\n----------------------------------------\n\nTITLE: Running Flutter Tests\nDESCRIPTION: This command executes the Flutter tests associated with the project to ensure code quality and functionality.\nSOURCE: https://github.com/flutter/website/blob/main/examples/layout/lakes/step2/README.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nflutter test\n```\n\n----------------------------------------\n\nTITLE: Firebase Use Project - Bash\nDESCRIPTION: This command activates a specific Firebase project for subsequent commands. Replace `<your-project>` with the actual project ID.\nSOURCE: https://github.com/flutter/website/blob/main/README.md#_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nnpm exec -- firebase-tools use <your-project>\n```\n\n----------------------------------------\n\nTITLE: Running Flutter Application\nDESCRIPTION: This command starts the Flutter application.  It compiles the code and deploys it to a connected device or emulator.\nSOURCE: https://github.com/flutter/website/blob/main/examples/layout/non_material/README.md#_snippet_4\n\nLANGUAGE: Dart\nCODE:\n```\nflutter run\n```\n\n----------------------------------------\n\nTITLE: Flutter Test Execution\nDESCRIPTION: Runs the automated tests defined within the Flutter project. It requires the Flutter SDK to be properly configured and tests to be written.\nSOURCE: https://github.com/flutter/website/blob/main/examples/layout/lakes/step5/README.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nflutter test\n```\n\n----------------------------------------\n\nTITLE: DropdownMenuThemeData Text Style Before Migration (Dart)\nDESCRIPTION: This code shows how the DropdownMenuThemeData was implemented before Material 3 Migration.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/menus-text-style.md#_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\ndropdownMenuTheme: DropdownMenuThemeData(\n  /// ...\n),\n```\n\n----------------------------------------\n\nTITLE: macOS App Building Output\nDESCRIPTION: This is the expected output displayed in the console when building a macOS Flutter application. It indicates that the build process is in progress.\nSOURCE: https://github.com/flutter/website/blob/main/src/_includes/docs/debug/debug-flow-macos.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nBuilding macOS application...\n```\n\n----------------------------------------\n\nTITLE: Access image asset using Image.asset - Dart\nDESCRIPTION: This code snippet demonstrates how to access an image asset using the `Image.asset` widget in Flutter. It specifies the path to the image within the asset bundle.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/xamarin-forms-devs.md#_snippet_30\n\nLANGUAGE: dart\nCODE:\n```\n@override\nWidget build(BuildContext context) {\n  return Image.asset('images/my_icon.png');\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating from CupertinoDialog to CupertinoAlertDialog - Dart\nDESCRIPTION: Shows how to migrate from the deprecated `CupertinoDialog` to `CupertinoAlertDialog`. This involves replacing `CupertinoDialog` with `CupertinoAlertDialog` and assigning the child widget to the content parameter.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/1-22-deprecations.md#_snippet_0\n\nLANGUAGE: Dart\nCODE:\n```\nCupertinoDialog(child: myWidget);\n```\n\nLANGUAGE: Dart\nCODE:\n```\nCupertinoAlertDialog(content: myWidget);\n```\n\n----------------------------------------\n\nTITLE: Testing Flutter App\nDESCRIPTION: This command runs the Flutter tests defined for the app project. It ensures the app's functionality is working as expected.\nSOURCE: https://github.com/flutter/website/blob/main/examples/cookbook/persistence/reading_writing_files/README.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nflutter test\n```\n\n----------------------------------------\n\nTITLE: Configure Initial Route Java\nDESCRIPTION: This Java code snippet demonstrates how to configure a custom initial route for a cached `FlutterEngine` within an `Application` class. It instantiates a `FlutterEngine`, sets the initial route using the `navigationChannel`, executes the Dart entrypoint, and then caches the engine. The 'your/route/here' parameter should be replaced with the desired initial route.\nSOURCE: https://github.com/flutter/website/blob/main/src/_includes/docs/add-to-app/android-initial-route-cached-engine.md#_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\npublic class MyApplication extends Application {\n  @Override\n  public void onCreate() {\n    super.onCreate();\n    // Instantiate a FlutterEngine.\n    flutterEngine = new FlutterEngine(this);\n    // Configure an initial route.\n    flutterEngine.getNavigationChannel().setInitialRoute(\"your/route/here\");\n    // Start executing Dart code to pre-warm the FlutterEngine.\n    flutterEngine.getDartExecutor().executeDartEntrypoint(\n      DartEntrypoint.createDefault()\n    );\n    // Cache the FlutterEngine to be used by FlutterActivity or FlutterFragment.\n    FlutterEngineCache\n      .getInstance()\n      .put(\"my_engine_id\", flutterEngine);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: ImageCache containsKey Override Dart\nDESCRIPTION: This code demonstrates how to override the `containsKey` method in a custom `ImageCache` implementation.  The overriden method should check the custom cache to see if a given key is being tracked, which avoids unintended calls to `ImageProvider.load`. The provided example shows a placeholder for the custom cache check.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/image-cache-and-provider.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nclass MyImageCache implements ImageCache {\n  @override\n  bool containsKey(Object key) {\n    // Check if your custom cache is tracking this key.\n  }\n\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Returning to Previous Directory\nDESCRIPTION: This command returns the current directory to the previous directory (before navigating to the `android` directory).\nSOURCE: https://github.com/flutter/website/blob/main/src/content/testing/integration-tests/index.md#_snippet_20\n\nLANGUAGE: console\nCODE:\n```\n$ popd\n```\n\n----------------------------------------\n\nTITLE: Running Flutter App\nDESCRIPTION: Runs the Flutter application in the current project directory. This command launches the app on a connected device or emulator.\nSOURCE: https://github.com/flutter/website/blob/main/examples/layout/lakes/interactive/README.md#_snippet_4\n\nLANGUAGE: Dart\nCODE:\n```\nflutter run\n```\n\n----------------------------------------\n\nTITLE: TextField with maxLength before migration (Dart)\nDESCRIPTION: Shows how to use the `maxLength` property without `maxLengthEnforced` before the migration.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/use-maxLengthEnforcement-instead-of-maxLengthEnforced.md#_snippet_0\n\nLANGUAGE: Dart\nCODE:\n```\nTextField(maxLength: 6)\n```\n\n----------------------------------------\n\nTITLE: AlertDialog Layout After Scrollable Update - Dart\nDESCRIPTION: This code snippet shows the AlertDialog layout after the scrollable update. The title and content widgets are now wrapped in a SingleChildScrollView, enabling automatic scrolling when the content overflows.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/scrollable-alert-dialog.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nColumn(\n  mainAxisSize: MainAxisSize.min,\n  crossAxisAlignment: CrossAxisAlignment.stretch,\n  children: <Widget>[\n    if (title != null || content != null)\n      SingleChildScrollView(\n        child: Column(\n        mainAxisSize: MainAxisSize.min,\n        crossAxisAlignment: CrossAxisAlignment.stretch,\n         children: <Widget>[\n           if (title != null)\n             titleWidget,\n             if (content != null)\n             contentWidget,\n         ],\n       ),\n     ),\n   // ...\n  ],\n),\n```\n\n----------------------------------------\n\nTITLE: Running Flutter Tests\nDESCRIPTION: This command executes the widget tests located in the `test/widget_test.dart` file within a Flutter project.  It validates the correctness of the application's behavior.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/testing/widget/orientation.md#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\nflutter test test/widget_test.dart\n```\n\n----------------------------------------\n\nTITLE: Combining Center and Container Widgets (Dart)\nDESCRIPTION: This snippet demonstrates how to combine the `Center` and `Container` widgets to both center a widget and add padding to it. The `BorderedImage` widget is centered and padded by 16 logical pixels on all sides.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/fundamentals/layout.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nWidget build(BuildContext context) {\n  return Center(\n    Container(\n      padding: EdgeInsets.all(16.0),\n      child: BorderedImage(),\n    ),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Updating podspec Source Files and Resources\nDESCRIPTION: This code snippet demonstrates how to update the source_files and resource_bundles paths in the .podspec file after migrating to Swift Package Manager. It reflects the new directory structure.\nSOURCE: https://github.com/flutter/website/blob/main/src/_includes/docs/swift-package-manager/migrate-swift-plugin.md#_snippet_6\n\nLANGUAGE: Ruby\nCODE:\n```\n   - s.source_files = 'Classes/**/*.swift'\n   - s.resource_bundles = {'plugin_name_privacy' => ['Resources/PrivacyInfo.xcprivacy']}\n   + s.source_files = 'plugin_name/Sources/plugin_name/**/*.swift'\n   + s.resource_bundles = {'plugin_name_privacy' => ['plugin_name/Sources/plugin_name/PrivacyInfo.xcprivacy']}\n```\n\n----------------------------------------\n\nTITLE: Migrate FlutterDriver.enableAccessibility to setSemantics\nDESCRIPTION: This snippet shows how to migrate from the deprecated `enableAccessibility` method of `FlutterDriver` to the new `setSemantics` method.  `setSemantics` allows enabling or disabling accessibility.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/3-19-deprecations.md#_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nFlutterDriver driver = FlutterDriver.connectedTo(\n  // ...\n);\ndriver.enableAccessibility();\n```\n\nLANGUAGE: dart\nCODE:\n```\nFlutterDriver driver = FlutterDriver.connectedTo(\n  // ...\n);\ndriver.setSemantics(true);\n```\n\n----------------------------------------\n\nTITLE: Width Tween with CurvedAnimation - Dart\nDESCRIPTION: This snippet creates a tween for the `width` property of a widget. It uses `Tween<double>` to define the start and end values for the width and `CurvedAnimation` to specify an eased curve. The `Interval` defines the period during which the animation runs.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/animations/staggered-animations.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nwidth = Tween<double>(\n  begin: 50.0,\n  end: 150.0,\n).animate(\n  CurvedAnimation(\n    parent: controller,\n    curve: const Interval(\n      0.125,\n      0.250,\n      curve: Curves.ease,\n    ),\n  ),\n),\n```\n\n----------------------------------------\n\nTITLE: Displaying Progress Indicator in Flutter\nDESCRIPTION: This complete Flutter example demonstrates how to display a progress indicator while data is loading. The `showLoadingDialog` boolean flag controls the rendering of either a `ProgressIndicator` or a `ListView` based on whether data is available. The example includes necessary imports, widget definitions, and logic to fetch data and update the UI.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/xamarin-forms-devs.md#_snippet_27\n\nLANGUAGE: dart\nCODE:\n```\nimport 'dart:async';\nimport 'dart:convert';\n\nimport 'package:flutter/material.dart';\nimport 'package:http/http.dart' as http;\n\nvoid main() {\n  runApp(const SampleApp());\n}\n\nclass SampleApp extends StatelessWidget {\n  const SampleApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return const MaterialApp(title: 'Sample App', home: SampleAppPage());\n  }\n}\n\nclass SampleAppPage extends StatefulWidget {\n  const SampleAppPage({super.key});\n\n  @override\n  State<SampleAppPage> createState() => _SampleAppPageState();\n}\n\nclass _SampleAppPageState extends State<SampleAppPage> {\n  List<Map<String, Object?>> data = [];\n\n  @override\n  void initState() {\n    super.initState();\n    loadData();\n  }\n\n  bool get showLoadingDialog => data.isEmpty;\n\n  Future<void> loadData() async {\n    final Uri dataURL = Uri.parse('https://jsonplaceholder.typicode.com/posts');\n    final http.Response response = await http.get(dataURL);\n    setState(() {\n      data = (jsonDecode(response.body) as List).cast<Map<String, Object?>>();\n    });\n  }\n\n  Widget getBody() {\n    if (showLoadingDialog) {\n      return getProgressDialog();\n    }\n    return getListView();\n  }\n\n  Widget getProgressDialog() {\n    return const Center(child: CircularProgressIndicator());\n  }\n\n  ListView getListView() {\n    return ListView.builder(\n      itemCount: data.length,\n      itemBuilder: (context, index) {\n        return getRow(index);\n      },\n    );\n  }\n\n  Widget getRow(int index) {\n    return Padding(\n      padding: const EdgeInsets.all(10),\n      child: Text('Row ${data[index]['title']}'),\n    );\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: const Text('Sample App')),\n      body: getBody(),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initialize Temporary Keychain for Code Signing\nDESCRIPTION: Initializes a new temporary keychain to be used for code signing. This helps isolate the code signing process and avoid conflicts with the user's existing keychain.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/deployment/macos.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nkeychain initialize\n```\n\n----------------------------------------\n\nTITLE: Generating Flutter Size Analysis File\nDESCRIPTION: This command builds a Flutter application for a specified target platform and generates a size analysis file. The `--analyze-size` flag is essential for creating the JSON file that can be imported into the DevTools App Size tool. The output includes a summary of the app size and the file path to the generated JSON file.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/tools/devtools/app-size.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nflutter build <your target platform> --analyze-size\n```\n\n----------------------------------------\n\nTITLE: Image asset directory structure - Plaintext\nDESCRIPTION: This example demonstrates a directory structure for storing image assets in a Flutter project. It shows the base image (1.0x) in the `images` folder and the variants in sub-folders with the appropriate ratio multiplier, such as 2.0x and 3.0x.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/xamarin-forms-devs.md#_snippet_28\n\nLANGUAGE: plaintext\nCODE:\n```\nimages/my_icon.png       // Base: 1.0x image\nimages/2.0x/my_icon.png  // 2.0x image\nimages/3.0x/my_icon.png  // 3.0x image\n```\n\n----------------------------------------\n\nTITLE: Installing Packages with Flutter Pub\nDESCRIPTION: Demonstrates how to add a package dependency using the `flutter pub add` command in the console. This command adds the specified package to the project's `pubspec.yaml` file.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/react-native-devs.md#_snippet_18\n\nLANGUAGE: console\nCODE:\n```\n$ flutter pub add google_sign_in\n```\n\n----------------------------------------\n\nTITLE: RepaintBoundary Example - Flutter\nDESCRIPTION: This Dart code demonstrates how to use `RepaintBoundary` to isolate repaints in Flutter. By wrapping the `CircularProgressIndicator` in a `RepaintBoundary`, only that part of the screen repaints, improving performance. It uses the Flutter framework.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/tools/devtools/legacy-inspector.md#_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nclass AreaRepaintsPage extends StatelessWidget {\n  const AreaRepaintsPage({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: const Text('Repaint Example')),\n      body: const Center(\n        child: RepaintBoundary(child: CircularProgressIndicator()),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Stateful Widget definition in Flutter\nDESCRIPTION: This Flutter code snippet shows the definition of a `StatefulWidget`. It requires a `createState()` method that creates the corresponding `State` object.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/react-native-devs.md#_snippet_36\n\nLANGUAGE: dart\nCODE:\n```\nclass MyStatefulWidget extends StatefulWidget {\n  const MyStatefulWidget({super.key, required this.title});\n\n  final String title;\n\n  @override\n  State<MyStatefulWidget> createState() => _MyStatefulWidgetState();\n}\n```\n\n----------------------------------------\n\nTITLE: Old light theme defaults using TextSelectionThemeData (Dart)\nDESCRIPTION: Provides the old default color values for a light theme before the TextSelectionTheme update. This allows developers to revert to the previous look if desired.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/text-selection-theme.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\n// Old defaults for a light theme\nThemeData(\n  textSelectionTheme: TextSelectionThemeData(\n    cursorColor: const Color.fromRGBO(66, 133, 244, 1.0),\n    selectionColor: const Color(0xff90caf9),\n    selectionHandleColor: const Color(0xff64b5f6),\n  )\n)\n```\n\n----------------------------------------\n\nTITLE: Updating app/build.gradle - Removing Flutter SDK reference (Groovy)\nDESCRIPTION: This code shows the removal of the flutterRoot variable and the if statement that checks for the Flutter SDK in local.properties, as well as the removal of the legacy plugin application from app/build.gradle.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/flutter-gradle-plugin-apply.md#_snippet_3\n\nLANGUAGE: Groovy\nCODE:\n```\n- def flutterRoot = localProperties.getProperty('flutter.sdk')\n- if (flutterRoot == null) {\n-     throw new GradleException(\"Flutter SDK not found. Define location with flutter.sdk in the local.properties file.\")\n- }\n```\n\n----------------------------------------\n\nTITLE: ExpansionTileController usage before migration\nDESCRIPTION: This code demonstrates how to use `ExpansionTileController` with `ExpansionTile`. The `ExpansionTileController` is initialized and assigned to the `controller` property of `ExpansionTile`.  This example shows the code that needs to be updated to use `ExpansibleController`.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/expansion-tile-controller.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nclass _MyWidgetState extends State<MyWidget> {\n  final ExpansionTileController controller = ExpansionTileController();\n  \n  @override\n  Widget build(BuildContext context) {\n    return ExpansionTile(\n      controller: controller,\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Print to Standard Error (stderr) in Dart\nDESCRIPTION: This snippet shows how to print a message to the standard error stream using the `stderr` property from the `dart:io` library. This is commonly used for error reporting or debugging output that should be separated from normal output.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/testing/code-debugging.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nstderr.writeln('print me');\n```\n\n----------------------------------------\n\nTITLE: CocoaPods Validation - Shell\nDESCRIPTION: This command validates the plugin's podspec file using CocoaPods. It checks for common issues and ensures the plugin is compatible with CocoaPods. Key parameters include specifying the Debug configuration, skipping tests, using modular headers, and libraries.\nSOURCE: https://github.com/flutter/website/blob/main/src/_includes/docs/swift-package-manager/migrate-swift-plugin.md#_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\npod lib lint ios/plugin_name.podspec  --configuration=Debug --skip-tests --use-modular-headers --use-libraries\n```\n\n----------------------------------------\n\nTITLE: Configure Info.plist for AdMob App ID on iOS\nDESCRIPTION: This code snippet demonstrates how to add the AdMob App ID to the iOS application's Info.plist file. This is essential for initializing the Google Mobile Ads SDK on iOS.  Remember to replace the placeholder with your real AdMob App ID from the AdMob console.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/plugins/google-mobile-ads.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<key>GADApplicationIdentifier</key>\n<string>ca-app-pub-################~##########</string>\n```\n\n----------------------------------------\n\nTITLE: Nested Centered Containers with padding and colors Flutter\nDESCRIPTION: This snippet creates a Center widget containing a red Container with padding, which contains a green Container with a specified width and height.  The red container sizes itself to the size of its child (the green container) and its padding.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/layout/constraints.md#_snippet_38\n\nLANGUAGE: dart\nCODE:\n```\nCenter(\n  child: Container(\n    padding: const EdgeInsets.all(20),\n    color: red,\n    child: Container(color: green, width: 30, height: 30),\n  ),\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Font in pubspec.yaml\nDESCRIPTION: This YAML snippet configures a custom font for a Flutter application. It defines the font family name (MyCustomFont) and specifies the path to the font file (MyCustomFont.ttf). It also includes an italic font style.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/xamarin-forms-devs.md#_snippet_50\n\nLANGUAGE: yaml\nCODE:\n```\nfonts:\n  - family: MyCustomFont\n    fonts:\n      - asset: fonts/MyCustomFont.ttf\n      - style: italic\n```\n\n----------------------------------------\n\nTITLE: Build Parallax Background with Delegate (Dart)\nDESCRIPTION: This code shows how to add a `FlowDelegate` to the `Flow` widget. The `FlowDelegate` is responsible for controlling how the children of the `Flow` widget are sized and painted. In this case, the `ParallaxFlowDelegate` is introduced, which will be used to implement the parallax effect.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/effects/parallax-scrolling.md#_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nWidget _buildParallaxBackground(BuildContext context) {\n  return Flow(\n    delegate: ParallaxFlowDelegate(),\n    children: [Image.network(imageUrl, fit: BoxFit.cover)],\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating BasicMessageChannel MockMessageHandler Calls Dart\nDESCRIPTION: This snippet illustrates the migration from myChannel.setMockMessageHandler and myChannel.checkMockMessageHandler to using tester.binding.defaultBinaryMessenger.setMockDecodedMessageHandler and tester.binding.defaultBinaryMessenger.checkMockMessageHandler within a WidgetTester environment.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/mock-platform-channels.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\n// old code\nmyChannel.setMockMessageHandler(...);\nmyChannel.checkMockMessageHandler(...);\n// new code\ntester.binding.defaultBinaryMessenger.setMockDecodedMessageHandler(myChannel, ...);\ntester.binding.defaultBinaryMessenger.checkMockMessageHandler(myChannel, ...);\n```\n\n----------------------------------------\n\nTITLE: LocationListItem with GlobalKey (Dart)\nDESCRIPTION: This code defines a `LocationListItem` widget that holds a `GlobalKey` for the background image. The `GlobalKey` is used to access the size of the image after it has been scaled down to fit in the list item, which is needed for calculating the parallax effect.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/effects/parallax-scrolling.md#_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\n@immutable\nclass LocationListItem extends StatelessWidget {\n  final GlobalKey _backgroundImageKey = GlobalKey();\n\n  Widget _buildParallaxBackground(BuildContext context) {\n    return Flow(\n      delegate: ParallaxFlowDelegate(\n        scrollable: Scrollable.of(context),\n        listItemContext: context,\n        backgroundImageKey: _backgroundImageKey,\n      ),\n      children: [\n        Image.network(imageUrl, key: _backgroundImageKey, fit: BoxFit.cover),\n      ],\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Disable Flutter Deep Linking - iOS\nDESCRIPTION: This snippet shows how to disable Flutter's default deep link handler in iOS by setting `FlutterDeepLinkingEnabled` to false in the `Info.plist` file. This is necessary when migrating from a plugin-based deep linking solution.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/navigation/deep-linking.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\nTo do this, set `FlutterDeepLinkingEnabled` to false in `Info.plist`\n```\n\n----------------------------------------\n\nTITLE: SystemNavigator.routeInformationUpdated Before Migration (Dart)\nDESCRIPTION: Demonstrates updating route information using the deprecated `location` parameter with SystemNavigator.routeInformationUpdated.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/route-information-uri.md#_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nSystemNavigator.routeInformationUpdated(location: '/myLocation');\n```\n\n----------------------------------------\n\nTITLE: Running Flutter Tests\nDESCRIPTION: This command executes the unit and integration tests within the Flutter project. It verifies the correctness of the code and helps to identify potential bugs. No specific inputs are passed, and results are displayed in the console.\nSOURCE: https://github.com/flutter/website/blob/main/examples/state_mgmt/simple/README.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nflutter test\n```\n\n----------------------------------------\n\nTITLE: Migrate AndroidViewController id to viewId in Dart\nDESCRIPTION: This snippet shows how to migrate from the deprecated `id` property of `AndroidViewController`, `TextureAndroidViewController`, and `SurfaceAndroidViewController` to the `viewId` property.  It demonstrates changing references to `surfaceController.id` and `textureController.id` to use `surfaceController.viewId` and `textureController.viewId` instead.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/2-5-deprecations.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nfinal SurfaceAndroidViewController surfaceController = SurfaceAndroidViewController(\n  viewId: 10,\n  viewType: 'FixTester',\n  layoutDirection: TextDirection.ltr,\n);\nint viewId = surfaceController.id;\nfinal SurfaceAndroidViewController surfaceController = SurfaceAndroidViewController(\n  error: '',\n);\nfinal TextureAndroidViewController textureController = TextureAndroidViewController(\n  error: '',\n);\nfinal TextureAndroidViewController textureController = TextureAndroidViewController(\n  viewId: 10,\n  viewType: 'FixTester',\n  layoutDirection: TextDirection.ltr,\n);\nviewId = textureController.id;\n```\n\nLANGUAGE: dart\nCODE:\n```\nfinal SurfaceAndroidViewController surfaceController = SurfaceAndroidViewController(\n  viewId: 10,\n  viewType: 'FixTester',\n  layoutDirection: TextDirection.ltr,\n);\nint viewId = surfaceController.viewId;\nfinal SurfaceAndroidViewController surfaceController = SurfaceAndroidViewController(\n  error: '',\n);\nfinal TextureAndroidViewController textureController = TextureAndroidViewController(\n  error: '',\n);\nfinal TextureAndroidViewController textureController = TextureAndroidViewController(\n  viewId: 10,\n  viewType: 'FixTester',\n  layoutDirection: TextDirection.ltr,\n);\nviewId = textureController.viewId;\n```\n\n----------------------------------------\n\nTITLE: Get Dart Dependencies - Console\nDESCRIPTION: Fetches the Dart dependencies required for the site. This command needs to be run from the root directory of the repository.\nSOURCE: https://github.com/flutter/website/blob/main/README.md#_snippet_6\n\nLANGUAGE: console\nCODE:\n```\ndart pub get\n```\n\n----------------------------------------\n\nTITLE: Replacing the Root Widget in Flutter (After Change)\nDESCRIPTION: This Dart code snippet shows a modified version of the Flutter application, where the `MyApp` widget is replaced with a `Center` widget containing a `Text` widget.  This change affects the `main()` function and is used to illustrate the limitations of hot reload, as changes directly to `main()` are typically not reflected without a hot restart.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/tools/hot-reload.md#_snippet_13\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/widgets.dart';\n\nvoid main() {\n  runApp(const Center(child: Text('Hello', textDirection: TextDirection.ltr)));\n}\n```\n\n----------------------------------------\n\nTITLE: Implement computeDryLayout in Dart\nDESCRIPTION: This code snippet demonstrates the implementation of the computeDryLayout method. It involves changing the function signature from `void performResize()` to `Size computeDryLayout(BoxConstraints constraints)` and by returning the calculated size instead of assigning it to the `size` setter.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/renderbox-dry-layout.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\n  // This replaces the old performResize method.\n  @override\n  Size computeDryLayout(BoxConstraints constraints) {\n     return constraints.biggest;\n  }\n```\n\n----------------------------------------\n\nTITLE: addScopedWillPopCallback to (un)registerPopEntry\nDESCRIPTION: Code before migrating from ModalRoute.add/removeScopedWillPopCallback to ModalRoute.(un)registerPopEntry\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/android-predictive-back.md#_snippet_15\n\nLANGUAGE: dart\nCODE:\n```\n@override\nvoid didChangeDependencies() {\n  super.didChangeDependencies();\n  if (widget.onWillPop != null) {\n    _route?.removeScopedWillPopCallback(widget.onWillPop!);\n  }\n  _route = ModalRoute.of(context);\n  if (widget.onWillPop != null) {\n    _route?.addScopedWillPopCallback(widget.onWillPop!);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Card, Dialog, and TabBar Themes (Before)\nDESCRIPTION: This code demonstrates how to access the CardTheme, DialogTheme, and TabBarTheme from the Theme and their respective 'of' methods before the normalization changes. The type of the theme objects is `CardTheme`, `DialogTheme`, and `TabBarTheme` respectively.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/component-theme-normalization.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nfinal CardTheme cardTheme = Theme.of(context).cardTheme;\nfinal CardTheme cardTheme = CardTheme.of(context);\n\nfinal DialogTheme dialogTheme = Theme.of(context).dialogTheme;\nfinal DialogTheme dialogTheme = DialogTheme.of(context);\n\nfinal TabBarTheme tabBarTheme = Theme.of(context).tabBarTheme;\nfinal TabBarTheme tabBarTheme = TabBarTheme.of(context);\n```\n\n----------------------------------------\n\nTITLE: TextFormField Initial Value Update - Dart\nDESCRIPTION: This snippet illustrates the change in how `initialValue` is used with `TextFormField`. If you're providing a controller, the `initialValue` must be null, and the controller's `text` property should be used instead to set the initial text.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/release-notes/release-notes-0.0.21-1.0.0.md#_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\n// Before\nnew TextFormField(\n  initialValue: 'Hello World',\n  controller: _myTextEditingController,\n);\n\n// After\nnew TextFormField(\n  controller: _myTextEditingController ..text = 'Hello World',\n)\n// Or more typically:\n_myTextEditingController = new TextEditingController(\n  text: 'Hello World',\n);\nnew TextFormField(\n  controller: _myTextEditingController,\n);\n```\n\n----------------------------------------\n\nTITLE: Deprecated: Customizing context menu with ToolbarOptions in Flutter\nDESCRIPTION: This code snippet illustrates the deprecated way of using ToolbarOptions to enable the copy option in Flutter TextField. This approach is replaced by contextMenuBuilder.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/context-menus.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\n// Deprecated.\nTextField(\n  toolbarOptions: ToolbarOptions(\n    copy: true,\n  ),\n)\n```\n\n----------------------------------------\n\nTITLE: Define HomeViewModel class in Dart\nDESCRIPTION: This code snippet defines the `HomeViewModel` class, which is responsible for managing UI logic. It takes `BookingRepository` and `UserRepository` as inputs and assigns them to private members. Repositories are provided as arguments to the view model's constructor, emphasizing the dependency on data repositories.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/app-architecture/case-study/ui-layer.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nclass HomeViewModel {\n  HomeViewModel({\n    required BookingRepository bookingRepository,\n    required UserRepository userRepository,\n  }) :\n    // Repositories are manually assigned because they're private members.\n    _bookingRepository = bookingRepository,\n    _userRepository = userRepository;\n\n  final BookingRepository _bookingRepository;\n  final UserRepository _userRepository;\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Printing to Console: Dart\nDESCRIPTION: This snippet shows how to print to the console in Dart, using the `print()` function. It is similar to `console.log()` in JavaScript.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/react-native-devs.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// JavaScript\nconsole.log('Hello world!');\n```\n\nLANGUAGE: Dart\nCODE:\n```\n/// Dart\nprint('Hello world!');\n```\n\n----------------------------------------\n\nTITLE: Package the macOS App\nDESCRIPTION: Packages the macOS app into a `.pkg` installer file using `xcrun productbuild` and signs it using `xcrun productsign`. It first finds the `.app` file, determines the installer certificate, and then signs the package.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/deployment/macos.md#_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nAPP_NAME=$(find $(pwd) -name \"*.app\")\nPACKAGE_NAME=$(basename \"$APP_NAME\" .app).pkg\nxcrun productbuild --component \"$APP_NAME\" /Applications/ unsigned.pkg\n\nINSTALLER_CERT_NAME=$(keychain list-certificates \\\n          | jq '[.[]\n            | select(.common_name\n            | contains(\"Mac Developer Installer\"))\n            | .common_name][0]' \\\n          | xargs)\nxcrun productsign --sign \"$INSTALLER_CERT_NAME\" unsigned.pkg \"$PACKAGE_NAME\"\nrm -f unsigned.pkg\n```\n\n----------------------------------------\n\nTITLE: Using ThemeData.dialogBackgroundColor (Deprecated) in Dart\nDESCRIPTION: This code snippet demonstrates the usage of the deprecated `ThemeData.dialogBackgroundColor` property to set the background color of dialogs.  This approach is no longer recommended and will likely be removed in future versions of Flutter.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/deprecate-themedata-dialogbackgroundcolor.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\ntheme: ThemeData(\n  dialogBackgroundColor: Colors.orange,\n),\n```\n\n----------------------------------------\n\nTITLE: Creating a Flutter Bug Report Project\nDESCRIPTION: This command creates a minimal Flutter application that can be used to reproduce a bug. The 'bug' argument specifies the name of the project.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/resources/bug-reports.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nflutter create bug\n```\n\n----------------------------------------\n\nTITLE: Conditional Vector Image Liquid\nDESCRIPTION: This snippet conditionally displays a vector image if it exists for a component. It checks if `comp.vector` is present and, if so, renders the vector content. If not it proceeds to check for a standard `image`.\nSOURCE: https://github.com/flutter/website/blob/main/src/_includes/docs/catalog-page.md#_snippet_3\n\nLANGUAGE: Liquid\nCODE:\n```\n{% if comp.vector -%}\n  {{comp.vector}}\n{% endif -%}\n```\n\n----------------------------------------\n\nTITLE: Initializing AnimationController in Dart\nDESCRIPTION: This snippet initializes an `AnimationController` with a duration of 2 seconds and a vsync.  The `vsync` prevents offscreen animations from consuming unnecessary resources. `SingleTickerProviderStateMixin` is added to the class definition to use stateful object as the vsync.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/animations/index.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\ncontroller = AnimationController(\n  duration: const Duration(seconds: 2),\n  vsync: this,\n);\n```\n\n----------------------------------------\n\nTITLE: Removing RectangularSliderTrackShape.disabledThumbGapWidth in Dart\nDESCRIPTION: This snippet illustrates the removal of the deprecated `disabledThumbGapWidth` property from `RectangularSliderTrackShape`. The migration involves removing the property from the constructor, as it's no longer used by the framework. The code shows the usage before and after the migration.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/2-10-deprecations.md#_snippet_7\n\nLANGUAGE: Dart\nCODE:\n```\nRectangularSliderTrackShape(disabledThumbGapWidth: 2.0);\n```\n\nLANGUAGE: Dart\nCODE:\n```\nRectangularSliderTrackShape();\n```\n\n----------------------------------------\n\nTITLE: Parsing Image (After Migration) - Dart\nDESCRIPTION: This code snippet demonstrates how to parse an image after the fix for raw image rendering in Flutter Web.  It includes a function `verticallyFlipImage` to flip the image vertically and the parsing uses the flipped image with original pixel format. This migration ensures compatibility with the updated Flutter Web engine. The code takes Uint8List image, width and height as input.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/raw-images-on-web-uses-correct-origin-and-colors.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nimport 'dart:typed_data';\nimport 'dart:ui' as ui;\n\nUint8List verticallyFlipImage(Uint8List sourceBytes, int width, int height) {\n  final Uint32List source = Uint32List.sublistView(ByteData.sublistView(sourceBytes));\n  final Uint32List result = Uint32List(source.length);\n  int sourceOffset = 0;\n  int resultOffset = 0;\n  for (final int row = height - 1; row >= 0; row -= 1) {\n    sourceOffset = width * row;\n    for (final int col = 0; col < width; col += 1) {\n      result[resultOffset] = source[sourceOffset];\n      resultOffset += 1;\n      sourceOffset += 1;\n    }\n  }\n  return Uint8List.sublistView(ByteData.sublistView(sourceBytes))\n}\n\nFuture<ui.Image> parseMyImage(Uint8List image, int width, int height) async {\n  final Uint8List correctedImage = verticallyFlipImage(image, width, height);\n  final ui.ImageDescriptor descriptor = ui.ImageDescriptor.raw(\n    await ui.ImmutableBuffer.fromUint8List(correctedImage),\n    width: width,\n    height: height,\n    pixelFormat: ui.PixelFormat.rgba8888,\n  );\n  return (await (await descriptor.instantiateCodec()).getNextFrame()).image;\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Value Assignment in Liquid\nDESCRIPTION: This snippet uses Liquid templating to assign different values based on the `include.target` variable. It checks for specific target platforms (desktop, mobile-ios, mobile-android, web) and assigns corresponding values. If none of the specified targets match, a default value is assigned. The values are separated by pipes (`|`).\nSOURCE: https://github.com/flutter/website/blob/main/src/_includes/docs/install/reqs/macos/storage.md#_snippet_0\n\nLANGUAGE: Liquid\nCODE:\n```\n{% if include.target == 'desktop' -%}\n36.0 | 56.0 |\n{% elsif include.target == 'mobile-ios' -%}\n36.0 | 56.0 |\n{% elsif include.target == 'mobile-android' -%}\n10.0 | 18.0 |\n{% elsif include.target == 'web' -%}\n2.5 | 2.5 |\n{% else -%}\n44.0 | 70.0 |\n{% endif -%}\n```\n\n----------------------------------------\n\nTITLE: Navigate to example directory\nDESCRIPTION: This shell command changes the current directory to the example directory of the Flutter plugin.\nSOURCE: https://github.com/flutter/website/blob/main/src/_includes/docs/swift-package-manager/migrate-swift-plugin.md#_snippet_10\n\nLANGUAGE: Shell\nCODE:\n```\ncd path/to/plugin/example/\n```\n\n----------------------------------------\n\nTITLE: Creating a Page - Xamarin.Forms\nDESCRIPTION: In Xamarin.Forms, the `MainPage` property of the `Application` class is assigned a `Page` object, often a `ContentPage`.  This defines the root page displayed in the application, and typically hosts the initial UI elements.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/xamarin-forms-devs.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic class App : Application\n{\n    public App()\n    {\n        MainPage = new ContentPage\n        {\n            Content = new Label\n            {\n                Text = \"Hello World\",\n                HorizontalOptions = LayoutOptions.Center,\n                VerticalOptions = LayoutOptions.Center\n            }\n        };\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Declare image assets in pubspec.yaml - YAML\nDESCRIPTION: This snippet shows how to declare image assets in the `pubspec.yaml` file. The `assets` section is used to specify the paths to the image files, allowing Flutter to pick them up.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/xamarin-forms-devs.md#_snippet_29\n\nLANGUAGE: yaml\nCODE:\n```\nassets:\n - images/my_icon.png\n```\n\n----------------------------------------\n\nTITLE: Override didPushRouteInformation After Migration (Dart)\nDESCRIPTION: Shows the updated way of overriding the `didPushRouteInformation` method using a RouteInformation argument. This example demonstrates handling route updates with the new Uri-based approach and includes logic to correctly process various parts of the URI.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/route-information-uri.md#_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nclass MyObserverState extends State<MyWidget> with WidgetsBindingObserver {\n  @override\n  Future<bool> didPushRouteInformation(RouteInformation routeInformation) => _handleRoute(\n    Uri.decodeComponent(\n      Uri(\n        path: uri.path.isEmpty ? '/' : uri.path,\n        queryParameters: uri.queryParametersAll.isEmpty ? null : uri.queryParametersAll,\n        fragment: uri.fragment.isEmpty ? null : uri.fragment,\n      ).toString(),\n    )\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Import Statements - Dart\nDESCRIPTION: Imports necessary Dart packages for asynchronous operations, UI elements, and platform channel communication. These packages provide functionalities for working with asynchronous tasks (dart:async), creating user interfaces (flutter/material.dart), and interacting with platform-specific code (flutter/services.dart).\nSOURCE: https://github.com/flutter/website/blob/main/src/content/platform-integration/platform-channels.md#_snippet_0\n\nLANGUAGE: Dart\nCODE:\n```\nimport 'dart:async';\nimport 'package:flutter/material.dart';\nimport 'package:flutter/services.dart';\n```\n\n----------------------------------------\n\nTITLE: Adding Box Shadows - CSS\nDESCRIPTION: This CSS snippet adds two box shadows to a div element (`.red-box`). The first shadow has an offset of (0, 2), a blur radius of 4, and a black color with 80% opacity. The second has an offset of (0, 6), a blur radius of 20, and a black color with 50% opacity.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/web-devs.md#_snippet_21\n\nLANGUAGE: css\nCODE:\n```\n<div class=\"grey-box\">\n  <div class=\"red-box\">\n    Lorem ipsum\n  </div>\n</div>\n\n.grey-box {\n    background-color: #e0e0e0; /* grey 300 */\n    width: 320px;\n    height: 240px;\n    font: 900 24px Roboto;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n}\n.red-box {\n    background-color: #ef5350; /* red 400 */\n    padding: 16px;\n    color: #ffffff;\n    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.8),\n              0 6px 20px rgba(0, 0, 0, 0.5);\n}\n```\n\n----------------------------------------\n\nTITLE: Setting a custom ScrollBehavior for your application - Before Migration\nDESCRIPTION: This snippet shows the basic MaterialApp setup before the ScrollBehavior changes, where a default scroll behavior is implicitly used.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/default-scroll-behavior-drag.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nMaterialApp(\n  // ...\n);\n```\n\n----------------------------------------\n\nTITLE: Updating Names in Package.swift\nDESCRIPTION: This code snippet illustrates how to update the plugin name, library name, and target name in the Package.swift file. It highlights the relevant sections of the file where these updates should be made.\nSOURCE: https://github.com/flutter/website/blob/main/src/_includes/docs/swift-package-manager/migrate-swift-plugin.md#_snippet_2\n\nLANGUAGE: Swift\nCODE:\n```\nlet package = Package(\n    // TODO: Update your plugin name.\n    name: [!\"plugin_name\"!],\n    platforms: [\n        .iOS(\"12.0\"),\n        .macOS(\"10.14\")\n    ],\n    products: [\n        // TODO: Update your library and target names.\n        // If the plugin name contains \"_\", replace with \"-\" for the library name\n        .library(name: [!\"plugin-name\"!], targets: [[!\"plugin_name\"!]])\n    ],\n    dependencies: [],\n    targets: [\n        .target(\n            // TODO: Update your target name.\n            name: [!\"plugin_name\"!],\n            dependencies: [],\n            resources: [\n                // TODO: If your plugin requires a privacy manifest\n                // (e.g. if it uses any required reason APIs), update the PrivacyInfo.xcprivacy file\n                // to describe your plugin's privacy impact, and then uncomment this line.\n                // For more information, see:\n                // https://developer.apple.com/documentation/bundleresources/privacy_manifest_files\n                // .process(\"PrivacyInfo.xcprivacy\"),\n\n                // TODO: If you have other resources that need to be bundled with your plugin, refer to\n                // the following instructions to add them:\n                // https://developer.apple.com/documentation/xcode/bundling-resources-with-a-swift-package\n            ]\n        )\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Navigating to Project Directory\nDESCRIPTION: Changes the current directory to the newly created Flutter project directory specified by `$PROJECT`.\nSOURCE: https://github.com/flutter/website/blob/main/examples/layout/lakes/interactive/README.md#_snippet_1\n\nLANGUAGE: Dart\nCODE:\n```\ncd $PROJECT\n```\n\n----------------------------------------\n\nTITLE: Creating Circles with Border Radius - CSS\nDESCRIPTION: This CSS snippet creates a circle by setting the `border-radius` to 50% on a square div element (`.red-circle`). The width and height are equal, and `border-radius: 50%` makes it a circle.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/web-devs.md#_snippet_23\n\nLANGUAGE: css\nCODE:\n```\n<div class=\"grey-box\">\n  <div class=\"red-circle\">\n    Lorem ipsum\n  </div>\n</div>\n\n.grey-box {\n    background-color: #e0e0e0; /* grey 300 */\n    width: 320px;\n    height: 240px;\n    font: 900 24px Roboto;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n}\n.red-circle {\n    background-color: #ef5350; /* red 400 */\n    padding: 16px;\n    color: #ffffff;\n    text-align: center;\n    width: 160px;\n    height: 160px;\n    border-radius: 50%;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Layout with Flexbox in React Native\nDESCRIPTION: Illustrates how to define layout properties using Flexbox in React Native. The `View` component uses the `style` prop to specify properties such as `flex`, `flexDirection`, `justifyContent`, and `alignItems` to arrange its children.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/react-native-devs.md#_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\n<View\n  style={{{\n    flex: 1,\n    flexDirection: 'column',\n    justifyContent: 'space-between',\n    alignItems: 'center'\n  }}}\n>\n```\n\n----------------------------------------\n\nTITLE: Enabling generate flag in pubspec.yaml - YAML\nDESCRIPTION: This configuration enables the generation of localization files. The `generate: true` flag within the `flutter` section of the `pubspec.yaml` file triggers the code generation process for localized messages.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/accessibility-and-internationalization/internationalization.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n# The following section is specific to Flutter.\nflutter:\n  generate: true # Add this line\n```\n\n----------------------------------------\n\nTITLE: Capturing SKP screenshot\nDESCRIPTION: This command captures a screenshot of a running Flutter app and exports it as a SKP file for further analysis using Skia tools.  It requires the observatory URI of the running app. A known issue exists where images are not recorded on real devices.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/perf/faq.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nflutter screenshot --type=skia --observatory-uri=...\n```\n\n----------------------------------------\n\nTITLE: Running Flutter Tests\nDESCRIPTION: Executes the Flutter tests in the current project directory. This ensures that the application's functionality is working as expected.\nSOURCE: https://github.com/flutter/website/blob/main/examples/layout/lakes/interactive/README.md#_snippet_3\n\nLANGUAGE: Dart\nCODE:\n```\nflutter test\n```\n\n----------------------------------------\n\nTITLE: Example of ambiguity helper function usage in Dart\nDESCRIPTION: This Dart code shows how to use the `_ambiguate` helper function with `SchedulerBinding.instance` before calling `addPostFrameCallback`. This approach avoids warnings when supporting both Flutter 3 and older versions.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/release-notes/release-notes-3.0.0.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\n_ambiguate(SchedulerBinding.instance)!.addPostFrameCallback(...);\n```\n\n----------------------------------------\n\nTITLE: Handling Double Tap Gesture for Rotation in Flutter\nDESCRIPTION: This snippet shows how to use GestureDetector to listen for a double tap event and trigger an animation. It animates the rotation of a FlutterLogo on double tap, reversing the animation if it's already completed.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/android-devs.md#_snippet_35\n\nLANGUAGE: dart\nCODE:\n```\nclass SampleApp extends StatefulWidget {\n  const SampleApp({super.key});\n\n  @override\n  State<SampleApp> createState() => _SampleAppState();\n}\n\nclass _SampleAppState extends State<SampleApp>\n    with SingleTickerProviderStateMixin {\n  late AnimationController controller;\n  late CurvedAnimation curve;\n\n  @override\n  void initState() {\n    super.initState();\n    controller = AnimationController(\n      vsync: this,\n      duration: const Duration(milliseconds: 2000),\n    );\n    curve = CurvedAnimation(parent: controller, curve: Curves.easeIn);\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: Center(\n        child: GestureDetector(\n          onDoubleTap: () {\n            if (controller.isCompleted) {\n              controller.reverse();\n            } else {\n              controller.forward();\n            }\n          },\n          child: RotationTransition(\n            turns: curve,\n            child: const FlutterLogo(size: 200),\n          ),\n        ),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Disable Swift Package Manager for CocoaPods Verification\nDESCRIPTION: This shell command disables Swift Package Manager for the current Flutter project. This is typically done temporarily to verify that the plugin still works with CocoaPods after migrating to SPM.\nSOURCE: https://github.com/flutter/website/blob/main/src/_includes/docs/swift-package-manager/migrate-swift-plugin.md#_snippet_9\n\nLANGUAGE: Shell\nCODE:\n```\nflutter config --no-enable-swift-package-manager\n```\n\n----------------------------------------\n\nTITLE: Overriding buildTextSpan Before Migration (Dart)\nDESCRIPTION: This code snippet shows how to override `buildTextSpan` in a custom `TextEditingController` before the introduction of the `BuildContext` parameter. It lacks access to inherited widgets through a context.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/buildtextspan-buildcontext.md#_snippet_0\n\nLANGUAGE: Dart\nCODE:\n```\nclass MyTextEditingController {\n  @override\n  TextSpan buildTextSpan({TextStyle? style, required bool withComposing}) {\n    /* ... */\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Managing state with @State - SwiftUI\nDESCRIPTION: This snippet demonstrates basic state management using the `@State` property wrapper in SwiftUI.  It shows how to create a simple counter with a button to increment it.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/swiftui-devs.md#_snippet_17\n\nLANGUAGE: Swift\nCODE:\n```\nstruct ContentView: View {\n  @State private var counter = 0;\n  var body: some View {\n    VStack{\n      Button(\"+\") { counter+=1 }\n      Text(String(counter))\n    }\n  }}\n```\n\n----------------------------------------\n\nTITLE: Caching Data Pseudocode\nDESCRIPTION: This pseudocode demonstrates the basic three-step operation of caching data: checking the cache, loading data if the cache is empty, and returning the cached value. This illustrates the fundamental logic behind various caching strategies.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/fundamentals/local-caching.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nData? _cachedData;\n\nFuture<Data> get data async {\n    // Step 1: Check whether your cache already contains the desired data\n    if (_cachedData == null) {\n        // Step 2: Load the data if the cache was empty\n        _cachedData = await _readData();\n    }\n    // Step 3: Return the value in the cache\n    return _cachedData!;\n}\n```\n\n----------------------------------------\n\nTITLE: Navigating to the Flutter Project Directory\nDESCRIPTION: This command navigates the terminal's current directory to the newly created Flutter project directory, which is named `my_app` in this example. This is a standard terminal command for changing directories, allowing you to execute commands within the project's file structure.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/reference/create-new-app.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ cd my_app\n```\n\n----------------------------------------\n\nTITLE: Upgrading Flutter SDK\nDESCRIPTION: This command updates the Flutter SDK to the most recent version available on the current Flutter channel. It fetches the latest SDK and applies any necessary migrations.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/upgrade.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ flutter upgrade\n```\n\n----------------------------------------\n\nTITLE: Copy and modify existing ScrollBehavior - Before Migration\nDESCRIPTION: This snippet shows a basic ListView.builder implementation before the ScrollBehavior changes, without any custom scroll behavior configuration.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/default-scroll-behavior-drag.md#_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nfinal ScrollController controller = ScrollController();\nListView.builder(\n  controller: controller,\n  itemBuilder: (BuildContext context, int index) {\n   return Text('Item $index');\n }\n);\n```\n\n----------------------------------------\n\nTITLE: Clean Flutter Project\nDESCRIPTION: This command removes build artifacts and resets the Flutter project, which is necessary when removing Swift Package Manager integration.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/packages-and-plugins/swift-package-manager/for-app-developers.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nflutter clean\n```\n\n----------------------------------------\n\nTITLE: Widget Filtering by Category Liquid\nDESCRIPTION: This snippet filters the `catalog.widgets` array to find widgets belonging to a specific category. It utilizes a custom `widget_filter` filter that takes the `categories` property and the `categoryName` as arguments. The result is assigned to the `components` variable.\nSOURCE: https://github.com/flutter/website/blob/main/src/_includes/docs/catalog-page.md#_snippet_1\n\nLANGUAGE: Liquid\nCODE:\n```\n{% assign components = catalog.widgets | widget_filter: \"categories\", categoryName %}\n```\n\n----------------------------------------\n\nTITLE: Highlighting Repaints: Full Page Repaint\nDESCRIPTION: This Flutter code defines a StatelessWidget, `EverythingRepaintsPage`, that displays a `CircularProgressIndicator` within a `Scaffold`. When repaint highlighting is enabled, this component causes the entire screen to repaint on every frame, which can be useful to demonstrate or debug the impact of repaints.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/tools/devtools/inspector.md#_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nclass EverythingRepaintsPage extends StatelessWidget {\n  const EverythingRepaintsPage({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: const Text('Repaint Example')),\n      body: const Center(child: CircularProgressIndicator()),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Raw Licenses with LicenseRegistry - Flutter\nDESCRIPTION: This section explains how to access the raw licenses in Flutter using the `LicenseRegistry` for a more custom approach to displaying licenses.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/resources/faq.md#_snippet_3\n\n\n\n----------------------------------------\n\nTITLE: Dart For Loop Snippet\nDESCRIPTION: Inserts a for loop. No dependencies are required. Input: None. Output: A basic for loop structure.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/tools/vs-code.md#_snippet_6\n\nLANGUAGE: Dart\nCODE:\n```\nfor (var i = 0; i < 10; i++) {  }\n```\n\n----------------------------------------\n\nTITLE: Ignoring .gitkeep File Text\nDESCRIPTION: This snippet shows how to update the `.gitignore` file to ensure the `.gitkeep` file in the `include` directory is included in the published package. It's important for publishing the directory even if it's otherwise empty.\nSOURCE: https://github.com/flutter/website/blob/main/src/_includes/docs/swift-package-manager/migrate-objective-c-plugin.md#_snippet_12\n\nLANGUAGE: text\nCODE:\n```\n!.gitkeep\n```\n\n----------------------------------------\n\nTITLE: Example of null-aware operator usage (deprecated)\nDESCRIPTION: This Dart code demonstrates the usage of the null-aware operator '!' with `SchedulerBinding.instance`. It is shown as an example that may trigger warnings in Flutter 3 if not properly migrated. It needs update\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/release-notes/release-notes-3.0.0.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nSchedulerBinding.instance!.addPostFrameCallback(...);\n```\n\n----------------------------------------\n\nTITLE: Analyzing Dart Code\nDESCRIPTION: This command analyzes the Dart code within the Flutter project. It checks for potential errors, warnings, and style violations, helping to ensure code quality. No specific inputs or outputs are passed to this command.\nSOURCE: https://github.com/flutter/website/blob/main/examples/state_mgmt/simple/README.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndart analyze\n```\n\n----------------------------------------\n\nTITLE: SliverList.builder in CustomScrollView (Cupertino)\nDESCRIPTION: This code snippet demonstrates how to add a SliverList to a CustomScrollView using the builder constructor within a Cupertino environment. It creates a list of 50 items, each displayed as a CupertinoListTile with a title indicating its index. The itemBuilder function dynamically generates these list items.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/lists/floating-app-bar.md#_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\n// Next, create a SliverList\nSliverList.builder(\n  // The builder function returns a CupertinoListTile with a title\n  // that displays the index of the current item.\n  itemBuilder:\n      (context, index) =>\n          CupertinoListTile(title: Text('Item #$index')),\n  // Builds 50 CupertinoListTile\n  itemCount: 50,\n)\n```\n\n----------------------------------------\n\nTITLE: Accessing InheritedWidget Data in Flutter\nDESCRIPTION: This code demonstrates how to access the data stored in the MyState InheritedWidget.  The HomeScreen widget uses MyState.of(context).data to retrieve the data and display it in a Text widget.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/fundamentals/state-management.md#_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nclass HomeScreen extends StatelessWidget {\n  const HomeScreen({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    var data = MyState.of(context).data;\n    return Scaffold(\n      body: Center(\n        child: Text(data),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: MaterialApp with ScrollBehavior (Before)\nDESCRIPTION: This shows the code before the scroll behavior was made customizable on Material Apps.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/default-desktop-scrollbars.md#_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\n// MaterialApps previously had a private ScrollBehavior.\nMaterialApp(\n  // ...\n);\n```\n\n----------------------------------------\n\nTITLE: ParallaxFlowDelegate with Dependencies (Dart)\nDESCRIPTION: This snippet defines the `ParallaxFlowDelegate` constructor, which takes `ScrollableState`, `BuildContext`, and `GlobalKey` as parameters. These dependencies are required to calculate the pixel position of a list item within its ancestor `Scrollable`, to look up the bounds of the individual list item, and to look up the final size of the background image.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/effects/parallax-scrolling.md#_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nclass ParallaxFlowDelegate extends FlowDelegate {\n  ParallaxFlowDelegate({\n    required this.scrollable,\n    required this.listItemContext,\n    required this.backgroundImageKey,\n  });\n\n  final ScrollableState scrollable;\n  final BuildContext listItemContext;\n  final GlobalKey backgroundImageKey;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables (macOS/Linux/ChromeOS)\nDESCRIPTION: This snippet demonstrates how to set environment variables for `PUB_HOSTED_URL` and `FLUTTER_STORAGE_BASE_URL` on macOS, Linux, and ChromeOS to use a Flutter mirror. These variables are used by Flutter to download dependencies and SDK components from the specified mirror.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/community/china/index.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nexport PUB_HOSTED_URL={{mirror.urls.pubhosted}};\nexport FLUTTER_STORAGE_BASE_URL={{mirror.urls.flutterstorage}}\n```\n\n----------------------------------------\n\nTITLE: Repaint Highlighting Example - Flutter\nDESCRIPTION: This Dart code defines a `StatelessWidget` that uses a `CircularProgressIndicator`. This example is intended to demonstrate how the entire screen repaints when the progress indicator updates. It requires the Flutter framework and is used to showcase repaint highlighting in DevTools.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/tools/devtools/legacy-inspector.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nclass EverythingRepaintsPage extends StatelessWidget {\n  const EverythingRepaintsPage({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: const Text('Repaint Example')),\n      body: const Center(child: CircularProgressIndicator()),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Pull and Update Git Submodules - Console\nDESCRIPTION: Refreshes the submodules by pulling the latest changes and updating the submodule to the newest commit. This is useful during development to keep the submodules up-to-date.\nSOURCE: https://github.com/flutter/website/blob/main/README.md#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\ngit pull && git submodule update --init --recursive\n```\n\n----------------------------------------\n\nTITLE: Using SystemContextMenuController.show (Deprecated)\nDESCRIPTION: Shows the deprecated method `SystemContextMenuController.show` which is now replaced by `SystemContextMenuController.showWithItems`. This method takes a `selectionRect` as argument and displays the context menu.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/system_context_menu_controller_show.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\n_controller.show(selectionRect);\n```\n\n----------------------------------------\n\nTITLE: Inject Dartpad JavaScript\nDESCRIPTION: This JavaScript snippet is responsible for injecting a DartPad into the webpage. The `defer: true` attribute indicates that the script should be executed after the HTML document has been parsed.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/gestures/handling-taps.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ndefer: true\nurl: /assets/js/inject_dartpad.js\n```\n\n----------------------------------------\n\nTITLE: ImageFilter.blur with explicit TileMode - Dart\nDESCRIPTION: This code snippet shows how to create an ImageFilter with an explicitly specified TileMode.  Before migration, developers might have explicitly set the tileMode, even when decal was intended. This example sets TileMode.decal for the blur effect.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/image-filter-blur-tilemode.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nfinal filter = ui.ImageFilter.blur(sigmaX: 4, sigmaY: 4, tileMode: TileMode.decal);\n```\n\n----------------------------------------\n\nTITLE: Running Dart Analyzer\nDESCRIPTION: This command executes the Dart analyzer on the project, which performs static analysis to identify potential issues and errors in the code. This helps to improve code quality and prevent runtime problems.\nSOURCE: https://github.com/flutter/website/blob/main/examples/animation/animate4/README.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ndart analyze\n```\n\n----------------------------------------\n\nTITLE: Widget Filtering by Subcategory Liquid\nDESCRIPTION: This snippet filters the `catalog.widgets` array to find widgets belonging to a specific subcategory. It utilizes a custom `widget_filter` filter that takes the `subcategories` property and the `sub.name` as arguments, filtering the widgets based on subcategory name. The result is assigned to the `components` variable.\nSOURCE: https://github.com/flutter/website/blob/main/src/_includes/docs/catalog-page.md#_snippet_2\n\nLANGUAGE: Liquid\nCODE:\n```\n{% assign components = catalog.widgets | widget_filter: \"subcategories\", sub.name %}\n```\n\n----------------------------------------\n\nTITLE: Using ThemeData.indicatorColor (Deprecated) in Dart\nDESCRIPTION: This code snippet demonstrates the deprecated way of setting the tab bar indicator color using ThemeData.indicatorColor. This approach is only relevant when ThemeData.useMaterial3 is set to false.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/deprecate-themedata-indicatorcolor.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\ntheme: ThemeData(\n  indicatorColor: Colors.red,\n  useMaterial3: false,\n),\n```\n\n----------------------------------------\n\nTITLE: Configure Initial Route Kotlin\nDESCRIPTION: This Kotlin code snippet demonstrates how to configure a custom initial route for a cached `FlutterEngine` within an `Application` class. It instantiates a `FlutterEngine`, sets the initial route using the `navigationChannel`, executes the Dart entrypoint, and then caches the engine. The 'your/route/here' parameter should be replaced with the desired initial route.\nSOURCE: https://github.com/flutter/website/blob/main/src/_includes/docs/add-to-app/android-initial-route-cached-engine.md#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nclass MyApplication : Application() {\n  lateinit var flutterEngine : FlutterEngine\n  override fun onCreate() {\n    super.onCreate()\n    // Instantiate a FlutterEngine.\n    flutterEngine = FlutterEngine(this)\n    // Configure an initial route.\n    flutterEngine.navigationChannel.setInitialRoute(\"your/route/here\");\n    // Start executing Dart code to pre-warm the FlutterEngine.\n    flutterEngine.dartExecutor.executeDartEntrypoint(\n      DartExecutor.DartEntrypoint.createDefault()\n    )\n    // Cache the FlutterEngine to be used by FlutterActivity or FlutterFragment.\n    FlutterEngineCache\n      .getInstance()\n      .put(\"my_engine_id\", flutterEngine)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Calculate Scroll Fraction in paintChildren (Dart)\nDESCRIPTION: This snippet calculates the percentage position of the list item within the scrollable area. The scroll fraction is a value between 0.0 and 1.0, where 0.0 represents the top of the scrollable area and 1.0 represents the bottom.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/effects/parallax-scrolling.md#_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\n@override\nvoid paintChildren(FlowPaintingContext context) {\n  // Calculate the position of this list item within the viewport.\n  final scrollableBox = scrollable.context.findRenderObject() as RenderBox;\n  final listItemBox = listItemContext.findRenderObject() as RenderBox;\n  final listItemOffset = listItemBox.localToGlobal(\n    listItemBox.size.centerLeft(Offset.zero),\n    ancestor: scrollableBox,\n  );\n\n  // Determine the percent position of this list item within the\n  // scrollable area.\n  final viewportDimension = scrollable.position.viewportDimension;\n  final scrollFraction = (listItemOffset.dy / viewportDimension).clamp(\n    0.0,\n    1.0,\n  );\n  // ···\n}\n```\n\n----------------------------------------\n\nTITLE: Running Flutter Tests\nDESCRIPTION: This command executes the Flutter tests associated with the project. It ensures that the app's functionality is working as expected and helps to prevent regressions.\nSOURCE: https://github.com/flutter/website/blob/main/examples/layout/base/README.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nflutter test\n```\n\n----------------------------------------\n\nTITLE: Remove PUB_HOSTED_URL on Windows (PowerShell)\nDESCRIPTION: This command removes the PUB_HOSTED_URL environment variable on Windows using PowerShell. It ensures that the variable is unset, preventing potential conflicts during package retrieval.\nSOURCE: https://github.com/flutter/website/blob/main/src/_includes/docs/community/china/pub-settings.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n{{prompt}} Remove-Item $env:PUB_HOSTED_URL\n```\n\n----------------------------------------\n\nTITLE: Adjusting Letter Spacing CSS\nDESCRIPTION: This CSS snippet defines styles for a grey box containing a red box with text. The letter-spacing property is used to add space between the letters in the text within the red box. The grey box provides the container, and the red box provides a styled container for the text.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/web-devs.md#_snippet_25\n\nLANGUAGE: css\nCODE:\n```\n<div class=\"grey-box\">\n  <div class=\"red-box\">\n    Lorem ipsum\n  </div>\n</div>\n\n.grey-box {\n    background-color: #e0e0e0; /* grey 300 */\n    width: 320px;\n    height: 240px;\n    font: 900 24px Roboto;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n}\n.red-box {\n    background-color: #ef5350; /* red 400 */\n    padding: 16px;\n    color: #ffffff;\n    letter-spacing: 4px;\n}\n```\n\n----------------------------------------\n\nTITLE: UserProfile Data Class in Dart\nDESCRIPTION: Defines the UserProfile data class using the `freezed` package for immutable data handling. It includes properties like `name` and `photoUrl`. This data class is used to represent user profile information throughout the application.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/app-architecture/design-patterns/offline-first.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\n@freezed\nabstract class UserProfile with _$UserProfile {\n  const factory UserProfile({\n    required String name,\n    required String photoUrl,\n  }) = _UserProfile;\n}\n```\n\n----------------------------------------\n\nTITLE: Expected Zsh Shell Output (macOS)\nDESCRIPTION: This is the expected output from the `dscl` command when Zsh is configured as the default shell. This confirms that the user's shell is set to /bin/zsh.\nSOURCE: https://github.com/flutter/website/blob/main/src/_includes/docs/install/reqs/macos/zsh-config.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nUserShell: /bin/zsh\n```\n\n----------------------------------------\n\nTITLE: Flutter Semantics Test (After Migration)\nDESCRIPTION: This test showcases the updated approach to accessing and verifying semantics nodes after the change. It now expects an additional node above the scope route in the semantics tree, reflecting the new structure introduced with the semantics traversal order modification.  The fix involves anticipating the extra node in the hierarchy.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/modal-router-semantics-order.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nimport 'dart:ui';\n\nimport 'package:flutter_test/flutter_test.dart';\nimport 'package:flutter/rendering.dart';\nimport 'package:flutter/material.dart';\n\nvoid main() {\n  testWidgets('example test', (WidgetTester tester) async {\n    final SemanticsHandle handle =\n        tester.binding.pipelineOwner.ensureSemantics();\n\n    // Build our app and trigger a frame.\n    await tester.pumpWidget(MaterialApp(home: Scaffold(body: Text('test'))));\n\n    final SemanticsNode root =\n        tester.binding.pipelineOwner.semanticsOwner.rootSemanticsNode;\n\n    final SemanticsNode firstNode = getChild(root);\n    expect(firstNode.rect, Rect.fromLTRB(0.0, 0.0, 800.0, 600.0));\n\n    // Fixes the test by expecting an additional node above the scope route.\n    final SemanticsNode secondNode = getChild(firstNode);\n    expect(secondNode.rect, Rect.fromLTRB(0.0, 0.0, 800.0, 600.0));\n\n    final SemanticsNode thirdNode = getChild(secondNode);\n    expect(thirdNode.rect, Rect.fromLTRB(0.0, 0.0, 800.0, 600.0));\n    expect(thirdNode.hasFlag(SemanticsFlag.scopesRoute), true);\n\n    final SemanticsNode forthNode = getChild(thirdNode);\n    expect(forthNode.rect, Rect.fromLTRB(0.0, 0.0, 56.0, 14.0));\n    expect(forthNode.label, 'test');\n    handle.dispose();\n  });\n}\n\nSemanticsNode getChild(SemanticsNode node) {\n  SemanticsNode child;\n  bool visiter(SemanticsNode target) {\n    child = target;\n    return false;\n  }\n\n  node.visitChildren(visiter);\n  return child;\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Data from API with Fetch API\nDESCRIPTION: This JavaScript snippet demonstrates how to fetch data from an API using the Fetch API in React Native. It retrieves the IP address from 'https://httpbin.org/ip' and updates the state with the received data. Error handling is included to catch any potential issues during the fetch operation.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/react-native-devs.md#_snippet_47\n\nLANGUAGE: JavaScript\nCODE:\n```\n// React Native\nconst [ipAddress, setIpAddress] = useState('')\n\nconst _getIPAddress = () => {\n  fetch('https://httpbin.org/ip')\n    .then(response => response.json())\n    .then(responseJson => {\n      setIpAddress(responseJson.origin);\n    })\n    .catch(error => {\n      console.error(error);\n    });\n};\n```\n\n----------------------------------------\n\nTITLE: Removing MaterialButtonWithIconMixin in Flutter\nDESCRIPTION: This snippet demonstrates how to remove the `MaterialButtonWithIconMixin` from a class in Flutter. This mixin was deprecated in v2.11 with the introduction of TextButton, OutlinedButton, and ElevatedButton.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/3-13-deprecations.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nclass MyButtonClass extends StatelessWidget with MaterialButtonWithIconMixin {\n  // ...\n}\n```\n\nLANGUAGE: dart\nCODE:\n```\nclass MyButtonClass extends StatelessWidget {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Running Flutter App\nDESCRIPTION: This command builds and runs the Flutter application on a connected device or emulator. It allows developers to interact with the application and test its functionality in a real-world environment.\nSOURCE: https://github.com/flutter/website/blob/main/examples/animation/animate2/README.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nflutter run\n```\n\n----------------------------------------\n\nTITLE: Using Platform Channels in Dart\nDESCRIPTION: This code snippet demonstrates how to invoke a method on a platform channel from Dart code. It establishes a channel named 'foo', invokes the 'bar' method with the argument 'world', and prints the returned greeting. The `invokeMethod` function is used to send the message and receive the result.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/resources/architectural-overview.md#_snippet_7\n\nLANGUAGE: Dart\nCODE:\n```\n// Dart side\nconst channel = MethodChannel('foo');\nfinal greeting = await channel.invokeMethod('bar', 'world') as String;\nprint(greeting);\n```\n\n----------------------------------------\n\nTITLE: Updating AndroidManifest.xml to use launch screen (XML)\nDESCRIPTION: This snippet shows how to update the AndroidManifest.xml file to define a splash screen as an io.flutter.embedding.android.SplashScreenDrawable. It involves locating the activity element, identifying the android:theme attribute and the meta-data element, and updating the meta-data element to point to the drawable resource.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/splash-screen-migration.md#_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n   <activity\n       // ...\n       android:theme=\"@style/SomeTheme\">\n     // ...\n     <meta-data\n         android:name=\"io.flutter.embedding.android.SplashScreenDrawable\"\n         android:resource=\"@drawable/some_splash_screen\"\n         />\n   </activity>\n```\n\n----------------------------------------\n\nTITLE: Scaling Widget with Transform - CSS\nDESCRIPTION: This CSS snippet scales a div element (`.red-box`) by a factor of 1.5 using the `transform: scale()` property. The element's background color, padding, and text color are also defined.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/web-devs.md#_snippet_13\n\nLANGUAGE: css\nCODE:\n```\n<div class=\"grey-box\">\n  <div class=\"red-box\">\n    Lorem ipsum\n  </div>\n</div>\n\n.grey-box {\n    background-color: #e0e0e0; /* grey 300 */\n    width: 320px;\n    height: 240px;\n    font: 900 24px Roboto;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n}\n.red-box {\n    background-color: #ef5350; /* red 400 */\n    padding: 16px;\n    color: #ffffff;\n    transform: scale(1.5);\n}\n```\n\n----------------------------------------\n\nTITLE: Importing HTTP Package in Dart\nDESCRIPTION: This snippet demonstrates how to import the `http` package in Dart, aliasing it as `http` for easier use.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/networking/delete-data.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:http/http.dart' as http;\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Project\nDESCRIPTION: This command creates a new Flutter project from the example app at the specified path. The `--no-overwrite` flag prevents overwriting existing files in the destination directory. This is a preliminary step to ensure the project is ready for analysis and execution.\nSOURCE: https://github.com/flutter/website/blob/main/examples/animation/animate2/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nflutter create --no-overwrite $PROJECT\n```\n\n----------------------------------------\n\nTITLE: Flutter Container with Fixed Dimensions\nDESCRIPTION: This example creates a Container widget with a specified width and height of 100 pixels and a red background color. However, because the screen forces the container to fill the screen, the width and height parameters will be ignored. The container will expand to fill the screen.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/layout/constraints.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nContainer(width: 100, height: 100, color: red)\n```\n\n----------------------------------------\n\nTITLE: Printing User Object to Console in Dart\nDESCRIPTION: This code snippet demonstrates how to create instances of the `Address` and `User` classes and then print the JSON representation of the `User` object to the console.  This highlights the issue of nested objects not being serialized without `explicitToJson: true`.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/data-and-backend/serialization/json.md#_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\nAddress address = Address('My st.', 'New York');\nUser user = User('John', address);\nprint(user.toJson());\n```\n\n----------------------------------------\n\nTITLE: Shader Declaration - YAML\nDESCRIPTION: This snippet demonstrates how to declare GLSL shaders within the `pubspec.yaml` file by specifying either the path to a specific shader file or a directory containing shaders. Flutter compiles these shaders into appropriate backend formats during build time.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/tools/pubspec.md#_snippet_18\n\nLANGUAGE: YAML\nCODE:\n```\nflutter:\n  shaders:\n    -  { path_to_file | path_to_directory }\n    [...]\n```\n\n----------------------------------------\n\nTITLE: Creating Help Link in HTML\nDESCRIPTION: This HTML snippet creates a link with an icon and text that directs users to the installation help section of the Flutter website. It includes an anchor tag with an 'id' and 'href' attribute for navigation and styling, as well as a span element to display the help icon and text.\nSOURCE: https://github.com/flutter/website/blob/main/src/_includes/docs/help-link.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<p class=\"install-help\">\n    <a id='{{ location }}' href='/get-started/install/help{{ section }}'>\n    <span class='material-symbols'>help</span>\n    <span>Help</span>\n    </a>\n</p>\n```\n\n----------------------------------------\n\nTITLE: Interactive Flutter ListView Example\nDESCRIPTION: This example shows a complete Flutter application with a ListView. It imports the necessary material package, defines a StatelessWidget called MyApp that returns a MaterialApp. The MyApp widget renders a Scaffold with an AppBar and a ListView in the body, containing three ListTile widgets.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/lists/basic-list.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\n\nvoid main() => runApp(const MyApp());\n\nclass MyApp extends StatelessWidget {\n  const MyApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    const title = 'Basic List';\n\n    return MaterialApp(\n      title: title,\n      home: Scaffold(\n        appBar: AppBar(title: const Text(title)),\n        body: ListView(\n          children: const <Widget>[\n            ListTile(leading: Icon(Icons.map), title: Text('Map')),\n            ListTile(leading: Icon(Icons.photo_album), title: Text('Album')),\n            ListTile(leading: Icon(Icons.phone), title: Text('Phone')),\n          ],\n        ),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Install Corepack - Console\nDESCRIPTION: Installs corepack using brew. This is only necessary if Node was installed using Homebrew and corepack wasn't included by default. Corepack is used to manage pnpm.\nSOURCE: https://github.com/flutter/website/blob/main/README.md#_snippet_7\n\nLANGUAGE: console\nCODE:\n```\nbrew install corepack\n```\n\n----------------------------------------\n\nTITLE: Creating Reusable Components in React Native\nDESCRIPTION: This React Native code defines a reusable component `CustomCard` that takes `index` and `onPress` as props. It renders a `View` containing a `Text` displaying the card index and a `Button` that calls the `onPress` function with the index when pressed. The usage example demonstrates how to pass the `onPress` function and index to the `CustomCard` component.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/react-native-devs.md#_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\n// React Native\nconst CustomCard = ({ index, onPress }) => {\n  return (\n    <View>\n      <Text> Card {index} </Text>\n      <Button\n        title=\"Press\"\n        onPress={() => onPress(index)}\n      />\n    </View>\n  );\n};\n\n// Usage\n<CustomCard onPress={this.onPress} index={item.key} />\n```\n\n----------------------------------------\n\nTITLE: Run Flutter App - Flutter CLI\nDESCRIPTION: This command runs the Flutter example app, building and deploying it to a connected device or emulator. It verifies that the plugin integrates correctly with the example app.\nSOURCE: https://github.com/flutter/website/blob/main/src/_includes/docs/swift-package-manager/migrate-swift-plugin.md#_snippet_17\n\nLANGUAGE: sh\nCODE:\n```\nflutter run\n```\n\n----------------------------------------\n\nTITLE: Updating App with Text Section in Flutter\nDESCRIPTION: Demonstrates how to add the `TextSection` widget to the app's layout. It involves creating an instance of `TextSection` with a specific description and adding it as a child widget, typically after the `ButtonSection`.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/layout/tutorial.md#_snippet_9\n\nLANGUAGE: Dart\nCODE:\n```\n      location: 'Kandersteg, Switzerland',\n    ),\n    ButtonSection(),\n+   TextSection(\n+     description:\n+         'Lake Oeschinen lies at the foot of the Blüemlisalp in the '\n+         'Bernese Alps. Situated 1,578 meters above sea level, it '\n+         'is one of the larger Alpine Lakes. A gondola ride from '\n+         'Kandersteg, followed by a half-hour walk through pastures '\n+         'and pine forest, leads you to the lake, which warms to 20 '\n+         'degrees Celsius in the summer. Activities enjoyed here '\n+         'include rowing, and riding the summer toboggan run.',\n+   ),\n  ],\n```\n\n----------------------------------------\n\nTITLE: Validating Flutter SDK and Web Browser Installation\nDESCRIPTION: This snippet executes the `flutter doctor` command to validate the Flutter SDK installation and the availability of a compatible web browser. This command checks for any missing dependencies or configuration issues that might prevent successful web development with Flutter. The output will display the status of various components and provide instructions for resolving any identified problems.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/platform-integration/web/install-web/index.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ flutter doctor\n```\n\n----------------------------------------\n\nTITLE: Running Flutter Tests\nDESCRIPTION: This command executes the Flutter tests defined within the project. It verifies the functionality and correctness of the application.\nSOURCE: https://github.com/flutter/website/blob/main/examples/layout/lakes/step6/README.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nflutter test\n```\n\n----------------------------------------\n\nTITLE: Flutter Lints Dev Dependency - YAML\nDESCRIPTION: This snippet shows how to add a development dependency on the `flutter_lints` package within the `pubspec.yaml` file. This package provides a set of recommended lints for Flutter projects.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/tools/pubspec.md#_snippet_28\n\nLANGUAGE: YAML\nCODE:\n```\ndev_dependencies:\n  flutter_lints: ^2.0.0\n```\n\n----------------------------------------\n\nTITLE: Update Kotlin Version in Gradle (Groovy)\nDESCRIPTION: This code snippet shows how to update the Kotlin version in the `android/build.gradle` file of a Flutter project. It highlights the line that needs to be modified, replacing the old version ('1.3.50') with the required version ('1.5.31').\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/kotlin-version.md#_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\n  buildscript {\n-     ext.kotlin_version = '1.3.50'\n+     ext.kotlin_version = '1.5.31'\n```\n\n----------------------------------------\n\nTITLE: Inspect System Library Dependencies on Linux\nDESCRIPTION: These commands build a Flutter Linux application in release mode and then inspect its system library dependencies using the `ldd` command. The `flutter build linux --release` command compiles the Flutter application. The `ldd` command then lists the shared library dependencies of the executable.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/platform-integration/linux/building.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ flutter build linux --release\n$ ldd build/linux/x64/release/bundle/linux_desktop_test\n```\n\n----------------------------------------\n\nTITLE: Run Flutter in Chrome (WebAssembly Build Mode)\nDESCRIPTION: This command runs a Flutter web application in Chrome using the WebAssembly build mode. The `--wasm` flag enables the use of `skwasm` and `canvaskit` renderers, with `skwasm` being preferred if the browser supports WasmGC.  If WasmGC isn't supported, `canvaskit` is used.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/platform-integration/web/renderers.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nflutter run -d chrome --wasm\n```\n\n----------------------------------------\n\nTITLE: Accessing Flutter Asset iOS Objective-C\nDESCRIPTION: This Objective-C snippet shows how to access a Flutter asset in iOS using the `NSBundle` API. It retrieves the lookup key using `FlutterPluginRegistrar` and then finds the path for the asset using the main bundle. This assumes you are working within the context of a Flutter plugin.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/assets/assets-and-images.md#_snippet_7\n\nLANGUAGE: objective-c\nCODE:\n```\nNSString* key = [registrar lookupKeyForAsset:@\"icons/heart.png\"];\nNSString* path = [[NSBundle mainBundle] pathForResource:key ofType:nil];\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Project\nDESCRIPTION: Creates a new Flutter project from an existing example, avoiding overwriting any existing files. This command initializes the project structure with the necessary files and configurations.\nSOURCE: https://github.com/flutter/website/blob/main/examples/layout/container/README.md#_snippet_0\n\nLANGUAGE: Dart\nCODE:\n```\nflutter create --no-overwrite $PROJECT\n```\n\n----------------------------------------\n\nTITLE: Accessing Flutter Logs\nDESCRIPTION: This command retrieves logs from the currently connected device.  The logs can be cleared with ⌘ + k on Mac.  These logs are helpful in identifying exceptions and crashes occurring within the Flutter framework.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/resources/bug-reports.md#_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nflutter logs\n```\n\n----------------------------------------\n\nTITLE: Defining Data Models (Item, Customer)\nDESCRIPTION: This snippet defines the data models for the application: `Item` representing a food item and `Customer` representing a person. It includes properties like name, price, image provider, and a list of items in the customer's cart.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/effects/drag-a-widget.md#_snippet_7\n\nLANGUAGE: Dart\nCODE:\n```\nconst List<Item> _items = [\n  Item(\n    name: 'Spinach Pizza',\n    totalPriceCents: 1299,\n    uid: '1',\n    imageProvider: NetworkImage(\n      'https://docs.flutter.dev'\n      '/cookbook/img-files/effects/split-check/Food1.jpg',\n    ),\n  ),\n  Item(\n    name: 'Veggie Delight',\n    totalPriceCents: 799,\n    uid: '2',\n    imageProvider: NetworkImage(\n      'https://docs.flutter.dev'\n      '/cookbook/img-files/effects/split-check/Food2.jpg',\n    ),\n  ),\n  Item(\n    name: 'Chicken Parmesan',\n    totalPriceCents: 1499,\n    uid: '3',\n    imageProvider: NetworkImage(\n      'https://docs.flutter.dev'\n      '/cookbook/img-files/effects/split-check/Food3.jpg',\n    ),\n  ),\n];\n```\n\n----------------------------------------\n\nTITLE: Removing GMS and Crashlytics plugin application from app/build.gradle (Groovy)\nDESCRIPTION: This code shows how to remove the legacy application of the Google Services and Crashlytics plugins from app/build.gradle.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/flutter-gradle-plugin-apply.md#_snippet_8\n\nLANGUAGE: Groovy\nCODE:\n```\n- apply plugin: 'com.google.gms.google-services'\n- apply plugin: 'com.google.firebase.crashlytics'\n```\n\n----------------------------------------\n\nTITLE: RenderFlex Overflow Problem in Flutter\nDESCRIPTION: This code demonstrates a common scenario where a RenderFlex overflow error occurs in Flutter. The Column widget, lacking constraints from its parent Row widget, tries to be wider than the space available, causing the overflow. The Text widget within the Column tries to be as wide as all the characters it needs to display, leading to the width clash.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/testing/common-errors.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nWidget build(BuildContext context) {\n  return Row(\n    children: [\n      const Icon(Icons.message),\n      Column(\n        mainAxisSize: MainAxisSize.min,\n        crossAxisAlignment: CrossAxisAlignment.start,\n        children: [\n          Text('Title', style: Theme.of(context).textTheme.headlineMedium),\n          const Text(\n            'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed '\n            'do eiusmod tempor incididunt ut labore et dolore magna '\n            'aliqua. Ut enim ad minim veniam, quis nostrud '\n            'exercitation ullamco laboris nisi ut aliquip ex ea '\n            'commodo consequat.',\n          ),\n        ],\n      ),\n    ],\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Running Flutter App\nDESCRIPTION: This command runs the Flutter application on a connected device or emulator. It compiles the code and deploys it to the target platform. The app will then be launched and run interactively.\nSOURCE: https://github.com/flutter/website/blob/main/examples/state_mgmt/simple/README.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nflutter run\n```\n\n----------------------------------------\n\nTITLE: Scaffold with Column\nDESCRIPTION: Illustrates a Scaffold containing a Column, showcasing how the screen forces the Scaffold to fill its size. The Scaffold then provides loose constraints to its child Container, allowing the container to be any size, but not larger than the screen. This demonstrates the concept of loose constraints where a widget can be smaller than the available space.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/layout/constraints.md#_snippet_58\n\nLANGUAGE: dart\nCODE:\n```\nScaffold(\n  body: Container(\n    color: blue,\n    child: const Column(children: [Text('Hello!'), Text('Goodbye!')]),\n  ),\n)\n```\n\n----------------------------------------\n\nTITLE: Create apple-app-site-association JSON file\nDESCRIPTION: Creates the `apple-app-site-association` file in JSON format.  Replace `S8QB4VV633.com.example.deeplinkCookbook` with the correct `appID` composed of your team ID and bundle ID. This file tells the mobile browser which iOS app to open instead of the browser when accessing the specified domain.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/navigation/set-up-universal-links.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"applinks\": {\n    \"apps\": [],\n    \"details\": [\n      {\n        \"appIDs\": [\n          \"S8QB4VV633.com.example.deeplinkCookbook\"\n        ],\n        \"paths\": [\n          \"*\"\n        ],\n        \"components\": [\n          {\n            \"/\": \"/*\"\n          }\n        ]\n      }\n    ]\n  },\n  \"webcredentials\": {\n    \"apps\": [\n      \"S8QB4VV633.com.example.deeplinkCookbook\"\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Define Second Activity with Compose UI in Kotlin\nDESCRIPTION: This Kotlin code defines a `SecondActivity` using Jetpack Compose. It sets up a basic UI with a text label, displays a message passed from the `MainActivity`, and provides a button to exit the activity. It uses Modifier.fillMaxSize() to take up the whole screen.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/platform-integration/android/compose-activity.md#_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\nclass SecondActivity : ComponentActivity() {\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n\n        setContent {\n            Surface(modifier = Modifier.fillMaxSize(), color = MaterialTheme.colorScheme.background) {\n                Column {\n                    Text(text = \"Second Activity\")\n                    // Note: This must match the shape of the data passed from your Dart code.\n                    Text(\"\" + getIntent()?.getExtras()?.getString(\"message\"))\n                    Button(onClick = {  finish() }) {\n                        Text(\"Exit\")\n                    }\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Hybrid Plugin Configuration\nDESCRIPTION: This YAML snippet configures a Flutter plugin for a hybrid implementation on Windows.  It uses both `dartPluginClass` and `pluginClass` in the pubspec.yaml file, indicating the use of both Dart and native code for the platform implementation.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/packages-and-plugins/developing-packages.md#_snippet_18\n\nLANGUAGE: YAML\nCODE:\n```\nflutter:\n  plugin:\n    implements: hello\n    platforms:\n      windows:\n        dartPluginClass: HelloPluginWindows\n        pluginClass: HelloPlugin\n```\n\n----------------------------------------\n\nTITLE: Importing flutter_localizations in main.dart (Dart)\nDESCRIPTION: This code snippet showcases how to import the `flutter_localizations` library in `main.dart`. This import is necessary to use the localization features provided by the `flutter_localizations` package.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/accessibility-and-internationalization/internationalization.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter_localizations/flutter_localizations.dart';\n```\n\n----------------------------------------\n\nTITLE: Disable SPM globally (Shell)\nDESCRIPTION: This command disables Swift Package Manager globally for the current user.  All Flutter projects will default to using CocoaPods for dependencies unless overridden by a project-specific setting in `pubspec.yaml`.\nSOURCE: https://github.com/flutter/website/blob/main/src/_includes/docs/swift-package-manager/how-to-enable-disable.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nflutter config --no-enable-swift-package-manager\n```\n\n----------------------------------------\n\nTITLE: Using Enum.name and DiagnosticsProperty after migration (Dart)\nDESCRIPTION: This code snippet demonstrates the recommended way to access the string value of an enum using the `name` getter. It also demonstrates how to use `DiagnosticsProperty` for non-enum types instead of `EnumProperty`.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/describe-enum.md#_snippet_1\n\nLANGUAGE: Dart\nCODE:\n```\nenum MyEnum { paper, rock }\n\nprint(MyEnum.paper.name); // output: paper\n\n// TextInputType is not an Enum\nproperties.add(DiagnosticsProperty<TextInputType>( ... ));\n```\n\n----------------------------------------\n\nTITLE: Null Handling: Dart\nDESCRIPTION: This snippet illustrates how Dart handles null values for uninitialized variables. Before null safety, uninitialized variables are null. With sound null safety (Dart 2.12+), types are non-nullable by default.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/react-native-devs.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n// JavaScript\nlet name; // == undefined\n```\n\nLANGUAGE: Dart\nCODE:\n```\n// Dart\nvar name; // == null; raises a linter warning\nint? x; // == null\n```\n\n----------------------------------------\n\nTITLE: Adding Controller Instance Field - Dart\nDESCRIPTION: This code snippet adds a nullable field, `_firestoreController`, to the `_PlaySessionScreenState` class. This field will hold an instance of the FirestoreController, allowing the play session screen to interact with Firestore.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/games/firestore-multiplayer.md#_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nFirestoreController? _firestoreController;\n```\n\n----------------------------------------\n\nTITLE: Adding test dependency in pubspec.yaml\nDESCRIPTION: This code snippet demonstrates how to add an explicit dependency to the `test` package in your `pubspec.yaml` file. This is required due to a breaking change introduced in Flutter, where the direct dependency of `flutter_test` on `package:test` was removed.  You need at least version 1.5.1.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/release-notes/release-notes-0.0.21-1.0.0.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\ndev_dependencies:\n  test: ^1.5.1\n```\n\n----------------------------------------\n\nTITLE: Deploy to Firebase Hosting - Bash\nDESCRIPTION: This command deploys the contents of the `_site` directory to your activated Firebase project's default hosting site.  It utilizes the Firebase tools package.\nSOURCE: https://github.com/flutter/website/blob/main/README.md#_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nnpm exec -- firebase-tools deploy --only hosting\n```\n\n----------------------------------------\n\nTITLE: Add Compose Dependencies in Groovy\nDESCRIPTION: This snippet adds required dependencies to the `dependencies` block in `android/app/build.gradle` to support Compose, core-ktx, lifecycle-runtime-ktx, activity-compose, material, material3, junit, espresso, ui-test-junit4, and ui-tooling. It imports required libraries to run compose.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/platform-integration/android/compose-activity.md#_snippet_4\n\nLANGUAGE: groovy\nCODE:\n```\ndependencies {\n    implementation(\"androidx.core:core-ktx:1.10.1\")\n    implementation(\"androidx.lifecycle:lifecycle-runtime-ktx:2.6.1\")\n    implementation(\"androidx.activity:activity-compose\")\n    implementation(platform(\"androidx.compose:compose-bom:2024.06.00\"))\n    implementation(\"androidx.compose.ui:ui\")\n    implementation(\"androidx.compose.ui:ui-graphics\")\n    implementation(\"androidx.compose.ui:ui-tooling-preview\")\n    implementation(\"androidx.compose.material:material\")\n    implementation(\"androidx.compose.material3:material3\")\n    testImplementation(\"junit:junit:4.13.2\")\n    androidTestImplementation(\"androidx.test.ext:junit:1.1.5\")\n    androidTestImplementation(\"androidx.test.espresso:espresso-core:3.5.1\")\n    androidTestImplementation(platform(\"androidx.compose:compose-bom:2023.08.00\"))\n    androidTestImplementation(\"androidx.compose.ui:ui-test-junit4\")\n    debugImplementation(\"androidx.compose.ui:ui-tooling\")\n    debugImplementation(\"androidx.compose.ui:ui-test-manifest\")\n}\n```\n\n----------------------------------------\n\nTITLE: Running the Flutter Application\nDESCRIPTION: This command builds and runs the Flutter application on a connected device or emulator. It allows you to interact with and test the application's user interface and features.\nSOURCE: https://github.com/flutter/website/blob/main/examples/layout/card_and_stack/README.md#_snippet_4\n\nLANGUAGE: Dart\nCODE:\n```\nflutter run\n```\n\n----------------------------------------\n\nTITLE: Display Current Analytics Configuration in Flutter\nDESCRIPTION: This command displays the current analytics configuration, showing whether analytics reporting is currently enabled or disabled.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/reference/crash-reporting.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ flutter config\n```\n\n----------------------------------------\n\nTITLE: Implementing TextInputClient with null AutofillScope Dart\nDESCRIPTION: Demonstrates a basic implementation of `TextInputClient` where the `currentAutofillScope` getter returns `null`. This signifies that the input field will be autofilled independently without considering other connected fields.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/add-currentAutofillScope-to-TextInputClient.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nclass CustomTextField implements TextInputClient {\n  // Not having an AutofillScope does not prevent the input field\n  // from being autofilled. However, only this input field is\n  // autofilled when autofill is triggered on it.\n  AutofillScope get currentAutofillScope => null;\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Pointer Scroll Events in Flutter\nDESCRIPTION: This snippet demonstrates how to use the `Listener` widget to detect and respond to scroll wheel events in a Flutter application. The `onPointerSignal` callback is used to capture `PointerScrollEvent` and extract the scroll delta. The `child` is a `ListView`, which will automatically handle scrolling based on the delta.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/adaptive-responsive/input.md#_snippet_0\n\nLANGUAGE: Dart\nCODE:\n```\nreturn Listener(\n  onPointerSignal: (event) {\n    if (event is PointerScrollEvent) print(event.scrollDelta.dy);\n  },\n  child: ListView(),\n);\n```\n\n----------------------------------------\n\nTITLE: Text Truncation Filter Liquid\nDESCRIPTION: This snippet uses the built-in Liquid filter `truncatewords` to limit the description text to a specific word count. It ensures that longer descriptions are shortened to fit within the card's content area, improving visual consistency.\nSOURCE: https://github.com/flutter/website/blob/main/src/_includes/docs/catalog-page.md#_snippet_6\n\nLANGUAGE: Liquid\nCODE:\n```\n{{ comp.description | truncatewords: 25 }}\n```\n\n----------------------------------------\n\nTITLE: Flutter HomePage Widget\nDESCRIPTION: Illustrates the creation of a HomePage widget using a Scaffold and Center widgets. It displays the text 'Hello, World!' centered within the Scaffold's body.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/swiftui-devs.md#_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nclass HomePage extends StatelessWidget {\n  const HomePage({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return const Scaffold(body: Center(child: Text('Hello, World!')));\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Verify Flutter and Dart SDK Compatibility (CMD - Corrected PATH)\nDESCRIPTION: This command checks the location of the `flutter` and `dart` executables after the system path has been updated to prioritize the Flutter SDK's `bin` directory. This confirms the correct Dart version is being used. Executed in the Command Prompt (cmd.exe).\nSOURCE: https://github.com/flutter/website/blob/main/src/_includes/docs/dart-tool-win.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nC:\\>where flutter dart\nC:\\dev\\src\\flutter\\bin\\flutter\nC:\\dev\\src\\flutter\\bin\\flutter.bat\nC:\\dev\\src\\flutter\\bin\\dart\nC:\\dev\\src\\flutter\\bin\\dart.bat\nC:\\dev\\src\\dart-sdk\\bin\\dart.exe\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter bin directory to PATH in .zshenv (Bash)\nDESCRIPTION: This snippet demonstrates how to add the Flutter SDK's 'bin' directory to the PATH environment variable in the .zshenv file.  It uses the 'export' command to prepend the Flutter bin path to the existing PATH variable. Requires the Flutter SDK to be installed and the path updated to match the local installation directory.\nSOURCE: https://github.com/flutter/website/blob/main/src/_includes/docs/install/reqs/macos/set-path.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport PATH=$HOME/development/flutter/bin:$PATH\n```\n\n----------------------------------------\n\nTITLE: Complete Orientation Tests\nDESCRIPTION: This is the complete `widget_test.dart` file, demonstrating both portrait and landscape orientation tests within a single test group.  It ensures the app adapts the number of displayed columns based on screen orientation using `MediaQuery` and `SliverGridDelegateWithFixedCrossAxisCount`.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/testing/widget/orientation.md#_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\nimport 'package:flutter_test/flutter_test.dart';\nimport 'package:orientation_tests/main.dart';\n\nvoid main() {\n  group('Orientation', () {\n    // Check if portrait mode displays correctly.\n    testWidgets('Displays 2 columns in portrait mode', (tester) async {\n      // Build the app.\n      await tester.pumpWidget(const MyApp());\n\n      // Change to portrait.\n      tester.view.physicalSize = const Size(600, 800);\n      tester.view.devicePixelRatio = 1.0;\n      addTearDown(() {\n        tester.view.resetPhysicalSize();\n      });\n      await tester.pump();\n\n      // Verify initial orientation is portrait.\n      final orientation =\n          MediaQuery.of(\n            tester.element(find.byType(OrientationList)),\n          ).orientation;\n      expect(orientation, Orientation.portrait);\n\n      // Verify there are only 2 columns in portrait mode.\n      final gridViewFinder = find.byType(GridView);\n      final gridView = tester.widget<GridView>(gridViewFinder);\n      final delegate =\n          gridView.gridDelegate as SliverGridDelegateWithFixedCrossAxisCount;\n      expect(delegate.crossAxisCount, 2);\n    });\n\n    // Check if landscape mode displays correctly.\n    testWidgets('Displays 3 columns in landscape mode', (tester) async {\n      // Build the app.\n      await tester.pumpWidget(const MyApp());\n\n      // Change to landscape.\n      tester.view.physicalSize = const Size(800, 600);\n      tester.view.devicePixelRatio = 1.0;\n      addTearDown(() {\n        tester.view.resetPhysicalSize();\n      });\n      await tester.pump();\n\n      // Verify initial orientation is landscape.\n      final orientation =\n          MediaQuery.of(\n            tester.element(find.byType(OrientationList)),\n          ).orientation;\n      expect(orientation, Orientation.landscape);\n\n      // Verify there are only 3 columns in landscape mode.\n      final gridViewFinder = find.byType(GridView);\n      final gridView = tester.widget<GridView>(gridViewFinder);\n      final delegate =\n          gridView.gridDelegate as SliverGridDelegateWithFixedCrossAxisCount;\n      expect(delegate.crossAxisCount, 3);\n    });\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Flutter Project\nDESCRIPTION: This command creates a new Flutter project from the example application source code. The `--no-overwrite` flag prevents overwriting existing files if the project already exists. $PROJECT represents the relative path to the example application's directory.\nSOURCE: https://github.com/flutter/website/blob/main/examples/layout/lakes/step3/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nflutter create --no-overwrite $PROJECT\n```\n\n----------------------------------------\n\nTITLE: Flutter Implicit Animation Opacity Example\nDESCRIPTION: This Dart code defines a Flutter application that displays an image, a button, and some text. The FadeInDemo StatefulWidget contains the main UI elements. The MyApp StatelessWidget configures the MaterialApp and Scaffold widgets. The main function runs the app.\nSOURCE: https://github.com/flutter/website/blob/main/src/_includes/docs/implicit-animations/fade-in-starter-code.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n// Copyright 2019 the Dart project authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license\n// that can be found in the LICENSE file.\n\nimport 'package:flutter/material.dart';\n\nconst owlUrl =\n    'https://raw.githubusercontent.com/flutter/website/main/src/content/assets/images/docs/owl.jpg';\n\nclass FadeInDemo extends StatefulWidget {\n  const FadeInDemo({super.key});\n\n  @override\n  State<FadeInDemo> createState() => _FadeInDemoState();\n}\n\nclass _FadeInDemoState extends State<FadeInDemo> {\n  @override\n  Widget build(BuildContext context) {\n    return ListView(children: <Widget>[\n      Image.network(owlUrl),\n      TextButton(\n        child: const Text(\n          'Show Details',\n          style: TextStyle(color: Colors.blueAccent),\n        ),\n        onPressed: () => {},\n      ),\n      const Column(\n        children: [\n          Text('Type: Owl'),\n          Text('Age: 39'),\n          Text('Employment: None'),\n        ],\n      )\n    ]);\n  }\n}\n\nclass MyApp extends StatelessWidget {\n  const MyApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return const MaterialApp(\n      home: Scaffold(\n        body: Center(\n          child: FadeInDemo(),\n        ),\n      ),\n    );\n  }\n}\n\nvoid main() {\n  runApp(\n    const MyApp(),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: ThemeData Primary Color Update - Dart\nDESCRIPTION: This snippet shows how to access the primary color from a `MaterialColor` in `ThemeData`.  Previously, the `shade500` was directly used. Now the primary color is directly accessed.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/release-notes/release-notes-0.0.21-1.0.0.md#_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\n// Before\nexpect(widget.color, Colors.blue.shade500) // primary color\n\n// After\nexpect(widget.color, Colors.blue) // primary color\n```\n\n----------------------------------------\n\nTITLE: Fading an Image - Xamarin Forms (XML)\nDESCRIPTION: Defines an Image element in XAML, which is the declarative UI language used by Xamarin.Forms. It declares an Image named 'myImage' and binds its source to the 'MyImage' property of the bound data context.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/xamarin-forms-devs.md#_snippet_12\n\nLANGUAGE: xml\nCODE:\n```\n<Image Source=\"{Binding MyImage}\" x:Name=\"myImage\" />\n```\n\n----------------------------------------\n\nTITLE: Container with red color Flutter\nDESCRIPTION: This snippet creates a simple Container widget with red background color.  The screen forces the container to be the same size as the screen.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/layout/constraints.md#_snippet_31\n\nLANGUAGE: dart\nCODE:\n```\nContainer(color: red)\n```\n\n----------------------------------------\n\nTITLE: Container Sizing with Center Widget in Flutter\nDESCRIPTION: This example shows how the Center widget influences the size of a Container. The Center forces the Container to fill the entire screen. The Container, having no explicit size constraints, expands to fill the available space provided by the Center.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/layout/constraints.md#_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nCenter(child: Container(color: red))\n```\n\n----------------------------------------\n\nTITLE: Flutter Field Structure YAML\nDESCRIPTION: This code snippet shows the basic structure of the `flutter` field in the `pubspec.yaml` file. This field acts as a container for various Flutter-specific settings.  It allows for organizing configuration related to assets, fonts, flavors, and other Flutter-specific features.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/tools/pubspec.md#_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nflutter:\n  [flutter_field]\n  [...]\n```\n\n----------------------------------------\n\nTITLE: Test After Migration Dart\nDESCRIPTION: This example demonstrates the updated test case, showcasing how to correctly use `CheckboxMenuButton` within a menu context by wrapping it in a `Semantics` widget with the appropriate role (`SemanticsRole.menu` or `SemanticsRole.menuBar`).  This ensures proper accessibility testing.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/menu-semantics-roles.md#_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nawait tester.pumpWidget(\n  MaterialApp(\n    home: Semantics(\n      role: SemanticsRole.menu, // or `SemanticsRole.menuBar`,\n      child: CheckboxMenuButton(\n        onPressed: () {},\n        child: const Text('Menu Button'),\n      ),\n    ),\n  )\n);\n```\n\n----------------------------------------\n\nTITLE: Navigating to Project Directory\nDESCRIPTION: This command changes the current directory to the newly created Flutter project directory, specified by the `$PROJECT` variable. This step is necessary to execute subsequent commands within the context of the Flutter project.\nSOURCE: https://github.com/flutter/website/blob/main/examples/animation/animate2/README.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ncd $PROJECT\n```\n\n----------------------------------------\n\nTITLE: MouseRegion Code Before Migration (Dart)\nDESCRIPTION: This code snippet shows the implementation of `MyMouseRegion` before the migration. It extends `SingleChildRenderObjectWidget` and updates the `RenderMouseRegion` on enter and exit events using callbacks. This code may call setState on an unmounted widget, leading to errors.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/mouse-tracker-no-longer-attaches-annotations.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nclass MyMouseRegion extends SingleChildRenderObjectWidget {\n  const MyMouseRegion({this.onHoverChange});\n\n  final ValueChanged<bool> onHoverChange;\n\n  @override\n  RenderMouseRegion createRenderObject(BuildContext context) {\n    return RenderMouseRegion(\n      onEnter: (_) { onHoverChange(true); },\n      onExit: (_) { onHoverChange(false); },\n    );\n  }\n\n  @override\n  void updateRenderObject(BuildContext context, RenderMouseRegion renderObject) {\n    renderObject\n      ..onEnter = (_) { onHoverChange(true); }\n      ..onExit = (_) { onHoverChange(false); };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Set Theme in AndroidManifest.xml (Android)\nDESCRIPTION: This XML snippet sets the `theme` attribute of the `FlutterActivity` to the launch theme and adds a metadata element to instruct Flutter to switch to the normal theme. The `theme` attribute specifies which style is used for the activity and the `meta-data` element specifies which theme is used once the splash screen is done.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/platform-integration/android/splash-screen.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<activity\n    android:name=\".MyActivity\"\n    android:theme=\"@style/LaunchTheme\"\n    // ...\n    >\n    <meta-data\n        android:name=\"io.flutter.embedding.android.NormalTheme\"\n        android:resource=\"@style/NormalTheme\"\n        />\n    <intent-filter>\n        <action android:name=\"android.intent.action.MAIN\"/>\n        <category android:name=\"android.intent.category.LAUNCHER\"/>\n    </intent-filter>\n</activity>\n```\n\n----------------------------------------\n\nTITLE: List of Removed v1 Embedding Classes\nDESCRIPTION: This snippet lists the Java classes removed as part of the Android v1 embedding removal in Flutter 3.29.0. These classes are no longer available and need to be replaced with their v2 embedding counterparts.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/v1-android-embedding.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nio.flutter.app.FlutterActivity\nio.flutter.app.FlutterActivityDelegate\nio.flutter.app.FlutterActivityEvents\nio.flutter.app.FlutterApplication\nio.flutter.app.FlutterFragmentActivity\nio.flutter.app.FlutterPlayStoreSplitApplication\nio.flutter.app.FlutterPluginRegistry\n\nio.flutter.embedding.engine.plugins.shim.ShimPluginRegistry\nio.flutter.embedding.engine.plugins.shim.ShimRegistrar\n\nio.flutter.view.FlutterMain\nio.flutter.view.FlutterNativeView\nio.flutter.view.FlutterView\n```\n\n----------------------------------------\n\nTITLE: Flutter StatelessWidget Definition\nDESCRIPTION: Demonstrates defining a StatelessWidget in Flutter. The build method describes the part of the user interface it represents. In this case, a CupertinoApp is returned with a HomePage.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/swiftui-devs.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nclass MyApp extends StatelessWidget {\n  const MyApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    // Returns a CupertinoApp that, by default,\n    // has the look and feel of an iOS app.\n    return const CupertinoApp(home: HomePage());\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying the translucent theme\nDESCRIPTION: This XML snippet shows how to apply a defined theme to a `FlutterActivity` in the AndroidManifest.xml. The `android:theme` attribute is set to the previously defined translucent theme.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/add-to-app/android/add-flutter-screen.md#_snippet_12\n\nLANGUAGE: xml\nCODE:\n```\n<activity\n  android:name=\"io.flutter.embedding.android.FlutterActivity\"\n  android:theme=\"@style/MyTheme\"\n  android:configChanges=\"orientation|keyboardHidden|keyboard|screenSize|locale|layoutDirection|fontScale|screenLayout|density|uiMode\"\n  android:hardwareAccelerated=\"true\"\n  android:windowSoftInputMode=\"adjustResize\"\n  />\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Project\nDESCRIPTION: This command creates a new Flutter project without overwriting existing files in the specified directory.  The `$PROJECT` variable represents the path to the example app project.\nSOURCE: https://github.com/flutter/website/blob/main/examples/layout/non_material/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nflutter create --no-overwrite $PROJECT\n```\n\n----------------------------------------\n\nTITLE: Open Xcode workspace from command line - macOS\nDESCRIPTION: This command opens the Xcode workspace for a Flutter macOS app from the command line. This allows you to launch Xcode directly from your terminal.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/deployment/macos.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nopen macos/Runner.xcworkspace\n```\n\n----------------------------------------\n\nTITLE: Replacing Robolectric Test API (Before Migration) - Java\nDESCRIPTION: This code snippet shows the old way of setting up Robolectric tests in Flutter, using the deprecated `FlutterMain.setIsRunningInRobolectricTest()` API. This API is being removed.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/android-setIsRunningInRobolectricTest-removed.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nFlutterMain.setIsRunningInRobolectricTest(true);\n```\n\n----------------------------------------\n\nTITLE: Verify Flutter version\nDESCRIPTION: Checks the installed Flutter version to ensure it is 3.7 or newer. This is a prerequisite for the migration.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/windows-dark-mode.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nflutter --version\n```\n\n----------------------------------------\n\nTITLE: Conditional Value Assignment with Jekyll\nDESCRIPTION: This snippet uses Jekyll templating to conditionally assign values based on the 'include.target' variable. It checks for 'desktop', 'mobile', and 'web' targets, and provides default values if none of these match.  The code assumes that `include.target` is a variable available within the Jekyll context.\nSOURCE: https://github.com/flutter/website/blob/main/src/_includes/docs/install/reqs/windows/storage.md#_snippet_0\n\nLANGUAGE: Jekyll\nCODE:\n```\n{% if include.target == 'desktop' -%}\n4.0 | 52.0 |\n{% elsif include.target == 'mobile' -%}\n10.0 | 10.0 |\n{% elsif include.target == 'web' -%}\n2.5 | 2.5 |\n{% else -%}\n11.0 | 60.0 |\n{% endif -%}\n```\n\n----------------------------------------\n\nTITLE: XML Configuration for Android Games Services IDs\nDESCRIPTION: This XML snippet shows the format required for the `games-ids.xml` file, which stores the application ID, package name, and IDs for achievements and leaderboards used by Google Play Games Services. It's crucial for linking the game to the services correctly.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/games/achievements-leaderboard.md#_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<!-- THIS IS JUST AN EXAMPLE -->\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<resources>\n    <!--app_id-->\n    <string name=\"app_id\" translatable=\"false\">424242424242</string>\n    <!--package_name-->\n    <string name=\"package_name\" translatable=\"false\">dev.flutter.tictactoe</string>\n    <!--achievement First win-->\n    <string name=\"achievement_first_win\" translatable=\"false\">sOmEiDsTrInG</string>\n    <!--leaderboard Highest Score-->\n    <string name=\"leaderboard_highest_score\" translatable=\"false\">sOmEiDsTrInG</string>\n</resources>\n```\n\n----------------------------------------\n\nTITLE: Navigate to Example App Directory - Shell\nDESCRIPTION: This command navigates the terminal to the example app directory of the Flutter plugin. This is necessary to build and run the example app and test the plugin's functionality.\nSOURCE: https://github.com/flutter/website/blob/main/src/_includes/docs/swift-package-manager/migrate-swift-plugin.md#_snippet_16\n\nLANGUAGE: sh\nCODE:\n```\ncd path/to/plugin/example/\n```\n\n----------------------------------------\n\nTITLE: Styling the Subscribe Button in Flutter\nDESCRIPTION: This code defines the `SubscribeButtonStyle` class with static `unsubscribed` and `subscribed` styles. The styles are `ButtonStyle` objects that set the background color of the button to red when unsubscribed and green when subscribed using `WidgetStatePropertyAll`.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/app-architecture/design-patterns/optimistic-state.md#_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nclass SubscribeButtonStyle {\n  static const unsubscribed = ButtonStyle(\n    backgroundColor: WidgetStatePropertyAll(Colors.red),\n  );\n\n  static const subscribed = ButtonStyle(\n    backgroundColor: WidgetStatePropertyAll(Colors.green),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Dart Class Definition Snippet\nDESCRIPTION: Inserts a class definition. No dependencies are required. Input: None. Output: A basic class definition structure.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/tools/vs-code.md#_snippet_11\n\nLANGUAGE: Dart\nCODE:\n```\nclass MyClass {  }\n```\n\n----------------------------------------\n\nTITLE: Running Flutter Tests\nDESCRIPTION: This command executes the Flutter tests defined in the project's test suite, ensuring that the application's functionality is working as expected.\nSOURCE: https://github.com/flutter/website/blob/main/examples/layout/card_and_stack/README.md#_snippet_3\n\nLANGUAGE: Dart\nCODE:\n```\nflutter test\n```\n\n----------------------------------------\n\nTITLE: Run Flutter App (CLI)\nDESCRIPTION: This command runs the Flutter application on a connected device or emulator. It compiles the Dart code and deploys the application to the target platform, allowing users to interact with the app and verify its functionality.\nSOURCE: https://github.com/flutter/website/blob/main/examples/layout/sizing/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nflutter run\n```\n\n----------------------------------------\n\nTITLE: Flutter Semantics Test (Before Migration)\nDESCRIPTION: This test demonstrates how to access and verify semantics nodes before the change to the modal route overlay entry order. It retrieves the root semantics node and checks the properties of its children to ensure the structure matches the expected arrangement before the update.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/modal-router-semantics-order.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'dart:ui';\n\nimport 'package:flutter_test/flutter_test.dart';\nimport 'package:flutter/rendering.dart';\nimport 'package:flutter/material.dart';\n\nvoid main() {\n  testWidgets('example test', (WidgetTester tester) async {\n    final SemanticsHandle handle =\n        tester.binding.pipelineOwner.ensureSemantics();\n\n    // Build our app and trigger a frame.\n    await tester.pumpWidget(MaterialApp(home: Scaffold(body: Text('test'))));\n\n    final SemanticsNode root =\n        tester.binding.pipelineOwner.semanticsOwner.rootSemanticsNode;\n\n    final SemanticsNode firstNode = getChild(root);\n    expect(firstNode.rect, Rect.fromLTRB(0.0, 0.0, 800.0, 600.0));\n\n    // Fixes the test by expecting an additional node above the scope route.\n    final SemanticsNode secondNode = getChild(firstNode);\n    expect(secondNode.rect, Rect.fromLTRB(0.0, 0.0, 800.0, 600.0));\n\n    final SemanticsNode thirdNode = getChild(secondNode);\n    expect(thirdNode.rect, Rect.fromLTRB(0.0, 0.0, 800.0, 600.0));\n    expect(thirdNode.hasFlag(SemanticsFlag.scopesRoute), true);\n\n    final SemanticsNode forthNode = getChild(thirdNode);\n    expect(forthNode.rect, Rect.fromLTRB(0.0, 0.0, 56.0, 14.0));\n    expect(forthNode.label, 'test');\n    handle.dispose();\n  });\n}\n\nSemanticsNode getChild(SemanticsNode node) {\n  SemanticsNode child;\n  bool visiter(SemanticsNode target) {\n    child = target;\n    return false;\n  }\n\n  node.visitChildren(visiter);\n  return child;\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating from CupertinoDialog to CupertinoPopupSurface - Dart\nDESCRIPTION: Illustrates how to migrate from `CupertinoDialog` to `CupertinoPopupSurface`. The `CupertinoDialog` is replaced with `CupertinoPopupSurface`, and the child widget is passed as the child of the new widget.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/1-22-deprecations.md#_snippet_1\n\nLANGUAGE: Dart\nCODE:\n```\nCupertinoDialog(child: myWidget);\n```\n\nLANGUAGE: Dart\nCODE:\n```\nCupertinoPopupSurface(child: myWidget);\n```\n\n----------------------------------------\n\nTITLE: Displaying Licenses using showAboutDialog or showLicensePage - Flutter\nDESCRIPTION: This section describes how to display licenses in Flutter applications without a `Drawer` by calling `showAboutDialog` or `showLicensePage` when using the Material Components library.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/resources/faq.md#_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: Migrating Pointer Events fromHoverEvent to fromMouseEvent - Dart\nDESCRIPTION: Shows how to migrate from the deprecated `fromHoverEvent` constructors for `PointerEnterEvent` and `PointerExitEvent` to the `fromMouseEvent` constructor. This involves replacing `fromHoverEvent` with `fromMouseEvent`.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/1-22-deprecations.md#_snippet_4\n\nLANGUAGE: Dart\nCODE:\n```\nfinal PointerEnterEvent enterEvent = PointerEnterEvent.fromHoverEvent(PointerHoverEvent());\nfinal PointerExitEvent exitEvent = PointerExitEvent.fromHoverEvent(PointerHoverEvent());\n```\n\nLANGUAGE: Dart\nCODE:\n```\nfinal PointerEnterEvent enterEvent = PointerEnterEvent.fromMouseEvent(PointerHoverEvent());\nfinal PointerExitEvent exitEvent = PointerExitEvent.fromMouseEvent(PointerHoverEvent());\n```\n\n----------------------------------------\n\nTITLE: AndroidManifest.xml Metadata (Flutter Deep Linking Opt-In)\nDESCRIPTION: This XML snippet is used to manually opt-in to deep linking if using Flutter version earlier than 3.27. It adds a metadata tag to the `AndroidManifest.xml` file, setting the `flutter_deeplinking_enabled` property to `true`, which enables Flutter's default deep link handler.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/navigation/set-up-app-links.md#_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<meta-data android:name=\"flutter_deeplinking_enabled\" android:value=\"true\" />\n```\n\n----------------------------------------\n\nTITLE: Accessing page property after controller nullability\nDESCRIPTION: Illustrates how to safely access the `page` property of `PageView.controller` after the nullability update using the null-assertion operator (`!`).  This asserts that the controller is not null when accessing the `page` property.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/pageview-controller.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\npageView.controller!.page\n```\n\n----------------------------------------\n\nTITLE: Semantics Tree Before Tooltip Change\nDESCRIPTION: This code represents the semantics tree structure corresponding to the widget tree *before* the tooltip accessibility change.  It shows that the tooltip message is a separate node at the root level (SemanticsNode#0), not a child of the \"child\" node (SemanticsNode#3).\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/tooltip-semantics-order.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nSemanticsNode#0\n |\n ├─SemanticsNode#1\n │ │\n │ └─SemanticsNode#5\n │   │ flags: hasImplicitScrolling\n │   │ scrollChildren: 3\n │   │\n │   ├─SemanticsNode#2\n │   │   tags: RenderViewport.twoPane\n │   │   label: \"before\"\n │   │   textDirection: ltr\n │   │\n │   ├─SemanticsNode#3\n │   │   tags: RenderViewport.twoPane\n │   │   label: \"child\"\n │   │   tooltip: \"message\"\n │   │   textDirection: ltr\n │   │\n │   └─SemanticsNode#4\n │       tags: RenderViewport.twoPane\n │       label: \"after\"\n │       textDirection: ltr\n │\n └─SemanticsNode#6\n     label: \"message\"\n     textDirection: ltr\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Font in SwiftUI\nDESCRIPTION: This snippet demonstrates how to apply a custom font in SwiftUI by using the `.font()` modifier with the `Font.custom()` constructor. It requires the custom font file to be added to the project and its name to be referenced in the `Font.custom()` call.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/swiftui-devs.md#_snippet_31\n\nLANGUAGE: Swift\nCODE:\n```\nText(\"Hello\")\n  .font(\n    Font.custom(\n      \"BungeeSpice-Regular\",\n      size: 40\n    )\n  )\n```\n\n----------------------------------------\n\nTITLE: Rendering a Simple List with FlatList in React Native\nDESCRIPTION: Demonstrates how to create a dynamic list of widgets in React Native using `FlatList`.  The `renderItem` function is called for each item in the data array, allowing for efficient rendering of large lists.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/react-native-devs.md#_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\n<FlatList\n  data={[ ... ]}\n  renderItem={({ item }) => <Text>{item.key}</Text>}\n/>\n```\n\n----------------------------------------\n\nTITLE: Liquid Category Assignment\nDESCRIPTION: This Liquid code snippet assigns a category based on a `categoryName` variable by searching within `catalog.index`.  It utilizes the `find` filter to locate the category with a matching name. The found category object is then assigned to the `category` variable for further processing.\nSOURCE: https://github.com/flutter/website/blob/main/src/_includes/docs/catalog-page-material.md#_snippet_0\n\nLANGUAGE: Liquid\nCODE:\n```\n{% assign category = catalog.index | find: \"name\", categoryName %}\n```\n\n----------------------------------------\n\nTITLE: Setting FLUTTER_STORAGE_BASE_URL Environment Variable\nDESCRIPTION: Sets the FLUTTER_STORAGE_BASE_URL environment variable to the specified mirror site.  This directs the Flutter toolchain to download the Flutter SDK and related assets from the mirror site rather than the default Google storage.\nSOURCE: https://github.com/flutter/website/blob/main/src/_includes/docs/community/china/os-settings.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n{{envvarset}}FLUTTER_STORAGE_BASE_URL=\"https://storage.flutter-io.cn\"\n```\n\n----------------------------------------\n\nTITLE: Controlling Focus Traversal Order with FocusTraversalGroup\nDESCRIPTION: This snippet demonstrates how to use `FocusTraversalGroup` to control the order in which widgets receive focus when the user tabs through the application. It groups a form with multiple columns and rows, ensuring that all fields within the form are focused before moving to the submit button.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/adaptive-responsive/input.md#_snippet_2\n\nLANGUAGE: Dart\nCODE:\n```\nreturn Column(\n  children: [\n    FocusTraversalGroup(child: MyFormWithMultipleColumnsAndRows()),\n    SubmitButton(),\n  ],\n);\n```\n\n----------------------------------------\n\nTITLE: Remove Flutter Configuration Files (Console Command)\nDESCRIPTION: This command removes the Flutter configuration directories from the user's home directory.  It is an optional step if the user does not wish to preserve their Flutter configuration.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/uninstall/index.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n{{rm-flutter-files | strip}}\n```\n\n----------------------------------------\n\nTITLE: Configuring Pigeon Header Include Path Dart\nDESCRIPTION: This snippet demonstrates how to configure the `headerIncludePath` in Pigeon's `ObjcOptions` when the `objcHeaderOut` file is in a different directory than the `objcSourceOut` file. It's used to correctly generate the Objective-C header file for a Flutter plugin.\nSOURCE: https://github.com/flutter/website/blob/main/src/_includes/docs/swift-package-manager/migrate-objective-c-plugin.md#_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\njavaOptions: JavaOptions(),\n- objcHeaderOut: 'ios/Classes/messages.g.h',\n- objcSourceOut: 'ios/Classes/messages.g.m',\n+ objcHeaderOut: 'ios/plugin_name/Sources/plugin_name/include/plugin_name/messages.g.h',\n+ objcSourceOut: 'ios/plugin_name/Sources/plugin_name/messages.g.m',\n+ objcOptions: ObjcOptions(\n+   headerIncludePath: './include/plugin_name/messages.g.h',\n+ ),\n  copyrightHeader: 'pigeons/copyright.txt',\n```\n\n----------------------------------------\n\nTITLE: Enable and Install pnpm with Corepack - Console\nDESCRIPTION: Enables corepack and installs the correct version of pnpm, an alternative package manager for npm packages.  This is performed from the root directory of the repository to ensure the correct pnpm version is used.\nSOURCE: https://github.com/flutter/website/blob/main/README.md#_snippet_8\n\nLANGUAGE: console\nCODE:\n```\ncorepack enable;\ncorepack install\n```\n\n----------------------------------------\n\nTITLE: Animate opacity with AnimatedOpacity - Initialize opacity\nDESCRIPTION: This snippet initializes a state variable 'opacity' to 0.0 within the _FadeInDemoState class. This ensures the content is initially hidden, ready to be faded in using the AnimatedOpacity widget.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/codelabs/implicit-animations.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\n  class _FadeInDemoState extends State<FadeInDemo> {\n+   double opacity = 0;\n+ \n    @override\n    Widget build(BuildContext context) {\n      return ListView(children: <Widget>[\n        // ...\n        AnimatedOpacity(\n+         opacity: opacity,\n          child: const Column(\n```\n\n----------------------------------------\n\nTITLE: Enable Semantic Debugging on Flutter Web\nDESCRIPTION: This command-line snippet shows how to run a Flutter web application with semantic debugging enabled. This allows developers to visualize the semantic nodes on top of the widgets, aiding in verifying the placement and correctness of semantic elements. It requires Flutter to be run in profile mode.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/accessibility-and-internationalization/accessibility.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nflutter run -d chrome --profile --dart-define=FLUTTER_WEB_DEBUG_SHOW_SEMANTICS=true\n```\n\n----------------------------------------\n\nTITLE: Specific Shaders Declaration - YAML\nDESCRIPTION: This snippet showcases how to declare specific shader files within the `pubspec.yaml` file.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/tools/pubspec.md#_snippet_21\n\nLANGUAGE: YAML\nCODE:\n```\nflutter:\n  shaders:\n    - assets/shaders/shader_a.frag\n    - assets/shaders/shader_b.frag\n```\n\n----------------------------------------\n\nTITLE: Stateful Widget State implementation in Flutter\nDESCRIPTION: This Flutter code snippet demonstrates the implementation of the `State` object for a `StatefulWidget`.  It manages a boolean state (`showText`) and updates it using `setState()`. Also includes a Timer that updates state.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/react-native-devs.md#_snippet_37\n\nLANGUAGE: dart\nCODE:\n```\nclass _MyStatefulWidgetState extends State<MyStatefulWidget> {\n  bool showText = true;\n  bool toggleState = true;\n  Timer? t2;\n\n  void toggleBlinkState() {\n    setState(() {\n      toggleState = !toggleState;\n    });\n    if (!toggleState) {\n      t2 = Timer.periodic(const Duration(milliseconds: 1000), (t) {\n        toggleShowText();\n      });\n    } else {\n      t2?.cancel();\n    }\n  }\n\n  void toggleShowText() {\n    setState(() {\n      showText = !showText;\n    });\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: Center(\n        child: Column(\n          children: <Widget>[\n            if (showText)\n              const Text('This execution will be done before you can blink.'),\n            Padding(\n              padding: const EdgeInsets.only(top: 70),\n              child: ElevatedButton(\n                onPressed: toggleBlinkState,\n                child:\n                    toggleState\n                        ? const Text('Blink')\n                        : const Text('Stop Blinking'),\n              ),\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Update App-Wide Slider Design - Dart\nDESCRIPTION: This code snippet shows how to update the entire application to use the updated Material 3 Slider design by setting the `SliderThemeData.year2023` property to `false` within the `MaterialApp`'s `theme`.  This affects all sliders in the app.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/updated-material-3-slider.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nreturn MaterialApp(\n  theme: ThemeData(sliderTheme: const SliderThemeData(year2023: false)),\n        // ...\n        Slider(\n          value: _value,\n          onChanged: (value) {\n            setState(() {\n              _value = value;\n            });\n          },\n        ),\n        // ...\n```\n\n----------------------------------------\n\nTITLE: Running the Flutter App\nDESCRIPTION: Starts the Flutter application on a connected device or emulator. This command compiles and deploys the app, allowing users to interact with it.\nSOURCE: https://github.com/flutter/website/blob/main/examples/animation/animate5/README.md#_snippet_4\n\nLANGUAGE: Dart\nCODE:\n```\nflutter run\n```\n\n----------------------------------------\n\nTITLE: Disable SPM in pubspec.yaml (YAML)\nDESCRIPTION: This snippet demonstrates how to disable Swift Package Manager for a specific Flutter project by adding a flag to the `pubspec.yaml` file. This setting overrides the global SPM configuration.\nSOURCE: https://github.com/flutter/website/blob/main/src/_includes/docs/swift-package-manager/how-to-enable-disable.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# The following section is specific to Flutter packages.\nflutter:\n  disable-swift-package-manager: true\n```\n\n----------------------------------------\n\nTITLE: Navigating to Project Directory\nDESCRIPTION: This command changes the current directory to the specified Flutter project directory. The $PROJECT variable represents the path to the specific app project.\nSOURCE: https://github.com/flutter/website/blob/main/examples/cookbook/persistence/reading_writing_files/README.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ncd $PROJECT\n```\n\n----------------------------------------\n\nTITLE: Invoking FlutterEngine::ProcessExternalWindowMessage in WndProc (C++)\nDESCRIPTION: This code snippet demonstrates how to invoke `FlutterEngine::ProcessExternalWindowMessage` within a window procedure (`WndProc`) to handle external window messages. It checks the returned `std::optional<LRESULT>` to determine if the message was consumed by the Flutter engine. If the message is consumed, further processing within the `WndProc` should cease. Requires Flutter 3.13 or newer.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/win-lifecycle-process-function.md#_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nLRESULT Window::Messagehandler(HWND hwnd, UINT msg, WPARAM wparam, LPARAM lparam) {\n    std::optional<LRESULT> result = flutter_controller_->engine()->ProcessExternalWindowMessage(hwnd, msg, wparam, lparam);\n    if (result.has_value()) {\n        return *result;\n    }\n    // Original contents of WndProc...\n}\n```\n\n----------------------------------------\n\nTITLE: Starting an App - Xamarin.Forms\nDESCRIPTION: In Xamarin.Forms, the app starts by calling the `LoadApplication` method, which creates a new application instance and initializes the app.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/xamarin-forms-devs.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nLoadApplication(new App());\n```\n\n----------------------------------------\n\nTITLE: Check Flutter Version - Console\nDESCRIPTION: This command verifies that Flutter is installed correctly and displays the installed version. It's a prerequisite for building and developing the site, ensuring the necessary Flutter and Dart tools are available.\nSOURCE: https://github.com/flutter/website/blob/main/README.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nflutter --version\n```\n\n----------------------------------------\n\nTITLE: Creating a scroll view using ScrollView - SwiftUI\nDESCRIPTION: This snippet demonstrates how to create a scroll view using `ScrollView` in SwiftUI.  It embeds a VStack to create a vertically scrolling list of `PersonView` instances.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/swiftui-devs.md#_snippet_15\n\nLANGUAGE: Swift\nCODE:\n```\nScrollView {\n  VStack(alignment: .leading) {\n    ForEach(persons) { person in\n      PersonView(person: person)\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Custom ScrollBehavior (App-Wide)\nDESCRIPTION: This code shows how to create a custom ScrollBehavior and apply it to the entire application using MaterialApp.scrollBehavior. The custom ScrollBehavior extends MaterialScrollBehavior and can override methods like buildOverscrollIndicator and buildScrollbar.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/default-desktop-scrollbars.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\n// MaterialApps previously had a private ScrollBehavior.\n// This is available to extend now.\nclass MyCustomScrollBehavior extends MaterialScrollBehavior {\n  // Override behavior methods like buildOverscrollIndicator and buildScrollbar\n}\n\n// ScrollBehavior can now be configured for an entire application.\nMaterialApp(\n  scrollBehavior: MyCustomScrollBehavior(),\n  // ...\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Card Grid with Resource Data (Liquid)\nDESCRIPTION: This snippet iterates through a 'resources' array and generates HTML for each resource, displaying it as a card within a grid.  It utilizes Liquid templating to dynamically populate the card's content, including its ID, type, tags, description, link URL, and image URL. The loop creates an anchor tag that links to the resource.\nSOURCE: https://github.com/flutter/website/blob/main/src/_includes/docs/learning-resources-index/grid.md#_snippet_0\n\nLANGUAGE: Liquid\nCODE:\n```\n{%- for item in resources -%}\n    <a id=\"{{ item.name }}\"\n       data-type=\"{{ item.type }}\"\n       data-tags='{{ item.tags | join: \", \" }}'\n       data-description=\"{{ item.description }}\"\n       class=\"card outlined-card\"\n       href=\"{{ item.link.url }}\"\n       target=\"_blank\"\n    >\n        {%- if item.imageUrl -%}\n            <div class=\"card-image-holder-material-3\">\n                <img src='{{ item.imageUrl }}'>\n            </div>\n        {%- endif -%}\n        <div class=\"card-leading\">\n            {%- liquid\n                case item.type\n                    when 'codelab'\n                        assign pill-color = 'flutter-blue'\n                    when 'workshop'\n                        assign pill-color = 'flutter-blue'\n                    when 'quickstart'\n                        assign pill-color = 'purple'\n                    when 'demo'\n                        assign pill-color = 'purple'\n                    else\n                        assign pill-color = 'teal'\n                endcase -%}\n            <span class=\"pill-sm {{ pill-color }}\">{{ item.type | capitalize }}</span>\n            {%- if item.link.label == \"Flutter Github\" -%}\n                <svg style=\"color:black\" width=\"24px\" height=\"24px\">\n                    <use href=\"/assets/images/social/github.svg#github\"></use>\n                </svg>\n            {%- elsif item.link.label == 'Dart Github' -%}\n                <img src=\"/assets/images/branding/dart/logo.svg\" width=\"24px\" alt=\"Dart logo\" />\n            {%- elsif item.link.label == 'Flutter docs' -%}\n                <img src='/assets/images/branding/flutter/icon/1080.png' alt=\"Flutter logo\" width=\"24px\"/>\n            {%- elsif item.link.label == 'Dart docs' -%}\n                <img src='/assets/images/branding/dart/logo.svg' alt=\"Dart icon\" width=\"24px\"/>\n            {%- elsif item.link.label == \"Google Codelab\" -%}\n                <svg width=\"24px\" height=\"24px\">\n                    <use href=\"/assets/images/social/google-developers.svg#google-developers\"></use>\n                </svg>\n            {%- elsif item.link.label == \"YouTube\" -%}\n                <svg style=\"color:red\" width=\"24px\" height=\"24px\">\n                    <use href=\"/assets/images/social/youtube.svg#youtube\"></use>\n                </svg>\n            {%- elsif item.link.label == \"Medium\" -%}\n                <svg style=\"color:black\" width=\"24px\" height=\"24px\">\n                    <use href=\"/assets/images/social/medium.svg#medium\"></use>\n                </svg>\n            {%- endif -%}\n        </div>\n        <div class=\"card-header\">\n            <span class=\"card-title\">{{ item.name }}</span>\n        </div>\n        <div class=\"card-content\">\n\n            {{ item.description }}\n\n        </div>\n    </a>\n{%- endfor -%}\n```\n\n----------------------------------------\n\nTITLE: Navigating to the project directory\nDESCRIPTION: This command changes the current directory to the newly created Flutter project directory. This allows subsequent commands to be executed within the project's context.\nSOURCE: https://github.com/flutter/website/blob/main/examples/layout/pavlova/README.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ncd $PROJECT\n```\n\n----------------------------------------\n\nTITLE: Increment Counter in Dart\nDESCRIPTION: This is a line of Dart code where the `_counter` variable is incremented. It's used to set a breakpoint for debugging purposes in the VS Code debugger.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/testing/native-debugging.md#_snippet_3\n\nLANGUAGE: Dart\nCODE:\n```\n_counter++;\n```\n\n----------------------------------------\n\nTITLE: Add flutter_test Dependency YAML\nDESCRIPTION: Adds the `flutter_test` dependency to the `dev_dependencies` section of the `pubspec.yaml` file. This is a necessary step before writing any widget tests in Flutter.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/testing/widget/introduction.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\ndev_dependencies:\n  flutter_test:\n    sdk: flutter\n```\n\n----------------------------------------\n\nTITLE: Analyzing Dart Code\nDESCRIPTION: This command analyzes the Dart code within the Flutter project to identify potential issues, errors, or warnings. It helps ensure code quality and adherence to best practices.\nSOURCE: https://github.com/flutter/website/blob/main/examples/layout/lakes/step6/README.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndart analyze\n```\n\n----------------------------------------\n\nTITLE: ExclusiveAppComponent detachFromFlutterEngine Java\nDESCRIPTION: This code snippet represents the `detachFromFlutterEngine` method, which you need to implement when wrapping your activity with an `ExclusiveAppComponent<Activity>`.  This method is called when your activity is being replaced by another activity attaching itself to the FlutterEngine.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/android-activity-control-surface-attach.md#_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nvoid detachFromFlutterEngine();\n```\n\n----------------------------------------\n\nTITLE: Command to open pubspec.yaml\nDESCRIPTION: A console command to open the pubspec.yaml file.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/design/fonts.md#_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n$ vi pubspec.yaml\n```\n\n----------------------------------------\n\nTITLE: Displaying Text with Padding - Kotlin (Jetpack Compose)\nDESCRIPTION: Demonstrates how to display text with padding in Jetpack Compose using the `Text` composable and the `Modifier.padding` modifier. The `Modifier` object is used to alter or decorate the composable. The example showcases two different ways to specify the modifier.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/compose-devs.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nText(\"Hello, World!\", \n   modifier: Modifier.padding(10.dp)\n)\nText(\"Hello, World!\",\n    modifier = Modifier.padding(10.dp))\n```\n\n----------------------------------------\n\nTITLE: Setting mock initial values for testing - Dart\nDESCRIPTION: This code snippet shows how to set mock initial values for `SharedPreferences` in a testing environment. It uses the `setMockInitialValues` static method to populate the preference store with a predefined map of key-value pairs. This allows for predictable and isolated testing of code that relies on `SharedPreferences`.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/persistence/key-value.md#_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nSharedPreferences.setMockInitialValues(<String, Object>{'counter': 2});\n```\n\n----------------------------------------\n\nTITLE: Analyzing Dart Code\nDESCRIPTION: This command analyzes the Dart code within the Flutter project for potential issues and errors. It leverages the Dart analyzer tool.\nSOURCE: https://github.com/flutter/website/blob/main/examples/cookbook/persistence/reading_writing_files/README.md#_snippet_2\n\nLANGUAGE: Dart\nCODE:\n```\ndart analyze\n```\n\n----------------------------------------\n\nTITLE: Jekyll Path Iteration and Topic Filtering\nDESCRIPTION: This snippet iterates through the URL path components and filters the `topics` array based on the current path segment.  It constructs the path iteratively and uses it to filter the `sidenav` data. It skips the first element and the '/ui' path.\nSOURCE: https://github.com/flutter/website/blob/main/src/_layouts/toc.md#_snippet_1\n\nLANGUAGE: Jekyll\nCODE:\n```\n{% for path_part in path_parts -%}\n  {% if forloop.first == true -%}\n    {% assign path = '' -%}\n  {% else -%}\n    {% assign path = path | append: '/' | append: path_part -%}\n  {% endif -%}\n  {% if forloop.index0 > 0 and path != '/ui' -%}\n    {% assign topics = topics | where: \"permalink\", path -%}\n    {% assign topics = topics[0].children | where: \"title\" -%}\n  {% endif -%}\n{% endfor -%}\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables (Windows)\nDESCRIPTION: This snippet shows how to set environment variables for `PUB_HOSTED_URL` and `FLUTTER_STORAGE_BASE_URL` on Windows using PowerShell to configure Flutter to use a specified mirror.  These variables are used by Flutter to download dependencies and SDK components from the specified mirror.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/community/china/index.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n$env:PUB_HOSTED_URL=\"{{mirror.urls.pubhosted}}\";\n$env:FLUTTER_STORAGE_BASE_URL=\"{{mirror.urls.flutterstorage}}\"\n```\n\n----------------------------------------\n\nTITLE: Flutter config command for explicit package dependencies\nDESCRIPTION: This console command sets the `explicit-package-dependencies` feature flag. This flag can be used to test whether a build relies on the deprecated `.flutter-plugins` file.  Any build tools or scripts that rely on the `.flutter-plugins` file will fail with this flag set.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/flutter-plugins-configuration.md#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ flutter config explicit-package-dependencies\n```\n\n----------------------------------------\n\nTITLE: Displaying Achievements UI using GamesServices.showAchievements() in Dart\nDESCRIPTION: This Dart code snippet displays the platform's native achievements UI as an overlay on the game using the `GamesServices.showAchievements()` method. No specific parameters are needed, as it automatically presents the achievements interface provided by Game Center or Google Play Games Services.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/games/achievements-leaderboard.md#_snippet_4\n\nLANGUAGE: Dart\nCODE:\n```\nawait GamesServices.showAchievements();\n```\n\n----------------------------------------\n\nTITLE: Navigating to Project Directory\nDESCRIPTION: This command changes the current directory to the Flutter project's directory, represented by $PROJECT.\nSOURCE: https://github.com/flutter/website/blob/main/examples/layout/lakes/step2/README.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ncd $PROJECT\n```\n\n----------------------------------------\n\nTITLE: Displaying a list view with identifiable items - SwiftUI\nDESCRIPTION: This snippet demonstrates how to display a list view using `List` and `ForEach` in SwiftUI, with data conforming to the `Identifiable` protocol.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/swiftui-devs.md#_snippet_11\n\nLANGUAGE: Swift\nCODE:\n```\nstruct Person: Identifiable {\n  var name: String\n}\n\nvar persons = [\n  Person(name: \"Person 1\"),\n  Person(name: \"Person 2\"),\n  Person(name: \"Person 3\"),\n]\n\nstruct ListWithPersons: View {\n  let persons: [Person]\n  var body: some View {\n    List {\n      ForEach(persons) { person in\n        Text(person.name)\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Navigating to Project Directory\nDESCRIPTION: This command changes the current directory to the newly created Flutter project directory. It is a prerequisite for subsequent commands.\nSOURCE: https://github.com/flutter/website/blob/main/examples/layout/lakes/step6/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncd $PROJECT\n```\n\n----------------------------------------\n\nTITLE: Running CocoaPods Validation Lint Shell\nDESCRIPTION: This snippet demonstrates how to run CocoaPods validation lint on a podspec file using modular headers. This is used to verify the podspec file's correctness.\nSOURCE: https://github.com/flutter/website/blob/main/src/_includes/docs/swift-package-manager/migrate-objective-c-plugin.md#_snippet_18\n\nLANGUAGE: sh\nCODE:\n```\npod lib lint ios/plugin_name.podspec  --configuration=Debug --skip-tests --use-modular-headers\n```\n\n----------------------------------------\n\nTITLE: RawGestureDetector Pan Gesture Before Migration (Trackpad)\nDESCRIPTION: This snippet shows the usage of RawGestureDetector before trackpad support was explicitly handled. It creates a PanGestureRecognizer without specifying supported devices, potentially leading to unwanted trackpad gesture recognition.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/trackpad-gestures.md#_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() => runApp(Foo());\n\nclass Foo extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return RawGestureDetector(\n      gestures: {\n        PanGestureRecognizer:\n            GestureRecognizerFactoryWithHandlers<PanGestureRecognizer>(\n          () => PanGestureRecognizer(),\n          (recognizer) {\n            recognizer\n              ..onStart = (details) {\n                debugPrint('onStart');\n              }\n              ..onUpdate = (details) {\n                debugPrint('onUpdate');\n              }\n              ..onEnd = (details) {\n                debugPrint('onEnd');\n              };\n          },\n        ),\n      },\n      child: Container()\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Liquid Template for HTML Figure Generation\nDESCRIPTION: This Liquid template generates the HTML structure for displaying code and an image within a figure element. It handles optional classes for styling and includes a caption if provided.\nSOURCE: https://github.com/flutter/website/blob/main/src/_includes/docs/code-and-image.md#_snippet_1\n\nLANGUAGE: Liquid\nCODE:\n```\n<figure class=\"code-and-image {{class}}\">\n  <div class=\"{{code-class}}\">\n    {{code}}\n  </div>\n  <div>\n    <img src=\"/assets/images/docs/{{image}}\" class=\"{{img-class}}\" alt=\"{{alt | escape}}\" style=\"{{img-style}} {{width}} {{height}}\">\n     {% if caption and caption != '' -%}\n     <figcaption class=\"figure-caption {{figcaption-class}}\">\n       {{caption}}\n     </figcaption>\n    {% endif -%}\n  </div>\n</figure>\n```\n\n----------------------------------------\n\nTITLE: Running Flutter App\nDESCRIPTION: This command runs the Flutter application on a connected device or emulator. It starts the app and allows users to interact with it.\nSOURCE: https://github.com/flutter/website/blob/main/examples/animation/animate1/README.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nflutter run\n```\n\n----------------------------------------\n\nTITLE: Shader Directory Declaration - YAML\nDESCRIPTION: This snippet demonstrates how to add a directory containing shaders to the `shaders` field in the `pubspec.yaml` file.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/tools/pubspec.md#_snippet_22\n\nLANGUAGE: YAML\nCODE:\n```\nflutter:\n  shaders:\n    - assets/shaders/\n```\n\n----------------------------------------\n\nTITLE: Add go_router Dependency\nDESCRIPTION: This command adds the `go_router` package as a dependency to the Flutter project. The `go_router` package is used for handling routing in the Flutter application, and this command ensures it's included in the project's dependencies.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/navigation/set-up-app-links.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ flutter pub add go_router\n```\n\n----------------------------------------\n\nTITLE: Attaching Flutter Debugger via Terminal\nDESCRIPTION: This snippet shows how to attach the Flutter debugger from the terminal. Adding the `-d <deviceId>` flag allows you to select a specific target device. This command allows you to use hot reload, hot restart, and access the Observatory debugger.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/add-to-app/debugging.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ flutter attach\n```\n\n----------------------------------------\n\nTITLE: Navigating to the Project Directory\nDESCRIPTION: This command changes the current directory to the newly created Flutter project directory, which is necessary for subsequent commands.\nSOURCE: https://github.com/flutter/website/blob/main/examples/layout/card_and_stack/README.md#_snippet_1\n\nLANGUAGE: Dart\nCODE:\n```\ncd $PROJECT\n```\n\n----------------------------------------\n\nTITLE: Verifying Connected Android Device - Windows\nDESCRIPTION: This command verifies if Flutter recognizes the connected Android device on a Windows machine. It requires Flutter to be installed and configured in the system's PATH environment variable. The command is executed in PowerShell.\nSOURCE: https://github.com/flutter/website/blob/main/src/_includes/docs/install/devices/android-physical.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nc:\\> flutter devices\n```\n\n----------------------------------------\n\nTITLE: Jekyll: Include Testing Table of Contents\nDESCRIPTION: This include tag generates a list of testing recipes for the specified type.  The `type` parameter corresponds to the name of the directory under `cookbook/testing/*`. It's used to dynamically create a table of contents for the testing section.\nSOURCE: https://github.com/flutter/website/blob/main/src/_includes/docs/testing-toc.md#_snippet_0\n\nLANGUAGE: Jekyll\nCODE:\n```\n{% include docs/testing_toc.md type='unit' %}\n```\n\n----------------------------------------\n\nTITLE: Handling Configuration Changes in Android Manifest\nDESCRIPTION: This snippet shows how to handle configuration changes like orientation and screen size changes in the AndroidManifest.xml file for a Flutter application.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/android-devs.md#_snippet_36\n\nLANGUAGE: yaml\nCODE:\n```\nandroid:configChanges=\"orientation|screenSize\"\n```\n\n----------------------------------------\n\nTITLE: Setting Surface Size for AnimationSheetBuilder in Dart\nDESCRIPTION: This code snippet demonstrates how to set the surface size for testing using the sheetSize method. The surface size determines the overall dimensions of the testing surface where the animation frames are rendered.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/animation-sheet-builder-display.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\ntester.binding.setSurfaceSize(animationSheet.sheetSize(600));\n```\n\n----------------------------------------\n\nTITLE: JSON Select Statement Definition\nDESCRIPTION: This JSON code demonstrates a select statement within an `.arb` file.  It chooses a pronoun based on the value of the `gender` placeholder. The `select` keyword allows for multiple cases (male, female, other), each mapping to a different message.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/accessibility-and-internationalization/internationalization.md#_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n\"pronoun\": \"{gender, select, male{he} female{she} other{they}}\",\n\"@pronoun\": {\n  \"description\": \"A gendered message\",\n  \"placeholders\": {\n    \"gender\": {\n      \"type\": \"String\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Resetting All Properties Before Migration (TestWindow)\nDESCRIPTION: This snippet demonstrates resetting all test values at once using `tester.binding.window.clearAllTestValues` before the migration to `TestPlatformDispatcher`.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/window-singleton.md#_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\ntestWidgets('test name', (WidgetTester tester) async {\n  addTeardown(tester.binding.window.clearAllTestValues);\n});\n```\n\n----------------------------------------\n\nTITLE: Flutter Windows Show Bug: Code Before Migration (C++)\nDESCRIPTION: This code snippet represents the original code in `windows/runner/flutter_window.cpp` before the migration. It sets the next frame callback to show the window. No dependencies required, it is part of the Flutter Windows application setup.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/windows-show-window-migration.md#_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nflutter_controller_->engine()->SetNextFrameCallback([&]() {\n  this->Show();\n});\n```\n\n----------------------------------------\n\nTITLE: Navigate to Project Directory (CLI)\nDESCRIPTION: This command navigates the terminal to the directory of the newly created Flutter project.  It is necessary to run further Flutter commands within the project's root directory. `$PROJECT` refers to the path of the Flutter project.\nSOURCE: https://github.com/flutter/website/blob/main/examples/layout/sizing/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd $PROJECT\n```\n\n----------------------------------------\n\nTITLE: Command to open main.dart\nDESCRIPTION: A console command to open the main.dart file.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/design/fonts.md#_snippet_10\n\nLANGUAGE: console\nCODE:\n```\n$ vi lib/main.dart\n```\n\n----------------------------------------\n\nTITLE: Navigating to the Project Directory\nDESCRIPTION: This command navigates the terminal to the newly created Flutter project directory. Subsequent commands will be executed from within this directory.  $PROJECT represents the relative path to the example application's directory.\nSOURCE: https://github.com/flutter/website/blob/main/examples/layout/lakes/step3/README.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ncd $PROJECT\n```\n\n----------------------------------------\n\nTITLE: Generate CSR with OpenSSL\nDESCRIPTION: Generates a Certificate Signing Request (CSR) file. This file contains information about the certificate and is signed with the private key.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/platform-integration/windows/building.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nopenssl req -new -key mykeyname.key -out mycsrname.csr\n```\n\n----------------------------------------\n\nTITLE: ImageCache New Logic Pseudocode (Dart)\nDESCRIPTION: This pseudocode represents the new logic of the ImageCache.  Now, images are only added to the cache if their byte size is less than the current maxByteSize.  This prevents the cache from automatically growing and potentially consuming excessive memory. The onLoadImage function conditionally adds the image and discards oldest images to maintain size limits.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/imagecache-large-images.md#_snippet_1\n\nLANGUAGE: Dart\nCODE:\n```\n// New logic pseudocode\nvoid onLoadImage(Image image) {\n  if (image.byteSize < _cache.maxByteSize) {\n    _cache.add(image);\n    while (_cache.count > _cache.maxCount\n        || _cache.byteSize > cache.maxByteSize) {\n      cache.discardOldestImage();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Project\nDESCRIPTION: This command creates a new Flutter project without overwriting existing files. $PROJECT represents the path to the app project.\nSOURCE: https://github.com/flutter/website/blob/main/examples/layout/lakes/step2/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nflutter create --no-overwrite $PROJECT\n```\n\n----------------------------------------\n\nTITLE: Removing GMS and Crashlytics dependencies from build.gradle (Groovy)\nDESCRIPTION: This code shows how to remove Google Mobile Services and Crashlytics dependencies from the buildscript block of android/build.gradle.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/flutter-gradle-plugin-apply.md#_snippet_7\n\nLANGUAGE: Groovy\nCODE:\n```\nbuildscript {\n      // ...\n\n      dependencies {\n          // ...\n-         classpath \"com.google.gms:google-services:4.4.0\"\n-         classpath \"com.google.firebase:firebase-crashlytics-gradle:2.9.9\"\n      }\n  }\n```\n\n----------------------------------------\n\nTITLE: Custom IgnorePointer with Semantics Dart\nDESCRIPTION: This code defines a custom `_IgnorePointerWithSemantics` widget that ignores pointer events without modifying the semantics tree. This is useful for preserving the original behavior when `ignoringSemantics` was set to `false`.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/ignoringsemantics-migration.md#_snippet_2\n\nLANGUAGE: Dart\nCODE:\n```\n/// A widget ignores pointer events without modifying the semantics tree.\nclass _IgnorePointerWithSemantics extends SingleChildRenderObjectWidget {\n  const _IgnorePointerWithSemantics({\n    super.child,\n  });\n\n  @override\n  _RenderIgnorePointerWithSemantics createRenderObject(BuildContext context) {\n    return _RenderIgnorePointerWithSemantics();\n  }\n}\n\nclass _RenderIgnorePointerWithSemantics extends RenderProxyBox {\n  _RenderIgnorePointerWithSemantics();\n\n  @override\n  bool hitTest(BoxHitTestResult result, { required Offset position }) => false;\n}\n```\n\n----------------------------------------\n\nTITLE: Generate File Path with Liquid\nDESCRIPTION: This Liquid code snippet dynamically generates the file path for the Flutter SDK download based on the operating system (specified by `include.ref-os`) and a base file path (`include.filepath`). It determines the file format (zip or tar.xz) based on the OS and replaces a placeholder in the base path with the OS name.\nSOURCE: https://github.com/flutter/website/blob/main/src/_includes/docs/community/china/download-urls.md#_snippet_0\n\nLANGUAGE: Liquid\nCODE:\n```\n{% assign id = include.ref-os | downcase -%}\n{% assign mainpath = include.filepath -%}\n{%- case id %}\n{% when 'windows','macos' %}\n{%- assign file-format = 'zip' %}\n{% else %}\n{%- assign file-format = 'tar.xz' %}\n{% endcase %}\n{%- if id == 'chromeos' %}\n{% assign plat = 'linux' %}\n{%- else %}\n{% assign plat = id %}\n{% endif %}\n{% capture filepath -%}{{mainpath | replace: \"opsys\", plat}}{{file-format}} {% endcapture -%}\n```\n\n----------------------------------------\n\nTITLE: Dart For-In Loop Snippet\nDESCRIPTION: Inserts a for-in loop for iterating over a collection. No dependencies are required. Input: None. Output: A basic for-in loop structure.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/tools/vs-code.md#_snippet_7\n\nLANGUAGE: Dart\nCODE:\n```\nfor (var item in list) {  }\n```\n\n----------------------------------------\n\nTITLE: Create a package:quiver Clock from package:clock Clock\nDESCRIPTION: This code snippet shows how to create a `package:quiver` Clock from a `package:clock` Clock by passing the `.now` function tearoff to the `Clock` constructor. This is a simple migration strategy to maintain compatibility with existing APIs that expect a `package:quiver` Clock.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/test-widgets-flutter-binding-clock.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\ntestWidgets('some test', (WidgetTester tester) {\n  someApiThatWantsAQuiverClock(Clock(tester.binding.clock.now));\n});\n```\n\n----------------------------------------\n\nTITLE: Overriding locale using Localizations.override (Dart)\nDESCRIPTION: This snippet shows how to override the default locale using `Localizations.override`. It localizes a `CalendarDatePicker` widget to Spanish ('es') within a specific part of the application. A `Builder` is used to get the correct `BuildContext`.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/accessibility-and-internationalization/internationalization.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nWidget build(BuildContext context) {\n  return Scaffold(\n    appBar: AppBar(title: Text(widget.title)),\n    body: Center(\n      child: Column(\n        mainAxisAlignment: MainAxisAlignment.center,\n        children: <Widget>[\n          // Add the following code\n          Localizations.override(\n            context: context,\n            locale: const Locale('es'),\n            // Using a Builder to get the correct BuildContext.\n            // Alternatively, you can create a new widget and Localizations.override\n            // will pass the updated BuildContext to the new widget.\n            child: Builder(\n              builder: (context) {\n                // A toy example for an internationalized Material widget.\n                return CalendarDatePicker(\n                  initialDate: DateTime.now(),\n                  firstDate: DateTime(1900),\n                  lastDate: DateTime(2100),\n                  onDateChanged: (value) {},\n                );\n              },\n            ),\n          ),\n        ],\n      ),\n    ),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Building FittedBox with Unbounded Container in Flutter\nDESCRIPTION: This snippet demonstrates that FittedBox can only scale a widget that is bounded (has non-infinite width and height). When FittedBox has an unbounded container, it will render nothing, and you will get an error in the console.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/layout/constraints.md#_snippet_22\n\nLANGUAGE: dart\nCODE:\n```\n'FittedBox(\\n'   'child: Container(\\n'   '      height: 20, width: double.infinity));'\n```\n\n----------------------------------------\n\nTITLE: Check All Examples - Console\nDESCRIPTION: Validates that example code is up-to-date and matches the site's standards using the `dash_site check-all` command. This command should be executed after committing any changes made to the `/examples` or `/tool` directories.\nSOURCE: https://github.com/flutter/website/blob/main/README.md#_snippet_12\n\nLANGUAGE: console\nCODE:\n```\n./dash_site check-all\n```\n\n----------------------------------------\n\nTITLE: Conditional Image Liquid\nDESCRIPTION: This snippet conditionally displays an image for a component if it exists, or a placeholder if not. It checks for `comp.image` first and displays that. If no `comp.image` exists it displays the placeholder.\nSOURCE: https://github.com/flutter/website/blob/main/src/_includes/docs/catalog-page.md#_snippet_4\n\nLANGUAGE: Liquid\nCODE:\n```\n{% if comp.image -%}\n  <img alt=\"Image/visualization of the {{comp.name}} widget.\" src=\"{{comp.image.src}}\">\n{% else -%}\n  <img alt=\"Flutter logo for widget missing visualization image.\" src=\"/assets/images/docs/catalog-widget-placeholder.png\" aria-hidden=\"true\">\n{% endif -%}\n```\n\n----------------------------------------\n\nTITLE: Enable Baselines in Code - Flutter\nDESCRIPTION: This Dart code snippet shows how to enable baseline visualization in Flutter using the `debugPaintBaselinesEnabled` flag. When enabled, Flutter draws horizontal lines to indicate the baselines of text elements, helping in the alignment of text within the UI.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/tools/devtools/legacy-inspector.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/rendering.dart';\n\nvoid showBaselines() {\n  debugPaintBaselinesEnabled = true;\n}\n```\n\n----------------------------------------\n\nTITLE: Dump Widget Tree with debugDumpApp() in Dart\nDESCRIPTION: This snippet shows how to use `debugDumpApp()` to print the current state of the Widgets library to the console by dumping the widget tree. This example creates a simple Flutter app with a button that triggers the `debugDumpApp()` function when pressed.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/testing/code-debugging.md#_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\n\nvoid main() {\n  runApp(const MaterialApp(home: AppHome()));\n}\n\nclass AppHome extends StatelessWidget {\n  const AppHome({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return Material(\n      child: Center(\n        child: TextButton(\n          onPressed: () {\n            debugDumpApp();\n          },\n          child: const Text('Dump Widget Tree'),\n        ),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Replace RenderView.scheduleInitialFrame\nDESCRIPTION: This code snippet illustrates the migration from the deprecated `RenderView.scheduleInitialFrame` method to the recommended `RenderView.prepareInitialFrame` followed by `RenderView.owner.requestVisualUpdate`. This change prevents issues with splash screens being dismissed too early.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/1-22-deprecations.md#_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nscheduleInitialFrame();\n```\n\nLANGUAGE: dart\nCODE:\n```\nprepareInitialFrame();\nowner.requestVisualUpdate();\n```\n\n----------------------------------------\n\nTITLE: HTML Table Generation with Dynamic ID\nDESCRIPTION: This HTML snippet defines a table with a dynamically generated ID based on the `os` and `channel` variables from the Liquid template. The table includes a header row defining the columns and a loading message that's displayed while data is being fetched. The `scrollable-table` class ensures that the table is scrollable if it exceeds its container's width.\nSOURCE: https://github.com/flutter/website/blob/main/src/_includes/docs/release/archive-release.md#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"scrollable-table\">\n  <table id=\"downloads-{{os}}-{{channel}}\" class=\"table table-striped\">\n  <thead><tr><th>Flutter version</th><th>Architecture</th><th>Ref</th><th class=\"date\">Release Date</th><th>Dart version</th><th>Provenance</th></tr></thead>\n  <tbody><tr class=\"loading\"><td colspan=\"6\">Loading...</td></tr></tbody>\n  </table>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Jekyll: Recipe List Generation\nDESCRIPTION: This snippet iterates through a collection of recipes and generates a markdown list of links. It excludes the index page for the specified type. It takes the `recipes` collection, filters by the `dir`, sorts by title, and iterates through to output the list.\nSOURCE: https://github.com/flutter/website/blob/main/src/_includes/docs/testing-toc.md#_snippet_1\n\nLANGUAGE: Jekyll\nCODE:\n```\n{% assign dir = 'cookbook/testing/' | append: include.type -%}\n{% assign recipes = collections.all | children_pages: dir | sort: 'title' %}\n\n{% for recipe in recipes -%}\n{% comment -%}\n  Omit the index page for the given type\n{% endcomment -%}\n{% assign frag = recipe.url | split: '/' | last %}\n{% if frag != include.type -%}\n- [{{ recipe.data.title }}]({{ recipe.url }})\n{% endif -%}\n{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Echo PUB_HOSTED_URL on Windows (PowerShell)\nDESCRIPTION: This command echoes the value of the PUB_HOSTED_URL environment variable on Windows using PowerShell. It helps determine if the variable is set and its current value.\nSOURCE: https://github.com/flutter/website/blob/main/src/_includes/docs/community/china/pub-settings.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n{{prompt}} echo $env:PUB_HOSTED_URL\n```\n\n----------------------------------------\n\nTITLE: Building a Minimal Flutter App (APK) for size measurement\nDESCRIPTION: This command builds a minimal Flutter app as an APK, splitting it per ABI, to measure its size. The `--split-per-abi` flag creates separate APKs for different processor architectures (ARM32 and ARM64), allowing for a more granular size analysis.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/resources/faq.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nflutter build apk --split-per-abi\n```\n\n----------------------------------------\n\nTITLE: Running CocoaPods Validation Lint with Libraries Shell\nDESCRIPTION: This snippet demonstrates how to run CocoaPods validation lint on a podspec file using modular headers and libraries. This is used to verify the podspec file's correctness.\nSOURCE: https://github.com/flutter/website/blob/main/src/_includes/docs/swift-package-manager/migrate-objective-c-plugin.md#_snippet_17\n\nLANGUAGE: sh\nCODE:\n```\npod lib lint ios/plugin_name.podspec  --configuration=Debug --skip-tests --use-modular-headers --use-libraries\n```\n\n----------------------------------------\n\nTITLE: Remove Pub Package Files (Console Command)\nDESCRIPTION: This command removes the pub package cache directory from the user's home directory. It is an optional step and should only be performed if the user wants to completely remove Dart-related data.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/uninstall/index.md#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n{{rm-pub-dir | strip}}\n```\n\n----------------------------------------\n\nTITLE: Navigating to the Flutter Project Directory\nDESCRIPTION: This command changes the current directory to the newly created Flutter project directory. This allows subsequent commands to be executed within the context of the project.\nSOURCE: https://github.com/flutter/website/blob/main/examples/layout/base/README.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ncd $PROJECT\n```\n\n----------------------------------------\n\nTITLE: Sizing Widgets with Expanded in a Row - Dart\nDESCRIPTION: This code snippet demonstrates how to use the `Expanded` widget to ensure that child widgets within a `Row` take up available space, preventing overflow issues. Each `BorderedImage` is wrapped in an `Expanded` widget, causing them to evenly distribute space within the row.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/fundamentals/layout.md#_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nWidget build(BuildContext context) {\n  return const Row(\n    children: [\n      Expanded(\n        child: BorderedImage(width: 150, height: 150),\n      ),\n      Expanded(\n        child: BorderedImage(width: 150, height: 150),\n      ),\n      Expanded(\n        child: BorderedImage(width: 150, height: 150),\n      ),\n    ],\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Flutter SDK Download Notification\nDESCRIPTION: This snippet shows the notification displayed in VS Code while downloading the Flutter SDK. It indicates that the download is in progress and may take a few minutes.\nSOURCE: https://github.com/flutter/website/blob/main/src/_includes/docs/install/flutter/vscode.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nDownloading the Flutter SDK. This may take a few minutes.\n```\n\n----------------------------------------\n\nTITLE: Extracting the Flutter SDK\nDESCRIPTION: Extracts the Flutter SDK from the downloaded archive file.  The specific command used depends on the operating system and archive format (zip for Windows and macOS, tar.xz for Linux).\nSOURCE: https://github.com/flutter/website/blob/main/src/_includes/docs/community/china/os-settings.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n{{unzip}}{{sdk | replace: \"opsys\", download-os}}{{file-format}}\n```\n\n----------------------------------------\n\nTITLE: Styling text using TextStyle in Flutter\nDESCRIPTION: This Flutter code snippet demonstrates how to style a `Text` widget using the `TextStyle` class.  It defines a `TextStyle` object with specific color, fontSize, and fontWeight, and then applies it to a `Text` widget. Also uses Icon Widget.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/react-native-devs.md#_snippet_28\n\nLANGUAGE: dart\nCODE:\n```\nconst TextStyle textStyle = TextStyle(\n  color: Colors.cyan,\n  fontSize: 32,\n  fontWeight: FontWeight.w600,\n);\n\nreturn const Center(\n  child: Column(\n    children: <Widget>[\n      Text('Sample text', style: textStyle),\n      Padding(\n        padding: EdgeInsets.all(20),\n        child: Icon(\n          Icons.lightbulb_outline,\n          size: 48,\n          color: Colors.redAccent,\n        ),\n      ),\n    ],\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Applying Horizontal Linear Gradient - CSS\nDESCRIPTION: This CSS snippet applies a horizontal linear gradient to a div element (`.red-box`). The gradient transitions from `#ef5350` (red) to transparent, covering 80% of the element's width.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/web-devs.md#_snippet_17\n\nLANGUAGE: css\nCODE:\n```\n<div class=\"grey-box\">\n  <div class=\"red-box\">\n    Lorem ipsum\n  </div>\n</div>\n\n.grey-box {\n    background-color: #e0e0e0; /* grey 300 */\n    width: 320px;\n    height: 240px;\n    font: 900 24px Roboto;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n}\n.red-box {\n    padding: 16px;\n    color: #ffffff;\n    background: linear-gradient(90deg, #ef5350, rgba(0, 0, 0, 0) 80%);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring l10n.yaml file - YAML\nDESCRIPTION: This YAML file configures the localization tool. It specifies the directory for the App Resource Bundle (`.arb`) input files, the English template file, and the output file for the generated localizations.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/accessibility-and-internationalization/internationalization.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\narb-dir: lib/l10n\ntemplate-arb-file: app_en.arb\noutput-localization-file: app_localizations.dart\n```\n\n----------------------------------------\n\nTITLE: Simple Font Asset Declaration - YAML\nDESCRIPTION: This snippet shows how to declare a font asset without specifying a font family, weight, or style. This is a simpler approach when these attributes are not required.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/tools/pubspec.md#_snippet_15\n\nLANGUAGE: YAML\nCODE:\n```\nflutter:\n  assets:\n    - fonts/Roboto-Regular.ttf\n```\n\n----------------------------------------\n\nTITLE: Update package:platform dependency YAML\nDESCRIPTION: This snippet demonstrates how to update the `package:platform` dependency in your `pubspec.yaml` file to version `3.1.0` or later.  This is necessary to avoid errors related to the removed `packageRoot` API when using Dart 2.16 or later.  The caret (`^`) allows for minor version updates while maintaining compatibility.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/2-5-deprecations.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  platform: ^3.1.0\n```\n\n----------------------------------------\n\nTITLE: ButtonSection Widget Dart\nDESCRIPTION: This code starts the definition of the ButtonSection widget, which is intended to contain the row of buttons. It retrieves the primary color from the Theme for consistent styling.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/layout/tutorial.md#_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nclass ButtonSection extends StatelessWidget {\n  const ButtonSection({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    final Color color = Theme.of(context).primaryColor;\n    // ···\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Process JSON Data with Isolate.run (Dart)\nDESCRIPTION: Uses `Isolate.run` to decode JSON data in a separate isolate, avoiding blocking the main thread.  This is suitable for computationally intensive tasks.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/dart-swift-concurrency.md#_snippet_9\n\nLANGUAGE: Dart\nCODE:\n```\nvoid main() async {\n  // Read some data.\n  final jsonData = await Isolate.run(() => jsonDecode(jsonString) as Map<String, dynamic>);`\n\n  // Use that data.\n  print('Number of JSON keys: ${jsonData.length}');\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Localized Messages from flutter_gen (Dart)\nDESCRIPTION: This Dart code demonstrates how localized messages are typically imported from the synthetic `package:flutter_gen` package. This is the import statement that needs to be replaced during migration.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/flutter-generate-i10n-source.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter_gen/gen_l10n/app_localizations.dart';\n// ...\nconst MaterialApp(\n  title: 'Localizations Sample App',\n  localizationsDelegates: AppLocalizations.localizationsDelegates,\n  supportedLocales: AppLocalizations.supportedLocales,\n);\n```\n\n----------------------------------------\n\nTITLE: showDialog Builder Update - Dart\nDESCRIPTION: This snippet demonstrates the change in how the `showDialog` function is used.  The `child` parameter was deprecated and replaced with a `builder` parameter that takes a `BuildContext` and returns the dialog widget.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/release-notes/release-notes-0.0.21-1.0.0.md#_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\n// Before\nshowDialog(context: context, child: new Text('hello'))\n\n// After\nshowDialog(context: context, builder: (BuildContext context) => new Text('hello'))\n```\n\n----------------------------------------\n\nTITLE: Retrieving shader persistent cache on Android\nDESCRIPTION: This set of commands retrieves the shader persistent cache from an Android device for a specific Flutter application. It requires adb and the package name of the app.  The cache is copied to a public folder on the device and then pulled to the host machine.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/perf/faq.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nadb shell\nrun-as <com.your_app_package_name>\ncp <your_folder> <some_public_folder, e.g., /sdcard> -r\nadb pull <some_public_folder/your_folder>\n```\n\n----------------------------------------\n\nTITLE: Updating settings.gradle with Plugin DSL (Groovy)\nDESCRIPTION: This snippet demonstrates replacing the content of android/settings.gradle with the new Plugin DSL configuration. It includes the pluginManagement block to manage Flutter's Gradle plugins and the plugins block to declare the required plugins with their versions. The {agpVersion} and {kotlinVersion} placeholders need to be replaced with the actual versions found in the previous step.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/flutter-gradle-plugin-apply.md#_snippet_1\n\nLANGUAGE: Groovy\nCODE:\n```\npluginManagement {\n    def flutterSdkPath = {\n        def properties = new Properties()\n        file(\"local.properties\").withInputStream { properties.load(it) }\n        def flutterSdkPath = properties.getProperty(\"flutter.sdk\")\n        assert flutterSdkPath != null, \"flutter.sdk not set in local.properties\"\n        return flutterSdkPath\n    }()\n\n    includeBuild(\"$flutterSdkPath/packages/flutter_tools/gradle\")\n\n    repositories {\n        google()\n        mavenCentral()\n        gradlePluginPortal()\n    }\n}\n\nplugins {\n    id \"dev.flutter.flutter-plugin-loader\" version \"1.0.0\"\n    id \"com.android.application\" version \"{agpVersion}\" apply false\n    id \"org.jetbrains.kotlin.android\" version \"{kotlinVersion}\" apply false\n}\n\ninclude \":app\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Directory for Flutter Installation\nDESCRIPTION: Creates a new directory for installing the Flutter SDK.  The example uses `~/dev` (or `%USERPROFILE%\\dev` on Windows) as the installation directory, then changes the current directory to the newly created directory.\nSOURCE: https://github.com/flutter/website/blob/main/src/_includes/docs/community/china/os-settings.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n{{newdir}}; cd {{installdirsuggestion}}\n```\n\n----------------------------------------\n\nTITLE: Flutter SDK PATH Added Notification (Windows)\nDESCRIPTION: This snippet shows the notification displayed in VS Code (specifically on Windows) when the Flutter SDK has been successfully added to the system PATH.\nSOURCE: https://github.com/flutter/website/blob/main/src/_includes/docs/install/flutter/vscode.md#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\nThe Flutter SDK was added to your PATH\n```\n\n----------------------------------------\n\nTITLE: Check Node.js Version - Console\nDESCRIPTION: This command verifies that Node.js is installed and displays the installed version. The site requires a specific Node.js version.  If your version is too old, you'll need to update it based on your original installation method.\nSOURCE: https://github.com/flutter/website/blob/main/README.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nnode --version\n```\n\n----------------------------------------\n\nTITLE: CupertinoTabBar After Migration (Using Localizations Widget)\nDESCRIPTION: This code snippet illustrates how to explicitly provide localization information to the CupertinoTabBar using the Localizations widget. By specifying the locale and delegates (including DefaultWidgetsLocalizations and DefaultCupertinoLocalizations), the CupertinoTabBar receives the necessary localization data. The MediaQuery widget is still needed for media query data.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/cupertino-tab-bar-localizations.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/cupertino.dart';\n\nvoid main() => runApp(Foo());\n\nclass Foo extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return Localizations(\n      locale: const Locale('en', 'US'),\n      delegates: <LocalizationsDelegate<dynamic>>[\n        DefaultWidgetsLocalizations.delegate,\n        DefaultCupertinoLocalizations.delegate,\n      ],\n      child: MediaQuery(\n        data: const MediaQueryData(),\n        child: CupertinoTabBar(\n          items: const <BottomNavigationBarItem>[\n            BottomNavigationBarItem(\n              icon: Icon(CupertinoIcons.add_circled),\n              label: 'Tab 1',\n            ),\n            BottomNavigationBarItem(\n              icon: Icon(CupertinoIcons.add_circled_solid),\n              label: 'Tab 2',\n            ),\n          ],\n          currentIndex: 1,\n        ),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example of brittle test case due to obfuscation\nDESCRIPTION: This Dart code snippet demonstrates a common issue when obfuscating code: tests that rely on specific class or function names will fail after obfuscation. The `expect` function checks if the runtime type of `foo` is 'Foo', but after obfuscation, the class name 'Foo' will be replaced, causing the test to fail. Code that depends on reflection of exact class names is generally not compatible with obfuscation.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/deployment/obfuscate.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nexpect(foo.runtimeType.toString(), equals('Foo'));\n```\n\n----------------------------------------\n\nTITLE: Popping the Navigator Stack with Results in Flutter\nDESCRIPTION: This snippet shows how to pop the current route from the `Navigator` stack and return a result to the previous route. The `Navigator.of(context).pop()` method is used to remove the current route and pass data back to the calling route.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/xamarin-forms-devs.md#_snippet_20\n\nLANGUAGE: dart\nCODE:\n```\nNavigator.of(context).pop({'lat': 43.821757, 'long': -79.226392});\n```\n\n----------------------------------------\n\nTITLE: Widget Golden Image Testing - Dart\nDESCRIPTION: This snippet demonstrates how to perform golden image testing in widget tests using the `matchesGoldenFile` matcher. It allows developers to verify that a widget's rendered image matches a pre-defined golden image file.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/release-notes/release-notes-0.0.21-1.0.0.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nawait expectLater(find.byType(MyWidget), matchesGoldenFile('foo.png'));\n```\n\n----------------------------------------\n\nTITLE: Import YouTube API\nDESCRIPTION: Imports the YouTube API library from the googleapis package, providing access to the YouTubeApi class and its related functionalities. This is the first step in interacting with the YouTube API in a Dart project.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/data-and-backend/google-apis.md#_snippet_0\n\nLANGUAGE: Dart\nCODE:\n```\n/// Provides the `YouTubeApi` class.\nimport 'package:googleapis/youtube/v3.dart';\n```\n\n----------------------------------------\n\nTITLE: Creating a Flutter Plugin Package (Objective-C)\nDESCRIPTION: This command creates a Flutter plugin project named 'hello' configured for Android, iOS (Objective-C), Linux, macOS, and Windows platforms. It uses the specified organization 'com.example'.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/packages-and-plugins/developing-packages.md#_snippet_10\n\nLANGUAGE: console\nCODE:\n```\n$ flutter create --org com.example --template=plugin --platforms=android,ios,linux,macos,windows -i objc hello\n```\n\n----------------------------------------\n\nTITLE: IgnorePointer, AbsorbPointer, SliverIgnorePointer before migration Dart\nDESCRIPTION: This code shows the usage of `IgnorePointer`, `AbsorbPointer`, and `SliverIgnorePointer` with the `ignoringSemantics` parameter set to `true`. This is the code pattern that needs to be updated during the migration.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/ignoringsemantics-migration.md#_snippet_0\n\nLANGUAGE: Dart\nCODE:\n```\nIgnorePointer(\n  ignoringSemantics: true,\n  child: const PlaceHolder(),\n);\n\nAbsorbPointer(\n  ignoringSemantics: true,\n  child: const PlaceHolder(),\n);\n\nSliverIgnorePointer(\n  ignoringSemantics: true,\n  child: const PlaceHolder(),\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring App Assets in pubspec.yaml\nDESCRIPTION: Illustrates how to configure the Flutter app to use image assets by modifying the `pubspec.yaml` file. It involves adding an `assets` tag and specifying the path to the image file within the `images` directory.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/ui/layout/tutorial.md#_snippet_10\n\nLANGUAGE: YAML\nCODE:\n```\n flutter:\n    uses-material-design: true\n+   assets:\n+     - images/lake.jpg\n```\n\n----------------------------------------\n\nTITLE: Setting Absolute Position Flutter/Dart\nDESCRIPTION: Sets the absolute position of a Container widget using the Positioned and Stack widgets in Flutter/Dart. Relies on the Flutter framework and the 'bold24Roboto' TextStyle. The Positioned widget sets the left and top coordinates.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/web-devs.md#_snippet_10\n\nLANGUAGE: Dart\nCODE:\n```\nfinal container = Container(\n  // grey box\n  width: 320,\n  height: 240,\n  color: Colors.grey[300],\n  child: Stack(\n    children: [\n      Positioned(\n        // red box\n        left: 24,\n        top: 24,\n        child: Container(\n          padding: const EdgeInsets.all(16),\n          decoration: BoxDecoration(\n            color: Colors.red[400],\n          ),\n          child: Text(\n            'Lorem ipsum',\n            style: bold24Roboto,\n          ),\n        ),\n      ),\n    ],\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Defining SpringDescription with Damping Ratio Before Migration in Dart\nDESCRIPTION: Demonstrates how to define a SpringDescription object using the `.withDampingRatio` constructor before the formula update.  It specifies mass, stiffness, and damping ratio. This requires the 'flutter' package.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/spring-description-underdamped.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nconst spring = SpringDescription.withDampingRatio(\n  mass: 5.0,\n  stiffness: 6.0,\n  damping: 0.03,\n);\n```\n\n----------------------------------------\n\nTITLE: Navigating to Project Directory\nDESCRIPTION: This command changes the current directory to the project directory specified by the `$PROJECT` variable. This is required to run subsequent commands within the project context.\nSOURCE: https://github.com/flutter/website/blob/main/examples/layout/non_material/README.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ncd $PROJECT\n```\n\n----------------------------------------\n\nTITLE: Executing Flutter Integration Tests\nDESCRIPTION: This command executes Flutter integration tests located in the `integration_test` directory. It handles dependency resolution, package downloads, and the selection of a target device to run the tests on. The output shows package version updates and connected devices.\nSOURCE: https://github.com/flutter/website/blob/main/src/_includes/docs/test/integration/macos-example.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ flutter test integration_test\nResolving dependencies... \nDownloading packages... \n  flutter_lints 3.0.2 (4.0.0 available)\n> leak_tracker 10.0.4 (was 10.0.0) (10.0.5 available)\n> leak_tracker_flutter_testing 3.0.3 (was 2.0.1) (3.0.5 available)\n> leak_tracker_testing 3.0.1 (was 2.0.1)\n  lints 3.0.0 (4.0.0 available)\n  material_color_utilities 0.8.0 (0.11.1 available)\n> meta 1.12.0 (was 1.11.0) (1.15.0 available)\n> test_api 0.7.0 (was 0.6.1) (0.7.1 available)\n> vm_service 14.2.1 (was 13.0.0) (14.2.2 available)\nChanged 6 dependencies!\n8 packages have newer versions incompatible with dependency constraints.\nTry `flutter pub outdated` for more information.\n\nConnected devices:\n\nmacOS (desktop)                 • macos                 • darwin-arm64   • macOS 14.4.1 23E224 darwin-arm64\nMac Designed for iPad (desktop) • mac-designed-for-ipad • darwin         • macOS 14.4.1 23E224 darwin-arm64\nChrome (web)                    • chrome                • web-javascript • Google Chrome 124.0.6367.208\n\nNo wireless devices were found.\n\n[1]: macOS (macos)\n[2]: Mac Designed for iPad (mac-designed-for-ipad)\n[3]: Chrome (chrome)\nPlease choose one (or \"q\" to quit\"): 1\n\n00:01 +0: loading /path/to/counter_app/integration_test/app_test.dart        R\n00:02 +0: loading /path/to/counter_app/integration_test/app_test.dart    846ms\n00:03 +0: loading /path/to/counter_app/integration_test/app_test.dart        B\n\nBuilding macOS application...\n✓ Built build/macos/Build/Products/Debug/counter_app.app\n00:32 +1: All tests passed!\n\n```\n\n----------------------------------------\n\nTITLE: Shader Directory Declaration - YAML\nDESCRIPTION: This snippet showcases declaring the path to the directory containing the shader file.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/tools/pubspec.md#_snippet_20\n\nLANGUAGE: YAML\nCODE:\n```\n# path_to_directory structure\n- assets/shaders/\n```\n\n----------------------------------------\n\nTITLE: Leak-Prone BuildContext Example\nDESCRIPTION: This Flutter code demonstrates a leak-prone usage of `BuildContext`.  The `handler` stores the `context` potentially in a long-living area, causing the associated widget tree to be retained in memory unnecessarily.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/tools/devtools/memory.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\n// BAD: DO NOT DO THIS\n// This code is leak prone:\n@override\nWidget build(BuildContext context) {\n  final handler = () => apply(Theme.of(context));\n  useHandler(handler);\n…\n```\n\n----------------------------------------\n\nTITLE: Building LayoutBuilder with SingleChildScrollView in Dart\nDESCRIPTION: This snippet shows how to create a LayoutBuilder that returns a SingleChildScrollView. The LayoutBuilder provides the context and constraints, while SingleChildScrollView enables scrolling when the content exceeds available space. A Placeholder is used as a temporary child.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/cookbook/lists/spaced-items.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nLayoutBuilder(\n  builder: (context, constraints) {\n    return SingleChildScrollView(child: Placeholder());\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Find recently modified files Linux/macOS\nDESCRIPTION: Finds recently modified files (within the last 120 minutes) in the current directory and its subdirectories.  This command is useful to check what files were changed after adding the `url_launcher` dependency.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/testing/native-debugging.md#_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ find ./ -mmin -120 \n```\n\n----------------------------------------\n\nTITLE: Running Flutter App Shell\nDESCRIPTION: This snippet demonstrates how to run a Flutter application from the command line. This is used to ensure the plugin's example app builds and runs correctly.\nSOURCE: https://github.com/flutter/website/blob/main/src/_includes/docs/swift-package-manager/migrate-objective-c-plugin.md#_snippet_15\n\nLANGUAGE: sh\nCODE:\n```\nflutter run\n```\n\n----------------------------------------\n\nTITLE: Enable Material Design - YAML\nDESCRIPTION: This snippet shows how to enable the use of Material Design components in a Flutter app by setting the `uses-material-design` field to `true` under the `flutter` section in the `pubspec.yaml` file.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/tools/pubspec.md#_snippet_24\n\nLANGUAGE: YAML\nCODE:\n```\nflutter:\n  uses-material-design: true\n```\n\n----------------------------------------\n\nTITLE: Gradle Task Execution Output\nDESCRIPTION: This output confirms the successful building of the Android App Bundle (AAB). It shows the time taken for the Gradle task and the location of the built AAB file.\nSOURCE: https://github.com/flutter/website/blob/main/src/_includes/docs/debug/debug-flow-android.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nRunning Gradle task 'bundleDebug'...                               27.1s\n✓ Built build/app/outputs/bundle/debug/app-debug.aab.\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Project\nDESCRIPTION: Creates a new Flutter project from the example application specified by `$PROJECT`. The `--no-overwrite` flag prevents overwriting existing files.\nSOURCE: https://github.com/flutter/website/blob/main/examples/layout/lakes/interactive/README.md#_snippet_0\n\nLANGUAGE: Dart\nCODE:\n```\nflutter create --no-overwrite $PROJECT\n```\n\n----------------------------------------\n\nTITLE: Accessing Color Components Using Extension\nDESCRIPTION: This code defines an extension on the `Color` class to provide integer accessors for the floating-point color components. It shows how to scale the floating-point values to the 0-255 integer range. This is useful for scenarios where integer-based color values are still required.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/wide-gamut-framework.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nextension IntColorComponents on Color {\n  int get intAlpha => _floatToInt8(this.a);\n  int get intRed => _floatToInt8(this.r);\n  int get intGreen => _floatToInt8(this.g);\n  int get intBlue => _floatToInt8(this.b);\n\n  int _floatToInt8(double x) {\n    return (x * 255.0).round() & 0xff;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting TestWindow property before migration Dart\nDESCRIPTION: This code snippet demonstrates how to set and clear a property (`textScaleFactorTestValue`) on the `TestWindow` object before migration. It uses `tester.binding.window` to access the `TestWindow` and `addTearDown` to clear the value after the test.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/3-13-deprecations.md#_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\ntestWidgets('My test', (WidgetTester tester) aysnc {\n  // For all instances, replace window with platformDispatcher\n  tester.binding.window.textScaleFactorTestValue = 42;\n  addTearDown(tester.binding.window.clearTextScaleFactorTestValue);\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Install npm Dependencies with pnpm - Console\nDESCRIPTION: Installs the npm dependencies using pnpm. This command should be run from the root directory of the repository. Using pnpm is highly recommended.\nSOURCE: https://github.com/flutter/website/blob/main/README.md#_snippet_9\n\nLANGUAGE: console\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Handling Platform Channel Calls in Kotlin (Android)\nDESCRIPTION: This Kotlin code snippet shows how to handle method calls received on a platform channel in an Android environment. It creates a `MethodChannel` associated with the flutter view, sets a handler to respond to method calls, and returns a greeting when the 'bar' method is called with an argument.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/resources/architectural-overview.md#_snippet_8\n\nLANGUAGE: Kotlin\nCODE:\n```\n// Android (Kotlin)\nval channel = MethodChannel(flutterView, \"foo\")\nchannel.setMethodCallHandler { call, result ->\n  when (call.method) {\n    \"bar\" -> result.success(\"Hello, ${call.arguments}\")\n    else -> result.notImplemented()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Extract Flutter SDK (macOS)\nDESCRIPTION: This shell command extracts the Flutter SDK zip file to a specified directory on macOS. It uses the 'unzip' command with the '-d' option to specify the destination directory. The variables {{dirdl}} and {{path}} define the source and destination paths, respectively. Make sure the unzip utility is installed.\nSOURCE: https://github.com/flutter/website/blob/main/src/_includes/docs/install/flutter/download.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n{{prompt}} {{unzip}} {{dirdl}}flutter_sdk_v1.0.0.zip \\\n          -d {{path}}\n```\n\n----------------------------------------\n\nTITLE: Adding Image Asset in Flutter (pubspec.yaml)\nDESCRIPTION: This snippet shows how to add an image asset to a Flutter project through the `pubspec.yaml` file.  It specifies the relative path to the image file within the project's `images` directory. After adding the asset, it can be used in Flutter's `Image` widget.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/get-started/flutter-for/swiftui-devs.md#_snippet_34\n\nLANGUAGE: YAML\nCODE:\n```\nflutter:\n  assets:\n    - images/Blueberries.jpg\n```\n\n----------------------------------------\n\nTITLE: Display Dash Site Help - Console\nDESCRIPTION: Runs the `dash_site` tool with the `--help` flag to display available commands and options. This is used to understand the different functionalities provided by the tool.\nSOURCE: https://github.com/flutter/website/blob/main/README.md#_snippet_10\n\nLANGUAGE: console\nCODE:\n```\n./dash_site --help\n```\n\n----------------------------------------\n\nTITLE: Install Chrome via Command Line (Linux)\nDESCRIPTION: This series of commands downloads and installs Google Chrome on a Linux system. It retrieves the signing key, adds the Google Chrome repository, updates the package lists, and then installs the stable version of Chrome. Requires wget, gpg, apt-get, and sudo.\nSOURCE: https://github.com/flutter/website/blob/main/src/_includes/docs/install/accordions/install-chrome-from-cli.md#_snippet_0\n\nLANGUAGE: Shell Script\nCODE:\n```\n$ wget https://dl-ssl.google.com/linux/linux_signing_key.pub -O /tmp/google.pub\n$ gpg --no-default-keyring \\\n        --keyring /etc/apt/keyrings/google-chrome.gpg \\\n        --import /tmp/google.pub\n$ echo 'deb [arch=amd64 signed-by=/etc/apt/keyrings/google-chrome.gpg] http://dl.google.com/linux/chrome/deb/ stable main' | sudo tee /etc/apt/sources.list.d/google-chrome.list\n$ sudo apt-get update -y; sudo apt-get install -y google-chrome-stable\n```\n\n----------------------------------------\n\nTITLE: Liquid Subcategory Loop\nDESCRIPTION: This Liquid code snippet iterates through the subcategories of a given category, if subcategories exist.  It checks if the `category.subcategories` exist and then iterates through them using a `for` loop, assigning each subcategory to the `sub` variable. This allows accessing the properties of each subcategory within the loop.\nSOURCE: https://github.com/flutter/website/blob/main/src/_includes/docs/catalog-page-material.md#_snippet_1\n\nLANGUAGE: Liquid\nCODE:\n```\n{% if category.subcategories -%}\n{% for sub in category.subcategories -%}\n{% assign components = catalog.widgets | widget_filter: \"subcategories\", sub.name %}\n{% if components.size != 0 -%}\n\n## {{sub.name}}\n\n<div class=\"card-grid material-cards\">\n  {% for comp in components -%}\n  <a class=\"card outlined-card\" href=\"{{comp.link}}\">\n    <div class=\"card-image-holder-material-3\" style=\"--bg-color: {{sub.color}}\">\n      <img alt=\"Rendered example of the {{comp.name}} Material widget.\" src=\"{{comp.image.src}}\">\n      <div class=\"card-image-material-3-hover\">\n        <img alt=\"Decorated background for material widget visualizations.\" src=\"{{comp.hoverBackground.src}}\" aria-hidden=\"true\">\n      </div>\n    </div>\n    <div class=\"card-header\">\n      <header class=\"card-title\">{{comp.name}}</header>\n    </div>\n    <div class=\"card-content\">\n      <p>{{ comp.description | truncatewords: 25 }}</p>\n    </div>\n  </a>\n  {% endfor -%}\n</div>\n\n{% endif -%}\n{% endfor -%}\n{% endif -%}\n```\n\n----------------------------------------\n\nTITLE: Analyzing Dart code\nDESCRIPTION: This command analyzes the Dart code in the project for potential errors, warnings, and style issues. It uses the Dart analyzer tool to identify code quality problems.\nSOURCE: https://github.com/flutter/website/blob/main/examples/layout/pavlova/README.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ndart analyze\n```\n\n----------------------------------------\n\nTITLE: Resetting Individual Properties Before Migration (TestWindow)\nDESCRIPTION: This snippet illustrates how to reset individual platform-specific properties using `tester.binding.window` before migration. It utilizes `addTeardown` with `clear` methods to reset each property after the test.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/window-singleton.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\ntestWidgets('test name', (WidgetTester tester) async {\n  addTeardown(tester.binding.window.clearAccessibilityFeaturesTestValue);\n  addTeardown(tester.binding.window.clearAlwaysUse24HourFormatTestValue);\n  addTeardown(tester.binding.window.clearBrieflyShowPasswordTestValue);\n  addTeardown(tester.binding.window.clearDefaultRouteNameTestValue);\n  addTeardown(tester.binding.window.clearInitialLifecycleStateTestValue);\n  addTeardown(tester.binding.window.clearLocalesTestValue);\n  addTeardown(tester.binding.window.clearLocaleTestValue);\n  addTeardown(tester.binding.window.clearNativeSpellCheckServiceDefinedTestValue);\n  addTeardown(tester.binding.window.clearPlatformBrightnessTestValue);\n  addTeardown(tester.binding.window.clearSemanticsEnabledTestValue);\n  addTeardown(tester.binding.window.clearTextScaleFactorTestValue);\n});\n```\n\n----------------------------------------\n\nTITLE: GestureDetector Pan Gesture Before Migration (Flutter < 3.4.0)\nDESCRIPTION: This snippet demonstrates how to use GestureDetector to detect pan gestures before Flutter 3.4.0. It sets up basic onPanStart, onPanUpdate, and onPanEnd callbacks. This code does not explicitly handle trackpad gestures.\nSOURCE: https://github.com/flutter/website/blob/main/src/content/release/breaking-changes/trackpad-gestures.md#_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() => runApp(Foo());\n\nclass Foo extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return GestureDetector(\n      onPanStart: (details) {\n        debugPrint('onStart');\n      },\n      onPanUpdate: (details) {\n        debugPrint('onUpdate');\n      },\n      onPanEnd: (details) {\n        debugPrint('onEnd');\n      }\n      child: Container()\n    );\n  }\n}\n```"
  }
]