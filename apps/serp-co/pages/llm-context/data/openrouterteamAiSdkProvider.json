[
  {
    "owner": "openrouterteam",
    "repo": "ai-sdk-provider",
    "content": "TITLE: Basic Text Generation Example\nDESCRIPTION: Example showing how to generate text using OpenRouter with GPT-4 model\nSOURCE: https://github.com/OpenRouterTeam/ai-sdk-provider/blob/main/README.md#2025-04-15_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { openrouter } from '@openrouter/ai-sdk-provider';\nimport { generateText } from 'ai';\n\nconst { text } = await generateText({\n  model: openrouter('openai/gpt-4o'),\n  prompt: 'Write a vegetarian lasagna recipe for 4 people.',\n});\n```\n\n----------------------------------------\n\nTITLE: Installing OpenRouter Provider Package\nDESCRIPTION: Package installation commands for different Node.js package managers including pnpm, npm, and yarn\nSOURCE: https://github.com/OpenRouterTeam/ai-sdk-provider/blob/main/README.md#2025-04-15_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# For pnpm\npnpm add @openrouter/ai-sdk-provider\n\n# For npm\nnpm install @openrouter/ai-sdk-provider\n\n# For yarn\nyarn add @openrouter/ai-sdk-provider\n```\n\n----------------------------------------\n\nTITLE: Configuring Provider Options\nDESCRIPTION: Example of passing extra configuration options via providerOptions property\nSOURCE: https://github.com/OpenRouterTeam/ai-sdk-provider/blob/main/README.md#2025-04-15_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createOpenRouter } from '@openrouter/ai-sdk-provider';\nimport { streamText } from 'ai';\n\nconst openrouter = createOpenRouter({ apiKey: 'your-api-key' });\nconst model = openrouter('anthropic/claude-3.7-sonnet:thinking');\nawait streamText({\n  model,\n  messages: [{ role: 'user', content: 'Hello' }],\n  providerOptions: {\n    openrouter: {\n      reasoning: {\n        max_tokens: 10,\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Importing OpenRouter Provider\nDESCRIPTION: Basic import statement for the default OpenRouter provider instance\nSOURCE: https://github.com/OpenRouterTeam/ai-sdk-provider/blob/main/README.md#2025-04-15_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { openrouter } from '@openrouter/ai-sdk-provider';\n```\n\n----------------------------------------\n\nTITLE: Model Settings Configuration\nDESCRIPTION: Example of configuring extra body parameters in model settings\nSOURCE: https://github.com/OpenRouterTeam/ai-sdk-provider/blob/main/README.md#2025-04-15_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createOpenRouter } from '@openrouter/ai-sdk-provider';\nimport { streamText } from 'ai';\n\nconst openrouter = createOpenRouter({ apiKey: 'your-api-key' });\nconst model = openrouter('anthropic/claude-3.7-sonnet:thinking', {\n  extraBody: {\n    reasoning: {\n      max_tokens: 10,\n    },\n  },\n});\nawait streamText({\n  model,\n  messages: [{ role: 'user', content: 'Hello' }],\n});\n```\n\n----------------------------------------\n\nTITLE: Factory Configuration\nDESCRIPTION: Example of configuring extra body parameters in the model factory\nSOURCE: https://github.com/OpenRouterTeam/ai-sdk-provider/blob/main/README.md#2025-04-15_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createOpenRouter } from '@openrouter/ai-sdk-provider';\nimport { streamText } from 'ai';\n\nconst openrouter = createOpenRouter({\n  apiKey: 'your-api-key',\n  extraBody: {\n    reasoning: {\n      max_tokens: 10,\n    },\n  },\n});\nconst model = openrouter('anthropic/claude-3.7-sonnet:thinking');\nawait streamText({\n  model,\n  messages: [{ role: 'user', content: 'Hello' }],\n});\n```\n\n----------------------------------------\n\nTITLE: Anthropic Prompt Caching Configuration\nDESCRIPTION: Example of using Anthropic-specific caching options in message configuration\nSOURCE: https://github.com/OpenRouterTeam/ai-sdk-provider/blob/main/README.md#2025-04-15_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createOpenRouter } from '@openrouter/ai-sdk-provider';\nimport { streamText } from 'ai';\n\nconst openrouter = createOpenRouter({ apiKey: 'your-api-key' });\nconst model = openrouter('anthropic/<supported-caching-model>');\n\nawait streamText({\n  model,\n  messages: [\n    {\n      role: 'system',\n      content: 'You are a helpful assistant.',\n      providerMetadata: {\n        openrouter: {\n          cacheControl: { type: 'ephemeral' },\n        },\n      },\n    },\n    {\n      role: 'user',\n      content: 'Hello, how are you?',\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entries\nDESCRIPTION: Records version history including additions of Anthropic cache control and fixes for type compatibility with AI SDK v3.4.33.\nSOURCE: https://github.com/OpenRouterTeam/ai-sdk-provider/blob/main/CHANGELOG.md#2025-04-15_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Changelog\n\n## [0.4.2]\n\n### Added\n\n- Anthropic cache control\n\n## [Unreleased]\n\n### Fixed\n\n- Fixed type compatibility with ai SDK v3.4.33 by properly exporting LanguageModelV1 interface types\n```"
  }
]