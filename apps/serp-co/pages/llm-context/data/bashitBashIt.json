[
  {
    "owner": "bash-it",
    "repo": "bash-it",
    "content": "TITLE: Loading .bashrc in .bash_profile Configuration\nDESCRIPTION: Snippet to source .bashrc file within .bash_profile to ensure Bash-it loads correctly in both login and interactive shell scenarios. This is a recommended practice for consistent behavior across different terminal environments.\nSOURCE: https://github.com/bash-it/bash-it/blob/master/docs/installation.rst#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nif [ -f ~/.bashrc ]; then\n  . ~/.bashrc\nfi\n```\n\n----------------------------------------\n\nTITLE: Load Priority Configuration for Bash-it Components\nDESCRIPTION: Example of setting custom load priority for Bash-it components using a special comment directive. This overrides the default load priority order of aliases (150), plugins (250), and completions (350).\nSOURCE: https://github.com/bash-it/bash-it/blob/master/docs/development.rst#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# BASH_IT_LOAD_PRIORITY: 225\n```\n\n----------------------------------------\n\nTITLE: Saving and Loading Bash-it Profiles\nDESCRIPTION: This snippet demonstrates how to save a custom Bash-it profile, load the default profile, make configuration changes, and reload a saved profile. It showcases the basic usage of the 'bash-it profile' command for managing Bash-it configurations.\nSOURCE: https://github.com/bash-it/bash-it/blob/master/docs/commands/profile.rst#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Saves your current profile\nbash-it profile save my_profile\n# Load the default profile, which is the one used in the default installation.\nbash-it profile load default\n\n# Do whatever you want:\n# Disable stuff\nbash-it disable ...\n# Enable stuff\nbash-it enable ...\n# If you want to get back into your original configuration, you can do it easily\nbash-it profile load my_profile\n```\n\n----------------------------------------\n\nTITLE: Installing Latest Bash on x86 Mac\nDESCRIPTION: Commands to install and configure the latest version of Bash on x86 Mac systems using Homebrew. This includes installing Bash, adding it to the allowed shells list, and setting it as the default shell.\nSOURCE: https://github.com/bash-it/bash-it/blob/master/docs/troubleshooting.rst#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbrew install bash\nsudo sh -c 'echo /usr/local/bin/bash >> /etc/shells'\nchsh -s /usr/local/bin/bash\n```\n\n----------------------------------------\n\nTITLE: Displaying Bash-it Component Information and Help\nDESCRIPTION: Commands for displaying information about Bash-it's components (aliases, completions, plugins) and accessing their help documentation. Shows both installed and available components, and provides detailed help for installed components.\nSOURCE: https://github.com/bash-it/bash-it/blob/master/docs/help_screens.rst#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbash-it show aliases        # shows installed and available aliases\nbash-it show completions    # shows installed and available completions\nbash-it show plugins        # shows installed and available plugins\nbash-it help aliases        # shows help for installed aliases\nbash-it help completions    # shows help for installed completions\nbash-it help plugins        # shows help for installed plugins\n```\n\n----------------------------------------\n\nTITLE: Installing Latest Bash on M1 Mac\nDESCRIPTION: Commands to install and configure the latest version of Bash on M1 Mac systems using Homebrew. This accounts for the different installation path on M1 Macs (/opt/homebrew/bin/).\nSOURCE: https://github.com/bash-it/bash-it/blob/master/docs/troubleshooting.rst#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbrew install bash\nsudo sh -c 'echo /opt/homebrew/bin/bash >> /etc/shells'\nchsh -s /opt/homebrew/bin/bash\n```\n\n----------------------------------------\n\nTITLE: Basic Bash-it Search Syntax\nDESCRIPTION: Demonstrates the basic syntax for using the Bash-it search command to find modules related to specific terms.\nSOURCE: https://github.com/bash-it/bash-it/blob/master/docs/commands/search.rst#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbash-it search term1 [[-]term2] [[-]term3]....\n```\n\n----------------------------------------\n\nTITLE: Configuring Bash-it Theme in Bash\nDESCRIPTION: Examples of how to set the BASH_IT_THEME variable to use different themes or disable theming in Bash-it. This includes using built-in themes, custom themes, or disabling themes altogether.\nSOURCE: https://github.com/bash-it/bash-it/blob/master/docs/themes.rst#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Use the \"powerline-multiline\" theme\nexport BASH_IT_THEME=\"powerline-multiline\"\n\n# Use a theme outside of the Bash-it folder\nexport BASH_IT_THEME=\"/home/foo/my_theme/my_theme.theme.bash\"\n\n# Disable theming\nexport BASH_IT_THEME=\"\"\n```\n\n----------------------------------------\n\nTITLE: Updating Bash-it to Stable Version\nDESCRIPTION: Command to update Bash-it to the latest stable version. This ensures you have the most recent stable features and bug fixes.\nSOURCE: https://github.com/bash-it/bash-it/blob/master/docs/commands/update.rst#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbash-it update stable\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Bash-it Directory Path\nDESCRIPTION: Sets the BASH_IT_CUSTOM environment variable in ~/.bashrc to specify an alternative location for custom Bash-it scripts that will be kept under version control.\nSOURCE: https://github.com/bash-it/bash-it/blob/master/docs/custom.rst#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nBASH_IT_CUSTOM\n```\n\n----------------------------------------\n\nTITLE: Running the Basic Bash-it Doctor Command\nDESCRIPTION: The basic command to run the Bash-it doctor which reloads your bash profile and prints logs to help troubleshoot Bash-it issues. By default, this will print all logs including debug logs.\nSOURCE: https://github.com/bash-it/bash-it/blob/master/docs/commands/doctor.rst#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbash-it doctor\n```\n\n----------------------------------------\n\nTITLE: Running the Bash-it Uninstall Script\nDESCRIPTION: This snippet shows how to navigate to the Bash-it directory and execute the uninstall script, which will restore your previous Bash profile configuration.\nSOURCE: https://github.com/bash-it/bash-it/blob/master/docs/uninstalling.rst#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd $BASH_IT\n./uninstall.sh\n```\n\n----------------------------------------\n\nTITLE: Migrating Bash-it to Latest Structure\nDESCRIPTION: Command to migrate from an older version of Bash-it to ensure compatibility with structural changes. This command runs automatically with update, enable, or disable commands.\nSOURCE: https://github.com/bash-it/bash-it/blob/master/docs/commands/update.rst#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nbash-it migrate\n```\n\n----------------------------------------\n\nTITLE: Using Bash-it reload command\nDESCRIPTION: The reload alias allows convenient reloading of your Bash profile after making changes. This command should not be used when changing themes.\nSOURCE: https://github.com/bash-it/bash-it/blob/master/docs/commands/reload.rst#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nreload\n```\n\n----------------------------------------\n\nTITLE: Enabling Bash-it Proxy Plugin\nDESCRIPTION: Command to enable the proxy plugin in Bash-it framework. This is the first step required to use proxy management functionality.\nSOURCE: https://github.com/bash-it/bash-it/blob/master/docs/proxy_support.rst#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbash-it enable plugin proxy\n```\n\n----------------------------------------\n\nTITLE: Setting automatic reload after configuration changes\nDESCRIPTION: Environment variable that enables automatic reload of Bash-it after activating or deactivating plugins, aliases, or completions.\nSOURCE: https://github.com/bash-it/bash-it/blob/master/docs/commands/reload.rst#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport BASH_IT_AUTOMATIC_RELOAD_AFTER_CONFIG_CHANGE=1\n```\n\n----------------------------------------\n\nTITLE: Running Bash-it Test Suite\nDESCRIPTION: Command to execute the test suite using Bats Test Framework to verify Bash-it functionality. This command ensures Bats is available in the test_lib directory and runs all tests in the test folder.\nSOURCE: https://github.com/bash-it/bash-it/blob/master/docs/contributing.rst#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntest/run\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Status Display Options in Bash Profile\nDESCRIPTION: Environment variable settings to control Git status display behavior in Bash-it prompts, including version control checking, detail level, and remote information display.\nSOURCE: https://github.com/bash-it/bash-it/blob/master/docs/vcs_user.rst#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport SCM_CHECK=false\nexport SCM_CHECK=true\nexport SCM_GIT_SHOW_DETAILS=true\nexport SCM_GIT_SHOW_DETAILS=false\nexport SCM_GIT_SHOW_REMOTE_INFO=auto\nexport SCM_GIT_SHOW_REMOTE_INFO=true\nexport SCM_GIT_SHOW_REMOTE_INFO=false\n```\n\n----------------------------------------\n\nTITLE: Silent Update of Bash-it\nDESCRIPTION: Command to update Bash-it automatically without user interaction using the silent flag. This is useful for scripted or unattended updates.\nSOURCE: https://github.com/bash-it/bash-it/blob/master/docs/commands/update.rst#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbash-it update dev --silent\n```\n\n----------------------------------------\n\nTITLE: Installing Bash-Preexec in Bash Profile\nDESCRIPTION: This snippet shows how to download the bash-preexec script and add it to the bash profile for persistent use across sessions.\nSOURCE: https://github.com/bash-it/bash-it/blob/master/vendor/github.com/rcaloras/bash-preexec/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Pull down our file from GitHub and write it to our home directory as a hidden file.\ncurl https://raw.githubusercontent.com/rcaloras/bash-preexec/master/bash-preexec.sh -o ~/.bash-preexec.sh\n# Source our file at the end of our bash profile (e.g. ~/.bashrc, ~/.profile, or ~/.bash_profile)\necho '[[ -f ~/.bash-preexec.sh ]] && source ~/.bash-preexec.sh' >> ~/.bashrc\n```\n\n----------------------------------------\n\nTITLE: Installing Bash-it with Custom Configuration File Location\nDESCRIPTION: This snippet demonstrates how to install Bash-it while specifying a custom location for the configuration file instead of using the default ~/.bashrc path.\nSOURCE: https://github.com/bash-it/bash-it/blob/master/docs/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nBASH_IT_CONFIG_FILE=path/to/my/custom/location.bash ~/.bash_it/install.sh\n```\n\n----------------------------------------\n\nTITLE: Setting Powerline Padding for macOS High Sierra\nDESCRIPTION: Sets the padding value for the Powerline theme to ensure proper segment alignment on macOS High Sierra. The padding needs to be set to 3 before Bash-it is loaded in either ~/.bash_profile or ~/.bashrc file.\nSOURCE: https://github.com/bash-it/bash-it/blob/master/docs/themes-list/powerline-multiline.rst#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport POWERLINE_PADDING=3\n```\n\n----------------------------------------\n\nTITLE: Updating Bash-it to Development Version\nDESCRIPTION: Command to update Bash-it to the latest development version directly from the master branch. This provides access to the newest features that haven't been released to stable yet.\nSOURCE: https://github.com/bash-it/bash-it/blob/master/docs/commands/update.rst#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbash-it update dev\n```\n\n----------------------------------------\n\nTITLE: Automatically Setting Atomic Theme on macOS\nDESCRIPTION: This command uses sed to automatically replace the current Bash-it theme with the Atomic theme in the ~/.bash_profile file for macOS systems.\nSOURCE: https://github.com/bash-it/bash-it/blob/master/docs/themes-list/atomic.rst#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Set the \"atomic\" theme replacing the theme you are using of bash-it\nsed -i '' 's/'\"$BASH_IT_THEME\"'/atomic/g' ~/.bash_profile\n```\n\n----------------------------------------\n\nTITLE: Running Bash-it Doctor with Specified Verbosity\nDESCRIPTION: This command allows you to specify the level of verbosity for the Bash-it doctor output. You can filter to show only errors, only warnings, or all log messages.\nSOURCE: https://github.com/bash-it/bash-it/blob/master/docs/commands/doctor.rst#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbash-it doctor [errors/warnings/all]\n```\n\n----------------------------------------\n\nTITLE: Searching with Negations in Bash-it\nDESCRIPTION: Demonstrates how to exclude specific terms from the search results by prefixing them with a hyphen.\nSOURCE: https://github.com/bash-it/bash-it/blob/master/docs/commands/search.rst#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n❯ bash-it search ruby rake gem bundle irb rails -chruby\n         aliases:  bundler rails\n         plugins:  ruby\n     completions:  bundler gem rake\n```\n\n----------------------------------------\n\nTITLE: Searching for Ruby-related Modules in Bash-it\nDESCRIPTION: Example of searching for modules related to Ruby development in Bash-it, including terms like ruby, rake, gem, bundle, and rails.\nSOURCE: https://github.com/bash-it/bash-it/blob/master/docs/commands/search.rst#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n❯ bash-it search ruby rake gem bundle irb rails\n         aliases:  bundler rails\n         plugins:  chruby chruby-auto ruby\n     completions:  bundler gem rake\n```\n\n----------------------------------------\n\nTITLE: Disabling ASCII Color in Bash-it Search Output\nDESCRIPTION: Shows how to remove non-printing ASCII characters responsible for coloring the search output by setting the NO_COLOR environment variable.\nSOURCE: https://github.com/bash-it/bash-it/blob/master/docs/commands/search.rst#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n❯ NO_COLOR=1 bash-it search ruby rake gem bundle irb rails -chruby\n         aliases  =>   ✓bundler ✓rails\n         plugins  =>   ✓ruby\n     completions  =>   bundler gem rake\n```\n\n----------------------------------------\n\nTITLE: Using Bash-it restart command\nDESCRIPTION: The restart command provides a stronger refresh than reload by re-executing Bash completely. This is similar to closing and reopening your terminal.\nSOURCE: https://github.com/bash-it/bash-it/blob/master/docs/commands/reload.rst#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbash-it restart\n```\n\n----------------------------------------\n\nTITLE: Installing Composure in Bash\nDESCRIPTION: Commands to download and install the Composure framework in a Bash environment. This sequence downloads the script, makes it executable, and adds it to the user's bash configuration file.\nSOURCE: https://github.com/bash-it/bash-it/blob/master/vendor/github.com/erichs/composure/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd /your/favorite/directory\ncurl -L http://git.io/composure > composure.sh\nchmod +x composure.sh\necho \"source $(pwd)/composure.sh\" >> ~/.bashrc   # or, ~/.bash_profile on osx\n```\n\n----------------------------------------\n\nTITLE: Vendor Library Status Check Command\nDESCRIPTION: Command and sample output for checking the status of vendored libraries using git vendor list.\nSOURCE: https://github.com/bash-it/bash-it/blob/master/docs/development.rst#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n[feature/branch] $ git vendor list\npreexec@0.4.1:\n    name:   preexec\n    dir:    vendor/github.com/rcaloras/bash-preexec\n    repo:   https://github.com/rcaloras/bash-preexec\n    ref:    0.4.1\n    commit: 8fe585c5cf377a3830b895fe26e694b020d8db1a\n[feature/branch] $\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Commit Count and User Display\nDESCRIPTION: Settings for controlling the display of commit count differences and current Git user information in the prompt\nSOURCE: https://github.com/bash-it/bash-it/blob/master/docs/vcs_user.rst#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport SCM_GIT_SHOW_COMMIT_COUNT=true\nexport SCM_GIT_SHOW_COMMIT_COUNT=false\nexport SCM_THEME_CURRENT_USER_PREFFIX=' ☺︎ '\nexport SCM_THEME_CURRENT_USER_SUFFIX=' ☺︎ '\n```\n\n----------------------------------------\n\nTITLE: Enabling Command Duration Display in Bash-it\nDESCRIPTION: Shows how to enable the command duration feature in Bash-it themes and customize the minimum duration threshold. This feature displays the execution time of the last command if it exceeds a specified duration.\nSOURCE: https://github.com/bash-it/bash-it/blob/master/docs/themes.rst#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport BASH_IT_COMMAND_DURATION=true\n\nexport COMMAND_DURATION_MIN_SECONDS=5\n```\n\n----------------------------------------\n\nTITLE: Setting Git Minimal Info Display\nDESCRIPTION: Configuration for enabling minimal Git status information display to improve prompt performance\nSOURCE: https://github.com/bash-it/bash-it/blob/master/docs/vcs_user.rst#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nexport SCM_GIT_SHOW_MINIMAL_INFO=true\n```\n\n----------------------------------------\n\nTITLE: Retrieving Function Metadata\nDESCRIPTION: Example of using the 'metafor' function to extract metadata from a shell function definition based on a specified keyword.\nSOURCE: https://github.com/bash-it/bash-it/blob/master/vendor/github.com/erichs/composure/README.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ntypeset -f foo | metafor about  # displays:\nperform mad script-foo\n```\n\n----------------------------------------\n\nTITLE: Configuring SSH Prompt Display in BarbUk Theme\nDESCRIPTION: Configuration options for the SSH prompt in the BarbUk theme. This allows customization of hostname format and whether to display SSH information.\nSOURCE: https://github.com/bash-it/bash-it/blob/master/themes/barbuk/README.rst#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# short or long\nexport BARBUK_HOST_INFO=short\n# true or false\nexport BARBUK_SSH_INFO=false\nsource \"$BASH_IT\"/bash_it.sh\n```\n\n----------------------------------------\n\nTITLE: Adding Metadata to Shell Functions\nDESCRIPTION: Example of using Composure's metadata system to add documentation to shell functions with custom keywords defined by the 'cite' function.\nSOURCE: https://github.com/bash-it/bash-it/blob/master/vendor/github.com/erichs/composure/README.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nfoo()\n{\n    cite about\n    about perform mad script-foo\n    echo 'foo'\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Brainy Prompt Segment Order\nDESCRIPTION: Environment variables that control the order and placement of prompt segments in the terminal display.\nSOURCE: https://github.com/bash-it/bash-it/blob/master/docs/themes-list/brainy.rst#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n___BRAINY_TOP_LEFT=\"user_info dir scm\"\n___BRAINY_TOP_RIGHT=\"python ruby todo clock battery\"\n___BRAINY_BOTTOM=\"exitcode char\"\n```\n\n----------------------------------------\n\nTITLE: Quick Start: Installing and Using Bash-Preexec in Bash\nDESCRIPTION: This snippet demonstrates how to download the bash-preexec script, source it, and define basic preexec and precmd functions.\nSOURCE: https://github.com/bash-it/bash-it/blob/master/vendor/github.com/rcaloras/bash-preexec/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Pull down our file from GitHub and write it to our home directory as a hidden file.\ncurl https://raw.githubusercontent.com/rcaloras/bash-preexec/master/bash-preexec.sh -o ~/.bash-preexec.sh\n# Source our file to bring it into our environment\nsource ~/.bash-preexec.sh\n# Define a couple functions.\npreexec() { echo \"just typed $1\"; }\nprecmd() { echo \"printing the prompt\"; }\n```\n\n----------------------------------------\n\nTITLE: Setting Powerline Prompt User Info Mode in Bash\nDESCRIPTION: Configures the Powerline theme to display user information. When set to 'sudo', it hides the username and hostname, showing only an indicator when sudo credentials are cached.\nSOURCE: https://github.com/bash-it/bash-it/blob/master/docs/themes-list/powerline-base.rst#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport POWERLINE_PROMPT_USER_INFO_MODE=\"sudo\"\n```\n\n----------------------------------------\n\nTITLE: Defining Powerline Prompt Segment Order\nDESCRIPTION: Specifies the order of information segments displayed in the Powerline prompt. This example shows the default configuration with user info, SCM status, Python environment, Ruby environment, and current directory.\nSOURCE: https://github.com/bash-it/bash-it/blob/master/docs/themes-list/powerline-base.rst#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nPOWERLINE_PROMPT=\"user_info scm python_venv ruby cwd\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Clock Format in Powerline Theme\nDESCRIPTION: Sets the format for displaying time in the Powerline theme. The format uses the date command syntax and can be customized to show hours, minutes, seconds, and other time elements.\nSOURCE: https://github.com/bash-it/bash-it/blob/master/docs/themes-list/powerline-base.rst#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport THEME_CLOCK_FORMAT=\"%H:%M:%S\"\n```\n\n----------------------------------------\n\nTITLE: Setting Atomic Theme in Bash Configuration\nDESCRIPTION: This snippet shows how to set the Atomic theme as the active theme for Bash-it by modifying the BASH_IT_THEME environment variable in the ~/.bashrc file.\nSOURCE: https://github.com/bash-it/bash-it/blob/master/docs/themes-list/atomic.rst#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Use the \"atomic\" theme\nexport BASH_IT_THEME=\"atomic\"\n```\n\n----------------------------------------\n\nTITLE: Randomizing Colors for Nwinkler Theme in Bash\nDESCRIPTION: This command forces the selection of new random colors for the Nwinkler Random Color Theme. It overwrites the previously saved color configuration in the ~/.nwinkler_random_colors file.\nSOURCE: https://github.com/bash-it/bash-it/blob/master/docs/themes-list/nwinkler_random_colors.rst#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nrandomize_nwinkler\n```\n\n----------------------------------------\n\nTITLE: Default BarbUk Theme Glyphs Configuration\nDESCRIPTION: Default glyph definitions for various theme components including git hosting services, SCM tools, and environment indicators. These glyphs require a Nerd Font to display properly.\nSOURCE: https://github.com/bash-it/bash-it/blob/master/docs/themes-list/barbuk.rst#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nBARBUK_GITLAB_CHAR='  '\nBARBUK_BITBUCKET_CHAR='  '\nBARBUK_GITHUB_CHAR='  '\nBARBUK_GIT_DEFAULT_CHAR='  '\nBARBUK_GIT_BRANCH_ICON=''\nBARBUK_CURRENT_USER_PREFFIX='  '\nBARBUK_HG_CHAR='☿ '\nBARBUK_SVN_CHAR='⑆ '\nBARBUK_EXIT_CODE_ICON=' '\nBARBUK_PYTHON_VENV_CHAR=' '\nBARBUK_COMMAND_DURATION_ICON='  '\nBARBUK_RUBY_CHAR=' '\nBARBUK_NODE_CHAR=' '\nBARBUK_TERRAFORM_CHAR=\"❲t❳ \"\nBARBUK_AWS_PROFILE_CHAR=\" aws \"\nBARBUK_SCALEWAY_PROFILE_CHAR=\" scw \"\nBARBUK_GCLOUD_CHAR=\" gcp \"\n```\n\n----------------------------------------\n\nTITLE: Enabling Distro Logo in Redline Theme\nDESCRIPTION: Configuration setting to enable the distribution logo display in the Redline theme prompt.\nSOURCE: https://github.com/bash-it/bash-it/blob/master/docs/themes-list/redline.rst#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport POWERLINE_PROMPT_DISTRO_LOGO=\"yes\"\n```\n\n----------------------------------------\n\nTITLE: Setting Theme Environment Variables in Bash\nDESCRIPTION: Default environment variable settings for configuring various aspects of the Brainy theme, including display preferences and formatting options.\nSOURCE: https://github.com/bash-it/bash-it/blob/master/docs/themes-list/brainy.rst#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nTHEME_SHOW_SUDO=true\nTHEME_SHOW_SCM=true\nTHEME_SHOW_RUBY=false\nTHEME_SHOW_PYTHON=false\nTHEME_SHOW_TODO=false\nTHEME_SHOW_CLOCK=true\nTHEME_CLOCK_COLOR=$bold_cyan\nTHEME_CLOCK_FORMAT=\"%H:%M:%S\"\nTHEME_SHOW_BATTERY=false\nTHEME_SHOW_EXITCODE=true\n```\n\n----------------------------------------\n\nTITLE: Adding Functions to Preexec and Precmd Arrays in Bash\nDESCRIPTION: This snippet shows how to define functions and add them to the preexec_functions and precmd_functions arrays for multiple hook executions.\nSOURCE: https://github.com/bash-it/bash-it/blob/master/vendor/github.com/rcaloras/bash-preexec/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Define some function to use preexec\npreexec_hello_world() { echo \"You just entered $1\"; }\n# Add it to the array of functions to be invoked each time.\npreexec_functions+=(preexec_hello_world)\n\nprecmd_hello_world() { echo \"This is invoked before the prompt is displayed\"; }\nprecmd_functions+=(precmd_hello_world)\n\nprecmd_hello_one() { echo \"This is invoked on precmd first\"; }\nprecmd_hello_two() { echo \"This is invoked on precmd second\"; }\nprecmd_functions+=(precmd_hello_one)\nprecmd_functions+=(precmd_hello_two)\n\necho ${preexec_functions[@]}\necho ${precmd_functions[@]}\n```\n\n----------------------------------------\n\nTITLE: Customizing BarbUk Theme Glyphs\nDESCRIPTION: Example of how to customize theme glyphs by setting environment variables before sourcing bash-it.\nSOURCE: https://github.com/bash-it/bash-it/blob/master/docs/themes-list/barbuk.rst#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport BARBUK_GITHUB_CHAR='•'\nsource \"$BASH_IT\"/bash_it.sh\n```\n\n----------------------------------------\n\nTITLE: Enabling Subshell Support for Bash-Preexec\nDESCRIPTION: This snippet shows how to enable experimental subshell support for bash-preexec by setting an environment variable.\nSOURCE: https://github.com/bash-it/bash-it/blob/master/vendor/github.com/rcaloras/bash-preexec/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# Enable experimental subshell support\nexport __bp_enable_subshells=\"true\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Redline Theme Settings in Bash\nDESCRIPTION: Core configuration settings for the Redline theme including theme selection, SCM checking, hostname settings, and prompt customization. These settings control the basic behavior and appearance of the Redline theme.\nSOURCE: https://github.com/bash-it/bash-it/blob/master/docs/themes-list/redline.rst#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n## set the theme\nexport BASH_IT_THEME='redline'\n\n# Set this to false to turn off version control status checking within the prompt for all themes\nexport SCM_CHECK=true\n\n## Set Xterm/screen/Tmux title with only a short hostname.\nexport SHORT_HOSTNAME=$(hostname -s)\n\n## enable sudo prompt\nexport POWERLINE_PROMPT_USER_INFO_MODE=\"sudo\"\n\n## prompt part string\nexport POWERLINE_PROMPT=\"python_venv user_info hostname cwd scm\"\n```\n\n----------------------------------------\n\nTITLE: Setting Default Glyphs for BarbUk Theme in Bash\nDESCRIPTION: Default glyph configurations for various elements in the BarbUk theme. These can be overridden to use different glyphs or standard ASCII characters.\nSOURCE: https://github.com/bash-it/bash-it/blob/master/themes/barbuk/README.rst#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nBARBUK_GITLAB_CHAR='  '\nBARBUK_BITBUCKET_CHAR='  '\nBARBUK_GITHUB_CHAR='  '\nBARBUK_GIT_DEFAULT_CHAR='  '\nBARBUK_GIT_BRANCH_ICON=''\nBARBUK_CURRENT_USER_PREFFIX='  '\nBARBUK_HG_CHAR='☿ '\nBARBUK_SVN_CHAR='⑆ '\nBARBUK_EXIT_CODE_ICON=' '\nBARBUK_PYTHON_VENV_CHAR=' '\nBARBUK_COMMAND_DURATION_ICON='  '\nBARBUK_RUBY_CHAR=' '\nBARBUK_NODE_CHAR=' '\nBARBUK_TERRAFORM_CHAR=\"❲t❳ \"\nBARBUK_AWS_PROFILE_CHAR=\" aws \"\nBARBUK_SCALEWAY_PROFILE_CHAR=\" scw \"\nBARBUK_GCLOUD_CHAR=\" gcp \"\n```\n\n----------------------------------------\n\nTITLE: Configuring BarbUk Theme Components in Bash\nDESCRIPTION: Default configuration for the BarbUk theme, specifying which components to display in the prompt. Users can override this to customize their prompt.\nSOURCE: https://github.com/bash-it/bash-it/blob/master/themes/barbuk/README.rst#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nBARBUK_PROMPT=\"git-uptream-remote-logo ssh path scm python_venv ruby node terraform cloud duration exit\"\n```\n\n----------------------------------------\n\nTITLE: Customizing Glyphs for BarbUk Theme in Bash\nDESCRIPTION: Example of how to customize glyphs for the BarbUk theme. This snippet shows how to change the GitHub character before sourcing bash-it.\nSOURCE: https://github.com/bash-it/bash-it/blob/master/themes/barbuk/README.rst#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport BARBUK_GITHUB_CHAR='•'\nsource \"$BASH_IT\"/bash_it.sh\n```\n\n----------------------------------------\n\nTITLE: Configuring SSH Display Options\nDESCRIPTION: Configuration options for customizing how SSH session information is displayed in the prompt, including hostname format and SSH info visibility.\nSOURCE: https://github.com/bash-it/bash-it/blob/master/docs/themes-list/barbuk.rst#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# short or long\nexport BARBUK_HOST_INFO=short\n# true or false\nexport BARBUK_SSH_INFO=false\nsource \"$BASH_IT\"/bash_it.sh\n```\n\n----------------------------------------\n\nTITLE: Configuring Default BarbUk Prompt Components\nDESCRIPTION: Default configuration for the BarbUk prompt showing which components are enabled by default. Components include git remote logo, SSH info, path, SCM status, virtual environments, and command duration.\nSOURCE: https://github.com/bash-it/bash-it/blob/master/docs/themes-list/barbuk.rst#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nBARBUK_PROMPT=\"git-uptream-remote-logo ssh path scm python_venv ruby node terraform cloud duration exit\"\n```\n\n----------------------------------------\n\nTITLE: Setting Git Untracked Files and Stash Information Display\nDESCRIPTION: Configuration options for controlling the display of untracked files and stash information in Git status output\nSOURCE: https://github.com/bash-it/bash-it/blob/master/docs/vcs_user.rst#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport SCM_GIT_IGNORE_UNTRACKED=false\nexport SCM_GIT_IGNORE_UNTRACKED=true\nexport SCM_GIT_SHOW_STASH_INFO=true\nexport SCM_GIT_SHOW_STASH_INFO=false\n```\n\n----------------------------------------\n\nTITLE: Installing APM Bash Completion via Homebrew\nDESCRIPTION: Command to install the apm-bash-completion package via Homebrew package manager.\nSOURCE: https://github.com/bash-it/bash-it/blob/master/vendor/github.com/vigo/apm-bash-completion/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbrew install homebrew/completions/apm-bash-completion\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Status Check Behavior\nDESCRIPTION: Git configuration commands to disable status checking for specific repositories or globally\nSOURCE: https://github.com/bash-it/bash-it/blob/master/docs/vcs_user.rst#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ git config --add bash-it.hide-status 1\n$ git config --global --add bash-it.hide-status 1\n```\n\n----------------------------------------\n\nTITLE: APM Bash Completion Manual Usage\nDESCRIPTION: Instructions for manually loading the apm bash completion script by sourcing the file.\nSOURCE: https://github.com/bash-it/bash-it/blob/master/vendor/github.com/vigo/apm-bash-completion/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsource apm\n```\n\n----------------------------------------\n\nTITLE: Automatically Setting Atomic Theme on Linux and Windows\nDESCRIPTION: This command uses sed to automatically replace the current Bash-it theme with the Atomic theme in the ~/.bashrc file for Linux and Windows systems.\nSOURCE: https://github.com/bash-it/bash-it/blob/master/docs/themes-list/atomic.rst#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Set the \"atomic\" theme replacing the theme you are using of bash-it\nsed -i 's/'\"$BASH_IT_THEME\"'/atomic/g' ~/.bashrc\n```\n\n----------------------------------------\n\nTITLE: Using Pattern for Double Bracket Test Conditions in Bash-it\nDESCRIPTION: This pattern should be used when features unique to double brackets are needed, such as pattern matching or regular expressions. The `|| return 1` ensures proper behavior in Bats tests across all Bash versions, particularly on macOS which uses Bash 3.2.\nSOURCE: https://github.com/bash-it/bash-it/blob/master/vendor/github.com/rcaloras/bash-preexec/test/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n[[ ... ]] || return 1\n```\n\n----------------------------------------\n\nTITLE: Configuring Sudo Environment for SSH\nDESCRIPTION: Sudoers configuration to maintain theme functionality when using sudo in SSH sessions by preserving necessary environment variables.\nSOURCE: https://github.com/bash-it/bash-it/blob/master/docs/themes-list/barbuk.rst#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncat << EOF > /etc/sudoers.d/keepenv\nDefaults env_keep += HOME\nDefaults env_keep += SSH_CONNECTION\nEOF\nchmod 400 /etc/sudoers.d/keepenv\n```\n\n----------------------------------------\n\nTITLE: Command-Line Crafting Example\nDESCRIPTION: Example of iteratively building a complex command by trying different pipe filters, demonstrating the workflow Composure aims to improve.\nSOURCE: https://github.com/bash-it/bash-it/blob/master/vendor/github.com/erichs/composure/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ cat servers.txt\nbashful: up\ndoc: down\n\nup-arrow\n\n$ cat servers.txt | grep down\ndoc: down\n\nup-arrow\n\n$ cat servers.txt | grep down | mail -s \"down server(s)\" admin@here.com\n```\n\n----------------------------------------\n\nTITLE: Using Preexec and Precmd Functions in Bash\nDESCRIPTION: This snippet demonstrates how to define and use preexec and precmd functions after sourcing bash-preexec.\nSOURCE: https://github.com/bash-it/bash-it/blob/master/vendor/github.com/rcaloras/bash-preexec/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsource ~/.bash-preexec.sh\npreexec() { echo \"just typed $1\"; }\nprecmd() { echo \"printing the prompt\"; }\n```\n\n----------------------------------------\n\nTITLE: Using Draft Function in Composure\nDESCRIPTION: Example of using the 'draft' function to save a command as a reusable shell function, showing how to convert a pipeline into a named function that can be reused.\nSOURCE: https://github.com/bash-it/bash-it/blob/master/vendor/github.com/erichs/composure/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ cat servers.txt\nbashful: up\ndoc: down\n\nup-arrow\n\n$ cat servers.txt | grep down\ndoc: down\n\n$ draft finddown\n\n$ finddown | mail -s \"down server(s)\" admin@here.com\n```\n\n----------------------------------------\n\nTITLE: Disabling Automatic Function Loading\nDESCRIPTION: Configuration to disable Composure's default behavior of automatically loading all composed functions at startup, useful for environments with many functions or performance concerns.\nSOURCE: https://github.com/bash-it/bash-it/blob/master/vendor/github.com/erichs/composure/README.md#2025-04-23_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nexport LOAD_COMPOSED_FUNCTIONS=0\n```\n\n----------------------------------------\n\nTITLE: Revising Shell Functions with Composure\nDESCRIPTION: Example of using the 'revise' command to edit a shell function, adding parameters and metadata to improve documentation and functionality.\nSOURCE: https://github.com/bash-it/bash-it/blob/master/vendor/github.com/erichs/composure/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ revise finddown\nfinddown ()\n{\n    about finds servers marked 'down' in text file\n    group admin\n    cat $1 | grep down\n}\n\n$ finddown servers.txt\ndoc: down\n```\n\n----------------------------------------\n\nTITLE: Upgrading Composure from Pre-1.1.0 Version\nDESCRIPTION: Commands for users upgrading from a version prior to 1.1.0 to move the composure repository to its new location under ~/.local/composure.\nSOURCE: https://github.com/bash-it/bash-it/blob/master/vendor/github.com/erichs/composure/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmkdir ~/.local 2>/dev/null\nmv ~/.composure ~/.local/composure\n```\n\n----------------------------------------\n\nTITLE: Writing Functions to Files with Composure\nDESCRIPTION: Demonstration of using the 'write' command to output a function definition to a file for use in shell scripts.\nSOURCE: https://github.com/bash-it/bash-it/blob/master/vendor/github.com/erichs/composure/README.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ write finddown > finddown.sh\n```\n\n----------------------------------------\n\nTITLE: Running Specific Test Subdirectories in Bash-it\nDESCRIPTION: Command to run only tests in a specific subdirectory (themes in this example) when in the root .bash_it directory.\nSOURCE: https://github.com/bash-it/bash-it/blob/master/docs/test.rst#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntest/run test/themes\n```\n\n----------------------------------------\n\nTITLE: Using Composure's Help System\nDESCRIPTION: Examples of using the 'glossary' and 'reference' commands to display help information for functions based on their metadata.\nSOURCE: https://github.com/bash-it/bash-it/blob/master/vendor/github.com/erichs/composure/README.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ glossary   # displays:\ncite                creates a new meta keyword for use in your functions\ndraft               wraps last command into a new function\nfinddown            finds servers marked 'down' in text file\nfoo                 perform mad script-foo\nglossary            displays help summary for all functions, or summary for a group of functions\nmetafor             prints function metadata associated with keyword\nreference           displays apidoc help for a specific function\nrevise              loads function into editor for revision\nwrite               writes one or more composed function definitions to stdout\n\nmeanwhile\n\n$ glossary admin   # displays:\nfinddown            finds servers marked 'down' in text file\n\nand\n\n$ reference draft  # displays:\ndraft               wraps last command into a new function\nparameters:\n                    1: name to give function\nexamples:\n                    $ ls\n                    $ draft list\n                    $ list\n```\n\n----------------------------------------\n\nTITLE: Listing Differences in Bira Theme for Bash-it\nDESCRIPTION: This markdown snippet outlines the key differences between the Bash-it port of the Bira theme and the original Oh My Zsh version. It highlights changes in functionality and display.\nSOURCE: https://github.com/bash-it/bash-it/blob/master/docs/themes-list/bira.rst#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* Exit code of last command is not shown\n* More informative git prompt (if you want to keep it minimal, please read: :ref:`git_prompt`)\n* Position and colour of virtualenv prompt\n* No ruby version prompt\n```\n\n----------------------------------------\n\nTITLE: Displaying Bash-it Easy Theme Prompt Example\nDESCRIPTION: This code snippet demonstrates the appearance of the command prompt when using the 'Easy' theme in Bash-it. It shows the user, hostname, current directory, Git branch status, and prompt symbol.\nSOURCE: https://github.com/bash-it/bash-it/blob/master/docs/themes-list/easy.rst#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nuser@hostname ~/.bash_it\n[ master ✓ ] ❯\n```\n\n----------------------------------------\n\nTITLE: Creating Table of Contents in ReStructuredText for Bash-it Misc Docs\nDESCRIPTION: This snippet defines a table of contents for the 'Misc' section of the Bash-it documentation. It includes links to help screens and proxy support documentation.\nSOURCE: https://github.com/bash-it/bash-it/blob/master/docs/misc.rst#2025-04-23_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. _misc:\n\nMisc\n----\n\n.. toctree::\n   :maxdepth: 2\n\n   help_screens\n   proxy_support\n```\n\n----------------------------------------\n\nTITLE: Displaying Inretio Theme in Git-tracked Folder\nDESCRIPTION: This snippet shows how the Inretio theme appears in a Git-tracked folder. It displays the date, time, username, hostname, current folder, Git branch, and status.\nSOURCE: https://github.com/bash-it/bash-it/blob/master/docs/themes-list/inretio.rst#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n┌──[2024-03-20 12:05:07] 🐧 gytis 💻 gytis-legion  📂 bash-it on 🌵 theme-inretio ⌀1 ✗ \n└> ls\naliases     clean_files.txt  custom  hooks       lib      lint_clean_files.sh  profiles  template  test_lib  uninstall.sh\nbash_it.sh  completion       docs    install.sh  LICENSE  plugins              scripts   test      themes    vendor\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Codeword Theme PS1 Prompt Usage in Bash\nDESCRIPTION: Example showing how the Codeword theme's PS1 prompt changes as you navigate through different directories and repositories. Displays user@host:path format with git status indicators when in a repository.\nSOURCE: https://github.com/bash-it/bash-it/blob/master/docs/themes-list/codeword.rst#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nuser@example.lan:~ $ cd /tmp/foo/bar/baz\nuser@example.lan:/tmp/foo/bar/baz $ cd $HOME/workspace\nuser@example.lan:~/workspace $ cd sampleRepo/\nuser@example.lan:~/workspace/sampleRepo [± |master ↑1 ↓3 {1} S:2 ?:1 ✗|] $\n```\n\n----------------------------------------\n\nTITLE: SSH Prompt Example\nDESCRIPTION: Example showing the prompt format during an SSH session.\nSOURCE: https://github.com/bash-it/bash-it/blob/master/docs/themes-list/barbuk.rst#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nuser@hostname in  ~/bash-it on  master ✓ ❯\n```\n\n----------------------------------------\n\nTITLE: Displaying Radek Theme Prompt in Bash\nDESCRIPTION: This snippet demonstrates the appearance of the Radek theme prompt in Bash. It shows the username, hostname, current directory, Git repository status, active Python virtual environment, and Python version.\nSOURCE: https://github.com/bash-it/bash-it/blob/master/docs/themes-list/radek.rst#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n[radek@photon][~/src/nokia2/cbis] ±[master → origin ↑1 {1}✓][venv-cbis][py-3.7.5]\n→\n```\n\n----------------------------------------\n\nTITLE: Running Tests for Bash-Preexec Using Bats\nDESCRIPTION: This snippet demonstrates how to run tests for bash-preexec using the Bats testing framework.\nSOURCE: https://github.com/bash-it/bash-it/blob/master/vendor/github.com/rcaloras/bash-preexec/README.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nbats test\n```\n\n----------------------------------------\n\nTITLE: Displaying Inretio Theme in Python Virtual Environment\nDESCRIPTION: This snippet demonstrates how the Inretio theme appears when working in a Python virtual environment. It shows the date, time, username, hostname, Python version, and current folder.\nSOURCE: https://github.com/bash-it/bash-it/blob/master/docs/themes-list/inretio.rst#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n┌──[2024-03-20 12:07:32] 🐧 gytis 💻 gytis-legion 🐍 3.12.2 on [general] 📂 general\n└> ls\nbin  include  lib  lib64  pyvenv.cfg  share\n```\n\n----------------------------------------\n\nTITLE: Git Commands for Contributing to the Project\nDESCRIPTION: Git commands for creating a feature branch, committing changes, and submitting a pull request to contribute to the project.\nSOURCE: https://github.com/bash-it/bash-it/blob/master/vendor/github.com/vigo/apm-bash-completion/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b my-new-feature\ngit commit -am 'Add some feature'\ngit push origin my-new-feature\n```\n\n----------------------------------------\n\nTITLE: Git Prompt Example\nDESCRIPTION: Example showing git status information in the prompt including branch, remote, and changes.\nSOURCE: https://github.com/bash-it/bash-it/blob/master/docs/themes-list/barbuk.rst#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n  ~/.dotfiles on  master ⤏  origin ↑2 •7 ✗ ❯\n```\n\n----------------------------------------\n\nTITLE: Installing JBoss Bash Completion on RHEL/CentOS\nDESCRIPTION: Command to install bash-completion package on Red Hat-based systems using yum package manager.\nSOURCE: https://github.com/bash-it/bash-it/blob/master/vendor/github.com/rparree/jboss-bash-completion/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyum install bash-completion\n```\n\n----------------------------------------\n\nTITLE: Clean Prompt Example\nDESCRIPTION: Example of the minimal clean prompt display.\nSOURCE: https://github.com/bash-it/bash-it/blob/master/docs/themes-list/barbuk.rst#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n~ ❯\n```\n\n----------------------------------------\n\nTITLE: Vendored Library Rebase Commands\nDESCRIPTION: Command sequence for rebasing a feature branch with a vendored library using git vendor and subtree strategy.\nSOURCE: https://github.com/bash-it/bash-it/blob/master/docs/development.rst#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n[feature/branch] $ git rebase --rebase-merges --strategy subtree master\nfatal: refusing to merge unrelated histories\nCould not apply 0d6a56b... Add-preexec-from-https-github-com-rcaloras-bash-preexec-0-4-1- # Add \"preexec\" from \"https://github.com/rcaloras/bash-preexec@0.4.1\"\n[feature/branch] $ git vendor add preexec https://github.com/rcaloras/bash-preexec 0.4.1\n...\n[feature/branch] $ git rebase --continue\n```\n\n----------------------------------------\n\nTITLE: Python Virtual Environment Prompt Example\nDESCRIPTION: Example showing the prompt with an active Python virtual environment.\nSOURCE: https://github.com/bash-it/bash-it/blob/master/docs/themes-list/barbuk.rst#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n  flask ~/test on  master ✓ ❯\n```\n\n----------------------------------------\n\nTITLE: Vendored Library Test Rebase Commands\nDESCRIPTION: Commands for testing a rebase of a feature branch with vendored libraries in a separate test branch.\nSOURCE: https://github.com/bash-it/bash-it/blob/master/docs/development.rst#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n[feater/branch] $ git checkout -b feature/branch-test-rebase\n[feater/branch-test-rebase] $ git rebase --rebase-merges --strategy subtree master\n...\n```\n\n----------------------------------------\n\nTITLE: Command Duration Prompt Example\nDESCRIPTION: Example showing command execution duration in the prompt.\nSOURCE: https://github.com/bash-it/bash-it/blob/master/docs/themes-list/barbuk.rst#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n# sleep 3s\nuser@hostname in  ~/bash-it on  master ✓  3.2s ❯\n```\n\n----------------------------------------\n\nTITLE: Specifying Sphinx Documentation Dependencies in Python\nDESCRIPTION: This snippet lists the required Python packages and their versions for generating Sphinx documentation. It includes Sphinx 4.5.0, the Read the Docs theme 0.5.0, a Sphinx emoji extension 0.1.8, and docutils 0.17.1.\nSOURCE: https://github.com/bash-it/bash-it/blob/master/docs/requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\nsphinx==4.5.0\nsphinx-rtd-theme==0.5.0\nsphinxemoji==0.1.8\ndocutils==0.17.1\n```\n\n----------------------------------------\n\nTITLE: APM Command Tab Completion Example\nDESCRIPTION: Example showing tab completion for APM commands, displaying all available commands when pressing TAB after 'apm'.\nSOURCE: https://github.com/bash-it/bash-it/blob/master/vendor/github.com/vigo/apm-bash-completion/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ apm [TAB]\n\nclean                 featured              ln                    remove                unlink\nconfig                help                  lns                   rm                    unpublish\ndedupe                home                  login                 search                unstar\ndeinstall             init                  ls                    show                  update\ndelete                install               open                  star                  upgrade\ndev                   link                  outdated              starred               view\ndevelop               linked                publish               stars                 \ndocs                  links                 rebuild               test                  \nerase                 list                  rebuild-module-cache  uninstall             \n\n$ apm publish\nbuild  major  minor  patch\n\n$ apm config\ndelete  edit    get     list    set\n```\n\n----------------------------------------\n\nTITLE: Specifying pre-commit Package Version\nDESCRIPTION: Defines the version requirement for the pre-commit package used in the project. The package is pinned to version 2.3.0.\nSOURCE: https://github.com/bash-it/bash-it/blob/master/test/lint-requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\npre-commit==2.3.0\n```\n\n----------------------------------------\n\nTITLE: Copying JBoss Completion Scripts to System Directory\nDESCRIPTION: Command to copy JBoss completion scripts to the system-wide bash completion directory.\nSOURCE: https://github.com/bash-it/bash-it/blob/master/vendor/github.com/rparree/jboss-bash-completion/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo cp jboss* /etc/bash_completion.d\n```\n\n----------------------------------------\n\nTITLE: Installing JBoss Bash Completion on Debian/Ubuntu\nDESCRIPTION: Command to install bash-completion package on Debian-based systems using apt package manager.\nSOURCE: https://github.com/bash-it/bash-it/blob/master/vendor/github.com/rparree/jboss-bash-completion/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\napt-get install bash-completion\n```\n\n----------------------------------------\n\nTITLE: Manual Lint Check Command Example\nDESCRIPTION: A command showing how to manually invoke the lint check script locally.\nSOURCE: https://github.com/bash-it/bash-it/blob/master/clean_files.txt#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nlint_clean_files.sh\n```\n\n----------------------------------------\n\nTITLE: Configuring Sudo to Preserve Theme in SSH Sessions\nDESCRIPTION: Configuration for sudo to keep HOME and SSH_CONNECTION environment variables, allowing the theme to persist when using sudo -s in an SSH session.\nSOURCE: https://github.com/bash-it/bash-it/blob/master/themes/barbuk/README.rst#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncat << EOF > /etc/sudoers.d/keepenv\nDefaults env_keep += HOME\nDefaults env_keep += SSH_CONNECTION\nEOF\nchmod 400 /etc/sudoers.d/keepenv\n```"
  }
]