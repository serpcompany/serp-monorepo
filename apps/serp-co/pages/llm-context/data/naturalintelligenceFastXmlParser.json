[
  {
    "owner": "naturalintelligence",
    "repo": "fast-xml-parser",
    "content": "TITLE: Basic XML Parsing and Building with Fast XML Parser\nDESCRIPTION: Example showing how to use Fast XML Parser to validate XML, parse XML into a JavaScript object, and build XML from a JavaScript object. The code demonstrates the three main components: XMLValidator, XMLParser, and XMLBuilder.\nSOURCE: https://github.com/naturalintelligence/fast-xml-parser/blob/master/docs/v4/1.GettingStarted.md#2025-04-19_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst {XMLParser, XMLBuilder, XMLValidator} = require('fast-xml-parser');\n\nif(XMLValidator.validate()){\n    const parser = new XMLParser();\n    let jsonObj = parser.parse(xmlData);\n    \n    const builder = new XMLBuilder();\n    let sampleXmlData = builder.build(jsonObj);\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing XML to JSON with fast-xml-parser\nDESCRIPTION: Demonstrates how to use the fast-xml-parser library to convert XML data to a JSON object. It includes various configuration options for controlling the parsing process.\nSOURCE: https://github.com/naturalintelligence/fast-xml-parser/blob/master/docs/v3/docs.md#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst jsonObj = parser.parse(xmlData [,options] );\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst parser = require('fast-xml-parser');\nconst he = require('he');\n\nconst options = {\n    attributeNamePrefix : \"@_\",\n    attrNodeName: \"attr\", //default is 'false'\n    textNodeName : \"#text\",\n    ignoreAttributes : true,\n    ignoreNameSpace : false,\n    allowBooleanAttributes : false,\n    parseNodeValue : true,\n    parseAttributeValue : false,\n    trimValues: true,\n    cdataTagName: \"__cdata\", //default is 'false'\n    cdataPositionChar: \"\\\\c\",\n    parseTrueNumberOnly: false,\n    numParseOptions:{\n      hex: true,\n      leadingZeros: true,\n      //skipLike: /\\+[0-9]{10}/\n    },\n    arrayMode: false, //\"strict\"\n    attrValueProcessor: (val, attrName) => he.decode(val, {isAttributeValue: true}),//default is a=>a\n    tagValueProcessor : (val, tagName) => he.decode(val), //default is a=>a\n    stopNodes: [\"parse-me-as-string\"],\n    alwaysCreateTextNode: false\n};\n\nif( parser.validate(xmlData) === true) { //optional (it'll return an object in case it's not valid)\n    let jsonObj = parser.parse(xmlData,options);\n}\n\n// Intermediate obj\nconst tObj = parser.getTraversalObj(xmlData,options);\nlet jsonObj = parser.convertToJson(tObj,options);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntry{\n  let jsonObj = parser.parse(xmlData,options, true);\n}catch(error){\n  console.log(error.message)\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  err: {\n    code: code,\n    msg: message,\n    line: lineNumber,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Parsing XML with XMLParser in JavaScript\nDESCRIPTION: This snippet shows how to use XMLParser to parse XML data. It demonstrates creating a parser instance with options and handling potential parsing errors.\nSOURCE: https://github.com/naturalintelligence/fast-xml-parser/blob/master/docs/v4/4.XMLValidator.md#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst {XMLParser} = require(\"fast-xml-parser\");\nconst parser = new XMLParser(options);\ntry{\n    let result = parser.parse(XMLdata, true);\n}catch(err){\n    //:\n}\n```\n\n----------------------------------------\n\nTITLE: Converting JSON/JS Object to XML with fast-xml-parser\nDESCRIPTION: Shows how to use the j2xParser class from fast-xml-parser to convert JSON or JavaScript objects back to XML format. It includes various configuration options for controlling the XML generation process.\nSOURCE: https://github.com/naturalintelligence/fast-xml-parser/blob/master/docs/v3/docs.md#2025-04-19_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst Parser = require(\"fast-xml-parser\").j2xParser;\n//default options need not to set\nconst defaultOptions = {\n    attributeNamePrefix : \"@_\",\n    attrNodeName: \"@\", //default is false\n    textNodeName : \"#text\",\n    ignoreAttributes : true,\n    cdataTagName: \"__cdata\", //default is false\n    cdataPositionChar: \"\\\\c\",\n    format: false,\n    indentBy: \"  \",\n    suppressEmptyNode: false,\n    tagValueProcessor: a=> he.encode(a, { useNamedReferences: true}),// default is a=>a\n    attrValueProcessor: a=> he.encode(a, {isAttributeValue: isAttribute, useNamedReferences: true}),// default is a=>a\n    rootNodeName: \"element\"\n};\nconst parser = new Parser(defaultOptions);\nconst xml = parser.parse(json_or_js_obj);\n```\n\n----------------------------------------\n\nTITLE: Complete Example of XML Parsing with Configuration in JavaScript\nDESCRIPTION: A complete example demonstrating how to use the XMLParser with custom configuration options. Shows importing required modules, reading XML data, setting up parser options, and executing the parse operation.\nSOURCE: https://github.com/naturalintelligence/fast-xml-parser/blob/master/docs/v6/3.Options.md#2025-04-19_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst XMLParser = require(\"fast-xml-parse/src/v6/XMLParser\");\nconst JsObjOutputBuilder = require(\"fast-xml-parse/src/v6/OutputBuilders/JsObjBuilder\");\nconst JsArrBuilder = require(\"fast-xml-parse/src/v6/OutputBuilders/JsArrBuilder\");\nconst JsMinArrBuilder = require(\"fast-xml-parse/src/v6/OutputBuilders/JsMinArrBuilder\");\n\nconst xmlData = fs.readFileSync(\"sample.xml\").toString();\n\nconst outputBuilderOptions = {\n  onAttribute: (name, value, tagName) => {\n    console.log(name, value, tagName)\n  }\n};\n\nconst parserOptions = {\n  attributes: {\n      ignore: false,\n      booleanType:true\n  },\n  \n  OutputBuilder: new JsObjOutputBuilder(outputBuilderOptions)\n};\n\nconst parser = new XMLParser(parserOptions);\nlet result = parser.parse(xmlData);\n\nconsole.log(JSON.stringify(result,null,4));\n```\n\n----------------------------------------\n\nTITLE: Configuring XML Parser Options in JavaScript\nDESCRIPTION: Configuration object for the XML parser that controls how XML is processed. Includes options for handling namespaces, special tags, attributes, and selective parsing of XML elements.\nSOURCE: https://github.com/naturalintelligence/fast-xml-parser/blob/master/docs/v6/3.Options.md#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  removeNSPrefix: false, // remove NS from tag name or attribute name if true\n  //ignoreRootElement : false,\n  stopNodes: [], //nested tags will not be parsed even for errors\n  // isArray: () => false, //User will set it\n  htmlEntities: false,\n  // skipEmptyListItem: false\n  tags:{\n    unpaired: [],\n    nameFor:{\n      cdata: false,\n      comment: false,\n      text: '#text'\n    },\n    separateTextProperty: false,\n  },\n  attributes:{\n    ignore: false,\n    booleanType: true,\n    entities: true,\n  },\n\n  // select: [\"img[src]\"],\n  // stop: [\"anim\", \"[ads]\"]\n  only: [], // rest tags will be skipped. It will result in flat array\n  hierarchy: false, //will be used when a particular tag is set to be parsed.\n  skip: [], // will be skipped from parse result. on('skip') will be triggered\n\n  select: [], // on('select', tag => tag ) will be called if match\n  stop: [], //given tagPath will not be parsed. innerXML will be set as string value\n  OutputBuilder: new JsArrBuilder(),\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing XMLParser with Custom Options in JavaScript\nDESCRIPTION: Basic setup for the Fast XML Parser with custom options. This shows how to create a parser instance with specific configuration and parse XML data.\nSOURCE: https://github.com/naturalintelligence/fast-xml-parser/blob/master/docs/v4/2.XMLparseOptions.md#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst {XMLParser} = require('fast-xml-parser');\n\nconst options = {\n    ignoreAttributes : false\n};\n\nconst parser = new XMLParser(options);\nlet jsonObj = parser.parse(xmlDataStr);\n```\n\n----------------------------------------\n\nTITLE: Using Fast XML Parser in Node.js\nDESCRIPTION: Example of using the fast-xml-parser library in a Node.js project. It demonstrates importing the library, parsing XML data, and building XML content from a JavaScript object.\nSOURCE: https://github.com/naturalintelligence/fast-xml-parser/blob/master/README.md#2025-04-19_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst { XMLParser, XMLBuilder, XMLValidator} = require(\"fast-xml-parser\");\n\nconst parser = new XMLParser();\nlet jObj = parser.parse(XMLdata);\n\nconst builder = new XMLBuilder();\nconst xmlContent = builder.build(jObj);\n```\n\n----------------------------------------\n\nTITLE: Parsing XML with Default Configuration in JavaScript\nDESCRIPTION: This snippet shows how to use the Fast XML Parser library with default configuration to parse XML data. It imports the XMLParser class, creates a new parser instance, and parses the XML data.\nSOURCE: https://github.com/naturalintelligence/fast-xml-parser/blob/master/docs/v6/1.GettingStarted.md#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst XMLParser = require(\"fast-xml-parser/src/v6/XMLParser\")\nconst parser = new XMLParser();\n//read xmlData your own \nlet result = parser.parse(xmlData, true);\n```\n\n----------------------------------------\n\nTITLE: Parsing XML with Custom Output Builder in JavaScript\nDESCRIPTION: This snippet demonstrates how to use a custom output builder with the Fast XML Parser. It imports the JsObjOutputBuilder, creates a new parser instance with the custom builder, and parses the XML data.\nSOURCE: https://github.com/naturalintelligence/fast-xml-parser/blob/master/docs/v6/1.GettingStarted.md#2025-04-19_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst JsObjOutputBuilder = require(\"fast-xml-parser/src/v6/OutputBuilders/JsObjBuilder\");\n\nconst parser = new XMLParser({\n    OutputBuilder: new JsObjOutputBuilder()\n});\n//read xmlData your own \nlet result = parser.parse(xmlData, true);\n```\n\n----------------------------------------\n\nTITLE: Parsing HTML to JavaScript Object with Fast XML Parser\nDESCRIPTION: JavaScript code showing the necessary configuration options for the XMLParser to properly parse HTML documents, including settings for unpaired tags, stop nodes, and entity processing.\nSOURCE: https://github.com/naturalintelligence/fast-xml-parser/blob/master/docs/v4/6.HTMLParsing.md#2025-04-19_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst parsingOptions = {\n    ignoreAttributes: false,\n    // preserveOrder: true,\n    unpairedTags: [\"hr\", \"br\", \"link\", \"meta\"],\n    stopNodes : [ \"*.pre\", \"*.script\"],\n    processEntities: true,\n    htmlEntities: true\n  };\n  const parser = new XMLParser(parsingOptions);\n  parser.parse(html);\n```\n\n----------------------------------------\n\nTITLE: Validating XML with Unpaired Tags in JavaScript\nDESCRIPTION: This snippet demonstrates how to validate XML data containing unpaired tags using XMLValidator. It shows how to specify unpaired tags in the options object.\nSOURCE: https://github.com/naturalintelligence/fast-xml-parser/blob/master/docs/v4/4.XMLValidator.md#2025-04-19_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst xmlData = `<parent><extra></parent>`;\nconst result = XMLValidator.validate( xmlData, {\n  unpairedTags: [\"extra\"]\n});\n```\n\n----------------------------------------\n\nTITLE: Building HTML from JavaScript Object with Fast XML Parser\nDESCRIPTION: Code that demonstrates how to convert the JavaScript object back to an HTML document using XMLBuilder. It shows the configuration options needed for both parsing and building processes.\nSOURCE: https://github.com/naturalintelligence/fast-xml-parser/blob/master/docs/v4/6.HTMLParsing.md#2025-04-19_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nconst parsingOptions = {\n    ignoreAttributes: false,\n    preserveOrder: true,\n    unpairedTags: [\"hr\", \"br\", \"link\", \"meta\"],\n    stopNodes : [ \"*.pre\", \"*.script\"],\n    processEntities: true,\n    htmlEntities: true\n  };\n  const parser = new XMLParser(parsingOptions);\n  let result = parser.parse(html);\n\n  const builderOptions = {\n    ignoreAttributes: false,\n    format: true,\n    preserveOrder: true,\n    suppressEmptyNode: true,\n    unpairedTags: [\"hr\", \"br\", \"link\", \"meta\"],\n    stopNodes : [ \"*.pre\", \"*.script\"],\n  }\n  const builder = new XMLBuilder(builderOptions);\n  const output = builder.build(result);\n```\n\n----------------------------------------\n\nTITLE: Parsing XML with Unpaired Tags in JavaScript using XMLParser\nDESCRIPTION: Example of parsing XML data that contains unpaired tags by providing their list in the options. Unpaired tags appear as empty strings in the output JSON and cannot be used as closing tags.\nSOURCE: https://github.com/naturalintelligence/fast-xml-parser/blob/master/docs/v4/2.XMLparseOptions.md#2025-04-19_snippet_21\n\nLANGUAGE: js\nCODE:\n```\nconst xmlDataStr = `\n    <rootNode>\n        <tag>value</tag>\n        <empty />\n        <unpaired>\n        <unpaired />\n        <unpaired>\n    </rootNode>`;  \n\nconst options = {\n    unpairedTags: [\"unpaired\"]\n};\nconst parser = new XMLParser(options);\nconst output = parser.parse(xmlDataStr);\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"rootNode\": {\n        \"tag\": \"value\",\n        \"empty\": \"\",\n        \"unpaired\": [ \"\", \"\", \"\"]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Value Parser Configuration in fast-xml-parser v6\nDESCRIPTION: Demonstrates how to set custom value parsers in fast-xml-parser v6. This example includes a custom number parser with options for hexadecimal, leading zeros, and e-notation parsing.\nSOURCE: https://github.com/naturalintelligence/fast-xml-parser/blob/master/docs/v6/5.ValueParsers.md#2025-04-19_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst outputBuilderOptions = {\n  tags: {\n    valueParsers: [\n      \"trim\",\n      \"boolean\",\n      new numberParser({\n        hex: true,\n        leadingZeros: true,\n        eNotation: true\n      }),\n      \"currency\"\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Transforming XML Tags with updateTag Option in XMLParser\nDESCRIPTION: Demonstrates how to use the updateTag function to modify tag names, attributes, or exclude tags from parsing results. The example shows renaming 'a' to 'A', modifying attributes, and removing the 'b' tag by returning false.\nSOURCE: https://github.com/naturalintelligence/fast-xml-parser/blob/master/docs/v4/2.XMLparseOptions.md#2025-04-19_snippet_22\n\nLANGUAGE: js\nCODE:\n```\nconst xmlDataStr = `\n    <rootNode>\n        <a at=\"val\">value</a>\n        <b></b>\n    </rootNode>`;  \n\nconst options = {\n    attributeNamePrefix: \"\",\n    ignoreAttributes:    false,\n    updateTag(tagName, jPath, attrs){\n        attrs[\"At\"] = \"Home\";\n        delete attrs[\"at\"];\n        \n        if(tagName === \"a\") return \"A\";\n        else if(tagName === \"b\") return false;\n    }\n};\nconst parser = new XMLParser(options);\nconst output = parser.parse(xmlDataStr);\n```\n\n----------------------------------------\n\nTITLE: Parsing XML with PI Tags\nDESCRIPTION: JavaScript code demonstrating how to configure and use XMLParser to process XML with PI tags. Shows parser initialization and parsing process.\nSOURCE: https://github.com/naturalintelligence/fast-xml-parser/blob/master/docs/v4/7.PITags.md#2025-04-19_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst options = {\n    ignoreAttributes: false,\n    format: true,\n    preserveOrder: true,\n    allowBooleanAttributes: true\n};\nconst parser = new XMLParser(options);\nlet result = parser.parse(xmlData);\n\n// const builder = new XMLBuilder(options);\n// const output = builder.build(result);\n```\n\n----------------------------------------\n\nTITLE: Configuring Number Parsing in XML Parser\nDESCRIPTION: Demonstrates how to configure number parsing options using strnum library with features like handling leading zeros, hex values, and custom number formats.\nSOURCE: https://github.com/naturalintelligence/fast-xml-parser/blob/master/docs/v4/2.XMLparseOptions.md#2025-04-19_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nconst xmlDataStr = `\n    <root>\n        <a>-0x2f</a>\n        <a>006</a>\n        <a>6.00</a>\n        <a>-01.0E2</a>\n        <a>+1212121212</a>\n    </root>`;\n\nconst options = {\n    numberParseOptions: {\n        leadingZeros: true,\n        hex: true,\n        skipLike: /\\+[0-9]{10}/,\n        // eNotation: false\n    }\n};\nconst parser = new XMLParser(options);\nconst output = parser.parse(xmlDataStr);\n```\n\n----------------------------------------\n\nTITLE: Parsing and Building XML with alwaysCreateTextNode option\nDESCRIPTION: Demonstrates using XMLParser with the alwaysCreateTextNode option to parse XML data, then rebuilding it with XMLBuilder. This example shows that using alwaysCreateTextNode doesn't impact the XMLBuilder result.\nSOURCE: https://github.com/naturalintelligence/fast-xml-parser/blob/master/docs/v4/3.XMLBuilder.md#2025-04-19_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n   const XMLdata = `\n      <car>\n        <color>purple</color>\n        <type>minivan</type>\n        <registration>2020-02-03</registration>\n        <capacity>7</capacity>\n      </car>`;\n\n      const parser = new XMLParser({\n          alwaysCreateTextNode: true,\n      });\n      let result = parser.parse(XMLdata);\n      // console.log(JSON.stringify(result, null,4));\n\n      const builder = new XMLBuilder({ format: true });\n      const output = builder.build(result);\n```\n\nLANGUAGE: xml\nCODE:\n```\n<car>\n  <color>purple</color>\n  <type>minivan</type>\n  <registration>2020-02-03</registration>\n  <capacity>7</capacity>\n</car>\n```\n\n----------------------------------------\n\nTITLE: Configuring XML Output Builder Options in JavaScript\nDESCRIPTION: Configuration options for the Output Builder that control the structure and formatting of the parsed XML data. Includes settings for text handling, value parsers, and attribute formatting.\nSOURCE: https://github.com/naturalintelligence/fast-xml-parser/blob/master/docs/v6/3.Options.md#2025-04-19_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  preserveOrder: false, // If set 'join' value parser will be used for tag values\n  nameFor:{\n    text: \"#text\",\n    comment: \"\",\n    cdata: \"\",\n  },\n  // onTagClose: () => {},\n  // onAttribute: () => {},\n  piTag: false,\n  declaration: false, //\"?xml\"\n  tags: {\n    valueParsers: [\n      // \"trim\",\n      // \"boolean\",\n      // \"number\",\n      // \"currency\",\n      // \"date\",\n    ]\n  },\n  attributes:{\n    prefix: \"@_\",\n    suffix: \"\",\n    groupBy: \"\",\n    \n    valueParsers: [\n      // \"trim\",\n      // \"boolean\",\n      // \"number\",\n      // \"currency\",\n      // \"date\",\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing and Building XML with preserveOrder option\nDESCRIPTION: Illustrates using XMLParser with the preserveOrder option to parse XML data, then rebuilding it with XMLBuilder using the same option. When preserveOrder is used with the parser, it must also be used with the builder.\nSOURCE: https://github.com/naturalintelligence/fast-xml-parser/blob/master/docs/v4/3.XMLBuilder.md#2025-04-19_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n   const XMLdata = `\n      <car>\n        <color>purple</color>\n        <type>minivan</type>\n        <registration>2020-02-03</registration>\n        <capacity>7</capacity>\n      </car>`;\n\n      const parser = new XMLParser({\n          preserveOrder: true\n      });\n      let result = parser.parse(XMLdata);\n      // console.log(JSON.stringify(result, null,4));\n\n      const builder = new XMLBuilder({ preserveOrder: true });\n      const output = builder.build(result);\n```\n\nLANGUAGE: xml\nCODE:\n```\n<car>\n  <color>purple</color>\n  <type>minivan</type>\n  <registration>2020-02-03</registration>\n  <capacity>7</capacity>\n</car>\n```\n\n----------------------------------------\n\nTITLE: Capturing XML Node Metadata with XMLParser\nDESCRIPTION: Shows how to enable metadata capture for XML nodes and access position information using a Symbol. This feature adds metadata like startIndex to each node, which can be accessed using XMLParser.getMetaDataSymbol().\nSOURCE: https://github.com/naturalintelligence/fast-xml-parser/blob/master/docs/v4/2.XMLparseOptions.md#2025-04-19_snippet_23\n\nLANGUAGE: js\nCODE:\n```\nconst parser = new XMLParser({ignoreAttributes: false, captureMetaData: true});\nconst jsonObj = parser.parse(`<root><thing name=\"zero\"/><thing name=\"one\"/></root>`);\nconst META_DATA_SYMBOL = XMLParser.getMetaDataSymbol();\n// get the char offset of the start of the tag for <thing name=\"zero\"/>\nconst thingZero = jsonObj.root.thing[0];\nconst thingZeroMetaData = thingZero[META_DATA_SYMBOL];\nconst thingZeroStartIndex = thingZeroMetaData.startIndex; // 6\n```\n\n----------------------------------------\n\nTITLE: Parsing and Building XML with custom attribute handling\nDESCRIPTION: Shows how to use XMLParser with custom attribute options to parse XML data containing attributes, then rebuilding it with XMLBuilder using the same configuration options. This demonstrates that attribute handling options need to be consistent between parser and builder.\nSOURCE: https://github.com/naturalintelligence/fast-xml-parser/blob/master/docs/v4/3.XMLBuilder.md#2025-04-19_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst XMLdata = `\n<car>\n    <color alpha=\"7\">purple</color>\n    <type>minivan</type>\n    <registration>2020-02-03</registration>\n    <capacity>7</capacity>\n</car>`;\n\nconst options = {\n    ignoreAttributes: false,\n    attributeNamePrefix: \"@@\",\n    format: true\n};\nconst parser = new XMLParser(options);\nlet result = parser.parse(XMLdata);\n// console.log(JSON.stringify(result, null,4));\n\nconst builder = new XMLBuilder(options);\nconst output = builder.build(result);\n```\n\nLANGUAGE: xml\nCODE:\n```\n<car>\n  <color alpha=\"7\">purple</color>\n  <type>minivan</type>\n  <registration>2020-02-03</registration>\n  <capacity>7</capacity>\n</car>\n```\n\n----------------------------------------\n\nTITLE: External Entity Configuration\nDESCRIPTION: Shows how to set up external entities programmatically without using DOCTYPE declarations, including the ability to override default entities.\nSOURCE: https://github.com/naturalintelligence/fast-xml-parser/blob/master/docs/v4/5.Entities.md#2025-04-19_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nconst xmlData = `<note>&unknown;&#xD;last</note> `;\n\nconst parser = new XMLParser();\nparser.addEntity(\"#xD\", \"\\r\"); // &unknown;\\rlast\nlet result = parser.parse(xmlData);\n```\n\n----------------------------------------\n\nTITLE: Parsing and Building XML with isArray option\nDESCRIPTION: Shows how to use XMLParser with the isArray option to parse XML data, then rebuilding it with XMLBuilder. The example demonstrates that using isArray doesn't impact the XMLBuilder result in this specific case.\nSOURCE: https://github.com/naturalintelligence/fast-xml-parser/blob/master/docs/v4/3.XMLBuilder.md#2025-04-19_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n   const XMLdata = `\n      <car>\n        <color>purple</color>\n        <type>minivan</type>\n        <registration>2020-02-03</registration>\n        <capacity>7</capacity>\n      </car>`;\n\n      const parser = new XMLParser({\n          isArray: (tagName, jPath, isLeafNode, isAttribute) => {\n          if(isLeafNode) return true;\n        }\n      });\n      let result = parser.parse(XMLdata);\n      // console.log(JSON.stringify(result, null,4));\n\n      const builder = new XMLBuilder();\n      const output = builder.build(result);\n```\n\nLANGUAGE: xml\nCODE:\n```\n<car>\n  <color>purple</color>\n  <type>minivan</type>\n  <registration>2020-02-03</registration>\n  <capacity>7</capacity>\n</car>\n```\n\n----------------------------------------\n\nTITLE: Parsing XML with Always Creating Text Nodes\nDESCRIPTION: Example showing how to force the parser to always create text nodes for tag values regardless of structure.\nSOURCE: https://github.com/naturalintelligence/fast-xml-parser/blob/master/docs/v4/2.XMLparseOptions.md#2025-04-19_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"root\": {\n        \"a\": [\n            {\n                \"#text\": \"wow\"\n            },\n            {\n                \"c\": {\n                    \"#text\": \"unlimited\"\n                },\n                \"#text\": \"wow again\"\n            }\n        ],\n        \"b\": {\n            \"#text\": \"wow phir se\"\n        },\n        \"@_a\": \"nice\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using fast-xml-parser in Browser\nDESCRIPTION: Demonstrates how to use the fast-xml-parser library in a web browser environment to validate and parse XML data.\nSOURCE: https://github.com/naturalintelligence/fast-xml-parser/blob/master/docs/v3/docs.md#2025-04-19_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst result = parser.validate(xmlData);\nif (result !== true) console.log(result.err);\nconst jsonObj = parser.parse(xmlData);\n```\n\n----------------------------------------\n\nTITLE: Parsing XML without Always Creating Text Nodes\nDESCRIPTION: Example demonstrating default behavior where text nodes are only created when necessary, otherwise values are assigned directly.\nSOURCE: https://github.com/naturalintelligence/fast-xml-parser/blob/master/docs/v4/2.XMLparseOptions.md#2025-04-19_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst xmlDataStr = `\n    <root a=\"nice\" checked>\n        <a>wow</a>\n        <a>\n          wow again\n          <c> unlimited </c>\n        </a>\n        <b>wow phir se</b>\n    </root>`;  \n\nconst options = {\n    ignoreAttributes: false,\n    // alwaysCreateTextNode: false\n};\nconst parser = new XMLParser(options);\nconst output = parser.parse(xmlDataStr);\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"root\": {\n        \"a\": [\n            \"wow\",\n            {\n                \"c\": \"unlimited\",\n                \"#text\": \"wow again\"\n            }\n        ],\n        \"b\": \"wow phir se\",\n        \"@_a\": \"nice\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Preserving XML Tag Order\nDESCRIPTION: Demonstrates how to maintain the original order of XML tags in the parsed output using preserveOrder option.\nSOURCE: https://github.com/naturalintelligence/fast-xml-parser/blob/master/docs/v4/2.XMLparseOptions.md#2025-04-19_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nconst XMLdata = `\n    <!--Students grades are uploaded by months-->\n    <class_list standard=\"3\">\n       <student>\n         <!--Student details-->\n         <!--A second comment-->\n         <name>Tanmay</name>\n         <grade>A</grade>\n       </student>\n    </class_list>`;\n\n    const options = {\n        commentPropName: \"#comment\",\n        preserveOrder: true\n    };\n    const parser = new XMLParser(options);\n    let result = parser.parse(XMLdata);\n```\n\n----------------------------------------\n\nTITLE: Initializing XMLBuilder in JavaScript\nDESCRIPTION: Demonstrates how to import and initialize the XMLBuilder class from fast-xml-parser with basic options.\nSOURCE: https://github.com/naturalintelligence/fast-xml-parser/blob/master/docs/v4/3.XMLBuilder.md#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst {XMLBuilder} = require('fast-xml-parser');\n\nconst options = {\n    ignoreAttributes : false\n};\n\nconst builder = new XMLBuilder(options);\nlet xmlDataStr = builder.build(jObj);\n```\n\n----------------------------------------\n\nTITLE: Configuring XML Namespace Handling\nDESCRIPTION: Shows how to handle XML namespaces by removing namespace prefixes from tags and attributes.\nSOURCE: https://github.com/naturalintelligence/fast-xml-parser/blob/master/docs/v4/2.XMLparseOptions.md#2025-04-19_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nconst xmlDataStr = `<root some:a=\"nice\" ><any:a>wow</any:a></root>`;\n\nconst options = {\n    ignoreAttributes: false,\n    attributeNamePrefix : \"@_\",\n    removeNSPrefix: true\n};\nconst parser = new XMLParser(options);\nconst output = parser.parse(xmlDataStr);\n```\n\n----------------------------------------\n\nTITLE: Parsing XML Attribute Values\nDESCRIPTION: Shows how to configure attribute value parsing including boolean and numeric attributes with validation options.\nSOURCE: https://github.com/naturalintelligence/fast-xml-parser/blob/master/docs/v4/2.XMLparseOptions.md#2025-04-19_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nconst xmlDataStr = `\n    <root a=\"nice\" checked enabled=\"true\" int=\"32\" int=\"34\">\n        <a>wow</a>\n    </root>`;\n\nconst options = {\n    ignoreAttributes: false,\n    // parseAttributeValue: true,\n    allowBooleanAttributes: true\n};\nconst parser = new XMLParser(options);\nconst output = parser.parse(xmlDataStr);\n```\n\n----------------------------------------\n\nTITLE: Validating XML with XMLValidator in JavaScript\nDESCRIPTION: This snippet demonstrates how to use XMLValidator to validate XML data directly. It shows how to call the validate method with XML data and options.\nSOURCE: https://github.com/naturalintelligence/fast-xml-parser/blob/master/docs/v4/4.XMLValidator.md#2025-04-19_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst {XMLValidator} = require(\"fast-xml-parser\");\nconst result = XMLValidator.validate(xmlData, {\n    allowBooleanAttributes: true\n});\n```\n\n----------------------------------------\n\nTITLE: Using attributeValueProcessor\nDESCRIPTION: Example showing the attributeValueProcessor option which is similar to tagValueProcessor but applied to attributes.\nSOURCE: https://github.com/naturalintelligence/fast-xml-parser/blob/master/docs/v4/2.XMLparseOptions.md#2025-04-19_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n:\nconst options = {\n    ignoreAttributes: false,\n    attributeValueProcessor: (name, val, jPath) => {\n        :\n    }\n};\n:\n```\n\n----------------------------------------\n\nTITLE: Parsing XML with Default Parsers in fast-xml-parser\nDESCRIPTION: Demonstrates how to parse XML data using the default parsers in fast-xml-parser. It includes the input XML and the resulting parsed JavaScript object.\nSOURCE: https://github.com/naturalintelligence/fast-xml-parser/blob/master/docs/v6/5.ValueParsers.md#2025-04-19_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst JsObjOutputBuilder = require(\"fast-xml-parser/src/v6/OutputBuilders/JsObjBuilder\");\n\nconst xmlData = `<root>\n  <int>   1234    </int>\n  <str>4567</str>\n  <int>str 6789</int>\n  <bool>true  </bool>\n</root>`\n\nconst parser = new XMLParser({\n    OutputBuilder: new JsObjOutputBuilder()\n});\n//read xmlData your own \nlet result = parser.parse(xmlData, true);\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"root\": {\n    \"int\": [\n      1234,\n      \"str 6789\"\n    ],\n    \"str\": 4567,\n    \"bool\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using isArray Option for Custom Array Parsing\nDESCRIPTION: Example showing how to force specific tags to be parsed as arrays even when they appear only once in the XML.\nSOURCE: https://github.com/naturalintelligence/fast-xml-parser/blob/master/docs/v4/2.XMLparseOptions.md#2025-04-19_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst xmlDataStr = `\n    <root a=\"nice\" checked>\n        <a>wow</a>\n        <a>\n          wow again\n          <c> unlimited </c>\n        </a>\n        <b>wow phir se</b>\n    </root>`;\n\nconst alwaysArray = [\n    \"root.a.c\",\n    \"root.b\"\n];\n      \n\nconst options = {\n    ignoreAttributes: false,\n    //name: is either tagname, or attribute name\n    //jPath: upto the tag name\n    isArray: (name, jpath, isLeafNode, isAttribute) => { \n        if( alwaysArray.indexOf(jpath) !== -1) return true;\n    }\n};\nconst parser = new XMLParser(options);\nconst output = parser.parse(xmlDataStr);\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"root\": {\n        \"@_a\": \"nice\",\n        \"a\": [\n            \"wow\",\n            {\n                \"#text\": \"wow again\",\n                \"c\": [\n                    \"unlimited\"\n                ]\n            }\n        ],\n        \"b\": [\n            \"wow phir se\"\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Default Parsers in fast-xml-parser\nDESCRIPTION: Shows how to override the default parsers in fast-xml-parser by specifying a custom sequence of parsers. In this example, only the 'number' parser is used.\nSOURCE: https://github.com/naturalintelligence/fast-xml-parser/blob/master/docs/v6/5.ValueParsers.md#2025-04-19_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst JsObjOutputBuilder = require(\"fast-xml-parser/src/v6/OutputBuilders/JsObjBuilder\");\n\nconst xmlData = `<root>\n  <int>   1234    </int>\n  <str>4567</str>\n  <int>str 6789</int>\n  <bool>true  </bool>\n</root>`\n\nconst parser = new XMLParser({\n    OutputBuilder: new JsObjOutputBuilder({\n      tags: {\n        valueParsers: [\"number\"]\n      }\n    })\n});\n//read xmlData your own \nlet result = parser.parse(xmlData, true);\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"root\": {\n        \"int\": [\n            1234,\n            \"str 6789\"\n        ],\n        \"str\": 4567,\n        \"bool\": \"true\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Building XML from Parsed Object\nDESCRIPTION: Configuration and code for converting the parsed JavaScript object back to XML format using XMLBuilder.\nSOURCE: https://github.com/naturalintelligence/fast-xml-parser/blob/master/docs/v4/7.PITags.md#2025-04-19_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst options = {\n    ignoreAttributes: false,\n    preserveOrder: true,\n    allowBooleanAttributes: true,\n    suppressBooleanAttributes: true\n};\nconst builder = new XMLBuilder(options);\nconst output = builder.build(result);\n```\n\n----------------------------------------\n\nTITLE: XML to Object using JsObjBuilder\nDESCRIPTION: Demonstrates the object-style output format that creates a nested object structure with attributes prefixed with @_. This format is most similar to the original XML structure.\nSOURCE: https://github.com/naturalintelligence/fast-xml-parser/blob/master/docs/v6/4.OutputBuilders.md#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"soap:Envelope\": {\n        \"@_xmlns:soap\": \"http://schemas.xmlsoap.org/soap/envelope/\",\n        \"soap:Body\": {\n            \"rpt:loadReportFileResponseElem\": {\n                \"@_xmlns:s\": \"http://bus.x.com/common/support/v1\",\n                \"@_xmlns:rpt\": \"http://bus.x.com/service/statement/v1\",\n                \"s:code\": 0,\n                \"s:responseTime\": 2588,\n                \"s:responseDbTime\": 1893,\n                \"s:requestId\": \"6b408fd09eb211e7a0807e34820340ec\",\n                \"s:route\": \"172.16.x.x:9192\",\n                \"rpt:result\": {\n                    \"rpt:file\": \"<soap:Envelope xmlns:soap=\\\"http://schemas.xmlsoap.org/soap/envelope/\\\">\\n    <soap:Body>\\n        <rpt:loadReportFileResponseElem\\n                xmlns:s=\\\"http://bus.x.com/common/support/v1\\\"\\n                xmlns:rpt=\\\"http://bus.x.com/service/statement/v1\\\">\\n            <s:code>0</s:code>\\n            <s:responseTime>2588</s:responseTime>\\n            <s:responseDbTime>1893</s:responseDbTime>\\n            <s:requestId>6b408fd09eb211e7a0807e34820340ec</s:requestId>\\n            <s:route>172.16.x.x:9192</s:route>\\n            <rpt:result>\\n <rpt:file></rpt:file>\\n            </rpt:result>\\n        </rpt:loadReportFileResponseElem>\\n    </soap:Body>\\n</soap:Envelope>\"\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: XMLValidator Error Object Structure in JavaScript\nDESCRIPTION: This snippet shows the structure of the error object returned by XMLValidator when issues are found in the XML data. It includes error code, message, line, and column information.\nSOURCE: https://github.com/naturalintelligence/fast-xml-parser/blob/master/docs/v4/4.XMLValidator.md#2025-04-19_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  err: {\n    code: string;\n    msg: string,\n    line: number,\n    col: number\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Suppressing Empty Nodes in XML Builder\nDESCRIPTION: Shows how to use the suppressEmptyNode option to parse tags with no text value as empty tags in the resulting XML.\nSOURCE: https://github.com/naturalintelligence/fast-xml-parser/blob/master/docs/v4/3.XMLBuilder.md#2025-04-19_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst builder = new XMLBuilder({\n    arrayNodeName: \"any\", //not effective\n    suppressEmptyNode: true\n});\nconst output = builder.build({\n    a: 32,\n    b: \"\"\n});\n```\n\n----------------------------------------\n\nTITLE: Processing CDATA in XML Builder\nDESCRIPTION: Demonstrates how to use the cdataPropName option to recognize and transform CDATA properties in a JavaScript object to XML CDATA sections.\nSOURCE: https://github.com/naturalintelligence/fast-xml-parser/blob/master/docs/v4/3.XMLBuilder.md#2025-04-19_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst options = {\n    processEntities:false,\n    format: true,\n    ignoreAttributes: false,\n    cdataPropName: \"phone\"\n};\n\nconst builder = new XMLBuilder(options);\nconst xmlOutput = builder.build(input);\n```\n\n----------------------------------------\n\nTITLE: Handling Boolean Attributes in XML Builder\nDESCRIPTION: Demonstrates how to use the suppressBooleanAttributes option to parse attributes with a value of 'true' without their value in the resulting XML.\nSOURCE: https://github.com/naturalintelligence/fast-xml-parser/blob/master/docs/v4/3.XMLBuilder.md#2025-04-19_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst options = {\n    ignoreAttributes: false,\n    preserveOrder: true,\n    allowBooleanAttributes: true,\n    suppressBooleanAttributes: true\n};\nconst builder = new XMLBuilder(options);\nconst output = builder.build(result);\n```\n\n----------------------------------------\n\nTITLE: XML to Object using JsArrBuilder\nDESCRIPTION: Shows the array-based output format that represents XML elements with explicit tagname and child properties. Attributes are stored in a separate :@ property.\nSOURCE: https://github.com/naturalintelligence/fast-xml-parser/blob/master/docs/v6/4.OutputBuilders.md#2025-04-19_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"tagname\": \"soap:Envelope\",\n    \"child\": [\n        {\n            \"tagname\": \"soap:Body\",\n            \"child\": [\n                {\n                    \"tagname\": \"rpt:loadReportFileResponseElem\",\n                    \"child\": [\n                        {\n                            \"tagname\": \"s:code\",\n                            \"child\": [\n                                {\n                                    \"#text\": 0\n                                }\n                            ]\n                        },\n                        {\n                            \"tagname\": \"s:responseTime\",\n                            \"child\": [\n                                {\n                                    \"#text\": 2588\n                                }\n                            ]\n                        },\n                        {\n                            \"tagname\": \"s:responseDbTime\",\n                            \"child\": [\n                                {\n                                    \"#text\": 1893\n                                }\n                            ]\n                        },\n                        {\n                            \"tagname\": \"s:requestId\",\n                            \"child\": [\n                                {\n                                    \"#text\": \"6b408fd09eb211e7a0807e34820340ec\"\n                                }\n                            ]\n                        },\n                        {\n                            \"tagname\": \"s:route\",\n                            \"child\": [\n                                {\n                                    \"#text\": \"172.16.x.x:9192\"\n                                }\n                            ]\n                        },\n                        {\n                            \"tagname\": \"rpt:result\",\n                            \"child\": [\n                                {\n                                    \"tagname\": \"rpt:file\",\n                                    \"child\": [\n                                        {\n                                            \"#text\": \"<soap:Envelope xmlns:soap=\\\"http://schemas.xmlsoap.org/soap/envelope/\\\">\\n    <soap:Body>\\n        <rpt:loadReportFileResponseElem\\n                xmlns:s=\\\"http://bus.x.com/common/support/v1\\\"\\n                xmlns:rpt=\\\"http://bus.x.com/service/statement/v1\\\">\\n            <s:code>0</s:code>\\n            <s:responseTime>2588</s:responseTime>\\n            <s:responseDbTime>1893</s:responseDbTime>\\n            <s:requestId>6b408fd09eb211e7a0807e34820340ec</s:requestId>\\n            <s:route>172.16.x.x:9192</s:route>\\n            <rpt:result>\\n <rpt:file></rpt:file>\\n            </rpt:result>\\n        </rpt:loadReportFileResponseElem>\\n    </soap:Body>\\n</soap:Envelope>\"\n                                        }\n                                    ]\n                                }\n                            ]\n                        }\n                    ],\n                    \":@\": {\n                        \"@_xmlns:s\": \"http://bus.x.com/common/support/v1\",\n                        \"@_xmlns:rpt\": \"http://bus.x.com/service/statement/v1\"\n                    }\n                }\n            ]\n        }\n    ],\n    \":@\": {\n        \"@_xmlns:soap\": \"http://schemas.xmlsoap.org/soap/envelope/\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Processing Comments in XML Builder\nDESCRIPTION: Shows how to use the commentPropName option to recognize and transform comment properties in a JavaScript object to XML comments.\nSOURCE: https://github.com/naturalintelligence/fast-xml-parser/blob/master/docs/v4/3.XMLBuilder.md#2025-04-19_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst options = {\n    processEntities:false,\n    format: true,\n    ignoreAttributes: false,\n    commentPropName: \"phone\"\n};\n\nconst builder = new XMLBuilder(options);\nconst xmlOutput = builder.build(input);\n```\n\n----------------------------------------\n\nTITLE: XML to Object using JsMinArrBuilder\nDESCRIPTION: Demonstrates the minimal array-based output format that combines aspects of both object and array representations. Each element is an object with arrays of child elements.\nSOURCE: https://github.com/naturalintelligence/fast-xml-parser/blob/master/docs/v6/4.OutputBuilders.md#2025-04-19_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"soap:Envelope\": [\n        {\n            \"soap:Body\": [\n                {\n                    \"rpt:loadReportFileResponseElem\": [\n                        {\n                            \"s:code\": [\n                                {\n                                    \"#text\": 0\n                                }\n                            ]\n                        },\n                        {\n                            \"s:responseTime\": [\n                                {\n                                    \"#text\": 2588\n                                }\n                            ]\n                        },\n                        {\n                            \"s:responseDbTime\": [\n                                {\n                                    \"#text\": 1893\n                                }\n                            ]\n                        },\n                        {\n                            \"s:requestId\": [\n                                {\n                                    \"#text\": \"6b408fd09eb211e7a0807e34820340ec\"\n                                }\n                            ]\n                        },\n                        {\n                            \"s:route\": [\n                                {\n                                    \"#text\": \"172.16.x.x:9192\"\n                                }\n                            ]\n                        },\n                        {\n                            \"rpt:result\": [\n                                {\n                                    \"rpt:file\": [\n                                        {\n                                            \"#text\": \"<soap:Envelope xmlns:soap=\\\"http://schemas.xmlsoap.org/soap/envelope/\\\">\\n    <soap:Body>\\n        <rpt:loadReportFileResponseElem\\n                xmlns:s=\\\"http://bus.x.com/common/support/v1\\\"\\n                xmlns:rpt=\\\"http://bus.x.com/service/statement/v1\\\">\\n            <s:code>0</s:code>\\n            <s:responseTime>2588</s:responseTime>\\n            <s:responseDbTime>1893</s:responseDbTime>\\n            <s:requestId>6b408fd09eb211e7a0807e34820340ec</s:requestId>\\n            <s:route>172.16.x.x:9192</s:route>\\n            <rpt:result>\\n <rpt:file></rpt:file>\\n            </rpt:result>\\n        </rpt:loadReportFileResponseElem>\\n    </soap:Body>\\n</soap:Envelope>\"\n                                        }\n                                    ]\n                                }\n                            ]\n                        }\n                    ],\n                    \":@\": {\n                        \"@_xmlns:s\": \"http://bus.x.com/common/support/v1\",\n                        \"@_xmlns:rpt\": \"http://bus.x.com/service/statement/v1\"\n                    }\n                }\n            ]\n        }\n    ],\n    \":@\": {\n        \"@_xmlns:soap\": \"http://schemas.xmlsoap.org/soap/envelope/\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting arrayNodeName for XML Building in JavaScript\nDESCRIPTION: Shows how to use the arrayNodeName option when building XML from an array of objects. This option helps in naming the individual array elements in the resulting XML.\nSOURCE: https://github.com/naturalintelligence/fast-xml-parser/blob/master/docs/v4/3.XMLBuilder.md#2025-04-19_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst cars = [\n    {\n        \"color\": \"purple\",\n        \"type\": \"minivan\",\n        \"registration\": \"2020-02-03\",\n        \"capacity\": 7\n        },\n        {\n        \"color\": \"orange\",\n        \"type\": \"SUV\",\n        \"registration\": \"2021-05-17\",\n        \"capacity\": 4\n        },\n];\nconst builder = new XMLBuilder({\n    arrayNodeName: \"car\"\n});\nconst output = builder.build(cars);\n```\n\n----------------------------------------\n\nTITLE: Processing CDATA with cdataPropName\nDESCRIPTION: Example showing how to keep CDATA separate from text content by specifying a custom property name.\nSOURCE: https://github.com/naturalintelligence/fast-xml-parser/blob/master/docs/v4/2.XMLparseOptions.md#2025-04-19_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst options = {\n    cdataPropName:     \"__cdata\"\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"a\": {\n        \"name\": {\n            \"__cdata\": [\n                \"<some>Jack</some>\",\n                \"Jack\"\n            ],\n            \"#text\": \"name:\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Selective Attribute Ignoring with Callback Function\nDESCRIPTION: Example showing how to ignore attributes based on custom logic using a callback function.\nSOURCE: https://github.com/naturalintelligence/fast-xml-parser/blob/master/docs/v4/2.XMLparseOptions.md#2025-04-19_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst options = {\n    attributeNamePrefix: \"$\",\n    ignoreAttributes: (aName, jPath) => aName.startsWith('ns:') || jPath === 'tag.tag2',\n    parseAttributeValue: true\n};\nconst parser = new XMLParser(options);\nconst output = parser.parse(xmlData);\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"tag\": {\n        \"$ns2:attr3\": \"a3-value\",\n        \"$ns2:attr4\": \"a4-value\",\n        \"tag2\": \"value\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Processing XML Comments\nDESCRIPTION: Example showing how to preserve and parse XML comments by specifying a comment property name.\nSOURCE: https://github.com/naturalintelligence/fast-xml-parser/blob/master/docs/v4/2.XMLparseOptions.md#2025-04-19_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst xmlDataStr = `\n    <!--Students grades are uploaded by months-->\n    <class_list>\n       <student>\n         <!--Student details-->\n         <!--A second comment-->\n         <name>Tanmay</name>\n         <grade>A</grade>\n       </student>\n    </class_list>`;  \n\nconst options = {\n    commentPropName: \"#comment\"\n};\nconst parser = new XMLParser(options);\nconst output = parser.parse(xmlDataStr);\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"#comment\": \"Students grades are uploaded by months\",\n    \"class_list\": {\n        \"student\": {\n            \"#comment\": [\n                \"Student details\",\n                \"A second comment\"\n            ],\n            \"name\": \"Tanmay\",\n            \"grade\": \"A\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Processing CDATA with Default Settings\nDESCRIPTION: Example showing the default behavior where CDATA values are merged with tag's text value.\nSOURCE: https://github.com/naturalintelligence/fast-xml-parser/blob/master/docs/v4/2.XMLparseOptions.md#2025-04-19_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst xmlDataStr = `\n    <a>\n        <name>name:<![CDATA[<some>Jack</some>]]><![CDATA[Jack]]></name>\n    </a>`;  \n\nconst parser = new XMLParser();\nconst output = parser.parse(xmlDataStr);\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"a\": {\n        \"name\": \"name:<some>Jack</some>Jack\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Number Parsing Options in FXP\nDESCRIPTION: Demonstrates how to configure number parsing options using the strnum library integration. Allows for hex number conversion, leading zeros handling, and regex-based skip patterns.\nSOURCE: https://github.com/naturalintelligence/fast-xml-parser/blob/master/docs/v3/parseValue.md#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst result = parser.parse(xmlData, {\n    parseNodeValue: true, //default\n    numParseOptions: {\n        hex :  true, //if true hex numbers will converted to decimal\n        leadingZeros: true, //if true '006' will be parsed to 6\n        skipLike: /regex/ //if set then string matching to given regex will not parse\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Parsing XML with Boolean Attributes Enabled\nDESCRIPTION: Example showing how to enable boolean attributes in the parser, which sets them to 'true' in the output.\nSOURCE: https://github.com/naturalintelligence/fast-xml-parser/blob/master/docs/v4/2.XMLparseOptions.md#2025-04-19_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst xmlDataStr = `<root a=\"nice\" checked><a>wow</a></root>`;\n\nconst options = {\n    ignoreAttributes: false,\n    attributeNamePrefix : \"@_\",\n    allowBooleanAttributes: true\n};\nconst parser = new XMLParser(options);\nconst output = parser.parse(xmlDataStr);\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"root\": {\n        \"@_a\": \"nice\",\n        \"@_checked\": true,\n        \"a\": \"wow\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using attributeNamePrefix for Attribute Identification\nDESCRIPTION: Example showing how to add a prefix to attribute names in the output to easily identify them.\nSOURCE: https://github.com/naturalintelligence/fast-xml-parser/blob/master/docs/v4/2.XMLparseOptions.md#2025-04-19_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst xmlDataStr = `<root a=\"nice\" ><a>wow</a></root>`;\n\nconst options = {\n    ignoreAttributes: false,\n    attributeNamePrefix : \"@_\"\n};\nconst parser = new XMLParser(options);\nconst output = parser.parse(xmlDataStr);\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"root\": {\n        \"@_a\": \"nice\",\n        \"a\": \"wow\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing XML with Default Boolean Attribute Handling\nDESCRIPTION: Example showing the default behavior where boolean attributes are ignored during parsing unless explicitly enabled.\nSOURCE: https://github.com/naturalintelligence/fast-xml-parser/blob/master/docs/v4/2.XMLparseOptions.md#2025-04-19_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst xmlDataStr = `<root a=\"nice\" checked><a>wow</a></root>`;\n\nconst options = {\n    ignoreAttributes: false,\n    attributeNamePrefix : \"@_\"\n};\nconst parser = new XMLParser(options);\nconst output = parser.parse(xmlDataStr);\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"root\": {\n        \"@_a\": \"nice\",\n        \"a\": \"wow\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Grouping Attributes Using attributesGroupName\nDESCRIPTION: Example showing how to group all attributes of a tag under a specified property name for cleaner organization.\nSOURCE: https://github.com/naturalintelligence/fast-xml-parser/blob/master/docs/v4/2.XMLparseOptions.md#2025-04-19_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst xmlDataStr = `<root a=\"nice\" b=\"very nice\" ><a>wow</a></root>`;\n\nconst options = {\n    ignoreAttributes: false,\n    attributeNamePrefix : \"@_\",\n    attributesGroupName : \"@_\"\n};\nconst parser = new XMLParser(options);\nconst output = parser.parse(xmlDataStr);\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"root\": {\n        \"@_\": {\n            \"@_a\": \"nice\",\n            \"@_b\": \"very nice\"\n        },\n        \"a\": \"wow\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring XML Parser Options for PI Tags\nDESCRIPTION: Basic configuration options required for processing PI tags in Fast XML Parser. These settings enable attribute processing and boolean attributes support.\nSOURCE: https://github.com/naturalintelligence/fast-xml-parser/blob/master/docs/v4/7.PITags.md#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nignoreAttributes: false,\nallowBooleanAttributes: true\n```\n\n----------------------------------------\n\nTITLE: Selectively Ignoring Attributes in XML Builder\nDESCRIPTION: Demonstrates how to use the ignoreAttributes option to selectively ignore specific attributes when building XML. This can be done using an array of strings, regular expressions, or a callback function.\nSOURCE: https://github.com/naturalintelligence/fast-xml-parser/blob/master/docs/v4/3.XMLBuilder.md#2025-04-19_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst options = {\n    attributeNamePrefix: \"$\",\n    ignoreAttributes: ['ns:attr1', 'ns:attr2']\n};\nconst builder = new XMLBuilder(options);\nconst xmlOutput = builder.build(jsonData);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst options = {\n    attributeNamePrefix: \"$\",\n    ignoreAttributes: [/^ns2:/]\n};\nconst builder = new XMLBuilder(options);\nconst xmlOutput = builder.build(jsonData);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst options = {\n    attributeNamePrefix: \"$\",\n    ignoreAttributes: (aName, jPath) => aName.startsWith('ns:') || jPath === 'tag.tag2'\n};\nconst builder = new XMLBuilder(options);\nconst xmlOutput = builder.build(jsonData);\n```\n\n----------------------------------------\n\nTITLE: Default Value Parsing Sequence in fast-xml-parser\nDESCRIPTION: Shows the default sequence of parsers used to parse tag and attribute values in fast-xml-parser.\nSOURCE: https://github.com/naturalintelligence/fast-xml-parser/blob/master/docs/v6/5.ValueParsers.md#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n[\"trim\",\"join\", \"number\",\"boolean\",\"currency\"]\n```\n\n----------------------------------------\n\nTITLE: Selective Attribute Ignoring with String Array\nDESCRIPTION: Example showing how to ignore specific attributes by name using an array of strings.\nSOURCE: https://github.com/naturalintelligence/fast-xml-parser/blob/master/docs/v4/2.XMLparseOptions.md#2025-04-19_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst options = {\n    attributeNamePrefix: \"$\",\n    ignoreAttributes: ['ns:attr1', 'ns:attr2'],\n    parseAttributeValue: true\n};\nconst parser = new XMLParser(options);\nconst output = parser.parse(xmlData);\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"tag\": {\n        \"#text\": \"value\",\n        \"$ns2:attr3\": \"a3-value\",\n        \"$ns2:attr4\": \"a4-value\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Parsed JSON Output Structure\nDESCRIPTION: Example of the JSON structure produced by parsing XML with PI tags, showing how processing instructions and their attributes are represented.\nSOURCE: https://github.com/naturalintelligence/fast-xml-parser/blob/master/docs/v4/7.PITags.md#2025-04-19_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n[\n    {\n        \"?xml\": [\n            {\n                \"#text\": \"\"\n            }\n        ],\n        \":@\": {\n            \"@_version\": \"1.0\"\n        }\n    },\n    {\n        \"?textinfo\": [\n            {\n                \"#text\": \"\"\n            }\n        ],\n        \":@\": {\n            \"@_whitespace\": true,\n            \"@_is\": true,\n            \"@_allowed\": true\n        }\n    },\n    {\n        \"h1\": []\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Selective Attribute Ignoring with Regular Expressions\nDESCRIPTION: Example showing how to ignore attributes matching a pattern using regular expressions.\nSOURCE: https://github.com/naturalintelligence/fast-xml-parser/blob/master/docs/v4/2.XMLparseOptions.md#2025-04-19_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst options = {\n    attributeNamePrefix: \"$\",\n    ignoreAttributes: [/^ns2:/],\n    parseAttributeValue: true\n};\nconst parser = new XMLParser(options);\nconst output = parser.parse(xmlData);\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"tag\": {\n        \"#text\": \"value\",\n        \"$ns:attr1\": \"a1-value\",\n        \"$ns:attr2\": \"a2-value\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: JavaScript Object Output from HTML Parsing\nDESCRIPTION: The resulting JavaScript object structure after parsing the HTML document with Fast XML Parser. It shows how different HTML elements, attributes, and content are represented in the object structure.\nSOURCE: https://github.com/naturalintelligence/fast-xml-parser/blob/master/docs/v4/6.HTMLParsing.md#2025-04-19_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"html\": {\n        \"head\": {\n            \"script\": [\n                \"\\n                    window.dataLayer = window.dataLayer || [];\\n                    function gtag(){dataLayer.push(arguments);}\\n                    gtag('js', new Date());\\n        \\n                    gtag('config', 'UA-80202630-2');\\n                \",\n                {\n                    \"@_src\": \"static/js/jquery-3.2.1.min.js\"\n                }\n            ],\n            \"title\": \"Fast XML Parser\",\n            \"meta\": [\n                {\n                    \"@_charset\": \"UTF-8\"\n                },\n                {\n                    \"@_name\": \"viewport\",\n                    \"@_content\": \"width=device-width, initial-scale=1\"\n                }\n            ],\n            \"link\": [\n                {\n                    \"@_rel\": \"stylesheet\",\n                    \"@_href\": \"static/css/bootstrap.min.css\"\n                },\n                {\n                    \"@_rel\": \"stylesheet\",\n                    \"@_href\": \"static/css/jquery-confirm.min.css\"\n                },\n                {\n                    \"@_rel\": \"stylesheet\",\n                    \"@_type\": \"text/css\",\n                    \"@_href\": \"style.css\"\n                }\n            ],\n            \"style\": \".CodeMirror{\\n                        height: 100%;\\n                        width: 100%;\\n                    }\"\n        },\n        \"body\": {\n            \"h1\": \"Heading\",\n            \"hr\": \"\",\n            \"h2\": \"₹\",\n            \"pre\": \"\\n                    <h1>Heading</h1>\\n                    <hr>\\n                    <h2>&inr;</h2>\\n                \",\n            \"script\": \"\\n                  let highlightedLine = null;\\n                  let editor;\\n                    <!-- this should not be parsed separately -->\\n                  function updateLength(){\\n                      const xmlData = editor.getValue();\\n                      $(\\\"#lengthxml\\\")[0].innerText = xmlData.replace(/>s*</g, \\\"><\\\").length;\\n                  }\\n                \",\n            \"@_role\": \"document\",\n            \"@_style\": \"background-color: #2c3e50;\"\n        },\n        \"@_lang\": \"en\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: XML Builder Entity Processing Example\nDESCRIPTION: Shows how the XML Builder handles entity encoding when converting JavaScript objects to XML, with options for controlling attribute prefixes and entity processing.\nSOURCE: https://github.com/naturalintelligence/fast-xml-parser/blob/master/docs/v4/5.Entities.md#2025-04-19_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst jsObj = {\n            \"note\": {\n                \"@heading\": \"Reminder > \\\"Alert\",\n                \"body\": {\n                    \"#text\": \" 3 < 4\",\n                    \"attr\": \"Writer: Donald Duck.\"\n                },\n            }\n        };\n\n        const options = {\n            attributeNamePrefix: \"@\",\n            ignoreAttributes:    false,\n            // processEntities: false\n        };\n        const builder = new XMLBuilder(options);\n        const output = builder.build(jsObj);\n```\n\nLANGUAGE: xml\nCODE:\n```\n<note heading=\"Reminder &gt; &quot;Alert\">\n    <body>\n        3 &lt; 4\n        <attr>Writer: Donald Duck.</attr>\n    </body>\n</note>\n```\n\n----------------------------------------\n\nTITLE: HTML Document Input Example for Fast XML Parser\nDESCRIPTION: An example HTML document that demonstrates various HTML elements and structures that can be parsed by Fast XML Parser, including scripts, meta tags, styles, and special characters.\nSOURCE: https://github.com/naturalintelligence/fast-xml-parser/blob/master/docs/v4/6.HTMLParsing.md#2025-04-19_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n        <html lang=\"en\">\n            <head>\n                <script>\n                    window.dataLayer = window.dataLayer || [];\n                    function gtag(){dataLayer.push(arguments);}\n                    gtag('js', new Date());\n        \n                    gtag('config', 'UA-80202630-2');\n                </script>\n        \n                <title>Fast XML Parser</title>\n                <meta charset=\"UTF-8\">\n                <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n                <link rel=\"stylesheet\" href=\"static/css/bootstrap.min.css\">\n                <link rel=\"stylesheet\" href=\"static/css/jquery-confirm.min.css\">\n                <link rel=\"stylesheet\" type=\"text/css\" href=\"style.css\">\n        \n                <script src=\"static/js/jquery-3.2.1.min.js\"></script>\n                <style>\n                    .CodeMirror{\n                        height: 100%;\n                        width: 100%;\n                    }\n                </style>\n            </head>\n            <body role=\"document\" style=\"background-color: #2c3e50;\">\n            <h1>Heading</h1>\n            <hr>\n            <h2>&inr;</h2>\n                <pre>\n                    <h1>Heading</h1>\n                    <hr>\n                    <h2>&inr;</h2>\n                </pre>\n                <script>\n                  let highlightedLine = null;\n                  let editor;\n                    <!-- this should not be parsed separately -->\n                  function updateLength(){\n                      const xmlData = editor.getValue();\n                      $(\"#lengthxml\")[0].innerText = xmlData.replace(/>\\s*</g, \"><\").length;\n                  }\n                </script>\n            </body>\n        </html>\n```\n\n----------------------------------------\n\nTITLE: Using fast-xml-parser from Command Line\nDESCRIPTION: Shows how to use the fast-xml-parser library from the command line to convert XML files to JSON or validate XML.\nSOURCE: https://github.com/naturalintelligence/fast-xml-parser/blob/master/docs/v3/docs.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$xml2js [-ns|-a|-c|-v|-V] <filename> [-o outputfile.json]\n$cat xmlfile.xml | xml2js [-ns|-a|-c|-v|-V] [-o outputfile.json]\n```\n\n----------------------------------------\n\nTITLE: Handling Unpaired Tags in XML Builder\nDESCRIPTION: Demonstrates how to use the unpairedTags option to properly handle tags that don't have matching closing tags when building XML.\nSOURCE: https://github.com/naturalintelligence/fast-xml-parser/blob/master/docs/v4/3.XMLBuilder.md#2025-04-19_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst options = {\n    // suppressUnpairedNode: true,\n    unpairedTags: [\"unpaired\"]\n};\nconst parser = new XMLParser(options);\nconst result = parser.parse(xmlData);\n\nconst builder = new XMLBuilder(options);\nconst output = builder.build(result);\n```\n\n----------------------------------------\n\nTITLE: Grouping Child Tags with oneListGroup in XML Builder\nDESCRIPTION: Shows how to use the oneListGroup option to group all children tags under a single parent tag when building XML from a JavaScript object.\nSOURCE: https://github.com/naturalintelligence/fast-xml-parser/blob/master/docs/v4/3.XMLBuilder.md#2025-04-19_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst builder = new XMLBuilder({oneListGroup:\"true\"})\nconst output = builder.build(json)\n```\n\n----------------------------------------\n\nTITLE: Ignoring XML and Processing Instructions\nDESCRIPTION: Example showing how to ignore XML declaration and processing instruction tags during parsing.\nSOURCE: https://github.com/naturalintelligence/fast-xml-parser/blob/master/docs/v4/2.XMLparseOptions.md#2025-04-19_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst xmlDataStr = `<?xml version=\"1.0\"?>\n      <?elementnames <fred>, <bert>, <harry> ?>\n      <h1></h1>`;\n\nconst options = {\n    ignoreDeclaration: true,\n    attributeNamePrefix : \"@_\"\n};\nconst parser = new XMLParser(options);\nconst output = parser.parse(xmlDataStr);\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"?elementnames\": \"\",\n    \"h1\": \"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Ignoring Both XML Declaration and PI Tags\nDESCRIPTION: Example showing how to ignore both XML declaration and processing instruction tags for a cleaner output.\nSOURCE: https://github.com/naturalintelligence/fast-xml-parser/blob/master/docs/v4/2.XMLparseOptions.md#2025-04-19_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst xmlDataStr = `<?xml version=\"1.0\"?>\n      <?elementnames <fred>, <bert>, <harry> ?>\n      <h1></h1>`;\n\nconst options = {\n    ignoreDeclaration: true,\n    ignorePiTags: true,\n    attributeNamePrefix : \"@_\"\n};\nconst parser = new XMLParser(options);\nconst output = parser.parse(xmlDataStr);\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"h1\": \"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Fast XML Parser via NPM\nDESCRIPTION: Command to install the fast-xml-parser library using NPM. This allows the library to be used as a package dependency in a Node.js project.\nSOURCE: https://github.com/naturalintelligence/fast-xml-parser/blob/master/README.md#2025-04-19_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\n$ npm install fast-xml-parser\n```\n\n----------------------------------------\n\nTITLE: Using Fast XML Parser in HTML\nDESCRIPTION: Example of using the fast-xml-parser library in an HTML page. It shows how to include the library from a CDN and use it to parse XML content.\nSOURCE: https://github.com/naturalintelligence/fast-xml-parser/blob/master/README.md#2025-04-19_snippet_5\n\nLANGUAGE: HTML\nCODE:\n```\n<script src=\"path/to/fxp.min.js\"></script>\n:\n<script>\n  const parser = new fxparser.XMLParser();\n  parser.parse(xmlContent);\n</script>\n```\n\n----------------------------------------\n\nTITLE: Installing Fast XML Parser Globally\nDESCRIPTION: Command to install the fast-xml-parser library globally using NPM. This allows the library to be used as a system command.\nSOURCE: https://github.com/naturalintelligence/fast-xml-parser/blob/master/README.md#2025-04-19_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\n$ npm install fast-xml-parser -g\n```\n\n----------------------------------------\n\nTITLE: Final XML Output\nDESCRIPTION: The resulting XML output after parsing and rebuilding, showing how PI tags are preserved in the final output.\nSOURCE: https://github.com/naturalintelligence/fast-xml-parser/blob/master/docs/v4/7.PITags.md#2025-04-19_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<?xml   version=\"1.0\"?>\n<?textinfo   whitespace is allowed?>\n<h1></h1>\n```\n\n----------------------------------------\n\nTITLE: XML Entity Side Effects Example\nDESCRIPTION: Demonstrates potential side effects when processing entities and shows how entity references can be chained together.\nSOURCE: https://github.com/naturalintelligence/fast-xml-parser/blob/master/docs/v4/5.Entities.md#2025-04-19_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!DOCTYPE note [\n<!ENTITY nbsp \"writer;\">\n<!ENTITY writer \"Writer: Donald Duck.\">\n<!ENTITY copyright \"Copyright: W3Schools.\">\n]>\n\n<note>\n    <heading>Reminder</heading>\n    <body attr=\"&writer;\">Don't forget me this weekend!</body>\n    <footer>&writer;&&nbsp;&copyright;</footer>\n</note>\n```\n\nLANGUAGE: js\nCODE:\n```\n {\n    \"note\": {\n        \"heading\": \"Reminder\",\n        \"body\": {\n            \"#text\": \"Don't forget me this weekend!\",\n            \"attr\": \"Writer: Donald Duck.\"\n        },\n        \"footer\": \"Writer: Donald Duck.Writer: Donald Duck.Copyright: W3Schools.\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Legacy Number Parsing with parseTrueNumberOnly\nDESCRIPTION: Shows the legacy configuration using parseTrueNumberOnly flag for backward compatibility.\nSOURCE: https://github.com/naturalintelligence/fast-xml-parser/blob/master/docs/v3/parseValue.md#2025-04-19_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst result = parser.parse(xmlData, {\n    parseNodeValue: true, //default\n    parseTrueNumberOnly: true\n});\n```\n\n----------------------------------------\n\nTITLE: Equivalent Modern Number Parsing Configuration\nDESCRIPTION: Demonstrates the modern equivalent configuration that matches the legacy parseTrueNumberOnly behavior using numParseOptions.\nSOURCE: https://github.com/naturalintelligence/fast-xml-parser/blob/master/docs/v3/parseValue.md#2025-04-19_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst result = parser.parse(xmlData, {\n    parseNodeValue: true, //default\n    numParseOptions: {\n        hex :  true,\n        leadingZeros: false,\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Running Performance Tests for XML Builder in Node.js\nDESCRIPTION: This command runs performance tests for the XML builder using Node.js. It's used to benchmark the builder's performance before and after changes.\nSOURCE: https://github.com/naturalintelligence/fast-xml-parser/blob/master/docs/CONTRIBUTING.md#2025-04-19_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n$ node benchmark/XmlBuilder.mjs\n```\n\n----------------------------------------\n\nTITLE: Installing Fast XML Parser in Node.js Project\nDESCRIPTION: Command to install the Fast XML Parser library as a dependency in a Node.js project using npm.\nSOURCE: https://github.com/naturalintelligence/fast-xml-parser/blob/master/docs/v4/1.GettingStarted.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install fast-xml-parser\n```\n\n----------------------------------------\n\nTITLE: Error Response Structure in JavaScript\nDESCRIPTION: Example of the error response structure returned when validating XML, showing code, message, line and column information.\nSOURCE: https://github.com/naturalintelligence/fast-xml-parser/blob/master/CHANGELOG.md#2025-04-19_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"code\": \"InvalidAttr\",\n  \"msg\":  \"Attribute 'abc' is repeated.\",\n  \"line\": 1,\n  \"col\": 22\n}\n```\n\n----------------------------------------\n\nTITLE: Bug Fix Changelog Format\nDESCRIPTION: Format used for documenting bug fixes in the library\nSOURCE: https://github.com/naturalintelligence/fast-xml-parser/blob/master/CHANGELOG.md#2025-04-19_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n- fix: description of the fix (#issue) (By [Author](link))\n```\n\n----------------------------------------\n\nTITLE: Using Fast XML Parser as CLI Command\nDESCRIPTION: Example of using the fast-xml-parser as a command-line interface (CLI) command to parse an XML file.\nSOURCE: https://github.com/naturalintelligence/fast-xml-parser/blob/master/README.md#2025-04-19_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\n$ fxparser some.xml\n```\n\n----------------------------------------\n\nTITLE: Running All Benchmarks for fast-xml-parser\nDESCRIPTION: Command to execute all benchmarks for the fast-xml-parser project using npm test.\nSOURCE: https://github.com/naturalintelligence/fast-xml-parser/blob/master/benchmark/README.md#2025-04-19_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ npm t\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for fast-xml-parser Benchmarks\nDESCRIPTION: Command to install all required dependencies for the benchmarking suite using npm.\nSOURCE: https://github.com/naturalintelligence/fast-xml-parser/blob/master/benchmark/README.md#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ npm i\n```\n\n----------------------------------------\n\nTITLE: Installing Fast XML Parser Globally for CLI Usage\nDESCRIPTION: Command to install Fast XML Parser globally to use its command-line interface for parsing XML files.\nSOURCE: https://github.com/naturalintelligence/fast-xml-parser/blob/master/docs/v4/1.GettingStarted.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install -g fast-xml-parser\n```\n\n----------------------------------------\n\nTITLE: Installing Fast XML Parser via Yarn\nDESCRIPTION: Command to install the fast-xml-parser library using Yarn. This is an alternative package manager to NPM for installing the library as a dependency.\nSOURCE: https://github.com/naturalintelligence/fast-xml-parser/blob/master/README.md#2025-04-19_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\n$ yarn add fast-xml-parser\n```\n\n----------------------------------------\n\nTITLE: Sample XML with Processing Instructions\nDESCRIPTION: Example XML input containing processing instructions and a basic HTML tag.\nSOURCE: https://github.com/naturalintelligence/fast-xml-parser/blob/master/docs/v4/7.PITags.md#2025-04-19_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\"?>\n<?textinfo whitespace is allowed ?>\n\n<h1></h1>\n```\n\n----------------------------------------\n\nTITLE: Rebuilt HTML Output from JavaScript Object\nDESCRIPTION: The final HTML output after parsing the original HTML to a JavaScript object and then rebuilding it using XMLBuilder with the specified configuration options.\nSOURCE: https://github.com/naturalintelligence/fast-xml-parser/blob/master/docs/v4/6.HTMLParsing.md#2025-04-19_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<html lang=\"en\">\n  <head>\n    <script>\n      \n                    window.dataLayer = window.dataLayer || [];\n                    function gtag(){dataLayer.push(arguments);}\n                    gtag('js', new Date());\n        \n                    gtag('config', 'UA-80202630-2');\n                \n    </script>\n    <title>\n      Fast XML Parser\n    </title>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n    <link rel=\"stylesheet\" href=\"static/css/bootstrap.min.css\">\n    <link rel=\"stylesheet\" href=\"static/css/jquery-confirm.min.css\">\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"style.css\">\n    <script src=\"static/js/jquery-3.2.1.min.js\">\n      \n    </script>\n    <style>\n      .CodeMirror{\n                        height: 100%;\n                        width: 100%;\n                    }\n    </style>\n  </head>\n  <body role=\"document\" style=\"background-color: #2c3e50;\">\n    <h1>\n      Heading\n    </h1>\n    <hr>\n    <h2>\n      ₹\n    </h2>\n    <pre>\n      \n                    <h1>Heading</h1>\n                    <hr>\n                    <h2>&inr;</h2>\n                \n    </pre>\n    <script>\n      \n                  let highlightedLine = null;\n                  let editor;\n                    <!-- this should not be parsed separately -->\n                  function updateLength(){\n                      const xmlData = editor.getValue();\n                      $(\"#lengthxml\")[0].innerText = xmlData.replace(/>s*</g, \"><\").length;\n                  }\n                \n    </script>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: XML Entity Declaration and Usage Example\nDESCRIPTION: Demonstrates how to declare and use XML entities in a document using DOCTYPE, including custom entities and predefined entities.\nSOURCE: https://github.com/naturalintelligence/fast-xml-parser/blob/master/docs/v4/5.Entities.md#2025-04-19_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!DOCTYPE note [\n<!ENTITY nbsp \"&#xA0;\">\n<!ENTITY writer \"Writer: Donald Duck.\">\n<!ENTITY copyright \"Copyright: W3Schools.\">\n]>\n\n<note>\n    <to>Tove</to>\n    <from>Jani</from>\n    <heading>Reminder</heading>\n    <body attr=\"&writer;\">Don't forget me this weekend!</body>\n    <footer>&writer;&nbsp;&copyright;</footer>\n</note>\n```\n\n----------------------------------------\n\nTITLE: Running Parser Benchmarks for fast-xml-parser\nDESCRIPTION: Command to execute only the parser-specific benchmarks using a custom npm script.\nSOURCE: https://github.com/naturalintelligence/fast-xml-parser/blob/master/benchmark/README.md#2025-04-19_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ npm run parser\n```\n\n----------------------------------------\n\nTITLE: Running Builder Benchmarks for fast-xml-parser\nDESCRIPTION: Command to execute only the builder-specific benchmarks using a custom npm script.\nSOURCE: https://github.com/naturalintelligence/fast-xml-parser/blob/master/benchmark/README.md#2025-04-19_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ npm run builder\n```\n\n----------------------------------------\n\nTITLE: Running Performance Tests for XML Parser in Node.js\nDESCRIPTION: This command runs performance tests for the XML parser using Node.js. It's used to benchmark the parser's performance before and after changes.\nSOURCE: https://github.com/naturalintelligence/fast-xml-parser/blob/master/docs/CONTRIBUTING.md#2025-04-19_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n$ node benchmark/XmlParser.mjs\n```\n\n----------------------------------------\n\nTITLE: Basic Changelog Entry Format in Markdown\nDESCRIPTION: Standard format used for documenting version changes, including version number, date, and bullet points for changes\nSOURCE: https://github.com/naturalintelligence/fast-xml-parser/blob/master/CHANGELOG.md#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n**X.Y.Z / YYYY-MM-DD**\n- type: description (#issue) (By [Author](link))\n```\n\n----------------------------------------\n\nTITLE: Feature Addition Changelog Format\nDESCRIPTION: Format used specifically for documenting new feature additions to the library\nSOURCE: https://github.com/naturalintelligence/fast-xml-parser/blob/master/CHANGELOG.md#2025-04-19_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- feat: description of new feature (#issue) (By [Author](link))\n```\n\n----------------------------------------\n\nTITLE: Removing Git Tags in bash\nDESCRIPTION: A Git command to remove a specific tag from the repository. This is useful for correcting tag mistakes during the release process.\nSOURCE: https://github.com/naturalintelligence/fast-xml-parser/blob/master/docs/CHECK_LIST.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit tag -d <tag_name>\n```\n\n----------------------------------------\n\nTITLE: HTML Logo Grid Display\nDESCRIPTION: Series of HTML anchor tags displaying organization logos in a grid format. Each entry includes a linked logo image with specified dimensions and title attributes.\nSOURCE: https://github.com/naturalintelligence/fast-xml-parser/blob/master/USERs.md#2025-04-19_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<a href=\"https://github.com/NaturalIntelligence/imglab\" title=\"imglab\" ><img src=\"https://github.com/NaturalIntelligence/imglab/blob/master/img/imglab_logo.png?raw=true\" width=\"80px\" ></a>\n```"
  }
]