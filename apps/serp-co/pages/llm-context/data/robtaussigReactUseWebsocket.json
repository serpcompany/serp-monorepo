[
  {
    "owner": "robtaussig",
    "repo": "react-use-websocket",
    "content": "TITLE: Complete WebSocket Demo Implementation in React\nDESCRIPTION: A comprehensive example of how to implement WebSocket functionality in a React component using the useWebSocket hook. It demonstrates state management, sending messages, and displaying connection status.\nSOURCE: https://github.com/robtaussig/react-use-websocket/blob/master/README.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport React, { useState, useCallback, useEffect } from 'react';\nimport useWebSocket, { ReadyState } from 'react-use-websocket';\n\nexport const WebSocketDemo = () => {\n  //Public API that will echo messages sent to it back to the client\n  const [socketUrl, setSocketUrl] = useState('wss://echo.websocket.org');\n  const [messageHistory, setMessageHistory] =\n    useState < MessageEvent < any > [] > [];\n\n  const { sendMessage, lastMessage, readyState } = useWebSocket(socketUrl);\n\n  useEffect(() => {\n    if (lastMessage !== null) {\n      setMessageHistory((prev) => prev.concat(lastMessage));\n    }\n  }, [lastMessage]);\n\n  const handleClickChangeSocketUrl = useCallback(\n    () => setSocketUrl('wss://demos.kaazing.com/echo'),\n    []\n  );\n\n  const handleClickSendMessage = useCallback(() => sendMessage('Hello'), []);\n\n  const connectionStatus = {\n    [ReadyState.CONNECTING]: 'Connecting',\n    [ReadyState.OPEN]: 'Open',\n    [ReadyState.CLOSING]: 'Closing',\n    [ReadyState.CLOSED]: 'Closed',\n    [ReadyState.UNINSTANTIATED]: 'Uninstantiated',\n  }[readyState];\n\n  return (\n    <div>\n      <button onClick={handleClickChangeSocketUrl}>\n        Click Me to change Socket Url\n      </button>\n      <button\n        onClick={handleClickSendMessage}\n        disabled={readyState !== ReadyState.OPEN}\n      >\n        Click Me to send 'Hello'\n      </button>\n      <span>The WebSocket is currently {connectionStatus}</span>\n      {lastMessage ? <span>Last message: {lastMessage.data}</span> : null}\n      <ul>\n        {messageHistory.map((message, idx) => (\n          <span key={idx}>{message ? message.data : null}</span>\n        ))}\n      </ul>\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Basic useWebSocket Implementation\nDESCRIPTION: A simple example showing how to use the useWebSocket hook in a functional React component, including event handlers and reconnection logic.\nSOURCE: https://github.com/robtaussig/react-use-websocket/blob/master/README.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport useWebSocket from 'react-use-websocket';\n\n// In functional React component\n\n// This can also be an async getter function. See notes below on Async Urls.\nconst socketUrl = 'wss://echo.websocket.org';\n\nconst {\n  sendMessage,\n  sendJsonMessage,\n  lastMessage,\n  lastJsonMessage,\n  readyState,\n  getWebSocket,\n} = useWebSocket(socketUrl, {\n  onOpen: () => console.log('opened'),\n  //Will attempt to reconnect on all close events, such as server shutting down\n  shouldReconnect: (closeEvent) => true,\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing useEventSource Hook in React\nDESCRIPTION: Shows how to initialize and use the useEventSource hook with event handling for message and update events. Demonstrates configuration options including credentials and custom event handlers.\nSOURCE: https://github.com/robtaussig/react-use-websocket/blob/master/README.md#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useEventSource } from 'react-use-websocket';\n\n//Only the following three properties are provided\nconst { lastEvent, getEventSource, readyState } = useEventSource(\n  'http://localhost:3000/',\n  {\n    withCredentials: true,\n    events: {\n      message: (messageEvent) => {\n        console.log('This has type \"message\": ', messageEvent);\n      },\n      update: (messageEvent) => {\n        console.log('This has type \"update\": ', messageEvent);\n      },\n    },\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring WebSocket with Heartbeat in React Component\nDESCRIPTION: Shows how to configure a WebSocket connection with heartbeat functionality, including custom ping/pong messages and timeout/interval settings.\nSOURCE: https://github.com/robtaussig/react-use-websocket/blob/master/README.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst { sendMessage, lastMessage, readyState } = useWebSocket(\n  'ws://localhost:3000',\n  {\n    heartbeat: {\n      message: 'ping',\n      returnMessage: 'pong',\n      timeout: 60000, // 1 minute, if no response is received, the connection will be closed\n      interval: 25000, // every 25 seconds, a ping message will be sent\n    },\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring WebSocket Reconnection in React Component\nDESCRIPTION: Shows how to configure WebSocket reconnection options in a React component, including shouldReconnect callback and reconnection attempts/interval settings.\nSOURCE: https://github.com/robtaussig/react-use-websocket/blob/master/README.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst didUnmount = useRef(false);\n\nconst [sendMessage, lastMessage, readyState] = useWebSocket(\n  'wss://echo.websocket.org',\n  {\n    shouldReconnect: (closeEvent) => {\n      /*\n      useWebSocket will handle unmounting for you, but this is an example of a \n      case in which you would not want it to automatically reconnect\n    */\n      return didUnmount.current === false;\n    },\n    reconnectAttempts: 10,\n    reconnectInterval: 3000,\n  }\n);\n\nuseEffect(() => {\n  return () => {\n    didUnmount.current = true;\n  };\n}, []);\n```\n\n----------------------------------------\n\nTITLE: Implementing Exponential Backoff for WebSocket Reconnection\nDESCRIPTION: Demonstrates how to implement an exponential backoff strategy for WebSocket reconnection using a custom reconnectInterval function.\nSOURCE: https://github.com/robtaussig/react-use-websocket/blob/master/README.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst [sendMessage, lastMessage, readyState] = useWebSocket(\n  'wss://echo.websocket.org',\n  {\n    shouldReconnect: (closeEvent) => true,\n    reconnectAttempts: 10,\n    //attemptNumber will be 0 the first time it attempts to reconnect, so this equation results in a reconnect pattern of 1 second, 2 seconds, 4 seconds, 8 seconds, and then caps at 10 seconds until the maximum number of attempts is reached\n    reconnectInterval: (attemptNumber) =>\n      Math.min(Math.pow(2, attemptNumber) * 1000, 10000),\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Async URL Implementation with useWebSocket\nDESCRIPTION: Example demonstrating how to use an asynchronous function to provide the WebSocket URL, which can be useful when the URL needs to be fetched or computed asynchronously.\nSOURCE: https://github.com/robtaussig/react-use-websocket/blob/master/README.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport useWebSocket from 'react-use-websocket';\n\n// In functional React component\nconst getSocketUrl = useCallback(() => {\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve('wss://echo.websocket.org');\n    }, 2000);\n  });\n}, []);\n\nconst { sendMessage, lastMessage, readyState, getWebSocket } = useWebSocket(\n  getSocketUrl,\n  STATIC_OPTIONS\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Message Filtering for WebSocket in React\nDESCRIPTION: Demonstrates how to implement a message filter function for WebSocket connections, allowing selective processing of incoming messages.\nSOURCE: https://github.com/robtaussig/react-use-websocket/blob/master/README.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n  filter: (message) => {\n    // validate your message data\n    if (isPingMessage(message.data)) {\n      // do stuff or simply return false\n      updateHeartbeat()\n      return false\n    } else {\n      return true\n    }\n  },\n```\n\n----------------------------------------\n\nTITLE: Using getWebSocket Function in React Component\nDESCRIPTION: Demonstrates how to use the getWebSocket function in a React component, including examples of accessing and modifying WebSocket properties.\nSOURCE: https://github.com/robtaussig/react-use-websocket/blob/master/README.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst { sendMessage, lastMessage, readyState, getWebSocket } = useWebSocket(\n  'wss://echo.websocket.org',\n  { share: true }\n);\n\nuseEffect(() => {\n  console.log(getWebSocket().binaryType);\n  //=> 'blob'\n\n  //Change binaryType property of WebSocket\n  getWebSocket().binaryType = 'arraybuffer';\n\n  console.log(getWebSocket().binaryType);\n  //=> 'arraybuffer'\n\n  //Attempt to change event handler\n  getWebSocket().onmessage = console.log;\n  //=> A warning is logged to console: 'The WebSocket's event handlers should be defined through the options object passed into useWebSocket.'\n\n  //Attempt to change an immutable property\n  getWebSocket().url = 'www.google.com';\n  console.log(getWebSocket().url);\n  //=> 'wss://echo.websocket.org'\n\n  //Attempt to call webSocket#send\n  getWebSocket().send('Hello from WebSocket');\n  //=> No message is sent, and no error thrown (a no-op function was returned), but an error will be logged to console: 'Calling methods directly on the WebSocket is not supported at this moment. You must use the methods returned by useWebSocket.'\n}, []);\n```\n\n----------------------------------------\n\nTITLE: Resetting WebSocket Global State in Child Windows\nDESCRIPTION: Demonstrates how to reset the global state of WebSocket connections when dealing with child windows. Includes event listener setup for window unload to properly cleanup connection state.\nSOURCE: https://github.com/robtaussig/react-use-websocket/blob/master/README.md#2025-04-23_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport React, { useEffect } from 'react';\nimport { resetGlobalState } from 'react-use-websocket';\n\n// insside second window opened via window.open\nexport const ChildWindow = () => {\n  useEffect(() => {\n    window.addEventListener('unload', () => {\n      resetGlobalState('wss://echo.websocket.org');\n    });\n  }, []);\n};\n```\n\n----------------------------------------\n\nTITLE: Defining WebSocket Options Interface in TypeScript\nDESCRIPTION: Defines the TypeScript interface for WebSocket options, including various configuration parameters and event handlers.\nSOURCE: https://github.com/robtaussig/react-use-websocket/blob/master/README.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Options {\n  share?: boolean;\n  shouldReconnect?: (event: WebSocketEventMap['close']) => boolean;\n  reconnectInterval?: number | ((lastAttemptNumber: number) => number);\n  reconnectAttempts?: number;\n  filter?: (message: WebSocketEventMap['message']) => boolean;\n  disableJson?: boolean;\n  retryOnError?: boolean;\n  onOpen?: (event: WebSocketEventMap['open']) => void;\n  onClose?: (event: WebSocketEventMap['close']) => void;\n  onMessage?: (event: WebSocketEventMap['message']) => void;\n  onError?: (event: WebSocketEventMap['error']) => void;\n  onReconnectStop?: (numAttempted: number) => void;\n  fromSocketIO?: boolean;\n  queryParams?: {\n    [key: string]: string | number;\n  };\n  protocols?: string | string[];\n  eventSourceOptions?: EventSourceInit;\n  heartbeat?:\n    | boolean\n    | {\n        message?: 'ping' | 'pong' | string;\n        returnMessage?: 'ping' | 'pong' | string;\n        timeout?: number;\n        interval?: number;\n      };\n}\n```\n\n----------------------------------------\n\nTITLE: Defining WebSocket ReadyState Enum in TypeScript\nDESCRIPTION: Defines an enum for WebSocket ready states, including an additional UNINSTANTIATED state (-1) to indicate that the WebSocket has not been instantiated yet.\nSOURCE: https://github.com/robtaussig/react-use-websocket/blob/master/README.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nenum ReadyState {\n  UNINSTANTIATED = -1,\n  CONNECTING = 0,\n  OPEN = 1,\n  CLOSING = 2,\n  CLOSED = 3,\n}\n```\n\n----------------------------------------\n\nTITLE: Defining getWebSocket Function Type in TypeScript\nDESCRIPTION: Defines the type for the getWebSocket function, which returns either a WebSocketLike object or a Proxy of WebSocketLike.\nSOURCE: https://github.com/robtaussig/react-use-websocket/blob/master/README.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ntype getWebSocket = () => WebSocketLike | Proxy<WebSocketLike>;\n```\n\n----------------------------------------\n\nTITLE: Installing react-use-websocket Package with npm\nDESCRIPTION: Command to install the react-use-websocket package using npm, which is necessary before using the hook in React components.\nSOURCE: https://github.com/robtaussig/react-use-websocket/blob/master/README.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --save react-use-websocket@3.0.0\n\n//or\n\nyarn add react-use-websocket@3.0.0\n```"
  }
]