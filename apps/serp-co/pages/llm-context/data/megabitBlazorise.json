[
  {
    "owner": "megabit",
    "repo": "blazorise",
    "content": "TITLE: Creating a Blazor WebAssembly Application with .NET CLI\nDESCRIPTION: Command to create a new Blazor WebAssembly application using the .NET CLI. This command creates a new directory with the specified name and scaffolds a Blazor WASM project structure inside it.\nSOURCE: https://github.com/megabit/blazorise/blob/master/Documentation/Blazorise.Docs/Pages/Blog/2022-09-19_SettingUpABlazorProject/Index.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet new blazorwasm -n BlazorWasmApp\n```\n\n----------------------------------------\n\nTITLE: Creating a Blazor Server Application with .NET CLI\nDESCRIPTION: Command to create a new Blazor Server application using the .NET CLI. This command creates a new directory with the specified name and scaffolds a Blazor Server project structure inside it.\nSOURCE: https://github.com/megabit/blazorise/blob/master/Documentation/Blazorise.Docs/Pages/Blog/2022-09-19_SettingUpABlazorProject/Index.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndotnet new blazorserver -n BlazorServerApp\n```\n\n----------------------------------------\n\nTITLE: Implementing FluentValidation Rules\nDESCRIPTION: Validator class defining validation rules for the registration model using FluentValidation.\nSOURCE: https://github.com/megabit/blazorise/blob/master/Documentation/Blazorise.Docs/Pages/Blog/2022-08-19_ReactiveUIFluentValidation/Index.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic RegisterModelValidator()\n{\n    RuleFor(register => register.Email).EmailAddress().NotEmpty();\n    RuleFor(register => register.Password).NotEmpty().Length(1, 24);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Blazorise Services in Program.cs\nDESCRIPTION: C# code to add necessary using statements and configure Blazorise services in the Program.cs file.\nSOURCE: https://github.com/megabit/blazorise/blob/master/README.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nusing Blazorise;\nusing Blazorise.Bootstrap5;\nusing Blazorise.Icons.FontAwesome;\n\nbuilder.Services\n  .AddBlazorise()\n  .AddBootstrap5Providers()\n  .AddFontAwesomeIcons();\n```\n\n----------------------------------------\n\nTITLE: Implementing Employee Form with Blazorise Validation Components\nDESCRIPTION: A complete Blazor form implementation using Blazorise UI components with validation. The form collects employee information including personal details, contact information, and address with client-side validation using data annotations. It demonstrates usage of Validations component, various input controls, and validation feedback.\nSOURCE: https://github.com/megabit/blazorise/blob/master/Documentation/Blazorise.Docs/Pages/Blog/2022-06-09_ValidationWithDataAnnotations/Index.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n@page \"/\"\n@using ValidationWithDataAnnotations.Models\n\n<Row>\n    <Column>\n        <Validations @ref=\"@ValidationsRef\" Mode=\"ValidationMode.Manual\" Model=\"@EmployeeModel\" ValidateOnLoad=\"false\">\n            <Fields>\n                <Validation>\n                    <Field ColumnSize=\"ColumnSize.IsHalf\">\n                        <FieldLabel>First Name</FieldLabel>\n                        <FieldBody>\n                            <TextEdit @bind-Text=\"@EmployeeModel.FirstName\">\n                                <Feedback>\n                                    <ValidationError />\n                                </Feedback>\n                            </TextEdit>\n                        </FieldBody>\n                    </Field>\n                </Validation>\n                <!-- ... remaining form fields ... -->\n            </Fields>\n        </Validations>\n        <Button Color=\"Color.Primary\" Clicked=\"@OnSaveClicked\">\n            Validate and Submit\n        </Button>\n    </Column>\n</Row>\n@code {\n    [Inject] IMessageService MessageService { get; set; }\n\n    Validations ValidationsRef { get; set; }\n\n    Employee EmployeeModel { get; set; } = new Employee();\n\n    async Task OnSaveClicked()\n    {\n        if ( await ValidationsRef.ValidateAll() )\n        {\n            await MessageService.Info( \"Thank you for filling the form.\" );\n\n            await ValidationsRef.ClearAll();\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Form Validation in Blazorise\nDESCRIPTION: HTML markup for implementing form validation using Blazorise Validation components. This validates email format and ensures password is not empty, providing feedback to users on validation errors.\nSOURCE: https://github.com/megabit/blazorise/blob/master/Documentation/Blazorise.Docs/Pages/Blog/2022-08-12_CreateTabbedLoginDemo/Index.md#2025-04-22_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<Validations @ref=\"@loginValidationsRef\" Mode=\"ValidationMode.Manual\" ValidateOnLoad=\"false\">\n    <Validation Validator=\"ValidationRule.IsEmail\">\n        <Field>\n            <FieldLabel>Email</FieldLabel>\n            <TextEdit @bind-Text=\"@email\" Placeholder=\"Enter email...\">\n                <Feedback>\n                    <ValidationNone>Please Enter Your Email. </ValidationNone>\n                    <ValidationSuccess>Email is good</ValidationSuccess>\n                    <ValidationError>Please Enter A Valid Email</ValidationError>\n                </Feedback>\n            </TextEdit>\n        </Field>\n    </Validation>\n    <Validation Validator=\"ValidationRule.IsNotEmpty\">\n        <Field>\n            <FieldLabel>Password</FieldLabel>\n            <TextEdit @bind-Text=\"@password\" Placeholder=\"Enter Password..\" />\n        </Field>\n    </Validation>\n    <Field>\n        <Check TValue=\"bool\" @bind-Checked=\"@rememberMe\">Remember Me</Check>\n    </Field>\n</Validations>\n```\n\n----------------------------------------\n\nTITLE: Creating a Counter Component with Blazorise\nDESCRIPTION: This Razor component demonstrates how to create a simple counter using Blazorise components like Heading, Paragraph, and Button, replacing the default Blazor HTML elements.\nSOURCE: https://github.com/megabit/blazorise/blob/master/Documentation/Blazorise.Docs/Pages/Blog/2022-06-08_BeginnersGuideToCreateBlazoriseApp/Index.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n@page \"/counter\"\n\n<Heading Size=\"HeadingSize.Is1\">Counter with Blazorise</Heading>\n\n<Paragraph>Current count: @currentCount</Paragraph>\n\n<Button Color=\"Color.Primary\" Clicked=\"IncrementCount\">Click me</Button>\n\n@code {\n    int currentCount = 0;\n\n    void IncrementCount()\n    {\n        currentCount++;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Counter Component with Blazorise\nDESCRIPTION: Razor component example demonstrating the usage of Blazorise components to create a simple counter.\nSOURCE: https://github.com/megabit/blazorise/blob/master/README.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n@page \"/counter\"\n\n<Heading Size=\"HeadingSize.Is1\">Counter</Heading>\n\n<Paragraph>Current count: @currentCount</Paragraph>\n\n<Button Color=\"Color.Primary\" Clicked=\"IncrementCount\">Click me</Button>\n\n@code {\n    int currentCount = 0;\n\n    void IncrementCount()\n    {\n        currentCount++;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom MessageLocalizerHelper Class\nDESCRIPTION: This snippet defines a MessageLocalizerHelper class that uses IStringLocalizer to localize error messages. It includes methods for localizing both the main message and its arguments.\nSOURCE: https://github.com/megabit/blazorise/blob/master/Documentation/Blazorise.Docs/Pages/Blog/2023-09-15_HowToHandleLocalizationInBlazoriseValidation/Index.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MessageLocalizerHelper<T>\n{\n    private readonly Microsoft.Extensions.Localization.IStringLocalizer<T> stringLocalizer;\n\n    public MessageLocalizerHelper( Microsoft.Extensions.Localization.IStringLocalizer<T> stringLocalizer )\n    {\n        this.stringLocalizer = stringLocalizer;\n    }\n\n    public string Localize( string message, IEnumerable<string>? arguments )\n    {\n        try\n        {\n            return arguments?.Count() > 0\n                ? stringLocalizer[message, LocalizeMessageArguments( arguments )?.ToArray()!]\n                : stringLocalizer[message];\n        }\n        catch\n        {\n            return stringLocalizer[message];\n        }\n    }\n\n    private IEnumerable<string> LocalizeMessageArguments( IEnumerable<string> arguments )\n    {\n        foreach (var argument in arguments)\n        {\n            // first try to localize with \"DisplayName:{Name}\"\n            var localization = stringLocalizer[$\"DisplayName:{argument}\"];\n\n            if (localization.ResourceNotFound)\n            {\n                // then try to localize with just \"{Name}\"\n                localization = stringLocalizer[argument];\n\n                yield return localization;\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Reading File Content with the Modern async/await Pattern in C#\nDESCRIPTION: This snippet shows the modern approach to asynchronous programming using the async/await keywords. It provides a cleaner, more readable way to implement the same file reading functionality with implicit exception propagation.\nSOURCE: https://github.com/megabit/blazorise/blob/master/Documentation/Blazorise.Docs/Pages/Blog/2022-09-08_AsyncAwaitUnderTheHood/Index.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic async Task<string> GetDocumentContent()\n{\n    return await File.ReadAllTextAsync(\"Document.txt\");\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Blazorise Services in Program.cs\nDESCRIPTION: This C# code demonstrates how to configure Blazorise services in the Program.cs file, including setting up Bootstrap 5 providers and FontAwesome icons for a Blazor WebAssembly application.\nSOURCE: https://github.com/megabit/blazorise/blob/master/Documentation/Blazorise.Docs/Pages/Blog/2022-06-08_BeginnersGuideToCreateBlazoriseApp/Index.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\nusing Blazorise;\nusing Blazorise.Bootstrap5;\nusing Blazorise.Icons.FontAwesome;\nusing BlazoriseSampleApplication;\nusing Microsoft.AspNetCore.Components.Web;\nusing Microsoft.AspNetCore.Components.WebAssembly.Hosting;\n\nnamespace Company.WebApplication1\n{\n    public class Program\n    {\n        public static async Task Main( string[] args )\n        {\n            var builder = WebAssemblyHostBuilder.CreateDefault( args );\n            builder.RootComponents.Add<App>( \"#app\" );\n            builder.RootComponents.Add<HeadOutlet>( \"head::after\" );\n\n            builder.Services.AddScoped( sp => new HttpClient { BaseAddress = new Uri( builder.HostEnvironment.BaseAddress ) } );\n\n            builder.Services\n                .AddBlazorise( options =>\n                {\n                    options.Immediate = true;\n                } )\n                .AddBootstrap5Providers()\n                .AddFontAwesomeIcons();\n\n            await builder.Build().RunAsync();\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Login Form Fields with Blazorise in Blazor\nDESCRIPTION: HTML markup for creating login form fields using Blazorise Field components. This includes fields for email, password, and a remember me checkbox, with proper labels and structure.\nSOURCE: https://github.com/megabit/blazorise/blob/master/Documentation/Blazorise.Docs/Pages/Blog/2022-08-12_CreateTabbedLoginDemo/Index.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<Field>\n    <FieldLabel>Email</FieldLabel>\n    <TextEdit @bind-Text=\"@email\" Placeholder=\"Enter email...\" />\n</Field>\n<Field>\n    <FieldLabel>Password</FieldLabel>\n    <TextEdit @bind-Text=\"@password\" Placeholder=\"Enter Password..\" />\n</Field>\n<Field>\n    <Check TValue=\"bool\" @bind-Checked=\"@rememberMe\">Remember Me</Check>\n</Field>\n```\n\n----------------------------------------\n\nTITLE: Creating Employee Model with Data Annotations for Validation\nDESCRIPTION: Comprehensive model definition example showing how to create Employee, Address, Country, City, and Gender classes with data annotation attributes for validation. The model includes [Required] and [EmailAddress] annotations with supporting methods for dropdown data.\nSOURCE: https://github.com/megabit/blazorise/blob/master/Documentation/Blazorise.Docs/Pages/Blog/2022-06-09_ValidationWithDataAnnotations/Index.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Employee\n{\n    [Required]\n    public string FirstName { get; set; }\n\n    [Required]\n    public string LastName { get; set; }\n\n    [Required]\n    [EmailAddress]\n    public string Email { get; set; }\n\n    [Required]\n    public string Gender { get; set; }\n\n    [Required]\n    public DateTime? DateOfBirth { get; set; }\n\n    [Required]\n    public decimal? YearsOfExperience { get; set; }\n\n    public Address Address { get; set; } = new Address();\n}\n\npublic class Address\n{\n    [Required]\n    public string Street { get; set; }\n\n    [Required]\n    public string City { get; set; }\n\n    [Required]\n    public string Zip { get; set; }\n\n    [Required]\n    public string Country { get; set; }\n}\n\npublic class Country\n{\n    public string Name { get; set; }\n\n    public string Code { get; set; }\n\n    public static IEnumerable<Country> GetCountries()\n    {\n        return new List<Country>\n        {\n            new() { Name = \"Croatia\", Code = \"HR\" },\n            new() { Name = \"United Kingdom\", Code = \"UK\" },\n            new() { Name = \"United States\", Code = \"US\" },\n        };\n    }\n}\n\npublic class City\n{\n    public string Name { get; set; }\n\n    public string Code { get; set; }\n\n    public string CountryCode { get; set; }\n\n    public static IEnumerable<City> GetCities()\n    {\n        return new List<City>\n        {\n            new() { Name = \"San Francisco\", CountryCode = \"US\", Code=\"US-101\" },\n            new() { Name = \"Los Angeles\", CountryCode = \"US\", Code=\"US-102\" },\n            new() { Name = \"Boston\", CountryCode = \"US\", Code=\"US-103\" },\n            new() { Name = \"Portland\", CountryCode = \"US\", Code=\"US-104\" },\n            new() { Name = \"Split\", CountryCode = \"HR\", Code=\"HR-101\" },\n            new() { Name = \"Zagreb\", CountryCode = \"HR\", Code=\"HR-102\" },\n            new() { Name = \"Dubrovnik\", CountryCode = \"HR\", Code=\"HR-103\" },\n            new() { Name = \"London\", CountryCode = \"UK\", Code=\"UK-101\" },\n            new() { Name = \"Glasgow\", CountryCode = \"UK\", Code=\"UK-102\" },\n            new() { Name = \"Liverpool\", CountryCode = \"UK\", Code=\"UK-103\" }\n        };\n    }\n}\n\npublic class Gender\n{\n    public string Name { get; set; }\n\n    public string Code { get; set; }\n\n    public static IEnumerable<Gender> GetGenders()\n    {\n        return new List<Gender>\n        {\n            new() { Name = \"Male\", Code = \"A\" },\n            new() { Name = \"Female\", Code = \"B\" },\n            new() { Name = \"Non-binary\", Code = \"C\" },\n            new() { Name = \"Transgender\", Code = \"D\" },\n            new() { Name = \"Intersex\", Code = \"E\" },\n            new() { Name = \"I prefer not to say\", Code = \"F\" },\n        };\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Binding Blazorise UI Components to ReactiveUI ViewModel\nDESCRIPTION: A Blazorise form with validation that binds directly to a ReactiveUI ViewModel using Command binding and property binding. The form includes validation fields and a button with disabled state tied to a CanRegister property.\nSOURCE: https://github.com/megabit/blazorise/blob/master/Documentation/Blazorise.Docs/Pages/Blog/2022-08-19_ReactiveUIFluentValidation/Index.md#2025-04-22_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n</Validation>\n        </Fields>\n    </Validations>\n    <Button Color=\"Color.Primary\" Command=\"ViewModel.Register\" Disabled=\"@(!ViewModel.CanRegister)\">Register</Button>\n</Container>\n```\n\n----------------------------------------\n\nTITLE: Adding Submit Button for Login Form in Blazorise\nDESCRIPTION: HTML markup for adding a submit button to the login form using Blazorise Button component. This creates a primary-colored button labeled 'Login'.\nSOURCE: https://github.com/megabit/blazorise/blob/master/Documentation/Blazorise.Docs/Pages/Blog/2022-08-12_CreateTabbedLoginDemo/Index.md#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<Button Color=\"Color.Primary\">Login</Button>\n```\n\n----------------------------------------\n\nTITLE: Configuring MessageAlert in Blazorise App Router\nDESCRIPTION: Example showing how to configure the Blazorise router in App.razor with MessageAlert for user feedback during form validation. The MessageAlert component provides notifications for validation errors and successful form submissions.\nSOURCE: https://github.com/megabit/blazorise/blob/master/Documentation/Blazorise.Docs/Pages/Blog/2022-06-09_ValidationWithDataAnnotations/Index.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<Router AppAssembly=\"@typeof(App).Assembly\">\n    <Found Context=\"routeData\">\n        <RouteView RouteData=\"@routeData\" DefaultLayout=\"@typeof(MainLayout)\" />\n        <FocusOnNavigate RouteData=\"@routeData\" Selector=\"h1\" />\n    </Found>\n    <NotFound>\n        <PageTitle>Not found</PageTitle>\n        <LayoutView Layout=\"@typeof(MainLayout)\">\n            <p role=\"alert\">Sorry, there's nothing at this address.</p>\n        </LayoutView>\n    </NotFound>\n</Router>\n\n<MessageAlert />\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Buttons with Color Utility in Blazorise\nDESCRIPTION: This snippet demonstrates the use of strongly typed utilities in Blazorise by creating a primary-colored button. Instead of using CSS class names, Blazorise uses typed properties like Color.Primary.\nSOURCE: https://github.com/megabit/blazorise/blob/master/Documentation/Blazorise.Docs/Pages/Blog/2023-04-12_WhatIsBlazoriseAllAbout/Index.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<Button Color=\"Color.Primary\">\n    Click Me!\n</Button>\n```\n\n----------------------------------------\n\nTITLE: Configuring HTML for Blazorise in index.html\nDESCRIPTION: This HTML snippet shows how to set up the index.html file for a Blazorise application, including the required CSS references for Blazorise and Bootstrap 5.\nSOURCE: https://github.com/megabit/blazorise/blob/master/Documentation/Blazorise.Docs/Pages/Blog/2022-06-08_BeginnersGuideToCreateBlazoriseApp/Index.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no\" />\n    <title>BlazoriseSampleApplication</title>\n    <base href=\"/\" />\n    <link href=\"css/bootstrap/bootstrap.min.css\" rel=\"stylesheet\" />\n\n    <link href=\"_content/Blazorise/blazorise.css\" rel=\"stylesheet\" />\n    <link href=\"_content/Blazorise.Bootstrap5/blazorise.bootstrap5.css\" rel=\"stylesheet\" />\n\n    <link href=\"css/app.css\" rel=\"stylesheet\" />\n    <link href=\"BlazoriseSampleApplication.styles.css\" rel=\"stylesheet\" />\n</head>\n\n<body>\n    <div id=\"app\">Loading...</div>\n\n    <div id=\"blazor-error-ui\">\n        An unhandled error has occurred.\n        <a href=\"\" class=\"reload\">Reload</a>\n        <a class=\"dismiss\">🗙</a>\n    </div>\n    <script src=\"_framework/blazor.webassembly.js\"></script>\n</body>\n\n</html>\n```\n\n----------------------------------------\n\nTITLE: Binding Complex Types with Blazorise Select Component in Razor\nDESCRIPTION: A demonstration of how to work with complex types by using a unique identifier as the SelectItem value. This example maps employee objects to their IDs in the Select component and uses SelectedValueChanged to update the selected employee.\nSOURCE: https://github.com/megabit/blazorise/blob/master/Documentation/Blazorise.Docs/Pages/Blog/2022-07-01_UsingTheSelectComponent/Index.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n@namespace Blazorise.Docs.Pages.Blog.UsingTheSelectComponent.Examples\n\n<Row>\n    <Column>\n        <Field>\n            <Select TValue=\"int\" SelectedValueChanged=\"@(value => selectedEmployee = employeeData.First(emp => emp.Id == value))\">\n                @foreach ( var employee in employeeData )\n                {\n                    <SelectItem @key=\"employee.Id\" Value=\"@employee.Id\">@employee.Name</SelectItem>\n                }\n            </Select>\n        </Field>\n    </Column>\n</Row>\n<Row>\n    <Column>\n        Selected Employee is : @selectedEmployee.Name\n    </Column>\n</Row>\n\n@code {\n    public Employee selectedEmployee;\n    public class Employee\n    {\n        public int Id { get; set; }\n        public string Name { get; set; }\n    }\n\n    public List<Employee> employeeData;\n\n    protected override void OnInitialized()\n    {\n        employeeData = new()\n        {\n            new (){ Id = 11500, Name = \"John\" },\n            new (){ Id = 11566, Name = \"Julia\" },\n            new (){ Id = 11612, Name = \"Maria\" },\n            new (){ Id = 10989, Name = \"Peter\" }\n        };\n        selectedEmployee = employeeData.First();\n        base.OnInitialized();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Dropdown Menu Component in Blazor\nDESCRIPTION: This snippet demonstrates how to create a reusable dropdown menu component in Blazor using the Blazorise library. It showcases the component-based architecture of Blazor and how it simplifies UI development.\nSOURCE: https://github.com/megabit/blazorise/blob/master/Documentation/Blazorise.Docs/Pages/Blog/2022-07-20_WhatIsBlazorWASM/Index.md#2025-04-22_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<Dropdown>\n    <DropdownToggle Color=\"Color.Primary\">\n        Dropdown\n    </DropdownToggle>\n    <DropdownMenu>\n        <DropdownItem>Action</DropdownItem>\n        <DropdownDivider />\n        <DropdownItem>Another Action</DropdownItem>\n    </DropdownMenu>\n</Dropdown>\n```\n\n----------------------------------------\n\nTITLE: Adding Blazorise CSS and JavaScript Resources to HTML\nDESCRIPTION: HTML code to include necessary CSS files for Blazorise with Bootstrap 5 and FontAwesome icons.\nSOURCE: https://github.com/megabit/blazorise/blob/master/README.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css\" rel=\"stylesheet\" integrity=\"sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH\" crossorigin=\"anonymous\">\n<link href=\"_content/Blazorise.Icons.FontAwesome/v6/css/all.min.css\" rel=\"stylesheet\">\n\n<link href=\"_content/Blazorise/blazorise.css?v=1.7.6.0\" rel=\"stylesheet\" />\n<link href=\"_content/Blazorise.Bootstrap5/blazorise.bootstrap5.css?v=1.7.6.0\" rel=\"stylesheet\" />\n```\n\n----------------------------------------\n\nTITLE: Binding Primitive Types with Blazorise Select Component in Razor\nDESCRIPTION: A simple implementation showing how to create a Select component with primitive int values. The example demonstrates creating a dropdown list of employees where each value is an employee ID.\nSOURCE: https://github.com/megabit/blazorise/blob/master/Documentation/Blazorise.Docs/Pages/Blog/2022-07-01_UsingTheSelectComponent/Index.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n@namespace Blazorise.Docs.Pages.Blog.UsingTheSelectComponent.Examples\n\n<Row>\n    <Column>\n        <Field>\n            <Select TValue=\"int\">\n                <SelectItem Value=\"11500\">John</SelectItem>\n                <SelectItem Value=\"11566\">Julia</SelectItem>\n                <SelectItem Value=\"11612\">Maria</SelectItem>\n                <SelectItem Value=\"10989\">Peter</SelectItem>\n            </Select>\n        </Field>\n    </Column>\n</Row>\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Filter Logic for DataGrid in Blazor\nDESCRIPTION: Defines the implementation of the CustomFilter callback that evaluates rows against the custom filtering logic. It includes helper methods to retrieve field values dynamically and compare them based on the selected filter type.\nSOURCE: https://github.com/megabit/blazorise/blob/master/Documentation/Blazorise.Docs/Pages/Blog/2023-09-08_HowToEnhanceDataGridMenuFilter/Index.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n@code{\n    private bool MyCustomFilter( FilterExample row )\n    {\n        return _filterTracker.columnFilters is null\n            ? true\n            : _filterTracker.columnFilters.All( x => EvaluateColumnFilter( x, row ) );\n    }\n\n    private bool EvaluateColumnFilter( ColumnFilter<FilterExample> columnFilter, FilterExample row )\n    {\n        Console.WriteLine( $\"Evaluating... {columnFilter.Column.Field}\" );\n        Console.WriteLine( $\"Filter to apply... {columnFilter.SelectedFilter}\" );\n        Console.WriteLine( $\"Search for... {columnFilter.SearchValue}\" );\n\n\n        //You might need some reflection based or expression based getter to get the value of the corresponding field dynamically\n        //Do whatever boolean logic you need to do here\n        //We opted to use the DataGrid.Utils.FunctionCompiler.CreateValueGetter to create a dynamic getter for the field and using a simple comparer with the new GreaterThan and LessThan comparisons.\n        var columnFieldGetter = DataGrid.Utils.FunctionCompiler.CreateValueGetter<FilterExample>( columnFilter.Column.Field );\n        var columnValue = columnFieldGetter( row );\n\n        return CompareFilterValues( columnValue.ToString(), columnFilter.SearchValue, columnFilter.SelectedFilter );\n\n    }\n\n    private bool CompareFilterValues( string searchValue, string compareTo, MyFilter filterMethod )\n    {\n        switch (filterMethod)\n        {\n            case MyFilter.StartsWith:\n                return searchValue.StartsWith( compareTo, StringComparison.OrdinalIgnoreCase );\n            case MyFilter.EndsWith:\n                return searchValue.EndsWith( compareTo, StringComparison.OrdinalIgnoreCase );\n            case MyFilter.Equals:\n                return searchValue.Equals( compareTo, StringComparison.OrdinalIgnoreCase );\n            case MyFilter.NotEquals:\n                return !searchValue.Equals( compareTo, StringComparison.OrdinalIgnoreCase );\n            case MyFilter.GreaterThan:\n                if (int.TryParse( searchValue, out var parsedSearchValue ) && int.TryParse( compareTo, out var parsedCompareToValue ))\n                {\n                    return parsedSearchValue > parsedCompareToValue;\n                }\n                return false;\n            case MyFilter.LessThan:\n                if (int.TryParse( searchValue, out var parsedSearchValueLessThan ) && int.TryParse( compareTo, out var parsedCompareToValueLessThan ))\n                {\n                    return parsedSearchValueLessThan < parsedCompareToValueLessThan;\n                }\n                return false;\n            case MyFilter.Contains:\n            default:\n                return searchValue.IndexOf( compareTo, StringComparison.OrdinalIgnoreCase ) >= 0;\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Dockerfile for Containerizing a Blazor Application\nDESCRIPTION: Multi-stage Dockerfile for containerizing a .NET 8 Blazor application. It includes stages for building, publishing, and creating the final runtime image using the ASP.NET Core runtime.\nSOURCE: https://github.com/megabit/blazorise/blob/master/Documentation/Blazorise.Docs/Pages/Blog/2024-10-16_BlazorAppAsAnAzureContainerAppWithGitHubContainerRegistry/Index.md#2025-04-22_snippet_1\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM mcr.microsoft.com/dotnet/aspnet:8.0 AS base\nUSER app\nWORKDIR /app\nEXPOSE 8080\n\n# This stage is used to build the service project\nFROM mcr.microsoft.com/dotnet/sdk:8.0 AS build\nARG BUILD_CONFIGURATION=Release\nWORKDIR /src\nCOPY [\"AzureContainerAppTest.csproj\", \".\"]\nRUN dotnet restore \"./AzureContainerAppTest.csproj\"\nCOPY . .\nWORKDIR \"/src/.\"\nRUN dotnet build \"./AzureContainerAppTest.csproj\" -c $BUILD_CONFIGURATION -o /app/build\n\n# This stage is used to publish the service project to be copied to the final stage\nFROM build AS publish\nARG BUILD_CONFIGURATION=Release\nRUN dotnet publish \"./AzureContainerAppTest.csproj\" -c $BUILD_CONFIGURATION -o /app/publish /p:UseAppHost=false\n\n# This stage is used in production or when running from VS in regular mode (Default when not using the Debug configuration)\nFROM base AS final\nWORKDIR /app\nCOPY --from=publish /app/publish .\nENTRYPOINT [\"dotnet\", \"AzureContainerAppTest.dll\"]\n```\n\n----------------------------------------\n\nTITLE: Implementing Login and Registration Forms with Blazorise in Blazor HTML\nDESCRIPTION: This HTML snippet demonstrates the structure of login and registration forms using Blazorise components. It includes tabs for switching between login and registration, form fields with validation, and submit buttons.\nSOURCE: https://github.com/megabit/blazorise/blob/master/Documentation/Blazorise.Docs/Pages/Blog/2022-08-12_CreateTabbedLoginDemo/Index.md#2025-04-22_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<Tabs SelectedTab=\"@selectedTab\" SelectedTabChanged=\"@OnSelectedTabChanged\" Pills FullWidth>\n    <Items>\n        <Tab Name=\"login\">Login</Tab>\n        <Tab Name=\"register\">Register</Tab>\n    </Items>\n    <Content>\n        <TabPanel Name=\"login\">\n            <Card>\n                <CardBody>\n                    <CardTitle>\n                        Welcome Back, Please Login\n                    </CardTitle>\n                </CardBody>\n                <CardBody>\n                    <Validations @ref=\"@loginValidationsRef\" Mode=\"ValidationMode.Manual\" ValidateOnLoad=\"false\">\n                        <Validation Validator=\"ValidationRule.IsEmail\">\n                            <Field>\n                                <FieldLabel>Email</FieldLabel>\n                                <TextEdit @bind-Text=\"@email\" Placeholder=\"Enter email...\">\n                                    <Feedback>\n                                        <ValidationNone>Please Enter Your Email. </ValidationNone>\n                                        <ValidationSuccess>Email is good</ValidationSuccess>\n                                        <ValidationError>Please Enter A Valid Email</ValidationError>\n                                    </Feedback>\n                                </TextEdit>\n                            </Field>\n                        </Validation>\n                        <Validation Validator=\"ValidationRule.IsNotEmpty\">\n                            <Field>\n                                <FieldLabel>Password</FieldLabel>\n                                <TextEdit @bind-Text=\"@password\" Placeholder=\"Enter Password..\" />\n                            </Field>\n                        </Validation>\n                        <Field>\n                            <Check TValue=\"bool\" @bind-Checked=\"@rememberMe\">Remember Me</Check>\n                        </Field>\n                    </Validations>\n                </CardBody>\n                <CardBody>\n                    <Button Color=\"Color.Primary\" Clicked=\"@OnLoginClicked\">Login</Button>\n                    <Button Color=\"Color.Secondary\">Forgot Password</Button>\n                </CardBody>\n            </Card>\n        </TabPanel>\n        <TabPanel Name=\"register\">\n            <Card>\n                <CardBody>\n                    <CardTitle>\n                        New Here? Create An Account\n                    </CardTitle>\n                </CardBody>\n                <CardBody>\n                    <Validations @ref=\"@registerValidationsRef\" Mode=\"ValidationMode.Manual\" ValidateOnLoad=\"false\">\n                        <Validation Validator=\"ValidationRule.IsNotEmpty\">\n                            <Field>\n                                <FieldLabel>Name</FieldLabel>\n                                <TextEdit @bind-Text=\"@name\" Placeholder=\"Enter Your Name\" />\n                            </Field>\n                        </Validation>\n                        <Validation Validator=\"ValidationRule.IsEmail\">\n                            <Field>\n                                <FieldLabel>Email</FieldLabel>\n                                <TextEdit @bind-Text=\"@email\" Placeholder=\"Enter Your Email\">\n                                    <Feedback>\n                                        <ValidationNone>Please Enter your email.</ValidationNone>\n                                        <ValidationSuccess>Email is valid</ValidationSuccess>\n                                        <ValidationError>Enter Valid email </ValidationError>\n                                    </Feedback>\n                                </TextEdit>\n                            </Field>\n                        </Validation>\n                        <Validation Validator=\"ValidationRule.IsNotEmpty\">\n                            <Field>\n                                <FieldLabel>Password</FieldLabel>\n                                <TextEdit @bind-Text=\"@password\" Placeholder=\"Enter Password\" />\n                                <FieldHelp>Password Strength: <Text TextColor=\"TextColor.Danger\">Strong</Text></FieldHelp>\n                            </Field>\n                        </Validation>\n                    </Validations>\n                </CardBody>\n                <CardBody>\n                    <Button Color=\"Color.Primary\" Clicked=\"@OnRegisterClicked\">\n                        Create Account\n                    </Button>\n                </CardBody>\n            </Card>\n        </TabPanel>\n    </Content>\n</Tabs>\n```\n\n----------------------------------------\n\nTITLE: Binding Nullable Types with Blazorise Select Component in Razor\nDESCRIPTION: An implementation showing how to handle null values in a Select component using a nullable int type. The example demonstrates leaving the option content empty to properly handle null value selection in the browser.\nSOURCE: https://github.com/megabit/blazorise/blob/master/Documentation/Blazorise.Docs/Pages/Blog/2022-07-01_UsingTheSelectComponent/Index.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n@namespace Blazorise.Docs.Pages.Blog.UsingTheSelectComponent.Examples\n\n<Row>\n    <Column>\n        <Field>\n            <Select TValue=\"int?\" @bind-SelectedValue=\"@selectedEmployeeId\">\n                <SelectItem Value=\"(int?)null\"></SelectItem>\n                <SelectItem Value=\"11500\">John</SelectItem>\n                <SelectItem Value=\"11566\">Julia</SelectItem>\n                <SelectItem Value=\"11612\">Maria</SelectItem>\n                <SelectItem Value=\"10989\">Peter</SelectItem>\n            </Select>\n        </Field>\n    </Column>\n</Row>\n\n<Row>\n    <Column>\n        Selected Employee Id is : @(selectedEmployeeId.HasValue ? selectedEmployeeId.Value : \"empty\")\n    </Column>\n</Row>\n\n@code {\n    private int? selectedEmployeeId = null;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Navigation Link to Login Page in Blazor\nDESCRIPTION: HTML code for adding a navigation link to the login page in the sidebar menu of a Blazor application. This uses NavLink component to create a clickable menu item that navigates to the login page.\nSOURCE: https://github.com/megabit/blazorise/blob/master/Documentation/Blazorise.Docs/Pages/Blog/2022-08-12_CreateTabbedLoginDemo/Index.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"nav-item px-4\">\n    <NavLink class=\"nav-link\" href=\"login\">\n        <span class=\"oi oi-list-rich\" aria-hidden=\"true\"></span>Login\n    </NavLink>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing Login and Registration Form Logic in Blazor C#\nDESCRIPTION: This C# code snippet defines the logic for handling login and registration form submissions. It includes validation references, form field bindings, and methods for handling form submission events.\nSOURCE: https://github.com/megabit/blazorise/blob/master/Documentation/Blazorise.Docs/Pages/Blog/2022-08-12_CreateTabbedLoginDemo/Index.md#2025-04-22_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\n@code {\n    Validations loginValidationsRef;\n    Validations registerValidationsRef;\n\n    string selectedTab = \"login\";\n\n    string name;\n    string email;\n    string password;\n    bool rememberMe;\n\n    async Task OnLoginClicked()\n    {\n        if ( await loginValidationsRef.ValidateAll() )\n        {\n            // do the real login here\n\n            await loginValidationsRef.ClearAll();\n        }\n    }\n\n    async Task OnRegisterClicked()\n    {\n        if ( await registerValidationsRef.ValidateAll() )\n        {\n            // do the real login here\n\n            await registerValidationsRef.ClearAll();\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Binding Enumeration Types with Blazorise Select Component in Razor\nDESCRIPTION: An example showing how to handle enumeration types in a Select component by configuring proper JSON serialization settings. The implementation uses Enum.GetValues to dynamically generate SelectItems.\nSOURCE: https://github.com/megabit/blazorise/blob/master/Documentation/Blazorise.Docs/Pages/Blog/2022-07-01_UsingTheSelectComponent/Index.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n@namespace Blazorise.Docs.Pages.Blog.UsingTheSelectComponent.Examples\n@using System.Text.Json.Serialization\n\n<Row>\n    <Column>\n        <Field>\n            <Select TValue=\"Day\" @bind-SelectedValue=\"@selectedDay\">\n                @foreach ( var enumValue in Enum.GetValues<Day>() )\n                {\n                    <SelectItem @key=\"enumValue\" Value=\"@enumValue\">@enumValue</SelectItem>\n                }\n            </Select>\n        </Field>\n    </Column>\n</Row>\n<Row>\n    <Column>\n        Selected Day is : @selectedDay.ToString(\"g\")\n    </Column>\n</Row>\n\n@code {\n    public Day selectedDay;\n\n    [Flags]\n    [JsonConverter( typeof( System.Text.Json.Serialization.JsonStringEnumConverter ) )]\n    public enum Day\n    {\n        None = 0,\n        Sunday = 1,\n        Monday = 2,\n        Tuesday = 4,\n        Wednesday = 8,\n        Thursday = 16,\n        Friday = 32,\n        Saturday = 64\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Blazorise Button component with FontAwesome icon in Razor page\nDESCRIPTION: Example of a Blazorise Button component implementation in a Razor page, showcasing how to use a Button with a FontAwesome icon and an event handler.\nSOURCE: https://github.com/megabit/blazorise/blob/master/Documentation/Blazorise.Docs/NewFilesToBuild.txt#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n@page \"/\"\n\n<Button Color=\"Color.Primary\" Clicked=\"@OnButtonClicked\">\n    <Icon Name=\"FontAwesomeIcons.Rocket\" />\n    Click me!\n</Button>\n\n@code {\n    private void OnButtonClicked()\n    {\n        Console.WriteLine(\"Button clicked!\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: ReactiveUI Registration Command Implementation\nDESCRIPTION: Implementation of the registration command using ReactiveUI with validation and navigation logic.\nSOURCE: https://github.com/megabit/blazorise/blob/master/Documentation/Blazorise.Docs/Pages/Blog/2022-08-19_ReactiveUIFluentValidation/Index.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nprivate async Task RegisterAccount()\n{\n    if (!CanRegister) return;\n    try\n    {\n        var result = await _accountRepo.RegisterUser(RegisterModel);\n        RegistrationSucceeded = true;\n        _navManager.NavigateTo(\"/account/login\");\n    }\n    catch (Exception e)\n    {\n        Console.WriteLine(e);\n        throw;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Fluent Syntax for Responsive Margins in Blazorise\nDESCRIPTION: This example shows how to use Blazorise's fluent syntax to chain multiple rules for responsive design. The button has different margin settings for desktop and mobile screen sizes.\nSOURCE: https://github.com/megabit/blazorise/blob/master/Documentation/Blazorise.Docs/Pages/Blog/2023-04-12_WhatIsBlazoriseAllAbout/Index.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<Button Margin=\"Margin.Is2.OnDesktop.Is4.OnMobile\">\n    Click me!\n</Button>\n```\n\n----------------------------------------\n\nTITLE: Asynchronous File Reading in C#\nDESCRIPTION: An asynchronous version of the file reading method using async/await. This snippet shows the high-level implementation before decompilation.\nSOURCE: https://github.com/megabit/blazorise/blob/master/Documentation/Blazorise.Docs/Pages/Blog/2022-09-08_AsyncAwaitUnderTheHood/Index.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MyClass {\n    public async Task<string> GetDocumentContent()\n    {\n        return await File.ReadAllTextAsync(\"Document.txt\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Unit Testing ReactiveUI ViewModels with NSubstitute and TestScheduler\nDESCRIPTION: A unit test for a ReactiveUI ViewModel that uses NSubstitute for mocking dependencies and TestScheduler to control the timing of observable sequences. It tests that the ViewModel validates properly and executes navigation when the Register command is fired.\nSOURCE: https://github.com/megabit/blazorise/blob/master/Documentation/Blazorise.Docs/Pages/Blog/2022-08-19_ReactiveUIFluentValidation/Index.md#2025-04-22_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\n[Theory, AutoNSubstituteData]\n    public void RegistrationViewModel_ValidatesAndFiresRegisterCommand([Frozen]IAccountRepo repo, LoginModelValidator validator)\n        => new TestScheduler().With(scheduler =>\n        {\n            //Arrange\n            repo.RegisterUser(Arg.Any<RegistrationModel>()).Returns(true);\n            var nav = new MockNavigationManager();\n            \n            //Act\n            var viewModel = new RegistrationViewModel(repo, validator, nav)\n            {\n                EmailAddress = \"me@mine.com\",\n                Password = \"Password\"\n            };\n\n            viewModel.Register.Execute().Subscribe();\n            scheduler.AdvanceBy(5);\n\n            //Assert\n            viewModel.CanRegister.Should().BeTrue();\n            repo.Received().RegisterUser(viewModel.RegistrationModel);\n            nav.WasNavigateInvoked.Should().BeTrue();\n        });\n```\n\n----------------------------------------\n\nTITLE: Implementing Filter Tracker System for DataGrid in Blazor\nDESCRIPTION: Creates a custom filter tracking system with classes to manage column filters and their states. This includes methods to set, get, and clear filter values for each column.\nSOURCE: https://github.com/megabit/blazorise/blob/master/Documentation/Blazorise.Docs/Pages/Blog/2023-09-08_HowToEnhanceDataGridMenuFilter/Index.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n@code{\n    private FilterTracker<FilterExample> _filterTracker = new();\n\n    public class ColumnFilter<T>\n    {\n        public DataGridColumn<T> Column;\n        public string SearchValue;\n        public MyFilter SelectedFilter { get; set; } = MyFilter.Contains;\n    }\n\n    public class FilterTracker<T>\n    {\n        public List<ColumnFilter<T>> columnFilters { get; set; }\n\n        public void ClearColumnFilter( DataGridColumn<T> column )\n        {\n            columnFilters ??= new();\n\n            var columnFilter = columnFilters.FirstOrDefault( x => x.Column.Field == column.Field );\n            if (columnFilter is not null)\n            {\n                columnFilters.Remove( columnFilter );\n            }\n        }\n\n        public void SetColumnFilter( DataGridColumn<T> column, MyFilter myFilter )\n        {\n            columnFilters ??= new();\n\n            var columnFilter = columnFilters.FirstOrDefault( x => x.Column.Field == column.Field );\n            if (columnFilter is null)\n            {\n                columnFilters.Add( new()\n                    {\n                        Column = column,\n                        SelectedFilter = myFilter\n                    } );\n            }\n            else\n            {\n                columnFilter.SelectedFilter = myFilter;\n            }\n        }\n\n        public void SetColumnSearchValue( DataGridColumn<T> column, string searchValue )\n        {\n            columnFilters ??= new();\n\n            var columnFilter = columnFilters.FirstOrDefault( x => x.Column.Field == column.Field );\n            if (columnFilter is null)\n            {\n                columnFilters.Add( new()\n                    {\n                        Column = column,\n                        SearchValue = searchValue\n                    } );\n            }\n            else\n            {\n                columnFilter.SearchValue = searchValue;\n            }\n        }\n\n        public ColumnFilter<T> GetColumnFilter( string fieldName )\n            => columnFilters?.FirstOrDefault( x => x.Column.Field == fieldName );\n\n        public MyFilter GetColumnFilterValue( string fieldName )\n            => GetColumnFilter( fieldName )?.SelectedFilter ?? MyFilter.Contains;\n\n        public string GetColumnSearchValue( string fieldName )\n            => GetColumnFilter( fieldName )?.SearchValue;\n\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Reading File Content Asynchronously with ContinueWith in C#\nDESCRIPTION: This snippet demonstrates how to read a file asynchronously and handle the result using the ContinueWith method. The method returns a Task<string> containing the file's content once completed.\nSOURCE: https://github.com/megabit/blazorise/blob/master/Documentation/Blazorise.Docs/Pages/Blog/2022-09-08_AsyncAwaitUnderTheHood/Index.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic Task<string> GetDocumentContent()\n{\n    var content = File.ReadAllTextAsync(@\"Document.txt\")\n        .ContinueWith(t =>\n        {\n            return t.Result;\n        });\n    return content;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP/3 Support in ASP.NET Core\nDESCRIPTION: Demonstrates how to configure an ASP.NET Core application to use HTTP/3 alongside HTTP/1.1 and HTTP/2, with HTTPS enabled on a specific port.\nSOURCE: https://github.com/megabit/blazorise/blob/master/Documentation/Blazorise.Docs/Pages/Blog/2022-08-29_WhatToExpectInNet7/Index.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nvar builder = WebApplication.CreateBuilder(args);\n\nbuilder.WebHost.ConfigureKestrel((context, options) =>\n{\n    options.ListenAnyIP(5001, listenOptions =>\n    {\n        listenOptions.Protocols = HttpProtocols.Http1AndHttp2AndHttp3;\n        listenOptions.UseHttps();\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Creating ShareButton Component Markup in Blazor\nDESCRIPTION: Defines the Razor markup for the ShareButton component that renders a button with platform-specific styling and icon. Uses Blazorise's Button component with parameters derived from the Platform object.\nSOURCE: https://github.com/megabit/blazorise/blob/master/Documentation/Blazorise.Docs/Pages/Blog/2024-06-12_HowToCreateSocialMediaShareButtons/Index.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<Button TextColor=\"@Platform.TextColor\"\n        Background=\"@(new Background(Platform.BackgroundColor))\"\n        To=\"@Platform.Href\"\n        Type=\"@ButtonType.Link\"\n        Size=\"@ButtonSize\"\n        @attributes=\"@AdditionalAttributes\">\n\n    @ChildContent\n\n    <Icon Name=\"@($\"fa-brands {Platform.IconName}\")\" IconStyle=\"IconStyle.Light\"/>\n</Button>\n```\n\n----------------------------------------\n\nTITLE: Implementing Required Members in C# 11\nDESCRIPTION: Demonstrates how to use the 'required' modifier for properties in a class that must be initialized. Also shows how to use the [SetsRequiredMember] attribute for constructors.\nSOURCE: https://github.com/megabit/blazorise/blob/master/Documentation/Blazorise.Docs/Pages/Blog/2022-08-29_WhatToExpectInNet7/Index.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Student\n{\n    public required string Name { get; init; }\n}\n```\n\nLANGUAGE: csharp\nCODE:\n```\nusing Blazorise.CSharp11.Features\n\nvar student = new Student { Name = \"James\" }\n```\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Student\n{\n    public required string Name { get; init; }\n\n    [SetsRequiredMembers]\n    public Student( string name )\n    {\n        Name = name\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Tooltips in Blazorise Components\nDESCRIPTION: Example showing how to add tooltips to Blazorise components for providing additional information without expanding the UI. Uses the Tooltip component with a Badge inside a Field component.\nSOURCE: https://github.com/megabit/blazorise/blob/master/Documentation/Blazorise.Docs/Pages/Blog/2022-08-31_CSSTipsForDevelopers/Index.md#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<Div ElementId=\"tooltip-custom-target\">\n    <Field>\n        <FieldLabel>Enter CVV</FieldLabel>\n            <Tooltip Text=\"A three digit pin behind your credit card\" TriggerTargetId=\"tooltip-custom-target\" Inline>\n                <Badge Color=\"Color.Warning\">What's That?</Badge>\n            </Tooltip>\n        </FieldLabel>\n    </Field>\n</Div>\n```\n\n----------------------------------------\n\nTITLE: Implementing CaptchaInput Component Logic in C#\nDESCRIPTION: C# code for the CaptchaInput component that handles validation, server-side verification of Google reCAPTCHA responses, and integration with Blazorise's validation system.\nSOURCE: https://github.com/megabit/blazorise/blob/master/Documentation/Blazorise.Docs/Pages/Blog/2024-05-08_HowToImplementvalidationWithCaptcha/Index.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n﻿#region Using directives\nusing System;\nusing System.Collections.Generic;\nusing System.Diagnostics.Tracing;\nusing System.Linq.Expression;\nusing System.Net.Http;\nusing System.Text.Json;\nusing System.Threading.Tasks;\nusing Blazorise.Captcha;\nusing Blazorise.Docs.Domain;\nusing Blazorise.Extensions;\nusing Blazorise.Utilities;\nusing Microsoft.AspNetCore.Components;\nusing Microsoft.Extensions.Options;\nusing Newtonsoft.Json.Linq;\n#endregion\n\nnamespace Blazorise.Docs.Pages.Home.Components;\n\npublic partial class CaptchaInput : BaseInputComponent<bool>\n{\n    #region Members\n\n    public class GoogleResponse\n    {\n        public bool Success { get; set; }\n        public double Score { get; set; } //V3 only - The score for this request (0.0 - 1.0)\n        public string Action { get; set; } //v3 only - An identifier\n        public string Challenge_ts { get; set; }\n        public string Hostname { get; set; }\n        public string ErrorCodes { get; set; }\n    }\n\n    protected Captcha.Captcha captchaRef;\n\n    #endregion\n\n    #region Methods\n\n    /// <inheritdoc/>\n    public override async Task SetParametersAsync( ParameterView parameters )\n    {\n        if ( Rendered )\n        {\n            if ( parameters.TryGetValue<bool>( nameof( Value ), out var paramChecked ) && !paramChecked.IsEqual( Value ) )\n            {\n                ExecuteAfterRender( Revalidate );\n            }\n        }\n\n        await base.SetParametersAsync( parameters );\n\n        if ( ParentValidation is not null )\n        {\n            if ( parameters.TryGetValue<Expression<Func<bool>>>( nameof( ValueExpression ), out var expression ) )\n                await ParentValidation.InitializeInputExpression( expression );\n\n            await InitializeValidation();\n        }\n\n        if ( Rendered && captchaRef.State.Valid && !Value )\n        {\n            await captchaRef.Reset();\n        }\n    }\n\n    /// <inheritdoc/>\n    protected override void BuildClasses( ClassBuilder builder )\n    {\n        builder.Append( ClassProvider.CheckValidation( ParentValidation?.Status ?? ValidationStatus.None ), ParentValidation?.Status != ValidationStatus.None );\n\n        base.BuildClasses( builder );\n    }\n\n    protected async Task Solved( CaptchaState state )\n    {\n        await CurrentValueHandler( state.Valid.ToString() );\n    }\n\n    protected async Task Expired()\n    {\n        await CurrentValueHandler( false.ToString() );\n    }\n\n    protected async Task<bool> Validate( CaptchaState state )\n    {\n        //Perform server side validation\n        //You should make sure to implement server side validation\n        //https://developers.google.com/recaptcha/docs/verify\n        //Here's a simple example:\n        var content = new FormUrlEncodedContent( new[]\n        {\n            new KeyValuePair<string, string>(\"secret\", AppSettings.Value.ReCaptchaServerKey),\n            new KeyValuePair<string, string>(\"response\", state.Response),\n         } );\n\n        var httpClient = HttpClientFactory.CreateClient();\n        var response = await httpClient.PostAsync( \"https://www.google.com/recaptcha/api/siteverify\", content );\n\n        var result = await response.Content.ReadAsStringAsync();\n        var googleResponse = JsonSerializer.Deserialize<GoogleResponse>( result, new JsonSerializerOptions()\n        {\n            PropertyNamingPolicy = JsonNamingPolicy.CamelCase\n        } );\n\n        return googleResponse.Success;\n    }\n\n    protected override Task<ParseValue<bool>> ParseValueFromStringAsync( string value )\n    {\n        return Task.FromResult( new ParseValue<bool>( true, bool.Parse( value ), null ) );\n    }\n\n    protected override Task OnInternalValueChanged( bool value )\n    {\n        return ValueChanged.InvokeAsync( value );\n    }\n\n    public static void ValidateRobot( ValidatorEventArgs eventArgs )\n    {\n        eventArgs.Status = bool.Parse( eventArgs.Value.ToString() ) ? ValidationStatus.Success : ValidationStatus.Error;\n\n        if ( eventArgs.Status == ValidationStatus.Error )\n            eventArgs.ErrorText = \"Please check to confirm you're a real human!\";\n        else\n            eventArgs.ErrorText = null;\n    }\n\n    #endregion\n\n    #region Properties\n\n    /// <inheritdoc/>\n    protected override bool InternalValue { get => Value; set => Value = value; }\n\n    [Inject] IOptions<AppSettings> AppSettings { get; set; }\n    [Inject] IHttpClientFactory HttpClientFactory { get; set; }\n\n    [Parameter] public bool Value { get; set; }\n    [Parameter] public EventCallback<bool> ValueChanged { get; set; }\n\n    /// <summary>\n    /// Gets or sets an expression that identifies the captcha valid value.\n    /// </summary>\n    [Parameter] public Expression<Func<bool>> ValueExpression { get; set; }\n\n    #endregion\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Auto-Default Structs in C# 11\nDESCRIPTION: Shows how to create a struct with auto-default properties, where unset properties are automatically assigned their default values.\nSOURCE: https://github.com/megabit/blazorise/blob/master/Documentation/Blazorise.Docs/Pages/Blog/2022-08-29_WhatToExpectInNet7/Index.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic struct AutoDefaultStruct\n{\n    public int Number { get; set; }\n\n    public AutoDefaultStruct\n    {\n\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Decompiled Asynchronous Method Implementation in C#\nDESCRIPTION: The decompiled version of the asynchronous method, showing the state machine implementation. This snippet reveals the complex structure generated by the compiler to handle async operations.\nSOURCE: https://github.com/megabit/blazorise/blob/master/Documentation/Blazorise.Docs/Pages/Blog/2022-09-08_AsyncAwaitUnderTheHood/Index.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n[StructLayout(LayoutKind.Auto)]\n[CompilerGenerated]\nprivate struct <GetDocumentContent>d__0 : IAsyncStateMachine\n{\n    public int <>1__state;\n\n    public AsyncTaskMethodBuilder<string> <>t__builder;\n\n    private TaskAwaiter<string> <>u__1;\n\n    private void MoveNext()\n    {\n        int num = <>1__state;\n        string result;\n        try\n        {\n            TaskAwaiter<string> awaiter;\n            if (num != 0)\n            {\n                awaiter = File.ReadAllTextAsync(\"Document.txt\").GetAwaiter();\n                if (!awaiter.IsCompleted)\n                {\n                    num = (<>1__state = 0);\n                    <>u__1 = awaiter;\n                    <>t__builder.AwaitUnsafeOnCompleted(ref awaiter, ref this);\n                    return;\n                }\n            }\n            else\n            {\n                awaiter = <>u__1;\n                <>u__1 = default(TaskAwaiter<string>);\n                num = (<>1__state = -1);\n            }\n            result = awaiter.GetResult();\n        }\n        catch (Exception exception)\n        {\n            <>1__state = -2;\n            <>t__builder.SetException(exception);\n            return;\n        }\n        <>1__state = -2;\n        <>t__builder.SetResult(result);\n    }\n\n    void IAsyncStateMachine.MoveNext()\n    {\n        //ILSpy generated this explicit interface implementation from .override directive in MoveNext\n        this.MoveNext();\n    }\n\n    [DebuggerHidden]\n    private void SetStateMachine(IAsyncStateMachine stateMachine)\n    {\n        <>t__builder.SetStateMachine(stateMachine);\n    }\n\n    void IAsyncStateMachine.SetStateMachine(IAsyncStateMachine stateMachine)\n    {\n        //ILSpy generated this explicit interface implementation from .override directive in SetStateMachine\n        this.SetStateMachine(stateMachine);\n    }\n}\n\n[AsyncStateMachine(typeof(<GetDocumentContent>d__0))]\npublic Task<string> GetDocumentContent()\n{\n    <GetDocumentContent>d__0 stateMachine = default(<GetDocumentContent>d__0);\n    stateMachine.<>t__builder = AsyncTaskMethodBuilder<string>.Create();\n    stateMachine.<>1__state = -1;\n    stateMachine.<>t__builder.Start(ref stateMachine);\n    return stateMachine.<>t__builder.Task;\n}\n```\n\n----------------------------------------\n\nTITLE: ViewModel Validator Implementation\nDESCRIPTION: FluentValidation validator for the RegistrationViewModel with email and password validation rules.\nSOURCE: https://github.com/megabit/blazorise/blob/master/Documentation/Blazorise.Docs/Pages/Blog/2022-08-19_ReactiveUIFluentValidation/Index.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic class RegistrationViewModelValidator : AbstractValidator<RegistrationViewModel>\n{\n    public RegistrationViewModelValidator()\n    {\n        RuleFor(x => x.EmailAddress).EmailAddress().NotEmpty();\n        RuleFor(x => x.Password).NotEmpty().Length(1, 24);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Utilizing JavaScript Libraries in Blazorise\nDESCRIPTION: Examples of JavaScript libraries integrated into Blazorise, specifically Flatpickr for date/time picking and autoNumeric for number formatting. These integrations demonstrate how Blazorise leverages existing JavaScript solutions while providing seamless Blazor components.\nSOURCE: https://github.com/megabit/blazorise/blob/master/Documentation/Blazorise.Docs/Pages/Blog/2023-07-04_TheImportanceOfJavaScriptInBlazorise/Index.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nFlatpickr - Used for DatePicker and TimePicker components\\nautoNumeric - Used for number formatting and currency formatting\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Filter Menu UI Template for DataGrid in Blazor\nDESCRIPTION: Defines a custom FilterMenuTemplate for the DataGrid that includes a dropdown for filter types (with conditional options for numeric columns), a text input field, and filter action buttons.\nSOURCE: https://github.com/megabit/blazorise/blob/master/Documentation/Blazorise.Docs/Pages/Blog/2023-09-08_HowToEnhanceDataGridMenuFilter/Index.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<FilterMenuTemplate>\n    <Row>\n        <Column ColumnSize=\"ColumnSize.Is4\">\n            <Select TValue=\"MyFilter\" SelectedValue=\"@_filterTracker.GetColumnFilterValue(context.Column.Field)\" SelectedValueChanged=\"e => { _filterTracker.SetColumnFilter(context.Column, e); }\">\n                <SelectItem TValue=\"MyFilter\" Value=\"@MyFilter.Contains\">Contains</SelectItem>\n                <SelectItem TValue=\"MyFilter\" Value=\"@MyFilter.StartsWith\">Starts With</SelectItem>\n                <SelectItem TValue=\"MyFilter\" Value=\"@MyFilter.EndsWith\">Ends With</SelectItem>\n                <SelectItem TValue=\"MyFilter\" Value=\"@MyFilter.Equals\">Equals</SelectItem>\n                <SelectItem TValue=\"MyFilter\" Value=\"@MyFilter.NotEquals\">Not Equals</SelectItem>\n                @if (context.Column.ColumnType == DataGridColumnType.Numeric)\n                {\n                    <SelectItem TValue=\"MyFilter\" Value=\"@MyFilter.GreaterThan\">GreaterThan</SelectItem>\n                    <SelectItem TValue=\"MyFilter\" Value=\"@MyFilter.LessThan\">LessThan</SelectItem>\n                }\n            </Select>\n        </Column>\n        <Column ColumnSize=\"ColumnSize.Is4\">\n            <TextEdit Text=\"@_filterTracker.GetColumnSearchValue(context.Column.Field)\" TextChanged=\"@((newValue) => _filterTracker.SetColumnSearchValue(context.Column, newValue))\" />\n        </Column>\n\n        <Column ColumnSize=\"ColumnSize.Is4\">\n            <Button Clicked=\"context.Filter\" Color=\"Color.Primary\"><Icon Name=\"IconName.Filter\"></Icon> Filter</Button>\n            <Button Clicked=\"@(() => { _filterTracker.ClearColumnFilter(context.Column); context.ClearFilter.InvokeAsync(); })\" Color=\"Color.Light\"><Icon Name=\"IconName.Clear\"></Icon> Clear</Button>\n        </Column>\n    </Row>\n</FilterMenuTemplate>\n```\n\n----------------------------------------\n\nTITLE: Registration Page Blazor Component\nDESCRIPTION: Blazor component implementing the registration form UI using Blazorise components with validation support.\nSOURCE: https://github.com/megabit/blazorise/blob/master/Documentation/Blazorise.Docs/Pages/Blog/2022-08-19_ReactiveUIFluentValidation/Index.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n@page \"/account/registration\"\n@inherits ReactiveInjectableComponentBase<RegistrationViewModel>\n\n<PageTitle>Account Registration</PageTitle>\n<Container>\n    <Heading Size=\"HeadingSize.Is1\" Padding=\"Padding.Is4.FromTop\">Register</Heading>\n    <Paragraph Padding=\"Padding.Is1.FromTop\">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aliquam tempus ex non sapien porta, at efficitur massa condimentum. Nam id nibh facilisis, blandit nulla et, tempus nisl.</Paragraph>\n</Container>\n\n<Container Fluid Padding=\"Padding.Is4.FromTop\">\n    <Validations Mode=\"ValidationMode.Auto\" Model=\"Model\">\n        <Fields>\n            <Validation HandlerType=\"HandlerTypes.FluentValidation\">\n                <Field Horizontal ColumnSize=\"ColumnSize.Is12\">\n                    <FieldLabel ColumnSize=\"ColumnSize.Is2.OnDesktop\">Email Address</FieldLabel>\n                    <FieldBody ColumnSize=\"ColumnSize.Is6.OnDesktop\">\n                        <TextEdit Placeholder=\"Some text value...\" @bind-Text=\"Model.EmailAddress\">\n                            <Feedback>\n                                <ValidationError/>\n                            </Feedback>\n                        </TextEdit>\n                    </FieldBody>\n                </Field>\n            </Validation>\n            <Validation HandlerType=\"HandlerTypes.FluentValidation\">\n            <Field Horizontal ColumnSize=\"ColumnSize.Is12\">\n                <FieldLabel ColumnSize=\"ColumnSize.Is2.OnDesktop\">Password</FieldLabel>\n                <FieldBody ColumnSize=\"ColumnSize.Is6.OnDesktop\">\n                    <TextEdit Role=\"TextRole.Password\" Placeholder=\"Some text value...\" @bind-Text=\"Model.Password\">\n                        <Feedback>\n                            <ValidationError/>\n                        </Feedback>\n                    </TextEdit>\n                </FieldBody>\n            </Field>\n            </Validation>\n        </Fields>\n    </Validations>\n    <Button Color=\"Color.Primary\">Register</Button>\n</Container>\n```\n\n----------------------------------------\n\nTITLE: Defining Form Variables in C#\nDESCRIPTION: C# code for defining the variables needed for the login and registration forms. This declares string variables for name, email, password, and a boolean for the remember me checkbox.\nSOURCE: https://github.com/megabit/blazorise/blob/master/Documentation/Blazorise.Docs/Pages/Blog/2022-08-12_CreateTabbedLoginDemo/Index.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n@code{\n    string name;\n    string email;\n    string password;\n    bool rememberMe;\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Custom MessageLocalizer in Blazorise Validation\nDESCRIPTION: This comprehensive example shows how to inject and use the custom MessageLocalizerHelper in a Blazor component. It includes the full implementation of validation with localization.\nSOURCE: https://github.com/megabit/blazorise/blob/master/Documentation/Blazorise.Docs/Pages/Blog/2023-09-15_HowToHandleLocalizationInBlazoriseValidation/Index.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<Validations @ref=_validationsRef HandlerType=\"ValidationHandlerType.DataAnnotation\" Model=\"_model\">\n    <Validation MessageLocalizer=\"MessageLocalizer.Localize\">\n        <Field>\n            <FieldLabel>Phone Country Code</FieldLabel>\n            <TextEdit @bind-Text=\"@_model.PhoneCountryCode\">\n                <Feedback>\n                    <ValidationError />\n                </Feedback>\n            </TextEdit>\n        </Field>\n    </Validation>\n</Validations>\n\n<Button Clicked=\"Submit\">Submit</Button>\n@code {\n    [Inject] public MessageLocalizerHelper<Dashboard> MessageLocalizer { get; set; }\n\n    private ValidationLocalizationExample _model = new();\n    private Validations _validationsRef;\n\n    private async Task Submit()\n    {\n        if (await _validationsRef.ValidateAll())\n        {\n            Console.WriteLine( \"Validation Success!\" );\n        }\n    }\n\n    public class ValidationLocalizationExample\n    {\n        [RegularExpression( @\"^(\\+?\\d{1,3}|\\d{1,4})$\" )]\n        public string PhoneCountryCode { get; set; }\n    }\n\n\n    public class MessageLocalizerHelper<T>\n    {\n        private readonly Microsoft.Extensions.Localization.IStringLocalizer<T> stringLocalizer;\n\n        public MessageLocalizerHelper( Microsoft.Extensions.Localization.IStringLocalizer<T> stringLocalizer )\n        {\n            this.stringLocalizer = stringLocalizer;\n        }\n\n        public string Localize( string message, IEnumerable<string>? arguments )\n        {\n            try\n            {\n                return arguments?.Count() > 0\n                    ? stringLocalizer[message, LocalizeMessageArguments( arguments )?.ToArray()!]\n                    : stringLocalizer[message];\n            }\n            catch\n            {\n                return stringLocalizer[message];\n            }\n        }\n\n        private IEnumerable<string> LocalizeMessageArguments( IEnumerable<string> arguments )\n        {\n            foreach (var argument in arguments)\n            {\n                // first try to localize with \"DisplayName:{Name}\"\n                var localization = stringLocalizer[$\"DisplayName:{argument}\"];\n\n                if (localization.ResourceNotFound)\n                {\n                    // then try to localize with just \"{Name}\"\n                    localization = stringLocalizer[argument];\n\n                    yield return localization;\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Blazorise services in Blazor application\nDESCRIPTION: Code for configuring Blazorise services in the Program.cs file of a Blazor application, including setting up Bootstrap and FontAwesome icons.\nSOURCE: https://github.com/megabit/blazorise/blob/master/Documentation/Blazorise.Docs/NewFilesToBuild.txt#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nusing Blazorise;\nusing Blazorise.Bootstrap;\nusing Blazorise.Icons.FontAwesome;\n\nbuilder.Services\n    .AddBlazorise( options =>\n    {\n        options.Immediate = true;\n    })\n    .AddBootstrapProviders()\n    .AddFontAwesomeIcons();\n```\n\n----------------------------------------\n\nTITLE: Defining Registration Model in C#\nDESCRIPTION: Basic data model class for user registration containing email and password fields.\nSOURCE: https://github.com/megabit/blazorise/blob/master/Documentation/Blazorise.Docs/Pages/Blog/2022-08-19_ReactiveUIFluentValidation/Index.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class RegisterModel\n{\n    public string EmailAddress { get; set; }\n    public string Password     { get; set; } \n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Blazorise Validation with Default Error Messages\nDESCRIPTION: This snippet shows a basic implementation of Blazorise Validation using DataAnnotations. It demonstrates how to set up validation for a PhoneCountryCode property and display error messages.\nSOURCE: https://github.com/megabit/blazorise/blob/master/Documentation/Blazorise.Docs/Pages/Blog/2023-09-15_HowToHandleLocalizationInBlazoriseValidation/Index.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<Validations @ref=_validationsRef HandlerType=\"ValidationHandlerType.DataAnnotation\" Model=\"_model\">\n    <Validation>\n        <Field>\n            <FieldLabel>Phone Country Code</FieldLabel>\n            <TextEdit @bind-Text=\"@_model.PhoneCountryCode\">\n                <Feedback>\n                    <ValidationError />\n                </Feedback>\n            </TextEdit>\n        </Field>\n    </Validation>\n</Validations>\n\n<Button Clicked=\"Submit\">Submit</Button>\n@code {\n    private ValidationLocalizationExample _model = new();\n    private Validations _validationsRef;\n    public class ValidationLocalizationExample\n    {\n        [RegularExpression( @\"^(\\+?\\d{1,3}|\\d{1,4})$\" )]\n        public string PhoneCountryCode { get; set; }\n    }\n\n    private async Task Submit()\n    {\n        if (await _validationsRef.ValidateAll())\n        {\n            Console.WriteLine( \"Validation Success!\" );\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Blazorise Namespace to _Imports.razor\nDESCRIPTION: This snippet shows how to add the Blazorise namespace to the _Imports.razor file, which enables IntelliSense for Blazorise components in the application.\nSOURCE: https://github.com/megabit/blazorise/blob/master/Documentation/Blazorise.Docs/Pages/Blog/2022-06-08_BeginnersGuideToCreateBlazoriseApp/Index.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n@using Blazorise\n```\n\n----------------------------------------\n\nTITLE: Adding Blazorise Source Generator as an Analyzer in XML Project Configuration\nDESCRIPTION: XML configuration to add the Blazorise.Generator project as an analyzer to a target project. This setup references the generator while excluding the generated files from compilation.\nSOURCE: https://github.com/megabit/blazorise/blob/master/Source/SourceGenerators/README.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<ItemGroup>\n\t<ProjectReference Include=\"..\\..\\..\\.\\SourceGenerators\\Blazorise.Generator\\Blazorise.Generator.csproj\" OutputItemType=\"Analyzer\" ReferenceOutputAssembly=\"false\" />\n\t<!-- Exclude the output of source generators from the compilation -->\n\t<Compile Remove=\"$(CompilerGeneratedFilesOutputPath)/**/*.cs\" />\n</ItemGroup>\n```\n\n----------------------------------------\n\nTITLE: Creating a CaptchaInput Component in Blazorise (HTML Template)\nDESCRIPTION: HTML markup for a custom CaptchaInput component that inherits from BaseInputComponent<bool> to enable integration with Blazorise validation system.\nSOURCE: https://github.com/megabit/blazorise/blob/master/Documentation/Blazorise.Docs/Pages/Blog/2024-05-08_HowToImplementvalidationWithCaptcha/Index.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n@inherits BaseInputComponent<bool>\n<div id=\"@ElementId\" class=\"@ClassNames\" style=\"@StyleNames\">\n    <Captcha @ref=captchaRef Solved=\"@Solved\" Validate=\"@Validate\" Expired=\"Expired\" />\n</div>\n@Feedback\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Filter Enum for DataGrid in C#\nDESCRIPTION: Defines a custom filter enum that extends the standard filtering options with additional numeric comparisons like GreaterThan and LessThan.\nSOURCE: https://github.com/megabit/blazorise/blob/master/Documentation/Blazorise.Docs/Pages/Blog/2023-09-08_HowToEnhanceDataGridMenuFilter/Index.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic enum MyFilter\n{\n\tEquals, NotEquals, Contains, StartsWith, EndsWith, GreaterThan, LessThan\n}\n```\n\n----------------------------------------\n\nTITLE: Detecting Default Values in Properties with Backing Fields\nDESCRIPTION: Shows how the source generator handles properties with backing fields that provide default values. The generator can extract these backed values correctly.\nSOURCE: https://github.com/megabit/blazorise/blob/master/Documentation/Blazorise.Docs.Compiler/ApiDocsGenerator/README.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nprivate string _backingField = \"backed value\";\n[Parameter] public string BackedValue \n{\n    get => _backingField;\n    set => _backingField = value;\n}\n```\n\n----------------------------------------\n\nTITLE: Using CaptchaInput Component in Forms with Blazorise Validation\nDESCRIPTION: Example showing how to use the custom CaptchaInput component in a Blazorise form with validation, utilizing the ValidateRobot method defined in the component.\nSOURCE: https://github.com/megabit/blazorise/blob/master/Documentation/Blazorise.Docs/Pages/Blog/2024-05-08_HowToImplementvalidationWithCaptcha/Index.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<Validation Validator=\"@CaptchaInput.ValidateRobot\">\n    <Column ColumnSize=\"ColumnSize.IsHalf.OnDesktop\">\n        <CaptchaInput @bind-Value=NotARobot>\n            <Feedback>\n                <ValidationError />\n            </Feedback>\n        </CaptchaInput>\n    </Column>\n</Validation>\n```\n\n----------------------------------------\n\nTITLE: Using Generic Attributes in C# 11\nDESCRIPTION: Demonstrates how to use generic attributes in C# 11, allowing for more flexible and type-safe attribute declarations.\nSOURCE: https://github.com/megabit/blazorise/blob/master/Documentation/Blazorise.Docs/Pages/Blog/2022-08-29_WhatToExpectInNet7/Index.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Attr<T1> : Attribute { }\n\npublic class GenericAttribute\n{\n    [Attr<string>]\n    public void myClass ()\n    {\n\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Webpack Configuration for Autonumeric\nDESCRIPTION: Required change to the Webpack configuration file for Autonumeric to make it compatible with Blazorise. Changes the globalObject from \"this\" to \"window\".\nSOURCE: https://github.com/megabit/blazorise/blob/master/Source/Blazorise/README.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\noutput.globalObject = \"window\"\n```\n\n----------------------------------------\n\nTITLE: Defining Social Media Platform Class in C#\nDESCRIPTION: Creates a Platform record class that defines properties for social media platforms including name, colors, icon, and share URL. Includes a static property for X (Twitter) as an example platform.\nSOURCE: https://github.com/megabit/blazorise/blob/master/Documentation/Blazorise.Docs/Pages/Blog/2024-06-12_HowToCreateSocialMediaShareButtons/Index.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic record Platform(string Name, string TextColor, string BackgroundColor, string IconName, string Href)\n{\n    public static Platform X => new Platform(\"X\", \"white\", \"x\", \"fa-brands fa-x\", \"https://twitter.com/intent/tweet\");\n    \n    // your social media platform can go here.\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Running Containerized .NET Applications\nDESCRIPTION: Shows the process of creating a new Blazor WebAssembly project, adding container support, publishing for Linux, and running the containerized application using Docker.\nSOURCE: https://github.com/megabit/blazorise/blob/master/Documentation/Blazorise.Docs/Pages/Blog/2022-08-29_WhatToExpectInNet7/Index.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# create a new project and move to its directory\ndotnet new blazorwasm -n my-container-app\ncd my-container-app\n\n# add a reference to a (temporary) package that creates the container\ndotnet add package Microsoft.NET.Build.Containers\n\n# publish your project for linux-x64\ndotnet publish --os linux --arch x64 -\np:PublishProfile=DefaultContainer\n\n# run your app using the new container\n\ndocker run -it --rm 5010:80 my-container-app:1.0:0\n```\n\n----------------------------------------\n\nTITLE: Production-Ready CSS Configuration\nDESCRIPTION: HTML head configuration for production environment with bundled TailwindCSS and Blazorise styles\nSOURCE: https://github.com/megabit/blazorise/blob/master/Documentation/Blazorise.Docs/Pages/Blog/2024-08-18_BlazorAndTailwindQuickSetupWithoutNpm/Index.md#2025-04-22_snippet_13\n\nLANGUAGE: html\nCODE:\n```\n<link href=\"https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&amp;display=swap\" rel=\"stylesheet\">\n<link rel=\"stylesheet\" href=\"https://unpkg.com/flowbite@1.5.4/dist/flowbite.min.css\" />\n<link href=\"_content/Blazorise.Icons.FontAwesome/v6/css/all.min.css\" rel=\"stylesheet\">\n<link href=\"_content/Blazorise/blazorise.css\" rel=\"stylesheet\" />\n\n<!-- Bundled CSS using tailwind.config.js, blazorise.tailwind.css, \n     and all Tailwind classes used for Blazorise components (no need for Tailwind CDN) -->\n<link href=\"_content/Blazorise.Tailwind/blazorise.tailwind.prod.css\" rel=\"stylesheet\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing ShareButton Component Code in C#\nDESCRIPTION: Defines the code-behind for the ShareButton component including required parameters for the platform, button size, child content, and additional attributes. Uses EditorRequired attribute to enforce required parameters.\nSOURCE: https://github.com/megabit/blazorise/blob/master/Documentation/Blazorise.Docs/Pages/Blog/2024-06-12_HowToCreateSocialMediaShareButtons/Index.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n@code\n{\n    [Parameter, EditorRequired]\n    public Platform Platform { get; set; }\n\n    [Parameter]\n    public Size ButtonSize { get; set; } = Size.Large;\n\n    [Parameter, EditorRequired]\n    public RenderFragment ChildContent { get; set; }\n\n    [Parameter(CaptureUnmatchedValues = true)]\n    public Dictionary<string, object> AdditionalAttributes { get; set; } = new();\n}\n```\n\n----------------------------------------\n\nTITLE: Reading File Content Asynchronously with Exception Handling in C#\nDESCRIPTION: This snippet enhances the previous example by adding exception handling within the ContinueWith callback. It checks if the task faulted before accessing the result, allowing for graceful error handling.\nSOURCE: https://github.com/megabit/blazorise/blob/master/Documentation/Blazorise.Docs/Pages/Blog/2022-09-08_AsyncAwaitUnderTheHood/Index.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic Task<string> GetDocumentContent()\n{\n    var content = File.ReadAllTextAsync(@\"Document.txt\")\n        .ContinueWith(t =>\n        {\n\t    if (t.IsFaulted)\n            {\n                Console.WriteLine(t.Exception);\n            }\n\t\t\t\t\t\n            return t.Result;\n        });\n    return content;\n}\n```\n\n----------------------------------------\n\nTITLE: Prefixed TailwindCSS Usage Example\nDESCRIPTION: Example of using prefixed TailwindCSS classes in HTML markup\nSOURCE: https://github.com/megabit/blazorise/blob/master/Documentation/Blazorise.Docs/Pages/Blog/2024-08-18_BlazorAndTailwindQuickSetupWithoutNpm/Index.md#2025-04-22_snippet_16\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"tw-bg-blue-500 tw-p-4\">Hello!</div>\n```\n\n----------------------------------------\n\nTITLE: Creating CSS Styles for Social Media Brand Colors\nDESCRIPTION: Defines CSS classes for social media brand background colors with the !important flag to override default styling. Includes examples for X (Twitter), Discord, and GitHub platforms.\nSOURCE: https://github.com/megabit/blazorise/blob/master/Documentation/Blazorise.Docs/Pages/Blog/2024-06-12_HowToCreateSocialMediaShareButtons/Index.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n.bg-x {\n  background-color: #000000 !important;\n}\n\n.bg-discord {\n  background-color: #5865F2 !important;\n}\n\n.bg-github {\n  background-color: #0D1117 !important;\n}\n\n/* \n * other brand colors... add the brands you need here!\n * IMPORTANT NOTE: please make sure, you prefix your class names with `bg-` \n */\n```\n\n----------------------------------------\n\nTITLE: Synchronous File Reading in C#\nDESCRIPTION: A simple synchronous method to read the contents of a file. This snippet demonstrates the basic structure before applying async/await.\nSOURCE: https://github.com/megabit/blazorise/blob/master/Documentation/Blazorise.Docs/Pages/Blog/2022-09-08_AsyncAwaitUnderTheHood/Index.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MyClass {\n    public string GetDocumentContent()\n    {\n        return File.ReadAllText(\"Document.txt\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Azure Service Principal JSON Response Format\nDESCRIPTION: Example JSON response from creating an Azure service principal. This contains the credentials that should be stored securely in GitHub Secrets for the deployment workflow.\nSOURCE: https://github.com/megabit/blazorise/blob/master/Documentation/Blazorise.Docs/Pages/Blog/2024-10-16_BlazorAppAsAnAzureContainerAppWithGitHubContainerRegistry/Index.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"clientId\": \"******\",\n  \"clientSecret\": \"********\",\n  \"subscriptionId\": \"yourSubscriptionId\",\n  \"tenantId\": \"yourTenantId\",\n  \"activeDirectoryEndpointUrl\": \"https://login.microsoftonline.com\",\n  \"resourceManagerEndpointUrl\": \"https://management.azure.com/\",\n  \"activeDirectoryGraphResourceId\": \"https://graph.windows.net/\",\n  \"sqlManagementEndpointUrl\": \"https://management.core.windows.net:8443/\",\n  \"galleryEndpointUrl\": \"https://gallery.azure.com/\",\n  \"managementEndpointUrl\": \"https://management.core.windows.net/\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using the ShareButton Component in a Blazor Page\nDESCRIPTION: Demonstrates how to use the created ShareButton component in a Blazor page, passing the platform parameter and providing child content for the button text.\nSOURCE: https://github.com/megabit/blazorise/blob/master/Documentation/Blazorise.Docs/Pages/Blog/2024-06-12_HowToCreateSocialMediaShareButtons/Index.md#2025-04-22_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<ShareButton Brand=\"@Platform.X\">\n    Share on\n</ShareButton>\n```\n\n----------------------------------------\n\nTITLE: Updating Azure Container App with GitHub Actions\nDESCRIPTION: This YAML snippet shows how to update an Azure Container App with a new container image using Azure CLI within a GitHub Actions workflow. It configures the Azure CLI extension and updates the container app with the image from GitHub Container Registry.\nSOURCE: https://github.com/megabit/blazorise/blob/master/Documentation/Blazorise.Docs/Pages/Blog/2024-10-16_BlazorAppAsAnAzureContainerAppWithGitHubContainerRegistry/Index.md#2025-04-22_snippet_5\n\nLANGUAGE: yml\nCODE:\n```\nuses: azure/CLI@v2\nwith:\n    inlineScript: |\n        az config set extension.use_dynamic_install=yes_without_prompt \n\n        az containerapp update --name ${{ env.CONTAINER_APP_NAME }} \\ \n        --resource-group ${{ env.RESOURCE_GROUP }} \\\n        --image ${{ env.CONTAINER_REGISTRY_SERVER }}/${{ github.actor }}/${{ env.PACKAGE_NAME }}:${{ github.sha }} \\\n```\n\n----------------------------------------\n\nTITLE: Running Tests in Headed Mode with Command Line Options\nDESCRIPTION: Various command line options to run Playwright tests in headed (non-headless) mode for visual debugging. These commands can be used to run all tests or specific filtered tests.\nSOURCE: https://github.com/megabit/blazorise/blob/master/Tests/Blazorise.E2E.Tests/ReadMe.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndotnet test -- Playwright.LaunchOptions.Headless=false\n```\n\n----------------------------------------\n\nTITLE: MSBuild Target for TailwindCSS Integration\nDESCRIPTION: XML configuration for .csproj file that adds a build target to automatically run TailwindCSS CLI during project compilation, ensuring CSS is updated.\nSOURCE: https://github.com/megabit/blazorise/blob/master/Documentation/Blazorise.Docs/Pages/Blog/2024-08-18_BlazorAndTailwindQuickSetupWithoutNpm/Index.md#2025-04-22_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\n<Target Name=\"UpdateTailwindCSS\" BeforeTargets=\"Compile\">\n  <Exec Command=\"./tailwindcss .\\wwwroot\\app.css -o .\\wwwroot\\app.min.css\" ContinueOnError=\"true\">\n    <Output TaskParameter=\"ExitCode\" PropertyName=\"ErrorCode\"/>\n  </Exec>\n  <Error Condition=\"'$(ErrorCode)' != '0'\" Text=\"Error building CSS file\"/>\n</Target>\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub PAT Access for Azure Container App\nDESCRIPTION: This Bash command sets up access credentials for Azure Container App to pull images from GitHub Container Registry. It configures the container app registry with a GitHub username and Personal Access Token for authentication.\nSOURCE: https://github.com/megabit/blazorise/blob/master/Documentation/Blazorise.Docs/Pages/Blog/2024-10-16_BlazorAppAsAnAzureContainerAppWithGitHubContainerRegistry/Index.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n az containerapp registry set --name azurecontainerapptest3 --resource-group testingRG --server ghcr.io --username tesar-tech --password ghp_yourpat\n```\n\n----------------------------------------\n\nTITLE: Installing Playwright Dependencies with PowerShell\nDESCRIPTION: Command to install Playwright browser dependencies using the PowerShell script. This should be run after building the project and from the Tests/Blazorise.E2E.Tests/ directory.\nSOURCE: https://github.com/megabit/blazorise/blob/master/Tests/Blazorise.E2E.Tests/ReadMe.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npowershell .\\bin\\Debug\\net9.0\\playwright.ps1 install --with-deps\n```\n\n----------------------------------------\n\nTITLE: Initializing TailwindCSS Configuration\nDESCRIPTION: TailwindCSS configuration file that specifies which files should be scanned for class usage. This example configures Tailwind to scan Razor components.\nSOURCE: https://github.com/megabit/blazorise/blob/master/Documentation/Blazorise.Docs/Pages/Blog/2024-08-18_BlazorAndTailwindQuickSetupWithoutNpm/Index.md#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  content: [\n    './Components/**/*.razor',\n  ],\n  theme: {\n    extend: {},\n  },\n  plugins: [],\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Service Principal for CI/CD Authentication\nDESCRIPTION: Azure CLI command to create a service principal with contributor role for the Azure Container App. This generates authentication credentials needed for the GitHub Actions workflow to deploy to Azure.\nSOURCE: https://github.com/megabit/blazorise/blob/master/Documentation/Blazorise.Docs/Pages/Blog/2024-10-16_BlazorAppAsAnAzureContainerAppWithGitHubContainerRegistry/Index.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\naz ad sp create-for-rbac --name azurecontainerapptest3 --role contributor --scopes /subscriptions/--your-subscription-id--/resourceGroups/testingRG/providers/Microsoft.App/containerApps/azurecontainerapptest3 /subscriptions/--your-subscription-id--/resourceGroups/testingRG/providers/Microsoft.App/managedEnvironments/AzureContainerAppTest --json-auth\n```\n\n----------------------------------------\n\nTITLE: Installing TailwindCSS CLI on Linux\nDESCRIPTION: Linux commands to download and configure the TailwindCSS CLI executable, making it available system-wide without requiring npm.\nSOURCE: https://github.com/megabit/blazorise/blob/master/Documentation/Blazorise.Docs/Pages/Blog/2024-08-18_BlazorAndTailwindQuickSetupWithoutNpm/Index.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p ~/.local/bin\nwget https://github.com/tailwindlabs/tailwindcss/releases/latest/download/tailwindcss-linux-x64 -O ~/.local/bin/tailwindcss\nchmod +x ~/.local/bin/tailwindcss\n```\n\n----------------------------------------\n\nTITLE: Adding TailwindCSS Directives to CSS\nDESCRIPTION: CSS directives that need to be added to your main CSS file to enable TailwindCSS functionality, importing base styles, components, and utility classes.\nSOURCE: https://github.com/megabit/blazorise/blob/master/Documentation/Blazorise.Docs/Pages/Blog/2024-08-18_BlazorAndTailwindQuickSetupWithoutNpm/Index.md#2025-04-22_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n```\n\n----------------------------------------\n\nTITLE: Centering Elements with Flexbox in CSS\nDESCRIPTION: A simple three-line CSS technique for perfectly centering content within a container using flexbox properties. It uses display: flex along with justify-content and align-items set to center.\nSOURCE: https://github.com/megabit/blazorise/blob/master/Documentation/Blazorise.Docs/Pages/Blog/2022-08-31_CSSTipsForDevelopers/Index.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.center {\n    width: 300px;\n    height: 400px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing TailwindCSS CLI on Windows\nDESCRIPTION: Windows command to install the TailwindCSS CLI tool using winget package manager, which simplifies the setup process without npm.\nSOURCE: https://github.com/megabit/blazorise/blob/master/Documentation/Blazorise.Docs/Pages/Blog/2024-08-18_BlazorAndTailwindQuickSetupWithoutNpm/Index.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nwinget install TailwindLabs.TailwindCSS\n```\n\n----------------------------------------\n\nTITLE: Running TailwindCSS CLI in Terminal\nDESCRIPTION: Command to run the TailwindCSS CLI tool, which processes the input CSS file, adds necessary class definitions based on usage, and outputs the final CSS file with watch mode enabled.\nSOURCE: https://github.com/megabit/blazorise/blob/master/Documentation/Blazorise.Docs/Pages/Blog/2024-08-18_BlazorAndTailwindQuickSetupWithoutNpm/Index.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ntailwindcss -i wwwroot/app.css -o wwwroot/app.min.css -w\n```\n\n----------------------------------------\n\nTITLE: Truncating Text with Ellipsis in CSS\nDESCRIPTION: CSS technique to truncate text with an ellipsis (...) when it exceeds the container width. Uses white-space, overflow, and text-overflow properties.\nSOURCE: https://github.com/megabit/blazorise/blob/master/Documentation/Blazorise.Docs/Pages/Blog/2022-08-31_CSSTipsForDevelopers/Index.md#2025-04-22_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n.truncate {\n    width: 250px;\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n}\n```\n\n----------------------------------------\n\nTITLE: Linux Bash Alias for TailwindCSS CLI\nDESCRIPTION: Bash alias configuration to create a shortcut command (tw) for running TailwindCSS CLI with common parameters on Linux systems.\nSOURCE: https://github.com/megabit/blazorise/blob/master/Documentation/Blazorise.Docs/Pages/Blog/2024-08-18_BlazorAndTailwindQuickSetupWithoutNpm/Index.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nalias tw='tailwindcss -i ./wwwroot/app.css -o ./wwwroot/app.min.css -w'\n```\n\n----------------------------------------\n\nTITLE: TailwindCSS Prefix Configuration\nDESCRIPTION: JavaScript configuration for adding prefixes to TailwindCSS classes to avoid conflicts with other frameworks\nSOURCE: https://github.com/megabit/blazorise/blob/master/Documentation/Blazorise.Docs/Pages/Blog/2024-08-18_BlazorAndTailwindQuickSetupWithoutNpm/Index.md#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n// tailwind.config.js\nmodule.exports = {\n  prefix: 'tw-',\n}\n```\n\n----------------------------------------\n\nTITLE: Limiting Text Content with CSS Line Clamp\nDESCRIPTION: CSS property to limit the number of lines displayed in a text element, particularly useful for excerpts or summaries. Uses the -webkit-line-clamp property.\nSOURCE: https://github.com/megabit/blazorise/blob/master/Documentation/Blazorise.Docs/Pages/Blog/2022-08-31_CSSTipsForDevelopers/Index.md#2025-04-22_snippet_5\n\nLANGUAGE: css\nCODE:\n```\n.field-label {\n    -webkit-line-clamp: 2;\n}\n```\n\n----------------------------------------\n\nTITLE: PowerShell Function for TailwindCSS CLI\nDESCRIPTION: PowerShell function to create a shortcut command (tw) for running TailwindCSS CLI with common parameters, improving development workflow efficiency.\nSOURCE: https://github.com/megabit/blazorise/blob/master/Documentation/Blazorise.Docs/Pages/Blog/2024-08-18_BlazorAndTailwindQuickSetupWithoutNpm/Index.md#2025-04-22_snippet_7\n\nLANGUAGE: ps1\nCODE:\n```\nfunction tw {tailwindcss -i .\\wwwroot\\app.css -o .\\wwwroot\\app.min.css -w}\n```\n\n----------------------------------------\n\nTITLE: TailwindCSS Build Pipeline for Production\nDESCRIPTION: GitHub Actions workflow steps for downloading TailwindCSS CLI and generating minified CSS output\nSOURCE: https://github.com/megabit/blazorise/blob/master/Documentation/Blazorise.Docs/Pages/Blog/2024-08-18_BlazorAndTailwindQuickSetupWithoutNpm/Index.md#2025-04-22_snippet_11\n\nLANGUAGE: yml\nCODE:\n```\n- name: Tailwind - Download and Run CLI\n  run: |\n    wget https://github.com/tailwindlabs/tailwindcss/releases/latest/download/tailwindcss-linux-x64 -O /usr/local/bin/tailwindcss\n    chmod +x /usr/local/bin/tailwindcss\n    cd ./YourProject # where the tailwind.config.js is located\n    tailwindcss -o ./wwwroot/app.css -o ./wwwroot/app.min.css --minify\n```\n\n----------------------------------------\n\nTITLE: Resizing Images to Fit Containers with CSS\nDESCRIPTION: CSS styling to make images fit within their containers without stretching, using object-fit: contain to maintain aspect ratio while filling the available space.\nSOURCE: https://github.com/megabit/blazorise/blob/master/Documentation/Blazorise.Docs/Pages/Blog/2022-08-31_CSSTipsForDevelopers/Index.md#2025-04-22_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n.card-image-full {\n    height: 100%;\n    width: 100%;\n    object-fit: contain\n}\n```\n\n----------------------------------------\n\nTITLE: Running GetIcons.csx with dotnet-script\nDESCRIPTION: Command to execute the GetIcons.csx script using the dotnet-script tool after installation.\nSOURCE: https://github.com/megabit/blazorise/blob/master/Source/Extensions/Blazorise.Icons.Bootstrap/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndotnet script GetIcons.csx\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Workflow for Blazor App CI/CD to Azure Container Apps\nDESCRIPTION: GitHub Actions workflow that builds a Blazor application, pushes it to GitHub Container Registry, and deploys it to Azure Container Apps. It includes authentication to both GitHub and Azure services.\nSOURCE: https://github.com/megabit/blazorise/blob/master/Documentation/Blazorise.Docs/Pages/Blog/2024-10-16_BlazorAppAsAnAzureContainerAppWithGitHubContainerRegistry/Index.md#2025-04-22_snippet_2\n\nLANGUAGE: yml\nCODE:\n```\nname: Build and deploy .NET application to Azure Container App using GHCR\non:\n  push:\n    branches:\n      - master\n\nenv:\n  CONTAINER_APP_NAME: azurecontainerapptest3 # name we set up in azure portal\n  RESOURCE_GROUP: testingRG # azure resource group\n  CONTAINER_REGISTRY_SERVER: ghcr.io # using github container registry\n  DOCKER_FILE_PATH: ./Dockerfile # where our docker file is located\n  PACKAGE_NAME: azurecontainerapptest/containertest #package name on ghcr.io.\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    permissions:\n      packages: write #need to setup the permission to create packages\n      contents: read\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v4\n\n      - name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v3\n\n      - name: Log in to GitHub Container Registry\n        uses: docker/login-action@v3\n        with:\n          registry: ${{ env.CONTAINER_REGISTRY_SERVER }}\n          username: ${{ github.actor }} #github username\n          password: ${{ secrets.GITHUB_TOKEN }} # github token from secrets\n\n      - name: Build and push container image to GHCR\n        uses: docker/build-push-action@v5\n        with:\n          push: true\n          tags: ${{ env.CONTAINER_REGISTRY_SERVER }}/${{ github.actor }}/${{ env.PACKAGE_NAME }}:${{ github.sha }} \n          file: ${{ env.DOCKER_FILE_PATH }}\n\n  deploy:\n    runs-on: ubuntu-latest\n    needs: build\n    steps:\n   \n      - name: Azure Login\n        uses: azure/login@v2\n        with:\n          creds: ${{ secrets.AZURECONTAINERAPPTEST3_SPN }} # Stored secret for Azure login\n\n      - name: Update container app\n        uses: azure/CLI@v2\n        with:\n            inlineScript: |\n                az config set extension.use_dynamic_install=yes_without_prompt \n\n                az containerapp update --name ${{ env.CONTAINER_APP_NAME }} \\ \n                --resource-group ${{ env.RESOURCE_GROUP }} \\\n                --image ${{ env.CONTAINER_REGISTRY_SERVER }}/${{ github.actor }}/${{ env.PACKAGE_NAME }}:${{ github.sha }} \\\n\n      - name: Logout\n        run: az logout\n```\n\n----------------------------------------\n\nTITLE: Applying Fluent Design Token CSS Variables to Root Element\nDESCRIPTION: This CSS snippet shows how to override Fluent design tokens by applying them to the :root element. The variables control various styling aspects like border radius sizes that will be applied globally across the project.\nSOURCE: https://github.com/megabit/blazorise/blob/master/Documentation/Blazorise.Docs/Pages/Blog/2024-03-26_HowToOverrideFluentDesignTokens/Index.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n:root {\n    --borderRadiusNone: 0;\n    --borderRadiusSmall: 2px;\n    --borderRadiusMedium: 4px;\n    --borderRadiusLarge: 6px;\n    --borderRadiusXLarge: 8px;\n    // other variables\n}\n```\n\n----------------------------------------\n\nTITLE: Running GetIcons.csx with dotnet-script in Bash\nDESCRIPTION: Command to execute the GetIcons.csx script using the dotnet-script tool after installation.\nSOURCE: https://github.com/megabit/blazorise/blob/master/Source/Extensions/Blazorise.Icons.Material/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndotnet script GetIcons.csx\n```\n\n----------------------------------------\n\nTITLE: Including Blazorise CSS and JavaScript in Blazor HTML head\nDESCRIPTION: HTML code snippet for adding the required CSS and JavaScript references to the Blazor application's head section, including Bootstrap and FontAwesome dependencies.\nSOURCE: https://github.com/megabit/blazorise/blob/master/Documentation/Blazorise.Docs/NewFilesToBuild.txt#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<head>\n    <!-- ... -->\n    <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.1.1/dist/css/bootstrap.min.css\" rel=\"stylesheet\" integrity=\"sha384-F3w7mX95PdgyTmZZMECAngseQB83DfGTowi0iMjiWaeVhAn4FJkqJByhZMI3AhiU\" crossorigin=\"anonymous\">\n    <link href=\"_content/Blazorise/blazorise.css\" rel=\"stylesheet\" />\n    <link href=\"_content/Blazorise.Bootstrap/blazorise.bootstrap.css\" rel=\"stylesheet\" />\n    <link rel=\"stylesheet\" href=\"https://use.fontawesome.com/releases/v5.15.4/css/all.css\">\n    <!-- ... -->\n</head>\n```\n\n----------------------------------------\n\nTITLE: Including Custom CSS File in Blazorise Project\nDESCRIPTION: This HTML snippet shows how to include the custom CSS file with Fluent design token overrides in your Blazorise project. The link should be added to your index.html or App.razor file.\nSOURCE: https://github.com/megabit/blazorise/blob/master/Documentation/Blazorise.Docs/Pages/Blog/2024-03-26_HowToOverrideFluentDesignTokens/Index.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<link href=\"site.css\" rel=\"stylesheet\" />\n```\n\n----------------------------------------\n\nTITLE: Running GetIcons.csx with dotnet-script in Bash\nDESCRIPTION: This command executes the GetIcons.csx script using dotnet-script to build the FluentUI icons.\nSOURCE: https://github.com/megabit/blazorise/blob/master/Source/Extensions/Blazorise.Icons.FluentUI/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndotnet script GetIcons.csx\n```\n\n----------------------------------------\n\nTITLE: Recording Test Code with Playwright Inspector\nDESCRIPTION: Command to start a recording session that generates C# test code through the Playwright Inspector. The generated tests will interact with a demo application running at the specified localhost address.\nSOURCE: https://github.com/megabit/blazorise/blob/master/Tests/Blazorise.E2E.Tests/ReadMe.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npowershell .\\bin\\Debug\\net9.0\\playwright.ps1 codegen http://localhost:14696\n```\n\n----------------------------------------\n\nTITLE: Adding TailwindCSS via CDN in Blazor\nDESCRIPTION: A script tag to include TailwindCSS from CDN for quick testing in Blazor applications. This approach is only recommended for development, not production environments.\nSOURCE: https://github.com/megabit/blazorise/blob/master/Documentation/Blazorise.Docs/Pages/Blog/2024-08-18_BlazorAndTailwindQuickSetupWithoutNpm/Index.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n  <script src=\"https://cdn.tailwindcss.com\"></script>\n```\n\n----------------------------------------\n\nTITLE: Running GetIcons.csx with dotnet-script\nDESCRIPTION: This command executes the GetIcons.csx script using the dotnet-script tool after it has been installed globally.\nSOURCE: https://github.com/megabit/blazorise/blob/master/Source/Extensions/Blazorise.Icons.FontAwesome/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndotnet script GetIcons.csx\n```\n\n----------------------------------------\n\nTITLE: Starting Tracing in Playwright Tests\nDESCRIPTION: C# code snippet to initiate tracing at the beginning of a test. This captures screenshots, snapshots, and source code during test execution for later analysis.\nSOURCE: https://github.com/megabit/blazorise/blob/master/Tests/Blazorise.E2E.Tests/ReadMe.md#2025-04-22_snippet_2\n\nLANGUAGE: cs\nCODE:\n```\n// Start tracing before creating / navigating a page.\nawait Context.Tracing.StartAsync( new()\n{\n    Screenshots = true,\n    Snapshots = true,\n    Sources = true\n} );\n```\n\n----------------------------------------\n\nTITLE: Tailwind CDN Development Setup\nDESCRIPTION: HTML head configuration for quick testing with TailwindCSS CDN and Blazorise integration\nSOURCE: https://github.com/megabit/blazorise/blob/master/Documentation/Blazorise.Docs/Pages/Blog/2024-08-18_BlazorAndTailwindQuickSetupWithoutNpm/Index.md#2025-04-22_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n<link href=\"https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&amp;display=swap\" rel=\"stylesheet\">\n<link rel=\"stylesheet\" href=\"https://unpkg.com/flowbite@1.5.4/dist/flowbite.min.css\" />\n<link href=\"_content/Blazorise.Icons.FontAwesome/v6/css/all.min.css\" rel=\"stylesheet\">\n\n<!-- CDN to enable Tailwind classes -->\n<script src=\"https://cdn.tailwindcss.com\"></script>\n<!-- Config for custom Tailwind classes, e.g., primary, secondary, success, etc. -->\n<script src=\"_content/Blazorise.Tailwind/blazorise.tailwind.config.js?v=1.7.6.0\"></script>\n\n<!-- Custom CSS shared among all style providers, usually classes with 'b-' prefix (like '.b-input-color-picker') -->\n<link href=\"_content/Blazorise/blazorise.css\" rel=\"stylesheet\" />\n\n<!-- Specific classes related to Tailwind -->\n<link href=\"_content/Blazorise.Tailwind/blazorise.tailwind.css\" rel=\"stylesheet\" />\n```\n\n----------------------------------------\n\nTITLE: Installing dotnet-script globally\nDESCRIPTION: Command to install dotnet-script as a global tool, which provides the ability to run C# scripts (.csx files) from the command line.\nSOURCE: https://github.com/megabit/blazorise/blob/master/Source/Extensions/Blazorise.Icons.Bootstrap/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g dotnet-script\n```\n\n----------------------------------------\n\nTITLE: Running Filtered Tests in Headed Mode\nDESCRIPTION: Command to run a specific test in headed mode by applying a filter and setting Playwright's headless option to false.\nSOURCE: https://github.com/megabit/blazorise/blob/master/Tests/Blazorise.E2E.Tests/ReadMe.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndotnet test --filter \"MyTest\" -- Playwright.LaunchOptions.Headless=false\n```\n\n----------------------------------------\n\nTITLE: Combined Production CSS Configuration\nDESCRIPTION: Final HTML head configuration combining Blazorise, TailwindCSS, and custom styles\nSOURCE: https://github.com/megabit/blazorise/blob/master/Documentation/Blazorise.Docs/Pages/Blog/2024-08-18_BlazorAndTailwindQuickSetupWithoutNpm/Index.md#2025-04-22_snippet_14\n\nLANGUAGE: html\nCODE:\n```\n<link href=\"https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&amp;display=swap\" rel=\"stylesheet\">\n<link rel=\"stylesheet\" href=\"https://unpkg.com/flowbite@1.5.4/dist/flowbite.min.css\" />\n<link href=\"_content/Blazorise.Icons.FontAwesome/v6/css/all.min.css\" rel=\"stylesheet\">\n<link href=\"_content/Blazorise/blazorise.css\" rel=\"stylesheet\" />\n<link href=\"_content/Blazorise.Tailwind/blazorise.tailwind.css\" rel=\"stylesheet\" />\n\n<link rel=\"stylesheet\" href=\"app.min.css\"/>\n```\n\n----------------------------------------\n\nTITLE: Installing dotnet-script Global Tool\nDESCRIPTION: This command installs the dotnet-script global tool which enables running C# scripts (.csx files) from the command line without requiring a full project setup.\nSOURCE: https://github.com/megabit/blazorise/blob/master/Source/Extensions/Blazorise.Icons.FontAwesome/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g dotnet-script\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Headed Testing\nDESCRIPTION: Commands to set environment variables for running tests in headed mode using the HEADED environment variable, which is a more concise alternative to the command-line option.\nSOURCE: https://github.com/megabit/blazorise/blob/master/Tests/Blazorise.E2E.Tests/ReadMe.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nset HEADED=1\ndotnet test\n```\n\n----------------------------------------\n\nTITLE: Debugging Roslyn Source Generator with launchSettings in Blazorise\nDESCRIPTION: JSON configuration for debugging the ApiDocsGenerator source generator. This setup enables debugging the Roslyn component against the Blazorise target project.\nSOURCE: https://github.com/megabit/blazorise/blob/master/Documentation/Blazorise.Docs.Compiler/ApiDocsGenerator/README.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"http://json.schemastore.org/launchsettings.json\",\n  \"profiles\": {\n    \"Generators\": {\n      \"commandName\": \"DebugRoslynComponent\",\n      \"targetProject\": \"../../Blazorise/Blazorise.csproj\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Blazorise FontAwesome Icons Package via NuGet\nDESCRIPTION: Command to install the Blazorise FontAwesome icons package using the .NET CLI.\nSOURCE: https://github.com/megabit/blazorise/blob/master/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Blazorise.Icons.FontAwesome\n```\n\n----------------------------------------\n\nTITLE: Handling String Default Values in Component Parameters\nDESCRIPTION: Example of how the source generator handles string default values in component parameters. The generator can extract and document these values correctly.\nSOURCE: https://github.com/megabit/blazorise/blob/master/Documentation/Blazorise.Docs.Compiler/ApiDocsGenerator/README.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[Parameter] public string SomeValue { get; set; } = \"some string value\";\n```\n\n----------------------------------------\n\nTITLE: Running GetIcons.csx with dotnet-repl\nDESCRIPTION: Command to execute the GetIcons.csx script using dotnet-repl, which allows running C# scripts through the command line.\nSOURCE: https://github.com/megabit/blazorise/blob/master/Source/Extensions/Blazorise.Icons.Bootstrap/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet repl --run GetIcons.csx\n```\n\n----------------------------------------\n\nTITLE: Processing Non-Constant Default Values in Component Parameters\nDESCRIPTION: Demonstrates the source generator's ability to handle non-constant default values like TimeSpan objects in component parameters.\nSOURCE: https://github.com/megabit/blazorise/blob/master/Documentation/Blazorise.Docs.Compiler/ApiDocsGenerator/README.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[Parameter] public TimeSpan Interval { get; set; } = TimeSpan.FromSeconds(10);\n```\n\n----------------------------------------\n\nTITLE: Running GetIcons.csx with dotnet-repl in Bash\nDESCRIPTION: This command uses dotnet-repl to execute the GetIcons.csx script, which builds the FluentUI icons.\nSOURCE: https://github.com/megabit/blazorise/blob/master/Source/Extensions/Blazorise.Icons.FluentUI/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet repl --run GetIcons.csx\n```\n\n----------------------------------------\n\nTITLE: Creating a Card with Image in Blazorise\nDESCRIPTION: HTML markup for a Blazorise Card component with an image that will be styled to fit properly. The card includes a title, text content, and a button.\nSOURCE: https://github.com/megabit/blazorise/blob/master/Documentation/Blazorise.Docs/Pages/Blog/2022-08-31_CSSTipsForDevelopers/Index.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<Card Margin=\"Margin.Is4.OnY\">\n    <CardImage Source=\"/img/gallery/7.jpg\" Alt=\"Placeholder image\" Class=\"card-image-full\">\n    </CardImage>\n    <CardBody>\n        <CardTitle Size=\"5\">Card title</CardTitle>\n        <CardText>\n            Some quick example text to build on the card title and make up the bulk of the card's content.\n        </CardText>\n        <Button Color=\"Color.Primary\">Button</Button>\n    </CardBody>\n</Card>\n```\n\n----------------------------------------\n\nTITLE: Configuring Source Generator Output Location in XML Project Properties\nDESCRIPTION: XML configuration that specifies where the source generator should output its generated files. This enables emitting compiler-generated files to a specific folder for inspection.\nSOURCE: https://github.com/megabit/blazorise/blob/master/Source/SourceGenerators/README.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<PropertyGroup>\n\t<EmitCompilerGeneratedFiles>true</EmitCompilerGeneratedFiles>\n\t<CompilerGeneratedFilesOutputPath>__SOURCEGENERATED__</CompilerGeneratedFilesOutputPath>\n</PropertyGroup>\n```\n\n----------------------------------------\n\nTITLE: Installing Blazorise Bootstrap 5 Package via NuGet\nDESCRIPTION: Command to install the Blazorise Bootstrap 5 provider package using the .NET CLI.\nSOURCE: https://github.com/megabit/blazorise/blob/master/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Blazorise.Bootstrap5\n```\n\n----------------------------------------\n\nTITLE: Defining Metadata for Blazorise Blog Post in Markdown\nDESCRIPTION: This snippet demonstrates the required metadata format for creating a new blog post in the Blazorise documentation. It includes fields for title, description, permalink, canonical URL, image details, author information, posting date, and estimated read time.\nSOURCE: https://github.com/megabit/blazorise/blob/master/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: How to create a Blazorise WASM application: A Beginner's Guide\ndescription: Learn How to create a Blazorise WASM application: A Beginner's Guide.\npermalink: /blog/how-to-create-a-blazorise-application-beginners-guide\ncanonical: /blog/how-to-create-a-blazorise-application-beginners-guide\nimage-url: img/blog/2022-06-08/How_to_create_a_Blazorise_application_A_Beginners_Guide.png\nimage-title: Blazorise WASM application: A Beginner's Guide\nauthor-name: Mladen Macanović\nauthor-image: mladen\nposted-on: June 8th, 2022\nread-time: 5 min\n---\n```\n\n----------------------------------------\n\nTITLE: Installing Blazorise NuGet packages for Bootstrap\nDESCRIPTION: Commands to install the required NuGet packages for using Blazorise with Bootstrap in a Blazor application.\nSOURCE: https://github.com/megabit/blazorise/blob/master/Documentation/Blazorise.Docs/NewFilesToBuild.txt#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\ndotnet add package Blazorise.Bootstrap\ndotnet add package Blazorise.Icons.FontAwesome\n```\n\n----------------------------------------\n\nTITLE: Creating Tabbed Interface for Login and Registration in Blazor\nDESCRIPTION: HTML markup for creating a tabbed interface using Blazorise Tabs component. This creates two tabs - one for login and one for registration, allowing users to switch between forms without navigating to different pages.\nSOURCE: https://github.com/megabit/blazorise/blob/master/Documentation/Blazorise.Docs/Pages/Blog/2022-08-12_CreateTabbedLoginDemo/Index.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<Tabs SelectedTab=\"@selectedTab\" SelectedTabChanged=\"@OnSelectedTabChanged\">\n    <Items>\n        <Tab Name=\"login\">Login</Tab>\n        <Tab Name=\"register\">Register</Tab>\n    </Items>\n    <Content>\n        <TabPanel Name=\"login\">\n            Place form here\n        </TabPanel>\n        <TabPanel Name=\"register\">\n            Place Form Here.\n        </TabPanel>\n    </Content>\n</Tabs>\n```\n\n----------------------------------------\n\nTITLE: Installing dotnet-script with .NET CLI\nDESCRIPTION: Command to install the dotnet-script tool globally using the .NET CLI. This tool enables running C# scripts (.csx files) outside of a .NET project.\nSOURCE: https://github.com/megabit/blazorise/blob/master/Source/Extensions/Blazorise.Icons.Material/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g dotnet-script\n```\n\n----------------------------------------\n\nTITLE: Implementing Tab Selection Handler in C#\nDESCRIPTION: C# code for handling tab selection changes in the tabbed interface. This maintains the state of which tab is currently selected and updates it when the user clicks on a different tab.\nSOURCE: https://github.com/megabit/blazorise/blob/master/Documentation/Blazorise.Docs/Pages/Blog/2022-08-12_CreateTabbedLoginDemo/Index.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n@code{\n    string selectedTab = \"login\";\n\n    private Task OnSelectedTabChanged( string name )\n    {\n        selectedTab = name;\n\n        return Task.CompletedTask;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running GetIcons.csx with dotnet-repl in Bash\nDESCRIPTION: Command to execute the GetIcons.csx script using dotnet-repl, which allows running C# scripts directly from the command line.\nSOURCE: https://github.com/megabit/blazorise/blob/master/Source/Extensions/Blazorise.Icons.Material/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet repl --run GetIcons.csx\n```\n\n----------------------------------------\n\nTITLE: Creating MockNavigationManager for Testing Blazor Navigation\nDESCRIPTION: A testable implementation of NavigationManager that can be used in unit tests to verify navigation occurred. It tracks whether the NavigateTo method was called through a WasNavigateInvoked property.\nSOURCE: https://github.com/megabit/blazorise/blob/master/Documentation/Blazorise.Docs/Pages/Blog/2022-08-19_ReactiveUIFluentValidation/Index.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\npublic sealed class MockNavigationManager\n    : NavigationManager\n{\n    public MockNavigationManager() : base() => \n        this.Initialize(\"http://localhost/\", \"http://localhost/test\");\n\n    protected override void NavigateToCore(string uri, bool forceLoad) \n        => WasNavigateInvoked = true;\n\n    public bool WasNavigateInvoked { get; private set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing dotnet-script globally using .NET CLI\nDESCRIPTION: This command installs dotnet-script as a global tool, which is required for the second method of building FluentUI icons.\nSOURCE: https://github.com/megabit/blazorise/blob/master/Source/Extensions/Blazorise.Icons.FluentUI/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g dotnet-script\n```\n\n----------------------------------------\n\nTITLE: Including Custom CSS in HTML Head Section\nDESCRIPTION: Shows how to include the custom brands.css file in the index.html head section to make the brand color styles available in the Blazor application.\nSOURCE: https://github.com/megabit/blazorise/blob/master/Documentation/Blazorise.Docs/Pages/Blog/2024-06-12_HowToCreateSocialMediaShareButtons/Index.md#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<html>\n<head>\n  <link href=\"brands.css\" rel=\"stylesheet\" />\n  ...\n</head>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Running GetIcons.csx with dotnet-repl\nDESCRIPTION: This command demonstrates how to run the GetIcons.csx script using dotnet-repl, which is one of the options for executing C# scripts in a command-line environment.\nSOURCE: https://github.com/megabit/blazorise/blob/master/Source/Extensions/Blazorise.Icons.FontAwesome/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet repl --run GetIcons.csx\n```\n\n----------------------------------------\n\nTITLE: Sample TailwindCSS Usage in HTML\nDESCRIPTION: An example of using TailwindCSS utility classes to style a div element with specific width, background color, padding, text size, and custom text color.\nSOURCE: https://github.com/megabit/blazorise/blob/master/Documentation/Blazorise.Docs/Pages/Blog/2024-08-18_BlazorAndTailwindQuickSetupWithoutNpm/Index.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"w-fit rounded-lg bg-cyan-500 px-5 py-4 text-6xl text-[#aa22ff]\">\n  Hello Blazor and Tailwind\n</div>\n```\n\n----------------------------------------\n\nTITLE: Installing Yarn Globally with NPM\nDESCRIPTION: Command to install Yarn package manager globally if not already installed. This is needed for the Autonumeric build process.\nSOURCE: https://github.com/megabit/blazorise/blob/master/Source/Blazorise/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install -g yarn\n```\n\n----------------------------------------\n\nTITLE: Adding TailwindCSS Output to GitIgnore\nDESCRIPTION: Configuration to exclude the generated TailwindCSS file from version control\nSOURCE: https://github.com/megabit/blazorise/blob/master/Documentation/Blazorise.Docs/Pages/Blog/2024-08-18_BlazorAndTailwindQuickSetupWithoutNpm/Index.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nYourProject/wwwroot/app.min.css\n```\n\n----------------------------------------\n\nTITLE: Displaying Supported Versions Table in Markdown\nDESCRIPTION: This code snippet creates a markdown table showing which versions of Blazorise are supported for security patches. It uses checkmarks and X marks to indicate support status.\nSOURCE: https://github.com/megabit/blazorise/blob/master/SECURITY.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Version  | Supported          |\n| -------- | ------------------ |\n| 1.5.x    | :white_check_mark: |\n| 1.4.x    | :white_check_mark: |\n| < 1.4.0  | :x:                |\n```\n\n----------------------------------------\n\nTITLE: Loading MAUI Asset using FileSystem in C#\nDESCRIPTION: This C# code demonstrates how to load a MAUI asset file asynchronously using the FileSystem class from .NET MAUI Essentials. It opens the file, reads its contents, and returns them as a string.\nSOURCE: https://github.com/megabit/blazorise/blob/master/Demos/Blazorise.Demo.MAUI/Resources/Raw/AboutAssets.txt#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\tusing var reader = new StreamReader(stream);\n\n\tvar contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Playwright Debug Mode with Environment Variables\nDESCRIPTION: Commands to enable Playwright's debug mode by setting the PWDEBUG environment variable, which provides additional debugging information during test execution.\nSOURCE: https://github.com/megabit/blazorise/blob/master/Tests/Blazorise.E2E.Tests/ReadMe.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nset PWDEBUG=1\ndotnet test\n```\n\n----------------------------------------\n\nTITLE: Stopping and Exporting Tracing in Playwright Tests\nDESCRIPTION: C# code snippet to stop tracing at the end of a test and export the captured data to a zip archive. The exported file can be uploaded to trace.playwright.dev for analysis.\nSOURCE: https://github.com/megabit/blazorise/blob/master/Tests/Blazorise.E2E.Tests/ReadMe.md#2025-04-22_snippet_3\n\nLANGUAGE: cs\nCODE:\n```\n// Stop tracing and export it into a zip archive.\nawait Context.Tracing.StopAsync( new()\n{\n    Path = \"trace.zip\"\n} );\n```\n\n----------------------------------------\n\nTITLE: Creating a New Blazor Project with .NET CLI\nDESCRIPTION: Command to create a new empty Blazor project using the .NET CLI. This initializes a basic .NET 8 Blazor application that will be containerized and deployed to Azure.\nSOURCE: https://github.com/megabit/blazorise/blob/master/Documentation/Blazorise.Docs/Pages/Blog/2024-10-16_BlazorAppAsAnAzureContainerAppWithGitHubContainerRegistry/Index.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet new blazor --empty -o AzureContainerAppTest\n```\n\n----------------------------------------\n\nTITLE: Preserving Complex Default Value Expressions\nDESCRIPTION: Example showing how the source generator preserves the exact expression of default values rather than just the computed result, maintaining the original code's intent.\nSOURCE: https://github.com/megabit/blazorise/blob/master/Documentation/Blazorise.Docs.Compiler/ApiDocsGenerator/README.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n[Parameter] public int ComplexValue { get; set; } = 20 * 200; // Output: \"20 * 200\", not \"4000\"\n```\n\n----------------------------------------\n\nTITLE: Configuring MauiAsset Build Action in .csproj\nDESCRIPTION: This XML snippet shows how to configure the MauiAsset Build Action in the project file to automatically include and deploy raw assets.\nSOURCE: https://github.com/megabit/blazorise/blob/master/Demos/Blazorise.Demo.MAUI/Resources/Raw/AboutAssets.txt#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<MauiAsset Include=\"Resources\\Raw\\**\" LogicalName=\"%(RecursiveDir)%(Filename)%(Extension)\" />\n```"
  }
]