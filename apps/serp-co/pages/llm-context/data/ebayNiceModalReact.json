[
  {
    "owner": "ebay",
    "repo": "nice-modal-react",
    "content": "TITLE: Showing a modal using component reference in React\nDESCRIPTION: This example demonstrates how to show a modal by directly referencing the modal component. It imports the modal component and uses NiceModal.show() to display it with props, returning a promise for handling modal completion.\nSOURCE: https://github.com/ebay/nice-modal-react/blob/main/README.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport NiceModal from '@ebay/nice-modal-react';\nimport MyModal from './MyModal';\n\n//...\nNiceModal.show(MyModal, { someProp: 'hello' }).then(() => {\n  // do something if the task in the modal finished.\n});\n//...\n```\n\n----------------------------------------\n\nTITLE: Setting up NiceModal Provider in React application\nDESCRIPTION: This snippet shows how to wrap a React application with NiceModal.Provider to enable global modal state management throughout the application. This is a necessary setup step for using Nice Modal.\nSOURCE: https://github.com/ebay/nice-modal-react/blob/main/README.md#2025-04-23_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport NiceModal from '@ebay/nice-modal-react';\nReactDOM.render(\n  <React.StrictMode>\n    <NiceModal.Provider>\n      <App />\n    </NiceModal.Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a custom modal component with Ant Design in React\nDESCRIPTION: This code creates a reusable modal component using NiceModal.create and Ant Design's Modal component. It demonstrates how to manage modal state with the useModal hook, handling visibility, and closing operations.\nSOURCE: https://github.com/ebay/nice-modal-react/blob/main/README.md#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Modal } from 'antd';\nimport NiceModal, { useModal } from '@ebay/nice-modal-react';\n\nexport default NiceModal.create(({ name }: { name: string }) => {\n  // Use a hook to manage the modal state\n  const modal = useModal();\n  return (\n    <Modal\n      title=\"Hello Antd\"\n      onOk={() => modal.hide()}\n      visible={modal.visible}\n      onCancel={() => modal.hide()}\n      afterClose={() => modal.remove()}\n    >\n      Hello {name}!\n    </Modal>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Managing Modal State with useModal Hook in React\nDESCRIPTION: Demonstrates how to manage modal state using the useModal hook in a typical modal implementation. This code shows binding the visible property, hiding the modal on close, and removing it after transition.\nSOURCE: https://github.com/ebay/nice-modal-react/blob/main/README.md#2025-04-23_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\n//...\nconst modal = useModal();\nreturn (\n  <Modal\n    visible={modal.visible}\n    title=\"Hello Antd\"\n    onOk={() => modal.hide()}\n    onCancel={() => modal.hide()}\n    afterClose={() => modal.remove()}\n  >\n    Hello NiceModal!\n  </Modal>\n);\n//...\n```\n\n----------------------------------------\n\nTITLE: Using modals with the useModal hook in React\nDESCRIPTION: This snippet demonstrates how to use the useModal hook to control modals from any component. It shows two approaches: using a modal by ID (requires registration) and using it by component reference directly.\nSOURCE: https://github.com/ebay/nice-modal-react/blob/main/README.md#2025-04-23_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport NiceModal, { useModal } from '@ebay/nice-modal-react';\nimport MyAntdModal from './my-antd-modal'; // created by above code\n\nNiceModal.register('my-antd-modal', MyAntdModal);\n//...\n// if you use with id, you need to register it first\nconst modal = useModal('my-antd-modal');\n// or if with component, no need to register\nconst modal = useModal(MyAntdModal);\n\n//...\nmodal.show({ name: 'Nate' }); // show the modal\nmodal.hide(); // hide the modal\n//...\n```\n\n----------------------------------------\n\nTITLE: Declaring and Showing a Modal Component in React with nice-modal-react\nDESCRIPTION: Demonstrates how to declare a modal as a regular component and show it using NiceModal.show() with an ID. This approach allows for inheriting React context and passing props directly to the modal component.\nSOURCE: https://github.com/ebay/nice-modal-react/blob/main/README.md#2025-04-23_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport NiceModal, { useModal } from '@ebay/nice-modal-react';\nimport MyAntdModal from './my-antd-modal'; // created by above code\n\nfunction App() {\n  const showAntdModal = () => {\n    // Show a modal with arguments passed to the component as props\n    NiceModal.show('my-antd-modal')\n  };\n  return (\n    <div className=\"app\">\n      <h1>Nice Modal Examples</h1>\n      <div className=\"demo-buttons\">\n        <button onClick={showAntdModal}>Antd Modal</button>\n      </div>\n      <MyAntdModal id=\"my-antd-modal\" name=\"Nate\" />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Promise API with nice-modal-react for Modal Interactions\nDESCRIPTION: Shows how to use the promise-based API to handle actions after a modal is resolved or rejected. This example demonstrates refreshing a user list after adding a new user through a modal.\nSOURCE: https://github.com/ebay/nice-modal-react/blob/main/README.md#2025-04-23_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nNiceModal.show(AddUserModal)\n  .then(() => {\n    // When call modal.resolve(payload) in the modal component\n    // it will resolve the promise returned by `show` method.\n    // fetchUsers will call the rest API and update the list\n    fetchUsers()\n  })\n  .catch(err=> {\n    // if modal.reject(new Error('something went wrong')), it will reject the promise\n  }); \n```\n\n----------------------------------------\n\nTITLE: Using a modal by component reference in React application\nDESCRIPTION: This example demonstrates how to show a modal using its component reference within an App component. It imports the modal component and shows it with NiceModal.show() when a button is clicked.\nSOURCE: https://github.com/ebay/nice-modal-react/blob/main/README.md#2025-04-23_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nimport NiceModal from '@ebay/nice-modal-react';\nimport MyAntdModal from './my-antd-modal'; // created by above code\n\nfunction App() {\n  const showAntdModal = () => {\n    // Show a modal with arguments passed to the component as props\n    NiceModal.show(MyAntdModal, { name: 'Nate' })\n  };\n  return (\n    <div className=\"app\">\n      <h1>Nice Modal Examples</h1>\n      <div className=\"demo-buttons\">\n        <button onClick={showAntdModal}>Antd Modal</button>\n      </div>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Registering and showing a modal by ID in React\nDESCRIPTION: This snippet shows how to register a modal with an ID and then show it using that ID. This approach allows using the modal without importing it directly, making it more flexible and decoupled.\nSOURCE: https://github.com/ebay/nice-modal-react/blob/main/README.md#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport NiceModal from '@ebay/nice-modal-react';\nimport MyModal from './MyModal';\n\nNiceModal.register('my-modal', MyModal);\n\n// you can use the string id to show/hide the modal anywhere\nNiceModal.show('my-modal', { someProp: 'hello' }).then(() => {\n  // do something if the task in the modal finished.\n});\n//...\n```\n\n----------------------------------------\n\nTITLE: Using a modal by ID in React application\nDESCRIPTION: This code shows how to register a modal with an ID and then show it by that ID. This approach allows using modals without directly importing them, making components more decoupled and easier to manage.\nSOURCE: https://github.com/ebay/nice-modal-react/blob/main/README.md#2025-04-23_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nimport NiceModal from '@ebay/nice-modal-react';\nimport MyAntdModal from './my-antd-modal'; // created by above code\n\n// If you use by id, you need to register the modal component.\n// Normally you create a modals.js file in your project\n// and register all modals there.\nNiceModal.register('my-antd-modal', MyAntdModal);\n\nfunction App() {\n  const showAntdModal = () => {\n    // Show a modal with arguments passed to the component as props\n    NiceModal.show('my-antd-modal', { name: 'Nate' })\n  };\n  return (\n    <div className=\"app\">\n      <h1>Nice Modal Examples</h1>\n      <div className=\"demo-buttons\">\n        <button onClick={showAntdModal}>Antd Modal</button>\n      </div>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Helper Methods with UI Libraries in nice-modal-react\nDESCRIPTION: Shows how to use the provided helper methods for popular UI libraries including Material UI, Ant Design, and Bootstrap React. These helpers simplify binding modal actions to the correct component properties.\nSOURCE: https://github.com/ebay/nice-modal-react/blob/main/README.md#2025-04-23_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\nimport NiceModal, {\n  muiDialog,\n  muiDialogV5,\n  antdModal,\n  antdModalV5,\n  antdDrawer,\n  antdDrawerV5,\n  bootstrapDialog\n} from '@ebay/nice-modal-react';\n\n//...\nconst modal = useModal();\n// For MUI\n<Dialog {...muiDialog(modal)}>\n\n// For MUI V5\n<Dialog {...muiDialogV5(modal)}>\n\n// For ant.design\n<Modal {...antdModal(modal)}>\n\n// For ant.design v4.23.0 or later\n<Modal {...antdModalV5(modal)}>\n\n// For antd drawer\n<Drawer {...antdDrawer(modal)}>\n\n// For antd drawer v4.23.0 or later\n<Drawer {...antdDrawerV5(modal)}>\n\n// For bootstrap dialog\n<Dialog {...bootstrapDialog(modal)}>\n```\n\n----------------------------------------\n\nTITLE: Overriding Helper Properties in nice-modal-react\nDESCRIPTION: Demonstrates how to override properties provided by helper methods. This example shows overriding the onOk handler to perform a custom submit action before hiding the modal.\nSOURCE: https://github.com/ebay/nice-modal-react/blob/main/README.md#2025-04-23_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\nconst handleSubmit = () => {\n  doSubmit().then(() => {\n    modal.hide();\n  });\n}\n<Modal {...antdModal(modal)} onOk={handleSubmit}>\n```\n\n----------------------------------------\n\nTITLE: Accessing Context in Modal Components with nice-modal-react\nDESCRIPTION: Demonstrates how to access React context data within a modal component by using the declarative approach. This example shows declaring a modal in the component tree to inherit context.\nSOURCE: https://github.com/ebay/nice-modal-react/blob/main/README.md#2025-04-23_snippet_15\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function AntdSample() {\n  return (\n    <>\n      <Button type=\"primary\" onClick={() => NiceModal.show('my-antd-modal', { name: 'Nate' })}>\n        Show Modal\n      </Button>\n      <MyAntdModal id=\"my-antd-modal\" {...otherProps} />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating nice-modal-react with Redux for State Management\nDESCRIPTION: Explains how to integrate the nice-modal-react library with Redux for state management. This allows tracking and debugging modal state changes using Redux DevTools.\nSOURCE: https://github.com/ebay/nice-modal-react/blob/main/README.md#2025-04-23_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\n// First combine the reducer\nimport { createStore, applyMiddleware, compose, combineReducers } from 'redux';\nimport { Provider, useSelector, useDispatch } from 'react-redux';\nimport NiceModal from '@ebay/nice-modal-react';\nimport { Button } from 'antd';\nimport { MyAntdModal } from './MyAntdModal';\nimport logger from 'redux-logger';\n\nconst composeEnhancers = (typeof window !== 'undefined' && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) || compose;\nconst enhancer = composeEnhancers(applyMiddleware(logger));\n\nconst store = createStore(\n  combineReducers({\n    modals: NiceModal.reducer,\n    // other reducers...\n  }),\n  enhancer,\n);\n\n// Passing Redux state to the nice modal provider\nconst ModalsProvider = ({ children }) => {\n  const modals = useSelector((s) => s.modals);\n  const dispatch = useDispatch();\n  return (\n    <NiceModal.Provider modals={modals} dispatch={dispatch}>\n      {children}\n    </NiceModal.Provider>\n  );\n};\n\nexport default function ReduxProvider({ children }) {\n  return (\n    <Provider store={store}>\n      <ModalsProvider>{children}</ModalsProvider>\n    </Provider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Testing nice-modal-react Components with React Testing Library\nDESCRIPTION: Shows how to test nice-modal components using the React Testing Library. This example demonstrates rendering a modal provider, showing a modal component, and asserting its visibility.\nSOURCE: https://github.com/ebay/nice-modal-react/blob/main/README.md#2025-04-23_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\nimport NiceModal from '@ebay/nice-modal-react';\nimport { render, act, screen } from '@testing-library/react';\nimport { MyNiceModal } from '../MyNiceModal';\n\ntest('My nice modal works!', () => {\n  render(<NiceModal.Provider />\n  \n  act(() => {\n    NiceModal.show(MyNiceModal);\n  });\n  \n  expect(screen.getByRole('dialog')).toBeVisible();\n});\n```\n\n----------------------------------------\n\nTITLE: Contribution Guide for nice-modal-react\nDESCRIPTION: Instructions for setting up a development environment to contribute to the nice-modal-react library. Includes cloning the repo, installing dependencies, linking the package, and starting development servers.\nSOURCE: https://github.com/ebay/nice-modal-react/blob/main/README.md#2025-04-23_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n# 1. Clone repo\ngit clone https://github.com/eBay/nice-modal-react.git\n\n# 2. Install deps\ncd nice-modal-react\nyarn\n\n# 3. Make local repo as linked\nyarn link\n\n# 4. Start dev server\nyarn dev\n\n# 5. Install examples deps\ncd example\nyarn\n\n# 6. Use local linked lib\nyarn link @ebay/nice-modal-react\n\n# 7. Start examples dev server\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Crawler Access with robots.txt\nDESCRIPTION: This robots.txt configuration allows all web crawlers to access all content on the website. The file references the standard format from robotstxt.org and uses the wildcard user-agent to apply rules to all bots.\nSOURCE: https://github.com/ebay/nice-modal-react/blob/main/example/public/robots.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# https://www.robotstxt.org/robotstxt.html\nUser-agent: *\nDisallow:\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Web Crawler Access in robots.txt\nDESCRIPTION: This configuration allows all web crawlers to access the entire website with no restrictions. The file includes a reference to the robots.txt standard documentation.\nSOURCE: https://github.com/ebay/nice-modal-react/blob/main/docs/robots.txt#2025-04-23_snippet_0\n\nLANGUAGE: robotstxt\nCODE:\n```\n# https://www.robotstxt.org/robotstxt.html\nUser-agent: *\nDisallow:\n```"
  }
]