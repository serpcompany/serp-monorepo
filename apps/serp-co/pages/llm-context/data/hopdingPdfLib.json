[
  {
    "owner": "hopding",
    "repo": "pdf-lib",
    "content": "TITLE: Embedding PDF Pages with pdf-lib in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a new PDF document, embed pages from existing PDFs, and draw them on a new page with specific dimensions and positions. It uses the PDFDocument class from pdf-lib to perform these operations.\nSOURCE: https://github.com/Hopding/pdf-lib/blob/master/README.md#2025-04-12_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { PDFDocument } from 'pdf-lib'\n\n// These should be Uint8Arrays or ArrayBuffers\n// This data can be obtained in a number of different ways\n// If your running in a Node environment, you could use fs.readFile()\n// In the browser, you could make a fetch() call and use res.arrayBuffer()\nconst americanFlagPdfBytes = ...\nconst usConstitutionPdfBytes = ...\n\n// Create a new PDFDocument\nconst pdfDoc = await PDFDocument.create()\n\n// Embed the American flag PDF bytes\nconst [americanFlag] = await pdfDoc.embedPdf(americanFlagPdfBytes)\n\n// Load the U.S. constitution PDF bytes\nconst usConstitutionPdf = await PDFDocument.load(usConstitutionPdfBytes)\n\n// Embed the second page of the constitution and clip the preamble\nconst preamble = await pdfDoc.embedPage(usConstitutionPdf.getPages()[1], {\n  left: 55,\n  bottom: 485,\n  right: 300,\n  top: 575,\n})\n\n// Get the width/height of the American flag PDF scaled down to 30% of\n// its original size\nconst americanFlagDims = americanFlag.scale(0.3)\n\n// Get the width/height of the preamble clipping scaled up to 225% of\n// its original size\nconst preambleDims = preamble.scale(2.25)\n\n// Add a blank page to the document\nconst page = pdfDoc.addPage()\n\n// Draw the American flag image in the center top of the page\npage.drawPage(americanFlag, {\n  ...americanFlagDims,\n  x: page.getWidth() / 2 - americanFlagDims.width / 2,\n  y: page.getHeight() - americanFlagDims.height - 150,\n})\n\n// Draw the preamble clipping in the center bottom of the page\npage.drawPage(preamble, {\n  ...preambleDims,\n  x: page.getWidth() / 2 - preambleDims.width / 2,\n  y: page.getHeight() / 2 - preambleDims.height / 2 - 50,\n})\n\n// Serialize the PDFDocument to bytes (a Uint8Array)\nconst pdfBytes = await pdfDoc.save()\n\n// For example, `pdfBytes` can be:\n//   • Written to a file in Node\n//   • Downloaded from the browser\n//   • Rendered in an <iframe>\n```\n\n----------------------------------------\n\nTITLE: Creating a PDF Form with Multiple Input Types in JavaScript\nDESCRIPTION: Creates a PDF document with various form field types including text fields, radio groups, checkboxes, dropdown menus, and option lists. This example shows how to build and pre-fill interactive PDF forms.\nSOURCE: https://github.com/Hopding/pdf-lib/blob/master/README.md#2025-04-12_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { PDFDocument } from 'pdf-lib'\n\n// Create a new PDFDocument\nconst pdfDoc = await PDFDocument.create()\n\n// Add a blank page to the document\nconst page = pdfDoc.addPage([550, 750])\n\n// Get the form so we can add fields to it\nconst form = pdfDoc.getForm()\n\n// Add the superhero text field and description\npage.drawText('Enter your favorite superhero:', { x: 50, y: 700, size: 20 })\n\nconst superheroField = form.createTextField('favorite.superhero')\nsuperheroField.setText('One Punch Man')\nsuperheroField.addToPage(page, { x: 55, y: 640 })\n\n// Add the rocket radio group, labels, and description\npage.drawText('Select your favorite rocket:', { x: 50, y: 600, size: 20 })\n\npage.drawText('Falcon Heavy', { x: 120, y: 560, size: 18 })\npage.drawText('Saturn IV', { x: 120, y: 500, size: 18 })\npage.drawText('Delta IV Heavy', { x: 340, y: 560, size: 18 })\npage.drawText('Space Launch System', { x: 340, y: 500, size: 18 })\n\nconst rocketField = form.createRadioGroup('favorite.rocket')\nrocketField.addOptionToPage('Falcon Heavy', page, { x: 55, y: 540 })\nrocketField.addOptionToPage('Saturn IV', page, { x: 55, y: 480 })\nrocketField.addOptionToPage('Delta IV Heavy', page, { x: 275, y: 540 })\nrocketField.addOptionToPage('Space Launch System', page, { x: 275, y: 480 })\nrocketField.select('Saturn IV')\n\n// Add the gundam check boxes, labels, and description\npage.drawText('Select your favorite gundams:', { x: 50, y: 440, size: 20 })\n\npage.drawText('Exia', { x: 120, y: 400, size: 18 })\npage.drawText('Kyrios', { x: 120, y: 340, size: 18 })\npage.drawText('Virtue', { x: 340, y: 400, size: 18 })\npage.drawText('Dynames', { x: 340, y: 340, size: 18 })\n\nconst exiaField = form.createCheckBox('gundam.exia')\nconst kyriosField = form.createCheckBox('gundam.kyrios')\nconst virtueField = form.createCheckBox('gundam.virtue')\nconst dynamesField = form.createCheckBox('gundam.dynames')\n\nexiaField.addToPage(page, { x: 55, y: 380 })\nkyriosField.addToPage(page, { x: 55, y: 320 })\nvirtueField.addToPage(page, { x: 275, y: 380 })\ndynamesField.addToPage(page, { x: 275, y: 320 })\n\nexiaField.check()\ndynamesField.check()\n\n// Add the planet dropdown and description\npage.drawText('Select your favorite planet*:', { x: 50, y: 280, size: 20 })\n\nconst planetsField = form.createDropdown('favorite.planet')\nplanetsField.addOptions(['Venus', 'Earth', 'Mars', 'Pluto'])\nplanetsField.select('Pluto')\nplanetsField.addToPage(page, { x: 55, y: 220 })\n\n// Add the person option list and description\npage.drawText('Select your favorite person:', { x: 50, y: 180, size: 18 })\n\nconst personField = form.createOptionList('favorite.person')\npersonField.addOptions([\n  'Julius Caesar',\n  'Ada Lovelace',\n  'Cleopatra',\n  'Aaron Burr',\n  'Mark Antony',\n])\npersonField.select('Ada Lovelace')\npersonField.addToPage(page, { x: 55, y: 70 })\n\n// Just saying...\npage.drawText(`* Pluto should be a planet too!`, { x: 15, y: 15, size: 15 })\n\n// Serialize the PDFDocument to bytes (a Uint8Array)\nconst pdfBytes = await pdfDoc.save()\n\n// For example, `pdfBytes` can be:\n//   • Written to a file in Node\n//   • Downloaded from the browser\n//   • Rendered in an <iframe>\n```\n\n----------------------------------------\n\nTITLE: Filling PDF Form Fields with Text and Images in JavaScript\nDESCRIPTION: Demonstrates loading a PDF with form fields, filling text fields with various information, and embedding PNG images into form fields. The example uses a character sheet template and populates it with Mario-themed data.\nSOURCE: https://github.com/Hopding/pdf-lib/blob/master/README.md#2025-04-12_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { PDFDocument } from 'pdf-lib'\n\n// These should be Uint8Arrays or ArrayBuffers\n// This data can be obtained in a number of different ways\n// If your running in a Node environment, you could use fs.readFile()\n// In the browser, you could make a fetch() call and use res.arrayBuffer()\nconst formPdfBytes = ...\nconst marioImageBytes = ...\nconst emblemImageBytes = ...\n\n// Load a PDF with form fields\nconst pdfDoc = await PDFDocument.load(formPdfBytes)\n\n// Embed the Mario and emblem images\nconst marioImage = await pdfDoc.embedPng(marioImageBytes)\nconst emblemImage = await pdfDoc.embedPng(emblemImageBytes)\n\n// Get the form containing all the fields\nconst form = pdfDoc.getForm()\n\n// Get all fields in the PDF by their names\nconst nameField = form.getTextField('CharacterName 2')\nconst ageField = form.getTextField('Age')\nconst heightField = form.getTextField('Height')\nconst weightField = form.getTextField('Weight')\nconst eyesField = form.getTextField('Eyes')\nconst skinField = form.getTextField('Skin')\nconst hairField = form.getTextField('Hair')\n\nconst alliesField = form.getTextField('Allies')\nconst factionField = form.getTextField('FactionName')\nconst backstoryField = form.getTextField('Backstory')\nconst traitsField = form.getTextField('Feat+Traits')\nconst treasureField = form.getTextField('Treasure')\n\nconst characterImageField = form.getButton('CHARACTER IMAGE')\nconst factionImageField = form.getTextField('Faction Symbol Image')\n\n// Fill in the basic info fields\nnameField.setText('Mario')\nageField.setText('24 years')\nheightField.setText(`5' 1\"`)\nweightField.setText('196 lbs')\neyesField.setText('blue')\nskinField.setText('white')\nhairField.setText('brown')\n\n// Fill the character image field with our Mario image\ncharacterImageField.setImage(marioImage)\n\n// Fill in the allies field\nalliesField.setText(\n  [\n    `Allies:`,\n    `  • Princess Daisy`,\n    `  • Princess Peach`,\n    `  • Rosalina`,\n    `  • Geno`,\n    `  • Luigi`,\n    `  • Donkey Kong`,\n    `  • Yoshi`,\n    `  • Diddy Kong`,\n    ``,\n    `Organizations:`,\n    `  • Italian Plumbers Association`,\n  ].join('\\n'),\n)\n\n// Fill in the faction name field\nfactionField.setText(`Mario's Emblem`)\n\n// Fill the faction image field with our emblem image\nfactionImageField.setImage(emblemImage)\n\n// Fill in the backstory field\nbackstoryField.setText(\n  `Mario is a fictional character in the Mario video game franchise, owned by Nintendo and created by Japanese video game designer Shigeru Miyamoto. Serving as the company's mascot and the eponymous protagonist of the series, Mario has appeared in over 200 video games since his creation. Depicted as a short, pudgy, Italian plumber who resides in the Mushroom Kingdom, his adventures generally center upon rescuing Princess Peach from the Koopa villain Bowser. His younger brother and sidekick is Luigi.`,\n)\n\n// Fill in the traits field\ntraitsField.setText(\n  [\n    `Mario can use three basic three power-ups:`,\n    `  • the Super Mushroom, which causes Mario to grow larger`,\n    `  • the Fire Flower, which allows Mario to throw fireballs`,\n    `  • the Starman, which gives Mario temporary invincibility`,\n  ].join('\\n'),\n)\n\n// Fill in the treasure field\ntreasureField.setText(['• Gold coins', '• Treasure chests'].join('\\n'))\n\n// Serialize the PDFDocument to bytes (a Uint8Array)\nconst pdfBytes = await pdfDoc.save()\n\n// For example, `pdfBytes` can be:\n//   • Written to a file in Node\n//   • Downloaded from the browser\n//   • Rendered in an <iframe>\n```\n\n----------------------------------------\n\nTITLE: Filling PDF Form Fields with Custom Fonts in JavaScript using pdf-lib\nDESCRIPTION: This code demonstrates how to load a PDF with form fields, embed a custom font, fill text fields with Unicode characters, and update field appearances. This is necessary when working with non-latin characters since the default Helvetica font only supports the latin alphabet.\nSOURCE: https://github.com/Hopding/pdf-lib/blob/master/README.md#2025-04-12_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nimport { PDFDocument } from 'pdf-lib';\nimport fontkit from '@pdf-lib/fontkit';\n\n// Fetch the PDF with form fields\nconst formUrl = 'https://pdf-lib.js.org/assets/dod_character.pdf';\nconst formBytes = await fetch(formUrl).then((res) => res.arrayBuffer());\n\n// Fetch the Ubuntu font\nconst fontUrl = 'https://pdf-lib.js.org/assets/ubuntu/Ubuntu-R.ttf';\nconst fontBytes = await fetch(fontUrl).then((res) => res.arrayBuffer());\n\n// Load the PDF with form fields\nconst pdfDoc = await PDFDocument.load(formBytes);\n\n// Embed the Ubuntu font\npdfDoc.registerFontkit(fontkit);\nconst ubuntuFont = await pdfDoc.embedFont(fontBytes);\n\n// Get two text fields from the form\nconst form = pdfDoc.getForm();\nconst nameField = form.getTextField('CharacterName 2');\nconst ageField = form.getTextField('Age');\n\n// Fill the text fields with some fancy Unicode characters (outside\n// the WinAnsi latin character set)\nnameField.setText('Ӎӑȑїõ');\nageField.setText('24 ŷȇȁŗš');\n\n// **Key Step:** Update the field appearances with the Ubuntu font\nform.updateFieldAppearances(ubuntuFont);\n\n// Save the PDF with filled form fields\nconst pdfBytes = await pdfDoc.save();\n```\n\n----------------------------------------\n\nTITLE: Setting Viewer Preferences in PDF Documents with pdf-lib\nDESCRIPTION: Creates a new PDF document and sets various viewer preferences including hiding UI elements, display settings, reading direction, and print settings. Demonstrates comprehensive control over how the PDF will be displayed in viewers.\nSOURCE: https://github.com/Hopding/pdf-lib/blob/master/README.md#2025-04-12_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n  PDFDocument,\n  StandardFonts,\n  NonFullScreenPageMode,\n  ReadingDirection,\n  PrintScaling,\n  Duplex,\n  PDFName,\n} from 'pdf-lib'\n\n// Create a new PDFDocument\nconst pdfDoc = await PDFDocument.create()\n\n// Embed the Times Roman font\nconst timesRomanFont = await pdfDoc.embedFont(StandardFonts.TimesRoman)\n\n// Add a page and draw some text on it\nconst page = pdfDoc.addPage([500, 600])\npage.setFont(timesRomanFont)\npage.drawText('The Life of an Egg', { x: 60, y: 500, size: 50 })\npage.drawText('An Epic Tale of Woe', { x: 125, y: 460, size: 25 })\n\n// Set all available viewer preferences on the PDFDocument:\nconst viewerPrefs = pdfDoc.catalog.getOrCreateViewerPreferences()\nviewerPrefs.setHideToolbar(true)\nviewerPrefs.setHideMenubar(true)\nviewerPrefs.setHideWindowUI(true)\nviewerPrefs.setFitWindow(true)\nviewerPrefs.setCenterWindow(true)\nviewerPrefs.setDisplayDocTitle(true)\n\n// Set the PageMode (otherwise setting NonFullScreenPageMode has no meaning)\npdfDoc.catalog.set(PDFName.of('PageMode'), PDFName.of('FullScreen'))\n\n// Set what happens when fullScreen is closed\nviewerPrefs.setNonFullScreenPageMode(NonFullScreenPageMode.UseOutlines)\n\nviewerPrefs.setReadingDirection(ReadingDirection.L2R)\nviewerPrefs.setPrintScaling(PrintScaling.None)\nviewerPrefs.setDuplex(Duplex.DuplexFlipLongEdge)\nviewerPrefs.setPickTrayByPDFSize(true)\n\n// We can set the default print range to only the first page\nviewerPrefs.setPrintPageRange({ start: 0, end: 0 })\n\n// Or we can supply noncontiguous ranges (e.g. pages 1, 3, and 5-7)\nviewerPrefs.setPrintPageRange([\n  { start: 0, end: 0 },\n  { start: 2, end: 2 },\n  { start: 4, end: 6 },\n])\n\nviewerPrefs.setNumCopies(2)\n\n// Serialize the PDFDocument to bytes (a Uint8Array)\nconst pdfBytes = await pdfDoc.save()\n\n// For example, `pdfBytes` can be:\n//   • Written to a file in Node\n//   • Downloaded from the browser\n//   • Rendered in an <iframe>\n```\n\n----------------------------------------\n\nTITLE: Flattening PDF Form Fields in JavaScript\nDESCRIPTION: Shows how to load a PDF with form fields, fill in various field types (text fields, radio buttons, checkboxes, dropdowns, list boxes), and then flatten the form. Flattening removes the interactive nature of form fields while preserving their appearance.\nSOURCE: https://github.com/Hopding/pdf-lib/blob/master/README.md#2025-04-12_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { PDFDocument } from 'pdf-lib'\n\n// This should be a Uint8Array or ArrayBuffer\n// This data can be obtained in a number of different ways\n// If your running in a Node environment, you could use fs.readFile()\n// In the browser, you could make a fetch() call and use res.arrayBuffer()\nconst formPdfBytes = ...\n\n// Load a PDF with form fields\nconst pdfDoc = await PDFDocument.load(formPdfBytes)\n\n// Get the form containing all the fields\nconst form = pdfDoc.getForm()\n\n// Fill the form's fields\nform.getTextField('Text1').setText('Some Text');\n\nform.getRadioGroup('Group2').select('Choice1');\nform.getRadioGroup('Group3').select('Choice3');\nform.getRadioGroup('Group4').select('Choice1');\n\nform.getCheckBox('Check Box3').check();\nform.getCheckBox('Check Box4').uncheck();\n\nform.getDropdown('Dropdown7').select('Infinity');\n\nform.getOptionList('List Box6').select('Honda');\n\n// Flatten the form's fields\nform.flatten();\n\n// Serialize the PDFDocument to bytes (a Uint8Array)\nconst pdfBytes = await pdfDoc.save()\n\n// For example, `pdfBytes` can be:\n//   • Written to a file in Node\n//   • Downloaded from the browser\n//   • Rendered in an <iframe>\n```\n\n----------------------------------------\n\nTITLE: Creating a New PDF Document with Custom Text in JavaScript\nDESCRIPTION: Creates a new PDF document, embeds the Times Roman font, adds a blank page, and draws formatted text on the page. The example demonstrates basic PDF creation capabilities with text styling.\nSOURCE: https://github.com/Hopding/pdf-lib/blob/master/README.md#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { PDFDocument, StandardFonts, rgb } from 'pdf-lib'\n\n// Create a new PDFDocument\nconst pdfDoc = await PDFDocument.create()\n\n// Embed the Times Roman font\nconst timesRomanFont = await pdfDoc.embedFont(StandardFonts.TimesRoman)\n\n// Add a blank page to the document\nconst page = pdfDoc.addPage()\n\n// Get the width and height of the page\nconst { width, height } = page.getSize()\n\n// Draw a string of text toward the top of the page\nconst fontSize = 30\npage.drawText('Creating PDFs in JavaScript is awesome!', {\n  x: 50,\n  y: height - 4 * fontSize,\n  size: fontSize,\n  font: timesRomanFont,\n  color: rgb(0, 0.53, 0.71),\n})\n\n// Serialize the PDFDocument to bytes (a Uint8Array)\nconst pdfBytes = await pdfDoc.save()\n\n// For example, `pdfBytes` can be:\n//   • Written to a file in Node\n//   • Downloaded from the browser\n//   • Rendered in an <iframe>\n```\n\n----------------------------------------\n\nTITLE: Modifying an Existing PDF Document with JavaScript\nDESCRIPTION: Loads an existing PDF document, embeds the Helvetica font, and adds diagonal text to the first page. This example demonstrates how to modify PDF documents with colored, rotated text.\nSOURCE: https://github.com/Hopding/pdf-lib/blob/master/README.md#2025-04-12_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { degrees, PDFDocument, rgb, StandardFonts } from 'pdf-lib';\n\n// This should be a Uint8Array or ArrayBuffer\n// This data can be obtained in a number of different ways\n// If your running in a Node environment, you could use fs.readFile()\n// In the browser, you could make a fetch() call and use res.arrayBuffer()\nconst existingPdfBytes = ...\n\n// Load a PDFDocument from the existing PDF bytes\nconst pdfDoc = await PDFDocument.load(existingPdfBytes)\n\n// Embed the Helvetica font\nconst helveticaFont = await pdfDoc.embedFont(StandardFonts.Helvetica)\n\n// Get the first page of the document\nconst pages = pdfDoc.getPages()\nconst firstPage = pages[0]\n\n// Get the width and height of the first page\nconst { width, height } = firstPage.getSize()\n\n// Draw a string of text diagonally across the first page\nfirstPage.drawText('This text was added with JavaScript!', {\n  x: 5,\n  y: height / 2 + 300,\n  size: 50,\n  font: helveticaFont,\n  color: rgb(0.95, 0.1, 0.1),\n  rotate: degrees(-45),\n})\n\n\n// Serialize the PDFDocument to bytes (a Uint8Array)\nconst pdfBytes = await pdfDoc.save()\n\n// For example, `pdfBytes` can be:\n//   • Written to a file in Node\n//   • Downloaded from the browser\n//   • Rendered in an <iframe>\n```\n\n----------------------------------------\n\nTITLE: Embedding PNG and JPEG Images in PDF Documents in JavaScript\nDESCRIPTION: Shows how to create a new PDF, embed both JPG and PNG images, scale them to specific dimensions, and position them on a page. The example places a JPG image in the center of the page and a PNG image near the lower right corner of the JPG image.\nSOURCE: https://github.com/Hopding/pdf-lib/blob/master/README.md#2025-04-12_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { PDFDocument } from 'pdf-lib'\n\n// These should be Uint8Arrays or ArrayBuffers\n// This data can be obtained in a number of different ways\n// If your running in a Node environment, you could use fs.readFile()\n// In the browser, you could make a fetch() call and use res.arrayBuffer()\nconst jpgImageBytes = ...\nconst pngImageBytes = ...\n\n// Create a new PDFDocument\nconst pdfDoc = await PDFDocument.create()\n\n// Embed the JPG image bytes and PNG image bytes\nconst jpgImage = await pdfDoc.embedJpg(jpgImageBytes)\nconst pngImage = await pdfDoc.embedPng(pngImageBytes)\n\n// Get the width/height of the JPG image scaled down to 25% of its original size\nconst jpgDims = jpgImage.scale(0.25)\n\n// Get the width/height of the PNG image scaled down to 50% of its original size\nconst pngDims = pngImage.scale(0.5)\n\n// Add a blank page to the document\nconst page = pdfDoc.addPage()\n\n// Draw the JPG image in the center of the page\npage.drawImage(jpgImage, {\n  x: page.getWidth() / 2 - jpgDims.width / 2,\n  y: page.getHeight() / 2 - jpgDims.height / 2,\n  width: jpgDims.width,\n  height: jpgDims.height,\n})\n\n// Draw the PNG image near the lower right corner of the JPG image\npage.drawImage(pngImage, {\n  x: page.getWidth() / 2 - pngDims.width / 2 + 75,\n  y: page.getHeight() / 2 - pngDims.height,\n  width: pngDims.width,\n  height: pngDims.height,\n})\n\n// Serialize the PDFDocument to bytes (a Uint8Array)\nconst pdfBytes = await pdfDoc.save()\n\n// For example, `pdfBytes` can be:\n//   • Written to a file in Node\n//   • Downloaded from the browser\n//   • Rendered in an <iframe>\n```\n\n----------------------------------------\n\nTITLE: Reading Document Metadata from PDF Files with pdf-lib in JavaScript\nDESCRIPTION: This snippet shows how to read metadata from an existing PDF document using pdf-lib. It demonstrates loading a PDF file and accessing various metadata fields such as title, author, subject, creator, keywords, producer, creation date, and modification date.\nSOURCE: https://github.com/Hopding/pdf-lib/blob/master/README.md#2025-04-12_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport { PDFDocument } from 'pdf-lib'\n\n// This should be a Uint8Array or ArrayBuffer\n// This data can be obtained in a number of different ways\n// If your running in a Node environment, you could use fs.readFile()\n// In the browser, you could make a fetch() call and use res.arrayBuffer()\nconst existingPdfBytes = ...\n\n// Load a PDFDocument without updating its existing metadata\nconst pdfDoc = await PDFDocument.load(existingPdfBytes, {\n  updateMetadata: false\n})\n\n// Print all available metadata fields\nconsole.log('Title:', pdfDoc.getTitle())\nconsole.log('Author:', pdfDoc.getAuthor())\nconsole.log('Subject:', pdfDoc.getSubject())\nconsole.log('Creator:', pdfDoc.getCreator())\nconsole.log('Keywords:', pdfDoc.getKeywords())\nconsole.log('Producer:', pdfDoc.getProducer())\nconsole.log('Creation Date:', pdfDoc.getCreationDate())\nconsole.log('Modification Date:', pdfDoc.getModificationDate())\n```\n\n----------------------------------------\n\nTITLE: Embedding Fonts and Measuring Text with pdf-lib in JavaScript\nDESCRIPTION: This example shows how to embed a custom font in a PDF document, measure text dimensions, and draw text and rectangles on a page. It uses the PDFDocument class from pdf-lib and the fontkit module for font embedding.\nSOURCE: https://github.com/Hopding/pdf-lib/blob/master/README.md#2025-04-12_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { PDFDocument, rgb } from 'pdf-lib'\nimport fontkit from '@pdf-lib/fontkit'\n\n// This should be a Uint8Array or ArrayBuffer\n// This data can be obtained in a number of different ways\n// If you're running in a Node environment, you could use fs.readFile()\n// In the browser, you could make a fetch() call and use res.arrayBuffer()\nconst fontBytes = ...\n\n// Create a new PDFDocument\nconst pdfDoc = await PDFDocument.create()\n\n// Register the `fontkit` instance\npdfDoc.registerFontkit(fontkit)\n\n// Embed our custom font in the document\nconst customFont = await pdfDoc.embedFont(fontBytes)\n\n// Add a blank page to the document\nconst page = pdfDoc.addPage()\n\n// Create a string of text and measure its width and height in our custom font\nconst text = 'This is text in an embedded font!'\nconst textSize = 35\nconst textWidth = customFont.widthOfTextAtSize(text, textSize)\nconst textHeight = customFont.heightAtSize(textSize)\n\n// Draw the string of text on the page\npage.drawText(text, {\n  x: 40,\n  y: 450,\n  size: textSize,\n  font: customFont,\n  color: rgb(0, 0.53, 0.71),\n})\n\n// Draw a box around the string of text\npage.drawRectangle({\n  x: 40,\n  y: 450,\n  width: textWidth,\n  height: textHeight,\n  borderColor: rgb(1, 0, 0),\n  borderWidth: 1.5,\n})\n\n// Serialize the PDFDocument to bytes (a Uint8Array)\nconst pdfBytes = await pdfDoc.save()\n\n// For example, `pdfBytes` can be:\n//   • Written to a file in Node\n//   • Downloaded from the browser\n//   • Rendered in an <iframe>\n```\n\n----------------------------------------\n\nTITLE: Copying Pages Between PDF Documents in JavaScript\nDESCRIPTION: Demonstrates how to create a new PDF document and copy pages from existing PDFs into it. The example copies the first page from one document and page 743 from another document, then adds and inserts these pages into the new document.\nSOURCE: https://github.com/Hopding/pdf-lib/blob/master/README.md#2025-04-12_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { PDFDocument } from 'pdf-lib'\n\n// Create a new PDFDocument\nconst pdfDoc = await PDFDocument.create()\n\n// These should be Uint8Arrays or ArrayBuffers\n// This data can be obtained in a number of different ways\n// If your running in a Node environment, you could use fs.readFile()\n// In the browser, you could make a fetch() call and use res.arrayBuffer()\nconst firstDonorPdfBytes = ...\nconst secondDonorPdfBytes = ...\n\n// Load a PDFDocument from each of the existing PDFs\nconst firstDonorPdfDoc = await PDFDocument.load(firstDonorPdfBytes)\nconst secondDonorPdfDoc = await PDFDocument.load(secondDonorPdfBytes)\n\n// Copy the 1st page from the first donor document, and\n// the 743rd page from the second donor document\nconst [firstDonorPage] = await pdfDoc.copyPages(firstDonorPdfDoc, [0])\nconst [secondDonorPage] = await pdfDoc.copyPages(secondDonorPdfDoc, [742])\n\n// Add the first copied page\npdfDoc.addPage(firstDonorPage)\n\n// Insert the second copied page to index 0, so it will be the\n// first page in `pdfDoc`\npdfDoc.insertPage(0, secondDonorPage)\n\n// Serialize the PDFDocument to bytes (a Uint8Array)\nconst pdfBytes = await pdfDoc.save()\n\n// For example, `pdfBytes` can be:\n//   • Written to a file in Node\n//   • Downloaded from the browser\n//   • Rendered in an <iframe>\n```\n\n----------------------------------------\n\nTITLE: Drawing SVG Paths in PDFs using pdf-lib\nDESCRIPTION: Demonstrates how to create a PDF with SVG paths drawn in different styles and configurations. Shows various options like coloring, scaling, and border width when rendering SVG paths to a PDF document.\nSOURCE: https://github.com/Hopding/pdf-lib/blob/master/README.md#2025-04-12_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nimport { PDFDocument, rgb } from 'pdf-lib'\n\n// SVG path for a wavy line\nconst svgPath =\n  'M 0,20 L 100,160 Q 130,200 150,120 C 190,-40 200,200 300,150 L 400,90'\n\n// Create a new PDFDocument\nconst pdfDoc = await PDFDocument.create()\n\n// Add a blank page to the document\nconst page = pdfDoc.addPage()\npage.moveTo(100, page.getHeight() - 5)\n\n// Draw the SVG path as a black line\npage.moveDown(25)\npage.drawSvgPath(svgPath)\n\n// Draw the SVG path as a thick green line\npage.moveDown(200)\npage.drawSvgPath(svgPath, { borderColor: rgb(0, 1, 0), borderWidth: 5 })\n\n// Draw the SVG path and fill it with red\npage.moveDown(200)\npage.drawSvgPath(svgPath, { color: rgb(1, 0, 0) })\n\n// Draw the SVG path at 50% of its original size\npage.moveDown(200)\npage.drawSvgPath(svgPath, { scale: 0.5 })\n\n// Serialize the PDFDocument to bytes (a Uint8Array)\nconst pdfBytes = await pdfDoc.save()\n\n// For example, `pdfBytes` can be:\n//   • Written to a file in Node\n//   • Downloaded from the browser\n//   • Rendered in an <iframe>\n```\n\n----------------------------------------\n\nTITLE: Embedding and Using Custom Fonts in PDF-Lib\nDESCRIPTION: Demonstrates how to embed a custom font (Ubuntu in this case) and use it to draw Unicode text in a PDF document.\nSOURCE: https://github.com/Hopding/pdf-lib/blob/master/README.md#2025-04-12_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nimport { PDFDocument } from 'pdf-lib'\nimport fontkit from '@pdf-lib/fontkit'\n\nconst url = 'https://pdf-lib.js.org/assets/ubuntu/Ubuntu-R.ttf'\nconst fontBytes = await fetch(url).then((res) => res.arrayBuffer())\n\nconst pdfDoc = await PDFDocument.create()\n\npdfDoc.registerFontkit(fontkit)\nconst ubuntuFont = await pdfDoc.embedFont(fontBytes)\n\nconst page = pdfDoc.addPage()\npage.drawText('Some fancy Unicode text in the ŪЬȕǹƚü font', {\n  font: ubuntuFont,\n})\n```\n\n----------------------------------------\n\nTITLE: Handling Encrypted PDFs with pdf-lib in JavaScript\nDESCRIPTION: This snippet shows how pdf-lib handles encrypted PDF documents. By default, attempting to load an encrypted PDF throws an EncryptedPDFError. The ignoreEncryption option allows loading encrypted documents, but modifications may have unexpected results.\nSOURCE: https://github.com/Hopding/pdf-lib/blob/master/README.md#2025-04-12_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nimport { PDFDocument, EncryptedPDFError } from 'pdf-lib'\n\nconst encryptedPdfBytes = ...\n\n// Assignment fails. Throws an `EncryptedPDFError`.\nconst pdfDoc = PDFDocument.load(encryptedPdfBytes)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { PDFDocument } from 'pdf-lib'\n\nconst encryptedPdfBytes = ...\n\n// Assignment succeeds. Does not throw an error.\nconst pdfDoc = PDFDocument.load(encryptedPdfBytes, { ignoreEncryption: true })\n```\n\n----------------------------------------\n\nTITLE: Setting Document Metadata in PDF Files with pdf-lib in JavaScript\nDESCRIPTION: This example illustrates how to set various metadata fields in a PDF document using pdf-lib. It demonstrates setting the title, author, subject, keywords, producer, creator, creation date, and modification date of a PDF file.\nSOURCE: https://github.com/Hopding/pdf-lib/blob/master/README.md#2025-04-12_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { PDFDocument, StandardFonts } from 'pdf-lib'\n\n// Create a new PDFDocument\nconst pdfDoc = await PDFDocument.create()\n\n// Embed the Times Roman font\nconst timesRomanFont = await pdfDoc.embedFont(StandardFonts.TimesRoman)\n\n// Add a page and draw some text on it\nconst page = pdfDoc.addPage([500, 600])\npage.setFont(timesRomanFont)\npage.drawText('The Life of an Egg', { x: 60, y: 500, size: 50 })\npage.drawText('An Epic Tale of Woe', { x: 125, y: 460, size: 25 })\n\n// Set all available metadata fields on the PDFDocument. Note that these fields\n// are visible in the \"Document Properties\" section of most PDF readers.\npdfDoc.setTitle('🥚 The Life of an Egg 🍳')\npdfDoc.setAuthor('Humpty Dumpty')\npdfDoc.setSubject('📘 An Epic Tale of Woe 📖')\npdfDoc.setKeywords(['eggs', 'wall', 'fall', 'king', 'horses', 'men'])\npdfDoc.setProducer('PDF App 9000 🤖')\npdfDoc.setCreator('pdf-lib (https://github.com/Hopding/pdf-lib)')\npdfDoc.setCreationDate(new Date('2018-06-24T01:58:37.228Z'))\npdfDoc.setModificationDate(new Date('2019-12-21T07:00:11.000Z'))\n\n// Serialize the PDFDocument to bytes (a Uint8Array)\nconst pdfBytes = await pdfDoc.save()\n\n// For example, `pdfBytes` can be:\n//   • Written to a file in Node\n//   • Downloaded from the browser\n//   • Rendered in an <iframe>\n```\n\n----------------------------------------\n\nTITLE: Subsetting Fonts in PDF-Lib\nDESCRIPTION: Shows how to subset a font when embedding it in a PDF document to reduce file size increase.\nSOURCE: https://github.com/Hopding/pdf-lib/blob/master/README.md#2025-04-12_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nconst font = await pdfDoc.embedFont(fontBytes, { subset: true });\n```\n\n----------------------------------------\n\nTITLE: Merging Multiple PDFs in pdf-lib v1.0.0\nDESCRIPTION: Demonstrates how to merge multiple PDF documents by copying pages from source documents to a destination document using copyPages and addPage methods.\nSOURCE: https://github.com/Hopding/pdf-lib/blob/master/docs/MIGRATION.md#2025-04-12_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nasync function mergePdfs(pdfsToMerge: string[]) {\n  const mergedPdf = await PDFDocument.create();\n  for (const pdfCopyDoc of pdfsToMerge) {\n    const pdfBytes = fs.readFileSync(pdfCopyDoc);\n    const pdf = await PDFDocument.load(pdfBytes);\n    const copiedPages = await mergedPdf.copyPages(pdf, pdf.getPageIndices());\n    copiedPages.forEach((page) => {\n      mergedPdf.addPage(page);\n    });\n  }\n  const mergedPdfFile = await mergedPdf.save();\n  return mergedPdfFile;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Attachments to PDF Documents with pdf-lib in JavaScript\nDESCRIPTION: This snippet demonstrates how to add file attachments to a PDF document using pdf-lib. It shows how to attach both image and PDF files with custom metadata such as description, creation date, and modification date.\nSOURCE: https://github.com/Hopding/pdf-lib/blob/master/README.md#2025-04-12_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { PDFDocument } from 'pdf-lib'\n\n// These should be Uint8Arrays or ArrayBuffers\n// This data can be obtained in a number of different ways\n// If your running in a Node environment, you could use fs.readFile()\n// In the browser, you could make a fetch() call and use res.arrayBuffer()\nconst jpgAttachmentBytes = ...\nconst pdfAttachmentBytes = ...\n\n// Create a new PDFDocument\nconst pdfDoc = await PDFDocument.create()\n\n// Add the JPG attachment\nawait pdfDoc.attach(jpgAttachmentBytes, 'cat_riding_unicorn.jpg', {\n  mimeType: 'image/jpeg',\n  description: 'Cool cat riding a unicorn! 🦄🐈🕶️',\n  creationDate: new Date('2019/12/01'),\n  modificationDate: new Date('2020/04/19'),\n})\n\n// Add the PDF attachment\nawait pdfDoc.attach(pdfAttachmentBytes, 'us_constitution.pdf', {\n  mimeType: 'application/pdf',\n  description: 'Constitution of the United States 🇺🇸🦅',\n  creationDate: new Date('1787/09/17'),\n  modificationDate: new Date('1992/05/07'),\n})\n\n// Add a page with some text\nconst page = pdfDoc.addPage();\npage.drawText('This PDF has two attachments', { x: 135, y: 415 })\n\n// Serialize the PDFDocument to bytes (a Uint8Array)\nconst pdfBytes = await pdfDoc.save()\n\n// For example, `pdfBytes` can be:\n//   • Written to a file in Node\n//   • Downloaded from the browser\n//   • Rendered in an <iframe>\n```\n\n----------------------------------------\n\nTITLE: Loading an Existing PDF Document in pdf-lib v1.0.0\nDESCRIPTION: Demonstrates how to fetch a PDF from a URL and load it using PDFDocument.load(), which is now asynchronous and requires awaiting the returned promise.\nSOURCE: https://github.com/Hopding/pdf-lib/blob/master/docs/MIGRATION.md#2025-04-12_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst pdfBuffer = await fetch(pdfUrl).then((res) => res.arrayBuffer());\nconst pdfDoc = await PDFDocument.load(pdfBuffer);\n```\n\n----------------------------------------\n\nTITLE: Creating a New PDF Document in pdf-lib v1.0.0\nDESCRIPTION: Shows how to create a new PDF document using the PDFDocument.create() method, which is now asynchronous and returns a promise that must be awaited.\nSOURCE: https://github.com/Hopding/pdf-lib/blob/master/docs/MIGRATION.md#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst pdfDoc = await PDFDocument.create();\n```\n\n----------------------------------------\n\nTITLE: Embedding a Custom Font in PDF with Deno using pdf-lib\nDESCRIPTION: More advanced Deno example that demonstrates embedding a custom font from an external URL and measuring text dimensions. Includes drawing a rectangle around the text to show the calculated dimensions.\nSOURCE: https://github.com/Hopding/pdf-lib/blob/master/README.md#2025-04-12_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n  degrees,\n  PDFDocument,\n  rgb,\n  StandardFonts,\n} from 'https://cdn.skypack.dev/pdf-lib@^1.11.1?dts';\nimport fontkit from 'https://cdn.skypack.dev/@pdf-lib/fontkit@^1.0.0?dts';\n\nconst url = 'https://pdf-lib.js.org/assets/ubuntu/Ubuntu-R.ttf';\nconst fontBytes = await fetch(url).then((res) => res.arrayBuffer());\n\nconst pdfDoc = await PDFDocument.create();\n\npdfDoc.registerFontkit(fontkit);\nconst customFont = await pdfDoc.embedFont(fontBytes);\n\nconst page = pdfDoc.addPage();\n\nconst text = 'This is text in an embedded font!';\nconst textSize = 35;\nconst textWidth = customFont.widthOfTextAtSize(text, textSize);\nconst textHeight = customFont.heightAtSize(textSize);\n\npage.drawText(text, {\n  x: 40,\n  y: 450,\n  size: textSize,\n  font: customFont,\n  color: rgb(0, 0.53, 0.71),\n});\npage.drawRectangle({\n  x: 40,\n  y: 450,\n  width: textWidth,\n  height: textHeight,\n  borderColor: rgb(1, 0, 0),\n  borderWidth: 1.5,\n});\n\nconst pdfBytes = await pdfDoc.save();\n\nawait Deno.writeFile('out.pdf', pdfBytes);\n```\n\n----------------------------------------\n\nTITLE: Drawing Text on a Page in pdf-lib v1.0.0 (New Method)\nDESCRIPTION: Demonstrates the simplified method for drawing text on a PDF page in v1.0.0 using the drawText method directly on the page object.\nSOURCE: https://github.com/Hopding/pdf-lib/blob/master/docs/MIGRATION.md#2025-04-12_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\npage.drawText('Creating PDFs in JavaScript is awesome!', {\n  x: 50,\n  y: 450,\n  size: 15,\n  font: timesRomanFont,\n  color: rgb(0, 0.53, 0.71),\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing PDF-Lib Classes and Functions in UMD Module\nDESCRIPTION: Demonstrates how to access PDF-Lib classes and functions when using the UMD build, comparing it to the NPM module usage.\nSOURCE: https://github.com/Hopding/pdf-lib/blob/master/README.md#2025-04-12_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n// NPM module\nimport { PDFDocument, rgb } from 'pdf-lib';\n\n// UMD module\nvar PDFDocument = PDFLib.PDFDocument;\nvar rgb = PDFLib.rgb;\n```\n\n----------------------------------------\n\nTITLE: Using Standard Fonts in PDF-Lib\nDESCRIPTION: Illustrates how to use one of the 14 standard fonts (Courier in this case) in a PDF document using PDF-Lib.\nSOURCE: https://github.com/Hopding/pdf-lib/blob/master/README.md#2025-04-12_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nimport { PDFDocument, StandardFonts } from 'pdf-lib'\nconst pdfDoc = await PDFDocument.create()\nconst courierFont = await pdfDoc.embedFont(StandardFonts.Courier)\nconst page = pdfDoc.addPage()\npage.drawText('Some boring latin text in the Courier font', {\n  font: courierFont,\n})\n```\n\n----------------------------------------\n\nTITLE: Getting Page Dimensions in pdf-lib v1.0.0\nDESCRIPTION: Shows how to retrieve the dimensions of a PDF page using getSize(), getWidth(), and getHeight() methods.\nSOURCE: https://github.com/Hopding/pdf-lib/blob/master/docs/MIGRATION.md#2025-04-12_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst { width, height } = page.getSize();\npage.getWidth();\npage.getHeight();\n```\n\n----------------------------------------\n\nTITLE: Reading Viewer Preferences from Existing PDFs with pdf-lib\nDESCRIPTION: Loads an existing PDF document and reads all available viewer preferences, outputting them to the console. This is useful for inspecting PDFs to understand their currently configured display and printing settings.\nSOURCE: https://github.com/Hopding/pdf-lib/blob/master/README.md#2025-04-12_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport { PDFDocument } from 'pdf-lib'\n\n// This should be a Uint8Array or ArrayBuffer\n// This data can be obtained in a number of different ways\n// If your running in a Node environment, you could use fs.readFile()\n// In the browser, you could make a fetch() call and use res.arrayBuffer()\nconst existingPdfBytes = ...\n\n// Load a PDFDocument without updating its existing metadata\nconst pdfDoc = await PDFDocument.load(existingPdfBytes)\nconst viewerPrefs = pdfDoc.catalog.getOrCreateViewerPreferences()\n\n// Print all available viewer preference fields\nconsole.log('HideToolbar:', viewerPrefs.getHideToolbar())\nconsole.log('HideMenubar:', viewerPrefs.getHideMenubar())\nconsole.log('HideWindowUI:', viewerPrefs.getHideWindowUI())\nconsole.log('FitWindow:', viewerPrefs.getFitWindow())\nconsole.log('CenterWindow:', viewerPrefs.getCenterWindow())\nconsole.log('DisplayDocTitle:', viewerPrefs.getDisplayDocTitle())\nconsole.log('NonFullScreenPageMode:', viewerPrefs.getNonFullScreenPageMode())\nconsole.log('ReadingDirection:', viewerPrefs.getReadingDirection())\nconsole.log('PrintScaling:', viewerPrefs.getPrintScaling())\nconsole.log('Duplex:', viewerPrefs.getDuplex())\nconsole.log('PickTrayByPDFSize:', viewerPrefs.getPickTrayByPDFSize())\nconsole.log('PrintPageRange:', viewerPrefs.getPrintPageRange())\nconsole.log('NumCopies:', viewerPrefs.getNumCopies())\n```\n\n----------------------------------------\n\nTITLE: Embedding JPEG Images in pdf-lib v1.0.0\nDESCRIPTION: Shows how to embed a JPEG image using the embedJpg method, which now returns a PDFImage object with width and height properties.\nSOURCE: https://github.com/Hopding/pdf-lib/blob/master/docs/MIGRATION.md#2025-04-12_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst image = await pdfDoc.embedJpg(mediaBuffer);\n// image.width, image.height can be used instead of the dims object.\n```\n\n----------------------------------------\n\nTITLE: Saving a PDF Document in pdf-lib v1.0.0\nDESCRIPTION: Demonstrates how to save a PDF document using the pdfDoc.save() method instead of the deprecated PDFDocumentWriter.saveToBytes method.\nSOURCE: https://github.com/Hopding/pdf-lib/blob/master/docs/MIGRATION.md#2025-04-12_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst pdfDocBytes = await pdfDoc.save();\n```\n\n----------------------------------------\n\nTITLE: Registering Fontkit with PDF-Lib using NPM Module\nDESCRIPTION: Shows how to import and register the Fontkit module with a PDF document when using the NPM version of PDF-Lib.\nSOURCE: https://github.com/Hopding/pdf-lib/blob/master/README.md#2025-04-12_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nimport { PDFDocument } from 'pdf-lib'\nimport fontkit from '@pdf-lib/fontkit'\n\nconst pdfDoc = await PDFDocument.create()\npdfDoc.registerFontkit(fontkit)\n```\n\n----------------------------------------\n\nTITLE: Registering Fontkit with PDF-Lib using UMD Module\nDESCRIPTION: Demonstrates how to register the Fontkit instance with a PDF document when using the UMD build of PDF-Lib.\nSOURCE: https://github.com/Hopding/pdf-lib/blob/master/README.md#2025-04-12_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nvar pdfDoc = await PDFLib.PDFDocument.create()\npdfDoc.registerFontkit(fontkit)\n```\n\n----------------------------------------\n\nTITLE: Adding a Page with Custom Dimensions in pdf-lib v1.0.0\nDESCRIPTION: Shows how to add a new page with custom dimensions using the addPage method instead of the deprecated createPage method.\nSOURCE: https://github.com/Hopding/pdf-lib/blob/master/docs/MIGRATION.md#2025-04-12_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst page = pdfDoc.addPage([500, 750]);\n```\n\n----------------------------------------\n\nTITLE: Adding a Default Page in pdf-lib v1.0.0\nDESCRIPTION: Demonstrates how to add a new page with default dimensions using the simplified addPage method without parameters.\nSOURCE: https://github.com/Hopding/pdf-lib/blob/master/docs/MIGRATION.md#2025-04-12_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst page = pdfDoc.addPage();\n```\n\n----------------------------------------\n\nTITLE: Scaling Images in pdf-lib v1.0.0\nDESCRIPTION: Demonstrates how to embed a PNG image and scale it down using the PDFImage.scale method in v1.0.0.\nSOURCE: https://github.com/Hopding/pdf-lib/blob/master/docs/MIGRATION.md#2025-04-12_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst aBigImage = await pdfDoc.embedPng(aBigImageBytes);\nconst { width, height } = aBigImage.scale(0.25);\n```\n\n----------------------------------------\n\nTITLE: Creating a PDF Document with Deno using pdf-lib\nDESCRIPTION: Example of creating a simple PDF document in Deno runtime environment using the pdf-lib library. Uses Skypack CDN for imports and demonstrates text drawing and saving functionality.\nSOURCE: https://github.com/Hopding/pdf-lib/blob/master/README.md#2025-04-12_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n  PDFDocument,\n  StandardFonts,\n  rgb,\n} from 'https://cdn.skypack.dev/pdf-lib@^1.11.1?dts';\n\nconst pdfDoc = await PDFDocument.create();\nconst timesRomanFont = await pdfDoc.embedFont(StandardFonts.TimesRoman);\n\nconst page = pdfDoc.addPage();\nconst { width, height } = page.getSize();\nconst fontSize = 30;\npage.drawText('Creating PDFs in JavaScript is awesome!', {\n  x: 50,\n  y: height - 4 * fontSize,\n  size: fontSize,\n  font: timesRomanFont,\n  color: rgb(0, 0.53, 0.71),\n});\n\nconst pdfBytes = await pdfDoc.save();\n\nawait Deno.writeFile('out.pdf', pdfBytes);\n```\n\n----------------------------------------\n\nTITLE: Displaying a Saved PDF in a Browser with pdf-lib v1.0.0\nDESCRIPTION: Shows how to display a saved PDF in a browser by creating a URL object from the PDF bytes and opening it in a new tab.\nSOURCE: https://github.com/Hopding/pdf-lib/blob/master/docs/MIGRATION.md#2025-04-12_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst pdfUrl = URL.createObjectURL(\n  new Blob([await pdfDoc.save()], { type: 'application/pdf' }),\n);\nwindow.open(pdfUrl, '_blank');\n```\n\n----------------------------------------\n\nTITLE: Accessing PDF Catalog Properties in pdf-lib v1.0.0\nDESCRIPTION: Shows how to access PDF catalog properties in v1.0.0 using PDFName.of() to wrap property names, which is now required unlike in v0.x.x.\nSOURCE: https://github.com/Hopding/pdf-lib/blob/master/docs/MIGRATION.md#2025-04-12_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst acroForm = await pdfDoc.context.lookup(\n  pdfDoc.catalog.get(PDFName.of('AcroForm')),\n);\n```\n\n----------------------------------------\n\nTITLE: Accessing AcroForm Field References in pdf-lib v1.0.0\nDESCRIPTION: Demonstrates how to access AcroForm field references in v1.0.0 using PDFName.of() and context lookup.\nSOURCE: https://github.com/Hopding/pdf-lib/blob/master/docs/MIGRATION.md#2025-04-12_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst acroFieldRefs = await pdfDoc.context.lookup(\n  acroForm.get(PDFName.of('Fields')),\n);\n```\n\n----------------------------------------\n\nTITLE: Getting PDF Page Count in pdf-lib v1.0.0\nDESCRIPTION: Shows how to get the total number of pages in a PDF document using getPages().length.\nSOURCE: https://github.com/Hopding/pdf-lib/blob/master/docs/MIGRATION.md#2025-04-12_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\npdfDoc.getPages().length;\n```\n\n----------------------------------------\n\nTITLE: Retrieving Page CropBox or MediaBox in pdf-lib v1.0.0\nDESCRIPTION: Shows how to access a page's CropBox or MediaBox properties using the page node object.\nSOURCE: https://github.com/Hopding/pdf-lib/blob/master/docs/MIGRATION.md#2025-04-12_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nconst cropBox = page.node.CropBox() || page.node.MediaBox();\n```\n\n----------------------------------------\n\nTITLE: Optimizing PDF Saving in pdf-lib v1.0.0\nDESCRIPTION: Demonstrates how to optimize PDF saving by setting objectsPerTick to Infinity, which speeds up the process for non-client-side applications.\nSOURCE: https://github.com/Hopding/pdf-lib/blob/master/docs/MIGRATION.md#2025-04-12_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nPDFDocument.save({ objectsPerTick: Infinity });\n```\n\n----------------------------------------\n\nTITLE: Optimizing PDF Parsing Speed in pdf-lib v1.0.0\nDESCRIPTION: Shows how to speed up PDF parsing by using the ParseSpeeds.Fastest option, useful for non-client-side applications where blocking the event loop is not a concern.\nSOURCE: https://github.com/Hopding/pdf-lib/blob/master/docs/MIGRATION.md#2025-04-12_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nPDFDocument.load(..., { parseSpeed: ParseSpeeds.Fastest })\n```\n\n----------------------------------------\n\nTITLE: Executing Release Commands for PDF-lib in Bash\nDESCRIPTION: A series of bash commands to prepare and execute a new release of pdf-lib. This includes updating dependencies, running tests across different platforms, and publishing the release.\nSOURCE: https://github.com/Hopding/pdf-lib/blob/master/docs/RELEASING.md#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout master && git pull\nrm -rf node_modules && yarn install\nyarn release:prep\nyarn apps:node 'Preview'\nyarn apps:node 'Adobe Acrobat'\nyarn apps:deno 'Foxit Reader'\nyarn apps:web:mac\nyarn apps:rn:ios\nyarn apps:rn:android\ngit commit -am 'Bump version to X.Y.Z'\nyarn release:next\n# or\nyarn release:latest\n```\n\n----------------------------------------\n\nTITLE: Basic Git Clone and Setup Commands\nDESCRIPTION: Initial commands to clone the pdf-lib repository and install dependencies using yarn package manager.\nSOURCE: https://github.com/Hopding/pdf-lib/blob/master/docs/CONTRIBUTING.md#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/Hopding/pdf-lib.git\ncd pdf-lib\nyarn install\n```\n\n----------------------------------------\n\nTITLE: Building the pdf-lib Project\nDESCRIPTION: Command to compile the pdf-lib project which produces CommonJS, ES2015, and UMD versions of the code. The build process converts TypeScript files to JavaScript and definition files.\nSOURCE: https://github.com/Hopding/pdf-lib/blob/master/docs/CONTRIBUTING.md#2025-04-12_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nyarn build\n```\n\n----------------------------------------\n\nTITLE: Integration Test Commands for Different Environments\nDESCRIPTION: Commands for running integration tests across Node, Deno, browser and React Native environments.\nSOURCE: https://github.com/Hopding/pdf-lib/blob/master/docs/CONTRIBUTING.md#2025-04-12_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn apps:node\nyarn apps:deno\nyarn apps:web\nyarn apps:rn:ios\nyarn apps:rn:android\nadb reverse tcp:8080 tcp:8080\n```\n\n----------------------------------------\n\nTITLE: Scratchpad Development Commands\nDESCRIPTION: Commands for using the scratchpad development environment with TypeScript compilation.\nSOURCE: https://github.com/Hopding/pdf-lib/blob/master/docs/CONTRIBUTING.md#2025-04-12_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyarn scratchpad:start\nyarn scratchpad:run\nyarn scratchpad:flame\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests Command\nDESCRIPTION: Command to execute the Jest unit tests for the project.\nSOURCE: https://github.com/Hopding/pdf-lib/blob/master/docs/CONTRIBUTING.md#2025-04-12_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn test\n```\n\n----------------------------------------\n\nTITLE: Git Commands for PDF Specification File Removal\nDESCRIPTION: Commands used to remove a PDF specification file from the git history of the pdf-lib repository due to a DMCA complaint, using BFG Repo-Cleaner to completely scrub the file from the repository history.\nSOURCE: https://github.com/Hopding/pdf-lib/blob/master/README.md#2025-04-12_snippet_25\n\nLANGUAGE: shell\nCODE:\n```\n$ git clone git@github.com:Hopding/pdf-lib.git\n$ cd pdf-lib\n$ rm pdf_specification.pdf\n$ git commit -am 'Remove pdf_specification.pdf'\n$ bfg --delete-files pdf_specification.pdf\n$ git reflog expire --expire=now --all && git gc --prune=now --aggressive\n$ git push --force\n```\n\n----------------------------------------\n\nTITLE: Running the Linter for pdf-lib\nDESCRIPTION: Command to run TSLint and Prettier linters on the pdf-lib codebase to maintain code style and formatting standards.\nSOURCE: https://github.com/Hopding/pdf-lib/blob/master/docs/CONTRIBUTING.md#2025-04-12_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nyarn lint\n```\n\n----------------------------------------\n\nTITLE: Running the TypeScript Type Checker\nDESCRIPTION: Command to execute the TypeScript type checker without emitting output files, ensuring all source code is correctly typed.\nSOURCE: https://github.com/Hopding/pdf-lib/blob/master/docs/CONTRIBUTING.md#2025-04-12_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nyarn typecheck\n```\n\n----------------------------------------\n\nTITLE: Build Process Output Example\nDESCRIPTION: Sample output from the build process showing the compilation of CommonJS, ES2015, and UMD versions of the pdf-lib library.\nSOURCE: https://github.com/Hopding/pdf-lib/blob/master/docs/CONTRIBUTING.md#2025-04-12_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\nyarn run v1.16.0\n$ yarn build:cjs && yarn build:es && yarn build:umd && yarn build:umd:min\n$ ttsc --module commonjs --outDir cjs\n$ ttsc --module ES2015 --outDir es\n$ rollup --config rollup.config.js --file dist/pdf-lib.js\n\nes/index.js → dist/pdf-lib.js...\ncreated dist/pdf-lib.js in 1.5s\n$ rollup --config rollup.config.js --file dist/pdf-lib.min.js --environment MINIFY\n\nes/index.js → dist/pdf-lib.min.js...\ncreated dist/pdf-lib.min.js in 4s\n✨  Done in 17.34s.\n```\n\n----------------------------------------\n\nTITLE: Viewing PDF Bytes in Hexadecimal Format\nDESCRIPTION: Command for viewing bytes at a specific offset in a PDF file in hexadecimal format, providing a raw byte view for debugging.\nSOURCE: https://github.com/Hopding/pdf-lib/blob/master/docs/CONTRIBUTING.md#2025-04-12_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ncat foo.pdf | tail -c +OFFSET | head -c NUM_BYTES | hexdump -e '6/1 \" %02X\" \"\\n\"'\n```\n\n----------------------------------------\n\nTITLE: Example of Viewing PDF Byte Range\nDESCRIPTION: Example command that shows how to view 100 bytes from a PDF file starting at offset 560477.\nSOURCE: https://github.com/Hopding/pdf-lib/blob/master/docs/CONTRIBUTING.md#2025-04-12_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ncat foo.pdf | tail -c +560477 | head -c 100\n```\n\n----------------------------------------\n\nTITLE: Linter Output Example\nDESCRIPTION: Sample output from running the linters, showing how Prettier and TSLint are executed on source and test files with automatic fixing enabled.\nSOURCE: https://github.com/Hopding/pdf-lib/blob/master/docs/CONTRIBUTING.md#2025-04-12_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\nyarn run v1.16.0\n$ yarn lint:prettier && yarn lint:tslint:src && yarn lint:tslint:tests\n$ prettier --write './{src,tests}/**/*.{ts,js,json}' --loglevel error\n$ tslint --project tsconfig.json --fix\n$ tslint --project tests/tsconfig.json --fix\n✨  Done in 7.89s.\n```\n\n----------------------------------------\n\nTITLE: Type Checker Output Example\nDESCRIPTION: Sample output from running the TypeScript type checker, showing a successful check with no type errors.\nSOURCE: https://github.com/Hopding/pdf-lib/blob/master/docs/CONTRIBUTING.md#2025-04-12_snippet_9\n\nLANGUAGE: plaintext\nCODE:\n```\nyarn run v1.16.0\n$ tsc --noEmit\n✨  Done in 1.38s.\n```\n\n----------------------------------------\n\nTITLE: Viewing PDF Bytes at Specific Offset\nDESCRIPTION: Command for viewing a specific number of bytes at a particular offset in a PDF file, useful for debugging object offsets and cross reference tables.\nSOURCE: https://github.com/Hopding/pdf-lib/blob/master/docs/CONTRIBUTING.md#2025-04-12_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncat foo.pdf | tail -c +OFFSET | head -c NUM_BYTES\n```\n\n----------------------------------------\n\nTITLE: Building Fantasque Sans Font Files with Make\nDESCRIPTION: Instructions for building installable font files using Make. The process requires FontForge with Python scripting support, ttfautohint, sfnt2woff, ttf2eot, and woff2_compress.\nSOURCE: https://github.com/Hopding/pdf-lib/blob/master/assets/fonts/fantasque/README.md#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake\n```\n\n----------------------------------------\n\nTITLE: Installing Fantasque Sans Font Files Locally\nDESCRIPTION: Command to install the TTF fonts into the local .fonts/ directory and update the font cache. This is useful during font modification and testing.\nSOURCE: https://github.com/Hopding/pdf-lib/blob/master/assets/fonts/fantasque/README.md#2025-04-12_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake install\n```\n\n----------------------------------------\n\nTITLE: Drawing Text on a Page in pdf-lib v0.x.x (Old Method)\nDESCRIPTION: Shows the deprecated method for drawing text on a PDF page in v0.x.x, which required creating a content stream, invoking operators, and registering the stream.\nSOURCE: https://github.com/Hopding/pdf-lib/blob/master/docs/MIGRATION.md#2025-04-12_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst contentStream = pdfDoc.createContentStream(\n  drawText(\n    timesRomanFont.encodeText('Creating PDFs in JavaScript is awesome!'),\n    {\n      x: 50,\n      y: 450,\n      size: 15,\n      font: 'TimesRoman',\n      colorRgb: [0, 0.53, 0.71],\n    },\n  ),\n);\npage.addContentStreams(pdfDoc.register(contentStream));\n```"
  }
]