[
  {
    "owner": "ueberdosis",
    "repo": "tiptap-docs",
    "content": "TITLE: Configuring AI Suggestion Extension with Tiptap Editor in TypeScript\nDESCRIPTION: This snippet demonstrates how to import and configure the AI Suggestion extension with Tiptap Editor. It includes setting up authentication credentials for the Tiptap Content AI Cloud API.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/content-ai/capabilities/suggestion/use-with-content-ai-cloud.mdx#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Editor } from '@tiptap/core'\nimport StarterKit from '@tiptap/starter-kit'\nimport AiSuggestion from '@tiptap-pro/extension-ai-suggestion'\n\n// Initialize the editor\nconst editor = new Editor{\n  extensions: [\n    StarterKit,\n    AiSuggestion.configure({\n      // Your Tiptap Content AI app id\n      appId: 'APP_ID_HERE',\n      // This needs to be your generated JWT and MUST NOT be the OpenAI API key!\n      token: 'TOKEN_HERE',\n      // Other configuration options...\n    }),\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Using insertContent Command with Different Content Formats in Tiptap\nDESCRIPTION: Examples of using the insertContent command with various content formats including plain text, HTML (with and without whitespace preservation), JSON/Nodes for single elements, and multiple nodes at once.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/api/commands/content/insert-content.mdx#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Plain text\neditor.commands.insertContent('Example Text')\n\n// HTML\neditor.commands.insertContent('<h1>Example Text</h1>')\n\n// HTML with trim white space\neditor.commands.insertContent('<h1>Example Text</h1>', {\n  parseOptions: {\n    preserveWhitespace: false,\n  },\n})\n\n// JSON/Nodes\neditor.commands.insertContent({\n  type: 'heading',\n  attrs: {\n    level: 1,\n  },\n  content: [\n    {\n      type: 'text',\n      text: 'Example Text',\n    },\n  ],\n})\n\n// Multiple nodes at once\neditor.commands.insertContent([\n  {\n    type: 'paragraph',\n    content: [\n      {\n        type: 'text',\n        text: 'First paragraph',\n      },\n    ],\n  },\n  {\n    type: 'paragraph',\n    content: [\n      {\n        type: 'text',\n        text: 'Second paragraph',\n      },\n    ],\n  },\n])\n```\n\n----------------------------------------\n\nTITLE: Basic Tiptap Editor Configuration\nDESCRIPTION: This snippet demonstrates the fundamental configuration for a Tiptap editor, including element binding, registering extensions, setting initial content, and configuring editor behavior options.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/getting-started/configure.mdx#2025-04-19_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport { Editor } from '@tiptap/core'\nimport Document from '@tiptap/extension-document'\nimport Paragraph from '@tiptap/extension-paragraph'\nimport Text from '@tiptap/extension-text'\n\nnew Editor({\n  // bind Tiptap to the `.element`\n  element: document.querySelector('.element'),\n  // register extensions\n  extensions: [Document, Paragraph, Text],\n  // set the initial content\n  content: '<p>Example Text</p>',\n  // place the cursor in the editor after initialization\n  autofocus: true,\n  // make the text editable (default is true)\n  editable: true,\n  // prevent loading the default CSS (which isn't much anyway)\n  injectCSS: false,\n})\n```\n\n----------------------------------------\n\nTITLE: Updating a Document with JSON in TypeScript\nDESCRIPTION: This TypeScript code demonstrates how to fetch a document's JSON representation, modify specific nodes using unique identifiers, and send the updated JSON back to the server. It uses axios for HTTP requests.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/collaboration/documents/content-injection.mdx#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Define the document name, secret, and application ID\nconst docName = '' // URI-encoded if necessary\nconst secret = ''\nconst appId = '';\n\n// Construct the base URL\nconst url = `https://${appId}.collab.tiptap.cloud`\n\n// Fetch the current document's JSON representation\nconst docJson = await axios.get(`${url}/api/documents/${docName}?format=json`, {\n    headers: {\n    Authorization: secret\n  },\n})\n\n// Extract the document's JSON content\nconst tiptapJson = docJson.data\nconst nodes = tiptapJson.content\n\n// Find and log specific nodes using their unique identifiers\nconst query = nodes.find(n => n.attrs?.identifier === 'fe5c0789-85d9-4877-a2c3-bccf5d874866').content[0].text\nconst resultTable = nodes.find(n => n.attrs?.identifier === '246368b6-0746-4ca1-a16f-8d964aff4041')\n\nconsole.log(`Query: ${query}`)\nconsole.log(JSON.stringify(resultTable.content))\n\n// Append new content to the result table node\nresultTable.content.push({\n  // New table row content here\n  {\n    \"type\": \"tableRow\",\n    \"content\": [\n      {\n        \"type\": \"tableCell\",\n        \"attrs\": {\n          \"colspan\": 1,\n          \"rowspan\": 1\n        },\n        \"content\": [\n          {\n            \"type\": \"paragraph\",\n            \"attrs\": {\n              \"textAlign\": \"left\"\n            },\n            \"content\": [\n              {\n                \"type\": \"text\",\n                \"text\": \"Jan\"\n              }\n            ]\n          }\n        ]\n      },\n      {\n        \"type\": \"tableCell\",\n        \"attrs\": {\n          \"colspan\": 1,\n          \"rowspan\": 1\n        },\n        \"content\": [\n          {\n            \"type\": \"paragraph\",\n            \"attrs\": {\n              \"textAlign\": \"left\"\n            },\n            \"content\": [\n              {\n                \"type\": \"text\",\n                \"text\": \"Thurau\"\n              }\n            ]\n          }\n        ]\n      },\n      {\n        \"type\": \"tableCell\",\n        \"attrs\": {\n          \"colspan\": 1,\n          \"rowspan\": 1\n        },\n        \"content\": [\n          {\n            \"type\": \"paragraph\",\n            \"attrs\": {\n              \"textAlign\": \"left\"\n            },\n            \"content\": [\n              {\n                \"type\": \"text\",\n                \"text\": \"jan@janthurau.de\"\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  }\n})\n\n// Send the updated JSON back to the server to apply the changes\nawait axios.patch(`${url}/api/documents/${docName}?format=json`, tiptapJson, {\n  headers: {\n    Authorization: secret\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Tiptap component in Svelte\nDESCRIPTION: A Svelte component that initializes Tiptap editor with basic formatting controls. It handles editor lifecycle with onMount and onDestroy hooks and includes basic heading and paragraph formatting buttons.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/getting-started/install/svelte.mdx#2025-04-19_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\timport { onMount, onDestroy } from 'svelte';\n\timport { Editor } from '@tiptap/core';\n\timport StarterKit from '@tiptap/starter-kit';\n\n\tlet element;\n\tlet editor;\n\n\tonMount(() => {\n\t\teditor = new Editor({\n\t\t\telement: element,\n\t\t\textensions: [StarterKit],\n\t\t\tcontent: '<p>Hello World! üåçÔ∏è </p>',\n\t\t\tonTransaction: () => {\n\t\t\t\t// force re-render so `editor.isActive` works as expected\n\t\t\t\teditor = editor;\n\t\t\t},\n\t\t});\n\t});\n\n\tonDestroy(() => {\n\t\tif (editor) {\n\t\t\teditor.destroy();\n\t\t}\n\t});\n</script>\n\n{#if editor}\n\t<button\n\t\ton:click={() => editor.chain().focus().toggleHeading({ level: 1 }).run()}\n\t\tclass:active={editor.isActive('heading', { level: 1 })}\n\t>\n\t\tH1\n\t</button>\n\t<button\n\t\ton:click={() => editor.chain().focus().toggleHeading({ level: 2 }).run()}\n\t\tclass:active={editor.isActive('heading', { level: 2 })}\n\t>\n\t\tH2\n\t</button>\n\t<button\n\t\ton:click={() => editor.chain().focus().setParagraph().run()}\n\t\tclass:active={editor.isActive('paragraph')}\n\t>\n\t\tP\n\t</button>\n{/if}\n\n<div bind:this={element} />\n\n<style>\n\tbutton.active {\n\t\tbackground: black;\n\t\tcolor: white;\n\t}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Implementing the Emoji Dropdown Menu with Tiptap React\nDESCRIPTION: Example React component showing how to integrate the EmojiDropdownMenu with a Tiptap editor instance. It demonstrates proper import statements, editor configuration with the Emoji extension, and component structure.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/ui-components/components/emoji-dropdown-menu.mdx#2025-04-19_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { EmojiDropdownMenu } from '@/components/tiptap-ui/emoji-dropdown-menu'\nimport { useEditor, EditorContent } from '@tiptap/react'\nimport { Emoji } from '@tiptap-pro/extension-emoji'\n\nexport default function MyEditor() {\n  const editor = useEditor({\n    extensions: [\n      // other extensions\n      Emoji.configure({\n        // emoji configuration\n      }),\n    ],\n  })\n\n  return (\n    <div>\n      <EditorContent editor={editor} />\n      <EmojiDropdownMenu editor={editor} />\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Plain Text Content from Tiptap Editor\nDESCRIPTION: This example illustrates how to use the 'getText()' method to retrieve the current editor document as plain text from the Tiptap Editor, with an option to specify block separators.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/api/editor.mdx#2025-04-19_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\n// Give me plain text!\neditor.getText()\n// Add two line breaks between nodes\neditor.getText({ blockSeparator: '\\n\\n' })\n```\n\n----------------------------------------\n\nTITLE: Installing StarterKit Extension for Tiptap\nDESCRIPTION: Command to install the StarterKit extension using npm package manager.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/functionality/starterkit.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @tiptap/starter-kit\n```\n\n----------------------------------------\n\nTITLE: Tiptap Component with Composition API\nDESCRIPTION: Alternative implementation using Vue 3's Composition API with useEditor hook\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/getting-started/install/vue3.mdx#2025-04-19_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <editor-content :editor=\"editor\" />\n</template>\n\n<script>\n  import { useEditor, EditorContent } from '@tiptap/vue-3'\n  import StarterKit from '@tiptap/starter-kit'\n\n  export default {\n    components: {\n      EditorContent,\n    },\n\n    setup() {\n      const editor = useEditor({\n        content: \"<p>I'm running Tiptap with Vue.js. üéâ</p>\",\n        extensions: [StarterKit],\n      })\n\n      return { editor }\n    },\n  }\n</script>\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Node in Tiptap\nDESCRIPTION: This snippet demonstrates how to create a custom node extension for Tiptap. Nodes represent a type of content in the document tree.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/custom-extensions/create-new.mdx#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Node } from '@tiptap/core'\n\nconst CustomNode = Node.create({\n  name: 'customNode',\n\n  // Your code goes here.\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Node Views in Tiptap Image Extension\nDESCRIPTION: Demonstrates how to create a custom node view for a Tiptap extension. This example extends the Image extension to add a click event listener to the image container.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/custom-extensions/extend-existing.mdx#2025-04-19_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nimport Image from '@tiptap/extension-image'\n\nconst CustomImage = Image.extend({\n  addNodeView() {\n    return () => {\n      const container = document.createElement('div')\n\n      container.addEventListener('click', (event) => {\n        alert('clicked on the container')\n      })\n\n      const content = document.createElement('div')\n      container.append(content)\n\n      return {\n        dom: container,\n        contentDOM: content,\n      }\n    }\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Complete Collaborative Editor Implementation\nDESCRIPTION: Full implementation of Tiptap Editor with collaboration features including server connection and content synchronization.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/collaboration/getting-started/install.mdx#2025-04-19_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport './styles.scss'\n\nimport Document from '@tiptap/extension-document'\nimport Paragraph from '@tiptap/extension-paragraph'\nimport Text from '@tiptap/extension-text'\nimport { EditorContent, useEditor } from '@tiptap/react'\nimport React from 'react'\n\nimport Collaboration from '@tiptap/extension-collaboration'\nimport * as Y from 'yjs'\n\nimport { useEffect } from 'react'\nimport { TiptapCollabProvider } from '@hocuspocus/provider'\n\nconst doc = new Y.Doc()\n\nexport default () => {\n  const editor = useEditor({\n    extensions: [\n      Document,\n      Paragraph,\n      Text,\n      Collaboration.configure({\n        document: doc,\n      }),\n    ],\n    content: `\n      <p>\n        This is a radically reduced version of Tiptap. It has support for a document, with paragraphs and text. That's it. It's probably too much for real minimalists though.\n      </p>\n      <p>\n        The paragraph extension is not really required, but you need at least one node. Sure, that node can be something different.\n      </p>\n    `,\n  })\n\n  useEffect(() => {\n    const provider = new TiptapCollabProvider({\n      name: 'document.name',\n      appId: '7j9y6m10',\n      token: 'notoken',\n      document: doc,\n    })\n  }, [])\n\n  return <EditorContent editor={editor} />\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Tiptap Editor with StarterKit Extension\nDESCRIPTION: JavaScript code to create a new Tiptap Editor instance with the StarterKit extension. This loads all included extensions at once.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/functionality/starterkit.mdx#2025-04-19_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Editor } from '@tiptap/core'\nimport StarterKit from '@tiptap/starter-kit'\n\nconst editor = new Editor({\n  content: '<p>Example Text</p>',\n  extensions: [StarterKit],\n})\n```\n\n----------------------------------------\n\nTITLE: Tiptap Component with v-model Support\nDESCRIPTION: Enhanced Tiptap component implementation with v-model binding support for form integration.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/getting-started/install/vue2.mdx#2025-04-19_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <editor-content :editor=\"editor\" />\n</template>\n\n<script>\n  import { Editor, EditorContent } from '@tiptap/vue-2'\n  import StarterKit from '@tiptap/starter-kit'\n\n  export default {\n    components: {\n      EditorContent,\n    },\n\n    props: {\n      value: {\n        type: String,\n        default: '',\n      },\n    },\n\n    data() {\n      return {\n        editor: null,\n      }\n    },\n\n    watch: {\n      value(value) {\n        // HTML\n        const isSame = this.editor.getHTML() === value\n\n        // JSON\n        // const isSame = JSON.stringify(this.editor.getJSON()) === JSON.stringify(value)\n\n        if (isSame) {\n          return\n        }\n\n        this.editor.commands.setContent(value, false)\n      },\n    },\n\n    mounted() {\n      this.editor = new Editor({\n        content: this.value,\n        extensions: [StarterKit],\n        onUpdate: () => {\n          // HTML\n          this.$emit('input', this.editor.getHTML())\n\n          // JSON\n          // this.$emit('input', this.editor.getJSON())\n        },\n      })\n    },\n\n    beforeDestroy() {\n      this.editor.destroy()\n    },\n  }\n</script>\n```\n\n----------------------------------------\n\nTITLE: Adding Extensions Beyond StarterKit\nDESCRIPTION: This example shows how to add additional extensions that are not included in the StarterKit bundle, specifically adding the Strike extension alongside StarterKit.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/getting-started/configure.mdx#2025-04-19_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nimport StarterKit from '@tiptap/starter-kit'\nimport Strike from '@tiptap/extension-strike'\n\nnew Editor({\n  extensions: [StarterKit, Strike],\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Attributes\nDESCRIPTION: Demonstrates how to add and configure custom attributes for nodes with rendering control.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/custom-extensions/extend-existing.mdx#2025-04-19_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst CustomParagraph = Paragraph.extend({\n  addAttributes() {\n    return {\n      color: {\n        default: null,\n        parseHTML: (element) => element.getAttribute('data-color'),\n        renderHTML: (attributes) => {\n          return {\n            'data-color': attributes.color,\n            style: `color: ${attributes.color}`,\n          }\n        },\n      },\n    }\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Streaming Rich Text AI Responses in Tiptap Editor\nDESCRIPTION: This code demonstrates how to stream AI-generated content with rich text formatting into a Tiptap editor. It uses the aiTextPrompt method with the format option set to 'rich-text' to enable formatted responses including elements like lists, bold text, and other rich text features.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/content-ai/capabilities/generation/text-generation/format.mdx#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Steams the response as rich text into the editor\neditor\n  .chain()\n  .aiTextPrompt({\n    text: 'Write a list of popular programming languages',\n    stream: true,\n    format: 'rich-text',\n  })\n  .run()\n```\n\n----------------------------------------\n\nTITLE: Integrating Tiptap component in App\nDESCRIPTION: Example of how to integrate the Tiptap component into the main App component.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/getting-started/install/react.mdx#2025-04-19_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport Tiptap from './Tiptap'\n\nconst App = () => {\n  return (\n    <div className=\"card\">\n      <Tiptap />\n    </div>\n  )\n}\n\nexport default App\n```\n\n----------------------------------------\n\nTITLE: Creating a Thread with setThread Command in JavaScript\nDESCRIPTION: Creates a new comment thread at the current selection point within the editor. Accepts content text, optional thread metadata, and initial comment data.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/comments/integrate/editor-commands.mdx#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\neditor.commands.setThread({\n  content: 'This is a new thread',\n  data: { authorId: '123' },\n  commentData: { authorId: '123' },\n})\n```\n\n----------------------------------------\n\nTITLE: Defining AI Suggestion Commands for Tiptap in TypeScript\nDESCRIPTION: Extends the Tiptap core commands with AI suggestion functionality, allowing developers to load, apply, reject, and manage AI-powered text suggestions in the editor.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/content-ai/capabilities/suggestion/api-reference.mdx#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    aiSuggestion: {\n      /**\n       * Load AI suggestions immediately.\n       */\n      loadAiSuggestions: () => ReturnType\n      /**\n       * Load AI suggestions after a debounce timeout defined in the\n       * extension options.\n       */\n      loadAiSuggestionsDebounced: () => ReturnType\n      /**\n       * Set the AI suggestions to be displayed.\n       *\n       * @param suggestions The suggestions to be displayed.\n       */\n      setAiSuggestions: (suggestions: Suggestion[]) => ReturnType\n      /**\n       * Set a suggestion as selected. The selected suggestion will have a\n       * different style in the editor.\n       * */\n      selectAiSuggestion: (suggestionId: string) => ReturnType\n      /**\n       * Apply a suggestion to the editor, modifying its content.\n       *\n       * @param options The id of the suggestion and the selected replacement\n       * option. If the replacement option is not provided, the first option\n       * will be used. The format of the replaced content can also be\n       * customized.\n       */\n      applyAiSuggestion: (options: ApplyAiSuggestionOptions) => ReturnType\n      /**\n       * Marks a suggestion as rejected, removing it from the list of suggestions.\n       *\n       * @param suggestionId The id of the rejected suggestion\n       */\n      rejectAiSuggestion: (suggestionId: string) => ReturnType\n\n      /**\n       * Sets the suggestions to be rejected. This command is useful for undoing\n       * rejections or for clearing all rejections.\n       *\n       * @param rejections The rejections to be set.\n       */\n      setAiSuggestionRejections: (rejections: AiSuggestionRejection[]) => ReturnType\n\n      /**\n       * Applies all Ai Suggestions that have not been rejected. Applies\n       * the first replacement option for each suggestion.\n       */\n      applyAllAiSuggestions: (options?: ApplyAllAiSuggestionOptions) => ReturnType\n      /**\n       * Sets the AI suggestion rules. Lets you update the rules used for\n       * proofreading without having to reload the editor.\n       *\n       * This command does not reload the suggestions. To reload the suggestions\n       * with the new rules, call the `loadAiSuggestions` command, like this:\n       *\n       * ```js\n       * editor.chain().setAiSuggestionRules(newRules).loadAiSuggestions().run()\n       * ```\n       */\n      setAiSuggestionRules: (rules?: AiSuggestionRule[]) => ReturnType\n\n      /**\n       * Sets the AI Suggestion context. This context is used to provide\n       * additional information to the AI model for generating suggestions.\n       *\n       * This command does not reload the suggestions. To reload the suggestions\n       * with the new context, call the `loadAiSuggestions` command, like this:\n       *\n       * ```js\n       * editor.chain().setAiSuggestionContext(newContext).loadAiSuggestions().run()\n       * ```\n       *\n       * @param context Optional context to provide additional information to the AI model\n       */\n      setAiSuggestionContext: (context: string | null) => ReturnType\n    }\n  }\n}\n\nexport interface ApplyAiSuggestionOptions {\n  /**\n   * The suggestion identifier to be applied. If the suggestion is not found, the\n   * method will do nothing.\n   */\n  suggestionId: string\n  /**\n   * The replacement option identifier to be applied. If `undefined`,\n   * the method will default to the first replacement option.\n   */\n  replacementOptionId?: string\n  /**\n   * Determines how the suggestion will applied\n   * If `rich-text`, the suggestion will be formatted as HTML.\n   * If `plain-text`, the suggestion will be formatted as plain text.\n   * @default \"plain-text\"\n   */\n  format?: 'rich-text' | 'plain-text'\n}\n\nexport interface ApplyAllAiSuggestionOptions {\n  /**\n   * Determines how the suggestion will applied\n   * If `rich-text`, the suggestion will be formatted as HTML.\n   * If `plain-text`, the suggestion will be formatted as plain text.\n   * @default \"plain-text\"\n   */\n  format?: 'rich-text' | 'plain-text'\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Tiptap Component in Next.js\nDESCRIPTION: React component code for integrating Tiptap editor in a Next.js application. It uses the useEditor hook and EditorContent component from @tiptap/react.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/getting-started/install/nextjs.mdx#2025-04-19_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n'use client'\n\nimport { useEditor, EditorContent } from '@tiptap/react'\nimport StarterKit from '@tiptap/starter-kit'\n\nconst Tiptap = () => {\n  const editor = useEditor({\n    extensions: [StarterKit],\n    content: '<p>Hello World! üåéÔ∏è</p>',\n  })\n\n  return <EditorContent editor={editor} />\n}\n\nexport default Tiptap\n```\n\n----------------------------------------\n\nTITLE: Initializing Tiptap Editor with Element Binding\nDESCRIPTION: This snippet demonstrates how to create a new Tiptap Editor instance and bind it to an HTML element with the '.element' class. It uses the StarterKit extension for basic functionality.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/api/editor.mdx#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Editor } from '@tiptap/core'\nimport StarterKit from '@tiptap/starter-kit'\n\nnew Editor({\n  element: document.querySelector('.element'),\n  extensions: [StarterKit],\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Node Positions in Tiptap Editor\nDESCRIPTION: Demonstrates different ways to create Node Positions using helper functions in the Editor instance. Shows how to get document nodes, headings, and create custom positions.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/api/node-positions.mdx#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// set up your editor somewhere up here\n\n// The NodePosition for the outermost document node\nconst $doc = editor.$doc\n\n// Get all nodes of type 'heading' in the document\nconst $headings = editor.$nodes('heading')\n\n// Filter by attributes\nconst $h1 = editor.$nodes('heading', { level: 1 })\n\n// Pick nodes directly\nconst $firstHeading = editor.$node('heading', { level: 1 })\n\n// Create a new NodePos via the $pos method when the type is unknown\nconst $myCustomPos = editor.$pos(30)\n```\n\n----------------------------------------\n\nTITLE: Implementing Tiptap Toolbar Component\nDESCRIPTION: Example of implementing a Toolbar component with groups, separators, and buttons including icons and different button styles. Shows how to structure a toolbar with multiple sections and spacing.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/ui-components/primitives/toolbar.mdx#2025-04-19_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Toolbar, ToolbarGroup, ToolbarSeparator } from '@/components/tiptap-ui-primitive/toolbar'\nimport { Button } from '@/components/tiptap-ui-primitive/button'\nimport { BoldIcon } from '@/components/icons/bold-icon'\nimport { ItalicIcon } from '@/components/icons/italic-icon'\nimport { Spacer } from '@/components/tiptap-ui-primitive/spacer'\n\nexport default function MyComponent() {\n  return (\n    <Toolbar variant=\"default\">\n      <ToolbarGroup>\n        <Button data-style=\"ghost\">\n          <BoldIcon className=\"tiptap-button-icon\" />\n        </Button>\n        <Button data-style=\"ghost\">\n          <ItalicIcon className=\"tiptap-button-icon\" />\n        </Button>\n      </ToolbarGroup>\n\n      <ToolbarSeparator />\n\n      <ToolbarGroup>\n        <Button data-style=\"ghost\">Format</Button>\n      </ToolbarGroup>\n\n      <Spacer />\n\n      <ToolbarGroup>\n        <Button data-style=\"primary\">Save</Button>\n      </ToolbarGroup>\n    </Toolbar>\n  )\n```\n\n----------------------------------------\n\nTITLE: Creating a Bold Button with Active State in Vue.js\nDESCRIPTION: A Vue.js implementation of a bold button that toggles a CSS class based on the current state. The button uses the editor's isActive method to determine if the bold formatting is currently applied to the selection.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/getting-started/style-editor/custom-menus.mdx#2025-04-19_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<button\n  :class=\"{ 'is-active': editor.isActive('bold') }\"\n  @click=\"editor.chain().focus().toggleBold().run()\"\n>\n  Bold\n</button>\n```\n\n----------------------------------------\n\nTITLE: Setting Initial Content in Tiptap Editor\nDESCRIPTION: This example shows how to provide initial content to the Tiptap Editor using the 'content' property. The content can be in HTML format.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/api/editor.mdx#2025-04-19_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Editor } from '@tiptap/core'\nimport StarterKit from '@tiptap/starter-kit'\n\nnew Editor({\n  content: `<p>Example Text</p>`,\n  extensions: [StarterKit],\n})\n```\n\n----------------------------------------\n\nTITLE: Enabling Specific Paste Rules in Tiptap Editor\nDESCRIPTION: This example illustrates how to enable only specific paste rules in the Tiptap Editor by passing an array of extensions or extension names to the 'enablePasteRules' property.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/api/editor.mdx#2025-04-19_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Editor } from '@tiptap/core'\nimport StarterKit from '@tiptap/starter-kit'\nimport Link from '@tiptap/extension-link'\n\nnew Editor({\n  content: `<p>Example Text</p>`,\n  extensions: [StarterKit, Link],\n  // pass an array of extensions or extension names\n  // to allow only specific paste rules\n  enablePasteRules: [Link, 'horizontalRule'],\n})\n```\n\n----------------------------------------\n\nTITLE: Creating and Registering a Custom Extension in Tiptap (JavaScript)\nDESCRIPTION: This snippet demonstrates how to create a custom extension for Tiptap and register it with the editor. It shows the basic structure of an extension and how to include it alongside other required extensions.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/core-concepts/extensions.mdx#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Extension } from '@tiptap/core'\n\nconst CustomExtension = Extension.create({\n  // Your code here\n})\n\nconst editor = new Editor({\n  extensions: [\n    // Register your custom extension with the editor.\n    CustomExtension,\n    // ‚Ä¶ and don't forget all other extensions.\n    Document,\n    Paragraph,\n    Text,\n    // ‚Ä¶\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Applying Single AI Suggestion in Tiptap\nDESCRIPTION: This code demonstrates how to apply a single AI suggestion to the editor's content using the applyAiSuggestion command. It allows specifying a suggestion ID, replacement option ID, and text format.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/content-ai/capabilities/suggestion/features/apply-suggestions.mdx#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\neditor.commands.applyAiSuggestion({\n  suggestionId: '1',\n  replacementOptionId: '1',\n  format: 'plain-text',\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Reusable Tiptap Editor Blade Component\nDESCRIPTION: This snippet defines a reusable Blade component for the Tiptap editor. It uses Alpine.js for reactivity and Livewire for server-side interaction. The component is designed to work with Livewire's wire:model directive.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/getting-started/install/php.mdx#2025-04-19_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div\n  x-data=\"setupEditor(\n    $wire.entangle('{{ $attributes->wire('model')->value() }}').defer\n  )\"\n  x-init=\"() => init($refs.editor)\"\n  wire:ignore\n  {{ $attributes->whereDoesntStartWith('wire:model') }}\n>\n  <div x-ref=\"editor\"></div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Basic TiptapCollabProvider Setup in React/Vue\nDESCRIPTION: Example of how to initialize the TiptapCollabProvider with essential configuration options including document ID, app ID (for cloud setups), authentication token, and user identification.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/collaboration/provider/integration.mdx#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst doc = new Y.Doc()\n\nuseEffect(() => {\n  const provider = new TiptapCollabProvider({\n    name: note.id, // Document identifier\n    appId: 'YOUR_APP_ID', // replace with YOUR_APP_ID from Cloud dashboard\n    token: 'YOUR_JWT', // Authentication token\n    document: doc,\n    user: userId,\n  })\n}, [])\n```\n\n----------------------------------------\n\nTITLE: Appending Commands to Chain in Tiptap Editor Streaming\nDESCRIPTION: This example demonstrates how to use the appendToChain function to add commands to the chain before it is executed, such as moving the selection and scrolling the editor.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/content-ai/capabilities/generation/text-generation/stream.mdx#2025-04-19_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { selectionToInsertionEnd } from '@tiptap/core'\n\neditor.commands.streamContent({ from: 0, to: 10 }, async ({ write }) => {\n  write({\n    partial: token,\n    appendToChain: (chain) =>\n      chain\n        // Move the selection to the end of the inserted content\n        .command(({ tr }) => {\n          selectionToInsertionEnd(tr, tr.steps.length - 1, -1)\n          return true\n        })\n        // Scroll the editor to the end of the inserted content\n        .scrollIntoView(),\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Node Extension with React Component\nDESCRIPTION: Basic setup for creating a node extension that renders a React component using ReactNodeViewRenderer.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/custom-extensions/node-views/react.mdx#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Node } from '@tiptap/core'\nimport { ReactNodeViewRenderer } from '@tiptap/react'\nimport Component from './Component.jsx'\n\nexport default Node.create({\n  // configuration ‚Ä¶\n\n  addNodeView() {\n    return ReactNodeViewRenderer(Component)\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Tiptap Selection Commands Reference\nDESCRIPTION: Table of available selection commands in Tiptap editor including functionality for focus control, range manipulation, node selection, and text selection. Each command serves a specific purpose in controlling the editor's selection state and cursor position.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/api/commands/index.mdx#2025-04-19_snippet_13\n\nLANGUAGE: markdown\nCODE:\n```\n| Command                | Description                             |\n| ---------------------- | --------------------------------------- |\n| `blur()`               | Removes focus from the editor.          |\n| `deleteRange()`        | Delete a given range.                   |\n| `deleteSelection()`    | Delete the selection, if there is one.  |\n| `enter()`              | Trigger enter.                          |\n| `focus()`              | Focus the editor at the given position. |\n| `keyboardShortcut()`   | Trigger a keyboard shortcut.            |\n| `scrollIntoView()`     | Scroll the selection into view.         |\n| `selectAll()`          | Select the whole document.              |\n| `selectNodeBackward()` | Select a node backward.                 |\n| `selectNodeForward()`  | Select a node forward.                  |\n| `selectParentNode()`   | Select the parent node.                 |\n| `setNodeSelection()`   | Creates a NodeSelection.                |\n| `setTextSelection()`   | Creates a TextSelection.                |\n```\n\n----------------------------------------\n\nTITLE: Implementing Highlight Popover in React with Tiptap\nDESCRIPTION: React component example demonstrating how to integrate the HighlightPopover component with a Tiptap editor. It includes necessary imports, editor configuration with the Highlight extension, and component rendering.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/ui-components/components/highlight-popover.mdx#2025-04-19_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { EditorContent, EditorContext, useEditor } from '@tiptap/react'\nimport { StarterKit } from '@tiptap/starter-kit'\nimport { Highlight } from '@tiptap/extension-highlight'\nimport { HighlightPopover } from '@/components/tiptap-ui/highlight-popover'\n\nimport '@/components/tiptap-node/paragraph-node/paragraph-node.scss'\n\nexport default function MyEditor() {\n  const editor = useEditor({\n    immediatelyRender: false,\n    extensions: [StarterKit, Highlight.configure({ multicolor: true })],\n    content: `\n        <p style=\"text-align: left\">\n            <mark data-color=\"var(--tt-highlight-purple)\" style=\"background-color: var(--tt-highlight-purple); color: inherit\">\n                <span class=\"selection\">Highlight text</span>\n            </mark>\n            <span class=\"selection\"> </span>\n            <mark data-color=\"var(--tt-highlight-red)\" style=\"background-color: var(--tt-highlight-red); color: inherit\">\n                <span class=\"selection\">in</span>\n            </mark>\n            <span class=\"selection\"> </span>\n            <mark data-color=\"var(--tt-highlight-green)\" style=\"background-color: var(--tt-highlight-green); color: inherit\">\n                <span class=\"selection\">different</span>\n            </mark>\n            <span class=\"selection\"> </span>\n            <mark data-color=\"var(--tt-highlight-blue)\" style=\"background-color: var(--tt-highlight-blue); color: inherit\">\n                <span class=\"selection\">colors</span>\n            </mark>\n            <span class=\"selection\"> to draw attention to key points.</span>\n        </p>\n        `,\n  })\n\n  return (\n    <EditorContext.Provider value={{ editor }}>\n      <div className=\"tiptap-button-group\" data-orientation=\"horizontal\">\n        <HighlightPopover />\n      </div>\n\n      <EditorContent editor={editor} role=\"presentation\" />\n    </EditorContext.Provider>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating Tiptap Editor via CDN in HTML\nDESCRIPTION: A minimal HTML setup that imports Tiptap editor from CDN sources. It creates a basic editor instance with the StarterKit extension and initializes it with 'Hello World!' content.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/getting-started/install/cdn.mdx#2025-04-19_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!doctype html>\n<html>\n  <head>\n    <meta charset=\"utf-8\" />\n  </head>\n  <body>\n    <div class=\"element\"></div>\n    <script type=\"module\">\n      import { Editor } from 'https://esm.sh/@tiptap/core'\n      import StarterKit from 'https://esm.sh/@tiptap/starter-kit'\n      const editor = new Editor({\n        element: document.querySelector('.element'),\n        extensions: [StarterKit],\n        content: '<p>Hello World!</p>',\n      })\n    </script>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Inserting Tables with Tiptap\nDESCRIPTION: Commands to insert tables in the editor, with optional configuration for rows, columns and header settings.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/nodes/table.mdx#2025-04-19_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\neditor.commands.insertTable()\neditor.commands.insertTable({ rows: 3, cols: 3, withHeaderRow: false })\n```\n\n----------------------------------------\n\nTITLE: Generating HTML from JSON in Browser with Tiptap Core\nDESCRIPTION: This snippet demonstrates how to use the generateHTML function from @tiptap/core to convert a JSON object representing a Prosemirror document into an HTML string. This method is for browser-only use.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/api/utilities/html.mdx#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { generateHTML } from '@tiptap/core'\n\n// Generate HTML from JSON\ngenerateHTML(\n  {\n    type: 'doc',\n    content: [{ type: 'paragraph', content: [{ type: 'text', text: 'On the browser only' }] }],\n  },\n  [\n    Document,\n    Paragraph,\n    Text,\n    Bold,\n    // other extensions ‚Ä¶\n  ],\n)\n// `<p>On the browser only</p>`\n```\n\n----------------------------------------\n\nTITLE: Installing Tiptap dependencies for Svelte\nDESCRIPTION: Command to install the core Tiptap packages including @tiptap/core, @tiptap/pm, and @tiptap/starter-kit which contains common extensions.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/getting-started/install/svelte.mdx#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @tiptap/core @tiptap/pm @tiptap/starter-kit\n```\n\n----------------------------------------\n\nTITLE: Initializing Tiptap Editor with AI Extension\nDESCRIPTION: JavaScript code example showing how to initialize a Tiptap editor with the AI extension. This demonstrates proper configuration with required parameters including appId and JWT token.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/content-ai/capabilities/generation/install.mdx#2025-04-19_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Editor } from '@tiptap/core'\nimport StarterKit from '@tiptap/starter-kit'\nimport Ai from '@tiptap-pro/extension-ai'\n\nconst editor = new Editor{\n  extensions: [\n    StarterKit,\n    Ai.configure({\n      // Your Tiptap Content AI app id\n      appId: 'APP_ID_HERE',\n      // This needs to be your generated JWT and MUST NOT be the OpenAI API key!\n      token: 'TOKEN_HERE',\n      autocompletion: true,\n      // ‚Ä¶ other options (see below)\n    }),\n    // ‚Ä¶ more extensions\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Highlighting Replaced Text After Applying AI Suggestion in Tiptap\nDESCRIPTION: This code shows a chain of commands to apply an AI suggestion and then highlight the replaced text. It applies the suggestion, selects the changed text, applies styling (in this case, bold), and sets the cursor at the end of the changed text.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/content-ai/capabilities/suggestion/features/apply-suggestions.mdx#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\neditor\n  .chain()\n  // Apply suggestion\n  .applyAiSuggestion({\n    suggestionId: suggestion.id,\n    replacementOptionId: option.id,\n  })\n  // Select the changed text\n  .command(({ tr, commands }) => {\n    // We need to map the positions of the change text, because they might have changed when applying the suggestion\n    return commands.setTextSelection({\n      from: tr.mapping.map(suggestion.deleteRange.from),\n      to: tr.mapping.map(suggestion.deleteRange.to),\n    })\n  })\n  // Apply styles to changed text. For example, bold styles\n  .setBold()\n  // Set the cursor at the end of the changed text.\n  .command(({ tr, commands }) => {\n    return commands.setTextSelection(tr.mapping.map(suggestion.deleteRange.to))\n  })\n  .focus()\n  .run()\n```\n\n----------------------------------------\n\nTITLE: Disabling Specific Extensions in StarterKit\nDESCRIPTION: This code shows how to disable specific extensions from the StarterKit bundle by setting them to false in the configuration, useful when avoiding conflicts with other extensions.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/getting-started/configure.mdx#2025-04-19_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nimport StarterKit from '@tiptap/starter-kit'\n\nnew Editor({\n  extensions: [\n    StarterKit.configure({\n      history: false,\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Editor Props in Tiptap\nDESCRIPTION: This snippet shows how to use the 'editorProps' option to customize various editor events and DOM element attributes in Tiptap. It demonstrates adding Tailwind classes and transforming pasted text.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/api/editor.mdx#2025-04-19_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nnew Editor({\n  // Learn more: https://prosemirror.net/docs/ref/#view.EditorProps\n  editorProps: {\n    attributes: {\n      class: 'prose prose-sm sm:prose lg:prose-lg xl:prose-2xl mx-auto focus:outline-none',\n    },\n    transformPastedText(text) {\n      return text.toUpperCase()\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Extension in Tiptap\nDESCRIPTION: This snippet illustrates how to create a custom extension for Tiptap. Extensions can add new functionality or change the behavior of the editor.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/custom-extensions/create-new.mdx#2025-04-19_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Extension } from '@tiptap/core'\n\nconst CustomExtension = Extension.create({\n  name: 'customExtension',\n\n  // Your code goes here.\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a React project with Vite\nDESCRIPTION: Commands to create a new React project using Vite with TypeScript template, using npm, pnpm, or yarn.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/getting-started/install/react.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# create a project with npm\nnpm create vite@latest my-tiptap-project -- --template react-ts\n\n# OR, create a project with pnpm\npnpm create vite@latest my-tiptap-project --template react-ts\n\n# OR, create a project with yarn\nyarn create vite my-tiptap-project --template react-ts\n\n# change directory\ncd my-tiptap-project\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Node View in JavaScript for Tiptap\nDESCRIPTION: This snippet demonstrates how to create a simple node view using JavaScript in a Tiptap node extension. It shows the basic structure of a node view render function that returns a DOM element.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/custom-extensions/node-views/javascript.mdx#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Node } from '@tiptap/core'\n\nexport default Node.create({\n  // configuration ‚Ä¶\n\n  addNodeView() {\n    return ({ editor, node, getPos, HTMLAttributes, decorations, extension }) => {\n      const dom = document.createElement('div')\n\n      dom.innerHTML = 'Hello, I'm a node view!'\n\n      return {\n        dom,\n      }\n    }\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing Tiptap Editor with JavaScript\nDESCRIPTION: JavaScript code that imports the necessary Tiptap modules and initializes a new Editor instance. It targets the .element container, applies the StarterKit extension bundle, and sets initial content.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/getting-started/install/vanilla-javascript.mdx#2025-04-19_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Editor } from '@tiptap/core'\nimport StarterKit from '@tiptap/starter-kit'\n\nnew Editor({\n  element: document.querySelector('.element'),\n  extensions: [StarterKit],\n  content: '<p>Hello World!</p>',\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Mention Suggestions\nDESCRIPTION: Example of configuring the suggestion behavior for mentions.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/nodes/mention.mdx#2025-04-19_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nMention.configure({\n  suggestion: {\n    // ‚Ä¶\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring StarterKit Extension in Tiptap Editor\nDESCRIPTION: JavaScript code demonstrating how to configure or disable specific extensions within the StarterKit when initializing the Tiptap Editor.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/functionality/starterkit.mdx#2025-04-19_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Editor } from '@tiptap/core'\nimport StarterKit from '@tiptap/starter-kit'\n\nconst editor = new Editor({\n  content: '<p>Example Text</p>',\n  extensions: [\n    StarterKit.configure({\n      // Disable an included extension\n      history: false,\n\n      // Configure an included extension\n      heading: {\n        levels: [1, 2],\n      },\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Chaining Commands in Tiptap Editor\nDESCRIPTION: This example shows how to use the 'chain()' method to create a command chain and execute multiple commands at once in the Tiptap Editor.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/api/editor.mdx#2025-04-19_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n// Execute two commands at once\neditor.chain().focus().toggleBold().run()\n```\n\n----------------------------------------\n\nTITLE: Initializing Tiptap Editor with Deferred Element Mounting\nDESCRIPTION: This code shows how to create a Tiptap Editor instance without immediately binding it to an element. This is useful when the DOM is not yet available. The editor can be appended to a container element later.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/api/editor.mdx#2025-04-19_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nyourContainerElement.append(editor.options.element)\n```\n\n----------------------------------------\n\nTITLE: Customizing Keyboard Shortcuts in Tiptap\nDESCRIPTION: This code snippet demonstrates how to import an extension, extend it to overwrite keyboard shortcuts, and add the custom extension to the editor. It specifically shows how to change the shortcut for toggling a bullet list.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/core-concepts/keyboard-shortcuts.mdx#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// 1. Import the extension\nimport BulletList from '@tiptap/extension-bullet-list'\n\n// 2. Overwrite the keyboard shortcuts\nconst CustomBulletList = BulletList.extend({\n  addKeyboardShortcuts() {\n    return {\n      // ‚Üì your new keyboard shortcut\n      'Mod-l': () => this.editor.commands.toggleBulletList(),\n    }\n  },\n})\n\n// 3. Add the custom extension to your editor\nnew Editor({\n  extensions: [\n    CustomBulletList(),\n    // ‚Ä¶\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Individual Extensions in Tiptap\nDESCRIPTION: This example demonstrates how to configure individual extensions with specific settings using the .configure() method, specifically limiting heading levels to 1, 2, and 3.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/getting-started/configure.mdx#2025-04-19_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport { Editor } from '@tiptap/core'\nimport Document from '@tiptap/extension-document'\nimport Paragraph from '@tiptap/extension-paragraph'\nimport Text from '@tiptap/extension-text'\nimport Heading from '@tiptap/extension-heading'\n\nnew Editor({\n  element: document.querySelector('.element'),\n  extensions: [\n    Document,\n    Paragraph,\n    Text,\n    Heading.configure({\n      levels: [1, 2, 3],\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Using Focus Command in Tiptap Editor - JavaScript\nDESCRIPTION: Examples of using the focus command in Tiptap editor with different parameters. The command can set focus to the editor and control cursor position with options like 'start', 'end', 'all', or specific numerical positions. The focus command also supports scrollIntoView option which defaults to true.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/api/commands/selection/focus.mdx#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Set the focus to the editor\neditor.commands.focus()\n\n// Set the cursor to the first position\neditor.commands.focus('start')\n\n// Set the cursor to the last position\neditor.commands.focus('end')\n\n// Selects the whole document\neditor.commands.focus('all')\n\n// Set the cursor to position 10\neditor.commands.focus(10)\n```\n\n----------------------------------------\n\nTITLE: Setting Content in Tiptap Editor using Different Formats\nDESCRIPTION: Examples of using the setContent command to update editor content using plain text, HTML, and JSON formats. The command replaces the entire document content with new content while respecting the editor's schema.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/api/commands/content/set-content.mdx#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Plain text\neditor.commands.setContent('Example Text')\n\n// HTML\neditor.commands.setContent('<p>Example Text</p>')\n\n// JSON\neditor.commands.setContent({\n  type: 'doc',\n  content: [\n    {\n      type: 'paragraph',\n      content: [\n        {\n          type: 'text',\n          text: 'Example Text',\n        },\n      ],\n    },\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Customizing Markdown Import in Tiptap Editor\nDESCRIPTION: JavaScript code demonstrating how to customize the import behavior in Tiptap. It shows how to handle errors, modify the imported content, and set the editor content.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/conversion/import-export/markdown/editor-extensions.mdx#2025-04-19_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\neditor.chain().import({\n  file,\n  onImport(context) {\n    const { setEditorContent, content, error } = context\n    if (error) {\n      showErrorToast({ message: error.message })\n    }\n    // Example: add a paragraph before insertion\n    content.doc.content.push({ type: 'paragraph', content: [{ type: 'text', text: 'Hello!' }] })\n    isLoading = false\n    editor.commands.setContent(content)\n  },\n}).focus().run()\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom OpenAI Model in Tiptap AI Suggestion\nDESCRIPTION: This snippet shows how to configure the AI Suggestion extension to use a specific OpenAI model instead of the default gpt-4o-mini. This allows for higher quality suggestions by using more powerful models like gpt-4o.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/content-ai/capabilities/suggestion/custom-llms.mdx#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nAiSuggestion.configure({\n  // The model to use for generating suggestions. Defaults to \"gpt-4o-mini\"\n  model: 'gpt-4o',\n})\n```\n\n----------------------------------------\n\nTITLE: Checking Active State of Node or Mark in Tiptap Editor\nDESCRIPTION: This example shows how to use the 'isActive()' method to check if the currently selected node or mark is active in the Tiptap Editor, with options to check for specific attributes.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/api/editor.mdx#2025-04-19_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\n// Check if it's a heading\neditor.isActive('heading')\n// Check if it's a heading with a specific attribute value\neditor.isActive('heading', { level: 2 })\n// Check if it has a specific attribute value, doesn't care what node/mark it is\neditor.isActive({ textAlign: 'justify' })\n```\n\n----------------------------------------\n\nTITLE: Using setNode Command in Tiptap Editor (JavaScript)\nDESCRIPTION: This snippet demonstrates how to use the setNode command in Tiptap to replace the current selection with a paragraph node. The command takes the node type ('paragraph') and optional attributes (an id in this case) as parameters.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/api/commands/nodes-and-marks/set-node.mdx#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\neditor.commands.setNode('paragraph', { id: 'paragraph-01' })\n```\n\n----------------------------------------\n\nTITLE: Configuring the Tiptap Editor with AI Suggestion Extension\nDESCRIPTION: TypeScript code to initialize a Tiptap editor with the AI Suggestion extension. The configuration includes defining suggestion rules, connecting to Content AI Cloud, and disabling the default spellcheck to avoid conflicts.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/content-ai/capabilities/suggestion/install.mdx#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Editor } from '@tiptap/core'\nimport StarterKit from '@tiptap/starter-kit'\nimport AiSuggestion from '@tiptap-pro/extension-ai-suggestion'\n\n// Initialize the editor\nconst editor = new Editor{\n  extensions: [\n    StarterKit,\n    AiSuggestion.configure({\n      // Define suggestion rules\n      rules: [\n        {\n          id: '1',\n          title: 'Spell Check',\n          prompt: 'Identify and correct any spelling mistakes',\n          color: '#DC143C',\n          backgroundColor: 'FFE6E6',\n        },\n      ],\n      // Configure Content AI Cloud (see next section)\n      appId: 'APP_ID_HERE',\n      token: 'TOKEN_HERE',\n      // ‚Ä¶ other options\n    }),\n    // ‚Ä¶ more extensions\n  ],\n  // Recommended: disable spellcheck to avoid conflicts\n  editorProps: {\n    attributes: {\n      spellcheck: false,\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Registering Event Listeners in Tiptap Editor Configuration\nDESCRIPTION: This snippet demonstrates how to define event listeners when creating a new Tiptap editor instance. It covers all available events including beforeCreate, onCreate, onUpdate, onSelectionUpdate, onTransaction, onFocus, onBlur, onDestroy, onPaste, onDrop, and onContentError.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/api/events.mdx#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst editor = new Editor({\n  onBeforeCreate({ editor }) {\n    // Before the view is created.\n  },\n  onCreate({ editor }) {\n    // The editor is ready.\n  },\n  onUpdate({ editor }) {\n    // The content has changed.\n  },\n  onSelectionUpdate({ editor }) {\n    // The selection has changed.\n  },\n  onTransaction({ editor, transaction }) {\n    // The editor state has changed.\n  },\n  onFocus({ editor, event }) {\n    // The editor is focused.\n  },\n  onBlur({ editor, event }) {\n    // The editor isn't focused anymore.\n  },\n  onDestroy() {\n    // The editor is being destroyed.\n  },\n  onPaste(event: ClipboardEvent, slice: Slice) {\n    // The editor is being pasted into.\n  },\n  onDrop(event: DragEvent, slice: Slice, moved: boolean) {\n    // The editor is being pasted into.\n  },\n  onContentError({ editor, error, disableCollaboration }) {\n    // The editor content does not match the schema.\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: App.vue Integration\nDESCRIPTION: Main App.vue file setup to incorporate the Tiptap component\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/getting-started/install/vue3.mdx#2025-04-19_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <div id=\"app\">\n    <tiptap />\n  </div>\n</template>\n\n<script>\n  import Tiptap from './components/Tiptap.vue'\n\n  export default {\n    name: 'App',\n    components: {\n      Tiptap,\n    },\n  }\n</script>\n```\n\n----------------------------------------\n\nTITLE: Limiting JWT Access to Specific Documents in TypeScript\nDESCRIPTION: Creates a JWT that restricts user access to only specific documents by including their names in the allowedDocumentNames array. This ensures users can only access documents explicitly listed in their token.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/collaboration/getting-started/authenticate.mdx#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport jsonwebtoken from 'jsonwebtoken'\n\nconst data = {\n  sub: 'your_local_user_identifier',\n  allowedDocumentNames: ['user-specific-document-1', 'user-specific-document-2'],\n}\n\nconst jwt = jsonwebtoken.sign(data, 'your_secret')\n```\n\n----------------------------------------\n\nTITLE: Basic Collaborative Editor Setup\nDESCRIPTION: Initial implementation of Tiptap Editor with Yjs integration for collaborative editing support.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/collaboration/getting-started/install.mdx#2025-04-19_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport './styles.scss'\n\nimport Document from '@tiptap/extension-document'\nimport Paragraph from '@tiptap/extension-paragraph'\nimport Text from '@tiptap/extension-text'\nimport { EditorContent, useEditor } from '@tiptap/react'\nimport React from 'react'\n\nimport Collaboration from '@tiptap/extension-collaboration'\nimport * as Y from 'yjs'\n\nconst doc = new Y.Doc()\n\nexport default () => {\n  const editor = useEditor({\n    extensions: [\n      Document,\n      Paragraph,\n      Text,\n      Collaboration.configure({\n        document: doc,\n      }),\n    ],\n    content: `\n      <p>\n        This is a radically reduced version of Tiptap. It has support for a document, with paragraphs and text. That's it. It's probably too much for real minimalists though.\n      </p>\n      <p>\n        The paragraph extension is not really required, but you need at least one node. Sure, that node can be something different.\n      </p>\n    `,\n  })\n\n  return <EditorContent editor={editor} />\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Extensions Within StarterKit\nDESCRIPTION: This example demonstrates how to configure specific extensions that are included in the StarterKit bundle by prefixing their configuration with the extension name.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/getting-started/configure.mdx#2025-04-19_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nimport StarterKit from '@tiptap/starter-kit'\n\nnew Editor({\n  extensions: [\n    StarterKit.configure({\n      heading: {\n        levels: [1, 2, 3],\n      },\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Binding Event Listeners to Running Tiptap Editor Instance\nDESCRIPTION: This snippet shows how to register event listeners on a running Tiptap editor instance using the .on() method. It covers all available events and demonstrates how to bind and unbind event listeners.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/api/events.mdx#2025-04-19_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\neditor.on('beforeCreate', ({ editor }) => {\n  // Before the view is created.\n})\n\neditor.on('create', ({ editor }) => {\n  // The editor is ready.\n})\n\neditor.on('update', ({ editor }) => {\n  // The content has changed.\n})\n\neditor.on('selectionUpdate', ({ editor }) => {\n  // The selection has changed.\n})\n\neditor.on('transaction', ({ editor, transaction }) => {\n  // The editor state has changed.\n})\n\neditor.on('focus', ({ editor, event }) => {\n  // The editor is focused.\n})\n\neditor.on('blur', ({ editor, event }) => {\n  // The editor isn't focused anymore.\n})\n\neditor.on('destroy', () => {\n  // The editor is being destroyed.\n})\n\neditor.on('paste', ({ event, slice, editor }) => {\n  // The editor is being pasted into.\n})\n\neditor.on('drop', ({ editor, event, slice, moved }) => {\n  // The editor is being destroyed.\n})\n\neditor.on('contentError', ({ editor, error, disableCollaboration }) => {\n  // The editor content does not match the schema.\n})\n```\n\n----------------------------------------\n\nTITLE: Using useEditorState Hook for Optimized Tiptap Editor State Management\nDESCRIPTION: Demonstrates how to use the useEditorState hook to subscribe to specific changes in the editor state, preventing unnecessary re-renders of the editor and its components.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/guides/performance.mdx#2025-04-19_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useEditor, useEditorState } from '@tiptap/react'\n\nfunction Component() {\n  const editor = useEditor({\n    extensions,\n    content,\n  })\n\n  const editorState = useEditorState({\n    editor,\n    // This function will be called every time the editor state changes\n    selector: ({ editor }: { editor: Editor }) => ({\n      // It will only re-render if the bold or italic state changes\n      isBold: editorInstance.isActive('bold'),\n      isItalic: editorInstance.isActive('italic'),\n    }),\n  })\n\n  return (\n    <>\n      <EditorContent editor={editor} />\n      <button\n        onClick={() => editor.chain().focus().toggleBold().run()}\n        className={editorState.isBold ? 'primary' : ''}\n      >\n        Bold\n      </button>\n      <button\n        onClick={() => editor.chain().focus().toggleItalic().run()}\n        className={editorState.isItalic ? 'primary' : ''}\n      >\n        Italic\n      </button>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Image Upload in Tiptap React Editor\nDESCRIPTION: Complete example showing how to integrate the image upload node component with Tiptap editor, including configuration for file upload handling, size limits, and error management.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/ui-components/node-components/image-upload-node.mdx#2025-04-19_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react'\nimport { useEditor, EditorContent } from '@tiptap/react'\nimport { ImageUploadNode } from '@/components/tiptap-node/image-upload-node'\nimport { Image } from '@tiptap/extension-image'\nimport { StarterKit } from '@tiptap/starter-kit'\nimport { MAX_FILE_SIZE, handleImageUpload } from '@/lib/tiptap-utils'\n\nimport '@/components/tiptap-node/image-upload-node/image-upload-node.scss'\n\nexport default function EditorWithImageUpload() {\n  const editor = useEditor({\n    extensions: [\n      StarterKit,\n      Image,\n      ImageUploadNode.configure({\n        accept: 'image/*',\n        maxSize: MAX_FILE_SIZE,\n        limit: 3,\n        upload: handleImageUpload,\n        onError: (error) => console.error('Upload failed:', error),\n      }),\n    ],\n    content: '<p>Try uploading an image!</p>',\n  })\n\n  React.useEffect(() => {\n    if (!editor) {\n      return\n    }\n\n    editor.chain().focus().setImageUploadNode().run()\n  }, [editor])\n\n  return <EditorContent editor={editor} />\n}\n```\n\n----------------------------------------\n\nTITLE: Basic BubbleMenu Implementation in JavaScript\nDESCRIPTION: Basic setup of BubbleMenu extension with Tiptap Editor, configuring it with a DOM element selector\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/functionality/bubble-menu.mdx#2025-04-19_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Editor } from '@tiptap/core'\nimport BubbleMenu from '@tiptap/extension-bubble-menu'\n\nnew Editor({\n  extensions: [\n    BubbleMenu.configure({\n      element: document.querySelector('.menu'),\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Extension with Event Listeners for Tiptap Editor\nDESCRIPTION: This snippet shows how to create a custom extension for Tiptap that includes event listeners. It demonstrates implementing all available event handlers within an Extension.create() call.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/api/events.mdx#2025-04-19_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Extension } from '@tiptap/core'\n\nconst CustomExtension = Extension.create({\n  onBeforeCreate({ editor }) {\n    // Before the view is created.\n  },\n  onCreate({ editor }) {\n    // The editor is ready.\n  },\n  onUpdate({ editor }) {\n    // The content has changed.\n  },\n  onSelectionUpdate({ editor }) {\n    // The selection has changed.\n  },\n  onTransaction({ editor, transaction }) {\n    // The editor state has changed.\n  },\n  onFocus({ editor, event }) {\n    // The editor is focused.\n  },\n  onBlur({ editor, event }) {\n    // The editor isn't focused anymore.\n  },\n  onDestroy() {\n    // The editor is being destroyed.\n  },\n  onContentError({ editor, error, disableCollaboration }) {\n    // The editor content does not match the schema.\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Resolving a Thread with resolveThread Command in JavaScript\nDESCRIPTION: Marks a thread as resolved, typically used when the discussion in the thread has reached a conclusion. Requires the thread ID as a parameter.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/comments/integrate/editor-commands.mdx#2025-04-19_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\neditor.commands.resolveThread({\n  id: '101',\n})\n```\n\n----------------------------------------\n\nTITLE: Applying Bold Mark with Custom Class using setMark in Tiptap (JavaScript)\nDESCRIPTION: This snippet demonstrates how to use the setMark command in Tiptap to add a bold mark with a custom CSS class to the current selection. It takes two parameters: the mark type ('bold') and an optional attributes object.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/api/commands/nodes-and-marks/set-mark.mdx#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\neditor.commands.setMark('bold', { class: 'bold-tag' })\n```\n\n----------------------------------------\n\nTITLE: Importing DOCX to Tiptap JSON via REST API\nDESCRIPTION: This cURL command demonstrates how to import a DOCX file to Tiptap's JSON format using the /v2/convert/import endpoint. It includes authentication headers, file upload, and optional parameters for image handling and custom node/mark mapping.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/conversion/import-export/docx/rest-api.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \"https://api.tiptap.dev/v2/convert/import\" \\\n    -H \"Authorization: Bearer YOUR_TOKEN\" \\\n    -H \"X-App-Id: YOUR_APP_ID\" \\\n    -F \"file=@/path/to/your/file.docx\" \\\n    -F \"imageUploadCallbackUrl=https://your-image-upload-endpoint.com\" \\\n    -F \"promisemirrorNodes={\\\"nodeKey\\\":\\\"nodeValue\\\"}\" \\\n    -F \"prosemirrorMarks={\\\"markKey\\\":\\\"markValue\\\"}\"\n```\n\n----------------------------------------\n\nTITLE: Updating a Document with Tiptap Collaboration API using cURL\nDESCRIPTION: This snippet shows how to update an existing document on the server using the Tiptap Collaboration API. It sends a PATCH request with a Yjs update message to apply changes to the document.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/collaboration/documents/rest-api.mdx#2025-04-19_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location --request PATCH 'https://YOUR_APP_ID.collab.tiptap.cloud/api/documents/DOCUMENT_NAME' \\\n--header 'Authorization: YOUR_SECRET_FROM_SETTINGS_AREA' \\\n--data '@yjsUpdate.binary.txt'\n```\n\n----------------------------------------\n\nTITLE: Accessing and Updating Node Attributes in Tiptap Node Views\nDESCRIPTION: This code snippet illustrates how to access and update node attributes within a Tiptap node view. It creates a button that increments a count attribute and updates the node's markup.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/custom-extensions/node-views/javascript.mdx#2025-04-19_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\naddNodeView() {\n  return ({ editor, node, getPos }) => {\n    const { view } = editor\n\n    // Create a button ‚Ä¶\n    const button = document.createElement('button')\n    button.innerHTML = `This button has been clicked ${node.attrs.count} times.`\n\n    // ‚Ä¶ and when it's clicked ‚Ä¶\n    button.addEventListener('click', () => {\n      if (typeof getPos === 'function') {\n        // ‚Ä¶ dispatch a transaction, for the current position in the document ‚Ä¶\n        view.dispatch(view.state.tr.setNodeMarkup(getPos(), undefined, {\n          count: node.attrs.count + 1,\n        }))\n\n        // ‚Ä¶ and set the focus back to the editor.\n        editor.commands.focus()\n      }\n    })\n\n    // ‚Ä¶\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using the Button Component in React\nDESCRIPTION: Example of how to implement the Button component in a React application with custom styling, tooltip, shortcut keys, and click handler. Includes both icon and text content.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/ui-components/primitives/button.mdx#2025-04-19_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button } from '@/components/tiptap-ui-primitive/button'\nimport { BoldIcon } from '@/components/icons/bold-icon'\n\nexport default function MyComponent() {\n  return (\n    <Button\n      data-style=\"ghost\"\n      data-active-state=\"on\"\n      tooltip=\"Bold\"\n      shortcutKeys=\"Ctrl+B\"\n      onClick={() => console.log('Bold clicked')}\n    >\n      <BoldIcon className=\"tiptap-button-icon\" />\n      <span className=\"tiptap-button-text\">Bold</span>\n    </Button>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Paragraph Node with Tiptap React Editor\nDESCRIPTION: Example of integrating the paragraph node component with a Tiptap React editor. This implementation includes the StarterKit extension and demonstrates how to structure content with headings, paragraphs, blockquotes, and other text elements.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/ui-components/node-components/paragraph-node.mdx#2025-04-19_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useEditor, EditorContent } from '@tiptap/react'\nimport { StarterKit } from '@tiptap/starter-kit'\n\nimport '@/components/tiptap-node/paragraph-node/paragraph-node.scss'\n\nexport default function BasicEditor() {\n  const editor = useEditor({\n    extensions: [StarterKit],\n    content: `\n      <h1>Heading 1</h1>\n      <h2>Heading 2</h2>\n      <p>A paragraph with <a href=\"#\">a link</a> and <strong>bold text</strong>.</p>\n      <blockquote>A blockquote with some insightful text.</blockquote>\n      <hr/>\n      <p>Another paragraph after a horizontal rule.</p>\n    `,\n  })\n\n  return <EditorContent editor={editor} className=\"control-showcase\" />\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Tiptap Editor with IndexedDB Persistence\nDESCRIPTION: This snippet demonstrates how to set up a Tiptap editor with offline support by connecting Y IndexedDB to a Y document. It initializes the document, configures local storage through IndexeddbPersistence, and integrates it with the Collaboration extension.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/guides/offline-support.mdx#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Editor } from '@tiptap/core'\nimport Collaboration from '@tiptap/extension-collaboration'\nimport * as Y from 'yjs'\nimport { IndexeddbPersistence } from 'y-indexeddb'\n\nconst ydoc = new Y.Doc()\n\n// Set up IndexedDB for local storage of the Y document\nnew IndexeddbPersistence('example-document', ydoc)\n\nconst editor = new Editor({\n  extensions: [\n    // Other extensions...\n    Collaboration.configure({\n      document: ydoc,\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Integrating aiImagePrompt Command in Tiptap Editor\nDESCRIPTION: This code shows how to call the aiImagePrompt command in a Tiptap editor chain. The command accepts options for configuring the image generation, and requires the image extension to be loaded.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/content-ai/capabilities/generation/image-generation.mdx#2025-04-19_snippet_0\n\nLANGUAGE: js\nCODE:\n```\neditor.chain().focus().aiImagePrompt(options: ImageOptions).run()\n```\n\n----------------------------------------\n\nTITLE: Generating HTML from JSON with Tiptap HTML (Server or Browser)\nDESCRIPTION: This snippet shows how to use the generateHTML function from @tiptap/html to convert a JSON object into an HTML string. This method is compatible with both server-side and browser environments.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/api/utilities/html.mdx#2025-04-19_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { generateHTML } from '@tiptap/html'\n\n// Generate HTML from JSON\ngenerateHTML(\n  {\n    type: 'doc',\n    content: [\n      { type: 'paragraph', content: [{ type: 'text', text: 'On the server, or the browser' }] },\n    ],\n  },\n  [\n    Document,\n    Paragraph,\n    Text,\n    Bold,\n    // other extensions ‚Ä¶\n  ],\n)\n// `<p>On the server, or the browser</p>`\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Hintbox Node Extension in Tiptap\nDESCRIPTION: Implementation of a custom 'Hintbox' node extension for Tiptap that creates a styled callout box. The extension includes commands to set or toggle the hintbox, defines HTML rendering, and adds keyboard shortcuts.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/conversion/import-export/docx/custom-node-conversion.mdx#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { mergeAttributes, Node } from '@tiptap/core'\n\nexport interface ParagraphOptions {\n  /**\n   * The HTML attributes for a paragraph node.\n   * @default {}\n   * @example { class: 'foo' }\n   */\n  HTMLAttributes: Record<string, any>\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    hintbox: {\n      /**\n       * Set a hintbox\n       * @example editor.commands.setHintbox()\n       */\n      setHintbox: () => ReturnType\n      /**\n       * Toggle a hintbox\n       * @example editor.commands.toggleHintbox()\n       */\n      toggleHintbox: () => ReturnType\n    }\n  }\n}\n\n/**\n * This extension allows you to create hintboxes.\n * @see https://www.tiptap.dev/api/nodes/paragraph\n */\nexport const Hintbox = Node.create<ParagraphOptions>({\n  name: 'hintbox',\n\n  priority: 1000,\n\n  addOptions() {\n    return {\n      HTMLAttributes: {\n        style: 'padding: 20px; border: 1px solid #b8d8ff; border-radius: 5px; background-color: #e6f3ff;',\n      },\n    }\n  },\n\n  group: 'block',\n\n  content: 'inline*',\n\n  parseHTML() {\n    return [{ tag: 'p' }]\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    return ['p', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0]\n  },\n\n  addCommands() {\n    return {\n      setHintbox:\n        () =>\n        ({ commands }) => {\n          return commands.setNode(this.name)\n        },\n      toggleHintbox:\n        () =>\n        ({ commands }) => {\n          return commands.toggleNode(this.name, 'paragraph')\n        },\n    }\n  },\n\n  addKeyboardShortcuts() {\n    return {\n      'Mod-Alt-h': () => this.editor.commands.toggleHintbox(),\n    }\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Integrating Tiptap Editor in Nuxt.js Page\nDESCRIPTION: Example of how to use the Tiptap editor component in a Nuxt.js page. It demonstrates the use of client-side rendering for the editor.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/getting-started/install/nuxt.mdx#2025-04-19_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <div>\n    <client-only>\n      <tiptap-editor />\n    </client-only>\n  </div>\n</template>\n<script>\n  import TiptapEditor from '~/components/TiptapEditor.vue'\n  export default {\n    components: {\n      TiptapEditor,\n    },\n  }\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using Tiptap Component in Next.js Page\nDESCRIPTION: Example of how to import and use the Tiptap component in a Next.js page file (app/page.js or pages/index.js).\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/getting-started/install/nextjs.mdx#2025-04-19_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport Tiptap from '../components/Tiptap'\n\nexport default function Home() {\n  return <Tiptap />\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TiptapCollabProvider for Comments in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a TiptapCollabProvider instance and configure it for use with comments. It sets up the provider with custom options and assigns it to the Comments configuration.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/comments/core-concepts/configure.mdx#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst tiptapCollabProvider = new TiptapCollabProvider({\n  // your provider options\n})\n\nComments.configure({\n  provider: tiptapCollabProvider,\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Global Attributes\nDESCRIPTION: Shows how to add attributes that apply to multiple extensions simultaneously.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/custom-extensions/extend-existing.mdx#2025-04-19_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Extension } from '@tiptap/core'\n\nconst TextAlign = Extension.create({\n  addGlobalAttributes() {\n    return [\n      {\n        types: ['heading', 'paragraph'],\n        attributes: {\n          textAlign: {\n            default: 'left',\n            renderHTML: (attributes) => ({\n              style: `text-align: ${attributes.textAlign}`,\n            }),\n            parseHTML: (element) => element.style.textAlign || 'left',\n          },\n        },\n      },\n    ]\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Executing Inline Commands in Tiptap\nDESCRIPTION: Shows how to execute inline commands with custom logic by manipulating the transaction directly.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/api/commands/index.mdx#2025-04-19_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\neditor\n  .chain()\n  .focus()\n  .command(({ tr }) => {\n    // manipulate the transaction\n    tr.insertText('hey, that's cool!')\n\n    return true\n  })\n  .run()\n```\n\n----------------------------------------\n\nTITLE: Using resetAttributes Command in Tiptap Editor\nDESCRIPTION: Demonstrates how to use the resetAttributes command to reset specific attributes (style and class) on selected paragraph nodes back to their default values. This command accepts a node type and an array of attribute names to reset.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/api/commands/nodes-and-marks/reset-attributes.mdx#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// reset the style and class attributes on the currently selected paragraph nodes\neditor.commands.resetAttributes('paragraph', ['style', 'class'])\n```\n\n----------------------------------------\n\nTITLE: Implementing Tiptap component with useEditor hook\nDESCRIPTION: Alternative implementation of Tiptap component using useEditor hook, EditorContent, FloatingMenu, and BubbleMenu components.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/getting-started/install/react.mdx#2025-04-19_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n// src/Tiptap.tsx\nimport { useEditor, EditorContent, FloatingMenu, BubbleMenu } from '@tiptap/react'\nimport StarterKit from '@tiptap/starter-kit'\n\n// define your extension array\nconst extensions = [StarterKit]\n\nconst content = '<p>Hello World!</p>'\n\nconst Tiptap = () => {\n  const editor = useEditor({\n    extensions,\n    content,\n  })\n\n  return (\n    <>\n      <EditorContent editor={editor} />\n      <FloatingMenu editor={editor}>This is the floating menu</FloatingMenu>\n      <BubbleMenu editor={editor}>This is the bubble menu</BubbleMenu>\n    </>\n  )\n}\n\nexport default Tiptap\n```\n\n----------------------------------------\n\nTITLE: Implementing Tiptap in Laravel Livewire Component\nDESCRIPTION: This snippet shows how to add a Tiptap editor to a Livewire component with an optional autosave feature. It uses a custom x-editor component and wire:model for data binding.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/getting-started/install/php.mdx#2025-04-19_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!--\n  In your livewire component you could add an\n  autosave method to handle saving the content\n  from the editor every 10 seconds if you wanted\n-->\n<x-editor wire:model=\"foo\" wire:poll.10000ms=\"autosave\"></x-editor>\n```\n\n----------------------------------------\n\nTITLE: Implementing List Dropdown Menu in React with Tiptap\nDESCRIPTION: Complete example showing how to implement the ListDropdownMenu component in a React application with Tiptap editor. The code demonstrates editor initialization with StarterKit, TaskList, and TaskItem extensions, and proper integration of the ListDropdownMenu component.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/ui-components/components/list-dropdown-menu.mdx#2025-04-19_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { EditorContent, EditorContext, useEditor } from '@tiptap/react'\nimport { StarterKit } from '@tiptap/starter-kit'\nimport { TaskList } from '@tiptap/extension-task-list'\nimport { TaskItem } from '@tiptap/extension-task-item'\nimport { ListDropdownMenu } from '@/components/tiptap-ui/list-dropdown-menu'\n\nimport '@/components/tiptap-node/code-block-node/code-block-node.scss'\nimport '@/components/tiptap-node/list-node/list-node.scss'\nimport '@/components/tiptap-node/paragraph-node/paragraph-node.scss'\n\nexport default function MyEditor() {\n  const editor = useEditor({\n    immediatelyRender: false,\n    extensions: [StarterKit, TaskList, TaskItem.configure({ nested: true })],\n    content: `\n        <ul>\n            <li>\n                <strong>Bold</strong> for emphasis with <code>**</code> or <code>‚åò+B</code> or the <code>B</code> button.\n            </li>\n            <li>\n                <em>Italic</em> for subtle nuances with <code>*</code> or <code>‚åò+I</code> or the <code>I</code> button.\n            </li>\n            <li>\n                <s>Strikethrough</s> to show revisions with <code>~~</code> or the <code>~~S~~</code> button.\n            </li>\n        </ul>\n        <ul data-type=\"taskList\">\n            <li data-type=\"taskItem\" data-checked=\"true\">\n                <div>\n                    Test template\n                </div>\n            </li>\n            <li data-type=\"taskItem\" data-checked=\"false\">\n                <div>\n                    <a target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://tiptap.dev/pricing\">Create account</a>\n                </div>\n            </li>\n            <li data-type=\"taskItem\" data-checked=\"false\">\n                <div>\n                   Download free template\n                </div>\n            </li>\n        </ul>\n        `,\n  })\n\n  return (\n    <EditorContext.Provider value={{ editor }}>\n      <div className=\"tiptap-button-group\" data-orientation=\"horizontal\">\n        <ListDropdownMenu types={['bulletList', 'orderedList', 'taskList']} />\n      </div>\n\n      <EditorContent editor={editor} role=\"presentation\" />\n    </EditorContext.Provider>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using the clearContent Command in Tiptap Editor\nDESCRIPTION: Examples showing how to use the clearContent command to remove all content from the document. The first example shows basic usage, while the second demonstrates how to trigger the update event when clearing content.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/api/commands/content/clear-content.mdx#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Remove all content from the document\neditor.commands.clearContent()\n\n// Remove all content, and trigger the `update` event\neditor.commands.clearContent(true)\n```\n\n----------------------------------------\n\nTITLE: Using insertContentAt Command in TipTap Editor\nDESCRIPTION: Examples of using the insertContentAt command to insert different types of content (plain text, HTML, and JSON) at specific positions or ranges in the editor. Demonstrates various options including updateSelection and parseOptions for controlling the insertion behavior.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/api/commands/content/insert-content-at.mdx#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Plain text\neditor.commands.insertContentAt(12, 'Example Text')\n\n// Plain text, replacing a range\neditor.commands.insertContentAt({ from: 12, to: 16 }, 'Example Text')\n\n// HTML\neditor.commands.insertContentAt(12, '<h1>Example Text</h1>')\n\n// HTML with trim white space\neditor.commands.insertContentAt(12, '<p>Hello world</p>', {\n  updateSelection: true,\n  parseOptions: {\n    preserveWhitespace: 'full',\n  },\n})\n\n// JSON/Nodes\neditor.commands.insertContentAt(12, {\n  type: 'heading',\n  attrs: {\n    level: 1,\n  },\n  content: [\n    {\n      type: 'text',\n      text: 'Example Text',\n    },\n  ],\n})\n\n// Multiple nodes at once\neditor.commands.insertContentAt(12, [\n  {\n    type: 'paragraph',\n    content: [\n      {\n        type: 'text',\n        text: 'First paragraph',\n      },\n    ],\n  },\n  {\n    type: 'paragraph',\n    content: [\n      {\n        type: 'text',\n        text: 'Second paragraph',\n      },\n    ],\n  },\n])\n```\n\n----------------------------------------\n\nTITLE: Using extendMarkRange Command in Tiptap Editor (JavaScript)\nDESCRIPTION: This snippet demonstrates how to use the extendMarkRange command in Tiptap editor. It shows examples of expanding selection to link marks, expanding with specific attributes, and chaining commands to update attributes after extending the range.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/api/commands/nodes-and-marks/extend-mark-range.mdx#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Expand selection to link marks\neditor.commands.extendMarkRange('link')\n\n// Expand selection to link marks with specific attributes\neditor.commands.extendMarkRange('link', { href: 'https://google.com' })\n\n// Expand selection to link mark and update attributes\neditor\n  .chain()\n  .extendMarkRange('link')\n  .updateAttributes('link', {\n    href: 'https://duckduckgo.com',\n  })\n  .run()\n```\n\n----------------------------------------\n\nTITLE: Implementing Suggestion Popovers with React\nDESCRIPTION: Example of implementing a popover for suggestions using React and Prosemirror decorations.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/content-ai/capabilities/suggestion/features/display-suggestions.mdx#2025-04-19_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n// First, define a hook to store the HTML element where the popover will be rendered\nconst [popoverElement, setPopoverElement] = useState<HTMLElement | null>(null)\n\nAiSuggestion.configure({\n  getCustomSuggestionDecoration({ suggestion, isSelected, getDefaultDecorations }) {\n    const decorations = getDefaultDecorations()\n\n    // Then, create a Prosemirror decoration that contains the HTML element\n    Decoration.widget(suggestion.deleteRange.to, () => {\n      const element = document.createElement('span')\n\n      return element\n    })\n    return decorations\n  },\n})\n\n// Then, add the content to the custom element. In this example, we use React Portals to render the popover inside the editor.\nif (popoverElement) {\n  ReactDOM.createPortal(<Popover suggestion={editor.selectedSuggestion} />, popoverElement)\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Links Programmatically\nDESCRIPTION: Examples of using commands to set and modify links\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/marks/link.mdx#2025-04-19_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\neditor.commands.setLink({ href: 'https://example.com' })\neditor.commands.setLink({ href: 'https://example.com', target: '_blank' })\n```\n\n----------------------------------------\n\nTITLE: Using setTextSelection Command in Tiptap Editor (JavaScript)\nDESCRIPTION: Demonstrates how to use the setTextSelection command to set the cursor position or text selection range in a Tiptap editor. The command accepts either a single number for cursor position or an object with 'from' and 'to' properties for a range selection.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/api/commands/selection/set-text-selection.mdx#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Set the cursor to the specified position\neditor.commands.setTextSelection(10)\n\n// Set the text selection to the specified range\neditor.commands.setTextSelection({ from: 5, to: 10 })\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Streaming Resolver\nDESCRIPTION: Example of implementing a custom streaming resolver that returns a ReadableStream for real-time content updates.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/content-ai/capabilities/generation/custom-llms.mdx#2025-04-19_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// ...\nimport Ai from '@tiptap-pro/extension-ai-advanced'\n// ...\n\nAi.configure({\n  appId: 'APP_ID_HERE',\n  token: 'TOKEN_HERE',\n  // ...\n  onError(error, context) {\n    // handle error\n  },\n  // Define the resolver function for streams\n  aiStreamResolver: async ({ action, text, textOptions }) => {\n    const fetchOptions = {\n      method: 'POST',\n      headers: {\n        accept: 'application/json',\n        'content-type': 'application/json',\n      },\n      body: JSON.stringify({\n        ...textOptions,\n        text,\n      }),\n    }\n\n    const response = await fetch(`<YOUR_STREAMED_BACKEND_ENDPOINT>`, fetchOptions)\n    const json = await response?.json()\n\n    if (!response.ok) {\n      throw new Error(`${json?.error} ${json?.message}`)\n    }\n\n    return response?.body\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Tiptap Examples Page Structure with React Components\nDESCRIPTION: This code demonstrates how to structure an examples page for Tiptap editor using React components. The code imports various UI components and image assets to create a filterable grid of example cards. Each card represents a different Tiptap editor feature or implementation example.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/examples/index.mdx#2025-04-19_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Link from '@/components/Link'\nimport * as CardGrid from '@/components/CardGrid'\nimport { Tag } from '@/components/ui/Tag'\nimport cardCoverDefaultEditor from '@/assets/card-covers/examples/default-text-editor.jpg'\nimport cardCoverFormatting from '@/assets/card-covers/examples/formatting.jpg'\nimport cardCoverImages from '@/assets/card-covers/examples/images.jpg'\nimport cardCoverlongText from '@/assets/card-covers/examples/long-text.jpg'\nimport cardCoverMarkdown from '@/assets/card-covers/examples/markdown-shortcuts.jpg'\nimport cardCoverMinimal from '@/assets/card-covers/examples/minimal-setup.jpg'\nimport cardCoverTables from '@/assets/card-covers/examples/tables.jpg'\nimport cardCoverTasks from '@/assets/card-covers/examples/tasks.jpg'\nimport cardCoverCollaborativeEditing from '@/assets/card-covers/examples/collaborative-editing.jpg'\nimport cardCoverCollaborativeFields from '@/assets/card-covers/examples/collaborative-fields.jpg'\nimport cardCoverCollaborativeCleverEditor from '@/assets/card-covers/examples/clever-editor.jpg'\nimport cardCoverCollaborativeDrawing from '@/assets/card-covers/examples/drawing.jpg'\nimport cardCoverCollaborativeFigure from '@/assets/card-covers/examples/figure.jpg'\nimport cardCoverCollaborativeForcedContent from '@/assets/card-covers/examples/forced-content-structure.jpg'\nimport cardCoverCollaborativeGenericFigure from '@/assets/card-covers/examples/generic-figure.jpg'\nimport cardCoverCollaborativeiFrame from '@/assets/card-covers/examples/iframe.jpg'\nimport cardCoverCollaborativeInteractiveViews from '@/assets/card-covers/examples/interactive-views.jpg'\nimport cardCoverCollaborativeLinting from '@/assets/card-covers/examples/linting.jpg'\nimport cardCoverCollaborativeMentions from '@/assets/card-covers/examples/mentions.jpg'\nimport cardCoverCollaborativeMenus from '@/assets/card-covers/examples/menus.jpg'\nimport cardCoverCollaborativeSlashCommands from '@/assets/card-covers/examples/slash-commands.jpg'\nimport cardCoverCollaborativeSytnaxHighlights from '@/assets/card-covers/examples/syntax-highlighting.jpg'\nimport cardCoverCollaborativeTrailingNode from '@/assets/card-covers/examples/trailing-node.jpg'\nimport * as FilterGrid from '@/components/FilterGrid'\n```\n\n----------------------------------------\n\nTITLE: Implementing List Button in a React Tiptap Editor\nDESCRIPTION: Complete example showing how to integrate the ListButton component with Tiptap editor in a React application. It demonstrates setting up the editor with required extensions and rendering list buttons for bullet, ordered, and task lists.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/ui-components/components/list-button.mdx#2025-04-19_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { EditorContent, EditorContext, useEditor } from '@tiptap/react'\nimport { StarterKit } from '@tiptap/starter-kit'\nimport { TaskList } from '@tiptap/extension-task-list'\nimport { TaskItem } from '@tiptap/extension-task-item'\nimport { ListButton } from '@/components/tiptap-ui/list-button'\n\nimport '@/components/tiptap-node/code-block-node/code-block-node.scss'\nimport '@/components/tiptap-node/list-node/list-node.scss'\nimport '@/components/tiptap-node/paragraph-node/paragraph-node.scss'\n\nexport default function MyEditor() {\n  const editor = useEditor({\n    immediatelyRender: false,\n    extensions: [StarterKit, TaskList, TaskItem.configure({ nested: true })],\n    content: `\n        <ul>\n            <li>\n                <strong>Bold</strong> for emphasis with <code>**</code> or <code>‚åò+B</code> or the <code>B</code> button.\n            </li>\n            <li>\n                <em>Italic</em> for subtle nuances with <code>*</code> or <code>‚åò+I</code> or the <code>I</code> button.\n            </li>\n            <li>\n                <s>Strikethrough</s> to show revisions with <code>~~</code> or the <code>~~S~~</code> button.\n            </li>\n        </ul>\n        <ul data-type=\"taskList\">\n          <li data-type=\"taskItem\" data-checked=\"true\">\n            <div>Test template</div>\n          </li>\n          <li data-type=\"taskItem\" data-checked=\"false\">\n            <div>\n              <a target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://tiptap.dev/pricing\">Create account</a>\n            </div>\n          </li>\n          <li data-type=\"taskItem\" data-checked=\"false\">\n            <div>Download free template</div>\n          </li>\n        </ul>\n        `,\n  })\n\n  return (\n    <EditorContext.Provider value={{ editor }}>\n      <div className=\"tiptap-button-group\" data-orientation=\"horizontal\">\n        <ListButton type=\"bulletList\" />\n        <ListButton type=\"orderedList\" />\n        <ListButton type=\"taskList\" />\n      </div>\n\n      <EditorContent editor={editor} role=\"presentation\" />\n    </EditorContext.Provider>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Mark in Tiptap\nDESCRIPTION: This snippet shows how to create a custom mark extension for Tiptap. Marks can be applied to nodes to add inline formatting.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/custom-extensions/create-new.mdx#2025-04-19_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Mark } from '@tiptap/core'\n\nconst CustomMark = Mark.create({\n  name: 'customMark',\n\n  // Your code goes here.\n})\n```\n\n----------------------------------------\n\nTITLE: Integrating Mention Dropdown Menu with Tiptap React Editor\nDESCRIPTION: Example React component that demonstrates how to implement the MentionDropdownMenu component with a Tiptap editor. It shows the basic setup with the Mention extension and proper component placement.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/ui-components/components/mention-dropdown-menu.mdx#2025-04-19_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { MentionDropdownMenu } from '@/components/tiptap-ui/mention-dropdown-menu'\nimport { useEditor, EditorContent } from '@tiptap/react'\nimport { Mention } from '@tiptap/extension-mention'\n\nexport default function MyEditor() {\n  const editor = useEditor({\n    extensions: [\n      // other extensions\n      Mention.configure({\n        // mention configuration\n      }),\n    ],\n  })\n\n  return (\n    <div>\n      <EditorContent editor={editor} />\n      <MentionDropdownMenu editor={editor} />\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using getAttrs in Tiptap parseHTML\nDESCRIPTION: Shows how to use the getAttrs function in parseHTML to check HTML attributes and set mark or node attributes accordingly. It demonstrates accessing element attributes and styles.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/custom-extensions/extend-existing.mdx#2025-04-19_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nparseHTML() {\n  return [\n    {\n      tag: 'span',\n      getAttrs: element => {\n        // Check if the element has an attribute\n        element.hasAttribute('style')\n        // Get an inline style\n        element.style.color\n        // Get a specific attribute\n        element.getAttribute('data-color')\n      },\n    },\n  ]\n},\n```\n\n----------------------------------------\n\nTITLE: Adding Event Listeners to Tiptap Custom Extension\nDESCRIPTION: Demonstrates how to add event listeners to a custom Tiptap extension. This example shows listeners for various editor events like onCreate, onUpdate, onSelectionUpdate, etc.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/custom-extensions/extend-existing.mdx#2025-04-19_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Extension } from '@tiptap/core'\n\nconst CustomExtension = Extension.create({\n  onCreate() {\n    // The editor is ready.\n  },\n  onUpdate() {\n    // The content has changed.\n  },\n  onSelectionUpdate({ editor }) {\n    // The selection has changed.\n  },\n  onTransaction({ transaction }) {\n    // The editor state has changed.\n  },\n  onFocus({ event }) {\n    // The editor is focused.\n  },\n  onBlur({ event }) {\n    // The editor isn't focused anymore.\n  },\n  onDestroy() {\n    // The editor is being destroyed.\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Context to AI Prompts in Tiptap\nDESCRIPTION: This code snippet demonstrates how to use the context option when creating AI prompts in Tiptap. It shows how to provide both text-based context and URL-based context to help the AI generate more relevant content, with the response streamed as rich text into the editor.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/content-ai/capabilities/generation/text-generation/provide-context.mdx#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Steams the response as rich text into the editor\neditor\n  .chain()\n  .aiTextPrompt({\n    text: 'What does Alice do for a living?',\n    stream: true,\n    format: 'rich-text',\n    context: [\n      { type: 'text', text: 'John & Alice are a software engineers.' },\n      { type: 'url', url: 'https://company.example.com/team' },\n    ],\n  })\n  .run()\n```\n\n----------------------------------------\n\nTITLE: Implementing Text Mark Button Component in React\nDESCRIPTION: Complete example showing how to implement the mark button component with Tiptap editor in React, including editor configuration and button group setup. Demonstrates usage with various text marks like bold, italic, strike, code, underline, superscript, and subscript.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/ui-components/components/mark-button.mdx#2025-04-19_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { EditorContent, EditorContext, useEditor } from '@tiptap/react'\nimport { StarterKit } from '@tiptap/starter-kit'\nimport { Underline } from '@tiptap/extension-underline'\nimport { Superscript } from '@tiptap/extension-superscript'\nimport { Subscript } from '@tiptap/extension-subscript'\nimport { MarkButton } from '@/components/tiptap-ui/mark-button'\n\nimport '@/components/tiptap-node/code-block-node/code-block-node.scss'\nimport '@/components/tiptap-node/paragraph-node/paragraph-node.scss'\n\nexport default function MyEditor() {\n  const editor = useEditor({\n    immediatelyRender: false,\n    extensions: [StarterKit, Underline, Superscript, Subscript],\n    content: `\n        <p>\n            <strong>Bold</strong> for emphasis with <code>**</code> or <code>‚åò+B</code> or the <code>B</code> button.\n        </p>\n        <p>\n            <em>Italic</em> for subtle nuances with <code>*</code> or <code>‚åò+I</code> or the <code>I</code> button.\n        </p>\n        <p>\n            <s>Strikethrough</s> to show revisions with <code>~~</code> or the <code>~~S~~</code> button.\n        </p>\n        <p>\n            <code>Code</code> for code snippets with <code>:</code> or <code>‚åò+‚áß+C</code> or the <code>C</code> button.\n        </p>\n        <p>\n            <u>Underline</u> for emphasis with <code>‚åò+U</code> or the <code>U</code> button.\n        </p>\n        <p>\n            <sup>Superscript</sup> for footnotes with <code>‚åò+.</code> or the <code>.</code> button.\n        </p>\n        <p>\n            <sub>Subscript</sub> for chemical formulas with <code>‚åò+,</code> or the <code>,</code> button.\n        </p>\n        `,\n  })\n\n  return (\n    <EditorContext.Provider value={{ editor }}>\n      <div className=\"tiptap-button-group\" data-orientation=\"horizontal\">\n        <MarkButton type=\"bold\" />\n        <MarkButton type=\"italic\" />\n        <MarkButton type=\"strike\" />\n        <MarkButton type=\"code\" />\n        <MarkButton type=\"underline\" />\n        <MarkButton type=\"superscript\" />\n        <MarkButton type=\"subscript\" />\n      </div>\n\n      <EditorContent editor={editor} role=\"presentation\" />\n    </EditorContext.Provider>\n  )\n```\n\n----------------------------------------\n\nTITLE: Basic Tiptap Editor Component Implementation\nDESCRIPTION: Basic Vue component implementation for Tiptap editor with essential configuration and lifecycle management.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/getting-started/install/vue2.mdx#2025-04-19_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <editor-content :editor=\"editor\" />\n</template>\n\n<script>\n  import { Editor, EditorContent } from '@tiptap/vue-2'\n  import StarterKit from '@tiptap/starter-kit'\n\n  export default {\n    components: {\n      EditorContent,\n    },\n\n    data() {\n      return {\n        editor: null,\n      }\n    },\n\n    mounted() {\n      this.editor = new Editor({\n        content: \"<p>I'm running Tiptap with Vue.js. üéâ</p>\",\n        extensions: [StarterKit],\n      })\n    },\n\n    beforeDestroy() {\n      this.editor.destroy()\n    },\n  }\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using createParagraphNear Command in Tiptap\nDESCRIPTION: Creates an empty paragraph after the currently selected block node. If the selected block is the first child of its parent, the new paragraph will be inserted before the selection.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/api/commands/nodes-and-marks/create-paragraph-near.mdx#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\neditor.commands.createParagraphNear()\n```\n\n----------------------------------------\n\nTITLE: Implementing Tiptap Editor with Heading Buttons in React\nDESCRIPTION: Example implementation of a Tiptap editor with multiple heading level toggle buttons. Shows integration with EditorContext, StarterKit, and proper component setup including required imports and styling.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/ui-components/components/heading-button.mdx#2025-04-19_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { HeadingButton } from '@/components/tiptap-ui/heading-button'\nimport { EditorContent, EditorContext, useEditor } from '@tiptap/react'\nimport { StarterKit } from '@tiptap/starter-kit'\n\nimport '@/components/tiptap-node/paragraph-node/paragraph-node.scss'\n\nexport default function MyEditor() {\n  const editor = useEditor({\n    immediatelyRender: false,\n    extensions: [StarterKit],\n    content: `\n          <h1>Heading 1</h1>\n          <h2>Heading 2</h2>\n          <h3>Heading 3</h3>\n          <h4>Heading 4</h4>\n        `,\n  })\n\n  return (\n    <EditorContext.Provider value={{ editor }}>\n      <div className=\"tiptap-button-group\" data-orientation=\"horizontal\">\n        <HeadingButton level={1}></HeadingButton>\n        <HeadingButton level={2}></HeadingButton>\n        <HeadingButton level={3}></HeadingButton>\n        <HeadingButton level={4}></HeadingButton>\n      </div>\n\n      <EditorContent editor={editor} role=\"presentation\" />\n    </EditorContext.Provider>\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring Paste Handler in FileHandler Extension\nDESCRIPTION: Example of configuring the onPaste callback function to handle files pasted into the editor. The callback receives editor instance, files, and HTML content parameters.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/functionality/filehandler.mdx#2025-04-19_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nFileHandler.configure({\n  onPaste: (editor, files, htmlContent) => {\n    // do something with the files\n    // and insert the file into the editor\n    // in some cases (for example copy / pasted gifs from other apps) you should probably not use the file directly\n    // as the file parser will only have a single gif frame as png\n    // in this case, you can extract the url from the htmlContent and use it instead, let other inputRules handle insertion\n    // or do anything else with the htmlContent pasted into here\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Disabling Input Rules in Tiptap Editor\nDESCRIPTION: This snippet illustrates how to disable all input rules in the Tiptap Editor using the 'enableInputRules' property.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/api/editor.mdx#2025-04-19_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Editor } from '@tiptap/core'\nimport StarterKit from '@tiptap/starter-kit'\n\nnew Editor({\n  content: `<p>Example Text</p>`,\n  extensions: [StarterKit],\n  enableInputRules: false,\n})\n```\n\n----------------------------------------\n\nTITLE: Getting Attributes of Selected Node or Mark in Tiptap Editor\nDESCRIPTION: This snippet demonstrates how to use the 'getAttributes()' method to retrieve attributes of the currently selected node or mark in the Tiptap Editor.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/api/editor.mdx#2025-04-19_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\neditor.getAttributes('link').href\n```\n\n----------------------------------------\n\nTITLE: Basic Tiptap Component Implementation\nDESCRIPTION: Vue component implementation using Options API to create a basic Tiptap editor instance\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/getting-started/install/vue3.mdx#2025-04-19_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <editor-content :editor=\"editor\" />\n</template>\n\n<script>\n  import { Editor, EditorContent } from '@tiptap/vue-3'\n  import StarterKit from '@tiptap/starter-kit'\n\n  export default {\n    components: {\n      EditorContent,\n    },\n\n    data() {\n      return {\n        editor: null,\n      }\n    },\n\n    mounted() {\n      this.editor = new Editor({\n        content: \"<p>I'm running Tiptap with Vue.js. üéâ</p>\",\n        extensions: [StarterKit],\n      })\n    },\n\n    beforeUnmount() {\n      this.editor.destroy()\n    },\n  }\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing Image Node in React with Tiptap\nDESCRIPTION: Example of how to set up a Tiptap editor with image support in a React component. This shows importing required dependencies, including styles, and initializing the editor with the Image extension.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/ui-components/node-components/image-node.mdx#2025-04-19_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useEditor, EditorContent } from '@tiptap/react'\nimport { Image } from '@tiptap/extension-image'\nimport { StarterKit } from '@tiptap/starter-kit'\n\nimport '@/components/tiptap-node/image-node/image-node.scss'\n\nexport default function EditorWithImages() {\n  const editor = useEditor({\n    immediatelyRender: false,\n    extensions: [StarterKit, Image],\n    content: '<img src=\"/images/placeholder-image.png\" alt=\"Example image\" />',\n  })\n\n  return <EditorContent editor={editor} />\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack for Yjs in Next.js\nDESCRIPTION: Next.js configuration to resolve Yjs import conflicts. This ensures all imports of 'yjs' resolve to the same instance, preventing constructor check issues.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/getting-started/install/nextjs.mdx#2025-04-19_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nconst path = require('path')\n\nmodule.exports = {\n  webpack: (config, { isServer }) => {\n    if (!isServer) {\n      // Ensure that all imports of 'yjs' resolve to the same instance\n      config.resolve.alias['yjs'] = path.resolve(__dirname, 'node_modules/yjs')\n    }\n    return config\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving JSON Content from Tiptap Editor\nDESCRIPTION: Demonstrates how to get the editor content as JSON format using the getJSON() method.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/guides/output-json-html.mdx#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst json = editor.getJSON()\n```\n\n----------------------------------------\n\nTITLE: Configuring Drop Handler in FileHandler Extension\nDESCRIPTION: Example of configuring the onDrop callback function to handle files dropped into the editor. The callback receives editor instance, files, and position parameters.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/functionality/filehandler.mdx#2025-04-19_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nFileHandler.configure({\n  onDrop: (editor, files, pos) => {\n    // do something with the files\n    // and insert the file into the editor\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Threads in Tiptap Editor (JavaScript)\nDESCRIPTION: Shows how to use the subscribeToThreads function to receive and watch threads on the current document. It registers a watcher, fetches the initial list of threads, and keeps the list updated.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/comments/core-concepts/manage-threads.mdx#2025-04-19_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst unsubscribe = subscribeToThreads({\n  provider: yourTiptapCollabProvider,\n  callback: (threads) => {\n    // do something with threads, store in a state or variable from here\n  },\n  // optional options\n  getThreadsOptions: {\n    // only threads with the specific type will be fetched/watched, possible values are 'archived' and 'unarchived',\n    // if not set, only unarchived threads will be handled\n    // archived and unarchived threads represent soft-deleted threads\n    types: ['archived', 'unarchived'],\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Streaming Content from URL into Tiptap Editor using write API\nDESCRIPTION: This example demonstrates how to use the streamContent command to fetch data from a URL and stream it chunk-by-chunk into the Tiptap editor.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/content-ai/capabilities/generation/text-generation/stream.mdx#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\neditor.commands.streamContent({ from: 0, to: 10 }, async ({ write }) => {\n  const response = await fetch('https://example.com/stream')\n  const reader = response.body?.getReader()\n  const decoder = new TextDecoder('utf-8')\n\n  if (!reader) {\n    throw new Error('Failed to get reader from response body.')\n  }\n\n  while (true) {\n    const { done, value } = await reader.read()\n    if (done) break\n\n    const chunk = decoder.decode(value, { stream: true })\n    write({ partial: chunk })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using forEach Command to Insert Content in Tiptap Editor (JavaScript)\nDESCRIPTION: This snippet demonstrates how to use the forEach command in Tiptap to loop through an array of items and insert each item as content into the editor. It utilizes the editor.commands.forEach method, passing an array of items and a callback function that uses the insertContent command for each item.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/api/commands/for-each.mdx#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst items = ['foo', 'bar', 'baz']\n\neditor.commands.forEach(items, (item, { commands }) => {\n  return commands.insertContent(item)\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Resolver Function for AiSuggestion in TypeScript\nDESCRIPTION: This code snippet shows how to replace the default resolver function with a custom one in the AiSuggestion configuration. It allows for total control over suggestion generation, including their positions in the document.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/content-ai/capabilities/suggestion/custom-llms.mdx#2025-04-19_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nAiSuggestion.configure({\n  async resolver({ defaultResolver, ...options }) {\n    const suggestions = await customResolver(options)\n    return suggestions\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Hiding Diff View\nDESCRIPTION: TypeScript example showing how to hide the diff view and restore the previous content using the hideDiff command.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/collaboration/documents/snapshot-compare.mdx#2025-04-19_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n// This will hide the diff view and restore the previous content\neditor.commands.hideDiff()\n```\n\n----------------------------------------\n\nTITLE: Fetching a Yjs Document with Axios in Tiptap Collaboration\nDESCRIPTION: Demonstrates how to fetch a document in Yjs format using Axios, specifying 'arraybuffer' as the response type, and applying the update to a Yjs document.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/collaboration/documents/rest-api.mdx#2025-04-19_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as Y from 'yjs'\n\nconst ydoc = new Y.Doc()\n\nconst axiosResult = await axios.get(\n  'https://YOUR_APP_ID.collab.tiptap.cloud/api/documents/DOCUMENT_NAME?format=yjs',\n  {\n    headers: {\n      Authorization: 'YOUR_SECRET_FROM_SETTINGS_AREA',\n    },\n    responseType: 'arraybuffer',\n  },\n)\n\nY.applyUpdate(ydoc, axiosResult.data)\n```\n\n----------------------------------------\n\nTITLE: Removing Links Programmatically\nDESCRIPTION: Example of using command to remove links\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/marks/link.mdx#2025-04-19_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\neditor.commands.unsetLink()\n```\n\n----------------------------------------\n\nTITLE: Implementing Link Popover in React with Tiptap\nDESCRIPTION: Example of how to use the LinkPopover component in a React application with Tiptap editor. It demonstrates importing necessary components, configuring the editor, and rendering the link popover.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/ui-components/components/link-popover.mdx#2025-04-19_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { EditorContent, EditorContext, useEditor } from '@tiptap/react'\nimport { StarterKit } from '@tiptap/starter-kit'\nimport { Link } from '@/components/tiptap-extension/link-extension'\nimport { LinkPopover } from '@/components/tiptap-ui/link-popover'\n\nimport '@/components/tiptap-node/paragraph-node/paragraph-node.scss'\n\nexport default function MyEditor() {\n  const editor = useEditor({\n    immediatelyRender: false,\n    extensions: [StarterKit, Link.configure({ openOnClick: false })],\n    content: `\n        <p>Click the button to open the link popover.</p>\n        <p><a href=\"https://www.tiptap.dev\">Tiptap</a></p>\n        `,\n  })\n\n  return (\n    <EditorContext.Provider value={{ editor }}>\n      <div className=\"tiptap-button-group\" data-orientation=\"horizontal\">\n        <LinkPopover />\n      </div>\n\n      <EditorContent editor={editor} role=\"presentation\" />\n    </EditorContext.Provider>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Specific Input Rules in Tiptap Editor\nDESCRIPTION: This example shows how to enable only specific input rules in the Tiptap Editor by passing an array of extensions or extension names to the 'enableInputRules' property.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/api/editor.mdx#2025-04-19_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Editor } from '@tiptap/core'\nimport StarterKit from '@tiptap/starter-kit'\nimport Link from '@tiptap/extension-link'\n\nnew Editor({\n  content: `<p>Example Text</p>`,\n  extensions: [StarterKit, Link],\n  // pass an array of extensions or extension names\n  // to allow only specific input rules\n  enableInputRules: [Link, 'horizontalRule'],\n})\n```\n\n----------------------------------------\n\nTITLE: Enabling Autocompletion in Tiptap Editor with Content AI Extension\nDESCRIPTION: This code snippet demonstrates how to initialize a Tiptap editor with the Content AI extension, enabling autocompletion. It shows the basic configuration including the app ID, token, and autocompletion settings.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/content-ai/capabilities/generation/text-generation/autocompletion.mdx#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Editor } from '@tiptap/core'\nimport StarterKit from '@tiptap/starter-kit'\nimport Ai from '@tiptap-pro/extension-ai'\n\nconst editor = new Editor{\n  extensions: [\n    StarterKit,\n    Ai.configure({\n      appId: 'APP_ID_HERE',\n      token: 'TOKEN_HERE',\n      autocompletion: true,\n      // ‚Ä¶ other options (see above)\n    }),\n    // ‚Ä¶ more extensions\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Using sinkListItem Command in Tiptap Editor (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to use the sinkListItem command in Tiptap editor. The command attempts to sink the list item around the current selection down into a wrapping child list.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/api/commands/lists/sink-list-item.mdx#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\neditor.commands.sinkListItem()\n```\n\n----------------------------------------\n\nTITLE: Server-Side JWT Generation in TypeScript\nDESCRIPTION: Implements server-side JWT generation for production use. This approach keeps the secret key secure by not exposing it in client-side code, creating tokens with user-specific claims for authentication in API requests.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/collaboration/getting-started/authenticate.mdx#2025-04-19_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport jsonwebtoken from 'jsonwebtoken'\n\nconst payload = {\n  // The payload contains claims like the user ID, which can be used to identify the user and their permissions.\n  sub: 'your_local_user_identifier',\n}\n\n// The 'sign' method creates the JWT, with the payload and your secret key as inputs.\nconst jwt = jsonwebtoken.sign(payload, 'your_secret_key_here')\n// The resulting JWT is used for authentication in API requests, ensuring secure access.\n// Important: Never expose your secret key in client-side code!\n```\n\n----------------------------------------\n\nTITLE: Implementing Trigger Buttons in a React Tiptap Editor\nDESCRIPTION: Example React component showing how to integrate trigger buttons for mention, emoji, and slash commands in a Tiptap editor. The component imports necessary dependencies, initializes the editor, and renders the trigger buttons in a toolbar.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/ui-components/components/trigger-button.mdx#2025-04-19_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { TriggerButton } from '@/components/tiptap-ui/trigger-button'\nimport { useEditor, EditorContent } from '@tiptap/react'\n\nexport default function MyEditor() {\n  const editor = useEditor({\n    // editor configuration\n  })\n\n  return (\n    <div>\n      <div className=\"toolbar\">\n        <TriggerButton editor={editor} type=\"mention\" />\n        <TriggerButton editor={editor} type=\"emoji\" />\n        <TriggerButton editor={editor} type=\"slash\" />\n      </div>\n      <EditorContent editor={editor} />\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing DOCX Export in a Tiptap Editor\nDESCRIPTION: Full implementation example showing how to set up the ExportDocx extension and create functions to trigger DOCX export with different configuration options.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/conversion/import-export/docx/editor-export.mdx#2025-04-19_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Import the ExportDocx extension\nimport { ExportDocx } from '@tiptap-pro/extension-export-docx'\n\n// Setup you editor\nconst editor = new Editor({\n  extensions: [\n    // Other extensions ...\n    ExportDocx.configure({\n      onCompleteExport: (result: string | Buffer<ArrayBufferLike> | Blob | Stream) => {}, // required\n      exportType: 'blob', // optional. Default: 'blob'\n      customNodes: [], // optional. Default: []\n      styleOverrides: {}, // optional. Default: {}\n    }),\n    // Other extensions ...\n  ],\n  // Other editor settings ...\n})\n\n// Declare some functions that will call the exportDocx method from your editor\n\nfunction handleExportDocx() {\n  // Call your editor's exportDocx method\n  editor\n    .chain()\n    // Method call without any overrides\n    // It will take the configuration set in the configure method\n    .exportDocx()\n    .run()\n}\n\nfunction handleExportDocxBuffer() {\n  // Call your editor's exportDocx method\n  editor\n    .chain()\n    // Method call with some overrides\n    .exportDocx({\n      // Override the onCompleteExport callback to handle the override exported type\n      onCompleteExport: (result: Buffer) => {\n        // Handle the exported file in a buffer format\n      },\n      // Override the export type\n      exportType: 'Buffer',\n    })\n    .run()\n}\n\n// Call those functions at any point in your application\nhandleExportDocx()\nhandleExportDocxBuffer()\n```\n\n----------------------------------------\n\nTITLE: Creating a Node Extension with Vue Component in Tiptap\nDESCRIPTION: Demonstrates how to create a node extension that uses a Vue component for rendering. It imports the necessary modules and sets up the node view renderer.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/custom-extensions/node-views/vue.mdx#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Node } from '@tiptap/core'\nimport { VueNodeViewRenderer } from '@tiptap/vue-2'\nimport Component from './Component.vue'\n\nexport default Node.create({\n  // configuration ‚Ä¶\n\n  addNodeView() {\n    return VueNodeViewRenderer(Component)\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Triggering Keyboard Shortcut in Tiptap Editor\nDESCRIPTION: Demonstrates how to use the keyboardShortcut command to programmatically trigger a keyboard shortcut event. In this example, it triggers the 'undo' shortcut. The command takes a string parameter specifying the name of the shortcut to trigger.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/api/commands/selection/keyboard-shortcut.mdx#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\neditor.commands.keyboardShortcut('undo')\n```\n\n----------------------------------------\n\nTITLE: React Component with Editable Content\nDESCRIPTION: Implementation of a React component that includes both static and editable content using NodeViewWrapper and NodeViewContent.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/custom-extensions/node-views/react.mdx#2025-04-19_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react'\nimport { NodeViewWrapper, NodeViewContent } from '@tiptap/react'\n\nexport default () => {\n  return (\n    <NodeViewWrapper className=\"react-component\">\n      <span className=\"label\" contentEditable={false}>\n        React Component\n      </span>\n\n      <NodeViewContent className=\"content\" />\n    </NodeViewWrapper>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Setting JSON Content in Tiptap Editor\nDESCRIPTION: Demonstrates how to update editor content with JSON using commands API.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/guides/output-json-html.mdx#2025-04-19_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\neditor.commands.setContent({\n  type: 'doc',\n  content: [\n    // ‚Ä¶\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Slash Dropdown Menu in React with Tiptap\nDESCRIPTION: Example of how to use the SlashDropdownMenu component in a React component with Tiptap editor. It demonstrates importing necessary components, setting up the editor, and rendering the SlashDropdownMenu alongside the EditorContent.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/ui-components/components/slash-dropdown-menu.mdx#2025-04-19_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { SlashDropdownMenu } from '@/components/tiptap-ui/slash-dropdown-menu'\nimport { useEditor, EditorContent } from '@tiptap/react'\n\nexport default function MyEditor() {\n  const editor = useEditor({\n    // editor configuration\n  })\n\n  return (\n    <div>\n      <EditorContent editor={editor} />\n      <SlashDropdownMenu editor={editor} />\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Getting JSON Content from Tiptap Editor\nDESCRIPTION: This snippet shows how to use the 'getJSON()' method to retrieve the current editor document as JSON from the Tiptap Editor.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/api/editor.mdx#2025-04-19_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\neditor.getJSON()\n```\n\n----------------------------------------\n\nTITLE: Getting HTML Content from Tiptap Editor\nDESCRIPTION: This example demonstrates how to use the 'getHTML()' method to retrieve the current editor document as HTML from the Tiptap Editor.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/api/editor.mdx#2025-04-19_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\neditor.getHTML()\n```\n\n----------------------------------------\n\nTITLE: Configuring FloatingMenu in Vanilla JavaScript\nDESCRIPTION: Example of how to configure and use the FloatingMenu extension with Tiptap Editor in vanilla JavaScript. It demonstrates basic setup with a custom element.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/functionality/floatingmenu.mdx#2025-04-19_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Editor } from '@tiptap/core'\nimport FloatingMenu from '@tiptap/extension-floating-menu'\n\nnew Editor({\n  extensions: [\n    FloatingMenu.configure({\n      element: document.querySelector('.menu'),\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Searching Documents with Tiptap Collaboration API using cURL\nDESCRIPTION: This snippet shows how to perform a contextually aware search across all documents using the Tiptap Collaboration API with Semantic Search enabled. It sends a POST request with search terms in the request body.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/collaboration/documents/rest-api.mdx#2025-04-19_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://YOUR_APP_ID.collab.tiptap.cloud/api/search \\\n  -H \"Authorization: YOUR_SECRET_FROM_SETTINGS_AREA\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"content\": \"Your search terms\"}'\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic ProseMirror Schema in JavaScript\nDESCRIPTION: This snippet demonstrates a simple schema for a ProseMirror editor, defining three nodes: doc, paragraph, and text. It shows how to specify content rules, groups, and DOM parsing/rendering.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/core-concepts/schema.mdx#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  nodes: {\n    doc: {\n      content: 'block+',\n    },\n    paragraph: {\n      content: 'inline*',\n      group: 'block',\n      parseDOM: [{ tag: 'p' }],\n      toDOM: () => ['p', 0],\n    },\n    text: {\n      group: 'inline',\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom API Resolver with Tiptap AI Suggestion\nDESCRIPTION: This example demonstrates how to replace the default API endpoint in the AI Suggestion extension with a custom backend. It uses the defaultResolver but overrides the apiResolver to call a custom API endpoint while maintaining the extension's suggestion handling.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/content-ai/capabilities/suggestion/custom-llms.mdx#2025-04-19_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nAiSuggestion.configure({\n  async resolver({ defaultResolver, ...options }) {\n    const suggestions = defaultResolver({\n      ...options,\n      apiResolver: async ({ html, htmlChunks, rules }) => {\n        // Generate the response by calling your custom backend and LLMs\n        const response = await claudeSonnetApi({ html, htmlChunks, rules })\n\n        // Return the response in the correct format (see details below)\n        return { format: 'replacements', content: response }\n      },\n    })\n\n    return suggestions\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Full List of Props for Vue Node View Component\nDESCRIPTION: Provides a comprehensive list of all available props that can be used in a Vue component for a Tiptap node view. It includes props for editor instance, node, decorations, selection state, and various utility functions.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/custom-extensions/node-views/vue.mdx#2025-04-19_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <node-view-wrapper />\n</template>\n\n<script>\n  import { NodeViewWrapper } from '@tiptap/vue-2'\n\n  export default {\n    components: {\n      NodeViewWrapper,\n    },\n\n    props: {\n      // the editor instance\n      editor: {\n        type: Object,\n      },\n\n      // the current node\n      node: {\n        type: Object,\n      },\n\n      // an array of decorations\n      decorations: {\n        type: Array,\n      },\n\n      // `true` when there is a `NodeSelection` at the current node view\n      selected: {\n        type: Boolean,\n      },\n\n      // access to the node extension, for example to get options\n      extension: {\n        type: Object,\n      },\n\n      // get the document position of the current node\n      getPos: {\n        type: Function,\n      },\n\n      // update attributes of the current node\n      updateAttributes: {\n        type: Function,\n      },\n\n      // delete the current node\n      deleteNode: {\n        type: Function,\n      },\n    },\n  }\n</script>\n```\n\n----------------------------------------\n\nTITLE: Applying All AI Suggestions in Tiptap\nDESCRIPTION: This code shows how to apply all AI suggestions at once using the applyAllAiSuggestions command. This applies the first replacement option of each suggestion to the editor's content.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/content-ai/capabilities/suggestion/features/apply-suggestions.mdx#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\neditor.commands.applyAllAiSuggestions()\n```\n\n----------------------------------------\n\nTITLE: Configuring Typography Extension with Disabled Rules\nDESCRIPTION: Example of initializing Tiptap editor with Typography extension while disabling specific typographic rules for fractions.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/functionality/typography.mdx#2025-04-19_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Editor } from '@tiptap/core'\nimport Typography from '@tiptap/extension-typography'\n\nconst editor = new Editor({\n  extensions: [\n    // Disable some included rules\n    Typography.configure({\n      oneHalf: false,\n      oneQuarter: false,\n      threeQuarters: false,\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing Tiptap Editor with HTML Content\nDESCRIPTION: Shows how to create a new Editor instance with initial HTML content.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/guides/output-json-html.mdx#2025-04-19_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nnew Editor({\n  content: `<p>Example Text</p>`,\n})\n```\n\n----------------------------------------\n\nTITLE: Unbinding Event Listeners from Tiptap Editor\nDESCRIPTION: This snippet demonstrates how to unbind event listeners from a Tiptap editor instance using the .off() method. It shows registering an event listener with .on() and then unbinding it with .off().\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/api/events.mdx#2025-04-19_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst onUpdate = () => {\n  // The content has changed.\n}\n\n// Bind ‚Ä¶\neditor.on('update', onUpdate)\n\n// ‚Ä¶ and unbind.\neditor.off('update', onUpdate)\n```\n\n----------------------------------------\n\nTITLE: Accessing AI Storage State in Tiptap\nDESCRIPTION: Shows how to access and check the current state of AI responses from the editor storage. The code demonstrates how to handle different states (error, loading, idle) and access the response data.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/content-ai/capabilities/generation/text-generation/manage-responses.mdx#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst aiStorage = editor.storage.ai || editor.storage.aiAdvanced\n\nif (aiStorage.response.state === 'error') {\n  // The error that occurred\n  aiStorage.response.error\n}\n\nif (aiStorage.response.state === 'loading') {\n  // The message that is currently being processed\n  aiStorage.response.message\n}\n\nif (aiStorage.response.state === 'idle') {\n  if (aiStorage.response.message) {\n    // The successful response\n    aiStorage.response.message\n  } else {\n    // No response has been requested yet\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Image Upload Button in React with Tiptap\nDESCRIPTION: Complete implementation example showing how to set up an editor with image upload functionality, including configuration of the editor instance, required extensions, and component rendering with proper context.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/ui-components/components/image-upload-button.mdx#2025-04-19_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { EditorContent, EditorContext, useEditor } from '@tiptap/react'\nimport { StarterKit } from '@tiptap/starter-kit'\nimport { Image } from '@tiptap/extension-image'\nimport { ImageUploadButton } from '@/components/tiptap-ui/image-upload-button'\nimport { ImageUploadNode } from '@/components/tiptap-node/image-upload-node'\nimport { handleImageUpload, MAX_FILE_SIZE } from '@/lib/tiptap-utils'\n\nimport '@/components/tiptap-node/image-node/image-node.scss'\nimport '@/components/tiptap-node/paragraph-node/paragraph-node.scss'\n\nexport default function MyEditor() {\n  const editor = useEditor({\n    immediatelyRender: false,\n    extensions: [\n      StarterKit,\n      Image,\n      ImageUploadNode.configure({\n        accept: 'image/*',\n        maxSize: MAX_FILE_SIZE,\n        limit: 3,\n        upload: handleImageUpload,\n        onError: (error) => console.error('Upload failed:', error),\n      }),\n    ],\n    content: `\n        <p>Click the button to upload an image.</p>\n        `,\n  })\n\n  return (\n    <EditorContext.Provider value={{ editor }}>\n      <div className=\"tiptap-button-group\" data-orientation=\"horizontal\">\n        <ImageUploadButton text=\"Add\" />\n      </div>\n\n      <EditorContent editor={editor} role=\"presentation\" />\n    </EditorContext.Provider>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Code Block Node in React with Tiptap\nDESCRIPTION: Example of how to implement a code block node in a React application using Tiptap editor. The code demonstrates importing required components, setting up the editor with StarterKit extension, and providing initial HTML content with code examples.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/ui-components/node-components/code-block-node.mdx#2025-04-19_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useEditor, EditorContent } from '@tiptap/react'\nimport { StarterKit } from '@tiptap/starter-kit'\n\nimport '@/components/tiptap-node/code-block-node/code-block-node.scss'\n\nexport default function EditorWithCodeBlock() {\n  const editor = useEditor({\n    extensions: [StarterKit],\n    content: `<h2>1. Inline <code>&lt;code&gt;</code></h2>\n    <p>You can use <code>&lt;code&gt;</code> to style short snippets like <code>const x = 42;</code>.</p>\n\n    <h2>2. Block <code>&lt;pre&gt;&lt;code&gt;</code></h2>\n    <pre><code>// This is a JavaScript example\nfunction greet(name) {\n    return \\`Hello, \\${name}!\\`;\n}\n\nconsole.log(greet(\"World\"));</code></pre>\n    `,\n  })\n\n  return <EditorContent editor={editor} />\n}\n```\n\n----------------------------------------\n\nTITLE: Using toggleMark Command in Tiptap Editor\nDESCRIPTION: Demonstrates different ways to use the toggleMark command for toggling marks in Tiptap. Shows basic usage, usage with attributes, and usage with extended mark range option. The command can toggle marks like bold with optional attributes and configuration options.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/api/commands/nodes-and-marks/toggle-mark.mdx#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// toggles a bold mark\neditor.commands.toggleMark('bold')\n\n// toggles bold mark with a color attribute\neditor.commands.toggleMark('bold', { color: 'red' })\n\n// toggles a bold mark with a color attribute and removes the mark across the current selection\neditor.commands.toggleMark('bold', { color: 'red' }, { extendEmptyMarkRange: true })\n```\n\n----------------------------------------\n\nTITLE: Customizing Level Generation\nDESCRIPTION: Example of customizing how item levels are generated in the table of contents\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/functionality/table-of-contents.mdx#2025-04-19_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nTableOfContents.configure({\n  getLevel: (anchor, previousAnchors) => {\n    // do some custom logic, but for this example we will just return 1\n    return 1\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Executing undoInputRule Command in Tiptap Editor (JavaScript)\nDESCRIPTION: This snippet demonstrates how to use the undoInputRule command in Tiptap editor. The command undoes the most recent input rule that was triggered, allowing users to revert automatic text transformations.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/api/commands/nodes-and-marks/undo-input-rule.mdx#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\neditor.commands.undoInputRule()\n```\n\n----------------------------------------\n\nTITLE: Extending AI Generation Extension for Custom Commands in JavaScript/TypeScript\nDESCRIPTION: This snippet shows how to extend the Ai extension to add a custom command 'aiCustomTextCommand'. It translates selected text to French and adds emojis using a custom prompt.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/content-ai/capabilities/generation/text-generation/custom-commands.mdx#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Ai, getHTMLContentBetween } from '@tiptap-pro/extension-ai'\n\n// ‚Ä¶ other imports\n\n// Declare extension types if TypeScript is used.\n// More info: https://tiptap.dev/docs/guides/typescript\n//\n// declare module '@tiptap/core' {\n//   interface Commands<ReturnType> {\n//     ai: {\n//       aiCustomTextCommand: (options?: TextOptions) => ReturnType,\n//     }\n//   }\n// }\n\nconst AiExtended = Ai.extend({\n  addCommands() {\n    return {\n      ...this.parent?.(),\n\n      aiCustomTextCommand:\n        (options = {}) =>\n        ({ editor, state }) => {\n          const { from, to } = state.selection\n          const selectedText = getHTMLContentBetween(editor, from, to)\n\n          return editor.commands.aiTextPrompt({\n            text: `Translate the following text to French and add some emojis: ${selectedText}`,\n            ...options,\n          })\n        },\n    }\n  },\n})\n\n// Initialize your Tiptap editor instance and register the extended extension\n\nconst editor = new Editor{\n  extensions: [\n    StarterKit,\n    AiExtended.configure({\n      /* ‚Ä¶ */\n    }),\n  ],\n  content: '',\n}\n\n// Run your custom command\n// editor.chain().focus().aiCustomTextCommand().run()\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple FloatingMenus with Unique Keys\nDESCRIPTION: Demonstration of how to configure multiple floating menus in a single Tiptap editor instance by using unique pluginKeys.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/functionality/floatingmenu.mdx#2025-04-19_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Editor } from '@tiptap/core'\nimport FloatingMenu from '@tiptap/extension-floating-menu'\n\nnew Editor({\n  extensions: [\n    FloatingMenu.configure({\n      pluginKey: 'floatingMenuOne',\n      element: document.querySelector('.menu-one'),\n    }),\n    FloatingMenu.configure({\n      pluginKey: 'floatingMenuTwo',\n      element: document.querySelector('.menu-two'),\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Toggling Lists in Tiptap Editor using JavaScript\nDESCRIPTION: Demonstrates how to toggle between different list types using the toggleList command. The command accepts list type and list item type as parameters, with optional keepMarks and attributes parameters. Supports both bullet lists and ordered lists.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/api/commands/lists/toggle-list.mdx#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// toggle a bullet list with list items\neditor.commands.toggleList('bulletList', 'listItem')\n\n// toggle a numbered list with list items\neditor.commands.toggleList('orderedList', 'listItem')\n```\n\n----------------------------------------\n\nTITLE: Initializing Tiptap Schema with Editor Instance\nDESCRIPTION: Creates a Tiptap editor instance with basic extensions (Document, Paragraph, Text) and retrieves the schema from the editor object.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/core-concepts/schema.mdx#2025-04-19_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Editor } from '@tiptap/core'\nimport Document from '@tiptap/extension-document'\nimport Paragraph from '@tiptap/extension-paragraph'\nimport Text from '@tiptap/extension-text'\n\nconst editor = new Editor({\n  extensions: [\n    Document,\n    Paragraph,\n    Text,\n    // add more extensions here\n  ])\n})\n\nconst schema = editor.schema\n```\n\n----------------------------------------\n\nTITLE: Implementing Content Change Listener in Tiptap\nDESCRIPTION: Shows how to set up an event listener for content changes and export content as JSON.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/guides/output-json-html.mdx#2025-04-19_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst editor = new Editor({\n  // intial content\n  content: `<p>Example Content</p>`,\n\n  // triggered on every change\n  onUpdate: ({ editor }) => {\n    const json = editor.getJSON()\n    // send the content to an API here\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Using scrollIntoView Command in Tiptap Editor (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to use the scrollIntoView command in Tiptap editor. It scrolls the view to the current selection or cursor position.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/api/commands/selection/scroll-into-view.mdx#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\neditor.commands.scrollIntoView()\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Commands to Tiptap Paragraph Extension\nDESCRIPTION: Demonstrates how to add custom commands to a Tiptap extension. This example extends the Paragraph extension to add a 'paragraph' command that sets the node type to paragraph.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/custom-extensions/extend-existing.mdx#2025-04-19_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport Paragraph from '@tiptap/extension-paragraph'\n\nconst CustomParagraph = Paragraph.extend({\n  addCommands() {\n    return {\n      paragraph:\n        () =>\n        ({ commands }) => {\n          return commands.setNode('paragraph')\n        },\n    }\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Passing container props to EditorProvider\nDESCRIPTION: Example of how to pass container props to EditorProvider using the editorContainerProps prop.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/getting-started/install/react.mdx#2025-04-19_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n<EditorProvider\n  extensions={extensions}\n  content={content}\n  editorContainerProps={{ className: 'editor-container' }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Completion Resolver\nDESCRIPTION: Example showing how to override the completion resolver for a specific 'rephrase' action while maintaining default behavior for other actions.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/content-ai/capabilities/generation/custom-llms.mdx#2025-04-19_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// ...\nimport Ai from '@tiptap-pro/extension-ai-advanced'\n// ...\n\nAi.configure({\n  appId: 'APP_ID_HERE',\n  token: 'TOKEN_HERE',\n  // ...\n  onError(error, context) {\n    // handle error\n  },\n  // Define the resolver function for completions (attention: streaming and image have to be defined separately!)\n  aiCompletionResolver: async ({\n    editor,\n    action,\n    text,\n    textOptions,\n    extensionOptions,\n    defaultResolver,\n  }) => {\n    // Check against action, text, whatever you like\n    // Decide to use custom endpoint\n    if (action === 'rephrase') {\n      const response = await fetch('https://dummyjson.com/quotes/random')\n      const json = await response?.json()\n\n      if (!response.ok) {\n        throw new Error(`${response.status} ${json?.message}`)\n      }\n\n      return json?.quote\n    }\n\n    // Everything else is routed to the Tiptap AI service\n    return defaultResolver({\n      editor,\n      action,\n      text,\n      textOptions,\n      extensionOptions,\n      defaultResolver,\n    })\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Executing deleteRange Command in Tiptap Editor (JavaScript)\nDESCRIPTION: This snippet demonstrates how to use the deleteRange command in Tiptap to remove content within a specific range. The command requires a range object with 'from' and 'to' properties defining the start and end positions of the content to be deleted.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/api/commands/selection/delete-range.mdx#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\neditor.commands.deleteRange({ from: 0, to: 12 })\n```\n\n----------------------------------------\n\nTITLE: Configuring DOCX Export with Custom Node Rendering\nDESCRIPTION: Setup for the ExportDocx extension that defines how a custom Hintbox node should be rendered in DOCX format. It includes a custom node renderer, style definitions for the node appearance, and configuration for the export process.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/conversion/import-export/docx/custom-node-conversion.mdx#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Import the ExportDocx extension\nimport {\n  convertTextNode,\n  Docx,\n  ExportDocx,\n  lineHeightToDocx,\n  pixelsToHalfPoints,\n  pointsToTwips,\n} from '@tiptap-pro/extension-export-docx'\n\nconst editor = new Editor({\n  extensions: [\n    // Other extensions ...\n    ExportDocx.configure({\n      onCompleteExport: result => {\n        setIsLoading(false)\n        const blob = new Blob([result], {\n          type: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n        })\n        const url = URL.createObjectURL(blob)\n        const a = document.createElement('a')\n        a.href = url\n        a.download = 'export.docx'\n        a.click()\n        URL.revokeObjectURL(url)\n      },\n      exportType: 'blob',\n      customNodes: [\n        {\n          type: 'hintbox',\n          render: node => {\n            // Here we define how our custom Hintbox node should be rendered in the DOCX.\n            // Per the documentation, we should return a Docx node\n            // that's either a Paragraph, an array of Paragraphs, or a Table.\n            return new Docx.Paragraph({\n              children: node.content.map(content => convertTextNode(content)),\n              style: 'Hintbox', // Here we apply our custom style to the Paragraph node.\n            })\n            },\n        },\n      ], // Custom nodes\n      styleOverrides: {\n        paragraphStyles: [\n          // Here we define our custom styles for our custom Hintbox node.\n          {\n            id: 'Hintbox',\n            name: 'Hintbox',\n            basedOn: 'Normal',\n            next: 'Normal',\n            quickFormat: false,\n            run: {\n              font: 'Aptos Light',\n              size: pixelsToHalfPoints(16),\n            },\n            paragraph: {\n              spacing: {\n                before: pointsToTwips(12),\n                after: pointsToTwips(12),\n                line: lineHeightToDocx(1),\n              },\n              border: {\n                // DOCX colors are in Hexadecimal without the leading #\n                top: { style: Docx.BorderStyle.SINGLE, size: 1, color: 'b8d8ff', space: 5 },\n                bottom: { style: Docx.BorderStyle.SINGLE, size: 1, color: 'b8d8ff', space: 5 },\n                right: { style: Docx.BorderStyle.SINGLE, size: 1, color: 'b8d8ff', space: 5 },\n                left: { style: Docx.BorderStyle.SINGLE, size: 1, color: 'b8d8ff', space: 5 },\n              },\n              shading: {\n                type: Docx.ShadingType.SOLID,\n                color: 'e6f3ff',\n              },\n            },\n          },\n        ],\n      }, // Style overrides\n    }),\n    // Other extensions ...\n  ],\n  // Other editor settings ...\n})\n```\n\n----------------------------------------\n\nTITLE: Generating Tiptap Schema without Editor\nDESCRIPTION: Uses the getSchema helper function to create a ProseMirror schema directly from extensions without initializing an editor instance.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/core-concepts/schema.mdx#2025-04-19_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getSchema } from '@tiptap/core'\nimport Document from '@tiptap/extension-document'\nimport Paragraph from '@tiptap/extension-paragraph'\nimport Text from '@tiptap/extension-text'\n\nconst schema = getSchema([\n  Document,\n  Paragraph,\n  Text,\n  // add more extensions here\n])\n```\n\n----------------------------------------\n\nTITLE: Using Event Listener for Content Errors in Tiptap\nDESCRIPTION: Shows how to attach a listener to the contentError event after initializing the Tiptap editor to handle content validation errors.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/guides/invalid-schema.mdx#2025-04-19_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconst editor = new Editor({\n  enableContentCheck: true,\n  content: invalidContent,\n  // ... other options\n})\n\neditor.on('contentError', ({ editor, error, disableCollaboration }) => {\n  // Your error handling logic here\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Editable Content to Tiptap Node Views with JavaScript\nDESCRIPTION: This snippet shows how to create a node view with both non-editable and editable content areas using JavaScript. It demonstrates the use of contentDOM to specify the editable region within the node view.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/custom-extensions/node-views/javascript.mdx#2025-04-19_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Create a container for the node view\nconst dom = document.createElement('div')\n\n// Give other elements containing text `contentEditable = false`\nconst label = document.createElement('span')\nlabel.innerHTML = 'Node view'\nlabel.contentEditable = false\n\n// Create a container for the content\nconst content = document.createElement('div')\n\n// Append all elements to the node view container\ndom.append(label, content)\n\nreturn {\n  // Pass the node view container ‚Ä¶\n  dom,\n  // ‚Ä¶ and the content container:\n  contentDOM: content,\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Editor Editability State\nDESCRIPTION: Shows how to make the editor read-only by setting its editable state to false.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/api/editor.mdx#2025-04-19_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\n// Make the editor read-only\neditor.setEditable(false)\n```\n\n----------------------------------------\n\nTITLE: Implementing List Node Component in React with Tiptap\nDESCRIPTION: Example implementation of a Tiptap editor with list functionality, including ordered lists, unordered lists, and task lists. Demonstrates configuration of editor extensions and initial content setup.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/ui-components/node-components/list-node.mdx#2025-04-19_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useEditor, EditorContent } from '@tiptap/react'\nimport { TaskList } from '@tiptap/extension-task-list'\nimport { TaskItem } from '@tiptap/extension-task-item'\nimport { StarterKit } from '@tiptap/starter-kit'\n\nimport '@/components/tiptap-node/list-node/list-node.scss'\n\nexport default function EditorWithLists() {\n  const editor = useEditor({\n    extensions: [\n      StarterKit,\n      TaskList,\n      TaskItem.configure({\n        nested: true,\n      }),\n    ],\n    content: `\n      <ul>\n        <li>Unordered list item</li>\n        <li>Another unordered item</li>\n      </ul>\n\n      <ol>\n        <li>Ordered list item</li>\n        <li>Another ordered item</li>\n      </ol>\n\n      <ul data-type=\"taskList\">\n        <li data-type=\"taskItem\" data-checked=\"true\">Completed task</li>\n        <li data-type=\"taskItem\" data-checked=\"false\">Pending task</li>\n      </ul>\n    `,\n  })\n\n  return <EditorContent editor={editor} />\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Floating Element with Tiptap React Editor\nDESCRIPTION: Example React component showing how to implement a floating element with Tiptap editor. Demonstrates basic setup with editor instance and visibility control.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/ui-components/components/floating-element.mdx#2025-04-19_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { FloatingElement } from '@/components/tiptap-ui/floating-element'\nimport { useEditor, EditorContent } from '@tiptap/react'\n\nexport default function MyEditor() {\n  const editor = useEditor({\n    // editor configuration\n  })\n\n  const [show, setShow] = React.useState(false)\n\n  return (\n    <div>\n      <EditorContent editor={editor} />\n      <FloatingElement editor={editor} shouldShow={show} zIndex={50}>\n        <div className=\"floating-toolbar\">{/* Toolbar content */}</div>\n      </FloatingElement>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom HTML Attributes to Images in Tiptap\nDESCRIPTION: Sets custom HTML attributes for the rendered image tag, such as CSS classes or other attributes.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/nodes/image.mdx#2025-04-19_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nImage.configure({\n  HTMLAttributes: {\n    class: 'my-custom-class',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Streaming Content into Tiptap Editor using getWritableStream API\nDESCRIPTION: This example shows an alternative method to stream content using a WritableStream object, which can be used to write data chunks directly into the Tiptap editor.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/content-ai/capabilities/generation/text-generation/stream.mdx#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\neditor.commands.streamContent({ from: 0, to: 10 }, async ({ getWritableStream }) => {\n  const response = await fetch('https://example.com/stream')\n  // This will pipe the response body content directly into the editor\n  await response.body?.pipeTo(getWritableStream())\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring AI Suggestion Extension Options in TypeScript\nDESCRIPTION: Defines the configuration interface for the AI Suggestion extension, including rules, suggestion handling, caching, and customization options for AI-powered proofreading in Tiptap.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/content-ai/capabilities/suggestion/api-reference.mdx#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Configuration options for the AI Suggestion extension.\n */\nexport interface AiSuggestionOptions {\n  /** Rules to be applied during proofreading\n   * @default []\n   */\n  rules: AiSuggestionRule[]\n  /** Initial suggestions to display before any proofreading is done\n   * @default []\n   */\n  initialSuggestions: Suggestion[]\n  /** Initial rejections to apply before any proofreading is done\n   * @default []\n   */\n  initialRejections: AiSuggestionRejection[]\n  /** Function to customize the decoration of suggestions in the editor\n   * @default `getDefaultDecorations()`\n   * @param args - Options for customizing suggestion decorations.\n   * @return An array of `Decoration` objects.\n   */\n  getCustomSuggestionDecoration: (args: GetCustomSuggestionDecorationOptions) => Decoration[]\n  /** Time in milliseconds to wait before reloading suggestions after content changes.\n   * @default 800\n   */\n  debounceTimeout: number\n  /** Whether to load suggestions when the editor is initialized\n   * @default true\n   */\n  loadOnStart: boolean\n  /** Whether to reload suggestions when the editor content changes\n   * @default true\n   */\n  reloadOnUpdate: boolean\n  /** Callback for handling errors when loading suggestions\n   * @param error - The error that occurred during suggestion loading.\n   * @default console.error\n   */\n  onLoadSuggestionsError: (error: unknown) => void\n  /**\n   * The AI model used to proofread the content and generate suggestions.\n   * @default \"gpt-4o-mini\"\n   */\n  modelName: AiSuggestionModelName\n  /**\n   * Function to load suggestions from an external source, based\n   * on the current editor content and rules. Lets you analyze the\n   * content with your own AI model and return suggestions.\n   *\n   * @param options - Options for resolving suggestions.\n   * @return A list of suggestions that should be applied.\n   */\n  resolver: (options: AiSuggestionCustomResolverOptions) => Promise<Suggestion[]>\n  /**\n   * The Tiptap AI app ID.\n   */\n  appId: string\n  /**\n   * The Tiptap AI token.\n   */\n  token: string\n  /**\n   * The base URL for the Tiptap AI API.\n   */\n  baseUrl: string\n  /**\n   * Optional context to provide additional information to the AI model\n   * for generating suggestions.\n   */\n  context: string | null\n  /**\n   * Whether to chunk the editor content and cache the suggestions\n   * for each chunk. This allows the extension to reuse the cached suggestions\n   * for each chunk when the content is reloaded. This is useful for large\n   * documents to improve performance and reduce costs.\n   *\n   * @default true\n   */\n  enableCache: boolean\n  /**\n   * The size of the chunks to split the document into, measured in the amount\n   * of top-level child nodes of the editor's content.\n   *\n   * @default 2\n   */\n  chunkSize: number\n  /**\n   * A function that splits the HTML content of the editor into chunks. By\n   * default, it splits the HTML into smaller pieces based on the configured\n   * chunk size and returns an array of HTML chunks. You can override this\n   * behavior by providing your own function.\n   *\n   * @param options - The options for chunking the HTML.\n   * @returns An array of chunks\n   * @default `defaultChunkHtmlFunction`\n   */\n  chunkHtmlFunction: (options: ChunkHtmlOptions) => HtmlChunk[]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Node Button Component with React\nDESCRIPTION: Example of how to use the NodeButton component in a React application with Tiptap. This demonstrates setting up the editor with StarterKit extension and implementing buttons to toggle blockquote and codeBlock nodes.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/ui-components/components/node-button.mdx#2025-04-19_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { EditorContent, EditorContext, useEditor } from '@tiptap/react'\nimport { StarterKit } from '@tiptap/starter-kit'\nimport { NodeButton } from '@/components/tiptap-ui/node-button'\n\nimport '@/components/tiptap-node/code-block-node/code-block-node.scss'\nimport '@/components/tiptap-node/paragraph-node/paragraph-node.scss'\n\nexport default function MyEditor() {\n  const editor = useEditor({\n    immediatelyRender: false,\n    extensions: [StarterKit],\n    content: `\n        <blockquote>\n            <p>\"The best way to predict the future is to invent it.\"</p><p>‚Äî Alan Kay</p>\n        </blockquote>\n        <pre><code>console.log('Hello, World!');</code></pre>\n        `,\n  })\n\n  return (\n    <EditorContext.Provider value={{ editor }}>\n      <div className=\"tiptap-button-group\" data-orientation=\"horizontal\">\n        <NodeButton type=\"blockquote\" />\n        <NodeButton type=\"codeBlock\" />\n      </div>\n\n      <EditorContent editor={editor} role=\"presentation\" />\n    </EditorContext.Provider>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Chaining Commands Inside Custom Commands in Tiptap\nDESCRIPTION: Demonstrates how to chain commands within a custom command implementation using the provided chain function.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/api/commands/index.mdx#2025-04-19_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\naddCommands() {\n  return {\n    customCommand: attributes => ({ chain }) => {\n      // Doesn't work:\n      // return editor.chain() ‚Ä¶\n\n      // Does work:\n      return chain()\n        .insertContent('foo!')\n        .insertContent('bar!')\n        .run()\n    },\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Authentication Failures with Tiptap Collaboration Provider in TSX\nDESCRIPTION: Example of handling authentication failures by listening to the authenticationFailed event and prompting the user to reauthenticate.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/collaboration/provider/events.mdx#2025-04-19_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nprovider.on('authenticationFailed', ({ reason }) => {\n  console.error('Authentication failed:', reason)\n  requestUserReauthentication()\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Node Content in Tiptap Schema\nDESCRIPTION: This snippet demonstrates various ways to define the content attribute for nodes in a Tiptap schema, showing different content rules and combinations.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/core-concepts/schema.mdx#2025-04-19_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nNode.create({\n  // must have one or more blocks\n  content: 'block+',\n\n  // must have zero or more blocks\n  content: 'block*',\n\n  // allows all kinds of 'inline' content (text or hard breaks)\n  content: 'inline*',\n\n  // must not have anything else than 'text'\n  content: 'text*',\n\n  // can have one or more paragraphs, or lists (if lists are used)\n  content: '(paragraph|list?)+',\n\n  // must have exact one heading at the top, and one or more blocks below\n  content: 'heading block+',\n})\n```\n\n----------------------------------------\n\nTITLE: Customizing ODT Export Behavior in Tiptap\nDESCRIPTION: Advanced example demonstrating how to customize the export process using the onExport callback, including error handling, loading state management, and file download control.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/conversion/import-export/odt/editor-extensions.mdx#2025-04-19_snippet_7\n\nLANGUAGE: js\nCODE:\n```\n// You can also use the onExport callback to customize the export behavior\neditor.chain().export({\n  format: 'docx',\n  onExport(context) {\n    const { blob, error, download, filename } = context\n\n    // add error handling\n    if (error) {\n      showErrorToast({ message: error.message })\n    }\n\n    // you can change the loading state of your application for example\n    isLoading = false\n\n    // you could modify the filename or handle the blob differently here\n    // but we will keep them as they are\n\n    // you can trigger a download directly by calling the download method\n    download()\n\n    // keep in mind that the download method will only work in the browser\n    // and if the blob and filename was changed before must be managed manually\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Adjusting Text Tone with aiAdjustTone Command in Tiptap Editor (JavaScript)\nDESCRIPTION: Shows how to use the aiAdjustTone command to change the tone of selected text. It accepts a Tone parameter and TextOptions.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/content-ai/capabilities/generation/text-generation/built-in-commands.mdx#2025-04-19_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\neditor.chain().focus().aiAdjustTone(tone: Tone, options: TextOptions).run()\n```\n\n----------------------------------------\n\nTITLE: Implementing v-model with Tiptap Editor in Vue.js\nDESCRIPTION: An advanced Tiptap editor component that supports v-model for data binding. It watches for value changes and emits input events for two-way binding.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/getting-started/install/nuxt.mdx#2025-04-19_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <editor-content :editor=\"editor\" />\n</template>\n\n<script>\n  import { Editor, EditorContent } from '@tiptap/vue-3'\n  import StarterKit from '@tiptap/starter-kit'\n\n  export default {\n    components: {\n      EditorContent,\n    },\n\n    props: {\n      value: {\n        type: String,\n        default: '',\n      },\n    },\n\n    data() {\n      return {\n        editor: null,\n      }\n    },\n\n    watch: {\n      value(value) {\n        // HTML\n        const isSame = this.editor.getHTML() === value\n\n        // JSON\n        // const isSame = JSON.stringify(this.editor.getJSON()) === JSON.stringify(value)\n\n        if (isSame) {\n          return\n        }\n\n        this.editor.commands.setContent(value, false)\n      },\n    },\n\n    mounted() {\n      this.editor = new Editor({\n        content: this.value,\n        extensions: [StarterKit],\n        onUpdate: () => {\n          // HTML\n          this.$emit('input', this.editor.getHTML())\n\n          // JSON\n          // this.$emit('input', this.editor.getJSON())\n        },\n      })\n    },\n\n    beforeUnmount() {\n      this.editor.destroy()\n    },\n  }\n</script>\n```\n\n----------------------------------------\n\nTITLE: Creating a Bold Button in HTML for Tiptap Editor\nDESCRIPTION: A simple HTML button implementation that toggles bold formatting in the Tiptap editor. The onclick handler executes a chain of commands that maintains focus on the editor and applies or removes bold formatting to the selected text.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/getting-started/style-editor/custom-menus.mdx#2025-04-19_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<button onclick=\"editor.chain().focus().toggleBold().run()\">Bold</button>\n```\n\n----------------------------------------\n\nTITLE: Using toggleNode Command in Tiptap Editor - JavaScript\nDESCRIPTION: Examples showing how to toggle between different node types using the toggleNode command. Demonstrates toggling between paragraph and heading nodes, and paragraph and image nodes with attributes.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/api/commands/nodes-and-marks/toggle-node.mdx#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// toggle a paragraph with a heading node\neditor.commands.toggleNode('paragraph', 'heading', { level: 1 })\n\n// toggle a paragraph with a image node\neditor.commands.toggleNode('paragraph', 'image', { src: 'https://example.com/image.png' })\n```\n\n----------------------------------------\n\nTITLE: Configuring the DOCX Export Extension\nDESCRIPTION: Detailed configuration example for the ExportDocx extension showing all available options including callback handlers, export type, custom nodes, and style overrides.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/conversion/import-export/docx/editor-export.mdx#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Import the ExportDocx extension\nimport { ExportDocx } from '@tiptap-pro/extension-export-docx'\n\nconst editor = new Editor({\n  extensions: [\n    // Other extensions ...\n    ExportDocx.configure({\n      onCompleteExport: (result: string | Buffer<ArrayBufferLike> | Blob | Stream) => void, // required\n      exportType: 'blob', // optional. Default: 'blob'\n      customNodes: [], // optional. Default: []\n      styleOverrides: {}, // optional. Default: {}\n    }),\n    // Other extensions ...\n  ],\n  // Other editor settings ...\n})\n```\n\n----------------------------------------\n\nTITLE: Tracking Mouse Movement with Awareness in Tiptap Collaboration with TypeScript\nDESCRIPTION: Adds a mouse movement event listener that updates the user's awareness information with their current cursor position. This enables real-time tracking of user mouse positions across all connected clients.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/collaboration/core-concepts/awareness.mdx#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ndocument.addEventListener('mousemove', (event) => {\n  // Share any information you like\n  provider.setAwarenessField('user', {\n    name: 'Kevin James',\n    color: '#ffcc00',\n    mouseX: event.clientX,\n    mouseY: event.clientY,\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Binding and Unbinding Event Listeners to Tiptap Collaboration Provider in TypeScript\nDESCRIPTION: Shows how to bind event listeners to a provider and then remove them when they're no longer needed using on() and off() methods.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/collaboration/provider/events.mdx#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst onMessage = () => {\n  console.log('New message received.')\n}\n\n// Binding\nprovider.on('message', onMessage)\n\n// Unbinding\nprovider.off('message', onMessage)\n```\n\n----------------------------------------\n\nTITLE: Configuring Paragraph Extension with Custom HTML Attributes\nDESCRIPTION: Example of how to configure the Paragraph extension with custom HTML attributes such as CSS classes.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/nodes/paragraph.mdx#2025-04-19_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nParagraph.configure({\n  HTMLAttributes: {\n    class: 'my-custom-class',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing Tiptap Editor with Alpine.js and Livewire\nDESCRIPTION: This JavaScript snippet sets up the Tiptap editor using Alpine.js and integrates it with Livewire. It handles content synchronization between the editor and Livewire component, ensuring updates are reflected in both directions.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/getting-started/install/php.mdx#2025-04-19_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Editor } from '@tiptap/core'\nimport StarterKit from '@tiptap/starter-kit'\n\nwindow.setupEditor = function (content) {\n  let editor\n\n  return {\n    content: content,\n\n    init(element) {\n      editor = new Editor({\n        element: element,\n        extensions: [StarterKit],\n        content: this.content,\n        onUpdate: ({ editor }) => {\n          this.content = editor.getHTML()\n        },\n      })\n\n      this.$watch('content', (content) => {\n        // If the new content matches Tiptap's then we just skip.\n        if (content === editor.getHTML()) return\n\n        /*\n          Otherwise, it means that an external source\n          is modifying the data on this Alpine component,\n          which could be Livewire itself.\n          In this case, we only need to update Tiptap's\n          content and we're done.\n          For more information on the `setContent()` method, see:\n            https://www.tiptap.dev/api/commands/set-content\n        */\n        editor.commands.setContent(content, false)\n      })\n    },\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using JoinBackward Command in Tiptap Editor\nDESCRIPTION: Demonstrates how to use the joinBackward command to join two nodes backwards from the current selection. This command attempts to reduce the distance between blocks when the selection is empty and at the start of a textblock.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/api/commands/nodes-and-marks/join-backward.mdx#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\neditor.commands.joinBackward()\n```\n\n----------------------------------------\n\nTITLE: Configuring Atom Nodes in Tiptap\nDESCRIPTION: This snippet demonstrates how to create atom nodes in Tiptap, which are not directly editable and treated as single units. It includes an example from the Mention extension.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/core-concepts/schema.mdx#2025-04-19_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nNode.create({\n  atom: true,\n})\n\n// Used to convert an atom node to plain text\nrenderText({ node }) {\n  return `@${node.attrs.id}`\n},\n```\n\n----------------------------------------\n\nTITLE: Reverting to a Version with Custom Name in Tiptap History\nDESCRIPTION: JavaScript code demonstrating how to revert to a specific version while providing a custom name for the new version that's created.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/collaboration/documents/history.mdx#2025-04-19_snippet_8\n\nLANGUAGE: js\nCODE:\n```\neditor.commands.revertToVersion(4, 'Revert to version')\n```\n\n----------------------------------------\n\nTITLE: Accessing Node Attributes in Vue Component\nDESCRIPTION: Demonstrates how to access node attributes within a Vue component used for a Tiptap node view. It shows the props definition for the node object.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/custom-extensions/node-views/vue.mdx#2025-04-19_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nprops: {\n  node: {\n    type: Object,\n    required: true,\n  },\n},\n```\n\n----------------------------------------\n\nTITLE: Creating Inline Nodes in Tiptap\nDESCRIPTION: This snippet shows how to create inline nodes in Tiptap, which are rendered in line with the text. It includes an example of a custom inline node definition.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/core-concepts/schema.mdx#2025-04-19_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nNode.create({\n  // renders nodes in line with the text, for example\n  inline: true,\n})\n\nNode.create({\n  name: 'customInlineNode',\n  group: 'inline',\n  inline: true,\n  content: 'text*',\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Tiptap Nodes in JavaScript\nDESCRIPTION: This snippet shows how to create Tiptap nodes using the Node.create() method. It defines Document, Paragraph, and Text nodes with their respective properties and methods.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/core-concepts/schema.mdx#2025-04-19_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Node } from '@tiptap/core'\n\nconst Document = Node.create({\n  name: 'doc',\n  topNode: true,\n  content: 'block+',\n})\n\nconst Paragraph = Node.create({\n  name: 'paragraph',\n  group: 'block',\n  content: 'inline*',\n  parseHTML() {\n    return [{ tag: 'p' }]\n  },\n  renderHTML({ HTMLAttributes }) {\n    return ['p', HTMLAttributes, 0]\n  },\n})\n\nconst Text = Node.create({\n  name: 'text',\n  group: 'inline',\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Tiptap Editor Extensions\nDESCRIPTION: This snippet illustrates different ways to configure extensions for a Tiptap Editor. It shows how to use the StarterKit, specific extensions, or a combination of both.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/api/editor.mdx#2025-04-19_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Editor } from '@tiptap/core'\nimport StarterKit from '@tiptap/starter-kit'\nimport Document from '@tiptap/extension-document'\nimport Paragraph from '@tiptap/extension-paragraph'\nimport Text from '@tiptap/extension-text'\nimport Highlight from '@tiptap/extension-highlight'\n\nnew Editor({\n  // Use the default extensions\n  extensions: [StarterKit],\n\n  // ‚Ä¶ or use specific extensions\n  extensions: [Document, Paragraph, Text],\n\n  // ‚Ä¶ or both\n  extensions: [StarterKit, Highlight],\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Floating Toolbar in React with Tiptap\nDESCRIPTION: Example React component showing how to integrate the floating toolbar with a Tiptap editor. It imports the necessary components, creates an editor instance, and renders both the editor content and the floating toolbar.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/ui-components/components/floating-toolbar.mdx#2025-04-19_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ToolbarFloating } from '@/components/tiptap-ui/toolbar-floating'\nimport { useEditor, EditorContent } from '@tiptap/react'\n\nexport default function MyEditor() {\n  const editor = useEditor({\n    // editor configuration\n  })\n\n  return (\n    <div>\n      <EditorContent editor={editor} />\n      <ToolbarFloating editor={editor} />\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring AI Suggestion Rules in TypeScript\nDESCRIPTION: Configures the Tiptap AI Suggestion extension with a rule for spell checking. Each rule requires a unique id, title, prompt, color, and backgroundColor properties.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/content-ai/capabilities/suggestion/features/define-rules.mdx#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nAiSuggestion.configure({\n  rules: [\n    {\n      id: '1',\n      title: 'Spell Check',\n      prompt: 'Identify and correct any spelling mistakes',\n      color: '#DC143C',\n      backgroundColor: 'FFE6E6',\n    },\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Typed Commands to Tiptap Extension with TypeScript\nDESCRIPTION: This code snippet illustrates how to add typed commands to a Tiptap extension using TypeScript. It extends the Commands interface and creates a custom command with proper typing.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/guides/typescript.mdx#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Extension } from '@tiptap/core'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    customExtension: {\n      /**\n       * Comments will be added to the autocomplete.\n       */\n      yourCommand: (someProp: any) => ReturnType\n    }\n  }\n}\n\nconst CustomExtension = Extension.create({\n  addCommands() {\n    return {\n      yourCommand:\n        (someProp) =>\n        ({ commands }) => {\n          // ‚Ä¶\n        },\n    }\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Chaining commands in Tiptap v2\nDESCRIPTION: Example of how to chain multiple commands in Tiptap v2, including focusing the editor and toggling bold style.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/guides/upgrade-tiptap-v1.mdx#2025-04-19_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\neditor.chain().focus().toggleBold().run()\n```\n\n----------------------------------------\n\nTITLE: Loading AI Suggestions with Debounce in Tiptap\nDESCRIPTION: Load AI suggestions with a debounce delay using the loadAiSuggestionsDebounced command, which prevents multiple rapid calls from triggering multiple API requests.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/content-ai/capabilities/suggestion/features/configure-when-to-load-suggestions.mdx#2025-04-19_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\neditor.commands.loadAiSuggestionsDebounced()\n```\n\n----------------------------------------\n\nTITLE: Chaining Tiptap Commands with JavaScript\nDESCRIPTION: A JavaScript example showing the command chain syntax used in Tiptap. The example illustrates how to chain multiple commands including focusing the editor and toggling bold formatting.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/getting-started/style-editor/custom-menus.mdx#2025-04-19_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\neditor.chain().focus().toggleBold().run()\n```\n\n----------------------------------------\n\nTITLE: Updating CodeBlock Content Example\nDESCRIPTION: Demonstrates how to get and update the content of a codeBlock node using NodePos navigation.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/api/node-positions.mdx#2025-04-19_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// get the first codeBlock from your document\nconst $codeBlock = editor.$node('codeBlock')\n\n// get the previous NodePos of your codeBlock node\nconst $previousItem = $codeBlock.before\n\n// easily update the content\n$previousItem.content = '<p>Updated content</p>'\n```\n\n----------------------------------------\n\nTITLE: Setting Read-Only Document Access with JWT in TypeScript\nDESCRIPTION: Creates a JWT that grants read-only access to specific documents by using the readonlyDocumentNames property. This allows users to view documents without the ability to edit them, maintaining document integrity while providing necessary access.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/collaboration/getting-started/authenticate.mdx#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport jsonwebtoken from 'jsonwebtoken'\n\nconst data = {\n  sub: 'your_local_user_identifier',\n  allowedDocumentNames: ['annual-report-2024', 'policy-document-v3'], // or [] ; if you omit \"allowedDocumentNames\", the user has read-write to all documents, except the ones mentioned in readonlyDocumentNames (as mentioned above!),\n  readonlyDocumentNames: ['annual-report-2024', 'policy-document-v3'],\n}\n\nconst jwt = jsonwebtoken.sign(data, 'your_secret')\n```\n\n----------------------------------------\n\nTITLE: Rendering Custom Card Grid in JSX for Tiptap Extension Documentation\nDESCRIPTION: This code snippet demonstrates how to render a custom card grid using JSX components to display links to different sections of the Tiptap extension documentation. It utilizes custom components like CardGrid, Link, and Tag to create a visually appealing and interactive grid layout.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/custom-extensions/index.mdx#2025-04-19_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<CardGrid.Wrapper className=\"sm:grid-cols-3\">\n  <CardGrid.Item asChild>\n    <Link href=\"/editor/extensions/custom-extensions/extend-existing\">\n      <CardGrid.Subtitle size=\"sm\">Extend extensions</CardGrid.Subtitle>\n      <div>\n        <CardGrid.ItemTitle>Customize and add to an existing extension</CardGrid.ItemTitle>\n      </div>\n      <CardGrid.ItemFooter>\n        <Tag>Extensions</Tag>\n      </CardGrid.ItemFooter>\n    </Link>\n  </CardGrid.Item>\n  <CardGrid.Item asChild>\n    <Link href=\"/editor/extensions/custom-extensions/create-new\">\n      <CardGrid.Subtitle size=\"sm\">Create extension</CardGrid.Subtitle>\n      <div>\n        <CardGrid.ItemTitle>Create a new extensions from scratch</CardGrid.ItemTitle>\n      </div>\n      <CardGrid.ItemFooter>\n        <Tag>Extensions</Tag>\n      </CardGrid.ItemFooter>\n    </Link>\n  </CardGrid.Item>\n  <CardGrid.Item asChild>\n    <Link href=\"/editor/extensions/custom-extensions/node-views\">\n      <CardGrid.Subtitle size=\"sm\">Create nodes</CardGrid.Subtitle>\n      <div>\n        <CardGrid.ItemTitle>Create custom and interactive nodes</CardGrid.ItemTitle>\n      </div>\n      <CardGrid.ItemFooter>\n        <Tag>Nodes</Tag>\n      </CardGrid.ItemFooter>\n    </Link>\n  </CardGrid.Item>\n  <CardGrid.Item asChild>\n    <Link href=\"/editor/extensions/custom-extensions/node-views/examples\">\n      <CardGrid.Subtitle size=\"sm\">Node examples</CardGrid.Subtitle>\n      <div>\n        <CardGrid.ItemTitle>Learn from custom node view examples</CardGrid.ItemTitle>\n      </div>\n      <CardGrid.ItemFooter>\n        <Tag>Nodes</Tag>\n      </CardGrid.ItemFooter>\n    </Link>\n  </CardGrid.Item>\n</CardGrid.Wrapper>\n```\n\n----------------------------------------\n\nTITLE: Using updateAttributes Command in Tiptap Editor\nDESCRIPTION: Demonstrates how to use the updateAttributes command to update attributes for both nodes and marks in Tiptap. Shows examples of updating a heading node's level and a highlight mark's color.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/api/commands/nodes-and-marks/update-attributes.mdx#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Update node attributes\neditor.commands.updateAttributes('heading', { level: 1 })\n\n// Update mark attributes\neditor.commands.updateAttributes('highlight', { color: 'pink' })\n```\n\n----------------------------------------\n\nTITLE: Using wrapInList Command in Tiptap Editor (JavaScript)\nDESCRIPTION: This snippet demonstrates how to use the wrapInList command to wrap a paragraph in a bullet list. The command takes the type of node to be wrapped as its argument.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/api/commands/lists/wrap-in-list.mdx#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// wrap a paragraph in a bullet list\neditor.commands.wrapInList('paragraph')\n```\n\n----------------------------------------\n\nTITLE: Installing Tiptap dependencies\nDESCRIPTION: Command to install necessary Tiptap packages including @tiptap/react, @tiptap/pm, and @tiptap/starter-kit.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/getting-started/install/react.mdx#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @tiptap/react @tiptap/pm @tiptap/starter-kit\n```\n\n----------------------------------------\n\nTITLE: Unsetting Text Alignment Command\nDESCRIPTION: Example of using the unsetTextAlign command to remove text alignment.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/functionality/textalign.mdx#2025-04-19_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\neditor.commands.unsetTextAlign()\n```\n\n----------------------------------------\n\nTITLE: Avatar Group Implementation with Multiple Users\nDESCRIPTION: Example of implementing an AvatarGroup component that displays multiple user avatars with a maximum visible count. This demonstrates more advanced usage with the maxVisible prop.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/ui-components/primitives/avatar.mdx#2025-04-19_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  Avatar,\n  AvatarFallback,\n  AvatarGroup,\n  AvatarImage,\n} from '@/components/tiptap-ui-primitive/avatar'\n\nexport default function MyComponent() {\n  return (\n    <AvatarGroup maxVisible={3}>\n      <Avatar>\n        <AvatarImage src=\"/avatars/user1.png\" alt=\"User 1\" />\n        <AvatarFallback>U1</AvatarFallback>\n      </Avatar>\n      <Avatar>\n        <AvatarImage src=\"/avatars/user2.png\" alt=\"User 2\" />\n        <AvatarFallback>U2</AvatarFallback>\n      </Avatar>\n      <Avatar>\n        <AvatarImage src=\"/avatars/user3.png\" alt=\"User 3\" />\n        <AvatarFallback>U3</AvatarFallback>\n      </Avatar>\n      <Avatar>\n        <AvatarImage src=\"/avatars/user4.png\" alt=\"User 4\" />\n        <AvatarFallback>U4</AvatarFallback>\n      </Avatar>\n    </AvatarGroup>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Tiptap Editor Component in Vue.js\nDESCRIPTION: A Vue.js component that implements a basic Tiptap editor. It initializes the editor with starter kit extensions and handles component lifecycle.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/getting-started/install/nuxt.mdx#2025-04-19_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <editor-content :editor=\"editor\" />\n</template>\n\n<script>\n  import { Editor, EditorContent } from '@tiptap/vue-3'\n  import StarterKit from '@tiptap/starter-kit'\n\n  export default {\n    components: {\n      EditorContent,\n    },\n\n    data() {\n      return {\n        editor: null,\n      }\n    },\n\n    mounted() {\n      this.editor = new Editor({\n        content: '<p>I'm running Tiptap with Vue.js. üéâ</p>',\n        extensions: [StarterKit],\n      })\n    },\n\n    beforeUnmount() {\n      this.editor.destroy()\n    },\n  }\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using the unsetAllMarks Command in Tiptap Editor (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to use the unsetAllMarks command in Tiptap editor. It removes all marks from the current selection in the editor.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/api/commands/nodes-and-marks/unset-all-marks.mdx#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\neditor.commands.unsetAllMarks()\n```\n\n----------------------------------------\n\nTITLE: Initializing Tiptap Collaboration Provider with Event Listeners in TypeScript\nDESCRIPTION: Example of creating a TiptapCollabProvider instance with event handlers specified directly in the constructor. This approach ensures listeners are active from initialization.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/collaboration/provider/events.mdx#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst provider = new TiptapCollabProvider({\n  appId: '', // Use for cloud setups, replace with baseUrl in case of on-prem\n  name: 'example-document', // Document identifier\n  token: '', // Your authentication JWT token\n  document: ydoc,\n  onOpen() {\n    console.log('WebSocket connection opened.')\n  },\n  onConnect() {\n    console.log('Connected to the server.')\n  },\n  // See below for more event listeners...\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Mark Permissions in Tiptap Node Schema\nDESCRIPTION: This snippet shows how to configure which marks are allowed within a node using the marks attribute in the Tiptap schema.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/core-concepts/schema.mdx#2025-04-19_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nNode.create({\n  // allows only the 'bold' mark\n  marks: 'bold',\n\n  // allows only the 'bold' and 'italic' marks\n  marks: 'bold italic',\n\n  // allows all marks\n  marks: '_',\n\n  // disallows all marks\n  marks: '',\n})\n```\n\n----------------------------------------\n\nTITLE: Duplicating a Document with Tiptap Collaboration API in TypeScript\nDESCRIPTION: This snippet demonstrates how to copy or duplicate a document using Tiptap Collaboration API. It first retrieves the document using a GET request and then creates a new one with a POST request.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/collaboration/documents/rest-api.mdx#2025-04-19_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst docUpdateAsBinaryResponse = await axios.get(\n  'https://YOUR_APP_ID.collab.tiptap.cloud/api/documents/DOCUMENT_NAME?format=yjs',\n  {\n    headers: {\n      Authorization: 'YOUR_SECRET_FROM_SETTINGS_AREA',\n    },\n    responseType: 'arraybuffer',\n  },\n)\n\nawait axios.post(\n  'https://YOUR_APP_ID.collab.tiptap.cloud/api/documents/DOCUMENT_NAME-duplicated',\n  docUpdateAsBinaryResponse.data,\n  {\n    headers: {\n      Authorization: 'YOUR_SECRET_FROM_SETTINGS_AREA',\n    },\n  },\n)\n```\n\n----------------------------------------\n\nTITLE: Toggling Italic Text Command\nDESCRIPTION: Command to toggle italic formatting on selected text\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/marks/italic.mdx#2025-04-19_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\neditor.commands.toggleItalic()\n```\n\n----------------------------------------\n\nTITLE: Removing Underline Mark in Tiptap Editor using JavaScript\nDESCRIPTION: Command to remove the underline mark from text in the Tiptap editor.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/marks/underline.mdx#2025-04-19_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\neditor.commands.unsetUnderline()\n```\n\n----------------------------------------\n\nTITLE: Translating Text with aiTranslate Command in Tiptap Editor (JavaScript)\nDESCRIPTION: Demonstrates the usage of the aiTranslate command to translate selected text into a specified language. It accepts a two-letter ISO 639-1 language code and TextOptions.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/content-ai/capabilities/generation/text-generation/built-in-commands.mdx#2025-04-19_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\neditor.chain().focus().aiTranslate(language: Language, options: TextOptions).run()\n```\n\n----------------------------------------\n\nTITLE: Installing Collaboration Dependencies\nDESCRIPTION: Command to install required packages for enabling collaboration features including Yjs and related protocols.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/collaboration/getting-started/install.mdx#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @tiptap/extension-collaboration yjs y-prosemirror y-protocols\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Heading NodeView with Diff Tracking in TypeScript\nDESCRIPTION: Example implementation of a custom heading node view that displays attribute level changes. Uses extractAttributeChanges helper to track and visualize heading level modifications.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/collaboration/documents/snapshot-compare.mdx#2025-04-19_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { extractAttributeChanges } from '@tiptap-pro/extension-snapshot-compare'\n\nconst Heading = BaseHeading.extend({\n  addNodeView() {\n    return ReactNodeViewRenderer(({ node, decorations }) => {\n      const { before, after, isDiffing } = extractAttributeChanges(decorations)\n\n      return (\n        <NodeViewWrapper style={{ position: 'relative' }}>\n          {isDiffing && before.level !== after.level && (\n            <span\n              style={{\n                position: 'absolute',\n                right: '100%',\n                fontSize: '14px',\n                color: '#999',\n                backgroundColor: '#f0f0f070',\n              }}\n              // Display the difference in level attribute\n            >\n              #<s>{before.level}</s>\n              {after.level}\n            </span>\n          )}\n          <NodeViewContent as={`h${node.attrs.level ?? 1}`} />\n        </NodeViewWrapper>\n      )\n    })\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Tiptap component with EditorProvider\nDESCRIPTION: React component implementing Tiptap editor using EditorProvider, FloatingMenu, and BubbleMenu components.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/getting-started/install/react.mdx#2025-04-19_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n// src/Tiptap.tsx\nimport { EditorProvider, FloatingMenu, BubbleMenu } from '@tiptap/react'\nimport StarterKit from '@tiptap/starter-kit'\n\n// define your extension array\nconst extensions = [StarterKit]\n\nconst content = '<p>Hello World!</p>'\n\nconst Tiptap = () => {\n  return (\n    <EditorProvider extensions={extensions} content={content}>\n      <FloatingMenu editor={null}>This is the floating menu</FloatingMenu>\n      <BubbleMenu editor={null}>This is the bubble menu</BubbleMenu>\n    </EditorProvider>\n  )\n}\n\nexport default Tiptap\n```\n\n----------------------------------------\n\nTITLE: Configuring Node Properties in Tiptap Schema\nDESCRIPTION: This snippet shows various node configuration options in Tiptap schema, including selectable, draggable, code, whitespace, defining, isolating, and allowGapCursor properties.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/core-concepts/schema.mdx#2025-04-19_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nNode.create({\n  selectable: true,\n  draggable: true,\n  code: true,\n  whitespace: 'pre',\n  defining: true,\n  isolating: true,\n  allowGapCursor: false,\n})\n```\n\n----------------------------------------\n\nTITLE: Styling Tiptap Editor with Scoped CSS\nDESCRIPTION: Examples of styling Tiptap editor content using CSS, both scoped to the editor container and globally.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/getting-started/style-editor/index.mdx#2025-04-19_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* Scoped to the editor */\n.tiptap p {\n  margin: 1em 0;\n}\n```\n\nLANGUAGE: css\nCODE:\n```\n/* Global styling */\np {\n  margin: 1em 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Collaboration Extension with Y.js Document\nDESCRIPTION: JavaScript code snippet showing how to configure the Collaboration extension with an initialized Y.js document.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/functionality/collaboration.mdx#2025-04-19_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nCollaboration.configure({\n  document: new Y.Doc(),\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring DOCX Import with Custom Node Mapping\nDESCRIPTION: Configuration for the Import extension that maps custom nodes from DOCX files to Tiptap nodes. This setup enables proper conversion of custom-styled content when importing Word documents.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/conversion/import-export/docx/custom-node-conversion.mdx#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Import } from '@tiptap-pro/extension-import'\n\n// ... inside your Editor or useEditor setup:\nImport.configure({\n  appId: 'your-app-id',\n  token: 'your-jwt',\n  // ATTENTION: This is for demo purposes only\n  endpoint: 'https://your-endpoint.com',\n  imageUploadCallbackUrl: 'https://your-endpoint.com/image-upload',\n  // Promisemirror custom node mapping\n  promisemirrorNodes: {\n    Hintbox: 'hintbox',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Undo/Redo Button in React with Tiptap\nDESCRIPTION: Example of how to use the UndoRedoButton component in a React application with Tiptap editor. It demonstrates setting up the editor context and rendering the undo/redo buttons alongside the editor content.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/ui-components/components/undo-redo-button.mdx#2025-04-19_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { EditorContent, EditorContext, useEditor } from '@tiptap/react'\nimport { StarterKit } from '@tiptap/starter-kit'\nimport { UndoRedoButton } from '@/components/tiptap-ui/undo-redo-button'\n\nimport '@/components/tiptap-node/paragraph-node/paragraph-node.scss'\n\nexport default function MyEditor() {\n  const editor = useEditor({\n    immediatelyRender: false,\n    extensions: [StarterKit],\n    content: `\n        <p>Try typing something and then click the undo and redo buttons.</p>\n        `,\n  })\n\n  return (\n    <EditorContext.Provider value={{ editor }}>\n      <div className=\"tiptap-button-group\" data-orientation=\"horizontal\">\n        <UndoRedoButton action=\"undo\" />\n        <UndoRedoButton action=\"redo\" />\n      </div>\n\n      <EditorContent editor={editor} role=\"presentation\" />\n    </EditorContext.Provider>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Vue Component Template for Tiptap Node View\nDESCRIPTION: Shows the basic structure of a Vue component template used for a Tiptap node view. It uses the NodeViewWrapper component provided by Tiptap.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/custom-extensions/node-views/vue.mdx#2025-04-19_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <node-view-wrapper> Vue Component </node-view-wrapper>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Getting Link Attributes\nDESCRIPTION: Retrieving current link attributes using getAttributes method\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/marks/link.mdx#2025-04-19_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nthis.editor.getAttributes('link').href\n```\n\n----------------------------------------\n\nTITLE: Restricting Document Access with JWT in Tiptap Collaboration\nDESCRIPTION: This snippet shows how to limit access to specific documents by encoding the allowedDocumentNames property in the JWT. It supports explicit document names and wildcard patterns for accessing multiple documents under a user ID.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/guides/authentication.mdx#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport jsonwebtoken from 'jsonwebtoken'\n\nconst jwt = jsonwebtoken.sign(\n  {\n    allowedDocumentNames: [\n      '1500c624-8f9f-496a-b196-5e5dd8ec3c25/7865975c-38d0-4bb5-846b-df909cdc66d3', // userUuid/documentUuid\n      '1500c624-8f9f-496a-b196-5e5dd8ec3c25/*', // userUuid/*\n    ],\n  },\n  'your_secret',\n)\n// this JWT should be sent in the `token` field of the provider. Never expose 'your_secret' to a frontend!\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Extension Options in TypeScript for Tiptap\nDESCRIPTION: This snippet demonstrates how to create custom extension options using TypeScript in Tiptap. It defines an interface for the options and uses it when creating an extension.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/guides/typescript.mdx#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Extension } from '@tiptap/core'\n\nexport interface CustomExtensionOptions {\n  awesomeness: number\n}\n\nconst CustomExtension = Extension.create<CustomExtensionOptions>({\n  addOptions() {\n    return {\n      awesomeness: 100,\n    }\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Deleting Entire Tables\nDESCRIPTION: Command to remove the entire table from the document.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/nodes/table.mdx#2025-04-19_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\neditor.commands.deleteTable()\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Invisible Characters in JavaScript\nDESCRIPTION: Examples of creating custom invisible characters by extending the InvisibleCharacter and InvisibleNode classes.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/functionality/invisiblecharacters.mdx#2025-04-19_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport InvisibleCharacters, { InvisibleCharacter } from '@tiptap-pro/extension-invisible-characters'\n\nclass MyInvisibleCharacter extends InvisibleCharacter {\n  constructor() {\n    super({\n      type: 'my-invisible-character',\n      predicate: (value) => value === '+',\n    })\n  }\n}\n\n// ‚Ä¶ use it like this\nnew Editor({\n  extensions: [InvisibleCharacters.configure({ builders: [new MyInvisibleCharacter()] })],\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport InvisibleCharacters, { InvisibleNode } from '@tiptap-pro/extension-invisible-characters'\n\nclass MyInvisibleNode extends InvisibleNode {\n  constructor() {\n    super({\n      type: 'my-invisible-node',\n      predicate: (node) => node.type === node.type.schema.nodes.listItem,\n    })\n  }\n}\n\n// ‚Ä¶ use it like this\nnew Editor({\n  extensions: [InvisibleCharacters.configure({ builders: [new MyInvisibleNode()] })],\n})\n```\n\n----------------------------------------\n\nTITLE: Adding ProseMirror Plugins to Tiptap Extension\nDESCRIPTION: Shows how to add ProseMirror plugins to a Tiptap extension. This example demonstrates wrapping the ProseMirror history plugin in a Tiptap extension.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/custom-extensions/extend-existing.mdx#2025-04-19_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nimport { history } from '@tiptap/pm/history'\n\nconst History = Extension.create({\n  addProseMirrorPlugins() {\n    return [\n      history(),\n      // ‚Ä¶\n    ]\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Encrypting a Document with Tiptap Collaboration API using cURL\nDESCRIPTION: This snippet shows how to encrypt a document using Base64 encryption with the Tiptap Collaboration API. It sends a POST request to the /encrypt endpoint with the document content in JSON format.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/collaboration/documents/rest-api.mdx#2025-04-19_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location 'https://YOUR_APP_ID.collab.tiptap.cloud/api/documents/DOCUMENT_NAME/encrypt' \\\n--header 'Content-Type: application/json' \\\n--header 'Authorization: YOUR_SECRET_FROM_SETTINGS_AREA' \\\n--data '{\n    \"type\": \"doc\",\n    \"content\": [\n      {\n        \"type\": \"paragraph\",\n        \"attrs\": {\n          \"indent\": 0,\n          \"textAlign\": \"left\"\n        },\n        \"content\": [\n          {\n            \"text\": \"the entire document is replaced by this (except if you changed the mode parameter to '\\''append'\\'')\",\n            \"type\": \"text\"\n          }\n        ]\n      }\n    ]\n  }'\n```\n\n----------------------------------------\n\nTITLE: Checking Editor State Properties\nDESCRIPTION: Demonstrates how to check various editor state properties including editability, content status, focus state, and transaction status.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/api/editor.mdx#2025-04-19_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\neditor.isEditable\n```\n\nLANGUAGE: javascript\nCODE:\n```\neditor.isEmpty\n```\n\nLANGUAGE: javascript\nCODE:\n```\neditor.isFocused\n```\n\nLANGUAGE: javascript\nCODE:\n```\neditor.isDestroyed\n```\n\nLANGUAGE: javascript\nCODE:\n```\neditor.isCapturingTransaction\n```\n\n----------------------------------------\n\nTITLE: Customizing Extension Default Settings\nDESCRIPTION: Shows how to modify default settings of an extension while preserving parent functionality.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/custom-extensions/extend-existing.mdx#2025-04-19_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport Heading from '@tiptap/extension-heading'\n\nconst CustomHeading = Heading.extend({\n  addOptions() {\n    return {\n      ...this.parent?.(),\n      levels: [1, 2, 3],\n    }\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Locking Drag Handle in Tiptap Editor using JavaScript\nDESCRIPTION: Command to lock the drag handle in place and visibility in the Tiptap editor.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/functionality/drag-handle.mdx#2025-04-19_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\neditor.commands.lockDragHandle()\n```\n\n----------------------------------------\n\nTITLE: Setting Bold Mark Command\nDESCRIPTION: Command to apply bold formatting to selected text\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/marks/bold.mdx#2025-04-19_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\neditor.commands.setBold()\n```\n\n----------------------------------------\n\nTITLE: Using aiBloggify Command in Tiptap Editor (JavaScript)\nDESCRIPTION: Demonstrates how to use the aiBloggify command in a Tiptap editor to rewrite text into a blog format. This example is representative of most text commands in the AI Generation extension.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/content-ai/capabilities/generation/text-generation/built-in-commands.mdx#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\neditor.chain().focus().aiBloggify(options: TextOptions)\n```\n\n----------------------------------------\n\nTITLE: Mixed Content Node View Structure - HTML\nDESCRIPTION: Example showing a node view with both editable and non-editable sections, useful for complex interactive components.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/custom-extensions/node-views/index.mdx#2025-04-19_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"Prosemirror\" contenteditable=\"true\">\n  <p>text</p>\n  <node-view>\n    <div contenteditable=\"false\">non-editable text</div>\n    <div>editable text</div>\n  </node-view>\n  <p>text</p>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Proper Content Initialization Setup\nDESCRIPTION: Implementation showing how to properly initialize content in a collaborative environment to prevent duplicate content loading.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/collaboration/getting-started/install.mdx#2025-04-19_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport './styles.scss'\n\nimport Document from '@tiptap/extension-document'\nimport Paragraph from '@tiptap/extension-paragraph'\nimport Text from '@tiptap/extension-text'\nimport { EditorContent, useEditor } from '@tiptap/react'\nimport React from 'react'\n\nimport * as Y from 'yjs'\nimport Collaboration from '@tiptap/extension-collaboration'\nimport { useEffect } from 'react'\n\nimport { TiptapCollabProvider } from '@hocuspocus/provider'\n\nconst doc = new Y.Doc()\n\nexport default () => {\n  const editor = useEditor({\n    extensions: [\n      Document,\n      Paragraph,\n      Text,\n      Collaboration.configure({\n        document: doc,\n      }),\n    ],\n  })\n\n  useEffect(() => {\n    const provider = new TiptapCollabProvider({\n      name: 'document.name',\n      appId: '7j9y6m10',\n      token: 'notoken',\n      document: doc,\n\n      onSynced() {\n        if (!doc.getMap('config').get('initialContentLoaded') && editor) {\n          doc.getMap('config').set('initialContentLoaded', true)\n\n          editor.commands.setContent(`\n          <p>This is a radically reduced version of Tiptap. It has support for a document, with paragraphs and text. That's it. It's probably too much for real minimalists though.</p>\n          <p>The paragraph extension is not really required, but you need at least one node. Sure, that node can be something different.</p>\n          `)\n        }\n      },\n    })\n  }, [])\n\n  return <EditorContent editor={editor} />\n}\n```\n\n----------------------------------------\n\nTITLE: Generating JSON from HTML with Tiptap HTML (Server or Browser)\nDESCRIPTION: This snippet shows how to use the generateJSON function from @tiptap/html to convert an HTML string into a JSON object. This method is compatible with both server-side and browser environments.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/api/utilities/html.mdx#2025-04-19_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { generateJSON } from '@tiptap/html'\n\n// Generate JSON from HTML\ngenerateJSON(`<p>On the server, or the browser</p>`, [\n  Document,\n  Paragraph,\n  Text,\n  Bold,\n  // other extensions ‚Ä¶\n])\n// { type: 'doc', content: [{ type: 'paragraph', content: [{ type: 'text', text: 'On the server, or the browser' }] }] }\n```\n\n----------------------------------------\n\nTITLE: Creating Custom AI Command\nDESCRIPTION: Implementation of a custom AI command that extends the Tiptap AI extension with a new command and its resolver.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/content-ai/capabilities/generation/custom-llms.mdx#2025-04-19_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// ‚Ä¶\nimport { Ai, runAiTextCommand } from '@tiptap-pro/extension-ai-advanced'\n// ‚Ä¶\n\n// Declare typings if TypeScript is used:\n//\n// declare module '@tiptap/core' {\n//   interface Commands<ReturnType> {\n//     ai: {\n//       aiCustomTextCommand: () => ReturnType,\n//     }\n//   }\n// }\n\nconst AiExtended = Ai.extend({\n  addCommands() {\n    return {\n      ...this.parent?.(),\n\n      aiCustomTextCommand:\n        (options = {}) =>\n        (props) => {\n          // Do whatever you want; e.g. get the selected text and pass it to the specific command resolution\n          return runAiTextCommand(props, 'customCommand', options)\n        },\n    }\n  },\n})\n\n// ‚Ä¶ this is where you initialize your Tiptap editor instance and register the extended extension\n\nconst editor = new Editor{\n  extensions: [\n    /* ‚Ä¶ add other extension */\n    AiExtended.configure({\n      /* ‚Ä¶ add configuration here (appId, token etc.) */\n      onError(error, context) {\n        // handle error\n      },\n      aiCompletionResolver: async ({\n        action,\n        text,\n        textOptions,\n        extensionOptions,\n        defaultResolver,\n        editor,\n      }) => {\n        if (action === 'customCommand') {\n          const response = await fetch('https://dummyjson.com/quotes/random')\n          const json = await response?.json()\n\n          if (!response.ok) {\n            throw new Error(`${response.status} ${json?.message}`)\n          }\n\n          return json?.quote\n        }\n\n        return defaultResolver({\n          editor,\n          action,\n          text,\n          textOptions,\n          extensionOptions,\n          defaultResolver,\n        })\n      },\n    }),\n  ],\n  content: '',\n})\n\n// ‚Ä¶ use this to run your new command:\n// editor.chain().focus().aiCustomTextCommand().run()\n```\n\n----------------------------------------\n\nTITLE: Handling Content Errors with Event Listener\nDESCRIPTION: Shows how to attach a content error event listener to handle schema validation errors after editor initialization.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/core-concepts/schema.mdx#2025-04-19_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\nconst editor = new Editor({\n  enableContentCheck: true,\n  content: invalidContent,\n  ...options,\n})\n\neditor.on('contentError', ({ editor, error, disableCollaboration }) => {\n  // your handler here\n})\n```\n\n----------------------------------------\n\nTITLE: HTML structure for Tiptap editor with Alpine.js\nDESCRIPTION: HTML code that sets up the structure for the Tiptap editor using Alpine.js directives. It includes buttons for text formatting and the editor container.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/getting-started/install/alpine.mdx#2025-04-19_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n  </head>\n  <body>\n    <div x-data=\"editor('<p>Hello world! :-)</p>')\">\n      <template x-if=\"isLoaded()\">\n        <div class=\"menu\">\n          <button\n            @click=\"toggleHeading({ level: 1 })\"\n            :class=\"{ 'is-active': isActive('heading', { level: 1 }, updatedAt) }\"\n          >\n            H1\n          </button>\n          <button @click=\"toggleBold()\" :class=\"{ 'is-active' : isActive('bold', updatedAt) }\">\n            Bold\n          </button>\n          <button @click=\"toggleItalic()\" :class=\"{ 'is-active' : isActive('italic', updatedAt) }\">\n            Italic\n          </button>\n        </div>\n      </template>\n\n      <div x-ref=\"element\"></div>\n    </div>\n\n    <script type=\"module\" src=\"/main.js\"></script>\n\n    <style>\n      body {\n        margin: 2rem;\n        font-family: sans-serif;\n      }\n      button.is-active {\n        background: black;\n        color: white;\n      }\n      .tiptap {\n        padding: 0.5rem 1rem;\n        margin: 1rem 0;\n        border: 1px solid #ccc;\n      }\n    </style>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Implementing Node Change Event Handler in Vue Component\nDESCRIPTION: Full Vue component example demonstrating how to use the onNodeChange event to handle node selection changes when hovering over draggable nodes.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/functionality/drag-handle-vue.mdx#2025-04-19_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <drag-handle @nodeChange=\"handleNodeChange\">\n    <div>Drag Me!</div>\n  </drag-handle>\n</template>\n\n<script>\nimport { ref } from 'vue'\nimport { DragHandle } from '@tiptap-pro/extension-drag-handle-vue-3'\n\nexport default {\n  components: {\n    DragHandle,\n  },\n  setup() {\n    const selectedNode = ref(null)\n\n    const handleNodeChange = ({ node, editor, pos }) => {\n      selectedNode.value = node\n      // do something with the node\n    }\n\n    return {\n      selectedNode,\n      handleNodeChange,\n    }\n  },\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Tiptap Extensions with Custom Classes\nDESCRIPTION: Configuration example showing how to add custom classes to Tiptap extensions using HTMLAttributes option.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/getting-started/style-editor/index.mdx#2025-04-19_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nnew Editor({\n  extensions: [\n    Document,\n    Paragraph.configure({\n      HTMLAttributes: {\n        class: 'my-custom-paragraph',\n      },\n    }),\n    Heading.configure({\n      HTMLAttributes: {\n        class: 'my-custom-heading',\n      },\n    }),\n    Text,\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Smart Merge or Split Cells\nDESCRIPTION: Context-aware command that either merges multiple selected cells or splits a single selected cell.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/nodes/table.mdx#2025-04-19_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\neditor.commands.mergeOrSplit()\n```\n\n----------------------------------------\n\nTITLE: Creating, Updating, and Deleting Comments in Tiptap Editor (JavaScript)\nDESCRIPTION: Illustrates how to create, update, and delete comments within threads using the createComment, updateComment, and deleteComment commands respectively.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/comments/core-concepts/manage-threads.mdx#2025-04-19_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// Create a comment\neditor.commands.createComment({\n  threadId: '123',\n  content: 'This is a new comment',\n  data: {\n    user,\n  },\n})\n\n// Update a comment\neditor.commands.updateComment({\n  threadId: '123',\n  id: '456',\n  content: 'Now this is the new content',\n  data: {\n    edited: true,\n  },\n})\n\n// Delete a comment\neditor.commands.deleteComment({\n  threadId: '123',\n  id: '456',\n})\n```\n\n----------------------------------------\n\nTITLE: Bootstrapping a New Tiptap Extension (Bash)\nDESCRIPTION: This command uses the Tiptap CLI to create a new extension. It simplifies the process of setting up the boilerplate code for a custom Tiptap extension.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/core-concepts/extensions.mdx#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm init tiptap-extension\n```\n\n----------------------------------------\n\nTITLE: TypeScript Definition for streamContent Command in Tiptap\nDESCRIPTION: This snippet provides the full TypeScript definition for the streamContent command, including interface extensions and type definitions for various options and callbacks.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/content-ai/capabilities/generation/text-generation/stream.mdx#2025-04-19_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    streamContent: {\n      streamContent: (\n        /**\n         * The position to insert the content at.\n         */\n        position: number | Range,\n        /**\n         * The callback to write the content into the editor.\n         */\n        callback: (options: StreamContentAPI) => Promise<any>,\n        /**\n         * The options to pass to the `insertContentAt` command.\n         */\n        options?: {\n          parseOptions?: NonNullable<\n            Parameters<RawCommands['insertContentAt']>['2']\n          >['parseOptions']\n          /**\n           * This will insert the content at the same depth as the `from` position.\n           * Effectively, this will insert the content as a sibling of the node at the `from` position.\n           * @default true\n           */\n          respondInline?: boolean\n        },\n      ) => ReturnType\n    }\n  }\n}\n\ntype StreamContentAPI = {\n  /**\n   * The function to write content into the editor.\n   */\n  write: (ctx: {\n    /**\n     * The partial content of the stream to insert.\n     */\n    partial: string\n    /**\n     * This function allows you to transform the content before inserting it into the editor.\n     * It must return a Prosemirror `Fragment` or `Node`.\n     */\n    transform?: (ctx: {\n      /**\n       * The accumulated content of the stream.\n       */\n      buffer: string\n      /**\n       * The current partial content of the stream.\n       */\n      partial: string\n      editor: Editor\n      /**\n       * Allows you to use the default transform function.\n       */\n      defaultTransform: (\n        /**\n         * The content to insert as an HTML string.\n         * @default ctx.buffer\n         */\n        htmlString?: string,\n      ) => Fragment\n    }) => Fragment | Node | Node[]\n    /**\n     * Allows you to append commands to the chain before it is executed.\n     */\n    appendToChain?: (chain: ChainedCommands) => ChainedCommands\n  }) => {\n    /**\n     * The buffer that is being written to.\n     */\n    buffer: string\n    /**\n     * The start of the inserted content in the editor.\n     */\n    from: number\n    /**\n     * The end of the inserted content in the editor.\n     */\n    to: number\n  }\n  /**\n   * A writable stream to write content into the editor.\n   * @example fetch('https://example.com/stream').then(response => response.body.pipeTo(ctx.getWritableStream()))\n   */\n  getWritableStream: () => WritableStream\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring DOCX Mark Import in Tiptap Editor\nDESCRIPTION: Example showing how to configure the Import extension to map custom DOCX marks to Tiptap nodes. The configuration includes authentication settings, endpoint configuration, and mark mapping definitions via prosemirrorMarks option.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/conversion/import-export/docx/custom-mark-conversion.mdx#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Import } from '@tiptap-pro/extension-import'\n\nconst editor = new Editor({\n  extensions: [\n    // Other extensions ...\n    Import.configure({\n      appId: 'your-app-id',\n      token: 'your-jwt',\n      // ATTENTION: This is for demo purposes only\n      endpoint: 'https://your-endpoint.com',\n      imageUploadCallbackUrl: 'https://your-endpoint.com/image-upload',\n      // Promisemirror custom mark mapping\n      prosemirrorMarks: {\n        bold: 'strong',\n        italic: 'em',\n      }\n    }),\n    // Other extensions ...\n  ],\n  // Other editor settings ...\n})\n```\n\n----------------------------------------\n\nTITLE: Updating a Document with PATCH Request in Bash\nDESCRIPTION: This curl command demonstrates how to update a document using the PATCH method with a binary Yjs update. It requires the application ID, document name, and authorization secret.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/collaboration/documents/content-injection.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location --request PATCH 'https://YOUR_APP_ID.collab.tiptap.cloud/api/documents/DOCUMENT_NAME' \\\n--header 'Authorization: YOUR_SECRET_FROM_SETTINGS_AREA' \\\n--data '@yjsUpdate.binary.txt'\n```\n\n----------------------------------------\n\nTITLE: Executing Undo Command in Tiptap Editor\nDESCRIPTION: JavaScript code demonstrating how to execute the undo command in a Tiptap editor with the Collaboration extension.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/functionality/collaboration.mdx#2025-04-19_snippet_4\n\nLANGUAGE: js\nCODE:\n```\neditor.commands.undo()\n```\n\n----------------------------------------\n\nTITLE: Implementing Heading Dropdown Menu with Tiptap React\nDESCRIPTION: Example showing how to implement the HeadingDropdownMenu component with Tiptap and React. The code creates an editor instance with StarterKit extensions and renders the heading dropdown menu alongside the editor content.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/ui-components/components/heading-dropdown-menu.mdx#2025-04-19_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { EditorContent, EditorContext, useEditor } from '@tiptap/react'\nimport { StarterKit } from '@tiptap/starter-kit'\nimport { HeadingDropdownMenu } from '@/components/tiptap-ui/heading-dropdown-menu'\n\nimport '@/components/tiptap-node/paragraph-node/paragraph-node.scss'\n\nexport default function MyEditor() {\n  const editor = useEditor({\n    immediatelyRender: false,\n    extensions: [StarterKit],\n    content: `\n          <h1>Heading 1</h1>\n          <p>This is a paragraph of text.</p>\n          <h2>Heading 2</h2>\n          <p>This is another paragraph of text.</p>\n        `,\n  })\n\n  return (\n    <EditorContext.Provider value={{ editor }}>\n      <div className=\"tiptap-button-group\" data-orientation=\"horizontal\">\n        <HeadingDropdownMenu levels={[1, 2, 3, 4]} />\n      </div>\n\n      <EditorContent editor={editor} role=\"presentation\" />\n    </EditorContext.Provider>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing AI Suggestion Storage in TypeScript\nDESCRIPTION: Defines the internal storage interface for the AI Suggestion extension, handling suggestion state, caching, and decoration options in the Tiptap editor.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/content-ai/capabilities/suggestion/api-reference.mdx#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Internal storage for the AI Suggestion extension.\n */\nexport interface AiSuggestionStorage {\n  /** Key for the ProseMirror plugin used by the extension */\n  pluginKey: PluginKey<AiSuggestionProsemirrorPluginState>\n  /** Rules to be applied during proofreading */\n  rules: AiSuggestionRule[]\n  /** Function to get the current suggestions */\n  getSuggestions: () => Suggestion[]\n  /** Function to get the rejected suggestions */\n  getRejections: () => AiSuggestionRejection[]\n  /** Function to get the currently selected suggestion */\n  getSelectedSuggestion: () => Suggestion | null\n  /** Whether suggestions are currently being loaded */\n  isLoading: boolean\n  /** Whether suggestions have been loaded at least once */\n  firstLoad: boolean\n  /** Error that occurred during the last load attempt, if any */\n  error: unknown | null\n  /** Debounced function for loading suggestions */\n  debouncedFunction: DebouncedFunction<() => void>\n  /** Controller to abort loading suggestions */\n  abortController: AbortController\n  /**\n   * Optional context to provide additional information to the AI model\n   * for generating suggestions.\n   */\n  context: string | null\n  /**\n   * The cache used to store the suggestions of each chunk of the document.\n   */\n  cache: AiSuggestionCache\n}\n\n/**\n * Arguments for creating decoration for suggestions in the editor.\n */\nexport interface GetCustomSuggestionDecorationOptions {\n  /** The suggestion being decorated */\n  suggestion: Suggestion\n  /** Whether this suggestion is currently selected */\n  isSelected: boolean\n  /** Function to get the default decoration styles provided by the extension */\n  getDefaultDecorations: () => Decoration[]\n}\n```\n\n----------------------------------------\n\nTITLE: Server-side DOCX Export with Express and @tiptap-pro/extension-export-docx\nDESCRIPTION: This code snippet demonstrates how to use the exportDocx function from @tiptap-pro/extension-export-docx in an Express server. It handles a POST request to '/export-docx', converts Tiptap JSON content to DOCX format, and sends the result as a downloadable file.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/conversion/import-export/docx/editor-export.mdx#2025-04-19_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { exportDocx } from '@tiptap-pro/extension-export-docx'\nimport express from 'express'\n\nconst app = express()\n\napp.post('/export-docx', async (req, res) => {\n  try {\n    // Get Tiptap JSON content from the request or from your database\n    const { content } = req.body\n\n    // Convert Tiptap JSON to DOCX\n    const docxBuffer = await exportDocx({ document: content })\n\n    // Send as a downloadable file\n    res.setHeader('Content-Type', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document')\n    res.setHeader('Content-Disposition', 'attachment; filename=\"document.docx\"')\n    res.send(docxBuffer)\n  } catch (error) {\n    res.status(500).json({ error: error.message })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Setting AI Suggestions Programmatically in Tiptap\nDESCRIPTION: Set AI suggestions directly without calling the API using the setAiSuggestions command, useful for displaying immediate suggestions, clearing suggestions, or using alternative suggestion sources.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/content-ai/capabilities/suggestion/features/configure-when-to-load-suggestions.mdx#2025-04-19_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\neditor.commands.setAiSuggestions(suggestions)\n```\n\n----------------------------------------\n\nTITLE: Customizing ODT Import Behavior in Tiptap\nDESCRIPTION: Advanced example demonstrating how to customize the import process using the onImport callback, including error handling, content modification, and loading state management.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/conversion/import-export/odt/editor-extensions.mdx#2025-04-19_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n// You can also use the onImport callback to customize the import behavior\neditor\n  .chain()\n  .import({\n    file,\n    onImport(context) {\n      const { setEditorContent, content, error } = context\n\n      // add error handling\n      if (error) {\n        showErrorToast({ message: error.message })\n      }\n\n      // You could also modify the content before inserting it\n      content.doc.content.push({ type: 'paragraph', content: [{ type: 'text', text: 'Hello!' }] })\n\n      // you can change the loading state of your application for example\n      isLoading = false\n\n      // make sure you call the setEditorContent function if you want to run\n      // the default insertion behavior of the extension\n      // setEditorContent()\n      // but since we modified the content, we need to do the insertion manually\n      editor.commands.setContent(content)\n    },\n  })\n  .focus()\n  .run()\n```\n\n----------------------------------------\n\nTITLE: Customizing Suggestion Decorations\nDESCRIPTION: Example of customizing suggestion appearance using the Prosemirror Decorations API.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/content-ai/capabilities/suggestion/features/display-suggestions.mdx#2025-04-19_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nAiSuggestion.configure({\n  getCustomSuggestionDecoration({ suggestion, isSelected, getDefaultDecorations }) {\n    // You can combine the default decorations of the AI Suggestion extension with your custom ones\n    const decorations = getDefaultDecorations()\n\n    // Add a custom element after the suggestion text\n    Decoration.widget(suggestion.deleteRange.to, () => {\n      const element = document.createElement('span')\n      element.textContent = '‚ö†Ô∏è'\n      return element\n    })\n    return decorations\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Using Tiptap Popover Component in React\nDESCRIPTION: Example React component implementation showing how to use the Popover primitive with a trigger button and content. Demonstrates the basic structure with PopoverTrigger and PopoverContent components.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/ui-components/primitives/popover.mdx#2025-04-19_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Popover, PopoverTrigger, PopoverContent } from '@/components/tiptap-ui-primitive/popover'\nimport { Button } from '@/components/tiptap-ui-primitive/button'\n\nexport default function MyComponent() {\n  return (\n    <Popover>\n      <PopoverTrigger asChild>\n        <Button data-style=\"ghost\">Open Popover</Button>\n      </PopoverTrigger>\n      <PopoverContent>\n        <p>Popover content goes here</p>\n      </PopoverContent>\n    </Popover>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Heading Levels\nDESCRIPTION: Example demonstrating how to specify which heading levels are supported by the extension.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/nodes/heading.mdx#2025-04-19_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nHeading.configure({\n  levels: [1, 2],\n})\n```\n\n----------------------------------------\n\nTITLE: Using the deleteSelection Command in Tiptap (JavaScript)\nDESCRIPTION: This snippet demonstrates how to use the deleteSelection command in a Tiptap editor instance. The command removes any currently selected nodes or content. If no selection exists, the command has no effect.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/api/commands/selection/delete-selection.mdx#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\neditor.commands.deleteSelection()\n```\n\n----------------------------------------\n\nTITLE: Adding Editable Content to Vue Node View\nDESCRIPTION: Demonstrates how to add editable content to a Vue component used for a Tiptap node view. It uses the NodeViewContent component provided by Tiptap.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/custom-extensions/node-views/vue.mdx#2025-04-19_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <node-view-wrapper class=\"dom\">\n    <node-view-content class=\"content-dom\" />\n  </node-view-wrapper>\n</template>\n\n<script>\n  import { NodeViewWrapper, NodeViewContent } from '@tiptap/vue-2'\n\n  export default {\n    components: {\n      NodeViewWrapper,\n      NodeViewContent,\n    },\n  }\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using InvisibleCharacters Storage and Commands in JavaScript\nDESCRIPTION: Examples of using the storage and commands provided by the InvisibleCharacters extension.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/functionality/invisiblecharacters.mdx#2025-04-19_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\neditor.storage.invisibleCharacters.visibility()\n```\n\nLANGUAGE: javascript\nCODE:\n```\neditor.commands.showInvisibleCharacters()\n```\n\nLANGUAGE: javascript\nCODE:\n```\neditor.commands.hideInvisibleCharacters()\n```\n\nLANGUAGE: javascript\nCODE:\n```\neditor.commands.toggleInvisibleCharacters()\n```\n\n----------------------------------------\n\nTITLE: Integrating CommentsKit Extension in Tiptap Editor\nDESCRIPTION: JavaScript code snippet showing how to import and add the CommentsKit extension to a Tiptap editor instance. This includes all required extensions for the comments feature.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/comments/getting-started/install.mdx#2025-04-19_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ThreadsKit } from '@tiptap-pro/extension-comments'\n\nconst editor = new Editor({\n  ...\n  extensions: [\n    ...,\n    CommentsKit,\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Parsing and Displaying AI-Generated Content Preview with Tiptap in React\nDESCRIPTION: This code snippet demonstrates how to use the tryParseToTiptapHTML function to parse AI-generated content and display it as HTML in a React component. It shows examples of parsing current and past responses, and includes a PreviewComponent that safely renders the parsed HTML.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/content-ai/capabilities/generation/text-generation/manage-responses.mdx#2025-04-19_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n// Display the response as HTML\nimport { tryParseToTiptapHTML } from '@tiptap-pro/extension-ai'\n\n// try to parse the current message as HTML, and null if it could not be parsed\ntryToParseToHTML((editor.storage.ai || editor.storage.aiAdvanced).response.message, editor)\n\n// try to parse a previous response as HTML, and null if it could not be parsed\ntryToParseToHTML((editor.storage.ai || editor.storage.aiAdvanced).pastResponses[0], editor)\n\n// For example in React\nfunction PreviewComponent({ editor }) {\n  const htmlResponse = tryToParseToHTML(\n    (editor.storage.ai || editor.storage.aiAdvanced).response.message,\n    editor,\n  )\n  /* This is safe since we've parsed the content with prose-mirror first */\n  return <div dangerouslySetInnerHTML={{ __html: htmlResponse }}></div>\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Mathematics Button in Tiptap React Editor\nDESCRIPTION: React component example showing how to use the MathematicsButton in a Tiptap editor. It demonstrates importing necessary components, setting up the editor with the Mathematics extension, and rendering the button in the toolbar.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/ui-components/components/math-button.mdx#2025-04-19_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { MathematicsButton } from '@/components/tiptap-ui/mathematics-button'\nimport { useEditor, EditorContent } from '@tiptap/react'\nimport { Mathematics } from '@tiptap-pro/extension-mathematics'\n\nimport '@/registry/tiptap-node/paragraph-node/paragraph-node.scss'\n\nimport 'katex/dist/katex.min.css'\n\nexport default function MyEditor() {\n  const editor = useEditor({\n    extensions: [\n      // ... other extensions\n      Mathematics,\n    ],\n  })\n\n  return (\n    <div>\n      <div className=\"toolbar\">\n        <MathematicsButton editor={editor} />\n      </div>\n      <EditorContent editor={editor} />\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Comment Button in React with Tiptap Editor\nDESCRIPTION: Example of how to implement the CommentButton component in a React application with Tiptap editor. Shows proper component integration with editor instance and basic configuration options.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/ui-components/components/comment-button.mdx#2025-04-19_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { CommentButton } from '@/components/tiptap-ui/comment-button'\nimport { useEditor, EditorContent } from '@tiptap/react'\n\nexport default function MyEditor() {\n  const editor = useEditor({\n    // editor configuration\n  })\n\n  return (\n    <div>\n      <CommentButton\n        editor={editor}\n        hideWhenUnavailable={false}\n        onClick={() => console.log('Add comment')}\n      />\n      <EditorContent editor={editor} />\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Auto-Link Behavior\nDESCRIPTION: Customizing when URLs should be automatically converted to links\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/marks/link.mdx#2025-04-19_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nLink.configure({\n  shouldAutoLink: (url) => url.startsWith('https://'),\n})\n```\n\n----------------------------------------\n\nTITLE: Handling Content Errors with onContentError Callback in Tiptap\nDESCRIPTION: Demonstrates how to use the onContentError callback to handle content validation errors when initializing the Tiptap editor.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/guides/invalid-schema.mdx#2025-04-19_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nnew Editor({\n  enableContentCheck: true,\n  content: potentiallyInvalidContent,\n  onContentError({ editor, error, disableCollaboration }) {\n    // Your error handling logic here\n  },\n  // ... other options\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing Editor instance in child components\nDESCRIPTION: Example of how to access the Tiptap editor instance in child components using the useCurrentEditor hook.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/getting-started/install/react.mdx#2025-04-19_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useCurrentEditor } from '@tiptap/react'\n\nconst EditorJSONPreview = () => {\n  const { editor } = useCurrentEditor()\n\n  return <pre>{JSON.stringify(editor.getJSON(), null, 2)}</pre>\n}\n\n```\n\n----------------------------------------\n\nTITLE: Using the liftListItem Command in Tiptap Editor (JavaScript)\nDESCRIPTION: This snippet demonstrates how to use the liftListItem command in Tiptap. The command attempts to lift the list item around the current selection up into a wrapping parent list.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/api/commands/lists/lift-list-item.mdx#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\neditor.commands.liftListItem()\n```\n\n----------------------------------------\n\nTITLE: Minimal Tiptap Editor Setup\nDESCRIPTION: This code shows the minimal required setup for a Tiptap editor with only three essential extensions: Document, Paragraph, and Text.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/getting-started/configure.mdx#2025-04-19_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { Editor } from '@tiptap/core'\nimport Document from '@tiptap/extension-document'\nimport Paragraph from '@tiptap/extension-paragraph'\nimport Text from '@tiptap/extension-text'\n\nnew Editor({\n  element: document.querySelector('.element'),\n  extensions: [Document, Paragraph, Text],\n})\n```\n\n----------------------------------------\n\nTITLE: Grouping Nodes in Tiptap Schema\nDESCRIPTION: This snippet demonstrates how to add nodes to groups in the Tiptap schema, which can be referenced in the content attribute of other schema definitions.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/core-concepts/schema.mdx#2025-04-19_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nNode.create({\n  // add to 'block' group\n  group: 'block',\n\n  // add to 'inline' group\n  group: 'inline',\n\n  // add to 'block' and 'list' group\n  group: 'block list',\n})\n```\n\n----------------------------------------\n\nTITLE: Destroying Tiptap Editor Instance\nDESCRIPTION: This snippet illustrates how to use the 'destroy()' method to stop the Tiptap Editor instance and unbind all events.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/api/editor.mdx#2025-04-19_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n// Hasta la vista, baby!\neditor.destroy()\n```\n\n----------------------------------------\n\nTITLE: Implementing Badge Component in React/TSX\nDESCRIPTION: Example of how to implement the Badge component in a React component, showing usage with an icon and text. The component supports styling variants through the data-style prop.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/ui-components/primitives/badge.mdx#2025-04-19_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Badge } from '@/components/tiptap-ui-primitive/badge'\nimport { CheckIcon } from '@/components/icons/check-icon'\n\nexport default function MyComponent() {\n  return (\n    <Badge data-style=\"gray\">\n      <CheckIcon className=\"tiptap-badge-icon\" />\n      <span className=\"tiptap-badge-text\">Resolved</span>\n    </Badge>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Thread Hover Events in Tiptap Editor\nDESCRIPTION: Example of how to handle hover events for threads in a Tiptap editor, including functions to dispatch transactions for thread hover and unhover events.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/comments/core-concepts/style-threads.mdx#2025-04-19_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconst onHoverThread = (threadId) => {\n  const { tr } = editor.state\n\n  tr.setMeta('threadMouseOver', threadId)\n  editor.view.dispatch(tr)\n}\n\nconst onUnhoverThread = (threadId) => {\n  const { tr } = editor.state\n\n  tr.setMeta('threadMouseOut', threadId)\n  editor.view.dispatch(tr)\n}\n\n;<div onMouseEnter={() => onHoverThread('123')} onMouseLeave={() => onUnhoverThread('123')}>\n  Thread 123\n</div>\n```\n\n----------------------------------------\n\nTITLE: Splitting Table Cells\nDESCRIPTION: Command to split the current cell into multiple cells.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/nodes/table.mdx#2025-04-19_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\neditor.commands.splitCell()\n```\n\n----------------------------------------\n\nTITLE: Chaining Rule Updates with Suggestion Reloading\nDESCRIPTION: Demonstrates how to update AI suggestion rules and reload suggestions in a single chain of commands. This pattern ensures suggestions are refreshed after changing the rules.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/content-ai/capabilities/suggestion/features/define-rules.mdx#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\neditor.chain().setAiSuggestionRules(newRules).loadAiSuggestions().run()\n```\n\n----------------------------------------\n\nTITLE: Setting Initial Suggestions in Tiptap AI\nDESCRIPTION: Shows how to configure initial suggestions for the AI Suggestion extension before proofreading begins\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/content-ai/capabilities/suggestion/configure.mdx#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const suggestions: Suggestion[] = [\n  {\n    id: '1',\n    deleteRange: { from: 1, to: 5 },\n    deleteText: 'Mistaek',\n    replacementOptions: [\n      {\n        id: '1',\n        addText: 'Mistake',\n      },\n    ],\n    rule: {\n      id: '1',\n      title: 'Spell Check',\n      prompt: 'Identify and correct any spelling mistakes',\n      color: '#DC143C',\n      backgroundColor: 'FFE6E6',\n    },\n    isRejected: false,\n  },\n]\n\nAiSuggestion.configure({\n  initialSuggestions: suggestions,\n})\n```\n\n----------------------------------------\n\nTITLE: Executing Enter Command in Tiptap Editor (JavaScript)\nDESCRIPTION: This snippet demonstrates how to programmatically trigger an enter key action in the Tiptap editor. It uses the 'enter' command on the editor instance to simulate pressing the enter key.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/api/commands/selection/enter.mdx#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\neditor.commands.enter()\n```\n\n----------------------------------------\n\nTITLE: Implementing Text Align Button in React with Tiptap\nDESCRIPTION: Complete example of implementing text alignment functionality in a React component using Tiptap editor. Shows integration of TextAlignButton component with editor configuration and content setup.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/ui-components/components/text-align-button.mdx#2025-04-19_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { EditorContent, EditorContext, useEditor } from '@tiptap/react'\nimport { StarterKit } from '@tiptap/starter-kit'\nimport { TextAlign } from '@tiptap/extension-text-align'\nimport { TextAlignButton } from '@/components/tiptap-ui/text-align-button'\n\nimport '@/components/tiptap-node/paragraph-node/paragraph-node.scss'\n\nexport default function MyEditor() {\n  const editor = useEditor({\n    immediatelyRender: false,\n    extensions: [StarterKit, TextAlign.configure({ types: ['heading', 'paragraph'] })],\n    content: `\n        <p>Try selecting a paragraph and clicking one of the text alignment buttons.</p>\n        <p style=\"text-align: left\">Left-aligned text.</p>\n        <p style=\"text-align: center\">Center-aligned text.</p>\n        <p style=\"text-align: right\">Right-aligned text.</p>\n        <p style=\"text-align: justify\">Justified text.</p>\n        `,\n  })\n\n  return (\n    <EditorContext.Provider value={{ editor }}>\n      <div className=\"tiptap-button-group\" data-orientation=\"horizontal\">\n        <TextAlignButton align=\"left\" />\n        <TextAlignButton align=\"center\" />\n        <TextAlignButton align=\"right\" />\n        <TextAlignButton align=\"justify\" />\n      </div>\n\n      <EditorContent editor={editor} role=\"presentation\" />\n    </EditorContext.Provider>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Selecting a Thread with selectThread Command in JavaScript\nDESCRIPTION: Focuses the editor on a specified thread by its ID. When selectAround is true, the selection will encompass the entire thread content in the editor.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/comments/integrate/editor-commands.mdx#2025-04-19_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\neditor.commands.selectThread({\n  id: '101',\n  selectAround: true,\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Thread Click Callback in Tiptap Comments\nDESCRIPTION: This snippet demonstrates how to set up a callback function for thread clicks in Tiptap comments. The callback receives the thread ID when a thread is clicked, or null if no thread is clicked.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/comments/core-concepts/configure.mdx#2025-04-19_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nComments.configure({\n  // ID can be a string or null\n  onClickThread: (id) => console.log('Thread clicked', id),\n})\n```\n\n----------------------------------------\n\nTITLE: Removing a Thread with removeThread Command in JavaScript\nDESCRIPTION: Deletes a thread with the specified ID. When deleteThread is set to true, it also removes the thread from the Yjs document, ensuring complete cleanup.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/comments/integrate/editor-commands.mdx#2025-04-19_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\neditor.commands.removeThread({\n  id: '101',\n  deleteThread: true,\n})\n```\n\n----------------------------------------\n\nTITLE: Customizing Node Schema\nDESCRIPTION: Examples of modifying node schema to control content structure and behavior.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/custom-extensions/extend-existing.mdx#2025-04-19_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Blockquotes must only include paragraphs\nimport Blockquote from '@tiptap/extension-blockquote'\n\nconst CustomBlockquote = Blockquote.extend({\n  content: 'paragraph*',\n})\n```\n\n----------------------------------------\n\nTITLE: Toggling Underline Mark in Tiptap Editor using JavaScript\nDESCRIPTION: Command to toggle the underline mark in the Tiptap editor.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/marks/underline.mdx#2025-04-19_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\neditor.commands.toggleUnderline()\n```\n\n----------------------------------------\n\nTITLE: Customizing HTML Tag Rendering\nDESCRIPTION: Example of extending a Tiptap extension to customize HTML tag rendering, changing strong to b tag.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/getting-started/style-editor/index.mdx#2025-04-19_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport Bold from '@tiptap/extension-bold'\n\nconst CustomBold = Bold.extend({\n  renderHTML({ HTMLAttributes }) {\n    // Original:\n    // return ['strong', HTMLAttributes, 0]\n    return ['b', HTMLAttributes, 0]\n  },\n})\n\nnew Editor({\n  extensions: [\n    // ‚Ä¶\n    CustomBold,\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Tiptap Component with Script Setup Syntax\nDESCRIPTION: Modern implementation using Vue 3's script setup syntax for more concise code\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/getting-started/install/vue3.mdx#2025-04-19_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <editor-content :editor=\"editor\" />\n</template>\n\n<script setup>\n  import { useEditor, EditorContent } from '@tiptap/vue-3'\n  import StarterKit from '@tiptap/starter-kit'\n\n  const editor = useEditor({\n    content: \"<p>I'm running Tiptap with Vue.js. üéâ</p>\",\n    extensions: [StarterKit],\n  })\n</script>\n```\n\n----------------------------------------\n\nTITLE: Inserting YouTube Video Using the setYoutubeVideo Command\nDESCRIPTION: Demonstrates how to insert a YouTube iframe embed at the current cursor position with custom dimensions.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/nodes/youtube.mdx#2025-04-19_snippet_20\n\nLANGUAGE: js\nCODE:\n```\neditor.commands.setYoutubeVideo({\n  src: 'https://www.youtube.com/watch?v=dQw4w9WgXcQ',\n  width: 640,\n  height: 480,\n})\n```\n\n----------------------------------------\n\nTITLE: Disabling CSS Injection in Tiptap Editor\nDESCRIPTION: This snippet shows how to disable the default CSS injection in the Tiptap Editor using the 'injectCSS' property.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/api/editor.mdx#2025-04-19_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Editor } from '@tiptap/core'\nimport StarterKit from '@tiptap/starter-kit'\n\nnew Editor({\n  extensions: [StarterKit],\n  injectCSS: false,\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Proofreading Suggestion Interfaces in TypeScript\nDESCRIPTION: Defines interfaces for handling replacement options and suggestions in the proofreading system. Includes support for both plain text and rich text content replacement.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/content-ai/capabilities/suggestion/api-reference.mdx#2025-04-19_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Range } from '@tiptap/core'\nimport { Slice } from '@tiptap/pm/model'\n\nimport { AiSuggestionRule } from './ai-suggestion-rule'\n\nexport interface AiSuggestionReplacementOption {\n  id: string\n  addText: string\n  addSlice: Slice\n}\n\nexport interface Suggestion {\n  id: string\n  deleteRange: Range\n  deleteText: string\n  deleteSlice: Slice\n  replacementOptions: AiSuggestionReplacementOption[]\n  rule: AiSuggestionRule\n  isRejected: boolean\n  metadata?: any\n}\n```\n\n----------------------------------------\n\nTITLE: Editable Text Node View Structure - HTML\nDESCRIPTION: Example showing the DOM structure of an editable text node view in Tiptap editor, demonstrating how it integrates with regular paragraph nodes.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/custom-extensions/node-views/index.mdx#2025-04-19_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"Prosemirror\" contenteditable=\"true\">\n  <p>text</p>\n  <node-view>text</node-view>\n  <p>text</p>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Updating User Information in CollaborationCursor\nDESCRIPTION: Example of using the updateUser command to update the current user's attributes. This command expects a name and color, but additional fields can be added.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/functionality/collaboration-cursor.mdx#2025-04-19_snippet_1\n\nLANGUAGE: js\nCODE:\n```\neditor.commands.updateUser({\n  name: 'John Doe',\n  color: '#000000',\n  avatar: 'https://unavatar.io/github/ueberdosis',\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Tiptap with Alpine.js\nDESCRIPTION: JavaScript code to integrate Tiptap with Alpine.js. It sets up an editor component with basic functionality like toggling headings, bold, and italic text.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/getting-started/install/alpine.mdx#2025-04-19_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport Alpine from 'alpinejs'\nimport { Editor } from '@tiptap/core'\nimport StarterKit from '@tiptap/starter-kit'\n\ndocument.addEventListener('alpine:init', () => {\n  Alpine.data('editor', (content) => {\n    let editor\n\n    return {\n      updatedAt: Date.now(),\n      init() {\n        const _this = this\n\n        editor = new Editor({\n          element: this.$refs.element,\n          extensions: [StarterKit],\n          content: content,\n          onCreate({ editor }) {\n            _this.updatedAt = Date.now()\n          },\n          onUpdate({ editor }) {\n            _this.updatedAt = Date.now()\n          },\n          onSelectionUpdate({ editor }) {\n            _this.updatedAt = Date.now()\n          },\n        })\n      },\n      isLoaded() {\n        return editor\n      },\n      isActive(type, opts = {}) {\n        return editor.isActive(type, opts)\n      },\n      toggleHeading(opts) {\n        editor.chain().toggleHeading(opts).focus().run()\n      },\n      toggleBold() {\n        editor.chain().focus().toggleBold().run()\n      },\n      toggleItalic() {\n        editor.chain().toggleItalic().focus().run()\n      },\n    }\n  })\n})\n\nwindow.Alpine = Alpine\nAlpine.start()\n```\n\n----------------------------------------\n\nTITLE: Using Raw Y.js Fragment in Collaboration Extension\nDESCRIPTION: JavaScript code showing how to use a raw Y.js fragment instead of document and field in the Collaboration extension configuration.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/functionality/collaboration.mdx#2025-04-19_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nCollaboration.configure({\n  fragment: new Y.Doc().getXmlFragment('body'),\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Parse Options in Tiptap Editor\nDESCRIPTION: This example illustrates how to use the 'parseOptions' property to customize the parsing behavior of the Tiptap Editor, specifically setting the 'preserveWhitespace' option to 'full'.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/api/editor.mdx#2025-04-19_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nnew Editor({\n  // Learn more: https://prosemirror.net/docs/ref/#model.ParseOptions\n  parseOptions: {\n    preserveWhitespace: 'full',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Allowed MIME Types in FileHandler Extension\nDESCRIPTION: Example of configuring allowed file types using MIME types. This controls which file types can be dropped or pasted into the editor.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/functionality/filehandler.mdx#2025-04-19_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nFileHandler.configure({\n  allowedMimeTypes: ['image/jpeg', 'image/png', 'image/gif'],\n})\n```\n\n----------------------------------------\n\nTITLE: Updating AI Suggestion Rules After Editor Initialization\nDESCRIPTION: Shows how to change the AI Suggestion rules after the editor is loaded using the setAiSuggestionRules command. The example creates a new grammar check rule with custom styling.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/content-ai/capabilities/suggestion/features/define-rules.mdx#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst newRules = [\n  {\n    id: '2',\n    title: 'Grammar Check',\n    prompt: 'Identify and correct any grammar mistakes',\n    color: '#FFA500',\n    backgroundColor: 'FFF5E6',\n  },\n]\n\neditor.commmands.setAiSuggestionRules(newRules)\n```\n\n----------------------------------------\n\nTITLE: Customizing Keyboard Shortcuts in Tiptap BulletList Extension\nDESCRIPTION: Shows how to modify keyboard shortcuts for a Tiptap extension. This example changes the bullet list toggle shortcut to 'Mod-l' in the BulletList extension.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/custom-extensions/extend-existing.mdx#2025-04-19_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// Change the bullet list keyboard shortcut\nimport BulletList from '@tiptap/extension-bullet-list'\n\nconst CustomBulletList = BulletList.extend({\n  addKeyboardShortcuts() {\n    return {\n      'Mod-l': () => this.editor.commands.toggleBulletList(),\n    }\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Updating an Existing Thread\nDESCRIPTION: PATCH request to modify attributes of an existing thread, such as resolution status or metadata. Updates only the specified fields while preserving others.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/comments/integrate/rest-api.mdx#2025-04-19_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nPATCH /api/documents/:identifier/threads/:threadIdentifier\n```\n\n----------------------------------------\n\nTITLE: Importing Markdown File in Tiptap Editor\nDESCRIPTION: JavaScript code to import a Markdown file into the Tiptap editor. This command uploads the file to the Conversion API, converts it to Tiptap JSON, and replaces the current editor content.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/conversion/import-export/markdown/editor-extensions.mdx#2025-04-19_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\neditor.chain().focus().import({ file }).run()\n```\n\n----------------------------------------\n\nTITLE: Configuring AI Suggestion Rules in Tiptap\nDESCRIPTION: Demonstrates how to configure rules for the AI Suggestion extension with properties like id, title, prompt, and styling options\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/content-ai/capabilities/suggestion/configure.mdx#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nAiSuggestion.configure({\n  rules: [\n    {\n      id: '1',\n      title: 'Spell Check',\n      prompt: 'Identify and correct any spelling mistakes',\n      color: '#DC143C',\n      backgroundColor: 'FFE6E6',\n    },\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Dry Run Commands in Tiptap\nDESCRIPTION: Demonstrates how to perform dry run commands to check if they can be executed without actually applying changes to the document.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/api/commands/index.mdx#2025-04-19_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\neditor.can().toggleBold()\n```\n\n----------------------------------------\n\nTITLE: Exporting Tiptap JSON to DOCX using TypeScript\nDESCRIPTION: This code snippet shows the signature of the exportDocx function from @tiptap-pro/extension-export-docx. It explains the function parameters and their purposes, including document content, export type, custom node definitions, and style overrides.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/conversion/import-export/docx/editor-export.mdx#2025-04-19_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Export the current document as a .docx file\n *\n * Notes: 'buffer' and 'stream' export types are only available in the server environment\n * as they use the Node Buffer and Stream APIs respectively\n *\n * @param options.document - The JSON representation of the document\n * @param options.exportType - The type of export to perform\n * @param options.customNodes - Custom node definitions\n * @param options.styleOverrides - Style overrides for the exported document\n * @example exportDocx({ document: editor.getJSON(), exportType: 'blob', customNodes: [], styleOverrides: {} })\n */\nasync function exportDocx ({ document, exportType, customNodes, styleOverrides }: ExportDocxOptions) {}\n```\n\n----------------------------------------\n\nTITLE: Basic DragHandle Component Usage\nDESCRIPTION: Simple example of using the DragHandle component with custom content.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/functionality/drag-handle-react.mdx#2025-04-19_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<DragHandle>\n  <div>Drag Me!</div>\n</DragHandle>\n```\n\n----------------------------------------\n\nTITLE: Updating Node Attributes in Vue Component\nDESCRIPTION: Shows how to update node attributes from within a Vue component used for a Tiptap node view. It includes the props definition for the updateAttributes function.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/custom-extensions/node-views/vue.mdx#2025-04-19_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nprops: {\n  updateAttributes: {\n    type: Function,\n    required: true,\n  },\n},\n```\n\n----------------------------------------\n\nTITLE: Combining Tiptap Content AI Cloud with Custom Backend in TypeScript\nDESCRIPTION: This code snippet demonstrates how to combine suggestions from both the Tiptap Content AI Cloud and a custom backend. It splits the rules, processes them separately, and then merges the results.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/content-ai/capabilities/suggestion/custom-llms.mdx#2025-04-19_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nAiSuggestion.configure({\n  async resolver({ defaultResolver, rules, ...options }) {\n    // Split the rules into two groups\n    const { rulesForDefaultSuggestions, rulesForCustomSuggestions } = splitRules(rules)\n\n    // Get suggestions from Tiptap Content AI Cloud\n    const defaultSuggestions = await defaultResolver({\n      ...options,\n      rules: rulesForDefaultSuggestions,\n    })\n    // Get suggestions from your own backend\n    const customSuggestions = await customResolver({\n      ...options,\n      rules: rulesForCustomSuggestions,\n    })\n\n    // merge both lists of suggestions\n    return [...defaultSuggestions, ...customSuggestions]\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Paragraph Styles for Tiptap Document Export in TypeScript\nDESCRIPTION: This code defines an object containing an array of paragraph styles for Tiptap's document export. It includes styles for normal text, list items, multiple heading levels, titles, subtitles, quotes, and hyperlinks. Each style specifies properties such as font, size, color, spacing, and alignment.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/conversion/import-export/docx/export-styles.mdx#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  paragraphStyles: [\n    // Normal style (default for most paragraphs)\n    {\n      id: 'Normal',\n      name: 'Normal',\n      run: {\n        font: 'Aptos',\n        size: pointsToHalfPoints(11),\n      },\n      paragraph: {\n        spacing: {\n          before: 0,\n          after: pointsToTwips(10),\n          line: lineHeightToDocx(1.15),\n        },\n      },\n    },\n    // List Paragraph style (used for bullets and numbering)\n    {\n      id: 'ListParagraph',\n      name: 'List Paragraph',\n      basedOn: 'Normal',\n      quickFormat: true,\n      run: {\n        font: 'Aptos',\n        size: pointsToHalfPoints(11),\n      },\n      paragraph: {\n        spacing: {\n          before: 0,\n          after: pointsToTwips(2),\n          line: lineHeightToDocx(1),\n        },\n      },\n    },\n    // Heading 1 style\n    {\n      id: 'Heading1',\n      name: 'Heading 1',\n      basedOn: 'Normal',\n      next: 'Normal',\n      quickFormat: true,\n      run: {\n        font: 'Aptos Light',\n        size: pointsToHalfPoints(16),\n        bold: true,\n        color: '2E74B5',\n      },\n      paragraph: {\n        spacing: {\n          before: pointsToTwips(12),\n          after: pointsToTwips(6),\n          line: lineHeightToDocx(1.15),\n        },\n      },\n    },\n    // Heading 2 style\n    {\n      id: 'Heading2',\n      name: 'Heading 2',\n      basedOn: 'Normal',\n      next: 'Normal',\n      quickFormat: true,\n      run: {\n        font: 'Aptos Light',\n        size: pointsToHalfPoints(14),\n        bold: true,\n        color: '2E74B5',\n      },\n      paragraph: {\n        spacing: {\n          before: pointsToTwips(12),\n          after: pointsToTwips(6),\n          line: lineHeightToDocx(1.15),\n        },\n      },\n    },\n    // Heading 3 style\n    {\n      id: 'Heading3',\n      name: 'Heading 3',\n      basedOn: 'Normal',\n      next: 'Normal',\n      quickFormat: true,\n      run: {\n        font: 'Aptos',\n        size: pointsToHalfPoints(13),\n        bold: true,\n        color: '2E74B5',\n      },\n      paragraph: {\n        spacing: {\n          before: pointsToTwips(12),\n          after: pointsToTwips(6),\n          line: lineHeightToDocx(1.15),\n        },\n      },\n    },\n    // Heading 4 style\n    {\n      id: 'Heading4',\n      name: 'Heading 4',\n      basedOn: 'Normal',\n      next: 'Normal',\n      quickFormat: true,\n      run: {\n        font: 'Aptos',\n        size: pointsToHalfPoints(12),\n        bold: true,\n        color: '2E74B5',\n      },\n      paragraph: {\n        spacing: {\n          before: pointsToTwips(12),\n          after: pointsToTwips(6),\n          line: lineHeightToDocx(1.15),\n        },\n      },\n    },\n    // Heading 5 style\n    {\n      id: 'Heading5',\n      name: 'Heading 5',\n      basedOn: 'Normal',\n      next: 'Normal',\n      quickFormat: true,\n      run: {\n        font: 'Aptos',\n        size: pointsToHalfPoints(11),\n        bold: true,\n        color: '2E74B5',\n      },\n      paragraph: {\n        spacing: {\n          before: pointsToTwips(12),\n          after: pointsToTwips(6),\n          line: lineHeightToDocx(1.15),\n        },\n      },\n    },\n    // Title style\n    {\n      id: 'Title',\n      name: 'Title',\n      basedOn: 'Normal',\n      next: 'Normal',\n      quickFormat: true,\n      run: {\n        font: 'Aptos Light',\n        size: pointsToHalfPoints(22),\n        bold: true,\n        color: '000000',\n      },\n      paragraph: {\n        alignment: AlignmentType.CENTER,\n        spacing: {\n          before: 0,\n          after: 0,\n          line: lineHeightToDocx(1.15),\n        },\n      },\n    },\n    // Subtitle style\n    {\n      id: 'Subtitle',\n      name: 'Subtitle',\n      basedOn: 'Normal',\n      next: 'Normal',\n      quickFormat: true,\n      run: {\n        font: 'Aptos Light',\n        size: pointsToHalfPoints(16),\n        italics: true,\n        color: '666666',\n      },\n      paragraph: {\n        alignment: AlignmentType.CENTER,\n        spacing: {\n          before: 0,\n          after: 0,\n          line: lineHeightToDocx(1.15),\n        },\n      },\n    },\n    // Quote style (typically for indented, italic text)\n    {\n      id: 'Quote',\n      name: 'Quote',\n      basedOn: 'Normal',\n      quickFormat: true,\n      run: {\n        font: 'Aptos',\n        italics: true,\n      },\n      paragraph: {\n        alignment: AlignmentType.CENTER,\n        spacing: {\n          before: pointsToTwips(10),\n          after: pointsToTwips(10),\n          line: lineHeightToDocx(1.15),\n        },\n      },\n    },\n    // Intense Quote style (more pronounced indentation)\n    {\n      id: 'IntenseQuote',\n      name: 'Intense Quote',\n      basedOn: 'Normal',\n      quickFormat: true,\n      run: {\n        font: 'Aptos',\n        italics: true,\n        color: '444444',\n      },\n      paragraph: {\n        alignment: AlignmentType.CENTER,\n        spacing: {\n          before: pointsToTwips(10),\n          after: pointsToTwips(10),\n          line: lineHeightToDocx(1.15),\n        },\n      },\n    },\n    // No Spacing style (no extra space before or after paragraphs)\n    {\n      id: 'NoSpacing',\n      name: 'No Spacing',\n      basedOn: 'Normal',\n      quickFormat: true,\n      paragraph: {\n        spacing: {\n          before: 0,\n          after: 0,\n          line: lineHeightToDocx(1),\n        },\n      },\n    },\n    // Hyperlink style\n    {\n      id: 'Hyperlink',\n      name: 'Hyperlink',\n      basedOn: 'Normal',\n      run: {\n        color: '0563C1',\n        underline: {\n          type: 'single',\n        },\n      },\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Example cURL Request for Updating a Thread\nDESCRIPTION: cURL example for updating a thread's resolution status. Requires document ID, thread ID, Authorization header, and JSON payload with the fields to update.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/comments/integrate/rest-api.mdx#2025-04-19_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location --request PATCH 'https://YOUR_APP_ID.collab.tiptap.cloud/api/documents/{document_id}/threads/{thread_id}' \\\n--header 'Content-Type: application/json' \\\n--header 'Authorization: {{Authorization}}' \\\n--data '{\n    \"resolvedAt\": null\n}'\n```\n\n----------------------------------------\n\nTITLE: Executing exitCode Command in Tiptap Editor - JavaScript\nDESCRIPTION: Demonstrates how to use the exitCode command to exit a code block and create a new default block after the current selection. This command moves the cursor to the newly created block when executed.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/api/commands/nodes-and-marks/exit-code.mdx#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\neditor.commands.exitCode()\n```\n\n----------------------------------------\n\nTITLE: Configuring CommentsKit with TiptapCollabProvider\nDESCRIPTION: JavaScript code demonstrating how to configure the CommentsKit extension with a TiptapCollabProvider instance, which is required for cloud or on-premises features. It also shows the optional 'useLegacyWrapping' configuration.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/comments/getting-started/install.mdx#2025-04-19_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst collabProvider = new TiptapCollabProvider({\n  // your provider options\n})\n\nconst editor = new Editor({\n  ...\n  extensions: [\n    ...,\n    CommentsKit.configure({\n      provider: collabProvider,\n      useLegacyWrapping: false, // optional, will be the default in the future\n    }),\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Using Code Block Commands\nDESCRIPTION: Examples of using editor commands to set and toggle code blocks.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/nodes/code-block-lowlight.mdx#2025-04-19_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\neditor.commands.setCodeBlock()\n```\n\nLANGUAGE: javascript\nCODE:\n```\neditor.commands.toggleCodeBlock()\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Emojis\nDESCRIPTION: Example of using GitHub's extended emoji list instead of default Unicode emojis.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/nodes/emoji.mdx#2025-04-19_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport Emoji, { gitHubEmojis } from '@tiptap-pro/extension-emoji'\n\nEmoji.configure({\n  emojis: gitHubEmojis,\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Table Extension with Custom HTML Attributes\nDESCRIPTION: Example of how to configure the Table extension with custom HTML attributes like CSS classes.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/nodes/table.mdx#2025-04-19_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nTable.configure({\n  HTMLAttributes: {\n    class: 'my-custom-class',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Using aiAccept Command in Tiptap Content AI\nDESCRIPTION: Shows various ways to use the aiAccept command to insert AI-generated responses into the editor. Demonstrates options for inserting at specific positions or appending to selections.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/content-ai/capabilities/generation/text-generation/manage-responses.mdx#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Accept the response and insert it into the editor\neditor.chain().aiAccept().run()\n\n// Accept the response and insert it into the editor at the start\neditor.chain().aiAccept({ insertAt: 0 }).run()\n\n// Accept the response and insert it into the editor at the end\neditor.chain().aiAccept({ insertAt: editor.state.doc.content.size }).run()\n\n// Accept the response and append it to the current selection\neditor.chain().aiAccept({ append: true }).run()\n```\n\n----------------------------------------\n\nTITLE: App.vue Integration Example\nDESCRIPTION: Example showing how to integrate the Tiptap component into the main App.vue file.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/getting-started/install/vue2.mdx#2025-04-19_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <div id=\"app\">\n    <tiptap />\n  </div>\n</template>\n\n<script>\n  import Tiptap from './components/Tiptap.vue'\n\n  export default {\n    name: 'App',\n    components: {\n      Tiptap,\n    },\n  }\n</script>\n```\n\n----------------------------------------\n\nTITLE: Custom URL Validation\nDESCRIPTION: Implementing custom URL validation logic\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/marks/link.mdx#2025-04-19_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nLink.configure({\n  isAllowedUri: (url, ctx) => ctx.defaultValidate(url) && !url.startsWith('./'),\n})\n```\n\n----------------------------------------\n\nTITLE: Customizing Markdown Export in Tiptap Editor\nDESCRIPTION: JavaScript code showing how to customize the export behavior in Tiptap. It demonstrates error handling, managing the exported blob, and triggering the download.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/conversion/import-export/markdown/editor-extensions.mdx#2025-04-19_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\neditor.chain().export({\n  format: 'md',\n  onExport(context) {\n    const { blob, error, download, filename } = context\n    if (error) {\n      showErrorToast({ message: error.message })\n    }\n    isLoading = false\n    // If needed, rename the file, handle the blob, or call download()\n    download() // triggers a \"document.md\" download in the browser\n  },\n}).run()\n```\n\n----------------------------------------\n\nTITLE: Configuring Lowlight Module\nDESCRIPTION: Configuration example showing how to provide the lowlight module to the extension for syntax highlighting.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/nodes/code-block-lowlight.mdx#2025-04-19_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { lowlight } from 'lowlight/lib/core'\n\nCodeBlockLowlight.configure({\n  lowlight,\n})\n```\n\n----------------------------------------\n\nTITLE: Extending Default Rendering Behavior in Tiptap Mathematics Extension\nDESCRIPTION: JavaScript code demonstrating how to import and extend the default shouldRender function to customize LaTeX rendering behavior in the Tiptap Mathematics extension.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/functionality/mathematics.mdx#2025-04-19_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport Mathematics, { shouldRender } from '@tiptap-pro/extension-mathematics'\n\n// [...]\n\nMathematics.configure({\n  shouldRender: (state, pos, node) => {\n    // this will disable rendering for headings & code blocks\n    return shouldRender(state, pos, node) && node.type.name !== 'heading'\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Importing All Node View Props with TypeScript Support\nDESCRIPTION: Shows how to import all node view props with TypeScript support for both Vue 2 and Vue 3 in Tiptap. This approach provides full TypeScript support for all available props.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/custom-extensions/node-views/vue.mdx#2025-04-19_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// Vue 3\nimport { defineComponent } from 'src/content/editor/extensions/custom-extensions/node-views/vue.mdx'\nimport { nodeViewProps } from '@tiptap/vue-3'\nexport default defineComponent({\n  props: nodeViewProps,\n})\n\n// Vue 2\nimport Vue from 'src/content/editor/extensions/custom-extensions/node-views/vue.mdx'\nimport { nodeViewProps } from '@tiptap/vue-2'\nexport default Vue.extend({\n  props: nodeViewProps,\n})\n```\n\n----------------------------------------\n\nTITLE: Rejecting AI Suggestion in Tiptap\nDESCRIPTION: This code demonstrates how to reject a specific AI suggestion using the rejectAiSuggestion command with a suggestion ID. Rejected suggestions are not displayed but remain accessible in storage.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/content-ai/capabilities/suggestion/features/apply-suggestions.mdx#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\neditor.commands.rejectAiSuggestion('suggestionId')\n```\n\n----------------------------------------\n\nTITLE: Providing Context to LLM\nDESCRIPTION: Shows how to provide additional context to the LLM for improved suggestions\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/content-ai/capabilities/suggestion/configure.mdx#2025-04-19_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nAiSuggestion.configure({\n  context: 'The tone should be formal and professional.',\n})\n```\n\n----------------------------------------\n\nTITLE: Navigating to Previous Cell\nDESCRIPTION: Command to move the cursor to the previous cell in the table.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/nodes/table.mdx#2025-04-19_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\neditor.commands.goToPreviousCell()\n```\n\n----------------------------------------\n\nTITLE: Adding Columns After Current Position\nDESCRIPTION: Command to add a new column after the current column in a table.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/nodes/table.mdx#2025-04-19_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\neditor.commands.addColumnAfter()\n```\n\n----------------------------------------\n\nTITLE: Using splitBlock Command in Tiptap Editor\nDESCRIPTION: Examples showing how to use the splitBlock command to split nodes with and without keeping marks. The command accepts an options object with keepMarks parameter that defaults to true.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/api/commands/nodes-and-marks/split-block.mdx#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// split the current node and keep marks\neditor.commands.splitBlock()\n\n// split the current node and don't keep marks\neditor.commands.splitBlock({ keepMarks: false })\n```\n\n----------------------------------------\n\nTITLE: Retrieving Preview Content from Version Payload in JavaScript\nDESCRIPTION: Demonstrates how to extract Tiptap JSON content from a collaboration provider's version payload. Takes a payload and optional field parameter.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/collaboration/documents/history.mdx#2025-04-19_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst myContent = getPreviewContentFromVersionPayload(payload, 'default')\n```\n\n----------------------------------------\n\nTITLE: Configuring Placeholder Editability\nDESCRIPTION: JavaScript configuration to control placeholder visibility based on editor editability.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/functionality/placeholder.mdx#2025-04-19_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nPlaceholder.configure({\n  showOnlyWhenEditable: false,\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Code Block Command\nDESCRIPTION: Command to wrap content in a code block\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/nodes/code-block.mdx#2025-04-19_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\neditor.commands.setCodeBlock()\n```\n\n----------------------------------------\n\nTITLE: Exporting Markdown from Tiptap Editor\nDESCRIPTION: JavaScript code to export the Tiptap editor's content as Markdown. It demonstrates how to use the export command with the 'md' format.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/conversion/import-export/markdown/editor-extensions.mdx#2025-04-19_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// Export the editor's content as markdown\n// Supported export formats: docx, odt, md, gfm\neditor.chain().focus().export({ format: 'md' }).run()\n```\n\n----------------------------------------\n\nTITLE: Configuring Anchor Types for Table of Contents\nDESCRIPTION: Example of configuring custom anchor types for the Table of Contents extension\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/functionality/table-of-contents.mdx#2025-04-19_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nTableOfContents.configure({\n  anchorTypes: ['heading', 'customAnchorType'],\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a New Thread in Tiptap Editor (JavaScript)\nDESCRIPTION: Demonstrates how to create a new thread at the current selection using the setThread command. It includes an example of adding user metadata to both the thread and its initial comment.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/comments/core-concepts/manage-threads.mdx#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst createThread = () => {\n  const user = {\n    id: '123', // the user id of the author\n    name: 'John Doe', // the name of the author\n    avatarUrl: 'https://example.com/avatar.jpg', // the avatar of the author\n  }\n\n  editor\n    .chain()\n    .setThread({\n      content: 'This is a new thread', // the content of the threads first inital comment\n      data: {\n        user,\n      },\n      commentData: {\n        user,\n      },\n    })\n    .run()\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Command Executability in Tiptap Editor\nDESCRIPTION: This snippet demonstrates how to use the 'can()' method to check if a command or command chain can be executed in the Tiptap Editor without actually executing it.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/api/editor.mdx#2025-04-19_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n// Returns `true` if the undo command can be executed\neditor.can().undo()\n```\n\n----------------------------------------\n\nTITLE: Multiple BubbleMenus with PluginKey Objects\nDESCRIPTION: Configuration of multiple BubbleMenu instances using ProseMirror PluginKey objects for unique identification\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/functionality/bubble-menu.mdx#2025-04-19_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Editor } from '@tiptap/core'\nimport BubbleMenu from '@tiptap/extension-bubble-menu'\nimport { PluginKey } from '@tiptap/pm/state'\n\nnew Editor({\n  extensions: [\n    BubbleMenu.configure({\n      pluginKey: new PluginKey('bubbleMenuOne'),\n      element: document.querySelector('.menu-one'),\n    }),\n    BubbleMenu.configure({\n      pluginKey: new PluginKey('bubbleMenuTwo'),\n      element: document.querySelector('.menu-two'),\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Toggling Header Rows\nDESCRIPTION: Command to convert the current row to a header row or back.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/nodes/table.mdx#2025-04-19_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\neditor.commands.toggleHeaderRow()\n```\n\n----------------------------------------\n\nTITLE: Removing Text Color Command\nDESCRIPTION: Example of using the unsetColor command to remove any applied font color from selected text.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/functionality/color.mdx#2025-04-19_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\neditor.commands.unsetColor()\n```\n\n----------------------------------------\n\nTITLE: Configuring the SnapshotCompare Extension with Provider\nDESCRIPTION: JavaScript configuration for initializing the SnapshotCompare extension with a TiptapCollabProvider instance in the Tiptap editor.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/collaboration/documents/snapshot-compare.mdx#2025-04-19_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst provider = new TiptapCollabProvider({\n  // ...\n})\n\nconst editor = new Editor({\n  // ...\n  extensions: [\n    // ...\n    SnapshotCompare.configure({\n      provider,\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Custom HTML Attributes\nDESCRIPTION: Adds custom HTML attributes to the rendered code block element\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/nodes/code-block.mdx#2025-04-19_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nCodeBlock.configure({\n  HTMLAttributes: {\n    class: 'my-custom-class',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Selecting Entire Document with Tiptap selectAll Command in JavaScript\nDESCRIPTION: Demonstrates how to use the selectAll command to select the entire document content in a Tiptap editor instance. This command can be useful for operations that need to affect all content at once.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/api/commands/selection/select-all.mdx#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Select the whole document\neditor.commands.selectAll()\n```\n\n----------------------------------------\n\nTITLE: Custom BubbleMenu Visibility Logic\nDESCRIPTION: Example of customizing BubbleMenu visibility behavior using the shouldShow configuration option\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/functionality/bubble-menu.mdx#2025-04-19_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nBubbleMenu.configure({\n  shouldShow: ({ editor, view, state, oldState, from, to }) => {\n    // only show the bubble menu for images and links\n    return editor.isActive('image') || editor.isActive('link')\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Chaining Dry Run Commands in Tiptap\nDESCRIPTION: Shows how to chain multiple dry run commands to check if a series of operations can be applied.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/api/commands/index.mdx#2025-04-19_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\neditor.can().chain().toggleBold().toggleItalic().run()\n```\n\n----------------------------------------\n\nTITLE: Selecting and Deselecting Threads in Tiptap Editor (JavaScript)\nDESCRIPTION: Demonstrates how to select and deselect threads using the selectThread and unselectThread commands. It also mentions the possibility of selecting or deselecting threads without specifying an ID.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/comments/core-concepts/manage-threads.mdx#2025-04-19_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// Select a thread\neditor.commands.selectThread({\n  id: '123',\n})\n\n// Deselect a thread\neditor.commands.unselectThread({\n  id: '123',\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Color Extension Types\nDESCRIPTION: Example showing how to configure which marks the color attribute should be applied to.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/functionality/color.mdx#2025-04-19_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nColor.configure({\n  types: ['textStyle'],\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Nested Node Display\nDESCRIPTION: JavaScript configuration to enable placeholder display for nested nodes.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/functionality/placeholder.mdx#2025-04-19_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nPlaceholder.configure({\n  includeChildren: true,\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring .npmrc for Tiptap Pro Registry Authentication\nDESCRIPTION: Configuration for npm, pnpm, or Yarn Classic to authenticate to the Tiptap private registry using .npmrc file. This setup allows access to Pro extensions by defining the registry URL and authentication token.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/guides/pro-extensions.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n@tiptap-pro:registry=https://registry.tiptap.dev/\n//registry.tiptap.dev/:_authToken=${TIPTAP_PRO_TOKEN}\n```\n\n----------------------------------------\n\nTITLE: Image Upload Server Implementation with Bun\nDESCRIPTION: Dependency-free server implementation using Bun runtime for handling image uploads to S3 from Tiptap's conversion service.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/conversion/import-export/docx/preserve-images.mdx#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst s3Client = new Bun.S3Client({\n  accessKeyId: process.env.AWS_ACCESS_KEY_ID,\n  secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY,\n  region: process.env.AWS_REGION,\n  bucket: process.env.AWS_BUCKET,\n  endpoint: process.env.AWS_ENDPOINT,\n})\n\nBun.serve({\n  port: 8081,\n  async fetch(req) {\n    const url = new URL(req.url)\n\n    // Handle file uploads on the /upload endpoint\n    if (url.pathname === '/upload') {\n      const formdata = await req.formData()\n      const file = formdata.get('file')\n\n      if (!file || typeof file === 'string') {\n        return new Response(JSON.stringify({ error: 'No file uploaded' }), {\n          status: 400,\n          headers: {\n            'content-type': 'application/json',\n          },\n        })\n      }\n\n      try {\n        // The file already has a name and type, so we can use it directly\n        const s3File = s3Client.file(file.name, { type: file.type })\n        // Write the file to S3\n        await s3File.write(file)\n\n        return new Response(\n          JSON.stringify({\n            // Send the URL of the uploaded file back to the client to insert it into the editor\n            url: new Response(s3File).headers.get('location'),\n          }),\n          {\n            headers: {\n              'content-type': 'application/json',\n            },\n          },\n        )\n      } catch (error) {\n        return new Response(\n          JSON.stringify({\n            error: error instanceof Error ? error.message : 'Failed to upload file',\n          }),\n          {\n            status: 500,\n            headers: {\n              'content-type': 'application/json',\n            },\n          },\n        )\n      }\n    }\n\n    return new Response(JSON.stringify({ error: 'Not found' }), {\n      status: 404,\n    })\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Commands with Dispatch Check in Tiptap\nDESCRIPTION: Demonstrates how to implement a custom command that checks if it should be dispatched, making it compatible with dry run operations.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/api/commands/index.mdx#2025-04-19_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nexport default (value) =>\n  ({ tr, dispatch }) => {\n    if (dispatch) {\n      tr.insertText(value)\n    }\n\n    return true\n  }\n```\n\n----------------------------------------\n\nTITLE: Disabling Autolink Feature\nDESCRIPTION: Configuration to disable automatic link creation while typing\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/marks/link.mdx#2025-04-19_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nLink.configure({\n  autolink: false,\n})\n```\n\n----------------------------------------\n\nTITLE: Overriding Typography Rules with Custom Output\nDESCRIPTION: Example showing how to customize the output of typography rules by providing alternative string replacements.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/functionality/typography.mdx#2025-04-19_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Editor } from '@tiptap/core'\nimport Typography from '@tiptap/extension-typography'\n\nconst editor = new Editor({\n  extensions: [\n    // Disable some included rules\n    Typography.configure({\n      oneHalf: '1 / 2', // this will insert \"1 / 2\" instead of the default \"¬Ω\"\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Toggling Links Programmatically\nDESCRIPTION: Examples of using commands to toggle links\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/marks/link.mdx#2025-04-19_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\neditor.commands.toggleLink({ href: 'https://example.com' })\neditor.commands.toggleLink({ href: 'https://example.com', target: '_blank' })\n```\n\n----------------------------------------\n\nTITLE: Configuring Item Type Name for TaskList\nDESCRIPTION: Example of configuring the item type name for the TaskList extension. The default value is 'taskItem', but it can be customized if needed.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/nodes/task-list.mdx#2025-04-19_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nTaskList.configure({\n  itemTypeName: 'taskItem',\n})\n```\n\n----------------------------------------\n\nTITLE: Using joinForward Command in Tiptap Editor\nDESCRIPTION: Demonstrates how to use the joinForward command to join two nodes forwards from the current selection. This command is particularly useful when the selection is empty and at the end of a textblock, where it will attempt to reduce the distance between that block and the following block.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/api/commands/nodes-and-marks/join-forward.mdx#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\neditor.commands.joinForward()\n```\n\n----------------------------------------\n\nTITLE: Accessing Typed Extension Storage in Tiptap with TypeScript\nDESCRIPTION: This snippet demonstrates how to access typed extension storage outside of the extension in Tiptap when using TypeScript. It shows manual type casting for the storage.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/guides/typescript.mdx#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CustomExtensionStorage } from './custom-extension'\n\nconst customStorage = editor.storage.customExtension as CustomExtensionStorage\n```\n\n----------------------------------------\n\nTITLE: Adding Rows Before Current Position\nDESCRIPTION: Command to add a new row above the current row in a table.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/nodes/table.mdx#2025-04-19_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\neditor.commands.addRowBefore()\n```\n\n----------------------------------------\n\nTITLE: Disabling Automatic Loading of Suggestions on Start in Tiptap\nDESCRIPTION: Configure the AI Suggestion extension to not automatically load suggestions when the editor is initialized by setting the loadOnStart option to false.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/content-ai/capabilities/suggestion/features/configure-when-to-load-suggestions.mdx#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nAiSuggestion.configure({\n  // Disable automatic loading of suggestions\n  loadOnStart: false,\n})\n```\n\n----------------------------------------\n\nTITLE: Batch Importing Documents in Tiptap Collaboration\nDESCRIPTION: Demonstrates how to import multiple documents in bulk using a predefined JSON structure with document metadata and content in Tiptap JSON format.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/collaboration/documents/rest-api.mdx#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location --request PUT 'https://YOUR_APP_ID.collab.tiptap.cloud/api/admin/batch-import' \\\n--header 'Content-Type: application/json' \\\n--data '[\n    [\n        {\n            \"created_at\": \"2024-05-01T10:00:00Z\",\n            \"version\": 0,\n            \"name\": \"document-1\",\n            \"tiptap_json\": {\"type\": \"doc\", \"content\": [{\"type\": \"paragraph\", \"content\": [{\"type\": \"text\", \"text\": \"Text of document-1: v0\"}]}]}\n        },\n        {\n            \"created_at\": \"2024-05-01T11:00:00Z\",\n            \"version\": 1,\n            \"name\": \"document-1\",\n            \"tiptap_json\": {\"type\": \"doc\", \"content\": [{\"type\": \"paragraph\", \"content\": [{\"type\": \"text\", \"text\": \"Text of document-1: v1\"}]}]}\n        }\n    ],\n    [\n        {\n            \"created_at\": \"2024-06-01T10:00:00Z\",\n            \"version\": 0,\n            \"name\": \"document-2\",\n            \"tiptap_json\": {\"type\": \"doc\", \"content\": [{\"type\": \"paragraph\", \"content\": [{\"type\": \"text\", \"text\": \"Text of document-2: v0\"}]}]}\n        },\n        {\n            \"created_at\": \"2024-06-01T11:00:00Z\",\n            \"version\": 1,\n            \"name\": \"document-2\",\n            \"tiptap_json\": {\"type\": \"doc\", \"content\": [{\"type\": \"paragraph\", \"content\": [{\"type\": \"text\", \"text\": \"Text of document-2: v1\"}]}]}\n        }\n    ]\n]'\n```\n\n----------------------------------------\n\nTITLE: Using respondInline Option in Tiptap Editor Streaming\nDESCRIPTION: This example shows how to use the respondInline option to insert content at the same depth as the from position, useful for inserting block content as a sibling instead of a direct block.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/content-ai/capabilities/generation/text-generation/stream.mdx#2025-04-19_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\neditor.commands.setContent('<p>123</p>')\neditor.commands.streamContent(\n  4,\n  async ({ write }) => {\n    await new Promise((resolve) => {\n      setTimeout(() => resolve(), 10)\n    })\n    write({ partial: '<p>hello ' })\n    await new Promise((resolve) => {\n      setTimeout(() => resolve(), 10)\n    })\n    write({ partial: 'world</p><p>ok</p>' })\n  },\n  { respondInline: true },\n)\n// Output: <p>123hello world</p><p>ok</p>\n// As opposed to: <p>123</p><p>hello work</p><p>ok</p> when `respondInline` is `false`\n```\n\n----------------------------------------\n\nTITLE: Configuring TextAlign Node Types\nDESCRIPTION: Configuration example showing how to specify which node types should have text alignment functionality.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/functionality/textalign.mdx#2025-04-19_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nTextAlign.configure({\n  types: ['heading', 'paragraph'],\n})\n```\n\n----------------------------------------\n\nTITLE: Defining SnapshotCompare Extension Types in TypeScript for Tiptap\nDESCRIPTION: This code snippet defines the TypeScript types for the SnapshotCompare extension in Tiptap. It includes command interfaces for showing diffs, comparing versions, and customizing diff rendering. It also defines options for the extension and storage types for managing the diff state.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/collaboration/documents/snapshot-compare.mdx#2025-04-19_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    snapshotCompare: {\n      /**\n       * Given a change tracking transform, show the diff within the editor\n       */\n      showDiff: (tr: ChangeTrackingTransform, options?: { diffs?: DiffSet }) => ReturnType\n      /**\n       * Hide the diff and restore the previous content\n       */\n      hideDiff: () => ReturnType\n      /**\n       * Diffs two versions and renders the diff into the editor\n       */\n      compareVersions: <\n        T extends Pick<Attribution, 'color'> & Record<string, any> = Pick<Attribution, 'color'> &\n          Record<string, any>,\n      >(options: {\n        /**\n         * The version to start the diff from\n         */\n        fromVersion: number\n        /**\n         * The version to end the diff at\n         * If not provided, the latest snapshot will be used\n         */\n        toVersion?: number\n        /**\n         * Allows adding contextual data to each users changes\n         */\n        hydrateUserData?: (context: {\n          /**\n           * The type of event\n           */\n          type: 'added' | 'removed'\n          /**\n           * The userId that manipulated this content\n           */\n          userId: string | undefined\n          /**\n           * The yjs identifier of the content\n           */\n          id?: y.ID\n        }) => T\n        /**\n         * If provided, allows customizing the behavior of rendering the diffs to the editor.\n         * @note The default behavior would be to just display the diff immediately.\n         */\n        onCompare?: (\n          context:\n            | {\n                error?: undefined\n                /**\n                 * The editor instance\n                 */\n                editor: Editor\n                /**\n                 * All of the changes as a transform with attribution metadata\n                 */\n                tr: ChangeTrackingTransform<Attribution & T>\n                /**\n                 * The changes represented as an array of diffs\n                 */\n                diffSet: DiffSet<Attribution & T>\n              }\n            | {\n                error: Error\n              },\n        ) => void\n        /**\n         * Verbosely log the diffing process to help track down where things went wrong\n         */\n        enableDebugging?: boolean\n      }) => ReturnType\n    }\n  }\n}\n\nexport type SnapshotCompareOptions = {\n  /**\n   * The tiptap provider instance. This is required for the extension to compute the diffs, but not to display them.\n   * It is also possible to pass a TiptapCollabProvider instance.\n   */\n  provider: TiptapCollabProvider | null\n  /**\n   * This allows you to control mapping of a diff into a decoration to display the content of that diff\n   */\n  mapDiffToDecorations?: (options: {\n    /**\n     * The diff to map to a decoration\n     */\n    diff: Diff\n    /**\n     * The editor instance\n     */\n    editor: Editor\n    /**\n     * The change tracking transform\n     */\n    tr: ChangeTrackingTransform\n    /**\n     * The default implementation of how to map a diff to a decoration\n     */\n    defaultMapDiffToDecorations: typeof defaultMapDiffToDecorations\n  }) => ReturnType<typeof defaultMapDiffToDecorations>\n}\n\nexport type SnapshotCompareStorageInactive = {\n  /**\n   * Whether the diff view is currently active\n   */\n  isPreviewing: false\n  /**\n   * The content before the diff view was applied\n   */\n  previousContent: null\n  /**\n   * The change tracking transform that was applied\n   * It is currently empty because the diff view is not active\n   */\n  diffs: DiffSet\n  /**\n   * The change tracking transform that was applied\n   */\n  tr: null\n}\n\nexport type SnapshotCompareStorageActive = {\n  /**\n   * Whether the diff view is currently active\n   */\n  isPreviewing: true\n  /**\n   * The content before the diff view was applied\n   */\n  previousContent: JSONContent\n  /**\n   * The change tracking transform that was applied\n   */\n  diffs: DiffSet\n  /**\n   * The change tracking transform that was applied\n   */\n  tr: ChangeTrackingTransform\n}\n\nexport type SnapshotCompareStorage = SnapshotCompareStorageInactive | SnapshotCompareStorageActive\n```\n\n----------------------------------------\n\nTITLE: Configuring Image Inline Rendering in Tiptap\nDESCRIPTION: Sets the inline option to true, which renders the image node inline within text (like in a paragraph) rather than as a block-level element.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/nodes/image.mdx#2025-04-19_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nImage.configure({\n  inline: true,\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Version Previews with Tiptap History\nDESCRIPTION: JavaScript code showing how to implement version previews by setting up a content watcher that updates the editor when preview content is received.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/collaboration/documents/history.mdx#2025-04-19_snippet_10\n\nLANGUAGE: js\nCODE:\n```\n// Import the getPreviewContentFromVersionPayload helper function (refer to details below)\nimport { watchPreviewContent } from '@tiptap-pro/extension-collaboration-history'\n\n// Configure the provider\nconst provider = new TiptapCollabProvider({ ... })\n\n// Use the watchPreviewContent util function to watch for content changes on the provider\nconst unbindWatchContent = watchPreviewContent(provider, content => {\n  // set your editors content\n  editor.commands.setContent(content)\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Heading Command\nDESCRIPTION: Command to create a heading node with a specified level.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/nodes/heading.mdx#2025-04-19_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\neditor.commands.setHeading({ level: 1 })\n```\n\n----------------------------------------\n\nTITLE: Customizing FloatingMenu Visibility Logic\nDESCRIPTION: Example of how to customize the logic for when the floating menu should be displayed using the shouldShow option.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/functionality/floatingmenu.mdx#2025-04-19_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nFloatingMenu.configure({\n  shouldShow: ({ editor, view, state, oldState }) => {\n    // show the floating within any paragraph\n    return editor.isActive('paragraph')\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Legacy Wrapping for Tiptap Comments\nDESCRIPTION: This snippet shows how to configure the wrapping mechanism for multi-line comments in Tiptap. It allows switching between legacy and new wrapping behaviors, with a warning about potential compatibility issues when changing from legacy to new wrapping.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/comments/core-concepts/configure.mdx#2025-04-19_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nComments.configure({\n  // enable new flexible block wrapping\n  useLegacyWrapping: false,\n})\n```\n\n----------------------------------------\n\nTITLE: Using toggleWrap Command in Tiptap Editor (JavaScript)\nDESCRIPTION: This snippet demonstrates how to use the toggleWrap command to wrap the current selection with a heading node. The command takes two parameters: the node type and an optional attributes object.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/api/commands/nodes-and-marks/toggle-wrap.mdx#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// toggle wrap the current selection with a heading node\neditor.commands.toggleWrap('heading', { level: 1 })\n```\n\n----------------------------------------\n\nTITLE: Toggling Highlight with Tiptap Editor Commands\nDESCRIPTION: Examples of using Tiptap Editor commands to toggle text highlights, including specifying a custom color.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/marks/highlight.mdx#2025-04-19_snippet_4\n\nLANGUAGE: js\nCODE:\n```\neditor.commands.toggleHighlight()\neditor.commands.toggleHighlight({ color: '#ffcc00' })\n```\n\n----------------------------------------\n\nTITLE: Using joinDown Command in Tiptap Editor\nDESCRIPTION: The joinDown command merges the selected block or the closest ancestor block of a text selection with the sibling element below it. This is useful for combining adjacent blocks of content.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/api/commands/nodes-and-marks/join-down.mdx#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\neditor.commands.joinDown()\n```\n\n----------------------------------------\n\nTITLE: Removing Bold Mark Command\nDESCRIPTION: Command to remove bold formatting from selected text\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/marks/bold.mdx#2025-04-19_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\neditor.commands.unsetBold()\n```\n\n----------------------------------------\n\nTITLE: Using Word Count Storage Methods\nDESCRIPTION: Examples of accessing word count storage methods to get word counts for the document or specific nodes.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/functionality/character-count.mdx#2025-04-19_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\neditor.storage.characterCount.words()\n\n// Get the number of words for a specific node.\neditor.storage.characterCount.words({ node: someCustomNode })\n```\n\n----------------------------------------\n\nTITLE: Specifying Node Types for UniqueID\nDESCRIPTION: Configuration example showing how to specify which node types should receive unique IDs.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/functionality/uniqueid.mdx#2025-04-19_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nUniqueID.configure({\n  types: ['heading', 'paragraph'],\n})\n```\n\n----------------------------------------\n\nTITLE: Filtering AI Suggestions for Locked Content in Tiptap\nDESCRIPTION: This TypeScript code demonstrates how to configure the AiSuggestion extension in Tiptap to filter out suggestions that modify locked content. It uses a custom resolver and a filter function to remove suggestions applied to specific document positions.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/content-ai/capabilities/suggestion/features/lock-content.mdx#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nAiSuggestion.configure({\n  async resolver({ defaultResolver, ...options }) {\n    // Load suggestions\n    const suggestions = await defaultResolver(options)\n    // Remove suggestions that modify the locked content\n    const filteredSuggestions = filterSuggestions(suggestions)\n    return filteredSuggestions\n  },\n})\n\n// Filter function that removes the suggestions that modify the content in positions between 10 and 20.\nfunction filterSuggestions(suggestions) {\n  return suggestions.filter(\n    (suggestion) => suggestion.deleteRange.from > 20 || suggestion.deleteRange.to < 10,\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing HTML in Tiptap Bold Extension\nDESCRIPTION: Demonstrates how to configure the parseHTML function for the Bold mark extension in Tiptap. It includes rules for parsing <strong>, <b>, and inline style font-weight.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/custom-extensions/extend-existing.mdx#2025-04-19_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nparseHTML() {\n  return [\n    // <strong>\n    {\n      tag: 'strong',\n    },\n    // <b>\n    {\n      tag: 'b',\n      getAttrs: node => node.style.fontWeight !== 'normal' && null,\n    },\n    // <span style=\"font-weight: bold\"> and <span style=\"font-weight: 700\">\n    {\n      style: 'font-weight',\n      getAttrs: value => /^(bold(er)?|[5-9]\\d{2,})$/.test(value as string) && null,\n    },\n  ]\n},\n```\n\n----------------------------------------\n\nTITLE: Accessing Next Node Position in Tiptap\nDESCRIPTION: Returns the NodePos after the current NodePosition. Returns null if there is no subsequent node position.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/api/node-positions.mdx#2025-04-19_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst after = myNodePos.after\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Plugin Key\nDESCRIPTION: Example showing how to set a custom plugin key for the DragHandle component when using multiple instances.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/functionality/drag-handle-react.mdx#2025-04-19_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<DragHandle pluginKey=\"myCustomDragHandle\">\n  <div>Drag Me!</div>\n</DragHandle>\n```\n\n----------------------------------------\n\nTITLE: Manually Receiving and Rendering Threads in Tiptap Editor (JavaScript)\nDESCRIPTION: Illustrates how to manually receive and render threads using provider.getThreads(). It also demonstrates how to watch for changes using provider.watchThreads and provider.unwatchThreads functions.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/comments/core-concepts/manage-threads.mdx#2025-04-19_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nlet threads = []\n\nconst getThreads = () => {\n  threads = provider.getThreads()\n}\n\ngetThreads()\n\nprovider.watchThreads(getThreads)\n\n// To unwatch:\n// provider.unwatchThreads(getThreads)\n```\n\n----------------------------------------\n\nTITLE: API Request for Tiptap Semantic Search\nDESCRIPTION: A curl command example for performing a semantic search against the Tiptap Collaboration API. The request requires an authorization header with a secret key from the settings area and includes the search terms in the request body.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/collaboration/documents/semantic-search.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://YOUR_APP_ID.collab.tiptap.cloud/api/search \\\n  -H \"Authorization: YOUR_SECRET_FROM_SETTINGS_AREA\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"content\": \"Your search terms\"}'\n```\n\n----------------------------------------\n\nTITLE: Disabling Paste Rules in Tiptap Editor\nDESCRIPTION: This snippet demonstrates how to disable all paste rules in the Tiptap Editor using the 'enablePasteRules' property.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/api/editor.mdx#2025-04-19_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Editor } from '@tiptap/core'\nimport StarterKit from '@tiptap/starter-kit'\n\nnew Editor({\n  content: `<p>Example Text</p>`,\n  extensions: [StarterKit],\n  enablePasteRules: false,\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing Tiptap Editor with JSON Content\nDESCRIPTION: Shows how to create a new Editor instance with initial JSON content structure.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/guides/output-json-html.mdx#2025-04-19_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nnew Editor({\n  content: {\n    type: 'doc',\n    content: [\n      // ‚Ä¶\n    ],\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Converting HTML to Tiptap JSON Document in PHP\nDESCRIPTION: This PHP code demonstrates how to use the Tiptap Editor class to convert an HTML string into a Tiptap-compatible JSON document structure.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/api/utilities/tiptap-for-php.mdx#2025-04-19_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n(new Tiptap\\Editor)\n    ->setContent('<p>Example Text</p>')\n    ->getDocument();\n\n// Returns:\n// ['type' => 'doc', 'content' => ‚Ä¶]\n```\n\n----------------------------------------\n\nTITLE: Enabling Base64 Image Support in Tiptap\nDESCRIPTION: Configures the Image extension to allow base64-encoded images to be parsed and displayed.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/nodes/image.mdx#2025-04-19_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nImage.configure({\n  allowBase64: true,\n})\n```\n\n----------------------------------------\n\nTITLE: Rendering Suggestions in External UI\nDESCRIPTION: Example of accessing and rendering suggestions outside the editor using React.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/content-ai/capabilities/suggestion/features/display-suggestions.mdx#2025-04-19_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n// Get the suggestions from the Editor state.\nconst storage = editor.extensionStorage.aiSuggestion\nconst suggestions = storage.getSuggestions()\n\n// Render the suggestions in the UI\nreturn (\n  <div>\n    {suggestions.map((suggestion) => (\n      <div key={suggestion.id}>\n        <p>{suggestion.deleteText}</p>\n        <ul>\n          {suggestion.replacementOptions.map((option) => (\n            <li key={option.id}>{option.addText}</li>\n          ))}\n        </ul>\n      </div>\n    ))}\n  </div>\n)\n```\n\n----------------------------------------\n\nTITLE: Monitoring Document Sync Status with Tiptap Collaboration Provider in TSX\nDESCRIPTION: Demonstrates using the synced event to notify users when a document has been fully synchronized with the server initially.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/collaboration/provider/events.mdx#2025-04-19_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nprovider.on('synced', () => {\n  alert('Document initialized')\n})\n```\n\n----------------------------------------\n\nTITLE: Custom Text Counter Implementation\nDESCRIPTION: Example of implementing a custom text counter function using Intl.Segmenter for more accurate character counting.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/functionality/character-count.mdx#2025-04-19_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nCharacterCount.configure({\n  textCounter: (text) => [...new Intl.Segmenter().segment(text)].length,\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Mention Deletion Behavior\nDESCRIPTION: Example showing how to configure the deletion behavior of mention triggers using backspace.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/nodes/mention.mdx#2025-04-19_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nMention.configure({\n  deleteTriggerWithBackspace: true\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring FloatingMenus with ProseMirror PluginKeys\nDESCRIPTION: Example of how to use ProseMirror PluginKey objects to configure multiple floating menus in a Tiptap editor.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/functionality/floatingmenu.mdx#2025-04-19_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Editor } from '@tiptap/core'\nimport FloatingMenu from '@tiptap/extension-floating-menu'\nimport { PluginKey } from '@tiptap/pm/state'\n\nnew Editor({\n  extensions: [\n    FloatingMenu.configure({\n      pluginKey: new PluginKey('floatingMenuOne'),\n      element: document.querySelector('.menu-one'),\n    }),\n    FloatingMenu.configure({\n      pluginKey: new PluginKey('floatingMenuOne'),\n      element: document.querySelector('.menu-two'),\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Checking for Active Highlight Mark in Tiptap\nDESCRIPTION: JavaScript examples showing how to use the isActive method to check if a highlight mark is applied to the current selection, with different ways to check for attributes.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/getting-started/style-editor/custom-menus.mdx#2025-04-19_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\neditor.isActive('highlight')\n```\n\n----------------------------------------\n\nTITLE: Using unsetMark Command in Tiptap Editor - JavaScript\nDESCRIPTION: Examples showing how to use the unsetMark command to remove marks from text selections. The first example removes a bold mark from the current selection, while the second example removes a bold mark across the entire selection range using the extendEmptyMarkRange option.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/api/commands/nodes-and-marks/unset-mark.mdx#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// removes a bold mark\neditor.commands.unsetMark('bold')\n\n// removes a bold mark across the current selection\neditor.commands.unsetMark('bold', { extendEmptyMarkRange: true })\n```\n\n----------------------------------------\n\nTITLE: Color-coding Diffs Based on User\nDESCRIPTION: TypeScript example showing how to use the hydrateUserData option to color-code diffs based on the user who made the changes.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/collaboration/documents/snapshot-compare.mdx#2025-04-19_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst colorMapping = new Map([\n  ['user-1', '#ff0000'],\n  ['user-2', '#00ff00'],\n  ['user-3', '#0000ff'],\n])\n\neditor.chain().compareVersions({\n  fromVersion: 1,\n  toVersion: 3,\n  hydrateUserData: ({ userId }) => {\n    return {\n      color: {\n        backgroundColor: colorMapping.get(userId),\n      },\n    }\n  },\n})\n\neditor.storage.snapshotCompare.diffs[0].attribution.color.backgroundColor // '#ff0000'\n```\n\n----------------------------------------\n\nTITLE: Setting HTML Content in Tiptap Editor\nDESCRIPTION: Demonstrates how to update editor content with HTML using commands API.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/guides/output-json-html.mdx#2025-04-19_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\neditor.commands.setContent(`<p>Example Text</p>`)\n```\n\n----------------------------------------\n\nTITLE: Setting HardBreak in Tiptap Editor\nDESCRIPTION: JavaScript code to add a line break using the setHardBreak command in the Tiptap editor.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/nodes/hard-break.mdx#2025-04-19_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\neditor.commands.setHardBreak()\n```\n\n----------------------------------------\n\nTITLE: Reverting with Backup in Tiptap History\nDESCRIPTION: JavaScript code showing how to revert to a specific version while creating both a backup of the current state and a named version for the restored content.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/collaboration/documents/history.mdx#2025-04-19_snippet_9\n\nLANGUAGE: js\nCODE:\n```\neditor.commands.revertToVersion(4, 'Revert to version', 'Unversioned changes before revert')\n```\n\n----------------------------------------\n\nTITLE: Using Try Commands in Tiptap\nDESCRIPTION: Shows how to use the first() method to try multiple commands and execute only the first successful one.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/api/commands/index.mdx#2025-04-19_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\neditor.commands.first(({ commands }) => [\n  () => commands.undoInputRule(),\n  () => commands.deleteSelection(),\n  // ‚Ä¶\n])\n```\n\n----------------------------------------\n\nTITLE: Configuring Mention HTML Rendering\nDESCRIPTION: Example demonstrating how to customize the HTML rendering of mentions, including changing the element type.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/nodes/mention.mdx#2025-04-19_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nMention.configure({\n  renderHTML({ options, node }) {\n    return [\n      'a',\n      mergeAttributes({ href: '/profile/1' }, options.HTMLAttributes),\n      `${options.suggestion.char}${node.attrs.label ?? node.attrs.id}`,\n    ]\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring HTML Attributes\nDESCRIPTION: Adding custom HTML attributes to rendered link elements\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/marks/link.mdx#2025-04-19_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nLink.configure({\n  HTMLAttributes: {\n    class: 'my-custom-class',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Toggling Autoversioning in Tiptap History\nDESCRIPTION: JavaScript code demonstrating how to toggle the automatic versioning feature for a document using the toggleVersioning command.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/collaboration/documents/history.mdx#2025-04-19_snippet_6\n\nLANGUAGE: js\nCODE:\n```\neditor.commands.toggleVersioning()\n```\n\n----------------------------------------\n\nTITLE: Configuring Player Interface Language for YouTube Videos\nDESCRIPTION: Sets the player's interface language using ISO 639-1 two-letter language codes.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/nodes/youtube.mdx#2025-04-19_snippet_14\n\nLANGUAGE: js\nCODE:\n```\nYoutube.configure({\n  interfaceLanguage: 'fr',\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Editor Options in Tiptap\nDESCRIPTION: Demonstrates how to modify editor options after initialization, specifically adding a custom CSS class to the editor.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/api/editor.mdx#2025-04-19_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\n// Add a class to an existing editor instance\neditor.setOptions({\n  editorProps: {\n    attributes: {\n      class: 'my-custom-class',\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Thread UI Component in React with Tiptap\nDESCRIPTION: Example of how to use the Thread and ThreadFloating components in a React component with Tiptap editor. It shows the necessary imports, editor configuration with Comments extension, and component rendering.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/ui-components/components/thread.mdx#2025-04-19_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Thread, ThreadFloating } from '@/components/tiptap-ui/thread'\nimport { useEditor, EditorContent } from '@tiptap/react'\nimport { Comments } from '@tiptap-pro/extension-comments'\n\nexport default function MyEditor() {\n  const editor = useEditor({\n    extensions: [\n      // other extensions\n      Comments.configure({\n        // comments configuration\n      }),\n    ],\n  })\n\n  return (\n    <div>\n      <EditorContent editor={editor} />\n      <ThreadFloating editor={editor} />\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring LaTeX Rendering Conditions in Tiptap Mathematics Extension\nDESCRIPTION: JavaScript code to configure when LaTeX decorations should be rendered in the Tiptap Mathematics extension. This example prevents rendering inside code blocks.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/functionality/mathematics.mdx#2025-04-19_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport Mathematics from '@tiptap-pro/extension-mathematics'\n\n// [...]\n\nMathematics.configure({\n  shouldRender: (state, pos, node) => {\n    const $pos = state.doc.resolve(pos)\n    return node.type.name === 'text' && $pos.parent.type.name !== 'codeBlock'\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Default CSS Classes for Tiptap Threads\nDESCRIPTION: Default CSS classes used for styling different types and states of threads in a Tiptap editor.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/comments/core-concepts/style-threads.mdx#2025-04-19_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.tiptap-thread {} // the thread class for any type of thread\n.tiptap-thread--inline {} // the thread class for inline threads\n.tiptap-thread--block {} // the thread class for block threads\n.tiptap-thread--hovered {} // the thread class for hovered threads\n.tiptap-thread--selected {} // the thread class for selected threads\n.tiptap-thread--resolved {} // the thread class for resolved threads\n.tiptap-thread--unresolved {} // the thread class for unresolved threads\n```\n\n----------------------------------------\n\nTITLE: Configuring Character Limit in CharacterCount\nDESCRIPTION: Example of setting a maximum character limit for the editor content using the CharacterCount extension.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/functionality/character-count.mdx#2025-04-19_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nCharacterCount.configure({\n  limit: 240,\n})\n```\n\n----------------------------------------\n\nTITLE: Using clearNodes Command in Tiptap Editor (JavaScript)\nDESCRIPTION: This snippet demonstrates how to use the clearNodes command in a Tiptap editor. The command normalizes all nodes in the document to the default paragraph node. It's useful for resetting node types before applying new ones.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/api/commands/nodes-and-marks/clear-nodes.mdx#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\neditor.commands.clearNodes()\n```\n\n----------------------------------------\n\nTITLE: Handling Content Errors with onContentError Option\nDESCRIPTION: Demonstrates how to handle schema validation errors using the onContentError callback when initializing the editor.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/core-concepts/schema.mdx#2025-04-19_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\nnew Editor({\n  enableContentCheck: true,\n  content: invalidContent,\n  onContentError({ editor, error, disableCollaboration }) {\n    // your handler here\n  },\n  ...options,\n})\n```\n\n----------------------------------------\n\nTITLE: Requesting Version Previews in Tiptap History\nDESCRIPTION: JavaScript code showing how to send stateless requests to preview specific document versions using the TiptapCollabProvider.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/collaboration/documents/history.mdx#2025-04-19_snippet_12\n\nLANGUAGE: js\nCODE:\n```\n// Define a function that sends a version.preview request to the provider\nconst requestVersion = (version) => {\n  provider.sendStateless(\n    JSON.stringify({\n      action: 'version.preview',\n      // Include your version number here\n      version,\n    }),\n  )\n}\n\n// Trigger the request\nrequestVersion(1)\n\n// You can then link this function to button clicks or other UI elements to trigger the request.\n```\n\n----------------------------------------\n\nTITLE: Removing Empty TextStyle Tags in Tiptap\nDESCRIPTION: JavaScript command to remove <span> tags without inline styles using the TextStyle extension.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/marks/text-style.mdx#2025-04-19_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\neditor.command.removeEmptyTextStyle()\n```\n\n----------------------------------------\n\nTITLE: Using SimpleEditor Component in React/Next.js\nDESCRIPTION: Example of how to import and use the SimpleEditor component in a React or Next.js project.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/ui-components/templates/simple-editor.mdx#2025-04-19_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { SimpleEditor } from '@/components/templates/simple/simple-editor'\n\nexport default function Page() {\n  return <SimpleEditor />\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Default HTML Attributes\nDESCRIPTION: Customizing or removing default HTML attributes for links\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/marks/link.mdx#2025-04-19_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nLink.configure({\n  HTMLAttributes: {\n    rel: 'noopener noreferrer',\n    target: null,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Deleting Table Rows\nDESCRIPTION: Command to delete the currently selected row in a table.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/nodes/table.mdx#2025-04-19_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\neditor.commands.deleteRow()\n```\n\n----------------------------------------\n\nTITLE: Creating a Document with JSON Format in Tiptap Collaboration\nDESCRIPTION: Shows how to create a document using JSON format by passing the format parameter and including the document's content in Tiptap JSON format.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/collaboration/documents/rest-api.mdx#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location 'https://YOUR_APP_ID.collab.tiptap.cloud/api/documents/DOCUMENT_NAME?format=json' \\\n--header 'Authorization: YOUR_SECRET_FROM_SETTINGS_AREA' \\\n--header 'Content-Type: application/json' \\\n--data '{\n    \"type\": \"doc\",\n    \"content\": [\n      {\n        \"type\": \"paragraph\",\n        \"content\": [\n          {\n            \"type\": \"text\",\n            \"text\": \"This is your content.\"\n          }\n        ]\n      }\n    ]\n}'\n```\n\n----------------------------------------\n\nTITLE: Using newlineInCode Command in Tiptap Editor (JavaScript)\nDESCRIPTION: This snippet demonstrates how to use the newlineInCode command in Tiptap Editor. The command inserts a new line in the current code block, or replaces the current selection with a newline character if a selection is set.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/api/commands/nodes-and-marks/newline-in-code.mdx#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\neditor.commands.newlineInCode()\n```\n\n----------------------------------------\n\nTITLE: Setting Autofocus in Tiptap Editor\nDESCRIPTION: This code shows how to configure the 'autofocus' property in the Tiptap Editor, which controls whether the cursor automatically focuses on the editor upon initialization.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/api/editor.mdx#2025-04-19_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Editor } from '@tiptap/core'\nimport StarterKit from '@tiptap/starter-kit'\n\nnew Editor({\n  extensions: [StarterKit],\n  autofocus: false,\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Default Text Alignment\nDESCRIPTION: Configuration example for setting the default text alignment value.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/functionality/textalign.mdx#2025-04-19_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nTextAlign.configure({\n  defaultAlignment: 'right',\n})\n```\n\n----------------------------------------\n\nTITLE: Handling Version Created Event in JavaScript\nDESCRIPTION: Shows how to handle the 'version.created' stateless message to access information about newly created versions.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/collaboration/documents/history.mdx#2025-04-19_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nprovider.on('stateless', (data) => {\n  const payload = JSON.parse(data.payload)\n\n  if (payload.action === 'version.created') {\n    const latestVersion = payload.version\n    const currentVersion = payload.version\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Try Commands Inside Custom Commands in Tiptap\nDESCRIPTION: Demonstrates how to use the first() method within a custom command implementation to try multiple commands.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/api/commands/index.mdx#2025-04-19_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nexport default () =>\n  ({ commands }) => {\n    return commands.first([\n      () => commands.undoInputRule(),\n      () => commands.deleteSelection(),\n      // ‚Ä¶\n    ])\n  }\n```\n\n----------------------------------------\n\nTITLE: Configuring Language Class Prefix\nDESCRIPTION: Sets the prefix for language classes applied to code tags\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/nodes/code-block.mdx#2025-04-19_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nCodeBlock.configure({\n  languageClassPrefix: 'language-',\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring FontFamily Extension in JavaScript\nDESCRIPTION: Example of how to configure the FontFamily extension, specifying the types of marks to which the font family attribute should be applied.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/functionality/fontfamily.mdx#2025-04-19_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nFontFamily.configure({\n  types: ['textStyle'],\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Extension Priority\nDESCRIPTION: Demonstrates how to modify an extension's priority to control the order of extension loading.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/custom-extensions/extend-existing.mdx#2025-04-19_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport Link from '@tiptap/extension-link'\n\nconst CustomLink = Link.extend({\n  priority: 1000,\n})\n```\n\n----------------------------------------\n\nTITLE: Enabling Content Checking in Tiptap Editor\nDESCRIPTION: Shows how to enable content checking in Tiptap editor by setting the enableContentCheck option to true during initialization.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/guides/invalid-schema.mdx#2025-04-19_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nnew Editor({\n  enableContentCheck: true,\n  // ... other options\n})\n```\n\n----------------------------------------\n\nTITLE: Toggling Header Columns\nDESCRIPTION: Command to convert the current column to a header column or back.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/nodes/table.mdx#2025-04-19_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\neditor.commands.toggleHeaderColumn()\n```\n\n----------------------------------------\n\nTITLE: Enabling Nested Task Items\nDESCRIPTION: Configuration to allow task items to be nested within each other in Tiptap editor.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/nodes/task-item.mdx#2025-04-19_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nTaskItem.configure({\n  nested: true,\n})\n```\n\n----------------------------------------\n\nTITLE: Custom Word Counter Implementation\nDESCRIPTION: Example of implementing a custom word counter function using regular expressions to count words.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/functionality/character-count.mdx#2025-04-19_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nCharacterCount.configure({\n  wordCounter: (text) => text.split(/\\s+/).filter((word) => word !== '').length,\n})\n```\n\n----------------------------------------\n\nTITLE: Handling Read-Only Task Item Checking\nDESCRIPTION: Example configuration for handling when task items are checked while the editor is in read-only mode, allowing custom behavior for read-only interactions.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/nodes/task-item.mdx#2025-04-19_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nTaskItem.configure({\n  onReadOnlyChecked: (node, checked) => {\n    // do something\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Up Multiple Editors with Y.js Fragments in Tiptap\nDESCRIPTION: Initializes multiple Tiptap editors that share the same Y.Doc instance but edit different fragments (fields) of the document, enabling separation of content sections like title and body.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/guides/naming-documents.mdx#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst ydoc = new Y.Doc()\n\n// Title editor\nconst titleEditor = new Editor({\n  extensions: [\n    Collaboration.configure({\n      document: this.ydoc,\n      field: 'title',\n    }),\n  ],\n})\n\n// Content editor\nconst bodyEditor = new Editor({\n  extensions: [\n    Collaboration.configure({\n      document: this.ydoc,\n      field: 'content',\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Attribute Preservation for OrderedList in Tiptap\nDESCRIPTION: Example showing how to configure the OrderedList extension to keep attributes from previous lines when toggling lists.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/nodes/ordered-list.mdx#2025-04-19_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nOrderedList.configure({\n  keepAttributes: true,\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring the Debounce Timeout for Suggestion Reloading in Tiptap\nDESCRIPTION: Set a custom debounce timeout to control how long the extension waits after user stops typing before reloading suggestions, preventing too frequent API calls.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/content-ai/capabilities/suggestion/features/configure-when-to-load-suggestions.mdx#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nAiSuggestion.configure({\n  debounceTimeout: 1000,\n})\n```\n\n----------------------------------------\n\nTITLE: Using Wildcards for Document Access Authorization in TypeScript\nDESCRIPTION: Creates a JWT that uses wildcards to manage access to groups of documents, such as project-specific document collections. This approach simplifies permission management for documents organized by projects or teams.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/collaboration/getting-started/authenticate.mdx#2025-04-19_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport jsonwebtoken from 'jsonwebtoken'\n\nconst data = {\n  sub: 'your_local_user_identifier',\n  allowedDocumentNames: ['project-alpha/*', 'project-beta/*'],\n}\n\nconst jwt = jsonwebtoken.sign(data, 'your_secret')\n```\n\n----------------------------------------\n\nTITLE: Splitting List Items using Tiptap Editor Command - JavaScript\nDESCRIPTION: Demonstrates how to use the splitListItem command to split a bullet list item into two separate items. The command takes a typeOrName parameter that specifies the type of node to split.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/api/commands/lists/split-list-item.mdx#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\neditor.commands.splitListItem('bulletList')\n```\n\n----------------------------------------\n\nTITLE: Implementing Extension Storage\nDESCRIPTION: Example of adding mutable storage to an extension and accessing it both internally and externally.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/custom-extensions/extend-existing.mdx#2025-04-19_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Extension } from '@tiptap/core'\n\nconst CustomExtension = Extension.create({\n  name: 'customExtension',\n\n  addStorage() {\n    return {\n      awesomeness: 100,\n    }\n  },\n\n  onUpdate() {\n    this.storage.awesomeness += 1\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Tiptap Import Extension in JavaScript\nDESCRIPTION: JavaScript code to configure the Import extension in a Tiptap editor. It demonstrates how to set up the extension with an app ID, JWT token, and optional image upload URL.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/conversion/import-export/markdown/editor-extensions.mdx#2025-04-19_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Import } from '@tiptap-pro/extension-import'\n\nconst editor = new Editor({\n  // ...\n  extensions: [\n    // ...\n    Import.configure({\n      // Your Convert App ID from https://cloud.tiptap.dev/convert-settings\n      appId: 'your-app-id',\n\n      // JWT token you generated\n      token: 'your-jwt',\n\n      // If your markdown includes images, you can provide a URL for image upload\n      imageUploadCallbackUrl: 'https://your-image-upload-url.com',\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Rows After Current Position\nDESCRIPTION: Command to add a new row below the current row in a table.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/nodes/table.mdx#2025-04-19_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\neditor.commands.addRowAfter()\n```\n\n----------------------------------------\n\nTITLE: Implementing Update Callback with Vue\nDESCRIPTION: Example of implementing the onUpdate callback using Vue reactive references\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/functionality/table-of-contents.mdx#2025-04-19_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst anchors = ref([])\n\nTableOfContents.configure({\n  onUpdate: (anchors) => {\n    anchors.value = anchors\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Highlight Extension with Custom HTML Attributes\nDESCRIPTION: Example of configuring the Highlight extension with custom HTML attributes to add a custom class to the rendered HTML tag.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/marks/highlight.mdx#2025-04-19_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nHighlight.configure({\n  HTMLAttributes: {\n    class: 'my-custom-class',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: ExportDocx Method Signature\nDESCRIPTION: TypeScript definition of the exportDocx method showing its parameters, return types, and usage examples.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/conversion/import-export/docx/editor-export.mdx#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n* Export the current document as a .docx file\n*\n* Notes: 'buffer' and 'stream' export types are only available in the server environment\n* as they use the Node Buffer and Stream APIs respectively\n*\n* @param onCompleteExport - Callback function to handle the exported file\n* @param options - Export options\n* @param customNodes - Custom node definitions to ensure proper conversion\n* @param styleOverrides - Custom styles to apply to the exported document\n* @example editor.commands.exportDocx((result) => {}, { exportType: 'buffer' }, [])\n*\n*/\nexportDocx: (options?: ExportDocxOptions) => Promise<string | Buffer<ArrayBufferLike> | Blob | Stream>\n```\n\n----------------------------------------\n\nTITLE: Configuring HTML Attributes for TaskList\nDESCRIPTION: Example of configuring custom HTML attributes for the TaskList extension. This allows adding custom classes or other attributes to the rendered HTML element.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/nodes/task-list.mdx#2025-04-19_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nTaskList.configure({\n  HTMLAttributes: {\n    class: 'my-custom-class',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Parsing Markdown and Streaming into Tiptap Editor\nDESCRIPTION: This example shows how to parse markdown content from a URL and stream it into the Tiptap editor, using the marked library for markdown parsing.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/content-ai/capabilities/generation/text-generation/stream.mdx#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { marked } from 'marked'\n\neditor.commands.streamContent({ from: 0, to: 10 }, async ({ write }) => {\n  const response = await fetch('https://example.com/stream')\n  const reader = response.body?.getReader()\n  const decoder = new TextDecoder('utf-8')\n\n  if (!reader) {\n    throw new Error('Failed to get reader from response body.')\n  }\n\n  while (true) {\n    const { done, value } = await reader.read()\n    if (done) break\n\n    const chunk = decoder.decode(value, { stream: true })\n\n    write({\n      partial: chunk,\n      transform: ({ buffer, partial, editor, defaultTransform }) => {\n        // This will parse the markdown content into an HTML string and insert it into the editor\n        return defaultTransform(marked.parse(buffer))\n      },\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Tiptap Dependencies for Next.js\nDESCRIPTION: npm command to install the necessary Tiptap packages for integration with Next.js, including the React-specific package and the starter kit.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/getting-started/install/nextjs.mdx#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @tiptap/react @tiptap/pm @tiptap/starter-kit\n```\n\n----------------------------------------\n\nTITLE: Setting Tippy.js Options for Drag Handle in JavaScript\nDESCRIPTION: Example of configuring Tippy.js options for the Drag Handle extension. It sets the placement of the tooltip to the left.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/functionality/drag-handle.mdx#2025-04-19_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nDragHandle.configure({\n  tippyOptions: {\n    placement: 'left',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Mark Properties in Tiptap Schema\nDESCRIPTION: This snippet demonstrates various mark configuration options in Tiptap schema, including inclusive, excludes, exitable, group, code, and spanning properties.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/core-concepts/schema.mdx#2025-04-19_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nMark.create({\n  inclusive: false,\n  excludes: 'bold', // or '_' for all marks\n  exitable: true,\n  group: 'basic foobar',\n  code: true,\n  spanning: false,\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Default Language\nDESCRIPTION: Configuration example for setting a default programming language for code blocks.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/nodes/code-block-lowlight.mdx#2025-04-19_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nCodeBlockLowlight.configure({\n  defaultLanguage: 'plaintext',\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Tiptap Editor with Import Extension for DOCX\nDESCRIPTION: TypeScript code demonstrating how to configure the Tiptap editor with the Import extension, including necessary parameters like appId, token, and imageUploadCallbackUrl.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/conversion/import-export/docx/editor-import.mdx#2025-04-19_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\n// Import the Import extension\nimport { Import } from '@tiptap-pro/extension-import'\n\nconst editor = new Editor({\n  extensions: [\n    // Other extensions ...\n    Import.configure({\n      appId: 'your-app-id', // Your Convert App ID (see Tiptap Cloud settings)\n      token: 'your-jwt-token', // JWT for authentication (see Authentication documentation)\n      imageUploadCallbackUrl: 'https://your-image-upload-endpoint.com', // Your upload images endpoint\n    })\n    // Other extensions ...\n  ],\n  // Other editor settings ...\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Subscript Mark in Tiptap Editor using JavaScript\nDESCRIPTION: JavaScript command to set text as subscript in the Tiptap editor.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/marks/subscript.mdx#2025-04-19_snippet_2\n\nLANGUAGE: js\nCODE:\n```\neditor.commands.setSubscript()\n```\n\n----------------------------------------\n\nTITLE: Configuring Focus Extension Class Name in JavaScript\nDESCRIPTION: Example of how to configure the class name used by the Focus extension. This sets the class applied to focused elements to 'focus' instead of the default 'has-focus'.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/functionality/focus.mdx#2025-04-19_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nFocus.configure({\n  className: 'focus',\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a React Hook for Thread Management in Tiptap Editor (JSX)\nDESCRIPTION: Provides a React hook implementation to get threads and keep them updated. This hook can be used to render threads reactively in a React component.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/comments/core-concepts/manage-threads.mdx#2025-04-19_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nconst useThreads = (provider) => {\n  const [threads, setThreads] = useState([])\n\n  useEffect(() => {\n    if (!provider) {\n      return () => null\n    }\n\n    const getThreads = () => {\n      setThreads(provider.getThreads())\n    }\n\n    getThreads()\n\n    provider.watchThreads(getThreads)\n\n    return () => {\n      provider.unwatchThreads(getThreads)\n    }\n  }, [provider])\n\n  return threads\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Placeholder Configuration\nDESCRIPTION: JavaScript configuration using a function to set different placeholder text based on node type.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/functionality/placeholder.mdx#2025-04-19_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nPlaceholder.configure({\n  placeholder: ({ node }) => {\n    if (node.type.name === 'heading') {\n      return 'What's the title?'\n    }\n\n    return 'Can you add some further context?'\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Displaying Diffs with showDiff Command\nDESCRIPTION: TypeScript example showing how to use the showDiff command to display differences within the editor using a change tracking transform.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/collaboration/documents/snapshot-compare.mdx#2025-04-19_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// This will display the changes that change tracking transform recorded in the editor\neditor.commands.showDiff(tr)\n```\n\n----------------------------------------\n\nTITLE: Customizing Diff Decorations with mapDiffToDecorations\nDESCRIPTION: TypeScript example showing how to customize the appearance of diff decorations using the mapDiffToDecorations option, applying custom background colors to inline inserts.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/collaboration/documents/snapshot-compare.mdx#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nSnapshotCompare.configure({\n  mapDiffToDecorations: ({ diff, tr, editor, defaultMapDiffToDecorations }) => {\n    if (diff.type === 'inline-insert') {\n      // return prosemirror decoration(s) or null\n      return Decoration.inline(\n        diff.from,\n        diff.to,\n        {\n          class: 'diff',\n          style: {\n            backgroundColor: diff.attribution.color.backgroundColor,\n          },\n        },\n        // pass the diff as the decoration's spec, this is required for `extractAttributeChanges`\n        { diff },\n      )\n    }\n\n    // fallback to the default mapping\n    return defaultMapDiffToDecorations({\n      diff,\n      tr,\n      editor,\n      attributes: {\n        // add custom attributes to the decorations\n        'data-tiptap-user-id': myUserIdMapping[diff.attribution.userId],\n      },\n    })\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Arrow Down Exit Behavior\nDESCRIPTION: Controls whether the code block should be exited when pressing arrow down at the end\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/nodes/code-block.mdx#2025-04-19_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nCodeBlock.configure({\n  exitOnArrowDown: false,\n})\n```\n\n----------------------------------------\n\nTITLE: Resolving and Unresolving Threads in Tiptap Editor (JavaScript)\nDESCRIPTION: Shows how to resolve and unresolve threads using the resolveThread and unresolveThread commands.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/comments/core-concepts/manage-threads.mdx#2025-04-19_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// Resolve a thread\neditor.commands.resolveThread({\n  id: '123',\n})\n\n// Unresolve a thread\neditor.commands.unresolveThread({\n  id: '123',\n})\n```\n\n----------------------------------------\n\nTITLE: Deleting Nodes with deleteNode Command in Tiptap (JavaScript)\nDESCRIPTION: This snippet demonstrates how to use the deleteNode command in Tiptap to remove specific nodes from the document. It shows examples of deleting both built-in and custom node types. The command requires a typeOrName parameter, which can be a string or a NodeType.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/api/commands/nodes-and-marks/delete-node.mdx#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// deletes a paragraph node\neditor.commands.deleteNode('paragraph')\n\n// or\n\n// deletes a custom node\neditor.commands.deleteNode(MyCustomNode)\n```\n\n----------------------------------------\n\nTITLE: Setting Code Mark in Tiptap Editor using JavaScript\nDESCRIPTION: Command to mark text as inline code in Tiptap Editor.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/marks/code.mdx#2025-04-19_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\neditor.commands.setCode()\n```\n\n----------------------------------------\n\nTITLE: Using setParagraph Command in Tiptap\nDESCRIPTION: Example of how to use the setParagraph command to transform selected nodes to paragraphs.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/nodes/paragraph.mdx#2025-04-19_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\neditor.commands.setParagraph()\n```\n\n----------------------------------------\n\nTITLE: Installing Tiptap Toolbar via CLI\nDESCRIPTION: Command to add the Toolbar primitive component using Tiptap CLI for Vite or Next.js projects.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/ui-components/primitives/toolbar.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx @tiptap/cli add toolbar\n```\n\n----------------------------------------\n\nTITLE: Using Regular Expressions with isActive in Tiptap\nDESCRIPTION: JavaScript example showing how to use regular expressions with the isActive method to check for any color attribute in a textStyle mark.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/getting-started/style-editor/custom-menus.mdx#2025-04-19_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\neditor.isActive('textStyle', { color: /.*/ })\n```\n\n----------------------------------------\n\nTITLE: Configuring Details Extension Persistence\nDESCRIPTION: Configuration to enable saving the open status of details elements in the document. Sets the persist option to true.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/nodes/details.mdx#2025-04-19_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nDetails.configure({\n  persist: true,\n})\n```\n\n----------------------------------------\n\nTITLE: Unlocking Drag Handle in Tiptap Editor using JavaScript\nDESCRIPTION: Command to unlock the drag handle and reset it to default visibility and behavior in the Tiptap editor.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/functionality/drag-handle.mdx#2025-04-19_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\neditor.commands.unlockDragHandle()\n```\n\n----------------------------------------\n\nTITLE: Generating Non-AI Proofreading Suggestions in TypeScript\nDESCRIPTION: This code snippet shows how to generate proofreading suggestions without using AI. It implements a custom resolver that replaces the word \"hello\" with \"goodbye\" using simple string manipulation.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/content-ai/capabilities/suggestion/custom-llms.mdx#2025-04-19_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nAiSuggestion.configure({\n  rules: [\n    {\n      id: '1',\n      title: 'Replace hello with goodbye',\n      // The prompt will not be used because we do not use an LLM to generate suggestions for this rule\n      prompt: 'Replace hello with goodbye',\n      color: '#DC143C',\n      backgroundColor: 'FFE6E6',\n    },\n  ],\n  async resolver({ defaultResolver, ...options }) {\n    const suggestions = await defaultResolver({\n      ...options,\n      apiResolver: async ({ html, rules }) => {\n        // Generate the response without needing to call an LLM\n        return {\n          format: 'fullHtml',\n          content: {\n            items: [\n              {\n                ruleId: '1',\n                // return the new document html after replacing \"hello\" with \"goodbye\"\n                fullHtml: html.replaceAll('hello', 'goodbye'),\n              },\n            ],\n          },\n        }\n      },\n    })\n\n    return suggestions\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Wrapping Tiptap Commands in Custom Commands\nDESCRIPTION: Shows how to wrap an existing Tiptap command in a custom command implementation.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/api/commands/index.mdx#2025-04-19_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\naddCommands() {\n  return {\n    bold: () => ({ commands }) => {\n      return commands.toggleMark('bold')\n    },\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using before and after slots with EditorProvider\nDESCRIPTION: Example of how to use slotBefore and slotAfter props with EditorProvider to add custom components before and after the editor content.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/getting-started/install/react.mdx#2025-04-19_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n<EditorProvider\n  extensions={extensions}\n  content={content}\n  slotBefore={<MyEditorToolbar />}\n  slotAfter={<MyEditorFooter />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Installing DetailsSummary Extension for Tiptap\nDESCRIPTION: Command to install the DetailsSummary extension from Tiptap's private repository. Requires a Tiptap account and access to the private repository.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/nodes/details-summary.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @tiptap-pro/extension-details-summary\n```\n\n----------------------------------------\n\nTITLE: Non-editable Text Node View Structure - HTML\nDESCRIPTION: Example showing the DOM structure of a non-editable text node view with contenteditable=false attribute, useful for mentions or other static content.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/custom-extensions/node-views/index.mdx#2025-04-19_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"Prosemirror\" contenteditable=\"true\">\n  <p>text</p>\n  <node-view contenteditable=\"false\">text</node-view>\n  <p>text</p>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using selectNodeForward Command in Tiptap Editor\nDESCRIPTION: Example showing how to use the selectNodeForward command to select the node after the current textblock when the selection is empty and at the end of a textblock.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/api/commands/selection/select-node-forward.mdx#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\neditor.commands.selectNodeForward()\n```\n\n----------------------------------------\n\nTITLE: Deleting a Comment Thread\nDESCRIPTION: DELETE request to remove a specific thread from a document, which also deletes all nested comments within that thread. Requires thread and document identifiers.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/comments/integrate/rest-api.mdx#2025-04-19_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nDELETE /api/documents/:identifier/threads/:threadIdentifier\n```\n\n----------------------------------------\n\nTITLE: Setting End Time for YouTube Videos\nDESCRIPTION: Specifies the time in seconds from the video start when the player should stop playing.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/nodes/youtube.mdx#2025-04-19_snippet_13\n\nLANGUAGE: js\nCODE:\n```\nYoutube.configure({\n  endTime: '15',\n})\n```\n\n----------------------------------------\n\nTITLE: Handling Connection Status Changes with Tiptap Collaboration Provider in TSX\nDESCRIPTION: Example showing how to use connect and disconnect events to update the UI with the current connection status, enhancing user experience.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/collaboration/provider/events.mdx#2025-04-19_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nprovider.on('connect', () => {\n  showStatus('Connected')\n})\n\nprovider.on('disconnect', () => {\n  showStatus('Disconnected')\n})\n```\n\n----------------------------------------\n\nTITLE: Customizing Index Generation\nDESCRIPTION: Example showing how to customize the index generation for table of contents items\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/functionality/table-of-contents.mdx#2025-04-19_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nTableOfContents.configure({\n  getIndex: (anchor, previousAnchors, level) => {\n    // do some custom logic, but for this example we will just return 1\n    return 1\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Fetching a Yjs Document with Node-Fetch in Tiptap Collaboration\nDESCRIPTION: Shows how to fetch a document in Yjs format using node-fetch, converting the response to an array buffer, and applying the update to a Yjs document.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/collaboration/documents/rest-api.mdx#2025-04-19_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as Y from 'yjs'\n\nconst ydoc = new Y.Doc()\n\nconst fetchResult = await fetch(\n  'https://YOUR_APP_ID.collab.tiptap.cloud/api/documents/DOCUMENT_NAME?format=yjs',\n  {\n    headers: {\n      Authorization: 'YOUR_SECRET_FROM_SETTINGS_AREA',\n    },\n  },\n)\n\nY.applyUpdate(ydoc, Buffer.from(await docUpdateAsBinaryResponse.arrayBuffer()))\n```\n\n----------------------------------------\n\nTITLE: Checking for Text Alignment in Tiptap\nDESCRIPTION: JavaScript example demonstrating how to check if a specific text alignment is active in the current selection using an object parameter with the isActive method.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/getting-started/style-editor/custom-menus.mdx#2025-04-19_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\neditor.isActive({ textAlign: 'right' })\n```\n\n----------------------------------------\n\nTITLE: Configuring Bold Extension HTML Attributes\nDESCRIPTION: Example showing how to configure custom HTML attributes for the Bold extension\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/marks/bold.mdx#2025-04-19_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nBold.configure({\n  HTMLAttributes: {\n    class: 'my-custom-class',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Default Protocol\nDESCRIPTION: Configuration for setting the default protocol for auto-generated links\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/marks/link.mdx#2025-04-19_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nLink.configure({\n  defaultProtocol: 'https',\n})\n```\n\n----------------------------------------\n\nTITLE: Creating New Version in JavaScript\nDESCRIPTION: Shows how to create a new version with an optional title using the provider's sendStateless method.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/collaboration/documents/history.mdx#2025-04-19_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nthis.options.provider.sendStateless(\n  JSON.stringify({ action: 'version.create', name: 'My custom version' }),\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Highlight with Tiptap Editor Commands\nDESCRIPTION: Examples of using Tiptap Editor commands to set text highlights, including specifying a custom color.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/marks/highlight.mdx#2025-04-19_snippet_3\n\nLANGUAGE: js\nCODE:\n```\neditor.commands.setHighlight()\neditor.commands.setHighlight({ color: '#ffcc00' })\n```\n\n----------------------------------------\n\nTITLE: Using selectParentNode Command in Tiptap Editor\nDESCRIPTION: This command allows you to programmatically select the parent node of the currently selected node in the Tiptap editor. It moves the selection from the current node to its immediate parent node in the document structure.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/api/commands/selection/select-parent-node.mdx#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\neditor.commands.selectParentNode()\n```\n\n----------------------------------------\n\nTITLE: Basic Avatar Component Implementation in React\nDESCRIPTION: Basic usage example showing how to implement the Avatar component with an image and fallback content in a React component.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/ui-components/primitives/avatar.mdx#2025-04-19_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/tiptap-ui-primitive/avatar'\n\nexport default function MyComponent() {\n  return (\n    <Avatar>\n      <AvatarImage src=\"https://via.placeholder.com/150\" alt=\"User avatar\" />\n      <AvatarFallback>JD</AvatarFallback>\n    </Avatar>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Text Alignment Command\nDESCRIPTION: Example of using the setTextAlign command to change text alignment.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/functionality/textalign.mdx#2025-04-19_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\neditor.commands.setTextAlign('right')\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Plugin Key for Drag Handle\nDESCRIPTION: Example of setting a custom plugin key for the Drag Handle component, useful when using multiple drag handles in the same editor.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/functionality/drag-handle-vue.mdx#2025-04-19_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<drag-handle pluginKey=\"myCustomDragHandle\">\n  <div>Drag Me!</div>\n</drag-handle>\n```\n\n----------------------------------------\n\nTITLE: Deleting a Comment from a Thread\nDESCRIPTION: DELETE request to remove a specific comment from a thread. Requires document, thread, and comment identifiers to target the exact comment for deletion.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/comments/integrate/rest-api.mdx#2025-04-19_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nDELETE /api/documents/:identifier/threads/:threadIdentifier/comments/:commentIdentifier\n```\n\n----------------------------------------\n\nTITLE: Handling Selected Suggestions in Tiptap\nDESCRIPTION: Shows how to access and manipulate selected suggestions programmatically.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/content-ai/capabilities/suggestion/features/display-suggestions.mdx#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst storage = editor.extensionStorage.aiSuggestion\nconst selectedSuggestion = storage.getSelectedSuggestion()\n```\n\nLANGUAGE: typescript\nCODE:\n```\neditor.commands.selectAiSuggestion(suggestionId)\n```\n\n----------------------------------------\n\nTITLE: Setting Text Color Command\nDESCRIPTION: Example of using the setColor command to apply a specific font color to selected text.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/functionality/color.mdx#2025-04-19_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\neditor.commands.setColor('#ff0000')\n```\n\n----------------------------------------\n\nTITLE: Initializing Tiptap Project\nDESCRIPTION: Command to initialize a Tiptap project and install dependencies. This sets up the project configuration and adds specified components.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/ui-components/getting-started/cli.mdx#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx @tiptap/cli init\n```\n\n----------------------------------------\n\nTITLE: Toggling Strike Mark in Tiptap Editor\nDESCRIPTION: Command to toggle the strike mark in the Tiptap editor.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/marks/strike.mdx#2025-04-19_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\neditor.commands.toggleStrike()\n```\n\n----------------------------------------\n\nTITLE: Using the joinTextblockForward Command in Tiptap\nDESCRIPTION: This code snippet demonstrates how to use the joinTextblockForward command in a Tiptap editor. The command joins the current textblock to the one after it, but only if the cursor is at the end of a textblock. It's a more limited form of the joinForward command.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/api/commands/nodes-and-marks/join-textblock-forward.mdx#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\neditor.commands.joinTextblockForward()\n```\n\n----------------------------------------\n\nTITLE: Listening for Awareness Changes in Tiptap Collaboration with TypeScript\nDESCRIPTION: Sets up an event listener to track changes in the Awareness states across all connected users. The awarenessChange event provides access to updated states of all users.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/collaboration/core-concepts/awareness.mdx#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Listen for updates to the states of all users\nprovider.on('awarenessChange', ({ states }) => {\n  console.log(states)\n})\n```\n\n----------------------------------------\n\nTITLE: Toggling Drag Handle Lock State in Tiptap Editor using JavaScript\nDESCRIPTION: Command to toggle the lock state of the drag handle in the Tiptap editor.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/functionality/drag-handle.mdx#2025-04-19_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\neditor.commands.toggleDragHandle()\n```\n\n----------------------------------------\n\nTITLE: Example HTML Output with Custom Classes\nDESCRIPTION: Sample HTML output showing how custom classes are rendered in the editor content.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/getting-started/style-editor/index.mdx#2025-04-19_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<h1 class=\"my-custom-heading\">Example Text</h1>\n<p class=\"my-custom-paragraph\">Wow, that's really custom.</p>\n```\n\n----------------------------------------\n\nTITLE: Multiple BubbleMenus Implementation\nDESCRIPTION: Configuration of multiple BubbleMenu instances using unique pluginKeys with string identifiers\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/functionality/bubble-menu.mdx#2025-04-19_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Editor } from '@tiptap/core'\nimport BubbleMenu from '@tiptap/extension-bubble-menu'\n\nnew Editor({\n  extensions: [\n    BubbleMenu.configure({\n      pluginKey: 'bubbleMenuOne',\n      element: document.querySelector('.menu-one'),\n    }),\n    BubbleMenu.configure({\n      pluginKey: 'bubbleMenuTwo',\n      element: document.querySelector('.menu-two'),\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Checking for Specific Highlight Color in Tiptap\nDESCRIPTION: JavaScript example demonstrating how to check if a highlight mark with a specific color attribute is active in the current selection.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/getting-started/style-editor/custom-menus.mdx#2025-04-19_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\neditor.isActive('highlight', { color: '#ffa8a8' })\n```\n\n----------------------------------------\n\nTITLE: Customizing BulletList Extension Keyboard Shortcuts\nDESCRIPTION: Shows how to modify the keyboard shortcut for bullet lists by extending the BulletList extension.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/custom-extensions/extend-existing.mdx#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// 1. Import the extension\nimport BulletList from '@tiptap/extension-bullet-list'\n\n// 2. Overwrite the keyboard shortcuts\nconst CustomBulletList = BulletList.extend({\n  addKeyboardShortcuts() {\n    return {\n      'Mod-l': () => this.editor.commands.toggleBulletList(),\n    }\n  },\n})\n\n// 3. Add the custom extension to your editor\nnew Editor({\n  extensions: [\n    CustomBulletList(),\n    // ‚Ä¶\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Drag Handle Render Function in JavaScript\nDESCRIPTION: Example of configuring the render function for the Drag Handle extension. It creates a custom div element with a CSS class for styling the drag handle.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/functionality/drag-handle.mdx#2025-04-19_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nDragHandle.configure({\n  render: () => {\n    const element = document.createElement('div')\n\n    // Use as a hook for CSS to insert an icon\n    element.classList.add('custom-drag-handle')\n\n    return element\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Filterable Examples Grid with React Components\nDESCRIPTION: This code renders a filterable grid of examples for Tiptap editor. It uses the FilterGrid.Wrapper component to enable filtering by categories like 'Editor' and 'Collaboration', and displays each example as a card with an image, title, description, and relevant tags.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/examples/index.mdx#2025-04-19_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<FilterGrid.Wrapper filters={['Editor', 'Collaboration']}>\n  <CardGrid.Wrapper className=\"sm:grid-cols-3\">\n    <FilterGrid.Item filter=\"Editor\">\n      <CardGrid.Item asChild>\n        <Link href=\"/examples/basics/default-text-editor\">\n          <CardGrid.ItemImage\n            asNextImage\n            src={cardCoverDefaultEditor.src}\n            width={cardCoverDefaultEditor.width}\n            height={cardCoverDefaultEditor.height}\n            alt=\"Image\"\n          />\n          <div>\n            <CardGrid.ItemTitle>Default text editor</CardGrid.ItemTitle>\n            <CardGrid.ItemParagraph>\n              Learn how to create a default text editor with Tiptap.\n            </CardGrid.ItemParagraph>\n          </div>\n          <CardGrid.ItemFooter>\n            <Tag>Editor</Tag>\n          </CardGrid.ItemFooter>\n        </Link>\n      </CardGrid.Item>\n    </FilterGrid.Item>\n    <!-- More FilterGrid.Item components -->\n  </CardGrid.Wrapper>\n</FilterGrid.Wrapper>\n```\n\n----------------------------------------\n\nTITLE: Configuring ID Generation\nDESCRIPTION: Example of customizing ID generation for table of contents entries using content-based slugs\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/functionality/table-of-contents.mdx#2025-04-19_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nTableOfContents.configure({\n  getId: (content) => slugify(content),\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring the ODT Export Extension in Tiptap\nDESCRIPTION: JavaScript code showing how to configure the Export extension with required parameters including appId and JWT token.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/conversion/import-export/odt/editor-extensions.mdx#2025-04-19_snippet_5\n\nLANGUAGE: js\nCODE:\n```\n// Start with importing the extension\nimport { Export } from '@tiptap-pro/extension-export'\n\nconst editor = new Editor({\n  // ...\n  extensions: [\n    // ...\n    Export.configure({\n      // The Convert App-ID from the convert settings page: https://cloud.tiptap.dev/convert-settings\n      appId: 'your-app-id',\n\n      // The JWT token you generated in the previous step\n      token: 'your-jwt',\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Details Command\nDESCRIPTION: Command to wrap selected content in a details node.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/nodes/details.mdx#2025-04-19_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\neditor.commands.setDetails()\n```\n\n----------------------------------------\n\nTITLE: Toggling BulletList in Tiptap Editor\nDESCRIPTION: Command to toggle a bullet list in the Tiptap editor. This can be used programmatically to control the editor's behavior.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/nodes/bullet-list.mdx#2025-04-19_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\neditor.commands.toggleBulletList()\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Thread Classes in Tiptap Editor\nDESCRIPTION: Example of how to configure custom CSS classes for threads in a Tiptap editor using the ThreadsKit extension.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/comments/core-concepts/style-threads.mdx#2025-04-19_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst editor = new Editor({\n  ...\n  extensions: [\n    ...,\n    ThreadsKit.configure({\n      classes: {\n        thread: 'my-thread',\n        threadInline: 'my-thread-inline',\n        threadBlock: 'my-thread-block',\n        threadHovered: 'my-thread-hovered',\n        threadSelected: 'my-thread-selected',\n        threadResolved: 'my-thread-resolved',\n        threadUnresolved: 'my-thread-unresolved',\n      },\n    }),\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Font Family in Tiptap Editor\nDESCRIPTION: JavaScript command to set a specific font family (in this case, 'Inter') as an inline style in the Tiptap editor.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/functionality/fontfamily.mdx#2025-04-19_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\neditor.commands.setFontFamily('Inter')\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Autoversion Interval in Tiptap History\nDESCRIPTION: Typescript code that configures the interval between automatic version creation for document history. This example sets the autoversion interval to 900 seconds (15 minutes).\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/collaboration/documents/history.mdx#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Set the interval (in seconds) between autoversions\nconst ydoc = provider.configuration.document\nydoc.getMap<number>('__tiptapcollab__config').set('intervalSeconds', 900)\n```\n\n----------------------------------------\n\nTITLE: Setting Superscript Mark in Tiptap Editor\nDESCRIPTION: Command to mark text as superscript in the Tiptap editor.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/marks/superscript.mdx#2025-04-19_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\neditor.commands.setSuperscript()\n```\n\n----------------------------------------\n\nTITLE: Reading Current AI Suggestion Context in TypeScript\nDESCRIPTION: This code demonstrates how to access the current value of the AI suggestion context from the editor's extension storage.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/content-ai/capabilities/suggestion/features/provide-llm-context.mdx#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst currentContext = editor.extensionStorage.aiSuggestion.context\n```\n\n----------------------------------------\n\nTITLE: Manipulating List Items Example\nDESCRIPTION: Shows how to select list items and insert new content in a bullet list using NodePos methods.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/api/node-positions.mdx#2025-04-19_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// get a bullet list from your doc\nconst $bulletList = editor.$node('bulletList')\n\n// get all listItems from your bulletList\nconst $listItems = $bulletList.querySelectorAll('listItem')\n\n// get the last listItem\nconst $lastListItem = $listItems[0]\n\n// insert a new listItem after the last one\neditor.commands.insertContentAt($lastListItem.after, '<li>New item</li>')\n```\n\n----------------------------------------\n\nTITLE: Adding Columns in Tables\nDESCRIPTION: Commands to add columns before or after the current column position in a table.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/nodes/table.mdx#2025-04-19_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\neditor.commands.addColumnBefore()\n```\n\n----------------------------------------\n\nTITLE: Rendering Extensions Component with Path Parameter\nDESCRIPTION: This code snippet renders the Extensions component and passes a path parameter to indicate where the extension documentation is located in the content directory.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/overview.mdx#2025-04-19_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Extensions path=\"content/editor/extensions\" />\n```\n\n----------------------------------------\n\nTITLE: Using joinTextblockBackward Command in Tiptap\nDESCRIPTION: Example showing how to use the joinTextblockBackward command to merge the current textblock with the one before it. This command only works when the cursor is positioned at the start of a textblock.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/api/commands/nodes-and-marks/join-textblock-backward.mdx#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\neditor.commands.joinTextblockBackward()\n```\n\n----------------------------------------\n\nTITLE: Accessing First Child Node Position in Tiptap\nDESCRIPTION: Returns the first child NodePos instance of the current NodePosition. Returns null if there are no children.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/api/node-positions.mdx#2025-04-19_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst firstChild = myNodePos.firstChild\n```\n\n----------------------------------------\n\nTITLE: Markdown Table of DOCX Integration Methods\nDESCRIPTION: A structured table showing different methods for DOCX integration with Tiptap, including Editor Import, Editor Export, REST API, and Custom nodes & styles options. Each row describes a different integration method and links to its detailed documentation.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/conversion/import-export/docx/index.mdx#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Method                    | Description                                                                                                                                                                                        | Documentation                                                                                                                                          |\n|---------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|--------------------------------------------------------------------------------------------------------------------------------------------------------|\n| **Editor Import**         | Let users upload `.docx` files directly in the editor (e.g., \"Import DOCX\" button), converting them to Tiptap JSON for editing. This extension makes a request to our REST API for the conversion. | [DOCX Editor import](/conversion/import-export/docx/editor-import)                                                                                     |\n| **Editor Export**         | Provides the functionality to generate `.docx` from Tiptap content. You can use this extension both on client and on server  and it also supports **custom nodes**.                                | [DOCX Editor export](/conversion/import-export/docx/editor-export)                                                                                     |\n| **REST API**              | Ideal for server-side or external `.docx` conversions (batch processing, no in-editor interaction). Sends `.docx` to get Tiptap JSON or vice versa. **Cannot handle custom nodes.**                | [DOCX conversion REST API](/conversion/import-export/docx/rest-api)                                                                                    |\n| **Custom nodes & styles** | If you have custom Tiptap extensions or need deeper style control, you can override defaults or provide custom renderers for `.docx` output.                                                       | [Export styles for DOCX](/conversion/import-export/docx/export-styles), [Custom nodes for DOCX](/conversion/import-export/docx/custom-node-conversion) |\n```\n\n----------------------------------------\n\nTITLE: Toggling TaskList with Editor Commands\nDESCRIPTION: Example of using the editor command to toggle a task list. This command can be called programmatically to enable or disable a task list at the current selection.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/nodes/task-list.mdx#2025-04-19_snippet_3\n\nLANGUAGE: js\nCODE:\n```\neditor.commands.toggleTaskList()\n```\n\n----------------------------------------\n\nTITLE: Customizing Suggestion Decorations in Tiptap\nDESCRIPTION: Example of customizing suggestion decorations using Prosemirror Decorations API\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/content-ai/capabilities/suggestion/configure.mdx#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nAiSuggestion.configure({\n  getCustomSuggestionDecoration({ suggestion, isSelected, getDefaultDecorations }) {\n    // You can combine the default decorations of the AI Suggestion extension with your custom ones\n    const decorations = getDefaultDecorations()\n\n    // Add a custom element before the suggestion text\n    Decoration.widget(suggestion.deleteRange.from, () => {\n      const element = document.createElement('span')\n      element.textContent = '‚ö†Ô∏è'\n      return element\n    })\n    return decorations\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring KaTeX Options in Tiptap Mathematics Extension\nDESCRIPTION: JavaScript code showing how to configure KaTeX options for the Tiptap Mathematics extension. This example sets the maxSize option for KaTeX rendering.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/functionality/mathematics.mdx#2025-04-19_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport Mathematics from '@tiptap-pro/extension-mathematics'\n\n// [...]\n\nMathematics.configure({\n  katexOptions: {\n    maxSize: 300,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Unsetting Code Mark in Tiptap Editor using JavaScript\nDESCRIPTION: Command to remove inline code mark in Tiptap Editor.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/marks/code.mdx#2025-04-19_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\neditor.commands.unsetCode()\n```\n\n----------------------------------------\n\nTITLE: Updating Node Attributes with PATCH Request in Bash\nDESCRIPTION: This curl command shows how to update only the attributes of a specific node using the PATCH method. It uses the 'mode=attrs' query parameter and specifies the node to update using 'nodeAttributeName' and 'nodeAttributeValue'.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/collaboration/documents/content-injection.mdx#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location --request PATCH '/api/documents/:identifier?format=json&nodeAttributeName=id&nodeAttributeValue=12&mode=attrs' \\\n--data '{\n  \"indent\": 12,\n  \"textAlign\": \"right\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Configuring UniqueID Attribute Name\nDESCRIPTION: Example showing how to configure the attribute name used for the unique ID in HTML tags.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/functionality/uniqueid.mdx#2025-04-19_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nUniqueID.configure({\n  attributeName: 'uid',\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Closed Captions Language for YouTube Videos\nDESCRIPTION: Specifies the default language for closed captions using ISO 639-1 language codes.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/nodes/youtube.mdx#2025-04-19_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nYoutube.configure({\n  ccLanguage: 'es',\n})\n```\n\n----------------------------------------\n\nTITLE: Toggling Blockquote Command in Tiptap\nDESCRIPTION: Command to toggle (wrap or unwrap) a blockquote.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/nodes/blockquote.mdx#2025-04-19_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\neditor.commands.toggleBlockquote()\n```\n\n----------------------------------------\n\nTITLE: Configuring Mark Preservation for OrderedList in Tiptap\nDESCRIPTION: Example showing how to configure the OrderedList extension to keep marks from previous lines when toggling lists.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/nodes/ordered-list.mdx#2025-04-19_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nOrderedList.configure({\n  keepMarks: true,\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a New Comment Thread\nDESCRIPTION: POST request to create a new thread within a document. Allows specifying initial content and additional metadata in the request body.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/comments/integrate/rest-api.mdx#2025-04-19_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nPOST /api/documents/:identifier/threads\n```\n\n----------------------------------------\n\nTITLE: Executing Undo Command in Tiptap Editor\nDESCRIPTION: JavaScript code to execute the undo command in the Tiptap editor, reverting the last change.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/functionality/undo-redo.mdx#2025-04-19_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\neditor.commands.undo()\n```\n\n----------------------------------------\n\nTITLE: First Line Placeholder CSS Style\nDESCRIPTION: CSS styling to display a placeholder only for the first line in an empty editor using the data-placeholder attribute.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/functionality/placeholder.mdx#2025-04-19_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.tiptap p.is-editor-empty:first-child::before {\n  color: #adb5bd;\n  content: attr(data-placeholder);\n  float: left;\n  height: 0;\n  pointer-events: none;\n}\n```\n\n----------------------------------------\n\nTITLE: Reverting to a Specific Version by ID in Tiptap History\nDESCRIPTION: JavaScript code showing how to revert a document to a specific version using its ID with the revertToVersion command.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/collaboration/documents/history.mdx#2025-04-19_snippet_7\n\nLANGUAGE: js\nCODE:\n```\neditor.commands.revertToVersion(4)\n```\n\n----------------------------------------\n\nTITLE: Accessing Loading States in Tiptap AI Suggestions\nDESCRIPTION: Shows how to access and handle loading and error states for AI suggestions using the extension storage object.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/content-ai/capabilities/suggestion/features/display-suggestions.mdx#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst storage = editor.extensionStorage.aiSuggestion\nif (storage.isLoading) {\n  // Show a loading spinner\n} else if (storage.error) {\n  // Show an error message.\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Table Columns\nDESCRIPTION: Command to delete the currently selected column in a table.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/nodes/table.mdx#2025-04-19_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\neditor.commands.deleteColumn()\n```\n\n----------------------------------------\n\nTITLE: Installing Tiptap Popover Component via CLI\nDESCRIPTION: Command to add the popover primitive using Tiptap CLI for Vite or Next.js projects.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/ui-components/primitives/popover.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx @tiptap/cli add popover\n```\n\n----------------------------------------\n\nTITLE: Configuring Legacy Export Extension for Tiptap Editor\nDESCRIPTION: This snippet demonstrates how to import and configure the legacy Export extension for Tiptap. It includes setting up the appId and token required for the export functionality.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/guides/legacy-conversion.mdx#2025-04-19_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Start with importing the extension\nimport { Export } from '@tiptap-pro/extension-export'\n\nconst editor = new Editor({\n  // ...\n  extensions: [\n    // ...\n    Export.configure({\n      // The Convert App-ID from the convert settings page: https://cloud.tiptap.dev/convert-settings\n      appId: 'your-app-id',\n\n      // The JWT token you generated in the previous step\n      token: 'your-jwt',\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Underline Mark in Tiptap Editor using JavaScript\nDESCRIPTION: Command to set text as underlined in the Tiptap editor.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/marks/underline.mdx#2025-04-19_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\neditor.commands.setUnderline()\n```\n\n----------------------------------------\n\nTITLE: Configuring ExportDocx Extension with Custom Styles in Typescript\nDESCRIPTION: Example showing how to configure the ExportDocx extension with custom paragraph styles for heading elements. The code demonstrates setting up style overrides with custom font, size, color, and spacing properties.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/conversion/import-export/docx/export-styles.mdx#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Import the ExportDocx extension\nimport { ExportDocx } from '@tiptap-pro/extension-export-docx'\n\nconst editor = new Editor({\n  extensions: [\n    // Other extensions ...\n    ExportDocx.configure({\n      onCompleteExport: (result: string | Buffer<ArrayBufferLike> | Blob | Stream) => {}, // required\n      styleOverrides: { // Style overrides\n        paragraphStyles: [\n          // Heading 1 style override\n          {\n            id: 'Heading1',\n            name: 'Heading 1',\n            basedOn: 'Normal',\n            next: 'Normal',\n            quickFormat: true,\n            run: {\n              font: 'Aptos',\n              size: pointsToHalfPoints(16),\n              bold: true,\n              color: 'FF0000',\n            },\n            paragraph: {\n              spacing: {\n                before: pointsToTwips(12),\n                after: pointsToTwips(6),\n                line: lineHeightToDocx(1.15),\n              },\n            },\n          },\n        ]\n      }\n    }),\n    // Other extensions ...\n  ],\n  // Other editor settings ...\n})\n```\n\n----------------------------------------\n\nTITLE: Enabling No-Cookie Mode for YouTube Embeds\nDESCRIPTION: Enables privacy-enhanced (nocookie) mode for YouTube embeds to improve user privacy.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/nodes/youtube.mdx#2025-04-19_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nYoutube.configure({\n  nocookie: true,\n})\n```\n\n----------------------------------------\n\nTITLE: Using Tiptap StarterKit Extension Bundle\nDESCRIPTION: This snippet shows how to use the StarterKit bundle, which includes commonly used extensions, for a more convenient editor setup.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/getting-started/configure.mdx#2025-04-19_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport StarterKit from '@tiptap/starter-kit'\n\nnew Editor({\n  extensions: [StarterKit],\n})\n```\n\n----------------------------------------\n\nTITLE: Export Tiptap JSON to Markdown via REST API\nDESCRIPTION: cURL command to convert Tiptap JSON content to Markdown format. Requires authentication and accepts JSON payload containing the content and target format specification. Supports both standard Markdown and GitHub Flavored Markdown output.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/conversion/import-export/markdown/rest-api.mdx#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \"https://api.tiptap.dev/v1/export\" \\\n  -H \"Authorization: Bearer <your-jwt-token>\" \\\n  -H \"X-App-Id: <your-app-id>\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"content\":{\"type\":\"doc\",\"content\":[{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"Hello from Tiptap!\"}]}]},\"format\":\"md\"}' \\\n  --output document.md\n```\n\n----------------------------------------\n\nTITLE: Configuring Triple Enter Exit Behavior\nDESCRIPTION: Controls whether the code block should be exited when pressing enter three times\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/nodes/code-block.mdx#2025-04-19_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nCodeBlock.configure({\n  exitOnTripleEnter: false,\n})\n```\n\n----------------------------------------\n\nTITLE: Generating AI Text Without Auto-insertion in Tiptap\nDESCRIPTION: Demonstrates how to generate AI text and store it in the extension without automatically inserting it into the editor. This example shows using the aiTextPrompt command with insert: false option.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/content-ai/capabilities/generation/text-generation/manage-responses.mdx#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst chatMessage = 'Hello, how are you?'\n\neditor\n  .chain()\n  .aiTextPrompt({\n    text: chatMessage,\n    stream: true,\n    insert: false,\n    format: 'rich-text',\n  })\n  .run()\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Class for Open State\nDESCRIPTION: Configuration to specify a custom CSS class name that will be applied when the details element is toggled open.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/nodes/details.mdx#2025-04-19_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nDetails.configure({\n  openClassName: 'is-open',\n})\n```\n\n----------------------------------------\n\nTITLE: Custom List Types Configuration\nDESCRIPTION: Example of configuring the List Keymap extension with custom list types and wrapper names.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/functionality/listkeymap.mdx#2025-04-19_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nListKeymap.configure({\n  listTypes: [\n    {\n      itemName: 'taskItem',\n      wrapperNames: ['customTaskList'],\n    },\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Disabling Default Undo/Redo\nDESCRIPTION: Configuration to disable the default history functionality when using StarterKit to avoid conflicts with collaborative history management.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/collaboration/getting-started/install.mdx#2025-04-19_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\nconst editor = useEditor({\n  extensions: [\n    StarterKit.configure({\n      history: false,\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Dropcursor Width\nDESCRIPTION: Example of configuring the dropcursor width property. Controls the thickness of the cursor line that appears when dragging content.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/functionality/dropcursor.mdx#2025-04-19_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nDropcursor.configure({\n  width: 2,\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Custom NodePos Instances\nDESCRIPTION: Shows how to create a custom NodePos instance using the constructor with a position and editor instance.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/api/node-positions.mdx#2025-04-19_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// You need to have an editor instance\n// and a position you want to map to\nconst myNodePos = new NodePos(100, editor)\n```\n\n----------------------------------------\n\nTITLE: Transforming Content while Streaming into Tiptap Editor\nDESCRIPTION: This example demonstrates how to use the transform function to modify content before streaming it into the Tiptap editor, specifically by converting the text to uppercase.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/content-ai/capabilities/generation/text-generation/stream.mdx#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\neditor.commands.streamContent({ from: 0, to: 10 }, async ({ write }) => {\n  const response = await fetch('https://example.com/stream')\n  const reader = response.body?.getReader()\n  const decoder = new TextDecoder('utf-8')\n\n  if (!reader) {\n    throw new Error('Failed to get reader from response body.')\n  }\n\n  while (true) {\n    const { done, value } = await reader.read()\n    if (done) break\n\n    const chunk = decoder.decode(value, { stream: true })\n\n    write({\n      partial: transformedChunk,\n      transform: ({ buffer, partial, editor, defaultTransform }) => {\n        // This will use the default transform function to take the whole buffer and insert it into the editor as uppercase\n        return defaultTransform(buffer.toUpperCase())\n      },\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Example cURL Request for Creating a Comment\nDESCRIPTION: cURL example for adding a new comment to an existing thread. Requires document ID, thread ID, Authorization header, and JSON payload with comment content and metadata.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/comments/integrate/rest-api.mdx#2025-04-19_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location 'https://YOUR_APP_ID.collab.tiptap.cloud/api/documents/{document_id}/threads/{thread_id}/comments' \\\n--header 'Content-Type: application/json' \\\n--header 'Authorization: {{Authorization}}' \\\n--data '{\n    \"content\": \"test\",\n    \"data\": { \"key\": \"ttt\"}\n}'\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Placeholder Text\nDESCRIPTION: JavaScript configuration to set custom placeholder text using a string value.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/functionality/placeholder.mdx#2025-04-19_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nPlaceholder.configure({\n  placeholder: 'My Custom Placeholder',\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Tiptap Image Upload Node via CLI\nDESCRIPTION: Command to add the image upload node component using Tiptap CLI for Vite or Next.js projects.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/ui-components/node-components/image-upload-node.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx @tiptap/cli add image-upload-node\n```\n\n----------------------------------------\n\nTITLE: Advanced DOCX Import Handling in Tiptap Editor\nDESCRIPTION: JavaScript code demonstrating advanced import handling with error management, content modification, and custom insertion into the Tiptap editor.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/conversion/import-export/docx/editor-import.mdx#2025-04-19_snippet_4\n\nLANGUAGE: js\nCODE:\n```\neditor\n  .chain()\n  .import({\n    file,\n    onImport(context) {\n      const { setEditorContent, content, error } = context\n\n      // Add error handling\n      if (error) {\n        showErrorToast({ message: error.message })\n      }\n\n      // You could also modify the content before inserting it\n      content.doc.content.push({ type: 'paragraph', content: [{ type: 'text', text: 'Hello!' }] })\n\n      // You can change the loading state of your application for example\n      isLoading = false\n\n      // Perform the insertion in the editor\n      editor.commands.setEditorContent(content)\n    },\n  })\n  .focus()\n  .run()\n```\n\n----------------------------------------\n\nTITLE: Toggling Header Cells\nDESCRIPTION: Command to convert the current cell to a header cell or back.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/nodes/table.mdx#2025-04-19_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\neditor.commands.toggleHeaderCell()\n```\n\n----------------------------------------\n\nTITLE: Merging Table Cells\nDESCRIPTION: Command to merge multiple selected cells into a single cell.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/nodes/table.mdx#2025-04-19_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\neditor.commands.mergeCells()\n```\n\n----------------------------------------\n\nTITLE: Deleting a Document with Tiptap Collaboration API using cURL\nDESCRIPTION: This snippet demonstrates how to delete a document from the server using the Tiptap Collaboration API. It sends a DELETE request to remove the specified document after closing any open connections.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/collaboration/documents/rest-api.mdx#2025-04-19_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location --request DELETE 'https://YOUR_APP_ID.collab.tiptap.cloud/api/documents/DOCUMENT_NAME' \\\n--header 'Authorization: YOUR_SECRET_FROM_SETTINGS_AREA'\n```\n\n----------------------------------------\n\nTITLE: Configuring Link Protocols\nDESCRIPTION: Example of configuring custom protocols for the Link extension\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/marks/link.mdx#2025-04-19_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nLink.configure({\n  protocols: ['ftp', 'mailto'],\n})\n```\n\n----------------------------------------\n\nTITLE: Enabling Multicolor Support for Highlight Extension\nDESCRIPTION: Configuration to enable support for multiple colors in the Highlight extension.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/marks/highlight.mdx#2025-04-19_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nHighlight.configure({\n  multicolor: true,\n})\n```\n\n----------------------------------------\n\nTITLE: Document Statistics API Endpoint\nDESCRIPTION: GET endpoint for retrieving statistics about a specific document.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/collaboration/operations/metrics.mdx#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nGET /api/documents/:identifier/statistics\n```\n\n----------------------------------------\n\nTITLE: Configuring Optional Protocol Slashes\nDESCRIPTION: Configuration for custom protocols with optional slashes option\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/marks/link.mdx#2025-04-19_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nLink.configure({\n  protocols: [\n    {\n      scheme: 'tel',\n      optionalSlashes: true,\n    },\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Node HTML Rendering Configuration - JavaScript\nDESCRIPTION: JavaScript configuration for rendering a custom node to HTML output, showing how to set custom attributes and element names.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/custom-extensions/node-views/index.mdx#2025-04-19_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nrenderHTML({ HTMLAttributes }) {\n  return ['my-custom-node', mergeAttributes(HTMLAttributes)]\n},\n```\n\n----------------------------------------\n\nTITLE: Configuring Suggestion Caching\nDESCRIPTION: Examples of configuring the caching behavior for suggestions including chunk size and custom chunking\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/content-ai/capabilities/suggestion/configure.mdx#2025-04-19_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nAiSuggestion.configure({\n  // Disable caching\n  enableCache: false,\n})\n\nAiSuggestion.configure({\n  // Each chunk will contain 3 top-level HTML nodes\n  chunkSize: 3,\n})\n\nAiSuggestion.configure({\n  chunkHtml: customChunkHtmlFunction,\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring InvisibleCharacters Extension in JavaScript\nDESCRIPTION: Examples of configuring the InvisibleCharacters extension, including setting visibility, custom builders, and CSS injection options.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/functionality/invisiblecharacters.mdx#2025-04-19_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nInvisibleCharacters.configure({\n  visible: false,\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport InvisibleCharacters, { SpaceCharacter } from '@tiptap-pro/extension-invisible-characters'\n\n// [...]\n\nInvisibleCharacters.configure({\n  builders: [new SpaceCharacter(), new YourCustomInvisibleCharacter()],\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\nInvisibleCharacters.configure({\n  injectCSS: false,\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\nInvisibleCharacters.configure({\n  injectCSS: false,\n  injectNonce: 'your-nonce-here',\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring HTML Attributes for BulletList in Tiptap\nDESCRIPTION: Example of how to configure custom HTML attributes for the BulletList extension. This allows adding custom classes or other attributes to the rendered HTML tag.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/nodes/bullet-list.mdx#2025-04-19_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nBulletList.configure({\n  HTMLAttributes: {\n    class: 'my-custom-class',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring HTML Attributes for OrderedList in Tiptap\nDESCRIPTION: Example of how to configure custom HTML attributes that will be added to the rendered ordered list HTML tag.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/nodes/ordered-list.mdx#2025-04-19_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nOrderedList.configure({\n  HTMLAttributes: {\n    class: 'my-custom-class',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Tiptap CLI Init Command Options\nDESCRIPTION: Available options for the 'init' command in Tiptap CLI. These options allow you to specify the framework, force overwrite, set working directory, and configure output settings.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/ui-components/getting-started/cli.mdx#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nUsage: @tiptap/cli init [options] [components...]\n\nOptions:\n-f, --framework <framework>   The framework to use (e.g., next, vite)\n-f, --force                   Force overwrite of existing configuration\n-c, --cwd <cwd>               The working directory (defaults to current directory)\n-s, --silent                  Mute output\n--src-dir                     Default: Use the src directory when creating a new project\n--no-src-dir                  Do not use the src directory when creating a new project\n```\n\n----------------------------------------\n\nTITLE: Configuring AiSuggestion with Multiple API Endpoints in TypeScript\nDESCRIPTION: This code snippet demonstrates how to configure the AiSuggestion extension to use multiple API endpoints for different groups of proofreading rules. It splits the rules, sends them to different API endpoints, and merges the results.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/content-ai/capabilities/suggestion/custom-llms.mdx#2025-04-19_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nAiSuggestion.configure({\n  async resolver({ defaultResolver, rules, ...options }) {\n   // Split the rules into two groups\n   const {\n   rulesForFirstApi,\n   rulesForSecondApi,\n  } = splitRules(rules)\n\n  // Send the first group of rules to the first api endpoint\n    const suggestions1 = await defaultResolver({\n      ...options,\n      rules: rulesForFirstApiEndpoint\n      apiResolver: async ({ html, htmlChunks, rules }) => {\n        const response = await firstApi({ html, htmlChunks, rules });\n        return { format: \"replacements\", content: response };\n      },\n    });\n\n    // Send the second group of rules to the second api endpoint\n    const suggestions2 = await defaultResolver({\n      ...options,\n      rules: rulesForSecondApiEndpoint\n      apiResolver: async ({ html, htmlChunks, rules }) => {\n        const response = await secondApi({ html, htmlChunks, rules });\n        return { format: \"fullHtml\", content: response };\n      },\n    });\n\n  // Merge both lists of suggestions\n    return [...suggestions1, ...suggestions2]\n  },\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Comment in a Thread\nDESCRIPTION: POST request to add a new comment to an existing thread. Allows specifying comment content and associated metadata in the request body.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/comments/integrate/rest-api.mdx#2025-04-19_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nPOST /api/documents/:identifier/threads/:threadIdentifier/comments\n```\n\n----------------------------------------\n\nTITLE: Collaborative Features Component in JSX\nDESCRIPTION: React component implementing a features list and call-to-action box for Tiptap's collaboration features. Uses custom CtaBox components and Lucide icons.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/collaboration/getting-started/overview.mdx#2025-04-19_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<CtaBox.Wrapper variant=\"light\">\n  <CtaBox.Title>Collaboration features</CtaBox.Title>\n  <CtaBox.Description>\n    Fasten your seatbelts! Make your rich text editor collaborative with Tiptap Collaboration.\n  </CtaBox.Description>\n  <CtaBox.List>\n    <CtaBox.ListItem>Real-time and offline change merging without conflicts</CtaBox.ListItem>\n    <CtaBox.ListItem>Compatible with various editors</CtaBox.ListItem>\n    <CtaBox.ListItem>Handle multiple documents over one WebSocket connection</CtaBox.ListItem>\n    <CtaBox.ListItem>Integrates with webhooks for change notifications</CtaBox.ListItem>\n    <CtaBox.ListItem>Scales efficiently with Redis for high user volumes</CtaBox.ListItem>\n    <CtaBox.ListItem>Built with TypeScript for type safety and scalability.</CtaBox.ListItem>\n  </CtaBox.List>\n  <CtaBox.Actions className=\"-mx-3\">\n    <Button variant=\"tertiary\" asChild>\n      <Link href=\"https://cloud.tiptap.dev/\">\n        Create free account\n        <ArrowRightIcon className=\"w-4 h-4\" />\n      </Link>\n    </Button>\n  </CtaBox.Actions>\n</CtaBox.Wrapper>\n```\n\n----------------------------------------\n\nTITLE: Accessing Version Data from Tiptap History Storage\nDESCRIPTION: JavaScript code showing how to access version information directly from the editor's storage after setting up the CollabHistory extension.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/collaboration/documents/history.mdx#2025-04-19_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nconst provider = new TiptapCollabProvider({\n  // ...\n})\n\nconst editor = new Editor({\n  // ...\n  extensions: [\n    // ...\n    CollabHistory.configure({\n      provider,\n    }),\n  ],\n})\n\nconst latestVersion = editor.storage.collabHistory.latestVersion\nconst currentVersion = editor.storage.collabHistory.currentVersion\nconst versions = editor.storage.collabHistory.versions\nconst autoversioningEnabled = editor.storage.collabHistory.versioningEnabled\n```\n\n----------------------------------------\n\nTITLE: Installing Tiptap Mention Dropdown Menu Component via CLI\nDESCRIPTION: Command to install the mention dropdown menu component using the Tiptap CLI tool.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/ui-components/components/mention-dropdown-menu.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx @tiptap/cli add mention-dropdown-menu\n```\n\n----------------------------------------\n\nTITLE: Listing Documents in Tiptap Collaboration\nDESCRIPTION: Demonstrates how to retrieve a paginated list of all documents in storage with pagination controls.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/collaboration/documents/rest-api.mdx#2025-04-19_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location 'https://YOUR_APP_ID.collab.tiptap.cloud/api/documents' \\\n--header 'Authorization: YOUR_SECRET_FROM_SETTINGS_AREA'\n```\n\n----------------------------------------\n\nTITLE: Creating a New Manual Version in Tiptap History\nDESCRIPTION: JavaScript code showing how to manually create a new document version with a custom title using the saveVersion command.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/collaboration/documents/history.mdx#2025-04-19_snippet_5\n\nLANGUAGE: js\nCODE:\n```\neditor.commands.saveVersion('My new custom version')\n```\n\n----------------------------------------\n\nTITLE: Configuring HardBreak Extension to Disable Keeping Marks\nDESCRIPTION: JavaScript code to configure the HardBreak extension to not keep marks after a line break.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/nodes/hard-break.mdx#2025-04-19_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nHardBreak.configure({\n  keepMarks: false,\n})\n```\n\n----------------------------------------\n\nTITLE: Fixing Table Structure\nDESCRIPTION: Command to inspect and repair any structural issues in all tables in the document.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/nodes/table.mdx#2025-04-19_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\neditor.commands.fixTables()\n```\n\n----------------------------------------\n\nTITLE: Installing Spacer component via Tiptap CLI\nDESCRIPTION: Command to add the Spacer primitive component via Tiptap CLI. This works for Vite or Next.js projects.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/ui-components/primitives/spacer.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx @tiptap/cli add spacer\n```\n\n----------------------------------------\n\nTITLE: Configuring Tiptap Collaboration with Custom Y.js Fragment\nDESCRIPTION: Shows how to directly use a raw Y.js XML fragment in Tiptap Collaboration, bypassing the standard document and field settings for more complex document structures.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/guides/naming-documents.mdx#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// a raw Y.js fragment\nCollaboration.configure({\n  fragment: ydoc.getXmlFragment('custom'),\n})\n```\n\n----------------------------------------\n\nTITLE: Generating a Basic JWT for Tiptap Collaboration in TypeScript\nDESCRIPTION: This code snippet demonstrates how to generate a basic JWT (JSON Web Token) on a NodeJS server using the jsonwebtoken package. The token is required for authentication with Tiptap Collaboration services.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/guides/authentication.mdx#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport jsonwebtoken from 'jsonwebtoken'\n\nconst jwt = jsonwebtoken.sign(\n  {\n    /* object to be encoded in the JWT */\n  },\n  'your_secret',\n)\n// this JWT should be sent in the `token` field of the provider. Never expose 'your_secret' to a frontend!\n```\n\n----------------------------------------\n\nTITLE: Configuring Blockquote HTML Attributes in Tiptap\nDESCRIPTION: Example of configuring custom HTML attributes for the Blockquote extension, showing how to add custom CSS classes.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/nodes/blockquote.mdx#2025-04-19_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nBlockquote.configure({\n  HTMLAttributes: {\n    class: 'my-custom-class',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: CSS Classes for Styling Tiptap Mathematics Extension\nDESCRIPTION: CSS class selectors for styling the mathematics editor and render containers in Tiptap. These classes allow customization of the appearance of mathematical formulas.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/functionality/mathematics.mdx#2025-04-19_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n/* Decoration containing the actual text */\n.Tiptap-mathematics-editor {\n  // ‚Ä¶\n}\n\n/* Container of the KaTeX rendering */\n.Tiptap-mathematics-render {\n  // ‚Ä¶\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Field for Collaboration Extension\nDESCRIPTION: JavaScript code demonstrating how to set a custom field name for syncing multiple fields with one Y.js document.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/functionality/collaboration.mdx#2025-04-19_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nCollaboration.configure({\n  document: new Y.Doc(),\n  field: 'title',\n})\n```\n\n----------------------------------------\n\nTITLE: Customizing Input Rules in Tiptap Strike Extension\nDESCRIPTION: Demonstrates how to modify input rules for a Tiptap extension. This example changes the strike-through markdown shortcut to use single tildes instead of double tildes.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/custom-extensions/extend-existing.mdx#2025-04-19_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// Use the ~single tilde~ markdown shortcut\nimport Strike from '@tiptap/extension-strike'\nimport { markInputRule } from '@tiptap/core'\n\n// Default:\n// const inputRegex = /(?:^|\\s)((?:~~)((?:[^~]+))(?:~~))$/\n\n// New:\nconst inputRegex = /(?:^|\\s)((?:~)((?:[^~]+))(?:~))$/\n\nconst CustomStrike = Strike.extend({\n  addInputRules() {\n    return [\n      markInputRule({\n        find: inputRegex,\n        type: this.type,\n      }),\n    ]\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring the ODT Import Extension in Tiptap\nDESCRIPTION: JavaScript code showing how to configure the Import extension with required parameters including appId, JWT token, and optional image upload URL.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/conversion/import-export/odt/editor-extensions.mdx#2025-04-19_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n// Start with importing the extension\nimport { Import } from '@tiptap-pro/extension-import'\n\nconst editor = new Editor({\n  // ...\n  extensions: [\n    // ...\n    Import.configure({\n      // The Convert App-ID from the Convert settings page: https://cloud.tiptap.dev/convert-settings\n      appId: 'your-app-id',\n\n      // The JWT token you generated in the previous step\n      token: 'your-jwt',\n\n      // The URL to upload images to, if not provided, images will be stripped from the document\n      imageUploadCallbackUrl: 'https://your-image-upload-url.com',\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Retrieving HTML Content from Tiptap Editor\nDESCRIPTION: Shows how to export editor content as HTML using getHTML() method.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/guides/output-json-html.mdx#2025-04-19_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst html = editor.getHTML()\n```\n\n----------------------------------------\n\nTITLE: Configuring Strike Extension with Custom HTML Attributes\nDESCRIPTION: Example of configuring the Strike extension with custom HTML attributes for the rendered HTML tag.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/marks/strike.mdx#2025-04-19_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nStrike.configure({\n  HTMLAttributes: {\n    class: 'my-custom-class',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Using aiRegenerate Command in Tiptap Content AI\nDESCRIPTION: Demonstrates how to use the aiRegenerate command to retry AI responses. Shows options for controlling where the regenerated content is inserted in the editor.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/content-ai/capabilities/generation/text-generation/manage-responses.mdx#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Regenerate the response and insert it into the editor\neditor.chain().aiRegenerate().run()\n\n// Regenerate the response and insert it into the editor at the start\neditor.chain().aiRegenerate({ insertAt: 0 }).run()\n\n// Regenerate the response and insert it into the editor at the end\neditor.chain().aiRegenerate({ insertAt: editor.state.doc.content.size }).run()\n\n// Regenerate the response and append it to the current selection\neditor.chain().aiRegenerate({ append: true }).run()\n```\n\n----------------------------------------\n\nTITLE: Creating Tiptap Example Card with Multiple Filter Categories\nDESCRIPTION: This code example shows how to create a grid item with multiple filter categories (Editor and Collaboration). It demonstrates the collaborative editing feature of Tiptap and includes appropriate tagging for filtering.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/examples/index.mdx#2025-04-19_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<FilterGrid.Item filter={['Editor', 'Collaboration']}>\n  <CardGrid.Item asChild>\n    <Link href=\"/examples/advanced/collaborative-editing\">\n      <CardGrid.ItemImage\n        asNextImage\n        src={cardCoverCollaborativeEditing.src}\n        width={cardCoverCollaborativeEditing.width}\n        height={cardCoverCollaborativeEditing.height}\n        alt=\"Image\"\n      />\n      <div>\n        <CardGrid.ItemTitle>Collaborative editing</CardGrid.ItemTitle>\n        <CardGrid.ItemParagraph>\n          Build collaborative editors with Tiptap Editor.\n        </CardGrid.ItemParagraph>\n      </div>\n      <CardGrid.ItemFooter>\n        <Tag>Editor</Tag>\n        <Tag>Collaboration</Tag>\n      </CardGrid.ItemFooter>\n    </Link>\n  </CardGrid.Item>\n</FilterGrid.Item>\n```\n\n----------------------------------------\n\nTITLE: Configuring TextAlign Alignment Options\nDESCRIPTION: Example showing how to customize available text alignment options.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/functionality/textalign.mdx#2025-04-19_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nTextAlign.configure({\n  alignments: ['left', 'right'],\n})\n```\n\n----------------------------------------\n\nTITLE: Toggling Code Mark in Tiptap Editor using JavaScript\nDESCRIPTION: Command to toggle inline code mark in Tiptap Editor.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/marks/code.mdx#2025-04-19_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\neditor.commands.toggleCode()\n```\n\n----------------------------------------\n\nTITLE: Installing the Tiptap AI Suggestion Extension from Private Registry\nDESCRIPTION: Command to install the AI Suggestion extension from Tiptap's private registry. This extension requires a valid Entry, Business or Enterprise subscription with access to the private registry.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/content-ai/capabilities/suggestion/install.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @tiptap-pro/extension-ai-suggestion\n```\n\n----------------------------------------\n\nTITLE: Using the Cut Command in Tiptap Editor with JavaScript\nDESCRIPTION: This snippet demonstrates how to use the cut command in Tiptap Editor to cut content from a selected range and place it at the end of the document. It first gets the current selection range, then calculates the end position of the document, and finally applies the cut command.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/api/commands/content/cut.mdx#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst from = editor.state.selection.from\nconst to = editor.state.selection.to\n\nconst endPos = editor.state.doc.nodeSize - 2\n\n// Cut out content from range and put it at the end of the document\neditor.commands.cut({ from, to }, endPos)\n```\n\n----------------------------------------\n\nTITLE: Installing FontFamily Extension for Tiptap\nDESCRIPTION: Command to install the FontFamily extension and its dependency, the TextStyle extension, using npm.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/functionality/fontfamily.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @tiptap/extension-text-style @tiptap/extension-font-family\n```\n\n----------------------------------------\n\nTITLE: Custom Backend Integration for Suggestions\nDESCRIPTION: Example of integrating a custom backend resolver for generating suggestions\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/content-ai/capabilities/suggestion/configure.mdx#2025-04-19_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nAiSuggestion.configure({\n  resolver: async ({ content, rules }) => {\n    // Your custom logic to generate suggestions\n    return suggestions\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring HTML Attributes for Mention\nDESCRIPTION: Example of how to configure custom HTML attributes for the rendered mention element.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/nodes/mention.mdx#2025-04-19_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nMention.configure({\n  HTMLAttributes: {\n    class: 'my-custom-class',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Installing the SnapshotCompare Extension\nDESCRIPTION: Command to install the SnapshotCompare extension from Tiptap's private registry. This extension requires a valid Entry, Business or Enterprise subscription.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/collaboration/documents/snapshot-compare.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @tiptap-pro/extension-snapshot-compare\n```\n\n----------------------------------------\n\nTITLE: Installing Simple Editor Template with Tiptap CLI\nDESCRIPTION: Command to add the Simple Editor Template to a project using the Tiptap CLI for Vite or Next.js.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/ui-components/templates/simple-editor.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx @tiptap/cli add simple-editor\n```\n\n----------------------------------------\n\nTITLE: Accessing Last Child Node Position in Tiptap\nDESCRIPTION: Returns the last child NodePos instance of the current NodePosition. Returns null if there are no children.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/api/node-positions.mdx#2025-04-19_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst lastChild = myNodePos.lastChild\n```\n\n----------------------------------------\n\nTITLE: Styling Custom Invisible Characters with CSS\nDESCRIPTION: CSS selectors for styling custom invisible characters and nodes.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/functionality/invisiblecharacters.mdx#2025-04-19_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n.Tiptap-invisible-character.Tiptap-invisible-character--my-invisible-character {\n  // ‚Ä¶\n}\n```\n\nLANGUAGE: css\nCODE:\n```\n.Tiptap-invisible-character.Tiptap-invisible-character--my-invisible-node {\n  // ‚Ä¶\n}\n```\n\n----------------------------------------\n\nTITLE: Installing the Tiptap DOCX Export Extension\nDESCRIPTION: Command to install the @tiptap-pro/extension-export-docx package for enabling DOCX exports in a Tiptap editor.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/conversion/import-export/docx/editor-export.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @tiptap-pro/extension-export-docx\n```\n\n----------------------------------------\n\nTITLE: Toggling Code Block Command\nDESCRIPTION: Command to toggle the code block on/off\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/nodes/code-block.mdx#2025-04-19_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\neditor.commands.toggleCodeBlock()\n```\n\n----------------------------------------\n\nTITLE: Creating a custom Tiptap v2 extension\nDESCRIPTION: Example of creating a custom Node extension in Tiptap v2, showcasing the new extension API structure.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/guides/upgrade-tiptap-v1.mdx#2025-04-19_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Node } from '@tiptap/core'\n\nconst CustomExtension = Node.create({\n  name: 'custom_extension',\n  addOptions() {\n    ‚Ä¶\n  },\n  addAttributes() {\n    ‚Ä¶\n  },\n  parseHTML() {\n    ‚Ä¶\n  },\n  renderHTML({ node, HTMLAttributes }) {\n    ‚Ä¶\n  },\n  addCommands() {\n    ‚Ä¶\n  },\n  addKeyboardShortcuts() {\n    ‚Ä¶\n  },\n  addInputRules() {\n    ‚Ä¶\n  },\n  // and more ‚Ä¶\n})\n```\n\n----------------------------------------\n\nTITLE: Exporting a Document with Legacy Export Extension in Tiptap\nDESCRIPTION: This snippet shows how to use the export command to export the editor content using the legacy Export extension. It demonstrates both a simple export to DOCX format and a customized export with error handling and download options.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/guides/legacy-conversion.mdx#2025-04-19_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Do a simple export to docx\n// Supported formats: docx, odt, md and gfm\neditor.chain().focus().export({ format: 'docx' }).run()\n\n// You can also use the onExport callback to customize the export behavior\neditor.chain().export({\n  format: 'docx',\n  onExport(context) {\n    const { blob, error, download, filename } = context\n\n    // add error handling\n    if (error) {\n      showErrorToast({ message: error.message })\n    }\n\n    // you can change the loading state of your application for example\n    isLoading = false\n\n    // you could modify the filename or handle the blob differently here\n    // but we will keep them as they are\n\n    // you can trigger a download directly by calling the download method\n    download()\n\n    // keep in mind that the download method will only work in the browser\n    // and if the blob and filename was changed before must be managed manually\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring DragHandle with Tippy Options\nDESCRIPTION: Example showing how to configure the DragHandle component with custom tippy.js options for tooltip placement.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/functionality/drag-handle-react.mdx#2025-04-19_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<DragHandle\n  tippyOptions={{\n    placement: 'left',\n  }}\n>\n  <div>Drag Me!</div>\n</DragHandle>\n```\n\n----------------------------------------\n\nTITLE: Using aiReject Command in Tiptap Content AI\nDESCRIPTION: Shows how to use the aiReject command to reject AI responses. Demonstrates the reset option (default) which clears the state and all past responses, and the pause option which retains the current response.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/content-ai/capabilities/generation/text-generation/manage-responses.mdx#2025-04-19_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\neditor.chain().aiReject().run()\n\n// Will not clear out editor.storage.ai || editor.storage.aiAdvanced, useful for keeping current response in the editor storage\neditor.chain().aiReject({ type: 'pause' }).run()\n```\n\n----------------------------------------\n\nTITLE: Installing Tiptap Pro Extensions After Authentication\nDESCRIPTION: Standard npm command to install Tiptap Pro extensions after authentication has been configured. This works when authentication is already set up globally or per-project.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/guides/pro-extensions.mdx#2025-04-19_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @tiptap-pro/extension-unique-id\n```\n\n----------------------------------------\n\nTITLE: Implementing Update Callback with React\nDESCRIPTION: Example of implementing the onUpdate callback using React state management\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/functionality/table-of-contents.mdx#2025-04-19_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst [anchors, setAnchors] = useState([])\n\n// inside the useEditor hook you could then do something like that:\nTableOfContents.configure({\n  onUpdate: (anchors) => {\n    setAnchors(anchors)\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Using selectNodeBackward Command in Tiptap Editor (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to use the selectNodeBackward command in the Tiptap editor. When executed, it selects the node before the current textblock if the selection is empty and at the start of a textblock.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/api/commands/selection/select-node-backward.mdx#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\neditor.commands.selectNodeBackward()\n```\n\n----------------------------------------\n\nTITLE: Manually Loading AI Suggestions in Tiptap\nDESCRIPTION: Force reload AI suggestions immediately using the loadAiSuggestions command, useful for implementing refresh functionality.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/content-ai/capabilities/suggestion/features/configure-when-to-load-suggestions.mdx#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\neditor.commands.loadAiSuggestions()\n```\n\n----------------------------------------\n\nTITLE: Disabling Paste-to-Link\nDESCRIPTION: Configuration to disable automatic link creation on paste\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/marks/link.mdx#2025-04-19_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nLink.configure({\n  linkOnPaste: false,\n})\n```\n\n----------------------------------------\n\nTITLE: Installing CodeBlockLowlight Extension\nDESCRIPTION: Command to install the CodeBlockLowlight extension and its dependency lowlight via npm.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/nodes/code-block-lowlight.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install lowlight @tiptap/extension-code-block-lowlight\n```\n\n----------------------------------------\n\nTITLE: Installing Paragraph Node Component via Tiptap CLI\nDESCRIPTION: Command to add the paragraph node component to your Tiptap editor project using the Tiptap CLI. This works with Vite or Next.js projects.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/ui-components/node-components/paragraph-node.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx @tiptap/cli add paragraph-node\n```\n\n----------------------------------------\n\nTITLE: Configuring Tiptap Content AI Cloud Options\nDESCRIPTION: Shows how to configure the Tiptap Content AI cloud settings including app ID, token, and model selection\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/content-ai/capabilities/suggestion/configure.mdx#2025-04-19_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nAiSuggestion.configure({\n  // Your Tiptap Content AI app id\n  appId: 'APP_ID_HERE',\n  // This needs to be your generated JWT and MUST NOT be the OpenAI API key!\n  token: 'YOUR_TOKEN',\n  // The model to use for generating suggestions. Defaults to \"gpt-4o-mini\"\n  model: 'gpt-4o',\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring HTMLAttributes for DetailsContent in JavaScript\nDESCRIPTION: Example of configuring custom HTML attributes for the DetailsContent extension. This adds a custom CSS class to the rendered HTML tag.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/nodes/details-content.mdx#2025-04-19_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nDetailsContent.configure({\n  HTMLAttributes: {\n    class: 'my-custom-class',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Installing TaskList Extension with npm\nDESCRIPTION: Command to install the TaskList and TaskItem extensions using npm. Both extensions are required for task list functionality to work properly.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/nodes/task-list.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @tiptap/extension-task-list @tiptap/extension-task-item\n```\n\n----------------------------------------\n\nTITLE: Installing Tiptap Table of Contents Extension\nDESCRIPTION: Command to install the TableOfContents extension from Tiptap's private registry\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/functionality/table-of-contents.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @tiptap-pro/extension-table-of-contents\n```\n\n----------------------------------------\n\nTITLE: Registering essential Tiptap v2 extensions\nDESCRIPTION: JavaScript code showing how to explicitly import and register the Document, Paragraph, and Text extensions in Tiptap v2.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/guides/upgrade-tiptap-v1.mdx#2025-04-19_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport Document from '@tiptap/extension-document'\nimport Paragraph from '@tiptap/extension-paragraph'\nimport Text from '@tiptap/extension-text'\n\nnew Editor({\n  extensions: [\n    Document,\n    Paragraph,\n    Text,\n    // all your other extensions\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Generating JSON from HTML in Browser with Tiptap Core\nDESCRIPTION: This snippet demonstrates how to use the generateJSON function from @tiptap/core to convert an HTML string into a JSON object representing a Prosemirror document. This method is for browser-only use.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/api/utilities/html.mdx#2025-04-19_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { generateJSON } from '@tiptap/core'\n\n// Generate JSON from HTML\ngenerateJSON(`<p>On the browser only</p>`, [\n  Document,\n  Paragraph,\n  Text,\n  Bold,\n  // other extensions ‚Ä¶\n])\n// { type: 'doc', content: [{ type: 'paragraph', content: [{ type: 'text', text: 'On the browser only' }] }] }\n```\n\n----------------------------------------\n\nTITLE: Configuring Fullscreen Option for YouTube Videos\nDESCRIPTION: Allows or disallows the iframe to be played in fullscreen mode.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/nodes/youtube.mdx#2025-04-19_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nYoutube.configure({\n  allowFullscreen: false,\n})\n```\n\n----------------------------------------\n\nTITLE: TailwindCSS Intellisense Configuration\nDESCRIPTION: VSCode settings for enabling TailwindCSS Intellisense support in Tiptap objects.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/getting-started/style-editor/index.mdx#2025-04-19_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n\"tailwindCSS.experimental.classRegex\": [\n  \"class:\\\\s*?[\\\"'`]([^\\\"'`]*).*?,\"\n]\n```\n\n----------------------------------------\n\nTITLE: Using Character Count Storage Methods\nDESCRIPTION: Examples of accessing character count storage methods to get character counts for the document or specific nodes.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/functionality/character-count.mdx#2025-04-19_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\neditor.storage.characterCount.characters()\n\n// Get the size of a specific node.\neditor.storage.characterCount.characters({ node: someCustomNode })\n\n// Overwrite the default `mode`.\neditor.storage.characterCount.characters({ mode: 'nodeSize' })\n```\n\n----------------------------------------\n\nTITLE: Triggering DOCX Export in Tiptap\nDESCRIPTION: Simple command to trigger the DOCX export in a Tiptap editor. This command chain will export the editor content based on the previously configured export settings.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/conversion/import-export/docx/custom-node-conversion.mdx#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\neditor\n  .chain()\n  .exportDocx()\n  .run()\n```\n\n----------------------------------------\n\nTITLE: Custom DOM Element Tag Configuration\nDESCRIPTION: Example of changing the default wrapping DOM element tag for a node view renderer.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/custom-extensions/node-views/react.mdx#2025-04-19_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Node } from '@tiptap/core'\nimport { ReactNodeViewRenderer } from '@tiptap/react'\nimport Component from './Component.jsx'\n\nexport default Node.create({\n  // configuration ‚Ä¶\n\n  addNodeView() {\n    return ReactNodeViewRenderer(Component, { contentDOMElementTag: 'main' })\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Rendering Filterable Grid of Tiptap Editor Examples in React\nDESCRIPTION: This code snippet renders a filterable grid of cards showcasing various advanced Tiptap editor examples. It uses custom components like FilterGrid, CardGrid, and Link to create an interactive and visually appealing layout. Each card includes an image, title, description, and a tag for filtering.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/examples/index.mdx#2025-04-19_snippet_5\n\nLANGUAGE: JSX\nCODE:\n```\n<FilterGrid.Wrapper>\n  <CardGrid.Wrapper>\n    <FilterGrid.Item filter={['Editor']}>\n      <CardGrid.Item asChild>\n        <Link href=\"/examples/advanced/drawing\">\n          <CardGrid.ItemImage\n            asNextImage\n            src={cardCoverCollaborativeDrawing.src}\n            width={cardCoverCollaborativeDrawing.width}\n            height={cardCoverCollaborativeDrawing.height}\n            alt=\"Image\"\n          />\n          <div>\n            <CardGrid.ItemTitle>Drawing</CardGrid.ItemTitle>\n            <CardGrid.ItemParagraph>\n              Add a custom NodeView with drawing support to your Tiptap Editor.\n            </CardGrid.ItemParagraph>\n          </div>\n          <CardGrid.ItemFooter>\n            <Tag>Editor</Tag>\n          </CardGrid.ItemFooter>\n        </Link>\n      </CardGrid.Item>\n    </FilterGrid.Item>\n    {/* More FilterGrid.Item components for other examples */}\n  </CardGrid.Wrapper>\n</FilterGrid.Wrapper>\n```\n\n----------------------------------------\n\nTITLE: Installing Mark Button Component via CLI\nDESCRIPTION: Command to install the mark-button component using Tiptap CLI for Vite or Next.js projects\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/ui-components/components/mark-button.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx @tiptap/cli add mark-button\n```\n\n----------------------------------------\n\nTITLE: Configuring Tippy.js Options for Drag Handle\nDESCRIPTION: Example of setting Tippy.js options for the Drag Handle component using the tippyOptions prop.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/functionality/drag-handle-vue.mdx#2025-04-19_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<drag-handle :tippy-options=\"{ placement: 'left' }\">\n  <div>Drag Me!</div>\n</drag-handle>\n```\n\n----------------------------------------\n\nTITLE: Installing Tiptap Button Component via CLI\nDESCRIPTION: Command to add the Button primitive component to your project using Tiptap CLI for Vite or Next.js projects.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/ui-components/primitives/button.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx @tiptap/cli add button\n```\n\n----------------------------------------\n\nTITLE: Configuring Scroll Parent\nDESCRIPTION: Example showing how to configure the scroll parent element for tracking active headings\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/functionality/table-of-contents.mdx#2025-04-19_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nTableOfContents.configure({\n  scrollParent: () => editor.view.dom,\n})\n```\n\n----------------------------------------\n\nTITLE: Installing TableCell and related extensions for Tiptap\nDESCRIPTION: This command installs the TableCell extension along with its required dependencies: Table, TableRow, and TableHeader extensions. These are necessary for creating functional tables in the Tiptap editor.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/nodes/table-cell.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @tiptap/extension-table @tiptap/extension-table-row @tiptap/extension-table-header @tiptap/extension-table-cell\n```\n\n----------------------------------------\n\nTITLE: Setting Strike Mark in Tiptap Editor\nDESCRIPTION: Command to mark text as striked in the Tiptap editor.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/marks/strike.mdx#2025-04-19_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\neditor.commands.setStrike()\n```\n\n----------------------------------------\n\nTITLE: Installing Tiptap DetailsContent Extension\nDESCRIPTION: Command to install the DetailsContent extension from Tiptap's private repository. Requires a Tiptap account and access to the private repository.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/nodes/details-content.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @tiptap-pro/extension-details-content\n```\n\n----------------------------------------\n\nTITLE: Updating a Comment with updateComment Command in JavaScript\nDESCRIPTION: Modifies the content or metadata of an existing comment. Requires both the thread ID and comment ID, along with the new content and optional updated metadata.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/comments/integrate/editor-commands.mdx#2025-04-19_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\neditor.commands.updateComment({\n  threadId: '101',\n  id: '456',\n  content: 'Now this is the new content',\n  data: { edited: true },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring HTMLAttributes for Code Extension in JavaScript\nDESCRIPTION: Example of configuring custom HTML attributes for the Code extension in Tiptap Editor.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/marks/code.mdx#2025-04-19_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nCode.configure({\n  HTMLAttributes: {\n    class: 'my-custom-class',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Using setHorizontalRule Command in Tiptap\nDESCRIPTION: Example showing how to programmatically create a horizontal rule using the editor commands API.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/nodes/horizontal-rule.mdx#2025-04-19_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\neditor.commands.setHorizontalRule()\n```\n\n----------------------------------------\n\nTITLE: Installing Tiptap AI Advanced Extension\nDESCRIPTION: Command to install the advanced version of Tiptap AI extension using npm.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/content-ai/capabilities/generation/custom-llms.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @tiptap-pro/extension-ai-advanced\n```\n\n----------------------------------------\n\nTITLE: Generating JWT for Full Document Access in TypeScript\nDESCRIPTION: Creates a JWT that grants a user full access to all documents by omitting the allowedDocumentNames property from the payload. This approach provides unrestricted access across all documents in the system.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/collaboration/getting-started/authenticate.mdx#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport jsonwebtoken from 'jsonwebtoken'\n\nconst data = { sub: 'your_local_user_identifier' }\n\nconst jwt = jsonwebtoken.sign(data, 'your_secret')\n```\n\n----------------------------------------\n\nTITLE: Installing Badge Component via Tiptap CLI\nDESCRIPTION: Command to install the badge primitive component using Tiptap CLI for Vite or Next.js projects.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/ui-components/primitives/badge.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx @tiptap/cli add badge\n```\n\n----------------------------------------\n\nTITLE: Installing Mathematics Extension and KaTeX for Tiptap\nDESCRIPTION: Command to install the Mathematics extension and KaTeX library using npm. This is required to use the Mathematics extension in Tiptap.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/functionality/mathematics.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @tiptap-pro/extension-mathematics katex\n```\n\n----------------------------------------\n\nTITLE: Filtering DiffSet Example in TypeScript\nDESCRIPTION: Demonstrates how to filter a DiffSet based on user ID and display filtered diffs in the editor.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/collaboration/documents/snapshot-compare.mdx#2025-04-19_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nconst diffsToDisplay = diffSet.filter((diff) => diff.attribution.userId === 'user-1')\n\n// Show the filtered diffs in the editor\neditor.commands.showDiff(tr, { diffs: diffsToDisplay })\n```\n\n----------------------------------------\n\nTITLE: Displaying Interactive Component Example in Markdown\nDESCRIPTION: This code block renders a CodeDemo component to showcase an example of implementing React or Vue components as node views in Tiptap.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/examples/advanced/interactive-react-and-vue-views.mdx#2025-04-19_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<CodeDemo path=\"/Examples/InteractivityComponent\" />\n```\n\n----------------------------------------\n\nTITLE: Setting Height for YouTube Videos\nDESCRIPTION: Controls the default height of embedded YouTube videos.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/nodes/youtube.mdx#2025-04-19_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nYoutube.configure({\n  height: 320,\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Focus Extension Mode in JavaScript\nDESCRIPTION: Example of how to configure the mode of the Focus extension. This sets the mode to 'deepest', which applies the focus class to the deepest node in the DOM tree.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/functionality/focus.mdx#2025-04-19_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nFocus.configure({\n  mode: 'deepest',\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Vite project for Tiptap and Alpine.js\nDESCRIPTION: Commands to create a new Vite project with a Vanilla JavaScript template, navigate to the project directory, install dependencies, and start the development server.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/getting-started/install/alpine.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm init vite@latest my-tiptap-project -- --template vanilla\ncd my-tiptap-project\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Toggling Bold Mark Command\nDESCRIPTION: Command to toggle bold formatting on selected text\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/marks/bold.mdx#2025-04-19_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\neditor.commands.toggleBold()\n```\n\n----------------------------------------\n\nTITLE: Installing the Image Extension in Tiptap\nDESCRIPTION: Command to install the Image extension package from npm for use with Tiptap editor.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/nodes/image.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @tiptap/extension-image\n```\n\n----------------------------------------\n\nTITLE: Customizing Paste Rules in Tiptap Strike Extension\nDESCRIPTION: Shows how to modify paste rules for a Tiptap extension. This example changes the strike-through paste rule to recognize single tildes instead of double tildes.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/custom-extensions/extend-existing.mdx#2025-04-19_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n// Check pasted content for the ~single tilde~ markdown syntax\nimport Strike from '@tiptap/extension-strike'\nimport { markPasteRule } from '@tiptap/core'\n\n// Default:\n// const pasteRegex = /(?:^|\\s)((?:~~)((?:[^~]+))(?:~~))/g\n\n// New:\nconst pasteRegex = /(?:^|\\s)((?:~)((?:[^~]+))(?:~))/g\n\nconst CustomStrike = Strike.extend({\n  addPasteRules() {\n    return [\n      markPasteRule({\n        find: pasteRegex,\n        type: this.type,\n      }),\n    ]\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Emojis\nDESCRIPTION: Example of extending the default emoji list with custom emoji definitions.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/nodes/emoji.mdx#2025-04-19_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport Emoji, { emojis } from '@tiptap-pro/extension-emoji'\n\nconst customEmojis = [\n  {\n    name: 'octocat',\n    shortcodes: ['octocat'],\n    tags: ['cat', 'meow'],\n    group: 'My custom group of emojis',\n    fallbackImage: 'https://github.githubassets.com/images/icons/emoji/octocat.png',\n  },\n]\n\nEmoji.configure({\n  emojis: [...emojis, ...customEmojis],\n})\n```\n\n----------------------------------------\n\nTITLE: Default TableRow Configuration With TableHeader Support in JavaScript\nDESCRIPTION: This snippet shows the default configuration of the TableRow extension that allows both table cells and table headers.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/nodes/table-header.mdx#2025-04-19_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Table rows with table headers (default)\nTableRow.extend({\n  content: '(tableCell | tableHeader)*',\n})\n```\n\n----------------------------------------\n\nTITLE: Removing Strike Mark in Tiptap Editor\nDESCRIPTION: Command to remove the strike mark from text in the Tiptap editor.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/marks/strike.mdx#2025-04-19_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\neditor.commands.unsetStrike()\n```\n\n----------------------------------------\n\nTITLE: Installing List Keymap Extension\nDESCRIPTION: Command to install the List Keymap extension via npm package manager.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/functionality/listkeymap.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @tiptap/extension-list-keymap\n```\n\n----------------------------------------\n\nTITLE: Configuring Tiptap Editor Editability\nDESCRIPTION: This snippet demonstrates how to set the 'editable' property of the Tiptap Editor, which determines if users can write into the editor.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/api/editor.mdx#2025-04-19_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Editor } from '@tiptap/core'\nimport StarterKit from '@tiptap/starter-kit'\n\nnew Editor({\n  content: `<p>Example Text</p>`,\n  extensions: [StarterKit],\n  editable: false,\n})\n```\n\n----------------------------------------\n\nTITLE: Basic ODT Import Implementation in Tiptap\nDESCRIPTION: Simple example showing how to import an ODT file into the Tiptap editor, replacing the current content and focusing the editor.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/conversion/import-export/odt/editor-extensions.mdx#2025-04-19_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n// The most simple way to import a file\n// This will import the uploaded file, replace the editor content\n// and focus the editor\neditor.chain().focus().import({ file }).run()\n```\n\n----------------------------------------\n\nTITLE: Configuring Heading HTML Attributes\nDESCRIPTION: Example showing how to configure custom HTML attributes for the heading extension.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/nodes/heading.mdx#2025-04-19_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nHeading.configure({\n  HTMLAttributes: {\n    class: 'my-custom-class',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Blockquote Extension for Tiptap\nDESCRIPTION: Command to install the Blockquote extension package via npm.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/nodes/blockquote.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @tiptap/extension-blockquote\n```\n\n----------------------------------------\n\nTITLE: Installing Tiptap History Extension\nDESCRIPTION: Command for installing the Tiptap Pro History extension and required transformer dependency using npm.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/collaboration/documents/history.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @tiptap-pro/extension-collaboration-history @hocuspocus/transformer\n```\n\n----------------------------------------\n\nTITLE: Node HTML Parsing Configuration - JavaScript\nDESCRIPTION: JavaScript configuration for parsing HTML back into a custom node, defining how to recognize and restore node content from HTML markup.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/custom-extensions/node-views/index.mdx#2025-04-19_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nparseHTML() {\n  return [{\n    tag: 'my-custom-node',\n  }]\n},\n```\n\n----------------------------------------\n\nTITLE: Basic Setup for Tiptap History Extension\nDESCRIPTION: JavaScript code demonstrating the basic setup for integrating the CollabHistory extension with a Tiptap editor using a collaboration provider.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/collaboration/documents/history.mdx#2025-04-19_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nconst provider = new TiptapCollabProvider({\n  // ...\n})\n\nconst editor = new Editor({\n  // ...\n  extensions: [\n    // ...\n    CollabHistory.configure({\n      provider,\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Forcing Fallback Images\nDESCRIPTION: Configuration to always render emoji fallback images regardless of system support.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/nodes/emoji.mdx#2025-04-19_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nEmoji.configure({\n  forceFallbackImages: true,\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Focus Extension for Tiptap\nDESCRIPTION: Command to install the Focus extension for Tiptap using npm.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/functionality/focus.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @tiptap/extension-focus\n```\n\n----------------------------------------\n\nTITLE: Wrapping ProseMirror Commands in Tiptap\nDESCRIPTION: Demonstrates how to wrap a plain ProseMirror command in a Tiptap command implementation.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/api/commands/index.mdx#2025-04-19_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { exitCode } from '@tiptap/pm/commands'\n\nexport default () =>\n  ({ state, dispatch }) => {\n    return exitCode(state, dispatch)\n  }\n```\n\n----------------------------------------\n\nTITLE: Configuring Editor Container Classes\nDESCRIPTION: Example of adding classes to the editor container element using editorProps.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/getting-started/style-editor/index.mdx#2025-04-19_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nnew Editor({\n  editorProps: {\n    attributes: {\n      class: 'prose prose-sm sm:prose lg:prose-lg xl:prose-2xl mx-auto focus:outline-none',\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Width for YouTube Videos\nDESCRIPTION: Controls the default width of embedded YouTube videos.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/nodes/youtube.mdx#2025-04-19_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nYoutube.configure({\n  width: 480,\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Node Change Handler\nDESCRIPTION: Example demonstrating how to use the onNodeChange prop to track and respond to node hovering events.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/functionality/drag-handle-react.mdx#2025-04-19_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Component() {\n  const [selectedNode, setSelectedNode] = useState(null)\n\n  return (\n    <DragHandle\n      onNodeChange={({ node, editor, pos }) => {\n        setSelectedNode(node)\n        // do something with the node\n      }}\n    >\n      <div>Drag Me!</div>\n    </DragHandle>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Installing YouTube Extension for Tiptap\nDESCRIPTION: Command to install the Tiptap YouTube extension package via npm.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/nodes/youtube.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @tiptap/extension-youtube\n```\n\n----------------------------------------\n\nTITLE: Updating a Thread in Tiptap Editor (JavaScript)\nDESCRIPTION: Shows how to update a thread using the updateThread command. This example updates the 'seen' property of a thread with a specific ID.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/comments/core-concepts/manage-threads.mdx#2025-04-19_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\neditor.commands.updateThread({\n  id: '123',\n  {\n    data: {\n      seen: true,\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a New Next.js Project with Tiptap\nDESCRIPTION: Commands to create a new Next.js project and change to the project directory. This sets up the basic structure for integrating Tiptap.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/getting-started/install/nextjs.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# create a project\nnpx create-next-app my-tiptap-project\n\n# change directory\ncd my-tiptap-project\n```\n\n----------------------------------------\n\nTITLE: Adding Types for Extension Storage in Tiptap with TypeScript\nDESCRIPTION: This code snippet shows how to add types for extension storage in Tiptap using TypeScript. It defines an interface for the storage and uses it as a second type parameter when creating the extension.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/guides/typescript.mdx#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Extension } from '@tiptap/core'\n\nexport interface CustomExtensionStorage {\n  awesomeness: number\n}\n\nconst CustomExtension = Extension.create<{}, CustomExtensionStorage>({\n  name: 'customExtension',\n\n  addStorage() {\n    return {\n      awesomeness: 100,\n    }\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Enabling Emoticon Support\nDESCRIPTION: Configuration to enable automatic conversion of text emoticons to emojis.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/nodes/emoji.mdx#2025-04-19_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nEmoji.configure({\n  enableEmoticons: true,\n})\n```\n\n----------------------------------------\n\nTITLE: Unsetting Details Command\nDESCRIPTION: Command to unwrap content from a details node.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/nodes/details.mdx#2025-04-19_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\neditor.commands.unsetDetails()\n```\n\n----------------------------------------\n\nTITLE: Default List Types Configuration\nDESCRIPTION: Default configuration showing the list types and their corresponding wrapper nodes for the List Keymap extension.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/functionality/listkeymap.mdx#2025-04-19_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n;[\n  {\n    itemName: 'listItem',\n    wrapperNames: ['bulletList', 'orderedList'],\n  },\n  {\n    itemName: 'taskItem',\n    wrapperNames: ['taskList'],\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: Rendering ImageCard Component in JSX\nDESCRIPTION: This snippet shows how to use the ImageCard component to display information about a Notion-like editor template, including an image, description, and action buttons.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/content-ai/getting-started/overview.mdx#2025-04-19_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<ImageCard.Card>\n  <ImageCard.Image src={contentTemplatesImage.src} alt=\"User interface templates for Tiptap\" />\n  <ImageCard.Content>\n    <ImageCard.Title>Notion-like editor</ImageCard.Title>\n    {/* eslint-disable-next-line react/no-children-prop */}\n    <ImageCard.Paragraph children=\"Make content creation easier for your users with a block-based editor with AI features included.\" />\n    <div className=\"flex items-center gap-2 mt-8\">\n      <Button asChild variant=\"secondary\">\n        <Link href=\"https://templates.tiptap.dev/\">\n          Show demo\n          <ArrowRightIcon className=\"size-4\" />\n        </Link>\n      </Button>\n      <Button asChild variant=\"tertirary\">\n        <Link href=\"https://cloud.tiptap.dev/react-templates\">\n          Get access\n          <ArrowRightIcon className=\"size-4\" />\n        </Link>\n      </Button>\n    </div>\n  </ImageCard.Content>\n</ImageCard.Card>\n```\n\n----------------------------------------\n\nTITLE: Defining Rejected Suggestions Interface in TypeScript\nDESCRIPTION: Specifies the structure for tracking rejected AI suggestions to prevent them from being regenerated. Stores the rule and affected text content.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/content-ai/capabilities/suggestion/api-reference.mdx#2025-04-19_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AiSuggestionRule } from './ai-suggestion-rule'\n\nexport interface AiSuggestionRejection {\n  rule: AiSuggestionRule\n  deleteText: string\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Markdown Table for Selection Commands in Tiptap\nDESCRIPTION: This code snippet creates a markdown table listing various selection commands available in the Tiptap editor along with their descriptions. It covers commands for focus management, content deletion, selection, and document navigation.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/api/commands/selection/index.mdx#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Command              | Description                                                                                 |\n| -------------------- | ------------------------------------------------------------------------------------------- |\n| `blur`               | Removes focus from the editor.                                                              |\n| `deleteRange`        | Deletes everything in a range.                                                               |\n| `deleteSelection`    | Deletes the current selection or cursor position.                                           |\n| `enter`              | Simulates an Enter key press, creating a new line.                                          |\n| `focus`              | Sets focus back to the editor and moves the cursor to a specified position.                 |\n| `keyboardShortcut`   | Triggers a ShortcutEvent with a given name.                                                 |\n| `scrollIntoView`     | Scrolls the view to the current selection or cursor position.                               |\n| `selectAll`          | Selects the entire document.                                                                |\n| `selectNodeBackward` | Selects the node before the current textblock if the cursor is at the start of a textblock. |\n| `selectNodeForward`  | Selects the node after the current textblock if the cursor is at the end of a textblock.    |\n| `selectParentNode`   | Moves the selection to the parent node of the currently selected node.                      |\n| `setNodeSelection`   | Creates a new NodeSelection at a given position.                                            |\n| `setTextSelection`   | Controls the text selection by setting it to a specified range or position.                 |\n```\n\n----------------------------------------\n\nTITLE: Configuring Item Type Name for OrderedList in Tiptap\nDESCRIPTION: Example showing how to specify the list item name for the OrderedList extension. Default value is 'listItem'.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/nodes/ordered-list.mdx#2025-04-19_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nOrderedList.configure({\n  itemTypeName: 'listItem',\n})\n```\n\n----------------------------------------\n\nTITLE: Thread Deletion Payload in JSON\nDESCRIPTION: Example payload for a webhook event triggered when a thread is deleted. It includes details about the deleted thread and its associated comments.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/comments/integrate/webhook.mdx#2025-04-19_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"trigger\": \"thread.deleted\",\n  \"thread\": {\n    \"id\": \"128ba3a9-c684-4956-8c9f-fe5dc147c7e5\",\n    \"createdAt\": \"2024-03-02T22:17:51.304Z\",\n    \"comments\": [\n      {\n        \"id\": \"0259e4cb-43ad-4eb2-a7e9-a7a7d5207a76\",\n        \"createdAt\": \"2024-03-02T22:17:51.307Z\",\n        \"updatedAt\": \"2024-03-02T22:18:04.246Z\",\n        \"data\": {\n          \"userName\": \"Cyndi Lauper\",\n          \"userAvatar\": \"https://api.dicebear.com/7.x/lorelei/svg?seed=Cyndi Lauper\"\n        },\n        \"content\": \"Threaderstellungskommentar (bearbeitet)\"\n      }\n    ],\n    \"updatedAt\": \"2024-03-02T22:18:52.050Z\",\n    \"resolvedAt\": null\n  },\n  \"appName\": \"\",\n  \"user\": \"\",\n  \"name\": \"documentName\",\n  \"type\": \"THREAD\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Event Listeners Dynamically to Tiptap Collaboration Provider in TypeScript\nDESCRIPTION: Demonstrates how to add event listeners to an existing provider instance after initialization using the on() method.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/collaboration/provider/events.mdx#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst provider = new TiptapCollabProvider({\n  // ‚Ä¶\n})\n\nprovider.on('synced', () => {\n  console.log('Document synced.')\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Underline Extension for Tiptap\nDESCRIPTION: Command to install the Underline extension for Tiptap using npm.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/marks/underline.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @tiptap/extension-underline\n```\n\n----------------------------------------\n\nTITLE: Installing Drag Handle Dependencies\nDESCRIPTION: Command to install the required npm packages including the pro extension for drag handle functionality and its dependencies.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/functionality/drag-handle-react.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @tiptap-pro/extension-drag-handle-react @tiptap-pro/extension-drag-handle @tiptap-pro/extension-node-range @tiptap/extension-collaboration y-prosemirror yjs y-protocols\n```\n\n----------------------------------------\n\nTITLE: Configuring Emoji HTML Attributes\nDESCRIPTION: Example of configuring custom HTML attributes for the Emoji extension.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/nodes/emoji.mdx#2025-04-19_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nEmoji.configure({\n  HTMLAttributes: {\n    class: 'my-custom-class',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Thread Update (Unresolved) Payload in JSON\nDESCRIPTION: Example payload for a webhook event triggered when a thread is updated, specifically when it is marked as unresolved. It includes details about the updated thread and its associated comments.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/comments/integrate/webhook.mdx#2025-04-19_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"trigger\": \"thread.updated\",\n  \"thread\": {\n    \"id\": \"128ba3a9-c684-4956-8c9f-fe5dc147c7e5\",\n    \"createdAt\": \"2024-03-02T22:17:51.304Z\",\n    \"comments\": [\n      {\n        \"id\": \"0259e4cb-43ad-4eb2-a7e9-a7a7d5207a76\",\n        \"createdAt\": \"2024-03-02T22:17:51.307Z\",\n        \"updatedAt\": \"2024-03-02T22:18:04.246Z\",\n        \"data\": {\n          \"userName\": \"Cyndi Lauper\",\n          \"userAvatar\": \"https://api.dicebear.com/7.x/lorelei/svg?seed=Cyndi Lauper\"\n        },\n        \"content\": \"Threaderstellungskommentar (bearbeitet)\"\n      }\n    ],\n    \"updatedAt\": \"2024-03-02T22:18:52.050Z\",\n    \"resolvedAt\": null\n  },\n  \"appName\": \"\",\n  \"user\": \"\",\n  \"name\": \"documentName\",\n  \"type\": \"THREAD\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring HTMLAttributes for Underline Extension in JavaScript\nDESCRIPTION: Example of how to configure custom HTML attributes for the Underline extension in Tiptap.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/marks/underline.mdx#2025-04-19_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nUnderline.configure({\n  HTMLAttributes: {\n    class: 'my-custom-class',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Node Selection in Tiptap Editor - JavaScript\nDESCRIPTION: Creates a new NodeSelection at a specified position in the editor. The command takes a numeric position parameter to determine where the node selection should be created. This is useful for programmatically selecting specific nodes in the document.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/api/commands/selection/set-node-selection.mdx#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\neditor.commands.setNodeSelection(10)\n```\n\n----------------------------------------\n\nTITLE: Styling Selected AI Suggestions\nDESCRIPTION: CSS styling for selected AI suggestions using the tiptap-ai-suggestion--selected class.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/content-ai/capabilities/suggestion/features/display-suggestions.mdx#2025-04-19_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n.tiptap-ai-suggestion--selected {\n  background-color: var(--tiptap-ai-suggestion-background-color);\n  transition: background-color 0.5s;\n}\n```\n\n----------------------------------------\n\nTITLE: Unsetting Blockquote Command in Tiptap\nDESCRIPTION: Command to unwrap (remove) a blockquote.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/nodes/blockquote.mdx#2025-04-19_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\neditor.commands.unsetBlockquote()\n```\n\n----------------------------------------\n\nTITLE: Installing Details Extension for Tiptap\nDESCRIPTION: Command to install the Details extension from Tiptap's private repository. Requires access to Tiptap's pro extensions.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/nodes/details.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @tiptap-pro/extension-details\n```\n\n----------------------------------------\n\nTITLE: Setting Default Language\nDESCRIPTION: Configures a default language for code blocks instead of automatic detection\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/nodes/code-block.mdx#2025-04-19_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nCodeBlock.configure({\n  defaultLanguage: 'plaintext',\n})\n```\n\n----------------------------------------\n\nTITLE: Enabling Autoplay for YouTube Videos\nDESCRIPTION: Configures YouTube videos to start playing automatically after the player loads.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/nodes/youtube.mdx#2025-04-19_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nYoutube.configure({\n  autoplay: true,\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring HTMLAttributes for DetailsSummary in Tiptap\nDESCRIPTION: JavaScript code snippet demonstrating how to configure custom HTML attributes for the DetailsSummary extension. This example adds a custom CSS class to the rendered HTML tag.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/nodes/details-summary.mdx#2025-04-19_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nDetailsSummary.configure({\n  HTMLAttributes: {\n    class: 'my-custom-class',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring AI Generation Extension Settings in Markdown\nDESCRIPTION: This markdown table outlines various configuration options for the AI Generation extension in Tiptap. It includes settings for authentication, autocompletion, callbacks, and UI decorations.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/content-ai/capabilities/generation/configure.mdx#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Setting                 | Type                                                                                                                          | Default                                                                                         | Definition                                                                                                                                                                                                                                                   |\n|-------------------------|-------------------------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `appId`                 | `string`                                                                                                                      | `''`                                                                                            | Your Application ID which can be obtained by [visiting the AI settings in Tiptap Cloud](https://collab.tiptap.dev/ai-settings)                                                                                                                               |\n| `token`                 | `string`                                                                                                                      | `''`                                                                                            | In order to authenticate against our AI backend service, you'll need to generate a JWT (with HS256) using your JWT secret, which you also [obtain in your team's AI settings page](https://cloud.tiptap.dev/ai-settings)                                     |\n| `autocompletion`        | `boolean`                                                                                                                     | `false`                                                                                         | Enables the autocompletion feature. When writing text, just hit **Tab** to trigger the autocompletion and another **Tab** to accept the completion. We're using a portion of your already written text to build a prompt for OpenAI.                         |\n| `autocompletionOptions` | `object`                                                                                                                      | `{ trigger: 'Tab', accept: 'Tab', debounce: 0, inputLength: 4000, modelName: 'gpt-3.5-turbo' }` | Defines the trigger and length of text used to generate autocompletion suggestion. Accept defaults to trigger, if not set explicitly. Debounce in ms the request after trigger pressed. You can also choose the OpenAI model to run the autocompletion task. |\n| `onLoading`             | `(context: { editor: Editor, action: TextAction \\| 'image', isStreaming: boolean }) => void`                                  | `undefined`                                                                                     | Callback for when the AI has begun generating a response.                                                                                                                                                                                                    |\n| `onSuccess`             | `(context: { editor: Editor, action: TextAction \\| 'image', isStreaming: boolean, response: string }) => void`                | `undefined`                                                                                     | Callback for when the AI has successfully finished generating a response.                                                                                                                                                                                    |\n| `onChunk`               | `(context: { editor: Editor, action: TextAction \\| 'image', isStreaming: boolean, response: string, chunk: string }) => void` | `undefined`                                                                                     | Callback for when a chunk of the response is generated. chunk being the new string partial response being the generated response so far (including the chunk)                                                                                                |\n| `onError`               | `(error: Error, context: { editor: Editor, action: TextAction \\| 'image', isStreaming: boolean}) => void`                     | `undefined`                                                                                     | Callback for when an error occurs while generating a response.                                                                                                                                                                                               |\n| `showDecorations`       | `boolean`                                                                                                                     | `true`                                                                                          | If `false`, will not attempt to decorate AI suggestions in streaming mode. This reduces your ability to style suggestions but can fix issues with undo history                                                                                               |\n```\n\n----------------------------------------\n\nTITLE: Frontmatter Metadata Configuration\nDESCRIPTION: YAML frontmatter configuration for the documentation page, defining metadata like title, description, and layout settings for the documentation interface.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/guides/index.mdx#2025-04-19_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n---\ntitle: Tiptap Guides\nmeta:\n  title: Guides | Tiptap Docs\n  description: Explore the Tiptap guides about Content AI, Comments, Collaboration, and more to build dynamic and accessible rich-text editors.\n  category: Editor\nsidebars:\n  hideSecondary: true\n---\n```\n\n----------------------------------------\n\nTITLE: Replacements Format JSON Response for Tiptap AI Suggestion\nDESCRIPTION: This JSON structure shows the recommended 'replacements' format for API responses when implementing a custom backend. It includes HTML chunks with unique IDs and a list of specific text replacements with their respective rule IDs and chunk associations.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/content-ai/capabilities/suggestion/custom-llms.mdx#2025-04-19_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"format\": \"replacements\",\n  \"content\": {\n    \"htmlChunks\": [\n      {\n        \"id\": \"1\",\n        \"html\": \"<p>Hello, welcome to our awesome app! We hope you guys will love it. Our aplication offers unique features that enhance your cooking experience. You can explore various cuisines and share your food momentts.</p><p>Hola, estamos emocionados de tenerte aqu√≠. Our app is not just about recipes but also about building a community. We believe this will transform how you cook.</p>\",\n        \"generateSuggestions\": true\n      },\n      {\n        \"id\": \"2\",\n        \"html\": \"<p>Please check out our cool fetures and enjoy cooking with us. Si tienes dudas, no dudes en preguntar.</p>\",\n        \"generateSuggestions\": true\n      }\n    ],\n    \"items\": [\n      {\n        \"ruleId\": \"1\",\n        \"deleteHtml\": \"Hola, estamos <bold>emocionados</bold> de tenerte aqu√≠.\",\n        \"insertHtml\": \"Hello, we are <bold>excited</bold> to have you here.\",\n        \"chunkId\": \"1\"\n      },\n      {\n        \"ruleId\": \"2\",\n        \"deleteHtml\": \"aplication\",\n        \"insertHtml\": \"application\",\n        \"chunkId\": \"1\"\n      },\n      {\n        \"ruleId\": \"2\",\n        \"deleteHtml\": \"momentts\",\n        \"insertHtml\": \"moments\",\n        \"chunkId\": \"1\"\n      },\n      {\n        \"ruleId\": \"1\",\n        \"deleteHtml\": \"Si tienes dudas, no dudes en preguntar.\",\n        \"insertHtml\": \"If you have any questions, feel free to ask.\",\n        \"chunkId\": \"2\"\n      },\n      {\n        \"ruleId\": \"2\",\n        \"deleteHtml\": \"fetures\",\n        \"insertHtml\": \"features\",\n        \"chunkId\": \"2\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Superscript Extension in JavaScript\nDESCRIPTION: Example of configuring the Superscript extension with custom HTML attributes.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/marks/superscript.mdx#2025-04-19_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nSuperscript.configure({\n  HTMLAttributes: {\n    class: 'my-custom-class',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Using toggleOrderedList Command in Tiptap\nDESCRIPTION: Example of how to programmatically toggle an ordered list using the editor commands API.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/nodes/ordered-list.mdx#2025-04-19_snippet_5\n\nLANGUAGE: js\nCODE:\n```\neditor.commands.toggleOrderedList()\n```\n\n----------------------------------------\n\nTITLE: Importing CodeDemo Component in JSX\nDESCRIPTION: This snippet imports the CodeDemo component, which is likely used to display interactive code examples or demonstrations of the AI Suggestion extension in action.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/functionality/ai-suggestion.mdx#2025-04-19_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { CodeDemo } from '@/components/CodeDemo'\n```\n\n----------------------------------------\n\nTITLE: Installing Tiptap PHP Package via Composer\nDESCRIPTION: This command installs the Tiptap PHP package using Composer, a dependency management tool for PHP.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/api/utilities/tiptap-for-php.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require ueberdosis/tiptap-php\n```\n\n----------------------------------------\n\nTITLE: Full HTML Format JSON Response for Tiptap AI Suggestion\nDESCRIPTION: This JSON structure demonstrates the 'fullHtml' format for API responses when implementing a custom backend. It provides complete HTML replacements for the entire content based on different rules, useful for simple cases with few rules.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/content-ai/capabilities/suggestion/custom-llms.mdx#2025-04-19_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"format\": \"fullHtml\",\n  \"content\": {\n    \"items\": [\n      {\n        \"ruleId\": \"1\",\n        \"fullHtml\": \"<p>Hello, welcome to our awesome app! We hope you guys will love it. Our aplication offers unique features that enhance your cooking experience. You can explore various cuisines and share your food momentts.</p><p>Hello, we are excited to have you here. Our app is not just about recipes but also about building a community. We believe this will transform how you cook.</p><p>Please check out our cool fetures and enjoy cooking with us. If you have doubts, do not hesitate to ask.</p>\"\n      },\n      {\n        \"ruleId\": \"2\",\n        \"fullHtml\": \"<p>Hello, welcome to our awesome app! We hope you guys will love it. Our application offers unique features that enhance your cooking experience. You can explore various cuisines and share your food moments.</p><p>Hola, estamos emocionados de tenerte aqu√≠. Our app is not just about recipes but also about building a community. We believe this will transform how you cook.</p><p>Please check out our cool features and enjoy cooking with us. Si tienes dudas, no dudes en preguntar.</p>\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating AI Suggestion Context in TypeScript\nDESCRIPTION: This code shows how to update the AI suggestion context using the setAiSuggestionContext command. It also demonstrates chaining this command with loadAiSuggestions to refresh suggestions based on the new context.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/content-ai/capabilities/suggestion/features/provide-llm-context.mdx#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst newContext = 'The tone should be informal and friendly.'\neditor.commands.setAiSuggestionContext(newContext)\n```\n\nLANGUAGE: typescript\nCODE:\n```\neditor.chain().setAiSuggestionContext(newContext).loadAiSuggestions().run()\n```\n\n----------------------------------------\n\nTITLE: Bearer Token Authentication Example\nDESCRIPTION: Example of the Authorization header format for API authentication\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/guides/legacy-conversion.mdx#2025-04-19_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nBearer your-jwt-token\n```\n\n----------------------------------------\n\nTITLE: Installing Dropcursor Extension\nDESCRIPTION: Command to install the Tiptap Dropcursor extension via npm package manager.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/functionality/dropcursor.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @tiptap/extension-dropcursor\n```\n\n----------------------------------------\n\nTITLE: Getting Child Node Positions in Tiptap\nDESCRIPTION: Returns an array of all child NodePos instances for the current NodePosition.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/api/node-positions.mdx#2025-04-19_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst children = myNodePos.children\n```\n\n----------------------------------------\n\nTITLE: Anchor Object Structure\nDESCRIPTION: Example showing the structure of anchor objects returned by the storage or onUpdate function\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/functionality/table-of-contents.mdx#2025-04-19_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  dom: HTMLElement // the HTML element for this anchor\n  editor: Editor // the editor\n  id: string // the node id\n  isActive: boolean // whether this anchor is currently active\n  isScrolledOver: boolean // whether this anchor was already scrolled over\n  itemIndex: number // the index of the item on its current level\n  level: number // the current level of the item - this could be different from the actual anchor level and is used to render the hierarchy from high to low headlines\n  node: Node // the ProseMirror node for this anchor\n  originalLevel: number // the actual level\n  pos: number // the position of the anchor node\n  textContent: string // the text content of the anchor\n}\n```\n\n----------------------------------------\n\nTITLE: Storing Version Updates in Tiptap History\nDESCRIPTION: JavaScript code that captures and stores version update information from the Tiptap History extension into variables using the onUpdate callback.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/collaboration/documents/history.mdx#2025-04-19_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nlet currentVersion = 0\nlet latestVersion = 0\nlet autoversioningEnabled = false\nlet versions = []\n\nconst provider = new TiptapCollabProvider({\n  // ...\n})\n\nconst editor = new Editor({\n  // ...\n  extensions: [\n    // ...\n    CollabHistory.configure({\n      provider,\n      onUpdate(payload) {\n        currentVersion = payload.currentVersion\n        latestVersion = payload.version\n        versions = payload.versions\n        autoversioningEnabled = payload.autoVersioning\n      },\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Running Tiptap Docs Development Server\nDESCRIPTION: Command to run the Tiptap documentation development server locally for previewing changes.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/CONTRIBUTING.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Setting Tiptap Pro Registry for Yarn Modern\nDESCRIPTION: Commands to configure global Tiptap Pro registry settings for Yarn Modern (2+). This configures the npm scope with registry server and authentication settings.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/guides/pro-extensions.mdx#2025-04-19_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nyarn config set --home npmScopes.@tiptap-pro.npmRegistryServer \"https://registry.tiptap.dev/\"\nyarn config set --home npmScopes.@tiptap-pro.npmAlwaysAuth \"true\"\n```\n\n----------------------------------------\n\nTITLE: Basic NodeViewWrapper Implementation\nDESCRIPTION: Simple example of using NodeViewWrapper component to create a React-based node view.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/custom-extensions/node-views/react.mdx#2025-04-19_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<NodeViewWrapper className=\"react-component\"> React Component </NodeViewWrapper>\n```\n\n----------------------------------------\n\nTITLE: Installing Tiptap Italic Extension\nDESCRIPTION: Command to install the Italic extension package via npm\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/marks/italic.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @tiptap/extension-italic\n```\n\n----------------------------------------\n\nTITLE: Configuring HTML Attributes for Horizontal Rule Extension\nDESCRIPTION: Example of how to configure custom HTML attributes for the Horizontal Rule extension, specifically adding a custom CSS class to the rendered HTML tag.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/nodes/horizontal-rule.mdx#2025-04-19_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nHorizontalRule.configure({\n  HTMLAttributes: {\n    class: 'my-custom-class',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Forcing Closed Captions Display for YouTube Videos\nDESCRIPTION: Setting this to true causes closed captions to be shown by default, even if users have captions turned off.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/nodes/youtube.mdx#2025-04-19_snippet_9\n\nLANGUAGE: js\nCODE:\n```\nYoutube.configure({\n  ccLoadPolicy: true,\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring HardBreak Extension with Custom HTML Attributes\nDESCRIPTION: JavaScript code to configure the HardBreak extension with custom HTML attributes for the rendered HTML tag.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/nodes/hard-break.mdx#2025-04-19_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nHardBreak.configure({\n  HTMLAttributes: {\n    class: 'my-custom-class',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Suggestion Loading Behavior\nDESCRIPTION: Shows how to configure when suggestions should be loaded and updated\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/content-ai/capabilities/suggestion/configure.mdx#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nAiSuggestion.configure({\n  loadOnStart: false,\n})\n```\n\n----------------------------------------\n\nTITLE: Rendering Drag Handle Example in JSX\nDESCRIPTION: This code renders a CodeDemo component to display an example of drag handles implementation. The path prop suggests the example code is located at '/GuideNodeViews/DragHandle'.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/custom-extensions/node-views/examples.mdx#2025-04-19_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<CodeDemo path=\"/GuideNodeViews/DragHandle\" />\n```\n\n----------------------------------------\n\nTITLE: Importing Callout Component in JSX\nDESCRIPTION: This snippet imports the Callout component from the UI components directory. The Callout component is used to display additional information or hints in the documentation.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/functionality/ai-suggestion.mdx#2025-04-19_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Callout } from '@/components/ui/Callout'\n```\n\n----------------------------------------\n\nTITLE: Removing a Comment with removeComment Command in JavaScript\nDESCRIPTION: Deletes a specific comment from a thread. Requires both the thread ID and comment ID to identify which comment to remove.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/comments/integrate/editor-commands.mdx#2025-04-19_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\neditor.commands.removeComment({\n  threadId: '101',\n  id: '456',\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Tiptap Dependencies with npm\nDESCRIPTION: Command to install the core Tiptap packages required for editor functionality: @tiptap/core for the editor itself, @tiptap/pm for the ProseMirror library, and @tiptap/starter-kit for common extensions.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/getting-started/install/vanilla-javascript.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @tiptap/core @tiptap/pm @tiptap/starter-kit\n```\n\n----------------------------------------\n\nTITLE: Configuring Video Controls for YouTube Videos\nDESCRIPTION: Enables or disables the YouTube video controls in the embedded player.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/nodes/youtube.mdx#2025-04-19_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nYoutube.configure({\n  controls: false,\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Tiptap Extension Generator\nDESCRIPTION: Command to initialize a new Tiptap extension using the official CLI tool. This creates a boilerplate with necessary files and build process setup.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/resources/contributing.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm init tiptap-extension\n```\n\n----------------------------------------\n\nTITLE: Removing Subscript Mark in Tiptap Editor using JavaScript\nDESCRIPTION: JavaScript command to remove the subscript mark in the Tiptap editor.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/marks/subscript.mdx#2025-04-19_snippet_4\n\nLANGUAGE: js\nCODE:\n```\neditor.commands.unsetSubscript()\n```\n\n----------------------------------------\n\nTITLE: Rendering AI Suggestion Demo in JSX\nDESCRIPTION: This code snippet demonstrates how to render a CodeDemo component for the AI Suggestion extension. It includes props for Pro features and specifies the path and source URL for the demo.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/content-ai/capabilities/suggestion/overview.mdx#2025-04-19_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<CodeDemo\n  isPro\n  path=\"/Extensions/AiSuggestion\"\n  src=\"https://develop--tiptap-pro.netlify.app/preview/Extensions/AiSuggestion\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Installing Tiptap Collaboration Provider Package\nDESCRIPTION: Command to install the Hocuspocus provider package which is necessary for setting up real-time collaboration in your application.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/collaboration/provider/integration.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @hocuspocus/provider\n```\n\n----------------------------------------\n\nTITLE: Checking if Diff View is Active\nDESCRIPTION: TypeScript example showing how to check if the diff view is currently active using the storage property isPreviewing.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/collaboration/documents/snapshot-compare.mdx#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nif (editor.storage.snapshotCompare.isPreviewing) {\n  // The diff view is currently active\n}\n```\n\n----------------------------------------\n\nTITLE: Thread Creation and Comment Addition Payload in JSON\nDESCRIPTION: Example payload for a webhook event triggered when a new thread is created and a comment is added. It includes details about the thread, the comment, and metadata about the event.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/comments/integrate/webhook.mdx#2025-04-19_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"trigger\": \"comment.added\",\n  \"thread\": {\n    \"id\": \"128ba3a9-c684-4956-8c9f-fe5dc147c7e5\",\n    \"createdAt\": \"2024-03-02T22:17:51.304Z\",\n    \"comments\": [\n      {\n        \"id\": \"0259e4cb-43ad-4eb2-a7e9-a7a7d5207a76\",\n        \"createdAt\": \"2024-03-02T22:17:51.307Z\",\n        \"updatedAt\": \"2024-03-02T22:17:51.307Z\",\n        \"data\": {\n          \"userName\": \"Cyndi Lauper\",\n          \"userAvatar\": \"https://api.dicebear.com/7.x/lorelei/svg?seed=Cyndi Lauper\"\n        },\n        \"content\": \"Threaderstellungskommentar\"\n      }\n    ],\n    \"updatedAt\": \"2024-03-02T22:17:51.305Z\"\n  },\n  \"comment\": {\n    \"id\": \"0259e4cb-43ad-4eb2-a7e9-a7a7d5207a76\",\n    \"createdAt\": \"2024-03-02T22:17:51.307Z\",\n    \"updatedAt\": \"2024-03-02T22:17:51.307Z\",\n    \"data\": {\n      \"userName\": \"Cyndi Lauper\",\n      \"userAvatar\": \"https://api.dicebear.com/7.x/lorelei/svg?seed=Cyndi Lauper\"\n    },\n    \"content\": \"Threaderstellungskommentar\"\n  },\n  \"appName\": \"\",\n  \"user\": \"\",\n  \"name\": \"documentName\",\n  \"type\": \"THREAD\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Table Extensions in NPM\nDESCRIPTION: This command installs all required table-related extensions for Tiptap, including the table header extension and its dependencies.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/nodes/table-header.mdx#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @tiptap/extension-table @tiptap/extension-table-row @tiptap/extension-table-header @tiptap/extension-table-cell\n```\n\n----------------------------------------\n\nTITLE: Extending Attribution Interface in TypeScript\nDESCRIPTION: Shows how to extend the Attribution interface to include additional properties using TypeScript module augmentation.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/collaboration/documents/snapshot-compare.mdx#2025-04-19_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare module '@tiptap-pro/extension-snapshot-compare' {\n  interface Attribution {\n    userName: string\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Frontmatter Metadata for Tiptap Examples Page\nDESCRIPTION: This code shows the frontmatter configuration for the Tiptap examples page. It defines metadata like page title, description, and category, as well as sidebar configuration settings.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/examples/index.mdx#2025-04-19_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Examples\nmeta:\n  title: Examples | Tiptap Editor Docs\n  description: Learn how to use and integrate a custom user experience in Tiptap with our list of code examples. More in the docs!\n  category: Examples\nsidebars:\n  hideSecondary: true\n---\n```\n\n----------------------------------------\n\nTITLE: Rendering Callout Component in JSX\nDESCRIPTION: This snippet demonstrates how to use the Callout component to display a warning message about subscription requirements for AI extensions.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/content-ai/getting-started/overview.mdx#2025-04-19_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Callout title=\"Subscription required\" variant=\"warning\">\n  These extensions require a valid Tiptap subscription. To install the extension, you need [access\n  to our private registry](/guides/pro-extensions).\n</Callout>\n```\n\n----------------------------------------\n\nTITLE: Installing Hocuspocus Provider\nDESCRIPTION: Command to install the Hocuspocus provider package for handling collaboration server connections.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/collaboration/getting-started/install.mdx#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @hocuspocus/provider\n```\n\n----------------------------------------\n\nTITLE: Configuring Empty Node Class\nDESCRIPTION: JavaScript configuration to set a custom CSS class for empty nodes.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/functionality/placeholder.mdx#2025-04-19_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nPlaceholder.configure({\n  emptyNodeClass: 'my-custom-is-empty-class',\n})\n```\n\n----------------------------------------\n\nTITLE: Disabling Keyboard Controls for YouTube Player\nDESCRIPTION: Disables keyboard controls for the YouTube iframe player.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/nodes/youtube.mdx#2025-04-19_snippet_10\n\nLANGUAGE: js\nCODE:\n```\nYoutube.configure({\n  disableKBcontrols: true,\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Document Extension for Tiptap\nDESCRIPTION: Command to install the Document extension for Tiptap using npm. This extension is required for all Tiptap editors as it serves as the top-level node.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/nodes/document.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @tiptap/extension-document\n```\n\n----------------------------------------\n\nTITLE: Handling Suggestion Loading Errors\nDESCRIPTION: Demonstrates error handling configuration for suggestion loading\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/content-ai/capabilities/suggestion/configure.mdx#2025-04-19_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nAiSuggestion.configure({\n  onLoadSuggestionsError(error) {\n    console.error('An error occurred while loading suggestions', error)\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Disabling Automatic Reloading of Suggestions on Content Update in Tiptap\nDESCRIPTION: Configure the AI Suggestion extension to not automatically reload suggestions when the editor's content changes by setting the reloadOnUpdate option to false.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/content-ai/capabilities/suggestion/features/configure-when-to-load-suggestions.mdx#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nAiSuggestion.configure({\n  // Disable automatic loading of suggestions\n  reloadOnUpdate: false,\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Comment with createComment Command in JavaScript\nDESCRIPTION: Adds a new comment to an existing thread. Requires the thread ID, comment content, and optional metadata about the comment author or other properties.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/comments/integrate/editor-commands.mdx#2025-04-19_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\neditor.commands.createComment({\n  threadId: '101',\n  content: 'This is a new comment',\n  data: { authorId: '123' },\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a New Nuxt.js Project with Tiptap\nDESCRIPTION: Commands to create a new Nuxt.js project and install Tiptap dependencies. This includes creating the project structure and installing necessary packages.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/getting-started/install/nuxt.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# create a project\nnpm init nuxt-app my-tiptap-project\n\n# change directory\ncd my-tiptap-project\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @tiptap/vue-3 @tiptap/pm @tiptap/starter-kit\n```\n\n----------------------------------------\n\nTITLE: Enabling Modest Branding for YouTube Player\nDESCRIPTION: Disables the YouTube logo on the control bar of the player for a cleaner interface.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/nodes/youtube.mdx#2025-04-19_snippet_18\n\nLANGUAGE: js\nCODE:\n```\nYoutube.configure({\n  modestBranding: true,\n})\n```\n\n----------------------------------------\n\nTITLE: Using Word Context Utilities\nDESCRIPTION: Demonstrates usage of utility functions for getting context around suggestions.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/content-ai/capabilities/suggestion/features/display-suggestions.mdx#2025-04-19_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getNextWord, getPreviousWord } from '@tiptap-pro/extension-ai-suggestion'\n\n// Get the previous word in the sentence.\nconst { previousWord } = getPreviousWord(editor, suggestion.deleteRange.from)\n// Get the next word in the sentence and the punctuation mark that follows it, if it's the end of the sentence.\nconst { nextWord, punctuationMark } = getNextWord(editor, suggestion.deleteRange.to)\n```\n\n----------------------------------------\n\nTITLE: Server Health API Examples\nDESCRIPTION: Example responses from the health endpoint showing different server states including Redis failures and inactive states.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/collaboration/operations/metrics.mdx#2025-04-19_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nHTTP 500:\n\nDB:ok\nREDIS:fail\n```\n\nLANGUAGE: bash\nCODE:\n```\nHTTP 200:\n\nDB:ok\nREDIS:inactive\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Comment Threads from a Document\nDESCRIPTION: GET request to retrieve all comment threads associated with a specific document. This endpoint lists all threads and their details using document identifier in the URL path.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/comments/integrate/rest-api.mdx#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nGET /api/documents/:identifier/threads\n```\n\n----------------------------------------\n\nTITLE: Using setMeta Command in Tiptap Editor\nDESCRIPTION: Demonstrates how to use the setMeta command to store metadata in the current transaction. Shows examples of preventing update events and storing custom values that can be retrieved later using getMeta.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/api/commands/set-meta.mdx#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Prevent the update event from being triggered\neditor.commands.setMeta('preventUpdate', true)\n\n// Store any value in the current transaction.\n// You can get this value at any time with tr.getMeta('foo').\neditor.commands.setMeta('foo', 'bar')\n```\n\n----------------------------------------\n\nTITLE: Deleting Tiptap Setting - Bash\nDESCRIPTION: API call to delete a specific setting from Tiptap Collaboration. Requires authorization header and setting key.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/collaboration/operations/configure.mdx#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location --request DELETE 'https://YOUR_APP_ID.collab.tiptap.cloud/api/admin/settings/:key' \\\n--header 'Authorization: YOUR_SECRET_FROM_SETTINGS_AREA'\n```\n\n----------------------------------------\n\nTITLE: Configuring Dropcursor Color\nDESCRIPTION: Example of configuring the dropcursor color property. Sets the visual color of the cursor that appears when dragging content.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/functionality/dropcursor.mdx#2025-04-19_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nDropcursor.configure({\n  color: '#ff0000',\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Current Node Display\nDESCRIPTION: JavaScript configuration to control if placeholders show only in the currently selected node.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/functionality/placeholder.mdx#2025-04-19_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nPlaceholder.configure({\n  showOnlyCurrent: false,\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Horizontal Rule Extension with npm\nDESCRIPTION: Command to install the Horizontal Rule extension package for Tiptap using npm.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/nodes/horizontal-rule.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @tiptap/extension-horizontal-rule\n```\n\n----------------------------------------\n\nTITLE: Setting Images with the setImage Command in Tiptap\nDESCRIPTION: Examples of using the setImage command to insert images into the document, with various attributes like src, alt, and title.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/nodes/image.mdx#2025-04-19_snippet_4\n\nLANGUAGE: js\nCODE:\n```\neditor.commands.setImage({ src: 'https://example.com/foobar.png' })\neditor.commands.setImage({\n  src: 'https://example.com/foobar.png',\n  alt: 'A boring example image',\n  title: 'An example',\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Language Class Prefix\nDESCRIPTION: Example showing how to configure the prefix for language classes applied to code tags.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/nodes/code-block-lowlight.mdx#2025-04-19_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nCodeBlockLowlight.configure({\n  languageClassPrefix: 'language-',\n})\n```\n\n----------------------------------------\n\nTITLE: Rendering Callout Component in JSX\nDESCRIPTION: This snippet renders the Callout component with a title and content, providing a link to more detailed information about the AI Suggestion extension. It uses JSX syntax within Markdown.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/functionality/ai-suggestion.mdx#2025-04-19_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Callout title=\"More details\" variant=\"hint\">\n  For more detailed information on how to integrate, install, and configure the AI Suggestion\n  extension, please visit our [feature page](/content-ai/capabilities/suggestion/overview).\n</Callout>\n```\n\n----------------------------------------\n\nTITLE: Installing CodeBlock Extension with NPM\nDESCRIPTION: Command to install the CodeBlock extension package via npm\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/nodes/code-block.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @tiptap/extension-code-block\n```\n\n----------------------------------------\n\nTITLE: Configuring Empty Editor Class\nDESCRIPTION: JavaScript configuration to set the CSS class applied when the editor is empty.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/functionality/placeholder.mdx#2025-04-19_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nPlaceholder.configure({\n  emptyEditorClass: 'is-editor-empty',\n})\n```\n\n----------------------------------------\n\nTITLE: Comment Update Payload in JSON\nDESCRIPTION: Example payload for a webhook event triggered when a comment is updated. It includes the updated comment details and the associated thread information.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/comments/integrate/webhook.mdx#2025-04-19_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"trigger\": \"comment.updated\",\n  \"thread\": [\n    {\n      \"id\": \"0259e4cb-43ad-4eb2-a7e9-a7a7d5207a76\",\n      \"createdAt\": \"2024-03-02T22:17:51.307Z\",\n      \"updatedAt\": \"2024-03-02T22:18:04.246Z\",\n      \"data\": {\n        \"userName\": \"Cyndi Lauper\",\n        \"userAvatar\": \"https://api.dicebear.com/7.x/lorelei/svg?seed=Cyndi Lauper\"\n      },\n      \"content\": \"Threaderstellungskommentar (bearbeitet)\"\n    }\n  ],\n  \"comment\": {\n    \"id\": \"0259e4cb-43ad-4eb2-a7e9-a7a7d5207a76\",\n    \"createdAt\": \"2024-03-02T22:17:51.307Z\",\n    \"updatedAt\": \"2024-03-02T22:18:04.246Z\",\n    \"data\": {\n      \"userName\": \"Cyndi Lauper\",\n      \"userAvatar\": \"https://api.dicebear.com/7.x/lorelei/svg?seed=Cyndi Lauper\"\n    },\n    \"content\": \"Threaderstellungskommentar (bearbeitet)\"\n  },\n  \"appName\": \"\",\n  \"user\": \"\",\n  \"name\": \"documentName\",\n  \"type\": \"THREAD\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing ListItem Extension with NPM\nDESCRIPTION: Command to install the ListItem extension package via npm. Requires BulletList or OrderedList node as a dependency.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/nodes/list-item.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @tiptap/extension-list-item\n```\n\n----------------------------------------\n\nTITLE: Error Handling Strategy for Collaborative Editing in Tiptap\nDESCRIPTION: Provides a recommended approach for handling content errors in collaborative editing scenarios, including disabling collaboration, preventing updates, disabling editing, and notifying users.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/guides/invalid-schema.mdx#2025-04-19_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nonContentError({ editor, error, disableCollaboration }) {\n  // Disable collaboration to prevent syncing invalid content\n  disableCollaboration()\n\n  // Prevent emitting updates\n  const emitUpdate = false\n\n  // Disable further user input\n  editor.setEditable(false, emitUpdate)\n\n  // Notify the user about the issue\n  notifyUser(\"An error occurred. Please refresh the application.\")\n}\n```\n\n----------------------------------------\n\nTITLE: Example Webhook Payload Structure in JSON\nDESCRIPTION: This JSON structure represents the webhook payload sent by Tiptap Collaboration when a document changes. It includes document metadata, content representation, user information, and event details.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/collaboration/core-concepts/webhooks.mdx#2025-04-19_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"appName\": '', // name of your app\n  \"name\": '', // name of the document (URI encoded if necessary)\n  \"time\": // current time as ISOString (new Date()).toISOString())\n  \"tiptapJson\": {}, // JSON output from Tiptap (see https://tiptap.dev/guide/output#option-1-json): TiptapTransformer.fromYdoc()\n  \"ydocState\"?: {}, // optionally contains the entire yDoc as base64. Contact us to enable this property!\n  \"clientsCount\": 100,// number of currently connected clients\n  \"type\": '', // the payload type (if the document was changed, this is DOCUMENT) ; only available if you are on webhooks v2\n  \"trigger\": '', // what triggered the event (usually \"document.saved\") ; only available if you are on webhooks v2\n  \"users\": [] // list of users who changed the content since the last webhook (\"sub\" field from the JWT)\n}\n```\n\n----------------------------------------\n\nTITLE: Basic DOCX Import in Tiptap Editor\nDESCRIPTION: JavaScript code showing the simplest way to import a DOCX file into the Tiptap editor, replacing current content and focusing the editor.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/conversion/import-export/docx/editor-import.mdx#2025-04-19_snippet_3\n\nLANGUAGE: js\nCODE:\n```\neditor.chain().focus().import({ file }).run()\n```\n\n----------------------------------------\n\nTITLE: Installing OrderedList and ListItem Extensions for Tiptap\nDESCRIPTION: Command to install the OrderedList extension and its dependency, the ListItem extension, using npm package manager.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/nodes/ordered-list.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @tiptap/extension-ordered-list @tiptap/extension-list-item\n```\n\n----------------------------------------\n\nTITLE: Removing Highlight with Tiptap Editor Commands\nDESCRIPTION: Example of using Tiptap Editor command to remove text highlight.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/marks/highlight.mdx#2025-04-19_snippet_5\n\nLANGUAGE: js\nCODE:\n```\neditor.commands.unsetHighlight()\n```\n\n----------------------------------------\n\nTITLE: Rendering CodeDemo Component in JSX\nDESCRIPTION: This snippet renders the CodeDemo component, likely to display an interactive demonstration of the AI Suggestion extension. It includes properties for pro features and specifies the path and source URL for the demo.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/functionality/ai-suggestion.mdx#2025-04-19_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<CodeDemo\n  isPro\n  path=\"/Extensions/AiSuggestion\"\n  src=\"https://develop--tiptap-pro.netlify.app/preview/Extensions/AiSuggestion\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Creating a Document with Yjs Binary Format in Tiptap Collaboration\nDESCRIPTION: Demonstrates how to create a document using a Yjs binary update message. The document is created with a specific identifier and authenticated using the API secret.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/collaboration/documents/rest-api.mdx#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location 'https://YOUR_APP_ID.collab.tiptap.cloud/api/documents/DOCUMENT_NAME' \\\n--header 'Authorization: YOUR_SECRET_FROM_SETTINGS_AREA' \\\n--data '@yjsUpdate.binary.txt'\n```\n\n----------------------------------------\n\nTITLE: Displaying Content Commands Table in Markdown\nDESCRIPTION: This markdown table lists the available content commands in Tiptap editor, including their names and brief descriptions. It provides a quick reference for developers working with content manipulation in Tiptap.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/api/commands/content/index.mdx#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Command           | Description                                                         |\n| ----------------- | ------------------------------------------------------------------- |\n| `clearContent`    | Deletes the current document while adhering to the editor's schema. |\n| `insertContent`   | Adds content to the document using plain text, HTML, or JSON.       |\n| `insertContentAt` | Inserts content at a specific position or range in the document.    |\n| `setContent`      | Replaces the entire document with a new one using JSON or HTML.     |\n```\n\n----------------------------------------\n\nTITLE: Using the joinUp Command in Tiptap Editor (JavaScript)\nDESCRIPTION: This snippet demonstrates how to use the joinUp command in Tiptap Editor. The command joins the selected block or the closest ancestor block of the text selection with the sibling above it.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/api/commands/nodes-and-marks/join-up.mdx#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\neditor.commands.joinUp()\n```\n\n----------------------------------------\n\nTITLE: Installing Tiptap Dependencies\nDESCRIPTION: NPM command to install required Tiptap packages including Vue 2 integration, ProseMirror, and starter kit.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/getting-started/install/vue2.mdx#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @tiptap/vue-2 @tiptap/pm @tiptap/starter-kit\n```\n\n----------------------------------------\n\nTITLE: Toggling Heading Command\nDESCRIPTION: Command to toggle a heading node with a specified level.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/nodes/heading.mdx#2025-04-19_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\neditor.commands.toggleHeading({ level: 1 })\n```\n\n----------------------------------------\n\nTITLE: Configuring Mention Text Rendering\nDESCRIPTION: Example showing how to customize the text rendering of mentions using renderText configuration.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/nodes/mention.mdx#2025-04-19_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nMention.configure({\n  renderText({ options, node }) {\n    return `${options.suggestion.char}${node.attrs.label ?? node.attrs.id}`\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Tiptap AI Extension via NPM\nDESCRIPTION: Command to install the Tiptap AI extension from the private registry. This requires prior setup of access to the private registry and a valid subscription.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/content-ai/capabilities/generation/install.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @tiptap-pro/extension-ai\n```\n\n----------------------------------------\n\nTITLE: Installing CollaborationCursor Extension for Tiptap\nDESCRIPTION: Command to install the CollaborationCursor extension via npm. This extension requires the Collaboration extension to be installed as well.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/functionality/collaboration-cursor.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @tiptap/extension-collaboration-cursor\n```\n\n----------------------------------------\n\nTITLE: Accessing Current Diffs\nDESCRIPTION: TypeScript example showing how to access the diffs that are currently displayed in the diff view.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/collaboration/documents/snapshot-compare.mdx#2025-04-19_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\neditor.storage.snapshotCompare.diffs\n```\n\n----------------------------------------\n\nTITLE: Thread Resolution Payload in JSON\nDESCRIPTION: Example payload for a webhook event triggered when a thread is resolved. It includes details about the resolved thread and its associated comments.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/comments/integrate/webhook.mdx#2025-04-19_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"trigger\": \"thread.resolved\",\n  \"thread\": {\n    \"id\": \"128ba3a9-c684-4956-8c9f-fe5dc147c7e5\",\n    \"createdAt\": \"2024-03-02T22:17:51.304Z\",\n    \"comments\": [\n      {\n        \"id\": \"0259e4cb-43ad-4eb2-a7e9-a7a7d5207a76\",\n        \"createdAt\": \"2024-03-02T22:17:51.307Z\",\n        \"updatedAt\": \"2024-03-02T22:18:04.246Z\",\n        \"data\": {\n          \"userName\": \"Cyndi Lauper\",\n          \"userAvatar\": \"https://api.dicebear.com/7.x/lorelei/svg?seed=Cyndi Lauper\"\n        },\n        \"content\": \"Threaderstellungskommentar (bearbeitet)\"\n      }\n    ],\n    \"updatedAt\": \"2024-03-02T22:18:48.531Z\",\n    \"resolvedAt\": \"2024-03-02T22:18:48.531Z\"\n  },\n  \"appName\": \"\",\n  \"user\": \"\",\n  \"name\": \"documentName\",\n  \"type\": \"THREAD\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Italic Text Command\nDESCRIPTION: Command to apply italic formatting to selected text\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/marks/italic.mdx#2025-04-19_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\neditor.commands.setItalic()\n```\n\n----------------------------------------\n\nTITLE: Configuring History Depth in Tiptap\nDESCRIPTION: JavaScript code to configure the depth of history events collected before the oldest events are discarded.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/functionality/undo-redo.mdx#2025-04-19_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nHistory.configure({\n  depth: 10,\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Tiptap Editor with Image Upload Callback\nDESCRIPTION: Configuration setup for Tiptap editor with Import extension that includes image upload callback URL for handling image preservation during document imports.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/conversion/import-export/docx/preserve-images.mdx#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Editor } from '@tiptap/core'\nimport { Import } from '@tiptap-pro/extension-import'\n\nconst editor = new Editor({\n  // ... other editor options,\n  extensions: [\n    Import.configure({\n      appId: '<your-app-id>',\n      token: '<your-jwt>',\n      imageUploadCallbackUrl: 'https://your-server.com/upload-image'\n    })\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Using the liftEmptyBlock Command in Tiptap Editor (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to use the liftEmptyBlock command in Tiptap Editor. The command lifts the currently selected empty textblock to its parent block if possible.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/api/commands/nodes-and-marks/lift-empty-block.mdx#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\neditor.commands.liftEmptyBlock()\n```\n\n----------------------------------------\n\nTITLE: Configuring Italic Extension HTML Attributes\nDESCRIPTION: Example showing how to configure custom HTML attributes for the Italic extension\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/marks/italic.mdx#2025-04-19_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nItalic.configure({\n  HTMLAttributes: {\n    class: 'my-custom-class',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Importing CodeDemo Component in JSX\nDESCRIPTION: This snippet imports the CodeDemo component, likely used to display interactive code examples in the documentation.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/custom-extensions/node-views/examples.mdx#2025-04-19_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { CodeDemo } from '@/components/CodeDemo'\n```\n\n----------------------------------------\n\nTITLE: Document Revert Request in JavaScript\nDESCRIPTION: Demonstrates how to send a document revert request to a specific version with optional title settings using the provider's sendStateless method.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/collaboration/documents/history.mdx#2025-04-19_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nprovider.sendStateless(\n  JSON.stringify({\n    action: 'document.revert',\n    version: 1,\n    currentVersionName: 'Before reverting to version 1',\n    newVersionName: 'Revert to version 1',\n  }),\n)\n```\n\n----------------------------------------\n\nTITLE: Basic ODT Export Implementation in Tiptap\nDESCRIPTION: Simple example showing how to export Tiptap editor content to ODT format or other supported formats like docx, md, and gfm.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/conversion/import-export/odt/editor-extensions.mdx#2025-04-19_snippet_6\n\nLANGUAGE: js\nCODE:\n```\n// Do a simple export to docx\n// Supported formats: docx, odt, md and gfm\neditor.chain().focus().export({ format: 'docx' }).run()\n```\n\n----------------------------------------\n\nTITLE: Removing Italic Text Command\nDESCRIPTION: Command to remove italic formatting from selected text\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/marks/italic.mdx#2025-04-19_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\neditor.commands.unsetItalic()\n```\n\n----------------------------------------\n\nTITLE: Filtering Diffs by User with onCompare\nDESCRIPTION: TypeScript example showing how to use the onCompare option to filter diffs by user and handle the diffing process manually.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/collaboration/documents/snapshot-compare.mdx#2025-04-19_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\neditor.chain().compareVersions({\n  fromVersion: 1,\n  toVersion: 3,\n  onCompare: (ctx) => {\n    if (ctx.error) {\n      // handle errors that occurred in the diffing process\n      console.error(ctx.error)\n      return\n    }\n\n    // filter the diffs to display only the changes made by a specific user\n    const diffsToDisplay = ctx.diffSet.filter((diff) => diff.attribution.userId === 'user-1')\n\n    editor.commands.showDiff(ctx.tr, { diffs: diffsToDisplay })\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Mark Retention for BulletList in Tiptap\nDESCRIPTION: Setting to keep marks from a previous line after toggling the list using input rules or buttons. Default is false.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/nodes/bullet-list.mdx#2025-04-19_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nBulletList.configure({\n  keepMarks: true,\n})\n```\n\n----------------------------------------\n\nTITLE: Installing BubbleMenu Extension with NPM\nDESCRIPTION: Command to install the BubbleMenu extension package using npm package manager\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/functionality/bubble-menu.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @tiptap/extension-bubble-menu\n```\n\n----------------------------------------\n\nTITLE: Document Statistics API Response Example\nDESCRIPTION: Example JSON response showing current connections and connected IPs for a specific document.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/collaboration/operations/metrics.mdx#2025-04-19_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"currentConnections\": 2,\n  \"connectedIps\": [\"127.0.0.1\", \"10.100.1.23\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Collaboration Extension and Dependencies\nDESCRIPTION: Command to install the Collaboration extension and its required dependencies using npm.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/functionality/collaboration.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @tiptap/extension-collaboration yjs y-websocket y-prosemirror\n```\n\n----------------------------------------\n\nTITLE: Installing Drag Handle Vue Extension and Dependencies\nDESCRIPTION: Command to install the Drag Handle Vue extension and its required dependencies using npm. Includes note about different versions for Vue 2 and Vue 3.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/functionality/drag-handle-vue.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @tiptap-pro/extension-drag-handle-vue-3 @tiptap-pro/extension-drag-handle @tiptap-pro/extension-node-range @tiptap/extension-collaboration y-prosemirror yjs y-protocols\n```\n\n----------------------------------------\n\nTITLE: Reverting a Document to a Specific Version with Tiptap Collaboration API using cURL\nDESCRIPTION: This snippet demonstrates how to revert a document to a specific previous version using the Tiptap Collaboration API. It sends a POST request to the /versions endpoint with the version ID to revert to.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/collaboration/documents/rest-api.mdx#2025-04-19_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location --request POST 'https://YOUR_APP_ID.collab.tiptap.cloud/api/documents/DOCUMENT_NAME/versions/VERSION_ID/revertTo' \\\n--header 'Content-Type: application/json' \\\n--header 'Authorization: YOUR_SECRET_FROM_SETTINGS_AREA'\n```\n\n----------------------------------------\n\nTITLE: Toggling Subscript Mark in Tiptap Editor using JavaScript\nDESCRIPTION: JavaScript command to toggle the subscript mark in the Tiptap editor.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/marks/subscript.mdx#2025-04-19_snippet_3\n\nLANGUAGE: js\nCODE:\n```\neditor.commands.toggleSubscript()\n```\n\n----------------------------------------\n\nTITLE: Installing Strike Extension for Tiptap\nDESCRIPTION: Command to install the Strike extension for Tiptap using npm.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/marks/strike.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @tiptap/extension-strike\n```\n\n----------------------------------------\n\nTITLE: Installing Y IndexedDB Extension for Tiptap\nDESCRIPTION: This command installs the Y IndexedDB adapter, which enables offline functionality for collaborative editing.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/guides/offline-support.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install y-indexeddb\n```\n\n----------------------------------------\n\nTITLE: Adding Content-Security-Policy Nonce to Tiptap Editor\nDESCRIPTION: This example demonstrates how to add a Content-Security-Policy nonce to dynamically created elements in the Tiptap Editor using the 'injectNonce' property.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/api/editor.mdx#2025-04-19_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Editor } from '@tiptap/core'\nimport StarterKit from '@tiptap/starter-kit'\n\nnew Editor({\n  extensions: [StarterKit],\n  injectCSS: true,\n  injectNonce: 'your-nonce-here',\n})\n```\n\n----------------------------------------\n\nTITLE: Customizing Thread Classes for Tiptap Comments in JavaScript\nDESCRIPTION: This code snippet shows the default thread classes used in Tiptap comments and how to customize them. It provides a way to override the default class names with custom ones for various thread states and types.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/comments/core-concepts/configure.mdx#2025-04-19_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  thread: 'tiptap-thread',\n  threadInline: 'tiptap-thread--inline',\n  threadBlock: 'tiptap-thread--block',\n  threadHovered: 'tiptap-thread--hovered',\n  threadSelected: 'tiptap-thread--selected',\n  threadResolved: 'tiptap-thread--resolved',\n  threadUnresolved: 'tiptap-thread--unresolved',\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nComments.configure({\n  classes: {\n    thread: 'my-thread',\n    threadInline: 'my-thread-inline',\n    threadBlock: 'my-thread-block',\n    threadHovered: 'my-thread-hovered',\n    threadSelected: 'my-thread-selected',\n    threadResolved: 'my-thread-resolved',\n    threadUnresolved: 'my-thread-unresolved',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Subscript Extension with Custom HTML Attributes in JavaScript\nDESCRIPTION: Example of how to configure the Subscript extension with custom HTML attributes using JavaScript.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/marks/subscript.mdx#2025-04-19_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nSubscript.configure({\n  HTMLAttributes: {\n    class: 'my-custom-class',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Displaying Tiptap Utilities Table in Markdown\nDESCRIPTION: This code snippet shows a markdown table listing Tiptap Utilities, including their names, descriptions, and links to detailed documentation. It covers HTML Utility, Suggestion Utility, and Tiptap for PHP.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/api/utilities/index.mdx#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Utility Name                                             | Description                                               |\n| -------------------------------------------------------- | --------------------------------------------------------- |\n| [`HTML Utility`](/editor/api/utilities/html)             | Handles JSON and HTML transformations server-side.        |\n| [`Suggestion Utility`](/editor/api/utilities/suggestion) | Adds customizable autocomplete suggestions to the editor. |\n| [`Tiptap for PHP`](/editor/api/utilities/tiptap-for-php) | Integrates Tiptap functionalities into PHP projects.      |\n```\n\n----------------------------------------\n\nTITLE: Example cURL Request for Updating a Comment\nDESCRIPTION: cURL example for updating a comment's content. Requires document ID, thread ID, comment ID, Authorization header, and JSON payload with the fields to update.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/comments/integrate/rest-api.mdx#2025-04-19_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location --request PATCH 'https://YOUR_APP_ID.collab.tiptap.cloud/api/documents/{document_id}/threads/{thread_id}/comments/{comment_id}' \\\n--header 'Content-Type: application/json' \\\n--header 'Authorization: {{Authorization}}' \\\n--data '{\n    \"content\": \"UPDATED!\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Enterprise Features Component in JSX\nDESCRIPTION: React component displaying enterprise-level features and capabilities of Tiptap's on-premises solution, including deployment options and support features.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/collaboration/getting-started/overview.mdx#2025-04-19_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<CtaBox.Wrapper className=\"mt-12\">\n  <CtaBox.Title>Enterprise on-premises solution</CtaBox.Title>\n  <CtaBox.Description>\n    Integrate Collaboration and all other Tiptap features into your infrastructure.\n  </CtaBox.Description>\n  <CtaBox.List>\n    <CtaBox.ListItem title=\"On-premises: \">\n      Deploy our docker images in your own stack\n    </CtaBox.ListItem>\n    <CtaBox.ListItem title=\"High availability cluster: \">\n      Scale confidently to millions of users\n    </CtaBox.ListItem>\n    <CtaBox.ListItem title=\"Dedicated support: \">\n      Custom development and integration support in Chat\n    </CtaBox.ListItem>\n  </CtaBox.List>\n  <CtaBox.Actions className=\"-mx-3\">\n    <Button className=\"text-white/80 hover:text-white/100\" variant=\"tertiary\" asChild>\n      <Link href=\"https://45pg7sjo8uw.typeform.com/to/DRCOgZGi\">\n        Let's talk\n        <ArrowRightIcon className=\"w-4 h-4\" />\n      </Link>\n    </Button>\n  </CtaBox.Actions>\n</CtaBox.Wrapper>\n```\n\n----------------------------------------\n\nTITLE: Disabling Click-to-Open Links\nDESCRIPTION: Configuration to disable opening links on click\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/marks/link.mdx#2025-04-19_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nLink.configure({\n  openOnClick: false,\n})\n```\n\n----------------------------------------\n\nTITLE: Unresolving a Thread with unresolveThread Command in JavaScript\nDESCRIPTION: Reverts a previously resolved thread back to its unresolved state. Used when a discussion needs to be reopened. Requires the thread ID as a parameter.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/comments/integrate/editor-commands.mdx#2025-04-19_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\neditor.commands.unresolveThread({\n  id: '101',\n})\n```\n\n----------------------------------------\n\nTITLE: Deleting a Thread in Tiptap Editor (JavaScript)\nDESCRIPTION: Demonstrates how to delete a thread using the removeThread command. It includes an option to permanently delete the thread from the yjs document.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/comments/core-concepts/manage-threads.mdx#2025-04-19_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\neditor.commands.removeThread({\n  id: '123',\n  deleteThread: true,\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Custom HTML Attributes\nDESCRIPTION: Configuration to add custom HTML attributes to the rendered details element, such as custom CSS classes.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/nodes/details.mdx#2025-04-19_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nDetails.configure({\n  HTMLAttributes: {\n    class: 'my-custom-class',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Heading Dropdown Menu via Tiptap CLI\nDESCRIPTION: Command to add the heading dropdown menu component to a Tiptap project using the Tiptap CLI. This works with Vite or Next.js projects.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/ui-components/components/heading-dropdown-menu.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx @tiptap/cli add heading-dropdown-menu\n```\n\n----------------------------------------\n\nTITLE: Installing HardBreak Extension for Tiptap\nDESCRIPTION: Command to install the HardBreak extension using npm package manager.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/nodes/hard-break.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @tiptap/extension-hard-break\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Document from Tiptap Collaboration\nDESCRIPTION: Shows how to export a specified document using the GET endpoint with authentication.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/collaboration/documents/rest-api.mdx#2025-04-19_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location 'https://YOUR_APP_ID.collab.tiptap.cloud/api/documents/DOCUMENT_NAME' \\\n--header 'Authorization: YOUR_SECRET_FROM_SETTINGS_AREA'\n```\n\n----------------------------------------\n\nTITLE: Adding HTML Markup for Tiptap Editor\nDESCRIPTION: HTML code that creates a container div with the class 'element' where the Tiptap editor will be mounted.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/getting-started/install/vanilla-javascript.mdx#2025-04-19_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"element\"></div>\n```\n\n----------------------------------------\n\nTITLE: Installing Color Extension Dependencies\nDESCRIPTION: Command to install the required npm packages for the Color extension and its dependency TextStyle mark.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/functionality/color.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @tiptap/extension-text-style @tiptap/extension-color\n```\n\n----------------------------------------\n\nTITLE: Setting Debounce Timeout for Suggestions\nDESCRIPTION: Example of configuring the debounce timeout for suggestion updates\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/content-ai/capabilities/suggestion/configure.mdx#2025-04-19_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nAiSuggestion.configure({\n  debounceTimeout: 1000,\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Tooltip Component in React\nDESCRIPTION: Example usage of the Tooltip component in a React component, demonstrating how to structure the Tooltip, TooltipTrigger, and TooltipContent elements.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/ui-components/primitives/tooltip.mdx#2025-04-19_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Tooltip, TooltipTrigger, TooltipContent } from '@/components/tiptap-ui-primitive/tooltip'\nimport { Button } from '@/components/tiptap-ui-primitive/button'\n\nexport default function MyComponent() {\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>\n        <Button data-style=\"ghost\">Hover Me</Button>\n      </TooltipTrigger>\n      <TooltipContent>\n        <p>Tooltip content</p>\n      </TooltipContent>\n    </Tooltip>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Table of List Commands\nDESCRIPTION: A markdown table displaying the core list manipulation commands available in Tiptap editor with their descriptions. Includes commands for lifting, sinking, splitting, toggling, and wrapping list items.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/api/commands/lists/index.mdx#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Command         | Description                                                                                 |\n| --------------- | ------------------------------------------------------------------------------------------- |\n| `liftListItem`  | Attempts to lift the list item around the current selection up into a wrapping parent list. |\n| `sinkListItem`  | Sinks the list item around the current selection down into a wrapping child list.           |\n| `splitListItem` | Splits one list item into two separate list items.                                          |\n| `toggleList`    | Toggles between different types of lists.                                                   |\n| `wrapInList`    | Wraps a node in the current selection in a list.                                            |\n```\n\n----------------------------------------\n\nTITLE: Rendering Call-to-Action Box for Tiptap Enterprise Solution\nDESCRIPTION: This JSX code snippet renders a call-to-action box promoting Tiptap's enterprise on-premises solution. It includes a title, description, feature list, and a button linking to a contact form.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/collaboration/documents/index.mdx#2025-04-19_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<CtaBox.Wrapper className=\"mt-12\">\n  <CtaBox.Title>Enterprise on-premises solution</CtaBox.Title>\n  <CtaBox.Description>\n    Integrate Collaboration and all other Tiptap features into your infrastructure.\n  </CtaBox.Description>\n  <CtaBox.List>\n    <CtaBox.ListItem title=\"On-premises: \">\n      Deploy our docker images in your own stack\n    </CtaBox.ListItem>\n    <CtaBox.ListItem title=\"High availability cluster: \">\n      Scale confidently to millions of users\n    </CtaBox.ListItem>\n    <CtaBox.ListItem title=\"Dedicated support: \">\n      Custom development and integration support in Chat\n    </CtaBox.ListItem>\n  </CtaBox.List>\n  <CtaBox.Actions className=\"-mx-3\">\n    <Button className=\"text-white/80 hover:text-white/100\" variant=\"tertiary\" asChild>\n      <Link href=\"https://45pg7sjo8uw.typeform.com/to/DRCOgZGi\">\n        Let's talk\n        <ArrowRightIcon className=\"w-4 h-4\" />\n      </Link>\n    </Button>\n  </CtaBox.Actions>\n</CtaBox.Wrapper>\n```\n\n----------------------------------------\n\nTITLE: Navigating to Next Cell\nDESCRIPTION: Command to move the cursor to the next cell in the table.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/nodes/table.mdx#2025-04-19_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\neditor.commands.goToNextCell()\n```\n\n----------------------------------------\n\nTITLE: Image Upload Server Implementation with Hono and AWS S3\nDESCRIPTION: Server implementation example using Hono framework and AWS S3 for handling image uploads from Tiptap's conversion service.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/conversion/import-export/docx/preserve-images.mdx#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { serve } from '@hono/node-server'\nimport { Hono } from 'hono'\nimport { Upload } from '@aws-sdk/lib-storage'\nimport { S3Client } from '@aws-sdk/client-s3'\n\nconst {\n  AWS_ACCESS_KEY_ID,\n  AWS_SECRET_ACCESS_KEY,\n  AWS_REGION,\n  AWS_S3_BUCKET,\n  PORT = '3011',\n  AWS_ENDPOINT,\n  AWS_FORCE_STYLE,\n} = process.env\n\nif (!AWS_ACCESS_KEY_ID || !AWS_SECRET_ACCESS_KEY || !AWS_S3_BUCKET) {\n  console.error('Please provide AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, and AWS_S3_BUCKET')\n  process.exit(1)\n}\n\nconst s3 = new S3Client({\n  credentials: {\n    accessKeyId: AWS_ACCESS_KEY_ID,\n    secretAccessKey: AWS_SECRET_ACCESS_KEY,\n  },\n\n  region: AWS_REGION,\n  endpoint: AWS_ENDPOINT,\n  forcePathStyle: AWS_FORCE_STYLE === 'true',\n})\n\nconst app = new Hono() as Hono<any>\n\napp.post('/upload', async (c) => {\n  const body = await c.req.parseBody()\n  const file = body['file']\n\n  if (!file || typeof file === 'string') {\n    return c.json({ error: 'No file uploaded' }, 400)\n  }\n\n  try {\n    const data = await new Upload({\n      client: s3,\n      params: {\n        Bucket: AWS_S3_BUCKET,\n        // file.name is just current timestamp & file extension\n        Key: file.name,\n        Body: file,\n        ContentType: file.type,\n      },\n    }).done()\n\n    return c.json({ url: data.Location })\n  } catch (error) {\n    console.error(error)\n    return c.json({ error: 'Failed to upload file' }, 500)\n  }\n})\n\nserve({\n  fetch: app.fetch,\n  port: Number(PORT) || 3000,\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring TableRow Without TableHeader Support in JavaScript\nDESCRIPTION: This snippet shows how to modify the TableRow extension to disable table headers by restricting its content to only table cells.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/nodes/table-header.mdx#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Table rows without table headers\nTableRow.extend({\n  content: 'tableCell*',\n})\n```\n\n----------------------------------------\n\nTITLE: Removing Superscript Mark in Tiptap Editor\nDESCRIPTION: Command to remove the superscript mark from text in the Tiptap editor.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/marks/superscript.mdx#2025-04-19_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\neditor.commands.unsetSuperscript()\n```\n\n----------------------------------------\n\nTITLE: Deselecting a Thread with unselectThread Command in JavaScript\nDESCRIPTION: Removes focus from the currently selected thread. This command takes no parameters and simply clears any active thread selection.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/comments/integrate/editor-commands.mdx#2025-04-19_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\neditor.commands.unselectThread()\n```\n\n----------------------------------------\n\nTITLE: Configuring ListItem HTML Attributes in JavaScript\nDESCRIPTION: Example of configuring custom HTML attributes for the ListItem extension, showing how to add custom CSS classes to the rendered HTML elements.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/nodes/list-item.mdx#2025-04-19_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nListItem.configure({\n  HTMLAttributes: {\n    class: 'my-custom-class',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Installing jsonwebtoken Package with NPM\nDESCRIPTION: Installs the jsonwebtoken NPM package required for JWT generation in a Node.js environment. This package provides functionality for creating and verifying JSON Web Tokens.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/collaboration/getting-started/authenticate.mdx#2025-04-19_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm install jsonwebtoken\n```\n\n----------------------------------------\n\nTITLE: Creating a new SvelteKit project for Tiptap integration\nDESCRIPTION: Commands to create a new SvelteKit project, navigate to the project directory, install dependencies, and start the development server.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/getting-started/install/svelte.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm create svelte@latest my-tiptap-project\ncd my-tiptap-project\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Installing Subscript Extension for Tiptap in Node.js\nDESCRIPTION: Command to install the Subscript extension for Tiptap using npm package manager.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/marks/subscript.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @tiptap/extension-subscript\n```\n\n----------------------------------------\n\nTITLE: Server Statistics API Response Example\nDESCRIPTION: Example JSON response from the /api/statistics endpoint showing server-wide metrics including document counts, connection statistics, and version information.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/collaboration/operations/metrics.mdx#2025-04-19_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"totalDocuments\": 4,\n  \"totalConnections30d\": \"3\",\n  \"maxConcurrentConnections30d\": 3,\n  \"lifetimeConnections\": \"144\",\n  \"currentConnectionsCount\": 3,\n  \"currentLoadedDocumentsCount\": 1,\n  \"openDocuments\": [\"testdocument\"],\n  \"connectionsPerDocument\": {\n    \"testdocument\": 3\n  },\n  \"version\": \"3.33.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Clearing AI Suggestion Context in TypeScript\nDESCRIPTION: This snippet shows how to clear the AI suggestion context by setting it to null using the setAiSuggestionContext command.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/content-ai/capabilities/suggestion/features/provide-llm-context.mdx#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\neditor.commands.setAiSuggestionContext(null)\n```\n\n----------------------------------------\n\nTITLE: Removing Font Family in Tiptap Editor\nDESCRIPTION: JavaScript command to remove any applied font family from the selected text in the Tiptap editor.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/functionality/fontfamily.mdx#2025-04-19_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\neditor.commands.unsetFontFamily()\n```\n\n----------------------------------------\n\nTITLE: Setting Awareness Fields in Tiptap Collaboration with TypeScript\nDESCRIPTION: Sets the awareness field for the current user with basic information like name and color. This information will be shared with all connected users in real-time.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/collaboration/core-concepts/awareness.mdx#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Set the awareness field for the current user\nprovider.setAwarenessField('user', {\n  // Share any information you like\n  name: 'Kevin James',\n  color: '#ffcc00',\n})\n```\n\n----------------------------------------\n\nTITLE: Installing InvisibleCharacters Extension for Tiptap\nDESCRIPTION: Command to install the InvisibleCharacters extension from Tiptap's private repository.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/functionality/invisiblecharacters.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @tiptap-pro/extension-invisible-characters\n```\n\n----------------------------------------\n\nTITLE: Setting Item Type Name for BulletList in Tiptap\nDESCRIPTION: Configuration to specify the list item name for the BulletList extension. The default value is 'listItem'.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/nodes/bullet-list.mdx#2025-04-19_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nBulletList.configure({\n  itemTypeName: 'listItem',\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Text Extension for Tiptap\nDESCRIPTION: Command to install the Text extension for Tiptap editor using npm. This extension is essential for working with text content in the editor.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/nodes/text.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @tiptap/extension-text\n```\n\n----------------------------------------\n\nTITLE: Converting ODT to Tiptap JSON using cURL\nDESCRIPTION: This snippet demonstrates how to convert an ODT file to Tiptap's JSON format using the /import endpoint with cURL. It includes the necessary authorization headers and file upload parameter.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/conversion/import-export/odt/rest-api.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \"https://api.tiptap.dev/v1/import\" \\\n  -H \"Authorization: Bearer <your-jwt-token>\" \\\n  -H \"X-App-Id: <your-app-id>\" \\\n  -F \"file=@/path/to/document.odt\"\n```\n\n----------------------------------------\n\nTITLE: Updating Thread Properties with updateThread Command in JavaScript\nDESCRIPTION: Updates specific properties of an existing thread identified by its ID. In this example, it marks the thread as seen by the current user.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/comments/integrate/editor-commands.mdx#2025-04-19_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\neditor.commands.updateThread({\n  id: '101',\n  data: { seen: true },\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Dropdown Menu in React with Tiptap UI Primitives\nDESCRIPTION: Example of how to use the dropdown menu component in a React component. It demonstrates the structure and basic usage of various dropdown menu parts.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/ui-components/primitives/dropdown-menu.mdx#2025-04-19_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuGroup,\n  DropdownMenuItem,\n} from '@/components/tiptap-ui-primitive/dropdown-menu'\nimport { Button } from '@/components/tiptap-ui-primitive/button'\n\nexport default function MyComponent() {\n  return (\n    <DropdownMenu>\n      <DropdownMenuTrigger asChild>\n        <Button data-style=\"ghost\">Open Menu</Button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent>\n        <DropdownMenuGroup>\n          <DropdownMenuItem asChild>\n            <Button data-style=\"ghost\" onClick={() => console.log('Item 1')}>\n              Menu Item 1\n            </Button>\n          </DropdownMenuItem>\n          <DropdownMenuItem asChild>\n            <Button data-style=\"ghost\" onClick={() => console.log('Item 2')}>\n              Menu Item 2\n            </Button>\n          </DropdownMenuItem>\n        </DropdownMenuGroup>\n      </DropdownMenuContent>\n    </DropdownMenu>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring React Tiptap Editor Frontmatter\nDESCRIPTION: Markdown frontmatter configuration for the documentation page, setting up meta information and page structure.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/examples/advanced/react-performance.mdx#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: React rendering performance\nmeta:\n  title: React rendering performance demo | Tiptap Editor Docs\n  description: Learn how to integrate Tiptap with React and improve the rendering performance of your editor. More in the docs!\n  category: Examples\n---\n```\n\n----------------------------------------\n\nTITLE: Installing Image Upload Button via Tiptap CLI\nDESCRIPTION: Command to install the image upload button component using Tiptap CLI for Vite or Next.js projects.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/ui-components/components/image-upload-button.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx @tiptap/cli add image-upload-button\n```\n\n----------------------------------------\n\nTITLE: Installing Tippy.js Dependency\nDESCRIPTION: Command to install the Tippy.js dependency used for popup positioning.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/nodes/emoji.mdx#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install tippy.js\n```\n\n----------------------------------------\n\nTITLE: Importing Required Tiptap Extensions for DOCX Content\nDESCRIPTION: JavaScript code snippet showing the import statements for various Tiptap extensions needed to fully support DOCX content elements like images, tables, and styled text.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/conversion/import-export/docx/editor-import.mdx#2025-04-19_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport StarterKit from '@tiptap/starter-kit'\nimport Color from '@tiptap/extension-color'\nimport FontFamily from '@tiptap/extension-font-family'\nimport Highlight from '@tiptap/extension-highlight'\nimport { Image } from '@tiptap/extension-image'\nimport Link from '@tiptap/extension-link'\nimport Paragraph from '@tiptap/extension-paragraph'\nimport Table from '@tiptap/extension-table'\nimport TableCell from '@tiptap/extension-table-cell'\nimport TableHeader from '@tiptap/extension-table-header'\nimport TableRow from '@tiptap/extension-table-row'\nimport TextAlign from '@tiptap/extension-text-align'\nimport TextStyle from '@tiptap/extension-text-style'\nimport Underline from '@tiptap/extension-underline'\n```\n\n----------------------------------------\n\nTITLE: Setting Authentication Token for Yarn Classic and npm\nDESCRIPTION: Command to add the Tiptap Pro authentication token to the global configuration for Yarn Classic and npm. This enables authentication for all projects.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/guides/pro-extensions.mdx#2025-04-19_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpm config set \"//registry.tiptap.dev/:_authToken\" actual-auth-token\n```\n\n----------------------------------------\n\nTITLE: Configuring Trailing Node Behavior in JavaScript\nDESCRIPTION: This code snippet demonstrates how to configure the behavior of the Trailing Node extension. It sets the node type to 'paragraph' and specifies that it should not be added after existing paragraphs.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/examples/experiments/trailing-node.mdx#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\naddOptions() {\n    return {\n        node: 'paragraph',\n        notAfter: ['paragraph'],\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Installing List Button component with Tiptap CLI for Vite or Next.js\nDESCRIPTION: Command to install the list-button component using Tiptap CLI for Vite or Next.js projects. This is the recommended installation method for these frameworks.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/ui-components/components/list-button.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx @tiptap/cli add list-button\n```\n\n----------------------------------------\n\nTITLE: Comparing Document Versions\nDESCRIPTION: TypeScript example showing how to use the compareVersions command to display differences between document versions.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/collaboration/documents/snapshot-compare.mdx#2025-04-19_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\neditor.chain().compareVersions({\n  fromVersion: 1,\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Typography Extension with NPM\nDESCRIPTION: Command to install the Typography extension package for Tiptap editor via NPM.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/functionality/typography.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @tiptap/extension-typography\n```\n\n----------------------------------------\n\nTITLE: Comment Deletion Payload in JSON\nDESCRIPTION: Example payload for a webhook event triggered when a comment is deleted. It includes details about the deleted comment and the associated thread.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/comments/integrate/webhook.mdx#2025-04-19_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"trigger\": \"comment.deleted\",\n  \"thread\": {\n    \"id\": \"128ba3a9-c684-4956-8c9f-fe5dc147c7e5\",\n    \"createdAt\": \"2024-03-02T22:17:51.304Z\",\n    \"comments\": [\n      {\n        \"id\": \"0259e4cb-43ad-4eb2-a7e9-a7a7d5207a76\",\n        \"createdAt\": \"2024-03-02T22:17:51.307Z\",\n        \"updatedAt\": \"2024-03-02T22:18:04.246Z\",\n        \"data\": {\n          \"userName\": \"Cyndi Lauper\",\n          \"userAvatar\": \"https://api.dicebear.com/7.x/lorelei/svg?seed=Cyndi Lauper\"\n        },\n        \"content\": \"Threaderstellungskommentar (bearbeitet)\"\n      }\n    ],\n    \"updatedAt\": \"2024-03-02T22:17:51.305Z\"\n  },\n  \"comment\": {\n    \"id\": \"1841e650-2202-42b6-a868-907fee42ccf7\",\n    \"createdAt\": \"2024-03-02T22:18:20.974Z\",\n    \"updatedAt\": \"2024-03-02T22:18:20.975Z\",\n    \"data\": {\n      \"userName\": \"Cyndi Lauper\",\n      \"userAvatar\": \"https://api.dicebear.com/7.x/lorelei/svg?seed=Cyndi Lauper\"\n    },\n    \"content\": \"Zweites Kommentar, selber Thread\"\n  },\n  \"appName\": \"\",\n  \"user\": \"\",\n  \"name\": \"documentName\",\n  \"type\": \"THREAD\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Content Preview Watcher in JavaScript\nDESCRIPTION: Shows how to establish a watcher for version content changes using the collaboration provider. Returns an unwatcher function for cleanup.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/collaboration/documents/history.mdx#2025-04-19_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst unwatchContent = watchPreviewContent(provider, editor.commands.setContent, 'default')\n\n// unwatch the version preview content\nunwatchContent()\n```\n\n----------------------------------------\n\nTITLE: Implementing Spacer component in React\nDESCRIPTION: Example React code demonstrating how to import and use the Spacer component to create space between toolbar buttons. The component acts as a flexible spacer that pushes elements to opposite sides.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/ui-components/primitives/spacer.mdx#2025-04-19_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Spacer } from '@/components/tiptap-ui-primitive/spacer'\n\nexport default function MyComponent() {\n  return (\n    <div className=\"toolbar\">\n      <button>Left Button</button>\n      <Spacer />\n      <button>Right Button</button>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring .yarnrc.yml for Tiptap Pro Registry Authentication\nDESCRIPTION: Configuration for Yarn Modern (2+) to authenticate to the Tiptap private registry using .yarnrc.yml file. This setup defines the npm scope, registry server, and authentication settings for Pro extensions.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/guides/pro-extensions.mdx#2025-04-19_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nnpmScopes:\n tiptap-pro:\n   npmAlwaysAuth: true\n   npmRegistryServer: \"https://registry.tiptap.dev/\"\n   npmAuthToken: ${TIPTAP_PRO_TOKEN}\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Specific Thread by ID\nDESCRIPTION: GET request to fetch details of a specific thread using its unique identifier within a document. Useful for retrieving individual discussion threads.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/comments/integrate/rest-api.mdx#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nGET /api/documents/:identifier/threads/:threadIdentifier\n```\n\n----------------------------------------\n\nTITLE: Including CodeDemo Component with Path in Markdown\nDESCRIPTION: This markdown code includes the CodeDemo component, specifying a path to the example file for the CodeBlockLanguage feature.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/examples/advanced/syntax-highlighting.mdx#2025-04-19_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n<CodeDemo path=\"/Examples/CodeBlockLanguage\" />\n```\n\n----------------------------------------\n\nTITLE: Embedding CodeDemo Component for Menus Example\nDESCRIPTION: This code embeds the CodeDemo component, which presumably renders an interactive example of the menus implementation for text alignment.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/examples/advanced/menus.mdx#2025-04-19_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<CodeDemo path=\"/Examples/Menus\" />\n```\n\n----------------------------------------\n\nTITLE: Installing TextAlign Extension with NPM\nDESCRIPTION: Command to install the TextAlign extension package via npm.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/functionality/textalign.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @tiptap/extension-text-align\n```\n\n----------------------------------------\n\nTITLE: Importing CodeDemo Component for Task List Example in Tiptap\nDESCRIPTION: This code snippet imports the CodeDemo component, which is used to display a live code example of a Tiptap editor with task list functionality.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/examples/basics/tasks.mdx#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { CodeDemo } from '@/components/CodeDemo'\n```\n\n----------------------------------------\n\nTITLE: Setting Origin Domain for YouTube IFrame API\nDESCRIPTION: Provides an extra security measure for the IFrame API by specifying the domain origin.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/nodes/youtube.mdx#2025-04-19_snippet_12\n\nLANGUAGE: js\nCODE:\n```\nYoutube.configure({\n  origin: 'yourdomain.com',\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Tiptap Pro Registry for Yarn Classic and npm\nDESCRIPTION: Command to configure global Tiptap Pro registry settings for Yarn Classic and npm. This sets up the registry URL for all projects on the system.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/guides/pro-extensions.mdx#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm config set \"@tiptap-pro:registry\" https://registry.tiptap.dev/\n```\n\n----------------------------------------\n\nTITLE: Installing Tiptap Comments Extension via npm\nDESCRIPTION: Command to install the @tiptap-pro/extension-comments package using npm. This extension requires a valid subscription and a running Tiptap Cloud instance.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/comments/getting-started/install.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @tiptap-pro/extension-comments\n```\n\n----------------------------------------\n\nTITLE: Installing Node Button Component with Tiptap CLI\nDESCRIPTION: Command to add the node-button component to your project using Tiptap CLI. This works with Vite or Next.js projects.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/ui-components/components/node-button.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx @tiptap/cli add node-button\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Metadata for Tiptap CodeBlockLowlight Example\nDESCRIPTION: This YAML block defines metadata for the page, including title, meta title, description, and category. It's used for SEO and page organization within the Tiptap documentation.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/examples/advanced/syntax-highlighting.mdx#2025-04-19_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Using the CodeBlockLowlight extension in Tiptap\nmeta:\n  title: Syntax highlighting example | Tiptap Editor Docs\n  description: Learn how to create code blocks with syntax highlighting with Tiptap with an easy example. More in our docs!\n  category: Examples\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Tiptap Export Extension in JavaScript\nDESCRIPTION: JavaScript code to configure the Export extension in a Tiptap editor. It shows how to set up the extension with an app ID and JWT token.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/conversion/import-export/markdown/editor-extensions.mdx#2025-04-19_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Export } from '@tiptap-pro/extension-export'\n\nconst editor = new Editor({\n  // ...\n  extensions: [\n    // ...\n    Export.configure({\n      appId: 'your-app-id',\n      token: 'your-jwt',\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Importing ProseMirror State Module\nDESCRIPTION: Example showing how to import the EditorState class from ProseMirror state package using the @tiptap/pm package.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/core-concepts/prosemirror.mdx#2025-04-19_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { EditorState } from '@tiptap/pm/state'\n```\n\n----------------------------------------\n\nTITLE: Setting New Group Delay for History in Tiptap\nDESCRIPTION: JavaScript code to set the delay between changes after which a new group should be started in milliseconds.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/functionality/undo-redo.mdx#2025-04-19_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nHistory.configure({\n  newGroupDelay: 1000,\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Video Annotations Display for YouTube Videos\nDESCRIPTION: Controls whether video annotations are shown by default in the YouTube player.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/nodes/youtube.mdx#2025-04-19_snippet_15\n\nLANGUAGE: js\nCODE:\n```\nYoutube.configure({\n  ivLoadPolicy: '3',\n})\n```\n\n----------------------------------------\n\nTITLE: Default Items Function Signature\nDESCRIPTION: TypeScript function signature showing the default implementation of the items property that returns filtered suggestions.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/api/utilities/suggestion.mdx#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n({ editor, query }) => []\n```\n\n----------------------------------------\n\nTITLE: Installing List Dropdown Menu Component with Tiptap CLI\nDESCRIPTION: Command to add the list-dropdown-menu component to your project using Tiptap CLI for Vite or Next.js applications.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/ui-components/components/list-dropdown-menu.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx @tiptap/cli add list-dropdown-menu\n```\n\n----------------------------------------\n\nTITLE: Listing Tiptap Settings - Bash\nDESCRIPTION: API call to retrieve all current settings from Tiptap Collaboration. Requires authorization header.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/collaboration/operations/configure.mdx#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location 'https://YOUR_APP_ID.collab.tiptap.cloud/api/admin/settings' \\\n--header 'Authorization: YOUR_SECRET_FROM_SETTINGS_AREA'\n```\n\n----------------------------------------\n\nTITLE: Configuring Emoji Suggestions\nDESCRIPTION: Example of configuring the suggestion feature for emoji picking.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/nodes/emoji.mdx#2025-04-19_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nEmoji.configure({\n  suggestion: {\n    // ‚Ä¶\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Text Align Button via Tiptap CLI\nDESCRIPTION: Command to add the text alignment button component using Tiptap CLI for Vite or Next.js projects\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/ui-components/components/text-align-button.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx @tiptap/cli add text-align-button\n```\n\n----------------------------------------\n\nTITLE: Installing Tiptap Placeholder Extension\nDESCRIPTION: Command to install the placeholder extension via npm package manager.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/functionality/placeholder.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @tiptap/extension-placeholder\n```\n\n----------------------------------------\n\nTITLE: Implementing the Tiptap component in a Svelte route\nDESCRIPTION: Code showing how to import and use the Tiptap component in a Svelte route file. This demonstrates the integration of the custom Tiptap component into the main application structure.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/getting-started/install/svelte.mdx#2025-04-19_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import Tiptap from '$lib/Tiptap.svelte'\n</script>\n\n<main>\n  <Tiptap />\n</main>\n```\n\n----------------------------------------\n\nTITLE: Installing Suggestion Dependency\nDESCRIPTION: Command to install the required suggestion peer dependency for the mention extension.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/nodes/mention.mdx#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @tiptap/suggestion\n```\n\n----------------------------------------\n\nTITLE: Example cURL Request for Getting a Specific Thread\nDESCRIPTION: cURL example for retrieving a specific thread by its ID. Requires both document ID and thread ID in the URL path along with Authorization header.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/comments/integrate/rest-api.mdx#2025-04-19_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location 'https://YOUR_APP_ID.collab.tiptap.cloud/api/documents/{document_id}/threads/{thread_id}' \\\n--header 'Authorization: {{Authorization}}'\n```\n\n----------------------------------------\n\nTITLE: Installing Tiptap Trigger Button Component with CLI\nDESCRIPTION: Command to install the trigger button component using Tiptap's CLI tool. This adds the necessary component to your project.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/ui-components/components/trigger-button.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx @tiptap/cli add trigger-button\n```\n\n----------------------------------------\n\nTITLE: Configuring HTML Attributes for TaskItem\nDESCRIPTION: Example showing how to add custom HTML attributes to the TaskItem extension, such as custom CSS classes.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/nodes/task-item.mdx#2025-04-19_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nTaskItem.configure({\n  HTMLAttributes: {\n    class: 'my-custom-class',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Handling Saved Event in JavaScript\nDESCRIPTION: Demonstrates how to handle the 'saved' stateless message to retrieve the last saved timestamp.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/collaboration/documents/history.mdx#2025-04-19_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nprovider.on('stateless', (data) => {\n  const payload = JSON.parse(data.payload)\n\n  if (payload.action === 'saved') {\n    const lastSaved = new Date()\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Drag Handle Extension for Tiptap\nDESCRIPTION: Command to install the Drag Handle extension from Tiptap's private repository. Requires a Tiptap account and access to the private repository.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/functionality/drag-handle.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @tiptap-pro/extension-drag-handle\n```\n\n----------------------------------------\n\nTITLE: Creating Vue Project with CLI\nDESCRIPTION: Commands to create a new Vue project and navigate to its directory using Vue CLI\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/getting-started/install/vue3.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# create a project\nvue create my-tiptap-project\n\n# change directory\ncd my-tiptap-project\n```\n\n----------------------------------------\n\nTITLE: Setting HTML Attributes\nDESCRIPTION: Example of configuring custom HTML attributes for the rendered code block element.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/nodes/code-block-lowlight.mdx#2025-04-19_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nCodeBlockLowlight.configure({\n  HTMLAttributes: {\n    class: 'my-custom-class',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Updating an Existing Comment\nDESCRIPTION: PATCH request to update the content or metadata of an existing comment within a thread. Only updates specified fields while preserving others.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/comments/integrate/rest-api.mdx#2025-04-19_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nPATCH /api/documents/:identifier/threads/:threadIdentifier/comments/:commentIdentifier\n```\n\n----------------------------------------\n\nTITLE: Setting Tiptap Pro Registry for pnpm\nDESCRIPTION: Command to configure global Tiptap Pro registry settings for pnpm. This defines the registry URL for all projects using pnpm on the system.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/guides/pro-extensions.mdx#2025-04-19_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npnpm config set --global \"@tiptap-pro:registry\" https://registry.tiptap.dev/\n```\n\n----------------------------------------\n\nTITLE: Default FindSuggestionMatch Function Type\nDESCRIPTION: TypeScript type signature for the findSuggestionMatch configuration option that handles regex matching of editor content.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/api/utilities/suggestion.mdx#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfindSuggestionMatch(config: Trigger): SuggestionMatch\n```\n\n----------------------------------------\n\nTITLE: Multi-line Placeholder CSS Style\nDESCRIPTION: CSS styling to display placeholders on every new empty line in the editor.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/functionality/placeholder.mdx#2025-04-19_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n.tiptap p.is-empty::before {\n  color: #adb5bd;\n  content: attr(data-placeholder);\n  float: left;\n  height: 0;\n  pointer-events: none;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Vue 2 Project with CLI\nDESCRIPTION: Commands to create a new Vue 2 project using Vue CLI and navigate to the project directory.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/getting-started/install/vue2.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# create a project\nvue create my-tiptap-project\n\n# change directory\ncd my-tiptap-project\n```\n\n----------------------------------------\n\nTITLE: Installing Highlight Extension for Tiptap\nDESCRIPTION: Command to install the Highlight extension for Tiptap Editor using npm.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/marks/highlight.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @tiptap/extension-highlight\n```\n\n----------------------------------------\n\nTITLE: Rendering Experimental Features Gallery in JSX\nDESCRIPTION: This code snippet renders a filterable grid of experimental Tiptap features using JSX components. It showcases various experimental capabilities including collaborative editing, figures, iframes, linting, slash commands, and trailing nodes.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/examples/index.mdx#2025-04-19_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<FilterGrid.Wrapper filters={['Editor', 'Collaboration']}>\n  <CardGrid.Wrapper className=\"sm:grid-cols-3\">\n    <FilterGrid.Item filter={['Editor', 'Collaboration']}>\n      <CardGrid.Item asChild>\n        <Link href=\"/examples/experiments/collaborative-fields\">\n          <CardGrid.ItemImage\n            asNextImage\n            src={cardCoverCollaborativeFields.src}\n            width={cardCoverCollaborativeFields.width}\n            height={cardCoverCollaborativeFields.height}\n            alt=\"Image\"\n          />\n          <div>\n            <CardGrid.ItemTitle>Collaborative fields</CardGrid.ItemTitle>\n            <CardGrid.ItemParagraph>\n              Save separate data to one collaborative Yjs document with Tiptap via fields.\n            </CardGrid.ItemParagraph>\n          </div>\n          <CardGrid.ItemFooter>\n            <Tag>Editor</Tag>\n            <Tag>Collaboration</Tag>\n          </CardGrid.ItemFooter>\n        </Link>\n      </CardGrid.Item>\n    </FilterGrid.Item>\n    <FilterGrid.Item filter={['Editor']}>\n      <CardGrid.Item asChild>\n        <Link href=\"/examples/experiments/figure\">\n          <CardGrid.ItemImage\n            asNextImage\n            src={cardCoverCollaborativeFigure.src}\n            width={cardCoverCollaborativeFigure.width}\n            height={cardCoverCollaborativeFigure.height}\n            alt=\"Image\"\n          />\n          <div>\n            <CardGrid.ItemTitle>Figure</CardGrid.ItemTitle>\n            <CardGrid.ItemParagraph>\n              Create image nodes and enhance them with figures.\n            </CardGrid.ItemParagraph>\n          </div>\n          <CardGrid.ItemFooter>\n            <Tag>Editor</Tag>\n          </CardGrid.ItemFooter>\n        </Link>\n      </CardGrid.Item>\n    </FilterGrid.Item>\n    <FilterGrid.Item filter={['Editor']}>\n      <CardGrid.Item asChild>\n        <Link href=\"/examples/experiments/generic-figure\">\n          <CardGrid.ItemImage\n            asNextImage\n            src={cardCoverCollaborativeGenericFigure.src}\n            width={cardCoverCollaborativeGenericFigure.width}\n            height={cardCoverCollaborativeGenericFigure.height}\n            alt=\"Image\"\n          />\n          <div>\n            <CardGrid.ItemTitle>Generic Figure</CardGrid.ItemTitle>\n            <CardGrid.ItemParagraph>\n              Create nodes with figure support via a generic figure extension.\n            </CardGrid.ItemParagraph>\n          </div>\n          <CardGrid.ItemFooter>\n            <Tag>Editor</Tag>\n          </CardGrid.ItemFooter>\n        </Link>\n      </CardGrid.Item>\n    </FilterGrid.Item>\n    <FilterGrid.Item filter={['Editor']}>\n      <CardGrid.Item asChild>\n        <Link href=\"/examples/experiments/iframe\">\n          <CardGrid.ItemImage\n            asNextImage\n            src={cardCoverCollaborativeiFrame.src}\n            width={cardCoverCollaborativeiFrame.width}\n            height={cardCoverCollaborativeiFrame.height}\n            alt=\"Image\"\n          />\n          <div>\n            <CardGrid.ItemTitle>iFrame</CardGrid.ItemTitle>\n            <CardGrid.ItemParagraph>Embed iframes in your editor content</CardGrid.ItemParagraph>\n          </div>\n          <CardGrid.ItemFooter>\n            <Tag>Editor</Tag>\n          </CardGrid.ItemFooter>\n        </Link>\n      </CardGrid.Item>\n    </FilterGrid.Item>\n    <FilterGrid.Item filter={['Editor']}>\n      <CardGrid.Item asChild>\n        <Link href=\"/examples/experiments/linting\">\n          <CardGrid.ItemImage\n            asNextImage\n            src={cardCoverCollaborativeLinting.src}\n            width={cardCoverCollaborativeLinting.width}\n            height={cardCoverCollaborativeLinting.height}\n            alt=\"Image\"\n          />\n          <div>\n            <CardGrid.ItemTitle>Linting</CardGrid.ItemTitle>\n            <CardGrid.ItemParagraph>\n              Create a document linter for your Tiptap editor.\n            </CardGrid.ItemParagraph>\n          </div>\n          <CardGrid.ItemFooter>\n            <Tag>Editor</Tag>\n          </CardGrid.ItemFooter>\n        </Link>\n      </CardGrid.Item>\n    </FilterGrid.Item>\n    <FilterGrid.Item filter={['Editor']}>\n      <CardGrid.Item asChild>\n        <Link href=\"/examples/experiments/slash-commands\">\n          <CardGrid.ItemImage\n            asNextImage\n            src={cardCoverCollaborativeSlashCommands.src}\n            width={cardCoverCollaborativeSlashCommands.width}\n            height={cardCoverCollaborativeSlashCommands.height}\n            alt=\"Image\"\n          />\n          <div>\n            <CardGrid.ItemTitle>Slash commands</CardGrid.ItemTitle>\n            <CardGrid.ItemParagraph>\n              Add a toolbar that pops up at the slash position\n            </CardGrid.ItemParagraph>\n          </div>\n          <CardGrid.ItemFooter>\n            <Tag>Editor</Tag>\n          </CardGrid.ItemFooter>\n        </Link>\n      </CardGrid.Item>\n    </FilterGrid.Item>\n    <FilterGrid.Item filter={['Editor']}>\n      <CardGrid.Item asChild>\n        <Link href=\"/examples/experiments/trailing-node\">\n          <CardGrid.ItemImage\n            asNextImage\n            src={cardCoverCollaborativeTrailingNode.src}\n            width={cardCoverCollaborativeTrailingNode.width}\n            height={cardCoverCollaborativeTrailingNode.height}\n            alt=\"Image\"\n          />\n          <div>\n            <CardGrid.ItemTitle>Trailing node</CardGrid.ItemTitle>\n            <CardGrid.ItemParagraph>Add a node at the end of the document</CardGrid.ItemParagraph>\n          </div>\n          <CardGrid.ItemFooter>\n            <Tag>Editor</Tag>\n          </CardGrid.ItemFooter>\n        </Link>\n      </CardGrid.Item>\n    </FilterGrid.Item>\n  </CardGrid.Wrapper>\n</FilterGrid.Wrapper>\n```\n\n----------------------------------------\n\nTITLE: Installing Code Block Node via Tiptap CLI\nDESCRIPTION: Command to add the code-block-node component to your project using Tiptap CLI for Vite or Next.js applications.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/ui-components/node-components/code-block-node.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx @tiptap/cli add code-block-node\n```\n\n----------------------------------------\n\nTITLE: Example cURL Request for Deleting a Thread\nDESCRIPTION: cURL example for removing a thread and all its nested comments. Requires document ID, thread ID, and Authorization header for authentication.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/comments/integrate/rest-api.mdx#2025-04-19_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location --request DELETE 'https://YOUR_APP_ID.collab.tiptap.cloud/api/documents/{document_id}/threads/{thread_id}' \\\n--header 'Authorization: {{Authorization}}'\n```\n\n----------------------------------------\n\nTITLE: Adding Tiptap Components\nDESCRIPTION: Command to add one or more Tiptap components to your project. This allows you to include specific UI components in your Tiptap setup.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/ui-components/getting-started/cli.mdx#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx @tiptap/cli add [components]\n```\n\n----------------------------------------\n\nTITLE: Configuring Collaborative Editing Filter\nDESCRIPTION: Example showing how to configure transaction filtering for collaborative editing support.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/functionality/uniqueid.mdx#2025-04-19_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { isChangeOrigin } from '@tiptap/extension-collaboration'\n\n// Adds support for collaborative editing\nUniqueID.configure({\n  filterTransaction: (transaction) => !isChangeOrigin(transaction),\n})\n```\n\n----------------------------------------\n\nTITLE: Handling Document Reverted Event in JavaScript\nDESCRIPTION: Demonstrates how to handle the 'document.reverted' stateless message to access information about document reverts.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/collaboration/documents/history.mdx#2025-04-19_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nprovider.on('stateless', (data) => {\n  const payload = JSON.parse(data.payload)\n\n  if (payload.action === 'document.reverted') {\n    const currentVersion = payload.version\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Undo/Redo Button Component via Tiptap CLI\nDESCRIPTION: Command to add the undo-redo-button component using Tiptap CLI for Vite or Next.js projects.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/ui-components/components/undo-redo-button.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx @tiptap/cli add undo-redo-button\n```\n\n----------------------------------------\n\nTITLE: Installing Highlight Popover Component via Tiptap CLI\nDESCRIPTION: Command to add the highlight popover component using Tiptap CLI for Vite or Next.js projects.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/ui-components/components/highlight-popover.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx @tiptap/cli add highlight-popover\n```\n\n----------------------------------------\n\nTITLE: Configuring Node Change Handler for Drag Handle in JavaScript\nDESCRIPTION: Example of setting up an onNodeChange handler for the Drag Handle extension. It updates a selectedNode variable when a node is hovered over.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/functionality/drag-handle.mdx#2025-04-19_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nDragHandle.configure({\n  onNodeChange: ({ node, editor, pos }) => {\n    if (!node) {\n      selectedNode = null\n      return\n    }\n    // Do something with the node\n    selectedNode = node\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Importing UI Components in Tiptap\nDESCRIPTION: Example of importing and using the UIComponents module for displaying Tiptap's component documentation.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/ui-components/components/overview.mdx#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { UIComponents } from '@/components/UIComponents'\n\n<UIComponents path=\"content/ui-components\" />\n```\n\n----------------------------------------\n\nTITLE: Type Definition for Suggestion Configuration Function\nDESCRIPTION: TypeScript type definition showing the parameters passed to the allow function that determines if suggestions should be active.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/api/utilities/suggestion.mdx#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(props: { editor: Editor; state: EditorState; range: Range, isActive?: boolean }) => true\n```\n\n----------------------------------------\n\nTITLE: Installing Superscript Extension for Tiptap\nDESCRIPTION: Command to install the Superscript extension package for Tiptap using npm.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/marks/superscript.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @tiptap/extension-superscript\n```\n\n----------------------------------------\n\nTITLE: Authentication Header Format\nDESCRIPTION: Shows the required headers for API authentication, including the Authorization JWT token and App ID.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/conversion/getting-started/install.mdx#2025-04-19_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nAuthorization header and X-App-Id\n```\n\n----------------------------------------\n\nTITLE: Installing Avatar Component via Tiptap CLI\nDESCRIPTION: Command to add the Avatar UI primitive to your project using the Tiptap CLI. This works with Vite or Next.js projects.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/ui-components/primitives/avatar.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx @tiptap/cli add avatar\n```\n\n----------------------------------------\n\nTITLE: Parsing Document Name Components in Tiptap Collaboration\nDESCRIPTION: Demonstrates how to split a document name into its component parts (entity type and ID) for use in applications.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/guides/naming-documents.mdx#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst documentName = 'article.123'\n\n// Splitting the document name into separate parts\nconst [entityType, entityID] = documentName.split('.')\n\nconsole.log(entityType) // Output: \"article\"\nconsole.log(entityID) // Output: \"123\"\n```\n\n----------------------------------------\n\nTITLE: Importing CodeDemo Component in JSX\nDESCRIPTION: This code imports the CodeDemo component from the components directory and renders it with a specific path prop for the Formatting example.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/examples/basics/formatting.mdx#2025-04-19_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { CodeDemo } from '@/components/CodeDemo'\n\n<CodeDemo path=\"/Examples/Formatting\" />\n```\n\n----------------------------------------\n\nTITLE: Accessing the Tiptap Collaboration API URL\nDESCRIPTION: Shows the base URL format for accessing the Tiptap Collaboration API using your application ID.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/collaboration/documents/rest-api.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhttps://YOUR_APP_ID.collab.tiptap.cloud/\n```\n\n----------------------------------------\n\nTITLE: Installing Tooltip Component via Tiptap CLI\nDESCRIPTION: Command to add the tooltip primitive using Tiptap CLI for Vite or Next.js projects.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/ui-components/primitives/tooltip.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx @tiptap/cli add tooltip\n```\n\n----------------------------------------\n\nTITLE: Installing Tiptap Editor Base Dependencies\nDESCRIPTION: Command to install the core Tiptap Editor packages including document, paragraph, and text extensions for React.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/collaboration/getting-started/install.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @tiptap/extension-document @tiptap/extension-paragraph @tiptap/extension-text @tiptap/react\n```\n\n----------------------------------------\n\nTITLE: Installing Dropdown Menu Component via Tiptap CLI\nDESCRIPTION: Command to add the dropdown menu primitive using Tiptap CLI for Vite or Next.js projects.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/ui-components/primitives/dropdown-menu.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx @tiptap/cli add dropdown-menu\n```\n\n----------------------------------------\n\nTITLE: Installing Tiptap Import Extension\nDESCRIPTION: Command to install the Tiptap Import extension using npm.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/conversion/import-export/markdown/editor-extensions.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @tiptap-pro/extension-import\n```\n\n----------------------------------------\n\nTITLE: Installing Floating Element Package for Tiptap\nDESCRIPTION: Command to install the floating-element package using the Tiptap CLI\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/ui-components/components/floating-element.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx @tiptap/cli add floating-element\n```\n\n----------------------------------------\n\nTITLE: Configuring Initial Context for AI Suggestion in TypeScript\nDESCRIPTION: This snippet demonstrates how to set an initial context value for the AiSuggestion extension in Tiptap. The context is used to provide additional information to the LLM for generating suggestions.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/content-ai/capabilities/suggestion/features/provide-llm-context.mdx#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nAiSuggestion.configure({\n  context: 'The tone should be formal and professional.',\n})\n```\n\n----------------------------------------\n\nTITLE: Installing FloatingMenu Extension for Tiptap\nDESCRIPTION: Command to install the FloatingMenu extension using npm package manager.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/functionality/floatingmenu.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @tiptap/extension-floating-menu\n```\n\n----------------------------------------\n\nTITLE: Installing Tiptap Emoji Extension\nDESCRIPTION: Command to install the Tiptap Pro Emoji extension package via npm.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/nodes/emoji.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @tiptap-pro/extension-emoji\n```\n\n----------------------------------------\n\nTITLE: Rendering Drawing Example in JSX\nDESCRIPTION: This code renders a CodeDemo component to showcase an example of a drawing tool implementation within the editor. The example code is located at '/Examples/Drawing'.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/custom-extensions/node-views/examples.mdx#2025-04-19_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<CodeDemo path=\"/Examples/Drawing\" />\n```\n\n----------------------------------------\n\nTITLE: Installing CharacterCount Extension via NPM\nDESCRIPTION: Command to install the CharacterCount extension package using npm package manager.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/functionality/character-count.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @tiptap/extension-character-count\n```\n\n----------------------------------------\n\nTITLE: Installing Link Extension in Tiptap\nDESCRIPTION: NPM installation command for the Tiptap Link extension\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/marks/link.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @tiptap/extension-link\n```\n\n----------------------------------------\n\nTITLE: Setting Authentication Token for pnpm\nDESCRIPTION: Command to add the Tiptap Pro authentication token to the global configuration for pnpm. This enables authentication for all projects using pnpm.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/guides/pro-extensions.mdx#2025-04-19_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\npnpm config set \"//registry.tiptap.dev/:_authToken\" actual-auth-token\n```\n\n----------------------------------------\n\nTITLE: Retrieving Tiptap Server Statistics - Bash\nDESCRIPTION: API call to fetch server performance metrics including document count, connection statistics, and other performance data.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/collaboration/operations/configure.mdx#2025-04-19_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location 'https://YOUR_APP_ID.collab.tiptap.cloud/api/statistics' \\\n--header 'Authorization: YOUR_SECRET_FROM_SETTINGS_AREA'\n```\n\n----------------------------------------\n\nTITLE: Installing UniqueID Extension via NPM\nDESCRIPTION: Command to install the UniqueID pro extension from Tiptap's private registry.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/functionality/uniqueid.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @tiptap-pro/extension-unique-id\n```\n\n----------------------------------------\n\nTITLE: Importing the DOCX Export Extension\nDESCRIPTION: Code snippet showing how to import the ExportDocx extension from the @tiptap-pro/extension-export-docx package.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/conversion/import-export/docx/editor-export.mdx#2025-04-19_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ExportDocx } from '@tiptap-pro/extension-export-docx'\n```\n\n----------------------------------------\n\nTITLE: Installing Tiptap Import Extension for ODT Files\nDESCRIPTION: Command to install the Tiptap Pro import extension required for ODT file imports.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/conversion/import-export/odt/editor-extensions.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @tiptap-pro/extension-import\n```\n\n----------------------------------------\n\nTITLE: Installing BulletList and ListItem Extensions for Tiptap\nDESCRIPTION: Command to install the BulletList and ListItem extensions using npm. The ListItem extension is required for the BulletList to function.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/nodes/bullet-list.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @tiptap/extension-bullet-list @tiptap/extension-list-item\n```\n\n----------------------------------------\n\nTITLE: Authentication Base URL for Tiptap Collaboration API\nDESCRIPTION: Base URL format for accessing the Tiptap Collaboration REST API with your specific app ID.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/collaboration/operations/metrics.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhttps://YOUR_APP_ID.collab.tiptap.cloud/\n```\n\n----------------------------------------\n\nTITLE: Rendering Task List Code Example in Tiptap Documentation\nDESCRIPTION: This code snippet renders the CodeDemo component, passing the path to the Tasks example. It displays a live demonstration of the task list functionality in Tiptap.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/examples/basics/tasks.mdx#2025-04-19_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<CodeDemo path=\"/Examples/Tasks\" />\n```\n\n----------------------------------------\n\nTITLE: Importing CodeDemo Component in Markdown\nDESCRIPTION: This code snippet imports the CodeDemo component, likely used to display interactive code examples in the documentation.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/examples/advanced/forced-content-structure.mdx#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nimport { CodeDemo } from '@/components/CodeDemo'\n```\n\n----------------------------------------\n\nTITLE: Setting Authentication Token for Yarn Modern\nDESCRIPTION: Command to add the Tiptap Pro authentication token to the global configuration for Yarn Modern (2+). This sets the auth token for the npm scope.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/guides/pro-extensions.mdx#2025-04-19_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nyarn config set --home npmScopes.@tiptap-pro.npmAuthToken \"actual-auth-token\"\n```\n\n----------------------------------------\n\nTITLE: Including CodeDemo Component with Custom Document Example\nDESCRIPTION: This snippet includes the CodeDemo component, passing a path prop to specify the location of the custom document example code.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/examples/advanced/forced-content-structure.mdx#2025-04-19_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<CodeDemo path=\"/Examples/CustomDocument\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Tiptap PM Package\nDESCRIPTION: Command to install the @tiptap/pm package using npm package manager.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/core-concepts/prosemirror.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @tiptap/pm\n```\n\n----------------------------------------\n\nTITLE: Displaying Editable Content Example in Markdown\nDESCRIPTION: This code block renders another CodeDemo component to demonstrate how to create a node view with editable content using React or Vue in Tiptap.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/examples/advanced/interactive-react-and-vue-views.mdx#2025-04-19_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n<CodeDemo path=\"/Examples/InteractivityComponentContent\" />\n```\n\n----------------------------------------\n\nTITLE: Executing selectTextblockStart Command in Tiptap\nDESCRIPTION: This command moves the cursor to the start of the current textblock if it is a valid textblock. It's a utility command for cursor manipulation in the editor.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/api/commands/select-textblock-start.mdx#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\neditor.commands.selectTextblockStart()\n```\n\n----------------------------------------\n\nTITLE: Installing the Emoji Dropdown Menu Component for Tiptap\nDESCRIPTION: Command to install the emoji dropdown menu component using the Tiptap CLI tool.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/ui-components/components/emoji-dropdown-menu.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx @tiptap/cli add emoji-dropdown-menu\n```\n\n----------------------------------------\n\nTITLE: Installing and using npm-check for updates\nDESCRIPTION: Commands to install npm-check globally and use it to update Tiptap dependencies.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/guides/upgrade-tiptap-v1.mdx#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g npm-check\nnpm-check -u\n```\n\n----------------------------------------\n\nTITLE: Importing KaTeX CSS for Tiptap Mathematics Extension\nDESCRIPTION: JavaScript import statement to include the required KaTeX CSS styles for rendering mathematical formulas.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/functionality/mathematics.mdx#2025-04-19_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport 'katex/dist/katex.min.css'\n```\n\n----------------------------------------\n\nTITLE: Blocking All Document Access with JWT in TypeScript\nDESCRIPTION: Creates a JWT that blocks access to all documents by setting an empty array for allowedDocumentNames. This effectively prevents the user from accessing any documents in the system, except those specifically granted read-only access.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/collaboration/getting-started/authenticate.mdx#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport jsonwebtoken from 'jsonwebtoken'\n\nconst data = {\n  sub: 'your_local_user_identifier',\n  allowedDocumentNames: [],\n}\n\nconst jwt = jsonwebtoken.sign(data, 'your_secret')\n```\n\n----------------------------------------\n\nTITLE: Installing Tippy.js Dependency\nDESCRIPTION: Command to install Tippy.js, which is used for positioning the mention popups correctly.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/nodes/mention.mdx#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install tippy.js\n```\n\n----------------------------------------\n\nTITLE: Installing Tiptap Export Extension for ODT Files\nDESCRIPTION: Command to install the Tiptap Pro export extension required for converting editor content to ODT format.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/conversion/import-export/odt/editor-extensions.mdx#2025-04-19_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @tiptap-pro/extension-export\n```\n\n----------------------------------------\n\nTITLE: Installing Tiptap Export Extension\nDESCRIPTION: Command to install the Tiptap Export extension using npm.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/conversion/import-export/markdown/editor-extensions.mdx#2025-04-19_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @tiptap-pro/extension-export\n```\n\n----------------------------------------\n\nTITLE: Installing List Node Component via Tiptap CLI\nDESCRIPTION: Command to add the list node component using Tiptap CLI for Vite or Next.js projects.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/ui-components/node-components/list-node.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx @tiptap/cli add list-node\n```\n\n----------------------------------------\n\nTITLE: Installing Required Tiptap Extensions\nDESCRIPTION: npm command to install the necessary Tiptap extensions and packages for the Simple Editor Template.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/ui-components/templates/simple-editor.mdx#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @tiptap/react @tiptap/starter-kit @tiptap/extension-image @tiptap/extension-task-item @tiptap/extension-task-list @tiptap/extension-text-align @tiptap/extension-typography\n```\n\n----------------------------------------\n\nTITLE: Installing Paragraph Extension for Tiptap\nDESCRIPTION: Command to install the Paragraph extension package for Tiptap editor using npm.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/nodes/paragraph.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @tiptap/extension-paragraph\n```\n\n----------------------------------------\n\nTITLE: Defining AI Suggestion Rule Interface in TypeScript\nDESCRIPTION: Defines the structure for proofreading rules that can be applied by the AI system. Includes properties for rule identification, display, and styling of suggestions.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/content-ai/capabilities/suggestion/api-reference.mdx#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface AiSuggestionRule {\n  id: string\n  title: string\n  prompt: string\n  color: string\n  backgroundColor: string\n  metadata?: any\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Snapshot Compare Extension Configuration in Markdown\nDESCRIPTION: Markdown frontmatter configuration for the Snapshot Compare extension documentation, defining it as a pro and new feature with cloud capabilities.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/functionality/snapshot-compare.mdx#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Snapshot Compare Extension\ntags:\n  - type: pro\n  - type: new\nextension:\n  name: Snapshot Compare\n  description: Compare snapshots of versions of your documents to see changes made between two versions.\n  type: extension\n  icon: Diff\n  isPro: true\n  isNew: true\n  isCloud: true\n---\n```\n\n----------------------------------------\n\nTITLE: Rendering CodeDemo Component\nDESCRIPTION: JSX code showing how to render the CodeDemo component with a specific path parameter.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/examples/advanced/react-performance.mdx#2025-04-19_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<CodeDemo path=\"/Examples/Performance\" />\n```\n\n----------------------------------------\n\nTITLE: Importing CodeDemo Component in Markdown\nDESCRIPTION: This snippet imports the CodeDemo component, which is used to display interactive code examples in the documentation.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/examples/advanced/interactive-react-and-vue-views.mdx#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nimport { CodeDemo } from '@/components/CodeDemo'\n```\n\n----------------------------------------\n\nTITLE: Using Drag Handle Vue Component with Custom Content\nDESCRIPTION: Example of using the Drag Handle Vue component with custom content inside. Demonstrates how to set the children prop.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/functionality/drag-handle-vue.mdx#2025-04-19_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<drag-handle>\n  <div>Drag Me!</div>\n</drag-handle>\n```\n\n----------------------------------------\n\nTITLE: Displaying Subscription Warning in JSX\nDESCRIPTION: This code snippet shows how to render a Callout component to warn users about the subscription requirement for the AI Suggestion extension. It includes a link to the private registry access guide.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/content-ai/capabilities/suggestion/overview.mdx#2025-04-19_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Callout title=\"Subscription required\" variant=\"warning\">\n    This extension requires a valid¬¥ subscription. To install the extension, you need [access to our\n    private registry](/guides/pro-extensions).\n</Callout>\n```\n\n----------------------------------------\n\nTITLE: Creating New Version for Tiptap Docs\nDESCRIPTION: Command to create a new version of the Tiptap documentation using changesets, updating the CHANGELOG.md file.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/CONTRIBUTING.md#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx changeset version\n```\n\n----------------------------------------\n\nTITLE: Installing Comment Button Component with Tiptap CLI\nDESCRIPTION: Command to install the comment button component using the Tiptap CLI tool.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/ui-components/components/comment-button.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx @tiptap/cli add comment-button\n```\n\n----------------------------------------\n\nTITLE: Importing Global Styles for Simple Editor Template\nDESCRIPTION: CSS import statements to include the necessary global styles for the Simple Editor Template in the main CSS/SCSS entry point.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/ui-components/templates/simple-editor.mdx#2025-04-19_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n@import 'path-to/_variables.scss';\n@import 'path-to/_keyframes-animations.scss';\n```\n\n----------------------------------------\n\nTITLE: Creating a Document Name in Tiptap Collaboration\nDESCRIPTION: Creates a simple document name by combining an entity type and ID, which serves as a unique identifier for collaborative sessions.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/guides/naming-documents.mdx#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst documentName = 'article.123'\n```\n\n----------------------------------------\n\nTITLE: Installing FileHandler Extension with NPM\nDESCRIPTION: Command to install the FileHandler pro extension from Tiptap's private repository.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/functionality/filehandler.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @tiptap-pro/extension-file-handler\n```\n\n----------------------------------------\n\nTITLE: Rendering Product Cards for AI Extensions in JSX\nDESCRIPTION: This code snippet renders a grid of ProductCard components to display information about Tiptap's AI extensions. It includes details about AI Generation and AI Suggestion capabilities.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/content-ai/custom-llms/index.mdx#2025-04-19_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<div className=\"grid sm:grid-cols-2 gap-5\">\n  <ProductCard\n    title=\"AI Generation\"\n    description=\"Generate text and images and edit content with your custom AI models.\"\n    tags={['Cloud', 'On premises']}\n    documentationUrl=\"/content-ai/capabilities/generation/custom-llms\"\n    icon={contentAIIcon.src}\n  />\n  <ProductCard\n    title=\"AI Suggestion\"\n    description=\"Generate proofreadeing suggestions with your custom AI models.\"\n    tags={['Beta', 'Cloud', 'On premises']}\n    documentationUrl=\"/content-ai/capabilities/suggestion/custom-llms\"\n    icon={contentAIIcon.src}\n  />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Specific Tiptap Setting - Bash\nDESCRIPTION: API call to retrieve a specific setting value from Tiptap Collaboration. Requires authorization header and setting key.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/collaboration/operations/configure.mdx#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location 'https://YOUR_APP_ID.collab.tiptap.cloud/api/admin/settings/:key' \\\n--header 'Authorization: YOUR_SECRET_FROM_SETTINGS_AREA'\n```\n\n----------------------------------------\n\nTITLE: Installing Tiptap Table Extension\nDESCRIPTION: Command to install the Table extension and its required dependencies via npm.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/nodes/table.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @tiptap/extension-table @tiptap/extension-table-row @tiptap/extension-table-header @tiptap/extension-table-cell\n```\n\n----------------------------------------\n\nTITLE: Installing Mention Extension in NPM\nDESCRIPTION: Command to install the Tiptap mention extension package via npm.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/nodes/mention.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @tiptap/extension-mention\n```\n\n----------------------------------------\n\nTITLE: Installing Tiptap Dependencies\nDESCRIPTION: NPM command to install required Tiptap packages including Vue 3 integration, ProseMirror, and starter kit\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/getting-started/install/vue3.mdx#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @tiptap/vue-3 @tiptap/pm @tiptap/starter-kit\n```\n\n----------------------------------------\n\nTITLE: Rendering AI Agent Demo in React\nDESCRIPTION: This code snippet demonstrates how to render a CodeDemo component for the AI Agent, which is an embedded iframe of the demo application.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/examples/experiments/ai-agent.mdx#2025-04-19_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<CodeDemo isLarge={true} isScrollable={true} src=\"https://ai-agent.tiptap.dev/embedded\" />\n```\n\n----------------------------------------\n\nTITLE: Creating Tiptap Example Card with Markdown Shortcuts Feature\nDESCRIPTION: This code creates a grid item card showcasing the Markdown Shortcuts feature for Tiptap editor. It includes an image, title, description, and tags within a link to the specific example page.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/examples/index.mdx#2025-04-19_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<FilterGrid.Item filter=\"Editor\">\n  <CardGrid.Item asChild>\n    <Link href=\"/examples/basics/markdown-shortcuts\">\n      <CardGrid.ItemImage\n        asNextImage\n        src={cardCoverMarkdown.src}\n        width={cardCoverMarkdown.width}\n        height={cardCoverMarkdown.height}\n        alt=\"Image\"\n      />\n      <div>\n        <CardGrid.ItemTitle>Markdown shortcuts</CardGrid.ItemTitle>\n        <CardGrid.ItemParagraph>\n          Add markdown shortcuts to your Tiptap Editor.\n        </CardGrid.ItemParagraph>\n      </div>\n      <CardGrid.ItemFooter>\n        <Tag>Editor</Tag>\n      </CardGrid.ItemFooter>\n    </Link>\n  </CardGrid.Item>\n</FilterGrid.Item>\n```\n\n----------------------------------------\n\nTITLE: Installing Thread UI Component for Tiptap\nDESCRIPTION: Command to install the Thread UI component using the Tiptap CLI. This adds the necessary package to your project.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/ui-components/components/thread.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx @tiptap/cli add thread\n```\n\n----------------------------------------\n\nTITLE: Importing CodeDemo Component in Markdown\nDESCRIPTION: This snippet imports the CodeDemo component, likely used to display an interactive code example for the menus implementation.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/examples/advanced/menus.mdx#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nimport { CodeDemo } from '@/components/CodeDemo'\n```\n\n----------------------------------------\n\nTITLE: Configuring Tiptap History Extension Frontmatter\nDESCRIPTION: YAML frontmatter configuration for the History extension documentation, defining metadata and extension properties including pro status and cloud features.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/functionality/history.mdx#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Integrate Document History into your editor\ntags:\n  - type: pro\n  - type: new\nextension:\n  name: History\n  description: Document version history for manual and automatic versioning of your documents.\n  type: extension\n  icon: FileStack\n  isPro: true\n  isNew: true\n  isCloud: true\n---\n```\n\n----------------------------------------\n\nTITLE: Installing Link Popover Component with Tiptap CLI\nDESCRIPTION: Command to add the link popover component using Tiptap CLI for Vite or Next.js projects.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/ui-components/components/link-popover.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx @tiptap/cli add link-popover\n```\n\n----------------------------------------\n\nTITLE: Exporting Tiptap JSON to DOCX via REST API\nDESCRIPTION: This cURL command shows how to export a Tiptap JSON document to DOCX format using the /v2/convert/export endpoint. It includes authentication headers, the JSON document, export type specification, and optional style overrides.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/conversion/import-export/docx/rest-api.mdx#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl --output example.docx -X POST https://api.tiptap.dev/v2/convert/export \\\n    -H \"Authorization: Bearer <your-jwt-token>\" \\\n    -H \"X-App-Id: <your-app-id>\" \\\n    -F 'doc={\"type\":\"doc\",\"content\":[{\"type\":\"paragraph\",\"attrs\":{\"textAlign\":\"left\"},\"content\":[{\"type\":\"text\",\"text\":\"Welcome to this demonstration of our editor\\'s ability to export a wide array of formatting options to DOCX, ensuring that your content retains its intended appearance in Word.\"}]}]}' \\\n    -F 'exportType=blob' \\\n    -F 'styleOverrides={}'\n```\n\n----------------------------------------\n\nTITLE: Using Tiptap CLI - Basic Usage\nDESCRIPTION: The basic command structure for using the Tiptap CLI. This command allows you to run various Tiptap CLI commands with specified options.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/ui-components/getting-started/cli.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx @tiptap/cli [command] [options]\n```\n\n----------------------------------------\n\nTITLE: Installing Gapcursor Extension for Tiptap\nDESCRIPTION: This command installs the Gapcursor extension for Tiptap using npm. The extension adds functionality to prevent the cursor from getting stuck in gaps within the editor.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/functionality/gapcursor.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @tiptap/extension-gapcursor\n```\n\n----------------------------------------\n\nTITLE: Installing Heading Extension with NPM\nDESCRIPTION: Command to install the Tiptap heading extension package via npm.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/nodes/heading.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @tiptap/extension-heading\n```\n\n----------------------------------------\n\nTITLE: Importing CodeDemo Component in Markdown\nDESCRIPTION: Demonstrates the import of a CodeDemo component and its usage for displaying Markdown shortcuts example.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/examples/basics/markdown-shortcuts.mdx#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Markdown shortcuts in Tiptap\nmeta:\n  title: Markdown shortcuts example | Tiptap Editor Docs\n  description: Learn how to create a editor with Markdown shortcuts in Tiptap with an easy code example. More in our docs!\n  category: Examples\n---\n```\n\nLANGUAGE: jsx\nCODE:\n```\nimport { CodeDemo } from '@/components/CodeDemo'\n\n<CodeDemo path=\"/Examples/MarkdownShortcuts\" />\n```\n\n----------------------------------------\n\nTITLE: Inefficient Tiptap Editor Integration in React\nDESCRIPTION: Shows an example of how not to integrate the Tiptap editor in a React component. This approach leads to unnecessary re-renders due to unrelated state changes and component nesting.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/guides/performance.mdx#2025-04-19_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { EditorContent, useEditor } from '@tiptap/react'\n\nconst App = () => {\n  const [sidebarOpen, setSidebarOpen] = React.useState(false)\n  const editor = useEditor({\n    extensions,\n    content,\n  })\n\n  return (\n    <>\n      <UnrelatedSidebar onChange={setSidebarOpen} />\n      <EditorContent editor={editor} />\n      <MenuComponent editor={editor} />\n      <Sidenav isSidebarOpen={sidebarOpen}>\n        <AnotherComponent />\n      </Sidenav>\n    </>\n  )\n}\n\nexport default App\n```\n\n----------------------------------------\n\nTITLE: Importing Extensions Component in Markdown\nDESCRIPTION: This code snippet imports the Extensions component from a local file path. The component is used to display information about mark extensions for Tiptap Editor.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/marks/index.mdx#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nimport { Extensions } from '@/components/Extensions'\n```\n\n----------------------------------------\n\nTITLE: Creating/Updating Tiptap Settings via API - Bash\nDESCRIPTION: API call to create or update specific settings in Tiptap Collaboration. Requires authorization header and setting key parameter.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/collaboration/operations/configure.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location --request PUT 'https://YOUR_APP_ID.collab.tiptap.cloud/api/admin/settings/:key' \\\n--header 'Authorization: YOUR_SECRET_FROM_SETTINGS_AREA' --header 'Content-Type: text/plain' \\\n-d 'your value'\n```\n\n----------------------------------------\n\nTITLE: Rendering ProductCard Components in JSX\nDESCRIPTION: This code renders two ProductCard components to display information about AI Generation and AI Suggestion extensions, including their descriptions and documentation links.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/content-ai/getting-started/overview.mdx#2025-04-19_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<div className=\"grid sm:grid-cols-2 gap-5\">\n  <ProductCard\n    title=\"AI Generation\"\n    description=\"In-line content generation and manipulation with your custom LLM or OpenAI.\"\n    tags={['Cloud', 'On premises']}\n    documentationUrl=\"/content-ai/capabilities/generation/overview\"\n    icon={contentAIIcon.src}\n  />\n  <ProductCard\n    title=\"AI Suggestion\"\n    description=\"Show proofreading suggestions in your editor.\"\n    tags={['Beta', 'Cloud', 'On premises']}\n    documentationUrl=\"/content-ai/capabilities/suggestion/overview\"\n    icon={contentAIIcon.src}\n  />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Importing a Document with Legacy Import Extension in Tiptap\nDESCRIPTION: This snippet shows how to use the import command to import a file into the Tiptap editor using the legacy Import extension. It demonstrates both a simple import and a customized import with error handling and content modification.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/guides/legacy-conversion.mdx#2025-04-19_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// The most simple way to import a file\n// This will import the uploaded file, replace the editor content\n// and focus the editor\neditor.chain().focus().import({ file }).run()\n\n// You can also use the onImport callback to customize the import behavior\neditor\n  .chain()\n  .import({\n    file,\n    onImport(context) {\n      const { setEditorContent, content, error } = context\n\n      // add error handling\n      if (error) {\n        showErrorToast({ message: error.message })\n      }\n\n      // You could also modify the content before inserting it\n      content.doc.content.push({ type: 'paragraph', content: [{ type: 'text', text: 'Hello!' }] })\n\n      // you can change the loading state of your application for example\n      isLoading = false\n\n      // make sure you call the setEditorContent function if you want to run\n      // the default insertion behavior of the extension\n      // setEditorContent()\n      // but since we modified the content, we need to do the insertion manually\n      editor.commands.setContent(content)\n    },\n  })\n  .focus()\n  .run()\n```\n\n----------------------------------------\n\nTITLE: Rendering Documentation Grid with React Components\nDESCRIPTION: A React component structure using FilterGrid and CardGrid components to display a filterable grid of documentation guides. Each guide is represented as a card with a title, subtitle, and category tag. The grid supports filtering between 'Editor' and 'Collaboration' categories.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/guides/index.mdx#2025-04-19_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n<FilterGrid.Wrapper filters={['Editor', 'Collaboration']}>\n  <CardGrid.Wrapper className=\"sm:grid-cols-3\">\n    <FilterGrid.Item filter=\"Editor\">\n      <CardGrid.Item asChild>\n        <Link href=\"/guides/pro-extensions\">\n          <CardGrid.Subtitle size=\"sm\">First Steps</CardGrid.Subtitle>\n          <div>\n            <CardGrid.ItemTitle>How to integrate Pro Extensions</CardGrid.ItemTitle>\n          </div>\n          <CardGrid.ItemFooter>\n            <Tag>Editor</Tag>\n          </CardGrid.ItemFooter>\n        </Link>\n      </CardGrid.Item>\n    </FilterGrid.Item>\n    <!-- Additional FilterGrid.Items... -->\n  </CardGrid.Wrapper>\n</FilterGrid.Wrapper>\n```\n\n----------------------------------------\n\nTITLE: Installing Slash Dropdown Menu for Tiptap\nDESCRIPTION: Command to install the slash dropdown menu component using the Tiptap CLI.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/ui-components/components/slash-dropdown-menu.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx @tiptap/cli add slash-dropdown-menu\n```\n\n----------------------------------------\n\nTITLE: Installing Tiptap Floating Toolbar Component\nDESCRIPTION: Command to install the floating toolbar component for Tiptap using the Tiptap CLI.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/ui-components/components/floating-toolbar.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx @tiptap/cli add toolbar-floating\n```\n\n----------------------------------------\n\nTITLE: Importing React Components for Tiptap Documentation\nDESCRIPTION: This snippet imports various React components used in the Tiptap documentation page. It includes icons, custom components, and UI elements from the project's component library.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/collaboration/documents/index.mdx#2025-04-19_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ArrowRightIcon } from 'lucide-react'\nimport Link from '@/components/Link'\nimport * as CtaBox from '@/components/CtaBox'\nimport { Button } from '@/components/ui/Button'\nimport { Callout } from '@/components/ui/Callout'\n```\n\n----------------------------------------\n\nTITLE: Installing Tiptap and Alpine.js dependencies\nDESCRIPTION: Command to install Alpine.js, Tiptap core, Tiptap PM, and Tiptap Starter Kit packages using npm.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/getting-started/install/alpine.mdx#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install alpinejs @tiptap/core @tiptap/pm @tiptap/starter-kit\n```\n\n----------------------------------------\n\nTITLE: Installing Mathematics Button Component for Tiptap\nDESCRIPTION: Command to install the mathematics button component using npm and the Tiptap CLI.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/ui-components/components/math-button.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx @tiptap/cli add mathematics-button\n```\n\n----------------------------------------\n\nTITLE: Adding Specific Tiptap Component Example\nDESCRIPTION: Example of adding a specific Tiptap component (button) to your project using the CLI.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/ui-components/getting-started/cli.mdx#2025-04-19_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpx @tiptap/cli add button\n```\n\n----------------------------------------\n\nTITLE: Displaying Version Information in Markdown\nDESCRIPTION: This snippet shows how version information is structured in the changelog using Markdown headers. It includes the version number and categorizes changes into Minor Changes and Patch Changes.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/CHANGELOG.md#2025-04-19_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n## 1.1.0\n\n### Minor Changes\n\n- 1b6ba2f: Add demo of AI Generation extension custom command\n- 3d5120a: fix for example link for CodeBlockLowlight extension\n- d431014: Add docs about AI Suggestion performance optimizations like chunking editor content and caching suggestions\n- f629daa: Enhance contributing guide with more detailed steps for creating branches, commits and PRs\n\n### Patch Changes\n\n- 73633c2: The term 'bubble menu' was mistakenly used instead of 'floating menu' due to copy-paste from another document.\n- 3a522de: language edits for index and history pages\n- 439efbc: Fixed a typo on `insertContentAt` command code examples\n- 2873439: Update the installation extensions required for drag handle react\n```\n\n----------------------------------------\n\nTITLE: Installing Separator via Tiptap CLI\nDESCRIPTION: Command to add the Separator primitive to a Tiptap project using the Tiptap CLI. This method works for projects built with Vite or Next.js.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/ui-components/primitives/separator.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx @tiptap/cli add separator\n```\n\n----------------------------------------\n\nTITLE: Importing CodeDemo Component in Markdown\nDESCRIPTION: This code snippet imports the CodeDemo component, which is likely used to display an interactive code example for the CodeBlockLowlight extension.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/examples/advanced/syntax-highlighting.mdx#2025-04-19_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nimport { CodeDemo } from '@/components/CodeDemo'\n```\n\n----------------------------------------\n\nTITLE: Installing Code Extension for Tiptap Editor\nDESCRIPTION: Command to install the Code extension for Tiptap Editor using npm.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/marks/code.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @tiptap/extension-code\n```\n\n----------------------------------------\n\nTITLE: Implementing Collaborative Editing Error Handler\nDESCRIPTION: Example implementation of error handling for collaborative editing scenarios, including disabling collaboration and preventing updates.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/core-concepts/schema.mdx#2025-04-19_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nonContentError({ editor, error, disableCollaboration }) {\n  // Removes the collaboration extension.\n  disableCollaboration()\n\n  // Since the content is invalid, we don't want to emit an update\n  // Preventing synchronization with other editors or to a server\n  const emitUpdate = false\n\n  // Disable the editor to prevent further user input\n  editor.setEditable(false, emitUpdate)\n\n  // Maybe show a notification to the user that they need to refresh the app\n}\n```\n\n----------------------------------------\n\nTITLE: Importing the Extensions Component in Markdown\nDESCRIPTION: This code snippet imports a React component called 'Extensions' from the components directory that will render available editor extensions from a specified path.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/overview.mdx#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Extensions } from '@/components/Extensions'\n```\n\n----------------------------------------\n\nTITLE: Rendering Callout Component for Tiptap Documentation\nDESCRIPTION: This JSX snippet renders a Callout component, which is used to display a note about document migration in the Tiptap documentation.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/collaboration/documents/index.mdx#2025-04-19_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Callout title=\"Note\" variant=\"hint\">\n  You can easily migrate your documents from our cloud to an on-premises server at a later time.\n</Callout>\n```\n\n----------------------------------------\n\nTITLE: Importing CodeDemo Component\nDESCRIPTION: Import statement for the CodeDemo component used to display the drawing example.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/examples/advanced/drawing.mdx#2025-04-19_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { CodeDemo } from '@/components/CodeDemo'\n```\n\n----------------------------------------\n\nTITLE: Installing Tiptap History Extension\nDESCRIPTION: Command to install the @tiptap/extension-history package using npm.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/functionality/undo-redo.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @tiptap/extension-history\n```\n\n----------------------------------------\n\nTITLE: Documenting Major Changes in Markdown\nDESCRIPTION: This snippet demonstrates how major changes are documented in the changelog. It includes a bold statement announcing a significant update, followed by a description of the change.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/CHANGELOG.md#2025-04-19_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n## 1.0.0\n\n### Major Changes\n\n- **We're happy to announce that we finally released our new Tiptap documentation!** - Welcome to the official documentation for all Tiptap products! Here, you'll find comprehensive guides, detailed examples, and in-depth documentation covering everything you need to know about working with Tiptap products.\n```\n\n----------------------------------------\n\nTITLE: Customizing Progress Bar Color for YouTube Player\nDESCRIPTION: Specifies the color to use in the player's video progress bar.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/nodes/youtube.mdx#2025-04-19_snippet_19\n\nLANGUAGE: js\nCODE:\n```\nYoutube.configure({\n  progressBarColor: 'white',\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing the Tiptap Comments REST API Base URL\nDESCRIPTION: The base URL format for accessing the Tiptap Comments REST API from your Collaboration app. Authentication requires an API secret from your app settings sent in the Authorization header.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/comments/integrate/rest-api.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhttps://YOUR_APP_ID.collab.tiptap.cloud/\n```\n\n----------------------------------------\n\nTITLE: Unbinding a Preview Content Watcher in Tiptap History\nDESCRIPTION: JavaScript code demonstrating how to create and then unbind a content watcher for version previews in the Tiptap History extension.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/collaboration/documents/history.mdx#2025-04-19_snippet_11\n\nLANGUAGE: js\nCODE:\n```\nconst unbindWatchContent = watchPreviewContent(provider, (content) => {\n  // set your editors content\n  editor.commands.setContent(content)\n})\n\n// unwatch\nunbindWatchContent()\n```\n\n----------------------------------------\n\nTITLE: Configuring Unreferenced Thread Deletion in Tiptap Comments\nDESCRIPTION: This code shows how to configure the deletion of unreferenced threads in Tiptap comments. By default, threads not referenced in the document are deleted, but this behavior can be changed by setting deleteUnreferencedThreads to false.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/comments/core-concepts/configure.mdx#2025-04-19_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nComments.configure({\n  // keep threads even if they are not referenced in the document\n  deleteUnreferencedThreads: false,\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Tiptap v2 packages\nDESCRIPTION: Command to install Tiptap v2 core packages including Vue 2 support, ProseMirror, and the starter kit.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/guides/upgrade-tiptap-v1.mdx#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @tiptap/vue-2 @tiptap/pm @tiptap/starter-kit\n```\n\n----------------------------------------\n\nTITLE: Using Separator Component in React\nDESCRIPTION: Example of how to import and use the Separator component in a React component. The Separator is placed between two buttons to create a visual divider in a toolbar.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/ui-components/primitives/separator.mdx#2025-04-19_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Separator } from '@/components/tiptap-ui-primitive/separator'\n\nexport default function MyComponent() {\n  return (\n    <div className=\"tiptap-tools\">\n      <button>Button 1</button>\n      <Separator />\n      <button>Button 2</button>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Changeset for Tiptap Docs\nDESCRIPTION: Command to create a new changeset for documenting changes in the Tiptap documentation project.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/CONTRIBUTING.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx changeset\n```\n\n----------------------------------------\n\nTITLE: Tiptap Drawing Example Frontmatter\nDESCRIPTION: YAML frontmatter configuration for the drawing example documentation page, including meta information and page title.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/examples/advanced/drawing.mdx#2025-04-19_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Tiptap Editor with a canvas drawing node\nmeta:\n  title: Drawing example | Tiptap Editor Docs\n  description: Learn how create a text editor with drawing capabilities with Tiptap with an easy code example. More in our docs!\n  category: Examples\n---\n```\n\n----------------------------------------\n\nTITLE: Example cURL Request for Getting All Threads\nDESCRIPTION: cURL example for retrieving all threads from a document. Requires the document ID in the URL path and Authorization header containing your API secret.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/comments/integrate/rest-api.mdx#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location 'https://YOUR_APP_ID.collab.tiptap.cloud/api/documents/{document_id}/threads' \\\n--header 'Authorization: {{Authorization}}'\n```\n\n----------------------------------------\n\nTITLE: Installing Bold Extension for Tiptap\nDESCRIPTION: Command to install the Bold extension package via npm\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/marks/bold.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @tiptap/extension-bold\n```\n\n----------------------------------------\n\nTITLE: Example cURL Request for Deleting a Comment\nDESCRIPTION: cURL example for removing a specific comment from a thread. Requires document ID, thread ID, comment ID, and Authorization header for authentication.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/comments/integrate/rest-api.mdx#2025-04-19_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location --request DELETE 'https://YOUR_APP_ID.collab.tiptap.cloud/api/documents/{document_id}/threads/{thread_id}/comments/{comment_id}' \\\n--header 'Authorization: {{Authorization}}'\n```\n\n----------------------------------------\n\nTITLE: Setting Blockquote Command in Tiptap\nDESCRIPTION: Command to wrap content in a blockquote.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/nodes/blockquote.mdx#2025-04-19_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\neditor.commands.setBlockquote()\n```\n\n----------------------------------------\n\nTITLE: Image Upload Callback URL Usage\nDESCRIPTION: Parameter structure for handling image uploads during document conversion\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/guides/legacy-conversion.mdx#2025-04-19_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"file\": \"File\",\n  \"imageUploadCallbackUrl\": \"string\"\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling IFrame API for YouTube Videos\nDESCRIPTION: Enables the YouTube player to be controlled via the IFrame Player API.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/nodes/youtube.mdx#2025-04-19_snippet_11\n\nLANGUAGE: js\nCODE:\n```\nYoutube.configure({\n  enableIFrameApi: true,\n})\n```\n\n----------------------------------------\n\nTITLE: Example cURL Request for Creating a Thread\nDESCRIPTION: cURL example for creating a new comment thread with content and custom data. Requires document ID, Authorization header, and JSON payload with thread content and metadata.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/comments/integrate/rest-api.mdx#2025-04-19_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location 'https://YOUR_APP_ID.collab.tiptap.cloud/api/documents/{document_id}/threads' \\\n--header 'Content-Type: application/json' \\\n--header 'Authorization: {{Authorization}}' \\\n--data '{\n    \"content\": \"moin\",\n    \"data\": { \"key\": \"ttt\"}\n}'\n```\n\n----------------------------------------\n\nTITLE: Enabling Loop Mode for YouTube Videos\nDESCRIPTION: Sets up looping for a YouTube video when used with the playlist parameter.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/nodes/youtube.mdx#2025-04-19_snippet_16\n\nLANGUAGE: js\nCODE:\n```\nYoutube.configure({\n  loop: true,\n})\n```\n\n----------------------------------------\n\nTITLE: Rendering Extensions Component with Specific Props\nDESCRIPTION: This code snippet renders the Extensions component with specific props to control its behavior. It sets the path for content and hides certain elements of the component.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/marks/index.mdx#2025-04-19_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<Extensions path=\"content/editor/extensions/marks\" hideAll hideFree />\n```\n\n----------------------------------------\n\nTITLE: Configuring Video Playlist for YouTube Embed\nDESCRIPTION: Specifies a comma-separated list of video IDs to play in sequence.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/nodes/youtube.mdx#2025-04-19_snippet_17\n\nLANGUAGE: js\nCODE:\n```\nYoutube.configure({\n  playlist: 'VIDEO_ID_1,VIDEO_ID_2,VIDEO_ID_3,...,VIDEO_ID_N',\n})\n```\n\n----------------------------------------\n\nTITLE: Import Markdown to Tiptap JSON via REST API\nDESCRIPTION: cURL command to convert a Markdown file to Tiptap JSON format. Requires authentication via JWT token and App ID. Supports optional image upload callback URL for handling local image references.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/conversion/import-export/markdown/rest-api.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \"https://api.tiptap.dev/v1/import?format=md\" \\\n  -H \"Authorization: Bearer <your-jwt-token>\" \\\n  -H \"X-App-Id: <your-app-id>\" \\\n  -F \"file=@/path/to/file.md\"\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Tiptap v1 packages\nDESCRIPTION: Command to uninstall all Tiptap v1 related packages using npm. This is necessary to avoid conflicts with v2.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/guides/upgrade-tiptap-v1.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm uninstall tiptap tiptap-commands tiptap-extensions tiptap-utils\n```\n\n----------------------------------------\n\nTITLE: Displaying Filtered Diffs\nDESCRIPTION: TypeScript example showing how to display only specific diffs filtered by user ID.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/collaboration/documents/snapshot-compare.mdx#2025-04-19_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// This will display only the diffs made by the user with the ID 'user-1'\nconst diffsToDisplay = tr.toDiff().filter((diff) => diff.attribution.userId === 'user-1')\n\neditor.commands.showDiff(tr, { diffs: diffsToDisplay })\n```\n\n----------------------------------------\n\nTITLE: Running Linter for Tiptap Docs\nDESCRIPTION: Command to run the linter for the Tiptap documentation project to ensure code quality.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/CONTRIBUTING.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run lint\n```\n\n----------------------------------------\n\nTITLE: Setting Cell Attributes\nDESCRIPTION: Command to set custom attributes for the current cell, such as background color.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/nodes/table.mdx#2025-04-19_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\neditor.commands.setCellAttribute('customAttribute', 'value')\neditor.commands.setCellAttribute('backgroundColor', '#000')\n```\n\n----------------------------------------\n\nTITLE: Toggling Superscript Mark in Tiptap Editor\nDESCRIPTION: Command to toggle the superscript mark in the Tiptap editor.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/marks/superscript.mdx#2025-04-19_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\neditor.commands.toggleSuperscript()\n```\n\n----------------------------------------\n\nTITLE: Configuring Legacy Import Extension for Tiptap Editor\nDESCRIPTION: This snippet demonstrates how to import and configure the legacy Import extension for Tiptap. It includes setting up the appId, token, and optional configurations like image upload URL and experimental DOCX import.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/guides/legacy-conversion.mdx#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Start with importing the extension\nimport { Import } from '@tiptap-pro/extension-import'\n\nconst editor = new Editor({\n  // ...\n  extensions: [\n    // ...\n    Import.configure({\n      // The Convert App-ID from the Convert settings page: https://cloud.tiptap.dev/convert-settings\n      appId: 'your-app-id',\n\n      // The JWT token you generated in the previous step\n      token: 'your-jwt',\n\n      // The URL to upload images to, if not provided, images will be stripped from the document\n      imageUploadCallbackUrl: 'https://your-image-upload-url.com',\n\n      // Enables the experimental DOCX import which should better preserve content styling\n      experimentalDocxImport: true,\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Tiptap CLI Add Command Options\nDESCRIPTION: Available options for the 'add' command in Tiptap CLI. These options allow you to specify components, set working directory, define component path, and configure output settings.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/ui-components/getting-started/cli.mdx#2025-04-19_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nUsage: @tiptap/cli add [options] [components...]\n\nArguments\n\n    components          the components to add\n\nOptions\n\n    -c, --cwd <cwd>     the working directory (defaults to current directory)\n    -p, --path <path>   the path to add the component to\n    -s, --silent        mute output\n```\n\n----------------------------------------\n\nTITLE: Styling AI Suggestions with CSS\nDESCRIPTION: Demonstrates basic CSS styling for AI suggestions using the default tiptap-ai-suggestion class.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/content-ai/capabilities/suggestion/features/display-suggestions.mdx#2025-04-19_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.tiptap-ai-suggestion {\n  border-bottom: 2px solid var(--tiptap-ai-suggestion-color);\n  margin-bottom: -2px;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Table Extensions for Tiptap\nDESCRIPTION: Command to install the TableRow extension along with its required dependencies including Table, TableHeader, and TableCell extensions.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/nodes/table-row.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @tiptap/extension-table @tiptap/extension-table-row @tiptap/extension-table-header @tiptap/extension-table-cell\n```\n\n----------------------------------------\n\nTITLE: Configuring Tiptap Editor Rendering in React\nDESCRIPTION: Shows how to use the immediatelyRender and shouldRerenderOnTransaction options in Tiptap v2.5.0+ to gain more control over when the editor renders, potentially improving performance.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/guides/performance.mdx#2025-04-19_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useEditor } from '@tiptap/react'\n\nfunction Component() {\n  const editor = useEditor({\n    extensions,\n    content,\n    /**\n     * This option gives us the control to enable the default behavior of rendering the editor immediately.\n     */\n    immediatelyRender: true,\n    /**\n     * This option gives us the control to disable the default behavior of re-rendering the editor on every transaction.\n     */\n    shouldRerenderOnTransaction: false,\n  })\n\n  return <EditorContent editor={editor} />\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Redo Command in Tiptap Editor\nDESCRIPTION: JavaScript code to execute the redo command in the Tiptap editor, reapplying the last undone change.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/functionality/undo-redo.mdx#2025-04-19_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\neditor.commands.redo()\n```\n\n----------------------------------------\n\nTITLE: Implementing Transaction Mapping for Chained Commands in Tiptap\nDESCRIPTION: Demonstrates how to implement transaction mapping for chained commands that modify document structure, such as delete and insert operations.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/api/commands/index.mdx#2025-04-19_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\naddCommands() {\n  return {\n    delete: () => ({ tr }) => {\n      const { $from, $to } = tr.selection\n\n      // here we use tr.mapping.map to map the position between transaction steps\n      const from = tr.mapping.map($from.pos)\n      const to = tr.mapping.map($to.pos)\n\n      tr.delete(from, to)\n\n      return true\n    },\n    insert: (content: string) => ({ tr }) => {\n      const { $from } = tr.selection\n\n      // here we use tr.mapping.map to map the position between transaction steps\n      const pos = tr.mapping.map($from.pos)\n\n      tr.insertText(content, pos)\n\n      return true\n    },\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Isolating Tiptap Editor in a Separate React Component\nDESCRIPTION: Demonstrates the recommended way to isolate the Tiptap editor in a separate React component to prevent unnecessary re-renders. This approach separates the editor from unrelated state changes in the parent component.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/guides/performance.mdx#2025-04-19_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { EditorContent, useEditor } from '@tiptap/react'\n\nconst TiptapEditor = () => {\n  const editor = useEditor({\n    extensions,\n    content,\n  })\n\n  return (\n    <>\n      <EditorContent editor={editor} />\n      {/* Other components that depend on the editor instance */}\n      <MenuComponent editor={editor} />\n    </>\n  )\n}\n\nexport default TiptapEditor\n```\n\n----------------------------------------\n\nTITLE: Using the lift command in Tiptap Editor with JavaScript\nDESCRIPTION: This snippet demonstrates how to use the lift command in Tiptap Editor. It shows two examples: lifting any headline and lifting only h2 headlines. The lift command moves a node up into its parent node.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/api/commands/nodes-and-marks/lift.mdx#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// lift any headline\neditor.commands.lift('headline')\n\n// lift only h2\neditor.commands.lift('headline', { level: 2 })\n```\n\n----------------------------------------\n\nTITLE: Implementing Update Callback with Vanilla JS\nDESCRIPTION: Example of implementing the onUpdate callback using vanilla JavaScript DOM manipulation\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/functionality/table-of-contents.mdx#2025-04-19_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst tocElement = document.createElement('div')\ndocument.body.appendChild(tocElement)\n\nTableOfContents.configure({\n  onUpdate: (anchors, isCreate) => {\n    tocElement.innerHTML = ''\n\n    if (isCreate) {\n      console.log('This is the inital creation step for the ToC data')\n    }\n\n    anchors.forEach((anchor) => {\n      const anchorElement = document.createElement('div')\n\n      anchorElement.innerHTML = anchor.content\n      anchorElement.dataset.id = anchor.id\n      anchorElement.dataset.depth = anchor.depth\n      anchorElement.dataset.active = anchor.active\n      anchorElement.dataset.scrolled = anchor.scrolled\n\n      tocElement.appendChild(anchorElement)\n    })\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Character Count Mode\nDESCRIPTION: Configuration example showing how to set the counting mode for the CharacterCount extension.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/functionality/character-count.mdx#2025-04-19_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nCharacterCount.configure({\n  mode: 'nodeSize',\n})\n```\n\n----------------------------------------\n\nTITLE: Executing Redo Command in Tiptap Editor\nDESCRIPTION: JavaScript code showing how to execute the redo command in a Tiptap editor with the Collaboration extension.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/functionality/collaboration.mdx#2025-04-19_snippet_5\n\nLANGUAGE: js\nCODE:\n```\neditor.commands.redo()\n```\n\n----------------------------------------\n\nTITLE: Installing TextStyle Extension for Tiptap\nDESCRIPTION: Command to install the TextStyle extension package using npm.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/marks/text-style.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @tiptap/extension-text-style\n```\n\n----------------------------------------\n\nTITLE: Removing Focus with Tiptap Blur Command in JavaScript\nDESCRIPTION: Demonstrates how to use the blur() command to remove focus from a Tiptap editor instance. This command is useful when you need to programmatically unfocus the editor.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/api/commands/selection/blur.mdx#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Remove the focus from the editor\neditor.commands.blur()\n```\n\n----------------------------------------\n\nTITLE: Using selectTextblockEnd Command in Tiptap\nDESCRIPTION: Demonstrates how to use the selectTextblockEnd command to move the cursor to the end of the current textblock in a Tiptap editor instance. This command only works if the current block is a valid textblock.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/api/commands/select-textblock-end.mdx#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\neditor.commands.selectTextblockEnd()\n```\n\n----------------------------------------\n\nTITLE: Configuring Attribute Retention for BulletList in Tiptap\nDESCRIPTION: Setting to keep attributes from a previous line after toggling the list using input rules or buttons. Default is false.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/nodes/bullet-list.mdx#2025-04-19_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nBulletList.configure({\n  keepAttributes: true,\n})\n```\n\n----------------------------------------\n\nTITLE: Using Built-in Index Generators\nDESCRIPTION: Implementation of linear and hierarchical index generation using built-in functions\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/functionality/table-of-contents.mdx#2025-04-19_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getLinearIndexes, getHierarchicalIndexes } from '@tiptap-pro/extension-table-of-contents'\n\n// generate linear indexes\nTableOfContents.configure({\n  getIndex: getLinearIndexes,\n})\n\n// generate hierarchical indexes\nTableOfContents.configure({\n  getIndex: getHierarchicalIndexes,\n})\n```\n\n----------------------------------------\n\nTITLE: Importing Extensions Component in JSX\nDESCRIPTION: Imports the Extensions component from the components directory and uses it to display node extensions from a specific content path.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/nodes/index.mdx#2025-04-19_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Extensions } from '@/components/Extensions'\n\n<Extensions path=\"content/editor/extensions/nodes\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Image Node via Tiptap CLI\nDESCRIPTION: Command to add the image node component to a Tiptap editor using the Tiptap CLI for Vite or Next.js projects.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/ui-components/node-components/image-node.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx @tiptap/cli add image-node\n```\n\n----------------------------------------\n\nTITLE: Chaining Multiple Commands in Tiptap\nDESCRIPTION: Shows how to chain multiple commands together to focus the editor and toggle bold text in a single transaction.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/api/commands/index.mdx#2025-04-19_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\neditor.chain().focus().toggleBold().run()\n```\n\n----------------------------------------\n\nTITLE: Importing CodeDemo Component\nDESCRIPTION: React import statement for the CodeDemo component used to display the performance example.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/examples/advanced/react-performance.mdx#2025-04-19_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { CodeDemo } from '@/components/CodeDemo'\n```\n\n----------------------------------------\n\nTITLE: Markdown Frontmatter Configuration for Tiptap Comments\nDESCRIPTION: YAML frontmatter configuration defining the Comments extension metadata, including its type, category, and feature flags.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/functionality/comments.mdx#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Integrate Comments into your editor\ntags:\n  - type: pro\n  - type: new\nmeta:\n    category: Editor\nextension:\n    name: Comments\n    description: Enable discussions in your collaborative documents‚Äîthe way you want them.\n    type: extension\n    icon: MessageCircleMore\n    isPro: true\n    isNew: true\n    isCloud: true\n---\n```\n\n----------------------------------------\n\nTITLE: Adding Custom CSS Classes to Dropcursor\nDESCRIPTION: Example of adding custom CSS classes to the dropcursor for additional styling options.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/functionality/dropcursor.mdx#2025-04-19_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nDropcursor.configure({\n  class: 'my-custom-class',\n})\n```\n\n----------------------------------------\n\nTITLE: Executing a Single Command in Tiptap\nDESCRIPTION: Demonstrates how to execute a single command to make text bold using the editor instance.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/api/commands/index.mdx#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\neditor.commands.setBold()\n```\n\n----------------------------------------\n\nTITLE: Configuring Inline Mode for YouTube Extension\nDESCRIPTION: Sets whether YouTube videos should be handled inline or as block elements.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/nodes/youtube.mdx#2025-04-19_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nYoutube.configure({\n  inline: false,\n})\n```\n\n----------------------------------------\n\nTITLE: Using Mapped Commands in Tiptap\nDESCRIPTION: Shows how to use the custom delete and insert commands with transaction mapping.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/api/commands/index.mdx#2025-04-19_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\neditor.chain().delete().insert('foo').run()\n```\n\n----------------------------------------\n\nTITLE: Installing Tiptap Import Extension for DOCX\nDESCRIPTION: Command to install the Tiptap Import extension package using npm.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/conversion/import-export/docx/editor-import.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @tiptap-pro/extension-import\n```\n\n----------------------------------------\n\nTITLE: File Format Types in Code Block\nDESCRIPTION: Code snippet showing the supported file format types that can be converted using Tiptap's conversion service.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/conversion/getting-started/install.mdx#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nDOCX, ODT, and Markdown\n```\n\n----------------------------------------\n\nTITLE: Installing Tiptap Pro Extensions with Environment Variable\nDESCRIPTION: Command to install Tiptap Pro extensions using NPM with an environment variable for authentication. This approach passes the token directly during the installation process.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/guides/pro-extensions.mdx#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nTIPTAP_PRO_TOKEN=actual-auth-token npm install --save @tiptap-pro/extension-unique-id\n```\n\n----------------------------------------\n\nTITLE: Styling AI Suggestions with CSS\nDESCRIPTION: CSS styles to customize the appearance of AI suggestions in the editor. The styles add colored underlines for suggestions and highlight selected suggestions with background colors defined in the extension configuration.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/content-ai/capabilities/suggestion/install.mdx#2025-04-19_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n.tiptap-ai-suggestion {\n  border-bottom: 2px solid var(--tiptap-ai-suggestion-color);\n  margin-bottom: -2px;\n}\n\n.tiptap-ai-suggestion--selected {\n  background-color: var(--tiptap-ai-suggestion-background-color);\n  transition: background-color 0.5s;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing TaskItem Extension with npm\nDESCRIPTION: Command to install the TaskItem extension and its required TaskList dependency using npm.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/editor/extensions/nodes/task-item.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @tiptap/extension-task-list @tiptap/extension-task-item\n```\n\n----------------------------------------\n\nTITLE: Installing Tiptap Heading Button via CLI\nDESCRIPTION: Command to install the heading button component using Tiptap CLI for Vite or Next.js projects.\nSOURCE: https://github.com/ueberdosis/tiptap-docs/blob/main/src/content/ui-components/components/heading-button.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx @tiptap/cli add heading-button\n```"
  }
]