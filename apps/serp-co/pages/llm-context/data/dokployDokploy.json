[
  {
    "owner": "dokploy",
    "repo": "dokploy",
    "content": "TITLE: Cloning and Setting Up the Dokploy Repository\nDESCRIPTION: Commands for cloning the repository from the canary branch, installing dependencies, and setting up environment variables.\nSOURCE: https://github.com/dokploy/dokploy/blob/canary/CONTRIBUTING.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/dokploy/dokploy.git\ncd dokploy\npnpm install\ncp apps/dokploy/.env.example apps/dokploy/.env\n```\n\n----------------------------------------\n\nTITLE: Setting Up Dokploy Development Environment\nDESCRIPTION: Command to initialize all required services and files for Dokploy development.\nSOURCE: https://github.com/dokploy/dokploy/blob/canary/CONTRIBUTING.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npnpm run dokploy:setup\n```\n\n----------------------------------------\n\nTITLE: Installing Dokploy on a VPS using Bash\nDESCRIPTION: This command downloads and executes the Dokploy installation script directly on a VPS. It's the recommended method for setting up a self-hosted Dokploy instance quickly.\nSOURCE: https://github.com/dokploy/dokploy/blob/canary/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -sSL https://dokploy.com/install.sh | sh\n```\n\n----------------------------------------\n\nTITLE: Starting the Dokploy Development Server\nDESCRIPTION: Command to launch the Dokploy development server on localhost:3000.\nSOURCE: https://github.com/dokploy/dokploy/blob/canary/CONTRIBUTING.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npnpm run dokploy:dev\n```\n\n----------------------------------------\n\nTITLE: Running the Server Script for Dokploy\nDESCRIPTION: Command to execute the server script for Dokploy's development environment.\nSOURCE: https://github.com/dokploy/dokploy/blob/canary/CONTRIBUTING.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npnpm run server:script\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for Dokploy Monitoring\nDESCRIPTION: Environment configuration file containing metrics settings for server and container monitoring, including refresh rates, ports, thresholds, and container inclusion/exclusion lists.\nSOURCE: https://github.com/dokploy/dokploy/blob/canary/apps/monitoring/README.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nMETRICS_CONFIG='{\n  \"server\": {\n    \"refreshRate\": 25,\n    \"port\": 3001,\n    \"type\": \"Remote | Dokploy\",\n    \"token\": \"metrics\",\n    \"urlCallback\": \"http://localhost:3000/api/trpc/notification.receiveNotification\",\n    \"retentionDays\": 7,\n    \"cronJob\": \"0 0 * * *\",\n    \"thresholds\": {\n      \"cpu\": 0,\n      \"memory\": 0\n    }\n  },\n  \"containers\": {\n    \"refreshRate\": 25,\n    \"services\": {\n      \"include\": [\"testing-elasticsearch-14649e\"],\n      \"exclude\": []\n    }\n  }\n}'\n```\n\n----------------------------------------\n\nTITLE: Building Dokploy for Production\nDESCRIPTION: Command to build the Dokploy application for production deployment.\nSOURCE: https://github.com/dokploy/dokploy/blob/canary/CONTRIBUTING.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npnpm run dokploy:build\n```\n\n----------------------------------------\n\nTITLE: Building and Pushing Docker Image for Dokploy\nDESCRIPTION: Commands to build and push the Docker image for Dokploy deployment.\nSOURCE: https://github.com/dokploy/dokploy/blob/canary/CONTRIBUTING.md#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npnpm run docker:build\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm run docker:push\n```\n\n----------------------------------------\n\nTITLE: Running Dokploy Monitoring Service\nDESCRIPTION: Command to start the Dokploy monitoring service.\nSOURCE: https://github.com/dokploy/dokploy/blob/canary/apps/monitoring/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngo run main.go\n```\n\n----------------------------------------\n\nTITLE: Installing Docker Engine on Ubuntu Linux\nDESCRIPTION: A complete bash script for installing Docker on Ubuntu. The script updates package indexes, installs prerequisites, adds Docker's official GPG key, sets up the stable repository, and installs Docker Engine components.\nSOURCE: https://github.com/dokploy/dokploy/blob/canary/GUIDES.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Update package index\nsudo apt-get update\n\n# Install prerequisites\nsudo apt-get install \\\n    apt-transport-https \\\n    ca-certificates \\\n    curl \\\n    gnupg \\\n    lsb-release\n\n# Add Docker's official GPG key\ncurl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg\n\n# Set up stable repository\necho \\\n  \"deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \\\n  $(lsb_release -cs) stable\" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null\n\n# Install Docker Engine\nsudo apt-get update\nsudo apt-get install docker-ce docker-ce-cli containerd.io\n```\n\n----------------------------------------\n\nTITLE: Setting Up Localtunnel for Webhook Testing\nDESCRIPTION: Command to set up localtunnel for testing webhooks in development mode by exposing the local server to the internet.\nSOURCE: https://github.com/dokploy/dokploy/blob/canary/CONTRIBUTING.md#2025-04-16_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nbunx lt --port 3000\n```\n\n----------------------------------------\n\nTITLE: Notification Interface Definition\nDESCRIPTION: TypeScript interface defining the structure of monitoring notifications sent via the callback URL when metrics exceed thresholds.\nSOURCE: https://github.com/dokploy/dokploy/blob/canary/apps/monitoring/README.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Notification {\n  Type: \"Memory\" | \"CPU\";\n  Value: number;\n  Threshold: number;\n  Message: string;\n  Timestamp: string;\n  Token: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Container Metrics Response Structure\nDESCRIPTION: Example JSON response structure for container metrics, including CPU, memory, network, and block I/O statistics.\nSOURCE: https://github.com/dokploy/dokploy/blob/canary/apps/monitoring/README.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"timestamp\": \"2025-01-19T22:16:30.796129Z\",\n  \"CPU\": 83.76,\n  \"Memory\": {\n    \"percentage\": 0.03,\n    \"used\": 2.262,\n    \"total\": 7.654,\n    \"usedUnit\": \"MB\",\n    \"totalUnit\": \"GB\"\n  },\n  \"Network\": {\n    \"input\": 306,\n    \"output\": 0,\n    \"inputUnit\": \"B\",\n    \"outputUnit\": \"B\"\n  },\n  \"BlockIO\": {\n    \"read\": 28.7,\n    \"write\": 0,\n    \"readUnit\": \"kB\",\n    \"writeUnit\": \"B\"\n  },\n  \"Container\": \"7428f5a49039\",\n  \"ID\": \"7428f5a49039\",\n  \"Name\": \"testing-elasticsearch-14649e-kibana-1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Nixpacks for Application Deployment\nDESCRIPTION: Command to install Nixpacks, a build system for application deployment used by Dokploy.\nSOURCE: https://github.com/dokploy/dokploy/blob/canary/CONTRIBUTING.md#2025-04-16_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n# Install Nixpacks\ncurl -sSL https://nixpacks.com/install.sh -o install.sh \\\n    && chmod +x install.sh \\\n    && ./install.sh\n```\n\n----------------------------------------\n\nTITLE: Installing Buildpacks for Application Deployment\nDESCRIPTION: Command to install Buildpacks, a third build system option that can be used for deploying applications with Dokploy.\nSOURCE: https://github.com/dokploy/dokploy/blob/canary/CONTRIBUTING.md#2025-04-16_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n# Install Buildpacks\ncurl -sSL \"https://github.com/buildpacks/pack/releases/download/v0.32.1/pack-v0.32.1-linux.tgz\" | tar -C /usr/local/bin/ --no-same-owner -xzv pack\n```\n\n----------------------------------------\n\nTITLE: Installing Railpack for Application Deployment\nDESCRIPTION: Command to install Railpack, another build system option for deploying applications with Dokploy.\nSOURCE: https://github.com/dokploy/dokploy/blob/canary/CONTRIBUTING.md#2025-04-16_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n# Install Railpack\ncurl -sSL https://railpack.com/install.sh | sh\n```\n\n----------------------------------------\n\nTITLE: Fixing Docker Permission Issues\nDESCRIPTION: Commands to resolve permission issues with Docker by changing ownership of relevant directories.\nSOURCE: https://github.com/dokploy/dokploy/blob/canary/CONTRIBUTING.md#2025-04-16_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nsudo chown -R USERNAME dokploy or sudo chown -R $(whoami) ~/.docker\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Starting Development Server\nDESCRIPTION: Commands to install npm dependencies and start the development server using npm scripts\nSOURCE: https://github.com/dokploy/dokploy/blob/canary/apps/api/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Starting Development Server\nDESCRIPTION: Commands to install project dependencies using npm and start the development server. These commands should be run in sequence to properly initialize the project.\nSOURCE: https://github.com/dokploy/dokploy/blob/canary/apps/schedules/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for React Email Project\nDESCRIPTION: Commands for installing project dependencies using either npm or yarn package managers.\nSOURCE: https://github.com/dokploy/dokploy/blob/canary/packages/server/src/emails/readme.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install\n# or\nyarn\n```\n\n----------------------------------------\n\nTITLE: Running Development Server for React Email Project\nDESCRIPTION: Commands to start the development server using either npm or yarn, which will enable live preview functionality.\nSOURCE: https://github.com/dokploy/dokploy/blob/canary/packages/server/src/emails/readme.md#2025-04-16_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm run dev\n# or\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Installing Dokploy Dependencies\nDESCRIPTION: Command to download and install required Go modules for the project.\nSOURCE: https://github.com/dokploy/dokploy/blob/canary/apps/monitoring/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngo mod download\n```\n\n----------------------------------------\n\nTITLE: Resetting Password for Dokploy\nDESCRIPTION: Command to reset a forgotten password in the Dokploy application.\nSOURCE: https://github.com/dokploy/dokploy/blob/canary/CONTRIBUTING.md#2025-04-16_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\npnpm run reset-password\n```\n\n----------------------------------------\n\nTITLE: Conventional Commit Message Format Structure\nDESCRIPTION: Defines the format for commit messages following the Conventional Commits specification, including type, optional scope, description, optional body, and optional footer.\nSOURCE: https://github.com/dokploy/dokploy/blob/canary/CONTRIBUTING.md#2025-04-16_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n<type>[optional scope]: <description>\n\n[optional body]\n\n[optional footer(s)]\n```\n\n----------------------------------------\n\nTITLE: Example Conventional Commit Message\nDESCRIPTION: Shows a simple example of a conventional commit message for adding a new feature.\nSOURCE: https://github.com/dokploy/dokploy/blob/canary/CONTRIBUTING.md#2025-04-16_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nfeat: add new feature\n```\n\n----------------------------------------\n\nTITLE: Opening Application in Browser\nDESCRIPTION: Command to open the web application in the default browser at the local development server address running on port 3000.\nSOURCE: https://github.com/dokploy/dokploy/blob/canary/apps/schedules/README.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nopen http://localhost:3000\n```\n\n----------------------------------------\n\nTITLE: Opening Local Development Server\nDESCRIPTION: Command to open the application in the default web browser at localhost:3000\nSOURCE: https://github.com/dokploy/dokploy/blob/canary/apps/api/README.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nopen http://localhost:3000\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Crawler Access Restrictions in robots.txt\nDESCRIPTION: A robots.txt configuration that instructs all web crawlers to not access any content on the website. It uses the wildcard User-agent selector to target all bots and the Disallow directive with a root path to prevent crawling of the entire site.\nSOURCE: https://github.com/dokploy/dokploy/blob/canary/apps/dokploy/public/robots.txt#2025-04-16_snippet_0\n\nLANGUAGE: robots.txt\nCODE:\n```\nUser-agent: *\nDisallow: /\n```"
  }
]