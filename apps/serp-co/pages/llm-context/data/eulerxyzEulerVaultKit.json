[
  {
    "owner": "euler-xyz",
    "repo": "euler-vault-kit",
    "content": "TITLE: Implementing Price Oracle Interface in Solidity\nDESCRIPTION: Two required interface methods for price oracles in the Euler Vault Kit. The first method (getQuote) provides a one-sided price conversion, while the second method (getQuotes) returns both bid and ask prices for the specified tokens. These methods are designed to avoid precision loss by returning quote amounts rather than price fractions.\nSOURCE: https://github.com/euler-xyz/euler-vault-kit/blob/master/docs/whitepaper.md#2025-04-18_snippet_10\n\nLANGUAGE: solidity\nCODE:\n```\n/// @notice One-sided price: How much quote token you would get for inAmount of base token, assuming no price spread\nfunction getQuote(uint inAmount, address base, address quote) external view returns (uint outAmount);\n```\n\nLANGUAGE: solidity\nCODE:\n```\n/// @notice Two-sided price: How much quote token you would get/spend for selling/buying inAmount of base token\nfunction getQuotes(uint inAmount, address base, address quote) external view returns (uint bidOutAmount, uint askOutAmount);\n```\n\n----------------------------------------\n\nTITLE: Computing Exchange Rate with Virtual Deposit Protection in Solidity\nDESCRIPTION: Formula for calculating the exchange rate between vault shares and underlying assets, incorporating a virtual deposit to prevent inflation attacks and handle edge cases when totalShares is zero. The exchange rate determines how many underlying assets each vault share is worth.\nSOURCE: https://github.com/euler-xyz/euler-vault-kit/blob/master/docs/whitepaper.md#2025-04-18_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nexchangeRate = (cash + totalBorrows + VIRTUAL_DEPOSIT)\n                  / (totalShares + VIRTUAL_DEPOSIT)\n```\n\n----------------------------------------\n\nTITLE: Implementing ESynth Token Contract\nDESCRIPTION: ESynth is an ERC-20 compatible token with EVC support that can be used as collateral in other vaults. It includes functionality for minting, burning, allocation to vaults, and total supply adjustments.\nSOURCE: https://github.com/euler-xyz/euler-vault-kit/blob/master/docs/whitepaper.md#2025-04-18_snippet_12\n\nLANGUAGE: solidity\nCODE:\n```\nsetCapacity(address minter, uint128 capacity)\nmint(address account, uint256 amount)\nburn(address account, uint256 amount)\nallocate(address vault, uint256 amount)\ndeallocate(address vault, uint256 amount)\naddIgnoredForTotalSupply(address account)\nremoveIgnoredForTotalSupply(address account)\n```\n\n----------------------------------------\n\nTITLE: Implementing EulerSavingsRate Vault\nDESCRIPTION: An ERC-4626 compatible vault allowing users to deposit assets and receive interest. Includes gulp() function for distributing interest over a two-week smeared period.\nSOURCE: https://github.com/euler-xyz/euler-vault-kit/blob/master/docs/whitepaper.md#2025-04-18_snippet_14\n\nLANGUAGE: solidity\nCODE:\n```\ngulp()\ntotalAssets()\n_totalAssets\n```\n\n----------------------------------------\n\nTITLE: Interest Rate Model Interface\nDESCRIPTION: Interface for computing interest rates based on vault utilization. Returns rates in second percent yield (SPY) format scaled by 1e27.\nSOURCE: https://github.com/euler-xyz/euler-vault-kit/blob/master/docs/whitepaper.md#2025-04-18_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\ncomputeInterestRateView()\n```\n\n----------------------------------------\n\nTITLE: Implementing the IPerspective Interface in Solidity\nDESCRIPTION: Definition of the IPerspective interface used by the Euler Vault Kit for validating vault properties. This interface includes methods for verifying vaults and checking their verification status.\nSOURCE: https://github.com/euler-xyz/euler-vault-kit/blob/master/docs/whitepaper.md#2025-04-18_snippet_11\n\nLANGUAGE: solidity\nCODE:\n```\ninterface IPerspective {\n    function perspectiveVerify(address vault, bool failEarly) external;\n\n    function isVerified(address vault) external view returns (bool);\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Interest Accumulator Overflow in Solidity\nDESCRIPTION: This snippet describes the logic for handling interest accumulator overflow in the Euler Vault Kit. It explains how the system limits the maximum interest rate to approximately 1,000,000% APY to provide concrete guarantees without excessively limiting use cases.\nSOURCE: https://github.com/euler-xyz/euler-vault-kit/blob/master/docs/whitepaper.md#2025-04-18_snippet_16\n\nLANGUAGE: solidity\nCODE:\n```\n// Pseudo-code for interest accumulator update\nfunction updateInterestAccumulator() {\n    uint256 newAccumulator = currentAccumulator * interestMultiplier;\n    if (newAccumulator > type(uint256).max) {\n        // Reset accumulator to last known good value\n        accumulator = lastInteractionAccumulator;\n    } else {\n        accumulator = newAccumulator;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: EVC Account Status Interface Methods\nDESCRIPTION: Core interface methods required by EVC for detecting impermissible user actions and checking account/vault health status. Includes checkAccountStatus (view method) and checkVaultStatus functions.\nSOURCE: https://github.com/euler-xyz/euler-vault-kit/blob/master/docs/whitepaper.md#2025-04-18_snippet_5\n\nLANGUAGE: solidity\nCODE:\n```\n- checkAccountStatus: Is the specified account in violation?\n- checkVaultStatus: Is the vault itself healthy?\n```\n\n----------------------------------------\n\nTITLE: Implementing IRMSynth Interest Rate Model\nDESCRIPTION: A reactive interest rate model for synthetic assets that adjusts rates based on trading price relative to target quote. Includes parameters for target price, maximum rate, base rate, adjustment amount and interval.\nSOURCE: https://github.com/euler-xyz/euler-vault-kit/blob/master/docs/whitepaper.md#2025-04-18_snippet_13\n\nLANGUAGE: solidity\nCODE:\n```\nTARGET_QUOTE\nMAX_RATE\nBASE_RATE\nADJUST_AMOUNT\nADJUST_INTERVAL\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Quantity Types in Solidity for Asset Management\nDESCRIPTION: This section outlines the custom types used in the Euler Vault Kit for representing different quantities related to asset management. It includes Assets, Shares, Owed, AmountCap, ConfigAmount, and LTVConfig types, each serving a specific purpose in the vault's accounting system.\nSOURCE: https://github.com/euler-xyz/euler-vault-kit/blob/master/docs/whitepaper.md#2025-04-18_snippet_15\n\nLANGUAGE: solidity\nCODE:\n```\ntype Assets = uint112;\ntype Shares = uint112;\ntype Owed = uint144;\ntype AmountCap = uint16;\ntype ConfigAmount = uint16;\ntype LTVConfig = uint256;\n```\n\n----------------------------------------\n\nTITLE: ProtocolConfig Interface Methods\nDESCRIPTION: Interface methods exposed by ProtocolConfig contract to handle fee validation and configuration. Includes methods for validating interest fees and retrieving fee configuration details.\nSOURCE: https://github.com/euler-xyz/euler-vault-kit/blob/master/docs/whitepaper.md#2025-04-18_snippet_6\n\nLANGUAGE: solidity\nCODE:\n```\n- isValidInterestFee(): Determines whether the value of an interest fee is allowed\n- feeConfig(): Returns feeReceiver address and protocolFeeShare\n```\n\n----------------------------------------\n\nTITLE: Balance Tracking Pattern\nDESCRIPTION: The vault uses internal balance tracking instead of direct token balance checks to prevent exchange rate manipulation and optimize gas usage. This approach maintains an internal copy of expected values updated on transfers.\nSOURCE: https://github.com/euler-xyz/euler-vault-kit/blob/master/docs/whitepaper.md#2025-04-18_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nunderlying.balanceOf(address(this))\n```\n\n----------------------------------------\n\nTITLE: Balance Tracker Hook Implementation\nDESCRIPTION: External contract notification system used for reward distribution and balance tracking. The balanceTrackerHook method is called whenever an account's balance changes.\nSOURCE: https://github.com/euler-xyz/euler-vault-kit/blob/master/docs/whitepaper.md#2025-04-18_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nbalanceTrackerHook\n```\n\n----------------------------------------\n\nTITLE: Checking Vault Factory Origin\nDESCRIPTION: Verifies if a vault was created by a trusted factory by calling the isProxy() function. This is important for ensuring vault trustworthiness.\nSOURCE: https://github.com/euler-xyz/euler-vault-kit/blob/master/docs/whitepaper.md#2025-04-18_snippet_7\n\nLANGUAGE: solidity\nCODE:\n```\nisProxy()\n```\n\n----------------------------------------\n\nTITLE: DToken Address Calculation\nDESCRIPTION: Method for calculating the DToken contract address from the vault's address using nonce 1, following EIP-161 specification.\nSOURCE: https://github.com/euler-xyz/euler-vault-kit/blob/master/docs/whitepaper.md#2025-04-18_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\ndebtOf()\n```\n\n----------------------------------------\n\nTITLE: Running Invariant Tests\nDESCRIPTION: Commands for running various types of invariant tests using Echidna and Medusa.\nSOURCE: https://github.com/euler-xyz/euler-vault-kit/blob/master/README.md#2025-04-18_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\n./test/scripts/echidna.sh # property mode\n./test/scripts/echidna-assert.sh # assertion mode\n./test/scripts/medusa.sh \n```\n\n----------------------------------------\n\nTITLE: Running Health Status Verification Scripts\nDESCRIPTION: Path to Python script that executes health status verification across all modules. The script automates running different specification configurations including HealthStatusInvariant.spec for most modules, LiquidateHealthStatus.spec for liquidation cases, and specialized specs for token contracts.\nSOURCE: https://github.com/euler-xyz/euler-vault-kit/blob/master/certora/conf/healthStatus/README.md#2025-04-18_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ncertora/scripts/runHealthStatusAllModules.py\n```\n\n----------------------------------------\n\nTITLE: Running Certora Configuration Files with Python Script\nDESCRIPTION: Instruction for using a Python script to execute multiple Certora rule configuration files for ERC4626 vault testing. The script is located in the certora/scripts directory and handles splitting and running various configuration files.\nSOURCE: https://github.com/euler-xyz/euler-vault-kit/blob/master/certora/conf/ERC4626Split/README.md#2025-04-18_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nTo run all of these conf files easily, use the certora/scripts/runERC4626RulesSplitConfs.py\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependency Remappings for Solidity in Foundry\nDESCRIPTION: This configuration maps shorthand dependency names to their actual filesystem paths in a Foundry project. It includes mappings for key libraries like ethereum-vault-connector, permit2, forge-std, and OpenZeppelin contracts, ensuring the Solidity compiler can locate these dependencies when they are imported in the project's source files.\nSOURCE: https://github.com/euler-xyz/euler-vault-kit/blob/master/remappings.txt#2025-04-18_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nethereum-vault-connector/=lib/ethereum-vault-connector/src/\npermit2/=lib/permit2/\nds-test/=lib/ethereum-vault-connector/lib/forge-std/lib/ds-test/src/\nerc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\nforge-gas-snapshot/=lib/permit2/lib/forge-gas-snapshot/src/\nforge-std/=lib/forge-std/src/\nopenzeppelin-contracts/=lib/openzeppelin-contracts/contracts/\nsolmate/=lib/permit2/lib/solmate/\n```\n\n----------------------------------------\n\nTITLE: Running Default Tests\nDESCRIPTION: Command to execute the default test suite using Forge.\nSOURCE: https://github.com/euler-xyz/euler-vault-kit/blob/master/README.md#2025-04-18_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nforge test\n```\n\n----------------------------------------\n\nTITLE: Running Coverage Tests\nDESCRIPTION: Command to execute test coverage analysis using the coverage script.\nSOURCE: https://github.com/euler-xyz/euler-vault-kit/blob/master/README.md#2025-04-18_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\n./test/scripts/coverage.sh\n```\n\n----------------------------------------\n\nTITLE: Installing Euler Vault Kit with Foundry\nDESCRIPTION: Command to install Euler Vault Kit in a Foundry project using forge.\nSOURCE: https://github.com/euler-xyz/euler-vault-kit/blob/master/README.md#2025-04-18_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nforge install euler-xyz/euler-vault-kit\n```\n\n----------------------------------------\n\nTITLE: Installing Foundry Framework\nDESCRIPTION: Command to download and install the Foundry development framework.\nSOURCE: https://github.com/euler-xyz/euler-vault-kit/blob/master/README.md#2025-04-18_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncurl -L https://foundry.paradigm.xyz | bash\n```\n\n----------------------------------------\n\nTITLE: Starting Foundry\nDESCRIPTION: Command to initialize and start the Foundry framework after installation.\nSOURCE: https://github.com/euler-xyz/euler-vault-kit/blob/master/README.md#2025-04-18_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nfoundryup\n```\n\n----------------------------------------\n\nTITLE: Cloning Euler Vault Kit Repository\nDESCRIPTION: Commands to clone the Euler Vault Kit repository and navigate to its directory.\nSOURCE: https://github.com/euler-xyz/euler-vault-kit/blob/master/README.md#2025-04-18_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/euler-xyz/euler-vault-kit.git && cd euler-vault-kit\n```\n\n----------------------------------------\n\nTITLE: Disabling All Hooks\nDESCRIPTION: Function call to disable all hooks on a vault by setting the hook target to address(0) and hook config to 0.\nSOURCE: https://github.com/euler-xyz/euler-vault-kit/blob/master/docs/whitepaper.md#2025-04-18_snippet_9\n\nLANGUAGE: solidity\nCODE:\n```\nsetHookConfig(address(0), 0)\n```\n\n----------------------------------------\n\nTITLE: Hook Configuration Error\nDESCRIPTION: Error thrown when attempting to interact with a vault that has not been properly configured with hooks enabled.\nSOURCE: https://github.com/euler-xyz/euler-vault-kit/blob/master/docs/whitepaper.md#2025-04-18_snippet_8\n\nLANGUAGE: solidity\nCODE:\n```\nE_OperationDisabled\n```"
  }
]