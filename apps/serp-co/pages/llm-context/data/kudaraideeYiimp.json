[
  {
    "owner": "kudaraidee",
    "repo": "yiimp",
    "content": "TITLE: Defining Allowed URI Schemes\nDESCRIPTION: This snippet defines an array that acts as a whitelist for allowed URI schemes. It prevents XSS attacks by only allowing explicitly defined schemes such as 'http', 'https', 'mailto', 'ftp', 'nntp', 'news', and 'tel'.\nSOURCE: https://github.com/kudaraidee/yiimp/blob/dev/web/framework/vendors/htmlpurifier/standalone/HTMLPurifier/ConfigSchema/schema/URI.AllowedSchemes.txt#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\narray (\n  'http' => true,\n  'https' => true,\n  'mailto' => true,\n  'ftp' => true,\n  'nntp' => true,\n  'news' => true,\n  'tel' => true,\n)\n```\n\n----------------------------------------\n\nTITLE: jqPlot Options Definition\nDESCRIPTION: This code snippet defines the options object for configuring a jqPlot chart. It includes settings for series colors, stacking behavior, titles, animations, data rendering, axis defaults, series defaults, legends, and grid appearance. These options control various aspects of the plot's visual representation and behavior.\nSOURCE: https://github.com/kudaraidee/yiimp/blob/dev/web/extensions/jqplot/jqPlotOptions.txt#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\noptions =\n{\n    seriesColors: [ \"#4bb2c5\", \"#c5b47f\", \"#EAA228\", \"#579575\", \"#839557\", \"#958c12\", \n        \"#953579\", \"#4b5de4\", \"#d8b83f\", \"#ff5800\", \"#0085cc\"],  // colors that will \n         // be assigned to the series.  If there are more series than colors, colors\n         // will wrap around and start at the beginning again.\n\n    // when fillToZero is enabled, this sets the colors to use for portions of the line below zero.\n    negativeSeriesColors: [ \"#498991\", \"#C08840\", \"#9F9274\", \"#546D61\", \"#646C4A\", \"#6F6621\",\n                            \"#6E3F5F\", \"#4F64B0\", \"#A89050\", \"#C45923\", \"#187399\", \"#945381\", \n                            \"#959E5C\", \"#C7AF7B\", \"#478396\", \"#907294\"], \n\n    sortData : true,    // if true, will sort the data passed in by the user.\n    stackSeries: false, // if true, will create a stack plot.  \n                        // Currently supported by line and bar graphs.\n\n    title: '',      // Title for the plot.  Can also be specified as an object like:\n\n    title: {\n        text: '',   // title for the plot,\n        show: true,\n    },\n\n    animate : false,        // if true, the series will be animated on initial drawing.\n                            // This support is renderer-dependent; the renderer must support animation.\n    animateReplot : false,  // if true, the series will be animated after every replot() call.\n                            // Use with caution!  Replots can happen very frequently under\n                            // certain circumstances (e.g. resizing, dragging points) and\n                            // animation in these situations can cause problems.\n    captureRightClick : false,   // if true, right-click events are intercepted and a jqplotRightClick\n                                 // event will be fired.  This will also block the context menu.\n    dataRenderer : undefined, // A callable which can be used to preprocess data passed into the plot.\n                              // Will be called with 3 arguments: the plot data, a reference to the plot,\n                              // and the value of dataRendererOptions.\n\n    dataRendererOptions : undefined,    // Options that will be passed to the dataRenderer,\n                                        // if that option is supplied.  Can be of any type.\n\n    gridData : [],  // array of grid coordinates corresponding to the data points; \n                    // normally jqPlot will calculate this for you.\n\n    axesDefaults: {\n        show: false,    // whether or not to render the axis.  Determined automatically.\n        min: null,      // minimum numerical value of the axis.  Determined automatically.\n        max: null,      // maximum numerical value of the axis.  Determined automatically.\n        pad: 1.2,       // a factor multiplied by the data range on the axis to give the \n                        // axis range so that data points don't fall on the edges of the axis.\n        ticks: [],      // a 1D [val1, val2, ...], or 2D [[val, label], [val, label], ...] \n                        // array of ticks to use.  Computed automatically.\n        numberTicks: undefined,\n        renderer: $.jqplot.LinearAxisRenderer,  // renderer to use to draw the axis,\n        rendererOptions: {},    // options to pass to the renderer.  LinearAxisRenderer \n                                // has no options,\n        tickOptions: {\n            mark: 'outside',    // Where to put the tick mark on the axis\n                                // 'outside', 'inside' or 'cross'\n            showMark: true,     // whether or not to show the mark on the axis\n            showGridline: true, // whether to draw a gridline (across the whole grid) at this tick\n            isMinorTick: false, // whether this is a minor tick\n            markSize: 4,        // length the tick will extend beyond the grid in pixels.  For\n                                // 'cross', length will be added above and below the grid boundary\n            show: true,         // whether to show the tick (mark and label)\n            showLabel: true,    // whether to show the text label at the tick\n            prefix: '',         // String to prepend to the tick label.\n                                // Prefix is prepended to the formatted tick label\n            suffix: '',         // String to append to the tick label.\n                                // Suffix is appended to the formatted tick label\n            formatString: '',   // format string to use with the axis tick formatter\n            fontFamily: '',     // css spec for the font-size css attribute\n            fontSize: '',       // css spec for the font-size css attribute\n            textColor: '',      // css spec for the color attribute\n            escapeHTML: false   // true to escape HTML entities in the label\n        }\n        showTicks: true,        // whether or not to show the tick labels,\n        showTickMarks: true,    // whether or not to show the tick marks\n    },\n    \n    axes: {\n        xaxis: {\n            // same options as axesDefaults\n        },\n        yaxis: {\n            // same options as axesDefaults\n        },\n        x2axis: {\n            // same options as axesDefaults\n        },\n        y2axis: {\n            // same options as axesDefaults\n        }\n    },\n    \n    seriesDefaults: {\n        show: true,     // whether to render the series.\n        xaxis: 'xaxis', // either 'xaxis' or 'x2axis'.\n        yaxis: 'yaxis', // either 'yaxis' or 'y2axis'.\n        label: '',      // label to use in the legend for this line.\n        color: '',      // CSS color spec to use for the line.  Determined automatically.\n        lineWidth: 2.5, // Width of the line in pixels.\n        shadow: true,   // show shadow or not.\n        shadowAngle: 45,    // angle (degrees) of the shadow, clockwise from x axis.\n        shadowOffset: 1.25, // offset from the line of the shadow.\n        shadowDepth: 3,     // Number of strokes to make when drawing shadow.  Each \n                            // stroke offset by shadowOffset from the last.\n        shadowAlpha: 0.1,   // Opacity of the shadow.\n        showLine: true,     // whether to render the line segments or not.\n        showMarker: true,   // render the data point markers or not.\n        fill: false,        // fill under the line,\n        fillAndStroke: false,       // stroke a line at top of fill area.\n        fillColor: undefined,       // custom fill color for filled lines (default is line color).\n        fillAlpha: undefined,       // custom alpha to apply to fillColor.\n        renderer: $.jqplot.LineRenderer],\n        rendererOptions: {}, // options passed to the renderer.  LineRenderer has no options.\n        markerRenderer: $.jqplot.MarkerRenderer,    // renderer to use to draw the data \n                                                    // point markers.\n        markerOptions: { \n            show: true,             // whether to show data point markers.\n            style: 'filledCircle',  // circle, diamond, square, filledCircle.\n                                    // filledDiamond or filledSquare.\n            lineWidth: 2,       // width of the stroke drawing the marker.\n            size: 9,            // size (diameter, edge length, etc.) of the marker.\n            color: '#666666'    // color of marker, set to color of line by default.\n            shadow: true,       // whether to draw shadow on marker or not.\n            shadowAngle: 45,    // angle of the shadow.  Clockwise from x axis.\n            shadowOffset: 1,    // offset from the line of the shadow,\n            shadowDepth: 3,     // Number of strokes to make when drawing shadow.  Each stroke \n                                // offset by shadowOffset from the last.\n            shadowAlpha: 0.07   // Opacity of the shadow\n        }\n    },\n\n    series:[\n        {Each series has same options as seriesDefaults},\n        {You can override each series individually here}\n    ],\n    \n    legend: {\n        show: false,\n        location: 'ne',     // compass direction, nw, n, ne, e, se, s, sw, w.\n        xoffset: 12,        // pixel offset of the legend box from the x (or x2) axis.\n        yoffset: 12,        // pixel offset of the legend box from the y (or y2) axis.\n    },\n    \n    grid: {\n        drawGridLines: true,        // whether to draw lines across the grid or not.\n        gridLineColor: '#cccccc'    // Color of the grid lines.\n        background: '#fffdf6',      // CSS color spec for background color of grid.\n        borderColor: '#999999',     // CSS color spec for border around grid.\n        borderWidth: 2.0,           // pixel width of border around grid.\n        shadow: true,               // draw a shadow for grid.\n        shadowAngle: 45,            // angle of the shadow.  Clockwise from x axis.\n        shadowOffset: 1.5,          // offset from the line of the shadow.\n        shadowWidth: 3,             // width of the stroke for the shadow.\n        shadowDepth: 3,             // Number of strokes to make when drawing shadow.  \n                                    // Each stroke offset by shadowOffset from the last.\n        shadowAlpha: 0.07           // Opacity of the shadow\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Core Modules Array in PHP\nDESCRIPTION: This PHP snippet defines an array specifying the core modules required for a particular doctype, likely XHTML. The boolean values indicate whether a particular module is enabled by default. Disabling core module protection is discouraged but possible by setting this to an empty array.\nSOURCE: https://github.com/kudaraidee/yiimp/blob/dev/web/framework/vendors/htmlpurifier/standalone/HTMLPurifier/ConfigSchema/schema/HTML.CoreModules.txt#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\narray (\n  'Structure' => true,\n  'Text' => true,\n  'Hypertext' => true,\n  'List' => true,\n  'NonXMLCommonAttributes' => true,\n  'XMLCommonAttributes' => true,\n  'CommonAttributes' => true,\n)\n```\n\n----------------------------------------\n\nTITLE: Sending Email with PHPMailer - PHP\nDESCRIPTION: This code snippet provides a complete example of how to send an email using PHPMailer. It includes setting up SMTP, authentication, recipients, attachments, and content. It also demonstrates basic error handling using a try-catch block to manage exceptions.\nSOURCE: https://github.com/kudaraidee/yiimp/blob/dev/web/yaamp/core/functions/phpmailer/phpmailer/README.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n//Import PHPMailer classes into the global namespace\n//These must be at the top of your script, not inside a function\nuse PHPMailer\\PHPMailer\\PHPMailer;\nuse PHPMailer\\PHPMailer\\SMTP;\nuse PHPMailer\\PHPMailer\\Exception;\n\n//Load Composer's autoloader\nrequire 'vendor/autoload.php';\n\n//Create an instance; passing `true` enables exceptions\n$mail = new PHPMailer(true);\n\ntry {\n    //Server settings\n    $mail->SMTPDebug = SMTP::DEBUG_SERVER;                      //Enable verbose debug output\n    $mail->isSMTP();                                            //Send using SMTP\n    $mail->Host       = 'smtp.example.com';                     //Set the SMTP server to send through\n    $mail->SMTPAuth   = true;                                   //Enable SMTP authentication\n    $mail->Username   = 'user@example.com';                     //SMTP username\n    $mail->Password   = 'secret';                               //SMTP password\n    $mail->SMTPSecure = PHPMailer::ENCRYPTION_SMTPS;            //Enable implicit TLS encryption\n    $mail->Port       = 465;                                    //TCP port to connect to; use 587 if you have set `SMTPSecure = PHPMailer::ENCRYPTION_STARTTLS`\n\n    //Recipients\n    $mail->setFrom('from@example.com', 'Mailer');\n    $mail->addAddress('joe@example.net', 'Joe User');     //Add a recipient\n    $mail->addAddress('ellen@example.com');               //Name is optional\n    $mail->addReplyTo('info@example.com', 'Information');\n    $mail->addCC('cc@example.com');\n    $mail->addBCC('bcc@example.com');\n\n    //Attachments\n    $mail->addAttachment('/var/tmp/file.tar.gz');         //Add attachments\n    $mail->addAttachment('/tmp/image.jpg', 'new.jpg');    //Optional name\n\n    //Content\n    $mail->isHTML(true);                                  //Set email format to HTML\n    $mail->Subject = 'Here is the subject';\n    $mail->Body    = 'This is the HTML message body <b>in bold!</b>';\n    $mail->AltBody = 'This is the body in plain text for non-HTML mail clients';\n\n    $mail->send();\n    echo 'Message has been sent';\n} catch (Exception $e) {\n    echo \"Message could not be sent. Mailer Error: {$mail->ErrorInfo}\";\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Cursor Behavior in jqPlot\nDESCRIPTION: This configuration showcases the different options for customizing the cursor behavior in a jqPlot chart using the `cursor` object.  It controls aspects such as cursor style, tooltip display, tooltip location, format strings, and axes groupings to provide informative feedback on mouse interactions.\nSOURCE: https://github.com/kudaraidee/yiimp/blob/dev/web/extensions/jqplot/jqPlotOptions.txt#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ncursor: {\n        style: 'crosshair',     // A CSS spec for the cursor type to change the \n                                // cursor to when over plot.\n        show: true, \n        showTooltip: true,      // show a tooltip showing cursor position.\n        followMouse: false,     // whether tooltip should follow the mouse or be stationary.\n        tooltipLocation: 'se',  // location of the tooltip either relative to the mouse \n                                // (followMouse=true) or relative to the plot.  One of\n                                // the compass directions, n, ne, e, se, etc.\n        tooltipOffset: 6,       // pixel offset of the tooltip from the mouse or the axes.\n        showTooltipGridPosition: false,     // show the grid pixel coordinates of the mouse\n                                            // in the tooltip.\n        showTooltipUnitPosition: true,      // show the coordinates in data units of the mouse \n                                            // in the tooltip.\n        tooltipFormatString: '%.4P',    // sprintf style format string for tooltip values.\n        useAxesFormatters: true,        // whether to use the same formatter and formatStrings\n                                        // as used by the axes, or to use the formatString\n                                        // specified on the cursor with sprintf.\n        tooltipAxesGroups: [],  // show only specified axes groups in tooltip.  Would specify like:\n                                // [['xaxis', 'yaxis'], ['xaxis', 'y2axis']].  By default, all axes\n                                // combinations with for the series in the plot are shown.\n        \n    }\n```\n\n----------------------------------------\n\nTITLE: Extract and Process Style Blocks with HTMLPurifier PHP\nDESCRIPTION: This PHP code snippet demonstrates how to use the Filter.ExtractStyleBlocks directive in HTMLPurifier to extract style blocks from HTML, clean them with CSSTidy, and save them as separate CSS files. It requires HTMLPurifier and CSSTidy libraries. The extracted styles are then linked in the HTML head.\nSOURCE: https://github.com/kudaraidee/yiimp/blob/dev/web/framework/vendors/htmlpurifier/standalone/HTMLPurifier/ConfigSchema/schema/Filter.ExtractStyleBlocks.txt#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n    header('Content-type: text/html; charset=utf-8');\n    echo '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n?>\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n  \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"en\" xml:lang=\"en\">\n<head>\n  <title>Filter.ExtractStyleBlocks</title>\n<?php\n    require_once '/path/to/library/HTMLPurifier.auto.php';\n    require_once '/path/to/csstidy.class.php';\n\n    $dirty = '<style>body {color:#F00;}</style> Some text';\n\n    $config = HTMLPurifier_Config::createDefault();\n    $config->set('Filter', 'ExtractStyleBlocks', true);\n    $purifier = new HTMLPurifier($config);\n\n    $html = $purifier->purify($dirty);\n\n    // This implementation writes the stylesheets to the styles/ directory.\n    // You can also echo the styles inside the document, but it's a bit\n    // more difficult to make sure they get interpreted properly by\n    // browsers; try the usual CSS armoring techniques.\n    $styles = $purifier->context->get('StyleBlocks');\n    $dir = 'styles/';\n    if (!is_dir($dir)) mkdir($dir);\n    $hash = sha1($_GET['html']);\n    foreach ($styles as $i => $style) {\n        file_put_contents($name = $dir . $hash . \"_$i\");\n        echo '<link rel=\"stylesheet\" type=\"text/css\" href=\"'.$name.'\" />';\n    }\n?>\n</head>\n<body>\n  <div>\n    <?php echo $html; ?>\n  </div>\n</b\n```\n\n----------------------------------------\n\nTITLE: Customizing Highlighting in jqPlot\nDESCRIPTION: This configuration block shows how to customize the highlighting of data points in jqPlot. It includes adjustments for line width, marker size, tooltip display and location, fade effects, and value formatting when a data point is highlighted.\nSOURCE: https://github.com/kudaraidee/yiimp/blob/dev/web/extensions/jqplot/jqPlotOptions.txt#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nhighlighter: {\n        lineWidthAdjust: 2.5,   // pixels to add to the size line stroking the data point marker\n                                // when showing highlight.  Only affects non filled data point markers.\n        sizeAdjust: 5,          // pixels to add to the size of filled markers when drawing highlight.\n        showTooltip: true,      // show a tooltip with data point values.\n        tooltipLocation: 'nw',  // location of tooltip: n, ne, e, se, s, sw, w, nw.\n        fadeTooltip: true,      // use fade effect to show/hide tooltip.\n        tooltipFadeSpeed: \"fast\"// slow, def, fast, or a number of milliseconds.\n        tooltipOffset: 2,       // pixel offset of tooltip from the highlight.\n        tooltipAxes: 'both',    // which axis values to display in the tooltip, x, y or both.\n        tooltipSeparator: ', '  // separator between values in the tooltip.\n        useAxesFormatters: true // use the same format string and formatters as used in the axes to\n                                // display values in the tooltip.\n        tooltipFormatString: '%.5P' // sprintf format string for the tooltip.  only used if\n                                    // useAxesFormatters is false.  Will use sprintf formatter with\n                                    // this string, not the axes formatters.\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring Trendlines in jqPlot\nDESCRIPTION: This code segment shows how to add and configure trendlines in jqPlot charts using the `trendline` object within `seriesDefaults`. It covers options for displaying the trendline, setting its color, label, type (linear, exponential), shadow, line width, angle, offset, depth, and opacity.\nSOURCE: https://github.com/kudaraidee/yiimp/blob/dev/web/extensions/jqplot/jqPlotOptions.txt#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nseriesDefaults: {\n        trendline: {\n            show: true,         // show the trend line\n            color: '#666666',   // CSS color spec for the trend line.\n            label: '',          // label for the trend line.\n            type: 'linear',     // 'linear', 'exponential' or 'exp'\n            shadow: true,       // show the trend line shadow.\n            lineWidth: 1.5,     // width of the trend line.\n            shadowAngle: 45,    // angle of the shadow.  Clockwise from x axis.\n            shadowOffset: 1.5,  // offset from the line of the shadow.\n            shadowDepth: 3,     // Number of strokes to make when drawing shadow.  \n                                // Each stroke offset by shadowOffset from the last.\n            shadowAlpha: 0.07   // Opacity of the shadow    \n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Defining Color Keyword Array in PHP\nDESCRIPTION: This code snippet defines a PHP array named `$colorKeywords` that maps common color names to their corresponding hexadecimal color codes.  It's designed to be used as a lookup table to convert color names to hex codes, enabling case-insensitive lookups during color parsing. The keys are color names and values are hex color codes.\nSOURCE: https://github.com/kudaraidee/yiimp/blob/dev/web/framework/vendors/htmlpurifier/standalone/HTMLPurifier/ConfigSchema/schema/Core.ColorKeywords.txt#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\narray (\n  'maroon' => '#800000',\n  'red' => '#FF0000',\n  'orange' => '#FFA500',\n  'yellow' => '#FFFF00',\n  'olive' => '#808000',\n  'purple' => '#800080',\n  'fuchsia' => '#FF00FF',\n  'white' => '#FFFFFF',\n  'lime' => '#00FF00',\n  'green' => '#008000',\n  'navy' => '#000080',\n  'blue' => '#0000FF',\n  'aqua' => '#00FFFF',\n  'teal' => '#008080',\n  'black' => '#000000',\n  'silver' => '#C0C0C0',\n  'gray' => '#808080',\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Bar Chart Renderer Options in jqPlot\nDESCRIPTION: This snippet illustrates how to customize the appearance of bar charts using `rendererOptions` within the `seriesDefaults` object. It allows for specifying parameters such as `barPadding`, `barMargin`, `barDirection`, `barWidth`, `shadowOffset`, `shadowDepth`, and `shadowAlpha` to fine-tune the visual representation of bars.\nSOURCE: https://github.com/kudaraidee/yiimp/blob/dev/web/extensions/jqplot/jqPlotOptions.txt#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nseriesDefaults: {\n        rendererOptions: {\n            barPadding: 8,      // number of pixels between adjacent bars in the same \n                                // group (same category or bin).\n            barMargin: 10,      // number of pixels between adjacent groups of bars.\n            barDirection: 'vertical', // vertical or horizontal.\n            barWidth: null,     // width of the bars.  null to calculate automatically.\n            shadowOffset: 2,    // offset from the bar edge to stroke the shadow.\n            shadowDepth: 5,     // number of strokes to make for the shadow.\n            shadowAlpha: 0.8,   // transparency of the shadow.\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Including jqPlot Plugins\nDESCRIPTION: This snippet demonstrates how to include jqPlot plugins in an HTML page. Plugins extend the functionality of jqPlot. It requires including the plugin's JavaScript file after the main jqPlot file.\nSOURCE: https://github.com/kudaraidee/yiimp/blob/dev/web/extensions/jqplot/usage.txt#_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n<link rel=\"stylesheet\" type=\"text/css\" href=\"jquery.jqplot.css\" />\n<!--[if IE]><script language=\"javascript\" type=\"text/javascript\" src=\"excanvas.js\"></script><![endif]-->\n<script language=\"javascript\" type=\"text/javascript\" src=\"jquery.min.js\"></script>\n<script language=\"javascript\" type=\"text/javascript\" src=\"jquery.jqplot.min.js\"></script>\n<script language=\"javascript\" type=\"text/javascript\" src=\"jqplot.logAxisRenderer.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Grid Properties in jqPlot\nDESCRIPTION: This code defines the grid properties for a jqPlot chart, including the grid renderer, dimensions (height and width), and padding (top, bottom, left, and right). It also allows specifying a 'noDataIndicator' object for handling cases where no data is provided.\nSOURCE: https://github.com/kudaraidee/yiimp/blob/dev/web/extensions/jqplot/jqPlotOptions.txt#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ngrid: {\n        renderer: $.jqplot.CanvasGridRenderer,  // renderer to use to draw the grid.\n        rendererOptions: {}         // options to pass to the renderer.  Note, the default\n                                    // CanvasGridRenderer takes no additional options.\n    },\n    \n    // Size of the grid containing the plot.\n    gridDimensions: {\n        height: null,\n        width: null\n    },\n\n    // Padding to apply around the grid containing the plot.\n    gridPadding: {\n        top: null,\n        bottom: null,\n        left: null,\n        right: null\n    },\n\n    noDataIndicator : object, // For setting up a mock plot with a data loading indicator if\n                              // no data is specified.  Must have .show=true, .axes, and a\n                              // .indicator string that will be displayed.\n```\n\n----------------------------------------\n\nTITLE: Include and Use Console Normalizer in HTML\nDESCRIPTION: This code snippet demonstrates how to include the `normalizeconsole.min.js` file in an HTML document and then use the console object for logging, timing, and grouping. It shows how to use console.log, console.time, console.timeEnd, console.group, and console.groupEnd. This ensures that these methods work correctly even in older versions of Internet Explorer.\nSOURCE: https://github.com/kudaraidee/yiimp/blob/dev/web/framework/vendors/console-normalizer/README.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"normalizeconsole.min.js\"></script>\n<script>\n    console.group('Play around');\n    console.time('timer');\n\n    console.log('hello'); // does not blow up if IE console is closed\n\n    console.log.apply(console, ['one', 'two', 'three']); // does not cause an Invocation error\n\n    typeof(console.log); // function (some things you shouldn't have to say...)\n\n    console.info();\n    console.warn();\n    console.error();\n\n    console.timeEnd('timer');\n    console.groupEnd();\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring HTML Definition ID in PHP\nDESCRIPTION: This code snippet demonstrates how to set the 'HTML.DefinitionID' configuration option in HTML Purifier to manage custom HTML definitions. It initializes the configuration, sets the DefinitionID to '1', retrieves the HTML definition, and adds a custom attribute ('tabindex') to the 'a' tag. This ensures that custom modifications are properly cached and don't conflict with default configurations.\nSOURCE: https://github.com/kudaraidee/yiimp/blob/dev/web/framework/vendors/htmlpurifier/standalone/HTMLPurifier/ConfigSchema/schema/HTML.DefinitionID.txt#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n$config = HTMLPurifier_Config::createDefault();\n$config->set('HTML', 'DefinitionID', '1');\n$def = $config->getHTMLDefinition();\n$def->addAttribute('a', 'tabindex', 'Number');\n```\n\n----------------------------------------\n\nTITLE: Configuration Setting: Core.RemoveInvalidImg\nDESCRIPTION: This snippet defines a configuration option, `Core.RemoveInvalidImg`, which is a boolean value set to `true` by default.  It determines whether the system should proactively check URIs in `img` tags and remove invalid ones. Disabling this option reverts the behavior to pre-1.3.0 versions.\nSOURCE: https://github.com/kudaraidee/yiimp/blob/dev/web/framework/vendors/htmlpurifier/standalone/HTMLPurifier/ConfigSchema/schema/Core.RemoveInvalidImg.txt#_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\nCore.RemoveInvalidImg\nTYPE: bool\nDEFAULT: true\nVERSION: 1.3.0\n--DESCRIPTION--\n\n<p>\n  This directive enables pre-emptive URI checking in <code>img</code>\n  tags, as the attribute validation strategy is not authorized to\n  remove elements from the document. Revert to pre-1.3.0 behavior by setting to false.\n</p>\n--# vim: et sw=4 sts=4\n```\n\n----------------------------------------\n\nTITLE: Customizing Pie Chart Renderer in jqPlot\nDESCRIPTION: This code snippet provides configuration options for customizing the appearance of pie charts in jqPlot through the `rendererOptions` of the `seriesDefaults` object. Options include diameter, padding, slice margin, fill, shadow offset, depth and opacity.\nSOURCE: https://github.com/kudaraidee/yiimp/blob/dev/web/extensions/jqplot/jqPlotOptions.txt#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nseriesDefaults: {\n        rendererOptions: {\n            diameter: undefined, // diameter of pie, auto computed by default.\n            padding: 20,        // padding between pie and neighboring legend or plot margin.\n            sliceMargin: 0,     // gap between slices.\n            fill: true,         // render solid (filled) slices.\n            shadowOffset: 2,    // offset of the shadow from the chart.\n            shadowDepth: 5,     // Number of strokes to make when drawing shadow.  Each stroke is\n                                // offset by shadowOffset from the last.\n            shadowAlpha: 0.07   // Opacity of the shadow\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: jqPlot Setup Includes (HTML)\nDESCRIPTION: This snippet shows the necessary HTML includes to use jqPlot in a web page. It includes jQuery, the jqPlot plugin, the jqPlot CSS file, and optionally the excanvas script for IE support.  Ensure these dependencies are loaded in the specified order within the HTML head.\nSOURCE: https://github.com/kudaraidee/yiimp/blob/dev/web/extensions/jqplot/README.txt#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!--[if lt IE 9]><script language=\"javascript\" type=\"text/javascript\" src=\"excanvas.js\"></script><![endif]-->\n<script language=\"javascript\" type=\"text/javascript\" src=\"jquery-1.4.4.min.js\"></script>\n<script language=\"javascript\" type=\"text/javascript\" src=\"jquery.jqplot.min.js\"></script>\n<link rel=\"stylesheet\" type=\"text/css\" href=\"jquery.jqplot.css\" />\n```\n\n----------------------------------------\n\nTITLE: Definition Revision Metadata\nDESCRIPTION: Defines the metadata for a revision identifier. It specifies the data type as int, the version as 2.0.0, and the default value as 1. The description explains its role in uniquely identifying custom definitions and managing cache updates.\nSOURCE: https://github.com/kudaraidee/yiimp/blob/dev/web/framework/vendors/htmlpurifier/standalone/HTMLPurifier/ConfigSchema/schema/HTML.DefinitionRev.txt#_snippet_0\n\nLANGUAGE: Other\nCODE:\n```\nHTML.DefinitionRev\nTYPE: int\nVERSION: 2.0.0\nDEFAULT: 1\n--DESCRIPTION--\n\n<p>\n    Revision identifier for your custom definition specified in\n    %HTML.DefinitionID.  This serves the same purpose: uniquely identifying\n    your custom definition, but this one does so in a chronological\n    context: revision 3 is more up-to-date then revision 2.  Thus, when\n    this gets incremented, the cache handling is smart enough to clean\n    up any older revisions of your definition as well as flush the\n    cache.\n</p>\n--# vim: et sw=4 sts=4\n```\n\n----------------------------------------\n\nTITLE: Configure ForceNoIconv Boolean Option in HTMLPurifier\nDESCRIPTION: This code snippet configures a boolean option named 'Test.ForceNoIconv' within the HTMLPurifier framework. Setting this option to true forces the HTMLPurifier_Encoder to act as if iconv does not exist, and use only pure PHP implementations. This is useful for testing or environments where iconv is unavailable.\nSOURCE: https://github.com/kudaraidee/yiimp/blob/dev/web/framework/vendors/htmlpurifier/standalone/HTMLPurifier/ConfigSchema/schema/Test.ForceNoIconv.txt#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nTest.ForceNoIconv\nTYPE: bool\nDEFAULT: false\n--DESCRIPTION--\nWhen set to true, HTMLPurifier_Encoder will act as if iconv does not exist\nand use only pure PHP implementations.\n```\n\n----------------------------------------\n\nTITLE: Loading PHPMailer classes manually - PHP\nDESCRIPTION: This snippet demonstrates how to manually load PHPMailer classes if you're not using Composer. It includes the necessary 'require' statements to load the Exception, PHPMailer, and SMTP classes from their respective files. Make sure that the paths are correct for your project structure.\nSOURCE: https://github.com/kudaraidee/yiimp/blob/dev/web/yaamp/core/functions/phpmailer/phpmailer/README.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse PHPMailer\\PHPMailer\\PHPMailer;\nuse PHPMailer\\PHPMailer\\Exception;\n\nrequire 'path/to/PHPMailer/src/Exception.php';\nrequire 'path/to/PHPMailer/src/PHPMailer.php';\nrequire 'path/to/PHPMailer/src/SMTP.php';\n```\n\n----------------------------------------\n\nTITLE: Define Predicate for Removing Empty Elements in AutoFormat\nDESCRIPTION: This snippet defines an array used as a predicate to determine whether an empty HTML element should be removed during auto-formatting. It specifies that `colgroup`, `th`, `td` and `iframe` (if it has a `src` attribute) elements should be preserved even if they are empty.\nSOURCE: https://github.com/kudaraidee/yiimp/blob/dev/web/framework/vendors/htmlpurifier/standalone/HTMLPurifier/ConfigSchema/schema/AutoFormat.RemoveEmpty.Predicate.txt#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\narray('colgroup' => array(), 'th' => array(), 'td' => array(), 'iframe' => array('src'))\n```\n\n----------------------------------------\n\nTITLE: CSS AllowImportant Configuration\nDESCRIPTION: Defines a boolean parameter `CSS.AllowImportant` that controls whether `!important` is allowed in user CSS. If set to `false`, the `!important` modifier will be stripped from user-provided styles. The default value is `false`, and this configuration was introduced in version 3.1.0.\nSOURCE: https://github.com/kudaraidee/yiimp/blob/dev/web/framework/vendors/htmlpurifier/standalone/HTMLPurifier/ConfigSchema/schema/CSS.AllowImportant.txt#_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\nCSS.AllowImportant\nTYPE: bool\nDEFAULT: false\nVERSION: 3.1.0\n--DESCRIPTION--\nThis parameter determines whether or not !important cascade modifiers should\nbe allowed in user CSS. If false, !important will stripped.\n--# vim: et sw=4 sts=4\n```\n\n----------------------------------------\n\nTITLE: Including jqPlot Files\nDESCRIPTION: This snippet demonstrates how to include the necessary JavaScript and CSS files for jqPlot in an HTML page. It includes jQuery, the jqPlot plugin, the jqPlot CSS file, and optionally the excanvas script for Internet Explorer support (versions below 9).\nSOURCE: https://github.com/kudaraidee/yiimp/blob/dev/web/extensions/jqplot/usage.txt#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<!--[if lt IE 9]><script language=\"javascript\" type=\"text/javascript\" src=\"excanvas.js\"></script><![endif]-->\n<script language=\"javascript\" type=\"text/javascript\" src=\"jquery.min.js\"></script>\n<script language=\"javascript\" type=\"text/javascript\" src=\"jquery.jqplot.min.js\"></script>\n<link rel=\"stylesheet\" type=\"text/css\" href=\"jquery.jqplot.css\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Dragable Points in jqPlot\nDESCRIPTION: This code snippet defines configuration options for making data points dragable in a jqPlot chart. It allows setting a custom color for dragged points and lines, and enables constraining the dragging motion to either the x or y axis.\nSOURCE: https://github.com/kudaraidee/yiimp/blob/dev/web/extensions/jqplot/jqPlotOptions.txt#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ndragable: {\n        color: undefined,       // custom color to use for the dragged point and dragged line\n                                // section. default will use a transparent variant of the line color.\n        constrainTo: 'none',    // Constrain dragging motion to an axis: 'x', 'y', or 'none'.\n    }\n```\n\n----------------------------------------\n\nTITLE: Copyright Disclaimer Sample\nDESCRIPTION: This snippet provides a sample copyright disclaimer that can be used by an employer or school to disclaim all copyright interest in a library written by an individual. It includes the company/school name, library name, author name, signature, title, and date.\nSOURCE: https://github.com/kudaraidee/yiimp/blob/dev/web/framework/vendors/htmlpurifier/LICENSE.txt#_snippet_1\n\nLANGUAGE: Text\nCODE:\n```\nYoyodyne, Inc., hereby disclaims all copyright interest in the\nlibrary `Frob' (a library for tweaking knobs) written by James Random Hacker.\n\n<signature of Ty Coon>, 1 April 1990\nTy Coon, President of Vice\n```\n\n----------------------------------------\n\nTITLE: Configuring Log Axis in jqPlot\nDESCRIPTION: This snippet demonstrates how to configure a logarithmic axis in jqPlot using the `axesDefaults` object.  It sets the logarithmic base and the tick distribution method, either 'even' or 'power', controlling the spacing of ticks on the axis.\nSOURCE: https://github.com/kudaraidee/yiimp/blob/dev/web/extensions/jqplot/jqPlotOptions.txt#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\naxesDefaults: {\n        base: 10,                   // the logarithmic base.\n        tickDistribution: 'even',   // 'even' or 'power'.  'even' will produce ticks with even visual\n                                    // (pixel) spacing on the axis.  'power' will produce ticks spaced by \n                                    // increasing powers of the log base.\n    }\n```\n\n----------------------------------------\n\nTITLE: Plot Options Customization\nDESCRIPTION: This snippet shows how to customize a jqPlot chart by passing options to the `$.jqplot` function.  Options include title, axes customization, and series appearance (color).  The options object is the third parameter in the `$.jqplot` call.\nSOURCE: https://github.com/kudaraidee/yiimp/blob/dev/web/extensions/jqplot/usage.txt#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n$.jqplot('chartdiv',  [[[1, 2],[3,5.12],[5,13.1],[7,33.6],[9,85.9],[11,219.9]]],\n{ title:'Exponential Line',\n  axes:{yaxis:{min:-10, max:240}},\n  series:[{color:'#5FAB78'}]\n});\n```\n\n----------------------------------------\n\nTITLE: Log Y Axis Options with jqPlot\nDESCRIPTION: This snippet demonstrates customizing the log y-axis further with plugin-specific options, such as `tickDistribution`.  This uses the `jqplot.logAxisRenderer.js` plugin. The rendererOptions control specific rendering properties of the log axis.\nSOURCE: https://github.com/kudaraidee/yiimp/blob/dev/web/extensions/jqplot/usage.txt#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\n$.jqplot('chartdiv',  [[[1, 2],[3,5.12],[5,13.1],[7,33.6],[9,85.9],[11,219.9]]],\n{ title:'Exponential Line',\n  axes:{yaxis:{renderer: $.jqplot.LogAxisRenderer, tickDistribution:'power'}},\n  series:[{color:'#5FAB78'}]\n});\n```\n\n----------------------------------------\n\nTITLE: Using the Dragable and Trendline Plugins\nDESCRIPTION: This snippet shows how to use the `dragable` and `trendline` plugins. It demonstrates how to specify options for these plugins within the `series` array, including setting the color and constrainTo options for the `dragable` plugin, and the color for the `trendline` plugin.\nSOURCE: https://github.com/kudaraidee/yiimp/blob/dev/web/extensions/jqplot/optionsTutorial.txt#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nseries:[{\n    dragable: {\n        color: '#ff3366',\n        constrainTo: 'x'\n    },\n    trendline: {\n        color: '#cccccc'\n    }\n}]\n```\n\n----------------------------------------\n\nTITLE: Disabling Dragging and Trendlines on a Series\nDESCRIPTION: This snippet demonstrates how to disable the `dragable` and `trendline` plugins for a specific series. It sets the `isDragable` option directly on the series and the `show` option to false within the `trendline` object.\nSOURCE: https://github.com/kudaraidee/yiimp/blob/dev/web/extensions/jqplot/optionsTutorial.txt#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nseries:[{\n    dragable: {\n        color: '#ff3366',\n        constrainTo: 'x'\n    },\n    trendline: {\n        color: '#cccccc'\n    }\n}, {\n   isDragable: false,\n   trendline:{\n       show: false\n   }\n}]\n```\n\n----------------------------------------\n\nTITLE: Yiimp Configuration Setting\nDESCRIPTION: This snippet defines a configuration setting named `HTML.Nofollow` for the Yiimp platform. It is a boolean type, set to version 4.3.0 with a default value of FALSE. When enabled, it adds the `nofollow` attribute to all outgoing links.\nSOURCE: https://github.com/kudaraidee/yiimp/blob/dev/web/framework/vendors/htmlpurifier/standalone/HTMLPurifier/ConfigSchema/schema/HTML.Nofollow.txt#_snippet_0\n\nLANGUAGE: Other\nCODE:\n```\nHTML.Nofollow\nTYPE: bool\nVERSION: 4.3.0\nDEFAULT: FALSE\n--DESCRIPTION--\nIf enabled, nofollow rel attributes are added to all outgoing links.\n--# vim: et sw=4 sts=4\n```\n\n----------------------------------------\n\nTITLE: Log Y Axis with jqPlot\nDESCRIPTION: This snippet shows how to create a jqPlot chart with a log y-axis using the `jqplot.logAxisRenderer.js` plugin. The `renderer` property of the `yaxis` object in the options is set to `$.jqplot.LogAxisRenderer`.\nSOURCE: https://github.com/kudaraidee/yiimp/blob/dev/web/extensions/jqplot/usage.txt#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\n$.jqplot('chartdiv',  [[[1, 2],[3,5.12],[5,13.1],[7,33.6],[9,85.9],[11,219.9]]],\n{ title:'Exponential Line',\n  axes:{yaxis:{renderer: $.jqplot.LogAxisRenderer}},\n  series:[{color:'#5FAB78'}]\n});\n```\n\n----------------------------------------\n\nTITLE: Lighttpd Configuration for Yiimp\nDESCRIPTION: This Lighttpd configuration defines rewrite rules for handling requests to the Yiimp application. It rewrites URLs to include parameters for routing to the correct PHP scripts.\nSOURCE: https://github.com/kudaraidee/yiimp/blob/dev/README.md#_snippet_5\n\nLANGUAGE: Lighttpd\nCODE:\n```\n$HTTP[\"host\"] =~ \"yiimp.ccminer.org\" {\n\t        server.document-root = \"/var/yaamp/web\"\n\t        url.rewrite-if-not-file = (\n\t\t\t\"^(.*)/([0-9]+)$\" => \"index.php?r=$1&id=$2\",\n\t\t\t\"^(.*)\\?(.*)\" => \"index.php?r=$1&$2\",\n\t                \"^(.*)\" => \"index.php?r=$1\",\n\t                \".\" => \"index.php\"\n\t        )\n\n\t\turl.access-deny = ( \"~\", \".dat\", \".log\" )\n\t}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Plot\nDESCRIPTION: This snippet demonstrates how to create a basic jqPlot chart by calling the `$.jqplot` function with the ID of the container and the data to be plotted.  The first argument is the id of the div and the second is an array of data points.\nSOURCE: https://github.com/kudaraidee/yiimp/blob/dev/web/extensions/jqplot/usage.txt#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n$.jqplot('chartdiv',  [[[1, 2],[3,5.12],[5,13.1],[7,33.6],[9,85.9],[11,219.9]]]);\n```\n\n----------------------------------------\n\nTITLE: Customizing Axes and Series\nDESCRIPTION: This snippet demonstrates how to customize the y-axis minimum and maximum values, and the color of the second series. It shows the use of the `axes` and `series` options, including the array structure for series customization.\nSOURCE: https://github.com/kudaraidee/yiimp/blob/dev/web/extensions/jqplot/optionsTutorial.txt#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\noptionsObj = {\n   axes:{yaxis:{min:5, max:230}},\n   series:[{},{color:\"#33ff66\"}]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Language for PHPMailer Error Messages in PHP\nDESCRIPTION: This code snippet demonstrates how to set the language for PHPMailer error messages. The `setLanguage` method is called with the ISO 639-1 language code (e.g., 'fr' for French) and an optional path to the language directory.\nSOURCE: https://github.com/kudaraidee/yiimp/blob/dev/web/yaamp/core/functions/phpmailer/phpmailer/README.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n//To load the French version\n$mail->setLanguage('fr', '/optional/path/to/language/directory/');\n```\n\n----------------------------------------\n\nTITLE: Initializing jqPlot\nDESCRIPTION: This snippet shows how to initialize a jqPlot chart using the $.jqplot() function with data and an options object. It highlights the importance of using the options object to set plot attributes instead of directly modifying the chart object after creation.\nSOURCE: https://github.com/kudaraidee/yiimp/blob/dev/web/extensions/jqplot/optionsTutorial.txt#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nchart = $.jqplot('chart', dataSeries, optionsObj);\n```\n\n----------------------------------------\n\nTITLE: Hidden Elements Lookup Array\nDESCRIPTION: Defines an array that specifies which HTML elements should have their content removed when the tags are not allowed. The default configuration includes 'script' and 'style' tags, as their content is not displayed if the tags are removed.\nSOURCE: https://github.com/kudaraidee/yiimp/blob/dev/web/framework/vendors/htmlpurifier/standalone/HTMLPurifier/ConfigSchema/schema/Core.HiddenElements.txt#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\narray (\n  'script' => true,\n  'style' => true,\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Text Color and Grid Options\nDESCRIPTION: This snippet expands on the previous example by adding the ability to change the text color of the plot in addition to the grid shadow and border width. It showcases the merging of attributes in the options object with the jqPlot object.\nSOURCE: https://github.com/kudaraidee/yiimp/blob/dev/web/extensions/jqplot/optionsTutorial.txt#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\noptionObj = {\n   textColor:\"#ff0000\",\n   grid:{shadow:false, borderWidth:9.0}\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Plot Container\nDESCRIPTION: This snippet shows how to add a container (div element) to an HTML page where the jqPlot chart will be rendered. The container needs to have a specified width and height to properly display the chart.\nSOURCE: https://github.com/kudaraidee/yiimp/blob/dev/web/extensions/jqplot/usage.txt#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<div id=\"chartdiv\" style=\"height:400px;width:300px; \"></div>\n```\n\n----------------------------------------\n\nTITLE: Running Yiimp Docker Container\nDESCRIPTION: This command runs the Yiimp Docker container with specified volume mounts and network configuration. It mounts the config, log, and web directories, as well as the supervisord configuration file, allowing for customization and access to logs.\nSOURCE: https://github.com/kudaraidee/yiimp/blob/dev/README.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmake run\n```\n\nLANGUAGE: Shell\nCODE:\n```\npodman run --name=yiimp --network=host -v ./config:/etc/yiimp -v ./log:/var/www/log -v ./log:/var/log/yiimp -v ./yiimp/web:/var/www/ -v ./log:/var/log/apache2 -v ./config/supervisord.conf:/etc/supervisor/conf.d/supervisord.conf yiimp\n```\n\n----------------------------------------\n\nTITLE: Supervisorctl Commands\nDESCRIPTION: These commands interact with the supervisord process inside the container to control different parts of the mining pool. It allows for starting, stopping, and checking the status of individual components.\nSOURCE: https://github.com/kudaraidee/yiimp/blob/dev/README.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nsupervisorctl -u yiimp -p supervisor -s http://127.0.0.1:8900 status\n```\n\n----------------------------------------\n\nTITLE: Using BarRenderer and CategoryAxisRenderer\nDESCRIPTION: This snippet demonstrates how to use the `BarRenderer` for series and the `CategoryAxisRenderer` for the x-axis.  It shows how to change the default renderers for different parts of the plot.\nSOURCE: https://github.com/kudaraidee/yiimp/blob/dev/web/extensions/jqplot/optionsTutorial.txt#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\noptionsObj = {\n   seriesDefaults:{renderer:$.jqplot.BarRenderer},\n   axes:{xaxis:{renderer:$.jqplot.CategoryAxisRenderer}}\n}\n```\n\n----------------------------------------\n\nTITLE: Using axesDefaults and seriesDefaults\nDESCRIPTION: This snippet shows how to use `axesDefaults` and `seriesDefaults` to apply options to all axes and series at once. It demonstrates setting a minimum value for all axes and disabling markers for all series.\nSOURCE: https://github.com/kudaraidee/yiimp/blob/dev/web/extensions/jqplot/optionsTutorial.txt#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\noptionsObj = {axesDefaults:{min:0}, seriesDefaults:{showMarker:false}}\n```\n\n----------------------------------------\n\nTITLE: Setting the Plot Title\nDESCRIPTION: This snippet demonstrates two equivalent ways to set the plot title: using a string value or a nested object with the `text` property. It showcases the shortcut for assigning a title to the plot.\nSOURCE: https://github.com/kudaraidee/yiimp/blob/dev/web/extensions/jqplot/optionsTutorial.txt#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\noptionsObj = {title:{text:\"My Plot\"}}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\noptionsObj = {title:\"My Plot\"}\n```\n\n----------------------------------------\n\nTITLE: Bar Renderer Plugin with jqPlot\nDESCRIPTION: This snippet shows how to use the `jqplot.barRenderer.min.js` plugin to render a series as a bar graph. The `renderer` property of the `series` object in the options is set to `$.jqplot.BarRenderer`.\nSOURCE: https://github.com/kudaraidee/yiimp/blob/dev/web/extensions/jqplot/usage.txt#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\n<script language=\"javascript\" type=\"text/javascript\" src=\"plugins/jqplot.barRenderer.min.js\"></script>\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n$.jqplot('chartdiv',  [[34.53, 56.32, 25.1, 18.6]], {series:[{renderer:$.jqplot.BarRenderer}]});\n```\n\n----------------------------------------\n\nTITLE: Apache Configuration for Yiimp\nDESCRIPTION: This Apache configuration uses mod_rewrite to route requests to the index.php file. It checks if the requested file exists and, if not, rewrites the URL to include the request as a parameter.\nSOURCE: https://github.com/kudaraidee/yiimp/blob/dev/README.md#_snippet_4\n\nLANGUAGE: Apache\nCODE:\n```\nRewriteEngine on\n\nRewriteCond %{REQUEST_FILENAME} !-f\nRewriteRule ^(.*) index.php?r=$1 [QSA]\n```\n\n----------------------------------------\n\nTITLE: Nginx Configuration for Yiimp\nDESCRIPTION: This Nginx configuration block handles routing requests to the PHP application. It uses `try_files` to rewrite requests and passes PHP files to the FastCGI process.\nSOURCE: https://github.com/kudaraidee/yiimp/blob/dev/README.md#_snippet_3\n\nLANGUAGE: Nginx\nCODE:\n```\nlocation / {\n\ttry_files $uri @rewrite;\n}\n\nlocation @rewrite {\n\trewrite ^/(.*)$ /index.php?r=$1;\n}\n\nlocation ~ \\\\.php$ {\n\tfastcgi_pass unix:/var/run/php5-fpm.sock;\n\tfastcgi_index index.php;\n\tinclude fastcgi_params;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing PHPMailer with Composer - JSON\nDESCRIPTION: This snippet shows how to add PHPMailer as a dependency in your composer.json file. It specifies version compatibility using '^6.8.0', meaning it will install the latest version in the 6.8.x series.\nSOURCE: https://github.com/kudaraidee/yiimp/blob/dev/web/yaamp/core/functions/phpmailer/phpmailer/README.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n\"phpmailer/phpmailer\": \"^6.8.0\"\n```\n\n----------------------------------------\n\nTITLE: Robots.txt Disallow All\nDESCRIPTION: This robots.txt configuration file instructs all web crawlers to not access any part of the website. 'User-agent: *' applies the rule to all user-agents and 'Disallow: /' specifies that all URLs should be disallowed.\nSOURCE: https://github.com/kudaraidee/yiimp/blob/dev/web/robots.txt#_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\nUser-agent: *\nDisallow: /\n```\n\n----------------------------------------\n\nTITLE: Ant Build Command\nDESCRIPTION: This command is used to get a description of the various build targets for the jqPlot project. It requires Apache Ant to be installed. Running this command in the jqplot directory will provide information about the available build options.\nSOURCE: https://github.com/kudaraidee/yiimp/blob/dev/web/extensions/jqplot/README.txt#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nant -p\n```\n\n----------------------------------------\n\nTITLE: Setting Grid Shadow and Border Width\nDESCRIPTION: This snippet demonstrates how to modify the grid's shadow and border width using the options object. It uses a nested object structure to target specific attributes within the grid object.\nSOURCE: https://github.com/kudaraidee/yiimp/blob/dev/web/extensions/jqplot/optionsTutorial.txt#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\noptionObj = {grid:{shadow:false, borderWidth:9.0}};\n```\n\n----------------------------------------\n\nTITLE: Customizing the Highlighter Plugin\nDESCRIPTION: This snippet demonstrates how to customize the `highlighter` plugin by setting its options within the `highlighter` attribute of the options object. It changes the tooltip fade speed and location.\nSOURCE: https://github.com/kudaraidee/yiimp/blob/dev/web/extensions/jqplot/optionsTutorial.txt#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\noptionsObj = {\n    highlighter:{tooltipFadeSpeed:'slow', tooltipLocation:'n'}\n}\n```\n\n----------------------------------------\n\nTITLE: Assigning Renderer Options\nDESCRIPTION: This snippet demonstrates how to assign options to renderers using the `rendererOptions` option. It shows how to set the bar width for the `BarRenderer`.\nSOURCE: https://github.com/kudaraidee/yiimp/blob/dev/web/extensions/jqplot/optionsTutorial.txt#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\noptionsObj = {\n   seriesDefaults:{\n       renderer:$.jqplot.BarRenderer},\n       rendererOptions:{\n           barWidth:25\n       },\n   axes:{xaxis:{renderer:$.jqplot.CategoryAxisRenderer}}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuration Array for HTML Tidy Removal\nDESCRIPTION: This snippet shows the configuration array used to specify HTML Tidy fixes that should be removed. It allows customization of the default Tidy settings within the yiimp project.\nSOURCE: https://github.com/kudaraidee/yiimp/blob/dev/web/framework/vendors/htmlpurifier/standalone/HTMLPurifier/ConfigSchema/schema/HTML.TidyRemove.txt#_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\nHTML.TidyRemove\nTYPE: lookup\nVERSION: 2.0.0\nDEFAULT: array()\n```\n\n----------------------------------------\n\nTITLE: Installing PHPMailer with Composer - Shell\nDESCRIPTION: This snippet shows the command to install PHPMailer using Composer. This command adds PHPMailer as a dependency to your project, downloading it and its dependencies into the 'vendor' directory.\nSOURCE: https://github.com/kudaraidee/yiimp/blob/dev/web/yaamp/core/functions/phpmailer/phpmailer/README.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ncomposer require phpmailer/phpmailer\n```\n\n----------------------------------------\n\nTITLE: Updating Git Remote URL\nDESCRIPTION: This code snippet shows how to update the remote URL for a Git repository, specifically for PHPMailer, if you have cloned it from a location prior to the move to the PHPMailer GitHub organization. This command sets the upstream remote to the new GitHub URL.\nSOURCE: https://github.com/kudaraidee/yiimp/blob/dev/web/yaamp/core/functions/phpmailer/phpmailer/README.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\ngit remote set-url upstream https://github.com/PHPMailer/PHPMailer.git\n```\n\n----------------------------------------\n\nTITLE: Building Yiimp Docker Image\nDESCRIPTION: These commands build the Docker image for Yiimp using either `make` or `podman`. The `podman` command specifies the tag, target, and Dockerfile to use during the build process.\nSOURCE: https://github.com/kudaraidee/yiimp/blob/dev/README.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake build\n```\n\nLANGUAGE: Shell\nCODE:\n```\npodman build --tag yiimp --target image-prod -f Dockerfile.yiimp\n```\n\n----------------------------------------\n\nTITLE: Applying LGPL Terms to a New Library\nDESCRIPTION: This snippet demonstrates how to attach the required notices to a new library in order to license it under the GNU Lesser General Public License. It includes the copyright line, license terms, warranty disclaimer, and contact information for the licensor.\nSOURCE: https://github.com/kudaraidee/yiimp/blob/dev/web/framework/vendors/htmlpurifier/LICENSE.txt#_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\n<one line to give the library's name and a brief idea of what it does.>\nCopyright (C) <year>  <name of author>\n\nThis library is free software; you can redistribute it and/or\nmodify it under the terms of the GNU Lesser General Public\nLicense as published by the Free Software Foundation; either\nversion 2.1 of the License, or (at your option) any later version.\n\nThis library is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\nLesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public\nLicense along with this library; if not, write to the Free Software\nFoundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n```"
  }
]